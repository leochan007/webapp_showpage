{"version":3,"sources":["hooks/common/useCustomDCEffect.ts","defs/swap_defs.ts","stores/account/reducer.ts","stores/token/hook.ts","defs/web3_defs.ts","stores/account/hook.ts","state_machine/machine_builder.ts","stores/Amm/AmmMap/hook.ts","stores/trading/hook.ts","stores/walletLayer2/hook.ts","stores/walletLayer1/hook.ts","networks/web3_connectors.ts","stores/Amm/AmmMap/reducer.ts","index.tsx","stores/socket/reducer.ts","stores/trading/reducer.ts","storage/index.ts","utils/obj_tools.ts","stores/ticker/reducer.ts","hooks/web3/useWeb3.ts","stores/userRewards/hook.ts","stores/system/reducer.ts","stores/system/interface.ts","stores/walletLayer1/reducer.ts","stores/walletLayer2/reducer.ts","stores/userRewards/reducer.ts","stores/Amm/AmmActivityMap/reducer.ts","stores/token/reducer.ts","hooks/help/makeUIAmmActivityMap.ts","stores/system/hook.ts","hooks/help/marketTable.ts","utils/swap_calc_utils.ts","stores/ticker/hook.ts","stores/Amm/AmmActivityMap/hook.ts","stores/socket/hook.ts","state_machine/account_machine_spec.ts","hooks/help/ammPairDetail.ts","hooks/help/coinPairInit.ts","hooks/help/connectStatusCallback.ts","hooks/help/makeCache.ts","hooks/help/makeMyPoolDetail.ts","hooks/help/makeTickView.ts","hooks/help/pairDetail.ts","hooks/help/makeWallet.ts","utils/web3_tools.ts","provider/global/index.tsx","provider/web3ReactManager/index.tsx","provider/dev-wrapper/index.tsx","stores/apis/api.ts","stores/global/actions.ts","stores/transactions/reducer.ts","stores/Amm/AmmTrades/reducer.ts","stores/Amm/AmmActivityMap/saga.ts","stores/Amm/AmmMap/saga.ts","stores/Amm/AmmTrades/saga.ts","stores/Amm/index.ts","stores/token/saga.ts","stores/ticker/saga.ts","stores/system/saga.ts","stores/walletLayer1/saga.ts","stores/walletLayer2/saga.ts","stores/userRewards/saga.ts","stores/socket/saga.ts","stores/rootSaga.ts","stores/index.ts","stores/constant.ts","services/socketUtil.ts","pages/ErrorPage/index.tsx","utils/dt_tools.ts","hooks/exchange/useApi.ts","services/tickerService.ts","services/ammPoolService.ts","pages/LiquidityPage/PoolsPanel/hook.ts","hooks/help/volumeToCount.ts","hook.ts","defs/common_defs.ts","hooks/modal/useModals.ts","utils/hook_tools.ts","hooks/common/useCommon.ts","hooks/exchange/useExchangeAPI.ts","layouts/header/hook.tsx","pages/AccountPage/index.tsx","layouts/header/index.tsx","pages/QuotePage/hook.ts","pages/QuotePage/index.tsx","pages/SwapPage/panel/BasicInfoPanel/hook.tsx","pages/SwapPage/panel/BasicInfoPanel/index.tsx","pages/SwapPage/panel/TradePanel/index.tsx","pages/SwapPage/index.tsx","pages/SwapPage/hook.ts","hooks/exchange/useWebsocketApi.ts","hooks/exchange/useWsAPI.ts","pages/DebugPage/index.tsx","pages/Layer2Page/TxPanel/index.tsx","pages/Layer2Page/AssetPanel/index.tsx","pages/Layer2Page/TradePanel/index.tsx","pages/Layer2Page/OrderPanel/index.tsx","pages/SettingPage/SettingPanel.tsx","pages/Layer2Page/index.tsx","pages/LiquidityPage/PoolsPanel/index.tsx","pages/LiquidityPage/AmmPanel/index.tsx","pages/LiquidityPage/AmmPanel/hooks.ts","pages/LiquidityPage/CoinPairPanel/hooks.ts","pages/LiquidityPage/CoinPairPanel/index.tsx","pages/LiquidityPage/AmmMining/index.tsx","pages/LiquidityPage/AmmMining/hook.ts","pages/LiquidityPage/MyLiquidity/index.tsx","pages/LiquidityPage/MyLiquidity/hook.ts","pages/LiquidityPage/index.tsx","pages/LiquidityPage/hook.ts","routers/index.tsx"],"names":["useCustomDCEffect","action","deps","useDeepCompareEffect","OrderHandling","BIG0","toBig","BIG1","BIG10","BIG10K","MULTI_FACTOR","initialState","defaultAccId","process","REACT_APP_TEST_ACCOUND_ID","UserStorage","getAccountId","defaultApiKey","REACT_APP_TEST_API_KEY","getApikey","defaultOwner","REACT_APP_TEST_OWNER","getAccount","defaultEddsaKey","REACT_APP_TEST_EDDSA_KEY","getEddsakey","console","log","JSON","stringify","accAddr","status","AccountStatus","UNCONNNECTED","accountId","publicKey","nonce","isContractAddress","apiKey","eddsaKey","connectName","ConnectorNames","Unknown","connectNameTemp","accountSlice","createSlice","name","reducers","reset","state","initState","Object","assign","setAccAddr","payload","setAccountInfo","owner","setApikey","setAccountStatus","setEddsaKey","setConnectName","setConnectNameTemp","setIsContractAddress","actions","useTokenMap","tokenMap","useSelector","dispatch","useDispatch","statusUnset","tokenMapSlice","undefined","updateTokenMap","getTokenMap","connectorsByName","Injected","injected","Network","network","WalletConnect","walletconnect","WalletLink","walletlink","Ledger","ledger","Trezor","trezor","Authereum","authereum","useWeb3Account","useActiveWeb3React","connector","library","account","chainId","active","error","isConnected","voca","isBlank","useAccount","isNoAccount","NOACCOUNT","isActivated","ACTIVATED","useStateMachine","spec","machine","AccountMachineSpec","currentState","event","stateTransitions","states","Error","nextState","sendEvent","React","useCallback","useConnect","activate","useState","activatingConnector","setActivatingConnector","connect","item_name","isSwitch","newConnector","store","getState","StatusChangeEvent","Reset","Connecting","useDisconnect","deactivate","disconnect","useUnlock","exchangeApi","useExchangeAPI","userApi","useUserAPI","tradingInfo","useGetTradingInfo","resetLayer2","useWalletLayer2","lock","a","Lock","unlock","exchangeInfo","exchangeAddress","LOCKED","sk","apikey","getProvider","provider","web3","Web3","sign_tools","eddsakey","toHex","keyPair","secretKey","getUserApiKey","Unlock","useCheckAccStatus","web3Account","marketArray","lv1Acc","prevChainId","usePrevious","prevWeb3Account","cleanUp","CONNECTED","DEPOSITING","DEPOSIT_TO_CONFIREM","UNACTIVATED","ARPROVING","APPROV_TO_CONFIRM","resetLayer1","acc","accInfo","length","updateWalletLayer1","HasPubkey","dumpError400","response","data","resultInfo","code","ErrorResponse","FinishDeposit","checkTimeout","handler","setInterval","isTimeOut","clearInterval","setHandler","updateWalletLayer2","getHandler","checkStatus","useAmmMap","ammMap","amm","ammMapSlice","updateAmmMap","getAmmMap","getChainId","system","trading","useUpdateChainId","useEffect","setChainId","ChainId","GORLI","useUpdateExchangeMarkets","api","getMixMarkets","setMarkets","useUpdateExchangeInfo","getExchangeInfo","setExchangeInfo","useUpdateAmmPoolConf","useAmmpoolAPI","getAmmPoolConf","ammPoolConf","setAmmPoolConf","useUpdateAmmPoolStats","getAmmPoolStats","ammPoolStats","setAmmPoolStats","useUpdateAmmActivityRules","getAmmPoolActivityRules","ammActivityRules","setAmmActivityRules","activityRules","useUpdateTokens","getTokens","tokens","setTokens","walletLayer2","walletLayer2Slice","getWalletLayer2","useWalletLayer1","walletLayer1","walletLayer1Slice","POLLING_INTERVAL","RPC_URLS","InjectedConnector","supportedChainIds","NetworkConnector","urls","1","5","defaultChainId","WalletConnectConnector","rpc","bridge","qrcode","pollingInterval","WalletLinkConnector","url","appName","LedgerConnector","TrezorConnector","manifestEmail","manifestAppUrl","AuthereumConnector","__timer__","errorMessage","STATUS","PENDING","getAmmMapStatus","ERROR","DONE","updateRealTimeAmmMap","UNSET","Web3ProviderNetwork","createWeb3ReactRoot","NetworkContextName","providers","LocalizationProvider","dateAdapter","MomentUtils","I18nextProvider","i18n","MuThemeProvider","theme","getTheme","ThemeProvider","Provider","ReactDOM","render","getLibrary","App","document","getElementById","socketSlice","socket","socketEnd","sendNewMessage","getSocketStatus","interval","markets","marketTrades","tickerMap","refreshRate","refreshRateSlow","tradingSlice","changeTradingInterval","setTickerMap","setMarketTrades","CONSTANTS","rawHandler","sessionStorage","getItem","Handler","parseInt","err","setItem","removeItem","dateTimeStr","localStorage","ActiveTime","now","Date","getTime","toString","tmpDt","SESSION_TIMEOUT_SECONDS","clear","rawId","AccountId","Account","Apikey","Eddsakey","orderHash","AmmOrder","address","current","HardwareAddresses","includes","toLowerCase","newValue","deepClone","result","constructor","key","hasOwnProperty","copyToClipBoard","text","execCommand","textarea","createElement","body","appendChild","value","select","removeChild","navigator","clipboard","writeText","window","clipboardData","setData","tickerMapSlice","getTicker","getTickers","getTickerStatus","context","useWeb3React","contextNetwork","useEtherscan","etherscanUrl","setEtherscanUrl","MAINNET","useEagerConnect","tried","setTried","isAuthorized","then","catch","useInactiveListener","onReConnectInjected","ethereum","reConnectInjected","on","handleChainChanged","handleAccountsChanged","accounts","removeListener","useUserRewards","userRewardsMap","userRewardsMapSlice","updateUserRewards","getUserRewards","env","ENV","PROD","baseURL","socketURL","faitPrices","gasPrice","forex","topics","systemSlice","updateSystem","updateSocketURL","updateRealTimeObj","getSystemStatus","setTopics","NETWORKEXTEND","getWalletLayer1Status","getWalletLayer2Status","getUserRewardsStatus","ammActivityMapSlice","ammActivityMap","getAmmActivityMap","getAmmActivityMapStatus","coinMap","addressIndex","marketMap","idIndex","getTokenMapStatus","marketCoins","getTokenPairMap","makeUIAmmActivityMap","myReward","type","ammPoolActivityStatus","ammActivityViewMap","forEach","reduce","prev","ammPoolActivityRule","awardRules","symbol","tokenId","item","rewardToken","myRewards","AmmPoolActivityStatus","InProgress","market","volumeToCount","currentRewards","volume","duration","from","rangeFrom","to","rangeTo","isPass","EndOfGame","push","makeAsCard","Reflect","ownKeys","_ammInfo","coinA","itemArray","map","coinAInfo","coinBInfo","coinB","activity","makeSummaryMyAmm","keys","test","match","ammUserReward","getOneRewardInfo","rewardDollar","rewardYuan","feeDollar","feeYuan","plus","toNumber","rewardToken2","feeA","feeB","reward","reward2","balanceA","balanceB","balanceDollar","balanceYuan","walletMap","snapShotData","volumeToCountAsBigNumber","feeRewards","times","price","ratio","BigNumber","count","div","ammPoolsBalance","lp","pooled","ammDetail","makeMyAmmWithSnapshot","_walletMap","ammUserRewardMap","makeMyAmmWithStat","_myAmm","totalLPToken","totalA","totalB","useSystem","getUserTrades","marketKey","userAPI","userTrades","makeMarketArray","coinKey","tradeArray","getBaseQuote","base","quote","settings","currency","side","Side","Sell","TradeTypes","Buy","amount","fm","fee","time","tradeTime","getUserAmmTransaction","LoopringAPI","ammpoolAPI","getUserAmmPoolTxs","userAmmPoolTxs","makeMyAmmMarketArray","marketTransaction","lpToken","txType","AmmTxType","JOIN","AmmTradeType","add","remove","totalDollar","totalYuan","Number","amountA","poolTokens","actualAmount","amountB","updatedAt","txStatus","getIcon","getIconByTokenInfo","token","addr","utils","getAddress","getToken","fromWEI","valueInWEI","precision","ceil","tokenInfo","precisionToFixed","decimals","useTicker","updateTickers","tickerKeys","updateTicker","tickerKey","useAmmActivityMap","updateAmmActivityMap","useSocket","HasNoPubkey","IsSmartWallet","ApproveSubmit","ApproveConfirmed","ammPairInit","pair","_ammCalcData","ammType","tickerData","coinInfoMap","AtoB","close","isNaN","baseVol","simpleName","quoteVol","AmmPanelType","Deposit","myCoinA","belong","balance","myCoinB","coinACount","coinBCount","coinPairInit","_tradeCalcData","sell","buy","coinSell","tradePairs","findIndex","ele","coinBuy","fnType","accountStaticCallBack","props","fn","args","UNKNOWN","call","DEFAULT","bntLabel","btnClickArray","setShowConnect","isShow","setShowDeposit","setShowAccountInfo","makeCache","__cache__","customSlippage","setSlippage","makeMyPoolRowWithPoolState","makeTickView","tick","floatTag","open","FloatTag","none","increase","decrease","change","timeUnit","priceYuan","priceDollar","pairDetailBlock","ammKey","Promise","resolve","reject","exchangeAPI","all","getAmmPoolSnapshot","poolAddress","getMixTicker","ammPoolSnapshot","tickMap","CustomError","ErrorMap","NO_SDK","pairDetailDone","stob","poolVolumn","poolBaseTokenVol","quoteBaseTokenVol","NO_SUPPORT_PAIR","StoB","BtoS","sellCoinInfoMap","buyCoinInfoMap","makeWallet","total","locked","withdraw","pending","countBig","minus","detail","Web3Provider","getShortAddr","trim","substr","WindowEvent","events","Click","Scroll","forceReset","debounce","GlobalProvider","children","addEventListener","removeEventListener","Fragment","MessageWrapper","Message","colorBase","Web3ReactManager","t","useTranslation","networkActive","networkError","activateNetwork","triedEager","showLoader","setShowLoader","timeout","setTimeout","clearTimeout","DevWrapper","UserAPI","ExchangeAPI","AmmpoolAPI","walletAPI","wsAPI","InitApi","WalletAPI","WsAPI","updateVersion","createAction","transactionsSlice","addTransaction","hash","approval","summary","claim","addedTime","clearAllTransactions","checkedTransaction","blockNumber","tx","lastCheckedBlockNumber","Math","max","finalizeTransaction","receipt","confirmedTime","ammTradesSlice","ammTrades","getAmmTrades","getAmmTradesStatus","getPostsSaga","ammActivityMapSaga","getAmmActivityMapApi","groupByRuleTypeAndStatus","put","takeLatest","updateRealTimeSaga","ammMapInitSaga","ammMapRealTimeSaga","setAmmState","ammPoolState","amountDollar","parseFloat","liquidityUSD","amountYuan","lpLiquidity","liquidity","rewardValue","rewards","rewardValue2","fees","tradeFloat","APY","apyBips","getAmmMapApi","ammpools","dataItem","isNew","createdAt","isActivity","__rawConfig__","replace","ammMapSaga","fork","ammTradesSaga","getAmmTradesApi","tradeValue","priceValue","priceToken","posts","ammReducer","combineReducers","reducer","ammForks","tokenInitSaga","getTokenMapApi","tokensMap","pairs","marketArr","tokenArr","startsWith","icon","description","company","tokenList","tokenSaga","tickerSaga","tickersSaga","getTickersApi","list","join","tickers","base_token_volume","high","low","__rawTicker__","NO_TOKEN_KEY_LIST","tickerForks","getUpdateSystem","systemSaga","initConfig","tokenSymbolMap","take","getSystemsApi","location","hostname","DEV","UAT","NONETWORK","NO_NETWORK_ERROR","getFiatPrice","legal","fiatPrices","getGasPrice","systemForks","walletLayer1Saga","getWalletLayer1Balance","getEthBalances","ethBalance","getTokenBalances","tokenBalances","walletLayer1Fork","walletLayer2Saga","getWalletLayer2Balance","getUserBalances","userBalances","walletLayer2Fork","userRewardsSaga","getUserRewardsApi","getAmmPoolUserRewards","userRewardsForks","closeSocket","sendMessage","socketEndSaga","socketSendMessageSaga","socketClose","socketSendMessage","socketForks","mySaga","sagaMiddleware","createSagaMiddleware","settingsSlice","transactions","transactionlice","modals","modalsSlice","PERSISTED_KEYS","configureStore","middleware","getDefaultMiddleware","thunk","serializableCheck","save","devTools","enhancers","reduxBatch","preloadedState","load","setLanguage","language","run","SocketEventType","pingPong","e","global","looperingSocket","send","socketEventMap","pingpong","isConnectSocket","globalThis","ws","loopringSocket","reolve","onclose","reason","makeTopics","op","unsubscribeAll","clearInitTimer","init","__wsTimer__","timer","socketConnect","getWsKey","wsKey","baseSocket","WebSocket","onopen","onmessage","parse","topic","onerror","makeMessageArray","debug","SOCKET_ERROR","eventType","getAccountArg","makeReceiveMessageCallback","order","getOrderArg","orderbook","getOrderBookArg","trade","getTradeArg","ticker","getTickerArg","candlestick","getCandlestickArg","ammpool","getAmmpoolArg","SocketEventMap","_e","timestamp","size","bid","ask","tickerService","sendTicker","poolName","risky","ammPoolService","sendAmmPool","StyleBox","styled","Box","ErrorPage","messageKey","Container","flex","display","alignItems","justifyContent","flexDirection","marginTop","height","maxWidth","textAlign","position","left","top","Typography","component","variant","marginY","color","Trans","i18nKey","Link","onClick","href","subject","email","CONTACT_US_EMAIL","getContactInfo","preventDefault","useApi","ApiClass","DEFAULT_TIMEOUT","genApi","useMemo","useWsAPI","Subject","next","onSocket","asObservable","ammPoolMap","useAmmMapUI","pageSize","rawData","setRawData","page","setPage","setTimestamp","ammMapStatus","ammMapStatusUnset","tickerStatus","tickerStatusUnset","updateRawData","_ammMap","tickerMapKey","NO_TOKEN_MAP","options","updateTickerLoop","_keys","setImmediate","updateTickersUI","_page","i","volumn","pow","useInit","setState","systemState","tokenState","ammMapState","accountState","walletLayer1State","reload","detectEthereumProvider","request","method","Theme","LangType","SystemStatus","MODAL_TYPE","useModals","ShowDeposit","title","ShowTransfer","setShowTransfer","ShowWithdraw","setShowWithdraw","ShowResetAccount","setShowResetAccount","PromiseJob","fetchPromise","setFunc","field","prefix","mounted","usePromiseJob","dependencies","useGetExchangeInfo","useChargeFeeList","tokenSymbol","requestType","chargeFeeList","setChargeFeeList","getOffchainFeeAmt","raw_data","index","sdk","useModalProps","walletLayer2State","walletMap1","setWalletMap1","walletMap2","setWalletMap2","deposit","amt","depositAddress","sendByMetaMask","gasLimit","gasAmounts","response2","sellTokenId","getNextStorageId","storageId","request2","exchange","offchainId","maxFee","extraData","minGas","validUntil","VALID_UNTIL","submitOffchainWithdraw","transfer","payeeAddr","walletType","payeeAcc","payeeId","payerAddr","payerId","submitInternalTransfer","depositValue","setDepositValue","depositProps","tradeData","depositBtnStatus","TradeBtnStatus","AVAILABLE","onDepositClick","handlePanelEvent","switchType","res","setTokenSymbol","withdrawValue","setWithdrawValue","WithdrawType","Standard","withdrawType","withdrawalFeeList","OffchainFeeReqType","OFFCHAIN_WITHDRAWAL","withdrawProps","withdrawBtnStatus","onWithdrawClick","withdrawTypes","WithdrawTypes","chargeFeeToken","chargeFeeTokenList","handleFeeChange","handleWithdrawTypeChange","handleOnAddressChange","handleAddressError","_value","message","transferValue","setTransferValue","transferTokenSymbol","setTransferTokenSymbol","transferFeeList","TRANSFER","transferProps","transferBtnStatus","onTransferClick","resetValue","setResetValue","resetProps","resetBtnStatus","onResetClick","ammProps","ammDepositData","slippage","ammWithdrawData","ammCalcData","handleDepositEvent","handleWithDrawEvent","onAmmWithdrawClick","onAmmDepositClick","swapProps","tradeCalcData","priceImpact","minimumReceived","onSwapClick","handleSwapPanelEvent","ModalAccountInfo","withTranslation","onClose","rest","Modal","aria-labelledby","aria-describedby","style","boxShadow","paddingTop","paddingBottom","minWidth","Header","useLocation","useSettings","setTheme","themeMode","useOpenModals","isShowAccountInfo","isShowConnect","forceUpdate","useReducer","bool","gatewayList","DefaultGatewayList","handleSelect","accountInfoProps","setAccountInfoProps","onNotification","onWalletBtnConnect","onThemeBtnClick","dark","light","onLangBtnClick","lang","headerToolBarData","ButtonComponentsMap","handleClick","Language","handleChange","UnlockBtn","className","startIcon","fontSize","lockCallback","unLockCallback","LockBtn","updateHeaderMenuWhenHasAccountInfo","headerMenuData","HeadMenuTabKey","Layer2","HeaderMenuTabStatus","default","addressShort","level","etherscanLink","mainBtn","_event","connectBy","onLock","label","WalletStatus","hidden","noAccount","accountPending","useHeader","onSwitch","openQRCode","setOpenQRCode","copyToastOpen","setCopyToastOpen","closeCopyToast","Snackbar","autoHideDuration","Alert","severity","withDrawProps","selected","pathname","headerRoot","Toolbar","onCopy","onViewQRCode","onDisconnect","OnePageSize","isAtBottom","marketArrayLength","target","clientHeight","scrollTop","scrollHeight","RowStyled","Grid","unit","TableWrapStyled","background","border","defaultFrame","c_key","d_R","TablePaddingX","pLeft","pRight","QuotePage","recommendMarkets","slice","_marketArrayWithOutRecommend","filter","m","tickList","setTickList","recommendations","setRecommendations","setTickerKeys","focusRowFrom","setFocusRowFrom","array","_tickerKeys","WsTopicType","concat","_recommendationsFloat","_tickList","_item","_recommendations","handleScroll","useQuote","container","xs","paddingY","onVisibleRowsChange","toggleData","ChartType","Trend","Depth","BasicInfoPanel","tgItemJSXs","tlabel","JSX","getExistedMarket","chartType","setChartType","ChartUnit","D1","chartUnit","originData","setOriginData","tgItemJSXsPriceChart","pre","tGItemData","TradingInterval","min15","limit","getCandlestick","candlesticks","timeStamp","getMixDepth","depth","bidsPrices","bids_prices","bidsAmtTotals","bids_amtTotals","asksPrices","asks_prices","asksAmtTotals","asks_amtTotals","useBasicInfo","upColor","exclusive","minHeight","maxHeight","width","riseColor","handleMove","StylePaper","borderColor","applyProps","id","StyledTabsWrapper","StyledFormControlLabel","FormControlLabel","TradePanel","myTradeArray","isAllTrade","setIsAllTrade","setValue","control","Checkbox","checked","checkedIcon","onChange","flag","Tabs","aria-label","Tab","FixedStyle","SwapPage","wait","globalSetup","useRouteMatch","setTradeData","setTradeCalcData","setTradeArray","setMyTradeArray","setTradeFloat","setPair","setAmmPoolSnapshot","swapBtnI18nKey","setSwapBtnI18nKey","output","setOutput","params","resetSwap","_myTradeArray","swapData","SwapType","SEll_CLICK","BUY_CLICK","SELL_SELECTED","BUY_SELECTED","EXCHANGE_CLICK","calculateTradeData","_tradeData","input","isAtoB","throttleSetValue","_","_ammPoolSnapshot","td","_tradeFloat","_tradeArray","apiList","getMarketTrades","_td","TRADE_LITE_SET_PAIR_ERROR","swapBtnClickArray","baseToken","quoteToken","orderId","sellToken","amountS","buyToken","amountBOutSlip","allOrNone","maxFeeBips","fillAmountBOrS","orderType","OrderType","ClassAmm","eddsaSignature","submitOrder","useSwapPage","marginRight","alignContent","stateArr","useWebsocket","verify","needApiKey","useRef","wsData","setMessage","readyState","setReadyState","webSocketInit","wsApiKey","basePath","closeWebSocket","msg","reconnect","useWs","socketData","setSocketData","isLocalPage","setIsLocalPage","visibilityState","useHandleSocketData","setAccount","ammPool","setAmmPool","setOrder","setTicker","baseAmt","quoteAmt","orderBook","useQuotePageWs","getMarkets","useGetMarkets","c","every","DebugPage","TxPanel","setPageSize","txTableData","setTxTableData","getUserTranferList","userTxns","mappingList","userTransfers","o","senderAddress","receiverAddress","feeTokenSymbol","feeAmount","memo","txnHash","TransactionStatus","processed","processing","received","failed","tradeType","TransactionTradeTypes","offsetHeight","floor","ref","pagination","showFilter","StyledChartWrapper","StyledBtnGroupWrapper","AssetPanel","chartPeriod","setChartPeriod","chartData","setChartData","assetsKeyList","assetsDetailList","values","assetsList","getUserTotalAssets","getUserAssets","wallet","assetType","AssetType","DEX","userAssets","onShowDeposit","handleChartPeriodChange","tokenPriceList","entries","jointLPTokenValue","split","splice","ammToken","tokenValue","doughnutData","tokenPriceUSDT","find","formattedDoughnutData","AssetTitleProps","assetInfo","totalAsset","priceTag","PriceTag","Dollar","onShowTransfer","onShowWithdraw","assetsRawData","TokenType","single","String","toFixed","EmptyValueTag","available","smallBalance","Paper","showFiliter","originalData","setOriginalData","marketList","OrderPanel","orderOriginalData","setOrderOriginalData","getOrders","userOrders","Array","isArray","orders","volumes","baseAmount","quoteAmount","baseFilled","quoteFilled","average","filledAmount","filledPrice","validity","start","detailTable","StyledPaper","StyledSwitch","Switch","textPrimary","success","backgroundColor","opacity","BtnCurrency","Currency","dollar","_handleChange","IconComponent","DropDownIcon","labelId","autoWidth","yen","StyledDivider","Divider","SettingPanel","focus","useTheme","setUpColor","setCurrency","direction","flexWrap","paddingLeft","marginBottom","paddingX","alignSelf","Button","passDay","changeLanguage","textTransform","UpColor","green","up","down","red","subMenu","subMenuLayer2","BoxStyle","SubMenuList","withRef","BasicSubMenuList","Layer2Page","accStatus","PoolsPanel","handlePageChange","AmmPanelView","setAmmCalcData","setAmmDepositData","setAmmWithdrawData","ammDepositBtnI18nKey","setAmmDepositBtnI18nKey","ammWithdrawBtnI18nKey","setAmmWithdrawBtnI18nKey","initAmmData","coinA_TV","coinB_TV","covertVal","onAmmWithdrawClickArray","onAmmDepositClickArray","useAmmPanel","isLoading","tabSelected","ammDepositBtnStatus","LOADING","ammWithdrawBtnStatus","makeAmmDetailExtendsActivityMap","ammActivity","BoxStyled","CoinPairPanel","useUserRewardsState","setWalletMap","ammMarketArray","myAmmMarketArray","setMyAmmMarketArray","setAmmUserRewardMap","setSnapShotData","myAmm","setMyAmm","totalRewards","coinPairInfo","setCoinPairInfo","walletLayer2DoIt","_coinPairInfo","_snapShotData","useCoinPair","tabIndex","setTabIndex","_handlePageChange","Breadcrumbs","spacing","wrap","md","paddingRight","getThousandFormattedNumbers","Yuan","Hidden","mdDown","noWrap","textOverflow","moment","format","AmmCardWrap","forwardRef","AmmCard","AmmList","sm","lg","AmmMiningView","userRewardsMapState","setAmmActivityViewMap","ammActivityPastViewMap","setAmmActivityPastViewMap","NotStarted","useAmmMiningUI","StyleWrapper","MyLiquidity","summaryReward","setSummaryReward","myPoolRow","setMyPoolRow","makeMyPoolRow","walletKey","rowData","_myPoolRow","useOverview","padding","margin","handleDeposit","row","handleWithdraw","subMenuLiquidity","LiquidityPage","AmmActivityMapState","setAmmActivityMap","useAmmPool","matchPair","RouterView","exact","path"],"mappings":"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","file":"static/js/main~a97bfcba.589e2916.chunk.js","sourcesContent":["import { useDeepCompareEffect } from \"react-use\"\n\nexport function useCustomDCEffect(action: any, deps: any[] | undefined | null) {\n    useDeepCompareEffect(action, [deps || {}])\n}\n","import { toBig } from 'loopring-sdk'\n\nexport enum OrderHandling {\n    processed = 'processed',\n    no_such_order = 'no_such_order',\n    too_many_times = 'too_many_times',\n}\n\nexport const BIG0 = toBig(0)\n\nexport const BIG1 = toBig(1)\n\nexport const BIG10 = toBig(10)\n\nexport const BIG10K = toBig(10000)\n\nexport const MULTI_FACTOR = 10000\n","import { createSlice, PayloadAction, Slice } from '@reduxjs/toolkit'\n\nimport { AccountInfo, ConnectorNames, } from 'loopring-sdk'\n\nimport { Lv2Account, } from 'defs/account_defs'\nimport { AccountStatus } from 'state_machine/account_machine_spec'\nimport { UserStorage } from 'storage'\n\n\nconst initialState = () => {\n  const defaultAccId = process.env.REACT_APP_TEST_ACCOUND_ID ? process.env.REACT_APP_TEST_ACCOUND_ID : UserStorage.getAccountId()\n  const defaultApiKey = process.env.REACT_APP_TEST_API_KEY ? process.env.REACT_APP_TEST_API_KEY : UserStorage.getApikey()\n  const defaultOwner = process.env.REACT_APP_TEST_OWNER ? process.env.REACT_APP_TEST_OWNER : UserStorage.getAccount()\n  const defaultEddsaKey = process.env.REACT_APP_TEST_EDDSA_KEY ? process.env.REACT_APP_TEST_EDDSA_KEY : UserStorage.getEddsakey()\n\n  console.log('defaultApiKey:', JSON.stringify(defaultApiKey))\n  const defaultStatus = AccountStatus.UNCONNNECTED\n  return {\n    accAddr: defaultOwner,\n    status: defaultStatus,\n    accountId: defaultAccId,\n    publicKey: {},\n    nonce: 0,\n    isContractAddress: false,\n    apiKey: defaultApiKey,\n    eddsaKey: defaultEddsaKey,\n    connectName: ConnectorNames.Unknown,\n    connectNameTemp: ConnectorNames.Unknown,\n  } as Lv2Account\n}\n\nconst accountSlice:Slice = createSlice({\n  name: 'account',\n  initialState: initialState(),\n  reducers: {\n    reset(state) {\n      const initState = initialState()\n      console.log('!!! reset account!', initState)\n      Object.assign(state, initState)\n    },\n    setAccAddr(state, action: PayloadAction<string>) {\n      state.accAddr = action.payload\n      // UserStorage.setAccount(action.payload)\n    },\n    setAccountInfo(state, action: PayloadAction<AccountInfo>) {\n      state.accAddr = action.payload.owner\n      state.accountId = action.payload.accountId\n      state.nonce = action.payload.nonce\n      state.publicKey = action.payload.publicKey\n\n      // UserStorage.setAccount(state.accAddr)\n      // UserStorage.setAccountId(state.accountId)\n      \n    },\n    setApikey(state, action: PayloadAction<string>) {\n      state.apiKey = action.payload\n      // UserStorage.setApikey(action.payload)\n    },\n    setAccountStatus(state, action: PayloadAction<AccountStatus>) {\n      state.status = action.payload\n    },\n    setEddsaKey(state, action: PayloadAction<any>) {\n      state.eddsaKey = action.payload\n      // UserStorage.setEddsakey(action.payload)\n    },\n    setConnectName(state, action: PayloadAction<ConnectorNames>) {\n      state.connectName = action.payload\n    },\n    setConnectNameTemp(state, action: PayloadAction<ConnectorNames>) {\n      state.connectNameTemp = action.payload\n    },\n    setIsContractAddress(state, action: PayloadAction<boolean>) {\n      state.isContractAddress = action.payload\n    },\n  },\n})\n\nexport const { reset, setAccAddr, setApikey, setConnectName, setConnectNameTemp, setAccountInfo, setAccountStatus, setEddsaKey, setIsContractAddress, } = accountSlice.actions\nexport default accountSlice\n","import { useDispatch, useSelector } from 'react-redux'\nimport { tokenMapSlice } from './reducer';\nimport { TokenMapStates } from './interface';\n\nexport function useTokenMap<R extends {[key:string]:any}>(): TokenMapStates<R> & {\n    updateTokenMap:()=>void,\n    statusUnset:()=>void,\n} {\n    const tokenMap:TokenMapStates<R> = useSelector((state: any) => state.tokenMap)\n    const dispatch = useDispatch();\n    const updateTokenMap = () => {\n        dispatch(tokenMapSlice.actions.getTokenMap(undefined))\n    }\n    const statusUnset = ()=>{\n        dispatch(tokenMapSlice.actions.statusUnset(undefined))\n    }\n    return {\n        ...tokenMap,\n        statusUnset,\n        updateTokenMap,\n    }\n\n}\n","import { ConnectorNames } from 'loopring-sdk'\n\nimport {\n    injected,\n    network,\n    walletconnect,\n    walletlink,\n    ledger,\n    trezor,\n    authereum,\n} from 'networks/web3_connectors'\n\nexport const connectorsByName: { [connectorName in ConnectorNames]: any } = {\n    [ConnectorNames.Unknown]: undefined,\n    [ConnectorNames.Injected]: injected,\n    [ConnectorNames.Network]: network,\n    [ConnectorNames.WalletConnect]: walletconnect,\n    [ConnectorNames.WalletLink]: walletlink,\n    [ConnectorNames.Ledger]: ledger,\n    [ConnectorNames.Trezor]: trezor,\n    [ConnectorNames.Authereum]: authereum,\n}\n","import React from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\n\nimport { useCustomDCEffect } from 'hooks/common/useCustomDCEffect'\n\nimport { useGetTradingInfo } from 'stores/trading/hook'\nimport { useActiveWeb3React, } from 'hooks/web3/useWeb3'\n\nimport { Lv2Account, } from 'defs/account_defs'\n\nimport { AccountStatus, StatusChangeEvent } from 'state_machine/account_machine_spec'\n\nimport * as sign_tools from 'loopring-sdk'\n\nimport { connectorsByName } from 'defs/web3_defs'\n\nimport { ChainId, ConnectorNames, dumpError400, ExchangeAPI, UserAPI, } from 'loopring-sdk'\n\nimport { toHex, toBig, } from 'loopring-sdk'\n\nimport { RootState } from 'stores'\n\nimport {\n    reset, setAccountStatus, setConnectName,\n    setConnectNameTemp, setAccountInfo, setEddsaKey, setApikey, setAccAddr,\n} from 'stores/account/reducer'\n\nimport { AccountMachineSpec, } from 'state_machine/account_machine_spec'\n\nimport { buildMachine } from 'state_machine/machine_builder'\n\nimport voca from 'voca'\nimport { usePrevious } from 'react-use'\n\nimport Web3 from 'web3'\n\nimport { useExchangeAPI, useUserAPI } from 'hooks/exchange/useApi'\n\nimport { UserStorage } from 'storage'\n\nimport store from 'stores'\nimport { updateWalletLayer1, reset as resetLayer1 } from '../walletLayer1';\nimport { updateWalletLayer2, reset as resetLayer2, useWalletLayer2 } from '../walletLayer2';\nimport { useTokenMap } from '../token';\n\n\nexport function useWeb3Account() {\n\n    const {\n        connector,\n        library,\n        account,\n        chainId,\n        active,\n        error,\n    } = useActiveWeb3React()\n\n    const isConnected: boolean = active && !voca.isBlank(account as string)\n\n    return {\n        account,\n        connector,\n        library,\n        chainId,\n        active,\n        isConnected,\n        error,\n    }\n\n}\n\nexport function useAccount() {\n\n    const account: Lv2Account = useSelector((state: RootState) => state.account)\n\n    const isNoAccount = () => {\n        return account.status === AccountStatus.NOACCOUNT\n    }\n\n    const isActivated = () => {\n        return account.status === AccountStatus.ACTIVATED\n    }\n\n    return {\n        account,\n        isNoAccount,\n        isActivated,\n        apiKey: account.apiKey,\n        eddsaKey: account.eddsaKey,\n        accountId: account.accountId,\n    }\n}\n\nexport function useStateMachine() {\n    const dispatch = useDispatch()\n\n    const machine = buildMachine(AccountMachineSpec())\n\n    const sendEvent = React.useCallback((account: Lv2Account, event: StatusChangeEvent) => {\n        const nextState = machine(account.status, event)\n        if (nextState) {\n            dispatch(setAccountStatus(nextState))\n        }\n    }, [machine, dispatch])\n\n    return {\n        sendEvent,\n    }\n}\n\nexport function useConnect() {\n\n    const {\n        activate,\n    } = useActiveWeb3React()\n\n    const { sendEvent } = useStateMachine()\n\n    const dispatch = useDispatch()\n\n    const [activatingConnector, setActivatingConnector] = React.useState<any>()\n\n    const connect = React.useCallback((item_name: ConnectorNames, isSwitch: boolean = false) => {\n        const newConnector: any = connectorsByName[item_name]\n        setActivatingConnector(newConnector)\n        activate(newConnector)\n        dispatch(setConnectNameTemp(item_name))\n\n        if (isSwitch) {\n          //  console.log('try Connecting... isSwitch Reset')\n            sendEvent(store.getState().account, StatusChangeEvent.Reset)\n        }\n\n        sendEvent(store.getState().account, StatusChangeEvent.Connecting)\n\n        console.log('try Connecting...')\n    }, [activate, dispatch, sendEvent])\n\n    return {\n        connect,\n        activatingConnector,\n    }\n\n}\n\nexport function useDisconnect() {\n\n    const {\n        deactivate,\n    } = useActiveWeb3React()\n\n    const dispatch = useDispatch()\n\n    const disconnect = React.useCallback(() => {\n        deactivate()\n        dispatch(reset(undefined))\n        //TODO dispatch wallet info \n    }, [deactivate, dispatch])\n\n    return {\n        disconnect,\n    }\n\n}\n\nexport function useUnlock() {\n\n    const dispatch = useDispatch()\n\n    const exchangeApi: any = useExchangeAPI()\n\n    const userApi: any = useUserAPI()\n\n    const { tradingInfo } = useGetTradingInfo()\n\n    const { connector, } = useWeb3Account()\n\n    const { sendEvent } = useStateMachine()\n\n    const { resetLayer2 } = useWalletLayer2()\n    const lock = React.useCallback(async (account: Lv2Account) => {\n        console.log('useCallback lock:', account.status);\n        dispatch(resetLayer2());\n        sendEvent(account, StatusChangeEvent.Lock)\n    }, [sendEvent])\n\n    const unlock = React.useCallback(async (account: Lv2Account) => {\n\n        if (!userApi || !exchangeApi || !connector || !account.accountId || !tradingInfo.exchangeInfo?.exchangeAddress\n            || account.status !== AccountStatus.LOCKED) {\n            console.log('accountId:', account.accountId)\n            console.log('exchangeAddress:', tradingInfo.exchangeInfo)\n            console.log('enter !! account.status:', account.status)\n            return\n        }\n\n        console.log('useUnlock useCallback:', account.status)\n\n        if (account.status !== AccountStatus.LOCKED) {\n            throw Error('unexpected status:' + account.status)\n        }\n\n        let event = undefined\n        let sk = undefined\n        let apikey: any = undefined\n\n        try {\n            const provider = await connector.getProvider()\n            const web3 = new Web3(provider as any)\n            console.log('useUnlock eddsaKey:', account.eddsaKey)\n\n            if (!account.eddsaKey) {\n                const eddsakey = await sign_tools\n                    .generateKeyPair(\n                        web3,\n                        account.accAddr,\n                        tradingInfo.exchangeInfo?.exchangeAddress as string,\n                        account.nonce - 1,\n                        account.connectName,\n                    )\n                sk = toHex(toBig(eddsakey.keyPair.secretKey))\n\n            } else {\n                sk = account.eddsaKey\n            }\n\n            apikey = await userApi.getUserApiKey({\n                accountId: account.accountId\n            }, sk)\n\n            console.log('useUnlock apikey:', apikey)\n\n            event = StatusChangeEvent.Unlock\n\n        } catch (reason) {\n            console.log(reason)\n            event = StatusChangeEvent.Reset\n        }\n\n        if (sk) {\n            dispatch(setEddsaKey(sk))\n        }\n\n        if (apikey?.apiKey) {\n            dispatch(setApikey(apikey.apiKey))\n        }\n\n        console.log('next event:', event)\n        if (event) {\n            sendEvent(account, event)\n        }\n\n    }\n        , [dispatch, sendEvent, exchangeApi, userApi, connector, tradingInfo.exchangeInfo])\n\n    return {\n        lock,\n        unlock,\n    }\n}\n\nasync function checkAccountAvailableAsync(exchangeApi: ExchangeAPI, userApi: UserAPI, account: Lv2Account, dispatch: any, sendEvent: any, connector: any, exchangeAddress: string) {\n\n    let accInfo = undefined\n    let event = undefined\n    let sk = undefined\n    let code = undefined\n    let apikey: any = undefined\n\n    try {\n        accInfo = (await exchangeApi.getAccount({\n            owner: account.accAddr\n        })).accInfo\n        if (accInfo.publicKey && accInfo.publicKey.x && accInfo.publicKey.y) {\n            if (account.accountId !== accInfo.accountId) {\n                const provider = await connector.getProvider()\n                const web3 = new Web3(provider as any)\n                try {\n                    code = await web3.eth.getCode(account.accAddr)\n                    // console.log('!!!!!! about to generateKeyPair!!!!!!!!!!!')\n                    try {\n                        const eddsakey = await sign_tools\n                            .generateKeyPair(\n                                web3,\n                                account.accAddr,\n                                exchangeAddress,\n                                accInfo.nonce - 1,\n                                account.connectName,\n                            )\n                        sk = toHex(toBig(eddsakey.keyPair.secretKey))\n                        const px = toHex(toBig(eddsakey.keyPair.publicKeyX))\n                        const py = toHex(toBig(eddsakey.keyPair.publicKeyY))\n\n                        try {\n                            apikey = await userApi.getUserApiKey({\n                                accountId: accInfo.accountId\n                            }, sk)\n                            event = (StatusChangeEvent.HasPubkey)\n                        } catch (reason) {\n                            dumpError400(reason)\n                            event = (StatusChangeEvent.ErrorResponse)\n                        }\n                    } catch (reason) {\n                        dumpError400(reason)\n                        event = (StatusChangeEvent.ErrorResponse)\n                    }\n\n                } catch (reason) {\n                    dumpError400(reason)\n                    event = (StatusChangeEvent.ErrorResponse)\n                }\n\n            } else {\n                console.log('already has accountId!')\n            }\n        } else {\n            console.log('2 has id but no pubkey currStatus:', account.status)\n            event = (StatusChangeEvent.HasNoPubkey)\n        }\n    } catch (reason) {\n        // 3 has none of above\n        console.log('2 has id but no pubkey currStatus:', account.status)\n        dumpError400(reason)\n        // check deposit tx (local and ethereum)\n        event = (StatusChangeEvent.ErrorResponse)\n    }\n\n    if (accInfo && accInfo.owner !== account.accAddr) {\n        dispatch(setAccountInfo(accInfo))\n    }\n\n    if (sk) {\n        dispatch(setEddsaKey(sk))\n    }\n\n    if (apikey) {\n        console.log('---------> apikey:', apikey)\n        dispatch(setApikey(apikey.apiKey))\n    }\n\n    if (event) {\n        sendEvent(event)\n    }\n\n}\n\nexport function useCheckAccStatus() {\n\n    const dispatch = useDispatch()\n\n    const { account } = useAccount()\n\n    const { sendEvent } = useStateMachine()\n\n    const exchangeApi: ExchangeAPI = useExchangeAPI()\n\n    const userApi: UserAPI = useUserAPI()\n\n    const { account: web3Account, active, isConnected, chainId, connector, } = useWeb3Account()\n    const { marketArray } = useTokenMap()\n\n    const lv1Acc = web3Account as string\n\n    const prevChainId = usePrevious(chainId)\n    const prevWeb3Account = usePrevious(web3Account)\n\n    // const { updateWalletLayer1,resetLayer1} = useWalletLayer1();\n    // const { updateWalletLayer2, resetLayer2} = useWalletLayer2()\n\n\n    // console.log('prevChainId:', prevChainId, ' chainId:', chainId)\n    // console.log('prevWeb3Account:', prevWeb3Account, ' web3Account:', web3Account)\n\n    // console.log(exchangeApi, userApi, account, 'prevChainId:', prevChainId, 'chainId:', chainId, 'web3Account:', web3Account)\n\n    const { tradingInfo } = useGetTradingInfo()\n\n    useCustomDCEffect(async () => {\n\n        const cleanUp = () => {\n            let handler = UserStorage.getHandler()\n            if (account.status !== AccountStatus.ACTIVATED && handler) {\n                clearInterval(handler)\n            }\n        }\n\n        async function checkStatus() {\n\n            if (!account || !lv1Acc || !exchangeApi || !userApi || !connector || !tradingInfo.exchangeInfo?.exchangeAddress) {\n                //console.log('checkStatus return!!!!!!')\n                return\n            }\n\n            if (((prevChainId && chainId && prevChainId !== chainId)\n                || (prevWeb3Account && web3Account && prevWeb3Account !== web3Account))\n                && account.status !== AccountStatus.UNCONNNECTED) {\n\n                console.log('checkStatus try to resetFunc')\n                dispatch(reset(undefined))\n                sendEvent(account, StatusChangeEvent.Reset)\n                return\n            }\n\n            cleanUp()\n\n            switch (account.status) {\n                case AccountStatus.UNCONNNECTED:\n                   // console.log('---> render UNCONNNECTED active:', active, ' isConnected:', isConnected)\n\n                    if (isConnected) {\n                        dispatch(setConnectNameTemp(ConnectorNames.Injected))\n                        sendEvent(account, StatusChangeEvent.Connecting)\n                    }\n\n                    //HIGH:\n                    dispatch(resetLayer1(undefined));\n                    dispatch(resetLayer2(undefined));\n                    break\n\n                case AccountStatus.CONNECTED:\n                    //check session or local storage\n\n                  //  console.log('---> render CONNECTED account:', account)\n\n                    try {\n\n                        const acc = (await exchangeApi.getAccount({ owner: lv1Acc })).accInfo\n\n                        // current acc is local acc info\n                        if (account.accAddr && account.eddsaKey && acc.owner === account.accAddr) {\n                            // console.log('cur Eddsakey:', account.eddsaKey)\n                        } else {\n                            // console.log('got a new address:', acc)\n                            // got a new address\n                            dispatch(setAccountInfo(acc))\n                            // dispatch(setEddsaKey(''))\n                           \n                            //updateWalletLayer1();\n                            if(marketArray?.length){\n                                dispatch(updateWalletLayer1(undefined));\n                            }\n                        }\n\n                        if (account?.connectName !== account?.connectNameTemp) {\n                            dispatch(setConnectName(account.connectNameTemp))\n                        }\n\n                        sendEvent(account, StatusChangeEvent.HasPubkey)\n\n                    } catch (reason) {\n                        dumpError400(reason)\n\n                        if (lv1Acc) {\n                            dispatch(setAccAddr(lv1Acc))\n                        }\n\n                        if (reason.response && reason.response.data && reason.response.data.resultInfo\n                             && reason.response.data.resultInfo.code === 101002) {\n                            sendEvent(account, StatusChangeEvent.ErrorResponse)\n                        }\n                    }\n\n                    break\n\n                case AccountStatus.NOACCOUNT:\n                    break\n\n                case AccountStatus.DEPOSITING:\n                    // TODO sub contract event, check deposit.\n                    const depositFinished = true // TODO\n                    if (depositFinished) {\n                     //   console.log('depositFinished currStatus:', account.status)\n                        sendEvent(account, StatusChangeEvent.FinishDeposit)\n                    }\n                    break\n\n                case AccountStatus.DEPOSIT_TO_CONFIREM:\n                    // getAccount every 10s to check\n                    break\n\n                case AccountStatus.UNACTIVATED:\n                    const isSmartWallet = false // TODO\n                    if (isSmartWallet) {\n                        // TODO approve hash,\n                      //  console.log('approve hash, currStatus:', account.status)\n                        sendEvent(account, StatusChangeEvent.IsSmartWallet)\n                    } else {\n                       // console.log('approve hash no smartwallet, account.status:', account.status)\n                    }\n                    break\n\n                case AccountStatus.ARPROVING:\n                    // TODO sub contract event, check approving.\n                    const approved = false // TODO\n                    if (approved) {\n                      //  console.log('sub contract event, check approving. approved! status:', account.status)\n                        sendEvent(account, StatusChangeEvent.ApproveSubmit)\n                    }\n                    break\n\n                case AccountStatus.APPROV_TO_CONFIRM:\n                    const approveConfirmed = false // TODO\n                    if (approveConfirmed) {\n                     //   console.log('approveConfirmed status:', account.status)\n                        sendEvent(account, StatusChangeEvent.ApproveConfirmed)\n                    }\n                    break\n\n                case AccountStatus.LOCKED:\n                    //HIGH:\n                    dispatch(resetLayer1(undefined))\n                    break\n\n                case AccountStatus.ACTIVATED:\n                    UserStorage.checkTimeout(true)\n                    const handler = setInterval(() => {\n                        const isTimeOut = UserStorage.checkTimeout()\n                        if (account.status === AccountStatus.ACTIVATED && isTimeOut) {\n                            clearInterval(handler)\n                            sendEvent(account, StatusChangeEvent.Lock)\n                        }\n                    }, 1000)\n                    UserStorage.setHandler(handler);\n                    //HIGH:\n                    dispatch(updateWalletLayer2(undefined))\n                        //useWalletLayer2().updateWalletLayer2();\n                    //dispatch((undefined));\n                    break\n\n                default:\n                    break\n            }\n\n\n\n        }\n\n        checkStatus()\n\n        return () => {\n            cleanUp()\n        }\n\n    }, [    updateWalletLayer1, updateWalletLayer2, resetLayer1,resetLayer2,\n        //updateWalletLayer2, updateWalletLayer1,resetLayer1,resetLayer2,\n\n        exchangeApi, userApi, account, prevChainId, chainId, lv1Acc, dispatch, connector, tradingInfo.exchangeInfo?.exchangeAddress,])\n\n}\n\n","export const buildMachine = <S, E>(spec: any) => (currentState: S, event: E) => {\n    // We get all possible transitions for the current State\n    const stateTransitions = spec.states[currentState]\n\n    // No transitions? Error!\n    if (stateTransitions === undefined) {\n        throw new Error(`No transitions defined for ${currentState}`)\n    }\n\n    // We try to transition to the next state\n    const nextState = stateTransitions[event]\n\n    // No next state? Error!\n    if (nextState === undefined) {\n        throw new Error(\n            `Unknown transition for event ${event} in state ${currentState}`\n        )\n    }\n\n   // console.log('got nextState:', nextState)\n\n    // We return the new state\n    return nextState\n}\n","import { useDispatch, useSelector } from 'react-redux'\nimport { AmmMapStates } from './interface';\nimport { ammMapSlice } from './reducer';\n\nexport const useAmmMap = <R extends {[key:string]:any},I extends {[key:string]:any}>(): AmmMapStates<R,I> & {\n    updateAmmMap:()=> void,\n    statusUnset:()=> void,\n} => {\n    const ammMap:AmmMapStates<R,I>= useSelector((state: any) => state.amm.ammMap)\n    const dispatch = useDispatch();\n    const updateAmmMap = () => {\n        dispatch(ammMapSlice.actions.getAmmMap(undefined))\n    }\n    const statusUnset = ()=>{\n        dispatch(ammMapSlice.actions.statusUnset(undefined))\n    }\n    return {\n        ...ammMap,\n        statusUnset,\n        updateAmmMap\n    }\n}\n","import { useAmmpoolAPI, useExchangeAPI } from 'hooks/exchange/useApi'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { useCustomDCEffect } from 'hooks/common/useCustomDCEffect'\n\nimport store, { RootState } from 'stores'\n\nimport { \n    setMarkets, \n    setExchangeInfo, \n    setTokens, \n    setTickerMap, \n    setAmmPoolStats,\n    setAmmPoolConf, \n    setMarketTrades,\n    setAmmActivityRules,\n    setChainId, \n} from 'stores/trading/reducer'\n\nimport { dumpError400, ChainId, AmmPoolStat, Currency, } from 'loopring-sdk'\nimport { useActiveWeb3React } from 'hooks/web3/useWeb3'\nimport { useEffect } from 'react'\n\nimport { ammpoolAPI, exchangeAPI } from \"stores/apis/api\"\n\nexport function getTradingInfo() {\n    const tradingInfo = store.getState().trading\n    return {\n        tradingInfo,\n        chainId: tradingInfo.chainId,\n    }\n}\n\nexport function getAccount() {\n    return  store.getState().account\n\n}\n\nexport function getChainId(){\n    const chainId = store.getState().system.chainId;\n    return chainId\n\n}\n\nexport function useGetTradingInfo() {\n    const tradingInfo = useSelector((state: RootState) => state.trading)\n    return {\n        tradingInfo,\n        chainId: tradingInfo.chainId,\n    }\n}\n\nexport function useUpdateChainId() {\n    const { chainId } = useActiveWeb3React()\n    const dispatch = useDispatch()\n    useEffect(() => {\n        dispatch(setChainId(chainId ?? ChainId.GORLI))\n    }, [chainId, dispatch])\n}\n\nexport function useUpdateExchangeMarkets() {\n    const dispatch = useDispatch()\n    const api = useExchangeAPI()\n\n    useCustomDCEffect(async() => {\n\n        if (!api) {\n            return\n        }\n\n        try {\n            const response = await api.getMixMarkets()\n            dispatch(setMarkets(response))\n        } catch (reason) {\n            dumpError400(reason)\n        }\n\n    }, [api])\n\n}\n\nexport function useUpdateExchangeInfo() {\n\n    const dispatch = useDispatch()\n    const api = useExchangeAPI()\n\n    useCustomDCEffect(async() => {\n\n        if (!api) {\n            return\n        }\n\n        try {\n            const response = await api.getExchangeInfo()\n            dispatch(setExchangeInfo(response.exchangeInfo))\n        } catch (reason) {\n            dumpError400(reason)\n        }\n\n    }, [api])\n\n}\n\nexport function useUpdateAmmPoolConf() {\n\n    const dispatch = useDispatch()\n    const api = useAmmpoolAPI()\n\n    useCustomDCEffect(async() => {\n\n        if (!api) {\n            return\n        }\n\n        try {\n            const ammPoolConf = await api.getAmmPoolConf()\n            dispatch(setAmmPoolConf(ammPoolConf))\n        } catch (reason) {\n            dumpError400(reason)\n        }\n\n    }, [api])\n\n}\n\nexport function useUpdateAmmPoolStats() {\n\n    const dispatch = useDispatch()\n    const api = useAmmpoolAPI()\n\n    useCustomDCEffect(async() => {\n\n        if (!api) {\n            return\n        }\n\n        try {\n            const ammPoolStats = await api.getAmmPoolStats()\n            dispatch(setAmmPoolStats(ammPoolStats))\n        } catch (reason) {\n            dumpError400(reason)\n        }\n\n    }, [api])\n\n}\n\nexport function useUpdateAmmActivityRules() {\n\n    const dispatch = useDispatch()\n    const api = useAmmpoolAPI()\n\n    useCustomDCEffect(async() => {\n\n        if (!api) {\n            return\n        }\n\n        try {\n            const ammActivityRules = await api.getAmmPoolActivityRules()\n            dispatch(setAmmActivityRules(ammActivityRules.activityRules))\n        } catch (reason) {\n            dumpError400(reason)\n        }\n\n    }, [api])\n\n}\n\nexport function useUpdateTokens() {\n\n    const dispatch = useDispatch()\n    const api = useExchangeAPI()\n\n    useCustomDCEffect(async() => {\n\n        if (!api) {\n            return\n        }\n\n        try {\n            const tokens = await api.getTokens()\n            dispatch(setTokens(tokens))\n        } catch (reason) {\n            dumpError400(reason)\n        }\n\n    }, [api])\n\n}\n\nexport function useUpdateTickerMap(market: string) {\n\n    const dispatch = useDispatch()\n    const api = useExchangeAPI()\n\n    useCustomDCEffect(async() => {\n\n        if (!api) {\n            return\n        }\n\n        try {\n            const tickMap = await api.getTicker({\n                market\n              })\n            dispatch(setTickerMap(tickMap))\n        } catch (reason) {\n            dumpError400(reason)\n        }\n\n    }, [api])\n\n}\n\nexport function useMarketTrades(market: string) {\n  \n    const dispatch = useDispatch()\n    const api = useExchangeAPI()\n\n    useCustomDCEffect(async() => {\n\n        if (!api) {\n            return\n        }\n\n        try {\n            const marketTrades = await api.getMarketTrades({\n                market\n              })\n            dispatch(setMarketTrades(marketTrades))\n        } catch (reason) {\n            dumpError400(reason)\n        }\n\n    }, [api, dispatch])\n\n}\n\nexport function useUpdateFiatPrice() {\n  \n    const dispatch = useDispatch()\n    const api = useExchangeAPI()\n\n    useCustomDCEffect(async() => {\n\n        if (!api) {\n            return\n        }\n\n        try {\n            const usdFiatPrices = await api.getFiatPrice({\n                legal: Currency.USD\n            })\n            const cnyFiatPrices = await api.getFiatPrice({\n                legal: Currency.CNY\n            })\n            dispatch(setMarketTrades({}))\n        } catch (reason) {\n            dumpError400(reason)\n        }\n\n    }, [api, dispatch])\n\n}\n\n// export const asyncGetTradingInfo = async() => {\n//\n//     const { tradingInfo } = getTradingInfo()\n//     console.log('--- tradingInfo', tradingInfo)\n//\n//     let tokens: any = undefined\n//\n//     if (tradingInfo.tokens?.tokenIdMap) {\n//         tokens = tradingInfo.tokens\n//     } else {\n//         tokens = (await exchangeAPI().getTokens())\n//     }\n//\n//     let ammpools: any = undefined\n//\n//     if (tradingInfo.ammPoolConf?.ammpools) {\n//         ammpools = tradingInfo.ammPoolConf.ammpools\n//     } else {\n//         ammpools = (await ammpoolAPI().getAmmPoolConf()).ammpools\n//     }\n//\n//     let ammPoolStats: { [key: string] : AmmPoolStat } = {}\n//\n//     if (tradingInfo.ammPoolStats.ammPoolStats) {\n//         ammPoolStats = tradingInfo.ammPoolStats.ammPoolStats\n//     } else {\n//         ammPoolStats = (await ammpoolAPI().getAmmPoolStats()).ammPoolStats\n//     }\n//\n//     return {\n//         tokens,\n//         ammpools,\n//         ammPoolStats,\n//     }\n// }","import { useDispatch, useSelector } from 'react-redux'\nimport { walletLayer2Slice } from './reducer';\nimport { WalletLayer2States } from './interface';\n\nexport function useWalletLayer2(): WalletLayer2States & {\n    updateWalletLayer2:()=> void,\n    statusUnset:()=> void,\n    resetLayer2:()=>void,\n} {\n    const walletLayer2:WalletLayer2States = useSelector((state: any) => state.walletLayer2)\n    const dispatch = useDispatch();\n    const updateWalletLayer2 = () => {\n        dispatch(walletLayer2Slice.actions.getWalletLayer2(undefined))\n    }\n    const statusUnset = ()=>{\n        dispatch(walletLayer2Slice.actions.statusUnset(undefined))\n    }\n    const resetLayer2 = ()=>{\n        dispatch(walletLayer2Slice.actions.reset(undefined))\n    }\n    return {\n        ...walletLayer2,\n        resetLayer2,\n        statusUnset,\n        updateWalletLayer2\n    }\n\n}\n","import { useDispatch, useSelector } from 'react-redux'\nimport { walletLayer1Slice } from './reducer';\nimport { WalletLayer1States } from './interface';\n\nexport function useWalletLayer1(): WalletLayer1States & {\n    updateWalletLayer1:()=> void,\n    statusUnset:()=> void,\n    resetLayer1:()=>void,\n} {\n    const walletLayer1:WalletLayer1States = useSelector((state: any) => state.walletLayer1)\n    const dispatch = useDispatch();\n    const updateWalletLayer1 = () => {\n        dispatch(walletLayer1Slice.actions.updateWalletLayer1(undefined))\n    }\n    const statusUnset = ()=>{\n        dispatch(walletLayer1Slice.actions.statusUnset(undefined))\n    }\n    const resetLayer1 = ()=>{\n        dispatch(walletLayer1Slice.actions.reset(undefined))\n    }\n    return {\n        ...walletLayer1,\n        resetLayer1,\n        statusUnset,\n        updateWalletLayer1\n    }\n\n}\n","import { InjectedConnector } from '@web3-react/injected-connector'\nimport { NetworkConnector } from '@web3-react/network-connector'\nimport { WalletConnectConnector } from '@web3-react/walletconnect-connector'\nimport { WalletLinkConnector } from '@web3-react/walletlink-connector'\nimport { LedgerConnector } from '@web3-react/ledger-connector'\nimport { TrezorConnector } from '@web3-react/trezor-connector'\nimport { AuthereumConnector } from '@web3-react/authereum-connector'\n\nconst POLLING_INTERVAL = 12000\n\nconst RPC_URLS: { [chainId: number]: string } = {\n  1: process.env.REACT_APP_RPC_URL_1 as string,\n  5: process.env.REACT_APP_RPC_URL_5 as string\n}\n\nconsole.log('RPC_URLS 1:', RPC_URLS[1])\nconsole.log('RPC_URLS 5:', RPC_URLS[5])\n\nexport const injected = new InjectedConnector({ supportedChainIds: [1, 5,] })\n\nexport const network = new NetworkConnector({\n  urls: { \n    1: RPC_URLS[1], \n    5: RPC_URLS[5] \n  },\n  defaultChainId: 1\n})\n\nexport const walletconnect = new WalletConnectConnector({\n  rpc: { 1: RPC_URLS[1] },\n  bridge: 'https://bridge.walletconnect.org',\n  qrcode: true,\n  pollingInterval: POLLING_INTERVAL\n})\n\nexport const walletlink = new WalletLinkConnector({\n  url: RPC_URLS[1],\n  appName: 'Loopring DEX'\n})\n\nexport const ledger = new LedgerConnector({ chainId: 1, url: RPC_URLS[1], pollingInterval: POLLING_INTERVAL })\n\nexport const trezor = new TrezorConnector({\n  chainId: 1,\n  url: RPC_URLS[1],\n  pollingInterval: POLLING_INTERVAL,\n  manifestEmail: 'dummy@abc.xyz',\n  manifestAppUrl: 'http://localhost:1234'\n})\n\nexport const authereum = new AuthereumConnector({ chainId: 42 })\n","import { createSlice, PayloadAction, Slice } from '@reduxjs/toolkit'\nimport { AmmMapStates, GetAmmMapParams } from './interface';\nimport { STATUS } from '../../constant';\n\n\n\nconst initialState: Required<AmmMapStates<object, object>> = {\n    ammMap: undefined,\n    __timer__: -1,\n    status: 'UNSET',\n    errorMessage: null,\n}\nconst ammMapSlice: Slice = createSlice({\n    name: 'ammMap',\n    initialState,\n    reducers: {\n        getAmmMap(state, action: PayloadAction<GetAmmMapParams>) {\n            state.status = STATUS.PENDING\n        },\n        getAmmMapStatus(state, action: PayloadAction<AmmMapStates<any, any>>) {\n            // @ts-ignore\n            if (action.error) {\n                state.status = STATUS.ERROR\n                // @ts-ignore\n                state.errorMessage = action.error\n            }\n            const {ammMap, __timer__} = action.payload\n            if (ammMap) {state.ammMap = ammMap;}\n            if (__timer__) {state.__timer__ = __timer__;}\n            state.status = STATUS.DONE\n        },\n        updateRealTimeAmmMap(state, action: PayloadAction<undefined>) {\n            state.status = STATUS.PENDING\n\n\n        },\n        statusUnset: state => {\n            state.status = STATUS.UNSET\n        }\n    },\n});\nexport { ammMapSlice };\nexport const {getAmmMap, getAmmMapStatus, statusUnset, updateRealTimeAmmMap} = ammMapSlice.actions\n","import { Provider } from 'react-redux'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nimport { createWeb3ReactRoot, Web3ReactProvider } from '@web3-react/core'\nimport store from 'stores'\n\nimport { getLibrary } from 'utils/web3_tools'\nimport { NetworkContextName } from 'loopring-sdk'\n\nimport { getTheme, i18n, provider, ProviderComposer } from \"@loopring-web/component-lib/static-resource\"\nimport { ThemeProvider as MuThemeProvider } from '@material-ui/core'\nimport LocalizationProvider from '@material-ui/pickers/LocalizationProvider'\n\nimport MomentUtils from '@material-ui/lab/AdapterMoment'\n\nimport { ThemeProvider } from \"@emotion/react\"\n\nimport { I18nextProvider } from \"react-i18next\"\n\n\n\nconst Web3ProviderNetwork = createWeb3ReactRoot(NetworkContextName)\nconst providers = [\n    provider(LocalizationProvider as any, {dateAdapter: MomentUtils}),\n    provider(I18nextProvider as any, {i18n:i18n}),\n    provider(MuThemeProvider as any, {theme: getTheme('dark')}),\n    provider(ThemeProvider as any, {theme: getTheme('dark')}),\n    provider(Provider as any, {store}),\n]\n\nReactDOM.render(\n// @ts-ignore\n    <ProviderComposer providers={providers}>\n        <Web3ReactProvider getLibrary={getLibrary}>\n            <Web3ProviderNetwork getLibrary={getLibrary}>\n                <App/>\n            </Web3ProviderNetwork>\n        </Web3ReactProvider>\n    </ProviderComposer>,\n    document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\nif (process.env.NODE_ENV !== 'production') {\n    reportWebVitals(console.log)\n}\n","import { createSlice, PayloadAction, Slice } from '@reduxjs/toolkit'\nimport { STATUS } from '../constant';\nimport { StateBase } from '../interface';\n\nconst initialState: StateBase & {socket: { [ key: string]:string[] }} = {\n  socket: {},\n  status: 'UNSET',\n  errorMessage: null,\n}\nconst socketSlice: Slice<StateBase & {socket: { [ key: string]:string[] }}> = createSlice({\n  name: 'socket',\n  initialState,\n  reducers: {\n    socketEnd(state,action:PayloadAction<undefined>){\n      state.status = STATUS.PENDING\n    },\n    sendNewMessage(state, action: PayloadAction<{socket: { [ key: string]:string[] }}>) {\n      state.socket = action.payload.socket\n    },\n    getSocketStatus(state, action: PayloadAction<{socket: { [ key: string]:string[] }}>) {\n\n      // @ts-ignore\n      if (action.error) {\n        state.status = STATUS.ERROR\n        // @ts-ignore\n        state.errorMessage = action.error\n      }\n      // state.socket = action.payload.socket\n      state.status = STATUS.DONE\n    },\n\n    statusUnset: state => {\n      state.status = STATUS.UNSET\n    }\n\n  },\n});\nexport { socketSlice };\nexport const { getSocketStatus, sendNewMessage, socketEnd, statusUnset} = socketSlice.actions;\n","import { createSlice, PayloadAction, Slice } from '@reduxjs/toolkit'\n\nimport { TradingInterval, ChainId, ExchangeInfo, TokenInfo, TickerData, } from 'loopring-sdk'\n\nexport interface TradingInfo {\n  chainId: number\n  interval: TradingInterval\n  ammPoolStats: any\n  ammPoolConf: any\n  ammActivityRules: any\n  markets: any\n  marketTrades: any\n  tickerMap: {[key: string]: TickerData}\n  tokens: {[key: string]: [value: TokenInfo]}\n  exchangeInfo?: ExchangeInfo\n}\n\nconst defaultInterval = process.env.REACT_APP_TEST_INTERVAL ? process.env.REACT_APP_TEST_INTERVAL : TradingInterval.hr1\n\nconst initialState = {\n  chainId: ChainId.GORLI,\n  interval: defaultInterval,\n  ammPoolConf: {},\n  ammActivityRules: {},\n  ammPoolStats: {},\n  markets: [],\n  marketTrades: {},\n  tokens: {},\n  tickerMap: {},\n  refreshRate: 1000,\n  refreshRateSlow: 3000,\n} as TradingInfo\n\nconst tradingSlice:Slice = createSlice({\n  name: 'trading',\n  initialState,\n  reducers: {\n    setChainId(state, action: PayloadAction<number>) {\n      state.chainId = action.payload\n    },\n    changeTradingInterval(state, action: PayloadAction<any>) {\n      state.interval = action.payload\n    },\n    setTickerMap(state, action: PayloadAction<any>) {\n      state.tickerMap = action.payload\n    },\n    setAmmPoolStats(state, action: PayloadAction<any>) {\n      state.ammPoolStats = action.payload\n    },\n    setAmmActivityRules(state, action: PayloadAction<any>) {\n      state.ammActivityRules = action.payload\n    },\n    setAmmPoolConf(state, action: PayloadAction<any>) {\n      state.ammPoolConf = action.payload\n    },\n    setMarketTrades(state, action: PayloadAction<any>) {\n      state.marketTrades = action.payload\n    },\n    setMarkets(state, action: PayloadAction<any>) {\n      state.markets = action.payload\n    },\n    setTokens(state, action: PayloadAction<{}>) {\n      state.tokens = action.payload\n    },\n    setExchangeInfo(state, action: PayloadAction<ExchangeInfo>) {\n      state.exchangeInfo = action.payload\n    },\n  },\n})\n\nexport const {\n  setChainId, \n  setAmmPoolStats,\n  setAmmActivityRules,\n  setMarketTrades, \n  setTickerMap, \n  setAmmPoolConf, \n  changeTradingInterval, \n  setMarkets, \n  setTokens, \n  setExchangeInfo, \n} = tradingSlice.actions\n\nexport default tradingSlice\n","export enum CONSTANTS {\n    Handler = 'handler',\n    AccountId = 'account_id',\n    Account = 'account',\n    Apikey = 'apikey',\n    Eddsakey = 'eddsakey',\n    ActiveTime = 'active_time',\n    AmmOrder = 'amm_order',\n    HardwareAddresses = 'hardware_addresses',\n}\n\nconst SESSION_TIMEOUT_SECONDS = 600\n\nexport class UserStorage {\n\n    public static getHandler() {\n        const rawHandler = sessionStorage.getItem(CONSTANTS.Handler)\n        try {\n            if (rawHandler !== undefined && rawHandler !== null)\n                return parseInt(rawHandler)\n        } catch (err) {\n        }\n        return undefined\n    }\n\n    public static setHandler(handler: any) {\n        sessionStorage.setItem(CONSTANTS.Handler, handler)\n    }\n\n    public static clearHandler() {\n        sessionStorage.removeItem(CONSTANTS.Handler)\n    }\n\n    public static checkTimeout(reset: boolean = false) : boolean {\n        let dateTimeStr = localStorage.getItem(CONSTANTS.ActiveTime)\n        let now = new Date().getTime()\n\n        if (dateTimeStr !== null && !reset) {\n            let tmpDt = new Date(parseInt(dateTimeStr))\n\n            // console.log(`now:${now} dateTimeStr:${dateTimeStr} delta:${now - tmpDt.getTime()}`)\n\n            if(now - tmpDt.getTime() > SESSION_TIMEOUT_SECONDS * 1000) {\n                console.log(`TIMEOUT! now:${now} dateTimeStr:${dateTimeStr} delta:${now - tmpDt.getTime()}`)\n                sessionStorage.clear()\n                localStorage.setItem(CONSTANTS.ActiveTime, now.toString())\n                return true\n            }\n        } else {\n\n            if (reset) {\n                console.log('force reset!!')\n            }\n\n            localStorage.setItem(CONSTANTS.ActiveTime, now.toString())\n        }\n\n        return false\n    }\n\n\n    public static getAccountId() {\n        const rawId = sessionStorage.getItem(CONSTANTS.AccountId)\n        try {\n            if (rawId)\n                return parseInt(rawId)\n        } catch (err) {\n        }\n        return undefined\n    }\n\n    public static setAccountId(accountId: number) {\n        sessionStorage.setItem(CONSTANTS.AccountId, accountId.toString())\n    }\n\n    public static getAccount() {\n        return sessionStorage.getItem(CONSTANTS.Account)\n    }\n\n    public static setAccount(account: string) {\n        sessionStorage.setItem(CONSTANTS.Account, account)\n    }\n\n    public static getApikey() {\n        return sessionStorage.getItem(CONSTANTS.Apikey)\n    }\n\n    public static setApikey(apikey: string) {\n        sessionStorage.setItem(CONSTANTS.Apikey, apikey)\n    }\n\n    public static getEddsakey() {\n        return sessionStorage.getItem(CONSTANTS.Eddsakey)\n    }\n\n    public static setEddsakey(eddsakey: string) {\n        sessionStorage.setItem(CONSTANTS.Eddsakey, eddsakey)\n    }\n\n    public static getAmmOrder(): string {\n        var orderHash = localStorage.getItem(CONSTANTS.AmmOrder)\n        return orderHash ? orderHash : ''\n    }\n\n    public static setAmmOrder(orderHash: string) {\n        localStorage.setItem(CONSTANTS.AmmOrder, orderHash)\n    }\n\n    public static clearAmmOrder() {\n        localStorage.removeItem(CONSTANTS.AmmOrder)\n    }\n\n    public static isHardwareAddress(address: string) {\n        let current = localStorage.getItem(CONSTANTS.HardwareAddresses)\n        if (current) {\n            if (current.includes(address.toLowerCase())) {\n                return true\n            }\n        }\n        return false\n    }\n\n    public static saveHardwareAddress(address: string) {\n        let current = localStorage.getItem(CONSTANTS.HardwareAddresses);\n        if (current) {\n            if (current.includes(address.toLowerCase()) !== true) {\n                let newValue = current + ',' + address.toLowerCase();\n                localStorage.setItem(CONSTANTS.HardwareAddresses, newValue);\n            }\n        } else {\n            localStorage.setItem(CONSTANTS.HardwareAddresses, address.toLowerCase());\n        }\n\n    }\n}\n","import { debug } from \"console\"\n\nexport function deepClone(data: any) {\n    if (!data || !(data instanceof Object) || (typeof data == \"function\")) {\n        return data || undefined\n    }\n    let constructor = data.constructor\n    let result = new constructor()\n    for (let key in data) {\n        if (data.hasOwnProperty(key)) {\n            result[key] = deepClone(data[key])\n        }\n    }\n    return result\n}\n\nexport async function copyToClipBoard(text: string){ //复制到剪切板\n\n    if(document.execCommand){\n        var textarea =document.createElement('textarea')\n        document.body.appendChild(textarea)\n        textarea.value=text\n        textarea.select()\n        document.execCommand(\"copy\")\n        document.body.removeChild(textarea)\n\t}\n\n    if (navigator.clipboard) {\n        await navigator.clipboard.writeText(text)\n    }\n\n\tif((window as any).clipboardData) {\n        (window as any).clipboardData.setData(\"Text\", text)\n\n        console.log('clipboardData:', text)\n        return true\n    }\n\treturn false\n}","import { createSlice, PayloadAction, Slice } from '@reduxjs/toolkit'\nimport {  TickerStates } from './interface';\nimport { STATUS } from '../constant';\nimport { CoinKey } from '@loopring-web/component-lib/src/static-resource';\n\nconst initialState:Required<TickerStates>  = {\n    tickerMap:{},\n    status:'UNSET',\n    errorMessage:null,\n}\nconst tickerMapSlice:Slice = createSlice({\n    name: 'tickerMap',\n    initialState,\n    reducers: {\n        getTicker(state, action:PayloadAction<CoinKey<any>>) {\n            state.status = STATUS.PENDING\n        },\n        getTickers(state, action:PayloadAction<Array<CoinKey<any>>>) {\n            state.status = STATUS.PENDING\n        },\n        getTickerStatus(state, action: PayloadAction<TickerStates>) {\n            // @ts-ignore\n            if (action.error) {\n                state.status =  STATUS.ERROR\n                // @ts-ignore\n                state.errorMessage = action.error\n            }\n                // debugger\n            state.tickerMap = {...state.tickerMap,...action.payload.tickerMap};\n            state.status = STATUS.DONE\n        },\n        statusUnset: state => {\n            state.status = STATUS.UNSET\n        }\n\n    },\n});\nexport { tickerMapSlice };\nexport const { getTicker,getTickers, getTickerStatus, statusUnset } = tickerMapSlice.actions;","import { useMemo, useState, useEffect } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\n\nimport { Web3Provider } from '@ethersproject/providers'\nimport { Web3ReactContextInterface } from '@web3-react/core/dist/types'\n\nimport { useWeb3React } from '@web3-react/core'\n\nimport { injected } from 'networks/web3_connectors'\n\nimport { ChainId, NetworkContextName } from 'loopring-sdk'\n\n/*\nimport EXCHANGE_ABI from 'config/abis/exchange_3_6.json'\nimport ERC20_ABI from 'config/abis/erc20.json'\nimport DEPOSIT_ABI from 'config/abis/deposit.json'\n\nimport Web3 from 'web3'\n*/\n\nexport function useActiveWeb3React(): Web3ReactContextInterface<Web3Provider> & { chainId?: ChainId } {\n  const context = useWeb3React<Web3Provider>()\n  const contextNetwork = useWeb3React<Web3Provider>(NetworkContextName)\n  return context.active ? context : contextNetwork\n}\n\nexport function useEtherscan() {\n  const { chainId } = useActiveWeb3React()\n\n  const [etherscanUrl, setEtherscanUrl] = useState<string>('')\n\n  useEffect(() => {\n    switch(chainId) {\n      case ChainId.MAINNET:\n        setEtherscanUrl('https://etherscan.io/address/')\n        break\n      default:\n        setEtherscanUrl('https://goerli.etherscan.io/address/')\n    }\n  }, [chainId])\n\n  return {\n    etherscanUrl,\n  }\n}\n\nexport function useEagerConnect() {\n\n  const { activate, active } = useWeb3React()\n\n  const [tried, setTried] = useState(false)\n\n  useEffect(() => {\n    injected.isAuthorized().then((isAuthorized: boolean) => {\n      if (isAuthorized) {\n        console.log('useEagerConnect isAuthorized')\n        activate(injected, undefined, true).catch(() => {\n          setTried(true)\n        })\n      } else {\n        console.log('useEagerConnect NOT isAuthorized')\n        setTried(true)\n      }\n    })\n  }, []) // intentionally only running on mount (make sure it's only mounted once :))\n\n  // if the connection worked, wait until we get confirmation of that to flip the flag\n  useEffect(() => {\n    if (!tried && active) {\n      setTried(true)\n    }\n  }, [tried, active])\n\n  return tried\n}\n\nexport function useInactiveListener(onReConnectInjected: any = undefined, suppress: boolean = false) {\n  const { active, error, activate, chainId, } = useWeb3React()\n  const dispatch = useDispatch()\n\n  useEffect((): any => {\n    const { ethereum } = window as any\n\n    const reConnectInjected = () => {\n      console.log('--------------------------> reConnectInjected')\n      activate(injected)\n      if (onReConnectInjected) {\n        onReConnectInjected()\n      }\n    }\n\n    if (ethereum && ethereum.on && !active && !error) {\n\n      const handleChainChanged = (chainId: string | number) => {\n        console.log('Handling \\'chainChanged\\' event with payload', chainId)\n        reConnectInjected()\n      }\n      const handleAccountsChanged = (accounts: string[]) => {\n        console.log('---------------------------------------------')\n        console.log('Handling \\'accountsChanged\\' event with payload', accounts)\n        console.log('before reset accounts.length=', accounts.length)\n        if (accounts.length > 0) {\n          console.log('before reset!!!!!!!!!!!!!!!!1')\n          reConnectInjected()\n        }\n      }\n\n      ethereum.on('chainChanged', handleChainChanged)\n      ethereum.on('accountsChanged', handleAccountsChanged)\n\n      return () => {\n        if (ethereum.removeListener) {\n          ethereum.removeListener('chainChanged', handleChainChanged)\n          ethereum.removeListener('accountsChanged', handleAccountsChanged)\n        }\n      }\n    }\n  }, [active, error, chainId, activate, dispatch])\n}\n\nexport function useBlockNumber() {\n  const { library, chainId } = useActiveWeb3React()\n\n  const [blockNumber, setBlockNumber] = useState<number>()\n\n  useEffect((): any => {\n      if (!!library) {\n          let stale = false\n\n          library\n              .getBlockNumber()\n              .then((blockNumber: number) => {\n                  if (!stale) {\n                      setBlockNumber(blockNumber)\n                  }\n              })\n              .catch(() => {\n                  if (!stale) {\n                      setBlockNumber(-1)\n                  }\n              })\n\n          const updateBlockNumber = (blockNumber: number) => {\n              setBlockNumber(blockNumber)\n          }\n          library.on('block', updateBlockNumber)\n\n          return () => {\n              stale = true\n              library.removeListener('block', updateBlockNumber)\n              setBlockNumber(undefined)\n          }\n      }\n  }, [library, chainId])\n\n  return {\n      blockNumber,\n  }\n}\n\nexport function useBalance() {\n  const { account, library, chainId } = useActiveWeb3React()\n\n  const [balance, setBalance] = useState<number>()\n  useEffect((): any => {\n      if (!!account && !!library) {\n          let stale = false\n\n          library\n              .getBalance(account)\n              .then((balance: any) => {\n                  if (!stale) {\n                      setBalance(balance)\n                  }\n              })\n              .catch(() => {\n                  if (!stale) {\n                      setBalance(0)\n                  }\n              })\n\n          return () => {\n              stale = true\n              setBalance(0)\n          }\n      }\n  }, [account, library, chainId]) // ensures refresh if referential identity of library doesn't change across chainIds\n\n  return {\n      balance,\n  }\n}\n","import { useDispatch, useSelector } from 'react-redux'\nimport { userRewardsMapSlice } from './reducer';\nimport { UserRewardsStates } from './interface';\n\nexport function useUserRewards(): UserRewardsStates & {\n    updateUserRewards:()=>void,\n    statusUnset:()=>void,\n} {\n    const userRewardsMap:UserRewardsStates = useSelector((state: any) => state.userRewardsMap)\n    const dispatch = useDispatch();\n\n    const updateUserRewards = () => {\n        dispatch(userRewardsMapSlice.actions.getUserRewards(undefined))\n    }\n    const statusUnset = ()=>{\n        dispatch(userRewardsMapSlice.actions.statusUnset(undefined))\n    }\n    return {\n        ...userRewardsMap,\n        statusUnset,\n        updateUserRewards,\n    }\n\n}\n","import { createSlice, PayloadAction, Slice } from '@reduxjs/toolkit'\nimport { ENV, System, SystemStatus } from './interface';\nimport { STATUS } from '../constant';\n\nconst initialState: SystemStatus = {\n    env: ENV.PROD,\n    chainId: 'unknown',\n    // network:'NONETWORK',\n    baseURL: '',\n    socketURL: '',\n    faitPrices: undefined,\n    gasPrice: undefined,\n    forex: undefined,\n    __timer__: -1,\n    status: 'UNSET',\n    errorMessage: null,\n\n    exchangeInfo: undefined,\n\n    topics: [],\n}\nconst systemSlice: Slice<SystemStatus> = createSlice({\n    name: 'system',\n    initialState,\n    reducers: {\n\n        updateSystem(state, action: PayloadAction<System<{[key:string]:any}>>) {\n            state.chainId = action.payload.chainId\n            state.status = STATUS.PENDING\n        },\n        updateSocketURL(state, action:PayloadAction<{socketURL:string}>) {\n            state.socketURL =  action.payload.socketURL;\n        },\n        updateRealTimeObj(state, action: PayloadAction<Partial<{ faitPrices: any, gasPrice: number, forex: number }>>) {\n            const {forex, faitPrices, gasPrice} = action.payload;\n            if (forex) {\n                state.forex = forex\n            }\n            if (faitPrices) {\n                state.faitPrices = faitPrices\n            }\n            if (gasPrice) {\n                state.gasPrice = gasPrice\n            }\n\n\n            // state = {\n            //     ...state.system,\n            //     forex: forex?,\n            //     faitPrices: action.payload.faitPrices ? action.payload.faitPrices : state.system.faitPrices,\n            //     gasPrice: action.payload.gasPrice ? action.payload.gasPrice : state.system.gasPrice,\n            // };\n\n        },\n        getSystemStatus(state, action: PayloadAction<Partial<SystemStatus>>) {\n\n            // @ts-ignore\n            if (action.error) {\n                state.status = STATUS.ERROR\n                // @ts-ignore\n                state.errorMessage = action.error\n            }\n            const {env, baseURL, faitPrices, gasPrice, forex, exchangeInfo, __timer__} = action.payload;\n            if (env) {\n                state.env = env\n            }\n            if (baseURL) {\n                state.baseURL = baseURL\n            }\n            if (faitPrices) {\n                state.faitPrices = faitPrices\n            }\n            if (gasPrice) {\n                state.gasPrice = gasPrice\n            }\n            if (forex) {\n                state.forex = forex\n            }\n            \n            if (exchangeInfo) {\n                state.exchangeInfo = exchangeInfo\n            }\n\n            if (__timer__) {\n                state.__timer__ = __timer__\n            }\n            state.status = STATUS.DONE\n        },\n        statusUnset: state => {\n            state.status = STATUS.UNSET\n        }\n\n    },\n});\nexport { systemSlice };\nexport const {updateSystem, setTopics, getSystemStatus, statusUnset, updateRealTimeObj, updateSocketURL} = systemSlice.actions;","import { StateBase } from '../interface';\nimport { ChainId, ExchangeInfo } from 'loopring-sdk';\n\nexport enum ENV {\n    DEV='DEV',\n    UAT='UAT',\n    PROD='PROD',\n}\nexport enum NETWORKEXTEND {\n    NONETWORK = 'unknown'\n}\nexport type NETWORK = NETWORKEXTEND | ChainId\n\n\nexport type System<C extends {[key:string]:any}> = {\n    env:keyof typeof ENV,\n    chainId: 1|5|'unknown'\n    // network: keyof typeof NETWORK,\n    socketURL:string,\n    baseURL: string,\n    faitPrices:{ [k in keyof C]:{price:any,[key:string]:any}} | undefined,\n    gasPrice:number | undefined,\n    forex:number | undefined,\n    exchangeInfo: ExchangeInfo | undefined,\n\n}\n\nexport type SystemStatus = System<{[key:string]:any}> & {\n    // system:System | {}\n    __timer__:NodeJS.Timeout | -1\n    topics: any[]\n}  & StateBase\n\n\n\n","import { createSlice, PayloadAction, Slice } from '@reduxjs/toolkit'\nimport { WalletLayer1Map, WalletLayer1States } from './interface';\nimport { STATUS } from '../constant';\n\n\nconst initialState:WalletLayer1States  = {\n    walletLayer1:undefined,\n    status:'UNSET',\n    errorMessage:null,\n}\nconst walletLayer1Slice:Slice = createSlice({\n    name: 'walletLayer1',\n    initialState,\n    reducers: {\n        updateWalletLayer1(state, action:PayloadAction<string | undefined>) {\n            state.status = STATUS.PENDING\n        },\n        reset(state, action:PayloadAction<string | undefined>) {\n            state.walletLayer1 = undefined;\n            state.status = STATUS.UNSET;\n        },\n        getWalletLayer1Status(state, action: PayloadAction<{ walletLayer1:WalletLayer1Map<object> }>) {\n            // @ts-ignore\n            if (action.error) {\n                state.status =  STATUS.ERROR\n                // @ts-ignore\n                state.errorMessage = action.error\n            }\n            state.walletLayer1 = {...action.payload.walletLayer1};\n            state.status = STATUS.DONE\n        },\n        statusUnset: state => {\n            state.status = STATUS.UNSET\n        }\n    },\n});\nexport { walletLayer1Slice };\nexport const { updateWalletLayer1, getWalletLayer1Status,statusUnset,reset } = walletLayer1Slice.actions\n","import { createSlice, PayloadAction, Slice } from '@reduxjs/toolkit'\nimport { WalletLayer2Map, WalletLayer2States } from './interface';\nimport { STATUS } from '../constant';\n\n\nconst initialState:WalletLayer2States  = {\n    walletLayer2:undefined,\n    status:'UNSET',\n    errorMessage:null,\n}\nconst walletLayer2Slice:Slice = createSlice({\n    name: 'walletLayer2S',\n    initialState,\n    reducers: {\n        updateWalletLayer2(state, action:PayloadAction<string | undefined>) {\n            state.status = STATUS.PENDING\n        },\n        reset(state, action:PayloadAction<string | undefined>) {\n            state.walletLayer2 = undefined;\n            state.status = STATUS.UNSET;\n        },\n        getWalletLayer2Status(state, action: PayloadAction<{ walletLayer2:WalletLayer2Map<object> }>) {\n            // @ts-ignore\n            if (action.error) {\n                state.status =  STATUS.ERROR\n                // @ts-ignore\n                state.errorMessage = action.error\n            }\n            state.walletLayer2 = {...action.payload.walletLayer2};\n            state.status = STATUS.DONE\n        },\n        statusUnset: state => {\n            state.status = STATUS.UNSET\n        }\n    },\n});\nexport { walletLayer2Slice };\nexport const {  updateWalletLayer2,getWalletLayer2Status,statusUnset,reset } = walletLayer2Slice.actions\n","import { createSlice, PayloadAction, Slice } from '@reduxjs/toolkit'\nimport {  UserRewardsStates } from './interface';\nimport { STATUS } from '../constant';\n\nconst initialState:UserRewardsStates = {\n    userRewardsMap:undefined,\n    status:'UNSET',\n    errorMessage:null,\n    __timer__:-1,\n}\nconst userRewardsMapSlice:Slice<UserRewardsStates> = createSlice({\n    name: 'userRewardsMap',\n    initialState,\n    reducers: {\n        getUserRewards(state, action:PayloadAction<undefined>) {\n            state.status = STATUS.PENDING\n        },\n        getUserRewardsStatus(state, action: PayloadAction<UserRewardsStates>) {\n            // @ts-ignore\n            if (action.error) {\n                state.status =  STATUS.ERROR\n                // @ts-ignore\n                state.errorMessage = action.error\n            }\n            state.userRewardsMap = {...state.userRewardsMap,...action.payload.userRewardsMap};\n            if(action.payload.__timer__){\n                state.__timer__  =  action.payload.__timer__\n            }\n            state.status = STATUS.DONE\n        },\n        statusUnset: state => {\n            state.status = STATUS.UNSET\n        }\n\n    },\n});\nexport { userRewardsMapSlice };\nexport const { getUserRewards, getUserRewardsStatus, statusUnset } = userRewardsMapSlice.actions;","import { createSlice, PayloadAction, Slice } from '@reduxjs/toolkit'\nimport { AmmActivityMapStates } from './interface';\nimport { STATUS } from '../../constant';\n\n\nconst initialState:Required<AmmActivityMapStates>  = {\n    ammActivityMap:{},\n    status:'UNSET',\n    errorMessage:null,\n}\nconst ammActivityMapSlice:Slice = createSlice({\n    name: 'ammActivityMap',\n    initialState,\n    reducers: {\n        getAmmActivityMap(state, action:PayloadAction<string | undefined>) {\n            state.status = STATUS.PENDING\n        },\n        getAmmActivityMapStatus(state, action: PayloadAction<AmmActivityMapStates>) {\n            // @ts-ignore\n            if (action.error) {\n                state.status =  STATUS.ERROR\n                // @ts-ignore\n                state.errorMessage = action.error\n            }\n            state.ammActivityMap = {...action.payload.ammActivityMap};\n            state.status = STATUS.DONE\n        },\n        statusUnset: state => {\n            state.status = STATUS.UNSET\n        }\n\n    },\n});\nexport { ammActivityMapSlice };\nexport const { getAmmActivityMap, getAmmActivityMapStatus, statusUnset } = ammActivityMapSlice.actions\n","import { createSlice, PayloadAction, Slice } from '@reduxjs/toolkit'\nimport { GetTokenMapParams, TokenMapStates } from './interface';\nimport { STATUS } from '../constant';\n\nconst initialState: TokenMapStates<object> = {\n    coinMap: {},\n    addressIndex: undefined,\n    tokenMap: undefined,\n    marketMap: undefined,\n    idIndex: undefined,\n    status: 'UNSET',\n    errorMessage: null,\n}\nconst tokenMapSlice: Slice<TokenMapStates<object>> = createSlice({\n    name: 'tokenMap',\n    initialState,\n    reducers: {\n        getTokenMap(state, action: PayloadAction<GetTokenMapParams<any>>) {\n            state.status = STATUS.PENDING\n        },\n        getTokenMapStatus(state, action: PayloadAction<TokenMapStates<object>>) {\n            // @ts-ignore      console.log(action.type)\n            if (action.error) {\n                state.status = STATUS.ERROR\n                // @ts-ignore\n                state.errorMessage = action.error\n            }\n\n            const {tokenMap, marketMap, addressIndex, idIndex, coinMap, marketArray, marketCoins} = action.payload;\n            if (tokenMap) { state.tokenMap = tokenMap }\n            if (marketMap) { state.marketMap = marketMap }\n            if (addressIndex) { state.addressIndex = addressIndex }\n            if (idIndex) { state.idIndex = idIndex }\n            if (coinMap) { state.coinMap = coinMap }\n            if (marketArray) { state.marketArray = marketArray }\n            if (marketCoins)  { state.marketCoins = marketCoins }\n            // if (tokenPairsMap) {state.tokenPairsMap = tokenPairsMap }\n            state.status = STATUS.DONE;\n        },\n        // getTokenPairMap(state, action: PayloadAction<{tokenPairs: TokenPairs }>) {\n        //     const {tokenPairs} = action.payload;\n        //     const tokenPairsMap =  Reflect.ownKeys(tokenPairs).reduce((prev,key)=>{\n        //         // @ts-ignore\n        //         return prev[key as string] =  tokenPairs[key as string].tokenList\n        //     }, {} )\n        //     if (tokenPairsMap) {state.tokenPairsMap = tokenPairsMap }\n        //     // state.status = STATUS.PENDING\n        // },\n        statusUnset: state => {\n            state.status = STATUS.UNSET\n        }\n\n    },\n});\nexport { tokenMapSlice };\nexport const {getTokenMap, getTokenMapStatus,getTokenPairMap, statusUnset} = tokenMapSlice.actions;","import {\n    AmmPoolActivityRule,\n    AmmPoolActivityStatus,\n    AmmPoolSnapshot,\n    LoopringMap,\n    TickerData,\n    toBig,\n} from 'loopring-sdk';\nimport { AmmActivity, AmmCardProps } from '@loopring-web/component-lib/static-resource';\nimport store from '../../stores';\nimport { deepClone } from '../../utils/obj_tools';\nimport { AmmUserReward, AmmUserRewardMap } from 'loopring-sdk/dist/defs/loopring_defs';\nimport BigNumber from 'bignumber.js';\nimport { MyAmmLP } from '@loopring-web/component-lib/src/static-resource';\nimport { volumeToCount, volumeToCountAsBigNumber } from './volumeToCount';\nimport { coinMap } from '@loopring-web/component-lib/static';\nimport { AmmDetailStore } from '../../stores/Amm/AmmMap';\nimport { WalletMapExtend } from './makeWallet';\n\nexport type AmmActivityViewMap<R, I> = {\n    [key in keyof R]?: AmmActivity<I>[] | undefined\n}\nexport const makeUIAmmActivityMap = <R extends { [ key: string ]: any }, I extends { [ key: string ]: any }>\n({ammActivityMap, type, ammPoolActivityStatus}: {\n    ammActivityMap: LoopringMap<LoopringMap<AmmPoolActivityRule[ ]>> | undefined,\n    type: 'AMM_MINING' | 'SWAP_VOLUME_RANKING',\n    ammPoolActivityStatus: AmmPoolActivityStatus[]\n}, myReward: AmmUserRewardMap | undefined):\n    Array<AmmCardProps<I>> => {\n    const {coinMap, tokenMap, idIndex} = store.getState().tokenMap\n    let ammActivityViewMap: AmmActivityViewMap<R, I> = {}\n    if (ammActivityMap && ammActivityMap[ type ]) {\n\n\n        // @ts-ignore\n        ammPoolActivityStatus.forEach((status: AmmPoolActivityStatus) => {\n\n            if (ammActivityMap[ type ][ status ]) {\n                // @ts-ignore\n                ammActivityMap[ type ][ status ].reduce((prev: AmmActivityViewMap<R, I>, ammPoolActivityRule: AmmPoolActivityRule) => {\n\n                    if (coinMap && ammPoolActivityRule.awardRules[ 0 ] && idIndex && tokenMap) {\n\n                        const symbol = idIndex[ ammPoolActivityRule.awardRules[ 0 ].tokenId as any ]\n\n                        // @ts-ignore\n                        const item = {\n                            // @ts-ignore\n                            rewardToken: coinMap[ symbol ],\n                            myRewards: status === AmmPoolActivityStatus.InProgress && myReward && myReward[ ammPoolActivityRule.market ] ?\n                                volumeToCount(symbol, myReward[ ammPoolActivityRule.market ]?.currentRewards[ 0 ].volume) : 0,\n                            duration: {\n                                from: new Date(ammPoolActivityRule?.rangeFrom),\n                                to: new Date(ammPoolActivityRule?.rangeTo),\n                            },\n                            isPass: AmmPoolActivityStatus.EndOfGame === status,\n                        }\n                        if (prev[ ammPoolActivityRule.market ]) {\n                            // @ts-ignore\n                            prev[ ammPoolActivityRule.market ].push(item);\n                        } else {\n                            // @ts-ignore\n                            prev[ ammPoolActivityRule.market ] = [item];\n                        }\n\n\n                        // return prev;\n                    }\n                    return prev;\n                }, ammActivityViewMap)\n\n            }\n        })\n    }\n    const resultArray = makeAsCard(ammActivityViewMap)\n    // console.log(resultArray)\n    return resultArray;\n\n\n}\nconst makeAsCard = <R extends { [ key: string ]: any }, I extends { [ key: string ]: any }>\n(ammActivityViewMap: AmmActivityViewMap<R, I> | undefined, myReward?: any): Array<AmmCardProps<I>> => {\n    const {coinMap} = store.getState().tokenMap\n    const {ammMap} = store.getState().amm.ammMap\n    try {\n        if (ammActivityViewMap && coinMap) {\n            // @ts-ignore\n            return Reflect.ownKeys(ammActivityViewMap).reduce((prev: Array<AmmCardProps<I>>, key: string) => {\n                const _ammInfo = ammMap[ key as string ]\n                if (_ammInfo && _ammInfo.coinA && coinMap && ammActivityViewMap[ key ]) {\n\n                    // @ts-ignore\n                    const itemArray = ammActivityViewMap[ key ].map((item) => {\n                        return {\n                            ...deepClone(_ammInfo),\n                            // @ts-ignore\n                            coinAInfo: coinMap[ _ammInfo.coinA ],\n                            // @ts-ignore\n                            coinBInfo: coinMap[ _ammInfo.coinB ],\n                            activity: item,\n                        }\n                    })\n                    prev = [...prev, ...itemArray]\n                }\n                return prev;\n            }, [] as Array<AmmCardProps<I>>) as Array<AmmCardProps<I>>\n        } else {\n            return [] as Array<AmmCardProps<I>>\n        }\n    } catch (error) {\n        console.log(error)\n        return []\n    }\n}\ntype Value = undefined | number;\nexport type SummaryMyAmm = {\n    rewardDollar: Value,\n    rewardYuan: Value,\n    feeDollar: Value,\n    feeYuan: Value,\n}\nexport const makeSummaryMyAmm = <C extends { [ key: string ]: any }>({\n                                                                         userRewardsMap\n                                                                     }: {\n    userRewardsMap: LoopringMap<AmmUserReward> | undefined\n}):\n    SummaryMyAmm | undefined => {\n    const {coinMap, idIndex, tokenMap} = store.getState().tokenMap;\n    const {faitPrices, forex} = store.getState().system;\n    if (userRewardsMap && idIndex && coinMap && tokenMap && faitPrices && forex) {\n        let summaryMyAmm = Object.keys(userRewardsMap).reduce((prev, key) => {\n            if (/AMM-/i.test(key)) {\n                // @ts-ignore\n                const [, coinA, coinB] = key.match(/AMM-(\\w+)-(\\w+)/i);\n                const ammUserReward = userRewardsMap[ key ]\n                const {\n                    rewardDollar,\n                    rewardYuan,\n                    feeDollar,\n                    feeYuan\n                } = getOneRewardInfo({coinB, coinA, ammUserReward, idIndex, faitPrices, forex})\n                prev.rewardDollar = rewardDollar ? toBig(rewardDollar).plus(prev.rewardDollar).toNumber() : 0;\n                prev.rewardYuan = rewardYuan ? toBig(rewardYuan).plus(prev.rewardYuan).toNumber() : 0;\n                prev.feeDollar = feeDollar ? toBig(feeDollar).plus(prev.feeDollar).toNumber() : 0;\n                prev.feeYuan = feeYuan ? toBig(feeYuan).plus(prev.feeYuan).toNumber() : 0;\n            }\n            return prev\n        }, {\n            rewardDollar: 0,\n            rewardYuan: 0,\n            feeDollar: 0,\n            feeYuan: 0\n        })\n\n        return summaryMyAmm\n    }\n    return undefined\n}\nconst getOneRewardInfo = <C>({\n                                 coinA,\n                                 coinB,\n                                 ammUserReward,\n                                 idIndex,\n                                 faitPrices,\n                                 forex,\n                                 walletMap,\n                                 snapShotData\n                             }: any) => {\n    let rewardToken, rewardToken2, feeA, feeB, feeDollar, feeYuan, reward, reward2, rewardDollar, rewardYuan;\n    if (ammUserReward) {\n        rewardToken = ammUserReward.currentRewards[ 0 ] ? idIndex[ ammUserReward.currentRewards[ 0 ].tokenId as number ] : undefined\n        rewardToken2 = ammUserReward.currentRewards[ 1 ] ? idIndex[ ammUserReward.currentRewards[ 1 ].tokenId as number ] : undefined\n        feeA = ammUserReward ? volumeToCountAsBigNumber(coinA, ammUserReward.feeRewards[ 0 ]) : toBig(0);\n        feeB = ammUserReward ? volumeToCountAsBigNumber(coinB, ammUserReward.feeRewards[ 1 ]) : toBig(0);\n        feeA = feeA ? feeA : toBig(0);\n        feeB = feeB ? feeB : toBig(0);\n        feeDollar = feeA.times(faitPrices[ coinA ].price).plus(feeB.times(faitPrices[ coinB ].price))\n        feeYuan = feeDollar.times(forex);\n        reward = rewardToken ? volumeToCountAsBigNumber(rewardToken, ammUserReward.currentRewards[ 0 ].volume) as BigNumber : toBig(0);\n        reward2 = rewardToken2 ? volumeToCountAsBigNumber(rewardToken2, ammUserReward.currentRewards[ 1 ].volume) as BigNumber : toBig(0);\n        reward = reward ? reward : toBig(0);\n        reward2 = reward2 ? reward2 : toBig(0);\n        rewardDollar = reward.times(rewardToken ? faitPrices[ rewardToken ].price : 1).plus(reward2.times(rewardToken2 ? faitPrices[ rewardToken2 ].price : 1));\n        rewardYuan = rewardDollar.times(forex);\n    }\n    let balanceA, balanceB, balanceDollar, balanceYuan;\n    if (walletMap && walletMap[ 'LP-' + coinA + '-' + coinB ] && snapShotData) {\n        // @ts-ignore\n        const ratio = new BigNumber(walletMap[ 'LP-' + coinA + '-' + coinB ].count).div(snapShotData.ammPoolsBalance.lp.volume);\n        balanceA = ratio.times(volumeToCountAsBigNumber(coinA, snapShotData.ammPoolsBalance.pooled[ 0 ].volume) || 1);\n        balanceB = ratio.times(volumeToCountAsBigNumber(coinB, snapShotData.ammPoolsBalance.pooled[ 1 ].volume) || 1);\n        // @ts-ignore\n        balanceDollar = balanceA.times(faitPrices[ coinA ].price).plus(balanceB.times(faitPrices[ coinB ].price))\n        balanceYuan = balanceDollar.times(forex)\n    }\n\n    return {\n        feeA: feeA ? feeA.toNumber() : undefined,\n        feeB: feeB ? feeB.toNumber() : undefined,\n        reward: reward ? reward.toNumber() : undefined,\n        rewardToken: rewardToken ? coinMap[ rewardToken ] : undefined,\n        reward2: reward2 ? reward2.toNumber() : undefined,\n        rewardToken2: rewardToken2 ? coinMap[ rewardToken2 ] : undefined,\n        rewardDollar: rewardDollar ? rewardDollar.toNumber() : undefined,\n        rewardYuan: rewardYuan ? rewardYuan.toNumber() : undefined,\n        feeDollar: feeDollar ? feeDollar.toNumber() : undefined,\n        feeYuan: feeYuan ? feeYuan.toNumber() : undefined,\n        ammDetail: {\n            coinAInfo: coinMap[ coinA ],\n            coinBInfo: coinMap[ coinB ]\n        },\n        balanceA: balanceA ? balanceA.toNumber() : undefined,\n        balanceB: balanceB ? balanceB.toNumber() : undefined,\n        balanceDollar: balanceDollar ? balanceDollar.toNumber() : undefined,\n        balanceYuan: balanceYuan ? balanceYuan.toNumber() : undefined,\n    } as MyAmmLP<C>\n}\n\nexport const makeMyAmmWithSnapshot = <C extends { [ key: string ]: any }>(market: any, _walletMap: WalletMapExtend<C> | undefined, ammUserRewardMap: LoopringMap<AmmUserReward> | undefined, snapShotData?: {\n    tickerData?: TickerData | undefined\n    ammPoolsBalance: AmmPoolSnapshot | undefined\n} | undefined) => {\n    const {coinMap, idIndex, tokenMap} = store.getState().tokenMap;\n    const {faitPrices, forex} = store.getState().system;\n    const [, coinA, coinB] = market.match(/(\\w+)-(\\w+)/i);\n    let _myAmm: Partial<MyAmmLP<C>> = {};\n    if (ammUserRewardMap && ammUserRewardMap[ 'AMM-' + market ]\n        && snapShotData && snapShotData.ammPoolsBalance) {\n        const ammUserReward: AmmUserReward = ammUserRewardMap[ 'AMM-' + market ];\n        // @ts-ignore\n        if (coinMap && tokenMap && idIndex && forex && faitPrices) {\n            _myAmm = getOneRewardInfo({\n                coinA, coinB, ammUserReward,\n                idIndex, faitPrices, forex, walletMap: _walletMap, snapShotData\n            })\n\n            return _myAmm as MyAmmLP<C>\n        }\n    }\n    return {\n        feeA: undefined,\n        feeB: undefined,\n        feeDollar: undefined,\n        feeYuan: undefined,\n        reward: undefined,\n        rewardToken: undefined as any,\n        balanceA: undefined,\n        balanceB: undefined,\n        balanceYuan: undefined,\n        balanceDollar: undefined,\n    }\n}\n\nexport const makeMyAmmWithStat = <C extends { [ key: string ]: any }>\n(market: any,\n _walletMap: WalletMapExtend<C> | undefined,\n ammUserRewardMap: LoopringMap<AmmUserReward> | undefined,\n ammDetail: AmmDetailStore<C>) => {\n    const {coinMap, idIndex, tokenMap} = store.getState().tokenMap;\n    const {faitPrices, forex} = store.getState().system;\n    const [, coinA, coinB] = market.match(/(\\w+)-(\\w+)/i);\n    let _myAmm = {};\n    let balanceA, balanceB, balanceDollar, balanceYuan;\n    if (_walletMap && _walletMap[ 'LP-' + coinA + '-' + coinB ] && forex) {\n        // @ts-ignore\n        const ratio = new BigNumber(_walletMap[ 'LP-' + coinA + '-' + coinB ].count).div(ammDetail.totalLPToken);\n        balanceA = ratio.times(volumeToCountAsBigNumber(coinA, ammDetail.totalA ? ammDetail.totalA : 0) || 1);\n        balanceB = ratio.times(volumeToCountAsBigNumber(coinB, ammDetail.totalB ? ammDetail.totalB : 0) || 1);\n        // @ts-ignore\n        balanceDollar = balanceA.times(faitPrices[ coinA ].price).plus(balanceB.times(faitPrices[ coinB ].price))\n        balanceYuan = balanceDollar.times(forex);\n        _myAmm = {\n            // ...ammDetail,\n            balanceA: balanceA.toNumber(),\n            balanceB: balanceB.toNumber(),\n            balanceYuan: balanceYuan.toNumber(),\n            balanceDollar: balanceDollar.toNumber(),\n        }\n    }\n    if (ammUserRewardMap && ammUserRewardMap[ 'AMM-' + market ]\n        && ammDetail && forex) {\n        const ammUserReward: AmmUserReward = ammUserRewardMap[ 'AMM-' + market ];\n        let rewardToken, rewardToken2, feeA, feeB, feeDollar, feeYuan, reward, reward2, rewardDollar, rewardYuan;\n\n        if (coinMap && tokenMap && idIndex && forex && faitPrices && ammUserReward) {\n            rewardToken = ammUserReward.currentRewards[ 0 ] ? idIndex[ ammUserReward.currentRewards[ 0 ].tokenId as number ] : undefined\n            rewardToken2 = ammUserReward.currentRewards[ 1 ] ? idIndex[ ammUserReward.currentRewards[ 1 ].tokenId as number ] : undefined\n            feeA = ammUserReward ? volumeToCountAsBigNumber(coinA, ammUserReward.feeRewards[ 0 ]) : toBig(0);\n            feeB = ammUserReward ? volumeToCountAsBigNumber(coinB, ammUserReward.feeRewards[ 1 ]) : toBig(0);\n            feeA = feeA ? feeA : toBig(0);\n            feeB = feeB ? feeB : toBig(0);\n            feeDollar = feeA.times(faitPrices[ coinA ].price).plus(feeB.times(faitPrices[ coinB ].price))\n            feeYuan = feeDollar.times(forex);\n            reward = rewardToken ? volumeToCountAsBigNumber(rewardToken, ammUserReward.currentRewards[ 0 ].volume) as BigNumber : toBig(0);\n            reward2 = rewardToken2 ? volumeToCountAsBigNumber(rewardToken2, ammUserReward.currentRewards[ 1 ].volume) as BigNumber : toBig(0);\n            reward = reward ? reward : toBig(0);\n            reward2 = reward2 ? reward2 : toBig(0);\n            rewardDollar = reward.times(rewardToken ? faitPrices[ rewardToken ].price : 1).plus(reward2.times(rewardToken2 ? faitPrices[ rewardToken2 ].price : 1));\n            rewardYuan = rewardDollar.times(forex);\n            _myAmm = {\n                ..._myAmm,\n                feeA: feeA ? feeA.toNumber() : undefined,\n                feeB: feeB ? feeB.toNumber() : undefined,\n                reward: reward ? reward.toNumber() : undefined,\n                // @ts-ignore\n                rewardToken: rewardToken ? coinMap[ rewardToken ] : undefined,\n                reward2: reward2 ? reward2.toNumber() : undefined,\n                // @ts-ignore\n                rewardToken2: rewardToken2 ? coinMap[ rewardToken2 ] : undefined,\n                rewardDollar: rewardDollar ? rewardDollar.toNumber() : undefined,\n                rewardYuan: rewardYuan ? rewardYuan.toNumber() : undefined,\n                feeDollar: feeDollar ? feeDollar.toNumber() : undefined,\n                feeYuan: feeYuan ? feeYuan.toNumber() : undefined,\n                ammDetail: {\n                    // @ts-ignore\n                    coinAInfo: coinA ? coinMap[ coinA ] : undefined,\n                    // @ts-ignore\n                    coinBInfo: coinB ? coinMap[ coinB ] : undefined,\n                },\n            }\n\n        }\n        return _myAmm as MyAmmLP<C>\n    }\n    return {\n        feeA: undefined,\n        feeB: undefined,\n        feeDollar: undefined,\n        feeYuan: undefined,\n        reward: undefined,\n        rewardToken: undefined as any,\n        balanceA: undefined,\n        balanceB: undefined,\n        balanceYuan: undefined,\n        balanceDollar: undefined,\n    }\n}\n\n// if (ammUserReward) {\n//     const symbol = ammUserReward.currentRewards[ 0 ] ? idIndex[ ammUserReward.currentRewards[ 0 ].tokenId as number ] : undefined\n//     const symbol2 = ammUserReward.currentRewards[ 1 ] ? idIndex[ ammUserReward.currentRewards[ 1 ].tokenId as number ] : undefined\n//\n//     _myAmm = {\n//         ..._myAmm,\n//         feeA: ammUserReward ? volumeToCount(coinA, ammUserReward.feeRewards[ 0 ]) : 0,//Number(ammUserReward.feeRewards[ 0 ]) : 0,\n//         feeB: ammUserReward ? volumeToCount(coinB, ammUserReward.feeRewards[ 1 ]) : 0,//Number(ammUserReward.feeRewards[ 1 ]) : 0,\n//         reward: symbol ? volumeToCount(symbol, ammUserReward.currentRewards[ 0 ].volume) : 0,\n//         // @ts-ignore\n//         rewardToken: symbol ? coinMap[ symbol ] : undefined,\n//         reward2: symbol2 ? volumeToCount(symbol2, ammUserReward.currentRewards[ 1 ].volume) : 0,\n//         // @ts-ignore\n//         rewardToken2: symbol2 ? coinMap[ symbol2 ] : undefined,\n//\n//\n//     }\n//     _myAmm.feeDollar = _myAmm.feeA && _myAmm.feeA * faitPrices[ coinA ].price;\n//     _myAmm.feeDollar = _myAmm.feeB && _myAmm.feeB * faitPrices[ coinB ].price;\n// }\n//\n//\n// if (_walletMap && _walletMap[ 'LP-' + market ]) {\n//     // @ts-ignore\n//     const ratio = new BigNumber(_walletMap[ 'LP-' + market ].detail.total).div(snapShotData.ammPoolsBalance.lp.volume);\n//     _myAmm = {\n//         ..._myAmm,  //snapShotData.ammPoolsBalance.pooled[ 0 ].volume).div(BIG10.pow(tokenMap[coinA].decimals)\n//         balanceA: ratio.times(volumeToCountAsBigNumber(coinA, snapShotData.ammPoolsBalance.pooled[ 0 ].volume) || 1).toNumber(),\n//         balanceB: ratio.times(volumeToCountAsBigNumber(coinB, snapShotData.ammPoolsBalance.pooled[ 1 ].volume) || 1).toNumber(),\n//     }\n//     // @ts-ignore\n//     _myAmm.balanceDollar = _myAmm.balanceA * faitPrices[ coinA ].price + _myAmm.balanceB * faitPrices[ coinB ].price\n//     _myAmm.balanceYuan = _myAmm.balanceDollar * forex\n// }\n// export const getAmmPoolGameUserRanks = ():Promise<AmmUserRewardMap> => {\n//     const {accountId} = store.getState().account\n//     //https://api3.loopring.io/api/v2/amm/user/rewards?owner=10917\n//     if(LoopringAPI.ammpoolAPI){\n//         return LoopringAPI.ammpoolAPI.getAmmPoolUserRewards({owner:accountId}).then(({ammUserRewardMap}:any)=>{\n//               return ammUserRewardMap  as AmmUserRewardMap\n//         })\n//     }else{\n//         return  Promise.resolve({} as AmmUserRewardMap);\n//     }\n//\n//     // return LoopringAPI.ammpoolAPI?.getUserAmmPoolTxs({accountId}, apiKey).then(({userAmmPoolTxs}) => {\n//     //     return userAmmPoolTxs\n//     // })\n//     // if(LoopringAPI.ammpoolAPI)   {\n//     //    let promiseList =  marketKeys.map((key)=>{\n//     //         // @ts-ignore\n//     //         return LoopringAPI.ammpoolAPI.getAmmPoolGameUserRank({owner:accAddr,ammPoolMarket:'key'},apiKey)\n//     //     })\n//     //     return Promise.all(promiseList).then(\n//     //         (array:any[])=>{\n//     //\n//     //           return  array.reduce((prev,item:{userRankList:GameRankInfo[]},index)=>{\n//     //                 const market = marketKeys[index]\n//     //                 prev[ market] = item.userRankList[0]\n//     //                 return item.userRankList[0]\n//     //             },{})\n//     //\n//     //         }\n//     //     )\n//     // }else{\n//     //   return  Promise.resolve({});\n//     // }\n//\n//\n//\n//\n// }\n//\n// {\n//     userRankList: GameRankInfo[];\n//     raw_data: any;\n// }\n","import { useDispatch, useSelector } from 'react-redux'\nimport { systemSlice } from './reducer';\nimport { System, SystemStatus } from './interface';\n\nexport function useSystem(): SystemStatus & {\n    updateSystem:(system:Partial<System< {[key:string]:any}>>)=>void,\n    statusUnset:()=>void,\n} {\n    const system:SystemStatus = useSelector((state: any) => state.system)\n    const dispatch = useDispatch();\n    const updateSystem = (system:Partial<System<{[key:string]:any}>>) => {\n        dispatch(systemSlice.actions.updateSystem(system))\n    }\n    const statusUnset = ()=>{\n        dispatch(systemSlice.actions.statusUnset(undefined))\n    }\n    return {\n        ...system,\n        statusUnset,\n        updateSystem,\n    }\n\n}\n","import * as fm from 'loopring-sdk';\nimport store from '../../stores';\nimport { TradeTypes,CoinMap } from '@loopring-web/component-lib/static-resource';\nimport { ammpoolAPI, LoopringAPI, userAPI } from '../../stores/apis/api';\nimport { AmmRecordRow, AmmTradeType,RawDataTradeItem } from '@loopring-web/component-lib';\nimport { AmmPoolTx, BillType, AmmTxType, UserAmmPoolTx,getBaseQuote, MarketTradeInfo, Side, UserTrade } from 'loopring-sdk';\nimport { volumeToCount, volumeToCountAsBigNumber } from './volumeToCount';\n\nexport const getUserTrades = (marketKey: any) => {\n    const userApi = userAPI();\n    const {accountId, apiKey} = store.getState().account\n    return userApi.getUserTrades({accountId}, apiKey).then((response: {\n        totalNum: any;\n        userTrades: UserTrade[];\n        raw_data: any;\n    }) => {\n        return response.userTrades\n    })\n}\nexport const makeMarketArray = (coinKey: any, marketTrades: MarketTradeInfo[]): RawDataTradeItem[] => {\n\n    let tradeArray: Array<Partial<RawDataTradeItem>> = []\n\n    marketTrades.forEach((item: MarketTradeInfo) => {\n        try {\n            const {base, quote} = getBaseQuote(item.market)\n            const {forex} = store.getState().system\n            const {currency} = store.getState().settings\n            const {tokenMap} = store.getState().tokenMap\n            if (tokenMap) {\n               // const baseToken = tokenMap[ base as string ]\n               // const quoteToken = tokenMap[ quote as string ]\n\n                // @ts-ignore\n                tradeArray.push({\n                    side: item.side === Side.Sell ? TradeTypes.Sell : TradeTypes.Buy,\n                    amount: {\n                        from: {\n                            key: base as string,\n                            value: base ? volumeToCount(base, item.volume) : undefined\n                        },\n                        to: {\n                            key: quote as string,\n                            value: base ? volumeToCountAsBigNumber(base, item.volume)?.times(item.price).toNumber():undefined\n                        },\n\n                    },\n                    price: {\n                        key: '',\n                        value: fm.toBig(item.price).toNumber(),\n                    },\n                    fee: {\n                        key: '',\n                        value: quote? volumeToCount(quote, item.fee):undefined, //fm.toBig(item.fee).div(BIG10.pow(quoteToken.decimals)).toNumber(),\n                    },\n                    time: parseInt(item.tradeTime.toString()),\n                })\n            }\n        } catch (error) {\n            //CATCHERROR:\n            console.log(error)\n            // new CustomError()\n        }\n\n    })\n    // console.log('tradeArray:', tradeArray)\n    return tradeArray as RawDataTradeItem[];\n\n}\n\nexport const getUserAmmTransaction = () => {\n    const {accountId, apiKey} = store.getState().account\n    return LoopringAPI.ammpoolAPI?.getUserAmmPoolTxs({accountId}, apiKey).then(({userAmmPoolTxs}) => {\n        return userAmmPoolTxs\n    })\n    // }\n\n}\n\n\nexport const makeMyAmmMarketArray = <C extends { [ key: string ]:any }>(coinKey: string|undefined, marketTransaction: UserAmmPoolTx[]): AmmRecordRow<C>[] => {\n\n    let tradeArray: Array<Partial<AmmRecordRow<C>>> = [];\n    let {tokenMap, coinMap, idIndex} = store.getState().tokenMap;\n    marketTransaction.forEach((item: UserAmmPoolTx) => {\n        try {\n           // const {base, quote} = getBaseQuote(coinKey)\n            const {forex} = store.getState().system\n            // const {currency} = store.getState().settings\n            if (coinMap && tokenMap && idIndex\n                && !(coinKey && tokenMap['LP-'+coinKey].tokenId !== item.lpToken.tokenId) ) {\n                // @ts-ignore\n                const [, coinA, coinB] = idIndex[item.lpToken.tokenId].match(/LP-(\\w+)-(\\w+)/i);\n                 \n                tradeArray.push({\n                        type: item.txType === AmmTxType.JOIN ? AmmTradeType.add : AmmTradeType.remove,\n                        //TODO:\n                        totalDollar: 1000,\n                        totalYuan: 1000 / Number(forex),\n                        amountA: volumeToCount(coinA,item.poolTokens[ 0 ]?.actualAmount),\n                        amountB: volumeToCount(coinA,item.poolTokens[ 1 ]?.actualAmount),\n                        time: Number(item.updatedAt),\n                        // @ts-ignore\n                        coinA: coinMap[ coinA ],\n                        // @ts-ignore\n                        coinB: coinMap[ coinB ],\n                        status: item.txStatus\n                    })\n                }\n                return tradeArray\n            }\n         catch (error) {\n            //CATCHERROR:\n            console.log(error)\n            // new CustomError()\n        }\n\n    })\n    // console.log('tradeArray:', tradeArray)\n    return tradeArray as AmmRecordRow<C>[];\n\n}\n\n\nexport const makeMarketAmmArray = <C extends object>(coinKey: any, marketTransaction: AmmPoolTx[]): AmmRecordRow<C>[] => {\n\n    let tradeArray: Array<Partial<AmmRecordRow<C>>> = [];\n\n    // marketTransaction.forEach((item: AmmPoolTx) => {\n    //     try {\n    //         const {base, quote} = getBaseQuote(coinKey)\n    //         const {forex} = store.getState().system\n    //         // const {currency} = store.getState().settings\n    //         const coinMap = store.getState().tokenMap.coinMap as CoinMap<C>\n    //         if (coinMap) {\n    //\n    //             // id: number;\n    //             // from: string;\n    //             // to: string;\n    //             // token: string;\n    //             // amount: string;\n    //             // tokenF: string;\n    //             // amountF: string;\n    //             // status: TxStatus;\n    //             // txHash: string;\n    //             // billType: BillType;\n    //             // income: boolean;\n    //             // timestamp: number;\n    //             // memo: string;\n    //             // price: string;\n    //             // transferType: TransferType;\n    //             // label: string;\n    //             tradeArray.push({\n    //                 // type: item.billType === BillType.ORDER ?\n    //                 //     AmmTradeType.swap : item.billType === BillType.TRANSFER && item.income ?\n    //                 //         AmmTradeType.add : AmmTradeType.remove,\n    //                 // // //TODO:\n    //                 // totalDollar: 1000,\n    //                 // totalYuan: 1000 / Number(forex),\n    //                 // amountA: Number(item.poolTokens[ 0 ].amount),\n    //                 // amountB: Number(item.poolTokens[ 1 ].amount),\n    //                 // time: Number(item.updatedAt),\n    //                 // coinA: coinMap[ base as keyof C],\n    //                 // coinB: coinMap[ quote as keyof C ],\n    //             })\n    //         }\n    //     } catch (error) {\n    //         //CATCHERROR:\n    //         console.log(error)\n    //         // new CustomError()\n    //     }\n    //\n    // })\n    // console.log('tradeArray:', tradeArray)\n    return tradeArray as AmmRecordRow<C>[];\n\n}\n","import { utils } from 'ethers'\n\nimport * as fm from 'loopring-sdk'\n\nimport BigNumber from 'bignumber.js'\n\nimport { CoinInfo, CoinMap, } from '@loopring-web/component-lib/static-resource'\nimport { DepthData, getBaseQuote, LoopringMap, MarketInfo, MarketStatus, TokenInfo, } from 'loopring-sdk'\nimport { BIG0, BIG1, BIG10, BIG10K, MULTI_FACTOR, } from '../defs/swap_defs'\n\nexport function getIcon(symbol: string, tokens: any) {\n    const token: any = tokens[symbol]\n    return getIconByTokenInfo(token)\n}\n\nexport function getIconByTokenInfo(token: TokenInfo) {\n    if (token) {\n        const addr = utils.getAddress(token.address)\n        const path = `https://exchange.loopring.io/assets/images/ethereum/assets/${addr}/logo.png`\n        return path\n    }\n    return ''\n}\n\nexport function makeCoinInfo(token: TokenInfo) {\n    if (token) {\n        const info: CoinInfo<any> = {\n            icon: getIconByTokenInfo(token),\n            name: token.symbol,\n            simpleName: token.symbol,\n            description: token.name,\n            company: token.name,\n        }\n        return info\n    }\n    return undefined\n}\n\nexport const getLeft = (pairs: any, tokens: any) => {\n    if (pairs) {\n\n        const left = Reflect.ownKeys(pairs)\n\n        let coinMapLeft: CoinMap<any, CoinInfo<any>> = {}\n\n        left.forEach((key: any) => {\n            coinMapLeft[key] = {\n                icon: getIcon(key, tokens),\n                name: key,\n                simpleName: key,\n                description: '',\n                company: ''\n            }\n        })\n\n        return {\n            left,\n            coinMapLeft,\n        }\n    }\n\n    return undefined\n}\n\nexport const getRight = (pairs: any, left: any, tokens: any) => {\n    if (pairs) {\n        const right = pairs[left].tokenList\n\n        let coinMapRight: CoinMap<any, CoinInfo<any>> = {}\n\n        if (right) {\n            right.forEach((key: any) => {\n                coinMapRight[key] = {\n                    icon: getIcon(key, tokens),\n                    name: key,\n                    simpleName: key,\n                    description: '',\n                    company: ''\n                }\n            })\n\n            return {\n                right,\n                coinMapRight,\n            }\n        }\n    }\n    return undefined\n}\n\nexport const getToken = (tokens: any, token: any) => {\n    if (!tokens) {\n        throw Error('no tokens list!')\n    }\n    return tokens[token]\n}\n\nexport const getTokenInfoByToken = (ammBalance: any, tokens: any, token: any) => {\n\n    const tokenInfo = getToken(tokens, token)\n\n    const tokenVol = ammBalance.pooledMap[tokenInfo.tokenId].volume\n    const reserve = fm.toBig(tokenVol)\n\n    return {\n        tokenInfo, tokenVol, reserve,\n    }\n}\n\nconst getKey = (base: any, quote: any) => {\n\n    if (!base || !quote) {\n        return {\n            key: undefined,\n            key_bak: undefined,\n            isOK: false,\n        }\n    }\n\n    const isLRCETH = false\n    const key = isLRCETH ? 'LRCETH-Pool' : ('AMM-' + base + '-' + quote)\n    const key_bak = isLRCETH ? 'LRCETH-Pool' : ('AMM-' + quote + '-' + base)\n    return {\n        key,\n        key_bak,\n        isOK: true,\n    }\n}\n\nconst getInfoByKey = (raw_data: any, keyPair: any) => {\n    const {\n        key,\n        key_bak,\n    } = keyPair\n\n    if (raw_data[key]) return raw_data[key]\n    return raw_data[key_bak]\n}\n\nexport const getBalances = (ammpools: any, ammPoolsBalances: any, base: any, quote: any, tokens: any) => {\n\n    const { ammInfo,\n        ammBalance,\n    } = getAmmInfo(ammpools, ammPoolsBalances, base, quote)\n\n    const baseToken = getToken(tokens, base)\n    const quoteToken = getToken(tokens, quote)\n\n    const baseBalance = ammBalance.pooledMap[baseToken.tokenId]\n    const quoteBalance = ammBalance.pooledMap[quoteToken.tokenId]\n\n    return {\n        ammInfo,\n        ammBalance,\n        baseBalance,\n        quoteBalance,\n    }\n\n}\n\nexport const getAmmInfoOnly = (ammpools: any, base: any, quote: any) => {\n\n    const keyPair = getKey(base, quote)\n\n    const ammInfo = getInfoByKey(ammpools, keyPair)\n\n    if (!ammInfo) {\n        throw Error('no ammInfo!')\n    }\n\n    return {\n        ammInfo,\n    }\n\n}\n\nexport const getAmmInfo = (ammpools: any, ammPoolsBalances: any, base: any, quote: any) => {\n\n    const keyPair = getKey(base, quote)\n\n    const ammInfo = getInfoByKey(ammpools, keyPair)\n    const ammBalance = getInfoByKey(ammPoolsBalances, keyPair)\n\n    if (!ammInfo || !ammBalance) {\n        throw Error('no ammInfo! no ammBalance!')\n    }\n\n    const feeBips = parseInt(ammInfo.feeBips)\n\n    return {\n        ammInfo,\n        ammBalance,\n        feeBips,\n    }\n\n}\n\nconst getAmt = (rawAmt: any, tokenInfo: any) => {\n    if (rawAmt === undefined) {\n        rawAmt = 0\n    }\n\n    return fm.toBig(rawAmt).times('1e' + tokenInfo.decimals)\n}\n\nexport const applySlippageTolerance = (\n    tokens: any,\n    token: any,\n    value: any,\n    slippageTolerance: number = 0.01\n) => {\n    const tokenInfo = getToken(tokens, token)\n    const f = 1e7\n    const feeFactor = fm.toBig(f * (1 - slippageTolerance))\n    const amount = fm.toBig(value).times('1e' + tokenInfo.decimals)\n    const outInWei = amount.times(feeFactor).dividedBy(f)\n    const out = fromWEI(tokens, token, outInWei)\n\n    return {\n        outInWei,\n        out,\n    }\n}\n\nexport const applyOrderFee = (tokens: any, token: any, value: any, feeBip: any) => {\n    const tokenInfo = getToken(tokens, token)\n    const feeFactor = fm.toBig(MULTI_FACTOR - feeBip)\n    const amount = fm.toBig(value).times('1e' + tokenInfo.decimals)\n    const appliedAmount = amount.times(feeFactor).dividedBy(MULTI_FACTOR)\n    return appliedAmount\n}\n\nexport function fromWEI(tokens: any, symbol: any, valueInWEI: any, precision?: any, ceil?: any) {\n    try {\n        const tokenInfo = getToken(tokens, symbol)\n        const precisionToFixed = precision ? precision : tokenInfo.precision\n        const value = fm.toBig(valueInWEI).div('1e' + tokenInfo.decimals)\n        return fm.toFixed(value, precisionToFixed, ceil)\n    } catch (error) {\n    }\n    return '0'\n}\n\n\nexport function toWEI(tokens: any, symbol: any, value: any, rm: any = 3) {\n    const tokenInfo = getToken(tokens, symbol)\n    if (typeof tokenInfo === 'undefined') {\n        return '0'\n    }\n\n    return fm.toBig(value)\n        .times('1e' + tokenInfo.decimals)\n        .toFixed(0, rm)\n}\n\nexport const getAmountOut = (amt: any, ammpools: any, ammPoolsBalances: any, tokens: any,\n    base: any, quote: any, takerRate: number, currentPrice: number) => {\n\n    if (amt === undefined) {\n        amt = 0\n    }\n\n    const { ammBalance, feeBips, } = getAmmInfo(ammpools, ammPoolsBalances, base, quote)\n\n    const { tokenInfo: baseTokenInfo, reserve: reserveIn } = getTokenInfoByToken(ammBalance, tokens, base)\n    const { tokenInfo: quoteTokenInfo, reserve: reserveOut } = getTokenInfoByToken(ammBalance, tokens, quote)\n\n    const amountIn = getAmt(amt, baseTokenInfo)\n    const feeBipsFactor = fm.toBig(MULTI_FACTOR - feeBips)\n    const amountInWithFee = amountIn.times(feeBipsFactor)\n    const numerator = amountInWithFee.times(reserveOut)\n    const denominator = reserveIn.times(MULTI_FACTOR).plus(amountInWithFee)\n    const amountOutInWei: any = numerator.dividedBy(denominator)\n\n    let quoteAmt: any = fromWEI(tokens, quote, amountOutInWei)\n\n    const _amount1ApplyOrderFeeInWei = applyOrderFee(tokens, quote, quoteAmt, takerRate + feeBips)\n\n    let _amount1ApplyOrderFee = Number(fromWEI(tokens, quote, _amount1ApplyOrderFeeInWei))\n\n    let priceImpact = 0\n    if (_amount1ApplyOrderFee < 0) {\n        _amount1ApplyOrderFee = 0\n        quoteAmt = null\n    } else {\n        const newPrice = Number(quoteAmt) / Number(amt)\n        priceImpact = (newPrice - currentPrice) / currentPrice\n    }\n\n    return {\n        quoteAmt,\n        _amount1ApplyOrderFeeInWei,\n        _amount1ApplyOrderFee,\n        priceImpact,\n    }\n\n}\n\nexport const getAmountOut_Reverse = (amt: any, ammpools: any, ammPoolsBalances: any, tokens: any,\n    base: any, quote: any, takerRate: number, currentPrice: number) => {\n\n    if (amt === undefined) {\n        amt = 0\n    }\n    \n    const { ammBalance, feeBips, } = getAmmInfo(ammpools, ammPoolsBalances, base, quote)\n\n    const { tokenInfo: baseTokenInfo, reserve: reserveIn } = getTokenInfoByToken(ammBalance, tokens, base)\n    const { tokenInfo: quoteTokenInfo, reserve: reserveOut } = getTokenInfoByToken(ammBalance, tokens, quote)\n\n    const amountOut = getAmt(amt, quoteTokenInfo)\n\n    if (amountOut.gt(reserveOut)) {\n        return {\n            baseAmt: 0,\n            _amount1ApplyOrderFeeInWei: 0,\n            _amount1ApplyOrderFee: 0,\n            priceImpact: 0,\n            hasError: false,\n        }\n    }\n\n    const numerator = amountOut.times(reserveIn).times(MULTI_FACTOR)\n    const feeBipsFactor = fm.toBig(MULTI_FACTOR - feeBips)\n\n    // If amountOut is larger than reserveOut?\n    // It's handled before getAmountOut_reserve\n    const reserveOutSubAmountOut = reserveOut.minus(amountOut)\n\n    const denominator = feeBipsFactor.times(reserveOutSubAmountOut)\n    const amountInInWei = numerator.dividedBy(denominator)\n\n    let baseAmt: any = fromWEI(tokens, quote, amountInInWei)\n\n    const _amount1ApplyOrderFeeInWei = applyOrderFee(tokens, quote, amt, takerRate + feeBips)\n\n    let _amount1ApplyOrderFee = Number(fromWEI(tokens, quote, _amount1ApplyOrderFeeInWei))\n\n    let priceImpact = 0\n    if (_amount1ApplyOrderFee < 0) {\n        _amount1ApplyOrderFee = 0\n        baseAmt = null\n    } else {\n        const newPrice = Number(amt) / Number(baseAmt)\n        priceImpact = (newPrice - currentPrice) / currentPrice\n    }\n\n    return {\n        baseAmt,\n        _amount1ApplyOrderFeeInWei,\n        _amount1ApplyOrderFee,\n        priceImpact,\n        hasError: false,\n    }\n\n}\n\nexport function isEmpty(input: any) {\n    if (!input || input.trim() === '') {\n        return true\n    }\n\n    return false\n}\n\nfunction getAmountOutWithFeeBips(amountIn: string, feeBips: string, reserveIn: string, reserveOut: string ) {\n    const amountInBig = fm.toBig(amountIn)\n    const reserveInBig = fm.toBig(reserveIn)\n    const reserveOutBig = fm.toBig(reserveOut)\n    \n    if (amountInBig.lt(BIG0) || reserveInBig.lt(BIG0) || reserveOutBig.lt(BIG0)) {\n        return BIG0\n    }\n    const feeBipsBig = fm.toBig(feeBips)\n\n    const amountInWithFee = amountInBig.times(BIG10K.minus(feeBipsBig))\n    const numerator = amountInWithFee.times(reserveOutBig)\n    const denominator = reserveInBig.times(BIG10K).plus(amountInWithFee)\n\n    return numerator.div(denominator)\n}\n\nfunction getAmountInWithFeeBips(amountOut: string, feeBips: string, reserveIn: string, reserveOut: string ) {\n    const amountOutBig = fm.toBig(amountOut)\n    const reserveInBig = fm.toBig(reserveIn)\n    const reserveOutBig = fm.toBig(reserveOut)\n    \n    if (amountOutBig.lt(BIG0) || reserveInBig.lt(BIG0) || reserveOutBig.lt(BIG0)) {\n        return BIG0\n    }\n    const feeBipsBig = fm.toBig(feeBips)\n\n    const numerator = reserveInBig.times(amountOutBig).times(BIG10K)\n    const denominator = reserveOutBig.times(amountOutBig).times(BIG10K.minus(feeBipsBig))\n\n    return numerator.div(denominator).plus(BIG1)\n}\n\nfunction getOutputOrderbook(input: string, feeBips: string, isAtoB: boolean) {\n    let output: string  = \"0\"\n    let remain: string  = input\n}\n\nexport function getOutputAmount(base: string, quote: string, market: string, \n    input: string, isAtoB: boolean, feeBips: string, \n    tokenMap: LoopringMap<TokenInfo>, marketMap: LoopringMap<MarketInfo>, depth: DepthData) {\n\n    if (isEmpty(input) || isEmpty(feeBips) || !(market in Object.keys(marketMap))) {\n        return undefined\n    }\n\n    const { base: baseRaw, quote: quoteRaw } = getBaseQuote(market)\n\n    const marketInfo: MarketInfo = marketMap[market]\n\n    const isSwapEnabled = marketInfo.status === MarketStatus.ALL || marketInfo.status === MarketStatus.AMM\n\n    input = input.trim()\n\n    let exceedDepth = false\n\n    const reserveIn = ''\n    const reserveOut = ''\n\n    if (isAtoB) {\n\n        // bids_amtTotal -> bidsSizeShown\n        // asks_volTotal -> asksQuoteSizeShown\n        const amountInWei = toWEI(tokenMap, base, input)\n\n        if (isEmpty(depth.bids_amtTotal) || isEmpty(depth.asks_volTotal)) {\n            exceedDepth = true\n        } else {\n\n            if (base === baseRaw) {\n                exceedDepth = fm.toBig(amountInWei).lt(fm.toBig(depth.bids_amtTotal))\n            } else {\n                exceedDepth = fm.toBig(amountInWei).lt(fm.toBig(depth.asks_volTotal))\n            }\n\n        }\n\n        let amountB = new BigNumber(0)\n\n        if (exceedDepth) {\n            if (isSwapEnabled) {\n                amountB = getAmountOutWithFeeBips(amountInWei, feeBips, reserveIn, reserveOut)\n            }\n        } else {\n            amountB = fm.toBig(toWEI(tokenMap, base, getOutputOrderbook(input, feeBips, isAtoB)))\n        }\n\n        return fromWEI(tokenMap, quote, amountB)\n\n    } else {\n\n        // asks_amtTotal -> asksSizeShown\n        // bids_volTotal -> bidsQuoteSizeShown\n\n        if (isEmpty(depth.bids_volTotal) || isEmpty(depth.asks_amtTotal)) {\n            exceedDepth = true\n        } else {\n            const amountInWei = toWEI(tokenMap, quote, input)\n\n            if (base === baseRaw) {\n                exceedDepth = fm.toBig(amountInWei).gt(fm.toBig(depth.bids_volTotal))\n            } else {\n                exceedDepth = fm.toBig(amountInWei).gt(fm.toBig(depth.asks_amtTotal))\n            }\n\n        }\n\n        let amountSBint = BIG0\n\n        const amountB: string = toWEI(tokenMap, quote, input)\n\n        if (exceedDepth) {\n            if (isSwapEnabled) {\n                amountSBint = getAmountInWithFeeBips(amountB, feeBips, reserveIn, reserveOut)\n            }\n        } else {\n            amountSBint = fm.toBig(toWEI(tokenMap, base, getOutputOrderbook(input, feeBips, isAtoB)))\n        }\n\n        if (amountSBint.gt(BIG0)) {\n            return fromWEI(tokenMap, base, amountSBint)\n        }\n\n        return '0'\n\n    }\n\n}\n","import { useDispatch, useSelector } from 'react-redux'\nimport { tickerMapSlice } from './reducer';\nimport { TickerStates } from './interface';\nimport { CoinKey } from '@loopring-web/component-lib/src/static-resource';\n\nexport function useTicker(): TickerStates & {\n    updateTickers:(tickerKeys:Array<CoinKey<any>>)=>void,\n    updateTicker:(tickerKey:CoinKey<any>)=>void,\n    statusUnset:()=>void,\n} {\n    const tickerMap:TickerStates = useSelector((state: any) => state.tickerMap)\n    const dispatch = useDispatch();\n    const updateTicker = (tickerKey:CoinKey<any>) => {\n        dispatch(tickerMapSlice.actions.getTicker({tickerKey}))\n    }\n    const updateTickers = (tickerKeys:Array<CoinKey<any>>) => {\n        dispatch(tickerMapSlice.actions.getTickers({tickerKeys}))\n    }\n    const statusUnset = ()=>{\n        dispatch(tickerMapSlice.actions.statusUnset(undefined))\n    }\n    return {\n        ...tickerMap,\n        statusUnset,\n        updateTickers,\n        updateTicker,\n    }\n\n}\n","import { useDispatch, useSelector } from 'react-redux'\nimport { AmmActivityMapStates } from './interface';\nimport { ammActivityMapSlice } from './reducer';\n\nexport function useAmmActivityMap(): AmmActivityMapStates & {\n    updateAmmActivityMap:()=> void,\n    statusUnset:()=> void,\n} {\n    const ammActivityMap:AmmActivityMapStates = useSelector((state: any) => state.amm.ammActivityMap)\n    const dispatch = useDispatch();\n    const updateAmmActivityMap = () => {\n        dispatch(ammActivityMapSlice.actions.getAmmActivityMap(undefined))\n    }\n    const statusUnset = ()=>{\n        dispatch(ammActivityMapSlice.actions.statusUnset(undefined))\n    }\n    return {\n        ...ammActivityMap,\n        statusUnset,\n        updateAmmActivityMap\n    }\n\n}\n","import { useDispatch, useSelector } from 'react-redux'\nimport { StateBase } from '../interface';\nimport { socketSlice } from './reducer';\n\nexport function useSocket(): StateBase & {\n    // socketStart:()=>void,\n    statusUnset:()=>void,\n    sendNewMessage:(socket: { [ key: string]:string[] })=>void,\n    socketEnd:()=>void\n}\n{\n    const socket:StateBase & {socket: { [ key: string]:string[] }} = useSelector((state: any) => state.socket)\n    const dispatch = useDispatch();\n    // const socketStart = () => {\n    //     dispatch(socketSlice.actions.socketStart(undefined))\n    // }\n    const sendNewMessage = (socket: { [ key: string]:string[] }) => {\n        dispatch(socketSlice.actions.sendNewMessage(socket))\n    }\n    const socketEnd = () => {\n        dispatch(socketSlice.actions.socketEnd(undefined))\n    }\n    const statusUnset = ()=>{\n        dispatch(socketSlice.actions.statusUnset(undefined))\n    }\n    return {\n        ...socket,\n        statusUnset,\n        // socketStart,\n        sendNewMessage,\n        socketEnd,\n    }\n\n}\n","export enum AccountStatus {\n    UNKNOWN = 'UNKNOWN',\n    UNCONNNECTED = 'UNCONNNECTED',\n    CONNECTED = 'CONNECTED',\n    NOACCOUNT = 'NOACCOUNT',\n    DEPOSITING = 'DEPOSITING',\n    DEPOSIT_TO_CONFIREM = 'DEPOSIT_TO_CONFIREM',\n    UNACTIVATED = 'UNACTIVATED',\n    ARPROVING = 'ARPROVING',\n    APPROV_TO_CONFIRM = 'APPROV_TO_CONFIRM',\n    LOCKED = 'LOCKED',\n    ACTIVATED = 'ACTIVATED',\n}\n\nexport enum StatusChangeEvent {\n    Reset = 'Reset',\n    Connecting = 'Connecting',\n    HasPubkey = 'HasPubkey',\n    HasNoPubkey = 'HasNoPubkey',\n    ErrorResponse = 'ErrorResponse',\n    FinishDeposit = 'FinishDeposit',\n    DepositConfirmed = 'DepositConfirmed',\n    IsSmartWallet = 'IsSmartWallet',\n    ApproveSubmit = 'ApproveSubmit',\n    ApproveConfirmed = 'ApproveConfirmed',\n    Unlock = 'Unlock',\n    Lock = 'Lock',\n}\n\nexport const AccountMachineSpec = (initialState: AccountStatus = AccountStatus.UNCONNNECTED) => \n{\n    return {\n        initialState: initialState,\n        states: {\n            UNCONNNECTED: {\n                Connecting: AccountStatus.CONNECTED,\n                Reset: AccountStatus.UNCONNNECTED,\n            },\n            CONNECTED: {\n                HasPubkey: AccountStatus.LOCKED,\n                HasNoPubkey: AccountStatus.UNACTIVATED,\n                ErrorResponse: AccountStatus.NOACCOUNT,\n                Reset: AccountStatus.UNCONNNECTED,\n            },\n            NOACCOUNT: {\n                ErrorResponse: AccountStatus.NOACCOUNT,\n                Reset: AccountStatus.UNCONNNECTED,\n            },\n            DEPOSITING: {\n                FinishDeposit: AccountStatus.DEPOSIT_TO_CONFIREM,\n                Reset: AccountStatus.UNCONNNECTED,\n            },\n            DEPOSIT_TO_CONFIREM: {\n                HasPubkey: AccountStatus.ACTIVATED,\n                HasNoPubkey: AccountStatus.DEPOSIT_TO_CONFIREM,\n                ErrorResponse: AccountStatus.DEPOSIT_TO_CONFIREM,\n                Reset: AccountStatus.UNCONNNECTED,\n            },\n            UNACTIVATED: {\n                IsSmartWallet: AccountStatus.ARPROVING,\n                Reset: AccountStatus.UNCONNNECTED,\n            },\n            ARPROVING: {\n                ApproveSubmit: AccountStatus.APPROV_TO_CONFIRM,\n                Reset: AccountStatus.UNCONNNECTED,\n            },\n            APPROV_TO_CONFIRM: {\n                ApproveConfirmed: AccountStatus.ACTIVATED,\n                Reset: AccountStatus.UNCONNNECTED,\n            },\n            LOCKED: {\n                Unlock: AccountStatus.ACTIVATED,\n                Reset: AccountStatus.UNCONNNECTED,\n            },\n            ACTIVATED: {\n                Lock: AccountStatus.LOCKED,\n                Reset: AccountStatus.UNCONNNECTED,\n            },\n        },\n    }\n}\n","import { AmmPanelType } from '@loopring-web/component-lib';\nimport { AmmDetailBase } from '@loopring-web/component-lib/src/static-resource';\nimport {  volumeToCountAsBigNumber } from './volumeToCount';\n\nexport const ammPairInit = ({pair, _ammCalcData,ammType,tokenMap, coinMap, walletMap,ammMap ,tickerData,ammPoolsBalance}:any)=>{\n    _ammCalcData.coinInfoMap = coinMap;\n    if(tickerData){\n        \n        _ammCalcData.AtoB =  Number(tickerData.close)\n    }\n    if(isNaN(_ammCalcData.AtoB) && ammPoolsBalance){\n        const baseVol = volumeToCountAsBigNumber(pair.coinAInfo.simpleName,ammPoolsBalance.pooled[0].volume);\n        const quoteVol = volumeToCountAsBigNumber(pair.coinBInfo.simpleName,ammPoolsBalance.pooled[1].volume);\n        _ammCalcData.AtoB = quoteVol && baseVol && quoteVol.div(baseVol).toNumber();\n\n    }\n    if(pair.coinAInfo){\n        if(ammType === AmmPanelType.Deposit ) {\n            _ammCalcData.myCoinA = {\n                belong: pair.coinAInfo.simpleName,\n                balance: walletMap ? walletMap[ pair.coinAInfo.simpleName ]?.count : 0,\n            }\n            _ammCalcData.myCoinB = {\n                belong: pair.coinBInfo.simpleName,\n                balance: walletMap ? walletMap[ pair.coinBInfo.simpleName ]?.count : 0,\n            }\n        }else {\n            const key = `${pair.coinAInfo.simpleName}-${pair.coinBInfo.simpleName}`;\n            let coinACount = 0,coinBCount = 0 ;\n            if(walletMap){\n                const  balance =  walletMap ? walletMap[ 'LP-' + key ]?.count : 0;\n                const {totalLPToken,totalA,totalB}:AmmDetailBase<any> = ammMap[ 'AMM-' + key ];\n                if(totalA && totalLPToken &&totalB) {\n                    coinACount = totalA / totalLPToken * balance;\n                    coinBCount = totalB / totalLPToken * balance;\n                }\n            }\n            _ammCalcData.myCoinA = {\n                belong: pair.coinAInfo.simpleName,\n                balance: coinACount,\n            }\n            _ammCalcData.myCoinB = {\n                belong: pair.coinBInfo.simpleName,\n                balance: coinBCount,\n            }\n        }\n    }\n\n\n    return  _ammCalcData\n}\n","export function coinPairInit({coinKey, _tradeCalcData, tokenMap, coinMap}: any) {\n    if (coinKey) {\n        const [_match, sell, buy] = coinKey.match(/(\\w+)-(\\w+)/i);\n        // @ts-ignore\n        if (sell && coinMap && coinMap[ sell ]) {\n            _tradeCalcData.coinSell = sell;\n        }// @ts-ignore\n        if (sell!==buy && buy && -1 !== tokenMap[ sell ].tradePairs.findIndex(ele => ele === buy)) {\n            _tradeCalcData.coinBuy = buy;\n            return _tradeCalcData\n        }\n        // else{\n        //     _tradeCalcData.coinBuy = tokenMap[ sell ].tradePairs[ 0 ];\n        // }\n    }\n    if (!_tradeCalcData.coinSell || _tradeCalcData.coinSell === '') {\n        _tradeCalcData.coinSell = 'LRC';\n        _tradeCalcData.coinBuy = 'ETH';\n        return _tradeCalcData\n    }\n    if (!_tradeCalcData.coinBuy || _tradeCalcData.coinBuy === '' || _tradeCalcData.coinBuy === 'undefined') {\n        // @ts-ignore\n        if (tokenMap && tokenMap[ _tradeCalcData.coinSell ].tradePairs) {\n            _tradeCalcData.coinBuy = tokenMap[ _tradeCalcData.coinSell ].tradePairs[ 0 ]\n        } else {\n            _tradeCalcData.coinSell = 'LRC';\n            _tradeCalcData.coinBuy = 'ETH';\n        }\n    }\n    return _tradeCalcData\n}","import store from '../../stores';\nimport { AccountStatus } from '../../state_machine/account_machine_spec';\nimport { setShowAccountInfo, setShowConnect, setShowDeposit } from '@loopring-web/component-lib';\nimport React from 'react';\n\nexport enum fnType {\n    UNKNOWN,\n    UNCONNNECTED,\n    CONNECTED,\n    NOACCOUNT,\n    DEPOSITING,\n    DEPOSIT_TO_CONFIREM,\n    UNACTIVATED,\n    ARPROVING,\n    APPROV_TO_CONFIRM,\n    LOCKED,\n    ACTIVATED,\n    DEFAULT\n}\nexport const accountStaticCallBack = (props: { [key: number ]:[ fn: (props: any) => any, args?: object] }) => {\n    const {status} = store.getState().account\n    let fn, args;\n    switch (status) {\n        case AccountStatus.UNKNOWN:\n            [fn, args] = props[ fnType.UNKNOWN ]?props[ fnType.UNKNOWN ]:[];\n            if (typeof fn === 'function') {\n                return fn.call(this, args);\n            }\n            return\n        case AccountStatus.UNCONNNECTED:\n            [fn, args] = props[ fnType.UNCONNNECTED ]?props[ fnType.UNCONNNECTED ]:[];\n            if (typeof fn === 'function') {\n                return fn.call(this, args);\n            }\n            break;\n        case AccountStatus.CONNECTED:\n            [fn, args] = props[ fnType.CONNECTED ]?props[ fnType.CONNECTED ]:[];\n            if (typeof fn === 'function') {\n                return fn.call(this, args);\n            }\n            break;\n        case AccountStatus.NOACCOUNT:\n            [fn, args] = props[ fnType.NOACCOUNT ]?props[ fnType.NOACCOUNT ]:[];\n            if (typeof fn === 'function') {\n                return fn.call(this, args);\n            }\n            break;\n        case AccountStatus.DEPOSITING:\n            [fn, args] = props[ fnType.DEPOSITING ]?props[ fnType.DEPOSITING ]:[];\n            if (typeof fn === 'function') {\n                return fn.call(this, args);\n            }\n            break;\n        case AccountStatus.DEPOSIT_TO_CONFIREM:\n            [fn, args] = props[ fnType.DEPOSIT_TO_CONFIREM ]?props[ fnType.DEPOSIT_TO_CONFIREM ]:[];\n            if (typeof fn === 'function') {\n                return fn.call(this, args);\n            }\n            break;\n        case AccountStatus.UNACTIVATED:\n            [fn, args] = props[ fnType.UNACTIVATED ]?props[ fnType.UNACTIVATED ]:[];\n            if (typeof fn === 'function') {\n                return fn.call(this, args);\n            }\n            break;\n        case AccountStatus.ARPROVING:\n            [fn, args] = props[ fnType.ARPROVING ]?props[ fnType.ARPROVING ]:[];\n            if (typeof fn === 'function') {\n                return fn.call(this, args);\n            }\n            break;\n        case AccountStatus.APPROV_TO_CONFIRM:\n            [fn, args] = props[ fnType.APPROV_TO_CONFIRM ]?props[ fnType.APPROV_TO_CONFIRM ]:[];\n            if (typeof fn === 'function') {\n                return fn.call(this, args);\n            }\n            break;\n        case AccountStatus.LOCKED:\n            [fn, args] = props[ fnType.LOCKED ]?props[ fnType.LOCKED ]:[];\n            if (typeof fn === 'function') {\n                return fn.call(this, args);\n            }\n            break;\n        case AccountStatus.ACTIVATED:\n            [fn, args] = props[ fnType.ACTIVATED ]?props[ fnType.ACTIVATED ]:[];\n            if (typeof fn === 'function') {\n                return fn.call(this, args);\n            }\n            break;\n        default:\n            break;\n\n    }\n    [fn, args] = props[ fnType.DEFAULT ]?props[ fnType.DEFAULT ]:[];\n    if (typeof fn === 'function') {\n        return fn.call(this, args);\n    }\n}\n\n\nexport const bntLabel: { [ key: number ]: [fn: (props: any) => any, args?: object] } = {\n    [ fnType.UNCONNNECTED ]: [\n        function () {\n            return `labelConnectWallet`\n        }\n    ]\n    , [ fnType.DEFAULT ]: [\n        function () {\n            return `depositTitleAndActive`\n        }\n    ]\n    , [ fnType.ACTIVATED ]: [\n        function () {\n            return undefined\n        }\n    ]\n    , [ fnType.LOCKED ]: [\n        function () {\n            return `labelUnLock`\n        }\n    ]\n};\n\n\nexport const btnClickArray: { [ key: number ]: [fn: (props: any) => any, args?: object] } = {\n    [ fnType.UNCONNNECTED ]: [\n        function () {\n            // setShowConnect({isShow: true})\n            store.dispatch(setShowConnect({isShow: true}))\n        }\n    ]\n    , [ fnType.DEFAULT ]: [\n        function () {\n            store.dispatch(setShowDeposit({isShow: true}))\n            // ShowDeposit(true)\n        }\n    ]\n\n    , [ fnType.LOCKED ]: [\n        function () {\n            store.dispatch(setShowAccountInfo({isShow: true}))\n        }\n    ]\n};\n\n\n","import store from '../../stores';\nimport { setSlippage } from '@loopring-web/component-lib';\n\ntype Cache = {\n    customSlippage?:number\n}\nexport  const makeCache  = (__cache__:Cache)=>{\n   if(typeof  __cache__.customSlippage !== undefined){\n       store.dispatch(setSlippage(__cache__.customSlippage as number))\n      // store.getState().settings\n   }\n}","import { AmmDetailStore } from '../../stores/Amm/AmmMap';\nimport { AmmPoolSnapshot } from 'loopring-sdk';\nimport { makeMyAmmWithSnapshot, makeMyAmmWithStat } from './makeUIAmmActivityMap';\nimport { AmmUserRewardMap } from 'loopring-sdk/dist/defs/loopring_defs';\nimport { WalletMapExtend } from './makeWallet';\n\nexport const makeMyPoolRowWithSnapShot = <T extends { [ key: string ]: any }>({market,ammSnapShot,walletMap,ammUserRewardMap}: {\n    market:string\n    ammSnapShot: AmmPoolSnapshot,\n    walletMap: WalletMapExtend<T>\n    ammUserRewardMap:AmmUserRewardMap|undefined\n}) => {\n\n    return makeMyAmmWithSnapshot(market,walletMap, ammUserRewardMap, {\n        ammPoolsBalance: ammSnapShot\n    })\n}\n\n                                                                        \nexport const makeMyPoolRowWithPoolState = <T extends { [ key: string ]: any }>({market,ammDetail,walletMap,ammUserRewardMap}: {\n    market:string\n    ammDetail: AmmDetailStore<T>,\n    walletMap: WalletMapExtend<T>\n    ammUserRewardMap:AmmUserRewardMap|undefined\n}) => {\n    if(walletMap && ammDetail){\n        return makeMyAmmWithStat (market,walletMap, ammUserRewardMap, ammDetail)\n    }\n    return undefined\n}","import { TickerData } from 'loopring-sdk';\nimport store from '../../stores';\nimport { FloatTag,TradeFloat } from '@loopring-web/component-lib/src/static-resource';\n\nexport const makeTickView = (tick: TickerData) => {\n    // const {forex} = store.getState().system;\n\n    const price = !isNaN(tick.close) ? tick.close : 0\n\n    const floatTag = (isNaN(tick.close) || isNaN(tick.open))  || tick.open === tick.close ? FloatTag.none : \n        tick.close > tick.open ? FloatTag.increase : FloatTag.decrease\n\n    let _tradeFloat: Partial<TradeFloat> = {\n        change: (tick.close - tick.open) / tick.open,\n        timeUnit: '24h',\n        priceYuan: price,\n        priceDollar: price,\n        floatTag,\n        reward: 0,\n        // APY: 0,\n    }\n\n    return _tradeFloat;\n}\n","import { AmmMap } from '../../stores/Amm/AmmMap';\nimport { AmmPoolSnapshot, getBaseQuote, LoopringMap, TickerData, TokenInfo, TokenVolumeV3 } from 'loopring-sdk';\nimport { LoopringAPI } from '../../stores/apis/api';\nimport * as fm from 'loopring-sdk';\nimport { BIG10 } from '../../defs/swap_defs';\nimport { getToken } from 'utils/swap_calc_utils';\nimport { CoinMap, CustomError, ErrorMap } from '@loopring-web/component-lib/src/static-resource';\nimport { volumeToCountAsBigNumber } from './volumeToCount';\n\nexport const pairDetailBlock = <C extends { [ key: string ]: any }, I extends { [ key: string ]: any }>({\n                                                                                                           coinKey,\n                                                                                                           ammKey,\n                                                                                                           ammMap\n                                                                                                       }: { coinKey: string, ammKey: string, ammMap: AmmMap<C, I> }):\n    Promise<{\n        ammPoolsBalance: AmmPoolSnapshot,\n        tickMap:  LoopringMap<TickerData>\n}> => {\n    // const exchangeApi = exchangeAPI();\n    // const ammpoolApi = ammpoolAPI();\n    return new Promise((resolve, reject) => {\n        if(LoopringAPI.ammpoolAPI && LoopringAPI.exchangeAPI ) {\n            Promise.all([\n                LoopringAPI.ammpoolAPI.getAmmPoolSnapshot({poolAddress: ammMap[ ammKey ].address}),\n                LoopringAPI.exchangeAPI.getMixTicker({market: coinKey})])\n                // exchangeApi.getMarketTrades({market:coinKey})])\n                //{raw_data},\n                .then(([{ammPoolSnapshot}, {tickMap}]) => {\n                    resolve({\n                        ammPoolsBalance: ammPoolSnapshot,\n                        tickMap,\n                    })\n                })\n\n        }else{\n            reject(new CustomError(ErrorMap.NO_SDK))\n        }\n       \n    })\n}\n\nexport const pairDetailDone = <C>({coinKey, market,ammPoolsBalance, tokenMap,tickerData, _tradeCalcData, coinMap, marketCoins}:any)=>{\n\n    const [, coinSell, coinbuy] = coinKey.match(/(\\w+)-(\\w+)/i)\n    let stob:number|undefined;\n    if (tickerData.base === coinSell) {\n        // const ticker: TickerData = tickMap[market]\n        stob = Number(tickerData.close)\n\n    } else{\n        // const ticker: TickerData = tickMap[market]\n        stob = Number(tickerData.close)!==0? 1/Number(tickerData.close): 0\n    }\n    if(isNaN(stob) && ammPoolsBalance){\n        const {base, quote} = getBaseQuote(coinKey)\n\n        // const baseToken: TokenInfo = getToken(tokenMap, base)\n        // const quoteToken: TokenInfo = getToken(tokenMap, quote)\n        // const baseVol = (fm.toBig(poolBaseTokenVol.volume).div(BIG10.pow(baseToken.decimals)))\n        // const quoteVol = (fm.toBig(quoteBaseTokenVol.volume).div(BIG10.pow(quoteToken.decimals)))\n        //\n        // stob = volumeToCountAsBigNumber(base,poolBaseTokenVol.volume)?.div(\n        //     volumeToCountAsBigNumber(quote,quoteBaseTokenVol.volume) || 1\n        // ) .toNumber()\n        // console.log('1', base, poolBaseTokenVol, quote, quoteBaseTokenVol)\n        //baseToken.tokenId === quoteBaseTokenVol.tokenId && quoteToken.tokenId === poolBaseTokenVol.tokenId) {\n        // const quoteVol = (fm.toBig(quoteBaseTokenVol.volume).div(BIG10.pow(baseToken.decimals)))\n        // const baseVol = (fm.toBig(poolBaseTokenVol.volume).div(BIG10.pow(quoteToken.decimals)))\n        //baseVol.div(quoteVol).toNumber()\n        // console.log('2', base, poolBaseTokenVol, quote, quoteBaseTokenVol)\n        //ErrorMap.NOTS\n        const poolBaseTokenVol: TokenVolumeV3 = ammPoolsBalance.pooled[0];\n        const quoteBaseTokenVol: TokenVolumeV3 = ammPoolsBalance.pooled[1];\n        let poolVolumn:[baseVol:any, quoteVol:any];\n        if ( base && quote && tokenMap[base].tokenId === poolBaseTokenVol.tokenId ) {\n            poolVolumn =  [[base,poolBaseTokenVol.volume],[quote,quoteBaseTokenVol.volume]]\n        } else if (base && quote && tokenMap[base].tokenId === quoteBaseTokenVol.tokenId){\n            poolVolumn =  [[quote,quoteBaseTokenVol.volume],[base,poolBaseTokenVol.volume]]\n        } else {\n            throw new CustomError(ErrorMap.NO_SUPPORT_PAIR)\n        }\n        let [baseVol,quoteVol]  = poolVolumn\n        if(baseVol && quoteVol){\n            // stob = volumeToCountAsBigNumber(baseVol[0],baseVol[1])?.div(\n            //     volumeToCountAsBigNumber(quoteVol[0],quoteVol[1]) || 1\n            // ) .toNumber()\n            stob = volumeToCountAsBigNumber(quoteVol[0],quoteVol[1])?.div(\n                volumeToCountAsBigNumber(baseVol[0],baseVol[1]) || 1).toNumber()\n        }\n    }\n\n    _tradeCalcData.StoB = stob;\n    _tradeCalcData.BtoS = stob !== 0 && stob !== undefined? 1 / (stob * 1.0): 0;\n    _tradeCalcData.sellCoinInfoMap = coinMap && marketCoins?.reduce((prev: any, item: string | number) => {\n        return {...prev, [ item ]: coinMap[ item ]}\n    }, {} as CoinMap<C>)\n    _tradeCalcData.buyCoinInfoMap = coinMap && tokenMap && tokenMap[ _tradeCalcData.coinSell as string ].tradePairs?.reduce((prev: any, item: string | number) => {\n        return {...prev, [ item ]: coinMap[ item ]}\n    }, {} as CoinMap<C>);\n\n    return {\n        _tradeCalcData\n    }\n    //setPair();\n}","import store from '../../stores';\nimport { WalletMap,WalletCoin,CoinKey } from '@loopring-web/component-lib/static-resource';\nimport * as fm from 'loopring-sdk';\nimport { fromWEI } from '../../utils/swap_calc_utils';\nimport { UserBalanceInfo } from 'loopring-sdk';\nexport type WalletMapExtend<C> =    {\n    [K in CoinKey<C>]?: WalletCoin<C> & {\n    detail:UserBalanceInfo\n}\n}\n\n\n// export const makeWalletLayer1 = <C extends { [ key: string ]: any }>():{ walletMap: WalletMapExtend<C> | undefined } => {\n//     const {walletLayer1} = store.getState().walletLayer1;\n//     const {tokenMap} = store.getState().tokenMap;\n//     let walletMap: WalletMapExtend<C> | undefined;\n//     if (walletLayer1) {\n//         walletMap = Reflect.ownKeys(walletLayer1).reduce((prev, item) => {\n//             const {total, locked, pending: {withdraw}} = walletLayer1[ item as string ];\n//             const countBig = fm.toBig(total).minus(fm.toBig(locked)).minus(fm.toBig(withdraw)).toString()\n//             return {\n//                 ...prev, [ item ]: {\n//                     belong: item,\n//                     count: fromWEI(tokenMap, item, countBig),\n//                     detail: walletLayer1[ item as string ]\n//                 }\n//             }\n//         }, {} as  WalletMapExtend<C> )\n//     }\n//\n//     return {walletMap}\n// }\n\nexport const makeWallet = <C extends { [ key: string ]: any }>():{ walletMap: WalletMapExtend<C> | undefined } => {\n    const {walletLayer2} = store.getState().walletLayer2;\n    const {tokenMap} = store.getState().tokenMap;\n    let walletMap: WalletMapExtend<C> | undefined;\n    if (walletLayer2) {\n        walletMap = Reflect.ownKeys(walletLayer2).reduce((prev, item) => {\n            const {total, locked, pending: {withdraw}} = walletLayer2[ item as string ];\n            const countBig = fm.toBig(total).minus(fm.toBig(locked)).minus(fm.toBig(withdraw)).toString()\n            return {\n                ...prev, [ item ]: {\n                    belong: item,\n                    count: fromWEI(tokenMap, item, countBig),\n                    detail: walletLayer2[ item as string ]\n                }\n            }\n        }, {} as  WalletMapExtend<C> )\n    }\n\n    return {walletMap}\n}","import { Contract } from '@ethersproject/contracts'\nimport { getAddress } from '@ethersproject/address'\nimport { AddressZero } from '@ethersproject/constants'\nimport { BigNumber } from '@ethersproject/bignumber'\n\nimport { JsonRpcSigner, Web3Provider } from '@ethersproject/providers'\n\nimport { UnsupportedChainIdError } from '@web3-react/core'\n\nimport {\n  NoEthereumProviderError,\n  UserRejectedRequestError as UserRejectedRequestErrorInjected\n} from '@web3-react/injected-connector'\nimport { UserRejectedRequestError as UserRejectedRequestErrorWalletConnect } from '@web3-react/walletconnect-connector'\n\nimport { ChainId } from 'loopring-sdk'\n\nexport function getLibrary(provider: any): Web3Provider {\n  const library = new Web3Provider(provider)\n  library.pollingInterval = 10000\n  return library\n}\n\nexport function getErrorMessage(error: Error) {\n  if (error instanceof NoEthereumProviderError) {\n    return 'No Ethereum browser extension detected, install MetaMask on desktop or visit from a dApp browser on mobile.'\n  } else if (error instanceof UnsupportedChainIdError) {\n    return 'You\\'re connected to an unsupported network.'\n  } else if (\n    error instanceof UserRejectedRequestErrorInjected ||\n    error instanceof UserRejectedRequestErrorWalletConnect\n  ) {\n    return 'Please authorize this website to access your Ethereum account.'\n  } else {\n    console.error(error)\n    return 'An unknown error occurred. Check the console for more details.'\n  }\n}\n\nexport function transactionChecker(web3: any, address: string) {\n  const account = address.toLowerCase()\n\n  const subscription = web3.eth.subscribe('pendingTransactions', (err: any, res: any) => {\n    if (err) {\n      console.error(err)\n    }\n  })\n\n  return function watchTransactions() {\n    console.log('Watch Transactions...')\n    subscription.on('data', (txHash: any) => {\n      setTimeout(async () => {\n        try {\n          let tx = await web3.eth.getTransaction(txHash)\n          if (tx.to && tx.to.toLowerCase() === account) {\n            const value = web3.utils.fromWei(tx.value, 'ether')\n            if (value > 0) {\n              console.log('watchTransactions value:', value)\n            }\n          }\n        } catch (err) {\n          console.error(err)\n        }\n      }, 60 * 1000)\n    })\n  }\n}\n\n// returns the checksummed address if the address is valid, otherwise returns false\nexport function isAddress(value: any): string | false {\n  try {\n    return getAddress(value)\n  } catch {\n    return false\n  }\n}\n\nconst ETHERSCAN_PREFIXES: { [chainId in ChainId]: string } = {\n  1: '',\n  5: 'goerli.',\n}\n\nexport function getEtherscanLink(\n  chainId: ChainId,\n  data: string,\n  type: 'transaction' | 'token' | 'address' | 'block'\n): string {\n  const prefix = `https://${ETHERSCAN_PREFIXES[chainId] || ETHERSCAN_PREFIXES[1]}etherscan.io`\n\n  switch (type) {\n    case 'transaction': {\n      return `${prefix}/tx/${data}`\n    }\n    case 'token': {\n      return `${prefix}/token/${data}`\n    }\n    case 'block': {\n      return `${prefix}/block/${data}`\n    }\n    case 'address':\n    default: {\n      return `${prefix}/address/${data}`\n    }\n  }\n}\n\n// shorten the checksummed version of the input address to have 0x + 4 characters at start and end\nexport function shortenAddress(address: string, chars = 4): string {\n  const parsed = isAddress(address)\n  if (!parsed) {\n    throw Error(`Invalid 'address' parameter '${address}'.`)\n  }\n  return `${parsed.substring(0, chars + 2)}...${parsed.substring(42 - chars)}`\n}\n\n// add 10%\nexport function calculateGasMargin(value: BigNumber): BigNumber {\n  return value.mul(BigNumber.from(10000).add(BigNumber.from(1000))).div(BigNumber.from(10000))\n}\n\n// account is not optional\nexport function getSigner(library: Web3Provider, account: string): JsonRpcSigner {\n  return library.getSigner(account).connectUnchecked()\n}\n\n// account is optional\nexport function getProviderOrSigner(library: Web3Provider, account?: string): Web3Provider | JsonRpcSigner {\n  return account ? getSigner(library, account) : library\n}\n\n// account is optional\nexport function getContract(address: string, ABI: any, library: Web3Provider, account?: string): Contract {\n  if (!isAddress(address) || address === AddressZero) {\n    throw Error(`Invalid 'address' parameter '${address}'.`)\n  }\n\n  return new Contract(address, ABI, getProviderOrSigner(library, account) as any)\n}\n\nexport function escapeRegExp(string: string): string {\n  return string.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&') // $& means the whole matched string\n}\n\nexport async function isContract(web3: any, address: string) {\n  const code = await web3.eth.getCode(address)\n  return code && code.length > 2\n}\n\nexport function getShortAddr(address: string) {\n    if (!address || address === undefined || address === null || address.trim() === '') {\n        console.log('getShortAddr got empty!')\n        return undefined\n    }\n    const convertAddr = address.substr(0, 6) + '...' + address.substr(address.length - 4)\n    return convertAddr\n}\n","import { debounce } from 'lodash'\nimport React, { useEffect } from 'react'\nimport { UserStorage } from 'storage'\n\nimport { useCheckAccStatus, } from 'stores/account/hook'\n\nimport { \n  useUpdateChainId,\n  useUpdateExchangeInfo, \n  useUpdateExchangeMarkets, \n  useUpdateTokens, \n  useUpdateAmmPoolConf,\n  useUpdateAmmActivityRules,\n  useUpdateAmmPoolStats,\n} from 'stores/trading/hook'\n\nenum WindowEvent {\n  Click = 'click',\n  Scroll = 'scroll',\n  Mouseover = 'mouseover',\n}\n\nconst events = [WindowEvent.Click, WindowEvent.Scroll]\n\nconst forceReset = debounce(() => { UserStorage.checkTimeout(true) }, 100)\n\nexport const GlobalProvider = ({ children }: { children: React.ReactNode }) => {\n\n  useUpdateExchangeInfo()\n  useUpdateExchangeMarkets()\n  useUpdateTokens()\n  useUpdateAmmPoolConf()\n  useUpdateAmmActivityRules()\n  useUpdateAmmPoolStats()\n  useUpdateChainId()\n\n  useCheckAccStatus()\n\n  useEffect(() => {\n\n    events.forEach((event: string) => {\n      document.addEventListener(event, forceReset)\n    })\n\n    return () => {\n\n      events.forEach((event: string) => {\n        document.removeEventListener(event, forceReset)\n      })\n    }\n\n  }, [])\n\n  return (\n    <React.Fragment>\n      { children}\n    </React.Fragment>\n  )\n\n}\n","import React, { useState, useEffect } from 'react'\nimport styled from '@emotion/styled/macro'\nimport { useTranslation } from 'react-i18next'\n\nimport { useWeb3React } from '@web3-react/core'\n\nimport { network } from 'networks/web3_connectors'\n\nimport { useEagerConnect, useInactiveListener } from 'hooks/web3/useWeb3'\nimport { reset, setAccountStatus } from 'stores/account/reducer'\n\nimport { ChainId, NetworkContextName } from 'loopring-sdk'\n\n// import Loader from 'components/modals/Loader'\nimport { useDispatch } from 'react-redux'\nimport { AccountStatus } from 'state_machine/account_machine_spec'\n\nconst MessageWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  height: 20rem;\n`\n\nconst Message = styled.h2`\n  color: ${({ theme }) => theme.colorBase.error};\n`\n\nexport function Web3ReactManager({ children }: { children: JSX.Element }) {\n  const { t } = useTranslation()\n  const { active } = useWeb3React()\n  const { active: networkActive, error: networkError, activate: activateNetwork } = useWeb3React(NetworkContextName)\n\n  // try to eagerly connect to an injected provider, if it exists and has granted access already\n  const triedEager = useEagerConnect()\n\n  // after eagerly trying injected, if the network connect ever isn't active or in an error state, activate itd\n  useEffect(() => {\n    if (triedEager && !networkActive && !networkError && !active) {\n      activateNetwork(network)\n    }\n  }, [triedEager, networkActive, networkError, activateNetwork, active])\n\n  // when there's no account connected, react to logins (broadly speaking) on the injected provider, if it exists\n  \n  const dispatch = useDispatch()\n\n  const onReConnectInjected = () => {\n    console.log('onReConnectInjected')\n    dispatch(reset(undefined))\n    dispatch(setAccountStatus(AccountStatus.UNCONNNECTED))\n  }\n  \n  useInactiveListener(onReConnectInjected, !triedEager)\n\n  // handle delayed loader state\n  const [showLoader, setShowLoader] = useState(false)\n  useEffect(() => {\n    const timeout = setTimeout(() => {\n      setShowLoader(true)\n    }, 600)\n\n    return () => {\n      clearTimeout(timeout)\n    }\n  }, [])\n\n  // on page load, do nothing until we've tried to connect to the injected connector\n  if (!triedEager) {\n    return null\n  }\n\n  // if the account context isn't active, and there's an error on the network context, it's an irrecoverable error\n  if (!active && networkError) {\n    return (\n      <MessageWrapper>\n        <Message>{t('unknownError')}</Message>\n      </MessageWrapper>\n    )\n  }\n\n  // if neither context is active, spin\n  if (!active && !networkActive) {\n    return showLoader ? (\n      <MessageWrapper>\n        {/*<Loader />*/}\n      </MessageWrapper>\n    ) : null\n  }\n\n  return children\n}\n","import React from 'react'\n\nexport const DevWrapper = ({ children }: { children: React.ReactNode }) => {\n\n  return (\n    <React.Fragment>\n      {\n        process.env.NODE_ENV !== 'production' ? (\n          <>\n          {children}\n          </>\n        ) : null\n      }\n    </React.Fragment>\n  )\n\n}\n\n","import { AmmpoolAPI, ChainId, ExchangeAPI, UserAPI, WalletAPI, WsAPI } from \"loopring-sdk\"\nimport { getChainId } from 'stores/trading/hook'\n\nexport const walletAPI = () => {\n    const walletApi = new WalletAPI(getChainId() as ChainId)\n    return walletApi\n}\n\nexport const userAPI = () => {\n    const userApi = new UserAPI(getChainId() as ChainId)\n    return userApi\n}\n\nexport const exchangeAPI = () => {\n    const exchangeApi = new ExchangeAPI(getChainId() as ChainId)\n    return exchangeApi\n}\n\nexport const ammpoolAPI = () => {\n    const ammpoolApi = new AmmpoolAPI(getChainId() as ChainId)\n    return  ammpoolApi\n}\n\nexport const wsAPI = () => {\n    const wsApi = new WsAPI(getChainId() as ChainId)\n    return wsApi\n}\n\nexport class LoopringAPI {\n    \n    public static userAPI: UserAPI | undefined = undefined\n    public static exchangeAPI: ExchangeAPI | undefined = undefined\n    public static ammpoolAPI: AmmpoolAPI | undefined = undefined\n    public static walletAPI: WalletAPI | undefined = undefined\n    public static wsAPI: WsAPI | undefined = undefined\n\n    public static InitApi = (chainId: ChainId) => {\n        LoopringAPI.userAPI = new UserAPI(chainId) \n        LoopringAPI.exchangeAPI = new ExchangeAPI(chainId) \n        LoopringAPI.ammpoolAPI = new AmmpoolAPI(chainId) \n        LoopringAPI.walletAPI = new WalletAPI(chainId) \n        LoopringAPI.wsAPI = new WsAPI(chainId) \n    }\n\n}\n","import { createAction } from '@reduxjs/toolkit'\n\n// fired once when the app reloads but before the app renders\n// allows any updates to be applied to store data loaded from localStorage\nexport const updateVersion = createAction<void>('global/updateVersion')\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit'\n\nconst now = () => new Date().getTime()\n\nexport interface SerializableTransactionReceipt {\n  to: string\n  from: string\n  contractAddress: string\n  transactionIndex: number\n  blockHash: string\n  transactionHash: string\n  blockNumber: number\n  status?: number\n}\n\nexport interface TransactionDetails {\n  hash: string\n  approval?: { tokenAddress: string; spender: string }\n  summary?: string\n  claim?: { recipient: string }\n  receipt?: SerializableTransactionReceipt\n  lastCheckedBlockNumber?: number\n  addedTime: number\n  confirmedTime?: number\n  from: string\n}\n\nexport interface TransactionState {\n  [chainId: number]: {\n    [txHash: string]: TransactionDetails\n  }\n}\n\nexport const initialState: TransactionState = {}\n\nconst transactionsSlice = createSlice({\n  name: 'transactions',\n  initialState,\n  reducers: {\n    reset(state) {\n      Object.assign(state, initialState)\n    },\n    addTransaction(state: TransactionState, action: PayloadAction<{\n      chainId: number, from: string,\n      hash: string, approval: any, summary: string, claim: any\n    }>) {\n      const { chainId, from, hash, approval, summary, claim} = action.payload\n      if (state[chainId]?.[hash]) {\n        throw Error('the existing TX can\\'t be added again')\n      }\n\n      const txs = state[chainId] ?? {}\n      txs[hash] = {\n        hash, \n        approval, \n        summary, \n        claim, \n        from,\n        addedTime: now(), \n      }\n      // state[chainId] = txs\n    },\n    clearAllTransactions(state: TransactionState, action: PayloadAction<number>) {\n      const chainId = action.payload\n      if (!state[chainId]) return\n      state[chainId] = {}\n    },\n    checkedTransaction(state: TransactionState, action: PayloadAction<{chainId: number,\n    hash: string, blockNumber: number}>) {\n      const { chainId, hash, blockNumber} = action.payload\n      const tx = state[chainId]?.[hash]\n      if (!tx) {\n        return\n      }\n      if (!tx.lastCheckedBlockNumber) {\n        tx.lastCheckedBlockNumber = blockNumber\n      } else {\n        tx.lastCheckedBlockNumber = Math.max(blockNumber, tx.lastCheckedBlockNumber)\n      }\n      // state[chainId][hash] = tx\n    },\n    finalizeTransaction(state: TransactionState, action: PayloadAction<{\n      hash: string, chainId: number, receipt: any\n    }>) {\n      const { chainId, hash, receipt } = action.payload\n      \n      const tx = state[chainId]?.[hash]\n      if (!tx) {\n        return\n      }\n      tx.receipt = receipt\n      tx.confirmedTime = now()\n    }\n  }\n}\n)\n\nexport const { reset, addTransaction, clearAllTransactions, checkedTransaction, finalizeTransaction, } = transactionsSlice.actions\nexport default transactionsSlice\n","import { createSlice, PayloadAction, Slice } from '@reduxjs/toolkit'\nimport {  AmmTradesStates } from './interface';\nimport { STATUS } from '../../constant';\n\n\nconst initialState:Required<AmmTradesStates>  = {\n    ammTrades:[],\n    status:'UNSET',\n    errorMessage:null,\n}\nconst ammTradesSlice:Slice = createSlice({\n    name: 'ammTrades',\n    initialState,\n    reducers: {\n        getAmmTrades(state, action:PayloadAction<string | undefined>) {\n            state.status = STATUS.PENDING\n        },\n        getAmmTradesStatus(state, action: PayloadAction<AmmTradesStates>) {\n            // @ts-ignore\n            if (action.error) {\n                state.status =  STATUS.ERROR\n                // @ts-ignore\n                state.errorMessage = action.error\n            }\n            state.ammTrades = {...action.payload.ammTrades};\n            state.status = STATUS.DONE\n        },\n        statusUnset: state => {\n            state.status = STATUS.UNSET\n        }\n    },\n});\nexport { ammTradesSlice };\nexport const { getAmmTrades, getAmmTradesStatus, statusUnset } = ammTradesSlice.actions\n","import { all, takeLatest, call, put } from \"redux-saga/effects\"\nimport { getAmmActivityMap, getAmmActivityMapStatus } from './reducer'\nimport { LoopringAPI } from '../../apis/api';\nconst getAmmActivityMapApi = async () => {\n\n    if(LoopringAPI.ammpoolAPI){\n        const { groupByRuleTypeAndStatus } =  await LoopringAPI.ammpoolAPI.getAmmPoolActivityRules();\n        return  {data:groupByRuleTypeAndStatus}\n    }else{\n        return {data:undefined}\n    }\n\n}\n\nexport function* getPostsSaga() {\n    try {\n        //\n        const { data } = yield call(getAmmActivityMapApi);\n        yield put(getAmmActivityMapStatus({ammActivityMap:data}));\n    } catch (err) {\n        yield put(getAmmActivityMapStatus(err));\n    }\n}\n\nexport default function* ammActivityMapSaga() {\n    yield all([takeLatest(getAmmActivityMap, getPostsSaga)]);\n}\n","import { all, call, fork, put, takeLatest } from \"redux-saga/effects\";\nimport { getAmmMap, getAmmMapStatus, updateRealTimeAmmMap } from './reducer';\nimport { AmmDetail } from '@loopring-web/component-lib/src/static-resource';\nimport store from '../../index';\nimport { AmmPoolInfoV3, AmmPoolStat, toBig, TokenVolumeV3, } from \"loopring-sdk\";\nimport { ammpoolAPI } from \"stores/apis/api\";\nimport { PayloadAction } from '@reduxjs/toolkit';\nimport { AmmDetailStore, GetAmmMapParams } from './interface';\nimport { volumeToCount, volumeToCountAsBigNumber } from '../../../hooks/help';\n\ntype AmmMap<R extends { [ key: string ]: any }> = { [ key: string ]: AmmDetail<R> } | {}  //key is AMM-XXX-XXX\nexport const setAmmState = ({ammPoolState, keyPair}: { ammPoolState: AmmPoolStat, keyPair: string }) => {\n    const {idIndex} = store.getState().tokenMap\n    // @ts-ignore\n    const [, coinA, coinB] = keyPair.match(/(\\w+)-(\\w+)/i);\n    const {forex,faitPrices} = store.getState().system;\n    if (idIndex && coinA && coinB && faitPrices && forex) {\n        let result =  {\n            amountDollar: parseFloat(ammPoolState.liquidityUSD),\n            amountYuan: (parseFloat(ammPoolState.liquidityUSD) / (forex ? forex : 6.5)),\n            totalLPToken: volumeToCount('LP-' + keyPair, ammPoolState.lpLiquidity),\n            totalA: volumeToCount(coinA, ammPoolState.liquidity[ 0 ]),//parseInt(ammPoolState.liquidity[ 0 ]),\n            totalB: volumeToCount(coinB, ammPoolState.liquidity[ 1 ]),//parseInt(ammPoolState.liquidity[ 1 ]),\n            rewardValue: ammPoolState.rewards[ 0 ] ? volumeToCount(idIndex[ ammPoolState.rewards[ 0 ].tokenId as number ], ammPoolState.rewards[ 0 ].volume) : undefined,\n            rewardToken: ammPoolState.rewards[ 0 ] ? idIndex[ ammPoolState.rewards[ 0 ].tokenId as number ] : undefined,\n            rewardValue2: ammPoolState.rewards[ 1 ] ? volumeToCount(idIndex[ ammPoolState.rewards[ 1 ].tokenId as number ], ammPoolState.rewards[ 1 ].volume) : undefined,\n            rewardToken2: ammPoolState.rewards[ 1 ] ? idIndex[ ammPoolState.rewards[ 1 ].tokenId as number ] : undefined,\n        }\n\n        const feeA =  volumeToCountAsBigNumber(coinA, ammPoolState.fees[ 0 ]);//parseInt(ammPoolState.fees[ 0 ]),\n        const feeB = volumeToCountAsBigNumber(coinB, ammPoolState.fees[ 1 ]);//parseInt(ammPoolState.fees[ 1 ]),\n        const feeDollar =  faitPrices[coinA] && faitPrices[coinB]  ?\n            toBig(feeA||0).times(faitPrices[coinA].price).plus(toBig(feeB||0).times(faitPrices[coinB].price)):undefined\n        const feeYuan = feeDollar ? feeDollar.times(forex) : undefined;\n\n        return {\n             ...result,\n            feeA:feeA?.toNumber(),\n            feeB:feeB?.toNumber(),\n            feeDollar:feeDollar? feeDollar.toNumber(): undefined,\n            feeYuan:feeYuan? feeYuan.toNumber(): undefined,\n            tradeFloat: {\n                change: undefined,\n                timeUnit: '24h',\n                // priceYuan: 100,\n                // priceDollar: 1.23123,\n                // floatTag: FloatTag.increase,\n                // reward: 12312,\n                // APY: (parseInt(ammPoolState.apyBips) * 1.0 / 100)\n            },\n            APY: (parseInt(ammPoolState.apyBips) * 1.0 / 100)\n        }\n\n\n    }\n}\nconst getAmmMapApi = async <R extends { [ key: string ]: any }>({ammpools}: GetAmmMapParams) => {\n\n    let ammMap: AmmMap<R> = {}\n    const {ammPoolStats} = (await ammpoolAPI().getAmmPoolStats());\n\n    let {__timer__} = store.getState().amm.ammMap\n    __timer__ = (() => {\n        if (__timer__ && __timer__ !== -1) {\n            clearInterval(__timer__)\n        }\n        return setInterval(async () => {\n            let ammPoolStats: { [key in keyof R]: AmmPoolStat } = (await ammpoolAPI().getAmmPoolStats()).ammPoolStats as { [key in keyof R]: AmmPoolStat }\n            store.dispatch(updateRealTimeAmmMap({ammPoolStats}))\n        }, 900000)    //15*60*1000 //900000\n    })()\n    const {tokenMap: {coinMap, idIndex}} = store.getState();\n\n    // const forex = faitPrices.prices['USDC']\n\n\n    Reflect.ownKeys(ammpools).forEach(async (key) => {\n        const item: AmmPoolInfoV3 = ammpools[ key as string ]\n        if (item.market === key && item.tokens.pooled && idIndex) {\n\n            // const tokenA =  ; //getTokenInfoById(tokens.tokenIdMap, parseInt(item.tokens.pooled[0]))\n            // const tokenB =  ; // getTokenInfoById(tokens.tokenIdMap, parseInt(item.tokens.pooled[1]))\n            const coinA = idIndex[ item.tokens.pooled[ 0 ] as any ];\n            const coinB = idIndex[ item.tokens.pooled[ 1 ] as any ];\n            const dataItem: AmmDetailStore<R> = {\n                coinA: coinA,\n                coinB: coinB,\n                isNew: Date.now() - (Number(item.createdAt)) > 3 * 86400 * 1000 ? false : true,//3*24*60*60*1000,\n                isActivity: item.status === 7 ? true : false,\n                address: item.address,\n                ...setAmmState({ammPoolState: ammPoolStats[ key ], keyPair: `${coinA}-${coinB}`}),\n                __rawConfig__: item\n            } as AmmDetailStore<R>\n            // @ts-ignore\n            ammMap[ item.market ] = dataItem\n\n\n        }\n\n\n    })\n    return {ammMap, __timer__}\n}\n\n\nexport function* getPostsSaga({payload}: PayloadAction<GetAmmMapParams>) {\n    try {\n        const {ammpools} = payload;\n        const {ammMap, __timer__} = yield call(getAmmMapApi, {ammpools});\n        console.log('--- getPostsSaga:', ammMap)\n        yield put(getAmmMapStatus({ammMap, __timer__}));\n    } catch (err) {\n        yield put(getAmmMapStatus(err));\n    }\n}\n\nexport function* updateRealTimeSaga({payload}: any) {\n    try {\n        const {ammPoolStats} = payload;\n        let {ammMap}: { ammMap: AmmMap<object> } = store.getState().amm.ammMap;\n        if (ammPoolStats) {\n            //{ ammPoolStats?: { [ key: string ]: AmmPoolStat } }\n            Reflect.ownKeys(ammPoolStats).map((key) => {\n                const keyPair = (key as string).replace('AMM-', '')\n                \n                // @ts-ignore\n                ammMap[ key ] = {\n                    // @ts-ignore\n                    ...ammMap[ key ],\n                    ...setAmmState({ammPoolState: ammPoolStats[ key as string ], keyPair, })\n                }\n                return ammMap\n            })\n        }\n        yield put(getAmmMapStatus({ammMap}));\n    } catch (err) {\n        yield put(getAmmMapStatus(err));\n    }\n}\n\n\nexport function* ammMapInitSaga() {\n    yield all([takeLatest(getAmmMap, getPostsSaga)]);\n}\n\nexport function* ammMapRealTimeSaga() {\n    yield all([takeLatest(updateRealTimeAmmMap, updateRealTimeSaga)]);\n}\n\nexport const ammMapSaga = [\n    fork(ammMapInitSaga),\n    fork(ammMapRealTimeSaga),\n]\n\n","import { all, takeLatest, call, put } from \"redux-saga/effects\";\nimport { getAmmTrades, getAmmTradesStatus } from './reducer';\n\nconst getAmmTradesApi = ()=>new Promise((resolve)=>{\n    //TODO: check is connect and active and assign wallet\n    //TODO: if not reject directory, any error happen will clean the\n    resolve([\n    {side: 'Buy',\n        amount: {\n            sell:{ belong:'ETH', tradeValue: 0.1 },\n            buy:{ belong:'LRC', tradeValue: 123 }\n        },\n        time: Date.now(),\n        fee: 0.02,\n        priceValue: 0.123,\n        priceToken: 'LRC'}\n    ,{side: 'Buy',\n        amount: {\n            sell:{ belong:'ETH', tradeValue: 0.1 },\n            buy:{ belong:'LRC', tradeValue: 123 }\n        },\n        time: Date.now(),\n        fee: 0.02,\n        priceValue: 0.123,\n        priceToken: 'LRC'}\n])});\nexport function* getPostsSaga() {\n    try {\n        //\n        const { data } = yield call(getAmmTradesApi);\n        const posts = data;\n        yield put(getAmmTradesStatus(posts));\n    } catch (err) {\n        yield put(getAmmTradesStatus(err));\n    }\n}\n\nexport default function* ammTradesSaga() {\n    yield all([takeLatest(getAmmTrades, getPostsSaga)]);\n}\n","import { combineReducers } from '@reduxjs/toolkit';\n// import { ammRecordSlice } from './AmmConfig';\nimport { ammTradesSlice } from './AmmTrades';\nimport { ammMapSlice } from './AmmMap';\nimport { ammActivityMapSlice } from './AmmActivityMap';\nimport ammActivityMapSaga from './AmmActivityMap/saga';\nimport { ammMapSaga } from './AmmMap/saga';\nimport ammTradesSaga from './AmmTrades/saga';\nimport {  fork } from 'redux-saga/effects';\n\nexport const  ammReducer = combineReducers({\n    // ammRecord: ammRecordSlice.reducer,\n    ammTrades: ammTradesSlice.reducer,\n    ammMap: ammMapSlice.reducer,\n    ammActivityMap:ammActivityMapSlice.reducer\n})\nexport const ammForks =  [\n    fork(ammActivityMapSaga),\n    ...ammMapSaga,\n    // fork(ammRecordSaga),\n    fork(ammTradesSaga)\n]\n\n// export * from './interface'\n","import { all, call, fork, put, takeLatest } from \"redux-saga/effects\";\nimport { getTokenMap, getTokenMapStatus } from './reducer';\nimport { getIcon } from '../../utils/swap_calc_utils';\nimport { CoinInfo, CoinMap } from '@loopring-web/component-lib/static-resource';\nimport { AddressMap, GetTokenMapParams, IdMap } from './interface';\nimport { PayloadAction } from '@reduxjs/toolkit';\n\nconst getTokenMapApi = async <R extends { [ key: string ]: any }>({\n                                                                      tokensMap,\n                                                                      pairs,\n                                                                      marketArr,\n                                                                      tokenArr\n                                                                  }: GetTokenMapParams<R>) => {\n    let coinMap: CoinMap<any, CoinInfo<any>> = {};\n    let tokenMap:any = tokensMap;\n    let addressIndex: AddressMap = {};\n    let idIndex: IdMap = {};\n    Reflect.ownKeys(tokensMap).forEach((key) => {\n        if (!(key as string).startsWith('LP-')) {\n            coinMap[ key as string ] = {\n                icon: getIcon(key as string, tokensMap),\n                name: key as string,\n                simpleName: key,\n                description: '',\n                company: '',\n            }\n        }\n\n        if (pairs[ key as string ] && pairs[ key as string ].tokenList) {\n            // @ts-ignore\n            tokensMap[ key ].tradePairs = pairs[ key as string ].tokenList;\n        }\n        addressIndex = {\n            ...addressIndex,\n            // @ts-ignore\n            [ tokensMap[ key ].address ]: key as string\n        }\n        idIndex = {\n            ...idIndex,\n            // @ts-ignore\n            [ tokensMap[ key ].tokenId ]: key as string\n        }\n    })\n    return {data: {coinMap, addressIndex, idIndex, tokenMap, marketArray: marketArr, marketCoins: tokenArr}}\n};\n\nexport function* getPostsSaga<R extends { [ key: string ]: any }>({payload}: PayloadAction<GetTokenMapParams<R>>) {\n    try {\n        const {tokensMap, marketMap, pairs, marketArr,tokenArr} = payload\n        // @ts-ignore\n        const {data} = yield call(getTokenMapApi, {tokensMap, pairs, marketArr, tokenArr});\n\n        yield put(getTokenMapStatus({...data, marketMap}));\n    } catch (err) {\n        yield put(getTokenMapStatus(err));\n    }\n}\n\n\nexport function* tokenInitSaga() {\n    yield all([takeLatest(getTokenMap, getPostsSaga)]);\n}\n\n\nexport const tokenSaga = [\n    fork(tokenInitSaga),\n    // fork(tokenPairsSaga),\n]\n\n// export function* getPairsSaga({payload}:PayloadAction<{tokenPairs: TokenPairs }>) {\n//     try {\n//         const {tokenPairs} = payload;\n//         const tokenPairsMap =  Reflect.ownKeys(tokenPairs).reduce((prev,key)=>{\n//            // @ts-ignore\n//             return prev[key as string] =  tokenPairs[key as string].tokenList\n//         }, {} )\n//\n//         yield put(getTokenMapStatus({tokenPairsMap}));\n//     } catch (err) {\n//         yield put(getAmmMapStatus(err));\n//     }\n// }\n// export function* tokenPairsSaga() {\n//     yield all([takeLatest(getTokenPairMap, getPairsSaga)]);\n// }\n\n\n","import { all, call, fork, put, takeLatest } from \"redux-saga/effects\"\nimport { getTicker, getTickers, getTickerStatus } from './reducer'\nimport { CoinKey, CustomError, ErrorMap, PairKey, TradeFloat } from '@loopring-web/component-lib/src/static-resource'\n\nimport { TickerData } from \"loopring-sdk\"\n\nimport { exchangeAPI } from \"stores/apis/api\"\nimport { volumeToCountAsBigNumber } from '../../hooks/help';\nimport { Ticker } from './interface';\nimport store from '../index';\n\ntype TickerMap<R extends { [ key: string ]: any }> = {\n    [key in CoinKey<R> | PairKey<R>]?: TradeFloat & {\n    reward?: number, rewardToken?: string\n}\n\n}\n\nconst getTickersApi = async <R extends { [ key: string ]: any }>(list: Array<keyof R>) => {\n    const {faitPrices, forex} = store.getState().system\n    const tickers = await exchangeAPI().getMixTicker({market: list.join(',')})\n    const data: TickerMap<R> = Reflect.ownKeys(tickers.tickMap).reduce((prev, key) => {\n        const item: TickerData = tickers.tickMap[ key as any ];\n        if (item && item.base && forex && faitPrices && (faitPrices[ item.base ] || faitPrices[ 'USDT' ])) {\n            const volume = volumeToCountAsBigNumber(item.base, item.base_token_volume);\n            //FIX: DIE is not in faitPrices\n            const priceDollar = volume?.times(faitPrices[ item.base ] ? faitPrices[ item.base ].price : faitPrices[ 'USDT' ].price);\n            const priceYuan = priceDollar?.times(forex);\n            const change = item.change && item.change !== 0 ? item.change * 100 : undefined;\n\n            prev[ key as any ] = {\n                // ...item,\n                timeUnit: '24h',\n                priceDollar: priceDollar?.toNumber() === 0 ? undefined : priceDollar?.toNumber(),\n                priceYuan: priceYuan?.toNumber() === 0 ? undefined : priceYuan?.toNumber(),\n                volume: volume?.toNumber() === 0 ? undefined : volume?.toNumber(),\n                floatTag: item.close > item.open ? 'increase' : 'decrease',\n                change: change,\n                close: isNaN(item.close) ? undefined : item.close,\n                high: item.high === 0 ? undefined : item.high,\n                low: item.low === 0 ? undefined : item.high,\n                // APY: 0,\n                reward: 0,\n                rewardToken: '',\n                __rawTicker__: item,\n            } as Ticker;\n        }\n        return prev\n    }, {} as TickerMap<R>)\n\n    return {data}\n}\n\nexport function* getPostsSaga({payload}: any) {\n    try {\n        // @ts-ignore\n        const {tickerKey, tickerKeys} = payload;\n        console.log('getPostsSaga tickerKey', tickerKey, tickerKeys)\n        if (tickerKey || (tickerKeys && tickerKeys.length)) {\n            const {data} = yield call(getTickersApi, tickerKey ? [tickerKey] : tickerKeys);\n            yield put(getTickerStatus({tickerMap: data}));\n\n        } else {\n            throw new CustomError(ErrorMap.NO_TOKEN_KEY_LIST);\n        }\n    } catch (err) {\n        yield put(getTickerStatus(err));\n    }\n}\n\nfunction* tickerSaga() {\n    yield all([takeLatest(getTicker, getPostsSaga)]);\n}\n\nfunction* tickersSaga() {\n    yield all([takeLatest(getTickers, getPostsSaga)]);\n}\n\nexport const tickerForks = [\n    fork(tickerSaga),\n    fork(tickersSaga),\n]\n ","import { all, call, fork, put, take, takeLatest } from \"redux-saga/effects\"\nimport { getSystemStatus, updateRealTimeObj, updateSystem } from './reducer'\nimport { ENV, NETWORKEXTEND } from \"./interface\"\nimport store from '../index';\nimport { reset } from '../account/reducer';\nimport { ChainId } from 'loopring-sdk';\nimport { exchangeAPI, LoopringAPI } from '../apis/api';\nimport { getAmmMap, updateRealTimeAmmMap } from '../Amm/AmmMap';\nimport { getTokenMap } from '../token';\nimport { CustomError, ErrorMap } from '@loopring-web/component-lib/src/static-resource';\nimport { getAmmActivityMap } from '../Amm/AmmActivityMap';\nimport { updateWalletLayer1 } from '../walletLayer1';\n\n\nconst initConfig = function* <R extends { [ key: string ]: any }>(chainId: ChainId | 'unknown') {\n    store.dispatch(reset(undefined));\n    const {tokenSymbolMap: tokensMap} = yield call(async ()=> await LoopringAPI.exchangeAPI?.getTokens())\n    const {ammpools} = yield call(async ()=>await LoopringAPI.ammpoolAPI?.getAmmPoolConf());\n    const {pairs, marketArr, tokenArr, markets}  = yield call(async ()=> LoopringAPI.exchangeAPI?.getMixMarkets());\n    store.dispatch(getTokenMap({tokensMap, marketMap: markets, pairs,marketArr,tokenArr}))\n    yield take('tokenMap/getTokenMapStatus');\n    // let basePath: string = `wss://ws.${baseURL}/v3/ws?wsApiKey=${wsKey}`\n    store.dispatch(getAmmMap({ammpools}))\n    store.dispatch(getAmmActivityMap({ammpools}))\n    if(store.getState().tokenMap.status === 'ERROR'){\n\n    }\n\n}\n\nconst getSystemsApi = async <R extends { [ key: string ]: any }>(chainId: any) => {\n    //TODO get some other reuqired id...... put into system\n    // const { chainId } = system\n    const env = window.location.hostname === 'localhost' ? ENV.DEV : ChainId.GORLI === chainId ? ENV.UAT : ENV.PROD\n    chainId = ChainId.GORLI === chainId ? ChainId.GORLI : ChainId.MAINNET === chainId ? ChainId.MAINNET : NETWORKEXTEND.NONETWORK\n    if (chainId === NETWORKEXTEND.NONETWORK) {\n        throw new CustomError(ErrorMap.NO_NETWORK_ERROR)\n    } else {\n        LoopringAPI.InitApi(chainId as ChainId);\n        if (LoopringAPI.exchangeAPI) {\n            const { exchangeInfo } = (await LoopringAPI.exchangeAPI.getExchangeInfo())\n            const faitPrices = (await LoopringAPI.exchangeAPI.getFiatPrice({legal: 'CNY'})).fiatPrices\n            const gasPrice = (await exchangeAPI().getGasPrice()).gasPrice / 1e+9;\n            // : process.env.REACT_APP_API_URL_UAT;\n            const baseURL = ChainId.MAINNET === chainId ? `https://${process.env.REACT_APP_API_URL}` : `https:/${process.env.REACT_APP_API_URL_UAT}`\n            const forex = faitPrices[ 'USDT' ].price;\n            let {__timer__} = store.getState().system;\n            __timer__ = ((__timer__) => {\n                if (__timer__ && __timer__ !== -1) {\n                    clearInterval(__timer__);\n                }\n                return setInterval(async () => {\n                    const faitPrices = (await exchangeAPI().getFiatPrice({legal: 'CNY'})).fiatPrices\n                    const gasPrice = (await exchangeAPI().getGasPrice()).gasPrice / 1e+9\n                    const forex = faitPrices[ 'USDT' ]\n                    store.dispatch(updateRealTimeAmmMap(undefined))\n                    store.dispatch(updateRealTimeObj({faitPrices, gasPrice, forex}))\n                }, 300000)   //\n\n            })(__timer__);\n            return {chainId, env, baseURL, faitPrices, gasPrice, forex, exchangeInfo, __timer__}\n        }\n    }\n}\n\nexport function* getUpdateSystem({payload}: any) {\n    try {\n        // @ts-ignore\n        const {chainId} = payload;\n        const {env, baseURL, faitPrices, gasPrice, forex, exchangeInfo, __timer__} = yield call(getSystemsApi, chainId);\n\n        yield put(getSystemStatus({env, baseURL, faitPrices, gasPrice, forex, exchangeInfo, __timer__}));\n        yield call(initConfig,chainId)\n        //TODO check wallect store\n    } catch (err) {\n        yield put(getSystemStatus(err));\n    }\n}\n\nfunction* systemSaga() {\n    yield all([takeLatest(updateSystem, getUpdateSystem)]);\n}\n\nexport const systemForks = [\n    fork(systemSaga),\n]\n","import { all, call, fork, put, takeLatest } from \"redux-saga/effects\";\nimport { getWalletLayer1Status, updateWalletLayer1 } from './reducer';\nimport { CoinKey, PairKey, WalletCoin } from '@loopring-web/component-lib/src/static-resource';\nimport { exchangeAPI } from '../apis/api';\nimport store from '../index';\nimport { fromWEI } from '../../utils/swap_calc_utils';\n\ntype WalletLayer1Map<R extends {[key:string]:any}> = {\n    [key in CoinKey<R>|PairKey<R>]?:WalletCoin<R>\n}\n\nconst getWalletLayer1Balance = async <R extends {[key:string]:any}>()=> {\n    //TODO: check is connect and active and assign walletLayer1\n    //TODO: if not reject directory, any error happen will clean the\n    // await sdk\n    const exchangeApi = exchangeAPI();\n    const {accAddr,accountId} = store.getState().account;\n    const {tokenMap,marketCoins} = store.getState().tokenMap;\n    const {ethBalance} =  await exchangeApi.getEthBalances({owner:accAddr});\n    // @ts-ignore\n    const {tokenBalances} =  await exchangeApi.getTokenBalances({owner:accAddr,token: marketCoins.join()},tokenMap);\n    tokenBalances['ETH'] = ethBalance;\n    let walletLayer1;\n    if(tokenBalances) {\n        walletLayer1 = Reflect.ownKeys(tokenBalances).reduce((prev,item)=>{\n            return   {...prev, [ item ]:{\n                    belong: item,\n                    count: fromWEI(tokenMap, item, tokenBalances[item as string]),\n                }\n            }\n        },{} as WalletLayer1Map<R>)\n    }\n    return {walletLayer1}\n};\n\nexport function* getPostsSaga() {\n    try {\n        //\n        const {walletLayer1} = yield call(getWalletLayer1Balance);\n        yield put(getWalletLayer1Status({walletLayer1}));\n    } catch (err) {\n        yield put(getWalletLayer1Status(err));\n    }\n}\n\nexport function* walletLayer1Saga() {\n    yield all([takeLatest(updateWalletLayer1, getPostsSaga)]);\n}\n\nexport const walletLayer1Fork = [\n    fork(walletLayer1Saga),\n    // fork(tokenPairsSaga),\n]\n\n","import { all, call, fork, put, takeLatest } from \"redux-saga/effects\";\nimport { getWalletLayer2Status, updateWalletLayer2 } from './reducer';\nimport { CoinKey, PairKey, WalletCoin } from '@loopring-web/component-lib/src/static-resource';\nimport {  userAPI } from '../apis/api';\nimport store from '../index';\n\ntype WalletLayer2Map<R extends {[key:string]:any}> = {\n    [key in CoinKey<R>|PairKey<R>]?:WalletCoin<R>\n}\n\nconst getWalletLayer2Balance = async <R extends {[key:string]:any}>()=> {\n    //TODO: check is connect and active and assign walletLayer1\n    //TODO: if not reject directory, any error happen will clean the\n    // await sdk\n    // const exchangeApi = exchangeAPI();\n    const userApi = userAPI();\n    const {accountId,apiKey} = store.getState().account;\n    const {tokenMap,idIndex,marketCoins} = store.getState().tokenMap;\n    let walletLayer2;\n    if(apiKey && accountId){\n        // @ts-ignore\n        const {userBalances} =  await userApi.getUserBalances({accountId:accountId,tokens:''},apiKey)\n        if(userBalances) {\n            // tokenId: number;\n            // total: string;\n            // locked: string;\n            // pending: {\n            //     withdraw: string;\n            //     deposit: string;\n            // };\n            walletLayer2 = Reflect.ownKeys(userBalances).reduce((prev,item)=>{\n                // @ts-ignore\n                return   {...prev, [ idIndex[item] ]:userBalances[Number(item)]}\n            },{} as WalletLayer2Map<R>)\n        }\n    }\n\n    return {walletLayer2}\n};\nexport function* getPostsSaga() {\n    try {\n        //\n        const {walletLayer2} = yield call(getWalletLayer2Balance);\n        yield put(getWalletLayer2Status({walletLayer2}));\n    } catch (err) {\n        yield put(getWalletLayer2Status(err));\n    }\n}\n\nexport function* walletLayer2Saga() {\n    yield all([takeLatest(updateWalletLayer2, getPostsSaga)]);\n}\n// export function* walletLayer2Saga() {\n//     yield all([takeLatest(updateWalletLayer2, getPostsSaga)]);\n// }\n\n\nexport const walletLayer2Fork = [\n    fork(walletLayer2Saga),\n    // fork(tokenPairsSaga),\n]\n\n","import { all, call, fork, put, takeLatest } from \"redux-saga/effects\"\nimport { getUserRewards, getUserRewardsStatus } from './reducer'\n\nimport store from '../index';\nimport { exchangeAPI, LoopringAPI } from '../apis/api';\nimport { updateRealTimeAmmMap } from '../Amm/AmmMap';\nimport { updateRealTimeObj } from '../system';\n\nconst getUserRewardsApi = async <R extends {[key:string]:any}>(list:Array<keyof R>)=> {\n\n    // const data:UserRewardsMap<R> = {}\n\n    // const userRewardss = await exchangeAPI().getUserRewards({market: list.join(',')})\n    const {accountId} = store.getState().account\n    let {__timer__} = store.getState().userRewardsMap;\n    \n    if(LoopringAPI.ammpoolAPI) {\n        __timer__ = ((__timer__) => {\n            if (__timer__ && __timer__ !== -1) {\n                clearInterval(__timer__);\n            }\n            return setTimeout(async () => {\n                store.dispatch(getUserRewards(undefined))\n            }, 300000 * 4)   //\n\n        })(__timer__);\n        return  LoopringAPI.ammpoolAPI.getAmmPoolUserRewards({owner:accountId}).then(({ammUserRewardMap}) => {\n            return {data:ammUserRewardMap,__timer__}\n        })\n\n\n    }else{\n        return  Promise.reject({data:undefined,__timer__})\n    }\n\n}\n\nexport function* getPostsSaga({payload}:any) {\n    try {\n        // @ts-ignore\n        // const { userRewardsKey,userRewardsKeys } = payload;\n        // console.log('getPostsSaga userRewardsKey',userRewardsKey, userRewardsKeys)\n        // if(userRewardsKey || (userRewardsKeys && userRewardsKeys.length)) {\n        const {data,__timer__}  = yield call(getUserRewardsApi);\n        yield put(getUserRewardsStatus({userRewardsMap:data,__timer__}));\n\n        // }else{\n        //     throw new CustomError(ErrorMap.NO_SDK);\n        // }\n    } catch (err) {\n        yield put(getUserRewardsStatus(err));\n    }\n}\n\nfunction* userRewardsSaga() {\n    yield all([takeLatest(getUserRewards, getPostsSaga)]);\n}\n\nexport const userRewardsForks = [\n    fork(userRewardsSaga),\n    // fork(userRewardssSaga),\n]\n ","import { all, call, fork, put, takeLatest } from 'redux-saga/effects';\nimport { getSocketStatus, sendNewMessage, socketEnd } from './reducer'\nimport {\n    socketClose, socketSendMessage,\n} from '../../services/socketUtil';\nimport store from '../index';\nexport function* closeSocket(){\n    try {\n        yield call(socketClose)\n        yield put(getSocketStatus(undefined));\n        //TODO check wallect store\n    } catch (err) {\n        yield put(getSocketStatus(err));\n    }\n}\nexport function* sendMessage({payload}: any){\n    try {\n        const { chainId } = store.getState().system;\n        const { apiKey } = store.getState().account;\n        const socket = payload;\n        // @ts-ignore\n        yield call(socketSendMessage, { chainId, socket, apiKey })\n        yield put(getSocketStatus(undefined));\n        //TODO check wallet store\n    } catch (err) {\n        yield put(getSocketStatus(err));\n    }\n}\n\nfunction* socketEndSaga(){\n    yield all([takeLatest(socketEnd, closeSocket)]);\n}\n// function* socketSaga() {\n//     yield all([takeLatest(socketStart, startSocket)]);\n// }\nfunction* socketSendMessageSaga() {\n    yield all([takeLatest(sendNewMessage, sendMessage)]);\n}\n\n\n\nexport const socketForks = [\n    // fork(socketSaga),\n    fork(socketEndSaga),\n    fork(socketSendMessageSaga),\n //   fork(initConfig),\n]\n\n\n\n","import { all } from \"redux-saga/effects\"\n// import machine from \"../state_machine/fsm/machine\"\n// import { TRANSITION } from \"../state_machine/fsm/actionTypes\"\n// import { helloSaga } from \"./sagas\"\nimport { tokenSaga } from './token/saga';\nimport { ammForks } from './Amm';\nimport { tickerForks } from './ticker/saga';\nimport { systemForks } from './system/saga';\nimport { walletLayer1Fork } from './walletLayer1/saga';\nimport { walletLayer2Fork } from './walletLayer2/saga';\nimport { userRewardsForks } from './userRewards/saga';\nimport { socketForks } from './socket/saga';\n\n\n// https://css-tricks.com/finite-state-machines-with-react/\n// https://musing-rosalind-2ce8e7.netlify.com/?machine=%7B%22initial%22%3A%22initial%22%2C%22states%22%3A%7B%22initial%22%3A%7B%22on%22%3A%7B%22LOGIN%22%3A%22loggedIn%22%2C%22LOGOUT%22%3A%22loggedOut%22%7D%7D%2C%22loggedOut%22%3A%7B%22on%22%3A%7B%22SUBMIT%22%3A%22loading%22%7D%7D%2C%22loading%22%3A%7B%22on%22%3A%7B%22SUCCESS%22%3A%22loggedIn%22%2C%22FAIL%22%3A%22loggedOut%22%7D%7D%2C%22loggedIn%22%3A%7B%22onEntry%22%3A%5B%22SET_TOKEN%22%5D%2C%22onExit%22%3A%5B%22CLEAR_TOKEN%22%5D%2C%22on%22%3A%7B%22LOGOUT%22%3A%22loggedOut%22%7D%7D%7D%7D\n\n// function* machineHandler(event: any, action: any) {\n//\n//   // @ts-ignore\n//   const currentAppState = yield select((state) => { state.account.status })\n//   const nextAppState = machine.transition(currentAppState, event)\n//\n//   yield put({\n//     type: \"APP_STATE/\" + nextAppState.value,\n//     payload: {\n//       value: nextAppState.value\n//     }\n//   });\n//\n//   console.debug(\"-> from \" + currentAppState + \" to \" + nextAppState);\n//\n//   for (let i = 0; i < nextAppState.actions.length; i++) {\n//     yield put({\n//       type: nextAppState.actions[i],\n//       payload: action\n//     });\n//   }\n// }\n\n// function* watchTransition() {\n//   yield takeEvery(TRANSITION, function*(action: any) {\n//     yield machineHandler(action.event, action.payload);\n//   });\n// }\n\nfunction* mySaga() {\n    yield all([\n        // fork(helloSaga),\n        // fork(watchTransition),\n        ...tokenSaga,\n        ...walletLayer1Fork,\n        ...walletLayer2Fork,\n        ...systemForks,\n        ...ammForks,\n        ...tickerForks,\n        ...userRewardsForks,\n        ...socketForks,\n\n    ]);\n}\n\nexport default mySaga;\n","import { configureStore, combineReducers, getDefaultMiddleware } from '@reduxjs/toolkit'\n\nimport { useDispatch } from 'react-redux'\nimport { save, load } from 'redux-localstorage-simple'\n\nimport createSagaMiddleware from 'redux-saga'\n\n// We'll use redux-logger just as an example of adding another middleware\nimport logger from 'redux-logger'\n\n// And use redux-batch as an example of adding enhancers\nimport { reduxBatch } from '@manaflair/redux-batch'\nimport { updateVersion } from './global/actions'\n\nimport accountSlice from './account/reducer'\nimport tradingSlice from './trading/reducer'\nimport transactionlice from './transactions/reducer'\n\n\nimport { modalsSlice, setLanguage, settingsSlice } from '@loopring-web/component-lib';\nimport { ammReducer } from './Amm';\nimport { tokenMapSlice } from './token';\nimport mySaga from './rootSaga';\nimport { tickerMapSlice } from './ticker';\nimport { systemSlice } from './system';\nimport { walletLayer1Slice } from './walletLayer1';\nimport { walletLayer2Slice } from './walletLayer2';\nimport { socketSlice } from './socket';\nimport { userRewardsMapSlice } from './userRewards';\n\nconst sagaMiddleware = createSagaMiddleware()\n\nconst reducer = combineReducers({\n  account: accountSlice.reducer,\n  socket: socketSlice.reducer,\n  settings: settingsSlice.reducer,\n  system: systemSlice.reducer,\n  trading: tradingSlice.reducer,\n  transactions: transactionlice.reducer,\n  modals: modalsSlice.reducer,\n  userRewardsMap: userRewardsMapSlice.reducer,\n  amm:ammReducer,\n  tokenMap: tokenMapSlice.reducer,\n  walletLayer2: walletLayer2Slice.reducer,\n  walletLayer1: walletLayer1Slice.reducer,\n  tickerMap: tickerMapSlice.reducer\n})\n\n//\n\nconst PERSISTED_KEYS: string[] = ['settings']\n\nconst store = configureStore({\n  reducer,\n  // middleware: (getDefaultMiddleware) => getDefaultMiddleware().concat(logger),\n  middleware: [...getDefaultMiddleware({ thunk: false,serializableCheck:false, }), save({ states: PERSISTED_KEYS }), sagaMiddleware, ],\n  // middleware: [...getDefaultMiddleware({ thunk: true }), ],\n  devTools: process.env.NODE_ENV !== 'production',\n  enhancers: [reduxBatch],\n  preloadedState: load({ states: PERSISTED_KEYS })\n})\nstore.dispatch(updateVersion())\nstore.dispatch(setLanguage(store.getState().settings.language))\n// @ts-ignore\nsagaMiddleware.run(mySaga, store.dispatch);\n\n// The store has been created with these options:\n// - The slice reducers were automatically passed to combineReducers()\n// - redux-thunk and redux-logger were added as middleware\n// - The Redux DevTools Extension is disabled for production\n// - The middleware, batch, and devtools enhancers were composed together\n\nexport type AppDispatch = typeof store.dispatch\nexport const useAppDispatch = () => useDispatch<AppDispatch>()\n\nexport type RootState = ReturnType<typeof reducer>\n\nexport default store\n","export enum STATUS {\n    UNSET='UNSET',\n    PENDING='PENDING',\n    ERROR='ERROR',   // success failed timeout is Done\n    DONE='DONE',   // success failed timeout is Done\n}\n","import {\n    ChainId,\n    getAccountArg,\n    getAmmpoolArg,\n    getCandlestickArg,\n    getOrderArg,\n    getOrderBookArg,\n    getTickerArg,\n    getTradeArg,\n    WsTopicType\n} from 'loopring-sdk';\nimport { LoopringAPI } from '../stores/apis/api';\nimport store from '../stores';\nimport { updateSocketURL } from '../stores/system';\nimport { tickerService } from './tickerService';\nimport { ammPoolService } from './ammPoolService';\nimport { CustomError, ErrorMap } from '@loopring-web/component-lib/static-resource';\n\nexport type socketEventMap = { fn: (e: MessageEvent, props?: { [ key: string ]: any }) => any, deps?: any[] }\n\nexport enum SocketEventType {\n    pingpong = 'pingpong',\n    account = \"account\",\n    order = \"order\",\n    orderbook = \"orderbook\",\n    trade = \"trade\",\n    ticker = \"ticker\",\n    candlestick = \"candlestick\",\n    ammpool = \"ammpool\"\n}\n\n\nexport type SocketEventMap = {\n    [key in WsTopicType]: socketEventMap\n}\n\nconst pingPong = {\n    fn: (e: MessageEvent) => {\n        if (e.data === 'ping') {\n            // @ts-ignore\n            global.looperingSocket.send('pong')\n        }\n    }\n}\n\n//@ts-ignore\nwindow.socketEventMap = {\n    [ SocketEventType.pingpong ]: pingPong\n} as SocketEventMap;\n\nexport const addSocketEvents = (key: string, event: socketEventMap) => {\n    // @ts-ignore\n    window.socketEventMap = {\n        // @ts-ignore\n        ...window.socketEventMap,\n        [ key ]: event\n    }\n}\nexport const removeSocketEvents = (key: string) => {\n    // @ts-ignore\n    if (window.socketEventMap && window.socketEventMap[ key ]) {\n        // @ts-ignore\n        delete window.socketEventMap[ key ]\n    }\n}\nexport const resetSocketEvents = () => {\n    // @ts-ignore\n    window.socketEventMap = {\n        [ SocketEventType.pingpong ]: pingPong\n    }\n}\n\nexport const isConnectSocket = () => {\n    const global: Window = window || globalThis;\n    // @ts-ignore\n    if (global.looperingSocket && global.looperingSocket.send) {\n        return true;\n    } else {\n        return false\n    }\n}\nexport const socketClose = async () => {\n    const global = window || globalThis;\n    // @ts-ignore\n    let ws: WebSocket | undefined = global.loopringSocket;\n\n    return new Promise((reolve, reject) => {\n        if (ws) {\n            ws.onclose = function (e) {\n                reolve(`Socket is closed, ${e.reason}`)\n            };\n            ws.close();\n        } else {\n            Promise.resolve('no websocket')\n        }\n    })\n}\nconst makeTopics = (topics: any, apiKey?: string) => {\n    let data: any = {\n        op: 'sub',\n        unsubscribeAll: 'true',\n        topics: topics,\n    }\n\n    if (apiKey) {\n        data.apiKey = apiKey\n    }\n    // console.log('Socket>>Socket',JSON.stringify(data));\n    return JSON.stringify(data)\n    // sendMessage(flat_txt)\n}\nexport const clearInitTimer = (init?: boolean) => {\n    const global: any = window || globalThis;\n\n    if (global.__wsTimer__) {\n        if (global.__wsTimer__.timer && global.__wsTimer__.timer !== -1) {\n            clearTimeout(global.__wsTimer__.timer)\n        }\n        global.__wsTimer__.timer = -1\n        global.__wsTimer__.count++;\n    }\n    if (init) {\n        global.__wsTimer__ = {\n            //...global.__wsTimer__,\n            timer: -1,\n            count: 0\n        }\n    }\n}\nexport const socketConnect = async ({chainId, topics, apiKey}: {\n    chainId: ChainId | 'unknown',\n    topics: any[],\n    apiKey?: string\n}) => {\n    try {\n        if (chainId !== 'unknown' && LoopringAPI.wsAPI && topics) {\n            const url = ChainId.MAINNET === chainId ? process.env.REACT_APP_API_URL : process.env.REACT_APP_API_URL_UAT;\n            const {wsKey} = await LoopringAPI.wsAPI.getWsKey();\n            let baseSocket: string = `wss://ws.${url}/v3/ws?wsApiKey=${wsKey}`;\n            // debugger\n            store.dispatch(updateSocketURL({socketURL: baseSocket}));\n            const global: any = window || globalThis;\n            console.log(baseSocket)\n            // debugger\n            //clearInitTimer()\n            let ws: WebSocket;\n            ws = new WebSocket(baseSocket);\n            // @ts-ignore\n            global.looperingSocket = ws;\n            ws.onopen = function () {\n                console.log('Socket>>Socket', \"WebSocket is open now.\");\n                // @ts-ignore\n                ws.send(makeTopics(topics))\n            };\n            ws.onmessage = function (e) {\n                console.log('Socket>>Socket', 'Message:', e.data);\n                const {data} = e;\n                // data.topic.topic;\n                if (data === 'ping') {\n                    // @ts-ignore\n                    window.socketEventMap.pingpong.fn.call(window.socketEventMap.pingpong.deps, e);\n                } else {\n                    const result = JSON.parse(data);\n                    const {topics, topic} = result;\n                    if (topics) {\n                        console.log('Socket>>Socket topics', topics);\n                        // topics.map(topic=>{\n                        //\n                        // })\n                    }\n                    if (topic && topic.topic) {\n                        debugger\n                        console.log('Socket>>Socket', topic.topic);\n                    }\n\n                }\n                return false;\n            };\n            ws.onclose = async function (e) {\n                // @ts-ignore\n                console.log('Socket>>Socket', e);\n                if (global.looperingSocket) {\n                    global.looperingSocket = undefined;\n                }\n                console.log('Socket>>Socket', 'Socket is closed. Reconnect will be attempted in 1 second.', e.reason);\n                clearInitTimer()\n                if (global.__wsTimer__.count < 5) {\n                    global.__wsTimer__.timer = setTimeout(function () {\n                        socketConnect.call(global, {chainId, topics, apiKey});\n                    }, 1000 * global.__wsTimer__.count);\n                }\n            };\n            ws.onerror = function (err: Event) {\n                console.error('Socket>>Socket', 'Socket encountered error:', 'Closing socket');\n\n\n            };\n\n        }\n    } catch (error) {\n        console.log('Socket>>Socket', 'connect error, not from reconnect')\n\n        // @ts-ignore\n        if (global.looperingSocket) {\n            // @ts-ignore\n            // global.looperingSocket.onclose = () => {\n            //     // @ts-ignore\n            //     if (global.looperingSocket) {\n            //         console.log('Socket>>Socket', 'clear prev socket');\n            //         // @ts-ignore\n            //         global.looperingSocket = undefined;\n            //     }\n            // };\n            // debugger\n            // @ts-ignore\n            global.looperingSocket.close()\n        }\n\n\n    }\n}\n//export async function\nexport const socketSendMessage = async ({socket, chainId, apiKey}: {\n    chainId: ChainId | 'unknown',\n    socket: { [ key: string ]: string[] }\n    apiKey?: string\n}): Promise<boolean> => {\n    try {\n        if (socket && Reflect.ownKeys(socket).length) {\n            //register ping pong event\n            clearInitTimer(true);\n            resetSocketEvents();\n            const {topics} = makeMessageArray({socket});\n            //TODO Debugger\n            const debug: any[] = [topics[ 0 ]];\n\n            if (!isConnectSocket()) {\n                await socketConnect({chainId, topics: debug, apiKey})\n\n            } else {\n                const global: Window = window || globalThis;\n                // @ts-ignore\n                global.looperingSocket.send(makeTopics(topics))\n\n            }\n            return true\n        } else {\n            if (!isConnectSocket()) {\n                socketClose();\n            }\n            return false\n        }\n    } catch (error) {\n        throw  new CustomError(ErrorMap.SOCKET_ERROR)\n    }\n\n}\n\n\nexport const makeMessageArray = ({socket}: { socket: { [ key: string ]: string[] } }): {\n    topics: any[]\n} => {\n    let topics: any[] = [], list = []; // let registerDispatch = [];\n    Reflect.ownKeys(socket).forEach((eventType) => {\n        switch (eventType) {\n            case  SocketEventType.account:\n                list = socket[ SocketEventType.account ].map(key => getAccountArg());\n                if (list && list.length) {\n                    makeReceiveMessageCallback(SocketEventType.account)\n                    topics = [...topics, ...list];\n                }\n                break;\n            case  SocketEventType.order:\n                list = socket[ SocketEventType.order ].map(key => getOrderArg(key))\n                if (list && list.length) {\n                    makeReceiveMessageCallback(SocketEventType.order)\n                    topics = [...topics, ...list];\n                }\n                break\n            case  SocketEventType.orderbook:\n                list = socket[ SocketEventType.orderbook ].map(key => getOrderBookArg(key, 0))\n                if (list && list.length) {\n                    makeReceiveMessageCallback(SocketEventType.orderbook)\n                    topics = [...topics, ...list];\n                }\n                break\n            case  SocketEventType.trade:\n                list = socket[ SocketEventType.trade ].map(key => getTradeArg(key))\n                if (list && list.length) {\n                    makeReceiveMessageCallback(SocketEventType.trade)\n                    topics = [...topics, ...list];\n                }\n                break\n            case  SocketEventType.ticker:\n                list = socket[ SocketEventType.ticker ].map(key => getTickerArg(key))\n                if (list && list.length) {\n                    makeReceiveMessageCallback(SocketEventType.ticker)\n                    topics = [...topics, ...list];\n                }\n                break\n            case  SocketEventType.candlestick:\n                list = socket[ SocketEventType.candlestick ].map(key => getCandlestickArg(key))\n                if (list && list.length) {\n                    makeReceiveMessageCallback(SocketEventType.candlestick)\n                    topics = [...topics, ...list];\n                }\n                break\n            case  SocketEventType.ammpool:\n                list = socket[ SocketEventType.ammpool ].map(key => getAmmpoolArg(key))\n                if (list && list.length) {\n                    makeReceiveMessageCallback(SocketEventType.ammpool)\n                    topics = [...topics, ...list];\n                }\n                break\n        }\n    })\n    return {topics}\n}\nconst SocketEventMap = {\n    // PING_PONG : (e)=>{\n    //\n    // },\n    [ SocketEventType.account ]: (_e: any) => {\n\n    },\n    [ SocketEventType.order ]: (_e: any) => {\n\n    },\n    [ SocketEventType.orderbook ]: (_e: any) => {\n\n    },\n    [ SocketEventType.trade ]: (_e: any) => {\n\n    },\n    [ SocketEventType.ticker ]: (data: string[]) => {\n        const [market, timestamp, size, volume, open, high, low, close, count, bid, ask] = data;\n        // @ts-ignore\n        tickerService.sendTicker({market, timestamp, size, volume, open, high, low, close, count, bid, ask})\n    },\n    [ SocketEventType.candlestick ]: (_e: any) => {\n\n    },\n    [ SocketEventType.ammpool ]: (data: string[]) => {\n        // const [market,timestamp,size,volume,open,high,low,close,count,bid,ask] = data;\n        // @ts-ignore\n        const [poolName, poolAddress, pooled, [tokenId, volume], risky] = data;\n        // @ts-ignore\n        ammPoolService.sendAmmPool({poolName, poolAddress, pooled, lp: {tokenId, volume}, risky})\n    },\n}\n\n\nexport const makeReceiveMessageCallback = (type: keyof typeof SocketEventType) => {\n\n\n    addSocketEvents(type, {\n        // @ts-ignore\n        fn: SocketEventMap [ type ]\n    })\n}\n\n\n\n\n\n","import { Trans, useTranslation } from 'react-i18next';\nimport { Box, Container, Link, Typography } from '@material-ui/core';\nimport styled from '@emotion/styled';\nimport { ErrorObject } from '@loopring-web/component-lib/src/static-resource';\nimport { getContactInfo } from '../../utils/dt_tools';\n\nconst StyleBox = styled(Box)`\n  background-image: url('./static/images/error_bg.png');\n  background-repeat: no-repeat;\n  background-size: contain;\n  background-position: bottom;\n  white-space: pre-wrap;\n  //h2{\n  //  position: relative;\n  //}\n` as typeof Box\n\nexport const ErrorPage = ({messageKey}: ErrorObject) => {\n    // const {messageKey}: { id?:string,messageKey:string } = {messageKey: 'errorMessageTokenMapIsEmpty'};\n    //TODO: checkRouter\n    const {t} = useTranslation('error');\n    const message = `labelConnectUs`;\n    return <>\n        <Container>\n            {/*style={{height: '100%' }}*/}\n            <StyleBox flex={1} display={'flex'} alignItems={'flex-start'} justifyContent={'center'}\n                      flexDirection={'column'} marginTop={4} height={680} maxWidth={1200}>\n                {/*<StyleBox>*/}\n                <Box textAlign={'center'} position={'relative'} left={128} top={-64}>\n                    <Typography component={'h2'} variant={'h2'}>\n                        {t(messageKey)}\n                    </Typography>\n                    <Typography marginY={2} component={'p'} variant={'body1'} color={'textSecondary'}>\n                        <Trans i18nKey={message}>\n                            If you believe this is indeed a bug, please <Link\n                            component={'a'}\n                            onClick={(e) => {\n                                window.location.href = getContactInfo();\n                                e.preventDefault();\n                            }}\n                        >contact us</Link> <br/> We would appreciate your feedback\n\n                        </Trans>\n                        {/*{t(message)}*/}\n                        {/*{t(messageKey)}*/}\n                    </Typography>\n                </Box>\n                {/*</StyleBox>*/}\n            </StyleBox>\n        </Container>\n\n        {/*<Footer></Footer>*/}\n    </>\n}\n","// import { i18nInstance as i18n  } from \"@loopring-web/component-lib/static-resource\"\nimport i18n from 'i18next';\n\nconst covertLocale = (rawLocale: string = i18n.language) => {\n    return rawLocale.replace('_', '-')\n}\n\nexport function getLocaleDtFromTs(ts: number | string, locale: string = i18n.language) {\n    if (typeof(ts) === 'string') {\n        ts = parseInt(ts)\n    }\n    const dt = new Date(ts).toLocaleString(covertLocale(locale))\n    return dt\n}\n\nexport function getLocaleDt(dt?: Date, locale: string = i18n.language) {\n    if (dt) {\n        return dt.toLocaleString(covertLocale(locale))\n    }\n    return ''\n}\n\nexport function getContactInfo(subject: string = 'report to loopring website', body: string ='Body Content') {\n    const email = process.env.CONTACT_US_EMAIL ?? 'contact@loopring.io'\n    return `mailto:${email}?subject=${subject}&body=${body}`\n}\n","import { WsAPI, ExchangeAPI, AmmpoolAPI, UserAPI, DEFAULT_TIMEOUT, } from 'loopring-sdk'\nimport store, { RootState } from 'stores'\nimport { useSelector } from 'react-redux'\n\nimport { useMemo } from 'react'\n\nfunction useApi(ApiClass: any, timeout = DEFAULT_TIMEOUT) {\n    // const chainId = store.getState().trading.chainId\n    // return new ApiClass(chainId, timeout)\n\n  const { chainId, } = useSelector((state: RootState) => state.trading)\n\n  const genApi = () => {\n      if (!chainId) {\n          return undefined\n      }\n\n      return new ApiClass(chainId, timeout)\n  }\n\n  const api = useMemo(genApi, [ApiClass, chainId, timeout])\n\n  return api\n}\n\nexport function useWsAPI() {\n    return useApi(WsAPI) as WsAPI\n}\n\nexport function useExchangeAPI() {\n    return useApi(ExchangeAPI) as ExchangeAPI\n}\n\nexport function useAmmpoolAPI() {\n    return useApi(AmmpoolAPI) as AmmpoolAPI\n}\n\nexport function useUserAPI() {\n    return useApi(UserAPI) as UserAPI\n}\n","import { Subject } from 'rxjs';\nimport { TradeFloat } from '@loopring-web/component-lib/src/static-resource';\n\nconst subject = new Subject();\n\nexport type TickerMap<R> = {\n    [key in keyof R]:TradeFloat\n}\n// <R extends {[key:string]:any}>\n\nexport const tickerService = {\n    sendTicker: (tickerMap:TickerMap<{[key:string]:any}>) => subject.next({ tickerMap: tickerMap }),\n    // clearMessages: () => subject.next(),\n    onSocket: () => subject.asObservable()\n};","import { Subject } from 'rxjs';\nimport { TradeFloat } from '@loopring-web/component-lib/src/static-resource';\n\nconst subject = new Subject();\n\nexport type AmmPoolMap<R> = {\n    [key in keyof R]:TradeFloat\n}\n// <R extends {[key:string]:any}>\n\nexport const ammPoolService = {\n    sendAmmPool: (ammPoolMap:AmmPoolMap<{[key:string]:any}>) => subject.next({ ammPoolMap: ammPoolMap }),\n    // clearMessages: () => subject.next(),\n    onSocket: () => subject.asObservable()\n};","import React from 'react';\nimport { useAmmMap } from '../../../stores/Amm/AmmMap';\nimport { AmmDetail, CustomError, ErrorMap, } from '@loopring-web/component-lib/src/static-resource';\nimport { deepClone } from '../../../utils/obj_tools';\nimport { STATUS } from '../../../stores/constant';\nimport { useTokenMap } from '../../../stores/token';\nimport { useSocket } from '../../../stores/socket';\nimport { useTicker } from '../../../stores/ticker';\n\nexport function useAmmMapUI<R extends { [ key: string ]: any }, I extends { [ key: string ]: any }>({pageSize}: { pageSize: number }) {\n    const [rawData, setRawData] = React.useState<Array<AmmDetail<any>> | []>([]);\n    const [page, setPage] = React.useState<number>(1);\n    // const [keys, setKeys] = React.useState<string[]>([]);\n    const [timestamp, setTimestamp ] = React.useState<NodeJS.Timer|-1>(-1)\n    const {coinMap} = useTokenMap();\n    const {\n        ammMap,\n        status: ammMapStatus,\n        // errorMessage: errorAmmMap,\n        statusUnset: ammMapStatusUnset,\n        // updateAmmMap,\n    } = useAmmMap();\n    const {\n        tickerMap,\n        status: tickerStatus,\n        // errorMessage: errorTickerMap,\n        statusUnset: tickerStatusUnset,\n        updateTickers,\n    } = useTicker();\n    const {\n        status:socketStatus,\n        // errorMessage: errorTickerMap,\n        statusUnset: socketStatusUnset,\n    } = useSocket();\n    const updateRawData = React.useCallback( (tickerMap) => {\n        try {\n            const _ammMap = deepClone(ammMap);\n            for (let tickerMapKey in tickerMap) {\n                if(_ammMap['AMM-' + tickerMapKey ]){\n                    _ammMap['AMM-' + tickerMapKey ].tradeFloat =  {\n                        ..._ammMap['AMM-' + tickerMapKey ].tradeFloat,\n                        ...tickerMap[ tickerMapKey ],\n                        // APY: _ammMap['AMM-' + tickerMapKey ].APY\n                    }\n\n                }\n            }\n            setRawData(Object.keys(_ammMap).map((ammKey: string) => {\n                if (coinMap) {\n                    _ammMap[ ammKey ][ 'coinAInfo' ] = coinMap[ _ammMap[ ammKey ][ 'coinA' ] ];\n                    _ammMap[ ammKey ][ 'coinBInfo' ] = coinMap[ _ammMap[ ammKey ][ 'coinB' ] ];\n                }\n                return  _ammMap[ ammKey ];\n            }) )\n        } catch (error) {\n            throw new CustomError({...ErrorMap.NO_TOKEN_MAP, options: error})\n        }\n\n    } ,[ammMap]);\n    const updateTickerLoop =  React.useCallback((_keys?:string[])=>{\n\n        if(timestamp !== -1){\n            clearTimeout(timestamp)\n        }\n\n        setTimestamp(setTimeout(()=>{\n            updateTickerLoop(_keys);\n        },60000))\n        \n        //console.log(_keys)\n        setImmediate(updateTickers,_keys)\n    },[])\n\n    const updateTickersUI = React.useCallback((_page) => {\n        setPage(_page);\n        if (ammMap && Object.keys(ammMap).length > 0) {\n            const _keys = []\n            for (let i = (page - 1) * pageSize; i < Object.keys(ammMap).length && i < (page - 1) * pageSize + pageSize; i++) {\n                _keys.push(Object.keys(ammMap)[ i ]);\n            }\n            \n            // setKeys(_keys);\n            updateTickerLoop(_keys);\n            // try{\n            //    // socketStart({})\n            // }catch (error){\n            //\n            // }\n\n\n        }\n    }, [ammMap, pageSize]);\n    React.useEffect(() => {\n        if(ammMap && Object.keys(ammMap).length !== 0) {\n            updateTickersUI(page)\n        }\n    }, []);\n\n    // const subject = React.useMemo(() =>  tickerService.onSocket(),[]);\n    // React.useEffect(() => {\n    //     // if(ammMap && Object.keys(ammMap).length !== 0) {\n    //     //     updateTickersUI(page)\n    //     // }\n    //     const subscription = subject.subscribe(tickerMap => {\n    //         if (tickerMap) {\n    //           //  updateRawData(tickerMap);\n    //         } else {\n    //           //  updateTickers(keys);\n    //         }\n    //     });\n    //     return ()=> subscription.unsubscribe();\n    // }, [subject]);\n    // React.useEffect(() => {\n    //     switch (socketStatus) {\n    //         case \"ERROR\":\n    //             console.log(\"ERROR\", 'open websocket error get moment value from api ');\n    //             socketStatusUnset();\n    //             updateTickers(keys);\n    //             break;\n    //         default:\n    //             break;\n    //     }\n    // }, [socketStatus, socketStatusUnset]);\n\n    React.useEffect(() => {\n        switch (tickerStatus) {\n            case \"ERROR\":\n                console.log(\"ERROR\", 'get ticker error,ui');\n                tickerStatusUnset()\n                break;\n            case \"PENDING\":\n                break;\n            case \"DONE\":\n                tickerStatusUnset();\n                \n                updateRawData(tickerMap)\n                break;\n            default:\n                break;\n        }\n    }, [tickerStatus, tickerStatusUnset]);\n\n    React.useEffect(() => {\n        switch (ammMapStatus) {\n            case \"ERROR\":\n                console.log(\"ERROR\", 'get ammMap error,ui');\n                ammMapStatusUnset();\n                break;\n            case STATUS.PENDING:\n                console.log(\"PENDING\", 'get ammMap error,ui');\n                break;\n            case STATUS.DONE:\n                ammMapStatusUnset();\n                updateTickersUI(1)\n                break;\n            default :\n                break;\n        }\n    }, [ammMapStatus, ammMapStatusUnset, updateTickersUI]);\n\n\n\n    return {\n        page,\n        rawData,\n        updateTickersUI,\n    }\n}\n\n","import store from '../../stores';\nimport { toBig } from 'loopring-sdk';\nimport { BIG10 } from '../../defs/swap_defs';\nimport BigNumber from 'bignumber.js';\n\nexport const volumeToCount = (symbol:string,volumn:string|number|BigNumber,tokenMap= store.getState().tokenMap.tokenMap):number|undefined =>{\n   const result =  volumeToCountAsBigNumber(symbol,volumn,tokenMap);\n   return result? result.toNumber():undefined;\n}\nexport const volumeToCountAsBigNumber = (symbol:string,volumn:string|number|BigNumber,tokenMap= store.getState().tokenMap.tokenMap):BigNumber|undefined =>{\n    if(tokenMap && tokenMap[symbol] && typeof volumn !== 'undefined'){\n        try{\n            return toBig(volumn).div( BIG10.pow(tokenMap[symbol].decimals))\n        }catch (error){\n            throw error;\n        }\n    }else{\n        return undefined;\n    }\n}","import React  from 'react';\nimport detectEthereumProvider from '@metamask/detect-provider';\nimport { useCustomDCEffect } from 'hooks/common/useCustomDCEffect';\nimport { useSystem } from './stores/system';\nimport { ChainId } from 'loopring-sdk';\nimport { useAmmMap } from './stores/Amm/AmmMap';\nimport { STATUS } from './stores/constant';\nimport { useTokenMap } from './stores/token';\nimport { useWalletLayer1 } from './stores/walletLayer1';\nimport { useAccount } from './stores/account/hook';\n\n\n/**\n * @description call it when bootstrap the page or change the network\n */\nexport function useInit(){\n    const [state,setState] = React.useState<keyof typeof STATUS>('PENDING')\n    const systemState = useSystem();\n    const tokenState = useTokenMap();\n    const ammMapState = useAmmMap();\n    const accountState  = useAccount();\n    const walletLayer1State  =  useWalletLayer1()\n    //store.getState().account\n    // const socketState =   useSocket();\n\n    useCustomDCEffect(async() => {\n\n        const handleChainChanged = (chainId: any) => {\n    \n            // const network = chainId == ChainId.GORLI ? NETWORK.Goerli : NETWORK.MAIN\n             console.log('handleChainChanged chainId: ', chainId)\n             systemState.updateSystem({ chainId })\n             window.location.reload();\n        }\n\n        const provider: any = await detectEthereumProvider()\n        if (provider) {\n            const chainId = Number(await provider.request({ method: 'eth_chainId' }))\n    \n            provider.on('chainChanged', ()=>{handleChainChanged(chainId)} )\n            // @ts-ignore\n            systemState.updateSystem({ chainId  })\n           //handleChainChanged(chainId)\n            \n        } else {\n            systemState.updateSystem({chainId:ChainId.MAINNET})\n            console.log('web3 is not found')\n        }\n\n    }, [])\n\n    React.useEffect(() => {\n        switch (systemState.status) {\n            case \"ERROR\":\n                systemState.statusUnset();\n                setState('ERROR')\n                //TODO show error at button page show error  some retry dispat again\n                break;\n            case \"DONE\":\n                systemState.statusUnset();\n                //TODO do some static information update\n                //tokenState.updateTokenMap();\n                break;\n            default:\n                break;\n\n        }\n    },[\n        systemState,\n        // systemState.status,\n        // systemState.statusUnset,\n        //tokenState.updateTokenMap\n    ]);\n    React.useEffect(() => {\n        if(ammMapState.status ===\"ERROR\" || tokenState.status === \"ERROR\"){\n            //TODO: solve error\n            ammMapState.statusUnset();\n            tokenState.statusUnset();\n            setState('ERROR');\n        }else if(ammMapState.status ===\"DONE\" && tokenState.status === \"DONE\"){\n            ammMapState.statusUnset();\n            tokenState.statusUnset();\n            if(accountState.accountId){\n                walletLayer1State.updateWalletLayer1()\n            }\n            setState('DONE');\n        }\n    },[ammMapState,tokenState,accountState.accountId,walletLayer1State])\n\n    // React.useEffect(()=>{\n    //\n    // },[])\n\n\n\n    return {\n        state,\n    }\n\n}\n","export enum Theme {\n    dark = 'dark',\n    light = 'light',\n}\n\nexport enum LangType {\n    en = 'en_US',\n    cn = 'zh_CN',\n}\n\nexport enum SystemStatus {\n    NORMAL,\n    ERROR,\n    UNKNOWN,\n}\n\nexport enum MODAL_TYPE {\n    UNKNOWN,\n    LOADING,\n    WALLET,\n}\n\nexport const REFRESH_RATE = 1000\n\nexport const REFRESH_RATE_SLOW = 15000\n","import { useCallback } from \"react\";\nimport { useDispatch } from \"react-redux\"\n\nimport {\n    setShowDeposit,\n    setShowResetAccount,\n    setShowTransfer,\n    setShowWithdraw,\n} from '@loopring-web/component-lib'\nimport { useTranslation } from \"react-i18next\";\nimport store from 'stores'\nimport { AccountStatus } from \"state_machine/account_machine_spec\";\n\nexport function useModals() {\n\n    const dispatch = useDispatch()\n\n    const { t } = useTranslation('common')\n\n    const ShowDeposit = useCallback((isShow: boolean)=>{\n        const isNoAccount = store.getState().account.status === AccountStatus.NOACCOUNT\n\n        console.log('isNoAccount: ', isNoAccount, t('depositTitleAndActive'))\n        const action = {\n            isShow,\n            props: {\n                title: isNoAccount ? t('depositTitleAndActive') : t('depositTitle'),\n                description: 'depositAndActiveDescription'\n            }\n        }\n        dispatch(setShowDeposit(action))\n    }, [dispatch, t])\n    const ShowTransfer = useCallback((isShow: boolean)=>dispatch(setShowTransfer({isShow})), [dispatch])\n    const ShowWithdraw = useCallback((isShow: boolean)=>dispatch(setShowWithdraw({isShow})), [dispatch])\n    const ShowResetAccount = useCallback((isShow: boolean)=>dispatch(setShowResetAccount({isShow})), [dispatch])\n\n    return {\n        ShowDeposit,\n        ShowTransfer,\n        ShowWithdraw,\n        ShowResetAccount,\n    }\n}","import { REFRESH_RATE } from \"defs/common_defs\"\n\nexport function PromiseJob(fetchPromise: any, setFunc: any, field?: string, prefix: any = 'PromiseJob') {\n\n    let mounted = true\n\n    const handler = () => {\n        if (fetchPromise()) {\n            fetchPromise().then((data: any) => {\n                if (mounted) {\n                    setFunc(field ? data[field] : data)\n                } else {\n                    console.log(prefix + ' unmounted!')\n                }\n            }).catch((reason: any) => {\n                console.error(reason)\n            })\n        }\n    }\n\n    const cleanUp = () => {\n        mounted = false\n    }\n\n    return {\n        handler,\n        cleanUp,\n    }\n\n}\n\n\nexport function PromiseJobInTimer(fetchPromise: any, setFunc: any, field?: string, prefix: any = 'PromiseJobInTimer', timeout: number = REFRESH_RATE) {\n\n    let mounted = true\n\n    const handler = () => {\n\n        mounted = true\n\n        const fetchFunc = () => {\n            if (fetchPromise()) {\n                fetchPromise().then((data: any) => {\n                    if (mounted) {\n                        setFunc(field ? data[field] : data)\n                    } else {\n                        console.log(prefix + ' unmounted!')\n                    }\n                }).catch((reason: any) => {\n                    console.error(reason)\n                })\n            }\n        }\n\n        fetchFunc()\n\n        const id = setInterval(fetchFunc, timeout)\n\n        return id\n    }\n\n    const cleanUp = (handler: any) => {\n        mounted = false\n        if (handler) clearInterval(handler)\n    }\n\n    return {\n        handler,\n        cleanUp,\n    }\n\n}\n","import { useEffect } from 'react'\nimport { PromiseJob, PromiseJobInTimer } from '../../utils/hook_tools'\nimport { REFRESH_RATE_SLOW } from \"defs/common_defs\"\n\nexport function usePromiseJob(fetchPromise: any, setFunc: any, field? :string, prefix: any = undefined, dependencies: any[] = []) {\n\n  const {\n    handler,\n    cleanUp,\n  } = PromiseJob(fetchPromise, setFunc, field, prefix)\n\n  useEffect(() => {\n    handler()\n    return () => cleanUp()\n  }, dependencies)\n\n}\n\nexport function usePromiseJobInTimer(fetchPromise: any, setFunc: any, field? :string, \n  prefix: any = undefined, dependencies: any[] = [], timeout: number= REFRESH_RATE_SLOW) {\n  const {\n    handler,\n    cleanUp,\n  } = PromiseJobInTimer(fetchPromise, setFunc, field, prefix, timeout)\n\n  useEffect(() => {\n\n    const id = handler()\n    return () => cleanUp(id)\n  }, dependencies)\n\n}\n","import { useState, } from 'react'\n\nimport { TradesData, TickerData, DepthData, \n  TokensResponse,\n  MarketsResponse, } from 'loopring-sdk'\n\nimport { usePromiseJob } from 'hooks/common/useCommon'\nimport { useExchangeAPI, } from './useApi'\n\nexport function useGetGas() {\n\n  const [gas, setGas] = useState<any>()\n\n  const api = useExchangeAPI()\n\n  const fetchData = () => {\n    if (!api) {\n      return undefined\n    }\n    return api.getGasPrice()\n  }\n\n  usePromiseJob(fetchData, setGas, undefined, 'useGetGas', [api])\n\n  return { gas }\n\n}\n\nexport function useGetMixMarkets() {\n\n  const [markets, setMarkets] = useState<MarketsResponse>()\n    const api = useExchangeAPI()\n\n    const fetchData = () => {\n      if (!api) {\n        return undefined\n      }\n      return api.getMixMarkets()\n    }\n  \n    usePromiseJob(fetchData, setMarkets, undefined, 'useGetMarkets', [api])\n    \n    return { markets }\n\n}\n\nexport function useGetMarkets() {\n\n  const [markets, setMarkets] = useState<MarketsResponse>()\n    const api = useExchangeAPI()\n\n    const fetchData = () => {\n      if (!api) {\n        return undefined\n      }\n      return api.getMarkets()\n    }\n  \n    usePromiseJob(fetchData, setMarkets, undefined, 'useGetMarkets', [api])\n    \n    return { markets }\n\n}\n\nexport function useGetExchangeInfo() {\n\n  const [exchangeInfo, setExchangeInfo] = useState<any>()\n    const api = useExchangeAPI()\n\n    const fetchData = () => {\n      if (!api) {\n        return undefined\n      }\n      return api.getExchangeInfo()\n    }\n  \n    usePromiseJob(fetchData, setExchangeInfo, 'exchangeInfo', 'useGetExchangeInfo', [api])\n    \n    return { exchangeInfo }\n\n}\n\nexport function useGetTokens() {\n\n  const [tokens, setTokens] = useState<TokensResponse>()\n    const api = useExchangeAPI()\n\n    const fetchData = () => {\n      if (!api) {\n        return undefined\n      }\n      return api.getTokens()\n    }\n  \n    usePromiseJob(fetchData, setTokens, undefined, 'useGetTokens', [api])\n    \n    return { tokens }\n\n}\n\n\nexport function useTrades(symbol: string) {\n\n  const [trades, setTrades] = useState<TradesData>()\n\n  const api = useExchangeAPI()\n\n  const fetchData = () => {\n    if (!api) {\n      return undefined\n    }\n    return api.getMarketTrades({\n      market: symbol\n    })\n  }\n\n  usePromiseJob(fetchData, setTrades, undefined, 'useTrades', [api, symbol])\n\n  return { trades, }\n\n}\n\nexport function useTickerMap(market: string) {\n\n  const [tickerMap, setTickerMap] = useState<{[key: string]: TickerData}>()\n\n  const api = useExchangeAPI()\n\n  const fetchData = () => {\n    if (!api) {\n      return undefined\n    }\n    return api.getTicker({\n      market\n    })\n  }\n\n  usePromiseJob(fetchData, setTickerMap, 'tickMap', 'useTickerMap', [api, market])\n\n  return { tickerMap, }\n\n}\n\nexport function useDepth(symbol: string) {\n\n  const api = useExchangeAPI()\n\n  const [depth, setDepth] = useState<DepthData>()\n\n    const fetchData = () => {\n      if (!api) {\n        return undefined\n      }\n      return api.getMixDepth({\n        market: symbol\n      })\n    }\n  \n    usePromiseJob(fetchData, setDepth, 'depth', 'useDepth', [api, symbol])\n\n  return { depth, }\n\n}\n","import React, { useCallback } from 'react'\n\nimport { useTranslation } from 'react-i18next'\n\nimport {\n    gatewayList as DefaultGatewayList,\n    headerMenuData, HeaderMenuTabStatus,\n    headerToolBarData, HeadMenuTabKey,\n    ButtonComponentsMap, LanguageKeys,\n    WalletStatus, HideIcon,\n    GatewayItem, ViewIcon, ThemeKeys, LockIcon, UnLockIcon,\n} from '@loopring-web/component-lib/src/static-resource'\n\nimport { useAccount, useUnlock, useConnect, } from 'stores/account/hook'\n\nimport { getShortAddr } from 'utils/web3_tools'\n\nimport { AccountStatus } from 'state_machine/account_machine_spec'\n\nimport { useCustomDCEffect } from 'hooks/common/useCustomDCEffect'\n\nimport { Theme, } from 'defs/common_defs'\n\nimport { Button, setShowDeposit, SwapProps, useOpenModals, useSettings } from '@loopring-web/component-lib'\n\nimport store from 'stores'\n\nimport { ConnectorNames, LoopringMap } from 'loopring-sdk'\nimport { Typography } from '@material-ui/core';\nimport { AccountInfoProps } from '@loopring-web/component-lib/components/block';\nimport { useEtherscan } from 'hooks/web3/useWeb3'\n\nimport { useModals } from 'hooks/modal/useModals'\n\nimport {useState } from 'react'\nimport Web3 from 'web3'\n\nimport { AmmData, AmmInData, IBData, TradeCalcData, WalletMap } from '@loopring-web/component-lib/static-resource'\nimport { AmmProps } from '@loopring-web/component-lib'\n\nimport {  useUserAPI } from 'hooks/exchange/useApi'\n\nimport { useWeb3Account } from 'stores/account/hook'\nimport { useGetExchangeInfo, useGetTokens } from 'hooks/exchange/useExchangeAPI'\n\nimport * as sdk from 'loopring-sdk'\n\n\nimport {\n    ExchangeAPI,\n    dumpError400,\n    GetNextStorageIdRequest,\n    GetOffchainFeeAmtRequest,\n    OffchainFeeReqType,\n    OffChainWithdrawalRequestV3,\n    OriginTransferRequestV3,\n    TokenInfo,\n    VALID_UNTIL,\n} from 'loopring-sdk'\n\nimport { useGetUserBalances } from 'hooks/exchange/useUserAPI'\n\nimport {\n    DepositProps,\n    ResetProps,\n    SwitchData,\n    TradeBtnStatus,\n    TransferProps,\n    WithdrawProps,\n} from '@loopring-web/component-lib'\n\nimport { WithdrawType, WithdrawTypes } from '@loopring-web/component-lib/src/static-resource'\nimport { CoinType } from '@loopring-web/component-lib/static'\nimport { useDispatch  } from 'react-redux'\nimport { makeWallet } from 'hooks/help'\nimport { useWalletLayer2 } from 'stores/walletLayer2'\nimport { useTokenMap } from 'stores/token'\nimport { LoopringAPI } from 'stores/apis/api'\nimport { BIG10 } from 'defs/swap_defs'\nimport { useWalletLayer1 } from '../../stores/walletLayer1';\n\nexport const useHeader = () => {\n    const { i18n,t } = useTranslation(['common','layout'])\n    const { setTheme,themeMode,language, setLanguage } = useSettings();\n    const { ShowDeposit } = useModals()\n    const { modals:{isShowAccountInfo,isShowConnect}, setShowConnect, setShowAccountInfo }  = useOpenModals()\n \n    const [openConnect, setOpenConnect] = React.useState(false)\n\n    const forceUpdate = React.useReducer((bool) => !bool, false)[1]\n    const { account } = useAccount()\n\n    const { lock, unlock } = useUnlock()\n\n    const { connect } = useConnect()\n\n    const { etherscanUrl } = useEtherscan()\n\n    const dispatch = useDispatch()\n\n    const gatewayList: GatewayItem[] = [\n        {\n            ...DefaultGatewayList[0],\n            handleSelect: () => {\n                console.log('try to connect to ', ConnectorNames.Injected)\n                connect(ConnectorNames.Injected, true)\n                setShowConnect({isShow: false})\n            }\n        },\n        {\n            ...DefaultGatewayList[1],\n            handleSelect: () => {\n                connect(ConnectorNames.WalletConnect, true)\n                setShowConnect({isShow: false})\n            }\n        },\n        {\n            ...DefaultGatewayList[2],\n            handleSelect: () => {\n                connect(ConnectorNames.Ledger, true)\n                setShowConnect({isShow: false})\n            }\n        },\n        {\n            ...DefaultGatewayList[3],\n            handleSelect: () => {\n                connect(ConnectorNames.Trezor, true)\n                setShowConnect({isShow: false})\n            }\n        },\n    ]\n    // const [showAccountInfo, setShowAccountInfo] = React.useState(account?.accAddr ? true : false)\n    const [accountInfoProps, setAccountInfoProps] = React.useState<undefined|AccountInfoProps>(undefined)\n    //const theme: any = useTheme()\n\n    const onNotification = React.useCallback(async () => {\n        console.log('onNotification click')\n    }, [])\n\n    const onWalletBtnConnect = React.useCallback(async () => {\n        const acc = store.getState().account\n        console.log(`onWalletBtnConnect click: ${acc.status}`)\n\n        switch (acc.status) {\n            case AccountStatus.UNCONNNECTED:\n                setShowConnect({isShow: true})\n                break\n                case AccountStatus.NOACCOUNT:\n            case AccountStatus.CONNECTED:\n            case AccountStatus.LOCKED:\n            case AccountStatus.ACTIVATED:\n                setShowAccountInfo({isShow: true})\n                break\n            default:\n                break\n        }\n    }, [setShowConnect, lock, unlock, ShowDeposit, setShowAccountInfo])\n\n    const onThemeBtnClick = React.useCallback(async (themeMode:ThemeKeys) => {\n        if (themeMode === Theme.dark) {\n            setTheme(Theme.light)\n        } else {\n            setTheme(Theme.dark)\n        }\n    }, [setTheme])\n\n    const onLangBtnClick = (lang: LanguageKeys) => {\n        setLanguage(lang);\n    }\n\n\n    useCustomDCEffect(() => {\n\n\n        headerToolBarData[ButtonComponentsMap.WalletConnect] = {\n            ...headerToolBarData[ButtonComponentsMap.WalletConnect],\n            handleClick: onWalletBtnConnect,\n        }\n\n        // headerToolBarData[ButtonComponentsMap.Notification] = { ...headerToolBarData[ButtonComponentsMap.Theme], themeMode: theme.mode, handleClick: onNotification }\n        // headerToolBarData.update(ButtonComponentsMap.WalletConnect,value=>{\n        //   return {...value, handleClick:onWalletBtnConnect}});\n        headerToolBarData[ButtonComponentsMap.Theme] = { ...headerToolBarData[ButtonComponentsMap.Theme], themeMode, handleClick: onThemeBtnClick }\n        // headerToolBarData.update(ButtonComponentsMap.Theme,value=>{\n        //   return {...value, themeMode:theme.mode, handleClick:onThemeBtnClick}});\n\n        headerToolBarData[ButtonComponentsMap.Language] = { ...headerToolBarData[ButtonComponentsMap.Language], handleChange: onLangBtnClick }\n        // headerToolBarData.update(ButtonComponentsMap.Language,value=>{\n        //  return  {...value, language:i18n.language, handleClick:onThemeBtnClick}});\n    }, [themeMode, language, i18n, onWalletBtnConnect, onThemeBtnClick, onLangBtnClick, onNotification, t]);\n\n    const UnlockBtn = ({onClick}:{onClick:({...props}:any)=>void})=>{\n        return <Button className={'unlock'}  startIcon={<LockIcon fontSize={'large'}/>}\n                       onClick={(event)=>{\n                           onClick(event)\n                       }} variant={'outlined'} >\n            <Typography variant={'body2'} marginTop={1/2}>   {t('labelUnLockLayer2')} </Typography>\n        </Button>\n    }\n\n    const lockCallback = React.useCallback((event)=>{\n        lock(account)\n    } ,[account])\n    const unLockCallback = React.useCallback((event)=>{\n        unlock(account)\n    } ,[account])\n\n    const LockBtn = ({onClick}:{onClick:({...props}:any)=>void})=>{\n        return  <Button className={'lock'}  startIcon={<UnLockIcon fontSize={'large'}/>} \n        onClick={(event) => {\n            onClick(event)\n        } } variant={'outlined'} >\n            <Typography variant={'body2'} marginTop={1/2}>  {t('labelLockLayer2')} </Typography>\n        </Button>\n    }\n\n    useCustomDCEffect(() => {\n\n        if (!account) {\n            console.log('account'+account+'* exit')\n            setAccountInfoProps(undefined)\n            return\n        }\n\n        const { status } = account\n\n        const addr = getShortAddr(account?.accAddr)\n\n        const updateHeaderMenuWhenHasAccountInfo =  ({status}:{status:keyof  typeof AccountStatus})=>{\n            headerMenuData[HeadMenuTabKey.Layer2] = {\n                ...headerMenuData[HeadMenuTabKey.Layer2],\n                status: HeaderMenuTabStatus.default\n            }\n            let props;\n            if(status === AccountStatus.ACTIVATED) {\n                props = {\n                    addressShort: addr?addr:'',\n                    address: account?.accAddr,\n                    level: 'VIP 1',\n                    etherscanLink: etherscanUrl + account?.accAddr,\n                    //TODO: changed by account status\n                    mainBtn: <LockBtn onClick={(_event)=>{lockCallback(_event)}}/>,\n                    connectBy:''\n                }\n                setShowAccountInfo({isShow:false})\n            }else if(status === AccountStatus.LOCKED) {\n                props = {\n                    addressShort: addr?addr:'',\n                    address: account?.accAddr,\n                    level: 'VIP 1',\n                    etherscanLink: etherscanUrl + account?.accAddr,\n                    //TODO: changed by account status\n                    mainBtn: <UnlockBtn onClick={(_event)=>{unLockCallback(_event)}}/>,\n                    connectBy:''\n                }\n                setShowAccountInfo({isShow:true})\n            }else if(status === AccountStatus.UNACTIVATED\n                || status === AccountStatus.NOACCOUNT\n                || status === AccountStatus.DEPOSITING\n                || status === AccountStatus.DEPOSIT_TO_CONFIREM\n                || status === AccountStatus.ARPROVING\n                || status === AccountStatus.APPROV_TO_CONFIRM\n            )  {\n                props = {\n                    addressShort: addr?addr:'',\n                    address: account?.accAddr,\n                    //TODO: level\n                    level: 'VIP 1',\n                    etherscanLink: etherscanUrl + account?.accAddr,\n                    //TODO: changed by account status\n                    connectBy:''\n                }\n                setShowAccountInfo({isShow:false});\n\n            } else  {\n                setShowAccountInfo({isShow:false})\n            }\n            \n            if(status === AccountStatus.NOACCOUNT)  {\n                (props as any).onLock = () => {\n                    setShowAccountInfo({isShow:false})\n                    ShowDeposit(true)\n                }\n            } \n\n            setAccountInfoProps(props)\n        }\n        switch (status) {\n            case AccountStatus.UNCONNNECTED:\n                headerToolBarData[ButtonComponentsMap.WalletConnect] = {\n                    ...headerToolBarData[ButtonComponentsMap.WalletConnect],\n                    label: t('labelConnectWallet'),\n                    status: WalletStatus.default\n                }\n                headerMenuData[HeadMenuTabKey.Layer2] = {\n                    //TODO:  HeaderMenuTabStatus.hidden\n                    ...headerMenuData[HeadMenuTabKey.Layer2], status: HeaderMenuTabStatus.hidden\n                }\n                setShowAccountInfo({isShow:false})\n                break\n            case AccountStatus.LOCKED:\n                headerToolBarData[ButtonComponentsMap.WalletConnect] = {\n                    ...headerToolBarData[ButtonComponentsMap.WalletConnect],\n                    label: addr,\n                    status: WalletStatus.connect\n                };\n\n                updateHeaderMenuWhenHasAccountInfo({status});\n                break\n            case AccountStatus.ACTIVATED:\n                headerToolBarData[ButtonComponentsMap.WalletConnect] = {\n                    ...headerToolBarData[ButtonComponentsMap.WalletConnect],\n                    label: addr,\n                    status: WalletStatus.unlock\n                }\n\n                updateHeaderMenuWhenHasAccountInfo({status});\n                break\n            case AccountStatus.UNACTIVATED:\n            case AccountStatus.NOACCOUNT:\n                headerToolBarData[ButtonComponentsMap.WalletConnect] = {\n                    ...headerToolBarData[ButtonComponentsMap.WalletConnect],\n                    // TODO got cache address if no show Connect Wallet\n                    label: addr,\n                    status: WalletStatus.noAccount\n                }\n\n                updateHeaderMenuWhenHasAccountInfo({status});\n                break\n            case AccountStatus.DEPOSITING:\n            case AccountStatus.DEPOSIT_TO_CONFIREM:\n            case AccountStatus.ARPROVING:\n            case AccountStatus.APPROV_TO_CONFIRM:\n                headerToolBarData[ButtonComponentsMap.WalletConnect] = {\n                    ...headerToolBarData[ButtonComponentsMap.WalletConnect],\n                    label: addr,\n                    status: WalletStatus.accountPending\n                }\n                updateHeaderMenuWhenHasAccountInfo({status});\n\n                break\n        }\n        forceUpdate()\n    }, [account, etherscanUrl, setAccountInfoProps])\n\n    return {\n        headerToolBarData,\n        headerMenuData,\n        gatewayList,\n        isShowConnect,\n        isShowAccountInfo,\n        setShowAccountInfo,\n        setShowConnect,\n        // open,\n        // setOpen,\n        // openConnect,\n        // setOpenConnect,\n        account,\n        accountInfoProps,\n\n    }\n\n}\n\nexport function useChargeFeeList(tokenSymbol: string | undefined, requestType: OffchainFeeReqType, \n    tokenMap: LoopringMap<TokenInfo> | undefined) {\n\n    const api = useUserAPI()\n\n    const {accountId, apiKey,} = useAccount()\n\n    const [chargeFeeList, setChargeFeeList] = useState<any>([])\n\n    useCustomDCEffect(async () => {\n\n        console.log('!!!!!!!!!useCustomDCEffect useChargeFeeList:', tokenSymbol, accountId)\n\n        if (!accountId || !tokenSymbol || !tokenMap) {\n            return\n        }\n\n        let chargeFeeList: any[] = []\n\n        try {\n\n            const request: GetOffchainFeeAmtRequest = {\n                accountId,\n                tokenSymbol,\n                requestType,\n            }\n\n            const response = await api.getOffchainFeeAmt(request, apiKey)\n\n            if (response) {\n                response.raw_data.fees.forEach((item: any, index: number) => {\n                    const tokenInfo = tokenMap[item.token]\n                    const fee = sdk.toBig(item.fee).div(BIG10.pow(sdk.toBig(tokenInfo.decimals))).toNumber() \n                    chargeFeeList.push({belong: item.token, fee, })\n                })\n\n                setChargeFeeList(chargeFeeList)\n            }\n            console.log('response:', response)\n\n        } catch (reason) {\n            dumpError400(reason)\n        }\n\n\n        setChargeFeeList(chargeFeeList)\n\n    }, [accountId, apiKey, tokenSymbol, tokenMap])\n\n    return {\n        chargeFeeList,\n    }\n\n}\n\nexport function useModalProps() {\n\n    const {\n        ShowDeposit,\n        ShowTransfer,\n        ShowWithdraw,\n        ShowResetAccount,\n    } = useModals()\n\n    const {chainId, isConnected, connector,} = useWeb3Account()\n\n    const {exchangeInfo} = useGetExchangeInfo()\n\n    const {account, apiKey, accountId, eddsaKey,} = useAccount()\n    \n    const {coinMap, tokenMap, marketArray, marketCoins, marketMap, } = useTokenMap()\n\n    const walletLayer2State = useWalletLayer2();\n    const walletLayer1State = useWalletLayer1();\n    const [walletMap1, setWalletMap1] = useState<WalletMap<any>|undefined>(undefined);\n    const [walletMap2, setWalletMap2] = useState<WalletMap<any>|undefined>(undefined);\n    //HIGH: effect by wallet state update\n    React.useEffect(() => {\n        if(walletLayer2State.walletLayer2){\n            let {walletMap} =  makeWallet();\n            setWalletMap1(walletMap)\n        }\n        if(walletLayer1State.walletLayer1){\n            // let {walletMap} =  makeWalletLayer1();\n            setWalletMap1(walletLayer1State.walletLayer1)\n        }\n    }, [])\n    React.useEffect(() => {\n        switch (walletLayer2State.status) {\n            case \"ERROR\":\n                walletLayer2State.statusUnset();\n                // setState('ERROR')\n                //TODO: show error at button page show error  some retry dispath again\n                break;\n            case \"DONE\":\n                walletLayer2State.statusUnset();\n                let {walletMap} =  makeWallet();\n                setWalletMap2(walletMap)\n                break;\n            default:\n                break;\n\n        }\n    }, [walletLayer2State.status])\n    React.useEffect(() => {\n        switch (walletLayer1State.status) {\n            case \"ERROR\":\n                walletLayer1State.statusUnset();\n                // setState('ERROR')\n                //TODO: show error at button page show error  some retry dispath again\n                break;\n            case \"DONE\":\n                walletLayer1State.statusUnset();\n                // let {walletMap} =  makeWalletLayer1();\n                setWalletMap1(walletLayer1State.walletLayer1);\n                // debugger\n                break;\n            default:\n                break;\n\n        }\n    }, [walletLayer1State.status])\n\n    const deposit = useCallback(async (token: string, amt: any) => {\n\n        if (!LoopringAPI.exchangeAPI || !tokenMap || !isConnected || !connector || !exchangeInfo?.exchangeAddress || !exchangeInfo?.depositAddress) {\n            console.log(`exchangeInfo:${exchangeInfo} deposit exit!!!!!`)\n            return\n        }\n\n        try {\n            const tokenInfo: TokenInfo = tokenMap[token]\n\n            const provider = await connector.getProvider()\n            const web3 = new Web3(provider as any)\n\n            let sendByMetaMask = account.connectName === ConnectorNames.Injected\n            console.log('sendByMetaMask:', sendByMetaMask)\n            sendByMetaMask = true\n\n            const gasPrice = store.getState().system.gasPrice ?? 30\n            const gasLimit = parseInt(tokenInfo.gasAmounts.deposit)\n\n            const nonce = await sdk.getNonce(web3, account.accAddr)\n\n            console.log('111 gasPrice:', gasPrice)\n            console.log('account.connectName:', account.connectName, ' tokenInfo:', tokenInfo)\n\n            const response = await sdk.approveMax(web3, account.accAddr, tokenInfo.address,\n                exchangeInfo?.depositAddress, gasPrice, gasLimit, chainId, nonce, sendByMetaMask)\n\n            console.log('response:', response)\n\n            const fee = 0\n\n            const response2 = await sdk.deposit(web3, account.accAddr,\n                exchangeInfo?.exchangeAddress, tokenInfo, amt, fee,\n                gasPrice, gasLimit, chainId, nonce + 1, sendByMetaMask)\n\n            console.log('response2:', response2)\n\n\n        } catch (reason) {\n            dumpError400(reason)\n        }\n\n    }, [chainId, isConnected, connector, account, tokenMap, exchangeInfo, LoopringAPI.exchangeAPI])\n\n    const withdraw = useCallback(async (token: string, amt: any) => {\n\n        console.log('withdraw apiKey:', apiKey, ' exchangeInfo:', exchangeInfo, ' exchangeAddr:', exchangeInfo.exchangeAddress)\n\n        if (!LoopringAPI.userAPI || !account || !account.accountId || !account.accAddr\n            || !connector || !chainId || !apiKey || !exchangeInfo\n            || !exchangeInfo.exchangeAddress) {\n            console.log('return directly!!!!!', account, connector, chainId, apiKey, exchangeInfo)\n            return\n        }\n\n        amt = '5500000000000000000'\n\n        const fee = '5500000000000000000'\n\n        console.log('exchangeAddress:', exchangeInfo.exchangeAddress)\n\n        try {\n\n            const request: GetNextStorageIdRequest = {\n                accountId: account.accountId,\n                sellTokenId: 1\n            }\n\n            const storageId = await LoopringAPI.userAPI.getNextStorageId(request, apiKey)\n\n            const request2: OffChainWithdrawalRequestV3 = {\n                exchange: exchangeInfo.exchangeAddress,\n                owner: account.accAddr,\n                to: account.accAddr,\n                accountId: account.accountId,\n                storageId: storageId.offchainId,\n                token: {\n                    tokenId: '1',\n                    volume: '100000000000000000000',\n                },\n                maxFee: {\n                    tokenId: '1',\n                    volume: '9400000000000000000',\n                },\n                extraData: '',\n                minGas: 0,\n                validUntil: VALID_UNTIL,\n            }\n\n            const provider = await connector.getProvider()\n            const web3 = new Web3(provider as any)\n\n            const response = await LoopringAPI.userAPI.submitOffchainWithdraw(request2, web3, chainId, ConnectorNames.Injected,\n                account.eddsaKey, apiKey, false)\n\n            console.log(response)\n\n        } catch (reason) {\n            dumpError400(reason)\n        }\n\n    }, [apiKey, account, connector, exchangeInfo, chainId, LoopringAPI.userAPI])\n\n    const transfer = useCallback(async (amt: number, payeeAddr: string = '0xb6AdaC3e924B4985Ad74646FEa3610f14cDFB79c') => {\n\n        if (!LoopringAPI.userAPI || !LoopringAPI.exchangeAPI || !connector || !apiKey || !chainId || !accountId || !account?.accAddr) {\n            return\n        }\n\n        const request: GetNextStorageIdRequest = {\n            accountId,\n            sellTokenId: 1\n        }\n        const storageId = await LoopringAPI.userAPI.getNextStorageId(request, apiKey)\n\n        console.log(`amt: ${amt} storageId:${JSON.stringify(storageId)}`)\n\n        try {\n\n            const provider = await connector.getProvider()\n            const web3 = new Web3(provider as any)\n\n            let walletType = account.connectName\n            walletType = ConnectorNames.Injected\n\n            const payeeAcc = await LoopringAPI.exchangeAPI.getAccount({owner: payeeAddr})\n\n            let payeeId = 0\n            if (payeeAcc) {\n                payeeId = payeeAcc.accInfo.accountId\n            }\n\n            const request2: OriginTransferRequestV3 = {\n                exchange: exchangeInfo.exchangeAddress,\n                payerAddr: account.accAddr,\n                payerId: accountId,\n                payeeAddr,\n                payeeId,\n                storageId: storageId.offchainId,\n                token: {\n                    tokenId: '1',\n                    volume: '100000000000000000000',\n                },\n                maxFee: {\n                    tokenId: '1',\n                    volume: '9400000000000000000',\n                },\n                validUntil: VALID_UNTIL,\n            }\n\n            console.log(`request2:${JSON.stringify(request2)}`)\n\n            const response = await LoopringAPI.userAPI.submitInternalTransfer(request2, web3, chainId, walletType,\n                eddsaKey, apiKey, false)\n\n            console.log(response)\n\n        } catch (reason) {\n            dumpError400(reason)\n        }\n\n    }, [apiKey, accountId, account, connector, exchangeInfo, chainId, eddsaKey, LoopringAPI.userAPI, LoopringAPI.exchangeAPI])\n\n    const [depositValue, setDepositValue] = useState<IBData<any>>({\n        belong: undefined,\n        tradeValue: 0,\n        balance: 0\n    } as IBData<unknown>)\n\n    // deposit\n\n    let depositProps: DepositProps<any, any> = {\n        tradeData: {belong: undefined},\n        coinMap: coinMap,\n        walletMap: walletMap1,\n        depositBtnStatus: TradeBtnStatus.AVAILABLE,\n        onDepositClick: (tradeData: any) => {\n            console.log('1. onDepositClick', depositValue)\n            if (depositValue && depositValue.belong) {\n                deposit(depositValue.belong.toString(), depositValue.tradeValue)\n            }\n            ShowDeposit(false)\n        },\n        handlePanelEvent: async (data: SwitchData<any>, switchType: 'Tomenu' | 'Tobutton') => {\n            return new Promise((res) => {\n                if (data?.tradeData?.belong) {\n                    if (depositValue !== data.tradeData) {\n                        setDepositValue(data.tradeData)\n                    }\n                    setTokenSymbol(data.tradeData.belong)\n                } else {\n                    setDepositValue({belong: undefined, tradeValue: 0, balance: 0} as IBData<unknown>)\n                }\n                res();\n            })\n        },\n    }\n\n    // withdraw\n    const [withdrawValue, setWithdrawValue] = useState<IBData<any>>({\n        belong: undefined,\n        tradeValue: 0,\n        balance: 0\n    } as IBData<unknown>);\n\n    const [tokenSymbol, setTokenSymbol] = useState<string>('')\n    const [withdrawType, setWithdrawType] = useState<WithdrawType>(WithdrawType.Standard)\n    const {chargeFeeList: withdrawalFeeList} = useChargeFeeList(tokenSymbol, OffchainFeeReqType.OFFCHAIN_WITHDRAWAL, tokenMap)\n\n    let withdrawProps: WithdrawProps<any, any> = {\n        tradeData: {belong: undefined},\n        coinMap: coinMap,\n        walletMap: walletMap2,\n        withdrawBtnStatus: TradeBtnStatus.AVAILABLE,\n        onWithdrawClick: (tradeData: any) => {\n            console.log('Swap button click', withdrawValue)\n            if (withdrawValue && withdrawValue.belong) {\n                withdraw(withdrawValue.belong.toString(), withdrawValue.tradeValue)\n            }\n            ShowWithdraw(false)\n        },\n\n        handlePanelEvent: async (data: SwitchData<any>, switchType: 'Tomenu' | 'Tobutton') => {\n            console.log('withdrawProps handlePanelEvent: ', data, switchType)\n            console.log('withdrawProps withdrawValue: ', withdrawValue)\n            return new Promise((res: any) => {\n                if (data?.tradeData?.belong) {\n                    if (withdrawValue !== data.tradeData) {\n                        setWithdrawValue(data.tradeData)\n                    }\n                    setTokenSymbol(data.tradeData.belong)\n                } else {\n                    setWithdrawValue({belong: undefined, tradeValue: 0, balance: 0} as IBData<unknown>);\n                }\n                res();\n            })\n        },\n        withdrawType,\n        withdrawTypes: WithdrawTypes,\n        chargeFeeToken: 'ETH',\n        chargeFeeTokenList: withdrawalFeeList,\n        handleFeeChange(value: { belong: string; fee: number | string; __raw__?: any }): void {\n            console.log('handleWithdrawFee', value);\n        },\n        handleWithdrawTypeChange: (value: any) => {\n            console.log('handleWithdrawTypeChange',value)\n        },\n        handleOnAddressChange: (value: any) => {\n            console.log('handleOnAddressChange', value);\n        },\n        handleAddressError: (_value: any) => {\n            return {error: true, message: 'any error'}\n        }\n    }\n    // console.log(coinMap)\n    // transfer\n    const [transferValue, setTransferValue] = useState<IBData<any>>({\n        belong: undefined,\n        tradeValue: 0,\n        balance: 0\n    } as IBData<unknown>)\n\n    const [transferTokenSymbol, setTransferTokenSymbol] = useState<string>('')\n    const {chargeFeeList: transferFeeList} = useChargeFeeList(transferTokenSymbol, OffchainFeeReqType.TRANSFER, tokenMap)\n\n    let transferProps: TransferProps<any, any> = {\n        tradeData: {belong: undefined},\n        coinMap: coinMap,\n        walletMap: walletMap2,\n        transferBtnStatus: TradeBtnStatus.AVAILABLE,\n        onTransferClick: (tradeData: any) => {\n            console.log('onTransferClick:', transferValue);\n            if (transferValue && transferValue.belong) {\n                transfer(transferValue.tradeValue)\n            }\n\n            ShowTransfer(false)\n        },\n        handleFeeChange(value: { belong: string; fee: number | string; __raw__?: any }): void {\n            console.log('handleWithdrawFee', value);\n        },\n        handlePanelEvent: async (data: SwitchData<any>, switchType: 'Tomenu' | 'Tobutton') => {\n            return new Promise((res: any) => {\n                if (data?.tradeData?.belong) {\n                    if (transferValue !== data.tradeData) {\n                        setTransferValue(data.tradeData)\n                    }\n                    setTransferTokenSymbol(data.tradeData.belong)\n                } else {\n                    setTransferValue({belong: undefined, tradeValue: 0, balance: 0} as IBData<unknown>)\n                }\n                // else{\n                //     setTransferValue({ belong: undefined, amt: 0 })\n                // }\n\n                res();\n            })\n        },\n\n        chargeFeeToken: 'ETH',\n        chargeFeeTokenList: transferFeeList,\n        handleOnAddressChange: (value: any) => {\n            console.log('handleOnAddressChange', value);\n        },\n        handleAddressError: (_value: any) => {\n            return {error: true, message: 'any error'}\n        }\n    }\n\n    // reset\n    const [resetValue, setResetValue] = useState<IBData<any>>({\n        belong: undefined,\n        tradeValue: 0,\n        balance: 0\n    } as IBData<unknown>)\n\n\n    let resetProps: ResetProps<any, any> = {\n        tradeData: {belong: undefined},\n        coinMap: coinMap,\n        walletMap: walletMap2,\n        resetBtnStatus: TradeBtnStatus.AVAILABLE,\n        onResetClick: (tradeData: any) => {\n            console.log('onResetClick', resetValue)\n            if (resetValue && resetValue.belong) {\n            }\n\n            ShowResetAccount(false)\n        },\n        handlePanelEvent: async (data: SwitchData<any>, switchType: 'Tomenu' | 'Tobutton') => {\n            return new Promise((res) => {\n                if (data?.tradeData?.belong) {\n                    if (resetValue !== data.tradeData) {\n                        setResetValue(data.tradeData)\n                    }\n                } else {\n                    setResetValue({belong: undefined, tradeValue: 0, balance: 0} as IBData<unknown>)\n                }\n\n                res();\n            })\n        },\n        fee: {count: 234, price: 123}\n    }\n\n     const tradeCalcData: TradeCalcData<CoinType> = {\n        coinSell: 'ETH', //name\n        coinBuy: 'LRC',\n        BtoS: 0,\n        StoB: 0,\n        sellCoinInfoMap: coinMap,\n        buyCoinInfoMap: coinMap,\n        walletMap: {},\n        slippage: 0.5,\n        // slippageTolerance: [0.1, 0.5, 1, 'slippage:N'],\n        priceImpact: '12',\n        minimumReceived: '1%',\n        fee: '1%'\n    }\n     const ammCalcData: AmmInData<{[key: string]: any}> = {\n        myCoinA: {belong:'ETH',balance:1000,tradeValue:0},\n        myCoinB: {belong:'LRC',balance:1000,tradeValue:0},\n        AtoB:50,\n        coinInfoMap: coinMap as any,\n        slippage: 0.5,\n        // slippageTolerance: [0.1, 0.5, 1, 'slippage:N'],\n        fee: '1%'\n    }\n\n\n    let swapProps: SwapProps<IBData<string>, string, any> = {\n        tradeData: undefined,\n        tradeCalcData,\n        onSwapClick: (tradeData) => {\n            console.log('Swap button click', tradeData);\n        },\n        handleSwapPanelEvent: async (data: any, switchType: any) => {\n            console.log(data, switchType)\n        },\n    };\n    let ammProps: AmmProps<AmmData<IBData<any>>, any, AmmInData<any>> = {\n        ammDepositData:{coinA: {belong: 'ETH',balance:0.3,tradeValue:0}, coinB:  {belong: 'LRC',balance:1000,tradeValue:0},slippage: '',},\n        ammWithdrawData:{coinA: {belong: 'ETH',balance:0.3,tradeValue:0}, coinB:  {belong: 'LRC',balance:1000,tradeValue:0},slippage: '',},\n        // tradeCalcData,\n        ammCalcData:ammCalcData,\n        handleDepositEvent: (data,type) => {\n            console.log('handleDepositEvent',data,type) ;\n        },\n        handleWithDrawEvent:  (data,type) => {\n            console.log('handleWithDrawEvent',data,type) ;\n        },\n        onAmmWithdrawClick: (data)=>{\n            console.log('onAmmWithdrawClick',data) ;\n        },\n        onAmmDepositClick: (data)=>{\n            console.log('onAmmDepositClick',data) ;\n        }\n    }\n\n    return {\n        depositProps, withdrawProps, transferProps, resetProps, ammProps, swapProps,\n    }\n}\n","import { WithTranslation, withTranslation } from 'react-i18next';\nimport { Box, Modal } from '@material-ui/core';\nimport { ModalCloseButton, ModalContentStyled, ModalQRCode } from '@loopring-web/component-lib';\nimport React from 'react';\nimport { AccountInfo, AccountInfoProps } from '@loopring-web/component-lib';\n\nexport const ModalAccountInfo = withTranslation('common')(({\n                                                               onClose,\n                                                               open,\n                                                               t,\n                                                               ...rest\n                                                           }: { open:boolean, onClose:(e:any)=>void} & AccountInfoProps & WithTranslation) => {\n\n\n    return <Modal\n        open={open}\n        onClose={onClose}\n        aria-labelledby=\"Account information\"\n        aria-describedby=\"show layer2 address, unlock/locked loopring wallet, copy address\"\n    >\n        <ModalContentStyled style={{boxShadow: '24'}}>\n            <Box paddingTop={3} paddingBottom={3} display={'flex'} flexDirection={'column'} minWidth='var(--modal-width)'>\n                <ModalCloseButton onClose={onClose} {...{...rest, t}} />\n                <AccountInfo {...rest}/>\n            </Box>\n\n        </ModalContentStyled>\n    </Modal>\n})","import React, { useCallback, useState, } from 'react'\n\nimport {\n    Header as HeaderUI,\n    HideOnScroll,\n    ModalWalletConnect,\n    AccountInfo,\n    ModalCloseButton,\n} from '@loopring-web/component-lib'\n\nimport { headerRoot } from '@loopring-web/component-lib/src/static-resource'\n\nimport { useLocation } from 'react-router-dom'\n\nimport { Toolbar, Snackbar, Alert, } from '@material-ui/core'\n\nimport { useHeader } from './hook'\n\nimport { useDisconnect, } from 'stores/account/hook'\nimport { ModalPanel, ModalQRCode, } from '@loopring-web/component-lib';\nimport { useGetExchangeInfo } from 'hooks/exchange/useExchangeAPI'\nimport { useModalProps } from './hook'\n\nimport { copyToClipBoard } from 'utils/obj_tools'\nimport { ModalAccountInfo } from '../../pages/AccountPage';\nimport { useTranslation } from 'react-i18next';\n\nconst Header = ({ ...rest }: any) => {\n\n    const {\n        depositProps,\n        withdrawProps,\n        transferProps,\n        resetProps,\n        ammProps,\n        swapProps,\n    } = useModalProps()\n\n    const location = useLocation()\n\n    const {\n        headerToolBarData,\n        headerMenuData,\n        gatewayList,\n        isShowConnect,\n        isShowAccountInfo,\n        setShowAccountInfo,\n        // setShowAccountInfo,\n        setShowConnect,\n        // open,\n        // setOpen,\n        // openConnect,\n        // setOpenConnect,\n        account,\n        accountInfoProps,\n        // showAccountInfo\n    } = useHeader()\n\n    const { exchangeInfo } = useGetExchangeInfo()\n\n    const { disconnect } = useDisconnect()\n\n    const onSwitch = useCallback(() => {\n        setShowAccountInfo({isShow:false})\n        setShowConnect({isShow:true})\n    }, [setShowConnect,setShowAccountInfo])\n\n    const [openQRCode, setOpenQRCode] = useState(false)\n\n    const [copyToastOpen, setCopyToastOpen] = useState(false);\n    const {t} = useTranslation('commom')\n\n    const closeCopyToast = () => { setCopyToastOpen(false) }\n\n    return (<>\n        <Snackbar open={copyToastOpen} autoHideDuration={2500} onClose={closeCopyToast}>\n            <Alert onClose={closeCopyToast} severity=\"success\">\n                {t('Address Copied to Clipboard!')}\n        </Alert>\n        </Snackbar>\n\n        <ModalQRCode open={openQRCode} onClose={() => setOpenQRCode(false)} title={'ETH Address'}\n            description={account.accAddr} url={account.accAddr} />\n\n        <ModalPanel transferProps={transferProps} withDrawProps={withdrawProps} \n        depositProps={depositProps} resetProps={resetProps} ammProps={ammProps} swapProps={swapProps}/>\n\n        <HideOnScroll>\n            {process.env.NODE_ENV !== 'production' && JSON.stringify(account?.status)}\n            {process.env.NODE_ENV !== 'production' && ' exchangeAddress:' + JSON.stringify(exchangeInfo?.exchangeAddress)}\n\n            <HeaderUI {...rest} headerMenuData={headerMenuData} headerToolBarData={headerToolBarData}\n                selected={location.pathname === '/' ? headerRoot : location.pathname}></HeaderUI>\n\n        </HideOnScroll>\n        <Toolbar />\n\n        <ModalWalletConnect {...{ ...rest, gatewayList, open:isShowConnect.isShow, onClose: () => setShowConnect({isShow:false}) }} />\n        {<ModalAccountInfo\n            open={isShowAccountInfo.isShow}\n            onClose={() => {setShowAccountInfo({isShow:false})}}\n            onCopy={() => {\n                copyToClipBoard(account.accAddr);\n                setCopyToastOpen(true)\n            }}\n            onViewQRCode={() => {\n                setOpenQRCode(true)\n            }}\n            onDisconnect={() => {\n                disconnect();\n                setShowAccountInfo({isShow:false});\n            }}\n            onSwitch={onSwitch}\n            {...{...accountInfoProps, ...rest}}></ModalAccountInfo>}\n    </>)\n}\n\n\nexport default Header\n\n\n\n","import React from \"react\"\nimport store from '../../stores';\nimport { TickerMap, useTicker } from '../../stores/ticker';\nimport {\n    QuoteTableRawDataItem,\n    MarketBlockProps,\n} from '@loopring-web/component-lib';\nimport { deepClone } from '../../utils/obj_tools';\nimport { useSocket } from '../../stores/socket';\nimport { WsTopicType } from 'loopring-sdk';\n\nconst amtCol = 5\nconst OnePageSize = 16;\n\nfunction isAtBottom(event: React.UIEvent<HTMLDivElement>,to:number, marketArrayLength:number, pageSize:number = OnePageSize ): boolean {\n    const target = event.target as HTMLDivElement;\n    //TODO 2 times height for scrollHeight  to - 16 - 4  calculator scroll  超过 20 个刷第二屏幕 。。。。超过 36 个刷下个一个屏幕 第一屏幕是 16+4+16\n     if( target.clientHeight + target.scrollTop === target.scrollHeight &&  to*pageSize >= marketArrayLength) {\n         return  true\n     }else{\n         return false;\n     }\n}\n\nexport function useQuote<C extends { [ key: string ]:string }>() {\n\n\n    const {\n        tickerMap,\n        status: tickerStatus,\n        // errorMessage: errorTickerMap,\n        statusUnset: tickerStatusUnset,\n        updateTickers,\n    } = useTicker();\n    const { sendNewMessage , socketEnd} =  useSocket();\n    const { marketArray, coinMap } = store.getState().tokenMap;\n    const recommendMarkets:string[] =  marketArray?marketArray.slice(0,4): ['LRC-ETH','LRC-ETH','LRC-ETH','LRC-ETH']\n    const _marketArrayWithOutRecommend = marketArray? marketArray.filter(item=>recommendMarkets.findIndex(m=>m===item) === -1):[];\n\n\n    const [tickList, setTickList] = React.useState<any>([]);\n    const [recommendations,setRecommendations]  = React.useState<MarketBlockProps<C>[]>([]);\n    const [tickerKeys, setTickerKeys] = React.useState<string[]>([]);\n    const [focusRowFrom,setFocusRowFrom] = React.useState<[start:number,end:number]>([0,2]);\n\n    React.useEffect(() => {\n        const [from,to] = focusRowFrom\n        getTicker(from,to);\n        return ()=>{socketEnd()}\n    }, []);\n    React.useEffect(() => {\n        switch (tickerStatus) {\n            case \"ERROR\":\n                console.log(\"ERROR\", 'get ticker error,ui');\n                tickerStatusUnset()\n                break;\n            case \"PENDING\":\n                break;\n            case \"DONE\":\n                tickerStatusUnset();\n                updateRawData(tickerMap as TickerMap<C>)\n                break;\n            default:\n                break;\n        }\n    }, [tickerStatus, tickerStatusUnset]);\n    \n    const getTicker = React.useCallback((from:number,to:number)=>{\n        if(_marketArrayWithOutRecommend){\n\n            let array =  _marketArrayWithOutRecommend.slice(from*OnePageSize,to*OnePageSize);\n            const keys:string[] = array.slice(0,OnePageSize);\n\n            const _tickerKeys = [...recommendMarkets,...keys]\n            setTickerKeys(_tickerKeys);\n            // High:\n            sendNewMessage({[WsTopicType.ticker]:_tickerKeys});\n\n            setFocusRowFrom([from,to]);\n            //High: add recommendations market first time is 36个数据\n            if(from === 0){\n                array =  recommendMarkets.concat(array)\n            }\n            updateTickers(array);\n\n\n            //LoopringAPI.exchangeAPI?.getMixTicker()\n        }\n\n\n    },[marketArray,OnePageSize,recommendMarkets])\n\n    const updateRawData = React.useCallback((tickerMap:TickerMap<C>)=>{\n        let _recommendationsFloat:QuoteTableRawDataItem[] = [];\n        const _tickList = Reflect.ownKeys(tickerMap).reduce((prev,key)=>{\n            // @ts-ignore\n            const [,coinA,coinB] =  key.match(/(\\w+)-(\\w+)/i);\n            let _item = {\n                ...tickerMap[key as string],\n                pair: {\n                   coinA,\n                   coinB,\n                },\n            } as QuoteTableRawDataItem;\n\n            if(recommendMarkets.findIndex(m=>m===key) !== -1) {\n                _recommendationsFloat.push(deepClone(_item))\n            }\n            prev.push(_item);\n            return prev\n        },[] as QuoteTableRawDataItem[])\n        setTickList([...tickList,..._tickList])\n        //setTickList\n        if(focusRowFrom[0] === 0 && _recommendationsFloat.length > 0){\n            //TODO : fix in uat env not enough pair_recommendations\n            while(_recommendationsFloat.length<4) {\n                _recommendationsFloat.push(deepClone(_recommendationsFloat[0]));\n            }\n\n            const _recommendations = _recommendationsFloat.reduce((prev,item)=>{\n                if(coinMap){\n                    const {coinA,coinB} = item.pair;\n\n                    const _item: MarketBlockProps<C> = {\n                        tradeFloat: item,\n                        // @ts-ignore\n                        coinAInfo: coinMap[coinA],\n                        // @ts-ignore\n                        coinBInfo: coinMap[coinB]\n                    } as MarketBlockProps<C>\n                    prev.push(_item)\n                }\n                return prev\n            },[] as MarketBlockProps<C>[])\n\n            setRecommendations(_recommendations)\n        }\n    },[tickList,focusRowFrom])\n\n    const handleScroll = React.useCallback( async(event)=>{\n        //TODO isBottom and is On prev tickerCall\n       if (!isAtBottom(event,focusRowFrom[1],_marketArrayWithOutRecommend.length,OnePageSize)\n           && tickerStatus !== 'PENDING'){\n           \n       }\n\n    },[focusRowFrom,OnePageSize,tickerStatus])\n\n    return {\n        tickList,\n        recommendations,\n        handleScroll,\n    }\n\n}\n","import styled from '@emotion/styled/macro'\n\nimport { MarketBlock, QuoteTable, TablePaddingX } from '@loopring-web/component-lib'\n\nimport { WithTranslation, withTranslation } from 'react-i18next'\n// import { FloatTag } from '@loopring-web/component-lib/src/static-resource'\nimport { Box, Grid } from '@material-ui/core'\nimport { useQuote } from './hook'\n\nconst  RowStyled = styled(Grid)`\n      & .MuiGrid-root:not(:last-of-type) > div{\n        margin-right: ${({theme}) => theme.unit * 3}px;\n      }\n` as typeof Grid\nconst  TableWrapStyled = styled(Grid)`\n  &{\n    background-color: ${({theme}) => theme.colorBase.background().default};\n    ${({theme}) => theme.border.defaultFrame({c_key: 'blur', d_R: 1})};\n    .rdg{\n      height: 100%;\n    }\n  }\n  ${({theme}) => TablePaddingX({pLeft:theme.unit * 3,pRight:theme.unit * 3})}\n` as typeof Grid\n\nconst QuotePage = withTranslation('common')((rest: WithTranslation) => {\n\n    const { recommendations, handleScroll,tickList } = useQuote()\n\n    const onVisibleRowsChange=(data: any) => {\n        console.log(data)\n    }\n\n    return <Box display={'flex'} flexDirection={'column'} flex={1} height={770}>\n\n        <RowStyled container >\n\n            {recommendations.map((item,index)=> <Grid key={item.coinAInfo+item.coinBInfo+index} item xs={3} >\n                    <MarketBlock {...{...item, ...rest}}></MarketBlock>\n                </Grid>\n            )}\n\n\n\n        </RowStyled>\n        <TableWrapStyled container marginY={3} paddingY={2} flex={1}>\n            <Grid item xs={12} display={'flex'}>\n                <QuoteTable onVisibleRowsChange={onVisibleRowsChange}  rawData={tickList} {...{ ...rest }} />\n            </Grid>\n        </TableWrapStyled>\n    </Box>\n\n\n})\n\nexport default QuotePage\n","import { useCallback, useState } from 'react'\n\nimport { useExchangeAPI } from 'hooks/exchange/useApi'\nimport { useCustomDCEffect } from 'hooks/common/useCustomDCEffect'\n\nimport { TradingInterval, Candlestick, GetCandlestickRequest, GetDepthRequest, GetTickerRequest, dumpError400, getExistedMarket } from 'loopring-sdk'\nimport { fromWEI } from 'utils/swap_calc_utils'\n\nimport { ChartUnit, CoinInfo } from '@loopring-web/component-lib/static-resource'\n\nimport { ChartType } from '@loopring-web/component-lib'\n\nimport { TGItemData, TGItemJSXInterface, } from '@loopring-web/component-lib'\n\nimport { IGetDepthDataParams } from '@loopring-web/component-lib/components/charts/scaleAreaChart/data'\n\nconst toggleData: TGItemData[] = [\n  {\n    value: ChartType.Trend,\n    key: ChartType.Trend,\n    label: 'label' + ChartType.Trend\n  },\n  {\n    value: ChartType.Depth,\n    key: ChartType.Depth,\n    label: 'label' + ChartType.Depth\n  },\n]\n\nexport function useBasicInfo(props: any, coinAInfo: any, coinBInfo: any, marketArray: any[], t: any) {\n  const tgItemJSXs: TGItemJSXInterface[] = toggleData.map(({ value, label, key }) => {\n    return { value, tlabel: t(label), key, JSX: <>{t(label)}</> }\n  })\n\n  // const { base, quote, market, tokens } = props\n\n  const { market, amm } = getExistedMarket(marketArray, coinAInfo?.name, coinBInfo?.name)\n\n  const [chartType, setChartType] = useState<ChartType>(ChartType.Trend)\n\n  // console.log('---useBasicInfo market:', market, ' amm:', amm, ' chartType:', chartType)\n  //\n  // const [change, setChange] = useState(0)\n  //\n  // const [volume, setVolume] = useState('')\n\n  const [chartUnit, setChartUnit] = useState(ChartUnit.D1)\n\n  const [originData, setOriginData] = useState<any>(undefined)\n\n  const handleChange = useCallback((_e: React.MouseEvent, value: any) => {\n    // Settings.setChartType(value)\n    // console.log('useBasicInfo handleChange:', value)\n    setOriginData(undefined)\n    setChartType(value)\n  }, [setOriginData, setChartType])\n\n  const exchangeApi = useExchangeAPI()\n\n  // useCustomDCEffect(async () => {\n  //\n  //   if (!exchangeApi || !market || !tokens || !quote) {\n  //     return\n  //   }\n  //\n  //   let mounted = true\n  //\n  //   try {\n  //\n  //     const request: GetTickerRequest = {\n  //       market: market.market,\n  //     }\n  //\n  //     const ticker = await exchangeApi.getTicker(request)\n  //     if (mounted) {\n  //\n  //       if (ticker.tickList[0].change) {\n  //         setChange(ticker.tickList[0].change)\n  //       }\n  //\n  //       if (ticker.tickList[0].base_token_volume) {\n  //         const baseVol = fromWEI(tokens.tokenSymbolMap, base, ticker.tickList[0].base_token_volume) as string\n  //         setVolume(baseVol)\n  //       }\n  //     }\n  //   }\n  //   catch (reason) {\n  //     dumpError400(reason, 'ChartPanel getCandlestick')\n  //   }\n  //\n  //   return () => {\n  //     mounted = false\n  //   }\n  //\n  // }, [exchangeApi, market, tokens, base,])\n\n  const tgItemJSXsPriceChart: TGItemJSXInterface[] = Object.keys(ChartUnit).reduce((pre, item) => {\n    // @ts-ignore\n    const tGItemData: TGItemData = { value: ChartUnit[item], key: ChartUnit[item], label: 'label' + ChartUnit[item] };\n    pre.push({ value: tGItemData.value, tlabel: t(tGItemData.label ? tGItemData.label : tGItemData.key), key: tGItemData.key, JSX: <>{t(tGItemData.label ? tGItemData.label : tGItemData.key)}</> })\n    return pre\n  }, [] as TGItemJSXInterface[])\n\n  useCustomDCEffect(async () => {\n  \n    let mounted = true\n  \n    if (!exchangeApi || !market || !amm) {\n      return\n    }\n  \n    if (chartType === ChartType.Trend) {\n      const request: GetCandlestickRequest = {\n        market: amm as string,\n        interval: TradingInterval.min15,\n        limit: 96\n      }\n  \n      try {\n        const candlesticks = await exchangeApi.getCandlestick(request)\n  \n        if (mounted) {\n          const originData = candlesticks.candlesticks.map((item: Candlestick) => {\n            return {\n              timeStamp: item.timestamp,\n              low: item.low,\n              high: item.high,\n              open: item.open,\n              close: item.close,\n              volume: item.quoteVol,\n            }\n          })\n          console.log(`useBasicInfo amm: ${amm} candlesticks originData: `, originData)\n          setOriginData(originData)\n        }\n      }\n      catch (reason) {\n        dumpError400(reason, 'ChartPanel getCandlestick')\n      }\n  \n    } else {\n      const request: GetDepthRequest = {\n        market,\n      }\n  \n      try {\n  \n        const { depth } = await exchangeApi.getMixDepth(request)\n        console.log('useBasicInfo depth:', depth)\n        if (mounted) {\n          const originData: IGetDepthDataParams = {\n            bidsPrices: depth.bids_prices,\n            bidsAmtTotals: depth.bids_amtTotals as any,\n            asksPrices: depth.asks_prices,\n            asksAmtTotals: depth.asks_amtTotals as any,\n          }\n          setOriginData(originData)\n        }\n  \n      } catch (reason) {\n        dumpError400(reason)\n      }\n  \n    }\n  \n    return () => {\n      mounted = false\n    }\n  \n  }, [exchangeApi, amm, market, chartType])\n\n  return {\n    // change,\n    // volume,\n    chartUnit,\n    chartType,\n    tgItemJSXs,\n    tgItemJSXsPriceChart,\n    handleChange,\n    originData,\n  }\n}","import { ChartUnit,UpColor } from '@loopring-web/component-lib/static-resource'\nimport { ScaleAreaChart, ToggleButtonGroup, useSettings,TradeTitle } from '@loopring-web/component-lib'\nimport { Box, Grid } from \"@material-ui/core\"\nimport { WithTranslation } from 'react-i18next'\nimport { useBasicInfo } from './hook'\n\nconst BasicInfoPanel = ({ props, coinAInfo, coinBInfo, tradeFloat, marketArray, t, ...rest }: any & WithTranslation) => {\n\n    const {\n        // change,\n        chartType,\n        tgItemJSXs,\n        tgItemJSXsPriceChart,\n        handleChange,\n        originData,\n    } = useBasicInfo(props, coinAInfo, coinBInfo, marketArray, t)\n    const { upColor } = useSettings();\n\n    return <>\n        <Grid item xs={8}>\n            <TradeTitle {...{\n                coinAInfo, coinBInfo,\n                ...rest, t, tradeFloat\n            }}></TradeTitle>\n        </Grid>\n        <Grid item xs={4} display={'flex'} justifyContent={'flex-end'} alignItems={'flex-end'}>\n            <ToggleButtonGroup exclusive {...{ ...rest, t, tgItemJSXs, value: chartType }}\n                handleChange={handleChange} />\n        </Grid>\n\n        <Grid item xs={12}>\n            <Box minHeight={256} maxHeight={256} display={'block'} style={{ height: '100%', width: '100%' }}>\n                <ScaleAreaChart type={chartType} data={originData ?? []} riseColor={upColor as keyof typeof UpColor}\n                    handleMove={() => {\n                    }} />\n            </Box>\n        </Grid>\n        <Grid item xs={12} height={24} display={'flex'} justifyContent={'flex-end'}>\n            <ToggleButtonGroup exclusive {...{\n                ...rest, t, tgItemJSXs: tgItemJSXsPriceChart,\n                value: ChartUnit.D1, size: 'small'\n            }}\n                handleChange={() => undefined} />\n        </Grid>\n    </>\n\n};\n\nexport default BasicInfoPanel\n","// import { useState } from 'react'\n//\n// import TradePanelUi from './TradePanel'\n// import { useGetMyTrades, useGetRecentTrades, } from './hooks'\n//\n// const TradePanel = ({tradeArray}: any) => {\n//\n//   // const { market, poolAddress, base, quote } = props\n//\n//   console.log('TradePanel market:', tradeArray)\n//\n//   // const { myTrades } = useGetMyTrades(market)\n//   //\n//   // const { recentTrades } = useGetRecentTrades(poolAddress)\n//\n//\n//\n//   return (\n//     <TradePanelUi trades={tradeArray} isAllTrade={isAllTrade}\n//     setIsAllTrade={setIsAllTrade} />\n//   )\n//\n// }\n//\n// export default TradePanel\n\nimport { RefAttributes, useState } from 'react'\n\nimport Tabs from '@material-ui/core/Tabs'\nimport Tab from '@material-ui/core/Tab'\nimport Checkbox from '@material-ui/core/Checkbox'\nimport styled from '@emotion/styled'\n\nimport { FormControlLabel, TradeTable, } from '@loopring-web/component-lib'\nimport { withTranslation, WithTranslation } from 'react-i18next';\nimport { CheckBoxIcon, CheckedIcon } from '@loopring-web/component-lib/static-resource'\nimport { RouteComponentProps, withRouter } from 'react-router'\nimport { Box } from '@material-ui/core';\nimport { RawDataTradeItem } from '@loopring-web/component-lib/components/tableList/tradeTable/TradeTable';\nimport { BasicHeaderItem, HeadMenuType } from '@loopring-web/component-lib/components/basic-lib/lists/Interface';\n\nconst StylePaper = styled(Box)`\n  width: 100%;\n  height: 100%;\n  flex: 1;\n  background-color: ${({theme}) => theme.colorBase.background().default};\n  border-radius: ${({theme}) => theme.unit}px;\n  padding: 20px;\n\n  .tableWrapper {\n    margin-top: ${({theme}) => theme.unit * 1.5}px;\n    border: 1px solid ${({theme}) => theme.colorBase.borderColor};\n    border-radius: ${({theme}) => theme.unit}px;\n    padding: 26px;\n  }\n` as typeof Box;\n\n\nconst applyProps = (index: number) => {\n    return {\n        id: `simple-tab-${index}`,\n        'aria-controls': `simple-tabpanel-${index}`,\n    }\n}\nconst StyledTabsWrapper = styled.div`\n          position: relative;\n          width: 100%;\n          margin-top: ${({theme}) => theme.unit * 4}px;\n        `\n\nconst StyledFormControlLabel = styled(FormControlLabel)`\n          position: absolute;\n          top: 0;\n          right: ${({theme}) => theme.unit}px;\n          margin: ${({theme}) => theme.unit}px 0 0 0;\n        `\n\n\nconst TradePanel = withTranslation('common')(\n   // withRouter(\n    (\n        {tradeArray,  myTradeArray, t}:\n            { tradeArray: RawDataTradeItem[], myTradeArray: RawDataTradeItem[] } & WithTranslation & RouteComponentProps) => {\n        const [isAllTrade, setIsAllTrade] = useState(false)\n        const [value, setValue] = useState(1)\n        const handleChange = (event: any, newValue: any) => {\n            setValue(newValue)\n        }\n\n        const handleCheckboxChange = () => {\n            setIsAllTrade((flag: boolean) => !flag)\n        }\n\n        return (\n            <StyledTabsWrapper>\n                <StyledFormControlLabel\n                    control={<Checkbox checked={isAllTrade} size={'small'} checkedIcon={<CheckedIcon/>}\n                                       icon={<CheckBoxIcon/>} color={'default'} onChange={handleCheckboxChange}/>}\n                    label={t('labelTradePanelHideOtherPairs')}/>\n\n                <Tabs value={value}\n                      onChange={handleChange}\n                      aria-label=\"tabs switch\">\n                    <Tab label={t('labelMyTrade')} {...applyProps(0)} />\n                    <Tab label={t('labelRecent')}   {...applyProps(1)} />\n                </Tabs>\n\n                <StylePaper marginTop={2}>\n                    {value === 0 ?  <TradeTable rawData={myTradeArray} /> : <TradeTable rawData={tradeArray}/> }\n                </StylePaper>\n\n            </StyledTabsWrapper>\n        )\n    }\n    ) as  (props: { tradeArray: RawDataTradeItem[], myTradeArray: RawDataTradeItem[] }) => JSX.Element;\n//)\n\nexport default TradePanel\n\n","import { Box, Grid, } from '@material-ui/core'\nimport { WithTranslation, withTranslation } from 'react-i18next'\nimport BasicInfoPanel from './panel/BasicInfoPanel'\nimport TradePanel from './panel/TradePanel'\nimport styled from 'styled-components'\nimport { useSwapPage } from './hook';\nimport { SwapPanel } from '@loopring-web/component-lib'\n\nconst FixedStyle = styled(Box)`\n  @media only screen and (min-height: 680px ) and (min-width:1024px){\n    position: fixed;\n  }\n`\n\nexport const SwapPage = withTranslation('common')(({ ...rest }: WithTranslation) => {\n\n    const {tradeCalcData,tradeData,tradeFloat,tradeArray, myTradeArray, marketArray, handleSwapPanelEvent,onSwapClick,pair,swapBtnI18nKey} = useSwapPage();\n\n    return <>\n        <Grid container marginRight={3} alignContent={'flex-start'} >\n            <BasicInfoPanel {...{ ...rest,\n                ...pair, marketArray,\n                tradeFloat, tradeArray }} />\n            <TradePanel tradeArray={tradeArray} myTradeArray={myTradeArray} />\n\n            {/**/}\n        </Grid>\n\n        <Box display={'flex'} style={{ minWidth: 'var(--swap-box-width)' }} >\n            <FixedStyle>\n                <SwapPanel tradeData={tradeData}\n                           tradeCalcData={tradeCalcData}\n                           onSwapClick={onSwapClick}\n                           swapBtnI18nKey={swapBtnI18nKey}\n                           // handleError={}\n                           {...{handleSwapPanelEvent,...rest}}\n                />\n            </FixedStyle>\n\n        </Box>\n\n    </>\n});\n\n\n // SwapPage\n","import { useRouteMatch } from 'react-router';\nimport { CoinInfo, IBData, TradeCalcData } from '@loopring-web/component-lib/static-resource';\nimport React, { useState } from 'react';\nimport { LoopringAPI } from '../../stores/apis/api';\nimport { useTokenMap } from '../../stores/token';\nimport * as fm from 'loopring-sdk';\nimport {\n    AmmPoolInfoV3,\n    AmmPoolSnapshot,\n    dumpError400,\n    getExistedMarket,\n    GetNextStorageIdRequest,\n    LoopringMap,\n    OrderType,\n    SubmitOrderRequestV3,\n    VALID_UNTIL\n} from 'loopring-sdk';\nimport { useAmmMap } from '../../stores/Amm/AmmMap';\nimport { RawDataTradeItem } from '@loopring-web/component-lib/components/tableList/tradeTable/TradeTable';\nimport { useWalletLayer2 } from '../../stores/walletLayer2';\nimport { CustomError, ErrorMap, globalSetup, TradeFloat } from '@loopring-web/component-lib/src/static-resource';\nimport { SwapTradeData } from '@loopring-web/component-lib';\nimport { SwapData } from '@loopring-web/component-lib/components/panel/components/panel/SwapWrap/Interface';\nimport { SwapType } from '@loopring-web/component-lib/components/panel/Interface';\nimport { useAccount } from '../../stores/account/hook';\nimport { useCustomDCEffect } from '../../hooks/common/useCustomDCEffect';\nimport {\n    accountStaticCallBack,\n    bntLabel,\n    btnClickArray,\n    coinPairInit,\n    fnType,\n    getUserTrades,\n    makeCache,\n    makeMarketArray,\n    makeTickView,\n    makeWallet,\n    pairDetailBlock,\n    pairDetailDone\n} from '../../hooks/help';\nimport * as _ from 'lodash'\nimport store from 'stores';\nimport { AccountStatus } from 'state_machine/account_machine_spec';\n\nexport const useSwapPage = <C extends { [ key: string ]: any }>() => {\n    /*** api prepare ***/\n        // const exchangeApi = exchangeAPI();\n    const wait = globalSetup.wait;\n    const match: any = useRouteMatch(\":symbol\")\n    const {coinMap, tokenMap, marketArray, marketCoins, marketMap,} = useTokenMap()\n    const {ammMap} = useAmmMap();\n    // const {setShowConnect, setShowAccountInfo} = useOpenModals();\n    // const {ShowDeposit} = useModals()\n    const {account} = useAccount()\n\n    const walletLayer2State = useWalletLayer2();\n\n    const [tradeData, setTradeData] = React.useState<SwapTradeData<IBData<C>> | undefined>(undefined);\n    const [tradeCalcData, setTradeCalcData] = React.useState<TradeCalcData<C> | undefined>(undefined);\n    const [tradeArray, setTradeArray] = React.useState<RawDataTradeItem[]>([]);\n    const [myTradeArray, setMyTradeArray] = React.useState<RawDataTradeItem[]>([]);\n    const [tradeFloat, setTradeFloat] = React.useState<TradeFloat | undefined>(undefined);\n    const [pair, setPair] = React.useState<{ coinAInfo: CoinInfo<C> | undefined, coinBInfo: CoinInfo<C> | undefined }>({\n        coinAInfo: undefined,\n        coinBInfo: undefined,\n    });\n\n\n    const [ammPoolSnapshot, setAmmPoolSnapshot] = React.useState<AmmPoolSnapshot | undefined>(undefined);\n\n    const [swapBtnI18nKey, setSwapBtnI18nKey] = React.useState<string | undefined>(undefined);\n\n    const [output, setOutput] = useState<any>()\n\n    //HIGH: get Router info\n    // const symbol = match?.params.symbol ?? undefined;\n    React.useEffect(() => {\n        const symbol = match?.params.symbol ?? undefined;\n        resetSwap(symbol, undefined, undefined, undefined)\n    }, []);\n    //TODO tickMap\n    React.useEffect(() => {\n    }, [])\n\n    //HIGH: effect by wallet state update\n    React.useEffect(() => {\n        switch (walletLayer2State.status) {\n            case \"ERROR\":\n                walletLayer2State.statusUnset();\n                // setState('ERROR')\n                //TODO: show error at button page show error  some retry dispath again\n                break;\n            case \"DONE\":\n                walletLayer2State.statusUnset();\n                const {walletMap} = makeWallet();\n                if (tradeCalcData) {\n                    setTradeCalcData({...tradeCalcData, walletMap} as TradeCalcData<C>);\n                    setTradeData({\n                        sell: {\n                            belong: tradeCalcData.sellCoinInfoMap ? tradeCalcData.sellCoinInfoMap[ tradeCalcData.coinSell ]?.simpleName : undefined,\n                            balance: walletMap ? walletMap[ tradeCalcData.coinSell ]?.count : 0\n                        },\n                        // @ts-ignore\n                        buy: {\n                            belong: tradeCalcData.sellCoinInfoMap ? tradeCalcData.sellCoinInfoMap[ tradeCalcData.coinBuy ]?.simpleName : undefined,\n                            balance: walletMap ? walletMap[ tradeCalcData.coinBuy ]?.count : 0\n                        },\n                    } as SwapTradeData<IBData<C>>)\n                    let {\n                        amm,\n                        market\n                    } = getExistedMarket(marketArray, tradeCalcData.coinSell as string, tradeCalcData.coinBuy as string);\n                    getUserTrades(market).then((marketTrades) => {\n                        let _myTradeArray = makeMarketArray(market, marketTrades) as RawDataTradeItem[]\n                        setMyTradeArray(_myTradeArray ? _myTradeArray : [])\n                    })\n                }\n                break;\n            default:\n                break;\n\n        }\n    }, [walletLayer2State.status, setMyTradeArray])\n\n    React.useEffect(() => {\n    }, [])\n\n\n    useCustomDCEffect(() => {\n        const label: string | undefined = accountStaticCallBack(bntLabel)\n        setSwapBtnI18nKey(label);\n    }, [account.status, bntLabel])\n\n    const onSwapClick = ({sell, buy, slippage, ...rest}: SwapTradeData<IBData<C>>) => {\n        const swapBtnClickArray: typeof btnClickArray = Object.assign(btnClickArray, {\n            [ fnType.ACTIVATED ]: [async function () {\n                //TODO: swap onClick\n\n                const {exchangeInfo} = store.getState().system\n\n                if (!LoopringAPI.userAPI || !tokenMap || !exchangeInfo\n                    || account.status !== AccountStatus.ACTIVATED) {\n                    return\n                }\n\n                console.log('onSwap', sell, buy, slippage)\n                console.log('onSwap output:', output)\n\n                console.log('onSwap account:', account)\n\n                const baseToken = tokenMap[ sell.belong as string ]\n                const quoteToken = tokenMap[ buy.belong as string ]\n\n                const request: GetNextStorageIdRequest = {\n                    accountId: account.accountId,\n                    sellTokenId: baseToken.tokenId\n                }\n\n                const storageId = await LoopringAPI.userAPI.getNextStorageId(request, account.apiKey)\n\n                try {\n\n                    const request: SubmitOrderRequestV3 = {\n                        exchange: exchangeInfo.exchangeAddress,\n                        accountId: account.accountId,\n                        storageId: storageId.orderId,\n                        sellToken: {\n                            tokenId: baseToken.tokenId,\n                            volume: output.amountS\n                        },\n                        buyToken: {\n                            tokenId: quoteToken.tokenId,\n                            volume: output.amountBOutSlip\n                        },\n                        allOrNone: false,\n                        validUntil: VALID_UNTIL,\n                        maxFeeBips: 60,\n                        fillAmountBOrS: false, // amm only false\n                        orderType: OrderType.ClassAmm,\n                        eddsaSignature: '',\n                    }\n\n                    console.log(request)\n\n                    const response = await LoopringAPI.userAPI.submitOrder(request, account.eddsaKey, account.apiKey)\n\n                    console.log(response)\n\n                } catch (reason) {\n                    dumpError400(reason)\n                }\n\n                if (rest.__cache__) {\n                    makeCache(rest.__cache__)\n                }\n            }, {sell, buy, slippage}]\n        })\n        accountStaticCallBack(swapBtnClickArray)\n    }\n    const handleSwapPanelEvent = async (swapData: SwapData<SwapTradeData<IBData<C>>>, switchType: any): Promise<void> => {\n        //TODO setMarket(market);\n        // _.throttle(()=>{\n        const {tradeData} = swapData\n        return new Promise((resolve) => {\n            switch (switchType) {\n                case SwapType.SEll_CLICK:\n                    break\n                case SwapType.BUY_CLICK:\n                    break\n                case SwapType.SELL_SELECTED:\n                    resetSwap(`${tradeData.sell.belong}-${tradeData.buy.belong}`, 'sell', tradeData, ammPoolSnapshot)\n                    break\n                case SwapType.BUY_SELECTED:\n                    resetSwap(`${tradeData.sell.belong}-${tradeData.buy.belong}`, 'buy', tradeData, ammPoolSnapshot)\n                    break\n                case SwapType.EXCHANGE_CLICK:\n                    resetSwap(`${tradeData.sell.belong}-${tradeData.buy.belong}`, undefined, undefined, ammPoolSnapshot)\n                    break\n                default:\n                    break\n            }\n\n            resolve(undefined)\n        })\n        // },wait)\n\n    }\n\n    const calculateTradeData = async (type: 'sell' | 'buy', _tradeData: SwapTradeData<IBData<C>>, ammPoolSnapshot: AmmPoolSnapshot | undefined): Promise<{ _tradeCalcData: TradeCalcData<C>, _tradeData: SwapTradeData<IBData<C>> }> => {\n        //if(`${pair.coinAInfo?.simpleName}-${pair.coinBInfo?.simpleName}` === coinKey)\n        if (_tradeData[ type ].tradeValue && tradeCalcData) {\n            type === 'sell' ? _tradeData[ 'buy' ].tradeValue = fm.toBig(_tradeData[ 'sell' ].tradeValue).times(tradeCalcData.StoB).toNumber()\n                : _tradeData[ 'sell' ].tradeValue = fm.toBig(_tradeData[ 'buy' ].tradeValue).times(tradeCalcData.BtoS).toNumber()\n        }\n        const market = `${pair.coinAInfo?.simpleName}-${pair.coinBInfo?.simpleName}`\n        const depth = await LoopringAPI.exchangeAPI?.getMixDepth({market})\n        if (!marketArray || !tokenMap || !marketMap || !depth || !ammMap || !tradeCalcData) {\n            let _tradeCalcData = {...tradeCalcData} as TradeCalcData<C>;\n            return {_tradeData, _tradeCalcData}\n        }\n\n        const isAtoB = type === 'sell'\n        let input: any = (isAtoB ? _tradeData.sell.tradeValue : _tradeData.buy.tradeValue)\n\n        if (input) {\n            input = input.toString()\n        } else {\n            input = '0'\n        }\n\n        const base = _tradeData.sell.belong as string\n        const quote = _tradeData.buy.belong as string\n\n        const output = fm.getOutputAmount(input, base, quote, isAtoB, marketArray, tokenMap,\n            marketMap, depth?.depth, {[ 'AMM-' + market ]: ammMap[ 'AMM-' + market ].__rawConfig__} as LoopringMap<AmmPoolInfoV3>,\n            ammPoolSnapshot, '6', '200')\n\n        console.log('output:', output)\n\n        setOutput(output)\n\n        tradeCalcData.priceImpact = output?.priceImpact as string\n\n        if (isAtoB) {\n            _tradeData.buy.tradeValue = output?.output ? parseFloat(output?.output) : 0\n        } else {\n            _tradeData.sell.tradeValue = output?.output ? parseFloat(output?.output) : 0\n        }\n        //TODO: renew  tradeCalcData\n        let _tradeCalcData = {...tradeCalcData} as TradeCalcData<C>;\n        return {_tradeData, _tradeCalcData}\n    }\n\n    const throttleSetValue = React.useCallback(_.debounce(async (type, _tradeData, _ammPoolSnapshot) => {\n        const {_tradeData: td, _tradeCalcData} = await calculateTradeData(type, _tradeData, _ammPoolSnapshot)//.then(()=>{\n        setTradeData(td)\n        setTradeCalcData(_tradeCalcData)\n\n    }, wait * 2), [setTradeData, setTradeCalcData, calculateTradeData]);\n\n    const resetSwap = async (coinKey: any, type: 'sell' | 'buy' | undefined, _tradeData: SwapTradeData<IBData<C>> | undefined, _ammPoolSnapshot: AmmPoolSnapshot | undefined) => {\n        if (tradeCalcData\n            && coinKey === `${tradeCalcData.coinSell}-${tradeCalcData.coinBuy}`\n            && _tradeData\n            && type\n            && (!tradeData || (tradeData[ type ].tradeValue !== _tradeData[ type ].tradeValue))) {\n            // calculateTradeData(type,_tradeData,_ammPoolSnapshot)\n            throttleSetValue(type, _tradeData, _ammPoolSnapshot)\n            //throttleSetValue(td,_tradeCalcData);\n\n        } else {\n            let _tradeFloat: Partial<TradeFloat> = {}\n            let _tradeArray: Array<Partial<RawDataTradeItem>> | undefined = undefined;\n            let _tradeCalcData: Partial<TradeCalcData<C>> = coinPairInit({\n                coinKey,\n                _tradeCalcData: {},\n                tokenMap,\n                coinMap\n            })\n            let {\n                amm,\n                market\n            } = getExistedMarket(marketArray, _tradeCalcData.coinSell as string, _tradeCalcData.coinBuy as string);\n            const [, coinA, coinB] = market.match(/(\\w+)-(\\w+)/i)\n\n            setTradeCalcData({...tradeCalcData, ..._tradeCalcData} as TradeCalcData<C>);\n            if (coinMap) {\n                setPair({\n                    coinAInfo: coinMap[ coinA ],\n                    coinBInfo: coinMap[ coinB ],\n                })\n            }\n            if (walletLayer2State.walletLayer2) {\n                const {walletMap} = makeWallet();\n                _tradeCalcData.walletMap = walletMap;\n                getUserTrades(market).then((marketTrades) => {\n                    let _myTradeArray = makeMarketArray(market, marketTrades) as RawDataTradeItem[]\n                    setMyTradeArray(_myTradeArray ? _myTradeArray : [])\n                })\n\n\n            }\n            let apiList = [];\n            //TODO wallet saga done\n            if (marketArray && amm && market && ammMap) {\n                // let pairPromise =  usePairTitleBlock({market})\n                apiList = [\n                    LoopringAPI.exchangeAPI?.getMarketTrades({market}),\n                    pairDetailBlock({coinKey: market, ammKey: amm, ammMap})\n                ];\n                //HiGH: this need add websocket to update infr ticker ammpoolsbalace\n                // @ts-ignore\n                Promise.all([...apiList]).then(\n                    ([{marketTrades}, {ammPoolsBalance, tickMap}]: any[]) => {\n                        setAmmPoolSnapshot(ammPoolsBalance)\n                        if (tokenMap) {\n                            let {_tradeCalcData: _td} = pairDetailDone({\n                                coinKey: `${_tradeCalcData.coinSell}-${_tradeCalcData.coinBuy}`,\n                                market,\n                                ammPoolsBalance,\n                                tickerData: tickMap[ market ] ? tickMap[ market ] : {},\n                                tokenMap,\n                                _tradeCalcData,\n                                coinMap,\n                                marketCoins\n                            })\n                            _tradeCalcData = _td;\n                            _tradeFloat = makeTickView(tickMap[ market ] ? tickMap[ market ] : {})\n                            _tradeArray = makeMarketArray(market, marketTrades)\n                            // @ts-ignore\n                            setTradeCalcData(_tradeCalcData as TradeCalcData<C>);\n                            // @ts-ignore\n                            setTradeFloat(_tradeFloat);\n                            setTradeArray(_tradeArray as RawDataTradeItem[])\n                            // setPair(_pair)\n                            setTradeData({\n                                sell: {\n                                    belong: _tradeCalcData.sellCoinInfoMap ? _tradeCalcData.sellCoinInfoMap[ _tradeCalcData.coinSell ]?.simpleName : undefined,\n                                    balance: _tradeCalcData.walletMap ? _tradeCalcData.walletMap[ _tradeCalcData.coinSell ]?.count : 0\n                                },\n                                // @ts-ignore\n                                buy: {\n                                    belong: _tradeCalcData.sellCoinInfoMap ? _tradeCalcData.sellCoinInfoMap[ _tradeCalcData.coinBuy ]?.simpleName : undefined,\n                                    balance: _tradeCalcData.walletMap ? _tradeCalcData.walletMap[ _tradeCalcData.coinBuy ]?.count : 0\n                                },\n                            } as SwapTradeData<IBData<C>>)\n                        }\n                    }).catch((error) => {\n                    throw new CustomError({...ErrorMap.TRADE_LITE_SET_PAIR_ERROR, options: error})\n                    //TODO solve error\n                })\n\n            }\n        }\n\n    }\n    return {\n        tradeCalcData,\n        tradeFloat,\n        tradeArray,\n        myTradeArray,\n        tradeData,\n        pair,\n        marketArray,\n        onSwapClick,\n        swapBtnI18nKey,\n        handleSwapPanelEvent\n    }\n\n}","import { useCallback, useMemo, useState, useRef, useEffect } from 'react'\n\nimport { useWsAPI, } from './useApi'\n\nimport { ChainId, getAccountArg, getCandlestickArg, getAmmpoolArg, \n    getTickerArg, WsProps } from 'loopring-sdk'\nimport store from 'stores'\n\nconst stateArr = [\n    { key: 0, value: 'Connecting' },\n    { key: 1, value: 'Connected' },\n    { key: 2, value: 'Closing' },\n    { key: 3, value: 'Closed' }\n]\n\nexport const useWebsocket = ({ topics, verify, needApiKey, apiKey, }: { topics: any, needApiKey: boolean, apiKey: string|undefined, verify: boolean, }) => {\n    const ws = useRef<WebSocket | null>(null)\n    const [wsData, setMessage] = useState<any>(undefined)\n    const [readyState, setReadyState] = useState({ key: 0, value: 'Connecting' })\n\n    const chainId = store.getState().trading.chainId\n\n    const api = useWsAPI()\n\n    const creatWebSocket = () => {\n\n        if (!api || !chainId) {\n            return\n        }\n\n        api.getWsKey().then((wsApiKey: any) => {\n            let basePath: string = 'wss://ws.'\n            switch (chainId) {\n                case ChainId.MAINNET:\n                    basePath += process.env.REACT_APP_API_URL\n                    break\n                default:\n                    basePath += process.env.REACT_APP_API_URL_UAT\n                    basePath = 'wss://ws.uat2.loopring.io'\n            }\n\n            console.log('wsApiKey:', wsApiKey.wsKey)\n\n            basePath += '/v3/ws?wsApiKey=' + wsApiKey.wsKey\n    \n            try {\n                ws.current = new WebSocket(basePath)\n\n                const subTopics = (topics: any) => {\n                    let data: any = {\n                        op: 'sub',\n                        unsubscribeAll: 'true',\n                        topics: topics,\n                    }\n            \n                    if (needApiKey && apiKey) {\n                        data.apiKey = apiKey\n                    }\n            \n                    const flat_txt = JSON.stringify(data)\n                    sendMessage(flat_txt)\n                }\n    \n                ws.current.onopen = (_e) => {\n                    setReadyState(stateArr[ws.current?.readyState ?? 0])\n                    // subTopics(topics)\n                }\n                \n                ws.current.onclose = (e) => {\n                    setReadyState(stateArr[ws.current?.readyState ?? 0])\n                }\n                \n                ws.current.onerror = (e) => {\n                    setReadyState(stateArr[ws.current?.readyState ?? 0])\n                }\n    \n                ws.current.onmessage = (e) => {\n                    setMessage(e.data)\n                }\n            } catch (error) {\n                console.log(error)\n            }\n\n        })\n\n    }\n\n    const webSocketInit = () => {\n        if (!ws.current || ws.current.readyState === 3) {\n            creatWebSocket()\n        }\n    }\n\n    const closeWebSocket = () => {\n        ws.current?.close()\n    }\n\n    const sendMessage = (msg: any) => {\n        ws.current?.send(msg)\n    }\n\n    const reconnect = () => {\n        try {\n            closeWebSocket()\n            ws.current = null\n            // creatWebSocket()\n        } catch (e) {\n            console.log(e)\n        }\n    }\n\n    useEffect(() => {\n\n        verify && webSocketInit()\n        return () => {\n            ws.current?.close()\n        }\n    }, [ws, verify, webSocketInit])\n\n    return {\n        wsData,\n        readyState,\n        sendMessage,\n        closeWebSocket,\n        reconnect,\n    }\n}\n\nexport function useWs(topics: any, needApiKey: boolean, apiKey?: string, verify: boolean = true) {\n    const [socketData, setSocketData] = useState({})\n\n    const [isLocalPage, setIsLocalPage] = useState<boolean>(true)\n\n    useEffect(() => {\n\n        let mounted = true\n\n        const checkIsLocalPage = () => {\n            console.log('enter checkIsLocalPage')\n            document.addEventListener('visibilitychange', function () {\n                // page invisible trigger!\n                let isLocalPage = true\n                if (document.visibilityState === 'hidden') {\n                    isLocalPage = false\n                }\n                if (mounted) {\n                    setIsLocalPage(isLocalPage)\n                } else {\n                    console.log('unmounted! dont setIsLocalPage!')\n                }\n            })\n        }\n\n        checkIsLocalPage()\n\n        return () => {\n            mounted = false\n        }\n\n    }, [])\n\n    const { wsData, readyState, closeWebSocket, reconnect, sendMessage, } = useWebsocket({\n        topics,\n        apiKey,\n        needApiKey,\n        verify,\n    })\n\n    useEffect(() => {\n    \n        if (needApiKey && !apiKey) {\n            return\n        }\n\n        if (!verify) {\n            return\n        }\n\n        if (wsData === 'ping') {\n            try {\n                sendMessage('pong')\n            } catch (err) {\n                console.log(err)\n            }\n        } else {\n            if (wsData) {\n                setSocketData(JSON.parse(wsData))\n            }\n        }\n        \n        // if closed and is currente page then, reconnect.\n        if (readyState.key === 3 && isLocalPage) {\n            // reconnect()\n        }\n        // if not current page, close it.\n        if (!isLocalPage) {\n            closeWebSocket()\n        }\n\n    }, [wsData, readyState, isLocalPage, verify, apiKey])\n\n    return {\n        socketData,\n    }\n}\n\nexport function useAmmpoolWs(apiKey: string) {\n\n    let topics: any[] = []\n\n    topics.push(getTickerArg('LRC-ETH'))\n\n    topics.push(getAmmpoolArg('0x18920d6E6Fb7EbE057a4DD9260D6D95845c95036'))\n\n    const needApiKey = false\n\n    const { socketData } = useWs(topics, needApiKey, apiKey)\n\n    return {\n        socketData,\n    }\n\n}\n","import { useState, } from 'react'\n\nimport { getAccountArg, getCandlestickArg, \n  getAmmpoolArg, getTickerArg, getOrderArg, WsTopicType, } from 'loopring-sdk'\n\nimport { useWs } from './useWebsocketApi'\nimport { useCustomDCEffect } from 'hooks/common/useCustomDCEffect'\n\nimport { useGetMarkets } from \"hooks/exchange/useExchangeAPI\"\n\nfunction useHandleSocketData(data: any) {\n  const [account, setAccount] = useState<any>()\n  const [ammPool, setAmmPool] = useState<any>()\n  const [order, setOrder] = useState<any>()\n  const [ticker, setTicker] = useState<any>()\n\n  useCustomDCEffect(() => {\n\n      // console.log('useCustomDCEffect ws!~ data:', data)\n\n      if (!data) {\n        return\n      }\n\n      if (data.op) {\n        return\n      }\n\n      if (!data.topic || !data.topic.topic) {\n        return\n      }\n\n      switch(data.topic.topic) {\n        case WsTopicType.account:\n          // console.log(',data.data:', data.data)\n          setAccount(data.data)\n          break\n        case WsTopicType.ammpool:\n          let ammPool = {\n            baseAmt: data.data[0][0],\n            quoteAmt: data.data[0][1],\n            timestamp: data.data[1],\n          }\n          // console.log(',ammPool:', ammPool)\n          setAmmPool(ammPool)\n          break\n        case WsTopicType.candlestick:\n          break\n        case WsTopicType.order:\n          setOrder(data.data)\n          break\n        case WsTopicType.orderBook:\n          break\n        case WsTopicType.ticker:\n          setTicker(data.data)\n          break\n        case WsTopicType.trade:\n          break\n        default:\n          throw Error('Unknown WsTopicType:' + data.topic.topic)\n      }\n  }, [data])\n\n  return {\n    account,\n    ammPool,\n    order,\n    ticker,\n  }\n}\n\nexport function useSwapPageWs(poolAddress: string, market: string, apiKey: string) {\n\n  let topics: any[] = []\n\n  topics.push(getAccountArg())\n  topics.push(getOrderArg(market))\n  topics.push(getAmmpoolArg(poolAddress))\n\n  const { socketData } = useWs(topics, true, apiKey, !!poolAddress && !!market && !!apiKey)\n\n  return useHandleSocketData(socketData)\n\n}\n\nexport function useQuotePageWs() {\n\n  const { markets } = useGetMarkets()\n\n  let topics: any[] = []\n\n  if (markets) {\n\n    const keys = Reflect.ownKeys(markets.markets)\n\n    let c = 0\n  \n    keys.every((item: any) => {\n      c += 1\n      topics.push(getTickerArg(item))\n      if (c >= 20) {\n        return false\n      }\n\n      return true\n    })\n\n  }\n\n  const { socketData } = useWs(topics, false)\n\n  return useHandleSocketData(socketData)\n\n}\n","import { useRef } from 'react'\n\n// import Qrcode from 'components/qrcodes/Qrcode'\n\n\nimport { useAccount } from 'stores/account/hook'\n\nimport { useGetExchangeInfo, useGetGas, useGetMarkets, useGetTokens } from 'hooks/exchange/useExchangeAPI'\n\nimport { useAmmpoolWs } from 'hooks/common/useWebsocketApi'\nimport { useQuotePageWs } from 'hooks/exchange/useWsAPI'\n\nconst DebugPage = () => {\n\n  const {ticker} = useQuotePageWs()\n\n  return (\n    <div>\n      Debug\n      <div>wsdata: {JSON.stringify(ticker)}</div>\n    </div>\n  )\n\n}\n\nexport default DebugPage\n","import React, { useEffect } from 'react'\nimport { TransactionTable, RawDataTransactionItem, TransactionTradeTypes, TransactionSide, TransactionStatus } from '@loopring-web/component-lib'\nimport { WithTranslation, withTranslation } from 'react-i18next'\nimport { Box, Paper } from '@material-ui/core'\nimport styled from '@emotion/styled'\nimport moment from 'moment'\nimport store from 'stores'\nimport { LoopringAPI } from 'stores/apis/api'\nimport { volumeToCount } from 'hooks/help'\n// import { useGetTxs } from './hooks'\n\nconst StylePaper = styled(Box)`\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  height: 100%;\n  flex: 1;\n  background-color: ${({ theme }) => theme.colorBase.background().default};\n  border-radius: ${({ theme }) => theme.unit}px;\n  padding: 20px;\n\n  .title {\n    font-family: Gilroy-Medium;\n    font-size: ${({ theme }) => theme.unit * 3}px;\n    line-height: 19px;\n  }\n\n  .tableWrapper {\n    display: flex;\n    margin-top: 20px;\n    border: 1px solid ${({ theme }) => theme.colorBase.borderColor};\n    border-radius: ${({ theme }) => theme.unit}px;\n    padding: 26px 0;\n    flex: 1;\n    \n    .rdg {\n      flex: 1;\n    }\n  }\n` as typeof Paper;\n\n// export type RawDataTransactionItem2 = {\n//   token?: string,\n//   tradeType: TransactionTradeTypes,\n//   from: string | TransactionSide;\n//   to: string | TransactionSide;\n//   amount: number;\n//   fee: {\n//       unit: string;\n//       value: number;\n//   };\n//   memo?: string;\n//   time: number;\n//   txnHash: string;\n//   status: TransactionStatus;\n//   path?: string;\n// }\n\nconst TxPanel = withTranslation('common')((rest:WithTranslation<'common'>) => {\n    const container = React.useRef(null);\n    const [pageSize, setPageSize] = React.useState(10);\n    const [txTableData, setTxTableData] = React.useState<RawDataTransactionItem[]>([]);\n\n    const { accountId,apiKey } = store.getState().account;\n\n    useEffect(() => {\n        (async function getUserApi () {\n            if (LoopringAPI && LoopringAPI.userAPI && accountId && apiKey) {\n                const userTxns = await LoopringAPI.userAPI.getUserTranferList({\n                    accountId,\n                }, apiKey)\n                const mappingList = userTxns.userTransfers.map(o => ({\n                  token: o.symbol,\n                  from: o.senderAddress,\n                  to: o.receiverAddress,\n                  // amount: Number(o.amount),\n                  amount: Number(volumeToCount(o.symbol, o.amount)),\n                  fee: {\n                    unit: o.feeTokenSymbol || '',\n                    value: Number(volumeToCount(o.symbol, o.feeAmount || 0))\n                  },\n                  memo: o.memo || '',\n                  time: o.timestamp,\n                  txnHash: o.hash,\n                  status: o.status === 'processed' ? TransactionStatus.processed : o.status === 'processing' ? TransactionStatus.processing : o.status === 'received' ? TransactionStatus.received : TransactionStatus.failed,\n                  tradeType: o.txType === 'TRANSFER' ? TransactionTradeTypes.transfer : o.txType === 'DEPOSIT' ? TransactionTradeTypes.deposit : TransactionTradeTypes.withdraw,\n                }))\n                setTxTableData(mappingList)\n            }\n        })()\n    }, [accountId, apiKey])\n\n    React.useEffect(() => {\n        // @ts-ignore\n        let height = container?.current?.offsetHeight;\n        if (height) {\n            setPageSize(Math.floor((height - 120) / 44) - 2);\n        }\n    }, [container, pageSize]);\n\n    return (\n        <StylePaper ref={container}>\n            <div className=\"title\">Transactions</div>\n            <div className=\"tableWrapper\">\n                <TransactionTable {...{\n                  // rawData: txList,\n                  rawData: txTableData,\n                  pagination: {\n                    pageSize: pageSize\n                  },\n                  showFilter: true,\n                  ...rest\n                }} />\n            </div>\n        </StylePaper>\n    )\n})\n\nexport default TxPanel\n","import { useCallback, useEffect, useRef, useState } from 'react'\nimport { WithTranslation, withTranslation } from 'react-i18next'\nimport { PriceTag } from '@loopring-web/component-lib/static-resource'\nimport { Box, Paper, Typography } from '@material-ui/core'\nimport styled from '@emotion/styled'\nimport {\n    AssetsTable,\n    AssetTitle,\n    AssetTitleProps,\n    ChartType,\n    DoughnutChart,\n    ScaleAreaChart,\n    ToggleButtonGroup,\n    TokenType,\n} from '@loopring-web/component-lib'\nimport { useModals } from 'hooks/modal/useModals'\n// import { useGetUserBalances } from 'hooks/exchange/useUserAPI'\nimport { useGetTokens } from 'hooks/exchange/useExchangeAPI'\nimport { volumeToCount } from 'hooks/help'\nimport { LoopringAPI } from 'stores/apis/api'\nimport { AssetType } from 'loopring-sdk'\nimport store from 'stores'\nimport { useWalletLayer1 } from 'stores/walletLayer1'\nimport { makeWallet } from 'hooks/help'\nimport { EmptyValueTag } from '@loopring-web/component-lib/src/static-resource'\n\nconst StylePaper = styled(Box)`\n  width: 100%;\n  height: 100%;\n  flex: 1;\n  background-color: ${({theme}) => theme.colorBase.background().default};\n  border-radius: ${({theme}) => theme.unit}px;\n  padding: 20px;\n\n  .title {\n    font-family: Gilroy-Medium;\n    font-size: ${({theme}) => theme.unit * 3}px;\n    line-height: 19px;\n  }\n\n  .tableWrapper {\n    display: flex;\n    flex: 1;\n    height: 100%;\n    border: 1px solid ${({theme}) => theme.colorBase.borderColor};\n    border-radius: ${({theme}) => theme.unit}px;\n    padding: 26px 0;\n  }\n` as typeof Box;\n\nconst StyledChartWrapper = styled(Box)`\n  height: 225px;\n\n  > div {\n    position: relative;\n    width: calc(50% - 6px);\n    height: 100%;\n    background-color: ${({theme}) => theme.colorBase.background().default};\n    border: 1px solid ${({theme}) => theme.colorBase.borderColor};\n    border-radius: ${({theme}) => theme.unit}px;\n    padding: ${({theme}) => theme.unit * 2.5}px ${({theme}) => theme.unit * 3}px;\n  }\n`\n\nconst StyledBtnGroupWrapper = styled(Box)`\n  position: absolute;\n  z-index: 10;\n  right: ${({theme}) => theme.unit * 3}px;\n  bottom: ${({theme}) => theme.unit * 2.5}px;\n`\n\nconst toggleData = [\n    // {value: '24 H', key: '24 H'},\n    {value: 'week', key: '1 W'},\n    {value: 'all', key: 'ALL'},\n]\n\n// const testTrendData: any = [\n//     {\n//         timeStamp: 150,\n//         close: Math.random() + 4,\n//     },\n//     {\n//         timeStamp: 160,\n//         close: Math.random() + 4,\n//     },\n//     {\n//         timeStamp: 170,\n//         close: Math.random() + 4,\n//     },\n//     {\n//         timeStamp: 180,\n//         close: Math.random() + 4,\n//     },\n//     {\n//         timeStamp: 190,\n//         close: Math.random() + 4,\n//     },\n//     {\n//         timeStamp: 200,\n//         close: Math.random() + 4,\n//     },\n//     {\n//         timeStamp: 210,\n//         close: Math.random() + 4,\n//     },\n//     {\n//         timeStamp: 220,\n//         close: Math.random() + 4,\n//     },\n//     {\n//         timeStamp: 230,\n//         close: Math.random() + 4,\n//     },\n//     {\n//         timeStamp: 240,\n//         close: Math.random() + 4,\n//     },\n// ]\n\nexport type ITokenInfoItem = {\n    token: string,\n    detail: {\n        price: string,\n        symbol: string,\n        updatedAt: number\n    }\n}\n\nexport type TrendDataItem = {\n    timeStamp: number;\n    close: number;\n}\n\nconst AssetPanel = withTranslation('common')(({t, ...rest}: WithTranslation) => {\n    const container = useRef(null);\n    const [pageSize, setPageSize] = useState(10);\n    const [chartPeriod, setChartPeriod] = useState('week')\n    const [chartData, setChartData] = useState<TrendDataItem[]>([])\n    \n    const { accAddr } = store.getState().account\n    const { walletLayer2 } = store.getState().walletLayer2;\n    const { ammMap } = store.getState().amm.ammMap\n    const walletMap = makeWallet()\n    const assetsKeyList = walletMap && walletMap.walletMap ? Object.keys(walletMap.walletMap) : []\n    const assetsDetailList = walletMap && walletMap.walletMap ? Object.values(walletMap.walletMap) : []\n    const assetsList = assetsKeyList.map((key, index) => ({\n        token: key,\n        detail: assetsDetailList[index]\n    }))\n\n    const getUserTotalAssets = useCallback(async (limit: number = 7) => {\n        const userAssets = await LoopringAPI.walletAPI?.getUserAssets({\n            wallet: accAddr,\n            assetType: AssetType.DEX,\n            limit: limit // TODO: minium unit is day, discuss with pm later\n        })\n        if (userAssets && userAssets.userAssets.length && !!userAssets.userAssets.length) {\n            setChartData(userAssets.userAssets.map(o => ({\n                timeStamp: Number(o.createdAt),\n                close: Number(o.amount)\n            })))\n        }\n    }, [accAddr])\n\n    useEffect(() => {\n        if (LoopringAPI && LoopringAPI.walletAPI && walletLayer2) {\n            getUserTotalAssets()\n        }\n    }, [walletLayer2, getUserTotalAssets])\n\n    useEffect(() => {\n        // @ts-ignore\n        let height = container?.current?.offsetHeight;\n        if (height) {\n            setPageSize(Math.floor((height - 120) / 44) - 1);\n        }\n    }, [container, pageSize]);\n\n    const {\n        ShowDeposit,\n        ShowTransfer,\n        ShowWithdraw,\n        ShowResetAccount,\n    } = useModals()\n\n    const { updateWalletLayer1 } = useWalletLayer1()\n\n    const onShowDeposit = useCallback(() => {\n        updateWalletLayer1()\n        ShowDeposit(true)\n    }, [ShowDeposit, updateWalletLayer1])\n\n    const onShowTransfer = () => {\n        ShowTransfer(true)\n    }\n\n    const onShowWithdraw = () => {\n        ShowWithdraw(true)\n    }\n\n    const handleChartPeriodChange = useCallback((event: React.MouseEvent<HTMLElement, MouseEvent>, newValue: string) => {\n        const limit = newValue === 'week' ? 7 : 9999\n        getUserTotalAssets(limit)\n    }, [getUserTotalAssets])\n\n    // const { tokens: tokensAll } = useGetTokens()\n\n    // const tokens = tokensAll?.tokenSymbolMap\n\n    // const { balances } = useGetUserBalances(tokens)\n\n    // const { walletLayer2 } = store.getState().walletLayer2;\n    const { faitPrices } = store.getState().system\n\n    const tokenPriceList = faitPrices ? Object.entries(faitPrices).map(o => ({\n        token: o[ 0 ],\n        detail: o[ 1 ]\n    })) as ITokenInfoItem[] : []\n\n    let jointLPTokenValue = 0\n    assetsList.filter(o => o.token.split('-')[0] === 'LP').forEach(o => {\n        const result = o.token.split('-')\n        result.splice(0, 1, 'AMM')\n        const ammToken = result.join('-')\n        const ammTokenList = Object.keys(ammMap)\n        const tokenValue = ammTokenList.includes(ammToken) && ammMap[ammToken] ? Number(ammMap[ammToken].amountDollar) : 0\n        jointLPTokenValue += tokenValue\n    });\n\n    const doughnutData = assetsList.filter(o => o.token.split('-')[0] !== 'LP').map((tokenInfo) => {\n        const tokenPriceUSDT = tokenInfo.token === 'DAI' ? 1 : Number(tokenPriceList.find(o => o.token === tokenInfo.token)?.detail.price) / Number(tokenPriceList.find(o => o.token === 'USDT')?.detail.price)\n        return ({\n            name: tokenInfo.token,\n            value: Number(volumeToCount(tokenInfo.token, tokenInfo.detail?.detail?.total as string)) * tokenPriceUSDT\n        })\n    })\n    const formattedDoughnutData = [...doughnutData, {\n            name: 'LP-Token',\n            value: jointLPTokenValue\n        }]\n    const AssetTitleProps: AssetTitleProps = {\n        assetInfo: {\n            totalAsset: formattedDoughnutData.map(o => o.value).reduce((prev, next) => {\n                return prev + next\n            }, 0),\n            priceTag: PriceTag.Dollar,\n        },\n        onShowDeposit,\n        onShowTransfer,\n        onShowWithdraw,\n    }\n\n    const assetsRawData = assetsList.map((tokenInfo) => {\n        const tokenPriceUSDT = Number(tokenPriceList.find(o => o.token === tokenInfo.token)?.detail.price) / Number(tokenPriceList.find(o => o.token === 'USDT')?.detail.price)\n        return ({\n            token: {\n                type: tokenInfo.token.split('-')[0] === 'LP' ? TokenType.lp : TokenType.single,\n                value: tokenInfo.token\n            },\n            amount: String(Number(volumeToCount(tokenInfo.token, tokenInfo.detail?.detail.total as string)).toFixed(6)) || EmptyValueTag,\n            available: String(tokenInfo.detail?.count) || EmptyValueTag,\n            locked: String(tokenInfo.detail?.detail.locked) || EmptyValueTag,\n            smallBalance: tokenPriceUSDT * Number(volumeToCount(tokenInfo.token, tokenInfo.detail?.detail.total as string)) < 1,\n        })\n    })\n\n    return (\n        <>\n            <Box>\n                <AssetTitle  {...{\n                    t,\n                    ...rest,\n                    ...AssetTitleProps\n                }} />\n            </Box>\n\n            {/*<div className=\"title\">{t('labelAssetsTitle')}</div>*/}\n\n            <StyledChartWrapper display={'flex'} justifyContent={'space-between'} alignItems={'center'} marginTop={2}>\n                <Paper component={'div'}>\n                    <Typography component=\"span\" color=\"textSecondary\" variant=\"body1\">Asset Distribution</Typography>\n                    <DoughnutChart data={walletLayer2 ? formattedDoughnutData : []}/>\n                </Paper>\n                <Paper component={'div'}>\n                    <Typography component=\"span\" color=\"textSecondary\" variant=\"body1\">Total Assets</Typography>\n                    <ScaleAreaChart type={ChartType.Trend} data={chartData}/>\n                    <StyledBtnGroupWrapper>\n                        <ToggleButtonGroup exclusive size=\"small\" {...{\n                            ...rest,\n                            t,\n                            data: toggleData,\n                            value: chartPeriod,\n                            setValue: setChartPeriod,\n                            onChange: handleChartPeriodChange\n                        }} />\n                    </StyledBtnGroupWrapper>\n                </Paper>\n            </StyledChartWrapper>\n            <StylePaper marginTop={2}>\n                <div className=\"tableWrapper\" ref={container}>\n                    <AssetsTable {...{\n                        rawData: assetsRawData,\n                        pagination: {\n                            pageSize: pageSize\n                        },\n                        showFiliter: true,\n                        ...rest\n                    }} />\n                </div>\n            </StylePaper>\n        </>\n    )\n})\n\nexport default AssetPanel\n","import React, { useEffect } from 'react'\nimport { TradeTable, TradeFilterTable, RawDataTradeItem } from '@loopring-web/component-lib'\nimport { WithTranslation, withTranslation } from 'react-i18next'\nimport styled from '@emotion/styled'\nimport { Box, Paper } from '@material-ui/core'\nimport store from 'stores'\nimport { LoopringAPI } from 'stores/apis/api'\nimport { volumeToCount } from 'hooks/help'\n\nconst StylePaper = styled(Box)`\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  height: 100%;\n  flex: 1;\n  background-color: ${({ theme }) => theme.colorBase.background().default};\n  border-radius: ${({ theme }) => theme.unit}px;\n  padding: 20px;\n\n  .title {\n    font-family: Gilroy-Medium;\n    font-size: ${({ theme }) => theme.unit * 3}px;\n    line-height: 19px;\n  }\n\n  .tableWrapper {\n    display: flex;\n    flex: 1;\n    margin-top: 20px;\n    border: 1px solid ${({ theme }) => theme.colorBase.borderColor};\n    border-radius: ${({ theme }) => theme.unit}px;\n    padding: 26px 0;\n\n    .rdg {\n      flex: 1;\n    }\n  }\n` as typeof Paper;\n\n// side: keyof typeof TradeTypes;\n//     amount: {\n//         from: {\n//             key: string;\n//             value: number|undefined;\n//         },\n//         to: {\n//             key: string;\n//             value: number|undefined;\n//         }\n//     };\n//     price:{\n//         key:string\n//         value:number|undefined,\n//     }\n//     // priceDollar: number;\n//     // priceYuan: number;\n//     fee: {\n//         key: string;\n//         value: number|undefined;\n//     };\n//     time: number;\n\nconst TradePanel = withTranslation('common')((rest:WithTranslation<'common'>) => {\n    const container = React.useRef(null);\n    const [pageSize, setPageSize] = React.useState(10);\n    const [originalData, setOriginalData] = React.useState<RawDataTradeItem[]>([])\n\n    const { accountId,apiKey } = store.getState().account;\n\n    useEffect(() => {\n        (async function getUserApi () {\n            if (LoopringAPI && LoopringAPI.userAPI && accountId && apiKey) {\n                const userTrades = await LoopringAPI.userAPI.getUserTrades({\n                    accountId,\n                }, apiKey)\n                if (userTrades && userTrades.userTrades) {\n                  setOriginalData(userTrades.userTrades.map(o => {\n                    const marketList = o.market.split('-')\n                    // due to AMM case, we cannot use first index\n                    const baseToken = marketList[marketList.length - 2]\n                    const quoteToken = marketList[marketList.length - 1]\n\n                    return ({\n                      side: o.side,\n                      price: {\n                        key: baseToken,\n                        value: Number(o.price)\n                      },\n                      fee: {\n                        key: baseToken,\n                        value: Number(volumeToCount(baseToken, o.fee))\n                      },\n                      time: Number(o.tradeTime),\n                      amount: {\n                        from: {\n                          key: baseToken,\n                          value: Number(volumeToCount(baseToken, o.volume))\n                        },\n                        to: {\n                          key: quoteToken,\n                          value: Number(volumeToCount(baseToken, o.volume)) / Number(o.price)\n                        }\n                      }\n                    })\n                  }))\n                }\n            }\n        })()\n    }, [accountId, apiKey])\n\n    React.useEffect(() => {\n        // @ts-ignore\n        let height = container?.current?.offsetHeight;\n        if (height) {\n            setPageSize(Math.floor((height - 120) / 44) - 2);\n        }\n    }, [container, pageSize]);\n\n    // const txList: any[] = []\n\n    return (\n        <>\n            <StylePaper ref={container}>\n                <div className=\"title\">Trades</div>\n                <div className=\"tableWrapper\">\n                    <TradeTable {...{\n                      rawData: originalData,\n                      pagination: {\n                        pageSize: pageSize\n                      },\n                      showFilter: true,\n                      ...rest}}/>\n                </div>\n            </StylePaper>\n        </>\n    )\n})\n\nexport default TradePanel\n","\nimport React, { useEffect } from 'react'\nimport { OrderHistoryTable, OrderHistoryRawDataItem } from '@loopring-web/component-lib'\nimport { TradeTypes } from '@loopring-web/component-lib/static-resource'\nimport { WithTranslation, withTranslation } from 'react-i18next'\nimport { Box, Paper } from '@material-ui/core'\nimport styled from '@emotion/styled'\nimport store from 'stores'\nimport { LoopringAPI } from 'stores/apis/api'\nimport { volumeToCount } from 'hooks/help'\n\nconst StylePaper = styled(Box)`\n    display: flex;\n    flex-direction: column;\n    width: 100%;\n    height: 100%;\n    flex: 1;\n    background-color: ${({ theme }) => theme.colorBase.background().default};\n    border-radius: ${({ theme }) => theme.unit}px;\n    padding: 20px;\n\n    .title {\n        font-family: Gilroy-Medium;\n        font-size: ${({ theme }) => theme.unit * 3}px;\n        line-height: 19px;\n    }\n\n    .tableWrapper {\n        display: flex;\n        flex: 1;\n        margin-top: 20px;\n        border: 1px solid ${({ theme }) => theme.colorBase.borderColor};\n        border-radius: ${({ theme }) => theme.unit}px;\n        padding: 26px 0;\n\n        .rdg {\n            flex: 1;\n        }\n    }\n` as typeof Paper;\n\n// export type OrderHistoryRawDataItem = {\n//     side: keyof typeof TradeTypes;\n//     amount: OrderPair;\n//     average: number;\n//     filledAmount: OrderPair;\n//     filledPrice: {\n//         key: string;\n//         value: number;\n//     }\n//     time: number;\n//     status: keyof typeof TradeStatus;\n//     detailTable: OrderHistoryTableDetailItem[]\n// }\n\nconst OrderPanel = withTranslation('common')((rest: WithTranslation) => {\n    const container = React.useRef(null);\n    const [pageSize, setPageSize] = React.useState(10);\n    const [orderOriginalData, setOrderOriginalData] = React.useState<OrderHistoryRawDataItem[]>([])\n\n    const { accountId,apiKey } = store.getState().account;\n\n    useEffect(() => {\n        (async function getUserApi () {\n            if (LoopringAPI && LoopringAPI.userAPI && accountId && apiKey) {\n                const userOrders = await LoopringAPI.userAPI.getOrders({\n                    accountId,\n                }, apiKey)\n                if (userOrders && Array.isArray(userOrders.orders) && !!userOrders.orders.length) {\n                    setOrderOriginalData(userOrders.orders.map(o => {\n                        const marketList = o.market.split('-')\n                        // due to AMM case, we cannot use first index\n                        const baseToken = marketList[marketList.length - 2]\n                        const quoteToken = marketList[marketList.length - 1]\n                        const { baseAmount, quoteAmount, baseFilled, quoteFilled } = o.volumes\n\n                        return ({\n                            side: o.side === 'BUY' ? TradeTypes.Buy : TradeTypes.Sell,\n                            amount: {\n                                from: {\n                                    key: baseToken,\n                                    // value: Number(baseAmount)\n                                    value: Number(volumeToCount(baseToken, baseAmount))\n                                },\n                                to: {\n                                    key: quoteToken,\n                                    value: Number(volumeToCount(quoteToken, quoteAmount))\n                                }\n                            },\n                            // average: Number(o.price),\n                            average: Number(volumeToCount(quoteToken, quoteFilled)) / Number(volumeToCount(baseToken, baseFilled)),\n                            filledAmount: {\n                                from: {\n                                    key: baseToken,\n                                    // value: Number(baseFilled)\n                                    value: Number(volumeToCount(baseToken, baseFilled))\n                                },\n                                to: {\n                                    key: quoteToken,\n                                    value: Number(volumeToCount(quoteToken, quoteFilled))\n                                }\n                            },\n                            filledPrice: {\n                                key: quoteToken,\n                                value: Number(o.price)\n                            },\n                            time: o.validity.start * 1000,\n                            status: o.status,\n                            detailTable: []\n                        })\n                    }))\n                }\n            }\n        })()\n    }, [accountId, apiKey])\n\n    React.useEffect(() => {\n        // @ts-ignore\n        let height = container?.current?.offsetHeight;\n        if (height) {\n            setPageSize(Math.floor((height - 120) / 44) - 2);\n        }\n    }, [container, pageSize]);\n\n    return (\n        <>\n            <StylePaper ref={container}>\n                <div className=\"title\">Order History</div>\n                <div className=\"tableWrapper\">\n                    <OrderHistoryTable {...{\n                        pagination: {\n                            pageSize: pageSize\n                        },\n                        rawData: orderOriginalData,\n                        showFilter: true,\n                        ...rest\n                    }} />\n                </div>\n            </StylePaper>\n        </>\n    )\n})\n\nexport default OrderPanel\n","import styled from '@emotion/styled';\nimport { Box, Button, Divider, Grid, Switch, Typography } from '@material-ui/core';\nimport React from 'react';\nimport { UpColor, Currency, DropDownIcon } from '@loopring-web/component-lib/src/static-resource';\nimport {\n    BtnLanguage,\n    OutlineSelect,\n    OutlineSelectItem, QRCodePanel,\n    TypographyStrong, useSettings\n} from '@loopring-web/component-lib';\nimport { Trans, useTranslation, WithTranslation, withTranslation } from 'react-i18next';\nimport { useTheme } from '@emotion/react';\nimport { LanguageKeys } from '@loopring-web/component-lib/static-resource';\n\n// const MuiModalStyled = styled(MuiModal)`\n//   //background: ${({theme}) => theme.colorBase.background().secondary};\n//   // .MuiBackdrop-root{\n//   //   z-index: -1;\n//   //   background-color: ${({theme}) => theme.colorBase.background().outline};\n//   // }\n//   display: flex;\n//   align-items: center;\n//   justify-content: center;\n// ` as typeof MuiModal;\n// const BlockStyled = styled(Box)`\n//   ${({theme}) => theme.border.defaultFrame({c_key: 'blur', d_R: 1})};\n//   background: ${({theme}) => theme.colorBase.background().secondary};\n//   max-height: var(--panel-setting-height);\n//   max-width: var(--panel-setting-width);\n//   display: flex;\n//   justify-content: space-around;\n//   align-items: center;\n//   overflow: scroll;\n//   padding: ${({theme}) => theme.unit*8}px\n// `;\n\nconst StyledPaper = styled(Grid)`\n  width: 100%;\n  height: 100%;\n  background-color: ${({theme}) => theme.colorBase.background().default};\n  ${({theme}) => theme.border.defaultFrame({c_key: 'blur', d_R: 1})};\n`\n\nconst StyledSwitch = styled(Switch)(({theme}) => ({\n    \"& .Mui-checked\": {\n        color: theme.colorBase.textPrimary,\n        '& + .MuiSwitch-track.MuiSwitch-track': {\n            border: `solid ${theme.colorBase.success}`,\n        },\n        '& .MuiSwitch-thumb': {\n            backgroundColor: theme.colorBase.success,\n        }\n    },\n    '& .MuiSwitch-track': {\n        border: `solid ${theme.colorBase.error}`,\n        opacity: 1\n    },\n    '& .MuiSwitch-thumb': {\n        backgroundColor: theme.colorBase.error,\n    }\n}));\n\nexport const BtnCurrency = ({t, currency, label, handleChange}: any) => {\n    const [state, setState] = React.useState<string>(currency ? currency : Currency.dollar);\n    const _handleChange = React.useCallback((event: React.ChangeEvent<any>) => {\n        setState(event.target.value);\n        if (handleChange) {\n\n            handleChange(event.target.value)\n        }\n    }, [handleChange])\n    return <OutlineSelect aria-label={t(label)} IconComponent={DropDownIcon}\n                          labelId=\"language-selected\"\n                          id=\"language-selected\"\n                          value={state} autoWidth\n                          onChange={_handleChange}>\n        <OutlineSelectItem value={Currency.dollar}>$ {t('labelUSDollar')}</OutlineSelectItem>\n            <OutlineSelectItem value={Currency.yen}>¥ {t('labelCNYYuan')}</OutlineSelectItem>\n    </OutlineSelect>\n}\n\nconst StyledDivider = styled(Divider)`\n  margin: ${({theme}) => theme.unit}px 0 ${({theme}) => theme.unit}px 0px;\n`\nconst DividerBlock = styled(Divider)`\n  margin: 0;\n  flex: 1;\n  width: 1px;\n  height: ${({theme}) => theme.unit * 3}px;\n  background: ${({theme}) => theme.colorBase.focus};\n`\n\n\n\nexport const SettingPanel = withTranslation(['common', 'layout'])(({t,i18n, ...rest}: & WithTranslation) => {\n    const theme = useTheme();\n    const {setUpColor,setLanguage,setCurrency,currency,upColor} = useSettings()\n    const language = i18n.language;\n    const handleOnLanguageChange = (lang: LanguageKeys) => {\n        setLanguage(lang);\n        i18n.changeLanguage(lang);\n    }\n    const handleOnCurrencyChange = (value: any) => {\n        setCurrency(value);\n    }\n    const handleColorChange = (e:any) => {\n        if(e.target.checked){\n            setUpColor(UpColor.green) ;\n        }else{\n            setUpColor(UpColor.red);\n        }\n    }\n    return <Grid container direction={'column'} justifyContent={'space-between'} alignItems={'stretch'} flexWrap={'nowrap'}>\n        <Typography variant={'h4'} component={'h3'} marginY={1} paddingLeft={2}>{t('labelTitleSecurity')}</Typography>\n        <StyledPaper item xs={12} display={'flex'} flexDirection={'column'} marginBottom={2} paddingY={2}>\n            <Box component={'section'} display={'flex'} flexDirection={'column'}>\n                <Typography variant={'h5'} component={'h4'} paddingX={2}>{t('labelTitleResetL2Keypair')}</Typography>\n                <StyledDivider/>\n                <Grid container display={'flex'} flexDirection={'row'} justifyContent={'stretch'}\n                      alignItems={'flex-start'} paddingX={2} marginBottom={2}>\n                    <Grid item xs={8} display={'flex'} flexDirection={'column'}>\n                        <Typography variant={'body1'} component={'p'}>\n                            <Trans i18nKey=\"resetDescription\">\n                                Create a new signing key for layer-2 authentication (no backup needed). This will\n                                <TypographyStrong component={'span'}>cancel all your pending orders</TypographyStrong>.\n                            </Trans>\n                        </Typography>\n                    </Grid>\n                    <Grid item xs={4} display={'flex'} flexDirection={'column'} justifyContent={'space-evenly'}\n                          alignItems={'flex-end'} alignSelf={'stretch'}>\n                        <Button variant={'outlined'} size={'medium'} color={'primary'}>{t('labelBtnReset')}</Button>\n                    </Grid>\n                    <Grid item xs={12} display={'flex'} flexDirection={'row'} justifyContent={'flex-end'}\n                          alignItems={'center'} alignSelf={'stretch'}>\n                        <Typography variant={'body2'} component={'p'}\n                                    paddingTop={1}>{t('labelHadChangPassword', {passDay: '14 hours'})}</Typography>\n                    </Grid>\n\n                </Grid>\n            </Box>\n            <Box component={'section'} display={'flex'} flexDirection={'column'}>\n                <Typography variant={'h5'} component={'h4'} paddingX={2}>{t('labelTitleExportAccount')}</Typography>\n                <StyledDivider/>\n                <Grid container display={'flex'} flexDirection={'row'} justifyContent={'stretch'}\n                      alignItems={'flex-start'} paddingX={2} marginBottom={2}>\n                    <Grid item xs={7} display={'flex'} flexDirection={'column'}>\n                        <Typography variant={'body1'} component={'p'}>{t('descriptionExportAccount')}</Typography>\n                    </Grid>\n                    <Grid item xs={5} display={'flex'} flexDirection={'column'} justifyContent={'space-evenly'}\n                          alignItems={'flex-end'} alignSelf={'stretch'}>\n                        <Grid item> <Button variant={'outlined'} size={'medium'}\n                                            color={'primary'}>{t('labelBtnExportAccount')}</Button></Grid>\n                    </Grid>\n                </Grid>\n            </Box>\n        </StyledPaper>\n\n        <Typography variant={'h4'} component={'h3'} marginY={1} paddingLeft={2}>{t('labelTitlePreferences')}</Typography>\n        <StyledPaper item xs={12} display={'flex'} flexDirection={'column'} marginBottom={2} paddingY={2}>\n            <Box component={'section'} display={'flex'} flexDirection={'column'}>\n                {/*<Typography variant={'h5'} component={'h4'} paddingX={2}>{t('labelTitleLayout')}</Typography>*/}\n                {/*<StyledDivider/>*/}\n                <Grid container display={'flex'} flexDirection={'row'} justifyContent={'stretch'}\n                      alignItems={'flex-start'} paddingX={2} marginBottom={2}>\n                    <Grid item xs={7} display={'flex'} flexDirection={'column'}>\n                        <Typography variant={'body1'} component={'p'}>{t('labelLanguage')}</Typography>\n                    </Grid>\n                    <Grid item xs={5} display={'flex'} flexDirection={'column'} justifyContent={'space-evenly'}\n                          alignItems={'flex-end'} alignSelf={'stretch'}>\n                        <Grid item>\n                            <BtnLanguage {...{\n                                t, ...rest,\n                                language,\n                                label: 'languageSetting',\n                                handleChange: handleOnLanguageChange\n                            }}></BtnLanguage>\n                        </Grid>\n                    </Grid>\n                </Grid>\n                <Grid container display={'flex'} flexDirection={'row'} justifyContent={'stretch'}\n                      alignItems={'flex-start'} paddingX={2} marginBottom={2}>\n                    <Grid item xs={7} display={'flex'} flexDirection={'column'}>\n                        <Typography variant={'body1'} component={'p'}>{t('labelCurrency')}</Typography>\n                    </Grid>\n                    <Grid item xs={5} display={'flex'} flexDirection={'column'} justifyContent={'space-evenly'}\n                          alignItems={'flex-end'} alignSelf={'stretch'}>\n                        <Grid item>\n                            <BtnCurrency {...{\n                                t, ...rest,\n                                currency,\n                                label: 'currencySetting',\n                                handleChange: handleOnCurrencyChange\n                            }}></BtnCurrency>\n\n                        </Grid>\n                    </Grid>\n                </Grid>\n                <Grid container display={'flex'} flexDirection={'row'} justifyContent={'stretch'}\n                      alignItems={'flex-start'} paddingX={2}>\n                    <Grid item xs={7} display={'flex'} flexDirection={'column'}>\n                        <Typography variant={'body1'} component={'p'}>{t('labelColors')}</Typography>\n                    </Grid>\n                    <Grid item xs={5} display={'flex'} flexDirection={'row'} justifyContent={'flex-end'}\n                          alignItems={'center'} alignSelf={'stretch'}>\n                        <Typography variant={'body1'} component={'span'} paddingX={2}>\n                            <Trans i18nKey=\"whichColorIsUp\">\n                                <span style={{\n                                    textTransform: 'capitalize',\n                                    color: upColor === UpColor.green ? theme.colorBase.success : theme.colorBase.error\n                                }}>{{up: upColor === UpColor.green ? t('labelgreen') : t('labelred')}} up</span>\n                                and <span style={{\n                                textTransform: 'capitalize',\n                                color: upColor === UpColor.green ? theme.colorBase.error : theme.colorBase.success\n                            }}>{{down: upColor === UpColor.green ? t('labelred') : t('labelgreen')}} down</span>\n                            </Trans>\n                        </Typography>\n                        <StyledSwitch checked={upColor === UpColor.green} color=\"default\"\n                                      onChange={handleColorChange}/>\n                    </Grid>\n                </Grid>\n            </Box>\n\n        </StyledPaper>\n\n    </Grid>\n})\n\n// export const SettingPage = ({open,onClose}: { open:boolean, onClose:(e:any)=>void})=>{\n//     return  <MuiModalStyled\n//         open={open}\n//         onClose={onClose}\n//         aria-labelledby=\"modal-modal-title\"\n//         aria-describedby=\"modal-modal-description\"\n//     >\n//         <BlockStyled >\n//            <SettingPanel/>\n//         </BlockStyled>\n//     </MuiModalStyled>\n// }\n\n\n","import { useRouteMatch } from 'react-router'\n\nimport { Box, Paper } from '@material-ui/core'\nimport {\n    DepositPanel,\n    SubMenu,\n    SubMenuList as BasicSubMenuList,\n} from '@loopring-web/component-lib'\nimport { useTranslation, withTranslation } from 'react-i18next'\nimport styled from '@emotion/styled'\nimport { subMenuLayer2 } from '@loopring-web/component-lib/src/static-resource'\n\nimport TxPanel from './TxPanel'\nimport AssetPanel from './AssetPanel'\nimport TradePanel from './TradePanel'\nimport OrderPanel from './OrderPanel'\nimport { SettingPanel } from '../SettingPage';\nimport store from '../../stores';\nimport { AccountStatus } from '../../state_machine/account_machine_spec';\nimport { useModalProps } from '../../layouts/header/hook';\nimport { Redirect } from 'react-router-dom'\n\nexport const subMenu = subMenuLayer2;\nconst BoxStyle = styled(Box)`\n  ${({theme})=>`\n    background-color: ${theme.colorBase.background().default};\n    width: 100%;\n    min-width:auto;\n    ${theme.border.defaultFrame({c_key: 'blur'})};\n    & > div{\n      background-color:initial;\n      border:0;\n      width:auto;\n      min-width: var(--swap-box-width);\n      max-width: 520px;\n    }\n    `\n  }\n   \n` as typeof Box\n\nconst SubMenuList = withTranslation(['layout','common'], { withRef: true })(BasicSubMenuList);\nexport const Layer2Page = () => {\n\n    let match: any = useRouteMatch(\"/layer2/:item\")\n    const {status: accStatus} = store.getState().account;\n    const {t,...rest} = useTranslation()\n    const selected = match?.params.item ?? 'assets';\n    const {depositProps} = useModalProps()\n\n    return <>  {\n        accStatus === AccountStatus.UNCONNNECTED \n            ? <Redirect to=\"/\" />\n            :\n        accStatus === AccountStatus.NOACCOUNT\n    || accStatus === AccountStatus.DEPOSITING\n    || accStatus === AccountStatus.DEPOSIT_TO_CONFIREM ?\n        <BoxStyle display={'flex'} flexWrap={'wrap'} alignItems={'center'} justifyContent={'center'} alignContent={'flex-start'}>\n            <DepositPanel  {...{\n                ...rest, ...depositProps,\n                title: t('depositTitleAndActive'),\n                description: 'depositAndActiveDescription'\n            }} > </DepositPanel>\n        </BoxStyle>: <>\n            <Box width={'200px'} display={'flex'} justifyContent={'stretch'} marginRight={3}>\n                <SubMenu>\n                    <SubMenuList selected={selected} subMenu={subMenu as any} />\n                </SubMenu>\n            </Box>\n            <Box minHeight={420} display={'flex'} alignItems={'stretch'} flexDirection={'column'} marginTop={0} flex={1}>\n                {selected === 'assets' && <AssetPanel />}\n                {selected === 'transactions' && <TxPanel />}\n                {selected === 'trades' && <TradePanel />}\n                {selected === 'orders' && <OrderPanel />}\n                {selected === 'setting' && <SettingPanel />}\n            </Box>\n        </>\n    }\n        </>\n\n\n\n}\n","import { WithTranslation, withTranslation } from 'react-i18next'\nimport { Box, } from '@material-ui/core'\nimport styled from '@emotion/styled'\n\nimport React from 'react';\nimport { useAmmMapUI } from './hook';\n\nimport { PoolsTable } from '@loopring-web/component-lib';\nimport { AmmPoolActivityRule, LoopringMap } from 'loopring-sdk/dist/defs/loopring_defs';\n\nconst StylePaper = styled(Box)`\n  width: 100%;\n  height: 100%;\n  flex: 1;\n  background-color: ${({theme}) => theme.colorBase.background().default};\n  border-radius: ${({theme}) => theme.unit}px;\n\n  .rdg {\n    flex: 1;\n  }\n\n` as typeof Box;\n\n\nexport const PoolsPanel = withTranslation('common')(<R extends { [ key: string ]: any }, I extends { [ key: string ]: any }>\n({t, ammActivityMap, ...rest}: WithTranslation\n    & {\n    ammActivityMap: LoopringMap<LoopringMap<AmmPoolActivityRule[]>> | undefined }) => {\n    const container = React.useRef(null);\n    const [pageSize, setPageSize] = React.useState(10);\n    const {updateTickersUI, rawData, page} = useAmmMapUI({pageSize});\n\n    React.useEffect(() => {\n        // @ts-ignore\n        let height = container?.current?.offsetHeight;\n        if (height) {\n            setPageSize(Math.floor((height - 120) / 44) - 1);\n        }\n    }, [container, pageSize]);\n\n    const handlePageChange = React.useCallback((page) => {\n        updateTickersUI(page)\n    }, [updateTickersUI]);\n    return (\n        <>\n            <StylePaper display={'flex'} flexDirection={'column'} ref={container}>\n                <PoolsTable {...{\n                    rawData,\n                    handlePageChange,\n                    page,\n                    pagination: {\n                        pageSize\n                    }\n                }} />\n            </StylePaper>\n        </>\n    )\n})\n\n","import { AmmPanel, AmmPanelType } from '@loopring-web/component-lib';\nimport { AmmData, AmmInData, CoinInfo, IBData, WalletMap } from '@loopring-web/component-lib/static-resource';\nimport { useAmmPanel } from './hooks';\nimport React from 'react';\nimport { Box } from '@material-ui/core';\nimport { AmmPoolSnapshot, TickerData } from 'loopring-sdk';\nimport { TradeBtnStatus } from '@loopring-web/component-lib/components/panel/index';\n\nexport const AmmPanelView = <T extends AmmData<C extends IBData<I> ? C : IBData<I>>, I,\n    ACD extends AmmInData<I>,\n    C = IBData<I>>({\n                       pair,\n                       walletMap,\n                       ammType, snapShotData,\n                       ...rest\n                   }: {\n    pair: { coinAInfo: CoinInfo<C> | undefined, coinBInfo: CoinInfo<C> | undefined },\n    snapShotData: { tickerData: TickerData | undefined, ammPoolsBalance: AmmPoolSnapshot | undefined } | undefined\n    walletMap: WalletMap<C>\n    ammType?: keyof typeof AmmPanelType\n} & any) => {\n    const {\n        ammCalcData,\n        ammDepositData,\n        ammWithdrawData,\n        handleDepositEvent,\n        handleWithDrawEvent,\n        onAmmWithdrawClick,\n        onAmmDepositClick,\n        ammDepositBtnI18nKey,\n        ammWithdrawBtnI18nKey,\n    } = useAmmPanel({\n        pair,\n        snapShotData, walletMap, ammType: ammType ? ammType : AmmPanelType.Deposit\n    })\n\n    // const [index, setIndex] = React.useState(AmmPanelTypeMap[ tabSelected ]);\n    const isLoading = React.useCallback(()=>{\n        if((!snapShotData || !snapShotData.tradeData || !snapShotData.ammPoolsBalance)\n            &&  ammDepositBtnI18nKey === undefined\n            &&  ammWithdrawBtnI18nKey === undefined\n        ) {\n          return true\n        }\n    },[snapShotData,ammWithdrawBtnI18nKey,ammWithdrawBtnI18nKey])\n\n    return <> {pair ?\n        <AmmPanel {...{...rest}}\n                  ammWithdrawData={ammWithdrawData}\n                  ammDepositData={ammDepositData}\n                  ammCalcData={ammCalcData}\n                  handleDepositEvent={handleDepositEvent}\n                  handleWithDrawEvent={handleWithDrawEvent}\n                  onAmmWithdrawClick={onAmmWithdrawClick}\n                  onAmmDepositClick={onAmmDepositClick}\n                  tabSelected={ammType ? ammType : AmmPanelType.Deposit}\n                  ammDepositBtnI18nKey={ammDepositBtnI18nKey}\n                  ammWithdrawBtnI18nKey={ammWithdrawBtnI18nKey}\n                  ammDepositBtnStatus={isLoading()?TradeBtnStatus.LOADING:TradeBtnStatus.AVAILABLE}\n                  ammWithdrawBtnStatus={isLoading()?TradeBtnStatus.LOADING:TradeBtnStatus.AVAILABLE}\n\n        /> : <Box width={'var(--swap-box-width)'}/>}\n    </>\n\n}","import React, { useState } from \"react\";\nimport { AmmData, AmmInData, CoinInfo, IBData } from '@loopring-web/component-lib/src/static-resource';\nimport { AmmPanelType } from '@loopring-web/component-lib';\nimport { useTokenMap } from '../../../stores/token';\nimport { useAmmMap } from '../../../stores/Amm/AmmMap';\nimport { accountStaticCallBack, ammPairInit, bntLabel, btnClickArray, fnType, makeCache } from '../../../hooks/help';\nimport { WalletMap } from '@loopring-web/component-lib/static-resource';\nimport { AmmPoolSnapshot, TickerData, ammPoolCalc, makeJoinAmmPoolRequest, makeExitAmmPoolRequest, TokenInfo, TokenVolumeV3, } from 'loopring-sdk';\nimport { useCustomDCEffect } from '../../../hooks/common/useCustomDCEffect';\nimport { useAccount } from '../../../stores/account/hook';\nimport store from \"stores\";\n\nimport * as sdk from 'loopring-sdk'\n\nexport const useAmmPanel = <C extends { [ key: string ]: any }>({\n                                                                    pair,\n                                                                    walletMap,\n                                                                    ammType,\n                                                                    snapShotData,\n                                                                }\n                                                                    : {\n    pair: { coinAInfo: CoinInfo<C> | undefined, coinBInfo: CoinInfo<C> | undefined },\n    snapShotData: { tickerData: TickerData | undefined, ammPoolsBalance: AmmPoolSnapshot | undefined } | undefined\n    walletMap: WalletMap<C>\n    ammType: keyof typeof AmmPanelType\n}) => {\n    // const walletLayer2State = useWalletLayer2();\n    const {coinMap, tokenMap} = useTokenMap();\n    const {ammMap} = useAmmMap();\n    const {account} = useAccount();\n\n    const [ammCalcData, setAmmCalcData] = React.useState<AmmInData<C> | undefined>();\n    const [ammDepositData, setAmmDepositData] = React.useState<AmmData<IBData<C>, C>>({\n        coinA: {belong: undefined} as unknown as IBData<C>,\n        coinB: {belong: undefined} as unknown as IBData<C>,\n        slippage: .5\n    } as AmmData<IBData<C>, C>);\n    const [ammWithdrawData, setAmmWithdrawData] = React.useState({\n        coinA: {belong: undefined} as unknown as IBData<C>,\n        coinB: {belong: undefined} as unknown as IBData<C>,\n        slippage: .5\n    } as AmmData<IBData<C>, C>);\n    const [ammDepositBtnI18nKey, setAmmDepositBtnI18nKey] = React.useState<string | undefined>(undefined);\n    const [ammWithdrawBtnI18nKey, setAmmWithdrawBtnI18nKey] = React.useState<string | undefined>(undefined);\n\n    const initAmmData = React.useCallback(async (pair: any) => {\n        let _ammCalcData: Partial<AmmInData<C>> = ammPairInit(\n            {\n                pair,\n                ammType,\n                _ammCalcData: {},\n                tokenMap,\n                coinMap,\n                walletMap: walletMap, //walletLayer2State.walletLayer2,\n                ammMap,\n                tickerData: snapShotData?.tickerData,\n                ammPoolsBalance: snapShotData?.ammPoolsBalance\n            })\n        setAmmCalcData({...ammCalcData, ..._ammCalcData} as AmmInData<C>);\n        if (_ammCalcData.myCoinA) {\n            if (ammType === AmmPanelType.Deposit) {\n                setAmmDepositData({\n                    coinA: _ammCalcData.myCoinA as IBData<C>,\n                    coinB: _ammCalcData.myCoinB as IBData<C>,\n                    slippage: 0.5\n                })\n            } else {\n                setAmmWithdrawData({\n                    coinA: _ammCalcData.myCoinA as IBData<C>,\n                    coinB: _ammCalcData.myCoinB as IBData<C>,\n                    slippage: 0.5\n                })\n            }\n        }\n    }, [snapShotData, walletMap])\n\n    const [snapShot, setSnapShot] = useState<AmmPoolSnapshot>()\n\n    const handleDepositEvent = React.useCallback((data: AmmData<IBData<C>>, type: 'coinA' | 'coinB') => {\n        \n        // snapShotData is undefined?\n        console.log('handleDepositEvent', data, type, snapShotData);\n            \n        setAmmDepositData({\n            coinA: data.coinA,\n            coinB: data.coinA,\n            slippage: 0.6\n        })\n\n        const isAtoB = type === 'coinA'\n\n        const { tokenMap, } = store.getState().tokenMap\n\n        if (!tokenMap || !snapShotData?.ammPoolsBalance) {\n            return\n        }\n\n        const coinA = tokenMap[data.coinA.belong as string]\n        const coinB = tokenMap[data.coinB.belong as string]\n\n        const coinA_TV = snapShotData.ammPoolsBalance.pooled[0]\n        const coinB_TV = snapShotData.ammPoolsBalance.pooled[1]\n\n        const covertVal = data.coinA.tradeValue ? sdk.toBig(data.coinA.tradeValue).times('1e' + isAtoB ? coinA.decimals : coinB.decimals).toFixed(0, 0) : '0'\n        const { output, ratio } = sdk.ammPoolCalc(covertVal, isAtoB, coinA_TV, coinB_TV)\n\n        console.log('---abc:', output, ratio.toNumber())\n\n        if (isAtoB) {\n            // rewrite B\n            \n                setAmmWithdrawData({\n                    coinA: data.coinA,\n                    coinB: data.coinA,\n                    slippage: 0.6\n                })\n        } else {\n            // rewrite A\n        }\n\n    }, []);\n\n    const handleWithDrawEvent = React.useCallback((data: AmmData<IBData<C>>, type: 'coinA' | 'coinB') => {\n        console.log('handleWithDrawEvent', data, type);\n    }, []);\n\n\n    useCustomDCEffect(() => {\n        const label: string | undefined = accountStaticCallBack(bntLabel)\n        setAmmDepositBtnI18nKey(label);\n        setAmmWithdrawBtnI18nKey(label)\n    }, [account.status, bntLabel])\n\n\n    const onAmmWithdrawClick = React.useCallback((props: AmmData<IBData<C>>) => {\n        const onAmmWithdrawClickArray: typeof btnClickArray = Object.assign(btnClickArray, {\n            [ fnType.ACTIVATED ]: [function (props: AmmData<IBData<C>>) {\n                //TODO: onWithdraw\n                console.log('onAmmWithdraw', props)\n\n                if (props.__cache__) {\n                    makeCache(props.__cache__)\n                }\n            }, props]\n        })\n        accountStaticCallBack(onAmmWithdrawClickArray)\n    }, []);\n\n    const onAmmDepositClick = React.useCallback((props: AmmData<IBData<C>>) => {\n        const onAmmDepositClickArray: typeof btnClickArray = Object.assign(btnClickArray, {\n            [ fnType.ACTIVATED ]: [function () {\n                //TODO: onDeposit\n                console.log(' onAmmDeposit', props)\n                if (props.__cache__) {\n                    makeCache(props.__cache__)\n                }\n            }, props]\n        })\n        accountStaticCallBack(onAmmDepositClickArray)\n    }, []);\n\n    React.useEffect(() => {\n        if (snapShotData) {\n            initAmmData(pair)\n        }\n    }, [snapShotData, pair, walletMap]);\n\n\n    return {\n        ammCalcData,\n        ammDepositData,\n        ammWithdrawData,\n        handleDepositEvent,\n        handleWithDrawEvent,\n        onAmmWithdrawClick,\n        onAmmDepositClick,\n        ammDepositBtnI18nKey,\n        ammWithdrawBtnI18nKey,\n    }\n}","import React from \"react\";\nimport { AmmActivity, CoinInfo, TradeFloat } from \"@loopring-web/component-lib/static-resource\";\nimport { useTokenMap } from \"stores/token\";\nimport { useRouteMatch } from 'react-router';\nimport { AmmDetailStore, useAmmMap } from '../../../stores/Amm/AmmMap';\nimport { useWalletLayer2 } from '../../../stores/walletLayer2';\nimport { makeTickView, makeWallet, pairDetailBlock, WalletMapExtend } from '../../../hooks/help';\nimport { AmmPoolSnapshot, AmmUserRewardMap, getExistedMarket, TickerData } from 'loopring-sdk';\nimport { deepClone } from '../../../utils/obj_tools';\nimport { getUserAmmTransaction, makeMyAmmMarketArray } from '../../../hooks/help/marketTable';\nimport { AmmRecordRow } from '@loopring-web/component-lib/components/tableList/ammRecordTable/Interface';\nimport { AmmPoolActivityRule, LoopringMap } from 'loopring-sdk/dist/defs/loopring_defs';\nimport { MyAmmLP } from '@loopring-web/component-lib/src/static-resource';\nimport { useSystem } from '../../../stores/system';\nimport { makeMyAmmWithSnapshot } from '../../../hooks/help/makeUIAmmActivityMap';\nimport store from '../../../stores';\nimport { useUserRewards } from '../../../stores/userRewards';\n\nconst makeAmmDetailExtendsActivityMap = ({ammMap, coinMap, ammActivityMap, ammKey}: any) => {\n\n    if (ammMap && coinMap) {\n        let ammDetail = deepClone(ammMap[ ammKey as string ]);\n        const ammActivity = ammActivityMap [ ammKey as string ];\n\n        if (ammDetail && ammDetail.coinA) {\n            ammDetail.myCoinA = coinMap[ ammDetail.coinA ];\n            ammDetail.myCoinB = coinMap[ ammDetail.coinB ];\n            ammDetail[ 'activity' ] = ammActivity ? ammActivity : {};\n        }\n        return ammDetail;\n    }\n}\ntype PgAmmDetail<C extends { [ key: string ]: any }> = AmmDetailStore<C> & {\n    myCoinA: CoinInfo<C>,\n    myCoinB: CoinInfo<C>,\n    activity: AmmActivity<C> | undefined\n}\n\n\nexport const useCoinPair = <C extends { [ key: string ]: any }>(ammActivityMap: LoopringMap<LoopringMap<AmmPoolActivityRule[]>>) => {\n    const match: any = useRouteMatch(\"/liquidity/pools/coinPair/:symbol\")\n    const {coinMap, tokenMap, marketArray} = useTokenMap();\n    const {faitPrices} = useSystem();\n    const ammMapState = useAmmMap();\n    const useUserRewardsState = useUserRewards()\n\n    // const {account} = useAccount();\n\n\n    const {ammMap, updateAmmMap} = ammMapState;\n\n    // const {ammMap,updateAmmMap} = useAmmMap();\n    const walletLayer2State = useWalletLayer2();\n    const [walletMap, setWalletMap] = React.useState<WalletMapExtend<C> | undefined>(undefined);\n    // const [ammRecordArray, setAmmRecordArray] = React.useState<AmmRecordRow<C>[]>([]);\n    const [ammMarketArray, setAmmMarketArray] = React.useState<AmmRecordRow<C>[]>([]);\n\n\n    const [myAmmMarketArray, setMyAmmMarketArray] = React.useState<AmmRecordRow<C>[]>([]);\n    const [ammUserRewardMap, setAmmUserRewardMap] = React.useState<AmmUserRewardMap | undefined>(undefined);\n    const [snapShotData, setSnapShotData] = React.useState<{\n        tickerData: TickerData | undefined\n        ammPoolsBalance: AmmPoolSnapshot | undefined\n    } | undefined>(undefined);\n\n    const [myAmm, setMyAmm] = React.useState<MyAmmLP<C>>(\n        {\n            feeA: 0,\n            feeB: 0,\n            feeDollar: 0,\n            feeYuan: 0,\n            reward: 0,\n            rewardToken: undefined as any,\n            balanceA: 0,\n            balanceB: 0,\n            balanceYuan: 0,\n            balanceDollar: 0,\n        })\n    // const [ammPoolsBalance, setAmmpoolsbalance] = React.useState<AmmPoolSnapshot|undefined>(undefined);\n    const [coinPairInfo, setCoinPairInfo] = React.useState<PgAmmDetail<C>>({\n        myCoinA: undefined,\n        myCoinB: undefined,\n        activity: undefined,\n        totalRewards: undefined,\n        amountDollar: undefined,\n        amountYuan: undefined,\n        totalLPToken: undefined,\n        totalA: undefined,\n        totalB: undefined,\n        rewardToken: undefined,\n        rewardValue: undefined,\n        feeA: undefined,\n        feeB: undefined,\n        isNew: undefined,\n        isActivity: undefined,\n        APY: undefined\n    } as unknown as PgAmmDetail<C>);\n    const [tradeFloat, setTradeFloat] = React.useState<TradeFloat | undefined>(undefined);\n    const [pair, setPair] = React.useState<{ coinAInfo: CoinInfo<C> | undefined, coinBInfo: CoinInfo<C> | undefined }>({\n        coinAInfo: undefined,\n        coinBInfo: undefined,\n    });\n\n    const walletLayer2DoIt = React.useCallback((market) => {\n        const {walletMap: _walletMap} = makeWallet();\n        setWalletMap(_walletMap)\n        if (_walletMap) {\n            getUserAmmTransaction()?.then((marketTrades) => {\n                let _myTradeArray = makeMyAmmMarketArray(market, marketTrades)\n                setMyAmmMarketArray(_myTradeArray ? _myTradeArray : [])\n            })\n        }\n        return _walletMap\n    }, [makeWallet, getUserAmmTransaction, makeMyAmmMarketArray, marketArray, pair])\n\n    React.useEffect(() => {\n        const coinKey = match?.params.symbol ?? undefined;\n        let _tradeFloat: Partial<TradeFloat> = {}\n        const [, coinA, coinB] = coinKey.match(/(\\w+)-(\\w+)/i)\n        let {\n            amm,\n            market\n        } = getExistedMarket(marketArray, coinA, coinB);\n\n        const _coinPairInfo = makeAmmDetailExtendsActivityMap({ammMap, coinMap, ammActivityMap, ammKey: amm})\n        setCoinPairInfo(_coinPairInfo ? _coinPairInfo : {})\n\n        if (coinMap) {\n            setPair({\n                coinAInfo: coinMap[ coinA ],\n                coinBInfo: coinMap[ coinB ]\n            })\n        }\n\n        // let _walletMap: WalletMapExtend<C>|undefined = undefined\n        if (walletLayer2State.walletLayer2) {\n            walletLayer2DoIt(market);\n        }\n\n        if (amm && market && ammMap) {\n            //TODO should add it into websocket\n            updateAmmMap();\n            let apiList = [\n                pairDetailBlock({coinKey: market, ammKey: amm, ammMap}),\n                // LoopringAPI.ammpoolAPI.getAmmPoolSnapshot({poolAddress: ammMap[ ammKey ].address}),\n                // LoopringAPI.exchangeAPI.getMixTicker({market: coinKey})])\n            ];\n            // @ts-ignore\n            Promise.all([...apiList]).then(\n                ([{ammPoolsBalance, tickMap}\n                     //  ,ammUserRewardMap\n                 ]: any[]) => {\n                    if (tokenMap) {\n                        const _snapShotData = {\n                            tickerData: tickMap[ market ],\n                            ammPoolsBalance: ammPoolsBalance,\n                        }\n                        _tradeFloat = makeTickView(tickMap[ market ] ? tickMap[ market ] : {})\n                        setTradeFloat(_tradeFloat as TradeFloat);\n                        setCoinPairInfo({..._coinPairInfo})\n                        setSnapShotData(_snapShotData)\n\n                    }\n                }).catch((error) => {\n                console.log(error);\n                throw  Error\n            })\n        }\n\n    }, []);\n\n    React.useEffect(() => {\n        const {market} = getExistedMarket(marketArray, pair.coinAInfo?.simpleName as string, pair.coinBInfo?.simpleName as string);\n        if (market && snapShotData && snapShotData.ammPoolsBalance) {\n            switch (walletLayer2State.status) {\n                case \"ERROR\":\n                    walletLayer2State.statusUnset();\n                    // setState('ERROR')\n                    //TODO: show error at button page show error  some retry dispath again\n                    break;\n                case \"DONE\":\n                    walletLayer2State.statusUnset();\n                    const _walletMap = walletLayer2DoIt(market);\n                    const _myAmm: MyAmmLP<C> = makeMyAmmWithSnapshot(market, _walletMap, ammUserRewardMap, snapShotData);\n                    setMyAmm(_myAmm)\n                    break;\n                default:\n                    break;\n\n            }\n        }\n\n    }, [walletLayer2State.status, ammUserRewardMap])\n\n    //TODO tickMap\n    React.useEffect(() => {\n        const {market} = getExistedMarket(marketArray, pair.coinAInfo?.simpleName as string, pair.coinBInfo?.simpleName as string);\n        if (market) {\n            switch (useUserRewardsState.status) {\n                case \"ERROR\":\n                    useUserRewardsState.statusUnset();\n                    // setState('ERROR')\n                    //TODO: show error at button page show error  some retry dispath again\n                    break;\n                case \"DONE\":\n                    // getAmmPoolUserRewards().then((ammUserRewardMap)=>{\n                    const {userRewardsMap} = store.getState().userRewardsMap\n                    setAmmUserRewardMap(userRewardsMap)\n                    const _myAmm: MyAmmLP<C> = makeMyAmmWithSnapshot(market, walletMap, ammUserRewardMap, snapShotData);\n                    setMyAmm(_myAmm);\n                    break;\n                default:\n                    break;\n\n            }\n        }\n\n    }, [useUserRewardsState.status])\n\n    React.useEffect(() => {\n        if (ammMapState.status === \"ERROR\") {\n            //TODO: solve error\n            ammMapState.statusUnset();\n        } else if (ammMapState.status === \"DONE\") {\n            ammMapState.statusUnset();\n            if (ammMapState.ammMap && pair.coinAInfo?.simpleName && pair.coinBInfo?.simpleName) {\n                const _coinPairInfo = makeAmmDetailExtendsActivityMap(\n                    {\n                        ammMap,\n                        coinMap,\n                        ammActivityMap,\n                        ammKey: 'AMM-' + pair.coinAInfo.simpleName + pair.coinBInfo.simpleName\n                    })\n                setCoinPairInfo({\n                    ...coinPairInfo, ..._coinPairInfo,\n                    tradeFloat: coinPairInfo.tradeFloat\n                })\n\n            }\n\n            // tokenState.statusUnset()\n            // setState('DONE');\n        }\n    }, [ammMapState.status, ammMapState.ammMap, pair, ammActivityMap, tokenMap])\n\n\n    return {\n        walletMap,\n        myAmm,\n        // tickerData,\n        coinPairInfo,\n        snapShotData,\n        // ammPoolsBalance,\n        pair,\n        tradeFloat,\n        ammMarketArray,\n        myAmmMarketArray,\n    }\n}","import React from 'react';\nimport { WithTranslation, withTranslation } from 'react-i18next';\nimport { AmmRecordTable, TradeBtnStatus, TradeTable, TradeTitle, useSettings } from '@loopring-web/component-lib';\nimport { Currency, getThousandFormattedNumbers, PriceTag, EmptyValueTag } from '@loopring-web/component-lib/static-resource';\nimport { Box, Breadcrumbs, Grid, Hidden, Link, Typography} from '@material-ui/core';\nimport { AmmPanelView } from '../AmmPanel';\nimport moment from 'moment';\nimport styled from '@emotion/styled/';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\n\nimport { useCoinPair } from './hooks';\nimport { ActivityMap } from '../../../stores/Amm/AmmActivityMap';\nimport { AmmPoolActivityRule, LoopringMap } from 'loopring-sdk/dist/defs/loopring_defs';\n\n\n//******************** page code ************************//\nconst BoxStyled = styled(Box)`\n  ${({theme}) => theme.border.defaultFrame({c_key: 'blur'})};\n  background-color: ${({theme}) => theme.colorBase.background().default};\n`;\nconst StylePaper = styled(Box)`\n  width: 100%;\n  height: calc(100% - 64px);\n  \n  //height: 100%;\n  flex: 1;\n  background-color: ${({theme}) => theme.colorBase.background().default};\n  border-radius: ${({theme}) => theme.unit}px;\n  padding: ${({theme}) => theme.unit}px 0 ;\n  .rdg {\n    \n    flex: 1;\n  }\n\n` as typeof Box;\n\nconst applyProps = (index: number) => {\n    return {\n        id: `simple-tab-${index}`,\n        'aria-controls': `tabpanel-${index}`,\n    }\n}\n\nexport const CoinPairPanel = withTranslation('common')(<R extends {[key:string]:any},I extends {[key:string]:any}>\n({t,  ammActivityMap, ...rest}:\n     WithTranslation & { ammActivityMap: LoopringMap<LoopringMap<AmmPoolActivityRule[]>>|undefined } & any) => {    //ActivityMap<I, I>\n    //TODO: checkRouter\n\n    const {currency} = useSettings();\n    const {tradeFloat,snapShotData, pair, coinPairInfo, walletMap,ammMarketArray,myAmmMarketArray,myAmm} = useCoinPair({ammActivityMap});\n    const [tabIndex, setTabIndex] = React.useState<0 | 1>(0);\n    const [page, setPage] = React.useState(rest?.page ? rest.page : 1);\n    const handleChange = (event: any, newValue: 0 | 1) => {\n        setTabIndex(newValue);\n        setPage(1);\n    }\n    const _handlePageChange = React.useCallback((page: number) => {\n        setPage(page);\n    }, [])\n\n\n    return <>\n\n        <Grid container>\n            <Grid item xs={8}>\n                <Breadcrumbs aria-label=\"breadcrumb\">\n                    <Link color=\"textSecondary\" href=\"/#/liquidity/pools\">\n                        {t('labelAmmList')}\n                    </Link>\n                    <Typography color={'textSecondary'} display={'flex'} alignItems={'center'}\n                                justifyContent={'center'}\n                    >{pair.coinAInfo?.simpleName}-{pair.coinBInfo?.simpleName}</Typography>\n                </Breadcrumbs>\n            </Grid>\n            <Grid item xs={4} alignItems={'center'} justifyContent={'flex-end'} display={'flex'}>\n                <Link href=\"/#/liquidity/pools\" variant={'h5'}>\n                    {t('labelBack')}\n                </Link>\n            </Grid>\n        </Grid>\n        <Grid container marginTop={3}>\n            <Grid item xs={7}>\n                <TradeTitle {...{\n                    ...rest, t,\n                    ...pair,\n                    tradeFloat,\n                    isNew: false\n                }}></TradeTitle>\n            </Grid>\n        </Grid>\n        <Box flex={1} display={'flex'} alignItems={'stretch'} flexDirection=\"row\" marginTop={3}>\n            <Box flex={1} display={'flex'}>\n                <Grid container spacing={2} wrap={'nowrap'}>\n                    <Grid item md={5} xs={12} paddingRight={2} display={'flex'} flexDirection={'column'}\n                          alignItems={'stretch'} justifyContent={'flex-start'}>\n                        <BoxStyled paddingY={3} marginBottom={2} paddingX={1 / 2 * 5} display={'flex'} flexDirection={'column'}>\n                            <Typography component={'p'} color={'textSecondary'} display={'flex'}\n                                        justifyContent={'space-between'}>\n                                <Typography component={'span'}\n                                            style={{textTransform: 'capitalize'}}>{t('labelLiquidity')}</Typography>\n                                <Typography component={'span'}\n                                            style={{textTransform: 'uppercase'}}>{t('labelAPY')}</Typography>\n                            </Typography>\n                            <Typography component={'p'} color={'textPrimary'} display={'flex'}\n                                        justifyContent={'space-between'} marginTop={1}>\n                                <>\n                                    <Typography\n                                        component={'span'}> {typeof coinPairInfo.amountDollar === 'undefined' ? EmptyValueTag :\n                                        currency === Currency.dollar ? PriceTag.Dollar + getThousandFormattedNumbers(coinPairInfo.amountDollar) : PriceTag.Yuan + getThousandFormattedNumbers(coinPairInfo.amountYuan ? coinPairInfo.amountYuan : 0)}\n                                    </Typography>\n                                    <Typography\n                                        component={'span'}> {coinPairInfo.APY ? coinPairInfo.APY : EmptyValueTag}%\n                                    </Typography>\n                                </>\n\n\n                            </Typography>\n\n                            <Typography component={'p'} color={'textSecondary'} display={'flex'}\n                                        justifyContent={'space-between'} marginTop={2}>\n                                <Typography component={'span'}\n                                            color={'textSecondary'}>\n                                    <Hidden mdDown>{t('labelLPTotal')}</Hidden>{t('labelLPTokens')}</Typography>\n                                <Typography component={'span'}\n                                            color={'textSecondary'}>{coinPairInfo.totalLPToken}</Typography>\n                            </Typography>\n                            <Typography component={'p'} color={'textSecondary'} display={'flex'}\n                                        justifyContent={'space-between'} marginTop={1}>\n\n                                <Typography component={'span'}\n                                            color={'textSecondary'}>\n                                    <Hidden\n                                        mdDown>{t('labelLPTotal')}</Hidden>{coinPairInfo.myCoinA?.simpleName}\n                                </Typography>\n\n                                <Typography component={'span'}\n                                            color={'textSecondary'}>{coinPairInfo.totalA}</Typography>\n                            </Typography>\n                            <Typography component={'p'} color={'textSecondary'} display={'flex'}\n                                        justifyContent={'space-between'} marginTop={1}>\n                                <Typography component={'span'}\n                                            color={'textSecondary'}>\n                                    <Hidden\n                                        mdDown>{t('labelLPTotal')}</Hidden>{coinPairInfo.myCoinB?.simpleName}\n                                </Typography>\n                                <Typography component={'span'}\n                                            color={'textSecondary'}>{coinPairInfo.totalB}</Typography>\n                            </Typography>\n\n                        </BoxStyled>\n                        <BoxStyled paddingY={3} marginBottom={2} paddingX={1 / 2 * 5} display={'flex'} flexDirection={'column'}>\n                            <Typography component={'p'} color={'textSecondary'} display={'flex'}\n                                        justifyContent={'space-between'} alignItems={'center'}>\n                                <Typography component={'span'} color={'textSecondary'} variant={'body2'} style={{textTransform: 'capitalize'}}>\n                                    {coinPairInfo.tradeFloat?.timeUnit} {t('labelVolume')}\n                                </Typography>\n                                <Typography component={'span'} color={'textSecondary'}>\n                                    {t('labelFee')} {/* ' : '*/}\n                                </Typography>\n                            </Typography>\n                            <Typography component={'p'} color={'textSecondary'} display={'flex'}\n                                        justifyContent={'space-between'} marginTop={1} alignItems={'center'}>\n                                <Typography component={'span'} variant={'h4'} color={'textPrimary'}>\n                                    {currency === Currency.dollar ? PriceTag.Dollar + getThousandFormattedNumbers(coinPairInfo.tradeFloat && coinPairInfo.tradeFloat.priceDollar ? coinPairInfo.tradeFloat.priceDollar as number : 0)\n                                        : PriceTag.Yuan + getThousandFormattedNumbers(coinPairInfo.tradeFloat && coinPairInfo.tradeFloat.priceYuan ? coinPairInfo.tradeFloat.priceYuan as number : 0)}\n                                </Typography>\n                                <Typography noWrap textAlign={'center'} component={'span'} color={'textSecondary'}\n                                            variant={'body2'} textOverflow={'ellipsis'} display={'flex'}\n                                            alignItems={'center'}>\n                                    <Typography component={'span'} color={'inherit'} variant={'inherit'}\n                                                display={'flex'} flexDirection={'column'}>\n                                        <Typography component={'span'} color={'inherit'} variant={'inherit'}>\n                                            {coinPairInfo.myCoinA?.simpleName}\n                                        </Typography>\n                                        <Typography component={'span'} color={'inherit'} variant={'inherit'}>\n                                            {coinPairInfo.feeA?getThousandFormattedNumbers(coinPairInfo.feeA):EmptyValueTag}\n                                        </Typography>\n                                    </Typography>\n                                    <Typography component={'span'} color={'inherit'} variant={'h5'}\n                                                paddingX={1}>{' + '}</Typography>\n                                    <Typography component={'span'} color={'inherit'} variant={'inherit'}\n                                                display={'flex'} flexDirection={'column'}>\n                                        <Typography component={'span'} color={'inherit'} variant={'inherit'}>\n                                            {coinPairInfo.myCoinB?.simpleName}\n                                        </Typography>\n                                        <Typography component={'span'} color={'inherit'} variant={'inherit'}>\n                                            {coinPairInfo.feeB?getThousandFormattedNumbers(coinPairInfo.feeB):EmptyValueTag}\n                                        </Typography>\n                                    </Typography>\n                                </Typography>\n                            </Typography>\n                        </BoxStyled>\n                        <BoxStyled paddingY={3} marginBottom={2} paddingX={1 / 2 * 5} display={'flex'} flexDirection={'column'}>\n                            <Typography component={'p'} color={'textSecondary'} display={'flex'}\n                                        justifyContent={'space-between'}>\n                                <Typography component={'span'}\n                                            color={'textSecondary'}> {t('labelMyPoolShare')}</Typography>\n                            </Typography>\n                            <Typography component={'p'} color={'textSecondary'} display={'flex'}\n                                        justifyContent={'space-between'} marginTop={1}>\n                                <Typography component={'span'}\n                                            color={'textSecondary'}>\n                                    <>{myAmm.balanceA ? getThousandFormattedNumbers(myAmm.balanceA,2)  : EmptyValueTag}</>\n                                    <> { coinPairInfo.myCoinA?.simpleName}</>\n                                </Typography>\n                                <Typography component={'span'} color={'textecondary'}\n                                            variant={'h5'}> {myAmm.feeA?getThousandFormattedNumbers(myAmm.feeA):EmptyValueTag} {coinPairInfo.myCoinA?.simpleName}  </Typography>\n                            </Typography>\n                            <Typography component={'p'} color={'textSecondary'} display={'flex'}\n                                        justifyContent={'space-between'} marginTop={1}>\n                                <Typography component={'span'}\n                                            color={'textSecondary'}>\n                                    <>{myAmm.balanceB ? getThousandFormattedNumbers(myAmm.balanceB,2) : EmptyValueTag}</>\n                                    <> {coinPairInfo.myCoinB?.simpleName}</>\n                                </Typography>\n                                <Typography component={'span'} color={'textSecondary'}\n                                            variant={'h5'}> {myAmm.feeB?getThousandFormattedNumbers(myAmm.feeB):EmptyValueTag} {coinPairInfo.myCoinB?.simpleName}</Typography>\n                            </Typography>\n                        </BoxStyled>\n                        <BoxStyled paddingY={3} paddingX={1 / 2 * 5} display={'flex'}\n                                   flexDirection={'column'}>\n                            <Box display={'flex'} flexDirection={'row'} justifyContent={'space-between'}>\n                                <Typography display={'flex'} flexDirection={'column'} component={'div'}>\n                                    <Typography variant={'body2'} component={'h5'} color={'textSecondary'}>\n                                        {t('labelReward')}\n                                    </Typography>\n                                    <Typography variant={'body1'} component={'span'} color={'textPrimary'}>\n                                        {typeof coinPairInfo.isActivity === 'undefined' ? EmptyValueTag : <>\n                                            <Typography\n                                                component={'span'}>{coinPairInfo.activity?getThousandFormattedNumbers(coinPairInfo.activity.totalRewards):EmptyValueTag} </Typography>\n                                            <Typography\n                                                component={'span'}>{coinPairInfo.activity?.rewardToken?.simpleName}</Typography>\n                                        </>}\n                                    </Typography>\n                                </Typography>\n                                <Typography display={'flex'} flexDirection={'column'} alignItems={'flex-end'}\n                                            component={'div'}>\n                                    <Typography variant={'body2'} component={'h5'} color={'textSecondary'}>\n                                        {t('labelMyReward')}\n                                    </Typography>\n                                    <Typography variant={'body1'} component={'span'} color={'textPrimary'}>\n                                        {/*{typeof coinPairInfo.isActivity === 'undefined' ? EmptyValueTag : <>*/}\n                                        {typeof myAmm.reward === 'undefined' ? EmptyValueTag : <>\n\n                                        <Typography component={'span'}> {getThousandFormattedNumbers(myAmm.reward)} </Typography>\n                                            <Typography\n                                                component={'span'}> {coinPairInfo.activity?.rewardToken?.simpleName}</Typography></>}\n\n                                    </Typography>\n                                </Typography>\n                            </Box>\n                            <Typography alignSelf={'flex-start'} variant={'body2'} color={'textSecondary'}\n                                        component=\"span\" marginTop={1}>\n                                {typeof coinPairInfo.isActivity === 'undefined' ? t('labelNoActiveEvent')\n                                    : <>\n                                        {t('labelDate')} :\n                                       <> {moment(coinPairInfo.activity?.duration.from).format('L') + ' - ' + moment(coinPairInfo.activity?.duration.to).format('L')}</>\n                                    </>\n                                }\n                            </Typography>\n                        </BoxStyled>\n                    </Grid>\n                    <Hidden mdDown>\n                        <Grid item md={7} paddingRight={2}>\n\n\n                        </Grid>\n                    </Hidden>\n                </Grid>\n            </Box>\n            <Box display={'flex'}>\n                <AmmPanelView pair={pair} walletMap={walletMap} snapShotData={snapShotData}/>\n            </Box>\n        </Box>\n        <Grid container marginY={3}>\n            <Grid item xs={12}>\n                <Tabs value={tabIndex}\n                      onChange={handleChange}\n                      aria-label=\"tabs switch\">\n                    <Tab label={t('labelAll')} {...applyProps(0)} />\n                    <Tab label={t('labelMe')} {...applyProps(1)} />\n                </Tabs>\n                <StylePaper marginTop={2} >\n                    {/*ammRecordArray*/}\n                    {tabIndex === 0 ?  <AmmRecordTable\n                        rawData={ammMarketArray}\n                        handlePageChange={_handlePageChange} page={page}\n                    /> : <AmmRecordTable rawData={myAmmMarketArray}  handlePageChange={_handlePageChange} page={page} /> }\n                </StylePaper>\n            </Grid>\n\n        </Grid>\n\n    </>\n})\n\n\n\n","import { AmmProps } from '@loopring-web/component-lib';\nimport React from 'react';\nimport { AmmCardProps, AmmData, AmmInData, IBData } from '@loopring-web/component-lib/static-resource';\nimport { AmmCard } from '@loopring-web/component-lib/components/block/AmmCard';\nimport { Grid } from '@material-ui/core';\nimport { useAmmMiningUI } from './hook';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport { withTranslation } from 'react-i18next';\nimport { AmmPoolActivityRule, LoopringMap } from 'loopring-sdk/dist/defs/loopring_defs';\n\nconst AmmCardWrap = React.memo(React.forwardRef((props:AmmCardProps<{[key:string]:any}>,ref) => {\n    return props? <AmmCard ref={ref} {...props} /> :<></>\n}));\nconst AmmList = <I extends {[key:string]:any}>({ammActivityViewMap}: {ammActivityViewMap: Array<AmmCardProps<I>> })=>{\n    return  <>{ammActivityViewMap.map((item:AmmCardProps<I>,index)=>\n        <Grid item xs={12} sm={6} lg={4}  key={index}>\n            <AmmCardWrap {...item as any} />\n        </Grid>\n    ) }</>\n}\n\nexport const AmmMiningView =  withTranslation('common')(<T extends AmmData<C extends IBData<I> ? C : IBData<I>>, I,\n    ACD extends AmmInData<I>,\n    C = IBData<I>>({ammProps,t,ammActivityMap,...rest}: { ammProps:AmmProps<T ,I,ACD>,\n    ammActivityMap: LoopringMap<LoopringMap<AmmPoolActivityRule[]>>|undefined,   \n} & any) => {\n    const { ammActivityViewMap,\n        ammActivityPastViewMap} = useAmmMiningUI({ammActivityMap});\n    const [tabIndex,setTabIndex] = React.useState<0|1>(0);\n    const handleChange = (event: any, newValue: 0|1) => {\n        setTabIndex(newValue);\n    }\n\n    return <Grid container spacing={2}>\n        <Grid item xs={12}>\n            <Tabs value={tabIndex}\n                  onChange={handleChange}\n                  aria-label=\"tabs switch\">\n                <Tab label={t('labelCurrentActivities')}  />\n                <Tab label={t('labelPastActivities')}  />\n            </Tabs>\n        </Grid>\n        <AmmList ammActivityViewMap={tabIndex === 0 ? ammActivityViewMap : ammActivityPastViewMap}/>\n    </Grid>\n})\n","import { AmmCardProps } from '@loopring-web/component-lib/static-resource';\nimport { AmmPoolActivityRule, AmmPoolActivityStatus,LoopringMap } from 'loopring-sdk';\nimport React from 'react';\nimport {\n    makeUIAmmActivityMap\n} from '../../../hooks/help';\n\nimport { useUserRewards } from '../../../stores/userRewards';\n\nexport const useAmmMiningUI = <R extends { [ key: string ]: any }, I extends { [ key: string ]: any }>(\n    {\n        ammActivityMap\n    }: { ammActivityMap: LoopringMap<LoopringMap<AmmPoolActivityRule[]>> | undefined }\n): {\n    ammActivityViewMap: Array<AmmCardProps<I>>,\n    ammActivityPastViewMap: Array<AmmCardProps<I>>\n} => {\n    const  userRewardsMapState =  useUserRewards();// store.getState().userRewardsMap\n    // const {coinMap} = useTokenMap();\n    // const ammMapState = useAmmMap();\n    // const walletLayer2State = useWalletLayer2();\n    const [ammActivityViewMap, setAmmActivityViewMap] = React.useState<Array<AmmCardProps<I>>>([]);\n\n\n    const [ammActivityPastViewMap, setAmmActivityPastViewMap] = React.useState<Array<AmmCardProps<I>>>(\n        []);\n    // const [ammUserRewardMap, setAmmUserRewardMap] = React.useState<AmmUserRewardMap>(\n    //     {});\n\n\n    // );\n    React.useEffect(() => {\n        if(ammActivityMap && Object.keys(ammActivityMap).length>0 ){\n\n           // getAmmPoolUserRewards().then((ammUserRewardMap)=>{\n                // setAmmUserRewardMap(ammUserRewardMap as AmmUserRewardMap);\n                setAmmActivityViewMap(makeUIAmmActivityMap(\n                    {\n                        ammActivityMap,\n                        type: 'AMM_MINING',\n                        ammPoolActivityStatus: [AmmPoolActivityStatus.NotStarted, AmmPoolActivityStatus.InProgress]\n                    }, userRewardsMapState.userRewardsMap\n                ));\n                setAmmActivityPastViewMap(\n                    makeUIAmmActivityMap(\n                        {\n                            ammActivityMap,\n                            type: 'AMM_MINING',\n                            ammPoolActivityStatus: [AmmPoolActivityStatus.EndOfGame]\n                        }, userRewardsMapState.userRewardsMap\n                    ))\n          //  })\n        }\n\n    },[ammActivityMap])\n    React.useEffect(() => {\n            if (userRewardsMapState.status === \"ERROR\") {\n                //TODO: solve error\n                userRewardsMapState.statusUnset();\n            } else if (userRewardsMapState.status === \"DONE\") {\n                userRewardsMapState.statusUnset();\n                setAmmActivityViewMap(\n                    makeUIAmmActivityMap(\n                    {\n                        ammActivityMap,\n                        type: 'AMM_MINING',\n                        ammPoolActivityStatus: [AmmPoolActivityStatus.NotStarted, AmmPoolActivityStatus.InProgress]\n                    }, userRewardsMapState.userRewardsMap\n                ));\n                setAmmActivityPastViewMap(\n                    makeUIAmmActivityMap(\n                        {\n                            ammActivityMap,\n                            type: 'AMM_MINING',\n                            ammPoolActivityStatus: [AmmPoolActivityStatus.EndOfGame]\n                        }, userRewardsMapState.userRewardsMap\n                    ))\n                // if (userRewardsMapState.ammMap) {\n                //     setAmmActivityViewMap(\n                //         makeUIAmmActivityMap(\n                //             {\n                //                 ammActivityMap,\n                //                 type: 'AMM_MINING',\n                //                 ammPoolActivityStatus: [AmmPoolActivityStatus.NotStarted, AmmPoolActivityStatus.InProgress]\n                //             }, ammUserRewardMap\n                //         ))\n                //     setAmmActivityPastViewMap(\n                //         makeUIAmmActivityMap(\n                //             {\n                //                 ammActivityMap,\n                //                 type: 'AMM_MINING',\n                //                 ammPoolActivityStatus: [AmmPoolActivityStatus.EndOfGame]\n                //             }, ammUserRewardMap\n                //         ))\n                //\n                // }\n\n            }\n        },\n        [userRewardsMapState.status]\n    )\n\n\n    return {\n        ammActivityViewMap,\n        ammActivityPastViewMap\n    }\n\n}\n","import React from 'react'\nimport styled from '@emotion/styled'\nimport { Box, Grid, Typography } from '@material-ui/core'\nimport { WithTranslation, withTranslation } from 'react-i18next'\nimport {\n    AmmRecordTable,\n    AmmTradeType,\n    ChartType,\n    ScaleAreaChart,\n    TablePaddingX,\n    ToggleButtonGroup,\n    useSettings\n} from '@loopring-web/component-lib'\nimport { MyPoolTable } from '@loopring-web/component-lib/components/tableList/myPoolTable';\nimport {\n    Currency, EmptyValueTag,\n    getThousandFormattedNumbers,\n    PriceTag\n} from '@loopring-web/component-lib/src/static-resource';\n\nimport { AmmPoolActivityRule, LoopringMap } from 'loopring-sdk/dist/defs/loopring_defs';\nimport { useOverview } from './hook';\n\n\n//TODO: FIXED:  demo data\n\n\nconst toggleData = [\n    {value: '24 H', key: '24 H'},\n    {value: '1 W', key: '1 W'},\n    {value: 'ALL', key: 'ALL'},\n]\n\nconst StylePaper = styled(Box)`\n  width: 100%;\n  height: 100%;\n  flex: 1;\n` as typeof Box;\n\nconst StyleWrapper = styled(Grid)`\n  position: relative;\n  width: 100%;\n  background-color: ${({theme}) => theme.colorBase.background().default};\n  border-radius: ${({theme}) => theme.unit}px;\n` as typeof Grid\n\n\n\nconst StyledBtnGroupWrapper = styled(Box)`\n  position: absolute;\n  z-index: 99;\n  top: ${({theme}) => theme.unit}px;\n  width: 100%;\n` as typeof Box\n\nconst TableWrapStyled = styled(Grid)`\n  & {\n    background-color: ${({theme}) => theme.colorBase.background().default};\n    ${({theme}) => theme.border.defaultFrame({c_key: 'blur', d_R: 1})};\n  }\n\n  ${({theme}) => TablePaddingX({pLeft: theme.unit * 3, pRight: theme.unit * 3})}\n` as typeof Grid\n\nexport const MyLiquidity = withTranslation('common')(\n    <R extends { [ key: string ]: any }, I extends { [ key: string ]: any }>\n    ({t, ammActivityMap, ...rest}:\n         WithTranslation &\n         { ammActivityMap: LoopringMap<LoopringMap<AmmPoolActivityRule[]>> | undefined }\n    ) => {\n        const [chartPeriod, setChartPeriod] = React.useState('ALL');\n        const [page, setPage] = React.useState(1);\n        const {currency} = useSettings();\n\n        const _handlePageChange = React.useCallback((page: number) => {\n            setPage(page);\n        }, [])\n\n        const {myAmmMarketArray, summaryReward, myPoolRow} = useOverview({ammActivityMap});\n        return (\n            <>\n                <StyleWrapper container spacing={1} padding={3} margin={0}>\n                    <Grid display={'flex'} flexDirection={'column'} justifyContent={'space-around'} item sm={3}>\n                        <Typography variant={'body1'} component={'h5'}\n                                    color={'textSecondary'}>{t('labelTotalPositionValue')}</Typography>\n                        <Typography variant={'h4'} marginTop={1}>\n                            {summaryReward === undefined ? EmptyValueTag : currency === Currency.dollar ? PriceTag.Dollar\n                                + getThousandFormattedNumbers(summaryReward.rewardDollar !== undefined? summaryReward.rewardDollar : 0)\n                                + getThousandFormattedNumbers( summaryReward.feeDollar !== undefined?summaryReward.feeDollar : 0)\n                                : PriceTag.Yuan + getThousandFormattedNumbers(summaryReward.rewardYuan ? summaryReward.rewardYuan : 0)\n                                    +  getThousandFormattedNumbers(summaryReward.feeYuan ? summaryReward.feeYuan : 0)}\n                        </Typography>\n                    </Grid>\n                    <Grid display={'flex'} flexDirection={'column'} justifyContent={'space-around'} item sm={3}>\n                        <Typography variant={'body1'} component={'h5'}\n                                    color={'textSecondary'}>{t('labelFeeRewards')}</Typography>\n                        <Typography variant={'h4'} marginTop={1}>\n                            {summaryReward === undefined ? EmptyValueTag : currency === Currency.dollar ? PriceTag.Dollar\n                                + getThousandFormattedNumbers(summaryReward.feeDollar ? summaryReward.feeDollar : 0)\n                                : PriceTag.Yuan\n                                + getThousandFormattedNumbers(summaryReward.feeYuan ? summaryReward.feeYuan : 0)}\n                        </Typography>\n                    </Grid>\n                    <Grid display={'flex'} flexDirection={'column'} justifyContent={'space-around'} item sm={3}>\n                        <Typography variant={'body1'} component={'h5'}\n                                    color={'textSecondary'}>{t('labelMiningRewards')}</Typography>\n                        <Typography variant={'h4'} marginTop={1}>\n                            {summaryReward === undefined ? EmptyValueTag : currency === Currency.dollar ? PriceTag.Dollar\n                                + getThousandFormattedNumbers(summaryReward.rewardDollar ? summaryReward.rewardDollar : 0)\n                                : PriceTag.Yuan\n                                + getThousandFormattedNumbers(summaryReward.rewardYuan ? summaryReward.rewardYuan : 0)}\n                        </Typography>\n                    </Grid>\n                </StyleWrapper>\n                <StyleWrapper container marginY={2} height={340}>\n                    <StyledBtnGroupWrapper display={'flex'} padding={3} justifyContent={'space-between'}>\n                        <Typography variant={'body1'} component={'h5'}\n                                    color={'textSecondary'}>{t('labelLiquidityValue')}</Typography>\n                        <Box marginRight={-1}>\n                            <ToggleButtonGroup exclusive size=\"small\" {...{\n                                ...rest,\n                                t,\n                                data: toggleData,\n                                value: chartPeriod,\n                                setValue: setChartPeriod\n                            }} />\n                        </Box>\n                    </StyledBtnGroupWrapper>\n                    <ScaleAreaChart type={ChartType.Trend} data={[]}/>\n                </StyleWrapper>\n                <Typography paddingLeft={2} variant={'h4'}>{t('labelMyAmm')}</Typography>\n                <TableWrapStyled container marginY={2} paddingY={2} flex={1} height={568}>\n                    <Grid item xs={12} display={'flex'} flexDirection={'column'}>\n                        <MyPoolTable\n                            rawData={myPoolRow}\n                            pagination={{pageSize: 5}}\n                            handleDeposit={(row: any) => {\n                                console.log()\n                            }}\n                            handleWithdraw={(row: any) => {\n                                console.log()\n                            }}\n                            handlePageChange={() => {\n                            }}\n                        />\n                    </Grid>\n                </TableWrapStyled>\n                <Typography paddingLeft={2} variant={'h4'}>{t('labelMyAmmRecord')}</Typography>\n                <TableWrapStyled container marginTop={2} paddingY={2} flex={1}>\n                    <Grid item xs={12} display={'flex'} flexDirection={'column'}>\n                        <AmmRecordTable rawData={myAmmMarketArray} handlePageChange={_handlePageChange} page={page}/>\n                    </Grid>\n                </TableWrapStyled>\n            </>\n        )\n    })","import { AmmPoolActivityRule, LoopringMap } from 'loopring-sdk';\nimport React from 'react';\nimport { AmmRecordRow, MyPoolRow } from '@loopring-web/component-lib';\nimport { makeWallet, WalletMapExtend } from '../../../hooks/help/makeWallet';\nimport {\n    getUserAmmTransaction,\n    makeMyAmmMarketArray,\n    makeMyPoolRowWithPoolState,\n    makeSummaryMyAmm,\n    SummaryMyAmm\n} from '../../../hooks/help';\nimport { useTokenMap } from '../../../stores/token';\nimport { useWalletLayer2 } from '../../../stores/walletLayer2';\nimport { useUserRewards } from '../../../stores/userRewards';\nimport { useAmmMap } from '../../../stores/Amm/AmmMap';\n\n\nexport const useOverview = <R extends { [ key: string ]: any }, I extends { [ key: string ]: any }>(\n    {\n        ammActivityMap\n    }: { ammActivityMap: LoopringMap<LoopringMap<AmmPoolActivityRule[]>> | undefined }\n): {\n    myAmmMarketArray: AmmRecordRow<R>[],\n    summaryReward: SummaryMyAmm | undefined,\n    myPoolRow: AmmRecordRow<R>[]\n    // ammActivityViewMap: Array<AmmCardProps<I>>,\n    // ammActivityPastViewMap: Array<AmmCardProps<I>>\n} => {\n    const walletLayer2State = useWalletLayer2();\n    const userRewardsMapState = useUserRewards();\n    const {marketArray} = useTokenMap();\n    const ammMapState = useAmmMap();\n    const {ammMap} = ammMapState;\n\n    const [walletMap, setWalletMap] = React.useState<WalletMapExtend<R> | undefined>(undefined);\n    const [summaryReward, setSummaryReward] = React.useState<SummaryMyAmm | undefined>(undefined);\n    const [myPoolRow, setMyPoolRow] = React.useState<MyPoolRow<R>[]>([])\n    const [myAmmMarketArray, setMyAmmMarketArray] = React.useState<AmmRecordRow<R>[]>([]);\n    // const [ammUserRewardMap, setAmmUserRewardMap] = React.useState<AmmUserRewardMap|undefined>(undefined);\n    // const [snapShotData,setSnapShotData] = React.useState<{\n    //     tickerData: TickerData|undefined\n    //     ammPoolsBalance: AmmPoolSnapshot|undefined\n    // }|undefined>(undefined);\n    const walletLayer2DoIt = React.useCallback(() => {\n        const {walletMap: _walletMap} = makeWallet();\n        setWalletMap(_walletMap)\n        if (_walletMap) {\n            getUserAmmTransaction()?.then((marketTrades) => {\n                let _myTradeArray = makeMyAmmMarketArray(undefined, marketTrades)\n                setMyAmmMarketArray(_myTradeArray ? _myTradeArray : [])\n            })\n        }\n        return _walletMap\n    }, [makeWallet, getUserAmmTransaction, makeMyAmmMarketArray, marketArray])\n    const makeMyPoolRow = React.useCallback((_walletMap): MyPoolRow<R>[] => {\n        if (_walletMap && ammMap) {\n            // @ts-ignore\n            const _myPoolRow: MyPoolRow<R>[] = Reflect.ownKeys(_walletMap).reduce((prev: MyPoolRow<R>[], walletKey: string) => {\n                if (/LP-/i.test(walletKey)) {\n                    const ammKey = walletKey.replace('LP-', 'AMM-');\n                    const marketKey = walletKey.replace('LP-', '');\n                    let rowData: MyPoolRow<R> | undefined;\n                    //TODO：websocket open\n                    //  if(ammPoolSnapShots)\n                    // makeData by snapshot else\n                    // else\n                    rowData = makeMyPoolRowWithPoolState(\n                        {\n                            ammDetail: ammMap[ ammKey ],\n                            walletMap: _walletMap,\n                            market: marketKey,\n                            ammUserRewardMap: userRewardsMapState.userRewardsMap\n                        }\n                    )\n                    if (rowData !== undefined) {\n                        prev.push(rowData);\n                    }\n                }\n                return prev\n            }, [] as MyPoolRow<R>[])\n            // console.log('rowData',_myPoolRow);\n            return _myPoolRow;\n        }\n        return [];\n    }, [ammMap, userRewardsMapState.userRewardsMap])\n\n    React.useEffect(() => {\n        if (walletLayer2State.walletLayer2) {\n            const _walletMap = walletLayer2DoIt();\n            if (ammMap) {\n                const _myPoolRow = makeMyPoolRow(_walletMap)\n                setMyPoolRow(_myPoolRow)\n            }\n        }\n    }, []);\n\n    React.useEffect(() => {\n        //ammMapState.ammMap or\n\n        switch (walletLayer2State.status) {\n            case \"ERROR\":\n                walletLayer2State.statusUnset();\n                break;\n            case \"DONE\":\n                walletLayer2State.statusUnset();\n               // const _walletMap = walletLayer2DoIt()\n                const _walletMap = walletLayer2DoIt();\n                //TODO check AmmMap state or ammSnapshot sockets\n                //userRewardsMapState is an option but  walletLayer2 amd ammMapState.ammMap is required\n                if (ammMapState.ammMap) {\n                    const _myPoolRow = makeMyPoolRow(_walletMap);\n                    setMyPoolRow(_myPoolRow)\n                }\n                break;\n            default:\n                break;\n\n        }\n        // }\n    }, [walletLayer2State.status])\n\n    React.useEffect(() => {\n        if (ammMapState.status === \"ERROR\") {\n            //TODO: solve error\n            ammMapState.statusUnset();\n        } else if (ammMapState.status === \"DONE\") {\n            ammMapState.statusUnset();\n            //TODO check AmmMap state or ammSnapshot sockets when websocket open  ammMapState done should not effect myPoolRow\n            if (walletLayer2State.walletLayer2) {\n                const _walletMap = walletLayer2DoIt();\n                //userRewardsMapState is an option and walletLayer2 is required\n                const _myPoolRow = makeMyPoolRow(_walletMap);\n                setMyPoolRow(_myPoolRow);\n            }\n        }\n    }, [ammMapState.status])\n\n    React.useEffect(() => {\n        if (userRewardsMapState.status === \"ERROR\") {\n            //TODO: solve error\n            userRewardsMapState.statusUnset();\n        } else if (userRewardsMapState.status === \"DONE\") {\n            userRewardsMapState.statusUnset();\n            // setAmmUserRewardMap()\n            const summaryReward = makeSummaryMyAmm({userRewardsMap: userRewardsMapState.userRewardsMap});\n            setSummaryReward(summaryReward);\n\n            //TODO check AmmMap state or ammSnapshot sockets\n            if (walletLayer2State.walletLayer2 && ammMapState.ammMap) {  //  ammMapState.ammMap or websocket\n                //userRewardsMapState is an option and walletLayer2 is required\n                const _myPoolRow = makeMyPoolRow(walletLayer2State.walletLayer2);\n                setMyPoolRow(_myPoolRow);\n            }\n\n        }\n    }, [userRewardsMapState.status])\n    return {\n        myAmmMarketArray,\n        summaryReward,\n        myPoolRow,\n        // ammActivityViewMap,\n        // ammActivityPastViewMap\n    }\n\n}\n","import { useRouteMatch } from 'react-router'\n\nimport { Box } from '@material-ui/core'\nimport {\n    SubMenu,\n    SubMenuList as BasicSubMenuList,\n} from '@loopring-web/component-lib'\nimport { withTranslation } from 'react-i18next'\nimport { subMenuLiquidity } from '@loopring-web/component-lib/src/static-resource'\nimport { PoolsPanel } from './PoolsPanel'\nimport { CoinPairPanel } from './CoinPairPanel';\nimport { AmmMiningView } from './AmmMining';\nimport { MyLiquidity } from './MyLiquidity'\nimport { useAmmPool } from './hook';\n\nexport const subMenu = subMenuLiquidity\n\nconst SubMenuList = withTranslation(['layout','common'], { withRef: true })(BasicSubMenuList);\nexport const LiquidityPage = () => {\n\n    // const { ammFee } = useAmmPool('LRC', 'ETH')\n    //\n    // console.log('--- > ammFee:', ammFee)\n    //\n    const {ammActivityMap} = useAmmPool();\n    let match: any = useRouteMatch(['/liquidity/:item',':next/']);\n    const selected = match?.params.item ?? 'pools'\n    let matchPair: any = useRouteMatch(['/liquidity/:item/:next/:symbol']);\n    let symbol:any = undefined\n    if (matchPair && matchPair?.params?.next && matchPair.params.item === 'pools') {\n       if(!matchPair.params.symbol){\n           symbol='LRC-ETH';\n       }else{\n           symbol=matchPair.params.symbol;\n       }\n    }\n    \n    return (\n        <>\n            { symbol && <Box display={'flex'} flexDirection={'column'}  flex={1} alignSelf={'flex-start'}>\n              <CoinPairPanel ammActivityMap={ammActivityMap}/>\n            </Box>\n            }\n            {!symbol && <>  <Box width={'200px'} display={'flex'} justifyContent={'stretch'} marginRight={3} marginBottom={3}>\n                    <SubMenu>\n                        <SubMenuList selected={selected} subMenu={subMenu as any} />\n                    </SubMenu>\n                </Box>\n                <Box  minHeight={420}  display={'flex'} alignItems={'stretch'} justifyContent={'stretch'} flexDirection=\"column\" marginTop={0} flex={1} marginBottom={3}>\n                    {(selected === 'pools' && !symbol ) && <PoolsPanel ammActivityMap={ammActivityMap}/>}\n                    {(selected === 'amm-mining' && !symbol ) && <AmmMiningView ammActivityMap={ammActivityMap}/>}\n                    {(selected === 'my-liquidity' && !symbol ) && <MyLiquidity ammActivityMap={ammActivityMap}/>}\n                    {selected === 'orderBook-Mining' && <AmmMiningView ammActivityMap={ammActivityMap}/>}\n                    {/*{selected === 'orders' && <OrderPanel />}*/}\n                </Box>\n             </>\n            }\n        </>\n    )\n\n}\n","import React from 'react';\nimport { useAmmActivityMap } from '../../stores/Amm/AmmActivityMap';\n\nimport { AmmPoolActivityRule, LoopringMap } from 'loopring-sdk';\nimport { useAccount } from '../../stores/account/hook';\nimport { useUserRewards } from '../../stores/userRewards';\nimport { useAmmMap } from '../../stores/Amm/AmmMap';\n\nexport const useAmmPool = <R extends {[key:string]:any},I extends {[key:string]:any}>()=>{\n    const AmmActivityMapState  = useAmmActivityMap()\n    const {updateUserRewards}  = useUserRewards()\n    const {account} = useAccount();\n    const {ammMap,updateAmmMap} = useAmmMap();\n    const [ammActivityMap,setAmmActivityMap] = React.useState<LoopringMap<LoopringMap<AmmPoolActivityRule[]>>|undefined>(AmmActivityMapState.ammActivityMap)\n    // init AmmMap at begin\n    React.useEffect(() => {\n        if (!ammMap || Object.keys(ammMap).length === 0) {\n            updateAmmMap();\n        }\n    }, []);\n    React.useEffect(() => {\n        switch (AmmActivityMapState.status) {\n            case \"ERROR\":\n                AmmActivityMapState.statusUnset();\n                // setState('ERROR')\n                //TODO: show error at button page show error  some retry dispath again\n                break;\n            case \"DONE\":\n                AmmActivityMapState.statusUnset();\n                setAmmActivityMap(AmmActivityMapState.ammActivityMap)\n                break;\n            default:\n                break;\n\n        }\n    }, [AmmActivityMapState.status])\n\n    //TODO tickMap\n    React.useEffect(() => {\n        if(account.accountId){\n            updateUserRewards()\n        }\n    }, [account.accountId])\n\n    return {\n        ammActivityMap\n    }\n\n}\n\n","import { HashRouter as Router, Route, Switch, } from 'react-router-dom'\n\nimport Header from 'layouts/header'\n\nimport QuotePage from 'pages/QuotePage'\nimport { SwapPage } from 'pages/SwapPage'\n\nimport DebugPage from 'pages/DebugPage'\n\nimport Container from '@material-ui/core/Container'\nimport { Box } from '@material-ui/core'\nimport { DevWrapper } from '../provider/'\nimport { Layer2Page } from '../pages/Layer2Page'\nimport { LiquidityPage } from '../pages/LiquidityPage'\n\nconst RouterView = () => {\n    \n    return <Router>\n        <Header />\n\n        {/*<Box style={{marginTop: `var(--header-height)`}} flex={1} display={'flex'}>*/}\n        <Container maxWidth=\"lg\" style={{minHeight:'calc(100% - 64px - 32px)',display:'flex',flexDirection:'column'}}>\n            {/*style={{height: '100%' }}*/}\n            <Box display={'flex'} flex={1} alignItems={'stretch'} flexDirection={'row'} marginTop={3}  >\n                <Switch>\n                    <Route exact component={SwapPage} path='/'/>\n                    <Route exact component={QuotePage} path='/markets'/>\n                    <Route component={SwapPage} path='/trading/lite'/>\n                    <Route component={SwapPage} path='/trading/lite(/:symbol)'/>\n\n                    <Route exact component={Layer2Page} path='/layer2'/>\n                    <Route exact component={Layer2Page} path='/layer2/assets'/>\n                    <Route exact component={Layer2Page} path='/layer2/transactions'/>\n                    <Route exact component={Layer2Page} path='/layer2/trades'/>\n                    <Route exact component={Layer2Page} path='/layer2/orders'/>\n                    <Route exact component={Layer2Page} path='/layer2/setting'/>\n\n                    <Route exact component={LiquidityPage} path='/liquidity'/>\n                    <Route exact component={LiquidityPage} path='/liquidity/pools/*'/>\n                    <Route exact component={LiquidityPage} path='/liquidity/pools'/>\n                    {/*<Route exact component={LiquidityPage} path='/liquidity/pools/coinPair(/:symbol)'/>*/}\n                    <Route exact component={LiquidityPage} path='/liquidity/amm-mining'/>\n                    <Route exact component={LiquidityPage} path='/liquidity/my-liquidity'/>\n                    <Route exact component={LiquidityPage} path='/liquidity/orderBook-Mining'/>\n                    <Route exact component={LiquidityPage} path='/liquidity/maker-rebates'/>\n\n                    <DevWrapper>\n                        <Route exact path='/debug'>\n                            <DebugPage/>\n                        </Route>\n                    </DevWrapper>\n\n                </Switch>\n            </Box>\n        </Container>\n        {/*</Box>*/}\n\n    </Router>\n}\n\nexport default RouterView\n"],"sourceRoot":""}