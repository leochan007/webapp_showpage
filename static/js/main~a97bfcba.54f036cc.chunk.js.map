{"version":3,"sources":["hooks/help/volumeToCount.ts","hooks/exchange/useApi.ts","services/ammPoolService.ts","pages/LiquidityPage/PoolsPanel/hook.ts","hook.ts","pages/LoadingPage/index.tsx","defs/common_defs.ts","hooks/modal/useModals.ts","layouts/header/hook.tsx","utils/hook_tools.ts","hooks/common/useCommon.ts","pages/AccountPage/index.tsx","layouts/header/index.tsx","hooks/exchange/useExchangeAPI.ts","pages/QuotePage/hook.ts","pages/styled.ts","pages/QuotePage/index.tsx","pages/SwapPage/panel/BasicInfoPanel/hook.tsx","pages/SwapPage/panel/BasicInfoPanel/index.tsx","pages/SwapPage/panel/TradePanel/index.tsx","pages/SwapPage/index.tsx","pages/SwapPage/hook.ts","hooks/exchange/useWebsocketApi.ts","hooks/exchange/useWsAPI.ts","pages/DebugPage/index.tsx","pages/Layer2Page/TxPanel/index.tsx","pages/Layer2Page/TxPanel/hooks.ts","pages/Layer2Page/AssetPanel/index.tsx","utils/formatter_tool.ts","pages/Layer2Page/TradePanel/index.tsx","pages/Layer2Page/AmmPanel/index.tsx","pages/Layer2Page/OrderPanel/index.tsx","pages/SettingPage/index.tsx","pages/Layer2Page/index.tsx","pages/LiquidityPage/PoolsPanel/index.tsx","pages/LiquidityPage/AmmPanel/index.tsx","pages/LiquidityPage/AmmPanel/hooks.ts","pages/LiquidityPage/CoinPairPanel/hooks.ts","pages/LiquidityPage/CoinPairPanel/index.tsx","pages/LiquidityPage/AmmMining/index.tsx","pages/LiquidityPage/AmmMining/hook.ts","pages/LiquidityPage/MyLiquidity/index.tsx","pages/LiquidityPage/MyLiquidity/hook.ts","pages/LiquidityPage/index.tsx","pages/LiquidityPage/hook.ts","routers/index.tsx","pages/ErrorPage/index.tsx","utils/dt_tools.ts","defs/swap_defs.ts","stores/Amm/AmmMap/hook.ts","defs/web3_defs.ts","stores/account/hook.ts","state_machine/machine_builder.ts","stores/account/reducer.ts","stores/token/hook.ts","stores/trading/hook.ts","utils/obj_tools.ts","stores/walletLayer2/hook.ts","networks/web3_connectors.ts","stores/Amm/AmmMap/reducer.ts","stores/trading/reducer.ts","index.tsx","stores/walletLayer1/hook.ts","stores/socket/reducer.ts","storage/index.ts","stores/ticker/reducer.ts","stores/walletLayer2/reducer.ts","hooks/web3/useWeb3.ts","stores/userRewards/hook.ts","stores/system/interface.ts","stores/walletLayer1/reducer.ts","stores/userRewards/reducer.ts","stores/Amm/AmmActivityMap/reducer.ts","stores/token/reducer.ts","stores/system/reducer.ts","stores/apis/api.ts","hooks/help/makeUIAmmActivityMap.ts","stores/system/hook.ts","hooks/help/marketTable.ts","stores/global/actions.ts","stores/Amm/AmmActivityMap/saga.ts","stores/Amm/AmmMap/saga.ts","stores/Amm/index.ts","stores/token/saga.ts","stores/ticker/saga.ts","stores/system/saga.ts","stores/walletLayer1/saga.ts","stores/walletLayer2/saga.ts","stores/userRewards/saga.ts","stores/socket/saga.ts","stores/rootSaga.ts","stores/index.ts","state_machine/account_machine_spec.ts","hooks/help/ammPairDetail.ts","hooks/help/coinPairInit.ts","hooks/help/connectStatusCallback.ts","hooks/help/makeCache.ts","hooks/help/makeMyPoolDetail.ts","hooks/help/makeTickView.ts","hooks/help/pairDetail.ts","utils/swap_calc_utils.ts","stores/ticker/hook.ts","stores/Amm/AmmActivityMap/hook.ts","stores/socket/hook.ts","hooks/help/makeWallet.ts","utils/web3_tools.ts","provider/global/index.tsx","provider/web3ReactManager/index.tsx","provider/dev-wrapper/index.tsx","services/tickerService.ts","stores/constant.ts","services/socketUtil.ts","utils/log_tools.ts","hooks/common/useCustomDCEffect.ts"],"names":["volumeToCount","symbol","volumn","tokenMap","store","getState","result","volumeToCountAsBigNumber","toNumber","undefined","toBig","div","BIG10","pow","decimals","error","useApi","ApiClass","timeout","DEFAULT_TIMEOUT","useSelector","state","trading","chainId","genApi","api","useMemo","useWsAPI","WsAPI","useExchangeAPI","ExchangeAPI","useAmmpoolAPI","AmmpoolAPI","useUserAPI","UserAPI","subject","Subject","ammPoolService","sendAmmPool","ammPoolMap","next","onSocket","asObservable","useAmmMapUI","pageSize","React","useState","rawData","setRawData","page","setPage","timestamp","setTimestamp","coinMap","useTokenMap","useAmmMap","ammMap","ammMapStatus","status","ammMapStatusUnset","statusUnset","useTicker","tickerMap","tickerStatus","tickerStatusUnset","updateTickers","useSocket","updateRawData","useCallback","_ammMap","deepClone","tickerMapKey","tradeFloat","Object","keys","map","ammKey","CustomError","ErrorMap","NO_TOKEN_MAP","options","updateTickerLoop","_keys","clearTimeout","setTimeout","setImmediate","updateTickersUI","_page","length","i","push","useEffect","console","log","STATUS","PENDING","DONE","useInit","setState","systemState","useSystem","tokenState","ammMapState","accountState","useAccount","walletLayer1State","useWalletLayer1","useCustomDCEffect","a","handleChainChanged","updateSystem","window","location","reload","handleAccountChanged","accounts","detectEthereumProvider","provider","Number","request","method","on","ChainId","MAINNET","accountId","StyleBox","styled","Box","theme","colorBase","primaryLight","LoadingPage","useTranslation","t","flex","display","alignItems","justifyContent","flexDirection","marginTop","height","maxWidth","className","title","version","id","xmlns","xmlnsXlink","x","y","width","viewBox","enableBackground","xmlSpace","fill","d","attributeType","attributeName","type","from","to","dur","repeatCount","Theme","LangType","SystemStatus","MODAL_TYPE","useModals","dispatch","useDispatch","ShowDeposit","isShow","defaultProps","isNoAccount","account","AccountStatus","NOACCOUNT","action","props","description","setShowDeposit","ShowTransfer","setShowTransfer","ShowWithdraw","setShowWithdraw","ShowResetAccount","setShowResetAccount","useChargeFeeList","tokenSymbol","requestType","amount","apiKey","chargeFeeList","setChargeFeeList","tokenInfo","times","toFixed","getOffchainFeeAmt","response","raw_data","fees","forEach","item","index","feeRaw","fee","token","sdk","belong","__raw__","dumpError400","useModalProps","useWeb3Account","isConnected","connector","eddsaKey","totalCoinMap","walletLayer2State","marketArray","marketCoins","marketMap","useWalletLayer2","walletMap1","setWalletMap1","walletMap2","setWalletMap2","walletLayer2","walletMap","makeWalletLayer2","walletLayer1","tradeValue","balance","depositValue","setDepositValue","deposit","amt","exchangeInfo","system","LoopringAPI","exchangeAPI","exchangeAddress","depositAddress","getProvider","web3","Web3","sendByMetaMask","connectName","ConnectorNames","Injected","gasPrice","gasLimit","parseInt","gasAmounts","accAddr","nonce","address","response2","depositProps","tradeData","depositBtnStatus","TradeBtnStatus","AVAILABLE","onDepositClick","toString","handlePanelEvent","data","switchType","Promise","res","setTokenSymbol","transferValue","setTransferValue","transferTokenSymbol","setTransferTokenSymbol","transferFeeList","OffchainFeeReqType","TRANSFER","feeInfo","setFeeInfo","transfer","userAPI","sellToken","feeToken","transferVol","sellTokenId","tokenId","getNextStorageId","storageId","walletType","request2","exchange","payerAddr","payerId","payeeAddr","payeeId","offchainId","volume","maxFee","validUntil","VALID_UNTIL","submitInternalTransfer","transferProps","transferBtnStatus","onTransferClick","handleFeeChange","value","chargeFeeToken","chargeFeeTokenList","handleOnAddressChange","handleAddressError","_value","message","withdrawValue","setWithdrawValue","OFFCHAIN_WITHDRAWAL","withdrawType","setWithdrawType","withdrawalFeeList","withdrawType2","FAST_OFFCHAIN_WITHDRAWAL","withdrawFeeInfo","setWithdrawFeeInfo","withdraw","withdrawToken","owner","extraData","minGas","submitOffchainWithdraw","withdrawProps","withdrawBtnStatus","onWithdrawClick","withdrawTypes","WithdrawTypes","handleWithdrawTypeChange","offchainType","WithdrawType","Fast","resetValue","setResetValue","resetProps","resetBtnStatus","onResetClick","count","price","ammProps","ammDepositData","coinA","coinB","slippage","ammWithdrawData","ammCalcData","myCoinA","myCoinB","lpCoinA","lpCoinB","lpCoin","AtoB","coinInfoMap","feeJoin","feeExit","handleAmmAddChangeEvent","handleAmmRemoveChangeEvent","onAmmRemoveClick","onAmmAddClick","swapProps","tradeCalcData","coinSell","coinBuy","BtoS","StoB","sellCoinInfoMap","buyCoinInfoMap","priceImpact","minimumReceived","onSwapClick","handleSwapPanelEvent","PromiseJob","fetchPromise","setFunc","field","prefix","mounted","handler","then","catch","reason","cleanUp","usePromiseJob","dependencies","ModalAccountInfo","withTranslation","onClose","open","rest","Modal","aria-labelledby","aria-describedby","style","boxShadow","paddingTop","paddingBottom","minWidth","Header","useLocation","i18n","useSettings","setTheme","themeMode","language","setLanguage","useOpenModals","modals","isShowAccountInfo","isShowConnect","setShowConnect","setShowAccountInfo","forceUpdate","useReducer","bool","useUnlock","lock","unlock","connect","useConnect","etherscanUrl","useEtherscan","gatewayList","DefaultGatewayList","handleSelect","myLog","WalletConnect","Ledger","Trezor","accountInfoProps","setAccountInfoProps","onNotification","onWalletBtnConnect","acc","UNCONNNECTED","CONNECTED","LOCKED","ACTIVATED","onThemeBtnClick","dark","light","onLangBtnClick","lang","headerToolBarData","ButtonComponentsMap","handleClick","Language","handleChange","UnlockBtn","onClick","startIcon","fontSize","event","variant","Typography","lockCallback","unLockCallback","LockBtn","addr","getShortAddr","updateHeaderMenuWhenHasAccountInfo","headerMenuData","HeadMenuTabKey","Layer2","HeaderMenuTabStatus","default","addressShort","level","etherscanLink","mainBtn","_event","connectBy","UNACTIVATED","DEPOSITING","DEPOSIT_TO_CONFIREM","ARPROVING","APPROV_TO_CONFIRM","onLock","label","WalletStatus","hidden","noAccount","accountPending","useHeader","disconnect","setExchangeInfo","getExchangeInfo","useGetExchangeInfo","useDisconnect","onSwitch","openQRCode","setOpenQRCode","copyToastOpen","setCopyToastOpen","closeCopyToast","Snackbar","autoHideDuration","Alert","severity","url","withDrawProps","process","selected","pathname","headerRoot","Toolbar","onCopy","copyToClipBoard","onViewQRCode","onDisconnect","OnePageSize","isNeedCallMore","currentStartIndex","marketArrayLength","currentListLength","pageCurrent","StylePaper","background","unit","TableWrapStyled","Grid","TablePaddingX","pLeft","pRight","RowStyled","QuotePage","candlestickList","setCandlestickList","getCandlestick","market","getMixCandlestick","interval","TradingInterval","d1","limit","candlesticks","o","close","timeStamp","prev","sendSocketTopic","socketEnd","recommendMarkets","slice","_marketArrayWithOutRecommend","filter","findIndex","m","tickList","setTickList","recommendations","setRecommendations","setTickerKeys","focusRowFrom","setFocusRowFrom","startIndex","setStartIndex","tickerService","updateRecommendation","recommendationIndex","ticker","subscription","subscribe","Reflect","ownKeys","key","ele","unsubscribe","getTicker","socketSendTicker","array","concat","_recommendationsFloat","_tickList","reduce","match","_item","pair","_recommendations","coinAInfo","coinBInfo","debounceGetTicker","debounce","globalSetup","wait","_startIndex","WsTopicType","onVisibleRowsChange","useQuote","list","simpleName","history","useHistory","handleRowClick","row","tradePair","container","chartData","find","xs","marginY","onRowClick","col","toggleData","ChartType","Trend","Depth","BasicInfoPanel","tgItemJSXs","tlabel","JSX","getExistedMarket","name","amm","chartType","setChartType","ChartUnit","D1","chartUnit","setChartUnit","originData","setOriginData","_e","exchangeApi","tgItemJSXsPriceChart","pre","tGItemData","min15","low","high","quoteVol","getMixDepth","depth","bidsPrices","bids_prices","bidsAmtTotals","bids_amtTotals","asksPrices","asks_prices","asksAmtTotals","asks_amtTotals","handleChartUnitChange","newValue","mappedValue","H1","W1","useBasicInfo","upColor","exclusive","position","minHeight","maxHeight","riseColor","handleMove","applyProps","StyledTabsWrapper","TradePanel","FormControlLabel","tradeArray","myTradeArray","setValue","Tabs","onChange","aria-label","Tab","FixedStyle","SwapPage","useRouteMatch","delayAndUpdateWalletLayer2","isSwapLoading","setIsSwapLoading","setTradeData","setTradeCalcData","setTradeArray","setMyTradeArray","setTradeFloat","setPair","ammPoolSnapshot","setAmmPoolSnapshot","swapBtnI18nKey","setSwapBtnI18nKey","output","setOutput","feeBips","params","resetSwap","sell","buy","getUserTrades","marketTrades","_myTradeArray","makeMarketArray","accountStaticCallBack","bntLabel","swapCalculatorCallback","baseToken","quoteToken","orderId","amountS","buyToken","amountBOutSlip","minReceived","allOrNone","maxFeeBips","fillAmountBOrS","orderType","OrderType","ClassAmm","eddsaSignature","submitOrder","__cache__","makeCache","swapBtnClickArray","assign","btnClickMap","fnType","swapData","resolve","SwapType","SEll_CLICK","BUY_CLICK","SELL_SELECTED","BUY_SELECTED","EXCHANGE_CLICK","setDepth","updateDepth","setInterval","calculateTradeData","_tradeData","fm","_tradeCalcData","input","isAtoB","base","quote","__rawConfig__","minReceivedVal","parseFloat","throttleSetValue","_","_ammPoolSnapshot","td","coinKey","_tradeFloat","_tradeArray","coinPairInit","apiList","getMarketTrades","pairDetailBlock","all","ammPoolsBalance","tickMap","_td","pairDetailDone","tickerData","makeTickView","TRADE_LITE_SET_PAIR_ERROR","useSwapPage","marginRight","alignContent","swapBtnStatus","LOADING","stateArr","useWebsocket","topics","verify","ws","needApiKey","useRef","wsData","setMessage","readyState","setReadyState","webSocketInit","current","getWsKey","wsApiKey","basePath","wsKey","WebSocket","onopen","onclose","e","onerror","onmessage","closeWebSocket","sendMessage","msg","send","reconnect","useWs","socketData","setSocketData","isLocalPage","setIsLocalPage","document","addEventListener","visibilityState","err","JSON","parse","useHandleSocketData","setAccount","ammPool","setAmmPool","order","setOrder","setTicker","op","topic","ammpool","baseAmt","quoteAmt","candlestick","orderBook","trade","Error","useQuotePageWs","markets","setMarkets","getMarkets","useGetMarkets","c","every","getTickerArg","DebugPage","stringify","TxPanel","setPageSize","txTableData","txs","setTxs","getTxnStatus","TransactionStatus","processing","processed","received","failed","getUserTxnList","getUserTranferList","getUserDepositHistory","getUserOnchainWithdrawalHistory","userTxnList","userTransferMapped","userTransfers","side","TransactionTradeTypes","feeTokenSymbol","feeAmount","memo","time","txnHash","hash","userDepositMapped","userDepositHistory","txHash","userWithdrawMapped","userOnchainWithdrawalHistory","mappingList","sortedMappingList","sort","b","useGetTxs","offsetHeight","Math","floor","ref","pagination","showFilter","StyledChartWrapper","StyledBtnGroupWrapper","AssetPanel","chartPeriod","setChartPeriod","setChartData","assetsKeyList","assetsDetailList","values","assetsList","detail","getUserTotalAssets","walletAPI","getUserAssets","wallet","assetType","AssetType","DEX","userAssets","createdAt","updateWalletLayer1","onShowDeposit","onShowTransfer","onShowWithdraw","lpTokenJump","handleChartPeriodChange","faitPrices","tokenPriceList","entries","jointLPTokenValue","split","splice","ammToken","join","tokenValue","includes","amountDollar","doughnutData","tokenPriceUSDT","total","formattedDoughnutData","AssetTitleProps","assetInfo","totalAsset","priceTag","PriceTag","Dollar","assetsRawData","TokenType","lp","single","String","EmptyValueTag","available","locked","smallBalance","Paper","component","color","size","showFiliter","onLpDeposit","onLpWithdraw","getTokenInfo","StringToNumberWithPrecision","rawVal","trim","precision","VolToNumberWithPrecision","originalData","setOriginalData","userTrades","marketList","Side","Buy","TradeTypes","Sell","tradeTime","AmmPanel","getTokenName","getAmmpoolList","ammpoolAPI","getUserAmmPoolTxs","userAmmPoolTxs","txType","AmmTxType","JOIN","AmmSideTypes","Join","Exit","poolTokens","actualAmount","lpTokenAmount","lpToken","updatedAt","OrderPanel","orderOriginalData","setOrderOriginalData","getOrders","userOrders","Array","isArray","orders","volumes","baseAmount","quoteAmount","baseFilled","quoteFilled","average","filledAmount","filledPrice","validity","start","detailTable","StyledPaper","StyledSwitch","Switch","textPrimary","border","success","backgroundColor","opacity","BtnCurrency","currency","Currency","dollar","_handleChange","target","IconComponent","DropDownIcon","labelId","autoWidth","yen","StyledDivider","Divider","SettingPanel","focus","useTheme","setUpColor","setCurrency","direction","flexWrap","paddingLeft","paddingY","marginBottom","paddingX","Trans","i18nKey","alignSelf","Button","disabled","passDay","changeLanguage","textTransform","UpColor","green","up","down","checked","red","subMenu","subMenuLayer2","BoxStyle","defaultFrame","c_key","SubMenuList","withRef","BasicSubMenuList","Layer2Page","accStatus","PoolsPanel","ammActivityMap","handlePageChange","AmmPanelView","ammType","snapShotData","setAmmCalcData","ammJoinData","setAmmJoinData","ammExitData","setAmmExitData","ammDepositBtnI18nKey","setAmmDepositBtnI18nKey","ammWithdrawBtnI18nKey","setAmmWithdrawBtnI18nKey","initAmmData","_ammCalcData","ammPairInit","setAmmPoolSnapShot","updateAmmPoolSnapshot","ammInfo","request1","poolAddress","getAmmPoolSnapshot","clearInterval","joinFees","setJoinFees","exitFees","setExitfees","requestJoin","AMM_JOIN","feesJoin","requestExit","AMM_EXIT","feesExit","joinRequest","setJoinRequest","handlerJoinInDebounce","slippageReal","idIndex","marketInfo","coinA_TV","pooled","coinB_TV","covertVal","ratio","rawA","rawB","makeJoinAmmPoolRequest","joinTokens","precisionForPrice","handleJoinAmmPoolEvent","addToAmmCalculator","setJoinLoading","patch","ammName","storageId0","request_1","storageId1","storageIds","joinAmmPool","onAmmDepositClickMap","exitRequest","setExitRequest","handleExitInDebounce","makeExitAmmPoolRequest","exitTokens","unPooled","handleExitAmmPoolEvent","isJoinLoading","isExitLoading","setExitLoading","removeAmmCalculator","burnedReq","burned","exitAmmPool","removeAmmClickMap","useAmmPanel","AmmPanelType","Deposit","isLoading","tabSelected","ammDepositBtnStatus","ammWithdrawBtnStatus","makeAmmDetailExtendsActivityMap","ammDetail","ammActivity","BoxStyled","fontDefault","h4","BoxTopStyled","CoinPairPanel","useUserRewardsState","useUserRewards","getAmmMap","setWalletMap","ammMarketArray","myAmmMarketArray","setMyAmmMarketArray","ammUserRewardMap","setAmmUserRewardMap","setSnapShotData","feeA","feeB","feeDollar","feeYuan","reward","rewardToken","balanceA","balanceB","balanceYuan","balanceDollar","myAmm","setMyAmm","activity","totalRewards","amountYuan","totalLPToken","totalA","totalB","rewardValue","isNew","isActivity","APY","coinPairInfo","setCoinPairInfo","pairHistory","setPairHistory","walletLayer2DoIt","_walletMap","getUserAmmTransaction","makeMyAmmMarketArray","getPairList","ammList","formattedPairHistory","reverse","_coinPairInfo","_snapShotData","_myAmm","makeMyAmmWithSnapshot","userRewardsMap","useCoinPair","tabIndex","setTabIndex","_handlePageChange","coinJson","coinAIcon","coinBIcon","Breadcrumbs","Link","href","getThousandFormattedNumbers","moment","duration","format","imgx","imgy","imgheight","imgwidth","alt","src","Avatar","lineHeight","marginLeft","Yuan","priceDollar","priceYuan","AmmCardWrap","forwardRef","AmmList","ammActivityViewMap","jumpTo","sm","lg","AmmMiningView","userRewardsMapState","setAmmActivityViewMap","ammActivityPastViewMap","setAmmActivityPastViewMap","makeUIAmmActivityMap","ammPoolActivityStatus","AmmPoolActivityStatus","NotStarted","InProgress","EndOfGame","useAmmMiningUI","spacing","StyleWrapper","MyLiquidity","JumpToLiqudity","summaryReward","setSummaryReward","myPoolRow","setMyPoolRow","makeMyPoolRow","walletKey","test","rowData","replace","marketKey","makeMyPoolRowWithPoolState","_myPoolRow","makeSummaryMyAmm","useOverview","padding","margin","rewardDollar","rewardYuan","handleDeposit","handleWithdraw","subMenuLiquidity","LiquidityPage","AmmActivityMapState","useAmmActivityMap","getUserRewards","setAmmActivityMap","useAmmPool","matchPair","RouterView","Container","exact","path","ErrorPage","messageKey","textAlign","left","top","body","email","CONTACT_US_EMAIL","getContactInfo","preventDefault","OrderHandling","BIG0","BIG1","BIG10K","MULTI_FACTOR","connectorsByName","Unknown","injected","Network","network","walletconnect","WalletLink","walletlink","ledger","trezor","Authereum","authereum","useActiveWeb3React","library","active","voca","isBlank","isActivated","useStateMachine","spec","machine","AccountMachineSpec","currentState","stateTransitions","states","nextState","sendEvent","setAccountStatus","activate","activatingConnector","setActivatingConnector","item_name","isSwitch","StatusChangeEvent","Reset","newConnector","setConnectNameTemp","deactivate","reset","userApi","tradingInfo","useGetTradingInfo","resetLayer2","Lock","sk","apikey","sign_tools","getUserApiKey","Unlock","resultInfo","code","feeMap","publicKey","formatedPx","formatedPy","updateAccount","updateAccountResponse","sleep","setEddsaKey","setApikey","useCheckAccStatus","web3Account","lv1Acc","prevChainId","usePrevious","prevWeb3Account","resetLayer1","updateWalletLayer2","checkStatus","setConnectName","Connecting","getAccount","accInfo","setAccountInfo","connectNameTemp","HasPubkey","setAccAddr","ErrorResponse","delay","Reconnect","FinishDeposit","UserStorage","checkTimeout","isTimeOut","setHandler","getHandler","initialState","defaultAccId","REACT_APP_TEST_ACCOUND_ID","getAccountId","defaultApiKey","REACT_APP_TEST_API_KEY","getApikey","defaultOwner","REACT_APP_TEST_OWNER","defaultEddsaKey","REACT_APP_TEST_EDDSA_KEY","getEddsakey","isContractAddress","accountSlice","createSlice","reducers","initState","payload","setIsContractAddress","actions","getTokenMap","getChainId","useUpdateChainId","setChainId","GORLI","useUpdateExchangeMarkets","getMixMarkets","useUpdateExchangeInfo","useUpdateAmmPoolConf","getAmmPoolConf","ammPoolConf","setAmmPoolConf","useUpdateAmmPoolStats","getAmmPoolStats","ammPoolStats","setAmmPoolStats","useUpdateAmmActivityRules","getAmmPoolActivityRules","ammActivityRules","setAmmActivityRules","activityRules","useUpdateTokens","getTokens","tokens","setTokens","constructor","hasOwnProperty","text","execCommand","textarea","createElement","appendChild","select","removeChild","navigator","clipboard","writeText","clipboardData","setData","Date","getTime","POLLING_INTERVAL","RPC_URLS","1","5","InjectedConnector","supportedChainIds","NetworkConnector","urls","defaultChainId","WalletConnectConnector","rpc","bridge","qrcode","pollingInterval","WalletLinkConnector","appName","LedgerConnector","TrezorConnector","manifestEmail","manifestAppUrl","AuthereumConnector","__timer__","errorMessage","ammMapSlice","getAmmMapStatus","ERROR","updateRealTimeAmmMap","UNSET","refreshRate","refreshRateSlow","tradingSlice","changeTradingInterval","setTickerMap","setMarketTrades","Web3ProviderNetwork","createWeb3ReactRoot","NetworkContextName","providers","LocalizationProvider","dateAdapter","MomentUtils","I18nextProvider","MuThemeProvider","getTheme","ThemeProvider","Provider","ReactDOM","render","getLibrary","App","getElementById","socketSlice","socket","getSocketStatus","CONSTANTS","rawHandler","sessionStorage","getItem","Handler","setItem","removeItem","dateTimeStr","localStorage","ActiveTime","now","tmpDt","SESSION_TIMEOUT_SECONDS","clear","rawId","AccountId","Account","Apikey","Eddsakey","eddsakey","orderHash","AmmOrder","HardwareAddresses","toLowerCase","tickerMapSlice","getTickers","getTickerStatus","walletLayer2Slice","getWalletLayer2Status","context","useWeb3React","contextNetwork","setEtherscanUrl","useEagerConnect","tried","setTried","isAuthorized","useInactiveListener","onReConnectInjected","ethereum","reConnectInjected","handleAccountsChanged","removeListener","ENV","NETWORKEXTEND","walletLayer1Slice","getWalletLayer1Status","userRewardsMapSlice","getUserRewardsStatus","ammActivityMapSlice","getAmmActivityMap","getAmmActivityMapStatus","addressIndex","tokenMapSlice","getTokenMapStatus","env","PROD","baseURL","socketURL","forex","systemSlice","updateSocketURL","updateRealTimeObj","getSystemStatus","setTopics","wsAPI","InitApi","WalletAPI","myReward","ammPoolActivityRule","awardRules","myRewards","currentRewards","rangeFrom","rangeTo","isPass","makeAsCard","_ammInfo","itemArray","ammUserReward","getOneRewardInfo","plus","rewardToken2","reward2","feeRewards","BigNumber","makeMyAmmWithStat","getBaseQuote","settings","marketTransaction","AmmTradeType","add","remove","totalDollar","totalYuan","amountA","amountB","txStatus","updateVersion","createAction","getPostsSaga","ammActivityMapSaga","getAmmActivityMapApi","groupByRuleTypeAndStatus","call","put","takeLatest","updateRealTimeSaga","ammMapInitSaga","ammMapRealTimeSaga","setAmmState","ammPoolState","keyPair","liquidityUSD","lpLiquidity","liquidity","rewards","rewardValue2","change","timeUnit","apyBips","getAmmMapApi","ammpools","dataItem","ammMapSaga","fork","ammReducer","combineReducers","reducer","ammForks","tokenInitSaga","getTokenMapApi","tokensMap","pairs","marketArr","tokenArr","coinInfo","icon","getIcon","company","startsWith","tokenList","tradePairs","tokenSaga","tickerSaga","tickersSaga","getTickersApi","getMixTicker","tickers","makeTickerMap","tickerKey","tickerKeys","NO_TOKEN_KEY_LIST","tickerForks","getUpdateSystem","systemSaga","initConfig","tokenSymbolMap","take","getSystemsApi","hostname","DEV","UAT","NONETWORK","NO_NETWORK_ERROR","getFiatPrice","legal","fiatPrices","getGasPrice","systemForks","walletLayer1Saga","getWalletLayer1Balance","getEthBalances","ethBalance","getTokenBalances","tokenBalances","fromWEI","walletLayer1Fork","walletLayer2Saga","getWalletLayer2Balance","getUserBalances","userBalances","walletLayer2Fork","userRewardsSaga","getUserRewardsApi","getAmmPoolUserRewards","reject","userRewardsForks","closeSocket","socketEndSaga","socketSendMessageSaga","socketClose","socketSendMessage","socketForks","mySaga","sagaMiddleware","createSagaMiddleware","settingsSlice","modalsSlice","PERSISTED_KEYS","configureStore","middleware","getDefaultMiddleware","thunk","serializableCheck","save","devTools","enhancers","reduxBatch","preloadedState","load","setCoinJson","imgConfig","run","HasNoPubkey","IsSmartWallet","ApproveSubmit","ApproveConfirmed","isNaN","baseVol","coinACount","coinBCount","onclickMap","deps","fn","args","UNKNOWN","DEFAULT","apply","customSlippage","setSlippage","tick","floatTag","FloatTag","none","increase","decrease","base_token_volume","__rawTicker__","NO_SDK","stob","poolVolumn","poolBaseTokenVol","quoteBaseTokenVol","NO_SUPPORT_PAIR","getIconByTokenInfo","utils","getAddress","getToken","valueInWEI","ceil","precisionToFixed","updateTicker","countBig","pending","minus","Web3Provider","substr","WindowEvent","events","Click","Scroll","forceReset","GlobalProvider","children","removeEventListener","Fragment","MessageWrapper","Message","Web3ReactManager","networkActive","networkError","activateNetwork","triedEager","showLoader","setShowLoader","DevWrapper","sendTicker","_tickerMap","SocketEventType","pingPong","global","loopringSocket","socketEventMap","pingpong","isConnectSocket","globalThis","reolve","makeTopics","unsubscribeAll","clearInitTimer","init","__wsTimer__","timer","socketConnect","baseSocket","warn","makeMessageArray","SOCKET_ERROR","eventType","makeReceiveMessageCallback","getAccountArg","getOrderArg","orderbook","getOrderBookArg","getTradeArg","getCandlestickArg","getAmmpoolArg","SocketEventMap","bid","ask","quote_token_volume","base_fee_amt","quote_fee_amt","poolName","risky","useDeepCompareEffect"],"mappings":"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","file":"static/js/main~a97bfcba.54f036cc.chunk.js","sourcesContent":["import store from '../../stores';\nimport { toBig } from 'loopring-sdk';\nimport { BIG10 } from '../../defs/swap_defs';\nimport BigNumber from 'bignumber.js';\n\nexport const volumeToCount = (symbol:string,volumn:string|number|BigNumber,tokenMap= store.getState().tokenMap.tokenMap):number|undefined =>{\n   const result =  volumeToCountAsBigNumber(symbol,volumn,tokenMap);\n   return result? result.toNumber():undefined;\n}\nexport const volumeToCountAsBigNumber = (symbol:string,volumn:string|number|BigNumber,tokenMap= store.getState().tokenMap.tokenMap):BigNumber|undefined =>{\n    if(tokenMap && tokenMap[symbol] && typeof volumn !== 'undefined'){\n        try{\n            return toBig(volumn).div( BIG10.pow(tokenMap[symbol].decimals))\n        }catch (error){\n            throw error;\n        }\n    }else{\n        return undefined;\n    }\n}","import { WsAPI, ExchangeAPI, AmmpoolAPI, UserAPI, DEFAULT_TIMEOUT, } from 'loopring-sdk'\nimport store, { RootState } from 'stores'\nimport { useSelector } from 'react-redux'\n\nimport { useMemo } from 'react'\n\nfunction useApi(ApiClass: any, timeout = DEFAULT_TIMEOUT) {\n    // const chainId = store.getState().trading.chainId\n    // return new ApiClass(chainId, timeout)\n\n  const { chainId, } = useSelector((state: RootState) => state.trading)\n\n  const genApi = () => {\n      if (!chainId) {\n          return undefined\n      }\n\n      return new ApiClass(chainId, timeout)\n  }\n\n  const api = useMemo(genApi, [ApiClass, chainId, timeout])\n\n  return api\n}\n\nexport function useWsAPI() {\n    return useApi(WsAPI) as WsAPI\n}\n\nexport function useExchangeAPI() {\n    return useApi(ExchangeAPI) as ExchangeAPI\n}\n\nexport function useAmmpoolAPI() {\n    return useApi(AmmpoolAPI) as AmmpoolAPI\n}\n\nexport function useUserAPI() {\n    return useApi(UserAPI) as UserAPI\n}\n","import { Subject } from 'rxjs';\nimport { TradeFloat } from '@loopring-web/common-resources';\n\nconst subject = new Subject();\n\nexport type AmmPoolMap<R> = {\n    [key in keyof R]:TradeFloat\n}\n// <R extends {[key:string]:any}>\n\nexport const ammPoolService = {\n    sendAmmPool: (ammPoolMap:AmmPoolMap<{[key:string]:any}>) => subject.next({ ammPoolMap: ammPoolMap }),\n    // clearMessages: () => subject.next(),\n    onSocket: () => subject.asObservable()\n};","import React from 'react';\nimport { useAmmMap } from '../../../stores/Amm/AmmMap';\nimport { AmmDetail, CustomError, ErrorMap, } from '@loopring-web/common-resources';\nimport { deepClone } from '../../../utils/obj_tools';\nimport { STATUS } from '../../../stores/constant';\nimport { useTokenMap } from '../../../stores/token';\nimport { useSocket } from '../../../stores/socket';\nimport { useTicker } from '../../../stores/ticker';\n// import { tickerService } from '../../../services/tickerService';\n\nexport function useAmmMapUI<R extends { [ key: string ]: any }, I extends { [ key: string ]: any }>({pageSize}: { pageSize: number }) {\n    const [rawData, setRawData] = React.useState<Array<AmmDetail<any>> | []>([]);\n    const [page, setPage] = React.useState<number>(1);\n    // const [keys, setKeys] = React.useState<string[]>([]);\n    const [timestamp, setTimestamp ] = React.useState<NodeJS.Timer|-1>(-1)\n    const {coinMap} = useTokenMap();\n    const {\n        ammMap,\n        status: ammMapStatus,\n        // errorMessage: errorAmmMap,\n        statusUnset: ammMapStatusUnset,\n        // updateAmmMap,\n    } = useAmmMap();\n    const {\n        tickerMap,\n        status: tickerStatus,\n        // errorMessage: errorTickerMap,\n        statusUnset: tickerStatusUnset,\n        updateTickers,\n    } = useTicker();\n    const {\n        status:socketStatus,\n        // errorMessage: errorTickerMap,\n        statusUnset: socketStatusUnset,\n    } = useSocket();\n    const updateRawData = React.useCallback( (tickerMap) => {\n        try {\n            const _ammMap = deepClone(ammMap);\n            for (let tickerMapKey in tickerMap) {\n                if(_ammMap['AMM-' + tickerMapKey ]){\n                    _ammMap['AMM-' + tickerMapKey ].tradeFloat =  {\n                        ..._ammMap['AMM-' + tickerMapKey ].tradeFloat,\n                        ...tickerMap[ tickerMapKey ],\n                        // APY: _ammMap['AMM-' + tickerMapKey ].APY\n                    }\n\n                }\n            }\n            setRawData(Object.keys(_ammMap).map((ammKey: string) => {\n                if (coinMap) {\n                    _ammMap[ ammKey ][ 'coinAInfo' ] = coinMap[ _ammMap[ ammKey ][ 'coinA' ] ];\n                    _ammMap[ ammKey ][ 'coinBInfo' ] = coinMap[ _ammMap[ ammKey ][ 'coinB' ] ];\n                }\n                return  _ammMap[ ammKey ];\n            }) )\n        } catch (error) {\n            throw new CustomError({...ErrorMap.NO_TOKEN_MAP, options: error})\n        }\n\n    } ,[ammMap]);\n    const updateTickerLoop =  React.useCallback((_keys?:string[])=>{\n\n        if(timestamp !== -1){\n            clearTimeout(timestamp)\n        }\n\n        setTimestamp(setTimeout(()=>{\n            updateTickerLoop(_keys);\n        },60000))\n        \n        //console.log(_keys)\n        setImmediate(updateTickers,_keys)\n    },[])\n\n    const updateTickersUI = React.useCallback((_page) => {\n        setPage(_page);\n        if (ammMap && Object.keys(ammMap).length > 0) {\n            const _keys = []\n            for (let i = (page - 1) * pageSize; i < Object.keys(ammMap).length && i < (page - 1) * pageSize + pageSize; i++) {\n                _keys.push(Object.keys(ammMap)[ i ]);\n            }\n            \n            // setKeys(_keys);\n            updateTickerLoop(_keys);\n            // try{\n            //    // socketStart({})\n            // }catch (error){\n            //\n            // }\n\n\n        }\n    }, [ammMap, pageSize]);\n    React.useEffect(() => {\n        if(ammMap && Object.keys(ammMap).length !== 0) {\n            updateTickersUI(page)\n        }\n    }, []);\n\n    React.useEffect(() => {\n        switch (tickerStatus) {\n            case \"ERROR\":\n                console.log(\"ERROR\", 'get ticker error,ui');\n                tickerStatusUnset()\n                break;\n            case \"PENDING\":\n                break;\n            case \"DONE\":\n                tickerStatusUnset();\n                \n                updateRawData(tickerMap)\n                break;\n            default:\n                break;\n        }\n    }, [tickerStatus, tickerStatusUnset]);\n\n    React.useEffect(() => {\n        switch (ammMapStatus) {\n            case \"ERROR\":\n                console.log(\"ERROR\", 'get ammMap error,ui');\n                ammMapStatusUnset();\n                break;\n            case STATUS.PENDING:\n                console.log(\"PENDING\", 'get ammMap error,ui');\n                break;\n            case STATUS.DONE:\n                ammMapStatusUnset();\n                updateTickersUI(1)\n                break;\n            default :\n                break;\n        }\n    }, [ammMapStatus, ammMapStatusUnset, updateTickersUI]);\n\n\n\n    return {\n        page,\n        rawData,\n        updateTickersUI,\n    }\n}\n\n","import React  from 'react';\nimport detectEthereumProvider from '@metamask/detect-provider';\nimport { useCustomDCEffect } from 'hooks/common/useCustomDCEffect';\nimport { useSystem } from './stores/system';\nimport { ChainId } from 'loopring-sdk';\nimport { useAmmMap } from './stores/Amm/AmmMap';\nimport { STATUS } from './stores/constant';\nimport { useTokenMap } from './stores/token';\nimport { useWalletLayer1 } from './stores/walletLayer1';\nimport { useAccount } from './stores/account/hook';\n\n\n/**\n * @description call it when bootstrap the page or change the network\n */\nexport function useInit(){\n    const [state,setState] = React.useState<keyof typeof STATUS>('PENDING')\n    const systemState = useSystem();\n    const tokenState = useTokenMap();\n    const ammMapState = useAmmMap();\n    const accountState  = useAccount();\n    const walletLayer1State  =  useWalletLayer1()\n    //store.getState().account\n    // const socketState =   useSocket();\n\n    useCustomDCEffect(async() => {\n\n        const handleChainChanged = (chainId: any) => {\n    \n            // const network = chainId == ChainId.GORLI ? NETWORK.Goerli : NETWORK.MAIN\n             systemState.updateSystem({ chainId })\n             window.location.reload();\n        }\n\n        const handleAccountChanged = (accounts: Array<string>) => {\n            window.location.reload()\n        }\n\n        const provider: any = await detectEthereumProvider()\n        if (provider) {\n            const chainId = Number(await provider.request({ method: 'eth_chainId' }))\n            const accounts = await provider.request({ method: 'eth_requestAccounts' })\n\n            provider.on('accountsChanged', handleAccountChanged)\n            provider.on('chainChanged', ()=>{handleChainChanged(chainId)} )\n            // @ts-ignore\n            systemState.updateSystem({ chainId  })\n           //handleChainChanged(chainId)\n            \n        } else {\n            systemState.updateSystem({chainId:ChainId.MAINNET})\n        }\n\n    }, [])\n\n    React.useEffect(() => {\n        switch (systemState.status) {\n            case \"ERROR\":\n                systemState.statusUnset();\n                setState('ERROR')\n                //TODO show error at button page show error  some retry dispat again\n                break;\n            case \"DONE\":\n                systemState.statusUnset();\n                //TODO do some static information update\n                //tokenState.getTokenMap();\n                break;\n            default:\n                break;\n\n        }\n    },[\n        systemState,\n        // systemState.status,\n        // systemState.statusUnset,\n        //tokenState.getTokenMap\n\n    ]);\n    React.useEffect(() => {\n        if(ammMapState.status ===\"ERROR\" || tokenState.status === \"ERROR\"){\n            //TODO: solve error\n            ammMapState.statusUnset();\n            tokenState.statusUnset();\n            setState('ERROR');\n        }else if(ammMapState.status ===\"DONE\" && tokenState.status === \"DONE\"){\n            ammMapState.statusUnset();\n            tokenState.statusUnset();\n            setState('DONE');\n        }\n    },[ammMapState,tokenState,accountState.accountId,walletLayer1State])\n\n    // React.useEffect(()=>{\n    //\n    // },[])\n\n\n\n    return {\n        state,\n    }\n\n}\n","import { Trans, useTranslation } from 'react-i18next';\nimport { Box, Container, Link, Slide, Typography } from '@material-ui/core';\nimport styled from '@emotion/styled';\nimport { ErrorObject } from '@loopring-web/common-resources';\nimport { getContactInfo } from '../../utils/dt_tools';\n\nconst StyleBox = styled(Box)`\n  //background-image: url('./static/images/error_bg.png');\n  //background-repeat: no-repeat;\n  //background-size: contain;\n  //background-position: bottom;\n  //white-space: pre-wrap;\n  ////h2{\n  ////  position: relative;\n  ////}\n  /*\n  Set the color of the icon\n*/\n  svg path,\n  svg rect{\n    fill: ${({theme}) => theme.colorBase.primaryLight};\n  }\n` as typeof Box\n\nexport const LoadingPage = () => {\n    const {t} = useTranslation('layout');\n    return <>\n        <Container>\n            {/*style={{height: '100%' }}*/}\n            <StyleBox flex={1} display={'flex'} alignItems={'center'} justifyContent={'center'}\n                      flexDirection={'column'} marginTop={4} height={680} maxWidth={1200}>\n                <div className=\"loader loader--style3\" title=\"2\">\n                    <svg version=\"1.1\" id=\"loader-1\" xmlns=\"http://www.w3.org/2000/svg\"\n                         xmlnsXlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n                         width=\"40px\" height=\"40px\" viewBox=\"0 0 50 50\" enableBackground={'new 0 0 50 50'}\n                         xmlSpace=\"preserve\">\n  <path fill=\"#000\"\n        d=\"M43.935,25.145c0-10.318-8.364-18.683-18.683-18.683c-10.318,0-18.683,8.365-18.683,18.683h4.068c0-8.071,6.543-14.615,14.615-14.615c8.072,0,14.615,6.543,14.615,14.615H43.935z\">\n    <animateTransform attributeType=\"xml\"\n                      attributeName=\"transform\"\n                      type=\"rotate\"\n                      from=\"0 25 25\"\n                      to=\"360 25 25\"\n                      dur=\"0.6s\"\n                      repeatCount=\"indefinite\"/>\n    </path>\n  </svg>\n                </div>\n                {/*<StyleBox>*/}\n                {/*<Slide direction=\"up\" in={true} mountOnEnter unmountOnExit>*/}\n                {/*<Box textAlign={'center'} >*/}\n                {/*    <Typography component={'h1'} variant={'h1'} fontWeight={500} fontFamily={'DINCondensed2'} fontSize={96} style={{textTransform: \"uppercase\"}} >*/}\n                {/*        {t('titleLoopring')}*/}\n                {/*    </Typography>*/}\n                {/*    <Typography component={'h2'}   marginTop={3}  fontSize={32} fontFamily={'DINCondensed2'}>*/}\n                {/*        {t('labelLoopringDescribe')}*/}\n                {/*    </Typography>*/}\n                {/*    /!*<Typography marginY={2} component={'p'} variant={'body1'} color={'textSecondary'}>*!/*/}\n                {/*    /!*    <Trans i18nKey={message}>*!/*/}\n                {/*    /!*        If you believe this is indeed a bug, please <Link*!/*/}\n                {/*    /!*        component={'a'}*!/*/}\n                {/*    /!*        onClick={(e) => {*!/*/}\n                {/*    /!*            window.location.href = getContactInfo();*!/*/}\n                {/*    /!*            e.preventDefault();*!/*/}\n                {/*    /!*        }}*!/*/}\n                {/*    /!*    >contact us</Link> <br/> We would appreciate your feedback*!/*/}\n\n                {/*    /!*    </Trans>*!/*/}\n                {/*    /!*    /!*{t(message)}*!/*!/*/}\n                {/*    /!*    /!*{t(messageKey)}*!/*!/*/}\n                {/*    /!*</Typography>*!/*/}\n                {/*</Box>*/}\n                {/*</Slide>*/}\n                {/*</StyleBox>*/}\n            </StyleBox>\n\n        </Container>\n\n        {/*<Footer></Footer>*/}\n    </>\n}\n","export enum Theme {\n    dark = 'dark',\n    light = 'light',\n}\n\nexport enum LangType {\n    en = 'en_US',\n    cn = 'zh_CN',\n}\n\nexport enum SystemStatus {\n    NORMAL,\n    ERROR,\n    UNKNOWN,\n}\n\nexport enum MODAL_TYPE {\n    UNKNOWN,\n    LOADING,\n    WALLET,\n}\n\nexport const REFRESH_RATE = 1000\n\nexport const REFRESH_RATE_SLOW = 15000\n","import { useCallback } from \"react\";\nimport { useDispatch } from \"react-redux\"\n\nimport {\n    setShowDeposit,\n    setShowResetAccount,\n    setShowTransfer,\n    setShowWithdraw,\n} from '@loopring-web/component-lib'\nimport { useTranslation } from \"react-i18next\";\nimport store from 'stores'\nimport { AccountStatus } from \"state_machine/account_machine_spec\";\n\nexport function useModals() {\n\n    const dispatch = useDispatch()\n\n    const { t } = useTranslation('common')\n\n    const ShowDeposit = useCallback((isShow: boolean, defaultProps?: any)=>{\n        const isNoAccount = store.getState().account.status === AccountStatus.NOACCOUNT\n\n        console.log('isNoAccount: ', isNoAccount, t('depositTitleAndActive'))\n        const action = {\n            isShow,\n            props: {\n                title: isNoAccount ? t('depositTitleAndActive') : t('depositTitle'),\n                description: 'depositAndActiveDescription',\n                ...defaultProps\n            },\n        }\n        dispatch(setShowDeposit(action))\n    }, [dispatch, t])\n    const ShowTransfer = useCallback((isShow: boolean, defaultProps?: any) => dispatch(setShowTransfer({isShow, props: {...defaultProps}})), [dispatch])\n    const ShowWithdraw = useCallback((isShow: boolean, defaultProps?: any) => dispatch(setShowWithdraw({isShow, props: {...defaultProps}})), [dispatch])\n    const ShowResetAccount = useCallback((isShow: boolean, defaultProps?: any) => dispatch(setShowResetAccount({isShow, props: {...defaultProps}})), [dispatch])\n\n    return {\n        ShowDeposit,\n        ShowTransfer,\n        ShowWithdraw,\n        ShowResetAccount,\n    }\n}","import React, { useCallback, useState } from 'react'\n\nimport { useTranslation } from 'react-i18next'\n\nimport {\n    ButtonComponentsMap,\n    CoinMap,\n    GatewayItem,\n    gatewayList as DefaultGatewayList,\n    headerMenuData,\n    HeaderMenuTabStatus,\n    headerToolBarData,\n    HeadMenuTabKey,\n    LanguageKeys,\n    LockIcon,\n    ThemeKeys,\n    UnLockIcon,\n    WalletStatus,\n    WithdrawType,\n    WithdrawTypes,\n} from '@loopring-web/common-resources'\n\nimport { useAccount, useConnect, useUnlock, useWeb3Account, } from 'stores/account/hook'\n\nimport { getShortAddr } from 'utils/web3_tools'\n\nimport { AccountStatus } from 'state_machine/account_machine_spec'\n\nimport { useCustomDCEffect } from 'hooks/common/useCustomDCEffect'\n\nimport { Theme, } from 'defs/common_defs'\n\nimport {\n    AmmProps,\n    Button,\n    DepositProps,\n    ResetProps,\n    SwapProps,\n    SwitchData,\n    TradeBtnStatus,\n    TransferProps,\n    useOpenModals,\n    useSettings,\n    WithdrawProps\n} from '@loopring-web/component-lib'\n\nimport store from 'stores'\n\nimport * as sdk from 'loopring-sdk'\nimport {\n    ConnectorNames,\n    dumpError400,\n    GetNextStorageIdRequest,\n    GetOffchainFeeAmtRequest,\n    LoopringMap,\n    OffchainFeeReqType,\n    OffChainWithdrawalRequestV3,\n    OriginTransferRequestV3,\n    toBig,\n    TokenInfo,\n    VALID_UNTIL\n} from 'loopring-sdk'\nimport { Typography } from '@material-ui/core';\nimport { AccountInfoProps, CoinType, } from '@loopring-web/component-lib';\nimport { useEtherscan } from 'hooks/web3/useWeb3'\n\nimport { useModals } from 'hooks/modal/useModals'\nimport Web3 from 'web3'\n\nimport { AmmData, AmmInData, IBData, TradeCalcData, WalletMap } from '@loopring-web/common-resources'\n\nimport { useUserAPI } from 'hooks/exchange/useApi'\nimport { makeWalletLayer2 } from 'hooks/help'\nimport { useWalletLayer2 } from 'stores/walletLayer2'\nimport { useTokenMap } from 'stores/token'\nimport { LoopringAPI } from 'stores/apis/api'\nimport { BIG10 } from 'defs/swap_defs'\nimport { useWalletLayer1 } from '../../stores/walletLayer1';\nimport { myLog } from 'utils/log_tools'\n\nexport const useHeader = () => {\n    const {i18n, t} = useTranslation(['common', 'layout'])\n    const {setTheme, themeMode, language, setLanguage} = useSettings();\n    const {ShowDeposit} = useModals()\n    const {modals: {isShowAccountInfo, isShowConnect}, setShowConnect, setShowAccountInfo} = useOpenModals()\n\n    const [openConnect, setOpenConnect] = React.useState(false)\n\n    const forceUpdate = React.useReducer((bool) => !bool, false)[ 1 ]\n    const {account} = useAccount()\n\n    const {lock, unlock} = useUnlock()\n\n    const {connect} = useConnect()\n\n    const {etherscanUrl} = useEtherscan()\n\n    const gatewayList: GatewayItem[] = [\n        {\n            ...DefaultGatewayList[ 0 ],\n            handleSelect: () => {\n                myLog('try to connect to ', ConnectorNames.Injected)\n                connect(ConnectorNames.Injected, true)\n                setShowConnect({isShow: false})\n            }\n        },\n        {\n            ...DefaultGatewayList[ 1 ],\n            handleSelect: () => {\n                connect(ConnectorNames.WalletConnect, true)\n                setShowConnect({isShow: false})\n            }\n        },\n        {\n            ...DefaultGatewayList[ 2 ],\n            handleSelect: () => {\n                connect(ConnectorNames.Ledger, true)\n                setShowConnect({isShow: false})\n            }\n        },\n        {\n            ...DefaultGatewayList[ 3 ],\n            handleSelect: () => {\n                connect(ConnectorNames.Trezor, true)\n                setShowConnect({isShow: false})\n            }\n        },\n    ]\n    // const [showAccountInfo, setShowAccountInfo] = React.useState(account?.accAddr ? true : false)\n    const [accountInfoProps, setAccountInfoProps] = React.useState<undefined | AccountInfoProps>(undefined)\n    //const theme: any = useTheme()\n\n    const onNotification = React.useCallback(async () => {\n        console.log('onNotification click')\n    }, [])\n\n    const onWalletBtnConnect = React.useCallback(async () => {\n        const acc = store.getState().account\n        console.log(`onWalletBtnConnect click: ${acc.status}`)\n\n        switch (acc.status) {\n            case AccountStatus.UNCONNNECTED:\n                setShowConnect({isShow: true})\n                break\n            case AccountStatus.NOACCOUNT:\n            case AccountStatus.CONNECTED:\n            case AccountStatus.LOCKED:\n            case AccountStatus.ACTIVATED:\n                setShowAccountInfo({isShow: true})\n                break\n            default:\n                break\n        }\n    }, [setShowConnect, setShowAccountInfo])\n\n    const onThemeBtnClick = React.useCallback(async (themeMode: ThemeKeys) => {\n        if (themeMode === Theme.dark) {\n            setTheme(Theme.light)\n        } else {\n            setTheme(Theme.dark)\n        }\n    }, [setTheme])\n\n    const onLangBtnClick = (lang: LanguageKeys) => {\n        setLanguage(lang);\n    }\n\n\n    useCustomDCEffect(() => {\n\n\n        headerToolBarData[ ButtonComponentsMap.WalletConnect ] = {\n            ...headerToolBarData[ ButtonComponentsMap.WalletConnect ],\n            handleClick: onWalletBtnConnect,\n        }\n\n        // headerToolBarData[ButtonComponentsMap.Notification] = { ...headerToolBarData[ButtonComponentsMap.Theme], themeMode: theme.mode, handleClick: onNotification }\n        // headerToolBarData.update(ButtonComponentsMap.WalletConnect,value=>{\n        //   return {...value, handleClick:onWalletBtnConnect}});\n        headerToolBarData[ ButtonComponentsMap.Theme ] = {\n            ...headerToolBarData[ ButtonComponentsMap.Theme ],\n            themeMode,\n            handleClick: onThemeBtnClick\n        }\n        // headerToolBarData.update(ButtonComponentsMap.Theme,value=>{\n        //   return {...value, themeMode:theme.mode, handleClick:onThemeBtnClick}});\n\n        headerToolBarData[ ButtonComponentsMap.Language ] = {\n            ...headerToolBarData[ ButtonComponentsMap.Language ],\n            handleChange: onLangBtnClick\n        }\n        // headerToolBarData.update(ButtonComponentsMap.Language,value=>{\n        //  return  {...value, language:i18n.language, handleClick:onThemeBtnClick}});\n    }, [themeMode, language, i18n, onWalletBtnConnect, onThemeBtnClick, onLangBtnClick, onNotification, t]);\n\n    const UnlockBtn = ({onClick}: { onClick: ({...props}: any) => void }) => {\n        return <Button className={'unlock'} startIcon={<UnLockIcon fontSize={'large'}/>}\n                       onClick={(event) => {\n                           onClick(event)\n                       }} variant={'outlined'}>\n            <Typography variant={'body2'} marginTop={1 / 2}>   {t('labelUnLockLayer2')} </Typography>\n        </Button>\n    }\n\n    const lockCallback = React.useCallback((event) => {\n        lock(account)\n    }, [account,lock])\n    const unLockCallback = React.useCallback((event) => {\n        unlock(account)\n    }, [account,unlock])\n\n    const LockBtn = ({onClick}: { onClick: ({...props}: any) => void }) => {\n        return <Button className={'lock'} startIcon={<LockIcon fontSize={'large'}/>}\n                       onClick={(event) => {\n                           onClick(event)\n                       }} variant={'outlined'}>\n            <Typography variant={'body2'} marginTop={1 / 2}>  {t('labelLockLayer2')} </Typography>\n        </Button>\n    }\n\n    useCustomDCEffect(() => {\n\n        if (!account) {\n            console.log('account' + account + '* exit')\n            setAccountInfoProps(undefined)\n            return\n        }\n\n        const {status} = account\n\n        const addr = getShortAddr(account?.accAddr)\n\n        const updateHeaderMenuWhenHasAccountInfo = ({status}: { status: keyof typeof AccountStatus }) => {\n            headerMenuData[ HeadMenuTabKey.Layer2 ] = {\n                ...headerMenuData[ HeadMenuTabKey.Layer2 ],\n                status: HeaderMenuTabStatus.default\n            }\n            let props;\n            if (status === AccountStatus.ACTIVATED) {\n                props = {\n                    addressShort: addr ? addr : '',\n                    address: account?.accAddr,\n                    level: 'VIP 1',\n                    etherscanLink: etherscanUrl + account?.accAddr,\n                    //TODO: changed by account status\n                    mainBtn: <LockBtn onClick={(_event) => {\n                        lockCallback(_event)\n                    }}/>,\n                    connectBy: ''\n                }\n                setShowAccountInfo({isShow: false})\n            } else if (status === AccountStatus.LOCKED) {\n                props = {\n                    addressShort: addr ? addr : '',\n                    address: account?.accAddr,\n                    level: 'VIP 1',\n                    etherscanLink: etherscanUrl + account?.accAddr,\n                    //TODO: changed by account status\n                    mainBtn: <UnlockBtn onClick={(_event) => {\n                        unLockCallback(_event)\n                    }}/>,\n                    connectBy: ''\n                }\n                setShowAccountInfo({isShow: true})\n            } else if (status === AccountStatus.UNACTIVATED\n                || status === AccountStatus.NOACCOUNT\n                || status === AccountStatus.DEPOSITING\n                || status === AccountStatus.DEPOSIT_TO_CONFIREM\n                || status === AccountStatus.ARPROVING\n                || status === AccountStatus.APPROV_TO_CONFIRM\n            ) {\n                props = {\n                    addressShort: addr ? addr : '',\n                    address: account?.accAddr,\n                    //TODO: level\n                    level: 'VIP 1',\n                    etherscanLink: etherscanUrl + account?.accAddr,\n                    //TODO: changed by account status\n                    connectBy: ''\n                }\n                setShowAccountInfo({isShow: false});\n\n            } else {\n                setShowAccountInfo({isShow: false})\n            }\n\n            if (status === AccountStatus.NOACCOUNT) {\n                (props as any).onLock = () => {\n                    setShowAccountInfo({isShow: false})\n                    ShowDeposit(true)\n                }\n            }\n\n            setAccountInfoProps(props)\n        }\n        switch (status) {\n            case AccountStatus.UNCONNNECTED:\n                headerToolBarData[ ButtonComponentsMap.WalletConnect ] = {\n                    ...headerToolBarData[ ButtonComponentsMap.WalletConnect ],\n                    label: t('labelConnectWallet'),\n                    status: WalletStatus.default\n                }\n                headerMenuData[ HeadMenuTabKey.Layer2 ] = {\n                    //TODO:  HeaderMenuTabStatus.hidden\n                    ...headerMenuData[ HeadMenuTabKey.Layer2 ], status: HeaderMenuTabStatus.hidden\n                }\n                setShowAccountInfo({isShow: false})\n                break\n            case AccountStatus.LOCKED:\n                headerToolBarData[ ButtonComponentsMap.WalletConnect ] = {\n                    ...headerToolBarData[ ButtonComponentsMap.WalletConnect ],\n                    label: addr,\n                    status: WalletStatus.connect\n                };\n\n                updateHeaderMenuWhenHasAccountInfo({status});\n                break\n            case AccountStatus.ACTIVATED:\n                headerToolBarData[ ButtonComponentsMap.WalletConnect ] = {\n                    ...headerToolBarData[ ButtonComponentsMap.WalletConnect ],\n                    label: addr,\n                    status: WalletStatus.unlock\n                }\n\n                updateHeaderMenuWhenHasAccountInfo({status});\n                break\n            case AccountStatus.UNACTIVATED:\n            case AccountStatus.NOACCOUNT:\n                headerToolBarData[ ButtonComponentsMap.WalletConnect ] = {\n                    ...headerToolBarData[ ButtonComponentsMap.WalletConnect ],\n                    // TODO got cache address if no show Connect Wallet\n                    label: addr,\n                    status: WalletStatus.noAccount\n                }\n\n                updateHeaderMenuWhenHasAccountInfo({status});\n                break\n            case AccountStatus.DEPOSITING:\n            case AccountStatus.DEPOSIT_TO_CONFIREM:\n            case AccountStatus.ARPROVING:\n            case AccountStatus.APPROV_TO_CONFIRM:\n                headerToolBarData[ ButtonComponentsMap.WalletConnect ] = {\n                    ...headerToolBarData[ ButtonComponentsMap.WalletConnect ],\n                    label: addr,\n                    status: WalletStatus.accountPending\n                }\n                updateHeaderMenuWhenHasAccountInfo({status});\n\n                break\n        }\n        forceUpdate()\n    }, [account, etherscanUrl, setAccountInfoProps])\n\n    return {\n        headerToolBarData,\n        headerMenuData,\n        gatewayList,\n        isShowConnect,\n        isShowAccountInfo,\n        setShowAccountInfo,\n        setShowConnect,\n        // open,\n        // setOpen,\n        // openConnect,\n        // setOpenConnect,\n        account,\n        accountInfoProps,\n\n    }\n\n}\n\nexport function useChargeFeeList(tokenSymbol: string | undefined, requestType: OffchainFeeReqType,\n                                 tokenMap: LoopringMap<TokenInfo> | undefined, amount?: number) {\n\n    const api = useUserAPI()\n\n    const {accountId, apiKey,} = useAccount()\n\n    const [chargeFeeList, setChargeFeeList] = useState<any[]>([])\n\n    useCustomDCEffect(async () => {\n\n        if (!accountId || !tokenSymbol || !tokenMap) {\n            return\n        }\n\n        let chargeFeeList: any[] = []\n\n        try {\n            const tokenInfo = tokenMap[ tokenSymbol ]\n\n            const request: GetOffchainFeeAmtRequest = {\n                accountId,\n                tokenSymbol,\n                requestType,\n                amount: amount ? toBig(amount).times('1e' + tokenInfo.decimals).toFixed(0, 0) : undefined\n            }\n\n            const response = await api.getOffchainFeeAmt(request, apiKey)\n\n            if (response) {\n                response.raw_data.fees.forEach((item: any, index: number) => {\n                    const feeRaw = item.fee\n                    const tokenInfo = tokenMap[ item.token ]\n                    const fee = sdk.toBig(item.fee).div(BIG10.pow(sdk.toBig(tokenInfo.decimals))).toNumber()\n                    chargeFeeList.push({belong: item.token, fee, __raw__: feeRaw})\n                })\n\n                setChargeFeeList(chargeFeeList)\n            }\n            console.log('response:', response)\n\n        } catch (reason) {\n            dumpError400(reason)\n        }\n\n\n        setChargeFeeList(chargeFeeList)\n\n    }, [accountId, apiKey, requestType, tokenSymbol, tokenMap])\n\n    return {\n        chargeFeeList,\n    }\n\n}\n\nexport function useModalProps() {\n\n    const {\n        ShowDeposit,\n        ShowTransfer,\n        ShowWithdraw,\n        ShowResetAccount,\n    } = useModals()\n\n    const {chainId, isConnected, connector,} = useWeb3Account()\n\n    const {account, apiKey, accountId, eddsaKey,} = useAccount()\n\n    const {totalCoinMap: coinMap, tokenMap, marketArray, marketCoins, marketMap,} = useTokenMap()\n\n    const walletLayer2State = useWalletLayer2();\n    const walletLayer1State = useWalletLayer1();\n    const [walletMap1, setWalletMap1] = useState<WalletMap<any> | undefined>(undefined);\n    const [walletMap2, setWalletMap2] = useState<WalletMap<any> | undefined>(undefined);\n\n    //HIGH: effect by wallet state update\n    React.useEffect(() => {\n        if (walletLayer2State.walletLayer2) {\n            let {walletMap} = makeWalletLayer2();\n            setWalletMap2(walletMap)\n        }\n        if (walletLayer1State.walletLayer1) {\n            // let {walletMap} =  makeWalletLayer1();\n            setWalletMap1(walletLayer1State.walletLayer1)\n        }\n    }, [])\n    React.useEffect(() => {\n        switch (walletLayer2State.status) {\n            case \"ERROR\":\n                walletLayer2State.statusUnset();\n                // setState('ERROR')\n                //TODO: show error at button page show error  some retry dispath again\n                break;\n            case \"DONE\":\n                walletLayer2State.statusUnset();\n                let {walletMap} = makeWalletLayer2();\n                setWalletMap2(walletMap)\n                break;\n            default:\n                break;\n\n        }\n    }, [walletLayer2State.status])\n\n    React.useEffect(() => {\n        switch (walletLayer1State.status) {\n            case \"ERROR\":\n                walletLayer1State.statusUnset();\n                // setState('ERROR')\n                //TODO: show error at button page show error  some retry dispath again\n                break;\n            case \"DONE\":\n                walletLayer1State.statusUnset();\n                setWalletMap1(walletLayer1State.walletLayer1);\n                break;\n            default:\n                break;\n\n        }\n    }, [walletLayer1State.status])\n\n    // deposit\n    const [depositValue, setDepositValue] = useState<IBData<any>>({\n        belong: undefined,\n        tradeValue: 0,\n        balance: 0\n    } as IBData<unknown>)\n\n    const deposit = useCallback(async (token: string, amt: any) => {\n\n        const exchangeInfo = store.getState().system.exchangeInfo\n\n        if (!LoopringAPI.exchangeAPI || !tokenMap || !isConnected || !connector || !exchangeInfo?.exchangeAddress || !exchangeInfo?.depositAddress) {\n            return\n        }\n\n        try {\n            const tokenInfo: TokenInfo = tokenMap[ token ]\n\n            const provider = await connector.getProvider()\n            const web3 = new Web3(provider as any)\n\n            let sendByMetaMask = account.connectName === ConnectorNames.Injected\n\n            const gasPrice = store.getState().system.gasPrice ?? 20\n            const gasLimit = parseInt(tokenInfo.gasAmounts.deposit)\n\n            const nonce = await sdk.getNonce(web3, account.accAddr)\n\n            const response = await sdk.approveMax(web3, account.accAddr, tokenInfo.address,\n                exchangeInfo?.depositAddress, gasPrice, gasLimit, chainId, nonce, sendByMetaMask)\n\n            const fee = 0\n\n            const response2 = await sdk.deposit(web3, account.accAddr,\n                exchangeInfo?.exchangeAddress, tokenInfo, amt, fee,\n                gasPrice, gasLimit, chainId, nonce + 1, sendByMetaMask)\n\n            console.log('!!!!deposit r:', response2)\n\n        } catch (reason) {\n            dumpError400(reason)\n        }\n\n    }, [chainId, isConnected, connector, account, tokenMap, LoopringAPI.exchangeAPI])\n\n    let depositProps: DepositProps<any, any> = {\n        tradeData: {belong: undefined},\n        coinMap: coinMap as CoinMap<any>,\n        walletMap: walletMap1 as WalletMap<any>,\n        depositBtnStatus: TradeBtnStatus.AVAILABLE,\n        onDepositClick: (tradeData: any) => {\n            if (depositValue && depositValue.belong) {\n                deposit(depositValue.belong.toString(), depositValue.tradeValue)\n            }\n            ShowDeposit(false)\n        },\n        handlePanelEvent: async (data: SwitchData<any>, switchType: 'Tomenu' | 'Tobutton') => {\n            return new Promise((res) => {\n                if (data?.tradeData?.belong) {\n                    if (depositValue !== data.tradeData) {\n                        setDepositValue(data.tradeData)\n                    }\n                    setTokenSymbol(data.tradeData.belong)\n                } else {\n                    setDepositValue({belong: undefined, tradeValue: 0, balance: 0} as IBData<unknown>)\n                }\n                res();\n            })\n        },\n    }\n\n    // transfer\n    const [transferValue, setTransferValue] = useState<IBData<any>>({\n        belong: undefined,\n        tradeValue: 0,\n        balance: 0\n    } as IBData<unknown>)\n\n    const [transferTokenSymbol, setTransferTokenSymbol] = useState<string>('')\n\n    const {chargeFeeList: transferFeeList} = useChargeFeeList(transferTokenSymbol, OffchainFeeReqType.TRANSFER, tokenMap)\n\n    const [feeInfo, setFeeInfo] = useState<any>()\n\n    useCustomDCEffect(() => {\n\n        if (transferFeeList.length > 0) {\n            setFeeInfo(transferFeeList[ 0 ])\n        }\n\n    }, [transferFeeList])\n\n    const transfer = useCallback(async (transferValue: any) => {\n\n        debugger\n\n        const exchangeInfo = store.getState().system.exchangeInfo\n\n        if (!LoopringAPI.userAPI || !LoopringAPI.exchangeAPI || !exchangeInfo\n            || !connector || !apiKey || !chainId || !accountId || !account?.accAddr) {\n            return\n        }\n\n        if (!tokenMap || !feeInfo) {\n            console.error(feeInfo)\n            return\n        }\n\n        try {\n\n            const sellToken = tokenMap[ transferValue.belong ]\n\n            const feeToken = tokenMap[ feeInfo.belong ]\n\n            const transferVol = toBig(transferValue.tradeValue).times('1e' + sellToken.decimals).toFixed(0, 0)\n\n            const request: GetNextStorageIdRequest = {\n                accountId,\n                sellTokenId: sellToken.tokenId\n            }\n            const storageId = await LoopringAPI.userAPI.getNextStorageId(request, apiKey)\n\n            const provider = await connector.getProvider()\n            const web3 = new Web3(provider as any)\n\n            let walletType = account.connectName\n            walletType = ConnectorNames.Injected\n\n            const request2: OriginTransferRequestV3 = {\n                exchange: exchangeInfo.exchangeAddress,\n                payerAddr: account.accAddr,\n                payerId: accountId,\n                payeeAddr: '0x8cdc4B6C1FA234AE54c53e56376359bFC497f2e6',\n                payeeId: 0,\n                storageId: storageId.offchainId,\n                token: {\n                    tokenId: sellToken.tokenId,\n                    volume: transferVol,\n                },\n                maxFee: {\n                    tokenId: feeToken.tokenId,\n                    volume: feeInfo.__raw__,\n                },\n                validUntil: VALID_UNTIL,\n            }\n\n            const response = await LoopringAPI.userAPI.submitInternalTransfer(request2, web3, chainId, walletType,\n                eddsaKey, apiKey, false)\n\n            console.log('transfer r:', response)\n\n        } catch (reason) {\n            dumpError400(reason)\n        }\n\n    }, [apiKey, accountId, account, connector, chainId, eddsaKey, feeInfo, LoopringAPI.userAPI, LoopringAPI.exchangeAPI])\n\n    let transferProps: TransferProps<any, any> = {\n        tradeData: {belong: undefined},\n        coinMap: coinMap as CoinMap<any>,\n        walletMap: walletMap2 as WalletMap<any>,\n        transferBtnStatus: TradeBtnStatus.AVAILABLE,\n        onTransferClick: (tradeData: any) => {\n            debugger\n            if (transferValue && transferValue.belong) {\n                transfer(transferValue)\n            }\n\n            ShowTransfer(false)\n        },\n        handleFeeChange(value: { belong: any; fee: number | string; __raw__?: any }): void {\n            setFeeInfo(value)\n        },\n        handlePanelEvent: async (data: SwitchData<any>, switchType: 'Tomenu' | 'Tobutton') => {\n            return new Promise((res: any) => {\n                if (data?.tradeData?.belong) {\n                    if (transferValue !== data.tradeData) {\n                        setTransferValue(data.tradeData)\n                    }\n                    setTransferTokenSymbol(data.tradeData.belong)\n                } else {\n                    setTransferValue({belong: undefined, tradeValue: 0, balance: 0} as IBData<unknown>)\n                }\n                // else{\n                //     setTransferValue({ belong: undefined, amt: 0 })\n                // }\n\n                res();\n            })\n        },\n\n        chargeFeeToken: 'ETH',\n        chargeFeeTokenList: transferFeeList,\n        handleOnAddressChange: (value: any) => {\n            console.log('transfer handleOnAddressChange', value);\n        },\n        handleAddressError: (_value: any) => {\n            return {error: false, message: ''}\n        }\n    }\n\n    // withdraw\n    const [withdrawValue, setWithdrawValue] = useState<IBData<any>>({\n        belong: undefined,\n        tradeValue: 0,\n        balance: 0\n    } as IBData<unknown>);\n\n    const [tokenSymbol, setTokenSymbol] = useState<string>('')\n    const [withdrawType, setWithdrawType] = useState<OffchainFeeReqType>(OffchainFeeReqType.OFFCHAIN_WITHDRAWAL)\n    const {chargeFeeList: withdrawalFeeList} = useChargeFeeList(tokenSymbol, withdrawType, tokenMap, withdrawValue.tradeValue)\n\n    const withdrawType2 = withdrawType === OffchainFeeReqType.FAST_OFFCHAIN_WITHDRAWAL ? 'Fast' : 'Standard'\n    const [withdrawFeeInfo, setWithdrawFeeInfo] = useState<any>()\n\n    useCustomDCEffect(() => {\n\n        if (withdrawalFeeList.length > 0) {\n            setWithdrawFeeInfo(withdrawalFeeList[ 0 ])\n        }\n\n    }, [withdrawalFeeList])\n\n    const withdraw = useCallback(async (withdrawValue: any) => {\n\n        const exchangeInfo = store.getState().system.exchangeInfo\n\n        if (!LoopringAPI.userAPI || !account || !account.accountId || !account.accAddr\n            || !connector || !chainId || !apiKey || !exchangeInfo\n            || !exchangeInfo.exchangeAddress || !withdrawFeeInfo\n            || !withdrawValue || !tokenMap) {\n            console.error('withdraw return directly!', account, connector, chainId, apiKey, exchangeInfo)\n            console.error('withdraw return directly!', withdrawValue, withdrawFeeInfo, tokenMap)\n            return\n        }\n\n        const symbol = withdrawValue.belong as string\n\n        const withdrawToken = tokenMap[ symbol ]\n\n        const feeToken = tokenMap[ withdrawFeeInfo.belong ]\n\n        const amt = toBig(withdrawValue.tradeValue).times('1e' + withdrawToken.decimals).toFixed(0, 0)\n\n        try {\n\n            const request: GetNextStorageIdRequest = {\n                accountId: account.accountId,\n                sellTokenId: withdrawToken.tokenId\n            }\n\n            const storageId = await LoopringAPI.userAPI.getNextStorageId(request, apiKey)\n\n            const request2: OffChainWithdrawalRequestV3 = {\n                exchange: exchangeInfo.exchangeAddress,\n                owner: account.accAddr,\n                to: account.accAddr,\n                accountId: account.accountId,\n                storageId: storageId.offchainId,\n                token: {\n                    tokenId: withdrawToken.tokenId,\n                    volume: amt,\n                },\n                maxFee: {\n                    tokenId: feeToken.tokenId,\n                    volume: withdrawFeeInfo.__raw__,\n                },\n                extraData: '',\n                minGas: 0,\n                validUntil: VALID_UNTIL,\n            }\n\n            const provider = await connector.getProvider()\n            const web3 = new Web3(provider as any)\n\n            const response = await LoopringAPI.userAPI.submitOffchainWithdraw(request2, web3, chainId, ConnectorNames.Injected,\n                account.eddsaKey, apiKey, false)\n\n            console.log(response)\n\n        } catch (reason) {\n            dumpError400(reason)\n        }\n\n    }, [apiKey, account, connector, chainId, withdrawFeeInfo, LoopringAPI.userAPI])\n\n    let withdrawProps: WithdrawProps<any, any> = {\n        tradeData: {belong: undefined},\n        coinMap: coinMap as CoinMap<any>,\n        walletMap: walletMap2 as WalletMap<any>,\n        withdrawBtnStatus: TradeBtnStatus.AVAILABLE,\n        onWithdrawClick: (tradeData: any) => {\n            if (withdrawValue && withdrawValue.belong) {\n                withdraw(withdrawValue)\n            }\n            ShowWithdraw(false)\n        },\n\n        handlePanelEvent: async (data: SwitchData<any>, switchType: 'Tomenu' | 'Tobutton') => {\n            return new Promise((res: any) => {\n                if (data?.tradeData?.belong) {\n                    if (withdrawValue !== data.tradeData) {\n                        setWithdrawValue(data.tradeData)\n                    }\n                    setTokenSymbol(data.tradeData.belong)\n                } else {\n                    setWithdrawValue({belong: undefined, tradeValue: 0, balance: 0} as IBData<unknown>);\n                }\n                res();\n            })\n        },\n        withdrawType: withdrawType2,\n        withdrawTypes: WithdrawTypes,\n        chargeFeeToken: 'ETH',\n        chargeFeeTokenList: withdrawalFeeList,\n        handleFeeChange(value: { belong: any; fee: number | string; __raw__?: any }): void {\n            console.log('handleWithdrawFee', value);\n            setWithdrawFeeInfo(value)\n        },\n        handleWithdrawTypeChange: (value: any) => {\n            console.log('handleWithdrawTypeChange', value)\n            const offchainType = value === WithdrawType.Fast ? OffchainFeeReqType.FAST_OFFCHAIN_WITHDRAWAL : OffchainFeeReqType.OFFCHAIN_WITHDRAWAL\n            setWithdrawType(offchainType)\n        },\n        handleOnAddressChange: (value: any) => {\n            console.log('handleOnAddressChange', value);\n        },\n        handleAddressError: (_value: any) => {\n            return {error: false, message: ''}\n        }\n    }\n\n\n    // reset\n    const [resetValue, setResetValue] = useState<IBData<any>>({\n        belong: undefined,\n        tradeValue: 0,\n        balance: 0\n    } as IBData<unknown>)\n\n\n    let resetProps: ResetProps<any, any> = {\n        tradeData: {belong: undefined},\n        coinMap: coinMap as CoinMap<any>,\n        walletMap: walletMap2 as WalletMap<any>,\n        resetBtnStatus: TradeBtnStatus.AVAILABLE,\n        onResetClick: (tradeData: any) => {\n            if (resetValue && resetValue.belong) {\n            }\n\n            ShowResetAccount(false)\n        },\n        handlePanelEvent: async (data: SwitchData<any>, switchType: 'Tomenu' | 'Tobutton') => {\n            return new Promise((res) => {\n                if (data?.tradeData?.belong) {\n                    if (resetValue !== data.tradeData) {\n                        setResetValue(data.tradeData)\n                    }\n                } else {\n                    setResetValue({belong: undefined, tradeValue: 0, balance: 0} as IBData<unknown>)\n                }\n\n                res();\n            })\n        },\n        fee: {count: 234, price: 123}\n    }\n\n    const tradeCalcData: TradeCalcData<CoinType> = {\n        coinSell: 'ETH', //name\n        coinBuy: 'LRC',\n        BtoS: 0,\n        StoB: 0,\n        sellCoinInfoMap: coinMap,\n        buyCoinInfoMap: coinMap,\n        walletMap: {},\n        slippage: 0.5,\n        // slippageTolerance: [0.1, 0.5, 1, 'slippage:N'],\n        priceImpact: '12',\n        minimumReceived: '1%',\n        fee: '1%'\n    }\n    const ammCalcData: AmmInData<{ [ key: string ]: any }> = {\n        myCoinA: {belong: 'ETH', balance: 0, tradeValue: 0},\n        myCoinB: {belong: 'LRC', balance: 0, tradeValue: 0},\n        lpCoinA: {belong: 'ETH', balance: 0, tradeValue: 0},\n        lpCoinB: {belong: 'LRC', balance: 0, tradeValue: 0},\n        lpCoin: {belong: 'LP-ETH-LRC', balance: 0, tradeValue: 0},\n        AtoB: 50,\n        coinInfoMap: coinMap as any,\n        slippage: 0.5,\n        // slippageTolerance: [0.1, 0.5, 1, 'slippage:N'],\n        feeJoin: '1',\n        feeExit: '1',\n    }\n\n\n    let swapProps: SwapProps<IBData<string>, string, any> = {\n        tradeData: undefined,\n        tradeCalcData,\n        onSwapClick: (tradeData) => {\n            console.log('Swap button click', tradeData);\n        },\n        handleSwapPanelEvent: async (data: any, switchType: any) => {\n            console.log(data, switchType)\n        },\n    };\n    let ammProps: AmmProps<AmmData<IBData<any>>, any, AmmInData<any>> = {\n        ammDepositData: {\n            coinA: {belong: 'ETH', balance: 0.3, tradeValue: 0},\n            coinB: {belong: 'LRC', balance: 1000, tradeValue: 0},\n            slippage: '',\n        },\n        ammWithdrawData: {\n            coinA: {belong: 'ETH', balance: 0.3, tradeValue: 0},\n            coinB: {belong: 'LRC', balance: 1000, tradeValue: 0},\n            slippage: '',\n        },\n        // tradeCalcData,\n        ammCalcData: ammCalcData,\n        handleAmmAddChangeEvent: (data, type) => {\n            console.log('handleAmmAddChangeEvent', data, type);\n        },\n        handleAmmRemoveChangeEvent: (data, type) => {\n            console.log('handleAmmRemoveChangeEvent', data, type);\n        },\n        onAmmRemoveClick: (data) => {\n            console.log('onAmmRemoveClick', data);\n        },\n        onAmmAddClick: (data) => {\n            console.log('onAmmAddClick', data);\n        }\n    }\n\n    return {\n        depositProps, withdrawProps, transferProps, resetProps, ammProps, swapProps,\n    }\n}\n","import { REFRESH_RATE } from \"defs/common_defs\"\n\nexport function PromiseJob(fetchPromise: any, setFunc: any, field?: string, prefix: any = 'PromiseJob') {\n\n    let mounted = true\n\n    const handler = () => {\n        if (fetchPromise()) {\n            fetchPromise().then((data: any) => {\n                if (mounted) {\n                    setFunc(field ? data[field] : data)\n                } else {\n                    console.log(prefix + ' unmounted!')\n                }\n            }).catch((reason: any) => {\n                console.error(reason)\n            })\n        }\n    }\n\n    const cleanUp = () => {\n        mounted = false\n    }\n\n    return {\n        handler,\n        cleanUp,\n    }\n\n}\n\n\nexport function PromiseJobInTimer(fetchPromise: any, setFunc: any, field?: string, prefix: any = 'PromiseJobInTimer', timeout: number = REFRESH_RATE) {\n\n    let mounted = true\n\n    const handler = () => {\n\n        mounted = true\n\n        const fetchFunc = () => {\n            if (fetchPromise()) {\n                fetchPromise().then((data: any) => {\n                    if (mounted) {\n                        setFunc(field ? data[field] : data)\n                    } else {\n                        console.log(prefix + ' unmounted!')\n                    }\n                }).catch((reason: any) => {\n                    console.error(reason)\n                })\n            }\n        }\n\n        fetchFunc()\n\n        const id = setInterval(fetchFunc, timeout)\n\n        return id\n    }\n\n    const cleanUp = (handler: any) => {\n        mounted = false\n        if (handler) clearInterval(handler)\n    }\n\n    return {\n        handler,\n        cleanUp,\n    }\n\n}\n","import { useEffect } from 'react'\nimport { PromiseJob, PromiseJobInTimer } from '../../utils/hook_tools'\nimport { REFRESH_RATE_SLOW } from \"defs/common_defs\"\n\nexport function usePromiseJob(fetchPromise: any, setFunc: any, field? :string, prefix: any = undefined, dependencies: any[] = []) {\n\n  const {\n    handler,\n    cleanUp,\n  } = PromiseJob(fetchPromise, setFunc, field, prefix)\n\n  useEffect(() => {\n    handler()\n    return () => cleanUp()\n  }, dependencies)\n\n}\n\nexport function usePromiseJobInTimer(fetchPromise: any, setFunc: any, field? :string, \n  prefix: any = undefined, dependencies: any[] = [], timeout: number= REFRESH_RATE_SLOW) {\n  const {\n    handler,\n    cleanUp,\n  } = PromiseJobInTimer(fetchPromise, setFunc, field, prefix, timeout)\n\n  useEffect(() => {\n\n    const id = handler()\n    return () => cleanUp(id)\n  }, dependencies)\n\n}\n","import { WithTranslation, withTranslation } from 'react-i18next';\nimport { Box, Modal } from '@material-ui/core';\nimport { ModalCloseButton, ModalContentStyled, ModalQRCode } from '@loopring-web/component-lib';\nimport React from 'react';\nimport { AccountInfo, AccountInfoProps } from '@loopring-web/component-lib';\n\nexport const ModalAccountInfo = withTranslation('common')(({\n                                                               onClose,\n                                                               open,\n                                                               t,\n                                                               ...rest\n                                                           }: { open:boolean, onClose:(e:any)=>void} & AccountInfoProps & WithTranslation) => {\n\n\n    return <Modal\n        open={open}\n        onClose={onClose}\n        aria-labelledby=\"Account information\"\n        aria-describedby=\"show layer2 address, unlock/locked loopring wallet, copy address\"\n    >\n        <ModalContentStyled style={{boxShadow: '24'}}>\n            <Box paddingTop={3} paddingBottom={3} display={'flex'} flexDirection={'column'} minWidth='var(--modal-width)'>\n                <ModalCloseButton onClose={onClose} {...{...rest, t}} />\n                <AccountInfo {...rest}/>\n            </Box>\n\n        </ModalContentStyled>\n    </Modal>\n})","import React, { useCallback, useState, } from 'react'\n\nimport {\n    Header as HeaderUI,\n    HideOnScroll,\n    ModalWalletConnect,\n    AccountInfo,\n    ModalCloseButton,\n} from '@loopring-web/component-lib'\n\nimport { headerRoot } from '@loopring-web/common-resources'\n\nimport { useLocation } from 'react-router-dom'\n\nimport { Toolbar, Snackbar, Alert, } from '@material-ui/core'\n\nimport { useHeader } from './hook'\n\nimport { useDisconnect, } from 'stores/account/hook'\nimport { ModalPanel, ModalQRCode, } from '@loopring-web/component-lib';\nimport { useGetExchangeInfo } from 'hooks/exchange/useExchangeAPI'\nimport { useModalProps } from './hook'\n\nimport { copyToClipBoard } from 'utils/obj_tools'\nimport { ModalAccountInfo } from '../../pages/AccountPage';\nimport { useTranslation } from 'react-i18next';\n\nconst Header = ({ ...rest }: any) => {\n\n    const {\n        depositProps,\n        withdrawProps,\n        transferProps,\n        resetProps,\n        ammProps,\n        swapProps,\n    } = useModalProps()\n\n    const location = useLocation()\n\n    const {\n        headerToolBarData,\n        headerMenuData,\n        gatewayList,\n        isShowConnect,\n        isShowAccountInfo,\n        setShowAccountInfo,\n        // setShowAccountInfo,\n        setShowConnect,\n        // open,\n        // setOpen,\n        // openConnect,\n        // setOpenConnect,\n        account,\n        accountInfoProps,\n        // showAccountInfo\n    } = useHeader()\n\n    const { exchangeInfo } = useGetExchangeInfo()\n\n    const { disconnect } = useDisconnect()\n\n    const onSwitch = useCallback(() => {\n        setShowAccountInfo({isShow:false})\n        setShowConnect({isShow:true})\n    }, [setShowConnect,setShowAccountInfo])\n\n    const [openQRCode, setOpenQRCode] = useState(false)\n\n    const [copyToastOpen, setCopyToastOpen] = useState(false);\n    const {t} = useTranslation('commom')\n\n    const closeCopyToast = () => { setCopyToastOpen(false) }\n\n    return (<>\n        <Snackbar open={copyToastOpen} autoHideDuration={2500} onClose={closeCopyToast}>\n            <Alert onClose={closeCopyToast} severity=\"success\">\n                {t('Address Copied to Clipboard!')}\n        </Alert>\n        </Snackbar>\n\n        <ModalQRCode open={openQRCode} onClose={() => setOpenQRCode(false)} title={'ETH Address'}\n            description={account.accAddr} url={account.accAddr} />\n\n        <ModalPanel transferProps={transferProps} withDrawProps={withdrawProps} \n        depositProps={depositProps} resetProps={resetProps} ammProps={ammProps} swapProps={swapProps}/>\n\n        <HideOnScroll>\n            {process.env.NODE_ENV !== 'production' && JSON.stringify(account?.status) \n            + account?.connectName  + '/' + account?.connectNameTemp }\n             \n            {process.env.NODE_ENV !== 'production' && ' exchangeAddress:' + JSON.stringify(exchangeInfo?.exchangeAddress)}\n\n            <HeaderUI {...rest} headerMenuData={headerMenuData} headerToolBarData={headerToolBarData}\n                selected={location.pathname === '/' ? headerRoot : location.pathname}></HeaderUI>\n\n        </HideOnScroll>\n        <Toolbar />\n\n        <ModalWalletConnect {...{ ...rest, gatewayList, open:isShowConnect.isShow, onClose: () => setShowConnect({isShow:false}) }} />\n        {<ModalAccountInfo\n            open={isShowAccountInfo.isShow}\n            onClose={() => {setShowAccountInfo({isShow:false})}}\n            onCopy={() => {\n                copyToClipBoard(account.accAddr);\n                setCopyToastOpen(true)\n            }}\n            onViewQRCode={() => {\n                setOpenQRCode(true)\n            }}\n            onDisconnect={() => {\n                disconnect();\n                setShowAccountInfo({isShow:false});\n            }}\n            onSwitch={onSwitch}\n            {...{...accountInfoProps, ...rest}}></ModalAccountInfo>}\n    </>)\n}\n\n\nexport default Header\n\n\n\n","import { useState, } from 'react'\n\nimport { TradesData, TickerData, DepthData, \n  TokensResponse,\n  MarketsResponse, } from 'loopring-sdk'\n\nimport { usePromiseJob } from 'hooks/common/useCommon'\nimport { useExchangeAPI, } from './useApi'\n\nexport function useGetGas() {\n\n  const [gas, setGas] = useState<any>()\n\n  const api = useExchangeAPI()\n\n  const fetchData = () => {\n    if (!api) {\n      return undefined\n    }\n    return api.getGasPrice()\n  }\n\n  usePromiseJob(fetchData, setGas, undefined, 'useGetGas', [api])\n\n  return { gas }\n\n}\n\nexport function useGetMixMarkets() {\n\n  const [markets, setMarkets] = useState<MarketsResponse>()\n    const api = useExchangeAPI()\n\n    const fetchData = () => {\n      if (!api) {\n        return undefined\n      }\n      return api.getMixMarkets()\n    }\n  \n    usePromiseJob(fetchData, setMarkets, undefined, 'useGetMarkets', [api])\n    \n    return { markets }\n\n}\n\nexport function useGetMarkets() {\n\n  const [markets, setMarkets] = useState<MarketsResponse>()\n    const api = useExchangeAPI()\n\n    const fetchData = () => {\n      if (!api) {\n        return undefined\n      }\n      return api.getMarkets()\n    }\n  \n    usePromiseJob(fetchData, setMarkets, undefined, 'useGetMarkets', [api])\n    \n    return { markets }\n\n}\n\nexport function useGetExchangeInfo() {\n\n  const [exchangeInfo, setExchangeInfo] = useState<any>()\n    const api = useExchangeAPI()\n\n    const fetchData = () => {\n      if (!api) {\n        return undefined\n      }\n      return api.getExchangeInfo()\n    }\n  \n    usePromiseJob(fetchData, setExchangeInfo, 'exchangeInfo', 'useGetExchangeInfo', [api])\n    \n    return { exchangeInfo }\n\n}\n\nexport function useGetTokens() {\n\n  const [tokens, setTokens] = useState<TokensResponse>()\n    const api = useExchangeAPI()\n\n    const fetchData = () => {\n      if (!api) {\n        return undefined\n      }\n      return api.getTokens()\n    }\n  \n    usePromiseJob(fetchData, setTokens, undefined, 'useGetTokens', [api])\n    \n    return { tokens }\n\n}\n\n\nexport function useTrades(symbol: string) {\n\n  const [trades, setTrades] = useState<TradesData>()\n\n  const api = useExchangeAPI()\n\n  const fetchData = () => {\n    if (!api) {\n      return undefined\n    }\n    return api.getMarketTrades({\n      market: symbol\n    })\n  }\n\n  usePromiseJob(fetchData, setTrades, undefined, 'useTrades', [api, symbol])\n\n  return { trades, }\n\n}\n\nexport function useTickerMap(market: string) {\n\n  const [tickerMap, setTickerMap] = useState<{[key: string]: TickerData}>()\n\n  const api = useExchangeAPI()\n\n  const fetchData = () => {\n    if (!api) {\n      return undefined\n    }\n    return api.getTicker({\n      market\n    })\n  }\n\n  usePromiseJob(fetchData, setTickerMap, 'tickMap', 'useTickerMap', [api, market])\n\n  return { tickerMap, }\n\n}\n\nexport function useDepth(symbol: string) {\n\n  const api = useExchangeAPI()\n\n  const [depth, setDepth] = useState<DepthData>()\n\n    const fetchData = () => {\n      if (!api) {\n        return undefined\n      }\n      return api.getMixDepth({\n        market: symbol\n      })\n    }\n  \n    usePromiseJob(fetchData, setDepth, 'depth', 'useDepth', [api, symbol])\n\n  return { depth, }\n\n}\n","import React from \"react\"\nimport store from '../../stores';\nimport { TickerMap, useTicker } from '../../stores/ticker';\nimport { MarketBlockProps, QuoteTableRawDataItem, } from '@loopring-web/component-lib';\nimport { deepClone } from '../../utils/obj_tools';\nimport { useSocket } from '../../stores/socket';\nimport { TradingInterval, WsTopicType } from 'loopring-sdk';\nimport { LoopringAPI } from 'stores/apis/api'\nimport { tickerService } from '../../services/tickerService';\nimport { debounce } from \"lodash\"\nimport { globalSetup } from '@loopring-web/common-resources';\n\nconst amtCol = 5\nconst OnePageSize = 16;\nconst rowHeight = 44;\n\n// 0\nfunction isNeedCallMore(currentStartIndex: number, to: number, marketArrayLength: number, currentListLength: number, pageSize: number = OnePageSize): boolean {\n    const pageCurrent = currentStartIndex / OnePageSize\n    if (to - pageCurrent > 1) {\n        return false\n    } else if (pageSize * to < marketArrayLength && currentListLength - 4 < pageSize * (to + 1)) {\n        return true\n    } else {\n        return false\n    }\n}\n\nexport function useQuote<C extends { [ key: string ]: string }>() {\n\n\n    const {\n        tickerMap,\n        status: tickerStatus,\n        // errorMessage: errorTickerMap,\n        statusUnset: tickerStatusUnset,\n        updateTickers,\n    } = useTicker();\n    const {sendSocketTopic, socketEnd} = useSocket();\n    const {marketArray, coinMap} = store.getState().tokenMap;\n    const recommendMarkets: string[] = marketArray ? marketArray.slice(0, 4) : ['LRC-ETH', 'LRC-ETH', 'LRC-ETH', 'LRC-ETH']\n    const _marketArrayWithOutRecommend = marketArray ? marketArray.filter(item => recommendMarkets.findIndex(m => m === item) === -1) : [];\n    const [tickList, setTickList] = React.useState<any>([]);\n    const [recommendations, setRecommendations] = React.useState<MarketBlockProps<C>[]>([]);\n    const [, setTickerKeys] = React.useState<string[]>([]);\n    const [focusRowFrom, setFocusRowFrom] = React.useState<[start: number, end: number]>([0, 2]);\n    const [startIndex, setStartIndex] = React.useState<number>(-1);\n\n    const subject = React.useMemo(() => tickerService.onSocket(), []);\n\n    const updateRecommendation = React.useCallback((recommendationIndex, ticker) => {\n        if (recommendations.length) {\n          //  let _recommendations = deepClone(recommendations)\n            recommendations[ recommendationIndex ].tradeFloat = ticker\n            setRecommendations(recommendations)\n        }\n    }, [recommendations]);\n    React.useEffect(() => {\n        const subscription = subject.subscribe(({tickerMap}) => {\n            if (tickerMap) {\n                Reflect.ownKeys(tickerMap).forEach((key) => {\n                    let recommendationIndex = recommendMarkets.findIndex(ele => ele === key)\n                    if (recommendationIndex !== -1) {\n                        // setRecommendations\n                        updateRecommendation(recommendationIndex, tickerMap[ key as string ])\n                    }\n                    //TODO update related row. use socket return\n                })\n            }\n        });\n        return () => subscription.unsubscribe();\n    }, [subject,recommendations]);\n\n\n    //TODO if socket is error throw use recall will pending on it\n    // React.useEffect(() => {\n    //     switch (socketStatus) {\n    //         case \"ERROR\":\n    //             console.log(\"ERROR\", 'open websocket error get moment value from api ');\n    //             socketStatusUnset();\n    //             updateTickers(tickerKeys);\n    //             break;\n    //         default:\n    //             break;\n    //     }\n    // }, [socketStatus, socketStatusUnset]);\n    React.useEffect(() => {\n        const [from, to] = focusRowFrom\n        getTicker(from, to);\n        socketSendTicker(from*OnePageSize);\n        return () => {\n            socketEnd()\n        }\n    }, []);\n    React.useEffect(() => {\n        switch (tickerStatus) {\n            case \"ERROR\":\n                console.log(\"ERROR\", 'get ticker error,ui');\n                tickerStatusUnset()\n                break;\n            case \"PENDING\":\n                break;\n            case \"DONE\":\n                tickerStatusUnset();\n                updateRawData(tickerMap as TickerMap<C>)\n                break;\n            default:\n                break;\n        }\n    }, [tickerStatus, tickerStatusUnset]);\n    const getTicker = React.useCallback((from: number, to: number) => {\n        if (_marketArrayWithOutRecommend) {\n            let array = _marketArrayWithOutRecommend.slice(from * OnePageSize, to * OnePageSize);\n            //High: add recommendations market first time is 36个数据\n            if (from === 0) {\n                array = recommendMarkets.concat(array)\n            }\n            updateTickers(array);\n        }\n\n\n    }, [marketArray, OnePageSize, recommendMarkets])\n\n    const updateRawData = React.useCallback((tickerMap: TickerMap<C>) => {\n        let _recommendationsFloat: QuoteTableRawDataItem[] = [];\n        const _tickList = Reflect.ownKeys(tickerMap).reduce((prev, key) => {\n            // @ts-ignore\n            const [, coinA, coinB] = key.match(/(\\w+)-(\\w+)/i);\n            let _item = {\n                ...tickerMap[ key as string ],\n                pair: {\n                    coinA,\n                    coinB,\n                },\n            } as QuoteTableRawDataItem;\n\n            if (recommendMarkets.findIndex(m => m === key) !== -1) {\n                _recommendationsFloat.push(deepClone(_item))\n            }\n            prev.push(_item);\n            return prev\n        }, [] as QuoteTableRawDataItem[])\n        setTickList([...tickList, ..._tickList])\n        //setTickList\n        if (focusRowFrom[ 0 ] === 0 && _recommendationsFloat.length > 0) {\n            //FIX: fix in uat env not enough pair_recommendations\n            while (_recommendationsFloat.length < 4) {\n                _recommendationsFloat.push(deepClone(_recommendationsFloat[ 0 ]));\n            }\n\n            const _recommendations = _recommendationsFloat.reduce((prev, item) => {\n                if (coinMap) {\n                    const {coinA, coinB} = item.pair;\n                    const _item: MarketBlockProps<C> = {\n                        tradeFloat: item as any,\n                        // @ts-ignore\n                        coinAInfo: coinMap[ coinA ],\n                        // @ts-ignore\n                        coinBInfo: coinMap[ coinB ]\n                    } as MarketBlockProps<C>\n                    prev.push(_item)\n                }\n                return prev\n            }, [] as MarketBlockProps<C>[])\n\n            setRecommendations(_recommendations)\n        }\n    }, [tickList, focusRowFrom])\n\n\n    // const  = (startIndex: number) => {\n    //     console.log(startIndex)\n    // }\n    const debounceGetTicker = React.useCallback(debounce((from, to) => {\n        getTicker(from, to)\n    }, globalSetup.wait), [])\n    const socketSendTicker = React.useCallback(debounce((_startIndex: number, pageSize = OnePageSize) => {\n        if(_startIndex !== startIndex)  {\n            let marketArray: string[] = _marketArrayWithOutRecommend.slice(_startIndex, _startIndex + pageSize);\n            marketArray = [...recommendMarkets, ...marketArray];\n            setTickerKeys(marketArray);\n            //High:\n            sendSocketTopic({[ WsTopicType.ticker ]: marketArray});\n        }\n    }, globalSetup.wait * 2), [startIndex])\n    const onVisibleRowsChange = React.useCallback(async (startIndex: number) => {\n        //TODO isBottom and is On prev tickerCall\n        // if (!isAtBottom(startIndex,focusRowFrom[1],_marketArrayWithOutRecommend.length,OnePageSize)\n        //     && tickerStatus !== 'PENDING'){\n        // }\n        //TODO load more\n        const [, to] = focusRowFrom\n        if (isNeedCallMore(startIndex, to, _marketArrayWithOutRecommend.length, tickList.length, OnePageSize)) {\n            console.log('getNextPage.......')\n            setFocusRowFrom([to, to + 1]);\n            debounceGetTicker(to, to + 1);\n        }\n        setStartIndex(startIndex);\n        socketSendTicker(startIndex, OnePageSize)\n    }, [focusRowFrom, OnePageSize, tickerStatus, marketArray, tickList])\n\n    return {\n        tickList,\n        recommendations,\n        // handleScroll,\n        onVisibleRowsChange\n    }\n\n}\n\nexport type CandlestickItem = {\n    close: number;\n    timeStamp: number;\n}\n\nexport const useCandlestickList = (market: string) => {\n    const [candlestickList, setCandlestickList] = React.useState<CandlestickItem[]>([])\n    const getCandlestick = React.useCallback(async (market: string) => {\n        if (LoopringAPI.exchangeAPI) {\n            const res = await LoopringAPI.exchangeAPI.getMixCandlestick({\n                market: market,\n                interval: TradingInterval.d1,\n                // start?: number;\n                // end?: number;\n                limit: 7\n            })\n            if (res && res.candlesticks && !!res.candlesticks.length) {\n                const data = res.candlesticks.map(o => ({\n                    close: o.close,\n                    timeStamp: o.timestamp\n                }))\n                setCandlestickList(data)\n            }\n            setCandlestickList([])\n        }\n        setCandlestickList([])\n    }, [])\n\n    React.useEffect(() => {\n        getCandlestick(market)\n    }, [getCandlestick, market])\n\n    return candlestickList\n}\n","import styled from '@emotion/styled';\nimport { Box, Grid, Paper } from '@material-ui/core';\nimport { TablePaddingX } from '@loopring-web/component-lib';\n\nexport const StylePaper = styled(Box)`\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  //height: 100%;\n  flex: 1;\n  background-color: ${({ theme }) => theme.colorBase.background().default};\n  border-radius: ${({ theme }) => theme.unit}px;\n  // padding: ${({ theme }) => 3 * theme.unit}px  0;\n  margin-bottom: ${({ theme }) => 2* theme.unit}px;\n  .title {\n    font-size: ${({ theme }) => theme.unit * 3}px;\n    //line-height: 19px;\n    margin-left: ${({ theme }) => 3 * theme.unit}px;\n    margin-top: ${({ theme }) => 3 * theme.unit}px;\n    // margin-bottom: ${({ theme }) => 2 * theme.unit}px;\n  }\n\n  .tableWrapper {\n    display: flex;\n    margin-top: ${({ theme }) => 3 * theme.unit}px;\n    flex: 1;\n    .rdg {\n      flex: 1;\n    }\n  }\n` as typeof Paper;\n\n\nexport const  TableWrapStyled = styled(Grid)`\n  &{\n    background-color: ${({theme}) => theme.colorBase.background().default};\n    border-radius: ${({ theme }) => theme.unit}px;\n    .rdg{\n      .rdg-header-row {\n        border-radius: ${({theme}) => theme.unit}px ${({theme}) => theme.unit}px 0 0;\n      }\n    }\n  }\n  ${({theme}) => TablePaddingX({pLeft:theme.unit * 3,pRight:theme.unit * 3})}\n` as typeof Grid\n\n//    ${({theme}) => theme.border.defaultFrame({c_key: 'blur', d_R: 1})};\n","import React from 'react'\nimport styled from '@emotion/styled/macro'\n\nimport { MarketBlock, QuoteTable, TablePaddingX, QuoteTableRawDataItem } from '@loopring-web/component-lib'\n\nimport { WithTranslation, withTranslation } from 'react-i18next'\nimport { useHistory } from 'react-router-dom'\n// import { FloatTag } from '@loopring-web/common-resources'\nimport { Box, Grid } from '@material-ui/core'\nimport { useQuote, useCandlestickList } from './hook'\nimport { LoopringAPI } from 'stores/apis/api'\nimport { TradingInterval } from 'loopring-sdk/dist'\nimport { TableWrapStyled } from 'pages/styled'\n\nconst  RowStyled = styled(Grid)`\n      & .MuiGrid-root:not(:last-of-type) > div{\n        margin-right: ${({theme}) => theme.unit * 3}px;\n      }\n` as typeof Grid\n\n\nexport type CandlestickItem = {\n  market: string;\n  data: {\n    close: number;\n    timeStamp: number;\n  }[]\n}\n\nconst QuotePage = withTranslation('common')((rest: WithTranslation) => {\n    const [candlestickList, setCandlestickList] = React.useState<CandlestickItem[]>([])\n    const getCandlestick = React.useCallback(async (market: string) => {\n      if (LoopringAPI.exchangeAPI) {\n        const res = await LoopringAPI.exchangeAPI.getMixCandlestick({\n          market: market,\n          interval: TradingInterval.d1,\n          // start?: number;\n          // end?: number;\n          limit: 30\n        })\n        if (res && res.candlesticks && !!res.candlesticks.length) {\n          const data = res.candlesticks.map(o => ({\n            close: o.close,\n            timeStamp: o.timestamp\n          }))\n          setCandlestickList(prev => [...prev, {\n            market: market,\n            data: data\n          }])\n        }\n      }\n    }, [])\n\n    const { recommendations, tickList, onVisibleRowsChange } = useQuote()\n    React.useEffect(() => {\n      const list = recommendations.map(item => {\n        const market = `${item.coinAInfo.simpleName}-${item.coinBInfo.simpleName}`\n        return market\n      })\n      if (!!list.length) {\n        getCandlestick(list[0])\n        getCandlestick(list[1])\n        getCandlestick(list[2])\n        getCandlestick(list[3])\n      }\n    }, [recommendations, getCandlestick])\n\n    let history = useHistory()\n\n    const handleRowClick = React.useCallback((row: QuoteTableRawDataItem) => {\n      const { coinA, coinB } = row.pair\n      const tradePair = `${coinA}-${coinB}`\n      history.push({\n        pathname: `/trading/lite/${tradePair}`\n      })\n    }, [history])\n\n    return <Box display={'flex'} flexDirection={'column'} flex={1} >\n\n        <RowStyled container >\n\n            {/* {recommendations.map((item,index)=> <Grid key={item.coinAInfo+item.coinBInfo+index} item xs={3} >\n                    <MarketBlock {...{...item, ...rest}}></MarketBlock>\n                </Grid>\n            )} */}\n            {recommendations.map((item,index)=> {\n              const market = `${item.coinAInfo.simpleName}-${item.coinBInfo.simpleName}`\n              const chartData = candlestickList.find(o => o.market === market)?.data\n              return (\n                <Grid key={index} item xs={3} >\n                    <MarketBlock {...{...item, chartData: chartData ? chartData : [], ...rest}}></MarketBlock>\n                </Grid>\n              )\n            } \n            )}\n\n\n\n        </RowStyled>\n        <TableWrapStyled container marginY={3}  paddingBottom={2} flex={1}>\n            <Grid item xs={12} display={'flex'}>\n                <QuoteTable onVisibleRowsChange={onVisibleRowsChange} onRowClick={(index, row, col) => \n                  handleRowClick(row)\n                } rawData={tickList} {...{ ...rest }} />\n            </Grid>\n        </TableWrapStyled>\n    </Box>\n\n\n})\n\nexport default QuotePage\n","import { useCallback, useState } from 'react'\n\nimport { useExchangeAPI } from 'hooks/exchange/useApi'\nimport { useCustomDCEffect } from 'hooks/common/useCustomDCEffect'\n\nimport { TradingInterval, Candlestick, GetCandlestickRequest, GetDepthRequest, GetTickerRequest, dumpError400, getExistedMarket } from 'loopring-sdk'\nimport { fromWEI } from 'utils/swap_calc_utils'\n\nimport { ChartUnit, CoinInfo } from '@loopring-web/common-resources'\n\nimport { ChartType } from '@loopring-web/component-lib'\n\nimport { TGItemData, TGItemJSXInterface, } from '@loopring-web/component-lib'\n\nimport { IGetDepthDataParams } from '@loopring-web/component-lib'\n\nconst toggleData: TGItemData[] = [\n  {\n    value: ChartType.Trend,\n    key: ChartType.Trend,\n    label: 'label' + ChartType.Trend\n  },\n  {\n    value: ChartType.Depth,\n    key: ChartType.Depth,\n    label: 'label' + ChartType.Depth\n  },\n]\n\nexport function useBasicInfo(props: any, coinAInfo: any, coinBInfo: any, marketArray: any[], t: any) {\n  const tgItemJSXs: TGItemJSXInterface[] = toggleData.map(({ value, label, key }) => {\n    return { value, tlabel: t(label), key, JSX: <>{t(label)}</> }\n  })\n\n  // const { base, quote, market, tokens } = props\n\n  const { market, amm } = getExistedMarket(marketArray, coinAInfo?.name, coinBInfo?.name)\n\n  const [chartType, setChartType] = useState<ChartType>(ChartType.Trend)\n\n  // console.log('---useBasicInfo market:', market, ' amm:', amm, ' chartType:', chartType)\n  //\n  // const [change, setChange] = useState(0)\n  //\n  // const [volume, setVolume] = useState('')\n\n  const [chartUnit, setChartUnit] = useState(ChartUnit.D1)\n\n  const [originData, setOriginData] = useState<any>(undefined)\n\n  const handleChange = useCallback((_e: React.MouseEvent, value: any) => {\n    // Settings.setChartType(value)\n    // console.log('useBasicInfo handleChange:', value)\n    setOriginData(undefined)\n    setChartType(value)\n  }, [setOriginData, setChartType])\n\n  const handleChartUnitChange = (event: React.MouseEvent<HTMLElement, MouseEvent>, newValue: string) => {\n      const mappedValue = newValue === '1H' ? ChartUnit.H1 : newValue === '1W' ? ChartUnit.W1 : ChartUnit.D1\n      setChartUnit(mappedValue)\n  }\n\n  const exchangeApi = useExchangeAPI()\n\n  // useCustomDCEffect(async () => {\n  //\n  //   if (!exchangeApi || !market || !tokens || !quote) {\n  //     return\n  //   }\n  //\n  //   let mounted = true\n  //\n  //   try {\n  //\n  //     const request: GetTickerRequest = {\n  //       market: market.market,\n  //     }\n  //\n  //     const ticker = await exchangeApi.getTicker(request)\n  //     if (mounted) {\n  //\n  //       if (ticker.tickList[0].change) {\n  //         setChange(ticker.tickList[0].change)\n  //       }\n  //\n  //       if (ticker.tickList[0].base_token_volume) {\n  //         const baseVol = fromWEI(tokens.tokenSymbolMap, base, ticker.tickList[0].base_token_volume) as string\n  //         setVolume(baseVol)\n  //       }\n  //     }\n  //   }\n  //   catch (reason) {\n  //     dumpError400(reason, 'ChartPanel getCandlestick')\n  //   }\n  //\n  //   return () => {\n  //     mounted = false\n  //   }\n  //\n  // }, [exchangeApi, market, tokens, base,])\n\n  const tgItemJSXsPriceChart: TGItemJSXInterface[] = Object.keys(ChartUnit).reduce((pre, item) => {\n    // @ts-ignore\n    const tGItemData: TGItemData = { value: ChartUnit[item], key: ChartUnit[item], label: 'label' + ChartUnit[item] };\n    pre.push({ value: tGItemData.value, tlabel: t(tGItemData.label ? tGItemData.label : tGItemData.key), key: tGItemData.key, JSX: <>{t(tGItemData.label ? tGItemData.label : tGItemData.key)}</> })\n    return pre\n  }, [] as TGItemJSXInterface[])\n\n  useCustomDCEffect(async () => {\n  \n    let mounted = true\n  \n    if (!exchangeApi || !market || !amm) {\n      return\n    }\n  \n    if (chartType === ChartType.Trend) {\n      const request: GetCandlestickRequest = {\n        market: amm as string,\n        interval: TradingInterval.min15,\n        limit: 96\n      }\n  \n      try {\n        const candlesticks = await exchangeApi.getCandlestick(request)\n  \n        if (mounted) {\n          const originData = candlesticks.candlesticks.map((item: Candlestick) => {\n            return {\n              timeStamp: item.timestamp,\n              low: item.low,\n              high: item.high,\n              open: item.open,\n              close: item.close,\n              volume: item.quoteVol,\n            }\n          })\n          setOriginData(originData)\n        }\n      }\n      catch (reason) {\n        dumpError400(reason, 'ChartPanel getCandlestick')\n      }\n  \n    } else {\n      const request: GetDepthRequest = {\n        market,\n      }\n  \n      try {\n  \n        const { depth } = await exchangeApi.getMixDepth(request)\n        console.log('useBasicInfo depth:', depth)\n        if (mounted) {\n          const originData: IGetDepthDataParams = {\n            bidsPrices: depth.bids_prices,\n            bidsAmtTotals: depth.bids_amtTotals as any,\n            asksPrices: depth.asks_prices,\n            asksAmtTotals: depth.asks_amtTotals as any,\n          }\n          setOriginData(originData)\n        }\n  \n      } catch (reason) {\n        dumpError400(reason)\n      }\n  \n    }\n  \n    return () => {\n      mounted = false\n    }\n  \n  }, [exchangeApi, amm, market, chartType])\n\n  return {\n    // change,\n    // volume,\n    chartUnit,\n    chartType,\n    tgItemJSXs,\n    tgItemJSXsPriceChart,\n    handleChange,\n    originData,\n    handleChartUnitChange,\n  }\n}","import { ChartUnit,UpColor } from '@loopring-web/common-resources'\nimport { ScaleAreaChart, ToggleButtonGroup, useSettings, TradeTitle, ChartType } from '@loopring-web/component-lib'\nimport { Box, Grid } from \"@material-ui/core\"\nimport { WithTranslation } from 'react-i18next'\nimport { useBasicInfo } from './hook'\n\nconst BasicInfoPanel = ({ props, coinAInfo, coinBInfo, tradeFloat, marketArray, t, ...rest }: any & WithTranslation) => {\n\n    const {\n        // change,\n        chartType,\n        tgItemJSXs,\n        tgItemJSXsPriceChart,\n        handleChange,\n        originData,\n        chartUnit,\n        handleChartUnitChange,\n    } = useBasicInfo(props, coinAInfo, coinBInfo, marketArray, t)\n    const { upColor } = useSettings();\n    return  <>\n        <Grid item xs={8}>\n            <TradeTitle {...{\n                coinAInfo, coinBInfo,\n                ...rest, t, tradeFloat\n            }}></TradeTitle>\n        </Grid>\n        <Grid item xs={4} display={'flex'} justifyContent={'flex-end'} alignItems={'flex-end'}>\n            <ToggleButtonGroup exclusive {...{ ...rest, t, tgItemJSXs, value: chartType }}\n                handleChange={handleChange} />\n        </Grid>\n\n        <Grid item xs={12} position={'relative'}>\n            <Box minHeight={256} maxHeight={256} display={'block'} style={{ height: '100%', width: '100%' }}>\n                <ScaleAreaChart type={chartType} data={originData ?? []} riseColor={upColor as keyof typeof UpColor}\n                    handleMove={() => {\n                    }} />\n            </Box>\n            {/* {chartType === ChartType.Trend && (\n                <Box height={24} display={'flex'} justifyContent={'flex-end'} position={'absolute'} right={0} bottom={0}>\n                    <ToggleButtonGroup exclusive {...{\n                        ...rest, t, tgItemJSXs: tgItemJSXsPriceChart,\n                        value: chartUnit, size: 'small'\n                    }}\n                        handleChange={handleChartUnitChange} />\n                </Box>\n            )} */}\n        </Grid> \n        {/* <Grid item xs={12} height={24} display={'flex'} justifyContent={'flex-end'}>\n            <ToggleButtonGroup exclusive {...{\n                ...rest, t, tgItemJSXs: tgItemJSXsPriceChart,\n                value: chartUnit, size: 'small'\n            }}\n                handleChange={handleChartUnitChange} />\n        </Grid> */}\n    </>\n\n};\n\nexport default BasicInfoPanel\n","\n\nimport { RefAttributes, useState } from 'react'\n\nimport Tabs from '@material-ui/core/Tabs'\nimport Tab from '@material-ui/core/Tab'\nimport Checkbox from '@material-ui/core/Checkbox'\nimport styled from '@emotion/styled'\n\nimport { FormControlLabel, TradeTable, } from '@loopring-web/component-lib'\nimport { withTranslation, WithTranslation } from 'react-i18next';\nimport { CheckBoxIcon, CheckedIcon } from '@loopring-web/common-resources'\nimport { RouteComponentProps, withRouter } from 'react-router'\nimport { Box } from '@material-ui/core';\nimport { RawDataTradeItem, BasicHeaderItem, HeadMenuType } from '@loopring-web/component-lib'\nimport { TableWrapStyled } from '../../../styled';\n\n// const StylePaper = styled(Box)`\n//\n//\n//   background-color: ${({theme}) => theme.colorBase.background().default};\n//   border-radius: ${({theme}) => theme.unit}px;\n//\n//   //padding: 20px;\n//\n//   // .tableWrapper {\n//   //   margin-top: ${({theme}) => theme.unit * 1.5}px;\n//   //   border: 1px solid ${({theme}) => theme.colorBase.borderColor};\n//   //   border-radius: ${({theme}) => theme.unit}px;\n//   //   padding: 26px;\n//   // }\n// ` as typeof Box;\n\n\nconst applyProps = (index: number) => {\n    return {\n        id: `simple-tab-${index}`,\n        'aria-controls': `simple-tabpanel-${index}`,\n    }\n}\nconst StyledTabsWrapper = styled.div`\n          position: relative;\n          width: 100%;\n          margin-top: ${({theme}) => theme.unit * 4}px;\n        `\n\nconst StyledFormControlLabel = styled(FormControlLabel)`\n          position: absolute;\n          top: 0;\n          right: ${({theme}) => theme.unit}px;\n          margin: ${({theme}) => theme.unit}px 0 0 0;\n        `\n\n\nconst TradePanel = withTranslation('common')(\n   // withRouter(\n    (\n        {tradeArray,  myTradeArray, t}:\n            { tradeArray: RawDataTradeItem[], myTradeArray: RawDataTradeItem[] } & WithTranslation & RouteComponentProps) => {\n        const [isAllTrade, setIsAllTrade] = useState(false)\n        const [value, setValue] = useState(1)\n        const handleChange = (event: any, newValue: any) => {\n            setValue(newValue)\n        }\n\n        const handleCheckboxChange = () => {\n            setIsAllTrade((flag: boolean) => !flag)\n        }\n\n        return (\n            <StyledTabsWrapper>\n                {/* <StyledFormControlLabel\n                    control={<Checkbox checked={isAllTrade} size={'small'} checkedIcon={<CheckedIcon/>}\n                                       icon={<CheckBoxIcon/>} color={'default'} onChange={handleCheckboxChange}/>}\n                    label={t('labelTradePanelHideOtherPairs')}/> */}\n\n                <Tabs value={value}\n                      onChange={handleChange}\n                      aria-label=\"tabs switch\">\n                    <Tab label={t('labelMyTrade')} {...applyProps(0)} />\n                    <Tab label={t('labelRecent')}   {...applyProps(1)} />\n                </Tabs>\n\n                <TableWrapStyled marginY={2}  paddingBottom={2} flex={1}>\n                    {value === 0 ?  <TradeTable rawData={myTradeArray} /> : <TradeTable rawData={tradeArray}/> }\n                </TableWrapStyled>\n\n            </StyledTabsWrapper>\n        )\n    }\n    ) as  (props: { tradeArray: RawDataTradeItem[], myTradeArray: RawDataTradeItem[] }) => JSX.Element;\n//)\n\nexport default TradePanel\n\n","import { Box, Grid, } from '@material-ui/core'\nimport { WithTranslation, withTranslation } from 'react-i18next'\nimport BasicInfoPanel from './panel/BasicInfoPanel'\nimport TradePanel from './panel/TradePanel'\nimport styled from 'styled-components'\nimport { useSwapPage } from './hook';\nimport { SwapPanel } from '@loopring-web/component-lib'\nimport { TradeBtnStatus } from '@loopring-web/component-lib'\n\nconst FixedStyle = styled(Box)`\n  @media only screen and (min-height: 680px ) and (min-width: 1024px) {\n    position: fixed;\n  }\n`\n\nexport const SwapPage = withTranslation('common')(({...rest}: WithTranslation) => {\n\n    const {\n        tradeCalcData,\n        tradeData,\n        tradeFloat,\n        tradeArray,\n        myTradeArray,\n        marketArray,\n        handleSwapPanelEvent,\n        onSwapClick,\n        pair,\n        swapBtnI18nKey,\n        isSwapLoading\n    } = useSwapPage();\n\n    return <>\n        <Grid container marginRight={3} alignContent={'flex-start'}>\n            <BasicInfoPanel {...{\n                ...rest,\n                ...pair, marketArray,\n                tradeFloat, tradeArray\n            }} />\n            <TradePanel tradeArray={tradeArray} myTradeArray={myTradeArray}/>\n\n            {/**/}\n        </Grid>\n\n        <Box display={'flex'} style={{minWidth: 'var(--swap-box-width)'}}>\n            <FixedStyle>\n                <SwapPanel tradeData={tradeData as any}\n                           tradeCalcData={tradeCalcData as any}\n                           onSwapClick={onSwapClick}\n                           swapBtnI18nKey={swapBtnI18nKey}\n                           swapBtnStatus={isSwapLoading ? TradeBtnStatus.LOADING : TradeBtnStatus.AVAILABLE}\n                    // handleError={}\n                           {...{handleSwapPanelEvent, ...rest}}\n                />\n            </FixedStyle>\n\n        </Box>\n\n    </>\n});\n\n\n// SwapPage\n","import { useRouteMatch } from 'react-router';\nimport {\n    CoinInfo,\n    CustomError,\n    ErrorMap,\n    globalSetup,\n    IBData,\n    TradeCalcData,\n    TradeFloat,\n    WalletMap\n} from '@loopring-web/common-resources';\nimport React, { useCallback, useState } from 'react';\nimport { LoopringAPI } from '../../stores/apis/api';\nimport { useTokenMap } from '../../stores/token';\nimport * as fm from 'loopring-sdk';\nimport {\n    AmmPoolInfoV3,\n    AmmPoolSnapshot,\n    DepthData,\n    dumpError400,\n    getExistedMarket,\n    GetNextStorageIdRequest,\n    LoopringMap,\n    OrderType,\n    SubmitOrderRequestV3,\n    VALID_UNTIL\n} from 'loopring-sdk';\nimport { useAmmMap } from '../../stores/Amm/AmmMap';\nimport { useWalletLayer2 } from '../../stores/walletLayer2';\nimport { RawDataTradeItem, SwapTradeData, SwapType } from '@loopring-web/component-lib';\nimport { useAccount } from '../../stores/account/hook';\nimport { useCustomDCEffect } from '../../hooks/common/useCustomDCEffect';\nimport {\n    accountStaticCallBack,\n    bntLabel,\n    btnClickMap,\n    coinPairInit,\n    fnType,\n    getUserTrades,\n    makeCache,\n    makeMarketArray,\n    makeTickView,\n    makeWalletLayer2,\n    pairDetailBlock,\n    pairDetailDone\n} from '../../hooks/help';\nimport * as _ from 'lodash'\nimport store from 'stores';\nimport { AccountStatus } from 'state_machine/account_machine_spec';\nimport { SwapData } from '@loopring-web/component-lib';\nimport { deepClone } from '../../utils/obj_tools';\nimport { debug } from 'console';\nimport { myLog } from 'utils/log_tools';\n\nexport const useSwapPage = <C extends { [ key: string ]: any }>() => {\n    /*** api prepare ***/\n        // const exchangeApi = exchangeAPI();\n    const wait = globalSetup.wait;\n    const match: any = useRouteMatch(\":symbol\")\n    const {coinMap, tokenMap, marketArray, marketCoins, marketMap,} = useTokenMap()\n    const {ammMap} = useAmmMap();\n    // const {setShowConnect, setShowAccountInfo} = useOpenModals();\n    // const {ShowDeposit} = useModals()\n    const {account} = useAccount()\n    const {delayAndUpdateWalletLayer2} = useWalletLayer2();\n\n    const walletLayer2State = useWalletLayer2();\n    const [isSwapLoading, setIsSwapLoading] = useState(false)\n    const [tradeData, setTradeData] = React.useState<SwapTradeData<IBData<C>> | undefined>(undefined);\n    const [tradeCalcData, setTradeCalcData] = React.useState<TradeCalcData<C> | undefined>(undefined);\n    const [tradeArray, setTradeArray] = React.useState<RawDataTradeItem[]>([]);\n    const [myTradeArray, setMyTradeArray] = React.useState<RawDataTradeItem[]>([]);\n    const [tradeFloat, setTradeFloat] = React.useState<TradeFloat | undefined>(undefined);\n    const [pair, setPair] = React.useState<{ coinAInfo: CoinInfo<C> | undefined, coinBInfo: CoinInfo<C> | undefined }>({\n        coinAInfo: undefined,\n        coinBInfo: undefined,\n    });\n\n\n    const [ammPoolSnapshot, setAmmPoolSnapshot] = React.useState<AmmPoolSnapshot | undefined>(undefined);\n\n    const [swapBtnI18nKey, setSwapBtnI18nKey] = React.useState<string | undefined>(undefined);\n\n    const [output, setOutput] = useState<any>()\n\n    const feeBips = '60'\n\n    //HIGH: get Router info\n    // const symbol = match?.params.symbol ?? undefined;\n    React.useEffect(() => {\n        const symbol = match?.params.symbol ?? undefined;\n        resetSwap(symbol, undefined, undefined, undefined);\n        // const label: string | undefined = accountStaticCallBack(bntLabel)\n        // setSwapBtnI18nKey(label);\n    }, []);\n    //TODO tickMap\n    // React.useEffect(() => {\n    // }, [])\n\n    //HIGH: effect by wallet state update\n    React.useEffect(() => {\n        switch (walletLayer2State.status) {\n            case \"ERROR\":\n                walletLayer2State.statusUnset();\n                // setState('ERROR')\n                //TODO: show error at button page show error  some retry dispath again\n                break;\n            case \"DONE\":\n                walletLayer2State.statusUnset();\n                const {walletMap} = makeWalletLayer2();\n                if (tradeCalcData) {\n                    setTradeCalcData({...tradeCalcData, fee: feeBips, walletMap} as TradeCalcData<C>);\n                    setTradeData({\n                        sell: {\n                            belong: tradeCalcData.sellCoinInfoMap ? tradeCalcData.sellCoinInfoMap[ tradeCalcData.coinSell ]?.simpleName : undefined,\n                            balance: walletMap ? walletMap[ tradeCalcData.coinSell ]?.count : 0\n                        },\n                        // @ts-ignore\n                        buy: {\n                            belong: tradeCalcData.sellCoinInfoMap ? tradeCalcData.sellCoinInfoMap[ tradeCalcData.coinBuy ]?.simpleName : undefined,\n                            balance: walletMap ? walletMap[ tradeCalcData.coinBuy ]?.count : 0\n                        },\n                    } as SwapTradeData<IBData<C>>)\n                    let {\n                        amm,\n                        market\n                    } = getExistedMarket(marketArray, tradeCalcData.coinSell as string, tradeCalcData.coinBuy as string);\n                    getUserTrades(market).then((marketTrades) => {\n                        let _myTradeArray = makeMarketArray(market, marketTrades) as RawDataTradeItem[]\n                        setMyTradeArray(_myTradeArray ? _myTradeArray : [])\n                    })\n                }\n                break;\n            default:\n                break;\n\n        }\n    }, [walletLayer2State.status, setMyTradeArray, marketArray, tradeCalcData])\n\n    // React.useEffect(() => {\n    //    // const label: string | undefined = accountStaticCallBack(bntLabel)\n    //     // setSwapBtnI18nKey(label);\n    // }, [])\n\n    // console.log(account.status)\n\n    useCustomDCEffect(() => {\n        const label: string | undefined = accountStaticCallBack(bntLabel)\n        setSwapBtnI18nKey(label);\n    }, [account.status]);\n\n    const swapCalculatorCallback = React.useCallback(async function ({sell, buy, slippage, ...rest}: any) {\n\n        const {exchangeInfo} = store.getState().system\n        setIsSwapLoading(true);\n        if (!LoopringAPI.userAPI || !tokenMap || !exchangeInfo\n            || account.status !== AccountStatus.ACTIVATED) {\n            setIsSwapLoading(false);\n            return\n        }\n\n        const baseToken = tokenMap[ sell.belong as string ]\n        const quoteToken = tokenMap[ buy.belong as string ]\n\n        const request: GetNextStorageIdRequest = {\n            accountId: account.accountId,\n            sellTokenId: baseToken.tokenId\n        }\n\n        const storageId = await LoopringAPI.userAPI.getNextStorageId(request, account.apiKey)\n\n        try {\n\n            const request: SubmitOrderRequestV3 = {\n                exchange: exchangeInfo.exchangeAddress,\n                accountId: account.accountId,\n                storageId: storageId.orderId,\n                sellToken: {\n                    tokenId: baseToken.tokenId,\n                    volume: output.amountS\n                },\n                buyToken: {\n                    tokenId: quoteToken.tokenId,\n                    volume: output.amountBOutSlip.minReceived\n                },\n                allOrNone: false,\n                validUntil: VALID_UNTIL,\n                maxFeeBips: parseInt(feeBips),\n                fillAmountBOrS: false, // amm only false\n                orderType: OrderType.ClassAmm,\n                eddsaSignature: '',\n            }\n            const response = await LoopringAPI.userAPI.submitOrder(request, account.eddsaKey, account.apiKey)\n\n            myLog(response)\n\n            await delayAndUpdateWalletLayer2()\n\n            setIsSwapLoading(false)\n            \n            setTradeData({\n                ...tradeData,\n                ...{\n                    sell: {...tradeData?.sell, tradeValue: 0},\n                    buy: {...tradeData?.buy, tradeValue: 0},\n                }\n            } as SwapTradeData<IBData<C>>)\n\n        } catch (reason) {\n            setIsSwapLoading(false);\n            dumpError400(reason)\n        }\n\n        if (rest.__cache__) {\n            makeCache(rest.__cache__)\n        }\n    },[tradeData])\n    const swapBtnClickArray: typeof btnClickMap = Object.assign(deepClone(btnClickMap), {\n        [ fnType.ACTIVATED ]:[swapCalculatorCallback]\n    })\n    const onSwapClick = React.useCallback(({sell, buy, slippage, ...rest}: SwapTradeData<IBData<C>>) => {\n        debugger\n        accountStaticCallBack(swapBtnClickArray, [{sell, buy, slippage, ...rest}])\n    }, [swapBtnClickArray])\n    const handleSwapPanelEvent = async (swapData: SwapData<SwapTradeData<IBData<C>>>, switchType: any): Promise<void> => {\n        //TODO setMarket(market);\n        // _.throttle(()=>{\n        const {tradeData} = swapData\n        return new Promise((resolve) => {\n            switch (switchType) {\n                case SwapType.SEll_CLICK:\n                    break\n                case SwapType.BUY_CLICK:\n                    break\n                case SwapType.SELL_SELECTED:\n                    resetSwap(`${tradeData.sell.belong}-${tradeData.buy.belong}`, 'sell', tradeData, ammPoolSnapshot)\n                    break\n                case SwapType.BUY_SELECTED:\n                    resetSwap(`${tradeData.sell.belong}-${tradeData.buy.belong}`, 'buy', tradeData, ammPoolSnapshot)\n                    break\n                case SwapType.EXCHANGE_CLICK:\n                    resetSwap(`${tradeData.sell.belong}-${tradeData.buy.belong}`, undefined, undefined, ammPoolSnapshot)\n                    break\n                default:\n                    break\n            }\n\n            resolve(undefined)\n        })\n        // },wait)\n\n    }\n\n    const [depth, setDepth] = useState<DepthData>()\n\n    useCustomDCEffect(async() => {\n\n        const updateDepth = async() => {\n            if (!pair || !LoopringAPI.exchangeAPI) {\n                return\n            }\n            const market = `${pair.coinAInfo?.simpleName}-${pair.coinBInfo?.simpleName}`\n            const { depth } = await LoopringAPI.exchangeAPI?.getMixDepth({market})\n            setDepth(depth)\n        }\n\n        await updateDepth()\n\n        const handler = setInterval(async() => {\n            await updateDepth()\n        }, 10000)\n\n    }, [LoopringAPI.exchangeAPI, pair, setDepth])\n\n    const calculateTradeData = async (type: 'sell' | 'buy', _tradeData: SwapTradeData<IBData<C>>, ammPoolSnapshot: AmmPoolSnapshot | undefined)\n        : Promise<{ _tradeCalcData: TradeCalcData<C>, _tradeData: SwapTradeData<IBData<C>> }> => {\n        //if(`${pair.coinAInfo?.simpleName}-${pair.coinBInfo?.simpleName}` === coinKey)\n        if (_tradeData[ type ].tradeValue && tradeCalcData) {\n            type === 'sell' ? _tradeData[ 'buy' ].tradeValue = fm.toBig(_tradeData[ 'sell' ].tradeValue).times(tradeCalcData.StoB).toNumber()\n                : _tradeData[ 'sell' ].tradeValue = fm.toBig(_tradeData[ 'buy' ].tradeValue).times(tradeCalcData.BtoS).toNumber()\n        }\n        const market = `${pair.coinAInfo?.simpleName}-${pair.coinBInfo?.simpleName}`\n        if (!marketArray || !tokenMap || !marketMap || !depth || !ammMap || !tradeCalcData) {\n            let _tradeCalcData = {...tradeCalcData} as TradeCalcData<C>;\n            return {_tradeData, _tradeCalcData}\n        }\n\n        const isAtoB = type === 'sell'\n        let input: any = (isAtoB ? _tradeData.sell.tradeValue : _tradeData.buy.tradeValue)\n\n        if (input) {\n            input = input.toString()\n        } else {\n            input = '0'\n        }\n\n        const base = _tradeData.sell.belong as string\n        const quote = _tradeData.buy.belong as string\n\n        let slippage = _tradeData.slippage\n\n        if (slippage === undefined) {\n            slippage = 0.5\n        }\n\n        slippage = fm.toBig(slippage).times(100).toString()\n\n        const output = fm.getOutputAmount(input, base, quote, isAtoB, marketArray, tokenMap,\n            marketMap, depth, {[ 'AMM-' + market ]: ammMap[ 'AMM-' + market ].__rawConfig__} as LoopringMap<AmmPoolInfoV3>,\n            ammPoolSnapshot, '6', slippage)\n\n        setOutput(output)\n\n        tradeCalcData.priceImpact = output?.priceImpact as string\n        tradeCalcData.minimumReceived = output?.amountBOutSlip.minReceivedVal as string\n\n        if (isAtoB) {\n            _tradeData.buy.tradeValue = output?.output ? parseFloat(output?.output) : 0\n        } else {\n            _tradeData.sell.tradeValue = output?.output ? parseFloat(output?.output) : 0\n        }\n        //TODO: renew  tradeCalcData\n        let _tradeCalcData = {...tradeCalcData} as TradeCalcData<C>;\n        return {_tradeData, _tradeCalcData}\n        \n    }\n\n    const throttleSetValue = React.useCallback(_.debounce(async (type, _tradeData, _ammPoolSnapshot) => {\n        const {_tradeData: td, _tradeCalcData} = await calculateTradeData(type, _tradeData, _ammPoolSnapshot)//.then(()=>{\n        setTradeData(td)\n        setTradeCalcData({..._tradeCalcData, fee: feeBips})\n\n    }, wait * 2), [setTradeData, setTradeCalcData, calculateTradeData]);\n\n    const resetSwap = async (coinKey: any, type: 'sell' | 'buy' | undefined, _tradeData: SwapTradeData<IBData<C>> | undefined, _ammPoolSnapshot: AmmPoolSnapshot | undefined) => {\n        if (tradeCalcData\n            && coinKey === `${tradeCalcData.coinSell}-${tradeCalcData.coinBuy}`\n            && _tradeData\n            && type\n            && (!tradeData || (tradeData[ type ].tradeValue !== _tradeData[ type ].tradeValue))) {\n            // calculateTradeData(type,_tradeData,_ammPoolSnapshot)\n            throttleSetValue(type, _tradeData, _ammPoolSnapshot)\n            //throttleSetValue(td,_tradeCalcData);\n\n        } else {\n            let _tradeFloat: Partial<TradeFloat> = {}\n            let _tradeArray: Array<Partial<RawDataTradeItem>> | undefined = undefined;\n            let _tradeCalcData: Partial<TradeCalcData<C>> = coinPairInit({\n                coinKey,\n                _tradeCalcData: {},\n                tokenMap,\n                coinMap\n            })\n            let {\n                amm,\n                market\n            } = getExistedMarket(marketArray, _tradeCalcData.coinSell as string, _tradeCalcData.coinBuy as string);\n            const [, coinA, coinB] = market.match(/(\\w+)-(\\w+)/i)\n\n            setTradeCalcData({...tradeCalcData, fee: feeBips, ..._tradeCalcData} as TradeCalcData<C>);\n            if (coinMap) {\n                setPair({\n                    coinAInfo: coinMap[ coinA ],\n                    coinBInfo: coinMap[ coinB ],\n                })\n            }\n            if (walletLayer2State.walletLayer2) {\n                const {walletMap} = makeWalletLayer2();\n                _tradeCalcData.walletMap = walletMap as WalletMap<any>;\n                getUserTrades(market).then((marketTrades) => {\n                    let _myTradeArray = makeMarketArray(market, marketTrades) as RawDataTradeItem[]\n                    setMyTradeArray(_myTradeArray ? _myTradeArray : [])\n                })\n\n            }\n            let apiList = [];\n            //TODO wallet saga done\n            if (marketArray && amm && market && ammMap) {\n                // let pairPromise =  usePairTitleBlock({market})\n                apiList = [\n                    LoopringAPI.exchangeAPI?.getMarketTrades({market}),\n                    pairDetailBlock({coinKey: market, ammKey: amm, ammMap})\n                ];\n                //HiGH: this need add websocket to update infr ticker ammpoolsbalace\n                // @ts-ignore\n                Promise.all([...apiList]).then(\n                    ([{marketTrades}, {ammPoolsBalance, tickMap}]: any[]) => {\n                        setAmmPoolSnapshot(ammPoolsBalance)\n                        if (tokenMap) {\n                            let {_tradeCalcData: _td} = pairDetailDone({\n                                coinKey: `${_tradeCalcData.coinSell}-${_tradeCalcData.coinBuy}`,\n                                market,\n                                ammPoolsBalance,\n                                tickerData: tickMap[ market ] ? tickMap[ market ] : {},\n                                tokenMap,\n                                _tradeCalcData,\n                                coinMap,\n                                marketCoins,\n                                fee: feeBips,\n                            })\n                            _tradeCalcData = _td;\n                            _tradeFloat = makeTickView(tickMap[ market ] ? tickMap[ market ] : {})\n                            _tradeArray = makeMarketArray(market, marketTrades)\n                            // @ts-ignore\n                            setTradeCalcData(_tradeCalcData as TradeCalcData<C>);\n                            // @ts-ignore\n                            setTradeFloat(_tradeFloat);\n                            setTradeArray(_tradeArray as RawDataTradeItem[])\n                            // setPair(_pair)\n                            setTradeData({\n                                sell: {\n                                    belong: _tradeCalcData.sellCoinInfoMap ? _tradeCalcData.sellCoinInfoMap[ _tradeCalcData.coinSell ]?.simpleName : undefined,\n                                    balance: _tradeCalcData.walletMap ? _tradeCalcData.walletMap[ _tradeCalcData.coinSell ]?.count : 0\n                                },\n                                // @ts-ignore\n                                buy: {\n                                    belong: _tradeCalcData.sellCoinInfoMap ? _tradeCalcData.sellCoinInfoMap[ _tradeCalcData.coinBuy ]?.simpleName : undefined,\n                                    balance: _tradeCalcData.walletMap ? _tradeCalcData.walletMap[ _tradeCalcData.coinBuy ]?.count : 0\n                                },\n                            } as SwapTradeData<IBData<C>>)\n                        }\n                    }).catch((error) => {\n                    throw new CustomError({...ErrorMap.TRADE_LITE_SET_PAIR_ERROR, options: error})\n                    //TODO solve error\n                })\n\n            }\n        }\n\n    }\n    return {\n        tradeCalcData,\n        tradeFloat,\n        tradeArray,\n        myTradeArray,\n        isSwapLoading,\n        tradeData,\n        pair,\n        marketArray,\n        onSwapClick,\n        swapBtnI18nKey,\n        handleSwapPanelEvent\n    }\n\n}","import { useCallback, useMemo, useState, useRef, useEffect } from 'react'\n\nimport { useWsAPI, } from './useApi'\n\nimport { ChainId, getAccountArg, getCandlestickArg, getAmmpoolArg, \n    getTickerArg, WsProps } from 'loopring-sdk'\nimport store from 'stores'\n\nconst stateArr = [\n    { key: 0, value: 'Connecting' },\n    { key: 1, value: 'Connected' },\n    { key: 2, value: 'Closing' },\n    { key: 3, value: 'Closed' }\n]\n\nexport const useWebsocket = ({ topics, verify, needApiKey, apiKey, }: { topics: any, needApiKey: boolean, apiKey: string|undefined, verify: boolean, }) => {\n    const ws = useRef<WebSocket | null>(null)\n    const [wsData, setMessage] = useState<any>(undefined)\n    const [readyState, setReadyState] = useState({ key: 0, value: 'Connecting' })\n\n    const chainId = store.getState().trading.chainId\n\n    const api = useWsAPI()\n\n    const creatWebSocket = () => {\n\n        if (!api || !chainId) {\n            return\n        }\n\n        api.getWsKey().then((wsApiKey: any) => {\n            let basePath: string = 'wss://ws.'\n            switch (chainId) {\n                case ChainId.MAINNET:\n                    basePath += process.env.REACT_APP_API_URL\n                    break\n                default:\n                    basePath += process.env.REACT_APP_API_URL_UAT\n                    basePath = 'wss://ws.uat2.loopring.io'\n            }\n\n            basePath += '/v3/ws?wsApiKey=' + wsApiKey.wsKey\n    \n            try {\n                ws.current = new WebSocket(basePath)\n\n                const subTopics = (topics: any) => {\n                    let data: any = {\n                        op: 'sub',\n                        unsubscribeAll: 'true',\n                        topics: topics,\n                    }\n            \n                    if (needApiKey && apiKey) {\n                        data.apiKey = apiKey\n                    }\n            \n                    const flat_txt = JSON.stringify(data)\n                    sendMessage(flat_txt)\n                }\n    \n                ws.current.onopen = (_e) => {\n                    setReadyState(stateArr[ws.current?.readyState ?? 0])\n                    // subTopics(topics)\n                }\n                \n                ws.current.onclose = (e) => {\n                    setReadyState(stateArr[ws.current?.readyState ?? 0])\n                }\n                \n                ws.current.onerror = (e) => {\n                    setReadyState(stateArr[ws.current?.readyState ?? 0])\n                }\n    \n                ws.current.onmessage = (e) => {\n                    setMessage(e.data)\n                }\n            } catch (error) {\n                console.error(error)\n            }\n\n        })\n\n    }\n\n    const webSocketInit = () => {\n        if (!ws.current || ws.current.readyState === 3) {\n            creatWebSocket()\n        }\n    }\n\n    const closeWebSocket = () => {\n        ws.current?.close()\n    }\n\n    const sendMessage = (msg: any) => {\n        ws.current?.send(msg)\n    }\n\n    const reconnect = () => {\n        try {\n            closeWebSocket()\n            ws.current = null\n            // creatWebSocket()\n        } catch (e) {\n            console.error(e)\n        }\n    }\n\n    useEffect(() => {\n\n        verify && webSocketInit()\n        return () => {\n            ws.current?.close()\n        }\n    }, [ws, verify, webSocketInit])\n\n    return {\n        wsData,\n        readyState,\n        sendMessage,\n        closeWebSocket,\n        reconnect,\n    }\n}\n\nexport function useWs(topics: any, needApiKey: boolean, apiKey?: string, verify: boolean = true) {\n    const [socketData, setSocketData] = useState({})\n\n    const [isLocalPage, setIsLocalPage] = useState<boolean>(true)\n\n    useEffect(() => {\n\n        let mounted = true\n\n        const checkIsLocalPage = () => {\n            document.addEventListener('visibilitychange', function () {\n                // page invisible trigger!\n                let isLocalPage = true\n                if (document.visibilityState === 'hidden') {\n                    isLocalPage = false\n                }\n                if (mounted) {\n                    setIsLocalPage(isLocalPage)\n                }\n            })\n        }\n\n        checkIsLocalPage()\n\n        return () => {\n            mounted = false\n        }\n\n    }, [])\n\n    const { wsData, readyState, closeWebSocket, reconnect, sendMessage, } = useWebsocket({\n        topics,\n        apiKey,\n        needApiKey,\n        verify,\n    })\n\n    useEffect(() => {\n    \n        if (needApiKey && !apiKey) {\n            return\n        }\n\n        if (!verify) {\n            return\n        }\n\n        if (wsData === 'ping') {\n            try {\n                sendMessage('pong')\n            } catch (err) {\n                console.log(err)\n            }\n        } else {\n            if (wsData) {\n                setSocketData(JSON.parse(wsData))\n            }\n        }\n        \n        // if closed and is currente page then, reconnect.\n        if (readyState.key === 3 && isLocalPage) {\n            // reconnect()\n        }\n        // if not current page, close it.\n        if (!isLocalPage) {\n            closeWebSocket()\n        }\n\n    }, [wsData, readyState, isLocalPage, verify, apiKey])\n\n    return {\n        socketData,\n    }\n}\n\nexport function useAmmpoolWs(apiKey: string) {\n\n    let topics: any[] = []\n\n    topics.push(getTickerArg('LRC-ETH'))\n\n    topics.push(getAmmpoolArg('0x18920d6E6Fb7EbE057a4DD9260D6D95845c95036'))\n\n    const needApiKey = false\n\n    const { socketData } = useWs(topics, needApiKey, apiKey)\n\n    return {\n        socketData,\n    }\n\n}\n","import { useState, } from 'react'\n\nimport { getAccountArg, getCandlestickArg, \n  getAmmpoolArg, getTickerArg, getOrderArg, WsTopicType, } from 'loopring-sdk'\n\nimport { useWs } from './useWebsocketApi'\nimport { useCustomDCEffect } from 'hooks/common/useCustomDCEffect'\n\nimport { useGetMarkets } from \"hooks/exchange/useExchangeAPI\"\n\nfunction useHandleSocketData(data: any) {\n  const [account, setAccount] = useState<any>()\n  const [ammPool, setAmmPool] = useState<any>()\n  const [order, setOrder] = useState<any>()\n  const [ticker, setTicker] = useState<any>()\n\n  useCustomDCEffect(() => {\n\n      if (!data) {\n        return\n      }\n\n      if (data.op) {\n        return\n      }\n\n      if (!data.topic || !data.topic.topic) {\n        return\n      }\n\n      switch(data.topic.topic) {\n        case WsTopicType.account:\n          setAccount(data.data)\n          break\n        case WsTopicType.ammpool:\n          let ammPool = {\n            baseAmt: data.data[0][0],\n            quoteAmt: data.data[0][1],\n            timestamp: data.data[1],\n          }\n          setAmmPool(ammPool)\n          break\n        case WsTopicType.candlestick:\n          break\n        case WsTopicType.order:\n          setOrder(data.data)\n          break\n        case WsTopicType.orderBook:\n          break\n        case WsTopicType.ticker:\n          setTicker(data.data)\n          break\n        case WsTopicType.trade:\n          break\n        default:\n          throw Error('Unknown WsTopicType:' + data.topic.topic)\n      }\n  }, [data])\n\n  return {\n    account,\n    ammPool,\n    order,\n    ticker,\n  }\n}\n\nexport function useSwapPageWs(poolAddress: string, market: string, apiKey: string) {\n\n  let topics: any[] = []\n\n  topics.push(getAccountArg())\n  topics.push(getOrderArg(market))\n  topics.push(getAmmpoolArg(poolAddress))\n\n  const { socketData } = useWs(topics, true, apiKey, !!poolAddress && !!market && !!apiKey)\n\n  return useHandleSocketData(socketData)\n\n}\n\nexport function useQuotePageWs() {\n\n  const { markets } = useGetMarkets()\n\n  let topics: any[] = []\n\n  if (markets) {\n\n    const keys = Reflect.ownKeys(markets.markets)\n\n    let c = 0\n  \n    keys.every((item: any) => {\n      c += 1\n      topics.push(getTickerArg(item))\n      if (c >= 20) {\n        return false\n      }\n\n      return true\n    })\n\n  }\n\n  const { socketData } = useWs(topics, false)\n\n  return useHandleSocketData(socketData)\n\n}\n","import { useRef } from 'react'\n\n// import Qrcode from 'components/qrcodes/Qrcode'\n\n\nimport { useAccount } from 'stores/account/hook'\n\nimport { useGetExchangeInfo, useGetGas, useGetMarkets, useGetTokens } from 'hooks/exchange/useExchangeAPI'\n\nimport { useAmmpoolWs } from 'hooks/common/useWebsocketApi'\nimport { useQuotePageWs } from 'hooks/exchange/useWsAPI'\n\nconst DebugPage = () => {\n\n  const {ticker} = useQuotePageWs()\n\n  return (\n    <div>\n      Debug\n      <div>wsdata: {JSON.stringify(ticker)}</div>\n    </div>\n  )\n\n}\n\nexport default DebugPage\n","import React from 'react'\nimport { TransactionTable } from '@loopring-web/component-lib'\nimport { WithTranslation, withTranslation } from 'react-i18next'\nimport { StylePaper } from '../../styled'\nimport { useGetTxs } from './hooks'\n\nconst TxPanel = withTranslation('common')((rest:WithTranslation<'common'>) => {\n    const container = React.useRef(null);\n    const [pageSize, setPageSize] = React.useState(10);\n\n    const { txs: txTableData } = useGetTxs()\n\n    React.useEffect(() => {\n        // @ts-ignore\n        let height = container?.current?.offsetHeight;\n        if (height) {\n            setPageSize(Math.floor((height - 120) / 44) - 2);\n        }\n    }, [container, pageSize]);\n\n    return (\n        <StylePaper ref={container}>\n            <div className=\"title\">Transactions</div>\n            <div className=\"tableWrapper\">\n                <TransactionTable {...{\n                    rawData: txTableData,\n                    pagination: {\n                        pageSize: pageSize\n                    },\n                    showFilter: true,\n                    ...rest\n                }} />\n            </div>\n        </StylePaper>\n    )\n})\n\nexport default TxPanel\n","import { useState, useCallback } from 'react'\n// import { useAmmpoolAPI, useUserAPI } from \"hooks/exchange/useApi\"\nimport { useCustomDCEffect } from 'hooks/common/useCustomDCEffect'\nimport { useAccount } from 'stores/account/hook'\nimport { TransactionStatus, RawDataTransactionItem } from '@loopring-web/component-lib'\nimport { volumeToCount } from 'hooks/help'\nimport { LoopringAPI } from 'stores/apis/api'\n\nimport { TransactionTradeTypes } from '@loopring-web/component-lib';\n\nexport function useGetTxs() {\n\n    const { accountId, apiKey } = useAccount()\n\n    // const userApi = useUserAPI()\n\n    const [txs, setTxs] = useState<RawDataTransactionItem[]>([])\n\n    const getTxnStatus = (status: string) => \n        status === ''\n        ? TransactionStatus.processing :\n        status === 'processed'\n            ? TransactionStatus.processed\n            : status === 'processing'\n                ? TransactionStatus.processing \n                : status === 'received' \n                    ? TransactionStatus.received \n                    : TransactionStatus.failed\n\n    const getUserTxnList = useCallback(async () => {\n        if (LoopringAPI && LoopringAPI.userAPI && accountId && apiKey) {\n            const userTxnList = await Promise.all([\n                LoopringAPI.userAPI.getUserTranferList({\n                    accountId,\n                }, apiKey),\n                LoopringAPI.userAPI.getUserDepositHistory({\n                    accountId,\n                }, apiKey),\n                LoopringAPI.userAPI.getUserOnchainWithdrawalHistory({\n                    accountId,\n                }, apiKey)\n            ])\n            const userTransferMapped = userTxnList[0].userTransfers.map(o => ({\n                side: TransactionTradeTypes.transfer,\n                // token: o.symbol,\n                // from: o.senderAddress,\n                // to: o.receiverAddress,\n                amount: Number(volumeToCount(o.symbol, o.amount)),\n                fee: {\n                    unit: o.feeTokenSymbol || '',\n                    value: Number(volumeToCount(o.symbol, o.feeAmount || 0))\n                },\n                memo: o.memo || '',\n                time: o.timestamp,\n                txnHash: o.hash,\n                status: getTxnStatus(o.status),\n                // tradeType: TransactionTradeTypes.transfer\n            }))\n            const userDepositMapped = userTxnList[1].userDepositHistory.map(o => ({\n                side: TransactionTradeTypes.deposit,\n                symbol: o.symbol,\n                // token: o.symbol,\n                // from: o.hash,\n                // to: 'My Loopring',\n                amount: Number(volumeToCount(o.symbol, o.amount)),\n                fee: {\n                    unit: '',\n                    value: 0\n                },\n                memo: '',\n                time: o.timestamp,\n                txnHash: o.txHash,\n                status: getTxnStatus(o.status),\n                // tradeType: TransactionTradeTypes.deposit\n            }))\n            const userWithdrawMapped = userTxnList[2].userOnchainWithdrawalHistory.map((o => ({\n                side: TransactionTradeTypes.withdraw,\n                // token: o.symbol,\n                // from: 'My Loopring',\n                // to: o.distributeHash,\n                amount: Number(volumeToCount(o.symbol, o.amount)),\n                fee: {\n                    unit: o.feeTokenSymbol,\n                    value: Number(volumeToCount(o.feeTokenSymbol, o.feeAmount))\n                },\n                memo: '',\n                time: o.timestamp,\n                txnHash: o.txHash,\n                status: getTxnStatus(o.status),\n                // tradeType: TransactionTradeTypes.withdraw\n            })))\n            const mappingList = [...userTransferMapped, ...userDepositMapped, ...userWithdrawMapped]\n            const sortedMappingList = mappingList.sort((a, b) => b.time - a.time)\n            setTxs(sortedMappingList)\n        }\n    }, [accountId, apiKey])\n\n    useCustomDCEffect(() => {\n        getUserTxnList()\n    }, [getUserTxnList])\n\n    return {\n        txs,\n    }\n}\n","import { useCallback, useEffect, useRef, useState } from 'react'\nimport { WithTranslation, withTranslation } from 'react-i18next'\nimport { PriceTag } from '@loopring-web/common-resources'\nimport { Box, Paper, Typography } from '@material-ui/core'\nimport styled from '@emotion/styled'\nimport { useHistory } from 'react-router-dom'\nimport {\n    AssetsTable,\n    AssetTitle,\n    AssetTitleProps,\n    ChartType,\n    DoughnutChart,\n    ScaleAreaChart,\n    ToggleButtonGroup,\n    TokenType,\n    LpTokenAction,\n} from '@loopring-web/component-lib'\nimport { useModals } from 'hooks/modal/useModals'\n// import { useGetUserBalances } from 'hooks/exchange/useUserAPI'\nimport { useGetTokens } from 'hooks/exchange/useExchangeAPI'\nimport { volumeToCount } from 'hooks/help'\nimport { LoopringAPI } from 'stores/apis/api'\nimport { AssetType } from 'loopring-sdk'\nimport store from 'stores'\nimport { useWalletLayer1 } from 'stores/walletLayer1'\nimport { makeWalletLayer2 } from 'hooks/help'\nimport { EmptyValueTag,unit } from '@loopring-web/common-resources'\nimport { StylePaper } from '../../styled'\n\n// const StylePaper = styled(Box)`\n//   width: 100%;\n//   height: 100%;\n//   flex: 1;\n//   background-color: ${({theme}) => theme.colorBase.background().default};\n//   border-radius: ${({theme}) => theme.unit}px;\n// //   padding: 20px;\n//\n//   .title {\n//     font-family: Gilroy-Medium;\n//     font-size: ${({theme}) => theme.unit * 3}px;\n//     line-height: 19px;\n//   }\n//\n//   .tableWrapper {\n//     display: flex;\n//     flex: 1;\n//     height: 100%;\n//     border: 1px solid ${({theme}) => theme.colorBase.borderColor};\n//     border-radius: ${({theme}) => theme.unit}px;\n//     padding: 26px 0;\n//   }\n// ` as typeof Box;\n\nconst StyledChartWrapper = styled(Box)`\n    height: 225px;\n\n    > div {\n        position: relative;\n        width: calc(50% - 6px);\n        height: 100%;\n        background-color: ${({theme}) => theme.colorBase.background().default};\n        border-radius: ${({theme}) => theme.unit}px;\n        padding: ${({theme}) => theme.unit * 2.5}px ${({theme}) => theme.unit * 3}px;\n    }\n`\n\nconst StyledBtnGroupWrapper = styled(Box)`\n    position: absolute;\n    z-index: 10;\n    right: ${({theme}) => theme.unit * 3}px;\n    bottom: ${({theme}) => theme.unit * 2.5}px;\n`\n\nconst toggleData = [\n    // {value: '24 H', key: '24 H'},\n    {value: 'week', key: '1 W'},\n    {value: 'all', key: 'ALL'},\n]\n\nexport type ITokenInfoItem = {\n    token: string,\n    detail: {\n        price: string,\n        symbol: string,\n        updatedAt: number\n    }\n}\n\nexport type TrendDataItem = {\n    timeStamp: number;\n    close: number;\n}\n\nconst AssetPanel = withTranslation('common')(({t, ...rest}: WithTranslation) => {\n    const container = useRef(null);\n    const [pageSize, setPageSize] = useState(10);\n    const [chartPeriod, setChartPeriod] = useState('week')\n    const [chartData, setChartData] = useState<TrendDataItem[]>([])\n    \n    const { accAddr } = store.getState().account\n    const { walletLayer2 } = store.getState().walletLayer2;\n    const { ammMap } = store.getState().amm.ammMap\n    const walletMap = makeWalletLayer2()\n    const assetsKeyList = walletMap && walletMap.walletMap ? Object.keys(walletMap.walletMap) : []\n    const assetsDetailList = walletMap && walletMap.walletMap ? Object.values(walletMap.walletMap) : []\n    const assetsList = assetsKeyList.map((key, index) => ({\n        token: key,\n        detail: assetsDetailList[index]\n    }))\n\n    const getUserTotalAssets = useCallback(async (limit: number = 7) => {\n        const userAssets = await LoopringAPI.walletAPI?.getUserAssets({\n            wallet: accAddr,\n            assetType: AssetType.DEX,\n            limit: limit // TODO: minium unit is day, discuss with pm later\n        })\n        if (userAssets && userAssets.userAssets.length && !!userAssets.userAssets.length) {\n            setChartData(userAssets.userAssets.map(o => ({\n                timeStamp: Number(o.createdAt),\n                close: Number(o.amount)\n            })))\n        }\n    }, [accAddr])\n\n    useEffect(() => {\n        if (LoopringAPI && LoopringAPI.walletAPI && walletLayer2) {\n            getUserTotalAssets()\n        }\n    }, [walletLayer2, getUserTotalAssets])\n\n    useEffect(() => {\n        // @ts-ignore\n        let height = container?.current?.offsetHeight;\n        if (height) {\n            setPageSize(Math.floor((height - 120) / 44) - 1);\n        }\n    }, [container, pageSize]);\n\n    const {\n        ShowDeposit,\n        ShowTransfer,\n        ShowWithdraw,\n        ShowResetAccount,\n    } = useModals()\n\n    const { updateWalletLayer1 } = useWalletLayer1()\n\n    let history = useHistory();\n\n    const onShowDeposit = useCallback((token?: any) => {\n        updateWalletLayer1()\n        ShowDeposit(true, {\n            tradeData: {\n                balance: '',\n                belong: token\n            },\n        })\n    }, [ShowDeposit, updateWalletLayer1])\n\n    const onShowTransfer = useCallback((token?: any) => {\n        ShowTransfer(true, {\n            tradeData: {\n                balance: '',\n                belong: token\n            },\n        })\n    }, [ShowTransfer])\n\n    const onShowWithdraw = useCallback((token?: any) => {\n        ShowWithdraw(true, {\n            tradeData: {\n                balance: '',\n                belong: token\n            },\n        })\n    }, [ShowWithdraw])\n\n    const lpTokenJump = useCallback((token: string, type: LpTokenAction) => {\n        if (history) {\n            history.push(`/liquidity/pools/coinPair/${token}?type=${type}`)\n        }\n    }, [history])\n\n    const handleChartPeriodChange = useCallback((event: React.MouseEvent<HTMLElement, MouseEvent>, newValue: string) => {\n        const limit = newValue === 'week' ? 7 : 9999\n        getUserTotalAssets(limit)\n    }, [getUserTotalAssets])\n\n    const { faitPrices } = store.getState().system\n\n    const tokenPriceList = faitPrices ? Object.entries(faitPrices).map(o => ({\n        token: o[ 0 ],\n        detail: o[ 1 ]\n    })) as ITokenInfoItem[] : []\n\n    let jointLPTokenValue = 0\n    assetsList.filter(o => o.token.split('-')[0] === 'LP').forEach(o => {\n        const result = o.token.split('-')\n        result.splice(0, 1, 'AMM')\n        const ammToken = result.join('-')\n        const ammTokenList = Object.keys(ammMap)\n        const tokenValue = ammTokenList.includes(ammToken) && ammMap[ammToken] ? Number(ammMap[ammToken].amountDollar) : 0\n        jointLPTokenValue += tokenValue\n    });\n\n    const doughnutData = assetsList.filter(o => o.token.split('-')[0] !== 'LP').map((tokenInfo) => {\n        const tokenPriceUSDT = tokenInfo.token === 'DAI' ? 1 : Number(tokenPriceList.find(o => o.token === tokenInfo.token)?.detail.price) / Number(tokenPriceList.find(o => o.token === 'USDT')?.detail.price)\n        return ({\n            name: tokenInfo.token,\n            value: Number(volumeToCount(tokenInfo.token, tokenInfo.detail?.detail?.total as string)) * tokenPriceUSDT\n        })\n    })\n    const formattedDoughnutData = [...doughnutData, {\n            name: 'LP-Token',\n            value: jointLPTokenValue\n        }]\n    const AssetTitleProps: AssetTitleProps = {\n        assetInfo: {\n            totalAsset: formattedDoughnutData.map(o => o.value).reduce((prev, next) => {\n                return prev + next\n            }, 0),\n            priceTag: PriceTag.Dollar,\n        },\n        onShowDeposit,\n        onShowTransfer,\n        onShowWithdraw,\n    }\n\n    const assetsRawData = assetsList.map((tokenInfo) => {\n        const tokenPriceUSDT = Number(tokenPriceList.find(o => o.token === tokenInfo.token)?.detail.price) / Number(tokenPriceList.find(o => o.token === 'USDT')?.detail.price)\n        return ({\n            token: {\n                type: tokenInfo.token.split('-')[0] === 'LP' ? TokenType.lp : TokenType.single,\n                value: tokenInfo.token\n            },\n            amount: String(Number(volumeToCount(tokenInfo.token, tokenInfo.detail?.detail.total as string)).toFixed(6)) || EmptyValueTag,\n            available: String(tokenInfo.detail?.count) || EmptyValueTag,\n            locked: String(tokenInfo.detail?.detail.locked) || EmptyValueTag,\n            smallBalance: tokenPriceUSDT * Number(volumeToCount(tokenInfo.token, tokenInfo.detail?.detail.total as string)) < 1,\n        })\n    })\n\n    return (\n        <>\n            <Box>\n                <AssetTitle  {...{\n                    t,\n                    ...rest,\n                    ...AssetTitleProps\n                }} />\n            </Box>\n\n            {/*<div className=\"title\">{t('labelAssetsTitle')}</div>*/}\n\n            <StyledChartWrapper display={'flex'} justifyContent={'space-between'} alignItems={'center'} marginTop={2}>\n                <Paper component={'div'}>\n                    <Typography component=\"span\" color=\"textSecondary\" variant=\"body1\">Asset Distribution</Typography>\n                    <DoughnutChart data={walletLayer2 ? formattedDoughnutData : []}/>\n                </Paper>\n                <Paper component={'div'}>\n                    <Typography component=\"span\" color=\"textSecondary\" variant=\"body1\">Total Assets</Typography>\n                    <ScaleAreaChart type={ChartType.Trend} data={chartData}/>\n                    <StyledBtnGroupWrapper>\n                        <ToggleButtonGroup exclusive size=\"small\" {...{\n                            ...rest,\n                            t,\n                            data: toggleData,\n                            value: chartPeriod,\n                            setValue: setChartPeriod,\n                            onChange: handleChartPeriodChange\n                        }} />\n                    </StyledBtnGroupWrapper>\n                </Paper>\n            </StyledChartWrapper>\n            <StylePaper style={{marginTop: `${unit*2}px`}}>\n                <div className=\"tableWrapper\" ref={container}>\n                    <AssetsTable {...{\n                        rawData: assetsRawData,\n                        pagination: {\n                            pageSize: pageSize\n                        },\n                        showFiliter: true,\n                        onShowDeposit: onShowDeposit,\n                        onShowTransfer: onShowTransfer,\n                        onShowWithdraw: onShowWithdraw,\n                        onLpDeposit: lpTokenJump,\n                        onLpWithdraw: lpTokenJump,\n                        ...rest\n                    }} />\n                </div>\n            </StylePaper>\n        </>\n    )\n})\n\nexport default AssetPanel\n","import { BIG10 } from 'defs/swap_defs'\nimport { flatMap } from 'lodash'\nimport { LoopringMap, MarketInfo, toBig } from 'loopring-sdk'\n\nimport store from 'stores'\n\nimport * as fm from 'loopring-sdk'\n\nconst getTokenInfo = (symbol: string) => {\n    const tokenMap = store.getState().tokenMap.tokenMap\n\n    if (!tokenMap || !tokenMap[symbol]) {\n        return undefined\n    }\n\n    return tokenMap[symbol]\n}\n\nconst getMarketInfo = (symbol: string) => {\n    const marketMap = store.getState().tokenMap.marketMap\n\n    if (!marketMap || !marketMap[symbol]) {\n        return undefined\n    }\n\n    return marketMap[symbol]\n}\n\nexport function StringToNumberWithPrecision(rawVal: string, symbol: string) {\n    \n    if (rawVal === undefined || rawVal === null || rawVal.trim() === '')\n        return 0\n\n    const tokenInfo = getTokenInfo(symbol)\n\n    if (!tokenInfo) {\n        return undefined\n    }\n\n    return parseFloat(toBig(rawVal).toFixed(tokenInfo.precision, 0))\n}\n\n/*\n* format volume to real number\n*/\nexport function VolToNumberWithPrecision(rawVal: string, symbol: string) {\n\n    const tokenInfo = getTokenInfo(symbol)\n\n    if (!tokenInfo) {\n        return undefined\n    }\n\n    if (rawVal === undefined || rawVal === null || rawVal.trim() === '')\n        return 0\n\n    return toBig(rawVal).div('1e' + tokenInfo.decimals).toFixed(tokenInfo.precision, 0)\n}\n\n/*\n* format raw val with precision\n*/\nexport function FormatValWithPrecision(rawVal: string, symbol: string) {\n\n    const tokenInfo = getTokenInfo(symbol)\n\n    if (!tokenInfo) {\n        return undefined\n    }\n\n    if (rawVal === undefined || rawVal === null || rawVal.trim() === '')\n        return 0\n\n    return toBig(rawVal).toFixed(tokenInfo.precision, 0)\n}\n\n/*\n* format order price with precision\n*/\nexport function formatPriceWithPrecision(rawVal: string, \n    symbol: string) {\n    const marketInfo = getMarketInfo(symbol)\n    if (!rawVal || !marketInfo || !symbol) {\n        return '0'\n    }\n\n    return fm.toBig(rawVal).toFixed(marketInfo.precisionForPrice)\n\n}","import React, { useEffect } from 'react'\nimport { TradeTable, TradeFilterTable, RawDataTradeItem } from '@loopring-web/component-lib'\nimport { WithTranslation, withTranslation } from 'react-i18next'\n// import styled from '@emotion/styled'\n// import { Box, Paper } from '@material-ui/core'\nimport store from 'stores'\nimport { LoopringAPI } from 'stores/apis/api'\n// import { volumeToCount } from 'hooks/help'\nimport { StylePaper } from '../../styled'\nimport { TradeTypes } from '@loopring-web/common-resources'\nimport { toBig, Side } from 'loopring-sdk'\nimport { StringToNumberWithPrecision, VolToNumberWithPrecision, } from 'utils/formatter_tool'\n\n// const StylePaper = styled(Box)`\n//   display: flex;\n//   flex-direction: column;\n//   width: 100%;\n//   height: 100%;\n//   flex: 1;\n//   background-color: ${({ theme }) => theme.colorBase.background().default};\n//   border-radius: ${({ theme }) => theme.unit}px;\n//   padding: 20px;\n//   margin-bottom: ${({ theme }) => 2* theme.unit}px;\n//   .title {\n//     font-family: Gilroy-Medium;\n//     font-size: ${({ theme }) => theme.unit * 3}px;\n//     line-height: 19px;\n//   }\n//\n//   .tableWrapper {\n//     display: flex;\n//     flex: 1;\n//     margin-top: 20px;\n//     border: 1px solid ${({ theme }) => theme.colorBase.borderColor};\n//     border-radius: ${({ theme }) => theme.unit}px;\n//     padding: 26px 0;\n//\n//     .rdg {\n//       flex: 1;\n//     }\n//   }\n// ` as typeof Paper;\n//\n// // side: keyof typeof TradeTypes;\n// //     amount: {\n// //         from: {\n// //             key: string;\n// //             value: number|undefined;\n// //         },\n// //         to: {\n// //             key: string;\n// //             value: number|undefined;\n// //         }\n// //     };\n// //     price:{\n// //         key:string\n// //         value:number|undefined,\n// //     }\n// //     // priceDollar: number;\n// //     // priceYuan: number;\n// //     fee: {\n// //         key: string;\n// //         value: number|undefined;\n// //     };\n// //     time: number;\n\nconst TradePanel = withTranslation('common')((rest:WithTranslation<'common'>) => {\n    const container = React.useRef(null);\n    const [pageSize, setPageSize] = React.useState(10);\n    const [originalData, setOriginalData] = React.useState<RawDataTradeItem[]>([])\n\n    const { accountId, apiKey } = store.getState().account;\n    const tokenMap = store.getState().tokenMap.tokenMap\n\n    useEffect(() => {\n        (async function getUserApi () {\n            if (LoopringAPI && LoopringAPI.userAPI && accountId && apiKey && tokenMap) {\n                const userTrades = await LoopringAPI.userAPI.getUserTrades({\n                    accountId,\n                }, apiKey)\n\n                if (userTrades && userTrades.userTrades) {\n                  // @ts-ignore\n                  setOriginalData(userTrades.userTrades.map(o => {\n                    const marketList = o.market.split('-')\n                    // due to AMM case, we cannot use first index\n                    const baseToken = marketList[marketList.length - 2]\n                    const quoteToken = marketList[marketList.length - 1]\n\n                    const amt = toBig(o.volume).times(o.price).toString()\n\n                    return ({\n                      side: o.side === Side.Buy ? TradeTypes.Buy : TradeTypes.Sell ,\n                      price: {\n                        key: baseToken,\n                        value: StringToNumberWithPrecision(o.price, baseToken)\n                      },\n                      fee: {\n                        key: quoteToken,\n                        value: VolToNumberWithPrecision(o.fee, quoteToken)\n                      },\n                      time: Number(o.tradeTime),\n                      amount: {\n                        from: {\n                          key: baseToken,\n                          value: VolToNumberWithPrecision(o.volume, baseToken)\n                        },\n                        to: {\n                          key: quoteToken,\n                          value: VolToNumberWithPrecision(amt, quoteToken)\n                        }\n                      }\n                    })\n                  }))\n                }\n            }\n        })()\n    }, [accountId, apiKey, tokenMap])\n\n    React.useEffect(() => {\n        // @ts-ignore\n        let height = container?.current?.offsetHeight;\n        if (height) {\n            setPageSize(Math.floor((height - 120) / 44) - 2);\n        }\n    }, [container, pageSize]);\n\n    // const txList: any[] = []\n\n    return (\n        <>\n            <StylePaper ref={container}>\n                <div className=\"title\">Trades</div>\n                <div className=\"tableWrapper\">\n                    <TradeTable {...{\n                      rawData: originalData,\n                      pagination: {\n                        pageSize: pageSize\n                      },\n                      showFilter: true,\n                      ...rest}}/>\n                </div>\n            </StylePaper>\n        </>\n    )\n})\n\nexport default TradePanel\n","import React, { useEffect } from 'react'\nimport { RawDataAmmItem, AmmTable, AmmSideTypes } from '@loopring-web/component-lib'\nimport { WithTranslation, withTranslation } from 'react-i18next'\nimport store from 'stores'\nimport { LoopringAPI } from 'stores/apis/api'\nimport { AmmTxType } from 'loopring-sdk'\nimport { StylePaper } from '../../styled'\nimport { volumeToCount } from '../../../hooks/help';\n\nconst AmmPanel = withTranslation('common')((rest:WithTranslation<'common'>) => {\n    const container = React.useRef(null);\n    const [pageSize, setPageSize] = React.useState(10);\n    const [originalData, setOriginalData] = React.useState<RawDataAmmItem[]>([])\n\n    const { accountId,apiKey } = store.getState().account;\n    const { tokenMap } = store.getState().tokenMap\n    \n    const getTokenName = React.useCallback((tokenId?: number) => {\n        if (tokenMap) {\n            const keys = Object.keys(tokenMap)\n            const values = Object.values(tokenMap)\n            const index = values.findIndex(o => o.tokenId === tokenId)\n            if (index > -1) {\n                return keys[index]\n            }\n            return ''\n        }\n        return ''\n    }, [tokenMap])\n\n    const getAmmpoolList = React.useCallback(async () => {\n        if (LoopringAPI.ammpoolAPI && accountId && apiKey) {\n            const ammpool = await LoopringAPI.ammpoolAPI.getUserAmmPoolTxs({\n                accountId,\n            }, apiKey)\n            if (ammpool && ammpool.userAmmPoolTxs) {\n                const result = ammpool.userAmmPoolTxs.map(o => ({\n                    side: o.txType === AmmTxType.JOIN ? AmmSideTypes.Join : AmmSideTypes.Exit,\n                    amount: {\n                        from: {\n                            key: getTokenName(o.poolTokens[0]?.tokenId),\n                            value: String(volumeToCount(getTokenName(o.poolTokens[0]?.tokenId), o.poolTokens[0]?.actualAmount))\n                        },\n                        to: {\n                            key: getTokenName(o.poolTokens[1]?.tokenId),\n                            value: String(volumeToCount(getTokenName(o.poolTokens[1]?.tokenId), o.poolTokens[1]?.actualAmount))\n                        }\n                    },\n                    lpTokenAmount: String(volumeToCount(getTokenName(o.lpToken?.tokenId), o.lpToken?.actualAmount)),\n                    fee: {\n                        key: getTokenName(o.poolTokens[1]?.tokenId),\n                        value: String(volumeToCount(getTokenName(o.poolTokens[1]?.tokenId), o.poolTokens[1]?.feeAmount))\n                    },\n                    time: o.updatedAt\n                }))\n                setOriginalData(result)\n            }\n        }\n    }, [accountId, apiKey, getTokenName])\n\n    useEffect(() => {\n        getAmmpoolList()\n    }, [getAmmpoolList])\n\n    React.useEffect(() => {\n        // @ts-ignore\n        let height = container?.current?.offsetHeight;\n        if (height) {\n            setPageSize(Math.floor((height - 120) / 44) - 2);\n        }\n    }, [container, pageSize]);\n\n    return (\n        <>\n            <StylePaper ref={container}>\n                <div className=\"title\">AMM Records</div>\n                <div className=\"tableWrapper\">\n                    <AmmTable {...{\n                        rawData: originalData,\n                        pagination: {\n                            pageSize: pageSize\n                        },\n                        showFilter: true,\n                        ...rest}}/>\n                </div>\n            </StylePaper>\n        </>\n    )\n})\n\nexport default AmmPanel\n","\nimport React, { useEffect } from 'react'\nimport { OrderHistoryTable, OrderHistoryRawDataItem } from '@loopring-web/component-lib'\nimport { TradeTypes, TradeStatus } from '@loopring-web/common-resources'\nimport { WithTranslation, withTranslation } from 'react-i18next'\nimport store from 'stores'\nimport { LoopringAPI } from 'stores/apis/api'\nimport { volumeToCount } from 'hooks/help'\nimport { StylePaper } from '../../styled'\n\n\nconst OrderPanel = withTranslation('common')((rest: WithTranslation) => {\n    const container = React.useRef(null);\n    const [pageSize, setPageSize] = React.useState(10);\n    const [orderOriginalData, setOrderOriginalData] = React.useState<OrderHistoryRawDataItem[]>([])\n\n    const { accountId,apiKey } = store.getState().account;\n\n    useEffect(() => {\n        (async function getUserApi () {\n            if (LoopringAPI && LoopringAPI.userAPI && accountId && apiKey) {\n                const userOrders = await LoopringAPI.userAPI.getOrders({\n                    accountId,\n                }, apiKey)\n                if (userOrders && Array.isArray(userOrders.orders) && !!userOrders.orders.length) {\n                    \n                    setOrderOriginalData(userOrders.orders.map(o => {\n                        const marketList = o.market.split('-')\n                        // due to AMM case, we cannot use first index\n                        const baseToken = marketList[marketList.length - 2]\n                        const quoteToken = marketList[marketList.length - 1]\n                        const { baseAmount, quoteAmount, baseFilled, quoteFilled } = o.volumes\n\n                        return ({\n                            side: o.side === 'BUY' ? TradeTypes.Buy : TradeTypes.Sell,\n                            amount: {\n                                from: {\n                                    key: baseToken,\n                                    // value: Number(baseAmount)\n                                    value: Number(volumeToCount(baseToken, baseAmount))\n                                },\n                                to: {\n                                    key: quoteToken,\n                                    value: Number(volumeToCount(quoteToken, quoteAmount))\n                                }\n                            },\n                            // average: Number(o.price),\n                            average: Number(volumeToCount(quoteToken, quoteFilled)) / Number(volumeToCount(baseToken, baseFilled)),\n                            filledAmount: {\n                                from: {\n                                    key: baseToken,\n                                    // value: Number(baseFilled)\n                                    value: Number(volumeToCount(baseToken, baseFilled))\n                                },\n                                to: {\n                                    key: quoteToken,\n                                    value: Number(volumeToCount(quoteToken, quoteFilled))\n                                }\n                            },\n                            filledPrice: {\n                                key: quoteToken,\n                                value: Number(o.price)\n                            },\n                            time: o.validity.start * 1000,\n                            status: o.status as unknown as TradeStatus,\n                            detailTable: []\n                        })\n                    }))\n                }\n            }\n        })()\n    }, [accountId, apiKey])\n\n    React.useEffect(() => {\n        // @ts-ignore\n        let height = container?.current?.offsetHeight;\n        if (height) {\n            setPageSize(Math.floor((height - 120) / 44) - 2);\n        }\n    }, [container, pageSize]);\n\n    return (\n        <>\n            <StylePaper ref={container}>\n                <div className=\"title\">Order History</div>\n                <div className=\"tableWrapper\">\n                    <OrderHistoryTable {...{\n                        pagination: {\n                            pageSize: pageSize\n                        },\n                        rawData: orderOriginalData,\n                        showFilter: true,\n                        ...rest\n                    }} />\n                </div>\n            </StylePaper>\n        </>\n    )\n})\n\nexport default OrderPanel\n","import styled from '@emotion/styled';\nimport { Box, Button, Divider, Grid, Switch, Typography } from '@material-ui/core';\nimport React from 'react';\nimport { UpColor, Currency, DropDownIcon } from '@loopring-web/common-resources';\nimport {\n    BtnLanguage,\n    OutlineSelect,\n    OutlineSelectItem, QRCodePanel,\n    TypographyStrong, useSettings\n} from '@loopring-web/component-lib';\nimport { Trans, useTranslation, WithTranslation, withTranslation } from 'react-i18next';\nimport { useTheme } from '@emotion/react';\nimport { LanguageKeys } from '@loopring-web/common-resources';\n\n// const MuiModalStyled = styled(MuiModal)`\n//   //background: ${({theme}) => theme.colorBase.background().secondary};\n//   // .MuiBackdrop-root{\n//   //   z-index: -1;\n//   //   background-color: ${({theme}) => theme.colorBase.background().outline};\n//   // }\n//   display: flex;\n//   align-items: center;\n//   justify-content: center;\n// ` as typeof MuiModal;\n// const BlockStyled = styled(Box)`\n//   ${({theme}) => theme.border.defaultFrame({c_key: 'blur', d_R: 1})};\n//   background: ${({theme}) => theme.colorBase.background().secondary};\n//   max-height: var(--panel-setting-height);\n//   max-width: var(--panel-setting-width);\n//   display: flex;\n//   justify-content: space-around;\n//   align-items: center;\n//   overflow: scroll;\n//   padding: ${({theme}) => theme.unit*8}px\n// `;\n\nconst StyledPaper = styled(Grid)`\n  width: 100%;\n  height: 100%;\n  background-color: ${({theme}) => theme.colorBase.background().default};\n  border-radius: ${({ theme }) => theme.unit}px;\n`\n//${({theme}) => theme.border.defaultFrame({c_key: 'blur', d_R: 1})};\n\nconst StyledSwitch = styled(Switch)(({theme}) => ({\n    \"& .Mui-checked\": {\n        color: theme.colorBase.textPrimary,\n        '& + .MuiSwitch-track.MuiSwitch-track': {\n            border: `solid ${theme.colorBase.success}`,\n        },\n        '& .MuiSwitch-thumb': {\n            backgroundColor: theme.colorBase.success,\n        }\n    },\n    '& .MuiSwitch-track': {\n        border: `solid ${theme.colorBase.error}`,\n        opacity: 1\n    },\n    '& .MuiSwitch-thumb': {\n        backgroundColor: theme.colorBase.error,\n    }\n}));\n\nexport const BtnCurrency = ({t, currency, label, handleChange}: any) => {\n    const [state, setState] = React.useState<string>(currency ? currency : Currency.dollar);\n    const _handleChange = React.useCallback((event: React.ChangeEvent<any>) => {\n        setState(event.target.value);\n        if (handleChange) {\n\n            handleChange(event.target.value)\n        }\n    }, [handleChange])\n    return <OutlineSelect aria-label={t(label)} IconComponent={DropDownIcon}\n                          labelId=\"language-selected\"\n                          id=\"language-selected\"\n                          value={state} autoWidth\n                          onChange={_handleChange}>\n        <OutlineSelectItem value={Currency.dollar}>$ {t('labelUSDollar')}</OutlineSelectItem>\n            <OutlineSelectItem value={Currency.yen}>¥ {t('labelCNYYuan')}</OutlineSelectItem>\n    </OutlineSelect>\n}\n\nconst StyledDivider = styled(Divider)`\n  margin: ${({theme}) => theme.unit}px 0 ${({theme}) => theme.unit}px 0px;\n`\nconst DividerBlock = styled(Divider)`\n  margin: 0;\n  flex: 1;\n  width: 1px;\n  height: ${({theme}) => theme.unit * 3}px;\n  background: ${({theme}) => theme.colorBase.focus};\n`\n\n\n\nexport const SettingPanel = withTranslation(['common', 'layout'])(({t,i18n, ...rest}: & WithTranslation) => {\n    const theme = useTheme();\n    const {setUpColor,setLanguage,setCurrency,currency,upColor} = useSettings()\n    const language = i18n.language;\n    const handleOnLanguageChange = (lang: LanguageKeys) => {\n        setLanguage(lang);\n        i18n.changeLanguage(lang);\n    }\n    const handleOnCurrencyChange = (value: any) => {\n        setCurrency(value);\n    }\n    const handleColorChange = (e:any) => {\n        if(e.target.checked){\n            setUpColor(UpColor.green) ;\n        }else{\n            setUpColor(UpColor.red);\n        }\n    }\n    return <Grid container direction={'column'} justifyContent={'space-between'} alignItems={'stretch'} flexWrap={'nowrap'}>\n        <Typography variant={'h4'} component={'h3'} paddingLeft={2}>{t('labelTitleSecurity')}</Typography>\n        <StyledPaper item xs={12} display={'flex'} flexDirection={'column'} marginY={2}  paddingY={3}>\n            <Box component={'section'} display={'flex'} flexDirection={'column'} marginBottom={1}>\n                <Typography variant={'h5'} component={'h4'} paddingX={3}  marginBottom={1}>{t('labelTitleResetL2Keypair')}</Typography>\n                {/*<StyledDivider/>*/}\n                <Grid container display={'flex'} flexDirection={'row'} justifyContent={'stretch'}\n                      alignItems={'flex-start'} paddingX={3} >\n                    <Grid item xs={8} display={'flex'} flexDirection={'column'}>\n                        <Typography variant={'body1'} component={'p'}>\n                            <Trans i18nKey=\"resetDescription\">\n                                Create a new signing key for layer-2 authentication (no backup needed). This will\n                                <TypographyStrong component={'span'}>cancel all your pending orders</TypographyStrong>.\n                            </Trans>\n                        </Typography>\n                    </Grid>\n                    <Grid item xs={4} display={'flex'} flexDirection={'column'} justifyContent={'space-evenly'}\n                          alignItems={'flex-end'} alignSelf={'stretch'}>\n                        <Button variant={'outlined'} size={'medium'} color={'primary'} disabled={true}>{t('labelBtnReset')}</Button>\n                    </Grid>\n                    <Grid item xs={12} display={'flex'} flexDirection={'row'} justifyContent={'flex-end'}\n                          alignItems={'center'} alignSelf={'stretch'}>\n                        <Typography variant={'body2'} component={'p'}\n                                    paddingTop={1}>{t('labelHadChangPassword', {passDay: '14 hours'})}</Typography>\n                    </Grid>\n\n                </Grid>\n            </Box>\n            <StyledDivider/>\n            <Box component={'section'} display={'flex'} flexDirection={'column'}>\n                <Typography variant={'h5'} component={'h4'} paddingX={3} marginY={1}>{t('labelTitleExportAccount')}</Typography>\n\n                <Grid container display={'flex'} flexDirection={'row'} justifyContent={'stretch'}\n                      alignItems={'flex-start'} paddingX={3} marginBottom={2}>\n                    <Grid item xs={7} display={'flex'} flexDirection={'column'}>\n                        <Typography variant={'body1'} component={'p'}>{t('descriptionExportAccount')}</Typography>\n                    </Grid>\n                    <Grid item xs={5} display={'flex'} flexDirection={'column'} justifyContent={'space-evenly'}\n                          alignItems={'flex-end'} alignSelf={'stretch'}>\n                        <Grid item> <Button variant={'outlined'} size={'medium'}\n                                            color={'primary'} disabled={true}>{t('labelBtnExportAccount')}</Button></Grid>\n                    </Grid>\n                </Grid>\n            </Box>\n        </StyledPaper>\n\n        <Typography variant={'h4'} component={'h3'} paddingLeft={2}>{t('labelTitlePreferences')}</Typography>\n        <StyledPaper item xs={12} display={'flex'} flexDirection={'column'} marginY={2} paddingY={3}>\n            <Box component={'section'} display={'flex'} flexDirection={'column'}>\n                {/*<Typography variant={'h5'} component={'h4'} paddingX={2}>{t('labelTitleLayout')}</Typography>*/}\n                {/*<StyledDivider/>*/}\n                <Grid container display={'flex'} flexDirection={'row'} justifyContent={'stretch'}\n                      alignItems={'flex-start'} paddingX={3} marginBottom={2}>\n                    <Grid item xs={7} display={'flex'} flexDirection={'column'}>\n                        <Typography variant={'body1'} component={'p'}>{t('labelLanguage')}</Typography>\n                    </Grid>\n                    <Grid item xs={5} display={'flex'} flexDirection={'column'} justifyContent={'space-evenly'}\n                          alignItems={'flex-end'} alignSelf={'stretch'}>\n                        <Grid item>\n                            <BtnLanguage {...{\n                                t, ...rest,\n                                language,\n                                label: 'languageSetting',\n                                handleChange: handleOnLanguageChange\n                            }}></BtnLanguage>\n                        </Grid>\n                    </Grid>\n                </Grid>\n                <StyledDivider/>\n                <Grid container display={'flex'} flexDirection={'row'} justifyContent={'stretch'}\n                      alignItems={'flex-start'} paddingX={3} marginY={2}>\n                    <Grid item xs={7} display={'flex'} flexDirection={'column'}>\n                        <Typography variant={'body1'} component={'p'}>{t('labelCurrency')}</Typography>\n                    </Grid>\n                    <Grid item xs={5} display={'flex'} flexDirection={'column'} justifyContent={'space-evenly'}\n                          alignItems={'flex-end'} alignSelf={'stretch'}>\n                        <Grid item>\n                            <BtnCurrency {...{\n                                t, ...rest,\n                                currency,\n                                label: 'currencySetting',\n                                handleChange: handleOnCurrencyChange\n                            }}></BtnCurrency>\n\n                        </Grid>\n                    </Grid>\n                </Grid>\n                <StyledDivider/>\n                <Grid container display={'flex'} flexDirection={'row'} justifyContent={'stretch'}\n                      alignItems={'flex-start'} paddingX={3} marginTop={2}>\n                    <Grid item xs={7} display={'flex'} flexDirection={'column'}>\n                        <Typography variant={'body1'} component={'p'}>{t('labelColors')}</Typography>\n                    </Grid>\n                    <Grid item xs={5} display={'flex'} flexDirection={'row'} justifyContent={'flex-end'}\n                          alignItems={'center'} alignSelf={'stretch'}>\n                        <Typography variant={'body1'} component={'span'} paddingX={2}>\n                            <Trans i18nKey=\"whichColorIsUp\">\n                                <span style={{\n                                    textTransform: 'capitalize',\n                                    color: upColor === UpColor.green ? theme.colorBase.success : theme.colorBase.error\n                                }}>{{up: upColor === UpColor.green ? t('labelgreen') : t('labelred')}} up</span>\n                                and <span style={{\n                                textTransform: 'capitalize',\n                                color: upColor === UpColor.green ? theme.colorBase.error : theme.colorBase.success\n                            }}>{{down: upColor === UpColor.green ? t('labelred') : t('labelgreen')}} down</span>\n                            </Trans>\n                        </Typography>\n                        <StyledSwitch checked={upColor === UpColor.green} color=\"default\"\n                                      onChange={handleColorChange}/>\n                    </Grid>\n                </Grid>\n            </Box>\n\n        </StyledPaper>\n\n    </Grid>\n})\n\n// export const SettingPage = ({open,onClose}: { open:boolean, onClose:(e:any)=>void})=>{\n//     return  <MuiModalStyled\n//         open={open}\n//         onClose={onClose}\n//         aria-labelledby=\"modal-modal-title\"\n//         aria-describedby=\"modal-modal-description\"\n//     >\n//         <BlockStyled >\n//            <SettingPanel/>\n//         </BlockStyled>\n//     </MuiModalStyled>\n// }\n\n\n","import { useRouteMatch } from 'react-router'\n\nimport { Box, Paper } from '@material-ui/core'\nimport {\n    DepositPanel,\n    SubMenu,\n    SubMenuList as BasicSubMenuList,\n} from '@loopring-web/component-lib'\nimport { useTranslation, withTranslation } from 'react-i18next'\nimport styled from '@emotion/styled'\nimport { subMenuLayer2 } from '@loopring-web/common-resources'\n\nimport TxPanel from './TxPanel'\nimport AssetPanel from './AssetPanel'\nimport TradePanel from './TradePanel'\nimport AmmPanel from './AmmPanel'\nimport OrderPanel from './OrderPanel'\nimport { SettingPanel } from '../SettingPage';\nimport store from '../../stores';\nimport { AccountStatus } from '../../state_machine/account_machine_spec';\nimport { useModalProps } from '../../layouts/header/hook';\nimport { Redirect } from 'react-router-dom'\n\nexport const subMenu = subMenuLayer2;\nconst BoxStyle = styled(Box)`\n  ${({theme})=>`\n    background-color: ${theme.colorBase.background().default};\n    width: 100%;\n    min-width:auto;\n    ${theme.border.defaultFrame({c_key: 'blur'})};\n    & > div{\n      background-color:initial;\n      border:0;\n      width:auto;\n      min-width: var(--swap-box-width);\n      max-width: 520px;\n    }\n    `\n  }\n   \n` as typeof Box\n\nconst SubMenuList = withTranslation(['layout','common'], { withRef: true })(BasicSubMenuList);\nexport const Layer2Page = () => {\n\n    let match: any = useRouteMatch(\"/layer2/:item\")\n    const {status: accStatus} = store.getState().account;\n    const {t,...rest} = useTranslation()\n    const selected = match?.params.item ?? 'assets';\n    const {depositProps} = useModalProps()\n\n    return <>  {\n        accStatus === AccountStatus.UNCONNNECTED \n            ? <Redirect to=\"/\" />\n            :\n        accStatus === AccountStatus.NOACCOUNT\n    || accStatus === AccountStatus.DEPOSITING\n    || accStatus === AccountStatus.DEPOSIT_TO_CONFIREM ?\n        <BoxStyle display={'flex'} flexWrap={'wrap'} alignItems={'center'} justifyContent={'center'} alignContent={'flex-start'}>\n            <DepositPanel  {...{\n                ...rest, ...depositProps,\n                title: t('depositTitleAndActive'),\n                description: 'depositAndActiveDescription'\n            }} > </DepositPanel>\n        </BoxStyle>: <>\n            <Box width={'200px'} display={'flex'} justifyContent={'stretch'} marginRight={3} marginBottom={2}>\n                <SubMenu>\n                    <SubMenuList selected={selected} subMenu={subMenu as any} />\n                </SubMenu>\n            </Box>\n            <Box minHeight={420} display={'flex'} alignItems={'stretch'} flexDirection={'column'} marginTop={0} flex={1}>\n                {selected === 'assets' && <AssetPanel />}\n                {selected === 'transactions' && <TxPanel />}\n                {selected === 'trades' && <TradePanel />}\n                {selected === 'ammRecords' && <AmmPanel />}\n                {selected === 'orders' && <OrderPanel />}\n                {selected === 'setting' && <SettingPanel />}\n            </Box>\n        </>\n    }\n        </>\n\n\n\n}\n","import { WithTranslation, withTranslation } from 'react-i18next'\nimport { Box, } from '@material-ui/core'\nimport styled from '@emotion/styled'\n\nimport React from 'react';\nimport { useAmmMapUI } from './hook';\n\nimport { PoolsTable } from '@loopring-web/component-lib';\nimport { AmmPoolActivityRule, LoopringMap } from 'loopring-sdk/dist/defs/loopring_defs';\n\nconst StylePaper = styled(Box)`\n  width: 100%;\n  height: 100%;\n  flex: 1;\n  background-color: ${({theme}) => theme.colorBase.background().default};\n  border-radius: ${({theme}) => theme.unit}px;\n\n  .rdg {\n    flex: 1;\n  }\n\n` as typeof Box;\n\n\nexport const PoolsPanel = withTranslation('common')(<R extends { [ key: string ]: any }, I extends { [ key: string ]: any }>\n({t, ammActivityMap, ...rest}: WithTranslation\n    & {\n    ammActivityMap: LoopringMap<LoopringMap<AmmPoolActivityRule[]>> | undefined }) => {\n    const container = React.useRef(null);\n    const [pageSize, setPageSize] = React.useState(10);\n    const {updateTickersUI, rawData, page} = useAmmMapUI({pageSize});\n\n    React.useEffect(() => {\n        // @ts-ignore\n        let height = container?.current?.offsetHeight;\n        if (height) {\n            setPageSize(Math.floor((height - 120) / 44) - 1);\n        }\n    }, [container, pageSize]);\n\n    const handlePageChange = React.useCallback((page) => {\n        updateTickersUI(page)\n    }, [updateTickersUI]);\n    return (\n        <>\n            <StylePaper display={'flex'} flexDirection={'column'} ref={container}>\n                <PoolsTable {...{\n                    rawData,\n                    handlePageChange,\n                    page,\n                    pagination: {\n                        pageSize\n                    }\n                }} />\n            </StylePaper>\n        </>\n    )\n})\n\n","import { AmmPanel, AmmPanelType } from '@loopring-web/component-lib';\nimport { AmmData, AmmInData, CoinInfo, IBData, WalletMap } from '@loopring-web/common-resources';\nimport { useAmmPanel } from './hooks';\nimport React from 'react';\nimport { Box } from '@material-ui/core';\nimport { AmmPoolSnapshot, TickerData } from 'loopring-sdk';\nimport { TradeBtnStatus } from '@loopring-web/component-lib';\n\nexport const AmmPanelView = <T extends AmmData<C extends IBData<I> ? C : IBData<I>>, I,\n    ACD extends AmmInData<I>,\n    C = IBData<I>>({\n                       pair,\n                       walletMap,\n                       ammType, snapShotData,\n                       ...rest\n                   }: {\n    pair: { coinAInfo: CoinInfo<C> | undefined, coinBInfo: CoinInfo<C> | undefined },\n    snapShotData: { tickerData: TickerData | undefined, ammPoolsBalance: AmmPoolSnapshot | undefined } | undefined\n    walletMap: WalletMap<C>\n    ammType?: keyof typeof AmmPanelType\n} & any) => {\n    const {\n        ammCalcData,\n        ammJoinData,\n        ammExitData,\n        handleJoinAmmPoolEvent,\n        handleExitAmmPoolEvent,\n        onAmmRemoveClick,\n        onAmmAddClick,\n        isJoinLoading,\n        isExitLoading,\n        ammDepositBtnI18nKey,\n        ammWithdrawBtnI18nKey,\n    } = useAmmPanel({\n        pair,\n        snapShotData, walletMap, ammType: ammType ? ammType : AmmPanelType.Deposit\n    })\n\n    // const [index, setIndex] = React.useState(AmmPanelTypeMap[ tabSelected ]);\n    const isLoading = React.useCallback(()=>{\n        \n        if((!snapShotData || !snapShotData.tickerData || !snapShotData.ammPoolsBalance)\n            &&  ammDepositBtnI18nKey === undefined\n            &&  ammWithdrawBtnI18nKey === undefined\n        ) {\n          return true\n        }\n    \n        if(isJoinLoading || isExitLoading){\n            return true   \n            \n        }\n    },[snapShotData,ammWithdrawBtnI18nKey,ammWithdrawBtnI18nKey,isJoinLoading,isExitLoading])\n\n\n    return <> {pair ?\n        <AmmPanel {...{...rest}}\n                  ammDepositData={ammJoinData}\n                  ammWithdrawData={ammExitData}\n                  ammCalcData={ammCalcData}\n                  handleAmmAddChangeEvent={handleJoinAmmPoolEvent}\n                  handleAmmRemoveChangeEvent={handleExitAmmPoolEvent}\n                  onAmmRemoveClick={onAmmRemoveClick}\n                  onAmmAddClick={onAmmAddClick}\n                  tabSelected={ammType ? ammType : AmmPanelType.Deposit}\n                  ammDepositBtnI18nKey={ammDepositBtnI18nKey}\n                  ammWithdrawBtnI18nKey={ammWithdrawBtnI18nKey}\n                  ammDepositBtnStatus={isLoading()?TradeBtnStatus.LOADING:TradeBtnStatus.AVAILABLE}\n                  ammWithdrawBtnStatus={isLoading()?TradeBtnStatus.LOADING:TradeBtnStatus.AVAILABLE}\n\n        /> : <Box width={'var(--swap-box-width)'}/>}\n    </>\n\n}","import React, { useState } from \"react\";\nimport { AmmData, AmmInData, CoinInfo, globalSetup, IBData } from '@loopring-web/common-resources';\nimport { AmmPanelType } from '@loopring-web/component-lib';\nimport { IdMap, useTokenMap } from '../../../stores/token';\nimport { useAmmMap } from '../../../stores/Amm/AmmMap';\nimport { accountStaticCallBack, ammPairInit, bntLabel, btnClickMap, fnType, makeCache } from '../../../hooks/help';\nimport { WalletMap } from '@loopring-web/common-resources';\nimport * as sdk from 'loopring-sdk';\nimport {\n    AmmPoolRequestPatch,\n    AmmPoolSnapshot,\n    ChainId,\n    dumpError400,\n    ExitAmmPoolRequest,\n    GetAmmPoolSnapshotRequest,\n    getExistedMarket,\n    GetNextStorageIdRequest,\n    GetOffchainFeeAmtRequest,\n    JoinAmmPoolRequest,\n    LoopringMap,\n    makeExitAmmPoolRequest,\n    makeJoinAmmPoolRequest,\n    MarketInfo,\n    OffchainFeeInfo,\n    OffchainFeeReqType,\n    TickerData,\n    toBig,\n    TokenInfo\n} from 'loopring-sdk';\nimport { useCustomDCEffect } from '../../../hooks/common/useCustomDCEffect';\nimport { useAccount } from '../../../stores/account/hook';\nimport store from \"stores\";\nimport { LoopringAPI } from \"stores/apis/api\";\nimport { debounce } from \"lodash\";\nimport { AccountStatus } from \"state_machine/account_machine_spec\";\nimport { Lv2Account } from \"defs/account_defs\";\nimport { deepClone } from '../../../utils/obj_tools';\nimport { useWalletLayer2 } from \"stores/walletLayer2\";\nimport { myLog } from \"utils/log_tools\";\nimport { BIG10 } from \"defs/swap_defs\";\n\nexport const useAmmPanel = <C extends { [ key: string ]: any }>({\n                                                                    pair,\n                                                                    walletMap,\n                                                                    ammType,\n                                                                    snapShotData,\n                                                                }\n                                                                    : {\n    pair: { coinAInfo: CoinInfo<C> | undefined, coinBInfo: CoinInfo<C> | undefined },\n    snapShotData: { tickerData: TickerData | undefined, ammPoolsBalance: AmmPoolSnapshot | undefined } | undefined\n    walletMap: WalletMap<C>\n    ammType: keyof typeof AmmPanelType\n}) => {\n    // const walletLayer2State = useWalletLayer2();\n    const {coinMap, tokenMap} = useTokenMap();\n    const {ammMap} = useAmmMap();\n    const {account} = useAccount();\n    const {delayAndUpdateWalletLayer2} = useWalletLayer2();\n    const [ammCalcData, setAmmCalcData] = React.useState<AmmInData<C> | undefined>();\n\n    const [ammJoinData, setAmmJoinData] = React.useState<AmmData<IBData<C>, C>>({\n        coinA: {belong: undefined} as unknown as IBData<C>,\n        coinB: {belong: undefined} as unknown as IBData<C>,\n        slippage: 0.5\n    } as AmmData<IBData<C>, C>);\n\n    const [ammExitData, setAmmExitData] = React.useState({\n        coinA: {belong: undefined} as unknown as IBData<C>,\n        coinB: {belong: undefined} as unknown as IBData<C>,\n        slippage: 0.5\n    } as AmmData<IBData<C>, C>);\n\n    const [ammDepositBtnI18nKey, setAmmDepositBtnI18nKey] = React.useState<string | undefined>(undefined);\n    const [ammWithdrawBtnI18nKey, setAmmWithdrawBtnI18nKey] = React.useState<string | undefined>(undefined);\n\n    const initAmmData = React.useCallback(async (pair: any) => {\n        // @ts-ignore\n        let _ammCalcData: Partial<AmmInData<C>> = ammPairInit(\n            {\n                pair,\n                ammType,\n                _ammCalcData: {},\n                tokenMap,\n                coinMap,\n                walletMap: walletMap, //walletLayer2State.walletLayer2,\n                ammMap,\n                tickerData: snapShotData?.tickerData,\n                ammPoolsBalance: snapShotData?.ammPoolsBalance\n            })\n\n        setAmmCalcData({...ammCalcData, ..._ammCalcData} as AmmInData<C>);\n        if (_ammCalcData.myCoinA) {\n            setAmmJoinData({\n                coinA: {..._ammCalcData.myCoinA, tradeValue: undefined} as IBData<C>,\n                coinB: {..._ammCalcData.myCoinB, tradeValue: undefined} as IBData<C>,\n                slippage: 0.5\n            })\n            setAmmExitData({\n                coinA: {..._ammCalcData.lpCoinA, tradeValue: undefined} as IBData<C>,\n                coinB: {..._ammCalcData.lpCoinB, tradeValue: undefined} as IBData<C>,\n                slippage: 0.5\n            })\n        }\n    }, [snapShotData, walletMap, ammJoinData, ammExitData])\n\n    const [ammPoolSnapshot, setAmmPoolSnapShot] = useState<AmmPoolSnapshot>()\n\n    useCustomDCEffect(async() => {\n\n        const updateAmmPoolSnapshot = async() => {\n\n            if (!pair.coinAInfo?.simpleName || !pair.coinBInfo?.simpleName || !LoopringAPI.ammpoolAPI) {\n                return\n            }\n\n            const {marketArray, marketMap,} = store.getState().tokenMap\n\n            const {ammMap} = store.getState().amm.ammMap\n\n            const {market, amm} = getExistedMarket(marketArray, pair.coinAInfo.simpleName as string,\n                pair.coinBInfo.simpleName as string)\n\n            if (!market || !amm || !marketMap) {\n                return\n            }\n\n            const ammInfo: any = ammMap[ amm as string ]\n\n            const request1: GetAmmPoolSnapshotRequest = {\n                poolAddress: ammInfo.address\n            }\n\n            const response = await LoopringAPI.ammpoolAPI.getAmmPoolSnapshot(request1)\n\n            if (!response) {\n                return\n            }\n\n            const { ammPoolSnapshot } = response\n\n            console.log(ammPoolSnapshot)\n\n            setAmmPoolSnapShot(ammPoolSnapshot)\n        }\n\n        await updateAmmPoolSnapshot()\n\n        const handler = setInterval(async() => {\n\n            updateAmmPoolSnapshot()\n\n        }, 15000)\n\n        return () => {\n            if (handler) {\n                clearInterval(handler)\n            }\n        }\n\n    }, [pair, LoopringAPI.ammpoolAPI])\n\n    // set fees\n\n    const [joinFees, setJoinFees] = useState<LoopringMap<OffchainFeeInfo>>()\n    const [exitFees, setExitfees] = useState<LoopringMap<OffchainFeeInfo>>()\n\n    useCustomDCEffect(async () => {\n        const status = store.getState().account.status\n        if (!LoopringAPI.userAPI || !pair.coinBInfo?.simpleName\n            || status !== AccountStatus.ACTIVATED\n             || !ammCalcData || !tokenMap) {\n            return\n        }\n\n        const feeToken: TokenInfo = tokenMap[pair.coinBInfo.simpleName]\n\n        const acc = store.getState().account\n\n        const requestJoin: GetOffchainFeeAmtRequest = {\n            accountId: acc.accountId,\n            requestType: OffchainFeeReqType.AMM_JOIN,\n            tokenSymbol: pair.coinBInfo.simpleName as string,\n        }\n\n        const {fees: feesJoin} = await LoopringAPI.userAPI.getOffchainFeeAmt(requestJoin, acc.apiKey)\n        setJoinFees(feesJoin)\n\n        const feeJoin = sdk.toBig(feesJoin[pair.coinBInfo.simpleName].fee as string).div(BIG10.pow(feeToken.decimals)).toString()\n                    + ' ' + pair.coinBInfo.simpleName\n\n        myLog('joinFees:', feeJoin)\n\n        const requestExit: GetOffchainFeeAmtRequest = {\n            accountId: acc.accountId,\n            requestType: OffchainFeeReqType.AMM_EXIT,\n            tokenSymbol: pair.coinBInfo.simpleName as string,\n        }\n\n        const {fees: feesExit} = await LoopringAPI.userAPI.getOffchainFeeAmt(requestExit, acc.apiKey)\n\n        setExitfees(feesExit)\n\n        myLog('setExitfees:', feesExit)\n\n        const feeExit = sdk.toBig(feesExit[pair.coinBInfo.simpleName].fee as string).div(BIG10.pow(feeToken.decimals)).toString()\n                    + ' ' + pair.coinBInfo.simpleName\n\n        setAmmCalcData({ ...ammCalcData, feeJoin, feeExit })\n\n    }, [LoopringAPI.userAPI, pair.coinBInfo?.simpleName, store.getState().account.status, tokenMap])\n\n    // join\n\n    const [joinRequest, setJoinRequest] = useState<{ ammInfo: any, request: JoinAmmPoolRequest }>()\n\n    const handlerJoinInDebounce = React.useCallback(debounce(async (data, type, joinFees, ammPoolSnapshot) => {\n\n        myLog('handlerJoinInDebounce', data, type);\n\n        if (!data || !tokenMap || !data.coinA.belong || !data.coinB.belong || !ammPoolSnapshot || !joinFees) {\n            return\n        }\n\n        const { slippage } = data\n\n        const slippageReal = sdk.toBig(slippage).div(100).toString()\n\n        const isAtoB = type === 'coinA'\n\n        const acc: Lv2Account = store.getState().account\n\n        const {idIndex, marketArray, marketMap,} = store.getState().tokenMap\n\n        const {ammMap} = store.getState().amm.ammMap\n\n        const {market, amm} = getExistedMarket(marketArray, data.coinA.belong as string,\n            data.coinB.belong as string)\n\n        if (!market || !amm || !marketMap) {\n            return\n        }\n\n        const marketInfo: MarketInfo = marketMap[ market ]\n\n        const ammInfo: any = ammMap[ amm as string ]\n\n        const coinA = tokenMap[ data.coinA.belong as string ]\n        const coinB = tokenMap[ data.coinB.belong as string ]\n\n        const coinA_TV = ammPoolSnapshot.pooled[ 0 ]\n        const coinB_TV = ammPoolSnapshot.pooled[ 1 ]\n\n        const covertVal = data.coinA.tradeValue ? sdk.toBig(data.coinA.tradeValue)\n            .times('1e' + isAtoB ? coinA.decimals : coinB.decimals).toFixed(0, 0) : '0'\n        const {output, ratio} = sdk.ammPoolCalc(covertVal, isAtoB, coinA_TV, coinB_TV)\n        const rawA = data.coinA.tradeValue ? data.coinA.tradeValue.toString() : 0;\n        const rawB = data.coinB.tradeValue ? data.coinB.tradeValue.toString() : 0;\n        const rawVal = isAtoB ? rawA : rawB;\n\n        const {request} = makeJoinAmmPoolRequest(rawVal,\n            isAtoB, slippageReal, acc.accAddr, joinFees as LoopringMap<OffchainFeeInfo>,\n            ammMap[ amm ], ammPoolSnapshot, tokenMap as any, idIndex as IdMap, 0, 0)\n\n        if (isAtoB) {\n            data.coinB.tradeValue = parseFloat(toBig(request.joinTokens.pooled[ 1 ].volume)\n                .div('1e' + coinB.decimals).toFixed(marketInfo.precisionForPrice))\n        } else {\n            data.coinA.tradeValue = parseFloat(toBig(request.joinTokens.pooled[ 0 ].volume)\n                .div('1e' + coinA.decimals).toFixed(marketInfo.precisionForPrice))\n        }\n\n        setAmmJoinData({\n            coinA: data.coinA as IBData<C>,\n            coinB: data.coinB as IBData<C>,\n            slippage: slippage\n        })\n\n        setJoinRequest({\n            ammInfo,\n            request\n        })\n        // }\n\n    }, globalSetup.wait), [])\n\n    const handleJoinAmmPoolEvent = React.useCallback(async (data: AmmData<IBData<C>>, type: 'coinA' | 'coinB') => {\n        await handlerJoinInDebounce(data, type, joinFees, ammPoolSnapshot)\n    }, [joinFees, ammPoolSnapshot]);\n\n    const addToAmmCalculator = React.useCallback(async function (props\n    ) {\n\n        setJoinLoading(true);\n        if (!LoopringAPI.ammpoolAPI || !LoopringAPI.userAPI || !joinRequest) {\n            myLog(' onAmmJoin ammpoolAPI:', LoopringAPI.ammpoolAPI,\n                'joinRequest:', joinRequest)\n            setJoinLoading(false);\n            return\n        }\n\n        //todo add loading\n\n        const acc: Lv2Account = store.getState().account\n\n        const {ammInfo, request} = joinRequest\n\n        const patch: AmmPoolRequestPatch = {\n            chainId: store.getState().system.chainId as ChainId,\n            ammName: ammInfo.__rawConfig__.name,\n            poolAddress: ammInfo.address,\n            eddsaKey: acc.eddsaKey\n        }\n\n        try {\n\n            const request2: GetNextStorageIdRequest = {\n                accountId: acc.accountId,\n                sellTokenId: request.joinTokens.pooled[ 0 ].tokenId as number\n            }\n            const storageId0 = await LoopringAPI.userAPI.getNextStorageId(request2, acc.apiKey)\n\n            const request_1: GetNextStorageIdRequest = {\n                accountId: acc.accountId,\n                sellTokenId: request.joinTokens.pooled[ 1 ].tokenId as number\n            }\n            const storageId1 = await LoopringAPI.userAPI.getNextStorageId(request_1, acc.apiKey)\n\n            request.storageIds = [storageId0.offchainId, storageId1.offchainId]\n            setAmmJoinData({\n                ...ammJoinData, ...{\n                    coinA: {...ammJoinData.coinA, tradeValue: 0},\n                    coinB: {...ammJoinData.coinB, tradeValue: 0},\n                }\n            })\n            const response = await LoopringAPI.ammpoolAPI.joinAmmPool(request, patch, acc.apiKey)\n\n            myLog('join ammpool response:', response)\n\n            await delayAndUpdateWalletLayer2();\n            setJoinLoading(false);\n\n        } catch (reason) {\n            setJoinLoading(false);\n            dumpError400(reason)\n        }\n        if (props.__cache__) {\n            makeCache(props.__cache__)\n        }\n    }, [joinRequest, ammJoinData])\n\n    const onAmmDepositClickMap: typeof btnClickMap = Object.assign(deepClone(btnClickMap), {\n        [ fnType.ACTIVATED ]: [addToAmmCalculator]\n    })\n    const onAmmAddClick = React.useCallback((props: AmmData<IBData<C>>) => {\n        accountStaticCallBack(onAmmDepositClickMap, [props])\n    }, [onAmmDepositClickMap]);\n\n    // exit\n    const [exitRequest, setExitRequest] = useState<{ rawVal: '', ammInfo: any, request: ExitAmmPoolRequest }>()\n\n    // const handler = React.useCallback(async () =>,[])\n    const handleExitInDebounce = React.useCallback(debounce(async (data, type, exitFees, ammPoolSnapshot) => {\n\n        myLog('handleExitInDebounce', data, type);\n\n        if (!tokenMap || !data.coinA.belong || !data.coinB.belong || !ammPoolSnapshot || !exitFees) {\n            return\n        }\n\n        const isAtoB = type === 'coinA'\n\n        const acc: Lv2Account = store.getState().account\n\n        const {idIndex, marketArray, marketMap,} = store.getState().tokenMap\n\n        const {ammMap} = store.getState().amm.ammMap\n\n        const {market, amm} = getExistedMarket(marketArray, data.coinA.belong as string,\n            data.coinB.belong as string)\n\n        if (!market || !amm || !marketMap) {\n            return\n        }\n\n        const marketInfo: MarketInfo = marketMap[ market ]\n\n        const ammInfo: any = ammMap[ amm as string ]\n\n        const coinA = tokenMap[ data.coinA.belong as string ]\n        const coinB = tokenMap[ data.coinB.belong as string ]\n\n        const coinA_TV = ammPoolSnapshot.pooled[ 0 ]\n        const coinB_TV = ammPoolSnapshot.pooled[ 1 ]\n\n        const covertVal = data.coinA.tradeValue ? sdk.toBig(data.coinA.tradeValue)\n            .times('1e' + isAtoB ? coinA.decimals : coinB.decimals).toFixed(0, 0) : '0'\n        const {output, ratio} = sdk.ammPoolCalc(covertVal, isAtoB, coinA_TV, coinB_TV)\n\n        const rawVal = isAtoB ? data.coinA.tradeValue.toString() : data.coinB.tradeValue.toString()\n\n        const {request} = makeExitAmmPoolRequest(rawVal, isAtoB, '0.001', acc.accAddr, exitFees as LoopringMap<OffchainFeeInfo>,\n            ammMap[ amm ], ammPoolSnapshot, tokenMap as any, idIndex as IdMap, 0)\n\n        if (isAtoB) {\n            data.coinB.tradeValue = parseFloat(toBig(request.exitTokens.unPooled[ 1 ].volume)\n                .div('1e' + coinB.decimals).toFixed(marketInfo.precisionForPrice))\n        } else {\n            data.coinA.tradeValue = parseFloat(toBig(request.exitTokens.unPooled[ 0 ].volume)\n                .div('1e' + coinA.decimals).toFixed(marketInfo.precisionForPrice))\n        }\n\n        setAmmExitData({\n            coinA: data.coinA as IBData<C>,\n            coinB: data.coinB as IBData<C>,\n            slippage: 0.5\n        })\n\n        setExitRequest({\n            rawVal,\n            ammInfo,\n            request,\n        })\n        // }\n\n    }, globalSetup.wait), [])\n\n    const handleExitAmmPoolEvent = React.useCallback(async (data: AmmData<IBData<C>>, type: 'coinA' | 'coinB') => {\n        await handleExitInDebounce(data, type, exitFees, ammPoolSnapshot)\n    }, [exitFees, ammPoolSnapshot]);\n\n    useCustomDCEffect(() => {\n\n        const label: string | undefined = accountStaticCallBack(bntLabel)\n        setAmmDepositBtnI18nKey(label);\n        setAmmWithdrawBtnI18nKey(label)\n    }, [account.status, bntLabel])\n\n    const [isJoinLoading, setJoinLoading] = useState(false)\n\n    const [isExitLoading, setExitLoading] = useState(false)\n\n    const removeAmmCalculator = React.useCallback(async function (props\n    ) {\n        setExitLoading(true);\n        //TODO: onExit\n        myLog('removeAmmCalculator props:', props)\n\n        // const { exitRequest } = props\n\n        if (!LoopringAPI.ammpoolAPI || !LoopringAPI.userAPI || !exitRequest) {\n            myLog(' onExit ammpoolAPI:', LoopringAPI.ammpoolAPI,\n                'exitRequest:', exitRequest)\n            setExitLoading(false);\n            return\n        }\n\n        const acc: Lv2Account = store.getState().account\n\n        const {ammInfo, request} = exitRequest\n\n        const patch: AmmPoolRequestPatch = {\n            chainId: store.getState().system.chainId as ChainId,\n            ammName: ammInfo.__rawConfig__.name,\n            poolAddress: ammInfo.address,\n            eddsaKey: acc.eddsaKey\n        }\n\n        const burnedReq: GetNextStorageIdRequest = {\n            accountId: acc.accountId,\n            sellTokenId: request.exitTokens.burned.tokenId as number\n        }\n        const storageId0 = await LoopringAPI.userAPI.getNextStorageId(burnedReq, acc.apiKey)\n\n        request.storageId = storageId0.offchainId\n\n        try {\n\n            myLog('exit req:', request)\n            setAmmExitData({\n                ...ammExitData, ...{\n                    coinA: {...ammExitData.coinA, tradeValue: 0},\n                    coinB: {...ammExitData.coinB, tradeValue: 0},\n                }\n            })\n            const response = await LoopringAPI.ammpoolAPI.exitAmmPool(request, patch, acc.apiKey)\n\n            myLog('exit ammpool response:', response)\n\n            await delayAndUpdateWalletLayer2()\n            setExitLoading(false);\n        } catch (reason) {\n            dumpError400(reason)\n            setExitLoading(false);\n        }\n\n        // if (props.__cache__) {\n        //     makeCache(props.__cache__)\n        // }\n\n    }, [exitRequest, ammExitData])\n\n    const removeAmmClickMap: typeof btnClickMap = Object.assign(deepClone(btnClickMap), {\n        [ fnType.ACTIVATED ]: [removeAmmCalculator]\n    })\n\n    const onAmmRemoveClick = React.useCallback((props: AmmData<IBData<C>>) => {\n\n        myLog('onAmmRemoveClick, exitRequest:', exitRequest, ' ammExitData:', ammExitData)\n        accountStaticCallBack(removeAmmClickMap, [props])\n    }, [exitRequest, ammExitData]);\n\n    React.useEffect(() => {\n        if (snapShotData) {\n            initAmmData(pair)\n        }\n    }, [snapShotData, pair, walletMap]);\n\n\n    return {\n        ammCalcData,\n        ammJoinData,\n        ammExitData,\n        isJoinLoading,\n        isExitLoading,\n        handleJoinAmmPoolEvent,\n        handleExitAmmPoolEvent,\n        onAmmRemoveClick,\n        onAmmAddClick,\n        ammDepositBtnI18nKey,\n        ammWithdrawBtnI18nKey,\n    }\n}","import React from \"react\";\nimport { AmmActivity, CoinInfo, TradeFloat, WalletMap } from \"@loopring-web/common-resources\";\nimport { useTokenMap } from \"stores/token\";\nimport { useRouteMatch } from 'react-router';\nimport { AmmDetailStore, useAmmMap } from '../../../stores/Amm/AmmMap';\nimport { useWalletLayer2 } from '../../../stores/walletLayer2';\nimport { makeTickView, makeWalletLayer2, pairDetailBlock, WalletMapExtend } from '../../../hooks/help';\nimport { AmmPoolSnapshot, AmmUserRewardMap, getExistedMarket, TickerData } from 'loopring-sdk';\nimport { deepClone } from '../../../utils/obj_tools';\nimport { getUserAmmTransaction, makeMyAmmMarketArray } from '../../../hooks/help/marketTable';\nimport { AmmRecordRow } from '@loopring-web/component-lib';\nimport { AmmPoolActivityRule, LoopringMap } from 'loopring-sdk/dist/defs/loopring_defs';\nimport { MyAmmLP } from '@loopring-web/common-resources';\nimport { useSystem } from '../../../stores/system';\nimport { makeMyAmmWithSnapshot } from '../../../hooks/help/makeUIAmmActivityMap';\nimport store from '../../../stores';\nimport { useUserRewards } from '../../../stores/userRewards';\nimport { LoopringAPI } from 'stores/apis/api';\nimport { TradingInterval } from 'loopring-sdk'\n\nconst makeAmmDetailExtendsActivityMap = ({ammMap, coinMap, ammActivityMap, ammKey}: any) => {\n\n    if (ammMap && coinMap) {\n        let ammDetail = deepClone(ammMap[ ammKey as string ]);\n        const ammActivity = ammActivityMap [ ammKey as string ];\n\n        if (ammDetail && ammDetail.coinA) {\n            ammDetail.myCoinA = coinMap[ ammDetail.coinA ];\n            ammDetail.myCoinB = coinMap[ ammDetail.coinB ];\n            ammDetail[ 'activity' ] = ammActivity ? ammActivity : {};\n        }\n        return ammDetail;\n    }\n}\ntype PgAmmDetail<C extends { [ key: string ]: any }> = AmmDetailStore<C> & {\n    myCoinA: CoinInfo<C>,\n    myCoinB: CoinInfo<C>,\n    activity: AmmActivity<C> | undefined\n}\n\nexport type ammHistoryItem = {\n    close: number;\n    timeStamp: number;\n}\n\nexport const useCoinPair = <C extends { [ key: string ]: any }>(ammActivityMap: LoopringMap<LoopringMap<AmmPoolActivityRule[]>>) => {\n    const match: any = useRouteMatch(\"/liquidity/pools/coinPair/:symbol\")\n    const {coinMap, tokenMap, marketArray} = useTokenMap();\n    const {faitPrices} = useSystem();\n    const ammMapState = useAmmMap();\n    const useUserRewardsState = useUserRewards()\n\n    // const {account} = useAccount();\n\n\n    const {ammMap, getAmmMap} = ammMapState;\n\n    // const {ammMap,updateAmmMap} = useAmmMap();\n    const walletLayer2State = useWalletLayer2();\n    const [walletMap, setWalletMap] = React.useState<WalletMapExtend<C> | undefined>(undefined);\n    // const [ammRecordArray, setAmmRecordArray] = React.useState<AmmRecordRow<C>[]>([]);\n    const [ammMarketArray, setAmmMarketArray] = React.useState<AmmRecordRow<C>[]>([]);\n\n\n    const [myAmmMarketArray, setMyAmmMarketArray] = React.useState<AmmRecordRow<C>[]>([]);\n    const [ammUserRewardMap, setAmmUserRewardMap] = React.useState<AmmUserRewardMap | undefined>(undefined);\n    const [snapShotData, setSnapShotData] = React.useState<{\n        tickerData: TickerData | undefined\n        ammPoolsBalance: AmmPoolSnapshot | undefined\n    } | undefined>(undefined);\n\n    const [myAmm, setMyAmm] = React.useState<MyAmmLP<C>>(\n        {\n            feeA: 0,\n            feeB: 0,\n            feeDollar: 0,\n            feeYuan: 0,\n            reward: 0,\n            rewardToken: undefined as any,\n            balanceA: 0,\n            balanceB: 0,\n            balanceYuan: 0,\n            balanceDollar: 0,\n        })\n    // const [ammPoolsBalance, setAmmpoolsbalance] = React.useState<AmmPoolSnapshot|undefined>(undefined);\n    const [coinPairInfo, setCoinPairInfo] = React.useState<PgAmmDetail<C>>({\n        myCoinA: undefined,\n        myCoinB: undefined,\n        activity: undefined,\n        totalRewards: undefined,\n        amountDollar: undefined,\n        amountYuan: undefined,\n        totalLPToken: undefined,\n        totalA: undefined,\n        totalB: undefined,\n        rewardToken: undefined,\n        rewardValue: undefined,\n        feeA: undefined,\n        feeB: undefined,\n        isNew: undefined,\n        isActivity: undefined,\n        APY: undefined\n    } as unknown as PgAmmDetail<C>);\n    const [tradeFloat, setTradeFloat] = React.useState<TradeFloat | undefined>(undefined);\n    const [pair, setPair] = React.useState<{ coinAInfo: CoinInfo<C> | undefined, coinBInfo: CoinInfo<C> | undefined }>({\n        coinAInfo: undefined,\n        coinBInfo: undefined,\n    });\n    const [pairHistory, setPairHistory] = React.useState<ammHistoryItem[]>([])\n\n    const walletLayer2DoIt = React.useCallback((market) => {\n        const {walletMap: _walletMap} = makeWalletLayer2();\n\n        setWalletMap(_walletMap as WalletMapExtend<any>)\n        if (_walletMap) {\n            getUserAmmTransaction()?.then((marketTrades) => {\n                let _myTradeArray = makeMyAmmMarketArray(market, marketTrades)\n                setMyAmmMarketArray(_myTradeArray ? _myTradeArray : [])\n            })\n        }\n        return _walletMap\n    }, [makeWalletLayer2, getUserAmmTransaction, makeMyAmmMarketArray, marketArray, pair])\n\n    const getPairList = React.useCallback(async () => {\n        if (LoopringAPI.exchangeAPI && coinPairInfo.coinA && coinPairInfo.coinB) {\n            const { myCoinA, myCoinB } = coinPairInfo\n            const market = `${myCoinA?.name}-${myCoinB?.name}`\n            const ammList = await LoopringAPI.exchangeAPI.getMixCandlestick({\n                market: market,\n                interval: TradingInterval.d1,\n                limit: 30\n            })\n            const formattedPairHistory = ammList.candlesticks.map(o => ({\n                close: o.close,\n                timeStamp: o.timestamp\n            })).reverse()\n            setPairHistory(formattedPairHistory)\n        }\n    }, [coinPairInfo])\n\n    React.useEffect(() => {\n        getPairList()\n    }, [getPairList])\n\n    React.useEffect(() => {\n        const coinKey = match?.params.symbol ?? undefined;\n        let _tradeFloat: Partial<TradeFloat> = {}\n        const [, coinA, coinB] = coinKey.match(/(\\w+)-(\\w+)/i)\n        let {\n            amm,\n            market\n        } = getExistedMarket(marketArray, coinA, coinB);\n\n        const _coinPairInfo = makeAmmDetailExtendsActivityMap({ammMap, coinMap, ammActivityMap, ammKey: amm})\n        setCoinPairInfo(_coinPairInfo ? _coinPairInfo : {})\n\n        if (coinMap) {\n            setPair({\n                coinAInfo: coinMap[ coinA ],\n                coinBInfo: coinMap[ coinB ]\n            })\n        }\n\n        // let _walletMap: WalletMapExtend<C>|undefined = undefined\n        if (walletLayer2State.walletLayer2) {\n            walletLayer2DoIt(market);\n        }\n\n        if (amm && market && ammMap) {\n            //TODO should add it into websocket\n            getAmmMap();\n            let apiList = [\n                pairDetailBlock({coinKey: market, ammKey: amm, ammMap}),\n                // LoopringAPI.ammpoolAPI.getAmmPoolSnapshot({poolAddress: ammMap[ ammKey ].address}),\n                // LoopringAPI.exchangeAPI.getMixTicker({market: coinKey})])\n            ];\n            // @ts-ignore\n            Promise.all([...apiList]).then(\n                ([{ammPoolsBalance, tickMap}\n                     //  ,ammUserRewardMap\n                 ]: any[]) => {\n                    if (tokenMap) {\n                        const _snapShotData = {\n                            tickerData: tickMap[ market ],\n                            ammPoolsBalance: ammPoolsBalance,\n                        }\n                        _tradeFloat = makeTickView(tickMap[ market ] ? tickMap[ market ] : {})\n                        setTradeFloat(_tradeFloat as TradeFloat);\n                        setCoinPairInfo({..._coinPairInfo})\n                        setSnapShotData(_snapShotData)\n\n                    }\n                }).catch((error) => {\n                console.log(error);\n                throw  Error\n            })\n        }\n\n    }, []);\n\n    React.useEffect(() => {\n        const {market} = getExistedMarket(marketArray, pair.coinAInfo?.simpleName as string, pair.coinBInfo?.simpleName as string);\n        if (market && snapShotData && snapShotData.ammPoolsBalance) {\n            switch (walletLayer2State.status) {\n                case \"ERROR\":\n                    walletLayer2State.statusUnset();\n                    break;\n                case \"DONE\":\n                    walletLayer2State.statusUnset();\n                    const _walletMap = walletLayer2DoIt(market);\n                    const _myAmm: MyAmmLP<C> = makeMyAmmWithSnapshot(market, _walletMap, ammUserRewardMap, snapShotData);\n                    setMyAmm(_myAmm)\n                    break;\n                default:\n                    break;\n\n            }\n        }\n\n    }, [walletLayer2State.status, ammUserRewardMap])\n\n    React.useEffect(() => {\n        const {market} = getExistedMarket(marketArray, pair.coinAInfo?.simpleName as string, pair.coinBInfo?.simpleName as string);\n        if (market) {\n            switch (useUserRewardsState.status) {\n                case \"ERROR\":\n                    useUserRewardsState.statusUnset();\n                    break;\n                case \"DONE\":\n                    // getAmmPoolUserRewards().then((ammUserRewardMap)=>{\n                    const {userRewardsMap} = store.getState().userRewardsMap\n                    setAmmUserRewardMap(userRewardsMap)\n                    const _myAmm: MyAmmLP<C> = makeMyAmmWithSnapshot(market, walletMap, ammUserRewardMap, snapShotData);\n                    setMyAmm(_myAmm);\n                    break;\n                default:\n                    break;\n\n            }\n        }\n\n    }, [useUserRewardsState.status])\n\n    React.useEffect(() => {\n        if (ammMapState.status === \"ERROR\") {\n            ammMapState.statusUnset();\n        } else if (ammMapState.status === \"DONE\") {\n            ammMapState.statusUnset();\n            if (ammMapState.ammMap && pair.coinAInfo?.simpleName && pair.coinBInfo?.simpleName) {\n                const _coinPairInfo = makeAmmDetailExtendsActivityMap(\n                    {\n                        ammMap,\n                        coinMap,\n                        ammActivityMap,\n                        ammKey: 'AMM-' + pair.coinAInfo.simpleName + pair.coinBInfo.simpleName\n                    })\n                setCoinPairInfo({\n                    ...coinPairInfo, ..._coinPairInfo,\n                    tradeFloat: coinPairInfo.tradeFloat\n                })\n\n            }\n\n            // tokenState.statusUnset()\n            // setState('DONE');\n        }\n    }, [ammMapState.status, ammMapState.ammMap, pair, ammActivityMap, tokenMap])\n\n\n    return {\n        walletMap,\n        myAmm,\n        // tickerData,\n        coinPairInfo,\n        snapShotData,\n        // ammPoolsBalance,\n        pair,\n        tradeFloat,\n        ammMarketArray,\n        myAmmMarketArray,\n        pairHistory,\n    }\n}","import React from 'react';\nimport { WithTranslation, withTranslation } from 'react-i18next';\nimport { AmmRecordTable, ChartType, ScaleAreaChart, TradeTitle, useSettings } from '@loopring-web/component-lib';\nimport {\n    AvatarCoinStyled,\n    Currency,\n    EmptyValueTag,\n    getThousandFormattedNumbers,\n    PriceTag,\n    unit\n} from '@loopring-web/common-resources';\nimport { Avatar, Box, Breadcrumbs, Grid, Link, Typography } from '@material-ui/core';\nimport { AmmPanelView } from '../AmmPanel';\nimport moment from 'moment';\nimport styled from '@emotion/styled/';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\n\nimport { useCoinPair } from './hooks';\nimport { AmmPoolActivityRule, LoopringMap } from 'loopring-sdk/dist/defs/loopring_defs';\nimport { StylePaper } from 'pages/styled';\n\n\n//******************** page code ************************//\n//  ${({theme}) => theme.border.defaultFrame({c_key: 'blur'})};\nconst BoxStyled = styled(Box)`\n  flex: 1;\n  background-color: ${({theme}) => theme.colorBase.background().default};\n  border-radius: ${({theme}) => theme.unit}px;\n  padding: ${({theme}) => theme.unit * 2}px;\n  height: 120px;\n  // min-width: 160px;\n  max-width: 210px;\n  // & .MuiAvatar-root {\n    //     height: ${({theme}) => theme.fontDefault.h4};\n    //     width: ${({theme}) => theme.fontDefault.h4};\n  // }\n`;\n\nconst BoxTopStyled = styled(Box)`\n  background-color: ${({theme}) => theme.colorBase.background().default};\n  border-radius: ${({theme}) => theme.unit}px;\n  padding: ${({theme}) => theme.unit * 2}px;\n  width: var(--swap-box-width);\n  box-sizing: border-box;\n  //height: 120px;\n  //min-width: 160px;\n  // & .MuiAvatar-root {\n    //   height: ${({theme}) => theme.fontDefault.h4};\n    //   width: ${({theme}) => theme.fontDefault.h4};\n  // }\n`;\n// const StyleWrapper = styled(Box)`\n//   //position: relative;\n//   //width: 100%;\n//   background-color: ${({theme}) => theme.colorBase.background().default};\n//   border-radius: ${({theme}) => theme.unit}px;\n// ` as typeof Grid\n\n\nconst applyProps = (index: number) => {\n    return {\n        id: `simple-tab-${index}`,\n        'aria-controls': `tabpanel-${index}`,\n    }\n}\n\nexport const CoinPairPanel = withTranslation('common')(<R extends { [ key: string ]: any }, I extends { [ key: string ]: any }>\n({t, ammActivityMap, ...rest}:\n     WithTranslation & { ammActivityMap: LoopringMap<LoopringMap<AmmPoolActivityRule[]>> | undefined } & any) => {    //ActivityMap<I, I>\n    const {currency} = useSettings();\n    const {\n        tradeFloat,\n        snapShotData,\n        pair,\n        coinPairInfo,\n        walletMap,\n        ammMarketArray,\n        myAmmMarketArray,\n        myAmm,\n        pairHistory,\n    } = useCoinPair({ammActivityMap});\n    const [tabIndex, setTabIndex] = React.useState<0 | 1>(0);\n    const [page, setPage] = React.useState(rest?.page ? rest.page : 1);\n    const handleChange = (event: any, newValue: 0 | 1) => {\n        setTabIndex(newValue);\n        setPage(1);\n    }\n    const _handlePageChange = React.useCallback((page: number) => {\n        setPage(page);\n    }, [])\n    // const sellIconHasLoaded = useImage(coinPairInfo.myCoinA?.icon ? coinPairInfo.myCoinA?.icon : '').hasLoaded;\n    // const buyIconHasLoaded = useImage(coinPairInfo.myCoinB?.icon ? coinPairInfo.myCoinB?.icon : '').hasLoaded;\n    const {coinJson} = useSettings();\n    const coinAIcon: any = coinJson [ coinPairInfo.myCoinA?.simpleName ];\n    const coinBIcon: any = coinJson [ coinPairInfo.myCoinB?.simpleName ];\n\n    return <>\n\n        <Grid container>\n            <Grid item xs={8}>\n                <Breadcrumbs aria-label=\"breadcrumb\">\n                    <Link color=\"textSecondary\" href=\"/#/liquidity/pools\">\n                        {t('labelAmmList')}\n                    </Link>\n                    <Typography color={'textSecondary'} display={'flex'} alignItems={'center'}\n                                justifyContent={'center'}\n                    >{pair.coinAInfo?.simpleName}-{pair.coinBInfo?.simpleName}</Typography>\n                </Breadcrumbs>\n                <Grid item xs={7} marginTop={2}>\n                    <TradeTitle {...{\n                        ...rest, t,\n                        ...pair,\n                        tradeFloat,\n                        isNew: false\n                    }}></TradeTitle>\n                </Grid>\n            </Grid>\n            <Grid item xs={4} alignItems={'center'} justifyContent={'flex-end'} display={'flex'}>\n                {/*{typeof coinPairInfo.isActivity === 'undefined'? '':*/}\n                <BoxTopStyled paddingY={3} paddingX={1 / 2 * 5} display={'flex'}\n                              flexDirection={'column'}>\n                    <Box display={'flex'} flexDirection={'row'} justifyContent={'space-between'}>\n                        <Typography display={'flex'} flexDirection={'column'} component={'div'}>\n                            <Typography variant={'body2'} component={'h5'} color={'textSecondary'}>\n                                {t('labelReward')}\n                            </Typography>\n                            <Typography variant={'body1'} component={'span'} color={'textPrimary'}>\n                                {typeof coinPairInfo.isActivity === 'undefined' ? EmptyValueTag : <>\n                                    <Typography\n                                        component={'span'}>{coinPairInfo.activity ? getThousandFormattedNumbers(coinPairInfo.activity.totalRewards) : EmptyValueTag} </Typography>\n                                    <Typography\n                                        component={'span'}>{coinPairInfo.activity?.rewardToken?.simpleName}</Typography>\n                                </>}\n                            </Typography>\n                        </Typography>\n                        <Typography display={'flex'} flexDirection={'column'} alignItems={'flex-end'}\n                                    component={'div'}>\n                            <Typography variant={'body2'} component={'h5'} color={'textSecondary'}>\n                                {t('labelMyReward')}\n                            </Typography>\n                            <Typography variant={'body1'} component={'span'} color={'textPrimary'}>\n                                {/*{typeof coinPairInfo.isActivity === 'undefined' ? EmptyValueTag : <>*/}\n                                {typeof myAmm.reward === 'undefined' ? EmptyValueTag : <>\n\n                                    <Typography\n                                        component={'span'}> {getThousandFormattedNumbers(myAmm.reward)} </Typography>\n                                    <Typography\n                                        component={'span'}> {coinPairInfo.activity?.rewardToken?.simpleName}</Typography></>}\n\n                            </Typography>\n                        </Typography>\n                    </Box>\n                    <Typography alignSelf={'flex-start'} variant={'body2'} color={'textSecondary'}\n                                component=\"span\" marginTop={1}>\n                        {typeof coinPairInfo.isActivity === 'undefined' ? t('labelNoActiveEvent')\n                            : <>\n                                {t('labelDate')} :\n                                <> {moment(coinPairInfo.activity?.duration.from).format('L') + ' - ' + moment(coinPairInfo.activity?.duration.to).format('L')}</>\n                            </>\n                        }\n                    </Typography>\n                </BoxTopStyled>\n                {/*}*/}\n\n\n            </Grid>\n            {/*<Grid item xs={4} alignItems={'center'} justifyContent={'flex-end'} display={'flex'}>*/}\n            {/*    <Link href=\"/#/liquidity/pools\" variant={'h5'}>*/}\n            {/*        {t('labelBack')}*/}\n            {/*    </Link>*/}\n            {/*</Grid>*/}\n        </Grid>\n        {/*<Grid container marginTop={3}>*/}\n        {/*   */}\n        {/*</Grid>*/}\n        <Box flex={1} display={'flex'} alignItems={'stretch'} flexDirection=\"row\" marginTop={3}>\n            <Box flex={1} display={'flex'} flexDirection={'column'} marginRight={3} justifyContent={'space-between'}>\n                <Box flex={1} width={'101%'}>\n                    <ScaleAreaChart type={ChartType.Trend} data={pairHistory}/>\n                </Box>\n                <Box display={'flex'} flexDirection={'row'} justifyContent={'space-between'}>\n                    <BoxStyled paddingX={2} display={'flex'} flexDirection={'column'}>\n                        <Typography component={'p'} color={'textSecondary'} display={'flex'} marginBottom={1 / 2 * 3}\n                        >\n                            {t('labelAmmTotalToken')}\n                        </Typography>\n                        <Typography component={'span'} display={'flex'} flexDirection={'row'}\n                                    justifyContent={'space-between'} alignItems={'center'}\n                                    style={{textTransform: 'capitalize'}} color={'textPrimary'}>\n                            <Box component={'span'} className={'logo-icon'} height={'var(--list-menu-coin-size)'}\n                                 width={'var(--list-menu-coin-size)'} alignItems={'center'} justifyContent={'center'}>\n                                {coinAIcon ?\n                                    <AvatarCoinStyled imgx={coinAIcon.x} imgy={coinAIcon.y}\n                                                      imgheight={coinAIcon.height}\n                                                      imgwidth={coinAIcon.width} size={24}\n                                                      variant=\"circular\"\n                                                      alt={coinPairInfo?.myCoinA?.simpleName as string}\n                                        // src={sellData?.icon}\n                                                      src={'data:image/svg+xml;utf8,' + '<svg width=\"36\" height=\"36\" viewBox=\"0 0 36 36\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M0 0H36V36H0V0Z\"/></svg>'}/>\n                                    : <Avatar variant=\"circular\" alt={coinPairInfo?.myCoinA?.simpleName as string}\n                                              style={{\n                                                  height: 'var(--list-menu-coin-size))',\n                                                  width: 'var(--list-menu-coin-size)'\n                                              }}\n                                        // src={sellData?.icon}\n                                              src={'static/images/icon-default.png'}/>\n                                }</Box>\n                            <Typography justifyContent={'center'} display={'flex'}>\n                                <Typography component={'span'} alignSelf={'right'} height={24} lineHeight={'24px'}>\n                                    {getThousandFormattedNumbers(coinPairInfo.totalA, 6)}</Typography>\n                                <Typography component={'span'} marginLeft={1} alignSelf={'right'} height={24} lineHeight={'24px'}>\n                                    {/*<HiddenHidden>{t('labelLPTotal')}</Hidden>*/}\n                                    {coinPairInfo.myCoinA?.simpleName}\n                                </Typography>\n\n                            </Typography>\n\n                        </Typography>\n                        <Typography component={'span'} display={'flex'} flexDirection={'row'}\n                                    justifyContent={'space-between'} alignItems={'center'} marginTop={1}\n                                    style={{textTransform: 'capitalize'}}>\n                            {/*<Typography component={'span'} marginRight={1 / 2}*/}\n                            {/*            color={'textSecondary'}>*/}\n                            {/*    */}\n                            {/*    /!*<Avatar variant=\"square\" sizes={'small'} alt={'coinLogo'}*!/*/}\n                            {/*    /!*    // src={coinBInfo?.icon}*!/*/}\n                            {/*    /!*        src={buyIconHasLoaded ? coinPairInfo?.myCoinB?.icon : 'static/images/icon-default.png'}/>*!/*/}\n                            {/*</Typography>*/}\n                            <Box component={'span'} className={'logo-icon'} height={'var(--list-menu-coin-size)'}\n                                 width={'var(--list-menu-coin-size)'} alignItems={'center'}\n                                 justifyContent={'center'}>{coinBIcon ?\n                                <AvatarCoinStyled imgx={coinBIcon.x} imgy={coinBIcon.y} imgheight={coinBIcon.height}\n                                                  imgwidth={coinBIcon.width} size={24}\n                                                  variant=\"circular\" alt={coinPairInfo?.myCoinB?.simpleName as string}\n                                    // src={sellData?.icon}\n                                                  src={'data:image/svg+xml;utf8,' + '<svg width=\"36\" height=\"36\" viewBox=\"0 0 36 36\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M0 0H36V36H0V0Z\"/></svg>'}/>\n                                : <Avatar variant=\"circular\" alt={coinPairInfo?.myCoinB?.simpleName as string} style={{\n                                    height: 'var(--list-menu-coin-size)',\n                                    width: 'var(--list-menu-coin-size)'\n                                }}\n                                    // src={sellData?.icon}\n                                          src={'static/images/icon-default.png'}/>}</Box>\n                            <Typography justifyContent={'center'} display={'flex'}>\n                                <Typography component={'span'} alignSelf={'right'} height={24} lineHeight={'24px'}>\n                                    {getThousandFormattedNumbers(coinPairInfo.totalB, 6)}</Typography>\n                                <Typography component={'span'} marginLeft={1} alignSelf={'right'} height={24} lineHeight={'24px'}>\n                                    {/*<Hidden>{t('labelLPTotal')}</Hidden>*/}\n                                    {coinPairInfo.myCoinB?.simpleName}\n                                </Typography>\n\n                            </Typography>\n\n                        </Typography>\n\n                    </BoxStyled>\n                    <BoxStyled paddingX={2} display={'flex'} flexDirection={'column'}>\n                        <Typography component={'p'} color={'textSecondary'} display={'flex'}\n                        >\n                            {t('label24Volume')}\n                        </Typography>\n                        <Typography variant={'h4'} marginTop={4}\n                                    component={'span'}> {typeof coinPairInfo.amountDollar === 'undefined' ? EmptyValueTag :\n                            currency === Currency.dollar ? PriceTag.Dollar + getThousandFormattedNumbers(coinPairInfo.amountDollar, 4) : PriceTag.Yuan + getThousandFormattedNumbers(coinPairInfo.amountYuan ? coinPairInfo.amountYuan : 0, 4)}\n                        </Typography>\n\n                    </BoxStyled>\n                    <BoxStyled paddingX={2} display={'flex'} flexDirection={'column'}>\n                        <Typography component={'p'} color={'textSecondary'} display={'flex'}\n                        >\n                            {t('labelTVL')}\n                        </Typography>\n\n\n                        <Typography variant={'h4'} marginTop={4}\n                                    component={'span'}>\n                            {currency === Currency.dollar ? PriceTag.Dollar + getThousandFormattedNumbers(coinPairInfo.tradeFloat && coinPairInfo.tradeFloat.priceDollar ? coinPairInfo.tradeFloat.priceDollar as number : 0, 4)\n                                : PriceTag.Yuan + getThousandFormattedNumbers(coinPairInfo.tradeFloat && coinPairInfo.tradeFloat.priceYuan ? coinPairInfo.tradeFloat.priceYuan as number : 0, 4)}\n                        </Typography>\n\n                    </BoxStyled>\n                    <BoxStyled paddingX={2} display={'flex'} flexDirection={'column'}>\n                        <Typography component={'p'} color={'textSecondary'} display={'flex'}\n                        >\n                            {t('labelAPY')}\n                        </Typography>\n                        <Typography variant={'h4'} marginTop={4}\n                                    component={'span'}> {coinPairInfo.APY ? coinPairInfo.APY : EmptyValueTag}%\n                        </Typography>\n                    </BoxStyled>\n                </Box>\n            </Box>\n            <Box display={'flex'}>\n                <AmmPanelView pair={pair} walletMap={walletMap} snapShotData={snapShotData}/>\n            </Box>\n        </Box>\n\n        <Grid container marginY={3}>\n            <Grid item xs={12}>\n                <Tabs value={tabIndex}\n                      onChange={handleChange}\n                      aria-label=\"tabs switch\">\n                    <Tab label={t('labelAll')} {...applyProps(0)} />\n                    <Tab label={t('labelMe')} {...applyProps(1)} />\n                </Tabs>\n                <StylePaper style={{marginTop: `${unit * 2}px`}}>\n                    {/*ammRecordArray*/}\n                    {tabIndex === 0 ? <AmmRecordTable\n                        rawData={ammMarketArray}\n                        handlePageChange={_handlePageChange} page={page}\n                    /> : <AmmRecordTable rawData={myAmmMarketArray} handlePageChange={_handlePageChange}\n                                         page={page}/>}\n                </StylePaper>\n            </Grid>\n\n        </Grid>\n\n    </>\n\n})\n\n\n\n\n\n\n\n","import { AmmProps } from '@loopring-web/component-lib';\nimport React from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { AmmCardProps, AmmData, AmmInData, IBData } from '@loopring-web/common-resources';\nimport { AmmCard } from '@loopring-web/component-lib';\nimport { Grid } from '@material-ui/core';\nimport { useAmmMiningUI } from './hook';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport { withTranslation } from 'react-i18next';\nimport { AmmPoolActivityRule, LoopringMap } from 'loopring-sdk/dist/defs/loopring_defs';\n\ntype ClickHandler = {\n    handleClick: (pair: string) => void\n}\n\nconst AmmCardWrap = React.memo(React.forwardRef((props:AmmCardProps<{[key:string]:any}> & ClickHandler ,ref) => {\n    const pair = `${props.coinAInfo.name}-${props.coinBInfo.name}`\n    return props? <AmmCard ref={ref} {...props} handleClick={() => props.handleClick(pair)} /> :<></>\n}));\n\nconst AmmList = <I extends {[key:string]:any}>({ammActivityViewMap}: {ammActivityViewMap: Array<AmmCardProps<I>> })=>{\n    let history = useHistory();\n    const jumpTo = React.useCallback((pair: string) => {\n        if (history) {\n            history.push(`/liquidity/pools/coinPair/${pair}`)\n        }\n    }, [history])\n    \n    return  <>{ammActivityViewMap.map((item:AmmCardProps<I>,index)=>\n        <Grid item xs={12} sm={6} lg={4} key={index}>\n            <AmmCardWrap handleClick={jumpTo} {...item as any} />\n        </Grid>\n    ) }</>\n}\n\nexport const AmmMiningView =  withTranslation('common')(<T extends AmmData<C extends IBData<I> ? C : IBData<I>>, I,\n    ACD extends AmmInData<I>,\n    C = IBData<I>>({ammProps,t,ammActivityMap,...rest}: { ammProps:AmmProps<T ,I,ACD>,\n    ammActivityMap: LoopringMap<LoopringMap<AmmPoolActivityRule[]>>|undefined,   \n} & any) => {\n    const { ammActivityViewMap,\n        ammActivityPastViewMap} = useAmmMiningUI({ammActivityMap});\n    const [tabIndex,setTabIndex] = React.useState<0|1>(0);\n    const handleChange = (event: any, newValue: 0|1) => {\n        setTabIndex(newValue);\n    }\n\n    return <Grid container spacing={2}>\n        <Grid item xs={12}>\n            <Tabs value={tabIndex}\n                  onChange={handleChange}\n                  aria-label=\"tabs switch\">\n                <Tab label={t('labelCurrentActivities')}  />\n                <Tab label={t('labelPastActivities')}  />\n            </Tabs>\n        </Grid>\n        <AmmList ammActivityViewMap={tabIndex === 0 ? ammActivityViewMap : ammActivityPastViewMap}/>\n    </Grid>\n})\n","import { AmmCardProps } from '@loopring-web/common-resources';\nimport { AmmPoolActivityRule, AmmPoolActivityStatus,LoopringMap } from 'loopring-sdk';\nimport React from 'react';\nimport {\n    makeUIAmmActivityMap\n} from '../../../hooks/help';\n\nimport { useUserRewards } from '../../../stores/userRewards';\n\nexport const useAmmMiningUI = <R extends { [ key: string ]: any }, I extends { [ key: string ]: any }>(\n    {\n        ammActivityMap\n    }: { ammActivityMap: LoopringMap<LoopringMap<AmmPoolActivityRule[]>> | undefined }\n): {\n    ammActivityViewMap: Array<AmmCardProps<I>>,\n    ammActivityPastViewMap: Array<AmmCardProps<I>>\n} => {\n    const  userRewardsMapState =  useUserRewards();// store.getState().userRewardsMap\n    // const {coinMap} = useTokenMap();\n    // const ammMapState = useAmmMap();\n    // const walletLayer2State = useWalletLayer2();\n    const [ammActivityViewMap, setAmmActivityViewMap] = React.useState<Array<AmmCardProps<I>>>([]);\n\n\n    const [ammActivityPastViewMap, setAmmActivityPastViewMap] = React.useState<Array<AmmCardProps<I>>>(\n        []);\n    // const [ammUserRewardMap, setAmmUserRewardMap] = React.useState<AmmUserRewardMap>(\n    //     {});\n\n\n    // );\n    React.useEffect(() => {\n        if(ammActivityMap && Object.keys(ammActivityMap).length>0 ){\n\n           // getAmmPoolUserRewards().then((ammUserRewardMap)=>{\n                // setAmmUserRewardMap(ammUserRewardMap as AmmUserRewardMap);\n                setAmmActivityViewMap(makeUIAmmActivityMap(\n                    {\n                        ammActivityMap,\n                        type: 'AMM_MINING',\n                        ammPoolActivityStatus: [AmmPoolActivityStatus.NotStarted, AmmPoolActivityStatus.InProgress]\n                    }, userRewardsMapState.userRewardsMap\n                ));\n                setAmmActivityPastViewMap(\n                    makeUIAmmActivityMap(\n                        {\n                            ammActivityMap,\n                            type: 'AMM_MINING',\n                            ammPoolActivityStatus: [AmmPoolActivityStatus.EndOfGame]\n                        }, userRewardsMapState.userRewardsMap\n                    ))\n          //  })\n        }\n\n    },[ammActivityMap])\n    React.useEffect(() => {\n            if (userRewardsMapState.status === \"ERROR\") {\n                //TODO: solve error\n                userRewardsMapState.statusUnset();\n            } else if (userRewardsMapState.status === \"DONE\") {\n                userRewardsMapState.statusUnset();\n                setAmmActivityViewMap(\n                    makeUIAmmActivityMap(\n                    {\n                        ammActivityMap,\n                        type: 'AMM_MINING',\n                        ammPoolActivityStatus: [AmmPoolActivityStatus.NotStarted, AmmPoolActivityStatus.InProgress]\n                    }, userRewardsMapState.userRewardsMap\n                ));\n                setAmmActivityPastViewMap(\n                    makeUIAmmActivityMap(\n                        {\n                            ammActivityMap,\n                            type: 'AMM_MINING',\n                            ammPoolActivityStatus: [AmmPoolActivityStatus.EndOfGame]\n                        }, userRewardsMapState.userRewardsMap\n                    ))\n                // if (userRewardsMapState.ammMap) {\n                //     setAmmActivityViewMap(\n                //         makeUIAmmActivityMap(\n                //             {\n                //                 ammActivityMap,\n                //                 type: 'AMM_MINING',\n                //                 ammPoolActivityStatus: [AmmPoolActivityStatus.NotStarted, AmmPoolActivityStatus.InProgress]\n                //             }, ammUserRewardMap\n                //         ))\n                //     setAmmActivityPastViewMap(\n                //         makeUIAmmActivityMap(\n                //             {\n                //                 ammActivityMap,\n                //                 type: 'AMM_MINING',\n                //                 ammPoolActivityStatus: [AmmPoolActivityStatus.EndOfGame]\n                //             }, ammUserRewardMap\n                //         ))\n                //\n                // }\n\n            }\n        },\n        [userRewardsMapState.status]\n    )\n\n\n    return {\n        ammActivityViewMap,\n        ammActivityPastViewMap\n    }\n\n}\n","import React from 'react'\nimport styled from '@emotion/styled'\nimport { Box, Grid, Typography } from '@material-ui/core'\nimport { WithTranslation, withTranslation } from 'react-i18next'\nimport { useHistory } from 'react-router-dom'\nimport {\n    AmmRecordTable,\n    AmmTradeType,\n    ChartType,\n    ScaleAreaChart,\n    TablePaddingX,\n    ToggleButtonGroup,\n    useSettings ,\n    MyPoolTable\n} from '@loopring-web/component-lib'\nimport {\n    Currency, EmptyValueTag,\n    getThousandFormattedNumbers,\n    PriceTag\n} from '@loopring-web/common-resources';\n\nimport { AmmPoolActivityRule, LoopringMap } from 'loopring-sdk/dist/defs/loopring_defs';\nimport { useOverview } from './hook';\nimport { TableWrapStyled } from 'pages/styled'\n\n\n//TODO: FIXED:  demo data\n\n\nconst toggleData = [\n    {value: '24 H', key: '24 H'},\n    {value: '1 W', key: '1 W'},\n    {value: 'ALL', key: 'ALL'},\n]\n\nconst StylePaper = styled(Box)`\n  width: 100%;\n  height: 100%;\n  flex: 1;\n` as typeof Box;\n\nconst StyleWrapper = styled(Grid)`\n  position: relative;\n  width: 100%;\n  background-color: ${({theme}) => theme.colorBase.background().default};\n  border-radius: ${({theme}) => theme.unit}px;\n` as typeof Grid\n\n\n\nconst StyledBtnGroupWrapper = styled(Box)`\n  position: absolute;\n  z-index: 99;\n  top: ${({theme}) => theme.unit}px;\n  width: 100%;\n` as typeof Box\n\n\nexport const MyLiquidity = withTranslation('common')(\n    <R extends { [ key: string ]: any }, I extends { [ key: string ]: any }>\n    ({t, ammActivityMap, ...rest}:\n         WithTranslation &\n         { ammActivityMap: LoopringMap<LoopringMap<AmmPoolActivityRule[]>> | undefined }\n    ) => {\n        const [chartPeriod, setChartPeriod] = React.useState('ALL');\n        const [page, setPage] = React.useState(1);\n        const {currency} = useSettings();\n        const history = useHistory()\n\n        const JumpToLiqudity = React.useCallback((pair, type) => {\n            if (history) {\n                history.push(`/liquidity/pools/coinPair/${pair}?type=${type}`)\n            }\n        }, [history])\n\n        const _handlePageChange = React.useCallback((page: number) => {\n            setPage(page);\n        }, [])\n\n        const {myAmmMarketArray, summaryReward, myPoolRow} = useOverview({ammActivityMap});\n        return (\n            <>\n                <StyleWrapper container spacing={1} padding={3} margin={0}>\n                    <Grid display={'flex'} flexDirection={'column'} justifyContent={'space-around'} item sm={3}>\n                        <Typography variant={'body1'} component={'h5'}\n                                    color={'textSecondary'}>{t('labelTotalPositionValue')}</Typography>\n                        <Typography variant={'h4'} marginTop={1}>\n                            {summaryReward === undefined ? EmptyValueTag : currency === Currency.dollar ? PriceTag.Dollar\n                                + getThousandFormattedNumbers(summaryReward.rewardDollar !== undefined? summaryReward.rewardDollar : 0)\n                                + getThousandFormattedNumbers( summaryReward.feeDollar !== undefined?summaryReward.feeDollar : 0)\n                                : PriceTag.Yuan + getThousandFormattedNumbers(summaryReward.rewardYuan ? summaryReward.rewardYuan : 0)\n                                    +  getThousandFormattedNumbers(summaryReward.feeYuan ? summaryReward.feeYuan : 0)}\n                        </Typography>\n                    </Grid>\n                    <Grid display={'flex'} flexDirection={'column'} justifyContent={'space-around'} item sm={3}>\n                        <Typography variant={'body1'} component={'h5'}\n                                    color={'textSecondary'}>{t('labelFeeRewards')}</Typography>\n                        <Typography variant={'h4'} marginTop={1}>\n                            {summaryReward === undefined ? EmptyValueTag : currency === Currency.dollar ? PriceTag.Dollar\n                                + getThousandFormattedNumbers(summaryReward.feeDollar ? summaryReward.feeDollar : 0)\n                                : PriceTag.Yuan\n                                + getThousandFormattedNumbers(summaryReward.feeYuan ? summaryReward.feeYuan : 0)}\n                        </Typography>\n                    </Grid>\n                    <Grid display={'flex'} flexDirection={'column'} justifyContent={'space-around'} item sm={3}>\n                        <Typography variant={'body1'} component={'h5'}\n                                    color={'textSecondary'}>{t('labelMiningRewards')}</Typography>\n                        <Typography variant={'h4'} marginTop={1}>\n                            {summaryReward === undefined ? EmptyValueTag : currency === Currency.dollar ? PriceTag.Dollar\n                                + getThousandFormattedNumbers(summaryReward.rewardDollar ? summaryReward.rewardDollar : 0)\n                                : PriceTag.Yuan\n                                + getThousandFormattedNumbers(summaryReward.rewardYuan ? summaryReward.rewardYuan : 0)}\n                        </Typography>\n                    </Grid>\n                </StyleWrapper>\n                {/*<StyleWrapper container marginY={2} height={340}>*/}\n                {/*    <StyledBtnGroupWrapper display={'flex'} padding={3} justifyContent={'space-between'}>*/}\n                {/*        <Typography variant={'body1'} component={'h5'}*/}\n                {/*                    color={'textSecondary'}>{t('labelLiquidityValue')}</Typography>*/}\n                {/*        <Box marginRight={-1}>*/}\n                {/*            <ToggleButtonGroup exclusive size=\"small\" {...{*/}\n                {/*                ...rest,*/}\n                {/*                t,*/}\n                {/*                data: toggleData,*/}\n                {/*                value: chartPeriod,*/}\n                {/*                setValue: setChartPeriod*/}\n                {/*            }} />*/}\n                {/*        </Box>*/}\n                {/*    </StyledBtnGroupWrapper>*/}\n                {/*    <ScaleAreaChart type={ChartType.Trend} data={[]}/>*/}\n                {/*</StyleWrapper>*/}\n                <Typography paddingLeft={2} marginTop={2} variant={'h4'}>{t('labelMyAmm')}</Typography>\n                <TableWrapStyled container marginY={2} paddingBottom={2} flex={1} height={568}>\n                    <Grid item xs={12} display={'flex'} flexDirection={'column'}>\n                        <MyPoolTable\n                            rawData={myPoolRow}\n                            pagination={{pageSize: 5}}\n                            handleDeposit={(row: any) => {\n                                const pair = `${row.ammDetail.coinAInfo.name}-${row.ammDetail.coinBInfo.name}`\n                                JumpToLiqudity(pair, 'add')\n                            }}\n                            handleWithdraw={(row: any) => {\n                                const pair = `${row.ammDetail.coinAInfo.name}-${row.ammDetail.coinBInfo.name}`\n                                JumpToLiqudity(pair, 'remove')\n                            }}\n                            handlePageChange={() => {\n                            }}\n                        />\n                    </Grid>\n                </TableWrapStyled>\n                <Typography paddingLeft={2} variant={'h4'}>{t('labelMyAmmRecord')}</Typography>\n                <TableWrapStyled container marginTop={2}  paddingBottom={2} flex={1}>\n                    <Grid item xs={12} display={'flex'} flexDirection={'column'}>\n                        <AmmRecordTable rawData={myAmmMarketArray} handlePageChange={_handlePageChange} page={page}/>\n                    </Grid>\n                </TableWrapStyled>\n            </>\n        )\n    })","import { AmmPoolActivityRule, LoopringMap } from 'loopring-sdk';\nimport React from 'react';\nimport { AmmRecordRow, MyPoolRow } from '@loopring-web/component-lib';\nimport { makeWalletLayer2, WalletMapExtend } from '../../../hooks/help/makeWallet';\nimport {\n    getUserAmmTransaction,\n    makeMyAmmMarketArray,\n    makeMyPoolRowWithPoolState,\n    makeSummaryMyAmm,\n    SummaryMyAmm\n} from '../../../hooks/help';\nimport { useTokenMap } from '../../../stores/token';\nimport { useWalletLayer2 } from '../../../stores/walletLayer2';\nimport { useUserRewards } from '../../../stores/userRewards';\nimport { useAmmMap } from '../../../stores/Amm/AmmMap';\n\n\nexport const useOverview = <R extends { [ key: string ]: any }, I extends { [ key: string ]: any }>(\n    {\n        ammActivityMap\n    }: { ammActivityMap: LoopringMap<LoopringMap<AmmPoolActivityRule[]>> | undefined }\n): {\n    myAmmMarketArray: AmmRecordRow<R>[],\n    summaryReward: SummaryMyAmm | undefined,\n    myPoolRow: MyPoolRow<R>[]\n    // ammActivityViewMap: Array<AmmCardProps<I>>,\n    // ammActivityPastViewMap: Array<AmmCardProps<I>>\n} => {\n    const walletLayer2State = useWalletLayer2();\n    const userRewardsMapState = useUserRewards();\n    const {marketArray} = useTokenMap();\n    const ammMapState = useAmmMap();\n    const {ammMap} = ammMapState;\n\n    const [walletMap, setWalletMap] = React.useState<WalletMapExtend<R> | undefined>(undefined);\n    const [summaryReward, setSummaryReward] = React.useState<SummaryMyAmm | undefined>(undefined);\n    const [myPoolRow, setMyPoolRow] = React.useState<MyPoolRow<R>[]>([])\n    const [myAmmMarketArray, setMyAmmMarketArray] = React.useState<AmmRecordRow<R>[]>([]);\n    // const [ammUserRewardMap, setAmmUserRewardMap] = React.useState<AmmUserRewardMap|undefined>(undefined);\n    // const [snapShotData,setSnapShotData] = React.useState<{\n    //     tickerData: TickerData|undefined\n    //     ammPoolsBalance: AmmPoolSnapshot|undefined\n    // }|undefined>(undefined);\n    const walletLayer2DoIt = React.useCallback(() => {\n        const {walletMap: _walletMap} = makeWalletLayer2();\n        setWalletMap(_walletMap as WalletMapExtend<any>)\n        if (_walletMap) {\n            getUserAmmTransaction()?.then((marketTrades) => {\n                let _myTradeArray = makeMyAmmMarketArray(undefined, marketTrades)\n                setMyAmmMarketArray(_myTradeArray ? _myTradeArray : [])\n            })\n        }\n        return _walletMap\n    }, [makeWalletLayer2, getUserAmmTransaction, makeMyAmmMarketArray, marketArray])\n    const makeMyPoolRow = React.useCallback((_walletMap): MyPoolRow<R>[] => {\n        if (_walletMap && ammMap) {\n            // @ts-ignore\n            const _myPoolRow: MyPoolRow<R>[] = Reflect.ownKeys(_walletMap).reduce((prev: MyPoolRow<R>[], walletKey: string) => {\n                if (/LP-/i.test(walletKey)) {\n                    const ammKey = walletKey.replace('LP-', 'AMM-');\n                    const marketKey = walletKey.replace('LP-', '');\n                    let rowData: MyPoolRow<R> | undefined;\n                    //TODO：websocket open\n                    //  if(ammPoolSnapShots)\n                    // makeData by snapshot else\n                    // else\n                    \n                    rowData = makeMyPoolRowWithPoolState(\n                        {\n                            ammDetail: ammMap[ ammKey ] ,\n                            walletMap: _walletMap,\n                            market: marketKey,\n                            ammUserRewardMap: userRewardsMapState.userRewardsMap\n                        }\n                    ) as any\n                    if (rowData !== undefined) {\n                        prev.push(rowData);\n                    }\n                }\n                return prev\n            }, [] as MyPoolRow<R>[])\n            // console.log('rowData',_myPoolRow);\n            return _myPoolRow;\n        }\n        return [];\n    }, [ammMap, userRewardsMapState.userRewardsMap])\n\n    React.useEffect(() => {\n        if (walletLayer2State.walletLayer2) {\n            const _walletMap = walletLayer2DoIt();\n            if (ammMap) {\n                const _myPoolRow = makeMyPoolRow(_walletMap)\n                setMyPoolRow(_myPoolRow)\n            }\n        }\n    }, []);\n\n    React.useEffect(() => {\n        //ammMapState.ammMap or\n\n        switch (walletLayer2State.status) {\n            case \"ERROR\":\n                walletLayer2State.statusUnset();\n                break;\n            case \"DONE\":\n                walletLayer2State.statusUnset();\n               // const _walletMap = walletLayer2DoIt()\n                const _walletMap = walletLayer2DoIt();\n                //TODO check AmmMap state or ammSnapshot sockets\n                //userRewardsMapState is an option but  walletLayer2 amd ammMapState.ammMap is required\n                if (ammMapState.ammMap) {\n                    const _myPoolRow = makeMyPoolRow(_walletMap);\n                    setMyPoolRow(_myPoolRow)\n                }\n                break;\n            default:\n                break;\n\n        }\n        // }\n    }, [walletLayer2State.status])\n\n    React.useEffect(() => {\n        if (ammMapState.status === \"ERROR\") {\n            //TODO: solve error\n            ammMapState.statusUnset();\n        } else if (ammMapState.status === \"DONE\") {\n            ammMapState.statusUnset();\n            //TODO check AmmMap state or ammSnapshot sockets when websocket open  ammMapState done should not effect myPoolRow\n            if (walletLayer2State.walletLayer2) {\n                const _walletMap = walletLayer2DoIt();\n                //userRewardsMapState is an option and walletLayer2 is required\n                const _myPoolRow = makeMyPoolRow(_walletMap);\n                setMyPoolRow(_myPoolRow);\n            }\n        }\n    }, [ammMapState.status])\n\n    React.useEffect(() => {\n        if (userRewardsMapState.status === \"ERROR\") {\n            //TODO: solve error\n            userRewardsMapState.statusUnset();\n        } else if (userRewardsMapState.status === \"DONE\") {\n            userRewardsMapState.statusUnset();\n            // setAmmUserRewardMap()\n            const summaryReward = makeSummaryMyAmm({userRewardsMap: userRewardsMapState.userRewardsMap});\n            setSummaryReward(summaryReward);\n\n            //TODO check AmmMap state or ammSnapshot sockets\n            if (walletLayer2State.walletLayer2 && ammMapState.ammMap) {  //  ammMapState.ammMap or websocket\n                //userRewardsMapState is an option and walletLayer2 is required\n                const _myPoolRow = makeMyPoolRow(walletLayer2State.walletLayer2);\n                setMyPoolRow(_myPoolRow);\n            }\n\n        }\n    }, [userRewardsMapState.status])\n    return {\n        myAmmMarketArray,\n        summaryReward,\n        myPoolRow,\n        // ammActivityViewMap,\n        // ammActivityPastViewMap\n    }\n\n}\n","import { useRouteMatch } from 'react-router'\n\nimport { Box } from '@material-ui/core'\nimport {\n    SubMenu,\n    SubMenuList as BasicSubMenuList,\n} from '@loopring-web/component-lib'\nimport { withTranslation } from 'react-i18next'\nimport { subMenuLiquidity } from '@loopring-web/common-resources'\nimport { PoolsPanel } from './PoolsPanel'\nimport { CoinPairPanel } from './CoinPairPanel';\nimport { AmmMiningView } from './AmmMining';\nimport { MyLiquidity } from './MyLiquidity'\nimport { useAmmPool } from './hook';\n\nexport const subMenu = subMenuLiquidity\n\nconst SubMenuList = withTranslation(['layout','common'], { withRef: true })(BasicSubMenuList);\nexport const LiquidityPage = () => {\n\n    // const { ammFee } = useAmmPool('LRC', 'ETH')\n    //\n    // console.log('--- > ammFee:', ammFee)\n    //\n    const {ammActivityMap} = useAmmPool();\n    let match: any = useRouteMatch(['/liquidity/:item',':next/']);\n    const selected = match?.params.item ?? 'pools'\n    let matchPair: any = useRouteMatch(['/liquidity/:item/:next/:symbol']);\n    let symbol:any = undefined\n    if (matchPair && matchPair?.params?.next && matchPair.params.item === 'pools') {\n       if(!matchPair.params.symbol){\n           symbol='LRC-ETH';\n       }else{\n           symbol=matchPair.params.symbol;\n       }\n    }\n    \n    return (\n        <>\n            { symbol && <Box display={'flex'} flexDirection={'column'}  flex={1} alignSelf={'flex-start'}>\n              <CoinPairPanel ammActivityMap={ammActivityMap}/>\n            </Box>\n            }\n            {!symbol && <>  <Box width={'200px'} display={'flex'} justifyContent={'stretch'} marginRight={3} marginBottom={3}>\n                    <SubMenu>\n                        <SubMenuList selected={selected} subMenu={subMenu as any} />\n                    </SubMenu>\n                </Box>\n                <Box  minHeight={420}  display={'flex'} alignItems={'stretch'} justifyContent={'stretch'} flexDirection=\"column\" marginTop={0} flex={1} marginBottom={3}>\n                    {(selected === 'pools' && !symbol ) && <PoolsPanel ammActivityMap={ammActivityMap}/>}\n                    {(selected === 'amm-mining' && !symbol ) && <AmmMiningView ammActivityMap={ammActivityMap}/>}\n                    {(selected === 'my-liquidity' && !symbol ) && <MyLiquidity ammActivityMap={ammActivityMap}/>}\n                    {selected === 'orderBook-Mining' && <AmmMiningView ammActivityMap={ammActivityMap}/>}\n                    {/*{selected === 'orders' && <OrderPanel />}*/}\n                </Box>\n             </>\n            }\n        </>\n    )\n\n}\n","import React from 'react';\nimport { useAmmActivityMap } from '../../stores/Amm/AmmActivityMap';\n\nimport { AmmPoolActivityRule, LoopringMap } from 'loopring-sdk';\nimport { useAccount } from '../../stores/account/hook';\nimport { useUserRewards } from '../../stores/userRewards';\nimport { useAmmMap } from '../../stores/Amm/AmmMap';\n\nexport const useAmmPool = <R extends {[key:string]:any},I extends {[key:string]:any}>()=>{\n    const AmmActivityMapState  = useAmmActivityMap()\n    const {getUserRewards}  = useUserRewards()\n    const {account} = useAccount();\n    const {ammMap,getAmmMap} = useAmmMap();\n    const [ammActivityMap,setAmmActivityMap] = React.useState<LoopringMap<LoopringMap<AmmPoolActivityRule[]>>|undefined>(AmmActivityMapState.ammActivityMap)\n    // init AmmMap at begin\n    React.useEffect(() => {\n        if (!ammMap || Object.keys(ammMap).length === 0) {\n            getAmmMap();\n        }\n    }, []);\n    React.useEffect(() => {\n        switch (AmmActivityMapState.status) {\n            case \"ERROR\":\n                AmmActivityMapState.statusUnset();\n                // setState('ERROR')\n                //TODO: show error at button page show error  some retry dispath again\n                break;\n            case \"DONE\":\n                AmmActivityMapState.statusUnset();\n                setAmmActivityMap(AmmActivityMapState.ammActivityMap)\n                break;\n            default:\n                break;\n\n        }\n    }, [AmmActivityMapState.status])\n    React.useEffect(() => {\n        if(account.accountId){\n            getUserRewards()\n        }\n    }, [account.accountId])\n\n    return {\n        ammActivityMap\n    }\n\n}\n\n","import { HashRouter as Router, Route, Switch, } from 'react-router-dom'\n\nimport Header from 'layouts/header'\n\nimport QuotePage from 'pages/QuotePage'\nimport { SwapPage } from 'pages/SwapPage'\n\nimport DebugPage from 'pages/DebugPage'\n\nimport Container from '@material-ui/core/Container'\nimport { Box } from '@material-ui/core'\nimport { DevWrapper } from '../provider/'\nimport { Layer2Page } from '../pages/Layer2Page'\nimport { LiquidityPage } from '../pages/LiquidityPage'\n\nconst RouterView = () => {\n    \n    return <Router>\n        <Header />\n\n        {/*<Box style={{marginTop: `var(--header-height)`}} flex={1} display={'flex'}>*/}\n        <Container maxWidth=\"lg\" style={{minHeight:'calc(100% - 64px - 32px)',display:'flex',flexDirection:'column'}}>\n            {/*style={{height: '100%' }}*/}\n            <Box display={'flex'} flex={1} alignItems={'stretch'} flexDirection={'row'} marginTop={3}  >\n                <Switch>\n                    <Route exact component={SwapPage} path='/'/>\n                    <Route exact component={QuotePage} path='/markets'/>\n                    <Route component={SwapPage} path='/trading/lite'/>\n                    <Route component={SwapPage} path='/trading/lite(/:symbol)'/>\n\n                    <Route exact component={Layer2Page} path='/layer2'/>\n                    <Route exact component={Layer2Page} path='/layer2/assets'/>\n                    <Route exact component={Layer2Page} path='/layer2/transactions'/>\n                    <Route exact component={Layer2Page} path='/layer2/trades'/>\n                    <Route exact component={Layer2Page} path='/layer2/ammRecords'/>\n                    <Route exact component={Layer2Page} path='/layer2/orders'/>\n                    <Route exact component={Layer2Page} path='/layer2/setting'/>\n\n                    <Route exact component={LiquidityPage} path='/liquidity'/>\n                    <Route exact component={LiquidityPage} path='/liquidity/pools/*'/>\n                    <Route exact component={LiquidityPage} path='/liquidity/pools'/>\n                    {/*<Route exact component={LiquidityPage} path='/liquidity/pools/coinPair(/:symbol)'/>*/}\n                    <Route exact component={LiquidityPage} path='/liquidity/amm-mining'/>\n                    <Route exact component={LiquidityPage} path='/liquidity/my-liquidity'/>\n                    <Route exact component={LiquidityPage} path='/liquidity/orderBook-Mining'/>\n                    <Route exact component={LiquidityPage} path='/liquidity/maker-rebates'/>\n\n                    <DevWrapper>\n                        <Route exact path='/debug'>\n                            <DebugPage/>\n                        </Route>\n                    </DevWrapper>\n\n                </Switch>\n            </Box>\n        </Container>\n        {/*</Box>*/}\n\n    </Router>\n}\n\nexport default RouterView\n","import { Trans, useTranslation } from 'react-i18next';\nimport { Box, Container, Link, Typography } from '@material-ui/core';\nimport styled from '@emotion/styled';\nimport { ErrorObject } from '@loopring-web/common-resources';\nimport { getContactInfo } from '../../utils/dt_tools';\n\nconst StyleBox = styled(Box)`\n  background-image: url('./static/images/error_bg.png');\n  background-repeat: no-repeat;\n  background-size: contain;\n  background-position: bottom;\n  white-space: pre-wrap;\n  //h2{\n  //  position: relative;\n  //}\n` as typeof Box\n\nexport const ErrorPage = ({messageKey}: ErrorObject) => {\n    // const {messageKey}: { id?:string,messageKey:string } = {messageKey: 'errorMessageTokenMapIsEmpty'};\n    //TODO: checkRouter\n    const {t} = useTranslation('error');\n    const message = `labelConnectUs`;\n    return <>\n        <Container>\n            {/*style={{height: '100%' }}*/}\n            <StyleBox flex={1} display={'flex'} alignItems={'flex-start'} justifyContent={'center'}\n                      flexDirection={'column'} marginTop={4} height={680} maxWidth={1200}>\n                {/*<StyleBox>*/}\n                <Box textAlign={'center'} position={'relative'} left={128} top={-64}>\n                    <Typography component={'h2'} variant={'h2'}>\n                        {t(messageKey)}\n                    </Typography>\n                    <Typography marginY={2} component={'p'} variant={'body1'} color={'textSecondary'}>\n                        <Trans i18nKey={message}>\n                            If you believe this is indeed a bug, please <Link\n                            component={'a'}\n                            onClick={(e) => {\n                                window.location.href = getContactInfo();\n                                e.preventDefault();\n                            }}\n                        >contact us</Link> <br/> We would appreciate your feedback\n\n                        </Trans>\n                        {/*{t(message)}*/}\n                        {/*{t(messageKey)}*/}\n                    </Typography>\n                </Box>\n                {/*</StyleBox>*/}\n            </StyleBox>\n        </Container>\n\n        {/*<Footer></Footer>*/}\n    </>\n}\n","// import { i18nInstance as i18n  } from \"@loopring-web/common-resources\"\nimport i18n from 'i18next';\n\nconst covertLocale = (rawLocale: string = i18n.language) => {\n    return rawLocale.replace('_', '-')\n}\n\nexport function getLocaleDtFromTs(ts: number | string, locale: string = i18n.language) {\n    if (typeof(ts) === 'string') {\n        ts = parseInt(ts)\n    }\n    const dt = new Date(ts).toLocaleString(covertLocale(locale))\n    return dt\n}\n\nexport function getLocaleDt(dt?: Date, locale: string = i18n.language) {\n    if (dt) {\n        return dt.toLocaleString(covertLocale(locale))\n    }\n    return ''\n}\n\nexport function getContactInfo(subject: string = 'report to loopring website', body: string ='Body Content') {\n    const email = process.env.CONTACT_US_EMAIL ?? 'contact@loopring.io'\n    return `mailto:${email}?subject=${subject}&body=${body}`\n}\n","import { toBig } from 'loopring-sdk'\n\nexport enum OrderHandling {\n    processed = 'processed',\n    no_such_order = 'no_such_order',\n    too_many_times = 'too_many_times',\n}\n\nexport const BIG0 = toBig(0)\n\nexport const BIG1 = toBig(1)\n\nexport const BIG10 = toBig(10)\n\nexport const BIG10K = toBig(10000)\n\nexport const MULTI_FACTOR = 10000\n","import { useDispatch, useSelector } from 'react-redux'\nimport { AmmMapStates } from './interface';\nimport React from 'react';\nimport { getAmmMap, statusUnset } from './reducer';\n\nexport const useAmmMap = <R extends {[key:string]:any},I extends {[key:string]:any}>(): AmmMapStates<R,I> & {\n    getAmmMap:()=> void,\n    statusUnset:()=> void,\n} => {\n    const ammMap:AmmMapStates<R,I>= useSelector((state: any) => state.amm.ammMap)\n    const dispatch = useDispatch();\n    return {\n        ...ammMap,\n        statusUnset:React.useCallback(()=>dispatch(statusUnset(undefined)),[dispatch]),\n        getAmmMap:React.useCallback(()=>dispatch(getAmmMap(undefined)),[dispatch]),\n    }\n}\n","import { ConnectorNames } from 'loopring-sdk'\n\nimport {\n    injected,\n    network,\n    walletconnect,\n    walletlink,\n    ledger,\n    trezor,\n    authereum,\n} from 'networks/web3_connectors'\n\nexport const connectorsByName: { [connectorName in ConnectorNames]: any } = {\n    [ConnectorNames.Unknown]: undefined,\n    [ConnectorNames.Injected]: injected,\n    [ConnectorNames.Network]: network,\n    [ConnectorNames.WalletConnect]: walletconnect,\n    [ConnectorNames.WalletLink]: walletlink,\n    [ConnectorNames.Ledger]: ledger,\n    [ConnectorNames.Trezor]: trezor,\n    [ConnectorNames.Authereum]: authereum,\n}\n","import React from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\n\nimport { useCustomDCEffect } from 'hooks/common/useCustomDCEffect'\n\nimport { useGetTradingInfo } from 'stores/trading/hook'\nimport { useActiveWeb3React, } from 'hooks/web3/useWeb3'\n\nimport { Lv2Account, } from 'defs/account_defs'\n\nimport { AccountStatus, StatusChangeEvent } from 'state_machine/account_machine_spec'\n\nimport * as sign_tools from 'loopring-sdk'\n\nimport { connectorsByName } from 'defs/web3_defs'\n\nimport { AccountInfo, ConnectorNames, dumpError400, ExchangeAPI, sleep, UpdateAccountRequestV3, UserAPI, VALID_UNTIL, } from 'loopring-sdk'\n\nimport { toHex, toBig, } from 'loopring-sdk'\n\nimport { RootState } from 'stores'\n\nimport {\n    reset, setAccountStatus, setConnectName,\n    setConnectNameTemp, setAccountInfo, setEddsaKey, setApikey, setAccAddr,\n} from 'stores/account/reducer'\n\nimport { AccountMachineSpec, } from 'state_machine/account_machine_spec'\n\nimport { buildMachine } from 'state_machine/machine_builder'\n\nimport voca from 'voca'\nimport { usePrevious } from 'react-use'\n\nimport Web3 from 'web3'\n\nimport { useExchangeAPI, useUserAPI } from 'hooks/exchange/useApi'\n\nimport { UserStorage } from 'storage'\n\nimport store from 'stores'\nimport { useWalletLayer1 } from '../walletLayer1';\nimport { useWalletLayer2 } from '../walletLayer2';\nimport { useTokenMap } from '../token';\nimport _ from 'lodash'\nimport { myLog } from 'utils/log_tools'\n\nexport function useWeb3Account() {\n\n    const {\n        connector,\n        library,\n        account,\n        chainId,\n        active,\n        error,\n    } = useActiveWeb3React()\n\n    const isConnected: boolean = active && !voca.isBlank(account as string)\n\n    return {\n        account,\n        connector,\n        library,\n        chainId,\n        active,\n        isConnected,\n        error,\n    }\n\n}\n\nexport function useAccount() {\n\n    const account: Lv2Account = useSelector((state: RootState) => state.account)\n\n    const isNoAccount = () => {\n        return account.status === AccountStatus.NOACCOUNT\n    }\n\n    const isActivated = () => {\n        return account.status === AccountStatus.ACTIVATED\n    }\n\n    return {\n        account,\n        isNoAccount,\n        isActivated,\n        apiKey: account.apiKey,\n        eddsaKey: account.eddsaKey,\n        accountId: account.accountId,\n    }\n}\n\nexport function useStateMachine() {\n    const dispatch = useDispatch()\n\n    const machine = buildMachine(AccountMachineSpec())\n\n    const sendEvent = React.useCallback((account: Lv2Account, event: StatusChangeEvent) => {\n        const nextState = machine(account.status, event)\n        if (nextState) {\n            dispatch(setAccountStatus(nextState))\n        }\n    }, [machine, dispatch])\n\n    return {\n        sendEvent,\n    }\n}\n\nexport function useConnect() {\n\n    const {\n        activate,\n    } = useActiveWeb3React()\n\n    const { sendEvent } = useStateMachine()\n\n    const dispatch = useDispatch()\n\n    const [activatingConnector, setActivatingConnector] = React.useState<any>()\n\n    const connect = React.useCallback((item_name: ConnectorNames, isSwitch: boolean = false) => {\n\n        if (isSwitch) {\n            myLog('try Connecting... isSwitch Reset')\n            sendEvent(store.getState().account, StatusChangeEvent.Reset)\n        }\n\n        const newConnector: any = connectorsByName[item_name]\n        myLog('newConnector:', newConnector)\n        setActivatingConnector(newConnector)\n        activate(newConnector)\n        dispatch(setConnectNameTemp(item_name))\n\n        //sendEvent(store.getState().account, StatusChangeEvent.Connecting)\n\n        myLog('store.getState().account.status:', store.getState().account)\n\n    }, [activate, dispatch, sendEvent, store.getState().account.status])\n\n    return {\n        connect,\n        activatingConnector,\n    }\n\n}\n\nexport function useDisconnect() {\n\n    const {\n        deactivate,\n    } = useActiveWeb3React()\n\n    const dispatch = useDispatch()\n\n    const disconnect = React.useCallback(() => {\n        deactivate()\n        dispatch(reset(undefined))\n    }, [deactivate, dispatch])\n\n    return {\n        disconnect,\n    }\n\n}\n\nexport function useUnlock() {\n\n    const dispatch = useDispatch()\n\n    const { chainId } = useWeb3Account()\n\n    const exchangeApi: ExchangeAPI = useExchangeAPI()\n\n    const userApi: UserAPI = useUserAPI()\n\n    const { tradingInfo } = useGetTradingInfo()\n\n    const { connector, } = useWeb3Account()\n\n    const { sendEvent } = useStateMachine()\n\n    const { resetLayer2 } = useWalletLayer2()\n\n    const lock = React.useCallback(async (account: Lv2Account) => {\n        resetLayer2()\n        sendEvent(account, StatusChangeEvent.Lock)\n    }, [sendEvent])\n\n    const unlock = React.useCallback(async (account: Lv2Account) => {\n\n        const exchangeInfo = store.getState().system.exchangeInfo?.exchangeAddress\n\n        if (!userApi || !exchangeApi || !connector\n            || !account.accountId || !exchangeInfo\n            || !chainId\n            || account.status !== AccountStatus.LOCKED) {\n            return\n        }\n\n        if (account.status !== AccountStatus.LOCKED) {\n            throw Error('unexpected status:' + account.status)\n        }\n        \n        myLog('try to unlock!', account)\n\n        let event = undefined\n        let sk = undefined\n        let apikey: any = undefined\n\n        const provider = await connector.getProvider()\n        const web3 = new Web3(provider as any)\n\n        try {\n\n            const nonce = account.nonce - 1 < 0 ? 0 : account.nonce - 1\n            myLog('try to unlock! nonce:', nonce)\n\n            if (!account.eddsaKey) {\n                const eddsaKey = await sign_tools\n                    .generateKeyPair(\n                        web3,\n                        account.accAddr,\n                        exchangeInfo,\n                        nonce,\n                        account.connectName,\n                    )\n                sk = eddsaKey.sk\n            } else {\n                sk = account.eddsaKey\n            }\n\n            myLog('useUnlock account:', account, ' sk:', sk)\n\n            apikey = await userApi.getUserApiKey({\n                accountId: account.accountId\n            }, sk)\n\n            event = StatusChangeEvent.Unlock\n\n        } catch (reason) {\n            myLog('got :', reason)\n            dumpError400(reason)\n            if (reason?.response?.data?.resultInfo?.code === 100001) {\n\n                try {\n\n                    // const req: GetOffchainFeeAmtRequest = {\n                    //     accountId: account.accountId,\n                    //     requestType: OffchainFeeReqType.UPDATE_ACCOUNT,\n                    // }\n    \n                    // const response = await userApi.getOffchainFeeAmt(req, account.apiKey)\n\n                    const feeMap = {\n                        'ETH': '529000000000000',\n                        'LRC': '34000000000000000000',\n                        'USDT': '7850000',\n                        'DAI': '98100000000000000000',\n                    }\n                    \n                    const eddsaKey = await sign_tools\n                        .generateKeyPair(\n                            web3,\n                            account.accAddr,\n                            tradingInfo.exchangeInfo?.exchangeAddress as string,\n                            account.nonce,\n                            account.connectName,\n                        )\n                    \n                    const request: UpdateAccountRequestV3 = {\n                        exchange: tradingInfo.exchangeInfo?.exchangeAddress,\n                        owner: account.accAddr,\n                        accountId: account.accountId,\n                        publicKey: { x: eddsaKey.formatedPx, y: eddsaKey.formatedPy },\n                        maxFee: { tokenId: 0, volume: feeMap['ETH'] },\n                        validUntil: VALID_UNTIL,\n                        nonce: account.nonce,\n                    }\n\n                    const updateAccountResponse = await userApi.updateAccount(request, web3,\n                        chainId, account.connectName, false)\n\n                    myLog('updateAccountResponse:', updateAccountResponse)\n\n                    await sleep(1000)\n\n                } catch (reason2) {\n                    dumpError400(reason2)\n                }\n            }\n            event = StatusChangeEvent.Reset\n        }\n\n        if (sk) {\n            dispatch(setEddsaKey(sk))\n        }\n\n        if (apikey?.apiKey) {\n            dispatch(setApikey(apikey.apiKey))\n        }\n\n        if (event) {\n            sendEvent(account, event)\n        }\n\n    }\n        , [dispatch, sendEvent, exchangeApi, userApi, connector, chainId, tradingInfo.exchangeInfo])\n\n    return {\n        lock,\n        unlock,\n    }\n}\n\nasync function checkAccountAvailableAsync(exchangeApi: ExchangeAPI, userApi: UserAPI, account: Lv2Account, dispatch: any, sendEvent: any, connector: any, exchangeAddress: string) {\n\n    let accInfo = undefined\n    let event = undefined\n    let sk = undefined\n    let code = undefined\n    let apikey: any = undefined\n\n    try {\n        accInfo = (await exchangeApi.getAccount({\n            owner: account.accAddr\n        })).accInfo\n        if (accInfo.publicKey && accInfo.publicKey.x && accInfo.publicKey.y) {\n            if (account.accountId !== accInfo.accountId) {\n                const provider = await connector.getProvider()\n                const web3 = new Web3(provider as any)\n                try {\n                    code = await web3.eth.getCode(account.accAddr)\n                    try {\n                        const eddsakey = await sign_tools\n                            .generateKeyPair(\n                                web3,\n                                account.accAddr,\n                                exchangeAddress,\n                                accInfo.nonce - 1,\n                                account.connectName,\n                            )\n                        sk = toHex(toBig(eddsakey.keyPair.secretKey))\n                        const px = toHex(toBig(eddsakey.keyPair.publicKeyX))\n                        const py = toHex(toBig(eddsakey.keyPair.publicKeyY))\n\n                        try {\n                            apikey = await userApi.getUserApiKey({\n                                accountId: accInfo.accountId\n                            }, sk)\n                            event = (StatusChangeEvent.HasPubkey)\n                        } catch (reason) {\n                            dumpError400(reason)\n                            event = (StatusChangeEvent.ErrorResponse)\n                        }\n                    } catch (reason) {\n                        dumpError400(reason)\n                        event = (StatusChangeEvent.ErrorResponse)\n                    }\n\n                } catch (reason) {\n                    dumpError400(reason)\n                    event = (StatusChangeEvent.ErrorResponse)\n                }\n\n            } else {\n                myLog('already has accountId!')\n            }\n        } else {\n            event = (StatusChangeEvent.HasNoPubkey)\n        }\n    } catch (reason) {\n        // 3 has none of above\n        dumpError400(reason)\n        // check deposit tx (local and ethereum)\n        event = (StatusChangeEvent.ErrorResponse)\n    }\n\n    if (accInfo && accInfo.owner !== account.accAddr) {\n        dispatch(setAccountInfo(accInfo))\n    }\n\n    if (sk) {\n        dispatch(setEddsaKey(sk))\n    }\n\n    if (apikey) {\n        dispatch(setApikey(apikey.apiKey))\n    }\n\n    if (event) {\n        sendEvent(event)\n    }\n\n}\n\nexport function useCheckAccStatus() {\n\n    const dispatch = useDispatch()\n\n    const { sendEvent } = useStateMachine()\n\n    const exchangeApi: ExchangeAPI = useExchangeAPI()\n\n    const userApi: UserAPI = useUserAPI()\n\n    const { account: web3Account, active, isConnected, chainId, connector, } = useWeb3Account()\n    const { marketArray } = useTokenMap()\n\n    const lv1Acc = web3Account as string\n\n    const prevChainId = usePrevious(chainId)\n    const prevWeb3Account = usePrevious(web3Account)\n\n    const {updateWalletLayer1, resetLayer1,} = useWalletLayer1()\n    const {updateWalletLayer2, resetLayer2, } = useWalletLayer2();\n\n    // const { updateWalletLayer1,resetLayer1} = useWalletLayer1();\n    // const { updateWalletLayer2, resetLayer2} = useWalletLayer2()\n    // console.log('prevChainId:', prevChainId, ' chainId:', chainId)\n    // console.log('prevWeb3Account:', prevWeb3Account, ' web3Account:', web3Account)\n    // console.log(exchangeApi, userApi, account, 'prevChainId:', prevChainId, 'chainId:', chainId, 'web3Account:', web3Account)\n\n    const { tradingInfo } = useGetTradingInfo()\n\n    useCustomDCEffect(async() => {\n\n        const account = store.getState().account as Lv2Account\n\n        const cleanUp = () => {\n            let handler = UserStorage.getHandler()\n            if (account.status !== AccountStatus.ACTIVATED && handler) {\n                clearInterval(handler)\n            }\n        }\n\n        async function checkStatus() {\n\n            if (!account || !lv1Acc || !exchangeApi || !userApi || !chainId\n                || !connector || !tradingInfo.exchangeInfo?.exchangeAddress) {\n                return\n            }\n\n            if (((prevChainId && chainId && prevChainId !== chainId)\n                || (prevWeb3Account && web3Account && prevWeb3Account !== web3Account))\n                && account.status !== AccountStatus.UNCONNNECTED) {\n                dispatch(reset(undefined))\n                sendEvent(account, StatusChangeEvent.Reset)\n                return\n            }\n\n            cleanUp()\n\n            switch (account.status) {\n                case AccountStatus.UNCONNNECTED:\n                    myLog('---> render UNCONNNECTED active:', active, ' isConnected:', isConnected)\n\n                    if (isConnected) {\n                        dispatch(setConnectName(ConnectorNames.Injected))\n                        sendEvent(account, StatusChangeEvent.Connecting)\n                    }\n\n                    //HIGH:\n                    resetLayer1()\n                    resetLayer2()\n                    break\n\n                case AccountStatus.CONNECTED:\n                    //check session or local storage\n\n                    myLog('---> render CONNECTED account:', account)\n\n                    try {\n\n                        const { accInfo } = (await exchangeApi.getAccount({ owner: lv1Acc }))\n\n                        // current acc is local acc info\n                        if (account.accAddr && account.eddsaKey && accInfo.owner === account.accAddr) {\n                            // console.log('cur Eddsakey:', account.eddsaKey)\n                        } else {\n                            // console.log('got a new address:', acc)\n                            // got a new address\n                            dispatch(setAccountInfo(accInfo))\n                            // dispatch(setEddsaKey(''))\n\n                            //updateWalletLayer1();\n                            if (marketArray?.length) {\n                                updateWalletLayer1()\n                            }\n                        }\n\n                        if (account?.connectName !== account?.connectNameTemp) {\n                            dispatch(setConnectName(account.connectNameTemp))\n                        }\n\n                        sendEvent(account, StatusChangeEvent.HasPubkey)\n\n                    } catch (reason) {\n                        dumpError400(reason)\n\n                        if (lv1Acc) {\n                            dispatch(setAccAddr(lv1Acc))\n                        }\n\n                        if (reason.response && reason.response.data && reason.response.data.resultInfo\n                            && reason.response.data.resultInfo.code === 101002) {\n                            sendEvent(account, StatusChangeEvent.ErrorResponse)\n                        }\n                    }\n\n                    break\n\n                case AccountStatus.NOACCOUNT:\n\n                    myLog('NOACCOUNT before wait 30s!')\n\n                    _.delay(() => {\n                        sendEvent(account, StatusChangeEvent.Reconnect)\n                        myLog('NOACCOUNT wait 15s to reconnect again!')\n                    }, 30000)\n\n                    break\n\n                case AccountStatus.DEPOSITING:\n                    const depositFinished = true // TODO\n                    if (depositFinished) {\n                        //   console.log('depositFinished currStatus:', account.status)\n                        sendEvent(account, StatusChangeEvent.FinishDeposit)\n                    }\n                    break\n\n                case AccountStatus.DEPOSIT_TO_CONFIREM:\n                    // getAccount every 10s to check\n                    break\n\n                case AccountStatus.UNACTIVATED:\n                    const isSmartWallet = false // TODO\n                    if (isSmartWallet) {\n                        sendEvent(account, StatusChangeEvent.IsSmartWallet)\n                    } else {\n                        // console.log('approve hash no smartwallet, account.status:', account.status)\n                    }\n                    break\n\n                case AccountStatus.ARPROVING:\n                    const approved = false // TODO\n                    if (approved) {\n                        //  console.log('sub contract event, check approving. approved! status:', account.status)\n                        sendEvent(account, StatusChangeEvent.ApproveSubmit)\n                    }\n                    break\n\n                case AccountStatus.APPROV_TO_CONFIRM:\n                    const approveConfirmed = false // TODO\n                    if (approveConfirmed) {\n                        //   console.log('approveConfirmed status:', account.status)\n                        sendEvent(account, StatusChangeEvent.ApproveConfirmed)\n                    }\n                    break\n\n                case AccountStatus.LOCKED:\n                    //HIGH:\n                    resetLayer1()\n                    break\n\n                case AccountStatus.ACTIVATED:\n                    UserStorage.checkTimeout(true)\n                    const handler = setInterval(() => {\n                        const isTimeOut = UserStorage.checkTimeout()\n                        if (account.status === AccountStatus.ACTIVATED && isTimeOut) {\n                            clearInterval(handler)\n                            sendEvent(account, StatusChangeEvent.Lock)\n                        }\n                    }, 1000)\n                    UserStorage.setHandler(handler)\n                    updateWalletLayer2()\n                    break\n\n                default:\n                    break\n            }\n\n\n\n        }\n\n        checkStatus()\n\n        return () => {\n            cleanUp()\n        }\n\n    }, [updateWalletLayer1, updateWalletLayer2, resetLayer1, resetLayer2,\n        exchangeApi, userApi, store.getState().account.status, prevChainId, chainId, lv1Acc, \n        dispatch, connector, tradingInfo.exchangeInfo?.exchangeAddress,])\n\n}\n\n","export const buildMachine = <S, E>(spec: any) => (currentState: S, event: E) => {\n    // We get all possible transitions for the current State\n    const stateTransitions = spec.states[currentState]\n\n    // No transitions? Error!\n    if (stateTransitions === undefined) {\n        throw new Error(`No transitions defined for ${currentState}`)\n    }\n\n    // We try to transition to the next state\n    const nextState = stateTransitions[event]\n\n    // No next state? Error!\n    if (nextState === undefined) {\n        throw new Error(\n            `Unknown transition for event ${event} in state ${currentState}`\n        )\n    }\n\n   // console.log('got nextState:', nextState)\n\n    // We return the new state\n    return nextState\n}\n","import { createSlice, PayloadAction, Slice } from '@reduxjs/toolkit'\n\nimport { AccountInfo, ConnectorNames, } from 'loopring-sdk'\n\nimport { Lv2Account, } from 'defs/account_defs'\nimport { AccountStatus } from 'state_machine/account_machine_spec'\nimport { UserStorage } from 'storage'\n\n\nconst initialState = () => {\n  const defaultAccId = process.env.REACT_APP_TEST_ACCOUND_ID ? process.env.REACT_APP_TEST_ACCOUND_ID : UserStorage.getAccountId()\n  const defaultApiKey = process.env.REACT_APP_TEST_API_KEY ? process.env.REACT_APP_TEST_API_KEY : UserStorage.getApikey()\n  const defaultOwner = process.env.REACT_APP_TEST_OWNER ? process.env.REACT_APP_TEST_OWNER : UserStorage.getAccount()\n  const defaultEddsaKey = process.env.REACT_APP_TEST_EDDSA_KEY ? process.env.REACT_APP_TEST_EDDSA_KEY : UserStorage.getEddsakey()\n\n  const defaultStatus = AccountStatus.UNCONNNECTED\n  return {\n    accAddr: defaultOwner,\n    status: defaultStatus,\n    accountId: defaultAccId,\n    publicKey: {},\n    nonce: 0,\n    isContractAddress: false,\n    apiKey: defaultApiKey,\n    eddsaKey: defaultEddsaKey,\n    connectName: ConnectorNames.Unknown,\n    connectNameTemp: ConnectorNames.Unknown,\n  } as Lv2Account\n}\n\nconst accountSlice:Slice = createSlice({\n  name: 'account',\n  initialState: initialState(),\n  reducers: {\n    reset(state) {\n      const initState = initialState()\n      Object.assign(state, initState)\n    },\n    setAccAddr(state, action: PayloadAction<string>) {\n      state.accAddr = action.payload\n      // UserStorage.setAccount(action.payload)\n    },\n    setAccountInfo(state, action: PayloadAction<AccountInfo>) {\n      state.accAddr = action.payload.owner\n      state.accountId = action.payload.accountId\n      state.nonce = action.payload.nonce\n      state.publicKey = action.payload.publicKey\n\n      // UserStorage.setAccount(state.accAddr)\n      // UserStorage.setAccountId(state.accountId)\n      \n    },\n    setApikey(state, action: PayloadAction<string>) {\n      state.apiKey = action.payload\n      // UserStorage.setApikey(action.payload)\n    },\n    setAccountStatus(state, action: PayloadAction<AccountStatus>) {\n      state.status = action.payload\n    },\n    setEddsaKey(state, action: PayloadAction<any>) {\n      state.eddsaKey = action.payload\n      // UserStorage.setEddsakey(action.payload)\n    },\n    setConnectName(state, action: PayloadAction<ConnectorNames>) {\n      state.connectName = action.payload\n    },\n    setConnectNameTemp(state, action: PayloadAction<ConnectorNames>) {\n      state.connectNameTemp = action.payload\n    },\n    setIsContractAddress(state, action: PayloadAction<boolean>) {\n      state.isContractAddress = action.payload\n    },\n  },\n})\n\nexport const { reset, setAccAddr, setApikey, setConnectName, setConnectNameTemp, setAccountInfo, setAccountStatus, setEddsaKey, setIsContractAddress, } = accountSlice.actions\nexport default accountSlice\n","import { useDispatch, useSelector } from 'react-redux'\nimport { getTokenMap, statusUnset} from './reducer';\nimport { GetTokenMapParams, TokenMapStates } from './interface';\nimport React from 'react';\nimport { PayloadAction } from '@reduxjs/toolkit';\n\nexport function useTokenMap<R extends {[key:string]:any}>(): TokenMapStates<R> & {\n    getTokenMap:(props:PayloadAction<GetTokenMapParams<any>>)=>void,\n    statusUnset:()=>void,\n} {\n    const tokenMap:TokenMapStates<R> = useSelector((state: any) => state.tokenMap)\n    const dispatch = useDispatch();\n\n    return {\n        ...tokenMap,\n        statusUnset:React.useCallback(()=>dispatch(statusUnset(undefined)),[dispatch]),\n        getTokenMap:React.useCallback((props:PayloadAction<GetTokenMapParams<R>>)=>dispatch(getTokenMap(props)),[dispatch]),\n    }\n\n}\n","import { useAmmpoolAPI, useExchangeAPI } from 'hooks/exchange/useApi'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { useCustomDCEffect } from 'hooks/common/useCustomDCEffect'\n\nimport store, { RootState } from 'stores'\n\nimport { \n    setMarkets, \n    setExchangeInfo, \n    setTokens, \n    setTickerMap, \n    setAmmPoolStats,\n    setAmmPoolConf, \n    setMarketTrades,\n    setAmmActivityRules,\n    setChainId, \n} from 'stores/trading/reducer'\n\nimport { dumpError400, ChainId, AmmPoolStat, Currency, } from 'loopring-sdk'\nimport { useActiveWeb3React } from 'hooks/web3/useWeb3'\nimport { useEffect } from 'react'\n\nimport { ammpoolAPI, exchangeAPI } from \"stores/apis/api\"\n\nexport function getTradingInfo() {\n    const tradingInfo = store.getState().trading\n    return {\n        tradingInfo,\n        chainId: tradingInfo.chainId,\n    }\n}\n\nexport function getAccount() {\n    return  store.getState().account\n\n}\n\nexport function getChainId(){\n    const chainId = store.getState().system.chainId;\n    return chainId\n\n}\n\nexport function useGetTradingInfo() {\n    const tradingInfo = useSelector((state: RootState) => state.trading)\n    return {\n        tradingInfo,\n        chainId: tradingInfo.chainId,\n    }\n}\n\nexport function useUpdateChainId() {\n    const { chainId } = useActiveWeb3React()\n    const dispatch = useDispatch()\n    useEffect(() => {\n        dispatch(setChainId(chainId ?? ChainId.GORLI))\n    }, [chainId, dispatch])\n}\n\nexport function useUpdateExchangeMarkets() {\n    const dispatch = useDispatch()\n    const api = useExchangeAPI()\n\n    useCustomDCEffect(async() => {\n\n        if (!api) {\n            return\n        }\n\n        try {\n            const response = await api.getMixMarkets()\n            dispatch(setMarkets(response))\n        } catch (reason) {\n            dumpError400(reason)\n        }\n\n    }, [api])\n\n}\n\nexport function useUpdateExchangeInfo() {\n\n    const dispatch = useDispatch()\n    const api = useExchangeAPI()\n\n    useCustomDCEffect(async() => {\n\n        if (!api) {\n            return\n        }\n\n        try {\n            const response = await api.getExchangeInfo()\n            dispatch(setExchangeInfo(response.exchangeInfo))\n        } catch (reason) {\n            dumpError400(reason)\n        }\n\n    }, [api])\n\n}\n\nexport function useUpdateAmmPoolConf() {\n\n    const dispatch = useDispatch()\n    const api = useAmmpoolAPI()\n\n    useCustomDCEffect(async() => {\n\n        if (!api) {\n            return\n        }\n\n        try {\n            const ammPoolConf = await api.getAmmPoolConf()\n            dispatch(setAmmPoolConf(ammPoolConf))\n        } catch (reason) {\n            dumpError400(reason)\n        }\n\n    }, [api])\n\n}\n\nexport function useUpdateAmmPoolStats() {\n\n    const dispatch = useDispatch()\n    const api = useAmmpoolAPI()\n\n    useCustomDCEffect(async() => {\n\n        if (!api) {\n            return\n        }\n\n        try {\n            const ammPoolStats = await api.getAmmPoolStats()\n            dispatch(setAmmPoolStats(ammPoolStats))\n        } catch (reason) {\n            dumpError400(reason)\n        }\n\n    }, [api])\n\n}\n\nexport function useUpdateAmmActivityRules() {\n\n    const dispatch = useDispatch()\n    const api = useAmmpoolAPI()\n\n    useCustomDCEffect(async() => {\n\n        if (!api) {\n            return\n        }\n\n        try {\n            const ammActivityRules = await api.getAmmPoolActivityRules()\n            dispatch(setAmmActivityRules(ammActivityRules.activityRules))\n        } catch (reason) {\n            dumpError400(reason)\n        }\n\n    }, [api])\n\n}\n\nexport function useUpdateTokens() {\n\n    const dispatch = useDispatch()\n    const api = useExchangeAPI()\n\n    useCustomDCEffect(async() => {\n\n        if (!api) {\n            return\n        }\n\n        try {\n            const tokens = await api.getTokens()\n            dispatch(setTokens(tokens))\n        } catch (reason) {\n            dumpError400(reason)\n        }\n\n    }, [api])\n\n}\n\nexport function useUpdateTickerMap(market: string) {\n\n    const dispatch = useDispatch()\n    const api = useExchangeAPI()\n\n    useCustomDCEffect(async() => {\n\n        if (!api) {\n            return\n        }\n\n        try {\n            const tickMap = await api.getTicker({\n                market\n              })\n            dispatch(setTickerMap(tickMap))\n        } catch (reason) {\n            dumpError400(reason)\n        }\n\n    }, [api])\n\n}\n\nexport function useMarketTrades(market: string) {\n  \n    const dispatch = useDispatch()\n    const api = useExchangeAPI()\n\n    useCustomDCEffect(async() => {\n\n        if (!api) {\n            return\n        }\n\n        try {\n            const marketTrades = await api.getMarketTrades({\n                market\n              })\n            dispatch(setMarketTrades(marketTrades))\n        } catch (reason) {\n            dumpError400(reason)\n        }\n\n    }, [api, dispatch])\n\n}\n\nexport function useUpdateFiatPrice() {\n  \n    const dispatch = useDispatch()\n    const api = useExchangeAPI()\n\n    useCustomDCEffect(async() => {\n\n        if (!api) {\n            return\n        }\n\n        try {\n            const usdFiatPrices = await api.getFiatPrice({\n                legal: Currency.USD\n            })\n            const cnyFiatPrices = await api.getFiatPrice({\n                legal: Currency.CNY\n            })\n            dispatch(setMarketTrades({}))\n        } catch (reason) {\n            dumpError400(reason)\n        }\n\n    }, [api, dispatch])\n\n}\n\n// export const asyncGetTradingInfo = async() => {\n//\n//     const { tradingInfo } = getTradingInfo()\n//     console.log('--- tradingInfo', tradingInfo)\n//\n//     let tokens: any = undefined\n//\n//     if (tradingInfo.tokens?.tokenIdMap) {\n//         tokens = tradingInfo.tokens\n//     } else {\n//         tokens = (await exchangeAPI().getTokens())\n//     }\n//\n//     let ammpools: any = undefined\n//\n//     if (tradingInfo.ammPoolConf?.ammpools) {\n//         ammpools = tradingInfo.ammPoolConf.ammpools\n//     } else {\n//         ammpools = (await ammpoolAPI().getAmmPoolConf()).ammpools\n//     }\n//\n//     let ammPoolStats: { [key: string] : AmmPoolStat } = {}\n//\n//     if (tradingInfo.ammPoolStats.ammPoolStats) {\n//         ammPoolStats = tradingInfo.ammPoolStats.ammPoolStats\n//     } else {\n//         ammPoolStats = (await ammpoolAPI().getAmmPoolStats()).ammPoolStats\n//     }\n//\n//     return {\n//         tokens,\n//         ammpools,\n//         ammPoolStats,\n//     }\n// }","import { debug } from \"console\"\n\nexport function deepClone(data: any) {\n    if (!data || !(data instanceof Object) || (typeof data == \"function\")) {\n        return data || undefined\n    }\n    let constructor = data.constructor\n    let result = new constructor()\n    for (let key in data) {\n        if (data.hasOwnProperty(key)) {\n            result[key] = deepClone(data[key])\n        }\n    }\n    return result\n}\n\nexport async function copyToClipBoard(text: string){ //复制到剪切板\n\n    if(document.execCommand){\n        var textarea =document.createElement('textarea')\n        document.body.appendChild(textarea)\n        textarea.value=text\n        textarea.select()\n        document.execCommand(\"copy\")\n        document.body.removeChild(textarea)\n\t}\n\n    if (navigator.clipboard) {\n        await navigator.clipboard.writeText(text)\n    }\n\n\tif((window as any).clipboardData) {\n        (window as any).clipboardData.setData(\"Text\", text)\n\n        console.log('clipboardData:', text)\n        return true\n    }\n\treturn false\n}","import { useDispatch, useSelector } from 'react-redux'\nimport { reset, statusUnset, updateWalletLayer2 } from './reducer';\nimport { WalletLayer2States } from './interface';\nimport { myLog } from 'utils/log_tools';\nimport _ from 'lodash'\nimport React from 'react';\n\nexport function useWalletLayer2(): WalletLayer2States & {\n    delayAndUpdateWalletLayer2: () => Promise<void>,\n    updateWalletLayer2: () => void,\n    statusUnset: () => void,\n    resetLayer2: () => void,\n} {\n    const walletLayer2: WalletLayer2States = useSelector((state: any) => state.walletLayer2)\n    const dispatch = useDispatch();\n\n    // const updateWalletLayer2 = () => {\n    //     dispatch(walletLayer2Slice.actions.updateWalletLayer2(undefined))\n    // }\n    // const statusUnset = ()=>{\n    //     dispatch(walletLayer2Slice.actions.statusUnset(undefined))\n    // }\n    // const resetLayer2 = ()=>{\n    //     dispatch(walletLayer2Slice.actions.reset(undefined))\n    // }\n    return {\n        ...walletLayer2,\n        resetLayer2: React.useCallback(() => dispatch(reset(undefined)), [dispatch]),\n        statusUnset: React.useCallback(() => dispatch(statusUnset(undefined)), [dispatch]),\n        updateWalletLayer2: React.useCallback(() => dispatch(updateWalletLayer2(undefined)), [dispatch]),\n        delayAndUpdateWalletLayer2: React.useCallback(async () => {\n            myLog('try to delayAndUpdateWalletLayer2!' + new Date().getTime())\n            _.delay(() => {\n                dispatch(updateWalletLayer2(undefined))\n                myLog('try to delayAndUpdateWalletLayer2 updated!' + new Date().getTime())\n                return Promise.resolve()\n            }, 3000);\n        }, [dispatch]),\n    }\n\n}\n","import { InjectedConnector } from '@web3-react/injected-connector'\nimport { NetworkConnector } from '@web3-react/network-connector'\nimport { WalletConnectConnector } from '@web3-react/walletconnect-connector'\nimport { WalletLinkConnector } from '@web3-react/walletlink-connector'\nimport { LedgerConnector } from '@web3-react/ledger-connector'\nimport { TrezorConnector } from '@web3-react/trezor-connector'\nimport { AuthereumConnector } from '@web3-react/authereum-connector'\nimport { myLog } from 'utils/log_tools'\n\nconst POLLING_INTERVAL = 12000\n\nconst RPC_URLS: { [chainId: number]: string } = {\n  1: process.env.REACT_APP_RPC_URL_1 as string,\n  5: process.env.REACT_APP_RPC_URL_5 as string\n}\n\nmyLog('RPC_URLS 1:', RPC_URLS[1])\nmyLog('RPC_URLS 5:', RPC_URLS[5])\n\nexport const injected = new InjectedConnector({ supportedChainIds: [1, 5,] })\n\nexport const network = new NetworkConnector({\n  urls: RPC_URLS,\n  defaultChainId: 1\n})\n\nexport const walletconnect = new WalletConnectConnector({\n  rpc: RPC_URLS,\n  bridge: 'https://bridge.walletconnect.org',\n  qrcode: true,\n  pollingInterval: POLLING_INTERVAL\n})\n\nexport const walletlink = new WalletLinkConnector({\n  url: RPC_URLS[1],\n  appName: 'Loopring DEX'\n})\n\nexport const ledger = new LedgerConnector({ chainId: 1, url: RPC_URLS[1], pollingInterval: POLLING_INTERVAL })\n\nexport const trezor = new TrezorConnector({\n  chainId: 1,\n  url: RPC_URLS[1],\n  pollingInterval: POLLING_INTERVAL,\n  manifestEmail: 'dummy@abc.xyz',\n  manifestAppUrl: 'http://localhost:1234'\n})\n\nexport const authereum = new AuthereumConnector({ chainId: 42 })\n","import { createSlice, PayloadAction, Slice } from '@reduxjs/toolkit'\nimport { AmmMapStates, GetAmmMapParams } from './interface';\nimport { STATUS } from '../../constant';\n\n\n\nconst initialState: Required<AmmMapStates<object, object>> = {\n    ammMap: undefined,\n    __timer__: -1,\n    status: 'UNSET',\n    errorMessage: null,\n}\nconst ammMapSlice: Slice = createSlice({\n    name: 'ammMap',\n    initialState,\n    reducers: {\n        getAmmMap(state, action: PayloadAction<GetAmmMapParams>) {\n            state.status = STATUS.PENDING\n        },\n        getAmmMapStatus(state, action: PayloadAction<AmmMapStates<any, any>>) {\n            // @ts-ignore\n            if (action.error) {\n                state.status = STATUS.ERROR\n                // @ts-ignore\n                state.errorMessage = action.error\n            }\n            const {ammMap, __timer__} = action.payload\n            if (ammMap) {state.ammMap = ammMap;}\n            if (__timer__) {state.__timer__ = __timer__;}\n            state.status = STATUS.DONE\n        },\n        updateRealTimeAmmMap(state, action: PayloadAction<undefined>) {\n            state.status = STATUS.PENDING\n        },\n        statusUnset: state => {\n            state.status = STATUS.UNSET\n        }\n    },\n});\nexport { ammMapSlice };\nexport const {getAmmMap, getAmmMapStatus, statusUnset, updateRealTimeAmmMap} = ammMapSlice.actions\n","import { createSlice, PayloadAction, Slice } from '@reduxjs/toolkit'\n\nimport { TradingInterval, ChainId, ExchangeInfo, TokenInfo, TickerData, } from 'loopring-sdk'\n\nexport interface TradingInfo {\n  chainId: number\n  interval: TradingInterval\n  ammPoolStats: any\n  ammPoolConf: any\n  ammActivityRules: any\n  markets: any\n  marketTrades: any\n  tickerMap: {[key: string]: TickerData}\n  tokens: {[key: string]: [value: TokenInfo]}\n  exchangeInfo?: ExchangeInfo\n}\n\nconst defaultInterval = process.env.REACT_APP_TEST_INTERVAL ? process.env.REACT_APP_TEST_INTERVAL : TradingInterval.hr1\n\nconst initialState = {\n  chainId: ChainId.GORLI,\n  interval: defaultInterval,\n  ammPoolConf: {},\n  ammActivityRules: {},\n  ammPoolStats: {},\n  markets: [],\n  marketTrades: {},\n  tokens: {},\n  tickerMap: {},\n  refreshRate: 1000,\n  refreshRateSlow: 3000,\n} as TradingInfo\n\nconst tradingSlice:Slice = createSlice({\n  name: 'trading',\n  initialState,\n  reducers: {\n    setChainId(state, action: PayloadAction<number>) {\n      state.chainId = action.payload\n    },\n    changeTradingInterval(state, action: PayloadAction<any>) {\n      state.interval = action.payload\n    },\n    setTickerMap(state, action: PayloadAction<any>) {\n      state.tickerMap = action.payload\n    },\n    setAmmPoolStats(state, action: PayloadAction<any>) {\n      state.ammPoolStats = action.payload\n    },\n    setAmmActivityRules(state, action: PayloadAction<any>) {\n      state.ammActivityRules = action.payload\n    },\n    setAmmPoolConf(state, action: PayloadAction<any>) {\n      state.ammPoolConf = action.payload\n    },\n    setMarketTrades(state, action: PayloadAction<any>) {\n      state.marketTrades = action.payload\n    },\n    setMarkets(state, action: PayloadAction<any>) {\n      state.markets = action.payload\n    },\n    setTokens(state, action: PayloadAction<{}>) {\n      state.tokens = action.payload\n    },\n    setExchangeInfo(state, action: PayloadAction<ExchangeInfo>) {\n      state.exchangeInfo = action.payload\n    },\n  },\n})\n\nexport const {\n  setChainId, \n  setAmmPoolStats,\n  setAmmActivityRules,\n  setMarketTrades, \n  setTickerMap, \n  setAmmPoolConf, \n  changeTradingInterval, \n  setMarkets, \n  setTokens, \n  setExchangeInfo, \n} = tradingSlice.actions\n\nexport default tradingSlice\n","import { Provider } from 'react-redux'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nimport { createWeb3ReactRoot, Web3ReactProvider } from '@web3-react/core'\nimport store from 'stores'\n\nimport { getLibrary } from 'utils/web3_tools'\nimport { NetworkContextName } from 'loopring-sdk'\n\nimport { getTheme, i18n } from \"@loopring-web/common-resources\"\nimport { provider, ProviderComposer } from \"@loopring-web/common-resources\"\n\nimport { ThemeProvider as MuThemeProvider } from '@material-ui/core'\nimport LocalizationProvider from '@material-ui/pickers/LocalizationProvider'\n\nimport MomentUtils from '@material-ui/lab/AdapterMoment'\n\nimport { ThemeProvider } from \"@emotion/react\"\n\nimport { I18nextProvider } from \"react-i18next\"\n\nconst Web3ProviderNetwork = createWeb3ReactRoot(NetworkContextName)\nconst providers = [\n    provider(LocalizationProvider as any, {dateAdapter: MomentUtils}),\n    provider(I18nextProvider as any, {i18n:i18n}),\n    provider(MuThemeProvider as any, {theme: getTheme('dark')}),\n    provider(ThemeProvider as any, {theme: getTheme('dark')}),\n    provider(Provider as any, {store}),\n]\n\nReactDOM.render(\n// @ts-ignore\n    <ProviderComposer providers={providers}>\n        <Web3ReactProvider getLibrary={getLibrary}>\n            <Web3ProviderNetwork getLibrary={getLibrary}>\n                <App/>\n            </Web3ProviderNetwork>\n        </Web3ReactProvider>\n    </ProviderComposer>,\n    document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\nif (process.env.NODE_ENV !== 'production') {\n    reportWebVitals(console.log)\n}\n","import { useDispatch, useSelector } from 'react-redux'\nimport { updateWalletLayer1, reset,statusUnset } from './reducer';\nimport { WalletLayer1States } from './interface';\nimport React from 'react';\n\nexport function useWalletLayer1(): WalletLayer1States & {\n    updateWalletLayer1:()=> void,\n    statusUnset:()=> void,\n    resetLayer1:()=>void,\n} {\n    const walletLayer1:WalletLayer1States = useSelector((state: any) => state.walletLayer1)\n    const dispatch = useDispatch();\n\n    return {\n        ...walletLayer1,\n        resetLayer1:React.useCallback(()=>dispatch(reset(undefined)),[dispatch]),\n        statusUnset:React.useCallback(()=>dispatch(statusUnset(undefined)),[dispatch]),\n        updateWalletLayer1:React.useCallback(()=>dispatch(updateWalletLayer1(undefined)),[dispatch]),\n    }\n\n}\n","import { createSlice, PayloadAction, Slice } from '@reduxjs/toolkit'\nimport { STATUS } from '../constant';\nimport { StateBase } from '../interface';\nimport { SocketMap } from './interface';\n\nconst initialState: StateBase & {socket: SocketMap} = {\n  socket: {},\n  status: 'UNSET',\n  errorMessage: null,\n}\nconst socketSlice: Slice<StateBase & {socket: SocketMap}> = createSlice({\n  name: 'socket',\n  initialState,\n  reducers: {\n    socketEnd(state,action:PayloadAction<undefined>){\n      state.socket = {};\n      state.status = STATUS.PENDING;\n    },\n    sendSocketTopic(state, action: PayloadAction<{socket: SocketMap}>) {\n      state.socket = action.payload.socket\n    },\n    getSocketStatus(state, action: PayloadAction<undefined>) {\n\n      // @ts-ignore\n      if (action.error) {\n        state.status = STATUS.ERROR\n        // @ts-ignore\n        state.errorMessage = action.error\n      }\n      // state.socket = action.payload.socket\n      state.status = STATUS.DONE\n    },\n\n    statusUnset: state => {\n      state.status = STATUS.UNSET\n    }\n\n  },\n});\nexport { socketSlice };\nexport const { getSocketStatus, sendSocketTopic, socketEnd, statusUnset} = socketSlice.actions;\n","import { myLog } from \"utils/log_tools\"\n\nexport enum CONSTANTS {\n    Handler = 'handler',\n    AccountId = 'account_id',\n    Account = 'account',\n    Apikey = 'apikey',\n    Eddsakey = 'eddsakey',\n    ActiveTime = 'active_time',\n    AmmOrder = 'amm_order',\n    HardwareAddresses = 'hardware_addresses',\n}\n\nconst SESSION_TIMEOUT_SECONDS = 600\n\nexport class UserStorage {\n\n    public static getHandler() {\n        const rawHandler = sessionStorage.getItem(CONSTANTS.Handler)\n        try {\n            if (rawHandler !== undefined && rawHandler !== null)\n                return parseInt(rawHandler)\n        } catch (err) {\n        }\n        return undefined\n    }\n\n    public static setHandler(handler: any) {\n        sessionStorage.setItem(CONSTANTS.Handler, handler)\n    }\n\n    public static clearHandler() {\n        sessionStorage.removeItem(CONSTANTS.Handler)\n    }\n\n    public static checkTimeout(reset: boolean = false) : boolean {\n        let dateTimeStr = localStorage.getItem(CONSTANTS.ActiveTime)\n        let now = new Date().getTime()\n\n        if (dateTimeStr !== null && !reset) {\n            let tmpDt = new Date(parseInt(dateTimeStr))\n\n            if(now - tmpDt.getTime() > SESSION_TIMEOUT_SECONDS * 1000) {\n                myLog(`TIMEOUT! now:${now} dateTimeStr:${dateTimeStr} delta:${now - tmpDt.getTime()}`)\n                sessionStorage.clear()\n                localStorage.setItem(CONSTANTS.ActiveTime, now.toString())\n                return true\n            }\n        } else {\n            localStorage.setItem(CONSTANTS.ActiveTime, now.toString())\n        }\n\n        return false\n    }\n\n\n    public static getAccountId() {\n        const rawId = sessionStorage.getItem(CONSTANTS.AccountId)\n        try {\n            if (rawId)\n                return parseInt(rawId)\n        } catch (err) {\n        }\n        return undefined\n    }\n\n    public static setAccountId(accountId: number) {\n        sessionStorage.setItem(CONSTANTS.AccountId, accountId.toString())\n    }\n\n    public static getAccount() {\n        return sessionStorage.getItem(CONSTANTS.Account)\n    }\n\n    public static setAccount(account: string) {\n        sessionStorage.setItem(CONSTANTS.Account, account)\n    }\n\n    public static getApikey() {\n        return sessionStorage.getItem(CONSTANTS.Apikey)\n    }\n\n    public static setApikey(apikey: string) {\n        sessionStorage.setItem(CONSTANTS.Apikey, apikey)\n    }\n\n    public static getEddsakey() {\n        return sessionStorage.getItem(CONSTANTS.Eddsakey)\n    }\n\n    public static setEddsakey(eddsakey: string) {\n        sessionStorage.setItem(CONSTANTS.Eddsakey, eddsakey)\n    }\n\n    public static getAmmOrder(): string {\n        var orderHash = localStorage.getItem(CONSTANTS.AmmOrder)\n        return orderHash ? orderHash : ''\n    }\n\n    public static setAmmOrder(orderHash: string) {\n        localStorage.setItem(CONSTANTS.AmmOrder, orderHash)\n    }\n\n    public static clearAmmOrder() {\n        localStorage.removeItem(CONSTANTS.AmmOrder)\n    }\n\n    public static isHardwareAddress(address: string) {\n        let current = localStorage.getItem(CONSTANTS.HardwareAddresses)\n        if (current) {\n            if (current.includes(address.toLowerCase())) {\n                return true\n            }\n        }\n        return false\n    }\n\n    public static saveHardwareAddress(address: string) {\n        let current = localStorage.getItem(CONSTANTS.HardwareAddresses);\n        if (current) {\n            if (current.includes(address.toLowerCase()) !== true) {\n                let newValue = current + ',' + address.toLowerCase();\n                localStorage.setItem(CONSTANTS.HardwareAddresses, newValue);\n            }\n        } else {\n            localStorage.setItem(CONSTANTS.HardwareAddresses, address.toLowerCase());\n        }\n\n    }\n}\n","import { createSlice, PayloadAction, Slice } from '@reduxjs/toolkit'\nimport {  TickerStates } from './interface';\nimport { STATUS } from '../constant';\nimport { CoinKey } from '@loopring-web/common-resources';\n\nconst initialState:Required<TickerStates>  = {\n    tickerMap:{},\n    status:'UNSET',\n    errorMessage:null,\n}\nconst tickerMapSlice:Slice = createSlice({\n    name: 'tickerMap',\n    initialState,\n    reducers: {\n        getTicker(state, action:PayloadAction<CoinKey<any>>) {\n            state.status = STATUS.PENDING\n        },\n        getTickers(state, action:PayloadAction<Array<CoinKey<any>>>) {\n            state.status = STATUS.PENDING\n        },\n        getTickerStatus(state, action: PayloadAction<TickerStates>) {\n            // @ts-ignore\n            if (action.error) {\n                state.status =  STATUS.ERROR\n                // @ts-ignore\n                state.errorMessage = action.error\n            }\n            state.tickerMap = action.payload.tickerMap;//{...state.tickerMap,...};\n            state.status = STATUS.DONE\n        },\n        statusUnset: state => {\n            state.status = STATUS.UNSET\n        }\n\n    },\n});\nexport { tickerMapSlice };\nexport const { getTicker,getTickers, getTickerStatus, statusUnset } = tickerMapSlice.actions;","import { createSlice, PayloadAction, Slice } from '@reduxjs/toolkit'\nimport { WalletLayer2Map, WalletLayer2States } from './interface';\nimport { STATUS } from '../constant';\n\n\nconst initialState:WalletLayer2States  = {\n    walletLayer2:undefined,\n    status:'UNSET',\n    errorMessage:null,\n}\nconst walletLayer2Slice:Slice = createSlice({\n    name: 'walletLayer2',\n    initialState,\n    reducers: {\n        updateWalletLayer2(state, action:PayloadAction<string | undefined>) {\n            state.status = STATUS.PENDING\n        },\n        reset(state, action:PayloadAction<string | undefined>) {\n            state.walletLayer2 = undefined;\n            state.status = STATUS.UNSET;\n        },\n        getWalletLayer2Status(state, action: PayloadAction<{ walletLayer2:WalletLayer2Map<object> }>) {\n            // @ts-ignore\n            if (action.error) {\n                state.status =  STATUS.ERROR\n                // @ts-ignore\n                state.errorMessage = action.error\n            }\n            state.walletLayer2 = {...action.payload.walletLayer2};\n            state.status = STATUS.DONE\n        },\n        statusUnset: state => {\n            state.status = STATUS.UNSET\n        }\n    },\n});\nexport { walletLayer2Slice };\nexport const {  updateWalletLayer2,getWalletLayer2Status,statusUnset,reset } = walletLayer2Slice.actions\n","import { useMemo, useState, useEffect } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\n\nimport { Web3Provider } from '@ethersproject/providers'\nimport { Web3ReactContextInterface } from '@web3-react/core/dist/types'\n\nimport { useWeb3React } from '@web3-react/core'\n\nimport { injected } from 'networks/web3_connectors'\n\nimport { ChainId, NetworkContextName } from 'loopring-sdk'\n\n/*\nimport EXCHANGE_ABI from 'config/abis/exchange_3_6.json'\nimport ERC20_ABI from 'config/abis/erc20.json'\nimport DEPOSIT_ABI from 'config/abis/deposit.json'\n\nimport Web3 from 'web3'\n*/\n\nexport function useActiveWeb3React(): Web3ReactContextInterface<Web3Provider> & { chainId?: ChainId } {\n  const context = useWeb3React<Web3Provider>()\n  const contextNetwork = useWeb3React<Web3Provider>(NetworkContextName)\n  return context.active ? context : contextNetwork\n}\n\nexport function useEtherscan() {\n  const { chainId } = useActiveWeb3React()\n\n  const [etherscanUrl, setEtherscanUrl] = useState<string>('')\n\n  useEffect(() => {\n    switch(chainId) {\n      case ChainId.MAINNET:\n        setEtherscanUrl('https://etherscan.io/address/')\n        break\n      default:\n        setEtherscanUrl('https://goerli.etherscan.io/address/')\n    }\n  }, [chainId])\n\n  return {\n    etherscanUrl,\n  }\n}\n\nexport function useEagerConnect() {\n\n  const { activate, active } = useWeb3React()\n\n  const [tried, setTried] = useState(false)\n\n  useEffect(() => {\n    injected.isAuthorized().then((isAuthorized: boolean) => {\n      if (isAuthorized) {\n        console.log('useEagerConnect isAuthorized')\n        activate(injected, undefined, true).catch(() => {\n          setTried(true)\n        })\n      } else {\n        console.log('useEagerConnect NOT isAuthorized')\n        setTried(true)\n      }\n    })\n  }, []) // intentionally only running on mount (make sure it's only mounted once :))\n\n  // if the connection worked, wait until we get confirmation of that to flip the flag\n  useEffect(() => {\n    if (!tried && active) {\n      setTried(true)\n    }\n  }, [tried, active])\n\n  return tried\n}\n\nexport function useInactiveListener(onReConnectInjected: any = undefined, suppress: boolean = false) {\n  const { active, error, activate, chainId, } = useWeb3React()\n  const dispatch = useDispatch()\n\n  useEffect((): any => {\n    const { ethereum } = window as any\n\n    const reConnectInjected = () => {\n      console.log('--------------------------> reConnectInjected')\n      activate(injected)\n      if (onReConnectInjected) {\n        onReConnectInjected()\n      }\n    }\n\n    if (ethereum && ethereum.on && !active && !error) {\n\n      const handleChainChanged = (chainId: string | number) => {\n        console.log('Handling \\'chainChanged\\' event with payload', chainId)\n        reConnectInjected()\n      }\n      const handleAccountsChanged = (accounts: string[]) => {\n        console.log('---------------------------------------------')\n        console.log('Handling \\'accountsChanged\\' event with payload', accounts)\n        console.log('before reset accounts.length=', accounts.length)\n        if (accounts.length > 0) {\n          console.log('before reset!!!!!!!!!!!!!!!!1')\n          reConnectInjected()\n        }\n      }\n\n      ethereum.on('chainChanged', handleChainChanged)\n      ethereum.on('accountsChanged', handleAccountsChanged)\n\n      return () => {\n        if (ethereum.removeListener) {\n          ethereum.removeListener('chainChanged', handleChainChanged)\n          ethereum.removeListener('accountsChanged', handleAccountsChanged)\n        }\n      }\n    }\n  }, [active, error, chainId, activate, dispatch])\n}\n\nexport function useBlockNumber() {\n  const { library, chainId } = useActiveWeb3React()\n\n  const [blockNumber, setBlockNumber] = useState<number>()\n\n  useEffect((): any => {\n      if (!!library) {\n          let stale = false\n\n          library\n              .getBlockNumber()\n              .then((blockNumber: number) => {\n                  if (!stale) {\n                      setBlockNumber(blockNumber)\n                  }\n              })\n              .catch(() => {\n                  if (!stale) {\n                      setBlockNumber(-1)\n                  }\n              })\n\n          const updateBlockNumber = (blockNumber: number) => {\n              setBlockNumber(blockNumber)\n          }\n          library.on('block', updateBlockNumber)\n\n          return () => {\n              stale = true\n              library.removeListener('block', updateBlockNumber)\n              setBlockNumber(undefined)\n          }\n      }\n  }, [library, chainId])\n\n  return {\n      blockNumber,\n  }\n}\n\nexport function useBalance() {\n  const { account, library, chainId } = useActiveWeb3React()\n\n  const [balance, setBalance] = useState<number>()\n  useEffect((): any => {\n      if (!!account && !!library) {\n          let stale = false\n\n          library\n              .getBalance(account)\n              .then((balance: any) => {\n                  if (!stale) {\n                      setBalance(balance)\n                  }\n              })\n              .catch(() => {\n                  if (!stale) {\n                      setBalance(0)\n                  }\n              })\n\n          return () => {\n              stale = true\n              setBalance(0)\n          }\n      }\n  }, [account, library, chainId]) // ensures refresh if referential identity of library doesn't change across chainIds\n\n  return {\n      balance,\n  }\n}\n","import { useDispatch, useSelector } from 'react-redux'\nimport { getUserRewards, statusUnset } from './reducer';\nimport { UserRewardsStates } from './interface';\nimport React from 'react';\n\nexport function useUserRewards(): UserRewardsStates & {\n    getUserRewards:()=>void,\n    statusUnset:()=>void,\n} {\n    const userRewardsMap:UserRewardsStates = useSelector((state: any) => state.userRewardsMap)\n    const dispatch = useDispatch();\n    return {\n        ...userRewardsMap,\n        statusUnset:React.useCallback(()=>dispatch(statusUnset(undefined)),[dispatch]),\n        getUserRewards: React.useCallback(()=>dispatch(getUserRewards(undefined)),[dispatch]),\n    }\n\n}\n","import { StateBase } from '../interface';\nimport { ChainId, ExchangeInfo } from 'loopring-sdk';\n\nexport enum ENV {\n    DEV='DEV',\n    UAT='UAT',\n    PROD='PROD',\n}\nexport enum NETWORKEXTEND {\n    NONETWORK = 'unknown'\n}\nexport type NETWORK = NETWORKEXTEND | ChainId\n\n\nexport type System<C extends {[key:string]:any}> = {\n    env:keyof typeof ENV,\n    chainId: 1|5|'unknown'\n    // network: keyof typeof NETWORK,\n    socketURL:string,\n    baseURL: string,\n    faitPrices:{ [k in keyof C]:{price:any,[key:string]:any}} | undefined,\n    gasPrice:number | undefined,\n    forex:number | undefined,\n    exchangeInfo: ExchangeInfo | undefined,\n\n}\n\nexport type SystemStatus = System<{[key:string]:any}> & {\n    // system:System | {}\n    __timer__:NodeJS.Timeout | -1\n    topics: any[]\n}  & StateBase\n\n\n\n","import { createSlice, PayloadAction, Slice } from '@reduxjs/toolkit'\nimport { WalletLayer1Map, WalletLayer1States } from './interface';\nimport { STATUS } from '../constant';\n\n\nconst initialState:WalletLayer1States  = {\n    walletLayer1:undefined,\n    status:'UNSET',\n    errorMessage:null,\n}\nconst walletLayer1Slice:Slice = createSlice({\n    name: 'walletLayer1',\n    initialState,\n    reducers: {\n        updateWalletLayer1(state, action:PayloadAction<string | undefined>) {\n            state.status = STATUS.PENDING\n        },\n        reset(state, action:PayloadAction<string | undefined>) {\n            state.walletLayer1 = undefined;\n            state.status = STATUS.UNSET;\n        },\n        getWalletLayer1Status(state, action: PayloadAction<{ walletLayer1:WalletLayer1Map<object> }>) {\n            // @ts-ignore\n            if (action.error) {\n                state.status =  STATUS.ERROR\n                // @ts-ignore\n                state.errorMessage = action.error\n            }\n            state.walletLayer1 = {...action.payload.walletLayer1};\n            state.status = STATUS.DONE\n        },\n        statusUnset: state => {\n            state.status = STATUS.UNSET\n        }\n    },\n});\nexport { walletLayer1Slice };\nexport const { updateWalletLayer1, getWalletLayer1Status,statusUnset,reset } = walletLayer1Slice.actions\n","import { createSlice, PayloadAction, Slice } from '@reduxjs/toolkit'\nimport {  UserRewardsStates } from './interface';\nimport { STATUS } from '../constant';\n\nconst initialState:UserRewardsStates = {\n    userRewardsMap:undefined,\n    status:'UNSET',\n    errorMessage:null,\n    __timer__:-1,\n}\nconst userRewardsMapSlice:Slice<UserRewardsStates> = createSlice({\n    name: 'userRewardsMap',\n    initialState,\n    reducers: {\n        getUserRewards(state, action:PayloadAction<undefined>) {\n            state.status = STATUS.PENDING\n        },\n        getUserRewardsStatus(state, action: PayloadAction<UserRewardsStates>) {\n            // @ts-ignore\n            if (action.error) {\n                state.status =  STATUS.ERROR\n                // @ts-ignore\n                state.errorMessage = action.error\n            }\n            state.userRewardsMap = {...state.userRewardsMap,...action.payload.userRewardsMap};\n            if(action.payload.__timer__){\n                state.__timer__  =  action.payload.__timer__\n            }\n            state.status = STATUS.DONE\n        },\n        statusUnset: state => {\n            state.status = STATUS.UNSET\n        }\n\n    },\n});\nexport { userRewardsMapSlice };\nexport const { getUserRewards, getUserRewardsStatus, statusUnset } = userRewardsMapSlice.actions;","import { createSlice, PayloadAction, Slice } from '@reduxjs/toolkit'\nimport { AmmActivityMapStates } from './interface';\nimport { STATUS } from '../../constant';\n\n\nconst initialState:Required<AmmActivityMapStates>  = {\n    ammActivityMap:{},\n    status:'UNSET',\n    errorMessage:null,\n}\nconst ammActivityMapSlice:Slice = createSlice({\n    name: 'ammActivityMap',\n    initialState,\n    reducers: {\n        getAmmActivityMap(state, action:PayloadAction<string | undefined>) {\n            state.status = STATUS.PENDING\n        },\n        getAmmActivityMapStatus(state, action: PayloadAction<AmmActivityMapStates>) {\n            // @ts-ignore\n            if (action.error) {\n                state.status =  STATUS.ERROR\n                // @ts-ignore\n                state.errorMessage = action.error\n            }\n            state.ammActivityMap = {...action.payload.ammActivityMap};\n            state.status = STATUS.DONE\n        },\n        statusUnset: state => {\n            state.status = STATUS.UNSET\n        }\n\n    },\n});\nexport { ammActivityMapSlice };\nexport const { getAmmActivityMap, getAmmActivityMapStatus, statusUnset } = ammActivityMapSlice.actions\n","import { createSlice, PayloadAction, Slice } from '@reduxjs/toolkit'\nimport { GetTokenMapParams, TokenMapStates } from './interface';\nimport { STATUS } from '../constant';\n\nconst initialState: TokenMapStates<object> = {\n    coinMap: {},\n    totalCoinMap: {},\n    addressIndex: undefined,\n    tokenMap: undefined,\n    marketMap: undefined,\n    idIndex: undefined,\n    status: 'UNSET',\n    errorMessage: null,\n}\nconst tokenMapSlice: Slice<TokenMapStates<object>> = createSlice({\n    name: 'tokenMap',\n    initialState,\n    reducers: {\n        getTokenMap(state, action: PayloadAction<GetTokenMapParams<any>>) {\n            state.status = STATUS.PENDING\n        },\n        getTokenMapStatus(state, action: PayloadAction<TokenMapStates<object>>) {\n            // @ts-ignore      console.log(action.type)\n            if (action.error) {\n                state.status = STATUS.ERROR\n                // @ts-ignore\n                state.errorMessage = action.error\n            }\n\n            const {tokenMap, totalCoinMap, marketMap, addressIndex, idIndex, coinMap, marketArray, marketCoins} = action.payload;\n            if (tokenMap) { state.tokenMap = tokenMap }\n            if (marketMap) { state.marketMap = marketMap }\n            if (addressIndex) { state.addressIndex = addressIndex }\n            if (idIndex) { state.idIndex = idIndex }\n            if (coinMap) { state.coinMap = coinMap }\n            if (totalCoinMap) { state.totalCoinMap = totalCoinMap }\n            if (marketArray) { state.marketArray = marketArray }\n            if (marketCoins)  { state.marketCoins = marketCoins }\n            // if (tokenPairsMap) {state.tokenPairsMap = tokenPairsMap }\n            state.status = STATUS.DONE;\n        },\n        \n        // getTokenPairMap(state, action: PayloadAction<{tokenPairs: TokenPairs }>) {\n        //     const {tokenPairs} = action.payload;\n        //     const tokenPairsMap =  Reflect.ownKeys(tokenPairs).reduce((prev,key)=>{\n        //         // @ts-ignore\n        //         return prev[key as string] =  tokenPairs[key as string].tokenList\n        //     }, {} )\n        //     if (tokenPairsMap) {state.tokenPairsMap = tokenPairsMap }\n        //     // state.status = STATUS.PENDING\n        // },\n        statusUnset: state => {\n            state.status = STATUS.UNSET\n        }\n\n    },\n});\nexport { tokenMapSlice };\nexport const {getTokenMap, getTokenMapStatus, statusUnset} = tokenMapSlice.actions;","import { createSlice, PayloadAction, Slice } from '@reduxjs/toolkit'\nimport { ENV, System, SystemStatus } from './interface';\nimport { STATUS } from '../constant';\n\nconst initialState: SystemStatus = {\n    env: ENV.PROD,\n    chainId: 'unknown',\n    // network:'NONETWORK',\n    baseURL: '',\n    socketURL: '',\n    faitPrices: undefined,\n    gasPrice: undefined,\n    forex: undefined,\n    __timer__: -1,\n    status: 'UNSET',\n    errorMessage: null,\n\n    exchangeInfo: undefined,\n\n    topics: [],\n}\nconst systemSlice: Slice<SystemStatus> = createSlice({\n    name: 'system',\n    initialState,\n    reducers: {\n\n        updateSystem(state, action: PayloadAction<System<{[key:string]:any}>>) {\n            state.chainId = action.payload.chainId\n            state.status = STATUS.PENDING\n        },\n        updateSocketURL(state, action:PayloadAction<{socketURL:string}>) {\n            state.socketURL =  action.payload.socketURL;\n        },\n        updateRealTimeObj(state, action: PayloadAction<Partial<{ faitPrices: any, gasPrice: number, forex: number }>>) {\n            const {forex, faitPrices, gasPrice} = action.payload;\n            if (forex) {\n                state.forex = forex\n            }\n            if (faitPrices) {\n                state.faitPrices = faitPrices\n            }\n            if (gasPrice) {\n                state.gasPrice = gasPrice\n            }\n\n\n            // state = {\n            //     ...state.system,\n            //     forex: forex?,\n            //     faitPrices: action.payload.faitPrices ? action.payload.faitPrices : state.system.faitPrices,\n            //     gasPrice: action.payload.gasPrice ? action.payload.gasPrice : state.system.gasPrice,\n            // };\n\n        },\n        getSystemStatus(state, action: PayloadAction<Partial<SystemStatus>>) {\n\n            // @ts-ignore\n            if (action.error) {\n                state.status = STATUS.ERROR\n                // @ts-ignore\n                state.errorMessage = action.error\n            }\n            const {env, baseURL, faitPrices, gasPrice, forex, exchangeInfo, __timer__} = action.payload;\n            if (env) {\n                state.env = env\n            }\n            if (baseURL) {\n                state.baseURL = baseURL\n            }\n            if (faitPrices) {\n                state.faitPrices = faitPrices\n            }\n            if (gasPrice) {\n                state.gasPrice = gasPrice\n            }\n            if (forex) {\n                state.forex = forex\n            }\n            \n            if (exchangeInfo) {\n                state.exchangeInfo = exchangeInfo\n            }\n\n            if (__timer__) {\n                state.__timer__ = __timer__\n            }\n            state.status = STATUS.DONE\n        },\n        statusUnset: state => {\n            state.status = STATUS.UNSET\n        }\n\n    },\n});\nexport { systemSlice };\nexport const {updateSystem, setTopics, getSystemStatus, statusUnset, updateRealTimeObj, updateSocketURL} = systemSlice.actions;","import { AmmpoolAPI, ChainId, ExchangeAPI, UserAPI, WalletAPI, WsAPI } from \"loopring-sdk\"\nimport { getChainId } from 'stores/trading/hook'\n\nexport const walletAPI = () => {\n    const walletApi = new WalletAPI(getChainId() as ChainId)\n    return walletApi\n}\n\nexport const userAPI = () => {\n    const userApi = new UserAPI(getChainId() as ChainId)\n    return userApi\n}\n\nexport const exchangeAPI = () => {\n    const exchangeApi = new ExchangeAPI(getChainId() as ChainId)\n    return exchangeApi\n}\n\nexport const ammpoolAPI = () => {\n    const ammpoolApi = new AmmpoolAPI(getChainId() as ChainId)\n    return  ammpoolApi\n}\n\nexport const wsAPI = () => {\n    const wsApi = new WsAPI(getChainId() as ChainId)\n    return wsApi\n}\n\nexport class LoopringAPI {\n    \n    public static userAPI: UserAPI | undefined = undefined\n    public static exchangeAPI: ExchangeAPI | undefined = undefined\n    public static ammpoolAPI: AmmpoolAPI | undefined = undefined\n    public static walletAPI: WalletAPI | undefined = undefined\n    public static wsAPI: WsAPI | undefined = undefined\n\n    public static InitApi = (chainId: ChainId) => {\n        LoopringAPI.userAPI = new UserAPI(chainId) \n        LoopringAPI.exchangeAPI = new ExchangeAPI(chainId) \n        LoopringAPI.ammpoolAPI = new AmmpoolAPI(chainId) \n        LoopringAPI.walletAPI = new WalletAPI(chainId) \n        LoopringAPI.wsAPI = new WsAPI(chainId) \n    }\n\n}\n","import {\n    AmmPoolActivityRule,\n    AmmPoolActivityStatus,\n    AmmPoolSnapshot,\n    LoopringMap,\n    TickerData,\n    toBig,\n} from 'loopring-sdk';\nimport { AmmActivity, AmmCardProps } from '@loopring-web/common-resources';\nimport store from '../../stores';\nimport { deepClone } from '../../utils/obj_tools';\nimport { AmmUserReward, AmmUserRewardMap } from 'loopring-sdk/dist/defs/loopring_defs';\nimport BigNumber from 'bignumber.js';\nimport { MyAmmLP } from '@loopring-web/common-resources';\nimport { volumeToCount, volumeToCountAsBigNumber } from './volumeToCount';\nimport { coinMap } from '@loopring-web/component-lib';\nimport { AmmDetailStore } from '../../stores/Amm/AmmMap';\nimport { WalletMapExtend } from './makeWallet';\n\nexport type AmmActivityViewMap<R, I> = {\n    [key in keyof R]?: AmmActivity<I>[] | undefined\n}\nexport const makeUIAmmActivityMap = <R extends { [ key: string ]: any }, I extends { [ key: string ]: any }>\n({ammActivityMap, type, ammPoolActivityStatus}: {\n    ammActivityMap: LoopringMap<LoopringMap<AmmPoolActivityRule[ ]>> | undefined,\n    type: 'AMM_MINING' | 'SWAP_VOLUME_RANKING',\n    ammPoolActivityStatus: AmmPoolActivityStatus[]\n}, myReward: AmmUserRewardMap | undefined):\n    Array<AmmCardProps<I>> => {\n    const {coinMap, tokenMap, idIndex} = store.getState().tokenMap\n    let ammActivityViewMap: AmmActivityViewMap<R, I> = {}\n    if (ammActivityMap && ammActivityMap[ type ]) {\n\n\n        // @ts-ignore\n        ammPoolActivityStatus.forEach((status: AmmPoolActivityStatus) => {\n\n            if (ammActivityMap[ type ][ status ]) {\n                // @ts-ignore\n                ammActivityMap[ type ][ status ].reduce((prev: AmmActivityViewMap<R, I>, ammPoolActivityRule: AmmPoolActivityRule) => {\n\n                    if (coinMap && ammPoolActivityRule.awardRules[ 0 ] && idIndex && tokenMap) {\n\n                        const symbol = idIndex[ ammPoolActivityRule.awardRules[ 0 ].tokenId as any ]\n\n                        // @ts-ignore\n                        const item = {\n                            // @ts-ignore\n                            rewardToken: coinMap[ symbol ],\n                            myRewards: status === AmmPoolActivityStatus.InProgress && myReward && myReward[ ammPoolActivityRule.market ] ?\n                                volumeToCount(symbol, myReward[ ammPoolActivityRule.market ]?.currentRewards[ 0 ].volume) : 0,\n                            duration: {\n                                from: new Date(ammPoolActivityRule?.rangeFrom),\n                                to: new Date(ammPoolActivityRule?.rangeTo),\n                            },\n                            isPass: AmmPoolActivityStatus.EndOfGame === status,\n                        }\n                        if (prev[ ammPoolActivityRule.market ]) {\n                            // @ts-ignore\n                            prev[ ammPoolActivityRule.market ].push(item);\n                        } else {\n                            // @ts-ignore\n                            prev[ ammPoolActivityRule.market ] = [item];\n                        }\n\n\n                        // return prev;\n                    }\n                    return prev;\n                }, ammActivityViewMap)\n\n            }\n        })\n    }\n    const resultArray = makeAsCard(ammActivityViewMap)\n    // console.log(resultArray)\n    return resultArray;\n\n\n}\nconst makeAsCard = <R extends { [ key: string ]: any }, I extends { [ key: string ]: any }>\n(ammActivityViewMap: AmmActivityViewMap<R, I> | undefined, myReward?: any): Array<AmmCardProps<I>> => {\n    const {coinMap} = store.getState().tokenMap\n    const {ammMap} = store.getState().amm.ammMap\n    try {\n        if (ammActivityViewMap && coinMap) {\n            // @ts-ignore\n            return Reflect.ownKeys(ammActivityViewMap).reduce((prev: Array<AmmCardProps<I>>, key: string) => {\n                const _ammInfo = ammMap[ key as string ]\n                if (_ammInfo && _ammInfo.coinA && coinMap && ammActivityViewMap[ key ]) {\n\n                    // @ts-ignore\n                    const itemArray = ammActivityViewMap[ key ].map((item) => {\n                        return {\n                            ...deepClone(_ammInfo),\n                            // @ts-ignore\n                            coinAInfo: coinMap[ _ammInfo.coinA ],\n                            // @ts-ignore\n                            coinBInfo: coinMap[ _ammInfo.coinB ],\n                            activity: item,\n                        }\n                    })\n                    prev = [...prev, ...itemArray]\n                }\n                return prev;\n            }, [] as Array<AmmCardProps<I>>) as Array<AmmCardProps<I>>\n        } else {\n            return [] as Array<AmmCardProps<I>>\n        }\n    } catch (error) {\n        console.log(error)\n        return []\n    }\n}\ntype Value = undefined | number;\nexport type SummaryMyAmm = {\n    rewardDollar: Value,\n    rewardYuan: Value,\n    feeDollar: Value,\n    feeYuan: Value,\n}\nexport const makeSummaryMyAmm = <C extends { [ key: string ]: any }>({\n                                                                         userRewardsMap\n                                                                     }: {\n    userRewardsMap: LoopringMap<AmmUserReward> | undefined\n}):\n    SummaryMyAmm | undefined => {\n    const {coinMap, idIndex, tokenMap} = store.getState().tokenMap;\n    const {faitPrices, forex} = store.getState().system;\n    if (userRewardsMap && idIndex && coinMap && tokenMap && faitPrices && forex) {\n        let summaryMyAmm = Object.keys(userRewardsMap).reduce((prev, key) => {\n            if (/AMM-/i.test(key)) {\n                // @ts-ignore\n                const [, coinA, coinB] = key.match(/AMM-(\\w+)-(\\w+)/i);\n                const ammUserReward = userRewardsMap[ key ]\n                const {\n                    rewardDollar,\n                    rewardYuan,\n                    feeDollar,\n                    feeYuan\n                } = getOneRewardInfo({coinB, coinA, ammUserReward, idIndex, faitPrices, forex})\n                prev.rewardDollar = rewardDollar ? toBig(rewardDollar).plus(prev.rewardDollar).toNumber() : 0;\n                prev.rewardYuan = rewardYuan ? toBig(rewardYuan).plus(prev.rewardYuan).toNumber() : 0;\n                prev.feeDollar = feeDollar ? toBig(feeDollar).plus(prev.feeDollar).toNumber() : 0;\n                prev.feeYuan = feeYuan ? toBig(feeYuan).plus(prev.feeYuan).toNumber() : 0;\n            }\n            return prev\n        }, {\n            rewardDollar: 0,\n            rewardYuan: 0,\n            feeDollar: 0,\n            feeYuan: 0\n        })\n\n        return summaryMyAmm\n    }\n    return undefined\n}\nconst getOneRewardInfo = <C>({\n                                 coinA,\n                                 coinB,\n                                 ammUserReward,\n                                 idIndex,\n                                 faitPrices,\n                                 forex,\n                                 walletMap,\n                                 snapShotData\n                             }: any) => {\n    let rewardToken, rewardToken2, feeA, feeB, feeDollar, feeYuan, reward, reward2, rewardDollar, rewardYuan;\n    if (ammUserReward) {\n        rewardToken = ammUserReward.currentRewards[ 0 ] ? idIndex[ ammUserReward.currentRewards[ 0 ].tokenId as number ] : undefined\n        rewardToken2 = ammUserReward.currentRewards[ 1 ] ? idIndex[ ammUserReward.currentRewards[ 1 ].tokenId as number ] : undefined\n        feeA = ammUserReward ? volumeToCountAsBigNumber(coinA, ammUserReward.feeRewards[ 0 ]) : toBig(0);\n        feeB = ammUserReward ? volumeToCountAsBigNumber(coinB, ammUserReward.feeRewards[ 1 ]) : toBig(0);\n        feeA = feeA ? feeA : toBig(0);\n        feeB = feeB ? feeB : toBig(0);\n        feeDollar = feeA.times(faitPrices[ coinA ].price).plus(feeB.times(faitPrices[ coinB ].price))\n        feeYuan = feeDollar.times(forex);\n        reward = rewardToken ? volumeToCountAsBigNumber(rewardToken, ammUserReward.currentRewards[ 0 ].volume) as BigNumber : toBig(0);\n        reward2 = rewardToken2 ? volumeToCountAsBigNumber(rewardToken2, ammUserReward.currentRewards[ 1 ].volume) as BigNumber : toBig(0);\n        reward = reward ? reward : toBig(0);\n        reward2 = reward2 ? reward2 : toBig(0);\n        rewardDollar = reward.times(rewardToken ? faitPrices[ rewardToken ].price : 1).plus(reward2.times(rewardToken2 ? faitPrices[ rewardToken2 ].price : 1));\n        rewardYuan = rewardDollar.times(forex);\n    }\n    let balanceA, balanceB, balanceDollar, balanceYuan;\n    if (walletMap && walletMap[ 'LP-' + coinA + '-' + coinB ] && snapShotData) {\n        // @ts-ignore\n        const ratio = new BigNumber(walletMap[ 'LP-' + coinA + '-' + coinB ].count).div(snapShotData.ammPoolsBalance.lp.volume);\n        balanceA = ratio.times(volumeToCountAsBigNumber(coinA, snapShotData.ammPoolsBalance.pooled[ 0 ].volume) || 1);\n        balanceB = ratio.times(volumeToCountAsBigNumber(coinB, snapShotData.ammPoolsBalance.pooled[ 1 ].volume) || 1);\n        // @ts-ignore\n        balanceDollar = balanceA.times(faitPrices[ coinA ].price).plus(balanceB.times(faitPrices[ coinB ].price))\n        balanceYuan = balanceDollar.times(forex)\n    }\n\n    return {\n        feeA: feeA ? feeA.toNumber() : undefined,\n        feeB: feeB ? feeB.toNumber() : undefined,\n        reward: reward ? reward.toNumber() : undefined,\n        rewardToken: rewardToken ? coinMap[ rewardToken ] : undefined,\n        reward2: reward2 ? reward2.toNumber() : undefined,\n        rewardToken2: rewardToken2 ? coinMap[ rewardToken2 ] : undefined,\n        rewardDollar: rewardDollar ? rewardDollar.toNumber() : undefined,\n        rewardYuan: rewardYuan ? rewardYuan.toNumber() : undefined,\n        feeDollar: feeDollar ? feeDollar.toNumber() : undefined,\n        feeYuan: feeYuan ? feeYuan.toNumber() : undefined,\n        ammDetail: {\n            coinAInfo: coinMap[ coinA ],\n            coinBInfo: coinMap[ coinB ]\n        },\n        balanceA: balanceA ? balanceA.toNumber() : undefined,\n        balanceB: balanceB ? balanceB.toNumber() : undefined,\n        balanceDollar: balanceDollar ? balanceDollar.toNumber() : undefined,\n        balanceYuan: balanceYuan ? balanceYuan.toNumber() : undefined,\n    } as MyAmmLP<C>\n}\n\nexport const makeMyAmmWithSnapshot = <C extends { [ key: string ]: any }>(market: any, _walletMap: WalletMapExtend<C> | undefined, ammUserRewardMap: LoopringMap<AmmUserReward> | undefined, snapShotData?: {\n    tickerData?: TickerData | undefined\n    ammPoolsBalance: AmmPoolSnapshot | undefined\n} | undefined) => {\n    const {coinMap, idIndex, tokenMap} = store.getState().tokenMap;\n    const {faitPrices, forex} = store.getState().system;\n    const [, coinA, coinB] = market.match(/(\\w+)-(\\w+)/i);\n    let _myAmm: Partial<MyAmmLP<C>> = {};\n    if (ammUserRewardMap && ammUserRewardMap[ 'AMM-' + market ]\n        && snapShotData && snapShotData.ammPoolsBalance) {\n        const ammUserReward: AmmUserReward = ammUserRewardMap[ 'AMM-' + market ];\n        // @ts-ignore\n        if (coinMap && tokenMap && idIndex && forex && faitPrices) {\n            _myAmm = getOneRewardInfo({\n                coinA, coinB, ammUserReward,\n                idIndex, faitPrices, forex, walletMap: _walletMap, snapShotData\n            })\n\n            return _myAmm as MyAmmLP<C>\n        }\n    }\n    return {\n        feeA: undefined,\n        feeB: undefined,\n        feeDollar: undefined,\n        feeYuan: undefined,\n        reward: undefined,\n        rewardToken: undefined as any,\n        balanceA: undefined,\n        balanceB: undefined,\n        balanceYuan: undefined,\n        balanceDollar: undefined,\n    }\n}\n\nexport const makeMyAmmWithStat = <C extends { [ key: string ]: any }>\n(market: any,\n _walletMap: WalletMapExtend<C> | undefined,\n ammUserRewardMap: LoopringMap<AmmUserReward> | undefined,\n ammDetail: AmmDetailStore<C>) => {\n    const {coinMap, idIndex, tokenMap} = store.getState().tokenMap;\n    const {faitPrices, forex} = store.getState().system;\n    const [, coinA, coinB] = market.match(/(\\w+)-(\\w+)/i);\n    let _myAmm = {};\n    let balanceA, balanceB, balanceDollar, balanceYuan;\n    if (_walletMap && _walletMap[ 'LP-' + coinA + '-' + coinB ] && forex) {\n        // @ts-ignore\n        const ratio = new BigNumber(_walletMap[ 'LP-' + coinA + '-' + coinB ].count).div(ammDetail.totalLPToken);\n        balanceA = ratio.times(volumeToCountAsBigNumber(coinA, ammDetail.totalA ? ammDetail.totalA : 0) || 1);\n        balanceB = ratio.times(volumeToCountAsBigNumber(coinB, ammDetail.totalB ? ammDetail.totalB : 0) || 1);\n        // @ts-ignore\n        balanceDollar = balanceA.times(faitPrices[ coinA ].price).plus(balanceB.times(faitPrices[ coinB ].price))\n        balanceYuan = balanceDollar.times(forex);\n        _myAmm = {\n            // ...ammDetail,\n            balanceA: balanceA.toNumber(),\n            balanceB: balanceB.toNumber(),\n            balanceYuan: balanceYuan.toNumber(),\n            balanceDollar: balanceDollar.toNumber(),\n        }\n    }\n    if (ammUserRewardMap && ammUserRewardMap[ 'AMM-' + market ]\n        && ammDetail && forex) {\n        const ammUserReward: AmmUserReward = ammUserRewardMap[ 'AMM-' + market ];\n        let rewardToken, rewardToken2, feeA, feeB, feeDollar, feeYuan, reward, reward2, rewardDollar, rewardYuan;\n\n        if (coinMap && tokenMap && idIndex && forex && faitPrices && ammUserReward) {\n            rewardToken = ammUserReward.currentRewards[ 0 ] ? idIndex[ ammUserReward.currentRewards[ 0 ].tokenId as number ] : undefined\n            rewardToken2 = ammUserReward.currentRewards[ 1 ] ? idIndex[ ammUserReward.currentRewards[ 1 ].tokenId as number ] : undefined\n            feeA = ammUserReward ? volumeToCountAsBigNumber(coinA, ammUserReward.feeRewards[ 0 ]) : toBig(0);\n            feeB = ammUserReward ? volumeToCountAsBigNumber(coinB, ammUserReward.feeRewards[ 1 ]) : toBig(0);\n            feeA = feeA ? feeA : toBig(0);\n            feeB = feeB ? feeB : toBig(0);\n            feeDollar = feeA.times(faitPrices[ coinA ].price).plus(feeB.times(faitPrices[ coinB ].price))\n            feeYuan = feeDollar.times(forex);\n            reward = rewardToken ? volumeToCountAsBigNumber(rewardToken, ammUserReward.currentRewards[ 0 ].volume) as BigNumber : toBig(0);\n            reward2 = rewardToken2 ? volumeToCountAsBigNumber(rewardToken2, ammUserReward.currentRewards[ 1 ].volume) as BigNumber : toBig(0);\n            reward = reward ? reward : toBig(0);\n            reward2 = reward2 ? reward2 : toBig(0);\n            rewardDollar = reward.times(rewardToken ? faitPrices[ rewardToken ].price : 1).plus(reward2.times(rewardToken2 ? faitPrices[ rewardToken2 ].price : 1));\n            rewardYuan = rewardDollar.times(forex);\n            _myAmm = {\n                ..._myAmm,\n                feeA: feeA ? feeA.toNumber() : undefined,\n                feeB: feeB ? feeB.toNumber() : undefined,\n                reward: reward ? reward.toNumber() : undefined,\n                // @ts-ignore\n                rewardToken: rewardToken ? coinMap[ rewardToken ] : undefined,\n                reward2: reward2 ? reward2.toNumber() : undefined,\n                // @ts-ignore\n                rewardToken2: rewardToken2 ? coinMap[ rewardToken2 ] : undefined,\n                rewardDollar: rewardDollar ? rewardDollar.toNumber() : undefined,\n                rewardYuan: rewardYuan ? rewardYuan.toNumber() : undefined,\n                feeDollar: feeDollar ? feeDollar.toNumber() : undefined,\n                feeYuan: feeYuan ? feeYuan.toNumber() : undefined,\n                ammDetail: {\n                    // @ts-ignore\n                    coinAInfo: coinA ? coinMap[ coinA ] : undefined,\n                    // @ts-ignore\n                    coinBInfo: coinB ? coinMap[ coinB ] : undefined,\n                },\n            }\n\n        }\n        return _myAmm as MyAmmLP<C>\n    }\n    return {\n        feeA: undefined,\n        feeB: undefined,\n        feeDollar: undefined,\n        feeYuan: undefined,\n        reward: undefined,\n        rewardToken: undefined as any,\n        balanceA: undefined,\n        balanceB: undefined,\n        balanceYuan: undefined,\n        balanceDollar: undefined,\n    }\n}\n\n// if (ammUserReward) {\n//     const symbol = ammUserReward.currentRewards[ 0 ] ? idIndex[ ammUserReward.currentRewards[ 0 ].tokenId as number ] : undefined\n//     const symbol2 = ammUserReward.currentRewards[ 1 ] ? idIndex[ ammUserReward.currentRewards[ 1 ].tokenId as number ] : undefined\n//\n//     _myAmm = {\n//         ..._myAmm,\n//         feeA: ammUserReward ? volumeToCount(coinA, ammUserReward.feeRewards[ 0 ]) : 0,//Number(ammUserReward.feeRewards[ 0 ]) : 0,\n//         feeB: ammUserReward ? volumeToCount(coinB, ammUserReward.feeRewards[ 1 ]) : 0,//Number(ammUserReward.feeRewards[ 1 ]) : 0,\n//         reward: symbol ? volumeToCount(symbol, ammUserReward.currentRewards[ 0 ].volume) : 0,\n//         // @ts-ignore\n//         rewardToken: symbol ? coinMap[ symbol ] : undefined,\n//         reward2: symbol2 ? volumeToCount(symbol2, ammUserReward.currentRewards[ 1 ].volume) : 0,\n//         // @ts-ignore\n//         rewardToken2: symbol2 ? coinMap[ symbol2 ] : undefined,\n//\n//\n//     }\n//     _myAmm.feeDollar = _myAmm.feeA && _myAmm.feeA * faitPrices[ coinA ].price;\n//     _myAmm.feeDollar = _myAmm.feeB && _myAmm.feeB * faitPrices[ coinB ].price;\n// }\n//\n//\n// if (_walletMap && _walletMap[ 'LP-' + market ]) {\n//     // @ts-ignore\n//     const ratio = new BigNumber(_walletMap[ 'LP-' + market ].detail.total).div(snapShotData.ammPoolsBalance.lp.volume);\n//     _myAmm = {\n//         ..._myAmm,  //snapShotData.ammPoolsBalance.pooled[ 0 ].volume).div(BIG10.pow(tokenMap[coinA].decimals)\n//         balanceA: ratio.times(volumeToCountAsBigNumber(coinA, snapShotData.ammPoolsBalance.pooled[ 0 ].volume) || 1).toNumber(),\n//         balanceB: ratio.times(volumeToCountAsBigNumber(coinB, snapShotData.ammPoolsBalance.pooled[ 1 ].volume) || 1).toNumber(),\n//     }\n//     // @ts-ignore\n//     _myAmm.balanceDollar = _myAmm.balanceA * faitPrices[ coinA ].price + _myAmm.balanceB * faitPrices[ coinB ].price\n//     _myAmm.balanceYuan = _myAmm.balanceDollar * forex\n// }\n// export const getAmmPoolGameUserRanks = ():Promise<AmmUserRewardMap> => {\n//     const {accountId} = store.getState().account\n//     //https://api3.loopring.io/api/v2/amm/user/rewards?owner=10917\n//     if(LoopringAPI.ammpoolAPI){\n//         return LoopringAPI.ammpoolAPI.getAmmPoolUserRewards({owner:accountId}).then(({ammUserRewardMap}:any)=>{\n//               return ammUserRewardMap  as AmmUserRewardMap\n//         })\n//     }else{\n//         return  Promise.resolve({} as AmmUserRewardMap);\n//     }\n//\n//     // return LoopringAPI.ammpoolAPI?.getUserAmmPoolTxs({accountId}, apiKey).then(({userAmmPoolTxs}) => {\n//     //     return userAmmPoolTxs\n//     // })\n//     // if(LoopringAPI.ammpoolAPI)   {\n//     //    let promiseList =  marketKeys.map((key)=>{\n//     //         // @ts-ignore\n//     //         return LoopringAPI.ammpoolAPI.getAmmPoolGameUserRank({owner:accAddr,ammPoolMarket:'key'},apiKey)\n//     //     })\n//     //     return Promise.all(promiseList).then(\n//     //         (array:any[])=>{\n//     //\n//     //           return  array.reduce((prev,item:{userRankList:GameRankInfo[]},index)=>{\n//     //                 const market = marketKeys[index]\n//     //                 prev[ market] = item.userRankList[0]\n//     //                 return item.userRankList[0]\n//     //             },{})\n//     //\n//     //         }\n//     //     )\n//     // }else{\n//     //   return  Promise.resolve({});\n//     // }\n//\n//\n//\n//\n// }\n//\n// {\n//     userRankList: GameRankInfo[];\n//     raw_data: any;\n// }\n","import { useDispatch, useSelector } from 'react-redux'\nimport { updateSystem } from './reducer';\nimport { System, SystemStatus } from './interface';\nimport React from 'react';\nimport { statusUnset } from '../Amm/AmmMap';\n\nexport function useSystem(): SystemStatus & {\n    updateSystem:(system:Partial<System< {[key:string]:any}>>)=>void,\n    statusUnset:()=>void,\n} {\n    const system:SystemStatus = useSelector((state: any) => state.system)\n    const dispatch = useDispatch();\n    return {\n        ...system,\n        statusUnset:React.useCallback(()=>dispatch(statusUnset(undefined)),[dispatch]),\n        updateSystem:React.useCallback((system:Partial<System<{[key:string]:any}>>)=>dispatch(updateSystem(system)),[dispatch]),\n    }\n\n}\n","import * as fm from 'loopring-sdk';\nimport store from '../../stores';\nimport { TradeTypes,CoinMap } from '@loopring-web/common-resources';\nimport { ammpoolAPI, LoopringAPI, userAPI } from '../../stores/apis/api';\nimport { AmmRecordRow, AmmTradeType,RawDataTradeItem } from '@loopring-web/component-lib';\nimport { AmmPoolTx, BillType, AmmTxType, UserAmmPoolTx,getBaseQuote, MarketTradeInfo, Side, UserTrade } from 'loopring-sdk';\nimport { volumeToCount, volumeToCountAsBigNumber } from './volumeToCount';\n\nexport const getUserTrades = (marketKey: any) => {\n    const userApi = userAPI();\n    const {accountId, apiKey} = store.getState().account\n    return userApi.getUserTrades({accountId}, apiKey).then((response: {\n        totalNum: any;\n        userTrades: UserTrade[];\n        raw_data: any;\n    }) => {\n        return response.userTrades\n    })\n}\nexport const makeMarketArray = (coinKey: any, marketTrades: MarketTradeInfo[]): RawDataTradeItem[] => {\n\n    let tradeArray: Array<Partial<RawDataTradeItem>> = []\n\n    marketTrades.forEach((item: MarketTradeInfo) => {\n        try {\n            const {base, quote} = getBaseQuote(item.market)\n            const {forex} = store.getState().system\n            const {currency} = store.getState().settings\n            const {tokenMap} = store.getState().tokenMap\n            if (tokenMap) {\n               // const baseToken = tokenMap[ base as string ]\n               // const quoteToken = tokenMap[ quote as string ]\n\n                // @ts-ignore\n                tradeArray.push({\n                    side: item.side === Side.Sell ? TradeTypes.Sell : TradeTypes.Buy,\n                    amount: {\n                        from: {\n                            key: base as string,\n                            value: base ? volumeToCount(base, item.volume) : undefined\n                        },\n                        to: {\n                            key: quote as string,\n                            value: base ? volumeToCountAsBigNumber(base, item.volume)?.times(item.price).toNumber():undefined\n                        },\n\n                    },\n                    price: {\n                        key: '',\n                        value: fm.toBig(item.price).toNumber(),\n                    },\n                    fee: {\n                        key: '',\n                        value: quote? volumeToCount(quote, item.fee):undefined, //fm.toBig(item.fee).div(BIG10.pow(quoteToken.decimals)).toNumber(),\n                    },\n                    time: parseInt(item.tradeTime.toString()),\n                })\n            }\n        } catch (error) {\n            //CATCHERROR:\n            console.log(error)\n            // new CustomError()\n        }\n\n    })\n    // console.log('tradeArray:', tradeArray)\n    return tradeArray as RawDataTradeItem[];\n\n}\n\nexport const getUserAmmTransaction = () => {\n    const {accountId, apiKey} = store.getState().account\n    return LoopringAPI.ammpoolAPI?.getUserAmmPoolTxs({accountId}, apiKey).then(({userAmmPoolTxs}) => {\n        return userAmmPoolTxs\n    })\n    // }\n\n}\n\n\nexport const makeMyAmmMarketArray = <C extends { [ key: string ]:any }>(coinKey: string|undefined, marketTransaction: UserAmmPoolTx[]): AmmRecordRow<C>[] => {\n\n    let tradeArray: Array<Partial<AmmRecordRow<C>>> = [];\n    let {tokenMap, coinMap, idIndex} = store.getState().tokenMap;\n    marketTransaction.forEach((item: UserAmmPoolTx) => {\n        try {\n           // const {base, quote} = getBaseQuote(coinKey)\n            const {forex} = store.getState().system\n            // const {currency} = store.getState().settings\n            if (coinMap && tokenMap && idIndex\n                && !(coinKey && tokenMap['LP-'+coinKey].tokenId !== item.lpToken.tokenId) ) {\n                // @ts-ignore\n                const [, coinA, coinB] = idIndex[item.lpToken.tokenId].match(/LP-(\\w+)-(\\w+)/i);\n                 \n                tradeArray.push({\n                        type: item.txType === AmmTxType.JOIN ? AmmTradeType.add : AmmTradeType.remove,\n                        //TODO:\n                        totalDollar: 1000,\n                        totalYuan: 1000 / Number(forex),\n                        amountA: volumeToCount(coinA,item.poolTokens[ 0 ]?.actualAmount),\n                        amountB: volumeToCount(coinA,item.poolTokens[ 1 ]?.actualAmount),\n                        time: Number(item.updatedAt),\n                        // @ts-ignore\n                        coinA: coinMap[ coinA ],\n                        // @ts-ignore\n                        coinB: coinMap[ coinB ],\n                        status: item.txStatus\n                    })\n                }\n                return tradeArray\n            }\n         catch (error) {\n            //CATCHERROR:\n            console.log(error)\n            // new CustomError()\n        }\n\n    })\n    // console.log('tradeArray:', tradeArray)\n    return tradeArray as AmmRecordRow<C>[];\n\n}\n\n\nexport const makeMarketAmmArray = <C extends object>(coinKey: any, marketTransaction: AmmPoolTx[]): AmmRecordRow<C>[] => {\n\n    let tradeArray: Array<Partial<AmmRecordRow<C>>> = [];\n\n    // marketTransaction.forEach((item: AmmPoolTx) => {\n    //     try {\n    //         const {base, quote} = getBaseQuote(coinKey)\n    //         const {forex} = store.getState().system\n    //         // const {currency} = store.getState().settings\n    //         const coinMap = store.getState().tokenMap.coinMap as CoinMap<C>\n    //         if (coinMap) {\n    //\n    //             // id: number;\n    //             // from: string;\n    //             // to: string;\n    //             // token: string;\n    //             // amount: string;\n    //             // tokenF: string;\n    //             // amountF: string;\n    //             // status: TxStatus;\n    //             // txHash: string;\n    //             // billType: BillType;\n    //             // income: boolean;\n    //             // timestamp: number;\n    //             // memo: string;\n    //             // price: string;\n    //             // transferType: TransferType;\n    //             // label: string;\n    //             tradeArray.push({\n    //                 // type: item.billType === BillType.ORDER ?\n    //                 //     AmmTradeType.swap : item.billType === BillType.TRANSFER && item.income ?\n    //                 //         AmmTradeType.add : AmmTradeType.remove,\n    //                 // // //TODO:\n    //                 // totalDollar: 1000,\n    //                 // totalYuan: 1000 / Number(forex),\n    //                 // amountA: Number(item.poolTokens[ 0 ].amount),\n    //                 // amountB: Number(item.poolTokens[ 1 ].amount),\n    //                 // time: Number(item.updatedAt),\n    //                 // coinA: coinMap[ base as keyof C],\n    //                 // coinB: coinMap[ quote as keyof C ],\n    //             })\n    //         }\n    //     } catch (error) {\n    //         //CATCHERROR:\n    //         console.log(error)\n    //         // new CustomError()\n    //     }\n    //\n    // })\n    // console.log('tradeArray:', tradeArray)\n    return tradeArray as AmmRecordRow<C>[];\n\n}\n","import { createAction } from '@reduxjs/toolkit'\n\n// fired once when the app reloads but before the app renders\n// allows any updates to be applied to store data loaded from localStorage\nexport const updateVersion = createAction<void>('global/updateVersion')\n","import { all, takeLatest, call, put } from \"redux-saga/effects\"\nimport { getAmmActivityMap, getAmmActivityMapStatus } from './reducer'\nimport { LoopringAPI } from '../../apis/api';\nconst getAmmActivityMapApi = async () => {\n\n    if(LoopringAPI.ammpoolAPI){\n        const { groupByRuleTypeAndStatus } =  await LoopringAPI.ammpoolAPI.getAmmPoolActivityRules();\n        return  {data:groupByRuleTypeAndStatus}\n    }else{\n        return {data:undefined}\n    }\n\n}\n\nexport function* getPostsSaga() {\n    try {\n        //\n        const { data } = yield call(getAmmActivityMapApi);\n        yield put(getAmmActivityMapStatus({ammActivityMap:data}));\n    } catch (err) {\n        yield put(getAmmActivityMapStatus(err));\n    }\n}\n\nexport default function* ammActivityMapSaga() {\n    yield all([takeLatest(getAmmActivityMap, getPostsSaga)]);\n}\n","import { all, call, fork, put, takeLatest } from \"redux-saga/effects\";\nimport { getAmmMap, getAmmMapStatus, updateRealTimeAmmMap } from './reducer';\nimport { AmmDetail } from '@loopring-web/common-resources';\nimport store from '../../index';\nimport { AmmPoolInfoV3, AmmPoolStat, toBig, TokenVolumeV3, } from \"loopring-sdk\";\nimport { ammpoolAPI } from \"stores/apis/api\";\nimport { PayloadAction } from '@reduxjs/toolkit';\nimport { AmmDetailStore, GetAmmMapParams } from './interface';\nimport { volumeToCount, volumeToCountAsBigNumber } from '../../../hooks/help';\n\ntype AmmMap<R extends { [ key: string ]: any }> = { [ key: string ]: AmmDetail<R> } | {}  //key is AMM-XXX-XXX\nexport const setAmmState = ({ammPoolState, keyPair}: { ammPoolState: AmmPoolStat, keyPair: string }) => {\n    const {idIndex} = store.getState().tokenMap\n    // @ts-ignore\n    const [, coinA, coinB] = keyPair.match(/(\\w+)-(\\w+)/i);\n    const {forex,faitPrices} = store.getState().system;\n    if (idIndex && coinA && coinB && faitPrices && forex) {\n        let result =  {\n            amountDollar: parseFloat(ammPoolState.liquidityUSD),\n            amountYuan: (parseFloat(ammPoolState.liquidityUSD) / (forex ? forex : 6.5)),\n            totalLPToken: volumeToCount('LP-' + keyPair, ammPoolState.lpLiquidity),\n            totalA: volumeToCount(coinA, ammPoolState.liquidity[ 0 ]),//parseInt(ammPoolState.liquidity[ 0 ]),\n            totalB: volumeToCount(coinB, ammPoolState.liquidity[ 1 ]),//parseInt(ammPoolState.liquidity[ 1 ]),\n            rewardValue: ammPoolState.rewards[ 0 ] ? volumeToCount(idIndex[ ammPoolState.rewards[ 0 ].tokenId as number ], ammPoolState.rewards[ 0 ].volume) : undefined,\n            rewardToken: ammPoolState.rewards[ 0 ] ? idIndex[ ammPoolState.rewards[ 0 ].tokenId as number ] : undefined,\n            rewardValue2: ammPoolState.rewards[ 1 ] ? volumeToCount(idIndex[ ammPoolState.rewards[ 1 ].tokenId as number ], ammPoolState.rewards[ 1 ].volume) : undefined,\n            rewardToken2: ammPoolState.rewards[ 1 ] ? idIndex[ ammPoolState.rewards[ 1 ].tokenId as number ] : undefined,\n        }\n\n        const feeA =  volumeToCountAsBigNumber(coinA, ammPoolState.fees[ 0 ]);//parseInt(ammPoolState.fees[ 0 ]),\n        const feeB = volumeToCountAsBigNumber(coinB, ammPoolState.fees[ 1 ]);//parseInt(ammPoolState.fees[ 1 ]),\n        const feeDollar =  faitPrices[coinA] && faitPrices[coinB]  ?\n            toBig(feeA||0).times(faitPrices[coinA].price).plus(toBig(feeB||0).times(faitPrices[coinB].price)):undefined\n        const feeYuan = feeDollar ? feeDollar.times(forex) : undefined;\n\n        return {\n             ...result,\n            feeA:feeA?.toNumber(),\n            feeB:feeB?.toNumber(),\n            feeDollar:feeDollar? feeDollar.toNumber(): undefined,\n            feeYuan:feeYuan? feeYuan.toNumber(): undefined,\n            tradeFloat: {\n                change: undefined,\n                timeUnit: '24h',\n                // priceYuan: 100,\n                // priceDollar: 1.23123,\n                // floatTag: FloatTag.increase,\n                // reward: 12312,\n                // APY: (parseInt(ammPoolState.apyBips) * 1.0 / 100)\n            },\n            APY: (parseInt(ammPoolState.apyBips) * 1.0 / 100)\n        }\n\n\n    }\n}\nconst getAmmMapApi = async <R extends { [ key: string ]: any }>({ammpools}: GetAmmMapParams) => {\n\n    let ammMap: AmmMap<R> = {}\n    const {ammPoolStats} = (await ammpoolAPI().getAmmPoolStats());\n\n    let {__timer__} = store.getState().amm.ammMap\n    __timer__ = (() => {\n        if (__timer__ && __timer__ !== -1) {\n            clearInterval(__timer__)\n        }\n        return setInterval(async () => {\n            let ammPoolStats: { [key in keyof R]: AmmPoolStat } = (await ammpoolAPI().getAmmPoolStats()).ammPoolStats as { [key in keyof R]: AmmPoolStat }\n            store.dispatch(updateRealTimeAmmMap({ammPoolStats}))\n        }, 900000)    //15*60*1000 //900000\n    })()\n    const {tokenMap: {coinMap, idIndex}} = store.getState();\n\n    // const forex = faitPrices.prices['USDC']\n\n\n    Reflect.ownKeys(ammpools).forEach(async (key) => {\n        const item: AmmPoolInfoV3 = ammpools[ key as string ]\n        if (item.market === key && item.tokens.pooled && idIndex) {\n\n            // const tokenA =  ; //getTokenInfoById(tokens.tokenIdMap, parseInt(item.tokens.pooled[0]))\n            // const tokenB =  ; // getTokenInfoById(tokens.tokenIdMap, parseInt(item.tokens.pooled[1]))\n            const coinA = idIndex[ item.tokens.pooled[ 0 ] as any ];\n            const coinB = idIndex[ item.tokens.pooled[ 1 ] as any ];\n            const dataItem: AmmDetailStore<R> = {\n                coinA: coinA,\n                coinB: coinB,\n                isNew: Date.now() - (Number(item.createdAt)) > 3 * 86400 * 1000 ? false : true,//3*24*60*60*1000,\n                isActivity: item.status === 7 ? true : false,\n                address: item.address,\n                ...setAmmState({ammPoolState: ammPoolStats[ key ], keyPair: `${coinA}-${coinB}`}),\n                __rawConfig__: item\n            } as AmmDetailStore<R>\n            // @ts-ignore\n            ammMap[ item.market ] = dataItem\n\n\n        }\n\n\n    })\n    return {ammMap, __timer__}\n}\n\n\nexport function* getPostsSaga({payload}: PayloadAction<GetAmmMapParams>) {\n    try {\n        const {ammpools} = payload;\n        const {ammMap, __timer__} = yield call(getAmmMapApi, {ammpools});\n        yield put(getAmmMapStatus({ammMap, __timer__}));\n    } catch (err) {\n        yield put(getAmmMapStatus(err));\n    }\n}\n\nexport function* updateRealTimeSaga({payload}: any) {\n    try {\n        const {ammPoolStats} = payload;\n        let {ammMap}: { ammMap: AmmMap<object> } = store.getState().amm.ammMap;\n        if (ammPoolStats) {\n            //{ ammPoolStats?: { [ key: string ]: AmmPoolStat } }\n            Reflect.ownKeys(ammPoolStats).map((key) => {\n                const keyPair = (key as string).replace('AMM-', '')\n                \n                // @ts-ignore\n                ammMap[ key ] = {\n                    // @ts-ignore\n                    ...ammMap[ key ],\n                    ...setAmmState({ammPoolState: ammPoolStats[ key as string ], keyPair, })\n                }\n                return ammMap\n            })\n        }\n        yield put(getAmmMapStatus({ammMap}));\n    } catch (err) {\n        yield put(getAmmMapStatus(err));\n    }\n}\n\n\nexport function* ammMapInitSaga() {\n    yield all([takeLatest(getAmmMap, getPostsSaga)]);\n}\n\nexport function* ammMapRealTimeSaga() {\n    yield all([takeLatest(updateRealTimeAmmMap, updateRealTimeSaga)]);\n}\n\nexport const ammMapSaga = [\n    fork(ammMapInitSaga),\n    fork(ammMapRealTimeSaga),\n]\n\n","import { combineReducers } from '@reduxjs/toolkit';\n// import { ammRecordSlice } from './AmmConfig';\n// import { ammTradesSlice } from './AmmTrades';\nimport { ammMapSlice } from './AmmMap';\nimport { ammActivityMapSlice } from './AmmActivityMap';\nimport ammActivityMapSaga from './AmmActivityMap/saga';\nimport { ammMapSaga } from './AmmMap/saga';\n// import ammTradesSaga from './AmmTrades/saga';\nimport {  fork } from 'redux-saga/effects';\n\nexport const  ammReducer = combineReducers({\n    // ammRecord: ammRecordSlice.reducer,\n    // ammTrades: ammTradesSlice.reducer,\n    ammMap: ammMapSlice.reducer,\n    ammActivityMap:ammActivityMapSlice.reducer\n})\nexport const ammForks =  [\n    fork(ammActivityMapSaga),\n    ...ammMapSaga,\n    // fork(ammRecordSaga),\n    // fork(ammTradesSaga)\n]\n\n// export * from './interface'\n","import { all, call, fork, put, takeLatest } from \"redux-saga/effects\";\nimport { getTokenMap, getTokenMapStatus } from './reducer';\nimport { getIcon } from '../../utils/swap_calc_utils';\nimport { CoinInfo, CoinMap } from '@loopring-web/common-resources';\nimport { AddressMap, GetTokenMapParams, IdMap } from './interface';\nimport { PayloadAction } from '@reduxjs/toolkit';\n\nconst getTokenMapApi = async <R extends { [ key: string ]: any }>({\n                                                                      tokensMap,\n                                                                      pairs,\n                                                                      marketArr,\n                                                                      tokenArr\n                                                                  }: GetTokenMapParams<R>) => {\n    let coinMap: CoinMap<any, CoinInfo<any>> = {};\n    let totalCoinMap: CoinMap<any, CoinInfo<any>> = {};\n    let tokenMap:any = tokensMap;\n    let addressIndex: AddressMap = {};\n    let idIndex: IdMap = {};\n    Reflect.ownKeys(tokensMap).forEach((key) => {\n        const coinInfo = {\n            icon: getIcon(key as string, tokensMap),\n            name: key as string,\n            simpleName: key as string,\n            description: '',\n            company: '',\n        }\n        if (!(key as string).startsWith('LP-')) {\n            coinMap[ key as string ] = coinInfo\n        }\n        totalCoinMap[ key as string ] = coinInfo\n\n        if (pairs[ key as string ] && pairs[ key as string ].tokenList) {\n            // @ts-ignore\n            tokensMap[ key ].tradePairs = pairs[ key as string ].tokenList;\n        }\n        addressIndex = {\n            ...addressIndex,\n            // @ts-ignore\n            [ tokensMap[ key ].address ]: key as string\n        }\n        idIndex = {\n            ...idIndex,\n            // @ts-ignore\n            [ tokensMap[ key ].tokenId ]: key as string\n        }\n    })\n    return {data: {coinMap, totalCoinMap, addressIndex, idIndex, tokenMap, marketArray: marketArr, marketCoins: tokenArr}}\n};\n\nexport function* getPostsSaga<R extends { [ key: string ]: any }>({payload}: PayloadAction<GetTokenMapParams<R>>) {\n    try {\n        const {tokensMap, marketMap, pairs, marketArr,tokenArr} = payload\n        // @ts-ignore\n        const {data} = yield call(getTokenMapApi, {tokensMap, pairs, marketArr, tokenArr});\n\n        yield put(getTokenMapStatus({...data, marketMap}));\n    } catch (err) {\n        yield put(getTokenMapStatus(err));\n    }\n}\n\nexport function* tokenInitSaga() {\n    yield all([takeLatest(getTokenMap, getPostsSaga)]);\n}\n\n\nexport const tokenSaga = [\n    fork(tokenInitSaga),\n    // fork(tokenPairsSaga),\n]\n\n// export function* getPairsSaga({payload}:PayloadAction<{tokenPairs: TokenPairs }>) {\n//     try {\n//         const {tokenPairs} = payload;\n//         const tokenPairsMap =  Reflect.ownKeys(tokenPairs).reduce((prev,key)=>{\n//            // @ts-ignore\n//             return prev[key as string] =  tokenPairs[key as string].tokenList\n//         }, {} )\n//\n//         yield put(getTokenMapStatus({tokenPairsMap}));\n//     } catch (err) {\n//         yield put(getAmmMapStatus(err));\n//     }\n// }\n// export function* tokenPairsSaga() {\n//     yield all([takeLatest(getTokenPairMap, getPairsSaga)]);\n// }\n\n\n","import { all, call, fork, put, takeLatest } from \"redux-saga/effects\"\nimport { getTicker, getTickers, getTickerStatus } from './reducer'\nimport { CoinKey, CustomError, ErrorMap, PairKey, TradeFloat } from '@loopring-web/common-resources'\n\n\nimport { exchangeAPI } from \"stores/apis/api\"\nimport { makeTickerMap } from '../../hooks/help';\n\n\ntype TickerMap<R extends { [ key: string ]: any }> = {\n    [key in CoinKey<R> | PairKey<R>]?: TradeFloat & {\n    reward?: number, rewardToken?: string\n}\n\n}\n\n\nconst getTickersApi = async <R extends { [ key: string ]: any }>(list: Array<keyof R>) => {\n\n    const tickers = await exchangeAPI().getMixTicker({market: list.join(',')})\n    const data = makeTickerMap({tickerMap: tickers.tickMap})\n    return {data}\n}\n\nexport function* getPostsSaga({payload}: any) {\n    try {\n        // @ts-ignore\n        const {tickerKey, tickerKeys} = payload;\n        if (tickerKey || (tickerKeys && tickerKeys.length)) {\n            const {data} = yield call(getTickersApi, tickerKey ? [tickerKey] : tickerKeys);\n            yield put(getTickerStatus({tickerMap: data}));\n\n        } else {\n            throw new CustomError(ErrorMap.NO_TOKEN_KEY_LIST);\n        }\n    } catch (err) {\n        yield put(getTickerStatus(err));\n    }\n}\n\nfunction* tickerSaga() {\n    yield all([takeLatest(getTicker, getPostsSaga)]);\n}\n\nfunction* tickersSaga() {\n    yield all([takeLatest(getTickers, getPostsSaga)]);\n}\n\nexport const tickerForks = [\n    fork(tickerSaga),\n    fork(tickersSaga),\n]\n ","import { all, call, fork, put, take, takeLatest } from \"redux-saga/effects\"\nimport { getSystemStatus, updateRealTimeObj, updateSystem } from './reducer'\nimport { ENV, NETWORKEXTEND } from \"./interface\"\nimport store from '../index';\nimport { reset } from '../account/reducer';\nimport { ChainId } from 'loopring-sdk';\nimport { exchangeAPI, LoopringAPI } from '../apis/api';\nimport { getAmmMap, updateRealTimeAmmMap } from '../Amm/AmmMap';\nimport { getTokenMap } from '../token';\nimport { CustomError, ErrorMap } from '@loopring-web/common-resources';\nimport { getAmmActivityMap } from '../Amm/AmmActivityMap';\nimport { updateWalletLayer1 } from '../walletLayer1';\nimport { delay } from 'rxjs/operators';\n\n\nconst initConfig = function* <R extends { [ key: string ]: any }>(chainId: ChainId | 'unknown') {\n    store.dispatch(reset(undefined));\n    const {tokenSymbolMap: tokensMap} = yield call(async ()=> await LoopringAPI.exchangeAPI?.getTokens())\n    const {ammpools} = yield call(async ()=>await LoopringAPI.ammpoolAPI?.getAmmPoolConf());\n    const {pairs, marketArr, tokenArr, markets}  = yield call(async ()=> LoopringAPI.exchangeAPI?.getMixMarkets());\n    store.dispatch(getTokenMap({tokensMap, marketMap: markets, pairs,marketArr,tokenArr}))\n    yield take('tokenMap/getTokenMapStatus');\n    // let basePath: string = `wss://ws.${baseURL}/v3/ws?wsApiKey=${wsKey}`\n    store.dispatch(getAmmMap({ammpools}))\n    store.dispatch(getAmmActivityMap({ammpools}))\n    if(store.getState().tokenMap.status === 'ERROR'){\n\n    }\n    yield delay(10);\n    //IF already connect has address, getInfo walletLayer 1\n    const {account,walletLayer1} = store.getState() //.account.accAddr && !store.getState().walletLayer1.walletLayer1\n    if(account.accAddr && walletLayer1.walletLayer1 === undefined){\n        store.dispatch(updateWalletLayer1(undefined));\n    }\n\n}\n\nconst getSystemsApi = async <R extends { [ key: string ]: any }>(chainId: any) => {\n    //TODO get some other reuqired id...... put into system\n    // const { chainId } = system\n    const env = window.location.hostname === 'localhost' ? ENV.DEV : ChainId.GORLI === chainId ? ENV.UAT : ENV.PROD\n    chainId = ChainId.GORLI === chainId ? ChainId.GORLI : ChainId.MAINNET === chainId ? ChainId.MAINNET : NETWORKEXTEND.NONETWORK\n    if (chainId === NETWORKEXTEND.NONETWORK) {\n        throw new CustomError(ErrorMap.NO_NETWORK_ERROR)\n    } else {\n        LoopringAPI.InitApi(chainId as ChainId);\n        if (LoopringAPI.exchangeAPI) {\n            const { exchangeInfo } = (await LoopringAPI.exchangeAPI.getExchangeInfo())\n            const faitPrices = (await LoopringAPI.exchangeAPI.getFiatPrice({legal: 'CNY'})).fiatPrices\n            const gasPrice = (await exchangeAPI().getGasPrice()).gasPrice / 1e+9;\n            // : process.env.REACT_APP_API_URL_UAT;\n            const baseURL = ChainId.MAINNET === chainId ? `https://${process.env.REACT_APP_API_URL}` : `https:/${process.env.REACT_APP_API_URL_UAT}`\n            const forex = faitPrices[ 'USDT' ].price;\n            let {__timer__} = store.getState().system;\n            __timer__ = ((__timer__) => {\n                if (__timer__ && __timer__ !== -1) {\n                    clearInterval(__timer__);\n                }\n                return setInterval(async () => {\n                    const faitPrices = (await exchangeAPI().getFiatPrice({legal: 'CNY'})).fiatPrices\n                    const gasPrice = (await exchangeAPI().getGasPrice()).gasPrice / 1e+9\n                    const forex = faitPrices[ 'USDT' ]?.price\n                    store.dispatch(updateRealTimeAmmMap(undefined))\n                    store.dispatch(updateRealTimeObj({faitPrices, gasPrice, forex}))\n                }, 300000)   //\n\n            })(__timer__);\n            return {chainId, env, baseURL, faitPrices, gasPrice, forex, exchangeInfo, __timer__}\n        }\n    }\n}\n\nexport function* getUpdateSystem({payload}: any) {\n    try {\n        // @ts-ignore\n        const {chainId} = payload;\n        const {env, baseURL, faitPrices, gasPrice, forex, exchangeInfo, __timer__} = yield call(getSystemsApi, chainId);\n\n        yield put(getSystemStatus({env, baseURL, faitPrices, gasPrice, forex, exchangeInfo, __timer__}));\n        yield call(initConfig,chainId)\n        //TODO check wallect store\n    } catch (err) {\n        yield put(getSystemStatus(err));\n    }\n}\n\nfunction* systemSaga() {\n    yield all([takeLatest(updateSystem, getUpdateSystem)]);\n}\n\nexport const systemForks = [\n    fork(systemSaga),\n]\n","import { all, call, fork, put, takeLatest } from \"redux-saga/effects\";\nimport { getWalletLayer1Status, updateWalletLayer1 } from './reducer';\nimport { CoinKey, PairKey, WalletCoin } from '@loopring-web/common-resources';\nimport { exchangeAPI } from '../apis/api';\nimport store from '../index';\nimport { fromWEI } from '../../utils/swap_calc_utils';\n\ntype WalletLayer1Map<R extends {[key:string]:any}> = {\n    [key in CoinKey<R>|PairKey<R>]?:WalletCoin<R>\n}\n\nconst getWalletLayer1Balance = async <R extends {[key:string]:any}>()=> {\n    //TODO: check is connect and active and assign walletLayer1\n    //TODO: if not reject directory, any error happen will clean the\n    // await sdk\n    const exchangeApi = exchangeAPI();\n    const {accAddr,accountId} = store.getState().account;\n    const {tokenMap,marketCoins} = store.getState().tokenMap;\n    const {ethBalance} =  await exchangeApi.getEthBalances({owner:accAddr});\n    // @ts-ignore\n    const {tokenBalances} =  await exchangeApi.getTokenBalances({owner:accAddr,token: marketCoins.join()},tokenMap);\n    tokenBalances['ETH'] = ethBalance;\n    let walletLayer1;\n    if(tokenBalances) {\n        walletLayer1 = Reflect.ownKeys(tokenBalances).reduce((prev,item)=>{\n            return   {...prev, [ item ]:{\n                    belong: item,\n                    count: fromWEI(tokenMap, item, tokenBalances[item as string]),\n                }\n            }\n        },{} as WalletLayer1Map<R>)\n    }\n    return {walletLayer1}\n};\n\nexport function* getPostsSaga() {\n    try {\n        //\n        const {walletLayer1} = yield call(getWalletLayer1Balance);\n        yield put(getWalletLayer1Status({walletLayer1}));\n    } catch (err) {\n        yield put(getWalletLayer1Status(err));\n    }\n}\n\nexport function* walletLayer1Saga() {\n    yield all([takeLatest(updateWalletLayer1, getPostsSaga)]);\n}\n\nexport const walletLayer1Fork = [\n    fork(walletLayer1Saga),\n    // fork(tokenPairsSaga),\n]\n\n","import { all, call, fork, put, takeLatest } from \"redux-saga/effects\";\nimport { getWalletLayer2Status, updateWalletLayer2 } from './reducer';\nimport { CoinKey, PairKey, WalletCoin } from '@loopring-web/common-resources';\nimport { userAPI } from '../apis/api';\nimport store from '../index';\n\ntype WalletLayer2Map<R extends { [ key: string ]: any }> = {\n    [key in CoinKey<R> | PairKey<R>]?: WalletCoin<R>\n}\n\nconst getWalletLayer2Balance = async <R extends { [ key: string ]: any }>() => {\n    //TODO: check is connect and active and assign walletLayer1\n    //TODO: if not reject directory, any error happen will clean the\n    // await sdk\n    // const exchangeApi = exchangeAPI();\n    const userApi = userAPI();\n    const {accountId, apiKey} = store.getState().account;\n    const {tokenMap, idIndex, marketCoins} = store.getState().tokenMap;\n    let walletLayer2;\n    if (apiKey && accountId) {\n        // @ts-ignore\n        const {userBalances} = await userApi.getUserBalances({accountId: accountId, tokens: ''}, apiKey)\n        if (userBalances) {\n            // tokenId: number;\n            // total: string;\n            // locked: string;\n            // pending: {\n            //     withdraw: string;\n            //     deposit: string;\n            // };\n            walletLayer2 = Reflect.ownKeys(userBalances).reduce((prev, item) => {\n                // @ts-ignore\n                return {...prev, [ idIndex[ item ] ]: userBalances[ Number(item) ]}\n            }, {} as WalletLayer2Map<R>)\n        }\n    }\n\n    return {walletLayer2}\n};\n\nexport function* getPostsSaga() {\n    try {\n        //\n        const {walletLayer2} = yield call(getWalletLayer2Balance);\n        yield put(getWalletLayer2Status({walletLayer2}));\n    } catch (err) {\n        yield put(getWalletLayer2Status(err));\n    }\n}\n\nexport function* walletLayer2Saga() {\n    yield all([takeLatest(updateWalletLayer2, getPostsSaga)]);\n}\n\n// export function* walletLayer2Saga() {\n//     yield all([takeLatest(updateWalletLayer2, getPostsSaga)]);\n// }\n\n\nexport const walletLayer2Fork = [\n    fork(walletLayer2Saga),\n    // fork(tokenPairsSaga),\n]\n\n","import { all, call, fork, put, takeLatest } from \"redux-saga/effects\"\nimport { getUserRewards, getUserRewardsStatus } from './reducer'\n\nimport store from '../index';\nimport { exchangeAPI, LoopringAPI } from '../apis/api';\nimport { updateRealTimeAmmMap } from '../Amm/AmmMap';\nimport { updateRealTimeObj } from '../system';\n\nconst getUserRewardsApi = async <R extends {[key:string]:any}>(list:Array<keyof R>)=> {\n\n    // const data:UserRewardsMap<R> = {}\n\n    // const userRewardss = await exchangeAPI().getUserRewards({market: list.join(',')})\n    const {accountId} = store.getState().account\n    let {__timer__} = store.getState().userRewardsMap;\n    \n    if(LoopringAPI.ammpoolAPI) {\n        __timer__ = ((__timer__) => {\n            if (__timer__ && __timer__ !== -1) {\n                clearInterval(__timer__);\n            }\n            return setTimeout(async () => {\n                store.dispatch(getUserRewards(undefined))\n            }, 300000 * 4)   //\n\n        })(__timer__);\n        return  LoopringAPI.ammpoolAPI.getAmmPoolUserRewards({owner:accountId}).then(({ammUserRewardMap}) => {\n            return {data:ammUserRewardMap,__timer__}\n        })\n\n\n    }else{\n        return  Promise.reject({data:undefined,__timer__})\n    }\n\n}\n\nexport function* getPostsSaga({payload}:any) {\n    try {\n        // @ts-ignore\n        // const { userRewardsKey,userRewardsKeys } = payload;\n        // console.log('getPostsSaga userRewardsKey',userRewardsKey, userRewardsKeys)\n        // if(userRewardsKey || (userRewardsKeys && userRewardsKeys.length)) {\n        const {data,__timer__}  = yield call(getUserRewardsApi);\n        yield put(getUserRewardsStatus({userRewardsMap:data,__timer__}));\n\n        // }else{\n        //     throw new CustomError(ErrorMap.NO_SDK);\n        // }\n    } catch (err) {\n        yield put(getUserRewardsStatus(err));\n    }\n}\n\nfunction* userRewardsSaga() {\n    yield all([takeLatest(getUserRewards, getPostsSaga)]);\n}\n\nexport const userRewardsForks = [\n    fork(userRewardsSaga),\n    // fork(userRewardssSaga),\n]\n ","import { all, call, fork, put, takeLatest } from 'redux-saga/effects';\nimport { getSocketStatus, sendSocketTopic, socketEnd } from './reducer'\nimport {\n    socketClose, socketSendMessage,\n} from '../../services/socketUtil';\nimport store from '../index';\nexport function* closeSocket(){\n    try {\n        yield call(socketClose)\n        yield put(getSocketStatus(undefined));\n        //TODO check wallect store\n    } catch (err) {\n        yield put(getSocketStatus(err));\n    }\n}\nexport function* sendMessage({payload}: any){\n    try {\n        const { chainId } = store.getState().system;\n        const { apiKey } = store.getState().account;\n        const { socket } = payload;\n        // @ts-ignore\n        yield call(socketSendMessage, { chainId, socket, apiKey })\n        yield put(getSocketStatus(undefined));\n    } catch (err) {\n        yield put(getSocketStatus(err));\n    }\n}\n\nfunction* socketEndSaga(){\n    yield all([takeLatest(socketEnd, closeSocket)]);\n}\n// function* socketSaga() {\n//     yield all([takeLatest(socketStart, startSocket)]);\n// }\nfunction* socketSendMessageSaga() {\n    yield all([takeLatest(sendSocketTopic, sendMessage)]);\n}\n\n\n\nexport const socketForks = [\n    // fork(socketSaga),\n    fork(socketEndSaga),\n    fork(socketSendMessageSaga),\n //   fork(initConfig),\n]\n\n\n\n","import { all } from \"redux-saga/effects\"\n// import machine from \"../state_machine/fsm/machine\"\n// import { TRANSITION } from \"../state_machine/fsm/actionTypes\"\n// import { helloSaga } from \"./sagas\"\nimport { tokenSaga } from './token/saga';\nimport { ammForks } from './Amm';\nimport { tickerForks } from './ticker/saga';\nimport { systemForks } from './system/saga';\nimport { walletLayer1Fork } from './walletLayer1/saga';\nimport { walletLayer2Fork } from './walletLayer2/saga';\nimport { userRewardsForks } from './userRewards/saga';\nimport { socketForks } from './socket/saga';\n\n\n// https://css-tricks.com/finite-state-machines-with-react/\n// https://musing-rosalind-2ce8e7.netlify.com/?machine=%7B%22initial%22%3A%22initial%22%2C%22states%22%3A%7B%22initial%22%3A%7B%22on%22%3A%7B%22LOGIN%22%3A%22loggedIn%22%2C%22LOGOUT%22%3A%22loggedOut%22%7D%7D%2C%22loggedOut%22%3A%7B%22on%22%3A%7B%22SUBMIT%22%3A%22loading%22%7D%7D%2C%22loading%22%3A%7B%22on%22%3A%7B%22SUCCESS%22%3A%22loggedIn%22%2C%22FAIL%22%3A%22loggedOut%22%7D%7D%2C%22loggedIn%22%3A%7B%22onEntry%22%3A%5B%22SET_TOKEN%22%5D%2C%22onExit%22%3A%5B%22CLEAR_TOKEN%22%5D%2C%22on%22%3A%7B%22LOGOUT%22%3A%22loggedOut%22%7D%7D%7D%7D\n\n// function* machineHandler(event: any, action: any) {\n//\n//   // @ts-ignore\n//   const currentAppState = yield select((state) => { state.account.status })\n//   const nextAppState = machine.transition(currentAppState, event)\n//\n//   yield put({\n//     type: \"APP_STATE/\" + nextAppState.value,\n//     payload: {\n//       value: nextAppState.value\n//     }\n//   });\n//\n//   console.debug(\"-> from \" + currentAppState + \" to \" + nextAppState);\n//\n//   for (let i = 0; i < nextAppState.actions.length; i++) {\n//     yield put({\n//       type: nextAppState.actions[i],\n//       payload: action\n//     });\n//   }\n// }\n\n// function* watchTransition() {\n//   yield takeEvery(TRANSITION, function*(action: any) {\n//     yield machineHandler(action.event, action.payload);\n//   });\n// }\n\nfunction* mySaga() {\n    yield all([\n        // fork(helloSaga),\n        // fork(watchTransition),\n        ...tokenSaga,\n        ...walletLayer1Fork,\n        ...walletLayer2Fork,\n        ...systemForks,\n        ...ammForks,\n        ...tickerForks,\n        ...userRewardsForks,\n        ...socketForks,\n\n    ]);\n}\n\nexport default mySaga;\n","import { configureStore, combineReducers, getDefaultMiddleware } from '@reduxjs/toolkit'\n\nimport { useDispatch } from 'react-redux'\nimport { save, load } from 'redux-localstorage-simple'\n\nimport createSagaMiddleware from 'redux-saga'\nimport * as imgConfig  from '@loopring-web/common-resources/assets/images/coin/loopring.json'\n\n// We'll use redux-logger just as an example of adding another middleware\nimport logger from 'redux-logger'\n\n// And use redux-batch as an example of adding enhancers\nimport { reduxBatch } from '@manaflair/redux-batch'\nimport { updateVersion } from './global/actions'\n\nimport accountSlice from './account/reducer'\nimport tradingSlice from './trading/reducer'\n// import transactionlice from './transactions/reducer'\n\n\nimport { modalsSlice, setCoinJson, setLanguage, settingsSlice } from '@loopring-web/component-lib';\nimport { ammReducer } from './Amm';\nimport { tokenMapSlice } from './token';\nimport mySaga from './rootSaga';\nimport { tickerMapSlice } from './ticker';\nimport { systemSlice } from './system';\nimport { walletLayer1Slice } from './walletLayer1';\nimport { walletLayer2Slice } from './walletLayer2';\nimport { socketSlice } from './socket';\nimport { userRewardsMapSlice } from './userRewards';\n\nconst sagaMiddleware = createSagaMiddleware()\n\nconst reducer = combineReducers({\n  account: accountSlice.reducer,\n  socket: socketSlice.reducer,\n  settings: settingsSlice.reducer,\n  system: systemSlice.reducer,\n  trading: tradingSlice.reducer,\n  // transactions: transactionlice.reducer,\n  modals: modalsSlice.reducer,\n  userRewardsMap: userRewardsMapSlice.reducer,\n  amm:ammReducer,\n  tokenMap: tokenMapSlice.reducer,\n  walletLayer2: walletLayer2Slice.reducer,\n  walletLayer1: walletLayer1Slice.reducer,\n  tickerMap: tickerMapSlice.reducer\n})\n\n\n//\n\nconst PERSISTED_KEYS: string[] = ['settings']\n\nconst store = configureStore({\n  reducer,\n  // middleware: (getDefaultMiddleware) => getDefaultMiddleware().concat(logger),\n  middleware: [...getDefaultMiddleware({ thunk: false,serializableCheck:false, }), save({ states: PERSISTED_KEYS }), sagaMiddleware, ],\n  // middleware: [...getDefaultMiddleware({ thunk: true }), ],\n  devTools: process.env.NODE_ENV !== 'production',\n  enhancers: [reduxBatch],\n  preloadedState: load({ states: PERSISTED_KEYS }) as any\n})\nstore.dispatch(updateVersion())\nstore.dispatch(setLanguage(store.getState().settings.language))\nstore.dispatch(setCoinJson(imgConfig.frames))\n// @ts-ignore\nsagaMiddleware.run(mySaga, store.dispatch);\n\n// The store has been created with these options:\n// - The slice reducers were automatically passed to combineReducers()\n// - redux-thunk and redux-logger were added as middleware\n// - The Redux DevTools Extension is disabled for production\n// - The middleware, batch, and devtools enhancers were composed together\n\nexport type AppDispatch = typeof store.dispatch\nexport const useAppDispatch = () => useDispatch<AppDispatch>()\n\nexport type RootState = ReturnType<typeof reducer>\n\nexport default store\n","export enum AccountStatus {\n    UNKNOWN = 'UNKNOWN',\n    UNCONNNECTED = 'UNCONNNECTED',\n    CONNECTED = 'CONNECTED',\n    NOACCOUNT = 'NOACCOUNT',\n    DEPOSITING = 'DEPOSITING',\n    DEPOSIT_TO_CONFIREM = 'DEPOSIT_TO_CONFIREM',\n    UNACTIVATED = 'UNACTIVATED',\n    ARPROVING = 'ARPROVING',\n    APPROV_TO_CONFIRM = 'APPROV_TO_CONFIRM',\n    LOCKED = 'LOCKED',\n    ACTIVATED = 'ACTIVATED',\n}\n\nexport enum StatusChangeEvent {\n    Reset = 'Reset',\n    Connecting = 'Connecting',\n    HasPubkey = 'HasPubkey',\n    HasNoPubkey = 'HasNoPubkey',\n    ErrorResponse = 'ErrorResponse',\n    Reconnect = 'Reconnect',\n    FinishDeposit = 'FinishDeposit',\n    DepositConfirmed = 'DepositConfirmed',\n    IsSmartWallet = 'IsSmartWallet',\n    ApproveSubmit = 'ApproveSubmit',\n    ApproveConfirmed = 'ApproveConfirmed',\n    Unlock = 'Unlock',\n    Lock = 'Lock',\n}\n\nexport const AccountMachineSpec = (initialState: AccountStatus = AccountStatus.UNCONNNECTED) => \n{\n    return {\n        initialState: initialState,\n        states: {\n            UNCONNNECTED: {\n                Connecting: AccountStatus.CONNECTED,\n                Reset: AccountStatus.UNCONNNECTED,\n            },\n            CONNECTED: {\n                HasPubkey: AccountStatus.LOCKED,\n                HasNoPubkey: AccountStatus.UNACTIVATED,\n                ErrorResponse: AccountStatus.NOACCOUNT,\n                Reset: AccountStatus.UNCONNNECTED,\n            },\n            NOACCOUNT: {\n                ErrorResponse: AccountStatus.NOACCOUNT,\n                Reconnect: AccountStatus.CONNECTED,\n                Reset: AccountStatus.UNCONNNECTED,\n            },\n            DEPOSITING: {\n                FinishDeposit: AccountStatus.DEPOSIT_TO_CONFIREM,\n                Reset: AccountStatus.UNCONNNECTED,\n            },\n            DEPOSIT_TO_CONFIREM: {\n                HasPubkey: AccountStatus.ACTIVATED,\n                HasNoPubkey: AccountStatus.DEPOSIT_TO_CONFIREM,\n                ErrorResponse: AccountStatus.DEPOSIT_TO_CONFIREM,\n                Reset: AccountStatus.UNCONNNECTED,\n            },\n            UNACTIVATED: {\n                IsSmartWallet: AccountStatus.ARPROVING,\n                Reset: AccountStatus.UNCONNNECTED,\n            },\n            ARPROVING: {\n                ApproveSubmit: AccountStatus.APPROV_TO_CONFIRM,\n                Reset: AccountStatus.UNCONNNECTED,\n            },\n            APPROV_TO_CONFIRM: {\n                ApproveConfirmed: AccountStatus.ACTIVATED,\n                Reset: AccountStatus.UNCONNNECTED,\n            },\n            LOCKED: {\n                Unlock: AccountStatus.ACTIVATED,\n                Reset: AccountStatus.UNCONNNECTED,\n            },\n            ACTIVATED: {\n                Lock: AccountStatus.LOCKED,\n                Reset: AccountStatus.UNCONNNECTED,\n            },\n        },\n    }\n}\n","import { AmmDetailBase } from '@loopring-web/common-resources';\nimport { volumeToCountAsBigNumber } from './volumeToCount';\n\nexport const ammPairInit = ({\n                                   pair,\n                                   _ammCalcData,\n                                   ammType,\n                                   tokenMap,\n                                   coinMap,\n                                   walletMap,\n                                   ammMap,\n                                   tickerData,\n                                   ammPoolsBalance\n                               }: any) => {\n    _ammCalcData.coinInfoMap = coinMap;\n    if (tickerData) {\n\n        _ammCalcData.AtoB = Number(tickerData.close)\n    }\n    if (isNaN(_ammCalcData.AtoB) && ammPoolsBalance) {\n        const baseVol = volumeToCountAsBigNumber(pair.coinAInfo.simpleName, ammPoolsBalance.pooled[ 0 ].volume);\n        const quoteVol = volumeToCountAsBigNumber(pair.coinBInfo.simpleName, ammPoolsBalance.pooled[ 1 ].volume);\n        _ammCalcData.AtoB = quoteVol && baseVol && quoteVol.div(baseVol).toNumber();\n\n    }\n    if (pair.coinAInfo) {\n        // if(ammType === AmmPanelType.Deposit ) {\n        _ammCalcData.myCoinA = {\n            belong: pair.coinAInfo.simpleName,\n            balance: walletMap ? walletMap[ pair.coinAInfo.simpleName ]?.count : 0,\n        }\n        _ammCalcData.myCoinB = {\n            belong: pair.coinBInfo.simpleName,\n            balance: walletMap ? walletMap[ pair.coinBInfo.simpleName ]?.count : 0,\n        }\n        // }else {\n        const key = `${pair.coinAInfo.simpleName}-${pair.coinBInfo.simpleName}`;\n        let coinACount = 0, coinBCount = 0;\n        if (walletMap) {\n            const balance = walletMap ? walletMap[ 'LP-' + key ]?.count : 0;\n            const {totalLPToken, totalA, totalB}: AmmDetailBase<any> = ammMap[ 'AMM-' + key ];\n            if (totalA && totalLPToken && totalB) {\n                coinACount = totalA / totalLPToken * balance;\n                coinBCount = totalB / totalLPToken * balance;\n            }\n            _ammCalcData.lpCoin = balance;\n        }\n        _ammCalcData.lpCoinA = {\n            belong: pair.coinAInfo.simpleName,\n            balance: coinACount,\n        }\n        _ammCalcData.lpCoinB = {\n            belong: pair.coinBInfo.simpleName,\n            balance: coinBCount,\n        }\n        // }\n    }\n\n\n    return _ammCalcData\n}\n\n\n","export function coinPairInit({coinKey, _tradeCalcData, tokenMap, coinMap}: any) {\n    if (coinKey) {\n        const [_match, sell, buy] = coinKey.match(/(\\w+)-(\\w+)/i);\n        // @ts-ignore\n        if (sell && coinMap && coinMap[ sell ]) {\n            _tradeCalcData.coinSell = sell;\n        }// @ts-ignore\n        if (sell!==buy && buy && -1 !== tokenMap[ sell ].tradePairs.findIndex(ele => ele === buy)) {\n            _tradeCalcData.coinBuy = buy;\n            return _tradeCalcData\n        }\n        // else{\n        //     _tradeCalcData.coinBuy = tokenMap[ sell ].tradePairs[ 0 ];\n        // }\n    }\n    if (!_tradeCalcData.coinSell || _tradeCalcData.coinSell === '') {\n        _tradeCalcData.coinSell = 'LRC';\n        _tradeCalcData.coinBuy = 'ETH';\n        return _tradeCalcData\n    }\n    if (!_tradeCalcData.coinBuy || _tradeCalcData.coinBuy === '' || _tradeCalcData.coinBuy === 'undefined') {\n        // @ts-ignore\n        if (tokenMap && tokenMap[ _tradeCalcData.coinSell ].tradePairs) {\n            _tradeCalcData.coinBuy = tokenMap[ _tradeCalcData.coinSell ].tradePairs[ 0 ]\n        } else {\n            _tradeCalcData.coinSell = 'LRC';\n            _tradeCalcData.coinBuy = 'ETH';\n        }\n    }\n    return _tradeCalcData\n}","import store from '../../stores';\nimport { AccountStatus } from '../../state_machine/account_machine_spec';\nimport { setShowAccountInfo, setShowConnect, setShowDeposit } from '@loopring-web/component-lib';\n\nexport enum fnType {\n    UNKNOWN,\n    UNCONNNECTED,\n    CONNECTED,\n    NOACCOUNT,\n    DEPOSITING,\n    DEPOSIT_TO_CONFIREM,\n    UNACTIVATED,\n    ARPROVING,\n    APPROV_TO_CONFIRM,\n    LOCKED,\n    ACTIVATED,\n    DEFAULT\n}\n\nexport const accountStaticCallBack = (onclickMap: { [ key: number ]: [fn: (props: any) => any, args?: any[]] }, deps?: any[]) => {\n    const {status} = store.getState().account;\n    let fn, args;\n    switch (status) {\n        case AccountStatus.UNKNOWN:\n            [fn, args] = onclickMap[ fnType.UNKNOWN ] ? onclickMap[ fnType.UNKNOWN ] : [];\n            break\n        case AccountStatus.UNCONNNECTED:\n            [fn, args] = onclickMap[ fnType.UNCONNNECTED ] ? onclickMap[ fnType.UNCONNNECTED ] : [];\n            break\n        case AccountStatus.CONNECTED:\n            [fn, args] = onclickMap[ fnType.CONNECTED ] ? onclickMap[ fnType.CONNECTED ] : [];\n            break\n        case AccountStatus.NOACCOUNT:\n            [fn, args] = onclickMap[ fnType.NOACCOUNT ] ? onclickMap[ fnType.NOACCOUNT ] : [];\n            break;\n        case AccountStatus.DEPOSITING:\n            [fn, args] = onclickMap[ fnType.DEPOSITING ] ? onclickMap[ fnType.DEPOSITING ] : [];\n            break;\n        case AccountStatus.DEPOSIT_TO_CONFIREM:\n            [fn, args] = onclickMap[ fnType.DEPOSIT_TO_CONFIREM ] ? onclickMap[ fnType.DEPOSIT_TO_CONFIREM ] : [];\n            break;\n        case AccountStatus.UNACTIVATED:\n            [fn, args] = onclickMap[ fnType.UNACTIVATED ] ? onclickMap[ fnType.UNACTIVATED ] : [];\n            break;\n        case AccountStatus.ARPROVING:\n            [fn, args] = onclickMap[ fnType.ARPROVING ] ? onclickMap[ fnType.ARPROVING ] : [];\n            break;\n        case AccountStatus.APPROV_TO_CONFIRM:\n            [fn, args] = onclickMap[ fnType.APPROV_TO_CONFIRM ] ? onclickMap[ fnType.APPROV_TO_CONFIRM ] : [];\n            break;\n        case AccountStatus.LOCKED:\n            [fn, args] = onclickMap[ fnType.LOCKED ] ? onclickMap[ fnType.LOCKED ] : [];\n            break;\n        case AccountStatus.ACTIVATED:\n            [fn, args] = onclickMap[ fnType.ACTIVATED ] ? onclickMap[ fnType.ACTIVATED ] : [];\n            break;\n        default:\n            //[fn, args] = onclickMap[ fnType.DEFAULT ] ? onclickMap[ fnType.DEFAULT ] : [];\n            break;\n    }\n\n\n    if (fn === undefined) {\n        [fn, args] = onclickMap[ fnType.DEFAULT ] ? onclickMap[ fnType.DEFAULT ] : [];\n    }\n    if (typeof fn === 'function') {\n        args = [...(args ?? []), ...(deps ?? [])] as [props: any]\n        return fn.apply(this, args);\n    }\n\n    // break;\n    // [fn, args] = props[ fnType.DEFAULT ]?props[ fnType.DEFAULT ]:[];\n    // if (typeof fn === 'function') {\n    //     return fn.call(this, args);\n    // }\n}\n\n\nexport const bntLabel: typeof btnClickMap = {\n    [ fnType.UNCONNNECTED ]: [\n        function () {\n            return `labelConnectWallet`\n        }\n    ]\n    , [ fnType.DEFAULT ]: [\n        function () {\n            return `depositTitleAndActive`\n        }\n    ]\n    , [ fnType.ACTIVATED ]: [\n        function () {\n            return undefined\n        }\n    ]\n    , [ fnType.LOCKED ]: [\n        function () {\n            return `labelUnLockLayer2`\n        }\n    ]\n};\n\n\nexport const btnClickMap: { [ key: number ]: [fn: (props: any) => any, args?: any[]] } = {\n    [ fnType.UNCONNNECTED ]: [\n        function () {\n            // setShowConnect({isShow: true})\n            store.dispatch(setShowConnect({isShow: true}))\n        }\n    ]\n    , [ fnType.DEFAULT ]: [\n        function () {\n            store.dispatch(setShowDeposit({isShow: true}))\n            // ShowDeposit(true)\n        }\n    ]\n\n    , [ fnType.LOCKED ]: [\n        function () {\n            store.dispatch(setShowAccountInfo({isShow: true}))\n        }\n    ]\n};\n\n\n","import store from '../../stores';\nimport { setSlippage } from '@loopring-web/component-lib';\n\ntype Cache = {\n    customSlippage?:number\n}\nexport  const makeCache  = (__cache__:Cache)=>{\n   if(typeof  __cache__.customSlippage !== undefined){\n       store.dispatch(setSlippage(__cache__.customSlippage as number))\n      // store.getState().settings\n   }\n}","import { AmmDetailStore } from '../../stores/Amm/AmmMap';\nimport { AmmPoolSnapshot } from 'loopring-sdk';\nimport { makeMyAmmWithSnapshot, makeMyAmmWithStat } from './makeUIAmmActivityMap';\nimport { AmmUserRewardMap } from 'loopring-sdk/dist/defs/loopring_defs';\nimport { WalletMapExtend } from './makeWallet';\n\nexport const makeMyPoolRowWithSnapShot = <T extends { [ key: string ]: any }>({market,ammSnapShot,walletMap,ammUserRewardMap}: {\n    market:string\n    ammSnapShot: AmmPoolSnapshot,\n    walletMap: WalletMapExtend<T>\n    ammUserRewardMap:AmmUserRewardMap|undefined\n}) => {\n\n    return makeMyAmmWithSnapshot(market,walletMap, ammUserRewardMap, {\n        ammPoolsBalance: ammSnapShot\n    })\n}\n\n                                                                        \nexport const makeMyPoolRowWithPoolState = <T extends { [ key: string ]: any }>({market,ammDetail,walletMap,ammUserRewardMap}: {\n    market:string\n    ammDetail: AmmDetailStore<T>,\n    walletMap: WalletMapExtend<T>\n    ammUserRewardMap:AmmUserRewardMap|undefined\n}) => {\n    if(walletMap && ammDetail){\n        return makeMyAmmWithStat (market,walletMap, ammUserRewardMap, ammDetail)\n    }\n    return undefined\n}","import { TickerData } from 'loopring-sdk';\nimport store from '../../stores';\nimport { FloatTag,TradeFloat } from '@loopring-web/common-resources';\nimport { volumeToCountAsBigNumber } from './volumeToCount';\nimport { Ticker, TickerMap } from '../../stores/ticker';\nimport { LoopringMap } from 'loopring-sdk/dist/defs/loopring_defs';\n\nexport const makeTickView = (tick: TickerData) => {\n    // const {forex} = store.getState().system;\n\n    const price = !isNaN(tick.close) ? tick.close : 0\n\n    const floatTag = (isNaN(tick.close) || isNaN(tick.open))  || tick.open === tick.close ? FloatTag.none : \n        tick.close > tick.open ? FloatTag.increase : FloatTag.decrease\n\n    let _tradeFloat: Partial<TradeFloat> = {\n        change: (tick.close - tick.open) / tick.open,\n        timeUnit: '24h',\n        priceYuan: price,\n        priceDollar: price,\n        floatTag,\n        reward: 0,\n        // APY: 0,\n    }\n\n    return _tradeFloat;\n}\nexport  const makeTickerMap =  <R extends {[key:string]:any}>({tickerMap}:{tickerMap:LoopringMap<TickerData>}):TickerMap<{[key:string]:any}>=>{\n    const {faitPrices, forex} = store.getState().system;\n    return Reflect.ownKeys(tickerMap).reduce((prev, key) => {\n        const item: TickerData = tickerMap[ key as any ];\n        if (item && item.base && forex && faitPrices && (faitPrices[ item.base ] || faitPrices[ 'USDT' ])) {\n            const volume = volumeToCountAsBigNumber(item.base, item.base_token_volume);\n            //FIX: DIE is not in faitPrices\n            const priceDollar = volume?.times(faitPrices[ item.base ] ? faitPrices[ item.base ].price : faitPrices[ 'USDT' ].price);\n            const priceYuan = priceDollar?.times(forex);\n            const change = item.change && item.change !== 0 ? item.change * 100 : undefined;\n\n            prev[ key as keyof R] = {\n                // ...item,\n                timeUnit: '24h',\n                priceDollar: priceDollar?.toNumber() === 0 ? undefined : priceDollar?.toNumber(),\n                priceYuan: priceYuan?.toNumber() === 0 ? undefined : priceYuan?.toNumber(),\n                volume: volume?.toNumber() === 0 ? undefined : volume?.toNumber(),\n                floatTag: item.close > item.open ? 'increase' : 'decrease',\n                change: change,\n                close: isNaN(item.close) ? undefined : item.close,\n                high: item.high === 0 ? undefined : item.high,\n                low: item.low === 0 ? undefined : item.high,\n                // APY: 0,\n                reward: 0,\n                rewardToken: '',\n                __rawTicker__: item,\n            } as Ticker;\n        }\n        return prev\n    }, {} as TickerMap<R>)\n}\n","import { AmmMap } from '../../stores/Amm/AmmMap';\nimport { AmmPoolSnapshot, getBaseQuote, LoopringMap, TickerData, TokenInfo, TokenVolumeV3 } from 'loopring-sdk';\nimport { LoopringAPI } from '../../stores/apis/api';\nimport * as fm from 'loopring-sdk';\nimport { BIG10 } from '../../defs/swap_defs';\nimport { getToken } from 'utils/swap_calc_utils';\nimport { CoinMap, CustomError, ErrorMap } from '@loopring-web/common-resources';\nimport { volumeToCountAsBigNumber } from './volumeToCount';\n\nexport const pairDetailBlock = <C extends { [ key: string ]: any }, I extends { [ key: string ]: any }>({\n                                                                                                           coinKey,\n                                                                                                           ammKey,\n                                                                                                           ammMap\n                                                                                                       }: { coinKey: string, ammKey: string, ammMap: AmmMap<C, I> }):\n    Promise<{\n        ammPoolsBalance: AmmPoolSnapshot,\n        tickMap:  LoopringMap<TickerData>\n}> => {\n    // const exchangeApi = exchangeAPI();\n    // const ammpoolApi = ammpoolAPI();\n    return new Promise((resolve, reject) => {\n        if(LoopringAPI.ammpoolAPI && LoopringAPI.exchangeAPI ) {\n            Promise.all([\n                LoopringAPI.ammpoolAPI.getAmmPoolSnapshot({poolAddress: ammMap[ ammKey ].address}),\n                LoopringAPI.exchangeAPI.getMixTicker({market: coinKey})])\n                // exchangeApi.getMarketTrades({market:coinKey})])\n                //{raw_data},\n                .then(([{ammPoolSnapshot}, {tickMap}]) => {\n                    resolve({\n                        ammPoolsBalance: ammPoolSnapshot,\n                        tickMap,\n                    })\n                })\n\n        }else{\n            reject(new CustomError(ErrorMap.NO_SDK))\n        }\n       \n    })\n}\n\nexport const pairDetailDone = <C>({coinKey, market,ammPoolsBalance, fee, tokenMap,tickerData, _tradeCalcData, coinMap, marketCoins}:any)=>{\n\n    const [, coinSell, coinbuy] = coinKey.match(/(\\w+)-(\\w+)/i)\n    let stob:number|undefined;\n    if (tickerData.base === coinSell) {\n        // const ticker: TickerData = tickMap[market]\n        stob = Number(tickerData.close)\n\n    } else{\n        // const ticker: TickerData = tickMap[market]\n        stob = Number(tickerData.close)!==0? 1/Number(tickerData.close): 0\n    }\n    if(isNaN(stob) && ammPoolsBalance){\n        const {base, quote} = getBaseQuote(coinKey)\n\n        // const baseToken: TokenInfo = getToken(tokenMap, base)\n        // const quoteToken: TokenInfo = getToken(tokenMap, quote)\n        // const baseVol = (fm.toBig(poolBaseTokenVol.volume).div(BIG10.pow(baseToken.decimals)))\n        // const quoteVol = (fm.toBig(quoteBaseTokenVol.volume).div(BIG10.pow(quoteToken.decimals)))\n        //\n        // stob = volumeToCountAsBigNumber(base,poolBaseTokenVol.volume)?.div(\n        //     volumeToCountAsBigNumber(quote,quoteBaseTokenVol.volume) || 1\n        // ) .toNumber()\n        // console.log('1', base, poolBaseTokenVol, quote, quoteBaseTokenVol)\n        //baseToken.tokenId === quoteBaseTokenVol.tokenId && quoteToken.tokenId === poolBaseTokenVol.tokenId) {\n        // const quoteVol = (fm.toBig(quoteBaseTokenVol.volume).div(BIG10.pow(baseToken.decimals)))\n        // const baseVol = (fm.toBig(poolBaseTokenVol.volume).div(BIG10.pow(quoteToken.decimals)))\n        //baseVol.div(quoteVol).toNumber()\n        // console.log('2', base, poolBaseTokenVol, quote, quoteBaseTokenVol)\n        //ErrorMap.NOTS\n        const poolBaseTokenVol: TokenVolumeV3 = ammPoolsBalance.pooled[0];\n        const quoteBaseTokenVol: TokenVolumeV3 = ammPoolsBalance.pooled[1];\n        let poolVolumn:[baseVol:any, quoteVol:any];\n        if ( base && quote && tokenMap[base].tokenId === poolBaseTokenVol.tokenId ) {\n            poolVolumn =  [[base,poolBaseTokenVol.volume],[quote,quoteBaseTokenVol.volume]]\n        } else if (base && quote && tokenMap[base].tokenId === quoteBaseTokenVol.tokenId){\n            poolVolumn =  [[quote,quoteBaseTokenVol.volume],[base,poolBaseTokenVol.volume]]\n        } else {\n            throw new CustomError(ErrorMap.NO_SUPPORT_PAIR)\n        }\n        let [baseVol,quoteVol]  = poolVolumn\n        if(baseVol && quoteVol){\n            // stob = volumeToCountAsBigNumber(baseVol[0],baseVol[1])?.div(\n            //     volumeToCountAsBigNumber(quoteVol[0],quoteVol[1]) || 1\n            // ) .toNumber()\n            stob = volumeToCountAsBigNumber(quoteVol[0],quoteVol[1])?.div(\n                volumeToCountAsBigNumber(baseVol[0],baseVol[1]) || 1).toNumber()\n        }\n    }\n\n    _tradeCalcData.StoB = stob;\n    _tradeCalcData.BtoS = stob !== 0 && stob !== undefined? 1 / (stob * 1.0): 0;\n    _tradeCalcData.sellCoinInfoMap = coinMap && marketCoins?.reduce((prev: any, item: string | number) => {\n        return {...prev, [ item ]: coinMap[ item ]}\n    }, {} as CoinMap<C>)\n    _tradeCalcData.buyCoinInfoMap = coinMap && tokenMap && tokenMap[ _tradeCalcData.coinSell as string ].tradePairs?.reduce((prev: any, item: string | number) => {\n        return {...prev, [ item ]: coinMap[ item ]}\n    }, {} as CoinMap<C>);\n\n    _tradeCalcData.fee = fee\n\n    return {\n        _tradeCalcData\n    }\n    //setPair();\n}","import { utils } from 'ethers'\n\nimport * as fm from 'loopring-sdk'\n\nimport BigNumber from 'bignumber.js'\n\nimport { CoinInfo, CoinMap, } from '@loopring-web/common-resources'\nimport { DepthData, getBaseQuote, LoopringMap, MarketInfo, MarketStatus, TokenInfo, } from 'loopring-sdk'\nimport { BIG0, BIG1, BIG10, BIG10K, MULTI_FACTOR, } from '../defs/swap_defs'\n\nexport function getIcon(symbol: string, tokens: any) {\n    const token: any = tokens[symbol]\n    return getIconByTokenInfo(token)\n}\n\nexport function getIconByTokenInfo(token: TokenInfo) {\n    if (token) {\n        const addr = utils.getAddress(token.address)\n        const path = `https://exchange.loopring.io/assets/images/ethereum/assets/${addr}/logo.png`\n        return path\n    }\n    return ''\n}\n\nexport function makeCoinInfo(token: TokenInfo) {\n    if (token) {\n        const info: CoinInfo<any> = {\n            icon: getIconByTokenInfo(token),\n            name: token.symbol,\n            simpleName: token.symbol,\n            description: token.name,\n            company: token.name,\n        }\n        return info\n    }\n    return undefined\n}\n\nexport const getLeft = (pairs: any, tokens: any) => {\n    if (pairs) {\n\n        const left = Reflect.ownKeys(pairs)\n\n        let coinMapLeft: CoinMap<any, CoinInfo<any>> = {}\n\n        left.forEach((key: any) => {\n            coinMapLeft[key] = {\n                icon: getIcon(key, tokens),\n                name: key,\n                simpleName: key,\n                description: '',\n                company: ''\n            }\n        })\n\n        return {\n            left,\n            coinMapLeft,\n        }\n    }\n\n    return undefined\n}\n\nexport const getRight = (pairs: any, left: any, tokens: any) => {\n    if (pairs) {\n        const right = pairs[left].tokenList\n\n        let coinMapRight: CoinMap<any, CoinInfo<any>> = {}\n\n        if (right) {\n            right.forEach((key: any) => {\n                coinMapRight[key] = {\n                    icon: getIcon(key, tokens),\n                    name: key,\n                    simpleName: key,\n                    description: '',\n                    company: ''\n                }\n            })\n\n            return {\n                right,\n                coinMapRight,\n            }\n        }\n    }\n    return undefined\n}\n\nexport const getToken = (tokens: any, token: any) => {\n    if (!tokens) {\n        throw Error('no tokens list!')\n    }\n    return tokens[token]\n}\n\nexport const getTokenInfoByToken = (ammBalance: any, tokens: any, token: any) => {\n\n    const tokenInfo = getToken(tokens, token)\n\n    const tokenVol = ammBalance.pooledMap[tokenInfo.tokenId].volume\n    const reserve = fm.toBig(tokenVol)\n\n    return {\n        tokenInfo, tokenVol, reserve,\n    }\n}\n\nconst getKey = (base: any, quote: any) => {\n\n    if (!base || !quote) {\n        return {\n            key: undefined,\n            key_bak: undefined,\n            isOK: false,\n        }\n    }\n\n    const isLRCETH = false\n    const key = isLRCETH ? 'LRCETH-Pool' : ('AMM-' + base + '-' + quote)\n    const key_bak = isLRCETH ? 'LRCETH-Pool' : ('AMM-' + quote + '-' + base)\n    return {\n        key,\n        key_bak,\n        isOK: true,\n    }\n}\n\nconst getInfoByKey = (raw_data: any, keyPair: any) => {\n    const {\n        key,\n        key_bak,\n    } = keyPair\n\n    if (raw_data[key]) return raw_data[key]\n    return raw_data[key_bak]\n}\n\nexport const getBalances = (ammpools: any, ammPoolsBalances: any, base: any, quote: any, tokens: any) => {\n\n    const { ammInfo,\n        ammBalance,\n    } = getAmmInfo(ammpools, ammPoolsBalances, base, quote)\n\n    const baseToken = getToken(tokens, base)\n    const quoteToken = getToken(tokens, quote)\n\n    const baseBalance = ammBalance.pooledMap[baseToken.tokenId]\n    const quoteBalance = ammBalance.pooledMap[quoteToken.tokenId]\n\n    return {\n        ammInfo,\n        ammBalance,\n        baseBalance,\n        quoteBalance,\n    }\n\n}\n\nexport const getAmmInfoOnly = (ammpools: any, base: any, quote: any) => {\n\n    const keyPair = getKey(base, quote)\n\n    const ammInfo = getInfoByKey(ammpools, keyPair)\n\n    if (!ammInfo) {\n        throw Error('no ammInfo!')\n    }\n\n    return {\n        ammInfo,\n    }\n\n}\n\nexport const getAmmInfo = (ammpools: any, ammPoolsBalances: any, base: any, quote: any) => {\n\n    const keyPair = getKey(base, quote)\n\n    const ammInfo = getInfoByKey(ammpools, keyPair)\n    const ammBalance = getInfoByKey(ammPoolsBalances, keyPair)\n\n    if (!ammInfo || !ammBalance) {\n        throw Error('no ammInfo! no ammBalance!')\n    }\n\n    const feeBips = parseInt(ammInfo.feeBips)\n\n    return {\n        ammInfo,\n        ammBalance,\n        feeBips,\n    }\n\n}\n\nconst getAmt = (rawAmt: any, tokenInfo: any) => {\n    if (rawAmt === undefined) {\n        rawAmt = 0\n    }\n\n    return fm.toBig(rawAmt).times('1e' + tokenInfo.decimals)\n}\n\nexport const applySlippageTolerance = (\n    tokens: any,\n    token: any,\n    value: any,\n    slippageTolerance: number = 0.01\n) => {\n    const tokenInfo = getToken(tokens, token)\n    const f = 1e7\n    const feeFactor = fm.toBig(f * (1 - slippageTolerance))\n    const amount = fm.toBig(value).times('1e' + tokenInfo.decimals)\n    const outInWei = amount.times(feeFactor).dividedBy(f)\n    const out = fromWEI(tokens, token, outInWei)\n\n    return {\n        outInWei,\n        out,\n    }\n}\n\nexport const applyOrderFee = (tokens: any, token: any, value: any, feeBip: any) => {\n    const tokenInfo = getToken(tokens, token)\n    const feeFactor = fm.toBig(MULTI_FACTOR - feeBip)\n    const amount = fm.toBig(value).times('1e' + tokenInfo.decimals)\n    const appliedAmount = amount.times(feeFactor).dividedBy(MULTI_FACTOR)\n    return appliedAmount\n}\n\nexport function fromWEI(tokens: any, symbol: any, valueInWEI: any, precision?: any, ceil?: any) {\n    try {\n        const tokenInfo = getToken(tokens, symbol)\n        const precisionToFixed = precision ? precision : tokenInfo.precision\n        const value = fm.toBig(valueInWEI).div('1e' + tokenInfo.decimals)\n        return fm.toFixed(value, precisionToFixed, ceil)\n    } catch (error) {\n    }\n    return '0'\n}\n\n\nexport function toWEI(tokens: any, symbol: any, value: any, rm: any = 3) {\n    const tokenInfo = getToken(tokens, symbol)\n    if (typeof tokenInfo === 'undefined') {\n        return '0'\n    }\n\n    return fm.toBig(value)\n        .times('1e' + tokenInfo.decimals)\n        .toFixed(0, rm)\n}\n\nexport const getAmountOut = (amt: any, ammpools: any, ammPoolsBalances: any, tokens: any,\n    base: any, quote: any, takerRate: number, currentPrice: number) => {\n\n    if (amt === undefined) {\n        amt = 0\n    }\n\n    const { ammBalance, feeBips, } = getAmmInfo(ammpools, ammPoolsBalances, base, quote)\n\n    const { tokenInfo: baseTokenInfo, reserve: reserveIn } = getTokenInfoByToken(ammBalance, tokens, base)\n    const { tokenInfo: quoteTokenInfo, reserve: reserveOut } = getTokenInfoByToken(ammBalance, tokens, quote)\n\n    const amountIn = getAmt(amt, baseTokenInfo)\n    const feeBipsFactor = fm.toBig(MULTI_FACTOR - feeBips)\n    const amountInWithFee = amountIn.times(feeBipsFactor)\n    const numerator = amountInWithFee.times(reserveOut)\n    const denominator = reserveIn.times(MULTI_FACTOR).plus(amountInWithFee)\n    const amountOutInWei: any = numerator.dividedBy(denominator)\n\n    let quoteAmt: any = fromWEI(tokens, quote, amountOutInWei)\n\n    const _amount1ApplyOrderFeeInWei = applyOrderFee(tokens, quote, quoteAmt, takerRate + feeBips)\n\n    let _amount1ApplyOrderFee = Number(fromWEI(tokens, quote, _amount1ApplyOrderFeeInWei))\n\n    let priceImpact = 0\n    if (_amount1ApplyOrderFee < 0) {\n        _amount1ApplyOrderFee = 0\n        quoteAmt = null\n    } else {\n        const newPrice = Number(quoteAmt) / Number(amt)\n        priceImpact = (newPrice - currentPrice) / currentPrice\n    }\n\n    return {\n        quoteAmt,\n        _amount1ApplyOrderFeeInWei,\n        _amount1ApplyOrderFee,\n        priceImpact,\n    }\n\n}\n\nexport const getAmountOut_Reverse = (amt: any, ammpools: any, ammPoolsBalances: any, tokens: any,\n    base: any, quote: any, takerRate: number, currentPrice: number) => {\n\n    if (amt === undefined) {\n        amt = 0\n    }\n    \n    const { ammBalance, feeBips, } = getAmmInfo(ammpools, ammPoolsBalances, base, quote)\n\n    const { tokenInfo: baseTokenInfo, reserve: reserveIn } = getTokenInfoByToken(ammBalance, tokens, base)\n    const { tokenInfo: quoteTokenInfo, reserve: reserveOut } = getTokenInfoByToken(ammBalance, tokens, quote)\n\n    const amountOut = getAmt(amt, quoteTokenInfo)\n\n    if (amountOut.gt(reserveOut)) {\n        return {\n            baseAmt: 0,\n            _amount1ApplyOrderFeeInWei: 0,\n            _amount1ApplyOrderFee: 0,\n            priceImpact: 0,\n            hasError: false,\n        }\n    }\n\n    const numerator = amountOut.times(reserveIn).times(MULTI_FACTOR)\n    const feeBipsFactor = fm.toBig(MULTI_FACTOR - feeBips)\n\n    // If amountOut is larger than reserveOut?\n    // It's handled before getAmountOut_reserve\n    const reserveOutSubAmountOut = reserveOut.minus(amountOut)\n\n    const denominator = feeBipsFactor.times(reserveOutSubAmountOut)\n    const amountInInWei = numerator.dividedBy(denominator)\n\n    let baseAmt: any = fromWEI(tokens, quote, amountInInWei)\n\n    const _amount1ApplyOrderFeeInWei = applyOrderFee(tokens, quote, amt, takerRate + feeBips)\n\n    let _amount1ApplyOrderFee = Number(fromWEI(tokens, quote, _amount1ApplyOrderFeeInWei))\n\n    let priceImpact = 0\n    if (_amount1ApplyOrderFee < 0) {\n        _amount1ApplyOrderFee = 0\n        baseAmt = null\n    } else {\n        const newPrice = Number(amt) / Number(baseAmt)\n        priceImpact = (newPrice - currentPrice) / currentPrice\n    }\n\n    return {\n        baseAmt,\n        _amount1ApplyOrderFeeInWei,\n        _amount1ApplyOrderFee,\n        priceImpact,\n        hasError: false,\n    }\n\n}\n\nexport function isEmpty(input: any) {\n    if (!input || input.trim() === '') {\n        return true\n    }\n\n    return false\n}\n\nfunction getAmountOutWithFeeBips(amountIn: string, feeBips: string, reserveIn: string, reserveOut: string ) {\n    const amountInBig = fm.toBig(amountIn)\n    const reserveInBig = fm.toBig(reserveIn)\n    const reserveOutBig = fm.toBig(reserveOut)\n    \n    if (amountInBig.lt(BIG0) || reserveInBig.lt(BIG0) || reserveOutBig.lt(BIG0)) {\n        return BIG0\n    }\n    const feeBipsBig = fm.toBig(feeBips)\n\n    const amountInWithFee = amountInBig.times(BIG10K.minus(feeBipsBig))\n    const numerator = amountInWithFee.times(reserveOutBig)\n    const denominator = reserveInBig.times(BIG10K).plus(amountInWithFee)\n\n    return numerator.div(denominator)\n}\n\nfunction getAmountInWithFeeBips(amountOut: string, feeBips: string, reserveIn: string, reserveOut: string ) {\n    const amountOutBig = fm.toBig(amountOut)\n    const reserveInBig = fm.toBig(reserveIn)\n    const reserveOutBig = fm.toBig(reserveOut)\n    \n    if (amountOutBig.lt(BIG0) || reserveInBig.lt(BIG0) || reserveOutBig.lt(BIG0)) {\n        return BIG0\n    }\n    const feeBipsBig = fm.toBig(feeBips)\n\n    const numerator = reserveInBig.times(amountOutBig).times(BIG10K)\n    const denominator = reserveOutBig.times(amountOutBig).times(BIG10K.minus(feeBipsBig))\n\n    return numerator.div(denominator).plus(BIG1)\n}\n\nfunction getOutputOrderbook(input: string, feeBips: string, isAtoB: boolean) {\n    let output: string  = \"0\"\n    let remain: string  = input\n}\n\nexport function getOutputAmount(base: string, quote: string, market: string, \n    input: string, isAtoB: boolean, feeBips: string, \n    tokenMap: LoopringMap<TokenInfo>, marketMap: LoopringMap<MarketInfo>, depth: DepthData) {\n\n    if (isEmpty(input) || isEmpty(feeBips) || !(market in Object.keys(marketMap))) {\n        return undefined\n    }\n\n    const { base: baseRaw, quote: quoteRaw } = getBaseQuote(market)\n\n    const marketInfo: MarketInfo = marketMap[market]\n\n    const isSwapEnabled = marketInfo.status === MarketStatus.ALL || marketInfo.status === MarketStatus.AMM\n\n    input = input.trim()\n\n    let exceedDepth = false\n\n    const reserveIn = ''\n    const reserveOut = ''\n\n    if (isAtoB) {\n\n        // bids_amtTotal -> bidsSizeShown\n        // asks_volTotal -> asksQuoteSizeShown\n        const amountInWei = toWEI(tokenMap, base, input)\n\n        if (isEmpty(depth.bids_amtTotal) || isEmpty(depth.asks_volTotal)) {\n            exceedDepth = true\n        } else {\n\n            if (base === baseRaw) {\n                exceedDepth = fm.toBig(amountInWei).lt(fm.toBig(depth.bids_amtTotal))\n            } else {\n                exceedDepth = fm.toBig(amountInWei).lt(fm.toBig(depth.asks_volTotal))\n            }\n\n        }\n\n        let amountB = new BigNumber(0)\n\n        if (exceedDepth) {\n            if (isSwapEnabled) {\n                amountB = getAmountOutWithFeeBips(amountInWei, feeBips, reserveIn, reserveOut)\n            }\n        } else {\n            amountB = fm.toBig(toWEI(tokenMap, base, getOutputOrderbook(input, feeBips, isAtoB)))\n        }\n\n        return fromWEI(tokenMap, quote, amountB)\n\n    } else {\n\n        // asks_amtTotal -> asksSizeShown\n        // bids_volTotal -> bidsQuoteSizeShown\n\n        if (isEmpty(depth.bids_volTotal) || isEmpty(depth.asks_amtTotal)) {\n            exceedDepth = true\n        } else {\n            const amountInWei = toWEI(tokenMap, quote, input)\n\n            if (base === baseRaw) {\n                exceedDepth = fm.toBig(amountInWei).gt(fm.toBig(depth.bids_volTotal))\n            } else {\n                exceedDepth = fm.toBig(amountInWei).gt(fm.toBig(depth.asks_amtTotal))\n            }\n\n        }\n\n        let amountSBint = BIG0\n\n        const amountB: string = toWEI(tokenMap, quote, input)\n\n        if (exceedDepth) {\n            if (isSwapEnabled) {\n                amountSBint = getAmountInWithFeeBips(amountB, feeBips, reserveIn, reserveOut)\n            }\n        } else {\n            amountSBint = fm.toBig(toWEI(tokenMap, base, getOutputOrderbook(input, feeBips, isAtoB)))\n        }\n\n        if (amountSBint.gt(BIG0)) {\n            return fromWEI(tokenMap, base, amountSBint)\n        }\n\n        return '0'\n\n    }\n\n}\n","import { useDispatch, useSelector } from 'react-redux'\nimport { getTicker, getTickers, statusUnset } from './reducer';\nimport { TickerStates } from './interface';\nimport { CoinKey } from '@loopring-web/common-resources';\nimport React from 'react';\n\nexport function useTicker(): TickerStates & {\n    updateTickers: (tickerKeys: Array<CoinKey<any>>) => void,\n    updateTicker: (tickerKey: CoinKey<any>) => void,\n    statusUnset: () => void,\n} {\n    const tickerMap: TickerStates = useSelector((state: any) => state.tickerMap)\n    const dispatch = useDispatch();\n    return {\n        ...tickerMap,\n        statusUnset: React.useCallback(() => dispatch(statusUnset(undefined)), [dispatch]),\n        updateTickers: React.useCallback((tickerKeys: Array<CoinKey<any>>) => dispatch(getTickers({tickerKeys})), [dispatch]),\n        updateTicker: React.useCallback((tickerKey: CoinKey<any>) => dispatch(getTicker({tickerKey})), [dispatch]),\n    }\n\n}\n","import { useDispatch, useSelector } from 'react-redux'\nimport { AmmActivityMapStates } from './interface';\nimport { ammActivityMapSlice, getAmmActivityMap, statusUnset } from './reducer';\nimport React from 'react';\n\nexport function useAmmActivityMap(): AmmActivityMapStates & {\n    getAmmActivityMap:()=> void,\n    statusUnset:()=> void,\n} {\n    const ammActivityMap:AmmActivityMapStates = useSelector((state: any) => state.amm.ammActivityMap)\n    const dispatch = useDispatch();\n    return {\n        ...ammActivityMap,\n        statusUnset: React.useCallback(()=>dispatch(statusUnset(undefined)),[dispatch]),\n        getAmmActivityMap: React.useCallback(()=>dispatch(getAmmActivityMap(undefined)),[dispatch])\n    }\n\n}\n","import { useDispatch, useSelector } from 'react-redux'\nimport { StateBase } from '../interface';\nimport { sendSocketTopic, socketEnd, socketSlice } from './reducer';\nimport { SocketMap } from './interface';\nimport React from 'react';\nimport { statusUnset } from '../Amm/AmmMap';\n\nexport function useSocket(): StateBase & {\n    // socketStart:()=>void,\n    statusUnset: () => void,\n    sendSocketTopic: (socket: SocketMap) => void,\n    socketEnd: () => void\n} {\n    const socket: StateBase & { socket: SocketMap } = useSelector((state: any) => state.socket)\n    const dispatch = useDispatch();\n    // const socketStart = () => {\n    //     dispatch(socketSlice.actions.socketStart(undefined))\n    // }\n    // const sendSocketTopic = (socket: SocketMap) => {\n    //     dispatch(socketSlice.actions.sendSocketTopic({socket}))\n    // }\n    // const socketEnd = () => {\n    //     dispatch(socketSlice.actions.socketEnd(undefined))\n    // }\n    // const statusUnset = () => {\n    //     dispatch(socketSlice.actions.statusUnset(undefined))\n    // }\n    return {\n        ...socket,\n        statusUnset:React.useCallback(()=>dispatch(statusUnset(undefined)),[dispatch]),\n        sendSocketTopic:React.useCallback((socket: SocketMap)=>dispatch(sendSocketTopic({socket})),[dispatch]),\n        socketEnd:React.useCallback(()=>dispatch(socketEnd(undefined)),[dispatch]),\n    }\n\n}\n","import store from '../../stores';\nimport { WalletMap,WalletCoin,CoinKey } from '@loopring-web/common-resources';\nimport * as fm from 'loopring-sdk';\nimport { fromWEI } from '../../utils/swap_calc_utils';\nimport { UserBalanceInfo } from 'loopring-sdk';\nexport type WalletMapExtend<C> =    {\n    [K in CoinKey<C>]?: WalletCoin<C> & {\n    detail:UserBalanceInfo\n}\n}\n\n\n// export const makeWalletLayer1 = <C extends { [ key: string ]: any }>():{ walletMap: WalletMapExtend<C> | undefined } => {\n//     const {walletLayer1} = store.getState().walletLayer1;\n//     const {tokenMap} = store.getState().tokenMap;\n//     let walletMap: WalletMapExtend<C> | undefined;\n//     if (walletLayer1) {\n//         walletMap = Reflect.ownKeys(walletLayer1).reduce((prev, item) => {\n//             const {total, locked, pending: {withdraw}} = walletLayer1[ item as string ];\n//             const countBig = fm.toBig(total).minus(fm.toBig(locked)).minus(fm.toBig(withdraw)).toString()\n//             return {\n//                 ...prev, [ item ]: {\n//                     belong: item,\n//                     count: fromWEI(tokenMap, item, countBig),\n//                     detail: walletLayer1[ item as string ]\n//                 }\n//             }\n//         }, {} as  WalletMapExtend<C> )\n//     }\n//\n//     return {walletMap}\n// }\n\nexport const makeWalletLayer2 = <C extends { [ key: string ]: any }>():{ walletMap: WalletMapExtend<C> | undefined } => {\n    const {walletLayer2} = store.getState().walletLayer2;\n    const {tokenMap} = store.getState().tokenMap;\n    let walletMap: WalletMapExtend<C> | undefined;\n\n\n    if (walletLayer2) {\n        walletMap = Reflect.ownKeys(walletLayer2).reduce((prev, item) => {\n            const {total, locked, pending: {withdraw}} = walletLayer2[ item as string ];\n            const countBig = fm.toBig(total).minus(fm.toBig(locked)).toString()\n            return {\n                ...prev, [ item ]: {\n                    belong: item,\n                    count: fromWEI(tokenMap, item, countBig),\n                    detail: walletLayer2[ item as string ]\n                }\n            }\n        }, {} as  WalletMapExtend<C> )\n    }\n\n    return {walletMap}\n}","import { Contract } from '@ethersproject/contracts'\nimport { getAddress } from '@ethersproject/address'\nimport { AddressZero } from '@ethersproject/constants'\nimport { BigNumber } from '@ethersproject/bignumber'\n\nimport { JsonRpcSigner, Web3Provider } from '@ethersproject/providers'\n\nimport { UnsupportedChainIdError } from '@web3-react/core'\n\nimport {\n  NoEthereumProviderError,\n  UserRejectedRequestError as UserRejectedRequestErrorInjected\n} from '@web3-react/injected-connector'\nimport { UserRejectedRequestError as UserRejectedRequestErrorWalletConnect } from '@web3-react/walletconnect-connector'\n\nimport { ChainId } from 'loopring-sdk'\n\nimport ms from 'ms.macro'\n\nexport function getLibrary(provider: any): Web3Provider {\n  const library = new Web3Provider(\n    provider,\n    typeof provider.chainId === 'number'\n      ? provider.chainId\n      : typeof provider.chainId === 'string'\n      ? parseInt(provider.chainId)\n      : 'any'\n  )\n  library.pollingInterval = ms`15s`\n\n  return library\n}\n\nexport function getErrorMessage(error: Error) {\n  if (error instanceof NoEthereumProviderError) {\n    return 'No Ethereum browser extension detected, install MetaMask on desktop or visit from a dApp browser on mobile.'\n  } else if (error instanceof UnsupportedChainIdError) {\n    return 'You\\'re connected to an unsupported network.'\n  } else if (\n    error instanceof UserRejectedRequestErrorInjected ||\n    error instanceof UserRejectedRequestErrorWalletConnect\n  ) {\n    return 'Please authorize this website to access your Ethereum account.'\n  } else {\n    console.error(error)\n    return 'An unknown error occurred. Check the console for more details.'\n  }\n}\n\nexport function transactionChecker(web3: any, address: string) {\n  const account = address.toLowerCase()\n\n  const subscription = web3.eth.subscribe('pendingTransactions', (err: any, res: any) => {\n    if (err) {\n      console.error(err)\n    }\n  })\n\n  return function watchTransactions() {\n    console.log('Watch Transactions...')\n    subscription.on('data', (txHash: any) => {\n      setTimeout(async () => {\n        try {\n          let tx = await web3.eth.getTransaction(txHash)\n          if (tx.to && tx.to.toLowerCase() === account) {\n            const value = web3.utils.fromWei(tx.value, 'ether')\n            if (value > 0) {\n              console.log('watchTransactions value:', value)\n            }\n          }\n        } catch (err) {\n          console.error(err)\n        }\n      }, 60 * 1000)\n    })\n  }\n}\n\n// returns the checksummed address if the address is valid, otherwise returns false\nexport function isAddress(value: any): string | false {\n  try {\n    return getAddress(value)\n  } catch {\n    return false\n  }\n}\n\nconst ETHERSCAN_PREFIXES: { [key: number]: string } = {\n  1: '',\n  5: 'goerli.',\n}\n\nexport function getEtherscanLink(\n  chainId: ChainId,\n  data: string,\n  type: 'transaction' | 'token' | 'address' | 'block'\n): string {\n  const prefix = `https://${ETHERSCAN_PREFIXES[chainId] || ETHERSCAN_PREFIXES[1]}etherscan.io`\n\n  switch (type) {\n    case 'transaction': {\n      return `${prefix}/tx/${data}`\n    }\n    case 'token': {\n      return `${prefix}/token/${data}`\n    }\n    case 'block': {\n      return `${prefix}/block/${data}`\n    }\n    case 'address':\n    default: {\n      return `${prefix}/address/${data}`\n    }\n  }\n}\n\n// shorten the checksummed version of the input address to have 0x + 4 characters at start and end\nexport function shortenAddress(address: string, chars = 4): string {\n  const parsed = isAddress(address)\n  if (!parsed) {\n    throw Error(`Invalid 'address' parameter '${address}'.`)\n  }\n  return `${parsed.substring(0, chars + 2)}...${parsed.substring(42 - chars)}`\n}\n\n// add 10%\nexport function calculateGasMargin(value: BigNumber): BigNumber {\n  return value.mul(BigNumber.from(10000).add(BigNumber.from(1000))).div(BigNumber.from(10000))\n}\n\n// account is not optional\nexport function getSigner(library: Web3Provider, account: string): JsonRpcSigner {\n  return library.getSigner(account).connectUnchecked()\n}\n\n// account is optional\nexport function getProviderOrSigner(library: Web3Provider, account?: string): Web3Provider | JsonRpcSigner {\n  return account ? getSigner(library, account) : library\n}\n\n// account is optional\nexport function getContract(address: string, ABI: any, library: Web3Provider, account?: string): Contract {\n  if (!isAddress(address) || address === AddressZero) {\n    throw Error(`Invalid 'address' parameter '${address}'.`)\n  }\n\n  return new Contract(address, ABI, getProviderOrSigner(library, account) as any)\n}\n\nexport function escapeRegExp(string: string): string {\n  return string.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&') // $& means the whole matched string\n}\n\nexport async function isContract(web3: any, address: string) {\n  const code = await web3.eth.getCode(address)\n  return code && code.length > 2\n}\n\nexport function getShortAddr(address: string) {\n    if (!address || address === undefined || address === null || address.trim() === '') {\n        console.log('getShortAddr got empty!')\n        return undefined\n    }\n    const convertAddr = address.substr(0, 6) + '...' + address.substr(address.length - 4)\n    return convertAddr\n}\n","import { debounce } from 'lodash'\nimport React, { useEffect } from 'react'\nimport { UserStorage } from 'storage'\n\nimport { useCheckAccStatus, } from 'stores/account/hook'\n\nimport { \n  useUpdateChainId,\n  useUpdateExchangeInfo, \n  useUpdateExchangeMarkets, \n  useUpdateTokens, \n  useUpdateAmmPoolConf,\n  useUpdateAmmActivityRules,\n  useUpdateAmmPoolStats,\n} from 'stores/trading/hook'\n\nenum WindowEvent {\n  Click = 'click',\n  Scroll = 'scroll',\n  Mouseover = 'mouseover',\n}\n\nconst events = [WindowEvent.Click, WindowEvent.Scroll]\n\nconst forceReset = debounce(() => { UserStorage.checkTimeout(true) }, 100)\n\nexport const GlobalProvider = ({ children }: { children: React.ReactNode }) => {\n\n  useUpdateExchangeInfo()\n  useUpdateExchangeMarkets()\n  useUpdateTokens()\n  useUpdateAmmPoolConf()\n  useUpdateAmmActivityRules()\n  useUpdateAmmPoolStats()\n  useUpdateChainId()\n\n  useCheckAccStatus()\n\n  useEffect(() => {\n\n    events.forEach((event: string) => {\n      document.addEventListener(event, forceReset)\n    })\n\n    return () => {\n\n      events.forEach((event: string) => {\n        document.removeEventListener(event, forceReset)\n      })\n    }\n\n  }, [])\n\n  return (\n    <React.Fragment>\n      { children}\n    </React.Fragment>\n  )\n\n}\n","import React, { useState, useEffect } from 'react'\nimport styled from '@emotion/styled/macro'\nimport { useTranslation } from 'react-i18next'\n\nimport { useWeb3React } from '@web3-react/core'\n\nimport { network } from 'networks/web3_connectors'\n\nimport { useEagerConnect, useInactiveListener } from 'hooks/web3/useWeb3'\nimport { reset, setAccountStatus } from 'stores/account/reducer'\n\nimport { ChainId, NetworkContextName } from 'loopring-sdk'\n\n// import Loader from 'components/modals/Loader'\nimport { useDispatch } from 'react-redux'\nimport { AccountStatus } from 'state_machine/account_machine_spec'\n\nconst MessageWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  height: 20rem;\n`\n\nconst Message = styled.h2`\n  color: ${({ theme }) => theme.colorBase.error};\n`\n\nexport function Web3ReactManager({ children }: { children: JSX.Element }) {\n  const { t } = useTranslation()\n  const { active } = useWeb3React()\n  const { active: networkActive, error: networkError, activate: activateNetwork } = useWeb3React(NetworkContextName)\n\n  // try to eagerly connect to an injected provider, if it exists and has granted access already\n  const triedEager = useEagerConnect()\n\n  // after eagerly trying injected, if the network connect ever isn't active or in an error state, activate itd\n  useEffect(() => {\n    if (triedEager && !networkActive && !networkError && !active) {\n      activateNetwork(network)\n    }\n  }, [triedEager, networkActive, networkError, activateNetwork, active])\n\n  // when there's no account connected, react to logins (broadly speaking) on the injected provider, if it exists\n  \n  const dispatch = useDispatch()\n\n  const onReConnectInjected = () => {\n    console.log('onReConnectInjected')\n    dispatch(reset(undefined))\n    dispatch(setAccountStatus(AccountStatus.UNCONNNECTED))\n  }\n  \n  useInactiveListener(onReConnectInjected, !triedEager)\n\n  // handle delayed loader state\n  const [showLoader, setShowLoader] = useState(false)\n  useEffect(() => {\n    const timeout = setTimeout(() => {\n      setShowLoader(true)\n    }, 600)\n\n    return () => {\n      clearTimeout(timeout)\n    }\n  }, [])\n\n  // on page load, do nothing until we've tried to connect to the injected connector\n  if (!triedEager) {\n    return null\n  }\n\n  // if the account context isn't active, and there's an error on the network context, it's an irrecoverable error\n  if (!active && networkError) {\n    return (\n      <MessageWrapper>\n        <Message>{t('unknownError')}</Message>\n      </MessageWrapper>\n    )\n  }\n\n  // if neither context is active, spin\n  if (!active && !networkActive) {\n    return showLoader ? (\n      <MessageWrapper>\n        {/*<Loader />*/}\n      </MessageWrapper>\n    ) : null\n  }\n\n  return children\n}\n","import React from 'react'\n\nexport const DevWrapper = ({ children }: { children: React.ReactNode }) => {\n\n  return (\n    <React.Fragment>\n      {\n        process.env.NODE_ENV !== 'production' ? (\n          <>\n          {children}\n          </>\n        ) : null\n      }\n    </React.Fragment>\n  )\n\n}\n\n","import { Subject } from 'rxjs';\n// import { TradeFloat } from '@loopring-web/common-resources';\nimport { LoopringMap } from 'loopring-sdk/dist/defs/loopring_defs';\nimport { TickerData } from 'loopring-sdk';\nimport { makeTickerMap } from '../hooks/help';\nimport { TickerMap } from '../stores/ticker';\n\nconst subject = new Subject<{ tickerMap: TickerMap<{ [ key: string ]: any }> }>();\n\n// export type TickerMap<R> = {\n//     [key in keyof R]:TradeFloat\n// }\n// <R extends {[key:string]:any}>\n  //<R>\nexport const tickerService = {\n    sendTicker: (_tickerMap:LoopringMap<TickerData>) => {\n       const tickerMap:TickerMap<{[key:string]:any}> = makeTickerMap({tickerMap:_tickerMap})\n       subject.next({ tickerMap })\n    },\n    // clearMessages: () => subject.next(),\n    onSocket: () => subject.asObservable()\n};","export enum STATUS {\n    UNSET='UNSET',\n    PENDING='PENDING',\n    ERROR='ERROR',   // success failed timeout is Done\n    DONE='DONE',   // success failed timeout is Done\n}\n","import {\n    ChainId,\n    getAccountArg,\n    getAmmpoolArg,\n    getCandlestickArg,\n    getOrderArg,\n    getOrderBookArg,\n    getTickerArg,\n    getTradeArg,\n    toBig,\n    WsTopicType\n} from 'loopring-sdk';\nimport { LoopringAPI } from '../stores/apis/api';\nimport store from '../stores';\nimport { updateSocketURL } from '../stores/system';\nimport { tickerService } from './tickerService';\nimport { ammPoolService } from './ammPoolService';\nimport { CustomError, ErrorMap } from '@loopring-web/common-resources';\n\nexport type socketEventMap = { fn: (e: MessageEvent, props?: { [ key: string ]: any }) => any, deps?: any[] }\n\nexport enum SocketEventType {\n    pingpong = 'pingpong',\n    account = \"account\",\n    order = \"order\",\n    orderbook = \"orderbook\",\n    trade = \"trade\",\n    ticker = \"ticker\",\n    candlestick = \"candlestick\",\n    ammpool = \"ammpool\"\n}\n\n\nexport type SocketEventMap = {\n    [key in WsTopicType]: socketEventMap\n}\n\nconst pingPong = {\n    fn: (e: MessageEvent) => {\n        if (e.data === 'ping') {\n            // @ts-ignore\n            global.loopringSocket.send('pong')\n        }\n    }\n}\n\n//@ts-ignore\nwindow.socketEventMap = {\n    [ SocketEventType.pingpong ]: pingPong\n} as SocketEventMap;\n\nexport const addSocketEvents = (key: string, event: socketEventMap) => {\n    // @ts-ignore\n    window.socketEventMap = {\n        // @ts-ignore\n        ...window.socketEventMap,\n        [ key ]: event\n    }\n}\nexport const removeSocketEvents = (key: string) => {\n    // @ts-ignore\n    if (window.socketEventMap && window.socketEventMap[ key ]) {\n        // @ts-ignore\n        delete window.socketEventMap[ key ]\n    }\n}\nexport const resetSocketEvents = () => {\n    // @ts-ignore\n    window.socketEventMap = {\n        [ SocketEventType.pingpong ]: pingPong\n    }\n}\n\nexport const isConnectSocket = () => {\n    const global: Window = window || globalThis;\n    // @ts-ignore\n    if (global.loopringSocket && global.loopringSocket.send) {\n        return true;\n    } else {\n        return false\n    }\n}\nexport const socketClose = async () => {\n    const global = window || globalThis;\n    // @ts-ignore\n    let ws: WebSocket | undefined = global.loopringSocket;\n\n    return new Promise((reolve, reject) => {\n        if (ws) {\n            ws.onclose = function (e) {\n                reolve(`Socket is closed, ${e.reason}`)\n            };\n            ws.close();\n        } else {\n            Promise.resolve('no websocket')\n        }\n    })\n}\nconst makeTopics = (topics: any, apiKey?: string) => {\n    let data: any = {\n        op: 'sub',\n        unsubscribeAll: 'true',\n        topics: topics,\n    }\n\n    if (apiKey) {\n        data.apiKey = apiKey\n    }\n    // console.log('Socket>>Socket',JSON.stringify(data));\n    return JSON.stringify(data)\n    // sendMessage(flat_txt)\n}\nexport const clearInitTimer = (init?: boolean) => {\n    const global: any = window || globalThis;\n\n    if (global.__wsTimer__) {\n        if (global.__wsTimer__.timer && global.__wsTimer__.timer !== -1) {\n            clearTimeout(global.__wsTimer__.timer)\n        }\n        global.__wsTimer__.timer = -1\n        global.__wsTimer__.count++;\n    }\n    if (init) {\n        global.__wsTimer__ = {\n            //...global.__wsTimer__,\n            timer: -1,\n            count: 0\n        }\n    }\n}\nexport const socketConnect = async ({chainId, topics, apiKey}: {\n    chainId: ChainId | 'unknown',\n    topics: any[],\n    apiKey?: string\n}) => {\n    try {\n        if (chainId !== 'unknown' && LoopringAPI.wsAPI && topics) {\n            const url = ChainId.MAINNET === chainId ? process.env.REACT_APP_API_URL : process.env.REACT_APP_API_URL_UAT;\n            const {wsKey} = await LoopringAPI.wsAPI.getWsKey();\n            let baseSocket: string = `wss://ws.${url}/v3/ws?wsApiKey=${wsKey}`;\n            store.dispatch(updateSocketURL({socketURL: baseSocket}));\n            const global: any = window || globalThis;\n\n            let ws: WebSocket;\n            ws = new WebSocket(baseSocket);\n            // @ts-ignore\n            global.loopringSocket = ws;\n            ws.onopen = function () {\n                console.warn('Socket>>Socket', \"WebSocket is open now.\");\n                // @ts-ignore\n                ws.send(makeTopics(topics))\n            };\n            ws.onmessage = function (e) {\n                const {data} = e;\n                // data.topic.topic;\n                if (data === 'ping') {\n                    // console.log('Socket>>Socket ping:', e);\n                    global.socketEventMap.pingpong.fn.call(global.socketEventMap.pingpong.deps, e);\n                } else {\n                    const result = JSON.parse(data);\n                    const {topics, topic} = result;\n                    if (topics) {\n                        // console.log('Socket>>Socket topics first return', topics);\n                    }\n                    if (topic && topic.topic) {\n                        const {topic: {topic: _topic}, data} = result\n                        // {\n                        //     \"topic\" : {\n                        //         \"topic\" : \"ticker\",\n                        //             \"market\" : \"LRC-USDT\"\n                        //     },\n                        //     \"ts\" : 1626062177522,\n                        //         \"data\" : [ \"LRC-USDT\", \"1626062177173\", \"1614688563700000000000000\", \"381151436640\", \"0.2315\", \"0.2408\", \"0.2309\", \"0.2408\", \"869\", \"0.2406\", \"0.2413\" ]\n                        // }\n                        // console.log('Socket>>Socket topic', _topic, data);\n                        global.socketEventMap[ topic.topic ].fn.call(global.socketEventMap[ topic.topic ].deps, data)\n\n                    }\n\n                }\n                return false;\n            };\n            ws.onclose = async function (e) {\n                // @ts-ignore\n                console.error('Socket>>Socket', e);\n                if (global.loopringSocket) {\n                    global.loopringSocket = undefined;\n                }\n                console.log('Socket>>Socket', 'Socket is closed. Reconnect will be attempted in 1 second.', e.reason);\n                clearInitTimer()\n                if (global.__wsTimer__.count < 5) {\n                    global.__wsTimer__.timer = setTimeout(function () {\n                        socketConnect.call(global, {chainId, topics, apiKey});\n                    }, 1000 * global.__wsTimer__.count);\n                }\n            };\n            ws.onerror = function (err: Event) {\n                console.error('Socket>>Socket', 'Socket encountered error:', 'Closing socket');\n            };\n\n        }\n    } catch (error) {\n        console.error('Socket>>Socket', 'connect error, not from reconnect')\n\n        // @ts-ignore\n        if (global.loopringSocket) {\n            // @ts-ignore\n            global.loopringSocket.close()\n        }\n\n\n    }\n}\n\nexport const socketSendMessage = async ({socket, chainId, apiKey}: {\n    chainId: ChainId | 'unknown',\n    socket: { [ key: string ]: string[] }\n    apiKey?: string\n}): Promise<boolean> => {\n    try {\n        if (socket && Reflect.ownKeys(socket).length) {\n            //register ping pong event\n            clearInitTimer(true);\n            resetSocketEvents();\n            const {topics} = makeMessageArray({socket});\n            if (!isConnectSocket()) {\n                await socketConnect({chainId, topics, apiKey})\n            } else {\n                const global: Window = window || globalThis;\n                // @ts-ignore\n                global.loopringSocket.send(makeTopics(topics))\n\n            }\n            return true\n        } else {\n            if (!isConnectSocket()) {\n                socketClose();\n            }\n            return false\n        }\n    } catch (error) {\n        throw  new CustomError(ErrorMap.SOCKET_ERROR)\n    }\n\n}\n\n\nexport const makeMessageArray = ({socket}: { socket: { [ key: string ]: string[] } }): {\n    topics: any[]\n} => {\n    let topics: any[] = [], list: any[] = []; // let registerDispatch = [];\n    Reflect.ownKeys(socket).forEach((eventType) => {\n        switch (eventType) {\n            case  SocketEventType.ticker:\n                list = socket[ SocketEventType.ticker ].map(key => getTickerArg(key))\n                if (list && list.length) {\n                    makeReceiveMessageCallback(SocketEventType.ticker)\n                    topics = [...topics, ...list];\n                }\n                break\n            case  SocketEventType.account:\n                if(socket[ SocketEventType.account ]){\n                    list = [getAccountArg()]\n                }\n                if (list && list.length) {\n                    makeReceiveMessageCallback(SocketEventType.account)\n                    topics = [...topics, ...list];\n                }\n                break;\n            case  SocketEventType.order:\n                //FIX:  make order Topic\n                list = socket[ SocketEventType.order ].map(key => getOrderArg(key))\n                if (list && list.length) {\n                    makeReceiveMessageCallback(SocketEventType.order)\n                    topics = [...topics, ...list];\n                }\n                break\n            case  SocketEventType.orderbook:\n                //FIX:  make orderbook Topic\n                list = socket[ SocketEventType.orderbook ].map(key => getOrderBookArg(key, 0))\n                if (list && list.length) {\n                    makeReceiveMessageCallback(SocketEventType.orderbook)\n                    topics = [...topics, ...list];\n                }\n                break\n            case  SocketEventType.trade:\n                list = socket[ SocketEventType.trade ].map(key => getTradeArg(key))\n                if (list && list.length) {\n                    makeReceiveMessageCallback(SocketEventType.trade)\n                    topics = [...topics, ...list];\n                }\n                break\n            case  SocketEventType.candlestick:\n                list = socket[ SocketEventType.candlestick ].map(key => getCandlestickArg(key))\n                if (list && list.length) {\n                    makeReceiveMessageCallback(SocketEventType.candlestick)\n                    topics = [...topics, ...list];\n                }\n                break\n            case  SocketEventType.ammpool:\n                list = socket[ SocketEventType.ammpool ].map(key => getAmmpoolArg(key))\n                if (list && list.length) {\n                    makeReceiveMessageCallback(SocketEventType.ammpool)\n                    topics = [...topics, ...list];\n                }\n                break\n        }\n    })\n    return {topics}\n}\nconst SocketEventMap = {\n    // PING_PONG : (e)=>{\n    //\n    // },\n    [ SocketEventType.account ]: (_e: any) => {\n\n    },\n    [ SocketEventType.order ]: (_e: any) => {\n\n    },\n    [ SocketEventType.orderbook ]: (_e: any) => {\n\n    },\n    [ SocketEventType.trade ]: (_e: any) => {\n\n    },\n    [ SocketEventType.ticker ]: (data: string[]) => {\n        const [symbol, timestamp, size, volume, open, high, low, close, count, bid, ask] = data;\n        // @ts-ignore\n        const [, base, quote] = symbol.match(/(\\w+)-(\\w+)/i);\n        const base_token_volume = size;\n        const quote_token_volume = volume;\n        const change = open === undefined || Number(open) === 0 ? undefined : (toBig(close).minus(open)).div(open)\n        // @ts-ignore\n        tickerService.sendTicker({\n            [ symbol ]: {\n                symbol, base, quote,\n                base_token_volume,\n                quote_token_volume,\n                timestamp: Number(timestamp),\n                change,\n                base_fee_amt: undefined,\n                quote_fee_amt: undefined,\n                open, high, low, close, count, bid, ask\n            }\n        })\n    },\n    [ SocketEventType.candlestick ]: (_e: any) => {\n\n    },\n    [ SocketEventType.ammpool ]: (data: string[]) => {\n        // const [market,timestamp,size,volume,open,high,low,close,count,bid,ask] = data;\n        // @ts-ignore\n        const [poolName, poolAddress, pooled, [tokenId, volume], risky] = data;\n        // @ts-ignore\n        ammPoolService.sendAmmPool({poolName, poolAddress, pooled, lp: {tokenId, volume}, risky})\n    },\n}\n\n\nexport const makeReceiveMessageCallback = (type: keyof typeof SocketEventType) => {\n\n\n    addSocketEvents(type, {\n        // @ts-ignore\n        fn: SocketEventMap [ type ]\n    })\n}\n\n\n\n\n\n","export function myLog(message?: any, ...optionalParams: any[]) {\n    if (process.env.NODE_ENV !== 'production') {\n        console.log(message, ...optionalParams)\n    }\n}\n","import { useDeepCompareEffect } from \"react-use\"\n\nexport function useCustomDCEffect(action: any, deps: any[] | undefined | null) {\n    useDeepCompareEffect(action, [deps || {}])\n}\n"],"sourceRoot":""}