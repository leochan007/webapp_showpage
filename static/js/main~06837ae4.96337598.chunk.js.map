{"version":3,"sources":["stores/account/reducer.ts","stores/account/hook.ts","stores/global/actions.ts","stores/Amm/AmmMap/reducer.ts","stores/Amm/AmmMap/hook.ts","stores/Amm/AmmActivityMap/reducer.ts","stores/Amm/AmmActivityMap/hook.ts","api_wrapper/index.ts","stores/Amm/AmmActivityMap/saga.ts","stores/Amm/AmmMap/saga.ts","stores/Amm/index.ts","stores/token/reducer.ts","stores/token/hook.ts","utils/swap_utils.ts","stores/token/saga.ts","stores/ticker/reducer.ts","stores/ticker/saga.ts","stores/system/interface.ts","stores/system/reducer.ts","stores/walletLayer1/reducer.ts","stores/walletLayer1/hook.ts","services/socketUtil.ts","services/tickerService.ts","services/ammPoolService.ts","services/wallet/walletService.ts","stores/system/saga.ts","stores/walletLayer1/saga.ts","stores/walletLayer2/reducer.ts","stores/walletLayer2/saga.ts","stores/userRewards/reducer.ts","stores/userRewards/saga.ts","stores/socket/reducer.ts","stores/socket/saga.ts","stores/account/saga.ts","stores/rootSaga.ts","stores/ticker/hook.ts","stores/system/hook.ts","utils/log_tools.ts","defs/common_defs.ts","stores/walletLayer2/hook.ts","stores/socket/hook.ts","stores/userRewards/hook.ts","stores/localStore/confirmation/reducer.ts","stores/localStore/favoriteMarket/reducer.ts","stores/localStore/onchainHashInfo/reducer.ts","stores/localStore/index.ts","stores/index.ts","services/account/command.ts","hooks/help/volumeToCount.ts","hooks/help/ammPairDetail.ts","services/account/unlockAccount.ts","services/account/accountServices.ts","layouts/connectStatusCallback.tsx","hooks/help/makeCache.ts","utils/obj_tools.ts","utils/formatter_tool.ts","hooks/help/makeUIAmmActivityMap.ts","hooks/help/makeMyPoolDetail.ts","hooks/help/makeTickView.ts","hooks/help/makeWallet.ts","hooks/help/marketTable.ts","hooks/help/pairDetail.ts","layouts/header/index.tsx","layouts/header/hook.tsx","stores/localStore/confirmation/hook.ts","pages/QuotePage/hook.ts","pages/styled.ts","pages/QuotePage/index.tsx","stores/localStore/favoriteMarket/hook.ts","hooks/common/useCustomDCEffect.ts","pages/SwapPage/panel/BasicInfoPanel/hook.tsx","pages/SwapPage/panel/BasicInfoPanel/index.tsx","pages/SwapPage/panel/TradePanel/index.tsx","services/wallet/useWalletHook.ts","utils/dt_tools.ts","pages/SwapPage/hook.ts","hooks/usePairMatch.ts","pages/SwapPage/index.tsx","pages/Layer2Page/TxPanel/index.tsx","pages/Layer2Page/TxPanel/hooks.ts","pages/Layer2Page/AssetPanel/hook.ts","pages/Layer2Page/AssetPanel/index.tsx","hooks/useractions/useModals.ts","pages/Layer2Page/TradePanel/index.tsx","pages/Layer2Page/TradePanel/hooks.ts","pages/Layer2Page/AmmPanel/index.tsx","pages/Layer2Page/AmmPanel/hook.ts","pages/Layer2Page/HistoryPanel/index.tsx","pages/Layer2Page/HistoryPanel/hooks.ts","pages/Layer2Page/OrderPanel/index.tsx","pages/Layer2Page/OrderPanel/hook.ts","pages/Layer2Page/MyLiquidityPanel/hook.ts","pages/Layer2Page/MyLiquidityPanel/index.tsx","pages/Layer2Page/index.tsx","pages/LiquidityPage/PoolsPanel/index.tsx","pages/LiquidityPage/PoolsPanel/hook.ts","pages/LiquidityPage/AmmPanel/index.tsx","pages/LiquidityPage/AmmPanel/hooks.ts","pages/LiquidityPage/CoinPairPanel/hooks.ts","pages/LiquidityPage/CoinPairPanel/index.tsx","pages/LiquidityPage/hook.ts","pages/LiquidityPage/index.tsx","pages/MiningPage/index.tsx","pages/MiningPage/hook.ts","modal/WalletModal/index.tsx","services/account/activeAccount.ts","services/account/lockAccount.ts","hooks/useractions/useDeposit.ts","modal/AccountModal/index.tsx","hooks/useractions/useChargeFees.ts","hooks/useractions/useAccountModal.tsx","services/account/useAccountHook.ts","modal/index.tsx","hooks/useractions/useTransfer.ts","hooks/useractions/useWithdraw.ts","routers/index.tsx","services/account/networkUpdate.ts","services/account/checkAccount.ts","hookAccountInit.ts","hookConnect.tsx","pages/ErrorPage/index.tsx","pages/LoadingPage/index.tsx","App.tsx","hook.ts","index.tsx"],"names":["initialState","accAddress","readyState","AccountStatus","UN_CONNECT","accountId","apiKey","eddsaKey","publicKey","level","nonce","undefined","keyNonce","connectName","ConnectProviders","unknown","_chainId","status","errorMessage","accountSlice","createSlice","name","reducers","updateAccountStatus","state","action","SagaStatus","PENDING","changeShowModel","_userOnModel","payload","nextAccountStatus","error","ERROR","wrongChain","DONE","cleanAccountStatus","statusUnset","UNSET","actions","useAccount","useSelector","account","dispatch","useDispatch","resetAccount","React","useCallback","props","updateAccount","shouldShow","useMemo","setShouldShow","flag","updateVersion","createAction","ammMap","__timer__","ammMapSlice","getAmmMap","getAmmMapStatus","updateRealTimeAmmMap","useAmmMap","amm","ammActivityMapSlice","ammActivityMap","getAmmActivityMap","getAmmActivityMapStatus","useAmmActivityMap","LoopringAPI","userAPI","exchangeAPI","ammpoolAPI","walletAPI","wsAPI","InitApi","chainId","UserAPI","ExchangeAPI","AmmpoolAPI","WalletAPI","WsAPI","getPostsSaga","ammActivityMapSaga","getAmmActivityMapApi","a","getAmmPoolActivityRules","groupByRuleTypeAndStatus","data","call","put","all","takeLatest","updateRealTimeSaga","ammMapInitSaga","ammMapRealTimeSaga","setAmmState","ammPoolState","keyPair","idIndex","store","getState","tokenMap","match","coinA","coinB","system","forex","faitPrices","result","amountDollar","parseFloat","liquidityUSD","amountYuan","totalLPToken","volumeToCount","lpLiquidity","totalA","liquidity","totalB","rewardValue","rewards","tokenId","volume","rewardToken","rewardValue2","rewardToken2","feeA","volumeToCountAsBigNumber","fees","feeB","feeDollar","toBig","times","price","plus","feeYuan","toNumber","tradeFloat","change","timeUnit","APY","parseInt","apyBips","getAmmMapApi","ammpools","getAmmPoolStats","ammPoolStats","clearInterval","setInterval","coinMap","Reflect","ownKeys","forEach","key","item","market","tokens","pooled","dataItem","isNew","Date","now","Number","createdAt","isActivity","address","__rawConfig__","map","replace","ammMapSaga","fork","ammReducer","combineReducers","reducer","ammForks","totalCoinMap","addressIndex","marketMap","tokenMapSlice","getTokenMap","getTokenMapStatus","marketArray","marketCoins","useTokenMap","getIconByTokenInfo","token","addr","utils","getAddress","tokenInitSaga","getTokenMapApi","tokensMap","pairs","marketArr","tokenArr","symbol","coinInfo","icon","simpleName","description","company","startsWith","tokenList","tradePairs","tokenSaga","tickerMapSlice","tickerMap","getTicker","getTickers","getTickerStatus","tickerSaga","tickersSaga","getTickersApi","list","getMixTicker","join","tickers","makeTickerMap","tickMap","tickerKey","tickerKeys","length","CustomError","ErrorMap","NO_TOKEN_KEY_LIST","ENV","NETWORKEXTEND","tickerForks","env","PROD","baseURL","socketURL","etherscanUrl","gasPrice","exchangeInfo","topics","systemSlice","updateSystem","updateRealTimeObj","getSystemStatus","setTopics","walletLayer1","walletLayer1Slice","updateWalletLayer1","reset","getWalletLayer1Status","useWalletLayer1","resetLayer1","SocketEventType","subject","Subject","tickerService","_tickerMap","next","asObservable","ammPoolService","ammPoolMap","walletService","_balance","balance","LoopringSocket","url","_socketCallbackMap","_loopringSocket","__wsTimer__","timer","count","_baseUrl","socketSendMessage","socket","clearInitTimer","resetSocketEvents","makeMessageArray","isConnectSocket","socketConnect","send","makeTopics","socketClose","SOCKET_ERROR","ws","Promise","reolve","onclose","e","reason","close","resolve","removeSocketEvents","eventType","ticker","getTickerArg","addSocketEvents","getAccountArg","order","getOrderArg","orderbook","getOrderBookArg","trade","getTradeArg","candlestick","getCandlestickArg","ammpool","getAmmpoolArg","op","unsubscribeAll","JSON","stringify","type","deps","fn","SocketEventMap","self","getWsKey","wsKey","WebSocket","onopen","console","warn","OPEN","onmessage","pingpong","parse","topic","log","setTimeout","this","onerror","err","init","clearTimeout","totalAmount","amountLocked","pending","locked","total","_e","timestamp","size","open","high","low","bid","ask","base","quote","base_token_volume","quote_token_volume","minus","div","base_fee_amt","quote_fee_amt","poolName","poolAddress","risky","lp","instance","loopringSocket","getUpdateSystem","systemSaga","initConfig","getTokens","tokenSymbolMap","getAmmPoolConf","getMixMarkets","markets","take","delay","accountStatusUnset","getSystemsApi","window","location","hostname","DEV","ChainId","GOERLI","UAT","MAINNET","NONETWORK","NO_NETWORK_ERROR","getExchangeInfo","getFiatPrice","legal","fiatPrices","faitPricesY","getGasPrice","process","systemForks","walletLayer1Saga","getWalletLayer1Balance","getEthBalances","owner","ethBalance","getTokenBalances","tokenBalances","reduce","prev","belong","fromWEI","walletLayer1Fork","walletLayer2","walletLayer2Slice","updateWalletLayer2","socketUpdateBalance","getWalletLayer2Status","walletLayer2Saga","getSocketSaga","walletLayerSocketSaga","getWalletLayer2Balance","getUserBalances","userBalances","walletLayer2Fork","userRewardsMap","userRewardsMapSlice","getUserRewards","getUserRewardsStatus","userRewardsSaga","getUserRewardsApi","getAmmPoolUserRewards","then","ammUserRewardMap","reject","userRewardsForks","socketSlice","socketEnd","sendSocketTopic","getSocketStatus","closeSocket","sendMessage","socketEndSaga","socketSendMessageSaga","socketForks","accountUpdateSaga","cleanAccountSaga","accountSage","accountRestSage","shouldUpdateProvider","connectProvides","clear","accountFork","mySaga","useTicker","updateTickers","updateTicker","useSystem","Theme","LangType","SystemStatus","MODAL_TYPE","ActionResultCode","myLog","message","myError","REFRESH_RATE","TOAST_TIME","useWalletLayer2","resetLayer2","delayAndUpdateWalletLayer2","getTime","_","useSocket","useUserRewards","confirmationSlice","confirmed","confirm","favoriteMarketSlice","clearAll","removeMarket","pair","includes","index","findIndex","_pair","splice","addMarket","push","addMarkets","depositHashes","withdrawHashes","onchainHashInfoSlice","clearDepositHash","clearWithdrawHash","updateDepositHash","txInfo","hash","updateWithdrawHash","localStoreReducer","favoriteMarket","onchainHashInfo","confirmation","sagaMiddleware","createSagaMiddleware","DEFAULT_TIMEOUT","persistAccConfig","storage","storageSession","timeout","persistSettingConfig","stateReconciler","hardSet","persistLocalStoreConfig","persistedAccountReducer","persistReducer","persistedSettingReducer","settingsSlice","persistedLocalStoreReducer","settings","modals","modalsSlice","localStore","configureStore","middleware","getDefaultMiddleware","thunk","serializableCheck","devTools","enhancers","reduxBatch","setLanguage","language","setCoinJson","imgConfig","run","Commands","ErrorType","ProcessingType","persistor","persistStore","volumn","decimals","ammPairInit","_ammCalcData","ammType","walletMap","tickerData","ammPoolsBalance","coinInfoMap","AtoB","isNaN","baseVol","coinAInfo","quoteVol","coinBInfo","toFixed","myCoinA","myCoinB","coinACount","coinBCount","lpCoin","lpCoinA","lpCoinB","unlockAccount","accountServices","sendSign","generateKeyPair","usedWeb3","exchangeAddress","getUserApiKey","sk","sendAccountSigned","sendErrorUnlock","ProcessSign","ErrorSign","sendUpdateAccStatusAndReset","ERROR_NETWORK","ErrorNetwork","sendCheckAccount","sendAccountLock","accInfo","updateInfo","LOCKED","tags","resetWalletLayer2","sleep","LockAccount","sendActiveAccountDeposit","x","sdk","publicKeyX","y","publicKeyY","ACTIVATED","AccountUnlocked","sendNoAccount","NO_ACCOUNT","NoAccount","sendNeedUpdateAccount","DEPOSITING","SignAccount","sendCheckAcc","getAccount","Error","ethAddress","ProcessAccountCheck","onSocket","accountStaticCallBack","onclickMap","args","apply","btnLabel","fnType","DEFAULT","NOT_ACTIVE","btnClickMap","setShowConnect","isShow","step","WalletConnectStep","Provider","setShowAccount","AccountStep","HadAccount","makeCache","__cache__","customSlippage","setSlippage","deepClone","Object","constructor","hasOwnProperty","copyToClipBoard","text","document","execCommand","textarea","createElement","body","appendChild","value","select","removeChild","navigator","clipboard","writeText","clipboardData","setData","getTokenInfo","VolToNumberWithPrecision","rawVal","tokenInfo","trim","precision","makeUIAmmActivityMap","myReward","ammPoolActivityStatus","ammActivityViewMap","ammPoolActivityRule","awardRules","totalRewards","myRewards","AmmPoolActivityStatus","InProgress","currentRewards","duration","from","rangeFrom","to","rangeTo","isPass","EndOfGame","makeAsCard","_ammInfo","itemArray","activity","getOneRewardInfo","reward","reward2","rewardDollar","rewardYuan","balanceA","balanceB","balanceDollar","balanceYuan","ammUserReward","snapShotData","feeRewards","ratio","BigNumber","ammDetail","makeMyAmmWithSnapshot","_walletMap","makeMyPoolRowWithPoolState","_myAmm","makeMyAmmWithStat","makeTickView","tick","floatTag","FloatTag","none","increase","decrease","_tradeFloat","priceYuan","priceDollar","closeDollar","closeYuan","qPrice","changeDollar","changeYuan","__rawTicker__","makeWalletLayer2","countBig","withdraw","toString","detail","makeMarketArray","coinKey","marketTrades","tradeArray","currency","feeKey","side","Buy","Sell","TradeTypes","amount","fee","time","tradeTime","getUserAmmTransaction","getUserAmmPoolTxs","userAmmPoolTxs","makeMyAmmMarketArray","marketTransaction","lpToken","txType","JOIN","AmmTradeType","add","remove","totalDollar","totalYuan","amountA","poolTokens","actualAmount","amountB","updatedAt","txStatus","pairDetailBlock","ammKey","getAmmPoolSnapshot","ammPoolSnapshot","NO_SDK","Header","withTranslation","t","rest","useLocation","accountState","accountStatus","useOpenModals","_btnClickMap","assign","onWalletBtnConnect","useEffect","headerToolBarData","ButtonComponentsMap","WalletConnect","handleClick","updateWallet","headerMenuData","useHeader","confirmWrapper","useConfirmation","selected","pathname","headerRoot","Toolbar","content","btnTxt","clickToConfirm","StylePaper","styled","Box","theme","unit","TableWrapStyled","Grid","TablePaddingX","pLeft","pRight","FixedStyle","TableFilterParams","RowStyled","SearchWrapperStyled","TabsWrapperStyled","QuotePage","useState","candlestickList","setCandlestickList","ammPoolBalances","setAmmPoolBalances","tableTabValue","setTableTabValue","filteredData","setFilteredData","searchValue","setSearchValue","swapRankingList","setSwapRankingList","tableHeight","setTableHeight","useFavoriteMarket","getSwapRankingList","res","groupByRuleType","SWAP_VOLUME_RANKING","getCandlestick","getMixCandlestick","interval","TradingInterval","d1","limit","candlesticks","o","timeStamp","sign","tickerStatus","tickerStatusUnset","recommendedPairs","setRecommendedPairs","tickList","setTickList","recommendations","setRecommendations","updateRecommendation","recommendationIndex","subscription","subscribe","ele","unsubscribe","getRecommandPairs","getRecommendedMarkets","recommended","socketSendTicker","updateRawData","marketPairs","_recommendationsFloat","defaultRecommendationsFloat","_tickList","keys","_item","m","filter","filteredFloat","concat","slice","_recommendations","WsTopicType","useQuote","getCurrentHeight","height","innerHeight","addEventListener","removeEventListener","getAmmPoolBalances","ammRes","fomattedRes","raw_data","history","useHistory","getFilteredTickList","find","handleTableFilterChange","keyword","favourite","ranking","formattedKeyword","toLocaleLowerCase","toLowerCase","handleRowClick","row","tradePair","handleTabChange","_event","newValue","handleSearchChange","formattedRecommendations","chartData","sort","b","handleRecommendBoxClick","recommendation","display","flexDirection","flex","container","xs","onClick","marginY","paddingBottom","className","Tabs","onChange","Tab","label","Divider","onRowClick","col","rawData","addFavoriteMarket","removeFavoriteMarket","currentHeight","showLoading","useCustomDCEffect","useDeepCompareEffect","toggleData","ChartType","Trend","Depth","BasicInfoPanel","tgItemJSXs","tlabel","JSX","getExistedMarket","chartType","setChartType","ChartUnit","D1","chartUnit","setChartUnit","originData","setOriginData","handleChange","tgItemJSXsPriceChart","pre","tGItemData","mounted","request","date","moment","format","dumpError400","getMixDepth","depth","bidsPrices","bids_prices","bidsAmtTotals","bids_amtTotals","asksPrices","asks_prices","asksAmtTotals","asks_amtTotals","handleChartUnitChange","event","mappedValue","H1","W1","useBasicInfo","upColor","useSettings","baseToken","quoteToken","trendChartData","depthChartData","amt","justifyContent","alignItems","exclusive","marginTop","position","minHeight","maxHeight","style","width","riseColor","extraInfo","handleMove","showXAxis","applyProps","id","TabsStyled","TradePanel","myTradeArray","setValue","alignSelf","useWalletHook","throttleWait","globalSetup","walletLayer2Callback","walletLayer1Callback","walletLayer1Status","walletLayer2Status","socketUpdate","_socketUpdate","getTimestampDaysLater","days","ts","Math","round","useSwapPage","useSwapSocket","slippage","useTranslation","swapBtnI18nKey","setSwapBtnI18nKey","TradeBtnStatus","AVAILABLE","swapBtnStatus","setSwapBtnStatus","isSwapLoading","setIsSwapLoading","quoteMinAmt","setQuoteMinAmt","swapToastOpen","setSwapToastOpen","tradeData","setTradeData","tradeCalcData","setTradeCalcData","setTradeArray","setMyTradeArray","setTradeFloat","path","useRouteMatch","setPair","setMarket","params","realMarket","matchRes","usePairMatch","setAmmPoolSnapshot","output","setOutput","takerRate","setTakerRate","feeBips","setFeeBips","setDepth","amountMap","setAmountMap","myTradeTableCallback","getUserTrades","response","_myTradeArray","userTrades","resetSwap","marketTradeTableCallback","getMarketTrades","_tradeArray","updateDepth","btnLabelAccountActive","validAmt","amountBOut","gte","LOADING","sell","tradeValue","buy","DISABLED","minOrderSize","_btnLabel","swapCalculatorCallback","sellTokenId","getNextStorageId","storageId","tradeChannel","exceedDepth","AMM_POOL","MIXED","exchange","orderId","sellToken","amountS","buyToken","amountBOutSlip","minReceived","allOrNone","validUntil","maxFeeBips","fillAmountBOrS","orderType","TakerOnly","eddsaSignature","submitOrder","errInfo","swapBtnClickArray","onSwapClick","updateAmtMap","req","getMinimumTokenAmt","quoteMinAmtInfo","userOrderInfo","totalFee","sellCoinInfoMap","coinSell","coinBuy","minAmount","handleSwapPanelEvent","swapData","swapType","throttleSetValue","_tradeData","_tradeCalcData","input","isAtoB","priceImpact","minimumReceived","minReceivedVal","SwapType","SEll_CLICK","BUY_CLICK","SELL_SELECTED","BUY_SELECTED","EXCHANGE_CLICK","hasInitialPair","sellSymbol","buySymbol","indexOf","newBuy","market2","baseShow","quoteShow","apiList","_td","stob","NaN","poolVolume","getBaseQuote","poolBaseTokenVol","quoteBaseTokenVol","NO_SUPPORT_PAIR","isValidS2B","StoB","BtoS","buyCoinInfoMap","pairDetailDone","catch","SwapPage","onClose","alertText","severity","autoHideDuration","marginRight","alignContent","direction","flexWrap","minWidth","onRefreshData","TxPanel","useRef","pageSize","setPageSize","txs","setTxs","isLoading","setIsLoading","getTxnStatus","TransactionStatus","processing","processed","received","failed","getUserTxnList","getUserTranferList","getUserDepositHistory","getUserOnchainWithdrawalHistory","userTxnList","userTransferMapped","userTransfers","TransactionTradeTypes","transfer","feeTokenSymbol","feeAmount","memo","txnHash","userDepositMapped","userDepositHistory","deposit","txHash","userWithdrawMapped","userOnchainWithdrawalHistory","mappingList","sortedMappingList","useGetTxs","txTableData","current","offsetHeight","floor","ref","pagination","showFilter","getTxnList","StyledChartWrapper","ChartWrapper","AssetPanel","setChartData","assetsList","setAssetsList","getUserTotalAssets","getUserAssets","wallet","assetType","AssetType","DEX","userAssets","assetsKeyList","assetsDetailList","values","tokenPriceList","entries","formattedData","split","tokenPriceUSDT","ammToken","tokenValue","percentList","lpTotalData","formattedDoughnutData","assetsRawData","TokenType","single","String","EmptyValueTag","available","smallBalance","useGetAssets","getTokenRelatedMarketArray","showDeposit","defaultProps","isNoAccount","title","setShowDeposit","showTransfer","setShowTransfer","showWithdraw","setShowWithdraw","setShowResetAccount","useModals","onShowDeposit","onShowTransfer","onShowWithdraw","lpTokenJump","AssetTitleProps","assetInfo","totalAsset","priceTag","PriceTag","Dollar","component","Typography","color","variant","showFiliter","onLpDeposit","onLpWithdraw","getMakretArrayListCallback","setUserTrades","setShowLoading","getUserTradeList","marketList","Side","tokenFirst","tokenLast","useGetTrades","AmmPanel","ammRecordList","setAmmRecordList","getTokenName","getAmmpoolList","AmmTxType","AmmSideTypes","Join","Exit","lpTokenAmount","useGetAmmRecord","currentTab","setCurrentTab","txsTotal","setTxsTotal","tokenSymbol","start","end","offset","types","getUserTxs","formattedList","userTxs","totalNum","showTxsLoading","isBuy","baseValue","quoteValue","feeValue","showTradesLoading","ammLoading","marginLeft","OrderPanel","orderOriginalData","setOrderOriginalData","setTotalNum","ammPairList","jointPairs","getOrderList","getOrders","userOrders","Array","isArray","orders","volumes","baseAmount","quoteAmount","baseFilled","quoteFilled","average","validity","detailTable","useOrderList","useOverview","userRewardsStatus","ammMapStatus","summaryReward","setSummaryReward","myPoolRow","setMyPoolRow","myAmmMarketArray","setMyAmmMarketArray","walletLayer2DoIt","makeMyPoolRow","walletKey","test","rowData","marketKey","_myPoolRow","makeSummaryMyAmm","StyleWrapper","MyLiquidity","setPage","JumpToLiqudity","page","spacing","sm","paddingY","paddingX","margin","fontFamily","Currency","dollar","getThousandFormattedNumbers","Yuan","marginBottom","handleDeposit","handleWithdraw","handlePageChange","subMenu","subMenuLayer2","BtnConnect","border","defaultFrame","c_key","withRef","setLabel","i18n","fullWidth","maxWidth","SubMenuList","BasicSubMenuList","Layer2Page","viewTemplate","WrapperStyled","PoolsPanel","filterValue","setFilterValue","setRawData","nodeTimer","_ammMap","tickerMapKey","NO_TOKEN_MAP","options","updateTickerLoop","_keys","updateTickersUI","_page","i","useAmmMapUI","getFilteredData","formattedValue","OutlinedInput","placeholder","currentTarget","startAdornment","InputAdornment","AmmPanelView","ammToastOpen","setAmmToastOpen","ammAlertText","setAmmAlertText","ammCalcData","setAmmCalcData","ammJoinData","setAmmJoinData","ammExitData","setAmmExitData","ammDepositBtnI18nKey","setAmmDepositBtnI18nKey","ammWithdrawBtnI18nKey","setAmmWithdrawBtnI18nKey","initAmmData","setAmmPoolSnapShot","updateAmmPoolSnapshot","ammInfo","request1","joinFees","setJoinFees","exitFees","setExitfees","calculateCallback","feeToken","requestJoin","requestType","OffchainFeeReqType","AMM_JOIN","getOffchainFeeAmt","feesJoin","feeJoin","requestExit","AMM_EXIT","feesExit","feeExit","joinRequest","setJoinRequest","handlerJoinInDebounce","slippageReal","marketInfo","coinA_TV","coinB_TV","covertVal","rawA","rawB","makeJoinAmmPoolRequest","joinTokens","precisionForPrice","wait","addToAmmCalculator","setJoinLoading","patch","ammName","request2","storageId0","request_1","storageId1","storageIds","offchainId","joinAmmPool","joinAmmPoolResult","resultInfo","onAmmDepositClickMap","onAmmAddClick","exitRequest","setExitRequest","handleExitInDebounce","rawDecimal","makeExitAmmPoolRequest","exitTokens","unPooled","isJoinLoading","isExitLoading","setExitLoading","removeAmmCalculator","burnedReq","burned","exitAmmPool","exitAmmPoolResult","removeAmmClickMap","onAmmRemoveClick","handleJoinAmmPoolEvent","handleExitAmmPoolEvent","useAmmPanel","AmmPanelType","Deposit","ammDepositData","ammWithdrawData","handleAmmAddChangeEvent","handleAmmRemoveChangeEvent","tabSelected","ammDepositBtnStatus","ammWithdrawBtnStatus","makeAmmDetailExtendsActivityMap","ammActivity","BoxStyled","fontDefault","h4","BoxTopStyled","CoinPairPanel","useUserRewardsStatus","setWalletMap","ammMarketArray","setAmmUserRewardMap","setSnapShotData","myAmm","setMyAmm","coinPairInfo","setCoinPairInfo","pairHistory","setPairHistory","getPairList","ammList","formattedPairHistory","_coinPairInfo","_snapShotData","useCoinPair","tabIndex","_handlePageChange","coinJson","coinAIcon","coinBIcon","Breadcrumbs","Link","href","textTransform","imgx","imgy","imgheight","imgwidth","alt","src","Avatar","lineHeight","useAmmPool","ammActivityMapStatus","_ammActivityMap","setAmmActivityMap","TableWrapperStyled","LiquidityPage","subMenuLiquidity","matchPair","AmmCardWrap","forwardRef","AmmList","jumpTo","lg","Trans","i18nKey","MiningPage","ammProps","userRewardsMapState","setAmmActivityViewMap","ammActivityPastViewMap","setAmmActivityPastViewMap","NotStarted","useAmmMiningUI","jointAmmViewMap","ModalWalletConnectPanel","isShowConnect","qrCodeUrl","setQrCodeUrl","stateCheck","setStateCheck","metaMaskCallback","MetaMask","usedProvide","eth","getChainId","walletConnectCallback","processingCallback","setProcessingCallback","callback","gatewayList","DefaultGatewayList","handleSelect","walletServices","sendDisconnect","MetaMaskProcessing","WalletConnectProcessing","handleProcessing","opts","WalletConnectQRCode","copyToastOpen","setCopyToastOpen","useConnectHook","providerBack","Depositing","walletList","view","termUrl","providerName","onBack","onCopy","SuccessConnect","FailedConnect","onRetry","panelList","updateAccountFromServer","code","NoError","feeMap","formatedPx","formatedPy","maxFee","web3","walletType","updateAccountResponse","errorInfo","UpdateAccoutError","GenEddsaKeyError","GetAccError","lockAccount","useDeposit","isNewAccount","depositValue","setDepositValue","inputValue","gasLimit","gasAmounts","isMetaMask","realGasPrice","toUpperCase","getAllowances","tokenAllowances","allowance","curValInWei","gt","TokenApproveInProcess","depositAddress","ApproveFailed","TokenApproveFailed","DepositInProcess","realChainId","DepositFailed","DataNotReady","onDepositClick","switchType","depositProps","depositBtnStatus","ModalAccountInfo","isShowAccount","openQRCode","setOpenQRCode","addressShort","getShortAddr","onSwitch","onViewQRCode","onDisconnect","goDeposit","goUpdateAccount","UpdateAccountInProcess","onQRClick","QRCode","unlockBtn","lockBtn","accountList","noClose","_height","_width","etherscanLink","UpdateAccount","ProcessUnlock","SuccessUnlock","FailedUnlock","mainBtn","DepositApproveProcess","UpdateAccountFailed","useChargeFees","chargeFeeList","setChargeFeeList","feeRaw","__raw__","useAccountModal","statusAccountUnset","handleErrorAccount","handleLockAccount","handleNoAccount","handleDepositingAccount","handleErrorApproveToken","handleErrorDepositSign","handleProcessDeposit","handleSignAccount","handleSignError","handleProcessSign","handleProcessAccountCheck","handleAccountActive","useAccountHook","ModalGroup","transferProps","transferValue","setTransferValue","TRANSFER","tranferFeeInfo","setTransferFeeInfo","payeeAddr","setPayeeAddr","onTransferClick","transferVol","payerAddr","payerId","payeeId","submitInternalTransfer","handlePanelEvent","handleFeeChange","transferBtnStatus","chargeFeeToken","chargeFeeTokenList","handleOnAddressChange","handleAddressError","_value","useTransfer","withdrawToastOpen","setWithdrawToastOpen","withdrawAlertText","setWithdrawAlertText","withdrawValue","setWithdrawValue","walletMap2","setWalletMap2","OFFCHAIN_WITHDRAWAL","withdrawAddr","setWithdrawAddr","withdrawFeeInfo","setWithdrawFeeInfo","withdrawType","setWithdrawType","withdrawToken","withdrawVol","extraData","minGas","submitOffchainWithdraw","withdrawType2","FAST_OFFCHAIN_WITHDRAWAL","withdrawProps","withdrawBtnStatus","withdrawTypes","WithdrawTypes","onWithdrawClick","handleWithdrawTypeChange","offchainType","WithdrawType","Fast","useWithdraw","withDrawProps","resetProps","swapProps","RouterView","Container","exact","networkUpdate","checkAccount","newAccAddress","useAccountInit","stateAccount","setStateAccount","handleConnect","accounts","networkFlag","handleAccountDisconnect","handleError","errorObj","useConnect","wallet1statusUnset","wallet2statusUnset","StyleBox","ErrorPage","messageKey","textAlign","left","top","email","CONTACT_US_EMAIL","getContactInfo","preventDefault","boxLiner","LoadingPage","version","xmlns","xmlnsXlink","viewBox","enableBackground","xmlSpace","fill","d","attributeType","attributeName","dur","repeatCount","App","useTheme","storeLan","setState","tokenMapStatus","tokenMapStatusUnset","ammMapStatusUnset","systemStatus","systemStatusUnset","ammActivityMapStatusUnset","userRewardsUnset","connector","useInit","GlobalStyles","styles","css","globalCss","mode","colorBase","textPrimary","ProviderApp","children","providers","provider","LocalizationProvider","dateAdapter","MomentUtils","I18nextProvider","ProviderThen","themeMode","MuThemeProvider","getTheme","ThemeProvider","PersistGate","loading","ReactDOM","render","getElementById"],"mappings":"0RAoCMA,EAA6B,CAC/BC,WAAY,GACZC,WAAYC,IAAcC,WAC1BC,WAAY,EACZC,OAAQ,GACRC,SAAU,GACVC,UAAW,GACXC,MAAO,GACPC,WAAOC,EACPC,cAAUD,EACVE,YAAaC,IAAiBC,QAC9BC,SAAU,EACVC,OAAQ,UACRC,aAAc,MAIZC,EAAoCC,YAA2D,CACjGC,KAAM,UACNrB,aAAcA,EACdsB,SAAU,CACNC,oBADM,SACcC,EAAqBC,GACrCD,EAAMP,OAASS,IAAWC,SAE9BC,gBAJM,SAIUJ,EAAqBC,GACjC,IACII,EACAJ,EAAOK,QADPD,aAEJL,EAAMK,aAAeA,GAEzBE,kBAVM,SAUYP,EAAqBC,GAEnC,GAAIA,EAAOO,MACPR,EAAMP,OAASS,IAAWO,MAE1BT,EAAMN,aAAeO,EAAOO,UACzB,CACH,MAYIP,EAAOK,QAXP7B,EADJ,EACIA,WACAC,EAFJ,EAEIA,WACAG,EAHJ,EAGIA,UACA6B,EAJJ,EAIIA,WACAzB,EALJ,EAKIA,MACAH,EANJ,EAMIA,OACAC,EAPJ,EAOIA,SACAS,EARJ,EAQIA,SACAN,EATJ,EASIA,MACAG,EAVJ,EAUIA,iBAIeF,IAAfV,IACAuB,EAAMvB,WAAaA,QAELU,IAAfuB,IACCV,EAAMU,WAAaA,GAEnBhC,IACAsB,EAAMtB,WAAaA,QAELS,IAAdN,IACAmB,EAAMnB,UAAYA,QAERM,IAAVF,IACAe,EAAMf,MAAQA,QAEHE,IAAXL,IACAkB,EAAMlB,OAASA,QAEFK,IAAbJ,IACAiB,EAAMjB,SAAWA,QAEDI,IAAhBE,IACAW,EAAMX,YAAcA,QAEPF,IAAbK,IACAQ,EAAMR,SAAWA,QAEPL,IAAVD,IACAc,EAAMd,MAAQA,GAElBc,EAAMP,OAASS,IAAWS,OAGlCC,mBAhEM,SAgEaZ,EAAqBC,GACpCD,EAAMP,OAASS,IAAWC,SAE9BU,YAAa,SAACb,GACVA,EAAMP,OAASS,IAAWY,UAIvBnB,IACR,EAOHA,EAAaoB,QANbhB,EADG,EACHA,oBAEAK,EAHG,EAGHA,gBACAQ,EAJG,EAIHA,mBACAL,EALG,EAKHA,kBACAM,EANG,EAMHA,Y,4BC7HG,SAASG,IACZ,MAAyDC,aAAY,SAACjB,GAAD,OAAsBA,EAAMkB,WAA1FzB,EAAP,EAAOA,OAAQC,EAAf,EAAeA,aAAiBwB,EAAhC,iBAEMC,EAAWC,cAEXC,EAAeC,IAAMC,aAAa,SAACC,GACrCL,EAASP,EAAmBY,MAC7B,CAACL,IAEEM,EAAgBH,IAAMC,aAAY,SAACL,GACrCC,EAASpB,EAAoBmB,MAC9B,CAACC,IAEEO,EAAaJ,IAAMK,SAAQ,WAC7B,OAAQT,EAAQb,eACjB,CAACa,IAEEU,EAAgBN,IAAMC,aAAY,SAACM,GACrCV,EAASf,EAAgB,CAACC,aAAcwB,OAC1C,CAACV,IAGH,MAAO,CACHD,UACAG,eACAK,aACAE,gBACAH,gBACAZ,YAAaS,IAAMC,aAAY,WAAOJ,EAASN,OAAY1B,MAAc,CAACgC,IAC1E1B,SACAC,gB,gICpCKoC,EAAgBC,YAAmB,wBCC1CvD,EAAuD,CACzDwD,YAAQ7C,EACR8C,WAAY,EACZxC,OAAQ,UACRC,aAAc,MAEZwC,EAAqBtC,YAAY,CACnCC,KAAM,SACNrB,eACAsB,SAAU,CACNqC,UADM,SACInC,EAAOC,GACbD,EAAMP,OAASS,IAAWC,SAE9BiC,gBAJM,SAIUpC,EAAOC,GAEfA,EAAOO,QACPR,EAAMP,OAASS,IAAWO,MAE1BT,EAAMN,aAAeO,EAAOO,OAEhC,MAA4BP,EAAOK,QAA5B0B,EAAP,EAAOA,OAAQC,EAAf,EAAeA,UACXD,IACAhC,EAAMgC,OAASA,GAEfC,IACAjC,EAAMiC,UAAYA,GAEtBjC,EAAMP,OAASS,IAAWS,MAE9B0B,qBApBM,SAoBerC,EAAOC,GACxBD,EAAMP,OAASS,IAAWC,SAE9BU,YAAa,SAAAb,GACTA,EAAMP,OAASS,IAAWY,UAK/B,EAAwEoB,EAAYnB,QAA7EoB,EAAP,EAAOA,UAAWC,EAAlB,EAAkBA,gBAAiBvB,EAAnC,EAAmCA,YAAawB,EAAhD,EAAgDA,qBCtC1CC,EAAY,WAIrB,IAAMN,EAA0Bf,aAAY,SAACjB,GAAD,OAAgBA,EAAMuC,IAAIP,UAChEb,EAAWC,cACjB,OAAO,2BACAY,GADP,IAEInB,YAAYS,IAAMC,aAAY,kBAAIJ,EAASN,OAAY1B,MAAY,CAACgC,IACpEgB,UAAUb,IAAMC,aAAY,kBAAIJ,EAASgB,OAAUhD,MAAY,CAACgC,OCJlEqB,GAA6B5C,YAAY,CAC3CC,KAAM,iBACNrB,aAPiD,CACjDiE,eAAgB,GAChBhD,OAAQ,UACRC,aAAc,MAKdI,SAAU,CACN4C,kBADM,SACY1C,EAAOC,GACrBD,EAAMP,OAASS,IAAWC,SAE9BwC,wBAJM,SAIkB3C,EAAOC,GAEvBA,EAAOO,QACPR,EAAMP,OAASS,IAAWO,MAE1BT,EAAMN,aAAeO,EAAOO,OAEhCR,EAAMyC,eAAN,eAA2BxC,EAAOK,QAAQmC,gBAC1CzC,EAAMP,OAASS,IAAWS,MAE9BE,YAAa,SAAAb,GACTA,EAAMP,OAASS,IAAWY,UAM/B,GAAkE0B,GAAoBzB,QAA/E2B,GAAP,GAAOA,kBAAmBC,GAA1B,GAA0BA,wBAAyB9B,GAAnD,GAAmDA,YC7BnD,SAAS+B,KAIZ,IAAMH,EAAsCxB,aAAY,SAACjB,GAAD,OAAgBA,EAAMuC,IAAIE,kBAC5EtB,EAAWC,cACjB,OAAO,2BACAqB,GADP,IAEI5B,YAAaS,IAAMC,aAAY,kBAAIJ,EAASN,QAAY1B,MAAY,CAACgC,IACrEuB,kBAAmBpB,IAAMC,aAAY,kBAAIJ,EAASuB,QAAkBvD,MAAY,CAACgC,M,+BCNlF,IAAM0B,GAAb,mCAAaA,GAEKC,aAA+B3D,EAFpC0D,GAGKE,iBAAuC5D,EAH5C0D,GAIKG,gBAAqC7D,EAJ1C0D,GAKKI,eAAmC9D,EALxC0D,GAMKK,WAA2B/D,EANhC0D,GAQKM,QAAU,SAACC,GACrBP,GAAYC,QAAU,IAAIO,KAAQ,CAAED,YACpCP,GAAYE,YAAc,IAAIO,KAAY,CAAEF,YAC5CP,GAAYG,WAAa,IAAIO,KAAW,CAAEH,YAC1CP,GAAYI,UAAY,IAAIO,KAAU,CAAEJ,YACxCP,GAAYK,MAAQ,IAAIO,KAAM,CAAEL,a,gBCPvBM,I,YAUQC,IArBnBC,GAAoB,uCAAG,8BAAAC,EAAA,0DAEtBhB,GAAYG,WAFU,gCAGuBH,GAAYG,WAAWc,0BAH9C,uBAGbC,EAHa,EAGbA,yBAHa,kBAIb,CAACC,KAAKD,IAJO,gCAMd,CAACC,UAAK7E,IANQ,2CAAH,qDAWnB,SAAUuE,KAAV,yEAGkB,OAHlB,kBAGwBO,aAAKL,IAH7B,OAIC,OAJD,SAGSI,EAHT,EAGSA,KAHT,SAIOE,aAAIvB,GAAwB,CAACF,eAAeuB,KAJnD,8BAMC,OAND,mCAMOE,aAAIvB,GAAwB,EAAD,KANlC,sDAUQ,SAAUgB,KAAV,iEACX,OADW,SACLQ,aAAI,CAACC,aAAW1B,GAAmBgB,MAD9B,wC,wBC0FEA,I,YAUAW,I,YAyBAC,I,YAIAC,IA9IJC,GAAc,SAAC,GAA6E,IAA5EC,EAA2E,EAA3EA,aAAcC,EAA6D,EAA7DA,QAChCC,EAAWC,GAAMC,WAAWC,SAA5BH,QAEP,EAAyBD,EAAQK,MAAM,gBAAvC,oBAASC,EAAT,KAAgBC,EAAhB,KACA,EAA2BL,GAAMC,WAAWK,OAArCC,EAAP,EAAOA,MAAMC,EAAb,EAAaA,WACb,GAAIT,GAAWK,GAASC,GAASG,GAAcD,EAAO,CAClD,IAAIE,EAAU,CACVC,aAAcC,WAAWd,EAAae,cACtCC,WAAaF,WAAWd,EAAae,eAAiBL,GAAgB,KACtEO,aAAcC,GAAc,MAAQjB,EAASD,EAAamB,aAC1DC,OAAQF,GAAcX,EAAOP,EAAaqB,UAAW,IACrDC,OAAQJ,GAAcV,EAAOR,EAAaqB,UAAW,IACrDE,YAAavB,EAAawB,QAAS,GAAMN,GAAchB,EAASF,EAAawB,QAAS,GAAIC,SAAqBzB,EAAawB,QAAS,GAAIE,aAAUhH,EACnJiH,YAAa3B,EAAawB,QAAS,GAAMtB,EAASF,EAAawB,QAAS,GAAIC,cAAsB/G,EAClGkH,aAAc5B,EAAawB,QAAS,GAAMN,GAAchB,EAASF,EAAawB,QAAS,GAAIC,SAAqBzB,EAAawB,QAAS,GAAIE,aAAUhH,EACpJmH,aAAc7B,EAAawB,QAAS,GAAMtB,EAASF,EAAawB,QAAS,GAAIC,cAAsB/G,GAGjGoH,EAAQC,GAAyBxB,EAAOP,EAAagC,KAAM,IAC3DC,EAAOF,GAAyBvB,EAAOR,EAAagC,KAAM,IAC1DE,EAAavB,EAAWJ,IAAUI,EAAWH,GAC/C2B,aAAML,GAAM,GAAGM,MAAMzB,EAAWJ,GAAO8B,OAAOC,KAAKH,aAAMF,GAAM,GAAGG,MAAMzB,EAAWH,GAAO6B,aAAQ3H,EAChG6H,EAAUL,EAAYA,EAAUE,MAAM1B,QAAShG,EAErD,OAAO,2BACCkG,GADR,IAEIkB,KAAI,OAACA,QAAD,IAACA,OAAD,EAACA,EAAMU,WACXP,KAAI,OAACA,QAAD,IAACA,OAAD,EAACA,EAAMO,WACXN,UAAUA,EAAWA,EAAUM,gBAAY9H,EAC3C6H,QAAQA,EAASA,EAAQC,gBAAY9H,EACrC+H,WAAY,CACRC,YAAQhI,EACRiI,SAAU,OAOdC,IAAuC,EAAjCC,SAAS7C,EAAa8C,SAAiB,QAMnDC,GAAY,uCAAG,6CAAA3D,EAAA,yDAA4C4D,EAA5C,EAA4CA,SAExD5E,GAAYG,WAFA,8CAGN7D,GAHM,cAMb6C,EAAoB,GANP,mBAOaa,GAAYG,kBAPzB,aAOa,EAAwB0E,kBAPrC,uBAOVC,EAPU,EAOVA,cAEF1F,EAAa2C,GAAMC,WAAWtC,IAAIP,OAAlCC,aAE+B,IAAfA,GACb2F,cAAc3F,GAFtBA,EAIW4F,YAAW,sBAAC,4BAAAhE,EAAA,yDAEVhB,GAAYG,WAFF,8CAGJ7D,GAHI,uBAM8C0D,GAAYG,WAAW0E,kBANrE,OAMXC,EANW,OAMwFA,aACvG/C,GAAMzD,SAASkB,EAAqB,CAACsF,kBAPtB,2CAQhB,KAtBU,EAwBsB/C,GAAMC,WAxB5B,IAwBVC,SAxBU,EAwBCgD,QAASnD,EAxBV,EAwBUA,QAK3BoD,QAAQC,QAAQP,GAAUQ,QAA1B,uCAAkC,WAAOC,GAAP,qBAAArE,EAAA,uDACxBsE,EAAsBV,EAAUS,IAC7BE,SAAWF,GAAOC,EAAKE,OAAOC,QAAU3D,IAIvCK,EAAQL,EAASwD,EAAKE,OAAOC,OAAQ,IACrCrD,EAAQN,EAASwD,EAAKE,OAAOC,OAAQ,IACrCC,EANgD,yBAOlDvD,MAAOA,EACPC,MAAOA,EACPuD,QAAOC,KAAKC,MAASC,OAAOR,EAAKS,WAAc,QAC/CC,WAA4B,IAAhBV,EAAK1I,OACjBqJ,QAASX,EAAKW,SACXtE,GAAY,CAACC,aAAckD,EAAcO,GAAOxD,QAAQ,GAAD,OAAKM,EAAL,YAAcC,MAZtB,IAalD8D,cAAeZ,IAGnBnG,EAAQmG,EAAKC,QAAWG,GAlBE,2CAAlC,uDA7BiB,kBAsDV,CAACvG,SAAQC,cAtDC,4CAAH,sDA0DX,SAAUyB,GAAV,kFAG6B,OAHLpD,EAAxB,EAAwBA,QAAxB,SAEQmH,EAAYnH,EAAZmH,SAFR,SAGmCxD,aAAKuD,GAAc,CAACC,aAHvD,OAIC,OAJD,SAGQzF,EAHR,EAGQA,OAAQC,EAHhB,EAGgBA,UAHhB,UAIOiC,aAAI9B,EAAgB,CAACJ,SAAQC,eAJpC,gCAMC,OAND,oCAMOiC,aAAI9B,EAAgB,EAAD,KAN1B,uDAUA,SAAUiC,GAAV,8EAkBC,OAlB6B/D,EAA9B,EAA8BA,QAA9B,SAEQqH,EAAgBrH,EAAhBqH,aACF3F,EAAsC4C,GAAMC,WAAWtC,IAAIP,OAA3DA,OACD2F,GAEAI,QAAQC,QAAQL,GAAcqB,KAAI,SAACd,GAC/B,IAAMxD,EAAWwD,EAAee,QAAQ,OAAQ,IAQhD,OALAjH,EAAQkG,GAAR,2BAEOlG,EAAQkG,IACR1D,GAAY,CAACC,aAAckD,EAAcO,GAAiBxD,aAE1D1C,KAfhB,SAkBOkC,aAAI9B,EAAgB,CAACJ,YAlB5B,8BAoBC,OApBD,mCAoBOkC,aAAI9B,EAAgB,EAAD,KApB1B,sDAyBA,SAAUkC,KAAV,iEACH,OADG,SACGH,aAAI,CAACC,aAAWjC,EAAWuB,MAD9B,wCAIA,SAAUa,KAAV,iEACH,OADG,SACGJ,aAAI,CAACC,aAAW/B,EAAsBgC,MADzC,wCAIA,IAAM6E,GAAa,CAClBC,aAAK7E,IACL6E,aAAK5E,KCrJC6E,GAAaC,YAAgB,CAGvCrH,OAAQE,EAAYoH,QACpB7G,eAAeD,GAAoB8G,UAE1BC,GAAQ,CACjBJ,aAAKxF,KADY,mBAEduF,KCdD1K,GAAuC,CACzCsJ,QAAS,GACT0B,aAAc,GACdC,kBAActK,EACd2F,cAAU3F,EACVuK,eAAWvK,EACXwF,aAASxF,EACTM,OAAQ,UACRC,aAAc,MAEZiK,GAA+C/J,YAAY,CAC7DC,KAAM,WACNrB,gBACAsB,SAAU,CACN8J,YADM,SACM5J,EAAOC,GACfD,EAAMP,OAASS,IAAWC,SAE9B0J,kBAJM,SAIY7J,EAAOC,GAEjBA,EAAOO,QACPR,EAAMP,OAASS,IAAWO,MAE1BT,EAAMN,aAAeO,EAAOO,OAGhC,MASIP,EAAOK,QARPwE,EADJ,EACIA,SACA0E,EAFJ,EAEIA,aACAE,EAHJ,EAGIA,UACAD,EAJJ,EAIIA,aACA9E,EALJ,EAKIA,QACAmD,EANJ,EAMIA,QACAgC,EAPJ,EAOIA,YACAC,EARJ,EAQIA,YAEAjF,IACA9E,EAAM8E,SAAWA,GAEjB4E,IACA1J,EAAM0J,UAAYA,GAElBD,IACAzJ,EAAMyJ,aAAeA,GAErB9E,IACA3E,EAAM2E,QAAUA,GAEhBmD,IACA9H,EAAM8H,QAAUA,GAEhB0B,IACAxJ,EAAMwJ,aAAeA,GAErBM,IACA9J,EAAM8J,YAAcA,GAEpBC,IACA/J,EAAM+J,YAAcA,GAGxB/J,EAAMP,OAASS,IAAWS,MAY9BE,YAAa,SAAAb,GACTA,EAAMP,OAASS,IAAWY,UAM/B,GAAsD6I,GAAc5I,QAA7D6I,GAAP,GAAOA,YAAaC,GAApB,GAAoBA,kBAAmBhJ,GAAvC,GAAuCA,YC7EvC,SAASmJ,KAIZ,IAAMlF,EAA6B7D,aAAY,SAACjB,GAAD,OAAgBA,EAAM8E,YAC/D3D,EAAWC,cAEjB,OAAO,2BACA0D,GADP,IAEIjE,YAAYS,IAAMC,aAAY,kBAAIJ,EAASN,QAAY1B,MAAY,CAACgC,IACpEyI,YAAYtI,IAAMC,aAAY,SAACC,GAAD,OAA6CL,EAASyI,GAAYpI,MAAQ,CAACL,M,eCL1G,SAAS8I,GAAmBC,GAC/B,GAAIA,EAAO,CACP,IAAMC,EAAOC,KAAMC,WAAWH,EAAMpB,SAEpC,MADU,qEAAiEqB,EAAjE,aAGd,MAAO,G,gBCgCMzG,I,YAYA4G,IAtDXC,GAAc,uCAAG,6CAAA1G,EAAA,6DAC+C2G,EAD/C,EAC+CA,UACAC,EAF/C,EAE+CA,MACAC,EAH/C,EAG+CA,UACAC,EAJ/C,EAI+CA,SAE9D7C,EAAuC,GACvC0B,EAA4C,GAC5C1E,EAAe0F,EACff,EAA2B,GAC3B9E,EAAiB,GACrBoD,QAAQC,QAAQwC,GAAWvC,SAAQ,SAACC,GAChC,IDbgB0C,EAAgBvC,ECa1BwC,EAAW,CACbC,MDdYF,ECcE1C,EDdcG,ECcCmC,EDZ9BP,GADY5B,EAAOuC,KCclB/K,KAAMqI,EACN6C,WAAY7C,EACZ8C,YAAa,GACbC,QAAS,IAEP/C,EAAegD,WAAW,SAC5BpD,EAASI,GAAkB2C,GAE/BrB,EAActB,GAAkB2C,EAE5BJ,EAAOvC,IAAmBuC,EAAOvC,GAAgBiD,YAEjDX,EAAWtC,GAAMkD,WAAaX,EAAOvC,GAAgBiD,WAEzD1B,EAAY,2BACLA,GADK,kBAGNe,EAAWtC,GAAMY,QAAWZ,IAElCvD,EAAO,2BACAA,GADA,kBAGD6F,EAAWtC,GAAMhC,QAAWgC,OApCnB,kBAuCZ,CAAClE,KAAM,CAAC8D,UAAS0B,eAAcC,eAAc9E,UAASG,WAAUgF,YAAaY,EAAWX,YAAaY,KAvCzF,2CAAH,sDA0Cb,SAAUjH,GAAV,wFAIgB,OAJ4CpD,EAA5D,EAA4DA,QAA5D,SAEQkK,EAAmDlK,EAAnDkK,UAAWd,EAAwCpJ,EAAxCoJ,UAAWe,EAA6BnK,EAA7BmK,MAAOC,EAAsBpK,EAAtBoK,UAAUC,EAAYrK,EAAZqK,SAF/C,SAIsB1G,aAAKsG,GAAgB,CAACC,YAAWC,QAAOC,YAAWC,aAJzE,OAMC,OAND,SAIQ3G,EAJR,EAIQA,KAJR,SAMOE,aAAI2F,GAAkB,2BAAI7F,GAAL,IAAW0F,gBANvC,+BAQC,OARD,oCAQOxF,aAAI2F,GAAkB,EAAD,KAR5B,uDAYA,SAAUS,KAAV,iEACH,OADG,SACGnG,aAAI,CAACC,aAAWwF,GAAalG,MADhC,wCAKA,IAAM2H,GAAY,CACrBlC,aAAKmB,KC1DHgB,GAAwB1L,YAAY,CACtCC,KAAM,YACNrB,aAPyC,CACzC+M,UAAW,GACX9L,OAAQ,UACRC,aAAc,MAKdI,SAAU,CACN0L,UADM,SACIxL,EAAOC,GACbD,EAAMP,OAASS,IAAWC,SAE9BsL,WAJM,SAIKzL,EAAOC,GACdD,EAAMP,OAASS,IAAWC,SAE9BuL,gBAPM,SAOU1L,EAAOC,GAEfA,EAAOO,QACPR,EAAMP,OAASS,IAAWO,MAE1BT,EAAMN,aAAeO,EAAOO,OAEhCR,EAAMuL,UAAYtL,EAAOK,QAAQiL,UACjCvL,EAAMP,OAASS,IAAWS,MAE9BE,YAAa,SAAAb,GACTA,EAAMP,OAASS,IAAWY,UAM/B,GAA8DwK,GAAevK,QAAtEyK,GAAP,GAAOA,UAAWC,GAAlB,GAAkBA,WAAYC,GAA9B,GAA8BA,gBAAiB7K,GAA/C,GAA+CA,Y,YCRrC6C,I,YAgBPiI,I,YAIAC,IA/BJC,GAAa,uCAAG,WAA2CC,GAA3C,iBAAAjI,EAAA,yDAEbhB,GAAYE,YAFC,8CAGP5D,GAHO,uBAMI0D,GAAYE,YAAYgJ,aAAa,CAAC3D,OAAQ0D,EAAKE,KAAK,OAN5D,cAMZC,EANY,OAOZjI,EAAOkI,GAAc,CAACX,UAAWU,EAAQE,UAP7B,kBAQX,CAACnI,SARU,2CAAH,sDAWZ,SAAUN,GAAV,qFAAwBpD,EAAxB,EAAwBA,QAAxB,SAGQ8L,EAAyB9L,EAAzB8L,UAAWC,EAAc/L,EAAd+L,aACdD,GAAcC,GAAcA,EAAWC,QAJ5C,iBAKoB,OALpB,SAK0BrI,aAAK4H,GAAeO,EAAY,CAACA,GAAaC,GALxE,OAMK,OANL,SAKYrI,EALZ,EAKYA,KALZ,UAMWE,aAAIwH,GAAgB,CAACH,UAAWvH,KAN3C,sCASW,IAAIuI,IAAYC,IAASC,mBATpC,gCAYC,OAZD,oCAYOvI,aAAIwH,GAAgB,EAAD,KAZ1B,uDAgBP,SAAUC,KAAV,iEACI,OADJ,SACUxH,aAAI,CAACC,aAAWoH,GAAW9H,MADrC,wCAIA,SAAUkI,KAAV,iEACI,OADJ,SACUzH,aAAI,CAACC,aAAWqH,GAAY/H,MADtC,wCAIO,ICjDKgJ,GAMAC,GD2CCC,GAAc,CACvBzD,aAAKwC,IACLxC,aAAKyC,M,SCnDGc,K,UAAAA,E,UAAAA,E,aAAAA,Q,cAMAC,K,qBAAAA,Q,KCLZ,IAAMnO,GAA6B,CAC/BqO,IAAKH,GAAII,KACT1J,QAAS,UAET2J,QAAS,GACTC,UAAW,GACXC,aAAc,GACd7H,gBAAYjG,EACZ+N,cAAU/N,EACVgG,WAAOhG,EACP8C,WAAY,EACZxC,OAAQ,UACRC,aAAc,KAEdyN,kBAAchO,EAEdiO,OAAQ,IAENC,GAAmCzN,YAAY,CACjDC,KAAM,SACNrB,gBACAsB,SAAU,CAENwN,aAFM,SAEOtN,EAAOC,GAChBD,EAAMoD,QAAUnD,EAAOK,QAAQ8C,QAC/BpD,EAAMP,OAASS,IAAWC,SAK9BoN,kBATM,SASYvN,EAAOC,GACrB,MAAsCA,EAAOK,QAAtC6E,EAAP,EAAOA,MAAOC,EAAd,EAAcA,WAAY8H,EAA1B,EAA0BA,SACtB/H,IACAnF,EAAMmF,MAAQA,GAEdC,IACApF,EAAMoF,WAAaA,GAEnB8H,IACAlN,EAAMkN,SAAWA,IAYzBM,gBA9BM,SA8BUxN,EAAOC,GAGfA,EAAOO,QACPR,EAAMP,OAASS,IAAWO,MAE1BT,EAAMN,aAAeO,EAAOO,OAEhC,MAUIP,EAAOK,QATPuM,EADJ,EACIA,IACAE,EAFJ,EAEIA,QACAC,EAHJ,EAGIA,UACA5H,EAJJ,EAIIA,WACA8H,EALJ,EAKIA,SACA/H,EANJ,EAMIA,MACAgI,EAPJ,EAOIA,aACAlL,EARJ,EAQIA,UACAgL,EATJ,EASIA,aAEAJ,IACA7M,EAAM6M,IAAMA,GAEZG,IACAhN,EAAMgN,UAAYA,GAElBD,IACA/M,EAAM+M,QAAUA,GAEhB3H,IACApF,EAAMoF,WAAaA,GAEnB8H,IACAlN,EAAMkN,SAAWA,GAEjB/H,IACAnF,EAAMmF,MAAQA,GAGdgI,IACAnN,EAAMmN,aAAeA,GAErBF,IACAjN,EAAMiN,aAAeA,GAGrBhL,IACAjC,EAAMiC,UAAYA,GAEtBjC,EAAMP,OAASS,IAAWS,MAE9BE,YAAa,SAAAb,GACTA,EAAMP,OAASS,IAAWY,UAM/B,GAAmFuM,GAAYtM,QAAxFuM,GAAP,GAAOA,aAAyBE,IAAhC,GAAqBC,UAArB,GAAgCD,iBAA8BD,IAA9D,GAAiD1M,YAAjD,GAA8D0M,mBC3G/D/O,GAAmC,CACrCkP,kBAAcvO,EACdM,OAAQ,OACRC,aAAc,MAEZiO,GAA2B/N,YAAY,CACzCC,KAAM,eACNrB,gBACAsB,SAAU,CACN8N,mBADM,SACa5N,EAAOC,GACtBD,EAAMP,OAASS,IAAWC,SAE9B0N,MAJM,SAIA7N,EAAOC,GACTD,EAAM0N,kBAAevO,EACrBa,EAAMP,OAASS,IAAWY,OAE9BgN,sBARM,SAQgB9N,EAAOC,GAErBA,EAAOO,QACPR,EAAMP,OAASS,IAAWO,MAE1BT,EAAMN,aAAeO,EAAOO,OAEhCR,EAAM0N,aAAN,eAAyBzN,EAAOK,QAAQoN,cACxC1N,EAAMP,OAASS,IAAWS,MAE9BE,YAAa,SAAAb,GACTA,EAAMP,OAASS,IAAWY,UAK/B,GAAwE6M,GAAkB5M,QAAnF6M,GAAP,GAAOA,mBAAoBE,GAA3B,GAA2BA,sBAAuBjN,GAAlD,GAAkDA,YAAagN,GAA/D,GAA+DA,MChC/D,SAASE,KAKZ,IAAML,EAAkCzM,aAAY,SAACjB,GAAD,OAAgBA,EAAM0N,gBACpEvM,EAAWC,cAEjB,OAAO,2BACAsM,GADP,IAEIM,YAAY1M,IAAMC,aAAY,WAC1BJ,EAAS0M,QAAM1O,MACjB,CAACgC,IACHN,YAAYS,IAAMC,aAAY,kBAAIJ,EAASN,QAAY1B,MAAY,CAACgC,IACpEyM,mBAAmBtM,IAAMC,aAAY,kBAAIJ,EAASyM,QAAmBzO,MAAY,CAACgC,M,OCG9E8M,G,+BCjBNC,GAAU,IAAIC,KAOPC,GACG,SAACC,GACV,IAAM9C,EAA0CW,GAAc,CAACX,UAAU8C,IACzEH,GAAQI,KAAK,CAAE/C,eAHT6C,GAMC,kBAAMF,GAAQK,gBCftBL,GAAU,IAAIC,KAOPK,GACI,SAACC,GAAD,OAA+CP,GAAQI,KAAK,CAAEG,WAAYA,KCLrFP,GAAU,IAAIC,KAEPO,GACI,SAACC,GACV,IAAOhK,EAAWC,GAAMC,WAAWC,SAA5BH,QAEP,GAAGgK,GAAYhK,EAAS,CACpB,IAAMiK,EAAO,eAAOjK,EAASgK,EAASzI,SAAayI,GACnDT,GAAQI,KAAKM,KANZF,GAUO,WACZR,GAAQI,UAAKnP,IAXRuP,GAeC,kBAAMR,GAAQK,iB,SHDhBN,K,oBAAAA,E,kBAAAA,E,cAAAA,E,sBAAAA,E,cAAAA,E,gBAAAA,E,0BAAAA,E,mBAAAA,Q,KAoBL,IAAMY,GAAb,WA4EI,WAAYC,GAAa,IAAD,iCAPhBC,wBAOgB,OANhBC,qBAMgB,OALhBC,YAAmD,CACvDC,OAAO,EACPC,MAAM,GAGc,KADhBC,cACgB,OASjBC,kBATiB,uCASG,qCAAAxL,EAAA,yDAAQyL,EAAR,EAAQA,OAAQxQ,EAAhB,EAAgBA,OAAhB,UAMfwQ,IAAUvH,QAAQC,QAAQsH,GAAQhD,OANnB,oBAQf,EAAKiD,gBAAe,GACpB,EAAKC,oBATU,EAUE,EAAKC,iBAAiB,CAACH,WAAjClC,EAVQ,EAURA,OACF,EAAKsC,kBAXK,iCAYL,EAAKC,cAAc,CAAEvC,SAAQtO,WAZxB,+BAcX,YAAKkQ,uBAAL,SAAsBY,KAAK,EAAKC,WAAWzC,EAAOtO,IAdvC,kCAiBR,GAjBQ,eAmBV,EAAK4Q,mBACN,EAAKI,cApBM,mBAsBR,GAtBQ,gEAyBZ,IAAIvD,IAAYC,IAASuD,cAzBb,0DATH,2DAsCjBD,YAtCiB,sBAsCH,4BAAAjM,EAAA,6DACbmM,EAA4B,EAAKhB,gBADpB,kBAGV,IAAIiB,SAAQ,SAACC,GACZF,GACAA,EAAGG,QAAU,SAAUC,GACnBF,EAAO,qBAAD,OAAsBE,EAAEC,UAElCL,EAAGM,SAEHL,QAAQM,QAAQ,oBAVP,2CAtCG,KAqDjBC,mBAAqB,SAACtI,GAErB,EAAK6G,oBAAsB,EAAKA,mBAAoB7G,WAE7C,EAAK6G,mBAAoB7G,IAzDhB,KA6DhBuH,iBAAmB,YAErB,IAFuBH,EAExB,EAFwBA,OAGrBlC,EAAgB,GAAItB,EAAc,GA0DtC,OAzDA/D,QAAQC,QAAQsH,GAAQrH,SAAQ,SAACwI,GAC7B,OAAQA,GACJ,KAAMxC,GAAgByC,QAClB5E,EAAOwD,EAAQrB,GAAgByC,QAAS1H,KAAI,SAAAd,GAAG,OAAIyI,aAAazI,QACpD4D,EAAKQ,SACb,EAAKsE,gBAAgB3C,GAAgByC,QACrCtD,EAAM,sBAAOA,GAAP,YAAkBtB,KAE5B,MACJ,KAAMmC,GAAgB/M,QACdoO,EAAQrB,GAAgB/M,WACxB4K,EAAO,CAAC+E,iBAER/E,GAAQA,EAAKQ,SACb,EAAKsE,gBAAgB3C,GAAgB/M,SACrCkM,EAAM,sBAAOA,GAAP,YAAkBtB,KAE5B,MACJ,KAAMmC,GAAgB6C,OAElBhF,EAAOwD,EAAQrB,GAAgB6C,OAAQ9H,KAAI,SAAAd,GAAG,OAAI6I,aAAY7I,QAClD4D,EAAKQ,SACb,EAAKsE,gBAAgB3C,GAAgB6C,OACrC1D,EAAM,sBAAOA,GAAP,YAAkBtB,KAE5B,MACJ,KAAMmC,GAAgB+C,WAElBlF,EAAOwD,EAAQrB,GAAgB+C,WAAYhI,KAAI,SAAAd,GAAG,OAAI+I,aAAgB/I,EAAK,QAC/D4D,EAAKQ,SACb,EAAKsE,gBAAgB3C,GAAgB+C,WACrC5D,EAAM,sBAAOA,GAAP,YAAkBtB,KAE5B,MACJ,KAAMmC,GAAgBiD,OAClBpF,EAAOwD,EAAQrB,GAAgBiD,OAAQlI,KAAI,SAAAd,GAAG,OAAIiJ,aAAYjJ,QAClD4D,EAAKQ,SACb,EAAKsE,gBAAgB3C,GAAgBiD,OACrC9D,EAAM,sBAAOA,GAAP,YAAkBtB,KAE5B,MACJ,KAAMmC,GAAgBmD,aAClBtF,EAAOwD,EAAQrB,GAAgBmD,aAAcpI,KAAI,SAAAd,GAAG,OAAImJ,aAAkBnJ,QAC9D4D,EAAKQ,SACb,EAAKsE,gBAAgB3C,GAAgBmD,aACrChE,EAAM,sBAAOA,GAAP,YAAkBtB,KAE5B,MACJ,KAAMmC,GAAgBqD,SAClBxF,EAAOwD,EAAQrB,GAAgBqD,SAAUtI,KAAI,SAAAd,GAAG,OAAIqJ,aAAcrJ,QACtD4D,EAAKQ,SACb,EAAKsE,gBAAgB3C,GAAgBqD,SACrClE,EAAM,sBAAOA,GAAP,YAAkBtB,SAKjC,CAACsB,WA1HY,KA6HhBsC,gBAAkB,WACtB,SAAU,EAAKV,iBAAuD,IAApC,EAAKA,gBAAgBtQ,aA9HnC,KAiIhBmR,WAAa,SAACzC,EAAatO,GAC/B,IAAIkF,EAAY,CACZwN,GAAI,MACJC,eAAgB,OAChBrE,OAAQA,GAOZ,OAJItO,IACAkF,EAAKlF,OAASA,GAGX4S,KAAKC,UAAU3N,IA5IF,KAgJhB4M,gBAAkB,SAACgB,EAAmCC,GAE1D,EAAK9C,mBAAL,2BACO,EAAKA,oBADZ,kBAEM6C,EAAQ,CACNE,GAAIjD,EAAekD,eAAeH,GAClCC,KAAKA,GAAU,OAtJH,KA2JhBlC,cA3JgB,uCA2JA,qCAAA9L,EAAA,yDAASuJ,EAAT,EAASA,OAAQtO,EAAjB,EAAiBA,OAAjB,SAMVkT,EAAO,GACTnP,GAAYK,QAASkK,EAPT,iCAQUvK,GAAYK,MAAM+O,WAR5B,gBAQLC,EARK,EAQLA,MACP,EAAKlD,gBAAkB,IAAImD,UAAJ,UAAiB,EAAK/C,SAAtB,qBAA2C8C,IAElE,EAAKlD,gBAAgBoD,OAAS,WAC1BC,QAAQC,KAAK,iBAAkB,0BAC5BN,EAAKhD,iBAAmBgD,EAAKhD,gBAAgBtQ,aAAeyT,UAAUI,MACrEP,EAAKhD,gBAAgBY,KAAKoC,EAAKnC,WAAWzC,EAAOtO,KAIzD,EAAKkQ,gBAAgBwD,UAAY,SAAUpC,GACvC,IAAOpM,EAAQoM,EAARpM,KAEP,GAAa,SAATA,GAAmBgO,EAAKjD,mBAAoB,CAAC,IAAD,MAE5C,UAAAiD,EAAKjD,0BAAL,mBAAyB0D,gBAAzB,YAAmCX,IAAG7N,KAAtC,SAA4C+N,EAAMhO,GAAlD,mBAA2DgO,EAAKjD,mBAAmB0D,SAASZ,YACzF,CACH,IAAMxM,EAASqM,KAAKgB,MAAM1O,GACX2O,GAAStN,EAAjB+H,OAAiB/H,EAATsN,OAIf,GAAIA,GAASA,EAAMA,OAASX,EAAKjD,mBAAoB,CAAC,IAAD,IAClC4D,EAAgBtN,EAAxBsN,MAAQA,MAAQ3O,EAAQqB,EAARrB,KACtB,UAAAgO,EAAKjD,mBAAoB4D,EAAMA,cAA/B,YAAwCb,IAAG7N,KAA3C,SAAiD+N,EAAMhO,GAAvD,mBAAgEgO,EAAKjD,mBAAoB4D,EAAMA,OAAQd,SAKhH,OAAO,GAEX,EAAK7C,gBAAgBmB,QAArB,uCAA+B,WAAgBC,GAAhB,SAAAvM,EAAA,sDAEvBmO,EAAKhD,kBACLgD,EAAKhD,qBAAkB7P,GAE3BkT,QAAQO,IAAI,iBAAkB,6DAA8DxC,EAAEC,QAC9F2B,EAAKzC,iBACDyC,EAAK/C,YAAYE,MAAQ,IACzB6C,EAAK/C,YAAYC,MAAQ2D,YAAW,WAChCb,EAAKrC,cAAc1L,KAAK+N,EAAM,CAAE5E,SAAQtO,aACzC,IAAOkT,EAAK/C,YAAYE,QAVJ,2CAA/B,kCAAA2D,KAAA,eAaA,EAAK9D,gBAAgB+D,QAAU,SAAUC,GACrCX,QAAQ7R,MAAM,iBAAkB,4BAA6B,iBAAkBwS,IArDvE,0DA0DhBX,QAAQ7R,MAAM,iBAAkB,qCAE5B,EAAKwO,iBAEL,EAAKA,gBAAgBsB,QA9DT,0DA3JA,2DA6NhBf,eAAiB,SAAC0D,GAElB,EAAKhE,eAC2B,IAA5B,EAAKA,YAAYC,OACjBgE,aAAa,EAAKjE,YAAYC,OAElC,EAAKD,YAAYC,OAAS,EAC1B,EAAKD,YAAYE,SAEjB8D,IACA,EAAKhE,YAAc,CAEfC,OAAQ,EACRC,MAAO,KA1OK,KA8OhBK,kBAAoB,WACxB,EAAKT,wBAAqB5P,EAC1B,EAAKyR,gBAAgB3C,GAAgBwE,SAAS,CAAC,KA9O/CK,KAAK1D,SAAWN,EA9ExB,iDA6DI,WACI,OAAOgE,KAAK9D,kBA9DpB,6BAgEI,WACI,OAAO8D,KAAK/D,uBAjEpB,KAAaF,GACMkD,gB,qBACT9D,GAAgB/M,SAAW,SAAC8C,GACoCA,EAAvDnF,UAAP,IAAkBsU,EAA4CnP,EAA5CmP,YAAYjN,EAAgClC,EAAhCkC,QAAQkN,EAAwBpP,EAAxBoP,aAAaC,EAAWrP,EAAXqP,QACnD3E,GAA0B,CACtBxI,UACAoN,OAAOF,EACPG,MAAMJ,EACNE,e,eAGNpF,GAAgB6C,OAAS,SAAC0C,O,eAG1BvF,GAAgB+C,WAAa,SAACwC,O,eAG9BvF,GAAgBiD,OAAS,SAACsC,O,eAG1BvF,GAAgByC,QAAU,SAAC1M,GACzB,mBAAmFA,EAAnF,IAAO4G,EAAP,KAAe6I,EAAf,KAA0BC,EAA1B,KAAgCvN,EAAhC,KAAwCwN,EAAxC,KAA8CC,EAA9C,KAAoDC,EAApD,KAAyDvD,EAAzD,KAAgEnB,EAAhE,KAAuE2E,EAAvE,KAA4EC,EAA5E,MAEA,EAAwBnJ,EAAO7F,MAAM,gBAArC,oBAASiP,EAAT,KAAeC,EAAf,KACMC,EAAoBR,EACpBS,EAAqBhO,EACrBgB,OAAkBhI,IAATwU,GAAuC,IAAjBhL,OAAOgL,QAAcxU,EAAayH,aAAM0J,GAAO8D,MAAMT,GAAOU,IAAIV,GACrGvF,GAAA,eACMxD,EAAU,CACRA,SAAQoJ,OAAMC,QACdC,oBACAC,qBACAV,UAAW9K,OAAO8K,GAClBtM,SACAmN,kBAAcnV,EACdoV,mBAAepV,EACfwU,OAAMC,OAAMC,MAAKvD,QAAOnB,QAAO2E,MAAKC,Y,eAI9C9F,GAAgBmD,aAAe,SAACoC,O,eAGhCvF,GAAgBmD,aAAe,SAACpN,O,eAGhCiK,GAAgBqD,SAAW,SAACtN,GAG1B,mBAAkEA,EAAlE,GAAOwQ,EAAP,KAAiBC,EAAjB,KAA8BnM,EAA9B,4BAAuCpC,EAAvC,KAAgDC,EAAhD,KAAyDuO,EAAzD,KAEAlG,GAA2B,CAACgG,WAAUC,cAAanM,SAAQqM,GAAI,CAACzO,UAASC,UAASuO,a,eAGpFzG,GAAgBwE,UAAY,SAACzO,EAAc4Q,GAE5B,SAAT5Q,GACA4Q,EAASC,eAAejF,KAAK,W,oBIJ5BkF,I,YAuBPC,IAtGJC,GAAU,UAAG,SAAbA,EAA4D5R,GAA/C,6FAEqB,OAFrB,SAE2Ba,aAAI,sBAAC,4BAAAJ,EAAA,gFAAkBhB,GAAYE,mBAA9B,aAAkB,EAAyBkS,YAA3C,oFAFhC,OAGI,OAHJ,SAEQzK,EAFR,EAER0K,eAFQ,SAGUjR,aAAI,sBAAC,4BAAAJ,EAAA,gFAAkBhB,GAAYG,kBAA9B,aAAkB,EAAwBmS,iBAA1C,oFAHf,OAI+B,OAJ/B,SAGR1N,EAHQ,EAGRA,SAHQ,UAIqCxD,aAAI,sBAAC,4BAAAJ,EAAA,yFAAYhB,GAAYE,mBAAxB,aAAY,EAAyBqS,iBAArC,4CAJ1C,QAMf,OANe,SAIR3K,EAJQ,EAIRA,MAAOC,EAJC,EAIDA,UAAWC,EAJV,EAIUA,SAAU0K,EAJpB,EAIoBA,QACnCzQ,GAAMzD,SAASyI,GAAY,CAACY,YAAWd,UAAW2L,EAAS5K,QAAOC,YAAWC,cAL9D,UAMT2K,aAAK,8BANI,QAcf,OANA1Q,GAAMzD,SAASgB,EAAU,CAACsF,cAC1B7C,GAAMzD,SAASuB,GAAkB,CAAC+E,cAC9B7C,GAAMC,WAAWC,SAASrF,OAVf,UAcT8V,aAAM,IAdG,UAgBiB3Q,GAAMC,WAA/B3D,EAhBQ,EAgBRA,QAASwM,EAhBD,EAgBCA,aACZxM,EAAQzC,iBAA4CU,IAA9BuO,EAAaA,cACnC9I,GAAMzD,SAASyM,QAAmBzO,IAEtCyF,GAAMzD,SAASqU,OAAmBrW,IApBnB,qCAAb6V,MAuBAS,GAAa,uCAAG,WAA2CrS,GAA3C,mCAAAS,EAAA,yDAGZgJ,EAAmC,cAA7B6I,OAAOC,SAASC,SAA2BlJ,GAAImJ,IAAMC,KAAQC,SAAW3S,EAAUsJ,GAAIsJ,IAAMtJ,GAAII,MAC5G1J,EAAU0S,KAAQC,SAAW3S,EAAU0S,KAAQC,OAASD,KAAQG,UAAY7S,EAAU0S,KAAQG,QAAUtJ,GAAcuJ,aAEtGvJ,GAAcuJ,UANZ,sBAOR,IAAI3J,IAAYC,IAAS2J,kBAPjB,UAUdtT,GAAYM,QAAQC,IAChBP,GAAYE,YAXF,kCAYoBF,GAAYE,YAAYqT,kBAZ5C,wBAYHjJ,EAZG,EAYHA,aAZG,UAagBtK,GAAYE,YAAYsT,aAAa,CAACC,MAAO,QAb7D,eAaJlR,EAbI,OAasEmR,WAbtE,UAciB1T,GAAYE,YAAYsT,aAAa,CAACC,MAAO,QAd9D,eAcJE,EAdI,OAcuED,WAdvE,UAec1T,GAAYE,YAAY0T,cAftC,2BAeqDvJ,SAAzDA,EAfI,KAegE,IAEpEH,EAAU+I,KAAQG,UAAY7S,EAApB,kBAAyCsT,wBAAzC,iBAAqFA,wBAC/F1J,EAAY8I,KAAQG,UAAY7S,EAApB,mBAA0CsT,uBAA1C,6BAA8FA,uBAA9F,UACZzJ,EAAe6I,KAAQG,UAAY7S,EAApB,uEAErBsS,OAAOb,eAAiB,IAAIhG,GAAe7B,GAErC7H,EAAQqR,EAAW,KAAW1P,MAEpC7E,EAAa,SAACA,GAIV,OAHIA,IAA4B,IAAfA,GACb2F,cAAc3F,GAEX4F,YAAW,sBAAC,kCAAAhE,EAAA,0DACXhB,GAAYE,YADD,iCAEeF,GAAYE,YAAYsT,aAAa,CAACC,MAAO,QAF5D,cAELlR,EAFK,OAEqEmR,WAFrE,SAGa1T,GAAYE,YAAY0T,cAHrC,mBAGoDvJ,SAAzDA,EAHK,KAG+D,IACpE/H,EAJK,UAIGC,EAAU,YAJb,aAIG,EAAsB0B,MACpClC,GAAMzD,SAASkB,OAAqBlD,IACpCyF,GAAMzD,SAASoM,GAAkB,CAACnI,aAAY8H,WAAU/H,WAN7C,4CAQhB,KAZM,CADRlD,EAAa2C,GAAMC,WAAWK,OAA9BjD,WAxBK,kBAwCH,CACHmB,UACA6J,eACAJ,MACAE,UACAC,YACA5H,aACA8H,WACA/H,QACAgI,eACAlL,cAlDM,4CAAH,sDAwDZ,SAAU6S,GAAV,8FAaK,OAbsBxU,EAA3B,EAA2BA,QAA3B,SAGQ8C,EAAW9C,EAAX8C,QAHR,SAaWa,aAAKwR,GAAerS,GAb/B,OAeC,OAfD,SAKKyJ,EALL,EAKKA,IACAE,EANL,EAMKA,QACA3H,EAPL,EAOKA,WACA8H,EARL,EAQKA,SACA/H,EATL,EASKA,MACAgI,EAVL,EAUKA,aACAF,EAXL,EAWKA,aACAhL,EAZL,EAYKA,UAZL,UAeOiC,aAAIsJ,GAAgB,CAACX,MAAKE,UAAS3H,aAAY8H,WAAU/H,QAAOgI,eAAcF,eAAchL,eAfnG,QAgBC,OAhBD,UAgBOgC,aAAK+Q,GAAY5R,GAhBxB,gCAmBC,OAnBD,oCAmBOc,aAAIsJ,GAAgB,EAAD,KAnB1B,uDAuBP,SAAUuH,KAAV,iEACI,OADJ,SACU5Q,aAAI,CAACC,aAAWkJ,GAAcwH,MADxC,wCAIO,IAAM6B,GAAc,CACvBxN,aAAK4L,K,YCpFQrR,I,YAUAkT,IApCXC,GAAsB,uCAAG,4CAAAhT,EAAA,yDAIpBpF,EAAcmG,GAAMC,WAAW3D,QAA/BzC,WAJoB,EAKImG,GAAMC,WAAWC,SAAzCA,EALoB,EAKpBA,YAASiF,EALW,EAKXA,cACEjF,GAAYjC,GAAYE,aANf,iCAQKF,GAAYE,YAAY+T,eAAe,CAACC,MAAMtY,IARnD,uBAQhBuY,EARgB,EAQhBA,WARgB,SASQnU,GAAYE,YAAYkU,iBAAiB,CAACF,MAAMtY,EAAYyL,MAAOH,EAAYiC,QAAQlH,GAT/F,wBAShBoS,EATgB,EAShBA,eACM,IAAUF,EAEpBE,IACCxJ,EAAe3F,QAAQC,QAAQkP,GAAeC,QAAO,SAACC,EAAKjP,GACvD,OAAO,2BAAMiP,GAAb,kBAAqBjP,EAAO,CACpBkP,OAAQlP,EACRgH,MAAOmI,aAAQxS,EAAUqD,EAAM+O,EAAc/O,SAGvD,KAnBiB,kBAqBhB,CAACuF,iBArBe,4CAAH,qDA0BrB,SAAUhK,KAAV,yEAGwB,OAHxB,kBAG8BO,aAAK4S,IAHnC,OAIC,OAJD,SAGQnJ,EAHR,EAGQA,aAHR,SAIOxJ,aAAI4J,GAAsB,CAACJ,kBAJlC,8BAMC,OAND,mCAMOxJ,aAAI4J,GAAsB,EAAD,KANhC,sDAUA,SAAU8I,KAAV,iEACH,OADG,SACGzS,aAAI,CAACC,aAAWwJ,GAAoBlK,MADvC,wCAIA,IAAM6T,GAAmB,CAC5BpO,aAAKyN,KChDHpY,GAAmC,CACrCgZ,kBAAcrY,EACdM,OAAQ,OACRC,aAAc,MAEZ+X,GAA+C7X,YAAY,CAC7DC,KAAM,eACNrB,gBACAsB,SAAU,CACN4X,mBADM,SACa1X,EAAOC,GACtBD,EAAMP,OAASS,IAAWC,SAE9B0N,MAJM,SAIA7N,EAAOC,GACTD,EAAMwX,kBAAerY,EACrBa,EAAMP,OAASS,IAAWY,OAE9B6W,oBARM,SAQc3X,EAAOC,GACvBD,EAAMP,OAASS,IAAWC,SAE9ByX,sBAXM,SAWgB5X,EAAOC,GAErBA,EAAOO,QACPR,EAAMP,OAASS,IAAWO,MAE1BT,EAAMN,aAAeO,EAAOO,OAEhCR,EAAMwX,aAAN,eAAyBvX,EAAOK,QAAQkX,cACxCxX,EAAMP,OAASS,IAAWS,MAE9BE,YAAa,SAAAb,GACTA,EAAMP,OAASS,IAAWY,UAK/B,GAA6F2W,GAAkB1W,QAAxG2W,GAAP,GAAOA,mBAAoBC,GAA3B,GAA2BA,oBAAqBC,GAAhD,GAAgDA,sBAAuB/W,GAAvE,GAAuEA,YAAagN,GAApF,GAAoFA,M,YCF1EnK,I,YAYAmU,I,YAGAC,I,YAWAC,IAvDXC,GAAsB,uCAAG,0CAAAnU,EAAA,2DAKCe,GAAMC,WAAW3D,QAAtCrC,EALoB,EAKpBA,UAAWC,EALS,EAKTA,OALS,EAMc8F,GAAMC,WAAWC,SAN/B,EAMpBA,SAAUH,EANU,EAMVA,QANU,EAMDoF,cAEtBjL,GAAUD,GAAagE,GAAYC,SARZ,gCAUMD,GAAYC,QAAQmV,gBAAgB,CAACpZ,UAAWA,EAAWwJ,OAAQ,IAAKvJ,GAV9E,iBAUhBoZ,EAVgB,EAUhBA,gBASHV,EAAezP,QAAQC,QAAQkQ,GAAcf,QAAO,SAACC,EAAMjP,GAEvD,OAAO,2BAAIiP,GAAX,kBAAmBzS,EAASwD,GAAU+P,EAAcvP,OAAOR,QAC5D,KAtBgB,gCA0BpB,CAACqP,iBA1BmB,2CAAH,qDA6BrB,SAAU9T,KAAV,yEAGwB,OAHxB,kBAG8BO,aAAK+T,IAHnC,OAIC,OAJD,SAGQR,EAHR,EAGQA,aAHR,SAIOtT,aAAI0T,GAAsB,CAACJ,kBAJlC,8BAMC,OAND,mCAMOtT,aAAI0T,GAAsB,EAAD,KANhC,sDAYA,SAAUC,KAAV,iEACH,OADG,SACG1T,aAAI,CAACC,aAAWsT,GAAoBhU,MADvC,wCAGA,SAAUoU,GAAV,4EAKC,OALwBxX,EAAzB,EAAyBA,QAAzB,SAGMkX,EAAiB5S,GAAMC,WAAW2S,aAAlCA,aACLA,EAAY,2BAAOA,GAAgBlX,GAJpC,SAKO4D,aAAI0T,GAAsB,CAACJ,kBALlC,8BAOC,OAPD,mCAOOtT,aAAI0T,GAAsB,EAAD,KAPhC,sDAWA,SAAUG,KAAV,iEACH,OADG,SACG5T,aAAI,CAACC,aAAWuT,GAAqBG,MADxC,wCAMA,IAAMK,GAAmB,CAC5BhP,aAAK0O,IACL1O,aAAK4O,KCrEHvZ,GAAkC,CACpC4Z,oBAAgBjZ,EAChBM,OAAQ,UACRC,aAAc,KACduC,WAAY,GAEVoW,GAAgDzY,YAAY,CAC9DC,KAAM,iBACNrB,gBACAsB,SAAU,CACNwY,eADM,SACStY,EAAOC,GAClBD,EAAMP,OAASS,IAAWC,SAE9BoY,qBAJM,SAIevY,EAAOC,GAEpBA,EAAOO,QACPR,EAAMP,OAASS,IAAWO,MAE1BT,EAAMN,aAAeO,EAAOO,OAEhCR,EAAMoY,eAAN,2BAA2BpY,EAAMoY,gBAAmBnY,EAAOK,QAAQ8X,gBAC/DnY,EAAOK,QAAQ2B,YACfjC,EAAMiC,UAAYhC,EAAOK,QAAQ2B,WAErCjC,EAAMP,OAASS,IAAWS,MAE9BE,YAAa,SAAAb,GACTA,EAAMP,OAASS,IAAWY,UAM/B,GAA4DuX,GAAoBtX,QAAzEuX,GAAP,GAAOA,eAAgBC,GAAvB,GAAuBA,qBAAsB1X,GAA7C,GAA6CA,Y,YCInC6C,I,YAiBP8U,IApDJC,GAAiB,uCAAG,WAAqC3M,GAArC,iBAAAjI,EAAA,yDAKfhF,EAAa+F,GAAMC,WAAW3D,QAA9BrC,UACFoD,EAAa2C,GAAMC,WAAWuT,eAA9BnW,WAEFY,GAAYG,aAAcnE,EARP,uBASlBoD,EAAa,SAACA,GAIV,OAHIA,IAA4B,IAAfA,GACb2F,cAAc3F,GAEX4Q,WAAU,sBAAC,sBAAAhP,EAAA,sDACde,GAAMzD,SAASmX,QAAenZ,IADhB,2CAEf,MANM,CAQV8C,GAjBe,kBAkBVY,GAAYG,WAAW0V,sBAAsB,CAAC3B,MAAMlY,IAAY8Z,MAAK,YACzE,MAAO,CAAC3U,KADyF,EAAtB4U,iBAC7C3W,iBAnBhB,UAsBdA,IAA4B,IAAfA,GACb2F,cAAc3F,IAEfpD,EAzBe,0CA0BNoR,QAAQ4I,OAAO,CAAC7U,UAAK7E,EAAU8C,WAAW,KA1BpC,iCA4BPgO,QAAQM,QAAQ,CAACvM,UAAK7E,EAAU8C,WAAW,KA5BpC,4CAAH,sDAmChB,SAAUyB,GAAV,8EAM2B,OAN3B,EAAwBpD,QAAxB,kBAMiC2D,aAAKwU,IANtC,OAOC,OAPD,SAMQzU,EANR,EAMQA,KAAK/B,EANb,EAMaA,UANb,SAOOiC,aAAIqU,GAAqB,CAACH,eAAepU,EAAK/B,eAPrD,+BAaC,OAbD,oCAaOiC,aAAIqU,GAAqB,EAAD,KAb/B,uDAiBP,SAAUC,KAAV,iEACI,OADJ,SACUrU,aAAI,CAACC,aAAWkU,GAAgB5U,MAD1C,wCAIO,IAAMoV,GAAmB,CAC5B3P,aAAKqP,KCtDHO,GAAwDnZ,YAAY,CACtEC,KAAM,SACNrB,aAPoD,CACpD8Q,OAAQ,GACR7P,OAAQ,UACRC,aAAc,MAKdI,SAAU,CACNkZ,UADM,SACIhZ,EAAOC,GACbD,EAAMsP,OAAS,GACftP,EAAMP,OAASS,IAAWC,SAE9B8Y,gBALM,SAKUjZ,EAAOC,GACnBD,EAAMsP,OAASrP,EAAOK,QAAQgP,QAElC4J,gBARM,SAQUlZ,EAAOC,GAGfA,EAAOO,QACPR,EAAMP,OAASS,IAAWO,MAE1BT,EAAMN,aAAeO,EAAOO,OAGhCR,EAAMP,OAASS,IAAWS,MAG9BE,YAAa,SAAAb,GACTA,EAAMP,OAASS,IAAWY,UAM/B,GAAmEiY,GAAYhY,QAAxEmY,GAAP,GAAOA,gBAAiBD,GAAxB,GAAwBA,gBAAiBD,GAAzC,GAAyCA,U,IAAzC,GAAoDnY,Y,SCpC1CsY,K,YAWAC,I,YAaPC,I,YAIAC,IA5BH,SAAUH,KAAV,8EAEKzD,OAAOb,eAFZ,gBAGK,OAHL,SAGW5Q,aAAKyR,OAAOb,eAAe/E,aAHtC,OAKC,OALD,SAKO5L,aAAIgV,QAAgB/Z,IAL3B,8BAQC,OARD,mCAQO+E,aAAIgV,GAAgB,EAAD,KAR1B,sDAWA,SAAUE,GAAV,iFAAuB9Y,EAAvB,EAAuBA,QAAvB,SAESxB,EAAW8F,GAAMC,WAAW3D,QAA5BpC,OACAwQ,EAAWhP,EAAXgP,QACJoG,OAAOb,eAJZ,gBAKK,OALL,SAKW5Q,aAAKyR,OAAOb,eAAexF,kBAAmB,CAAEC,SAAQxQ,WALnE,OAOC,OAPD,SAOOoF,aAAIgV,QAAgB/Z,IAP3B,+BASC,OATD,oCASO+E,aAAIgV,GAAgB,EAAD,KAT1B,uDAaP,SAAUG,KAAV,iEACI,OADJ,SACUlV,aAAI,CAACC,aAAW4U,GAAWG,MADrC,wCAIA,SAAUG,KAAV,iEACI,OADJ,SACUnV,aAAI,CAACC,aAAW6U,GAAiBG,MAD3C,wCAMO,IAAMG,GAAc,CAEvBpQ,aAAKkQ,IACLlQ,aAAKmQ,K,qBC3BQE,I,YAcAC,I,YA6BPC,I,YAQAC,IAnDH,SAAUH,GAAV,4EAKC,OAL4BlZ,EAA7B,EAA6BA,QAA7B,SAIOY,EAAUZ,EAJjB,SAKO4D,aAAI3D,EAAkB,eAErBW,KAPR,8BAWC,OAXD,mCAWOgD,aAAI3D,EAAkB,EAAD,KAX5B,sDAcA,SAAUkZ,GAAV,+EAA4BnZ,EAA5B,EAA4BA,QAA5B,SAEKY,EAA2B,CAC3BzC,WAAa,GACbC,WAAaC,IAAcC,WAC3BC,WAAa,EACbC,OAAS,GACTC,SAAW,GACXC,UAAY,GACZC,MAAQ,GACRC,OAAS,IAGVoB,IAAWA,EAAQsZ,qBAbvB,gBAcK,OAdL,SAcW3V,aAAI,sBAAC,sBAAAJ,EAAA,sEAAiBgW,KAAgBC,QAAjC,oFAdhB,OAeK5Y,EAAO,2BACAA,GADA,IAEH7B,YAAYC,IAAiBC,UAjBtC,OAoBC,OApBD,SAoBO2E,aAAI3D,EAAkB,eACrBW,KArBR,+BAyBC,OAzBD,oCAyBOgD,aAAI3D,EAAkB,EAAD,KAzB5B,uDA6BP,SAAUmZ,KAAV,iEACI,OADJ,SACUvV,aAAI,CAACC,aAAWrE,EAAqByZ,MAD/C,wCAQA,SAAUG,KAAV,iEACI,OADJ,SACUxV,aAAI,CAACC,aAAWxD,EAAoB6Y,MAD9C,wCAIO,IAAMM,GAAc,CACvB5Q,aAAKuQ,IACLvQ,aAAKwQ,K,YCvBCK,IAAV,SAAUA,KAAV,iEACI,OADJ,SACU7V,aAAI,GAAD,mBAGFkH,IAHE,YAIFkM,IAJE,YAKFY,IALE,YAMFxB,IANE,YAOFpN,IAPE,YAQFqD,IARE,YASFkM,IATE,YAUFS,IAVE,YAWFQ,MAZX,wCAiBeC,UC1DR,SAASC,KAKZ,IAAM1O,EAA0BtK,aAAY,SAACjB,GAAD,OAAgBA,EAAMuL,aAC5DpK,EAAWC,cACjB,OAAO,2BACAmK,GADP,IAEI1K,YAAaS,IAAMC,aAAY,kBAAMJ,EAASN,QAAY1B,MAAa,CAACgC,IACxE+Y,cAAe5Y,IAAMC,aAAY,SAAC8K,GAAD,OAAqClL,EAASsK,GAAW,CAACY,kBAAe,CAAClL,IAC3GgZ,aAAc7Y,IAAMC,aAAY,SAAC6K,GAAD,OAA6BjL,EAASqK,GAAU,CAACY,iBAAc,CAACjL,MCXjG,SAASiZ,KAIZ,IAAMlV,EAAsBjE,aAAY,SAACjB,GAAD,OAAgBA,EAAMkF,UACxD/D,EAAWC,cACjB,OAAO,2BACA8D,GADP,IAEIrE,YAAYS,IAAMC,aAAY,kBAAIJ,EAASN,OAAY1B,MAAY,CAACgC,IACpEmM,aAAahM,IAAMC,aAAY,SAAC2D,GAAD,OAA8C/D,EAASmM,GAAapI,MAAS,CAAC/D,MCH9G,ICZKkZ,GAKAC,GAKAC,GAMAC,GAOAC,GDXCC,GARA,SAASC,KASTC,GAHE,SAASD,K,+BCVZN,K,YAAAA,E,eAAAA,Q,cAKAC,K,WAAAA,E,YAAAA,Q,cAKAC,O,mBAAAA,I,iBAAAA,I,sBAAAA,Q,cAMAC,O,qBAAAA,I,qBAAAA,I,oBAAAA,Q,cAOAC,O,qBAAAA,I,+BAAAA,I,6BAAAA,I,uCAAAA,I,yCAAAA,I,iCAAAA,I,kCAAAA,Q,KAeL,IAAMI,GAAe,IAMfC,GAAa,ICnCnB,SAASC,KAOZ,IAAMvD,EAAmCvW,aAAY,SAACjB,GAAD,OAAgBA,EAAMwX,gBACrErW,EAAWC,cAEjB,OAAO,2BACAoW,GADP,IAEIwD,YAAa1Z,IAAMC,aAAY,WAC3BJ,EAAS0M,QAAM1O,MAChB,CAACgC,IACJN,YAAaS,IAAMC,aAAY,kBAAMJ,EAASN,QAAY1B,MAAa,CAACgC,IACxEuW,mBAAoBpW,IAAMC,aAAY,kBAAMJ,EAASuW,QAAmBvY,MAAa,CAACgC,IACtFwW,oBAAqBrW,IAAMC,aAAY,SAACqN,GAAD,OAA0DzN,EAASwW,GAAoB/I,MAAW,CAACzN,IAC1I8Z,2BAA4B3Z,IAAMC,YAAN,sBAAkB,sBAAAsC,EAAA,sDAC1C6W,GAAM,sCAAuC,IAAIjS,MAAOyS,WACxDC,KAAE5F,OAAM,WAGJ,OAFApU,EAASuW,QAAmBvY,IAC5Bub,GAAM,8CAA+C,IAAIjS,MAAOyS,WACzDjL,QAAQM,YDUC,MCfsB,2CAO3C,CAACpP,MC3BL,SAASia,KAMZ,IAAM9L,EAA4CrO,aAAY,SAACjB,GAAD,OAAgBA,EAAMsP,UAC9EnO,EAAWC,cAajB,OAAO,2BACAkO,GADP,IAEIzO,YAAaS,IAAMC,aAAY,kBAAMJ,EAASN,OAAY1B,MAAa,CAACgC,IACxE8X,gBAAiB3X,IAAMC,aAAY,SAAC+N,GAAD,OAAuBnO,EAAS8X,GAAgB,CAAC3J,cAAW,CAACnO,IAChG6X,UAAW1X,IAAMC,aAAY,kBAAMJ,EAAS6X,QAAU7Z,MAAa,CAACgC,MC1BrE,SAASka,KAIZ,IAAMjD,EAAmCnX,aAAY,SAACjB,GAAD,OAAgBA,EAAMoY,kBACrEjX,EAAWC,cACjB,OAAO,2BACAgX,GADP,IAEIvX,YAAYS,IAAMC,aAAY,kBAAIJ,EAASN,QAAY1B,MAAY,CAACgC,IACpEmX,eAAgBhX,IAAMC,aAAY,kBAAIJ,EAASmX,QAAenZ,MAAY,CAACgC,MCVnF,IAIMma,GAAyC1b,YAA2E,CACtHC,KAAM,eACNrB,aAN+B,CAC/B+c,WAAW,GAMXzb,SAAU,CACN0b,QADM,SACExb,EAAqBC,GACzBD,EAAMub,WAAY,MAMfC,GAAYF,GAAkBva,QAA9Bya,QCfTC,GAAmD7b,YAA2F,CAChJC,KAAM,iBACNrB,aAAc,GACdsB,SAAU,CACN4b,SADM,SACG1b,EAA4BC,GACjCD,EAAMsM,OAAS,GAEnBqP,aAJM,SAIO3b,EAA4BC,GACrC,IAAM2b,EAAO3b,EAAOK,QACpB,GAAIsb,GAAQ5b,EAAM6b,SAASD,GAAO,CAC9B,IAAME,EAAQ9b,EAAM+b,WAAU,SAAAC,GAAK,OAAIA,IAAUJ,KACjD5b,EAAMic,OAAOH,EAAO,KAG5BI,UAXM,SAWIlc,EAA4BC,GAClC,IAAM2b,EAAO3b,EAAOK,QAChBsb,IAAgE,IAAxD5b,EAAM+b,WAAU,SAACC,GAAD,OAAmBA,IAAUJ,MACrD5b,EAAMmc,KAAKP,IAGnBQ,WAjBM,SAiBKpc,EAA4BC,GACnC,IAAMwK,EAAQxK,EAAOK,QACjBmK,EAAM6B,QACN7B,EAAMxC,SAAQ,SAAA2T,GACNA,IAAgE,IAAxD5b,EAAM+b,WAAU,SAACC,GAAD,OAAmBA,IAAUJ,MACrD5b,EAAMmc,KAAKP,UAS5B,GAAwDH,GAAoB1a,QAArE2a,GAAP,GAAOA,SAAUC,GAAjB,GAAiBA,aAAcO,GAA/B,GAA+BA,UAAWE,GAA1C,GAA0CA,WClC3C5d,GAAgC,CAClC6d,cAAe,GACfC,eAAgB,IAGdC,GAA+C3c,YAAoF,CACrIC,KAAM,kBACNrB,gBACAsB,SAAU,CACN4b,SADM,SACG1b,EAAwBC,GACrBzB,IAEZge,iBAJM,SAIWxc,GACbA,EAAMqc,cAAgB,IAE1BI,kBAPM,SAOYzc,GACdA,EAAMsc,eAAiB,IAE3BI,kBAVM,SAUY1c,EAAwBC,GACtC,IAAM0c,EAAS1c,EAAOK,QACtBN,EAAMqc,cAAcM,EAAOC,MAAQD,GAEvCE,mBAdM,SAca7c,EAAwBC,GACvC,IAAM0c,EAAS1c,EAAOK,QACtBN,EAAMsc,eAAeK,EAAOC,MAAQD,MAMzC,GAA+FJ,GAAqBxb,QC7B7G+b,ID6BP,GAAOpB,SAAP,GAAiBc,iBAAjB,GAAmCE,kBAAnC,GAAsDD,kBAAtD,GAAyEI,mBC7B9CxT,YAAgB,CAG9C0T,eAAgBtB,GAAoBnS,QACpC0T,gBAAiBT,GAAqBjT,QACtC2T,aAAc3B,GAAkBhS,WCqB9B4T,GAAiBC,cAEjBC,GAAkB,IAExB1C,GAAM,4BAA6B0C,IAGnC,IAAMC,GAAmB,CACrBnV,IAAK,UACLoV,QAASC,IACTC,QAASJ,IAGPK,GAAuB,CACzBvV,IAAK,WACLoV,QAASA,IACTI,gBAAiBC,KAGfC,GAA0B,CAC5B1V,IAAK,aACLoV,QAASA,IACTI,gBAAiBC,KAEfE,GAA0BC,YAAeT,GAAkB1d,EAAa2J,SAExEyU,GAA0BD,YAA8BL,GAAsBO,KAAc1U,SAE5F2U,GAA6BH,YAI/BF,GAAyBd,IAEvBxT,GAAUD,YAAgB,CAC5BnI,QAAS2c,GACTvO,OAAQyJ,GAAYzP,QACpB4U,SAAUH,GACV7Y,OAAQmI,GAAY/D,QACpB6U,OAAQC,KAAY9U,QACpB8O,eAAgBC,GAAoB/O,QACpC/G,IAAK6G,GACLtE,SAAU6E,GAAcL,QACxBkO,aAAcC,GAAkBnO,QAChCoE,aAAcC,GAAkBrE,QAChCiC,UAAWD,GAAehC,QAC1B+U,WAAYJ,KAMVrZ,GAAQ0Z,YAAe,CACzBhV,WAEAiV,WAAW,GAAD,mBAAMC,YAAqB,CACjCC,OAAO,EACPC,mBAAmB,KAFb,CAGNxB,KAEJyB,UAAUjI,EACVkI,UAAW,CAACC,gBAEhBja,GAAMzD,SAASW,KAEf8C,GAAMzD,SAAS2d,aAAYla,GAAMC,WAAWqZ,SAASa,WAErDna,GAAMzD,SAAS6d,aAAYC,MAG3B/B,GAAegC,IAAIlF,GAAQpV,GAAMzD,UAS1B,IC9GKge,GAcAC,GASAC,GD0FCC,GAAYC,YAAa3a,IAIvBA,MEjHFe,GAAgB,SAACiF,EAAc4U,GAAiG,IAAlE1a,EAAiE,uDAAvDF,GAAMC,WAAWC,SAASA,SACtGO,EAAUmB,GAAyBoE,EAAO4U,EAAO1a,GACvD,OAAOO,EAAQA,EAAO4B,gBAAW9H,GAGvBqH,GAA2B,SAACoE,EAAc4U,GAAoG,IAArE1a,EAAoE,uDAA1DF,GAAMC,WAAWC,SAASA,SACtH,GAAGA,GAAYA,EAAS8F,IAA6B,qBAAX4U,EACtC,IACI,OAAO5Y,aAAM4Y,GAAQnL,IAAI,KAAOvP,EAAS8F,GAAQ6U,UACpD,MAAOjf,GACJ,MAAMA,ICXLkf,GAAc,SAAC,GAUe,IATR9D,EASO,EATPA,KACA+D,EAQO,EARPA,aAGA7X,GAKO,EAPP8X,QAOO,EANP9a,SAMO,EALPgD,SACA+X,EAIO,EAJPA,UACA7d,EAGO,EAHPA,OACA8d,EAEO,EAFPA,WACAC,EACO,EADPA,gBAM/B,GAJAJ,EAAaK,YAAclY,EACvBgY,IACAH,EAAaM,KAAOtX,OAAOmX,EAAWxP,QAEtC4P,MAAMP,EAAaM,OAASF,EAAiB,CAC7C,IAAMI,EAAU3Z,GAAyBoV,EAAKwE,UAAUrV,WAAYgV,EAAgBzX,OAAQ,GAAInC,QAC1Fka,EAAW7Z,GAAyBoV,EAAK0E,UAAUvV,WAAYgV,EAAgBzX,OAAQ,GAAInC,QACjGwZ,EAAaM,KAAOI,GAAYF,GAAW5a,WAAW8a,EAAShM,IAAI8L,GAASI,QAAQ,EAAG,IAE3F,GAAI3E,EAAKwE,UAAW,CAAC,IAAD,IAEhBT,EAAaa,QAAU,CACnBnJ,OAAQuE,EAAKwE,UAAUrV,WACvB6D,QAASiR,EAAS,UAAGA,EAAWjE,EAAKwE,UAAUrV,mBAA7B,aAAG,EAAwCoE,MAAQ,GAEzEwQ,EAAac,QAAU,CACnBpJ,OAAQuE,EAAK0E,UAAUvV,WACvB6D,QAASiR,EAAS,UAAGA,EAAWjE,EAAK0E,UAAUvV,mBAA7B,aAAG,EAAwCoE,MAAQ,GAGzE,IAAMjH,EAAG,UAAM0T,EAAKwE,UAAUrV,WAArB,YAAmC6Q,EAAK0E,UAAUvV,YACvD2V,EAAa,EAAGC,EAAa,EACjC,GAAId,EAAW,CAAC,IAAD,EACLjR,EAAUiR,EAAS,UAAGA,EAAW,MAAQ3X,UAAtB,aAAG,EAA0BiH,MAAQ,EAC9D,EAA2DnN,EAAQ,OAASkG,GAArExC,EAAP,EAAOA,aAAcG,EAArB,EAAqBA,OAAQE,EAA7B,EAA6BA,OACzBF,GAAUH,GAAgBK,IAC1B2a,EAAa7a,EAASH,EAAekJ,EACrC+R,EAAa5a,EAASL,EAAekJ,GAEzC+Q,EAAaiB,OAAShS,EAE1B+Q,EAAakB,QAAU,CACnBxJ,OAAQuE,EAAKwE,UAAUrV,WACvB6D,QAAS8R,GAEbf,EAAamB,QAAU,CACnBzJ,OAAQuE,EAAK0E,UAAUvV,WACvB6D,QAAS+R,GAMjB,OAAOhB,GClDJ,SAAeoB,KAAtB,gC,8CAAO,oCAAAld,EAAA,yDACG3C,EAAU0D,GAAMC,WAAW3D,QAC1BiM,EAAgBvI,GAAMC,WAAWK,OAAjCiI,aACP6T,GAAgBC,YACZ9T,IAAgBtK,GAAYC,cAA6B3D,IAAlB+B,EAAQhC,MAJhD,0CAM4BgiB,aACnBrH,KAAgBsH,SAChBjgB,EAAQzC,WACR0O,EAAaiU,gBACblgB,EAAQhC,MAAQ,EAChBgC,EAAQ7B,aAXjB,cAMWN,EANX,iBAa6B8D,GAAYC,QAAQue,cAAc,CACtDxiB,UAAWqC,EAAQrC,WACpBE,EAASuiB,IAfjB,iBAaYxiB,EAbZ,EAaYA,OAGP4b,GAAM,+CAA+C5b,GAErDkiB,GAAgBO,kBAAkBrgB,EAAQrC,UAAUC,EAAQC,GAlBjE,kDAoBKiiB,GAAgBQ,kBApBrB,2D,gCHPKrC,K,4BAAAA,E,0BAAAA,E,sBAAAA,E,sCAAAA,E,sCAAAA,E,oCAAAA,E,gCAAAA,E,0BAAAA,E,sBAAAA,E,0BAAAA,E,0CAAAA,E,mCAAAA,Q,cAcAC,K,+BAAAA,Q,cASAC,K,kBAAAA,E,qBAAAA,Q,eITNnR,GAAU,IAAIC,KAEP6S,GAAkB,CAE3BC,SAAS,WAAD,4BAAE,sBAAApd,EAAA,sDAGNqK,GAAQI,KAAK,CACT7O,OAAQ0f,GAASsC,YACjBzd,UAAM7E,IALJ,2CAAF,kDAAC,GAwBTqiB,gBAAiB,WACbtT,GAAQI,KAAK,CACT7O,OAAQ0f,GAASuC,UACjB1d,UAAM7E,KAIdwiB,4BAA6B,SAACjjB,GAAuD,IAA5BG,EAA2B,wDAAN,EAU1E,GATA+F,GAAMzD,SAASpB,EAAoB,CAC/BlB,YACAH,aACAI,OAAQ,GACRC,SAAU,GACVC,UAAW,GACXE,WAAOC,KAGPT,IAAeC,IAAcijB,cAC7B1T,GAAQI,KAAK,CACT7O,OAAQ0f,GAAS0C,aACjB7d,UAAM7E,QAEP,CACH,IAAQV,EAAemG,GAAMC,WAAW3D,QAAhCzC,WACRuiB,GAAgBc,iBAAiBrjB,KAMzCsjB,gBAAgB,WAAD,4BAAE,WAAOC,GAAP,eAAAne,EAAA,6DACPoe,EAAaD,EAAU,CACzBtjB,WAAYC,IAAcujB,OAC1BrjB,UAAWmjB,EAAQnjB,UACnBK,MAAO8iB,EAAQ9iB,MACfD,MAAO+iB,EAAQG,MACf,CACAzjB,WAAYC,IAAcujB,OAC1BpjB,OAAQ,GACRC,SAAU,GACVC,UAAW,GACXE,WAAOC,GAEXyF,GAAMzD,SAASpB,EAAoBkiB,IACnCrd,GAAMzD,SAASihB,QAAkBjjB,IAdpB,SAePkjB,aAAM,KAfC,OAgBbnU,GAAQI,KAAK,CACT7O,OAAQ0f,GAASmD,YACjBte,UAAM7E,IAlBG,2CAAF,mDAAC,GAqBhBojB,yBAA0B,aAE1BhB,kBAAmB,SAAC1iB,EAAoBC,EAAiBC,GACrD,IAAMkjB,EAAapjB,GAAaC,GAAUC,EAAW,CACjDF,YACAC,SACAC,WACAC,UAAW,CACPwjB,EAAGC,KAAUA,KAAU1jB,EAAS2F,QAAQge,aACxCC,EAAGF,KAAUA,KAAU1jB,EAAS2F,QAAQke,cAE5ClkB,WAAYC,IAAckkB,WAC1B,CAAEnkB,WAAYC,IAAckkB,WAChCje,GAAMzD,SAASpB,EAAoBkiB,IACnC/T,GAAQI,KAAK,CACT7O,OAAQ0f,GAAS2D,gBACjB9e,UAAM7E,KAGd4jB,cAAe,WACXne,GAAMzD,SAASpB,EAAoB,CAAErB,WAAYC,IAAcqkB,cAC/D9U,GAAQI,KAAK,CACT7O,OAAQ0f,GAAS8D,UACjBjf,UAAM7E,KAGd+jB,sBAAsB,WAAD,4BAAE,WAAOlB,GAAP,SAAAne,EAAA,sDACnB6W,GAAM,iCAAkCsH,GACxCpd,GAAMzD,SAASpB,EAAoB,CAAErB,WAAYC,IAAcwkB,cAC/DjV,GAAQI,KAAK,CACT7O,OAAQ0f,GAASiE,YACjBpf,KAAMge,IALS,2CAAF,mDAAC,GAStBqB,aAAa,WAAD,4BAAE,gCAAAxf,EAAA,0DACNe,GADM,oBAEA1D,EAAU0D,GAAMC,WAAW3D,SAC7B2B,GAAYE,YAHV,iCAIyBF,GAAYE,YAAYugB,WAAW,CAC1DvM,MAAO7V,EAAQzC,aALjB,wBAQcU,KAJR6iB,EAJN,EAIMA,SAJN,iBASEhB,GAAgB+B,gBATlB,4BAWM7hB,EAAQrC,UAXd,iBAYWqC,EAAQlC,UAAUwjB,GAAMthB,EAAQlC,UAAU2jB,GAI3CjI,GAAM,8BACNqG,OAJArG,GAAM,+BACNsG,GAAgBkC,sBAAsBlB,IAdhD,8BAoBMtH,GAAM,sBAAuBsH,GACvBuB,MAAM,sBAAwBvB,GArB1C,4CAAF,kDAAC,GA6BbF,iBAAiB,WAAD,4BAAE,WAAO0B,GAAP,iBAAA3f,EAAA,yD,UAEd6W,GAAM,2DAA4D8I,GAClE5e,GAAMzD,SAASpB,EAAoB,CAAEtB,WAAY+kB,EAAY9kB,WAAYC,IAAcC,cACvFsP,GAAQI,KAAK,CACT7O,OAAQ0f,GAASsE,oBACjBzf,UAAM7E,KAEN0D,GAAYE,YARF,iCASiBF,GAAYE,YAAYugB,WAAW,CAC1DvM,MAAOyM,IAVD,mBASFxB,EATE,EASFA,QAGRtH,GAAM,uCAAwCsH,QAG9B7iB,IAAZ6iB,EAfM,iBAgBNhB,GAAgB+B,gBAhBV,4BAkBFf,EAAQnjB,UAlBN,iBAmBGmjB,EAAQhjB,UAAUwjB,GAAMR,EAAQhjB,UAAU2jB,EAI3C3B,GAAgBe,gBAAgBC,IAHhCtH,GAAM,+BACNsG,GAAgBkC,sBAAsBlB,IArBxC,8BA0BFtH,GAAM,sBAAuBsH,GACvBuB,MAAM,sBAAwBvB,GA3BlC,4CAAF,mDAAC,GAgDjB0B,SAAU,kBAAMxV,GAAQK,iBCtMfoV,GAAwB,SAACC,EAAwE/R,GAC1G,IAEIC,EAAI+R,EAEsB,EAJtBnlB,EAAekG,GAAMC,WAAW3D,QAAhCxC,WADmH,EAI9GklB,EAAWllB,GAAcklB,EAAWllB,GAAc,GAJ4D,oBAK3H,GADCoT,EAJ0H,KAItH+R,EAJsH,KAKzG,oBAAP/R,EAEP,OADA+R,EAAI,gCAAQA,SAAR,QAAgB,IAAhB,mBAAyBhS,QAAzB,IAAyBA,IAAQ,KAC9BC,EAAGgS,M,UAAYD,IAKjBE,IAAQ,qBAChBC,KAAOplB,WAAa,CACjB,WACI,MAAM,wBAHG,eAMhBolB,KAAOpC,cAAgB,CACpB,WACI,MAAM,uBARG,eAWhBoC,KAAOhB,WAAa,CACjB,WACI,MAAM,2BAbG,eAgBhBgB,KAAOC,QAAU,CACd,WACI,MAAM,2BAlBG,eAqBhBD,KAAOE,WAAa,CACjB,WACI,MAAM,wBAvBG,eA0BhBF,KAAOnB,UAAY,CAChB,eA3Ba,eA+BhBmB,KAAO9B,OAAS,CACb,WACI,MAAM,uBAjCG,IAuCRiC,IAAuE,qBAC/EH,KAAOpC,cAAgB,CACpB,WAEIlH,GAAM,yBAJkE,eAO/EsJ,KAAOplB,WAAa,CACjB,WACI8b,GAAM,eACN9V,GAAMzD,SAASf,EAAgB,CAAEC,cAAc,KAC/CuE,GAAMzD,SAASijB,aAAe,CAAEC,QAAQ,EAAMC,KAAMC,KAAkBC,eAXE,eAc7ER,KAAOhB,WAAa,CACnB,WACItI,GAAM,4BACN9V,GAAMzD,SAASf,EAAgB,CAAEC,cAAc,KAC/C2gB,GAAgBqC,kBAlBwD,eAqB7EW,KAAOb,WAAa,CACnB,WACIzI,GAAM,4BACN9V,GAAMzD,SAASf,EAAgB,CAAEC,cAAc,KAC/C2gB,GAAgBqC,kBAzBwD,eA4B9EW,KAAOE,WAAa,CAClB,WACIxJ,GAAM,4BACN9V,GAAMzD,SAASf,EAAgB,CAAEC,cAAc,KAC/C2gB,GAAgBqC,kBAhCwD,eAmC7EW,KAAO9B,OAAS,CACf,WACItd,GAAMzD,SAASf,EAAgB,CAAEC,cAAc,KAC/CuE,GAAMzD,SAASsjB,aAAe,CAAEJ,QAAQ,EAAMC,KAAMI,IAAYC,iBAtCQ,ICpDtEC,GAAa,SAACC,QACe1lB,WAA7B0lB,EAAUC,gBACjBlgB,GAAMzD,SAAS4jB,aAAYF,EAAUC,kBCNrC,SAASE,GAAUhhB,GACtB,IAAKA,KAAUA,aAAgBihB,SAA2B,mBAARjhB,EAC9C,OAAOA,QAAQ7E,EAEnB,IACIkG,EAAS,IAAI6f,EADClhB,EAAKkhB,aAEvB,IAAK,IAAIhd,KAAOlE,EACRA,EAAKmhB,eAAejd,KACpB7C,EAAO6C,GAAO8c,GAAUhhB,EAAKkE,KAGrC,OAAO7C,EAGJ,SAAe+f,GAAtB,mC,8CAAO,WAA+BC,GAA/B,eAAAxhB,EAAA,yDAEAyhB,SAASC,cACJC,EAAUF,SAASG,cAAc,YACrCH,SAASI,KAAKC,YAAYH,GAC1BA,EAASI,MAAMP,EACfG,EAASK,SACTP,SAASC,YAAY,QACrBD,SAASI,KAAKI,YAAYN,KAG1BO,UAAUC,UAXX,gCAYOD,UAAUC,UAAUC,UAAUZ,GAZrC,WAeF3P,OAAewQ,cAfb,uBAgBExQ,OAAewQ,cAAcC,QAAQ,OAAQd,GAE9ChT,QAAQO,IAAI,iBAAkByS,GAlB/B,mBAmBQ,GAnBR,iCAqBC,GArBD,4C,+CCZDe,GAAe,SAACxb,GAClB,IAAM9F,EAAWF,GAAMC,WAAWC,SAASA,SAE3C,GAAKA,GAAaA,EAAS8F,GAI3B,OAAO9F,EAAS8F,IA8Bb,SAASyb,GAAyBC,EAAgB1b,GAErD,IAAM2b,EAAYH,GAAaxb,GAE/B,GAAK2b,EAIL,YAAepnB,IAAXmnB,GAAmC,OAAXA,GAAqC,KAAlBA,EAAOE,OAC3C,EAEJ/D,KAAU6D,GAAQjS,IAAI,KAAOkS,EAAU9G,UAAUc,QAAQgG,EAAUE,UAAW,GC9BlF,IAAMC,GAAuB,WAKjCC,GAC4B,IAL7BlkB,EAK4B,EAL5BA,eAAgBmP,EAKY,EALZA,KAAMgV,EAKM,EALNA,sBAMpB,EAAqChiB,GAAMC,WAAWC,SAA/CgD,EAAP,EAAOA,QAAShD,EAAhB,EAAgBA,SAAUH,EAA1B,EAA0BA,QACtBkiB,EAA+C,GA+CnD,OA9CIpkB,GAAkBA,EAAgBmP,IAIlCgV,EAAsB3e,SAAQ,SAACxI,GAEvBgD,EAAgBmP,GAAQnS,IAExBgD,EAAgBmP,GAAQnS,GAAS0X,QAAO,SAACC,EAAgC0P,GAErE,GAAIhf,GAAWgf,EAAoBC,WAAY,IAAOpiB,GAAWG,EAAU,CAAC,IAAD,EAEjE8F,EAASjG,EAASmiB,EAAoBC,WAAY,GAAI7gB,SACtD8gB,EAAeX,GAAyBS,EAAoBC,WAAY,GAAI5gB,OAAQyE,GAEpFzC,EAAO,CAET/B,YAAa0B,EAAS8C,GACtBoc,aAAcre,OAAOqe,GACrBC,UAAWxnB,IAAWynB,KAAsBC,YAAcR,GAAYA,EAAUG,EAAoB1e,QAChGzC,GAAciF,EAAD,UAAS+b,EAAUG,EAAoB1e,eAAvC,aAAS,EAAwCgf,eAAgB,GAAIjhB,QAAU,EAChGkhB,SAAU,CACNC,KAAM,IAAI7e,KAAJ,OAASqe,QAAT,IAASA,OAAT,EAASA,EAAqBS,WACpCC,GAAI,IAAI/e,KAAJ,OAASqe,QAAT,IAASA,OAAT,EAASA,EAAqBW,UAEtCC,OAAQR,KAAsBS,YAAcloB,GAE5C2X,EAAM0P,EAAoB1e,QAE1BgP,EAAM0P,EAAoB1e,QAAS+T,KAAKhU,GAGxCiP,EAAM0P,EAAoB1e,QAAW,CAACD,GAM9C,OAAOiP,IACRyP,MAKKe,GAAWf,IAM7Be,GAAa,SAClBf,EAA0DF,GACvD,IAAO7e,EAAWlD,GAAMC,WAAWC,SAA5BgD,QACA9F,EAAU4C,GAAMC,WAAWtC,IAAIP,OAA/BA,OACP,IACI,OAAI6kB,GAAsB/e,EAEfC,QAAQC,QAAQ6e,GAAoB1P,QAAO,SAACC,EAA8BlP,GAC7E,IAAM2f,EAAW7lB,EAAQkG,GACzB,GAAI2f,GAAYA,EAAS7iB,OAAS8C,GAAW+e,EAAoB3e,GAAO,CAGpE,IAAM4f,EAAYjB,EAAoB3e,GAAMc,KAAI,SAACb,GAC7C,OAAO,2BACA6c,GAAU6C,IADjB,IAGIzH,UAAWtY,EAAS+f,EAAS7iB,OAE7Bsb,UAAWxY,EAAS+f,EAAS5iB,OAC7B8iB,SAAU5f,OAGlBiP,EAAI,sBAAOA,GAAP,YAAgB0Q,IAExB,OAAO1Q,IACR,IAEI,GAEb,MAAO5W,GAEL,OADA6R,QAAQO,IAAIpS,GACL,KA+CTwnB,GAAmB,YASgB,IACjC5hB,EAAaE,EAAcC,EAAMG,EAAMC,EAAWK,EAASihB,EAAQC,EAASC,EAAcC,EAiB1FC,EAAUC,EAAUC,EAAeC,EA1BVxjB,EAQO,EARPA,MACAC,EAOO,EAPPA,MACAwjB,EAMO,EANPA,cACA9jB,EAKO,EALPA,QACAS,EAIO,EAJPA,WACAD,EAGO,EAHPA,MACA0a,EAEO,EAFPA,UACA6I,EACO,EADPA,aAoB7B,GAjBID,IACAriB,EAAcqiB,EAAcrB,eAAgB,GAAMziB,EAAS8jB,EAAcrB,eAAgB,GAAIlhB,cAAsB/G,EACnHmH,EAAemiB,EAAcrB,eAAgB,GAAMziB,EAAS8jB,EAAcrB,eAAgB,GAAIlhB,cAAsB/G,EACpHoH,EAAOkiB,EAAgBjiB,GAAyBxB,EAAOyjB,EAAcE,WAAY,IAAO/hB,aAAM,GAC9FF,EAAO+hB,EAAgBjiB,GAAyBvB,EAAOwjB,EAAcE,WAAY,IAAO/hB,aAAM,GAC9FL,EAAOA,GAAcK,aAAM,GAC3BF,EAAOA,GAAcE,aAAM,GAE3BI,GADAL,EAAYJ,EAAKM,MAAMzB,EAAYJ,GAAQI,EAAYJ,GAAQ8B,MAAM,GAAGC,KAAKL,EAAKG,MAAMzB,EAAYH,GAAQG,EAAYH,GAAQ6B,MAAM,KAClHD,MAAM1B,GAC1B8iB,EAAS7hB,EAAcI,GAAyBJ,EAAaqiB,EAAcrB,eAAgB,GAAIjhB,QAAuBS,aAAM,GAC5HshB,EAAU5hB,EAAeE,GAAyBF,EAAcmiB,EAAcrB,eAAgB,GAAIjhB,QAAuBS,aAAM,GAC/HqhB,EAASA,GAAkBrhB,aAAM,GACjCshB,EAAUA,GAAoBthB,aAAM,GAEpCwhB,GADAD,EAAeF,EAAOphB,MAAMT,EAAchB,EAAYgB,GAAcU,MAAQ,GAAGC,KAAKmhB,EAAQrhB,MAAMP,EAAelB,EAAYkB,GAAeQ,MAAQ,KAC1HD,MAAM1B,IAGhC0a,GAAaA,EAAW,MAAQ7a,EAAQ,IAAMC,IAAWyjB,EAAc,CAEvE,IAAME,EAAQ,IAAIC,KAAUhJ,EAAW,MAAQ7a,EAAQ,IAAMC,GAAQkK,OAAOkF,IAAIqU,EAAa3I,gBAAgBpL,GAAGxO,QAChHkiB,EAAWO,EAAM/hB,MAAML,GAAyBxB,EAAO0jB,EAAa3I,gBAAgBzX,OAAQ,GAAInC,SAAW,GAC3GmiB,EAAWM,EAAM/hB,MAAML,GAAyBvB,EAAOyjB,EAAa3I,gBAAgBzX,OAAQ,GAAInC,SAAW,GAG3GqiB,GADAD,EAAgBF,EAASxhB,MAAMzB,EAAYJ,GAAQ8B,OAAOC,KAAKuhB,EAASzhB,MAAMzB,EAAYH,GAAQ6B,SACtED,MAAM1B,GAGtC,MAAO,CACHoB,KAAMA,EAAOA,EAAKU,gBAAa9H,EAC/BuH,KAAMA,EAAOA,EAAKO,gBAAa9H,EAC/B8oB,OAAQA,EAASA,EAAOhhB,gBAAa9H,EACrCiH,YAAaA,EAAc0B,KAAS1B,QAAgBjH,EACpD+oB,QAASA,EAAUA,EAAQjhB,gBAAa9H,EACxCmH,aAAcA,EAAewB,KAASxB,QAAiBnH,EACvDgpB,aAAcA,EAAeA,EAAalhB,gBAAa9H,EACvDipB,WAAYA,EAAaA,EAAWnhB,gBAAa9H,EACjDwH,UAAWA,EAAYA,EAAUM,gBAAa9H,EAC9C6H,QAASA,EAAUA,EAAQC,gBAAa9H,EACxC2pB,UAAW,CACP1I,UAAWtY,KAAS9C,GACpBsb,UAAWxY,KAAS7C,IAExBojB,SAAUA,EAAWA,EAASphB,gBAAa9H,EAC3CmpB,SAAUA,EAAWA,EAASrhB,gBAAa9H,EAC3CopB,cAAeA,EAAgBA,EAActhB,gBAAa9H,EAC1DqpB,YAAaA,EAAcA,EAAYvhB,gBAAa9H,IAI/C4pB,GAAwB,SAAqC3gB,EAAa4gB,EAA4CpQ,EAA0D8P,GAIzL,MAAqC9jB,GAAMC,WAAWC,SAA/CgD,EAAP,EAAOA,QAASnD,EAAhB,EAAgBA,QAASG,EAAzB,EAAyBA,SACzB,EAA4BF,GAAMC,WAAWK,OAAtCE,EAAP,EAAOA,WAAYD,EAAnB,EAAmBA,MACnB,EAAyBiD,EAAOrD,MAAM,gBAAtC,oBAASC,EAAT,KAAgBC,EAAhB,KAEA,GAAI2T,GAAoBA,EAAkB,OAASxQ,IAC5CsgB,GAAgBA,EAAa3I,gBAAiB,CACjD,IAAM0I,EAA+B7P,EAAkB,OAASxQ,GAEhE,GAAIN,GAAWhD,GAAYH,GAAWQ,GAASC,EAM3C,OALS4iB,GAAiB,CACtBhjB,QAAOC,QAAOwjB,gBACd9jB,UAASS,aAAYD,QAAO0a,UAAWmJ,EAAYN,iBAM/D,MAAO,CACHniB,UAAMpH,EACNuH,UAAMvH,EACNwH,eAAWxH,EACX6H,aAAS7H,EACT8oB,YAAQ9oB,EACRiH,iBAAajH,EACbkpB,cAAUlpB,EACVmpB,cAAUnpB,EACVqpB,iBAAarpB,EACbopB,mBAAeppB,ICvOV8pB,GAA6B,YAKnC,IALyE7gB,EAK1E,EAL0EA,OAAO0gB,EAKjF,EALiFA,UAAUjJ,EAK3F,EAL2FA,UAAUjH,EAKrG,EALqGA,iBAMvG,GAAGiH,GAAaiJ,EACZ,ODoOyB,SAChC1gB,EACA4gB,EACApQ,EACAkQ,GACG,IAIIT,EAAUC,EAAUC,EAAeC,EAJvC,EAAqC5jB,GAAMC,WAAWC,SAA/CgD,EAAP,EAAOA,QAASnD,EAAhB,EAAgBA,QAASG,EAAzB,EAAyBA,SACzB,EAA4BF,GAAMC,WAAWK,OAAtCE,EAAP,EAAOA,WAAYD,EAAnB,EAAmBA,MACnB,EAAyBiD,EAAOrD,MAAM,gBAAtC,oBAASC,EAAT,KAAgBC,EAAhB,KACIikB,EAAS,GAEb,GAAIF,GAAcA,EAAY,MAAQhkB,EAAQ,IAAMC,IAAWE,EAAO,CAElE,IAAMyjB,EAAQ,IAAIC,KAAUG,EAAY,MAAQhkB,EAAQ,IAAMC,GAAQkK,OAAOkF,IAAIyU,EAAUpjB,cAC3F2iB,EAAWO,EAAM/hB,MAAML,GAAyBxB,EAAO8jB,EAAUjjB,OAASijB,EAAUjjB,OAAS,IAAM,GACnGyiB,EAAWM,EAAM/hB,MAAML,GAAyBvB,EAAO6jB,EAAU/iB,OAAS+iB,EAAU/iB,OAAS,IAAM,GAGnGyiB,GADAD,EAAgBF,EAASxhB,MAAMzB,EAAYJ,GAAQI,EAAYJ,GAAQ8B,MAAM,GAAGC,KAAKuhB,EAASzhB,MAAMzB,EAAYH,GAAQG,EAAYH,GAAQ6B,MAAM,KACtHD,MAAM1B,GAClC+jB,EAAS,CAELb,SAAUA,EAASphB,WACnBqhB,SAAUA,EAASrhB,WACnBuhB,YAAaA,EAAYvhB,WACzBshB,cAAeA,EAActhB,YAGrC,GAAI2R,GAAoBA,EAAkB,OAASxQ,IAC5C0gB,GAAa3jB,EAAO,CACvB,IACIiB,EAAaE,EAAcC,EAAMG,EAAMC,EAAWK,EAASihB,EAAQC,EAASC,EAAcC,EADxFK,EAA+B7P,EAAkB,OAASxQ,GAyChE,OAtCIN,GAAWhD,GAAYH,GAAWQ,GAASC,GAAcqjB,IACzDriB,EAAcqiB,EAAcrB,eAAgB,GAAMziB,EAAS8jB,EAAcrB,eAAgB,GAAIlhB,cAAsB/G,EACnHmH,EAAemiB,EAAcrB,eAAgB,GAAMziB,EAAS8jB,EAAcrB,eAAgB,GAAIlhB,cAAsB/G,EACpHoH,EAAOkiB,EAAgBjiB,GAAyBxB,EAAOyjB,EAAcE,WAAY,IAAO/hB,aAAM,GAC9FF,EAAO+hB,EAAgBjiB,GAAyBvB,EAAOwjB,EAAcE,WAAY,IAAO/hB,aAAM,GAC9FL,EAAOA,GAAcK,aAAM,GAC3BF,EAAOA,GAAcE,aAAM,GAE3BI,GADAL,EAAYJ,EAAKM,MAAMzB,EAAYJ,GAAQI,EAAYJ,GAAQ8B,MAAM,GAAGC,KAAKL,EAAKG,MAAMzB,EAAYH,GAAQG,EAAYH,GAAQ6B,MAAM,KAClHD,MAAM1B,GAC1B8iB,EAAS7hB,EAAcI,GAAyBJ,EAAaqiB,EAAcrB,eAAgB,GAAIjhB,QAAuBS,aAAM,GAC5HshB,EAAU5hB,EAAeE,GAAyBF,EAAcmiB,EAAcrB,eAAgB,GAAIjhB,QAAuBS,aAAM,GAC/HqhB,EAASA,GAAkBrhB,aAAM,GACjCshB,EAAUA,GAAoBthB,aAAM,GAEpCwhB,GADAD,EAAeF,EAAOphB,MAAMT,EAAchB,EAAYgB,GAAcU,MAAQ,GAAGC,KAAKmhB,EAAQrhB,MAAMP,EAAelB,EAAYkB,GAAeQ,MAAQ,KAC1HD,MAAM1B,GAChC+jB,EAAM,2BACCA,GADD,IAEF3iB,KAAMA,EAAOA,EAAKU,gBAAa9H,EAC/BuH,KAAMA,EAAOA,EAAKO,gBAAa9H,EAC/B8oB,OAAQA,EAASA,EAAOhhB,gBAAa9H,EAErCiH,YAAaA,EAAc0B,EAAS1B,QAAgBjH,EACpD+oB,QAASA,EAAUA,EAAQjhB,gBAAa9H,EAExCmH,aAAcA,EAAewB,EAASxB,QAAiBnH,EACvDgpB,aAAcA,EAAeA,EAAalhB,gBAAa9H,EACvDipB,WAAYA,EAAaA,EAAWnhB,gBAAa9H,EACjDwH,UAAWA,EAAYA,EAAUM,gBAAa9H,EAC9C6H,QAASA,EAAUA,EAAQC,gBAAa9H,EACxC2pB,UAAW,CAEP1I,UAAWpb,EAAQ8C,EAAS9C,QAAU7F,EAEtCmhB,UAAWrb,EAAQ6C,EAAS7C,QAAU9F,MAK3C+pB,EAEX,MAAO,CACH3iB,UAAMpH,EACNuH,UAAMvH,EACNwH,eAAWxH,EACX6H,aAAS7H,EACT8oB,YAAQ9oB,EACRiH,iBAAajH,EACbkpB,cAAUlpB,EACVmpB,cAAUnpB,EACVqpB,iBAAarpB,EACbopB,mBAAeppB,GCrTRgqB,CAAmB/gB,EAAOyX,EAAWjH,EAAkBkQ,IClBzDM,GAAe,SAACC,GAGzB,MAA4BzkB,GAAMC,WAAWK,OAAtCE,EAAP,EAAOA,WAAYD,EAAnB,EAAmBA,MACbmkB,EAAYpJ,MAAMmJ,EAAK/Y,QAAU4P,MAAMmJ,EAAK1V,OAAW0V,EAAK1V,OAAS0V,EAAK/Y,MAAQiZ,IAASC,KAC7FH,EAAK/Y,MAAQ+Y,EAAK1V,KAAO4V,IAASE,SAAWF,IAASG,SACtDC,EAAmC,CACnCxiB,QAASkiB,EAAK/Y,MAAQ+Y,EAAK1V,MAAQ0V,EAAK1V,KACxCvM,SAAU,MACVwiB,UAAY,EACZC,YAAa,EACbP,WACArB,OAAQ,EACR3X,MAAO4P,MAAMmJ,EAAK/Y,YAASnR,EAAYkqB,EAAK/Y,MAC5CsD,KAAoB,IAAdyV,EAAKzV,UAAazU,EAAYkqB,EAAKzV,KACzCC,IAAkB,IAAbwV,EAAKxV,SAAY1U,EAAYkqB,EAAKxV,KAI3C,GAAIzO,GAAcD,EAAO,CACrB,IAAMgB,EAASkgB,GAAyBgD,EAAKnV,kBAAmBmV,EAAKrV,MAG/D8V,EAAcljB,aAAMyiB,EAAK/Y,OAAOzJ,MAAMzB,EAAYikB,EAAKpV,OAAoB7O,EAAYikB,EAAKpV,OAAkBnN,MAAQ,GACtHijB,EAAYD,EAAYjjB,MAAM1B,GAC9B6kB,EAAS5kB,EAAWikB,EAAKpV,OAAiBnN,MAAU1B,EAAWikB,EAAKpV,OAAiBnN,MAAM,EACjG6iB,EAAW,2BACJA,GADI,IAEPM,aAAcrjB,aAAMyiB,EAAK/Y,MAAQ+Y,EAAK1V,MAAM9M,MAAOmjB,GAAS/iB,WAC5DijB,WAAYtjB,aAAMyiB,EAAK/Y,MAAQ+Y,EAAK1V,MAAM9M,MAAOmjB,GAASnjB,MAAM1B,GAAO8B,WACvEd,OAAQA,EAAOwC,OAAOxC,QAAQhH,EAC9B2qB,YAAYA,EAAY7iB,WACxB8iB,UAAUA,EAAU9iB,aAG5B,OAAO0iB,GAEGzd,GAAiB,YAAgH,IAAhFX,EAA+E,EAA/EA,UAC3D,EAA4B3G,GAAMC,WAAWK,OAAtCE,EAAP,EAAOA,WAAYD,EAAnB,EAAmBA,MACnB,OAAO4C,QAAQC,QAAQuD,GAAW4L,QAAO,SAACC,EAAMlP,GAC5C,IAAMC,EAAmBoD,EAAWrD,GACpC,GAAIC,GAAQA,EAAK6L,MAAQ7O,GAASC,IAAeA,EAAY+C,EAAK6L,OAAU5O,EAAU,MAAa,CAC/F,IAAMe,EAASkgB,GAAyBle,EAAK+L,kBAAmB/L,EAAK6L,MAE/D6V,EAAcjjB,aAAMT,GAAc,GAAGU,MAAMzB,EAAY+C,EAAK6L,MAAS5O,EAAY+C,EAAK6L,MAAOlN,MAAQ1B,EAAU,KAAW0B,OAC1H8iB,EAAS,OAAGC,QAAH,IAAGA,OAAH,EAAGA,EAAahjB,MAAM1B,GAC/BgC,EAASgB,EAAKhB,QAA0B,IAAhBgB,EAAKhB,OAA6B,IAAdgB,EAAKhB,YAAehI,EAEtEiY,EAAMlP,GAAkB,CAEpBd,SAAU,MACVyiB,YAAyC,KAAjB,OAAXA,QAAW,IAAXA,OAAA,EAAAA,EAAa5iB,aAAb,OAA4C4iB,QAA5C,IAA4CA,OAAZ1qB,EAAY0qB,EAAa5iB,WACtE2iB,UAAqC,KAAjB,OAATA,QAAS,IAATA,OAAA,EAAAA,EAAW3iB,aAAX,OAA0C2iB,QAA1C,IAA0CA,OAAZzqB,EAAYyqB,EAAW3iB,WAChEd,OAAQA,EAAOwC,OAAOxC,QAAQhH,EAC9BmqB,SAAUnhB,EAAKmI,MAAQnI,EAAKwL,KAAO,WAAa,WAChDxM,OAAQA,EACRmJ,MAAO4P,MAAM/X,EAAKmI,YAASnR,EAAYgJ,EAAKmI,MAC5CsD,KAAoB,IAAdzL,EAAKyL,UAAazU,EAAYgJ,EAAKyL,KACzCC,IAAkB,IAAb1L,EAAK0L,SAAY1U,EAAYgJ,EAAK0L,IAEvCoU,OAAQ,EACR7hB,YAAa,GACb+jB,cAAehiB,GAGvB,OAAOiP,IACR,KCjEMgT,GAAmB,WAC5B,IAEIvK,EAFGrI,EAAgB5S,GAAMC,WAAW2S,aAAjCA,aACA1S,EAAYF,GAAMC,WAAWC,SAA7BA,SAkBP,OAdI0S,IACAqI,EAAY9X,QAAQC,QAAQwP,GAAcL,QAAO,SAACC,EAAMjP,GACpD,MAA+CqP,EAAcrP,GAAtDoL,EAAP,EAAOA,MAAOD,EAAd,EAAcA,OACR+W,GADN,EAAsBhX,QAAWiX,SAChB7H,KAAUlP,GAAOa,MAAMqO,KAAUnP,IAASiX,YAC3D,OAAO,2BACAnT,GADP,kBACejP,EAAQ,CACfkP,OAAQlP,EACRgH,MAAOsT,KAAY3d,EAAUqD,EAAMkiB,GACnCG,OAAQhT,EAAcrP,QAG/B,KAGA,CAAC0X,cCTC4K,GAAkB,SAACC,EAAcC,GAE1C,IAAIC,EAA+C,GA6CnD,OA3CAD,EAAa1iB,SAAQ,SAACE,GAClB,IACI,MAAsBsa,KAAiBta,EAAKC,QAArC4L,EAAP,EAAOA,KAAMC,EAAb,EAAaA,MACGrP,GAAMC,WAAWK,OAA1BC,MACYP,GAAMC,WAAWqZ,SAA7B2M,SAEP,GADmBjmB,GAAMC,WAAWC,SAA7BA,SACO,CAAC,IAAD,IAGJgmB,EAAS3iB,EAAK4iB,OAAStI,KAASuI,IAAMhX,EAAOC,EAEnD2W,EAAWzO,KAAK,CACZ4O,KAAM5iB,EAAK4iB,OAAStI,KAASwI,KAAOC,IAAWD,KAAOC,IAAWF,IACjEG,OAAQ,CACJ7D,KAAM,CACFpf,IAAK8L,EACL4R,MAAO5R,EAAOrO,GAAcqO,EAAM7L,EAAKhC,aAAUhH,GAErDqoB,GAAI,CACAtf,IAAK+L,EACL2R,MAAO5R,EAAI,UAAGxN,GAAyBwN,EAAM7L,EAAKhC,eAAvC,aAAG,EAA6CU,MAAMsB,EAAKrB,OAAOG,gBAAW9H,IAIhG2H,MAAO,CACHoB,IAAK,GACL0d,MAAOnD,KAAUta,EAAKrB,OAAOG,YAEjCmkB,IAAK,CACDljB,IAAK4iB,GAAU,KACflF,MAAOkF,EAAM,UAAGtkB,GAAyBskB,EAAQ3iB,EAAKijB,YAAzC,aAAG,EAA4CnkB,gBAAa9H,GAE7EksB,KAAM/jB,SAASa,EAAKmjB,UAAUf,eAGxC,MAAO/pB,GAEL6R,QAAQO,IAAIpS,OAMboqB,GAIEW,GAAwB,WAAO,IAAD,EACvC,EAA4B3mB,GAAMC,WAAW3D,QAAtCrC,EAAP,EAAOA,UAAWC,EAAlB,EAAkBA,OAClB,iBAAO+D,GAAYG,kBAAnB,aAAO,EAAwBwoB,kBAAkB,CAAC3sB,aAAYC,GAAQ6Z,MAAK,YACvE,OAD6F,EAApB8S,mBAQpEC,GAAuB,SAAoChB,EAA2BiB,GAE/F,IAAMf,EAA8C,GACpD,EAAqChmB,GAAMC,WAAWC,SAA/CA,EAAP,EAAOA,SAAUgD,EAAjB,EAAiBA,QAASnD,EAA1B,EAA0BA,QAClBQ,EAAUP,GAAMC,WAAWK,OAA3BC,MAoCR,OAlCIwmB,GACAA,EAAkB1jB,SAAQ,SAACE,GACvB,IACI,GAAIL,GAAWhD,GAAYH,KAClB+lB,GAAW5lB,EAAS,MAAM4lB,GAASxkB,UAAYiC,EAAKyjB,QAAQ1lB,SAAW,CAAC,IAAD,IAE5E,EAAyBvB,EAAQwD,EAAKyjB,QAAQ1lB,SAASnB,MAAM,mBAA7D,oBAASC,EAAT,KAAgBC,EAAhB,KAEA2lB,EAAWzO,KAAK,CACRvK,KAAMzJ,EAAK0jB,SAAWpJ,KAAcqJ,KAAOC,IAAaC,IAAMD,IAAaE,OAE3EC,YAAa,IACbC,UAAW,IAAOxjB,OAAOxD,GACzBinB,QAASzmB,GAAcX,EAAD,UAAOmD,EAAKkkB,WAAY,UAAxB,aAAO,EAAsBC,cACnDC,QAAS5mB,GAAcX,EAAD,UAAOmD,EAAKkkB,WAAY,UAAxB,aAAO,EAAsBC,cACnDjB,KAAM1iB,OAAOR,EAAKqkB,WAElBxnB,MAAO8C,EAAS9C,GAEhBC,MAAO6C,EAAS7C,GAChBxF,OAAQ0I,EAAKskB,WAGrB,OAAO7B,EAEd,MAAOpqB,GAEJ6R,QAAQO,IAAIpS,OAOjBoqB,GClHE8B,GAAkB,YAQxB,IAPoGhC,EAOrG,EAPqGA,QACAiC,EAMrG,EANqGA,OACA3qB,EAKrG,EALqGA,OAMvG,OAAO,IAAIiO,SAAQ,SAACM,EAASsI,GAC+B,IAAD,EAApDhW,GAAYG,YAAcH,GAAYE,YACrCkN,QAAQ9L,IAAI,CACRtB,GAAYG,WAAW4pB,mBAAmB,CAACnY,YAAW,UAAEzS,EAAO2qB,UAAT,aAAE,EAAgB7jB,UACxEjG,GAAYE,YAAYgJ,aAAa,CAAC3D,OAAQsiB,MAC7C/R,MAAK,YAAqC,IAAD,oBAAjCkU,EAAiC,KAAjCA,gBAAmB1gB,EAAc,KAAdA,QACxBoE,EAAQ,CACJwP,gBAAiB8M,EACjB1gB,eAKZ0M,EAAO,IAAItM,IAAYC,IAASsgB,a,4BCK7BC,GAtBAC,aAAgB,SAAhBA,EAA0B,YAAwB,IAAtBC,EAAqB,EAArBA,EAAMC,EAAe,kBACtDvX,EAAWwX,cAEjB,ECMqB,WAErB,IAAMC,EAAepsB,IACrB,EAAyDA,IAAlDE,EAAP,EAAOA,QAASU,EAAhB,EAAgBA,cAAuByrB,EAAvC,EAA+B5tB,OACxBglB,EAAkB6I,eAAlB7I,eACD8I,EAAetI,OAAOuI,OAAOxI,GAAUb,IAAxBc,OAAA,IAAAA,CAAA,GACfjB,KAAOnB,UAAa,CAClB,WACIjhB,GAAc,GACd6iB,EAAe,CAACJ,QAAQ,EAAMC,KAAMI,IAAYC,iBAYtD8I,EAAqBnsB,IAAMC,YAAN,sBAAkB,sBAAAsC,EAAA,sDACzC6W,GAAM,6BAAD,OAA8BxZ,EAAQxC,aAC3CilB,GAAsB4J,EAAc,IAFK,2CAG1C,CAACrsB,EAASU,EAAc2rB,IAc3BjsB,IAAMosB,WAAU,WACZC,KAAmBC,IAAoBC,eAAvC,2BACOF,KAAmBC,IAAoBC,gBAD9C,IAEIT,eACAU,YAAaL,OAcrB,IAAMM,EAAezsB,IAAMC,aAAY,WACnCosB,KAAmBC,IAAoBC,eAAvC,2BACOF,KAAmBC,IAAoBC,gBAD9C,IAEIT,mBAEN,CAACO,KAAkBP,IAQrB,OAPA9rB,IAAMosB,WAAU,WACRL,GAAmC,UAAlBA,GACjBU,MAGL,CAACV,IAEG,CACHM,uBACAK,oBACA9sB,WD3EA+sB,GAFAN,EADJ,EACIA,kBACAK,EAFJ,EAEIA,eAGJ,EEd2B,WAI3B,IAAM/Q,EAA6Bhc,aAAY,SAACjB,GAAD,OAAsBA,EAAMqe,WAAWpB,gBAChF9b,EAAWC,cAMjB,MAAO,CACH6b,eACAiR,eANmB5sB,IAAMC,aAAY,WACrCJ,EAASqa,QAAQrc,MAClB,CAACgC,KFKqCgtB,GAAjCD,EAAR,EAAQA,eAAgBjR,EAAxB,EAAwBA,aAExB,OAAQ,uCACJ,eAAC,IAAD,UACI,eAAC,IAAD,2BAAciQ,GAAd,IAAoBc,eAAgBA,EAAgBL,kBAAmBA,EAC7DS,SAAgC,MAAtBzY,EAAS0Y,SAAmBC,KAAa3Y,EAAS0Y,cAE1E,eAACE,EAAA,EAAD,IACA,eAAC,IAAD,CAAYlK,SAAQ,OAACpH,QAAD,IAACA,OAAD,EAACA,EAAc1B,WAC/BiT,QAASvB,EAAE,yBAA0BwB,OAAQxB,EAAE,qBAC/CyB,eAAiB,kBAAMR,a,iEGuN5B,I,4BCjPMS,GAAaC,aAAOC,KAAPD,CAAH,yoBAOJ,qBAAGE,MAAkBC,QACxB,mBAAe,EAAf,EAAGD,MAAsBC,QACtB,mBAAe,EAAf,EAAGD,MAAqBC,QAE1B,mBAA4B,EAA5B,EAAGD,MAAkBC,QAEnB,mBAAe,EAAf,EAAGD,MAAsBC,QAC1B,mBAAe,EAAf,EAAGD,MAAsBC,QACnB,mBAAe,EAAf,EAAGD,MAAsBC,QAK/B,mBAAe,EAAf,EAAGD,MAAsBC,QAe7BC,GAAkBJ,aAAOK,KAAPL,CAAH,8MAIR,qBAAGE,MAAkBC,QAGjB,qBAAED,MAAiBC,QAAU,qBAAED,MAAiBC,QAIrE,gBAAED,EAAF,EAAEA,MAAF,OAAaI,aAAc,CAACC,MAAmB,EAAbL,EAAMC,KAASK,OAAoB,EAAbN,EAAMC,UAErDM,GAAaT,aAAOC,KAAPD,CAAH,kIClCvB,IAyBYU,GAzBNC,GAAY,aAAON,KAAP,sBAAH,wDAES,mBAA0B,EAA1B,EAAEH,MAAiBC,OAF5B,QAMTS,GAAsB,aAAOX,KAAP,sBAAH,uCAGV,mBAA0B,EAA1B,EAAEC,MAAiBC,OAHT,OAMnBU,GAAoB,aAAOZ,KAAP,sBAAH,0E,SAaXS,K,UAAAA,E,sBAAAA,E,mBAAAA,Q,KAMZ,IAgReI,GAhRG1C,aAAgB,SAAhBA,EAA0B,SAACE,GACzC,MAA8C5rB,IAAMquB,SAAgB,IAApE,oBAAOC,EAAP,KAAwBC,EAAxB,KACA,EAA8CvuB,IAAMquB,SAAgB,IAApE,oBAAOG,EAAP,KAAwBC,EAAxB,KACA,EAA0CzuB,IAAMquB,SAAS,OAAzD,oBAAOK,EAAP,KAAsBC,EAAtB,KACA,EAAwC3uB,IAAMquB,SAAkC,IAAhF,oBAAOO,EAAP,KAAqBC,EAArB,KACA,EAAsC7uB,IAAMquB,SAAiB,IAA7D,oBAAOS,EAAP,KAAoBC,EAApB,KACA,EAA8C/uB,IAAMquB,SAAgC,IAApF,oBAAOW,EAAP,KAAwBC,EAAxB,KACA,EAAsCjvB,IAAMquB,SAAS,GAArD,oBAAOa,EAAP,KAAoBC,EAApB,KAEA,ECpD6B,WAO7B,IAAM1T,EAAuC9b,aAAY,SAACjB,GAAD,OAAgBA,EAAMqe,WAAWtB,kBACpF5b,EAAWC,cACjB,MAAO,CACH2b,eAAgBA,EAChBrB,SAAUpa,IAAMC,aAAY,kBAAMJ,EAASua,QAASvc,MAAa,CAACgC,IAClEwa,aAAcra,IAAMC,aAAY,SAACqa,GAAD,OAAUza,EAASwa,GAAaC,MAAQ,CAACza,IACzE+a,UAAW5a,IAAMC,aAAY,SAACqa,GAAD,OAAUza,EAAS+a,GAAUN,MAAQ,CAACza,IACnEib,WAAY9a,IAAMC,aAAY,SAACkJ,GAAD,OAAWtJ,EAASib,GAAW3R,MAAS,CAACtJ,KDsCvBuvB,GAA5C3T,EAAR,EAAQA,eAAgBpB,EAAxB,EAAwBA,aAAcO,EAAtC,EAAsCA,UAC9B+Q,EAAMC,EAAND,EAEF0D,EAAqBrvB,IAAMC,YAAN,sBAAkB,4BAAAsC,EAAA,0DACvChB,GAAYG,WAD2B,gCAEvBH,GAAYG,WAAWc,0BAFA,QAEnC8sB,EAFmC,SAG9BA,EAAIC,iBAAmBD,EAAIC,gBAAgBC,qBAAyBF,EAAIC,gBAAgBC,oBAAoBxkB,QACrHikB,EAAmBK,EAAIC,gBAAgBC,qBAJA,2CAO1C,IAEGC,EAAiBzvB,IAAMC,YAAN,uCAAkB,WAAO6G,GAAP,iBAAAvE,EAAA,0DACnChB,GAAYE,YADuB,gCAEnBF,GAAYE,YAAYiuB,kBAAkB,CAC1D5oB,OAAQA,EACR6oB,SAAUC,mBAAgBC,GAG1BC,MAAO,KAP4B,QAE/BR,EAF+B,SAS1BA,EAAIS,cAAkBT,EAAIS,aAAa/kB,SAS1CtI,EAAO4sB,EAAIS,aAAaroB,KAAI,SAAAsoB,GAAC,MAAK,CACtCC,UAAWD,EAAE7d,UACbI,IAAKyd,EAAEzd,IACPD,KAAM0d,EAAE1d,KACRD,KAAM2d,EAAE3d,KACRrD,MAAOghB,EAAEhhB,MACTnK,OAAQmrB,EAAEnR,QACVqR,KAAMF,EAAEhhB,MAAQghB,EAAE3d,MAAQ,EAAI,MAEhCkc,GAAmB,SAAAzY,GAAI,4BAAQA,GAAR,CAAc,CACnChP,OAAQA,EACRpE,KAAMA,SA7B2B,2CAAlB,sDAiCpB,IAEH,EF9EG,WAGH,MAMIiW,KALA1O,EADJ,EACIA,UACQkmB,EAFZ,EAEIhyB,OAEaiyB,EAJjB,EAII7wB,YACAqZ,EALJ,EAKIA,cAEJ,EAAqCkB,KAA9BnC,EAAP,EAAOA,gBAAiBD,EAAxB,EAAwBA,UACxB,EAAgD1X,IAAMquB,SAAmB,IAAzE,oBAAOgC,EAAP,KAAyBC,EAAzB,KACA,EAA+BhtB,GAAMC,WAAWC,SAAzCgF,EAAP,EAAOA,YAAahC,EAApB,EAAoBA,QAKpB,EAAgCxG,IAAMquB,SAAc,IAApD,oBAAOkC,EAAP,KAAiBC,EAAjB,KACA,EAA8CxwB,IAAMquB,SAAgC,IAApF,oBAAOoC,EAAP,KAAwBC,EAAxB,KAMM9jB,EAAU5M,IAAMK,SAAQ,kBAAMyM,OAA0B,IAExD6jB,EAAuB3wB,IAAMC,aAAY,SAAC2wB,EAAqBxhB,GAC7DqhB,EAAgBzlB,SAEhBylB,EAAiBG,GAAsBhrB,WAAawJ,EACpDshB,EAAmBD,MAExB,CAACA,IAEJzwB,IAAMosB,WAAU,WACZ,IAAMyE,EAAejkB,EAAQkkB,WAAU,YAAkB,IAAhB7mB,EAAe,EAAfA,UACrCmP,GAAM,aAAcnP,GAChBA,GACAxD,QAAQC,QAAQuD,GAAWtD,SAAQ,SAACC,GAChC,IAAIgqB,EAAsBP,EAAiB5V,WAAU,SAAAsW,GAAG,OAAIA,IAAQnqB,MACvC,IAAzBgqB,GAEAD,EAAqBC,EAAqB3mB,EAAWrD,UAMrE,OAAO,kBAAMiqB,EAAaG,iBAC3B,CAACpkB,EAASyjB,IAEb,IAAMY,EAAoBhxB,sBAAW,sBAAC,8BAAAsC,EAAA,0DAC9BhB,GAAYE,YADkB,0CAGEF,GAAYE,YAAYyvB,wBAH1B,uBAGnBC,EAHmB,EAGnBA,YACPb,EAAoBa,GAJM,kBAKnBA,GAAe,IALI,kCAO1B7X,GAAQ,EAAD,IAPmB,iCASvB,IATuB,0DAenC,IAEHtZ,IAAMosB,WAAU,WACZ6E,MACD,CAACA,IAeJjxB,IAAMosB,WAAU,WAIZ,OAFAliB,IACAknB,IACO,WACH1Z,OAEL,IACH1X,IAAMosB,WAAU,WACZ,OAAQ+D,GACJ,IAAK,QACDpf,QAAQO,IAAI,QAAS,uBACrB8e,IACA,MACJ,IAAK,UACD,MACJ,IAAK,OACDA,IACAiB,EAAcpnB,MAKvB,CAACkmB,EAAcC,IAElB,IAAMlmB,EAAYlK,IAAMC,aAAY,WAUhC2Y,EAAcpQ,GAAe,MAE9B,CAACA,EAzIY,KA2IV6oB,EAAgBrxB,IAAMC,YAAN,uCAAkB,WAAOgK,GAAP,yBAAA1H,EAAA,sEACA0uB,IADA,OA4CpC,IA3CMK,EAD8B,OAEhCC,EAAiD,GACjDC,EAAuD,GACrDC,EAAYxnB,GAAa0Z,OAAO+N,KAAKznB,GAAaxD,QAAQC,QAAQuD,GAAW4L,QAAO,SAACC,EAAMlP,GAE7F,MAAyBA,EAAInD,MAAM,gBAAnC,oBAASC,EAAT,KAAgBC,EAAhB,KACIguB,EAAK,2BACF1nB,EAAWrD,IADT,IAEL0T,KAAM,CACF5W,QACAC,WAWR,OAP+C,IAA3C2tB,EAAY7W,WAAU,SAAAmX,GAAC,OAAIA,IAAMhrB,MACjC2qB,EAAsB1W,KAAK6I,GAAUiO,IAErCnpB,IAA0D,IAA3CA,EAAYiS,WAAU,SAAAmX,GAAC,OAAIA,IAAMhrB,MAChD4qB,EAA4B3W,KAAK6I,GAAUiO,IAE/C7b,EAAK+E,KAAK8W,GACH7b,IACR,IAAiC,GAEpC0a,EAAY,GAAD,mBAAKD,GAAL,YAAkBkB,MAI7BF,EAAwBA,EAAsBM,QAAO,SAAA7B,GACjD,MAAuBA,EAAE1V,KAAlB5W,EAAP,EAAOA,MAAOC,EAAd,EAAcA,MACd,OAAQ6C,GAAWA,EAAS9C,IAAW8C,EAAS7C,OAI1BqH,OAAS,IACzB8mB,EAAgBN,EAA4BK,QAAO,SAAA7B,GACrD,IAAM1V,EAAI,UAAM0V,EAAE1V,KAAK5W,MAAb,YAAsBssB,EAAE1V,KAAK3W,OACvC,OAAQ2tB,EAAY/W,SAASD,MAEjCiX,EAAwBA,EAAsBQ,OAAOD,EAAcE,MAAM,EAAG,EAAIT,EAAsBvmB,UAInGumB,EAAsBvmB,OAAS,GAClCumB,EAAsB1W,KAAK6I,GAAU6N,EAAuB,KAG1DU,EAAmBV,EAAsB1b,QAAO,SAACC,EAAMjP,GACzD,GAAIL,GAAWK,EAAM,CACjB,MAAuBA,EAAKyT,KAArB5W,EAAP,EAAOA,MAAOC,EAAd,EAAcA,MACRguB,EAA6B,CAC/B/rB,WAAYiB,EAEZiY,UAAWtY,EAAS9C,GAEpBsb,UAAWxY,EAAS7C,IAExBmS,EAAK+E,KAAK8W,GAEd,OAAO7b,IACR,IAEH4a,EAAmBuB,GA/DiB,4CAAlB,sDAiEnB,CAAC1B,IAWEa,EAAmBpxB,IAAMC,aAAY,WACvC0X,EAAgB,eAAGua,KAAY9iB,OAAU5G,MAC1C,IAEH,MAAO,CACH+nB,WACAE,mBEhI4D0B,GAAxD1B,EAAR,EAAQA,gBAAiBF,EAAzB,EAAyBA,SAEnB6B,EAAmBpyB,IAAMC,aAAY,WACzC,IAAMoyB,EAASje,OAAOke,YAEtBnD,EADoBkD,EAAS,GAAK,IAAM,GAAK,IAAM,MAElD,IAEHryB,IAAMosB,WAAU,WAGd,OAFAgG,IACAhe,OAAOme,iBAAiB,SAAUH,GAC3B,WACLhe,OAAOoe,oBAAoB,SAAUJ,MAEtC,CAACA,IAEJpyB,IAAMosB,WAAU,WACd,IAAM5hB,EAAOimB,EAAgB/oB,KAAI,SAAAb,GAE/B,MADY,UAAMA,EAAKiY,UAAUrV,WAArB,YAAmC5C,EAAKmY,UAAUvV,eAG1De,EAAKQ,SACTykB,EAAejlB,EAAK,IACpBilB,EAAejlB,EAAK,IACpBilB,EAAejlB,EAAK,IACpBilB,EAAejlB,EAAK,OAErB,CAACimB,EAAiBhB,IAErB,IAAMgD,EAAqBxyB,sBAAW,sBAAC,gCAAAsC,EAAA,0DACjChB,GAAYG,WADqB,0CAEdH,GAAYG,kBAFE,aAEd,EAAwB+wB,qBAFV,OAE7BC,EAF6B,OAG7BC,EAAcD,EAAOE,SAASlrB,KAAI,SAACsoB,GAAD,mBAAC,eACpCA,GADmC,IAEtC9c,SAAU8c,EAAE9c,SAASvL,QAAQ,OAAQ,SAEvC8mB,EAAmBkE,GAPgB,2CASpC,IAEH3yB,IAAMosB,WAAU,WACdqG,MACC,CAACA,IAEJzyB,IAAMosB,WAAU,WACdiD,MACC,CAACA,IAEJ,IAAIwD,EAAUC,cAGRC,EAAsB9yB,uBAAY,WACtC,OAAMuuB,EAAgBxjB,QAAUulB,GAAcA,EAASvlB,OAC9CulB,EAASsB,QAAO,SAAC7B,GACtB,IAAM1V,EAAI,UAAM0V,EAAE1V,KAAK5W,MAAb,YAAsBssB,EAAE1V,KAAK3W,OACvC,OAAI6qB,EAAgBwE,MAAK,SAAAhD,GAAC,OAAIA,EAAE9c,WAAaoH,OACnCkU,EAAgBwE,MAAK,SAAAhD,GAAC,OAAIA,EAAE9c,WAAaoH,KAAMlH,SAKtD,KACN,CAACmd,EAAU/B,IAEdpC,qBAAU,WACR,IAAM1pB,EAAOqwB,IACblE,EAAgBnsB,KACf,CAACqwB,IAEJ,IAAME,EAA0BhzB,uBAAY,YAGrC,IAAD,IAHwCqQ,YAGxC,MAH+C0d,GAAkBnrB,IAGjE,MAHsEqwB,eAGtE,MAHgF,GAGhF,EACAxwB,EAAQmX,aAAY0W,GACpBjgB,IAAS0d,GAAkBmF,YAC7BzwB,EAAOA,EAAKmvB,QAAO,SAAC7B,GAClB,IAAM1V,EAAI,UAAM0V,EAAE1V,KAAK5W,MAAb,YAAsBssB,EAAE1V,KAAK3W,OACvC,cAAO8X,QAAP,IAAOA,OAAP,EAAOA,EAAgBlB,SAASD,OAGhChK,IAAS0d,GAAkBoF,UAC7B1wB,EAAOA,EAAKmvB,QAAO,SAAC7B,GAClB,IAAM1V,EAAI,UAAM0V,EAAE1V,KAAK5W,MAAb,YAAsBssB,EAAE1V,KAAK3W,OACvC,OAAOqrB,EAAgBgE,MAAK,SAAAhD,GAAC,OAAIA,EAAElpB,SAAWwT,SAGlD5X,EAAOA,EAAKmvB,QAAO,SAAC7B,GAClB,IAAMqD,EAAgB,OAAGH,QAAH,IAAGA,OAAH,EAAGA,EAASI,oBAC5B5vB,EAAQssB,EAAE1V,KAAK5W,MAAM6vB,cACrB5vB,EAAQqsB,EAAE1V,KAAK3W,MAAM4vB,cAC3B,MAAgB,KAAZL,KAGQ,OAALxvB,QAAK,IAALA,OAAA,EAAAA,EAAO6W,SAAS8Y,MAAhB,OAAqC1vB,QAArC,IAAqCA,OAArC,EAAqCA,EAAO4W,SAAS8Y,QAE1D/iB,IAAS0d,GAAkBnrB,KAAQqwB,IACrCxwB,EAAOqwB,KAETlE,EAAgBnsB,KACf,CAACqwB,EAAqBtX,EAAgBuT,EAAiBuB,IAEpDiD,GAAiBvzB,uBAAY,SAACwzB,GAClC,MAAyBA,EAAInZ,KAArB5W,EAAR,EAAQA,MAAOC,EAAf,EAAeA,MACT+vB,EAAS,UAAMhwB,EAAN,YAAeC,GAC9BkvB,GAAWA,EAAQhY,KAAK,CACtBkS,SAAS,iBAAD,OAAmB2G,OAE5B,CAACb,IAEEc,GAAkB1zB,uBAAY,SAAC2zB,EAAaC,GAChDlF,EAAiBkF,GACjBZ,EAAwB,CACtB3iB,KAAmB,cAAbujB,EAA2B7F,GAAkBmF,UAAyB,iBAAbU,EAA8B7F,GAAkBoF,QAAUpF,GAAkBnrB,IAC3IqwB,QAASpE,MAEV,CAACmE,EAAyBnE,IAEvBgF,GAAqB9zB,IAAMC,aAAY,SAACqkB,GAC5CyK,EAAezK,GACf,IAAMhU,EAAyB,cAAlBoe,EAAgCV,GAAkBmF,UAA8B,iBAAlBzE,EAAmCV,GAAkBoF,QAAUpF,GAAkBnrB,IAC5JowB,EAAwB,CAACC,QAAS5O,EAAOhU,KAAMA,MAC9C,CAAC2iB,EAAyBvE,IAEvBqF,GAA2BtD,EAAgB/oB,KAAI,SAAAb,GAAS,IAAD,EACrDC,EAAM,UAAMD,EAAKiY,UAAUrV,WAArB,YAAmC5C,EAAKmY,UAAUvV,YAC9D,OAAO,YAAC,eACH5C,GADL,IAEEC,SACAktB,UAAS,UAAE1F,EAAgB0E,MAAK,SAAAhD,GAAC,OAAIA,EAAElpB,SAAWA,YAAzC,aAAE,EAAgDpE,KAAKuxB,MAAK,SAAC1xB,EAAQ2xB,GAAT,OAAoB3xB,EAAE0tB,UAAYiE,EAAEjE,kBAYvGkE,GAA0Bn0B,IAAMC,aAAY,SAACm0B,GAC7CA,GAAkBA,EAAettB,QACnC+rB,GAAWA,EAAQhY,KAAK,CACtBkS,SAAS,iBAAD,OAAmBqH,EAAettB,YAG7C,CAAC+rB,IAEJ,OAAO,gBAACtF,GAAA,EAAD,CAAK8G,QAAS,OAAQC,cAAe,SAAUC,KAAM,EAArD,UAEH,gBAACtG,GAAD,CAAWuG,WAAS,EAApB,UAoBI,eAAC7G,GAAA,EAAD,CAAM9mB,MAAI,EAAC4tB,GAAI,EAAGC,QAAS,kBAAMP,GAAwBJ,GAAyB,KAAlF,SACI,eAAC,IAAD,0CAAqBA,GAAyB,IAA9C,IAAkDC,UAAWD,GAAyB,GAAKA,GAAyB,GAAGC,UAAY,IAAOpI,OAE9I,eAAC+B,GAAA,EAAD,CAAM9mB,MAAI,EAAC4tB,GAAI,EAAGC,QAAS,kBAAMP,GAAwBJ,GAAyB,KAAlF,SACI,eAAC,IAAD,0CAAqBA,GAAyB,IAA9C,IAAkDC,UAAWD,GAAyB,GAAKA,GAAyB,GAAGC,UAAY,IAAOpI,OAE9I,eAAC+B,GAAA,EAAD,CAAM9mB,MAAI,EAAC4tB,GAAI,EAAGC,QAAS,kBAAMP,GAAwBJ,GAAyB,KAAlF,SACI,eAAC,IAAD,0CAAqBA,GAAyB,IAA9C,IAAkDC,UAAWD,GAAyB,GAAKA,GAAyB,GAAGC,UAAY,IAAOpI,OAE9I,eAAC+B,GAAA,EAAD,CAAM9mB,MAAI,EAAC4tB,GAAI,EAAGC,QAAS,kBAAMP,GAAwBJ,GAAyB,KAAlF,SACI,eAAC,IAAD,0CAAqBA,GAAyB,IAA9C,IAAkDC,UAAWD,GAAyB,GAAKA,GAAyB,GAAGC,UAAY,IAAOpI,UAIlJ,eAAC8B,GAAD,CAAiB8G,WAAS,EAACG,QAAS,EAAIC,cAAe,EAAGL,KAAM,EAAGM,UAAW,sBAA9E,SACI,gBAAClH,GAAA,EAAD,CAAM9mB,MAAI,EAAC4tB,GAAI,GAAf,UACI,gBAACtG,GAAD,WACE,gBAAC2G,GAAA,EAAD,CACIxQ,MAAOoK,EACPqG,SAAUpB,GACV,aAAW,wBAHf,UAKI,eAACqB,GAAA,EAAD,CAAKC,MAAOtJ,EAAE,2BAA4BrH,MAAM,cAChD,eAAC0Q,GAAA,EAAD,CAAKC,MAAOtJ,EAAE,YAAarH,MAAM,QACjC,eAAC0Q,GAAA,EAAD,CAAKC,MAAOtJ,EAAE,8BAA+BrH,MAAM,oBAEvD,eAAC4J,GAAD,UACE,eAAC,IAAD,CAAa5J,MAAOwK,EAAaiG,SAAUjB,UAG/C,eAACoB,GAAA,EAAD,IACA,eAAC,IAAD,aACEC,WAAY,SAAC3a,EAAOiZ,EAAK2B,GAAb,OAAqB5B,GAAeC,IAChD4B,QAASzG,EACTnT,eAAgBA,EAChB6Z,kBAAmB1a,EACnB2a,qBAAsBlb,EACtBmb,cAAetG,GANjB,aAOQuG,YAAalF,IAAaA,EAASvlB,QAAW4gB,gB,+BEvT/D,SAAS8J,GAAkB/2B,EAAa4R,GAC3ColB,aAAqBh3B,EAAQ,CAAC4R,GAAQ,KCY1C,IAAMqlB,GAA2B,CAC/B,CACEtR,MAAOuR,IAAUC,MACjBlvB,IAAKivB,IAAUC,MACfb,MAAO,QAAUY,IAAUC,OAE7B,CACExR,MAAOuR,IAAUE,MACjBnvB,IAAKivB,IAAUE,MACfd,MAAO,QAAUY,IAAUE,Q,8EC+ChBC,GA/DQ,SAAC,GAAgG,EAA9F91B,MAA+F,IAAxF4e,EAAuF,EAAvFA,UAAWE,EAA4E,EAA5EA,UAAWpZ,EAAiE,EAAjEA,WAAY4C,EAAqD,EAArDA,YAAamjB,EAAwC,EAAxCA,EAAMC,EAAkC,kBAEpH,EDkBG,SAAsB1rB,EAAY4e,EAAgBE,EAAgBxW,EAAoBmjB,GAC3F,IAAMsK,EAAmCL,GAAWluB,KAAI,YAA4B,IAAzB4c,EAAwB,EAAxBA,MAAO2Q,EAAiB,EAAjBA,MAAOruB,EAAU,EAAVA,IACvE,MAAO,CAAE0d,QAAO4R,OAAQvK,EAAEsJ,GAAQruB,MAAKuvB,IAAK,qCAAGxK,EAAEsJ,SAKnD,EAAwBmB,aAAiB5tB,EAAD,OAAcsW,QAAd,IAAcA,OAAd,EAAcA,EAAWvgB,KAAzB,OAA+BygB,QAA/B,IAA+BA,OAA/B,EAA+BA,EAAWzgB,MAA1EuI,EAAR,EAAQA,OAAQ7F,EAAhB,EAAgBA,IAEhB,EAAkCotB,mBAAoBwH,IAAUC,OAAhE,oBAAOO,EAAP,KAAkBC,EAAlB,KAQA,EAAkCjI,mBAASkI,IAAUC,IAArD,oBAAOC,EAAP,KAAkBC,EAAlB,KAEA,EAAoCrI,wBAAcxwB,GAAlD,oBAAO84B,EAAP,KAAmBC,EAAnB,KAEMC,EAAe52B,uBAAY,SAACiS,EAAsBoS,GACxC,OAAVA,IAGJsS,OAAc/4B,GACdy4B,EAAuB,UAAVhS,EAAoBuR,IAAUC,MAAQD,IAAUE,UAC5D,CAACa,EAAeN,IA4CbQ,EAA6CnT,OAAO+N,KAAK6E,KAAW1gB,QAAO,SAACkhB,EAAKlwB,GAErF,IAAMmwB,EAAyB,CAAE1S,MAAOiS,IAAU1vB,GAAOD,IAAK2vB,IAAU1vB,GAAOouB,MAAO,QAAUsB,IAAU1vB,IAE1G,OADAkwB,EAAIlc,KAAK,CAAEyJ,MAAO0S,EAAW1S,MAAO4R,OAAQvK,EAAEqL,EAAW/B,MAAQ+B,EAAW/B,MAAQ+B,EAAWpwB,KAAMA,IAAKowB,EAAWpwB,IAAKuvB,IAAK,qCAAGxK,EAAEqL,EAAW/B,MAAQ+B,EAAW/B,MAAQ+B,EAAWpwB,SAC9KmwB,IACN,IAuEH,OArEArB,GAAiB,sBAAC,0CAAAnzB,EAAA,yDAEZ00B,GAAU,EAET11B,GAAYE,aAAgBqF,GAAW7F,EAJ5B,oDAQZo1B,IAAcR,IAAUC,MARZ,wBASRoB,EAAiC,CACrCpwB,OAAQ7F,EACR0uB,SAAUC,KAAgBC,GAC1BC,MAAO,IAZK,kBAgBevuB,GAAYE,YAAYguB,eAAeyH,GAhBtD,OAgBNnH,EAhBM,OAkBRkH,IACIN,EAAa5G,EAAaA,aAAaroB,KAAI,SAACb,GAChD,MAAO,CACLopB,UAAWppB,EAAKsL,UAChBI,IAAK1L,EAAK0L,IACVD,KAAMzL,EAAKyL,KACXD,KAAMxL,EAAKwL,KACXrD,MAAOnI,EAAKmI,MACZnK,OAAQgC,EAAKkY,SACblZ,QAASgB,EAAKmI,MAAQnI,EAAKwL,MAAQxL,EAAKwL,KACxC8kB,KAAMC,KAAOvwB,EAAKsL,WAAWklB,OAAO,cAGxCT,EAAcD,IA/BJ,kDAmCZW,aAAa,EAAD,GAAS,6BAnCT,uCAuCRJ,EAA2B,CAC/BpwB,UAxCY,oBA6CYvF,GAAYE,YAAY81B,YAAYL,GA7ChD,iBA6CJM,EA7CI,EA6CJA,MAEJP,IACIN,EAAkC,CACtCc,WAAYD,EAAME,YAClBC,cAAeH,EAAMI,eACrBC,WAAYL,EAAMM,YAClBC,cAAeP,EAAMQ,gBAEvBpB,EAAcD,IAtDJ,mDA0DZW,aAAa,EAAD,IA1DA,kCA+DT,WACLL,GAAU,KAhEI,kEAmEf,CAAC11B,GAAYE,YAAaR,EAAK6F,EAAQuvB,IAEnC,CAGLI,YACAJ,YACAJ,aACAa,uBACAD,eACAF,aACAsB,sBA/H4B,SAACC,EAAkDrE,GAC7E,IAAMsE,EAA2B,OAAbtE,EAAoB0C,IAAU6B,GAAkB,OAAbvE,EAAoB0C,IAAU8B,GAAK9B,IAAUC,GACpGE,EAAayB,KC5CXG,CAAap4B,EAAO4e,EAAWE,EAAWxW,EAAamjB,GAJvD0K,EADJ,EACIA,UACAJ,EAFJ,EAEIA,WACAY,EAHJ,EAGIA,aACAF,EAJJ,EAIIA,WAEI4B,EAAYC,eAAZD,QACFE,EAAS,OAAG3Z,QAAH,IAAGA,OAAH,EAAGA,EAAWvgB,KACvBm6B,EAAU,OAAG1Z,QAAH,IAAGA,OAAH,EAAGA,EAAWzgB,KAIxBo6B,EAAiBhC,GAAgBA,EAAW3rB,OAAS2rB,EAAW1C,MAAK,SAAC1xB,EAAQ2xB,GAAT,OAAoB3xB,EAAE0tB,UAAYiE,EAAEjE,aAAa,GACtH2I,EAAiBjC,GAAc7X,GAAa6X,EAAWoB,cAAtC,2BAChBpB,GADgB,IAEnBoB,cAAepB,EAAWoB,cAAcrwB,KAAI,SAACmxB,GAAD,OAAiBxxB,OAAO0d,GAAyB8T,EAAKJ,OAClGd,cAAehB,EAAWgB,cAAcjwB,KAAI,SAACmxB,GAAD,OAAiBxxB,OAAO0d,GAAyB8T,EAAKJ,SAClG,GACJ,OAAQ,uCACJ,eAAC9K,GAAA,EAAD,CAAM9mB,MAAI,EAAV,SACG,gBAAC0mB,GAAA,EAAD,CAAK8G,QAAS,OAAQC,cAAe,MAAOwE,eAAgB,gBAAiBC,WAAY,SAAzF,UACI,eAAC,KAAD,wCACIja,YAAWE,aACR4M,GAFP,IAEaD,IAAG/lB,iBAEhB,eAAC,KAAD,yBAAmBozB,WAAS,GAA5B,2BAAsCpN,GAAtC,IAA4CD,IAAGsK,aAAY3R,MAAO+R,KAAlE,IACiBQ,aAAcA,UAGtC,eAACtJ,GAAA,EAAD,CAAKgH,KAAM,EAAGwE,WAAY,UAAWzE,cAAc,MAAM2E,UAAW,EAAIC,SAAU,WAAlF,SACI,eAAC3L,GAAA,EAAD,CAAKgH,KAAM,EAAGF,QAAS,OAAQC,cAAe,SAAU6E,UAAW,IAAKC,UAAW,IAAMC,MAAO,CAAEhH,OAAQ,OAAQiH,MAAO,QAAzH,SACI,eAAC,IAAD,CACIhpB,KAAM+lB,EACN3zB,KAAM2zB,IAAcR,IAAUC,MAAQ6C,EAAiBC,EACvDW,UAAWhB,EACXiB,UAAWd,EACXe,WAAY,aACZC,WAAS,YC7BvBC,GAAa,SAACnf,GAChB,MAAO,CACHof,GAAG,cAAD,OAAgBpf,GAClB,gBAAgB,mBAAhB,OAAoCA,KAYtCqf,IATgBvM,KAAOva,IAAV,6PAGO,mBAA0B,EAA1B,EAAEya,MAAiBC,QAGhB,qBAAED,MAAiBC,QAG7BH,aAAOwH,KAAPxH,CAAH,uDACG,qBAAEE,MAAiBC,SAkDvBqM,GAxCIpO,aAAgB,SAAhBA,EAEf,YAE0H,IADrHpC,EACoH,EADpHA,WAAayQ,EACuG,EADvGA,aAAcpO,EACyF,EADzFA,EAE5B,EAA0B0C,mBAAS,GAAnC,oBAAO/J,EAAP,KAAc0V,EAAd,KACA,EAAsC3L,mBAAS,GAA/C,oBAAOa,EAAP,KAAoBC,EAApB,KAKMiD,EAAmBnyB,uBAAY,WACjC,IAAMoyB,EAASje,OAAOke,YAEtBnD,EADoBkD,EAAS,GAAK,IAAM,GAAK,IAAM,GAAK,IAAM,GAAK,MAEpE,IAUH,OARAjG,qBAAU,WAGN,OAFAgG,IACAhe,OAAOme,iBAAiB,SAAUH,GAC3B,WACHhe,OAAOoe,oBAAoB,SAAUJ,MAE1C,CAACA,IAEO,gBAAC1E,GAAD,CAAiB7mB,MAAI,EAACozB,UAAW,UAAWxF,GAAI,GAAIE,QAAS,EAAIC,cAAe,EAAGL,KAAM,EAAGM,UAAW,sBAAvG,UACH,gBAACgF,GAAD,CAAYvV,MAAOA,EACPyQ,SApBC,SAACmD,EAAYrE,GAC9BmG,EAASnG,IAoBO,aAAW,cAFvB,UAGI,eAACmB,GAAA,EAAD,aAAKC,MAAOtJ,EAAE,iBAAqBgO,GAAW,KAC9C,eAAC3E,GAAA,EAAD,aAAKC,MAAOtJ,EAAE,gBAAsBgO,GAAW,QAEnD,eAACzE,GAAA,EAAD,IACA,eAAC,KAAD,CAAYG,QAAmB,IAAV/Q,EAAcyV,EAAezQ,EAAYkM,cAAetG,U,UCrEtF,IAAMgL,GAAc,SAAC,GAIvB,IAAD,IAJyBC,oBAIzB,MAJwCC,KAAYD,aAIpD,EAJiEE,EAIjE,EAJiEA,qBAAqBC,EAItF,EAJsFA,qBAKtF,EAA0D7tB,KAAlDH,EAAR,EAAQA,mBAA0BiuB,EAAlC,EAA2Bp8B,OAC3B,EAA0Dsb,KAAlDrD,EAAR,EAAQA,mBAA0BokB,EAAlC,EAA2Br8B,OACrByO,EAAU5M,IAAMK,SAAQ,kBAAM+M,OAA0B,IAExDqtB,EAAez6B,IAAMC,YACvB4Z,aAAW,YAA6C,IAA3C0gB,EAA0C,EAA1CA,mBAAoBC,EAAsB,EAAtBA,mBAC7BzpB,QAAQO,IAAI,SAASnK,KAAKC,OACvBmzB,IAAsB37B,IAAWC,SAChCyN,IAEDkuB,IAAsB57B,IAAWC,SAChCuX,MAEN+jB,GACL,IAMDn6B,IAAMosB,WAAU,WACZ,IAAMyE,EAAejkB,EAAQkkB,WAAU,YANpB,SAAC,GAA+C,IAA9C0J,EAA6C,EAA7CA,mBAAmBD,EAA0B,EAA1BA,mBACxCE,EAAa,CAACD,qBAAmBD,uBAQ7BG,CAAc,CAACF,mBAFWl3B,GAAMC,WAAW2S,aAAa/X,OAEtBo8B,mBADRj3B,GAAMC,WAAW2S,aAAa/X,YAG5D,OAAO,kBAAM0yB,EAAaG,iBAC3B,CAACpkB,IACJ5M,IAAMosB,WAAU,WACRiO,GAAwBG,IAAuB57B,IAAWY,OACtD66B,MAET,CAACG,IACJx6B,IAAMosB,WAAU,WACRkO,GAAwBC,IAAuB37B,IAAWY,OAC1D86B,MAEL,CAACC,K,OC3BD,SAASI,GAAsBC,GAAwC,IAA1BzD,EAAyB,uDAAZ,IAAIhwB,KAC3D0zB,EAAKC,KAAKC,MAAM5D,EAAKvd,UAAY,KAAe,MAAPghB,EAC/C,OAAOC,E,8DCyCEG,GAAc,WAAyC,IAAD,WAd7C,WAClB,MAAoClhB,KAA7BnC,EAAP,EAAOA,gBAAgBD,EAAvB,EAAuBA,UACf9X,EAAYF,IAAZE,QACRI,IAAMosB,WAAU,WAMZ,OALGxsB,EAAQxC,aAAeC,IAAckkB,UACpC5J,EAAgB,eAAGwJ,KAAgBvhB,SAAW,IAE9C8X,IAEG,WACHA,OAEL,CAAC9X,EAAQxC,aAGZ69B,GAEA,MAA2Cv7B,IAAnCE,EAAR,EAAQA,QAAiBmsB,EAAzB,EAAiB5tB,OACjB,EAAoEuK,KAA5DlC,EAAR,EAAQA,QAAShD,EAAjB,EAAiBA,SAAUgF,EAA3B,EAA2BA,YAAaC,EAAxC,EAAwCA,YAAaL,EAArD,EAAqDA,UAG7C1H,GAFa83B,eAAb0C,SACiBzhB,KAAjBvD,aACWlV,IAAXN,QACO85B,EAAuB/gB,KAA9Btb,OAKAwtB,EAAMwP,aAAe,UAArBxP,EACR,EAA4C3rB,IAAMquB,cAA6BxwB,GAA/E,oBAAOu9B,EAAP,KAAuBC,EAAvB,KACA,EAA0Cr7B,IAAMquB,SAASiN,KAAeC,WAAxE,oBAAOC,EAAP,KAAsBC,EAAtB,KACA,EAAyCz7B,IAAMquB,UAAS,GAAxD,oBAAOqN,EAAP,KAAqBC,EAArB,KACA,EAAuC37B,IAAMquB,WAA7C,oBAAOuN,EAAP,KAAmBC,EAAnB,KACA,EAA0CxN,wBAA2DxwB,GAArG,oBAAOi+B,EAAP,KAAsBC,EAAtB,KACA,EAAkC/7B,IAAMquB,cAA+CxwB,GAAvF,oBAAOm+B,EAAP,KAAkBC,EAAlB,KACA,GAA0Cj8B,IAAMquB,SAAoC,IAApF,sBAAO6N,GAAP,MAAsBC,GAAtB,MACA,GAAoCn8B,IAAMquB,SAA6B,IAAvE,sBAAO/E,GAAP,MAAmB8S,GAAnB,MACA,GAAwCp8B,IAAMquB,SAA6B,IAA3E,sBAAO0L,GAAP,MAAqBsC,GAArB,MACA,GAAoCr8B,IAAMquB,cAAiCxwB,GAA3E,sBAAO+H,GAAP,MAAmB02B,GAAnB,MACA,GClFG,SAAwDC,GAC3D,MAA4C7zB,KAApClC,EAAR,EAAQA,QAAShD,EAAjB,EAAiBA,SAAUgF,EAA3B,EAA2BA,YACrB/E,EAAa+4B,YAAc,GAAD,OAAID,EAAJ,aAEhC,EAAwBlO,mBAAqF,CAAEvP,eAAWjhB,EAAWmhB,eAAWnhB,IAAhJ,oBAAOyc,EAAP,KAAamiB,EAAb,KACA,EAA4BpO,mBAAS,IAArC,oBAAOvnB,EAAP,KAAe41B,EAAf,KAuCA,OApCA18B,IAAMosB,WAAU,WAAK,IAAD,EAEhB,GAAK5lB,GAAYhD,GAAagF,EAA9B,CAIA,IAAI1B,EAAM,OAAGrD,QAAH,IAAGA,GAAH,UAAGA,EAAOk5B,cAAV,aAAG,EAAe71B,OAExBpD,EAAQ,MAERC,EAAQ,MAERi5B,EAAU,UAAMl5B,EAAN,YAAeC,GAE7B,GAAImD,EAAQ,CAER,IAAM+1B,EAAW/1B,EAAOrD,MAAM,gBAE1Bo5B,GAAYA,EAAS7xB,QAAU,GAAKxE,EAAQq2B,EAAS,KAAOr2B,EAAQq2B,EAAS,MAC7En5B,EAAQm5B,EAAS,GACjBl5B,EAAQk5B,EAAS,IAIrBD,EAD+BxG,aAAiB5tB,EAAa9E,EAAOC,GAA5DmD,OAOZ,IAAIgY,EAAYtY,EAAQ9C,GACpBsb,EAAYxY,EAAQ7C,GAExB84B,EAAQ,CAAE3d,YAAWE,cACrB0d,EAAUE,MACZ,IACK,CACH91B,SACAwT,OACAmiB,UACAC,aDkC0CI,CAAa,iBAAnDxiB,GAAR,GAAQA,KAAMmiB,GAAd,GAAcA,QAAS31B,GAAvB,GAAuBA,OAAQ41B,GAA/B,GAA+BA,UAE/B,GAA8C18B,IAAMquB,cAA0CxwB,GAA9F,sBAAO0tB,GAAP,MAAwBwR,GAAxB,MAEA,GAA4B1O,qBAA5B,sBAAO2O,GAAP,MAAeC,GAAf,MAEA,GAAkC5O,mBAAiB,KAAnD,sBAAO6O,GAAP,MAAkBC,GAAlB,MAEA,GAA8B9O,mBAAiB,KAA/C,sBAAO+O,GAAP,MAAgBC,GAAhB,MAEA,GAA0BhP,qBAA1B,sBAAOmJ,GAAP,MAAc8F,GAAd,MAEA,GAAkCt9B,IAAMquB,WAAxC,sBAAOkP,GAAP,MAAkBC,GAAlB,MAGMC,GAAuBz9B,IAAMC,aAAY,WACvC6G,IAAUlH,EAAQrC,WAAaqC,EAAQpC,QAAU+D,GAAYC,QAC7DD,GAAYC,QAAQk8B,cAAc,CAACngC,UAAWqC,EAAQrC,UAAWuJ,WAAUlH,EAAQpC,QAAQ6Z,MAAK,SAACsmB,GAK7F,IAAIC,EAAgBzU,GAAgBriB,EAAQ62B,EAASE,YACrDxB,GAAgBuB,GAAgC,OAGpDvB,GAAgB,MAGtB,CAACv1B,GAAQlH,EAAQrC,UAAWqC,EAAQpC,SAEtCwC,IAAMosB,WAAU,WAAO,IAAD,GAEb,OAAC9R,SAAD,IAACA,IAAD,UAACA,GAAM0E,iBAAP,aAAC,EAAiBvV,aACnBq0B,QAAUjgC,OAAWA,KAG1B,QAACyc,SAAD,IAACA,IAAD,UAACA,GAAM0E,iBAAP,aAAC,EAAiBvV,aAErBzJ,IAAMosB,WAAU,WACTL,IAAkBntB,IAAWY,OAASg7B,IAAuB57B,IAAWY,OACvEi+B,OAEN,CAAC79B,EAAQxC,WAAW0J,GAAOilB,EAAcyO,IAG3C,IAAMuD,GAA2B/9B,IAAMC,aAAY,WAC1CsB,GAAYE,YACbF,GAAYE,YAAYu8B,gBAAgB,CAAEl3B,YAAUuQ,MAAK,YAIpD,IAJsDgS,EAIvD,EAJuDA,aAKjD4U,EAAc9U,GAAgBriB,EAAQuiB,GAC5C+S,GAAc6B,MAIlB7B,GAAc,MAInB,CAACt1B,GAAQs1B,KAEN8B,GAAcl+B,IAAMC,YAAN,sBAAkB,8BAAAsC,EAAA,0DAC9BuE,KAAUvF,GAAYE,YADQ,uBAE9B2X,GAAM,wBAAyBtS,IAFD,SAGNvF,GAAYE,YAAY81B,YAAY,CAAEzwB,YAHhC,gBAGtB0wB,EAHsB,EAGtBA,MACR8F,GAAS9F,GAJqB,2CAMnC,CAAC1wB,GAAQw2B,KAEZt9B,IAAMosB,WAAU,WACRtlB,KACAi3B,KACAG,QAEL,CAACp3B,KAGJ,IAAMq3B,GAAwBn+B,IAAMC,aAAY,WAE5C,IAAMm+B,MAAkB,OAANpB,SAAM,IAANA,QAAA,EAAAA,GAAQqB,aAAczC,GACjCza,KAAA,OAAU6b,SAAV,IAAUA,QAAV,EAAUA,GAAQqB,YAAYC,IAAInd,KAAUya,KACnD,GAAGF,EACCD,EAAiBH,KAAeiD,aADpC,CAII,IAAIH,QAA4BvgC,IAAhB+9B,EAAhB,CAIM,QAAiB/9B,IAAdm+B,QAA0Dn+B,KAAtB,OAATm+B,QAAS,IAATA,OAAA,EAAAA,EAAWwC,KAAKC,kBAA0D5gC,KAArB,OAATm+B,QAAS,IAATA,OAAA,EAAAA,EAAW0C,IAAID,YAE3F,OADAhD,EAAiBH,KAAeqD,UAC1B,mBAEN,IAAMhsB,EAAK,OAAGqpB,QAAH,IAAGA,OAAH,EAAGA,EAAW0C,IAAI3oB,OACvB6oB,EAAe7Z,GAAyB6W,EAAajpB,GAAS,KAA/C,OAAqDqpB,QAArD,IAAqDA,OAArD,EAAqDA,EAAW0C,IAAI3oB,QAEzF,OADA0lB,EAAiBH,KAAeqD,UAC1B,kBAAN,OAAyBC,GAVzBnD,EAAiBH,KAAeC,cAe1C,CAACK,EAAaI,EAAWN,EAAeD,IAEpCoD,GAAYlb,OAAOuI,OAAOxI,GAAUjB,IAAxBkB,OAAA,IAAAA,CAAA,GACZjB,KAAOnB,UAAa,CAClB4c,MAGRn+B,IAAMosB,WAAU,WACTL,IAAkBntB,IAAWY,OAC5B67B,EAAkBhZ,GAAsBwc,OAE7C,CAACj/B,EAAQxC,WAAY2uB,EAAe2P,EAApC,OAAmDM,QAAnD,IAAmDA,OAAnD,EAAmDA,EAAWwC,KAAKC,aAEtE,IAAMK,GAAyB7+B,sBAAW,uCAAC,iDAAAsC,EAAA,yDAASi8B,EAAT,EAASA,KAAME,EAAf,EAAeA,IAAf,EAAoBxD,SAAatP,EAAjC,kBAE/B/f,EAAiBvI,GAAMC,WAAWK,OAAlCiI,aACR8vB,GAAiB,GACZp6B,GAAYC,SAAYgC,GAAaqI,GAAiBmxB,IACpDp9B,EAAQxC,aAAeC,IAAckkB,UALL,uBAOnCwa,EAAiB,CAACx7B,MAAM,EAAM+P,KAAM,QAAS2kB,MAAOtJ,EAAE,qBACtDgQ,GAAiB,GARkB,iCAajClD,EAAYj1B,EAASg7B,EAAKzoB,QAC1B2iB,EAAal1B,EAASk7B,EAAI3oB,QAE1BmhB,EAAuC,CACzC35B,UAAWqC,EAAQrC,UACnBwhC,YAAatG,EAAU7zB,SAlBY,UAqBfrD,GAAYC,QAAQw9B,iBAAiB9H,EAASt3B,EAAQpC,QArBvC,eAqBjCyhC,EArBiC,iBAyB7BC,EAAelC,GAAOmC,YAAche,KAAiBie,SAAWje,KAAiBke,MAEjFnI,EAAoC,CACtCoI,SAAUzzB,EAAaiU,gBACvBviB,UAAWqC,EAAQrC,UACnB0hC,UAAWA,EAAUM,QACrBC,UAAW,CACP56B,QAAS6zB,EAAU7zB,QACnBC,OAAQm4B,GAAOyC,SAEnBC,SAAU,CACN96B,QAAS8zB,EAAW9zB,QACpBC,OAAQm4B,GAAO2C,eAAeC,aAElCC,WAAW,EACXC,WAAYnF,GrCvMR,IqCwMJoF,WAAY/5B,SAASo3B,IACrB4C,gBAAgB,EAChBC,UAAW9e,KAAc+e,UACzBhB,eACAiB,eAAgB,IAGpB/mB,GAAM8d,GAhD6B,UAkDZ31B,GAAYC,QAAQ4+B,YAAYlJ,EAASt3B,EAAQnC,SAASuiB,GAAIpgB,EAAQpC,QAlD1D,QAkD7BmgC,EAlD6B,OAoDnCvkB,GAAMukB,IAEF,OAACA,QAAD,IAACA,OAAD,EAACA,EAAUriB,OAIXygB,EAAiB,CAACx7B,MAAK,EAAK+P,KAAK,UAAU2kB,MAAMtJ,EAAE,sBACnDve,KACA6uB,EAAa,2BACND,GACA,CACCwC,KAAK,2BAAD,OAAOxC,QAAP,IAAOA,OAAP,EAAOA,EAAWwC,MAAlB,IAAwBC,WAAY,IACxCC,IAAI,2BAAD,OAAO1C,QAAP,IAAOA,OAAP,EAAOA,EAAW0C,KAAlB,IAAuBD,WAAY,SAT9C1C,EAAiB,CAACx7B,MAAK,EAAK+P,KAAK,QAAQ2kB,MAAMtJ,EAAE,qBACjDrS,GAAO,OAACqkB,QAAD,IAACA,OAAD,EAACA,EAAU0C,UAxDa,mDAqEnClf,KAAA,MAEA4a,EAAiB,CAACx7B,MAAK,EAAK+P,KAAK,QAAQ2kB,MAAMtJ,EAAE,qBAvEd,eA2EvCsR,QAAUp/B,GA3E6B,UA6EjCkjB,aAAMxH,IA7E2B,QA+EvCoiB,GAAiB,GAEb/P,EAAKrI,WACLD,GAAUsI,EAAKrI,WAlFoB,2DAAD,sDAqFvC,CAACyY,EAAWgB,GAAQx5B,IACjB88B,GAAoB3c,OAAOuI,OAAOxI,GAAUb,IAAxBc,OAAA,IAAAA,CAAA,GACrBjB,KAAOnB,UAAY,CAACud,MAEnByB,GAAcvgC,IAAMC,aAAY,YAAiE,IAA9Du+B,EAA6D,EAA7DA,KAAME,EAAuD,EAAvDA,IAAKxD,EAAkD,EAAlDA,SAAatP,EAAqC,kBAClGvJ,GAAsBie,GAAmB,CAAC,aAAE9B,OAAME,MAAKxD,YAAatP,OACrE,CAAC0U,KAGJtgC,IAAMosB,WAAU,WACTL,IAAkBntB,IAAWY,OAC5B66B,OAEN,CAACkD,GAAW39B,EAAQxC,WAAW2uB,EAAcjlB,GAA7C,OAAoDk1B,QAApD,IAAoDA,OAApD,EAAoDA,EAAWwC,KAAKzoB,OAApE,OAA4EimB,QAA5E,IAA4EA,OAA5E,EAA4EA,EAAW0C,IAAI3oB,SAE7F,IAAMyqB,GAAexgC,IAAMC,YAAN,sBAAkB,8CAAAsC,EAAA,2DAEhChB,GAAYC,SAAWsF,KAAvB,OAAiCwT,SAAjC,IAAiCA,IAAjC,UAAiCA,GAAMwE,iBAAvC,aAAiC,EAAiBrV,cAAlD,OACI6Q,SADJ,IACIA,IADJ,UACIA,GAAM0E,iBADV,aACI,EAAiBvV,aAAc/I,GAAUqrB,IAAkBntB,IAAWY,OAH1C,0BAId2hB,KAAqB3Y,EAArB,OAAkC8R,SAAlC,IAAkCA,IAAlC,UAAkCA,GAAMwE,iBAAxC,aAAkC,EAAiBrV,WAAnD,OAA+D6Q,SAA/D,IAA+DA,IAA/D,UAA+DA,GAAM0E,iBAArE,aAA+D,EAAiBvV,YAAzFxI,EAJuB,EAIvBA,IAEF27B,EAAa37B,GAAOP,EAAOO,GAAOA,EAAM6F,GAExC25B,EAAqC,CACvCljC,UAAWqC,EAAQrC,UACnBuJ,OAAQ81B,GAVmB,SAaHr7B,GAAYC,QAAQk/B,mBAAmBD,EAAK7gC,EAAQpC,QAbjD,gBAavB+/B,EAbuB,EAavBA,UAERC,GAAaD,GAEbnkB,GAAM,aAAcmkB,GAjBW,4CAoBpC,CAACC,GAAc12B,GAAQ0B,EAAa9H,EAAQqrB,EAAensB,EAAQpC,OAAnE,OAA2E8c,SAA3E,IAA2EA,IAA3E,UAA2EA,GAAMwE,iBAAjF,aAA2E,EAAiBrV,WAA5F,OAAwG6Q,SAAxG,IAAwGA,IAAxG,UAAwGA,GAAM0E,iBAA9G,aAAwG,EAAiBvV,aAE5HisB,IAAkB,WAEd8K,OAED,CAAC15B,GAAD,OAASwT,SAAT,IAASA,IAAT,UAASA,GAAMwE,iBAAf,aAAS,EAAiBrV,WAA1B,OAAsC6Q,SAAtC,IAAsCA,IAAtC,UAAsCA,GAAM0E,iBAA5C,aAAsC,EAAiBvV,WAAYsiB,IAEtE,IAAMsO,GAAuBr6B,IAAMC,YAAN,sBAAkB,wDAAAsC,EAAA,sDACrCmQ,EADqC,OAC9BspB,QAD8B,IAC9BA,OAD8B,EAC9BA,EAAWwC,KAAKzoB,OACvBpD,EAFqC,OAE7BqpB,QAF6B,IAE7BA,OAF6B,EAE7BA,EAAW0C,IAAI3oB,OAE7BqD,GAAM,oCAAD,OAAqC1G,EAArC,kBAAmDC,IAEpDnK,GAAe+0B,IAAa7qB,GAAQC,GAAS7L,IAC7CvF,GAAYC,SAAW5B,EAAQxC,aAAeC,IAAckkB,WACzD7gB,IAFH,OAEad,QAFb,IAEaA,OAFb,EAEaA,EAASrC,aAFtB,OAEmCqC,QAFnC,IAEmCA,OAFnC,EAEmCA,EAASpC,SAAS,EAC/BsrB,KAAdvK,EAD4C,EAC5CA,UAD4C,EAEnC4C,KAAqB3Y,EAAakK,EAAMC,GAAjD1R,EAF4C,EAE5CA,IAEF27B,EAAa37B,GAAOP,EAAOO,GAAOA,EAAM6F,GAExC65B,EAAkBpD,GAAU5qB,GAE5BuqB,EAAYyD,EAAgBC,cAAc1D,UAC1CE,EAAUn8B,GAAOP,EAAOO,GAAOP,EAAOO,GAAKwG,cAAc21B,QAAS,EAClEyD,EAAW1f,KAAUic,GAAS33B,KAAK0b,KAAU+b,IAAYjU,WAE/DgT,EAAa,CACTuC,KAAM,CACFzoB,OAAQmmB,GAAc4E,gBAAd,UAAgC5E,GAAc4E,gBAAgB5E,GAAc6E,iBAA5E,aAAgC,EAAuDt3B,gBAAa5L,EAC5GyP,QAASiR,EAAS,UAAGA,EAAU2d,GAAc6E,iBAA3B,aAAG,EAA6ClzB,MAAQ,GAE9E6wB,IAAK,CACD3oB,OAAQmmB,GAAc4E,gBAAd,UAAgC5E,GAAc4E,gBAAgB5E,GAAc8E,gBAA5E,aAAgC,EAAsDv3B,gBAAa5L,EAC3GyP,QAASiR,EAAS,UAAGA,EAAU2d,GAAc8E,gBAA3B,aAAG,EAA4CnzB,MAAQ,KAGjFguB,EAAc,OAAC8E,QAAD,IAACA,OAAD,EAACA,EAAiBC,cAAcK,WAC9C5D,GAAWwD,GACXznB,GAAM,GAAD,OAAIwjB,EAAJ,sBAA4BiE,IAEjC1D,GAAaD,EAAUjU,YACvBkT,GAAiB,2BAAKD,IAAN,IAAoB3d,YAAWuL,IAAK+W,OAEpDznB,GAAM,mBACNikB,GAAW,KACXF,GAAa,KAEbhB,GAAiB,2BAAKD,IAAN,IAAqB3d,UAAW,GAAIuL,IAAK,OACzDmS,EAAa,CACTuC,KAAM,CACFzoB,OAAQrD,EACRpF,QAAS,GAEboxB,IAAK,CACD3oB,OAAQpD,EACRrF,QAAS,MAjDsB,2CAsD7C,QAAC0uB,QAAD,IAACA,OAAD,EAACA,EAAWwC,KAAKzoB,OAAQwnB,GAAzB,OAAoCvB,QAApC,IAAoCA,OAApC,EAAoCA,EAAW0C,IAAI3oB,OAAQvN,EAAa9H,EACtEd,EAAQxC,WAAYwC,EAAQpC,OAAQoC,EAAQrC,YAEhD28B,GAAc,CAACG,0BAOf,IAAM6G,GAAoB,uCAAG,WAAOC,EAA8CC,GAArD,eAAA7+B,EAAA,sDAEzB6W,GAAM,2BAEE4iB,EAAcmF,EAAdnF,UACR8B,GAAUsD,EAAUpF,GALK,2CAAH,wDASpBqF,GAAmBrhC,IAAMC,YAAN,uCAAkB,WAAMqQ,EAAMgxB,GAAZ,6BAAA/+B,EAAA,yDAElCiG,GAAgBhF,GAAa4E,GAAc1H,GAAWw7B,IAAkBp1B,IACrE0wB,IAASA,GAAMluB,SAAWxC,GAHK,uBAI/By6B,EAJ+B,eAITrF,IAJS,kBAK5B,CAAEoF,aAAYC,mBALc,QASnCC,GADEC,EAAkB,SAATnxB,GACYgxB,EAAW9C,KAAKC,WAAa6C,EAAW5C,IAAID,YAIrD,QADd+C,EAASA,EAAMvY,WAAsB/D,UAEjCsc,EAAQ,KAGZA,EAAQ,IAGZpoB,GAAM,aAAcooB,GAEd9uB,EAAO4uB,EAAW9C,KAAKzoB,OACvBpD,EAAQ2uB,EAAW5C,IAAI3oB,YAIZlY,KAFbq9B,EAAWoG,EAAWpG,YAGtBA,EAAW,IAGfA,EAAW/Z,KAAU+Z,GAAU31B,MAAM,KAAK0jB,WAIpC+T,EAAS7b,KAAoBqgB,EAAO9uB,EAAMC,EAAO8uB,EAAQj5B,EAAahF,EACxE4E,EAAWovB,GAAO92B,EAAe6qB,GAAiB2R,GAAWhC,GAEjE+B,GAAUD,GAEVd,GAAcwF,YAAd,OAA4B1E,QAA5B,IAA4BA,OAA5B,EAA4BA,EAAQ0E,YACpCxF,GAAcyF,gBAAd,OAAgC3E,QAAhC,IAAgCA,OAAhC,EAAgCA,EAAQ2C,eAAeiC,eAEnDH,EACAH,EAAW5C,IAAID,YAAmB,OAANzB,QAAM,IAANA,OAAA,EAAAA,EAAQA,QAAS/4B,WAAU,OAAC+4B,QAAD,IAACA,OAAD,EAACA,EAAQA,QAAU,EAE1EsE,EAAW9C,KAAKC,YAAmB,OAANzB,QAAM,IAANA,OAAA,EAAAA,EAAQA,QAAS/4B,WAAU,OAAC+4B,QAAD,IAACA,OAAD,EAACA,EAAQA,QAAU,EAI3EuE,EAlDmC,eAkDbrF,IAE1BD,EAAaqF,GACbnF,GAAiB,2BAAKoF,GAAN,IAAsBzX,IAAKsT,MArDJ,4CAAlB,wDAuDtB,CAAE5F,GAAOwE,EAAWE,GAAe3Q,KAEhCuS,GAAY,SAACsD,EAAgCE,GAAsD,IAAD,IAEhGhxB,OAAOzS,EACPurB,EAAO,iBAAMkY,QAAN,IAAMA,OAAN,EAAMA,EAAY9C,KAAKzoB,OAAvB,mBAAiCurB,QAAjC,IAAiCA,OAAjC,EAAiCA,EAAY5C,IAAI3oB,QAI5D,OAAQqrB,GACJ,KAAKS,KAASC,WACd,KAAKD,KAASE,UACV,OACJ,KAAKF,KAASG,cACV1xB,EAAO,OACP,MACJ,KAAKuxB,KAASI,aACV3xB,EAAO,MACP,MACJ,KAAKuxB,KAASK,eACV9oB,GAAM,kBASd,GAAI8iB,IACG9S,IAAO,UAAQ8S,GAAc6E,SAAtB,YAAkC7E,GAAc8E,UACvD1wB,GACAgxB,KACEtF,IAAc,UAAAA,EAAU1rB,UAAV,eAAiBmuB,eAAjB,UAAgC6C,EAAWhxB,UAA3C,aAAgC,EAAkBmuB,aACrE4C,GAAiB/wB,EAAMgxB,OACpB,CAAC,IAAD,QAECjZ,EAAmC,GACjC8Z,GAAqB,OAAJ7nB,SAAI,IAAJA,IAAA,UAAAA,GAAMwE,iBAAN,eAAiBrV,cAAjB,OAA+B6Q,SAA/B,IAA+BA,IAA/B,UAA+BA,GAAM0E,iBAArC,aAA+B,EAAiBvV,YACnE83B,EAA4C,CAC5CR,SAAUoB,EAAc,OAAG7nB,SAAH,IAAGA,IAAH,UAAGA,GAAMwE,iBAAT,aAAG,EAAiBrV,WAAa,MACzDu3B,QAASmB,EAAc,OAAG7nB,SAAH,IAAGA,IAAH,UAAGA,GAAM0E,iBAAT,aAAG,EAAiBvV,WAAa,OAEtD24B,EAAU,OAAGd,QAAH,IAAGA,OAAH,EAAGA,EAAY9C,KAAKzoB,OAC9BssB,EAAS,OAAGf,QAAH,IAAGA,OAAH,EAAGA,EAAY5C,IAAI3oB,OAE9BqT,EAAO,UAAMgZ,EAAN,YAAoBC,GAE/B,GAAID,GAAcC,EAGd,GAFAd,EAAeR,SAAWqB,EAEtBh6B,GAAaA,EAAUghB,GACvBmY,EAAeP,QAAUqB,OAEzB,GAAI7+B,GAAYA,EAAS4+B,GAErB,GAAI5+B,EAAS4+B,GAAYt4B,WAAWw4B,QAAQD,IAAc,EACtDd,EAAeP,QAAUqB,MACtB,CACH,IAAME,EAAS/+B,EAAS4+B,GAAYt4B,WAAW,GAC/C,IAAIy4B,EAGA,MAAMtgB,MAAM,mBAFZsf,EAAeP,QAAUuB,OAMjChB,EAAeR,SAAS,MACxBQ,EAAeP,QAAQ,MAOnC,MAKI7f,KAAqB3Y,EAAa+4B,EAAeR,SAAoBQ,EAAeP,SAJpF//B,EADJ,EACIA,IACQuhC,EAFZ,EAEI17B,OACA27B,EAHJ,EAGIA,SACAC,EAJJ,EAIIA,UAGJ,GAAIF,EAAS,CAETrG,GAAiB,2BAAKD,IAAN,IAAqBpS,IAAKsT,IAAYmE,IAClD/6B,IACAi2B,GAAQ,CACJ3d,UAAWtY,EAAQi8B,GACnBzjB,UAAWxY,EAAQk8B,KAEvBhG,GAAU8F,IAGd,IAAIG,EAAU,GAEVn6B,GAAevH,GAAO6F,IAAUpG,IAEhCiiC,EAAU,CAENvX,GAAgB,CAAEhC,QAAStiB,GAAQukB,OAAQpqB,EAAKP,YAIpDiO,QAAQ9L,IAAR,YAAgB8/B,IAAUtrB,MACtB,YAA6C,IAAD,uBAAvCoH,EAAuC,EAAvCA,gBAAiB5T,EAAsB,EAAtBA,QAElB,GADAkyB,GAAmBte,GACfjb,EAAU,CAAC,IAAD,QACYo/B,EdvhBxB,YAA8G,IAAD,EAAxGxZ,EAAwG,EAAxGA,QAAiB3K,GAAuF,EAA/F3X,OAA+F,EAAvF2X,iBAAiBqL,EAAsE,EAAtEA,IAAKtmB,EAAiE,EAAjEA,SAASgb,EAAwD,EAAxDA,WAAY+iB,EAA4C,EAA5CA,eAAgB/6B,EAA4B,EAA5BA,QAASiC,EAAmB,EAAnBA,YAEpH,EAA8B2gB,EAAQ3lB,MAAM,gBAA5C,oBAASs9B,EAAT,KACI8B,GADJ,KAC4BC,KAU5B,GARI1Z,IAAO,OAAI5K,QAAJ,IAAIA,OAAJ,EAAIA,EAAYlV,SAAU8f,IAAY5K,EAAWlV,SAEpDu5B,EADArkB,EAAW9L,OAASquB,EACb15B,OAAOmX,EAAWxP,OAEW,IAA7B3H,OAAOmX,EAAWxP,OAAe,EAAI3H,OAAOmX,EAAWxP,OAAS,GAI5E4P,MAAMikB,IAASpkB,EAAiB,CAC/B,IAIIskB,EAJJ,EAAsBC,aAAa5Z,GAA5B1W,EAAP,EAAOA,KAAMC,EAAb,EAAaA,MAEPswB,EAAkCxkB,EAAgBzX,OAAO,GACzDk8B,EAAmCzkB,EAAgBzX,OAAO,GAEhE,GAAI0L,GAAQC,GAASnP,EAASkP,GAAM9N,UAAYq+B,EAAiBr+B,QAC7Dm+B,EAAc,CAAC,CAACrwB,EAAMuwB,EAAiBp+B,QAAQ,CAAC8N,EAAOuwB,EAAkBr+B,aACtE,KAAI6N,IAAQC,GAASnP,EAASkP,GAAM9N,UAAYs+B,EAAkBt+B,QAGrE,MAAM,IAAIqG,IAAYC,IAASi4B,iBAF/BJ,EAAc,CAAC,CAACrwB,EAAMwwB,EAAkBr+B,QAAQ,CAAC8N,EAAOswB,EAAiBp+B,SAI7E,IACwB,EADxB,EAA0Bk+B,EAA1B,oBAAKlkB,EAAL,KAAcE,EAAd,KACGF,GAAWE,IACV8jB,EAAO5+B,WAAU,UAACiB,GAAyB6Z,EAAS,GAAIA,EAAS,WAAhD,aAAC,EAAoDhM,IAClE7N,GAAyB2Z,EAAQ,GAAIA,EAAQ,KAAO,GAAGI,QAAQ,EAAG,IAElE7F,GAAM,gCAAiCypB,IAInD,IAAMO,EAAuB,IAATP,QAAuBhlC,IAATglC,IAAuBjkB,MAAMikB,GAa/D,OAXAtB,EAAe8B,KAAOD,EAAaP,EAAM,EACzCtB,EAAe+B,KAAQF,EAAa,GAAY,EAAPP,GAAc,EACvDtB,EAAeT,gBAAkBt6B,IAAO,OAAIiC,QAAJ,IAAIA,OAAJ,EAAIA,EAAaoN,QAAO,SAACC,EAAWjP,GACxE,OAAO,2BAAIiP,GAAX,kBAAmBjP,EAAQL,EAASK,OACrC,KACH06B,EAAegC,eAAiB/8B,GAAWhD,IAAX,UAAuBA,EAAU+9B,EAAeR,UAAqBj3B,kBAArE,aAAuB,EAA0D+L,QAAO,SAACC,EAAWjP,GAChI,OAAO,2BAAIiP,GAAX,kBAAmBjP,EAAQL,EAASK,OACrC,KAEH06B,EAAezX,IAAMA,EAEd,CACHyX,kBcsesDiC,CAAe,CACzCpa,QAAQ,GAAD,OAAKmY,EAAeR,SAApB,YAAgCQ,EAAeP,SACtDl6B,UACA2X,kBACAD,WAAY3T,EAAQ/D,IAAU+D,EAAQ/D,IAAU,GAChDtD,WACA+9B,iBACA/6B,UACAiC,cACAqhB,IAAKsT,KATHmE,eAWNA,EAAiBqB,EACjBva,EAAcP,GAAajd,EAAQ/D,IAAU+D,EAAQ/D,IAAU,IAG/Dq1B,GAAiBoF,GAEjBjF,GAAcjU,GAEd4T,EAAa,CACTuC,KAAM,CACFzoB,OAAQwrB,EAAeT,gBAAf,UAAiCS,EAAeT,gBAAgBS,EAAeR,iBAA/E,aAAiC,EAAyDt3B,gBAAa5L,EAC/GyP,QAASi0B,EAAehjB,UAAf,UAA2BgjB,EAAehjB,UAAUgjB,EAAeR,iBAAnE,aAA2B,EAAmDlzB,MAAQ,GAGnG6wB,IAAK,CACD3oB,OAAQwrB,EAAeT,gBAAf,UAAiCS,EAAeT,gBAAgBS,EAAeP,gBAA/E,aAAiC,EAAwDv3B,gBAAa5L,EAC9GyP,QAASi0B,EAAehjB,UAAf,UAA2BgjB,EAAehjB,UAAUgjB,EAAeP,gBAAnE,aAA2B,EAAkDnzB,MAAQ,SAI3G41B,OAAM,SAACvkC,GACNka,GAAMla,UAS9B,MAAO,CACH48B,gBACAC,mBAEAG,iBACAt2B,cACA0jB,cACAyQ,gBACAiC,YACA1hB,QACA9R,cACA+3B,eACAnF,iBACAI,cAAcA,EACd0F,wBACAhD,iBEpmBKwF,GAAWhY,aAAgB,SAAhBA,EAA0B,YAAmC,IAAD,IAA5BE,EAA4B,oBAEhF,EAkBIoP,KAjBAkB,EADJ,EACIA,cACAF,EAFJ,EAEIA,UACAp2B,EAHJ,EAGIA,WACA0jB,EAJJ,EAIIA,WACAyQ,EALJ,EAKIA,aACAvxB,EANJ,EAMIA,YACA04B,EAPJ,EAOIA,qBACAX,EARJ,EAQIA,YACAjmB,EATJ,EASIA,KACA8gB,EAVJ,EAUIA,eACAI,EAXJ,EAWIA,cAEAM,EAbJ,EAaIA,cACAC,EAdJ,EAcIA,iBAEAmC,EAhBJ,EAgBIA,YAIEyF,EAAU3jC,IAAMC,aAAY,WAC9B87B,OAAiBl+B,KAClB,IACH,OAAO,uCAEH,eAAC,KAAD,CAAO+lC,UAAS,iBAAE9H,QAAF,IAAEA,OAAF,EAAEA,EAAe7G,aAAjB,QAAyB,GAAI4O,SAAQ,OAAE/H,QAAF,IAAEA,OAAF,EAAEA,EAAexrB,KAAM+B,KAAI,iBAAEypB,QAAF,IAAEA,OAAF,EAAEA,EAAev7B,YAAjB,SACzEujC,iBAAkBtqB,GAAYmqB,QAASA,IAE9C,gBAAChW,GAAA,EAAD,CAAM6G,WAAS,EAACuP,YAAa,EAAGC,aAAc,UAAWC,UAAW,SAAUC,SAAU,SAAxF,UACI,eAAC,GAAD,sDACOtY,GACAtR,GAFP,IAEa9R,cACT5C,aAAY0jB,iBAEhB,eAAC,GAAD,CAAYA,WAAYA,EAAYyQ,aAAcA,OAGtD,eAACxM,GAAA,EAAD,CAAK8G,QAAS,OAAQgF,MAAO,CAAE8K,SAAU,yBAAzC,SACI,eAACpW,GAAD,UACI,eAAC,KAAD,aACIqW,cAAelG,EACflC,UAAWA,EACXE,cAAeA,EACfqE,YAAaA,EACbnF,eAAgBA,EAChBI,cAAeA,GANnB,aAOU0F,wBAAyBtV,e,qBCxDnD,IAmCeyY,GAnCC3Y,aAAgB,SAAhBA,EAA0B,SAACE,GACvC,IAAQD,EAAMC,EAAND,EACF6I,EAAYx0B,IAAMskC,OAAO,MAC/B,EAAgCtkC,IAAMquB,SAAS,IAA/C,oBAAOkW,EAAP,KAAiBC,EAAjB,KAEA,ECDG,WAEH,MAAyC9kC,IAAjCE,QAAUrC,EAAlB,EAAkBA,UAAWC,EAA7B,EAA6BA,OAI7B,EAAsB6wB,mBAAmC,IAAzD,oBAAOoW,EAAP,KAAYC,EAAZ,KACA,EAAkCrW,oBAAS,GAA3C,oBAAOsW,EAAP,KAAkBC,EAAlB,KAEMC,EAAe,SAAC1mC,GAAD,MACN,KAAXA,EACE2mC,KAAkBC,WACT,cAAX5mC,EACM2mC,KAAkBE,UACP,eAAX7mC,EACI2mC,KAAkBC,WACP,aAAX5mC,EACI2mC,KAAkBG,SAClBH,KAAkBI,QAE9BC,EAAiBllC,sBAAW,sBAAC,4CAAAsC,EAAA,2DAC3BhB,IAAeA,GAAYC,SAAWjE,GAAaC,GADxB,iCAEDmR,QAAQ9L,IAAI,CAClCtB,GAAYC,QAAQ4jC,mBAAmB,CACnC7nC,aACDC,GACH+D,GAAYC,QAAQ6jC,sBAAsB,CACtC9nC,aACDC,GACH+D,GAAYC,QAAQ8jC,gCAAgC,CAChD/nC,aACDC,KAXoB,OAErB+nC,EAFqB,OAarBC,EAbqB,UAaAD,EAAY,GAAGE,qBAbf,aAaA,EAA8B/9B,KAAI,SAAAsoB,GAAC,MAAK,CAC/DvG,KAAMic,KAAsBC,SAI5B9b,OAAQ,CACJ4D,KAAMuC,EAAE1mB,QAAU,GAClBgb,MAAOjd,OAAOhD,GAAc2rB,EAAE1mB,OAAQ0mB,EAAEnG,UAE5CC,IAAK,CACD2D,KAAMuC,EAAE4V,gBAAkB,GAC1BthB,MAAOjd,OAAOnC,GAAyB8qB,EAAE4V,eAAgB5V,EAAE6V,WAAa,KAE5EC,KAAM9V,EAAE8V,MAAQ,GAChB/b,KAAMiG,EAAE7d,UACR4zB,QAAS/V,EAAE1U,KACXnd,OAAQ0mC,EAAa7U,EAAE7xB,YAGrB6nC,EAhCqB,UAgCDT,EAAY,GAAGU,0BAhCd,aAgCD,EAAmCv+B,KAAI,SAAAsoB,GAAC,MAAK,CACnEvG,KAAMic,KAAsBQ,QAC5B58B,OAAQ0mB,EAAE1mB,OAKVugB,OAAQ,CACJ4D,KAAMuC,EAAE1mB,QAAU,GAClBgb,MAAOjd,OAAOhD,GAAc2rB,EAAE1mB,OAAQ0mB,EAAEnG,UAE5CC,IAAK,CACD2D,KAAM,GACNnJ,MAAO,GAEXwhB,KAAM,GACN/b,KAAMiG,EAAE7d,UACR4zB,QAAS/V,EAAEmW,OACXhoC,OAAQ0mC,EAAa7U,EAAE7xB,YAGrBioC,EArDqB,UAqDAb,EAAY,GAAGc,oCArDf,aAqDA,EAA6C3+B,KAAK,SAAAsoB,GAAC,YAAK,CAC/EvG,KAAMic,KAAsB1c,SAI5Ba,OAAQ,CACJ4D,KAAMuC,EAAE1mB,QAAU,GAClBgb,MAAOjd,OAAOhD,GAAc2rB,EAAE1mB,OAAQ0mB,EAAEnG,UAE5CC,IAAK,CACD2D,KAAMuC,EAAE4V,gBAAkB,GAC1BthB,MAAOjd,OAAM,UAAChD,GAAc2rB,EAAE4V,eAAgB5V,EAAE6V,WAAa,UAAhD,aAAC,EAAmD5mB,QAAQ,KAE7E6mB,KAAM,GACN/b,KAAMiG,EAAE7d,UACR4zB,QAAS/V,EAAEmW,OACXhoC,OAAQ0mC,EAAa7U,EAAE7xB,YAGrBmoC,EAxEqB,6BAwEHd,QAxEG,IAwEHA,IAAoB,IAxEjB,mBAwEwBQ,QAxExB,IAwEwBA,IAAmB,IAxE3C,mBAwEkDI,QAxElD,IAwEkDA,IAAoB,KAC3FG,EAAoBD,EAAYrS,MAAK,SAAC1xB,EAAG2xB,GAAJ,OAAUA,EAAEnK,KAAOxnB,EAAEwnB,QAChE2a,EAAO6B,GACP3B,GAAa,GA3Ec,4CA6EhC,CAACrnC,EAAWC,IAMf,OAJAk4B,IAAkB,WACdyP,MACD,CAACA,IAEG,CACHV,MACAE,aDxGoC6B,GAA3BC,EAAb,EAAQhC,IAAkBE,EAA1B,EAA0BA,UAU1B,OARA3kC,IAAMosB,WAAU,WAAO,IAAD,EAEdiG,EAAM,OAAGmC,QAAH,IAAGA,GAAH,UAAGA,EAAWkS,eAAd,aAAG,EAAoBC,aAC7BtU,GACAmS,EAAY1J,KAAK8L,OAAOvU,EAAS,KAAO,IAAM,KAEnD,CAACmC,EAAW+P,IAGX,gBAAClX,GAAD,CAAYwZ,IAAKrS,EAAjB,UACI,sBAAKK,UAAU,QAAf,SAAwBlJ,EAAE,uBAC1B,sBAAKkJ,UAAU,eAAf,SACI,eAAC,KAAD,4BACIQ,QAASoR,EACTK,WAAY,CACRvC,SAAUA,EACVtyB,MAAOw0B,EAAYz7B,QAEvB+7B,YAAY,EACZtR,YAAakP,EACbqC,WAAY,cACTpb,aENhB,I,kBCJDqb,GAAqB3Z,aAAOC,KAAPD,CAAH,4QAQC,qBAAEE,MAAiBC,QACzB,mBAA0B,IAA1B,EAAED,MAAiBC,QAAgB,mBAA0B,EAA1B,EAAED,MAAiBC,QAInEyZ,GAAe5Z,aAAOC,KAAPD,CAAH,2JAqKH6Z,IA/Je7Z,aAAOC,KAAPD,CAAH,gHAGd,mBAA0B,EAA1B,EAAEE,MAAiBC,QAClB,mBAA0B,IAA1B,EAAED,MAAiBC,QAuBd/B,aAAgB,SAAhBA,EAA0B,YAAoC,IAAlCC,EAAiC,EAAjCA,EAAMC,EAA2B,kBACtE4I,EAAY8P,iBAAO,MACzB,EAAgCjW,mBAAS,IAAzC,oBAAOkW,EAAP,KAAiBC,EAAjB,KACA,EAAsCnW,mBAAS,QAA/C,oBAEA,GAFA,UD7CwB,WACxB,MAAkCruB,IAAMquB,SAA0B,IAAlE,oBAAO2F,EAAP,KAAkBoT,EAAlB,KACA,EAAoCpnC,IAAMquB,SAAgB,IAA1D,oBAAOgZ,EAAP,KAAmBC,EAAnB,KAEQ1nC,EAAYF,IAAZE,QACR,EAAoCka,KAA7BnC,EAAP,EAAOA,gBAAgBD,EAAvB,EAAuBA,UAEfhX,EAAWM,IAAXN,OACAwV,EAAiBuD,KAAjBvD,aACA1N,EAAgBlF,GAAMC,WAAWC,SAAjCgF,YACRxI,IAAMosB,WAAU,WAMZ,OALGxsB,EAAQxC,aAAeC,IAAckkB,UACpC5J,EAAgB,eAAGua,KAAYtyB,SAAW,IAE1C8X,IAEG,WACHA,OAEL,CAAC9X,EAAQxC,aACZ,IAAMmqC,EAAqBvnC,IAAMC,YAAN,sBAAkB,4CAAAsC,EAAA,6DAAOutB,EAAP,+BAAuB,EAAvB,mBAChBvuB,GAAYI,iBADI,aAChB,EAAuB6lC,cAAc,CAC1DC,OAAQ7nC,EAAQzC,WAChBuqC,UAAWC,KAAUC,IACrB9X,MAAOA,IAJ8B,QACnC+X,EADmC,SAMvBA,EAAWA,WAAW78B,QAAY68B,EAAWA,WAAW78B,QAEtEo8B,EAAaS,EAAWA,WAAWngC,KAAI,SAAAsoB,GAAC,MAAK,CACzCC,UAAW5oB,OAAO2oB,EAAE1oB,WAEpB0H,MAAO3H,OAAO2oB,EAAEnG,aAXiB,2CAc1C,CAACjqB,EAAQzC,aAENk9B,EAAuBr6B,IAAMC,aAAY,WAC3C,IAAMse,EAAYuK,KACZgf,EAAgBvpB,GAAaA,EAAUA,UAAYoF,OAAO+N,KAAKnT,EAAUA,WAAa,GACtFwpB,EAAmBxpB,GAAaA,EAAUA,UAAYoF,OAAOqkB,OAAOzpB,EAAUA,WAAa,GAC3F/T,EAAOs9B,EAAcpgC,KAAI,SAACd,EAAK4T,GAAN,MAAiB,CAC5C5R,MAAOhC,EACPsiB,OAAQ6e,EAAiBvtB,OAE7B8sB,EAAc98B,KAChB,IACF0vB,GAAc,CAACG,yBAEfr6B,IAAMosB,WAAU,WACR7qB,IAAeA,GAAYI,WAAauU,GACxCqxB,MAEL,CAACrxB,IAEJ,IAAQpS,EAAeR,GAAMC,WAAWK,OAAhCE,WAEFmkC,EAAiBnkC,EAAa6f,OAAOukB,QAAQpkC,GAAY4D,KAAI,SAAAsoB,GAAC,MAAK,CACrEpnB,MAAOonB,EAAG,GACV9G,OAAQ8G,EAAG,OACW,GAEpBmY,EAAgBd,EAAW3/B,KAAI,SAAAb,GAEjC,GAD+C,OAA7BA,EAAK+B,MAAMw/B,MAAM,KAAK,GACxB,CAAC,IAAD,QACNC,EAAgC,QAAfxhC,EAAK+B,MACtB,EACAvB,OAAO4gC,EAAejV,MAAK,SAAAhD,GAAC,OAAIA,EAAEpnB,QAAU/B,EAAK+B,SAA1C,UAAmDq/B,EAAejV,MAAK,SAAAhD,GAAC,OAAIA,EAAEpnB,QAAU/B,EAAK+B,gBAA7F,aAAmD,EAAkDsgB,OAAO1jB,MAAQ,GAAK6B,OAAM,UAAC4gC,EAAejV,MAAK,SAAAhD,GAAC,MAAgB,SAAZA,EAAEpnB,gBAA5B,aAAC,EAA8CsgB,OAAO1jB,OAClM,MAAQ,CACJjH,KAAMsI,EAAK+B,MACX0b,MAAOjd,OAAOhD,GAAcwC,EAAK+B,MAAN,UAAa/B,EAAKqiB,cAAlB,iBAAa,EAAaA,cAA1B,aAAa,EAAqBjX,QAAoBo2B,GAGzF,IAAMtkC,EAAS8C,EAAK+B,MAAMw/B,MAAM,KAChCrkC,EAAO4W,OAAO,EAAG,EAAG,OACpB,IAAM2tB,EAAWvkC,EAAO2G,KAAK,KAIzB69B,EAAqB,EAIzB,OAHG7nC,IACC6nC,EAAa7nC,EAAO4nC,GAAUlkC,cAE1B,CACJ7F,KAAMsI,EAAK+B,MACX0b,MAAOikB,MAGTt2B,EAAQk2B,EAAczgC,KAAI,SAAAsoB,GAAC,OAAIA,EAAE1L,SAAOzO,QAAO,SAACtT,EAAG2xB,GAAJ,OAAU3xB,EAAI2xB,IAAG,GAChEsU,EAAcL,EAAczgC,KAAI,SAAAsoB,GAAC,kCAChCA,GADgC,IAEnC1L,MAAO0L,EAAE1L,MAAQrS,OAGfw2B,EAAcD,EACf3W,QAAO,SAAA7B,GAAC,MAA6B,OAAzBA,EAAEzxB,KAAK6pC,MAAM,KAAK,MAC9BvyB,QAAO,SAACC,EAAM9I,GAAP,MAAiB,CACrBzO,KAAM,WACN+lB,MAAOxO,EAAKwO,MAAQtX,EAAKsX,SACzB,CACA/lB,KAAM,WACN+lB,MAAO,IAsBf,MAAO,CACH0P,YAEAmU,gBACAO,sBAvB0BF,EAAY3W,QAAO,SAAA7B,GAAC,MAA6B,OAAzBA,EAAEzxB,KAAK6pC,MAAM,KAAK,MAAap9B,OAAS,EAAhE,sBACpBw9B,EAAY3W,QAAO,SAAA7B,GAAC,MAA6B,OAAzBA,EAAEzxB,KAAK6pC,MAAM,KAAK,OADtB,CACoCK,IAC5DD,EAsBFG,cApBkBtB,EAAW3/B,KAAI,SAACud,GAAe,IAAD,YAC1CojB,EAAiBhhC,OAAM,UAAC4gC,EAAejV,MAAK,SAAAhD,GAAC,OAAIA,EAAEpnB,QAAUqc,EAAUrc,gBAAhD,aAAC,EAAuDsgB,OAAO1jB,OAAS6B,OAAM,UAAC4gC,EAAejV,MAAK,SAAAhD,GAAC,MAAgB,SAAZA,EAAEpnB,gBAA5B,aAAC,EAA8CsgB,OAAO1jB,OACjK,MAAQ,CACJoD,MAAO,CACH0H,KAAwC,OAAlC2U,EAAUrc,MAAMw/B,MAAM,KAAK,GAAcQ,KAAUv1B,GAAKu1B,KAAUC,OACxEvkB,MAAOW,EAAUrc,OAErBihB,OAAQif,OAAOzhC,OAAOhD,GAAc4gB,EAAUrc,MAAX,UAAkBqc,EAAUiE,cAA5B,aAAkB,EAAkBA,OAAOjX,QAAkBgN,QAAQ,KAAO8pB,IAC/GC,UAAWF,OAAM,UAAC7jB,EAAUiE,cAAX,aAAC,EAAkBrb,QAAUk7B,IAC9C/2B,OAAQ82B,OAAO5jC,GAAyB+f,EAAUrc,MAAX,UAAkBqc,EAAUiE,cAA5B,aAAkB,EAAkBA,OAAOlX,UAAY+2B,IAC9FE,aAAcZ,EAAiBhhC,OAAOhD,GAAc4gB,EAAUrc,MAAX,UAAkBqc,EAAUiE,cAA5B,aAAkB,EAAkBA,OAAOjX,QAAoB,MAWtHzJ,eCjFoF0gC,IAAhFR,EAAR,EAAQA,sBAAuBC,EAA/B,EAA+BA,cAAeR,EAA9C,EAA8CA,cAA0B3/B,GAAxE,EAA6DwrB,UAA7D,EAAwExrB,aAChE0N,EAAiB5S,GAAMC,WAAW2S,aAAlCA,aAERkW,qBAAU,WAAO,IAAD,EAERiG,EAAM,OAAGmC,QAAH,IAAGA,GAAH,UAAGA,EAAWkS,eAAd,aAAG,EAAoBC,aAC7BtU,GACAmS,EAAY1J,KAAK8L,OAAOvU,EAAS,KAAO,IAAM,KAEnD,CAACmC,EAAW+P,IAEf,IAAM4E,EAA6BlpC,uBAAY,SAAC2I,GAC5C,OAAKJ,EACEA,EAAYqpB,QAAO,SAAA/qB,GACtB,MAAuBA,EAAOshC,MAAM,KAApC,oBAAO1kC,EAAP,KAAcC,EAAd,KACA,OAAQiF,IAAUlF,GAAWkF,IAAUjF,KAHlB,KAK1B,CAAC6E,IAEJ,ECjFG,WACH,IAAM3I,EAAWC,cACA1C,EAAesC,IAAzBE,QAAUxC,WACVuuB,EAAKwP,aAAe,UAApBxP,EACDyd,EAAcppC,IAAMC,aAAY,SAAC8iB,EAAiBsmB,GAEpD,IAAMC,EAAclsC,IAAeC,IAAcqkB,WAEjD3Q,QAAQO,IAAI,gBAAiBg4B,EAAa3d,EAAE,0BAC5C,IAAMhtB,EAAS,CACXokB,SACA7iB,MAAM,aACFqpC,MAAqB5d,EAAd2d,EAAgB,wBAA6B,gBACpD5/B,YAAa,+BACV2/B,IAGXxpC,EAAS2pC,aAAe7qC,MACzB,CAACkB,EAAU8rB,EAAGvuB,IACXqsC,EAAezpC,IAAMC,aAAY,SAAC8iB,EAAiBsmB,GAAlB,OAAyCxpC,EAAS6pC,aAAgB,CACrG3mB,SACA7iB,MAAM,eAAKmpC,QACV,CAACxpC,IACA8pC,EAAe3pC,IAAMC,aAAY,SAAC8iB,EAAiBsmB,GAAlB,OAAyCxpC,EAAS+pC,aAAgB,CACrG7mB,SACA7iB,MAAM,eAAKmpC,QACV,CAACxpC,IAMN,OALyBG,IAAMC,aAAY,SAAC8iB,EAAiBsmB,GAAlB,OAAyCxpC,EAASgqC,aAAoB,CAC7G9mB,SACA7iB,MAAM,eAAKmpC,QACV,CAACxpC,IAEC,CACHupC,cACAK,eACAE,gBDkDAG,GAHAV,EADJ,EACIA,YACAK,EAFJ,EAEIA,aACAE,EAHJ,EAGIA,aAGA9W,EAAUC,cAERiX,EAAgB9pC,uBAAY,SAAC2I,GAC/BwgC,GAAY,EAAM,CACdpN,UAAW,CACP1uB,QAAS,GACTyI,OAAQnN,OAGjB,CAACwgC,IAEEY,EAAiB/pC,uBAAY,SAAC2I,GAChC6gC,GAAa,EAAM,CACfzN,UAAW,CACP1uB,QAAS,GACTyI,OAAQnN,OAGjB,CAAC6gC,IAEEQ,EAAiBhqC,uBAAY,SAAC2I,GAChC+gC,GAAa,EAAM,CACf3N,UAAW,CACP1uB,QAAS,GACTyI,OAAQnN,OAGjB,CAAC+gC,IAEEO,EAAcjqC,uBAAY,SAAC2I,EAAe0H,GACxCuiB,GACAA,EAAQhY,KAAR,oCAA0CjS,EAA1C,iBAAwD0H,MAE7D,CAACuiB,IAEEsX,EAAmC,CACrCC,UAAW,CACPC,WAAYlC,EAAczgC,KAAI,SAAAsoB,GAAC,OAAIA,EAAE1L,SAAOzO,QAAO,SAACC,EAAM9I,GACtD,OAAO8I,EAAO9I,IACf,GACHs9B,SAAUC,IAASC,QAEvBT,gBACAC,iBACAC,kBAGJ,OACI,uCACI,eAAC1c,GAAA,EAAD,UACI,eAAC,IAAD,wCACI5B,KACGC,GACAue,OAMX,gBAAClD,GAAD,CAAoB3S,cAAe,MAAOD,QAAS,OAAQyE,eAAgB,gBAAiBC,WAAY,UAAWE,UAAW,EAA9H,UACI,gBAAC1L,GAAA,EAAD,CAAKgH,KAAM,EAAIkW,UAAW,UAAW5V,UAAW,sBAAuBkP,YAAa,EAApF,UACQ,eAAC2G,GAAA,EAAD,CAAYD,UAAU,OAAOE,MAAM,gBAAgBC,QAAQ,QAA3D,SAAoEjf,EAAE,6BACtE,eAAC,IAAD,CAAejpB,KAAMwT,EAAewyB,EAAwB,QAEpE,gBAACnb,GAAA,EAAD,CAAK8G,QAAS,OAAQC,cAAe,SAAUC,KAAM,EAAGkW,UAAW,UAAW5V,UAAW,sBAAzF,UACI,eAAC6V,GAAA,EAAD,CAAYD,UAAU,OAAQE,MAAM,gBAAgBC,QAAQ,QAA5D,SAAqEjf,EAAE,sBACvE,eAACub,GAAD,CAAc3S,KAAM,EAAGkW,UAAW,cAc1C,eAACpd,GAAD,CAAY4L,UAAW,EAAG4N,IAAKrS,EAAWK,UAAW,sBAArD,SACI,eAACtH,GAAA,EAAD,CAAKsH,UAAU,eAAf,SACI,eAAC,IAAD,4BACIQ,QAASsT,EACT7B,WAAY,CACRvC,SAAUA,GAEdsG,aAAa,EACbd,cAAeA,EACfC,eAAgBA,EAChBC,eAAgBA,EAChBa,YAAaZ,EACba,aAAcb,EACdc,2BAA4B7B,GACzBvd,gBErI3B,IA+BekO,GA/BIpO,aAAgB,SAAhBA,EAA0B,SAACE,GAC1C,MAAgC5rB,IAAMquB,SAAS,IAA/C,oBAAOkW,EAAP,KAAiBC,EAAjB,KACA,ECjDG,WACH,MAAoCxkC,IAAMquB,SAA6B,IAAvE,oBAAOwP,EAAP,KAAmBoN,EAAnB,KACA,EAAsCjrC,IAAMquB,UAAS,GAArD,oBAAOoH,EAAP,KAAoByV,EAApB,KACA,EAAwCxrC,IAAhCE,QAASrC,EAAjB,EAAiBA,UAAWC,EAA5B,EAA4BA,OAEtBgG,EAAWF,GAAMC,WAAWC,SAASA,SAErC2nC,EAAmBnrC,IAAMC,YAAN,sBAAkB,4BAAAsC,EAAA,2DACnChB,IAAeA,GAAYC,SAAWjE,GAAaC,GAAUgG,GAD1B,gCAEVjC,GAAYC,QAAQk8B,cAAc,CACvDngC,aACDC,GAJgC,QAE7BqgC,EAF6B,SAMjBA,EAAWA,aAEzBoN,EAAcpN,EAAWA,WAAWn2B,KAAI,SAAAsoB,GAAM,IAAD,IACnCob,EAAapb,EAAElpB,OAAOshC,MAAM,KAE5B3e,EAAOuG,EAAEvG,OAAS4hB,KAAK3hB,IAAME,IAAWF,IAAME,IAAWD,KACzD2hB,EAAaF,EAAWA,EAAWpgC,OAAS,GAC5CugC,EAAYH,EAAWA,EAAWpgC,OAAS,GAC3CytB,EAAYhP,IAASG,IAAWF,IAAM4hB,EAAaC,EACnD7S,EAAajP,IAASG,IAAWF,IAAM6hB,EAAYD,EAInD9hB,EAASwG,EAAEvG,OAAS4hB,KAAK3hB,IAAM+O,EAAYC,EAEjD,MAAQ,CACJjP,KAAMA,EACNjkB,MAAO,CACHoB,IAAK6xB,EAELnU,MAAOhf,aAAM0qB,EAAExqB,OAAOG,YAE1BmkB,IAAK,CACDljB,IAAK4iB,EAELlF,MAAOkF,EAAM,UAAGnlB,GAAcmlB,EAAQwG,EAAElG,YAA3B,aAAG,EAA8B7K,QAAQ,QAAKphB,GAE/DksB,KAAM1iB,OAAO2oB,EAAEhG,WACfH,OAAQ,CACJ7D,KAAM,CACNpf,IAAK6xB,EAELnU,MAAOmU,EAAYp0B,GAAco0B,EAAWzI,EAAEnrB,aAAUhH,GAExDqoB,GAAI,CACJtf,IAAK8xB,EAELpU,MAAOmU,EAAS,UAAGvzB,GAAyBuzB,EAAWzI,EAAEnrB,eAAzC,aAAG,EAA+CU,MAAMyqB,EAAExqB,OAAOG,gBAAa9H,SAK1GqtC,GAAe,IAhDgB,2CAmDxC,CAAC3tC,EAAWC,EAAQgG,IAuBvB,OArBAxD,IAAMosB,WAAU,WACZ+e,MACD,CAACA,IAmBG,CACHtN,aACApI,eDlCgC+V,GAA5B3N,EAAR,EAAQA,WAAYpI,EAApB,EAAoBA,YACdjB,EAAYx0B,IAAMskC,OAAO,MACvB3Y,EAAMC,EAAND,EAUR,OARA3rB,IAAMosB,WAAU,WAAO,IAAD,EAEdiG,EAAM,OAAGmC,QAAH,IAAGA,GAAH,UAAGA,EAAWkS,eAAd,aAAG,EAAoBC,aAC7BtU,GACAmS,EAAY1J,KAAK8L,OAAOvU,EAAS,KAAO,IAAM,KAEnD,CAACmC,EAAW+P,IAGX,gBAAClX,GAAD,CAAYwZ,IAAKrS,EAAjB,UACI,sBAAKK,UAAU,QAAf,SAAwBlJ,EAAE,yBAC1B,sBAAKkJ,UAAU,+BAAf,SACI,eAAC,KAAD,4BACIQ,QAASwI,EAITkJ,YAAY,EACZtR,YAAaA,GACV7J,a,aE5CR6f,GAhCE/f,aAAgB,SAAhBA,EAA0B,YAAgD,IAA7CC,EAA4C,EAA5CA,EAAMC,EAAsC,kBAChF4I,EAAYx0B,IAAMskC,OAAO,MAC/B,EAAgCtkC,IAAMquB,SAAS,IAA/C,oBAAOkW,EAAP,KAAiBC,EAAjB,KACA,ECNG,WACH,MAA0CxkC,IAAMquB,SAA2B,IAA3E,oBAAOqd,EAAP,KAAsBC,EAAtB,KACA,EAAsC3rC,IAAMquB,UAAS,GAArD,oBAAOoH,EAAP,KAAoByV,EAApB,KACA,EAA6B5nC,GAAMC,WAAW3D,QAAtCrC,EAAR,EAAQA,UAAUC,EAAlB,EAAkBA,OACVgG,EAAaF,GAAMC,WAAWC,SAA9BA,SAEFooC,EAAe5rC,IAAMC,aAAY,SAAC2E,GACpC,GAAIpB,EAAU,CACV,IAAMkuB,EAAO/N,OAAO+N,KAAKluB,GAEnBgX,EADSmJ,OAAOqkB,OAAOxkC,GACRiX,WAAU,SAAAuV,GAAC,OAAIA,EAAEprB,UAAYA,KAClD,OAAI4V,GAAS,EACFkX,EAAKlX,GAET,GAEX,MAAO,KACR,CAAChX,IAEEqoC,EAAiB7rC,IAAMC,YAAN,sBAAkB,8BAAAsC,EAAA,2DACjChB,GAAYG,YAAcnE,GAAaC,GADN,gCAEX+D,GAAYG,WAAWwoB,kBAAkB,CAC3D3sB,aACDC,GAJ8B,QAE3BwS,EAF2B,SAKlBA,EAAQma,iBACbpmB,EAASiM,EAAQma,eAAeziB,KAAI,SAAAsoB,GAAC,kCAAK,CAC5CvG,KAAMuG,EAAEzF,SAAWuhB,KAAUthB,KAAOuhB,IAAaC,KAAOD,IAAaE,KACrEpiB,OAAQ,CACJ7D,KAAM,CACFpf,IAAKglC,EAAY,UAAC5b,EAAEjF,WAAW,UAAd,aAAC,EAAiBnmB,SACnC0f,MAAOwkB,OAAOzkC,GAAcunC,EAAY,UAAC5b,EAAEjF,WAAW,UAAd,aAAC,EAAiBnmB,SAA/B,UAAyCorB,EAAEjF,WAAW,UAAtD,aAAyC,EAAiBC,gBAEzF9E,GAAI,CACAtf,IAAKglC,EAAY,UAAC5b,EAAEjF,WAAW,UAAd,aAAC,EAAiBnmB,SACnC0f,MAAOwkB,OAAOzkC,GAAcunC,EAAY,UAAC5b,EAAEjF,WAAW,UAAd,aAAC,EAAiBnmB,SAA/B,UAAyCorB,EAAEjF,WAAW,UAAtD,aAAyC,EAAiBC,iBAG7FkhB,cAAepD,OAAOzkC,GAAcunC,EAAY,UAAC5b,EAAE1F,eAAH,aAAC,EAAW1lB,SAAzB,UAAmCorB,EAAE1F,eAArC,aAAmC,EAAWU,eACjFlB,IAAK,CACDljB,IAAKglC,EAAY,UAAC5b,EAAEjF,WAAW,UAAd,aAAC,EAAiBnmB,SACnC0f,MAAK,UAAEjgB,GAAcunC,EAAY,UAAC5b,EAAEjF,WAAW,UAAd,aAAC,EAAiBnmB,SAA/B,UAAyCorB,EAAEjF,WAAW,UAAtD,aAAyC,EAAiB8a,kBAAzE,aAAE,EAAmF5mB,QAAQ,IAEtG8K,KAAMiG,EAAE9E,cAEZygB,EAAiB5nC,GACjBmnC,GAAe,IA1Bc,2CA6BtC,CAAC3tC,EAAWC,EAAQouC,IAMvB,OAJAxf,qBAAU,WACNyf,MACD,CAACA,IAEI,CACJH,gBACAjW,eDlDmC0W,GAA/BT,EAAR,EAAQA,cAAejW,EAAvB,EAAuBA,YAUvB,OARAz1B,IAAMosB,WAAU,WAAO,IAAD,EAEdiG,EAAM,OAAGmC,QAAH,IAAGA,GAAH,UAAGA,EAAWkS,eAAd,aAAG,EAAoBC,aAC7BtU,GACAmS,EAAY1J,KAAK8L,OAAOvU,EAAS,KAAO,IAAM,KAEnD,CAACmC,EAAW+P,IAGX,qCACI,gBAAClX,GAAD,CAAYwZ,IAAKrS,EAAWK,UAAW,sBAAvC,UACI,sBAAKA,UAAU,QAAf,SAAwBlJ,EAAE,uBAC1B,sBAAKkJ,UAAU,eAAf,SACI,eAAC,IAAD,4BACIQ,QAASqW,EACT5E,WAAY,CACRvC,SAAUA,GAEdwC,YAAY,EACZtR,YAAaA,GACV7J,eE5B3B,I,YA0EeyY,GA1EC3Y,aAAgB,SAAhBA,EAA0B,SAACE,GACvC,MAAgC5rB,IAAMquB,SAAS,GAA/C,oBAAOkW,EAAP,KAAiBC,EAAjB,KACA,EAAoCxkC,IAAMquB,SAAS,gBAAnD,oBAAO+d,EAAP,KAAmBC,EAAnB,KAEA,ECYG,WAEH,MAAyC3sC,IAAjCE,QAAUrC,EAAlB,EAAkBA,UAAWC,EAA7B,EAA6BA,OAE7B,EAAsB6wB,mBAAmC,IAAzD,oBAAOoW,EAAP,KAAYC,EAAZ,KACA,EAAgCrW,mBAAS,GAAzC,oBAAOie,EAAP,KAAiBC,EAAjB,KACA,EAAsCle,oBAAS,GAA/C,oBAAOoH,EAAP,KAAoByV,EAApB,KAsIA,MAAO,CACHzG,MACA6H,WACA7W,cACA0P,eA7HmBllC,sBAAW,uCAAC,2CAAAsC,EAAA,yDAC/BiqC,EAD+B,EAC/BA,YACAC,EAF+B,EAE/BA,MACAC,EAH+B,EAG/BA,IACA5c,EAJ+B,EAI/BA,MACA6c,EAL+B,EAK/BA,OACAC,EAN+B,EAM/BA,QAEIrrC,IAAeA,GAAYC,SAAWjE,GAAaC,GARxB,wBAoB3B0tC,GAAe,GApBY,SAqBD3pC,GAAYC,QAAQqrC,WAAW,CACrDtvC,YACAuyB,QACA0c,cACAC,QACAC,MACAC,SACAC,SACDpvC,GA7BwB,OAqBrB+nC,EArBqB,OA+BrBuH,EAAgBvH,EAAYwH,QAAQrlC,KAAI,SAAAsoB,GAAC,kCACxCA,GADwC,IAE3CvG,KAAMuG,EAAEzF,OACRV,OAAQ,CACJ4D,KAAMuC,EAAE1mB,QAAU,GAClBgb,MAAOjd,OAAOhD,GAAc2rB,EAAE1mB,OAAQ0mB,EAAEnG,UAE5CC,IAAK,CACD2D,KAAMuC,EAAE4V,gBAAkB,GAC1BthB,MAAOjd,OAAOnC,GAAyB8qB,EAAE4V,eAAgB5V,EAAE6V,WAAa,KAE5EC,KAAM9V,EAAE8V,MAAQ,GAChB/b,KAAMiG,EAAE7d,UACR4zB,QAAS/V,EAAE1U,KACXnd,QAxDUA,EAwDW6xB,EAAE7xB,OAvDpB,KAAXA,EACE2mC,KAAkBC,WACT,cAAX5mC,EACM2mC,KAAkBE,UACP,eAAX7mC,EACI2mC,KAAkBC,WACP,aAAX5mC,EACI2mC,KAAkBG,SAClBH,KAAkBI,UATf,IAAC/mC,KA0DdumC,EAAOoI,GACPP,EAAYhH,EAAYyH,UACxB9B,GAAe,GAjDY,4CAAD,sDAmH/B,CAAC3tC,EAAWC,KDlJqEgpC,GAAvEC,EAAb,EAAQhC,IAAkB6H,EAA1B,EAA0BA,SAAuBW,EAAjD,EAAoCxX,YAA6B0P,EAAjE,EAAiEA,eACjE,EC+JG,WACH,MAAoCnlC,IAAMquB,SAA6B,IAAvE,oBAAOwP,EAAP,KAAmBoN,EAAnB,KACA,EAAsCjrC,IAAMquB,UAAS,GAArD,oBAAOoH,EAAP,KAAoByV,EAApB,KACA,EAAwCxrC,IAAhCE,QAASrC,EAAjB,EAAiBA,UAAWC,EAA5B,EAA4BA,OAEtBgG,EAAWF,GAAMC,WAAWC,SAASA,SAErC2nC,EAAmBnrC,IAAMC,YAAN,sBAAkB,4BAAAsC,EAAA,2DACnChB,IAAeA,GAAYC,SAAWjE,GAAaC,GAAUgG,GAD1B,gCAEVjC,GAAYC,QAAQk8B,cAAc,CACvDngC,aACDC,GAJgC,QAE7BqgC,EAF6B,SAMjBA,EAAWA,aAEzBoN,EAAcpN,EAAWA,WAAWn2B,KAAI,SAAAsoB,GAAM,IAAD,MACnCob,EAAapb,EAAElpB,OAAOshC,MAAM,KAG5B8E,GADOld,EAAEvG,OAAS4hB,KAAK3hB,IAAME,IAAWF,IAAME,IAAWD,QACxCC,IAAWF,IAC5B4hB,EAAaF,EAAWA,EAAWpgC,OAAS,GAC5CugC,EAAYH,EAAWA,EAAWpgC,OAAS,GAC3CytB,EAAYyU,EAAQ3B,EAAYD,EAChC5S,EAAawU,EAAQ5B,EAAaC,EAClC/hB,EAAS0jB,EAAQxU,EAAaD,EAC9B0U,EAAYD,EAAK,UAAGhoC,GAAyBwzB,EAAY1I,EAAEnrB,eAA1C,aAAG,EAAgDU,MAAMyqB,EAAExqB,OAAOG,WAAaT,GAAyBuzB,EAAWzI,EAAEnrB,QACtIuoC,EAAaF,EAAQhoC,GAAyBwzB,EAAY1I,EAAEnrB,QAA1C,UAAoDK,GAAyBuzB,EAAWzI,EAAEnrB,eAA1F,aAAoD,EAA+CU,MAAMyqB,EAAExqB,OAAOG,WACpI0nC,EAAQ,UAAGnoC,GAAyBskB,EAAQwG,EAAElG,YAAtC,aAAG,EAAyC7K,QAAQ,GAElE,MAAQ,CACJwK,KAAMuG,EAAEvG,OAAS4hB,KAAK3hB,IAAME,IAAWF,IAAME,IAAWD,KACxDnkB,MAAO,CACHoB,IAAK6xB,EAELnU,MAAOhf,aAAM0qB,EAAExqB,OAAOG,YAE1BmkB,IAAK,CACDljB,IAAK4iB,EAGLlF,MAAOkF,EAAS6jB,OAAWxvC,GAE/BksB,KAAM1iB,OAAO2oB,EAAEhG,WACfH,OAAQ,CACJ7D,KAAM,CACNpf,IAAK6xB,EAGLnU,MAAOmU,EAAY0U,OAAYtvC,GAE/BqoB,GAAI,CACJtf,IAAK8xB,EAGLpU,MAAOmU,EAAY2U,OAAavvC,SAK5CqtC,GAAe,IApDgB,2CAuDxC,CAAC3tC,EAAWC,EAAQgG,IAuBvB,OArBAxD,IAAMosB,WAAU,WACZ+e,MACD,CAACA,IAmBG,CACHtN,aACApI,eDtPkD+V,GAA9C3N,EAAR,EAAQA,WAAyByP,EAAjC,EAAoB7X,YACpB,ECyPG,WACH,MAA0Cz1B,IAAMquB,SAA2B,IAA3E,oBAAOqd,EAAP,KAAsBC,EAAtB,KACA,EAAsC3rC,IAAMquB,UAAS,GAArD,oBAAOoH,EAAP,KAAoByV,EAApB,KACA,EAA6B5nC,GAAMC,WAAW3D,QAAtCrC,EAAR,EAAQA,UAAUC,EAAlB,EAAkBA,OACVgG,EAAaF,GAAMC,WAAWC,SAA9BA,SAEFooC,EAAe5rC,IAAMC,aAAY,SAAC2E,GACpC,GAAIpB,EAAU,CACV,IAAMkuB,EAAO/N,OAAO+N,KAAKluB,GAEnBgX,EADSmJ,OAAOqkB,OAAOxkC,GACRiX,WAAU,SAAAuV,GAAC,OAAIA,EAAEprB,UAAYA,KAClD,OAAI4V,GAAS,EACFkX,EAAKlX,GAET,GAEX,MAAO,KACR,CAAChX,IAEEqoC,EAAiB7rC,IAAMC,YAAN,sBAAkB,8BAAAsC,EAAA,2DACjChB,GAAYG,YAAcnE,GAAaC,GADN,gCAEX+D,GAAYG,WAAWwoB,kBAAkB,CAC3D3sB,aACDC,GAJ8B,QAE3BwS,EAF2B,SAKlBA,EAAQma,iBACbpmB,EAASiM,EAAQma,eAAeziB,KAAI,SAAAsoB,GAAC,kCAAK,CAC5CvG,KAAMuG,EAAEzF,SAAWuhB,KAAUthB,KAAOuhB,IAAaC,KAAOD,IAAaE,KACrEpiB,OAAQ,CACJ7D,KAAM,CACFpf,IAAKglC,EAAY,UAAC5b,EAAEjF,WAAW,UAAd,aAAC,EAAiBnmB,SACnC0f,MAAOwkB,OAAOzkC,GAAcunC,EAAY,UAAC5b,EAAEjF,WAAW,UAAd,aAAC,EAAiBnmB,SAA/B,UAAyCorB,EAAEjF,WAAW,UAAtD,aAAyC,EAAiBC,gBAEzF9E,GAAI,CACAtf,IAAKglC,EAAY,UAAC5b,EAAEjF,WAAW,UAAd,aAAC,EAAiBnmB,SACnC0f,MAAOwkB,OAAOzkC,GAAcunC,EAAY,UAAC5b,EAAEjF,WAAW,UAAd,aAAC,EAAiBnmB,SAA/B,UAAyCorB,EAAEjF,WAAW,UAAtD,aAAyC,EAAiBC,iBAG7FkhB,cAAepD,OAAOzkC,GAAcunC,EAAY,UAAC5b,EAAE1F,eAAH,aAAC,EAAW1lB,SAAzB,UAAmCorB,EAAE1F,eAArC,aAAmC,EAAWU,eACjFlB,IAAK,CACDljB,IAAKglC,EAAY,UAAC5b,EAAEjF,WAAW,UAAd,aAAC,EAAiBnmB,SACnC0f,MAAK,UAAEjgB,GAAcunC,EAAY,UAAC5b,EAAEjF,WAAW,UAAd,aAAC,EAAiBnmB,SAA/B,UAAyCorB,EAAEjF,WAAW,UAAtD,aAAyC,EAAiB8a,kBAAzE,aAAE,EAAmF5mB,QAAQ,IAEtG8K,KAAMiG,EAAE9E,cAEZygB,EAAiB5nC,GACjBmnC,GAAe,IA1Bc,2CA6BtC,CAAC3tC,EAAWC,EAAQouC,IAMvB,OAJA5rC,IAAMosB,WAAU,WACZyf,MACD,CAACA,IAEI,CACJH,gBACAjW,eDjT+C0W,GAA3CT,EAAR,EAAQA,cAA4B6B,EAApC,EAAuB9X,YAEf9J,EAAMC,EAAND,EACF6I,EAAYx0B,IAAMskC,OAAO,MAkB/B,OAhBAtkC,IAAMosB,WAAU,WAAO,IAAD,EAEdiG,EAAM,OAAGmC,QAAH,IAAGA,GAAH,UAAGA,EAAWkS,eAAd,aAAG,EAAoBC,aAC7BtU,GACAmS,EAAY1J,KAAK8L,OAAOvU,EAAS,KAAO,IAAM,KAEnD,CAACmC,EAAW+P,IAEfnY,qBAAU,WACFmY,GACAY,EAAe,CACXrV,MAAOyU,MAGhB,CAACY,EAAgBZ,IAGhB,gBAAClX,GAAD,CAAYwZ,IAAKrS,EAAjB,UACI,eAACjH,GAAA,EAAD,CAAK0L,UAAW,EAAGuU,WAAY,EAA/B,SACI,gBAAC1Y,GAAA,EAAD,CAAMxQ,MAAO8nB,EAAYrX,SAAU,SAACnB,EAAQtP,GAAT,OAAmB+nB,EAAc/nB,IAAQ,aAAW,kBAAvF,UACI,eAAC0Q,GAAA,EAAD,CAAKC,MAAOtJ,EAAE,kCAAmCrH,MAAM,iBACvD,eAAC0Q,GAAA,EAAD,CAAKC,MAAOtJ,EAAE,4BAA6BrH,MAAM,WACjD,eAAC0Q,GAAA,EAAD,CAAKC,MAAOtJ,EAAE,gCAAiCrH,MAAM,oBAG7D,sBAAKuQ,UAAU,eAAf,SACoB,iBAAfuX,EACG,eAAC,KAAD,4BACI/W,QAASoR,EACTK,WAAY,CACRvC,SAAUA,EACVtyB,MAAOq6B,GAEXvF,YAAY,EACZtR,YAAawX,EACbjG,WAAY7B,GACTvZ,KAEQ,WAAfwgB,EACA,eAAC,KAAD,4BACI/W,QAASwI,EAITkJ,YAAY,EACZtR,YAAa6X,GACV1hB,KAGP,eAAC,IAAD,4BACIyJ,QAASqW,EACT5E,WAAY,CACRvC,SAAUA,GAEdwC,YAAY,EACZtR,YAAa8X,GACV3hB,aE/BZ6hB,GApCI/hB,aAAgB,SAAhBA,EAA0B,SAACE,GAC1C,IAAM4I,EAAYx0B,IAAMskC,OAAO,MAC/B,EAAgCtkC,IAAMquB,SAAS,IAA/C,oBAAOkW,EAAP,KAAiBC,EAAjB,KACA,ECDwB,WACxB,MAAkDxkC,IAAMquB,SAAoC,IAA5F,oBAAOqf,EAAP,KAA0BC,EAA1B,KACA,EAAgC3tC,IAAMquB,SAAS,GAA/C,oBAAO2e,EAAP,KAAiBY,EAAjB,KACA,EAAsC5tC,IAAMquB,UAAS,GAArD,oBAAOoH,EAAP,KAAoByV,EAApB,KACA,EAAyCxrC,IAAjCE,QAAUrC,EAAlB,EAAkBA,UAAWC,EAA7B,EAA6BA,OACTgL,EAAkBlF,GAAMC,WAApCC,SAAYgF,YACF9H,EAAa4C,GAAMC,WAAWtC,IAAxCP,OAAUA,OAEZmtC,EAAcntC,EACdijB,OAAO+N,KAAKhxB,GACZ,GACAotC,GAActlC,GAAe,IAAIupB,OAAO8b,GAExCE,EAAe/tC,IAAMC,YAAN,uCAAkB,WAAOC,GAAP,eAAAqC,EAAA,2DAC/BhB,IAAeA,GAAYC,SAAWjE,GAAaC,GADpB,uBAE/B0tC,GAAe,GAFgB,SAGN3pC,GAAYC,QAAQwsC,UAApB,2BAClB9tC,GADkB,IAErB3C,cACDC,GAN4B,QAGzBywC,EAHyB,SAObC,MAAMC,QAAQF,EAAWG,UACvCR,EAAYK,EAAWjB,UACvBW,EAAqBM,EAAWG,OAAO1mC,KAAI,SAAAsoB,GAAM,IAAD,IAC5C,EAA6DA,EAAEqe,QAAvDC,EAAR,EAAQA,WAAYC,EAApB,EAAoBA,YAAaC,EAAjC,EAAiCA,WAAYC,EAA7C,EAA6CA,YAEvCrD,EAAapb,EAAElpB,OAAOshC,MAAM,KAG5B8E,GADOld,EAAEvG,OAAS4hB,KAAK3hB,IAAME,IAAWF,IAAME,IAAWD,QACxCC,IAAWF,IAC5B4hB,EAAaF,EAAWA,EAAWpgC,OAAS,GAC5CugC,EAAYH,EAAWA,EAAWpgC,OAAS,GAC3CytB,EAAYyU,EAAQ3B,EAAYD,EAChC5S,EAAawU,EAAQ5B,EAAaC,EAClC4B,EAAYD,EAAK,UAAGhoC,GAAyBwzB,EAAY6V,UAAxC,aAAG,EAAmDhpC,MAAMyqB,EAAExqB,OAAOG,WAAaT,GAAyBuzB,EAAW6V,GACvIlB,EAAaF,EAAQhoC,GAAyBwzB,EAAY6V,GAAxC,UAAuDrpC,GAAyBuzB,EAAW6V,UAA3F,aAAuD,EAAiD/oC,MAAMyqB,EAAExqB,OAAOG,WAE/I,MAAQ,CACJmB,OAAQkpB,EAAElpB,OACV2iB,KAAiB,QAAXuG,EAAEvG,KAAiBG,IAAWF,IAAME,IAAWD,KACrDsW,UAAWjQ,EAAEiQ,UACbpW,OAAQ,CACJ7D,KAAM,CACFpf,IAAK6xB,EACLnU,MAAOjd,OAAO8lC,IAElBjnB,GAAI,CACAtf,IAAK8xB,EACLpU,MAAOjd,OAAO+lC,KAItBsB,QAASrnC,OAAOhD,GAAcq0B,EAAY+V,IAAgBpnC,OAAOhD,GAAco0B,EAAW+V,IAY1FhpC,MAAO,CACHoB,IAAK8xB,EACLpU,MAAOjd,OAAO2oB,EAAExqB,QAEpBukB,KAAyB,IAAnBiG,EAAE2e,SAASlC,MACjBtuC,OAAQ6xB,EAAE7xB,OACVywC,YAAa,SAIzB1D,GAAe,GA5DgB,2CAAlB,sDA8DlB,CAAC3tC,EAAWC,IAMf,OAJAwC,IAAMosB,WAAU,WACZ2hB,EAAa,MACd,CAACA,IAEG,CACHvlC,YAAaslC,EACbC,eACA1Y,QAASqY,EACTV,WACAvX,eDrFkEoZ,GAA9DxZ,EAAR,EAAQA,QAAS0Y,EAAjB,EAAiBA,aAAcf,EAA/B,EAA+BA,SAAUvX,EAAzC,EAAyCA,YAAajtB,EAAtD,EAAsDA,YAUtD,OARAxI,IAAMosB,WAAU,WAAO,IAAD,EAEdiG,EAAM,OAAGmC,QAAH,IAAGA,GAAH,UAAGA,EAAWkS,eAAd,aAAG,EAAoBC,aAC7BtU,GACAmS,EAAY1J,KAAK8L,OAAOvU,EAAS,KAAO,IAAM,KAEnD,CAACmC,EAAW+P,IAGX,qCACI,eAAClX,GAAD,CAAYwZ,IAAKrS,EAAjB,SAEI,sBAAKK,UAAU,eAAf,SACI,eAAC,IAAD,4BACIiS,WAAY,CACRvC,SAAUA,EACVtyB,MAAO+6B,GAEX3X,QAASA,EACT0R,YAAY,EACZgH,eACAtY,cACAjtB,eACGojB,cEhBdkjB,GAAc,YAUtB,EARG3tC,eAQF,IAEF,EAAmD4Y,KAApCg1B,EAAf,EAAO5wC,OAA0B2Y,EAAjC,EAAiCA,eAC1BtO,EAAeE,KAAfF,YACP,EAAsCxH,IAAvBguC,EAAf,EAAO7wC,OAAqBuC,EAA5B,EAA4BA,OAG5B,EAA0CV,IAAMquB,cAAmCxwB,GAAnF,oBAAOoxC,EAAP,KAAsBC,EAAtB,KACA,EAAkClvC,IAAMquB,SAAyB,IAAjE,oBAAO8gB,EAAP,KAAkBC,EAAlB,KACA,EAAgDpvC,IAAMquB,SAA4B,IAAlF,oBAAOghB,EAAP,KAAyBC,EAAzB,KAMMC,EAAmBvvC,IAAMC,aAAY,WACvC,IAEgB,EAFEynB,EAAcoB,KAAzBvK,UAEHmJ,IACqB,QAArB,EAAAuC,YAAA,SAAyB5S,MAAK,SAACgS,GAC3B,IAAIuU,EAAgBxT,QAAqBvsB,EAAWwrB,GACpDimB,EAAoB1R,GAAgC,QAG5D,OAAOlW,IACR,CAACoB,GAAkBmB,GAAuBG,GAAsB5hB,IAC7DgnC,EAAgBxvC,IAAMC,aAAY,SAACynB,GACrC,OAAIA,GAAchnB,EAEqB+F,QAAQC,QAAQghB,GAAY7R,QAAO,SAACC,EAAsB25B,GACzF,GAAI,OAAOC,KAAKD,GAAY,CACxB,IAEIE,EAFEtkB,EAASokB,EAAU9nC,QAAQ,MAAO,QAClCioC,EAAYH,EAAU9nC,QAAQ,MAAO,SAe3B9J,KARhB8xC,EAAUhoB,GACN,CACIH,UAAW9mB,EAAQ2qB,GACnB9M,UAAWmJ,EACX5gB,OAAQ8oC,EACRt4B,iBAAkBR,MAItBhB,EAAK+E,KAAK80B,GAGlB,OAAO75B,IACR,IAIA,KACR,CAACpV,EAAQoW,IAYNujB,EAAsBr6B,IAAMC,aAAY,WAC1C,GAAGS,EAAQ,CACP,IAAMgnB,EAAa6nB,IACbM,EAAaL,EAAc9nB,GACjC0nB,EAAaS,MAEnB,CAACnvC,IAiBH,OAhBAw5B,GAAc,CAACG,yBAGfr6B,IAAMosB,WAAU,WACR4iB,IAAiBpwC,IAAWY,OAC5B66B,MAEL,CAAC2U,IAEJhvC,IAAMosB,WAAU,WACZ,GAAI2iB,IAAsBnwC,IAAWY,MAAO,CACxC,IAAMyvC,EnCMc,YAKC,IAJwCn4B,EAIzC,EAJyCA,eAKrE,EAAqCxT,GAAMC,WAAWC,SAA/CgD,EAAP,EAAOA,QAASnD,EAAhB,EAAgBA,QAASG,EAAzB,EAAyBA,SACzB,EAA4BF,GAAMC,WAAWK,OAAtCE,EAAP,EAAOA,WAAYD,EAAnB,EAAmBA,MACnB,GAAIiT,GAAkBzT,GAAWmD,GAAWhD,GAAYM,GAAcD,EAyBlE,OAxBmB8f,OAAO+N,KAAK5a,GAAgBjB,QAAO,SAACC,EAAMlP,GACzD,GAAI,QAAQ8oC,KAAK9oC,GAAM,CAEnB,MAAyBA,EAAInD,MAAM,oBAAnC,oBAASC,EAAT,KAAgBC,EAAhB,KACMwjB,EAAgBrQ,EAAgBlQ,GACtC,EAKI8f,GAAiB,CAAC/iB,QAAOD,QAAOyjB,gBAAe9jB,UAASS,aAAYD,UAJpEgjB,EADJ,EACIA,aACAC,EAFJ,EAEIA,WACAzhB,EAHJ,EAGIA,UACAK,EAJJ,EAIIA,QAEJoQ,EAAK+Q,aAAeA,EAAevhB,aAAMuhB,GAAcphB,KAAKqQ,EAAK+Q,cAAclhB,WAAa,EAC5FmQ,EAAKgR,WAAaA,EAAaxhB,aAAMwhB,GAAYrhB,KAAKqQ,EAAKgR,YAAYnhB,WAAa,EACpFmQ,EAAKzQ,UAAYA,EAAYC,aAAMD,GAAWI,KAAKqQ,EAAKzQ,WAAWM,WAAa,EAChFmQ,EAAKpQ,QAAUA,EAAUJ,aAAMI,GAASD,KAAKqQ,EAAKpQ,SAASC,WAAa,EAE5E,OAAOmQ,IACR,CACC+Q,aAAc,EACdC,WAAY,EACZzhB,UAAW,EACXK,QAAS,ImCpCaoqC,CAAiB,CAACh5B,mBACxCo4B,EAAiBD,GACjB5U,OAEL,CAAC0U,IACG,CACHM,mBACAJ,gBACAE,c,0BCzFF9hB,GAAaC,aAAOC,KAAPD,CAAH,6HAIK,qBAAEE,MAAiBC,QAGlCsiB,GAAeziB,aAAOK,KAAPL,CAAH,uIAIG,qBAAEE,MAAiBC,QA6HzBuiB,IAxHe1iB,aAAOC,KAAPD,CAAH,oGAGlB,qBAAEE,MAAiBC,QAKH/B,aAAgB,SAAhBA,EACrB,YAIM,IAAD,QAHHC,EAGG,EAHHA,EAAGxqB,EAGA,EAHAA,eAID,GADC,kBACqCnB,IAAMquB,SAAS,QAArD,oBACA,GADA,UACwBruB,IAAMquB,SAAS,IAAvC,oBAAa4hB,GAAb,WACO1mB,EAAYiP,eAAZjP,SACDsJ,EAAUC,cAEVod,EAAiBlwC,IAAMC,aAAY,SAACqa,EAAMhK,GACxCuiB,GACAA,EAAQhY,KAAR,oCAA0CP,EAA1C,iBAAuDhK,MAE5D,CAACuiB,IAMJ,GAJ0B7yB,IAAMC,aAAY,SAACkwC,GACzCF,EAAQE,KACT,IAEkDrB,GAAY,CAAC3tC,oBAAzC8tC,GAAzB,EAAOI,iBAAP,EAAyBJ,eAAeE,EAAxC,EAAwCA,UACxC,OACI,uCACI,gBAACxhB,GAAA,EAAD,CAAM6G,WAAS,EAAC4b,QAAS,EAAzB,UACI,eAACziB,GAAA,EAAD,CAAM9mB,MAAI,EAACwpC,GAAI,EAAf,SACI,gBAACN,GAAD,CAAcvb,WAAS,EAAC8b,SAAU,EAAGC,SAAU,EAAGC,OAAQ,EAAGnc,QAAS,OAAQC,cAAe,SAA7F,UACI,gBAAC3G,GAAA,EAAD,CAAM0G,QAAS,OAAQC,cAAe,SAAUztB,MAAI,EAApD,UACI,eAAC6jC,GAAA,EAAD,CAAYE,QAAS,KACTD,MAAO,gBAAiB8F,WAAY,SADhD,SAC2D9kB,EAAE,6BAC7D,eAAC+e,GAAA,EAAD,CAAYE,QAAS,KAAM3R,UAAW,EAAGwX,WAAY,SAArD,cACuB5yC,IAAlBoxC,EAA8BlG,IAAgBxf,IAAamnB,IAASC,OAASpG,IAASC,OACjFoG,cAA4B,UAAC3B,EAAcpoB,oBAAf,QAA+B,IAA/B,UAC7BooB,EAAc5pC,iBADe,QACF,IAE1BklC,IAASsG,KAAOD,aAA2B,oBAAC3B,EAAcnoB,kBAAf,QAA6B,EACpEzf,OAAO4nC,EAAcvpC,gBADkB,QACN,QAGnD,gBAACioB,GAAA,EAAD,CAAM0G,QAAS,OAAQC,cAAe,SAAU2E,UAAW,EAAGpyB,MAAI,EAAlE,UACI,eAAC6jC,GAAA,EAAD,CAAYE,QAAS,KAAMH,UAAW,KAAMgG,WAAY,SAC5C9F,MAAO,gBADnB,SACqChf,EAAE,qBACvC,eAAC+e,GAAA,EAAD,CAAYE,QAAS,KAAM3R,UAAW,EAAGwX,WAAY,SAArD,cACuB5yC,IAAlBoxC,EAA8BlG,IAAgBxf,IAAamnB,IAASC,OAASpG,IAASC,OACjFoG,aAA4B3B,EAAc5pC,UAAY4pC,EAAc5pC,UAAY,GAChFklC,IAASsG,KACTD,aAA4B3B,EAAcvpC,QAAUupC,EAAcvpC,QAAU,QAG1F,gBAACioB,GAAA,EAAD,CAAM0G,QAAS,OAAQC,cAAe,SAAU2E,UAAW,EAAGpyB,MAAI,EAAlE,UACI,eAAC6jC,GAAA,EAAD,CAAYE,QAAS,KAAMH,UAAW,KAAMgG,WAAY,SAC5C9F,MAAO,gBADnB,SACqChf,EAAE,wBACvC,eAAC+e,GAAA,EAAD,CAAYE,QAAS,KAAM3R,UAAW,EAAGwX,WAAY,SAArD,cACuB5yC,IAAlBoxC,EAA8BlG,IAAgBxf,IAAamnB,IAASC,OAASpG,IAASC,OACjFoG,aAA4B3B,EAAcpoB,aAAeooB,EAAcpoB,aAAe,GACtF0jB,IAASsG,KACTD,aAA4B3B,EAAcnoB,WAAamoB,EAAcnoB,WAAa,aAKxG,eAAC6G,GAAA,EAAD,CAAM9mB,MAAI,EAAC4tB,GAAI,EAAf,SACI,eAAC,GAAD,SAqBR,eAAC/G,GAAD,CAAiBiH,QAAS,EAAG2b,SAAU,EAAGC,SAAU,EAAGhc,KAAM,EAA7D,SACI,gBAAC5G,GAAA,EAAD,CAAM9mB,MAAI,EAAC4tB,GAAI,GAAIJ,QAAS,OAAQC,cAAe,SAAnD,UACI,eAACoW,GAAA,EAAD,CAAYE,QAAS,KAAMkG,aAAc,EAAzC,SAA6CnlB,EAAE,gBAC/C,eAAC,IAAD,CACI0J,QAAS8Z,EAET4B,cAAe,SAACtd,GACZ,IAAMnZ,EAAI,UAAMmZ,EAAIjM,UAAU1I,UAAUvgB,KAA9B,YAAsCk1B,EAAIjM,UAAUxI,UAAUzgB,MACxE2xC,EAAe51B,EAAM,QAEzB02B,eAAgB,SAACvd,GACb,IAAMnZ,EAAI,UAAMmZ,EAAIjM,UAAU1I,UAAUvgB,KAA9B,YAAsCk1B,EAAIjM,UAAUxI,UAAUzgB,MACxE2xC,EAAe51B,EAAM,WAEzB22B,iBAAkB,2B,SCtIjCC,GAAUC,KAmBjBC,IAjBW9jB,aAAOC,KAAPD,CAAH,uCACV,gBAAEE,EAAF,EAAEA,MAAF,gGAIEA,EAAM6jB,OAAOC,aAAa,CAACC,MAAO,SAJpC,0KAgBe7lB,aAAgB,CAAC,UAAW,CAAC8lB,SAAS,GAAtC9lB,EAA6C,YAAe,IAAD,EAAZC,EAAY,EAAZA,EAC9D,EAA2CjsB,IAA3BqsB,EAAhB,EAAQ5tB,OAAuByB,EAA/B,EAA+BA,QAE/B,EAA0BI,IAAMquB,cAASxwB,GAAzC,oBAAOo3B,EAAP,KAAcwc,EAAd,KAEM5S,EAAYlb,OAAOuI,OAAOxI,GAAUjB,KAAxB,KAAAkB,OAAA,IAAAA,CAAA,EACZjB,KAAOhB,WAAc,CACnB,WACI,MAAM,2BAHAiC,OAAA,IAAAA,CAAA,EAMZjB,KAAOpC,cAAiB,CACtB,WACI,MAAM,2BARA,IAalBtgB,IAAMosB,WAAU,WACRL,IAAkBntB,IAAWY,OAC7BiyC,EAASpvB,GAAsBwc,MAEpC,CAAC9S,EAAensB,EAAQxC,WAAYs0C,KAAKj0B,WAE5C,IAAMwO,EAAetI,OAAOuI,OAAOxI,GAAUb,IAAc,IAE3D,OAAO,eAAC,IAAD,CAAQ+nB,QAAS,YAAax4B,KAAM,QAASu4B,MAAO,UAAWgH,WAAW,EAClEtY,MAAO,CAACuY,SAAU,SAAUld,QAAS,WAChDrS,GAAsB4J,EAAc,KAFjC,SAIJN,EAAEsJ,SAEH4c,GAAcnmB,aAAgB,CAAC,SAAU,UAAW,CAAC8lB,SAAS,GAAhD9lB,CAAuDomB,MAC9DC,GAAa,WAAO,IAAD,EAExBtuC,EAAa+4B,YAAc,iBAE3B58B,EAMAF,IANAE,QAQJ,EAAqBu7B,eAAdxP,EAAP,EAAOA,EACDmB,GADN,kBACc,iBAAGrpB,QAAH,IAAGA,OAAH,EAAGA,EAAOk5B,OAAO91B,YAAjB,QAAyB,UAGjCmrC,EAAehyC,IAAMK,SAAQ,WAC/B,OAAQT,EAAQxC,YACZ,KAAKC,IAAcC,WACf,OAAO,gBAACiwB,GAAA,EAAD,CAAKgH,KAAM,EAAGF,QAAS,OAAQyE,eAAgB,SAAUxE,cAAe,SAAUyE,WAAY,SAA9F,UAEH,eAAC2R,GAAA,EAAD,CAAY/V,QAAS,EAAGiW,QAAS,KAAjC,SAAwCjf,EAAE,kCAC1C,eAACylB,GAAD,OAGR,KAAK/zC,IAAcujB,OACf,OAAO,gBAAC2M,GAAA,EAAD,CAAKgH,KAAM,EAAGF,QAAS,OAAQyE,eAAgB,SAAUxE,cAAe,SAAUyE,WAAY,SAA9F,UACH,eAAC2R,GAAA,EAAD,CAAY/V,QAAS,EAAGiW,QAAS,KAAjC,SAAwCjf,EAAE,yBAC1C,eAACylB,GAAD,OAGR,KAAK/zC,IAAcqkB,WACf,OAAO,gBAAC6L,GAAA,EAAD,CAAKgH,KAAM,EAAGF,QAAS,OAAQyE,eAAgB,SAAUxE,cAAe,SAAUyE,WAAY,SAA9F,UACH,eAAC2R,GAAA,EAAD,CAAY/V,QAAS,EAAGiW,QAAS,KAAjC,SAAwCjf,EAAE,4BAC1C,eAACylB,GAAD,OAGR,KAAK/zC,IAAcqkB,WACf,OAAO,gBAAC6L,GAAA,EAAD,CAAKgH,KAAM,EAAGF,QAAS,OAAQyE,eAAgB,SAAUxE,cAAe,SAAUyE,WAAY,SAA9F,UAEH,eAAC2R,GAAA,EAAD,CAAY/V,QAAS,EAAGiW,QAAS,KAAjC,SAAwCjf,EAAE,4BAC1C,eAACylB,GAAD,OAGR,KAAK/zC,IAAcwkB,WACf,OAAO,gBAAC0L,GAAA,EAAD,CAAKgH,KAAM,EAAGF,QAAS,OAAQyE,eAAgB,SAAUxE,cAAe,SAAUyE,WAAY,SAA9F,UAEH,eAAC,IAAD,CAAa4R,MAAO,UAAWtR,MAAO,CAACC,MAAO,GAAIjH,OAAQ,MAC1D,eAACqY,GAAA,EAAD,CAAY/V,QAAS,EAAGiW,QAAS,KAAjC,SAAwCjf,EAAE,oCAIlD,KAAKtuB,IAAcijB,cACf,OAAO,eAACiN,GAAA,EAAD,CAAKgH,KAAM,EAAGF,QAAS,OAAQyE,eAAgB,SAAUxE,cAAe,SAAUyE,WAAY,SAA9F,SAEH,eAAC2R,GAAA,EAAD,CAAY/V,QAAS,EACTiW,QAAS,KADrB,SAC4Bjf,EAAE,8BAA+B,CAAC5tB,YAAa6B,EAAQ7B,kBAK3F,KAAKV,IAAckkB,UACf,OAAO,uCACH,eAACgM,GAAA,EAAD,CAAK+L,MAAO,QAASjF,QAAS,OAAQyE,eAAgB,UAAWiL,YAAa,EAC1E+M,aAAc,EAAGjc,UAAW,sBADhC,SAEI,eAAC,IAAD,UACI,eAACgd,GAAD,CAAa/kB,SAAUA,EAAUokB,QAASA,SAGlD,gBAAC3jB,GAAA,EAAD,CAAK4L,UAAW,IAAK9E,QAAS,OAAQ0E,WAAY,UAAWzE,cAAe,SAAU2E,UAAW,EAC7F1E,KAAM,EADV,UAGkB,WAAbzH,GAAyB,eAAC,GAAD,IACZ,iBAAbA,GAA+B,eAAC,GAAD,IAClB,YAAbA,GAA0B,eAAC,GAAD,IACb,iBAAbA,GAA+B,eAAC,GAAD,IAClB,WAAbA,GAAyB,eAAC,GAAD,IACZ,eAAbA,GAA6B,eAAC,GAAD,IAChB,UAAbA,GAAwB,eAAC,GAAD,aAO1C,CAACnB,EAAG/rB,EAAQxC,WAAY0vB,IAE3B,OAAO,qCACFklB,K,sECvJHC,GAAgB3kB,aAAOC,KAAPD,CAAH,6FAMbD,GAAaC,aAAOC,KAAPD,CAAH,wLAKK,qBAAEE,MAAiBC,QAe3BykB,GAAaxmB,aAAgB,SAAhBA,EAA0B,YAGmC,IAFrFC,EAEoF,EAFpFA,EAGQ6I,GAD4E,EAFjFrzB,eAEiF,kBAChEnB,IAAMskC,OAAO,OAC/B,EAAgCtkC,IAAMquB,SAAS,IAA/C,oBAAOkW,EAAP,KAAiBC,EAAjB,KACA,EAAsCxkC,IAAMquB,SAAS,IAArD,oBAAO8jB,EAAP,KAAoBC,EAApB,KACA,EClCG,YAAgI,IAAlC7N,EAAiC,EAAjCA,SACjG,EAA8BvkC,IAAMquB,SAAqC,IAAzE,oBAAOgH,EAAP,KAAgBgd,EAAhB,KACA,EAAwBryC,IAAMquB,SAAiB,GAA/C,oBAAO8hB,EAAP,KAAaF,EAAb,KACOzpC,EAAWkC,KAAXlC,QACD8rC,EAAYtyC,IAAMskC,QAA6B,GAErD,EAAwCtjC,IAAjCN,EAAP,EAAOA,OAAgBsuC,EAAvB,EAAe7wC,OACf,EAIIwa,KAHA1O,EADJ,EACIA,UACQkmB,EAFZ,EAEIhyB,OACAya,EAHJ,EAGIA,cAEJ,EAAgEkB,KAC1DuX,GADN,EAAOlzB,OAAP,EAA6BoB,YACPS,IAAMC,aAAY,SAACgK,GACrC,IACI,IAAMsoC,EAAU7uB,GAAUhjB,GAC1B,IAAK,IAAI8xC,KAAgBvoC,EACjBsoC,EAAS,OAASC,KAClBD,EAAS,OAASC,GAAe5sC,WAAjC,2BACO2sC,EAAS,OAASC,GAAe5sC,YACjCqE,EAAWuoC,KAM1BH,EAAW1uB,OAAO+N,KAAK6gB,GAAS7qC,KAAI,SAAC2jB,GAKjC,OAJI7kB,IACA+rC,EAASlnB,GAAT,UAAmC7kB,EAAS+rC,EAASlnB,GAAT,OAC5CknB,EAASlnB,GAAT,UAAmC7kB,EAAS+rC,EAASlnB,GAAT,QAEzCknB,EAASlnB,OAEtB,MAAOnsB,GACL,MAAM,IAAI+L,IAAJ,2BAAoBC,IAASunC,cAA7B,IAA2CC,QAASxzC,QAG/D,CAACwB,KACEiyC,EAAmB3yC,IAAMC,aAAY,SAAC2yC,GACxCh6B,EAAcg6B,IACc,IAAxBN,EAAU5L,SACV90B,aAAa0gC,EAAU5L,SAE3B4L,EAAU5L,QAAUn1B,YAAW,WAC3BohC,EAAiBC,KAClB,OACL,CAACh6B,IACH5Y,IAAMosB,WAAU,WACZ,OAAO,WACHxa,aAAa0gC,EAAU5L,YAE5B,CAAC4L,EAAU5L,UAEd,IAAMmM,EAAkB7yC,IAAMC,aAAY,SAAC6yC,GAEvC,GADA7C,EAAQ6C,GACJpyC,GAAUijB,OAAO+N,KAAKhxB,GAAQsK,OAAS,EAAG,CAE1C,IADA,IAAM4nC,EAAiB,GACdG,GAAK5C,EAAO,GAAK5L,EAAUwO,EAAIpvB,OAAO+N,KAAKhxB,GAAQsK,QAAU+nC,GAAK5C,EAAO,GAAK5L,EAAWA,EAAUwO,IACxGH,EAAM/3B,KAAK8I,OAAO+N,KAAKhxB,GAASqyC,IAEpCJ,EAAiBC,MAEtB,CAAClyC,EAAQ6jC,IAmBZ,OAlBAvkC,IAAMosB,WAAU,WACR1rB,GAAyC,IAA/BijB,OAAO+N,KAAKhxB,GAAQsK,QAC9B6nC,EAAgB1C,KAGrB,IAGHnwC,IAAMosB,WAAU,WACR+D,IAAiBvxB,IAAWY,OAC5B6xB,EAAcpnB,KAEnB,CAACkmB,IACJnwB,IAAMosB,WAAU,WACT4iB,IAAiBpwC,IAAWY,OAC3BqzC,EAAgB,KAErB,CAAC7D,EAAc6D,IACX,CACH1C,OACA9a,UACAwd,mBDlDqCG,CAAY,CAACzO,aAA/CsO,EAAP,EAAOA,gBAAiBxd,EAAxB,EAAwBA,QAAS8a,EAAjC,EAAiCA,KAEjCnwC,IAAMosB,WAAU,WAAO,IAAD,EAEdiG,EAAM,OAAGmC,QAAH,IAAGA,GAAH,UAAGA,EAAWkS,eAAd,aAAG,EAAoBC,aAC7BtU,GACAmS,EAAY1J,KAAK8L,OAAOvU,EAAS,KAAO,IAAM,KAEnD,CAACmC,EAAW+P,IAEf,IAAM0O,EAAkBjzC,IAAMC,aAAY,WACtC,OAAKkyC,EAGE9c,EAAQxD,QAAO,SAAA7B,GAClB,IAAMtsB,EAAQssB,EAAElR,UAAUvgB,KAAKg1B,cACzB5vB,EAAQqsB,EAAEhR,UAAUzgB,KAAKg1B,cACzB2f,EAAiBf,EAAY5e,cACnC,OAAO7vB,EAAM6W,SAAS24B,IAAmBvvC,EAAM4W,SAAS24B,MANjD7d,IAQZ,CAAC8c,EAAa9c,IAEX4b,EAAmBjxC,IAAMC,aAAY,SAACkwC,GACxC0C,EAAgB1C,KACjB,CAAC0C,IACJ,OACI,qCACI,gBAAC,GAAD,WACI,eAACtlB,GAAA,EAAD,CAAKujB,aAAc,EAAnB,SACI,wBAACqC,GAAA,EAAD,CAEQC,YAAaznB,EAAE,eACfrH,MAAO6tB,EACPpd,SAAU,SAACmD,GAAgB,IAAD,EACtBka,EAAc,UAACla,EAAMmb,qBAAP,aAAC,EAAqB/uB,QAG5C1d,IAAK,SACLiuB,UAAW,SACX,aAAY,SACZye,eAAgB,eAACC,GAAA,EAAD,CAAgBra,SAAS,QAAzB,SACZ,eAAC,IAAD,UAIZ,eAAC,GAAD,CAAY7E,QAAS,OAAQC,cAAe,SAAUuS,IAAKrS,EAA3D,SACI,eAAC,IAAD,CACIa,QAAS4d,IACThC,mBACAd,OACArJ,WAAY,CACRvC,YAEJwC,YAAY,EACZtR,aAAcJ,EAAQrqB,mB,kFEzFjCwoC,GAAe,YAYf,IATUl5B,EASX,EATWA,KAEAgE,GAOX,EARWC,UAQX,EAPWD,SAAS8I,EAOpB,EAPoBA,aACNwE,EAMd,kBACR,EC4BuB,YAShB,IAAD,EARNtR,EAQM,EARNA,KACAgE,EAOM,EAPNA,QACA8I,EAMM,EANNA,aAOQuE,EAAMwP,aAAe,UAArBxP,EACR,EAAoC7R,KAA7BnC,EAAP,EAAOA,gBAAgBD,EAAvB,EAAuBA,UACvB,EAAwC2W,oBAAkB,GAA1D,oBAAOolB,EAAP,KAAqBC,EAArB,KACA,EAAwCrlB,qBAAxC,oBAAOslB,EAAP,KAAqBC,EAArB,KACA,EAA8BlrC,KAAtBlC,EAAR,EAAQA,QAAShD,EAAjB,EAAiBA,SACT9C,EAAWM,IAAXN,OACR,EAA2ChB,IAAnCE,EAAR,EAAQA,QAAiBmsB,EAAzB,EAAiB5tB,OACjB,EAAsC6B,IAAMquB,WAA5C,oBAAOwlB,EAAP,KAAoBC,EAApB,KAEA,GADkB9zC,IAAMskC,QAA6B,GACftkC,IAAMquB,SAAgC,CACxE3qB,MAAO,CAAEqS,YAAQlY,GACjB8F,MAAO,CAAEoS,YAAQlY,GACjBq9B,SAAU,MAHd,oBAAO6Y,EAAP,KAAoBC,EAApB,KAMA,EAAsCh0C,IAAMquB,SAAS,CACjD3qB,MAAO,CAAEqS,YAAQlY,GACjB8F,MAAO,CAAEoS,YAAQlY,GACjBq9B,SAAU,KAHd,oBAAO+Y,EAAP,KAAoBC,EAApB,KAMA,EAAwDl0C,IAAMquB,cAA6BxwB,GAA3F,oBAAOs2C,EAAP,KAA6BC,EAA7B,KACA,EAA0Dp0C,IAAMquB,cAA6BxwB,GAA7F,oBAAOw2C,EAAP,KAA8BC,EAA9B,KAEAt0C,IAAMosB,WAAU,WAMZ,OALGxsB,EAAQxC,aAAeC,IAAckkB,UACpC5J,EAAgB,eAAGua,KAAYtyB,SAAW,IAE1C8X,IAEG,WACHA,OAEL,CAAC9X,EAAQxC,aACZ,IAAMm3C,EAAcv0C,IAAMC,YAAN,uCAAkB,WAAOqa,EAAWiE,GAAlB,eAAAhc,EAAA,sDAClC6W,GAAM,eAAgBxZ,EAAQzC,WAAYohB,EAAWjE,GAEjD+D,EAAeD,GACf,CACI9D,OACAgE,UACAD,aAAc,GACd7a,WACAgD,UACA+X,YACA7d,SACA8d,WAAU,OAAE4I,QAAF,IAAEA,OAAF,EAAEA,EAAc5I,WAC1BC,gBAAe,OAAE2I,QAAF,IAAEA,OAAF,EAAEA,EAAc3I,kBAGvCq1B,EAAe,2BAAKD,GAAgBx1B,IAChCA,EAAaa,UACb80B,EAAe,CACXtwC,MAAM,2BAAM2a,EAAaa,SAApB,IAA6Buf,gBAAY5gC,IAC9C8F,MAAM,2BAAM0a,EAAac,SAApB,IAA6Bsf,gBAAY5gC,IAC9Cq9B,SAAU,KAEdgZ,EAAe,CACXxwC,MAAM,2BAAM2a,EAAakB,SAApB,IAA6Bkf,gBAAY5gC,IAC9C8F,MAAM,2BAAM0a,EAAamB,SAApB,IAA6Bif,gBAAY5gC,IAC9Cq9B,SAAU,MA1BgB,2CAAlB,wDA6BjB,CAAC9T,EAAc5gB,EAAShD,EAAUqwC,EAAanzC,EAAQ4d,EAASw1B,EAAgBE,EAAgBE,IAEnG,GAA8C7lB,qBAA9C,sBAAO9C,GAAP,MAAwBipB,GAAxB,MAEMC,GAAwBz0C,IAAMC,YAAN,sBAAkB,oDAAAsC,EAAA,0DAExC,UAAC+X,EAAKwE,iBAAN,aAAC,EAAgBrV,cAAc,UAAC6Q,EAAK0E,iBAAN,aAAC,EAAgBvV,aAAelI,GAAYG,WAFnC,uBAGxCkyC,EAAgBjoB,EAAE,uBAHsB,+BAORroB,GAAMC,WAAWC,SAA7CgF,EAPoC,EAOpCA,YAAaJ,EAPuB,EAOvBA,UAEb1H,EAAW4C,GAAMC,WAAWtC,IAAIP,OAAhCA,OAToC,EAWpB01B,aAAiB5tB,EAAa8R,EAAKwE,UAAUrV,WACjE6Q,EAAK0E,UAAUvV,YADX3C,EAXoC,EAWpCA,OAAQ7F,EAX4B,EAW5BA,IAGX6F,GAAW7F,GAAQmH,EAdoB,wDAkBtCssC,EAAeh0C,EAAOO,GAEtB0zC,EAAsC,CACxCxhC,YAAauhC,EAAQltC,SArBmB,UAwBrBjG,GAAYG,WAAW4pB,mBAAmBqpB,GAxBrB,WAwBtChX,EAxBsC,+BA2BxCvkB,GAAM,WAAYukB,GA3BsB,2BA+BpCpS,EAAoBoS,EAApBpS,gBAERipB,GAAmBjpB,GACnBnS,GAAM,wBAAwBkB,GAlCc,4CAmC7C,CAACA,EAAM5Z,EAAQ8zC,KAIlB,GAAgCnmB,qBAAhC,sBAAOumB,GAAP,MAAiBC,GAAjB,MACA,GAAgCxmB,qBAAhC,sBAAOymB,GAAP,MAAiBC,GAAjB,MACA,GAA2Cr1C,IAAnCE,QAAWrC,GAAnB,GAAmBA,UAAWC,GAA9B,GAA8BA,OAGxBw3C,GAAoBh1C,IAAMC,YAAN,sBAAkB,kDAAAsC,EAAA,yDACpCwpB,IAAkBntB,IAAWY,MADO,oBAG9By1B,EAA4B5S,GAAsBI,IACxD2xB,EAAwBnf,GACxBqf,EAAyBrf,GAEpB1zB,GAAYC,UAAW,UAAC8Y,EAAK0E,iBAAN,aAAC,EAAgBvV,aACtC7J,EAAQxC,aAAeC,IAAckkB,WACpCsyB,GAAgBrwC,EATY,wDAY9ByxC,EAAsBzxC,EAAS8W,EAAK0E,UAAUvV,YAE9CyrC,EAAwC,CAC1C33C,aACA43C,YAAaC,KAAmBC,SAChC7I,YAAalyB,EAAK0E,UAAUvV,YAjBI,UAoBHlI,GAAYC,QAAQ8zC,kBAAkBJ,EAAa13C,IApBhD,wBAoBtB+3C,EApBsB,EAoB5BpwC,KACR0vC,GAAYU,GAENC,EAAUr0B,KAAA,UAAUo0B,EAASj7B,EAAK0E,UAAUvV,mBAAlC,aAAU,EAAqCqgB,KAAe/W,IAAI,KAAOkiC,EAAS92B,UAAU8K,WACtG,IAAM3O,EAAK0E,UAAUvV,WAErBgsC,EAAwC,CAC1Cl4C,UAAWqC,EAAQrC,UACnB43C,YAAaC,KAAmBM,SAChClJ,YAAalyB,EAAK0E,UAAUvV,YA7BI,UA+BHlI,GAAYC,QAAQ8zC,kBAAkBG,EAAaj4C,IA/BhD,iBA+BtBm4C,EA/BsB,EA+B5BxwC,KAER4vC,GAAYY,GAENC,EAAUz0B,KAAUw0B,EAASr7B,EAAK0E,UAAUvV,YAAYqgB,KAAe/W,IAAI,KAAOkiC,EAAS92B,UAAU8K,WACrG,IAAM3O,EAAK0E,UAAUvV,WAE3B2P,GAAM,cAAeo8B,EAAS,YAAaI,GAE3C9B,EAAe,2BAAKD,GAAN,IAAmB2B,UAASI,aAxCN,4CA2C1C,CACEf,GAAaE,GAAajB,EAAgBM,EAAyBE,EACnEvoB,EAAensB,EAAQxC,WAAYG,GAAWC,GAFhD,UAGE8c,EAAK0E,iBAHP,aAGE,EAAgBvV,WAAYjG,EAAUqwC,IAE1C7zC,IAAMosB,WAAW,WACb4oB,OACD,CAACjpB,EAAczR,EAAKy5B,IAIvB,OAAsC1lB,qBAAtC,sBAAOwnB,GAAP,MAAoBC,GAApB,MACMC,GAAwB/1C,IAAMC,YAAY4Z,YAAA,uCAAW,WAAOnX,EAAM4N,EAAMskC,EAAUrpB,EAAgB/nB,EAAS5D,GAAtD,6DAAA2C,EAAA,yDAElDG,GAASc,GAAad,EAAKgB,MAAMqS,QAAWrT,EAAKiB,MAAMoS,QAAWwV,GAAoBqpB,IAAY,OAACh1C,QAAD,IAACA,OAAD,EAACA,EAASzC,YAF1D,oDAMvDic,GAAM,wBAAyB1W,EAAM4N,GAE7B4qB,EAAax4B,EAAbw4B,SAEF8a,EAAe70B,KAAU+Z,GAAUnoB,IAAI,KAAKkW,WAE5CwY,EAAkB,UAATnxB,EAZwC,EAcVhN,GAAMC,WAAWC,SAAtDH,EAd+C,EAc/CA,QAASmF,EAdsC,EActCA,YAAaJ,EAdyB,EAczBA,UAEtB1H,EAAW4C,GAAMC,WAAWtC,IAAIP,OAAhCA,OAhB+C,EAkB/B01B,aAAiB5tB,EAAa9F,EAAKgB,MAAMqS,OAC7DrT,EAAKiB,MAAMoS,QADPjP,EAlB+C,EAkB/CA,OAAQ7F,EAlBuC,EAkBvCA,IAGX6F,GAAW7F,GAAQmH,EArB+B,mDAyBjD6tC,EAAyB7tC,EAAUtB,GAEnC4tC,EAAeh0C,EAAOO,GAEtByC,EAAQF,EAASd,EAAKgB,MAAMqS,QAC5BpS,EAAQH,EAASd,EAAKiB,MAAMoS,QAE5BmgC,EAAW3qB,EAAgBvkB,OAAO,GAClCmvC,EAAW5qB,EAAgBvkB,OAAO,GAElCovC,EAAY1zC,EAAKgB,MAAM+6B,WAAatd,KAAUze,EAAKgB,MAAM+6B,YAC1Dl5B,MAAsB7B,EAAMya,UAA2Bc,QAAQ,EAAG,GAAK,KApCrB,EAqC7BkC,KAAgBi1B,EAAW3U,EAAQyU,EAAUC,IAA/DnZ,OArC+C,EAqCvC1V,MACV+uB,EAAO3zC,EAAKgB,MAAM+6B,WAAa/7B,EAAKgB,MAAM+6B,WAAWxV,WAAa,EAClEqtB,EAAO5zC,EAAKiB,MAAM86B,WAAa/7B,EAAKiB,MAAM86B,WAAWxV,WAAa,EAClEjE,EAASyc,EAAS4U,EAAOC,EAxCwB,EA0CnCC,aAAuBvxB,EACvCyc,EAAQuU,EAAcp2C,EAAQzC,WAAYy3C,EAC1Cl0C,EAAOO,GAAMsqB,EAAiB/nB,EAAiBH,EAAkB,EAAG,GAFhE6zB,EA1C+C,EA0C/CA,QAIJuK,EACA/+B,EAAKiB,MAAM86B,WAAax6B,WAAWqB,aAAM4xB,EAAQsf,WAAWxvC,OAAO,GAAGnC,QACjEkO,IAAI,KAAOpP,EAAMwa,UAAUc,QAAQg3B,EAAWQ,oBAEnD/zC,EAAKgB,MAAM+6B,WAAax6B,WAAWqB,aAAM4xB,EAAQsf,WAAWxvC,OAAO,GAAGnC,QACjEkO,IAAI,KAAOrP,EAAMya,UAAUc,QAAQg3B,EAAWQ,oBAGvDzC,EAAe,CACXtwC,MAAOhB,EAAKgB,MACZC,MAAOjB,EAAKiB,MACZu3B,aAGJ4a,GAAe,CACXpB,UACAxd,YA9DmD,4CAAX,gEAiE7CkD,KAAYsc,MAAO,IAMhBC,GAAqB32C,IAAMC,YAAN,uCAAkB,WAAgBC,GAAhB,iCAAAqC,EAAA,yDAGzCq0C,IAAe,GACVr1C,GAAYG,YAAeH,GAAYC,SAAYq0C,KAAe,OAACj2C,QAAD,IAACA,GAAD,UAACA,EAASnC,gBAAV,aAAC,EAAmBuiB,IAJlD,uBAKrC5G,GAAM,yBAA0B7X,GAAYG,WACxC,eAAgBm0C,IAEpBjC,EAAgBjoB,EAAE,uBAClB+nB,GAAgB,GAEhBkD,IAAe,GAXsB,iCAiBjClC,EAAqBmB,GAArBnB,QAASxd,EAAY2e,GAAZ3e,QAEX2f,EAA6B,CAC/B/0C,QAASwB,GAAMC,WAAWK,OAAO9B,QACjCg1C,QAASpC,EAAQjtC,cAAclJ,KAC/B4U,YAAauhC,EAAQltC,QACrB/J,SAAUmC,EAAQnC,SAASuiB,IAvBU,SA4B/B+2B,EAAoC,CACtCx5C,UAAWqC,EAAQrC,UACnBwhC,YAAa7H,EAAQsf,WAAWxvC,OAAO,GAAGpC,SA9BT,UAgCZrD,GAAYC,QAAQw9B,iBAAiB+X,EAAUn3C,EAAQpC,QAhC3C,eAgC/Bw5C,EAhC+B,OAkC/BC,EAAqC,CACvC15C,UAAWqC,EAAQrC,UACnBwhC,YAAa7H,EAAQsf,WAAWxvC,OAAO,GAAGpC,SApCT,UAsCZrD,GAAYC,QAAQw9B,iBAAiBiY,EAAWr3C,EAAQpC,QAtC5C,eAsC/B05C,EAtC+B,OAwCrChgB,EAAQigB,WAAa,CAACH,EAAWI,WAAYF,EAAWE,YACxDpD,EAAe,2BACRD,GAAgB,CACfrwC,MAAM,2BAAMqwC,EAAYrwC,OAAnB,IAA0B+6B,WAAY,IAC3C96B,MAAM,2BAAMowC,EAAYpwC,OAAnB,IAA0B86B,WAAY,OA5Cd,UA+Cdl9B,GAAYG,WAAW21C,YAAYngB,EAAS2f,EAAOj3C,EAAQpC,QA/C7C,QA+C/BmgC,EA/C+B,OAiDrCvkB,GAAM,yBAA0BukB,IAEhC,UAAKA,EAAS2Z,yBAAd,aAAI,EAAqCC,aACrC3D,EAAgBjoB,EAAE,uBAClBirB,IAAe,KAEfhD,EAAgBjoB,EAAE,wBAClBve,MAxDiC,kDA6DrCkqB,aAAa,EAAD,IACZsf,IAAe,GACfhD,EAAgBjoB,EAAE,uBA/DmB,yBAiErC+nB,GAAgB,GAjEqB,qBAoErCxzC,EAAMqjB,WACND,GAAUpjB,EAAMqjB,WArEqB,gEAAlB,sDAuExB,CAACsyB,GAAa9B,EAAan0C,EAAS+rB,IAEjC6rB,GAAuB7zB,OAAOuI,OAAOxI,GAAUb,IAAxBc,OAAA,IAAAA,CAAA,GACxBjB,KAAOnB,UAAY,CAACo1B,MAEnBc,GAAgBz3C,IAAMC,aAAY,SAACC,GACrCmiB,GAAsBm1B,GAAsB,CAACt3C,MAC9C,CAACs3C,KAGJ,GAAsCnpB,qBAAtC,sBAAOqpB,GAAP,MAAoBC,GAApB,MAEMC,GAAuB53C,IAAMC,YAAY4Z,YAAA,uCAAW,WAAOnX,EAAM4N,EAAMwkC,EAAUvpB,EAAgB/nB,EAAS5D,GAAtD,2DAAA2C,EAAA,yDAEhDk/B,EAAkB,UAATnxB,EAEV9M,GAAad,EAAKgB,MAAMqS,QAAWrT,EAAKiB,MAAMoS,QAC3CwV,GAAoBupB,IAAY,OAACl1C,QAAD,IAACA,OAAD,EAACA,EAASzC,eAC1CskC,QAAoC5jC,IAA1B6E,EAAKgB,MAAM+6B,cACpBgD,QAAoC5jC,IAA1B6E,EAAKiB,MAAM86B,YAPwB,oDAWtDrlB,GAAM,uBAAwB1W,EAAM4N,GAE5B4qB,EAAax4B,EAAbw4B,SAEF8a,EAAe70B,KAAU+Z,GAAUnoB,IAAI,KAAKkW,WAfI,EAiBT3lB,GAAMC,WAAWC,SAAtDH,EAjB8C,EAiB9CA,QAASmF,EAjBqC,EAiBrCA,YAAaJ,EAjBwB,EAiBxBA,UAEtB1H,EAAW4C,GAAMC,WAAWtC,IAAIP,OAAhCA,OAnB8C,EAqB9B01B,aAAiB5tB,EAAa9F,EAAKgB,MAAMqS,OAC7DrT,EAAKiB,MAAMoS,QADPjP,EArB8C,EAqB9CA,OAAQ7F,EArBsC,EAqBtCA,IAGX6F,GAAW7F,GAAQmH,EAxB8B,mDA4BhD6tC,EAAyB7tC,EAAUtB,GAEnC4tC,EAAeh0C,EAAOO,GAEtByC,EAAQF,EAASd,EAAKgB,MAAMqS,QAC5BpS,EAAQH,EAASd,EAAKiB,MAAMoS,QAE5BmgC,EAAW3qB,EAAgBvkB,OAAO,GAClCmvC,EAAW5qB,EAAgBvkB,OAAO,GAElCge,EAASyc,EAAS/+B,EAAKgB,MAAM+6B,WAAa/7B,EAAKiB,MAAM86B,WAErDoZ,EAAapW,EAAS/9B,EAAMya,SAAWxa,EAAMwa,SAE7Ci4B,EAAYj1B,KAAU6D,GAAQzf,MAAM,KAAOsyC,GAAY54B,QAAQ,EAAG,IA1ClB,EA2C5BkC,KAAgBi1B,EAAW3U,EAAQyU,EAAUC,IAA/DnZ,OA3C8C,EA2CtC1V,MA3CsC,EA6ClCwwB,aAAuB9yB,EAAOiE,WAAYwY,EAAQuU,EAAcp2C,EAAQzC,WAAY23C,EACpGp0C,EAAOO,GAAMsqB,EAAiB/nB,EAAiBH,EAAkB,GAD7D6zB,EA7C8C,EA6C9CA,QAGJuK,EACA/+B,EAAKiB,MAAM86B,WAAax6B,WAAWqB,aAAM4xB,EAAQ6gB,WAAWC,SAAS,GAAGnzC,QACnEkO,IAAI,KAAOpP,EAAMwa,UAAUc,QAAQg3B,EAAWQ,oBAEnD/zC,EAAKgB,MAAM+6B,WAAax6B,WAAWqB,aAAM4xB,EAAQ6gB,WAAWC,SAAS,GAAGnzC,QACnEkO,IAAI,KAAOrP,EAAMya,UAAUc,QAAQg3B,EAAWQ,oBAGvDvC,EAAe,CACXxwC,MAAOhB,EAAKgB,MACZC,MAAOjB,EAAKiB,MACZu3B,aAGJyc,GAAe,CACX3yB,SACA0vB,UACAxd,YAjEkD,4CAAX,gEAqE5CkD,KAAYsc,MAAO,IAOtB,GAAwCroB,oBAAS,GAAjD,sBAAO4pB,GAAP,MAAsBrB,GAAtB,MAEA,GAAwCvoB,oBAAS,GAAjD,sBAAO6pB,GAAP,MAAsBC,GAAtB,MAEMC,GAAsBp4C,IAAMC,YAAN,uCAAkB,WAAgBC,GAAhB,6BAAAqC,EAAA,yDAE1C41C,IAAe,GAEf/+B,GAAM,6BAA8BlZ,GAI/BqB,GAAYG,YAAeH,GAAYC,SAAYk2C,KAAe,OAAC93C,QAAD,IAACA,GAAD,UAACA,EAASnC,gBAAV,aAAC,EAAmBuiB,IARjD,uBAStC5G,GAAM,sBAAuB7X,GAAYG,WACrC,eAAgBg2C,IAEpB9D,EAAgBjoB,EAAE,uBAClB+nB,GAAgB,GAChByE,IAAe,GAduB,iCAoBlCzD,EAAqBgD,GAArBhD,QAASxd,EAAYwgB,GAAZxgB,QAEX2f,EAA6B,CAC/B/0C,QAASwB,GAAMC,WAAWK,OAAO9B,QACjCg1C,QAASpC,EAAQjtC,cAAclJ,KAC/B4U,YAAauhC,EAAQltC,QACrB/J,SAAUmC,EAAQnC,SAASuiB,IAGzBq4B,EAAqC,CACvC96C,UAAWqC,EAAQrC,UACnBwhC,YAAa7H,EAAQ6gB,WAAWO,OAAO1zC,SA/BD,UAiCjBrD,GAAYC,QAAQw9B,iBAAiBqZ,EAAWz4C,EAAQpC,QAjCvC,eAiCpCw5C,EAjCoC,OAmC1C9f,EAAQ+H,UAAY+X,EAAWI,WAnCW,UAuCtCh+B,GAAM,YAAa8d,GACnBgd,EAAe,2BACRD,GAAgB,CACfvwC,MAAM,2BAAMuwC,EAAYvwC,OAAnB,IAA0B+6B,WAAY,IAC3C96B,MAAM,2BAAMswC,EAAYtwC,OAAnB,IAA0B86B,WAAY,OA3Cb,UA8Cfl9B,GAAYG,WAAW62C,YAAYrhB,EAAS2f,EAAOj3C,EAAQpC,QA9C5C,QA8ChCmgC,EA9CgC,OAgDtCvkB,GAAM,yBAA0BukB,IAEhC,UAAKA,EAAS6a,yBAAd,aAAI,EAAqCjB,YACrC3D,EAAgBjoB,EAAE,wBAElBioB,EAAgBjoB,EAAE,wBAClBve,MAtDkC,mDA2DtCkqB,aAAa,EAAD,IACZ6gB,IAAe,GACfvE,EAAgBjoB,EAAE,uBA7DoB,yBA+DtC+nB,GAAgB,GA/DsB,8EAAlB,sDAkEzB,CAACgE,GAAazD,EAAar0C,EAAS+rB,IAEjC8sB,GAAoB90B,OAAOuI,OAAOxI,GAAUb,IAAxBc,OAAA,IAAAA,CAAA,GACrBjB,KAAOnB,UAAY,CAAC62B,MAGnBM,GAAmB14C,IAAMC,aAAY,SAACC,GAExCkZ,GAAM,iCAAkCs+B,GAAa,gBAAiBzD,GACtE5xB,GAAsBo2B,GAAmB,CAACv4C,MAC3C,CAACw3C,GAAazD,EAAawE,KAevBpe,GAAsBr6B,IAAMC,aAAY,WAI3C,GAAGqa,GAAQ8M,EAAa,CACpB,IAAQ7I,EAAcuK,KAAdvK,UACRg2B,EAAYj6B,EAAMiE,GAClBnF,GAAM,iBAAkBgO,EAAa3I,iBACrC+1B,GAAmBptB,EAAa3I,iBAChC05B,IAAe,GACfvB,IAAe,MAGrB,CAAEt8B,EAAM8M,IASV,OAPA8S,GAAc,CAACG,0BACfr6B,IAAMosB,WAAU,WACZiO,OAIF,CAAC/f,EAAM8M,IACF,CACHgd,cAAeqQ,GACfd,eACAF,eACAC,kBAEAG,cACAE,cACAE,cACAgE,iBACAC,iBACAS,uBAnS4B,SAACj2C,EAA4B4N,GACzDylC,GAAsBrzC,EAAM4N,EAAMskC,GAAUrpB,GAAgB/nB,EAAS5D,IAmSrEg5C,uBAtI2B,SAACl2C,EAA4B4N,GACxDsnC,GAAqBl1C,EAAM4N,EAAMwkC,GAAUvpB,GAAgB/nB,EAAS5D,IAsIpE84C,oBACAjB,iBACAtD,uBACAE,yBDtiBAwE,CAAY,CACZv+B,OACA8M,eAAc9I,QAASA,GAAoBw6B,IAAaC,UAlBxDpF,EADJ,EACIA,aACAF,EAFJ,EAEIA,aACAC,EAHJ,EAGIA,gBAEAG,EALJ,EAKIA,YACAE,EANJ,EAMIA,YACAE,EAPJ,EAOIA,YACA0E,EARJ,EAQIA,uBACAC,EATJ,EASIA,uBACAF,EAVJ,EAUIA,iBACAjB,EAXJ,EAWIA,cACAQ,EAZJ,EAYIA,cACAC,EAbJ,EAaIA,cACA/D,EAdJ,EAcIA,qBACAE,EAfJ,EAeIA,sBACAjQ,EAhBJ,EAgBIA,cAOEO,EAAY3kC,IAAMC,aAAY,WAEhC,QAAKmnB,GAAiBA,EAAa5I,YAAe4I,EAAa3I,sBAC9B5gB,IAAzBs2C,QAC0Bt2C,IAA1Bw2C,QAKL4D,IAAiBC,SAApB,KAIF,CAAC9wB,EAAaitB,EAAsBA,EAAsB4D,EAAcC,IAG1E,OAAO,uCAEP,eAAC,KAAD,CAAOtU,UAAW+P,EAAwBthC,KAAMohC,EACxC3P,iBAAkBtqB,GAAYmqB,QAAS,WAAK+P,GAAgB,MAEnEp5B,EACG,eAAC,IAAD,0CAAkBsR,IAAlB,IACUwY,cAAeA,EACf4U,eAAgBjF,EAChBkF,gBAAiBhF,EACjBJ,YAAaA,EACbqF,wBAAyBP,EACzBQ,2BAA4BP,EAC5BF,iBAAkBA,EAClBjB,cAAeA,EACf2B,YAAa96B,GAAoBw6B,IAAaC,QAC9C5E,qBAAsBA,EACtBE,sBAAuBA,EACvBgF,oBAAqB1U,IAAYrJ,KAAeiD,QAAQjD,KAAeC,UACvE+d,qBAAsB3U,IAAYrJ,KAAeiD,QAAQjD,KAAeC,aAE7E,eAAChO,GAAA,EAAD,CAAK+L,MAAO,8BE9DnBigB,GAAkC,SAAC,GAAoD,IAAnD74C,EAAkD,EAAlDA,OAAQ8F,EAA0C,EAA1CA,QAASrF,EAAiC,EAAjCA,eAAgBkqB,EAAiB,EAAjBA,OAEvE,GAAI3qB,GAAU8F,EAAS,CACnB,IAAIghB,EAAY9D,GAAUhjB,EAAQ2qB,IAC5BmuB,EAAcr4C,EAAiBkqB,GAOrC,OALI7D,GAAaA,EAAU9jB,QACvB8jB,EAAUtI,QAAU1Y,EAASghB,EAAU9jB,OACvC8jB,EAAUrI,QAAU3Y,EAASghB,EAAU7jB,OACvC6jB,EAAS,SAAiBgyB,GAA4B,IAEnDhyB,I,0BCNTiyB,GAAYnsB,aAAOC,KAAPD,CAAH,yQAGI,qBAAEE,MAAiBC,QACzB,mBAA0B,EAA1B,EAAED,MAAiBC,QAKX,qBAAED,MAAiBksB,YAAYC,MAChC,qBAAEnsB,MAAiBksB,YAAYC,MAI7CC,GAAetsB,aAAOC,KAAPD,CAAH,iSAEC,qBAAEE,MAAiBC,QACzB,mBAA0B,EAA1B,EAAED,MAAiBC,QAMb,qBAAED,MAAiBksB,YAAYC,MAChC,qBAAEnsB,MAAiBksB,YAAYC,MAkBpCE,GAAgBnuB,aAAgB,SAAhBA,EAA0B,YAE2D,IAAD,kCAT7FlR,EAQlBmR,EAC+G,EAD/GA,EAAGxqB,EAC4G,EAD5GA,eAAmByqB,EACyF,kBACtGrC,EAAYiP,eAAZjP,SACP,ED1BuB,SAAqCpoB,GAC5D,IAAMsC,EAAa+4B,YAAc,qCACjC,EAAyC9zB,KAAlClC,EAAP,EAAOA,QAAShD,EAAhB,EAAgBA,SAAUgF,EAA1B,EAA0BA,YAE1B,GADqBsQ,KAAdhV,WAC2C9C,KAA3CN,EAAP,EAAOA,OAAQG,EAAf,EAAeA,UAAmBmuC,EAAlC,EAA0B7wC,OAC1B,EAAuD4b,KAAhDjD,EAAP,EAAOA,eAAwBgjC,EAA/B,EAAuB37C,OAShB+X,EAAgBuD,KAAhBvD,aACP,EAAkClW,IAAMquB,cAAyCxwB,GAAjF,oBAAO0gB,EAAP,KAAkBw7B,EAAlB,KAEA,EAA4C/5C,IAAMquB,SAA4B,IAA9E,oBAAO2rB,EAAP,KAGA,GAHA,KAGgDh6C,IAAMquB,SAA4B,KAAlF,oBAAOghB,EAAP,KAAyBC,EAAzB,KACA,EAAgDtvC,IAAMquB,cAAuCxwB,GAA7F,oBAAOyZ,EAAP,KAAyB2iC,EAAzB,KACA,EAAwCj6C,IAAMquB,cAG/BxwB,GAHf,oBAAOupB,EAAP,KAAqB8yB,EAArB,KAKA,EAA0Bl6C,IAAMquB,SAC5B,CACIppB,KAAM,EACNG,KAAM,EACNC,UAAW,EACXK,QAAS,EACTihB,OAAQ,EACR7hB,iBAAajH,EACbkpB,SAAU,EACVC,SAAU,EACVE,YAAa,EACbD,cAAe,IAXvB,oBAAOkzB,EAAP,KAAcC,EAAd,KAcA,EAAwCp6C,IAAMquB,SAAyB,CACnEnP,aAASrhB,EACTshB,aAASthB,EACT4oB,cAAU5oB,EACV6nB,kBAAc7nB,EACdmG,kBAAcnG,EACdsG,gBAAYtG,EACZuG,kBAAcvG,EACd0G,YAAQ1G,EACR4G,YAAQ5G,EACRiH,iBAAajH,EACb6G,iBAAa7G,EACboH,UAAMpH,EACNuH,UAAMvH,EACNqJ,WAAOrJ,EACP0J,gBAAY1J,EACZkI,SAAKlI,IAhBT,oBAAOw8C,EAAP,KAAqBC,EAArB,KAkBA,EAAoCt6C,IAAMquB,cAAiCxwB,GAA3E,oBAAO+H,EAAP,KAAmB02B,EAAnB,KACA,EAAwBt8B,IAAMquB,SAAqF,CAC/GvP,eAAWjhB,EACXmhB,eAAWnhB,IAFf,oBAAOyc,GAAP,KAAamiB,GAAb,KAIA,GAAsCz8B,IAAMquB,SAA2B,IAAvE,sBAAOksB,GAAP,MAAoBC,GAApB,MAEMjL,GAAmBvvC,IAAMC,aAAY,SAAC6G,GACxC,IAGgB,EAHE4gB,EAAcoB,KAAzBvK,UASP,OAPAw7B,EAAaryB,GACTA,IACqB,QAArB,EAAAuC,YAAA,SAAyB5S,MAAK,SAACgS,GAC3B,IAAIuU,EAAgBxT,GAAqBtjB,EAAQuiB,GACjDimB,EAAoB1R,GAAgC,QAGrDlW,IACR,CAACoB,GAAkBmB,GAAuBG,GAAsB5hB,EAAa8R,KAE1EmgC,GAAcz6C,IAAMC,YAAN,sBAAkB,oCAAAsC,EAAA,2DAC9BhB,GAAYE,aAAe44C,EAAa32C,OAAS22C,EAAa12C,OADhC,uBAEvBub,EAAoBm7B,EAApBn7B,QAASC,EAAWk7B,EAAXl7B,QACVrY,EAHwB,iBAGZoY,QAHY,IAGZA,OAHY,EAGZA,EAAS3gB,KAHG,mBAGK4gB,QAHL,IAGKA,OAHL,EAGKA,EAAS5gB,MAHd,SAIRgD,GAAYE,YAAYiuB,kBAAkB,CAC5D5oB,OAAQA,EACR6oB,SAAUC,KAAgBC,GAC1BC,MAAO,KAPmB,OAIxB4qB,EAJwB,OASxBC,EAAuBD,EAAQ3qB,aAAaroB,KAAI,SAAAsoB,GAAC,kCAChDA,GADgD,IAEnDC,UAAWD,EAAE7d,UACbglB,KAAMC,KAAOpH,EAAE7d,WAAWklB,OAAO,eACjCpD,MAAK,SAAC1xB,EAAG2xB,GAAJ,OAAU3xB,EAAE0tB,UAAYiE,EAAEjE,aACnCuqB,GAAeG,GAde,2CAgBnC,CAACN,IAEJr6C,IAAMosB,WAAU,WACZquB,OACD,CAACA,KAEJz6C,IAAMosB,WAAU,WAAO,IAAD,EACZhD,EAAO,iBAAG3lB,QAAH,IAAGA,OAAH,EAAGA,EAAOk5B,OAAOrzB,cAAjB,aAA2BzL,EACpCwqB,EAAmC,GACvC,EAAyBe,EAAQ3lB,MAAM,gBAAvC,oBAASC,EAAT,KAAgBC,EAAhB,KACA,EAGIyyB,aAAiB5tB,EAAa9E,EAAOC,GAFrC1C,EADJ,EACIA,IACA6F,EAFJ,EAEIA,OAGE8zC,EAAgBrB,GAAgC,CAAC74C,SAAQ8F,UAASrF,iBAAgBkqB,OAAQpqB,IAehG,GAdAq5C,EAAgBM,GAAgC,IAE5Cp0C,GACAi2B,GAAQ,CACJ3d,UAAWtY,EAAS9C,GACpBsb,UAAWxY,EAAS7C,KAKxBuS,GACAq5B,GAAiBzoC,GAGjB7F,GAAO6F,GAAUpG,EAAQ,CAEzBG,IACA,IAAI8hC,EAAU,CACVvX,GAAgB,CAAChC,QAAStiB,EAAQukB,OAAQpqB,EAAKP,YAKnDiO,QAAQ9L,IAAR,UAAgB8/B,IAAUtrB,MACtB,YAEe,IAAD,uBAFXoH,EAEW,EAFXA,gBAAiB5T,EAEN,EAFMA,QAGhB,GAAIrH,EAAU,CACV,IAAMq3C,EAAgB,CAClBr8B,WAAY3T,EAAS/D,GACrB2X,gBAAiBA,GAErB4J,EAAcP,GAAajd,EAAS/D,GAAW+D,EAAS/D,GAAW,IACnEw1B,EAAcjU,GACdiyB,EAAgB,eAAIM,IACpBV,EAAgBW,OAGrBpX,OAAM,SAACvkC,GAEV,MADA6R,QAAQO,IAAIpS,GACL+iB,YAIhB,IAkBH,IAAOoY,GAAsBr6B,IAAMC,aAAY,WAAK,IAAD,IACxC6G,EAAUsvB,aAAiB5tB,EAAD,UAAc8R,GAAKwE,iBAAnB,aAAc,EAAgBrV,WAA9B,UAAoD6Q,GAAK0E,iBAAzD,aAAoD,EAAgBvV,YAA9F3C,OACP,GAAIA,GAAUsgB,GAAgBA,EAAa3I,gBAAkB,CACzD,IAAMiJ,EAAa6nB,GAAiBzoC,GAC9B8gB,EAAqBH,GAAsB3gB,EAAQ4gB,EAAYpQ,EAAkB8P,GACvFgzB,EAASxyB,MAEf,IAiCF,OAhCAsS,GAAc,CAACG,0BAGfr6B,IAAMosB,WAAU,WAAO,IAAD,IACXtlB,EAAUsvB,aAAiB5tB,EAAD,UAAc8R,GAAKwE,iBAAnB,aAAc,EAAgBrV,WAA9B,UAAoD6Q,GAAK0E,iBAAzD,aAAoD,EAAgBvV,YAA9F3C,OACP,GAAIgzC,IAAyBl7C,IAAWY,OAASsH,EAAQ,CAErDmzC,EAAoBnjC,GACpB,IAAM8Q,EAAqBH,GAAsB3gB,EAAQyX,EAAWjH,EAAkB8P,GACtFgzB,EAASxyB,MAGd,CAACkyB,IAEJ95C,IAAMosB,WAAU,WAAO,IAAD,IAClB,GAAI4iB,IAAiBpwC,IAAWY,OAASkB,IAArC,UAA+C4Z,GAAKwE,iBAApD,aAA+C,EAAgBrV,cAA/D,UAA6E6Q,GAAK0E,iBAAlF,aAA6E,EAAgBvV,YAAY,CACzG,IAAMmxC,EAAgBrB,GAClB,CACI74C,SACA8F,UACArF,iBACAkqB,OAAQ,OAAS/Q,GAAKwE,UAAUrV,WAAa6Q,GAAK0E,UAAUvV,aAEpE6wC,EAAgB,uCACTD,GAAiBO,GADT,IAEXh1C,WAAYy0C,EAAaz0C,iBAIlC,CAACopC,IAGG,CACHzwB,YACA47B,QAEAE,eACAjzB,eAEA9M,QACA1U,aACAo0C,iBACA3K,mBACAkL,gBC5LAO,CAAY,CAAC35C,mBATbyE,EADJ,EACIA,WACAwhB,EAFJ,EAEIA,aACA9M,EAHJ,EAGIA,KACA+/B,EAJJ,EAIIA,aACA97B,EALJ,EAKIA,UACAy7B,EANJ,EAMIA,eACA3K,EAPJ,EAOIA,iBACA8K,EARJ,EAQIA,MACAI,EATJ,EASIA,YAEJ,EAAgCv6C,IAAMquB,SAAgB,GAAtD,oBAAO0sB,EAAP,KACA,GADA,KACwB/6C,IAAMquB,UAAa,OAAJzC,QAAI,IAAJA,OAAA,EAAAA,EAAMukB,MAAOvkB,EAAKukB,KAAO,IAAhE,oBAAOA,EAAP,KAAaF,EAAb,KAKM+K,EAAoBh7C,IAAMC,aAAY,SAACkwC,GACzCF,EAAQE,KACT,IAGI8K,EAAYziB,eAAZyiB,SACDC,EAAiBD,EAAQ,UAAGZ,EAAan7B,eAAhB,aAAG,EAAsBzV,YAClD0xC,EAAiBF,EAAQ,UAAGZ,EAAal7B,eAAhB,aAAG,EAAsB1V,YAExD,OAAO,uCACH,eAAC8jB,GAAA,EAAD,CAAKujB,aAAc,EAAnB,SACI,gBAACsK,GAAA,EAAD,CAAa,aAAW,aAAxB,UACI,eAACC,GAAA,EAAD,CAAM1Q,MAAM,gBAAgB2Q,KAAK,qBAAjC,SACK3vB,EAAE,kBAEP,gBAAC+e,GAAA,EAAD,CAAYC,MAAO,gBAAiBtW,QAAS,OAAQ0E,WAAY,SACrDD,eAAgB,SAD5B,oBAEExe,EAAKwE,iBAFP,aAEE,EAAgBrV,WAFlB,cAE+B6Q,EAAK0E,iBAFpC,aAE+B,EAAgBvV,mBAGvD,gBAAC8jB,GAAA,EAAD,CAAK8G,QAAS,OAAQE,KAAM,EAAGD,cAAe,MAA9C,UAEI,gBAAC3G,GAAA,EAAD,CAAM6G,WAAS,EAACuP,YAAa,EAAGC,aAAc,UAAWC,UAAW,SAAUC,SAAU,SAAxF,UACI,eAACvW,GAAA,EAAD,CAAM9mB,MAAI,EAAC4tB,GAAI,GAAIwE,UAAW,EAA9B,SACI,eAAC,KAAD,sDACOrN,GADP,IACaD,KACNrR,GAFP,IAGI1U,aACAsB,OAAO,QAIf,gBAACymB,GAAA,EAAD,CAAM9mB,MAAI,EAAC4tB,GAAI,GAAIJ,QAAS,OAAQC,cAAe,SAAUwE,eAAgB,gBAA7E,UACI,eAACvL,GAAA,EAAD,CAAKgH,KAAM,EAAG+E,MAAO,OAAQH,UAAW,IAAKC,UAAW,IAAxD,SACI,eAAC,IAAD,CACI9oB,KAAMulB,IAAUC,MAChBpzB,KAAM63C,EACN/gB,UAAS,UAAElf,EAAK0E,iBAAP,aAAE,EAAgBvV,WAC3BiwB,WAAS,MAGjB,gBAACnM,GAAA,EAAD,CAAK8G,QAAS,OAAQC,cAAe,MAAOwE,eAAgB,gBAA5D,UACI,gBAAC2gB,GAAD,CAAWlJ,SAAU,EAAGlc,QAAS,OAAQC,cAAe,SAAxD,UACI,eAACoW,GAAA,EAAD,CAAYD,UAAW,IAAKE,MAAO,gBAAiBtW,QAAS,OACjDyc,aAAc,IAD1B,SAGKnlB,EAAE,wBAEP,gBAAC+e,GAAA,EAAD,CAAYD,UAAW,OAAQpW,QAAS,OAAQC,cAAe,MACnDwE,eAAgB,gBAAiBC,WAAY,SAC7CM,MAAO,CAACkiB,cAAe,cAAe5Q,MAAO,cAFzD,UAGI,eAACpd,GAAA,EAAD,CAAKkd,UAAW,OAAQ5V,UAAW,YAAaxC,OAAQ,6BACnDiH,MAAO,6BAA8BP,WAAY,SACjDD,eAAgB,SAFrB,SAGKoiB,EACG,eAAC,IAAD,CAAkBM,KAAMN,EAAUh6B,EAAGu6B,KAAMP,EAAU75B,EACnCq6B,UAAWR,EAAU7oB,OACrBspB,SAAUT,EAAU5hB,MAAOlnB,KAAM,GACjCw4B,QAAQ,WACRgR,IAAG,OAAEvB,QAAF,IAAEA,GAAF,UAAEA,EAAcn7B,eAAhB,aAAE,EAAuBzV,WAE5BoyC,IAAK,6JACrB,eAACC,GAAA,EAAD,CAAQlR,QAAQ,WAAWgR,IAAG,OAAEvB,QAAF,IAAEA,GAAF,UAAEA,EAAcn7B,eAAhB,aAAE,EAAuBzV,WAC/C4vB,MAAO,CACHhH,OAAQ,8BACRiH,MAAO,8BAGXuiB,IAAK,qCAEvB,gBAACnR,GAAA,EAAD,CAAY5R,eAAgB,SAAUzE,QAAS,OAA/C,UACI,eAACqW,GAAA,EAAD,CAAYD,UAAW,OAAQxQ,UAAW,QAAS5H,OAAQ,GAAI0pB,WAAY,OAA3E,SACKnL,aAA4ByJ,EAAa91C,OAAQ,KACtD,eAACmmC,GAAA,EAAD,CAAYD,UAAW,OAAQ+C,WAAY,EAAGvT,UAAW,QAAS5H,OAAQ,GAC9D0pB,WAAY,OADxB,mBAGK1B,EAAan7B,eAHlB,aAGK,EAAsBzV,mBAMnC,gBAACihC,GAAA,EAAD,CAAYD,UAAW,OAAQpW,QAAS,OAAQC,cAAe,MACnDwE,eAAgB,gBAAiBC,WAAY,SAAUE,UAAW,EAClEI,MAAO,CAACkiB,cAAe,cAFnC,UAUI,eAAChuB,GAAA,EAAD,CAAKkd,UAAW,OAAQ5V,UAAW,YAAaxC,OAAQ,6BACnDiH,MAAO,6BAA8BP,WAAY,SACjDD,eAAgB,SAFrB,SAEgCqiB,EAC5B,eAAC,IAAD,CAAkBK,KAAML,EAAUj6B,EAAGu6B,KAAMN,EAAU95B,EAAGq6B,UAAWP,EAAU9oB,OAC3DspB,SAAUR,EAAU7hB,MAAOlnB,KAAM,GACjCw4B,QAAQ,WACRgR,IAAG,OAAEvB,QAAF,IAAEA,GAAF,UAAEA,EAAcl7B,eAAhB,aAAE,EAAuB1V,WAE5BoyC,IAAK,6JACrB,eAACC,GAAA,EAAD,CAAQlR,QAAQ,WAAWgR,IAAG,OAAEvB,QAAF,IAAEA,GAAF,UAAEA,EAAcl7B,eAAhB,aAAE,EAAuB1V,WAC/C4vB,MAAO,CACHhH,OAAQ,6BACRiH,MAAO,8BAGXuiB,IAAK,qCACnB,gBAACnR,GAAA,EAAD,CAAY5R,eAAgB,SAAUzE,QAAS,OAA/C,UACI,eAACqW,GAAA,EAAD,CAAYD,UAAW,OAAQxQ,UAAW,QAAS5H,OAAQ,GAAI0pB,WAAY,OAA3E,SACKnL,aAA4ByJ,EAAa51C,OAAQ,KACtD,eAACimC,GAAA,EAAD,CAAYD,UAAW,OAAQ+C,WAAY,EAAGvT,UAAW,QAAS5H,OAAQ,GAC9D0pB,WAAY,OADxB,mBAGK1B,EAAal7B,eAHlB,aAGK,EAAsB1V,sBAQvC,gBAACgwC,GAAD,CAAWlJ,SAAU,EAAGlc,QAAS,OAAQC,cAAe,SAAxD,UACI,eAACoW,GAAA,EAAD,CAAYD,UAAW,IAAKE,MAAO,gBAAiBtW,QAAS,OAA7D,SAEK1I,EAAE,mBAEP,eAAC+e,GAAA,EAAD,CAAYE,QAAS,KAAM3R,UAAW,EAC1BwR,UAAW,OADvB,SAEKlhB,IAAamnB,IAASC,OAASpG,IAASC,OAASoG,aAA4BhrC,GAAcA,EAAW2iB,YAAc3iB,EAAW2iB,YAAwB,EAAG,GACrJgiB,IAASsG,KAAOD,aAA4BhrC,GAAcA,EAAW0iB,UAAY1iB,EAAW0iB,UAAsB,EAAG,QAInI,gBAACmxB,GAAD,CAAWlJ,SAAU,EAAGlc,QAAS,OAAQC,cAAe,SAAxD,UACI,eAACoW,GAAA,EAAD,CAAYD,UAAW,IAAKE,MAAO,gBAAiBtW,QAAS,OAA7D,SAEK1I,EAAE,cAGP,gBAAC+e,GAAA,EAAD,CAAYE,QAAS,KAAM3R,UAAW,EAC1BwR,UAAW,OADvB,cACsE,qBAA9B4P,EAAar2C,aAA+B+kC,IAChFxf,IAAamnB,IAASC,OAASpG,IAASC,OAASoG,aAA4ByJ,EAAar2C,aAAc,GAAKumC,IAASsG,KAAOD,aAA4ByJ,EAAal2C,WAAak2C,EAAal2C,WAAa,EAAG,SAKxN,gBAACs1C,GAAD,CAAWlJ,SAAU,EAAGlc,QAAS,OAAQC,cAAe,SAAxD,UACI,eAACoW,GAAA,EAAD,CAAYD,UAAW,IAAKE,MAAO,gBAAiBtW,QAAS,OAA7D,SAEK1I,EAAE,cAEP,gBAAC+e,GAAA,EAAD,CAAYE,QAAS,KAAM3R,UAAW,EAC1BwR,UAAW,OADvB,cACiC4P,EAAat0C,IAAMs0C,EAAat0C,IAAMgjC,IADvE,aAKR,gBAACxb,GAAA,EAAD,WACI,eAACuH,GAAA,EAAD,CAAMxQ,MAAOy2B,EAEP,aAAW,cAFjB,SAII,eAAC/lB,GAAA,EAAD,aAAKC,MAAOtJ,EAAE,aA9LtBnR,EA8LiD,EA7L1D,CACHof,GAAG,cAAD,OAAgBpf,GAClB,gBAAgB,YAAhB,OAA6BA,SA6Lb,eAAC6S,GAAD,CAAYgM,MAAO,CAACJ,UAAU,GAAD,OAAY,EAAPxL,KAAL,OAA7B,SAEkB,IAAbstB,EAAiB,eAAC,IAAD,CACd1lB,QAAS2kB,EACT/I,iBAAkB+J,EAAmB7K,KAAMA,IAC1C,eAAC,IAAD,CAAgB9a,QAASga,EAAkB4B,iBAAkB+J,EAC7C7K,KAAMA,eAS3C,eAAC5iB,GAAA,EAAD,CAAK8G,QAAS,OAAQgF,MAAO,CAAC8K,SAAU,yBAAxC,SACI,gBAACpW,GAAD,WACI,eAACR,GAAA,EAAD,CAAKsH,UAAW,sBAAhB,SACI,eAAC,GAAD,CAAcva,KAAMA,EAAMiE,UAAWA,EAAW6I,aAAcA,MAE9B,qBAA5BizB,EAAa9yC,WAA6B,GAC9C,gBAACqyC,GAAD,CAActJ,SAAU,EAAGC,SAAU,IAAWlc,QAAS,OAC3CC,cAAe,SAD7B,UAEI,gBAAC/G,GAAA,EAAD,CAAK8G,QAAS,OAAQC,cAAe,MAAOwE,eAAgB,gBAA5D,UACI,gBAAC4R,GAAA,EAAD,CAAYrW,QAAS,OAAQC,cAAe,SAAUmW,UAAW,MAAjE,UACI,eAACC,GAAA,EAAD,CAAYE,QAAS,QAASH,UAAW,KAAME,MAAO,gBAAtD,SACKhf,EAAE,iBAEP,eAAC+e,GAAA,EAAD,CAAYE,QAAS,QAASH,UAAW,OAAQE,MAAO,cAAxD,SACwC,qBAA5B0P,EAAa9yC,WAA6BwhC,IAAgB,uCAC9D,gBAAC2B,GAAA,EAAD,CACID,UAAW,OADf,UACwB4P,EAAa5zB,SAAWmqB,aAA4ByJ,EAAa5zB,SAASf,cAAgBqjB,IADlH,OAEA,eAAC2B,GAAA,EAAD,CACID,UAAW,OADf,mBACwB4P,EAAa5zB,gBADrC,iBACwB,EAAuB3hB,mBAD/C,aACwB,EAAoC2E,qBAIxE,gBAACihC,GAAA,EAAD,CAAYrW,QAAS,OAAQC,cAAe,SAAUyE,WAAY,WACtD0R,UAAW,MADvB,UAEI,eAACC,GAAA,EAAD,CAAYE,QAAS,QAASH,UAAW,KAAME,MAAO,gBAAtD,SACKhf,EAAE,mBAEP,eAAC+e,GAAA,EAAD,CAAYE,QAAS,QAASH,UAAW,OAAQE,MAAO,cAAxD,SAE6B,qBAAjBwP,EAAMxzB,OAAyBoiB,IAAgB,uCAEnD,gBAAC2B,GAAA,EAAD,CACID,UAAW,OADf,cACyBmG,aAA4BuJ,EAAMxzB,QAD3D,OAEA,gBAAC+jB,GAAA,EAAD,CACID,UAAW,OADf,wBACyB4P,EAAa5zB,gBADtC,iBACyB,EAAuB3hB,mBADhD,aACyB,EAAoC2E,yBAK7E,eAACihC,GAAA,EAAD,CAAYzQ,UAAW,aAAc2Q,QAAS,QAASD,MAAO,gBAClDF,UAAU,OAAOxR,UAAW,EADxC,SAEwC,qBAA5BohB,EAAa9yC,WAA6BokB,EAAE,sBAC9C,uCACGA,EAAE,aADL,KAEE,2CAAI,IAAMyL,KAAM,UAACijB,EAAa5zB,gBAAd,aAAC,EAAuBV,SAASC,MAAMqR,OAAO,KAAO,MAAQD,KAAM,UAACijB,EAAa5zB,gBAAd,aAAC,EAAuBV,SAASG,IAAImR,OAAO,8BC9S1J2kB,GAAa,WACtB,MAAsD16C,KAA/CH,EAAP,EAAOA,eAAsB86C,EAA7B,EAAsB99C,OACtB,EAAuCuB,IACvC,GADA,EAAOE,QAAP,EAAezB,OACY6C,KAApBN,EAAP,EAAOA,OAAOG,EAAd,EAAcA,UACd,EAA4Cb,IAAMquB,SAAoEltB,GAAtH,oBAAO+6C,EAAP,KAAuBC,EAAvB,KAmBA,OAjBAn8C,IAAMosB,WAAU,WACP1rB,GAAyC,IAA/BijB,OAAO+N,KAAKhxB,GAAQsK,QAC/BnK,MAEL,IAEHb,IAAMosB,WAAU,WACT6vB,IAAyBr9C,IAAWY,OACnC28C,EAAkBh7C,KAEvB,CAAC86C,IAOG,CACH96C,eAAe+6C,IClBjBE,GAAqB9uB,aAAOC,KAAPD,CAAH,uJAWX+uB,IAHUC,KAEH5wB,aAAgB,CAAC,SAAS,UAAW,CAAE8lB,SAAS,GAAhD9lB,CAAwDomB,MAC9CpmB,aAAgB,SAAU,CAAE8lB,SAAS,GAArC9lB,EAA6C,YAA6B,IAAD,IAAzBC,EAAyB,EAAzBA,EAMnExqB,EAAkB66C,KAAlB76C,eACHsC,EAAa+4B,YAAc,CAAC,mBAAmB,WAC7C1P,EAAQ,iBAAGrpB,QAAH,IAAGA,OAAH,EAAGA,EAAOk5B,OAAO91B,YAAjB,QAAyB,QACnC01C,EAAiB/f,YAAc,CAAC,mCAChClzB,OAAazL,EASjB,OARI0+C,IAAS,OAAIA,QAAJ,IAAIA,GAAJ,UAAIA,EAAW5f,cAAf,aAAI,EAAmB3vB,OAAkC,UAA1BuvC,EAAU5f,OAAO91B,OAItDyC,EAHAizC,EAAU5f,OAAOrzB,OAGVizC,EAAU5f,OAAOrzB,OAFjB,WAOV,uCACMA,GAAU,eAACikB,GAAA,EAAD,CAAK8G,QAAS,OAAQC,cAAe,SAAWC,KAAM,EAAG0F,UAAW,aAApE,SACR,eAAC4f,GAAD,CAAe14C,eAAgBA,OAGjCmI,GAAU,gBAAC8yC,GAAD,WAMR,eAAC1R,GAAA,EAAD,CACIE,QAAS,KACTH,UAAW,MACXgG,WAAY,SACZxX,UAAW,EACX6X,aAAc,EALlB,SAMEnlB,EAAE,6BACJ,eAAC4B,GAAA,EAAD,CAAK4L,UAAW,IAAK9E,QAAS,OAAQ0E,WAAY,UAAWD,eAAgB,UAAwCG,UAAW,EAAG1E,KAAM,EAAGuc,aAAc,EAA1J,SACmB,UAAbhkB,IAAyBxjB,GAAY,eAAC4oC,GAAD,CAAY/wC,eAAgBA,gB,+BCpDjF8wC,GAAgB3kB,aAAOC,KAAPD,CAAH,6FAcbkvB,GAAcx8C,IAAM8lC,KAAK9lC,IAAMy8C,YAAW,SAACv8C,EAA8D2mC,GAC3G,IAAMvsB,EAAI,UAAMpa,EAAM4e,UAAUvgB,KAAtB,YAA8B2B,EAAM8e,UAAUzgB,MACxD,OAAO2B,EAAQ,eAAC,IAAD,yBAAS2mC,IAAKA,GAAS3mC,GAAvB,IAA8BssB,YAAa,kBAAMtsB,EAAMssB,YAAYlS,OAAW,mCAG3FoiC,GAAU,YAA+G,IAAzEn3B,EAAwE,EAAxEA,mBAC9CsN,EAAUC,cACR6pB,EAAS38C,IAAMC,aAAY,SAACqa,GAC1BuY,GACAA,EAAQhY,KAAR,oCAA0CP,MAE/C,CAACuY,IAEJ,OAAO,uCAAGtN,EAAmBva,OAASua,EAAmB7d,KAAI,SAACb,EAAuB2T,GAAxB,OACzD,eAACmT,GAAA,EAAD,CAAM9mB,MAAI,EAAC4tB,GAAI,GAAI4b,GAAI,EAAGuM,GAAI,EAA9B,SACI,eAACJ,GAAD,aAAahwB,YAAamwB,GAAY91C,KADJ2T,MAGtC,gBAAC+S,GAAA,EAAD,CAAKgH,KAAM,EAAGF,QAAS,OAAQ0E,WAAY,SAAUD,eAAgB,SAAUxE,cAAe,SAA9F,UACA,eAAC,IAAD,CAAcjC,OAAQ,oBAAqB4G,UAAW,GAAI5E,QAAS,OAAQ6P,SAAU,SAAUnL,WAAY,SAAUD,eAAgB,SACvHxE,cAAe,SAAUjb,QAAS,WAC5C,OAAO,eAACwjC,GAAA,EAAD,CAAOC,QAAQ,oBAAf,iCAHX,OAJG,UAaEC,GAAarxB,aAAgB,SAAhBA,EAA0B,YAKxC,EAHQsxB,SAGP,IAHiBrxB,EAGlB,EAHkBA,EAK1B,GAFQ,kBCjDkB,YAOxB,IALExqB,EAKH,EALGA,eAMG87C,EAAuBljC,KAI9B,EAAoD/Z,IAAMquB,SAAiC,IAA3F,oBAAO9I,EAAP,KAA2B23B,EAA3B,KAGA,EAA4Dl9C,IAAMquB,SAC9D,IADJ,oBAAO8uB,EAAP,KAA+BC,EAA/B,KA+EA,OAxEAp9C,IAAMosB,WAAU,WACTjrB,GAAkBwiB,OAAO+N,KAAKvwB,GAAgB6J,OAAO,IAIhDkyC,EAAsB93B,GAClB,CACIjkB,iBACAmP,KAAM,aACNgV,sBAAuB,CAACM,KAAsBy3B,WAAYz3B,KAAsBC,aACjFo3B,EAAoBnmC,iBAE3BsmC,EACIh4B,GACI,CACIjkB,iBACAmP,KAAM,aACNgV,sBAAuB,CAACM,KAAsBS,YAC/C42B,EAAoBnmC,oBAKzC,CAAC3V,IACHnB,IAAMosB,WAAU,WAC2B,UAA/B6wB,EAAoB9+C,OAEpB8+C,EAAoB19C,cACkB,SAA/B09C,EAAoB9+C,SAC3B8+C,EAAoB19C,cACpB29C,EACI93B,GACA,CACIjkB,iBACAmP,KAAM,aACNgV,sBAAuB,CAACM,KAAsBy3B,WAAYz3B,KAAsBC,aACjFo3B,EAAoBnmC,iBAE3BsmC,EACIh4B,GACI,CACIjkB,iBACAmP,KAAM,aACNgV,sBAAuB,CAACM,KAAsBS,YAC/C42B,EAAoBnmC,oBAwBvC,CAACmmC,EAAoB9+C,SAIlB,CACHonB,qBACA43B,0BD1CAG,CAAe,CAACn8C,eAJK66C,KAAlB76C,kBAEHokB,EADJ,EACIA,mBACA43B,EAFJ,EAEIA,uBAEJ,EAAgCn9C,IAAMquB,SAAgB,GAAtD,oBAIMkvB,GAJN,UAIqB,sBAAOh4B,GAAP,YAA8B43B,KAEnD,OAAQ,gBAAC,GAAD,WAOA,eAACzS,GAAA,EAAD,CACQE,QAAS,KACTH,UAAW,MACXgG,WAAY,SACZxX,UAAW,EACX6X,aAAc,EALtB,SAMMnlB,EAAE,0BACR,eAACgC,GAAA,EAAD,CAAM6G,WAAS,EAAC4b,QAAS,EAAzB,SACI,eAAC,GAAD,CAAS7qB,mBAAoBg4B,Y,0BExDhCC,GAA0B9xB,aAAgB,SAAhBA,EAA0B,YASxC,IAR6CiY,EAQ9C,EAR8CA,QAGAhY,GAK9C,EAP8CtZ,KAO9C,EAL8CsZ,GACGC,EAIjD,kBAEpB,EAOIlsB,IANAE,EADJ,EACIA,QACAO,EAFJ,EAEIA,cACAG,EAHJ,EAGIA,cACAP,EAJJ,EAIIA,aAEQgsB,GANZ,EAKIxsB,YALJ,EAMIpB,QAEJ,EAAwD2a,KAAjD9M,EAAP,EAAOA,aAAuB9N,EAA9B,EAAqB4D,QACrB,GADA,EAAwC+J,aAC0BmgB,gBAAlDyxB,EAAhB,EAAO5gC,OAAS4gC,cAAgB36B,EAAhC,EAAgCA,eAAgBK,EAAhD,EAAgDA,eAChD,EAAkCnjB,IAAMquB,SAAiB,IAAzD,oBAAOqvB,EAAP,KAAkBC,EAAlB,KACA,EAAoC39C,IAAMquB,UAAkB,GAA5D,oBAAOuvB,EAAP,KAAmBC,EAAnB,KACMC,EAAmB99C,IAAMC,YAAN,sBAAkB,8BAAAsC,EAAA,sEACjCgW,KAAgBwlC,WADiB,UAEvC59C,EAAc,CAACpC,YAAaC,IAAiB+/C,YAEzCxlC,KAAgBylC,YAJmB,6BAKnB32C,OALmB,mBAKNkR,KAAgBsH,gBALV,aAKN,EAA0Bo+B,IAAIC,aALxB,2BAK7Bp8C,GAL6B,iBAMtB5D,GACT8N,EAAa,CAAClK,QAAUA,GAAWA,IAAY0S,KAAQC,OAAS3S,EAAqB0S,KAAQG,UAP9D,+DAWxC,IACGwpC,EAAwBn+C,IAAMC,YAAN,sBAAkB,8BAAAsC,EAAA,sEACtCgW,KAAgBgU,gBADsB,UAE5CpsB,EAAc,CAACpC,YAAaC,IAAiBuuB,iBAEzChU,KAAgBylC,YAJwB,6BAKxB32C,OALwB,mBAKXkR,KAAgBsH,gBALL,aAKX,EAA0Bo+B,IAAIC,aALnB,2BAKlCp8C,GALkC,iBAM3B5D,GACT8N,EAAa,CAAClK,QAAUA,GAAWA,IAAY0S,KAAQC,OAAS3S,EAAqB0S,KAAQG,UAPzD,+DAW7C,IAEH,EAAoD3U,IAAMquB,cAAwDxwB,GAAlH,oBAAOugD,EAAP,KAA2BC,EAA3B,KACAjyB,qBAAU,YACa,IAAfwxB,IAAiG,IAA1E,CAACh/C,IAAWY,OAAOib,WAAU,SAACsW,GAAD,OAAiBA,IAAQhF,OAC7E3S,GAAM,4BACNykC,GAAc,QACahgD,IAAvBugD,GACAA,EAAmBE,cAI5B,CAACvyB,EAAe6xB,IAEnB,IAAMW,EAA6B,CAAC,2BAEzBC,KAAoB,IAFI,IAG3BC,aAAcz+C,IAAMC,YAAN,sBAAkB,sBAAAsC,EAAA,sDACxB3C,EAAQ7B,cAAgBygD,KAAoB,GAAI53C,IAChDkc,EAAe,CAACC,QAAQ,KAExB27B,KAAeC,eAAe,GAAI,uBAClC77B,EAAe,CAACC,QAAQ,EAAMC,KAAMC,KAAkB27B,qBACtDP,EAAsB,CAACC,SAAUR,IACjCD,GAAc,IAPU,2CAU7B,CAACj+C,MAbuB,2BAgBxB4+C,KAAoB,IAhBI,IAiB3BC,aAAcz+C,IAAMC,YAAN,sBAAkB,sBAAAsC,EAAA,sDAC5Bm8C,KAAeC,eAAe,GAAI,uBAClC77B,EAAe,CAACC,QAAQ,EAAMC,KAAMC,KAAkB47B,0BACtDR,EAAsB,CAACC,SAAUH,IACjCN,GAAc,GAJc,2CAK7B,CAACj+C,OAKNk/C,EAAmB9+C,IAAMC,aAAY,YAAoE,EAAlEqQ,KAAmE,IACrGotC,EADoG,EAA5DqB,KACxCrB,UACHA,IACAC,EAAaD,GACb56B,EAAe,CAACC,QAAQ,EAAMC,KAAMC,KAAkB+7B,yBAE3D,IACH,EAA0C3wB,oBAAS,GAAnD,oBAAO4wB,EAAP,KAAsBC,EAAtB,KACAC,aAAe,CAACL,qBAChB,IAAMM,EAAep/C,IAAMK,SAAQ,WAC3B,MAAO,CAAC,aAAa,iBAAiBka,SAAS3a,EAAQxC,iBAAeS,EAClE,WAEI,OADAilB,EAAe,CAACC,QAAQ,IAChBnjB,EAAQxC,YACZ,IAAK,YACL,IAAK,SACD+lB,EAAe,CAAEJ,QAAQ,EAAMC,KAAKI,IAAYC,aAChD,MACJ,IAAK,aACDF,EAAe,CAAEJ,QAAQ,EAAMC,KAAKI,IAAYi8B,aAChD,MACJ,IAAK,aACDl8B,EAAe,CAAEJ,QAAQ,EAAMC,KAAKI,IAAYzB,gBAKtE,CAAC/hB,EAAQujB,IACLm8B,EAAat/C,IAAMK,SAAQ,WAAO,IAAD,EACnC,OAAOsjB,OAAOqkB,QAAP,KAAArkB,OAAA,IAAAA,CAAA,EACDV,KAAkBC,SAAY,CAACq8B,KAAM,eAAC,IAAD,aAAcC,QAAS,KAAMjB,YAAaA,EACnCkB,aAAc7/C,EAAQ7B,aAD7B,aAC+C4tB,KAAMC,KACxF8zB,OAAON,IAHRz7B,OAAA,IAAAA,CAAA,EAIDV,KAAkB27B,mBAAsB,CAACW,KAAM,eAAC,IAAD,4BAAsB5zB,KAAMC,OAJ1EjI,OAAA,IAAAA,CAAA,EAKDV,KAAkB47B,wBAA2B,CAACU,KAAM,eAAC,KAAD,4BAA2B5zB,KAAMC,OALpFjI,OAAA,IAAAA,CAAA,EAMDV,KAAkB+7B,oBAAuB,CAACO,KAAM,eAAC,KAAD,aAAqBI,OAAQ,WAC3E77B,GAAgB45B,GAChBwB,GAAiB,IAClB1xC,IAAKkwC,GAH0C,aAG1B/xB,KAAMC,KAAU8zB,OAAO,WACvC58B,EAAe,CAACC,QAAQ,EAAKC,KAAKC,KAAkBC,cAVzDS,OAAA,IAAAA,CAAA,EAYDV,KAAkB28B,eAAkB,CAACL,KAAM,eAAC,KAAD,aAAgB5b,QAAS,SAAC70B,GACnExO,GAAc,GACdqjC,EAAQ70B,IAE0C2wC,aAAc7/C,EAAQ7B,aAJ/B,aAIiD4tB,KAAMC,OAhBjGjI,OAAA,IAAAA,CAAA,EAiBDV,KAAkB48B,cAAiB,CAACN,KAAM,eAAC,IAAD,wCAAmB5zB,KAAMC,IAAzB,IAAgCk0B,QAAS//C,KAAgB2/C,OAAO,WACpG58B,EAAe,CAACC,QAAQ,EAAKC,KAAKC,KAAkBC,cAlBzD,MAqBR,CAACw6B,EAAW99C,EAAS+rB,EAAGC,EAAM+X,IACjC,OAAO,uCACH,eAAC,IAAD,CAAoBtxB,KAAMorC,EAAc16B,OAAQ4gB,QAAS,SAAC70B,GACtDxO,GAAc,GAEdqjC,EAAQ70B,IACTixC,UAAWT,EAAYI,OAAQJ,EAAY7B,EAAcz6B,MAAO08B,OAAQ18B,KAAMy6B,EAAcz6B,OAC/F,eAAC,KAAD,CAAO4gB,UAAWjY,EAAE,gCAAiCtZ,KAAM4sC,EACpDnb,iBAAkBtqB,GAAYmqB,QAAS,WAAKub,GAAiB,IAASrb,SAAU,kBClIxF,SAAemc,KAAtB,gC,8CAAO,8CAAAz9C,EAAA,yDAEGqB,EAASN,GAAMC,WAAWK,OAC1BhE,EAAU0D,GAAMC,WAAW3D,QAEjCwZ,GAAM,gBAAiBxZ,GAEnBmE,EAAuB,CAAEk8C,KAAM9mC,GAAiB+mC,SAPjD,WAWK3+C,GAAYC,SAAWD,GAAYE,aAAemC,EAAOiI,cAAgB0M,KAAgBsH,UAAYjgB,GAC/E,YAAnBgE,EAAO9B,SAAiD,YAAxBlC,EAAQ7B,aAZhD,wBAaWoiD,EAAS,CACX,IAAO,kBACP,IAAO,uBACP,KAAQ,UACR,IAAO,wBAjBhB,SAoBgC5+C,GAAYE,YAAYugB,WAAW,CAC1DvM,MAAO7V,EAAQzC,aArBxB,qBAwBgB,QAJHujB,EApBb,EAoBaA,eAIG,IAAPA,OAAA,EAAAA,EAASjL,UAAT,OAAkBiL,QAAlB,IAAkBA,OAAlB,EAAkBA,EAASnjB,WAxBpC,wBA0BeQ,EAAc6B,EAAQ7B,YA1BrC,oBA6BoCojB,KAEf5I,KAAgBsH,SAChBa,EAAQjL,MACR7R,EAAOiI,aAAaiU,gBACpBY,EAAQ9iB,MACRG,GAnCrB,eA6BmBN,EA7BnB,iBAuCuBy5B,EAAsC,CACxCoI,SAAU17B,EAAOiI,aAAaiU,gBAC9BrK,MAAOiL,EAAQjL,MACflY,UAAWmjB,EAAQnjB,UACnBG,UAAW,CAAEwjB,EAAGzjB,EAAS2iD,WAAY/+B,EAAG5jB,EAAS4iD,YACjDC,OAAQ,CAAE17C,QAAS,EAAGC,OAAQs7C,EAAM,KACpCrgB,WAAYnF,GnEzCpB,ImE0CQ/8B,MAAO8iB,EAAQ9iB,OAGnBwb,GAAM,OAAQ8d,GAjD/B,UAmDqD31B,GAAYC,QAAQrB,cAAc,CAClE+2B,UACAqpB,KAAMhoC,KAAgBsH,SACtB/d,QAAS8B,EAAO9B,QAChB0+C,WAAYziD,IAvDjC,QAmDuB0iD,EAnDvB,OA0DiBrnC,GAAM,yBAA0BqnC,GAE5BA,EAAsBC,WACtB38C,EAAOk8C,KAAO9mC,GAAiBwnC,kBAC/B58C,EAAOrB,KAAO+9C,EAAsBC,WAEpC38C,EAAOrB,KAAO,CACVi7B,SAAU8iB,EACVhjD,YAlEzB,mDAuEiBsG,EAAOk8C,KAAO9mC,GAAiBwnC,kBAC/B58C,EAAOrB,KAAP,KACA40B,aAAa,EAAD,IAzE7B,2DA6EavzB,EAAOk8C,KAAO9mC,GAAiBynC,iBAC/B78C,EAAOrB,KAAP,KACA40B,aAAa,EAAD,IA/EzB,0DAoFCvzB,EAAOk8C,KAAO9mC,GAAiB0nC,YAC/B98C,EAAOrB,KAAP,KACA40B,aAAa,EAAD,IAtFb,iCAyFIvzB,GAzFJ,2E,sBCvCA,SAAS+8C,KACZphC,GAAgBe,kBCUb,IAAMsgC,GAAa,WAEpB,IAF6CC,EAE9C,wDACD,EAAmCt4C,KAA5BlF,EAAP,EAAOA,SAAU0E,EAAjB,EAAiBA,aACjB,EAAkBxI,IAAXE,EAAP,EAAOA,QACP,EAA0CkZ,KAAnCjN,EAAP,EAAOA,aAAc/J,EAArB,EAAqBA,QAAS8J,EAA9B,EAA8BA,SAC9B,EAAwC5L,IAAMquB,SAAoB,CAC9DtY,YAAQlY,EACR4gC,WAAY,EACZnxB,QAAS,IAHb,oBAAO2zC,EAAP,KAAqBC,EAArB,KAMA,EAAyBz0C,KAAjBL,EAAR,EAAQA,aACR,EAA0C4f,eAAnCwd,EAAP,EAAOA,eAAgBrmB,EAAvB,EAAuBA,eAEvB,EAAcgY,aAAe,UAArBxP,EAAR,EAAQA,EAGFolB,EAAgB/wC,IAAMC,YAAN,uCAAkB,WAAOkhD,GAAP,6CAAA5+C,EAAA,yDACuC3C,EAApErC,UAAoEqC,EAAzDzC,WAAYC,EAA6CwC,EAA7CxC,WAA6CwC,EAAjCpC,OAAQO,EAAyB6B,EAAzB7B,YAAyB6B,EAAZnC,SAE/DsT,QAAQO,IAAI/P,GAAYE,YAAa8W,KAAgBsH,UAEjD9b,EAAuB,CAAEk8C,KAAM9mC,GAAiB+mC,WAE/C9iD,IAAeC,IAAcC,YAC3B6jD,EAAW1iB,YACXj7B,IAFH,OAEeqI,QAFf,IAEeA,OAFf,EAEeA,EAAciU,kBAC1BvH,KAAgBsH,UAAYte,GAAYE,aAVX,iCAYtBwjB,EAAYzhB,EAAS29C,EAAWprC,QAChCqrC,EAAWp7C,SAASif,EAAUo8B,WAAWnb,SAbnB,SAcV/kB,KAAa5I,KAAgBsH,SAAUjgB,EAAQzC,YAdrC,UAcxBS,EAdwB,OAgBtBksB,EAAM,EAENw3B,EAAavjD,IAAgBC,IAAiB+/C,SAE9CwD,EApBsB,OAoBP31C,QApBO,IAoBPA,IAAY,GAEM,QAAnCqZ,EAAU3b,OAAOk4C,cAtBO,wBAwBlB/gB,EAA4B,CAAEhrB,MAAO7V,EAAQzC,WAAYyL,MAAOqc,EAAU3b,QAxBxD,UA0BU/H,GAAYE,YAAYggD,cAAchhB,EAAKj9B,GA1BrD,oBA0BhBk+C,EA1BgB,EA0BhBA,gBAEFC,EAAYxgC,KAAUugC,EAAgBz8B,EAAU3b,WAEhDs4C,EAAczgC,KAAUggC,EAAW1iB,YAAYl5B,MAAM,KAAO0f,EAAU9G,WAE5D0jC,GAAGF,GAhCK,wBAkCpBvoC,GAAMwoC,EAAaD,EAAW,qBAE9Bx+B,EAAe,CAACJ,QAAQ,EAAMC,KAAMI,IAAY0+B,wBApC5B,oBAuCV3gC,KAAe5I,KAAgBsH,SAAUjgB,EAAQzC,WAAY8nB,EAAUzd,QAAvE,OACFqE,QADE,IACFA,OADE,EACFA,EAAck2C,eAAgBR,EAAcH,EAAsB,YAAZt/C,OAAwBjE,EAAYiE,EAASlE,EAAO0jD,GAxC9F,QAyChB1jD,GAAS,EAzCO,0DA2ChBmG,EAAOk8C,KAAO9mC,GAAiB6oC,cAC/Bj+C,EAAOrB,KAAP,KAEAygB,EAAe,CAACJ,QAAQ,EAAMC,KAAMI,IAAY6+B,qBA9ChC,mDAmDpB7oC,GAAM,+CAnDc,eAwD5B+J,EAAe,CAACJ,QAAQ,EAAMC,KAAMI,IAAY8+B,mBAEhD9oC,GAAM,kBAAmBtX,EAAS/D,EAAaujD,GAEzCa,EAA0B,YAAZrgD,EAAwB,EAAIA,EA5DpB,UA8DLqf,KAAY5I,KAAgBsH,SAAUjgB,EAAQzC,WACjE0O,EAAaiU,gBAAiBmF,EAAWk8B,EAAW1iB,WAAY3U,EAChEy3B,EAAcH,EAAUe,EAAavkD,EAAO0jD,GAhEpB,QA8DtB3jB,EA9DsB,OAkE5BvkB,GAAM,YAAaukB,GAEnB55B,EAAOrB,KAAOi7B,OAES9/B,KAAX,OAAR8/B,QAAQ,IAARA,OAAA,EAAAA,EAAUriB,QAAV,OAAgCqiB,QAAhC,IAAgCA,OAAhC,EAAgCA,EAAU0C,SAE1Cld,EAAe,CAACJ,QAAQ,EAAMC,KAAMI,IAAYg/B,gBAGhDj/B,EAAe,CAACJ,QAAQ,EAAMC,KAAMI,IAAYi8B,aA3ExB,kDA+E5B/nB,aAAa,EAAD,IACZvzB,EAAOk8C,KAAO9mC,GAAiBipC,cAC/Br+C,EAAOrB,KAAP,KAGAygB,EAAe,CAACJ,QAAQ,EAAMC,KAAMI,IAAYg/B,gBApFpB,gCAwFhCr+C,EAAOk8C,KAAO9mC,GAAiBkpC,aAxFC,iCA2F7Bt+C,GA3F6B,kEAAlB,sDA6FnB,CAACnE,EAAS4D,EAAU1B,EAAS+J,EAAcD,EAAUrK,GAAYE,YAAa0hB,IAE3Em/B,EAAiBriD,sBAAW,uCAAC,WAAMghD,GAAN,SAAA1+C,EAAA,yDAC/B6W,GAAM,+BAAgC6nC,GACtCzX,EAAe,CAACzmB,QAAO,KAEnBk+B,IAAgBA,EAAalrC,OAJF,gCAKrBg7B,EAAckQ,GALO,2CAAD,sDAQ/B,CAACA,EAAclQ,EAAevH,EAAgBrmB,EAAgB69B,IAQ3DzX,GANmBtpC,sBAAW,uCAAC,WAAMyC,EAAuB6/C,GAA7B,SAAAhgD,EAAA,+EAC1B,IAAIoM,SAAc,SAAC2gB,GACtBA,QAF6B,2CAAD,wDAIjC,CAAC2xB,EAAcC,IAEWv1B,EAAfq1B,EAAiB,yBAA8B,0BAEvDwB,EAAmC,CACrCxB,eACAzX,QACAvN,UAAW,CAACjmB,YAAQlY,GACpB2I,QAAS0B,EACTqW,UAAWnS,EACXq2C,iBAAkBnnB,KAAeC,UACjC+mB,kBAGJ,MAAO,CACHE,aAAcA,I,yCCnHTE,GAAmBh3B,aAAgB,SAAhBA,EAA0B,YAUjC,IATsCiY,EASvC,EATuCA,QACAh4B,EAQvC,EARuCA,aAEAggB,GAMvC,EAPuCtZ,KAOvC,EANuCsZ,GACGC,EAK1C,kBACpB,EAMIlsB,IALAE,EADJ,EACIA,QACAQ,EAFJ,EAEIA,WACAD,EAHJ,EAGIA,cACAG,EAJJ,EAIIA,cACAP,EALJ,EAKIA,aAKGyiD,EAAgBzB,IAFF,GAEdyB,aAEP,EAAmEx2B,eAAnD22B,EAAhB,EAAO9lC,OAAS8lC,cAAgB7/B,EAAhC,EAAgCA,eAAgBK,EAAhD,EAAgDA,eAEhD,EAAoCkL,oBAAS,GAA7C,oBAAOu0B,EAAP,KAAmBC,EAAnB,KACMC,EAAeC,aAAanjD,EAAQzC,YAEnCqJ,EAAWkC,KAAXlC,QAEP,EAA0C6nB,oBAAS,GAAnD,oBAAO4wB,EAAP,KAAsBC,EAAtB,KAEM8D,EAAWhjD,IAAMC,aAAY,WAC/BkjB,EAAe,CAACJ,QAAQ,IACxBziB,GAAc,GACdwiB,EAAe,CAACC,OAAM,OAAE3iB,QAAF,IAAEA,SACzB,CAAC0iB,EAAgBK,EAAgB/iB,IAE9Bu/C,EAAS3/C,IAAMC,aAAY,WAC7B6jB,GAAgBlkB,EAAQzC,YACxB+hD,GAAiB,KAClB,CAACt/C,IACEqjD,EAAejjD,IAAMC,aAAY,WACnC4iD,GAAc,KACf,IACGK,EAAeljD,IAAMC,YAAN,sBAAkB,sBAAAsC,EAAA,sDACnCm8C,KAAeC,eAAe,GAAI,6BAClCx7B,EAAe,CAACJ,QAAQ,IAFW,2CAGpC,CAAChjB,EAAcojB,IAEZggC,EAAYnjD,IAAMC,aAAY,WAEhCkjB,EAAe,CAACJ,QAAQ,EAAMC,KAAMI,IAAY21B,YAEjD,CAAC51B,IAEEigC,EAAkBpjD,IAAMC,YAAN,sBAAkB,sCAAAsC,EAAA,yDAEjC3C,EAAQzC,WAFyB,uBAGlCic,GAAM,6BAH4B,iCAOtCA,GAAM,uBACN+J,EAAe,CAACJ,QAAQ,EAAMC,KAAMI,IAAYigC,yBARV,SAUHrD,KAVG,OAUhCj8C,EAVgC,YAY9BA,EAAOk8C,KAZuB,cAa7B9mC,GAAiB+mC,QAbY,UAuC7B/mC,GAAiB0nC,aAvCY,OAwC7B1nC,GAAiBynC,kBAxCY,OAyC7BznC,GAAiBwnC,kBAzCY,2BAexBljD,EAAWsG,EAAOrB,KAAKjF,SAC7B2b,GAAM,kBAAmB3b,GAhBK,UAiBxBsjB,aAAMxH,IAjBkB,aAmB1BhY,GAAYC,SAAWD,GAAYE,aAAehE,GAnBxB,kCAqBO8D,GAAYE,YAAYugB,WAAW,CAACvM,MAAO7V,EAAQzC,aArB1D,oBAqBlBujB,EArBkB,EAqBlBA,QArBkB,EAqBTxhB,QAEHwhB,EAvBY,kCAyBFnf,GAAYC,QAAQue,cAAc,CACtDxiB,UAAWmjB,EAAQnjB,WACpBE,EAASuiB,IA3Bc,iBAyBnBxiB,EAzBmB,EAyBnBA,OAIP4b,GAAM,+BAAgC5b,GAEtCkiB,GAAgBO,kBAAkBS,EAAQnjB,UAAWC,EAAQC,GA/BnC,eAqC9B0lB,EAAe,CAACJ,QAAQ,IArCM,oCA0C9B3J,GAAM,8BACNsG,GAAgBc,iBAAiB5gB,EAAQzC,YA3CX,qGAiDvC,CAACyC,EAASujB,IACPmgC,EAAYtjD,IAAMC,aAAY,WAChCkjB,EAAe,CAACJ,QAAQ,EAAMC,KAAMI,IAAYmgC,WACjD,IACGC,EAAYxjD,IAAMK,SAAQ,WAC5B,OAAO,gBAAC,IAAD,CAAQuqC,QAAS,YAAa+G,WAAS,EAACv/B,KAAM,SAAUsiB,QAAS,WACpEp0B,GAAc,GACdmf,MAFG,UAGHkM,EAAE,qBAHC,SAIR,CAACxrB,EAAewrB,IACb83B,EAAUzjD,IAAMK,SAAQ,WAC1B,OAAO,gBAAC,IAAD,CAAQuqC,QAAS,YAAa+G,WAAS,EAACv/B,KAAM,SAAUsiB,QAAS,WACpEosB,MADG,UAEHn1B,EAAE,mBAFC,SAGR,CAACm1B,GAAan1B,IACX+zB,EAAS1/C,IAAMC,aAAY,WAC7B,OAAOL,EAAQxC,YACX,IAAK,aACL,IAAK,aACD+lB,EAAe,CAACJ,QAAQ,EAAKC,KAAKI,IAAYzB,YAC9C,MACJ,IAAM,SACN,IAAM,YACFwB,EAAe,CAACJ,QAAQ,EAAKC,KAAKI,IAAYC,aAC9C,MACJ,QACIF,EAAe,CAACJ,QAAQ,OAGjC,CAACnjB,IACE2pC,EAAQ5d,EAAE,0BAEV+3B,EAAc1jD,IAAMK,SAAQ,WAAO,IAAD,EACpC,OAAOsjB,OAAOqkB,QAAP,KAAArkB,OAAA,IAAAA,CAAA,EACDP,IAAYzB,UAAa,CAAC49B,KAAM,eAAC,IAAD,wCAC9B4D,aACGvjD,GAF2B,IAG9B+L,eACAq3C,WAAUrD,SACVsD,eAAcC,eAAcJ,mBAC1BQ,cAPH3/B,OAAA,IAAAA,CAAA,EAQDP,IAAYmgC,OAAU,CAAChE,KAAM,eAAC,IAAD,sDACpB3zB,GACAhsB,GAFoB,IAGvB+L,eACAggB,QACE+zB,SAAQiE,SAAQ,IAbvBhgC,OAAA,IAAAA,CAAA,EAcDP,IAAY21B,QAAW,CAACwG,KAAM,eAAC,IAAD,aAAchW,MAAOA,GAArB,uCACzB3d,GADyB,IAE5Bg4B,QAAS,sBACTC,OAAQ,sBACLrB,GAJyB,IAK5B72B,UAnBDhI,OAAA,IAAAA,CAAA,EAqBDP,IAAYi8B,WAAc,CAACE,KAAM,eAAC,IAAD,aAAYtqB,MAAOsU,EACd5F,QAASA,EACTmgB,cAAen4C,EAAe/L,EAAQzC,YAF3C,2BAG5ByuB,GAH4B,IAI/BD,UAzBDhI,OAAA,IAAAA,CAAA,EA2BDP,IAAYg/B,cAAiB,CAAC7C,KAAM,eAAC,IAAD,aAAetqB,MAAOsU,EACdua,cAAen4C,EAAe/L,EAAQzC,WACtC2iD,QAAS,kBAAMqD,MAFvB,2BAE4Cv3B,GAF5C,IAEkDD,QAAO+zB,OAAO,WAC9Fv8B,EAAe,CAACJ,QAAQ,EAAKC,KAAKI,IAAY21B,aA9BnDp1B,OAAA,IAAAA,CAAA,EAgCDP,IAAY2gC,cAAiB,CAACxE,KAAM,eAAC,IAAD,sDAC/B3/C,GAD+B,IAElC+L,eACAq3C,WAAUrD,SACVsD,eAAcC,eAAcJ,kBAJM,IAKnCM,gBAAiB,WAChBA,MANkC,2BAO1Bx3B,GAP0B,IAOpBD,QAAO23B,cAvCtB3/B,OAAA,IAAAA,CAAA,EAwCDP,IAAY4gC,cAAiB,CAACzE,KAAM,eAAC,IAAD,aAAeE,aAAc7/C,EAAQ7B,aAArC,2BAA0D6tB,GAA1D,IAAgED,UAxCnGhI,OAAA,IAAAA,CAAA,EAyCDP,IAAY6gC,cAAiB,CAAC1E,KAAM,eAAC,KAAD,aAAeE,aAAc7/C,EAAQ7B,YAAa4lC,QAASA,GAA3D,2BAA4E/X,GAA5E,IAAkFD,UAzCrHhI,OAAA,IAAAA,CAAA,EA0CDP,IAAY8gC,aAAgB,CAAC3E,KAAM,eAAC,IAAD,aAAcO,QAAS,WACxDrgC,OADiC,2BAE1BmM,GAF0B,IAEpBD,UA5CdhI,OAAA,IAAAA,CAAA,EA6CDP,IAAYC,WAAc,CAACk8B,KAAM,eAAC,IAAD,0CAC5B3/C,GAD4B,IAE/BojD,WAAUrD,SACVh0C,eAIAs3C,eAAcC,eAAcJ,eAC5BgB,cAAen4C,EAAe/L,EAAQzC,WACtCgnD,QAAgC,cAAvBvkD,EAAQxC,WAA6BqmD,EAAUD,MACtDF,cAvDH3/B,OAAA,IAAAA,CAAA,EAwDDP,IAAY0+B,sBAAyB,CAACvC,KAAM,eAAC,KAAD,aAAoBtqB,MAAOsU,EACjBkW,aAAc7/C,EAAQ7B,aADhC,2BAEvC6tB,GAFuC,IAG1CD,QACE+zB,OAAO,WACLv8B,EAAe,CAACJ,QAAQ,EAAKC,KAAKI,IAAY21B,aA7DnDp1B,OAAA,IAAAA,CAAA,EA+DDP,IAAYghC,sBAAyB,CAAC7E,KAAM,eAAC,IAAD,aAAuBtqB,MAAOsU,EACdua,cAAen4C,EAAe/L,EAAQzC,WACtCsiD,aAAc7/C,EAAQ7B,aAFtC,2BAGvC6tB,GAHuC,IAI1CD,UAnEDhI,OAAA,IAAAA,CAAA,EAqEDP,IAAY8+B,iBAAoB,CAAC3C,KAAM,eAAC,IAAD,aAAmBtqB,MAAOsU,EACbua,cAAen4C,EAAe/L,EAAQzC,WACtCsiD,aAAc7/C,EAAQ7B,aAFnC,2BAGlC6tB,GAHkC,IAIrCD,UAzEDhI,OAAA,IAAAA,CAAA,EA2EDP,IAAYigC,uBAA0B,CAAC9D,KAAM,eAAC,IAAD,aAAsBtqB,MAAOsU,EAAQkW,aAAc7/C,EAAQ7B,aAA3D,2BACpC6tB,GADoC,IAEvCD,UA7ELhI,OAAA,IAAAA,CAAA,EA+EDP,IAAYihC,oBAAuB,CAAC9E,KAAM,eAAC,IAAD,aAActqB,MAAOsU,EAAOuW,QAAS,WAC7EsD,MADwC,2BAEjCx3B,GAFiC,IAE3BD,QAAO+zB,OAAO,WACvBv8B,EAAe,CAACJ,QAAQ,EAAKC,KAAKI,IAAY2gC,mBAlFnDpgC,OAAA,IAAAA,CAAA,EAoFDP,IAAY6+B,mBAAsB,CAAC1C,KAAM,eAAC,IAAD,aAAmBtqB,MAAOsU,EAAOuW,QAAS,WACjFqD,MADuC,yBAGvCx3B,KAAMC,GAHiC,IAIvCriB,SAAU/C,EAAUA,EAAO,UAAa3I,QAxFzC,MA4FR,CAACilD,EAAcljD,EAAS4iD,EAAc72C,EAAcg0C,EAAQqD,EAAUE,EAAcD,EAAct3B,EAAGC,IAExG,OAAO,uCACH,eAAC,KAAD,CAAOgY,UAAWjY,EAAE,gCAAiCtZ,KAAM4sC,EACpDnb,iBAAkBtqB,GAAYmqB,QAAS,WAC1Cub,GAAiB,IAClBrb,SAAU,YAEb,eAAC,IAAD,CAAaxxB,KAAMuwC,EAAYjf,QAAS,kBAAMkf,GAAc,IAAQtZ,MAAO,cAC9D7/B,YAAW,OAAE9J,QAAF,IAAEA,OAAF,EAAEA,EAASzC,WAAYqQ,IAAG,OAAE5N,QAAF,IAAEA,OAAF,EAAEA,EAASzC,aAE7D,eAAC,IAAD,CAAckV,KAAMswC,EAAc5/B,OAAQ4gB,QAAS,SAAC70B,GAChDxO,GAAc,GACdqjC,EAAQ70B,IACTixC,UAAW2D,EACAhE,OAAQgE,EAAaf,EAAc3/B,MAAO08B,OAC1C4D,UAAWI,EAAaf,EAAc3/B,MAAOsgC,UAC7CtgC,KAAM2/B,EAAc3/B,aCnRnC,SAASshC,GAAc9X,EAAiC2I,EAC3D3xC,EAA8CqmB,GAE9C,IAAQjqB,EAAYF,IAAZE,QAER,EAA0CyuB,mBAAgB,IAA1D,oBAAOk2B,EAAP,KAAsBC,EAAtB,KA8CA,OA5CA9uB,GAAiB,sBAAC,oCAAAnzB,EAAA,0DAEa,IAAvB3C,EAAQrC,WAAqBqC,EAAQpC,QAAWgvC,GAAsC,kBAAhBA,GACrEhpC,GAAajC,GAAYC,QAHhB,wDAOd4X,GAAM,eAAgBozB,EAAa,gBAAiB4I,KAAmBD,IAEnEoP,EAAuB,GATb,SAYJt/B,EAAYzhB,EAAUgpC,GAEtBtV,EAAoC,CACtC35B,UAAWqC,EAAQrC,UACnBivC,cACA2I,cACAtrB,OAAQA,EAASvkB,aAAMukB,GAAQtkB,MAAM,KAAO0f,EAAU9G,UAAUc,QAAQ,EAAG,QAAKphB,GAlB1E,SAqBa0D,GAAYC,QAAQ8zC,kBAAkBpe,EAASt3B,EAAQpC,QArBpE,QAuBE,QAFNmgC,EArBI,cAuBE,IAARA,GAAA,UAAAA,EAAU/K,gBAAV,eAAoBztB,gBAAgB+oC,QACpCvQ,EAAS/K,SAASztB,KAAKwB,SAAQ,SAACE,GAC5B,IAAM49C,EAAS59C,EAAKijB,IACd7E,EAAYzhB,EAAUqD,EAAK+B,OAC3BkhB,EAAM3I,KAAUta,EAAKijB,KAAK/W,IAAI,KAAOkS,EAAU9G,UAAUxY,WAC/D4+C,EAAc1pC,KAAK,CAAC9E,OAAQlP,EAAK+B,MAAOkhB,MAAK46B,QAASD,OAG1DD,EAAiBD,IAErBnrC,GAAM,YAAaukB,GAjCT,kDAoCVrG,aAAa,EAAD,IApCF,QAwCdktB,EAAiBD,GAxCH,0DA0Cf,CAAC3kD,EAAQrC,UAAWqC,EAAQpC,OAAQ+D,GAAYC,QAAS2zC,EAAa3I,EAAahpC,IAE/E,CACH+gD,iBC7DA,SAASI,KACb,MAAsEjlD,IAA9DU,EAAR,EAAQA,WAAYE,EAApB,EAAoBA,cAA4BskD,EAAhD,EAAmCrlD,YAC3B4jB,EAAmB6I,eAAnB7I,eACF0hC,EAAqB7kD,IAAMC,aAAY,WAEzC2kD,MACF,CAACxkD,IACG0kD,EAAoB9kD,IAAMC,aAAY,WAExC2kD,IACAzhC,EAAe,CAACJ,OAAM,OAAE3iB,QAAF,IAAEA,KAAoB4iB,KAAKI,IAAYC,eAC/D,CAACjjB,IACG2kD,EAAkB/kD,IAAMC,aAAY,SAACyC,GAEvCkiD,IACAzhC,EAAe,CAACJ,OAAM,OAAE3iB,QAAF,IAAEA,KAAoB4iB,KAAKI,IAAYzB,cAC/D,CAACvhB,IACG4kD,EAA0BhlD,IAAMC,YAAN,sBAAkB,sBAAAsC,EAAA,6DAE9C4gB,EAAe,CAACJ,OAAM,OAAE3iB,QAAF,IAAEA,KAAoB4iB,KAAKI,IAAYi8B,aAFf,SAGxCt+B,aAAM,KAHkC,OAI9CzgB,GAAc,GACd6iB,EAAe,CAACJ,QAAQ,IACxB6hC,IAN8C,2CAOhD,CAACxkD,IACG6kD,EAA0BjlD,IAAMC,aAAY,WAE9CkjB,EAAe,CAACJ,OAAM,OAAE3iB,QAAF,IAAEA,KAAoB4iB,KAAKI,IAAYi8B,eAC/D,CAACj/C,IACG8kD,EAAyBllD,IAAMC,aAAY,WAE7CkjB,EAAe,CAACJ,OAAM,OAAE3iB,QAAF,IAAEA,KAAoB4iB,KAAKI,IAAYg/B,kBAC/D,CAAChiD,IACG+kD,EAAuBnlD,IAAMC,aAAY,WAE3CkjB,EAAe,CAACJ,OAAM,OAAE3iB,QAAF,IAAEA,KAAoB4iB,KAAKI,IAAYghC,0BAC/D,CAAChkD,IACGglD,EAAoBplD,IAAMC,aAAY,WAExC2kD,IACAzhC,EAAe,CAACJ,OAAM,OAAE3iB,QAAF,IAAEA,KAAoB4iB,KAAKI,IAAY2gC,kBAC/D,CAAC3jD,IACGilD,EAAkBrlD,IAAMC,aAAY,WACtCkjB,EAAe,CAACJ,OAAM,OAAE3iB,QAAF,IAAEA,KAAoB4iB,KAAKI,IAAY8gC,iBAC/D,CAAC9jD,KC7CA,YAmBS,IAjBR0kD,EAiBO,EAjBPA,kBACAC,EAgBO,EAhBPA,gBACAF,EAeO,EAfPA,mBAIAG,EAWO,EAXPA,wBACAC,EAUO,EAVPA,wBACAC,EASO,EATPA,uBACAC,EAQO,EARPA,qBACAC,EAOO,EAPPA,kBACAE,EAMO,EANPA,kBACAD,EAKO,EALPA,gBACAE,EAIO,EAJPA,0BACAC,EAGO,EAHPA,oBAIE54C,EAAU5M,IAAMK,SAAQ,kBAAMqf,GAAgB0C,aAAY,IAChEpiB,IAAMosB,WAAU,WACZ,IAAMyE,EAAejkB,EAAQkkB,WAAU,YAAoE,IAAlEpuB,EAAiE,EAAjEA,KACrC,OADsG,EAA3DvE,QAEvC,IAAK,eACD0mD,EAAmBniD,GACnB,MACJ,IAAK,cACDoiD,EAAkBpiD,GAClB,MACJ,IAAK,YACDqiD,EAAgBriD,GAChB,MACJ,IAAK,oBACDsiD,EAAwBtiD,GACxB,MACJ,IAAK,oBACDuiD,EAAwBviD,GACxB,MACJ,IAAK,mBACDwiD,EAAuBxiD,GACvB,MACJ,IAAK,iBACDyiD,EAAqBziD,GACrB,MACJ,IAAK,cACD0iD,EAAkB1iD,GAClB,MACJ,IAAK,cACD4iD,EAAkB5iD,GAClB,MACJ,IAAK,YACD2iD,EAAgB3iD,GAChB,MACJ,IAAK,kBACD8iD,EAAoB9iD,OAIhC,OAAO,kBAAMmuB,EAAaG,iBAC3B,CAACpkB,EAASk4C,EACTD,EACAE,EACAC,EACAC,EACAC,EACAC,EACAC,EACAE,EACAC,IDXJE,CAAe,CACXZ,qBACAC,oBACAC,kBAIAC,0BACAC,0BACAC,yBACAC,uBACAC,oBACAE,kBAxBsBtlD,IAAMC,aAAY,WACxCkjB,EAAe,CAACJ,OAAM,OAAE3iB,QAAF,IAAEA,KAAoB4iB,KAAKI,IAAY4gC,kBAC/D,CAAC5jD,IAuBCilD,kBAEAG,oBAxByBxlD,IAAMC,YAAN,sBAAkB,sBAAAsC,EAAA,6DAG3C4gB,EAAe,CAACJ,OAAM,OAAE3iB,QAAF,IAAEA,KAAoB4iB,KAAKI,IAAY6gC,gBAHlB,SAIrCljC,aAAM,KAJ+B,OAK3CzgB,GAAc,GACd6iB,EAAe,CAACJ,QAAQ,IACxB6hC,IAP2C,2CAQ7C,CAACxkD,MEhDA,I,GAAMslD,GAAah6B,aAAgB,SAAS,CAAC8lB,SAAS,GAAnC9lB,EAA0C,YAA8B,IAAzBE,EAAwB,oBACtF+5B,ECQgB,WAIrB,IAAD,EACD,EAAmCj9C,KAA5BlF,EAAP,EAAOA,SAAU0E,EAAjB,EAAiBA,aACVtI,EAAWF,IAAXE,QACP,EAAgCkZ,KAAzBjN,EAAP,EAAOA,aAAc/J,EAArB,EAAqBA,QAErB,EAAkC9B,IAAMquB,SAAN,UAAevF,KAAmBvK,iBAAlC,QAA+C,IAAjF,oBAAOA,EAAP,KAAkBw7B,EAAlB,KAEA,EAA0C/5C,IAAMquB,SAAoB,CAChEtY,YAAQlY,EACR4gC,WAAY,EACZnxB,QAAS,IAHb,oBAAOs4C,EAAP,KAAsBC,EAAtB,KAKOtB,EAAiBD,GAAcsB,EAAc7vC,OAAQoL,KAAuB2kC,SAAUtiD,GAAtF+gD,cAEP,EAA6CvkD,IAAMquB,WAAnD,oBAAO03B,EAAP,KAAuBC,EAAvB,KACA,EAAkChmD,IAAMquB,SAAiB,IAAzD,oBAAO43B,EAAP,KAAkBC,EAAlB,KAMO7rB,EAAsBr6B,IAAMC,aAAY,WAAK,IAAD,EACzCse,EAAS,UAAGuK,KAAmBvK,iBAAtB,QAAmC,GAClDw7B,EAAax7B,KACf,IACF2b,GAAc,CAACG,yBAEf3E,IAAkB,WAEV6uB,EAAcv5C,OAAS,GACvBg7C,EAAmBzB,EAAc,MAGtC,CAACA,EAAeyB,IAEnB,IAAMG,EAAkBlmD,sBAAW,uCAAC,WAAM2lD,GAAN,yCAAArjD,EAAA,yDACzBhF,EAAoEqC,EAApErC,UAAWJ,EAAyDyC,EAAzDzC,WAAYC,EAA6CwC,EAA7CxC,WAAYI,EAAiCoC,EAAjCpC,OAAQO,EAAyB6B,EAAzB7B,YAAaN,EAAYmC,EAAZnC,SAC/DsT,QAAQO,IAAI,8BAA+By0C,KAEvC3oD,IAAeC,IAAckkB,WAAa/d,GACvCqI,GAAgB0M,KAAgBsH,WADnC,OAEG+lC,QAFH,IAEGA,OAFH,EAEGA,EAAe7vC,UAFlB,OAE4BgwC,QAF5B,IAE4BA,OAF5B,EAE4BA,EAAgBhwC,UAF5C,OAEsDtY,QAFtD,IAEsDA,OAFtD,EAEsDA,EAAUuiB,KANpC,iCASlBwf,EAAYh8B,EAAUoiD,EAAc7vC,QACpCk/B,EAAWzxC,EAAUuiD,EAAehwC,QACpCqwC,EAAcjlC,KAAUykC,EAAcnnB,YAAYl5B,MAAM,KAAOi6B,EAAUrhB,UAAUc,QAAQ,EAAG,GAX5E,mBAYA1d,GAAYC,eAZZ,aAYA,EAAqBw9B,iBAAiB,CAC1DzhC,YACAwhC,YAAaS,EAAU56B,SACxBpH,GAfqB,cAYlByhC,EAZkB,OAgBlBwB,EAAmC,CACrCnB,SAAUzzB,EAAaiU,gBACvBumC,UAAWlpD,EACXmpD,QAAS/oD,EACT0oD,YACAM,QAAS,EACTtnB,UAAS,OAAEA,QAAF,IAAEA,OAAF,EAAEA,EAAWmY,WACtBxuC,MAAO,CACHhE,QAAS46B,EAAU56B,QACnBC,OAAQuhD,GAEZ9F,OAAQ,CACJ17C,QAASqwC,EAASrwC,QAClBC,OAAQkhD,EAAerB,SAE3B5kB,WAAYnF,G3E7CZ,K2EcoB,oBAkCDp5B,GAAYC,eAlCX,aAkCD,EAAqBglD,uBAAuB,CAC/DtvB,QAASuJ,EACT8f,KAAMhoC,KAAgBsH,SACtB/d,QAASA,IAAY0S,KAAQC,OAASD,KAAQG,QAAU7S,EACxD0+C,WAAYziD,EACZN,SAAUA,EAASuiB,GACnBxiB,WAxCoB,QAkClBmgC,EAlCkB,OA2CpBvkB,GAAMukB,GAEN,OAAIA,QAAJ,IAAIA,KAAU+iB,UA7CM,kDAoDxBv/B,KAAA,MApDwB,0DAyDrB,GAzDqB,0DAAD,sDA4DhC,CAACvhB,EAAS4D,EAAV,OAAoBuiD,QAApB,IAAoBA,OAApB,EAAoBA,EAAgBhwC,OAAQ6vC,EAAeK,IAExDQ,EAAmBxmD,sBAAW,uCAAC,WAAOyC,EAAqB6/C,GAA5B,SAAAhgD,EAAA,+EAC1B,IAAIoM,SAAc,SAAC2gB,GAAc,IAAD,GACnC,OAAI5sB,QAAJ,IAAIA,GAAJ,UAAIA,EAAMs5B,iBAAV,aAAI,EAAiBjmB,QACb6vC,IAAkBljD,EAAKs5B,WACvB6pB,EAAiBnjD,EAAKs5B,WAG1B6pB,EAAiB,CAAC9vC,YAAQlY,EAAW4gC,WAAY,EAAGnxB,QAAS,IAEjEgiB,QAT6B,2CAAD,wDAWjC,CAACu2B,IAEEa,EAAkBzmD,uBAAY,SAACqkB,GAG7BlL,GAAM,mBAAoBkL,GAC1B0hC,EAAmB1hC,KACxB,CAAC0hC,IAqBJ,MAAO,CACHL,cApBkB,CAClB3pB,UAAW,CAAEjmB,YAAQlY,GACrB2I,QAAS0B,EACTqW,UAAWA,EACXooC,kBAAmBrrB,KAAeC,UAClC4qB,kBACAO,kBACAD,mBACAG,eAAgB,MAChBC,mBAAoBtC,EACpBuC,sBAAuB,SAACxiC,GACpBlL,GAAM,kCAAmCkL,GACzC4hC,EAAa5hC,IAEjByiC,mBAAoB,SAACC,GACjB,MAAO,CAAC9nD,OAAO,EAAOma,QAAS,ODhJf4tC,GAAjBtB,cACAnD,EAAgBzB,KAAhByB,aACP,EEgBuB,WAOrB,IAAD,EAEO72B,EAAMwP,aAAe,UAArBxP,EAER,EAAkD0C,oBAAkB,GAApE,oBAAO64B,EAAP,KAA0BC,EAA1B,KAEA,EAAkD94B,qBAAlD,oBAAO+4B,EAAP,KAA0BC,EAA1B,KAEA,EAAoC3+C,KAA5BlF,EAAR,EAAQA,SAAU0E,EAAlB,EAAkBA,aACVtI,EAAYF,IAAZE,QACR,EAAkCkZ,KAA1BjN,EAAR,EAAQA,aAAc/J,EAAtB,EAAsBA,QACtB,EAA0C9B,IAAMquB,SAAoB,CAChEtY,YAAQlY,EACR4gC,WAAY,EACZnxB,QAAS,IAHb,oBAAOg6C,EAAP,KAAsBC,EAAtB,KAMA,EAAoCvnD,IAAMquB,SAAN,UAAevF,KAAmBvK,iBAAlC,QAA6C,IAAjF,oBAAOipC,EAAP,KAAmBC,EAAnB,KACOlD,EAAiBD,GAAcgD,EAAcvxC,OAAQq/B,KAAmBsS,oBAAqBlkD,GAA7F+gD,cACP,EAAwCl2B,qBAAxC,oBAAOs5B,EAAP,KAAqBC,EAArB,KACA,EAA8Cv5B,wBAAcxwB,GAA5D,oBAAOgqD,EAAP,KAAwBC,EAAxB,KACA,EAAwCz5B,mBAA6B+mB,KAAmBsS,qBAAxF,oBAAOK,EAAP,KAAqBC,EAArB,KACQpe,EAAqB5d,eAArB4d,gBAQDvP,EAAsBr6B,IAAMC,aAAY,WAAK,IAAD,EACzCse,EAAS,UAAGuK,KAAmBvK,iBAAtB,QAAmC,GACjDkpC,EAAclpC,KACjB,IACF2b,GAAc,CAACG,yBACf3E,IAAkB,WACV6uB,EAAcv5C,OAAS,GACvB88C,EAAmBvD,EAAc,MAEtC,CAACA,EAAeuD,IAEnB,IAAM9W,EAAiBhxC,IAAMC,YAAN,uCAAkB,WAAOkhD,GAAP,yCAAA5+C,EAAA,yDAE7BhF,EAAqEqC,EAArErC,UAAWJ,EAA0DyC,EAA1DzC,WAAYC,EAA8CwC,EAA9CxC,WAAYI,EAAkCoC,EAAlCpC,OAAQO,EAA0B6B,EAA1B7B,YAAaN,EAAamC,EAAbnC,WAC5DL,IAAeC,IAAckkB,WAAa/d,GACvCqI,GAAgB0M,KAAgBsH,UAChC8nC,IAFH,OAEmBE,QAFnB,IAEmBA,OAFnB,EAEmBA,EAAiB9xC,UAFpC,OAE8CtY,QAF9C,IAE8CA,OAF9C,EAE8CA,EAAUuiB,KALvB,iCAOvBioC,EAAgBzkD,EAAS29C,EAAWprC,QACpCk/B,EAAWzxC,EAASqkD,EAAgB9xC,QACpCmyC,EAAc5iD,aAAM67C,EAAW1iB,YAAYl5B,MAAM,KAAO0iD,EAAc9pC,UAAUc,QAAQ,EAAG,GATpE,mBAUL1d,GAAYC,eAVP,aAUL,EAAqBw9B,iBAAiB,CAC1DzhC,UAAWA,EACXwhC,YAAakpB,EAAcrjD,SAC5BpH,GAb0B,cAUvByhC,EAVuB,OAevB/H,EAAuC,CACzCoI,SAAUzzB,EAAaiU,gBACvBrK,MAAOtY,EACP+oB,GAAIyhC,EACJpqD,UAAWqC,EAAQrC,UACnB0hC,UAAS,OAAEA,QAAF,IAAEA,OAAF,EAAEA,EAAWmY,WACtBxuC,MAAO,CACHhE,QAASqjD,EAAcrjD,QACvBC,OAAQqjD,GAEZ5H,OAAQ,CACJ17C,QAASqwC,EAASrwC,QAClBC,OAAQgjD,EAAgBnD,SAE5ByD,UAAW,GACXC,OAAQ,EACRtoB,WAAYnF,G5EhEZ,K4EiCyB,oBAkCNp5B,GAAYC,eAlCN,aAkCN,EAAqB6mD,uBAAuB,CAC/DnxB,UACAqpB,KAAMhoC,KAAgBsH,SACtB/d,QAAqB,YAAZA,EAAwB,EAAIA,EACrC0+C,WAAYziD,EACZN,SAAUA,EAASuiB,GACnBxiB,WAxCyB,QAkCvBmgC,EAlCuB,OA2C7BvkB,GAAM,gBAAiBukB,IAEvB,OAAIA,QAAJ,IAAIA,OAAJ,EAAIA,EAAU+iB,WACV2G,EAAqB17B,EAAE,wBAEvB07B,EAAqB17B,EAAE,wBAhDE,kDAoD7B2L,aAAa,EAAD,IACZ+vB,EAAqB17B,EAAE,wBArDM,eAwDjCw7B,GAAqB,GAxDY,mBA0D1B,GA1D0B,kCA6D1B,GA7D0B,0DAAlB,sDAgEpB,CAACvnD,EAAS4D,EAAUqkD,IAEjBS,EAAgBP,IAAiB3S,KAAmBmT,yBAA2B,OAAS,WAExFC,EAAqC,CACvCxsB,UAAW,CAAEjmB,YAAQlY,GACrB2I,QAAS0B,EACTqW,UAAWipC,EACXiB,kBAAmBntB,KAAeC,UAClCwsB,aAAcO,EACdI,cAAeC,KACfC,gBAAiB,WACTtB,GAAiBA,EAAcvxC,QAC/Bi7B,EAAesW,GAEnB1d,EAAgB,CAAE7mB,QAAQ,KAE9B2jC,gBAbuC,SAavBpiC,GACZwjC,EAAmBxjC,IAEvBukC,yBAA0B,SAACvkC,GACvBlL,GAAM,2BAA4BkL,GAClC,IAAMwkC,EAAexkC,IAAUykC,KAAaC,KAAO5T,KAAmBmT,yBAA2BnT,KAAmBsS,oBACpHM,EAAgBc,IAEpBrC,iBAAiB,WAAD,4BAAE,WAAO/jD,EAAqB6/C,GAA5B,SAAAhgD,EAAA,+EACP,IAAIoM,SAAQ,SAAC2gB,GAAc,IAAD,GAC7B,OAAI5sB,QAAJ,IAAIA,GAAJ,UAAIA,EAAMs5B,iBAAV,aAAI,EAAiBjmB,QACbuxC,IAAkB5kD,EAAKs5B,WACvBurB,EAAiB7kD,EAAKs5B,WAG1BurB,EAAiB,CAAExxC,YAAQlY,EAAW4gC,WAAY,EAAGnxB,QAAS,IAGlEgiB,QAVU,2CAAF,qDAAC,GAajBs3B,eAAgB,MAChBC,mBAAoBtC,EACpBuC,sBAAuB,SAACxiC,GAEpBsjC,EAAgBtjC,IAEpByiC,mBAAoB,SAACC,GACjB,MAAO,CAAE9nD,OAAO,EAAOma,QAAS,MAIxC,MAAO,CACH+tC,oBACAF,oBACAC,uBACAqB,iBFjLiBS,GAHjB7B,EADJ,EACIA,kBACAF,EAFJ,EAEIA,kBACAC,EAHJ,EAGIA,qBACAqB,EAJJ,EAIIA,cACG78C,EAAgBmN,KAAhBnN,aACPg5C,KACA,MAAiF34B,eAAjF,IAAOnP,OAAS8lC,EAAhB,EAAgBA,cAAelF,EAA/B,EAA+BA,cAAgB36B,EAA/C,EAA+CA,eAAgBK,EAA/D,EAA+DA,eAC/D,OAAQ,uCAEJ,eAAC,KAAD,CAAOygB,UAAWwjB,EAA6B/0C,KAAM60C,EACjDpjB,iBAAkBtqB,GAAamqB,QAAS,WACxCwjB,GAAqB,MAGzB,eAAC,IAAD,CAAYxB,cAAeA,EACfuD,cAAeV,EACfhG,aAAcA,EACd2G,WAAY,GACZnM,SAAU,GACVoM,UAAW,GACNxF,QAAS,sBAAuBC,OAAQ,uBAGzD,eAACrG,GAAD,0CACO5xB,GADP,IAEIvZ,KAAMorC,EAAc16B,OACpB4gB,QAAS,kBAAM7gB,EAAe,CAACC,QAAQ,SAE3C,eAAC2/B,GAAD,0CAEW92B,GAFX,IAGQjgB,eACA0G,KAAMswC,EAAc5/B,OACpB4gB,QAAS,kBAAMxgB,EAAe,CAACJ,QAAQ,eGYxCsmC,GAhDI,WAEf,OAAO,gBAAC,IAAD,WACH,eAAC,GAAD,IAGA,eAACC,GAAA,EAAD,CAAW1X,SAAS,KAAKvY,MAAO,CAACF,UAAU,2BAA2B9E,QAAQ,OAAOC,cAAc,UAAnG,SAEI,eAAC/G,GAAA,EAAD,CAAK8G,QAAS,OAAQE,KAAM,EAAGwE,WAAY,UAAWzE,cAAe,MAAO2E,UAAW,EAAvF,SACI,gBAAC,IAAD,WACI,eAAC,IAAD,CAAOswB,OAAK,EAAC9e,UAAW/G,GAAUnH,KAAK,MACvC,eAAC,IAAD,CAAOgtB,OAAK,EAAC9e,UAAWrc,GAAWmO,KAAK,aACxC,eAAC,IAAD,CAAOkO,UAAW/G,GAAUnH,KAAK,kBACjC,eAAC,IAAD,CAAOkO,UAAW/G,GAAUnH,KAAK,4BACjC,eAAC,IAAD,CAAOgtB,OAAK,EAAC9e,UAAWsS,GAAYxgB,KAAK,YAEzC,eAAC,IAAD,CAAOgtB,OAAK,EAAC9e,UAAWsH,GAAYxV,KAAK,YACzC,eAAC,IAAD,CAAOgtB,OAAK,EAAC9e,UAAWsH,GAAYxV,KAAK,mBACzC,eAAC,IAAD,CAAOgtB,OAAK,EAAC9e,UAAWsH,GAAYxV,KAAK,yBACzC,eAAC,IAAD,CAAOgtB,OAAK,EAAC9e,UAAWsH,GAAYxV,KAAK,oBACzC,eAAC,IAAD,CAAOgtB,OAAK,EAAC9e,UAAWsH,GAAYxV,KAAK,kBACzC,eAAC,IAAD,CAAOgtB,OAAK,EAAC9e,UAAWsH,GAAYxV,KAAK,oBAQzC,eAAC,IAAD,CAAOgtB,OAAK,EAAC9e,UAAWsH,GAAYxV,KAAK,oBAEzC,eAAC,IAAD,CAAOgtB,OAAK,EAAC9e,UAAW4R,GAAe9f,KAAK,eAC5C,eAAC,IAAD,CAAOgtB,OAAK,EAAC9e,UAAW4R,GAAe9f,KAAK,uBAC5C,eAAC,IAAD,CAAOgtB,OAAK,EAAC9e,UAAW4R,GAAe9f,KAAK,qBAE5C,eAAC,IAAD,CAAOgtB,OAAK,EAAC9e,UAAW4R,GAAe9f,KAAK,0BAC5C,eAAC,IAAD,CAAOgtB,OAAK,EAAC9e,UAAW4R,GAAe9f,KAAK,mCAQxD,eAACmpB,GAAD,Q,8BCtDK8D,GAAgB,SAAC,GAA6B,IAA5B1nD,EAA2B,EAA3BA,QACrB5D,EAAWoF,GAAMC,WAAWK,OAAO9B,QACzC,MAAgB,YAAZA,GACAwB,GAAMzD,SAASpB,EAAoB,CAACW,YAAY,EAAMlB,SAAS4D,KVEnE4d,GAAgBW,4BAA4BhjB,IAAcijB,gBUA/C,GACAxe,IAAY5D,GAAyB,YAAbA,GAAsC,YAAZ4D,GACzDwB,GAAMzD,SAASpB,EAAoB,CAACP,SAAS4D,KAC7CwB,GAAMzD,SAASmM,GAAa,CAAClK,aVCjC4d,GAAgBW,4BAA4BhjB,IAAcC,aUE/C,IAEPgG,GAAMzD,SAASpB,EAAoB,CAACW,YAAY,EAAOlB,SAAS4D,MACzD,ICdF2nD,GAAe,SAACC,GACzB,IAAM9pD,EAAU0D,GAAMC,WAAW3D,QACN,KAAvBA,EAAQzC,YAAqByC,EAAQzC,aAAeusD,GACpDtwC,GAAM,6DACN9V,GAAMzD,SAASP,OAAmBzB,IAClC6hB,GAAgBc,iBAAiBkpC,IAC3BA,GAAmC,KAAlBA,IACvBtwC,GAAM,+CAA+CswC,GACjD9pD,IAAmC,IAAvBA,EAAQrC,WACpB6b,GAAM,sDACNsG,GAAgBc,iBAAiBkpC,IAC1B9pD,EAAQrC,WAAaqC,EAAQpC,QAAUoC,EAAQnC,UACtD2b,GAAM,kFAAmFxZ,GACzF8f,GAAgBO,sBAEhB7G,GAAM,uDACNsG,GAAgBe,qBCZrB,SAASkpC,GAAT,GAAsE,IAA7CjrD,EAA4C,EAA5CA,MACrBsY,EAAmB+C,KAAnB/C,gBCIJ,YAAiE,EAA5CtY,MAA6C,IACrE,EAOIgB,IANAE,EADJ,EACIA,QACAQ,EAFJ,EAEIA,WACAL,EAHJ,EAGIA,aACa6kD,EAJjB,EAIIrlD,YACAe,EALJ,EAKIA,cACQyrB,EANZ,EAMI5tB,OAEJ,EAA4Csb,KAAhBC,GAA5B,EAAQtD,mBAAR,EAA4BsD,aAE5B,EAA2CZ,KAApC9M,EAAP,EAAOA,aACA8W,GADP,EAAqBhhB,QACIkqB,eAAlBlJ,gBACP,EAAwC9iB,IAAMquB,SAAmC,QAAjF,oBAAOu7B,EAAP,KAAqBC,EAArB,KACA7pD,IAAMosB,WAAU,WACRw9B,IAAiBhrD,IAAWC,SAAWktB,IAAkBntB,IAAWS,OACpEwqD,EAAgB,QAChBjF,OAEL,CAACgF,EAAa79B,IACjB,IAAM+9B,EAAgB9pD,IAAMC,YAAN,uCAAkB,qCAAAsC,EAAA,6DACWwnD,EADX,EACWA,SACAjoD,EAFX,EAEWA,QAEzC3E,EAAa4sD,EAAU,GAC7B3wC,GAAM,4DACA4wC,EAAcR,GAAc,CAAC1nD,YACnCsX,GAAM,2DACF4wC,GACAP,GAAatsD,GAEjBmD,GAAc,GACdwiB,EAAe,CAACC,OAAM,YAAI3iB,SAAJ,SAAyB4iB,KAAMC,KAAkB28B,iBAZnC,UAa9B7+B,aAAMxH,IAbwB,QAcpCuJ,EAAe,CAACC,QAAQ,EAAOC,KAAMC,KAAkB28B,iBAdnB,4CAAlB,sDAgBnB,CAACx/C,EAAY0iB,EAAgBxiB,IAE1B2pD,EAA0BjqD,IAAMC,YAAN,sBAAkB,sBAAAsC,EAAA,6DAC9CxC,EAAa,CAACuY,sBAAsB,IACpCuxC,EAAgBjrD,IAAWC,SAFmB,SAGxCkiB,aAAMxH,IAHkC,OAK9CG,IAL8C,2CAM/C,CAAC3Z,EAAc8pD,IAEZK,EAAclqD,IAAMC,aAAY,YAAuE,EAArEqQ,KAAqE,EAA/D65C,SAC1Cn+C,EAAa,CAAClK,QAA8B,IAArBlC,EAAQ1B,UAAwC,IAArB0B,EAAQ1B,SAAiB0B,EAAQ1B,SAAW,IAC9F6B,IACA6kD,MACD,CAAC7kD,EAAc6kD,EAAoB54C,EAAcpM,EAAQ1B,WAE5DihD,aAAe,CAAC8K,0BAAyBC,cAAaJ,kBDvDtDM,CAAW,CAAC1rD,UACZ,MAKI+N,KAJAH,EADJ,EACIA,mBACAI,EAFJ,EAEIA,YACQ6tB,EAHZ,EAGIp8B,OACaksD,EAJjB,EAII9qD,YAEJ,EAKIka,KAJArD,EADJ,EACIA,mBACAsD,EAFJ,EAEIA,YACQ8gB,EAHZ,EAGIr8B,OACamsD,EAJjB,EAII/qD,YAEJ,EAA0EG,IAAnEE,EAAP,EAAOA,QAAiBmsB,EAAxB,EAAgB5tB,OAAhB,EAAuCoB,YAEvCS,IAAMosB,WAAU,WACZ,GAAIL,IAAkBntB,IAAWY,OAASd,IAAUE,IAAWS,KAAM,CACjE,OAAQO,EAAQxC,YACZ,IAAK,aACL,IAAK,gBACDsP,IACA,MACJ,IAAK,aACL,IAAK,aACL,IAAK,SACDgN,IACI6gB,IAAuB37B,IAAWC,SAClCyN,IAEJ,MACJ,IAAK,YAEGiuB,IAAuB37B,IAAWC,SAClCyN,IAEAkuB,IAAuB57B,IAAWC,SAClCuX,IAKZY,OAGL,CAAC+U,EAAertB,EAAOkB,EAAQxC,aAClC4C,IAAMosB,WAAU,WACZ,OAAQmO,GACJ,KAAK37B,IAAWO,MAKhB,KAAKP,IAAWS,KACZgrD,OAOT,CAAC9vB,IACJv6B,IAAMosB,WAAU,WACZ,OAAQoO,GACJ,KAAK57B,IAAWO,MAKhB,KAAKP,IAAWS,KACZirD,OAOT,CAAC9vB,IEjFR,I,MAAM+vB,GAAWj9B,aAAOC,KAAPD,CAAH,2PAWDk9B,GAAY,SAAC,GAA+B,IAA9BC,EAA6B,EAA7BA,WAGhB9+B,EAAKwP,aAAe,SAApBxP,EAEP,OAAO,qCACH,eAAC29B,GAAA,EAAD,UAEI,eAACiB,GAAD,CAAUh2B,KAAM,EAAGF,QAAS,OAAQ0E,WAAY,aAAcD,eAAgB,SACpExE,cAAe,SAAU2E,UAAW,EAAG5G,OAAQ,IAAKuf,SAAU,KADxE,SAGI,gBAACrkB,GAAA,EAAD,CAAKm9B,UAAW,SAAUxxB,SAAU,WAAYyxB,KAAM,IAAKC,KAAM,GAAjE,UACI,eAAClgB,GAAA,EAAD,CAAYD,UAAW,KAAMG,QAAS,KAAtC,SACKjf,EAAE8+B,KAEP,eAAC/f,GAAA,EAAD,CAAY/V,QAAS,EAAG8V,UAAW,IAAKG,QAAS,QAASD,MAAO,gBAAjE,SACI,gBAACkS,GAAA,EAAD,CAAOC,QAZd,iBAYO,yDACgD,eAACzB,GAAA,EAAD,CAC5C5Q,UAAW,IACX/V,QAAS,SAAC5lB,GACNsF,OAAOC,SAASinC,K9CTzC,WAAuG,IAAD,EAA9E1uC,EAA8E,uDAA5D,6BAA8BwX,EAA8B,uDAAhB,eACnFymC,EAAK,UAAGz1C,qlBAAY01C,wBAAf,QAAmC,sBAC9C,MAAM,UAAN,OAAiBD,EAAjB,oBAAkCj+C,EAAlC,iBAAkDwX,G8COC2mC,GACvBj8C,EAAEk8C,kBAJsC,wBADhD,IAOmB,wBAPnB,oDC1BlBT,GAAWj9B,aAAOC,KAAPD,CAAH,kRAEV,gBAAEE,EAAF,EAAEA,MAAF,OAAay9B,aAAS,CAACz9B,aAiBd09B,GAAc,WACX/vB,aAAe,UAApBxP,EACP,OAAO,qCAGC,eAAC,GAAD,CAAU4I,KAAM,EAAGF,QAAS,OAAQ0E,WAAY,SAAUD,eAAgB,SAChExE,cAAe,SAAUjC,OAAQ,OAASiH,MAAO,OAD3D,SAEI,sBAAKzE,UAAU,wBAAwB0U,MAAM,IAA7C,SACI,sBAAK4hB,QAAQ,MAAMvxB,GAAG,WAAWwxB,MAAM,6BAClCC,WAAW,+BAA+BnqC,EAAE,MAAMG,EAAE,MACpDiY,MAAM,OAAOjH,OAAO,OAAOi5B,QAAQ,YAAYC,iBAAkB,gBACjEC,SAAS,WAHd,SAIlB,uBAAMC,KAAK,OACLC,EAAE,8KADR,SAEE,mCAAkBC,cAAc,MACdC,cAAc,YACdt7C,KAAK,SACL0V,KAAK,UACLE,GAAG,YACH2lC,IAAI,OACJC,YAAY,0BC4BnBC,GA7DH,WACV,IAAMv+B,EAAew+B,eACLvuC,EAAe0d,eAAvBuW,KAAQj0B,SACVwuC,EAAW3oD,GAAMC,WAAWqZ,SAASa,SAG3Czd,IAAMosB,WAAU,WACV6/B,IAAaxuC,GACfna,GAAMzD,SAAS2d,aAAYC,MAE5B,IAEH,IAAQ/e,ECCH,WACH,MAA0BsB,IAAMquB,SAAkC,WAAlE,oBAAO3vB,EAAP,KAAcwtD,EAAd,KAGA,EAAoGxsD,IAA7FE,EAAP,EAAOA,QAASO,EAAhB,EAAgBA,cAAeJ,EAA/B,EAA+BA,aAC/B,GADA,EAA6C5B,OAA7C,EAAkEoB,YACEmJ,MAArDyjD,EAAf,EAAOhuD,OAAqCiuD,EAA5C,EAA+B7sD,YAC/B,EAAgEyB,IAAjDguC,EAAf,EAAO7wC,OAAmCkuD,EAA1C,EAA6B9sD,YAC7B,EAA6EuZ,KAAtE9M,EAAP,EAAOA,aAAsBsgD,EAA7B,EAAqBnuD,OAAmCouD,EAAxD,EAA2ChtD,YAC3C,EAA6E+B,KAA/D26C,EAAd,EAAO99C,OAAwCquD,EAA/C,EAAmCjtD,YACnC,EAAoEwa,KAArDg1B,EAAf,EAAO5wC,OAAwCsuD,EAA/C,EAAkCltD,YAClC,EAA8DoZ,KAA/CwX,EAAf,EAAOhyB,OAAkCiyB,EAAzC,EAA4B7wB,YAgJ5B,OA9IAm2B,GAAiB,sBAAC,sCAAAnzB,EAAA,yDAGa,KAAvB3C,EAAQzC,aAAqByC,EAAQ7B,aAAuC,YAAxB6B,EAAQ7B,YAHlD,0CAKAwa,KAAiB3Y,EAAQ7B,aAAc6B,EAAQzC,YAL/C,UAMNgD,EAAc,KACVoY,KAAgBylC,cAAezlC,KAAgBsH,SAP7C,8BAUYxY,OAAM,UAACkR,KAAgBylC,mBAAjB,iBAAC,EAA6B0O,iBAA9B,aAAC,EAAwC5qD,gBAV3D,kEAUwEuF,OAVxE,UAUqFkR,KAAgBsH,SAASo+B,IAAIC,aAVlH,uDAUEp8C,EAVF,UAWuBjE,IAArB2W,KAAQ1S,KACRA,EAAUlC,EAAQ1B,UAAgC,YAApB0B,EAAQ1B,SAAuB0B,EAAQ1B,SAAWsW,KAAQG,SAG5F3I,EAAa,CAAClK,QAAQA,IAfpB,6EAoBN48C,KAAeC,eAAe,GAA9B,uDACM78C,EAAUlC,EAAQ1B,UAAgC,YAApB0B,EAAQ1B,SAAuB0B,EAAQ1B,SAAWsW,KAAQG,QAC9F3I,EAAa,CAAClK,YAtBR,gCAyBgB,KAAvBlC,EAAQzC,YAA8C,YAAxByC,EAAQ7B,aACrCgC,IAEE+B,EAAUlC,EAAQ1B,UAAgC,YAApB0B,EAAQ1B,SAAuB0B,EAAQ1B,SAAWsW,KAAQG,QAC9F3I,EAAa,CAAClK,YA7BJ,0DAgCf,IACH9B,IAAMosB,WAAU,WACZ,OAAQkgC,GACJ,KAAK1tD,IAAWC,QACTH,IAAQE,IAAWC,SAClBqtD,EAASttD,IAAWC,SAExB,MACJ,KAAKD,IAAWO,MACZotD,IACAL,EAAS,SAET,MACJ,KAAKttD,IAAWS,KACZktD,OAKT,CAACD,IACJtsD,IAAMosB,WAAU,WACZ,OAAQ+/B,GACJ,KAAKvtD,IAAWO,MACZitD,IACAF,EAAS,SACT,MACJ,KAAKttD,IAAWS,KACZ+sD,IAKR,OAAQpd,GACJ,KAAKpwC,IAAWO,MACZktD,IACAH,EAAS,SACT,MACJ,KAAKttD,IAAWS,KACZgtD,IAKLF,IAAmBvtD,IAAWY,OAASwvC,IAAkBpwC,IAAWY,OACnE0sD,EAAS,UAEd,CAACC,EAAend,IACnBhvC,IAAMosB,WAAU,WACZ,OAAQ6vB,GACJ,KAAKr9C,IAAWO,MAKhB,KAAKP,IAAWS,KACZmtD,OAKT,CAACvQ,IACJj8C,IAAMosB,WAAU,WACZ,OAAQ+D,GACJ,KAAKvxB,IAAWO,MACZ4R,QAAQO,IAAI,QAAS,uBACrB8e,IACA,MACJ,KAAKxxB,IAAWC,QACZ,MACJ,KAAKD,IAAWS,KACZ+wB,OAKT,CAACD,IACJnwB,IAAMosB,WAAU,WACZ,OAAQ2iB,GACJ,KAAKnwC,IAAWO,MACZ4R,QAAQO,IAAI,QAAS,mBACrBm7C,IACA,MACJ,KAAK7tD,IAAWC,QACZ,MACJ,KAAKD,IAAWS,KACZotD,OAKT,CAAC1d,IAEJ4a,GAAe,CAACjrD,UAkBT,CACHA,SD5JYiuD,GAAVjuD,MAgBN,OAAO,uCAAE,eAACkuD,GAAA,EAAD,CAAcC,OAAQC,aAAF,mNACzBC,aAAU,CAAEv/B,UAEO,SAAfA,EAAMw/B,KAAN,+BACSx/B,EAAMy/B,UAAUC,YADzB,oBAKa,SAAf1/B,EAAMw/B,KAAN,6DAEC,MASQ,YAAVtuD,EACC,eAAC,GAAD,IAGY,UAAVA,EAAoB,eAAC,GAAD,eAAewM,IAAS2J,mBAAuB,qCACnE,eAAC,GAAD,U,qDEvCNs4C,GAAcntD,IAAM8lC,MAAK,YAAsC,IAApCsnB,EAAmC,EAAnCA,SACvBC,EAAyC,CAC3CC,aAASpqC,IAAiB,CAAC5f,WAC3BgqD,aAASC,KAA6B,CAACC,YAAaC,OACpDH,aAASI,KAAwB,CAAChc,KAAMA,QAE5C,OAAQ,eAAC,IAAD,CAAkB2b,UAAWA,EAA7B,SAAyCD,OAE/CO,GAAiB3tD,IAAM8lC,MAAK,YAAsC,IAApCsnB,EAAmC,EAAnCA,SACzBQ,EAAap1B,eAAbo1B,UACDP,EAAyC,CAC3CC,aAASO,KAAwB,CAACrgC,MAAOsgC,aAASF,KAClDN,aAASS,KAAsB,CAACvgC,MAAOsgC,aAASF,KAChDN,aAASU,KAAoB,CAAChwC,aAAWiwC,QAAS,QAEtD,OAAQ,eAAC,IAAD,CAAkBZ,UAAWA,EAA7B,SAAyCD,OAIrDc,IAASC,OACD,eAAChB,GAAD,UACI,eAACQ,GAAD,UACI,eAAC,GAAD,QAGZ3pC,SAASoqC,eAAe,W","file":"static/js/main~06837ae4.96337598.chunk.js","sourcesContent":["import { createSlice, PayloadAction, Slice } from '@reduxjs/toolkit'\nimport { SliceCaseReducers } from '@reduxjs/toolkit/src/createSlice';\nimport { Account, AccountState, AccountStatus, ConnectProviders, SagaStatus } from '@loopring-web/common-resources';\n\n// import { Lv2Account, } from 'defs/account_defs'\n// import { AccountStatus } from 'state_machine/account_machine_spec'\n// import { UserStorage } from 'storage'\n// const initialState = (initState:Partial<AccountState>) => {\n//   // const defaultAccId = process.env.REACT_APP_TEST_ACCOUND_ID ? process.env.REACT_APP_TEST_ACCOUND_ID : UserStorage.getAccountId()\n//   // const defaultApiKey = process.env.REACT_APP_TEST_API_KEY ? process.env.REACT_APP_TEST_API_KEY : UserStorage.getApikey()\n//   // const defaultOwner = process.env.REACT_APP_TEST_OWNER ? process.env.REACT_APP_TEST_OWNER : UserStorage.getAccount()\n//   // const defaultEddsaKey = process.env.REACT_APP_TEST_EDDSA_KEY ? process.env.REACT_APP_TEST_EDDSA_KEY : UserStorage.getEddsakey()\n//\n//   // const defaultStatus = AccountStatus.UNCONNNECTED\n//   // return {\n//   //   accAddr: defaultOwner,\n//   //   status: defaultStatus,\n//   //   accountId: defaultAccId,\n//   //   publicKey: {},\n//   //   nonce: 0,\n//   //   isContractAddress: false,\n//   //   apiKey: defaultApiKey,\n//   //   eddsaKey: defaultEddsaKey,\n//   //   connectName: ConnectorNames.unknown,\n//   //   connectNameTemp: ConnectorNames.unknown,\n//   // } as Lv2Account\n//   return {\n//     accAddress: '',\n//     status: AccountStatus.UN_CONNECT,\n//     accountId: '',\n//     apiKey: '',\n//     eddsaKey: '',\n//     connectName: ConnectProviders.UnKnow,\n//     // ...initState,\n//   }\n// }\nconst initialState: AccountState = {\n    accAddress: '',\n    readyState: AccountStatus.UN_CONNECT,\n    accountId: -1,\n    apiKey: '',\n    eddsaKey: '',\n    publicKey: {},\n    level: '',\n    nonce: undefined,\n    keyNonce: undefined,\n    connectName: ConnectProviders.unknown,\n    _chainId: 1,\n    status: 'PENDING',\n    errorMessage: null,\n\n}\n\nconst accountSlice: Slice<AccountState> = createSlice<AccountState, SliceCaseReducers<AccountState>>({\n    name: 'account',\n    initialState: initialState,\n    reducers: {\n        updateAccountStatus(state: AccountState, action: PayloadAction<Partial<Account>>) {\n            state.status = SagaStatus.PENDING\n        },\n        changeShowModel(state: AccountState, action: PayloadAction<{_userOnModel:boolean|undefined}>) {\n            const {\n                _userOnModel\n            } = action.payload;\n            state._userOnModel = _userOnModel;\n        },\n        nextAccountStatus(state: AccountState, action: PayloadAction<Partial<Account>>) {\n            // @ts-ignore\n            if (action.error) {\n                state.status = SagaStatus.ERROR\n                // @ts-ignore\n                state.errorMessage = action.error\n            } else {\n                const {\n                    accAddress,\n                    readyState,\n                    accountId,\n                    wrongChain,\n                    level,\n                    apiKey,\n                    eddsaKey,\n                    _chainId,\n                    nonce,\n                    connectName,\n                    // _userOnModel\n                } = action.payload;\n                \n                if (accAddress !== undefined) {\n                    state.accAddress = accAddress;\n                }\n                if(wrongChain !== undefined){\n                    state.wrongChain = wrongChain\n                }\n                if (readyState) {\n                    state.readyState = readyState;\n                }\n                if (accountId !== undefined) {\n                    state.accountId = accountId;\n                }\n                if (level !== undefined) {\n                    state.level = level;\n                }\n                if (apiKey !== undefined) {\n                    state.apiKey = apiKey;\n                }\n                if (eddsaKey !== undefined) {\n                    state.eddsaKey = eddsaKey;\n                }\n                if (connectName !== undefined) {\n                    state.connectName = connectName;\n                }\n                if (_chainId !== undefined) {\n                    state._chainId = _chainId;\n                }\n                if (nonce !== undefined) {\n                    state.nonce = nonce;\n                }\n                state.status = SagaStatus.DONE;\n            }\n        },\n        cleanAccountStatus(state: AccountState, action: PayloadAction<{shouldUpdateProvider?:boolean|undefined}>) {\n            state.status = SagaStatus.PENDING\n        },\n        statusUnset: (state: AccountState) => {\n            state.status = SagaStatus.UNSET\n        }\n    },\n})\nexport default accountSlice\nexport const {\n    updateAccountStatus,\n    // restAccountStatus,\n    changeShowModel,\n    cleanAccountStatus,\n    nextAccountStatus,\n    statusUnset\n} = accountSlice.actions\n\n","import { useDispatch, useSelector } from 'react-redux'\nimport {\n    changeShowModel,\n    cleanAccountStatus,\n    statusUnset, updateAccountStatus\n} from './reducer';\nimport React from 'react';\nimport { Account, AccountState } from '@loopring-web/common-resources';\nimport { RootState } from 'stores';\n\nexport function useAccount() {\n    const {status, errorMessage, ...account}: AccountState = useSelector((state: RootState) => state.account);\n    // const [shouldShow,setShouldShow] = React.useState(account._userOnModel)\n    const dispatch = useDispatch();\n    \n    const resetAccount = React.useCallback( (props?:{shouldUpdateProvider?:boolean|undefined}) => {\n        dispatch(cleanAccountStatus(props));\n    }, [dispatch])\n\n    const updateAccount = React.useCallback((account: Partial<Account>) => {\n        dispatch(updateAccountStatus(account))\n    }, [dispatch]);\n\n    const shouldShow = React.useMemo(()=>{\n        return  account._userOnModel\n    }, [account]);\n\n    const setShouldShow = React.useCallback((flag:boolean)=>{\n        dispatch(changeShowModel({_userOnModel: flag}));\n    },[dispatch]);\n\n\n    return {\n        account,\n        resetAccount,\n        shouldShow,\n        setShouldShow,\n        updateAccount,\n        statusUnset: React.useCallback(() => {dispatch(statusUnset(undefined))}, [dispatch]),\n        status,\n        errorMessage,\n    }\n\n}\n","import { createAction } from '@reduxjs/toolkit'\n\n// fired once when the app reloads but before the app renders\n// allows any updates to be applied to store data loaded from localStorage\nexport const updateVersion = createAction<void>('global/updateVersion')\n","import { createSlice, PayloadAction, Slice } from '@reduxjs/toolkit'\nimport { AmmMapStates, GetAmmMapParams } from './interface';\nimport { SagaStatus } from '@loopring-web/common-resources';\n\n\nconst initialState: Required<AmmMapStates<object, object>> = {\n    ammMap: undefined,\n    __timer__: -1,\n    status: 'PENDING',\n    errorMessage: null,\n}\nconst ammMapSlice: Slice = createSlice({\n    name: 'ammMap',\n    initialState,\n    reducers: {\n        getAmmMap(state, action: PayloadAction<GetAmmMapParams>) {\n            state.status = SagaStatus.PENDING\n        },\n        getAmmMapStatus(state, action: PayloadAction<AmmMapStates<any, any>>) {\n            // @ts-ignore\n            if (action.error) {\n                state.status = SagaStatus.ERROR\n                // @ts-ignore\n                state.errorMessage = action.error\n            }\n            const {ammMap, __timer__} = action.payload\n            if (ammMap) {\n                state.ammMap = ammMap;\n            }\n            if (__timer__) {\n                state.__timer__ = __timer__;\n            }\n            state.status = SagaStatus.DONE\n        },\n        updateRealTimeAmmMap(state, action: PayloadAction<undefined>) {\n            state.status = SagaStatus.PENDING\n        },\n        statusUnset: state => {\n            state.status = SagaStatus.UNSET\n        }\n    },\n});\nexport { ammMapSlice };\nexport const {getAmmMap, getAmmMapStatus, statusUnset, updateRealTimeAmmMap} = ammMapSlice.actions\n","import { useDispatch, useSelector } from 'react-redux'\nimport { AmmMapStates } from './interface';\nimport React from 'react';\nimport { getAmmMap, statusUnset } from './reducer';\n\nexport const useAmmMap = <R extends {[key:string]:any},I extends {[key:string]:any}>(): AmmMapStates<R,I> & {\n    getAmmMap:()=> void,\n    statusUnset:()=> void,\n} => {\n    const ammMap:AmmMapStates<R,I>= useSelector((state: any) => state.amm.ammMap)\n    const dispatch = useDispatch();\n    return {\n        ...ammMap,\n        statusUnset:React.useCallback(()=>dispatch(statusUnset(undefined)),[dispatch]),\n        getAmmMap:React.useCallback(()=>dispatch(getAmmMap(undefined)),[dispatch]),\n    }\n}\n","import { createSlice, PayloadAction, Slice } from '@reduxjs/toolkit'\nimport { AmmActivityMapStates } from './interface';\nimport { SagaStatus } from '@loopring-web/common-resources';\n\n\nconst initialState: Required<AmmActivityMapStates> = {\n    ammActivityMap: {},\n    status: 'PENDING',\n    errorMessage: null,\n}\nconst ammActivityMapSlice: Slice = createSlice({\n    name: 'ammActivityMap',\n    initialState,\n    reducers: {\n        getAmmActivityMap(state, action: PayloadAction<string | undefined>) {\n            state.status = SagaStatus.PENDING\n        },\n        getAmmActivityMapStatus(state, action: PayloadAction<AmmActivityMapStates>) {\n            // @ts-ignore\n            if (action.error) {\n                state.status = SagaStatus.ERROR\n                // @ts-ignore\n                state.errorMessage = action.error\n            }\n            state.ammActivityMap = {...action.payload.ammActivityMap};\n            state.status = SagaStatus.DONE\n        },\n        statusUnset: state => {\n            state.status = SagaStatus.UNSET\n        }\n\n    },\n});\nexport { ammActivityMapSlice };\nexport const {getAmmActivityMap, getAmmActivityMapStatus, statusUnset} = ammActivityMapSlice.actions\n","import { useDispatch, useSelector } from 'react-redux'\nimport { AmmActivityMapStates } from './interface';\nimport { ammActivityMapSlice, getAmmActivityMap, statusUnset } from './reducer';\nimport React from 'react';\n\nexport function useAmmActivityMap(): AmmActivityMapStates & {\n    getAmmActivityMap:()=> void,\n    statusUnset:()=> void,\n} {\n    const ammActivityMap:AmmActivityMapStates = useSelector((state: any) => state.amm.ammActivityMap)\n    const dispatch = useDispatch();\n    return {\n        ...ammActivityMap,\n        statusUnset: React.useCallback(()=>dispatch(statusUnset(undefined)),[dispatch]),\n        getAmmActivityMap: React.useCallback(()=>dispatch(getAmmActivityMap(undefined)),[dispatch])\n    }\n\n}\n","import { AmmpoolAPI, ChainId, ExchangeAPI, UserAPI, WalletAPI, WsAPI } from \"loopring-sdk\"\nimport store from 'stores'\n\nexport function getChainId() {\n    const chainId = store.getState().system.chainId as ChainId\n    return { chainId, }\n}\n\nexport class LoopringAPI {\n    \n    public static userAPI: UserAPI | undefined = undefined\n    public static exchangeAPI: ExchangeAPI | undefined = undefined\n    public static ammpoolAPI: AmmpoolAPI | undefined = undefined\n    public static walletAPI: WalletAPI | undefined = undefined\n    public static wsAPI: WsAPI | undefined = undefined\n\n    public static InitApi = (chainId: ChainId) => {\n        LoopringAPI.userAPI = new UserAPI({ chainId }) \n        LoopringAPI.exchangeAPI = new ExchangeAPI({ chainId }) \n        LoopringAPI.ammpoolAPI = new AmmpoolAPI({ chainId }) \n        LoopringAPI.walletAPI = new WalletAPI({ chainId }) \n        LoopringAPI.wsAPI = new WsAPI({ chainId }) \n    }\n\n}\n","import { all, takeLatest, call, put } from \"redux-saga/effects\"\nimport { getAmmActivityMap, getAmmActivityMapStatus } from './reducer'\nimport { LoopringAPI } from 'api_wrapper';\nconst getAmmActivityMapApi = async () => {\n\n    if(LoopringAPI.ammpoolAPI){\n        const { groupByRuleTypeAndStatus } =  await LoopringAPI.ammpoolAPI.getAmmPoolActivityRules();\n        return  {data:groupByRuleTypeAndStatus}\n    }else{\n        return {data:undefined}\n    }\n\n}\n\nexport function* getPostsSaga() {\n    try {\n        //\n        const { data } = yield call(getAmmActivityMapApi);\n        yield put(getAmmActivityMapStatus({ammActivityMap:data}));\n    } catch (err) {\n        yield put(getAmmActivityMapStatus(err));\n    }\n}\n\nexport default function* ammActivityMapSaga() {\n    yield all([takeLatest(getAmmActivityMap, getPostsSaga)]);\n}\n","import { all, call, fork, put, takeLatest } from \"redux-saga/effects\";\nimport { getAmmMap, getAmmMapStatus, updateRealTimeAmmMap } from './reducer';\nimport { AmmDetail } from '@loopring-web/common-resources';\nimport store from '../../index';\nimport { AmmPoolInfoV3, AmmPoolStat, toBig, TokenVolumeV3, } from \"loopring-sdk\";\nimport { LoopringAPI } from \"api_wrapper\";\nimport { PayloadAction } from '@reduxjs/toolkit';\nimport { AmmDetailStore, GetAmmMapParams } from './interface';\nimport { volumeToCount, volumeToCountAsBigNumber } from '../../../hooks/help';\n\ntype AmmMap<R extends { [ key: string ]: any }> = { [ key: string ]: AmmDetail<R> } | {}  //key is AMM-XXX-XXX\nexport const setAmmState = ({ammPoolState, keyPair}: { ammPoolState: AmmPoolStat, keyPair: string }) => {\n    const {idIndex} = store.getState().tokenMap\n    // @ts-ignore\n    const [, coinA, coinB] = keyPair.match(/(\\w+)-(\\w+)/i);\n    const {forex,faitPrices} = store.getState().system;\n    if (idIndex && coinA && coinB && faitPrices && forex) {\n        let result =  {\n            amountDollar: parseFloat(ammPoolState.liquidityUSD),\n            amountYuan: (parseFloat(ammPoolState.liquidityUSD) / (forex ? forex : 6.5)),\n            totalLPToken: volumeToCount('LP-' + keyPair, ammPoolState.lpLiquidity),\n            totalA: volumeToCount(coinA, ammPoolState.liquidity[ 0 ]),//parseInt(ammPoolState.liquidity[ 0 ]),\n            totalB: volumeToCount(coinB, ammPoolState.liquidity[ 1 ]),//parseInt(ammPoolState.liquidity[ 1 ]),\n            rewardValue: ammPoolState.rewards[ 0 ] ? volumeToCount(idIndex[ ammPoolState.rewards[ 0 ].tokenId as number ], ammPoolState.rewards[ 0 ].volume) : undefined,\n            rewardToken: ammPoolState.rewards[ 0 ] ? idIndex[ ammPoolState.rewards[ 0 ].tokenId as number ] : undefined,\n            rewardValue2: ammPoolState.rewards[ 1 ] ? volumeToCount(idIndex[ ammPoolState.rewards[ 1 ].tokenId as number ], ammPoolState.rewards[ 1 ].volume) : undefined,\n            rewardToken2: ammPoolState.rewards[ 1 ] ? idIndex[ ammPoolState.rewards[ 1 ].tokenId as number ] : undefined,\n        }\n\n        const feeA =  volumeToCountAsBigNumber(coinA, ammPoolState.fees[ 0 ]);//parseInt(ammPoolState.fees[ 0 ]),\n        const feeB = volumeToCountAsBigNumber(coinB, ammPoolState.fees[ 1 ]);//parseInt(ammPoolState.fees[ 1 ]),\n        const feeDollar =  faitPrices[coinA] && faitPrices[coinB]  ?\n            toBig(feeA||0).times(faitPrices[coinA].price).plus(toBig(feeB||0).times(faitPrices[coinB].price)):undefined\n        const feeYuan = feeDollar ? feeDollar.times(forex) : undefined;\n\n        return {\n             ...result,\n            feeA:feeA?.toNumber(),\n            feeB:feeB?.toNumber(),\n            feeDollar:feeDollar? feeDollar.toNumber(): undefined,\n            feeYuan:feeYuan? feeYuan.toNumber(): undefined,\n            tradeFloat: {\n                change: undefined,\n                timeUnit: '24h',\n                // priceYuan: 100,\n                // priceDollar: 1.23123,\n                // floatTag: FloatTag.increase,\n                // reward: 12312,\n                // APY: (parseInt(ammPoolState.apyBips) * 1.0 / 100)\n            },\n            APY: (parseInt(ammPoolState.apyBips) * 1.0 / 100)\n        }\n\n\n    }\n}\nconst getAmmMapApi = async <R extends { [ key: string ]: any }>({ammpools}: GetAmmMapParams) => {\n\n    if (!LoopringAPI.ammpoolAPI) {\n        return undefined\n    }\n\n    let ammMap: AmmMap<R> = {}\n    const {ammPoolStats} = (await LoopringAPI.ammpoolAPI?.getAmmPoolStats());\n\n    let {__timer__} = store.getState().amm.ammMap\n    __timer__ = (() => {\n        if (__timer__ && __timer__ !== -1) {\n            clearInterval(__timer__)\n        }\n        return setInterval(async () => {\n\n            if (!LoopringAPI.ammpoolAPI) {\n                return undefined\n            }\n            \n            let ammPoolStats: { [key in keyof R]: AmmPoolStat } = (await LoopringAPI.ammpoolAPI.getAmmPoolStats()).ammPoolStats as { [key in keyof R]: AmmPoolStat }\n            store.dispatch(updateRealTimeAmmMap({ammPoolStats}))\n        }, 900000)    //15*60*1000 //900000\n    })()\n    const {tokenMap: {coinMap, idIndex}} = store.getState();\n\n    // const forex = faitPrices.prices['USDC']\n\n\n    Reflect.ownKeys(ammpools).forEach(async (key) => {\n        const item: AmmPoolInfoV3 = ammpools[ key as string ]\n        if (item.market === key && item.tokens.pooled && idIndex) {\n\n            // const tokenA =  ; //getTokenInfoById(tokens.tokenIdMap, parseInt(item.tokens.pooled[0]))\n            // const tokenB =  ; // getTokenInfoById(tokens.tokenIdMap, parseInt(item.tokens.pooled[1]))\n            const coinA = idIndex[ item.tokens.pooled[ 0 ] as any ];\n            const coinB = idIndex[ item.tokens.pooled[ 1 ] as any ];\n            const dataItem: AmmDetailStore<R> = {\n                coinA: coinA,\n                coinB: coinB,\n                isNew: Date.now() - (Number(item.createdAt)) > 3 * 86400 * 1000 ? false : true,//3*24*60*60*1000,\n                isActivity: item.status === 7 ? true : false,\n                address: item.address,\n                ...setAmmState({ammPoolState: ammPoolStats[ key ], keyPair: `${coinA}-${coinB}`}),\n                __rawConfig__: item\n            } as AmmDetailStore<R>\n            // @ts-ignore\n            ammMap[ item.market ] = dataItem\n\n\n        }\n\n\n    })\n    return {ammMap, __timer__}\n}\n\n\nexport function* getPostsSaga({payload}: PayloadAction<GetAmmMapParams>) {\n    try {\n        const {ammpools} = payload;\n        const {ammMap, __timer__} = yield call(getAmmMapApi, {ammpools});\n        yield put(getAmmMapStatus({ammMap, __timer__}));\n    } catch (err) {\n        yield put(getAmmMapStatus(err));\n    }\n}\n\nexport function* updateRealTimeSaga({payload}: any) {\n    try {\n        const {ammPoolStats} = payload;\n        let {ammMap}: { ammMap: AmmMap<object> } = store.getState().amm.ammMap;\n        if (ammPoolStats) {\n            //{ ammPoolStats?: { [ key: string ]: AmmPoolStat } }\n            Reflect.ownKeys(ammPoolStats).map((key) => {\n                const keyPair = (key as string).replace('AMM-', '')\n                \n                // @ts-ignore\n                ammMap[ key ] = {\n                    // @ts-ignore\n                    ...ammMap[ key ],\n                    ...setAmmState({ammPoolState: ammPoolStats[ key as string ], keyPair, })\n                }\n                return ammMap\n            })\n        }\n        yield put(getAmmMapStatus({ammMap}));\n    } catch (err) {\n        yield put(getAmmMapStatus(err));\n    }\n}\n\n\nexport function* ammMapInitSaga() {\n    yield all([takeLatest(getAmmMap, getPostsSaga)]);\n}\n\nexport function* ammMapRealTimeSaga() {\n    yield all([takeLatest(updateRealTimeAmmMap, updateRealTimeSaga)]);\n}\n\nexport const ammMapSaga = [\n        fork(ammMapInitSaga),\n        fork(ammMapRealTimeSaga),\n]\n\n","import { combineReducers } from '@reduxjs/toolkit';\n// import { ammRecordSlice } from './AmmConfig';\n// import { ammTradesSlice } from './AmmTrades';\nimport { ammMapSlice } from './AmmMap';\nimport { ammActivityMapSlice } from './AmmActivityMap';\nimport ammActivityMapSaga from './AmmActivityMap/saga';\nimport { ammMapSaga } from './AmmMap/saga';\n// import ammTradesSaga from './AmmTrades/saga';\nimport {  fork } from 'redux-saga/effects';\n\nexport const  ammReducer = combineReducers({\n    // ammRecord: ammRecordSlice.reducer,\n    // ammTrades: ammTradesSlice.reducer,\n    ammMap: ammMapSlice.reducer,\n    ammActivityMap:ammActivityMapSlice.reducer\n})\nexport const ammForks =  [\n    fork(ammActivityMapSaga),\n    ...ammMapSaga,\n    // fork(ammRecordSaga),\n    // fork(ammTradesSaga)\n]\n\n// export * from './interface'\n","import { createSlice, PayloadAction, Slice } from '@reduxjs/toolkit'\nimport { GetTokenMapParams, TokenMapStates } from './interface';\nimport { SagaStatus } from '@loopring-web/common-resources';\n\nconst initialState: TokenMapStates<object> = {\n    coinMap: {},\n    totalCoinMap: {},\n    addressIndex: undefined,\n    tokenMap: undefined,\n    marketMap: undefined,\n    idIndex: undefined,\n    status: 'PENDING',\n    errorMessage: null,\n}\nconst tokenMapSlice: Slice<TokenMapStates<object>> = createSlice({\n    name: 'tokenMap',\n    initialState,\n    reducers: {\n        getTokenMap(state, action: PayloadAction<GetTokenMapParams<any>>) {\n            state.status = SagaStatus.PENDING\n        },\n        getTokenMapStatus(state, action: PayloadAction<TokenMapStates<object>>) {\n            // @ts-ignore      console.log(action.type)\n            if (action.error) {\n                state.status = SagaStatus.ERROR\n                // @ts-ignore\n                state.errorMessage = action.error\n            }\n\n            const {\n                tokenMap,\n                totalCoinMap,\n                marketMap,\n                addressIndex,\n                idIndex,\n                coinMap,\n                marketArray,\n                marketCoins\n            } = action.payload;\n            if (tokenMap) {\n                state.tokenMap = tokenMap\n            }\n            if (marketMap) {\n                state.marketMap = marketMap\n            }\n            if (addressIndex) {\n                state.addressIndex = addressIndex\n            }\n            if (idIndex) {\n                state.idIndex = idIndex\n            }\n            if (coinMap) {\n                state.coinMap = coinMap\n            }\n            if (totalCoinMap) {\n                state.totalCoinMap = totalCoinMap\n            }\n            if (marketArray) {\n                state.marketArray = marketArray\n            }\n            if (marketCoins) {\n                state.marketCoins = marketCoins\n            }\n            // if (tokenPairsMap) {state.tokenPairsMap = tokenPairsMap }\n            state.status = SagaStatus.DONE;\n        },\n\n        // getTokenPairMap(state, action: PayloadAction<{tokenPairs: TokenPairs }>) {\n        //     const {tokenPairs} = action.payload;\n        //     const tokenPairsMap =  Reflect.ownKeys(tokenPairs).reduce((prev,key)=>{\n        //         // @ts-ignore\n        //         return prev[key as string] =  tokenPairs[key as string].tokenList\n        //     }, {} )\n        //     if (tokenPairsMap) {state.tokenPairsMap = tokenPairsMap }\n        //     // state.status = SagaStatus.PENDING\n        // },\n        statusUnset: state => {\n            state.status = SagaStatus.UNSET\n        }\n\n    },\n});\nexport { tokenMapSlice };\nexport const {getTokenMap, getTokenMapStatus, statusUnset} = tokenMapSlice.actions;","import { useDispatch, useSelector } from 'react-redux'\nimport { getTokenMap, statusUnset} from './reducer';\nimport { GetTokenMapParams, TokenMapStates } from './interface';\nimport React from 'react';\nimport { PayloadAction } from '@reduxjs/toolkit';\n\nexport function useTokenMap<R extends {[key:string]:any}>(): TokenMapStates<R> & {\n    getTokenMap:(props:PayloadAction<GetTokenMapParams<any>>)=>void,\n    statusUnset:()=>void,\n} {\n    const tokenMap:TokenMapStates<R> = useSelector((state: any) => state.tokenMap)\n    const dispatch = useDispatch();\n\n    return {\n        ...tokenMap,\n        statusUnset:React.useCallback(()=>dispatch(statusUnset(undefined)),[dispatch]),\n        getTokenMap:React.useCallback((props:PayloadAction<GetTokenMapParams<R>>)=>dispatch(getTokenMap(props)),[dispatch]),\n    }\n\n}\n","import { utils } from 'ethers'\n\nimport { TokenInfo, } from 'loopring-sdk'\n\nimport { CoinInfo, } from '@loopring-web/common-resources'\n\nexport function getIcon(symbol: string, tokens: any) {\n    const token: any = tokens[symbol]\n    return getIconByTokenInfo(token)\n}\n\nexport function getIconByTokenInfo(token: TokenInfo) {\n    if (token) {\n        const addr = utils.getAddress(token.address)\n        const path = `https://exchange.loopring.io/assets/images/ethereum/assets/${addr}/logo.png`\n        return path\n    }\n    return ''\n}\n\nexport function makeCoinInfo(token: TokenInfo) {\n    if (token) {\n        const info: CoinInfo<any> = {\n            icon: getIconByTokenInfo(token),\n            name: token.symbol,\n            simpleName: token.symbol,\n            description: token.name,\n            company: token.name,\n        }\n        return info\n    }\n    return undefined\n}","import { all, call, fork, put, takeLatest } from \"redux-saga/effects\";\nimport { getTokenMap, getTokenMapStatus } from './reducer';\nimport { getIcon } from '../../utils/swap_utils';\nimport { CoinInfo, CoinMap } from '@loopring-web/common-resources';\nimport { AddressMap, GetTokenMapParams, IdMap } from './interface';\nimport { PayloadAction } from '@reduxjs/toolkit';\n\nconst getTokenMapApi = async <R extends { [ key: string ]: any }>({\n                                                                      tokensMap,\n                                                                      pairs,\n                                                                      marketArr,\n                                                                      tokenArr\n                                                                  }: GetTokenMapParams<R>) => {\n    let coinMap: CoinMap<any, CoinInfo<any>> = {};\n    let totalCoinMap: CoinMap<any, CoinInfo<any>> = {};\n    let tokenMap:any = tokensMap;\n    let addressIndex: AddressMap = {};\n    let idIndex: IdMap = {};\n    Reflect.ownKeys(tokensMap).forEach((key) => {\n        const coinInfo = {\n            icon: getIcon(key as string, tokensMap),\n            name: key as string,\n            simpleName: key as string,\n            description: '',\n            company: '',\n        }\n        if (!(key as string).startsWith('LP-')) {\n            coinMap[ key as string ] = coinInfo\n        }\n        totalCoinMap[ key as string ] = coinInfo\n\n        if (pairs[ key as string ] && pairs[ key as string ].tokenList) {\n            // @ts-ignore\n            tokensMap[ key ].tradePairs = pairs[ key as string ].tokenList;\n        }\n        addressIndex = {\n            ...addressIndex,\n            // @ts-ignore\n            [ tokensMap[ key ].address ]: key as string\n        }\n        idIndex = {\n            ...idIndex,\n            // @ts-ignore\n            [ tokensMap[ key ].tokenId ]: key as string\n        }\n    })\n    return {data: {coinMap, totalCoinMap, addressIndex, idIndex, tokenMap, marketArray: marketArr, marketCoins: tokenArr}}\n};\n\nexport function* getPostsSaga<R extends { [ key: string ]: any }>({payload}: PayloadAction<GetTokenMapParams<R>>) {\n    try {\n        const {tokensMap, marketMap, pairs, marketArr,tokenArr} = payload\n        // @ts-ignore\n        const {data} = yield call(getTokenMapApi, {tokensMap, pairs, marketArr, tokenArr});\n\n        yield put(getTokenMapStatus({...data, marketMap}));\n    } catch (err) {\n        yield put(getTokenMapStatus(err));\n    }\n}\n\nexport function* tokenInitSaga() {\n    yield all([takeLatest(getTokenMap, getPostsSaga)]);\n}\n\n\nexport const tokenSaga = [\n    fork(tokenInitSaga),\n    // fork(tokenPairsSaga),\n]\n\n// export function* getPairsSaga({payload}:PayloadAction<{tokenPairs: TokenPairs }>) {\n//     try {\n//         const {tokenPairs} = payload;\n//         const tokenPairsMap =  Reflect.ownKeys(tokenPairs).reduce((prev,key)=>{\n//            // @ts-ignore\n//             return prev[key as string] =  tokenPairs[key as string].tokenList\n//         }, {} )\n//\n//         yield put(getTokenMapStatus({tokenPairsMap}));\n//     } catch (err) {\n//         yield put(getAmmMapStatus(err));\n//     }\n// }\n// export function* tokenPairsSaga() {\n//     yield all([takeLatest(getTokenPairMap, getPairsSaga)]);\n// }\n\n\n","import { createSlice, PayloadAction, Slice } from '@reduxjs/toolkit'\nimport { TickerStates } from './interface';\nimport { CoinKey, SagaStatus } from '@loopring-web/common-resources';\n\nconst initialState: Required<TickerStates> = {\n    tickerMap: {},\n    status: 'PENDING',\n    errorMessage: null,\n}\nconst tickerMapSlice: Slice = createSlice({\n    name: 'tickerMap',\n    initialState,\n    reducers: {\n        getTicker(state, action: PayloadAction<CoinKey<any>>) {\n            state.status = SagaStatus.PENDING\n        },\n        getTickers(state, action: PayloadAction<Array<CoinKey<any>>>) {\n            state.status = SagaStatus.PENDING\n        },\n        getTickerStatus(state, action: PayloadAction<TickerStates>) {\n            // @ts-ignore\n            if (action.error) {\n                state.status = SagaStatus.ERROR\n                // @ts-ignore\n                state.errorMessage = action.error\n            }\n            state.tickerMap = action.payload.tickerMap;//{...state.tickerMap,...};\n            state.status = SagaStatus.DONE\n        },\n        statusUnset: state => {\n            state.status = SagaStatus.UNSET\n        }\n\n    },\n});\nexport { tickerMapSlice };\nexport const {getTicker, getTickers, getTickerStatus, statusUnset} = tickerMapSlice.actions;","import { all, call, fork, put, takeLatest } from \"redux-saga/effects\"\nimport { getTicker, getTickers, getTickerStatus } from './reducer'\nimport { CoinKey, CustomError, ErrorMap, PairKey, TradeFloat } from '@loopring-web/common-resources'\n\n\nimport { LoopringAPI } from \"api_wrapper\"\nimport { makeTickerMap } from '../../hooks/help';\n\n\ntype TickerMap<R extends { [ key: string ]: any }> = {\n    [key in CoinKey<R> | PairKey<R>]?: TradeFloat & {\n    reward?: number, rewardToken?: string\n}\n\n}\n\n\nconst getTickersApi = async <R extends { [ key: string ]: any }>(list: Array<keyof R>) => {\n\n    if (!LoopringAPI.exchangeAPI) {\n        return undefined\n    }\n\n    const tickers = await LoopringAPI.exchangeAPI.getMixTicker({market: list.join(',')})\n    const data = makeTickerMap({tickerMap: tickers.tickMap})\n    return {data}\n}\n\nexport function* getPostsSaga({payload}: any) {\n    try {\n        // @ts-ignore\n        const {tickerKey, tickerKeys} = payload;\n        if (tickerKey || (tickerKeys && tickerKeys.length)) {\n            const {data} = yield call(getTickersApi, tickerKey ? [tickerKey] : tickerKeys);\n            yield put(getTickerStatus({tickerMap: data}));\n\n        } else {\n            throw new CustomError(ErrorMap.NO_TOKEN_KEY_LIST);\n        }\n    } catch (err) {\n        yield put(getTickerStatus(err));\n    }\n}\n\nfunction* tickerSaga() {\n    yield all([takeLatest(getTicker, getPostsSaga)]);\n}\n\nfunction* tickersSaga() {\n    yield all([takeLatest(getTickers, getPostsSaga)]);\n}\n\nexport const tickerForks = [\n    fork(tickerSaga),\n    fork(tickersSaga),\n]\n ","import { StateBase } from '@loopring-web/common-resources';\nimport { ChainId, ExchangeInfo } from 'loopring-sdk';\n\nexport enum ENV {\n    DEV = 'DEV',\n    UAT = 'UAT',\n    PROD = 'PROD',\n}\n\nexport enum NETWORKEXTEND {\n    NONETWORK = 'unknown'\n}\n\nexport type NETWORK = NETWORKEXTEND | ChainId\n\n\nexport type System<C extends { [ key: string ]: any }> = {\n    env: keyof typeof ENV,\n    chainId: 1 | 5 | 'unknown'\n    // network: keyof typeof NETWORK,\n    etherscanUrl: string,\n    socketURL: string,\n    baseURL: string,\n    faitPrices: { [k in keyof C]: { price: any, [ key: string ]: any } } | undefined,\n    gasPrice: number | undefined,\n    forex: number | undefined,\n    exchangeInfo: ExchangeInfo | undefined,\n\n}\n\nexport type SystemStatus = System<{ [ key: string ]: any }> & {\n    // system:System | {}\n    __timer__: NodeJS.Timeout | -1\n    topics: any[]\n} & StateBase\n\n\n\n\n\n\n","import { createSlice, PayloadAction, Slice } from '@reduxjs/toolkit'\nimport { ENV, System, SystemStatus } from './interface';\nimport { SagaStatus } from '@loopring-web/common-resources';\n\nconst initialState: SystemStatus = {\n    env: ENV.PROD,\n    chainId: 'unknown',\n    // network:'NONETWORK',\n    baseURL: '',\n    socketURL: '',\n    etherscanUrl: '',\n    faitPrices: undefined,\n    gasPrice: undefined,\n    forex: undefined,\n    __timer__: -1,\n    status: 'PENDING',\n    errorMessage: null,\n\n    exchangeInfo: undefined,\n\n    topics: [],\n}\nconst systemSlice: Slice<SystemStatus> = createSlice({\n    name: 'system',\n    initialState,\n    reducers: {\n\n        updateSystem(state, action: PayloadAction<System<{ [ key: string ]: any }>>) {\n            state.chainId = action.payload.chainId\n            state.status = SagaStatus.PENDING\n        },\n        // updateSocketURL(state, action:PayloadAction<{socketURL:string}>) {\n        //     state.socketURL =  action.payload.socketURL;\n        // },\n        updateRealTimeObj(state, action: PayloadAction<Partial<{ faitPrices: any, gasPrice: number, forex: number }>>) {\n            const {forex, faitPrices, gasPrice} = action.payload;\n            if (forex) {\n                state.forex = forex\n            }\n            if (faitPrices) {\n                state.faitPrices = faitPrices\n            }\n            if (gasPrice) {\n                state.gasPrice = gasPrice\n            }\n\n\n            // state = {\n            //     ...state.system,\n            //     forex: forex?,\n            //     faitPrices: action.payload.faitPrices ? action.payload.faitPrices : state.system.faitPrices,\n            //     gasPrice: action.payload.gasPrice ? action.payload.gasPrice : state.system.gasPrice,\n            // };\n\n        },\n        getSystemStatus(state, action: PayloadAction<Partial<SystemStatus>>) {\n\n            // @ts-ignore\n            if (action.error) {\n                state.status = SagaStatus.ERROR\n                // @ts-ignore\n                state.errorMessage = action.error\n            }\n            const {\n                env,\n                baseURL,\n                socketURL,\n                faitPrices,\n                gasPrice,\n                forex,\n                exchangeInfo,\n                __timer__,\n                etherscanUrl\n            } = action.payload;\n            if (env) {\n                state.env = env\n            }\n            if (socketURL) {\n                state.socketURL = socketURL;\n            }\n            if (baseURL) {\n                state.baseURL = baseURL\n            }\n            if (faitPrices) {\n                state.faitPrices = faitPrices\n            }\n            if (gasPrice) {\n                state.gasPrice = gasPrice\n            }\n            if (forex) {\n                state.forex = forex\n            }\n\n            if (exchangeInfo) {\n                state.exchangeInfo = exchangeInfo\n            }\n            if (etherscanUrl) {\n                state.etherscanUrl = etherscanUrl\n            }\n\n            if (__timer__) {\n                state.__timer__ = __timer__\n            }\n            state.status = SagaStatus.DONE\n        },\n        statusUnset: state => {\n            state.status = SagaStatus.UNSET\n        }\n\n    },\n});\nexport { systemSlice };\nexport const {updateSystem, setTopics, getSystemStatus, statusUnset, updateRealTimeObj} = systemSlice.actions;","import { createSlice, PayloadAction, Slice } from '@reduxjs/toolkit'\nimport { WalletLayer1Map, WalletLayer1States } from './interface';\nimport { SagaStatus } from '@loopring-web/common-resources';\n\n\nconst initialState: WalletLayer1States = {\n    walletLayer1: undefined,\n    status: 'DONE',\n    errorMessage: null,\n}\nconst walletLayer1Slice: Slice = createSlice({\n    name: 'walletLayer1',\n    initialState,\n    reducers: {\n        updateWalletLayer1(state, action: PayloadAction<string | undefined>) {\n            state.status = SagaStatus.PENDING\n        },\n        reset(state, action: PayloadAction<string | undefined>) {\n            state.walletLayer1 = undefined;\n            state.status = SagaStatus.UNSET;\n        },\n        getWalletLayer1Status(state, action: PayloadAction<{ walletLayer1: WalletLayer1Map<object> }>) {\n            // @ts-ignore\n            if (action.error) {\n                state.status = SagaStatus.ERROR\n                // @ts-ignore\n                state.errorMessage = action.error\n            }\n            state.walletLayer1 = {...action.payload.walletLayer1};\n            state.status = SagaStatus.DONE\n        },\n        statusUnset: state => {\n            state.status = SagaStatus.UNSET\n        }\n    },\n});\nexport { walletLayer1Slice };\nexport const {updateWalletLayer1, getWalletLayer1Status, statusUnset, reset} = walletLayer1Slice.actions\n","import { useDispatch, useSelector } from 'react-redux'\nimport { updateWalletLayer1, reset,statusUnset } from './reducer';\nimport { WalletLayer1States } from './interface';\nimport React from 'react';\n\nexport function useWalletLayer1(): WalletLayer1States & {\n    updateWalletLayer1:()=> void,\n    statusUnset:()=> void,\n    resetLayer1:()=>void,\n} {\n    const walletLayer1:WalletLayer1States = useSelector((state: any) => state.walletLayer1)\n    const dispatch = useDispatch();\n\n    return {\n        ...walletLayer1,\n        resetLayer1:React.useCallback(()=>{\n            dispatch(reset(undefined))\n        },[dispatch]),\n        statusUnset:React.useCallback(()=>dispatch(statusUnset(undefined)),[dispatch]),\n        updateWalletLayer1:React.useCallback(()=>dispatch(updateWalletLayer1(undefined)),[dispatch]),\n    }\n\n}\n","import {\n    ChainId,\n    getAccountArg,\n    getAmmpoolArg,\n    getCandlestickArg,\n    getOrderArg,\n    getOrderBookArg,\n    getTickerArg,\n    getTradeArg,\n    toBig,\n} from 'loopring-sdk';\nimport { tickerService } from './tickerService';\nimport { ammPoolService } from './ammPoolService';\nimport { CustomError, ErrorMap } from '@loopring-web/common-resources';\nimport { LoopringAPI } from 'api_wrapper';\nimport { walletService } from './wallet/walletService';\n// import store from '../stores';\n// import { updateSocketURL } from '../stores/system';\n\n\nexport type SocketEvent = (e: any, ...props: any[]) => any\n\nexport enum SocketEventType {\n    pingpong = 'pingpong',\n    account = \"account\",\n    order = \"order\",\n    orderbook = \"orderbook\",\n    trade = \"trade\",\n    ticker = \"ticker\",\n    candlestick = \"candlestick\",\n    ammpool = \"ammpool\"\n}\n\nexport type SocketCallbackMap = {\n    // [SocketEventType.pingpong]:  { fn: SocketEvent, deps?: any[] },\n    [key in SocketEventType]?: { fn: SocketEvent, deps: any[] }\n}\n//\nexport type SocketEventMap = {\n    [key in SocketEventType]: SocketEvent\n}\n\nexport class LoopringSocket {\n    private static SocketEventMap: SocketEventMap = {\n        [ SocketEventType.account ]: (data: {[key:string]:any}) => {\n            const {accountId, totalAmount,tokenId,amountLocked,pending} = data;\n            walletService.sendAccount({\n                tokenId,\n                locked:amountLocked,\n                total:totalAmount,\n                pending,\n            })\n        },\n        [ SocketEventType.order ]: (_e: any) => {\n\n        },\n        [ SocketEventType.orderbook ]: (_e: any) => {\n\n        },\n        [ SocketEventType.trade ]: (_e: any) => {\n\n        },\n        [ SocketEventType.ticker ]: (data: string[]) => {\n            const [symbol, timestamp, size, volume, open, high, low, close, count, bid, ask] = data;\n            // @ts-ignore\n            const [, base, quote] = symbol.match(/(\\w+)-(\\w+)/i);\n            const base_token_volume = size;\n            const quote_token_volume = volume;\n            const change = open === undefined || Number(open) === 0 ? undefined : (toBig(close).minus(open)).div(open)\n            tickerService.sendTicker({\n                [ symbol ]: {\n                    symbol, base, quote,\n                    base_token_volume,\n                    quote_token_volume,\n                    timestamp: Number(timestamp),\n                    change,\n                    base_fee_amt: undefined,\n                    quote_fee_amt: undefined,\n                    open, high, low, close, count, bid, ask\n                } as any\n            })\n        },\n        [ SocketEventType.candlestick ]: (_e: any) => {\n\n        },\n        [ SocketEventType.candlestick ]: (data: string) => {\n\n        },\n        [ SocketEventType.ammpool ]: (data: string[]) => {\n            // const [market,timestamp,size,volume,open,high,low,close,count,bid,ask] = data;\n            // @ts-ignore\n            const [poolName, poolAddress, pooled, [tokenId, volume], risky] = data;\n            // @ts-ignore\n            ammPoolService.sendAmmPool({poolName, poolAddress, pooled, lp: {tokenId, volume}, risky})\n        },\n        // @ts-ignore\n        [ SocketEventType.pingpong ]: (data: string, instance:InstanceType<LoopringSocket>) => {\n\n            if (data === 'ping') {\n                instance.loopringSocket.send('pong')\n            }\n        },\n    }\n    get loopringSocket(): WebSocket | undefined {\n        return this._loopringSocket;\n    }\n    get socketCallbackMap(): SocketCallbackMap | undefined {\n        return this._socketCallbackMap;\n    }\n    //TODO fill the socket receiver format callback\n\n    private _socketCallbackMap: SocketCallbackMap|undefined;\n    private _loopringSocket:WebSocket|undefined;\n    private __wsTimer__:{timer:NodeJS.Timer|-1,count:number} = {\n        timer:-1,\n        count:0\n    };\n    private _baseUrl:string;\n    constructor(url:string) {\n        // const url = ChainId.MAINNET === chainId ? process.env.REACT_APP_API_URL : process.env.REACT_APP_API_URL_UAT;\n        this._baseUrl = url; // baseSocket: string = `wss://ws.${url}/v3/ws?wsApiKey=${wsKey}`;\n    }\n\n    // private static PingPong = {\n    //     fn:\n    // }\n\n    public socketSendMessage = async ({socket, apiKey}: {\n        chainId: ChainId | 'unknown',\n        socket: { [ key: string ]: string[] }\n        apiKey?: string\n    }): Promise<boolean> => {\n        try {\n            if (socket && Reflect.ownKeys(socket).length) {\n                //register ping pong event\n                this.clearInitTimer(true);\n                this.resetSocketEvents();\n                const {topics} = this.makeMessageArray({socket});\n                if (!this.isConnectSocket() ) {\n                    await this.socketConnect({ topics, apiKey})\n                } else {\n                    this._loopringSocket?.send(this.makeTopics(topics,apiKey))\n\n                }\n                return true\n            } else {\n                if (!this.isConnectSocket()) {\n                    this.socketClose();\n                }\n                return false\n            }\n        } catch (error) {\n            throw  new CustomError(ErrorMap.SOCKET_ERROR)\n        }\n\n    }\n    public socketClose = async () => {\n        let ws: WebSocket | undefined = this._loopringSocket;\n\n        return new Promise((reolve) => {\n            if (ws) {\n                ws.onclose = function (e) {\n                    reolve(`Socket is closed, ${e.reason}`)\n                };\n                ws.close();\n            } else {\n                Promise.resolve('no websocket')\n            }\n        })\n    }\n\n    public removeSocketEvents = (key: string) => {\n        // @ts-ignore\n        if (this._socketCallbackMap && this._socketCallbackMap[ key ]) {\n            // @ts-ignore\n            delete this._socketCallbackMap[ key ]\n        }\n    }\n\n    private makeMessageArray = ({socket}: { socket: { [ key: string ]: string[] } }): {\n        topics: any[]\n    } => {\n        let topics: any[] = [], list: any[] = []; // let registerDispatch = [];\n        Reflect.ownKeys(socket).forEach((eventType) => {\n            switch (eventType) {\n                case  SocketEventType.ticker:\n                    list = socket[ SocketEventType.ticker ].map(key => getTickerArg(key))\n                    if (list && list.length) {\n                        this.addSocketEvents(SocketEventType.ticker)\n                        topics = [...topics, ...list];\n                    }\n                    break\n                case  SocketEventType.account:\n                    if (socket[ SocketEventType.account ]) {\n                        list = [getAccountArg()]\n                    }\n                    if (list && list.length) {\n                        this.addSocketEvents(SocketEventType.account)\n                        topics = [...topics, ...list];\n                    }\n                    break;\n                case  SocketEventType.order:\n                    //FIX:  make order Topic\n                    list = socket[ SocketEventType.order ].map(key => getOrderArg(key))\n                    if (list && list.length) {\n                        this.addSocketEvents(SocketEventType.order)\n                        topics = [...topics, ...list];\n                    }\n                    break\n                case  SocketEventType.orderbook:\n                    //FIX:  make orderbook Topic\n                    list = socket[ SocketEventType.orderbook ].map(key => getOrderBookArg(key, 0))\n                    if (list && list.length) {\n                        this.addSocketEvents(SocketEventType.orderbook)\n                        topics = [...topics, ...list];\n                    }\n                    break\n                case  SocketEventType.trade:\n                    list = socket[ SocketEventType.trade ].map(key => getTradeArg(key))\n                    if (list && list.length) {\n                        this.addSocketEvents(SocketEventType.trade)\n                        topics = [...topics, ...list];\n                    }\n                    break\n                case  SocketEventType.candlestick:\n                    list = socket[ SocketEventType.candlestick ].map(key => getCandlestickArg(key))\n                    if (list && list.length) {\n                        this.addSocketEvents(SocketEventType.candlestick)\n                        topics = [...topics, ...list];\n                    }\n                    break\n                case  SocketEventType.ammpool:\n                    list = socket[ SocketEventType.ammpool ].map(key => getAmmpoolArg(key))\n                    if (list && list.length) {\n                        this.addSocketEvents(SocketEventType.ammpool)\n                        topics = [...topics, ...list];\n                    }\n                    break\n            }\n        })\n        return {topics}\n    }\n\n    private isConnectSocket = () => {\n        return !!(this._loopringSocket && this._loopringSocket.readyState === 1 );\n    }\n\n    private makeTopics = (topics: any, apiKey?: string) => {\n        let data: any = {\n            op: 'sub',\n            unsubscribeAll: 'true',\n            topics: topics,\n        }\n\n        if (apiKey) {\n            data.apiKey = apiKey\n        }\n        // console.log('Socket>>Socket',JSON.stringify(data));\n        return JSON.stringify(data)\n        // sendMessage(flat_txt)\n    }\n\n    private addSocketEvents = (type: keyof typeof SocketEventType,deps?:any[]) => {\n\n        this._socketCallbackMap = {\n            ...this._socketCallbackMap,\n            [ type ]: {\n                fn: LoopringSocket.SocketEventMap[type],\n                deps:deps?deps:[]\n            }\n        }\n    }\n\n    private socketConnect = async ({ topics, apiKey}: {\n       // chainId: ChainId | 'unknown',\n        topics: any[],\n        apiKey?: string\n    }) => {\n        try {\n            const self = this;\n            if (LoopringAPI.wsAPI && topics) {\n                const {wsKey} = await LoopringAPI.wsAPI.getWsKey();\n                this._loopringSocket = new WebSocket(`${this._baseUrl}?wsApiKey=${wsKey}`);\n\n                this._loopringSocket.onopen = function () {\n                    console.warn('Socket>>Socket', \"WebSocket is open now.\");\n                    if(self._loopringSocket && self._loopringSocket.readyState === WebSocket.OPEN){\n                        self._loopringSocket.send(self.makeTopics(topics,apiKey))\n                    }\n\n                };\n                this._loopringSocket.onmessage = function (e) {\n                    const {data} = e;\n                    // data.topic.topic;\n                    if (data === 'ping' && self._socketCallbackMap) {\n                        // console.log('Socket>>Socket ping:', e);\n                        self._socketCallbackMap?.pingpong?.fn.call( self, data, ...self._socketCallbackMap.pingpong.deps);\n                    } else {\n                        const result = JSON.parse(data);\n                        const {topics, topic} = result;\n                        if (topics) {\n                            // console.log('Socket>>Socket topics first return', topics);\n                        }\n                        if (topic && topic.topic && self._socketCallbackMap) {\n                            const {topic: {topic}, data} = result\n                             self._socketCallbackMap[ topic.topic ]?.fn.call( self, data, ...self._socketCallbackMap[ topic.topic ].deps);\n\n                        }\n\n                    }\n                    return false;\n                };\n                this._loopringSocket.onclose = async function (e) {\n                    // console.error('Socket>>Socket', e);\n                    if (self._loopringSocket) {\n                        self._loopringSocket = undefined;\n                    }\n                    console.log('Socket>>Socket', 'Socket is closed. Reconnect will be attempted in 1 second.', e.reason);\n                    self.clearInitTimer()\n                    if (self.__wsTimer__.count < 5) {\n                        self.__wsTimer__.timer = setTimeout(function () {\n                            self.socketConnect.call(self, { topics, apiKey});\n                        }, 1000 * self.__wsTimer__.count);\n                    }\n                };\n                this._loopringSocket.onerror = function (err: Event) {\n                    console.error('Socket>>Socket', 'Socket encountered error:', 'Closing socket', err);\n                };\n\n            }\n        } catch (error) {\n            console.error('Socket>>Socket', 'connect error, not from reconnect')\n            // @ts-ignore\n            if (this._loopringSocket) {\n                // @ts-ignore\n                this._loopringSocket.close()\n            }\n        }\n    }\n    private clearInitTimer = (init?: boolean) => {\n\n        if (this.__wsTimer__) {\n            if (this.__wsTimer__.timer !== -1) {\n                clearTimeout(this.__wsTimer__.timer)\n            }\n            this.__wsTimer__.timer = -1\n            this.__wsTimer__.count++;\n        }\n        if (init) {\n            this.__wsTimer__ = {\n                //...self.__wsTimer__,\n                timer: -1,\n                count: 0\n            }\n        }\n    }\n    private resetSocketEvents = () => {\n        this._socketCallbackMap = undefined;\n        this.addSocketEvents(SocketEventType.pingpong,[this])\n    }\n}\n// const socketInstance = new LoopringSocket();\n// // @ts-ignore\n// window.loopringSocket = socketInstance;\n//\n// export default socketInstance;\n\n\n\n","import { Subject } from 'rxjs';\nimport { LoopringMap, TickerData } from 'loopring-sdk';\nimport { makeTickerMap } from 'hooks/help';\nimport { TickerMap } from 'stores/ticker';\n\nconst subject = new Subject<{ tickerMap: TickerMap<{ [ key: string ]: any }> }>();\n\n// export type TickerMap<R> = {\n//     [key in keyof R]:TradeFloat\n// }\n// <R extends {[key:string]:any}>\n  //<R>\nexport const tickerService = {\n    sendTicker: (_tickerMap:LoopringMap<TickerData>) => {\n       const tickerMap:TickerMap<{[key:string]:any}> = makeTickerMap({tickerMap:_tickerMap})\n       subject.next({ tickerMap })\n    },\n    // clearMessages: () => subject.next(),\n    onSocket: () => subject.asObservable()\n};","import { Subject } from 'rxjs';\nimport { TradeFloat } from '@loopring-web/common-resources';\n\nconst subject = new Subject();\n\nexport type AmmPoolMap<R> = {\n    [key in keyof R]:TradeFloat\n}\n// <R extends {[key:string]:any}>\n\nexport const ammPoolService = {\n    sendAmmPool: (ammPoolMap:AmmPoolMap<{[key:string]:any}>) => subject.next({ ammPoolMap: ammPoolMap }),\n    // clearMessages: () => subject.next(),\n    onSocket: () => subject.asObservable()\n};","import { Subject } from 'rxjs';\n\nimport * as loopring_defs from 'loopring-sdk';\nimport store from '../../stores';\n// import { CoinKey } from '@loopring-web/common-resources';\n//CoinKey<any>\nconst subject = new Subject<{[key:string ]:loopring_defs.UserBalanceInfo}|undefined>();\n\nexport const walletService = {\n    sendAccount: (_balance?:loopring_defs.UserBalanceInfo) => {\n        const {idIndex} = store.getState().tokenMap;\n       // const tickerMap:TickerMap<{[key:string]:any}> = makeTickerMap({tickerMap:_tickerMap})\n        if(_balance && idIndex ){\n            const balance = { [ idIndex[ _balance.tokenId ] ]: _balance }\n            subject.next(balance)\n\n        }\n    },\n    sendUserUpdate: () => {\n        subject.next(undefined)\n    },\n\n    // clearMessages: () => subject.next(),\n    onSocket: () => subject.asObservable()\n};","import { all, call, fork, put, take, takeLatest } from \"redux-saga/effects\"\nimport { getSystemStatus, updateRealTimeObj, updateSystem } from './reducer'\nimport { ENV, NETWORKEXTEND } from \"./interface\"\nimport store from '../index';\n// import { reset } from '../account/reducer';\nimport { LoopringAPI } from 'api_wrapper';\nimport { getAmmMap, updateRealTimeAmmMap } from '../Amm/AmmMap';\nimport { getTokenMap } from '../token';\nimport { CustomError, ErrorMap } from '@loopring-web/common-resources';\nimport { getAmmActivityMap } from '../Amm/AmmActivityMap';\nimport { updateWalletLayer1 } from '../walletLayer1';\nimport { delay } from 'rxjs/operators';\nimport { LoopringSocket } from '../../services/socketUtil';\nimport { statusUnset as accountStatusUnset } from '../account';\nimport { ChainId } from 'loopring-sdk';\n\nconst initConfig = function* <R extends { [ key: string ]: any }>(chainId: ChainId | 'unknown') {\n    // store.dispatch(updateAccountStatus());\n    const {tokenSymbolMap: tokensMap} = yield call(async () => await LoopringAPI.exchangeAPI?.getTokens())\n    const {ammpools} = yield call(async () => await LoopringAPI.ammpoolAPI?.getAmmPoolConf());\n    const {pairs, marketArr, tokenArr, markets} = yield call(async () => LoopringAPI.exchangeAPI?.getMixMarkets());\n    store.dispatch(getTokenMap({tokensMap, marketMap: markets, pairs, marketArr, tokenArr}))\n    yield take('tokenMap/getTokenMapStatus');\n    // let basePath: string = `wss://ws.${baseURL}/v3/ws?wsApiKey=${wsKey}`\n    store.dispatch(getAmmMap({ammpools}))\n    store.dispatch(getAmmActivityMap({ammpools}))\n    if (store.getState().tokenMap.status === 'ERROR') {\n\n    }\n\n    yield delay(10);\n    //IF already connect has address, getInfo walletLayer 1\n    const {account, walletLayer1} = store.getState() //.account.accAddr && !store.getState().walletLayer1.walletLayer1\n    if (account.accAddress && walletLayer1.walletLayer1 === undefined) {\n        store.dispatch(updateWalletLayer1(undefined));\n    }\n    store.dispatch(accountStatusUnset(undefined));\n}\n\nconst getSystemsApi = async <R extends { [ key: string ]: any }>(chainId: any) => {\n    //TODO get some other reuqired id...... put into system\n    // const { chainId } = system\n    const env = window.location.hostname === 'localhost' ? ENV.DEV : ChainId.GOERLI === chainId ? ENV.UAT : ENV.PROD\n    chainId = ChainId.GOERLI === chainId ? ChainId.GOERLI : ChainId.MAINNET === chainId ? ChainId.MAINNET : NETWORKEXTEND.NONETWORK\n\n    if (chainId === NETWORKEXTEND.NONETWORK) {\n        throw new CustomError(ErrorMap.NO_NETWORK_ERROR)\n    } else {\n\n        LoopringAPI.InitApi(chainId as ChainId);\n        if (LoopringAPI.exchangeAPI) {\n            const {exchangeInfo} = (await LoopringAPI.exchangeAPI.getExchangeInfo())\n            const faitPrices = (await LoopringAPI.exchangeAPI.getFiatPrice({legal: 'USD'})).fiatPrices\n            const faitPricesY = (await LoopringAPI.exchangeAPI.getFiatPrice({legal: 'CNY'})).fiatPrices\n            const gasPrice = (await LoopringAPI.exchangeAPI.getGasPrice()).gasPrice / 1e+9;\n            // : process.env.REACT_APP_API_URL_UAT;\n            const baseURL = ChainId.MAINNET === chainId ? `https://${process.env.REACT_APP_API_URL}` : `https:/${process.env.REACT_APP_API_URL_UAT}`\n            const socketURL = ChainId.MAINNET === chainId ? `wss://ws.${process.env.REACT_APP_API_URL}/v3/ws` : `wss://ws.${process.env.REACT_APP_API_URL_UAT}/v3/ws`;\n            const etherscanUrl = ChainId.MAINNET === chainId ? `https://etherscan.io/address/` : `https://goerli.etherscan.io/address/`\n\n            window.loopringSocket = new LoopringSocket(socketURL);\n\n            const forex = faitPricesY[ 'USDT' ].price;\n            let {__timer__} = store.getState().system;\n            __timer__ = ((__timer__) => {\n                if (__timer__ && __timer__ !== -1) {\n                    clearInterval(__timer__);\n                }\n                return setInterval(async () => {\n                    if (LoopringAPI.exchangeAPI) {\n                        const faitPrices = (await LoopringAPI.exchangeAPI.getFiatPrice({legal: 'CNY'})).fiatPrices\n                        const gasPrice = (await LoopringAPI.exchangeAPI.getGasPrice()).gasPrice / 1e+9\n                        const forex = faitPrices[ 'USDT' ]?.price\n                        store.dispatch(updateRealTimeAmmMap(undefined))\n                        store.dispatch(updateRealTimeObj({faitPrices, gasPrice, forex}))\n                    }\n                }, 300000)   //\n\n            })(__timer__);\n            return {\n                chainId,\n                etherscanUrl,\n                env,\n                baseURL,\n                socketURL,\n                faitPrices,\n                gasPrice,\n                forex,\n                exchangeInfo,\n                __timer__\n            }\n        }\n    }\n}\n\nexport function* getUpdateSystem({payload}: any) {\n    try {\n        // @ts-ignore\n        const {chainId} = payload;\n        const {\n            env,\n            baseURL,\n            faitPrices,\n            gasPrice,\n            forex,\n            exchangeInfo,\n            etherscanUrl,\n            __timer__\n        } = yield call(getSystemsApi, chainId);\n\n        yield put(getSystemStatus({env, baseURL, faitPrices, gasPrice, forex, exchangeInfo, etherscanUrl, __timer__}));\n        yield call(initConfig, chainId)\n        //TODO check wallect store\n    } catch (err) {\n        yield put(getSystemStatus(err));\n    }\n}\n\nfunction* systemSaga() {\n    yield all([takeLatest(updateSystem, getUpdateSystem)]);\n}\n\nexport const systemForks = [\n    fork(systemSaga),\n]\n","import { all, call, fork, put, takeLatest } from \"redux-saga/effects\";\nimport { getWalletLayer1Status, updateWalletLayer1 } from './reducer';\nimport { CoinKey, PairKey, WalletCoin } from '@loopring-web/common-resources';\nimport { LoopringAPI } from 'api_wrapper';\nimport store from '../index';\nimport { fromWEI } from 'loopring-sdk';\nimport { useAccount } from '../account';\nimport { myLog } from \"utils/log_tools\";\n\ntype WalletLayer1Map<R extends {[key:string]:any}> = {\n    [key in CoinKey<R>|PairKey<R>]?:WalletCoin<R>\n}\n\nconst getWalletLayer1Balance = async <R extends {[key:string]:any}>()=> {\n    //TODO: check is connect and active and assign walletLayer1\n    //TODO: if not reject directory, any error happen will clean the\n    // await sdk\n    const {accAddress} = store.getState().account;\n    const {tokenMap,marketCoins} = store.getState().tokenMap;\n    if(marketCoins && tokenMap && LoopringAPI.exchangeAPI) {\n        \n        const {ethBalance} =  await LoopringAPI.exchangeAPI.getEthBalances({owner:accAddress});\n        const {tokenBalances} =  await LoopringAPI.exchangeAPI.getTokenBalances({owner:accAddress, token: marketCoins.join()},tokenMap);\n        tokenBalances['ETH'] = ethBalance;\n        let walletLayer1;\n        if(tokenBalances) {\n            walletLayer1 = Reflect.ownKeys(tokenBalances).reduce((prev,item)=>{\n                return   {...prev, [ item ]:{\n                        belong: item,\n                        count: fromWEI(tokenMap, item, tokenBalances[item as string]),\n                    }\n                }\n            },{} as WalletLayer1Map<R>)\n        }\n        return {walletLayer1}\n    }\n\n};\n\nexport function* getPostsSaga() {\n    try {\n        //\n        const {walletLayer1} = yield call(getWalletLayer1Balance);\n        yield put(getWalletLayer1Status({walletLayer1}));\n    } catch (err) {\n        yield put(getWalletLayer1Status(err));\n    }\n}\n\nexport function* walletLayer1Saga() {\n    yield all([takeLatest(updateWalletLayer1, getPostsSaga)]);\n}\n\nexport const walletLayer1Fork = [\n    fork(walletLayer1Saga),\n    // fork(tokenPairsSaga),\n]\n\n","import { createSlice, PayloadAction, Slice } from '@reduxjs/toolkit'\nimport { WalletLayer2Map, WalletLayer2States } from './interface';\nimport { SagaStatus } from '@loopring-web/common-resources';\nimport * as loopring_defs from 'loopring-sdk';\n\n\nconst initialState: WalletLayer2States = {\n    walletLayer2: undefined,\n    status: 'DONE',\n    errorMessage: null,\n}\nconst walletLayer2Slice: Slice<WalletLayer2States> = createSlice({\n    name: 'walletLayer2',\n    initialState,\n    reducers: {\n        updateWalletLayer2(state, action: PayloadAction<string | undefined>) {\n            state.status = SagaStatus.PENDING\n        },\n        reset(state, action: PayloadAction<string | undefined>) {\n            state.walletLayer2 = undefined;\n            state.status = SagaStatus.UNSET;\n        },\n        socketUpdateBalance(state, action: PayloadAction<{[key:string ]:loopring_defs.UserBalanceInfo}>) {\n            state.status = SagaStatus.PENDING;\n        },\n        getWalletLayer2Status(state, action: PayloadAction<{ walletLayer2: WalletLayer2Map<object> }>) {\n            // @ts-ignore\n            if (action.error) {\n                state.status = SagaStatus.ERROR\n                // @ts-ignore\n                state.errorMessage = action.error\n            }\n            state.walletLayer2 = {...action.payload.walletLayer2};\n            state.status = SagaStatus.DONE\n        },\n        statusUnset: state => {\n            state.status = SagaStatus.UNSET\n        }\n    },\n});\nexport { walletLayer2Slice };\nexport const {updateWalletLayer2, socketUpdateBalance, getWalletLayer2Status, statusUnset, reset} = walletLayer2Slice.actions\n","import { all, call, fork, put, takeLatest } from \"redux-saga/effects\";\nimport { getWalletLayer2Status, socketUpdateBalance, updateWalletLayer2 } from './reducer';\nimport { CoinKey, PairKey, WalletCoin } from '@loopring-web/common-resources';\nimport { LoopringAPI } from 'api_wrapper';\nimport store from '../index';\n\ntype WalletLayer2Map<R extends { [ key: string ]: any }> = {\n    [key in CoinKey<R> | PairKey<R>]?: WalletCoin<R>\n}\n\nconst getWalletLayer2Balance = async <R extends { [ key: string ]: any }>() => {\n    //TODO: check is connect and active and assign walletLayer1\n    //TODO: if not reject directory, any error happen will clean the\n    // await sdk\n    // const exchangeApi = exchangeAPI();\n    const {accountId, apiKey} = store.getState().account;\n    const {tokenMap, idIndex, marketCoins} = store.getState().tokenMap;\n    let walletLayer2;\n    if (apiKey && accountId && LoopringAPI.userAPI) {\n        // @ts-ignore\n        const {userBalances} = await LoopringAPI.userAPI.getUserBalances({accountId: accountId, tokens: ''}, apiKey)\n        if (userBalances) {\n            // tokenId: number;\n            // total: string;\n            // locked: string;\n            // pending: {\n            //     withdraw: string;\n            //     deposit: string;\n            // };\n            walletLayer2 = Reflect.ownKeys(userBalances).reduce((prev, item) => {\n                // @ts-ignore\n                return {...prev, [ idIndex[ item ] ]: userBalances[ Number(item) ]}\n            }, {} as WalletLayer2Map<R>)\n        }\n    }\n\n    return {walletLayer2}\n};\n\nexport function* getPostsSaga() {\n    try {\n        //\n        const {walletLayer2} = yield call(getWalletLayer2Balance);\n        yield put(getWalletLayer2Status({walletLayer2}));\n    } catch (err) {\n        yield put(getWalletLayer2Status(err));\n    }\n}\n\n\n\nexport function* walletLayer2Saga() {\n    yield all([takeLatest(updateWalletLayer2, getPostsSaga)]);\n}\nexport function* getSocketSaga({payload}: any){\n\n    try {\n        let {walletLayer2} =  store.getState().walletLayer2;\n        walletLayer2 = {...walletLayer2,...payload}\n        yield put(getWalletLayer2Status({walletLayer2}));\n    } catch (err) {\n        yield put(getWalletLayer2Status(err));\n    }\n}\n\nexport function* walletLayerSocketSaga() {\n    yield all([takeLatest(socketUpdateBalance, getSocketSaga)]);\n}\n\n\n\nexport const walletLayer2Fork = [\n    fork(walletLayer2Saga),\n    fork(walletLayerSocketSaga),\n]\n\n","import { createSlice, PayloadAction, Slice } from '@reduxjs/toolkit'\nimport { UserRewardsStates } from './interface';\nimport { SagaStatus } from '@loopring-web/common-resources';\n\nconst initialState: UserRewardsStates = {\n    userRewardsMap: undefined,\n    status: 'PENDING',\n    errorMessage: null,\n    __timer__: -1,\n}\nconst userRewardsMapSlice: Slice<UserRewardsStates> = createSlice({\n    name: 'userRewardsMap',\n    initialState,\n    reducers: {\n        getUserRewards(state, action: PayloadAction<undefined>) {\n            state.status = SagaStatus.PENDING\n        },\n        getUserRewardsStatus(state, action: PayloadAction<UserRewardsStates>) {\n            // @ts-ignore\n            if (action.error) {\n                state.status = SagaStatus.ERROR\n                // @ts-ignore\n                state.errorMessage = action.error\n            }\n            state.userRewardsMap = {...state.userRewardsMap, ...action.payload.userRewardsMap};\n            if (action.payload.__timer__) {\n                state.__timer__ = action.payload.__timer__\n            }\n            state.status = SagaStatus.DONE\n        },\n        statusUnset: state => {\n            state.status = SagaStatus.UNSET\n        }\n\n    },\n});\nexport { userRewardsMapSlice };\nexport const {getUserRewards, getUserRewardsStatus, statusUnset} = userRewardsMapSlice.actions;","import { all, call, fork, put, takeLatest } from \"redux-saga/effects\"\nimport { getUserRewards, getUserRewardsStatus } from './reducer'\n\nimport store from '../index';\nimport { LoopringAPI } from 'api_wrapper';\n\nconst getUserRewardsApi = async <R extends {[key:string]:any}>(list:Array<keyof R>)=> {\n\n    // const data:UserRewardsMap<R> = {}\n\n    // const userRewardss = await exchangeAPI().getUserRewards({market: list.join(',')})\n    const {accountId} = store.getState().account\n    let {__timer__} = store.getState().userRewardsMap;\n    \n    if(LoopringAPI.ammpoolAPI && accountId ) {\n        __timer__ = ((__timer__) => {\n            if (__timer__ && __timer__ !== -1) {\n                clearInterval(__timer__);\n            }\n            return setTimeout(async () => {\n                store.dispatch(getUserRewards(undefined))\n            }, 300000 * 4)   //\n\n        })(__timer__);\n        return  LoopringAPI.ammpoolAPI.getAmmPoolUserRewards({owner:accountId}).then(({ammUserRewardMap}) => {\n            return {data:ammUserRewardMap,__timer__}\n        })\n    }else{\n        if (__timer__ && __timer__ !== -1) {\n            clearInterval(__timer__);\n        }\n        if(accountId) {\n            return  Promise.reject({data:undefined,__timer__:-1})\n        }else{\n            return Promise.resolve({data:undefined,__timer__:-1})\n        }\n\n    }\n\n}\n\nexport function* getPostsSaga({payload}:any) {\n    try {\n        // @ts-ignore\n        // const { userRewardsKey,userRewardsKeys } = payload;\n        // console.log('getPostsSaga userRewardsKey',userRewardsKey, userRewardsKeys)\n        // if(userRewardsKey || (userRewardsKeys && userRewardsKeys.length)) {\n        const {data,__timer__}  = yield call(getUserRewardsApi);\n        yield put(getUserRewardsStatus({userRewardsMap:data,__timer__}));\n\n        // }else{\n        //     throw new CustomError(ErrorMap.NO_SDK);\n        // }\n    } catch (err) {\n        yield put(getUserRewardsStatus(err));\n    }\n}\n\nfunction* userRewardsSaga() {\n    yield all([takeLatest(getUserRewards, getPostsSaga)]);\n}\n\nexport const userRewardsForks = [\n    fork(userRewardsSaga),\n    // fork(userRewardssSaga),\n]\n ","import { createSlice, PayloadAction, Slice } from '@reduxjs/toolkit'\nimport { SagaStatus, StateBase } from '@loopring-web/common-resources';\nimport { SocketMap } from './interface';\n\nconst initialState: StateBase & { socket: SocketMap } = {\n    socket: {},\n    status: 'PENDING',\n    errorMessage: null,\n}\nconst socketSlice: Slice<StateBase & { socket: SocketMap }> = createSlice({\n    name: 'socket',\n    initialState,\n    reducers: {\n        socketEnd(state, action: PayloadAction<undefined>) {\n            state.socket = {};\n            state.status = SagaStatus.PENDING;\n        },\n        sendSocketTopic(state, action: PayloadAction<{ socket: SocketMap }>) {\n            state.socket = action.payload.socket\n        },\n        getSocketStatus(state, action: PayloadAction<undefined>) {\n\n            // @ts-ignore\n            if (action.error) {\n                state.status = SagaStatus.ERROR\n                // @ts-ignore\n                state.errorMessage = action.error\n            }\n            // state.socket = action.payload.socket\n            state.status = SagaStatus.DONE\n        },\n\n        statusUnset: state => {\n            state.status = SagaStatus.UNSET\n        }\n\n    },\n});\nexport { socketSlice };\nexport const {getSocketStatus, sendSocketTopic, socketEnd, statusUnset} = socketSlice.actions;\n","import { all, call, fork, put, takeLatest } from 'redux-saga/effects';\nimport { getSocketStatus, sendSocketTopic, socketEnd } from './reducer'\nimport store from '../index';\nexport function* closeSocket(){\n    try {\n        if (window.loopringSocket){\n            yield call(window.loopringSocket.socketClose)\n        }\n        yield put(getSocketStatus(undefined));\n        //TODO check wallect store\n    } catch (err) {\n        yield put(getSocketStatus(err));\n    }\n}\nexport function* sendMessage({payload}: any){\n    try {\n        const { apiKey } = store.getState().account;\n        const { socket } = payload;\n        if (window.loopringSocket){\n            yield call(window.loopringSocket.socketSendMessage, { socket, apiKey })\n        }\n        yield put(getSocketStatus(undefined));\n    } catch (err) {\n        yield put(getSocketStatus(err));\n    }\n}\n\nfunction* socketEndSaga(){\n    yield all([takeLatest(socketEnd, closeSocket)]);\n}\n\nfunction* socketSendMessageSaga() {\n    yield all([takeLatest(sendSocketTopic, sendMessage)]);\n}\n\n\n\nexport const socketForks = [\n    // fork(socketSaga),\n    fork(socketEndSaga),\n    fork(socketSendMessageSaga),\n //   fork(initConfig),\n]\n\n\n\n","import { all, fork, put, takeLatest, call } from \"redux-saga/effects\"\nimport {\n    cleanAccountStatus,\n    // cleanAccountStatus,\n    nextAccountStatus,\n    // restAccountStatus,\n    updateAccountStatus\n} from './reducer';\nimport { PayloadAction } from '@reduxjs/toolkit';\nimport { Account, AccountStatus, ConnectProviders, SagaStatus } from '@loopring-web/common-resources';\nimport { connectProvides } from '@loopring-web/web3-provider';\n\n\nexport function* accountUpdateSaga({payload}: PayloadAction<Partial<Account>>) {\n    try {\n        // let data: { accountState: Partial<AccountState> };\n        // const {currentState} = yield select();\n        const account = payload;\n        yield put(nextAccountStatus({\n            // ...currentState,\n            ...account\n        }));\n\n    } catch (err) {\n        yield put(nextAccountStatus(err));\n    }\n}\nexport function* cleanAccountSaga({payload}: PayloadAction<{shouldUpdateProvider?:boolean|undefined}>) {\n    try {\n        let account:Partial<Account> = {\n            accAddress : '',\n            readyState : AccountStatus.UN_CONNECT,\n            accountId : -1,\n            apiKey : '',\n            eddsaKey : '',\n            publicKey : {},\n            level : '',\n            nonce : -1,\n        }\n\n        if(payload && payload.shouldUpdateProvider) {\n            yield call(async ()=> await connectProvides.clear())\n            account = {\n                ...account,\n                connectName:ConnectProviders.unknown\n            }\n        }\n        yield put(nextAccountStatus({\n            ...account\n        }));\n\n    } catch (err) {\n        yield put(nextAccountStatus(err));\n    }\n}\n\nfunction* accountSage() {\n    yield all([takeLatest(updateAccountStatus, accountUpdateSaga)]);\n}\n\n// function* goCleanAccount({payload}: PayloadAction<undefined>) {\n//     yield put(cleanAccountStatus(undefined));\n// }\n\nfunction* accountRestSage() {\n    yield all([takeLatest(cleanAccountStatus, cleanAccountSaga)]);\n}\n\nexport const accountFork = [\n    fork(accountSage),\n    fork(accountRestSage)\n]\n\n// const subject = new Subject<{ command: keyof typeof StorageCommands, data?: any }>();\n// const goNextAccountStatus = async (currentState: Partial<AccountState>,\n//                                    nextState: Partial<AccountState>): Promise<{ accountState: Partial<AccountState> }> => {\n//     // let newAccountState: Partial<AccountState>\n//     switch (nextState) {\n//         case AccountStatus.RESET:\n//             connectProvides.clear()\n//             //TODO sessionStorage clear\n//             break;\n//         case AccountStatus.UN_CONNECT:\n//             console.log('connectName:', nextState.connectName, 'readyState:', currentState.readyState)\n//             // if(nextState.readyState !== currentState.readyState )  {\n//             //     await connect({...currentState,...nextState})\n//             // }\n//             // if (success) {\n//             //     nextState\n//             // } else {\n//             //     return {accountState:currentAccountState}\n//             // }\n//             break;\n//         // case AccountStatus.CONNECT:\n//         case AccountStatus.DEPOSITING:\n//             break;\n//         case AccountStatus.NO_ACCOUNT:\n//             // if (success) {\n//             //\n//             // } else {\n//             //   return {accountState:currentAccountState}\n//             // }\n//             break;\n//         case AccountStatus.LOCKED:\n//         // if (success) {\n//         //\n//         //   return await goNextAccountStatus({...currentAccountState, readyState: AccountStatus.ACTIVATED})\n//         //\n//         // } else {\n//         //   return {accountState:currentAccountState}\n//         // }\n//\n//         case AccountStatus.ACTIVATED:\n//\n//         // goNextAccountStatus({\n//         //   ...newAccountState\n//         //   readyState: AccountStatus.LOCKED\n//         // })\n//         // return {accountState: nextState}\n//\n//     }\n//     return {accountState: nextState}\n// }\n//\n// const goAccountLocked = async (accountState: AccountState): Promise<{ accountState: Partial<AccountState> }> => {\n//     if (accountState.readyState === AccountStatus.ACTIVATED) {\n//         //TODO GOBACK TO LOCKED STATE\n//         return {\n//             accountState: {\n//                 ...accountState,\n//                 readyState: AccountStatus.LOCKED\n//             }\n//         }\n//     } else {\n//     }\n//     return {\n//         accountState: {}\n//     }\n// }\n// const goCleanAccount = async (): Promise<{ accountState: Partial<AccountState> }> => {\n//\n//     subject.next({command: StorageCommands.CLEAN})\n//     return {\n//         accountState: {\n//             accAddress: '',\n//             readyState: AccountStatus.RESET,\n//             accountId: -1,\n//             apiKey: '',\n//             eddsaKey: '',\n//             connectName: ConnectProviders.UnKnow,\n//             status: 'UNSET',\n//             errorMessage: null,\n//         }\n//     }\n// }\n//\n//\n//\n\n","import { all } from \"redux-saga/effects\"\n// import machine from \"../state_machine/fsm/machine\"\n// import { TRANSITION } from \"../state_machine/fsm/actionTypes\"\n// import { helloSaga } from \"./sagas\"\nimport { tokenSaga } from './token/saga';\nimport { ammForks } from './Amm';\nimport { tickerForks } from './ticker/saga';\nimport { systemForks } from './system/saga';\nimport { walletLayer1Fork } from './walletLayer1/saga';\nimport { walletLayer2Fork } from './walletLayer2/saga';\nimport { userRewardsForks } from './userRewards/saga';\nimport { socketForks } from './socket/saga';\nimport { accountFork } from './account/saga';\n\n\n// https://css-tricks.com/finite-state-machines-with-react/\n// https://musing-rosalind-2ce8e7.netlify.com/?machine=%7B%22initial%22%3A%22initial%22%2C%22states%22%3A%7B%22initial%22%3A%7B%22on%22%3A%7B%22LOGIN%22%3A%22loggedIn%22%2C%22LOGOUT%22%3A%22loggedOut%22%7D%7D%2C%22loggedOut%22%3A%7B%22on%22%3A%7B%22SUBMIT%22%3A%22loading%22%7D%7D%2C%22loading%22%3A%7B%22on%22%3A%7B%22SUCCESS%22%3A%22loggedIn%22%2C%22FAIL%22%3A%22loggedOut%22%7D%7D%2C%22loggedIn%22%3A%7B%22onEntry%22%3A%5B%22SET_TOKEN%22%5D%2C%22onExit%22%3A%5B%22CLEAR_TOKEN%22%5D%2C%22on%22%3A%7B%22LOGOUT%22%3A%22loggedOut%22%7D%7D%7D%7D\n\n// function* machineHandler(event: any, action: any) {\n//\n//   // @ts-ignore\n//   const currentAppState = yield select((state) => { state.account.status })\n//   const nextAppState = machine.transition(currentAppState, event)\n//\n//   yield put({\n//     type: \"APP_STATE/\" + nextAppState.value,\n//     payload: {\n//       value: nextAppState.value\n//     }\n//   });\n//\n//   console.debug(\"-> from \" + currentAppState + \" to \" + nextAppState);\n//\n//   for (let i = 0; i < nextAppState.actions.length; i++) {\n//     yield put({\n//       type: nextAppState.actions[i],\n//       payload: action\n//     });\n//   }\n// }\n\n// function* watchTransition() {\n//   yield takeEvery(TRANSITION, function*(action: any) {\n//     yield machineHandler(action.event, action.payload);\n//   });\n// }\n\nfunction* mySaga() {\n    yield all([\n        // fork(helloSaga),\n        // fork(watchTransition),\n        ...tokenSaga,\n        ...walletLayer1Fork,\n        ...walletLayer2Fork,\n        ...systemForks,\n        ...ammForks,\n        ...tickerForks,\n        ...userRewardsForks,\n        ...socketForks,\n        ...accountFork\n\n    ]);\n}\n\nexport default mySaga;\n","import { useDispatch, useSelector } from 'react-redux'\nimport { getTicker, getTickers, statusUnset } from './reducer';\nimport { TickerStates } from './interface';\nimport { CoinKey } from '@loopring-web/common-resources';\nimport React from 'react';\n\nexport function useTicker(): TickerStates & {\n    updateTickers: (tickerKeys: Array<CoinKey<any>>) => void,\n    updateTicker: (tickerKey: CoinKey<any>) => void,\n    statusUnset: () => void,\n} {\n    const tickerMap: TickerStates = useSelector((state: any) => state.tickerMap)\n    const dispatch = useDispatch();\n    return {\n        ...tickerMap,\n        statusUnset: React.useCallback(() => dispatch(statusUnset(undefined)), [dispatch]),\n        updateTickers: React.useCallback((tickerKeys: Array<CoinKey<any>>) => dispatch(getTickers({tickerKeys})), [dispatch]),\n        updateTicker: React.useCallback((tickerKey: CoinKey<any>) => dispatch(getTicker({tickerKey})), [dispatch]),\n    }\n\n}\n","import { useDispatch, useSelector } from 'react-redux'\nimport { updateSystem } from './reducer';\nimport { System, SystemStatus } from './interface';\nimport React from 'react';\nimport { statusUnset } from '../Amm/AmmMap';\n\nexport function useSystem(): SystemStatus & {\n    updateSystem:(system:Partial<System< {[key:string]:any}>>)=>void,\n    statusUnset:()=>void,\n} {\n    const system:SystemStatus = useSelector((state: any) => state.system)\n    const dispatch = useDispatch();\n    return {\n        ...system,\n        statusUnset:React.useCallback(()=>dispatch(statusUnset(undefined)),[dispatch]),\n        updateSystem:React.useCallback((system:Partial<System<{[key:string]:any}>>)=>dispatch(updateSystem(system)),[dispatch]),\n    }\n\n}\n","let _myLog;\nif (process.env.NODE_ENV !== 'production') {\n    _myLog = console.log;\n}else{\n    _myLog = function(message?: any, ...optionalParams: any[]){};\n}\nlet _myError;\nif (process.env.NODE_ENV !== 'production') {\n    _myError =  console.error;\n}else{\n    _myError = function(message?: any, ...optionalParams: any[]){};\n}\nexport const myLog = _myLog;\nexport const myError = _myError;","export enum Theme {\n    dark = 'dark',\n    light = 'light',\n}\n\nexport enum LangType {\n    en = 'en_US',\n    cn = 'zh_CN',\n}\n\nexport enum SystemStatus {\n    NORMAL,\n    ERROR,\n    UNKNOWN,\n}\n\nexport enum MODAL_TYPE {\n    UNKNOWN,\n    LOADING,\n    WALLET,\n}\n\n\nexport enum ActionResultCode {\n    NoError,\n    DataNotReady,\n    GetAccError,\n    GenEddsaKeyError,\n    UpdateAccoutError,\n    ApproveFailed,\n    DepositFailed,\n}\n\nexport interface ActionResult {\n    code: ActionResultCode\n    data?: any\n}\n\nexport const REFRESH_RATE = 1000\n\nexport const REFRESH_RATE_SLOW = 15000\n\nexport const UPDATE_ACC_DELAY = 2500\n\nexport const TOAST_TIME = 3000\n\nexport const SHORT_INTERVAL = 200\n\nexport const DAYS = 30\n","import { useDispatch, useSelector } from 'react-redux'\nimport { reset, socketUpdateBalance, statusUnset, updateWalletLayer2 } from './reducer';\nimport { WalletLayer2States } from './interface';\nimport { myLog } from 'utils/log_tools';\nimport _ from 'lodash'\nimport React from 'react';\nimport { UPDATE_ACC_DELAY } from 'defs/common_defs';\nimport * as loopring_defs from 'loopring-sdk';\n\nexport function useWalletLayer2(): WalletLayer2States & {\n    delayAndUpdateWalletLayer2: () => Promise<void>,\n    updateWalletLayer2: () => void,\n    socketUpdateBalance: (balance:{[key:string ]:loopring_defs.UserBalanceInfo}) => void,\n    statusUnset: () => void,\n    resetLayer2: () => void,\n} {\n    const walletLayer2: WalletLayer2States = useSelector((state: any) => state.walletLayer2)\n    const dispatch = useDispatch();\n\n    return {\n        ...walletLayer2,\n        resetLayer2: React.useCallback(() => {\n            dispatch(reset(undefined))\n        }, [dispatch]),\n        statusUnset: React.useCallback(() => dispatch(statusUnset(undefined)), [dispatch]),\n        updateWalletLayer2: React.useCallback(() => dispatch(updateWalletLayer2(undefined)), [dispatch]),\n        socketUpdateBalance: React.useCallback((balance:{[key:string ]:loopring_defs.UserBalanceInfo})=> dispatch(socketUpdateBalance(balance)), [dispatch]),\n        delayAndUpdateWalletLayer2: React.useCallback(async () => {\n            myLog('try to delayAndUpdateWalletLayer2!' + new Date().getTime())\n            _.delay(() => {\n                dispatch(updateWalletLayer2(undefined))\n                myLog('try to delayAndUpdateWalletLayer2 updated!' + new Date().getTime())\n                return Promise.resolve()\n            }, UPDATE_ACC_DELAY);\n        }, [dispatch]),\n    }\n\n}\n","import { useDispatch, useSelector } from 'react-redux'\nimport { sendSocketTopic, socketEnd } from './reducer';\nimport { SocketMap } from './interface';\nimport React from 'react';\nimport { statusUnset } from '../Amm/AmmMap';\nimport { StateBase } from '@loopring-web/common-resources';\n\nexport function useSocket(): StateBase & {\n    // socketStart:()=>void,\n    statusUnset: () => void,\n    sendSocketTopic: (socket: SocketMap) => void,\n    socketEnd: () => void\n} {\n    const socket: StateBase & { socket: SocketMap } = useSelector((state: any) => state.socket)\n    const dispatch = useDispatch();\n    // const socketStart = () => {\n    //     dispatch(socketSlice.actions.socketStart(undefined))\n    // }\n    // const sendSocketTopic = (socket: SocketMap) => {\n    //     dispatch(socketSlice.actions.sendSocketTopic({socket}))\n    // }\n    // const socketEnd = () => {\n    //     dispatch(socketSlice.actions.socketEnd(undefined))\n    // }\n    // const statusUnset = () => {\n    //     dispatch(socketSlice.actions.statusUnset(undefined))\n    // }\n    return {\n        ...socket,\n        statusUnset: React.useCallback(() => dispatch(statusUnset(undefined)), [dispatch]),\n        sendSocketTopic: React.useCallback((socket: SocketMap) => dispatch(sendSocketTopic({socket})), [dispatch]),\n        socketEnd: React.useCallback(() => dispatch(socketEnd(undefined)), [dispatch]),\n    }\n\n}\n","import { useDispatch, useSelector } from 'react-redux'\nimport { getUserRewards, statusUnset } from './reducer';\nimport { UserRewardsStates } from './interface';\nimport React from 'react';\n\nexport function useUserRewards(): UserRewardsStates & {\n    getUserRewards:()=>void,\n    statusUnset:()=>void,\n} {\n    const userRewardsMap:UserRewardsStates = useSelector((state: any) => state.userRewardsMap)\n    const dispatch = useDispatch();\n    return {\n        ...userRewardsMap,\n        statusUnset:React.useCallback(()=>dispatch(statusUnset(undefined)),[dispatch]),\n        getUserRewards: React.useCallback(()=>dispatch(getUserRewards(undefined)),[dispatch]),\n    }\n\n}\n","import { createSlice, PayloadAction, Slice } from '@reduxjs/toolkit'\nimport { SliceCaseReducers } from '@reduxjs/toolkit/src/createSlice'\nimport { Confirmation } from './interface';\n\nconst initialState: Confirmation = {\n    confirmed: false,\n}\n\nconst confirmationSlice: Slice<Confirmation> = createSlice<Confirmation, SliceCaseReducers<Confirmation>, 'confirmation'>({\n    name: 'confirmation',\n    initialState,\n    reducers: {\n        confirm(state: Confirmation, action: PayloadAction<string>) {\n            state.confirmed = true\n        },\n    },\n});\n\nexport { confirmationSlice }\nexport const { confirm } = confirmationSlice.actions\n","import { createSlice, PayloadAction, Slice } from '@reduxjs/toolkit'\nimport { FavoriteMarketStates } from './interface';\nimport { SliceCaseReducers } from '@reduxjs/toolkit/src/createSlice';\n\nconst favoriteMarketSlice: Slice<FavoriteMarketStates> = createSlice<FavoriteMarketStates,SliceCaseReducers<FavoriteMarketStates>,'favoriteMarket'>({\n    name: 'favoriteMarket',\n    initialState: [],\n    reducers: {\n        clearAll(state:FavoriteMarketStates, action: PayloadAction<undefined>) {\n            state.length = 0;\n        },\n        removeMarket(state:FavoriteMarketStates, action: PayloadAction<string>) {\n            const pair = action.payload\n            if (pair && state.includes(pair)) {\n                const index = state.findIndex(_pair => _pair === pair)\n                state.splice(index, 1)\n            }\n        },\n        addMarket(state:FavoriteMarketStates, action: PayloadAction<string>) {\n            const pair = action.payload\n            if (pair && state.findIndex((_pair: string) => _pair === pair) === -1) {\n                state.push(pair)\n            }\n        },\n        addMarkets(state:FavoriteMarketStates, action: PayloadAction<string[]>) {\n            const pairs = action.payload\n            if (pairs.length) {\n                pairs.forEach(pair => {\n                    if (pair && state.findIndex((_pair: string) => _pair === pair) === -1) {\n                        state.push(pair)\n                    }\n                })\n            }\n        },\n\n    },\n});\nexport { favoriteMarketSlice };\nexport const {clearAll, removeMarket, addMarket, addMarkets} = favoriteMarketSlice.actions\n","import { createSlice, PayloadAction, Slice } from '@reduxjs/toolkit'\nimport { SliceCaseReducers } from '@reduxjs/toolkit/src/createSlice'\nimport { TxInfo, OnchainHashInfo, } from './interface'\n\nconst initialState: OnchainHashInfo = {\n    depositHashes: {},\n    withdrawHashes: {},\n}\n\nconst onchainHashInfoSlice: Slice<OnchainHashInfo> = createSlice<OnchainHashInfo, SliceCaseReducers<OnchainHashInfo>, 'onchainHashInfo'>({\n    name: 'onchainHashInfo',\n    initialState,\n    reducers: {\n        clearAll(state: OnchainHashInfo, action: PayloadAction<undefined>) {\n            state = initialState\n        },\n        clearDepositHash(state: OnchainHashInfo) {\n            state.depositHashes = {}\n        },\n        clearWithdrawHash(state: OnchainHashInfo) {\n            state.withdrawHashes = {}\n        },\n        updateDepositHash(state: OnchainHashInfo, action: PayloadAction<TxInfo>) {\n            const txInfo = action.payload\n            state.depositHashes[txInfo.hash] = txInfo \n        },\n        updateWithdrawHash(state: OnchainHashInfo, action: PayloadAction<TxInfo>) {\n            const txInfo = action.payload\n            state.withdrawHashes[txInfo.hash] = txInfo \n        }\n    },\n})\n\nexport { onchainHashInfoSlice }\nexport const {clearAll, clearDepositHash, updateDepositHash, clearWithdrawHash, updateWithdrawHash} = onchainHashInfoSlice.actions\n","import { combineReducers } from '@reduxjs/toolkit';\nimport { confirmationSlice } from './confirmation';\nimport { favoriteMarketSlice } from './favoriteMarket';\nimport { onchainHashInfoSlice } from './onchainHashInfo';\n\nexport const  localStoreReducer = combineReducers({\n    // ammRecord: ammRecordSlice.reducer,\n    // ammTrades: ammTradesSlice.reducer,\n    favoriteMarket: favoriteMarketSlice.reducer,\n    onchainHashInfo: onchainHashInfoSlice.reducer,\n    confirmation: confirmationSlice.reducer,\n})\n","import { CombinedState, combineReducers, configureStore, getDefaultMiddleware } from '@reduxjs/toolkit'\n\nimport { useDispatch } from 'react-redux'\n\nimport { persistReducer } from 'redux-persist'\nimport storageSession from 'redux-persist/lib/storage/session'\nimport storage from 'redux-persist/lib/storage'\nimport persistStore from 'redux-persist/es/persistStore'\nimport hardSet from 'redux-persist/lib/stateReconciler/hardSet'\n\nimport createSagaMiddleware from 'redux-saga'\nimport * as imgConfig from '@loopring-web/common-resources/assets/images/coin/loopring.json'\nimport { reduxBatch } from '@manaflair/redux-batch'\nimport { updateVersion } from './global/actions'\nimport accountSlice from './account/reducer'\nimport { modalsSlice, setCoinJson, setLanguage, settingsSlice, SettingsState, } from '@loopring-web/component-lib';\nimport { ammReducer } from './Amm';\nimport { tokenMapSlice } from './token';\nimport mySaga from './rootSaga';\nimport { tickerMapSlice } from './ticker';\nimport { systemSlice } from './system';\nimport { walletLayer1Slice } from './walletLayer1';\nimport { walletLayer2Slice } from './walletLayer2';\nimport { socketSlice } from './socket';\nimport { userRewardsMapSlice } from './userRewards';\nimport { localStoreReducer } from './localStore';\nimport { myLog } from 'utils/log_tools'\nimport { FavoriteMarketStates } from './localStore/favoriteMarket'\nimport { OnchainHashInfo } from './localStore/onchainHashInfo'\nimport { Confirmation } from './localStore/confirmation/interface'\n\nconst sagaMiddleware = createSagaMiddleware()\n\nconst DEFAULT_TIMEOUT = 1000 * 60 * 15\n\nmyLog('---store DEFAULT_TIMEOUT:', DEFAULT_TIMEOUT)\n\n//\nconst persistAccConfig = {\n    key: 'account',\n    storage: storageSession,\n    timeout: DEFAULT_TIMEOUT,\n};\n\nconst persistSettingConfig = {\n    key: 'settings',\n    storage: storage,\n    stateReconciler: hardSet,\n};\n\nconst persistLocalStoreConfig = {\n    key: 'localStore',\n    storage: storage,\n    stateReconciler: hardSet,\n};\nconst persistedAccountReducer = persistReducer(persistAccConfig, accountSlice.reducer)\n\nconst persistedSettingReducer = persistReducer<SettingsState>(persistSettingConfig, settingsSlice.reducer)\n\nconst persistedLocalStoreReducer = persistReducer<CombinedState<{\n    favoriteMarket: FavoriteMarketStates,\n    onchainHashInfo: OnchainHashInfo,\n    confirmation: Confirmation,\n}>>(persistLocalStoreConfig, localStoreReducer)\n\nconst reducer = combineReducers({\n    account: persistedAccountReducer,\n    socket: socketSlice.reducer,\n    settings: persistedSettingReducer,\n    system: systemSlice.reducer,\n    modals: modalsSlice.reducer,\n    userRewardsMap: userRewardsMapSlice.reducer,\n    amm: ammReducer,\n    tokenMap: tokenMapSlice.reducer,\n    walletLayer2: walletLayer2Slice.reducer,\n    walletLayer1: walletLayer1Slice.reducer,\n    tickerMap: tickerMapSlice.reducer,\n    localStore: persistedLocalStoreReducer,\n})\n\n//const persistedReducer = persistReducer(persistConfig ,reducer)\n\n\nconst store = configureStore({\n    reducer,\n    // middleware: (getDefaultMiddleware) => getDefaultMiddleware().concat(logger),\n    middleware: [...getDefaultMiddleware({\n        thunk: false,\n        serializableCheck: false,\n    }), sagaMiddleware],\n    //middleware: [...getDefaultMiddleware({ thunk: true }), ],\n    devTools: process.env.NODE_ENV !== 'production',\n    enhancers: [reduxBatch],\n})\nstore.dispatch(updateVersion())\n\nstore.dispatch(setLanguage(store.getState().settings.language))\n\nstore.dispatch(setCoinJson(imgConfig.frames))\n\n// @ts-ignore\nsagaMiddleware.run(mySaga, store.dispatch);\n\n// The store has been created with these options:\n// - The slice reducers were automatically passed to combineReducers()\n// - redux-thunk and redux-logger were added as middleware\n// - The Redux DevTools Extension is disabled for production\n// - The middleware, batch, and devtools enhancers were composed together\n\nexport type AppDispatch = typeof store.dispatch\nexport const useAppDispatch = () => useDispatch<AppDispatch>()\n\nexport type RootState = ReturnType<typeof reducer>\nexport const persistor = persistStore(store)\n\n// persistor.persist()\n\nexport default store\n","export enum Commands {\n    ErrorNetwork='ErrorNetwork',\n    LockAccount='LockAccount',// clear private data\n    NoAccount='NoAccount',//\n    DepositingAccount='DepositingAccount',\n    ErrorApproveToken='ErrorApproveToken',\n    ErrorDepositSign='ErrorDepositSign',\n    ProcessDeposit='ProcessDeposit',// two or one step\n    SignAccount='SignAccount', //unlock or update account  assgin\n    ErrorSign='ErrorSign',\n    ProcessSign='ProcessSign',\n    ProcessAccountCheck='ProcessAccountCheck',\n    AccountUnlocked = 'AccountUnlocked'\n}\nexport enum ErrorType {\n    FailedConnect = 'FailedConnect'\n}\n// 'ConnectWallet',\n// 'UnLockWallet',\n// 'SignatureTransfer',\n// 'SignatureApprove'\n\n\nexport enum ProcessingType{\n    waiting = 'waiting',\n    nextStep = 'nextStep'\n}\n","import store from '../../stores';\nimport { toBig } from 'loopring-sdk';\nimport BigNumber from 'bignumber.js';\n\nexport const volumeToCount = (symbol:string,volumn:string|number|BigNumber,tokenMap= store.getState().tokenMap.tokenMap):number|undefined =>{\n   const result =  volumeToCountAsBigNumber(symbol,volumn,tokenMap);\n   return result? result.toNumber():undefined;\n}\n\nexport const volumeToCountAsBigNumber = (symbol:string,volumn:string|number|BigNumber,tokenMap= store.getState().tokenMap.tokenMap):BigNumber|undefined =>{\n    if(tokenMap && tokenMap[symbol] && typeof volumn !== 'undefined'){\n        try{\n            return toBig(volumn).div('1e' + tokenMap[symbol].decimals)\n        }catch (error){\n            throw error;\n        }\n    }else{\n        return undefined;\n    }\n}","import { AmmDetailBase } from '@loopring-web/common-resources';\nimport { volumeToCountAsBigNumber } from './volumeToCount';\n\nexport const ammPairInit = ({\n                                   pair,\n                                   _ammCalcData,\n                                   ammType,\n                                   tokenMap,\n                                   coinMap,\n                                   walletMap,\n                                   ammMap,\n                                   tickerData,\n                                   ammPoolsBalance\n                               }: any) => {\n    _ammCalcData.coinInfoMap = coinMap;\n    if (tickerData) {\n        _ammCalcData.AtoB = Number(tickerData.close)\n    }\n    if (isNaN(_ammCalcData.AtoB) && ammPoolsBalance) {\n        const baseVol = volumeToCountAsBigNumber(pair.coinAInfo.simpleName, ammPoolsBalance.pooled[ 0 ].volume);\n        const quoteVol = volumeToCountAsBigNumber(pair.coinBInfo.simpleName, ammPoolsBalance.pooled[ 1 ].volume);\n        _ammCalcData.AtoB = quoteVol && baseVol && parseFloat(quoteVol.div(baseVol).toFixed(7, 0) as string)\n    }\n    if (pair.coinAInfo) {\n        // if(ammType === AmmPanelType.Deposit ) {\n        _ammCalcData.myCoinA = {\n            belong: pair.coinAInfo.simpleName,\n            balance: walletMap ? walletMap[ pair.coinAInfo.simpleName ]?.count : 0,\n        }\n        _ammCalcData.myCoinB = {\n            belong: pair.coinBInfo.simpleName,\n            balance: walletMap ? walletMap[ pair.coinBInfo.simpleName ]?.count : 0,\n        }\n        // }else {\n        const key = `${pair.coinAInfo.simpleName}-${pair.coinBInfo.simpleName}`;\n        let coinACount = 0, coinBCount = 0;\n        if (walletMap) {\n            const balance = walletMap ? walletMap[ 'LP-' + key ]?.count : 0;\n            const {totalLPToken, totalA, totalB}: AmmDetailBase<any> = ammMap[ 'AMM-' + key ];\n            if (totalA && totalLPToken && totalB) {\n                coinACount = totalA / totalLPToken * balance;\n                coinBCount = totalB / totalLPToken * balance;\n            }\n            _ammCalcData.lpCoin = balance;\n        }\n        _ammCalcData.lpCoinA = {\n            belong: pair.coinAInfo.simpleName,\n            balance: coinACount,\n        }\n        _ammCalcData.lpCoinB = {\n            belong: pair.coinBInfo.simpleName,\n            balance: coinBCount,\n        }\n        // }\n    }\n\n\n    return _ammCalcData\n}\n\n\n","import { generateKeyPair, sleep, toBig, toHex } from 'loopring-sdk';\nimport { connectProvides } from '@loopring-web/web3-provider';\nimport { LoopringAPI } from 'api_wrapper';\nimport store from '../../stores';\nimport { accountServices } from './accountServices';\nimport { myLog } from '../../utils/log_tools';\n\nexport async function unlockAccount() {\n    const account = store.getState().account;\n    const {exchangeInfo} = store.getState().system;\n    accountServices.sendSign()\n    if (exchangeInfo && LoopringAPI.userAPI && account.nonce !== undefined) {\n        try{\n            const eddsaKey = await generateKeyPair(\n                connectProvides.usedWeb3,\n                account.accAddress,\n                exchangeInfo.exchangeAddress,\n                account.nonce - 1,\n                account.connectName as any,\n            )\n            const {apiKey} = (await LoopringAPI.userAPI.getUserApiKey({\n                accountId: account.accountId\n            }, eddsaKey.sk))\n            myLog('After connect >>,unlockAccount: step2 apiKey',apiKey)\n\n            accountServices.sendAccountSigned(account.accountId,apiKey, eddsaKey)\n        }catch (e){\n            accountServices.sendErrorUnlock()\n\n        }\n\n\n\n    }\n}","import { AccountStatus, } from '@loopring-web/common-resources';\nimport { setShowAccount } from '@loopring-web/component-lib';\n\nimport { Subject } from 'rxjs';\nimport { Commands } from './command';\nimport { LoopringAPI } from 'api_wrapper';\nimport { myLog } from '../../utils/log_tools';\nimport store from 'stores';\nimport { statusUnset, updateAccountStatus } from 'stores/account';\nimport * as sdk from 'loopring-sdk'\nimport { unlockAccount } from './unlockAccount';\nimport { reset as resetWalletLayer2 } from 'stores/walletLayer2';\nimport { sleep } from 'loopring-sdk';\n\nconst subject = new Subject<{ status: keyof typeof Commands, data: any, }>();\n\nexport const accountServices = {\n    //INFO: for update Account and unlock account\n    sendSign: async () => {\n        // const account = store.getState().account;\n        // const {exchangeInfo} = store.getState().system;\n        subject.next({\n            status: Commands.ProcessSign,\n            data: undefined,\n        })\n        // if (exchangeInfo && LoopringAPI.userAPI && account.nonce !== undefined) {\n        //     const eddsaKey = await generateKeyPair(\n        //         connectProvides.usedWeb3,\n        //         account.accAddress,\n        //         exchangeInfo.exchangeAddress,\n        //         account.nonce - 1,\n        //         account.connectName as any,\n        //     )\n        //     const sk = toHex(toBig(eddsaKey.keyPair.secretKey))\n        //     const {apiKey} = (await LoopringAPI.userAPI.getUserApiKey({\n        //         accountId: account.accountId\n        //     }, sk))\n        //\n        //     walletLayer2Services.sendAccountSigned(apiKey, eddsaKey)\n        //\n        // }\n    },\n    sendErrorUnlock: () => {\n        subject.next({\n            status: Commands.ErrorSign,\n            data: undefined,\n        })\n    },\n\n    sendUpdateAccStatusAndReset: (readyState: AccountStatus, accountId: number = -1) => {\n        store.dispatch(updateAccountStatus({\n            accountId,\n            readyState,\n            apiKey: '',\n            eddsaKey: '',\n            publicKey: '',\n            nonce: undefined,\n        }))\n\n        if (readyState === AccountStatus.ERROR_NETWORK) {\n            subject.next({\n                status: Commands.ErrorNetwork,\n                data: undefined,\n            })\n        } else {\n            const { accAddress } = store.getState().account\n            accountServices.sendCheckAccount(accAddress);\n        }\n\n    },\n\n    //INFO: for lock account todo clear the private info, user click or provider on wrong network\n    sendAccountLock: async (accInfo?: sdk.AccountInfo) => {\n        const updateInfo = accInfo ? {\n            readyState: AccountStatus.LOCKED,\n            accountId: accInfo.accountId,\n            nonce: accInfo.nonce,\n            level: accInfo.tags,\n        } : {\n            readyState: AccountStatus.LOCKED,\n            apiKey: '',\n            eddsaKey: '',\n            publicKey: '',\n            nonce: undefined,\n        }\n        store.dispatch(updateAccountStatus(updateInfo))\n        store.dispatch(resetWalletLayer2(undefined))\n        await sleep(100)\n        subject.next({\n            status: Commands.LockAccount,\n            data: undefined,\n        })\n    },\n    sendActiveAccountDeposit: () => {\n    },\n    sendAccountSigned: (accountId?: number, apiKey?: string, eddsaKey?: any) => {\n        const updateInfo = accountId && apiKey && eddsaKey ? {\n            accountId,\n            apiKey,\n            eddsaKey,\n            publicKey: {\n                x: sdk.toHex(sdk.toBig(eddsaKey.keyPair.publicKeyX)),\n                y: sdk.toHex(sdk.toBig(eddsaKey.keyPair.publicKeyY)),\n            },\n            readyState: AccountStatus.ACTIVATED\n        } : { readyState: AccountStatus.ACTIVATED }\n        store.dispatch(updateAccountStatus(updateInfo));\n        subject.next({\n            status: Commands.AccountUnlocked,\n            data: undefined\n        })\n    },\n    sendNoAccount: () => {\n        store.dispatch(updateAccountStatus({ readyState: AccountStatus.NO_ACCOUNT, }))\n        subject.next({\n            status: Commands.NoAccount,\n            data: undefined\n        })\n    },\n    sendNeedUpdateAccount: async (accInfo: sdk.AccountInfo) => {\n        myLog('sendNeedUpdateAccount accInfo:', accInfo)\n        store.dispatch(updateAccountStatus({ readyState: AccountStatus.DEPOSITING, }))\n        subject.next({\n            status: Commands.SignAccount,\n            data: accInfo\n        })\n    },\n\n    sendCheckAcc: async() => {\n        if (store) {\n            const account = store.getState().account\n            if (LoopringAPI.exchangeAPI) {\n                const { accInfo } = (await LoopringAPI.exchangeAPI.getAccount({\n                    owner: account.accAddress\n                }))\n\n                if (accInfo === undefined) {\n                    accountServices.sendNoAccount()\n                } else {\n                    if (account.accountId) {\n                        if (!account.publicKey.x || !account.publicKey.y) {\n                            myLog('-------need update account!')\n                            accountServices.sendNeedUpdateAccount(accInfo)\n                        } else {\n                            myLog('-------need unlockAccount!')\n                            unlockAccount()\n                        }\n                    } else {\n                        myLog('unexpected accInfo:', accInfo)\n                        throw Error('unexpected accinfo:' + accInfo)\n                    }\n                }\n            }\n        }\n\n\n    },\n    sendCheckAccount: async (ethAddress: string) => {\n        const self = this;\n        myLog('After connect >>,checkAccount: step3 processAccountCheck', ethAddress)\n        store.dispatch(updateAccountStatus({ accAddress: ethAddress, readyState: AccountStatus.UN_CONNECT }))\n        subject.next({\n            status: Commands.ProcessAccountCheck,\n            data: undefined\n        })\n        if (LoopringAPI.exchangeAPI) {\n            const { accInfo } = (await LoopringAPI.exchangeAPI.getAccount({\n                owner: ethAddress\n            }))\n            myLog('After connect >>,checkAccount: step3', accInfo)\n\n            //TODO code is notaccount\n            if (accInfo === undefined) {\n                accountServices.sendNoAccount()\n            } else {\n                if (accInfo.accountId) {\n                    if (!accInfo.publicKey.x || !accInfo.publicKey.y) {\n                        myLog('-------need update account!')\n                        accountServices.sendNeedUpdateAccount(accInfo)\n                    } else {\n                        accountServices.sendAccountLock(accInfo)\n                    }\n                } else {\n                    myLog('unexpected accInfo:', accInfo)\n                    throw Error('unexpected accinfo:' + accInfo)\n                }\n            }\n        }\n\n        // try {\n        //\n        //\n        //     if (accInfo && accInfo.accountId) {\n        //         await unlockAccount({accInfo, shouldShow: shouldShow ?? false})\n        //     }\n        //     statusAccountUnset();\n        // } catch (reason) {\n        //     dumpError400(reason)\n        //     await activeAccount({reason, shouldShow: shouldShow ?? false});\n        //     statusAccountUnset();\n        // }\n\n\n    },\n\n    onSocket: () => subject.asObservable()\n    // clearMessages: () => subject.next(),\n    // onSocket: () => subject.asObservable()\n};","import store from '../stores';\nimport { AccountStep, setShowAccount, setShowConnect, Toast, WalletConnectStep } from '@loopring-web/component-lib';\nimport { fnType } from '@loopring-web/common-resources';\nimport { changeShowModel } from 'stores/account';\nimport { accountServices } from 'services/account/accountServices'\nimport { myLog } from 'utils/log_tools';\n\nexport const accountStaticCallBack = (onclickMap: { [key: number]: [fn: (props: any) => any, args?: any[]] }, deps?: any[]) => {\n    const { readyState } = store.getState().account;\n    \n    let fn, args;\n    [fn, args] = onclickMap[readyState] ? onclickMap[readyState] : [];\n    if (typeof fn === 'function') {\n        args = [...(args ?? []), ...(deps ?? [])] as [props: any]\n        return fn.apply(this, args);\n    }\n\n}\n\nexport const btnLabel = {\n    [fnType.UN_CONNECT]: [\n        function () {\n            return `labelConnectWallet`\n        }\n    ],\n    [fnType.ERROR_NETWORK]: [\n        function () {\n            return `labelWrongNetwork`\n        }\n    ],\n    [fnType.NO_ACCOUNT]: [\n        function () {\n            return `depositTitleAndActive`\n        }\n    ],\n    [fnType.DEFAULT]: [\n        function () {\n            return `depositTitleAndActive`\n        }\n    ],\n    [fnType.NOT_ACTIVE]: [\n        function () {\n            return `depositTitleActive`\n        }\n    ],\n    [fnType.ACTIVATED]: [\n        function () {\n            return undefined\n        }\n    ],\n    [fnType.LOCKED]: [\n        function () {\n            return `labelUnLockLayer2`\n        }\n    ]\n};\n\n\nexport const btnClickMap: { [key: string]: [fn: (props: any) => any, args?: any[]] } = {\n    [fnType.ERROR_NETWORK]: [\n        function () {\n            //TODO toast\n            myLog('get error network!')\n        }\n    ],\n    [fnType.UN_CONNECT]: [\n        function () {\n            myLog('UN_CONNECT!', );\n            store.dispatch(changeShowModel({ _userOnModel: true }));\n            store.dispatch(setShowConnect({ isShow: true, step: WalletConnectStep.Provider }))\n        }\n    ]\n    , [fnType.NO_ACCOUNT]: [\n        function () {\n            myLog('NO_ACCOUNT! sendCheckAcc', );\n            store.dispatch(changeShowModel({ _userOnModel: true }));\n            accountServices.sendCheckAcc()\n        }\n    ]\n    , [fnType.DEPOSITING]: [\n        function () {\n            myLog('DEPOSITING! sendCheckAcc', );\n            store.dispatch(changeShowModel({ _userOnModel: true }));\n            accountServices.sendCheckAcc()\n        }\n    ]\n    ,[fnType.NOT_ACTIVE]: [\n        function () {\n            myLog('NOT_ACTIVE! sendCheckAcc', );\n            store.dispatch(changeShowModel({ _userOnModel: true }));\n            accountServices.sendCheckAcc()\n        }\n    ]\n    , [fnType.LOCKED]: [\n        function () {\n            store.dispatch(changeShowModel({ _userOnModel: true }));\n            store.dispatch(setShowAccount({ isShow: true, step: AccountStep.HadAccount }))\n        }\n    ]\n};\n\n","import store from '../../stores';\nimport { setSlippage } from '@loopring-web/component-lib';\n\ntype Cache = {\n    customSlippage?:number\n}\nexport  const makeCache  = (__cache__:Cache)=>{\n   if(typeof  __cache__.customSlippage !== undefined){\n       store.dispatch(setSlippage(__cache__.customSlippage as number))\n      // store.getState().settings\n   }\n}","import { debug } from \"console\"\n\nexport function deepClone(data: any) {\n    if (!data || !(data instanceof Object) || (typeof data == \"function\")) {\n        return data || undefined\n    }\n    let constructor = data.constructor\n    let result = new constructor()\n    for (let key in data) {\n        if (data.hasOwnProperty(key)) {\n            result[key] = deepClone(data[key])\n        }\n    }\n    return result\n}\n\nexport async function copyToClipBoard(text: string){ //复制到剪切板\n\n    if(document.execCommand){\n        var textarea =document.createElement('textarea')\n        document.body.appendChild(textarea)\n        textarea.value=text\n        textarea.select()\n        document.execCommand(\"copy\")\n        document.body.removeChild(textarea)\n\t}\n\n    if (navigator.clipboard) {\n        await navigator.clipboard.writeText(text)\n    }\n\n\tif((window as any).clipboardData) {\n        (window as any).clipboardData.setData(\"Text\", text)\n\n        console.log('clipboardData:', text)\n        return true\n    }\n\treturn false\n}","import store from 'stores'\n\nimport * as sdk from 'loopring-sdk'\n\nconst getTokenInfo = (symbol: string) => {\n    const tokenMap = store.getState().tokenMap.tokenMap\n\n    if (!tokenMap || !tokenMap[symbol]) {\n        return undefined\n    }\n\n    return tokenMap[symbol]\n}\n\nconst getMarketInfo = (symbol: string) => {\n    const marketMap = store.getState().tokenMap.marketMap\n\n    if (!marketMap || !marketMap[symbol]) {\n        return undefined\n    }\n\n    return marketMap[symbol]\n}\n\nexport function StringToNumberWithPrecision(rawVal: string, symbol: string) {\n    \n    if (rawVal === undefined || rawVal === null || rawVal.trim() === '')\n        return 0\n\n    const tokenInfo = getTokenInfo(symbol)\n\n    if (!tokenInfo) {\n        return undefined\n    }\n\n    return parseFloat(sdk.toBig(rawVal).toFixed(tokenInfo.precision, 0))\n}\n\n/*\n* format volume to real number\n*/\nexport function VolToNumberWithPrecision(rawVal: string, symbol: string) {\n\n    const tokenInfo = getTokenInfo(symbol)\n\n    if (!tokenInfo) {\n        return undefined\n    }\n\n    if (rawVal === undefined || rawVal === null || rawVal.trim() === '')\n        return 0\n\n    return sdk.toBig(rawVal).div('1e' + tokenInfo.decimals).toFixed(tokenInfo.precision, 0)\n}\n\n/*\n* format raw val with precision\n*/\nexport function FormatValWithPrecision(rawVal: string, symbol: string) {\n\n    const tokenInfo = getTokenInfo(symbol)\n\n    if (!tokenInfo) {\n        return undefined\n    }\n\n    if (rawVal === undefined || rawVal === null || rawVal.trim() === '')\n        return 0\n\n    return sdk.toBig(rawVal).toFixed(tokenInfo.precision, 0)\n}\n\n/*\n* format order price with precision\n*/\nexport function formatPriceWithPrecision(rawVal: string, \n    symbol: string) {\n    const marketInfo = getMarketInfo(symbol)\n    if (!rawVal || !marketInfo || !symbol) {\n        return '0'\n    }\n\n    return sdk.toBig(rawVal).toFixed(marketInfo.precisionForPrice)\n\n}","import {\n    AmmPoolActivityRule,\n    AmmPoolActivityStatus,\n    AmmPoolSnapshot,\n    LoopringMap,\n    TickerData,\n    toBig,\n} from 'loopring-sdk';\nimport { AmmActivity, AmmCardProps, MyAmmLP } from '@loopring-web/common-resources';\nimport store from '../../stores';\nimport { deepClone } from '../../utils/obj_tools';\nimport { AmmUserReward, AmmUserRewardMap } from 'loopring-sdk/dist/defs/loopring_defs';\nimport BigNumber from 'bignumber.js';\nimport { volumeToCount, volumeToCountAsBigNumber } from './volumeToCount';\nimport { coinMap } from '@loopring-web/component-lib';\nimport { AmmDetailStore } from '../../stores/Amm/AmmMap';\nimport { WalletMapExtend } from './makeWallet';\nimport { VolToNumberWithPrecision } from '../../utils/formatter_tool';\n\nexport type AmmActivityViewMap<R, I> = {\n    [key in keyof R]?: AmmActivity<I>[] | undefined\n}\nexport const makeUIAmmActivityMap = <R extends { [ key: string ]: any }, I extends { [ key: string ]: any }>\n({ammActivityMap, type, ammPoolActivityStatus}: {\n    ammActivityMap: LoopringMap<LoopringMap<AmmPoolActivityRule[ ]>> | undefined,\n    type: 'AMM_MINING' | 'SWAP_VOLUME_RANKING',\n    ammPoolActivityStatus: AmmPoolActivityStatus[]\n}, myReward: AmmUserRewardMap | undefined):\n    Array<AmmCardProps<I>> => {\n    const {coinMap, tokenMap, idIndex} = store.getState().tokenMap\n    let ammActivityViewMap: AmmActivityViewMap<R, I> = {}\n    if (ammActivityMap && ammActivityMap[ type ]) {\n\n\n        // @ts-ignore\n        ammPoolActivityStatus.forEach((status: AmmPoolActivityStatus) => {\n\n            if (ammActivityMap[ type ][ status ]) {\n                // @ts-ignore\n                ammActivityMap[ type ][ status ].reduce((prev: AmmActivityViewMap<R, I>, ammPoolActivityRule: AmmPoolActivityRule) => {\n\n                    if (coinMap && ammPoolActivityRule.awardRules[ 0 ] && idIndex && tokenMap) {\n\n                        const symbol = idIndex[ ammPoolActivityRule.awardRules[ 0 ].tokenId as any ]\n                        const totalRewards = VolToNumberWithPrecision(ammPoolActivityRule.awardRules[ 0 ].volume ,symbol)\n                        // @ts-ignore\n                        const item = {\n                            // @ts-ignore\n                            rewardToken: coinMap[ symbol ],\n                            totalRewards: Number(totalRewards),\n                            myRewards: status === AmmPoolActivityStatus.InProgress && myReward && myReward[ ammPoolActivityRule.market ] ?\n                                volumeToCount(symbol, myReward[ ammPoolActivityRule.market ]?.currentRewards[ 0 ].volume) : 0,\n                            duration: {\n                                from: new Date(ammPoolActivityRule?.rangeFrom),\n                                to: new Date(ammPoolActivityRule?.rangeTo),\n                            },\n                            isPass: AmmPoolActivityStatus.EndOfGame === status,\n                        }\n                        if (prev[ ammPoolActivityRule.market ]) {\n                            // @ts-ignore\n                            prev[ ammPoolActivityRule.market ].push(item);\n                        } else {\n                            // @ts-ignore\n                            prev[ ammPoolActivityRule.market ] = [item];\n                        }\n\n\n                        // return prev;\n                    }\n                    return prev;\n                }, ammActivityViewMap)\n\n            }\n        })\n    }\n    const resultArray = makeAsCard(ammActivityViewMap)\n    // console.log(resultArray)\n    return resultArray;\n\n\n}\nconst makeAsCard = <R extends { [ key: string ]: any }, I extends { [ key: string ]: any }>\n(ammActivityViewMap: AmmActivityViewMap<R, I> | undefined, myReward?: any): Array<AmmCardProps<I>> => {\n    const {coinMap} = store.getState().tokenMap\n    const {ammMap} = store.getState().amm.ammMap\n    try {\n        if (ammActivityViewMap && coinMap) {\n            // @ts-ignore\n            return Reflect.ownKeys(ammActivityViewMap).reduce((prev: Array<AmmCardProps<I>>, key: string) => {\n                const _ammInfo = ammMap[ key as string ]\n                if (_ammInfo && _ammInfo.coinA && coinMap && ammActivityViewMap[ key ]) {\n\n                    // @ts-ignore\n                    const itemArray = ammActivityViewMap[ key ].map((item) => {\n                        return {\n                            ...deepClone(_ammInfo),\n                            // @ts-ignore\n                            coinAInfo: coinMap[ _ammInfo.coinA ],\n                            // @ts-ignore\n                            coinBInfo: coinMap[ _ammInfo.coinB ],\n                            activity: item,\n                        }\n                    })\n                    prev = [...prev, ...itemArray]\n                }\n                return prev;\n            }, [] as Array<AmmCardProps<I>>) as Array<AmmCardProps<I>>\n        } else {\n            return [] as Array<AmmCardProps<I>>\n        }\n    } catch (error) {\n        console.log(error)\n        return []\n    }\n}\ntype Value = undefined | number;\nexport type SummaryMyAmm = {\n    rewardDollar: Value,\n    rewardYuan: Value,\n    feeDollar: Value,\n    feeYuan: Value,\n}\nexport const makeSummaryMyAmm = <C extends { [ key: string ]: any }>({\n                                                                         userRewardsMap\n                                                                     }: {\n    userRewardsMap: LoopringMap<AmmUserReward> | undefined\n}):\n    SummaryMyAmm | undefined => {\n    const {coinMap, idIndex, tokenMap} = store.getState().tokenMap;\n    const {faitPrices, forex} = store.getState().system;\n    if (userRewardsMap && idIndex && coinMap && tokenMap && faitPrices && forex) {\n        let summaryMyAmm = Object.keys(userRewardsMap).reduce((prev, key) => {\n            if (/AMM-/i.test(key)) {\n                // @ts-ignore\n                const [, coinA, coinB] = key.match(/AMM-(\\w+)-(\\w+)/i);\n                const ammUserReward = userRewardsMap[ key ]\n                const {\n                    rewardDollar,\n                    rewardYuan,\n                    feeDollar,\n                    feeYuan\n                } = getOneRewardInfo({coinB, coinA, ammUserReward, idIndex, faitPrices, forex})\n                prev.rewardDollar = rewardDollar ? toBig(rewardDollar).plus(prev.rewardDollar).toNumber() : 0;\n                prev.rewardYuan = rewardYuan ? toBig(rewardYuan).plus(prev.rewardYuan).toNumber() : 0;\n                prev.feeDollar = feeDollar ? toBig(feeDollar).plus(prev.feeDollar).toNumber() : 0;\n                prev.feeYuan = feeYuan ? toBig(feeYuan).plus(prev.feeYuan).toNumber() : 0;\n            }\n            return prev\n        }, {\n            rewardDollar: 0,\n            rewardYuan: 0,\n            feeDollar: 0,\n            feeYuan: 0\n        })\n\n        return summaryMyAmm\n    }\n    return undefined\n}\nconst getOneRewardInfo = <C>({\n                                 coinA,\n                                 coinB,\n                                 ammUserReward,\n                                 idIndex,\n                                 faitPrices,\n                                 forex,\n                                 walletMap,\n                                 snapShotData\n                             }: any) => {\n    let rewardToken, rewardToken2, feeA, feeB, feeDollar, feeYuan, reward, reward2, rewardDollar, rewardYuan;\n    if (ammUserReward) {\n        rewardToken = ammUserReward.currentRewards[ 0 ] ? idIndex[ ammUserReward.currentRewards[ 0 ].tokenId as number ] : undefined\n        rewardToken2 = ammUserReward.currentRewards[ 1 ] ? idIndex[ ammUserReward.currentRewards[ 1 ].tokenId as number ] : undefined\n        feeA = ammUserReward ? volumeToCountAsBigNumber(coinA, ammUserReward.feeRewards[ 0 ]) : toBig(0);\n        feeB = ammUserReward ? volumeToCountAsBigNumber(coinB, ammUserReward.feeRewards[ 1 ]) : toBig(0);\n        feeA = feeA ? feeA : toBig(0);\n        feeB = feeB ? feeB : toBig(0);\n        feeDollar = feeA.times(faitPrices[ coinA ]?faitPrices[ coinA ].price:0).plus(feeB.times(faitPrices[ coinB ]?faitPrices[ coinB ].price:0))\n        feeYuan = feeDollar.times(forex);\n        reward = rewardToken ? volumeToCountAsBigNumber(rewardToken, ammUserReward.currentRewards[ 0 ].volume) as BigNumber : toBig(0);\n        reward2 = rewardToken2 ? volumeToCountAsBigNumber(rewardToken2, ammUserReward.currentRewards[ 1 ].volume) as BigNumber : toBig(0);\n        reward = reward ? reward : toBig(0);\n        reward2 = reward2 ? reward2 : toBig(0);\n        rewardDollar = reward.times(rewardToken ? faitPrices[ rewardToken ].price : 1).plus(reward2.times(rewardToken2 ? faitPrices[ rewardToken2 ].price : 1));\n        rewardYuan = rewardDollar.times(forex);\n    }\n    let balanceA, balanceB, balanceDollar, balanceYuan;\n    if (walletMap && walletMap[ 'LP-' + coinA + '-' + coinB ] && snapShotData) {\n        // @ts-ignore\n        const ratio = new BigNumber(walletMap[ 'LP-' + coinA + '-' + coinB ].count).div(snapShotData.ammPoolsBalance.lp.volume);\n        balanceA = ratio.times(volumeToCountAsBigNumber(coinA, snapShotData.ammPoolsBalance.pooled[ 0 ].volume) || 1);\n        balanceB = ratio.times(volumeToCountAsBigNumber(coinB, snapShotData.ammPoolsBalance.pooled[ 1 ].volume) || 1);\n        // @ts-ignore\n        balanceDollar = balanceA.times(faitPrices[ coinA ].price).plus(balanceB.times(faitPrices[ coinB ].price))\n        balanceYuan = balanceDollar.times(forex)\n    }\n\n    return {\n        feeA: feeA ? feeA.toNumber() : undefined,\n        feeB: feeB ? feeB.toNumber() : undefined,\n        reward: reward ? reward.toNumber() : undefined,\n        rewardToken: rewardToken ? coinMap[ rewardToken ] : undefined,\n        reward2: reward2 ? reward2.toNumber() : undefined,\n        rewardToken2: rewardToken2 ? coinMap[ rewardToken2 ] : undefined,\n        rewardDollar: rewardDollar ? rewardDollar.toNumber() : undefined,\n        rewardYuan: rewardYuan ? rewardYuan.toNumber() : undefined,\n        feeDollar: feeDollar ? feeDollar.toNumber() : undefined,\n        feeYuan: feeYuan ? feeYuan.toNumber() : undefined,\n        ammDetail: {\n            coinAInfo: coinMap[ coinA ],\n            coinBInfo: coinMap[ coinB ]\n        },\n        balanceA: balanceA ? balanceA.toNumber() : undefined,\n        balanceB: balanceB ? balanceB.toNumber() : undefined,\n        balanceDollar: balanceDollar ? balanceDollar.toNumber() : undefined,\n        balanceYuan: balanceYuan ? balanceYuan.toNumber() : undefined,\n    } as MyAmmLP<C>\n}\n\nexport const makeMyAmmWithSnapshot = <C extends { [ key: string ]: any }>(market: any, _walletMap: WalletMapExtend<C> | undefined, ammUserRewardMap: LoopringMap<AmmUserReward> | undefined, snapShotData?: {\n    tickerData?: TickerData | undefined\n    ammPoolsBalance: AmmPoolSnapshot | undefined\n} | undefined) => {\n    const {coinMap, idIndex, tokenMap} = store.getState().tokenMap;\n    const {faitPrices, forex} = store.getState().system;\n    const [, coinA, coinB] = market.match(/(\\w+)-(\\w+)/i);\n    let _myAmm: Partial<MyAmmLP<C>> = {};\n    if (ammUserRewardMap && ammUserRewardMap[ 'AMM-' + market ]\n        && snapShotData && snapShotData.ammPoolsBalance) {\n        const ammUserReward: AmmUserReward = ammUserRewardMap[ 'AMM-' + market ];\n        // @ts-ignore\n        if (coinMap && tokenMap && idIndex && forex && faitPrices) {\n            _myAmm = getOneRewardInfo({\n                coinA, coinB, ammUserReward,\n                idIndex, faitPrices, forex, walletMap: _walletMap, snapShotData\n            })\n\n            return _myAmm as MyAmmLP<C>\n        }\n    }\n    return {\n        feeA: undefined,\n        feeB: undefined,\n        feeDollar: undefined,\n        feeYuan: undefined,\n        reward: undefined,\n        rewardToken: undefined as any,\n        balanceA: undefined,\n        balanceB: undefined,\n        balanceYuan: undefined,\n        balanceDollar: undefined,\n    }\n}\n\nexport const makeMyAmmWithStat = <C extends { [ key: string ]: any }>\n(market: any,\n _walletMap: WalletMapExtend<C> | undefined,\n ammUserRewardMap: LoopringMap<AmmUserReward> | undefined,\n ammDetail: AmmDetailStore<C>) => {\n    const {coinMap, idIndex, tokenMap} = store.getState().tokenMap;\n    const {faitPrices, forex} = store.getState().system;\n    const [, coinA, coinB] = market.match(/(\\w+)-(\\w+)/i);\n    let _myAmm = {};\n    let balanceA, balanceB, balanceDollar, balanceYuan;\n    if (_walletMap && _walletMap[ 'LP-' + coinA + '-' + coinB ] && forex) {\n        // @ts-ignore\n        const ratio = new BigNumber(_walletMap[ 'LP-' + coinA + '-' + coinB ].count).div(ammDetail.totalLPToken);\n        balanceA = ratio.times(volumeToCountAsBigNumber(coinA, ammDetail.totalA ? ammDetail.totalA : 0) || 1);\n        balanceB = ratio.times(volumeToCountAsBigNumber(coinB, ammDetail.totalB ? ammDetail.totalB : 0) || 1);\n        // @ts-ignore\n        balanceDollar = balanceA.times(faitPrices[ coinA ]?faitPrices[ coinA ].price:0).plus(balanceB.times(faitPrices[ coinB ]?faitPrices[ coinB ].price:0))\n        balanceYuan = balanceDollar.times(forex);\n        _myAmm = {\n            // ...ammDetail,\n            balanceA: balanceA.toNumber(),\n            balanceB: balanceB.toNumber(),\n            balanceYuan: balanceYuan.toNumber(),\n            balanceDollar: balanceDollar.toNumber(),\n        }\n    }\n    if (ammUserRewardMap && ammUserRewardMap[ 'AMM-' + market ]\n        && ammDetail && forex) {\n        const ammUserReward: AmmUserReward = ammUserRewardMap[ 'AMM-' + market ];\n        let rewardToken, rewardToken2, feeA, feeB, feeDollar, feeYuan, reward, reward2, rewardDollar, rewardYuan;\n\n        if (coinMap && tokenMap && idIndex && forex && faitPrices && ammUserReward) {\n            rewardToken = ammUserReward.currentRewards[ 0 ] ? idIndex[ ammUserReward.currentRewards[ 0 ].tokenId as number ] : undefined\n            rewardToken2 = ammUserReward.currentRewards[ 1 ] ? idIndex[ ammUserReward.currentRewards[ 1 ].tokenId as number ] : undefined\n            feeA = ammUserReward ? volumeToCountAsBigNumber(coinA, ammUserReward.feeRewards[ 0 ]) : toBig(0);\n            feeB = ammUserReward ? volumeToCountAsBigNumber(coinB, ammUserReward.feeRewards[ 1 ]) : toBig(0);\n            feeA = feeA ? feeA : toBig(0);\n            feeB = feeB ? feeB : toBig(0);\n            feeDollar = feeA.times(faitPrices[ coinA ]?faitPrices[ coinA ].price:0).plus(feeB.times(faitPrices[ coinB ]?faitPrices[ coinB ].price:0))\n            feeYuan = feeDollar.times(forex);\n            reward = rewardToken ? volumeToCountAsBigNumber(rewardToken, ammUserReward.currentRewards[ 0 ].volume) as BigNumber : toBig(0);\n            reward2 = rewardToken2 ? volumeToCountAsBigNumber(rewardToken2, ammUserReward.currentRewards[ 1 ].volume) as BigNumber : toBig(0);\n            reward = reward ? reward : toBig(0);\n            reward2 = reward2 ? reward2 : toBig(0);\n            rewardDollar = reward.times(rewardToken ? faitPrices[ rewardToken ].price : 1).plus(reward2.times(rewardToken2 ? faitPrices[ rewardToken2 ].price : 1));\n            rewardYuan = rewardDollar.times(forex);\n            _myAmm = {\n                ..._myAmm,\n                feeA: feeA ? feeA.toNumber() : undefined,\n                feeB: feeB ? feeB.toNumber() : undefined,\n                reward: reward ? reward.toNumber() : undefined,\n                // @ts-ignore\n                rewardToken: rewardToken ? coinMap[ rewardToken ] : undefined,\n                reward2: reward2 ? reward2.toNumber() : undefined,\n                // @ts-ignore\n                rewardToken2: rewardToken2 ? coinMap[ rewardToken2 ] : undefined,\n                rewardDollar: rewardDollar ? rewardDollar.toNumber() : undefined,\n                rewardYuan: rewardYuan ? rewardYuan.toNumber() : undefined,\n                feeDollar: feeDollar ? feeDollar.toNumber() : undefined,\n                feeYuan: feeYuan ? feeYuan.toNumber() : undefined,\n                ammDetail: {\n                    // @ts-ignore\n                    coinAInfo: coinA ? coinMap[ coinA ] : undefined,\n                    // @ts-ignore\n                    coinBInfo: coinB ? coinMap[ coinB ] : undefined,\n                },\n            }\n\n        }\n        return _myAmm as MyAmmLP<C>\n    }\n    return {\n        feeA: undefined,\n        feeB: undefined,\n        feeDollar: undefined,\n        feeYuan: undefined,\n        reward: undefined,\n        rewardToken: undefined as any,\n        balanceA: undefined,\n        balanceB: undefined,\n        balanceYuan: undefined,\n        balanceDollar: undefined,\n    }\n}\n\n// if (ammUserReward) {\n//     const symbol = ammUserReward.currentRewards[ 0 ] ? idIndex[ ammUserReward.currentRewards[ 0 ].tokenId as number ] : undefined\n//     const symbol2 = ammUserReward.currentRewards[ 1 ] ? idIndex[ ammUserReward.currentRewards[ 1 ].tokenId as number ] : undefined\n//\n//     _myAmm = {\n//         ..._myAmm,\n//         feeA: ammUserReward ? volumeToCount(coinA, ammUserReward.feeRewards[ 0 ]) : 0,//Number(ammUserReward.feeRewards[ 0 ]) : 0,\n//         feeB: ammUserReward ? volumeToCount(coinB, ammUserReward.feeRewards[ 1 ]) : 0,//Number(ammUserReward.feeRewards[ 1 ]) : 0,\n//         reward: symbol ? volumeToCount(symbol, ammUserReward.currentRewards[ 0 ].volume) : 0,\n//         // @ts-ignore\n//         rewardToken: symbol ? coinMap[ symbol ] : undefined,\n//         reward2: symbol2 ? volumeToCount(symbol2, ammUserReward.currentRewards[ 1 ].volume) : 0,\n//         // @ts-ignore\n//         rewardToken2: symbol2 ? coinMap[ symbol2 ] : undefined,\n//\n//\n//     }\n//     _myAmm.feeDollar = _myAmm.feeA && _myAmm.feeA * faitPrices[ coinA ].price;\n//     _myAmm.feeDollar = _myAmm.feeB && _myAmm.feeB * faitPrices[ coinB ].price;\n// }\n//\n//\n// if (_walletMap && _walletMap[ 'LP-' + market ]) {\n//     // @ts-ignore\n//     const ratio = new BigNumber(_walletMap[ 'LP-' + market ].detail.total).div(snapShotData.ammPoolsBalance.lp.volume);\n//     _myAmm = {\n//         ..._myAmm,  //snapShotData.ammPoolsBalance.pooled[ 0 ].volume).div(BIG10.pow(tokenMap[coinA].decimals)\n//         balanceA: ratio.times(volumeToCountAsBigNumber(coinA, snapShotData.ammPoolsBalance.pooled[ 0 ].volume) || 1).toNumber(),\n//         balanceB: ratio.times(volumeToCountAsBigNumber(coinB, snapShotData.ammPoolsBalance.pooled[ 1 ].volume) || 1).toNumber(),\n//     }\n//     // @ts-ignore\n//     _myAmm.balanceDollar = _myAmm.balanceA * faitPrices[ coinA ].price + _myAmm.balanceB * faitPrices[ coinB ].price\n//     _myAmm.balanceYuan = _myAmm.balanceDollar * forex\n// }\n// export const getAmmPoolGameUserRanks = ():Promise<AmmUserRewardMap> => {\n//     const {accountId} = store.getState().account\n//     //https://api3.loopring.io/api/v2/amm/user/rewards?owner=10917\n//     if(LoopringAPI.ammpoolAPI){\n//         return LoopringAPI.ammpoolAPI.getAmmPoolUserRewards({owner:accountId}).then(({ammUserRewardMap}:any)=>{\n//               return ammUserRewardMap  as AmmUserRewardMap\n//         })\n//     }else{\n//         return  Promise.resolve({} as AmmUserRewardMap);\n//     }\n//\n//     // return LoopringAPI.ammpoolAPI?.getUserAmmPoolTxs({accountId}, apiKey).then(({userAmmPoolTxs}) => {\n//     //     return userAmmPoolTxs\n//     // })\n//     // if(LoopringAPI.ammpoolAPI)   {\n//     //    let promiseList =  marketKeys.map((key)=>{\n//     //         // @ts-ignore\n//     //         return LoopringAPI.ammpoolAPI.getAmmPoolGameUserRank({owner:accAddr,ammPoolMarket:'key'},apiKey)\n//     //     })\n//     //     return Promise.all(promiseList).then(\n//     //         (array:any[])=>{\n//     //\n//     //           return  array.reduce((prev,item:{userRankList:GameRankInfo[]},index)=>{\n//     //                 const market = marketKeys[index]\n//     //                 prev[ market] = item.userRankList[0]\n//     //                 return item.userRankList[0]\n//     //             },{})\n//     //\n//     //         }\n//     //     )\n//     // }else{\n//     //   return  Promise.resolve({});\n//     // }\n//\n//\n//\n//\n// }\n//\n// {\n//     userRankList: GameRankInfo[];\n//     raw_data: any;\n// }\n","import { AmmDetailStore } from '../../stores/Amm/AmmMap';\nimport { AmmPoolSnapshot } from 'loopring-sdk';\nimport { makeMyAmmWithSnapshot, makeMyAmmWithStat } from './makeUIAmmActivityMap';\nimport { AmmUserRewardMap } from 'loopring-sdk/dist/defs/loopring_defs';\nimport { WalletMapExtend } from './makeWallet';\n\nexport const makeMyPoolRowWithSnapShot = <T extends { [ key: string ]: any }>({market,ammSnapShot,walletMap,ammUserRewardMap}: {\n    market:string\n    ammSnapShot: AmmPoolSnapshot,\n    walletMap: WalletMapExtend<T>\n    ammUserRewardMap:AmmUserRewardMap|undefined\n}) => {\n\n    return makeMyAmmWithSnapshot(market,walletMap, ammUserRewardMap, {\n        ammPoolsBalance: ammSnapShot\n    })\n}\n\n                                                                        \nexport const makeMyPoolRowWithPoolState = <T extends { [ key: string ]: any }>({market,ammDetail,walletMap,ammUserRewardMap}: {\n    market:string\n    ammDetail: AmmDetailStore<T>,\n    walletMap: WalletMapExtend<T>\n    ammUserRewardMap:AmmUserRewardMap|undefined\n}) => {\n    if(walletMap && ammDetail){\n        return makeMyAmmWithStat (market,walletMap, ammUserRewardMap, ammDetail)\n    }\n    return undefined\n}","import { TickerData, toBig } from 'loopring-sdk';\nimport store from '../../stores';\nimport { FloatTag,TradeFloat } from '@loopring-web/common-resources';\nimport { volumeToCountAsBigNumber } from './volumeToCount';\nimport { Ticker, TickerMap } from '../../stores/ticker';\nimport { LoopringMap } from 'loopring-sdk/dist/defs/loopring_defs';\nimport { VolToNumberWithPrecision } from '../../utils/formatter_tool';\n\nexport const makeTickView = (tick: TickerData) => {\n    // const {forex} = store.getState().system;\n\n    const {faitPrices, forex} = store.getState().system;\n    const floatTag = (isNaN(tick.close) || isNaN(tick.open))  || tick.open === tick.close ? FloatTag.none :\n        tick.close > tick.open ? FloatTag.increase : FloatTag.decrease\n    let _tradeFloat: Partial<TradeFloat> = {\n        change: (tick.close - tick.open) / tick.open,\n        timeUnit: '24h',\n        priceYuan:  0,\n        priceDollar: 0,\n        floatTag,\n        reward: 0,\n        close: isNaN(tick.close) ? undefined : tick.close,\n        high: tick.high === 0 ? undefined : tick.high,\n        low: tick.low === 0 ? undefined : tick.low,\n\n        // APY: 0,\n    }\n    if (faitPrices && forex) {\n        const volume = VolToNumberWithPrecision(tick.base_token_volume, tick.base as string)\n        // const priceDollar = toBig(tiem).times(faitPrices[ tick.base as string ] ? faitPrices[ tick.base as string ].price : 0);\n        // const priceYuan = priceDollar.times(forex);\n        const closeDollar = toBig(tick.close).times(faitPrices[ tick.quote as string ] ? faitPrices[ tick.quote as string ].price : 0);\n        const closeYuan = closeDollar.times(forex);\n        const qPrice = faitPrices[tick.quote as string].price?    faitPrices[tick.quote as string].price:0;\n        _tradeFloat = {\n            ..._tradeFloat,\n            changeDollar: toBig(tick.close - tick.open).times( qPrice ).toNumber(),\n            changeYuan: toBig(tick.close - tick.open).times( qPrice ).times(forex).toNumber(),\n            volume: volume?Number(volume):undefined,\n            closeDollar:closeDollar.toNumber(),\n            closeYuan:closeYuan.toNumber(),\n        }\n    }\n    return _tradeFloat;\n}\nexport  const makeTickerMap =  <R extends {[key:string]:any}>({tickerMap}:{tickerMap:LoopringMap<TickerData>}):TickerMap<{[key:string]:any}>=>{\n    const {faitPrices, forex} = store.getState().system;\n    return Reflect.ownKeys(tickerMap).reduce((prev, key) => {\n        const item: TickerData = tickerMap[ key as any ];\n        if (item && item.base && forex && faitPrices && (faitPrices[ item.base ] || faitPrices[ 'USDT' ])) {\n            const volume = VolToNumberWithPrecision(item.base_token_volume, item.base as string)\n            //FIX: DIE is not in faitPrices\n            const priceDollar = toBig(volume?volume:0).times(faitPrices[ item.base ] ? faitPrices[ item.base ].price : faitPrices[ 'USDT' ].price);\n            const priceYuan = priceDollar?.times(forex);\n            const change = item.change && item.change !== 0 ? item.change * 100 : undefined;\n\n            prev[ key as keyof R] = {\n                // ...item,\n                timeUnit: '24h',\n                priceDollar: priceDollar?.toNumber() === 0 ? undefined : priceDollar?.toNumber(),\n                priceYuan: priceYuan?.toNumber() === 0 ? undefined : priceYuan?.toNumber(),\n                volume: volume?Number(volume):undefined,\n                floatTag: item.close > item.open ? 'increase' : 'decrease',\n                change: change,\n                close: isNaN(item.close) ? undefined : item.close,\n                high: item.high === 0 ? undefined : item.high,\n                low: item.low === 0 ? undefined : item.low,\n                // APY: 0,\n                reward: 0,\n                rewardToken: '',\n                __rawTicker__: item,\n            } as Ticker;\n        }\n        return prev\n    }, {} as TickerMap<R>)\n}\n","import store from '../../stores';\nimport { WalletCoin,CoinKey } from '@loopring-web/common-resources';\nimport * as sdk from 'loopring-sdk';\nexport type WalletMapExtend<C> =    {\n    [K in CoinKey<C>]?: WalletCoin<C> & {\n    detail: sdk.UserBalanceInfo\n}\n}\n\nexport const makeWalletLayer2 = <C extends { [ key: string ]: any }>():{ walletMap: WalletMapExtend<C> | undefined } => {\n    const {walletLayer2} = store.getState().walletLayer2;\n    const {tokenMap} = store.getState().tokenMap;\n    let walletMap: WalletMapExtend<C> | undefined;\n\n\n    if (walletLayer2) {\n        walletMap = Reflect.ownKeys(walletLayer2).reduce((prev, item) => {\n            const {total, locked, pending: { withdraw }} = walletLayer2[ item as string ];\n            const countBig = sdk.toBig(total).minus(sdk.toBig(locked)).toString()\n            return {\n                ...prev, [ item ]: {\n                    belong: item,\n                    count: sdk.fromWEI(tokenMap, item, countBig),\n                    detail: walletLayer2[ item as string ]\n                }\n            }\n        }, {} as  WalletMapExtend<C> )\n    }\n\n    return {walletMap}\n}","import * as sdk from 'loopring-sdk';\nimport store from '../../stores';\nimport { TradeTypes } from '@loopring-web/common-resources';\nimport { LoopringAPI, } from 'api_wrapper';\nimport { AmmRecordRow, AmmTradeType,RawDataTradeItem } from '@loopring-web/component-lib';\nimport { volumeToCount, volumeToCountAsBigNumber } from './volumeToCount';\n\nexport const getUserTrades = (market: string) => {\n    if (!LoopringAPI.userAPI) {\n        return undefined\n    }\n    const {accountId, apiKey} = store.getState().account\n    return LoopringAPI.userAPI.getUserTrades({accountId, market,}, apiKey).then((response: {\n        totalNum: any;\n        userTrades: sdk.UserTrade[];\n        raw_data: any;\n    }) => {\n        return response.userTrades\n    })\n}\nexport const makeMarketArray = (coinKey: any, marketTrades: sdk.MarketTradeInfo[]): RawDataTradeItem[] => {\n\n    let tradeArray: Array<Partial<RawDataTradeItem>> = []\n\n    marketTrades.forEach((item: sdk.MarketTradeInfo) => {\n        try {\n            const {base, quote} = sdk.getBaseQuote(item.market)\n            const {forex} = store.getState().system\n            const {currency} = store.getState().settings\n            const {tokenMap} = store.getState().tokenMap\n            if (tokenMap) {\n                // const baseToken = tokenMap[ base as string ]\n                // const quoteToken = tokenMap[ quote as string ]\n                const feeKey = item.side === sdk.Side.Buy ? base : quote\n                // @ts-ignore\n                tradeArray.push({\n                    side: item.side === sdk.Side.Sell ? TradeTypes.Sell : TradeTypes.Buy,\n                    amount: {\n                        from: {\n                            key: base as string,\n                            value: base ? volumeToCount(base, item.volume) : undefined\n                        },\n                        to: {\n                            key: quote as string,\n                            value: base ? volumeToCountAsBigNumber(base, item.volume)?.times(item.price).toNumber():undefined\n                        },\n\n                    },\n                    price: {\n                        key: '',\n                        value: sdk.toBig(item.price).toNumber(),\n                    },\n                    fee: {\n                        key: feeKey || '--',\n                        value: feeKey ? volumeToCountAsBigNumber(feeKey, item.fee)?.toNumber() : undefined, \n                    },\n                    time: parseInt(item.tradeTime.toString()),\n                })\n            }\n        } catch (error) {\n            //CATCHERROR:\n            console.log(error)\n            // new CustomError()\n        }\n\n    })\n    // console.log('tradeArray:', tradeArray)\n    return tradeArray as RawDataTradeItem[];\n\n}\n\nexport const getUserAmmTransaction = () => {\n    const {accountId, apiKey} = store.getState().account\n    return LoopringAPI.ammpoolAPI?.getUserAmmPoolTxs({accountId}, apiKey).then(({userAmmPoolTxs}) => {\n        return userAmmPoolTxs\n    })\n    // }\n\n}\n\n\nexport const makeMyAmmMarketArray = <C extends { [ key: string ]:any }>(coinKey: string|undefined, marketTransaction: sdk.UserAmmPoolTx[]): AmmRecordRow<C>[] => {\n\n    const tradeArray: Array<Partial<AmmRecordRow<C>>> = []\n    const {tokenMap, coinMap, idIndex} = store.getState().tokenMap\n    const { forex } = store.getState().system\n\n    if (marketTransaction) {\n        marketTransaction.forEach((item: sdk.UserAmmPoolTx) => {\n            try {\n                if (coinMap && tokenMap && idIndex\n                    && !(coinKey && tokenMap['LP-'+coinKey].tokenId !== item.lpToken.tokenId) ) {\n                    // @ts-ignore\n                    const [, coinA, coinB] = idIndex[item.lpToken.tokenId].match(/LP-(\\w+)-(\\w+)/i);\n                     \n                    tradeArray.push({\n                            type: item.txType === sdk.AmmTxType.JOIN ? AmmTradeType.add : AmmTradeType.remove,\n                            //TODO:\n                            totalDollar: 1000,\n                            totalYuan: 1000 / Number(forex),\n                            amountA: volumeToCount(coinA,item.poolTokens[ 0 ]?.actualAmount),\n                            amountB: volumeToCount(coinA,item.poolTokens[ 1 ]?.actualAmount),\n                            time: Number(item.updatedAt),\n                            // @ts-ignore\n                            coinA: coinMap[ coinA ],\n                            // @ts-ignore\n                            coinB: coinMap[ coinB ],\n                            status: item.txStatus\n                        })\n                    }\n                    return tradeArray\n                }\n             catch (error) {\n                //CATCHERROR:\n                console.log(error)\n                // new CustomError()\n            }\n        })\n\n    }\n    // console.log('tradeArray:', tradeArray)\n    return tradeArray as AmmRecordRow<C>[];\n\n}\n\n\nexport const makeMarketAmmArray = <C extends object>(coinKey: any, marketTransaction: sdk.AmmPoolTx[]): AmmRecordRow<C>[] => {\n\n    let tradeArray: Array<Partial<AmmRecordRow<C>>> = [];\n\n    // marketTransaction.forEach((item: AmmPoolTx) => {\n    //     try {\n    //         const {base, quote} = getBaseQuote(coinKey)\n    //         const {forex} = store.getState().system\n    //         // const {currency} = store.getState().settings\n    //         const coinMap = store.getState().tokenMap.coinMap as CoinMap<C>\n    //         if (coinMap) {\n    //\n    //             // id: number;\n    //             // from: string;\n    //             // to: string;\n    //             // token: string;\n    //             // amount: string;\n    //             // tokenF: string;\n    //             // amountF: string;\n    //             // status: TxStatus;\n    //             // txHash: string;\n    //             // billType: BillType;\n    //             // income: boolean;\n    //             // timestamp: number;\n    //             // memo: string;\n    //             // price: string;\n    //             // transferType: TransferType;\n    //             // label: string;\n    //             tradeArray.push({\n    //                 // type: item.billType === BillType.ORDER ?\n    //                 //     AmmTradeType.swap : item.billType === BillType.TRANSFER && item.income ?\n    //                 //         AmmTradeType.add : AmmTradeType.remove,\n    //                 // // //TODO:\n    //                 // totalDollar: 1000,\n    //                 // totalYuan: 1000 / Number(forex),\n    //                 // amountA: Number(item.poolTokens[ 0 ].amount),\n    //                 // amountB: Number(item.poolTokens[ 1 ].amount),\n    //                 // time: Number(item.updatedAt),\n    //                 // coinA: coinMap[ base as keyof C],\n    //                 // coinB: coinMap[ quote as keyof C ],\n    //             })\n    //         }\n    //     } catch (error) {\n    //         //CATCHERROR:\n    //         console.log(error)\n    //         // new CustomError()\n    //     }\n    //\n    // })\n    // console.log('tradeArray:', tradeArray)\n    return tradeArray as AmmRecordRow<C>[];\n\n}\n","import { AmmMap } from '../../stores/Amm/AmmMap';\nimport { AmmPoolSnapshot, getBaseQuote, LoopringMap, TickerData, TokenInfo, TokenVolumeV3 } from 'loopring-sdk';\nimport { LoopringAPI } from 'api_wrapper';\nimport { CoinMap, CustomError, ErrorMap } from '@loopring-web/common-resources';\nimport { volumeToCountAsBigNumber } from './volumeToCount';\nimport { myLog } from 'utils/log_tools';\n\nexport const pairDetailBlock = <C extends { [ key: string ]: any }, I extends { [ key: string ]: any }>({\n                                                                                                           coinKey,\n                                                                                                           ammKey,\n                                                                                                           ammMap\n                                                                                                       }: { coinKey: string, ammKey: string, ammMap: AmmMap<C, I> }):\n    Promise<{\n        ammPoolsBalance: AmmPoolSnapshot | undefined,\n        tickMap:  LoopringMap<TickerData>,\n}> => {\n    return new Promise((resolve, reject) => {\n        if(LoopringAPI.ammpoolAPI && LoopringAPI.exchangeAPI ) {\n            Promise.all([\n                LoopringAPI.ammpoolAPI.getAmmPoolSnapshot({poolAddress: ammMap[ammKey]?.address}),\n                LoopringAPI.exchangeAPI.getMixTicker({market: coinKey})])\n                .then(([{ammPoolSnapshot}, {tickMap}]) => {\n                    resolve({\n                        ammPoolsBalance: ammPoolSnapshot,\n                        tickMap,\n                    })\n                })\n\n        }else{\n            reject(new CustomError(ErrorMap.NO_SDK))\n        }\n       \n    })\n}\n\nexport const pairDetailDone = <C>({coinKey, market, ammPoolsBalance, fee, tokenMap,tickerData, _tradeCalcData, coinMap, marketCoins}:any)=>{\n\n    const [, coinSell, coinBuy] = coinKey.match(/(\\w+)-(\\w+)/i)\n    let stob:number|undefined = NaN;\n\n    if (coinKey && tickerData?.symbol && coinKey === tickerData.symbol) {\n        if (tickerData.base === coinSell) {\n            stob = Number(tickerData.close)\n        } else {\n            stob = Number(tickerData.close) !== 0 ? 1 / Number(tickerData.close) : 0\n        }\n    }\n\n    if(isNaN(stob) && ammPoolsBalance) {\n        const {base, quote} = getBaseQuote(coinKey)\n        \n        const poolBaseTokenVol: TokenVolumeV3 = ammPoolsBalance.pooled[0];\n        const quoteBaseTokenVol: TokenVolumeV3 = ammPoolsBalance.pooled[1];\n        let poolVolume: [baseVol:any, quoteVol:any];\n        if (base && quote && tokenMap[base].tokenId === poolBaseTokenVol.tokenId ) {\n            poolVolume =  [[base, poolBaseTokenVol.volume],[quote, quoteBaseTokenVol.volume]]\n        } else if (base && quote && tokenMap[base].tokenId === quoteBaseTokenVol.tokenId){\n            poolVolume =  [[base, quoteBaseTokenVol.volume],[quote, poolBaseTokenVol.volume]]\n        } else {\n            throw new CustomError(ErrorMap.NO_SUPPORT_PAIR)\n        }\n        let [baseVol, quoteVol] = poolVolume\n        if(baseVol && quoteVol) {\n            stob = parseFloat(volumeToCountAsBigNumber(quoteVol[0], quoteVol[1])?.div(\n                volumeToCountAsBigNumber(baseVol[0], baseVol[1]) || 1).toFixed(7, 0) as string)\n\n                myLog('pairDetailDone stob from amm:', stob)\n        }\n    }\n\n    const isValidS2B = (stob !== 0 && stob !== undefined && !isNaN(stob))\n\n    _tradeCalcData.StoB = isValidS2B ? stob: 0\n    _tradeCalcData.BtoS =  isValidS2B ? 1 / (stob * 1.0) : 0;\n    _tradeCalcData.sellCoinInfoMap = coinMap && marketCoins?.reduce((prev: any, item: string | number) => {\n        return {...prev, [ item ]: coinMap[ item ]}\n    }, {} as CoinMap<C>)\n    _tradeCalcData.buyCoinInfoMap = coinMap && tokenMap && tokenMap[ _tradeCalcData.coinSell as string ].tradePairs?.reduce((prev: any, item: string | number) => {\n        return {...prev, [ item ]: coinMap[ item ]}\n    }, {} as CoinMap<C>);\n\n    _tradeCalcData.fee = fee\n\n    return {\n        _tradeCalcData\n    }\n    //setPair();\n}","import { headerRoot } from '@loopring-web/common-resources'\n\nimport { useLocation } from 'react-router-dom'\n\nimport { Toolbar, } from '@material-ui/core'\n\nimport { useHeader } from './hook'\nimport { useConfirmation } from 'stores/localStore/confirmation'\nimport { withTranslation } from 'react-i18next'\n\nimport { BottomRule, Header as HeaderUI, HideOnScroll, } from '@loopring-web/component-lib'\n\nconst Header = withTranslation('common')(({t, ...rest}: any) => {\n    const location = useLocation()\n\n    const {\n        headerToolBarData,\n        headerMenuData,\n    } = useHeader()\n\n    const { confirmWrapper, confirmation } = useConfirmation()\n\n    return (<>\n        <HideOnScroll>\n            <HeaderUI {...rest} headerMenuData={headerMenuData} headerToolBarData={headerToolBarData}\n                      selected={location.pathname === '/' ? headerRoot : location.pathname}></HeaderUI>\n        </HideOnScroll>\n        <Toolbar/>\n        <BottomRule isShow={!confirmation?.confirmed} \n            content={t('labelAgreeLoopringTxt')} btnTxt={t('labelCookiesAgree')} \n            clickToConfirm={ () => confirmWrapper() } />\n    </>)\n})\n\nexport default Header\n\n\n\n","import React from 'react'\n\nimport {\n    ButtonComponentsMap,\n    fnType,\n    headerMenuData,\n    headerToolBarData,\n    LanguageKeys,\n    ThemeKeys,\n} from '@loopring-web/common-resources'\n\nimport { useAccount, } from 'stores/account'\n\nimport { Theme, } from 'defs/common_defs'\n\nimport { AccountStep, useOpenModals, useSettings, } from '@loopring-web/component-lib'\n\nimport { accountStaticCallBack, btnClickMap } from 'hooks/help'\nimport { myLog } from 'utils/log_tools'\nimport { deepClone } from '../../utils/obj_tools';\n\nexport const useHeader = () => {\n    // const {setTheme, themeMode, setLanguage} = useSettings();\n    const accountState = useAccount();\n    const {account, setShouldShow, status: accountStatus} =  useAccount();\n    const {setShowAccount} = useOpenModals();\n    const _btnClickMap = Object.assign(deepClone(btnClickMap), {\n        [ fnType.ACTIVATED ]: [\n            function () {\n                setShouldShow(true);\n                setShowAccount({isShow: true, step: AccountStep.HadAccount})\n            }\n        ],\n        // [ fnType.CONNECT ]: [\n        //     function () {\n        //         setShouldShow(true);\n        //         setShowAccount({isShow: true, step: AccountStep.HadAccount})\n        //     }\n        // ]\n\n    });\n\n    const onWalletBtnConnect = React.useCallback(async () => {\n        myLog(`onWalletBtnConnect click: ${account.readyState}`);\n        accountStaticCallBack(_btnClickMap, []);\n    }, [account, setShouldShow,_btnClickMap])\n\n    // const onThemeBtnClick = React.useCallback((themeMode: ThemeKeys) => {\n    //     if (themeMode === Theme.dark) {\n    //         setTheme(Theme.light)\n    //     } else {\n    //         setTheme(Theme.dark)\n    //     }\n    // }, [setTheme])\n    //\n    // const onLangBtnClick = (lang: LanguageKeys) => {\n    //     setLanguage(lang);\n    // }\n\n    React.useEffect(() => {\n        headerToolBarData[ ButtonComponentsMap.WalletConnect ] = {\n            ...headerToolBarData[ ButtonComponentsMap.WalletConnect ],\n            accountState,\n            handleClick: onWalletBtnConnect,\n        }\n        // headerToolBarData[ ButtonComponentsMap.Theme ] = {\n        //     ...headerToolBarData[ ButtonComponentsMap.Theme ],\n        //     themeMode,\n        //     handleClick: onThemeBtnClick\n        // }\n        // headerToolBarData[ ButtonComponentsMap.Language ] = {\n        //     ...headerToolBarData[ ButtonComponentsMap.Language ],\n        //     handleChange: onLangBtnClick\n        // }\n    });\n\n    // const forceUpdate = React.useReducer(() => ({}), {})[ 1 ] as () => void\n    const updateWallet = React.useCallback(()=>{\n        headerToolBarData[ ButtonComponentsMap.WalletConnect ] = {\n            ...headerToolBarData[ ButtonComponentsMap.WalletConnect ],\n            accountState,\n        }\n    },[headerToolBarData,accountState])\n    React.useEffect(() => {\n        if (accountStatus && accountStatus === 'UNSET') {\n            updateWallet()\n        }\n        // forceUpdate()\n    }, [accountStatus]);\n\n    return {\n        headerToolBarData,\n        headerMenuData,\n        account,\n    }\n}\n\n","import React from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { RootState } from 'stores'\nimport { Confirmation } from './interface'\nimport { confirm } from './reducer'\n\nexport const useConfirmation = ():  {\n    confirmation: Confirmation,\n    confirmWrapper: () => void,\n} => {\n    const confirmation: Confirmation = useSelector((state: RootState) => state.localStore.confirmation)\n    const dispatch = useDispatch()\n\n    const confirmWrapper = React.useCallback(() => {\n        dispatch(confirm(undefined))\n    }, [dispatch])\n\n    return {\n        confirmation,\n        confirmWrapper,\n    }\n}\n","import React, { useCallback, } from \"react\"\nimport store from '../../stores';\nimport { TickerMap, useTicker } from '../../stores/ticker';\nimport { MarketBlockProps, QuoteTableRawDataItem, } from '@loopring-web/component-lib';\nimport { deepClone } from '../../utils/obj_tools';\nimport { useSocket } from '../../stores/socket';\nimport { TradingInterval, WsTopicType } from 'loopring-sdk';\nimport { LoopringAPI } from 'api_wrapper'\nimport { tickerService } from '../../services/tickerService';\nimport { myError, myLog } from \"utils/log_tools\";\n\nconst amtCol = 5\nconst OnePageSize = 16;\nconst rowHeight = 44;\n\n// 0\nfunction isNeedCallMore(currentStartIndex: number, to: number, marketArrayLength: number, currentListLength: number, pageSize: number = OnePageSize): boolean {\n    const pageCurrent = currentStartIndex / OnePageSize\n    if (to - pageCurrent > 1) {\n        return false\n    } else if (pageSize * to < marketArrayLength && currentListLength - 4 < pageSize * (to + 1)) {\n        return true\n    } else {\n        return false\n    }\n}\n\nexport function useQuote<C extends { [ key: string ]: string }>() {\n\n\n    const {\n        tickerMap,\n        status: tickerStatus,\n        // errorMessage: errorTickerMap,\n        statusUnset: tickerStatusUnset,\n        updateTickers,\n    } = useTicker();\n    const {sendSocketTopic, socketEnd} = useSocket();\n    const [recommendedPairs, setRecommendedPairs] = React.useState<string[]>([])\n    const {marketArray, coinMap} = store.getState().tokenMap;\n    // const recommendMarkets: string[] = marketArray && recommendedPairs.length === 4 ? recommendedPairs : []\n    // const recommendMarkets: string[] = ['LRC-USDC', 'LRC-ETH', 'ETH-USDC', 'USDC-USDT']\n    // const _marketArrayWithOutRecommend = marketArray ? marketArray.filter(item => recommendMarkets.findIndex(m => m === item) === -1) : [];\n    // const _marketArrayWithOutRecommend = marketArray ? marketArray.filter(item => recommendedPairs.findIndex(m => m === item) === -1) : [];\n    const [tickList, setTickList] = React.useState<any>([]);\n    const [recommendations, setRecommendations] = React.useState<MarketBlockProps<C>[]>([]);\n    // const [, setTickerKeys] = React.useState<string[]>([]);\n    // const [focusRowFrom, setFocusRowFrom] = React.useState<[start: number, end: number]>([0, 2]);\n    // const [startIndex, setStartIndex] = React.useState<number>(-1);\n    // const recommendMarkets: string[] = marketArray ? marketArray.slice(0, 4) : ['LRC-ETH', 'LRC-ETH', 'LRC-ETH', 'LRC-ETH']\n\n    const subject = React.useMemo(() => tickerService.onSocket(), []);\n\n    const updateRecommendation = React.useCallback((recommendationIndex, ticker) => {\n        if (recommendations.length) {\n            //  let _recommendations = deepClone(recommendations)\n            recommendations[ recommendationIndex ].tradeFloat = ticker\n            setRecommendations(recommendations)\n        }\n    }, [recommendations]);\n\n    React.useEffect(() => {\n        const subscription = subject.subscribe(({tickerMap}) => {\n            myLog('tickerMap:', tickerMap)\n            if (tickerMap) {\n                Reflect.ownKeys(tickerMap).forEach((key) => {\n                    let recommendationIndex = recommendedPairs.findIndex(ele => ele === key)\n                    if (recommendationIndex !== -1) {\n                        // setRecommendations\n                        updateRecommendation(recommendationIndex, tickerMap[ key as string ])\n                    }\n                    //TODO update related row. use socket return\n                })\n            }\n        });\n        return () => subscription.unsubscribe();\n    }, [subject, recommendedPairs]);\n\n    const getRecommandPairs = useCallback(async () => {\n        if (LoopringAPI.exchangeAPI) {\n            try {\n                const {recommended} = await LoopringAPI.exchangeAPI.getRecommendedMarkets()\n                setRecommendedPairs(recommended)\n                return recommended || []\n            } catch (e) {\n                myError(e)\n            }\n            return []\n            // const { recommended } = await LoopringAPI.exchangeAPI.getRecommendedMarkets()\n            // console.log(recommended)\n            // setRecommendedPairs(recommended)\n            // return recommended\n        }\n    }, [])\n\n    React.useEffect(() => {\n        getRecommandPairs()\n    }, [getRecommandPairs])\n\n\n    //TODO if socket is error throw use recall will pending on it\n    // React.useEffect(() => {\n    //     switch (socketStatus) {\n    //         case \"ERROR\":\n    //             console.log(\"ERROR\", 'open websocket error get moment value from api ');\n    //             socketStatusUnset();\n    //             updateTickers(tickerKeys);\n    //             break;\n    //         default:\n    //             break;\n    //     }\n    // }, [socketStatus, socketStatusUnset]);\n    React.useEffect(() => {\n        // const [from, to] = focusRowFrom\n        getTicker();\n        socketSendTicker();\n        return () => {\n            socketEnd()\n        }\n    }, []);\n    React.useEffect(() => {\n        switch (tickerStatus) {\n            case \"ERROR\":\n                console.log(\"ERROR\", 'get ticker error,ui');\n                tickerStatusUnset()\n                break;\n            case \"PENDING\":\n                break;\n            case \"DONE\":\n                tickerStatusUnset();\n                updateRawData(tickerMap as TickerMap<C>);\n                break;\n            default:\n                break;\n        }\n    }, [tickerStatus, tickerStatusUnset]);\n\n    const getTicker = React.useCallback(() => {\n        // if (_marketArrayWithOutRecommend) {\n        // let array = _marketArrayWithOutRecommend.slice(from * OnePageSize, to * OnePageSize);\n        // let array = _marketArrayWithOutRecommend; // 暂时获取全量数据\n        //High: add recommendations market first time is 36个数据\n        // if (from === 0) {\n        //     array = recommendMarkets.concat(array)\n        // }\n        // updateTickers(array);\n        // }\n        updateTickers(marketArray || []);\n\n    }, [marketArray, OnePageSize])\n\n    const updateRawData = React.useCallback(async (tickerMap: TickerMap<C>) => {\n        const marketPairs: string[] = await getRecommandPairs()\n        let _recommendationsFloat: QuoteTableRawDataItem[] = [];\n        let defaultRecommendationsFloat: QuoteTableRawDataItem[] = []\n        const _tickList = tickerMap && Object.keys(tickerMap) ? Reflect.ownKeys(tickerMap).reduce((prev, key) => {\n            // @ts-ignore\n            const [, coinA, coinB] = key.match(/(\\w+)-(\\w+)/i);\n            let _item = {\n                ...tickerMap[ key as string ],\n                pair: {\n                    coinA,\n                    coinB,\n                },\n            } as QuoteTableRawDataItem;\n\n            if (marketPairs.findIndex(m => m === key) !== -1) {\n                _recommendationsFloat.push(deepClone(_item))\n            }\n            if (marketArray && marketArray.findIndex(m => m === key) !== -1) {\n                defaultRecommendationsFloat.push(deepClone(_item))\n            }\n            prev.push(_item);\n            return prev\n        }, [] as QuoteTableRawDataItem[]) : []\n\n        setTickList([...tickList, ..._tickList])\n        //setTickList\n        // if (focusRowFrom[ 0 ] === 0 && _recommendationsFloat.length > 0) {\n        // if (focusRowFrom[ 0 ] === 0) {\n        _recommendationsFloat = _recommendationsFloat.filter(o => {\n            const {coinA, coinB} = o.pair\n            return (coinMap && coinMap[ coinA ] && coinMap[ coinB ])\n        })\n\n        //FIX: fix in uat env not enough pair_recommendations\n        if (_recommendationsFloat.length < 4) {\n            const filteredFloat = defaultRecommendationsFloat.filter(o => {\n                const pair = `${o.pair.coinA}-${o.pair.coinB}`\n                return !marketPairs.includes(pair)\n            })\n            _recommendationsFloat = _recommendationsFloat.concat(filteredFloat.slice(0, 4 - _recommendationsFloat.length));\n        }\n\n        // case uat only\n        while (_recommendationsFloat.length < 4) {\n            _recommendationsFloat.push(deepClone(_recommendationsFloat[ 0 ]))\n        }\n\n        const _recommendations = _recommendationsFloat.reduce((prev, item) => {\n            if (coinMap && item) {\n                const {coinA, coinB} = item.pair;\n                const _item: MarketBlockProps<C> = {\n                    tradeFloat: item as any,\n                    // @ts-ignore\n                    coinAInfo: coinMap[ coinA ],\n                    // @ts-ignore\n                    coinBInfo: coinMap[ coinB ]\n                } as MarketBlockProps<C>\n                prev.push(_item)\n            }\n            return prev\n        }, [] as MarketBlockProps<C>[])\n\n        setRecommendations(_recommendations)\n        // }\n    }, [tickList])\n\n\n    // const  = (startIndex: number) => {\n    //     console.log(startIndex)\n    // }\n\n    // const debounceGetTicker = React.useCallback(debounce((from, to) => {\n    //     getTicker(from, to)\n    // }, globalSetup.wait), [])\n\n    const socketSendTicker = React.useCallback(() => {\n        sendSocketTopic({[ WsTopicType.ticker ]: marketArray});\n    }, [])\n\n    return {\n        tickList,\n        recommendations,\n        // handleScroll,\n        // onVisibleRowsChange\n    }\n\n}\n\nexport type CandlestickItem = {\n    close: number;\n    timeStamp: number;\n}\n\nexport const useCandlestickList = (market: string) => {\n    const [candlestickList, setCandlestickList] = React.useState<CandlestickItem[]>([])\n    const getCandlestick = React.useCallback(async (market: string) => {\n        if (LoopringAPI.exchangeAPI) {\n            const res = await LoopringAPI.exchangeAPI.getMixCandlestick({\n                market: market,\n                interval: TradingInterval.d1,\n                // start?: number;\n                // end?: number;\n                limit: 7\n            })\n            if (res && res.candlesticks && !!res.candlesticks.length) {\n                const data = res.candlesticks.map(o => ({\n                    close: o.close,\n                    timeStamp: o.timestamp\n                }))\n                setCandlestickList(data)\n            }\n            setCandlestickList([])\n        }\n        setCandlestickList([])\n    }, [])\n\n    React.useEffect(() => {\n        getCandlestick(market)\n    }, [getCandlestick, market])\n\n    return candlestickList\n}\n","import styled from '@emotion/styled';\nimport { Box, Grid, Paper } from '@material-ui/core';\nimport { TablePaddingX } from '@loopring-web/component-lib';\n\nexport const StylePaper = styled(Box)`\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  //height: 100%;\n  flex: 1;\n  background: var(--color-box);\n  border-radius: ${({ theme }) => theme.unit}px;\n  // padding: ${({ theme }) => 3 * theme.unit}px  0;\n  margin-bottom: ${({ theme }) => 2* theme.unit}px;\n  .title {\n    font-size: ${({ theme }) => theme.unit * 3}px;\n    //line-height: 19px;\n    margin-left: ${({ theme }) => 3 * theme.unit}px;\n    margin-top: ${({ theme }) => 3 * theme.unit}px;\n    // margin-bottom: ${({ theme }) => 2 * theme.unit}px;\n  }\n\n  .tableWrapper {\n    display: flex;\n    margin-top: ${({ theme }) => 3 * theme.unit}px;\n    flex: 1;\n    .rdg {                                                   \n      flex: 1;\n    }\n  }\n\n  .extraTradeClass {\n    .rdg-header-row {\n      background-color: inherit !important;\n    }\n  }\n` as typeof Box;\n\n\nexport const  TableWrapStyled = styled(Grid)`\n \n  &{\n    background: var(--color-box);\n    border-radius: ${({ theme }) => theme.unit}px;\n    .rdg{\n      .rdg-header-row {\n        border-radius: ${({theme}) => theme.unit}px ${({theme}) => theme.unit}px 0 0;\n      }\n    }\n  }\n  ${({theme}) => TablePaddingX({pLeft:theme.unit * 3,pRight:theme.unit * 3})}\n` as typeof Grid\nexport const FixedStyle = styled(Box)`\n  @media only screen and (min-height: 784px ) and (min-width: 1024px) {\n    position: fixed;\n  }\n` as typeof Box\n//    ${({theme}) => theme.border.defaultFrame({c_key: 'blur', d_R: 1})};\n","import React, { useCallback, useEffect } from 'react'\nimport styled from '@emotion/styled/macro'\n\nimport { MarketBlock, QuoteTable, TablePaddingX, QuoteTableRawDataItem, InputSearch, MarketBlockProps } from '@loopring-web/component-lib'\nimport { OutlinedInputProps } from '@material-ui/core/OutlinedInput/OutlinedInput';\nimport { WithTranslation, withTranslation } from 'react-i18next'\nimport { useHistory } from 'react-router-dom'\nimport * as _ from 'lodash'\n// import { FloatTag } from '@loopring-web/common-resources'\nimport { Box, Grid, Tabs, Tab, Divider, OutlinedInput, InputAdornment } from '@material-ui/core'\nimport { SearchIcon } from '@loopring-web/common-resources'\nimport { useQuote, useCandlestickList } from './hook'\nimport { LoopringAPI } from 'api_wrapper'\nimport { TradingInterval } from 'loopring-sdk/dist'\nimport { TableWrapStyled } from 'pages/styled'\nimport { useFavoriteMarket } from 'stores/localStore/favoriteMarket'\nimport { AmmPoolActivityRule } from 'loopring-sdk'\n\nconst RowStyled = styled(Grid)`\n      & .MuiGrid-root:not(:last-of-type) > div{\n        margin-right: ${({theme}) => theme.unit * 2}px;\n      }\n` as typeof Grid\n\nconst SearchWrapperStyled = styled(Box)`\n      position: absolute;\n      top: 0.9rem;\n      right: ${({theme}) => theme.unit * 2}px;\n    `\n\nconst TabsWrapperStyled = styled(Box)`\n      position: relative;\n      padding: 0.8rem 0.8rem 0 1rem;\n`\n\nexport type CandlestickItem = {\n  market: string;\n  data: {\n    close: number;\n    timeStamp: number;\n  }[]\n}\n\nexport enum TableFilterParams {\n  all = 'all',\n  favourite = 'favourite',\n  ranking = 'ranking'\n}\n\nconst QuotePage = withTranslation('common')((rest: WithTranslation) => {\n    const [candlestickList, setCandlestickList] = React.useState<any[]>([])\n    const [ammPoolBalances, setAmmPoolBalances] = React.useState<any[]>([])\n    const [tableTabValue, setTableTabValue] = React.useState('all')\n    const [filteredData, setFilteredData] = React.useState<QuoteTableRawDataItem[]>([])\n    const [searchValue, setSearchValue] = React.useState<string>('')\n    const [swapRankingList, setSwapRankingList] = React.useState<AmmPoolActivityRule[]>([])\n    const [tableHeight, setTableHeight] = React.useState(0);\n\n    const { favoriteMarket, removeMarket, addMarket } = useFavoriteMarket()\n    const { t } = rest\n\n    const getSwapRankingList = React.useCallback(async () => {\n      if (LoopringAPI.ammpoolAPI) {\n        const res = await LoopringAPI.ammpoolAPI.getAmmPoolActivityRules()\n        if (res && res.groupByRuleType && res.groupByRuleType.SWAP_VOLUME_RANKING && !!res.groupByRuleType.SWAP_VOLUME_RANKING.length) {\n          setSwapRankingList(res.groupByRuleType.SWAP_VOLUME_RANKING)\n        }\n      }\n    }, [])\n\n    const getCandlestick = React.useCallback(async (market: string) => {\n      if (LoopringAPI.exchangeAPI) {\n        const res = await LoopringAPI.exchangeAPI.getMixCandlestick({\n          market: market,\n          interval: TradingInterval.d1,\n          // start?: number;\n          // end?: number;\n          limit: 30,\n        })\n        if (res && res.candlesticks && !!res.candlesticks.length) {\n          // const data = res.candlesticks.map(o => ({\n          //   close: o.close,\n          //   timeStamp: o.timestamp\n          // }))\n          // setCandlestickList(prev => [...prev, {\n          //   market: market,\n          //   data: data\n          // }])\n          const data = res.candlesticks.map(o => ({\n            timeStamp: o.timestamp,\n            low: o.low,\n            high: o.high,\n            open: o.open,\n            close: o.close,\n            volume: o.baseVol,\n            sign: o.close < o.open ? -1 : 1,\n          }))\n          setCandlestickList(prev => [...prev, {\n            market: market,\n            data: data\n          }])\n        }\n      }\n    }, [])\n\n    const { recommendations, tickList /* onVisibleRowsChange */ } = useQuote()\n\n    const getCurrentHeight = React.useCallback(() => {\n      const height = window.innerHeight\n      const tableHeight = height - 64 - 117 - 56 - 120 - 20\n      setTableHeight(tableHeight)\n    }, [])\n\n    React.useEffect(() => {\n      getCurrentHeight()\n      window.addEventListener('resize', getCurrentHeight)\n      return () => {\n        window.removeEventListener('resize', getCurrentHeight)\n      }\n    }, [getCurrentHeight]);\n\n    React.useEffect(() => {\n      const list = recommendations.map(item => {\n        const market = `${item.coinAInfo.simpleName}-${item.coinBInfo.simpleName}`\n        return market\n      })\n      if (!!list.length) {\n        getCandlestick(list[0])\n        getCandlestick(list[1])\n        getCandlestick(list[2])\n        getCandlestick(list[3])\n      }\n    }, [recommendations, getCandlestick])\n\n    const getAmmPoolBalances = useCallback(async () => {\n      if (LoopringAPI.ammpoolAPI) {\n        const ammRes = await LoopringAPI.ammpoolAPI?.getAmmPoolBalances()\n        const fomattedRes = ammRes.raw_data.map((o: any) => ({\n          ...o,\n          poolName: o.poolName.replace('AMM-', '')\n        }))\n        setAmmPoolBalances(fomattedRes)\n      }\n    }, [])\n\n    React.useEffect(() => {\n      getAmmPoolBalances()\n    }, [getAmmPoolBalances])\n\n    React.useEffect(() => {\n      getSwapRankingList()\n    }, [getSwapRankingList])\n\n    let history = useHistory()\n\n    // prevent amm risky pair\n    const getFilteredTickList = useCallback(() => {\n      if (!!ammPoolBalances.length && tickList && !!tickList.length) {\n        return tickList.filter((o: any) => {\n          const pair = `${o.pair.coinA}-${o.pair.coinB}`\n          if (ammPoolBalances.find(o => o.poolName === pair)) {\n            return !ammPoolBalances.find(o => o.poolName === pair).risky\n          }\n          return true\n        })\n      }\n      return []\n    }, [tickList, ammPoolBalances])\n\n    useEffect(() => {\n      const data = getFilteredTickList()\n      setFilteredData(data)\n    }, [getFilteredTickList])\n\n    const handleTableFilterChange = useCallback(({type = TableFilterParams.all, keyword = '' }: {\n      type?: TableFilterParams;\n      keyword?: string;\n    }) => {\n      let data =  _.cloneDeep(tickList)\n      if (type === TableFilterParams.favourite) {\n        data = data.filter((o: any) => {\n          const pair = `${o.pair.coinA}-${o.pair.coinB}`\n          return favoriteMarket?.includes(pair)\n        })\n      }\n      if (type === TableFilterParams.ranking) {\n        data = data.filter((o: any) => {\n          const pair = `${o.pair.coinA}-${o.pair.coinB}`\n          return swapRankingList.find(o => o.market === pair)\n        })\n      }\n      data = data.filter((o: any) => {\n        const formattedKeyword = keyword?.toLocaleLowerCase()\n        const coinA = o.pair.coinA.toLowerCase()\n        const coinB = o.pair.coinB.toLowerCase()\n        if (keyword === '') {\n          return true\n        }\n        return coinA?.includes(formattedKeyword) || coinB?.includes(formattedKeyword)\n      })\n      if (type === TableFilterParams.all && !keyword) {\n        data = getFilteredTickList()\n      }\n      setFilteredData(data)\n    }, [getFilteredTickList, favoriteMarket, swapRankingList, tickList])\n\n    const handleRowClick = useCallback((row: QuoteTableRawDataItem) => {\n      const { coinA, coinB } = row.pair\n      const tradePair = `${coinA}-${coinB}`\n      history && history.push({\n        pathname: `/trading/lite/${tradePair}`\n      })\n    }, [history])\n\n    const handleTabChange = useCallback((_event: any, newValue: string) => {\n      setTableTabValue(newValue)\n      handleTableFilterChange({\n        type: newValue === 'favourite' ? TableFilterParams.favourite : newValue === 'tradeRanking' ? TableFilterParams.ranking : TableFilterParams.all,\n        keyword: searchValue\n      })\n    }, [handleTableFilterChange, searchValue])\n    \n    const handleSearchChange = React.useCallback((value) => {\n      setSearchValue(value)\n      const type = tableTabValue === 'favourite' ? TableFilterParams.favourite : tableTabValue === 'tradeRanking' ? TableFilterParams.ranking : TableFilterParams.all\n      handleTableFilterChange({keyword: value, type: type})\n    }, [handleTableFilterChange, tableTabValue])\n\n    const formattedRecommendations = recommendations.map(item => {\n      const market = `${item.coinAInfo.simpleName}-${item.coinBInfo.simpleName}`\n      return ({\n        ...item,\n        market,\n        chartData: candlestickList.find(o => o.market === market)?.data.sort((a: any, b: any) => a.timeStamp - b.timeStamp)\n      })\n    })\n\n    // const handleRecommendationJump = React.useCallback((market: string) => {\n    //   if (!market) {\n    //     return\n    //   }\n    //   history && history.push({\n    //     pathname: `/trading/lite/${market}`\n    //   })\n    // }, [history])\n    const handleRecommendBoxClick = React.useCallback((recommendation: any) => {\n      if (recommendation && recommendation.market) {\n        history && history.push({\n          pathname: `/trading/lite/${recommendation.market}`\n        })\n      }\n    }, [history])\n\n    return <Box display={'flex'} flexDirection={'column'} flex={1} >\n\n        <RowStyled container >\n\n            {/* {recommendations.map((item,index)=> <Grid key={item.coinAInfo+item.coinBInfo+index} item xs={3} >\n                    <MarketBlock {...{...item, ...rest}}></MarketBlock>\n                </Grid>\n            )} */}\n            {/* {recommendations.map((item,index)=> {\n              const market = `${item.coinAInfo.simpleName}-${item.coinBInfo.simpleName}`\n              const chartData = candlestickList.find(o => o.market === market)?.data.sort((a: any, b: any) => a.timeStamp - b.timeStamp)\n              return (\n                <Grid key={index} item xs={3} onClick={() => {\n                  history && history.push({\n                    pathname: `/trading/lite/${market}`\n                  })\n                }}>\n                    <MarketBlock {...{...item, chartData: chartData ? chartData : [], ...rest}}></MarketBlock>\n                </Grid>\n              )\n            } \n            )} */}\n            <Grid item xs={3} onClick={() => handleRecommendBoxClick(formattedRecommendations[0])}>\n                <MarketBlock {...{...formattedRecommendations[0], chartData: formattedRecommendations[0] ? formattedRecommendations[0].chartData : [], ...rest}}></MarketBlock>\n            </Grid>\n            <Grid item xs={3} onClick={() => handleRecommendBoxClick(formattedRecommendations[1])}>\n                <MarketBlock {...{...formattedRecommendations[1], chartData: formattedRecommendations[1] ? formattedRecommendations[1].chartData : [], ...rest}}></MarketBlock>\n            </Grid>\n            <Grid item xs={3} onClick={() => handleRecommendBoxClick(formattedRecommendations[2])}>\n                <MarketBlock {...{...formattedRecommendations[2], chartData: formattedRecommendations[2] ? formattedRecommendations[2].chartData : [], ...rest}}></MarketBlock>\n            </Grid>\n            <Grid item xs={3} onClick={() => handleRecommendBoxClick(formattedRecommendations[3])}>\n                <MarketBlock {...{...formattedRecommendations[3], chartData: formattedRecommendations[3] ? formattedRecommendations[3].chartData : [], ...rest}}></MarketBlock>\n            </Grid>\n\n        </RowStyled>\n        <TableWrapStyled container marginY={3}  paddingBottom={2} flex={1} className={'MuiPaper-elevation2'}>\n            <Grid item xs={12}>\n                <TabsWrapperStyled>\n                  <Tabs\n                      value={tableTabValue}\n                      onChange={handleTabChange}\n                      aria-label=\"disabled tabs example\"\n                  >\n                      <Tab label={t('labelQuotePageFavourite')} value=\"favourite\"/>\n                      <Tab label={t('labelAll')} value=\"all\"/>\n                      <Tab label={t('labelQuotePageTradeRanking')} value=\"tradeRanking\"/>\n                  </Tabs>\n                  <SearchWrapperStyled>\n                    <InputSearch value={searchValue} onChange={handleSearchChange} />\n                  </SearchWrapperStyled>\n                </TabsWrapperStyled>\n                <Divider />\n                <QuoteTable /* onVisibleRowsChange={onVisibleRowsChange} */ \n                  onRowClick={(index, row, col) => handleRowClick(row)} \n                  rawData={filteredData}\n                  favoriteMarket={favoriteMarket}\n                  addFavoriteMarket={addMarket}\n                  removeFavoriteMarket={removeMarket}\n                  currentHeight={tableHeight}\n                  {...{ showLoading: tickList && !tickList.length, ...rest }} />\n            </Grid>\n        </TableWrapStyled>\n    </Box>\n\n\n})\n\nexport default QuotePage\n","import { useDispatch, useSelector } from 'react-redux'\nimport { FavoriteMarketStates } from './interface';\nimport { clearAll, removeMarket, addMarket, addMarkets } from './reducer';\nimport React from 'react';\n\n\nexport const useFavoriteMarket = ():  {\n    favoriteMarket: FavoriteMarketStates\n    clearAll:()=>void,\n    removeMarket:(pair:string)=>void,\n    addMarket:(pair:string)=>void,\n    addMarkets:(pair:string[])=>void,\n} => {\n    const favoriteMarket: FavoriteMarketStates = useSelector((state: any) => state.localStore.favoriteMarket)\n    const dispatch = useDispatch();\n    return {\n        favoriteMarket: favoriteMarket ,\n        clearAll: React.useCallback(() => dispatch(clearAll(undefined)), [dispatch]),\n        removeMarket: React.useCallback((pair) => dispatch(removeMarket(pair)), [dispatch]),\n        addMarket: React.useCallback((pair) => dispatch(addMarket(pair)), [dispatch]),\n        addMarkets: React.useCallback((pairs) => dispatch(addMarkets(pairs)), [dispatch]),\n    }\n}\n","import { useDeepCompareEffect } from \"react-use\"\n\nexport function useCustomDCEffect(action: any, deps: any[] | undefined | null) {\n    useDeepCompareEffect(action, [deps || {}])\n}\n","import { useCallback, useState } from 'react'\nimport moment from 'moment'\nimport { useCustomDCEffect } from 'hooks/common/useCustomDCEffect'\n\nimport { TradingInterval, Candlestick, GetCandlestickRequest, GetDepthRequest, GetTickerRequest, dumpError400, getExistedMarket } from 'loopring-sdk'\n\nimport { ChartUnit, CoinInfo } from '@loopring-web/common-resources'\n\nimport { ChartType } from '@loopring-web/component-lib'\n\nimport { TGItemData, TGItemJSXInterface, } from '@loopring-web/component-lib'\n\nimport { IGetDepthDataParams } from '@loopring-web/component-lib'\nimport { LoopringAPI } from 'api_wrapper'\n\nconst toggleData: TGItemData[] = [\n  {\n    value: ChartType.Trend,\n    key: ChartType.Trend,\n    label: 'label' + ChartType.Trend\n  },\n  {\n    value: ChartType.Depth,\n    key: ChartType.Depth,\n    label: 'label' + ChartType.Depth\n  },\n]\n\nexport function useBasicInfo(props: any, coinAInfo: any, coinBInfo: any, marketArray: any[], t: any) {\n  const tgItemJSXs: TGItemJSXInterface[] = toggleData.map(({ value, label, key }) => {\n    return { value, tlabel: t(label), key, JSX: <>{t(label)}</> }\n  })\n\n  // const { base, quote, market, tokens } = props\n\n  const { market, amm } = getExistedMarket(marketArray, coinAInfo?.name, coinBInfo?.name)\n\n  const [chartType, setChartType] = useState<ChartType>(ChartType.Trend)\n\n  // console.log('---useBasicInfo market:', market, ' amm:', amm, ' chartType:', chartType)\n  //\n  // const [change, setChange] = useState(0)\n  //\n  // const [volume, setVolume] = useState('')\n\n  const [chartUnit, setChartUnit] = useState(ChartUnit.D1)\n\n  const [originData, setOriginData] = useState<any>(undefined)\n\n  const handleChange = useCallback((_e: React.MouseEvent, value: any) => {\n    if (value === null) return\n    // Settings.setChartType(value)\n    // console.log('useBasicInfo handleChange:', value)\n    setOriginData(undefined)\n    setChartType(value === 'Trend' ? ChartType.Trend : ChartType.Depth)\n  }, [setOriginData, setChartType])\n\n  const handleChartUnitChange = (event: React.MouseEvent<HTMLElement, MouseEvent>, newValue: string) => {\n      const mappedValue = newValue === '1H' ? ChartUnit.H1 : newValue === '1W' ? ChartUnit.W1 : ChartUnit.D1\n      setChartUnit(mappedValue)\n  }\n\n  // useCustomDCEffect(async () => {\n  //\n  //   if (!exchangeApi || !market || !tokens || !quote) {\n  //     return\n  //   }\n  //\n  //   let mounted = true\n  //\n  //   try {\n  //\n  //     const request: GetTickerRequest = {\n  //       market: market.market,\n  //     }\n  //\n  //     const ticker = await exchangeApi.getTicker(request)\n  //     if (mounted) {\n  //\n  //       if (ticker.tickList[0].change) {\n  //         setChange(ticker.tickList[0].change)\n  //       }\n  //\n  //       if (ticker.tickList[0].base_token_volume) {\n  //         const baseVol = fromWEI(tokens.tokenSymbolMap, base, ticker.tickList[0].base_token_volume) as string\n  //         setVolume(baseVol)\n  //       }\n  //     }\n  //   }\n  //   catch (reason) {\n  //     dumpError400(reason, 'ChartPanel getCandlestick')\n  //   }\n  //\n  //   return () => {\n  //     mounted = false\n  //   }\n  //\n  // }, [exchangeApi, market, tokens, base,])\n\n  const tgItemJSXsPriceChart: TGItemJSXInterface[] = Object.keys(ChartUnit).reduce((pre, item) => {\n    // @ts-ignore\n    const tGItemData: TGItemData = { value: ChartUnit[item], key: ChartUnit[item], label: 'label' + ChartUnit[item] };\n    pre.push({ value: tGItemData.value, tlabel: t(tGItemData.label ? tGItemData.label : tGItemData.key), key: tGItemData.key, JSX: <>{t(tGItemData.label ? tGItemData.label : tGItemData.key)}</> })\n    return pre\n  }, [] as TGItemJSXInterface[])\n\n  useCustomDCEffect(async () => {\n  \n    let mounted = true\n  \n    if (!LoopringAPI.exchangeAPI || !market || !amm) {\n      return\n    }\n  \n    if (chartType === ChartType.Trend) {\n      const request: GetCandlestickRequest = {\n        market: amm as string,\n        interval: TradingInterval.d1,\n        limit: 30\n      }\n  \n      try {\n        const candlesticks = await LoopringAPI.exchangeAPI.getCandlestick(request)\n  \n        if (mounted) {\n          const originData = candlesticks.candlesticks.map((item: Candlestick) => {\n            return {\n              timeStamp: item.timestamp,\n              low: item.low,\n              high: item.high,\n              open: item.open,\n              close: item.close,\n              volume: item.quoteVol,\n              change: (item.close - item.open) / item.open,\n              date: moment(item.timestamp).format('MMM DD')\n            }\n          })\n          setOriginData(originData)\n        }\n      }\n      catch (reason) {\n        dumpError400(reason, 'ChartPanel getCandlestick')\n      }\n  \n    } else {\n      const request: GetDepthRequest = {\n        market,\n      }\n  \n      try {\n  \n        const { depth } = await LoopringAPI.exchangeAPI.getMixDepth(request)\n        \n        if (mounted) {\n          const originData: IGetDepthDataParams = {\n            bidsPrices: depth.bids_prices,\n            bidsAmtTotals: depth.bids_amtTotals as any,\n            asksPrices: depth.asks_prices,\n            asksAmtTotals: depth.asks_amtTotals as any,\n          }\n          setOriginData(originData)\n        }\n  \n      } catch (reason) {\n        dumpError400(reason)\n      }\n  \n    }\n  \n    return () => {\n      mounted = false\n    }\n  \n  }, [LoopringAPI.exchangeAPI, amm, market, chartType])\n\n  return {\n    // change,\n    // volume,\n    chartUnit,\n    chartType,\n    tgItemJSXs,\n    tgItemJSXsPriceChart,\n    handleChange,\n    originData,\n    handleChartUnitChange,\n  }\n}","import { ChartUnit,UpColor } from '@loopring-web/common-resources'\nimport { ScaleAreaChart, ToggleButtonGroup, useSettings, TradeTitle, ChartType } from '@loopring-web/component-lib'\nimport { Box, Grid } from \"@material-ui/core\"\nimport { WithTranslation } from 'react-i18next'\nimport { useBasicInfo } from './hook'\nimport { VolToNumberWithPrecision } from 'utils/formatter_tool'\nimport { myLog } from 'utils/log_tools'\n\nconst BasicInfoPanel = ({ props, coinAInfo, coinBInfo, tradeFloat, marketArray, t, ...rest }: any & WithTranslation) => {\n\n    const {\n        chartType,\n        tgItemJSXs,\n        handleChange,\n        originData,\n    } = useBasicInfo(props, coinAInfo, coinBInfo, marketArray, t)\n    const { upColor } = useSettings();\n    const baseToken = coinAInfo?.name\n    const quoteToken = coinBInfo?.name\n\n    // myLog('basicInfo baseToken:', baseToken, ' quoteToken:', quoteToken)\n\n    const trendChartData = originData && !!originData.length ? originData.sort((a: any, b: any) => a.timeStamp - b.timeStamp) : []\n    const depthChartData = originData && coinAInfo && originData.asksAmtTotals ? { \n        ...originData,\n        asksAmtTotals: originData.asksAmtTotals.map((amt: string) => Number(VolToNumberWithPrecision(amt, baseToken))),\n        bidsAmtTotals: originData.bidsAmtTotals.map((amt: string) => Number(VolToNumberWithPrecision(amt, baseToken))),\n    } : []\n    return  <>\n        <Grid item >\n           <Box display={'flex'} flexDirection={'row'} justifyContent={'space-between'} alignItems={'center'}>\n               <TradeTitle {...{\n                   coinAInfo, coinBInfo,\n                   ...rest, t, tradeFloat\n               }}></TradeTitle>\n               <ToggleButtonGroup exclusive {...{ ...rest, t, tgItemJSXs, value: chartType }}\n                                handleChange={handleChange} />\n           </Box>  \n        </Grid>\n        <Box flex={1} alignItems={'stretch'} flexDirection=\"row\" marginTop={3}  position={'relative'} >\n            <Box flex={1} display={'flex'} flexDirection={'column'} minHeight={396} maxHeight={420}  style={{ height: '100%', width: '101%' }}>\n                <ScaleAreaChart \n                    type={chartType} \n                    data={chartType === ChartType.Trend ? trendChartData : depthChartData} \n                    riseColor={upColor as keyof typeof UpColor}\n                    extraInfo={quoteToken}\n                    handleMove={() => {}}\n                    showXAxis\n                />\n            </Box>\n            {/* {chartType === ChartType.Trend && (\n                <Box height={24} display={'flex'} justifyContent={'flex-end'} position={'absolute'} right={0} bottom={0}>\n                    <ToggleButtonGroup exclusive {...{\n                        ...rest, t, tgItemJSXs: tgItemJSXsPriceChart,\n                        value: chartUnit, size: 'small'\n                    }}\n                        handleChange={handleChartUnitChange} />\n                </Box>\n            )} */}\n        </Box>\n        {/* <Grid item xs={12} height={24} display={'flex'} justifyContent={'flex-end'}>\n            <ToggleButtonGroup exclusive {...{\n                ...rest, t, tgItemJSXs: tgItemJSXsPriceChart,\n                value: chartUnit, size: 'small'\n            }}\n                handleChange={handleChartUnitChange} />\n        </Grid> */}\n    </>\n\n};\n\nexport default BasicInfoPanel\n","\n\nimport { RefAttributes, useState, useCallback, useEffect } from 'react'\n\nimport Tabs from '@material-ui/core/Tabs'\nimport Tab from '@material-ui/core/Tab'\nimport Checkbox from '@material-ui/core/Checkbox'\nimport styled from '@emotion/styled'\n\nimport { FormControlLabel, TradeTable, } from '@loopring-web/component-lib'\nimport { withTranslation, WithTranslation } from 'react-i18next';\nimport { CheckBoxIcon, CheckedIcon } from '@loopring-web/common-resources'\nimport { RouteComponentProps, withRouter } from 'react-router'\nimport { RawDataTradeItem, BasicHeaderItem, HeadMenuType } from '@loopring-web/component-lib'\nimport { TableWrapStyled } from '../../../styled';\nimport { Divider } from '@material-ui/core'\n\n\nconst applyProps = (index: number) => {\n    return {\n        id: `simple-tab-${index}`,\n        'aria-controls': `simple-tabpanel-${index}`,\n    }\n}\nconst WrapperStyled = styled.div`\n            position: relative;\n            width: 100%;\n            margin-top: ${({theme}) => theme.unit * 4}px;\n            background-color: var(--color-box);\n            box-shadow: var(--shadow);\n            border-radius: ${({theme}) => theme.unit}px;\n        `\n\nconst TabsStyled = styled(Tabs)`\n    margin-left: ${({theme}) => theme.unit}px;\n`\n\n// const StyledFormControlLabel = styled(FormControlLabel)`\n//             position: absolute;\n//             top: 0;\n//             right: ${({theme}) => theme.unit}px;\n//             margin: ${({theme}) => theme.unit}px 0 0 0;\n//         `\n\nconst TradePanel = withTranslation('common')(\n   // withRouter(\n    (\n        {tradeArray,  myTradeArray, t}:\n            { tradeArray: RawDataTradeItem[], myTradeArray: RawDataTradeItem[] } & WithTranslation & RouteComponentProps) => {\n        const [value, setValue] = useState(1)\n        const [tableHeight, setTableHeight] = useState(0);\n        const handleChange = (event: any, newValue: any) => {\n            setValue(newValue)\n        }\n\n        const getCurrentHeight = useCallback(() => {\n            const height = window.innerHeight\n            const tableHeight = height - 64 - 117 - 56 - 120 - 20 - 100 - 50 - 15;\n            setTableHeight(tableHeight)\n        }, [])\n        \n        useEffect(() => {\n            getCurrentHeight()\n            window.addEventListener('resize', getCurrentHeight)\n            return () => {\n                window.removeEventListener('resize', getCurrentHeight)\n            }\n        }, [getCurrentHeight]);\n\n        return (   <TableWrapStyled item alignSelf={'stretch'} xs={12} marginY={2}  paddingBottom={2} flex={1} className={'MuiPaper-elevation2'}>\n                <TabsStyled value={value}\n                            onChange={handleChange}\n                            aria-label=\"tabs switch\">\n                    <Tab label={t('labelMyTrade')} {...applyProps(0)} />\n                    <Tab label={t('labelRecent')}   {...applyProps(1)} />\n                </TabsStyled>\n                <Divider />\n                <TradeTable rawData={value === 0 ? myTradeArray : tradeArray} currentHeight={tableHeight} />\n            </TableWrapStyled>\n        )\n    }\n    ) as  (props: { tradeArray: RawDataTradeItem[], myTradeArray: RawDataTradeItem[] }) => JSX.Element;\n//)\n\nexport default TradePanel\n\n","import React from 'react';\nimport * as _ from 'lodash';\nimport { globalSetup, SagaStatus } from '@loopring-web/common-resources';\nimport { useWalletLayer1 } from '../../stores/walletLayer1';\nimport { walletService } from './walletService';\nimport { useWalletLayer2 } from '../../stores/walletLayer2';\nimport store from '../../stores';\n\nexport const useWalletHook=({throttleWait = globalSetup.throttleWait,walletLayer2Callback,walletLayer1Callback}:{\n    throttleWait?:number,\n    walletLayer2Callback?:()=>void,\n    walletLayer1Callback?:()=>void,\n})=>{\n    const { updateWalletLayer1,status:walletLayer1Status, } = useWalletLayer1();\n    const { updateWalletLayer2,status:walletLayer2Status, } = useWalletLayer2();\n    const subject = React.useMemo(() => walletService.onSocket(), []);\n        \n    const socketUpdate = React.useCallback(\n        _.throttle(({walletLayer1Status, walletLayer2Status})=>{\n            console.log('xxxxxx',Date.now())\n            if(walletLayer1Status!== SagaStatus.PENDING){                           \n                updateWalletLayer1()\n            }\n            if(walletLayer2Status!== SagaStatus.PENDING){\n                updateWalletLayer2()\n            }\n        },throttleWait)\n    ,[])\n    const  _socketUpdate = ({walletLayer2Status,walletLayer1Status}:any)=>{\n        socketUpdate({walletLayer2Status,walletLayer1Status})\n    }\n\n    // const  _socketUpdate = React.useCallback(socketUpdate({updateWalletLayer1,updateWalletLayer2,walletLayer1Status,walletLayer2Status}),[]);\n    React.useEffect(() => {\n        const subscription = subject.subscribe(()=>{\n           const walletLayer2Status = store.getState().walletLayer2.status;\n           const walletLayer1Status = store.getState().walletLayer2.status;\n            _socketUpdate({walletLayer2Status,walletLayer1Status})\n        });\n        return () => subscription.unsubscribe();\n    }, [subject]);\n    React.useEffect(() => {\n        if (walletLayer2Callback && walletLayer2Status === SagaStatus.UNSET) {\n                walletLayer2Callback()\n        }\n    }, [walletLayer2Status])\n    React.useEffect(() => {\n        if (walletLayer1Callback && walletLayer1Status === SagaStatus.UNSET) {\n            walletLayer1Callback()\n        }\n    }, [walletLayer1Status])\n}","// import { i18nInstance as i18n  } from \"@loopring-web/common-resources\"\nimport i18n from 'i18next';\nimport { VALID_UNTIL } from 'loopring-sdk';\n\nconst covertLocale = (rawLocale: string = i18n.language) => {\n    return rawLocale.replace('_', '-')\n}\n\nexport function getLocaleDtFromTs(ts: number | string, locale: string = i18n.language) {\n    if (typeof(ts) === 'string') {\n        ts = parseInt(ts)\n    }\n    const dt = new Date(ts).toLocaleString(covertLocale(locale))\n    return dt\n}\n\nexport function getLocaleDt(dt?: Date, locale: string = i18n.language) {\n    if (dt) {\n        return dt.toLocaleString(covertLocale(locale))\n    }\n    return ''\n}\n\nexport function getTimestampDaysLater(days: number, date: Date = new Date()) {\n    const ts = Math.round(date.getTime() / 1000) + days * 86400\n    return ts\n}\n\nexport function getContactInfo(subject: string = 'report to loopring website', body: string ='Body Content') {\n    const email = process.env.CONTACT_US_EMAIL ?? 'contact@loopring.io'\n    return `mailto:${email}?subject=${subject}&body=${body}`\n}\n","import {\n    AccountStatus,\n    fnType,\n    IBData,\n    SagaStatus,\n    TradeCalcData,\n    TradeFloat,\n    WalletMap\n} from '@loopring-web/common-resources';\nimport React, { useCallback, useState } from 'react';\nimport { LoopringAPI } from 'api_wrapper';\nimport { useTokenMap } from 'stores/token';\nimport * as sdk from 'loopring-sdk';\n\nimport { useAmmMap } from 'stores/Amm/AmmMap';\nimport { useWalletLayer2 } from 'stores/walletLayer2';\nimport {\n    RawDataTradeItem,\n    SwapData,\n    SwapTradeData,\n    SwapType,\n    TradeBtnStatus,\n    useSettings\n} from '@loopring-web/component-lib';\nimport { useAccount } from 'stores/account/hook';\nimport {\n    accountStaticCallBack,\n    btnClickMap, btnLabel,\n    getUserTrades,\n    makeCache,\n    makeMarketArray,\n    makeTickView,\n    makeWalletLayer2,\n    pairDetailBlock,\n    pairDetailDone,\n} from 'hooks/help';\nimport store from 'stores';\nimport { deepClone } from 'utils/obj_tools';\nimport { myError, myLog } from 'utils/log_tools';\nimport { useTranslation } from 'react-i18next';\nimport { usePairMatch } from 'hooks/usePairMatch';\nimport { useWalletHook } from 'services/wallet/useWalletHook';\nimport { useSocket } from 'stores/socket';\nimport { walletService } from 'services/wallet/walletService';\nimport { getTimestampDaysLater } from 'utils/dt_tools';\nimport { DAYS, REFRESH_RATE } from 'defs/common_defs';\nimport { MarketTradeInfo } from 'loopring-sdk/dist/defs/loopring_defs';\nimport { VolToNumberWithPrecision } from '../../utils/formatter_tool';\nimport { useWalletLayer1 } from '../../stores/walletLayer1';\nimport { useCustomDCEffect } from 'hooks/common/useCustomDCEffect';\nimport { sleep } from 'loopring-sdk';\n\nconst useSwapSocket = ()=>{\n    const {sendSocketTopic,socketEnd} = useSocket();\n    const { account } = useAccount()\n    React.useEffect(() => {\n        if(account.readyState === AccountStatus.ACTIVATED){\n            sendSocketTopic({[ sdk.WsTopicType.account ]: true});\n        }else{\n            socketEnd()\n        }\n        return ()=>{\n            socketEnd()\n        }\n    }, [account.readyState]);\n}\nexport const useSwapPage = <C extends { [key: string]: any }>() => {\n    useSwapSocket()\n    /** get store value **/\n    const { account, status: accountStatus } = useAccount()\n    const { coinMap, tokenMap, marketArray, marketCoins, marketMap, } = useTokenMap()\n    const { slippage } = useSettings()\n    const { walletLayer2 } = useWalletLayer2();\n    const { ammMap } = useAmmMap()\n    const { status:walletLayer2Status } = useWalletLayer2();\n\n\n\n    /*** api prepare ***/\n    const { t } = useTranslation('common')\n    const [swapBtnI18nKey, setSwapBtnI18nKey] = React.useState<string | undefined>(undefined)\n    const [swapBtnStatus, setSwapBtnStatus] = React.useState(TradeBtnStatus.AVAILABLE)\n    const [isSwapLoading,setIsSwapLoading] = React.useState(false)\n    const [quoteMinAmt,setQuoteMinAmt]  =  React.useState<string>()\n    const [swapToastOpen, setSwapToastOpen] = useState<{ flag:boolean,type:any,label:string }|undefined>(undefined)\n    const [tradeData, setTradeData] = React.useState<SwapTradeData<IBData<C>> | undefined>(undefined);\n    const [tradeCalcData, setTradeCalcData] = React.useState<Partial<TradeCalcData<C>>>({});\n    const [tradeArray, setTradeArray] = React.useState<RawDataTradeItem[]>([]);\n    const [myTradeArray, setMyTradeArray] = React.useState<RawDataTradeItem[]>([]);\n    const [tradeFloat, setTradeFloat] = React.useState<TradeFloat | undefined>(undefined);\n    const { pair, setPair, market, setMarket, } = usePairMatch('/trading/lite');\n\n    const [ammPoolSnapshot, setAmmPoolSnapshot] = React.useState<sdk.AmmPoolSnapshot | undefined>(undefined);\n\n    const [output, setOutput] = useState<any>()\n\n    const [takerRate, setTakerRate] = useState<string>('0')\n\n    const [feeBips, setFeeBips] = useState<string>('0')\n\n    const [depth, setDepth] = useState<sdk.DepthData>()\n\n    const [amountMap, setAmountMap] = React.useState<any>()\n\n    //table myTrade\n    const myTradeTableCallback = React.useCallback(()=>{\n        if (market && account.accountId && account.apiKey && LoopringAPI.userAPI) {\n            LoopringAPI.userAPI.getUserTrades({accountId: account.accountId, market,}, account.apiKey).then((response: {\n                totalNum: any;\n                userTrades: sdk.UserTrade[];\n                raw_data: any;\n            }) => {\n                let _myTradeArray = makeMarketArray(market, response.userTrades) as RawDataTradeItem[]\n                setMyTradeArray(_myTradeArray ? _myTradeArray : [])\n            })\n        } else {\n            setMyTradeArray([])\n        }\n\n    },[market, account.accountId, account.apiKey])\n\n    React.useEffect(() => {\n\n        if (!!pair?.coinBInfo?.simpleName) {\n            resetSwap(undefined, undefined)\n        }\n\n    }, [pair?.coinBInfo?.simpleName])\n\n    React.useEffect(() => {\n        if(accountStatus === SagaStatus.UNSET && walletLayer2Status === SagaStatus.UNSET){\n            myTradeTableCallback();\n        }\n    },[account.readyState,market,accountStatus,walletLayer2Status] );\n    \n    //table marketTrade\n    const marketTradeTableCallback = React.useCallback(()=>{\n        if ( LoopringAPI.exchangeAPI) {\n            LoopringAPI.exchangeAPI.getMarketTrades({ market }).then(({marketTrades}:{\n                totalNum: any;\n                marketTrades: MarketTradeInfo[];\n                raw_data: any;\n            })=>{\n                const _tradeArray = makeMarketArray(market, marketTrades)\n                setTradeArray(_tradeArray as RawDataTradeItem[])\n            })\n\n        } else {\n            setTradeArray([])\n\n        }\n\n    }, [market, setTradeArray, ]);\n\n    const updateDepth = React.useCallback(async() => {\n        if (market && LoopringAPI.exchangeAPI) {\n            myLog('swap page updateDepth', market)\n            const { depth } = await LoopringAPI.exchangeAPI.getMixDepth({ market })\n            setDepth(depth)\n        }\n    }, [market, setDepth])\n\n    React.useEffect(() => {\n        if (market) {\n            marketTradeTableCallback();\n            updateDepth();\n        }\n    }, [market]);\n\n    //Btn related function\n    const btnLabelAccountActive = React.useCallback((): string|undefined => {\n\n        const validAmt = (output?.amountBOut && quoteMinAmt\n            && sdk.toBig(output?.amountBOut).gte(sdk.toBig(quoteMinAmt))) ? true : false;\n        if(isSwapLoading){\n            setSwapBtnStatus(TradeBtnStatus.LOADING)\n            return undefined\n        }else{\n            if (validAmt || quoteMinAmt === undefined ) {\n                setSwapBtnStatus(TradeBtnStatus.AVAILABLE)\n                return undefined\n\n            }else if(tradeData === undefined || tradeData?.sell.tradeValue === undefined || tradeData?.buy.tradeValue === undefined){\n                setSwapBtnStatus(TradeBtnStatus.DISABLED)\n                return'labelEnterAmount';\n            } else {\n                const quote = tradeData?.buy.belong;\n                const minOrderSize = VolToNumberWithPrecision(quoteMinAmt, quote) + ' ' + tradeData?.buy.belong;\n                setSwapBtnStatus(TradeBtnStatus.DISABLED)\n                return `labelLimitMin, ${minOrderSize}`\n\n            }\n\n        }\n    },[quoteMinAmt, tradeData, isSwapLoading, setSwapBtnStatus])\n\n    const _btnLabel = Object.assign(deepClone(btnLabel), {\n        [ fnType.ACTIVATED ]: [\n            btnLabelAccountActive\n        ]});\n\n    React.useEffect(() => {\n        if(accountStatus === SagaStatus.UNSET) {\n            setSwapBtnI18nKey(accountStaticCallBack(_btnLabel));\n        }\n    }, [account.readyState, accountStatus, isSwapLoading, tradeData?.sell.tradeValue])\n\n    const swapCalculatorCallback = useCallback(async ({ sell, buy, slippage, ...rest }: any) => {\n\n        const { exchangeInfo } = store.getState().system\n        setIsSwapLoading(true);\n        if (!LoopringAPI.userAPI || !tokenMap || !exchangeInfo || !output\n            || account.readyState !== AccountStatus.ACTIVATED) {\n\n            setSwapToastOpen({flag: true, type: 'error', label: t('labelSwapFailed')})\n            setIsSwapLoading(false)\n\n            return\n        }\n\n        const baseToken = tokenMap[sell.belong as string]\n        const quoteToken = tokenMap[buy.belong as string]\n\n        const request: sdk.GetNextStorageIdRequest = {\n            accountId: account.accountId,\n            sellTokenId: baseToken.tokenId\n        }\n\n        const storageId = await LoopringAPI.userAPI.getNextStorageId(request, account.apiKey)\n\n        try {\n\n            const tradeChannel = output.exceedDepth ? sdk.TradeChannel.AMM_POOL : sdk.TradeChannel.MIXED\n\n            const request: sdk.SubmitOrderRequestV3 = {\n                exchange: exchangeInfo.exchangeAddress,\n                accountId: account.accountId,\n                storageId: storageId.orderId,\n                sellToken: {\n                    tokenId: baseToken.tokenId,\n                    volume: output.amountS\n                },\n                buyToken: {\n                    tokenId: quoteToken.tokenId,\n                    volume: output.amountBOutSlip.minReceived\n                },\n                allOrNone: false,\n                validUntil: getTimestampDaysLater(DAYS),\n                maxFeeBips: parseInt(feeBips),\n                fillAmountBOrS: false, // amm only false\n                orderType: sdk.OrderType.TakerOnly,\n                tradeChannel,\n                eddsaSignature: '',\n            }\n\n            myLog(request)\n\n            const response = await LoopringAPI.userAPI.submitOrder(request, account.eddsaKey.sk, account.apiKey)\n\n            myLog(response)\n\n            if (!response?.hash) {\n                setSwapToastOpen({flag:true,type:'error',label:t('labelSwapFailed')})\n                myError(response?.errInfo)\n            } else {\n                setSwapToastOpen({flag:true,type:'success',label:t('labelSwapSuccess')})\n                walletService.sendUserUpdate()\n                setTradeData({\n                    ...tradeData,\n                    ...{\n                        sell: { ...tradeData?.sell, tradeValue: 0 },\n                        buy: { ...tradeData?.buy, tradeValue: 0 },\n                    }\n                } as SwapTradeData<IBData<C>>)\n            }\n        } catch (reason) {\n            sdk.dumpError400(reason)\n\n            setSwapToastOpen({flag:true,type:'error',label:t('labelSwapFailed')})\n\n        }\n\n        setOutput(undefined)\n\n        await sleep(REFRESH_RATE)\n        \n        setIsSwapLoading(false)\n\n        if (rest.__cache__) {\n            makeCache(rest.__cache__)\n        }\n\n    }, [tradeData, output, tokenMap])\n    const swapBtnClickArray = Object.assign(deepClone(btnClickMap), {\n        [fnType.ACTIVATED]: [swapCalculatorCallback]\n    })\n    const onSwapClick = React.useCallback(({ sell, buy, slippage, ...rest }: SwapTradeData<IBData<C>>) => {\n        accountStaticCallBack(swapBtnClickArray, [{ sell, buy, slippage, ...rest }])\n    }, [swapBtnClickArray])\n    //Btn related end\n\n    React.useEffect(()=>{\n        if(accountStatus === SagaStatus.UNSET) {\n            walletLayer2Callback()\n        }\n    },[amountMap, account.readyState,accountStatus,market,tradeData?.sell.belong, tradeData?.buy.belong])\n\n    const updateAmtMap = React.useCallback(async() => {\n\n        if(LoopringAPI.userAPI && market && pair?.coinAInfo?.simpleName \n            && pair?.coinBInfo?.simpleName && ammMap && accountStatus === SagaStatus.UNSET) {\n            const { amm, } = sdk.getExistedMarket(marketArray, pair?.coinAInfo?.simpleName, pair?.coinBInfo?.simpleName)\n\n            const realMarket = amm && ammMap[amm] ? amm : market\n\n            const req: sdk.GetMinimumTokenAmtRequest = {\n                accountId: account.accountId,\n                market: realMarket,\n            }\n\n            const { amountMap } = await LoopringAPI.userAPI.getMinimumTokenAmt(req, account.apiKey)\n\n            setAmountMap(amountMap)\n\n            myLog('amountMap:', amountMap)\n        }\n\n    }, [setAmountMap, market, marketArray, ammMap, accountStatus, account.apiKey, pair?.coinAInfo?.simpleName, pair?.coinBInfo?.simpleName, ])\n\n    useCustomDCEffect(() => {\n        \n        updateAmtMap()\n\n    }, [market, pair?.coinAInfo?.simpleName, pair?.coinBInfo?.simpleName, accountStatus])\n\n    const walletLayer2Callback = React.useCallback(async ()=>{\n        const base = tradeData?.sell.belong\n        const quote = tradeData?.buy.belong\n\n        myLog(`enter walletLayer2Callback: base:${base} quote:${quote}`)\n\n        if (marketArray && amountMap && base && quote && market &&\n            LoopringAPI.userAPI && account.readyState === AccountStatus.ACTIVATED\n            && ammMap && account?.accountId && account?.apiKey) {\n            const { walletMap } = makeWalletLayer2();\n            const { amm, } = sdk.getExistedMarket(marketArray, base, quote)\n\n            const realMarket = amm && ammMap[amm] ? amm : market\n            \n            const quoteMinAmtInfo = amountMap[quote]\n\n            const takerRate = quoteMinAmtInfo.userOrderInfo.takerRate\n            const feeBips = amm && ammMap[amm] ? ammMap[amm].__rawConfig__.feeBips: 0\n            const totalFee = sdk.toBig(feeBips).plus(sdk.toBig(takerRate)).toString()\n\n            setTradeData({\n                sell: {\n                    belong: tradeCalcData.sellCoinInfoMap ? tradeCalcData.sellCoinInfoMap[tradeCalcData.coinSell]?.simpleName : undefined,\n                    balance: walletMap ? walletMap[tradeCalcData.coinSell as string]?.count : 0\n                },\n                buy: {\n                    belong: tradeCalcData.sellCoinInfoMap ? tradeCalcData.sellCoinInfoMap[tradeCalcData.coinBuy]?.simpleName : undefined,\n                    balance: walletMap ? walletMap[tradeCalcData.coinBuy as string]?.count : 0\n                },\n            } as SwapTradeData<IBData<C>>)\n            setQuoteMinAmt(quoteMinAmtInfo?.userOrderInfo.minAmount)\n            setFeeBips(totalFee)\n            myLog(`${realMarket} totalFee: ${totalFee}`)\n\n            setTakerRate(takerRate.toString())\n            setTradeCalcData({ ...tradeCalcData,walletMap, fee: totalFee } as TradeCalcData<C>)\n        } else {\n            myLog(`setFeeBips('0')`)\n            setFeeBips('0')\n            setTakerRate('0')\n\n            setTradeCalcData({ ...tradeCalcData, walletMap: {}, fee: '0' } as TradeCalcData<C>)\n            setTradeData({\n                sell: {\n                    belong: base,\n                    balance: 0\n                },\n                buy: {\n                    belong: quote,\n                    balance: 0\n                },\n            } as SwapTradeData<IBData<C>>)\n        }\n        \n    },[tradeData?.sell.belong, amountMap, tradeData?.buy.belong, marketArray, ammMap,\n        account.readyState, account.apiKey, account.accountId])\n\n    useWalletHook({walletLayer2Callback})\n\n    // myLog('tradeData?.sell.belong:', tradeData?.sell.belong)\n    // myLog('tradeData?.buy.belong:', tradeData?.buy.belong)\n\n    //HIGH: effect by wallet state update\n\n    const handleSwapPanelEvent = async (swapData: SwapData<SwapTradeData<IBData<C>>>, swapType: any): Promise<void> => {\n\n        myLog('handleSwapPanelEvent...')\n\n        const { tradeData } = swapData\n        resetSwap(swapType, tradeData)\n\n    }\n\n    const throttleSetValue = React.useCallback(async(type, _tradeData) => {\n\n        if (!marketArray || !tokenMap || !marketMap || !ammMap || !tradeCalcData || !market\n            || !depth || depth.symbol !== market) {\n            let _tradeCalcData = { ...tradeCalcData } as TradeCalcData<C>\n            return { _tradeData, _tradeCalcData }\n        }\n\n        const isAtoB = type === 'sell'\n        let input: any = (isAtoB ? _tradeData.sell.tradeValue : _tradeData.buy.tradeValue)\n\n        if (input) {\n            input = (input.toString() as string).trim()\n            if (input === '0.') {\n                input = '0'\n            }\n        } else {\n            input = '0'\n        }\n\n        myLog('input val:', input)\n\n        const base = _tradeData.sell.belong as string\n        const quote = _tradeData.buy.belong as string\n\n        let slippage = _tradeData.slippage\n\n        if (slippage === undefined) {\n            slippage = 0.5\n        }\n\n        slippage = sdk.toBig(slippage).times(100).toString()\n\n        // const ammMapRaw = { ['AMM-' + market]: ammMap['AMM-' + market].__rawConfig__ } as LoopringMap<AmmPoolInfoV3>\n\n        const output = sdk.getOutputAmount(input, base, quote, isAtoB, marketArray, tokenMap,\n            marketMap, depth, ammMap as any, ammPoolSnapshot, takerRate, slippage)\n\n        setOutput(output)\n\n        tradeCalcData.priceImpact = output?.priceImpact as string\n        tradeCalcData.minimumReceived = output?.amountBOutSlip.minReceivedVal as string\n\n        if (isAtoB) {\n            _tradeData.buy.tradeValue = output?.output ? parseFloat(output?.output) : 0\n        } else {\n            _tradeData.sell.tradeValue = output?.output ? parseFloat(output?.output) : 0\n        }\n\n        //TODO: renew  tradeCalcData\n        let _tradeCalcData = { ...tradeCalcData } as TradeCalcData<C>;\n\n        setTradeData(_tradeData)\n        setTradeCalcData({ ..._tradeCalcData, fee: feeBips })\n\n    }, [ depth, tradeData, tradeCalcData, ammPoolSnapshot]);\n\n    const resetSwap = (swapType: SwapType | undefined, _tradeData: SwapTradeData<IBData<C>> | undefined) => {\n\n        let type = undefined\n        let coinKey = `${_tradeData?.sell.belong}-${_tradeData?.buy.belong}`\n        //\n        // let _ammPoolSnapshot = ammPoolSnapshot\n        //\n        switch (swapType) {\n            case SwapType.SEll_CLICK:\n            case SwapType.BUY_CLICK:\n                return\n            case SwapType.SELL_SELECTED:\n                type = 'sell'\n                break\n            case SwapType.BUY_SELECTED:\n                type = 'buy'\n                break\n            case SwapType.EXCHANGE_CLICK:\n                myLog('Exchange Click')\n                break\n            default:\n                break\n        }\n\n        // myLog('*******', tradeCalcData !== undefined, coinKey === `${tradeCalcData.coinSell}-${tradeCalcData.coinBuy}`,\n        // _tradeData !== undefined, type !== undefined, !tradeData, _tradeData)\n\n        if (tradeCalcData\n            && coinKey === `${tradeCalcData.coinSell}-${tradeCalcData.coinBuy}`\n            && type\n            && _tradeData\n            && (!tradeData || (tradeData[type]?.tradeValue !== _tradeData[type]?.tradeValue))) {\n            throttleSetValue(type, _tradeData)\n        } else {\n\n            let _tradeFloat: Partial<TradeFloat> = {}\n            const hasInitialPair = pair?.coinAInfo?.simpleName && pair?.coinBInfo?.simpleName // && pair?.coinAInfo?.simpleName !== pair?.coinBInfo?.simpleName\n            let _tradeCalcData: Partial<TradeCalcData<C>> = {\n                coinSell: hasInitialPair ? pair?.coinAInfo?.simpleName : 'LRC',\n                coinBuy: hasInitialPair ? pair?.coinBInfo?.simpleName : 'ETH'\n            }\n            const sellSymbol = _tradeData?.sell.belong as string; //_tradeData?.sell.belong as string\n            const buySymbol = _tradeData?.buy.belong as string; //_tradeData?.buy.belong as string\n            \n            let coinKey = `${sellSymbol}-${buySymbol}`\n\n            if (sellSymbol && buySymbol) {\n                _tradeCalcData.coinSell = sellSymbol\n\n                if (marketMap && marketMap[coinKey]) {\n                    _tradeCalcData.coinBuy = buySymbol\n                } else {\n                    if (tokenMap && tokenMap[sellSymbol]) {\n                        // myLog(' tradePairs:', tokenMap[sellSymbol].tradePairs )\n                        if (tokenMap[sellSymbol].tradePairs.indexOf(buySymbol) >= 0) {\n                            _tradeCalcData.coinBuy = buySymbol\n                        } else {\n                            const newBuy = tokenMap[sellSymbol].tradePairs[0]\n                            if (newBuy) {\n                                _tradeCalcData.coinBuy = newBuy\n                            } else {\n                                throw Error('no such symbol!')\n                            }\n                        }\n                    } else {\n                        _tradeCalcData.coinSell='LRC'\n                        _tradeCalcData.coinBuy='ETH'\n                    }\n                }\n            }\n\n            // myLog('_tradeCalcData:', _tradeCalcData)\n\n            let {\n                amm,\n                market: market2,\n                baseShow,\n                quoteShow,\n            } = sdk.getExistedMarket(marketArray, _tradeCalcData.coinSell as string, _tradeCalcData.coinBuy as string);\n\n            if (market2) {\n\n                setTradeCalcData({ ...tradeCalcData, fee: feeBips, ..._tradeCalcData } as TradeCalcData<C>);\n                if (coinMap) {\n                    setPair({\n                        coinAInfo: coinMap[baseShow],\n                        coinBInfo: coinMap[quoteShow],\n                    })\n                    setMarket(market2)\n                }\n\n                let apiList = [];\n                //TODO wallet saga done\n                if (marketArray && amm && market && ammMap) {\n                    // let pairPromise =  usePairTitleBlock({market})\n                    apiList = [\n\n                        pairDetailBlock({ coinKey: market, ammKey: amm, ammMap })\n                    ];\n                    //HiGH: this need add websocket to update infr ticker ammpoolsbalace\n                    // @ts-ignore\n                    Promise.all([...apiList]).then(\n                        ([ { ammPoolsBalance, tickMap }]: any[]) => {\n                            setAmmPoolSnapshot(ammPoolsBalance)\n                            if (tokenMap) {\n                                let { _tradeCalcData: _td } = pairDetailDone({\n                                    coinKey: `${_tradeCalcData.coinSell}-${_tradeCalcData.coinBuy}`,\n                                    market,\n                                    ammPoolsBalance,\n                                    tickerData: tickMap[market] ? tickMap[market] : {},\n                                    tokenMap,\n                                    _tradeCalcData,\n                                    coinMap,\n                                    marketCoins,\n                                    fee: feeBips,\n                                })\n                                _tradeCalcData = _td;\n                                _tradeFloat = makeTickView(tickMap[market] ? tickMap[market] : {})\n\n                                // @ts-ignore\n                                setTradeCalcData(_tradeCalcData as TradeCalcData<C>);\n                                // @ts-ignore\n                                setTradeFloat(_tradeFloat);\n\n                                setTradeData({\n                                    sell: {\n                                        belong: _tradeCalcData.sellCoinInfoMap ? _tradeCalcData.sellCoinInfoMap[_tradeCalcData.coinSell]?.simpleName : undefined,\n                                        balance: _tradeCalcData.walletMap ? _tradeCalcData.walletMap[_tradeCalcData.coinSell]?.count : 0\n                                    },\n                                    // @ts-ignore\n                                    buy: {\n                                        belong: _tradeCalcData.sellCoinInfoMap ? _tradeCalcData.sellCoinInfoMap[_tradeCalcData.coinBuy]?.simpleName : undefined,\n                                        balance: _tradeCalcData.walletMap ? _tradeCalcData.walletMap[_tradeCalcData.coinBuy]?.count : 0\n                                    },\n                                } as SwapTradeData<IBData<C>>)\n                            }\n                        }).catch((error) => {\n                            myLog(error)\n                        })\n                }\n\n            }\n        }\n\n    }\n    \n    return {\n        swapToastOpen,\n        setSwapToastOpen,\n\n        tradeCalcData,\n        tradeFloat,\n        tradeArray,\n        myTradeArray,\n        tradeData,\n        pair,\n        marketArray,\n        onSwapClick,\n        swapBtnI18nKey,\n        swapBtnStatus:swapBtnStatus,\n        handleSwapPanelEvent,\n        updateDepth,\n    }\n\n}","import React, { useState } from \"react\"\nimport { useRouteMatch } from \"react-router-dom\"\nimport { useTokenMap } from \"stores/token\"\nimport { CoinInfo } from \"@loopring-web/common-resources\"\nimport { useCustomDCEffect } from \"./common/useCustomDCEffect\"\nimport { myLog } from \"utils/log_tools\"\nimport { getExistedMarket } from \"loopring-sdk\"\n\nexport function usePairMatch<C extends { [key: string]: any }>(path: string) {\n    const { coinMap, tokenMap, marketArray, } = useTokenMap()\n    const match: any = useRouteMatch(`${path}/:market`)\n\n    const [pair, setPair] = useState<{ coinAInfo: CoinInfo<C> | undefined, coinBInfo: CoinInfo<C> | undefined }>({ coinAInfo: undefined, coinBInfo: undefined})\n    const [market, setMarket] = useState('')\n    \n\n    React.useEffect(()=>{\n\n        if (!coinMap || !tokenMap || !marketArray) {\n            return\n        }\n\n        let market = match?.params?.market\n\n        let coinA = 'LRC'\n\n        let coinB = 'ETH'\n\n        let realMarket = `${coinA}-${coinB}`\n\n        if (market) {\n\n            const matchRes = market.match(/(\\w+)-(\\w+)/i)\n\n            if (matchRes && matchRes.length >= 3 && coinMap[matchRes[1]] && coinMap[matchRes[2]]) {\n                coinA = matchRes[1]\n                coinB = matchRes[2]\n            }\n\n            const { market: marketTemp } = getExistedMarket(marketArray, coinA, coinB)\n            realMarket = marketTemp\n\n            // myLog('-------> coinA:', coinA, ' coinB:', coinB, ' realMarket:', realMarket)\n\n        }\n\n        let coinAInfo = coinMap[coinA]\n        let coinBInfo = coinMap[coinB]\n\n        setPair({ coinAInfo, coinBInfo, })\n        setMarket(realMarket)\n    },[])\n    return {\n        market,\n        pair,\n        setPair,\n        setMarket,\n    }\n}\n","import { Box, Grid, } from '@material-ui/core'\nimport { WithTranslation, withTranslation } from 'react-i18next'\nimport BasicInfoPanel from './panel/BasicInfoPanel'\nimport TradePanel from './panel/TradePanel'\nimport styled from '@emotion/styled'\nimport { useSwapPage } from './hook'\nimport { SwapPanel, Toast } from '@loopring-web/component-lib'\n\nimport { TOAST_TIME } from 'defs/common_defs'\nimport { FixedStyle } from 'pages/styled'\nimport React, { useCallback } from 'react';\n\n\n\nexport const SwapPage = withTranslation('common')(({ ...rest }: WithTranslation) => {\n\n    const {\n        tradeCalcData,\n        tradeData,\n        tradeFloat,\n        tradeArray,\n        myTradeArray,\n        marketArray,\n        handleSwapPanelEvent,\n        onSwapClick,\n        pair,\n        swapBtnI18nKey,\n        swapBtnStatus,\n\n        swapToastOpen,\n        setSwapToastOpen,\n\n        updateDepth,\n\n    } = useSwapPage();\n\n    const onClose = React.useCallback(() => {\n        setSwapToastOpen(undefined)\n    }, [])\n    return <>\n\n        <Toast alertText={swapToastOpen?.label?? ''} severity={swapToastOpen?.type} open={swapToastOpen?.flag??false}\n               autoHideDuration={TOAST_TIME} onClose={onClose} />\n\n        <Grid container marginRight={3} alignContent={'stretch'} direction={'column'} flexWrap={'nowrap'}>\n            <BasicInfoPanel {...{\n                ...rest,\n                ...pair, marketArray,\n                tradeFloat, tradeArray\n            }} />\n            <TradePanel tradeArray={tradeArray} myTradeArray={myTradeArray} />\n        </Grid>\n\n        <Box display={'flex'} style={{ minWidth: 'var(--swap-box-width)' }}>\n            <FixedStyle>\n                <SwapPanel\n                    onRefreshData={updateDepth}\n                    tradeData={tradeData as any}\n                    tradeCalcData={tradeCalcData as any}\n                    onSwapClick={onSwapClick}\n                    swapBtnI18nKey={swapBtnI18nKey}\n                    swapBtnStatus={swapBtnStatus}\n                    {...{ handleSwapPanelEvent, ...rest }}\n                />\n            </FixedStyle>\n\n        </Box>\n\n    </>\n});\n\n\n// SwapPage\n","import React from 'react'\nimport { TransactionTable } from '@loopring-web/component-lib'\nimport { WithTranslation, withTranslation } from 'react-i18next'\nimport { StylePaper } from '../../styled'\nimport { useGetTxs } from './hooks';\n\nconst TxPanel = withTranslation('common')((rest:WithTranslation<'common'>) => {\n    const { t } = rest\n    const container = React.useRef(null);\n    const [pageSize, setPageSize] = React.useState(10);\n\n    const { txs: txTableData, isLoading } = useGetTxs()\n\n    React.useEffect(() => {\n        // @ts-ignore\n        let height = container?.current?.offsetHeight;\n        if (height) {\n            setPageSize(Math.floor((height - 120) / 44) - 2);\n        }\n    }, [container, pageSize]);\n\n    return (\n        <StylePaper ref={container}>\n            <div className=\"title\">{t('labelTxnPageTitle')}</div>\n            <div className=\"tableWrapper\">\n                <TransactionTable {...{\n                    rawData: txTableData,\n                    pagination: {\n                        pageSize: pageSize,\n                        total: txTableData.length\n                    },\n                    showFilter: true,\n                    showLoading: isLoading,\n                    getTxnList: (): any => {},\n                    ...rest\n                }} />\n            </div>\n        </StylePaper>\n    )\n})\n\nexport default TxPanel\n","import { useState, useCallback } from 'react'\n// import { useAmmpoolAPI, useUserAPI } from \"hooks/exchange/useApi\"\nimport { useCustomDCEffect } from 'hooks/common/useCustomDCEffect'\nimport { useAccount } from 'stores/account/hook'\nimport { TransactionStatus, RawDataTransactionItem } from '@loopring-web/component-lib'\nimport { volumeToCount, volumeToCountAsBigNumber } from 'hooks/help'\nimport { LoopringAPI } from 'api_wrapper'\n\nimport { TransactionTradeTypes } from '@loopring-web/component-lib';\n\nexport function useGetTxs() {\n\n    const { account: {accountId, apiKey} } = useAccount()\n\n    // const userApi = useUserAPI()\n\n    const [txs, setTxs] = useState<RawDataTransactionItem[]>([])\n    const [isLoading, setIsLoading] = useState(true)\n\n    const getTxnStatus = (status: string) => \n        status === ''\n        ? TransactionStatus.processing :\n        status === 'processed'\n            ? TransactionStatus.processed\n            : status === 'processing'\n                ? TransactionStatus.processing \n                : status === 'received' \n                    ? TransactionStatus.received \n                    : TransactionStatus.failed\n\n    const getUserTxnList = useCallback(async () => {\n        if (LoopringAPI && LoopringAPI.userAPI && accountId && apiKey) {\n            const userTxnList = await Promise.all([\n                LoopringAPI.userAPI.getUserTranferList({\n                    accountId,\n                }, apiKey),\n                LoopringAPI.userAPI.getUserDepositHistory({\n                    accountId,\n                }, apiKey),\n                LoopringAPI.userAPI.getUserOnchainWithdrawalHistory({\n                    accountId,\n                }, apiKey)\n            ])\n            const userTransferMapped = userTxnList[0].userTransfers?.map(o => ({\n                side: TransactionTradeTypes.transfer,\n                // token: o.symbol,\n                // from: o.senderAddress,\n                // to: o.receiverAddress,\n                amount: {\n                    unit: o.symbol || '',\n                    value: Number(volumeToCount(o.symbol, o.amount))\n                },\n                fee: {\n                    unit: o.feeTokenSymbol || '',\n                    value: Number(volumeToCountAsBigNumber(o.feeTokenSymbol, o.feeAmount || 0))\n                },\n                memo: o.memo || '',\n                time: o.timestamp,\n                txnHash: o.hash,\n                status: getTxnStatus(o.status),\n                // tradeType: TransactionTradeTypes.transfer\n            }))\n            const userDepositMapped = userTxnList[1].userDepositHistory?.map(o => ({\n                side: TransactionTradeTypes.deposit,\n                symbol: o.symbol,\n                // token: o.symbol,\n                // from: o.hash,\n                // to: 'My Loopring',\n                // amount: Number(volumeToCount(o.symbol, o.amount)),\n                amount: {\n                    unit: o.symbol || '',\n                    value: Number(volumeToCount(o.symbol, o.amount))\n                },\n                fee: {\n                    unit: '',\n                    value: 0\n                },\n                memo: '',\n                time: o.timestamp,\n                txnHash: o.txHash,\n                status: getTxnStatus(o.status),\n                // tradeType: TransactionTradeTypes.deposit\n            }))\n            const userWithdrawMapped = userTxnList[2].userOnchainWithdrawalHistory?.map((o => ({\n                side: TransactionTradeTypes.withdraw,\n                // token: o.symbol,\n                // from: 'My Loopring',\n                // to: o.distributeHash,\n                amount: {\n                    unit: o.symbol || '',\n                    value: Number(volumeToCount(o.symbol, o.amount))\n                },\n                fee: {\n                    unit: o.feeTokenSymbol || '',\n                    value: Number(volumeToCount(o.feeTokenSymbol, o.feeAmount || 0)?.toFixed(6))\n                },\n                memo: '',\n                time: o.timestamp,\n                txnHash: o.txHash,\n                status: getTxnStatus(o.status),\n                // tradeType: TransactionTradeTypes.withdraw\n            })))\n            const mappingList = [...userTransferMapped??[], ...userDepositMapped??[], ...userWithdrawMapped??[]]\n            const sortedMappingList = mappingList.sort((a, b) => b.time - a.time)\n            setTxs(sortedMappingList)\n            setIsLoading(false)\n        }\n    }, [accountId, apiKey])\n\n    useCustomDCEffect(() => {\n        getUserTxnList()\n    }, [getUserTxnList])\n\n    return {\n        txs,\n        isLoading\n    }\n}\n","import React from 'react'\nimport store from 'stores'\nimport { TokenType } from '@loopring-web/component-lib'\nimport { AccountStatus, EmptyValueTag, globalSetup, SagaStatus } from '@loopring-web/common-resources'\nimport { useWalletLayer2 } from 'stores/walletLayer2'\nimport { useAccount } from 'stores/account';\nimport { LoopringAPI } from 'api_wrapper'\nimport { makeWalletLayer2, volumeToCountAsBigNumber } from 'hooks/help'\nimport { AssetType, WsTopicType } from 'loopring-sdk'\nimport { volumeToCount } from 'hooks/help'\nimport { useAmmMap } from '../../../stores/Amm/AmmMap';\nimport { useSocket } from '../../../stores/socket';\nimport { useWalletHook } from '../../../services/wallet/useWalletHook';\n\nexport type TrendDataItem = {\n    timeStamp: number;\n    close: number;\n}\n\nexport type ITokenInfoItem = {\n    token: string,\n    detail: {\n        price: string,\n        symbol: string,\n        updatedAt: number\n    }\n}\n\nexport const useGetAssets = () => {\n    const [chartData, setChartData] = React.useState<TrendDataItem[]>([])\n    const [assetsList, setAssetsList] = React.useState<any[]>([])\n    \n    const { account } = useAccount();\n    const {sendSocketTopic,socketEnd} = useSocket();\n    // const {  } = store.getState().walletLayer2;\n    const { ammMap } = useAmmMap()//store.getState().amm.ammMap\n    const { walletLayer2 } = useWalletLayer2();\n    const { marketArray } = store.getState().tokenMap\n    React.useEffect(() => {\n        if(account.readyState === AccountStatus.ACTIVATED){\n            sendSocketTopic({[ WsTopicType.account ]: true});\n        }else{\n            socketEnd()\n        }\n        return ()=>{\n            socketEnd()\n        }\n    }, [account.readyState]);\n    const getUserTotalAssets = React.useCallback(async (limit: number = 7) => {\n        const userAssets = await LoopringAPI.walletAPI?.getUserAssets({\n            wallet: account.accAddress,\n            assetType: AssetType.DEX,\n            limit: limit // TODO: minium unit is day, discuss with pm later\n        })\n        if (userAssets && userAssets.userAssets.length && !!userAssets.userAssets.length) {\n            // console.log(userAssets.userAssets)\n            setChartData(userAssets.userAssets.map(o => ({\n                timeStamp: Number(o.createdAt),\n                // close: o.amount && o.amount !== NaN ? Number(o.amount) : 0\n                close: Number(o.amount)\n            })))\n        }\n    }, [account.accAddress])\n\n    const walletLayer2Callback = React.useCallback(()=>{\n        const walletMap = makeWalletLayer2()\n        const assetsKeyList = walletMap && walletMap.walletMap ? Object.keys(walletMap.walletMap) : []\n        const assetsDetailList = walletMap && walletMap.walletMap ? Object.values(walletMap.walletMap) : []\n        const list = assetsKeyList.map((key, index) => ({\n            token: key,\n            detail: assetsDetailList[index]\n        }))\n        setAssetsList(list)\n    },[])\n    useWalletHook({walletLayer2Callback})\n\n    React.useEffect(() => {\n        if (LoopringAPI && LoopringAPI.walletAPI && walletLayer2) {\n            getUserTotalAssets()\n        }\n    }, [walletLayer2])\n\n    const { faitPrices } = store.getState().system\n\n    const tokenPriceList = faitPrices ? Object.entries(faitPrices).map(o => ({\n        token: o[ 0 ],\n        detail: o[ 1 ]\n    })) as ITokenInfoItem[] : []\n\n    const formattedData = assetsList.map(item => {\n        const isLpToken = item.token.split('-')[0] === 'LP'\n        if (!isLpToken) {\n            const tokenPriceUSDT = item.token === 'DAI'\n                ? 1\n                : Number(tokenPriceList.find(o => o.token === item.token) ? tokenPriceList.find(o => o.token === item.token)?.detail.price : 0) / Number(tokenPriceList.find(o => o.token === 'USDT')?.detail.price)\n            return ({\n                name: item.token,\n                value: Number(volumeToCount(item.token, item.detail?.detail?.total as string)) * tokenPriceUSDT\n            })\n        }\n        const result = item.token.split('-')\n        result.splice(0, 1, 'AMM')\n        const ammToken = result.join('-')\n        // const ammTokenList = Object.keys(ammMap)\n        // const ammTokenPrice = ammTokenList.includes(ammToken) && ammMap[ammToken] && ammMap[ammToken].amountDollar ? (ammMap[ammToken].totalLPToken || 0) / ammMap[ammToken].amountDollar : 0\n        // const tokenValue =  ammTokenPrice * (item.detail?.count || 0)\n        let tokenValue:number  = 0;\n        if(ammMap){\n            tokenValue = ammMap[ammToken].totalLPToken as any;\n        }\n        return ({\n            name: item.token,\n            value: tokenValue\n        })\n    })\n    const total = formattedData.map(o => o.value).reduce((a, b) => a + b, 0)\n    const percentList = formattedData.map(o => ({\n        ...o,\n        value: o.value / total,\n    }))\n\n    const lpTotalData = percentList\n        .filter(o => o.name.split('-')[0] === 'LP')\n        .reduce((prev, next) => ({\n            name: 'LP-Token',\n            value: prev.value + next.value\n        }), {\n            name: 'LP-Token',\n            value: 0\n        })\n    \n    const formattedDoughnutData = percentList.filter(o => o.name.split('-')[0] === 'LP').length > 0\n        ? [...percentList.filter(o => o.name.split('-')[0] !== 'LP'), lpTotalData]\n        : percentList\n\n    const assetsRawData = assetsList.map((tokenInfo) => {\n        const tokenPriceUSDT = Number(tokenPriceList.find(o => o.token === tokenInfo.token)?.detail.price) / Number(tokenPriceList.find(o => o.token === 'USDT')?.detail.price)\n        return ({\n            token: {\n                type: tokenInfo.token.split('-')[0] === 'LP' ? TokenType.lp : TokenType.single,\n                value: tokenInfo.token\n            },\n            amount: String(Number(volumeToCount(tokenInfo.token, tokenInfo.detail?.detail.total as string)).toFixed(6)) || EmptyValueTag,\n            available: String(tokenInfo.detail?.count) || EmptyValueTag,\n            locked: String(volumeToCountAsBigNumber(tokenInfo.token, tokenInfo.detail?.detail.locked)) || EmptyValueTag,\n            smallBalance: tokenPriceUSDT * Number(volumeToCount(tokenInfo.token, tokenInfo.detail?.detail.total as string)) < 1,\n        })\n    })\n\n\n    return {\n        chartData,\n        // assetsList,\n        formattedData,\n        formattedDoughnutData,\n        assetsRawData,\n        marketArray,\n    }\n}\n","import { useCallback, useEffect, useRef, useState } from 'react'\nimport { WithTranslation, withTranslation } from 'react-i18next'\nimport { PriceTag } from '@loopring-web/common-resources'\nimport { Box, Paper, Typography } from '@material-ui/core'\nimport styled from '@emotion/styled'\nimport { useHistory } from 'react-router-dom'\nimport {\n    AssetsTable,\n    AssetTitle,\n    AssetTitleProps,\n    ChartType,\n    DoughnutChart,\n    ScaleAreaChart,\n    ToggleButtonGroup,\n    LpTokenAction,\n} from '@loopring-web/component-lib'\nimport { unit } from '@loopring-web/common-resources'\n\nimport { useModals } from 'hooks/useractions/useModals'\n\nimport store from 'stores'\nimport { StylePaper } from 'pages/styled'\nimport { useGetAssets } from './hook'\n\nconst StyledChartWrapper = styled(Box)`\n    height: 225px;\n\n    > section {\n        //position: relative;\n        //width: calc(50% - 6px);\n        //height: 100%;\n        background: var(--color-box);\n        border-radius: ${({theme}) => theme.unit}px;\n        padding: ${({theme}) => theme.unit * 2.5}px ${({theme}) => theme.unit * 3}px;\n    }\n`\n\nconst ChartWrapper = styled(Box)`\n    // background: no-repeat center;\n    // background-color: red;\n    // background-image: url('chartsDefaultDark.png');\n`\n\nconst StyledBtnGroupWrapper = styled(Box)`\n    position: absolute;\n    z-index: 10;\n    right: ${({theme}) => theme.unit * 3}px;\n    bottom: ${({theme}) => theme.unit * 2.5}px;\n`\n\nconst toggleData = [\n    // {value: '24 H', key: '24 H'},\n    {value: 'week', key: '1 W'},\n    {value: 'all', key: 'ALL'},\n]\n\nexport type ITokenInfoItem = {\n    token: string,\n    detail: {\n        price: string,\n        symbol: string,\n        updatedAt: number\n    }\n}\n\nexport type TrendDataItem = {\n    timeStamp: number;\n    close: number;\n}\n\nconst AssetPanel = withTranslation('common')(({t, ...rest}: WithTranslation) => {\n    const container = useRef(null);\n    const [pageSize, setPageSize] = useState(10);\n    const [chartPeriod, setChartPeriod] = useState('week')\n\n    const { formattedDoughnutData, assetsRawData, formattedData, chartData, marketArray } = useGetAssets()\n    const { walletLayer2 } = store.getState().walletLayer2;\n\n    useEffect(() => {\n        // @ts-ignore\n        let height = container?.current?.offsetHeight;\n        if (height) {\n            setPageSize(Math.floor((height - 120) / 44) - 1);\n        }\n    }, [container, pageSize]);\n\n    const getTokenRelatedMarketArray = useCallback((token: string) => {\n        if (!marketArray) return []\n        return marketArray.filter(market => {\n            const [coinA, coinB] = market.split('-')\n            return (token === coinA) || (token === coinB)\n        })\n    }, [marketArray])\n\n    const {\n        showDeposit,\n        showTransfer,\n        showWithdraw,\n    } = useModals()\n\n    let history = useHistory();\n\n    const onShowDeposit = useCallback((token?: any) => {\n        showDeposit(true, {\n            tradeData: {\n                balance: '',\n                belong: token\n            },\n        })\n    }, [showDeposit])\n\n    const onShowTransfer = useCallback((token?: any) => {\n        showTransfer(true, {\n            tradeData: {\n                balance: '',\n                belong: token\n            },\n        })\n    }, [showTransfer])\n\n    const onShowWithdraw = useCallback((token?: any) => {\n        showWithdraw(true, {\n            tradeData: {\n                balance: '',\n                belong: token\n            },\n        })\n    }, [showWithdraw])\n\n    const lpTokenJump = useCallback((token: string, type: LpTokenAction) => {\n        if (history) {\n            history.push(`/liquidity/pools/coinPair/${token}?type=${type}`)\n        }\n    }, [history])\n\n    const AssetTitleProps: AssetTitleProps = {\n        assetInfo: {\n            totalAsset: formattedData.map(o => o.value).reduce((prev, next) => {\n                return prev + next\n            }, 0),\n            priceTag: PriceTag.Dollar,\n        },\n        onShowDeposit,\n        onShowTransfer,\n        onShowWithdraw,\n    }\n\n    return (\n        <>\n            <Box>\n                <AssetTitle  {...{\n                    t,\n                    ...rest,\n                    ...AssetTitleProps\n                }} />\n            </Box>\n\n            {/*<div className=\"title\">{t('labelAssetsTitle')}</div>*/}\n\n            <StyledChartWrapper flexDirection={'row'} display={'flex'} justifyContent={'space-between'} alignItems={'stretch'} marginTop={2}>\n                <Box flex={1}  component={'section'} className={'MuiPaper-elevation2'} marginRight={2}>\n                        <Typography component=\"span\" color=\"textSecondary\" variant=\"body1\">{t('labelAssetsDistribution')}</Typography>\n                        <DoughnutChart data={walletLayer2 ? formattedDoughnutData : []}/>\n                </Box>\n                <Box display={'flex'} flexDirection={'column'} flex={1} component={'section'} className={'MuiPaper-elevation2'}>\n                    <Typography component=\"span\"  color=\"textSecondary\" variant=\"body1\">{t('labelTotalAssets')}</Typography>\n                    <ChartWrapper flex={1} component={'div'} />\n                    {/* <ScaleAreaChart type={ChartType.Trend} data={chartData}/>\n                    <StyledBtnGroupWrapper>\n                        <ToggleButtonGroup exclusive size=\"small\" {...{\n                            ...rest,\n                            t,\n                            data: toggleData,\n                            value: chartPeriod,\n                            setValue: setChartPeriod,\n                            // onChange: handleChartPeriodChange\n                        }} />\n                    </StyledBtnGroupWrapper> */}\n                </Box>\n            </StyledChartWrapper>\n            <StylePaper marginTop={2} ref={container} className={'MuiPaper-elevation2'}>\n                <Box className=\"tableWrapper\">\n                    <AssetsTable {...{\n                        rawData: assetsRawData,\n                        pagination: {\n                            pageSize: pageSize\n                        },\n                        showFiliter: true,\n                        onShowDeposit: onShowDeposit,\n                        onShowTransfer: onShowTransfer,\n                        onShowWithdraw: onShowWithdraw,\n                        onLpDeposit: lpTokenJump,\n                        onLpWithdraw: lpTokenJump,\n                        getMakretArrayListCallback: getTokenRelatedMarketArray,\n                        ...rest\n                    }} />\n                </Box>\n            </StylePaper>\n        </>\n    )\n})\n\nexport default AssetPanel\n","import React from \"react\";\nimport { useDispatch } from \"react-redux\"\nimport { useTranslation } from \"react-i18next\";\n\nimport { \n    setShowDeposit, \n    setShowResetAccount, \n    setShowTransfer, \n    setShowWithdraw, } from '@loopring-web/component-lib'\nimport { AccountStatus } from '@loopring-web/common-resources'\n\nimport { useAccount } from 'stores/account'\n\nexport function useModals() {\n    const dispatch = useDispatch()\n    const {account: {readyState}} = useAccount()\n    const {t} = useTranslation('common')\n    const showDeposit = React.useCallback((isShow: boolean, defaultProps?: any) => {\n\n        const isNoAccount = readyState === AccountStatus.NO_ACCOUNT\n\n        console.log('isNoAccount: ', isNoAccount, t('depositTitleAndActive'))\n        const action = {\n            isShow,\n            props: {\n                title: isNoAccount ? t('depositTitleAndActive') : t('depositTitle'),\n                description: 'depositAndActiveDescription',\n                ...defaultProps\n            },\n        }\n        dispatch(setShowDeposit(action))\n    }, [dispatch, t, readyState])\n    const showTransfer = React.useCallback((isShow: boolean, defaultProps?: any) => dispatch(setShowTransfer({\n        isShow,\n        props: {...defaultProps}\n    })), [dispatch])\n    const showWithdraw = React.useCallback((isShow: boolean, defaultProps?: any) => dispatch(setShowWithdraw({\n        isShow,\n        props: {...defaultProps}\n    })), [dispatch])\n    const showResetAccount = React.useCallback((isShow: boolean, defaultProps?: any) => dispatch(setShowResetAccount({\n        isShow,\n        props: {...defaultProps}\n    })), [dispatch])\n\n    return {\n        showDeposit,\n        showTransfer,\n        showWithdraw,\n        // ShowResetAccount,\n    }\n}","import React, { useEffect } from 'react'\nimport { TradeTable, TradeFilterTable, RawDataTradeItem } from '@loopring-web/component-lib'\nimport { WithTranslation, withTranslation } from 'react-i18next'\n// import styled from '@emotion/styled'\n// import { Box, Paper } from '@material-ui/core'\nimport { StylePaper } from '../../styled'\nimport { useGetTrades } from './hooks'\n\n// const StylePaper = styled(Box)`\n//   display: flex;\n//   flex-direction: column;\n//   width: 100%;\n//   height: 100%;\n//   flex: 1;\n//   background: var(--color-box);\n//   border-radius: ${({ theme }) => theme.unit}px;\n//   padding: 20px;\n//   margin-bottom: ${({ theme }) => 2* theme.unit}px;\n//   .title {\n//     font-family: Gilroy-Medium;\n//     font-size: ${({ theme }) => theme.unit * 3}px;\n//     line-height: 19px;\n//   }\n//\n//   .tableWrapper {\n//     display: flex;\n//     flex: 1;\n//     margin-top: 20px;\n//     border: 1px solid ${({ theme }) => theme.colorBase.borderColor};\n//     border-radius: ${({ theme }) => theme.unit}px;\n//     padding: 26px 0;\n//\n//     .rdg {\n//       flex: 1;\n//     }\n//   }\n// ` as typeof Paper;\n//\n// // side: keyof typeof TradeTypes;\n// //     amount: {\n// //         from: {\n// //             key: string;\n// //             value: number|undefined;\n// //         },\n// //         to: {\n// //             key: string;\n// //             value: number|undefined;\n// //         }\n// //     };\n// //     price:{\n// //         key:string\n// //         value:number|undefined,\n// //     }\n// //     // priceDollar: number;\n// //     // priceYuan: number;\n// //     fee: {\n// //         key: string;\n// //         value: number|undefined;\n// //     };\n// //     time: number;\n\nconst TradePanel = withTranslation('common')((rest:WithTranslation<'common'>) => {\n    const [pageSize, setPageSize] = React.useState(10);\n    const { userTrades, showLoading } = useGetTrades()\n    const container = React.useRef(null);\n    const { t } = rest\n\n    React.useEffect(() => {\n        // @ts-ignore\n        let height = container?.current?.offsetHeight;\n        if (height) {\n            setPageSize(Math.floor((height - 120) / 44) - 2);\n        }\n    }, [container, pageSize]);\n\n    return (\n        <StylePaper ref={container}>\n            <div className=\"title\">{t('labelTradePageTitle')}</div>\n            <div className=\"tableWrapper extraTradeClass\">\n                <TradeTable {...{\n                    rawData: userTrades,\n                    // pagination: {\n                    //     pageSize: pageSize\n                    // },\n                    showFilter: true,\n                    showLoading: showLoading,\n                    ...rest}}/>\n            </div>\n        </StylePaper>\n    )\n})\n\nexport default TradePanel\n","import React from 'react'\n\nimport { useCustomDCEffect } from 'hooks/common/useCustomDCEffect'\nimport { useAccount } from 'stores/account/hook'\nimport { TransactionStatus, RawDataTransactionItem, RawDataTradeItem } from '@loopring-web/component-lib'\n\nimport { FilledType, TxStatus, UserTrade } from 'loopring-sdk'\nimport { TransactionTradeTypes } from '@loopring-web/component-lib';\nimport { LoopringAPI } from 'api_wrapper'\nimport store from 'stores'\nimport { TradeTypes } from '@loopring-web/common-resources'\nimport { toBig, Side } from 'loopring-sdk'\nimport { volumeToCount, volumeToCountAsBigNumber } from 'hooks/help'\n\nexport function useGetTrades() {\n    const [userTrades, setUserTrades] = React.useState<RawDataTradeItem[]>([])\n    const [showLoading, setShowLoading] = React.useState(true)\n    const { account:{accountId, apiKey} } = useAccount()\n\n    const tokenMap = store.getState().tokenMap.tokenMap\n\n    const getUserTradeList = React.useCallback(async () => {\n        if (LoopringAPI && LoopringAPI.userAPI && accountId && apiKey && tokenMap) {\n            const userTrades = await LoopringAPI.userAPI.getUserTrades({\n                accountId,\n            }, apiKey)\n\n            if (userTrades && userTrades.userTrades) {\n                // @ts-ignore\n                setUserTrades(userTrades.userTrades.map(o => {\n                    const marketList = o.market.split('-')\n                    // due to AMM case, we cannot use first index\n                    const side = o.side === Side.Buy ? TradeTypes.Buy : TradeTypes.Sell\n                    const tokenFirst = marketList[marketList.length - 2]\n                    const tokenLast = marketList[marketList.length - 1]\n                    const baseToken = side === TradeTypes.Buy ? tokenFirst : tokenLast\n                    const quoteToken = side === TradeTypes.Buy ? tokenLast : tokenFirst\n\n                    // const amt = toBig(o.volume).times(o.price).toString()\n\n                    const feeKey = o.side === Side.Buy ? baseToken : quoteToken\n\n                    return ({\n                        side: side,\n                        price: {\n                            key: baseToken,\n                            // value: StringToNumberWithPrecision(o.price, baseToken)\n                            value: toBig(o.price).toNumber()\n                        },\n                        fee: {\n                            key: feeKey,\n                            // value: VolToNumberWithPrecision(o.fee, quoteToken),\n                            value: feeKey ? volumeToCount(feeKey, o.fee)?.toFixed(6) : undefined\n                        },\n                        time: Number(o.tradeTime),\n                        amount: {\n                            from: {\n                            key: baseToken,\n                            // value: VolToNumberWithPrecision(o.volume, baseToken),\n                            value: baseToken ? volumeToCount(baseToken, o.volume) : undefined\n                            },\n                            to: {\n                            key: quoteToken,\n                            // value: VolToNumberWithPrecision(amt, quoteToken)\n                            value: baseToken ? volumeToCountAsBigNumber(baseToken, o.volume)?.times(o.price).toNumber() : undefined\n                            }\n                        }\n                    })\n                }))\n                setShowLoading(false)\n            }\n        }\n    }, [accountId, apiKey, tokenMap])\n\n    React.useEffect(() => {\n        getUserTradeList()\n    }, [getUserTradeList])\n\n    // useCustomDCEffect(async() => {\n\n    //     if (!LoopringAPI.userAPI || !accountId || !apiKey) {\n    //         return\n    //     }\n\n    //     const response = await LoopringAPI.userAPI.getUserTrades({accountId: accountId}, apiKey)\n\n    //     let userTrades: RawDataTradeItem[] = []\n\n    //     response.userTrades.forEach((item: UserTrade, index: number) => {\n    //     })\n\n    //     setUserTrades(userTrades)\n\n    // }, [accountId, apiKey, LoopringAPI.userAPI])\n\n    return {\n        userTrades,\n        showLoading,\n    }\n}\n","import React, { useEffect } from 'react'\nimport { RawDataAmmItem, AmmTable, AmmSideTypes } from '@loopring-web/component-lib'\nimport { WithTranslation, withTranslation } from 'react-i18next'\nimport store from 'stores'\nimport { LoopringAPI } from 'api_wrapper'\nimport { AmmTxType } from 'loopring-sdk'\nimport { StylePaper } from '../../styled'\nimport { volumeToCount } from '../../../hooks/help';\nimport { useGetAmmRecord } from'./hook'\n\nconst AmmPanel = withTranslation('common')(({ t, ...rest }: WithTranslation<'common'>) => {\n    const container = React.useRef(null);\n    const [pageSize, setPageSize] = React.useState(10);\n    const { ammRecordList, showLoading } = useGetAmmRecord()\n\n    React.useEffect(() => {\n        // @ts-ignore\n        let height = container?.current?.offsetHeight;\n        if (height) {\n            setPageSize(Math.floor((height - 120) / 44) - 2);\n        }\n    }, [container, pageSize]);\n\n    return (\n        <>\n            <StylePaper ref={container} className={'MuiPaper-elevation2'}>\n                <div className=\"title\">{t('labelAmmPageTitle')}</div>\n                <div className=\"tableWrapper\">\n                    <AmmTable {...{\n                        rawData: ammRecordList,\n                        pagination: {\n                            pageSize: pageSize\n                        },\n                        showFilter: true,\n                        showLoading: showLoading,\n                        ...rest}}/>\n                </div>\n            </StylePaper>\n        </>\n    )\n})\n\nexport default AmmPanel\n","import React, { useEffect } from 'react'\nimport { RawDataAmmItem, AmmSideTypes } from '@loopring-web/component-lib'\nimport store from 'stores'\nimport { LoopringAPI } from 'api_wrapper'\nimport { AmmTxType } from 'loopring-sdk'\nimport { volumeToCount } from '../../../hooks/help';\n\nexport function useGetAmmRecord() {\n    const [ammRecordList, setAmmRecordList] = React.useState<RawDataAmmItem[]>([])\n    const [showLoading, setShowLoading] = React.useState(true)\n    const { accountId,apiKey } = store.getState().account;\n    const { tokenMap } = store.getState().tokenMap\n\n    const getTokenName = React.useCallback((tokenId?: number) => {\n        if (tokenMap) {\n            const keys = Object.keys(tokenMap)\n            const values = Object.values(tokenMap)\n            const index = values.findIndex(o => o.tokenId === tokenId)\n            if (index > -1) {\n                return keys[index]\n            }\n            return ''\n        }\n        return ''\n    }, [tokenMap])\n\n    const getAmmpoolList = React.useCallback(async () => {\n        if (LoopringAPI.ammpoolAPI && accountId && apiKey) {\n            const ammpool = await LoopringAPI.ammpoolAPI.getUserAmmPoolTxs({\n                accountId,\n            }, apiKey)\n            if (ammpool && ammpool.userAmmPoolTxs) {\n                const result = ammpool.userAmmPoolTxs.map(o => ({\n                    side: o.txType === AmmTxType.JOIN ? AmmSideTypes.Join : AmmSideTypes.Exit,\n                    amount: {\n                        from: {\n                            key: getTokenName(o.poolTokens[0]?.tokenId),\n                            value: String(volumeToCount(getTokenName(o.poolTokens[0]?.tokenId), o.poolTokens[0]?.actualAmount))\n                        },\n                        to: {\n                            key: getTokenName(o.poolTokens[1]?.tokenId),\n                            value: String(volumeToCount(getTokenName(o.poolTokens[1]?.tokenId), o.poolTokens[1]?.actualAmount))\n                        }\n                    },\n                    lpTokenAmount: String(volumeToCount(getTokenName(o.lpToken?.tokenId), o.lpToken?.actualAmount)),\n                    fee: {\n                        key: getTokenName(o.poolTokens[1]?.tokenId),\n                        value: volumeToCount(getTokenName(o.poolTokens[1]?.tokenId), o.poolTokens[1]?.feeAmount)?.toFixed(6)\n                    },\n                    time: o.updatedAt\n                }))\n                setAmmRecordList(result)\n                setShowLoading(false)\n            }\n        }\n    }, [accountId, apiKey, getTokenName])\n    \n    useEffect(() => {\n        getAmmpoolList()\n    }, [getAmmpoolList])\n\n    return  {\n        ammRecordList,\n        showLoading,\n    }\n}\n\n","import React, { useEffect } from 'react'\nimport { WithTranslation, withTranslation } from 'react-i18next'\nimport { Tabs, Tab, Box } from '@material-ui/core'\nimport { TransactionTable, TradeTable, AmmTable } from '@loopring-web/component-lib'\nimport { StylePaper } from '../../styled'\nimport { useGetTxs, useGetTrades, useGetAmmRecord } from './hooks';\n\nconst TxPanel = withTranslation('common')((rest:WithTranslation<'common'>) => {\n    const [pageSize, setPageSize] = React.useState(0);\n    const [currentTab, setCurrentTab] = React.useState('transactions')\n\n    const { txs: txTableData, txsTotal, showLoading: showTxsLoading, getUserTxnList } = useGetTxs()\n    const { userTrades, showLoading: showTradesLoading} = useGetTrades()\n    const { ammRecordList, showLoading: ammLoading } = useGetAmmRecord()\n\n    const { t } = rest\n    const container = React.useRef(null);\n\n    React.useEffect(() => {\n        // @ts-ignore\n        let height = container?.current?.offsetHeight;\n        if (height) {\n            setPageSize(Math.floor((height - 120) / 44) - 2);\n        }\n    }, [container, pageSize]);\n\n    useEffect(() => {\n        if (pageSize) {\n            getUserTxnList({\n                limit: pageSize,\n            })\n        }\n    }, [getUserTxnList, pageSize])\n\n    return (\n        <StylePaper ref={container}>\n            <Box marginTop={2} marginLeft={2}>\n                <Tabs value={currentTab} onChange={(_event, value) => setCurrentTab(value)} aria-label=\"l2-history-tabs\">\n                    <Tab label={t('labelLayer2HistoryTransactions')} value=\"transactions\"></Tab>\n                    <Tab label={t('labelLayer2HistoryTrades')} value=\"trades\"></Tab>\n                    <Tab label={t('labelLayer2HistoryAmmRecords')} value=\"ammRecords\"></Tab>\n                </Tabs>\n            </Box>\n            <div className=\"tableWrapper\">\n                {currentTab === 'transactions' ? (\n                    <TransactionTable {...{\n                        rawData: txTableData,\n                        pagination: {\n                            pageSize: pageSize,\n                            total: txsTotal,\n                        },\n                        showFilter: true,\n                        showLoading: showTxsLoading,\n                        getTxnList: getUserTxnList,\n                        ...rest\n                    }} />\n                ) : currentTab === 'trades' ? (\n                    <TradeTable {...{\n                        rawData: userTrades,\n                        // pagination: {\n                        //     pageSize: pageSize\n                        // },\n                        showFilter: true,\n                        showLoading: showTradesLoading,\n                        ...rest}}/>\n                ) : (\n                    // <AmmRecordTable rawData={myAmmMarketArray} handlePageChange={_handlePageChange} page={page}/>\n                    <AmmTable {...{\n                        rawData: ammRecordList,\n                        pagination: {\n                            pageSize: pageSize\n                        },\n                        showFilter: true,\n                        showLoading: ammLoading,\n                        ...rest}}/>\n                ) }\n            </div>\n        </StylePaper>\n    )\n})\n\nexport default TxPanel\n","import React from 'react'\nimport { useState, useCallback } from 'react'\nimport { useCustomDCEffect } from 'hooks/common/useCustomDCEffect'\nimport { useAccount } from 'stores/account/hook'\nimport { TransactionStatus, RawDataTransactionItem, RawDataTradeItem, RawDataAmmItem, AmmSideTypes } from '@loopring-web/component-lib'\nimport { volumeToCount, volumeToCountAsBigNumber } from 'hooks/help'\nimport { LoopringAPI } from 'api_wrapper'\nimport store from 'stores'\nimport { TradeTypes } from '@loopring-web/common-resources'\nimport { toBig, Side, AmmTxType, UserTxTypes } from 'loopring-sdk'\n\nimport { TransactionTradeTypes } from '@loopring-web/component-lib';\n\nexport type TxsFilterProps = {\n    // accountId: number;\n    tokenSymbol?: string;\n    start?: number;\n    end?: number;\n    offset?: number;\n    limit?: number;\n    types?: UserTxTypes[] | string;\n}\n\nexport function useGetTxs() {\n\n    const { account: {accountId, apiKey} } = useAccount()\n\n    const [txs, setTxs] = useState<RawDataTransactionItem[]>([])\n    const [txsTotal, setTxsTotal] = useState(0)\n    const [showLoading, setShowLoading] = useState(false)\n\n    const getTxnStatus = (status: string) => \n        status === ''\n        ? TransactionStatus.processing :\n        status === 'processed'\n            ? TransactionStatus.processed\n            : status === 'processing'\n                ? TransactionStatus.processing \n                : status === 'received' \n                    ? TransactionStatus.received \n                    : TransactionStatus.failed\n\n    const getUserTxnList = useCallback(async ({\n        tokenSymbol,\n        start,\n        end,\n        limit,\n        offset,\n        types,\n    }: TxsFilterProps) => {\n        if (LoopringAPI && LoopringAPI.userAPI && accountId && apiKey) {\n            // const userTxnList = await Promise.all([\n            //     LoopringAPI.userAPI.getUserTranferList({\n            //         accountId,\n            //     }, apiKey),\n            //     LoopringAPI.userAPI.getUserDepositHistory({\n            //         accountId,\n            //     }, apiKey),\n            //     LoopringAPI.userAPI.getUserOnchainWithdrawalHistory({\n            //         accountId,\n            //     }, apiKey)\n            // ])\n            setShowLoading(true)\n            const userTxnList = await LoopringAPI.userAPI.getUserTxs({\n                accountId,\n                limit,\n                tokenSymbol,\n                start,\n                end,\n                offset,\n                types,\n            }, apiKey)\n            \n            const formattedList = userTxnList.userTxs.map(o => ({\n                ...o,\n                side: o.txType as any,\n                amount: {\n                    unit: o.symbol || '',\n                    value: Number(volumeToCount(o.symbol, o.amount))\n                },\n                fee: {\n                    unit: o.feeTokenSymbol || '',\n                    value: Number(volumeToCountAsBigNumber(o.feeTokenSymbol, o.feeAmount || 0))\n                },\n                memo: o.memo || '',\n                time: o.timestamp,\n                txnHash: o.hash,\n                status: getTxnStatus(o.status),\n            }))\n            setTxs(formattedList)\n            setTxsTotal(userTxnList.totalNum)\n            setShowLoading(false)\n        //     const userTransferMapped = userTxnList[0].userTransfers?.map(o => ({\n        //         side: TransactionTradeTypes.transfer,\n        //         // token: o.symbol,\n        //         // from: o.senderAddress,\n        //         // to: o.receiverAddress,\n        //         amount: {\n        //             unit: o.symbol || '',\n        //             value: Number(volumeToCount(o.symbol, o.amount))\n        //         },\n        //         fee: {\n        //             unit: o.feeTokenSymbol || '',\n        //             value: Number(volumeToCountAsBigNumber(o.feeTokenSymbol, o.feeAmount || 0))\n        //         },\n        //         memo: o.memo || '',\n        //         time: o.timestamp,\n        //         txnHash: o.hash,\n        //         status: getTxnStatus(o.status),\n        //         // tradeType: TransactionTradeTypes.transfer\n        //     }))\n        //     const userDepositMapped = userTxnList[1].userDepositHistory?.map(o => ({\n        //         side: TransactionTradeTypes.deposit,\n        //         symbol: o.symbol,\n        //         // token: o.symbol,\n        //         // from: o.hash,\n        //         // to: 'My Loopring',\n        //         // amount: Number(volumeToCount(o.symbol, o.amount)),\n        //         amount: {\n        //             unit: o.symbol || '',\n        //             value: Number(volumeToCount(o.symbol, o.amount))\n        //         },\n        //         fee: {\n        //             unit: '',\n        //             value: 0\n        //         },\n        //         memo: '',\n        //         time: o.timestamp,\n        //         txnHash: o.txHash,\n        //         status: getTxnStatus(o.status),\n        //         // tradeType: TransactionTradeTypes.deposit\n        //     }))\n        //     const userWithdrawMapped = userTxnList[2].userOnchainWithdrawalHistory?.map((o => ({\n        //         side: TransactionTradeTypes.withdraw,\n        //         // token: o.symbol,\n        //         // from: 'My Loopring',\n        //         // to: o.distributeHash,\n        //         amount: {\n        //             unit: o.symbol || '',\n        //             value: Number(volumeToCount(o.symbol, o.amount))\n        //         },\n        //         fee: {\n        //             unit: o.feeTokenSymbol || '',\n        //             value: Number(volumeToCount(o.feeTokenSymbol, o.feeAmount || 0)?.toFixed(6))\n        //         },\n        //         memo: '',\n        //         time: o.timestamp,\n        //         txnHash: o.txHash,\n        //         status: getTxnStatus(o.status),\n        //         // tradeType: TransactionTradeTypes.withdraw\n        //     })))\n        //     const mappingList = [...userTransferMapped??[], ...userDepositMapped??[], ...userWithdrawMapped??[]]\n        //     const sortedMappingList = mappingList.sort((a, b) => b.time - a.time)\n        //     setTxs(sortedMappingList)\n        //     setIsLoading(false)\n        // }\n        }\n    }, [accountId, apiKey])\n\n    // useCustomDCEffect(() => {\n    //     getUserTxnList()\n    // }, [getUserTxnList])\n\n    return {\n        txs,\n        txsTotal,\n        showLoading,\n        getUserTxnList\n    }\n}\n\nexport function useGetTrades() {\n    const [userTrades, setUserTrades] = React.useState<RawDataTradeItem[]>([])\n    const [showLoading, setShowLoading] = React.useState(true)\n    const { account:{accountId, apiKey} } = useAccount()\n\n    const tokenMap = store.getState().tokenMap.tokenMap\n\n    const getUserTradeList = React.useCallback(async () => {\n        if (LoopringAPI && LoopringAPI.userAPI && accountId && apiKey && tokenMap) {\n            const userTrades = await LoopringAPI.userAPI.getUserTrades({\n                accountId,\n            }, apiKey)\n\n            if (userTrades && userTrades.userTrades) {\n                // @ts-ignore\n                setUserTrades(userTrades.userTrades.map(o => {\n                    const marketList = o.market.split('-')\n                    // due to AMM case, we cannot use first index\n                    const side = o.side === Side.Buy ? TradeTypes.Buy : TradeTypes.Sell\n                    const isBuy = side === TradeTypes.Buy\n                    const tokenFirst = marketList[marketList.length - 2]\n                    const tokenLast = marketList[marketList.length - 1]\n                    const baseToken = isBuy ? tokenLast : tokenFirst\n                    const quoteToken = isBuy ? tokenFirst : tokenLast\n                    const feeKey = isBuy ? quoteToken : baseToken\n                    const baseValue = isBuy ? volumeToCountAsBigNumber(quoteToken, o.volume)?.times(o.price).toNumber() : volumeToCountAsBigNumber(baseToken, o.volume)\n                    const quoteValue = isBuy ? volumeToCountAsBigNumber(quoteToken, o.volume) : volumeToCountAsBigNumber(baseToken, o.volume)?.times(o.price).toNumber()\n                    const feeValue = volumeToCountAsBigNumber(feeKey, o.fee)?.toFixed(6)\n\n                    return ({\n                        side: o.side === Side.Buy ? TradeTypes.Buy : TradeTypes.Sell ,\n                        price: {\n                            key: baseToken,\n                            // value: StringToNumberWithPrecision(o.price, baseToken)\n                            value: toBig(o.price).toNumber()\n                        },\n                        fee: {\n                            key: feeKey,\n                            // value: VolToNumberWithPrecision(o.fee, quoteToken),\n                            // value: feeKey ? volumeToCount(feeKey, o.fee)?.toFixed(6) : undefined\n                            value: feeKey ? feeValue : undefined\n                        },\n                        time: Number(o.tradeTime),\n                        amount: {\n                            from: {\n                            key: baseToken,\n                            // value: VolToNumberWithPrecision(o.volume, baseToken),\n                            // value: baseToken ? volumeToCount(baseToken, o.volume) : undefined\n                            value: baseToken ? baseValue : undefined\n                            },\n                            to: {\n                            key: quoteToken,\n                            // value: VolToNumberWithPrecision(amt, quoteToken)\n                            // value: baseToken ? volumeToCountAsBigNumber(baseToken, o.volume)?.times(o.price).toNumber() : undefined\n                            value: baseToken ? quoteValue : undefined\n                            }\n                        }\n                    })\n                }))\n                setShowLoading(false)\n            }\n        }\n    }, [accountId, apiKey, tokenMap])\n\n    React.useEffect(() => {\n        getUserTradeList()\n    }, [getUserTradeList])\n\n    // useCustomDCEffect(async() => {\n\n    //     if (!LoopringAPI.userAPI || !accountId || !apiKey) {\n    //         return\n    //     }\n\n    //     const response = await LoopringAPI.userAPI.getUserTrades({accountId: accountId}, apiKey)\n\n    //     let userTrades: RawDataTradeItem[] = []\n\n    //     response.userTrades.forEach((item: UserTrade, index: number) => {\n    //     })\n\n    //     setUserTrades(userTrades)\n\n    // }, [accountId, apiKey, LoopringAPI.userAPI])\n\n    return {\n        userTrades,\n        showLoading,\n    }\n}\n\nexport function useGetAmmRecord() {\n    const [ammRecordList, setAmmRecordList] = React.useState<RawDataAmmItem[]>([])\n    const [showLoading, setShowLoading] = React.useState(true)\n    const { accountId,apiKey } = store.getState().account;\n    const { tokenMap } = store.getState().tokenMap\n\n    const getTokenName = React.useCallback((tokenId?: number) => {\n        if (tokenMap) {\n            const keys = Object.keys(tokenMap)\n            const values = Object.values(tokenMap)\n            const index = values.findIndex(o => o.tokenId === tokenId)\n            if (index > -1) {\n                return keys[index]\n            }\n            return ''\n        }\n        return ''\n    }, [tokenMap])\n\n    const getAmmpoolList = React.useCallback(async () => {\n        if (LoopringAPI.ammpoolAPI && accountId && apiKey) {\n            const ammpool = await LoopringAPI.ammpoolAPI.getUserAmmPoolTxs({\n                accountId,\n            }, apiKey)\n            if (ammpool && ammpool.userAmmPoolTxs) {\n                const result = ammpool.userAmmPoolTxs.map(o => ({\n                    side: o.txType === AmmTxType.JOIN ? AmmSideTypes.Join : AmmSideTypes.Exit,\n                    amount: {\n                        from: {\n                            key: getTokenName(o.poolTokens[0]?.tokenId),\n                            value: String(volumeToCount(getTokenName(o.poolTokens[0]?.tokenId), o.poolTokens[0]?.actualAmount))\n                        },\n                        to: {\n                            key: getTokenName(o.poolTokens[1]?.tokenId),\n                            value: String(volumeToCount(getTokenName(o.poolTokens[1]?.tokenId), o.poolTokens[1]?.actualAmount))\n                        }\n                    },\n                    lpTokenAmount: String(volumeToCount(getTokenName(o.lpToken?.tokenId), o.lpToken?.actualAmount)),\n                    fee: {\n                        key: getTokenName(o.poolTokens[1]?.tokenId),\n                        value: volumeToCount(getTokenName(o.poolTokens[1]?.tokenId), o.poolTokens[1]?.feeAmount)?.toFixed(6)\n                    },\n                    time: o.updatedAt\n                }))\n                setAmmRecordList(result)\n                setShowLoading(false)\n            }\n        }\n    }, [accountId, apiKey, getTokenName])\n    \n    React.useEffect(() => {\n        getAmmpoolList()\n    }, [getAmmpoolList])\n\n    return  {\n        ammRecordList,\n        showLoading,\n    }\n}\n","\nimport React from 'react'\nimport { OrderHistoryTable } from '@loopring-web/component-lib'\nimport { WithTranslation, withTranslation } from 'react-i18next'\nimport { useOrderList } from './hook'\nimport { StylePaper } from '../../styled'\n\nconst OrderPanel = withTranslation('common')((rest: WithTranslation) => {\n    const container = React.useRef(null);\n    const [pageSize, setPageSize] = React.useState(10);\n    const { rawData, getOrderList, totalNum, showLoading, marketArray } = useOrderList()\n\n    React.useEffect(() => {\n        // @ts-ignore\n        let height = container?.current?.offsetHeight;\n        if (height) {\n            setPageSize(Math.floor((height - 120) / 44) - 2);\n        }\n    }, [container, pageSize]);\n\n    return (\n        <>\n            <StylePaper ref={container}>\n                {/*<div className=\"title\">{rest.t('Orders History')}</div>*/}\n                <div className=\"tableWrapper\">\n                    <OrderHistoryTable {...{\n                        pagination: {\n                            pageSize: pageSize,\n                            total: totalNum,\n                        },\n                        rawData: rawData,\n                        showFilter: true,\n                        getOrderList,\n                        showLoading,\n                        marketArray,\n                        ...rest\n                    }} />\n                </div>\n            </StylePaper>\n        </>\n    )\n})\n\nexport default OrderPanel\n","import React from 'react'\nimport { TradeTypes, TradeStatus } from '@loopring-web/common-resources'\nimport { OrderHistoryRawDataItem } from '@loopring-web/component-lib'\nimport { useAccount } from 'stores/account';\nimport { LoopringAPI } from 'api_wrapper'\nimport { volumeToCount, volumeToCountAsBigNumber } from 'hooks/help'\nimport { GetOrdersRequest, Side } from 'loopring-sdk'\nimport store from 'stores'\n\nexport const useOrderList = () => {\n    const [orderOriginalData, setOrderOriginalData] = React.useState<OrderHistoryRawDataItem[]>([])\n    const [totalNum, setTotalNum] = React.useState(0)\n    const [showLoading, setShowLoading] = React.useState(false)\n    const { account: {accountId, apiKey} } = useAccount()\n    const { tokenMap: { marketArray } } = store.getState()\n    const { ammMap: { ammMap } } = store.getState().amm\n\n    const ammPairList = ammMap \n        ? Object.keys(ammMap)\n        : []\n    const jointPairs = (marketArray || []).concat(ammPairList)\n\n    const getOrderList = React.useCallback(async (props: Omit<GetOrdersRequest, 'accountId'> ) => {\n        if (LoopringAPI && LoopringAPI.userAPI && accountId && apiKey) {\n            setShowLoading(true)\n            const userOrders = await LoopringAPI.userAPI.getOrders({\n                ...props,\n                accountId,\n            }, apiKey)\n            if (userOrders && Array.isArray(userOrders.orders)) {\n                setTotalNum(userOrders.totalNum)\n                setOrderOriginalData(userOrders.orders.map(o => {\n                    const { baseAmount, quoteAmount, baseFilled, quoteFilled } = o.volumes\n\n                    const marketList = o.market.split('-')\n                    // due to AMM case, we cannot use first index\n                    const side = o.side === Side.Buy ? TradeTypes.Buy : TradeTypes.Sell\n                    const isBuy = side === TradeTypes.Buy\n                    const tokenFirst = marketList[marketList.length - 2]\n                    const tokenLast = marketList[marketList.length - 1]\n                    const baseToken = isBuy ? tokenLast : tokenFirst\n                    const quoteToken = isBuy ? tokenFirst : tokenLast\n                    const baseValue = isBuy ? volumeToCountAsBigNumber(quoteToken, quoteAmount)?.times(o.price).toNumber() : volumeToCountAsBigNumber(baseToken, baseAmount)\n                    const quoteValue = isBuy ? volumeToCountAsBigNumber(quoteToken, quoteAmount) : volumeToCountAsBigNumber(baseToken, baseAmount)?.times(o.price).toNumber()\n\n                    return ({\n                        market: o.market,\n                        side: o.side === 'BUY' ? TradeTypes.Buy : TradeTypes.Sell,\n                        orderType: o.orderType,\n                        amount: {\n                            from: {\n                                key: baseToken,\n                                value: Number(baseValue)\n                            },\n                            to: {\n                                key: quoteToken,\n                                value: Number(quoteValue)\n                            }\n                        },\n                        // average: Number(o.price),\n                        average: Number(volumeToCount(quoteToken, quoteFilled)) / Number(volumeToCount(baseToken, baseFilled)),\n                        // filledAmount: {\n                        //     from: {\n                        //         key: baseToken,\n                        //         // value: Number(baseFilled)\n                        //         value: Number(volumeToCount(baseToken, baseFilled))\n                        //     },\n                        //     to: {\n                        //         key: quoteToken,\n                        //         value: Number(volumeToCount(quoteToken, quoteFilled))\n                        //     }\n                        // },\n                        price: {\n                            key: quoteToken,\n                            value: Number(o.price)\n                        },\n                        time: o.validity.start * 1000,\n                        status: o.status as unknown as TradeStatus,\n                        detailTable: []\n                    })\n                }))\n            }\n            setShowLoading(false)\n        }\n    }, [accountId, apiKey])\n\n    React.useEffect(() => {\n        getOrderList({})\n    }, [getOrderList])\n\n    return {\n        marketArray: jointPairs,\n        getOrderList,\n        rawData: orderOriginalData,\n        totalNum,\n        showLoading,\n    }\n}\n\n","import { AmmPoolActivityRule, LoopringMap } from 'loopring-sdk';\nimport React from 'react';\nimport { AmmRecordRow, MyPoolRow } from '@loopring-web/component-lib';\nimport { makeWalletLayer2, WalletMapExtend } from '../../../hooks/help/makeWallet';\nimport {\n    getUserAmmTransaction,\n    makeMyAmmMarketArray,\n    makeMyPoolRowWithPoolState,\n    makeSummaryMyAmm,\n    SummaryMyAmm\n} from '../../../hooks/help';\nimport { useTokenMap } from '../../../stores/token';\nimport { useWalletLayer2 } from '../../../stores/walletLayer2';\nimport { useUserRewards } from '../../../stores/userRewards';\nimport { useAmmMap } from '../../../stores/Amm/AmmMap';\nimport { SagaStatus } from '@loopring-web/common-resources';\nimport { useWalletHook } from '../../../services/wallet/useWalletHook';\n\n\nexport const useOverview = <R extends { [ key: string ]: any }, I extends { [ key: string ]: any }>(\n    {\n        ammActivityMap\n    }: { ammActivityMap: LoopringMap<LoopringMap<AmmPoolActivityRule[]>> | undefined }\n): {\n    myAmmMarketArray: AmmRecordRow<R>[],\n    summaryReward: SummaryMyAmm | undefined,\n    myPoolRow: MyPoolRow<R>[]\n    // ammActivityViewMap: Array<AmmCardProps<I>>,\n    // ammActivityPastViewMap: Array<AmmCardProps<I>>\n} => {\n    // const {walletLayer2, status: walletLayer2Status} = useWalletLayer2();\n    const {status: userRewardsStatus,userRewardsMap} = useUserRewards();\n    const {marketArray} = useTokenMap();\n    const {status: ammMapStatus,ammMap} = useAmmMap();\n\n    // const [walletMap, setWalletMap] = React.useState<WalletMapExtend<R> | undefined>(undefined);\n    const [summaryReward, setSummaryReward] = React.useState<SummaryMyAmm | undefined>(undefined);\n    const [myPoolRow, setMyPoolRow] = React.useState<MyPoolRow<R>[]>([])\n    const [myAmmMarketArray, setMyAmmMarketArray] = React.useState<AmmRecordRow<R>[]>([]);\n    // const [ammUserRewardMap, setAmmUserRewardMap] = React.useState<AmmUserRewardMap|undefined>(undefined);\n    // const [snapShotData,setSnapShotData] = React.useState<{\n    //     tickerData: TickerData|undefined\n    //     ammPoolsBalance: AmmPoolSnapshot|undefined\n    // }|undefined>(undefined);\n    const walletLayer2DoIt = React.useCallback(() => {\n        const {walletMap: _walletMap} = makeWalletLayer2();\n        // setWalletMap(_walletMap as WalletMapExtend<any>)\n        if (_walletMap) {\n            getUserAmmTransaction()?.then((marketTrades) => {\n                let _myTradeArray = makeMyAmmMarketArray(undefined, marketTrades)\n                setMyAmmMarketArray(_myTradeArray ? _myTradeArray : [])\n            })\n        }\n        return _walletMap\n    }, [makeWalletLayer2, getUserAmmTransaction, makeMyAmmMarketArray, marketArray])\n    const makeMyPoolRow = React.useCallback((_walletMap): MyPoolRow<R>[] => {\n        if (_walletMap && ammMap) {\n            // @ts-ignore\n            const _myPoolRow: MyPoolRow<R>[] = Reflect.ownKeys(_walletMap).reduce((prev: MyPoolRow<R>[], walletKey: string) => {\n                if (/LP-/i.test(walletKey)) {\n                    const ammKey = walletKey.replace('LP-', 'AMM-');\n                    const marketKey = walletKey.replace('LP-', '');\n                    let rowData: MyPoolRow<R> | undefined;\n                    //TODO：websocket open\n                    //  if(ammPoolSnapShots)\n                    // makeData by snapshot else\n                    // else\n\n                    rowData = makeMyPoolRowWithPoolState(\n                        {\n                            ammDetail: ammMap[ ammKey ],\n                            walletMap: _walletMap,\n                            market: marketKey,\n                            ammUserRewardMap: userRewardsMap\n                        }\n                    ) as any\n                    if (rowData !== undefined) {\n                        prev.push(rowData);\n                    }\n                }\n                return prev\n            }, [] as MyPoolRow<R>[])\n            // console.log('rowData',_myPoolRow);\n            return _myPoolRow;\n        }\n        return [];\n    }, [ammMap, userRewardsMap])\n\n    // React.useEffect(() => {\n    //     if (walletLayer2) {\n    //         const _walletMap = walletLayer2DoIt();\n    //         if (ammMap) {\n    //             const _myPoolRow = makeMyPoolRow(_walletMap)\n    //             setMyPoolRow(_myPoolRow)\n    //         }\n    //     }\n    // }, []);\n    // const {walletLayer2, status: walletLayer2Status} = useWalletLayer2();\n    const walletLayer2Callback =React.useCallback(()=>{\n        if(ammMap) {\n            const _walletMap = walletLayer2DoIt();\n            const _myPoolRow = makeMyPoolRow(_walletMap);\n            setMyPoolRow(_myPoolRow)\n        }\n    },[ammMap])\n    useWalletHook({walletLayer2Callback})\n\n\n    React.useEffect(() => {\n        if (ammMapStatus === SagaStatus.UNSET) {\n            walletLayer2Callback()\n        }\n    }, [ammMapStatus])\n\n    React.useEffect(() => {\n        if (userRewardsStatus === SagaStatus.UNSET) {\n            const summaryReward = makeSummaryMyAmm({userRewardsMap});\n            setSummaryReward(summaryReward);\n            walletLayer2Callback()\n        }\n    }, [userRewardsStatus])\n    return {\n        myAmmMarketArray,\n        summaryReward,\n        myPoolRow,\n        // ammActivityViewMap,\n        // ammActivityPastViewMap\n    }\n\n}\n","import React from 'react'\nimport styled from '@emotion/styled'\nimport { Box, Grid, Typography } from '@material-ui/core'\nimport { WithTranslation, withTranslation } from 'react-i18next'\nimport { useHistory } from 'react-router-dom'\nimport {\n    AmmRecordTable,\n    AmmTradeType,\n    ChartType,\n    ScaleAreaChart,\n    TablePaddingX,\n    ToggleButtonGroup,\n    useSettings ,\n    MyPoolTable\n} from '@loopring-web/component-lib'\nimport {\n    Currency, EmptyValueTag,\n    getThousandFormattedNumbers,\n    PriceTag\n} from '@loopring-web/common-resources';\n\nimport { AmmPoolActivityRule, LoopringMap } from 'loopring-sdk/dist/defs/loopring_defs';\nimport { useOverview } from './hook';\nimport { TableWrapStyled } from 'pages/styled'\n\n\n//TODO: FIXED:  demo data\n\n\nconst toggleData = [\n    {value: '24 H', key: '24 H'},\n    {value: '1 W', key: '1 W'},\n    {value: 'ALL', key: 'ALL'},\n]\n\nconst StylePaper = styled(Box)`\n    height: 100%;\n    flex: 1;\n    background: var(--color-box);\n    border-radius: ${({theme}) => theme.unit}px;\n` as typeof Box;\n\nconst StyleWrapper = styled(Grid)`\n    position: relative;\n    width: 100%;\n    background: var(--color-box);\n    border-radius: ${({theme}) => theme.unit}px;\n` as typeof Grid\n\n\n\nconst StyledBtnGroupWrapper = styled(Box)`\n  position: absolute;\n  z-index: 99;\n  top: ${({theme}) => theme.unit}px;\n  width: 100%;\n` as typeof Box\n\n\nconst MyLiquidity: any = withTranslation('common')(\n    <R extends { [ key: string ]: any }, I extends { [ key: string ]: any }>\n    ({t, ammActivityMap, ...rest}:\n         WithTranslation &\n         { ammActivityMap: LoopringMap<LoopringMap<AmmPoolActivityRule[]>> | undefined }\n    ) => {\n        const [chartPeriod, setChartPeriod] = React.useState('ALL');\n        const [page, setPage] = React.useState(1);\n        const {currency} = useSettings();\n        const history = useHistory()\n\n        const JumpToLiqudity = React.useCallback((pair, type) => {\n            if (history) {\n                history.push(`/liquidity/pools/coinPair/${pair}?type=${type}`)\n            }\n        }, [history])\n\n        const _handlePageChange = React.useCallback((page: number) => {\n            setPage(page);\n        }, [])\n\n        const {myAmmMarketArray, summaryReward, myPoolRow} = useOverview({ammActivityMap});\n        return (\n            <>\n                <Grid container spacing={2}>\n                    <Grid item sm={3}>\n                        <StyleWrapper container paddingY={3} paddingX={4} margin={0} display={'flex'} flexDirection={'column'}>\n                            <Grid display={'flex'} flexDirection={'column'} item>\n                                <Typography variant={'h5'}\n                                            color={'textSecondary'} fontFamily={'Roboto'}>{t('labelTotalPositionValue')}</Typography>\n                                <Typography variant={'h3'} marginTop={1} fontFamily={'Roboto'}>\n                                    {summaryReward === undefined ? EmptyValueTag : currency === Currency.dollar ? PriceTag.Dollar\n                                        + getThousandFormattedNumbers((summaryReward.rewardDollar ?? 0) + \n                                        (summaryReward.feeDollar ?? 0))\n\n                                        : PriceTag.Yuan + getThousandFormattedNumbers(summaryReward.rewardYuan ?? 0\n                                            + Number(summaryReward.feeYuan) ?? 0)}\n                                </Typography>\n                            </Grid>\n                            <Grid display={'flex'} flexDirection={'column'} marginTop={5} item>\n                                <Typography variant={'h5'} component={'h3'} fontFamily={'Roboto'}\n                                            color={'textSecondary'}>{t('labelFeeRewards')}</Typography>\n                                <Typography variant={'h3'} marginTop={1} fontFamily={'Roboto'}>\n                                    {summaryReward === undefined ? EmptyValueTag : currency === Currency.dollar ? PriceTag.Dollar\n                                        + getThousandFormattedNumbers(summaryReward.feeDollar ? summaryReward.feeDollar : 0)\n                                        : PriceTag.Yuan\n                                        + getThousandFormattedNumbers(summaryReward.feeYuan ? summaryReward.feeYuan : 0)}\n                                </Typography>\n                            </Grid>\n                            <Grid display={'flex'} flexDirection={'column'} marginTop={5} item>\n                                <Typography variant={'h5'} component={'h3'} fontFamily={'Roboto'}\n                                            color={'textSecondary'}>{t('labelMiningRewards')}</Typography>\n                                <Typography variant={'h3'} marginTop={1} fontFamily={'Roboto'}>\n                                    {summaryReward === undefined ? EmptyValueTag : currency === Currency.dollar ? PriceTag.Dollar\n                                        + getThousandFormattedNumbers(summaryReward.rewardDollar ? summaryReward.rewardDollar : 0)\n                                        : PriceTag.Yuan\n                                        + getThousandFormattedNumbers(summaryReward.rewardYuan ? summaryReward.rewardYuan : 0)}\n                                </Typography>\n                            </Grid>\n                        </StyleWrapper>\n                    </Grid>\n                    <Grid item xs={9}>\n                        <StylePaper />\n                    </Grid>\n                </Grid>\n\n                {/*<StyleWrapper container marginY={2} height={340}>*/}\n                {/*    <StyledBtnGroupWrapper display={'flex'} padding={3} justifyContent={'space-between'}>*/}\n                {/*        <Typography variant={'body1'} component={'h5'}*/}\n                {/*                    color={'textSecondary'}>{t('labelLiquidityValue')}</Typography>*/}\n                {/*        <Box marginRight={-1}>*/}\n                {/*            <ToggleButtonGroup exclusive size=\"small\" {...{*/}\n                {/*                ...rest,*/}\n                {/*                t,*/}\n                {/*                data: toggleData,*/}\n                {/*                value: chartPeriod,*/}\n                {/*                setValue: setChartPeriod*/}\n                {/*            }} />*/}\n                {/*        </Box>*/}\n                {/*    </StyledBtnGroupWrapper>*/}\n                {/*    <ScaleAreaChart type={ChartType.Trend} data={[]}/>*/}\n                {/*</StyleWrapper>*/}\n                \n                <TableWrapStyled marginY={2} paddingY={2} paddingX={3} flex={1}>\n                    <Grid item xs={12} display={'flex'} flexDirection={'column'}>\n                        <Typography variant={'h5'} marginBottom={3}>{t('labelMyAmm')}</Typography>\n                        <MyPoolTable\n                            rawData={myPoolRow}\n                            // pagination={{pageSize: 10}}\n                            handleDeposit={(row: any) => {\n                                const pair = `${row.ammDetail.coinAInfo.name}-${row.ammDetail.coinBInfo.name}`\n                                JumpToLiqudity(pair, 'add')\n                            }}\n                            handleWithdraw={(row: any) => {\n                                const pair = `${row.ammDetail.coinAInfo.name}-${row.ammDetail.coinBInfo.name}`\n                                JumpToLiqudity(pair, 'remove')\n                            }}\n                            handlePageChange={() => {\n                            }}\n                        />\n                    </Grid>\n                </TableWrapStyled>\n                {/* <Typography paddingLeft={2} variant={'h5'}>{t('labelMyAmmRecord')}</Typography> */}\n                {/* <TableWrapStyled container marginTop={2}  paddingBottom={2} flex={1}>\n                    <Grid item xs={12} display={'flex'} flexDirection={'column'}>\n                        <AmmRecordTable rawData={myAmmMarketArray} handlePageChange={_handlePageChange} page={page}/>\n                    </Grid>\n                </TableWrapStyled> */}\n            </>\n        )\n    })\n    \nexport default MyLiquidity\n","import { useRouteMatch } from 'react-router'\n\nimport { Box, Typography } from '@material-ui/core'\nimport { Button, SubMenu, SubMenuList as BasicSubMenuList, useOpenModals, } from '@loopring-web/component-lib'\nimport { useTranslation, withTranslation } from 'react-i18next'\nimport styled from '@emotion/styled'\nimport { AccountStatus, fnType, LoadingIcon, SagaStatus, subMenuLayer2 } from '@loopring-web/common-resources'\n\nimport TxPanel from './TxPanel'\nimport AssetPanel from './AssetPanel'\nimport TradePanel from './TradePanel'\nimport AmmPanel from './AmmPanel'\nimport History from './HistoryPanel'\nimport OrderPanel from './OrderPanel'\nimport MyLiqudityPanel from './MyLiquidityPanel'\nimport React from 'react';\nimport { useAccount } from '../../stores/account';\nimport { accountStaticCallBack, btnLabel, btnClickMap } from '../../layouts/connectStatusCallback';\nimport { deepClone } from '../../utils/obj_tools';\n\nimport { i18n } from \"@loopring-web/common-resources\"\n\nexport const subMenu = subMenuLayer2\n\nconst BoxStyle = styled(Box)`\n  ${({theme}) => `\n    background: var(--color-box);\n    width: 100%;\n    min-width:auto;\n    ${theme.border.defaultFrame({c_key: 'blur'})};\n    & > div{\n      background-color:initial;\n      border:0;\n      width:auto;\n      min-width: var(--swap-box-width);\n      max-width: 520px;\n    }\n    `\n  }\n\n` as typeof Box\nconst BtnConnect = withTranslation(['common'], {withRef: true})(({t}: any) => {\n    const { status: accountStatus, account } = useAccount();\n    // const {setShowAccount} = useOpenModals();\n    const [label, setLabel] = React.useState(undefined);\n\n    const _btnLabel = Object.assign(deepClone(btnLabel), {\n        [ fnType.NO_ACCOUNT ]: [\n            function () {\n                return `depositTitleAndActive`\n            }\n        ],\n        [ fnType.ERROR_NETWORK ]: [\n            function () {\n                return `depositTitleAndActive`\n            }\n        ],\n    });\n\n    React.useEffect(() => {\n        if (accountStatus === SagaStatus.UNSET) {\n            setLabel(accountStaticCallBack(_btnLabel));\n        }\n    }, [accountStatus, account.readyState, i18n.language])\n\n    const _btnClickMap = Object.assign(deepClone(btnClickMap), {});\n\n    return <Button variant={'contained'} size={'large'} color={'primary'} fullWidth={true}\n                   style={{maxWidth: '280px'}} onClick={() => {\n        accountStaticCallBack(_btnClickMap, [])\n    }\n    }>{t(label)}</Button>\n}) as typeof Button\nconst SubMenuList = withTranslation(['layout', 'common'], {withRef: true})(BasicSubMenuList);\nexport const Layer2Page = () => {\n\n    let match: any = useRouteMatch(\"/layer2/:item\")\n    const {\n        account,\n        // updateAccount,\n        // resetAccount,\n        // setShouldShow,\n        // status: accountStatus,\n        // statusUnset: accountStatusUnset\n    } = useAccount();\n\n    const {t, ...rest} = useTranslation();\n    const selected = match?.params.item ?? 'assets';\n    // const {depositProps} = useDeposit()\n\n    const viewTemplate = React.useMemo(() => {\n        switch (account.readyState) {\n            case AccountStatus.UN_CONNECT:\n                return <Box flex={1} display={'flex'} justifyContent={'center'} flexDirection={'column'} alignItems={'center'}\n                >\n                    <Typography marginY={3} variant={'h1'}>{t('describeTitleConnectToWallet')}</Typography>\n                    <BtnConnect/>\n                </Box>\n                break\n            case AccountStatus.LOCKED:\n                return <Box flex={1} display={'flex'} justifyContent={'center'} flexDirection={'column'} alignItems={'center'}>\n                    <Typography marginY={3} variant={'h1'}>{t('describeTitleLocked')}</Typography>\n                    <BtnConnect/>\n                </Box>\n                break\n            case AccountStatus.NO_ACCOUNT:\n                return <Box flex={1} display={'flex'} justifyContent={'center'} flexDirection={'column'} alignItems={'center'}>\n                    <Typography marginY={3} variant={'h1'}>{t('describeTitleNoAccount')}</Typography>\n                    <BtnConnect/>\n                </Box>\n                break\n            case AccountStatus.NO_ACCOUNT:\n                return <Box flex={1} display={'flex'} justifyContent={'center'} flexDirection={'column'} alignItems={'center'}\n                >\n                    <Typography marginY={3} variant={'h1'}>{t('describeTitleNotActive')}</Typography>\n                    <BtnConnect/>\n                </Box>\n                break\n            case AccountStatus.DEPOSITING:\n                return <Box flex={1} display={'flex'} justifyContent={'center'} flexDirection={'column'} alignItems={'center'}\n                >\n                    <LoadingIcon color={'primary'} style={{width: 60, height: 60}}/>\n                    <Typography marginY={3} variant={'h1'}>{t('describeTitleOpenAccounting')}</Typography>\n                    {/*<BtnConnect/>*/}\n                </Box>\n                break\n            case AccountStatus.ERROR_NETWORK:\n                return <Box flex={1} display={'flex'} justifyContent={'center'} flexDirection={'column'} alignItems={'center'}\n                >\n                    <Typography marginY={3}\n                                variant={'h1'}>{t('describeTitleOnErrorNetwork', {connectName: account.connectName})}</Typography>\n                    {/*<BtnConnect/>*/}\n                </Box>\n                break\n\n            case AccountStatus.ACTIVATED:\n                return <>\n                    <Box width={'200px'} display={'flex'} justifyContent={'stretch'} marginRight={3}\n                        marginBottom={2} className={'MuiPaper-elevation2'}>\n                        <SubMenu>\n                            <SubMenuList selected={selected} subMenu={subMenu as any}/>\n                        </SubMenu>\n                    </Box>\n                    <Box minHeight={420} display={'flex'} alignItems={'stretch'} flexDirection={'column'} marginTop={0}\n                        flex={1}>\n\n                        {selected === 'assets' && <AssetPanel/>}\n                        {selected === 'my-liquidity' && <MyLiqudityPanel/>}\n                        {selected === 'history' && <History/>}\n                        {selected === 'transactions' && <TxPanel/>}\n                        {selected === 'trades' && <TradePanel/>}\n                        {selected === 'ammRecords' && <AmmPanel/>}\n                        {selected === 'order' && <OrderPanel />}\n                        {/*{selected === 'setting' && <SettingPanel/>}*/}\n                    </Box>\n                </>\n            default:\n                break\n        }\n    }, [t, account.readyState, selected])\n\n    return <>\n        {viewTemplate}\n        {/*    {*/}\n\n        {/*   */}\n        {/*    readyState === AccountStatus.UN_CONNECT*/}\n        {/*        ? <Redirect to=\"/\"/>*/}\n        {/*        :*/}\n        {/*        readyState === AccountStatus.NO_ACCOUNT*/}\n        {/*        || readyState === AccountStatus.DEPOSITING ?*/}\n        {/*            <BoxStyle display={'flex'} flexWrap={'wrap'} alignItems={'center'} justifyContent={'center'}*/}\n        {/*                      alignContent={'flex-start'}>*/}\n        {/*                <DepositPanel  {...{*/}\n        {/*                    ...rest, ...depositProps,*/}\n        {/*                    title: t('depositTitleAndActive'),*/}\n        {/*                    description: 'depositAndActiveDescription'*/}\n        {/*                }} > </DepositPanel>*/}\n        {/*            </BoxStyle> : <>*/}\n        {/*                <Box width={'200px'} display={'flex'} justifyContent={'stretch'} marginRight={3} marginBottom={2}>*/}\n        {/*                    <SubMenu>*/}\n        {/*                        <SubMenuList selected={selected} subMenu={subMenu as any}/>*/}\n        {/*                    </SubMenu>*/}\n        {/*                </Box>*/}\n        {/*                <Box minHeight={420} display={'flex'} alignItems={'stretch'} flexDirection={'column'} marginTop={0}*/}\n        {/*                     flex={1}>*/}\n        {/*                    {readyState === AccountStatus.LOCKED ?*/}\n        {/*                        <>*/}\n        {/*                            {*/}\n        {/*                                selected === 'setting' ? <SettingPanel/> :*/}\n        {/*                                    <Box flex={1} display={'flex'} justifyContent={'center'} alignItems={'center'}*/}\n        {/*                                         marginTop={-10}>*/}\n        {/*                                        <BtnConnect/>*/}\n        {/*                                    </Box>*/}\n\n        {/*                            }*/}\n        {/*                        </> :*/}\n        {/*                       */}\n\n        {/*                    }*/}\n\n\n        {/*                </Box>*/}\n        {/*            </>*/}\n        {/*}*/}\n    </>\n\n\n}\n","import { WithTranslation, withTranslation, } from 'react-i18next'\nimport { Box, OutlinedInput, InputAdornment } from '@material-ui/core'\nimport styled from '@emotion/styled'\n\nimport React from 'react';\nimport { useAmmMapUI } from './hook';\n\nimport { PoolsTable } from '@loopring-web/component-lib';\nimport { SearchIcon } from '@loopring-web/common-resources'\nimport { AmmPoolActivityRule, LoopringMap } from 'loopring-sdk/dist/defs/loopring_defs';\n\nconst WrapperStyled = styled(Box)`\n    flex: 1;\n    display: flex;\n    flex-direction: column;\n`\n\nconst StylePaper = styled(Box)`\n    width: 100%;\n    height: 100%;\n    flex: 1;\n    background: var(--color-box);\n    border-radius: ${({theme}) => theme.unit}px;\n\n    .rdg {\n        flex: 1;\n    }\n\n` as typeof Box;\n\n// const StylePaper = styled(Box)`\n//     width: 100%;\n//     height: 100%;\n//     flex: 1;\n//     background-color: ${({theme}) => theme.colorBase.background().default};\n//     border-radius: ${({theme}) => theme.unit}px;\n\nexport const PoolsPanel = withTranslation('common')(<R extends { [ key: string ]: any }, I extends { [ key: string ]: any }>\n({t, ammActivityMap, ...rest}: WithTranslation\n    & {\n    ammActivityMap: LoopringMap<LoopringMap<AmmPoolActivityRule[]>> | undefined }) => {\n    const container = React.useRef(null);\n    const [pageSize, setPageSize] = React.useState(10);\n    const [filterValue, setFilterValue] = React.useState('');\n    const {updateTickersUI, rawData, page} = useAmmMapUI({pageSize});\n\n    React.useEffect(() => {\n        // @ts-ignore\n        let height = container?.current?.offsetHeight;\n        if (height) {\n            setPageSize(Math.floor((height - 120) / 44) - 1);\n        }\n    }, [container, pageSize]);\n\n    const getFilteredData = React.useCallback(() => {\n        if (!filterValue) {\n            return rawData\n        }\n        return rawData.filter(o => {\n            const coinA = o.coinAInfo.name.toLowerCase()\n            const coinB = o.coinBInfo.name.toLowerCase()\n            const formattedValue = filterValue.toLowerCase()\n            return coinA.includes(formattedValue) || coinB.includes(formattedValue) \n        })\n    }, [filterValue, rawData])\n\n    const handlePageChange = React.useCallback((page) => {\n        updateTickersUI(page)\n    }, [updateTickersUI]);\n    return (\n        <>\n            <WrapperStyled>\n                <Box marginBottom={3}>\n                    <OutlinedInput\n                        {...{\n                            placeholder: t('labelFilter'),\n                            value: filterValue,\n                            onChange: (event: any) => {\n                                setFilterValue(event.currentTarget?.value);\n                            }\n                        }}\n                        key={'search'}\n                        className={'search'}\n                        aria-label={'search'}\n                        startAdornment={<InputAdornment position=\"start\">\n                            <SearchIcon/>\n                        </InputAdornment>}\n                    />\n                </Box>\n                <StylePaper display={'flex'} flexDirection={'column'} ref={container}>\n                    <PoolsTable {...{\n                        rawData: getFilteredData(),\n                        handlePageChange,\n                        page,\n                        pagination: {\n                            pageSize\n                        },\n                        showFilter: false,\n                        showLoading: !rawData.length\n                    }} />\n                </StylePaper>\n            </WrapperStyled>\n        </>\n    )\n})\n","import React from 'react';\nimport { useAmmMap } from '../../../stores/Amm/AmmMap';\nimport { AmmDetail, CustomError, ErrorMap, SagaStatus, } from '@loopring-web/common-resources';\nimport { deepClone } from '../../../utils/obj_tools';\nimport { useTokenMap } from '../../../stores/token';\nimport { useSocket } from '../../../stores/socket';\nimport { useTicker } from '../../../stores/ticker';\n\n// import { tickerService } from '../../../services/tickerService';\n\nexport function useAmmMapUI<R extends { [ key: string ]: any }, I extends { [ key: string ]: any }>({pageSize}: { pageSize: number }) {\n    const [rawData, setRawData] = React.useState<Array<AmmDetail<any>> | []>([]);\n    const [page, setPage] = React.useState<number>(1);\n    const {coinMap} = useTokenMap();\n    const nodeTimer = React.useRef<NodeJS.Timeout | -1>(-1);\n\n    const {ammMap, status: ammMapStatus,} = useAmmMap();\n    const {\n        tickerMap,\n        status: tickerStatus,\n        updateTickers,\n    } = useTicker();\n    const {status: socketStatus, statusUnset: socketStatusUnset,} = useSocket();\n    const updateRawData = React.useCallback((tickerMap) => {\n        try {\n            const _ammMap = deepClone(ammMap);\n            for (let tickerMapKey in tickerMap) {\n                if (_ammMap[ 'AMM-' + tickerMapKey ]) {\n                    _ammMap[ 'AMM-' + tickerMapKey ].tradeFloat = {\n                        ..._ammMap[ 'AMM-' + tickerMapKey ].tradeFloat,\n                        ...tickerMap[ tickerMapKey ],\n                        // APY: _ammMap['AMM-' + tickerMapKey ].APY\n                    }\n\n                }\n            }\n            setRawData(Object.keys(_ammMap).map((ammKey: string) => {\n                if (coinMap) {\n                    _ammMap[ ammKey ][ 'coinAInfo' ] = coinMap[ _ammMap[ ammKey ][ 'coinA' ] ];\n                    _ammMap[ ammKey ][ 'coinBInfo' ] = coinMap[ _ammMap[ ammKey ][ 'coinB' ] ];\n                }\n                return _ammMap[ ammKey ];\n            }))\n        } catch (error) {\n            throw new CustomError({...ErrorMap.NO_TOKEN_MAP, options: error})\n        }\n\n    }, [ammMap]);\n    const updateTickerLoop = React.useCallback((_keys?: string[]) => {\n        updateTickers(_keys as string[]);\n        if (nodeTimer.current  !== -1) {\n            clearTimeout(nodeTimer.current);\n        }\n        nodeTimer.current = setTimeout(() => {\n            updateTickerLoop(_keys)\n        }, 1000)\n    },[updateTickers])\n    React.useEffect(() => {\n        return () => {\n            clearTimeout(nodeTimer.current as NodeJS.Timeout);\n        }\n    }, [nodeTimer.current]);\n\n    const updateTickersUI = React.useCallback((_page) => {\n        setPage(_page);\n        if (ammMap && Object.keys(ammMap).length > 0) {\n            const _keys:string[] = []\n            for (let i = (page - 1) * pageSize; i < Object.keys(ammMap).length && i < (page - 1) * pageSize + pageSize; i++) {\n                _keys.push(Object.keys(ammMap)[ i ]);\n            }\n            updateTickerLoop(_keys)\n        }\n    }, [ammMap, pageSize]);\n    React.useEffect(() => {\n        if (ammMap && Object.keys(ammMap).length !== 0) {\n            updateTickersUI(page)\n        }\n\n    }, []);\n\n\n    React.useEffect(() => {\n        if (tickerStatus === SagaStatus.UNSET){\n            updateRawData(tickerMap)\n        }\n    }, [tickerStatus]);\n    React.useEffect(() => {\n        if(ammMapStatus === SagaStatus.UNSET){\n            updateTickersUI(1)\n        }\n    }, [ammMapStatus, updateTickersUI]);\n    return {\n        page,\n        rawData,\n        updateTickersUI,\n    }\n}\n\n","import { AmmPanel, AmmPanelType, Toast } from '@loopring-web/component-lib';\nimport { AmmData, AmmInData, CoinInfo, IBData, WalletMap } from '@loopring-web/common-resources';\nimport { useAmmPanel } from './hooks';\nimport React from 'react';\nimport { Box } from '@material-ui/core';\nimport { AmmPoolSnapshot, TickerData } from 'loopring-sdk';\nimport { TradeBtnStatus } from '@loopring-web/component-lib';\nimport { TOAST_TIME } from 'defs/common_defs';\n\nexport const AmmPanelView = <T extends AmmData<C extends IBData<I> ? C : IBData<I>>, I,\n    ACD extends AmmInData<I>,\n    C = IBData<I>>({\n                       pair,\n                       walletMap,\n                       ammType, snapShotData,\n                       ...rest\n                   }: {\n    pair: { coinAInfo: CoinInfo<C> | undefined, coinBInfo: CoinInfo<C> | undefined },\n    snapShotData: { tickerData: TickerData | undefined, ammPoolsBalance: AmmPoolSnapshot | undefined } | undefined\n    walletMap: WalletMap<C>\n    ammType?: keyof typeof AmmPanelType\n} & any) => {\n    const {\n        ammAlertText,\n        ammToastOpen,\n        setAmmToastOpen,\n\n        ammCalcData,\n        ammJoinData,\n        ammExitData,\n        handleJoinAmmPoolEvent,\n        handleExitAmmPoolEvent,\n        onAmmRemoveClick,\n        onAmmAddClick,\n        isJoinLoading,\n        isExitLoading,\n        ammDepositBtnI18nKey,\n        ammWithdrawBtnI18nKey,\n        onRefreshData,\n    } = useAmmPanel({\n        pair,\n        snapShotData, ammType: ammType ? ammType : AmmPanelType.Deposit\n    })\n\n    // const [index, setIndex] = React.useState(AmmPanelTypeMap[ tabSelected ]);\n    const isLoading = React.useCallback(()=>{\n        \n        if((!snapShotData || !snapShotData.tickerData || !snapShotData.ammPoolsBalance)\n            &&  ammDepositBtnI18nKey === undefined\n            &&  ammWithdrawBtnI18nKey === undefined\n        ) {\n          return true\n        }\n    \n        if(isJoinLoading || isExitLoading){\n            return true   \n            \n        }\n    },[snapShotData,ammWithdrawBtnI18nKey,ammWithdrawBtnI18nKey,isJoinLoading,isExitLoading])\n\n\n    return <> \n    \n    <Toast alertText={ammAlertText as string} open={ammToastOpen} \n            autoHideDuration={TOAST_TIME} onClose={()=>{setAmmToastOpen(false)}}/>\n\n    {pair ?\n        <AmmPanel {...{...rest}}\n                  onRefreshData={onRefreshData}\n                  ammDepositData={ammJoinData}\n                  ammWithdrawData={ammExitData}\n                  ammCalcData={ammCalcData}\n                  handleAmmAddChangeEvent={handleJoinAmmPoolEvent}\n                  handleAmmRemoveChangeEvent={handleExitAmmPoolEvent}\n                  onAmmRemoveClick={onAmmRemoveClick}\n                  onAmmAddClick={onAmmAddClick}\n                  tabSelected={ammType ? ammType : AmmPanelType.Deposit}\n                  ammDepositBtnI18nKey={ammDepositBtnI18nKey}\n                  ammWithdrawBtnI18nKey={ammWithdrawBtnI18nKey}\n                  ammDepositBtnStatus={isLoading()?TradeBtnStatus.LOADING:TradeBtnStatus.AVAILABLE}\n                  ammWithdrawBtnStatus={isLoading()?TradeBtnStatus.LOADING:TradeBtnStatus.AVAILABLE}\n\n        /> : <Box width={'var(--swap-box-width)'}/>}\n    </>\n\n}","import React, { useEffect, useState } from \"react\";\nimport {\n    AccountStatus,\n    AmmData,\n    AmmInData,\n    CoinInfo,\n    fnType,\n    globalSetup,\n    IBData,\n    SagaStatus, WalletMap,\n} from '@loopring-web/common-resources';\nimport { AmmPanelType } from '@loopring-web/component-lib';\nimport { IdMap, useTokenMap } from '../../../stores/token';\nimport { useAmmMap } from '../../../stores/Amm/AmmMap';\nimport { accountStaticCallBack, ammPairInit, btnLabel, btnClickMap, makeCache, makeWalletLayer2 } from '../../../hooks/help';\nimport * as sdk from 'loopring-sdk';\nimport {\n    AmmPoolRequestPatch,\n    AmmPoolSnapshot,\n    ChainId,\n    dumpError400,\n    ExitAmmPoolRequest,\n    GetAmmPoolSnapshotRequest,\n    getExistedMarket,\n    GetNextStorageIdRequest,\n    GetOffchainFeeAmtRequest,\n    JoinAmmPoolRequest,\n    LoopringMap,\n    makeExitAmmPoolRequest,\n    makeJoinAmmPoolRequest,\n    MarketInfo,\n    OffchainFeeInfo,\n    OffchainFeeReqType,\n    TickerData,\n    toBig,\n    TokenInfo, WsTopicType\n} from 'loopring-sdk';\nimport { useCustomDCEffect } from '../../../hooks/common/useCustomDCEffect';\nimport { useAccount } from '../../../stores/account/hook';\nimport store from \"stores\";\nimport { LoopringAPI } from \"api_wrapper\";\nimport { deepClone } from '../../../utils/obj_tools';\nimport { useWalletLayer2 } from \"stores/walletLayer2\";\nimport { myLog } from \"utils/log_tools\";\nimport { REFRESH_RATE_SLOW } from \"defs/common_defs\";\nimport { useTranslation } from \"react-i18next\";\nimport { useWalletHook } from '../../../services/wallet/useWalletHook';\nimport { useSocket } from '../../../stores/socket';\nimport { walletService } from '../../../services/wallet/walletService';\nimport * as _ from 'lodash'\nexport const useAmmPanel = <C extends { [key: string]: any }>({\n    pair,\n    ammType,\n    snapShotData,\n}\n    : {\n        pair: { coinAInfo: CoinInfo<C> | undefined, coinBInfo: CoinInfo<C> | undefined },\n        snapShotData: { tickerData: TickerData | undefined, ammPoolsBalance: AmmPoolSnapshot | undefined } | undefined\n        ammType: keyof typeof AmmPanelType\n    }) => {\n    const { t } = useTranslation('common');\n    const {sendSocketTopic,socketEnd} = useSocket();\n    const [ammToastOpen, setAmmToastOpen] = useState<boolean>(false);\n    const [ammAlertText, setAmmAlertText] = useState<string>();\n    const { coinMap, tokenMap } = useTokenMap();\n    const { ammMap } = useAmmMap();\n    const { account, status: accountStatus } = useAccount();\n    const [ammCalcData, setAmmCalcData] = React.useState<AmmInData<C> | undefined>();\n    const nodeTimer = React.useRef<NodeJS.Timeout | -1>(-1);\n    const [ammJoinData, setAmmJoinData] = React.useState<AmmData<IBData<C>, C>>({\n        coinA: { belong: undefined } as unknown as IBData<C>,\n        coinB: { belong: undefined } as unknown as IBData<C>,\n        slippage: 0.5\n    } as AmmData<IBData<C>, C>);\n\n    const [ammExitData, setAmmExitData] = React.useState({\n        coinA: { belong: undefined } as unknown as IBData<C>,\n        coinB: { belong: undefined } as unknown as IBData<C>,\n        slippage: 0.5\n    } as AmmData<IBData<C>, C>);\n\n    const [ammDepositBtnI18nKey, setAmmDepositBtnI18nKey] = React.useState<string | undefined>(undefined);\n    const [ammWithdrawBtnI18nKey, setAmmWithdrawBtnI18nKey] = React.useState<string | undefined>(undefined);\n\n    React.useEffect(() => {\n        if(account.readyState === AccountStatus.ACTIVATED){\n            sendSocketTopic({[ WsTopicType.account ]: true});\n        }else{\n            socketEnd()\n        }\n        return ()=>{\n            socketEnd()\n        }\n    }, [account.readyState]);\n    const initAmmData = React.useCallback(async (pair: any, walletMap: any) => {\n        myLog('initAmmData:', account.accAddress, walletMap, pair)\n\n        let _ammCalcData = ammPairInit(\n            {\n                pair,\n                ammType,\n                _ammCalcData: {},\n                tokenMap,\n                coinMap,\n                walletMap,\n                ammMap,\n                tickerData: snapShotData?.tickerData,\n                ammPoolsBalance: snapShotData?.ammPoolsBalance\n            })\n\n        setAmmCalcData({ ...ammCalcData, ..._ammCalcData });\n        if (_ammCalcData.myCoinA) {\n            setAmmJoinData({\n                coinA: { ..._ammCalcData.myCoinA, tradeValue: undefined },\n                coinB: { ..._ammCalcData.myCoinB, tradeValue: undefined },\n                slippage: 0.5\n            })\n            setAmmExitData({\n                coinA: { ..._ammCalcData.lpCoinA, tradeValue: undefined },\n                coinB: { ..._ammCalcData.lpCoinB, tradeValue: undefined },\n                slippage: 0.5\n            })\n        }\n    }, [snapShotData, coinMap, tokenMap, ammCalcData, ammMap, ammType, setAmmCalcData, setAmmJoinData, setAmmExitData])\n\n    const [ammPoolSnapshot, setAmmPoolSnapShot] = useState<AmmPoolSnapshot>()\n\n    const updateAmmPoolSnapshot = React.useCallback(async() => {\n\n        if (!pair.coinAInfo?.simpleName || !pair.coinBInfo?.simpleName || !LoopringAPI.ammpoolAPI) {\n            setAmmAlertText(t('labelAmmJoinFailed'))\n            return\n        }\n\n        const { marketArray, marketMap, } = store.getState().tokenMap\n\n        const { ammMap } = store.getState().amm.ammMap\n\n        const { market, amm } = getExistedMarket(marketArray, pair.coinAInfo.simpleName as string,\n            pair.coinBInfo.simpleName as string)\n\n        if (!market || !amm || !marketMap) {\n            return\n        }\n\n        const ammInfo: any = ammMap[amm as string]\n\n        const request1: GetAmmPoolSnapshotRequest = {\n            poolAddress: ammInfo.address\n        }\n\n        const response = await LoopringAPI.ammpoolAPI.getAmmPoolSnapshot(request1)\n\n        if (!response) {\n            myLog('err res:', response)\n            return\n        }\n\n        const { ammPoolSnapshot } = response\n\n        setAmmPoolSnapShot(ammPoolSnapshot)\n        myLog('updateAmmPoolSnapshot',pair)\n    }, [pair, ammMap, setAmmPoolSnapShot])\n\n    // set fees\n\n    const [joinFees, setJoinFees] = useState<LoopringMap<OffchainFeeInfo>>()\n    const [exitFees, setExitfees] = useState<LoopringMap<OffchainFeeInfo>>()\n    const { account: { accountId, apiKey } } = useAccount()\n\n    // const { status } = useSelector((state: RootState) => state.account)\n    const calculateCallback = React.useCallback(async ()=>{\n        if (accountStatus === SagaStatus.UNSET) {\n\n            const label: string | undefined = accountStaticCallBack(btnLabel)\n            setAmmDepositBtnI18nKey(label)\n            setAmmWithdrawBtnI18nKey(label)\n\n            if (!LoopringAPI.userAPI || !pair.coinBInfo?.simpleName\n                || account.readyState !== AccountStatus.ACTIVATED\n                || !ammCalcData || !tokenMap) {\n                return\n            }\n            const feeToken: TokenInfo = tokenMap[pair.coinBInfo.simpleName]\n\n            const requestJoin: GetOffchainFeeAmtRequest = {\n                accountId,\n                requestType: OffchainFeeReqType.AMM_JOIN,\n                tokenSymbol: pair.coinBInfo.simpleName as string,\n            }\n\n            const { fees: feesJoin } = await LoopringAPI.userAPI.getOffchainFeeAmt(requestJoin, apiKey)\n            setJoinFees(feesJoin)\n\n            const feeJoin = sdk.toBig(feesJoin[pair.coinBInfo.simpleName]?.fee as string).div('1e' + feeToken.decimals).toString()\n                + ' ' + pair.coinBInfo.simpleName\n\n            const requestExit: GetOffchainFeeAmtRequest = {\n                accountId: account.accountId,\n                requestType: OffchainFeeReqType.AMM_EXIT,\n                tokenSymbol: pair.coinBInfo.simpleName as string,\n            }\n            const { fees: feesExit } = await LoopringAPI.userAPI.getOffchainFeeAmt(requestExit, apiKey)\n\n            setExitfees(feesExit)\n\n            const feeExit = sdk.toBig(feesExit[pair.coinBInfo.simpleName].fee as string).div('1e' + feeToken.decimals).toString()\n                + ' ' + pair.coinBInfo.simpleName\n\n            myLog('-> feeJoin:', feeJoin, ' feeExit:', feeExit)\n\n            setAmmCalcData({ ...ammCalcData, feeJoin, feeExit })\n        }\n\n    },[\n        setJoinFees, setExitfees, setAmmCalcData, setAmmDepositBtnI18nKey, setAmmWithdrawBtnI18nKey,\n        accountStatus, account.readyState, accountId, apiKey,\n        pair.coinBInfo?.simpleName, tokenMap, ammCalcData\n    ])\n    React.useEffect( () => {\n        calculateCallback()\n    }, [accountStatus,pair,ammJoinData])\n\n    // join\n\n    const [joinRequest, setJoinRequest] = useState<{ ammInfo: any, request: JoinAmmPoolRequest }>()\n    const handlerJoinInDebounce = React.useCallback(_.debounce(async (data, type, joinFees, ammPoolSnapshot,tokenMap,account) => {\n\n        if (!data || !tokenMap || !data.coinA.belong || !data.coinB.belong || !ammPoolSnapshot || !joinFees || !account?.accAddress) {\n            return\n        }\n\n        myLog('handlerJoinInDebounce', data, type);\n\n        const { slippage } = data\n\n        const slippageReal = sdk.toBig(slippage).div(100).toString()\n\n        const isAtoB = type === 'coinA'\n\n        const { idIndex, marketArray, marketMap, } = store.getState().tokenMap\n\n        const { ammMap } = store.getState().amm.ammMap\n\n        const { market, amm } = getExistedMarket(marketArray, data.coinA.belong as string,\n            data.coinB.belong as string)\n\n        if (!market || !amm || !marketMap) {\n            return\n        }\n\n        const marketInfo: MarketInfo = marketMap[market]\n\n        const ammInfo: any = ammMap[amm as string]\n\n        const coinA = tokenMap[data.coinA.belong as string]\n        const coinB = tokenMap[data.coinB.belong as string]\n\n        const coinA_TV = ammPoolSnapshot.pooled[0]\n        const coinB_TV = ammPoolSnapshot.pooled[1]\n\n        const covertVal = data.coinA.tradeValue ? sdk.toBig(data.coinA.tradeValue)\n            .times('1e' + isAtoB ? coinA.decimals : coinB.decimals).toFixed(0, 0) : '0'\n        const { output, ratio } = sdk.ammPoolCalc(covertVal, isAtoB, coinA_TV, coinB_TV)\n        const rawA = data.coinA.tradeValue ? data.coinA.tradeValue.toString() : 0;\n        const rawB = data.coinB.tradeValue ? data.coinB.tradeValue.toString() : 0;\n        const rawVal = isAtoB ? rawA : rawB;\n\n        const { request } = makeJoinAmmPoolRequest(rawVal,\n            isAtoB, slippageReal, account.accAddress, joinFees as LoopringMap<OffchainFeeInfo>,\n            ammMap[amm], ammPoolSnapshot, tokenMap as any, idIndex as IdMap, 0, 0)\n\n        if (isAtoB) {\n            data.coinB.tradeValue = parseFloat(toBig(request.joinTokens.pooled[1].volume)\n                .div('1e' + coinB.decimals).toFixed(marketInfo.precisionForPrice))\n        } else {\n            data.coinA.tradeValue = parseFloat(toBig(request.joinTokens.pooled[0].volume)\n                .div('1e' + coinA.decimals).toFixed(marketInfo.precisionForPrice))\n        }\n\n        setAmmJoinData({\n            coinA: data.coinA as IBData<C>,\n            coinB: data.coinB as IBData<C>,\n            slippage,\n        })\n\n        setJoinRequest({\n            ammInfo,\n            request\n        })\n\n    }, globalSetup.wait), [])\n\n    const handleJoinAmmPoolEvent =  (data: AmmData<IBData<any>>, type: 'coinA' | 'coinB') => {\n        handlerJoinInDebounce(data, type, joinFees, ammPoolSnapshot,tokenMap,account)\n    };\n\n    const addToAmmCalculator = React.useCallback(async function (props\n    ) {\n\n        setJoinLoading(true)\n        if (!LoopringAPI.ammpoolAPI || !LoopringAPI.userAPI || !joinRequest || !account?.eddsaKey?.sk) {\n            myLog(' onAmmJoin ammpoolAPI:', LoopringAPI.ammpoolAPI,\n                'joinRequest:', joinRequest)\n\n            setAmmAlertText(t('labelJoinAmmFailed'))\n            setAmmToastOpen(true)\n\n            setJoinLoading(false)\n            return\n        }\n\n        //todo add loading\n\n        const { ammInfo, request } = joinRequest\n\n        const patch: AmmPoolRequestPatch = {\n            chainId: store.getState().system.chainId as ChainId,\n            ammName: ammInfo.__rawConfig__.name,\n            poolAddress: ammInfo.address,\n            eddsaKey: account.eddsaKey.sk\n        }\n\n        try {\n\n            const request2: GetNextStorageIdRequest = {\n                accountId: account.accountId,\n                sellTokenId: request.joinTokens.pooled[0].tokenId as number\n            }\n            const storageId0 = await LoopringAPI.userAPI.getNextStorageId(request2, account.apiKey)\n\n            const request_1: GetNextStorageIdRequest = {\n                accountId: account.accountId,\n                sellTokenId: request.joinTokens.pooled[1].tokenId as number\n            }\n            const storageId1 = await LoopringAPI.userAPI.getNextStorageId(request_1, account.apiKey)\n\n            request.storageIds = [storageId0.offchainId, storageId1.offchainId]\n            setAmmJoinData({\n                ...ammJoinData, ...{\n                    coinA: { ...ammJoinData.coinA, tradeValue: 0 },\n                    coinB: { ...ammJoinData.coinB, tradeValue: 0 },\n                }\n            })\n            const response = await LoopringAPI.ammpoolAPI.joinAmmPool(request, patch, account.apiKey)\n\n            myLog('join ammpool response:', response)\n\n            if ((response.joinAmmPoolResult as any)?.resultInfo) {\n                setAmmAlertText(t('labelJoinAmmFailed'))\n                setJoinLoading(false)\n            } else {\n                setAmmAlertText(t('labelJoinAmmSuccess'))\n                walletService.sendUserUpdate()\n            }\n\n        } catch (reason) {\n\n            dumpError400(reason)\n            setJoinLoading(false)\n            setAmmAlertText(t('labelJoinAmmFailed'))\n        } finally {\n            setAmmToastOpen(true)\n\n        }\n        if (props.__cache__) {\n            makeCache(props.__cache__)\n        }\n    }, [joinRequest, ammJoinData, account, t])\n\n    const onAmmDepositClickMap = Object.assign(deepClone(btnClickMap), {\n        [fnType.ACTIVATED]: [addToAmmCalculator]\n    })\n    const onAmmAddClick = React.useCallback((props: AmmData<IBData<any>>) => {\n        accountStaticCallBack(onAmmDepositClickMap, [props])\n    }, [onAmmDepositClickMap]);\n\n    // exit\n    const [exitRequest, setExitRequest] = useState<{ rawVal: '', ammInfo: any, request: ExitAmmPoolRequest }>()\n\n    const handleExitInDebounce = React.useCallback(_.debounce(async (data, type, exitFees, ammPoolSnapshot,tokenMap,account) => {\n\n        const isAtoB = type === 'coinA'\n\n        if (!tokenMap || !data.coinA.belong || !data.coinB.belong\n            || !ammPoolSnapshot || !exitFees || !account?.accAddress\n            || (isAtoB && data.coinA.tradeValue === undefined) \n            || (!isAtoB && data.coinB.tradeValue === undefined)) {\n            return\n        }\n\n        myLog('handleExitInDebounce', data, type);\n\n        const { slippage } = data\n\n        const slippageReal = sdk.toBig(slippage).div(100).toString()\n\n        const { idIndex, marketArray, marketMap, } = store.getState().tokenMap\n\n        const { ammMap } = store.getState().amm.ammMap\n\n        const { market, amm } = getExistedMarket(marketArray, data.coinA.belong as string,\n            data.coinB.belong as string)\n\n        if (!market || !amm || !marketMap) {\n            return\n        }\n\n        const marketInfo: MarketInfo = marketMap[market]\n\n        const ammInfo: any = ammMap[amm as string]\n\n        const coinA = tokenMap[data.coinA.belong as string]\n        const coinB = tokenMap[data.coinB.belong as string]\n\n        const coinA_TV = ammPoolSnapshot.pooled[0]\n        const coinB_TV = ammPoolSnapshot.pooled[1]\n\n        const rawVal = isAtoB ? data.coinA.tradeValue : data.coinB.tradeValue\n\n        const rawDecimal = isAtoB ? coinA.decimals : coinB.decimals\n\n        const covertVal = sdk.toBig(rawVal).times('1e' + rawDecimal).toFixed(0, 0)\n        const { output, ratio } = sdk.ammPoolCalc(covertVal, isAtoB, coinA_TV, coinB_TV)\n\n        const { request } = makeExitAmmPoolRequest(rawVal.toString(), isAtoB, slippageReal, account.accAddress, exitFees as LoopringMap<OffchainFeeInfo>,\n            ammMap[amm], ammPoolSnapshot, tokenMap as any, idIndex as IdMap, 0)\n\n        if (isAtoB) {\n            data.coinB.tradeValue = parseFloat(toBig(request.exitTokens.unPooled[1].volume)\n                .div('1e' + coinB.decimals).toFixed(marketInfo.precisionForPrice))\n        } else {\n            data.coinA.tradeValue = parseFloat(toBig(request.exitTokens.unPooled[0].volume)\n                .div('1e' + coinA.decimals).toFixed(marketInfo.precisionForPrice))\n        }\n\n        setAmmExitData({\n            coinA: data.coinA as IBData<C>,\n            coinB: data.coinB as IBData<C>,\n            slippage,\n        })\n\n        setExitRequest({\n            rawVal,\n            ammInfo,\n            request,\n        })\n        // }\n\n    }, globalSetup.wait), [])\n\n    const handleExitAmmPoolEvent = (data: AmmData<IBData<any>>, type: 'coinA' | 'coinB') => {\n        handleExitInDebounce(data, type, exitFees, ammPoolSnapshot,tokenMap,account)\n    };\n\n\n    const [isJoinLoading, setJoinLoading] = useState(false)\n\n    const [isExitLoading, setExitLoading] = useState(false)\n\n    const removeAmmCalculator = React.useCallback(async function (props\n    ) {\n        setExitLoading(true);\n        //TODO: onExit\n        myLog('removeAmmCalculator props:', props)\n\n        // const { exitRequest } = props\n\n        if (!LoopringAPI.ammpoolAPI || !LoopringAPI.userAPI || !exitRequest || !account?.eddsaKey?.sk) {\n            myLog(' onExit ammpoolAPI:', LoopringAPI.ammpoolAPI,\n                'exitRequest:', exitRequest)\n\n            setAmmAlertText(t('labelExitAmmFailed'))\n            setAmmToastOpen(true)\n            setExitLoading(false);\n            return\n        }\n\n        // const acc: Lv2Account = store.getState().account\n\n        const { ammInfo, request } = exitRequest\n\n        const patch: AmmPoolRequestPatch = {\n            chainId: store.getState().system.chainId as ChainId,\n            ammName: ammInfo.__rawConfig__.name,\n            poolAddress: ammInfo.address,\n            eddsaKey: account.eddsaKey.sk\n        }\n\n        const burnedReq: GetNextStorageIdRequest = {\n            accountId: account.accountId,\n            sellTokenId: request.exitTokens.burned.tokenId as number\n        }\n        const storageId0 = await LoopringAPI.userAPI.getNextStorageId(burnedReq, account.apiKey)\n\n        request.storageId = storageId0.offchainId\n\n        try {\n\n            myLog('exit req:', request)\n            setAmmExitData({\n                ...ammExitData, ...{\n                    coinA: { ...ammExitData.coinA, tradeValue: 0 },\n                    coinB: { ...ammExitData.coinB, tradeValue: 0 },\n                }\n            })\n            const response = await LoopringAPI.ammpoolAPI.exitAmmPool(request, patch, account.apiKey)\n\n            myLog('exit ammpool response:', response)\n\n            if ((response.exitAmmPoolResult as any)?.resultInfo) {\n                setAmmAlertText(t('labelExitAmmFailed'))\n            } else {\n                setAmmAlertText(t('labelExitAmmSuccess'))\n                walletService.sendUserUpdate()\n                // await delayAndUpdateWalletLayer2()\n            }\n\n        } catch (reason) {\n            dumpError400(reason)\n            setExitLoading(false)\n            setAmmAlertText(t('labelExitAmmFailed'))\n        } finally {\n            setAmmToastOpen(true)\n        }\n\n    }, [exitRequest, ammExitData, account, t])\n\n    const removeAmmClickMap = Object.assign(deepClone(btnClickMap), {\n        [fnType.ACTIVATED]: [removeAmmCalculator]\n    })\n\n    const onAmmRemoveClick = React.useCallback((props: AmmData<IBData<any>>) => {\n\n        myLog('onAmmRemoveClick, exitRequest:', exitRequest, ' ammExitData:', ammExitData)\n        accountStaticCallBack(removeAmmClickMap, [props])\n    }, [exitRequest, ammExitData, removeAmmClickMap]);\n\n    // useCustomDCEffect(() => {\n    //     if (walletLayer2Status !== SagaStatus.UNSET || !pair || !snapShotData) {\n    //         return\n    //     }\n    //\n    //     const { walletMap } = makeWalletLayer2()\n    //     initAmmData(pair, walletMap)\n    //\n    //     myLog('init snapshot:', snapShotData.ammPoolsBalance)\n    //\n    //     setAmmPoolSnapShot(snapShotData.ammPoolsBalance)\n    //\n    // }, [walletLayer2Status, pair, snapShotData, account?.accAddress,]);\n    const  walletLayer2Callback= React.useCallback(()=>{\n        // const walletMap = makeWalletLayer2().walletMap ?? {} as WalletMap<R>\n        // setWalletMap2(walletMap)\n        // debugger\n        if(pair && snapShotData){\n            const { walletMap } = makeWalletLayer2()\n            initAmmData(pair, walletMap)\n            myLog('init snapshot:', snapShotData.ammPoolsBalance)\n            setAmmPoolSnapShot(snapShotData.ammPoolsBalance)\n            setExitLoading(false)\n            setJoinLoading(false)\n        }\n\n    },[ pair, snapShotData])\n\n    useWalletHook({walletLayer2Callback})\n    React.useEffect(()=>{\n        walletLayer2Callback()\n        // if(walletLayer2Status === SagaStatus.UNSET){\n        //\n        // }\n    },[pair, snapShotData])\n    return {\n        onRefreshData: updateAmmPoolSnapshot,\n        ammAlertText,\n        ammToastOpen,\n        setAmmToastOpen,\n\n        ammCalcData,\n        ammJoinData,\n        ammExitData,\n        isJoinLoading,\n        isExitLoading,\n        handleJoinAmmPoolEvent,\n        handleExitAmmPoolEvent,\n        onAmmRemoveClick,\n        onAmmAddClick,\n        ammDepositBtnI18nKey,\n        ammWithdrawBtnI18nKey,\n    }\n}","import React from \"react\";\nimport { AmmActivity, CoinInfo, MyAmmLP, SagaStatus, TradeFloat } from \"@loopring-web/common-resources\";\nimport { useTokenMap } from \"stores/token\";\nimport { useRouteMatch } from 'react-router';\nimport moment from 'moment'\nimport { AmmDetailStore, useAmmMap } from '../../../stores/Amm/AmmMap';\nimport { useWalletLayer2 } from '../../../stores/walletLayer2';\nimport { makeTickView, makeWalletLayer2, pairDetailBlock, WalletMapExtend } from '../../../hooks/help';\nimport { AmmPoolSnapshot, AmmUserRewardMap, getExistedMarket, TickerData, TradingInterval } from 'loopring-sdk';\nimport { deepClone } from '../../../utils/obj_tools';\nimport { getUserAmmTransaction, makeMyAmmMarketArray } from '../../../hooks/help/marketTable';\nimport { AmmRecordRow } from '@loopring-web/component-lib';\nimport { AmmPoolActivityRule, LoopringMap } from 'loopring-sdk/dist/defs/loopring_defs';\nimport { useSystem } from '../../../stores/system';\nimport { makeMyAmmWithSnapshot } from '../../../hooks/help/makeUIAmmActivityMap';\nimport { useUserRewards } from '../../../stores/userRewards';\nimport { LoopringAPI } from 'api_wrapper';\nimport { myLog } from '../../../utils/log_tools';\nimport { useWalletHook } from '../../../services/wallet/useWalletHook';\n\nconst makeAmmDetailExtendsActivityMap = ({ammMap, coinMap, ammActivityMap, ammKey}: any) => {\n\n    if (ammMap && coinMap) {\n        let ammDetail = deepClone(ammMap[ ammKey as string ]);\n        const ammActivity = ammActivityMap [ ammKey as string ];\n\n        if (ammDetail && ammDetail.coinA) {\n            ammDetail.myCoinA = coinMap[ ammDetail.coinA ];\n            ammDetail.myCoinB = coinMap[ ammDetail.coinB ];\n            ammDetail[ 'activity' ] = ammActivity ? ammActivity : {};\n        }\n        return ammDetail;\n    }\n}\ntype PgAmmDetail<C extends { [ key: string ]: any }> = AmmDetailStore<C> & {\n    myCoinA: CoinInfo<C>,\n    myCoinB: CoinInfo<C>,\n    activity: AmmActivity<C> | undefined\n}\n\nexport type ammHistoryItem = {\n    close: number;\n    timeStamp: number;\n}\n\nexport const useCoinPair = <C extends { [ key: string ]: any }>(ammActivityMap: LoopringMap<LoopringMap<AmmPoolActivityRule[]>>) => {\n    const match: any = useRouteMatch(\"/liquidity/pools/coinPair/:symbol\")\n    const {coinMap, tokenMap, marketArray} = useTokenMap();\n    const {faitPrices} = useSystem();\n    const {ammMap, getAmmMap, status: ammMapStatus} = useAmmMap();\n    const {userRewardsMap, status: useUserRewardsStatus} = useUserRewards()\n\n    // const {account} = useAccount();\n\n\n    // const {ammMap, getAmmMap} = ammMapState;\n\n    // const {ammMap,updateAmmMap} = useAmmMap();\n    // const walletLayer2State = useWalletLayer2();\n    const {walletLayer2} = useWalletLayer2();\n    const [walletMap, setWalletMap] = React.useState<WalletMapExtend<C> | undefined>(undefined);\n    // const [ammRecordArray, setAmmRecordArray] = React.useState<AmmRecordRow<C>[]>([]);\n    const [ammMarketArray, setAmmMarketArray] = React.useState<AmmRecordRow<C>[]>([]);\n\n\n    const [myAmmMarketArray, setMyAmmMarketArray] = React.useState<AmmRecordRow<C>[]>([]);\n    const [ammUserRewardMap, setAmmUserRewardMap] = React.useState<AmmUserRewardMap | undefined>(undefined);\n    const [snapShotData, setSnapShotData] = React.useState<{\n        tickerData: TickerData | undefined\n        ammPoolsBalance: AmmPoolSnapshot | undefined\n    } | undefined>(undefined);\n\n    const [myAmm, setMyAmm] = React.useState<MyAmmLP<C>>(\n        {\n            feeA: 0,\n            feeB: 0,\n            feeDollar: 0,\n            feeYuan: 0,\n            reward: 0,\n            rewardToken: undefined as any,\n            balanceA: 0,\n            balanceB: 0,\n            balanceYuan: 0,\n            balanceDollar: 0,\n        })\n    // const [ammPoolsBalance, setAmmpoolsbalance] = React.useState<AmmPoolSnapshot|undefined>(undefined);\n    const [coinPairInfo, setCoinPairInfo] = React.useState<PgAmmDetail<C>>({\n        myCoinA: undefined,\n        myCoinB: undefined,\n        activity: undefined,\n        totalRewards: undefined,\n        amountDollar: undefined,\n        amountYuan: undefined,\n        totalLPToken: undefined,\n        totalA: undefined,\n        totalB: undefined,\n        rewardToken: undefined,\n        rewardValue: undefined,\n        feeA: undefined,\n        feeB: undefined,\n        isNew: undefined,\n        isActivity: undefined,\n        APY: undefined\n    } as unknown as PgAmmDetail<C>);\n    const [tradeFloat, setTradeFloat] = React.useState<TradeFloat | undefined>(undefined);\n    const [pair, setPair] = React.useState<{ coinAInfo: CoinInfo<C> | undefined, coinBInfo: CoinInfo<C> | undefined }>({\n        coinAInfo: undefined,\n        coinBInfo: undefined,\n    });\n    const [pairHistory, setPairHistory] = React.useState<ammHistoryItem[]>([])\n\n    const walletLayer2DoIt = React.useCallback((market) => {\n        const {walletMap: _walletMap} = makeWalletLayer2();\n\n        setWalletMap(_walletMap as WalletMapExtend<any>)\n        if (_walletMap) {\n            getUserAmmTransaction()?.then((marketTrades) => {\n                let _myTradeArray = makeMyAmmMarketArray(market, marketTrades)\n                setMyAmmMarketArray(_myTradeArray ? _myTradeArray : [])\n            })\n        }\n        return _walletMap\n    }, [makeWalletLayer2, getUserAmmTransaction, makeMyAmmMarketArray, marketArray, pair])\n\n    const getPairList = React.useCallback(async () => {\n        if (LoopringAPI.exchangeAPI && coinPairInfo.coinA && coinPairInfo.coinB) {\n            const {myCoinA, myCoinB} = coinPairInfo\n            const market = `${myCoinA?.name}-${myCoinB?.name}`\n            const ammList = await LoopringAPI.exchangeAPI.getMixCandlestick({\n                market: market,\n                interval: TradingInterval.d1,\n                limit: 30\n            })\n            const formattedPairHistory = ammList.candlesticks.map(o => ({\n                ...o,\n                timeStamp: o.timestamp,\n                date: moment(o.timestamp).format('MMM DD')\n            })).sort((a, b) => a.timeStamp - b.timeStamp)\n            setPairHistory(formattedPairHistory)\n        }\n    }, [coinPairInfo])\n\n    React.useEffect(() => {\n        getPairList()\n    }, [getPairList])\n\n    React.useEffect(() => {\n        const coinKey = match?.params.symbol ?? undefined;\n        let _tradeFloat: Partial<TradeFloat> = {}\n        const [, coinA, coinB] = coinKey.match(/(\\w+)-(\\w+)/i)\n        let {\n            amm,\n            market\n        } = getExistedMarket(marketArray, coinA, coinB);\n\n        const _coinPairInfo = makeAmmDetailExtendsActivityMap({ammMap, coinMap, ammActivityMap, ammKey: amm})\n        setCoinPairInfo(_coinPairInfo ? _coinPairInfo : {})\n\n        if (coinMap) {\n            setPair({\n                coinAInfo: coinMap[ coinA ],\n                coinBInfo: coinMap[ coinB ]\n            })\n        }\n\n        // let _walletMap: WalletMapExtend<C>|undefined = undefined\n        if (walletLayer2) {\n            walletLayer2DoIt(market);\n        }\n\n        if (amm && market && ammMap) {\n            //TODO should add it into websocket\n            getAmmMap();\n            let apiList = [\n                pairDetailBlock({coinKey: market, ammKey: amm, ammMap}),\n                // LoopringAPI.ammpoolAPI.getAmmPoolSnapshot({poolAddress: ammMap[ ammKey ].address}),\n                // LoopringAPI.exchangeAPI.getMixTicker({market: coinKey})])\n            ];\n            // @ts-ignore\n            Promise.all([...apiList]).then(\n                ([{ammPoolsBalance, tickMap}\n                     //  ,ammUserRewardMap\n                 ]: any[]) => {\n                    if (tokenMap) {\n                        const _snapShotData = {\n                            tickerData: tickMap[ market ],\n                            ammPoolsBalance: ammPoolsBalance,\n                        }\n                        _tradeFloat = makeTickView(tickMap[ market ] ? tickMap[ market ] : {})\n                        setTradeFloat(_tradeFloat as TradeFloat);\n                        setCoinPairInfo({..._coinPairInfo})\n                        setSnapShotData(_snapShotData)\n\n                    }\n                }).catch((error) => {\n                console.log(error);\n                throw  Error\n            })\n        }\n\n    }, []);\n\n    // React.useEffect(() => {\n    //     const {market} = getExistedMarket(marketArray, pair.coinAInfo?.simpleName as string, pair.coinBInfo?.simpleName as string);\n    //     if (market && snapShotData && snapShotData.ammPoolsBalance && walletLayer2Status === SagaStatus.UNSET) {\n    //         const _walletMap = walletLayer2DoIt(market);\n    //         const _myAmm: MyAmmLP<C> = makeMyAmmWithSnapshot(market, _walletMap, ammUserRewardMap, snapShotData);\n    //         setMyAmm(_myAmm)\n    //         // case \"DONE\":\n    //         //             walletLayer2State.statusUnset();\n    //\n    //         //         break;\n    //         //     default:\n    //         //         break;\n    //         //\n    //         // }\n    //     }\n    // }, [walletLayer2Status])\n    const  walletLayer2Callback= React.useCallback(()=>{\n        const {market} = getExistedMarket(marketArray, pair.coinAInfo?.simpleName as string, pair.coinBInfo?.simpleName as string);\n        if (market && snapShotData && snapShotData.ammPoolsBalance ) {\n            const _walletMap = walletLayer2DoIt(market);\n            const _myAmm: MyAmmLP<C> = makeMyAmmWithSnapshot(market, _walletMap, ammUserRewardMap, snapShotData);\n            setMyAmm(_myAmm);\n        }\n    },[])\n    useWalletHook({walletLayer2Callback})\n\n\n    React.useEffect(() => {\n        const {market} = getExistedMarket(marketArray, pair.coinAInfo?.simpleName as string, pair.coinBInfo?.simpleName as string);\n        if (useUserRewardsStatus === SagaStatus.UNSET && market) {\n            // const {userRewardsMap} = store.getState().userRewardsMap\n            setAmmUserRewardMap(userRewardsMap)\n            const _myAmm: MyAmmLP<C> = makeMyAmmWithSnapshot(market, walletMap, ammUserRewardMap, snapShotData);\n            setMyAmm(_myAmm);\n        }\n\n    }, [useUserRewardsStatus])\n\n    React.useEffect(() => {\n        if (ammMapStatus === SagaStatus.UNSET && ammMap && pair.coinAInfo?.simpleName && pair.coinBInfo?.simpleName) {\n            const _coinPairInfo = makeAmmDetailExtendsActivityMap(\n                {\n                    ammMap,\n                    coinMap,\n                    ammActivityMap,\n                    ammKey: 'AMM-' + pair.coinAInfo.simpleName + pair.coinBInfo.simpleName\n                })\n            setCoinPairInfo({\n                ...coinPairInfo, ..._coinPairInfo,\n                tradeFloat: coinPairInfo.tradeFloat\n            })\n\n        }\n    }, [ammMapStatus])\n\n\n    return {\n        walletMap,\n        myAmm,\n        // tickerData,\n        coinPairInfo,\n        snapShotData,\n        // ammPoolsBalance,\n        pair,\n        tradeFloat,\n        ammMarketArray,\n        myAmmMarketArray,\n        pairHistory,\n    }\n}","import React from 'react';\nimport { WithTranslation, withTranslation } from 'react-i18next';\nimport { AmmRecordTable, ChartType, ScaleAreaChart, TradeTitle, useSettings } from '@loopring-web/component-lib';\nimport {\n    AvatarCoinStyled,\n    Currency,\n    EmptyValueTag,\n    getThousandFormattedNumbers,\n    PriceTag,\n    unit\n} from '@loopring-web/common-resources';\nimport { Avatar, Box, Breadcrumbs, Grid, Link, Typography } from '@material-ui/core';\nimport { AmmPanelView } from '../AmmPanel';\nimport moment from 'moment';\nimport styled from '@emotion/styled/';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\n\nimport { useCoinPair } from './hooks';\nimport { AmmPoolActivityRule, LoopringMap } from 'loopring-sdk/dist/defs/loopring_defs';\nimport { FixedStyle, StylePaper } from 'pages/styled';\n\n\n//******************** page code ************************//\n//  ${({theme}) => theme.border.defaultFrame({c_key: 'blur'})};\nconst BoxStyled = styled(Box)`\n  flex: 1;\n  background: var(--color-box);\n  border-radius: ${({theme}) => theme.unit}px;\n  padding: ${({theme}) => theme.unit * 2}px;\n  height: 120px;\n  // min-width: 160px;\n  max-width: 210px;\n  // & .MuiAvatar-root {\n    //     height: ${({theme}) => theme.fontDefault.h4};\n    //     width: ${({theme}) => theme.fontDefault.h4};\n  // }\n`;\n\nconst BoxTopStyled = styled(Box)`\n  background: var(--color-box);\n  border-radius: ${({theme}) => theme.unit}px;\n  padding: ${({theme}) => theme.unit * 2}px;\n  width: var(--swap-box-width);\n  box-sizing: border-box;\n  //height: 120px;\n  //min-width: 160px;\n  // & .MuiAvatar-root {\n    //   height: ${({theme}) => theme.fontDefault.h4};\n    //   width: ${({theme}) => theme.fontDefault.h4};\n  // }\n`;\n// const StyleWrapper = styled(Box)`\n//   //position: relative;\n//   //width: 100%;\n//   background: var(--color-box);\n//   border-radius: ${({theme}) => theme.unit}px;\n// ` as typeof Grid\n\n\nconst applyProps = (index: number) => {\n    return {\n        id: `simple-tab-${index}`,\n        'aria-controls': `tabpanel-${index}`,\n    }\n}\n\nexport const CoinPairPanel = withTranslation('common')(<R extends { [ key: string ]: any }, I extends { [ key: string ]: any }>\n({t, ammActivityMap, ...rest}:\n     WithTranslation & { ammActivityMap: LoopringMap<LoopringMap<AmmPoolActivityRule[]>> | undefined } & any) => {    //ActivityMap<I, I>\n    const {currency} = useSettings();\n    const {\n        tradeFloat,\n        snapShotData,\n        pair,\n        coinPairInfo,\n        walletMap,\n        ammMarketArray,\n        myAmmMarketArray,\n        myAmm,\n        pairHistory,\n    } = useCoinPair({ammActivityMap});\n    const [tabIndex, setTabIndex] = React.useState<0 | 1>(0);\n    const [page, setPage] = React.useState(rest?.page ? rest.page : 1);\n    const handleChange = (event: any, newValue: 0 | 1) => {\n        setTabIndex(newValue);\n        setPage(1);\n    }\n    const _handlePageChange = React.useCallback((page: number) => {\n        setPage(page);\n    }, [])\n    // const sellIconHasLoaded = useImage(coinPairInfo.myCoinA?.icon ? coinPairInfo.myCoinA?.icon : '').hasLoaded;\n    // const buyIconHasLoaded = useImage(coinPairInfo.myCoinB?.icon ? coinPairInfo.myCoinB?.icon : '').hasLoaded;\n    const {coinJson} = useSettings();\n    const coinAIcon: any = coinJson [ coinPairInfo.myCoinA?.simpleName ];\n    const coinBIcon: any = coinJson [ coinPairInfo.myCoinB?.simpleName ];\n\n    return <>\n        <Box marginBottom={2}>\n            <Breadcrumbs aria-label=\"breadcrumb\">\n                <Link color=\"textSecondary\" href=\"/#/liquidity/pools\">\n                    {t('labelAmmList')}\n                </Link>\n                <Typography color={'textSecondary'} display={'flex'} alignItems={'center'}\n                            justifyContent={'center'}\n                >{pair.coinAInfo?.simpleName}-{pair.coinBInfo?.simpleName}</Typography>\n            </Breadcrumbs>\n        </Box>\n        <Box display={'flex'} flex={1} flexDirection={'row'}>\n\n            <Grid container marginRight={3} alignContent={'stretch'} direction={'column'} flexWrap={'nowrap'}>\n                <Grid item xs={12} marginTop={2}>\n                    <TradeTitle {...{\n                        ...rest, t,\n                        ...pair,\n                        tradeFloat,\n                        isNew: false\n                    }}></TradeTitle>\n                </Grid>\n                {/*<Box flex={1} display={'flex'} alignItems={'stretch'} flexDirection=\"row\" marginTop={3}>*/}\n                <Grid item xs={12} display={'flex'} flexDirection={'column'} justifyContent={'space-between'}>\n                    <Box flex={1} width={'101%'} minHeight={396} maxHeight={460}>\n                        <ScaleAreaChart\n                            type={ChartType.Trend}\n                            data={pairHistory}\n                            extraInfo={pair.coinBInfo?.simpleName}\n                            showXAxis\n                        />\n                    </Box>\n                    <Box display={'flex'} flexDirection={'row'} justifyContent={'space-between'}>\n                        <BoxStyled paddingX={2} display={'flex'} flexDirection={'column'}>\n                            <Typography component={'p'} color={'textSecondary'} display={'flex'}\n                                        marginBottom={1 / 2 * 3}\n                            >\n                                {t('labelAmmTotalToken')}\n                            </Typography>\n                            <Typography component={'span'} display={'flex'} flexDirection={'row'}\n                                        justifyContent={'space-between'} alignItems={'center'}\n                                        style={{textTransform: 'capitalize'}} color={'textPrimary'}>\n                                <Box component={'span'} className={'logo-icon'} height={'var(--list-menu-coin-size)'}\n                                     width={'var(--list-menu-coin-size)'} alignItems={'center'}\n                                     justifyContent={'center'}>\n                                    {coinAIcon ?\n                                        <AvatarCoinStyled imgx={coinAIcon.x} imgy={coinAIcon.y}\n                                                          imgheight={coinAIcon.height}\n                                                          imgwidth={coinAIcon.width} size={24}\n                                                          variant=\"circular\"\n                                                          alt={coinPairInfo?.myCoinA?.simpleName as string}\n                                            // src={sellData?.icon}\n                                                          src={'data:image/svg+xml;utf8,' + '<svg width=\"36\" height=\"36\" viewBox=\"0 0 36 36\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M0 0H36V36H0V0Z\"/></svg>'}/>\n                                        : <Avatar variant=\"circular\" alt={coinPairInfo?.myCoinA?.simpleName as string}\n                                                  style={{\n                                                      height: 'var(--list-menu-coin-size))',\n                                                      width: 'var(--list-menu-coin-size)'\n                                                  }}\n                                            // src={sellData?.icon}\n                                                  src={'static/images/icon-default.png'}/>\n                                    }</Box>\n                                <Typography justifyContent={'center'} display={'flex'}>\n                                    <Typography component={'span'} alignSelf={'right'} height={24} lineHeight={'24px'}>\n                                        {getThousandFormattedNumbers(coinPairInfo.totalA, 6)}</Typography>\n                                    <Typography component={'span'} marginLeft={1} alignSelf={'right'} height={24}\n                                                lineHeight={'24px'}>\n                                        {/*<HiddenHidden>{t('labelLPTotal')}</Hidden>*/}\n                                        {coinPairInfo.myCoinA?.simpleName}\n                                    </Typography>\n\n                                </Typography>\n\n                            </Typography>\n                            <Typography component={'span'} display={'flex'} flexDirection={'row'}\n                                        justifyContent={'space-between'} alignItems={'center'} marginTop={1}\n                                        style={{textTransform: 'capitalize'}}>\n                                {/*<Typography component={'span'} marginRight={1 / 2}*/}\n                                {/*            color={'textSecondary'}>*/}\n                                {/*    */}\n                                {/*    /!*<Avatar variant=\"square\" sizes={'small'} alt={'coinLogo'}*!/*/}\n                                {/*    /!*    // src={coinBInfo?.icon}*!/*/}\n                                {/*    /!*        src={buyIconHasLoaded ? coinPairInfo?.myCoinB?.icon : 'static/images/icon-default.png'}/>*!/*/}\n                                {/*</Typography>*/}\n                                <Box component={'span'} className={'logo-icon'} height={'var(--list-menu-coin-size)'}\n                                     width={'var(--list-menu-coin-size)'} alignItems={'center'}\n                                     justifyContent={'center'}>{coinBIcon ?\n                                    <AvatarCoinStyled imgx={coinBIcon.x} imgy={coinBIcon.y} imgheight={coinBIcon.height}\n                                                      imgwidth={coinBIcon.width} size={24}\n                                                      variant=\"circular\"\n                                                      alt={coinPairInfo?.myCoinB?.simpleName as string}\n                                        // src={sellData?.icon}\n                                                      src={'data:image/svg+xml;utf8,' + '<svg width=\"36\" height=\"36\" viewBox=\"0 0 36 36\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M0 0H36V36H0V0Z\"/></svg>'}/>\n                                    : <Avatar variant=\"circular\" alt={coinPairInfo?.myCoinB?.simpleName as string}\n                                              style={{\n                                                  height: 'var(--list-menu-coin-size)',\n                                                  width: 'var(--list-menu-coin-size)'\n                                              }}\n                                        // src={sellData?.icon}\n                                              src={'static/images/icon-default.png'}/>}</Box>\n                                <Typography justifyContent={'center'} display={'flex'}>\n                                    <Typography component={'span'} alignSelf={'right'} height={24} lineHeight={'24px'}>\n                                        {getThousandFormattedNumbers(coinPairInfo.totalB, 6)}</Typography>\n                                    <Typography component={'span'} marginLeft={1} alignSelf={'right'} height={24}\n                                                lineHeight={'24px'}>\n                                        {/*<Hidden>{t('labelLPTotal')}</Hidden>*/}\n                                        {coinPairInfo.myCoinB?.simpleName}\n                                    </Typography>\n\n                                </Typography>\n\n                            </Typography>\n\n                        </BoxStyled>\n                        <BoxStyled paddingX={2} display={'flex'} flexDirection={'column'}>\n                            <Typography component={'p'} color={'textSecondary'} display={'flex'}\n                            >\n                                {t('label24Volume')}\n                            </Typography>\n                            <Typography variant={'h5'} marginTop={4}\n                                        component={'span'}>\n                                {currency === Currency.dollar ? PriceTag.Dollar + getThousandFormattedNumbers(tradeFloat && tradeFloat.priceDollar ? tradeFloat.priceDollar as number : 0, 2)\n                                    : PriceTag.Yuan + getThousandFormattedNumbers(tradeFloat && tradeFloat.priceYuan ? tradeFloat.priceYuan as number : 0, 2)}\n                            </Typography>\n\n                        </BoxStyled>\n                        <BoxStyled paddingX={2} display={'flex'} flexDirection={'column'}>\n                            <Typography component={'p'} color={'textSecondary'} display={'flex'}\n                            >\n                                {t('labelTVL')}\n                            </Typography>\n\n                            <Typography variant={'h5'} marginTop={4}\n                                        component={'span'}> {typeof coinPairInfo.amountDollar === 'undefined' ? EmptyValueTag :\n                                currency === Currency.dollar ? PriceTag.Dollar + getThousandFormattedNumbers(coinPairInfo.amountDollar, 2) : PriceTag.Yuan + getThousandFormattedNumbers(coinPairInfo.amountYuan ? coinPairInfo.amountYuan : 0, 2)}\n                            </Typography>\n\n\n                        </BoxStyled>\n                        <BoxStyled paddingX={2} display={'flex'} flexDirection={'column'}>\n                            <Typography component={'p'} color={'textSecondary'} display={'flex'}\n                            >\n                                {t('labelAPY')}\n                            </Typography>\n                            <Typography variant={'h5'} marginTop={4}\n                                        component={'span'}> {coinPairInfo.APY ? coinPairInfo.APY : EmptyValueTag}%\n                            </Typography>\n                        </BoxStyled>\n                    </Box>\n                    <Box>\n                        <Tabs value={tabIndex}\n                            //   onChange={handleChange}\n                              aria-label=\"tabs switch\">\n                            {/* <Tab label={t('labelAll')} {...applyProps(0)} /> */}\n                            <Tab label={t('labelMe')} {...applyProps(1)} />\n                        </Tabs>\n                        <StylePaper style={{marginTop: `${unit * 2}px`}}>\n                            {/*ammRecordArray*/}\n                            {tabIndex === 0 ? <AmmRecordTable\n                                rawData={ammMarketArray}\n                                handlePageChange={_handlePageChange} page={page}\n                            /> : <AmmRecordTable rawData={myAmmMarketArray} handlePageChange={_handlePageChange}\n                                                 page={page}/>}\n                        </StylePaper>\n                    </Box>\n                </Grid>\n\n                {/*</Box>*/}\n\n\n            </Grid>\n            <Box display={'flex'} style={{minWidth: 'var(--swap-box-width)'}}>\n                <FixedStyle>\n                    <Box className={'MuiPaper-elevation2'}>\n                        <AmmPanelView pair={pair} walletMap={walletMap} snapShotData={snapShotData}/>\n                    </Box>\n                    {typeof coinPairInfo.isActivity === 'undefined' ? '' :\n                        <BoxTopStyled paddingY={3} paddingX={1 / 2 * 5} display={'flex'}\n                                      flexDirection={'column'}>\n                            <Box display={'flex'} flexDirection={'row'} justifyContent={'space-between'}>\n                                <Typography display={'flex'} flexDirection={'column'} component={'div'}>\n                                    <Typography variant={'body2'} component={'h5'} color={'textSecondary'}>\n                                        {t('labelReward')}\n                                    </Typography>\n                                    <Typography variant={'body1'} component={'span'} color={'textPrimary'}>\n                                        {typeof coinPairInfo.isActivity === 'undefined' ? EmptyValueTag : <>\n                                            <Typography\n                                                component={'span'}>{coinPairInfo.activity ? getThousandFormattedNumbers(coinPairInfo.activity.totalRewards) : EmptyValueTag} </Typography>\n                                            <Typography\n                                                component={'span'}>{coinPairInfo.activity?.rewardToken?.simpleName}</Typography>\n                                        </>}\n                                    </Typography>\n                                </Typography>\n                                <Typography display={'flex'} flexDirection={'column'} alignItems={'flex-end'}\n                                            component={'div'}>\n                                    <Typography variant={'body2'} component={'h5'} color={'textSecondary'}>\n                                        {t('labelMyReward')}\n                                    </Typography>\n                                    <Typography variant={'body1'} component={'span'} color={'textPrimary'}>\n                                        {/*{typeof coinPairInfo.isActivity === 'undefined' ? EmptyValueTag : <>*/}\n                                        {typeof myAmm.reward === 'undefined' ? EmptyValueTag : <>\n\n                                            <Typography\n                                                component={'span'}> {getThousandFormattedNumbers(myAmm.reward)} </Typography>\n                                            <Typography\n                                                component={'span'}> {coinPairInfo.activity?.rewardToken?.simpleName}</Typography></>}\n\n                                    </Typography>\n                                </Typography>\n                            </Box>\n                            <Typography alignSelf={'flex-start'} variant={'body2'} color={'textSecondary'}\n                                        component=\"span\" marginTop={1}>\n                                {typeof coinPairInfo.isActivity === 'undefined' ? t('labelNoActiveEvent')\n                                    : <>\n                                        {t('labelDate')} :\n                                        <> {' ' + moment(coinPairInfo.activity?.duration.from).format('L') + ' - ' + moment(coinPairInfo.activity?.duration.to).format('L')}</>\n                                    </>\n                                }\n                            </Typography>\n                        </BoxTopStyled>\n                    }\n                </FixedStyle>\n\n            </Box>\n        </Box>\n    </>\n})\n\n\n\n\n\n\n\n","import React from 'react';\nimport { useAmmActivityMap } from '../../stores/Amm/AmmActivityMap';\n\nimport { AmmPoolActivityRule, LoopringMap } from 'loopring-sdk';\nimport { useAccount } from '../../stores/account/hook';\nimport { useUserRewards } from '../../stores/userRewards';\nimport { useAmmMap } from '../../stores/Amm/AmmMap';\nimport { SagaStatus } from '@loopring-web/common-resources';\n\nexport const useAmmPool = <R extends {[key:string]:any},I extends {[key:string]:any}>()=>{\n    const {ammActivityMap,status:ammActivityMapStatus}  = useAmmActivityMap()\n    const {account,status:accountStatus} = useAccount();\n    const {ammMap,getAmmMap} = useAmmMap();\n    const [_ammActivityMap,setAmmActivityMap] = React.useState<LoopringMap<LoopringMap<AmmPoolActivityRule[]>>|undefined>(ammActivityMap)\n    // init AmmMap at begin\n    React.useEffect(() => {\n        if (!ammMap || Object.keys(ammMap).length === 0) {\n            getAmmMap();\n        }\n    }, []);\n\n    React.useEffect(() => {\n        if(ammActivityMapStatus === SagaStatus.UNSET){\n            setAmmActivityMap(ammActivityMap)\n        }\n    }, [ammActivityMapStatus])\n    // React.useEffect(() => {\n    //     if(accountStatus === SagaStatus.UNSET){\n    //\n    //     }\n    // }, [accountStatus])\n\n    return {\n        ammActivityMap:_ammActivityMap\n    }\n\n}\n\n","import { useRouteMatch } from 'react-router'\n\nimport { Box, Typography } from '@material-ui/core'\nimport {\n    SubMenu,\n    SubMenuList as BasicSubMenuList,\n} from '@loopring-web/component-lib'\nimport { withTranslation, WithTranslation } from 'react-i18next'\nimport styled from '@emotion/styled'\nimport { subMenuLiquidity } from '@loopring-web/common-resources'\nimport { PoolsPanel } from './PoolsPanel'\nimport { CoinPairPanel } from './CoinPairPanel';\n\nimport { useAmmPool } from './hook';\n\nconst TableWrapperStyled = styled(Box)`\n    display: flex;\n    flex-direction: column;\n    justify-content: stretch;\n    align-items: stretch;\n    flex: 1;\n`\n\nexport const subMenu = subMenuLiquidity\n\nconst SubMenuList = withTranslation(['layout','common'], { withRef: true })(BasicSubMenuList);\nexport const LiquidityPage =  withTranslation('common', { withRef: true })(({ t }: WithTranslation) => {\n\n    // const { ammFee } = useAmmPool('LRC', 'ETH')\n    //\n    // console.log('--- > ammFee:', ammFee)\n    //\n    const {ammActivityMap} = useAmmPool();\n    let match: any = useRouteMatch(['/liquidity/:item',':next/']);\n    const selected = match?.params.item ?? 'pools'\n    let matchPair: any = useRouteMatch(['/liquidity/:item/:next/:symbol']);\n    let symbol:any = undefined\n    if (matchPair && matchPair?.params?.next && matchPair.params.item === 'pools') {\n       if(!matchPair.params.symbol){\n           symbol='LRC-ETH';\n       }else{\n           symbol=matchPair.params.symbol;\n       }\n    }\n    \n    return (\n        <>\n            { symbol && <Box display={'flex'} flexDirection={'column'}  flex={1} alignSelf={'flex-start'}>\n                <CoinPairPanel ammActivityMap={ammActivityMap}/>\n            </Box>\n            }\n            {!symbol && <TableWrapperStyled>\n                {/* <Box width={'200px'} display={'flex'} justifyContent={'stretch'} marginRight={3} marginBottom={3}>\n                    <SubMenu>\n                        <SubMenuList selected={selected} subMenu={subMenu as any} />\n                    </SubMenu>\n                </Box> */}\n                <Typography \n                    variant={'h2'} \n                    component={'div'} \n                    fontFamily={'Roboto'}\n                    marginTop={2}\n                    marginBottom={3}\n                >{t('labelLiquidityPageTitle')}</Typography>\n                <Box minHeight={420} display={'flex'} alignItems={'stretch'} justifyContent={'stretch'} /* flexDirection=\"column\" */ marginTop={0} flex={1} marginBottom={3}>\n                    {(selected === 'pools' && !symbol ) && <PoolsPanel ammActivityMap={ammActivityMap}/>}\n                    {/* {(selected === 'amm-mining' && !symbol ) && <AmmMiningView ammActivityMap={ammActivityMap}/>}\n                    {(selected === 'my-liquidity' && !symbol ) && <MyLiquidity ammActivityMap={ammActivityMap}/>}\n                    {selected === 'orderBook-Mining' && <AmmMiningView ammActivityMap={ammActivityMap}/>} */}\n                    {/*{selected === 'orders' && <OrderPanel />}*/}\n                </Box>\n            </TableWrapperStyled>\n            }\n        </>\n    )\n\n}\n)","import { AmmCard, AmmProps, EmptyDefault } from '@loopring-web/component-lib';\nimport React from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { AmmCardProps, AmmData, AmmInData, IBData } from '@loopring-web/common-resources';\nimport { Box, Grid, Typography } from '@material-ui/core';\nimport styled from '@emotion/styled'\nimport { useAmmMiningUI } from './hook';\n// import Tabs from '@material-ui/core/Tabs';\n// import Tab from '@material-ui/core/Tab';\nimport { useAmmPool } from '../LiquidityPage/hook'\nimport { Trans, withTranslation } from 'react-i18next';\nimport { AmmPoolActivityRule, LoopringMap } from 'loopring-sdk/dist/defs/loopring_defs';\n\nconst WrapperStyled = styled(Box)`\n    display: flex;\n    flex-direction: column;\n    flex: 1;\n` as typeof Box\n\n// const AmmListWrapperStyled = styled(Box)`\n//     display: flex;\n// `\n\ntype ClickHandler = {\n    handleClick: (pair: string) => void\n}\n\nconst AmmCardWrap = React.memo(React.forwardRef((props: AmmCardProps<{ [ key: string ]: any }> & ClickHandler, ref) => {\n    const pair = `${props.coinAInfo.name}-${props.coinBInfo.name}`\n    return props ? <AmmCard ref={ref} {...props} handleClick={() => props.handleClick(pair)}/> : <></>\n}));\n\nconst AmmList = <I extends { [ key: string ]: any }>({ammActivityViewMap}: { ammActivityViewMap: Array<AmmCardProps<I>> }) => {\n    let history = useHistory();\n    const jumpTo = React.useCallback((pair: string) => {\n        if (history) {\n            history.push(`/liquidity/pools/coinPair/${pair}`)\n        }\n    }, [history])\n\n    return <>{ammActivityViewMap.length ? ammActivityViewMap.map((item: AmmCardProps<I>, index) =>\n        <Grid item xs={12} sm={6} lg={4} key={index}>\n            <AmmCardWrap handleClick={jumpTo} {...item as any} />\n        </Grid>\n    ) : <Box flex={1} display={'flex'} alignItems={'center'} justifyContent={'center'} flexDirection={'column'}>\n        <EmptyDefault height={\"calc(100% - 35px)\"} marginTop={10} display={'flex'} flexWrap={'nowrap'} alignItems={'center'} justifyContent={'center'}\n                      flexDirection={'column'} message={() => {\n            return <Trans i18nKey=\"labelEmptyDefault\">\n                Content is Empty\n            </Trans>\n        }}/> </Box>}   </>\n}\n\nexport const MiningPage = withTranslation('common')(<T extends AmmData<C extends IBData<I> ? C : IBData<I>>, I,\n    ACD extends AmmInData<I>,\n    C = IBData<I>>({ammProps, t, ...rest}: {\n    ammProps: AmmProps<T, I, ACD>,\n    ammActivityMap: LoopringMap<LoopringMap<AmmPoolActivityRule[]>> | undefined,\n} & any) => {\n    const {ammActivityMap} = useAmmPool();\n    const {\n        ammActivityViewMap,\n        ammActivityPastViewMap\n    } = useAmmMiningUI({ammActivityMap});\n    const [tabIndex, setTabIndex] = React.useState<0 | 1>(0);\n    const handleChange = (event: any, newValue: 0 | 1) => {\n        setTabIndex(newValue);\n    }\n    const jointAmmViewMap = [...ammActivityViewMap, ...ammActivityPastViewMap]\n\n    return  <WrapperStyled>\n        {/* <Tabs value={tabIndex}\n                onChange={handleChange}\n                aria-label=\"tabs switch\">\n            <Tab label={t('labelCurrentActivities')}/>\n            <Tab label={t('labelPastActivities')}/>\n        </Tabs> */}\n            <Typography\n                    variant={'h2'}\n                    component={'div'}\n                    fontFamily={'Roboto'}\n                    marginTop={2}\n                    marginBottom={3}\n                >{t('labelMiningPageTitle')}</Typography>\n            <Grid container spacing={5}>\n                <AmmList ammActivityViewMap={jointAmmViewMap}/>\n            </Grid>\n    </WrapperStyled>\n})\n","import { AmmCardProps } from '@loopring-web/common-resources';\nimport { AmmPoolActivityRule, AmmPoolActivityStatus,LoopringMap } from 'loopring-sdk';\nimport React from 'react';\nimport {\n    makeUIAmmActivityMap\n} from '../../hooks/help';\n\nimport { useUserRewards } from '../../stores/userRewards';\n\nexport const useAmmMiningUI = <R extends { [ key: string ]: any }, I extends { [ key: string ]: any }>(\n    {\n        ammActivityMap\n    }: { ammActivityMap: LoopringMap<LoopringMap<AmmPoolActivityRule[]>> | undefined }\n): {\n    ammActivityViewMap: Array<AmmCardProps<I>>,\n    ammActivityPastViewMap: Array<AmmCardProps<I>>\n} => {\n    const  userRewardsMapState =  useUserRewards();// store.getState().userRewardsMap\n    // const {coinMap} = useTokenMap();\n    // const ammMapState = useAmmMap();\n    // const walletLayer2State = useWalletLayer2();\n    const [ammActivityViewMap, setAmmActivityViewMap] = React.useState<Array<AmmCardProps<I>>>([]);\n\n\n    const [ammActivityPastViewMap, setAmmActivityPastViewMap] = React.useState<Array<AmmCardProps<I>>>(\n        []);\n    // const [ammUserRewardMap, setAmmUserRewardMap] = React.useState<AmmUserRewardMap>(\n    //     {});\n\n\n    // );\n    React.useEffect(() => {\n        if(ammActivityMap && Object.keys(ammActivityMap).length>0 ){\n\n           // getAmmPoolUserRewards().then((ammUserRewardMap)=>{\n                // setAmmUserRewardMap(ammUserRewardMap as AmmUserRewardMap);\n                setAmmActivityViewMap(makeUIAmmActivityMap(\n                    {\n                        ammActivityMap,\n                        type: 'AMM_MINING',\n                        ammPoolActivityStatus: [AmmPoolActivityStatus.NotStarted, AmmPoolActivityStatus.InProgress]\n                    }, userRewardsMapState.userRewardsMap\n                ));\n                setAmmActivityPastViewMap(\n                    makeUIAmmActivityMap(\n                        {\n                            ammActivityMap,\n                            type: 'AMM_MINING',\n                            ammPoolActivityStatus: [AmmPoolActivityStatus.EndOfGame]\n                        }, userRewardsMapState.userRewardsMap\n                    ))\n          //  })\n        }\n\n    },[ammActivityMap])\n    React.useEffect(() => {\n            if (userRewardsMapState.status === \"ERROR\") {\n                //TODO: solve error\n                userRewardsMapState.statusUnset();\n            } else if (userRewardsMapState.status === \"DONE\") {\n                userRewardsMapState.statusUnset();\n                setAmmActivityViewMap(\n                    makeUIAmmActivityMap(\n                    {\n                        ammActivityMap,\n                        type: 'AMM_MINING',\n                        ammPoolActivityStatus: [AmmPoolActivityStatus.NotStarted, AmmPoolActivityStatus.InProgress]\n                    }, userRewardsMapState.userRewardsMap\n                ));\n                setAmmActivityPastViewMap(\n                    makeUIAmmActivityMap(\n                        {\n                            ammActivityMap,\n                            type: 'AMM_MINING',\n                            ammPoolActivityStatus: [AmmPoolActivityStatus.EndOfGame]\n                        }, userRewardsMapState.userRewardsMap\n                    ))\n                // if (userRewardsMapState.ammMap) {\n                //     setAmmActivityViewMap(\n                //         makeUIAmmActivityMap(\n                //             {\n                //                 ammActivityMap,\n                //                 type: 'AMM_MINING',\n                //                 ammPoolActivityStatus: [AmmPoolActivityStatus.NotStarted, AmmPoolActivityStatus.InProgress]\n                //             }, ammUserRewardMap\n                //         ))\n                //     setAmmActivityPastViewMap(\n                //         makeUIAmmActivityMap(\n                //             {\n                //                 ammActivityMap,\n                //                 type: 'AMM_MINING',\n                //                 ammPoolActivityStatus: [AmmPoolActivityStatus.EndOfGame]\n                //             }, ammUserRewardMap\n                //         ))\n                //\n                // }\n\n            }\n        },\n        [userRewardsMapState.status]\n    )\n\n\n    return {\n        ammActivityViewMap,\n        ammActivityPastViewMap\n    }\n\n}\n","import { WithTranslation, withTranslation } from 'react-i18next';\nimport {\n    AccountStep,\n    FailedConnect,\n    MetaMaskProcess,\n    ModalWalletConnect,\n    ProviderMenu, setShowAccount,\n    SuccessConnect,\n    Toast,\n    useOpenModals,\n    WalletConnectProcess,\n    WalletConnectQRCode,\n    WalletConnectStep\n} from '@loopring-web/component-lib';\nimport { ChainId } from 'loopring-sdk'\nimport React, { useEffect, useState } from 'react';\nimport {\n    ConnectProviders,\n    GatewayItem,\n    gatewayList as DefaultGatewayList,\n    SagaStatus\n} from '@loopring-web/common-resources';\nimport { useAccount } from 'stores/account';\nimport { connectProvides, ProcessingType, useConnectHook, walletServices } from '@loopring-web/web3-provider';\nimport { useSystem } from 'stores/system';\nimport { myLog } from '../../utils/log_tools';\nimport { copyToClipBoard } from '../../utils/obj_tools';\nimport { TOAST_TIME } from '../../defs/common_defs';\n\nexport const ModalWalletConnectPanel = withTranslation('common')(({\n                                                                      onClose,\n                                                                      open,\n                                                                      // step,\n                                                                      t,\n                                                                      ...rest\n                                                                  }: {\n    // step?:number,\n    open: boolean, onClose: (e: any) => void\n} & WithTranslation) => {\n    // const [_step, setStep] = React.useState<number>(step === undefined? WalletConnectStep.Provider: step);\n    const {\n        account,\n        updateAccount,\n        setShouldShow,\n        resetAccount,\n        statusUnset: statusAccountUnset,\n        status: accountStatus\n    } = useAccount();\n    const {updateSystem, chainId: _chainId, exchangeInfo} = useSystem();\n    const {modals: {isShowConnect}, setShowConnect, setShowAccount} = useOpenModals();\n    const [qrCodeUrl, setQrCodeUrl] = React.useState<string>('');\n    const [stateCheck, setStateCheck] = React.useState<boolean>(false);\n    const metaMaskCallback = React.useCallback(async () => {\n        await connectProvides.MetaMask();\n        updateAccount({connectName: ConnectProviders.MetaMask});\n        // statusAccountUnset();\n        if (connectProvides.usedProvide) {\n            const chainId = Number(await connectProvides.usedWeb3?.eth.getChainId());\n            if(chainId!==_chainId){\n                updateSystem({chainId: (chainId && chainId === ChainId.GOERLI ? chainId as ChainId : ChainId.MAINNET)})\n            }\n            return\n        }\n    }, []);\n    const walletConnectCallback = React.useCallback(async () => {\n        await connectProvides.WalletConnect();\n        updateAccount({connectName: ConnectProviders.WalletConnect});\n        // statusAccountUnset();\n        if (connectProvides.usedProvide) {\n            const chainId = Number(await connectProvides.usedWeb3?.eth.getChainId());\n            if(chainId!==_chainId){\n                updateSystem({chainId: (chainId && chainId === ChainId.GOERLI ? chainId as ChainId : ChainId.MAINNET)})\n            }\n            return\n        }\n    }, []);\n\n    const [processingCallback, setProcessingCallback] = React.useState<{ callback: () => Promise<void> } | undefined>(undefined)\n    useEffect(() => {\n        if (stateCheck === true && [SagaStatus.UNSET].findIndex((ele: string) => ele === accountStatus) !== -1) {\n            myLog('clear cache connect done')\n            setStateCheck(false)\n            if (processingCallback !== undefined) {\n                processingCallback.callback()\n            }\n        }\n\n    }, [accountStatus, stateCheck])\n\n    const gatewayList: GatewayItem[] = [\n        {\n            ...DefaultGatewayList[ 0 ],\n            handleSelect: React.useCallback(async () => {\n                if (account.connectName === DefaultGatewayList[ 0 ].key) {\n                    setShowConnect({isShow: false});\n                } else {\n                    walletServices.sendDisconnect('', 'should new provider')\n                    setShowConnect({isShow: true, step: WalletConnectStep.MetaMaskProcessing});\n                    setProcessingCallback({callback: metaMaskCallback});\n                    setStateCheck(true)\n                }\n\n            }, [account])\n        },\n        {\n            ...DefaultGatewayList[ 1 ],\n            handleSelect: React.useCallback(async () => {\n                walletServices.sendDisconnect('', 'should new provider')\n                setShowConnect({isShow: true, step: WalletConnectStep.WalletConnectProcessing});\n                setProcessingCallback({callback: walletConnectCallback});\n                setStateCheck(true)\n            }, [account])\n        },\n\n    ]\n\n    const handleProcessing = React.useCallback(({type, opts}: { type: keyof typeof ProcessingType, opts: any }) => {\n        const {qrCodeUrl} = opts;\n        if (qrCodeUrl) {\n            setQrCodeUrl(qrCodeUrl)\n            setShowConnect({isShow: true, step: WalletConnectStep.WalletConnectQRCode});\n        }\n    }, []);\n    const [copyToastOpen, setCopyToastOpen] = useState(false);\n    useConnectHook({handleProcessing});\n    const providerBack = React.useMemo(() => {\n            return ['UN_CONNECT','ERROR_NETWORK'].includes(account.readyState)  ? undefined :\n                ()=>{\n                    setShowConnect({isShow: false});\n                    switch (account.readyState){\n                        case 'ACTIVATED':\n                        case 'LOCKED':\n                            setShowAccount({ isShow: true, step:AccountStep.HadAccount })\n                            break\n                        case 'DEPOSITING':\n                            setShowAccount({ isShow: true, step:AccountStep.Depositing })\n                            break\n                        case 'NO_ACCOUNT':\n                            setShowAccount({ isShow: true, step:AccountStep.NoAccount })\n                            break\n                    }\n                }\n\n    },[account,setShowAccount])\n    const walletList = React.useMemo(() => {\n        return Object.values({\n            [ WalletConnectStep.Provider ]: {view: <ProviderMenu termUrl={'./'} gatewayList={gatewayList}\n                                                          providerName={account.connectName} {...{t, ...rest}}/>,\n                onBack:providerBack},\n            [ WalletConnectStep.MetaMaskProcessing ]: {view: <MetaMaskProcess {...{t, ...rest}}/>,},\n            [ WalletConnectStep.WalletConnectProcessing ]: {view: <WalletConnectProcess {...{t, ...rest}}/>,},\n            [ WalletConnectStep.WalletConnectQRCode ]: {view: <WalletConnectQRCode onCopy={() => {\n                copyToClipBoard(qrCodeUrl);\n                setCopyToastOpen(true);\n            }} url={qrCodeUrl} {...{t, ...rest}}/>, onBack:()=>{\n                    setShowConnect({isShow: true,step:WalletConnectStep.Provider});\n                }},\n            [ WalletConnectStep.SuccessConnect ]: {view: <SuccessConnect onClose={(e) => {\n                setShouldShow(false);\n                onClose(e);\n            }}\n                                                                  providerName={account.connectName} {...{t, ...rest}}/>,},\n            [ WalletConnectStep.FailedConnect ]: {view: <FailedConnect{...{t, ...rest}} onRetry={resetAccount}/>,onBack:()=>{\n                    setShowConnect({isShow: true,step:WalletConnectStep.Provider});\n            }},\n        })\n    }, [qrCodeUrl, account, t, rest, onClose])\n    return <>\n        <ModalWalletConnect open={isShowConnect.isShow} onClose={(e) => {\n            setShouldShow(false);\n\n            onClose(e);\n        }} panelList={walletList} onBack={walletList[ isShowConnect.step ].onBack} step={isShowConnect.step}/>\n        <Toast alertText={t('Address Copied to Clipboard!')} open={copyToastOpen}\n               autoHideDuration={TOAST_TIME} onClose={()=>{setCopyToastOpen(false)}} severity={\"success\"}/>\n    </>\n})\n\n\n","import { updateAccountStatus } from '../../stores/account';\nimport { AccountStep, setShowAccount, setShowConnect } from '@loopring-web/component-lib';\nimport store from '../../stores';\nimport { AccountStatus } from '@loopring-web/common-resources';\nimport { myLog } from 'utils/log_tools';\nimport { LoopringAPI } from 'api_wrapper';\nimport { connectProvides } from '@loopring-web/web3-provider';\nimport * as sdk from 'loopring-sdk'\nimport { ActionResult, ActionResultCode, DAYS, REFRESH_RATE } from 'defs/common_defs';\nimport { dumpError400 } from 'loopring-sdk';\nimport { getTimestampDaysLater } from 'utils/dt_tools';\n\nexport async function activeAccount({ reason, shouldShow }: { reason: any, shouldShow: boolean }) {\n    const account = store.getState().account;\n    // const {exchangeInfo} = store.getState().system;\n    if (reason?.response?.data?.resultInfo?.code === 100001) {\n        // deposited, but need update account\n        console.log('SignAccount')\n        store.dispatch(setShowConnect({ isShow: false }));\n        store.dispatch(setShowAccount({ isShow: true, step: AccountStep.UpdateAccount }));\n        store.dispatch(updateAccountStatus({ readyState: AccountStatus.DEPOSITING }));\n\n    } else {\n        // need to deposit.\n        let activeDeposit = localStorage.getItem('activeDeposit');\n        if (activeDeposit) {\n            activeDeposit = JSON.stringify(activeDeposit);\n        }\n        if (activeDeposit && activeDeposit[account.accAddress]) {\n            console.log('DEPOSITING')\n            store.dispatch(setShowConnect({ isShow: false }));\n            store.dispatch(setShowAccount({ isShow: shouldShow, step: AccountStep.Depositing }));\n            store.dispatch(updateAccountStatus({ readyState: AccountStatus.DEPOSITING }));\n            // store.dispatch(statusAccountUnset(undefined))\n        } else {\n            console.log('NO_ACCOUNT')\n            setShowConnect({ isShow: false });\n            setShowAccount({ isShow: shouldShow, step: AccountStep.NoAccount });\n            store.dispatch(updateAccountStatus({ readyState: AccountStatus.NO_ACCOUNT }));\n            // store.dispatch(statusAccountUnset(undefined));\n        }\n    }\n}\n\nexport async function updateAccountFromServer() {\n\n    const system = store.getState().system\n    const account = store.getState().account\n\n    myLog('before check!', account)\n\n    let result: ActionResult = { code: ActionResultCode.NoError, }\n\n    try {\n\n        if (LoopringAPI.userAPI && LoopringAPI.exchangeAPI && system.exchangeInfo && connectProvides.usedWeb3 && account\n            && system.chainId !== 'unknown' && account.connectName !== 'unknown') {\n            const feeMap = {\n                'ETH': '529000000000000',\n                'LRC': '34000000000000000000',\n                'USDT': '7850000',\n                'DAI': '98100000000000000000',\n            }\n\n            const { accInfo } = (await LoopringAPI.exchangeAPI.getAccount({\n                owner: account.accAddress\n            }))\n\n            if (accInfo?.owner && accInfo?.accountId) {\n\n                const connectName = account.connectName as sdk.ConnectorNames\n\n                try {\n                    const eddsaKey = await sdk\n                        .generateKeyPair(\n                            connectProvides.usedWeb3,\n                            accInfo.owner,\n                            system.exchangeInfo.exchangeAddress,\n                            accInfo.nonce,\n                            connectName,\n                        )\n\n                    try {\n                        const request: sdk.UpdateAccountRequestV3 = {\n                            exchange: system.exchangeInfo.exchangeAddress,\n                            owner: accInfo.owner,\n                            accountId: accInfo.accountId,\n                            publicKey: { x: eddsaKey.formatedPx, y: eddsaKey.formatedPy },\n                            maxFee: { tokenId: 0, volume: feeMap['ETH'] },\n                            validUntil: getTimestampDaysLater(DAYS),\n                            nonce: accInfo.nonce as number,\n                        }\n\n                        myLog('req:', request)\n\n                        const updateAccountResponse = await LoopringAPI.userAPI.updateAccount({\n                            request,\n                            web3: connectProvides.usedWeb3, \n                            chainId: system.chainId, \n                            walletType: connectName,\n                        })\n\n                        myLog('updateAccountResponse:', updateAccountResponse)\n\n                        if (updateAccountResponse.errorInfo) {\n                            result.code = ActionResultCode.UpdateAccoutError\n                            result.data = updateAccountResponse.errorInfo\n                        } else {\n                            result.data = {\n                                response: updateAccountResponse,\n                                eddsaKey,\n                            }\n                        }\n\n                    } catch (reason) {\n                        result.code = ActionResultCode.UpdateAccoutError\n                        result.data = reason\n                        dumpError400(reason)\n                    }\n\n                } catch (reason) {\n                    result.code = ActionResultCode.GenEddsaKeyError\n                    result.data = reason\n                    dumpError400(reason)\n                }\n            }\n        }\n    } catch (reason) {\n        result.code = ActionResultCode.GetAccError\n        result.data = reason\n        dumpError400(reason)\n    }\n\n    return result\n}","import { AccountStatus } from '@loopring-web/common-resources';\nimport { accountServices } from './accountServices';\nimport store from '../../stores';\nimport { statusUnset } from '../../stores/account';\n\nexport function lockAccount() {\n    accountServices.sendAccountLock();\n}\n\nexport function goErrorNetWork(){\n    accountServices.sendUpdateAccStatusAndReset(AccountStatus.ERROR_NETWORK)\n}\n\nexport function cleanLayer2() {\n    accountServices.sendUpdateAccStatusAndReset(AccountStatus.UN_CONNECT)\n}\n","import React, { useCallback } from 'react';\n\nimport { AccountStep, DepositProps, SwitchData, TradeBtnStatus, useOpenModals } from '@loopring-web/component-lib';\nimport { AccountStatus, CoinMap, ConnectProviders, IBData, WalletMap } from '@loopring-web/common-resources';\nimport * as sdk from 'loopring-sdk';\nimport { useTokenMap } from 'stores/token';\nimport { useAccount } from 'stores/account';\nimport { useSystem } from 'stores/system';\nimport { connectProvides } from '@loopring-web/web3-provider';\nimport { LoopringAPI } from 'api_wrapper';\nimport { dumpError400, GetAllowancesRequest } from 'loopring-sdk';\nimport { myLog } from 'utils/log_tools';\nimport { useWalletLayer1 } from 'stores/walletLayer1';\nimport { useTranslation } from 'react-i18next';\nimport { ActionResult, ActionResultCode } from 'defs/common_defs';\n\nexport const useDeposit = <R extends IBData<T>, T>(isNewAccount: boolean = false): {\n    depositProps: DepositProps<R, T>\n} => {\n    const {tokenMap, totalCoinMap, } = useTokenMap()\n    const {account} = useAccount()\n    const {exchangeInfo, chainId, gasPrice} = useSystem()\n    const [depositValue, setDepositValue] = React.useState<IBData<T>>({\n        belong: undefined,\n        tradeValue: 0,\n        balance: 0\n    } as IBData<unknown>)\n\n    const { walletLayer1 } = useWalletLayer1()\n    const {setShowDeposit, setShowAccount}  = useOpenModals()\n\n    const { t } = useTranslation('common')\n\n    // walletMap1: WalletMap<T> | undefined, ShowDeposit: (isShow: boolean, defaultProps?: any) => void\n    const handleDeposit = React.useCallback(async (inputValue: any) => {\n        const {accountId, accAddress, readyState, apiKey, connectName, eddsaKey} = account\n\n        console.log(LoopringAPI.exchangeAPI, connectProvides.usedWeb3)\n\n        let result: ActionResult = { code: ActionResultCode.NoError }\n\n        if ((readyState !== AccountStatus.UN_CONNECT\n            && inputValue.tradeValue)\n            && tokenMap && exchangeInfo?.exchangeAddress\n            && connectProvides.usedWeb3 && LoopringAPI.exchangeAPI) {\n            try {\n                const tokenInfo = tokenMap[inputValue.belong]\n                const gasLimit = parseInt(tokenInfo.gasAmounts.deposit)\n                let nonce = await sdk.getNonce(connectProvides.usedWeb3, account.accAddress)\n\n                const fee = 0\n                \n                const isMetaMask = connectName === ConnectProviders.MetaMask\n\n                const realGasPrice = gasPrice ?? 30\n\n                if (tokenInfo.symbol.toUpperCase() !== 'ETH') {\n\n                    const req: GetAllowancesRequest = { owner: account.accAddress, token: tokenInfo.symbol}\n\n                    const { tokenAllowances } = await LoopringAPI.exchangeAPI.getAllowances(req, tokenMap)\n    \n                    const allowance = sdk.toBig(tokenAllowances[tokenInfo.symbol])\n    \n                    const curValInWei = sdk.toBig(inputValue.tradeValue).times('1e' + tokenInfo.decimals)\n    \n                    if (curValInWei.gt(allowance)) {\n\n                        myLog(curValInWei, allowance, ' need approveMax!')\n\n                        setShowAccount({isShow: true, step: AccountStep.TokenApproveInProcess})\n\n                        try {\n                            await sdk.approveMax(connectProvides.usedWeb3, account.accAddress, tokenInfo.address,\n                                exchangeInfo?.depositAddress, realGasPrice, gasLimit, chainId === 'unknown' ? undefined : chainId, nonce, isMetaMask)\n                            nonce += 1\n                        } catch(reason) {\n                            result.code = ActionResultCode.ApproveFailed\n                            result.data = reason\n                            \n                            setShowAccount({isShow: true, step: AccountStep.TokenApproveFailed})\n                            return\n                        }\n\n                    } else {\n                        myLog('allowance is enough! don\\'t need approveMax!')\n                    }\n\n                }\n\n                setShowAccount({isShow: true, step: AccountStep.DepositInProcess})\n\n                myLog('before deposit:', chainId, connectName, isMetaMask)\n\n                const realChainId = chainId === 'unknown' ? 1 : chainId\n\n                const response = await sdk.deposit(connectProvides.usedWeb3, account.accAddress,\n                    exchangeInfo.exchangeAddress, tokenInfo, inputValue.tradeValue, fee,\n                    realGasPrice, gasLimit, realChainId, nonce, isMetaMask)\n\n                myLog('response:', response)\n\n                result.data = response\n\n                if (response?.hash === undefined && response?.errInfo) {\n                    // deposit failed\n                    setShowAccount({isShow: true, step: AccountStep.DepositFailed})\n                } else {\n                    // deposit sucess\n                    setShowAccount({isShow: true, step: AccountStep.Depositing})\n                }\n\n            } catch (reason) {\n                dumpError400(reason)\n                result.code = ActionResultCode.DepositFailed\n                result.data = reason\n\n                //deposit failed\n                setShowAccount({isShow: true, step: AccountStep.DepositFailed})\n            }\n\n        } else {\n            result.code = ActionResultCode.DataNotReady\n        }\n\n        return result\n\n    }, [account, tokenMap, chainId, exchangeInfo, gasPrice, LoopringAPI.exchangeAPI, setShowAccount])\n\n    const onDepositClick = useCallback(async(depositValue) => {\n        myLog('onDepositClick depositValue:', depositValue)\n        setShowDeposit({isShow:false})\n\n        if (depositValue && depositValue.belong) {\n            await handleDeposit(depositValue as R)\n        }\n\n    }, [depositValue, handleDeposit, setShowDeposit, setShowAccount, isNewAccount])\n\n    const handlePanelEvent = useCallback(async(data: SwitchData<any>, switchType: 'Tomenu' | 'Tobutton') => {\n        return new Promise<void>((res: any) => {\n            res();\n        })\n    }, [depositValue, setDepositValue])\n\n    const title = isNewAccount ? t('labelCreateLayer2Title') : t('depositTitleAndActive')\n\n    const depositProps: DepositProps<R, T> = {\n        isNewAccount,\n        title,\n        tradeData: {belong: undefined} as any,\n        coinMap: totalCoinMap as CoinMap<any>,\n        walletMap: walletLayer1 as WalletMap<any>,\n        depositBtnStatus: TradeBtnStatus.AVAILABLE,\n        onDepositClick,\n    }\n\n    return {\n        depositProps: depositProps,\n    }\n}\n","import { WithTranslation, withTranslation } from 'react-i18next';\nimport {\n    AccountStep,\n    ActiveAccountProcess,\n    ApproveAccount,\n    Button,\n    DepositApproveProcess,\n    Depositing,\n    DepositingProcess,\n    DepositPanel,\n    FailedDeposit,\n    FailedTokenAccess,\n    FailedUnlock,\n    HadAccount,\n    ModalAccount,\n    ModalQRCode,\n    NoAccount,\n    ProcessUnlock,\n    QRAddressPanel,\n    SuccessUnlock,\n    Toast,\n    TokenAccessProcess,\n    useOpenModals,\n} from '@loopring-web/component-lib';\nimport { walletServices } from '@loopring-web/web3-provider';\nimport { sleep } from 'loopring-sdk';\n\nimport React, { useState } from 'react';\nimport { copyToClipBoard } from 'utils/obj_tools';\nimport { useAccount } from 'stores/account';\nimport { ActionResult, ActionResultCode, REFRESH_RATE, TOAST_TIME } from 'defs/common_defs';\nimport { getShortAddr } from '@loopring-web/common-resources';\nimport { updateAccountFromServer } from 'services/account/activeAccount';\nimport { lockAccount } from 'services/account/lockAccount';\nimport { unlockAccount } from 'services/account/unlockAccount';\nimport { useTokenMap } from 'stores/token';\nimport { myLog } from 'utils/log_tools';\nimport { useDeposit } from 'hooks/useractions/useDeposit';\n\nimport { accountServices } from '../../services/account/accountServices'\n\nimport { LoopringAPI } from 'api_wrapper';\n\nexport const ModalAccountInfo = withTranslation('common')(({\n                                                               onClose,\n                                                               etherscanUrl,\n                                                               open,\n                                                               t,\n                                                               ...rest\n                                                           }: {\n    open: boolean,\n    onClose: (e: any) => void,\n    etherscanUrl: string\n} & WithTranslation) => {\n    const {\n        account,\n        shouldShow,\n        updateAccount,\n        setShouldShow,\n        resetAccount,\n    } = useAccount();\n\n    const isNewAccount = true\n\n    const {depositProps} = useDeposit(isNewAccount)\n\n    const {modals: {isShowAccount}, setShowConnect, setShowAccount,} = useOpenModals()\n\n    const [openQRCode, setOpenQRCode] = useState(false)\n    const addressShort = getShortAddr(account.accAddress)\n\n    const {coinMap} = useTokenMap()\n\n    const [copyToastOpen, setCopyToastOpen] = useState(false);\n\n    const onSwitch = React.useCallback(() => {\n        setShowAccount({isShow: false})\n        setShouldShow(true);\n        setShowConnect({isShow: shouldShow ?? false})\n    }, [setShowConnect, setShowAccount, shouldShow])\n    \n    const onCopy = React.useCallback(() => {\n        copyToClipBoard(account.accAddress);\n        setCopyToastOpen(true)\n    }, [account])\n    const onViewQRCode = React.useCallback(() => {\n        setOpenQRCode(true)\n    }, [])\n    const onDisconnect = React.useCallback(async () => {\n        walletServices.sendDisconnect('', 'customer click disconnect');\n        setShowAccount({isShow: false})\n    }, [resetAccount, setShowAccount])\n\n    const goDeposit = React.useCallback(() => {\n\n        setShowAccount({isShow: true, step: AccountStep.Deposit});\n\n    }, [setShowAccount])\n\n    const goUpdateAccount = React.useCallback(async() => {\n\n        if (!account.accAddress) {\n            myLog('account.accAddress is nil')\n            return\n        }\n\n        myLog('goUpdateAccount....')\n        setShowAccount({isShow: true, step: AccountStep.UpdateAccountInProcess});\n\n        const result: ActionResult = await updateAccountFromServer()\n\n        switch (result.code) {\n            case ActionResultCode.NoError:\n\n                const eddsaKey = result.data.eddsaKey\n                myLog(' after NoError:', eddsaKey)\n                await sleep(REFRESH_RATE)\n\n                if (LoopringAPI.userAPI && LoopringAPI.exchangeAPI && eddsaKey) {\n\n                    const { accInfo, error } = await LoopringAPI.exchangeAPI.getAccount({owner: account.accAddress})\n\n                    if (!error && accInfo) {\n\n                    const {apiKey} = (await LoopringAPI.userAPI.getUserApiKey({\n                        accountId: accInfo.accountId\n                    }, eddsaKey.sk))\n\n                    myLog('After connect >>, get apiKey', apiKey)\n        \n                    accountServices.sendAccountSigned(accInfo.accountId, apiKey, eddsaKey)\n\n                    }\n\n                }\n                \n                setShowAccount({isShow: false})\n                break\n            case ActionResultCode.GetAccError:\n            case ActionResultCode.GenEddsaKeyError:\n            case ActionResultCode.UpdateAccoutError:\n                myLog('try to sendCheckAccount...')\n                accountServices.sendCheckAccount(account.accAddress)\n                break\n            default:\n                break\n        }\n\n    }, [account, setShowAccount])\n    const onQRClick = React.useCallback(() => {\n        setShowAccount({isShow: true, step: AccountStep.QRCode})\n    }, [])\n    const unlockBtn = React.useMemo(() => {\n        return <Button variant={'contained'} fullWidth size={'medium'} onClick={() => {\n            setShouldShow(true);\n            unlockAccount();\n        }}>{t('labelUnLockLayer2')} </Button>\n    }, [updateAccount, t]);\n    const lockBtn = React.useMemo(() => {\n        return <Button variant={'contained'} fullWidth size={'medium'} onClick={() => {\n            lockAccount();\n        }}>{t('labelLockLayer2')} </Button>\n    }, [lockAccount, t]);\n    const onBack = React.useCallback(() => {\n        switch(account.readyState){\n            case 'NO_ACCOUNT':\n            case 'DEPOSITING':\n                setShowAccount({isShow: true,step:AccountStep.NoAccount});\n                break;\n            case  'LOCKED':\n            case  'ACTIVATED':\n                setShowAccount({isShow: true,step:AccountStep.HadAccount});\n                break;\n            default:\n                setShowAccount({isShow: false});\n\n        }\n    }, [account])\n    const title = t(\"labelCreateLayer2Title\")\n\n    const accountList = React.useMemo(() => {\n        return Object.values({\n            [ AccountStep.NoAccount ]: {view: <NoAccount {...{\n                goDeposit,\n                ...account,\n                etherscanUrl,\n                onSwitch, onCopy,\n                onViewQRCode, onDisconnect, addressShort,\n            }} />,onQRClick},\n            [ AccountStep.QRCode ]: {view: <QRAddressPanel  {...{\n                    ...rest,\n                    ...account,\n                    etherscanUrl,\n                    t\n                }} />,onBack, noClose:true },\n            [ AccountStep.Deposit ]: {view: <DepositPanel title={title} {...{\n                ...rest,\n                _height: 'var(--modal-height)',\n                _width: 'var(--modal-width)',\n                ...depositProps,\n                t\n            }} />},\n            [ AccountStep.Depositing ]: {view: <Depositing label={title}\n                                                    onClose={onClose}\n                                                    etherscanLink={etherscanUrl + account.accAddress} {...{\n                ...rest,\n                t\n            }} />,},\n            [ AccountStep.DepositFailed ]: {view: <FailedDeposit label={title}\n                                                          etherscanLink={etherscanUrl + account.accAddress}\n                                                          onRetry={() => goDeposit()} {...{...rest, t}} />,onBack:()=>{\n                    setShowAccount({isShow: true,step:AccountStep.Deposit});\n                }},\n            [ AccountStep.UpdateAccount ]: {view: <ApproveAccount {...{\n                ...account,\n                etherscanUrl,\n                onSwitch, onCopy,\n                onViewQRCode, onDisconnect, addressShort,\n            }} goUpdateAccount={() => {\n                goUpdateAccount()\n            }}  {...{...rest, t}} />,onQRClick},\n            [ AccountStep.ProcessUnlock ]: {view: <ProcessUnlock providerName={account.connectName} {...{...rest, t}} />,},\n            [ AccountStep.SuccessUnlock ]: {view: <SuccessUnlock providerName={account.connectName} onClose={onClose} {...{...rest, t}} />,},\n            [ AccountStep.FailedUnlock ]: {view: <FailedUnlock onRetry={() => {\n                unlockAccount()\n            }} {...{...rest, t}} />,},\n            [ AccountStep.HadAccount ]: {view: <HadAccount {...{\n                ...account,\n                onSwitch, onCopy,\n                etherscanUrl,\n\n                // address: account.accAddress,\n                // connectBy: account.connectName,\n                onViewQRCode, onDisconnect, addressShort,\n                etherscanLink: etherscanUrl + account.accAddress,\n                mainBtn: account.readyState === 'ACTIVATED' ? lockBtn : unlockBtn\n            }} />,onQRClick},\n            [ AccountStep.TokenApproveInProcess ]: {view: <TokenAccessProcess label={title}\n                                                                    providerName={account.connectName} {...{\n                ...rest,\n                t\n            }} />,onBack:()=>{\n                    setShowAccount({isShow: true,step:AccountStep.Deposit});\n                }},\n            [ AccountStep.DepositApproveProcess ]: {view: <DepositApproveProcess label={title}\n                                                                          etherscanLink={etherscanUrl + account.accAddress}\n                                                                          providerName={account.connectName} {...{\n                ...rest,\n                t\n            }} />,},\n            [ AccountStep.DepositInProcess ]: {view: <DepositingProcess label={title}\n                                                                  etherscanLink={etherscanUrl + account.accAddress}\n                                                                  providerName={account.connectName} {...{\n                ...rest,\n                t\n            }} />,},\n            [ AccountStep.UpdateAccountInProcess ]: {view: <ActiveAccountProcess label={title}  providerName={account.connectName} {...{\n                    ...rest,\n                    t\n                }} />,},\n            [ AccountStep.UpdateAccountFailed ]: {view: <FailedUnlock label={title} onRetry={() => {\n                goUpdateAccount()\n            }} {...{...rest, t}} />,onBack:()=>{\n                    setShowAccount({isShow: true,step:AccountStep.UpdateAccount});\n                }},\n            [ AccountStep.TokenApproveFailed ]: {view: <FailedTokenAccess label={title} onRetry={() => {\n                goDeposit()\n            }} {...{\n                t, ...rest,\n                coinInfo: coinMap ? coinMap[ 'USTD' ] : undefined\n            }} />,},\n\n        })\n    }, [addressShort, account, depositProps, etherscanUrl, onCopy, onSwitch, onDisconnect, onViewQRCode, t, rest])\n\n    return <>\n        <Toast alertText={t('Address Copied to Clipboard!')} open={copyToastOpen}\n               autoHideDuration={TOAST_TIME} onClose={()=> {\n            setCopyToastOpen(false)\n        }} severity={\"success\"}/>\n\n        <ModalQRCode open={openQRCode} onClose={() => setOpenQRCode(false)} title={'ETH Address'}\n                     description={account?.accAddress} url={account?.accAddress}/>\n\n        <ModalAccount open={isShowAccount.isShow} onClose={(e) => {\n            setShouldShow(false);\n            onClose(e);\n        }} panelList={accountList}\n                      onBack={accountList[ isShowAccount.step ].onBack}\n                      onQRClick={accountList[ isShowAccount.step ].onQRClick}\n                      step={isShowAccount.step}/>\n    </>\n})","import {\n    dumpError400,\n    GetOffchainFeeAmtRequest,\n    LoopringMap,\n    OffchainFeeReqType,\n    toBig,\n    TokenInfo\n} from 'loopring-sdk';\nimport { useAccount } from 'stores/account';\nimport { useState } from 'react';\nimport { useCustomDCEffect } from 'hooks/common/useCustomDCEffect';\nimport { LoopringAPI } from 'api_wrapper';\nimport * as sdk from 'loopring-sdk';\nimport { myLog } from 'utils/log_tools';\n\nexport function useChargeFees(tokenSymbol: string | undefined, requestType: OffchainFeeReqType,\n    tokenMap: LoopringMap<TokenInfo> | undefined, amount?: number) {\n\n    const { account } = useAccount()\n\n    const [chargeFeeList, setChargeFeeList] = useState<any[]>([])\n\n    useCustomDCEffect(async () => {\n\n        if (account.accountId === -1 || !account.apiKey || !tokenSymbol || typeof tokenSymbol !== 'string'\n         || !tokenMap || !LoopringAPI.userAPI) {\n            return\n        }\n\n        myLog('tokenSymbol:', tokenSymbol, ' requestType:', OffchainFeeReqType[requestType])\n\n        let chargeFeeList: any[] = []\n\n        try {\n            const tokenInfo = tokenMap[ tokenSymbol ]\n\n            const request: GetOffchainFeeAmtRequest = {\n                accountId: account.accountId,\n                tokenSymbol,\n                requestType,\n                amount: amount ? toBig(amount).times('1e' + tokenInfo.decimals).toFixed(0, 0) : undefined\n            }\n\n            const response = await LoopringAPI.userAPI.getOffchainFeeAmt(request, account.apiKey)\n\n            if (response?.raw_data?.fees instanceof Array) {\n                response.raw_data.fees.forEach((item: any) => {\n                    const feeRaw = item.fee\n                    const tokenInfo = tokenMap[ item.token ]\n                    const fee = sdk.toBig(item.fee).div('1e' + tokenInfo.decimals).toNumber()\n                    chargeFeeList.push({belong: item.token, fee, __raw__: feeRaw})\n                })\n\n                setChargeFeeList(chargeFeeList)\n            }\n            myLog('response:', response)\n\n        } catch (reason) {\n            dumpError400(reason)\n        }\n\n\n        setChargeFeeList(chargeFeeList)\n\n    }, [account.accountId, account.apiKey, LoopringAPI.userAPI, requestType, tokenSymbol, tokenMap])\n\n    return {\n        chargeFeeList,\n    }\n\n}","import { useAccount } from '../../stores/account';\nimport { AccountStep, useOpenModals } from '@loopring-web/component-lib';\nimport React from 'react';\nimport { sleep } from 'loopring-sdk';\nimport { useAccountHook } from '../../services/account/useAccountHook';\n\nexport  function useAccountModal() {\n    const { shouldShow, setShouldShow, statusUnset: statusAccountUnset} = useAccount();\n    const { setShowAccount } = useOpenModals();\n    const handleErrorAccount = React.useCallback(()=>{\n        // updateAccount({readyState:'NO_ACCOUNT'});\n        statusAccountUnset();\n    },[shouldShow])\n    const handleLockAccount = React.useCallback(()=>{\n        // updateAccount({readyState:'NO_ACCOUNT'});\n        statusAccountUnset();\n        setShowAccount({isShow: shouldShow ?? false,step:AccountStep.HadAccount});\n    },[shouldShow])\n    const handleNoAccount = React.useCallback((data: any)=>{\n        // updateAccount({readyState:'NO_ACCOUNT'});\n        statusAccountUnset();\n        setShowAccount({isShow: shouldShow ?? false,step:AccountStep.NoAccount});\n    },[shouldShow])\n    const handleDepositingAccount = React.useCallback(async ()=>{\n        // updateAccount({readyState:'DEPOSITING'});\n        setShowAccount({isShow: shouldShow ?? false,step:AccountStep.Depositing});\n        await sleep(5000)\n        setShouldShow(false)\n        setShowAccount({isShow: false});\n        statusAccountUnset();\n    },[shouldShow])\n    const handleErrorApproveToken = React.useCallback(()=>{\n        // updateAccount({readyState:'DEPOSITING'});\n        setShowAccount({isShow: shouldShow ?? false,step:AccountStep.Depositing});\n    },[shouldShow])\n    const handleErrorDepositSign = React.useCallback(()=>{\n        // updateAccount({readyState:'DEPOSITING'});\n        setShowAccount({isShow: shouldShow ?? false,step:AccountStep.DepositFailed});\n    },[shouldShow])\n    const handleProcessDeposit = React.useCallback(()=>{\n        // updateAccount({readyState:'DEPOSITING'});\n        setShowAccount({isShow: shouldShow ?? false,step:AccountStep.DepositApproveProcess});\n    },[shouldShow])\n    const handleSignAccount = React.useCallback(()=>{\n        // updateAccount({readyState:'DEPOSITING'});\n        statusAccountUnset();\n        setShowAccount({isShow: shouldShow ?? false,step:AccountStep.UpdateAccount});\n    },[shouldShow])\n    const handleSignError = React.useCallback(()=>{\n        setShowAccount({isShow: shouldShow ?? false,step:AccountStep.FailedUnlock});\n    },[shouldShow])\n    const handleProcessSign = React.useCallback(()=>{\n        setShowAccount({isShow: shouldShow ?? false,step:AccountStep.ProcessUnlock});\n    },[shouldShow])\n    const handleAccountActive  = React.useCallback(async ()=>{\n\n        //updateAccount({readyState:'ACTIVATED'});\n        setShowAccount({isShow: shouldShow ?? false,step:AccountStep.SuccessUnlock});\n        await sleep(1000)\n        setShouldShow(false)\n        setShowAccount({isShow: false});\n        statusAccountUnset();\n    },[shouldShow])\n    useAccountHook({\n        handleErrorAccount,\n        handleLockAccount,// clear private data\n        handleNoAccount,//\n        // TODO\n        //  step1 Approve account;  click allow from provider\n        //  step2 send to ETH;  click allow from provider\n        handleDepositingAccount,\n        handleErrorApproveToken,\n        handleErrorDepositSign,\n        handleProcessDeposit,// two or one step\n        handleSignAccount, //unlock or update account  sgin\n        handleProcessSign,\n        handleSignError,\n        // handleProcessAccountCheck,\n        handleAccountActive: handleAccountActive,\n    })\n}","import React from 'react';\n// import { walletLa } from './walletServices';\nimport { Commands } from './command';\nimport { accountServices } from './accountServices';\n\nexport function useAccountHook(\n    {\n        handleLockAccount,// clear private data\n        handleNoAccount,//\n        handleErrorAccount,\n        // TODO\n        //  step1 Approve account;  click allow from provider\n        //  step2 send to ETH;  click allow from provider\n        handleDepositingAccount,\n        handleErrorApproveToken,\n        handleErrorDepositSign,\n        handleProcessDeposit,// two or one step\n        handleSignAccount, //unlock or update account  assgin\n        handleProcessSign,\n        handleSignError,\n        handleProcessAccountCheck,\n        handleAccountActive,\n    }\n\n        : any) {\n    const subject = React.useMemo(() => accountServices.onSocket(), []);\n    React.useEffect(() => {\n        const subscription = subject.subscribe(({data, status}: { status: keyof typeof Commands, data?: any }) => {\n            switch (status) {\n                case 'ErrorNetwork':\n                    handleErrorAccount(data);\n                    break;// clear private data\n                case 'LockAccount':\n                    handleLockAccount(data);\n                    break;// clear private data\n                case 'NoAccount':\n                    handleNoAccount(data);\n                    break;//\n                case 'DepositingAccount':\n                    handleDepositingAccount(data);\n                    break;\n                case 'ErrorApproveToken':\n                    handleErrorApproveToken(data);\n                    break;\n                case 'ErrorDepositSign':\n                    handleErrorDepositSign(data);\n                    break;\n                case 'ProcessDeposit':\n                    handleProcessDeposit(data);\n                    break;// two or one step\n                case 'SignAccount':\n                    handleSignAccount(data);\n                    break;//unlock or update account  assgin\n                case 'ProcessSign':\n                    handleProcessSign(data);\n                    break;\n                case 'ErrorSign':\n                    handleSignError(data);\n                    break;\n                case 'AccountUnlocked':\n                    handleAccountActive(data);\n                    break;\n            }\n        });\n        return () => subscription.unsubscribe();\n    }, [subject, handleLockAccount,// clear private data\n        handleErrorAccount,\n        handleNoAccount,//\n        handleDepositingAccount,\n        handleErrorApproveToken,\n        handleErrorDepositSign,\n        handleProcessDeposit,// two or one step\n        handleSignAccount, //unlock or update account  assgin\n        handleProcessSign,\n        handleProcessAccountCheck,]);\n}\n","import {\n    ModalPanel, Toast,\n    useOpenModals\n} from '@loopring-web/component-lib';\nimport { ModalWalletConnectPanel } from './WalletModal';\nimport { ModalAccountInfo } from './AccountModal';\nimport { withTranslation, WithTranslation } from 'react-i18next';\nimport { useTransfer } from 'hooks/useractions/useTransfer';\nimport { useDeposit } from 'hooks/useractions/useDeposit';\nimport { useWithdraw } from 'hooks/useractions/useWithdraw';\nimport { useSystem } from '../stores/system';\nimport { useAccountModal } from 'hooks/useractions/useAccountModal';\nimport { TOAST_TIME } from '../defs/common_defs';\n\nexport const ModalGroup = withTranslation('common',{withRef: true})(({...rest}:WithTranslation)=>{\n    const {transferProps} = useTransfer();\n    const {depositProps} = useDeposit();\n    const {\n        withdrawAlertText,\n        withdrawToastOpen, \n        setWithdrawToastOpen,\n        withdrawProps} = useWithdraw();\n    const {etherscanUrl} = useSystem();\n    useAccountModal();\n    const {modals: {isShowAccount, isShowConnect}, setShowConnect, setShowAccount} = useOpenModals();\n    return  <>\n\n        <Toast alertText={withdrawAlertText as string} open={withdrawToastOpen} \n            autoHideDuration={TOAST_TIME}  onClose={()=> {\n            setWithdrawToastOpen(false)\n        }}/>\n\n        <ModalPanel transferProps={transferProps}\n                    withDrawProps={withdrawProps}\n                    depositProps={depositProps}\n                    resetProps={{} as any}\n                    ammProps={{} as any}\n                    swapProps={{} as any}\n                    {...{_height: 'var(--modal-height)', _width: 'var(--modal-width)'}}\n        />\n\n        <ModalWalletConnectPanel {...{\n            ...rest,\n            open: isShowConnect.isShow,\n            onClose: () => setShowConnect({isShow: false})\n        }} />\n        <ModalAccountInfo\n            {...{\n                ...rest,\n                etherscanUrl,\n                open: isShowAccount.isShow,\n                onClose: () => setShowAccount({isShow: false})\n            }}\n        ></ModalAccountInfo>\n    </>\n\n} )","import React, { useCallback } from 'react';\n\nimport { connectProvides } from '@loopring-web/web3-provider';\n\nimport { SwitchData, TradeBtnStatus, TransferProps, } from '@loopring-web/component-lib';\nimport { AccountStatus, CoinMap, IBData, SagaStatus, WalletMap } from '@loopring-web/common-resources';\n\nimport * as sdk from 'loopring-sdk'\n\nimport { useTokenMap } from 'stores/token';\nimport { useAccount } from 'stores/account';\nimport { useChargeFees } from './useChargeFees';\nimport { LoopringAPI } from 'api_wrapper';\nimport { useSystem } from 'stores/system';\nimport { useCustomDCEffect } from 'hooks/common/useCustomDCEffect';\nimport { myLog } from 'utils/log_tools';\nimport { useWalletLayer2 } from 'stores/walletLayer2';\nimport { makeWalletLayer2 } from 'hooks/help';\nimport { ChainId } from 'loopring-sdk';\nimport { useWalletHook } from '../../services/wallet/useWalletHook';\nimport { getTimestampDaysLater } from 'utils/dt_tools';\nimport { DAYS } from 'defs/common_defs';\n\nexport const useTransfer = <R extends IBData<T>, T>(): {\n    // handleTransfer: (inputValue:R) => void,\n    transferProps: TransferProps<R, T>\n    // transferValue: R\n} => {\n    const {tokenMap, totalCoinMap, } = useTokenMap();\n    const {account} = useAccount()\n    const {exchangeInfo, chainId} = useSystem();\n    // const {walletLayer2, status: walletLayer2Status} = useWalletLayer2();\n    const [walletMap, setWalletMap] = React.useState(makeWalletLayer2().walletMap ?? {} as WalletMap<R>);\n    // const {setShowTransfer}  = useOpenModals();\n    const [transferValue, setTransferValue] = React.useState<IBData<T>>({\n        belong: undefined,\n        tradeValue: 0,\n        balance: 0\n    } as IBData<unknown>)\n    const {chargeFeeList} = useChargeFees(transferValue.belong, sdk.OffchainFeeReqType.TRANSFER, tokenMap)\n\n    const [tranferFeeInfo, setTransferFeeInfo] = React.useState<any>()\n    const [payeeAddr, setPayeeAddr] = React.useState<string>('')\n    // React.useEffect(()=>{\n    //     if(walletLayer2Status === SagaStatus.UNSET) {\n    //\n    //     }\n    // },[walletLayer2Status])\n    const  walletLayer2Callback= React.useCallback(()=>{\n        const walletMap = makeWalletLayer2().walletMap ?? {} as WalletMap<R>\n        setWalletMap(walletMap)\n    },[])\n    useWalletHook({walletLayer2Callback})\n\n    useCustomDCEffect(() => {\n\n        if (chargeFeeList.length > 0) {\n            setTransferFeeInfo(chargeFeeList[0])\n        }\n\n    }, [chargeFeeList, setTransferFeeInfo])\n\n    const onTransferClick = useCallback(async(transferValue) => {\n        const {accountId, accAddress, readyState, apiKey, connectName, eddsaKey} = account\n        console.log('useCallback tranferFeeInfo:', tranferFeeInfo) \n        \n        if (readyState === AccountStatus.ACTIVATED && tokenMap \n            && exchangeInfo && connectProvides.usedWeb3 \n            && transferValue?.belong && tranferFeeInfo?.belong && eddsaKey?.sk) {\n            \n            try {\n                const sellToken = tokenMap[ transferValue.belong as string ]\n                const feeToken = tokenMap[ tranferFeeInfo.belong ]\n                const transferVol = sdk.toBig(transferValue.tradeValue).times('1e' + sellToken.decimals).toFixed(0, 0)\n                const storageId = await LoopringAPI.userAPI?.getNextStorageId({\n                    accountId,\n                    sellTokenId: sellToken.tokenId\n                }, apiKey)\n                const req: sdk.OriginTransferRequestV3 = {\n                    exchange: exchangeInfo.exchangeAddress,\n                    payerAddr: accAddress,\n                    payerId: accountId,\n                    payeeAddr,\n                    payeeId: 0,\n                    storageId: storageId?.offchainId,\n                    token: {\n                        tokenId: sellToken.tokenId,\n                        volume: transferVol,\n                    },\n                    maxFee: {\n                        tokenId: feeToken.tokenId,\n                        volume: tranferFeeInfo.__raw__,\n                    },\n                    validUntil: getTimestampDaysLater(DAYS),\n                }\n\n                const response = await LoopringAPI.userAPI?.submitInternalTransfer({\n                    request: req,\n                    web3: connectProvides.usedWeb3,\n                    chainId: chainId !== ChainId.GOERLI ? ChainId.MAINNET : chainId, \n                    walletType: connectName as sdk.ConnectorNames,\n                    eddsaKey: eddsaKey.sk, \n                    apiKey,\n                })\n\n                    myLog(response)\n\n                    if (response?.errorInfo) {\n                        // transfer failed\n                    } else {\n                        // transfer sucess\n                    }\n                    \n            } catch (e) {\n                sdk.dumpError400(e)\n                // transfer failed\n            }\n\n        } else {\n            return false\n        }\n\n    }, [account, tokenMap, tranferFeeInfo?.belong, transferValue, payeeAddr])\n\n    const handlePanelEvent = useCallback(async (data: SwitchData<R>, switchType: 'Tomenu' | 'Tobutton') => {\n        return new Promise<void>((res: any) => {\n            if (data?.tradeData?.belong) {\n                if (transferValue !== data.tradeData) {\n                    setTransferValue(data.tradeData)\n                }\n            } else {\n                setTransferValue({belong: undefined, tradeValue: 0, balance: 0} as IBData<unknown>)\n            }\n            res();\n        })\n    }, [setTransferValue])\n\n    const handleFeeChange = useCallback((value: { belong: any; \n        fee: number | string; \n        __raw__?: any }): void => {\n            myLog('handleFeeChange:', value)\n            setTransferFeeInfo(value)\n    }, [setTransferFeeInfo])\n\n    const transferProps = {\n        tradeData: { belong: undefined } as any,\n        coinMap: totalCoinMap as CoinMap<T>,\n        walletMap: walletMap as WalletMap<T>, \n        transferBtnStatus: TradeBtnStatus.AVAILABLE,\n        onTransferClick,\n        handleFeeChange,\n        handlePanelEvent,\n        chargeFeeToken: 'ETH',\n        chargeFeeTokenList: chargeFeeList,\n        handleOnAddressChange: (value: any) => {\n            myLog('transfer handleOnAddressChange:', value);\n            setPayeeAddr(value)\n        },\n        handleAddressError: (_value: any) => {\n            return {error: false, message: ''}\n        }\n    }\n\n    return {\n        transferProps ,\n    }\n}\n","import React, { useState } from 'react';\n\nimport { useTranslation } from 'react-i18next';\n\nimport { connectProvides } from '@loopring-web/web3-provider';\nimport { SwitchData, TradeBtnStatus, useOpenModals, WithdrawProps } from '@loopring-web/component-lib';\nimport {\n    AccountStatus,\n    CoinMap,\n    IBData,\n    SagaStatus,\n    WalletMap,\n    WithdrawType,\n    WithdrawTypes\n} from '@loopring-web/common-resources';\nimport {\n    ConnectorNames, dumpError400, OffchainFeeReqType, toBig, VALID_UNTIL,\n    OffChainWithdrawalRequestV3,\n} from 'loopring-sdk';\n\nimport { useTokenMap } from 'stores/token';\nimport { useAccount } from 'stores/account';\nimport { useChargeFees } from './useChargeFees';\nimport { useCustomDCEffect } from 'hooks/common/useCustomDCEffect';\nimport { LoopringAPI } from 'api_wrapper';\nimport { useSystem } from 'stores/system';\nimport { myLog } from 'utils/log_tools';\nimport { useWalletLayer2 } from 'stores/walletLayer2';\nimport { makeWalletLayer2 } from 'hooks/help';\nimport { useWalletHook } from '../../services/wallet/useWalletHook';\nimport { getTimestampDaysLater } from 'utils/dt_tools';\nimport { DAYS } from 'defs/common_defs';\n\nexport const useWithdraw = <R extends IBData<T>, T>(): {\n    // handleWithdraw: (inputValue:R) => void,\n    withdrawAlertText: string | undefined,\n    withdrawToastOpen: boolean,\n    setWithdrawToastOpen: any,\n    withdrawProps: WithdrawProps<R, T>\n    // withdrawValue: R\n} => {\n\n    const { t } = useTranslation('common')\n\n    const [withdrawToastOpen, setWithdrawToastOpen] = useState<boolean>(false)\n\n    const [withdrawAlertText, setWithdrawAlertText] = useState<string>()\n\n    const { tokenMap, totalCoinMap, } = useTokenMap();\n    const { account } = useAccount()\n    const { exchangeInfo, chainId } = useSystem();\n    const [withdrawValue, setWithdrawValue] = React.useState<IBData<T>>({\n        belong: undefined,\n        tradeValue: 0,\n        balance: 0\n    } as IBData<unknown>)\n    // const {status:walletLayer2Status} = useWalletLayer2();\n    const [walletMap2, setWalletMap2] = React.useState(makeWalletLayer2().walletMap??{} as WalletMap<R>);\n    const {chargeFeeList} = useChargeFees(withdrawValue.belong, OffchainFeeReqType.OFFCHAIN_WITHDRAWAL, tokenMap)\n    const [withdrawAddr, setWithdrawAddr] = useState<string>()\n    const [withdrawFeeInfo, setWithdrawFeeInfo] = useState<any>(undefined)\n    const [withdrawType, setWithdrawType] = useState<OffchainFeeReqType>(OffchainFeeReqType.OFFCHAIN_WITHDRAWAL)\n    const { setShowWithdraw, } = useOpenModals()\n\n    // React.useEffect(()=>{\n    //     if(walletLayer2Status === SagaStatus.UNSET){\n    //         const walletMap = makeWalletLayer2().walletMap ?? {} as WalletMap<R>\n    //         setWalletMap2(walletMap)\n    //     }\n    // },[walletLayer2Status])\n    const  walletLayer2Callback= React.useCallback(()=>{\n        const walletMap = makeWalletLayer2().walletMap ?? {} as WalletMap<R>\n         setWalletMap2(walletMap)\n    },[])\n    useWalletHook({walletLayer2Callback})\n    useCustomDCEffect(() => {\n        if (chargeFeeList.length > 0) {\n            setWithdrawFeeInfo(chargeFeeList[0])\n        }\n    }, [chargeFeeList, setWithdrawFeeInfo])\n\n    const handleWithdraw = React.useCallback(async (inputValue: R) => {\n\n        const { accountId, accAddress, readyState, apiKey, connectName, eddsaKey } = account\n        if (readyState === AccountStatus.ACTIVATED && tokenMap\n            && exchangeInfo && connectProvides.usedWeb3\n            && withdrawAddr && withdrawFeeInfo?.belong && eddsaKey?.sk) {\n            try {\n                const withdrawToken = tokenMap[inputValue.belong as string]\n                const feeToken = tokenMap[withdrawFeeInfo.belong]\n                const withdrawVol = toBig(inputValue.tradeValue).times('1e' + withdrawToken.decimals).toFixed(0, 0)\n                const storageId = await LoopringAPI.userAPI?.getNextStorageId({\n                    accountId: accountId,\n                    sellTokenId: withdrawToken.tokenId\n                }, apiKey)\n\n                const request: OffChainWithdrawalRequestV3 = {\n                    exchange: exchangeInfo.exchangeAddress,\n                    owner: accAddress,\n                    to: withdrawAddr,\n                    accountId: account.accountId,\n                    storageId: storageId?.offchainId,\n                    token: {\n                        tokenId: withdrawToken.tokenId,\n                        volume: withdrawVol,\n                    },\n                    maxFee: {\n                        tokenId: feeToken.tokenId,\n                        volume: withdrawFeeInfo.__raw__,\n                    },\n                    extraData: '',\n                    minGas: 0,\n                    validUntil: getTimestampDaysLater(DAYS),\n                }\n\n                const response = await LoopringAPI.userAPI?.submitOffchainWithdraw({\n                    request,\n                    web3: connectProvides.usedWeb3,\n                    chainId: chainId === 'unknown' ? 1 : chainId,\n                    walletType: connectName as ConnectorNames,\n                    eddsaKey: eddsaKey.sk,\n                    apiKey,\n                })\n\n                myLog('got response:', response)\n\n                if (response?.errorInfo) {\n                    setWithdrawAlertText(t('labelWithdrawFailed'))\n                } else {\n                    setWithdrawAlertText(t('labelWithdrawSucess'))\n                }\n\n            } catch (e) {\n                dumpError400(e)\n                setWithdrawAlertText(t('labelWithdrawFailed'))\n            }\n\n            setWithdrawToastOpen(true)\n\n            return true\n\n        } else {\n            return false\n        }\n\n    }, [account, tokenMap, withdrawFeeInfo])\n\n    const withdrawType2 = withdrawType === OffchainFeeReqType.FAST_OFFCHAIN_WITHDRAWAL ? 'Fast' : 'Standard'\n\n    const withdrawProps: WithdrawProps<R, T> = {\n        tradeData: { belong: undefined } as any,\n        coinMap: totalCoinMap as CoinMap<T>,\n        walletMap: walletMap2 as WalletMap<any>,\n        withdrawBtnStatus: TradeBtnStatus.AVAILABLE,\n        withdrawType: withdrawType2,\n        withdrawTypes: WithdrawTypes,\n        onWithdrawClick: () => {\n            if (withdrawValue && withdrawValue.belong) {\n                handleWithdraw(withdrawValue as R)\n            }\n            setShowWithdraw({ isShow: false })\n        },\n        handleFeeChange(value: { belong: any; fee: number | string; __raw__?: any }): void {\n            setWithdrawFeeInfo(value as any)\n        },\n        handleWithdrawTypeChange: (value: 'Fast' | 'Standard') => {\n            myLog('handleWithdrawTypeChange', value)\n            const offchainType = value === WithdrawType.Fast ? OffchainFeeReqType.FAST_OFFCHAIN_WITHDRAWAL : OffchainFeeReqType.OFFCHAIN_WITHDRAWAL\n            setWithdrawType(offchainType)\n        },\n        handlePanelEvent: async (data: SwitchData<R>, switchType: 'Tomenu' | 'Tobutton') => {\n            return new Promise((res: any) => {\n                if (data?.tradeData?.belong) {\n                    if (withdrawValue !== data.tradeData) {\n                        setWithdrawValue(data.tradeData)\n                    }\n                } else {\n                    setWithdrawValue({ belong: undefined, tradeValue: 0, balance: 0 } as IBData<unknown>)\n                }\n\n                res();\n            })\n        },\n        chargeFeeToken: 'ETH',\n        chargeFeeTokenList: chargeFeeList,\n        handleOnAddressChange: (value: any) => {\n            // myLog('withdraw handleOnAddressChange', value);\n            setWithdrawAddr(value)\n        },\n        handleAddressError: (_value: any) => {\n            return { error: false, message: '' }\n        }\n    }\n\n    return {\n        withdrawAlertText,\n        withdrawToastOpen,\n        setWithdrawToastOpen,\n        withdrawProps,\n    }\n}\n","import { HashRouter as Router, Route, Switch, } from 'react-router-dom'\n\nimport Header from 'layouts/header'\n\nimport QuotePage from 'pages/QuotePage'\nimport { SwapPage } from 'pages/SwapPage'\n\nimport Container from '@material-ui/core/Container'\nimport { Box } from '@material-ui/core'\nimport { Layer2Page } from '../pages/Layer2Page'\nimport { LiquidityPage } from '../pages/LiquidityPage'\nimport { MiningPage } from '../pages/MiningPage'\nimport { ModalGroup } from '../modal';\n// import React from 'react';\n\nconst RouterView = () => {\n\n    return <Router>\n        <Header />\n\n        {/*<Box style={{marginTop: `var(--header-height)`}} flex={1} display={'flex'}>*/}\n        <Container maxWidth=\"lg\" style={{minHeight:'calc(100% - 64px - 32px)',display:'flex',flexDirection:'column'}}>\n            {/*style={{height: '100%' }}*/}\n            <Box display={'flex'} flex={1} alignItems={'stretch'} flexDirection={'row'} marginTop={3}  >\n                <Switch>\n                    <Route exact component={SwapPage} path='/'/>\n                    <Route exact component={QuotePage} path='/markets'/>\n                    <Route component={SwapPage} path='/trading/lite'/>\n                    <Route component={SwapPage} path='/trading/lite(/:symbol)'/>\n                    <Route exact component={MiningPage} path='/mining'/>\n\n                    <Route exact component={Layer2Page} path='/layer2'/>\n                    <Route exact component={Layer2Page} path='/layer2/assets'/>\n                    <Route exact component={Layer2Page} path='/layer2/my-liquidity'/>\n                    <Route exact component={Layer2Page} path='/layer2/history'/>\n                    <Route exact component={Layer2Page} path='/layer2/order'/>\n                    <Route exact component={Layer2Page} path='/layer2/rewards'/>\n                    {/* <Route exact component={Layer2Page} path='/layer2/red-packet'/>\n                    <Route exact component={Layer2Page} path='/layer2/security'/>\n                    <Route exact component={Layer2Page} path='/layer2/vip'/> */}\n                    {/* <Route exact component={Layer2Page} path='/layer2/transactions'/>\n                    <Route exact component={Layer2Page} path='/layer2/trades'/>\n                    <Route exact component={Layer2Page} path='/layer2/ammRecords'/> */}\n                    {/* <Route exact component={Layer2Page} path='/layer2/orders'/> */}\n                    <Route exact component={Layer2Page} path='/layer2/setting'/>\n\n                    <Route exact component={LiquidityPage} path='/liquidity'/>\n                    <Route exact component={LiquidityPage} path='/liquidity/pools/*'/>\n                    <Route exact component={LiquidityPage} path='/liquidity/pools'/>\n                    {/*<Route exact component={LiquidityPage} path='/liquidity/pools/coinPair(/:symbol)'/>*/}\n                    <Route exact component={LiquidityPage} path='/liquidity/amm-mining'/>\n                    <Route exact component={LiquidityPage} path='/liquidity/my-liquidity'/>\n                    {/* <Route exact component={LiquidityPage} path='/liquidity/orderBook-Mining'/>\n                    <Route exact component={LiquidityPage} path='/liquidity/maker-rebates'/> */}\n\n                </Switch>\n            </Box>\n        </Container>\n        {/*</Box>*/}\n        <ModalGroup/>\n    </Router>\n}\n\nexport default RouterView\n","import { cleanLayer2, goErrorNetWork } from './lockAccount';\nimport store from '../../stores';\nimport { cleanAccountStatus, updateAccountStatus } from '../../stores/account';\nimport { updateSystem } from '../../stores/system';\n\nexport const networkUpdate = ({chainId}: any): boolean => {\n    const _chainId = store.getState().system.chainId;\n    if (chainId === 'unknown') {\n        store.dispatch(updateAccountStatus({wrongChain: true, _chainId:chainId}));\n        goErrorNetWork();\n        return false;\n    } else if (chainId !== _chainId && _chainId !== 'unknown' && chainId !== 'unknown') {\n        store.dispatch(updateAccountStatus({_chainId:chainId}));\n        store.dispatch(updateSystem({chainId}));\n        cleanLayer2()\n        // window.location.reload();\n        return true;\n    }else{\n        store.dispatch(updateAccountStatus({wrongChain: false, _chainId:chainId}));\n        return true;\n    }\n}\n","import { accountServices } from './accountServices';\nimport store from '../../stores';\nimport { cleanAccountStatus, updateAccountStatus } from '../../stores/account';\nimport { myLog } from '../../utils/log_tools';\n\nexport const checkAccount = (newAccAddress: string) => {\n    const account = store.getState().account;\n    if (account.accAddress === '' || account.accAddress !== newAccAddress) {\n        myLog('After connect >>,account part: diff account, clean layer2')\n        store.dispatch(cleanAccountStatus(undefined));\n        accountServices.sendCheckAccount(newAccAddress);\n    }else if (newAccAddress && newAccAddress !== '') {\n        myLog('After connect >>,checkAccount: step1 address',newAccAddress)\n        if (account &&  account.accountId === -1) {\n            myLog('After connect >>,checkAccount: step1 no account Id')\n            accountServices.sendCheckAccount(newAccAddress)\n        } else if (account.accountId && account.apiKey && account.eddsaKey) {\n            myLog('After connect >>,checkAccount: step1 have activate account from store, account:', account)\n            accountServices.sendAccountSigned();\n        } else {\n            myLog('After connect >>,checkAccount: step1 account locked')\n            accountServices.sendAccountLock();\n        }\n    }\n}","import React from 'react';\nimport { SagaStatus } from '@loopring-web/common-resources';\nimport { useWalletLayer1 } from './stores/walletLayer1';\nimport { useWalletLayer2 } from './stores/walletLayer2';\nimport { useAccount } from './stores/account';\nimport { useUserRewards } from './stores/userRewards';\nimport { useConnect } from './hookConnect';\nimport { myLog } from 'utils/log_tools';\n\nexport function useAccountInit({state}: { state: keyof typeof SagaStatus }) {\n    const {getUserRewards}  = useUserRewards()\n    useConnect({state})\n    const {\n        updateWalletLayer1,\n        resetLayer1,\n        status: walletLayer1Status,\n        statusUnset: wallet1statusUnset\n    } = useWalletLayer1()\n    const {\n        updateWalletLayer2,\n        resetLayer2,\n        status: walletLayer2Status,\n        statusUnset: wallet2statusUnset\n    } = useWalletLayer2();\n    const {account, status: accountStatus, statusUnset: accountStatusUnset} = useAccount();\n\n    React.useEffect(() => {\n        if (accountStatus === SagaStatus.UNSET && state === SagaStatus.DONE) {\n            switch (account.readyState) {\n                case 'UN_CONNECT':\n                case 'ERROR_NETWORK':\n                    resetLayer1();\n                    break;\n                case 'NO_ACCOUNT':\n                case 'DEPOSITING':\n                case 'LOCKED':\n                    resetLayer2();\n                    if (walletLayer1Status !== SagaStatus.PENDING) {\n                        updateWalletLayer1();\n                    }\n                    break;\n                case 'ACTIVATED':\n                    // \n                    if (walletLayer1Status !== SagaStatus.PENDING) {\n                        updateWalletLayer1();\n                    }\n                    if (walletLayer2Status !== SagaStatus.PENDING) {\n                        updateWalletLayer2();\n                    }\n                    break;\n\n            }\n            getUserRewards();\n        }\n\n    }, [accountStatus, state, account.readyState]);\n    React.useEffect(() => {\n        switch (walletLayer1Status) {\n            case SagaStatus.ERROR:\n                wallet1statusUnset();\n                // setState('ERROR')\n                //TODO: show error at button page show error  some retry dispath again\n                break;\n            case SagaStatus.DONE:\n                wallet1statusUnset();\n                //setWalletMap1(walletLayer1State.walletLayer1);\n                break;\n            default:\n                break;\n\n        }\n    }, [walletLayer1Status]);\n    React.useEffect(() => {\n        switch (walletLayer2Status) {\n            case SagaStatus.ERROR:\n                wallet2statusUnset();\n                // setState('ERROR')\n                //TODO: show error at button page show error  some retry dispath again\n                break;\n            case SagaStatus.DONE:\n                wallet2statusUnset();\n                //setWalletMap1(walletLayer1State.walletLayer1);\n                break;\n            default:\n                break;\n\n        }\n    }, [walletLayer2Status])\n}\n","import React from 'react';\nimport { useOpenModals, WalletConnectStep } from '@loopring-web/component-lib';\nimport { ErrorType, useConnectHook } from '@loopring-web/web3-provider';\nimport { SagaStatus } from '@loopring-web/common-resources';\nimport { ChainId, sleep } from 'loopring-sdk';\n\nimport { useAccount } from 'stores/account';\nimport { useSystem } from 'stores/system';\nimport { myLog } from 'utils/log_tools';\nimport { networkUpdate } from 'services/account/networkUpdate';\nimport { checkAccount } from 'services/account/checkAccount';\nimport { REFRESH_RATE } from 'defs/common_defs';\nimport { useWalletLayer2 } from 'stores/walletLayer2';\n\nexport function useConnect({state}: { state: keyof typeof SagaStatus }) {\n    const {\n        account,\n        shouldShow,\n        resetAccount,\n        statusUnset: statusAccountUnset,\n        setShouldShow,\n        status: accountStatus\n    } = useAccount();\n    const { updateWalletLayer2, resetLayer2 } = useWalletLayer2()\n\n    const {updateSystem, chainId: _chainId } = useSystem();\n    const {setShowConnect} = useOpenModals();\n    const [stateAccount, setStateAccount] = React.useState< keyof typeof SagaStatus>('DONE');\n    React.useEffect(() => {\n        if (stateAccount === SagaStatus.PENDING && accountStatus === SagaStatus.DONE) {\n            setStateAccount('DONE')\n            statusAccountUnset();\n        }\n    }, [stateAccount,accountStatus])\n    const handleConnect = React.useCallback(async ({\n                                                       accounts,\n                                                       chainId,\n                                                   }: { accounts: string, provider: any, chainId: ChainId | 'unknown' }) => {\n        const accAddress = accounts[ 0 ];\n        myLog('After connect >>,network part start: step1 networkUpdate')\n        const networkFlag = networkUpdate({chainId})\n        myLog('After connect >>,network part done: step2 check account')\n        if (networkFlag) {\n            checkAccount(accAddress);\n        }\n        setShouldShow(false)\n        setShowConnect({isShow: !!shouldShow ?? false, step: WalletConnectStep.SuccessConnect});\n        await sleep(REFRESH_RATE)\n        setShowConnect({isShow: false, step: WalletConnectStep.SuccessConnect});\n\n    }, [shouldShow, setShowConnect, setShouldShow])\n\n    const handleAccountDisconnect = React.useCallback(async () => {\n        resetAccount({shouldUpdateProvider: true});\n        setStateAccount(SagaStatus.PENDING)\n        await sleep(REFRESH_RATE)\n        // updateWalletLayer2()\n        resetLayer2()\n    }, [resetAccount, setStateAccount]);\n\n    const handleError = React.useCallback(({type, errorObj}: { type: keyof typeof ErrorType, errorObj: any }) => {\n        updateSystem({chainId: account._chainId === 1 ||  account._chainId === 5 ? account._chainId : 5})\n        resetAccount();\n        statusAccountUnset();\n    }, [resetAccount, statusAccountUnset, updateSystem, account._chainId]);\n\n    useConnectHook({handleAccountDisconnect, handleError, handleConnect});\n\n}","import { Trans, useTranslation } from 'react-i18next';\nimport { Box, Container, Link, Typography } from '@material-ui/core';\nimport styled from '@emotion/styled';\nimport { ErrorObject } from '@loopring-web/common-resources';\nimport { getContactInfo } from '../../utils/dt_tools';\n\nconst StyleBox = styled(Box)`\n  background-image: url('./static/images/error_bg.png');\n  background-repeat: no-repeat;\n  background-size: contain;\n  background-position: bottom;\n  white-space: pre-wrap;\n  //h2{\n  //  position: relative;\n  //}\n` as typeof Box\n\nexport const ErrorPage = ({messageKey}: ErrorObject) => {\n    // const {messageKey}: { id?:string,messageKey:string } = {messageKey: 'errorMessageTokenMapIsEmpty'};\n    //TODO: checkRouter\n    const {t} = useTranslation('error');\n    const message = `labelConnectUs`;\n    return <>\n        <Container>\n            {/*style={{height: '100%' }}*/}\n            <StyleBox flex={1} display={'flex'} alignItems={'flex-start'} justifyContent={'center'}\n                      flexDirection={'column'} marginTop={4} height={680} maxWidth={1200}>\n                {/*<StyleBox>*/}\n                <Box textAlign={'center'} position={'relative'} left={128} top={-64}>\n                    <Typography component={'h2'} variant={'h3'}>\n                        {t(messageKey)}\n                    </Typography>\n                    <Typography marginY={2} component={'p'} variant={'body1'} color={'textSecondary'}>\n                        <Trans i18nKey={message}>\n                            If you believe this is indeed a bug, please <Link\n                            component={'a'}\n                            onClick={(e) => {\n                                window.location.href = getContactInfo();\n                                e.preventDefault();\n                            }}\n                        >contact us</Link> <br/> We would appreciate your feedback\n\n                        </Trans>\n                        {/*{t(message)}*/}\n                        {/*{t(messageKey)}*/}\n                    </Typography>\n                </Box>\n                {/*</StyleBox>*/}\n            </StyleBox>\n        </Container>\n\n        {/*<Footer></Footer>*/}\n    </>\n}\n","import { useTranslation } from 'react-i18next';\nimport { Box } from '@material-ui/core';\nimport styled from '@emotion/styled';\n// import { ErrorObject } from '@loopring-web/common-resources';\n// import { getContactInfo } from '../../utils/dt_tools';\nimport { boxLiner } from '@loopring-web/component-lib';\n// ${({theme}) => boxLiner({theme})}\nconst StyleBox = styled(Box)`\n  //background: var(--color-mask);\n  ${({theme}) => boxLiner({theme})}\n\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  width: 0;\n  z-index: 500;\n  height: 100%;\n  width: 100%;\n  svg path,\n  svg rect{\n    fill: var(--color-primary)\n  }\n` as typeof Box\n\nexport const LoadingPage = () => {\n    const {t} = useTranslation('layout');\n    return <>\n        {/*<Container>*/}\n            {/*style={{height: '100%' }}*/}\n            <StyleBox flex={1} display={'flex'} alignItems={'center'} justifyContent={'center'}\n                      flexDirection={'column'} height={'100%'}  width={'100%'}>\n                <div className=\"loader loader--style3\" title=\"2\">\n                    <svg version=\"1.1\" id=\"loader-1\" xmlns=\"http://www.w3.org/2000/svg\"\n                         xmlnsXlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n                         width=\"40px\" height=\"40px\" viewBox=\"0 0 50 50\" enableBackground={'new 0 0 50 50'}\n                         xmlSpace=\"preserve\">\n  <path fill=\"#000\"\n        d=\"M43.935,25.145c0-10.318-8.364-18.683-18.683-18.683c-10.318,0-18.683,8.365-18.683,18.683h4.068c0-8.071,6.543-14.615,14.615-14.615c8.072,0,14.615,6.543,14.615,14.615H43.935z\">\n    <animateTransform attributeType=\"xml\"\n                      attributeName=\"transform\"\n                      type=\"rotate\"\n                      from=\"0 25 25\"\n                      to=\"360 25 25\"\n                      dur=\"0.6s\"\n                      repeatCount=\"indefinite\"/>\n    </path>\n  </svg>\n                </div>\n                {/*<StyleBox>*/}\n                {/*<Slide direction=\"up\" in={true} mountOnEnter unmountOnExit>*/}\n                {/*<Box textAlign={'center'} >*/}\n                {/*    <Typography component={'h1'} variant={'h1'} fontWeight={500} fontFamily={'DINCondensed2'} fontSize={96} style={{textTransform: \"uppercase\"}} >*/}\n                {/*        {t('titleLoopring')}*/}\n                {/*    </Typography>*/}\n                {/*    <Typography component={'h2'}   marginTop={3}  fontSize={32} fontFamily={'DINCondensed2'}>*/}\n                {/*        {t('labelLoopringDescribe')}*/}\n                {/*    </Typography>*/}\n                {/*    /!*<Typography marginY={2} component={'p'} variant={'body1'} color={'textSecondary'}>*!/*/}\n                {/*    /!*    <Trans i18nKey={message}>*!/*/}\n                {/*    /!*        If you believe this is indeed a bug, please <Link*!/*/}\n                {/*    /!*        component={'a'}*!/*/}\n                {/*    /!*        onClick={(e) => {*!/*/}\n                {/*    /!*            window.location.href = getContactInfo();*!/*/}\n                {/*    /!*            e.preventDefault();*!/*/}\n                {/*    /!*        }}*!/*/}\n                {/*    /!*    >contact us</Link> <br/> We would appreciate your feedback*!/*/}\n\n                {/*    /!*    </Trans>*!/*/}\n                {/*    /!*    /!*{t(message)}*!/*!/*/}\n                {/*    /!*    /!*{t(messageKey)}*!/*!/*/}\n                {/*    /!*</Typography>*!/*/}\n                {/*</Box>*/}\n                {/*</Slide>*/}\n                {/*</StyleBox>*/}\n            </StyleBox>\n\n        {/*</Container>*/}\n\n        {/*<Footer></Footer>*/}\n    </>\n}\n","// import { ModalProvider } from 'styled-react-modal'\nimport RouterView from './routers'\nimport { GlobalStyles } from '@material-ui/core';\nimport { css, Theme, useTheme } from '@emotion/react';\nimport { ErrorMap, globalCss } from '@loopring-web/common-resources';\nimport { setLanguage } from '@loopring-web/component-lib'\nimport { useInit } from './hook';\nimport { ErrorPage } from './pages/ErrorPage';\nimport { LoadingPage } from './pages/LoadingPage';\nimport store from './stores';\nimport React from 'react';\nimport { useTranslation } from 'react-i18next';\n\nconst App = () => {\n  const theme: Theme = useTheme();\n  const { i18n: { language } } = useTranslation()\n  const storeLan = store.getState().settings.language\n  \n\n  React.useEffect(() => {\n    if (storeLan !== language) {\n      store.dispatch(setLanguage(language));\n    }\n  }, [])\n\n  const { state } = useInit();\n  // const [status, setStatus] = React.useState<keyof typeof SagaStatus>('PENDING');\n  // check all status be\n  //TODO  demo if  tokenMapStatus is unset and tokenMap is empty. show error\n  //TODO tokenMapObj.status is pending, show global loading\n  //console.log(tokenMapObj.tokenMap && Object.keys(tokenMapObj.tokenMap).length>0,tokenMapObj.status, tokenMapObj.errorMessage)\n\n  // useEffect(() => {\n  //     if (state === SagaStatus.PENDING || state === SagaStatus.ERROR) {\n  //         setStatus(state)\n  //     } else {\n  //         setStatus('DONE')\n  //     }\n  // }, [state, setStatus])\n\n\n    return <><GlobalStyles styles={css` \n      ${globalCss({ theme })};\n      body{\n          ${theme.mode === 'dark' ? `\n            color: ${theme.colorBase.textPrimary};\n          ` : ``}\n      }\n      body:before {\n        ${theme.mode === 'dark' ? `\n            background: var(--color-global-bg);\n       ` : ''}\n      }\n      //#root{\n      //  display: flex;\n      //  flex-direction: column;\n      //}\n}`}></GlobalStyles>\n\n        {/*<Web3ReactManager>*/}\n        {state === 'PENDING' ?\n          <LoadingPage />\n          // <ErrorPage {...ErrorMap.LOADING_WHOLE_SITE}/>\n          // <Avatar src={loadingSvg}/>\n          : state === 'ERROR' ? <ErrorPage {...ErrorMap.NO_NETWORK_ERROR} /> : <>\n            <RouterView />\n\n            {/*    <ErrorPage {...ErrorMap.LOADING_WHOLE_SITE}/>*/}\n          </>}\n      </>\n\n\n}\n\nexport default App;\n\n\n","import React from 'react';\nimport { useCustomDCEffect } from 'hooks/common/useCustomDCEffect';\nimport { useSystem } from './stores/system';\nimport { ChainId, sleep } from 'loopring-sdk';\nimport { useAmmMap } from './stores/Amm/AmmMap';\nimport { SagaStatus } from '@loopring-web/common-resources';\nimport { useTokenMap } from './stores/token';\nimport { useAccount } from './stores/account/hook';\nimport { connectProvides, walletServices } from '@loopring-web/web3-provider';\nimport { useAccountInit } from './hookAccountInit';\nimport { useAmmActivityMap } from './stores/Amm/AmmActivityMap';\nimport { useTicker } from './stores/ticker';\nimport { checkAccount } from './services/account/checkAccount';\nimport { useUserRewards } from './stores/userRewards';\n// import { statusUnset as accountStatusUnset } from './stores/account';\n\n/**\n * @description\n * @step1 subscribe Connect hook\n * @step2 check the session storage ? choose the provider : none provider\n * @step3 decide china Id by step2\n * @step4 prepare the static date (tokenMap, ammMap, faitPrice, gasPrice, forex, Activities ...)\n * @step5 launch the page\n * @todo each step has error show the ErrorPage , next version for service maintain page.\n */\n\nexport function useInit() {\n    const [state, setState] = React.useState<keyof typeof SagaStatus>('PENDING')\n    // const {updateWalletLayer1, resetLayer1, status:walletLayer1Status,statusUnset:wallet1statusUnset} = useWalletLayer1()\n    // const {updateWalletLayer2, resetLayer2, status:walletLayer2Status,statusUnset:wallet2statusUnset } = useWalletLayer2();\n    const {account, updateAccount, resetAccount, status:accountStatus,statusUnset:accountStatusUnset} = useAccount();\n    const {status: tokenMapStatus, statusUnset: tokenMapStatusUnset}  = useTokenMap();\n    const {status: ammMapStatus, statusUnset: ammMapStatusUnset}  = useAmmMap();\n    const {updateSystem, status: systemStatus, statusUnset: systemStatusUnset} = useSystem();\n    const {status:ammActivityMapStatus,statusUnset:ammActivityMapStatusUnset}  = useAmmActivityMap();\n    const {status: userRewardsStatus, statusUnset: userRewardsUnset}  = useUserRewards();\n    const {status: tickerStatus,statusUnset: tickerStatusUnset} = useTicker();\n\n    useCustomDCEffect(async () => {\n        // TODO getSessionAccount infor\n\n        if (account.accAddress !== '' && account.connectName && account.connectName !== 'unknown') {\n            try {\n                await connectProvides[ account.connectName ](account.accAddress);\n                updateAccount({})\n                if (connectProvides.usedProvide && connectProvides.usedWeb3) {\n\n                    // @ts-ignore\n                    let chainId = Number(connectProvides.usedProvide?.connector?.chainId) ??  Number(await connectProvides.usedWeb3.eth.getChainId())\n                    if( ChainId[chainId] === undefined) {\n                        chainId = account._chainId && account._chainId !=='unknown'? account._chainId  :ChainId.MAINNET\n                    }\n\n                    updateSystem({chainId:chainId as any})\n                    return\n                }\n            } catch (error) {\n                //await resetAccount({shouldUpdateProvider:true});\n                walletServices.sendDisconnect('',`error at init loading  ${error}, disconnect`)\n                const chainId = account._chainId && account._chainId !=='unknown'? account._chainId  :ChainId.MAINNET\n                updateSystem({chainId})\n            }\n        } else  {\n            if(account.accAddress === '' ||  account.connectName === 'unknown' ){\n                resetAccount() \n            }\n            const chainId = account._chainId && account._chainId !=='unknown'? account._chainId  :ChainId.MAINNET\n            updateSystem({chainId})\n        }\n\n    }, [])\n    React.useEffect(() => {\n        switch (systemStatus) {\n            case SagaStatus.PENDING:\n                if(state!==SagaStatus.PENDING){\n                    setState(SagaStatus.PENDING)\n                }\n                break\n            case SagaStatus.ERROR:\n                systemStatusUnset();\n                setState('ERROR')\n                //TODO show error at button page show error  some retry dispat again\n                break;\n            case SagaStatus.DONE:\n                systemStatusUnset();\n                break;\n            default:\n                break;\n        }\n    }, [systemStatus]);\n    React.useEffect(() => {\n        switch (tokenMapStatus) {\n            case SagaStatus.ERROR:\n                tokenMapStatusUnset();\n                setState('ERROR')\n                break;\n            case SagaStatus.DONE:\n                tokenMapStatusUnset();\n                break;\n            default:\n                break;\n        }\n        switch (ammMapStatus) {\n            case SagaStatus.ERROR:\n                ammMapStatusUnset();\n                setState('ERROR')\n                break;\n            case SagaStatus.DONE:\n                ammMapStatusUnset();\n                break;\n            default:\n                break;\n        }\n        if(tokenMapStatus === SagaStatus.UNSET && ammMapStatus ===  SagaStatus.UNSET ){\n            setState('DONE')\n        }\n    }, [tokenMapStatus,ammMapStatus])\n    React.useEffect(() => {\n        switch (ammActivityMapStatus) {\n            case SagaStatus.ERROR:\n                ammActivityMapStatusUnset();\n                // setState('ERROR')\n                //TODO: show error at button page show error  some retry dispath again\n                break;\n            case SagaStatus.DONE:\n                ammActivityMapStatusUnset();\n                break;\n            default:\n                break;\n        }\n    }, [ammActivityMapStatus])\n    React.useEffect(() => {\n        switch (tickerStatus) {\n            case SagaStatus.ERROR:\n                console.log(\"ERROR\", 'get ticker error,ui');\n                tickerStatusUnset()\n                break;\n            case SagaStatus.PENDING:\n                break;\n            case SagaStatus.DONE:\n                tickerStatusUnset();\n                break;\n            default:\n                break;\n        }\n    }, [tickerStatus])\n    React.useEffect(() => {\n        switch (userRewardsStatus) {\n            case SagaStatus.ERROR:\n                console.log(\"ERROR\", 'get userRewards');\n                userRewardsUnset()\n                break;\n            case SagaStatus.PENDING:\n                break;\n            case SagaStatus.DONE:\n                userRewardsUnset();\n                break;\n            default:\n                break;\n        }\n    }, [userRewardsStatus])\n\n    useAccountInit({state})\n    // React.useEffect(() => {\n    //     if (tokenMapStatus === SagaStatus.ERROR|| tokenState.status === \"ERROR\") {\n    //         //TODO: solve errorx\n    //         ammMapState.statusUnset();\n    //\n    //         setState('ERROR');\n    //     } else if(){\n    //         ammMapState.statusUnset();\n    //         tokenState.statusUnset();\n    //     }\n    //     if (ammMapState.status === \"DONE\" && tokenState.status === \"DONE\") {\n    //\n    //         setState('DONE');\n    //     }\n    // }, [ammMapStatus])\n\n\n    return {\n        state,\n    }\n}\n\n\n","import { Provider } from 'react-redux'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\n// import { createWeb3ReactRoot, Web3ReactProvider } from '@web3-react/core'\nimport store, { persistor } from 'stores'\n// import { getLibrary } from 'utils/web3_tools'\n// import { NetworkContextName } from 'loopring-sdk'\nimport { getTheme, i18n, provider, ProviderComposer } from \"@loopring-web/common-resources\"\n\nimport { ThemeProvider as MuThemeProvider } from '@material-ui/core'\nimport LocalizationProvider from '@material-ui/pickers/LocalizationProvider'\n\nimport MomentUtils from '@material-ui/lab/AdapterMoment'\n\nimport { ThemeProvider } from \"@emotion/react\"\n\nimport { I18nextProvider } from \"react-i18next\"\nimport { PersistGate } from 'redux-persist/integration/react'\nimport { useSettings } from '@loopring-web/component-lib';\nimport React, { Provider as TProvider } from 'react';\n\n// const Web3ProviderNetwork = createWeb3ReactRoot(NetworkContextName)\n\n\nconst ProviderApp = React.memo(({children}:{children:JSX.Element})=>{\n    const providers:Array<[TProvider<any>, any]> = [\n        provider(Provider as any, {store}),\n        provider(LocalizationProvider as any, {dateAdapter: MomentUtils}),\n        provider(I18nextProvider as any, {i18n: i18n}),\n    ] as any\n    return  <ProviderComposer providers={providers}>{children}</ProviderComposer>\n})\nconst ProviderThen =   React.memo(({children}:{children:JSX.Element})=>{\n    const {themeMode} = useSettings();\n    const providers:Array<[TProvider<any>, any]> = [\n        provider(MuThemeProvider as any, {theme: getTheme(themeMode)}),\n        provider(ThemeProvider as any, {theme: getTheme(themeMode)}),\n        provider(PersistGate as any, {persistor, loading: null})\n    ] as any\n    return  <ProviderComposer providers={providers}>{children}</ProviderComposer>\n})\n\n\nReactDOM.render(\n        <ProviderApp>\n            <ProviderThen>\n                <App/>\n            </ProviderThen>\n        </ProviderApp>,\n    document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\nif (process.env.NODE_ENV !== 'production') {\n    reportWebVitals(console.log)\n}\n"],"sourceRoot":""}