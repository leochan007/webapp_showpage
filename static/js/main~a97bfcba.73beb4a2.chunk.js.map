{"version":3,"sources":["defs/web3_defs.ts","stores/account/hook.ts","state_machine/machine_builder.ts","stores/account/reducer.ts","stores/Amm/AmmMap/hook.ts","stores/token/hook.ts","stores/trading/hook.ts","utils/swap_calc_utils.ts","hooks/web3/useWeb3.ts","networks/web3_connectors.ts","stores/Amm/AmmMap/reducer.ts","index.tsx","stores/trading/reducer.ts","storage/index.ts","stores/ticker/reducer.ts","stores/walletLayer2/hook.ts","stores/system/reducer.ts","stores/system/interface.ts","stores/walletLayer1/reducer.ts","stores/walletLayer2/reducer.ts","stores/Amm/AmmActivityMap/reducer.ts","stores/token/reducer.ts","stores/ticker/hook.ts","stores/Amm/AmmActivityMap/hook.ts","stores/system/hook.ts","state_machine/account_machine_spec.ts","utils/web3_tools.ts","provider/global/index.tsx","provider/web3ReactManager/index.tsx","provider/dev-wrapper/index.tsx","stores/constant.ts","pages/ErrorPage/index.tsx","utils/dt_tools.ts","hooks/exchange/useApi.ts","stores/global/actions.ts","stores/transactions/reducer.ts","stores/Amm/AmmRecord/reducer.ts","stores/Amm/AmmTrades/reducer.ts","stores/Amm/AmmActivityMap/saga.ts","stores/Amm/AmmMap/saga.ts","stores/Amm/AmmRecord/saga.ts","stores/Amm/AmmTrades/saga.ts","stores/Amm/index.ts","stores/token/saga.ts","stores/ticker/saga.ts","stores/system/saga.ts","stores/walletLayer1/saga.ts","stores/walletLayer2/saga.ts","stores/rootSaga.ts","stores/socket/reducer.ts","stores/index.ts","hooks/common/useCustomDCEffect.ts","stores/apis/api.ts","hook.ts","defs/common_defs.ts","hooks/modal/useModals.ts","utils/hook_tools.ts","hooks/common/useCommon.ts","hooks/exchange/useExchangeAPI.ts","layouts/header/hook.tsx","hooks/exchange/useUserAPI.ts","utils/obj_tools.ts","pages/AccountPage/index.tsx","layouts/header/index.tsx","pages/QuotePage/index.tsx","pages/QuotePage/hook.ts","pages/SwapPage/panel/BasicInfoPanel/hook.tsx","hooks/help/connetStatusCallback.ts","pages/SwapPage/panel/BasicInfoPanel/index.tsx","pages/SwapPage/panel/TradePanel/index.tsx","defs/swap_defs.ts","hooks/help/updateWallet.ts","hooks/help/coinPairInit.ts","hooks/help/pairDetail.ts","hooks/help/makeTickView.ts","hooks/help/marketTable.ts","pages/SwapPage/index.tsx","pages/SwapPage/hook.ts","hooks/common/useApi2.ts","hooks/common/useWebsocketApi.ts","pages/DebugPage/index.tsx","pages/Layer2Page/TxPanel/hooks.ts","pages/Layer2Page/TxPanel/index.tsx","pages/Layer2Page/AssetPanel/index.tsx","pages/Layer2Page/TradePanel/index.tsx","pages/Layer2Page/OrderPanel/index.tsx","pages/SettingPage/SettingPanel.tsx","pages/Layer2Page/index.tsx","pages/LiquidityPage/PoolsPanel/hook.ts","pages/LiquidityPage/PoolsPanel/index.tsx","hooks/help/ammPairDetail.ts","pages/LiquidityPage/AmmPanel/index.tsx","pages/LiquidityPage/AmmPanel/hooks.ts","hooks/help/myAmm.ts","pages/LiquidityPage/CoinPairPanel/hooks.ts","pages/LiquidityPage/CoinPairPanel/index.tsx","pages/LiquidityPage/AmmMining/index.tsx","pages/LiquidityPage/AmmMining/hook.ts","pages/LiquidityPage/LiquidityOverview/index.tsx","pages/LiquidityPage/index.tsx","routers/index.tsx"],"names":["connectorsByName","ConnectorNames","Unknown","undefined","Injected","injected","Network","network","WalletConnect","walletconnect","WalletLink","walletlink","Ledger","ledger","Trezor","trezor","Authereum","authereum","useWeb3Account","useActiveWeb3React","connector","library","account","chainId","active","error","isConnected","voca","isBlank","useAccount","useSelector","state","isNoAccount","status","AccountStatus","NOACCOUNT","isActivated","ACTIVATED","apiKey","eddsaKey","accountId","useStateMachine","spec","dispatch","useDispatch","machine","AccountMachineSpec","currentState","event","stateTransitions","states","Error","nextState","sendEvent","useCallback","setAccountStatus","useConnect","activate","useState","activatingConnector","setActivatingConnector","connect","item_name","isSwitch","newConnector","setConnectNameTemp","store","getState","StatusChangeEvent","Reset","Connecting","console","log","useDisconnect","deactivate","disconnect","reset","useUnlock","exchangeApi","useExchangeAPI","userApi","useUserAPI","tradingInfo","useGetTradingInfo","lock","a","Lock","unlock","exchangeInfo","exchangeAddress","LOCKED","sk","apikey","getProvider","provider","web3","Web3","sign_tools","accAddr","nonce","connectName","eddsakey","toHex","toBig","keyPair","secretKey","getUserApiKey","Unlock","setEddsaKey","setApikey","useCheckAccStatus","web3Account","lv1Acc","prevChainId","usePrevious","prevWeb3Account","useCustomDCEffect","UNCONNNECTED","cleanUp","CONNECTED","DEPOSITING","DEPOSIT_TO_CONFIREM","UNACTIVATED","ARPROVING","APPROV_TO_CONFIRM","resetLayer1","resetLayer2","getAccount","owner","acc","accInfo","setAccountInfo","updateWalletLayer1","connectNameTemp","setConnectName","HasPubkey","dumpError400","setAccAddr","response","data","resultInfo","code","ErrorResponse","FinishDeposit","UserStorage","checkTimeout","handler","setInterval","isTimeOut","clearInterval","setHandler","updateWalletLayer2","getHandler","checkStatus","initialState","defaultAccId","process","REACT_APP_TEST_ACCOUND_ID","getAccountId","defaultApiKey","REACT_APP_TEST_API_KEY","getApikey","defaultOwner","REACT_APP_TEST_OWNER","defaultEddsaKey","REACT_APP_TEST_EDDSA_KEY","getEddsakey","JSON","stringify","publicKey","isContractAddress","accountSlice","createSlice","name","reducers","initState","Object","assign","action","payload","setIsContractAddress","actions","useAmmMap","ammMap","amm","statusUnset","ammMapSlice","updateAmmMap","getAmmMap","useTokenMap","tokenMap","tokenMapSlice","updateTokenMap","getTokenMap","getChainId","system","trading","useUpdateChainId","useEffect","setChainId","ChainId","GORLI","useUpdateExchangeMarkets","api","getMixMarkets","setMarkets","useUpdateExchangeInfo","getExchangeInfo","setExchangeInfo","useUpdateAmmPoolConf","useAmmpoolAPI","getAmmPoolConf","ammPoolConf","setAmmPoolConf","useUpdateAmmPoolStats","getAmmPoolStats","ammPoolStats","setAmmPoolStats","useUpdateAmmActivityRules","getAmmPoolActivityRules","ammActivityRules","setAmmActivityRules","activityRules","useUpdateTokens","getTokens","tokens","setTokens","SwapStatus","getIcon","symbol","getIconByTokenInfo","token","addr","utils","getAddress","address","getToken","fromWEI","valueInWEI","precision","ceil","tokenInfo","precisionToFixed","value","fm","div","decimals","context","useWeb3React","contextNetwork","NetworkContextName","useEtherscan","etherscanUrl","setEtherscanUrl","MAINNET","useEagerConnect","tried","setTried","isAuthorized","then","catch","useInactiveListener","onReConnectInjected","ethereum","window","reConnectInjected","on","handleChainChanged","handleAccountsChanged","accounts","length","removeListener","POLLING_INTERVAL","RPC_URLS","InjectedConnector","supportedChainIds","NetworkConnector","urls","1","5","defaultChainId","WalletConnectConnector","rpc","bridge","qrcode","pollingInterval","WalletLinkConnector","url","appName","LedgerConnector","TrezorConnector","manifestEmail","manifestAppUrl","AuthereumConnector","__timer__","errorMessage","STATUS","PENDING","getAmmMapStatus","ERROR","DONE","updateRealTimeAmmMap","UNSET","Web3ProviderNetwork","createWeb3ReactRoot","providers","LocalizationProvider","dateAdapter","MomentUtils","I18nextProvider","i18n","MuThemeProvider","theme","getTheme","ThemeProvider","Provider","ReactDOM","render","getLibrary","App","document","getElementById","defaultSymbol","getBaseQuote","base","quote","symbol_base","symbol_quote","interval","markets","marketTrades","tickerMap","refreshRate","refreshRateSlow","tradingSlice","changeSymbol","changeTradingInterval","setTickerMap","setMarketTrades","CONSTANTS","rawHandler","sessionStorage","getItem","Handler","parseInt","err","setItem","removeItem","dateTimeStr","localStorage","ActiveTime","now","Date","getTime","toString","tmpDt","SESSION_TIMEOUT_SECONDS","clear","rawId","AccountId","Account","Apikey","Eddsakey","orderHash","AmmOrder","current","HardwareAddresses","includes","toLowerCase","newValue","tickerMapSlice","getTicker","getTickers","getTickerStatus","useWalletLayer2","walletLayer2","walletLayer2Slice","getWalletLayer2","env","ENV","PROD","baseURL","faitPrices","gasPrice","forex","topics","systemSlice","updateSystem","updateRealTimeObj","getSystemStatus","setTopics","NETWORKEXTEND","walletLayer1","walletLayer1Slice","getWalletLayer1Status","getWalletLayer2Status","ammActivityMapSlice","ammActivityMap","getAmmActivityMap","getAmmActivityMapStatus","coinMap","addressIndex","idIndex","getTokenMapStatus","marketArray","marketCoins","getTokenPairMap","useTicker","updateTickers","tickerKeys","updateTicker","tickerKey","useAmmActivityMap","updateAmmActivityMap","useSystem","HasNoPubkey","IsSmartWallet","ApproveSubmit","ApproveConfirmed","Web3Provider","getShortAddr","trim","substr","WindowEvent","events","Click","Scroll","forceReset","debounce","GlobalProvider","children","forEach","addEventListener","removeEventListener","Fragment","MessageWrapper","Message","colorBase","Web3ReactManager","t","useTranslation","networkActive","networkError","activateNetwork","triedEager","showLoader","setShowLoader","timeout","setTimeout","clearTimeout","DevWrapper","StyleBox","styled","Box","ErrorPage","messageKey","Container","flex","display","alignItems","justifyContent","flexDirection","marginTop","height","maxWidth","textAlign","position","left","top","Typography","component","variant","marginY","color","Trans","i18nKey","Link","onClick","e","location","href","subject","body","email","CONTACT_US_EMAIL","getContactInfo","preventDefault","useApi","ApiClass","DEFAULT_TIMEOUT","genApi","useMemo","ExchangeAPI","AmmpoolAPI","UserAPI","updateVersion","createAction","transactionsSlice","addTransaction","from","hash","approval","summary","claim","addedTime","clearAllTransactions","checkedTransaction","blockNumber","tx","lastCheckedBlockNumber","Math","max","finalizeTransaction","receipt","confirmedTime","ammRecordSlice","ammRecords","getAmmRecord","getAmmRecordStatus","ammTradesSlice","ammTrades","getAmmTrades","getAmmTradesStatus","getPostsSaga","ammActivityMapSaga","getAmmActivityMapApi","totalRewards","myRewards","rewardToken","ETH","duration","to","Promise","resolve","call","put","all","takeLatest","updateRealTimeSaga","ammMapInitSaga","ammMapRealTimeSaga","setAmmState","ammPoolState","amountDollar","parseFloat","liquidityUSD","amountYuan","totalLPToken","lpLiquidity","totalA","liquidity","totalB","rewardValue","rewards","feeA","fees","feeB","tradeFloat","percent","timeUnit","APY","apyBips","apy","getAmmMapApi","ammpools","ammpoolAPI","Reflect","ownKeys","key","item","market","pooled","dataItem","coinA","coinB","feeDollar","feeYuan","isNew","Number","createdAt","isActivity","map","ammMapSaga","fork","ammRecordSaga","getAmmRecordApi","side","amount","sell","belong","tradeValue","buy","time","fee","amountLP","ammTradesSaga","getAmmTradesApi","priceValue","priceToken","posts","ammReducer","combineReducers","ammRecord","reducer","ammForks","tokenInitSaga","getTokenMapApi","tokensMap","pairs","marketArr","tokenArr","startsWith","icon","simpleName","description","company","tokenList","tradePairs","tokenId","tokenSaga","tickerSaga","tickersSaga","getTickersApi","list","exchangeAPI","join","tickers","tickMap","base_token_volume","priceDollar","priceYuan","volume","toNumber","floatTag","close","open","reward","CustomError","ErrorMap","NO_TOKEN_KEY_LIST","tickerForks","getUpdateSystem","systemSaga","initConfig","LoopringAPI","tokenSymbolMap","take","getSystemsApi","hostname","DEV","UAT","NONETWORK","NO_NETWORK_ERROR","InitApi","getFiatPrice","legal","fiatPrices","getGasPrice","systemForks","walletLayer1Saga","getWalletLayer1Balance","getTokenBalances","tokenBalances","reduce","prev","count","walletLayer1Fork","walletLayer2Saga","getWalletLayer2Balance","userAPI","getUserBalances","userBalances","walletLayer2Fork","mySaga","socketSlice","socket","socketStart","getSocketStatus","sagaMiddleware","createSagaMiddleware","settings","settingsSlice","transactions","transactionlice","modals","modalsSlice","PERSISTED_KEYS","configureStore","middleware","getDefaultMiddleware","thunk","serializableCheck","save","devTools","enhancers","reduxBatch","preloadedState","load","setLanguage","language","run","deps","useDeepCompareEffect","wsAPI","WsAPI","useInit","React","setState","systemState","tokenState","ammMapState","reload","detectEthereumProvider","request","method","Theme","LangType","SystemStatus","MODAL_TYPE","useModals","ShowDeposit","isShow","props","title","setShowDeposit","ShowTransfer","setShowTransfer","ShowWithdraw","setShowWithdraw","ShowResetAccount","setShowResetAccount","PromiseJob","fetchPromise","setFunc","field","prefix","mounted","reason","usePromiseJob","dependencies","useGetExchangeInfo","useGetTokens","useLv2WalletMap","balances","setBalances","keys","push","raw_data","total","locked","availableInWei","minus","useGetUserBalances","walletMap","setWalletMap","balance","useChargeFeeList","tokenSymbol","requestType","chargeFeeList","setChargeFeeList","getOffchainFeeAmt","index","useModalProps","tokensAll","setCoinMap","useCoinMap","walletMap_Lv1","useLv1WalletMap","walletMap_Lv2","deposit","amt","depositAddress","sendByMetaMask","gasLimit","contract","response2","withdraw","sellTokenId","getNextStorageId","storageId","request2","exchange","offchainId","maxFee","extraData","minGas","validUntil","VALID_UNTIL","submitOffchainWithdraw","transfer","payeeAddr","walletType","payeeAcc","payeeId","payerAddr","payerId","submitInternalTransfer","depositValue","setDepositValue","depositProps","tradeData","depositBtnStatus","TradeBtnStatus","AVAILABLE","onDepositClick","handlePanelEvent","switchType","res","setTokenSymbol","withdrawValue","setWithdrawValue","withdrawalFeeList","OffchainFeeReqType","OFFCHAIN_WITHDRAWAL","withdrawProps","withdrawBtnStatus","onWithdrawClick","withdrawType","WithdrawType","Fast","withdrawTypes","WithdrawTypes","chargeFeeToken","chargeFeeTokenList","handleOnAddressChange","handleAddressError","_value","message","transferValue","setTransferValue","transferTokenSymbol","setTransferTokenSymbol","transferFeeList","TRANSFER","transferProps","transferBtnStatus","onTransferClick","resetValue","setResetValue","resetProps","resetBtnStatus","onResetClick","price","ammProps","ammDepositData","slippage","ammWithdrawData","ammCalcData","myCoinA","myCoinB","AtoB","coinInfoMap","slippageTolerance","handleDepositEvent","type","handleWithDrawEvent","onAmmWithdrawClick","onAmmDepositClick","swapProps","tradeCalcData","coinSell","coinBuy","BtoS","StoB","sellCoinInfoMap","buyCoinInfoMap","priceImpact","minimumReceived","onSwapClick","handleSwapPanelEvent","deepClone","result","constructor","hasOwnProperty","ModalAccountInfo","withTranslation","onClose","rest","Modal","aria-labelledby","aria-describedby","style","boxShadow","paddingTop","paddingBottom","minWidth","Header","useLocation","useSettings","setTheme","themeMode","useOpenModals","isShowAccountInfo","isShowConnect","setShowConnect","setShowAccountInfo","forceUpdate","useReducer","bool","gatewayList","DefaultGatewayList","handleSelect","accountInfoProps","setAccountInfoProps","onNotification","onWalletBtnConnect","onThemeBtnClick","dark","light","onLangBtnClick","lang","headerToolBarData","ButtonComponentsMap","handleClick","Language","handleChange","UnlockBtn","className","startIcon","fontSize","LockBtn","updateHeaderMenuWhenHasAccountInfo","headerMenuData","HeadMenuTabKey","Layer2","HeaderMenuTabStatus","default","addressShort","level","etherscanLink","mainBtn","connectBy","label","WalletStatus","hidden","noAccount","accountPending","useHeader","onSwitch","openQRCode","setOpenQRCode","copyToastOpen","setCopyToastOpen","closeCopyToast","Snackbar","autoHideDuration","Alert","severity","withDrawProps","selected","pathname","headerRoot","Toolbar","onCopy","text","execCommand","textarea","createElement","appendChild","select","removeChild","clipboardData","setData","copyToClipBoard","onViewQRCode","onDisconnect","RowStyled","Grid","unit","TableWrapStyled","background","border","defaultFrame","c_key","d_R","TablePaddingX","pLeft","pRight","QuotePage","tickList","setTickList","big4","setBig4","refresh","getAllTickers","ticks","quote_token_volume","change","high","low","rowData","sort","b","isNaN","slice","useQuote","formattedRawData","o","pair","first","last","lastPrice","isFinite","volumn","buyData","sellData","LRC","FloatTag","increase","container","xs","none","decrease","paddingY","onVisibleRowsChange","rawData","toggleData","ChartType","Trend","Depth","fnType","BasicInfoPanel","coinAInfo","coinBInfo","tgItemJSXs","tlabel","JSX","getExistedMarket","chartType","setChartType","ChartUnit","D1","chartUnit","originData","setOriginData","_e","tgItemJSXsPriceChart","pre","tGItemData","TradingInterval","min15","limit","getCandlestick","candlesticks","timeStamp","timestamp","quoteVol","getDepth","depth","bidsPrices","bids_prices","bidsAmtTotals","bids_amtTotals","asksPrices","asks_prices","asksAmtTotals","asks_amtTotals","useBasicInfo","upColor","exclusive","minHeight","maxHeight","width","riseColor","handleMove","size","StylePaper","borderColor","applyProps","id","StyledTabsWrapper","StyledFormControlLabel","FormControlLabel","TradePanel","tradeArray","myTradeArray","isAllTrade","setIsAllTrade","setValue","control","Checkbox","checked","checkedIcon","onChange","flag","Tabs","aria-label","Tab","OrderHandling","accountStaticCallBack","fn","args","UNKNOWN","DEFAULT","bntLabel","btnClickArray","updateWallet","pending","countBig","detail","coinPairInit","coinKey","_tradeCalcData","match","findIndex","ele","BIG10","pairDetailBlock","ammKey","reject","getAmmPoolSnapshot","poolAddress","getMixTicker","ammpoolsbalance","NO_SDK","pairDetailDone","stob","tickerData","baseToken","quoteToken","poolBaseTokenVol","quoteBaseTokenVol","baseVol","pow","makeTickView","tick","getUserTrades","marketKey","userTrades","makeMarketArray","currency","Side","Sell","TradeTypes","Buy","times","tradeTime","getUserAmmTransaction","getUserAmmPoolTxs","userAmmPoolTxs","makeMyAmmMarketArray","marketTransaction","txType","TxTypes","JOIN","AmmTradeType","add","remove","totalDollar","totalYuan","amountA","poolTokens","amountB","updatedAt","FixedStyle","SwapPage","useRouteMatch","walletLayer2State","setTradeData","setTradeCalcData","setTradeArray","setMyTradeArray","setTradeFloat","setPair","swapBtnI18nKey","setSwapBtnI18nKey","params","resetSwap","_myTradeArray","swapData","SwapType","SEll_CLICK","BUY_CLICK","SELL_SELECTED","BUY_SELECTED","EXCHANGE_CLICK","calculateTradeData","_tradeData","td","_tradeFloat","_tradeArray","apiList","getMarketTrades","_td","TRADE_LITE_SET_PAIR_ERROR","options","swapBtnClickArray","useSwapPage","marginRight","alignContent","stateArr","useWebsocket","verify","needApiKey","ws","useRef","wsData","setMessage","readyState","setReadyState","creatWebSocket","getWsKey","wsApiKey","basePath","WebSocket","onopen","op","unsubscribeAll","flat_txt","sendMessage","subTopics","onclose","onerror","onmessage","closeWebSocket","msg","send","reconnect","useAmmpoolWs","getTickerArg","getAmmpoolArg","socketData","setSocketData","isLocalPage","setIsLocalPage","visibilityState","parse","useWs","DebugPage","getMarkets","useGetMarkets","gas","setGas","useGetGas","useGetTxs","txs","setTxs","getUserTranferList","tmpTx","userTransfers","senderAddress","receiverAddress","feeTokenSymbol","feeAmount","memo","txnHash","tradeType","TransactionTradeTypes","allTypes","TxPanel","pageSize","setPageSize","offsetHeight","floor","txList","ref","pagination","StyledChartWrapper","StyledBtnGroupWrapper","DoughnutData","testTrendData","random","AssetPanel","chartPeriod","setChartPeriod","d","AssetTitleProps","assetInfo","totalAsset","priceTag","PriceTag","Dollar","onShowDeposit","onShowTransfer","onShowWithdraw","Paper","OrderPanel","StyledPaper","StyledSwitch","Switch","textPrimary","success","backgroundColor","opacity","BtnCurrency","Currency","dollar","_handleChange","target","IconComponent","DropDownIcon","labelId","autoWidth","yen","StyledDivider","Divider","SettingPanel","focus","useTheme","setUpColor","setCurrency","direction","flexWrap","paddingLeft","marginBottom","paddingX","alignSelf","Button","passDay","changeLanguage","textTransform","UpColor","green","up","down","red","subMenu","subMenuLayer2","BoxStyle","SubMenuList","withRef","BasicSubMenuList","Layer2Page","accStatus","useAmmMapUI","setRawData","page","setPage","ammMapStatus","ammMapStatusUnset","tickerStatus","tickerStatusUnset","updateTickersUI","_page","i","_ammMap","tickerMapKey","NO_TOKEN_MAP","updateRawData","PoolsPanel","handlePageChange","ammPairInit","_ammCalcData","ammType","AmmPanelType","Deposit","coinACount","coinBCount","AmmPanelView","snapShotData","setAmmCalcData","setAmmDepositData","setAmmWithdrawData","ammDepositBtnI18nKey","setAmmDepositBtnI18nKey","ammWithdrawBtnI18nKey","setAmmWithdrawBtnI18nKey","initAmmData","onAmmWithdrawClickArray","onAmmDepositClickArray","useAmmPanel","isLoading","tabSelected","ammDepositBtnStatus","LOADING","ammWithdrawBtnStatus","getAmmPoolUserRewards","ammUserRewardMap","makeAmmDetailExtendsActivityMap","ammDetail","ammActivity","BoxStyled","CoinPairPanel","ammMarketArray","myAmmMarketArray","setMyAmmMarketArray","setAmmUserRewardMap","setSnapShotData","balanceA","balanceB","balanceYuan","balanceDollar","myAmm","setMyAmm","activity","coinPairInfo","setCoinPairInfo","_coinPairInfo","_walletMap","_snapShotData","_myAmm","makeMyAmm","ammUserReward","ratio","BigNumber","lp","feeRewards","currentRewards","useCoinPair","tabIndex","setTabIndex","_handlePageChange","Breadcrumbs","spacing","wrap","md","paddingRight","getThousandFormattedNumbers","Yuan","Hidden","mdDown","noWrap","textOverflow","moment","format","AmmMiningView","ammActivities","ammActivityStatus","ammActivityStatusUnset","_ammActivityMap","mapArray","useAmmMiningUI","sm","lg","USTD","ammRecordArray","toDate","swap","StyleWrapper","LiquidityOverview","totalFeeDollar","totalFeeYuan","totalMiningDollar","totalMiningYuan","padding","margin","handleDeposit","row","handleWithdraw","subMenuLiquidity","LiquidityPage","matchPair","next","RouterView","exact","path"],"mappings":"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","file":"static/js/main~a97bfcba.73beb4a2.chunk.js","sourcesContent":["import { ConnectorNames } from 'loopring-sdk'\n\nimport {\n    injected,\n    network,\n    walletconnect,\n    walletlink,\n    ledger,\n    trezor,\n    authereum,\n} from 'networks/web3_connectors'\n\nexport const connectorsByName: { [connectorName in ConnectorNames]: any } = {\n    [ConnectorNames.Unknown]: undefined,\n    [ConnectorNames.Injected]: injected,\n    [ConnectorNames.Network]: network,\n    [ConnectorNames.WalletConnect]: walletconnect,\n    [ConnectorNames.WalletLink]: walletlink,\n    [ConnectorNames.Ledger]: ledger,\n    [ConnectorNames.Trezor]: trezor,\n    [ConnectorNames.Authereum]: authereum,\n}\n","import { useState, useCallback, useMemo, useRef, useEffect, } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\n\nimport { useCustomDCEffect } from 'hooks/common/useCustomDCEffect'\n\nimport { useGetTradingInfo } from 'stores/trading/hook'\nimport { useActiveWeb3React, } from 'hooks/web3/useWeb3'\n\nimport { Lv2Account, } from 'defs/account_defs'\n\nimport { AccountStatus, StatusChangeEvent } from 'state_machine/account_machine_spec'\n\nimport * as sign_tools from 'loopring-sdk'\n\nimport { connectorsByName } from 'defs/web3_defs'\n\nimport { ChainId, ConnectorNames, dumpError400, ExchangeAPI, UserAPI, } from 'loopring-sdk'\n\nimport { toHex, toBig, } from 'loopring-sdk'\n\nimport { RootState } from 'stores'\n\nimport {\n    reset, setAccountStatus, setConnectName,\n    setConnectNameTemp, setAccountInfo, setEddsaKey, setApikey, setAccAddr,\n} from 'stores/account/reducer'\n\nimport { AccountMachineSpec, } from 'state_machine/account_machine_spec'\n\nimport { buildMachine } from 'state_machine/machine_builder'\n\nimport voca from 'voca'\nimport { usePrevious } from 'react-use'\n\nimport Web3 from 'web3'\n\nimport { useExchangeAPI, useUserAPI } from 'hooks/exchange/useApi'\n\nimport { UserStorage } from 'storage'\n\nimport store from 'stores'\nimport { updateWalletLayer1, reset as resetLayer1 } from '../walletLayer1';\nimport { updateWalletLayer2,reset as resetLayer2 } from '../walletLayer2';\n\n\nexport function useWeb3Account() {\n\n    const {\n        connector,\n        library,\n        account,\n        chainId,\n        active,\n        error,\n    } = useActiveWeb3React()\n\n    const isConnected: boolean = active && !voca.isBlank(account as string)\n\n    return {\n        account,\n        connector,\n        library,\n        chainId,\n        active,\n        isConnected,\n        error,\n    }\n\n}\n\nexport function useAccount() {\n\n    const account: Lv2Account = useSelector((state: RootState) => state.account)\n\n    const isNoAccount = () => {\n        return account.status === AccountStatus.NOACCOUNT\n    }\n\n    const isActivated = () => {\n        return account.status === AccountStatus.ACTIVATED\n    }\n\n    return {\n        account,\n        isNoAccount,\n        isActivated,\n        apiKey: account.apiKey,\n        eddsaKey: account.eddsaKey,\n        accountId: account.accountId,\n    }\n}\n\nexport function useStateMachine() {\n    const dispatch = useDispatch()\n\n    const machine = buildMachine(AccountMachineSpec())\n\n    const sendEvent = useCallback((account: Lv2Account, event: StatusChangeEvent) => {\n        const nextState = machine(account.status, event)\n        if (nextState) {\n            dispatch(setAccountStatus(nextState))\n        }\n    }, [machine, dispatch])\n\n    return {\n        sendEvent,\n    }\n}\n\nexport function useConnect() {\n\n    const {\n        activate,\n    } = useActiveWeb3React()\n\n    const { sendEvent } = useStateMachine()\n\n    const dispatch = useDispatch()\n\n    const [activatingConnector, setActivatingConnector] = useState<any>()\n\n    const connect = useCallback((item_name: ConnectorNames, isSwitch: boolean = false) => {\n        const newConnector: any = connectorsByName[item_name]\n        setActivatingConnector(newConnector)\n        activate(newConnector)\n        dispatch(setConnectNameTemp(item_name))\n\n        if (isSwitch) {\n          //  console.log('try Connecting... isSwitch Reset')\n            sendEvent(store.getState().account, StatusChangeEvent.Reset)\n        }\n\n        sendEvent(store.getState().account, StatusChangeEvent.Connecting)\n\n        console.log('try Connecting...')\n    }, [activate, dispatch, sendEvent])\n\n    return {\n        connect,\n        activatingConnector,\n    }\n\n}\n\nexport function useDisconnect() {\n\n    const {\n        deactivate,\n    } = useActiveWeb3React()\n\n    const dispatch = useDispatch()\n\n    const disconnect = useCallback(() => {\n        deactivate()\n        dispatch(reset(undefined))\n        //TODO dispatch wallet info \n    }, [deactivate, dispatch])\n\n    return {\n        disconnect,\n    }\n\n}\n\nexport function useUnlock() {\n\n    const dispatch = useDispatch()\n\n    const exchangeApi: any = useExchangeAPI()\n\n    const userApi: any = useUserAPI()\n\n    const { tradingInfo } = useGetTradingInfo()\n\n    const { connector, } = useWeb3Account()\n\n    const { sendEvent } = useStateMachine()\n\n    const lock = useCallback(async (account: Lv2Account) => {\n        console.log('useCallback lock:', account.status)\n        sendEvent(account, StatusChangeEvent.Lock)\n    }, [sendEvent])\n\n    const unlock = useCallback(async (account: Lv2Account) => {\n\n        if (!userApi || !exchangeApi || !connector || !account.accountId || !tradingInfo.exchangeInfo?.exchangeAddress\n            || account.status !== AccountStatus.LOCKED) {\n            console.log('accountId:', account.accountId)\n            console.log('exchangeAddress:', tradingInfo.exchangeInfo)\n            console.log('enter !! account.status:', account.status)\n            return\n        }\n\n        console.log('useUnlock useCallback:', account.status)\n\n        if (account.status !== AccountStatus.LOCKED) {\n            throw Error('unexpected status:' + account.status)\n        }\n\n        let event = undefined\n        let sk = undefined\n        let apikey: any = undefined\n\n        try {\n            const provider = await connector.getProvider()\n            const web3 = new Web3(provider as any)\n            console.log('useUnlock eddsaKey:', account.eddsaKey)\n\n            if (!account.eddsaKey) {\n                const eddsakey = await sign_tools\n                    .generateKeyPair(\n                        web3,\n                        account.accAddr,\n                        tradingInfo.exchangeInfo?.exchangeAddress as string,\n                        account.nonce - 1,\n                        account.connectName,\n                    )\n                sk = toHex(toBig(eddsakey.keyPair.secretKey))\n\n            } else {\n                sk = account.eddsaKey\n            }\n\n            apikey = await userApi.getUserApiKey({\n                accountId: account.accountId\n            }, sk)\n\n            console.log('useUnlock apikey:', apikey)\n\n            event = StatusChangeEvent.Unlock\n\n        } catch (reason) {\n            event = StatusChangeEvent.Reset\n        }\n\n        if (sk) {\n            dispatch(setEddsaKey(sk))\n        }\n\n        if (apikey?.apiKey) {\n            dispatch(setApikey(apikey.apiKey))\n        }\n\n        console.log('next event:', event)\n        if (event) {\n            sendEvent(account, event)\n        }\n\n    }\n        , [dispatch, sendEvent, exchangeApi, userApi, connector, tradingInfo.exchangeInfo])\n\n    return {\n        lock,\n        unlock,\n    }\n}\n\nasync function checkAccountAvailableAsync(exchangeApi: ExchangeAPI, userApi: UserAPI, account: Lv2Account, dispatch: any, sendEvent: any, connector: any, exchangeAddress: string) {\n\n    let accInfo = undefined\n    let event = undefined\n    let sk = undefined\n    let code = undefined\n    let apikey: any = undefined\n\n    try {\n        accInfo = (await exchangeApi.getAccount({\n            owner: account.accAddr\n        })).accInfo\n        if (accInfo.publicKey && accInfo.publicKey.x && accInfo.publicKey.y) {\n            if (account.accountId !== accInfo.accountId) {\n                const provider = await connector.getProvider()\n                const web3 = new Web3(provider as any)\n                try {\n                    code = await web3.eth.getCode(account.accAddr)\n                    // console.log('!!!!!! about to generateKeyPair!!!!!!!!!!!')\n                    try {\n                        const eddsakey = await sign_tools\n                            .generateKeyPair(\n                                web3,\n                                account.accAddr,\n                                exchangeAddress,\n                                accInfo.nonce - 1,\n                                account.connectName,\n                            )\n                        sk = toHex(toBig(eddsakey.keyPair.secretKey))\n                        const px = toHex(toBig(eddsakey.keyPair.publicKeyX))\n                        const py = toHex(toBig(eddsakey.keyPair.publicKeyY))\n\n                        try {\n                            apikey = await userApi.getUserApiKey({\n                                accountId: accInfo.accountId\n                            }, sk)\n                            event = (StatusChangeEvent.HasPubkey)\n                        } catch (reason) {\n                            dumpError400(reason)\n                            event = (StatusChangeEvent.ErrorResponse)\n                        }\n                    } catch (reason) {\n                        dumpError400(reason)\n                        event = (StatusChangeEvent.ErrorResponse)\n                    }\n\n                } catch (reason) {\n                    dumpError400(reason)\n                    event = (StatusChangeEvent.ErrorResponse)\n                }\n\n            } else {\n                console.log('already has accountId!')\n            }\n        } else {\n            console.log('2 has id but no pubkey currStatus:', account.status)\n            event = (StatusChangeEvent.HasNoPubkey)\n        }\n    } catch (reason) {\n        // 3 has none of above\n        console.log('2 has id but no pubkey currStatus:', account.status)\n        dumpError400(reason)\n        // check deposit tx (local and ethereum)\n        event = (StatusChangeEvent.ErrorResponse)\n    }\n\n    if (accInfo && accInfo.owner !== account.accAddr) {\n        dispatch(setAccountInfo(accInfo))\n    }\n\n    if (sk) {\n        dispatch(setEddsaKey(sk))\n    }\n\n    if (apikey) {\n        console.log('---------> apikey:', apikey)\n        dispatch(setApikey(apikey.apiKey))\n    }\n\n    if (event) {\n        sendEvent(event)\n    }\n\n}\n\nexport function useCheckAccStatus() {\n\n    const dispatch = useDispatch()\n\n    const { account } = useAccount()\n\n    const { sendEvent } = useStateMachine()\n\n    const exchangeApi: ExchangeAPI = useExchangeAPI()\n\n    const userApi: UserAPI = useUserAPI()\n\n    const { account: web3Account, active, isConnected, chainId, connector, } = useWeb3Account()\n\n    const lv1Acc = web3Account as string\n\n    const prevChainId = usePrevious(chainId)\n    const prevWeb3Account = usePrevious(web3Account)\n\n    // const { updateWalletLayer1,resetLayer1} = useWalletLayer1();\n    // const { updateWalletLayer2, resetLayer2} = useWalletLayer2()\n\n\n    // console.log('prevChainId:', prevChainId, ' chainId:', chainId)\n    // console.log('prevWeb3Account:', prevWeb3Account, ' web3Account:', web3Account)\n\n    // console.log(exchangeApi, userApi, account, 'prevChainId:', prevChainId, 'chainId:', chainId, 'web3Account:', web3Account)\n\n    const { tradingInfo } = useGetTradingInfo()\n\n    useCustomDCEffect(async () => {\n\n        const cleanUp = () => {\n            let handler = UserStorage.getHandler()\n            if (account.status !== AccountStatus.ACTIVATED && handler) {\n                clearInterval(handler)\n            }\n        }\n\n        async function checkStatus() {\n\n            if (!account || !lv1Acc || !exchangeApi || !userApi || !connector || !tradingInfo.exchangeInfo?.exchangeAddress) {\n                //console.log('checkStatus return!!!!!!')\n                return\n            }\n\n            if (((prevChainId && chainId && prevChainId !== chainId)\n                || (prevWeb3Account && web3Account && prevWeb3Account !== web3Account))\n                && account.status !== AccountStatus.UNCONNNECTED) {\n\n                console.log('checkStatus try to resetFunc')\n                dispatch(reset(undefined))\n                sendEvent(account, StatusChangeEvent.Reset)\n                return\n            }\n\n            cleanUp()\n\n            switch (account.status) {\n                case AccountStatus.UNCONNNECTED:\n                   // console.log('---> render UNCONNNECTED active:', active, ' isConnected:', isConnected)\n\n                    if (isConnected) {\n                        dispatch(setConnectNameTemp(ConnectorNames.Injected))\n                        sendEvent(account, StatusChangeEvent.Connecting)\n                    }\n\n                    //HIGH:\n                    dispatch(resetLayer1(undefined));\n                    dispatch(resetLayer2(undefined));\n                    break\n\n                case AccountStatus.CONNECTED:\n                    //check session or local storage\n\n                  //  console.log('---> render CONNECTED account:', account)\n\n                    try {\n\n                        const acc = (await exchangeApi.getAccount({ owner: lv1Acc })).accInfo\n\n                        // current acc is local acc info\n                        if (account.accAddr && account.eddsaKey && acc.owner === account.accAddr) {\n                            // console.log('cur Eddsakey:', account.eddsaKey)\n                        } else {\n                            // console.log('got a new address:', acc)\n                            // got a new address\n                            dispatch(setAccountInfo(acc))\n                            // dispatch(setEddsaKey(''))\n                            //HIGH:\n                            dispatch(updateWalletLayer1(undefined))\n                            //updateWalletLayer1();\n                           // dispatch(updateWalletLayer1(undefined));\n                        }\n\n                        if (account?.connectName !== account?.connectNameTemp) {\n                            dispatch(setConnectName(account.connectNameTemp))\n                        }\n\n                        sendEvent(account, StatusChangeEvent.HasPubkey)\n\n                    } catch (reason) {\n                        dumpError400(reason)\n\n                        if (lv1Acc) {\n                            dispatch(setAccAddr(lv1Acc))\n                        }\n\n                        if (reason.response && reason.response.data && reason.response.data.resultInfo\n                             && reason.response.data.resultInfo.code === 101002) {\n                            sendEvent(account, StatusChangeEvent.ErrorResponse)\n                        }\n                    }\n\n                    break\n\n                case AccountStatus.NOACCOUNT:\n                    break\n\n                case AccountStatus.DEPOSITING:\n                    // TODO sub contract event, check deposit.\n                    const depositFinished = true // TODO\n                    if (depositFinished) {\n                     //   console.log('depositFinished currStatus:', account.status)\n                        sendEvent(account, StatusChangeEvent.FinishDeposit)\n                    }\n                    break\n\n                case AccountStatus.DEPOSIT_TO_CONFIREM:\n                    // getAccount every 10s to check\n                    break\n\n                case AccountStatus.UNACTIVATED:\n                    const isSmartWallet = false // TODO\n                    if (isSmartWallet) {\n                        // TODO approve hash,\n                      //  console.log('approve hash, currStatus:', account.status)\n                        sendEvent(account, StatusChangeEvent.IsSmartWallet)\n                    } else {\n                       // console.log('approve hash no smartwallet, account.status:', account.status)\n                    }\n                    break\n\n                case AccountStatus.ARPROVING:\n                    // TODO sub contract event, check approving.\n                    const approved = false // TODO\n                    if (approved) {\n                      //  console.log('sub contract event, check approving. approved! status:', account.status)\n                        sendEvent(account, StatusChangeEvent.ApproveSubmit)\n                    }\n                    break\n\n                case AccountStatus.APPROV_TO_CONFIRM:\n                    const approveConfirmed = false // TODO\n                    if (approveConfirmed) {\n                     //   console.log('approveConfirmed status:', account.status)\n                        sendEvent(account, StatusChangeEvent.ApproveConfirmed)\n                    }\n                    break\n\n                case AccountStatus.LOCKED:\n                    //HIGH:\n                    dispatch(resetLayer1(undefined))\n                    break\n\n                case AccountStatus.ACTIVATED:\n                    UserStorage.checkTimeout(true)\n                    const handler = setInterval(() => {\n                        const isTimeOut = UserStorage.checkTimeout()\n                        if (account.status === AccountStatus.ACTIVATED && isTimeOut) {\n                            clearInterval(handler)\n                            sendEvent(account, StatusChangeEvent.Lock)\n                        }\n                    }, 1000)\n                    UserStorage.setHandler(handler);\n                    //HIGH:\n                    dispatch(updateWalletLayer2(undefined))\n                        //useWalletLayer2().updateWalletLayer2();\n                    //dispatch((undefined));\n                    break\n\n                default:\n                    break\n            }\n\n\n\n        }\n\n        checkStatus()\n\n        return () => {\n            cleanUp()\n        }\n\n    }, [    updateWalletLayer1, updateWalletLayer2, resetLayer1,resetLayer2,\n        //updateWalletLayer2, updateWalletLayer1,resetLayer1,resetLayer2,\n\n        exchangeApi, userApi, account, prevChainId, chainId, lv1Acc, dispatch, connector, tradingInfo.exchangeInfo?.exchangeAddress,])\n\n}\n\n","export const buildMachine = <S, E>(spec: any) => (currentState: S, event: E) => {\n    // We get all possible transitions for the current State\n    const stateTransitions = spec.states[currentState]\n\n    // No transitions? Error!\n    if (stateTransitions === undefined) {\n        throw new Error(`No transitions defined for ${currentState}`)\n    }\n\n    // We try to transition to the next state\n    const nextState = stateTransitions[event]\n\n    // No next state? Error!\n    if (nextState === undefined) {\n        throw new Error(\n            `Unknown transition for event ${event} in state ${currentState}`\n        )\n    }\n\n   // console.log('got nextState:', nextState)\n\n    // We return the new state\n    return nextState\n}\n","import { createSlice, PayloadAction, Slice } from '@reduxjs/toolkit'\n\nimport { AccountInfo, ConnectorNames, } from 'loopring-sdk'\n\nimport { Lv2Account, } from 'defs/account_defs'\nimport { AccountStatus } from 'state_machine/account_machine_spec'\nimport { UserStorage } from 'storage'\n\n\nconst initialState = () => {\n  const defaultAccId = process.env.REACT_APP_TEST_ACCOUND_ID ? process.env.REACT_APP_TEST_ACCOUND_ID : UserStorage.getAccountId()\n  const defaultApiKey = process.env.REACT_APP_TEST_API_KEY ? process.env.REACT_APP_TEST_API_KEY : UserStorage.getApikey()\n  const defaultOwner = process.env.REACT_APP_TEST_OWNER ? process.env.REACT_APP_TEST_OWNER : UserStorage.getAccount()\n  const defaultEddsaKey = process.env.REACT_APP_TEST_EDDSA_KEY ? process.env.REACT_APP_TEST_EDDSA_KEY : UserStorage.getEddsakey()\n\n  console.log('defaultApiKey:', JSON.stringify(defaultApiKey))\n  const defaultStatus = AccountStatus.UNCONNNECTED\n  return {\n    accAddr: defaultOwner,\n    status: defaultStatus,\n    accountId: defaultAccId,\n    publicKey: {},\n    nonce: 0,\n    isContractAddress: false,\n    apiKey: defaultApiKey,\n    eddsaKey: defaultEddsaKey,\n    connectName: ConnectorNames.Unknown,\n    connectNameTemp: ConnectorNames.Unknown,\n  } as Lv2Account\n}\n\nconst accountSlice:Slice = createSlice({\n  name: 'account',\n  initialState: initialState(),\n  reducers: {\n    reset(state) {\n      const initState = initialState()\n      console.log('!!! reset account!', initState)\n      Object.assign(state, initState)\n    },\n    setAccAddr(state, action: PayloadAction<string>) {\n      state.accAddr = action.payload\n      // UserStorage.setAccount(action.payload)\n    },\n    setAccountInfo(state, action: PayloadAction<AccountInfo>) {\n      state.accAddr = action.payload.owner\n      state.accountId = action.payload.accountId\n      state.nonce = action.payload.nonce\n      state.publicKey = action.payload.publicKey\n\n      // UserStorage.setAccount(state.accAddr)\n      // UserStorage.setAccountId(state.accountId)\n      \n    },\n    setApikey(state, action: PayloadAction<string>) {\n      state.apiKey = action.payload\n      // UserStorage.setApikey(action.payload)\n    },\n    setAccountStatus(state, action: PayloadAction<AccountStatus>) {\n      state.status = action.payload\n    },\n    setEddsaKey(state, action: PayloadAction<any>) {\n      state.eddsaKey = action.payload\n      // UserStorage.setEddsakey(action.payload)\n    },\n    setConnectName(state, action: PayloadAction<ConnectorNames>) {\n      state.connectName = action.payload\n    },\n    setConnectNameTemp(state, action: PayloadAction<ConnectorNames>) {\n      state.connectNameTemp = action.payload\n    },\n    setIsContractAddress(state, action: PayloadAction<boolean>) {\n      state.isContractAddress = action.payload\n    },\n  },\n})\n\nexport const { reset, setAccAddr, setApikey, setConnectName, setConnectNameTemp, setAccountInfo, setAccountStatus, setEddsaKey, setIsContractAddress, } = accountSlice.actions\nexport default accountSlice\n","import { useDispatch, useSelector } from 'react-redux'\nimport { AmmMapStates } from './interface';\nimport { ammMapSlice } from './reducer';\n\nexport const useAmmMap = <R extends {[key:string]:any},I extends {[key:string]:any}>(): AmmMapStates<R,I> & {\n    updateAmmMap:()=> void,\n    statusUnset:()=> void,\n} => {\n    const ammMap:AmmMapStates<R,I>= useSelector((state: any) => state.amm.ammMap)\n    const dispatch = useDispatch();\n    const updateAmmMap = () => {\n        dispatch(ammMapSlice.actions.getAmmMap(undefined))\n    }\n    const statusUnset = ()=>{\n        dispatch(ammMapSlice.actions.statusUnset(undefined))\n    }\n    return {\n        ...ammMap,\n        statusUnset,\n        updateAmmMap\n    }\n}\n","import { useDispatch, useSelector } from 'react-redux'\nimport { tokenMapSlice } from './reducer';\nimport { TokenMapStates } from './interface';\n\nexport function useTokenMap<R extends {[key:string]:any}>(): TokenMapStates<R> & {\n    updateTokenMap:()=>void,\n    statusUnset:()=>void,\n} {\n    const tokenMap:TokenMapStates<R> = useSelector((state: any) => state.tokenMap)\n    const dispatch = useDispatch();\n    const updateTokenMap = () => {\n        dispatch(tokenMapSlice.actions.getTokenMap(undefined))\n    }\n    const statusUnset = ()=>{\n        dispatch(tokenMapSlice.actions.statusUnset(undefined))\n    }\n    return {\n        ...tokenMap,\n        statusUnset,\n        updateTokenMap,\n    }\n\n}\n","import { useAmmpoolAPI, useExchangeAPI } from 'hooks/exchange/useApi'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { useCustomDCEffect } from 'hooks/common/useCustomDCEffect'\n\nimport store, { RootState } from 'stores'\n\nimport { \n    setMarkets, \n    setExchangeInfo, \n    setTokens, \n    setTickerMap, \n    setAmmPoolStats,\n    setAmmPoolConf, \n    setMarketTrades,\n    setAmmActivityRules,\n    setChainId, \n} from 'stores/trading/reducer'\n\nimport { dumpError400, ChainId, AmmPoolStat, FiatType, } from 'loopring-sdk'\nimport { useActiveWeb3React } from 'hooks/web3/useWeb3'\nimport { useEffect } from 'react'\n\nimport { ammpoolAPI, exchangeAPI } from \"stores/apis/api\"\n\nexport function getTradingInfo() {\n    const tradingInfo = store.getState().trading\n    return {\n        tradingInfo,\n        chainId: tradingInfo.chainId,\n    }\n}\n\nexport function getAccount() {\n    return  store.getState().account\n\n}\n\nexport function getChainId(){\n    const chainId = store.getState().system.chainId;\n    return chainId\n\n}\n\nexport function useGetTradingInfo() {\n    const tradingInfo = useSelector((state: RootState) => state.trading)\n    return {\n        tradingInfo,\n        chainId: tradingInfo.chainId,\n    }\n}\n\nexport function useUpdateChainId() {\n    const { chainId } = useActiveWeb3React()\n    const dispatch = useDispatch()\n    useEffect(() => {\n        dispatch(setChainId(chainId ?? ChainId.GORLI))\n    }, [chainId, dispatch])\n}\n\nexport function useUpdateExchangeMarkets() {\n    const dispatch = useDispatch()\n    const api = useExchangeAPI()\n\n    useCustomDCEffect(async() => {\n\n        if (!api) {\n            return\n        }\n\n        try {\n            const response = await api.getMixMarkets()\n            dispatch(setMarkets(response))\n        } catch (reason) {\n            dumpError400(reason)\n        }\n\n    }, [api])\n\n}\n\nexport function useUpdateExchangeInfo() {\n\n    const dispatch = useDispatch()\n    const api = useExchangeAPI()\n\n    useCustomDCEffect(async() => {\n\n        if (!api) {\n            return\n        }\n\n        try {\n            const response = await api.getExchangeInfo()\n            dispatch(setExchangeInfo(response.exchangeInfo))\n        } catch (reason) {\n            dumpError400(reason)\n        }\n\n    }, [api])\n\n}\n\nexport function useUpdateAmmPoolConf() {\n\n    const dispatch = useDispatch()\n    const api = useAmmpoolAPI()\n\n    useCustomDCEffect(async() => {\n\n        if (!api) {\n            return\n        }\n\n        try {\n            const ammPoolConf = await api.getAmmPoolConf()\n            dispatch(setAmmPoolConf(ammPoolConf))\n        } catch (reason) {\n            dumpError400(reason)\n        }\n\n    }, [api])\n\n}\n\nexport function useUpdateAmmPoolStats() {\n\n    const dispatch = useDispatch()\n    const api = useAmmpoolAPI()\n\n    useCustomDCEffect(async() => {\n\n        if (!api) {\n            return\n        }\n\n        try {\n            const ammPoolStats = await api.getAmmPoolStats()\n            dispatch(setAmmPoolStats(ammPoolStats))\n        } catch (reason) {\n            dumpError400(reason)\n        }\n\n    }, [api])\n\n}\n\nexport function useUpdateAmmActivityRules() {\n\n    const dispatch = useDispatch()\n    const api = useAmmpoolAPI()\n\n    useCustomDCEffect(async() => {\n\n        if (!api) {\n            return\n        }\n\n        try {\n            const ammActivityRules = await api.getAmmPoolActivityRules()\n            dispatch(setAmmActivityRules(ammActivityRules.activityRules))\n        } catch (reason) {\n            dumpError400(reason)\n        }\n\n    }, [api])\n\n}\n\nexport function useUpdateTokens() {\n\n    const dispatch = useDispatch()\n    const api = useExchangeAPI()\n\n    useCustomDCEffect(async() => {\n\n        if (!api) {\n            return\n        }\n\n        try {\n            const tokens = await api.getTokens()\n            dispatch(setTokens(tokens))\n        } catch (reason) {\n            dumpError400(reason)\n        }\n\n    }, [api])\n\n}\n\nexport function useUpdateTickerMap(market: string) {\n\n    const dispatch = useDispatch()\n    const api = useExchangeAPI()\n\n    useCustomDCEffect(async() => {\n\n        if (!api) {\n            return\n        }\n\n        try {\n            const tickMap = await api.getTicker({\n                market\n              })\n            dispatch(setTickerMap(tickMap))\n        } catch (reason) {\n            dumpError400(reason)\n        }\n\n    }, [api])\n\n}\n\nexport function useMarketTrades(market: string) {\n  \n    const dispatch = useDispatch()\n    const api = useExchangeAPI()\n\n    useCustomDCEffect(async() => {\n\n        if (!api) {\n            return\n        }\n\n        try {\n            const marketTrades = await api.getMarketTrades({\n                market\n              })\n            dispatch(setMarketTrades(marketTrades))\n        } catch (reason) {\n            dumpError400(reason)\n        }\n\n    }, [api, dispatch])\n\n}\n\nexport function useUpdateFiatPrice() {\n  \n    const dispatch = useDispatch()\n    const api = useExchangeAPI()\n\n    useCustomDCEffect(async() => {\n\n        if (!api) {\n            return\n        }\n\n        try {\n            const usdFiatPrices = await api.getFiatPrice({\n                legal: FiatType.USD\n            })\n            const cnyFiatPrices = await api.getFiatPrice({\n                legal: FiatType.CNY\n            })\n            dispatch(setMarketTrades({}))\n        } catch (reason) {\n            dumpError400(reason)\n        }\n\n    }, [api, dispatch])\n\n}\n\n// export const asyncGetTradingInfo = async() => {\n//\n//     const { tradingInfo } = getTradingInfo()\n//     console.log('--- tradingInfo', tradingInfo)\n//\n//     let tokens: any = undefined\n//\n//     if (tradingInfo.tokens?.tokenIdMap) {\n//         tokens = tradingInfo.tokens\n//     } else {\n//         tokens = (await exchangeAPI().getTokens())\n//     }\n//\n//     let ammpools: any = undefined\n//\n//     if (tradingInfo.ammPoolConf?.ammpools) {\n//         ammpools = tradingInfo.ammPoolConf.ammpools\n//     } else {\n//         ammpools = (await ammpoolAPI().getAmmPoolConf()).ammpools\n//     }\n//\n//     let ammPoolStats: { [key: string] : AmmPoolStat } = {}\n//\n//     if (tradingInfo.ammPoolStats.ammPoolStats) {\n//         ammPoolStats = tradingInfo.ammPoolStats.ammPoolStats\n//     } else {\n//         ammPoolStats = (await ammpoolAPI().getAmmPoolStats()).ammPoolStats\n//     }\n//\n//     return {\n//         tokens,\n//         ammpools,\n//         ammPoolStats,\n//     }\n// }","import * as fm from 'loopring-sdk'\nimport BigNumber from 'bignumber.js'\n\nimport { CoinInfo, CoinMap, } from '@loopring-web/component-lib/static-resource'\n\nimport { utils } from 'ethers'\nimport { getBaseQuote, getTokenInfoById, LoopringMap, TokenInfo } from 'loopring-sdk'\nimport { DepthData } from 'loopring-sdk'\n\nconst MULTI_FACTOR = 10000\n\nexport enum SwapStatus {\n    Normal = 'Normal',\n    EmptyInput = 'EmptyInput',\n    ExceedUserBalance = 'ExceedUserBalance',\n    ExceedPoolBalance = 'ExceedPoolBalance',\n    Loading = 'Loading',\n}\n\nexport function getIcon(symbol: string, tokens: any) {\n    const token: any = tokens[symbol]\n    return getIconByTokenInfo(token)\n}\n\nexport function getIconByTokenInfo(token: TokenInfo) {\n    if (token) {\n        const addr = utils.getAddress(token.address)\n        const path = `https://exchange.loopring.io/assets/images/ethereum/assets/${addr}/logo.png`\n        return path\n    }\n    return ''\n}\n\nexport function makeCoinInfo(token: TokenInfo) {\n    if (token) {\n        const info: CoinInfo<any> = {\n            icon: getIconByTokenInfo(token),\n            name: token.symbol,\n            simpleName: token.symbol,\n            description: token.name,\n            company: token.name,\n        }\n        return info\n    }\n    return undefined\n}\n\nexport const getLeft = (pairs: any, tokens: any) => {\n    if (pairs) {\n\n        const left = Reflect.ownKeys(pairs)\n\n        let coinMapLeft: CoinMap<any, CoinInfo<any>> = {}\n\n        left.forEach((key: any) => {\n            coinMapLeft[key] = {\n                icon: getIcon(key, tokens),\n                name: key,\n                simpleName: key,\n                description: '',\n                company: ''\n            }\n        })\n\n        return {\n            left,\n            coinMapLeft,\n        }\n    }\n\n    return undefined\n}\n\nexport const getRight = (pairs: any, left: any, tokens: any) => {\n    if (pairs) {\n        const right = pairs[left].tokenList\n\n        let coinMapRight: CoinMap<any, CoinInfo<any>> = {}\n\n        if (right) {\n            right.forEach((key: any) => {\n                coinMapRight[key] = {\n                    icon: getIcon(key, tokens),\n                    name: key,\n                    simpleName: key,\n                    description: '',\n                    company: ''\n                }\n            })\n\n            return {\n                right,\n                coinMapRight,\n            }\n        }\n    }\n    return undefined\n}\n\nexport const getToken = (tokens: any, token: any) => {\n    if (!tokens) {\n        throw Error('no tokens list!')\n    }\n    return tokens[token]\n}\n\nexport const getTokenInfoByToken = (ammBalance: any, tokens: any, token: any) => {\n\n    const tokenInfo = getToken(tokens, token)\n\n    const tokenVol = ammBalance.pooledMap[tokenInfo.tokenId].volume\n    const reserve = fm.toBig(tokenVol)\n\n    return {\n        tokenInfo, tokenVol, reserve,\n    }\n}\n\nconst getKey = (base: any, quote: any) => {\n\n    if (!base || !quote) {\n        return {\n            key: undefined,\n            key_bak: undefined,\n            isOK: false,\n        }\n    }\n\n    const isLRCETH = false\n    const key = isLRCETH ? 'LRCETH-Pool' : ('AMM-' + base + '-' + quote)\n    const key_bak = isLRCETH ? 'LRCETH-Pool' : ('AMM-' + quote + '-' + base)\n    return {\n        key,\n        key_bak,\n        isOK: true,\n    }\n}\n\nconst getInfoByKey = (raw_data: any, keyPair: any) => {\n    const {\n        key,\n        key_bak,\n    } = keyPair\n\n    if (raw_data[key]) return raw_data[key]\n    return raw_data[key_bak]\n}\n\nexport const getBalances = (ammpools: any, ammPoolsBalances: any, base: any, quote: any, tokens: any) => {\n\n    const { ammInfo,\n        ammBalance,\n    } = getAmmInfo(ammpools, ammPoolsBalances, base, quote)\n\n    const baseToken = getToken(tokens, base)\n    const quoteToken = getToken(tokens, quote)\n\n    const baseBalance = ammBalance.pooledMap[baseToken.tokenId]\n    const quoteBalance = ammBalance.pooledMap[quoteToken.tokenId]\n\n    return {\n        ammInfo,\n        ammBalance,\n        baseBalance,\n        quoteBalance,\n    }\n\n}\n\nexport const getAmmInfoOnly = (ammpools: any, base: any, quote: any) => {\n\n    const keyPair = getKey(base, quote)\n\n    const ammInfo = getInfoByKey(ammpools, keyPair)\n\n    if (!ammInfo) {\n        throw Error('no ammInfo!')\n    }\n\n    return {\n        ammInfo,\n    }\n\n}\n\nexport const getAmmInfo = (ammpools: any, ammPoolsBalances: any, base: any, quote: any) => {\n\n    const keyPair = getKey(base, quote)\n\n    const ammInfo = getInfoByKey(ammpools, keyPair)\n    const ammBalance = getInfoByKey(ammPoolsBalances, keyPair)\n\n    if (!ammInfo || !ammBalance) {\n        throw Error('no ammInfo! no ammBalance!')\n    }\n\n    const feeBips = parseInt(ammInfo.feeBips)\n\n    return {\n        ammInfo,\n        ammBalance,\n        feeBips,\n    }\n\n}\n\nconst getAmt = (rawAmt: any, tokenInfo: any) => {\n    if (rawAmt === undefined) {\n        rawAmt = 0\n    }\n\n    return fm.toBig(rawAmt).times('1e' + tokenInfo.decimals)\n}\n\nexport const applySlippageTolerance = (\n    tokens: any,\n    token: any,\n    value: any,\n    slippageTolerance: number = 0.01\n) => {\n    const tokenInfo = getToken(tokens, token)\n    const f = 1e7\n    const feeFactor = fm.toBig(f * (1 - slippageTolerance))\n    const amount = fm.toBig(value).times('1e' + tokenInfo.decimals)\n    const outInWei = amount.times(feeFactor).dividedBy(f)\n    const out = fromWEI(tokens, token, outInWei)\n\n    return {\n        outInWei,\n        out,\n    }\n}\n\nexport const applyOrderFee = (tokens: any, token: any, value: any, feeBip: any) => {\n    const tokenInfo = getToken(tokens, token)\n    const feeFactor = fm.toBig(MULTI_FACTOR - feeBip)\n    const amount = fm.toBig(value).times('1e' + tokenInfo.decimals)\n    const appliedAmount = amount.times(feeFactor).dividedBy(MULTI_FACTOR)\n    return appliedAmount\n}\n\nexport function fromWEI(tokens: any, symbol: any, valueInWEI: any, precision?: any, ceil?: any) {\n    try {\n        const tokenInfo = getToken(tokens, symbol)\n        const precisionToFixed = precision ? precision : tokenInfo.precision\n        const value = fm.toBig(valueInWEI).div('1e' + tokenInfo.decimals)\n        return fm.toFixed(value, precisionToFixed, ceil)\n    } catch (error) {\n    }\n    return '0'\n}\n\n\nexport function toWEI(tokens: any, symbol: any, value: any, rm: any = 3) {\n    const tokenInfo = getToken(tokens, symbol)\n    if (typeof tokenInfo === 'undefined') {\n        return '0'\n    }\n\n    return fm.toBig(value)\n        .times('1e' + tokenInfo.decimals)\n        .toFixed(0, rm)\n}\n\nexport const getAmountOut = (amt: any, ammpools: any, ammPoolsBalances: any, tokens: any,\n    base: any, quote: any, takerRate: number, currentPrice: number) => {\n\n    if (amt === undefined) {\n        amt = 0\n    }\n\n    const { ammBalance, feeBips, } = getAmmInfo(ammpools, ammPoolsBalances, base, quote)\n\n    const { tokenInfo: baseTokenInfo, reserve: reserveIn } = getTokenInfoByToken(ammBalance, tokens, base)\n    const { tokenInfo: quoteTokenInfo, reserve: reserveOut } = getTokenInfoByToken(ammBalance, tokens, quote)\n\n    const amountIn = getAmt(amt, baseTokenInfo)\n    const feeBipsFactor = fm.toBig(MULTI_FACTOR - feeBips)\n    const amountInWithFee = amountIn.times(feeBipsFactor)\n    const numerator = amountInWithFee.times(reserveOut)\n    const denominator = reserveIn.times(MULTI_FACTOR).plus(amountInWithFee)\n    const amountOutInWei: any = numerator.dividedBy(denominator)\n\n    let quoteAmt: any = fromWEI(tokens, quote, amountOutInWei)\n\n    const _amount1ApplyOrderFeeInWei = applyOrderFee(tokens, quote, quoteAmt, takerRate + feeBips)\n\n    let _amount1ApplyOrderFee = Number(fromWEI(tokens, quote, _amount1ApplyOrderFeeInWei))\n\n    let priceImpact = 0\n    if (_amount1ApplyOrderFee < 0) {\n        _amount1ApplyOrderFee = 0\n        quoteAmt = null\n    } else {\n        const newPrice = Number(quoteAmt) / Number(amt)\n        priceImpact = (newPrice - currentPrice) / currentPrice\n    }\n\n    return {\n        quoteAmt,\n        _amount1ApplyOrderFeeInWei,\n        _amount1ApplyOrderFee,\n        priceImpact,\n    }\n\n}\n\nexport const getAmountOut_Reverse = (amt: any, ammpools: any, ammPoolsBalances: any, tokens: any,\n    base: any, quote: any, takerRate: number, currentPrice: number) => {\n\n    if (amt === undefined) {\n        amt = 0\n    }\n    \n    const { ammBalance, feeBips, } = getAmmInfo(ammpools, ammPoolsBalances, base, quote)\n\n    const { tokenInfo: baseTokenInfo, reserve: reserveIn } = getTokenInfoByToken(ammBalance, tokens, base)\n    const { tokenInfo: quoteTokenInfo, reserve: reserveOut } = getTokenInfoByToken(ammBalance, tokens, quote)\n\n    const amountOut = getAmt(amt, quoteTokenInfo)\n\n    if (amountOut.gt(reserveOut)) {\n        return {\n            baseAmt: 0,\n            _amount1ApplyOrderFeeInWei: 0,\n            _amount1ApplyOrderFee: 0,\n            priceImpact: 0,\n            hasError: false,\n        }\n    }\n\n    const numerator = amountOut.times(reserveIn).times(MULTI_FACTOR)\n    const feeBipsFactor = fm.toBig(MULTI_FACTOR - feeBips)\n\n    // If amountOut is larger than reserveOut?\n    // It's handled before getAmountOut_reserve\n    const reserveOutSubAmountOut = reserveOut.minus(amountOut)\n\n    const denominator = feeBipsFactor.times(reserveOutSubAmountOut)\n    const amountInInWei = numerator.dividedBy(denominator)\n\n    let baseAmt: any = fromWEI(tokens, quote, amountInInWei)\n\n    const _amount1ApplyOrderFeeInWei = applyOrderFee(tokens, quote, amt, takerRate + feeBips)\n\n    let _amount1ApplyOrderFee = Number(fromWEI(tokens, quote, _amount1ApplyOrderFeeInWei))\n\n    let priceImpact = 0\n    if (_amount1ApplyOrderFee < 0) {\n        _amount1ApplyOrderFee = 0\n        baseAmt = null\n    } else {\n        const newPrice = Number(amt) / Number(baseAmt)\n        priceImpact = (newPrice - currentPrice) / currentPrice\n    }\n\n    return {\n        baseAmt,\n        _amount1ApplyOrderFeeInWei,\n        _amount1ApplyOrderFee,\n        priceImpact,\n        hasError: false,\n    }\n\n}\n\nexport function isEmpty(input: any) {\n    if (!input || input.trim() === '') {\n        return true\n    }\n\n    return false\n}\n\nexport function getOutputAmount(base: string, quote: string, market: string, input: string, isAtoB: boolean, feeBips: string, \n    tokenMap: LoopringMap<TokenInfo>, depth: DepthData) {\n\n    if (isEmpty(input) || isEmpty(feeBips)) {\n        return undefined\n    }\n\n    const { base: baseRaw, quote: quoteRaw } = getBaseQuote(market)\n\n    input = input.trim()\n\n    let exceedDepth = false\n\n    if (isAtoB) {\n\n        // bids_amtTotal -> bidsSizeShown\n        // asks_volTotal -> asksQuoteSizeShown\n\n        if (isEmpty(depth.bids_amtTotal) || isEmpty(depth.asks_volTotal)) {\n            exceedDepth = true\n        } else {\n            const amountInWei = toWEI(tokenMap, base, input)\n\n            if (base === baseRaw) {\n                exceedDepth = fm.toBig(amountInWei).lt(fm.toBig(depth.bids_amtTotal))\n            } else {\n                exceedDepth = fm.toBig(amountInWei).lt(fm.toBig(depth.asks_volTotal))\n            }\n\n        }\n\n    } else {\n\n        // asks_amtTotal -> asksSizeShown\n        // bids_volTotal -> bidsQuoteSizeShown\n\n        if (isEmpty(depth.bids_volTotal) || isEmpty(depth.asks_amtTotal)) {\n            exceedDepth = true\n        } else {\n            const amountInWei = toWEI(tokenMap, quote, input)\n\n            if (base === baseRaw) {\n                exceedDepth = fm.toBig(amountInWei).lt(fm.toBig(depth.bids_volTotal))\n            } else {\n                exceedDepth = fm.toBig(amountInWei).lt(fm.toBig(depth.asks_amtTotal))\n            }\n\n        }\n\n    }\n\n}\n","import { useMemo, useState, useEffect } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\n\nimport { Web3Provider } from '@ethersproject/providers'\nimport { Web3ReactContextInterface } from '@web3-react/core/dist/types'\n\nimport { useWeb3React } from '@web3-react/core'\n\nimport { injected } from 'networks/web3_connectors'\n\nimport { ChainId, NetworkContextName } from 'loopring-sdk'\n\n/*\nimport EXCHANGE_ABI from 'config/abis/exchange_3_6.json'\nimport ERC20_ABI from 'config/abis/erc20.json'\nimport DEPOSIT_ABI from 'config/abis/deposit.json'\n\nimport Web3 from 'web3'\n*/\n\nexport function useActiveWeb3React(): Web3ReactContextInterface<Web3Provider> & { chainId?: ChainId } {\n  const context = useWeb3React<Web3Provider>()\n  const contextNetwork = useWeb3React<Web3Provider>(NetworkContextName)\n  return context.active ? context : contextNetwork\n}\n\nexport function useEtherscan() {\n  const { chainId } = useActiveWeb3React()\n\n  const [etherscanUrl, setEtherscanUrl] = useState<string>('')\n\n  useEffect(() => {\n    switch(chainId) {\n      case ChainId.MAINNET:\n        setEtherscanUrl('https://etherscan.io/address/')\n        break\n      default:\n        setEtherscanUrl('https://goerli.etherscan.io/address/')\n    }\n  }, [chainId])\n\n  return {\n    etherscanUrl,\n  }\n}\n\nexport function useEagerConnect() {\n\n  const { activate, active } = useWeb3React()\n\n  const [tried, setTried] = useState(false)\n\n  useEffect(() => {\n    injected.isAuthorized().then((isAuthorized: boolean) => {\n      if (isAuthorized) {\n        console.log('useEagerConnect isAuthorized')\n        activate(injected, undefined, true).catch(() => {\n          setTried(true)\n        })\n      } else {\n        console.log('useEagerConnect NOT isAuthorized')\n        setTried(true)\n      }\n    })\n  }, []) // intentionally only running on mount (make sure it's only mounted once :))\n\n  // if the connection worked, wait until we get confirmation of that to flip the flag\n  useEffect(() => {\n    if (!tried && active) {\n      setTried(true)\n    }\n  }, [tried, active])\n\n  return tried\n}\n\nexport function useInactiveListener(onReConnectInjected: any = undefined, suppress: boolean = false) {\n  const { active, error, activate, chainId, } = useWeb3React()\n  const dispatch = useDispatch()\n\n  useEffect((): any => {\n    const { ethereum } = window as any\n\n    const reConnectInjected = () => {\n      console.log('--------------------------> reConnectInjected')\n      activate(injected)\n      if (onReConnectInjected) {\n        onReConnectInjected()\n      }\n    }\n\n    if (ethereum && ethereum.on && !active && !error) {\n\n      const handleChainChanged = (chainId: string | number) => {\n        console.log('Handling \\'chainChanged\\' event with payload', chainId)\n        reConnectInjected()\n      }\n      const handleAccountsChanged = (accounts: string[]) => {\n        console.log('---------------------------------------------')\n        console.log('Handling \\'accountsChanged\\' event with payload', accounts)\n        console.log('before reset accounts.length=', accounts.length)\n        if (accounts.length > 0) {\n          console.log('before reset!!!!!!!!!!!!!!!!1')\n          reConnectInjected()\n        }\n      }\n\n      ethereum.on('chainChanged', handleChainChanged)\n      ethereum.on('accountsChanged', handleAccountsChanged)\n\n      return () => {\n        if (ethereum.removeListener) {\n          ethereum.removeListener('chainChanged', handleChainChanged)\n          ethereum.removeListener('accountsChanged', handleAccountsChanged)\n        }\n      }\n    }\n  }, [active, error, chainId, activate, dispatch])\n}\n\nexport function useBlockNumber() {\n  const { library, chainId } = useActiveWeb3React()\n\n  const [blockNumber, setBlockNumber] = useState<number>()\n\n  useEffect((): any => {\n      if (!!library) {\n          let stale = false\n\n          library\n              .getBlockNumber()\n              .then((blockNumber: number) => {\n                  if (!stale) {\n                      setBlockNumber(blockNumber)\n                  }\n              })\n              .catch(() => {\n                  if (!stale) {\n                      setBlockNumber(-1)\n                  }\n              })\n\n          const updateBlockNumber = (blockNumber: number) => {\n              setBlockNumber(blockNumber)\n          }\n          library.on('block', updateBlockNumber)\n\n          return () => {\n              stale = true\n              library.removeListener('block', updateBlockNumber)\n              setBlockNumber(undefined)\n          }\n      }\n  }, [library, chainId])\n\n  return {\n      blockNumber,\n  }\n}\n\nexport function useBalance() {\n  const { account, library, chainId } = useActiveWeb3React()\n\n  const [balance, setBalance] = useState<number>()\n  useEffect((): any => {\n      if (!!account && !!library) {\n          let stale = false\n\n          library\n              .getBalance(account)\n              .then((balance: any) => {\n                  if (!stale) {\n                      setBalance(balance)\n                  }\n              })\n              .catch(() => {\n                  if (!stale) {\n                      setBalance(0)\n                  }\n              })\n\n          return () => {\n              stale = true\n              setBalance(0)\n          }\n      }\n  }, [account, library, chainId]) // ensures refresh if referential identity of library doesn't change across chainIds\n\n  return {\n      balance,\n  }\n}\n","import { InjectedConnector } from '@web3-react/injected-connector'\nimport { NetworkConnector } from '@web3-react/network-connector'\nimport { WalletConnectConnector } from '@web3-react/walletconnect-connector'\nimport { WalletLinkConnector } from '@web3-react/walletlink-connector'\nimport { LedgerConnector } from '@web3-react/ledger-connector'\nimport { TrezorConnector } from '@web3-react/trezor-connector'\nimport { AuthereumConnector } from '@web3-react/authereum-connector'\n\nconst POLLING_INTERVAL = 12000\n\nconst RPC_URLS: { [chainId: number]: string } = {\n  1: process.env.REACT_APP_RPC_URL_1 as string,\n  5: process.env.REACT_APP_RPC_URL_5 as string\n}\n\nconsole.log('RPC_URLS 1:', RPC_URLS[1])\nconsole.log('RPC_URLS 5:', RPC_URLS[5])\n\nexport const injected = new InjectedConnector({ supportedChainIds: [1, 5,] })\n\nexport const network = new NetworkConnector({\n  urls: { \n    1: RPC_URLS[1], \n    5: RPC_URLS[5] \n  },\n  defaultChainId: 1\n})\n\nexport const walletconnect = new WalletConnectConnector({\n  rpc: { 1: RPC_URLS[1] },\n  bridge: 'https://bridge.walletconnect.org',\n  qrcode: true,\n  pollingInterval: POLLING_INTERVAL\n})\n\nexport const walletlink = new WalletLinkConnector({\n  url: RPC_URLS[1],\n  appName: 'Loopring DEX'\n})\n\nexport const ledger = new LedgerConnector({ chainId: 1, url: RPC_URLS[1], pollingInterval: POLLING_INTERVAL })\n\nexport const trezor = new TrezorConnector({\n  chainId: 1,\n  url: RPC_URLS[1],\n  pollingInterval: POLLING_INTERVAL,\n  manifestEmail: 'dummy@abc.xyz',\n  manifestAppUrl: 'http://localhost:1234'\n})\n\nexport const authereum = new AuthereumConnector({ chainId: 42 })\n","import { createSlice, PayloadAction, Slice } from '@reduxjs/toolkit'\nimport { AmmMapStates } from './interface';\nimport { STATUS } from '../../constant';\nimport { AmmPoolStat, AmmPoolInfoV3, LoopringMap } from 'loopring-sdk';\n\nexport  type GetAmmMapParams = { ammpools: LoopringMap<AmmPoolInfoV3> }\n\n\nconst initialState: Required<AmmMapStates<object, object>> = {\n    ammMap: undefined,\n    __timer__: -1,\n    status: 'UNSET',\n    errorMessage: null,\n}\nconst ammMapSlice: Slice = createSlice({\n    name: 'ammMap',\n    initialState,\n    reducers: {\n        getAmmMap(state, action: PayloadAction<GetAmmMapParams>) {\n            state.status = STATUS.PENDING\n        },\n        getAmmMapStatus(state, action: PayloadAction<AmmMapStates<any, any>>) {\n            // @ts-ignore\n            if (action.error) {\n                state.status = STATUS.ERROR\n                // @ts-ignore\n                state.errorMessage = action.error\n            }\n            const {ammMap, __timer__} = action.payload\n            if (ammMap) {state.ammMap = ammMap;}\n            if (__timer__) {state.__timer__ = __timer__;}\n            state.status = STATUS.DONE\n        },\n        updateRealTimeAmmMap(state, action: PayloadAction<undefined>) {\n            state.status = STATUS.PENDING\n\n\n        },\n        statusUnset: state => {\n            state.status = STATUS.UNSET\n        }\n    },\n});\nexport { ammMapSlice };\nexport const {getAmmMap, getAmmMapStatus, statusUnset, updateRealTimeAmmMap} = ammMapSlice.actions\n","import { Provider } from 'react-redux'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nimport { createWeb3ReactRoot, Web3ReactProvider } from '@web3-react/core'\nimport store from 'stores'\n\nimport { getLibrary } from 'utils/web3_tools'\nimport { NetworkContextName } from 'loopring-sdk'\n\nimport { getTheme, i18n, provider, ProviderComposer } from \"@loopring-web/component-lib/static-resource\"\nimport { ThemeProvider as MuThemeProvider } from '@material-ui/core'\nimport LocalizationProvider from '@material-ui/pickers/LocalizationProvider'\n\nimport MomentUtils from '@material-ui/lab/AdapterMoment'\n\nimport { ThemeProvider } from \"@emotion/react\"\n\nimport { I18nextProvider } from \"react-i18next\"\n\n\n\nconst Web3ProviderNetwork = createWeb3ReactRoot(NetworkContextName)\nconst providers = [\n    provider(LocalizationProvider as any, {dateAdapter: MomentUtils}),\n    provider(I18nextProvider as any, {i18n:i18n}),\n    provider(MuThemeProvider as any, {theme: getTheme('dark')}),\n    provider(ThemeProvider as any, {theme: getTheme('dark')}),\n    provider(Provider as any, {store}),\n]\n\nReactDOM.render(\n// @ts-ignore\n    <ProviderComposer providers={providers}>\n        <Web3ReactProvider getLibrary={getLibrary}>\n            <Web3ProviderNetwork getLibrary={getLibrary}>\n                <App/>\n            </Web3ProviderNetwork>\n        </Web3ReactProvider>\n    </ProviderComposer>,\n    document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\nif (process.env.NODE_ENV !== 'production') {\n    reportWebVitals(console.log)\n}\n","import { createSlice, PayloadAction, Slice } from '@reduxjs/toolkit'\n\nimport { TradingInterval, ChainId, ExchangeInfo, TokenInfo, TickerData, getBaseQuote } from 'loopring-sdk'\n\nexport interface TradingInfo {\n  chainId: number\n  symbol: string\n  symbol_base: string | undefined\n  symbol_quote: string | undefined\n  interval: TradingInterval\n  ammPoolStats: any\n  ammPoolConf: any\n  ammActivityRules: any\n  markets: any\n  marketTrades: any\n  tickerMap: {[key: string]: TickerData}\n  tokens: {[key: string]: [value: TokenInfo]}\n  exchangeInfo?: ExchangeInfo\n}\n\nconst defaultSymbol = process.env.REACT_APP_TEST_SYMBOL ? process.env.REACT_APP_TEST_SYMBOL : 'LRC-ETH'\nconst defaultInterval = process.env.REACT_APP_TEST_INTERVAL ? process.env.REACT_APP_TEST_INTERVAL : TradingInterval.hr1\n\nconst { base, quote } = getBaseQuote(defaultSymbol)\n\nconst initialState = {\n  chainId: ChainId.GORLI,\n  symbol: defaultSymbol,\n  symbol_base: base,\n  symbol_quote: quote,\n  interval: defaultInterval,\n  ammPoolConf: {},\n  ammActivityRules: {},\n  ammPoolStats: {},\n  markets: [],\n  marketTrades: {},\n  tokens: {},\n  tickerMap: {},\n  refreshRate: 1000,\n  refreshRateSlow: 3000,\n} as TradingInfo\n\nconst tradingSlice:Slice = createSlice({\n  name: 'trading',\n  initialState,\n  reducers: {\n    setChainId(state, action: PayloadAction<number>) {\n      state.chainId = action.payload\n    },\n    changeSymbol(state, action: PayloadAction<any>) {\n      state.symbol = action.payload\n      const { base, quote } = getBaseQuote(state.symbol)\n      state.symbol_base = base\n      state.symbol_quote = quote\n    },\n    changeTradingInterval(state, action: PayloadAction<any>) {\n      state.interval = action.payload\n    },\n    setTickerMap(state, action: PayloadAction<any>) {\n      state.tickerMap = action.payload\n    },\n    setAmmPoolStats(state, action: PayloadAction<any>) {\n      state.ammPoolStats = action.payload\n    },\n    setAmmActivityRules(state, action: PayloadAction<any>) {\n      state.ammActivityRules = action.payload\n    },\n    setAmmPoolConf(state, action: PayloadAction<any>) {\n      state.ammPoolConf = action.payload\n    },\n    setMarketTrades(state, action: PayloadAction<any>) {\n      state.marketTrades = action.payload\n    },\n    setMarkets(state, action: PayloadAction<any>) {\n      state.markets = action.payload\n    },\n    setTokens(state, action: PayloadAction<{}>) {\n      state.tokens = action.payload\n    },\n    setExchangeInfo(state, action: PayloadAction<ExchangeInfo>) {\n      state.exchangeInfo = action.payload\n    },\n  },\n})\n\nexport const {\n  setChainId, \n  setAmmPoolStats,\n  setAmmActivityRules,\n  setMarketTrades, \n  setTickerMap, \n  setAmmPoolConf, \n  changeSymbol, \n  changeTradingInterval, \n  setMarkets, \n  setTokens, \n  setExchangeInfo, \n} = tradingSlice.actions\n\nexport default tradingSlice\n","export enum CONSTANTS {\n    Handler = 'handler',\n    AccountId = 'account_id',\n    Account = 'account',\n    Apikey = 'apikey',\n    Eddsakey = 'eddsakey',\n    ActiveTime = 'active_time',\n    AmmOrder = 'amm_order',\n    HardwareAddresses = 'hardware_addresses',\n}\n\nconst SESSION_TIMEOUT_SECONDS = 600\n\nexport class UserStorage {\n\n    public static getHandler() {\n        const rawHandler = sessionStorage.getItem(CONSTANTS.Handler)\n        try {\n            if (rawHandler !== undefined && rawHandler !== null)\n                return parseInt(rawHandler)\n        } catch (err) {\n        }\n        return undefined\n    }\n\n    public static setHandler(handler: any) {\n        sessionStorage.setItem(CONSTANTS.Handler, handler)\n    }\n\n    public static clearHandler() {\n        sessionStorage.removeItem(CONSTANTS.Handler)\n    }\n\n    public static checkTimeout(reset: boolean = false) : boolean {\n        let dateTimeStr = localStorage.getItem(CONSTANTS.ActiveTime)\n        let now = new Date().getTime()\n\n        if (dateTimeStr !== null && !reset) {\n            let tmpDt = new Date(parseInt(dateTimeStr))\n\n            // console.log(`now:${now} dateTimeStr:${dateTimeStr} delta:${now - tmpDt.getTime()}`)\n\n            if(now - tmpDt.getTime() > SESSION_TIMEOUT_SECONDS * 1000) {\n                console.log(`TIMEOUT! now:${now} dateTimeStr:${dateTimeStr} delta:${now - tmpDt.getTime()}`)\n                sessionStorage.clear()\n                localStorage.setItem(CONSTANTS.ActiveTime, now.toString())\n                return true\n            }\n        } else {\n\n            if (reset) {\n                console.log('force reset!!')\n            }\n\n            localStorage.setItem(CONSTANTS.ActiveTime, now.toString())\n        }\n\n        return false\n    }\n\n\n    public static getAccountId() {\n        const rawId = sessionStorage.getItem(CONSTANTS.AccountId)\n        try {\n            if (rawId)\n                return parseInt(rawId)\n        } catch (err) {\n        }\n        return undefined\n    }\n\n    public static setAccountId(accountId: number) {\n        sessionStorage.setItem(CONSTANTS.AccountId, accountId.toString())\n    }\n\n    public static getAccount() {\n        return sessionStorage.getItem(CONSTANTS.Account)\n    }\n\n    public static setAccount(account: string) {\n        sessionStorage.setItem(CONSTANTS.Account, account)\n    }\n\n    public static getApikey() {\n        return sessionStorage.getItem(CONSTANTS.Apikey)\n    }\n\n    public static setApikey(apikey: string) {\n        sessionStorage.setItem(CONSTANTS.Apikey, apikey)\n    }\n\n    public static getEddsakey() {\n        return sessionStorage.getItem(CONSTANTS.Eddsakey)\n    }\n\n    public static setEddsakey(eddsakey: string) {\n        sessionStorage.setItem(CONSTANTS.Eddsakey, eddsakey)\n    }\n\n    public static getAmmOrder(): string {\n        var orderHash = localStorage.getItem(CONSTANTS.AmmOrder)\n        return orderHash ? orderHash : ''\n    }\n\n    public static setAmmOrder(orderHash: string) {\n        localStorage.setItem(CONSTANTS.AmmOrder, orderHash)\n    }\n\n    public static clearAmmOrder() {\n        localStorage.removeItem(CONSTANTS.AmmOrder)\n    }\n\n    public static isHardwareAddress(address: string) {\n        let current = localStorage.getItem(CONSTANTS.HardwareAddresses)\n        if (current) {\n            if (current.includes(address.toLowerCase())) {\n                return true\n            }\n        }\n        return false\n    }\n\n    public static saveHardwareAddress(address: string) {\n        let current = localStorage.getItem(CONSTANTS.HardwareAddresses);\n        if (current) {\n            if (current.includes(address.toLowerCase()) !== true) {\n                let newValue = current + ',' + address.toLowerCase();\n                localStorage.setItem(CONSTANTS.HardwareAddresses, newValue);\n            }\n        } else {\n            localStorage.setItem(CONSTANTS.HardwareAddresses, address.toLowerCase());\n        }\n\n    }\n}\n","import { createSlice, PayloadAction, Slice } from '@reduxjs/toolkit'\nimport {  TickerStates } from './interface';\nimport { STATUS } from '../constant';\nimport { CoinKey } from '@loopring-web/component-lib/src/static-resource';\n\nconst initialState:Required<TickerStates>  = {\n    tickerMap:{},\n    status:'UNSET',\n    errorMessage:null,\n}\nconst tickerMapSlice:Slice = createSlice({\n    name: 'tickerMap',\n    initialState,\n    reducers: {\n        getTicker(state, action:PayloadAction<CoinKey<any>>) {\n            state.status = STATUS.PENDING\n        },\n        getTickers(state, action:PayloadAction<Array<CoinKey<any>>>) {\n            state.status = STATUS.PENDING\n        },\n        getTickerStatus(state, action: PayloadAction<TickerStates>) {\n            // @ts-ignore\n            if (action.error) {\n                state.status =  STATUS.ERROR\n                // @ts-ignore\n                state.errorMessage = action.error\n            }\n            state.tickerMap = {...state.tickerMap,...action.payload.tickerMap};\n            state.status = STATUS.DONE\n        },\n        statusUnset: state => {\n            state.status = STATUS.UNSET\n        }\n\n    },\n});\nexport { tickerMapSlice };\nexport const { getTicker,getTickers, getTickerStatus, statusUnset } = tickerMapSlice.actions;","import { useDispatch, useSelector } from 'react-redux'\nimport { walletLayer2Slice } from './reducer';\nimport { WalletLayer2States } from './interface';\n\nexport function useWalletLayer2(): WalletLayer2States & {\n    updateWalletLayer2:()=> void,\n    statusUnset:()=> void,\n    resetLayer2:()=>void,\n} {\n    const walletLayer2:WalletLayer2States = useSelector((state: any) => state.walletLayer2)\n    const dispatch = useDispatch();\n    const updateWalletLayer2 = () => {\n        dispatch(walletLayer2Slice.actions.getWalletLayer2(undefined))\n    }\n    const statusUnset = ()=>{\n        dispatch(walletLayer2Slice.actions.statusUnset(undefined))\n    }\n    const resetLayer2 = ()=>{\n        dispatch(walletLayer2Slice.actions.reset(undefined))\n    }\n    return {\n        ...walletLayer2,\n        resetLayer2,\n        statusUnset,\n        updateWalletLayer2\n    }\n\n}\n","import { createSlice, PayloadAction, Slice } from '@reduxjs/toolkit'\nimport { ENV, System, SystemStatus } from './interface';\nimport { STATUS } from '../constant';\n\nconst initialState: SystemStatus = {\n    env: ENV.PROD,\n    chainId: 'unknown',\n    // network:'NONETWORK',\n    baseURL: '',\n    faitPrices: undefined,\n    gasPrice: undefined,\n    forex: undefined,\n    __timer__: -1,\n    status: 'UNSET',\n    errorMessage: null,\n\n    topics: [],\n}\nconst systemSlice: Slice<SystemStatus> = createSlice({\n    name: 'system',\n    initialState,\n    reducers: {\n\n        updateSystem(state, action: PayloadAction<System>) {\n            state.chainId = action.payload.chainId\n            state.status = STATUS.PENDING\n        },\n        updateRealTimeObj(state, action: PayloadAction<Partial<{ faitPrices: any, gasPrice: number, forex: number }>>) {\n            const {forex, faitPrices, gasPrice} = action.payload;\n            if (forex) {\n                state.forex = forex\n            }\n            if (faitPrices) {\n                state.faitPrices = faitPrices\n            }\n            if (gasPrice) {\n                state.gasPrice = gasPrice\n            }\n\n\n            // state = {\n            //     ...state.system,\n            //     forex: forex?,\n            //     faitPrices: action.payload.faitPrices ? action.payload.faitPrices : state.system.faitPrices,\n            //     gasPrice: action.payload.gasPrice ? action.payload.gasPrice : state.system.gasPrice,\n            // };\n\n        },\n        getSystemStatus(state, action: PayloadAction<Partial<SystemStatus>>) {\n\n            // @ts-ignore\n            if (action.error) {\n                state.status = STATUS.ERROR\n                // @ts-ignore\n                state.errorMessage = action.error\n            }\n            const {env, baseURL, faitPrices, gasPrice, forex, __timer__} = action.payload;\n            if (env) {\n                state.env = env\n            }\n            if (baseURL) {\n                state.baseURL = baseURL\n            }\n            if (faitPrices) {\n                state.faitPrices = faitPrices\n            }\n            if (gasPrice) {\n                state.gasPrice = gasPrice\n            }\n            if (forex) {\n                state.forex = forex\n            }\n            if (__timer__) {\n                state.__timer__ = __timer__\n            }\n            state.status = STATUS.DONE\n        },\n        statusUnset: state => {\n            state.status = STATUS.UNSET\n        }\n\n    },\n});\nexport { systemSlice };\nexport const {updateSystem, setTopics, getSystemStatus, statusUnset, updateRealTimeObj} = systemSlice.actions;","import { StateBase } from '../interface';\nimport { ChainId } from 'loopring-sdk';\n\nexport enum ENV {\n    DEV='DEV',\n    UAT='UAT',\n    PROD='PROD',\n}\nexport enum NETWORKEXTEND {\n    NONETWORK = 'unknown'\n}\nexport type NETWORK = NETWORKEXTEND | ChainId\n\n\nexport type System = {\n    env:keyof typeof ENV,\n    chainId: 1|5|'unknown'\n    // network: keyof typeof NETWORK,\n    baseURL: string,\n    faitPrices:any | undefined,\n    gasPrice:number | undefined,\n    forex:number | undefined,\n\n\n}\n\nexport type SystemStatus = System & {\n    // system:System | {}\n    __timer__:NodeJS.Timeout | -1\n    topics: any[]\n}  & StateBase\n\n\n\n","import { createSlice, PayloadAction, Slice } from '@reduxjs/toolkit'\nimport { WalletLayer1Map, WalletLayer1States } from './interface';\nimport { STATUS } from '../constant';\n\n\nconst initialState:WalletLayer1States  = {\n    walletLayer1:undefined,\n    status:'UNSET',\n    errorMessage:null,\n}\nconst walletLayer1Slice:Slice = createSlice({\n    name: 'walletLayer1S',\n    initialState,\n    reducers: {\n        updateWalletLayer1(state, action:PayloadAction<string | undefined>) {\n            state.status = STATUS.PENDING\n        },\n        reset(state, action:PayloadAction<string | undefined>) {\n            state.walletLayer1 = undefined;\n            state.status = STATUS.UNSET;\n        },\n        getWalletLayer1Status(state, action: PayloadAction<{ walletLayer1:WalletLayer1Map<object> }>) {\n            // @ts-ignore\n            if (action.error) {\n                state.status =  STATUS.ERROR\n                // @ts-ignore\n                state.errorMessage = action.error\n            }\n            state.walletLayer1 = {...action.payload.walletLayer1};\n            state.status = STATUS.DONE\n        },\n        statusUnset: state => {\n            state.status = STATUS.UNSET\n        }\n    },\n});\nexport { walletLayer1Slice };\nexport const { updateWalletLayer1, getWalletLayer1Status,statusUnset,reset } = walletLayer1Slice.actions\n","import { createSlice, PayloadAction, Slice } from '@reduxjs/toolkit'\nimport { WalletLayer2Map, WalletLayer2States } from './interface';\nimport { STATUS } from '../constant';\n\n\nconst initialState:WalletLayer2States  = {\n    walletLayer2:undefined,\n    status:'UNSET',\n    errorMessage:null,\n}\nconst walletLayer2Slice:Slice = createSlice({\n    name: 'walletLayer2S',\n    initialState,\n    reducers: {\n        updateWalletLayer2(state, action:PayloadAction<string | undefined>) {\n            state.status = STATUS.PENDING\n        },\n        reset(state, action:PayloadAction<string | undefined>) {\n            state.walletLayer2 = undefined;\n            state.status = STATUS.UNSET;\n        },\n        getWalletLayer2Status(state, action: PayloadAction<{ walletLayer2:WalletLayer2Map<object> }>) {\n            // @ts-ignore\n            if (action.error) {\n                state.status =  STATUS.ERROR\n                // @ts-ignore\n                state.errorMessage = action.error\n            }\n            state.walletLayer2 = {...action.payload.walletLayer2};\n            state.status = STATUS.DONE\n        },\n        statusUnset: state => {\n            state.status = STATUS.UNSET\n        }\n    },\n});\nexport { walletLayer2Slice };\nexport const {  updateWalletLayer2,getWalletLayer2Status,statusUnset,reset } = walletLayer2Slice.actions\n","import { createSlice, PayloadAction, Slice } from '@reduxjs/toolkit'\nimport { AmmActivityMapStates } from './interface';\nimport { STATUS } from '../../constant';\n\n\nconst initialState:Required<AmmActivityMapStates>  = {\n    ammActivityMap:{},\n    status:'UNSET',\n    errorMessage:null,\n}\nconst ammActivityMapSlice:Slice = createSlice({\n    name: 'ammActivityMap',\n    initialState,\n    reducers: {\n        getAmmActivityMap(state, action:PayloadAction<string | undefined>) {\n            state.status = STATUS.PENDING\n        },\n        getAmmActivityMapStatus(state, action: PayloadAction<AmmActivityMapStates>) {\n            // @ts-ignore\n            if (action.error) {\n                state.status =  STATUS.ERROR\n                // @ts-ignore\n                state.errorMessage = action.error\n            }\n            state.ammActivityMap = {...action.payload.ammActivityMap};\n            state.status = STATUS.DONE\n        },\n        statusUnset: state => {\n            state.status = STATUS.UNSET\n        }\n\n    },\n});\nexport { ammActivityMapSlice };\nexport const { getAmmActivityMap, getAmmActivityMapStatus, statusUnset } = ammActivityMapSlice.actions\n","import { createSlice, PayloadAction, Slice } from '@reduxjs/toolkit'\nimport { GetTokenMapParams, TokenMapStates } from './interface';\nimport { STATUS } from '../constant';\n\nconst initialState: TokenMapStates<object> = {\n    coinMap: {},\n    addressIndex: undefined,\n    tokenMap: undefined,\n    idIndex: undefined,\n    status: 'UNSET',\n    errorMessage: null,\n}\nconst tokenMapSlice: Slice<TokenMapStates<object>> = createSlice({\n    name: 'tokenMap',\n    initialState,\n    reducers: {\n        getTokenMap(state, action: PayloadAction<GetTokenMapParams<any>>) {\n            state.status = STATUS.PENDING\n        },\n        getTokenMapStatus(state, action: PayloadAction<TokenMapStates<object>>) {\n            // @ts-ignore      console.log(action.type)\n            if (action.error) {\n                state.status = STATUS.ERROR\n                // @ts-ignore\n                state.errorMessage = action.error\n            }\n\n            const {tokenMap, addressIndex, idIndex, coinMap, marketArray, marketCoins} = action.payload;\n            if (tokenMap) { state.tokenMap = tokenMap }\n            if (addressIndex) { state.addressIndex = addressIndex }\n            if (idIndex) { state.idIndex = idIndex }\n            if (coinMap) { state.coinMap = coinMap }\n            if (marketArray) { state.marketArray = marketArray }\n            if (marketCoins)  { state.marketCoins = marketCoins }\n            // if (tokenPairsMap) {state.tokenPairsMap = tokenPairsMap }\n            state.status = STATUS.DONE;\n        },\n        // getTokenPairMap(state, action: PayloadAction<{tokenPairs: TokenPairs }>) {\n        //     const {tokenPairs} = action.payload;\n        //     const tokenPairsMap =  Reflect.ownKeys(tokenPairs).reduce((prev,key)=>{\n        //         // @ts-ignore\n        //         return prev[key as string] =  tokenPairs[key as string].tokenList\n        //     }, {} )\n        //     if (tokenPairsMap) {state.tokenPairsMap = tokenPairsMap }\n        //     // state.status = STATUS.PENDING\n        // },\n        statusUnset: state => {\n            state.status = STATUS.UNSET\n        }\n\n    },\n});\nexport { tokenMapSlice };\nexport const {getTokenMap, getTokenMapStatus,getTokenPairMap, statusUnset} = tokenMapSlice.actions;","import { useDispatch, useSelector } from 'react-redux'\nimport { tickerMapSlice } from './reducer';\nimport { TickerStates } from './interface';\nimport { CoinKey } from '@loopring-web/component-lib/src/static-resource';\n\nexport function useTicker(): TickerStates & {\n    updateTickers:(tickerKeys:Array<CoinKey<any>>)=>void,\n    updateTicker:(tickerKey:CoinKey<any>)=>void,\n    statusUnset:()=>void,\n} {\n    const tickerMap:TickerStates = useSelector((state: any) => state.tickerMap)\n    const dispatch = useDispatch();\n    const updateTicker = (tickerKey:CoinKey<any>) => {\n        dispatch(tickerMapSlice.actions.getTicker({tickerKey}))\n    }\n    const updateTickers = (tickerKeys:Array<CoinKey<any>>) => {\n        dispatch(tickerMapSlice.actions.getTickers({tickerKeys}))\n    }\n    const statusUnset = ()=>{\n        dispatch(tickerMapSlice.actions.statusUnset(undefined))\n    }\n    return {\n        ...tickerMap,\n        statusUnset,\n        updateTickers,\n        updateTicker,\n    }\n\n}\n","import { useDispatch, useSelector } from 'react-redux'\nimport { AmmActivityMapStates } from './interface';\nimport { ammActivityMapSlice } from './reducer';\n\nexport function useAmmActivityMap(): AmmActivityMapStates & {\n    updateAmmActivityMap:()=> void,\n    statusUnset:()=> void,\n} {\n    const ammActivityMap:AmmActivityMapStates = useSelector((state: any) => state.amm.ammActivityMap)\n    const dispatch = useDispatch();\n    const updateAmmActivityMap = () => {\n        dispatch(ammActivityMapSlice.actions.getAmmActivityMap(undefined))\n    }\n    const statusUnset = ()=>{\n        dispatch(ammActivityMapSlice.actions.statusUnset(undefined))\n    }\n    return {\n        ...ammActivityMap,\n        statusUnset,\n        updateAmmActivityMap\n    }\n\n}\n","import { useDispatch, useSelector } from 'react-redux'\nimport { systemSlice } from './reducer';\nimport { System, SystemStatus } from './interface';\n\nexport function useSystem(): SystemStatus & {\n    updateSystem:(system:Partial<System>)=>void,\n    statusUnset:()=>void,\n} {\n    const system:SystemStatus = useSelector((state: any) => state.system)\n    const dispatch = useDispatch();\n    const updateSystem = (system:Partial<System>) => {\n        dispatch(systemSlice.actions.updateSystem(system))\n    }\n    const statusUnset = ()=>{\n        dispatch(systemSlice.actions.statusUnset(undefined))\n    }\n    return {\n        ...system,\n        statusUnset,\n        updateSystem,\n    }\n\n}\n","export enum AccountStatus {\n    UNKNOWN = 'UNKNOWN',\n    UNCONNNECTED = 'UNCONNNECTED',\n    CONNECTED = 'CONNECTED',\n    NOACCOUNT = 'NOACCOUNT',\n    DEPOSITING = 'DEPOSITING',\n    DEPOSIT_TO_CONFIREM = 'DEPOSIT_TO_CONFIREM',\n    UNACTIVATED = 'UNACTIVATED',\n    ARPROVING = 'ARPROVING',\n    APPROV_TO_CONFIRM = 'APPROV_TO_CONFIRM',\n    LOCKED = 'LOCKED',\n    ACTIVATED = 'ACTIVATED',\n}\n\nexport enum StatusChangeEvent {\n    Reset = 'Reset',\n    Connecting = 'Connecting',\n    HasPubkey = 'HasPubkey',\n    HasNoPubkey = 'HasNoPubkey',\n    ErrorResponse = 'ErrorResponse',\n    FinishDeposit = 'FinishDeposit',\n    DepositConfirmed = 'DepositConfirmed',\n    IsSmartWallet = 'IsSmartWallet',\n    ApproveSubmit = 'ApproveSubmit',\n    ApproveConfirmed = 'ApproveConfirmed',\n    Unlock = 'Unlock',\n    Lock = 'Lock',\n}\n\nexport const AccountMachineSpec = (initialState: AccountStatus = AccountStatus.UNCONNNECTED) => \n{\n    return {\n        initialState: initialState,\n        states: {\n            UNCONNNECTED: {\n                Connecting: AccountStatus.CONNECTED,\n                Reset: AccountStatus.UNCONNNECTED,\n            },\n            CONNECTED: {\n                HasPubkey: AccountStatus.LOCKED,\n                HasNoPubkey: AccountStatus.UNACTIVATED,\n                ErrorResponse: AccountStatus.NOACCOUNT,\n                Reset: AccountStatus.UNCONNNECTED,\n            },\n            NOACCOUNT: {\n                ErrorResponse: AccountStatus.NOACCOUNT,\n                Reset: AccountStatus.UNCONNNECTED,\n            },\n            DEPOSITING: {\n                FinishDeposit: AccountStatus.DEPOSIT_TO_CONFIREM,\n                Reset: AccountStatus.UNCONNNECTED,\n            },\n            DEPOSIT_TO_CONFIREM: {\n                HasPubkey: AccountStatus.ACTIVATED,\n                HasNoPubkey: AccountStatus.DEPOSIT_TO_CONFIREM,\n                ErrorResponse: AccountStatus.DEPOSIT_TO_CONFIREM,\n                Reset: AccountStatus.UNCONNNECTED,\n            },\n            UNACTIVATED: {\n                IsSmartWallet: AccountStatus.ARPROVING,\n                Reset: AccountStatus.UNCONNNECTED,\n            },\n            ARPROVING: {\n                ApproveSubmit: AccountStatus.APPROV_TO_CONFIRM,\n                Reset: AccountStatus.UNCONNNECTED,\n            },\n            APPROV_TO_CONFIRM: {\n                ApproveConfirmed: AccountStatus.ACTIVATED,\n                Reset: AccountStatus.UNCONNNECTED,\n            },\n            LOCKED: {\n                Unlock: AccountStatus.ACTIVATED,\n                Reset: AccountStatus.UNCONNNECTED,\n            },\n            ACTIVATED: {\n                Lock: AccountStatus.LOCKED,\n                Reset: AccountStatus.UNCONNNECTED,\n            },\n        },\n    }\n}\n","import { Contract } from '@ethersproject/contracts'\nimport { getAddress } from '@ethersproject/address'\nimport { AddressZero } from '@ethersproject/constants'\nimport { BigNumber } from '@ethersproject/bignumber'\n\nimport { JsonRpcSigner, Web3Provider } from '@ethersproject/providers'\n\nimport { UnsupportedChainIdError } from '@web3-react/core'\n\nimport {\n  NoEthereumProviderError,\n  UserRejectedRequestError as UserRejectedRequestErrorInjected\n} from '@web3-react/injected-connector'\nimport { UserRejectedRequestError as UserRejectedRequestErrorWalletConnect } from '@web3-react/walletconnect-connector'\n\nimport { ChainId } from 'loopring-sdk'\n\nexport function getLibrary(provider: any): Web3Provider {\n  const library = new Web3Provider(provider)\n  library.pollingInterval = 10000\n  return library\n}\n\nexport function getErrorMessage(error: Error) {\n  if (error instanceof NoEthereumProviderError) {\n    return 'No Ethereum browser extension detected, install MetaMask on desktop or visit from a dApp browser on mobile.'\n  } else if (error instanceof UnsupportedChainIdError) {\n    return 'You\\'re connected to an unsupported network.'\n  } else if (\n    error instanceof UserRejectedRequestErrorInjected ||\n    error instanceof UserRejectedRequestErrorWalletConnect\n  ) {\n    return 'Please authorize this website to access your Ethereum account.'\n  } else {\n    console.error(error)\n    return 'An unknown error occurred. Check the console for more details.'\n  }\n}\n\nexport function transactionChecker(web3: any, address: string) {\n  const account = address.toLowerCase()\n\n  const subscription = web3.eth.subscribe('pendingTransactions', (err: any, res: any) => {\n    if (err) {\n      console.error(err)\n    }\n  })\n\n  return function watchTransactions() {\n    console.log('Watch Transactions...')\n    subscription.on('data', (txHash: any) => {\n      setTimeout(async () => {\n        try {\n          let tx = await web3.eth.getTransaction(txHash)\n          if (tx.to && tx.to.toLowerCase() === account) {\n            const value = web3.utils.fromWei(tx.value, 'ether')\n            if (value > 0) {\n              console.log('watchTransactions value:', value)\n            }\n          }\n        } catch (err) {\n          console.error(err)\n        }\n      }, 60 * 1000)\n    })\n  }\n}\n\n// returns the checksummed address if the address is valid, otherwise returns false\nexport function isAddress(value: any): string | false {\n  try {\n    return getAddress(value)\n  } catch {\n    return false\n  }\n}\n\nconst ETHERSCAN_PREFIXES: { [chainId in ChainId]: string } = {\n  1: '',\n  5: 'goerli.',\n}\n\nexport function getEtherscanLink(\n  chainId: ChainId,\n  data: string,\n  type: 'transaction' | 'token' | 'address' | 'block'\n): string {\n  const prefix = `https://${ETHERSCAN_PREFIXES[chainId] || ETHERSCAN_PREFIXES[1]}etherscan.io`\n\n  switch (type) {\n    case 'transaction': {\n      return `${prefix}/tx/${data}`\n    }\n    case 'token': {\n      return `${prefix}/token/${data}`\n    }\n    case 'block': {\n      return `${prefix}/block/${data}`\n    }\n    case 'address':\n    default: {\n      return `${prefix}/address/${data}`\n    }\n  }\n}\n\n// shorten the checksummed version of the input address to have 0x + 4 characters at start and end\nexport function shortenAddress(address: string, chars = 4): string {\n  const parsed = isAddress(address)\n  if (!parsed) {\n    throw Error(`Invalid 'address' parameter '${address}'.`)\n  }\n  return `${parsed.substring(0, chars + 2)}...${parsed.substring(42 - chars)}`\n}\n\n// add 10%\nexport function calculateGasMargin(value: BigNumber): BigNumber {\n  return value.mul(BigNumber.from(10000).add(BigNumber.from(1000))).div(BigNumber.from(10000))\n}\n\n// account is not optional\nexport function getSigner(library: Web3Provider, account: string): JsonRpcSigner {\n  return library.getSigner(account).connectUnchecked()\n}\n\n// account is optional\nexport function getProviderOrSigner(library: Web3Provider, account?: string): Web3Provider | JsonRpcSigner {\n  return account ? getSigner(library, account) : library\n}\n\n// account is optional\nexport function getContract(address: string, ABI: any, library: Web3Provider, account?: string): Contract {\n  if (!isAddress(address) || address === AddressZero) {\n    throw Error(`Invalid 'address' parameter '${address}'.`)\n  }\n\n  return new Contract(address, ABI, getProviderOrSigner(library, account) as any)\n}\n\nexport function escapeRegExp(string: string): string {\n  return string.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&') // $& means the whole matched string\n}\n\nexport async function isContract(web3: any, address: string) {\n  const code = await web3.eth.getCode(address)\n  return code && code.length > 2\n}\n\nexport function getShortAddr(address: string) {\n    if (!address || address === undefined || address === null || address.trim() === '') {\n        console.log('getShortAddr got empty!')\n        return undefined\n    }\n    const convertAddr = address.substr(0, 6) + '...' + address.substr(address.length - 4)\n    return convertAddr\n}\n","import { debounce } from 'lodash'\nimport React, { useEffect } from 'react'\nimport { UserStorage } from 'storage'\n\nimport { useCheckAccStatus, } from 'stores/account/hook'\n\nimport { \n  useUpdateChainId,\n  useUpdateExchangeInfo, \n  useUpdateExchangeMarkets, \n  useUpdateTokens, \n  useUpdateAmmPoolConf,\n  useUpdateAmmActivityRules,\n  useUpdateAmmPoolStats,\n} from 'stores/trading/hook'\n\nenum WindowEvent {\n  Click = 'click',\n  Scroll = 'scroll',\n  Mouseover = 'mouseover',\n}\n\nconst events = [WindowEvent.Click, WindowEvent.Scroll]\n\nconst forceReset = debounce(() => { UserStorage.checkTimeout(true) }, 100)\n\nexport const GlobalProvider = ({ children }: { children: React.ReactNode }) => {\n\n  useUpdateExchangeInfo()\n  useUpdateExchangeMarkets()\n  useUpdateTokens()\n  useUpdateAmmPoolConf()\n  useUpdateAmmActivityRules()\n  useUpdateAmmPoolStats()\n  useUpdateChainId()\n\n  useCheckAccStatus()\n\n  useEffect(() => {\n\n    events.forEach((event: string) => {\n      document.addEventListener(event, forceReset)\n    })\n\n    return () => {\n\n      events.forEach((event: string) => {\n        document.removeEventListener(event, forceReset)\n      })\n    }\n\n  }, [])\n\n  return (\n    <React.Fragment>\n      { children}\n    </React.Fragment>\n  )\n\n}\n","import React, { useState, useEffect } from 'react'\nimport styled from '@emotion/styled/macro'\nimport { useTranslation } from 'react-i18next'\n\nimport { useWeb3React } from '@web3-react/core'\n\nimport { network } from 'networks/web3_connectors'\n\nimport { useEagerConnect, useInactiveListener } from 'hooks/web3/useWeb3'\nimport { reset, setAccountStatus } from 'stores/account/reducer'\n\nimport { ChainId, NetworkContextName } from 'loopring-sdk'\n\n// import Loader from 'components/modals/Loader'\nimport { useDispatch } from 'react-redux'\nimport { AccountStatus } from 'state_machine/account_machine_spec'\n\nconst MessageWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  height: 20rem;\n`\n\nconst Message = styled.h2`\n  color: ${({ theme }) => theme.colorBase.error};\n`\n\nexport function Web3ReactManager({ children }: { children: JSX.Element }) {\n  const { t } = useTranslation()\n  const { active } = useWeb3React()\n  const { active: networkActive, error: networkError, activate: activateNetwork } = useWeb3React(NetworkContextName)\n\n  // try to eagerly connect to an injected provider, if it exists and has granted access already\n  const triedEager = useEagerConnect()\n\n  // after eagerly trying injected, if the network connect ever isn't active or in an error state, activate itd\n  useEffect(() => {\n    if (triedEager && !networkActive && !networkError && !active) {\n      activateNetwork(network)\n    }\n  }, [triedEager, networkActive, networkError, activateNetwork, active])\n\n  // when there's no account connected, react to logins (broadly speaking) on the injected provider, if it exists\n  \n  const dispatch = useDispatch()\n\n  const onReConnectInjected = () => {\n    console.log('onReConnectInjected')\n    dispatch(reset(undefined))\n    dispatch(setAccountStatus(AccountStatus.UNCONNNECTED))\n  }\n  \n  useInactiveListener(onReConnectInjected, !triedEager)\n\n  // handle delayed loader state\n  const [showLoader, setShowLoader] = useState(false)\n  useEffect(() => {\n    const timeout = setTimeout(() => {\n      setShowLoader(true)\n    }, 600)\n\n    return () => {\n      clearTimeout(timeout)\n    }\n  }, [])\n\n  // on page load, do nothing until we've tried to connect to the injected connector\n  if (!triedEager) {\n    return null\n  }\n\n  // if the account context isn't active, and there's an error on the network context, it's an irrecoverable error\n  if (!active && networkError) {\n    return (\n      <MessageWrapper>\n        <Message>{t('unknownError')}</Message>\n      </MessageWrapper>\n    )\n  }\n\n  // if neither context is active, spin\n  if (!active && !networkActive) {\n    return showLoader ? (\n      <MessageWrapper>\n        {/*<Loader />*/}\n      </MessageWrapper>\n    ) : null\n  }\n\n  return children\n}\n","import React from 'react'\n\nexport const DevWrapper = ({ children }: { children: React.ReactNode }) => {\n\n  return (\n    <React.Fragment>\n      {\n        process.env.NODE_ENV !== 'production' ? (\n          <>\n          {children}\n          </>\n        ) : null\n      }\n    </React.Fragment>\n  )\n\n}\n\n","export enum STATUS {\n    UNSET='UNSET',\n    PENDING='PENDING',\n    ERROR='ERROR',   // success failed timeout is Done\n    DONE='DONE',   // success failed timeout is Done\n}\n","import { Trans, useTranslation } from 'react-i18next';\nimport { Box, Container, Link, Typography } from '@material-ui/core';\nimport styled from '@emotion/styled';\nimport { ErrorObject } from '@loopring-web/component-lib/src/static-resource';\nimport { getContactInfo } from '../../utils/dt_tools';\n\nconst StyleBox = styled(Box)`\n  background-image: url('./static/images/error_bg.png');\n  background-repeat: no-repeat;\n  background-size: contain;\n  background-position: bottom;\n  white-space: pre-wrap;\n  //h2{\n  //  position: relative;\n  //}\n` as typeof Box\n\nexport const ErrorPage = ({messageKey}: ErrorObject) => {\n    // const {messageKey}: { id?:string,messageKey:string } = {messageKey: 'errorMessageTokenMapIsEmpty'};\n    //TODO: checkRouter\n    const {t} = useTranslation('error');\n    const message = `labelConnectUs`;\n    return <>\n        <Container>\n            {/*style={{height: '100%' }}*/}\n            <StyleBox flex={1} display={'flex'} alignItems={'flex-start'} justifyContent={'center'}\n                      flexDirection={'column'} marginTop={4} height={680} maxWidth={1200}>\n                {/*<StyleBox>*/}\n                <Box textAlign={'center'} position={'relative'} left={128} top={-64}>\n                    <Typography component={'h2'} variant={'h2'}>\n                        {t(messageKey)}\n                    </Typography>\n                    <Typography marginY={2} component={'p'} variant={'body1'} color={'textSecondary'}>\n                        <Trans i18nKey={message}>\n                            If you believe this is indeed a bug, please <Link\n                            component={'a'}\n                            onClick={(e) => {\n                                window.location.href = getContactInfo();\n                                e.preventDefault();\n                            }}\n                        >contact us</Link> <br/> We would appreciate your feedback\n\n                        </Trans>\n                        {/*{t(message)}*/}\n                        {/*{t(messageKey)}*/}\n                    </Typography>\n                </Box>\n                {/*</StyleBox>*/}\n            </StyleBox>\n        </Container>\n\n        {/*<Footer></Footer>*/}\n    </>\n}\n","// import { i18nInstance as i18n  } from \"@loopring-web/component-lib/static-resource\"\nimport i18n from 'i18next';\n\nconst covertLocale = (rawLocale: string = i18n.language) => {\n    return rawLocale.replace('_', '-')\n}\n\nexport function getLocaleDtFromTs(ts: number | string, locale: string = i18n.language) {\n    if (typeof(ts) === 'string') {\n        ts = parseInt(ts)\n    }\n    const dt = new Date(ts).toLocaleString(covertLocale(locale))\n    return dt\n}\n\nexport function getLocaleDt(dt?: Date, locale: string = i18n.language) {\n    if (dt) {\n        return dt.toLocaleString(covertLocale(locale))\n    }\n    return ''\n}\n\nexport function getContactInfo(subject: string = 'report to loopring website', body: string ='Body Content') {\n    const email = process.env.CONTACT_US_EMAIL ?? 'contact@loopring.io'\n    return `mailto:${email}?subject=${subject}&body=${body}`\n}\n","import { WsAPI, ExchangeAPI, AmmpoolAPI, UserAPI, DEFAULT_TIMEOUT, } from 'loopring-sdk'\nimport store, { RootState } from 'stores'\nimport { useSelector } from 'react-redux'\n\nimport { useMemo } from 'react'\n\nfunction useApi(ApiClass: any, timeout = DEFAULT_TIMEOUT) {\n    // const chainId = store.getState().trading.chainId\n    // return new ApiClass(chainId, timeout)\n\n  const { chainId, } = useSelector((state: RootState) => state.trading)\n\n  const genApi = () => {\n      if (!chainId) {\n          return undefined\n      }\n\n      return new ApiClass(chainId, timeout)\n  }\n\n  const api = useMemo(genApi, [ApiClass, chainId, timeout])\n\n  return api\n}\n\nexport function useWsAPI() {\n    return useApi(WsAPI) as WsAPI\n}\n\nexport function useExchangeAPI() {\n    return useApi(ExchangeAPI) as ExchangeAPI\n}\n\nexport function useAmmpoolAPI() {\n    return useApi(AmmpoolAPI) as AmmpoolAPI\n}\n\nexport function useUserAPI() {\n    return useApi(UserAPI) as UserAPI\n}\n","import { createAction } from '@reduxjs/toolkit'\n\n// fired once when the app reloads but before the app renders\n// allows any updates to be applied to store data loaded from localStorage\nexport const updateVersion = createAction<void>('global/updateVersion')\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit'\n\nconst now = () => new Date().getTime()\n\nexport interface SerializableTransactionReceipt {\n  to: string\n  from: string\n  contractAddress: string\n  transactionIndex: number\n  blockHash: string\n  transactionHash: string\n  blockNumber: number\n  status?: number\n}\n\nexport interface TransactionDetails {\n  hash: string\n  approval?: { tokenAddress: string; spender: string }\n  summary?: string\n  claim?: { recipient: string }\n  receipt?: SerializableTransactionReceipt\n  lastCheckedBlockNumber?: number\n  addedTime: number\n  confirmedTime?: number\n  from: string\n}\n\nexport interface TransactionState {\n  [chainId: number]: {\n    [txHash: string]: TransactionDetails\n  }\n}\n\nexport const initialState: TransactionState = {}\n\nconst transactionsSlice = createSlice({\n  name: 'transactions',\n  initialState,\n  reducers: {\n    reset(state) {\n      Object.assign(state, initialState)\n    },\n    addTransaction(state: TransactionState, action: PayloadAction<{\n      chainId: number, from: string,\n      hash: string, approval: any, summary: string, claim: any\n    }>) {\n      const { chainId, from, hash, approval, summary, claim} = action.payload\n      if (state[chainId]?.[hash]) {\n        throw Error('the existing TX can\\'t be added again')\n      }\n\n      const txs = state[chainId] ?? {}\n      txs[hash] = {\n        hash, \n        approval, \n        summary, \n        claim, \n        from,\n        addedTime: now(), \n      }\n      // state[chainId] = txs\n    },\n    clearAllTransactions(state: TransactionState, action: PayloadAction<number>) {\n      const chainId = action.payload\n      if (!state[chainId]) return\n      state[chainId] = {}\n    },\n    checkedTransaction(state: TransactionState, action: PayloadAction<{chainId: number,\n    hash: string, blockNumber: number}>) {\n      const { chainId, hash, blockNumber} = action.payload\n      const tx = state[chainId]?.[hash]\n      if (!tx) {\n        return\n      }\n      if (!tx.lastCheckedBlockNumber) {\n        tx.lastCheckedBlockNumber = blockNumber\n      } else {\n        tx.lastCheckedBlockNumber = Math.max(blockNumber, tx.lastCheckedBlockNumber)\n      }\n      // state[chainId][hash] = tx\n    },\n    finalizeTransaction(state: TransactionState, action: PayloadAction<{\n      hash: string, chainId: number, receipt: any\n    }>) {\n      const { chainId, hash, receipt } = action.payload\n      \n      const tx = state[chainId]?.[hash]\n      if (!tx) {\n        return\n      }\n      tx.receipt = receipt\n      tx.confirmedTime = now()\n    }\n  }\n}\n)\n\nexport const { reset, addTransaction, clearAllTransactions, checkedTransaction, finalizeTransaction, } = transactionsSlice.actions\nexport default transactionsSlice\n","import { createSlice, PayloadAction, Slice } from '@reduxjs/toolkit'\nimport {  AmmRecordStates } from './interface';\nimport { STATUS } from '../../constant';\n\nconst initialState:Required<AmmRecordStates>  = {\n    ammRecords:[],\n    status:'UNSET',\n    errorMessage:null,\n}\nconst ammRecordSlice:Slice = createSlice({\n    name: 'ammRecord',\n    initialState,\n    reducers: {\n        getAmmRecord(state, action:PayloadAction<string | undefined>) {\n            state.status = STATUS.PENDING\n        },\n        getAmmRecordStatus(state, action: PayloadAction<AmmRecordStates>) {\n            // @ts-ignore\n            if (action.error) {\n                state.status =  STATUS.ERROR\n                // @ts-ignore\n                state.errorMessage = action.error\n            }\n            state.ammRecords = {...action.payload.ammRecords};\n            state.status = STATUS.DONE\n        },\n        statusUnset: state => {\n            state.status = STATUS.UNSET\n        }\n    },\n});\nexport { ammRecordSlice };\nexport const { getAmmRecord, getAmmRecordStatus,statusUnset } = ammRecordSlice.actions\n","import { createSlice, PayloadAction, Slice } from '@reduxjs/toolkit'\nimport {  AmmTradesStates } from './interface';\nimport { STATUS } from '../../constant';\n\n\nconst initialState:Required<AmmTradesStates>  = {\n    ammTrades:[],\n    status:'UNSET',\n    errorMessage:null,\n}\nconst ammTradesSlice:Slice = createSlice({\n    name: 'ammTrades',\n    initialState,\n    reducers: {\n        getAmmTrades(state, action:PayloadAction<string | undefined>) {\n            state.status = STATUS.PENDING\n        },\n        getAmmTradesStatus(state, action: PayloadAction<AmmTradesStates>) {\n            // @ts-ignore\n            if (action.error) {\n                state.status =  STATUS.ERROR\n                // @ts-ignore\n                state.errorMessage = action.error\n            }\n            state.ammTrades = {...action.payload.ammTrades};\n            state.status = STATUS.DONE\n        },\n        statusUnset: state => {\n            state.status = STATUS.UNSET\n        }\n    },\n});\nexport { ammTradesSlice };\nexport const { getAmmTrades, getAmmTradesStatus, statusUnset } = ammTradesSlice.actions\n","import { all, takeLatest, call, put } from \"redux-saga/effects\"\nimport { getAmmActivityMap, getAmmActivityMapStatus } from './reducer'\nimport { coinMap, CoinType } from '@loopring-web/component-lib/static'\nimport { AmmActivity, CoinInfo } from '@loopring-web/component-lib/src/static-resource'\nimport { useState } from \"react\"\nimport { useGetTradingInfo } from \"stores/trading/hook\"\n\n/*\nconst useGetAmmActivityMap = ()=>new Promise((resolve)=>{\n    const data:AmmActivity<any> = {\n        // @ts-ignore\n        'AMM-ETH-LRC': {\n            totalRewards: 241232132,\n            myRewards: 1232.123,\n            rewardToken: coinMap.ETH as CoinInfo<CoinType>,\n            duration: {\n                from: new Date('2021-1-1'),\n                to: new Date()\n            },\n        }, 'AMM-USDT-USDC': {\n            totalRewards: 241232132,\n            myRewards: 1232.123,\n            rewardToken: coinMap.ETH as CoinInfo<CoinType>,\n            duration: {\n                from: new Date('2021-1-1'),\n                to: new Date()\n            },\n        }, 'AMM-USDT-LRC': {\n            totalRewards: 241232132,\n            myRewards: 1232.123,\n            rewardToken: coinMap.ETH as CoinInfo<CoinType>,\n            duration: {\n                from: new Date('2021-1-1'),\n                to: new Date()\n            },\n        }, 'AMM-USDT-ETH': {\n            totalRewards: 241232132,\n            myRewards: 1232.123,\n            rewardToken: coinMap.ETH as CoinInfo<CoinType>,\n            duration: {\n                from: new Date('2021-1-1'),\n                to: new Date()\n            },\n        }\n    }\n    resolve({data});\n});\n*/\nconst getAmmActivityMapApi = async () => {\n    const data:AmmActivity<any> = {\n        // @ts-ignore\n        'AMM-LRC-ETH': {\n            totalRewards: 241232132,\n            myRewards: 1232.123,\n            rewardToken: coinMap.ETH as CoinInfo<CoinType>,\n            duration: {\n                from: new Date('2021-1-1'),\n                to: new Date()\n            },\n        }, 'AMM-ETH-USDC': {\n            totalRewards: 241232132,\n            myRewards: 1232.123,\n            rewardToken: coinMap.ETH as CoinInfo<CoinType>,\n            duration: {\n                from: new Date('2021-1-1'),\n                to: new Date()\n            },\n        }, 'AMM-ETH-USDT': {\n            totalRewards: 241232132,\n            myRewards: 1232.123,\n            rewardToken: coinMap.ETH as CoinInfo<CoinType>,\n            duration: {\n                from: new Date('2021-1-1'),\n                to: new Date()\n            },\n        }, 'AMM-LRC-USDT': {\n            totalRewards: 241232132,\n            myRewards: 1232.123,\n            rewardToken: coinMap.ETH as CoinInfo<CoinType>,\n            duration: {\n                from: new Date('2021-1-1'),\n                to: new Date()\n            },\n        }\n    }\n    return  Promise.resolve({data})\n}\n\nexport function* getPostsSaga() {\n    try {\n        //\n        const { data } = yield call(getAmmActivityMapApi);\n        yield put(getAmmActivityMapStatus({ammActivityMap:data}));\n    } catch (err) {\n        yield put(getAmmActivityMapStatus(err));\n    }\n}\n\nexport default function* ammActivityMapSaga() {\n    yield all([takeLatest(getAmmActivityMap, getPostsSaga)]);\n}\n","import { all, call, fork, put, takeLatest } from \"redux-saga/effects\";\nimport { getAmmMap, GetAmmMapParams, getAmmMapStatus, updateRealTimeAmmMap } from './reducer';\nimport { AmmDetail, PairKey } from '@loopring-web/component-lib/src/static-resource';\nimport store from '../../index';\nimport { AmmPoolInfoV3, AmmPoolStat, } from \"loopring-sdk\";\nimport { ammpoolAPI } from \"stores/apis/api\";\nimport { PayloadAction } from '@reduxjs/toolkit';\nimport { AmmDetailStore } from './interface';\n\ntype AmmMap<R extends {[key:string]:any}> ={ [key:string]: AmmDetail<R>} | {}  //key is AMM-XXX-XXX\nexport const setAmmState = ({ammPoolState}: { ammPoolState: AmmPoolStat }) => {\n    const {forex} = store.getState().system;\n    return {\n        amountDollar: parseFloat(ammPoolState.liquidityUSD),\n        amountYuan: (parseFloat(ammPoolState.liquidityUSD )/(forex?forex:6.5)),\n        totalLPToken: parseFloat(ammPoolState.lpLiquidity),\n        totalA: parseInt(ammPoolState.liquidity[ 0 ]),\n        totalB: parseInt(ammPoolState.liquidity[ 1 ]),\n        rewardValue: ammPoolState.rewards[ 1 ],\n        rewardToken: ammPoolState.rewards[ 0 ],\n        feeA: parseInt(ammPoolState.fees[ 0 ]),\n        feeB: parseInt(ammPoolState.fees[ 1 ]),\n        tradeFloat: {\n            percent: '',\n            timeUnit: '24h',\n            // priceYuan: 100,\n            // priceDollar: 1.23123,\n            // floatTag: FloatTag.increase,\n            // reward: 12312,\n            APY: (parseInt(ammPoolState.apyBips) * 1.0 / 100)\n        },\n        apy: (parseInt(ammPoolState.apyBips) * 1.0 / 100)\n    }\n\n}\nconst getAmmMapApi = async <R extends {[key:string]:any}>({ammpools}:GetAmmMapParams) => {\n\n    let ammMap: AmmMap<R> = {}\n    const {ammPoolStats} = (await ammpoolAPI().getAmmPoolStats());\n\n    let {__timer__} = store.getState().amm.ammMap\n    __timer__ = (() => {\n        if (__timer__ && __timer__ !== -1) {\n            clearInterval(__timer__)\n        }\n        return setInterval(async () => {\n            let ammPoolStats: { [key in keyof R]: AmmPoolStat } = (await ammpoolAPI().getAmmPoolStats()).ammPoolStats as { [key in keyof R]: AmmPoolStat }\n            store.dispatch(updateRealTimeAmmMap({ammPoolStats}))\n        }, 900000)    //15*60*1000 //900000\n    })()\n    const {tokenMap: {coinMap, idIndex}} = store.getState();\n\n    // const forex = faitPrices.prices['USDC']\n\n\n    Reflect.ownKeys(ammpools).forEach(async (key) => {\n        const item: AmmPoolInfoV3 = ammpools[ key as string ]\n        if (item.market === key && item.tokens.pooled && idIndex) {\n\n            // const tokenA =  ; //getTokenInfoById(tokens.tokenIdMap, parseInt(item.tokens.pooled[0]))\n            // const tokenB =  ; // getTokenInfoById(tokens.tokenIdMap, parseInt(item.tokens.pooled[1]))\n\n            const dataItem: AmmDetailStore<R> = {\n                coinA: idIndex[ item.tokens.pooled[ 0 ] as any ] ,\n                coinB: idIndex[ item.tokens.pooled[ 1 ] as any ],\n                feeDollar: 100,  //TODO coinA price * feeA + price * feeB\n                feeYuan: 100, //TODO coinA price * feeA + price * feeB  /forex\n                isNew: Date.now() - (Number(item.createdAt)) > 14 * 86400 * 1000 ? false : true,//14*24*60*60*1000,\n                isActivity: item.status === 7 ? true : false,\n                address: item.address,\n                ...setAmmState({ammPoolState: ammPoolStats[ key ]})\n            } as AmmDetailStore<R>\n            // @ts-ignore\n            ammMap[item.market] = dataItem\n\n\n          \n\n        }\n\n\n    })\n    return {ammMap, __timer__}\n}\n\n\nexport function* getPostsSaga({payload}:PayloadAction<GetAmmMapParams>) {\n    try {\n        const {ammpools} =  payload;\n        const {ammMap, __timer__} = yield call(getAmmMapApi,{ammpools});\n        console.log('--- getPostsSaga:', ammMap)\n        yield put(getAmmMapStatus({ammMap, __timer__}));\n    } catch (err) {\n        yield put(getAmmMapStatus(err));\n    }\n}\n\nexport function* updateRealTimeSaga({payload}: any) {\n    try {\n        const {ammPoolStats} = payload;\n        let {ammMap}:{ammMap:AmmMap<object>} = store.getState().amm.ammMap;\n        if (ammPoolStats) {\n            //{ ammPoolStats?: { [ key: string ]: AmmPoolStat } }\n            Reflect.ownKeys(ammPoolStats).map((key) => {\n                // @ts-ignore\n                ammMap[ key ] = {\n                    // @ts-ignore\n                    ...ammMap[ key ],\n                    ...setAmmState({ammPoolState: ammPoolStats[ key as string ]})\n                }\n                return  ammMap\n            })\n        }\n        yield put(getAmmMapStatus({ammMap}));\n    } catch (err) {\n        yield put(getAmmMapStatus(err));\n    }\n}\n\n\nexport function* ammMapInitSaga() {\n    yield all([takeLatest(getAmmMap, getPostsSaga)]);\n}\n\nexport function* ammMapRealTimeSaga() {\n    yield all([takeLatest(updateRealTimeAmmMap, updateRealTimeSaga)]);\n}\n\nexport const ammMapSaga = [\n    fork(ammMapInitSaga),\n    fork(ammMapRealTimeSaga),\n]\n\n","import { all, takeLatest, call, put } from \"redux-saga/effects\";\nimport { getAmmRecord, getAmmRecordStatus } from './reducer';\n\nconst getAmmRecordApi= ()=>new Promise((resolve)=>{ resolve({data:[\n        {side: 'Buy',\n            amount: {\n                sell:{ belong:'ETH', tradeValue: 0.1 },\n                buy:{ belong:'LRC', tradeValue: 123 }\n            },\n            time: Date.now(),\n            fee: 0.02,\n            amountLP:{\n                sell:{ belong:'ETH', tradeValue: 0.1 },\n                buy:{ belong:'LRC', tradeValue: 123 }\n            }\n        },{side: 'Buy',\n            amount: {\n                sell:{ belong:'ETH', tradeValue: 0.1 },\n                buy:{ belong:'LRC', tradeValue: 123 }\n            },\n            time: Date.now(),\n            fee: 0.02,\n            amountLP:{\n                sell:{ belong:'ETH', tradeValue: 0.1 },\n                buy:{ belong:'LRC', tradeValue: 123 }\n            }\n        }\n    ]})});\nexport function* getPostsSaga() {\n    try {\n        //\n        const { data } = yield call(getAmmRecordApi);\n        yield put(getAmmRecordStatus({ammRecords: data}));\n    } catch (err) {\n        yield put(getAmmRecordStatus(err));\n    }\n}\n\nexport default function* ammRecordSaga() {\n    yield all([takeLatest(getAmmRecord, getPostsSaga)]);\n}\n\n\n\n\n","import { all, takeLatest, call, put } from \"redux-saga/effects\";\nimport { getAmmTrades, getAmmTradesStatus } from './reducer';\n\nconst getAmmTradesApi = ()=>new Promise((resolve)=>{\n    //TODO: check is connect and active and assign wallet\n    //TODO: if not reject directory, any error happen will clean the\n    resolve([\n    {side: 'Buy',\n        amount: {\n            sell:{ belong:'ETH', tradeValue: 0.1 },\n            buy:{ belong:'LRC', tradeValue: 123 }\n        },\n        time: Date.now(),\n        fee: 0.02,\n        priceValue: 0.123,\n        priceToken: 'LRC'}\n    ,{side: 'Buy',\n        amount: {\n            sell:{ belong:'ETH', tradeValue: 0.1 },\n            buy:{ belong:'LRC', tradeValue: 123 }\n        },\n        time: Date.now(),\n        fee: 0.02,\n        priceValue: 0.123,\n        priceToken: 'LRC'}\n])});\nexport function* getPostsSaga() {\n    try {\n        //\n        const { data } = yield call(getAmmTradesApi);\n        const posts = data;\n        yield put(getAmmTradesStatus(posts));\n    } catch (err) {\n        yield put(getAmmTradesStatus(err));\n    }\n}\n\nexport default function* ammTradesSaga() {\n    yield all([takeLatest(getAmmTrades, getPostsSaga)]);\n}\n","import { combineReducers } from '@reduxjs/toolkit';\nimport { ammRecordSlice } from './AmmRecord';\nimport { ammTradesSlice, getAmmTrades } from './AmmTrades';\nimport { ammMapSlice } from './AmmMap';\nimport { ammActivityMapSlice } from './AmmActivityMap';\nimport ammActivityMapSaga from './AmmActivityMap/saga';\nimport { ammMapSaga } from './AmmMap/saga';\nimport ammRecordSaga from './AmmRecord/saga';\nimport ammTradesSaga from './AmmTrades/saga';\nimport { all, fork } from 'redux-saga/effects';\n// import tokenSaga from '../token/saga';\n// import walletSaga from '../wallet/saga';\n// export * from './AmmRecord';\n// export * from './AmmTrades';\n// export * from './AmmMap';\n// export * from './AmmActivityMap';\n\nexport const  ammReducer = combineReducers({\n    ammRecord: ammRecordSlice.reducer,\n    ammTrades: ammTradesSlice.reducer,\n    ammMap: ammMapSlice.reducer,\n    ammActivityMap:ammActivityMapSlice.reducer\n})\nexport const ammForks =  [\n    fork(ammActivityMapSaga),\n    ...ammMapSaga,\n    fork(ammRecordSaga),\n    fork(ammTradesSaga)\n]\n\n// export * from './interface'\n","import { all, call, fork, put, takeLatest } from \"redux-saga/effects\";\nimport { getTokenMap, getTokenMapStatus } from './reducer';\nimport { getIcon } from '../../utils/swap_calc_utils';\nimport { CoinInfo, CoinMap } from '@loopring-web/component-lib/static-resource';\nimport { AddressMap, GetTokenMapParams, IdMap } from './interface';\nimport { PayloadAction } from '@reduxjs/toolkit';\n\nconst getTokenMapApi = async <R extends { [ key: string ]: any }>({\n                                                                      tokensMap,\n                                                                      pairs,\n                                                                      marketArr,\n                                                                      tokenArr\n                                                                  }: GetTokenMapParams<R>) => {\n    let coinMap: CoinMap<any, CoinInfo<any>> = {};\n    let tokenMap:any = tokensMap;\n    let addressIndex: AddressMap = {};\n    let idIndex: IdMap = {};\n    Reflect.ownKeys(tokensMap).forEach((key) => {\n        if (!(key as string).startsWith('LP-')) {\n            coinMap[ key as string ] = {\n                icon: getIcon(key as string, tokensMap),\n                name: key as string,\n                simpleName: key,\n                description: '',\n                company: '',\n            }\n        }\n\n        if (pairs[ key as string ] && pairs[ key as string ].tokenList) {\n            // @ts-ignore\n            tokensMap[ key ].tradePairs = pairs[ key as string ].tokenList;\n        }\n        addressIndex = {\n            ...addressIndex,\n            // @ts-ignore\n            [ tokensMap[ key ].address ]: key as string\n        }\n        idIndex = {\n            ...idIndex,\n            // @ts-ignore\n            [ tokensMap[ key ].tokenId ]: key as string\n        }\n    })\n    return {data: {coinMap, addressIndex, idIndex, tokenMap, marketArray: marketArr, marketCoins: tokenArr}}\n};\n\nexport function* getPostsSaga<R extends { [ key: string ]: any }>({payload}: PayloadAction<GetTokenMapParams<R>>) {\n    try {\n        const {tokensMap, pairs, marketArr,tokenArr} = payload\n        // @ts-ignore\n        const {data} = yield call(getTokenMapApi, {tokensMap, pairs, marketArr, tokenArr});\n\n        yield put(getTokenMapStatus(data));\n    } catch (err) {\n        yield put(getTokenMapStatus(err));\n    }\n}\n\n\nexport function* tokenInitSaga() {\n    yield all([takeLatest(getTokenMap, getPostsSaga)]);\n}\n\n\nexport const tokenSaga = [\n    fork(tokenInitSaga),\n    // fork(tokenPairsSaga),\n]\n\n// export function* getPairsSaga({payload}:PayloadAction<{tokenPairs: TokenPairs }>) {\n//     try {\n//         const {tokenPairs} = payload;\n//         const tokenPairsMap =  Reflect.ownKeys(tokenPairs).reduce((prev,key)=>{\n//            // @ts-ignore\n//             return prev[key as string] =  tokenPairs[key as string].tokenList\n//         }, {} )\n//\n//         yield put(getTokenMapStatus({tokenPairsMap}));\n//     } catch (err) {\n//         yield put(getAmmMapStatus(err));\n//     }\n// }\n// export function* tokenPairsSaga() {\n//     yield all([takeLatest(getTokenPairMap, getPairsSaga)]);\n// }\n\n\n","import { all, call, fork, put, takeLatest } from \"redux-saga/effects\"\nimport { getTicker, getTickers, getTickerStatus } from './reducer'\nimport {\n    CoinKey,\n    CustomError,\n    ErrorMap,\n    FloatTag,\n    PairKey,\n    TradeFloat\n} from '@loopring-web/component-lib/src/static-resource'\n\n// import { asyncGetTradingInfo, getTradingInfo } from \"stores/trading/hook\"\nimport { TickerData, getTokenInfoById, toBig } from \"loopring-sdk\"\n\n// import { makeCoinInfo } from 'utils/swap_calc_utils'\nimport { exchangeAPI } from \"stores/apis/api\"\n\ntype TickerMap<R extends {[key:string]:any}> = {\n    [key in CoinKey<R>|PairKey<R>]?:TradeFloat & {\n    reward?:number,rewardToken?:string\n    }\n\n}\n\nconst demoTicker = [\n    ['ETH','2.4','24h','1234','3423525222','up'],\n    ['LRC','2.4','24h','1234','3423525222','up'],\n    ['DPR','2.4','24h','1234','3423525222','up'],\n    ['USDC','2.4','24h','1234','3423525222'],\n    ['USDT','2.4','24h','1234','3423525222','down'],\n    ['AMM-LRC-ETH','2.4','24h','1234','3423525222','up','23','1231','LRC'],\n    ['AMM-USDT-USDC','2.4','24h','1234','3423525222','up','23','1231','USDT'],\n    ['AMM-USDT-LRC','2.4','24h','1234','3423525222','up','23','1231'],\n    ['AMM-USDT-ETH','2.4','24h','1234','3423525222','up','23','1331'],\n    ['AMM-ETH-USDC','2.4','24h','1234','3423525222','up','12','233'],\n    ['AMM-ETH-USDT','2.4','24h','1234','3423525222','up','56','233'],\n\n]\n/*\nconst getTickersApi = async <R extends {[key:string]:any}>(list:Array<keyof R>)=>new Promise((resolve,reject)=>{\n\n    if(list.length>0){\n        const data:TickerMap<R> = {}; //= // {\n        list.map((tokenKey: keyof R) => {\n                const index = demoTicker.findIndex((item) => {\n                  return  item[ 0 ] === tokenKey\n                })\n                if (index > -1) {\n                    const ticker = demoTicker[index]\n                    data[tokenKey] = {\n                        percent: ticker[1],\n                        timeUnit: ticker[2].toString(),\n                        priceDollar: Number(ticker[3]),\n                        priceYuan:  Number(ticker[3]) * 6.3, //TODO get usdt to rmb price\n                        volume: Number(ticker[4]),\n                        floatTag: ticker[5].toString() === 'up'? FloatTag.increase:ticker[5].toString() === 'down'?FloatTag.decrease:FloatTag.none ,\n                        APY: 0,\n                        reward: ticker[7] ?  Number(ticker[7]) :undefined,\n                        rewardToken: ticker[8] ?  Number(ticker[8]) :undefined,\n                    } as TradeFloat\n                } else {\n                    throw new CustomError({...ErrorMap.GET_X_TOKEN_TICKER_ERROR, options: {token: tokenKey}});\n                    //reject(ErrorMap.GET_X_TOKEN_TICKER_ERROR)\n                }\n        })\n        resolve({data});\n    }else{\n       reject(ErrorMap.NO_TOKEN_KEY_LIST)\n    }\n\n});\n*/\nconst getTickersApi = async <R extends {[key:string]:any}>(list:Array<keyof R>)=> {\n\n    const data:TickerMap<R> = {}\n\n    const tickers = await exchangeAPI().getTicker({market: list.join(',')})\n\n    console.log('>>>tickMap:', tickers.tickMap)\n\n    //@ts-ignore\n    tickers.tickMap.forEach((item: TickerData, key: keyof R) => {\n        console.log('>>>base_token_volume:', item.base_token_volume)\n        data[key] = {\n            timeUnit: '24h',\n            priceDollar: 0,\n            priceYuan:  0,\n            volume: toBig(item.base_token_volume).toNumber(),\n            floatTag: item.close > item.open ? 'increase' : 'decrease' ,\n            APY: 0,\n            reward: 0,\n            rewardToken: '',\n        } as TradeFloat\n    })\n\n    return { data }\n}\n\nexport function* getPostsSaga({payload}:any) {\n    try {\n        // @ts-ignore\n        const { tickerKey,tickerKeys } = payload;\n        console.log('getPostsSaga tickerKey',tickerKey, tickerKeys)\n        if(tickerKey || (tickerKeys && tickerKeys.length)) {\n            const {data}  = yield call(getTickersApi,tickerKey?[tickerKey]:tickerKeys);\n            yield put(getTickerStatus({tickerMap:data}));\n\n        }else{\n            throw new CustomError(ErrorMap.NO_TOKEN_KEY_LIST);\n        }\n    } catch (err) {\n        yield put(getTickerStatus(err));\n    }\n}\n\nfunction* tickerSaga() {\n    yield all([takeLatest(getTicker, getPostsSaga)]);\n}\nfunction* tickersSaga() {\n    yield all([takeLatest(getTickers, getPostsSaga)]);\n}\n\nexport const tickerForks = [\n    fork(tickerSaga),\n    fork(tickersSaga),\n]\n ","import { all, call, fork, put, take, takeLatest } from \"redux-saga/effects\"\nimport { updateSystem, getSystemStatus, updateRealTimeObj } from './reducer'\nimport { ENV, NETWORKEXTEND } from \"./interface\"\nimport store from '../index';\nimport { reset } from '../account/reducer';\nimport { ChainId } from 'loopring-sdk';\nimport { ammpoolAPI, exchangeAPI, LoopringAPI } from '../apis/api';\nimport { getAmmMap, updateRealTimeAmmMap } from '../Amm/AmmMap';\nimport { getTokenMap } from '../token';\nimport { CustomError, ErrorMap } from '@loopring-web/component-lib/src/static-resource';\n\n\nconst initConfig  = function* <R extends {[key:string]:any}>() {\n    store.dispatch(reset(undefined));\n    // const exchangeApi = exchangeAPI();\n    // const ammpoolApi = ammpoolAPI();\n    // if (LoopringAPI.exchangeAPI && LoopringAPI.ammpoolAPI ) {\n        const {tokenSymbolMap: tokensMap} = yield call(async ()=> await LoopringAPI.exchangeAPI?.getTokens())\n        const {ammpools} = yield call(async ()=>await LoopringAPI.ammpoolAPI?.getAmmPoolConf());\n        const {pairs,marketArr,tokenArr}  = yield call(async ()=> LoopringAPI.exchangeAPI?.getMixMarkets());\n        store.dispatch(getTokenMap({tokensMap,pairs,marketArr,tokenArr}))\n        yield take('tokenMap/getTokenMapStatus');\n        store.dispatch(getAmmMap({ammpools}))\n        if(store.getState().tokenMap.status === 'ERROR'){\n\n        }\n    // }\n\n    // yield take('tokenMap/getTokenMapStatus');\n\n}\n\nconst getSystemsApi = async <R extends {[key:string]:any}>(chainId:any)=> {\n    //TODO get some other reuqired id...... put into system\n    // const { chainId } = system\n    const env =  window.location.hostname === 'localhost'? ENV.DEV :ChainId.GORLI === chainId ?  ENV.UAT : ENV.PROD\n    chainId = ChainId.GORLI === chainId ? ChainId.GORLI: ChainId.MAINNET === chainId ?  ChainId.MAINNET: NETWORKEXTEND.NONETWORK\n    if(chainId === NETWORKEXTEND.NONETWORK){\n       throw new CustomError(ErrorMap.NO_NETWORK_ERROR)\n    }else {\n        LoopringAPI.InitApi(chainId as ChainId);\n        if (LoopringAPI.exchangeAPI) {\n            const faitPrices = (await LoopringAPI.exchangeAPI.getFiatPrice({legal: 'CNY'})).fiatPrices\n            const gasPrice = (await exchangeAPI().getGasPrice()).gasPrice / 1e+9\n            const baseURL = ChainId.MAINNET === chainId ? 'https://api3.loopring.io' : 'https://uat2.loopring.io'\n            const forex = faitPrices[ 'USDT' ]\n            let {__timer__} = store.getState().system;\n            __timer__ = ((__timer__) => {\n                if (__timer__ && __timer__ !== -1) {\n                    clearInterval(__timer__);\n                }\n                return setInterval(async () => {\n                    const faitPrices = (await exchangeAPI().getFiatPrice({legal: 'CNY'})).fiatPrices\n                    const gasPrice = (await exchangeAPI().getGasPrice()).gasPrice / 1e+9\n                    const forex = faitPrices[ 'USDT' ]\n                    store.dispatch(updateRealTimeAmmMap(undefined))\n                    store.dispatch(updateRealTimeObj({faitPrices, gasPrice, forex}))\n                }, 300000)   //\n\n            })(__timer__);\n            return {chainId, env, baseURL, faitPrices, gasPrice, forex, __timer__}\n        }\n    }\n}\n\nexport function* getUpdateSystem({payload}:any) {\n    try {\n        // @ts-ignore\n        const { chainId } = payload;\n        const { env, baseURL, faitPrices, gasPrice, forex , __timer__ } = yield call(getSystemsApi, chainId);\n\n        yield put(getSystemStatus({   env, baseURL, faitPrices, gasPrice, forex , __timer__ }));\n        yield call(initConfig)\n        //TODO check wallect store\n    } catch (err) {\n        yield put(getSystemStatus(err));\n    }\n}\n\nfunction* systemSaga() {\n    yield all([takeLatest(updateSystem, getUpdateSystem)]);\n}\nfunction* initConfigSaga(){\n    //yield all([takeLatest(initConfig, getUpdateSystem)]);\n}\n\n\nexport const systemForks = [\n    fork(systemSaga),\n //   fork(initConfig),\n]\n","import { all, call, fork, put, takeLatest } from \"redux-saga/effects\";\nimport {  getWalletLayer1Status, updateWalletLayer1 } from './reducer';\nimport { CoinKey, PairKey, WalletCoin } from '@loopring-web/component-lib/src/static-resource';\nimport { exchangeAPI } from '../apis/api';\nimport store from '../index';\nimport { fromWEI } from '../../utils/swap_calc_utils';\n\ntype WalletLayer1Map<R extends {[key:string]:any}> = {\n    [key in CoinKey<R>|PairKey<R>]?:WalletCoin<R>\n}\n\nconst getWalletLayer1Balance = async <R extends {[key:string]:any}>()=> {\n    //TODO: check is connect and active and assign walletLayer1\n    //TODO: if not reject directory, any error happen will clean the\n    // await sdk\n    const exchangeApi = exchangeAPI();\n    const {accAddr,accountId} = store.getState().account;\n    const {tokenMap,marketCoins} = store.getState().tokenMap;\n    // @ts-ignore\n    const {tokenBalances} =  await exchangeApi.getTokenBalances({owner:accAddr,token: marketCoins.join()},tokenMap)\n    let walletLayer1;\n\n    if(tokenBalances) {\n        walletLayer1 = Reflect.ownKeys(tokenBalances).reduce((prev,item)=>{\n            return   {...prev, [ item ]:{\n                    belong: item,\n                    count: fromWEI(tokenMap, item, tokenBalances[item as string]),\n                }\n            }\n        },{} as WalletLayer1Map<R>)\n    }\n    return {walletLayer1}\n};\n\nexport function* getPostsSaga() {\n    try {\n        //\n        const {walletLayer1} = yield call(getWalletLayer1Balance);\n        yield put(getWalletLayer1Status({walletLayer1}));\n    } catch (err) {\n        yield put(getWalletLayer1Status(err));\n    }\n}\n\nexport function* walletLayer1Saga() {\n    yield all([takeLatest(updateWalletLayer1, getPostsSaga)]);\n}\n\nexport const walletLayer1Fork = [\n    fork(walletLayer1Saga),\n    // fork(tokenPairsSaga),\n]\n\n","import { all, call, fork, put, takeLatest } from \"redux-saga/effects\";\nimport { getWalletLayer2Status, updateWalletLayer2 } from './reducer';\nimport { CoinKey, PairKey, WalletCoin } from '@loopring-web/component-lib/src/static-resource';\nimport {  userAPI } from '../apis/api';\nimport store from '../index';\n\ntype WalletLayer2Map<R extends {[key:string]:any}> = {\n    [key in CoinKey<R>|PairKey<R>]?:WalletCoin<R>\n}\n\nconst getWalletLayer2Balance = async <R extends {[key:string]:any}>()=> {\n    //TODO: check is connect and active and assign walletLayer1\n    //TODO: if not reject directory, any error happen will clean the\n    // await sdk\n    // const exchangeApi = exchangeAPI();\n    const userApi = userAPI();\n    const {accountId,apiKey} = store.getState().account;\n    const {tokenMap,idIndex,marketCoins} = store.getState().tokenMap;\n    let walletLayer2;\n    if(apiKey && accountId){\n        // @ts-ignore\n        const {userBalances} =  await userApi.getUserBalances({accountId:accountId,tokens:''},apiKey)\n        if(userBalances) {\n            // tokenId: number;\n            // total: string;\n            // locked: string;\n            // pending: {\n            //     withdraw: string;\n            //     deposit: string;\n            // };\n            walletLayer2 = Reflect.ownKeys(userBalances).reduce((prev,item)=>{\n                // @ts-ignore\n                return   {...prev, [ idIndex[item] ]:userBalances[Number(item)]}\n            },{} as WalletLayer2Map<R>)\n        }\n    }\n\n    return {walletLayer2}\n};\nexport function* getPostsSaga() {\n    try {\n        //\n        const {walletLayer2} = yield call(getWalletLayer2Balance);\n        yield put(getWalletLayer2Status({walletLayer2}));\n    } catch (err) {\n        yield put(getWalletLayer2Status(err));\n    }\n}\n\nexport function* walletLayer2Saga() {\n    yield all([takeLatest(updateWalletLayer2, getPostsSaga)]);\n}\n\n\nexport const walletLayer2Fork = [\n    fork(walletLayer2Saga),\n    // fork(tokenPairsSaga),\n]\n\n","import { all, put, fork, select, takeEvery } from \"redux-saga/effects\"\n// import machine from \"../state_machine/fsm/machine\"\n// import { TRANSITION } from \"../state_machine/fsm/actionTypes\"\n// import { helloSaga } from \"./sagas\"\nimport { tokenSaga } from './token/saga';\nimport { ammForks } from './Amm';\nimport { tickerForks } from './ticker/saga';\nimport { systemForks } from './system/saga';\nimport { walletLayer1Fork } from './walletLayer1/saga';\nimport { walletLayer2Fork } from './walletLayer2/saga';\n\n\n// https://css-tricks.com/finite-state-machines-with-react/\n// https://musing-rosalind-2ce8e7.netlify.com/?machine=%7B%22initial%22%3A%22initial%22%2C%22states%22%3A%7B%22initial%22%3A%7B%22on%22%3A%7B%22LOGIN%22%3A%22loggedIn%22%2C%22LOGOUT%22%3A%22loggedOut%22%7D%7D%2C%22loggedOut%22%3A%7B%22on%22%3A%7B%22SUBMIT%22%3A%22loading%22%7D%7D%2C%22loading%22%3A%7B%22on%22%3A%7B%22SUCCESS%22%3A%22loggedIn%22%2C%22FAIL%22%3A%22loggedOut%22%7D%7D%2C%22loggedIn%22%3A%7B%22onEntry%22%3A%5B%22SET_TOKEN%22%5D%2C%22onExit%22%3A%5B%22CLEAR_TOKEN%22%5D%2C%22on%22%3A%7B%22LOGOUT%22%3A%22loggedOut%22%7D%7D%7D%7D\n\n// function* machineHandler(event: any, action: any) {\n//\n//   // @ts-ignore\n//   const currentAppState = yield select((state) => { state.account.status })\n//   const nextAppState = machine.transition(currentAppState, event)\n//\n//   yield put({\n//     type: \"APP_STATE/\" + nextAppState.value,\n//     payload: {\n//       value: nextAppState.value\n//     }\n//   });\n//\n//   console.debug(\"-> from \" + currentAppState + \" to \" + nextAppState);\n//\n//   for (let i = 0; i < nextAppState.actions.length; i++) {\n//     yield put({\n//       type: nextAppState.actions[i],\n//       payload: action\n//     });\n//   }\n// }\n\n// function* watchTransition() {\n//   yield takeEvery(TRANSITION, function*(action: any) {\n//     yield machineHandler(action.event, action.payload);\n//   });\n// }\n\nfunction* mySaga() {\n  yield all([\n    // fork(helloSaga),\n    // fork(watchTransition),\n    ...tokenSaga,\n    ...walletLayer1Fork,\n    ...walletLayer2Fork,\n    ...systemForks,\n    ...ammForks,\n    ...tickerForks\n\n  ]);\n}\n\nexport default mySaga;\n","import { createSlice, PayloadAction, Slice } from '@reduxjs/toolkit'\nimport { STATUS } from '../constant';\nimport { StateBase } from '../interface';\nimport { SystemStatus } from '../system';\n\nconst initialState: StateBase & {socket: { [ key: string]:string }} = {\n  socket: {},\n  status: 'UNSET',\n  errorMessage: null,\n}\nconst socketSlice: Slice<StateBase & {socket: { [ key: string]:string }}> = createSlice({\n  name: 'socket',\n  initialState,\n  reducers: {\n    socketStart(state, action: PayloadAction<{socket: { [ key: string]:string }}>) {\n      state.status = STATUS.PENDING\n      state.socket =    action.payload.socket\n    },\n    getSystemStatus(state, action: PayloadAction<{socket: { [ key: string]:string }}>) {\n\n      // @ts-ignore\n      if (action.error) {\n        state.status = STATUS.ERROR\n        // @ts-ignore\n        state.errorMessage = action.error\n      }\n      // state.socket = action.payload.socket\n      state.status = STATUS.DONE\n    },\n\n    statusUnset: state => {\n      state.status = STATUS.UNSET\n    }\n\n  },\n});\nexport { socketSlice };\nexport const {socketStart, getSocketStatus , statusUnset} = socketSlice.actions;\n","import { configureStore, combineReducers, getDefaultMiddleware } from '@reduxjs/toolkit'\n\nimport { useDispatch } from 'react-redux'\nimport { save, load } from 'redux-localstorage-simple'\n\nimport createSagaMiddleware from 'redux-saga'\n\n// We'll use redux-logger just as an example of adding another middleware\nimport logger from 'redux-logger'\n\n// And use redux-batch as an example of adding enhancers\nimport { reduxBatch } from '@manaflair/redux-batch'\nimport { updateVersion } from './global/actions'\n\nimport accountSlice from './account/reducer'\nimport tradingSlice from './trading/reducer'\nimport transactionlice from './transactions/reducer'\n\n\nimport { modalsSlice, setLanguage, settingsSlice } from '@loopring-web/component-lib';\nimport { ammReducer } from './Amm';\nimport { tokenMapSlice } from './token';\nimport mySaga from './rootSaga';\nimport { tickerMapSlice } from './ticker';\nimport { systemSlice } from './system';\nimport { walletLayer1Slice } from './walletLayer1';\nimport { walletLayer2Slice } from './walletLayer2';\nimport { socketSlice } from './socket';\n\nconst sagaMiddleware = createSagaMiddleware()\n\nconst reducer = combineReducers({\n  account: accountSlice.reducer,\n  socket: socketSlice.reducer,\n  settings: settingsSlice.reducer,\n  system: systemSlice.reducer,\n  trading: tradingSlice.reducer,\n  transactions: transactionlice.reducer,\n  modals: modalsSlice.reducer,\n  amm:ammReducer,\n  tokenMap: tokenMapSlice.reducer,\n  walletLayer2: walletLayer2Slice.reducer,\n  walletLayer1: walletLayer1Slice.reducer,\n  tickerMap: tickerMapSlice.reducer\n})\n\n//\n\nconst PERSISTED_KEYS: string[] = ['settings']\n\nconst store = configureStore({\n  reducer,\n  // middleware: (getDefaultMiddleware) => getDefaultMiddleware().concat(logger),\n  middleware: [...getDefaultMiddleware({ thunk: false,serializableCheck:false, }), save({ states: PERSISTED_KEYS }), sagaMiddleware, ],\n  // middleware: [...getDefaultMiddleware({ thunk: true }), ],\n  devTools: process.env.NODE_ENV !== 'production',\n  enhancers: [reduxBatch],\n  preloadedState: load({ states: PERSISTED_KEYS })\n})\nstore.dispatch(updateVersion())\nstore.dispatch(setLanguage(store.getState().settings.language))\n// @ts-ignore\nsagaMiddleware.run(mySaga, store.dispatch);\n\n// The store has been created with these options:\n// - The slice reducers were automatically passed to combineReducers()\n// - redux-thunk and redux-logger were added as middleware\n// - The Redux DevTools Extension is disabled for production\n// - The middleware, batch, and devtools enhancers were composed together\n\nexport type AppDispatch = typeof store.dispatch\nexport const useAppDispatch = () => useDispatch<AppDispatch>()\n\nexport type RootState = ReturnType<typeof reducer>\n\nexport default store\n","import { useDeepCompareEffect } from \"react-use\"\n\nexport function useCustomDCEffect(action: any, deps: any[] | undefined | null) {\n    useDeepCompareEffect(action, [deps || {}])\n}\n","import { AmmpoolAPI, ChainId, ExchangeAPI, UserAPI, WsAPI } from \"loopring-sdk\"\nimport { getChainId } from 'stores/trading/hook'\n\nexport const userAPI = () => {\n    const userApi = new UserAPI(getChainId() as ChainId)\n    return userApi\n}\n\nexport const exchangeAPI = () => {\n    const exchangeApi = new ExchangeAPI(getChainId() as ChainId)\n    return exchangeApi\n}\n\nexport const ammpoolAPI = () => {\n    const ammpoolApi = new AmmpoolAPI(getChainId() as ChainId)\n    return  ammpoolApi\n}\n\nexport const wsAPI = () => {\n    const wsApi = new WsAPI(getChainId() as ChainId)\n    return wsApi\n}\n\nexport class LoopringAPI {\n    \n    public static userApi: UserAPI | undefined = undefined\n    public static exchangeAPI: ExchangeAPI | undefined = undefined\n    public static ammpoolAPI: AmmpoolAPI | undefined = undefined\n    public static wsAPI: WsAPI | undefined = undefined\n\n    public static InitApi = (chainId: ChainId) => {\n        LoopringAPI.userApi = new UserAPI(chainId) \n        LoopringAPI.exchangeAPI = new ExchangeAPI(chainId) \n        LoopringAPI.ammpoolAPI = new AmmpoolAPI(chainId) \n        LoopringAPI.wsAPI = new WsAPI(chainId) \n    }\n\n}\n","import React  from 'react';\nimport detectEthereumProvider from '@metamask/detect-provider';\nimport { useCustomDCEffect } from 'hooks/common/useCustomDCEffect';\nimport { useSystem } from './stores/system';\nimport { ChainId } from 'loopring-sdk';\nimport { useAmmMap } from './stores/Amm/AmmMap';\nimport { STATUS } from './stores/constant';\nimport { useTokenMap } from './stores/token';\n\n/**\n * @description call it when bootstrap the page or change the network\n */\nexport function useInit(){\n    const [state,setState] = React.useState<keyof typeof STATUS>('PENDING')\n    const systemState = useSystem();\n    const tokenState = useTokenMap();\n    const ammMapState = useAmmMap();\n\n    useCustomDCEffect(async() => {\n\n        const handleChainChanged = (chainId: any) => {\n    \n            // const network = chainId == ChainId.GORLI ? NETWORK.Goerli : NETWORK.MAIN\n             console.log('handleChainChanged chainId: ', chainId)\n             systemState.updateSystem({ chainId })\n             window.location.reload();\n        }\n\n        const provider: any = await detectEthereumProvider()\n        if (provider) {\n            const chainId = Number(await provider.request({ method: 'eth_chainId' }))\n    \n            provider.on('chainChanged', ()=>{handleChainChanged(chainId)} )\n            // @ts-ignore\n            systemState.updateSystem({ chainId  })\n           //handleChainChanged(chainId)\n            \n        } else {\n            systemState.updateSystem({chainId:ChainId.MAINNET})\n            console.log('web3 is not found')\n        }\n\n    }, [])\n\n    React.useEffect(() => {\n        switch (systemState.status) {\n            case \"ERROR\":\n                systemState.statusUnset();\n                setState('ERROR')\n                //TODO show error at button page show error  some retry dispat again\n                break;\n            case \"DONE\":\n                systemState.statusUnset();\n                //TODO do some static information update\n                //tokenState.updateTokenMap();\n                break;\n            default:\n                break;\n\n        }\n    },[\n        systemState,\n        // systemState.status,\n        // systemState.statusUnset,\n        //tokenState.updateTokenMap\n    ]);\n    React.useEffect(() => {\n        if(ammMapState.status ===\"ERROR\" || tokenState.status === \"ERROR\"){\n            //TODO: solve error\n            ammMapState.statusUnset();\n            tokenState.statusUnset();\n            setState('ERROR');\n        }else if(ammMapState.status ===\"DONE\" && tokenState.status === \"DONE\"){\n            ammMapState.statusUnset();\n            tokenState.statusUnset()\n            setState('DONE');\n        }\n    },[ammMapState,tokenState])\n\n    return {\n        state,\n    }\n\n}\n","export enum Theme {\n    dark = 'dark',\n    light = 'light',\n}\n\nexport enum LangType {\n    en = 'en_US',\n    cn = 'zh_CN',\n}\n\nexport enum SystemStatus {\n    NORMAL,\n    ERROR,\n    UNKNOWN,\n}\n\nexport enum MODAL_TYPE {\n    UNKNOWN,\n    LOADING,\n    WALLET,\n}\n\nexport const REFRESH_RATE = 1000\n\nexport const REFRESH_RATE_SLOW = 15000\n","import { useCallback } from \"react\";\nimport { useDispatch } from \"react-redux\"\n\nimport {\n    setShowDeposit,\n    setShowResetAccount,\n    setShowTransfer,\n    setShowWithdraw,\n} from '@loopring-web/component-lib'\nimport { useTranslation } from \"react-i18next\";\nimport store from 'stores'\nimport { AccountStatus } from \"state_machine/account_machine_spec\";\n\nexport function useModals() {\n\n    const dispatch = useDispatch()\n\n    const { t } = useTranslation('common')\n\n    const ShowDeposit = useCallback((isShow: boolean)=>{\n        const isNoAccount = store.getState().account.status === AccountStatus.NOACCOUNT\n\n        console.log('isNoAccount: ', isNoAccount, t('depositTitleAndActive'))\n        const action = {\n            isShow,\n            props: {\n                title: isNoAccount ? t('depositTitleAndActive') : t('depositTitle'),\n                description: 'depositAndActiveDescription'\n            }\n        }\n        dispatch(setShowDeposit(action))\n    }, [dispatch, t])\n    const ShowTransfer = useCallback((isShow: boolean)=>dispatch(setShowTransfer({isShow})), [dispatch])\n    const ShowWithdraw = useCallback((isShow: boolean)=>dispatch(setShowWithdraw({isShow})), [dispatch])\n    const ShowResetAccount = useCallback((isShow: boolean)=>dispatch(setShowResetAccount({isShow})), [dispatch])\n\n    return {\n        ShowDeposit,\n        ShowTransfer,\n        ShowWithdraw,\n        ShowResetAccount,\n    }\n}","import { REFRESH_RATE } from \"defs/common_defs\"\n\nexport function PromiseJob(fetchPromise: any, setFunc: any, field?: string, prefix: any = 'PromiseJob') {\n\n    let mounted = true\n\n    const handler = () => {\n        if (fetchPromise()) {\n            fetchPromise().then((data: any) => {\n                if (mounted) {\n                    setFunc(field ? data[field] : data)\n                } else {\n                    console.log(prefix + ' unmounted!')\n                }\n            }).catch((reason: any) => {\n                console.error(reason)\n            })\n        }\n    }\n\n    const cleanUp = () => {\n        mounted = false\n    }\n\n    return {\n        handler,\n        cleanUp,\n    }\n\n}\n\n\nexport function PromiseJobInTimer(fetchPromise: any, setFunc: any, field?: string, prefix: any = 'PromiseJobInTimer', timeout: number = REFRESH_RATE) {\n\n    let mounted = true\n\n    const handler = () => {\n\n        mounted = true\n\n        const fetchFunc = () => {\n            if (fetchPromise()) {\n                fetchPromise().then((data: any) => {\n                    if (mounted) {\n                        setFunc(field ? data[field] : data)\n                    } else {\n                        console.log(prefix + ' unmounted!')\n                    }\n                }).catch((reason: any) => {\n                    console.error(reason)\n                })\n            }\n        }\n\n        fetchFunc()\n\n        const id = setInterval(fetchFunc, timeout)\n\n        return id\n    }\n\n    const cleanUp = (handler: any) => {\n        mounted = false\n        if (handler) clearInterval(handler)\n    }\n\n    return {\n        handler,\n        cleanUp,\n    }\n\n}\n","import { useEffect } from 'react'\nimport { PromiseJob, PromiseJobInTimer } from '../../utils/hook_tools'\nimport { REFRESH_RATE_SLOW } from \"defs/common_defs\"\n\nexport function usePromiseJob(fetchPromise: any, setFunc: any, field? :string, prefix: any = undefined, dependencies: any[] = []) {\n\n  const {\n    handler,\n    cleanUp,\n  } = PromiseJob(fetchPromise, setFunc, field, prefix)\n\n  useEffect(() => {\n    handler()\n    return () => cleanUp()\n  }, dependencies)\n\n}\n\nexport function usePromiseJobInTimer(fetchPromise: any, setFunc: any, field? :string, \n  prefix: any = undefined, dependencies: any[] = [], timeout: number= REFRESH_RATE_SLOW) {\n  const {\n    handler,\n    cleanUp,\n  } = PromiseJobInTimer(fetchPromise, setFunc, field, prefix, timeout)\n\n  useEffect(() => {\n\n    const id = handler()\n    return () => cleanUp(id)\n  }, dependencies)\n\n}\n","import { useState, } from 'react'\n\nimport { TradesData, TickerData, DepthData, \n  TokensResponse,\n  MarketsResponse, } from 'loopring-sdk'\n\nimport { usePromiseJob } from 'hooks/common/useCommon'\nimport { useExchangeAPI, } from './useApi'\n\nexport function useGetGas() {\n\n  const [gas, setGas] = useState<any>()\n\n  const api = useExchangeAPI()\n\n  const fetchData = () => {\n    if (!api) {\n      return undefined\n    }\n    return api.getGasPrice()\n  }\n\n  usePromiseJob(fetchData, setGas, undefined, 'useGetGas', [api])\n\n  return { gas }\n\n}\n\nexport function useGetMixMarkets() {\n\n  const [markets, setMarkets] = useState<MarketsResponse>()\n    const api = useExchangeAPI()\n\n    const fetchData = () => {\n      if (!api) {\n        return undefined\n      }\n      return api.getMixMarkets()\n    }\n  \n    usePromiseJob(fetchData, setMarkets, undefined, 'useGetMarkets', [api])\n    \n    return { markets }\n\n}\n\nexport function useGetMarkets() {\n\n  const [markets, setMarkets] = useState<MarketsResponse>()\n    const api = useExchangeAPI()\n\n    const fetchData = () => {\n      if (!api) {\n        return undefined\n      }\n      return api.getMarkets()\n    }\n  \n    usePromiseJob(fetchData, setMarkets, undefined, 'useGetMarkets', [api])\n    \n    return { markets }\n\n}\n\nexport function useGetExchangeInfo() {\n\n  const [exchangeInfo, setExchangeInfo] = useState<any>()\n    const api = useExchangeAPI()\n\n    const fetchData = () => {\n      if (!api) {\n        return undefined\n      }\n      return api.getExchangeInfo()\n    }\n  \n    usePromiseJob(fetchData, setExchangeInfo, 'exchangeInfo', 'useGetExchangeInfo', [api])\n    \n    return { exchangeInfo }\n\n}\n\nexport function useGetTokens() {\n\n  const [tokens, setTokens] = useState<TokensResponse>()\n    const api = useExchangeAPI()\n\n    const fetchData = () => {\n      if (!api) {\n        return undefined\n      }\n      return api.getTokens()\n    }\n  \n    usePromiseJob(fetchData, setTokens, undefined, 'useGetTokens', [api])\n    \n    return { tokens }\n\n}\n\n\nexport function useTrades(symbol: string) {\n\n  const [trades, setTrades] = useState<TradesData>()\n\n  const api = useExchangeAPI()\n\n  const fetchData = () => {\n    if (!api) {\n      return undefined\n    }\n    return api.getMarketTrades({\n      market: symbol\n    })\n  }\n\n  usePromiseJob(fetchData, setTrades, undefined, 'useTrades', [api, symbol])\n\n  return { trades, }\n\n}\n\nexport function useTickerMap(market: string) {\n\n  const [tickerMap, setTickerMap] = useState<{[key: string]: TickerData}>()\n\n  const api = useExchangeAPI()\n\n  const fetchData = () => {\n    if (!api) {\n      return undefined\n    }\n    return api.getTicker({\n      market\n    })\n  }\n\n  usePromiseJob(fetchData, setTickerMap, 'tickMap', 'useTickerMap', [api, market])\n\n  return { tickerMap, }\n\n}\n\nexport function useDepth(symbol: string) {\n\n  const api = useExchangeAPI()\n\n  const [depth, setDepth] = useState<DepthData>()\n\n    const fetchData = () => {\n      if (!api) {\n        return undefined\n      }\n      return api.getDepth({\n        market: [symbol]\n      })\n    }\n  \n    usePromiseJob(fetchData, setDepth, 'depth', 'useDepth', [api, symbol])\n\n  return { depth, }\n\n}\n","import React, { useCallback } from 'react'\n\nimport { useTranslation, WithTranslation, withTranslation } from 'react-i18next'\n\nimport {\n    gatewayList as DefaultGatewayList,\n    headerMenuData, HeaderMenuTabStatus,\n    headerToolBarData, HeadMenuTabKey,\n    ButtonComponentsMap, LanguageKeys,\n    WalletStatus, HideIcon,\n    GatewayItem, ViewIcon, ThemeKeys, LockIcon, UnLockIcon,\n} from '@loopring-web/component-lib/src/static-resource'\n\nimport { useAccount, useUnlock, useConnect, } from 'stores/account/hook'\n\nimport { getShortAddr } from 'utils/web3_tools'\n\nimport { AccountStatus } from 'state_machine/account_machine_spec'\n\nimport { useCustomDCEffect } from 'hooks/common/useCustomDCEffect'\n\nimport { Theme, } from 'defs/common_defs'\n\nimport { Button, SwapProps, useOpenModals, useSettings } from '@loopring-web/component-lib'\n\nimport store from 'stores'\n\nimport { ConnectorNames } from 'loopring-sdk'\nimport { IconButton, Typography } from '@material-ui/core';\nimport { AccountInfoProps } from '@loopring-web/component-lib/components/block';\nimport { useEtherscan } from 'hooks/web3/useWeb3'\n\nimport { useModals } from 'hooks/modal/useModals'\n\nimport {useState } from 'react'\nimport Web3 from 'web3'\n\nimport { AmmData, AmmInData, CoinInfo, CoinMap, IBData, TradeCalcData, WalletCoin, WalletMap, } from '@loopring-web/component-lib/static-resource'\nimport { AmmProps } from '@loopring-web/component-lib'\n\nimport { useExchangeAPI, useUserAPI } from 'hooks/exchange/useApi'\n\nimport { fromWEI, getIcon } from 'utils/swap_calc_utils'\nimport { useWeb3Account } from 'stores/account/hook'\nimport { useGetExchangeInfo, useGetTokens } from 'hooks/exchange/useExchangeAPI'\n\nimport * as contract from 'loopring-sdk'\n\nimport { Lv2Account } from 'defs/account_defs'\n\nimport {\n    ExchangeAPI,\n    dumpError400,\n    GetNextStorageIdRequest,\n    GetOffchainFeeAmtRequest,\n    OffchainFeeReqType,\n    OffChainWithdrawalRequestV3,\n    OriginTransferRequestV3,\n    TokenInfo,\n    VALID_UNTIL,\n} from 'loopring-sdk'\n\nimport { useGetUserBalances } from 'hooks/exchange/useUserAPI'\n\nimport {\n    DepositProps,\n    ResetProps,\n    SwitchData,\n    TradeBtnStatus,\n    TransferProps,\n    WithdrawProps,\n} from '@loopring-web/component-lib'\n\nimport { WithdrawType, WithdrawTypes } from '@loopring-web/component-lib/src/static-resource'\nimport { ButtonProps } from '@loopring-web/component-lib/components/basic-lib/index';\nimport { CoinType } from '@loopring-web/component-lib/static'\nimport { useDispatch } from 'react-redux'\n\nexport const useHeader = () => {\n    const { i18n,t } = useTranslation(['common','layout'])\n    const { setTheme,themeMode,language, setLanguage } = useSettings();\n    const { ShowDeposit } = useModals()\n    const { modals:{isShowAccountInfo,isShowConnect}, setShowConnect, setShowAccountInfo }  = useOpenModals()\n \n    const [openConnect, setOpenConnect] = React.useState(false)\n\n    const forceUpdate = React.useReducer((bool) => !bool, false)[1]\n    const { account } = useAccount()\n\n    const { lock, unlock } = useUnlock()\n\n    const { connect } = useConnect()\n\n    const { etherscanUrl } = useEtherscan()\n\n    const dispatch = useDispatch()\n\n    const gatewayList: GatewayItem[] = [\n        {\n            ...DefaultGatewayList[0],\n            handleSelect: () => {\n                console.log('try to connect to ', ConnectorNames.Injected)\n                connect(ConnectorNames.Injected, true)\n                setShowConnect({isShow: false})\n            }\n        },\n        /*\n        {\n            key: ConnectorNames.WalletConnect,\n            imgSrc: '',\n            handleSelect: () => {\n                connect(ConnectorNames.WalletConnect)\n                setOpen(false)\n            }\n        },\n        {\n            key: ConnectorNames.Ledger,\n            imgSrc: '',\n            handleSelect: () => {\n                connect(ConnectorNames.Ledger)\n                setOpen(false)\n            }\n        },\n        {\n            key: ConnectorNames.Trezor,\n            imgSrc: '',\n            handleSelect: () => {\n                connect(ConnectorNames.Trezor)\n                setOpen(false)\n            }\n        },\n        */\n    ]\n    // const [showAccountInfo, setShowAccountInfo] = React.useState(account?.accAddr ? true : false)\n    const [accountInfoProps, setAccountInfoProps] = React.useState<undefined|AccountInfoProps>(undefined)\n    //const theme: any = useTheme()\n\n    const onNotification = React.useCallback(async () => {\n        console.log('onNotification click')\n    }, [])\n\n    const onWalletBtnConnect = React.useCallback(async () => {\n        const acc = store.getState().account\n        console.log(`onWalletBtnConnect click: ${acc.status}`)\n\n        switch (acc.status) {\n            case AccountStatus.NOACCOUNT:\n                ShowDeposit(true)\n                break\n            case AccountStatus.UNCONNNECTED:\n                setShowConnect({isShow:true})\n                break\n            case AccountStatus.CONNECTED:\n            case AccountStatus.LOCKED:\n            case AccountStatus.ACTIVATED:\n                setShowAccountInfo({isShow:true})\n                break\n            default:\n                // console.log('setOpenConnect(true)')\n                // setOpenConnect(true)\n                break\n        }\n    }, [setShowConnect, lock, unlock, ShowDeposit, setShowAccountInfo])\n\n    const onThemeBtnClick = React.useCallback(async (themeMode:ThemeKeys) => {\n        if (themeMode === Theme.dark) {\n            setTheme(Theme.light)\n        } else {\n            setTheme(Theme.dark)\n        }\n    }, [setTheme])\n\n    const onLangBtnClick = (lang: LanguageKeys) => {\n        //i18n.changeLanguage(lang);\n        setLanguage(lang);\n    }\n\n    // const [advanceOpen,setAdvanceOpen] = React.useState(false)\n\n    // const handleViewAccountInfo =  React.useCallback((event: React.MouseEvent) => {\n    //     event.stopPropagation();\n    //     event.preventDefault();\n    //     if (showAccountInfo) {\n    //         // headerMenuData[ NavListIndex.layer2 ].iconBtn.view = false;\n    //         setShowAccountInfo(false);\n    //     } else {\n    //         // headerMenuData[ NavListIndex.layer2 ].iconBtn.view = true;\n    //         setShowAccountInfo(true);\n    //     }\n    // },[setShowAccountInfo, showAccountInfo])\n\n    // useCustomCompareEffect(()=>{\n    //     if(language!==i18n.language)  {\n    //         headerToolBarData[ButtonComponentsMap.Language] = { ...headerToolBarData[ButtonComponentsMap.Language], language: i18n.language}\n    //     }\n    // },[language],(prevDeps,curDeps)=> prevDeps!== curDeps)\n    //init componment\n    useCustomDCEffect(() => {\n\n\n        headerToolBarData[ButtonComponentsMap.WalletConnect] = {\n            ...headerToolBarData[ButtonComponentsMap.WalletConnect],\n            handleClick: onWalletBtnConnect,\n        }\n\n        // headerToolBarData[ButtonComponentsMap.Notification] = { ...headerToolBarData[ButtonComponentsMap.Theme], themeMode: theme.mode, handleClick: onNotification }\n        // headerToolBarData.update(ButtonComponentsMap.WalletConnect,value=>{\n        //   return {...value, handleClick:onWalletBtnConnect}});\n        headerToolBarData[ButtonComponentsMap.Theme] = { ...headerToolBarData[ButtonComponentsMap.Theme], themeMode, handleClick: onThemeBtnClick }\n        // headerToolBarData.update(ButtonComponentsMap.Theme,value=>{\n        //   return {...value, themeMode:theme.mode, handleClick:onThemeBtnClick}});\n\n        headerToolBarData[ButtonComponentsMap.Language] = { ...headerToolBarData[ButtonComponentsMap.Language], handleChange: onLangBtnClick }\n        // headerToolBarData.update(ButtonComponentsMap.Language,value=>{\n        //  return  {...value, language:i18n.language, handleClick:onThemeBtnClick}});\n    }, [themeMode, language, i18n, onWalletBtnConnect, onThemeBtnClick, onLangBtnClick, onNotification, t]);\n\n\n    const UnlockBtn = ({onClick}:{onClick:({...props}:any)=>void})=>{\n        return <Button className={'unlock'}  startIcon={<LockIcon fontSize={'large'}/>}  \n        onClick={(event)=>{unlock(account)}} variant={'outlined'} >\n            <Typography variant={'body2'} marginTop={1/2}>   {t('labelUnLock')} </Typography>\n        </Button>\n    }\n    const LockBtn = ({onClick}:{onClick:({...props}:any)=>void})=>{\n        return  <Button className={'lock'}  startIcon={<UnLockIcon fontSize={'large'}/>} \n        onClick={(event) => { lock(account) } } variant={'outlined'} >\n            <Typography variant={'body2'} marginTop={1/2}>  {t('labelLock')} </Typography>\n        </Button>\n    }\n\n\n    useCustomDCEffect(() => {\n\n        if (!account) {\n            console.log('account'+account+'* exit')\n            setAccountInfoProps(undefined)\n            return\n        }\n\n        const { status } = account\n\n        const addr = getShortAddr(account?.accAddr)\n\n\n\n        // if((addr && accountInfoProps && accountInfoProps.address !== addr) || addr ){\n        //     //TODO getAccount detail info\n        //\n        // }else if(addr) {\n        //     setAccountInfoProps(undefined)\n        // }\n\n        const updateHeaderMenuWhenHasAccountInfo =  ({status}:{status:keyof  typeof AccountStatus})=>{\n            headerMenuData[HeadMenuTabKey.Layer2] = {\n                ...headerMenuData[HeadMenuTabKey.Layer2],\n                status: HeaderMenuTabStatus.default\n            }\n            let props;\n            if(status === AccountStatus.ACTIVATED) {\n                props = {\n                    addressShort: addr?addr:'',\n                    address: account?.accAddr,\n                    level: 'VIP 1',\n                    etherscanLink: etherscanUrl + account?.accAddr,\n                    //TODO: changed by account status\n                    mainBtn: <LockBtn onClick={(event)=>{console.log(event) }}/>,\n                    connectBy:''\n                }\n                setShowAccountInfo({isShow:false})\n            }else if(status === AccountStatus.LOCKED) {\n                props = {\n                    addressShort: addr?addr:'',\n                    address: account?.accAddr,\n                    level: 'VIP 1',\n                    etherscanLink: etherscanUrl + account?.accAddr,\n                    //TODO: changed by account status\n                    mainBtn: <UnlockBtn onClick={(event)=>{console.log(event) }}/>,\n                    connectBy:''\n                }\n                setShowAccountInfo({isShow:true})\n            }else if(status === AccountStatus.UNACTIVATED\n                || status === AccountStatus.NOACCOUNT\n                || status === AccountStatus.DEPOSITING\n                || status === AccountStatus.DEPOSIT_TO_CONFIREM\n                || status === AccountStatus.ARPROVING\n                || status === AccountStatus.APPROV_TO_CONFIRM\n            )  {\n                props = {\n                    addressShort: addr?addr:'',\n                    address: account?.accAddr,\n                    //TODO: level\n                    level: 'VIP 1',\n                    etherscanLink: etherscanUrl + account?.accAddr,\n                    //TODO: changed by account status\n                    connectBy:''\n                }\n                setShowAccountInfo({isShow:false})\n            } else  {\n                setShowAccountInfo({isShow:false})\n            }\n\n\n            setAccountInfoProps(props)\n            // setShowAccountInfo(true);\n        }\n        switch (status) {\n            case AccountStatus.UNCONNNECTED:\n                headerToolBarData[ButtonComponentsMap.WalletConnect] = {\n                    ...headerToolBarData[ButtonComponentsMap.WalletConnect],\n                    label: 'Connect Wallet',\n                    status: WalletStatus.default\n                }\n                headerMenuData[HeadMenuTabKey.Layer2] = {\n                    //TODO:  HeaderMenuTabStatus.hidden\n                    ...headerMenuData[HeadMenuTabKey.Layer2], status: HeaderMenuTabStatus.hidden\n                }\n                setShowAccountInfo({isShow:false})\n                break\n            case AccountStatus.LOCKED:\n                headerToolBarData[ButtonComponentsMap.WalletConnect] = {\n                    ...headerToolBarData[ButtonComponentsMap.WalletConnect],\n                    label: addr,\n                    status: WalletStatus.connect\n                };\n\n                updateHeaderMenuWhenHasAccountInfo({status});\n                break\n            case AccountStatus.ACTIVATED:\n                headerToolBarData[ButtonComponentsMap.WalletConnect] = {\n                    ...headerToolBarData[ButtonComponentsMap.WalletConnect],\n                    label: addr,\n                    status: WalletStatus.unlock\n                }\n\n                updateHeaderMenuWhenHasAccountInfo({status});\n                break\n            case AccountStatus.UNACTIVATED:\n            case AccountStatus.NOACCOUNT:\n                headerToolBarData[ButtonComponentsMap.WalletConnect] = {\n                    ...headerToolBarData[ButtonComponentsMap.WalletConnect],\n                    // TODO got cache address if no show Connect Wallet\n                    label: addr,\n                    status: WalletStatus.noAccount\n                }\n\n                updateHeaderMenuWhenHasAccountInfo({status});\n                break\n            case AccountStatus.DEPOSITING:\n            case AccountStatus.DEPOSIT_TO_CONFIREM:\n            case AccountStatus.ARPROVING:\n            case AccountStatus.APPROV_TO_CONFIRM:\n                headerToolBarData[ButtonComponentsMap.WalletConnect] = {\n                    ...headerToolBarData[ButtonComponentsMap.WalletConnect],\n                    label: addr,\n                    status: WalletStatus.accountPending\n                }\n                updateHeaderMenuWhenHasAccountInfo({status});\n\n                break\n        }\n        forceUpdate()\n    }, [account, etherscanUrl, setAccountInfoProps])\n\n    return {\n        headerToolBarData,\n        headerMenuData,\n        gatewayList,\n        isShowConnect,\n        isShowAccountInfo,\n        setShowAccountInfo,\n        setShowConnect,\n        // open,\n        // setOpen,\n        // openConnect,\n        // setOpenConnect,\n        account,\n        accountInfoProps,\n\n    }\n\n}\n\nexport function useCoinMap(exchangeApi: ExchangeAPI, tokens: any) {\n\n    const [coinMap, setCoinMap] = useState<CoinMap<any, CoinInfo<any>>>({})\n\n    useCustomDCEffect(async () => {\n\n        if (!exchangeApi || !tokens) {\n            return\n        }\n\n        const keys = Reflect.ownKeys(tokens)\n\n        let coinMap: CoinMap<any, CoinInfo<any>> = {}\n\n        keys.forEach((key: any) => {\n\n            if (!(key as string).startsWith('LP-')) {\n                coinMap[ key ] = {\n                    icon: getIcon(key, tokens),\n                    name: key,\n                    simpleName: key,\n                    description: '',\n                    company: '',\n                }\n            }\n\n        })\n\n        setCoinMap(coinMap)\n\n    }, [exchangeApi, tokens])\n\n    return {\n        coinMap,\n    }\n\n}\n\nexport function useLv1WalletMap(exchangeApi: ExchangeAPI, account: Lv2Account, tokens: any) {\n\n    const [walletMap, setWalletMap] = useState<WalletMap<any, WalletCoin<any>>>({})\n\n    useCustomDCEffect(async () => {\n\n        if (!exchangeApi || !account || !account.accAddr || !tokens) {\n            return\n        }\n\n        let walletMap: WalletMap<any, WalletCoin<any>> = {}\n\n        const {tokenBalances} = await exchangeApi.getTokenBalances({\n            owner: account.accAddr, token: ''\n        }, tokens)\n\n        const keys = Reflect.ownKeys(tokenBalances)\n\n        keys.forEach((item: any) => {\n            const balance = tokenBalances[ item ]\n            walletMap[ item ] = {\n                belong: item,\n                count: fromWEI(tokens, item, balance) as any,\n            }\n        })\n\n        setWalletMap(walletMap)\n\n    }, [exchangeApi, account, tokens])\n\n    return {\n        walletMap,\n    }\n\n}\n\nexport function useLv2WalletMap(tokens: any) {\n\n    const {balances} = useGetUserBalances(tokens)\n\n    const [walletMap, setWalletMap] = useState<WalletMap<any, WalletCoin<any>>>({})\n\n    useCustomDCEffect(() => {\n        let walletMap: WalletMap<any, WalletCoin<any>> = {}\n        if (balances && balances.symbol) {\n            const keys = Reflect.ownKeys(balances.symbol)\n\n            keys.forEach((item: any) => {\n                const balance = balances.symbol[ item ]\n                walletMap[ item ] = {\n                    belong: item,\n                    count: fromWEI(tokens, item, balance) as any,\n                }\n            })\n        }\n\n        console.log('lv2:', walletMap)\n\n        setWalletMap(walletMap)\n    }, [balances, tokens])\n\n    return {\n        walletMap,\n    }\n\n}\n\nexport function useChargeFeeList(tokenSymbol: string | undefined, requestType: OffchainFeeReqType) {\n\n    const api = useUserAPI()\n\n    const {accountId, apiKey,} = useAccount()\n\n    const [chargeFeeList, setChargeFeeList] = useState<any>([])\n\n    useCustomDCEffect(async () => {\n\n        console.log('!!!!!!!!!useCustomDCEffect useChargeFeeList:', tokenSymbol, accountId)\n\n        if (!accountId || !tokenSymbol) {\n            return\n        }\n\n        let chargeFeeList: any[] = []\n\n        try {\n\n            const request: GetOffchainFeeAmtRequest = {\n                accountId,\n                tokenSymbol,\n                requestType,\n            }\n\n            const response = await api.getOffchainFeeAmt(request, apiKey)\n\n            if (response) {\n                response.raw_data.fees.forEach((item: any, index: number) => {\n                    chargeFeeList.push({belong: item.token, fee: item.fee})\n                })\n\n                setChargeFeeList(chargeFeeList)\n            }\n            console.log('response:', response)\n\n        } catch (reason) {\n            dumpError400(reason)\n        }\n\n\n        setChargeFeeList(chargeFeeList)\n\n    }, [accountId, apiKey, tokenSymbol])\n\n    return {\n        chargeFeeList,\n    }\n\n}\n\nexport function useModalProps() {\n\n    const {\n        ShowDeposit,\n        ShowTransfer,\n        ShowWithdraw,\n        ShowResetAccount,\n    } = useModals()\n\n    const {chainId, isConnected, connector,} = useWeb3Account()\n\n    const {exchangeInfo} = useGetExchangeInfo()\n\n    const {account, apiKey, accountId, eddsaKey,} = useAccount()\n\n    const {tokens: tokensAll} = useGetTokens()\n\n    const tokens = tokensAll?.tokenSymbolMap\n\n    const userApi = useUserAPI()\n\n    const exchangeApi = useExchangeAPI()\n\n    const {coinMap} = useCoinMap(exchangeApi, tokens)\n\n    const {walletMap: walletMap_Lv1} = useLv1WalletMap(exchangeApi, account, tokens)\n\n    const {walletMap: walletMap_Lv2} = useLv2WalletMap(tokens)\n\n    const deposit = useCallback(async (token: string, amt: any) => {\n\n        if (!tokens || !isConnected || !connector || !exchangeInfo?.exchangeAddress || !exchangeInfo?.depositAddress) {\n            console.log(`exchangeInfo:${exchangeInfo} deposit exit!!!!!`)\n            return\n        }\n\n        try {\n            const tokenInfo: TokenInfo = tokens[ token ]\n\n            const provider = await connector.getProvider()\n            const web3 = new Web3(provider as any)\n\n            let sendByMetaMask = account.connectName === ConnectorNames.Injected\n            sendByMetaMask = true\n\n            const gasPrice = (await exchangeApi.getGasPrice()).gasPrice / 1e+9\n            const gasLimit = 350000\n\n            const nonce = await contract.getNonce(web3, account.accAddr)\n\n            console.log('gasPrice:', gasPrice)\n            console.log('account.connectName:', account.connectName, ' tokenInfo:', tokenInfo)\n\n            const response = await contract.approveMax(web3, account.accAddr, tokenInfo.address,\n                exchangeInfo?.depositAddress, gasPrice, gasLimit, chainId, nonce, sendByMetaMask)\n\n            console.log('response:', response)\n\n            const fee = 0\n\n            const response2 = await contract.deposit(web3, account.accAddr,\n                exchangeInfo?.exchangeAddress, tokenInfo, amt, fee,\n                gasPrice, gasLimit, chainId, nonce + 1, sendByMetaMask)\n\n            console.log('response2:', response2)\n\n\n        } catch (reason) {\n            dumpError400(reason)\n        }\n\n    }, [chainId, isConnected, connector, account, exchangeInfo, tokens, exchangeApi])\n\n    const withdraw = useCallback(async (token: string, amt: any) => {\n\n        console.log('withdraw apiKey:', apiKey, ' exchangeInfo:', exchangeInfo, ' exchangeAddr:', exchangeInfo.exchangeAddress)\n\n        if (!account || !account.accountId || !account.accAddr\n            || !connector || !chainId || !apiKey || !exchangeInfo\n            || !exchangeInfo.exchangeAddress) {\n            console.log('return directly!!!!!', account, connector, chainId, apiKey, exchangeInfo)\n            return\n        }\n\n        amt = '5500000000000000000'\n\n        const fee = '5500000000000000000'\n\n        console.log('exchangeAddress:', exchangeInfo.exchangeAddress)\n\n        try {\n\n            const request: GetNextStorageIdRequest = {\n                accountId: account.accountId,\n                sellTokenId: 1\n            }\n\n            const storageId = await userApi.getNextStorageId(request, apiKey)\n\n            const request2: OffChainWithdrawalRequestV3 = {\n                exchange: exchangeInfo.exchangeAddress,\n                owner: account.accAddr,\n                to: account.accAddr,\n                accountId: account.accountId,\n                storageId: storageId.offchainId,\n                token: {\n                    tokenId: '1',\n                    volume: '100000000000000000000',\n                },\n                maxFee: {\n                    tokenId: '1',\n                    volume: '9400000000000000000',\n                },\n                extraData: '',\n                minGas: 0,\n                validUntil: VALID_UNTIL,\n            }\n\n            const provider = await connector.getProvider()\n            const web3 = new Web3(provider as any)\n\n            const response = await userApi.submitOffchainWithdraw(request2, web3, chainId, ConnectorNames.Injected,\n                account.eddsaKey, apiKey, false)\n\n            console.log(response)\n\n        } catch (reason) {\n            dumpError400(reason)\n        }\n\n    }, [apiKey, account, connector, exchangeInfo, chainId, userApi])\n\n    const transfer = useCallback(async (amt: number, payeeAddr: string = '0xb6AdaC3e924B4985Ad74646FEa3610f14cDFB79c') => {\n\n        if (!connector || !apiKey || !chainId || !accountId || !account?.accAddr) {\n            return\n        }\n\n        const request: GetNextStorageIdRequest = {\n            accountId,\n            sellTokenId: 1\n        }\n        const storageId = await userApi.getNextStorageId(request, apiKey)\n\n        console.log(`amt: ${amt} storageId:${JSON.stringify(storageId)}`)\n\n        try {\n\n            const provider = await connector.getProvider()\n            const web3 = new Web3(provider as any)\n\n            let walletType = account.connectName\n            walletType = ConnectorNames.Injected\n\n            const payeeAcc = await exchangeApi.getAccount({owner: payeeAddr})\n\n            let payeeId = 0\n            if (payeeAcc) {\n                payeeId = payeeAcc.accInfo.accountId\n            }\n\n            const request2: OriginTransferRequestV3 = {\n                exchange: exchangeInfo.exchangeAddress,\n                payerAddr: account.accAddr,\n                payerId: accountId,\n                payeeAddr,\n                payeeId,\n                storageId: storageId.offchainId,\n                token: {\n                    tokenId: '1',\n                    volume: '100000000000000000000',\n                },\n                maxFee: {\n                    tokenId: '1',\n                    volume: '9400000000000000000',\n                },\n                validUntil: VALID_UNTIL,\n            }\n\n            console.log(`request2:${JSON.stringify(request2)}`)\n\n            const response = await userApi.submitInternalTransfer(request2, web3, chainId, walletType,\n                eddsaKey, apiKey, false)\n\n            console.log(response)\n\n        } catch (reason) {\n            dumpError400(reason)\n        }\n\n    }, [apiKey, accountId, account, connector, exchangeInfo, chainId, eddsaKey, userApi, exchangeApi])\n\n    const [depositValue, setDepositValue] = useState<IBData<any>>({\n        belong: undefined,\n        tradeValue: 0,\n        balance: 0\n    } as IBData<unknown>)\n\n    // deposit\n\n    let depositProps: DepositProps<any, any> = {\n        tradeData: {belong: undefined},\n        coinMap: coinMap,\n        walletMap: walletMap_Lv1,\n        depositBtnStatus: TradeBtnStatus.AVAILABLE,\n        onDepositClick: (tradeData: any) => {\n            console.log('1. onDepositClick', depositValue)\n            if (depositValue && depositValue.belong) {\n                deposit(depositValue.belong.toString(), depositValue.tradeValue)\n            }\n            ShowDeposit(false)\n        },\n        handlePanelEvent: async (data: SwitchData<any>, switchType: 'Tomenu' | 'Tobutton') => {\n            return new Promise((res) => {\n                if (data?.tradeData?.belong) {\n                    if (depositValue !== data.tradeData) {\n                        setDepositValue(data.tradeData)\n                    }\n                    setTokenSymbol(data.tradeData.belong)\n                } else {\n                    setDepositValue({belong: undefined, tradeValue: 0, balance: 0} as IBData<unknown>)\n                }\n                res();\n            })\n        },\n    }\n\n    // withdraw\n    const [withdrawValue, setWithdrawValue] = useState<IBData<any>>({\n        belong: undefined,\n        tradeValue: 0,\n        balance: 0\n    } as IBData<unknown>);\n\n    const [tokenSymbol, setTokenSymbol] = useState<string>('')\n    const {chargeFeeList: withdrawalFeeList} = useChargeFeeList(tokenSymbol, OffchainFeeReqType.OFFCHAIN_WITHDRAWAL)\n\n    let withdrawProps: WithdrawProps<any, any> = {\n        tradeData: {belong: undefined},\n        coinMap: coinMap,\n        walletMap: walletMap_Lv2,\n        withdrawBtnStatus: TradeBtnStatus.AVAILABLE,\n        onWithdrawClick: (tradeData: any) => {\n            console.log('Swap button click', withdrawValue)\n            if (withdrawValue && withdrawValue.belong) {\n                withdraw(withdrawValue.belong.toString(), withdrawValue.tradeValue)\n            }\n            ShowWithdraw(false)\n        },\n\n        handlePanelEvent: async (data: SwitchData<any>, switchType: 'Tomenu' | 'Tobutton') => {\n            return new Promise((res: any) => {\n                if (data?.tradeData?.belong) {\n                    if (withdrawValue !== data.tradeData) {\n                        setWithdrawValue(data.tradeData)\n                    }\n                    setTokenSymbol(data.tradeData.belong)\n                } else {\n                    setWithdrawValue({belong: undefined, tradeValue: 0, balance: 0} as IBData<unknown>);\n                }\n                res();\n            })\n        },\n        withdrawType: WithdrawType.Fast,\n        withdrawTypes: WithdrawTypes,\n        chargeFeeToken: 'ETH',\n        chargeFeeTokenList: withdrawalFeeList,\n        handleOnAddressChange: (value: any) => {\n            console.log('handleOnAddressChange', value);\n        },\n        handleAddressError: (_value: any) => {\n            return {error: true, message: 'any error'}\n        }\n    }\n    // console.log(coinMap)\n    // transfer\n    const [transferValue, setTransferValue] = useState<IBData<any>>({\n        belong: undefined,\n        tradeValue: 0,\n        balance: 0\n    } as IBData<unknown>)\n\n    const [transferTokenSymbol, setTransferTokenSymbol] = useState<string>('')\n    const {chargeFeeList: transferFeeList} = useChargeFeeList(transferTokenSymbol, OffchainFeeReqType.TRANSFER)\n\n    let transferProps: TransferProps<any, any> = {\n        tradeData: {belong: undefined},\n        coinMap: coinMap,\n        walletMap: walletMap_Lv2,\n        transferBtnStatus: TradeBtnStatus.AVAILABLE,\n        onTransferClick: (tradeData: any) => {\n            console.log('onTransferClick:', transferValue);\n            if (transferValue && transferValue.belong) {\n                transfer(transferValue.tradeValue)\n            }\n\n            ShowTransfer(false)\n        },\n\n        handlePanelEvent: async (data: SwitchData<any>, switchType: 'Tomenu' | 'Tobutton') => {\n            return new Promise((res: any) => {\n                if (data?.tradeData?.belong) {\n                    if (transferValue !== data.tradeData) {\n                        setTransferValue(data.tradeData)\n                    }\n                    setTransferTokenSymbol(data.tradeData.belong)\n                } else {\n                    setTransferValue({belong: undefined, tradeValue: 0, balance: 0} as IBData<unknown>)\n                }\n                // else{\n                //     setTransferValue({ belong: undefined, amt: 0 })\n                // }\n\n                res();\n            })\n        },\n\n        chargeFeeToken: 'ETH',\n        chargeFeeTokenList: transferFeeList,\n        handleOnAddressChange: (value: any) => {\n            console.log('handleOnAddressChange', value);\n        },\n        handleAddressError: (_value: any) => {\n            return {error: true, message: 'any error'}\n        }\n    }\n\n    // reset\n    const [resetValue, setResetValue] = useState<IBData<any>>({\n        belong: undefined,\n        tradeValue: 0,\n        balance: 0\n    } as IBData<unknown>)\n\n\n    let resetProps: ResetProps<any, any> = {\n        tradeData: {belong: undefined},\n        coinMap: coinMap,\n        walletMap: walletMap_Lv2,\n        resetBtnStatus: TradeBtnStatus.AVAILABLE,\n        onResetClick: (tradeData: any) => {\n            console.log('onResetClick', resetValue)\n            if (resetValue && resetValue.belong) {\n            }\n\n            ShowResetAccount(false)\n        },\n        handlePanelEvent: async (data: SwitchData<any>, switchType: 'Tomenu' | 'Tobutton') => {\n            return new Promise((res) => {\n                if (data?.tradeData?.belong) {\n                    if (resetValue !== data.tradeData) {\n                        setResetValue(data.tradeData)\n                    }\n                } else {\n                    setResetValue({belong: undefined, tradeValue: 0, balance: 0} as IBData<unknown>)\n                }\n\n                res();\n            })\n        },\n        fee: {count: 234, price: 123}\n    }\n\n     const tradeCalcData: TradeCalcData<CoinType> = {\n        coinSell: 'ETH', //name\n        coinBuy: 'LRC',\n        BtoS: 0,\n        StoB: 0,\n        sellCoinInfoMap: coinMap,\n        buyCoinInfoMap: coinMap,\n        walletMap: {},\n        slippage: 0.5,\n        slippageTolerance: [0.1, 0.5, 1, 'slippage:N'],\n        priceImpact: '12',\n        minimumReceived: '1%',\n        fee: '1%'\n    }\n     const ammCalcData: AmmInData<CoinType> = {\n        myCoinA: {belong:'ETH',balance:1000,tradeValue:0},\n        myCoinB: {belong:'LRC',balance:1000,tradeValue:0},\n        AtoB:50,\n        coinInfoMap: coinMap,\n        slippage: 0.5,\n        slippageTolerance: [0.1, 0.5, 1, 'slippage:N'],\n        fee: '1%'\n    }\n\n\n    let swapProps: SwapProps<IBData<string>, string, any> = {\n        tradeData: undefined,\n        tradeCalcData,\n        onSwapClick: (tradeData) => {\n            console.log('Swap button click', tradeData);\n        },\n        handleSwapPanelEvent: async (data: any, switchType: any) => {\n            console.log(data, switchType)\n        },\n    };\n    let ammProps: AmmProps<AmmData<IBData<any>>, any, AmmInData<any>> = {\n        ammDepositData:{coinA: {belong: 'ETH',balance:0.3,tradeValue:0}, coinB:  {belong: 'LRC',balance:1000,tradeValue:0},slippage: '',},\n        ammWithdrawData:{coinA: {belong: 'ETH',balance:0.3,tradeValue:0}, coinB:  {belong: 'LRC',balance:1000,tradeValue:0},slippage: '',},\n        // tradeCalcData,\n        ammCalcData:ammCalcData,\n        handleDepositEvent: (data,type) => {\n            console.log('handleDepositEvent',data,type) ;\n        },\n        handleWithDrawEvent:  (data,type) => {\n            console.log('handleWithDrawEvent',data,type) ;\n        },\n        onAmmWithdrawClick: (data)=>{\n            console.log('onAmmWithdrawClick',data) ;\n        },\n        onAmmDepositClick: (data)=>{\n            console.log('onAmmDepositClick',data) ;\n        }\n    }\n\n    return {\n        depositProps, withdrawProps, transferProps, resetProps, ammProps, swapProps,\n    }\n}\n","import { useState, useCallback } from 'react'\n\nimport { useAccount } from 'stores/account/hook'\n\nimport { OrdersData, dumpError400, } from 'loopring-sdk'\n\nimport { REFRESH_RATE } from 'defs/common_defs'\n\nimport { useUserAPI } from './useApi'\n\nimport { getToken, fromWEI } from 'utils/swap_calc_utils'\n\nimport * as fm from 'loopring-sdk'\n\nimport { useCustomDCEffect } from 'hooks/common/useCustomDCEffect'\n\nexport function useOrders() {\n\n  const acc = useAccount().account\n\n  const api = useUserAPI()\n\n  const [orders, setOrders] = useState<OrdersData>()\n\n  useCustomDCEffect(() => {\n\n    if (!acc || !api) {\n      return\n    }\n\n    let mounted = true\n\n    const exit = (id: any) => {\n      mounted = false\n      clearInterval(id)\n    }\n\n    if (acc && acc.accountId > 0) {\n\n      const id: any = setInterval(async () => {\n        try {\n          const { raw_data } = (await api.getOrders({\n            accountId: acc.accountId\n          }, acc.apiKey))\n          if (mounted) {\n            setOrders(raw_data)\n          }\n        } catch (err) {\n          return exit(id)\n        }\n      }, REFRESH_RATE)\n\n      return exit(id)\n\n    }\n  }, [acc, api])\n\n  return {\n    orders,\n  }\n\n}\n\nexport function useGetUserBalancesByToken(token: any) {\n\n  const api = useUserAPI()\n\n  //const [balance, setBalance] = useState<any>({total: '0', locked: '0', availableInWei: '0'})\n\n  const [balance, setBalance] = useState<any>('0')\n\n  const { apiKey, accountId } = useAccount()\n\n  // console.log('enter! useGetUserBalances tokens:', tokens, 'symbol:', symbol, 'apiKey:', apiKey, ' accountId:', accountId )\n\n  useCustomDCEffect(() => {\n    if (!api || !apiKey || !accountId || !token) {\n      return\n    }\n\n    api.getUserBalances({\n      accountId,\n      tokens: token.tokenId\n    }, apiKey).then((data) => {\n      const total = fm.toBig(data.userBalances[token.tokenId].total)\n      const locked = fm.toBig(data.userBalances[token.tokenId].locked)\n      const availableInWei = total.minus(locked)\n      /*\n      setBalance({\n        total: data[0].total, \n        locked: data[0].locked, \n        availableInWei: availableInWei.toString(),\n        available: fromWEI(tokens, symbol, availableInWei)\n      })\n      */\n      setBalance(availableInWei.toString())\n    }).catch((reason: any) => {\n      dumpError400(reason, 'getUserBalances tokenId:' + token.tokenId)\n    })\n\n  }, [api, apiKey, accountId, token,])\n\n  return {\n    balance,\n    setBalance,\n  }\n\n}\n\nexport function useGetUserBalances(tokens: any, toList: boolean = false) {\n\n  const api = useUserAPI()\n\n  //const [balance, setBalance] = useState<any>({total: '0', locked: '0', availableInWei: '0'})\n\n  const [balances, setBalances] = useState<any>(undefined)\n\n  const { apiKey, accountId } = useAccount()\n\n  // console.log('enter! useGetUserBalances tokens:', tokens, 'symbol:', symbol, 'apiKey:', apiKey, ' accountId:', accountId )\n\n  useCustomDCEffect(() => {\n\n    if (!api || !apiKey || !accountId || !tokens) {\n      return\n    }\n\n    let tokenList: any[] = []\n\n    const keys = Reflect.ownKeys(tokens)\n\n    let tokenMap: any = {}\n\n    keys.forEach((item: any) => {\n      const token = tokens[item]\n      tokenList.push(token.tokenId)\n      tokenMap[token.tokenId] = token\n    })\n\n    api.getUserBalances({\n      accountId,\n      tokens: tokenList.join(',')\n    }, apiKey).then((data) => {\n\n      let balances: any = {\n        map: tokenMap,\n        tokenId: {},\n        symbol: {},\n      }\n\n      data.raw_data.forEach((item: any) => {\n        const total = fm.toBig(item.total)\n        const locked = fm.toBig(item.locked)\n        const availableInWei = total.minus(locked)\n\n        console.log('item:', item)\n\n        const token = tokenMap[item.tokenId]\n\n        balances.tokenId[item.tokenId] = availableInWei.toString()\n        balances.symbol[token.symbol] = availableInWei.toString()\n      })\n\n      setBalances(balances)\n\n    }).catch((reason: any) => {\n      dumpError400(reason, 'getUserBalances tokenId:' + tokens.tokenId)\n    })\n\n  }, [api, apiKey, accountId, tokens,])\n\n  return {\n    balances,\n    setBalances,\n  }\n\n}\n\nexport function useGetUserBalance(tokens: any, symbol: any) {\n\n  const api = useUserAPI()\n\n  //const [balance, setBalance] = useState<any>({total: '0', locked: '0', availableInWei: '0'})\n\n  const [balance, setBalance] = useState<any>('0')\n\n  const { apiKey, accountId } = useAccount()\n\n  useCustomDCEffect(() => {\n    if (!api || !apiKey || !accountId || !tokens || !symbol) {\n      return\n    }\n\n    const tokenInfo = getToken(tokens, symbol)\n\n    api.getUserBalances({\n      accountId,\n      tokens: tokenInfo.tokenId\n    }, apiKey).then((data) => {\n      const total = fm.toBig(data.userBalances[tokenInfo.tokenId].total)\n      const locked = fm.toBig(data.userBalances[tokenInfo.tokenId].locked)\n      const availableInWei = total.minus(locked)\n      \n      setBalance(availableInWei.toString())\n\n    }).catch((reason: any) => {\n      dumpError400(reason, 'getUserBalances tokenId:' + tokens.tokenId)\n    })\n\n  }, [api, apiKey, accountId, tokens, symbol,])\n\n  return {\n    balance,\n    setBalance,\n  }\n\n}","export function deepClone(data: any) {\n    if (!data || !(data instanceof Object) || (typeof data == \"function\")) {\n        return data || undefined\n    }\n    let constructor = data.constructor\n    let result = new constructor()\n    for (let key in data) {\n        if (data.hasOwnProperty(key)) {\n            result[key] = deepClone(data[key])\n        }\n    }\n    return result\n}\n\nexport function copyToClipBoard(text: string){ //复制到剪切板\n\n    if(document.execCommand){\n        var textarea =document.createElement('textarea')\n        document.body.appendChild(textarea)\n        textarea.value=text\n        textarea.select()\n        document.execCommand(\"Copy\")\n        document.body.removeChild(textarea)\n\t}\n\n\tif((window as any).clipboardData){\n        (window as any).clipboardData.setData(\"Text\", text)\n        return true\n    }\n\treturn false\n}","import { WithTranslation, withTranslation } from 'react-i18next';\nimport { Box, Modal } from '@material-ui/core';\nimport { ModalCloseButton, ModalContentStyled, ModalQRCode } from '@loopring-web/component-lib';\nimport React from 'react';\nimport { AccountInfo, AccountInfoProps } from '@loopring-web/component-lib';\n\nexport const ModalAccountInfo = withTranslation('common')(({\n                                                               onClose,\n                                                               open,\n                                                               t,\n                                                               ...rest\n                                                           }: { open:boolean, onClose:(e:any)=>void} & AccountInfoProps & WithTranslation) => {\n\n\n    return <Modal\n        open={open}\n        onClose={onClose}\n        aria-labelledby=\"Account information\"\n        aria-describedby=\"show layer2 address, unlock/locked loopring wallet, copy address\"\n    >\n        <ModalContentStyled style={{boxShadow: '24'}}>\n            <Box paddingTop={3} paddingBottom={3} display={'flex'} flexDirection={'column'} minWidth='var(--modal-width)'>\n                <ModalCloseButton onClose={onClose} {...{...rest, t}} />\n                <AccountInfo {...rest}/>\n            </Box>\n\n        </ModalContentStyled>\n    </Modal>\n})","import React, { useCallback, useState, } from 'react'\n\nimport {\n    Header as HeaderUI,\n    HideOnScroll,\n    ModalWalletConnect,\n    AccountInfo,\n    ModalCloseButton,\n} from '@loopring-web/component-lib'\n\nimport { headerRoot } from '@loopring-web/component-lib/src/static-resource'\n\nimport { useLocation } from 'react-router-dom'\n\nimport { Toolbar, Snackbar, Alert, } from '@material-ui/core'\n\nimport { useHeader } from './hook'\n\nimport { useDisconnect, } from 'stores/account/hook'\nimport { ModalPanel, ModalQRCode, } from '@loopring-web/component-lib';\nimport { useGetExchangeInfo } from 'hooks/exchange/useExchangeAPI'\nimport { useModalProps } from './hook'\n\nimport { copyToClipBoard } from 'utils/obj_tools'\nimport { ModalAccountInfo } from '../../pages/AccountPage';\nimport { useTranslation } from 'react-i18next';\n\nconst Header = ({ ...rest }: any) => {\n\n    const {\n        depositProps,\n        withdrawProps,\n        transferProps,\n        resetProps,\n        ammProps,\n        swapProps,\n    } = useModalProps()\n\n    const location = useLocation()\n\n    const {\n        headerToolBarData,\n        headerMenuData,\n        gatewayList,\n        isShowConnect,\n        isShowAccountInfo,\n        setShowAccountInfo,\n        // setShowAccountInfo,\n        setShowConnect,\n        // open,\n        // setOpen,\n        // openConnect,\n        // setOpenConnect,\n        account,\n        accountInfoProps,\n        // showAccountInfo\n    } = useHeader()\n\n    const { exchangeInfo } = useGetExchangeInfo()\n\n    const { disconnect } = useDisconnect()\n\n    const onSwitch = useCallback(() => {\n        setShowAccountInfo({isShow:false})\n        setShowConnect({isShow:true})\n    }, [setShowConnect,setShowAccountInfo])\n\n    const [openQRCode, setOpenQRCode] = useState(false)\n\n    const [copyToastOpen, setCopyToastOpen] = useState(false);\n    const {t} = useTranslation('commom')\n\n    const closeCopyToast = () => { setCopyToastOpen(false) }\n\n    return (<>\n        <Snackbar open={copyToastOpen} autoHideDuration={2500} onClose={closeCopyToast}>\n            <Alert onClose={closeCopyToast} severity=\"success\">\n                {t('Address Copied to Clipboard!')}\n        </Alert>\n        </Snackbar>\n\n        <ModalQRCode open={openQRCode} onClose={() => setOpenQRCode(false)} title={'ETH Address'}\n            description={account.accAddr} url={account.accAddr} />\n\n        <ModalPanel transferProps={transferProps} withDrawProps={withdrawProps} \n        depositProps={depositProps} resetProps={resetProps} ammProps={ammProps} swapProps={swapProps}/>\n\n        <HideOnScroll>\n            {process.env.NODE_ENV !== 'production' && JSON.stringify(account?.status)}\n            {process.env.NODE_ENV !== 'production' && ' exchangeAddress:' + JSON.stringify(exchangeInfo?.exchangeAddress)}\n\n            <HeaderUI {...rest} headerMenuData={headerMenuData} headerToolBarData={headerToolBarData}\n                selected={location.pathname === '/' ? headerRoot : location.pathname}></HeaderUI>\n\n        </HideOnScroll>\n        <Toolbar />\n\n        <ModalWalletConnect {...{ ...rest, gatewayList, open:isShowConnect.isShow, onClose: () => setShowConnect({isShow:false}) }} />\n        {<ModalAccountInfo\n            open={isShowAccountInfo.isShow}\n            onClose={() => {setShowAccountInfo({isShow:false})}}\n            onCopy={() => {\n                copyToClipBoard(account.accAddr);\n                setCopyToastOpen(true)\n            }}\n            onViewQRCode={() => {\n                setOpenQRCode(true)\n            }}\n            onDisconnect={() => {\n                disconnect();\n                setShowAccountInfo({isShow:false});\n            }}\n            onSwitch={onSwitch}\n            {...{...accountInfoProps, ...rest}}></ModalAccountInfo>}\n    </>)\n}\n\n\nexport default Header\n\n\n\n","import styled from '@emotion/styled/macro'\n\nimport { MarketBlock, QuoteTable, TablePaddingX } from '@loopring-web/component-lib'\n\nimport { WithTranslation, withTranslation } from 'react-i18next'\nimport { coinMap } from '@loopring-web/component-lib/static'\nimport { FloatTag } from '@loopring-web/component-lib/src/static-resource'\nimport { Box, Grid } from '@material-ui/core'\nimport { useQuote } from './hook'\n\nconst  RowStyled = styled(Grid)`\n      & .MuiGrid-root:not(:last-of-type) > div{\n        margin-right: ${({theme}) => theme.unit * 3}px;\n      }\n` as typeof Grid\nconst  TableWrapStyled = styled(Grid)`\n  &{\n    background-color: ${({theme}) => theme.colorBase.background().default};\n    ${({theme}) => theme.border.defaultFrame({c_key: 'blur', d_R: 1})};\n    .rdg{\n      height: 100%;\n    }\n  }\n  ${({theme}) => TablePaddingX({pLeft:theme.unit * 3,pRight:theme.unit * 3})}\n` as typeof Grid\n\nconst QuotePage = withTranslation('common')((rest: WithTranslation) => {\n\n    const { tickList, big4 } = useQuote()\n\n    const formattedRawData = tickList.map((o: any) => ({\n        pair: !!o[0].length ? {\n            first: o[0][0],\n            last: o[0][1]\n        }: {\n            first: '--',\n            last: '--'\n        },\n        lastPrice: Number.isFinite(o[2]) ? o[2] : '--',\n        change: Number.isFinite(o[3]) ? o[3] : '--',\n        high: Number.isFinite(o[4]) ? o[4] : '--',\n        low: Number.isFinite(o[5]) ? o[5] : '--',\n        volumn: Number.isFinite(o[6]) ? o[6] : '--'\n    }))\n    \n    let props: any = {\n        ...rest,\n        buyData: coinMap.ETH,\n        sellData: coinMap.LRC,\n        tradeFloat: {priceDollar: +123, priceYuan: 2343232, percent: '+15%', timeUnit: \"24h\",\n            volume: 112312312,\n            floatTag:FloatTag.increase},\n\n    }\n\n    const onVisibleRowsChange=(data: any) => {\n        console.log(data)\n    }\n\n    return <Box display={'flex'} flexDirection={'column'} flex={1}>\n\n        <RowStyled container >\n            <Grid item xs={3} >\n                <MarketBlock {...{...props,tradeFloat: {priceDollar: 123,priceYuan: 2343232, percent: '0%', timeUnit: \"24h\",floatTag:FloatTag.none}}} />\n            </Grid>\n            <Grid item xs={3} >\n                <MarketBlock {...{...props,tradeFloat: {priceDollar: 123,priceYuan: 2343232, percent: '-15%', timeUnit: \"24h\",floatTag:FloatTag.decrease}}} />\n            </Grid>\n            <Grid item xs={3} >\n                <MarketBlock {...{...props}}></MarketBlock>\n            </Grid>\n            <Grid item xs={3} >\n                <MarketBlock {...{...props}}></MarketBlock>\n            </Grid>\n        </RowStyled>\n        <TableWrapStyled container marginY={3} paddingY={2} flex={1}>\n            <Grid item xs={12} display={'flex'}>\n                <QuoteTable onVisibleRowsChange={onVisibleRowsChange} rawData={formattedRawData} {...{ ...rest }} />\n            </Grid>\n        </TableWrapStyled>\n    </Box>\n\n\n})\n\nexport default QuotePage\n","import { QuoteTableRawDataItem } from \"@loopring-web/component-lib\"\nimport { TickerData, toBig } from \"loopring-sdk\"\nimport { useExchangeAPI } from \"hooks/exchange/useApi\"\nimport { useCustomDCEffect } from \"hooks/common/useCustomDCEffect\"\n\nimport { useState } from \"react\"\n\nconst amtCol = 5\n\nexport function useQuote() {\n\n    const [tickList, setTickList] = useState<any>([])\n\n    const [big4, setBig4] = useState<any>([])\n\n    const exchangeApi = useExchangeAPI()\n\n    useCustomDCEffect(async() => {\n\n        if (!exchangeApi) {\n            return\n        }\n\n        let mounted = true\n\n        const refresh = async () => {\n\n            const { tickList } = await exchangeApi.getAllTickers()\n\n            let ticks: any[] = []\n\n            tickList.forEach((item: TickerData) => {\n                const item2: QuoteTableRawDataItem = {\n                    pair: {\n                        first: item.base as string,\n                        last: item.quote as string,\n                    },\n                    lastPrice: toBig(item.quote_token_volume).div(item.base_token_volume).toNumber(),\n                    change: item?.change ?? 0,\n                    high: item.high,\n                    low: item.low,\n                    volume: toBig(item.base_token_volume).toNumber(),\n                }\n                const rowData: any = [[item.base, item.quote], [item.close, item.close],\n                item.change, item.high, item.low, item.base_token_volume, item.base_token_volume, item.base, item.quote]\n                ticks.push(rowData)\n            })\n            \n            ticks = ticks.sort((a: any, b: any) => {\n                let res = 0\n                if (!isNaN(b[amtCol]) && !isNaN(a[amtCol])) {\n                    res = b[amtCol] - a[amtCol]\n                }\n\n                return res\n            })\n\n            if (mounted) {\n                setBig4(ticks.slice(0, 4))\n                setTickList(ticks)\n            }\n        }\n\n        await refresh()\n\n        /*\n\n        const handler = setInterval(async() => {\n            await refresh()\n        }, 3000)\n        */\n\n        return () => {\n            /*\n            if (handler) {\n                clearInterval(handler)\n            }\n            */\n            mounted = false\n        }\n\n    }, [exchangeApi])\n\n    return {\n        tickList,\n        big4,\n    }\n\n}\n","import { useCallback, useState } from 'react'\n\nimport { useExchangeAPI } from 'hooks/exchange/useApi'\nimport { useCustomDCEffect } from 'hooks/common/useCustomDCEffect'\n\nimport { TradingInterval, Candlestick, GetCandlestickRequest, GetDepthRequest, GetTickerRequest, dumpError400, getExistedMarket } from 'loopring-sdk'\nimport { fromWEI } from 'utils/swap_calc_utils'\n\nimport { ChartUnit, CoinInfo } from '@loopring-web/component-lib/static-resource'\n\nimport { ChartType } from '@loopring-web/component-lib'\n\nimport { TGItemData, TGItemJSXInterface, } from '@loopring-web/component-lib'\n\nimport { IGetDepthDataParams } from '@loopring-web/component-lib/components/charts/scaleAreaChart/data'\n\nconst toggleData: TGItemData[] = [\n  {\n    value: ChartType.Trend,\n    key: ChartType.Trend,\n    label: 'label' + ChartType.Trend\n  },\n  {\n    value: ChartType.Depth,\n    key: ChartType.Depth,\n    label: 'label' + ChartType.Depth\n  },\n]\n\nexport function useBasicInfo(props: any, coinAInfo: any, coinBInfo: any, marketArray: any[], t: any) {\n  const tgItemJSXs: TGItemJSXInterface[] = toggleData.map(({ value, label, key }) => {\n    return { value, tlabel: t(label), key, JSX: <>{t(label)}</> }\n  })\n\n  // const { base, quote, market, tokens } = props\n\n  const { market, amm } = getExistedMarket(marketArray, coinAInfo?.name, coinBInfo?.name)\n\n  const [chartType, setChartType] = useState<ChartType>(ChartType.Trend)\n\n  console.log('---useBasicInfo market:', market, ' amm:', amm, ' chartType:', chartType)\n  //\n  // const [change, setChange] = useState(0)\n  //\n  // const [volume, setVolume] = useState('')\n\n  const [chartUnit, setChartUnit] = useState(ChartUnit.D1)\n\n  const [originData, setOriginData] = useState<any>(undefined)\n\n  const handleChange = useCallback((_e: React.MouseEvent, value: any) => {\n    // Settings.setChartType(value)\n    console.log('useBasicInfo handleChange:', value)\n    setOriginData(undefined)\n    setChartType(value)\n  }, [setOriginData, setChartType])\n\n  const exchangeApi = useExchangeAPI()\n\n  // useCustomDCEffect(async () => {\n  //\n  //   if (!exchangeApi || !market || !tokens || !quote) {\n  //     return\n  //   }\n  //\n  //   let mounted = true\n  //\n  //   try {\n  //\n  //     const request: GetTickerRequest = {\n  //       market: market.market,\n  //     }\n  //\n  //     const ticker = await exchangeApi.getTicker(request)\n  //     if (mounted) {\n  //\n  //       if (ticker.tickList[0].change) {\n  //         setChange(ticker.tickList[0].change)\n  //       }\n  //\n  //       if (ticker.tickList[0].base_token_volume) {\n  //         const baseVol = fromWEI(tokens.tokenSymbolMap, base, ticker.tickList[0].base_token_volume) as string\n  //         setVolume(baseVol)\n  //       }\n  //     }\n  //   }\n  //   catch (reason) {\n  //     dumpError400(reason, 'ChartPanel getCandlestick')\n  //   }\n  //\n  //   return () => {\n  //     mounted = false\n  //   }\n  //\n  // }, [exchangeApi, market, tokens, base,])\n\n  const tgItemJSXsPriceChart: TGItemJSXInterface[] = Object.keys(ChartUnit).reduce((pre, item) => {\n    // @ts-ignore\n    const tGItemData: TGItemData = { value: ChartUnit[item], key: ChartUnit[item], label: 'label' + ChartUnit[item] };\n    pre.push({ value: tGItemData.value, tlabel: t(tGItemData.label ? tGItemData.label : tGItemData.key), key: tGItemData.key, JSX: <>{t(tGItemData.label ? tGItemData.label : tGItemData.key)}</> })\n    return pre\n  }, [] as TGItemJSXInterface[])\n\n  useCustomDCEffect(async () => {\n  \n    let mounted = true\n  \n    if (!exchangeApi || !market || !amm) {\n      return\n    }\n  \n    if (chartType === ChartType.Trend) {\n      const request: GetCandlestickRequest = {\n        market: amm as string,\n        interval: TradingInterval.min15,\n        limit: 96\n      }\n  \n      try {\n        const candlesticks = await exchangeApi.getCandlestick(request)\n  \n        if (mounted) {\n          const originData = candlesticks.candlesticks.map((item: Candlestick) => {\n            return {\n              timeStamp: item.timestamp,\n              low: item.low,\n              high: item.high,\n              open: item.open,\n              close: item.close,\n              volume: item.quoteVol,\n            }\n          })\n          console.log(`useBasicInfo amm: ${amm} candlesticks originData: `, originData)\n          setOriginData(originData)\n        }\n      }\n      catch (reason) {\n        dumpError400(reason, 'ChartPanel getCandlestick')\n      }\n  \n    } else {\n      const request: GetDepthRequest = {\n        market: [market as string],\n      }\n  \n      try {\n  \n        const { depth } = await exchangeApi.getDepth(request)\n        console.log('useBasicInfo depth:', depth)\n        if (mounted) {\n          const originData: IGetDepthDataParams = {\n            bidsPrices: depth.bids_prices,\n            bidsAmtTotals: depth.bids_amtTotals as any,\n            asksPrices: depth.asks_prices,\n            asksAmtTotals: depth.asks_amtTotals as any,\n          }\n          setOriginData(originData)\n        }\n  \n      } catch (reason) {\n        dumpError400(reason)\n      }\n  \n    }\n  \n    return () => {\n      mounted = false\n    }\n  \n  }, [exchangeApi, amm, market, chartType])\n\n  return {\n    // change,\n    // volume,\n    chartUnit,\n    chartType,\n    tgItemJSXs,\n    tgItemJSXsPriceChart,\n    handleChange,\n    originData,\n  }\n}","import store from '../../stores';\nimport { AccountStatus } from '../../state_machine/account_machine_spec';\nimport { setShowAccountInfo, setShowConnect, setShowDeposit } from '@loopring-web/component-lib';\nimport React from 'react';\n\nexport enum fnType {\n    UNKNOWN,\n    UNCONNNECTED,\n    CONNECTED,\n    NOACCOUNT,\n    DEPOSITING,\n    DEPOSIT_TO_CONFIREM,\n    UNACTIVATED,\n    ARPROVING,\n    APPROV_TO_CONFIRM,\n    LOCKED,\n    ACTIVATED,\n    DEFAULT\n}\nexport const accountStaticCallBack = (props: { [key: number ]:[ fn: (props: any) => any, args?: object] }) => {\n    const {status} = store.getState().account\n    let fn, args;\n    switch (status) {\n        case AccountStatus.UNKNOWN:\n            [fn, args] = props[ fnType.UNKNOWN ]?props[ fnType.UNKNOWN ]:[];\n            if (typeof fn === 'function') {\n                return fn.call(this, args);\n            }\n            return\n        case AccountStatus.UNCONNNECTED:\n            [fn, args] = props[ fnType.UNCONNNECTED ]?props[ fnType.UNCONNNECTED ]:[];\n            if (typeof fn === 'function') {\n                return fn.call(this, args);\n            }\n            break;\n        case AccountStatus.CONNECTED:\n            [fn, args] = props[ fnType.CONNECTED ]?props[ fnType.CONNECTED ]:[];\n            if (typeof fn === 'function') {\n                return fn.call(this, args);\n            }\n            break;\n        case AccountStatus.NOACCOUNT:\n            [fn, args] = props[ fnType.NOACCOUNT ]?props[ fnType.NOACCOUNT ]:[];\n            if (typeof fn === 'function') {\n                return fn.call(this, args);\n            }\n            break;\n        case AccountStatus.DEPOSITING:\n            [fn, args] = props[ fnType.DEPOSITING ]?props[ fnType.DEPOSITING ]:[];\n            if (typeof fn === 'function') {\n                return fn.call(this, args);\n            }\n            break;\n        case AccountStatus.DEPOSIT_TO_CONFIREM:\n            [fn, args] = props[ fnType.DEPOSIT_TO_CONFIREM ]?props[ fnType.DEPOSIT_TO_CONFIREM ]:[];\n            if (typeof fn === 'function') {\n                return fn.call(this, args);\n            }\n            break;\n        case AccountStatus.UNACTIVATED:\n            [fn, args] = props[ fnType.UNACTIVATED ]?props[ fnType.UNACTIVATED ]:[];\n            if (typeof fn === 'function') {\n                return fn.call(this, args);\n            }\n            break;\n        case AccountStatus.ARPROVING:\n            [fn, args] = props[ fnType.ARPROVING ]?props[ fnType.ARPROVING ]:[];\n            if (typeof fn === 'function') {\n                return fn.call(this, args);\n            }\n            break;\n        case AccountStatus.APPROV_TO_CONFIRM:\n            [fn, args] = props[ fnType.APPROV_TO_CONFIRM ]?props[ fnType.APPROV_TO_CONFIRM ]:[];\n            if (typeof fn === 'function') {\n                return fn.call(this, args);\n            }\n            break;\n        case AccountStatus.LOCKED:\n            [fn, args] = props[ fnType.LOCKED ]?props[ fnType.LOCKED ]:[];\n            if (typeof fn === 'function') {\n                return fn.call(this, args);\n            }\n            break;\n        case AccountStatus.ACTIVATED:\n            [fn, args] = props[ fnType.ACTIVATED ]?props[ fnType.ACTIVATED ]:[];\n            if (typeof fn === 'function') {\n                return fn.call(this, args);\n            }\n            break;\n        default:\n            break;\n\n    }\n    [fn, args] = props[ fnType.DEFAULT ]?props[ fnType.DEFAULT ]:[];\n    if (typeof fn === 'function') {\n        return fn.call(this, args);\n    }\n}\n\n\nexport const bntLabel: { [ key: number ]: [fn: (props: any) => any, args?: object] } = {\n    [ fnType.UNCONNNECTED ]: [\n        function () {\n            return `labelConnectWallet`\n        }\n    ]\n    , [ fnType.DEFAULT ]: [\n        function () {\n            return `depositTitleAndActive`\n        }\n    ]\n    , [ fnType.ACTIVATED ]: [\n        function () {\n            return undefined\n        }\n    ]\n    , [ fnType.LOCKED ]: [\n        function () {\n            return `labelUnLock`\n        }\n    ]\n};\n\n\nexport const btnClickArray: { [ key: number ]: [fn: (props: any) => any, args?: object] } = {\n    [ fnType.UNCONNNECTED ]: [\n        function () {\n            // setShowConnect({isShow: true})\n            store.dispatch(setShowConnect({isShow: true}))\n        }\n    ]\n    , [ fnType.DEFAULT ]: [\n        function () {\n            store.dispatch(setShowDeposit({isShow: true}))\n            // ShowDeposit(true)\n        }\n    ]\n\n    , [ fnType.LOCKED ]: [\n        function () {\n            store.dispatch(setShowAccountInfo({isShow: true}))\n        }\n    ]\n};\n\n\n","import { ChartUnit } from '@loopring-web/component-lib/static-resource'\n\nimport { ScaleAreaChart, ToggleButtonGroup, useSettings } from '@loopring-web/component-lib'\nimport { Box, Grid } from \"@material-ui/core\"\nimport { WithTranslation } from 'react-i18next'\nimport { TradeTitle } from '@loopring-web/component-lib/components/block'\nimport { UpColor } from '@loopring-web/component-lib/src/static-resource';\nimport { useBasicInfo } from './hook'\n\nconst BasicInfoPanel = ({ props, coinAInfo, coinBInfo, tradeFloat, marketArray, t, ...rest }: any & WithTranslation) => {\n\n    const {\n        // change,\n        chartType,\n        tgItemJSXs,\n        tgItemJSXsPriceChart,\n        handleChange,\n        originData,\n    } = useBasicInfo(props, coinAInfo, coinBInfo, marketArray, t)\n    const { upColor } = useSettings();\n\n    return <>\n        <Grid item xs={8}>\n            <TradeTitle {...{\n                coinAInfo, coinBInfo,\n                ...rest, t, tradeFloat\n            }}></TradeTitle>\n        </Grid>\n        <Grid item xs={4} display={'flex'} justifyContent={'flex-end'} alignItems={'flex-end'}>\n            <ToggleButtonGroup exclusive {...{ ...rest, t, tgItemJSXs, value: chartType }}\n                handleChange={handleChange} />\n        </Grid>\n\n        <Grid item xs={12}>\n            <Box minHeight={256} maxHeight={256} display={'block'} style={{ height: '100%', width: '100%' }}>\n                <ScaleAreaChart type={chartType} data={originData ?? []} riseColor={upColor as keyof typeof UpColor}\n                    handleMove={() => {\n                    }} />\n            </Box>\n        </Grid>\n        <Grid item xs={12} height={24} display={'flex'} justifyContent={'flex-end'}>\n            <ToggleButtonGroup exclusive {...{\n                ...rest, t, tgItemJSXs: tgItemJSXsPriceChart,\n                value: ChartUnit.D1, size: 'small'\n            }}\n                handleChange={() => undefined} />\n        </Grid>\n    </>\n\n};\n\nexport default BasicInfoPanel\n","// import { useState } from 'react'\n//\n// import TradePanelUi from './TradePanel'\n// import { useGetMyTrades, useGetRecentTrades, } from './hooks'\n//\n// const TradePanel = ({tradeArray}: any) => {\n//\n//   // const { market, poolAddress, base, quote } = props\n//\n//   console.log('TradePanel market:', tradeArray)\n//\n//   // const { myTrades } = useGetMyTrades(market)\n//   //\n//   // const { recentTrades } = useGetRecentTrades(poolAddress)\n//\n//\n//\n//   return (\n//     <TradePanelUi trades={tradeArray} isAllTrade={isAllTrade}\n//     setIsAllTrade={setIsAllTrade} />\n//   )\n//\n// }\n//\n// export default TradePanel\n\nimport { RefAttributes, useState } from 'react'\n\nimport Tabs from '@material-ui/core/Tabs'\nimport Tab from '@material-ui/core/Tab'\nimport Checkbox from '@material-ui/core/Checkbox'\nimport styled from '@emotion/styled'\n\nimport { FormControlLabel, TradeTable, } from '@loopring-web/component-lib'\nimport { withTranslation, WithTranslation } from 'react-i18next';\nimport { CheckBoxIcon, CheckedIcon } from '@loopring-web/component-lib/static-resource'\nimport { RouteComponentProps, withRouter } from 'react-router'\nimport { Box } from '@material-ui/core';\nimport { RawDataTradeItem } from '@loopring-web/component-lib/components/tableList/tradeTable/TradeTable';\nimport { BasicHeaderItem, HeadMenuType } from '@loopring-web/component-lib/components/basic-lib/lists/Interface';\n\nconst StylePaper = styled(Box)`\n  width: 100%;\n  height: 100%;\n  flex: 1;\n  background-color: ${({theme}) => theme.colorBase.background().default};\n  border-radius: ${({theme}) => theme.unit}px;\n  padding: 20px;\n\n  .tableWrapper {\n    margin-top: ${({theme}) => theme.unit * 1.5}px;\n    border: 1px solid ${({theme}) => theme.colorBase.borderColor};\n    border-radius: ${({theme}) => theme.unit}px;\n    padding: 26px;\n  }\n` as typeof Box;\n\n\nconst applyProps = (index: number) => {\n    return {\n        id: `simple-tab-${index}`,\n        'aria-controls': `simple-tabpanel-${index}`,\n    }\n}\nconst StyledTabsWrapper = styled.div`\n          position: relative;\n          width: 100%;\n          margin-top: ${({theme}) => theme.unit * 4}px;\n        `\n\nconst StyledFormControlLabel = styled(FormControlLabel)`\n          position: absolute;\n          top: 0;\n          right: ${({theme}) => theme.unit}px;\n          margin: ${({theme}) => theme.unit}px 0 0 0;\n        `\n\n\nconst TradePanel = withTranslation('common')(\n   // withRouter(\n    (\n        {tradeArray,  myTradeArray, t}:\n            { tradeArray: RawDataTradeItem[], myTradeArray: RawDataTradeItem[] } & WithTranslation & RouteComponentProps) => {\n        const [isAllTrade, setIsAllTrade] = useState(false)\n        const [value, setValue] = useState(1)\n        const handleChange = (event: any, newValue: any) => {\n            setValue(newValue)\n        }\n\n        const handleCheckboxChange = () => {\n            setIsAllTrade((flag: boolean) => !flag)\n        }\n\n        return (\n            <StyledTabsWrapper>\n                <StyledFormControlLabel\n                    control={<Checkbox checked={isAllTrade} size={'small'} checkedIcon={<CheckedIcon/>}\n                                       icon={<CheckBoxIcon/>} color={'default'} onChange={handleCheckboxChange}/>}\n                    label={t('labelTradePanelHideOtherPairs')}/>\n\n                <Tabs value={value}\n                      onChange={handleChange}\n                      aria-label=\"tabs switch\">\n                    <Tab label={t('labelMyTrade')} {...applyProps(0)} />\n                    <Tab label={t('labelRecent')}   {...applyProps(1)} />\n                </Tabs>\n\n                <StylePaper marginTop={2}>\n                    {value === 0 ?  <TradeTable rawData={myTradeArray} /> : <TradeTable rawData={tradeArray}/> }\n                </StylePaper>\n\n            </StyledTabsWrapper>\n        )\n    }\n    ) as  (props: { tradeArray: RawDataTradeItem[], myTradeArray: RawDataTradeItem[] }) => JSX.Element;\n//)\n\nexport default TradePanel\n\n","import { toBig } from 'loopring-sdk'\n\nexport enum OrderHandling {\n    processed = 'processed',\n    no_such_order = 'no_such_order',\n    too_many_times = 'too_many_times',\n}\n\nexport const BIG10 = toBig(10)\n\n// export enum PriceChartType {\n//     h24 = '24hrs',\n//     w1 = '1week',\n//     all = 'all',\n// }\n","import store from '../../stores';\nimport { WalletMap } from '@loopring-web/component-lib/static-resource';\nimport * as fm from 'loopring-sdk';\nimport { fromWEI } from '../../utils/swap_calc_utils';\nimport { UserBalanceInfo } from 'loopring-sdk';\ntype WalletMapExtend<C> = WalletMap<C> & {\n    detail:UserBalanceInfo\n}\nexport const updateWallet = <C extends { [ key: string ]: any }>() => {\n    const {walletLayer2} = store.getState().walletLayer2;\n    const {tokenMap} = store.getState().tokenMap;\n    let walletMap: WalletMap<C> | undefined;\n    if (walletLayer2) {\n        walletMap = Reflect.ownKeys(walletLayer2).reduce((prev, item) => {\n            const {total, locked, pending: {withdraw}} = walletLayer2[ item as string ];\n            const countBig = fm.toBig(total).minus(fm.toBig(locked)).minus(fm.toBig(withdraw)).toString()\n            return {\n                ...prev, [ item ]: {\n                    belong: item,\n                    count: fromWEI(tokenMap, item, countBig),\n                    detail: walletLayer2[ item as string ]\n                }\n            }\n        }, {} as  WalletMapExtend<C> )\n    }\n\n    return {walletMap}\n}","export function coinPairInit({coinKey, _tradeCalcData, tokenMap, coinMap}: any) {\n    if (coinKey) {\n        const [_match, sell, buy] = coinKey.match(/(\\w+)-(\\w+)/i);\n        // @ts-ignore\n        if (sell && coinMap && coinMap[ sell ]) {\n            _tradeCalcData.coinSell = sell;\n        }// @ts-ignore\n        if (sell!==buy && buy && -1 !== tokenMap[ sell ].tradePairs.findIndex(ele => ele === buy)) {\n            _tradeCalcData.coinBuy = buy;\n            return _tradeCalcData\n        }\n        // else{\n        //     _tradeCalcData.coinBuy = tokenMap[ sell ].tradePairs[ 0 ];\n        // }\n    }\n    if (!_tradeCalcData.coinSell || _tradeCalcData.coinSell === '') {\n        _tradeCalcData.coinSell = 'LRC';\n        _tradeCalcData.coinBuy = 'ETH';\n        return _tradeCalcData\n    }\n    if (!_tradeCalcData.coinBuy || _tradeCalcData.coinBuy === '' || _tradeCalcData.coinBuy === 'undefined') {\n        // @ts-ignore\n        if (tokenMap && tokenMap[ _tradeCalcData.coinSell ].tradePairs) {\n            _tradeCalcData.coinBuy = tokenMap[ _tradeCalcData.coinSell ].tradePairs[ 0 ]\n        } else {\n            _tradeCalcData.coinSell = 'LRC';\n            _tradeCalcData.coinBuy = 'ETH';\n        }\n    }\n    return _tradeCalcData\n}","import { AmmMap } from '../../stores/Amm/AmmMap';\nimport { AmmPoolSnapshot, getBaseQuote, LoopringMap, TickerData, TokenInfo, TokenVolumeV3 } from 'loopring-sdk';\nimport { LoopringAPI } from '../../stores/apis/api';\nimport * as fm from 'loopring-sdk';\nimport { BIG10 } from '../../defs/swap_defs';\nimport { getToken } from 'utils/swap_calc_utils';\nimport { CoinMap, CustomError, ErrorMap } from '@loopring-web/component-lib/src/static-resource';\n\nexport const pairDetailBlock = <C extends { [ key: string ]: any }, I extends { [ key: string ]: any }>({\n                                                                                                           coinKey,\n                                                                                                           ammKey,\n                                                                                                           ammMap\n                                                                                                       }: { coinKey: string, ammKey: string, ammMap: AmmMap<C, I> }):\n    Promise<{\n        ammpoolsbalance: AmmPoolSnapshot,\n        tickMap:  LoopringMap<TickerData>\n}> => {\n    // const exchangeApi = exchangeAPI();\n    // const ammpoolApi = ammpoolAPI();\n    return new Promise((resolve, reject) => {\n        if(LoopringAPI.ammpoolAPI && LoopringAPI.exchangeAPI ) {\n            Promise.all([\n                LoopringAPI.ammpoolAPI.getAmmPoolSnapshot({poolAddress: ammMap[ ammKey ].address}),\n                LoopringAPI.exchangeAPI.getMixTicker({market: coinKey})])\n                // exchangeApi.getMarketTrades({market:coinKey})])\n                //{raw_data},\n                .then(([{raw_data}, {tickMap}]) => {\n                    resolve({\n                        ammpoolsbalance: raw_data,\n                        tickMap,\n                    })\n                })\n\n        }else{\n            reject(new CustomError(ErrorMap.NO_SDK))\n        }\n       \n    })\n}\n\nexport const pairDetailDone = <C>({coinKey, market,ammpoolsbalance, tokenMap,tickerData, _tradeCalcData, coinMap, marketCoins}:any)=>{\n\n    const [, coinSell, coinbuy] = coinKey.match(/(\\w+)-(\\w+)/i)\n    let stob:number;\n    if (tickerData.base === coinSell) {\n        // const ticker: TickerData = tickMap[market]\n        stob = Number(tickerData.close)\n\n    } else{\n        // const ticker: TickerData = tickMap[market]\n        stob = Number(tickerData.close)!==0? 1/Number(tickerData.close): 0\n    }\n    if(isNaN(stob) && ammpoolsbalance){\n        const {base, quote} = getBaseQuote(coinKey)\n\n        const baseToken: TokenInfo = getToken(tokenMap, base)\n        const quoteToken: TokenInfo = getToken(tokenMap, quote)\n\n        const poolBaseTokenVol: TokenVolumeV3 = ammpoolsbalance.pooled[0]\n        const quoteBaseTokenVol: TokenVolumeV3 = ammpoolsbalance.pooled[1]\n        if (baseToken.tokenId === poolBaseTokenVol.tokenId && quoteToken.tokenId === quoteBaseTokenVol.tokenId) {\n            const baseVol = (fm.toBig(poolBaseTokenVol.volume).div(BIG10.pow(baseToken.decimals)))\n            const quoteVol = (fm.toBig(quoteBaseTokenVol.volume).div(BIG10.pow(quoteToken.decimals)))\n            stob = quoteVol.div(baseVol).toNumber()\n            // console.log('1', base, poolBaseTokenVol, quote, quoteBaseTokenVol)\n        } else if (baseToken.tokenId === quoteBaseTokenVol.tokenId && quoteToken.tokenId === poolBaseTokenVol.tokenId) {\n            const quoteVol = (fm.toBig(quoteBaseTokenVol.volume).div(BIG10.pow(baseToken.decimals)))\n            const baseVol = (fm.toBig(poolBaseTokenVol.volume).div(BIG10.pow(quoteToken.decimals)))\n            stob = baseVol.div(quoteVol).toNumber()\n            // console.log('2', base, poolBaseTokenVol, quote, quoteBaseTokenVol)\n        } else {\n            throw Error('no support base/quote pair!')\n        }\n    }\n\n    _tradeCalcData.StoB = stob;\n    _tradeCalcData.BtoS = stob !== 0 ? 1 / (stob * 1.0): 0;\n    _tradeCalcData.sellCoinInfoMap = coinMap && marketCoins?.reduce((prev: any, item: string | number) => {\n        return {...prev, [ item ]: coinMap[ item ]}\n    }, {} as CoinMap<C>)\n    _tradeCalcData.buyCoinInfoMap = coinMap && tokenMap && tokenMap[ _tradeCalcData.coinSell as string ].tradePairs?.reduce((prev: any, item: string | number) => {\n        return {...prev, [ item ]: coinMap[ item ]}\n    }, {} as CoinMap<C>);\n\n    return {\n        _tradeCalcData\n    }\n    //setPair();\n}","import { TickerData } from 'loopring-sdk';\nimport store from '../../stores';\nimport { FloatTag,TradeFloat } from '@loopring-web/component-lib/src/static-resource';\n\nexport const makeTickView = (tick: TickerData) => {\n    const {forex} = store.getState().system;\n\n    const price = !isNaN(tick.close) ? tick.close : 0\n\n    const floatTag = (isNaN(tick.close) || isNaN(tick.open))  || tick.open === tick.close ? FloatTag.none : \n        tick.close > tick.open ? FloatTag.increase : FloatTag.decrease\n\n    let _tradeFloat: Partial<TradeFloat> = {\n        percent: (tick.close - tick.open) / tick.open,\n        timeUnit: '24h',\n        priceYuan: price,\n        priceDollar: price,\n        floatTag,\n        reward: 0,\n        APY: 0,\n    }\n\n    return _tradeFloat;\n}\n","import * as fm from 'loopring-sdk';\nimport { getBaseQuote, MarketTradeInfo, Side, UserTrade } from 'loopring-sdk';\nimport { RawDataTradeItem } from '@loopring-web/component-lib/components/tableList/tradeTable/TradeTable';\nimport store from '../../stores';\nimport { TradeTypes } from '@loopring-web/component-lib/static-resource/index';\nimport { BIG10 } from '../../defs/swap_defs';\nimport { ammpoolAPI, LoopringAPI, userAPI } from '../../stores/apis/api';\nimport { AmmRecordRow, AmmTradeType } from '@loopring-web/component-lib/components/tableList/ammRecordTable/Interface';\nimport { AmmPoolTx, BillType, TxTypes, UserAmmPoolTx } from 'loopring-sdk';\nimport { CoinMap } from '@loopring-web/component-lib/static-resource';\nimport { LoopringLogo } from '@loopring-web/component-lib';\n\nexport const getUserTrades = (marketKey: any) => {\n    const userApi = userAPI();\n    const {accountId, apiKey} = store.getState().account\n    return userApi.getUserTrades({accountId}, apiKey).then((response: {\n        totalNum: any;\n        userTrades: UserTrade[];\n        raw_data: any;\n    }) => {\n        return response.userTrades\n    })\n}\nexport const makeMarketArray = (coinKey: any, marketTrades: MarketTradeInfo[]): RawDataTradeItem[] => {\n\n    let tradeArray: Array<Partial<RawDataTradeItem>> = []\n\n    marketTrades.forEach((item: MarketTradeInfo) => {\n        try {\n            const {base, quote} = getBaseQuote(item.market)\n            const {forex} = store.getState().system\n            const {currency} = store.getState().settings\n            const {tokenMap} = store.getState().tokenMap\n            if (tokenMap) {\n                const baseToken = tokenMap[ base as string ]\n                const quoteToken = tokenMap[ quote as string ]\n\n                tradeArray.push({\n                    side: item.side === Side.Sell ? TradeTypes.Sell : TradeTypes.Buy,\n                    amount: {\n                        from: {\n                            key: base as string,\n                            value: fm.toBig(item.volume).div(BIG10.pow(baseToken.decimals)).toNumber(),\n                        },\n                        to: {\n                            key: quote as string,\n                            value: fm.toBig(item.price).times(item.volume).div(BIG10.pow(quoteToken.decimals)).toNumber(),\n                        },\n                    },\n                    price: {\n                        key: '',\n                        value: fm.toBig(item.price).toNumber(),\n                    },\n                    fee: {\n                        key: '',\n                        value: fm.toBig(item.fee).div(BIG10.pow(quoteToken.decimals)).toNumber(),\n                    },\n                    time: parseInt(item.tradeTime.toString()),\n                })\n            }\n        } catch (error) {\n            //CATCHERROR:\n            console.log(error)\n            // new CustomError()\n        }\n\n    })\n    // console.log('tradeArray:', tradeArray)\n    return tradeArray as RawDataTradeItem[];\n\n}\n\nexport const getUserAmmTransaction = (marketKey: any) => {\n    const {accountId, apiKey} = store.getState().account\n    // if(LoopringAPI.ammpoolAPI){\n    return LoopringAPI.ammpoolAPI?.getUserAmmPoolTxs({accountId}, apiKey).then(({userAmmPoolTxs}) => {\n        return userAmmPoolTxs\n    })\n    // }\n\n}\n\n\nexport const makeMyAmmMarketArray = <C extends object>(coinKey: any, marketTransaction: UserAmmPoolTx[]): AmmRecordRow<C>[] => {\n\n    let tradeArray: Array<Partial<AmmRecordRow<C>>> = [];\n\n    marketTransaction.forEach((item: UserAmmPoolTx) => {\n        try {\n            const {base, quote} = getBaseQuote(coinKey)\n            const {forex} = store.getState().system\n            // const {currency} = store.getState().settings\n            const coinMap = store.getState().tokenMap.coinMap as CoinMap<C>\n            if (coinMap) {\n                tradeArray.push({\n                    type: item.txType === TxTypes.JOIN ? AmmTradeType.add : AmmTradeType.remove,\n                    //TODO:\n                    totalDollar: 1000,\n                    totalYuan: 1000 / Number(forex),\n                    amountA: Number(item.poolTokens[ 0 ]?.amount),\n                    amountB: Number(item.poolTokens[ 1 ]?.amount),\n                    time: Number(item.updatedAt),\n                    coinA: coinMap[ base as keyof C ],\n                    coinB: coinMap[ quote as keyof C ],\n                })\n            }\n        } catch (error) {\n            //CATCHERROR:\n            console.log(error)\n            // new CustomError()\n        }\n\n    })\n    // console.log('tradeArray:', tradeArray)\n    return tradeArray as AmmRecordRow<C>[];\n\n}\n\n\nexport const makeMarketAmmArray = <C extends object>(coinKey: any, marketTransaction: AmmPoolTx[]): AmmRecordRow<C>[] => {\n\n    let tradeArray: Array<Partial<AmmRecordRow<C>>> = [];\n\n    // marketTransaction.forEach((item: AmmPoolTx) => {\n    //     try {\n    //         const {base, quote} = getBaseQuote(coinKey)\n    //         const {forex} = store.getState().system\n    //         // const {currency} = store.getState().settings\n    //         const coinMap = store.getState().tokenMap.coinMap as CoinMap<C>\n    //         if (coinMap) {\n    //\n    //             // id: number;\n    //             // from: string;\n    //             // to: string;\n    //             // token: string;\n    //             // amount: string;\n    //             // tokenF: string;\n    //             // amountF: string;\n    //             // status: TxStatus;\n    //             // txHash: string;\n    //             // billType: BillType;\n    //             // income: boolean;\n    //             // timestamp: number;\n    //             // memo: string;\n    //             // price: string;\n    //             // transferType: TransferType;\n    //             // label: string;\n    //             tradeArray.push({\n    //                 // type: item.billType === BillType.ORDER ?\n    //                 //     AmmTradeType.swap : item.billType === BillType.TRANSFER && item.income ?\n    //                 //         AmmTradeType.add : AmmTradeType.remove,\n    //                 // // //TODO:\n    //                 // totalDollar: 1000,\n    //                 // totalYuan: 1000 / Number(forex),\n    //                 // amountA: Number(item.poolTokens[ 0 ].amount),\n    //                 // amountB: Number(item.poolTokens[ 1 ].amount),\n    //                 // time: Number(item.updatedAt),\n    //                 // coinA: coinMap[ base as keyof C],\n    //                 // coinB: coinMap[ quote as keyof C ],\n    //             })\n    //         }\n    //     } catch (error) {\n    //         //CATCHERROR:\n    //         console.log(error)\n    //         // new CustomError()\n    //     }\n    //\n    // })\n    // console.log('tradeArray:', tradeArray)\n    return tradeArray as AmmRecordRow<C>[];\n\n}\n","import { Box, Grid, } from '@material-ui/core'\nimport { WithTranslation, withTranslation } from 'react-i18next'\nimport BasicInfoPanel from './panel/BasicInfoPanel'\nimport TradePanel from './panel/TradePanel'\nimport styled from 'styled-components'\nimport { useSwapPage } from './hook';\nimport { SwapPanel } from '@loopring-web/component-lib'\n\nconst FixedStyle = styled(Box)`\n  @media only screen and (min-height: 680px ) and (min-width:1024px){\n    position: fixed;\n  }\n`\n\nexport const SwapPage = withTranslation('common')(({ ...rest }: WithTranslation) => {\n\n    const {tradeCalcData,tradeData,tradeFloat,tradeArray, myTradeArray, marketArray, handleSwapPanelEvent,onSwapClick,pair,swapBtnI18nKey} = useSwapPage();\n\n    return <>\n        <Grid container marginRight={3} alignContent={'flex-start'} >\n            <BasicInfoPanel {...{ ...rest,\n                ...pair, marketArray,\n                tradeFloat, tradeArray }} />\n            <TradePanel tradeArray={tradeArray} myTradeArray={myTradeArray} />\n\n            {/**/}\n        </Grid>\n\n        <Box display={'flex'} style={{ minWidth: 'var(--swap-box-width)' }} >\n            <FixedStyle>\n                <SwapPanel tradeData={tradeData}\n                           tradeCalcData={tradeCalcData}\n                           onSwapClick={onSwapClick}\n                           swapBtnI18nKey={swapBtnI18nKey}\n                           // handleError={}\n                           {...{handleSwapPanelEvent,...rest}}\n                />\n            </FixedStyle>\n\n        </Box>\n\n    </>\n});\n\n\n // SwapPage\n","import { useRouteMatch } from 'react-router';\nimport { CoinInfo, IBData, TradeCalcData, TradeTypes } from '@loopring-web/component-lib/static-resource';\nimport React, { useCallback } from 'react';\nimport { exchangeAPI, LoopringAPI, userAPI } from '../../stores/apis/api';\nimport { useTokenMap } from '../../stores/token';\nimport * as fm from 'loopring-sdk';\nimport { getAccountArg, getBaseQuote, getExistedMarket, getTickerArg, MarketTradeInfo, Side, UserTrade } from 'loopring-sdk';\nimport { useAmmMap } from '../../stores/Amm/AmmMap';\nimport { RawDataTradeItem } from '@loopring-web/component-lib/components/tableList/tradeTable/TradeTable';\nimport { useWalletLayer2 } from '../../stores/walletLayer2';\nimport store from '../../stores';\nimport { CustomError, ErrorMap, TradeFloat } from '@loopring-web/component-lib/src/static-resource';\nimport { SwapTradeData, useOpenModals } from '@loopring-web/component-lib';\nimport { SwapData } from '@loopring-web/component-lib/components/panel/components/panel/SwapWrap/Interface';\nimport { SwapType } from '@loopring-web/component-lib/components/panel/Interface';\nimport { useAccount } from '../../stores/account/hook';\nimport { useCustomDCEffect } from '../../hooks/common/useCustomDCEffect';\nimport { accountStaticCallBack, bntLabel, btnClickArray, fnType } from '../../hooks/help/connetStatusCallback';\nimport { useModals } from '../../hooks/modal/useModals';\nimport { updateWallet } from '../../hooks/help/updateWallet';\nimport { coinPairInit } from '../../hooks/help/coinPairInit';\nimport { pairDetailBlock, pairDetailDone } from '../../hooks/help/pairDetail';\nimport { makeTickView } from '../../hooks/help/makeTickView';\nimport { getUserTrades, makeMarketArray } from '../../hooks/help/marketTable';\n\n\n\n\nexport const useSwapPage = <C extends { [ key: string ]: any }>() => {\n    /*** api prepare ***/\n    // const exchangeApi = exchangeAPI();\n    const match: any = useRouteMatch(\":symbol\")\n    const {coinMap, tokenMap, marketArray, marketCoins} = useTokenMap()\n    const {ammMap} = useAmmMap();\n    const {setShowConnect, setShowAccountInfo} = useOpenModals();\n    const {ShowDeposit} = useModals()\n    const {account} = useAccount()\n\n    const walletLayer2State = useWalletLayer2();\n\n    const [tradeData, setTradeData] = React.useState<SwapTradeData<IBData<C>> | undefined>(undefined);\n    const [tradeCalcData, setTradeCalcData] = React.useState<TradeCalcData<C> | undefined>(undefined);\n    const [tradeArray, setTradeArray] = React.useState<RawDataTradeItem[]>([]);\n    const [myTradeArray, setMyTradeArray] = React.useState<RawDataTradeItem[]>([]);\n    const [tradeFloat, setTradeFloat] = React.useState<TradeFloat | undefined>(undefined);\n    const [pair, setPair] = React.useState<{ coinAInfo: CoinInfo<C> | undefined, coinBInfo: CoinInfo<C> | undefined }>({\n        coinAInfo: undefined,\n        coinBInfo: undefined,\n    });\n    \n    const [swapBtnI18nKey, setSwapBtnI18nKey] = React.useState<string|undefined>(undefined);\n\n    //HIGH: get Router info\n    // const symbol = match?.params.symbol ?? undefined;\n    React.useEffect(() => {\n        const symbol = match?.params.symbol ?? undefined;\n        resetSwap(symbol)\n    }, []);\n    //TODO tickMap\n    React.useEffect(() => {\n    }, [])\n\n    //HIGH: effect by wallet state update\n    React.useEffect(() => {\n        switch (walletLayer2State.status) {\n            case \"ERROR\":\n                walletLayer2State.statusUnset();\n                // setState('ERROR')\n                //TODO: show error at button page show error  some retry dispath again\n                break;\n            case \"DONE\":\n                walletLayer2State.statusUnset();\n                const {walletMap} = updateWallet();\n                if (tradeCalcData) {\n                    setTradeCalcData({...tradeCalcData, walletMap} as TradeCalcData<C>);\n                    setTradeData({\n                        sell: {\n                            belong: tradeCalcData.sellCoinInfoMap ? tradeCalcData.sellCoinInfoMap[ tradeCalcData.coinSell ]?.simpleName : undefined,\n                            balance: walletMap ? walletMap[ tradeCalcData.coinSell ]?.count : 0\n                        },\n                        // @ts-ignore\n                        buy: {\n                            belong: tradeCalcData.sellCoinInfoMap ? tradeCalcData.sellCoinInfoMap[ tradeCalcData.coinBuy ]?.simpleName : undefined,\n                            balance: walletMap ? walletMap[ tradeCalcData.coinBuy ]?.count : 0\n                        },\n                    } as SwapTradeData<IBData<C>>)\n                    let {\n                        amm,\n                        market\n                    } = getExistedMarket(marketArray, tradeCalcData.coinSell as string, tradeCalcData.coinBuy as string);\n                    getUserTrades(market).then((marketTrades)=>{\n                        let _myTradeArray  = makeMarketArray(market, marketTrades) as RawDataTradeItem[]\n                        setMyTradeArray(_myTradeArray?_myTradeArray:[])\n                    })\n                }\n                break;\n            default:\n                break;\n\n        }\n    }, [walletLayer2State.status,setMyTradeArray])\n\n    React.useEffect(() => {\n    }, [])\n\n\n    useCustomDCEffect(() => {\n        const label:string|undefined = accountStaticCallBack(bntLabel)\n        setSwapBtnI18nKey(label);\n    }, [account.status, bntLabel])\n\n    const onSwapClick = ({sell, buy, slippage}: SwapTradeData<IBData<C>>) => {\n        const  swapBtnClickArray: typeof  btnClickArray =  Object.assign(btnClickArray,{\n            [ fnType.ACTIVATED ]: [  function () {\n                //TODO: swap onClick\n                console.log('onSwap',sell, buy, slippage)\n            },{sell, buy, slippage}]\n        })\n        accountStaticCallBack(swapBtnClickArray)\n    }\n    const handleSwapPanelEvent = async (swapData: SwapData<SwapTradeData<IBData<C>>>, switchType: any): Promise<void> => {\n        //TODO setMarket(market);\n\n        const {tradeData} = swapData\n        return new Promise((resolve) => {\n            switch (switchType) {\n                case SwapType.SEll_CLICK:\n                    break\n                case SwapType.BUY_CLICK:\n                    break\n                case SwapType.SELL_SELECTED:\n                    resetSwap(`${tradeData.sell.belong}-${tradeData.buy.belong}`, 'sell', tradeData)\n                    break\n                case SwapType.BUY_SELECTED:\n                    resetSwap(`${tradeData.sell.belong}-${tradeData.buy.belong}`, 'buy', tradeData)\n                    break\n                case SwapType.EXCHANGE_CLICK:\n                    resetSwap(`${tradeData.sell.belong}-${tradeData.buy.belong}`)\n                    break\n                default:\n                    break\n            }\n\n            resolve(undefined)\n        })\n    }\n    const calculateTradeData = (type: 'sell' | 'buy', _tradeData: SwapTradeData<IBData<C>>): { _tradeCalcData: TradeCalcData<C>, _tradeData: SwapTradeData<IBData<C>> } => {\n        //if(`${pair.coinAInfo?.simpleName}-${pair.coinBInfo?.simpleName}` === coinKey)\n        if (_tradeData[ type ].tradeValue && tradeCalcData) {\n            type === 'sell' ? _tradeData[ 'buy' ].tradeValue = fm.toBig(_tradeData[ 'sell' ].tradeValue).times(tradeCalcData.StoB).toNumber()\n                : _tradeData[ 'sell' ].tradeValue = fm.toBig(_tradeData[ 'buy' ].tradeValue).times(tradeCalcData.BtoS).toNumber()\n        }\n        //TODO: renew  tradeCalcData\n        let _tradeCalcData = {...tradeCalcData} as TradeCalcData<C>;\n        return {_tradeData, _tradeCalcData}\n    }\n\n    const resetSwap = async (coinKey: any, type?: 'sell' | 'buy', _tradeData?: SwapTradeData<IBData<C>>) => {\n        if (tradeCalcData\n            && coinKey === `${tradeCalcData.coinSell}-${tradeCalcData.coinBuy}`\n            && _tradeData\n            && type\n            && (!tradeData || (tradeData[ type ].tradeValue !== _tradeData[ type ].tradeValue))) {\n            const {_tradeData: td, _tradeCalcData} = calculateTradeData(type, _tradeData)\n            setTradeData(td)\n            setTradeCalcData(_tradeCalcData)\n\n        } else {\n            let _tradeFloat: Partial<TradeFloat> = {}\n            let _tradeArray: Array<Partial<RawDataTradeItem>> | undefined = undefined;\n            let _tradeCalcData: Partial<TradeCalcData<C>> = coinPairInit({coinKey, _tradeCalcData:{}, tokenMap, coinMap})\n            let {\n                amm,\n                market\n            } = getExistedMarket(marketArray, _tradeCalcData.coinSell as string, _tradeCalcData.coinBuy as string);\n            const [,coinA,coinB] = market.match(/(\\w+)-(\\w+)/i)\n\n            setTradeCalcData({...tradeCalcData, ..._tradeCalcData} as TradeCalcData<C>);\n            if (coinMap) {\n                setPair({\n                    coinAInfo: coinMap[ coinA ],\n                    coinBInfo: coinMap[ coinB ],\n                })\n            }\n            if (walletLayer2State.walletLayer2) {\n                const {walletMap} = updateWallet();\n                _tradeCalcData.walletMap = walletMap;\n                getUserTrades(market).then((marketTrades)=>{\n                    let _myTradeArray = makeMarketArray(market, marketTrades) as RawDataTradeItem[]\n                    setMyTradeArray(_myTradeArray?_myTradeArray:[])\n                })\n            }\n            let apiList = [];\n            //TODO wallet saga done\n            if (marketArray && amm && market && ammMap) {\n                // let pairPromise =  usePairTitleBlock({market})\n                apiList = [\n                    LoopringAPI.exchangeAPI?.getMarketTrades({market}),\n                    pairDetailBlock({coinKey: market, ammKey: amm, ammMap})\n                ];\n                //HiGH: this need add websocket to update infr ticker ammpoolsbalace\n                // @ts-ignore\n                Promise.all([...apiList]).then(\n                    ([{marketTrades}, {ammpoolsbalance,tickMap}]: any[]) => {\n\n                        if (tokenMap) {\n                            let {_tradeCalcData: _td} = pairDetailDone({\n                                coinKey:`${_tradeCalcData.coinSell}-${_tradeCalcData.coinBuy}`,\n                                market,\n                                ammpoolsbalance,\n                                tickerData: tickMap[ market ] ? tickMap[ market ]: {},\n                                tokenMap,\n                                _tradeCalcData,\n                                coinMap,\n                                marketCoins\n                            })\n                            _tradeCalcData = _td;\n                            _tradeFloat = makeTickView(tickMap[ market ] ?tickMap[ market ]: {})\n                            _tradeArray = makeMarketArray(market, marketTrades)\n                            // @ts-ignore\n                            setTradeCalcData(_tradeCalcData as TradeCalcData<C>);\n                            // @ts-ignore\n                            setTradeFloat(_tradeFloat);\n                            setTradeArray(_tradeArray as RawDataTradeItem[])\n                            // setPair(_pair)\n                            setTradeData({\n                                sell: {\n                                    belong: _tradeCalcData.sellCoinInfoMap ? _tradeCalcData.sellCoinInfoMap[ _tradeCalcData.coinSell ]?.simpleName : undefined,\n                                    balance: _tradeCalcData.walletMap ? _tradeCalcData.walletMap[ _tradeCalcData.coinSell ]?.count : 0\n                                },\n                                // @ts-ignore\n                                buy: {\n                                    belong: _tradeCalcData.sellCoinInfoMap ? _tradeCalcData.sellCoinInfoMap[ _tradeCalcData.coinBuy ]?.simpleName : undefined,\n                                    balance: _tradeCalcData.walletMap ? _tradeCalcData.walletMap[ _tradeCalcData.coinBuy ]?.count : 0\n                                },\n                            } as SwapTradeData<IBData<C>>)\n                        }\n                    }).catch((error) => {\n                        throw new CustomError({...ErrorMap.TRADE_LITE_SET_PAIR_ERROR, options: error})\n                        //TODO solve error\n                    })\n\n            }\n        }\n\n    }\n    return {\n        tradeCalcData,\n        tradeFloat,\n        tradeArray,\n        myTradeArray,\n        tradeData,\n        pair,\n        marketArray,\n        onSwapClick,\n        swapBtnI18nKey,\n        handleSwapPanelEvent\n    }\n\n}","import { useMemo, } from \"react\"\n\nimport { useActiveWeb3React } from \"../web3/useWeb3\"\n\nimport { WsAPI, ExchangeAPI, AmmpoolAPI, UserAPI, DEFAULT_TIMEOUT, } from 'loopring-sdk'\n\nfunction useApi(ApiClass: any, timeout = DEFAULT_TIMEOUT) {\n\n  const { chainId, active, } = useActiveWeb3React()\n\n    const genApi = () => {\n        if (!active || !chainId) {\n            return undefined\n        }\n\n        return new ApiClass(chainId, timeout)\n    }\n\n    const api = useMemo(genApi, [ApiClass, chainId, active, timeout])\n\n    return api\n}\n\nexport function useWsAPI() {\n    return useApi(WsAPI) as WsAPI\n}\n\nexport function useExchangeAPI() {\n    return useApi(ExchangeAPI) as ExchangeAPI\n}\n\nexport function useAmmpoolAPI() {\n    return useApi(AmmpoolAPI) as AmmpoolAPI\n}\n\nexport function useUserAPI() {\n    return useApi(UserAPI) as UserAPI\n}\n","import { useCallback, useMemo, useState, useRef, useEffect } from 'react'\n\nimport { useActiveWeb3React } from '../web3/useWeb3'\nimport { useWsAPI, } from './useApi2'\n\nimport { ChainId, getAccountArg, getCandlestickArg, \n    getAmmpoolArg, getTickerArg, WsProps } from 'loopring-sdk'\n\nconst stateArr = [\n    { key: 0, value: 'Connecting' },\n    { key: 1, value: 'Connected' },\n    { key: 2, value: 'Closing' },\n    { key: 3, value: 'Closed' }\n]\n\nexport const useWebsocket = ({ topics, verify, needApiKey, apiKey, }: { topics: any, needApiKey: boolean, apiKey: string|undefined, verify: boolean, }) => {\n    const ws = useRef<WebSocket | null>(null)\n    const [wsData, setMessage] = useState<any>(undefined)\n    const [readyState, setReadyState] = useState({ key: 0, value: 'Connecting' })\n\n    const { chainId, } = useActiveWeb3React()\n\n    const api = useWsAPI()\n\n    const creatWebSocket = () => {\n\n        if (!api || !chainId) {\n            return\n        }\n\n        api.getWsKey().then((wsApiKey: any) => {\n            let basePath: string = 'wss://ws.'\n            switch (chainId) {\n                case ChainId.MAINNET:\n                    basePath += process.env.REACT_APP_API_URL\n                    break\n                default:\n                    basePath += process.env.REACT_APP_API_URL_UAT\n                    basePath = 'wss://ws.uat2.loopring.io'\n            }\n\n            basePath += '/v3/ws?wsApiKey=' + wsApiKey\n    \n            try {\n                ws.current = new WebSocket(basePath)\n\n                const subTopics = (topics: any) => {\n                    let data: any = {\n                        op: 'sub',\n                        unsubscribeAll: 'true',\n                        topics: topics,\n                    }\n            \n                    if (needApiKey && apiKey) {\n                        data.apiKey = apiKey\n                    }\n            \n                    const flat_txt = JSON.stringify(data)\n                    sendMessage(flat_txt)\n                }\n    \n                ws.current.onopen = (_e) => {\n                    setReadyState(stateArr[ws.current?.readyState ?? 0])\n                    subTopics(topics)\n                }\n                \n                ws.current.onclose = (e) => {\n                    setReadyState(stateArr[ws.current?.readyState ?? 0])\n                }\n                \n                ws.current.onerror = (e) => {\n                    setReadyState(stateArr[ws.current?.readyState ?? 0])\n                }\n    \n                ws.current.onmessage = (e) => {\n                    setMessage(e.data)\n                }\n            } catch (error) {\n                console.log(error)\n            }\n\n        })\n\n        \n    }\n\n    const webSocketInit = () => {\n        if (!ws.current || ws.current.readyState === 3) {\n            creatWebSocket()\n        }\n    }\n\n    const closeWebSocket = () => {\n        ws.current?.close()\n    }\n\n    const sendMessage = (msg: any) => {\n        ws.current?.send(msg)\n    }\n\n    const reconnect = () => {\n        try {\n            closeWebSocket()\n            ws.current = null\n            creatWebSocket()\n        } catch (e) {\n            console.log(e)\n        }\n    }\n\n    useEffect(() => {\n\n        verify && webSocketInit()\n        return () => {\n            ws.current?.close()\n        }\n    }, [ws, verify])\n\n    return {\n        wsData,\n        readyState,\n        sendMessage,\n        closeWebSocket,\n        reconnect,\n    }\n}\n\nexport function useWs(topics: any, needApiKey: boolean, apiKey?: string, verify: boolean = true) {\n    const [socketData, setSocketData] = useState({})\n\n    const [isLocalPage, setIsLocalPage] = useState<boolean>(true)\n\n    useEffect(() => {\n\n        let mounted = true\n\n        const checkIsLocalPage = () => {\n            console.log('enter checkIsLocalPage')\n            document.addEventListener('visibilitychange', function () {\n                // page invisible trigger!\n                let isLocalPage = true\n                if (document.visibilityState === 'hidden') {\n                    isLocalPage = false\n                }\n                if (mounted) {\n                    setIsLocalPage(isLocalPage)\n                } else {\n                    console.log('unmounted! dont setIsLocalPage!')\n                }\n            })\n        }\n\n        checkIsLocalPage()\n\n        return () => {\n            mounted = false\n        }\n\n    }, [])\n\n    const { wsData, readyState, closeWebSocket, reconnect, sendMessage, } = useWebsocket({\n        topics,\n        apiKey,\n        needApiKey,\n        verify,\n    })\n\n    useEffect(() => {\n    \n        if (needApiKey && !apiKey) {\n            return\n        }\n\n        if (!verify) {\n            return\n        }\n\n        if (wsData === 'ping') {\n            try {\n                sendMessage('pong')\n            } catch (err) {\n                console.log(err)\n            }\n        } else {\n            if (wsData) {\n                setSocketData(JSON.parse(wsData))\n            }\n        }\n        \n        // if closed and is currente page then, reconnect.\n        if (readyState.key === 3 && isLocalPage) {\n            reconnect()\n        }\n        // if not current page, close it.\n        if (!isLocalPage) {\n            closeWebSocket()\n        }\n\n    }, [wsData, readyState, isLocalPage, verify, apiKey])\n\n    return {\n        socketData,\n    }\n}\n\nexport function useAmmpoolWs(apiKey: string) {\n\n    let topics: any[] = []\n\n    topics.push(getTickerArg('LRC-ETH'))\n\n    topics.push(getAmmpoolArg('0x18920d6E6Fb7EbE057a4DD9260D6D95845c95036'))\n\n    const needApiKey = false\n\n    const { socketData } = useWs(topics, needApiKey, apiKey)\n\n    return {\n        socketData,\n    }\n\n}\n","import { useRef } from 'react'\n\n// import Qrcode from 'components/qrcodes/Qrcode'\n\n\nimport { useAccount } from 'stores/account/hook'\n\nimport { useGetExchangeInfo, useGetGas, useGetMarkets, useGetTokens } from 'hooks/exchange/useExchangeAPI'\n\nimport { useAmmpoolWs } from 'hooks/common/useWebsocketApi'\n\nconst DebugPage = () => {\n\n  const inputRef = useRef<HTMLInputElement>(null)\n\n  const { account, isNoAccount, apiKey } = useAccount()\n\n  const {socketData} = useAmmpoolWs(apiKey)\n\n  const { markets } = useGetMarkets()\n\n  const { exchangeInfo } = useGetExchangeInfo()\n\n  const { tokens } = useGetTokens()\n\n  const { gas } = useGetGas()\n\n  const gasPrice = gas?.data\n\n  console.log('account:', account)\n  console.log('exchangeInfo:', exchangeInfo)\n  console.log('tokens:', tokens)\n\n  const showAddr = account.accAddr ? account.accAddr : ''\n\n  return (\n    <div>\n      Debug\n      <div>account:{JSON.stringify(account)}</div>\n      <div>eddsaKey:{account.eddsaKey}</div>\n      <div>wsdata: {JSON.stringify(socketData)}</div>\n      <div>----------------------------</div>\n      <div>markets:{JSON.stringify(markets)}</div>\n      <div>----------------------------</div>\n      <div>depositAddress:{exchangeInfo?.depositAddress}</div>\n      <div>exchangeAddress:{exchangeInfo?.exchangeAddress}</div>\n      <div>----------------------------</div>\n      {/*<div>exchangeInfo:{JSON.stringify(exchangeInfo)}</div>\n      <div>----------------------------</div>*/}\n      <div>tokens:{JSON.stringify(tokens)}</div>\n      <div>----------------------------</div>\n\n      {/*{isNoAccount() && <Qrcode value={showAddr} size={300} />}*/}\n      {/*<input type='input' ref={inputRef} width=\"150px\" />*/}\n      {/*<DepositBtn onClick={deposit} />*/}\n    </div>\n  )\n\n}\n\nexport default DebugPage\n","import { useState } from 'react'\n\nimport { useAmmpoolAPI, useUserAPI } from \"hooks/exchange/useApi\"\nimport { useCustomDCEffect } from 'hooks/common/useCustomDCEffect'\nimport { useAccount } from 'stores/account/hook'\nimport { TransactionStatus, RawDataTransactionItem } from '@loopring-web/component-lib'\n\nimport { TxStatus } from 'loopring-sdk'\nimport { TransactionTradeTypes } from '@loopring-web/component-lib/components/tableList/transactionsTable/Interface';\n\nexport function useGetTxs() {\n\n    const { accountId, apiKey } = useAccount()\n\n    const userApi = useUserAPI()\n\n    const [txs, setTxs] = useState<RawDataTransactionItem[]>()\n\n    useCustomDCEffect(async() => {\n\n        if (!userApi || !accountId || !apiKey) {\n            return\n        }\n\n        const txs = await userApi.getUserTranferList({ accountId }, apiKey)\n\n        let tmpTx: RawDataTransactionItem[] = []\n\n        txs.userTransfers.forEach((item: any, index: number) => {\n            tmpTx.push({from: {\n                    address: item.senderAddress,\n                    env: ''\n                },\n                to: {\n                    address: item.receiverAddress,\n                    env: ''\n                },\n                amount: item.amount,\n                fee: {\n                    unit: item.feeTokenSymbol,\n                    value: item.feeAmount\n                },\n                memo: item.symbol,\n                time: item.timestamp,\n                txnHash: item.hash,\n                status: item.status,\n                token:item.token,\n                tradeType:TransactionTradeTypes.allTypes,\n            })\n        })\n\n        setTxs(tmpTx)\n\n    }, [accountId, apiKey, userApi])\n\n    return {\n        txs,\n    }\n}\n","import React from 'react'\nimport { TransactionTable } from '@loopring-web/component-lib'\nimport { WithTranslation, withTranslation } from 'react-i18next'\nimport { Box, Paper } from '@material-ui/core'\nimport styled from '@emotion/styled'\nimport { useGetTxs } from './hooks'\n\nconst StylePaper = styled(Box)`\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  height: 100%;\n  flex: 1;\n  background-color: ${({ theme }) => theme.colorBase.background().default};\n  border-radius: ${({ theme }) => theme.unit}px;\n  padding: 20px;\n\n  .title {\n    font-family: Gilroy-Medium;\n    font-size: ${({ theme }) => theme.unit * 3}px;\n    line-height: 19px;\n  }\n\n  .tableWrapper {\n    display: flex;\n    margin-top: 20px;\n    border: 1px solid ${({ theme }) => theme.colorBase.borderColor};\n    border-radius: ${({ theme }) => theme.unit}px;\n    padding: 26px;\n    flex: 1;\n    \n    .rdg {\n      flex: 1;\n    }\n  }\n` as typeof Paper;\n\nconst TxPanel = withTranslation('common')((rest:WithTranslation<'common'>) => {\n    const container = React.useRef(null);\n    const [pageSize, setPageSize] = React.useState(10);\n    React.useEffect(() => {\n        // @ts-ignore\n        let height = container?.current?.offsetHeight;\n        if (height) {\n            setPageSize(Math.floor((height - 120) / 44) - 2);\n        }\n    }, [container, pageSize]);\n    const { txs } = useGetTxs()\n\n    const txList = txs !== undefined ? txs: []\n    \n    return (\n        <StylePaper ref={container}>\n            <div className=\"title\">Transactions</div>\n            <div className=\"tableWrapper\">\n                <TransactionTable {...{\n                  rawData: txList,\n                  pagination: {\n                    pageSize: pageSize\n                  },\n                  ...rest\n                }} />\n            </div>\n        </StylePaper>\n    )\n})\n\nexport default TxPanel\n","import { useState, useEffect, useRef } from 'react'\nimport { WithTranslation, withTranslation } from 'react-i18next'\nimport { PriceTag } from '@loopring-web/component-lib/static-resource'\nimport { Box, Paper, Typography } from '@material-ui/core'\nimport styled from '@emotion/styled'\nimport { AssetTitleProps, AssetTitle, AssetsTable, DoughnutChart, ScaleAreaChart, ChartType, ToggleButtonGroup } from '@loopring-web/component-lib'\nimport { useModals } from 'hooks/modal/useModals'\n// import { useGetUserBalances } from 'hooks/exchange/useUserAPI'\nimport { useGetTokens } from 'hooks/exchange/useExchangeAPI'\nimport { LoopringAPI } from 'stores/apis/api'\nimport store from 'stores'\n\nconst StylePaper = styled(Box)`\n    width: 100%;\n    height: 100%;\n    flex: 1;\n    background-color: ${({ theme }) => theme.colorBase.background().default};\n    border-radius: ${({ theme }) => theme.unit}px;\n    padding: 20px;\n\n    .title {\n        font-family: Gilroy-Medium;\n        font-size: ${({ theme }) => theme.unit * 3}px;\n        line-height: 19px;\n    }\n\n    .tableWrapper {\n        margin-top: ${({ theme }) => theme.unit * 1.5}px;\n        border: 1px solid ${({ theme }) => theme.colorBase.borderColor};\n        border-radius: ${({ theme }) => theme.unit}px;\n        padding: 26px;\n    }\n` as typeof Box;\n\nconst StyledChartWrapper = styled(Box)`\n    height: 225px;\n    > div {\n        position: relative;\n        width: calc(50% - 6px);\n        height: 100%;\n        background-color: ${({ theme }) => theme.colorBase.background().default};\n        border: 1px solid ${({ theme }) => theme.colorBase.borderColor};\n        border-radius: ${({ theme }) => theme.unit}px;\n        padding: ${({ theme }) => theme.unit * 2.5}px ${({ theme }) => theme.unit * 3}px;\n    }\n`\n\nconst StyledBtnGroupWrapper = styled(Box)`\n    position: absolute;\n    z-index: 10000;\n    right: ${({ theme }) => theme.unit * 3}px;\n    bottom: ${({ theme }) => theme.unit * 2.5}px;\n`\n\nconst toggleData = [\n    {value: '24 H', key: '24 H'},\n    {value: '1 W', key: '1 W'},\n    {value: 'ALL', key: 'ALL'},\n]\n\nconst DoughnutData = [\n    {\n        name: 'LP Token',\n        value: 12898.0\n    },\n    {\n        name: 'LRC',\n        value: 12898.50\n    },\n    {\n        name: 'ETH',\n        value: 36547.00\n    },\n    {\n        name: 'DOT',\n        value: 23898.09\n    },\n    {\n        name: 'BTC',\n        value: 3489\n    },\n    {\n        name: 'CRV',\n        value: 180.09\n    },\n    {\n        name: 'ALICE',\n        value: 150.7\n    },\n    {\n        name: 'LINA',\n        value: 230.5\n    },\n]\n\nconst testTrendData:any = [\n    {\n        timeStamp: 150,\n        low: Math.random() + 1,\n        high: Math.random() + 6,\n        open: Math.random() + 3,\n        close: Math.random() + 4,\n        volume: (Math.random() + 4) * 1500,\n    },\n    {\n        timeStamp: 160,\n        low: Math.random() + 1,\n        high: Math.random() + 6,\n        open: Math.random() + 3,\n        close: Math.random() + 4,\n        volume: (Math.random() + 4) * 1500,\n    },\n    {\n        timeStamp: 170,\n        low: Math.random() + 1,\n        high: Math.random() + 6,\n        open: Math.random() + 3,\n        close: Math.random() + 4,\n        volume: (Math.random() + 4) * 1500,\n    },\n    {\n        timeStamp: 180,\n        low: Math.random() + 1,\n        high: Math.random() + 6,\n        open: Math.random() + 3,\n        close: Math.random() + 4,\n        volume: (Math.random() + 4) * 1500,\n    },\n    {\n        timeStamp: 190,\n        low: Math.random() + 1,\n        high: Math.random() + 6,\n        open: Math.random() + 3,\n        close: Math.random() + 4,\n        volume: (Math.random() + 4) * 1500,\n    },\n    {\n        timeStamp: 200,\n        low: Math.random() + 1,\n        high: Math.random() + 6,\n        open: Math.random() + 3,\n        close: Math.random() + 4,\n        volume: (Math.random() + 4) * 1500,\n    },\n    {\n        timeStamp: 210,\n        low: Math.random() + 1,\n        high: Math.random() + 6,\n        open: Math.random() + 3,\n        close: Math.random() + 4,\n        volume: (Math.random() + 4) * 1500,\n    },\n    {\n        timeStamp: 220,\n        low: Math.random() + 1,\n        high: Math.random() + 6,\n        open: Math.random() + 3,\n        close: Math.random() + 4,\n        volume: (Math.random() + 4) * 1500,\n    },\n    {\n        timeStamp: 230,\n        low: Math.random() + 1,\n        high: Math.random() + 6,\n        open: Math.random() + 3,\n        close: Math.random() + 4,\n        volume: (Math.random() + 4) * 1500,\n    },\n    {\n        timeStamp: 240,\n        low: Math.random() + 1,\n        high: Math.random() + 6,\n        open: Math.random() + 3,\n        close: Math.random() + 4,\n        volume: (Math.random() + 4) * 1500,\n    },\n]\n\nconst AssetPanel = withTranslation('common')(({t,...rest}: WithTranslation) => {\n    const container = useRef(null);\n    const [pageSize, setPageSize] = useState(10);\n    \n    const [chartPeriod, setChartPeriod] = useState('24 H')\n\n    const { accountId,apiKey } = store.getState().account;\n\n    useEffect(() => {\n        (async function getUserApi () {\n            if (LoopringAPI && LoopringAPI.userApi && accountId && apiKey) {\n                const d = await LoopringAPI.userApi.getUserBalances({\n                    accountId,\n                    tokens: '' // get all the tokens\n                }, apiKey)\n                console.log(d)\n            }\n        })()\n    }, [accountId, apiKey])\n\n    useEffect(() => {\n        // @ts-ignore\n        let height = container?.current?.offsetHeight;\n        if (height) {\n            setPageSize(Math.floor((height - 120) / 44) - 1);\n        }\n    }, [container, pageSize]);\n\n    const {\n        ShowDeposit,\n        ShowTransfer,\n        ShowWithdraw,\n        ShowResetAccount,\n    } = useModals()\n\n    const onShowDeposit = () => {\n        ShowDeposit(true)\n    }\n\n    const onShowTransfer = () => {\n        ShowTransfer(true)\n    }\n\n    const onShowWithdraw = () => {\n        ShowWithdraw(true)\n    }\n\n    const AssetTitleProps: AssetTitleProps = {\n        assetInfo: {\n            totalAsset: 123456.789,\n            priceTag: PriceTag.Dollar,\n        },\n        onShowDeposit,\n        onShowTransfer,\n        onShowWithdraw,\n    }\n\n    const { tokens: tokensAll } = useGetTokens()\n\n    const tokens = tokensAll?.tokenSymbolMap\n\n    // const { balances } = useGetUserBalances(tokens)\n\n    return (\n        <>\n            <Box>\n                <AssetTitle  {...{\n                    t,\n                    ...rest,\n                    ...AssetTitleProps\n                }} />\n            </Box>\n\n            {/*<div className=\"title\">{t('labelAssetsTitle')}</div>*/}\n\n            <StyledChartWrapper display={'flex'} justifyContent={'space-between'} alignItems={'center'} marginTop={2}>\n                <Paper component={'div'}>\n                    <Typography component=\"span\" color=\"textSecondary\" variant=\"body1\">Asset Distribution</Typography>\n                    <DoughnutChart data={DoughnutData} />\n                </Paper>\n                <Paper component={'div'}>\n                    <Typography component=\"span\" color=\"textSecondary\" variant=\"body1\">Total Assets</Typography>\n                    <ScaleAreaChart type={ChartType.Trend} data={testTrendData} />\n                    <StyledBtnGroupWrapper>\n                        <ToggleButtonGroup exclusive size=\"small\" {...{...rest, t, data: toggleData, value: chartPeriod, setValue: setChartPeriod}} />\n                    </StyledBtnGroupWrapper>\n                </Paper>\n            </StyledChartWrapper>\n            <StylePaper marginTop={2}>\n                <div className=\"tableWrapper\" ref={container}>\n                    <AssetsTable {...{\n                        rawData: [],\n                        pagination: {\n                            pageSize: pageSize\n                        }\n                    }} />\n                </div>\n            </StylePaper>\n        </>\n    )\n})\n\nexport default AssetPanel\n","import React from 'react'\nimport { TradeTable, TradeFilterTable, } from '@loopring-web/component-lib'\nimport { WithTranslation, withTranslation } from 'react-i18next'\nimport styled from '@emotion/styled'\nimport { Box, Paper } from '@material-ui/core'\n\nconst StylePaper = styled(Box)`\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  height: 100%;\n  flex: 1;\n  background-color: ${({ theme }) => theme.colorBase.background().default};\n  border-radius: ${({ theme }) => theme.unit}px;\n  padding: 20px;\n\n  .title {\n    font-family: Gilroy-Medium;\n    font-size: ${({ theme }) => theme.unit * 3}px;\n    line-height: 19px;\n  }\n\n  .tableWrapper {\n    display: flex;\n    flex: 1;\n    margin-top: 20px;\n    border: 1px solid ${({ theme }) => theme.colorBase.borderColor};\n    border-radius: ${({ theme }) => theme.unit}px;\n    padding: 26px;\n\n    .rdg {\n      flex: 1;\n    }\n  }\n` as typeof Paper;\n\nconst TradePanel = withTranslation('common')((rest:WithTranslation<'common'>) => {\n    const container = React.useRef(null);\n    const [pageSize, setPageSize] = React.useState(10);\n    React.useEffect(() => {\n        // @ts-ignore\n        let height = container?.current?.offsetHeight;\n        if (height) {\n            setPageSize(Math.floor((height - 120) / 44) - 2);\n        }\n    }, [container, pageSize]);\n\n    const txList: any[] = []\n\n    return (\n        <>\n            <StylePaper ref={container}>\n                <div className=\"title\">Trades</div>\n                <div className=\"tableWrapper\">\n                    <TradeFilterTable {...{\n                      rawData: txList,\n                      pagination: {\n                        pageSize: pageSize\n                      },\n                      ...rest}}/>\n                </div>\n            </StylePaper>\n        </>\n    )\n})\n\nexport default TradePanel\n","\nimport React from 'react'\nimport { OrderHistoryTable } from '@loopring-web/component-lib'\nimport { WithTranslation, withTranslation } from 'react-i18next'\nimport { Box, Paper } from '@material-ui/core'\nimport styled from '@emotion/styled'\nimport { useGetTxs } from '../TxPanel/hooks'\n\nconst StylePaper = styled(Box)`\n    display: flex;\n    flex-direction: column;\n    width: 100%;\n    height: 100%;\n    flex: 1;\n    background-color: ${({ theme }) => theme.colorBase.background().default};\n    border-radius: ${({ theme }) => theme.unit}px;\n    padding: 20px;\n\n    .title {\n        font-family: Gilroy-Medium;\n        font-size: ${({ theme }) => theme.unit * 3}px;\n        line-height: 19px;\n    }\n\n    .tableWrapper {\n        display: flex;\n        flex: 1;\n        margin-top: 20px;\n        border: 1px solid ${({ theme }) => theme.colorBase.borderColor};\n        border-radius: ${({ theme }) => theme.unit}px;\n        padding: 26px;\n\n        .rdg {\n            flex: 1;\n        }\n    }\n` as typeof Paper;\n\nconst OrderPanel = withTranslation('common')((rest: WithTranslation) => {\n    const container = React.useRef(null);\n    const [pageSize, setPageSize] = React.useState(10);\n    React.useEffect(() => {\n        // @ts-ignore\n        let height = container?.current?.offsetHeight;\n        if (height) {\n            setPageSize(Math.floor((height - 120) / 44) - 2);\n        }\n    }, [container, pageSize]);\n\n    const { txs } = useGetTxs()\n\n    return (\n        <>\n            <StylePaper ref={container}>\n                <div className=\"title\">Order History</div>\n                <div className=\"tableWrapper\">\n                    <OrderHistoryTable {...{\n                        pagination: {\n                            pageSize: pageSize\n                        },\n                        rawData: [],\n                        ...rest\n                    }} />\n                </div>\n            </StylePaper>\n        </>\n    )\n})\n\nexport default OrderPanel\n","import styled from '@emotion/styled';\nimport { Box, Button, Divider, Grid, Switch, Typography } from '@material-ui/core';\nimport React from 'react';\nimport { UpColor, Currency, DropDownIcon } from '@loopring-web/component-lib/src/static-resource';\nimport {\n    BtnLanguage,\n    OutlineSelect,\n    OutlineSelectItem, QRCodePanel,\n    TypographyStrong, useSettings\n} from '@loopring-web/component-lib';\nimport { Trans, useTranslation, WithTranslation, withTranslation } from 'react-i18next';\nimport { useTheme } from '@emotion/react';\nimport { LanguageKeys } from '@loopring-web/component-lib/static-resource';\n\n// const MuiModalStyled = styled(MuiModal)`\n//   //background: ${({theme}) => theme.colorBase.background().secondary};\n//   // .MuiBackdrop-root{\n//   //   z-index: -1;\n//   //   background-color: ${({theme}) => theme.colorBase.background().outline};\n//   // }\n//   display: flex;\n//   align-items: center;\n//   justify-content: center;\n// ` as typeof MuiModal;\n// const BlockStyled = styled(Box)`\n//   ${({theme}) => theme.border.defaultFrame({c_key: 'blur', d_R: 1})};\n//   background: ${({theme}) => theme.colorBase.background().secondary};\n//   max-height: var(--panel-setting-height);\n//   max-width: var(--panel-setting-width);\n//   display: flex;\n//   justify-content: space-around;\n//   align-items: center;\n//   overflow: scroll;\n//   padding: ${({theme}) => theme.unit*8}px\n// `;\n\nconst StyledPaper = styled(Grid)`\n  width: 100%;\n  height: 100%;\n  background-color: ${({theme}) => theme.colorBase.background().default};\n  ${({theme}) => theme.border.defaultFrame({c_key: 'blur', d_R: 1})};\n`\n\nconst StyledSwitch = styled(Switch)(({theme}) => ({\n    \"& .Mui-checked\": {\n        color: theme.colorBase.textPrimary,\n        '& + .MuiSwitch-track.MuiSwitch-track': {\n            border: `solid ${theme.colorBase.success}`,\n        },\n        '& .MuiSwitch-thumb': {\n            backgroundColor: theme.colorBase.success,\n        }\n    },\n    '& .MuiSwitch-track': {\n        border: `solid ${theme.colorBase.error}`,\n        opacity: 1\n    },\n    '& .MuiSwitch-thumb': {\n        backgroundColor: theme.colorBase.error,\n    }\n}));\n\nexport const BtnCurrency = ({t, currency, label, handleChange}: any) => {\n    const [state, setState] = React.useState<string>(currency ? currency : Currency.dollar);\n    const _handleChange = React.useCallback((event: React.ChangeEvent<any>) => {\n        setState(event.target.value);\n        if (handleChange) {\n\n            handleChange(event.target.value)\n        }\n    }, [handleChange])\n    return <OutlineSelect aria-label={t(label)} IconComponent={DropDownIcon}\n                          labelId=\"language-selected\"\n                          id=\"language-selected\"\n                          value={state} autoWidth\n                          onChange={_handleChange}>\n        <OutlineSelectItem value={Currency.dollar}>$ {t('labelUSDollar')}</OutlineSelectItem>\n            <OutlineSelectItem value={Currency.yen}>¥ {t('labelCNYYuan')}</OutlineSelectItem>\n    </OutlineSelect>\n}\n\nconst StyledDivider = styled(Divider)`\n  margin: ${({theme}) => theme.unit}px 0 ${({theme}) => theme.unit}px 0px;\n`\nconst DividerBlock = styled(Divider)`\n  margin: 0;\n  flex: 1;\n  width: 1px;\n  height: ${({theme}) => theme.unit * 3}px;\n  background: ${({theme}) => theme.colorBase.focus};\n`\n\n\n\nexport const SettingPanel = withTranslation(['common', 'layout'])(({t,i18n, ...rest}: & WithTranslation) => {\n    const theme = useTheme();\n    const {setUpColor,setLanguage,setCurrency,currency,upColor} = useSettings()\n    const language = i18n.language;\n    const handleOnLanguageChange = (lang: LanguageKeys) => {\n        setLanguage(lang);\n        i18n.changeLanguage(lang);\n    }\n    const handleOnCurrencyChange = (value: any) => {\n        setCurrency(value);\n    }\n    const handleColorChange = (e:any) => {\n        if(e.target.checked){\n            setUpColor(UpColor.green) ;\n        }else{\n            setUpColor(UpColor.red);\n        }\n    }\n    return <Grid container direction={'column'} justifyContent={'space-between'} alignItems={'stretch'} flexWrap={'nowrap'}>\n        <Typography variant={'h4'} component={'h3'} marginY={1} paddingLeft={2}>{t('labelTitleSecurity')}</Typography>\n        <StyledPaper item xs={12} display={'flex'} flexDirection={'column'} marginBottom={2} paddingY={2}>\n            <Box component={'section'} display={'flex'} flexDirection={'column'}>\n                <Typography variant={'h5'} component={'h4'} paddingX={2}>{t('labelTitleResetL2Keypair')}</Typography>\n                <StyledDivider/>\n                <Grid container display={'flex'} flexDirection={'row'} justifyContent={'stretch'}\n                      alignItems={'flex-start'} paddingX={2} marginBottom={2}>\n                    <Grid item xs={8} display={'flex'} flexDirection={'column'}>\n                        <Typography variant={'body1'} component={'p'}>\n                            <Trans i18nKey=\"resetDescription\">\n                                Create a new signing key for layer-2 authentication (no backup needed). This will\n                                <TypographyStrong component={'span'}>cancel all your pending orders</TypographyStrong>.\n                            </Trans>\n                        </Typography>\n                    </Grid>\n                    <Grid item xs={4} display={'flex'} flexDirection={'column'} justifyContent={'space-evenly'}\n                          alignItems={'flex-end'} alignSelf={'stretch'}>\n                        <Button variant={'outlined'} size={'medium'} color={'primary'}>{t('labelBtnReset')}</Button>\n                    </Grid>\n                    <Grid item xs={12} display={'flex'} flexDirection={'row'} justifyContent={'flex-end'}\n                          alignItems={'center'} alignSelf={'stretch'}>\n                        <Typography variant={'body2'} component={'p'}\n                                    paddingTop={1}>{t('labelHadChangPassword', {passDay: '14 hours'})}</Typography>\n                    </Grid>\n\n                </Grid>\n            </Box>\n            <Box component={'section'} display={'flex'} flexDirection={'column'}>\n                <Typography variant={'h5'} component={'h4'} paddingX={2}>{t('labelTitleExportAccount')}</Typography>\n                <StyledDivider/>\n                <Grid container display={'flex'} flexDirection={'row'} justifyContent={'stretch'}\n                      alignItems={'flex-start'} paddingX={2} marginBottom={2}>\n                    <Grid item xs={7} display={'flex'} flexDirection={'column'}>\n                        <Typography variant={'body1'} component={'p'}>{t('descriptionExportAccount')}</Typography>\n                    </Grid>\n                    <Grid item xs={5} display={'flex'} flexDirection={'column'} justifyContent={'space-evenly'}\n                          alignItems={'flex-end'} alignSelf={'stretch'}>\n                        <Grid item> <Button variant={'outlined'} size={'medium'}\n                                            color={'primary'}>{t('labelBtnExportAccount')}</Button></Grid>\n                    </Grid>\n                </Grid>\n            </Box>\n        </StyledPaper>\n\n        <Typography variant={'h4'} component={'h3'} marginY={1} paddingLeft={2}>{t('labelTitlePreferences')}</Typography>\n        <StyledPaper item xs={12} display={'flex'} flexDirection={'column'} marginBottom={2} paddingY={2}>\n            <Box component={'section'} display={'flex'} flexDirection={'column'}>\n                {/*<Typography variant={'h5'} component={'h4'} paddingX={2}>{t('labelTitleLayout')}</Typography>*/}\n                {/*<StyledDivider/>*/}\n                <Grid container display={'flex'} flexDirection={'row'} justifyContent={'stretch'}\n                      alignItems={'flex-start'} paddingX={2} marginBottom={2}>\n                    <Grid item xs={7} display={'flex'} flexDirection={'column'}>\n                        <Typography variant={'body1'} component={'p'}>{t('labelLanguage')}</Typography>\n                    </Grid>\n                    <Grid item xs={5} display={'flex'} flexDirection={'column'} justifyContent={'space-evenly'}\n                          alignItems={'flex-end'} alignSelf={'stretch'}>\n                        <Grid item>\n                            <BtnLanguage {...{\n                                t, ...rest,\n                                language,\n                                label: 'languageSetting',\n                                handleChange: handleOnLanguageChange\n                            }}></BtnLanguage>\n                        </Grid>\n                    </Grid>\n                </Grid>\n                <Grid container display={'flex'} flexDirection={'row'} justifyContent={'stretch'}\n                      alignItems={'flex-start'} paddingX={2} marginBottom={2}>\n                    <Grid item xs={7} display={'flex'} flexDirection={'column'}>\n                        <Typography variant={'body1'} component={'p'}>{t('labelCurrency')}</Typography>\n                    </Grid>\n                    <Grid item xs={5} display={'flex'} flexDirection={'column'} justifyContent={'space-evenly'}\n                          alignItems={'flex-end'} alignSelf={'stretch'}>\n                        <Grid item>\n                            <BtnCurrency {...{\n                                t, ...rest,\n                                currency,\n                                label: 'currencySetting',\n                                handleChange: handleOnCurrencyChange\n                            }}></BtnCurrency>\n\n                        </Grid>\n                    </Grid>\n                </Grid>\n                <Grid container display={'flex'} flexDirection={'row'} justifyContent={'stretch'}\n                      alignItems={'flex-start'} paddingX={2}>\n                    <Grid item xs={7} display={'flex'} flexDirection={'column'}>\n                        <Typography variant={'body1'} component={'p'}>{t('labelColors')}</Typography>\n                    </Grid>\n                    <Grid item xs={5} display={'flex'} flexDirection={'row'} justifyContent={'flex-end'}\n                          alignItems={'center'} alignSelf={'stretch'}>\n                        <Typography variant={'body1'} component={'span'} paddingX={2}>\n                            <Trans i18nKey=\"whichColorIsUp\">\n                                <span style={{\n                                    textTransform: 'capitalize',\n                                    color: upColor === UpColor.green ? theme.colorBase.success : theme.colorBase.error\n                                }}>{{up: upColor === UpColor.green ? t('labelgreen') : t('labelred')}} up</span>\n                                and <span style={{\n                                textTransform: 'capitalize',\n                                color: upColor === UpColor.green ? theme.colorBase.error : theme.colorBase.success\n                            }}>{{down: upColor === UpColor.green ? t('labelred') : t('labelgreen')}} down</span>\n                            </Trans>\n                        </Typography>\n                        <StyledSwitch checked={upColor === UpColor.green} color=\"default\"\n                                      onChange={handleColorChange}/>\n                    </Grid>\n                </Grid>\n            </Box>\n\n        </StyledPaper>\n\n    </Grid>\n})\n\n// export const SettingPage = ({open,onClose}: { open:boolean, onClose:(e:any)=>void})=>{\n//     return  <MuiModalStyled\n//         open={open}\n//         onClose={onClose}\n//         aria-labelledby=\"modal-modal-title\"\n//         aria-describedby=\"modal-modal-description\"\n//     >\n//         <BlockStyled >\n//            <SettingPanel/>\n//         </BlockStyled>\n//     </MuiModalStyled>\n// }\n\n\n","import { useRouteMatch } from 'react-router'\n\nimport { Box, Paper } from '@material-ui/core'\nimport {\n    DepositPanel,\n    SubMenu,\n    SubMenuList as BasicSubMenuList,\n} from '@loopring-web/component-lib'\nimport { useTranslation, withTranslation } from 'react-i18next'\nimport styled from '@emotion/styled'\nimport { subMenuLayer2 } from '@loopring-web/component-lib/src/static-resource'\n\nimport TxPanel from './TxPanel'\nimport AssetPanel from './AssetPanel'\nimport TradePanel from './TradePanel'\nimport OrderPanel from './OrderPanel'\nimport { SettingPanel } from '../SettingPage';\nimport store from '../../stores';\nimport { AccountStatus } from '../../state_machine/account_machine_spec';\nimport { useModalProps } from '../../layouts/header/hook';\n\nexport const subMenu = subMenuLayer2;\nconst BoxStyle = styled(Box)`\n  ${({theme})=>`\n    background-color: ${theme.colorBase.background().default};\n    width: 100%;\n    min-width:auto;\n    ${theme.border.defaultFrame({c_key: 'blur'})};\n    & > div{\n      background-color:initial;\n      border:0;\n      width:auto;\n      min-width: var(--swap-box-width);\n      max-width: 520px;\n    }\n    `\n  }\n   \n` as typeof Box\n\nconst SubMenuList = withTranslation(['layout','common'], { withRef: true })(BasicSubMenuList);\nexport const Layer2Page = () => {\n\n    let match: any = useRouteMatch(\"/layer2/:item\")\n    const {status: accStatus} = store.getState().account;\n    const {t,...rest} = useTranslation()\n    const selected = match?.params.item ?? 'assets';\n    const {depositProps} = useModalProps()\n\n    return <>  { accStatus === AccountStatus.NOACCOUNT\n    || accStatus === AccountStatus.DEPOSITING\n    || accStatus === AccountStatus.DEPOSIT_TO_CONFIREM ?\n        <BoxStyle display={'flex'} flexWrap={'wrap'} alignItems={'center'} justifyContent={'center'} alignContent={'flex-start'}>\n            <DepositPanel  {...{\n                ...rest, ...depositProps,\n                title: t('depositTitleAndActive'),\n                description: 'depositAndActiveDescription'\n            }} > </DepositPanel>\n        </BoxStyle>: <>\n            <Box width={'200px'} display={'flex'} justifyContent={'stretch'} marginRight={3}>\n                <SubMenu>\n                    <SubMenuList selected={selected} subMenu={subMenu as any} />\n                </SubMenu>\n            </Box>\n            <Box minHeight={420} display={'flex'} alignItems={'stretch'} flexDirection={'column'} marginTop={0} flex={1}>\n                {selected === 'assets' && <AssetPanel />}\n                {selected === 'transactions' && <TxPanel />}\n                {selected === 'trades' && <TradePanel />}\n                {selected === 'orders' && <OrderPanel />}\n                {selected === 'setting' && <SettingPanel />}\n            </Box>\n        </>\n    }\n        </>\n\n\n\n}\n","import React from 'react';\nimport { useAmmMap } from '../../../stores/Amm/AmmMap';\nimport { AmmDetail, CustomError, ErrorMap, } from '@loopring-web/component-lib/src/static-resource';\nimport { useTicker } from '../../../stores/ticker';\nimport { deepClone } from '../../../utils/obj_tools';\nimport { STATUS } from '../../../stores/constant';\nimport { useTokenMap } from '../../../stores/token';\n\nexport function useAmmMapUI<R extends { [ key: string ]: any }, I extends { [ key: string ]: any }>({pageSize}: { pageSize: number }) {\n    const [rawData, setRawData] = React.useState<Array<AmmDetail<any>> | []>([]);\n    const [page, setPage] = React.useState<number>(1);\n    const {coinMap} = useTokenMap();\n    const {\n        ammMap,\n        status: ammMapStatus,\n        errorMessage: errorAmmMap,\n        statusUnset: ammMapStatusUnset,\n        updateAmmMap,\n    } = useAmmMap();\n    const {\n        tickerMap,\n        status: tickerStatus,\n        errorMessage: errorTickerMap,\n        statusUnset: tickerStatusUnset,\n        updateTickers,\n    } = useTicker();\n    const updateRawData = () => {\n        try {\n            const _ammMap = deepClone(ammMap);\n            for (let tickerMapKey in tickerMap) {\n                _ammMap[ tickerMapKey ].tradeFloat = tickerMap[ tickerMapKey ]\n            }\n            setRawData(Object.keys(_ammMap).map((ammKey: string) => {\n                if (coinMap) {\n                    _ammMap[ ammKey ][ 'coinAInfo' ] = coinMap[ _ammMap[ ammKey ][ 'coinA' ] ];\n                    _ammMap[ ammKey ][ 'coinBInfo' ] = coinMap[ _ammMap[ ammKey ][ 'coinB' ] ];\n                }\n                return  _ammMap[ ammKey ];\n            }) )\n        } catch (error) {\n            throw new CustomError({...ErrorMap.NO_TOKEN_MAP, options: error})\n        }\n\n    }\n\n\n    const updateTickersUI = React.useCallback((_page) => {\n        setPage(_page);\n        if (ammMap && Object.keys(ammMap).length > 0) {\n            const keys = []\n            for (let i = (page - 1) * pageSize; i < Object.keys(ammMap).length && i < (page - 1) * pageSize + pageSize; i++) {\n                keys.push(Object.keys(ammMap)[ i ]);\n            }\n            updateTickers(keys);\n        }\n    }, [ammMap, page, pageSize, updateTickers])\n    React.useEffect(() => {\n        switch (tickerStatus) {\n            case \"ERROR\":\n                console.log(\"ERROR\", 'get ticker error,ui');\n                tickerStatusUnset()\n                break;\n            case \"PENDING\":\n                break;\n            case \"DONE\":\n                tickerStatusUnset()\n                updateRawData()\n                break;\n            default:\n                break;\n        }\n    }, [tickerStatus, tickerStatusUnset]);\n\n    // init AmmMap at begin\n    React.useEffect(() => {\n        if (!ammMap || Object.keys(ammMap).length === 0) {\n            updateAmmMap();\n        } else {\n            updateTickersUI(page)\n        }\n    }, []);\n\n\n    React.useEffect(() => {\n        switch (ammMapStatus) {\n            case \"ERROR\":\n                console.log(\"ERROR\", 'get ammMap error,ui');\n                ammMapStatusUnset();\n                break;\n            case STATUS.PENDING:\n                console.log(\"PENDING\", 'get ammMap error,ui');\n                break;\n            case STATUS.DONE:\n                ammMapStatusUnset();\n                updateTickersUI(1)\n                break;\n            default :\n                break;\n        }\n    }, [ammMapStatus, ammMapStatusUnset, updateTickersUI]);\n    return {\n        page,\n        rawData,\n        updateTickersUI,\n    }\n}\n\n","import { WithTranslation, withTranslation } from 'react-i18next'\nimport { Box, } from '@material-ui/core'\nimport styled from '@emotion/styled'\n\nimport React from 'react';\nimport { useAmmMapUI } from './hook';\n\nimport { PoolsTable } from '@loopring-web/component-lib';\n\nconst StylePaper = styled(Box)`\n  width: 100%;\n  height: 100%;\n  flex: 1;\n  background-color: ${({theme}) => theme.colorBase.background().default};\n  border-radius: ${({theme}) => theme.unit}px;\n\n  .rdg {\n    flex: 1;\n  }\n\n` as typeof Box;\n\n\nexport const PoolsPanel = withTranslation('common')(<R, I>({t, ...rest}: WithTranslation) => {\n    const container = React.useRef(null);\n    const [pageSize, setPageSize] = React.useState(10);\n    const {updateTickersUI,rawData, page} = useAmmMapUI({pageSize});\n\n    React.useEffect(() => {\n        // @ts-ignore\n        let height = container?.current?.offsetHeight;\n        if (height) {\n            setPageSize(Math.floor((height - 120) / 44) - 1);\n        }\n    }, [container, pageSize]);\n\n    const handlePageChange = React.useCallback((page) =>{\n        updateTickersUI(page)\n    },[updateTickersUI]);\n    return (\n        <>\n            <StylePaper display={'flex'} flexDirection={'column'} ref={container}>\n                <PoolsTable {...{\n                    rawData,\n                    handlePageChange,\n                    page,\n                    pagination: {\n                        pageSize\n                    }\n                }} />\n            </StylePaper>\n        </>\n    )\n})\n\n","import { AmmPanelType } from '@loopring-web/component-lib';\nimport { AmmDetailBase } from '@loopring-web/component-lib/src/static-resource';\nimport * as fm from 'loopring-sdk';\nimport { BIG10 } from '../../defs/swap_defs';\nimport { getBaseQuote, TokenInfo, TokenVolumeV3 } from 'loopring-sdk';\nimport { getToken } from '../../utils/swap_calc_utils';\n\nexport const ammPairInit = ({pair, _ammCalcData,ammType,tokenMap, coinMap, walletMap,ammMap ,tickerData,ammpoolsbalance}:any)=>{\n    _ammCalcData.coinInfoMap = coinMap;\n    if(tickerData){\n        // debugger\n        _ammCalcData.AtoB =  Number(tickerData.close)\n    }\n    if(isNaN(_ammCalcData.AtoB) && ammpoolsbalance){\n\n        const baseVol = (fm.toBig(ammpoolsbalance.pooled[0].volume).div(BIG10.pow(tokenMap[pair.coinAInfo.simpleName].decimals)))\n        const quoteVol = (fm.toBig(ammpoolsbalance.pooled[1].volume).div(BIG10.pow( tokenMap[pair.coinBInfo.simpleName].decimals)))\n        _ammCalcData.AtoB = quoteVol.div(baseVol).toNumber()\n\n    }\n    if(pair.coinAInfo){\n        if(ammType === AmmPanelType.Deposit ) {\n            _ammCalcData.myCoinA = {\n                belong: pair.coinAInfo.simpleName,\n                balance: walletMap ? walletMap[ pair.coinAInfo.simpleName ]?.count : 0,\n            }\n            _ammCalcData.myCoinB = {\n                belong: pair.coinBInfo.simpleName,\n                balance: walletMap ? walletMap[ pair.coinBInfo.simpleName ]?.count : 0,\n            }\n        }else {\n            const key = `${pair.coinAInfo.simpleName}-${pair.coinBInfo.simpleName}`;\n            let coinACount = 0,coinBCount = 0 ;\n            if(walletMap){\n                const  balance =  walletMap ? walletMap[ 'LP-' + key ]?.count : 0;\n                const {totalLPToken,totalA,totalB}:AmmDetailBase<any> = ammMap[ 'AMM-' + key ];\n                if(totalA && totalLPToken &&totalB) {\n                    coinACount = totalA / totalLPToken * balance;\n                    coinBCount = totalB / totalLPToken * balance;\n                }\n            }\n            _ammCalcData.myCoinA = {\n                belong: pair.coinAInfo.simpleName,\n                balance: coinACount,\n            }\n            _ammCalcData.myCoinB = {\n                belong: pair.coinBInfo.simpleName,\n                balance: coinBCount,\n            }\n        }\n    }\n\n\n    return  _ammCalcData\n}\n","import { AmmPanel, AmmPanelType } from '@loopring-web/component-lib';\nimport { AmmData, AmmInData, CoinInfo, IBData, WalletMap } from '@loopring-web/component-lib/static-resource';\nimport { useAmmPanel } from './hooks';\nimport React from 'react';\nimport { Box } from '@material-ui/core';\nimport { AmmPoolSnapshot, TickerData } from 'loopring-sdk';\nimport { TradeBtnStatus } from '@loopring-web/component-lib/components/panel/index';\n\nexport const AmmPanelView = <T extends AmmData<C extends IBData<I> ? C : IBData<I>>, I,\n    ACD extends AmmInData<I>,\n    C = IBData<I>>({\n                       pair,\n                       walletMap,\n                       ammType, snapShotData,\n                       ...rest\n                   }: {\n    pair: { coinAInfo: CoinInfo<C> | undefined, coinBInfo: CoinInfo<C> | undefined },\n    snapShotData: { tickerData: TickerData | undefined, ammpoolsbalance: AmmPoolSnapshot | undefined } | undefined\n    walletMap: WalletMap<C>\n    ammType?: keyof typeof AmmPanelType\n} & any) => {\n    const {\n        ammCalcData,\n        ammDepositData,\n        ammWithdrawData,\n        handleDepositEvent,\n        handleWithDrawEvent,\n        onAmmWithdrawClick,\n        onAmmDepositClick,\n        ammDepositBtnI18nKey,\n        ammWithdrawBtnI18nKey,\n    } = useAmmPanel({\n        pair,\n        snapShotData, walletMap, ammType: ammType ? ammType : AmmPanelType.Deposit\n    })\n\n    // const [index, setIndex] = React.useState(AmmPanelTypeMap[ tabSelected ]);\n    const isLoading = React.useCallback(()=>{\n        if((!snapShotData || !snapShotData.tradeData || !snapShotData.ammpoolsbalance)\n            &&  ammDepositBtnI18nKey === undefined\n            &&  ammWithdrawBtnI18nKey === undefined\n        ) {\n          return true\n        }\n    },[snapShotData,ammWithdrawBtnI18nKey,ammWithdrawBtnI18nKey])\n\n    return <> {pair ?\n        <AmmPanel {...{...rest}}\n                  ammWithdrawData={ammWithdrawData}\n                  ammDepositData={ammDepositData}\n                  ammCalcData={ammCalcData}\n                  handleDepositEvent={handleDepositEvent}\n                  handleWithDrawEvent={handleWithDrawEvent}\n                  onAmmWithdrawClick={onAmmWithdrawClick}\n                  onAmmDepositClick={onAmmDepositClick}\n                  tabSelected={ammType ? ammType : AmmPanelType.Deposit}\n                  ammDepositBtnI18nKey={ammDepositBtnI18nKey}\n                  ammWithdrawBtnI18nKey={ammWithdrawBtnI18nKey}\n                  ammDepositBtnStatus={isLoading()?TradeBtnStatus.LOADING:TradeBtnStatus.AVAILABLE}\n                  ammWithdrawBtnStatus={isLoading()?TradeBtnStatus.LOADING:TradeBtnStatus.AVAILABLE}\n\n        /> : <Box width={'var(--swap-box-width)'}/>}\n    </>\n\n}","import React from \"react\";\nimport { AmmData, AmmInData, CoinInfo, IBData } from '@loopring-web/component-lib/src/static-resource';\nimport { AmmPanelType } from '@loopring-web/component-lib';\nimport { useTokenMap } from '../../../stores/token';\nimport { useAmmMap } from '../../../stores/Amm/AmmMap';\nimport { ammPairInit } from '../../../hooks/help/ammPairDetail';\nimport {  WalletMap } from '@loopring-web/component-lib/static-resource';\nimport { AmmPoolSnapshot, getExistedMarket, TickerData } from 'loopring-sdk';\nimport { useCustomDCEffect } from '../../../hooks/common/useCustomDCEffect';\nimport { accountStaticCallBack, bntLabel, btnClickArray, fnType } from '../../../hooks/help/connetStatusCallback';\nimport { useAccount } from '../../../stores/account/hook';\nimport { updateWallet } from '../../../hooks/help/updateWallet';\nimport { getUserAmmTransaction, makeMyAmmMarketArray } from '../../../hooks/help/marketTable';\n\n\n\nexport const useAmmPanel = <C extends { [ key: string ]: any }>({\n                                                                    pair,\n                                                                    walletMap,\n                                                                    ammType,\n                                                                    snapShotData,\n                                                                }\n                                                                    : {\n    pair: { coinAInfo: CoinInfo<C> | undefined, coinBInfo: CoinInfo<C> | undefined },\n    snapShotData:{ tickerData: TickerData|undefined,ammpoolsbalance: AmmPoolSnapshot|undefined }|undefined\n    walletMap: WalletMap<C>\n    ammType: keyof typeof AmmPanelType\n}) => {\n    // const walletLayer2State = useWalletLayer2();\n    const {coinMap, tokenMap} = useTokenMap();\n    const {ammMap} = useAmmMap();\n    const {account} = useAccount();\n\n    const [ammCalcData, setAmmCalcData] = React.useState<AmmInData<C> | undefined>();\n    const [ammDepositData, setAmmDepositData] = React.useState<AmmData<IBData<C>, C>>({\n        coinA: {belong: undefined} as unknown as IBData<C>,\n        coinB: {belong: undefined} as unknown as IBData<C>,\n        slippage: .5\n    } as AmmData<IBData<C>, C>);\n    const [ammWithdrawData, setAmmWithdrawData] = React.useState({\n        coinA: {belong: undefined} as unknown as IBData<C>,\n        coinB: {belong: undefined} as unknown as IBData<C>,\n        slippage: .5\n    } as AmmData<IBData<C>, C>);\n    const [ammDepositBtnI18nKey, setAmmDepositBtnI18nKey] = React.useState<string | undefined>(undefined);\n    const [ammWithdrawBtnI18nKey, setAmmWithdrawBtnI18nKey] = React.useState<string | undefined>(undefined);\n\n    const initAmmData = React.useCallback(async (pair: any) => {\n        let _ammCalcData: Partial<AmmInData<C>> = ammPairInit(\n            {\n                pair,\n                ammType,\n                _ammCalcData: {},\n                tokenMap,\n                coinMap,\n                walletMap: walletMap, //walletLayer2State.walletLayer2,\n                ammMap,\n                tickerData:snapShotData?.tickerData,\n                ammpoolsbalance: snapShotData?.ammpoolsbalance\n            })\n        setAmmCalcData({...ammCalcData, ..._ammCalcData} as AmmInData<C>);\n        if (_ammCalcData.myCoinA) {\n            if (ammType === AmmPanelType.Deposit) {\n                setAmmDepositData({\n                    coinA: _ammCalcData.myCoinA as IBData<C>,\n                    coinB: _ammCalcData.myCoinB as IBData<C>,\n                    slippage: 0.5\n                })\n            } else {\n                setAmmWithdrawData({\n                    coinA: _ammCalcData.myCoinA as IBData<C>,\n                    coinB: _ammCalcData.myCoinB as IBData<C>,\n                    slippage: 0.5\n                })\n            }\n        }\n    },[snapShotData,walletMap])\n\n    const handleDepositEvent = React.useCallback((data: AmmData<IBData<C>>, type: 'coinA' | 'coinB') => {\n        console.log('handleDepositEvent', data, type);\n    }, []);\n\n    const handleWithDrawEvent = React.useCallback((data: AmmData<IBData<C>>, type: 'coinA' | 'coinB') => {\n        console.log('handleDepositEvent', data, type);\n    }, []);\n\n\n    React.useEffect(() => {\n        if (snapShotData) {\n            initAmmData(pair)\n        }\n    }, [snapShotData,pair,initAmmData,walletMap]);\n\n\n\n    useCustomDCEffect(() => {\n        const label:string|undefined = accountStaticCallBack(bntLabel)\n        setAmmDepositBtnI18nKey(label);\n        setAmmWithdrawBtnI18nKey(label)\n    }, [account.status, bntLabel])\n\n\n    const onAmmWithdrawClick = React.useCallback((props:AmmData<IBData<C>>) => {\n        const  onAmmWithdrawClickArray: typeof  btnClickArray =  Object.assign(btnClickArray,{\n            [ fnType.ACTIVATED ]: [  function (props:AmmData<IBData<C>>) {\n                //TODO: onWithdraw\n                console.log('onAmmWithdraw',props)\n            },props]\n        })\n        accountStaticCallBack(onAmmWithdrawClickArray)\n    }, []);\n\n    const onAmmDepositClick = React.useCallback((props:AmmData<IBData<C>>) => {\n        const  onAmmDepositClickArray: typeof  btnClickArray =  Object.assign(btnClickArray,{\n            [ fnType.ACTIVATED ]: [  function () {\n                //TODO: onDeposit\n                console.log(' onAmmDeposit',props)\n            },props]\n        })\n        accountStaticCallBack(onAmmDepositClickArray)\n    }, []);\n\n\n    return {\n        ammCalcData,\n        ammDepositData,\n        ammWithdrawData,\n        handleDepositEvent,\n        handleWithDrawEvent,\n        onAmmWithdrawClick,\n        onAmmDepositClick,\n        ammDepositBtnI18nKey,\n        ammWithdrawBtnI18nKey,\n    }\n}","import store from '../../stores';\nimport { LoopringAPI } from '../../stores/apis/api';\nimport { AmmUserRewardMap } from 'loopring-sdk';\n\nexport const getAmmPoolUserRewards = (): Promise<AmmUserRewardMap|undefined> => {\n    const {accountId} = store.getState().account\n    if(LoopringAPI.ammpoolAPI) {\n       return  LoopringAPI.ammpoolAPI.getAmmPoolUserRewards({owner:accountId}).then(({ammUserRewardMap}) => {\n            return ammUserRewardMap\n        })\n    }else{\n        return  Promise.reject(undefined)\n    }\n}\n","import React from \"react\";\nimport {\n    AmmActivity,\n    CoinInfo,\n    TradeFloat,\n    WalletMap\n} from \"@loopring-web/component-lib/static-resource\";\nimport { useTokenMap } from \"stores/token\";\nimport { useRouteMatch } from 'react-router';\nimport { AmmDetailStore, useAmmMap } from '../../../stores/Amm/AmmMap';\nimport { useWalletLayer2 } from '../../../stores/walletLayer2';\nimport { pairDetailBlock } from '../../../hooks/help/pairDetail';\nimport { AmmPoolSnapshot, AmmUserRewardMap, getExistedMarket, TickerData } from 'loopring-sdk';\nimport { makeTickView } from '../../../hooks/help/makeTickView';\nimport { useAmmActivityMap } from '../../../stores/Amm/AmmActivityMap';\nimport { deepClone } from '../../../utils/obj_tools';\nimport { updateWallet } from '../../../hooks/help/updateWallet';\nimport {\n    getUserAmmTransaction, makeMyAmmMarketArray\n} from '../../../hooks/help/marketTable';\nimport BigNumber from 'bignumber.js'\nimport { AmmRecordRow } from '@loopring-web/component-lib/components/tableList/ammRecordTable/Interface';\nimport { AmmUserReward, TokenVolumeV3, UserAmmPoolTx } from 'loopring-sdk/dist/defs/loopring_defs';\nimport { MyAmmLP } from '@loopring-web/component-lib/src/static-resource';\nimport { LoopringAPI } from '../../../stores/apis/api';\nimport { getAmmPoolUserRewards } from '../../../hooks/help/myAmm';\nimport { useSystem } from '../../../stores/system';\nimport { BIG10 } from '../../../defs/swap_defs';\n\nconst makeAmmDetailExtendsActivityMap = ({ammMap, coinMap, ammActivityMap, ammKey}: any) => {\n    if (ammMap && coinMap) {\n        let ammDetail = deepClone(ammMap[ ammKey as string ]);\n        const ammActivity = ammActivityMap [ ammKey as string ];\n        \n        if (ammDetail && ammDetail.coinA) {\n            ammDetail.myCoinA = coinMap[ ammDetail.coinA ];\n            ammDetail.myCoinB = coinMap[ ammDetail.coinB ];\n            ammDetail[ 'activity' ] = ammActivity ? ammActivity : {};\n        }\n        return ammDetail;\n    }\n}\ntype PgAmmDetail<C extends { [ key: string ]: any }> = AmmDetailStore<C> & {\n    myCoinA: CoinInfo<C>,\n    myCoinB: CoinInfo<C>,\n    activity: AmmActivity<C> | undefined\n}\n\nexport const useCoinPair = <C extends { [ key: string ]: any }>() => {\n    const match: any = useRouteMatch(\"/liquidity/pools/coinPair/:symbol\")\n    const {coinMap, tokenMap, marketArray} = useTokenMap();\n    const {faitPrices} = useSystem();\n    const ammMapState = useAmmMap();\n    const {ammActivityMap} = useAmmActivityMap()\n    const {ammMap, updateAmmMap} = ammMapState;\n\n    // const {ammMap,updateAmmMap} = useAmmMap();\n    const walletLayer2State = useWalletLayer2();\n    const [walletMap, setWalletMap] =  React.useState<WalletMap<C>|undefined>(undefined);\n    // const [ammRecordArray, setAmmRecordArray] = React.useState<AmmRecordRow<C>[]>([]);\n    const [ammMarketArray, setAmmMarketArray] = React.useState<AmmRecordRow<C>[]>([]);\n    const [myAmmMarketArray, setMyAmmMarketArray] = React.useState<AmmRecordRow<C>[]>([]);\n    const [ammUserRewardMap, setAmmUserRewardMap] = React.useState<AmmUserRewardMap|undefined>(undefined);\n    const [snapShotData,setSnapShotData] = React.useState<{\n        tickerData: TickerData|undefined\n        ammpoolsbalance: AmmPoolSnapshot|undefined\n    }|undefined>(undefined);\n\n    const [myAmm, setMyAmm] = React.useState<MyAmmLP<C>>(\n        {\n            feeA: 0,\n            feeB: 0,\n            feeDollar: 0,\n            feeYuan: 0,\n            reward: 0,\n            rewardToken: undefined as any,\n            balanceA: 0,\n            balanceB: 0,\n            balanceYuan: 0,\n            balanceDollar: 0,\n        })\n    // const [ammpoolsbalance, setAmmpoolsbalance] = React.useState<AmmPoolSnapshot|undefined>(undefined);\n    const [coinPairInfo, setCoinPairInfo] = React.useState<PgAmmDetail<C>>({\n        myCoinA: undefined,\n        myCoinB: undefined,\n        activity: undefined,\n        totalRewards: undefined,\n        amountDollar: undefined,\n        amountYuan: undefined,\n        totalLPToken: undefined,\n        totalA: undefined,\n        totalB: undefined,\n        rewardToken: undefined,\n        rewardValue: undefined,\n        feeA: undefined,\n        feeB: undefined,\n        isNew: undefined,\n        isActivity: undefined,\n    } as unknown as PgAmmDetail<C>);\n    const [tradeFloat, setTradeFloat] = React.useState<TradeFloat | undefined>(undefined);\n    const [pair, setPair] = React.useState<{ coinAInfo: CoinInfo<C> | undefined, coinBInfo: CoinInfo<C> | undefined }>({\n        coinAInfo: undefined,\n        coinBInfo: undefined,\n    });\n\n    React.useEffect(() => {\n        const coinKey = match?.params.symbol ?? undefined;\n        let _tradeFloat: Partial<TradeFloat> = {}\n        const [, coinA, coinB] = coinKey.match(/(\\w+)-(\\w+)/i)\n        let {\n            amm,\n            market\n        } = getExistedMarket(marketArray, coinA, coinB);\n\n        const _coinPairInfo = makeAmmDetailExtendsActivityMap({ammMap, coinMap, ammActivityMap, ammKey: amm})\n        setCoinPairInfo(_coinPairInfo ? _coinPairInfo : {})\n\n        if (coinMap) {\n            setPair({\n                coinAInfo: coinMap[ coinA ],\n                coinBInfo: coinMap[ coinB ]\n            })\n        }\n\n        let _walletMap: WalletMap<C>|undefined = undefined\n        if (walletLayer2State.walletLayer2) {\n            _walletMap = updateWallet().walletMap;\n            setWalletMap(_walletMap)\n            getUserAmmTransaction(market)?.then((marketTrades: UserAmmPoolTx[])=>{\n                let _myTradeArray = makeMyAmmMarketArray(market, marketTrades)\n                setMyAmmMarketArray(_myTradeArray?_myTradeArray:[])\n            })\n\n        }\n\n        if (amm && market && ammMap) {\n            // let pairPromise =  usePairTitleBlock({market})\n            //TODO should add it into websocket\n            updateAmmMap();\n            let apiList  = [\n                pairDetailBlock({coinKey: market, ammKey: amm, ammMap}),\n                getAmmPoolUserRewards()\n            ];\n            // @ts-ignore\n            Promise.all([...apiList]).then(\n                ([{ammpoolsbalance,tickMap},ammUserRewardMap]: any[]) => {\n                    if (tokenMap) {\n                        const _snapShotData =  {\n                            tickerData: tickMap[ market ],\n                            ammpoolsbalance: ammpoolsbalance,\n                        }\n                        _tradeFloat = makeTickView(tickMap[ market ]?tickMap[ market ]: {})\n                        setTradeFloat(_tradeFloat as TradeFloat);\n                        setCoinPairInfo({..._coinPairInfo,tradeFloat: {..._tradeFloat,\n                              APY:  _coinPairInfo.APY\n                            }})\n\n                        setSnapShotData(_snapShotData)\n                        setAmmUserRewardMap(ammUserRewardMap)\n                        const _myAmm:MyAmmLP<C> = makeMyAmm(market,_walletMap,ammUserRewardMap,_snapShotData);\n                        setMyAmm(_myAmm);\n                    }\n                }).catch((error)=>{\n                console.log(error);\n                throw  Error\n            })\n        }\n\n    }, []);\n    const makeMyAmm = React.useCallback((market:any,_walletMap,ammUserRewardMap,snapShotData)=>{\n        const [, coinA, coinB] = market.match(/(\\w+)-(\\w+)/i)\n        if(  _walletMap\n            && ammUserRewardMap && ammUserRewardMap['AMM-'+market]\n            &&  _walletMap['LP-'+ market]\n            && snapShotData && snapShotData.ammpoolsbalance){\n            const ammUserReward:AmmUserReward = ammUserRewardMap['AMM-'+market]\n\n            // @ts-ignore\n            const ratio = BigNumber(_walletMap['LP-' + market].detail.total).div(snapShotData.ammpoolsbalance.lp.volume)\n            if (coinMap && tokenMap) {\n                let _myAmm: MyAmmLP<C> = {\n                    feeA: ammUserReward ? Number(ammUserReward.feeRewards[ 0 ]) : 0,\n                    feeB: ammUserReward ? Number(ammUserReward.feeRewards[ 1 ]) : 0,\n                    // feeDollar: 0,\n                    // feeYuan: 0,\n                    reward: ammUserReward ?  Number(ammUserReward.currentRewards[ 0 ].volume):0,\n                    rewardToken: ammUserReward && ammUserReward.currentRewards[ 0 ] ? coinMap[ ammUserReward.currentRewards[ 0 ].tokenId ]:undefined,\n                    balanceA: ratio.times(snapShotData.ammpoolsbalance.pooled[ 0 ].volume).div(BIG10.pow(tokenMap[coinA].decimals)).toNumber(),\n                    balanceB: ratio.times(snapShotData.ammpoolsbalance.pooled[ 1 ].volume).div(BIG10.pow(tokenMap[coinB].decimals)).toNumber(),\n                    balanceYuan: 0,\n                    balanceDollar: 0,\n                }  as MyAmmLP<C>\n                _myAmm.feeDollar = _myAmm.feeA  * faitPrices[coinA].price;\n                _myAmm.feeDollar = _myAmm.feeB  * faitPrices[coinB].price;\n                return  _myAmm\n            }\n        }\n        return {\n            feeA: 0,\n            feeB: 0,\n            feeDollar: 0,\n            feeYuan: 0,\n            reward: 0,\n            rewardToken: undefined as any,\n            balanceA: 0,\n            balanceB: 0,\n            balanceYuan: 0,\n            balanceDollar: 0,\n        }\n    },[])\n\n    React.useEffect(() => {\n        switch (walletLayer2State.status) {\n            case \"ERROR\":\n                walletLayer2State.statusUnset();\n                // setState('ERROR')\n                //TODO: show error at button page show error  some retry dispath again\n                break;\n            case \"DONE\":\n                walletLayer2State.statusUnset();\n                const {walletMap : _walletMap} = updateWallet();\n                setWalletMap(_walletMap)\n                if (_walletMap) {\n                    let {amm, market} = getExistedMarket(marketArray, pair.coinAInfo?.simpleName as string, pair.coinBInfo?.simpleName as string);\n                    const _myAmm:MyAmmLP<C> = makeMyAmm(market,_walletMap,ammUserRewardMap,snapShotData);\n                    setMyAmm(_myAmm)\n                    getUserAmmTransaction(market)?.then((marketTrades)=>{\n                        let _myTradeArray  = makeMyAmmMarketArray(market, marketTrades)\n                        setMyAmmMarketArray(_myTradeArray?_myTradeArray:[])\n                    })\n                }\n                break;\n            default:\n                break;\n\n        }\n    }, [walletLayer2State.status,setMyAmmMarketArray,ammUserRewardMap,makeMyAmm,snapShotData])\n\n    //TODO tickMap\n    React.useEffect(() => {\n    }, [])\n\n    React.useEffect(() => {\n        if (ammMapState.status === \"ERROR\") {\n            //TODO: solve error\n            ammMapState.statusUnset();\n        } else if (ammMapState.status === \"DONE\") {\n            ammMapState.statusUnset();\n            if (ammMapState.ammMap && pair.coinAInfo?.simpleName && pair.coinBInfo?.simpleName) {\n                const _coinPairInfo = makeAmmDetailExtendsActivityMap(\n                    {\n                        ammMap,\n                        coinMap,\n                        ammActivityMap,\n                        ammKey: 'AMM-' + pair.coinAInfo.simpleName + pair.coinBInfo.simpleName\n                    })\n                setCoinPairInfo({...coinPairInfo,..._coinPairInfo})\n\n                // setCoinPairInfo(_coinPairInfo ? _coinPairInfo : {})\n            }\n\n            // tokenState.statusUnset()\n            // setState('DONE');\n        }\n    }, [ammMapState.status, ammMapState.ammMap, ammMapState.statusUnset, pair, ammActivityMap, tokenMap, setCoinPairInfo])\n\n\n\n    return {\n        walletMap,\n        myAmm,\n        // tickerData,\n        coinPairInfo,\n        snapShotData,\n        // ammpoolsbalance,\n        pair,\n        tradeFloat,\n        ammMarketArray,\n        myAmmMarketArray,\n    }\n}","import React from 'react';\nimport { withTranslation } from 'react-i18next';\nimport { AmmRecordTable, TradeBtnStatus, TradeTable, TradeTitle, useSettings } from '@loopring-web/component-lib';\nimport { Currency, getThousandFormattedNumbers, PriceTag } from '@loopring-web/component-lib/static-resource';\nimport { Box, Breadcrumbs, Grid, Hidden, Link, Typography, } from '@material-ui/core';\nimport { AmmPanelView } from '../AmmPanel';\nimport moment from 'moment';\nimport styled from '@emotion/styled/';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\n\nimport { useCoinPair } from './hooks';\n\n\n//******************** page code ************************//\nconst BoxStyled = styled(Box)`\n  ${({theme}) => theme.border.defaultFrame({c_key: 'blur'})};\n  background-color: ${({theme}) => theme.colorBase.background().default};\n`;\nconst StylePaper = styled(Box)`\n  width: 100%;\n  height: 100%;\n  flex: 1;\n  background-color: ${({theme}) => theme.colorBase.background().default};\n  border-radius: ${({theme}) => theme.unit}px;\n\n  .rdg {\n    flex: 1;\n  }\n\n` as typeof Box;\n\nconst applyProps = (index: number) => {\n    return {\n        id: `simple-tab-${index}`,\n        'aria-controls': `tabpanel-${index}`,\n    }\n}\n\nexport const CoinPairPanel = withTranslation('common')(({t, ...rest}: any) => {\n    //TODO: checkRouter\n\n    const {currency} = useSettings();\n    const {tradeFloat,snapShotData, pair, coinPairInfo, walletMap,ammMarketArray,myAmmMarketArray,myAmm} = useCoinPair();\n    const [tabIndex, setTabIndex] = React.useState<0 | 1>(0);\n    const [page, setPage] = React.useState(rest?.page ? rest.page : 1);\n    const handleChange = (event: any, newValue: 0 | 1) => {\n        setTabIndex(newValue);\n        setPage(1);\n    }\n    const _handlePageChange = React.useCallback((page: number) => {\n        setPage(page);\n    }, [])\n\n\n    return <>\n\n        <Grid container>\n            <Grid item xs={8}>\n                <Breadcrumbs aria-label=\"breadcrumb\">\n                    <Link color=\"textSecondary\" href=\"/#/liquidity/pools\">\n                        {t('labelAmmList')}\n                    </Link>\n                    <Typography color={'textSecondary'} display={'flex'} alignItems={'center'}\n                                justifyContent={'center'}\n                    >{pair.coinAInfo?.simpleName}-{pair.coinBInfo?.simpleName}</Typography>\n                </Breadcrumbs>\n            </Grid>\n            <Grid item xs={4} alignItems={'center'} justifyContent={'flex-end'} display={'flex'}>\n                <Link href=\"/#/liquidity/pools\" variant={'h5'}>\n                    {t('labelBack')}\n                </Link>\n            </Grid>\n        </Grid>\n        <Grid container marginTop={3}>\n            <Grid item xs={7}>\n                <TradeTitle {...{\n                    ...rest, t,\n                    ...pair,\n                    tradeFloat,\n                    isNew: false\n                }}></TradeTitle>\n            </Grid>\n        </Grid>\n        <Box flex={1} display={'flex'} alignItems={'stretch'} flexDirection=\"row\" marginTop={3}>\n            <Box flex={1} display={'flex'}>\n                <Grid container spacing={2} wrap={'nowrap'}>\n                    <Grid item md={5} xs={12} paddingRight={2} display={'flex'} flexDirection={'column'}\n                          alignItems={'stretch'} justifyContent={'space-between'}>\n                        <BoxStyled paddingY={3} paddingX={1 / 2 * 5} display={'flex'} flexDirection={'column'}>\n                            <Typography component={'p'} color={'textSecondary'} display={'flex'}\n                                        justifyContent={'space-between'}>\n                                <Typography component={'span'}\n                                            style={{textTransform: 'capitalize'}}>{t('labelLiquidity')}</Typography>\n                                <Typography component={'span'}\n                                            style={{textTransform: 'uppercase'}}>{t('labelAPY')}</Typography>\n                            </Typography>\n                            <Typography component={'p'} color={'textPrimary'} display={'flex'}\n                                        justifyContent={'space-between'} marginTop={1}>\n                                <>\n                                    <Typography\n                                        component={'span'}> {typeof coinPairInfo.amountDollar === 'undefined' ? 'N/A' :\n                                        currency === Currency.dollar ? PriceTag.Dollar + getThousandFormattedNumbers(coinPairInfo.amountDollar) : PriceTag.Yuan + getThousandFormattedNumbers(coinPairInfo.amountYuan ? coinPairInfo.amountYuan : 0)}\n                                    </Typography>\n                                    <Typography\n                                        component={'span'}> {coinPairInfo.tradeFloat ? coinPairInfo.tradeFloat.APY : 'N/A'}%\n                                    </Typography>\n                                </>\n\n\n                            </Typography>\n\n                            <Typography component={'p'} color={'textSecondary'} display={'flex'}\n                                        justifyContent={'space-between'} marginTop={2}>\n                                <Typography component={'span'}\n                                            color={'textSecondary'}>\n                                    <Hidden mdDown>{t('labelLPTotal')}</Hidden>{t('labelLPTokens')}</Typography>\n                                <Typography component={'span'}\n                                            color={'textSecondary'}>{coinPairInfo.totalLPToken}</Typography>\n                            </Typography>\n                            <Typography component={'p'} color={'textSecondary'} display={'flex'}\n                                        justifyContent={'space-between'} marginTop={1}>\n\n                                <Typography component={'span'}\n                                            color={'textSecondary'}>\n                                    <Hidden\n                                        mdDown>{t('labelLPTotal')}</Hidden>{coinPairInfo.myCoinA?.simpleName}\n                                </Typography>\n\n                                <Typography component={'span'}\n                                            color={'textSecondary'}>{coinPairInfo.totalA}</Typography>\n                            </Typography>\n                            <Typography component={'p'} color={'textSecondary'} display={'flex'}\n                                        justifyContent={'space-between'} marginTop={1}>\n                                <Typography component={'span'}\n                                            color={'textSecondary'}>\n                                    <Hidden\n                                        mdDown>{t('labelLPTotal')}</Hidden>{coinPairInfo.myCoinB?.simpleName}\n                                </Typography>\n                                <Typography component={'span'}\n                                            color={'textSecondary'}>{coinPairInfo.totalB}</Typography>\n                            </Typography>\n\n                        </BoxStyled>\n                        <BoxStyled paddingY={3} paddingX={1 / 2 * 5} display={'flex'} flexDirection={'column'}>\n                            <Typography component={'p'} color={'textSecondary'} display={'flex'}\n                                        justifyContent={'space-between'} alignItems={'center'}>\n                                <Typography component={'span'} color={'textSecondary'} variant={'body2'} style={{textTransform: 'capitalize'}}>\n                                    {coinPairInfo.tradeFloat?.timeUnit} {t('labelVolume')}\n                                </Typography>\n                                <Typography component={'span'} color={'textSecondary'}>\n                                    {t('labelFee')} {/* ' : '*/}\n                                </Typography>\n                            </Typography>\n                            <Typography component={'p'} color={'textSecondary'} display={'flex'}\n                                        justifyContent={'space-between'} marginTop={1} alignItems={'center'}>\n                                <Typography component={'span'} variant={'h4'} color={'textPrimary'}>\n                                    {currency === Currency.dollar ? PriceTag.Dollar + getThousandFormattedNumbers(coinPairInfo.tradeFloat && coinPairInfo.tradeFloat.priceDollar ? coinPairInfo.tradeFloat.priceDollar as number : 0)\n                                        : PriceTag.Yuan + getThousandFormattedNumbers(coinPairInfo.tradeFloat && coinPairInfo.tradeFloat.priceYuan ? coinPairInfo.tradeFloat.priceYuan as number : 0)}\n                                </Typography>\n                                <Typography noWrap textAlign={'center'} component={'span'} color={'textSecondary'}\n                                            variant={'body2'} textOverflow={'ellipsis'} display={'flex'}\n                                            alignItems={'center'}>\n                                    <Typography component={'span'} color={'inherit'} variant={'inherit'}\n                                                display={'flex'} flexDirection={'column'}>\n                                        <Typography component={'span'} color={'inherit'} variant={'inherit'}>\n                                            {coinPairInfo.myCoinA?.simpleName}\n                                        </Typography>\n                                        <Typography component={'span'} color={'inherit'} variant={'inherit'}>\n                                            {coinPairInfo.feeA}\n                                        </Typography>\n                                    </Typography>\n                                    <Typography component={'span'} color={'inherit'} variant={'h5'}\n                                                paddingX={1}>{' + '}</Typography>\n                                    <Typography component={'span'} color={'inherit'} variant={'inherit'}\n                                                display={'flex'} flexDirection={'column'}>\n                                        <Typography component={'span'} color={'inherit'} variant={'inherit'}>\n                                            {coinPairInfo.myCoinB?.simpleName}\n                                        </Typography>\n                                        <Typography component={'span'} color={'inherit'} variant={'inherit'}>\n                                            {coinPairInfo.feeB}\n                                        </Typography>\n                                    </Typography>\n                                </Typography>\n                            </Typography>\n                        </BoxStyled>\n                        <BoxStyled paddingY={3} paddingX={1 / 2 * 5} display={'flex'} flexDirection={'column'}>\n                            <Typography component={'p'} color={'textSecondary'} display={'flex'}\n                                        justifyContent={'space-between'}>\n                                <Typography component={'span'}\n                                            color={'textSecondary'}> {t('labelMyPoolShare')}</Typography>\n                            </Typography>\n                            <Typography component={'p'} color={'textSecondary'} display={'flex'}\n                                        justifyContent={'space-between'} marginTop={1}>\n                                <Typography component={'span'}\n                                            color={'textSecondary'}>\n                                    <>{myAmm.balanceA ? myAmm.balanceA : 'N/A'}</>\n                                    <>{coinPairInfo.myCoinA?.simpleName}</>\n                                </Typography>\n                                <Typography component={'span'} color={'textSecondary'}\n                                            variant={'h5'}> -- </Typography>\n                            </Typography>\n                            <Typography component={'p'} color={'textSecondary'} display={'flex'}\n                                        justifyContent={'space-between'} marginTop={1}>\n                                <Typography component={'span'}\n                                            color={'textSecondary'}>\n                                    <>{myAmm.balanceB ? myAmm.balanceA : 'N/A'}</>\n                                    <>{coinPairInfo.myCoinB?.simpleName}</>\n                                </Typography>\n                                <Typography component={'span'} color={'textSecondary'}\n                                            variant={'h5'}> -- </Typography>\n                            </Typography>\n                        </BoxStyled>\n                        <BoxStyled paddingY={3} paddingX={1 / 2 * 5} display={'flex'}\n                                   flexDirection={'column'}>\n                            <Box display={'flex'} flexDirection={'row'} justifyContent={'space-between'}>\n                                <Typography display={'flex'} flexDirection={'column'} component={'div'}>\n                                    <Typography variant={'body2'} component={'h5'} color={'textSecondary'}>\n                                        {t('labelReward')}\n                                    </Typography>\n                                    <Typography variant={'body1'} component={'span'} color={'textPrimary'}>\n                                        {typeof coinPairInfo.activity === 'undefined' ? 'N/A' : <>\n                                            <Typography\n                                                component={'span'}>{coinPairInfo.activity.totalRewards} </Typography>\n                                            <Typography\n                                                component={'span'}>{coinPairInfo.activity?.rewardToken?.simpleName}</Typography>\n                                        </>}\n                                    </Typography>\n                                </Typography>\n                                <Typography display={'flex'} flexDirection={'column'} alignItems={'flex-end'}\n                                            component={'div'}>\n                                    <Typography variant={'body2'} component={'h5'} color={'textSecondary'}>\n                                        {t('labelMyReward')}\n                                    </Typography>\n                                    <Typography variant={'body1'} component={'span'} color={'textPrimary'}>\n                                        {typeof coinPairInfo.isActivity === 'undefined' ? 'N/A' : <>\n                                            <Typography component={'span'}> {myAmm.reward} </Typography>\n                                            <Typography\n                                                component={'span'}> {coinPairInfo.activity?.rewardToken?.simpleName}</Typography></>}\n\n                                    </Typography>\n                                </Typography>\n                            </Box>\n                            <Typography alignSelf={'flex-start'} variant={'body2'} color={'textSecondary'}\n                                        component=\"span\" marginTop={1}>\n                                {t('labelDate')}:\n                                {typeof coinPairInfo.isActivity === 'undefined' ? 'N/A' : moment(coinPairInfo.activity?.duration.from).format('L') + ' - ' + moment(coinPairInfo.activity?.duration.to).format('L')}\n                            </Typography>\n\n                        </BoxStyled>\n                    </Grid>\n                    <Hidden mdDown>\n                        <Grid item md={7} paddingRight={2}>\n\n\n                        </Grid>\n                    </Hidden>\n                </Grid>\n            </Box>\n            <Box display={'flex'}>\n                <AmmPanelView pair={pair} walletMap={walletMap} snapShotData={snapShotData}/>\n            </Box>\n        </Box>\n        <Grid container marginTop={3}>\n            <Grid item xs={12}>\n                <Tabs value={tabIndex}\n                      onChange={handleChange}\n                      aria-label=\"tabs switch\">\n                    <Tab label={t('labelAll')} {...applyProps(0)} />\n                    <Tab label={t('labelMe')} {...applyProps(1)} />\n                </Tabs>\n\n                <StylePaper marginTop={2}>\n                    {/*ammRecordArray*/}\n                    {tabIndex === 0 ?  <AmmRecordTable\n                        rawData={ammMarketArray}\n                        handlePageChange={_handlePageChange} page={page}\n                    /> : <AmmRecordTable rawData={myAmmMarketArray}  handlePageChange={_handlePageChange} page={page} /> }\n                </StylePaper>\n            </Grid>\n\n        </Grid>\n\n    </>\n})\n\n\n\n","import { AmmProps } from '@loopring-web/component-lib';\nimport React from 'react';\nimport { AmmData, AmmInData, IBData } from '@loopring-web/component-lib/static-resource';\nimport { AmmCard } from '@loopring-web/component-lib/components/block/AmmCard';\nimport { Grid } from '@material-ui/core';\nimport { AmmDetail, FloatTag } from '@loopring-web/component-lib/src/static-resource';\nimport { useAmmMiningUI } from './hook';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport { withTranslation } from 'react-i18next';\n\nconst AmmCardWrap = React.memo(React.forwardRef((props,ref) => {\n    return <AmmCard ref={ref} {...props} ></AmmCard>\n}))  as React.ComponentType<AmmDetail<IBData<any>>>;\n\nexport const AmmMiningView =  withTranslation('common')(<T extends AmmData<C extends IBData<I> ? C : IBData<I>>, I,\n    ACD extends AmmInData<I>,\n    C = IBData<I>>({ammProps,t,...rest}: { ammProps:AmmProps<T ,I,ACD> } & any) => {\n    const {ammActivities} = useAmmMiningUI();\n    const [value,setValue] = React.useState<0|1>(0);\n    const handleChange = (event: any, newValue: 0|1) => {\n        setValue(newValue);\n    }\n    return <Grid container spacing={2}>\n       <Grid item xs={12}>\n           <Tabs value={value}\n                 onChange={handleChange}\n                 aria-label=\"tabs switch\">\n               <Tab label={t('labelCurrentActivities')}  />\n               <Tab label={t('labelPastActivities')}  />\n           </Tabs>\n       </Grid>\n\n        {ammActivities.map((item,index)=>{\n            return  <Grid item xs={12} sm={6} lg={4}  key={index}>\n                {/*<AmmCardWrap {...item}/>*/}\n            </Grid>\n        }) }\n\n    </Grid>\n})\n\n\n// const ref = React.createRef();\n// const ammInfo: AmmCardProps<any> = {\n//     // ammCalcData,\n//\n//     coinAInfo:  {\n//         icon: 'https://exchange.loopring.io/assets/images/ethereum/assets/0x9A0aBA393aac4dFbFf4333B06c407458002C6183/logo.png',\n//         name: 'ETH',\n//         simpleName: 'ETH',\n//         description: '',\n//         company: 'ETH'\n//     },\n//     coinBInfo: {\n//         icon: 'https://exchange.loopring.io/assets/images/ethereum/assets/0x565aBA393aac4dFbFf4333B06c407458002C6183/logo.png',\n//         name: 'LRC',\n//         simpleName: 'LRC',\n//         description: '',\n//         company: 'LRC'\n//     },\n//     activity:{\n//         totalRewards:241232132,\n//         myRewards:1232.123,\n//         rewardToken: {\n//             icon: 'https://exchange.loopring.io/assets/images/ethereum/assets/0x565aBA393aac4dFbFf4333B06c407458002C6183/logo.png',\n//             name: 'LRC',\n//             simpleName: 'LRC',\n//             description: '',\n//             company: 'LRC'\n//         },\n//         duration: {\n//             from: new Date('2021-1-1'),\n//             to: new Date()\n//         },\n//     },\n//     amountDollar: 197764.89,\n//     amountYuan: 194.89,\n//     tradeFloat:{\n//         APY: 56,\n//         priceDollar: 123,\n//         priceYuan: 2343232,\n//         percent: '0%',\n//         chartUnit: \"24h\",\n//         volume: Number('112312312'),\n//         floatTag: FloatTag.none\n//     },\n//     totalLPToken: 12132131,\n//     totalA: 0.002,\n//     totalB: 12344,\n//     myRewardA: 11,\n//     myRewardB: 13,\n//     PoolSharedA: 10,\n//     PoolSharedB: 12,\n//     isNew:false,\n//     isActivity:true,\n// }","import React from 'react';\nimport { useAmmMap } from '../../../stores/Amm/AmmMap';\nimport {\n    CoinInfo,\n    CustomError,\n    ErrorMap,\n} from '@loopring-web/component-lib/src/static-resource';\nimport {  useTicker } from '../../../stores/ticker';\nimport { PoolsRow } from '@loopring-web/component-lib';\nimport { deepClone } from '../../../utils/obj_tools';\nimport { STATUS } from '../../../stores/constant';\nimport { useAmmActivityMap } from '../../../stores/Amm/AmmActivityMap';\nimport { AmmCardProps } from '@loopring-web/component-lib/static-resource';\nimport { tokenMapSlice, useTokenMap } from '../../../stores/token';\n\nexport function useAmmMiningUI<R extends {[key:string]:any},I>():{ammActivities:Array<AmmCardProps<I>>} {\n    const [data,setData] = React.useState<Array<AmmCardProps<I>>>([]);\n    const {\n        ammMap,\n        status: ammMapStatus,\n        errorMessage: errorAmmMap,\n        statusUnset:ammMapStatusUnset,\n        updateAmmMap,\n    } = useAmmMap();\n    const {coinMap} = useTokenMap();\n    const {\n        ammActivityMap,\n        status:  ammActivityStatus,\n        errorMessage: errorAmmActivityMap,\n        statusUnset:  ammActivityStatusUnset ,\n        updateAmmActivityMap,\n    } = useAmmActivityMap();\n    const {\n        tickerMap,\n        status: tickerStatus,\n        errorMessage: errorTickerMap,\n        statusUnset: tickerStatusUnset ,\n        updateTickers,\n    } = useTicker();\n    const updateRawData = React.useCallback(()=>{\n        try {\n            const _ammActivityMap:PoolsRow<I>  = deepClone(ammActivityMap);\n            let mapArray = [];\n            for (let key in  ammActivityMap) {\n                if (ammMap && coinMap) {\n                    _ammActivityMap[ key ] = {\n                        // @ts-ignore\n                        ...deepClone(ammMap[ key ]),\n                        coinAInfo: coinMap[ ammMap[ key ].coinA as string ],\n                        coinBInfo: coinMap[ ammMap[ key ].coinB as string ],\n                        activity: _ammActivityMap[ key ],\n                        tradeFloat: tickerMap && tickerMap[ key ]\n                    }\n                    mapArray.push(_ammActivityMap[key])\n                }\n\n            }\n            setData(mapArray);\n        }catch (error){\n            throw new CustomError({...ErrorMap.NO_TOKEN_MAP,options:error})\n        }\n    }, [ammActivityMap, tickerMap, ammMap, coinMap])\n    const updateTickersUI = React.useCallback(()=>  {\n            if(ammActivityMap && Object.keys(ammActivityMap).length>0){\n                updateTickers(Object.keys(ammActivityMap));\n            }\n    },[ammActivityMap,updateTickers])\n    React.useEffect(() => {\n        switch (tickerStatus) {\n            case \"ERROR\":\n                console.log(\"ERROR\",'get ticker error,ui');\n                tickerStatusUnset()\n                break;\n            case \"PENDING\":\n                break;\n            case \"DONE\":\n                tickerStatusUnset()\n                updateRawData()\n                break;\n            default:\n                break;\n        }\n    }, [tickerStatus, tickerStatusUnset, updateRawData]);\n    React.useEffect(() => {\n        switch (ammActivityStatus) {\n            case \"ERROR\":\n                console.log(\"ERROR\",'get ammMap error,ui');\n                ammActivityStatusUnset();\n                break;\n            case STATUS.PENDING:\n                console.log(\"PENDING\",'get ammMap error,ui');\n                // ammMapStatusUnset();\n                break;\n            case STATUS.DONE:\n                if(ammMapStatus !== STATUS.PENDING) {\n                    ammActivityStatusUnset();\n                    ammMapStatusUnset();\n                    updateTickersUI();\n                }\n                break;\n            default :\n                break;\n        }\n    }, [ammMapStatus, ammActivityStatus, ammActivityStatusUnset, ammMapStatusUnset, updateTickersUI]);\n    React.useEffect(() => {\n        if (!ammMap || Object.keys(ammMap).length === 0) {\n            updateAmmMap();\n        }\n        if(!ammActivityMap || Object.keys(ammActivityMap).length === 0){\n            updateAmmActivityMap();\n        } else {\n            updateTickersUI();\n        }\n    },[]);\n    return {\n        ammActivities:data,\n        // updateTickersUI,\n    }\n}\n\n// export function useTickerUI({pageState:number,pageSize:}) {\n//\n//     React.useEffect(() => {\n//         if (!tickerMap || Object.keys(tickerMap).length === 0) {\n//             updateAmmMap();\n//         }else{\n//\n//         }\n//     }, [ammMap, updateAmmMap]);\n//     React.useEffect(() => {\n//         switch (ammMapStatus) {\n//             case \"ERROR\":\n//                 console.log(\"ERROR\");\n//                 ammMapStatusUnset()\n//                 break;\n//             case \"PENDING\":\n//                 ammMapStatusUnset()\n//                 break;\n//             default:\n//                 break;\n//         }\n//     }, [ammMapStatus, ammMapStatusUnset]);\n//     return {\n//         ammMapObj: {\n//             ammMap,\n//             status: ammMapStatus,\n//             errorMessage: errorAmmMap\n//         }\n//     }\n// }","import React from 'react'\nimport styled from '@emotion/styled'\nimport { Box, Grid, Typography } from '@material-ui/core'\nimport { WithTranslation, withTranslation } from 'react-i18next'\nimport {\n    AmmRecordTable,\n    AmmTradeType,\n    ChartType,\n    ScaleAreaChart,\n    TablePaddingX,\n    ToggleButtonGroup,\n    useSettings\n} from '@loopring-web/component-lib'\nimport { MyPoolRow as Row, MyPoolTable } from '@loopring-web/component-lib/components/tableList/myPoolTable';\nimport {\n    CoinInfo,\n    Currency,\n    getThousandFormattedNumbers,\n    PriceTag\n} from '@loopring-web/component-lib/src/static-resource';\nimport { AmmRecordRow } from '@loopring-web/component-lib/components/tableList/ammRecordTable/Interface';\nimport moment from 'moment';\n\n\n//TODO: FIXED:  demo data\nconst coinMap = {\n    ETH: {\n        icon: 'https://exchange.loopring.io/assets/images/ethereum/assets/0x9A0aBA393aac4dFbFf4333B06c407458002C6183/logo.png',\n        name: 'ETH',\n        simpleName: 'ETH',\n        description: '',\n        company: 'ETH'\n    },\n    LRC: {\n        icon: 'https://exchange.loopring.io/assets/images/ethereum/assets/0x565aBA393aac4dFbFf4333B06c407458002C6183/logo.png',\n        name: 'LRC',\n        simpleName: 'LRC',\n        description: '',\n        company: 'LRC'\n    },\n    USTD: {\n        icon: 'https://exchange.loopring.io/assets/images/ethereum/assets/0x565aBA393aac4dFbFf4333B06c407458002C6183/logo.png',\n        name: 'USTD',\n        simpleName: 'USTD',\n        description: '',\n        company: 'USTD'\n    }\n}\nconst ammRecordArray:AmmRecordRow<any>[] = [\n    {\n        type: AmmTradeType.add,\n        coinA: coinMap[ 'ETH' ] as CoinInfo<any>,\n        coinB: coinMap[ 'LRC' ] as CoinInfo<any>,\n        totalDollar: 12,\n        totalYuan: 194.89,\n        amountA: 122,\n        amountB: 231,\n        time: moment().add(-1, 'days').toDate().getTime()\n    },\n    {\n        type: AmmTradeType.remove,\n        coinA: coinMap[ 'ETH' ] as CoinInfo<any>,\n        coinB: coinMap[ 'LRC' ] as CoinInfo<any>,\n        totalDollar: 12,\n        totalYuan: 194.89,\n        amountA: 122,\n        amountB: 231,\n        time: moment().add(-100, 'days').toDate().getTime()\n    },\n    {\n        type: AmmTradeType.swap,\n        coinA: coinMap[ 'ETH' ] as CoinInfo<any>,\n        coinB: coinMap[ 'LRC' ] as CoinInfo<any>,\n        totalDollar: 12,\n        totalYuan: 194.89,\n        amountA: 122,\n        amountB: 231,\n        time: moment().add(-15, 'days').toDate().getTime()\n    },\n    {\n        type: AmmTradeType.swap,\n        coinA: coinMap[ 'ETH' ] as CoinInfo<any>,\n        coinB: coinMap[ 'LRC' ] as CoinInfo<any>,\n        totalDollar: 12,\n        totalYuan: 194.89,\n        amountA: 122,\n        amountB: 231,\n        time: moment().add(-3, 'hours').toDate().getTime()\n    },\n    {\n        type: AmmTradeType.swap,\n        coinA: coinMap[ 'ETH' ] as CoinInfo<any>,\n        coinB: coinMap[ 'LRC' ] as CoinInfo<any>,\n        totalDollar: 12,\n        totalYuan: 194.89,\n        amountA: 122,\n        amountB: 231,\n        time: moment().add(-75, 'second').toDate().getTime()\n    }\n]\nconst rawData: Row<any>[] = [\n    {\n        feeA:122,\n        feeB:21,\n        feeDollar: 0.0012,\n        feeYuan:  0.0312,\n        reward:123,\n        rewardToken:{\n            icon: 'https://exchange.loopring.io/assets/images/ethereum/assets/0x565aBA393aac4dFbFf4333B06c407458002C6183/logo.png',\n            name: 'USDT',\n            simpleName: 'USDT',\n            description: '',\n            company: 'USDT'\n        },\n        balanceA:12131,\n        balanceB:0.0012,\n        balanceYuan: 1232131,\n        balanceDollar: 232,\n        ammDetail:  {\n            coinAInfo: {\n                icon: 'https://exchange.loopring.io/assets/images/ethereum/assets/0x9A0aBA393aac4dFbFf4333B06c407458002C6183/logo.png',\n                name: 'ETH',\n                simpleName: 'ETH',\n                description: '',\n                company: 'ETH'\n            },\n            coinBInfo: {\n                icon: 'https://exchange.loopring.io/assets/images/ethereum/assets/0x565aBA393aac4dFbFf4333B06c407458002C6183/logo.png',\n                name: 'LRC',\n                simpleName: 'LRC',\n                description: '',\n                company: 'LRC'\n            },\n            amountDollar: 12,\n            amountYuan: 194.89,\n            totalLPToken: 12132131,\n            totalA: 0.002,\n            totalB: 12344,\n            isNew: true,\n            isActivity: false,\n        }\n    },\n    {\n        feeA:122,\n        feeB:21,\n        feeDollar: 0.0012,\n        feeYuan:  0.0312,\n        reward:123,\n        rewardToken:{\n            icon: 'https://exchange.loopring.io/assets/images/ethereum/assets/0x565aBA393aac4dFbFf4333B06c407458002C6183/logo.png',\n            name: 'USDT',\n            simpleName: 'USDT',\n            description: '',\n            company: 'USDT'\n        },\n        balanceA:12131,\n        balanceB:0.0012,\n        balanceYuan: 1232131,\n        balanceDollar: 232,\n        ammDetail:  {\n            coinAInfo: {\n                icon: 'https://exchange.loopring.io/assets/images/ethereum/assets/0x9A0aBA393aac4dFbFf4333B06c407458002C6183/logo.png',\n                name: 'ETH',\n                simpleName: 'ETH',\n                description: '',\n                company: 'ETH'\n            },\n            coinBInfo: {\n                icon: 'https://exchange.loopring.io/assets/images/ethereum/assets/0x565aBA393aac4dFbFf4333B06c407458002C6183/logo.png',\n                name: 'LRC',\n                simpleName: 'LRC',\n                description: '',\n                company: 'LRC'\n            },\n            amountDollar: 12,\n            amountYuan: 194.89,\n            totalLPToken: 12132131,\n            totalA: 0.002,\n            totalB: 12344,\n            isNew: true,\n            isActivity: false,\n        }\n    },\n    {\n        feeA:122,\n        feeB:21,\n        feeDollar: 0.0012,\n        feeYuan:  0.0312,\n        reward:123,\n        rewardToken:{\n            icon: 'https://exchange.loopring.io/assets/images/ethereum/assets/0x565aBA393aac4dFbFf4333B06c407458002C6183/logo.png',\n            name: 'USDT',\n            simpleName: 'USDT',\n            description: '',\n            company: 'USDT'\n        },\n        balanceA:12131,\n        balanceB:0.0012,\n        balanceYuan: 1232131,\n        balanceDollar: 232,\n        ammDetail:  {\n            coinAInfo: {\n                icon: 'https://exchange.loopring.io/assets/images/ethereum/assets/0x9A0aBA393aac4dFbFf4333B06c407458002C6183/logo.png',\n                name: 'ETH',\n                simpleName: 'ETH',\n                description: '',\n                company: 'ETH'\n            },\n            coinBInfo: {\n                icon: 'https://exchange.loopring.io/assets/images/ethereum/assets/0x565aBA393aac4dFbFf4333B06c407458002C6183/logo.png',\n                name: 'LRC',\n                simpleName: 'LRC',\n                description: '',\n                company: 'LRC'\n            },\n            amountDollar: 12,\n            amountYuan: 194.89,\n            totalLPToken: 12132131,\n            totalA: 0.002,\n            totalB: 12344,\n            isNew: true,\n            isActivity: false,\n        }\n    },\n    {\n        feeA:122,\n        feeB:21,\n        feeDollar: 0.0012,\n        feeYuan:  0.0312,\n        reward:123,\n        rewardToken:{\n            icon: 'https://exchange.loopring.io/assets/images/ethereum/assets/0x565aBA393aac4dFbFf4333B06c407458002C6183/logo.png',\n            name: 'USDT',\n            simpleName: 'USDT',\n            description: '',\n            company: 'USDT'\n        },\n        balanceA:12131,\n        balanceB:0.0012,\n        balanceYuan: 1232131,\n        balanceDollar: 232,\n        ammDetail:  {\n            coinAInfo: {\n                icon: 'https://exchange.loopring.io/assets/images/ethereum/assets/0x9A0aBA393aac4dFbFf4333B06c407458002C6183/logo.png',\n                name: 'ETH',\n                simpleName: 'ETH',\n                description: '',\n                company: 'ETH'\n            },\n            coinBInfo: {\n                icon: 'https://exchange.loopring.io/assets/images/ethereum/assets/0x565aBA393aac4dFbFf4333B06c407458002C6183/logo.png',\n                name: 'LRC',\n                simpleName: 'LRC',\n                description: '',\n                company: 'LRC'\n            },\n            amountDollar: 12,\n            amountYuan: 194.89,\n            totalLPToken: 12132131,\n            totalA: 0.002,\n            totalB: 12344,\n            isNew: true,\n            isActivity: false,\n        }\n    },\n    {\n        feeA:122,\n        feeB:21,\n        feeDollar: 0.0012,\n        feeYuan:  0.0312,\n        reward:123,\n        rewardToken:{\n            icon: 'https://exchange.loopring.io/assets/images/ethereum/assets/0x565aBA393aac4dFbFf4333B06c407458002C6183/logo.png',\n            name: 'USDT',\n            simpleName: 'USDT',\n            description: '',\n            company: 'USDT'\n        },\n        balanceA:12131,\n        balanceB:0.0012,\n        balanceYuan: 1232131,\n        balanceDollar: 232,\n        ammDetail:  {\n            coinAInfo: {\n                icon: 'https://exchange.loopring.io/assets/images/ethereum/assets/0x9A0aBA393aac4dFbFf4333B06c407458002C6183/logo.png',\n                name: 'ETH',\n                simpleName: 'ETH',\n                description: '',\n                company: 'ETH'\n            },\n            coinBInfo: {\n                icon: 'https://exchange.loopring.io/assets/images/ethereum/assets/0x565aBA393aac4dFbFf4333B06c407458002C6183/logo.png',\n                name: 'LRC',\n                simpleName: 'LRC',\n                description: '',\n                company: 'LRC'\n            },\n            amountDollar: 12,\n            amountYuan: 194.89,\n            totalLPToken: 12132131,\n            totalA: 0.002,\n            totalB: 12344,\n            isNew: true,\n            isActivity: false,\n        }\n    },\n]\n\n\nconst toggleData = [\n    {value: '24 H', key: '24 H'},\n    {value: '1 W', key: '1 W'},\n    {value: 'ALL', key: 'ALL'},\n]\n\nconst StylePaper = styled(Box)`\n    width: 100%;\n    height: 100%;\n    flex: 1;\n` as typeof Box;\n\nconst StyleWrapper = styled(Grid)`\n  position: relative;\n  width: 100%;\n  background-color: ${({theme}) => theme.colorBase.background().default};\n  border-radius: ${({theme}) => theme.unit}px;\n` as typeof Grid\n\n\n\n// const StyleGrid = styled(Grid)`\n//     display: flex;\n//     flex-direction: column;\n//     justify-content: space-around;\n// ` as typeof Grid\n\n\n\n\nconst StyledBtnGroupWrapper = styled(Box)`\n    position: absolute;\n    z-index: 99;\n    top: ${({ theme }) => theme.unit}px;\n    width: 100%;\n` as typeof Box\n\nconst  TableWrapStyled = styled(Grid)`\n  &{\n    background-color: ${({theme}) => theme.colorBase.background().default};\n    ${({theme}) => theme.border.defaultFrame({c_key: 'blur', d_R: 1})};\n  }\n \n  ${({theme}) => TablePaddingX({pLeft:theme.unit * 3,pRight:theme.unit * 3})}\n` as typeof Grid\n\nexport const LiquidityOverview = withTranslation('common')(({ t, ...rest }: WithTranslation) => {\n    const [chartPeriod, setChartPeriod] = React.useState('ALL');\n    const [page, setPage] = React.useState(  1);\n    const {currency} = useSettings();\n    const {totalDollar,totalYuan,totalFeeDollar,totalFeeYuan, totalMiningDollar, totalMiningYuan} = {\n        totalDollar :1000,\n        totalYuan:33,\n        totalFeeDollar:323,totalFeeYuan:12, totalMiningDollar:232, totalMiningYuan:35}\n\n    const _handlePageChange = React.useCallback((page: number) => {\n        setPage(page);\n        // updateData({actionType: ActionType.page, currPage: page})\n    }, [])\n    return (\n        <>\n            <StyleWrapper container  spacing={1} padding={3} margin={0} >\n                <Grid display={'flex'} flexDirection={'column'} justifyContent={'space-around'} item sm={3}>\n                    <Typography variant={'body1'} component={'h5'} color={'textSecondary'}>{t('labelTotalPositionValue')}</Typography>\n                    <Typography variant={'h4'} marginTop={1}>\n                        {totalDollar === undefined ? 'N/A' : currency === Currency.dollar ?  PriceTag.Dollar + getThousandFormattedNumbers(totalDollar)\n                            :  PriceTag.Yuan + getThousandFormattedNumbers(totalYuan as number)}\n                    </Typography>\n                </Grid>\n                <Grid display={'flex'} flexDirection={'column'} justifyContent={'space-around'} item sm={3}>\n                    <Typography variant={'body1'} component={'h5'} color={'textSecondary'}>{t('labelFeeRewards')}</Typography>\n                    <Typography variant={'h4'} marginTop={1}>\n                        {totalFeeDollar === undefined ? 'N/A' : currency === Currency.dollar ?  PriceTag.Dollar + getThousandFormattedNumbers(totalFeeDollar)\n                            :  PriceTag.Yuan + getThousandFormattedNumbers(totalFeeYuan as number)}\n                    </Typography>\n                </Grid>\n                <Grid display={'flex'} flexDirection={'column'} justifyContent={'space-around'} item sm={3}>\n                    <Typography variant={'body1'} component={'h5'} color={'textSecondary'}>{t('labelMiningRewards')}</Typography>\n                    <Typography variant={'h4'} marginTop={1}>\n                        {totalMiningDollar === undefined ? 'N/A' : currency === Currency.dollar ?  PriceTag.Dollar + getThousandFormattedNumbers(totalMiningDollar)\n                            :  PriceTag.Yuan + getThousandFormattedNumbers(totalMiningYuan as number)}\n                    </Typography>\n                </Grid>\n            </StyleWrapper>\n            <StyleWrapper container marginY={2} height={340} >\n                    <StyledBtnGroupWrapper display={'flex'} padding={3} justifyContent={'space-between'}>\n                        <Typography variant={'body1'} component={'h5'} color={'textSecondary'}>{t('labelLiquidityValue')}</Typography>\n                        <Box marginRight={-1}>\n                            <ToggleButtonGroup  exclusive size=\"small\" {...{ ...rest, t, data: toggleData, value: chartPeriod, setValue: setChartPeriod}} />\n                        </Box>\n                    </StyledBtnGroupWrapper>\n                    <ScaleAreaChart type={ChartType.Trend} data={[]} />\n            </StyleWrapper>\n            <Typography paddingLeft={2} variant={'h4'} >{t('labelMyAmm')}</Typography>\n            <TableWrapStyled container marginY={2} paddingY={2} flex={1} height={568}>\n                <Grid item xs={12} display={'flex'} flexDirection={'column'} >\n                    <MyPoolTable\n\n                        rawData={rawData}\n                        pagination= {{pageSize: 5}}\n                        handleDeposit={(row:any)=>{console.log()}}\n                        handleWithdraw={(row:any)=>{console.log()}}\n                        handlePageChange={()=>{}}\n                    />\n                </Grid>\n            </TableWrapStyled>\n            <Typography paddingLeft={2} variant={'h4'} >{t('labelMyAmmRecord')}</Typography>\n            <TableWrapStyled container marginY={2} paddingY={2} flex={1}>\n                <Grid item xs={12} display={'flex'} flexDirection={'column'}>\n                    <AmmRecordTable rawData={ammRecordArray} handlePageChange={_handlePageChange} page={page} />\n                </Grid>\n            </TableWrapStyled>\n        </>\n    )\n})","import { useRouteMatch } from 'react-router'\n\nimport { Box } from '@material-ui/core'\nimport {\n    SubMenu,\n    SubMenuList as BasicSubMenuList,\n} from '@loopring-web/component-lib'\nimport { withTranslation } from 'react-i18next'\nimport { subMenuLiquidity } from '@loopring-web/component-lib/src/static-resource'\nimport { PoolsPanel } from './PoolsPanel'\nimport { CoinPairPanel } from './CoinPairPanel';\nimport { AmmMiningView } from './AmmMining';\nimport { LiquidityOverview } from './LiquidityOverview'\n// import { useAmmPool } from './hook'\n\nexport const subMenu = subMenuLiquidity\n\nconst SubMenuList = withTranslation(['layout','common'], { withRef: true })(BasicSubMenuList);\nexport const LiquidityPage = () => {\n\n    // const { ammFee } = useAmmPool('LRC', 'ETH')\n    //\n    // console.log('--- > ammFee:', ammFee)\n    //\n    let match: any = useRouteMatch(['/liquidity/:item',':next/']);\n    const selected = match?.params.item ?? 'pools'\n    let matchPair: any = useRouteMatch(['/liquidity/:item/:next/:symbol']);\n    let symbol:any = undefined\n    if (matchPair && matchPair?.params?.next && matchPair.params.item === 'pools') {\n       if(!matchPair.params.symbol){\n           symbol='LRC-ETH';\n       }else{\n           symbol=matchPair.params.symbol;\n       }\n    }\n    \n    return (\n        <>\n            { symbol && <Box display={'flex'} flexDirection={'column'}  flex={1} alignSelf={'flex-start'}>\n              <CoinPairPanel />\n            </Box>\n            }\n            {!symbol && <>  <Box width={'200px'} display={'flex'} justifyContent={'stretch'} marginRight={3}>\n                    <SubMenu>\n                        <SubMenuList selected={selected} subMenu={subMenu as any} />\n                    </SubMenu>\n                </Box>\n                <Box  minHeight={420}  display={'flex'} alignItems={'stretch'} justifyContent={'stretch'} flexDirection=\"column\" marginTop={0} flex={1}>\n                    {(selected === 'pools' && !symbol ) && <PoolsPanel />}\n                    {(selected === 'amm-mining' && !symbol ) && <AmmMiningView />}\n                    {(selected === 'my-liquidity' && !symbol ) && <LiquidityOverview />}\n                    {selected === 'orderBook-Mining' && <AmmMiningView />}\n                    {/*{selected === 'orders' && <OrderPanel />}*/}\n                </Box>\n             </>\n            }\n        </>\n    )\n\n}\n","import { HashRouter as Router, Route, Switch, } from 'react-router-dom'\n\nimport Header from 'layouts/header'\n\nimport QuotePage from 'pages/QuotePage'\nimport { SwapPage } from 'pages/SwapPage'\n\nimport DebugPage from 'pages/DebugPage'\n\nimport Container from '@material-ui/core/Container'\nimport { Box } from '@material-ui/core'\nimport { DevWrapper } from '../provider/'\nimport { Layer2Page } from '../pages/Layer2Page'\nimport { LiquidityPage } from '../pages/LiquidityPage'\n\nconst RouterView = () => {\n    \n    return <Router>\n        <Header />\n\n        {/*<Box style={{marginTop: `var(--header-height)`}} flex={1} display={'flex'}>*/}\n        <Container maxWidth=\"lg\" style={{minHeight:'calc(100% - 64px - 32px)',display:'flex',flexDirection:'column'}}>\n            {/*style={{height: '100%' }}*/}\n            <Box display={'flex'} flex={1} alignItems={'stretch'} flexDirection={'row'} marginTop={3}  >\n                <Switch>\n                    <Route exact component={SwapPage} path='/'/>\n                    <Route exact component={QuotePage} path='/markets'/>\n                    <Route component={SwapPage} path='/trading/lite'/>\n                    <Route component={SwapPage} path='/trading/lite(/:symbol)'/>\n\n                    <Route exact component={Layer2Page} path='/layer2'/>\n                    <Route exact component={Layer2Page} path='/layer2/assets'/>\n                    <Route exact component={Layer2Page} path='/layer2/transactions'/>\n                    <Route exact component={Layer2Page} path='/layer2/trades'/>\n                    <Route exact component={Layer2Page} path='/layer2/orders'/>\n                    <Route exact component={Layer2Page} path='/layer2/setting'/>\n\n                    <Route exact component={LiquidityPage} path='/liquidity'/>\n                    <Route exact component={LiquidityPage} path='/liquidity/pools/*'/>\n                    <Route exact component={LiquidityPage} path='/liquidity/pools'/>\n                    {/*<Route exact component={LiquidityPage} path='/liquidity/pools/coinPair(/:symbol)'/>*/}\n                    <Route exact component={LiquidityPage} path='/liquidity/amm-mining'/>\n                    <Route exact component={LiquidityPage} path='/liquidity/my-liquidity'/>\n                    <Route exact component={LiquidityPage} path='/liquidity/orderBook-Mining'/>\n                    <Route exact component={LiquidityPage} path='/liquidity/maker-rebates'/>\n\n                    <DevWrapper>\n                        <Route exact path='/debug'>\n                            <DebugPage/>\n                        </Route>\n                    </DevWrapper>\n\n                </Switch>\n            </Box>\n        </Container>\n        {/*</Box>*/}\n\n    </Router>\n}\n\nexport default RouterView\n"],"sourceRoot":""}