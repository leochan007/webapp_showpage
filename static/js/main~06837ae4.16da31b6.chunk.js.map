{"version":3,"sources":["stores/Amm/AmmMap/hook.ts","utils/obj_tools.ts","defs/common_defs.ts","stores/account/reducer.ts","stores/account/hook.ts","stores/global/actions.ts","stores/Amm/AmmActivityMap/reducer.ts","stores/Amm/AmmActivityMap/hook.ts","stores/apis/api.ts","stores/Amm/AmmActivityMap/saga.ts","stores/Amm/AmmMap/saga.ts","stores/Amm/index.ts","utils/swap_utils.ts","stores/token/saga.ts","stores/ticker/saga.ts","stores/system/interface.ts","stores/system/reducer.ts","stores/walletLayer1/reducer.ts","stores/walletLayer1/hook.ts","services/socketUtil.ts","services/tickerService.ts","services/ammPoolService.ts","stores/system/saga.ts","stores/walletLayer1/saga.ts","stores/walletLayer2/reducer.ts","stores/walletLayer2/saga.ts","stores/userRewards/reducer.ts","stores/userRewards/saga.ts","stores/socket/saga.ts","stores/account/saga.ts","stores/rootSaga.ts","stores/system/hook.ts","utils/log_tools.ts","stores/walletLayer2/hook.ts","stores/userRewards/hook.ts","stores/localStore/confirmation/reducer.ts","stores/localStore/favoriteMarket/reducer.ts","stores/localStore/onchainHashInfo/reducer.ts","stores/localStore/index.ts","stores/index.ts","hooks/help/volumeToCount.ts","hooks/help/ammPairDetail.ts","hooks/help/coinPairInit.ts","layouts/connectStatusCallback.tsx","hooks/help/makeCache.ts","utils/formatter_tool.ts","hooks/help/makeUIAmmActivityMap.ts","hooks/help/makeMyPoolDetail.ts","hooks/help/makeTickView.ts","hooks/help/makeWallet.ts","hooks/help/marketTable.ts","hooks/help/pairDetail.ts","layouts/header/index.tsx","layouts/header/hook.tsx","pages/QuotePage/hook.ts","pages/styled.ts","pages/QuotePage/index.tsx","stores/localStore/favoriteMarket/hook.ts","hooks/common/useCustomDCEffect.ts","pages/SwapPage/panel/BasicInfoPanel/hook.tsx","storage/index.ts","pages/SwapPage/panel/BasicInfoPanel/index.tsx","pages/SwapPage/panel/TradePanel/index.tsx","pages/SwapPage/hook.ts","pages/SwapPage/index.tsx","provider/dev-wrapper/index.tsx","provider/global/index.tsx","pages/Layer2Page/TxPanel/index.tsx","pages/Layer2Page/TxPanel/hooks.ts","pages/Layer2Page/AssetPanel/index.tsx","modal/useModals.ts","pages/Layer2Page/TradePanel/index.tsx","pages/Layer2Page/TradePanel/hooks.ts","pages/Layer2Page/AmmPanel/index.tsx","pages/Layer2Page/AmmPanel/hook.ts","services/account/command.ts","pages/SettingPage/index.tsx","pages/SettingPage/hook.ts","modal/useDeposit.ts","pages/Layer2Page/index.tsx","pages/LiquidityPage/PoolsPanel/index.tsx","pages/LiquidityPage/AmmPanel/index.tsx","pages/LiquidityPage/AmmPanel/hooks.ts","pages/LiquidityPage/CoinPairPanel/hooks.ts","pages/LiquidityPage/CoinPairPanel/index.tsx","pages/LiquidityPage/AmmMining/index.tsx","pages/LiquidityPage/AmmMining/hook.ts","pages/LiquidityPage/MyLiquidity/hook.ts","pages/LiquidityPage/MyLiquidity/index.tsx","pages/LiquidityPage/index.tsx","pages/LiquidityPage/hook.ts","modal/WalletModal/index.tsx","services/account/activeAccount.ts","services/account/walletLayer2Services.ts","services/account/lockAccount.ts","services/account/unlockAccount.ts","modal/AccountModal/index.tsx","modal/useChargeFees.ts","modal/useAccountModal.tsx","services/account/useAccountHook.ts","modal/index.tsx","modal/useTransfer.ts","modal/useWithdraw.ts","routers/index.tsx","services/account/networkUpdate.ts","services/account/checkAccount.ts","hookAccountInit.ts","hookConnect.tsx","pages/ErrorPage/index.tsx","utils/dt_tools.ts","pages/LoadingPage/index.tsx","App.tsx","hook.ts","index.tsx","stores/Amm/AmmMap/reducer.ts","stores/socket/reducer.ts","stores/ticker/reducer.ts","stores/token/reducer.ts","stores/ticker/hook.ts","stores/socket/hook.ts","pages/LiquidityPage/PoolsPanel/hook.ts","stores/token/hook.ts"],"names":["useAmmMap","ammMap","useSelector","state","amm","dispatch","useDispatch","statusUnset","React","useCallback","undefined","getAmmMap","deepClone","data","Object","result","constructor","key","hasOwnProperty","copyToClipBoard","text","a","document","execCommand","textarea","createElement","body","appendChild","value","select","removeChild","navigator","clipboard","writeText","window","clipboardData","setData","console","log","Theme","LangType","SystemStatus","MODAL_TYPE","ActionResultCode","initialState","accAddress","readyState","AccountStatus","UN_CONNECT","accountId","apiKey","eddsaKey","publicKey","level","nonce","keyNonce","connectName","ConnectProviders","unknown","_chainId","status","errorMessage","accountSlice","createSlice","name","reducers","updateAccountStatus","action","SagaStatus","PENDING","changeShowModel","_userOnModel","payload","nextAccountStatus","error","ERROR","wrongChain","DONE","cleanAccountStatus","UNSET","actions","useAccount","account","resetAccount","props","updateAccount","shouldShow","useMemo","setShouldShow","flag","statusUnsetFunc","REFRESH_RATE","TOAST_TIME","updateVersion","createAction","ammActivityMapSlice","ammActivityMap","getAmmActivityMap","getAmmActivityMapStatus","useAmmActivityMap","getChainId","store","getState","system","chainId","userAPI","UserAPI","exchangeAPI","ExchangeAPI","ammpoolAPI","AmmpoolAPI","LoopringAPI","walletAPI","wsAPI","InitApi","WalletAPI","WsAPI","getPostsSaga","ammActivityMapSaga","getAmmActivityMapApi","getAmmPoolActivityRules","groupByRuleTypeAndStatus","call","put","all","takeLatest","updateRealTimeSaga","ammMapInitSaga","ammMapRealTimeSaga","setAmmState","ammPoolState","keyPair","idIndex","tokenMap","match","coinA","coinB","forex","faitPrices","amountDollar","parseFloat","liquidityUSD","amountYuan","totalLPToken","volumeToCount","lpLiquidity","totalA","liquidity","totalB","rewardValue","rewards","tokenId","volume","rewardToken","rewardValue2","rewardToken2","feeA","volumeToCountAsBigNumber","fees","feeB","feeDollar","toBig","times","price","plus","feeYuan","toNumber","tradeFloat","change","timeUnit","APY","parseInt","apyBips","getAmmMapApi","ammpools","getAmmPoolStats","ammPoolStats","__timer__","clearInterval","setInterval","updateRealTimeAmmMap","coinMap","Reflect","ownKeys","forEach","item","market","tokens","pooled","dataItem","isNew","Date","now","Number","createdAt","isActivity","address","__rawConfig__","getAmmMapStatus","map","replace","ammMapSaga","fork","ammReducer","combineReducers","ammMapSlice","reducer","ammForks","getIconByTokenInfo","token","addr","utils","getAddress","tokenInitSaga","getTokenMapApi","tokensMap","pairs","marketArr","tokenArr","totalCoinMap","addressIndex","symbol","coinInfo","icon","simpleName","description","company","startsWith","tokenList","tradePairs","marketArray","marketCoins","marketMap","getTokenMapStatus","getTokenMap","tokenSaga","tickerSaga","tickersSaga","getTickersApi","list","getMixTicker","join","tickers","makeTickerMap","tickerMap","tickMap","tickerKey","tickerKeys","length","getTickerStatus","CustomError","ErrorMap","NO_TOKEN_KEY_LIST","getTicker","getTickers","ENV","NETWORKEXTEND","tickerForks","env","PROD","baseURL","socketURL","etherscanUrl","gasPrice","exchangeInfo","topics","systemSlice","updateSystem","updateRealTimeObj","getSystemStatus","setTopics","walletLayer1","walletLayer1Slice","updateWalletLayer1","reset","getWalletLayer1Status","useWalletLayer1","resetLayer1","SocketEventType","subject","Subject","tickerService","_tickerMap","next","asObservable","ammPoolService","ammPoolMap","LoopringSocket","url","_socketCallbackMap","_loopringSocket","__wsTimer__","timer","count","_baseUrl","socketSendMessage","socket","clearInitTimer","resetSocketEvents","makeMessageArray","isConnectSocket","socketConnect","send","makeTopics","socketClose","SOCKET_ERROR","ws","Promise","reolve","onclose","e","reason","close","resolve","removeSocketEvents","eventType","ticker","getTickerArg","addSocketEvents","getAccountArg","order","getOrderArg","orderbook","getOrderBookArg","trade","getTradeArg","candlestick","getCandlestickArg","ammpool","getAmmpoolArg","op","unsubscribeAll","JSON","stringify","type","deps","fn","SocketEventMap","self","getWsKey","wsKey","WebSocket","onopen","warn","OPEN","onmessage","pingpong","parse","topic","setTimeout","this","onerror","err","init","clearTimeout","_e","timestamp","size","open","high","low","bid","ask","base","quote","base_token_volume","quote_token_volume","minus","div","base_fee_amt","quote_fee_amt","poolName","poolAddress","risky","lp","instance","loopringSocket","getUpdateSystem","systemSaga","initConfig","getTokens","tokenSymbolMap","getAmmPoolConf","getMixMarkets","markets","take","delay","accountStatusUnset","getSystemsApi","location","hostname","DEV","ChainId","GORLI","UAT","MAINNET","NONETWORK","NO_NETWORK_ERROR","getExchangeInfo","getFiatPrice","legal","fiatPrices","faitPricesY","getGasPrice","process","systemForks","walletLayer1Saga","getWalletLayer1Balance","exchangeApi","getEthBalances","owner","ethBalance","getTokenBalances","tokenBalances","reduce","prev","belong","fromWEI","walletLayer1Fork","walletLayer2","walletLayer2Slice","updateWalletLayer2","getWalletLayer2Status","walletLayer2Saga","getWalletLayer2Balance","userApi","getUserBalances","userBalances","walletLayer2Fork","userRewardsMap","userRewardsMapSlice","getUserRewards","getUserRewardsStatus","userRewardsSaga","getUserRewardsApi","getAmmPoolUserRewards","then","ammUserRewardMap","reject","userRewardsForks","closeSocket","sendMessage","socketEndSaga","socketSendMessageSaga","getSocketStatus","socketEnd","sendSocketTopic","socketForks","accountUpdateSaga","cleanAccountSaga","accountSage","accountRestSage","shouldUpdateProvider","connectProvides","clear","accountFork","mySaga","useSystem","myLog","message","myError","useWalletLayer2","resetLayer2","delayAndUpdateWalletLayer2","getTime","_","useUserRewards","confirmationSlice","confirmed","confirm","favoriteMarketSlice","clearAll","removeMarket","pair","includes","index","findIndex","_pair","splice","addMarket","push","addMarkets","depositHash","withdrawHash","onchainHashInfoSlice","clearDepositHash","updateDepositHash","localStoreReducer","favoriteMarket","onchainHashInfo","confirmation","sagaMiddleware","createSagaMiddleware","socketSlice","settings","settingsSlice","modals","modalsSlice","tokenMapSlice","tickerMapSlice","localStore","PERSISTED_KEYS","configureStore","middleware","getDefaultMiddleware","thunk","serializableCheck","save","states","devTools","enhancers","reduxBatch","preloadedState","load","setLanguage","language","setCoinJson","imgConfig","run","volumn","decimals","ammPairInit","_ammCalcData","ammType","walletMap","tickerData","ammPoolsBalance","coinInfoMap","AtoB","isNaN","baseVol","coinAInfo","quoteVol","coinBInfo","toFixed","myCoinA","balance","myCoinB","coinACount","coinBCount","lpCoin","lpCoinA","lpCoinB","coinPairInit","coinKey","_tradeCalcData","sell","buy","coinSell","ele","coinBuy","accountStaticCallBack","onclickMap","args","apply","bntLabel","fnType","ERROR_NETWORK","DEFAULT","ACTIVATED","LOCKED","btnClickMap","setShowConnect","isShow","step","WalletConnectStep","Provider","NO_ACCOUNT","setShowAccount","AccountStep","NoAccount","DEPOSITING","Depositing","HadAccount","makeCache","__cache__","customSlippage","setSlippage","getTokenInfo","VolToNumberWithPrecision","rawVal","tokenInfo","trim","sdk","precision","makeUIAmmActivityMap","myReward","ammPoolActivityStatus","ammActivityViewMap","ammPoolActivityRule","awardRules","totalRewards","myRewards","AmmPoolActivityStatus","InProgress","currentRewards","duration","from","rangeFrom","to","rangeTo","isPass","EndOfGame","makeAsCard","_ammInfo","itemArray","activity","getOneRewardInfo","reward","reward2","rewardDollar","rewardYuan","balanceA","balanceB","balanceDollar","balanceYuan","ammUserReward","snapShotData","feeRewards","ratio","BigNumber","ammDetail","makeMyAmmWithSnapshot","_walletMap","makeMyPoolRowWithPoolState","_myAmm","makeMyAmmWithStat","makeTickView","tick","floatTag","FloatTag","none","increase","decrease","_tradeFloat","priceYuan","priceDollar","closeDollar","closeYuan","qPrice","changeDollar","changeYuan","__rawTicker__","makeWalletLayer2","total","locked","countBig","pending","withdraw","toString","detail","getUserTrades","marketKey","response","userTrades","makeMarketArray","marketTrades","tradeArray","currency","feeKey","side","Buy","Sell","TradeTypes","amount","fee","time","tradeTime","getUserAmmTransaction","getUserAmmPoolTxs","userAmmPoolTxs","makeMyAmmMarketArray","marketTransaction","lpToken","txType","JOIN","AmmTradeType","add","remove","totalDollar","totalYuan","amountA","poolTokens","actualAmount","amountB","updatedAt","txStatus","pairDetailBlock","ammKey","getAmmPoolSnapshot","ammPoolSnapshot","NO_SDK","pairDetailDone","stob","poolVolumn","getBaseQuote","poolBaseTokenVol","quoteBaseTokenVol","NO_SUPPORT_PAIR","StoB","BtoS","sellCoinInfoMap","buyCoinInfoMap","Header","rest","useLocation","useSettings","setTheme","themeMode","accountState","accountStatus","useOpenModals","_btnClickMap","assign","CONNECT","onWalletBtnConnect","onThemeBtnClick","dark","light","onLangBtnClick","lang","useEffect","headerToolBarData","ButtonComponentsMap","WalletConnect","handleClick","Language","handleChange","forceUpdate","useReducer","headerMenuData","useHeader","selected","pathname","headerRoot","Toolbar","OnePageSize","StylePaper","styled","Box","theme","colorBase","background","default","unit","TableWrapStyled","Grid","TablePaddingX","pLeft","pRight","TableFilterParams","RowStyled","SearchWrapperStyled","TabsWrapperStyled","QuotePage","withTranslation","useState","candlestickList","setCandlestickList","ammPoolBalances","setAmmPoolBalances","tableTabValue","setTableTabValue","filteredData","setFilteredData","searchValue","setSearchValue","swapRankingList","setSwapRankingList","useFavoriteMarket","t","getSwapRankingList","res","groupByRuleType","SWAP_VOLUME_RANKING","getCandlestick","getMixCandlestick","interval","TradingInterval","d1","limit","candlesticks","o","timeStamp","sign","useTicker","tickerStatus","tickerStatusUnset","updateTickers","useSocket","recommendedPairs","setRecommendedPairs","tickList","setTickList","recommendations","setRecommendations","focusRowFrom","startIndex","updateRecommendation","recommendationIndex","subscription","subscribe","unsubscribe","getRecommandPairs","getRecommendedMarkets","recommended","socketSendTicker","updateRawData","marketPairs","_recommendationsFloat","defaultRecommendationsFloat","_tickList","keys","_item","m","filter","filteredFloat","concat","slice","_recommendations","debounce","_startIndex","WsTopicType","globalSetup","wait","useQuote","getAmmPoolBalances","ammRes","fomattedRes","raw_data","history","useHistory","getFilteredTickList","find","handleTableFilterChange","keyword","cloneDeep","favourite","ranking","formattedKeyword","toLocaleLowerCase","toLowerCase","handleRowClick","row","tradePair","handleTabChange","_event","newValue","handleSearchChange","display","flexDirection","flex","container","chartData","sort","b","xs","onClick","marginY","paddingBottom","Tabs","onChange","Tab","label","Divider","onRowClick","col","rawData","addFavoriteMarket","removeFavoriteMarket","showLoading","useCustomDCEffect","useDeepCompareEffect","toggleData","ChartType","Trend","Depth","CONSTANTS","BasicInfoPanel","tgItemJSXs","tlabel","JSX","getExistedMarket","chartType","setChartType","ChartUnit","D1","chartUnit","setChartUnit","originData","setOriginData","tgItemJSXsPriceChart","pre","tGItemData","mounted","request","date","moment","format","dumpError400","getMixDepth","depth","bidsPrices","bids_prices","bidsAmtTotals","bids_amtTotals","asksPrices","asks_prices","asksAmtTotals","asks_amtTotals","handleChartUnitChange","event","mappedValue","H1","W1","useBasicInfo","upColor","baseToken","quoteToken","trendChartData","depthChartData","amt","justifyContent","alignItems","exclusive","position","minHeight","maxHeight","style","height","width","riseColor","extraInfo","handleMove","showXAxis","applyProps","id","StyledTabsWrapper","TradePanel","FormControlLabel","myTradeArray","setValue","useSwapPage","useTranslation","swapToastOpen","setSwapToastOpen","swapAlertText","setSwapAlertText","useRouteMatch","useTokenMap","walletLayer2Status","tradeData","setTradeData","tradeCalcData","setTradeCalcData","setTradeArray","setMyTradeArray","setTradeFloat","setPair","setAmmPoolSnapshot","swapBtnI18nKey","setSwapBtnI18nKey","output","setOutput","takerRate","setTakerRate","feeBips","setFeeBips","setBaseMinAmt","quoteMinAmt","setQuoteMinAmt","TradeBtnStatus","DISABLED","btnStatus","setBtnStatus","isSwapLoading","setIsSwapLoading","isValidAmt","setIsValidAmt","LOADING","AVAILABLE","useSwapBtnStatusCheck","ammInfo","req","getMinimumTokenAmt","amountMap","baseMinAmtInfo","quoteMinAmtInfo","userOrderInfo","totalFee","minAmount","params","resetSwap","_myTradeArray","swapCalculatorCallback","slippage","sellTokenId","getNextStorageId","storageId","exchange","exchangeAddress","orderId","sellToken","amountS","buyToken","amountBOutSlip","minReceived","allOrNone","validUntil","VALID_UNTIL","maxFeeBips","fillAmountBOrS","orderType","OrderType","ClassAmm","eddsaSignature","submitOrder","sk","tradeValue","swapBtnClickArray","onSwapClick","handleSwapPanelEvent","swapData","switchType","SwapType","SEll_CLICK","BUY_CLICK","SELL_SELECTED","BUY_SELECTED","EXCHANGE_CLICK","setDepth","updateDepth","handler","calculateTradeData","_tradeData","input","isAtoB","ammMapRaw","priceImpact","minimumReceived","minReceivedVal","validAmt","amountBOut","gte","throttleSetValue","_ammPoolSnapshot","td","_tradeArray","apiList","getMarketTrades","_td","catch","TRADE_LITE_SET_PAIR_ERROR","options","FixedStyle","SwapPage","pairNameList","split","Array","isArray","customPair","renderPair","alertText","autoHideDuration","setOpen","marginRight","alignContent","minWidth","swapBtnStatus","DevWrapper","children","Fragment","WindowEvent","UserStorage","depositsHash","localStorage","getItem","DepositHash","removeItem","connectionName","setItem","ConnectorName","rawHandler","sessionStorage","Handler","dateTimeStr","ActiveTime","tmpDt","SESSION_TIMEOUT_SECONDS","rawId","AccountId","Account","Apikey","apikey","Eddsakey","eddsakey","orderHash","AmmOrder","current","HardwareAddresses","events","Click","Scroll","forceReset","checkTimeout","GlobalProvider","addEventListener","removeEventListener","TxPanel","useRef","pageSize","setPageSize","txs","setTxs","isLoading","setIsLoading","getTxnStatus","TransactionStatus","processing","processed","received","failed","getUserTxnList","getUserTranferList","getUserDepositHistory","getUserOnchainWithdrawalHistory","userTxnList","userTransferMapped","userTransfers","TransactionTradeTypes","transfer","feeTokenSymbol","feeAmount","memo","txnHash","hash","userDepositMapped","userDepositHistory","deposit","txHash","userWithdrawMapped","userOnchainWithdrawalHistory","mappingList","sortedMappingList","useGetTxs","txTableData","offsetHeight","Math","floor","ref","className","pagination","showFilter","StyledChartWrapper","StyledBtnGroupWrapper","AssetPanel","chartPeriod","setChartPeriod","setChartData","assetsKeyList","assetsDetailList","values","assetsList","getUserTotalAssets","getUserAssets","wallet","assetType","AssetType","DEX","userAssets","showDeposit","defaultProps","isNoAccount","title","setShowDeposit","showTransfer","setShowTransfer","showWithdraw","setShowWithdraw","setShowResetAccount","useModals","onShowDeposit","onShowTransfer","onShowWithdraw","lpTokenJump","handleChartPeriodChange","tokenPriceList","entries","formattedData","tokenPriceUSDT","ammToken","tokenValue","totalLpToken","lpTotalData","formattedDoughnutData","AssetTitleProps","assetInfo","totalAsset","priceTag","PriceTag","Dollar","assetsRawData","TokenType","single","String","EmptyValueTag","available","smallBalance","marginTop","Paper","component","Typography","color","variant","showFiliter","onLpDeposit","onLpWithdraw","setUserTrades","setShowLoading","getUserTradeList","marketList","Side","useGetTrades","AmmPanel","ammRecordList","setAmmRecordList","getTokenName","getAmmpoolList","AmmTxType","AmmSideTypes","Join","Exit","lpTokenAmount","useGetAmmRecord","Commands","ErrorType","ProcessingType","StyledPaper","StyledSwitch","Switch","textPrimary","border","success","backgroundColor","opacity","BtnCurrency","Currency","dollar","setState","_handleChange","target","IconComponent","DropDownIcon","labelId","autoWidth","yen","StyledDivider","SettingPanel","focus","i18n","useTheme","setUpColor","setCurrency","exportAccInfo","accInfo","publicX","x","publicY","y","privateKey","exportFromJSON","fileName","exportType","useExportAccoutInfo","direction","flexWrap","paddingLeft","paddingY","paddingX","marginBottom","alignSelf","changeLanguage","Trans","i18nKey","textTransform","UpColor","green","up","down","checked","red","useDeposit","isNewAccount","depositValue","setDepositValue","handleDeposit","inputValue","usedWeb3","code","NoError","gasLimit","gasAmounts","isMetaMask","MetaMask","realGasPrice","toUpperCase","TokenAccessProcess","getAllowances","tokenAllowances","allowance","curValInWei","gt","depositAddress","ApproveFailed","FailedTokenAccess","realChainId","response2","DepositFailed","FailedDeposit","DataNotReady","onDepositClick","depositProps","depositBtnStatus","subMenu","subMenuLayer2","BoxStyle","defaultFrame","c_key","BtnConnect","withRef","setLabel","fullWidth","maxWidth","SubMenuList","BasicSubMenuList","Layer2Page","PoolsPanel","useAmmMapUI","updateTickersUI","page","handlePageChange","AmmPanelView","ammToastOpen","setAmmToastOpen","ammAlertText","setAmmAlertText","ammCalcData","setAmmCalcData","nodeTimer","ammJoinData","setAmmJoinData","ammExitData","setAmmExitData","ammDepositBtnI18nKey","setAmmDepositBtnI18nKey","ammWithdrawBtnI18nKey","setAmmWithdrawBtnI18nKey","initAmmData","setAmmPoolSnapShot","updateAmmPoolSnapshot","request1","joinFees","setJoinFees","exitFees","setExitfees","feeToken","requestJoin","requestType","OffchainFeeReqType","AMM_JOIN","tokenSymbol","getOffchainFeeAmt","feesJoin","feeJoin","requestExit","AMM_EXIT","feesExit","feeExit","joinRequest","setJoinRequest","handlerJoinInDebounce","slippageReal","marketInfo","coinA_TV","coinB_TV","covertVal","rawA","rawB","makeJoinAmmPoolRequest","joinTokens","precisionForPrice","handleJoinAmmPoolEvent","addToAmmCalculator","setJoinLoading","patch","ammName","request2","storageId0","request_1","storageId1","storageIds","offchainId","joinAmmPool","onAmmDepositClickMap","onAmmAddClick","exitRequest","setExitRequest","handleExitInDebounce","makeExitAmmPoolRequest","exitTokens","unPooled","handleExitAmmPoolEvent","isJoinLoading","isExitLoading","setExitLoading","removeAmmCalculator","burnedReq","burned","exitAmmPool","removeAmmClickMap","onAmmRemoveClick","useAmmPanel","AmmPanelType","Deposit","ammDepositData","ammWithdrawData","handleAmmAddChangeEvent","handleAmmRemoveChangeEvent","tabSelected","ammDepositBtnStatus","ammWithdrawBtnStatus","makeAmmDetailExtendsActivityMap","ammActivity","BoxStyled","fontDefault","h4","BoxTopStyled","CoinPairPanel","ammMapStatus","useUserRewardsStatus","setWalletMap","ammMarketArray","myAmmMarketArray","setMyAmmMarketArray","setAmmUserRewardMap","setSnapShotData","myAmm","setMyAmm","coinPairInfo","setCoinPairInfo","pairHistory","setPairHistory","walletLayer2DoIt","getPairList","ammList","formattedPairHistory","_coinPairInfo","_snapShotData","Error","useCoinPair","tabIndex","setPage","_handlePageChange","coinJson","coinAIcon","coinBIcon","Breadcrumbs","Link","href","getThousandFormattedNumbers","imgx","imgy","imgheight","imgwidth","alt","src","Avatar","lineHeight","marginLeft","Yuan","AmmCardWrap","forwardRef","AmmList","jumpTo","sm","lg","AmmMiningView","ammProps","userRewardsMapState","setAmmActivityViewMap","ammActivityPastViewMap","setAmmActivityPastViewMap","NotStarted","useAmmMiningUI","setTabIndex","spacing","useOverview","ammMapState","summaryReward","setSummaryReward","myPoolRow","setMyPoolRow","makeMyPoolRow","walletKey","test","rowData","_myPoolRow","makeSummaryMyAmm","StyleWrapper","MyLiquidity","JumpToLiqudity","padding","margin","handleWithdraw","subMenuLiquidity","LiquidityPage","ammActivityMapStatus","_ammActivityMap","setAmmActivityMap","useAmmPool","matchPair","ModalWalletConnectPanel","onClose","isShowConnect","qrCodeUrl","setQrCodeUrl","stateCheck","setStateCheck","metaMaskCallback","usedProvide","eth","walletConnectCallback","processingCallback","setProcessingCallback","callback","gatewayList","DefaultGatewayList","handleSelect","walletServices","sendDisconnect","MetaMaskProcessing","WalletConnectProcessing","handleProcessing","opts","WalletConnectQRCode","copyToastOpen","setCopyToastOpen","useConnectHook","walletList","providerName","onCopy","SuccessConnect","FailedConnect","onRetry","panelList","severity","updateAccountFromServer","feeMap","getAccount","formatedPx","formatedPy","maxFee","updateAccountResponse","UpdateAccoutError","GenEddsaKeyError","GetAccError","walletLayer2Services","sendSign","ProcessSign","sendErrorUnlock","ErrorSign","sendUpdateAccStatusAndReset","ErrorNetwork","sendCheckAccount","sendAccountLock","updateInfo","tags","LockAccount","sendActiveAccountDeposit","sendAccountSigned","publicKeyX","publicKeyY","AccountUnlocked","sendNoAccount","sendNeedUpdateAccount","ProcessDeposit","ethAddress","ProcessAccountCheck","onSocket","lockAccount","unlockAccount","generateKeyPair","toHex","secretKey","getUserApiKey","ModalAccountInfo","isShowAccount","openQRCode","setOpenQRCode","addressShort","getShortAddr","onSwitch","onViewQRCode","onDisconnect","goDeposit","goUpdateAccount","ActiveAccountProcess","SuccessUnlock","sleep","unlockBtn","lockBtn","accountList","_height","_width","etherscanLink","SignAccount","goActiveAccount","ProcessUnlock","FailedUnlock","mainBtn","DepositApproveProcess","ActiveAccountFailed","useChargeFees","chargeFeeList","setChargeFeeList","feeRaw","__raw__","useAccountModal","statusAccountUnset","handleErrorAccount","handleLockAccount","handleNoAccount","handleDepositingAccount","handleErrorApproveToken","handleErrorDepositSign","handleProcessDeposit","handleSignAccount","handleSignError","handleProcessSign","handleProcessAccountCheck","handleAccountActive","useAccountHook","ModalGroup","transferProps","transferValue","setTransferValue","TRANSFER","tranferFeeInfo","setTransferFeeInfo","payeeAddr","setPayeeAddr","onTransferClick","transferVol","payerAddr","payerId","payeeId","submitInternalTransfer","handlePanelEvent","handleFeeChange","transferBtnStatus","chargeFeeToken","chargeFeeTokenList","handleOnAddressChange","handleAddressError","_value","useTransfer","withdrawProps","withdrawValue","setWithdrawValue","walletMap2","setWalletMap2","OFFCHAIN_WITHDRAWAL","withdrawAddr","setWithdrawAddr","withdrawFeeInfo","setWithdrawFeeInfo","withdrawType","setWithdrawType","withdrawToken","withdrawVol","submitOffchainWithdraw","extraData","minGas","withdrawType2","FAST_OFFCHAIN_WITHDRAWAL","withdrawBtnStatus","withdrawTypes","WithdrawTypes","onWithdrawClick","handleWithdrawTypeChange","offchainType","WithdrawType","Fast","useWithdraw","withDrawProps","resetProps","swapProps","RouterView","Container","exact","path","networkUpdate","reload","checkAccount","newAccAddress","useAccountInit","stateAccount","setStateAccount","handleConnect","accounts","networkFlag","handleAccountDisconnect","handleError","errorObj","useConnect","walletLayer1Status","wallet1statusUnset","wallet2statusUnset","StyleBox","ErrorPage","messageKey","textAlign","left","top","email","CONTACT_US_EMAIL","getContactInfo","preventDefault","primaryLight","LoadingPage","version","xmlns","xmlnsXlink","viewBox","enableBackground","xmlSpace","fill","d","attributeType","attributeName","dur","repeatCount","App","tokenMapStatus","tokenMapStatusUnset","ammMapStatusUnset","systemStatus","systemStatusUnset","ammActivityMapStatusUnset","connector","useInit","GlobalStyles","styles","css","globalCss","mode","bg","providers","provider","LocalizationProvider","dateAdapter","MomentUtils","I18nextProvider","MuThemeProvider","getTheme","ThemeProvider","ReactDOM","render","getElementById","updateTicker","setRawData","setTimestamp","_ammMap","tickerMapKey","NO_TOKEN_MAP","updateTickerLoop","_keys","setImmediate","_page","i"],"mappings":"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","file":"static/js/main~06837ae4.16da31b6.chunk.js","sourcesContent":["import { useDispatch, useSelector } from 'react-redux'\nimport { AmmMapStates } from './interface';\nimport React from 'react';\nimport { getAmmMap, statusUnset } from './reducer';\n\nexport const useAmmMap = <R extends {[key:string]:any},I extends {[key:string]:any}>(): AmmMapStates<R,I> & {\n    getAmmMap:()=> void,\n    statusUnset:()=> void,\n} => {\n    const ammMap:AmmMapStates<R,I>= useSelector((state: any) => state.amm.ammMap)\n    const dispatch = useDispatch();\n    return {\n        ...ammMap,\n        statusUnset:React.useCallback(()=>dispatch(statusUnset(undefined)),[dispatch]),\n        getAmmMap:React.useCallback(()=>dispatch(getAmmMap(undefined)),[dispatch]),\n    }\n}\n","import { debug } from \"console\"\n\nexport function deepClone(data: any) {\n    if (!data || !(data instanceof Object) || (typeof data == \"function\")) {\n        return data || undefined\n    }\n    let constructor = data.constructor\n    let result = new constructor()\n    for (let key in data) {\n        if (data.hasOwnProperty(key)) {\n            result[key] = deepClone(data[key])\n        }\n    }\n    return result\n}\n\nexport async function copyToClipBoard(text: string){ //复制到剪切板\n\n    if(document.execCommand){\n        var textarea =document.createElement('textarea')\n        document.body.appendChild(textarea)\n        textarea.value=text\n        textarea.select()\n        document.execCommand(\"copy\")\n        document.body.removeChild(textarea)\n\t}\n\n    if (navigator.clipboard) {\n        await navigator.clipboard.writeText(text)\n    }\n\n\tif((window as any).clipboardData) {\n        (window as any).clipboardData.setData(\"Text\", text)\n\n        console.log('clipboardData:', text)\n        return true\n    }\n\treturn false\n}","export enum Theme {\n    dark = 'dark',\n    light = 'light',\n}\n\nexport enum LangType {\n    en = 'en_US',\n    cn = 'zh_CN',\n}\n\nexport enum SystemStatus {\n    NORMAL,\n    ERROR,\n    UNKNOWN,\n}\n\nexport enum MODAL_TYPE {\n    UNKNOWN,\n    LOADING,\n    WALLET,\n}\n\n\nexport enum ActionResultCode {\n    NoError,\n    DataNotReady,\n    GetAccError,\n    GenEddsaKeyError,\n    UpdateAccoutError,\n    ApproveFailed,\n    DepositFailed,\n}\n\nexport interface ActionResult {\n    code: ActionResultCode\n    data?: any\n}\n\nexport const REFRESH_RATE = 1000\n\nexport const REFRESH_RATE_SLOW = 10000\n\nexport const UPDATE_ACC_DELAY = 2500\n\nexport const TOAST_TIME = 3000\n\nexport const SHORT_INTERVAL = 200\n","import { createSlice, PayloadAction, Slice } from '@reduxjs/toolkit'\nimport { SliceCaseReducers } from '@reduxjs/toolkit/src/createSlice';\nimport { Account, AccountState, AccountStatus, ConnectProviders, SagaStatus } from '@loopring-web/common-resources';\nimport { connectProvides, walletServices } from '@loopring-web/web3-provider';\n\n// import { Lv2Account, } from 'defs/account_defs'\n// import { AccountStatus } from 'state_machine/account_machine_spec'\n// import { UserStorage } from 'storage'\n// const initialState = (initState:Partial<AccountState>) => {\n//   // const defaultAccId = process.env.REACT_APP_TEST_ACCOUND_ID ? process.env.REACT_APP_TEST_ACCOUND_ID : UserStorage.getAccountId()\n//   // const defaultApiKey = process.env.REACT_APP_TEST_API_KEY ? process.env.REACT_APP_TEST_API_KEY : UserStorage.getApikey()\n//   // const defaultOwner = process.env.REACT_APP_TEST_OWNER ? process.env.REACT_APP_TEST_OWNER : UserStorage.getAccount()\n//   // const defaultEddsaKey = process.env.REACT_APP_TEST_EDDSA_KEY ? process.env.REACT_APP_TEST_EDDSA_KEY : UserStorage.getEddsakey()\n//\n//   // const defaultStatus = AccountStatus.UNCONNNECTED\n//   // return {\n//   //   accAddr: defaultOwner,\n//   //   status: defaultStatus,\n//   //   accountId: defaultAccId,\n//   //   publicKey: {},\n//   //   nonce: 0,\n//   //   isContractAddress: false,\n//   //   apiKey: defaultApiKey,\n//   //   eddsaKey: defaultEddsaKey,\n//   //   connectName: ConnectorNames.unknown,\n//   //   connectNameTemp: ConnectorNames.unknown,\n//   // } as Lv2Account\n//   return {\n//     accAddress: '',\n//     status: AccountStatus.UN_CONNECT,\n//     accountId: '',\n//     apiKey: '',\n//     eddsaKey: '',\n//     connectName: ConnectProviders.UnKnow,\n//     // ...initState,\n//   }\n// }\nconst initialState: AccountState = {\n    accAddress: '',\n    readyState: AccountStatus.UN_CONNECT,\n    accountId: -1,\n    apiKey: '',\n    eddsaKey: '',\n    publicKey: {},\n    level: '',\n    nonce: undefined,\n    keyNonce: undefined,\n    connectName: ConnectProviders.unknown,\n    _chainId: 1,\n    status: 'PENDING',\n    errorMessage: null,\n\n}\n\nconst accountSlice: Slice<AccountState> = createSlice<AccountState, SliceCaseReducers<AccountState>>({\n    name: 'account',\n    initialState: initialState,\n    reducers: {\n        updateAccountStatus(state: AccountState, action: PayloadAction<Partial<Account>>) {\n            state.status = SagaStatus.PENDING\n        },\n        changeShowModel(state: AccountState, action: PayloadAction<{_userOnModel:boolean|undefined}>) {\n            const {\n                _userOnModel\n            } = action.payload;\n            state._userOnModel = _userOnModel;\n        },\n        nextAccountStatus(state: AccountState, action: PayloadAction<Partial<Account>>) {\n            // @ts-ignore\n            if (action.error) {\n                state.status = SagaStatus.ERROR\n                // @ts-ignore\n                state.errorMessage = action.error\n            } else {\n                const {\n                    accAddress,\n                    readyState,\n                    accountId,\n                    wrongChain,\n                    level,\n                    apiKey,\n                    eddsaKey,\n                    _chainId,\n                    nonce,\n                    connectName,\n                    // _userOnModel\n                } = action.payload;\n                if (accAddress !== undefined) {\n                    state.accAddress = accAddress;\n                }\n                if(wrongChain !== undefined){\n                    state.wrongChain = wrongChain\n                }\n                if (readyState) {\n                    state.readyState = readyState;\n                }\n                if (accountId !== undefined) {\n                    state.accountId = accountId;\n                }\n                if (level !== undefined) {\n                    state.level = level;\n                }\n                if (apiKey !== undefined) {\n                    state.apiKey = apiKey;\n                }\n                if (eddsaKey !== undefined) {\n                    state.eddsaKey = eddsaKey;\n                }\n                if (connectName !== undefined) {\n                    state.connectName = connectName;\n                }\n                if (_chainId !== undefined) {\n                    state._chainId = _chainId;\n                }\n                if (nonce !== undefined) {\n                    state.nonce = nonce;\n                }\n                state.status = SagaStatus.DONE;\n            }\n        },\n        cleanAccountStatus(state: AccountState, action: PayloadAction<{shouldUpdateProvider?:boolean|undefined}>) {\n            state.status = SagaStatus.PENDING\n        },\n        statusUnset: (state: AccountState) => {\n            state.status = SagaStatus.UNSET\n        }\n    },\n})\nexport default accountSlice\nexport const {\n    updateAccountStatus,\n    // restAccountStatus,\n    changeShowModel,\n    cleanAccountStatus,\n    nextAccountStatus,\n    statusUnset\n} = accountSlice.actions\n\n","import { useDispatch, useSelector } from 'react-redux'\nimport {\n    changeShowModel,\n    cleanAccountStatus,\n    // restAccountStatus,\n    statusUnset, updateAccountStatus\n} from './reducer';\nimport React from 'react';\nimport { Account, AccountState } from '@loopring-web/common-resources';\nimport { RootState } from 'stores';\nimport { sleep } from 'loopring-sdk';\n\n\nexport function useAccount() {\n    const {status, errorMessage, ...account}: AccountState = useSelector((state: RootState) => state.account);\n    // const [shouldShow,setShouldShow] = React.useState(account._userOnModel)\n    const dispatch = useDispatch();\n    \n    const resetAccount = React.useCallback( (props?:{shouldUpdateProvider?:boolean|undefined}) => {\n        dispatch(cleanAccountStatus(props));\n    }, [dispatch])\n\n    const updateAccount = React.useCallback((account: Partial<Account>) => {\n        dispatch(updateAccountStatus(account))\n    }, [dispatch]);\n\n    const shouldShow = React.useMemo(()=>{\n        return  account._userOnModel\n    }, [account]);\n\n    const setShouldShow = React.useCallback((flag:boolean)=>{\n        dispatch(changeShowModel({_userOnModel: flag}));\n    },[dispatch]);\n\n    const statusUnsetFunc = React.useCallback(() => {\n        dispatch(statusUnset(undefined))\n    }, [dispatch])\n\n    return {\n        account,\n        resetAccount,\n        shouldShow,\n        setShouldShow,\n        updateAccount,\n        statusUnset: statusUnsetFunc,\n        status,\n        errorMessage,\n    }\n\n}\n\n\n// import { useCallback, useState } from 'react'\n// import { useDispatch, useSelector } from 'react-redux'\n//\n// import { useCustomDCEffect } from 'hooks/common/useCustomDCEffect'\n//\n// import { useActiveWeb3React, } from 'hooks/web3/useWeb3'\n//\n// import { Lv2Account, } from 'defs/account_defs'\n//\n// import { AccountStatus, StatusChangeEvent } from 'state_machine/account_machine_spec'\n//\n// import * as sign_tools from 'loopring-sdk'\n//\n// import { connectorsByName } from 'defs/web3_defs'\n//\n// import { ConnectorNames, dumpError400, ExchangeAPI, sleep, UpdateAccountRequestV3, UserAPI, VALID_UNTIL, } from 'loopring-sdk'\n//\n// import { toHex, toBig, } from 'loopring-sdk'\n//\n// import { RootState } from 'reducer'\n//\n// import {\n//     reset, setAccountStatus, setConnectName,\n//     setConnectNameTemp, setAccountInfo, setEddsaKey, setApikey, setAccAddr,\n// } from 'reducer/account/reducer'\n//\n// import { AccountMachineSpec, } from 'state_machine/account_machine_spec'\n//\n// import { buildMachine } from 'state_machine/machine_builder'\n//\n// import voca from 'voca'\n// import { usePrevious } from 'react-use'\n//\n// import Web3 from 'web3'\n//\n// import { UserStorage } from 'storage'\n//\n// import store from 'reducer'\n// import { useWalletLayer1 } from '../walletLayer1';\n// import { useWalletLayer2 } from '../walletLayer2';\n// import { useTokenMap } from '../token';\n// import _ from 'lodash'\n// import { myLog } from 'utils/log_tools'\n// import { LoopringAPI } from 'reducer/apis/api'\n//\n// export function useWeb3Account() {\n//\n//     const {\n//         connector,\n//         library,\n//         account,\n//         chainId,\n//         active,\n//         error,\n//     } = useActiveWeb3React()\n//\n//     const isConnected: boolean = active && !voca.isBlank(account as string)\n//\n//     return {\n//         account,\n//         connector,\n//         library,\n//         chainId,\n//         active,\n//         isConnected,\n//         error,\n//     }\n//\n// }\n//\n// export function useAccount() {\n//\n//     const account: Lv2Account = useSelector((state: RootState) => state.account)\n//\n//     const isNoAccount = useCallback(() => {\n//         return account.status === AccountStatus.NOACCOUNT\n//     }, [account.status])\n//\n//     const isActivated = useCallback(() => {\n//         return account.status === AccountStatus.ACTIVATED\n//     }, [account.status])\n//\n//     return {\n//         account,\n//         isNoAccount,\n//         isActivated,\n//         apiKey: account.apiKey,\n//         eddsaKey: account.eddsaKey,\n//         accountId: account.accountId,\n//     }\n// }\n//\n// export function useStateMachine() {\n//     const dispatch = useDispatch()\n//\n//     const machine = buildMachine(AccountMachineSpec())\n//\n//     const sendEvent = useCallback((account: Lv2Account, event: StatusChangeEvent) => {\n//         const nextState = machine(account.status, event)\n//         if (nextState) {\n//             dispatch(setAccountStatus(nextState))\n//         }\n//     }, [machine, dispatch])\n//\n//     return {\n//         sendEvent,\n//     }\n// }\n//\n// export function useConnect() {\n//\n//     const {\n//         activate,\n//     } = useActiveWeb3React()\n//\n//     const { sendEvent } = useStateMachine()\n//\n//     const dispatch = useDispatch()\n//\n//     const [activatingConnector, setActivatingConnector] = useState<any>()\n//\n//     const connect = useCallback((item_name: ConnectorNames, isSwitch: boolean = false) => {\n//\n//         if (isSwitch) {\n//             myLog('try Connecting... isSwitch Reset')\n//             sendEvent(store.getState().account, StatusChangeEvent.Reset)\n//         }\n//\n//         const newConnector: any = connectorsByName[item_name]\n//         myLog('newConnector:', newConnector)\n//         setActivatingConnector(newConnector)\n//         activate(newConnector)\n//         dispatch(setConnectNameTemp(item_name))\n//\n//         //sendEvent(store.getState().account, StatusChangeEvent.Connecting)\n//\n//         myLog('store.getState().account.status:', store.getState().account.status)\n//\n//     }, [activate, dispatch, sendEvent])\n//\n//     return {\n//         connect,\n//         activatingConnector,\n//     }\n//\n// }\n//\n// export function useDisconnect() {\n//\n//     const {\n//         deactivate,\n//     } = useActiveWeb3React()\n//\n//     const dispatch = useDispatch()\n//\n//     const disconnect = useCallback(() => {\n//         deactivate()\n//         dispatch(reset(undefined))\n//     }, [deactivate, dispatch])\n//\n//     return {\n//         disconnect,\n//     }\n//\n// }\n//\n// export function useUnlock() {\n//\n//     const dispatch = useDispatch()\n//\n//     const { chainId } = useWeb3Account()\n//\n//     const { connector, } = useWeb3Account()\n//\n//     const { sendEvent } = useStateMachine()\n//\n//     const { resetLayer2 } = useWalletLayer2()\n//\n//     const lock = useCallback(async (account: Lv2Account) => {\n//         resetLayer2()\n//         sendEvent(account, StatusChangeEvent.Lock)\n//     }, [sendEvent, resetLayer2])\n//\n//     const exchangeInfo = useSelector((state: RootState) => state.system.exchangeInfo)\n//\n//     const unlock = useCallback(async (account: Lv2Account) => {\n//\n//         if (!LoopringAPI.userAPI || !LoopringAPI.exchangeAPI || !connector\n//             || !account.accountId || !exchangeInfo?.exchangeAddress\n//             || !chainId\n//             || account.status !== AccountStatus.LOCKED) {\n//             return\n//         }\n//\n//         if (account.status !== AccountStatus.LOCKED) {\n//             throw Error('unexpected status:' + account.status)\n//         }\n//\n//         myLog('try to unlock!', account)\n//\n//         let event = undefined\n//         let sk = undefined\n//         let apikey: any = undefined\n//\n//         const provider = await connector.getProvider()\n//         const web3 = new Web3(provider as any)\n//\n//         try {\n//\n//             const nonce = account.nonce - 1 < 0 ? 0 : account.nonce - 1\n//             myLog('try to unlock! nonce:', nonce)\n//\n//             if (!account.eddsaKey) {\n//                 const eddsaKey = await sign_tools\n//                     .generateKeyPair(\n//                         web3,\n//                         account.accAddr,\n//                         exchangeInfo?.exchangeAddress,\n//                         nonce,\n//                         account.connectName,\n//                     )\n//                 sk = eddsaKey.sk\n//             } else {\n//                 sk = account.eddsaKey\n//             }\n//\n//             myLog('useUnlock account:', account, ' sk:', sk)\n//\n//             apikey = await LoopringAPI.userAPI.getUserApiKey({\n//                 accountId: account.accountId\n//             }, sk)\n//\n//             event = StatusChangeEvent.Unlock\n//\n//         } catch (reason) {\n//             myLog('got :', reason)\n//             dumpError400(reason)\n//             if (reason?.response?.data?.resultInfo?.code === 100001) {\n//\n//                 try {\n//\n//                     // const req: GetOffchainFeeAmtRequest = {\n//                     //     accountId: account.accountId,\n//                     //     requestType: OffchainFeeReqType.UPDATE_ACCOUNT,\n//                     // }\n//\n//                     // const response = await userApi.getOffchainFeeAmt(req, account.apiKey)\n//\n//                     const feeMap = {\n//                         'ETH': '529000000000000',\n//                         'LRC': '34000000000000000000',\n//                         'USDT': '7850000',\n//                         'DAI': '98100000000000000000',\n//                     }\n//\n//                     const eddsaKey = await sign_tools\n//                         .generateKeyPair(\n//                             web3,\n//                             account.accAddr,\n//                             exchangeInfo?.exchangeAddress,\n//                             account.nonce,\n//                             account.connectName,\n//                         )\n//\n//                     const request: UpdateAccountRequestV3 = {\n//                         exchange: exchangeInfo?.exchangeAddress,\n//                         owner: account.accAddr,\n//                         accountId: account.accountId,\n//                         publicKey: { x: eddsaKey.formatedPx, y: eddsaKey.formatedPy },\n//                         maxFee: { tokenId: 0, volume: feeMap['ETH'] },\n//                         validUntil: VALID_UNTIL,\n//                         nonce: account.nonce,\n//                     }\n//\n//                     const updateAccountResponse = await LoopringAPI.userAPI.updateAccount(request, web3,\n//                         chainId, account.connectName, false)\n//\n//                     myLog('updateAccountResponse:', updateAccountResponse)\n//\n//                     await sleep(1000)\n//\n//                 } catch (reason2) {\n//                     dumpError400(reason2)\n//                 }\n//             }\n//             event = StatusChangeEvent.Reset\n//         }\n//\n//         if (sk) {\n//             dispatch(setEddsaKey(sk))\n//         }\n//\n//         if (apikey?.apiKey) {\n//             dispatch(setApikey(apikey.apiKey))\n//         }\n//\n//         if (event) {\n//             sendEvent(account, event)\n//         }\n//\n//     }\n//         , [dispatch, sendEvent, connector, chainId, exchangeInfo?.exchangeAddress])\n//\n//     return {\n//         lock,\n//         unlock,\n//     }\n// }\n//\n// async function checkAccountAvailableAsync(exchangeApi: ExchangeAPI, userApi: UserAPI, account: Lv2Account, dispatch: any, sendEvent: any, connector: any, exchangeAddress: string) {\n//\n//     let accInfo = undefined\n//     let event = undefined\n//     let sk = undefined\n//     let code = undefined\n//     let apikey: any = undefined\n//\n//     try {\n//         accInfo = (await exchangeApi.getAccount({\n//             owner: account.accAddr\n//         })).accInfo\n//         if (accInfo.publicKey && accInfo.publicKey.x && accInfo.publicKey.y) {\n//             if (account.accountId !== accInfo.accountId) {\n//                 const provider = await connector.getProvider()\n//                 const web3 = new Web3(provider as any)\n//                 try {\n//                     code = await web3.eth.getCode(account.accAddr)\n//                     try {\n//                         const eddsakey = await sign_tools\n//                             .generateKeyPair(\n//                                 web3,\n//                                 account.accAddr,\n//                                 exchangeAddress,\n//                                 accInfo.nonce - 1,\n//                                 account.connectName,\n//                             )\n//                         sk = toHex(toBig(eddsakey.keyPair.secretKey))\n//                         const px = toHex(toBig(eddsakey.keyPair.publicKeyX))\n//                         const py = toHex(toBig(eddsakey.keyPair.publicKeyY))\n//\n//                         try {\n//                             apikey = await userApi.getUserApiKey({\n//                                 accountId: accInfo.accountId\n//                             }, sk)\n//                             event = (StatusChangeEvent.HasPubkey)\n//                         } catch (reason) {\n//                             dumpError400(reason)\n//                             event = (StatusChangeEvent.ErrorResponse)\n//                         }\n//                     } catch (reason) {\n//                         dumpError400(reason)\n//                         event = (StatusChangeEvent.ErrorResponse)\n//                     }\n//\n//                 } catch (reason) {\n//                     dumpError400(reason)\n//                     event = (StatusChangeEvent.ErrorResponse)\n//                 }\n//\n//             } else {\n//                 myLog('already has accountId!')\n//             }\n//         } else {\n//             event = (StatusChangeEvent.HasNoPubkey)\n//         }\n//     } catch (reason) {\n//         // 3 has none of above\n//         dumpError400(reason)\n//         // check deposit tx (local and ethereum)\n//         event = (StatusChangeEvent.ErrorResponse)\n//     }\n//\n//     if (accInfo && accInfo.owner !== account.accAddr) {\n//         dispatch(setAccountInfo(accInfo))\n//     }\n//\n//     if (sk) {\n//         dispatch(setEddsaKey(sk))\n//     }\n//\n//     if (apikey) {\n//         dispatch(setApikey(apikey.apiKey))\n//     }\n//\n//     if (event) {\n//         sendEvent(event)\n//     }\n//\n// }\n//\n// export function useCheckAccStatus() {\n//\n//     const dispatch = useDispatch()\n//\n//     const { sendEvent } = useStateMachine()\n//\n//     const { account: web3Account, active, isConnected, chainId, connector, } = useWeb3Account()\n//     const { marketArray } = useTokenMap()\n//\n//     const lv1Acc = web3Account as string\n//\n//     const prevChainId = usePrevious(chainId)\n//     const prevWeb3Account = usePrevious(web3Account)\n//\n//     const {updateWalletLayer1, resetLayer1,} = useWalletLayer1()\n//     const {updateWalletLayer2, resetLayer2, } = useWalletLayer2();\n//\n//     // const { updateWalletLayer1,resetLayer1} = useWalletLayer1();\n//     // const { updateWalletLayer2, resetLayer2} = useWalletLayer2()\n//     // console.log('prevChainId:', prevChainId, ' chainId:', chainId)\n//     // console.log('prevWeb3Account:', prevWeb3Account, ' web3Account:', web3Account)\n//     // console.log(exchangeApi, userApi, account, 'prevChainId:', prevChainId, 'chainId:', chainId, 'web3Account:', web3Account)\n//\n//     useCustomDCEffect(async() => {\n//\n//         const account = store.getState().account as Lv2Account\n//\n//         const exchangeAddress = store.getState().system.exchangeInfo?.exchangeAddress\n//\n//         const cleanUp = () => {\n//             let handler = UserStorage.getHandler()\n//             if (account.status !== AccountStatus.ACTIVATED && handler) {\n//                 clearInterval(handler)\n//             }\n//         }\n//\n//         async function checkStatus() {\n//\n//             if (!account || !lv1Acc || !LoopringAPI.userAPI || !LoopringAPI.exchangeAPI || !chainId\n//                 || !connector || !exchangeAddress) {\n//                 return\n//             }\n//\n//             if (((prevChainId && chainId && prevChainId !== chainId)\n//                 || (prevWeb3Account && web3Account && prevWeb3Account !== web3Account))\n//                 && account.status !== AccountStatus.UNCONNNECTED) {\n//                 dispatch(reset(undefined))\n//                 sendEvent(account, StatusChangeEvent.Reset)\n//                 return\n//             }\n//\n//             cleanUp()\n//\n//             switch (account.status) {\n//                 case AccountStatus.UNCONNNECTED:\n//                     myLog('---> render UNCONNNECTED active:', active, ' isConnected:', isConnected)\n//\n//                     if (isConnected) {\n//                         dispatch(setConnectNameTemp(ConnectorNames.Injected))\n//                         sendEvent(account, StatusChangeEvent.Connecting)\n//                     }\n//\n//                     //HIGH:\n//                     resetLayer1()\n//                     resetLayer2()\n//                     break\n//\n//                 case AccountStatus.CONNECTED:\n//                     //check session or local storage\n//\n//                     myLog('---> render CONNECTED account:', account)\n//\n//                     try {\n//\n//                         const { accInfo } = (await LoopringAPI.exchangeAPI.getAccount({ owner: lv1Acc }))\n//\n//                         // current acc is local acc info\n//                         if (account.accAddr && account.eddsaKey && accInfo.owner === account.accAddr) {\n//                             // console.log('cur Eddsakey:', account.eddsaKey)\n//                         } else {\n//                             // console.log('got a new address:', acc)\n//                             // got a new address\n//                             dispatch(setAccountInfo(accInfo))\n//                             // dispatch(setEddsaKey(''))\n//\n//                             //updateWalletLayer1();\n//                             if (marketArray?.length) {\n//                                 updateWalletLayer1()\n//                             }\n//                         }\n//\n//                         if (account?.connectName !== account?.connectNameTemp) {\n//                             dispatch(setConnectName(account.connectNameTemp))\n//                         }\n//\n//                         sendEvent(account, StatusChangeEvent.HasPubkey)\n//\n//                     } catch (reason) {\n//                         dumpError400(reason)\n//\n//                         if (lv1Acc) {\n//                             dispatch(setAccAddr(lv1Acc))\n//                         }\n//\n//                         if (reason.response && reason.response.data && reason.response.data.resultInfo\n//                             && reason.response.data.resultInfo.code === 101002) {\n//                             sendEvent(account, StatusChangeEvent.ErrorResponse)\n//                         }\n//                     }\n//\n//                     break\n//\n//                 case AccountStatus.NOACCOUNT:\n//\n//                     myLog('NOACCOUNT before wait 30s!')\n//\n//                     _.delay(() => {\n//                         sendEvent(account, StatusChangeEvent.Reconnect)\n//                         myLog('NOACCOUNT wait 15s to reconnect again!')\n//                     }, 30000)\n//\n//                     break\n//\n//                 case AccountStatus.DEPOSITING:\n//                     const depositFinished = true // TODO\n//                     if (depositFinished) {\n//                         //   console.log('depositFinished currStatus:', account.status)\n//                         sendEvent(account, StatusChangeEvent.FinishDeposit)\n//                     }\n//                     break\n//\n//                 case AccountStatus.DEPOSIT_TO_CONFIREM:\n//                     // getAccount every 10s to check\n//                     break\n//\n//                 case AccountStatus.UNACTIVATED:\n//                     const isSmartWallet = false // TODO\n//                     if (isSmartWallet) {\n//                         sendEvent(account, StatusChangeEvent.IsSmartWallet)\n//                     } else {\n//                         // console.log('approve hash no smartwallet, account.status:', account.status)\n//                     }\n//                     break\n//\n//                 case AccountStatus.ARPROVING:\n//                     const approved = false // TODO\n//                     if (approved) {\n//                         //  console.log('sub contract event, check approving. approved! status:', account.status)\n//                         sendEvent(account, StatusChangeEvent.ApproveSubmit)\n//                     }\n//                     break\n//\n//                 case AccountStatus.APPROV_TO_CONFIRM:\n//                     const approveConfirmed = false // TODO\n//                     if (approveConfirmed) {\n//                         //   console.log('approveConfirmed status:', account.status)\n//                         sendEvent(account, StatusChangeEvent.ApproveConfirmed)\n//                     }\n//                     break\n//\n//                 case AccountStatus.LOCKED:\n//                     //HIGH:\n//                     resetLayer1()\n//                     break\n//\n//                 case AccountStatus.ACTIVATED:\n//                     UserStorage.checkTimeout(true)\n//                     const handler = setInterval(() => {\n//                         const isTimeOut = UserStorage.checkTimeout()\n//                         if (account.status === AccountStatus.ACTIVATED && isTimeOut) {\n//                             clearInterval(handler)\n//                             sendEvent(account, StatusChangeEvent.Lock)\n//                         }\n//                     }, 1000)\n//                     UserStorage.setHandler(handler)\n//                     updateWalletLayer2()\n//                     break\n//\n//                 default:\n//                     break\n//             }\n//\n//\n//\n//         }\n//\n//         checkStatus()\n//\n//         return () => {\n//             cleanUp()\n//         }\n//\n//     }, [updateWalletLayer1, updateWalletLayer2, resetLayer1, resetLayer2,\n//         LoopringAPI.userAPI, LoopringAPI.exchangeAPI, store.getState().account.status, prevChainId, chainId, lv1Acc,\n//         dispatch, connector, store.getState().system.exchangeInfo?.exchangeAddress])\n//\n// }\n//\n","import { createAction } from '@reduxjs/toolkit'\n\n// fired once when the app reloads but before the app renders\n// allows any updates to be applied to store data loaded from localStorage\nexport const updateVersion = createAction<void>('global/updateVersion')\n","import { createSlice, PayloadAction, Slice } from '@reduxjs/toolkit'\nimport { AmmActivityMapStates } from './interface';\nimport { SagaStatus } from '@loopring-web/common-resources';\n\n\nconst initialState: Required<AmmActivityMapStates> = {\n    ammActivityMap: {},\n    status: 'PENDING',\n    errorMessage: null,\n}\nconst ammActivityMapSlice: Slice = createSlice({\n    name: 'ammActivityMap',\n    initialState,\n    reducers: {\n        getAmmActivityMap(state, action: PayloadAction<string | undefined>) {\n            state.status = SagaStatus.PENDING\n        },\n        getAmmActivityMapStatus(state, action: PayloadAction<AmmActivityMapStates>) {\n            // @ts-ignore\n            if (action.error) {\n                state.status = SagaStatus.ERROR\n                // @ts-ignore\n                state.errorMessage = action.error\n            }\n            state.ammActivityMap = {...action.payload.ammActivityMap};\n            state.status = SagaStatus.DONE\n        },\n        statusUnset: state => {\n            state.status = SagaStatus.UNSET\n        }\n\n    },\n});\nexport { ammActivityMapSlice };\nexport const {getAmmActivityMap, getAmmActivityMapStatus, statusUnset} = ammActivityMapSlice.actions\n","import { useDispatch, useSelector } from 'react-redux'\nimport { AmmActivityMapStates } from './interface';\nimport { ammActivityMapSlice, getAmmActivityMap, statusUnset } from './reducer';\nimport React from 'react';\n\nexport function useAmmActivityMap(): AmmActivityMapStates & {\n    getAmmActivityMap:()=> void,\n    statusUnset:()=> void,\n} {\n    const ammActivityMap:AmmActivityMapStates = useSelector((state: any) => state.amm.ammActivityMap)\n    const dispatch = useDispatch();\n    return {\n        ...ammActivityMap,\n        statusUnset: React.useCallback(()=>dispatch(statusUnset(undefined)),[dispatch]),\n        getAmmActivityMap: React.useCallback(()=>dispatch(getAmmActivityMap(undefined)),[dispatch])\n    }\n\n}\n","import { AmmpoolAPI, ChainId, ExchangeAPI, UserAPI, WalletAPI, WsAPI } from \"loopring-sdk\"\nimport store from 'stores'\n\nexport function getChainId(){\n    const chainId = store.getState().system.chainId\n    return chainId\n}\n\nexport const walletAPI = () => {\n    const walletApi = new WalletAPI(getChainId() as ChainId)\n    return walletApi\n}\n\nexport const userAPI = () => {\n    const userApi = new UserAPI(getChainId() as ChainId)\n    return userApi\n}\n\nexport const exchangeAPI = () => {\n    const exchangeApi = new ExchangeAPI(getChainId() as ChainId)\n    return exchangeApi\n}\n\nexport const ammpoolAPI = () => {\n    const ammpoolApi = new AmmpoolAPI(getChainId() as ChainId)\n    return  ammpoolApi\n}\n\nexport const wsAPI = () => {\n    const wsApi = new WsAPI(getChainId() as ChainId)\n    return wsApi\n}\n\nexport class LoopringAPI {\n    \n    public static userAPI: UserAPI | undefined = undefined\n    public static exchangeAPI: ExchangeAPI | undefined = undefined\n    public static ammpoolAPI: AmmpoolAPI | undefined = undefined\n    public static walletAPI: WalletAPI | undefined = undefined\n    public static wsAPI: WsAPI | undefined = undefined\n\n    public static InitApi = (chainId: ChainId) => {\n        LoopringAPI.userAPI = new UserAPI(chainId) \n        LoopringAPI.exchangeAPI = new ExchangeAPI(chainId) \n        LoopringAPI.ammpoolAPI = new AmmpoolAPI(chainId) \n        LoopringAPI.walletAPI = new WalletAPI(chainId) \n        LoopringAPI.wsAPI = new WsAPI(chainId) \n    }\n\n}\n","import { all, takeLatest, call, put } from \"redux-saga/effects\"\nimport { getAmmActivityMap, getAmmActivityMapStatus } from './reducer'\nimport { LoopringAPI } from '../../apis/api';\nconst getAmmActivityMapApi = async () => {\n\n    if(LoopringAPI.ammpoolAPI){\n        const { groupByRuleTypeAndStatus } =  await LoopringAPI.ammpoolAPI.getAmmPoolActivityRules();\n        return  {data:groupByRuleTypeAndStatus}\n    }else{\n        return {data:undefined}\n    }\n\n}\n\nexport function* getPostsSaga() {\n    try {\n        //\n        const { data } = yield call(getAmmActivityMapApi);\n        yield put(getAmmActivityMapStatus({ammActivityMap:data}));\n    } catch (err) {\n        yield put(getAmmActivityMapStatus(err));\n    }\n}\n\nexport default function* ammActivityMapSaga() {\n    yield all([takeLatest(getAmmActivityMap, getPostsSaga)]);\n}\n","import { all, call, fork, put, takeLatest } from \"redux-saga/effects\";\nimport { getAmmMap, getAmmMapStatus, updateRealTimeAmmMap } from './reducer';\nimport { AmmDetail } from '@loopring-web/common-resources';\nimport store from '../../index';\nimport { AmmPoolInfoV3, AmmPoolStat, toBig, TokenVolumeV3, } from \"loopring-sdk\";\nimport { ammpoolAPI } from \"stores/apis/api\";\nimport { PayloadAction } from '@reduxjs/toolkit';\nimport { AmmDetailStore, GetAmmMapParams } from './interface';\nimport { volumeToCount, volumeToCountAsBigNumber } from '../../../hooks/help';\n\ntype AmmMap<R extends { [ key: string ]: any }> = { [ key: string ]: AmmDetail<R> } | {}  //key is AMM-XXX-XXX\nexport const setAmmState = ({ammPoolState, keyPair}: { ammPoolState: AmmPoolStat, keyPair: string }) => {\n    const {idIndex} = store.getState().tokenMap\n    // @ts-ignore\n    const [, coinA, coinB] = keyPair.match(/(\\w+)-(\\w+)/i);\n    const {forex,faitPrices} = store.getState().system;\n    if (idIndex && coinA && coinB && faitPrices && forex) {\n        let result =  {\n            amountDollar: parseFloat(ammPoolState.liquidityUSD),\n            amountYuan: (parseFloat(ammPoolState.liquidityUSD) / (forex ? forex : 6.5)),\n            totalLPToken: volumeToCount('LP-' + keyPair, ammPoolState.lpLiquidity),\n            totalA: volumeToCount(coinA, ammPoolState.liquidity[ 0 ]),//parseInt(ammPoolState.liquidity[ 0 ]),\n            totalB: volumeToCount(coinB, ammPoolState.liquidity[ 1 ]),//parseInt(ammPoolState.liquidity[ 1 ]),\n            rewardValue: ammPoolState.rewards[ 0 ] ? volumeToCount(idIndex[ ammPoolState.rewards[ 0 ].tokenId as number ], ammPoolState.rewards[ 0 ].volume) : undefined,\n            rewardToken: ammPoolState.rewards[ 0 ] ? idIndex[ ammPoolState.rewards[ 0 ].tokenId as number ] : undefined,\n            rewardValue2: ammPoolState.rewards[ 1 ] ? volumeToCount(idIndex[ ammPoolState.rewards[ 1 ].tokenId as number ], ammPoolState.rewards[ 1 ].volume) : undefined,\n            rewardToken2: ammPoolState.rewards[ 1 ] ? idIndex[ ammPoolState.rewards[ 1 ].tokenId as number ] : undefined,\n        }\n\n        const feeA =  volumeToCountAsBigNumber(coinA, ammPoolState.fees[ 0 ]);//parseInt(ammPoolState.fees[ 0 ]),\n        const feeB = volumeToCountAsBigNumber(coinB, ammPoolState.fees[ 1 ]);//parseInt(ammPoolState.fees[ 1 ]),\n        const feeDollar =  faitPrices[coinA] && faitPrices[coinB]  ?\n            toBig(feeA||0).times(faitPrices[coinA].price).plus(toBig(feeB||0).times(faitPrices[coinB].price)):undefined\n        const feeYuan = feeDollar ? feeDollar.times(forex) : undefined;\n\n        return {\n             ...result,\n            feeA:feeA?.toNumber(),\n            feeB:feeB?.toNumber(),\n            feeDollar:feeDollar? feeDollar.toNumber(): undefined,\n            feeYuan:feeYuan? feeYuan.toNumber(): undefined,\n            tradeFloat: {\n                change: undefined,\n                timeUnit: '24h',\n                // priceYuan: 100,\n                // priceDollar: 1.23123,\n                // floatTag: FloatTag.increase,\n                // reward: 12312,\n                // APY: (parseInt(ammPoolState.apyBips) * 1.0 / 100)\n            },\n            APY: (parseInt(ammPoolState.apyBips) * 1.0 / 100)\n        }\n\n\n    }\n}\nconst getAmmMapApi = async <R extends { [ key: string ]: any }>({ammpools}: GetAmmMapParams) => {\n\n    let ammMap: AmmMap<R> = {}\n    const {ammPoolStats} = (await ammpoolAPI().getAmmPoolStats());\n\n    let {__timer__} = store.getState().amm.ammMap\n    __timer__ = (() => {\n        if (__timer__ && __timer__ !== -1) {\n            clearInterval(__timer__)\n        }\n        return setInterval(async () => {\n            let ammPoolStats: { [key in keyof R]: AmmPoolStat } = (await ammpoolAPI().getAmmPoolStats()).ammPoolStats as { [key in keyof R]: AmmPoolStat }\n            store.dispatch(updateRealTimeAmmMap({ammPoolStats}))\n        }, 900000)    //15*60*1000 //900000\n    })()\n    const {tokenMap: {coinMap, idIndex}} = store.getState();\n\n    // const forex = faitPrices.prices['USDC']\n\n\n    Reflect.ownKeys(ammpools).forEach(async (key) => {\n        const item: AmmPoolInfoV3 = ammpools[ key as string ]\n        if (item.market === key && item.tokens.pooled && idIndex) {\n\n            // const tokenA =  ; //getTokenInfoById(tokens.tokenIdMap, parseInt(item.tokens.pooled[0]))\n            // const tokenB =  ; // getTokenInfoById(tokens.tokenIdMap, parseInt(item.tokens.pooled[1]))\n            const coinA = idIndex[ item.tokens.pooled[ 0 ] as any ];\n            const coinB = idIndex[ item.tokens.pooled[ 1 ] as any ];\n            const dataItem: AmmDetailStore<R> = {\n                coinA: coinA,\n                coinB: coinB,\n                isNew: Date.now() - (Number(item.createdAt)) > 3 * 86400 * 1000 ? false : true,//3*24*60*60*1000,\n                isActivity: item.status === 7 ? true : false,\n                address: item.address,\n                ...setAmmState({ammPoolState: ammPoolStats[ key ], keyPair: `${coinA}-${coinB}`}),\n                __rawConfig__: item\n            } as AmmDetailStore<R>\n            // @ts-ignore\n            ammMap[ item.market ] = dataItem\n\n\n        }\n\n\n    })\n    return {ammMap, __timer__}\n}\n\n\nexport function* getPostsSaga({payload}: PayloadAction<GetAmmMapParams>) {\n    try {\n        const {ammpools} = payload;\n        const {ammMap, __timer__} = yield call(getAmmMapApi, {ammpools});\n        yield put(getAmmMapStatus({ammMap, __timer__}));\n    } catch (err) {\n        yield put(getAmmMapStatus(err));\n    }\n}\n\nexport function* updateRealTimeSaga({payload}: any) {\n    try {\n        const {ammPoolStats} = payload;\n        let {ammMap}: { ammMap: AmmMap<object> } = store.getState().amm.ammMap;\n        if (ammPoolStats) {\n            //{ ammPoolStats?: { [ key: string ]: AmmPoolStat } }\n            Reflect.ownKeys(ammPoolStats).map((key) => {\n                const keyPair = (key as string).replace('AMM-', '')\n                \n                // @ts-ignore\n                ammMap[ key ] = {\n                    // @ts-ignore\n                    ...ammMap[ key ],\n                    ...setAmmState({ammPoolState: ammPoolStats[ key as string ], keyPair, })\n                }\n                return ammMap\n            })\n        }\n        yield put(getAmmMapStatus({ammMap}));\n    } catch (err) {\n        yield put(getAmmMapStatus(err));\n    }\n}\n\n\nexport function* ammMapInitSaga() {\n    yield all([takeLatest(getAmmMap, getPostsSaga)]);\n}\n\nexport function* ammMapRealTimeSaga() {\n    yield all([takeLatest(updateRealTimeAmmMap, updateRealTimeSaga)]);\n}\n\nexport const ammMapSaga = [\n        fork(ammMapInitSaga),\n        fork(ammMapRealTimeSaga),\n]\n\n","import { combineReducers } from '@reduxjs/toolkit';\n// import { ammRecordSlice } from './AmmConfig';\n// import { ammTradesSlice } from './AmmTrades';\nimport { ammMapSlice } from './AmmMap';\nimport { ammActivityMapSlice } from './AmmActivityMap';\nimport ammActivityMapSaga from './AmmActivityMap/saga';\nimport { ammMapSaga } from './AmmMap/saga';\n// import ammTradesSaga from './AmmTrades/saga';\nimport {  fork } from 'redux-saga/effects';\n\nexport const  ammReducer = combineReducers({\n    // ammRecord: ammRecordSlice.reducer,\n    // ammTrades: ammTradesSlice.reducer,\n    ammMap: ammMapSlice.reducer,\n    ammActivityMap:ammActivityMapSlice.reducer\n})\nexport const ammForks =  [\n    fork(ammActivityMapSaga),\n    ...ammMapSaga,\n    // fork(ammRecordSaga),\n    // fork(ammTradesSaga)\n]\n\n// export * from './interface'\n","import { utils } from 'ethers'\n\nimport { TokenInfo, } from 'loopring-sdk'\n\nimport { CoinInfo, } from '@loopring-web/common-resources'\n\nexport function getIcon(symbol: string, tokens: any) {\n    const token: any = tokens[symbol]\n    return getIconByTokenInfo(token)\n}\n\nexport function getIconByTokenInfo(token: TokenInfo) {\n    if (token) {\n        const addr = utils.getAddress(token.address)\n        const path = `https://exchange.loopring.io/assets/images/ethereum/assets/${addr}/logo.png`\n        return path\n    }\n    return ''\n}\n\nexport function makeCoinInfo(token: TokenInfo) {\n    if (token) {\n        const info: CoinInfo<any> = {\n            icon: getIconByTokenInfo(token),\n            name: token.symbol,\n            simpleName: token.symbol,\n            description: token.name,\n            company: token.name,\n        }\n        return info\n    }\n    return undefined\n}","import { all, call, fork, put, takeLatest } from \"redux-saga/effects\";\nimport { getTokenMap, getTokenMapStatus } from './reducer';\nimport { getIcon } from '../../utils/swap_utils';\nimport { CoinInfo, CoinMap } from '@loopring-web/common-resources';\nimport { AddressMap, GetTokenMapParams, IdMap } from './interface';\nimport { PayloadAction } from '@reduxjs/toolkit';\n\nconst getTokenMapApi = async <R extends { [ key: string ]: any }>({\n                                                                      tokensMap,\n                                                                      pairs,\n                                                                      marketArr,\n                                                                      tokenArr\n                                                                  }: GetTokenMapParams<R>) => {\n    let coinMap: CoinMap<any, CoinInfo<any>> = {};\n    let totalCoinMap: CoinMap<any, CoinInfo<any>> = {};\n    let tokenMap:any = tokensMap;\n    let addressIndex: AddressMap = {};\n    let idIndex: IdMap = {};\n    Reflect.ownKeys(tokensMap).forEach((key) => {\n        const coinInfo = {\n            icon: getIcon(key as string, tokensMap),\n            name: key as string,\n            simpleName: key as string,\n            description: '',\n            company: '',\n        }\n        if (!(key as string).startsWith('LP-')) {\n            coinMap[ key as string ] = coinInfo\n        }\n        totalCoinMap[ key as string ] = coinInfo\n\n        if (pairs[ key as string ] && pairs[ key as string ].tokenList) {\n            // @ts-ignore\n            tokensMap[ key ].tradePairs = pairs[ key as string ].tokenList;\n        }\n        addressIndex = {\n            ...addressIndex,\n            // @ts-ignore\n            [ tokensMap[ key ].address ]: key as string\n        }\n        idIndex = {\n            ...idIndex,\n            // @ts-ignore\n            [ tokensMap[ key ].tokenId ]: key as string\n        }\n    })\n    return {data: {coinMap, totalCoinMap, addressIndex, idIndex, tokenMap, marketArray: marketArr, marketCoins: tokenArr}}\n};\n\nexport function* getPostsSaga<R extends { [ key: string ]: any }>({payload}: PayloadAction<GetTokenMapParams<R>>) {\n    try {\n        const {tokensMap, marketMap, pairs, marketArr,tokenArr} = payload\n        // @ts-ignore\n        const {data} = yield call(getTokenMapApi, {tokensMap, pairs, marketArr, tokenArr});\n\n        yield put(getTokenMapStatus({...data, marketMap}));\n    } catch (err) {\n        yield put(getTokenMapStatus(err));\n    }\n}\n\nexport function* tokenInitSaga() {\n    yield all([takeLatest(getTokenMap, getPostsSaga)]);\n}\n\n\nexport const tokenSaga = [\n    fork(tokenInitSaga),\n    // fork(tokenPairsSaga),\n]\n\n// export function* getPairsSaga({payload}:PayloadAction<{tokenPairs: TokenPairs }>) {\n//     try {\n//         const {tokenPairs} = payload;\n//         const tokenPairsMap =  Reflect.ownKeys(tokenPairs).reduce((prev,key)=>{\n//            // @ts-ignore\n//             return prev[key as string] =  tokenPairs[key as string].tokenList\n//         }, {} )\n//\n//         yield put(getTokenMapStatus({tokenPairsMap}));\n//     } catch (err) {\n//         yield put(getAmmMapStatus(err));\n//     }\n// }\n// export function* tokenPairsSaga() {\n//     yield all([takeLatest(getTokenPairMap, getPairsSaga)]);\n// }\n\n\n","import { all, call, fork, put, takeLatest } from \"redux-saga/effects\"\nimport { getTicker, getTickers, getTickerStatus } from './reducer'\nimport { CoinKey, CustomError, ErrorMap, PairKey, TradeFloat } from '@loopring-web/common-resources'\n\n\nimport { exchangeAPI } from \"stores/apis/api\"\nimport { makeTickerMap } from '../../hooks/help';\n\n\ntype TickerMap<R extends { [ key: string ]: any }> = {\n    [key in CoinKey<R> | PairKey<R>]?: TradeFloat & {\n    reward?: number, rewardToken?: string\n}\n\n}\n\n\nconst getTickersApi = async <R extends { [ key: string ]: any }>(list: Array<keyof R>) => {\n\n    const tickers = await exchangeAPI().getMixTicker({market: list.join(',')})\n    const data = makeTickerMap({tickerMap: tickers.tickMap})\n    return {data}\n}\n\nexport function* getPostsSaga({payload}: any) {\n    try {\n        // @ts-ignore\n        const {tickerKey, tickerKeys} = payload;\n        if (tickerKey || (tickerKeys && tickerKeys.length)) {\n            const {data} = yield call(getTickersApi, tickerKey ? [tickerKey] : tickerKeys);\n            yield put(getTickerStatus({tickerMap: data}));\n\n        } else {\n            throw new CustomError(ErrorMap.NO_TOKEN_KEY_LIST);\n        }\n    } catch (err) {\n        yield put(getTickerStatus(err));\n    }\n}\n\nfunction* tickerSaga() {\n    yield all([takeLatest(getTicker, getPostsSaga)]);\n}\n\nfunction* tickersSaga() {\n    yield all([takeLatest(getTickers, getPostsSaga)]);\n}\n\nexport const tickerForks = [\n    fork(tickerSaga),\n    fork(tickersSaga),\n]\n ","import { StateBase } from '@loopring-web/common-resources';\nimport { ChainId, ExchangeInfo } from 'loopring-sdk';\n\nexport enum ENV {\n    DEV = 'DEV',\n    UAT = 'UAT',\n    PROD = 'PROD',\n}\n\nexport enum NETWORKEXTEND {\n    NONETWORK = 'unknown'\n}\n\nexport type NETWORK = NETWORKEXTEND | ChainId\n\n\nexport type System<C extends { [ key: string ]: any }> = {\n    env: keyof typeof ENV,\n    chainId: 1 | 5 | 'unknown'\n    // network: keyof typeof NETWORK,\n    etherscanUrl: string,\n    socketURL: string,\n    baseURL: string,\n    faitPrices: { [k in keyof C]: { price: any, [ key: string ]: any } } | undefined,\n    gasPrice: number | undefined,\n    forex: number | undefined,\n    exchangeInfo: ExchangeInfo | undefined,\n\n}\n\nexport type SystemStatus = System<{ [ key: string ]: any }> & {\n    // system:System | {}\n    __timer__: NodeJS.Timeout | -1\n    topics: any[]\n} & StateBase\n\n\n\n\n\n\n","import { createSlice, PayloadAction, Slice } from '@reduxjs/toolkit'\nimport { ENV, System, SystemStatus } from './interface';\nimport { SagaStatus } from '@loopring-web/common-resources';\n\nconst initialState: SystemStatus = {\n    env: ENV.PROD,\n    chainId: 'unknown',\n    // network:'NONETWORK',\n    baseURL: '',\n    socketURL: '',\n    etherscanUrl: '',\n    faitPrices: undefined,\n    gasPrice: undefined,\n    forex: undefined,\n    __timer__: -1,\n    status: 'PENDING',\n    errorMessage: null,\n\n    exchangeInfo: undefined,\n\n    topics: [],\n}\nconst systemSlice: Slice<SystemStatus> = createSlice({\n    name: 'system',\n    initialState,\n    reducers: {\n\n        updateSystem(state, action: PayloadAction<System<{ [ key: string ]: any }>>) {\n            state.chainId = action.payload.chainId\n            state.status = SagaStatus.PENDING\n        },\n        // updateSocketURL(state, action:PayloadAction<{socketURL:string}>) {\n        //     state.socketURL =  action.payload.socketURL;\n        // },\n        updateRealTimeObj(state, action: PayloadAction<Partial<{ faitPrices: any, gasPrice: number, forex: number }>>) {\n            const {forex, faitPrices, gasPrice} = action.payload;\n            if (forex) {\n                state.forex = forex\n            }\n            if (faitPrices) {\n                state.faitPrices = faitPrices\n            }\n            if (gasPrice) {\n                state.gasPrice = gasPrice\n            }\n\n\n            // state = {\n            //     ...state.system,\n            //     forex: forex?,\n            //     faitPrices: action.payload.faitPrices ? action.payload.faitPrices : state.system.faitPrices,\n            //     gasPrice: action.payload.gasPrice ? action.payload.gasPrice : state.system.gasPrice,\n            // };\n\n        },\n        getSystemStatus(state, action: PayloadAction<Partial<SystemStatus>>) {\n\n            // @ts-ignore\n            if (action.error) {\n                state.status = SagaStatus.ERROR\n                // @ts-ignore\n                state.errorMessage = action.error\n            }\n            const {\n                env,\n                baseURL,\n                socketURL,\n                faitPrices,\n                gasPrice,\n                forex,\n                exchangeInfo,\n                __timer__,\n                etherscanUrl\n            } = action.payload;\n            if (env) {\n                state.env = env\n            }\n            if (socketURL) {\n                state.socketURL = socketURL;\n            }\n            if (baseURL) {\n                state.baseURL = baseURL\n            }\n            if (faitPrices) {\n                state.faitPrices = faitPrices\n            }\n            if (gasPrice) {\n                state.gasPrice = gasPrice\n            }\n            if (forex) {\n                state.forex = forex\n            }\n\n            if (exchangeInfo) {\n                state.exchangeInfo = exchangeInfo\n            }\n            if (etherscanUrl) {\n                state.etherscanUrl = etherscanUrl\n            }\n\n            if (__timer__) {\n                state.__timer__ = __timer__\n            }\n            state.status = SagaStatus.DONE\n        },\n        statusUnset: state => {\n            state.status = SagaStatus.UNSET\n        }\n\n    },\n});\nexport { systemSlice };\nexport const {updateSystem, setTopics, getSystemStatus, statusUnset, updateRealTimeObj} = systemSlice.actions;","import { createSlice, PayloadAction, Slice } from '@reduxjs/toolkit'\nimport { WalletLayer1Map, WalletLayer1States } from './interface';\nimport { SagaStatus } from '@loopring-web/common-resources';\n\n\nconst initialState: WalletLayer1States = {\n    walletLayer1: undefined,\n    status: 'DONE',\n    errorMessage: null,\n}\nconst walletLayer1Slice: Slice = createSlice({\n    name: 'walletLayer1',\n    initialState,\n    reducers: {\n        updateWalletLayer1(state, action: PayloadAction<string | undefined>) {\n            state.status = SagaStatus.PENDING\n        },\n        reset(state, action: PayloadAction<string | undefined>) {\n            state.walletLayer1 = undefined;\n            state.status = SagaStatus.UNSET;\n        },\n        getWalletLayer1Status(state, action: PayloadAction<{ walletLayer1: WalletLayer1Map<object> }>) {\n            // @ts-ignore\n            if (action.error) {\n                state.status = SagaStatus.ERROR\n                // @ts-ignore\n                state.errorMessage = action.error\n            }\n            state.walletLayer1 = {...action.payload.walletLayer1};\n            state.status = SagaStatus.DONE\n        },\n        statusUnset: state => {\n            state.status = SagaStatus.UNSET\n        }\n    },\n});\nexport { walletLayer1Slice };\nexport const {updateWalletLayer1, getWalletLayer1Status, statusUnset, reset} = walletLayer1Slice.actions\n","import { useDispatch, useSelector } from 'react-redux'\nimport { updateWalletLayer1, reset,statusUnset } from './reducer';\nimport { WalletLayer1States } from './interface';\nimport React from 'react';\n\nexport function useWalletLayer1(): WalletLayer1States & {\n    updateWalletLayer1:()=> void,\n    statusUnset:()=> void,\n    resetLayer1:()=>void,\n} {\n    const walletLayer1:WalletLayer1States = useSelector((state: any) => state.walletLayer1)\n    const dispatch = useDispatch();\n\n    return {\n        ...walletLayer1,\n        resetLayer1:React.useCallback(()=>{\n            dispatch(reset(undefined))\n        },[dispatch]),\n        statusUnset:React.useCallback(()=>dispatch(statusUnset(undefined)),[dispatch]),\n        updateWalletLayer1:React.useCallback(()=>dispatch(updateWalletLayer1(undefined)),[dispatch]),\n    }\n\n}\n","import {\n    ChainId,\n    getAccountArg,\n    getAmmpoolArg,\n    getCandlestickArg,\n    getOrderArg,\n    getOrderBookArg,\n    getTickerArg,\n    getTradeArg,\n    toBig,\n} from 'loopring-sdk';\nimport { tickerService } from './tickerService';\nimport { ammPoolService } from './ammPoolService';\nimport { CustomError, ErrorMap } from '@loopring-web/common-resources';\nimport { LoopringAPI } from '../stores/apis/api';\n// import store from '../stores';\n// import { updateSocketURL } from '../stores/system';\n\n\nexport type SocketEvent = (e: any, ...props: any[]) => any\n\nexport enum SocketEventType {\n    pingpong = 'pingpong',\n    account = \"account\",\n    order = \"order\",\n    orderbook = \"orderbook\",\n    trade = \"trade\",\n    ticker = \"ticker\",\n    candlestick = \"candlestick\",\n    ammpool = \"ammpool\"\n}\n\nexport type SocketCallbackMap = {\n    // [SocketEventType.pingpong]:  { fn: SocketEvent, deps?: any[] },\n    [key in SocketEventType]?: { fn: SocketEvent, deps: any[] }\n}\n//\nexport type SocketEventMap = {\n    [key in SocketEventType]: SocketEvent\n}\n\nexport class LoopringSocket {\n    private static SocketEventMap: SocketEventMap = {\n        [ SocketEventType.account ]: (_e: any) => {\n\n        },\n        [ SocketEventType.order ]: (_e: any) => {\n\n        },\n        [ SocketEventType.orderbook ]: (_e: any) => {\n\n        },\n        [ SocketEventType.trade ]: (_e: any) => {\n\n        },\n        [ SocketEventType.ticker ]: (data: string[]) => {\n            const [symbol, timestamp, size, volume, open, high, low, close, count, bid, ask] = data;\n            // @ts-ignore\n            const [, base, quote] = symbol.match(/(\\w+)-(\\w+)/i);\n            const base_token_volume = size;\n            const quote_token_volume = volume;\n            const change = open === undefined || Number(open) === 0 ? undefined : (toBig(close).minus(open)).div(open)\n            tickerService.sendTicker({\n                [ symbol ]: {\n                    symbol, base, quote,\n                    base_token_volume,\n                    quote_token_volume,\n                    timestamp: Number(timestamp),\n                    change,\n                    base_fee_amt: undefined,\n                    quote_fee_amt: undefined,\n                    open, high, low, close, count, bid, ask\n                } as any\n            })\n        },\n        [ SocketEventType.candlestick ]: (_e: any) => {\n\n        },\n        [ SocketEventType.candlestick ]: (data: string) => {\n\n        },\n        [ SocketEventType.ammpool ]: (data: string[]) => {\n            // const [market,timestamp,size,volume,open,high,low,close,count,bid,ask] = data;\n            // @ts-ignore\n            const [poolName, poolAddress, pooled, [tokenId, volume], risky] = data;\n            // @ts-ignore\n            ammPoolService.sendAmmPool({poolName, poolAddress, pooled, lp: {tokenId, volume}, risky})\n        },\n        // @ts-ignore\n        [ SocketEventType.pingpong ]: (data: string, instance:InstanceType<LoopringSocket>) => {\n\n            if (data === 'ping') {\n                instance.loopringSocket.send('pong')\n            }\n        },\n    }\n    get loopringSocket(): WebSocket | undefined {\n        return this._loopringSocket;\n    }\n    get socketCallbackMap(): SocketCallbackMap | undefined {\n        return this._socketCallbackMap;\n    }\n    //TODO fill the socket receiver format callback\n\n    private _socketCallbackMap: SocketCallbackMap|undefined;\n    private _loopringSocket:WebSocket|undefined;\n    private __wsTimer__:{timer:NodeJS.Timer|-1,count:number} = {\n        timer:-1,\n        count:0\n    };\n    private _baseUrl:string;\n    constructor(url:string) {\n        // const url = ChainId.MAINNET === chainId ? process.env.REACT_APP_API_URL : process.env.REACT_APP_API_URL_UAT;\n        this._baseUrl = url; // baseSocket: string = `wss://ws.${url}/v3/ws?wsApiKey=${wsKey}`;\n    }\n\n    // private static PingPong = {\n    //     fn:\n    // }\n\n    public socketSendMessage = async ({socket, apiKey}: {\n        chainId: ChainId | 'unknown',\n        socket: { [ key: string ]: string[] }\n        apiKey?: string\n    }): Promise<boolean> => {\n        try {\n            if (socket && Reflect.ownKeys(socket).length) {\n                //register ping pong event\n                this.clearInitTimer(true);\n                this.resetSocketEvents();\n                const {topics} = this.makeMessageArray({socket});\n                if (!this.isConnectSocket() ) {\n                    await this.socketConnect({ topics, apiKey})\n                } else {\n\n                    this._loopringSocket?.send(this.makeTopics(topics))\n\n                }\n                return true\n            } else {\n                if (!this.isConnectSocket()) {\n                    this.socketClose();\n                }\n                return false\n            }\n        } catch (error) {\n            throw  new CustomError(ErrorMap.SOCKET_ERROR)\n        }\n\n    }\n    public socketClose = async () => {\n        let ws: WebSocket | undefined = this._loopringSocket;\n\n        return new Promise((reolve) => {\n            if (ws) {\n                ws.onclose = function (e) {\n                    reolve(`Socket is closed, ${e.reason}`)\n                };\n                ws.close();\n            } else {\n                Promise.resolve('no websocket')\n            }\n        })\n    }\n\n    public removeSocketEvents = (key: string) => {\n        // @ts-ignore\n        if (this._socketCallbackMap && this._socketCallbackMap[ key ]) {\n            // @ts-ignore\n            delete this._socketCallbackMap[ key ]\n        }\n    }\n\n    private makeMessageArray = ({socket}: { socket: { [ key: string ]: string[] } }): {\n        topics: any[]\n    } => {\n        let topics: any[] = [], list: any[] = []; // let registerDispatch = [];\n        Reflect.ownKeys(socket).forEach((eventType) => {\n            switch (eventType) {\n                case  SocketEventType.ticker:\n                    list = socket[ SocketEventType.ticker ].map(key => getTickerArg(key))\n                    if (list && list.length) {\n                        this.addSocketEvents(SocketEventType.ticker)\n                        topics = [...topics, ...list];\n                    }\n                    break\n                case  SocketEventType.account:\n                    if (socket[ SocketEventType.account ]) {\n                        list = [getAccountArg()]\n                    }\n                    if (list && list.length) {\n                        this.addSocketEvents(SocketEventType.account)\n                        topics = [...topics, ...list];\n                    }\n                    break;\n                case  SocketEventType.order:\n                    //FIX:  make order Topic\n                    list = socket[ SocketEventType.order ].map(key => getOrderArg(key))\n                    if (list && list.length) {\n                        this.addSocketEvents(SocketEventType.order)\n                        topics = [...topics, ...list];\n                    }\n                    break\n                case  SocketEventType.orderbook:\n                    //FIX:  make orderbook Topic\n                    list = socket[ SocketEventType.orderbook ].map(key => getOrderBookArg(key, 0))\n                    if (list && list.length) {\n                        this.addSocketEvents(SocketEventType.orderbook)\n                        topics = [...topics, ...list];\n                    }\n                    break\n                case  SocketEventType.trade:\n                    list = socket[ SocketEventType.trade ].map(key => getTradeArg(key))\n                    if (list && list.length) {\n                        this.addSocketEvents(SocketEventType.trade)\n                        topics = [...topics, ...list];\n                    }\n                    break\n                case  SocketEventType.candlestick:\n                    list = socket[ SocketEventType.candlestick ].map(key => getCandlestickArg(key))\n                    if (list && list.length) {\n                        this.addSocketEvents(SocketEventType.candlestick)\n                        topics = [...topics, ...list];\n                    }\n                    break\n                case  SocketEventType.ammpool:\n                    list = socket[ SocketEventType.ammpool ].map(key => getAmmpoolArg(key))\n                    if (list && list.length) {\n                        this.addSocketEvents(SocketEventType.ammpool)\n                        topics = [...topics, ...list];\n                    }\n                    break\n            }\n        })\n        return {topics}\n    }\n\n    private isConnectSocket = () => {\n        return !!(this._loopringSocket && this._loopringSocket.send);\n    }\n\n    private makeTopics = (topics: any, apiKey?: string) => {\n        let data: any = {\n            op: 'sub',\n            unsubscribeAll: 'true',\n            topics: topics,\n        }\n\n        if (apiKey) {\n            data.apiKey = apiKey\n        }\n        // console.log('Socket>>Socket',JSON.stringify(data));\n        return JSON.stringify(data)\n        // sendMessage(flat_txt)\n    }\n\n    private addSocketEvents = (type: keyof typeof SocketEventType,deps?:any[]) => {\n\n        this._socketCallbackMap = {\n            ...this._socketCallbackMap,\n            [ type ]: {\n                fn: LoopringSocket.SocketEventMap[type],\n                deps:deps?deps:[]\n            }\n        }\n    }\n\n    private socketConnect = async ({ topics, apiKey}: {\n       // chainId: ChainId | 'unknown',\n        topics: any[],\n        apiKey?: string\n    }) => {\n        try {\n            const self = this;\n            if (LoopringAPI.wsAPI && topics) {\n                const {wsKey} = await LoopringAPI.wsAPI.getWsKey();\n                this._loopringSocket = new WebSocket(`${this._baseUrl}?wsApiKey=${wsKey}`);\n\n                this._loopringSocket.onopen = function () {\n                    console.warn('Socket>>Socket', \"WebSocket is open now.\");\n                    if(self._loopringSocket && self._loopringSocket.readyState === WebSocket.OPEN){\n                        self._loopringSocket.send(self.makeTopics(topics))\n                    }\n\n                };\n                this._loopringSocket.onmessage = function (e) {\n                    const {data} = e;\n                    // data.topic.topic;\n                    if (data === 'ping' && self._socketCallbackMap) {\n                        // console.log('Socket>>Socket ping:', e);\n                        self._socketCallbackMap?.pingpong?.fn.call( self, data, ...self._socketCallbackMap.pingpong.deps);\n                    } else {\n                        const result = JSON.parse(data);\n                        const {topics, topic} = result;\n                        if (topics) {\n                            // console.log('Socket>>Socket topics first return', topics);\n                        }\n                        if (topic && topic.topic && self._socketCallbackMap) {\n                            const {topic: {topic}, data} = result\n                             self._socketCallbackMap[ topic.topic ]?.fn.call( self, data, ...self._socketCallbackMap[ topic.topic ].deps);\n\n                        }\n\n                    }\n                    return false;\n                };\n                this._loopringSocket.onclose = async function (e) {\n                    // console.error('Socket>>Socket', e);\n                    if (self._loopringSocket) {\n                        self._loopringSocket = undefined;\n                    }\n                    console.log('Socket>>Socket', 'Socket is closed. Reconnect will be attempted in 1 second.', e.reason);\n                    self.clearInitTimer()\n                    if (self.__wsTimer__.count < 5) {\n                        self.__wsTimer__.timer = setTimeout(function () {\n                            self.socketConnect.call(self, { topics, apiKey});\n                        }, 1000 * self.__wsTimer__.count);\n                    }\n                };\n                this._loopringSocket.onerror = function (err: Event) {\n                    console.error('Socket>>Socket', 'Socket encountered error:', 'Closing socket', err);\n                };\n\n            }\n        } catch (error) {\n            console.error('Socket>>Socket', 'connect error, not from reconnect')\n            // @ts-ignore\n            if (this._loopringSocket) {\n                // @ts-ignore\n                this._loopringSocket.close()\n            }\n        }\n    }\n    private clearInitTimer = (init?: boolean) => {\n\n        if (this.__wsTimer__) {\n            if (this.__wsTimer__.timer !== -1) {\n                clearTimeout(this.__wsTimer__.timer)\n            }\n            this.__wsTimer__.timer = -1\n            this.__wsTimer__.count++;\n        }\n        if (init) {\n            this.__wsTimer__ = {\n                //...self.__wsTimer__,\n                timer: -1,\n                count: 0\n            }\n        }\n    }\n    private resetSocketEvents = () => {\n        this._socketCallbackMap = undefined;\n        this.addSocketEvents(SocketEventType.pingpong,[this])\n    }\n}\n// const socketInstance = new LoopringSocket();\n// // @ts-ignore\n// window.loopringSocket = socketInstance;\n//\n// export default socketInstance;\n\n\n\n","import { Subject } from 'rxjs';\n// import { TradeFloat } from '@loopring-web/common-resources';\nimport { LoopringMap } from 'loopring-sdk/dist/defs/loopring_defs';\nimport { TickerData } from 'loopring-sdk';\nimport { makeTickerMap } from '../hooks/help';\nimport { TickerMap } from '../stores/ticker';\n\nconst subject = new Subject<{ tickerMap: TickerMap<{ [ key: string ]: any }> }>();\n\n// export type TickerMap<R> = {\n//     [key in keyof R]:TradeFloat\n// }\n// <R extends {[key:string]:any}>\n  //<R>\nexport const tickerService = {\n    sendTicker: (_tickerMap:LoopringMap<TickerData>) => {\n       const tickerMap:TickerMap<{[key:string]:any}> = makeTickerMap({tickerMap:_tickerMap})\n       subject.next({ tickerMap })\n    },\n    // clearMessages: () => subject.next(),\n    onSocket: () => subject.asObservable()\n};","import { Subject } from 'rxjs';\nimport { TradeFloat } from '@loopring-web/common-resources';\n\nconst subject = new Subject();\n\nexport type AmmPoolMap<R> = {\n    [key in keyof R]:TradeFloat\n}\n// <R extends {[key:string]:any}>\n\nexport const ammPoolService = {\n    sendAmmPool: (ammPoolMap:AmmPoolMap<{[key:string]:any}>) => subject.next({ ammPoolMap: ammPoolMap }),\n    // clearMessages: () => subject.next(),\n    onSocket: () => subject.asObservable()\n};","import { all, call, fork, put, take, takeLatest } from \"redux-saga/effects\"\nimport { getSystemStatus, updateRealTimeObj, updateSystem } from './reducer'\nimport { ENV, NETWORKEXTEND } from \"./interface\"\nimport store from '../index';\n// import { reset } from '../account/reducer';\nimport { ChainId } from 'loopring-sdk';\nimport { exchangeAPI, LoopringAPI } from '../apis/api';\nimport { getAmmMap, updateRealTimeAmmMap } from '../Amm/AmmMap';\nimport { getTokenMap } from '../token';\nimport { CustomError, ErrorMap } from '@loopring-web/common-resources';\nimport { getAmmActivityMap } from '../Amm/AmmActivityMap';\nimport { updateWalletLayer1 } from '../walletLayer1';\nimport { delay } from 'rxjs/operators';\nimport { LoopringSocket } from '../../services/socketUtil';\nimport { statusUnset as accountStatusUnset } from '../account';\n\nconst initConfig = function* <R extends { [ key: string ]: any }>(chainId: ChainId | 'unknown') {\n    // store.dispatch(updateAccountStatus());\n    const {tokenSymbolMap: tokensMap} = yield call(async () => await LoopringAPI.exchangeAPI?.getTokens())\n    const {ammpools} = yield call(async () => await LoopringAPI.ammpoolAPI?.getAmmPoolConf());\n    const {pairs, marketArr, tokenArr, markets} = yield call(async () => LoopringAPI.exchangeAPI?.getMixMarkets());\n    store.dispatch(getTokenMap({tokensMap, marketMap: markets, pairs, marketArr, tokenArr}))\n    yield take('tokenMap/getTokenMapStatus');\n    // let basePath: string = `wss://ws.${baseURL}/v3/ws?wsApiKey=${wsKey}`\n    store.dispatch(getAmmMap({ammpools}))\n    store.dispatch(getAmmActivityMap({ammpools}))\n    if (store.getState().tokenMap.status === 'ERROR') {\n\n    }\n\n    yield delay(10);\n    //IF already connect has address, getInfo walletLayer 1\n    const {account, walletLayer1} = store.getState() //.account.accAddr && !store.getState().walletLayer1.walletLayer1\n    if (account.accAddress && walletLayer1.walletLayer1 === undefined) {\n        store.dispatch(updateWalletLayer1(undefined));\n    }\n    store.dispatch(accountStatusUnset(undefined));\n}\n\nconst getSystemsApi = async <R extends { [ key: string ]: any }>(chainId: any) => {\n    //TODO get some other reuqired id...... put into system\n    // const { chainId } = system\n    const env = window.location.hostname === 'localhost' ? ENV.DEV : ChainId.GORLI === chainId ? ENV.UAT : ENV.PROD\n    chainId = ChainId.GORLI === chainId ? ChainId.GORLI : ChainId.MAINNET === chainId ? ChainId.MAINNET : NETWORKEXTEND.NONETWORK\n\n    if (chainId === NETWORKEXTEND.NONETWORK) {\n        throw new CustomError(ErrorMap.NO_NETWORK_ERROR)\n    } else {\n        LoopringAPI.InitApi(chainId as ChainId);\n        if (LoopringAPI.exchangeAPI) {\n            const {exchangeInfo} = (await LoopringAPI.exchangeAPI.getExchangeInfo())\n            const faitPrices = (await LoopringAPI.exchangeAPI.getFiatPrice({legal: 'USD'})).fiatPrices\n            const faitPricesY = (await LoopringAPI.exchangeAPI.getFiatPrice({legal: 'CNY'})).fiatPrices\n            const gasPrice = (await exchangeAPI().getGasPrice()).gasPrice / 1e+9;\n            // : process.env.REACT_APP_API_URL_UAT;\n            const baseURL = ChainId.MAINNET === chainId ? `https://${process.env.REACT_APP_API_URL}` : `https:/${process.env.REACT_APP_API_URL_UAT}`\n            const socketURL = ChainId.MAINNET === chainId ? `wss://ws.${process.env.REACT_APP_API_URL}/v3/ws` : `wss://ws.${process.env.REACT_APP_API_URL_UAT}/v3/ws`;\n            const etherscanUrl = ChainId.MAINNET === chainId ? `https://etherscan.io/address/` : `https://goerli.etherscan.io/address/`\n\n            window.loopringSocket = new LoopringSocket(socketURL);\n\n            const forex = faitPricesY[ 'USDT' ].price;\n            let {__timer__} = store.getState().system;\n            __timer__ = ((__timer__) => {\n                if (__timer__ && __timer__ !== -1) {\n                    clearInterval(__timer__);\n                }\n                return setInterval(async () => {\n                    const faitPrices = (await exchangeAPI().getFiatPrice({legal: 'CNY'})).fiatPrices\n                    const gasPrice = (await exchangeAPI().getGasPrice()).gasPrice / 1e+9\n                    const forex = faitPrices[ 'USDT' ]?.price\n                    store.dispatch(updateRealTimeAmmMap(undefined))\n                    store.dispatch(updateRealTimeObj({faitPrices, gasPrice, forex}))\n                }, 300000)   //\n\n            })(__timer__);\n            return {\n                chainId,\n                etherscanUrl,\n                env,\n                baseURL,\n                socketURL,\n                faitPrices,\n                gasPrice,\n                forex,\n                exchangeInfo,\n                __timer__\n            }\n        }\n    }\n}\n\nexport function* getUpdateSystem({payload}: any) {\n    try {\n        // @ts-ignore\n        const {chainId} = payload;\n        const {\n            env,\n            baseURL,\n            faitPrices,\n            gasPrice,\n            forex,\n            exchangeInfo,\n            etherscanUrl,\n            __timer__\n        } = yield call(getSystemsApi, chainId);\n\n        yield put(getSystemStatus({env, baseURL, faitPrices, gasPrice, forex, exchangeInfo, etherscanUrl, __timer__}));\n        yield call(initConfig, chainId)\n        //TODO check wallect store\n    } catch (err) {\n        yield put(getSystemStatus(err));\n    }\n}\n\nfunction* systemSaga() {\n    yield all([takeLatest(updateSystem, getUpdateSystem)]);\n}\n\nexport const systemForks = [\n    fork(systemSaga),\n]\n","import { all, call, fork, put, takeLatest } from \"redux-saga/effects\";\nimport { getWalletLayer1Status, updateWalletLayer1 } from './reducer';\nimport { CoinKey, PairKey, WalletCoin } from '@loopring-web/common-resources';\nimport { exchangeAPI } from '../apis/api';\nimport store from '../index';\nimport { fromWEI } from 'loopring-sdk';\nimport { useAccount } from '../account';\n\ntype WalletLayer1Map<R extends {[key:string]:any}> = {\n    [key in CoinKey<R>|PairKey<R>]?:WalletCoin<R>\n}\n\nconst getWalletLayer1Balance = async <R extends {[key:string]:any}>()=> {\n    //TODO: check is connect and active and assign walletLayer1\n    //TODO: if not reject directory, any error happen will clean the\n    // await sdk\n    const exchangeApi = exchangeAPI();\n    const {accAddress} = store.getState().account;\n    const {tokenMap,marketCoins} = store.getState().tokenMap;\n    if(marketCoins && tokenMap) {\n        const {ethBalance} =  await exchangeApi.getEthBalances({owner:accAddress});\n        const {tokenBalances} =  await exchangeApi.getTokenBalances({owner:accAddress,token: marketCoins.join()},tokenMap);\n        tokenBalances['ETH'] = ethBalance;\n        let walletLayer1;\n        if(tokenBalances) {\n            walletLayer1 = Reflect.ownKeys(tokenBalances).reduce((prev,item)=>{\n                return   {...prev, [ item ]:{\n                        belong: item,\n                        count: fromWEI(tokenMap, item, tokenBalances[item as string]),\n                    }\n                }\n            },{} as WalletLayer1Map<R>)\n        }\n        return {walletLayer1}\n    }\n\n};\n\nexport function* getPostsSaga() {\n    try {\n        //\n        const {walletLayer1} = yield call(getWalletLayer1Balance);\n        yield put(getWalletLayer1Status({walletLayer1}));\n    } catch (err) {\n        yield put(getWalletLayer1Status(err));\n    }\n}\n\nexport function* walletLayer1Saga() {\n    yield all([takeLatest(updateWalletLayer1, getPostsSaga)]);\n}\n\nexport const walletLayer1Fork = [\n    fork(walletLayer1Saga),\n    // fork(tokenPairsSaga),\n]\n\n","import { createSlice, PayloadAction, Slice } from '@reduxjs/toolkit'\nimport { WalletLayer2Map, WalletLayer2States } from './interface';\nimport { SagaStatus } from '@loopring-web/common-resources';\n\n\nconst initialState: WalletLayer2States = {\n    walletLayer2: undefined,\n    status: 'DONE',\n    errorMessage: null,\n}\nconst walletLayer2Slice: Slice = createSlice({\n    name: 'walletLayer2',\n    initialState,\n    reducers: {\n        updateWalletLayer2(state, action: PayloadAction<string | undefined>) {\n            state.status = SagaStatus.PENDING\n        },\n        reset(state, action: PayloadAction<string | undefined>) {\n            state.walletLayer2 = undefined;\n            state.status = SagaStatus.UNSET;\n        },\n        getWalletLayer2Status(state, action: PayloadAction<{ walletLayer2: WalletLayer2Map<object> }>) {\n            // @ts-ignore\n            if (action.error) {\n                state.status = SagaStatus.ERROR\n                // @ts-ignore\n                state.errorMessage = action.error\n            }\n            state.walletLayer2 = {...action.payload.walletLayer2};\n            state.status = SagaStatus.DONE\n        },\n        statusUnset: state => {\n            state.status = SagaStatus.UNSET\n        }\n    },\n});\nexport { walletLayer2Slice };\nexport const {updateWalletLayer2, getWalletLayer2Status, statusUnset, reset} = walletLayer2Slice.actions\n","import { all, call, fork, put, takeLatest } from \"redux-saga/effects\";\nimport { getWalletLayer2Status, updateWalletLayer2 } from './reducer';\nimport { CoinKey, PairKey, WalletCoin } from '@loopring-web/common-resources';\nimport { userAPI } from '../apis/api';\nimport store from '../index';\n\ntype WalletLayer2Map<R extends { [ key: string ]: any }> = {\n    [key in CoinKey<R> | PairKey<R>]?: WalletCoin<R>\n}\n\nconst getWalletLayer2Balance = async <R extends { [ key: string ]: any }>() => {\n    //TODO: check is connect and active and assign walletLayer1\n    //TODO: if not reject directory, any error happen will clean the\n    // await sdk\n    // const exchangeApi = exchangeAPI();\n    const userApi = userAPI();\n    const {accountId, apiKey} = store.getState().account;\n    const {tokenMap, idIndex, marketCoins} = store.getState().tokenMap;\n    let walletLayer2;\n    if (apiKey && accountId) {\n        // @ts-ignore\n        const {userBalances} = await userApi.getUserBalances({accountId: accountId, tokens: ''}, apiKey)\n        if (userBalances) {\n            // tokenId: number;\n            // total: string;\n            // locked: string;\n            // pending: {\n            //     withdraw: string;\n            //     deposit: string;\n            // };\n            walletLayer2 = Reflect.ownKeys(userBalances).reduce((prev, item) => {\n                // @ts-ignore\n                return {...prev, [ idIndex[ item ] ]: userBalances[ Number(item) ]}\n            }, {} as WalletLayer2Map<R>)\n        }\n    }\n\n    return {walletLayer2}\n};\n\nexport function* getPostsSaga() {\n    try {\n        //\n        const {walletLayer2} = yield call(getWalletLayer2Balance);\n        yield put(getWalletLayer2Status({walletLayer2}));\n    } catch (err) {\n        yield put(getWalletLayer2Status(err));\n    }\n}\n\nexport function* walletLayer2Saga() {\n    yield all([takeLatest(updateWalletLayer2, getPostsSaga)]);\n}\n\n// export function* walletLayer2Saga() {\n//     yield all([takeLatest(updateWalletLayer2, getPostsSaga)]);\n// }\n\n\nexport const walletLayer2Fork = [\n    fork(walletLayer2Saga),\n    // fork(tokenPairsSaga),\n]\n\n","import { createSlice, PayloadAction, Slice } from '@reduxjs/toolkit'\nimport { UserRewardsStates } from './interface';\nimport { SagaStatus } from '@loopring-web/common-resources';\n\nconst initialState: UserRewardsStates = {\n    userRewardsMap: undefined,\n    status: 'PENDING',\n    errorMessage: null,\n    __timer__: -1,\n}\nconst userRewardsMapSlice: Slice<UserRewardsStates> = createSlice({\n    name: 'userRewardsMap',\n    initialState,\n    reducers: {\n        getUserRewards(state, action: PayloadAction<undefined>) {\n            state.status = SagaStatus.PENDING\n        },\n        getUserRewardsStatus(state, action: PayloadAction<UserRewardsStates>) {\n            // @ts-ignore\n            if (action.error) {\n                state.status = SagaStatus.ERROR\n                // @ts-ignore\n                state.errorMessage = action.error\n            }\n            state.userRewardsMap = {...state.userRewardsMap, ...action.payload.userRewardsMap};\n            if (action.payload.__timer__) {\n                state.__timer__ = action.payload.__timer__\n            }\n            state.status = SagaStatus.DONE\n        },\n        statusUnset: state => {\n            state.status = SagaStatus.UNSET\n        }\n\n    },\n});\nexport { userRewardsMapSlice };\nexport const {getUserRewards, getUserRewardsStatus, statusUnset} = userRewardsMapSlice.actions;","import { all, call, fork, put, takeLatest } from \"redux-saga/effects\"\nimport { getUserRewards, getUserRewardsStatus } from './reducer'\n\nimport store from '../index';\nimport { exchangeAPI, LoopringAPI } from '../apis/api';\nimport { updateRealTimeAmmMap } from '../Amm/AmmMap';\nimport { updateRealTimeObj } from '../system';\n\nconst getUserRewardsApi = async <R extends {[key:string]:any}>(list:Array<keyof R>)=> {\n\n    // const data:UserRewardsMap<R> = {}\n\n    // const userRewardss = await exchangeAPI().getUserRewards({market: list.join(',')})\n    const {accountId} = store.getState().account\n    let {__timer__} = store.getState().userRewardsMap;\n    \n    if(LoopringAPI.ammpoolAPI && accountId ) {\n        __timer__ = ((__timer__) => {\n            if (__timer__ && __timer__ !== -1) {\n                clearInterval(__timer__);\n            }\n            return setTimeout(async () => {\n                store.dispatch(getUserRewards(undefined))\n            }, 300000 * 4)   //\n\n        })(__timer__);\n        return  LoopringAPI.ammpoolAPI.getAmmPoolUserRewards({owner:accountId}).then(({ammUserRewardMap}) => {\n            return {data:ammUserRewardMap,__timer__}\n        })\n    }else{\n        if (__timer__ && __timer__ !== -1) {\n            clearInterval(__timer__);\n        }\n        if(accountId) {\n            return  Promise.reject({data:undefined,__timer__:-1})\n        }else{\n            return Promise.resolve({data:undefined,__timer__:-1})\n        }\n\n    }\n\n}\n\nexport function* getPostsSaga({payload}:any) {\n    try {\n        // @ts-ignore\n        // const { userRewardsKey,userRewardsKeys } = payload;\n        // console.log('getPostsSaga userRewardsKey',userRewardsKey, userRewardsKeys)\n        // if(userRewardsKey || (userRewardsKeys && userRewardsKeys.length)) {\n        const {data,__timer__}  = yield call(getUserRewardsApi);\n        yield put(getUserRewardsStatus({userRewardsMap:data,__timer__}));\n\n        // }else{\n        //     throw new CustomError(ErrorMap.NO_SDK);\n        // }\n    } catch (err) {\n        yield put(getUserRewardsStatus(err));\n    }\n}\n\nfunction* userRewardsSaga() {\n    yield all([takeLatest(getUserRewards, getPostsSaga)]);\n}\n\nexport const userRewardsForks = [\n    fork(userRewardsSaga),\n    // fork(userRewardssSaga),\n]\n ","import { all, call, fork, put, takeLatest } from 'redux-saga/effects';\nimport { getSocketStatus, sendSocketTopic, socketEnd } from './reducer'\nimport store from '../index';\nexport function* closeSocket(){\n    try {\n        if (window.loopringSocket){\n            yield call(window.loopringSocket.socketClose)\n        }\n        yield put(getSocketStatus(undefined));\n        //TODO check wallect store\n    } catch (err) {\n        yield put(getSocketStatus(err));\n    }\n}\nexport function* sendMessage({payload}: any){\n    try {\n        const { apiKey } = store.getState().account;\n        const { socket } = payload;\n        if (window.loopringSocket){\n            yield call(window.loopringSocket.socketSendMessage, { socket, apiKey })\n        }\n        yield put(getSocketStatus(undefined));\n    } catch (err) {\n        yield put(getSocketStatus(err));\n    }\n}\n\nfunction* socketEndSaga(){\n    yield all([takeLatest(socketEnd, closeSocket)]);\n}\n\nfunction* socketSendMessageSaga() {\n    yield all([takeLatest(sendSocketTopic, sendMessage)]);\n}\n\n\n\nexport const socketForks = [\n    // fork(socketSaga),\n    fork(socketEndSaga),\n    fork(socketSendMessageSaga),\n //   fork(initConfig),\n]\n\n\n\n","import { all, fork, put, takeLatest, call } from \"redux-saga/effects\"\nimport {\n    cleanAccountStatus,\n    // cleanAccountStatus,\n    nextAccountStatus,\n    // restAccountStatus,\n    updateAccountStatus\n} from './reducer';\nimport { PayloadAction } from '@reduxjs/toolkit';\nimport { Account, AccountStatus, ConnectProviders, SagaStatus } from '@loopring-web/common-resources';\nimport { connectProvides } from '@loopring-web/web3-provider';\n\n\nexport function* accountUpdateSaga({payload}: PayloadAction<Partial<Account>>) {\n    try {\n        // let data: { accountState: Partial<AccountState> };\n        // const {currentState} = yield select();\n        const account = payload;\n        yield put(nextAccountStatus({\n            // ...currentState,\n            ...account\n        }));\n\n    } catch (err) {\n        yield put(nextAccountStatus(err));\n    }\n}\nexport function* cleanAccountSaga({payload}: PayloadAction<{shouldUpdateProvider?:boolean|undefined}>) {\n    try {\n        const {shouldUpdateProvider} = payload;\n        let account:Partial<Account> = {\n            accAddress : '',\n            readyState : AccountStatus.UN_CONNECT,\n            accountId : -1,\n            apiKey : '',\n            eddsaKey : '',\n            publicKey : {},\n            level : '',\n            nonce : -1,\n        }\n\n        if(shouldUpdateProvider) {\n            yield call(async ()=> await connectProvides.clear())\n            account = {\n                ...account,\n                connectName:ConnectProviders.unknown\n            }\n        }\n        \n        yield put(nextAccountStatus({\n            ...account\n        }));\n\n    } catch (err) {\n        yield put(nextAccountStatus(err));\n    }\n}\n\nfunction* accountSage() {\n    yield all([takeLatest(updateAccountStatus, accountUpdateSaga)]);\n}\n\n// function* goCleanAccount({payload}: PayloadAction<undefined>) {\n//     yield put(cleanAccountStatus(undefined));\n// }\n\nfunction* accountRestSage() {\n    yield all([takeLatest(cleanAccountStatus, cleanAccountSaga)]);\n}\n\nexport const accountFork = [\n    fork(accountSage),\n    fork(accountRestSage)\n]\n\n// const subject = new Subject<{ command: keyof typeof StorageCommands, data?: any }>();\n// const goNextAccountStatus = async (currentState: Partial<AccountState>,\n//                                    nextState: Partial<AccountState>): Promise<{ accountState: Partial<AccountState> }> => {\n//     // let newAccountState: Partial<AccountState>\n//     switch (nextState) {\n//         case AccountStatus.RESET:\n//             connectProvides.clear()\n//             //TODO sessionStorage clear\n//             break;\n//         case AccountStatus.UN_CONNECT:\n//             console.log('connectName:', nextState.connectName, 'readyState:', currentState.readyState)\n//             // if(nextState.readyState !== currentState.readyState )  {\n//             //     await connect({...currentState,...nextState})\n//             // }\n//             // if (success) {\n//             //     nextState\n//             // } else {\n//             //     return {accountState:currentAccountState}\n//             // }\n//             break;\n//         // case AccountStatus.CONNECT:\n//         case AccountStatus.DEPOSITING:\n//             break;\n//         case AccountStatus.NO_ACCOUNT:\n//             // if (success) {\n//             //\n//             // } else {\n//             //   return {accountState:currentAccountState}\n//             // }\n//             break;\n//         case AccountStatus.LOCKED:\n//         // if (success) {\n//         //\n//         //   return await goNextAccountStatus({...currentAccountState, readyState: AccountStatus.ACTIVATED})\n//         //\n//         // } else {\n//         //   return {accountState:currentAccountState}\n//         // }\n//\n//         case AccountStatus.ACTIVATED:\n//\n//         // goNextAccountStatus({\n//         //   ...newAccountState\n//         //   readyState: AccountStatus.LOCKED\n//         // })\n//         // return {accountState: nextState}\n//\n//     }\n//     return {accountState: nextState}\n// }\n//\n// const goAccountLocked = async (accountState: AccountState): Promise<{ accountState: Partial<AccountState> }> => {\n//     if (accountState.readyState === AccountStatus.ACTIVATED) {\n//         //TODO GOBACK TO LOCKED STATE\n//         return {\n//             accountState: {\n//                 ...accountState,\n//                 readyState: AccountStatus.LOCKED\n//             }\n//         }\n//     } else {\n//     }\n//     return {\n//         accountState: {}\n//     }\n// }\n// const goCleanAccount = async (): Promise<{ accountState: Partial<AccountState> }> => {\n//\n//     subject.next({command: StorageCommands.CLEAN})\n//     return {\n//         accountState: {\n//             accAddress: '',\n//             readyState: AccountStatus.RESET,\n//             accountId: -1,\n//             apiKey: '',\n//             eddsaKey: '',\n//             connectName: ConnectProviders.UnKnow,\n//             status: 'UNSET',\n//             errorMessage: null,\n//         }\n//     }\n// }\n//\n//\n//\n\n","import { all } from \"redux-saga/effects\"\n// import machine from \"../state_machine/fsm/machine\"\n// import { TRANSITION } from \"../state_machine/fsm/actionTypes\"\n// import { helloSaga } from \"./sagas\"\nimport { tokenSaga } from './token/saga';\nimport { ammForks } from './Amm';\nimport { tickerForks } from './ticker/saga';\nimport { systemForks } from './system/saga';\nimport { walletLayer1Fork } from './walletLayer1/saga';\nimport { walletLayer2Fork } from './walletLayer2/saga';\nimport { userRewardsForks } from './userRewards/saga';\nimport { socketForks } from './socket/saga';\nimport { accountFork } from './account/saga';\n\n\n// https://css-tricks.com/finite-state-machines-with-react/\n// https://musing-rosalind-2ce8e7.netlify.com/?machine=%7B%22initial%22%3A%22initial%22%2C%22states%22%3A%7B%22initial%22%3A%7B%22on%22%3A%7B%22LOGIN%22%3A%22loggedIn%22%2C%22LOGOUT%22%3A%22loggedOut%22%7D%7D%2C%22loggedOut%22%3A%7B%22on%22%3A%7B%22SUBMIT%22%3A%22loading%22%7D%7D%2C%22loading%22%3A%7B%22on%22%3A%7B%22SUCCESS%22%3A%22loggedIn%22%2C%22FAIL%22%3A%22loggedOut%22%7D%7D%2C%22loggedIn%22%3A%7B%22onEntry%22%3A%5B%22SET_TOKEN%22%5D%2C%22onExit%22%3A%5B%22CLEAR_TOKEN%22%5D%2C%22on%22%3A%7B%22LOGOUT%22%3A%22loggedOut%22%7D%7D%7D%7D\n\n// function* machineHandler(event: any, action: any) {\n//\n//   // @ts-ignore\n//   const currentAppState = yield select((state) => { state.account.status })\n//   const nextAppState = machine.transition(currentAppState, event)\n//\n//   yield put({\n//     type: \"APP_STATE/\" + nextAppState.value,\n//     payload: {\n//       value: nextAppState.value\n//     }\n//   });\n//\n//   console.debug(\"-> from \" + currentAppState + \" to \" + nextAppState);\n//\n//   for (let i = 0; i < nextAppState.actions.length; i++) {\n//     yield put({\n//       type: nextAppState.actions[i],\n//       payload: action\n//     });\n//   }\n// }\n\n// function* watchTransition() {\n//   yield takeEvery(TRANSITION, function*(action: any) {\n//     yield machineHandler(action.event, action.payload);\n//   });\n// }\n\nfunction* mySaga() {\n    yield all([\n        // fork(helloSaga),\n        // fork(watchTransition),\n        ...tokenSaga,\n        ...walletLayer1Fork,\n        ...walletLayer2Fork,\n        ...systemForks,\n        ...ammForks,\n        ...tickerForks,\n        ...userRewardsForks,\n        ...socketForks,\n        ...accountFork\n\n    ]);\n}\n\nexport default mySaga;\n","import { useDispatch, useSelector } from 'react-redux'\nimport { updateSystem } from './reducer';\nimport { System, SystemStatus } from './interface';\nimport React from 'react';\nimport { statusUnset } from '../Amm/AmmMap';\n\nexport function useSystem(): SystemStatus & {\n    updateSystem:(system:Partial<System< {[key:string]:any}>>)=>void,\n    statusUnset:()=>void,\n} {\n    const system:SystemStatus = useSelector((state: any) => state.system)\n    const dispatch = useDispatch();\n    return {\n        ...system,\n        statusUnset:React.useCallback(()=>dispatch(statusUnset(undefined)),[dispatch]),\n        updateSystem:React.useCallback((system:Partial<System<{[key:string]:any}>>)=>dispatch(updateSystem(system)),[dispatch]),\n    }\n\n}\n","let _myLog;\nif (process.env.NODE_ENV !== 'production') {\n    _myLog = console.log;\n}else{\n    _myLog = function(message?: any, ...optionalParams: any[]){};\n}\nlet _myError;\nif (process.env.NODE_ENV !== 'production') {\n    _myError =  console.error;\n}else{\n    _myError = function(message?: any, ...optionalParams: any[]){};\n}\nexport const myLog = _myLog;\nexport const myError = _myError;","import { useDispatch, useSelector } from 'react-redux'\nimport { reset, statusUnset, updateWalletLayer2 } from './reducer';\nimport { WalletLayer2States } from './interface';\nimport { myLog } from 'utils/log_tools';\nimport _ from 'lodash'\nimport React from 'react';\nimport { TOAST_TIME, UPDATE_ACC_DELAY } from 'defs/common_defs';\n\nexport function useWalletLayer2(): WalletLayer2States & {\n    delayAndUpdateWalletLayer2: () => Promise<void>,\n    updateWalletLayer2: () => void,\n    statusUnset: () => void,\n    resetLayer2: () => void,\n} {\n    const walletLayer2: WalletLayer2States = useSelector((state: any) => state.walletLayer2)\n    const dispatch = useDispatch();\n\n    return {\n        ...walletLayer2,\n        resetLayer2: React.useCallback(() => {\n            dispatch(reset(undefined))\n        }, [dispatch]),\n        statusUnset: React.useCallback(() => dispatch(statusUnset(undefined)), [dispatch]),\n        updateWalletLayer2: React.useCallback(() => dispatch(updateWalletLayer2(undefined)), [dispatch]),\n        delayAndUpdateWalletLayer2: React.useCallback(async () => {\n            myLog('try to delayAndUpdateWalletLayer2!' + new Date().getTime())\n            _.delay(() => {\n                dispatch(updateWalletLayer2(undefined))\n                myLog('try to delayAndUpdateWalletLayer2 updated!' + new Date().getTime())\n                return Promise.resolve()\n            }, UPDATE_ACC_DELAY);\n        }, [dispatch]),\n    }\n\n}\n","import { useDispatch, useSelector } from 'react-redux'\nimport { getUserRewards, statusUnset } from './reducer';\nimport { UserRewardsStates } from './interface';\nimport React from 'react';\n\nexport function useUserRewards(): UserRewardsStates & {\n    getUserRewards:()=>void,\n    statusUnset:()=>void,\n} {\n    const userRewardsMap:UserRewardsStates = useSelector((state: any) => state.userRewardsMap)\n    const dispatch = useDispatch();\n    return {\n        ...userRewardsMap,\n        statusUnset:React.useCallback(()=>dispatch(statusUnset(undefined)),[dispatch]),\n        getUserRewards: React.useCallback(()=>dispatch(getUserRewards(undefined)),[dispatch]),\n    }\n\n}\n","import { createSlice, PayloadAction, Slice } from '@reduxjs/toolkit'\nimport { SliceCaseReducers } from '@reduxjs/toolkit/src/createSlice'\n\nexport interface Confirmation {\n    confirmed: boolean\n}\n\nconst initialState: Confirmation = {\n    confirmed: false,\n}\n\nconst confirmationSlice: Slice<Confirmation> = createSlice<Confirmation, SliceCaseReducers<Confirmation>, 'confirmation'>({\n    name: 'confirmation',\n    initialState,\n    reducers: {\n        confirm(state: Confirmation, action: PayloadAction<string>) {\n            state.confirmed = true\n        },\n    },\n});\n\nexport { confirmationSlice }\nexport const { confirm } = confirmationSlice.actions\n","import { createSlice, PayloadAction, Slice } from '@reduxjs/toolkit'\nimport { FavoriteMarketStates } from './interface';\nimport { SliceCaseReducers } from '@reduxjs/toolkit/src/createSlice';\n\nconst favoriteMarketSlice: Slice<FavoriteMarketStates> = createSlice<FavoriteMarketStates,SliceCaseReducers<FavoriteMarketStates>,'favoriteMarket'>({\n    name: 'favoriteMarket',\n    initialState: [],\n    reducers: {\n        clearAll(state:FavoriteMarketStates, action: PayloadAction<undefined>) {\n            state.length = 0;\n        },\n        removeMarket(state:FavoriteMarketStates, action: PayloadAction<string>) {\n            const pair = action.payload\n            if (pair && state.includes(pair)) {\n                const index = state.findIndex(_pair => _pair === pair)\n                state.splice(index, 1)\n            }\n        },\n        addMarket(state:FavoriteMarketStates, action: PayloadAction<string>) {\n            const pair = action.payload\n            if (pair && state.findIndex((_pair: string) => _pair === pair) === -1) {\n                state.push(pair)\n            }\n        },\n        addMarkets(state:FavoriteMarketStates, action: PayloadAction<string[]>) {\n            const pairs = action.payload\n            if (pairs.length) {\n                pairs.forEach(pair => {\n                    if (pair && state.findIndex((_pair: string) => _pair === pair) === -1) {\n                        state.push(pair)\n                    }\n                })\n            }\n        },\n\n    },\n});\nexport { favoriteMarketSlice };\nexport const {clearAll, removeMarket, addMarket, addMarkets} = favoriteMarketSlice.actions\n","import { createSlice, PayloadAction, Slice } from '@reduxjs/toolkit'\nimport { SliceCaseReducers } from '@reduxjs/toolkit/src/createSlice'\n\nexport interface OnchainHashInfo {\n    depositHash: string | undefined\n    withdrawHash: string[]\n}\n\nconst initialState: OnchainHashInfo = {\n    depositHash: undefined,\n    withdrawHash: [],\n}\n\nconst onchainHashInfoSlice: Slice<OnchainHashInfo> = createSlice<OnchainHashInfo, SliceCaseReducers<OnchainHashInfo>, 'onchainHashInfo'>({\n    name: 'onchainHashInfo',\n    initialState,\n    reducers: {\n        clearAll(state: OnchainHashInfo, action: PayloadAction<undefined>) {\n            state = initialState\n        },\n        clearDepositHash(state: OnchainHashInfo, action: PayloadAction<string>) {\n            state.depositHash = undefined\n        },\n        updateDepositHash(state: OnchainHashInfo, action: PayloadAction<string>) {\n            state.depositHash = action.payload\n        }\n    },\n});\n\nexport { onchainHashInfoSlice }\nexport const {clearAll, clearDepositHash, updateDepositHash} = onchainHashInfoSlice.actions\n","import { combineReducers } from '@reduxjs/toolkit';\nimport { confirmationSlice } from './confirmation';\nimport { favoriteMarketSlice } from './favoriteMarket';\nimport { onchainHashInfoSlice } from './onchainHashInfo';\n\nexport const  localStoreReducer = combineReducers({\n    // ammRecord: ammRecordSlice.reducer,\n    // ammTrades: ammTradesSlice.reducer,\n    favoriteMarket: favoriteMarketSlice.reducer,\n    onchainHashInfo: onchainHashInfoSlice.reducer,\n    confirmation: confirmationSlice.reducer,\n})\n","import { combineReducers, configureStore, getDefaultMiddleware } from '@reduxjs/toolkit'\n\nimport { useDispatch } from 'react-redux'\nimport { load, save } from 'redux-localstorage-simple'\n\nimport createSagaMiddleware from 'redux-saga'\nimport * as imgConfig from '@loopring-web/common-resources/assets/images/coin/loopring.json'\nimport { reduxBatch } from '@manaflair/redux-batch'\nimport { updateVersion } from './global/actions'\nimport accountSlice from './account/reducer'\nimport { modalsSlice, setCoinJson, setLanguage, settingsSlice } from '@loopring-web/component-lib';\nimport { ammReducer } from './Amm';\nimport { tokenMapSlice } from './token';\nimport mySaga from './rootSaga';\nimport { tickerMapSlice } from './ticker';\nimport { systemSlice } from './system';\nimport { walletLayer1Slice } from './walletLayer1';\nimport { walletLayer2Slice } from './walletLayer2';\nimport { socketSlice } from './socket';\nimport { userRewardsMapSlice } from './userRewards';\nimport { localStoreReducer } from './localStore';\n\nconst sagaMiddleware = createSagaMiddleware()\n\nconst reducer = combineReducers({\n    account: accountSlice.reducer,\n    socket: socketSlice.reducer,\n    settings: settingsSlice.reducer,\n    system: systemSlice.reducer,\n    modals: modalsSlice.reducer,\n    userRewardsMap: userRewardsMapSlice.reducer,\n    amm: ammReducer,\n    tokenMap: tokenMapSlice.reducer,\n    walletLayer2: walletLayer2Slice.reducer,\n    walletLayer1: walletLayer1Slice.reducer,\n    tickerMap: tickerMapSlice.reducer,\n    localStore: localStoreReducer,\n})\n// const DEFAULT_TIMEOUT = 1000*60*60;\n//\n// const persistConfig = {\n//     key: 'account',\n//     storage: storageSession,\n//     timeout:DEFAULT_TIMEOUT,\n//     whitelist: ['account'] // only navigation will be persisted\n// };\nconst PERSISTED_KEYS: string[] = ['settings', 'localStore', 'account']\n\n// const persistedReducer = persistReducer(persistConfig, reducer)\n\nconst store = configureStore({\n    reducer,\n    // middleware: (getDefaultMiddleware) => getDefaultMiddleware().concat(logger),\n    middleware: [...getDefaultMiddleware({\n        thunk: false,\n        serializableCheck: false,\n    }), save({states: PERSISTED_KEYS}), sagaMiddleware],\n    // middleware: [...getDefaultMiddleware({ thunk: true }), ],\n    devTools: process.env.NODE_ENV !== 'production',\n    enhancers: [reduxBatch],\n    preloadedState: load({states: PERSISTED_KEYS}) as any\n})\nstore.dispatch(updateVersion())\nstore.dispatch(setLanguage(store.getState().settings.language))\nstore.dispatch(setCoinJson(imgConfig.frames))\n// @ts-ignore\nsagaMiddleware.run(mySaga, store.dispatch);\n\n// The store has been created with these options:\n// - The slice reducers were automatically passed to combineReducers()\n// - redux-thunk and redux-logger were added as middleware\n// - The Redux DevTools Extension is disabled for production\n// - The middleware, batch, and devtools enhancers were composed together\n\nexport type AppDispatch = typeof store.dispatch\nexport const useAppDispatch = () => useDispatch<AppDispatch>()\n\nexport type RootState = ReturnType<typeof reducer>\n// export const persistor = persistStore(store)\n\nexport default store\n","import store from '../../stores';\nimport { toBig } from 'loopring-sdk';\nimport { BIG10 } from '../../defs/swap_defs';\nimport BigNumber from 'bignumber.js';\n\nexport const volumeToCount = (symbol:string,volumn:string|number|BigNumber,tokenMap= store.getState().tokenMap.tokenMap):number|undefined =>{\n   const result =  volumeToCountAsBigNumber(symbol,volumn,tokenMap);\n   return result? result.toNumber():undefined;\n}\nexport const volumeToCountAsBigNumber = (symbol:string,volumn:string|number|BigNumber,tokenMap= store.getState().tokenMap.tokenMap):BigNumber|undefined =>{\n    if(tokenMap && tokenMap[symbol] && typeof volumn !== 'undefined'){\n        try{\n            return toBig(volumn).div('1e' + tokenMap[symbol].decimals)\n        }catch (error){\n            throw error;\n        }\n    }else{\n        return undefined;\n    }\n}","import { AmmDetailBase } from '@loopring-web/common-resources';\nimport { volumeToCountAsBigNumber } from './volumeToCount';\n\nexport const ammPairInit = ({\n                                   pair,\n                                   _ammCalcData,\n                                   ammType,\n                                   tokenMap,\n                                   coinMap,\n                                   walletMap,\n                                   ammMap,\n                                   tickerData,\n                                   ammPoolsBalance\n                               }: any) => {\n    _ammCalcData.coinInfoMap = coinMap;\n    if (tickerData) {\n        _ammCalcData.AtoB = Number(tickerData.close)\n    }\n    if (isNaN(_ammCalcData.AtoB) && ammPoolsBalance) {\n        const baseVol = volumeToCountAsBigNumber(pair.coinAInfo.simpleName, ammPoolsBalance.pooled[ 0 ].volume);\n        const quoteVol = volumeToCountAsBigNumber(pair.coinBInfo.simpleName, ammPoolsBalance.pooled[ 1 ].volume);\n        _ammCalcData.AtoB = quoteVol && baseVol && parseFloat(quoteVol.div(baseVol).toFixed(7, 0) as string)\n    }\n    if (pair.coinAInfo) {\n        // if(ammType === AmmPanelType.Deposit ) {\n        _ammCalcData.myCoinA = {\n            belong: pair.coinAInfo.simpleName,\n            balance: walletMap ? walletMap[ pair.coinAInfo.simpleName ]?.count : 0,\n        }\n        _ammCalcData.myCoinB = {\n            belong: pair.coinBInfo.simpleName,\n            balance: walletMap ? walletMap[ pair.coinBInfo.simpleName ]?.count : 0,\n        }\n        // }else {\n        const key = `${pair.coinAInfo.simpleName}-${pair.coinBInfo.simpleName}`;\n        let coinACount = 0, coinBCount = 0;\n        if (walletMap) {\n            const balance = walletMap ? walletMap[ 'LP-' + key ]?.count : 0;\n            const {totalLPToken, totalA, totalB}: AmmDetailBase<any> = ammMap[ 'AMM-' + key ];\n            if (totalA && totalLPToken && totalB) {\n                coinACount = totalA / totalLPToken * balance;\n                coinBCount = totalB / totalLPToken * balance;\n            }\n            _ammCalcData.lpCoin = balance;\n        }\n        _ammCalcData.lpCoinA = {\n            belong: pair.coinAInfo.simpleName,\n            balance: coinACount,\n        }\n        _ammCalcData.lpCoinB = {\n            belong: pair.coinBInfo.simpleName,\n            balance: coinBCount,\n        }\n        // }\n    }\n\n\n    return _ammCalcData\n}\n\n\n","export function coinPairInit({coinKey, _tradeCalcData, tokenMap, coinMap}: any) {\n    if (coinKey) {\n        const [_match, sell, buy] = coinKey.match(/(\\w+)-(\\w+)/i);\n        // @ts-ignore\n        if (sell && coinMap && coinMap[ sell ]) {\n            _tradeCalcData.coinSell = sell;\n        }// @ts-ignore\n        if (sell!==buy && buy && -1 !== tokenMap[ sell ].tradePairs.findIndex(ele => ele === buy)) {\n            _tradeCalcData.coinBuy = buy;\n            return _tradeCalcData\n        }\n        // else{\n        //     _tradeCalcData.coinBuy = tokenMap[ sell ].tradePairs[ 0 ];\n        // }\n    }\n    if (!_tradeCalcData.coinSell || _tradeCalcData.coinSell === '') {\n        _tradeCalcData.coinSell = 'LRC';\n        _tradeCalcData.coinBuy = 'ETH';\n        return _tradeCalcData\n    }\n    if (!_tradeCalcData.coinBuy || _tradeCalcData.coinBuy === '' || _tradeCalcData.coinBuy === 'undefined') {\n        // @ts-ignore\n        if (tokenMap && tokenMap[ _tradeCalcData.coinSell ].tradePairs) {\n            _tradeCalcData.coinBuy = tokenMap[ _tradeCalcData.coinSell ].tradePairs[ 0 ]\n        } else {\n            _tradeCalcData.coinSell = 'LRC';\n            _tradeCalcData.coinBuy = 'ETH';\n        }\n    }\n    return _tradeCalcData\n}","import store from '../stores';\nimport { AccountStep, setShowAccount, setShowConnect, Toast, WalletConnectStep } from '@loopring-web/component-lib';\nimport { fnType } from '@loopring-web/common-resources';\nimport { Provider } from 'react-redux';\nimport { changeShowModel } from '../stores/account';\n\n\nexport const accountStaticCallBack = (onclickMap: { [ key: number ]: [fn: (props: any) => any, args?: any[]] }, deps?: any[]) => {\n    const {readyState} = store.getState().account;\n    // fnType[readyState]\n    let fn, args;\n    [fn, args] = onclickMap[ readyState ] ? onclickMap[ readyState ] : [];\n    if (typeof fn === 'function') {\n        args = [...(args ?? []), ...(deps ?? [])] as [props: any]\n        return fn.apply(this, args);\n    }\n\n}\n\n\nexport const bntLabel: typeof btnClickMap = {\n\n    [ fnType.UN_CONNECT ]: [\n        function () {\n            return `labelConnectWallet`\n        }\n    ],\n    [ fnType.ERROR_NETWORK ]: [\n        function () {\n            return `labelWrongNetwork`\n        }\n    ],\n    // [ fnType.CONNECT]: [\n    //     function () {\n    //         return `labelConnectWallet`\n    //     }\n    // ],\n    [ fnType.DEFAULT ]: [\n        function () {\n            return `depositTitleAndActive`\n        }\n    ], [ fnType.ACTIVATED ]: [\n        function () {\n            return undefined\n        }\n    ]\n    , [ fnType.LOCKED ]: [\n        function () {\n            return `labelUnLockLayer2`\n        }\n    ]\n};\n\n\nexport const btnClickMap: { [ key: string ]: [fn: (props: any) => any, args?: any[]] } = {\n    [ fnType.ERROR_NETWORK ]: [\n        function () {\n            //TODO toast\n            return\n        }\n    ],\n    [ fnType.UN_CONNECT ]: [\n        function () {\n            // setShowConnect({isShow: true})\n            store.dispatch(changeShowModel({_userOnModel: true}));\n            store.dispatch(setShowConnect({isShow: true, step:WalletConnectStep.Provider}))\n        }\n    ]\n    , [ fnType.NO_ACCOUNT ]: [\n        function () {\n            store.dispatch(changeShowModel({_userOnModel: true}));\n            store.dispatch(setShowAccount({isShow: true, step: AccountStep.NoAccount}))\n            // ShowDeposit(true)\n        }\n    ]\n    , [ fnType.DEPOSITING ]: [\n        function () {\n            store.dispatch(setShowAccount({isShow: true, step: AccountStep.Depositing}))\n            // ShowDeposit(true)\n        }\n    ]\n    , [ fnType.LOCKED ]: [\n        function () {\n            store.dispatch(changeShowModel({_userOnModel: true}));\n            store.dispatch(setShowAccount({isShow: true, step: AccountStep.HadAccount}))\n        }\n    ]\n};\n\n\n","import store from '../../stores';\nimport { setSlippage } from '@loopring-web/component-lib';\n\ntype Cache = {\n    customSlippage?:number\n}\nexport  const makeCache  = (__cache__:Cache)=>{\n   if(typeof  __cache__.customSlippage !== undefined){\n       store.dispatch(setSlippage(__cache__.customSlippage as number))\n      // store.getState().settings\n   }\n}","import store from 'stores'\n\nimport * as sdk from 'loopring-sdk'\n\nconst getTokenInfo = (symbol: string) => {\n    const tokenMap = store.getState().tokenMap.tokenMap\n\n    if (!tokenMap || !tokenMap[symbol]) {\n        return undefined\n    }\n\n    return tokenMap[symbol]\n}\n\nconst getMarketInfo = (symbol: string) => {\n    const marketMap = store.getState().tokenMap.marketMap\n\n    if (!marketMap || !marketMap[symbol]) {\n        return undefined\n    }\n\n    return marketMap[symbol]\n}\n\nexport function StringToNumberWithPrecision(rawVal: string, symbol: string) {\n    \n    if (rawVal === undefined || rawVal === null || rawVal.trim() === '')\n        return 0\n\n    const tokenInfo = getTokenInfo(symbol)\n\n    if (!tokenInfo) {\n        return undefined\n    }\n\n    return parseFloat(sdk.toBig(rawVal).toFixed(tokenInfo.precision, 0))\n}\n\n/*\n* format volume to real number\n*/\nexport function VolToNumberWithPrecision(rawVal: string, symbol: string) {\n\n    const tokenInfo = getTokenInfo(symbol)\n\n    if (!tokenInfo) {\n        return undefined\n    }\n\n    if (rawVal === undefined || rawVal === null || rawVal.trim() === '')\n        return 0\n\n    return sdk.toBig(rawVal).div('1e' + tokenInfo.decimals).toFixed(tokenInfo.precision, 0)\n}\n\n/*\n* format raw val with precision\n*/\nexport function FormatValWithPrecision(rawVal: string, symbol: string) {\n\n    const tokenInfo = getTokenInfo(symbol)\n\n    if (!tokenInfo) {\n        return undefined\n    }\n\n    if (rawVal === undefined || rawVal === null || rawVal.trim() === '')\n        return 0\n\n    return sdk.toBig(rawVal).toFixed(tokenInfo.precision, 0)\n}\n\n/*\n* format order price with precision\n*/\nexport function formatPriceWithPrecision(rawVal: string, \n    symbol: string) {\n    const marketInfo = getMarketInfo(symbol)\n    if (!rawVal || !marketInfo || !symbol) {\n        return '0'\n    }\n\n    return sdk.toBig(rawVal).toFixed(marketInfo.precisionForPrice)\n\n}","import {\n    AmmPoolActivityRule,\n    AmmPoolActivityStatus,\n    AmmPoolSnapshot,\n    LoopringMap,\n    TickerData,\n    toBig,\n} from 'loopring-sdk';\nimport { AmmActivity, AmmCardProps, MyAmmLP } from '@loopring-web/common-resources';\nimport store from '../../stores';\nimport { deepClone } from '../../utils/obj_tools';\nimport { AmmUserReward, AmmUserRewardMap } from 'loopring-sdk/dist/defs/loopring_defs';\nimport BigNumber from 'bignumber.js';\nimport { volumeToCount, volumeToCountAsBigNumber } from './volumeToCount';\nimport { coinMap } from '@loopring-web/component-lib';\nimport { AmmDetailStore } from '../../stores/Amm/AmmMap';\nimport { WalletMapExtend } from './makeWallet';\nimport { VolToNumberWithPrecision } from '../../utils/formatter_tool';\n\nexport type AmmActivityViewMap<R, I> = {\n    [key in keyof R]?: AmmActivity<I>[] | undefined\n}\nexport const makeUIAmmActivityMap = <R extends { [ key: string ]: any }, I extends { [ key: string ]: any }>\n({ammActivityMap, type, ammPoolActivityStatus}: {\n    ammActivityMap: LoopringMap<LoopringMap<AmmPoolActivityRule[ ]>> | undefined,\n    type: 'AMM_MINING' | 'SWAP_VOLUME_RANKING',\n    ammPoolActivityStatus: AmmPoolActivityStatus[]\n}, myReward: AmmUserRewardMap | undefined):\n    Array<AmmCardProps<I>> => {\n    const {coinMap, tokenMap, idIndex} = store.getState().tokenMap\n    let ammActivityViewMap: AmmActivityViewMap<R, I> = {}\n    if (ammActivityMap && ammActivityMap[ type ]) {\n\n\n        // @ts-ignore\n        ammPoolActivityStatus.forEach((status: AmmPoolActivityStatus) => {\n\n            if (ammActivityMap[ type ][ status ]) {\n                // @ts-ignore\n                ammActivityMap[ type ][ status ].reduce((prev: AmmActivityViewMap<R, I>, ammPoolActivityRule: AmmPoolActivityRule) => {\n\n                    if (coinMap && ammPoolActivityRule.awardRules[ 0 ] && idIndex && tokenMap) {\n\n                        const symbol = idIndex[ ammPoolActivityRule.awardRules[ 0 ].tokenId as any ]\n                        const totalRewards = VolToNumberWithPrecision(ammPoolActivityRule.awardRules[ 0 ].volume ,symbol)\n                        // @ts-ignore\n                        const item = {\n                            // @ts-ignore\n                            rewardToken: coinMap[ symbol ],\n                            totalRewards: Number(totalRewards),\n                            myRewards: status === AmmPoolActivityStatus.InProgress && myReward && myReward[ ammPoolActivityRule.market ] ?\n                                volumeToCount(symbol, myReward[ ammPoolActivityRule.market ]?.currentRewards[ 0 ].volume) : 0,\n                            duration: {\n                                from: new Date(ammPoolActivityRule?.rangeFrom),\n                                to: new Date(ammPoolActivityRule?.rangeTo),\n                            },\n                            isPass: AmmPoolActivityStatus.EndOfGame === status,\n                        }\n                        if (prev[ ammPoolActivityRule.market ]) {\n                            // @ts-ignore\n                            prev[ ammPoolActivityRule.market ].push(item);\n                        } else {\n                            // @ts-ignore\n                            prev[ ammPoolActivityRule.market ] = [item];\n                        }\n\n\n                        // return prev;\n                    }\n                    return prev;\n                }, ammActivityViewMap)\n\n            }\n        })\n    }\n    const resultArray = makeAsCard(ammActivityViewMap)\n    // console.log(resultArray)\n    return resultArray;\n\n\n}\nconst makeAsCard = <R extends { [ key: string ]: any }, I extends { [ key: string ]: any }>\n(ammActivityViewMap: AmmActivityViewMap<R, I> | undefined, myReward?: any): Array<AmmCardProps<I>> => {\n    const {coinMap} = store.getState().tokenMap\n    const {ammMap} = store.getState().amm.ammMap\n    try {\n        if (ammActivityViewMap && coinMap) {\n            // @ts-ignore\n            return Reflect.ownKeys(ammActivityViewMap).reduce((prev: Array<AmmCardProps<I>>, key: string) => {\n                const _ammInfo = ammMap[ key as string ]\n                if (_ammInfo && _ammInfo.coinA && coinMap && ammActivityViewMap[ key ]) {\n\n                    // @ts-ignore\n                    const itemArray = ammActivityViewMap[ key ].map((item) => {\n                        return {\n                            ...deepClone(_ammInfo),\n                            // @ts-ignore\n                            coinAInfo: coinMap[ _ammInfo.coinA ],\n                            // @ts-ignore\n                            coinBInfo: coinMap[ _ammInfo.coinB ],\n                            activity: item,\n                        }\n                    })\n                    prev = [...prev, ...itemArray]\n                }\n                return prev;\n            }, [] as Array<AmmCardProps<I>>) as Array<AmmCardProps<I>>\n        } else {\n            return [] as Array<AmmCardProps<I>>\n        }\n    } catch (error) {\n        console.log(error)\n        return []\n    }\n}\ntype Value = undefined | number;\nexport type SummaryMyAmm = {\n    rewardDollar: Value,\n    rewardYuan: Value,\n    feeDollar: Value,\n    feeYuan: Value,\n}\nexport const makeSummaryMyAmm = <C extends { [ key: string ]: any }>({\n                                                                         userRewardsMap\n                                                                     }: {\n    userRewardsMap: LoopringMap<AmmUserReward> | undefined\n}):\n    SummaryMyAmm | undefined => {\n    const {coinMap, idIndex, tokenMap} = store.getState().tokenMap;\n    const {faitPrices, forex} = store.getState().system;\n    if (userRewardsMap && idIndex && coinMap && tokenMap && faitPrices && forex) {\n        let summaryMyAmm = Object.keys(userRewardsMap).reduce((prev, key) => {\n            if (/AMM-/i.test(key)) {\n                // @ts-ignore\n                const [, coinA, coinB] = key.match(/AMM-(\\w+)-(\\w+)/i);\n                const ammUserReward = userRewardsMap[ key ]\n                const {\n                    rewardDollar,\n                    rewardYuan,\n                    feeDollar,\n                    feeYuan\n                } = getOneRewardInfo({coinB, coinA, ammUserReward, idIndex, faitPrices, forex})\n                prev.rewardDollar = rewardDollar ? toBig(rewardDollar).plus(prev.rewardDollar).toNumber() : 0;\n                prev.rewardYuan = rewardYuan ? toBig(rewardYuan).plus(prev.rewardYuan).toNumber() : 0;\n                prev.feeDollar = feeDollar ? toBig(feeDollar).plus(prev.feeDollar).toNumber() : 0;\n                prev.feeYuan = feeYuan ? toBig(feeYuan).plus(prev.feeYuan).toNumber() : 0;\n            }\n            return prev\n        }, {\n            rewardDollar: 0,\n            rewardYuan: 0,\n            feeDollar: 0,\n            feeYuan: 0\n        })\n\n        return summaryMyAmm\n    }\n    return undefined\n}\nconst getOneRewardInfo = <C>({\n                                 coinA,\n                                 coinB,\n                                 ammUserReward,\n                                 idIndex,\n                                 faitPrices,\n                                 forex,\n                                 walletMap,\n                                 snapShotData\n                             }: any) => {\n    let rewardToken, rewardToken2, feeA, feeB, feeDollar, feeYuan, reward, reward2, rewardDollar, rewardYuan;\n    if (ammUserReward) {\n        rewardToken = ammUserReward.currentRewards[ 0 ] ? idIndex[ ammUserReward.currentRewards[ 0 ].tokenId as number ] : undefined\n        rewardToken2 = ammUserReward.currentRewards[ 1 ] ? idIndex[ ammUserReward.currentRewards[ 1 ].tokenId as number ] : undefined\n        feeA = ammUserReward ? volumeToCountAsBigNumber(coinA, ammUserReward.feeRewards[ 0 ]) : toBig(0);\n        feeB = ammUserReward ? volumeToCountAsBigNumber(coinB, ammUserReward.feeRewards[ 1 ]) : toBig(0);\n        feeA = feeA ? feeA : toBig(0);\n        feeB = feeB ? feeB : toBig(0);\n        feeDollar = feeA.times(faitPrices[ coinA ]?faitPrices[ coinA ].price:0).plus(feeB.times(faitPrices[ coinB ]?faitPrices[ coinB ].price:0))\n        feeYuan = feeDollar.times(forex);\n        reward = rewardToken ? volumeToCountAsBigNumber(rewardToken, ammUserReward.currentRewards[ 0 ].volume) as BigNumber : toBig(0);\n        reward2 = rewardToken2 ? volumeToCountAsBigNumber(rewardToken2, ammUserReward.currentRewards[ 1 ].volume) as BigNumber : toBig(0);\n        reward = reward ? reward : toBig(0);\n        reward2 = reward2 ? reward2 : toBig(0);\n        rewardDollar = reward.times(rewardToken ? faitPrices[ rewardToken ].price : 1).plus(reward2.times(rewardToken2 ? faitPrices[ rewardToken2 ].price : 1));\n        rewardYuan = rewardDollar.times(forex);\n    }\n    let balanceA, balanceB, balanceDollar, balanceYuan;\n    if (walletMap && walletMap[ 'LP-' + coinA + '-' + coinB ] && snapShotData) {\n        // @ts-ignore\n        const ratio = new BigNumber(walletMap[ 'LP-' + coinA + '-' + coinB ].count).div(snapShotData.ammPoolsBalance.lp.volume);\n        balanceA = ratio.times(volumeToCountAsBigNumber(coinA, snapShotData.ammPoolsBalance.pooled[ 0 ].volume) || 1);\n        balanceB = ratio.times(volumeToCountAsBigNumber(coinB, snapShotData.ammPoolsBalance.pooled[ 1 ].volume) || 1);\n        // @ts-ignore\n        balanceDollar = balanceA.times(faitPrices[ coinA ].price).plus(balanceB.times(faitPrices[ coinB ].price))\n        balanceYuan = balanceDollar.times(forex)\n    }\n\n    return {\n        feeA: feeA ? feeA.toNumber() : undefined,\n        feeB: feeB ? feeB.toNumber() : undefined,\n        reward: reward ? reward.toNumber() : undefined,\n        rewardToken: rewardToken ? coinMap[ rewardToken ] : undefined,\n        reward2: reward2 ? reward2.toNumber() : undefined,\n        rewardToken2: rewardToken2 ? coinMap[ rewardToken2 ] : undefined,\n        rewardDollar: rewardDollar ? rewardDollar.toNumber() : undefined,\n        rewardYuan: rewardYuan ? rewardYuan.toNumber() : undefined,\n        feeDollar: feeDollar ? feeDollar.toNumber() : undefined,\n        feeYuan: feeYuan ? feeYuan.toNumber() : undefined,\n        ammDetail: {\n            coinAInfo: coinMap[ coinA ],\n            coinBInfo: coinMap[ coinB ]\n        },\n        balanceA: balanceA ? balanceA.toNumber() : undefined,\n        balanceB: balanceB ? balanceB.toNumber() : undefined,\n        balanceDollar: balanceDollar ? balanceDollar.toNumber() : undefined,\n        balanceYuan: balanceYuan ? balanceYuan.toNumber() : undefined,\n    } as MyAmmLP<C>\n}\n\nexport const makeMyAmmWithSnapshot = <C extends { [ key: string ]: any }>(market: any, _walletMap: WalletMapExtend<C> | undefined, ammUserRewardMap: LoopringMap<AmmUserReward> | undefined, snapShotData?: {\n    tickerData?: TickerData | undefined\n    ammPoolsBalance: AmmPoolSnapshot | undefined\n} | undefined) => {\n    const {coinMap, idIndex, tokenMap} = store.getState().tokenMap;\n    const {faitPrices, forex} = store.getState().system;\n    const [, coinA, coinB] = market.match(/(\\w+)-(\\w+)/i);\n    let _myAmm: Partial<MyAmmLP<C>> = {};\n    if (ammUserRewardMap && ammUserRewardMap[ 'AMM-' + market ]\n        && snapShotData && snapShotData.ammPoolsBalance) {\n        const ammUserReward: AmmUserReward = ammUserRewardMap[ 'AMM-' + market ];\n        // @ts-ignore\n        if (coinMap && tokenMap && idIndex && forex && faitPrices) {\n            _myAmm = getOneRewardInfo({\n                coinA, coinB, ammUserReward,\n                idIndex, faitPrices, forex, walletMap: _walletMap, snapShotData\n            })\n\n            return _myAmm as MyAmmLP<C>\n        }\n    }\n    return {\n        feeA: undefined,\n        feeB: undefined,\n        feeDollar: undefined,\n        feeYuan: undefined,\n        reward: undefined,\n        rewardToken: undefined as any,\n        balanceA: undefined,\n        balanceB: undefined,\n        balanceYuan: undefined,\n        balanceDollar: undefined,\n    }\n}\n\nexport const makeMyAmmWithStat = <C extends { [ key: string ]: any }>\n(market: any,\n _walletMap: WalletMapExtend<C> | undefined,\n ammUserRewardMap: LoopringMap<AmmUserReward> | undefined,\n ammDetail: AmmDetailStore<C>) => {\n    const {coinMap, idIndex, tokenMap} = store.getState().tokenMap;\n    const {faitPrices, forex} = store.getState().system;\n    const [, coinA, coinB] = market.match(/(\\w+)-(\\w+)/i);\n    let _myAmm = {};\n    let balanceA, balanceB, balanceDollar, balanceYuan;\n    if (_walletMap && _walletMap[ 'LP-' + coinA + '-' + coinB ] && forex) {\n        // @ts-ignore\n        const ratio = new BigNumber(_walletMap[ 'LP-' + coinA + '-' + coinB ].count).div(ammDetail.totalLPToken);\n        balanceA = ratio.times(volumeToCountAsBigNumber(coinA, ammDetail.totalA ? ammDetail.totalA : 0) || 1);\n        balanceB = ratio.times(volumeToCountAsBigNumber(coinB, ammDetail.totalB ? ammDetail.totalB : 0) || 1);\n        // @ts-ignore\n        balanceDollar = balanceA.times(faitPrices[ coinA ]?faitPrices[ coinA ].price:0).plus(balanceB.times(faitPrices[ coinB ]?faitPrices[ coinB ].price:0))\n        balanceYuan = balanceDollar.times(forex);\n        _myAmm = {\n            // ...ammDetail,\n            balanceA: balanceA.toNumber(),\n            balanceB: balanceB.toNumber(),\n            balanceYuan: balanceYuan.toNumber(),\n            balanceDollar: balanceDollar.toNumber(),\n        }\n    }\n    if (ammUserRewardMap && ammUserRewardMap[ 'AMM-' + market ]\n        && ammDetail && forex) {\n        const ammUserReward: AmmUserReward = ammUserRewardMap[ 'AMM-' + market ];\n        let rewardToken, rewardToken2, feeA, feeB, feeDollar, feeYuan, reward, reward2, rewardDollar, rewardYuan;\n\n        if (coinMap && tokenMap && idIndex && forex && faitPrices && ammUserReward) {\n            rewardToken = ammUserReward.currentRewards[ 0 ] ? idIndex[ ammUserReward.currentRewards[ 0 ].tokenId as number ] : undefined\n            rewardToken2 = ammUserReward.currentRewards[ 1 ] ? idIndex[ ammUserReward.currentRewards[ 1 ].tokenId as number ] : undefined\n            feeA = ammUserReward ? volumeToCountAsBigNumber(coinA, ammUserReward.feeRewards[ 0 ]) : toBig(0);\n            feeB = ammUserReward ? volumeToCountAsBigNumber(coinB, ammUserReward.feeRewards[ 1 ]) : toBig(0);\n            feeA = feeA ? feeA : toBig(0);\n            feeB = feeB ? feeB : toBig(0);\n            feeDollar = feeA.times(faitPrices[ coinA ]?faitPrices[ coinA ].price:0).plus(feeB.times(faitPrices[ coinB ]?faitPrices[ coinB ].price:0))\n            feeYuan = feeDollar.times(forex);\n            reward = rewardToken ? volumeToCountAsBigNumber(rewardToken, ammUserReward.currentRewards[ 0 ].volume) as BigNumber : toBig(0);\n            reward2 = rewardToken2 ? volumeToCountAsBigNumber(rewardToken2, ammUserReward.currentRewards[ 1 ].volume) as BigNumber : toBig(0);\n            reward = reward ? reward : toBig(0);\n            reward2 = reward2 ? reward2 : toBig(0);\n            rewardDollar = reward.times(rewardToken ? faitPrices[ rewardToken ].price : 1).plus(reward2.times(rewardToken2 ? faitPrices[ rewardToken2 ].price : 1));\n            rewardYuan = rewardDollar.times(forex);\n            _myAmm = {\n                ..._myAmm,\n                feeA: feeA ? feeA.toNumber() : undefined,\n                feeB: feeB ? feeB.toNumber() : undefined,\n                reward: reward ? reward.toNumber() : undefined,\n                // @ts-ignore\n                rewardToken: rewardToken ? coinMap[ rewardToken ] : undefined,\n                reward2: reward2 ? reward2.toNumber() : undefined,\n                // @ts-ignore\n                rewardToken2: rewardToken2 ? coinMap[ rewardToken2 ] : undefined,\n                rewardDollar: rewardDollar ? rewardDollar.toNumber() : undefined,\n                rewardYuan: rewardYuan ? rewardYuan.toNumber() : undefined,\n                feeDollar: feeDollar ? feeDollar.toNumber() : undefined,\n                feeYuan: feeYuan ? feeYuan.toNumber() : undefined,\n                ammDetail: {\n                    // @ts-ignore\n                    coinAInfo: coinA ? coinMap[ coinA ] : undefined,\n                    // @ts-ignore\n                    coinBInfo: coinB ? coinMap[ coinB ] : undefined,\n                },\n            }\n\n        }\n        return _myAmm as MyAmmLP<C>\n    }\n    return {\n        feeA: undefined,\n        feeB: undefined,\n        feeDollar: undefined,\n        feeYuan: undefined,\n        reward: undefined,\n        rewardToken: undefined as any,\n        balanceA: undefined,\n        balanceB: undefined,\n        balanceYuan: undefined,\n        balanceDollar: undefined,\n    }\n}\n\n// if (ammUserReward) {\n//     const symbol = ammUserReward.currentRewards[ 0 ] ? idIndex[ ammUserReward.currentRewards[ 0 ].tokenId as number ] : undefined\n//     const symbol2 = ammUserReward.currentRewards[ 1 ] ? idIndex[ ammUserReward.currentRewards[ 1 ].tokenId as number ] : undefined\n//\n//     _myAmm = {\n//         ..._myAmm,\n//         feeA: ammUserReward ? volumeToCount(coinA, ammUserReward.feeRewards[ 0 ]) : 0,//Number(ammUserReward.feeRewards[ 0 ]) : 0,\n//         feeB: ammUserReward ? volumeToCount(coinB, ammUserReward.feeRewards[ 1 ]) : 0,//Number(ammUserReward.feeRewards[ 1 ]) : 0,\n//         reward: symbol ? volumeToCount(symbol, ammUserReward.currentRewards[ 0 ].volume) : 0,\n//         // @ts-ignore\n//         rewardToken: symbol ? coinMap[ symbol ] : undefined,\n//         reward2: symbol2 ? volumeToCount(symbol2, ammUserReward.currentRewards[ 1 ].volume) : 0,\n//         // @ts-ignore\n//         rewardToken2: symbol2 ? coinMap[ symbol2 ] : undefined,\n//\n//\n//     }\n//     _myAmm.feeDollar = _myAmm.feeA && _myAmm.feeA * faitPrices[ coinA ].price;\n//     _myAmm.feeDollar = _myAmm.feeB && _myAmm.feeB * faitPrices[ coinB ].price;\n// }\n//\n//\n// if (_walletMap && _walletMap[ 'LP-' + market ]) {\n//     // @ts-ignore\n//     const ratio = new BigNumber(_walletMap[ 'LP-' + market ].detail.total).div(snapShotData.ammPoolsBalance.lp.volume);\n//     _myAmm = {\n//         ..._myAmm,  //snapShotData.ammPoolsBalance.pooled[ 0 ].volume).div(BIG10.pow(tokenMap[coinA].decimals)\n//         balanceA: ratio.times(volumeToCountAsBigNumber(coinA, snapShotData.ammPoolsBalance.pooled[ 0 ].volume) || 1).toNumber(),\n//         balanceB: ratio.times(volumeToCountAsBigNumber(coinB, snapShotData.ammPoolsBalance.pooled[ 1 ].volume) || 1).toNumber(),\n//     }\n//     // @ts-ignore\n//     _myAmm.balanceDollar = _myAmm.balanceA * faitPrices[ coinA ].price + _myAmm.balanceB * faitPrices[ coinB ].price\n//     _myAmm.balanceYuan = _myAmm.balanceDollar * forex\n// }\n// export const getAmmPoolGameUserRanks = ():Promise<AmmUserRewardMap> => {\n//     const {accountId} = store.getState().account\n//     //https://api3.loopring.io/api/v2/amm/user/rewards?owner=10917\n//     if(LoopringAPI.ammpoolAPI){\n//         return LoopringAPI.ammpoolAPI.getAmmPoolUserRewards({owner:accountId}).then(({ammUserRewardMap}:any)=>{\n//               return ammUserRewardMap  as AmmUserRewardMap\n//         })\n//     }else{\n//         return  Promise.resolve({} as AmmUserRewardMap);\n//     }\n//\n//     // return LoopringAPI.ammpoolAPI?.getUserAmmPoolTxs({accountId}, apiKey).then(({userAmmPoolTxs}) => {\n//     //     return userAmmPoolTxs\n//     // })\n//     // if(LoopringAPI.ammpoolAPI)   {\n//     //    let promiseList =  marketKeys.map((key)=>{\n//     //         // @ts-ignore\n//     //         return LoopringAPI.ammpoolAPI.getAmmPoolGameUserRank({owner:accAddr,ammPoolMarket:'key'},apiKey)\n//     //     })\n//     //     return Promise.all(promiseList).then(\n//     //         (array:any[])=>{\n//     //\n//     //           return  array.reduce((prev,item:{userRankList:GameRankInfo[]},index)=>{\n//     //                 const market = marketKeys[index]\n//     //                 prev[ market] = item.userRankList[0]\n//     //                 return item.userRankList[0]\n//     //             },{})\n//     //\n//     //         }\n//     //     )\n//     // }else{\n//     //   return  Promise.resolve({});\n//     // }\n//\n//\n//\n//\n// }\n//\n// {\n//     userRankList: GameRankInfo[];\n//     raw_data: any;\n// }\n","import { AmmDetailStore } from '../../stores/Amm/AmmMap';\nimport { AmmPoolSnapshot } from 'loopring-sdk';\nimport { makeMyAmmWithSnapshot, makeMyAmmWithStat } from './makeUIAmmActivityMap';\nimport { AmmUserRewardMap } from 'loopring-sdk/dist/defs/loopring_defs';\nimport { WalletMapExtend } from './makeWallet';\n\nexport const makeMyPoolRowWithSnapShot = <T extends { [ key: string ]: any }>({market,ammSnapShot,walletMap,ammUserRewardMap}: {\n    market:string\n    ammSnapShot: AmmPoolSnapshot,\n    walletMap: WalletMapExtend<T>\n    ammUserRewardMap:AmmUserRewardMap|undefined\n}) => {\n\n    return makeMyAmmWithSnapshot(market,walletMap, ammUserRewardMap, {\n        ammPoolsBalance: ammSnapShot\n    })\n}\n\n                                                                        \nexport const makeMyPoolRowWithPoolState = <T extends { [ key: string ]: any }>({market,ammDetail,walletMap,ammUserRewardMap}: {\n    market:string\n    ammDetail: AmmDetailStore<T>,\n    walletMap: WalletMapExtend<T>\n    ammUserRewardMap:AmmUserRewardMap|undefined\n}) => {\n    if(walletMap && ammDetail){\n        return makeMyAmmWithStat (market,walletMap, ammUserRewardMap, ammDetail)\n    }\n    return undefined\n}","import { TickerData, toBig } from 'loopring-sdk';\nimport store from '../../stores';\nimport { FloatTag,TradeFloat } from '@loopring-web/common-resources';\nimport { volumeToCountAsBigNumber } from './volumeToCount';\nimport { Ticker, TickerMap } from '../../stores/ticker';\nimport { LoopringMap } from 'loopring-sdk/dist/defs/loopring_defs';\nimport { VolToNumberWithPrecision } from '../../utils/formatter_tool';\n\nexport const makeTickView = (tick: TickerData) => {\n    // const {forex} = store.getState().system;\n\n    const {faitPrices, forex} = store.getState().system;\n    const floatTag = (isNaN(tick.close) || isNaN(tick.open))  || tick.open === tick.close ? FloatTag.none :\n        tick.close > tick.open ? FloatTag.increase : FloatTag.decrease\n    let _tradeFloat: Partial<TradeFloat> = {\n        change: (tick.close - tick.open) / tick.open,\n        timeUnit: '24h',\n        priceYuan:  0,\n        priceDollar: 0,\n        floatTag,\n        reward: 0,\n        close: isNaN(tick.close) ? undefined : tick.close,\n        high: tick.high === 0 ? undefined : tick.high,\n        low: tick.low === 0 ? undefined : tick.low,\n\n        // APY: 0,\n    }\n    if (faitPrices && forex) {\n        const volume = VolToNumberWithPrecision(tick.base_token_volume, tick.base as string)\n        // const priceDollar = toBig(tiem).times(faitPrices[ tick.base as string ] ? faitPrices[ tick.base as string ].price : 0);\n        // const priceYuan = priceDollar.times(forex);\n        const closeDollar = toBig(tick.close).times(faitPrices[ tick.quote as string ] ? faitPrices[ tick.quote as string ].price : 0);\n        const closeYuan = closeDollar.times(forex);\n        const qPrice = faitPrices[tick.quote as string].price?    faitPrices[tick.quote as string].price:0;\n        _tradeFloat = {\n            ..._tradeFloat,\n            changeDollar: toBig(tick.close - tick.open).times( qPrice ).toNumber(),\n            changeYuan: toBig(tick.close - tick.open).times( qPrice ).times(forex).toNumber(),\n            volume: volume?Number(volume):undefined,\n            closeDollar:closeDollar.toNumber(),\n            closeYuan:closeYuan.toNumber(),\n        }\n    }\n    return _tradeFloat;\n}\nexport  const makeTickerMap =  <R extends {[key:string]:any}>({tickerMap}:{tickerMap:LoopringMap<TickerData>}):TickerMap<{[key:string]:any}>=>{\n    const {faitPrices, forex} = store.getState().system;\n    return Reflect.ownKeys(tickerMap).reduce((prev, key) => {\n        const item: TickerData = tickerMap[ key as any ];\n        if (item && item.base && forex && faitPrices && (faitPrices[ item.base ] || faitPrices[ 'USDT' ])) {\n            const volume = VolToNumberWithPrecision(item.base_token_volume, item.base as string)\n            //FIX: DIE is not in faitPrices\n            const priceDollar = toBig(volume?volume:0).times(faitPrices[ item.base ] ? faitPrices[ item.base ].price : faitPrices[ 'USDT' ].price);\n            const priceYuan = priceDollar?.times(forex);\n            const change = item.change && item.change !== 0 ? item.change * 100 : undefined;\n\n            prev[ key as keyof R] = {\n                // ...item,\n                timeUnit: '24h',\n                priceDollar: priceDollar?.toNumber() === 0 ? undefined : priceDollar?.toNumber(),\n                priceYuan: priceYuan?.toNumber() === 0 ? undefined : priceYuan?.toNumber(),\n                volume: volume?Number(volume):undefined,\n                floatTag: item.close > item.open ? 'increase' : 'decrease',\n                change: change,\n                close: isNaN(item.close) ? undefined : item.close,\n                high: item.high === 0 ? undefined : item.high,\n                low: item.low === 0 ? undefined : item.low,\n                // APY: 0,\n                reward: 0,\n                rewardToken: '',\n                __rawTicker__: item,\n            } as Ticker;\n        }\n        return prev\n    }, {} as TickerMap<R>)\n}\n","import store from '../../stores';\nimport { WalletCoin,CoinKey } from '@loopring-web/common-resources';\nimport * as sdk from 'loopring-sdk';\nexport type WalletMapExtend<C> =    {\n    [K in CoinKey<C>]?: WalletCoin<C> & {\n    detail: sdk.UserBalanceInfo\n}\n}\n\nexport const makeWalletLayer2 = <C extends { [ key: string ]: any }>():{ walletMap: WalletMapExtend<C> | undefined } => {\n    const {walletLayer2} = store.getState().walletLayer2;\n    const {tokenMap} = store.getState().tokenMap;\n    let walletMap: WalletMapExtend<C> | undefined;\n\n\n    if (walletLayer2) {\n        walletMap = Reflect.ownKeys(walletLayer2).reduce((prev, item) => {\n            const {total, locked, pending: { withdraw }} = walletLayer2[ item as string ];\n            const countBig = sdk.toBig(total).minus(sdk.toBig(locked)).toString()\n            return {\n                ...prev, [ item ]: {\n                    belong: item,\n                    count: sdk.fromWEI(tokenMap, item, countBig),\n                    detail: walletLayer2[ item as string ]\n                }\n            }\n        }, {} as  WalletMapExtend<C> )\n    }\n\n    return {walletMap}\n}","import * as sdk from 'loopring-sdk';\nimport store from '../../stores';\nimport { TradeTypes } from '@loopring-web/common-resources';\nimport { LoopringAPI, userAPI } from '../../stores/apis/api';\nimport { AmmRecordRow, AmmTradeType,RawDataTradeItem } from '@loopring-web/component-lib';\nimport { volumeToCount, volumeToCountAsBigNumber } from './volumeToCount';\n\nexport const getUserTrades = (marketKey: any) => {\n    const userApi = userAPI();\n    const {accountId, apiKey} = store.getState().account\n    return userApi.getUserTrades({accountId}, apiKey).then((response: {\n        totalNum: any;\n        userTrades: sdk.UserTrade[];\n        raw_data: any;\n    }) => {\n        return response.userTrades\n    })\n}\nexport const makeMarketArray = (coinKey: any, marketTrades: sdk.MarketTradeInfo[]): RawDataTradeItem[] => {\n\n    let tradeArray: Array<Partial<RawDataTradeItem>> = []\n\n    marketTrades.forEach((item: sdk.MarketTradeInfo) => {\n        try {\n            const {base, quote} = sdk.getBaseQuote(item.market)\n            const {forex} = store.getState().system\n            const {currency} = store.getState().settings\n            const {tokenMap} = store.getState().tokenMap\n            if (tokenMap) {\n                // const baseToken = tokenMap[ base as string ]\n                // const quoteToken = tokenMap[ quote as string ]\n                const feeKey = item.side === sdk.Side.Buy ? base : quote\n                // @ts-ignore\n                tradeArray.push({\n                    side: item.side === sdk.Side.Sell ? TradeTypes.Sell : TradeTypes.Buy,\n                    amount: {\n                        from: {\n                            key: base as string,\n                            value: base ? volumeToCount(base, item.volume) : undefined\n                        },\n                        to: {\n                            key: quote as string,\n                            value: base ? volumeToCountAsBigNumber(base, item.volume)?.times(item.price).toNumber():undefined\n                        },\n\n                    },\n                    price: {\n                        key: '',\n                        value: sdk.toBig(item.price).toNumber(),\n                    },\n                    fee: {\n                        key: feeKey || '--',\n                        value: feeKey ? volumeToCountAsBigNumber(feeKey, item.fee)?.toNumber() : undefined, \n                    },\n                    time: parseInt(item.tradeTime.toString()),\n                })\n            }\n        } catch (error) {\n            //CATCHERROR:\n            console.log(error)\n            // new CustomError()\n        }\n\n    })\n    // console.log('tradeArray:', tradeArray)\n    return tradeArray as RawDataTradeItem[];\n\n}\n\nexport const getUserAmmTransaction = () => {\n    const {accountId, apiKey} = store.getState().account\n    return LoopringAPI.ammpoolAPI?.getUserAmmPoolTxs({accountId}, apiKey).then(({userAmmPoolTxs}) => {\n        return userAmmPoolTxs\n    })\n    // }\n\n}\n\n\nexport const makeMyAmmMarketArray = <C extends { [ key: string ]:any }>(coinKey: string|undefined, marketTransaction: sdk.UserAmmPoolTx[]): AmmRecordRow<C>[] => {\n\n    let tradeArray: Array<Partial<AmmRecordRow<C>>> = [];\n    let {tokenMap, coinMap, idIndex} = store.getState().tokenMap;\n    marketTransaction.forEach((item: sdk.UserAmmPoolTx) => {\n        try {\n           // const {base, quote} = getBaseQuote(coinKey)\n            const {forex} = store.getState().system\n            // const {currency} = store.getState().settings\n            if (coinMap && tokenMap && idIndex\n                && !(coinKey && tokenMap['LP-'+coinKey].tokenId !== item.lpToken.tokenId) ) {\n                // @ts-ignore\n                const [, coinA, coinB] = idIndex[item.lpToken.tokenId].match(/LP-(\\w+)-(\\w+)/i);\n                 \n                tradeArray.push({\n                        type: item.txType === sdk.AmmTxType.JOIN ? AmmTradeType.add : AmmTradeType.remove,\n                        //TODO:\n                        totalDollar: 1000,\n                        totalYuan: 1000 / Number(forex),\n                        amountA: volumeToCount(coinA,item.poolTokens[ 0 ]?.actualAmount),\n                        amountB: volumeToCount(coinA,item.poolTokens[ 1 ]?.actualAmount),\n                        time: Number(item.updatedAt),\n                        // @ts-ignore\n                        coinA: coinMap[ coinA ],\n                        // @ts-ignore\n                        coinB: coinMap[ coinB ],\n                        status: item.txStatus\n                    })\n                }\n                return tradeArray\n            }\n         catch (error) {\n            //CATCHERROR:\n            console.log(error)\n            // new CustomError()\n        }\n\n    })\n    // console.log('tradeArray:', tradeArray)\n    return tradeArray as AmmRecordRow<C>[];\n\n}\n\n\nexport const makeMarketAmmArray = <C extends object>(coinKey: any, marketTransaction: sdk.AmmPoolTx[]): AmmRecordRow<C>[] => {\n\n    let tradeArray: Array<Partial<AmmRecordRow<C>>> = [];\n\n    // marketTransaction.forEach((item: AmmPoolTx) => {\n    //     try {\n    //         const {base, quote} = getBaseQuote(coinKey)\n    //         const {forex} = store.getState().system\n    //         // const {currency} = store.getState().settings\n    //         const coinMap = store.getState().tokenMap.coinMap as CoinMap<C>\n    //         if (coinMap) {\n    //\n    //             // id: number;\n    //             // from: string;\n    //             // to: string;\n    //             // token: string;\n    //             // amount: string;\n    //             // tokenF: string;\n    //             // amountF: string;\n    //             // status: TxStatus;\n    //             // txHash: string;\n    //             // billType: BillType;\n    //             // income: boolean;\n    //             // timestamp: number;\n    //             // memo: string;\n    //             // price: string;\n    //             // transferType: TransferType;\n    //             // label: string;\n    //             tradeArray.push({\n    //                 // type: item.billType === BillType.ORDER ?\n    //                 //     AmmTradeType.swap : item.billType === BillType.TRANSFER && item.income ?\n    //                 //         AmmTradeType.add : AmmTradeType.remove,\n    //                 // // //TODO:\n    //                 // totalDollar: 1000,\n    //                 // totalYuan: 1000 / Number(forex),\n    //                 // amountA: Number(item.poolTokens[ 0 ].amount),\n    //                 // amountB: Number(item.poolTokens[ 1 ].amount),\n    //                 // time: Number(item.updatedAt),\n    //                 // coinA: coinMap[ base as keyof C],\n    //                 // coinB: coinMap[ quote as keyof C ],\n    //             })\n    //         }\n    //     } catch (error) {\n    //         //CATCHERROR:\n    //         console.log(error)\n    //         // new CustomError()\n    //     }\n    //\n    // })\n    // console.log('tradeArray:', tradeArray)\n    return tradeArray as AmmRecordRow<C>[];\n\n}\n","import { AmmMap } from '../../stores/Amm/AmmMap';\nimport { AmmPoolSnapshot, getBaseQuote, LoopringMap, TickerData, TokenInfo, TokenVolumeV3 } from 'loopring-sdk';\nimport { LoopringAPI } from '../../stores/apis/api';\nimport { CoinMap, CustomError, ErrorMap } from '@loopring-web/common-resources';\nimport { volumeToCountAsBigNumber } from './volumeToCount';\n\nexport const pairDetailBlock = <C extends { [ key: string ]: any }, I extends { [ key: string ]: any }>({\n                                                                                                           coinKey,\n                                                                                                           ammKey,\n                                                                                                           ammMap\n                                                                                                       }: { coinKey: string, ammKey: string, ammMap: AmmMap<C, I> }):\n    Promise<{\n        ammPoolsBalance: AmmPoolSnapshot,\n        tickMap:  LoopringMap<TickerData>\n}> => {\n    // const exchangeApi = exchangeAPI();\n    // const ammpoolApi = ammpoolAPI();\n    return new Promise((resolve, reject) => {\n        if(LoopringAPI.ammpoolAPI && LoopringAPI.exchangeAPI ) {\n            Promise.all([\n                LoopringAPI.ammpoolAPI.getAmmPoolSnapshot({poolAddress: ammMap[ ammKey ].address}),\n                LoopringAPI.exchangeAPI.getMixTicker({market: coinKey})])\n                // exchangeApi.getMarketTrades({market:coinKey})])\n                //{raw_data},\n                .then(([{ammPoolSnapshot}, {tickMap}]) => {\n                    resolve({\n                        ammPoolsBalance: ammPoolSnapshot as AmmPoolSnapshot,\n                        tickMap,\n                    })\n                })\n\n        }else{\n            reject(new CustomError(ErrorMap.NO_SDK))\n        }\n       \n    })\n}\n\nexport const pairDetailDone = <C>({coinKey, market,ammPoolsBalance, fee, tokenMap,tickerData, _tradeCalcData, coinMap, marketCoins}:any)=>{\n\n    const [, coinSell, coinbuy] = coinKey.match(/(\\w+)-(\\w+)/i)\n    let stob:number|undefined;\n    if (tickerData.base === coinSell) {\n        // const ticker: TickerData = tickMap[market]\n        stob = Number(tickerData.close)\n\n    } else{\n        // const ticker: TickerData = tickMap[market]\n        stob = Number(tickerData.close)!==0? 1/Number(tickerData.close): 0\n    }\n    if(isNaN(stob) && ammPoolsBalance){\n        const {base, quote} = getBaseQuote(coinKey)\n        \n        const poolBaseTokenVol: TokenVolumeV3 = ammPoolsBalance.pooled[0];\n        const quoteBaseTokenVol: TokenVolumeV3 = ammPoolsBalance.pooled[1];\n        let poolVolumn:[baseVol:any, quoteVol:any];\n        if ( base && quote && tokenMap[base].tokenId === poolBaseTokenVol.tokenId ) {\n            poolVolumn =  [[base,poolBaseTokenVol.volume],[quote,quoteBaseTokenVol.volume]]\n        } else if (base && quote && tokenMap[base].tokenId === quoteBaseTokenVol.tokenId){\n            poolVolumn =  [[quote,quoteBaseTokenVol.volume],[base,poolBaseTokenVol.volume]]\n        } else {\n            throw new CustomError(ErrorMap.NO_SUPPORT_PAIR)\n        }\n        let [baseVol,quoteVol]  = poolVolumn\n        if(baseVol && quoteVol){\n            // stob = volumeToCountAsBigNumber(baseVol[0],baseVol[1])?.div(\n            //     volumeToCountAsBigNumber(quoteVol[0],quoteVol[1]) || 1\n            // ) .toNumber()\n            stob = parseFloat(volumeToCountAsBigNumber(quoteVol[0],quoteVol[1])?.div(\n                volumeToCountAsBigNumber(baseVol[0],baseVol[1]) || 1).toFixed(7, 0) as string)\n        }\n    }\n\n    _tradeCalcData.StoB = stob;\n    _tradeCalcData.BtoS = stob !== 0 && stob !== undefined? 1 / (stob * 1.0): 0;\n    _tradeCalcData.sellCoinInfoMap = coinMap && marketCoins?.reduce((prev: any, item: string | number) => {\n        return {...prev, [ item ]: coinMap[ item ]}\n    }, {} as CoinMap<C>)\n    _tradeCalcData.buyCoinInfoMap = coinMap && tokenMap && tokenMap[ _tradeCalcData.coinSell as string ].tradePairs?.reduce((prev: any, item: string | number) => {\n        return {...prev, [ item ]: coinMap[ item ]}\n    }, {} as CoinMap<C>);\n\n    _tradeCalcData.fee = fee\n\n    return {\n        _tradeCalcData\n    }\n    //setPair();\n}","import React from 'react'\n\nimport { Header as HeaderUI, HideOnScroll, } from '@loopring-web/component-lib'\n\nimport { headerRoot } from '@loopring-web/common-resources'\n\nimport { useLocation } from 'react-router-dom'\n\nimport { Toolbar, } from '@material-ui/core'\nimport { useHeader } from './hook'\n\nconst Header = ({...rest}: any) => {\n    const location = useLocation()\n\n    const {\n        headerToolBarData,\n        headerMenuData,\n\n    } = useHeader()\n\n    return (<>\n        <HideOnScroll>\n            <HeaderUI {...rest} headerMenuData={headerMenuData} headerToolBarData={headerToolBarData}\n                      selected={location.pathname === '/' ? headerRoot : location.pathname}></HeaderUI>\n\n        </HideOnScroll>\n        <Toolbar/>\n\n    </>)\n}\nexport default Header\n\n\n\n","import React from 'react'\n\nimport {\n    ButtonComponentsMap,\n    fnType,\n    headerMenuData,\n    headerToolBarData,\n    LanguageKeys,\n    ThemeKeys,\n} from '@loopring-web/common-resources'\n\nimport { useAccount, } from 'stores/account'\n\nimport { Theme, } from 'defs/common_defs'\n\nimport { AccountStep, useOpenModals, useSettings, } from '@loopring-web/component-lib'\n\nimport { accountStaticCallBack, btnClickMap } from 'hooks/help'\nimport { myLog } from 'utils/log_tools'\nimport { deepClone } from '../../utils/obj_tools';\n\nexport const useHeader = () => {\n    const {setTheme, themeMode, setLanguage} = useSettings();\n    const accountState = useAccount();\n    const {account, setShouldShow, status: accountStatus} =  useAccount();\n    const {setShowAccount} = useOpenModals();\n    const _btnClickMap: typeof btnClickMap = Object.assign(deepClone(btnClickMap), {\n        [ fnType.ACTIVATED ]: [\n            function () {\n                setShouldShow(true);\n                setShowAccount({isShow: true, step: AccountStep.HadAccount})\n            }\n        ],\n        [ fnType.CONNECT ]: [\n            function () {\n                setShouldShow(true);\n                setShowAccount({isShow: true, step: AccountStep.HadAccount})\n            }\n        ]\n\n    });\n\n\n    const onWalletBtnConnect = React.useCallback(async () => {\n        myLog(`onWalletBtnConnect click: ${account.readyState}`);\n        setShouldShow(true);\n        accountStaticCallBack(_btnClickMap, []);\n    }, [account])\n    const onThemeBtnClick = React.useCallback(async (themeMode: ThemeKeys) => {\n        if (themeMode === Theme.dark) {\n            setTheme(Theme.light)\n        } else {\n            setTheme(Theme.dark)\n        }\n    }, [setTheme])\n\n    const onLangBtnClick = (lang: LanguageKeys) => {\n        setLanguage(lang);\n    }\n\n\n    React.useEffect(() => {\n        headerToolBarData[ ButtonComponentsMap.WalletConnect ] = {\n            ...headerToolBarData[ ButtonComponentsMap.WalletConnect ],\n            accountState,\n            handleClick: onWalletBtnConnect,\n        }\n        headerToolBarData[ ButtonComponentsMap.Theme ] = {\n            ...headerToolBarData[ ButtonComponentsMap.Theme ],\n            themeMode,\n            handleClick: onThemeBtnClick\n        }\n        headerToolBarData[ ButtonComponentsMap.Language ] = {\n            ...headerToolBarData[ ButtonComponentsMap.Language ],\n            handleChange: onLangBtnClick\n        }\n\n    }, []);\n\n    const forceUpdate = React.useReducer(() => ({}), {})[ 1 ] as () => void\n    React.useEffect(() => {\n        if (accountStatus && accountStatus === 'UNSET') {\n            headerToolBarData[ ButtonComponentsMap.WalletConnect ] = {\n                ...headerToolBarData[ ButtonComponentsMap.WalletConnect ],\n                accountState,\n            }\n        }\n        forceUpdate()\n    }, [accountStatus]);\n\n    return {\n        headerToolBarData,\n        headerMenuData,\n        account,\n    }\n}\n\n","import React, { useCallback, useEffect } from \"react\"\nimport store from '../../stores';\nimport { TickerMap, useTicker } from '../../stores/ticker';\nimport { MarketBlockProps, QuoteTableRawDataItem, } from '@loopring-web/component-lib';\nimport { deepClone } from '../../utils/obj_tools';\nimport { useSocket } from '../../stores/socket';\nimport { TradingInterval, WsTopicType } from 'loopring-sdk';\nimport { LoopringAPI } from 'stores/apis/api'\nimport { tickerService } from '../../services/tickerService';\nimport { debounce } from \"lodash\"\nimport { globalSetup } from '@loopring-web/common-resources';\nimport { myError } from \"utils/log_tools\";\n\nconst amtCol = 5\nconst OnePageSize = 16;\nconst rowHeight = 44;\n\n// 0\nfunction isNeedCallMore(currentStartIndex: number, to: number, marketArrayLength: number, currentListLength: number, pageSize: number = OnePageSize): boolean {\n    const pageCurrent = currentStartIndex / OnePageSize\n    if (to - pageCurrent > 1) {\n        return false\n    } else if (pageSize * to < marketArrayLength && currentListLength - 4 < pageSize * (to + 1)) {\n        return true\n    } else {\n        return false\n    }\n}\n\nexport function useQuote<C extends { [ key: string ]: string }>() {\n\n\n    const {\n        tickerMap,\n        status: tickerStatus,\n        // errorMessage: errorTickerMap,\n        statusUnset: tickerStatusUnset,\n        updateTickers,\n    } = useTicker();\n    const {sendSocketTopic, socketEnd} = useSocket();\n    const [recommendedPairs, setRecommendedPairs] = React.useState<string[]>([])\n    const {marketArray, coinMap} = store.getState().tokenMap;\n    // const recommendMarkets: string[] = marketArray && recommendedPairs.length === 4 ? recommendedPairs : []\n    // const recommendMarkets: string[] = ['LRC-USDC', 'LRC-ETH', 'ETH-USDC', 'USDC-USDT']\n    // const _marketArrayWithOutRecommend = marketArray ? marketArray.filter(item => recommendMarkets.findIndex(m => m === item) === -1) : [];\n    // const _marketArrayWithOutRecommend = marketArray ? marketArray.filter(item => recommendedPairs.findIndex(m => m === item) === -1) : [];\n    const [tickList, setTickList] = React.useState<any>([]);\n    const [recommendations, setRecommendations] = React.useState<MarketBlockProps<C>[]>([]);\n    const [, setTickerKeys] = React.useState<string[]>([]);\n    const [focusRowFrom, setFocusRowFrom] = React.useState<[start: number, end: number]>([0, 2]);\n    const [startIndex, setStartIndex] = React.useState<number>(-1);\n    // const recommendMarkets: string[] = marketArray ? marketArray.slice(0, 4) : ['LRC-ETH', 'LRC-ETH', 'LRC-ETH', 'LRC-ETH']\n    \n    const subject = React.useMemo(() => tickerService.onSocket(), []);\n\n    const updateRecommendation = React.useCallback((recommendationIndex, ticker) => {\n        if (recommendations.length) {\n          //  let _recommendations = deepClone(recommendations)\n            recommendations[ recommendationIndex ].tradeFloat = ticker\n            setRecommendations(recommendations)\n        }\n    }, [recommendations]);\n    \n    React.useEffect(() => {\n        const subscription = subject.subscribe(({tickerMap}) => {\n            if (tickerMap) {\n                Reflect.ownKeys(tickerMap).forEach((key) => {\n                    let recommendationIndex = recommendedPairs.findIndex(ele => ele === key)\n                    if (recommendationIndex !== -1) {\n                        // setRecommendations\n                        updateRecommendation(recommendationIndex, tickerMap[ key as string ])\n                    }\n                    //TODO update related row. use socket return\n                })\n            }\n        });\n        return () => subscription.unsubscribe();\n    }, [subject, recommendedPairs]);\n\n    const getRecommandPairs = useCallback(async() => {\n        if (LoopringAPI.exchangeAPI) {\n            try {\n                const { recommended } = await LoopringAPI.exchangeAPI.getRecommendedMarkets()\n                setRecommendedPairs(recommended)\n                return recommended || []\n            } catch (e) {\n                myError(e)\n            }\n            return []\n            // const { recommended } = await LoopringAPI.exchangeAPI.getRecommendedMarkets()\n            // console.log(recommended)\n            // setRecommendedPairs(recommended)\n            // return recommended\n        }\n    }, [])\n\n    React.useEffect(() => {\n        getRecommandPairs()\n    }, [getRecommandPairs])\n\n\n    //TODO if socket is error throw use recall will pending on it\n    // React.useEffect(() => {\n    //     switch (socketStatus) {\n    //         case \"ERROR\":\n    //             console.log(\"ERROR\", 'open websocket error get moment value from api ');\n    //             socketStatusUnset();\n    //             updateTickers(tickerKeys);\n    //             break;\n    //         default:\n    //             break;\n    //     }\n    // }, [socketStatus, socketStatusUnset]);\n    React.useEffect(() => {\n        const [from, to] = focusRowFrom\n        getTicker(from, to);\n        socketSendTicker(from * OnePageSize);\n        return () => {\n            socketEnd()\n        }\n    }, []);\n    React.useEffect(() => {\n        switch (tickerStatus) {\n            case \"ERROR\":\n                console.log(\"ERROR\", 'get ticker error,ui');\n                tickerStatusUnset()\n                break;\n            case \"PENDING\":\n                break;\n            case \"DONE\":\n                tickerStatusUnset();\n                updateRawData(tickerMap as TickerMap<C>);\n                break;\n            default:\n                break;\n        }\n    }, [tickerStatus, tickerStatusUnset]);\n\n    const getTicker = React.useCallback((from: number, to: number) => {\n        // if (_marketArrayWithOutRecommend) {\n            // let array = _marketArrayWithOutRecommend.slice(from * OnePageSize, to * OnePageSize);\n            // let array = _marketArrayWithOutRecommend; // 暂时获取全量数据\n            //High: add recommendations market first time is 36个数据\n            // if (from === 0) {\n            //     array = recommendMarkets.concat(array)\n            // }\n            // updateTickers(array);\n        // }\n        updateTickers(marketArray || []);\n\n    }, [marketArray, OnePageSize])\n\n    const updateRawData = React.useCallback(async (tickerMap: TickerMap<C>) => {\n        const marketPairs: string[] = await getRecommandPairs()\n        let _recommendationsFloat: QuoteTableRawDataItem[] = [];\n        let defaultRecommendationsFloat: QuoteTableRawDataItem[] = []\n        const _tickList = tickerMap && Object.keys(tickerMap) ? Reflect.ownKeys(tickerMap).reduce((prev, key) => {\n            // @ts-ignore\n            const [, coinA, coinB] = key.match(/(\\w+)-(\\w+)/i);\n            let _item = {\n                ...tickerMap[ key as string ],\n                pair: {\n                    coinA,\n                    coinB,\n                },\n            } as QuoteTableRawDataItem;\n\n            if (marketPairs.findIndex(m => m === key) !== -1) {\n                _recommendationsFloat.push(deepClone(_item))\n            }\n            if (marketArray && marketArray.findIndex(m => m === key) !== -1) {\n                defaultRecommendationsFloat.push(deepClone(_item))\n            }\n            prev.push(_item);\n            return prev\n        }, [] as QuoteTableRawDataItem[]) : []\n        \n        setTickList([...tickList, ..._tickList])\n        //setTickList\n        // if (focusRowFrom[ 0 ] === 0 && _recommendationsFloat.length > 0) {\n        if (focusRowFrom[ 0 ] === 0) {\n            _recommendationsFloat = _recommendationsFloat.filter(o => {\n                const { coinA, coinB } = o.pair\n                return (coinMap && coinMap[coinA] && coinMap[coinB])\n            })\n\n            //FIX: fix in uat env not enough pair_recommendations\n            if (_recommendationsFloat.length < 4) {\n                const filteredFloat = defaultRecommendationsFloat.filter(o => {\n                    const pair = `${o.pair.coinA}-${o.pair.coinB}`\n                    return !marketPairs.includes(pair)\n                })\n                _recommendationsFloat = _recommendationsFloat.concat(filteredFloat.slice(0, 4 - _recommendationsFloat.length));\n            }\n\n            // case uat only\n            while(_recommendationsFloat.length < 4) {\n                _recommendationsFloat.push(deepClone(_recommendationsFloat[0]))\n            }\n            \n            const _recommendations = _recommendationsFloat.reduce((prev, item) => {\n                if (coinMap) {\n                    const {coinA, coinB} = item.pair;\n                    const _item: MarketBlockProps<C> = {\n                        tradeFloat: item as any,\n                        // @ts-ignore\n                        coinAInfo: coinMap[ coinA ],\n                        // @ts-ignore\n                        coinBInfo: coinMap[ coinB ]\n                    } as MarketBlockProps<C>\n                    prev.push(_item)\n                }\n                return prev\n            }, [] as MarketBlockProps<C>[])\n\n            setRecommendations(_recommendations)\n        }\n    }, [tickList, focusRowFrom])\n\n\n    // const  = (startIndex: number) => {\n    //     console.log(startIndex)\n    // }\n\n    // const debounceGetTicker = React.useCallback(debounce((from, to) => {\n    //     getTicker(from, to)\n    // }, globalSetup.wait), [])\n\n    const socketSendTicker = React.useCallback(debounce((_startIndex: number, pageSize = OnePageSize) => {\n        if(_startIndex !== startIndex)  {\n            // let marketArray: string[] = _marketArrayWithOutRecommend.slice(_startIndex, _startIndex + pageSize);\n            // marketArray = [...recommendMarkets, ...marketArray];\n            // setTickerKeys(marketArray || []);\n            //High:\n            sendSocketTopic({[ WsTopicType.ticker ]: marketArray});\n        }\n    }, globalSetup.wait * 2), [startIndex])\n\n    // const onVisibleRowsChange = React.useCallback(async (startIndex: number) => {\n    //     //TODO isBottom and is On prev tickerCall\n    //     // if (!isAtBottom(startIndex,focusRowFrom[1],_marketArrayWithOutRecommend.length,OnePageSize)\n    //     //     && tickerStatus !== 'PENDING'){\n    //     // }\n    //     //TODO load more\n    //     const [, to] = focusRowFrom\n    //     if (isNeedCallMore(startIndex, to, _marketArrayWithOutRecommend.length, tickList.length, OnePageSize)) {\n    //         console.log('getNextPage.......')\n    //         setFocusRowFrom([to, to + 1]);\n    //         debounceGetTicker(to, to + 1);\n    //     }\n    //     setStartIndex(startIndex);\n    //     socketSendTicker(startIndex, OnePageSize)\n    // }, [focusRowFrom, OnePageSize, tickerStatus, marketArray, tickList])\n\n    return {\n        tickList,\n        recommendations,\n        // handleScroll,\n        // onVisibleRowsChange\n    }\n\n}\n\nexport type CandlestickItem = {\n    close: number;\n    timeStamp: number;\n}\n\nexport const useCandlestickList = (market: string) => {\n    const [candlestickList, setCandlestickList] = React.useState<CandlestickItem[]>([])\n    const getCandlestick = React.useCallback(async (market: string) => {\n        if (LoopringAPI.exchangeAPI) {\n            const res = await LoopringAPI.exchangeAPI.getMixCandlestick({\n                market: market,\n                interval: TradingInterval.d1,\n                // start?: number;\n                // end?: number;\n                limit: 7\n            })\n            if (res && res.candlesticks && !!res.candlesticks.length) {\n                const data = res.candlesticks.map(o => ({\n                    close: o.close,\n                    timeStamp: o.timestamp\n                }))\n                setCandlestickList(data)\n            }\n            setCandlestickList([])\n        }\n        setCandlestickList([])\n    }, [])\n\n    React.useEffect(() => {\n        getCandlestick(market)\n    }, [getCandlestick, market])\n\n    return candlestickList\n}\n","import styled from '@emotion/styled';\nimport { Box, Grid, Paper } from '@material-ui/core';\nimport { TablePaddingX } from '@loopring-web/component-lib';\n\nexport const StylePaper = styled(Box)`\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  //height: 100%;\n  flex: 1;\n  background-color: ${({ theme }) => theme.colorBase.background().default};\n  border-radius: ${({ theme }) => theme.unit}px;\n  // padding: ${({ theme }) => 3 * theme.unit}px  0;\n  margin-bottom: ${({ theme }) => 2* theme.unit}px;\n  .title {\n    font-size: ${({ theme }) => theme.unit * 3}px;\n    //line-height: 19px;\n    margin-left: ${({ theme }) => 3 * theme.unit}px;\n    margin-top: ${({ theme }) => 3 * theme.unit}px;\n    // margin-bottom: ${({ theme }) => 2 * theme.unit}px;\n  }\n\n  .tableWrapper {\n    display: flex;\n    margin-top: ${({ theme }) => 3 * theme.unit}px;\n    flex: 1;\n    .rdg {\n      flex: 1;\n    }\n  }\n\n  .extraTradeClass {\n    .rdg-header-row {\n      background-color: inherit !important;\n    }\n  }\n` as typeof Paper;\n\n\nexport const  TableWrapStyled = styled(Grid)`\n  &{\n    background-color: ${({theme}) => theme.colorBase.background().default};\n    border-radius: ${({ theme }) => theme.unit}px;\n    .rdg{\n      .rdg-header-row {\n        border-radius: ${({theme}) => theme.unit}px ${({theme}) => theme.unit}px 0 0;\n      }\n    }\n  }\n  ${({theme}) => TablePaddingX({pLeft:theme.unit * 3,pRight:theme.unit * 3})}\n` as typeof Grid\n\n//    ${({theme}) => theme.border.defaultFrame({c_key: 'blur', d_R: 1})};\n","import React, { useCallback, useEffect } from 'react'\nimport styled from '@emotion/styled/macro'\n\nimport { MarketBlock, QuoteTable, TablePaddingX, QuoteTableRawDataItem, InputSearch } from '@loopring-web/component-lib'\nimport { OutlinedInputProps } from '@material-ui/core/OutlinedInput/OutlinedInput';\nimport { WithTranslation, withTranslation } from 'react-i18next'\nimport { useHistory } from 'react-router-dom'\nimport { cloneDeep } from 'lodash';\n// import { FloatTag } from '@loopring-web/common-resources'\nimport { Box, Grid, Tabs, Tab, Divider, OutlinedInput, InputAdornment } from '@material-ui/core'\nimport { SearchIcon } from '@loopring-web/common-resources'\nimport { useQuote, useCandlestickList } from './hook'\nimport { LoopringAPI } from 'stores/apis/api'\nimport { TradingInterval } from 'loopring-sdk/dist'\nimport { TableWrapStyled } from 'pages/styled'\nimport { useFavoriteMarket } from 'stores/localStore/favoriteMarket'\nimport { AmmPoolActivityRule } from 'loopring-sdk'\n\nconst RowStyled = styled(Grid)`\n      & .MuiGrid-root:not(:last-of-type) > div{\n        margin-right: ${({theme}) => theme.unit * 2}px;\n      }\n` as typeof Grid\n\nconst SearchWrapperStyled = styled(Box)`\n      position: absolute;\n      top: 1.3rem;\n      right: ${({theme}) => theme.unit * 2}px;\n    `\n\nconst TabsWrapperStyled = styled(Box)`\n      position: relative;\n      padding: 0.8rem 0.8rem 0 1rem;\n`\n\nexport type CandlestickItem = {\n  market: string;\n  data: {\n    close: number;\n    timeStamp: number;\n  }[]\n}\n\nexport enum TableFilterParams {\n  all = 'all',\n  favourite = 'favourite',\n  ranking = 'ranking'\n}\n\nconst QuotePage = withTranslation('common')((rest: WithTranslation) => {\n    const [candlestickList, setCandlestickList] = React.useState<any[]>([])\n    const [ammPoolBalances, setAmmPoolBalances] = React.useState<any[]>([])\n    const [tableTabValue, setTableTabValue] = React.useState('all')\n    const [filteredData, setFilteredData] = React.useState<QuoteTableRawDataItem[]>([])\n    const [searchValue, setSearchValue] = React.useState<string>('')\n    const [swapRankingList, setSwapRankingList] = React.useState<AmmPoolActivityRule[]>([])\n\n    const { favoriteMarket, removeMarket, addMarket } = useFavoriteMarket()\n    const { t } = rest\n\n    const getSwapRankingList = React.useCallback(async () => {\n      if (LoopringAPI.ammpoolAPI) {\n        const res = await LoopringAPI.ammpoolAPI.getAmmPoolActivityRules()\n        if (res && !!res.groupByRuleType.SWAP_VOLUME_RANKING.length) {\n          setSwapRankingList(res.groupByRuleType.SWAP_VOLUME_RANKING)\n        }\n      }\n    }, [])\n\n    const getCandlestick = React.useCallback(async (market: string) => {\n      if (LoopringAPI.exchangeAPI) {\n        const res = await LoopringAPI.exchangeAPI.getMixCandlestick({\n          market: market,\n          interval: TradingInterval.d1,\n          // start?: number;\n          // end?: number;\n          limit: 30,\n        })\n        if (res && res.candlesticks && !!res.candlesticks.length) {\n          // const data = res.candlesticks.map(o => ({\n          //   close: o.close,\n          //   timeStamp: o.timestamp\n          // }))\n          // setCandlestickList(prev => [...prev, {\n          //   market: market,\n          //   data: data\n          // }])\n          const data = res.candlesticks.map(o => ({\n            timeStamp: o.timestamp,\n            low: o.low,\n            high: o.high,\n            open: o.open,\n            close: o.close,\n            volume: o.baseVol,\n            sign: o.close < o.open ? -1 : 1,\n          }))\n          setCandlestickList(prev => [...prev, {\n            market: market,\n            data: data\n          }])\n        }\n      }\n    }, [])\n\n    const { recommendations, tickList /* onVisibleRowsChange */ } = useQuote()\n\n    React.useEffect(() => {\n      const list = recommendations.map(item => {\n        const market = `${item.coinAInfo.simpleName}-${item.coinBInfo.simpleName}`\n        return market\n      })\n      if (!!list.length) {\n        getCandlestick(list[0])\n        getCandlestick(list[1])\n        getCandlestick(list[2])\n        getCandlestick(list[3])\n      }\n    }, [recommendations, getCandlestick])\n\n    const getAmmPoolBalances = useCallback(async () => {\n      if (LoopringAPI.ammpoolAPI) {\n        const ammRes = await LoopringAPI.ammpoolAPI?.getAmmPoolBalances()\n        const fomattedRes = ammRes.raw_data.map((o: any) => ({\n          ...o,\n          poolName: o.poolName.replace('AMM-', '')\n        }))\n        setAmmPoolBalances(fomattedRes)\n      }\n    }, [])\n\n    React.useEffect(() => {\n      getAmmPoolBalances()\n    }, [getAmmPoolBalances])\n\n    React.useEffect(() => {\n      getSwapRankingList()\n    }, [getSwapRankingList])\n\n    let history = useHistory()\n\n    // prevent amm risky pair\n    const getFilteredTickList = useCallback(() => {\n      if (!!ammPoolBalances.length && tickList && !!tickList.length) {\n        return tickList.filter((o: any) => {\n          const pair = `${o.pair.coinA}-${o.pair.coinB}`\n          if (ammPoolBalances.find(o => o.poolName === pair)) {\n            return !ammPoolBalances.find(o => o.poolName === pair).risky\n          }\n          return true\n        })\n      }\n      return []\n    }, [tickList, ammPoolBalances])\n\n    useEffect(() => {\n      const data = getFilteredTickList()\n      setFilteredData(data)\n    }, [getFilteredTickList])\n\n    const handleTableFilterChange = useCallback(({type = TableFilterParams.all, keyword = '' }: {\n      type?: TableFilterParams;\n      keyword?: string;\n    }) => {\n      let data = cloneDeep(tickList)\n      if (type === TableFilterParams.favourite) {\n        data = data.filter((o: any) => {\n          const pair = `${o.pair.coinA}-${o.pair.coinB}`\n          return favoriteMarket.includes(pair)\n        })\n      }\n      if (type === TableFilterParams.ranking) {\n        data = data.filter((o: any) => {\n          const pair = `${o.pair.coinA}-${o.pair.coinB}`\n          return swapRankingList.find(o => o.market === pair)\n        })\n      }\n      data = data.filter((o: any) => {\n        const formattedKeyword = keyword?.toLocaleLowerCase()\n        const coinA = o.pair.coinA.toLowerCase()\n        const coinB = o.pair.coinB.toLowerCase()\n        if (keyword === '') {\n          return true\n        }\n        return coinA.includes(formattedKeyword) || coinB.includes(formattedKeyword)\n      })\n      if (type === TableFilterParams.all && !keyword) {\n        data = getFilteredTickList()\n      }\n      setFilteredData(data)\n    }, [getFilteredTickList, favoriteMarket, swapRankingList, tickList])\n\n    const handleRowClick = useCallback((row: QuoteTableRawDataItem) => {\n      const { coinA, coinB } = row.pair\n      const tradePair = `${coinA}-${coinB}`\n      history && history.push({\n        pathname: `/trading/lite/${tradePair}`\n      })\n    }, [history])\n\n    const handleTabChange = useCallback((_event: any, newValue: string) => {\n      setTableTabValue(newValue)\n      handleTableFilterChange({\n        type: newValue === 'favourite' ? TableFilterParams.favourite : newValue === 'tradeRanking' ? TableFilterParams.ranking : TableFilterParams.all,\n        keyword: searchValue\n      })\n    }, [handleTableFilterChange, searchValue])\n    \n    const handleSearchChange = React.useCallback((value) => {\n      setSearchValue(value)\n      const type = tableTabValue === 'favourite' ? TableFilterParams.favourite : tableTabValue === 'tradeRanking' ? TableFilterParams.ranking : TableFilterParams.all\n      handleTableFilterChange({keyword: value, type: type})\n    }, [handleTableFilterChange, tableTabValue])\n\n    return <Box display={'flex'} flexDirection={'column'} flex={1} >\n\n        <RowStyled container >\n\n            {/* {recommendations.map((item,index)=> <Grid key={item.coinAInfo+item.coinBInfo+index} item xs={3} >\n                    <MarketBlock {...{...item, ...rest}}></MarketBlock>\n                </Grid>\n            )} */}\n            {recommendations.map((item,index)=> {\n              const market = `${item.coinAInfo.simpleName}-${item.coinBInfo.simpleName}`\n              const chartData = candlestickList.find(o => o.market === market)?.data.sort((a: any, b: any) => a.timeStamp - b.timeStamp)\n              return (\n                <Grid key={index} item xs={3} onClick={() => {\n                  history && history.push({\n                    pathname: `/trading/lite/${market}`\n                  })\n                }}>\n                    <MarketBlock {...{...item, chartData: chartData ? chartData : [], ...rest}}></MarketBlock>\n                </Grid>\n              )\n            } \n            )}\n\n        </RowStyled>\n        <TableWrapStyled container marginY={3}  paddingBottom={2} flex={1}>\n            <Grid item xs={12}>\n                <TabsWrapperStyled>\n                  <Tabs\n                      value={tableTabValue}\n                      onChange={handleTabChange}\n                      aria-label=\"disabled tabs example\"\n                  >\n                      <Tab label={t('labelQuotePageFavourite')} value=\"favourite\"/>\n                      <Tab label={t('labelAll')} value=\"all\"/>\n                      <Tab label={t('labelQuotePageTradeRanking')} value=\"tradeRanking\"/>\n                  </Tabs>\n                  <SearchWrapperStyled>\n                    <InputSearch value={searchValue} onChange={handleSearchChange} />\n                  </SearchWrapperStyled>\n                </TabsWrapperStyled>\n                <Divider />\n                <QuoteTable /* onVisibleRowsChange={onVisibleRowsChange} */ \n                  onRowClick={(index, row, col) => handleRowClick(row)} \n                  rawData={filteredData}\n                  favoriteMarket={favoriteMarket}\n                  addFavoriteMarket={addMarket}\n                  removeFavoriteMarket={removeMarket}\n                  {...{ showLoading: tickList && !tickList.length, ...rest }} />\n            </Grid>\n        </TableWrapStyled>\n    </Box>\n\n\n})\n\nexport default QuotePage\n","import { useDispatch, useSelector } from 'react-redux'\nimport { FavoriteMarketStates } from './interface';\nimport { clearAll, removeMarket, addMarket, addMarkets } from './reducer';\nimport React from 'react';\n\n\nexport const useFavoriteMarket = ():  {\n    favoriteMarket: FavoriteMarketStates\n    clearAll:()=>void,\n    removeMarket:(pair:string)=>void,\n    addMarket:(pair:string)=>void,\n    addMarkets:(pair:string[])=>void,\n} => {\n    const favoriteMarket: FavoriteMarketStates = useSelector((state: any) => state.localStore.favoriteMarket)\n    const dispatch = useDispatch();\n    return {\n        favoriteMarket: favoriteMarket ,\n        clearAll: React.useCallback(() => dispatch(clearAll(undefined)), [dispatch]),\n        removeMarket: React.useCallback((pair) => dispatch(removeMarket(pair)), [dispatch]),\n        addMarket: React.useCallback((pair) => dispatch(addMarket(pair)), [dispatch]),\n        addMarkets: React.useCallback((pairs) => dispatch(addMarkets(pairs)), [dispatch]),\n    }\n}\n","import { useDeepCompareEffect } from \"react-use\"\n\nexport function useCustomDCEffect(action: any, deps: any[] | undefined | null) {\n    useDeepCompareEffect(action, [deps || {}])\n}\n","import { useCallback, useState } from 'react'\nimport moment from 'moment'\nimport { useCustomDCEffect } from 'hooks/common/useCustomDCEffect'\n\nimport { TradingInterval, Candlestick, GetCandlestickRequest, GetDepthRequest, GetTickerRequest, dumpError400, getExistedMarket } from 'loopring-sdk'\n\nimport { ChartUnit, CoinInfo } from '@loopring-web/common-resources'\n\nimport { ChartType } from '@loopring-web/component-lib'\n\nimport { TGItemData, TGItemJSXInterface, } from '@loopring-web/component-lib'\n\nimport { IGetDepthDataParams } from '@loopring-web/component-lib'\nimport { LoopringAPI } from 'stores/apis/api'\n\nconst toggleData: TGItemData[] = [\n  {\n    value: ChartType.Trend,\n    key: ChartType.Trend,\n    label: 'label' + ChartType.Trend\n  },\n  {\n    value: ChartType.Depth,\n    key: ChartType.Depth,\n    label: 'label' + ChartType.Depth\n  },\n]\n\nexport function useBasicInfo(props: any, coinAInfo: any, coinBInfo: any, marketArray: any[], t: any) {\n  const tgItemJSXs: TGItemJSXInterface[] = toggleData.map(({ value, label, key }) => {\n    return { value, tlabel: t(label), key, JSX: <>{t(label)}</> }\n  })\n\n  // const { base, quote, market, tokens } = props\n\n  const { market, amm } = getExistedMarket(marketArray, coinAInfo?.name, coinBInfo?.name)\n\n  const [chartType, setChartType] = useState<ChartType>(ChartType.Trend)\n\n  // console.log('---useBasicInfo market:', market, ' amm:', amm, ' chartType:', chartType)\n  //\n  // const [change, setChange] = useState(0)\n  //\n  // const [volume, setVolume] = useState('')\n\n  const [chartUnit, setChartUnit] = useState(ChartUnit.D1)\n\n  const [originData, setOriginData] = useState<any>(undefined)\n\n  const handleChange = useCallback((_e: React.MouseEvent, value: any) => {\n    // Settings.setChartType(value)\n    // console.log('useBasicInfo handleChange:', value)\n    setOriginData(undefined)\n    setChartType(value === 'Trend' ? ChartType.Trend : ChartType.Depth)\n  }, [setOriginData, setChartType])\n\n  const handleChartUnitChange = (event: React.MouseEvent<HTMLElement, MouseEvent>, newValue: string) => {\n      const mappedValue = newValue === '1H' ? ChartUnit.H1 : newValue === '1W' ? ChartUnit.W1 : ChartUnit.D1\n      setChartUnit(mappedValue)\n  }\n\n  // useCustomDCEffect(async () => {\n  //\n  //   if (!exchangeApi || !market || !tokens || !quote) {\n  //     return\n  //   }\n  //\n  //   let mounted = true\n  //\n  //   try {\n  //\n  //     const request: GetTickerRequest = {\n  //       market: market.market,\n  //     }\n  //\n  //     const ticker = await exchangeApi.getTicker(request)\n  //     if (mounted) {\n  //\n  //       if (ticker.tickList[0].change) {\n  //         setChange(ticker.tickList[0].change)\n  //       }\n  //\n  //       if (ticker.tickList[0].base_token_volume) {\n  //         const baseVol = fromWEI(tokens.tokenSymbolMap, base, ticker.tickList[0].base_token_volume) as string\n  //         setVolume(baseVol)\n  //       }\n  //     }\n  //   }\n  //   catch (reason) {\n  //     dumpError400(reason, 'ChartPanel getCandlestick')\n  //   }\n  //\n  //   return () => {\n  //     mounted = false\n  //   }\n  //\n  // }, [exchangeApi, market, tokens, base,])\n\n  const tgItemJSXsPriceChart: TGItemJSXInterface[] = Object.keys(ChartUnit).reduce((pre, item) => {\n    // @ts-ignore\n    const tGItemData: TGItemData = { value: ChartUnit[item], key: ChartUnit[item], label: 'label' + ChartUnit[item] };\n    pre.push({ value: tGItemData.value, tlabel: t(tGItemData.label ? tGItemData.label : tGItemData.key), key: tGItemData.key, JSX: <>{t(tGItemData.label ? tGItemData.label : tGItemData.key)}</> })\n    return pre\n  }, [] as TGItemJSXInterface[])\n\n  useCustomDCEffect(async () => {\n  \n    let mounted = true\n  \n    if (!LoopringAPI.exchangeAPI || !market || !amm) {\n      return\n    }\n  \n    if (chartType === ChartType.Trend) {\n      const request: GetCandlestickRequest = {\n        market: amm as string,\n        interval: TradingInterval.d1,\n        limit: 30\n      }\n  \n      try {\n        const candlesticks = await LoopringAPI.exchangeAPI.getCandlestick(request)\n  \n        if (mounted) {\n          const originData = candlesticks.candlesticks.map((item: Candlestick) => {\n            return {\n              timeStamp: item.timestamp,\n              low: item.low,\n              high: item.high,\n              open: item.open,\n              close: item.close,\n              volume: item.quoteVol,\n              change: (item.close - item.open) / item.open,\n              date: moment(item.timestamp).format('MMM DD')\n            }\n          })\n          setOriginData(originData)\n        }\n      }\n      catch (reason) {\n        dumpError400(reason, 'ChartPanel getCandlestick')\n      }\n  \n    } else {\n      const request: GetDepthRequest = {\n        market,\n      }\n  \n      try {\n  \n        const { depth } = await LoopringAPI.exchangeAPI.getMixDepth(request)\n        \n        if (mounted) {\n          const originData: IGetDepthDataParams = {\n            bidsPrices: depth.bids_prices,\n            bidsAmtTotals: depth.bids_amtTotals as any,\n            asksPrices: depth.asks_prices,\n            asksAmtTotals: depth.asks_amtTotals as any,\n          }\n          setOriginData(originData)\n        }\n  \n      } catch (reason) {\n        dumpError400(reason)\n      }\n  \n    }\n  \n    return () => {\n      mounted = false\n    }\n  \n  }, [LoopringAPI.exchangeAPI, amm, market, chartType])\n\n  return {\n    // change,\n    // volume,\n    chartUnit,\n    chartType,\n    tgItemJSXs,\n    tgItemJSXsPriceChart,\n    handleChange,\n    originData,\n    handleChartUnitChange,\n  }\n}","import { TxStatus } from \"loopring-sdk\";\nimport { myLog } from \"utils/log_tools\"\nimport { Account } from \"@loopring-web/common-resources\";\n\nexport enum CONSTANTS {\n    Handler = 'handler',\n    AccountId = 'account_id',\n    Account = 'account',\n    Apikey = 'apikey',\n    Eddsakey = 'eddsakey',\n    ActiveTime = 'active_time',\n    AmmOrder = 'amm_order',\n    HardwareAddresses = 'hardware_addresses',\n    ConnectorName = 'connector_name',\n\n    DepositHash = '__loopring__.depositsHash',\n\n    WalletConnect = 'walletconnect',\n}\n\nconst SESSION_TIMEOUT_SECONDS = 600\n\nexport class UserStorage {\n\n    public static getLocalDepositHash(account: Account): { [key: string]: any } | undefined {\n        let depositsHash = window.localStorage.getItem(CONSTANTS.DepositHash);\n        if (depositsHash) {\n            depositsHash = JSON.parse(depositsHash);\n            if (depositsHash && account.accAddress && depositsHash[account.accAddress]) {\n                return depositsHash[account.accAddress]\n            }\n        }\n        return undefined\n    }\n\n    public static clearDepositHash(account: Account, value: string) {\n        // @ts-ignore\n        let depositsHash: { [key: string]: object } = window.localStorage.getItem(CONSTANTS.DepositHash);\n        depositsHash = depositsHash ? JSON.parse(depositsHash as any) : {};\n        if (depositsHash[account.accAddress] && depositsHash[account.accAddress][value]) {\n            delete depositsHash[account.accAddress][value];\n        }\n    }\n\n    public static setLocalDepositHash(account: Account, value: string, status: TxStatus): void {\n        // @ts-ignore\n        let depositsHash: { [key: string]: object } = window.localStorage.getItem(CONSTANTS.DepositHash);\n        depositsHash = depositsHash ? JSON.parse(depositsHash as any) : {};\n        depositsHash[account.accAddress] = {\n            ...depositsHash[account.accAddress],\n            [value]: status,\n        }\n    }\n\n    public static clearWalletConnect() {\n        myLog('try to clearWalletConnect....')\n        localStorage.removeItem(CONSTANTS.WalletConnect)\n    }\n\n    public static setConnectorName(connectionName: string) {\n        localStorage.setItem(CONSTANTS.ConnectorName, connectionName)\n    }\n\n    public static getConnectorName() {\n        return localStorage.getItem(CONSTANTS.ConnectorName)\n    }\n\n    public static clearConnectorName() {\n        myLog('try to clearConnectorName')\n        localStorage.removeItem(CONSTANTS.ConnectorName)\n    }\n\n    public static getHandler() {\n        const rawHandler = sessionStorage.getItem(CONSTANTS.Handler)\n        try {\n            if (rawHandler !== undefined && rawHandler !== null)\n                return parseInt(rawHandler)\n        } catch (err) {\n        }\n        return undefined\n    }\n\n    public static setHandler(handler: any) {\n        sessionStorage.setItem(CONSTANTS.Handler, handler)\n    }\n\n    public static clearHandler() {\n        sessionStorage.removeItem(CONSTANTS.Handler)\n    }\n\n    public static checkTimeout(reset: boolean = false): boolean {\n        let dateTimeStr = localStorage.getItem(CONSTANTS.ActiveTime)\n        let now = new Date().getTime()\n\n        if (dateTimeStr !== null && !reset) {\n            let tmpDt = new Date(parseInt(dateTimeStr))\n\n            if (now - tmpDt.getTime() > SESSION_TIMEOUT_SECONDS * 1000) {\n                myLog(`TIMEOUT! now:${now} dateTimeStr:${dateTimeStr} delta:${now - tmpDt.getTime()}`)\n                sessionStorage.clear()\n                localStorage.setItem(CONSTANTS.ActiveTime, now.toString())\n                return true\n            }\n        } else {\n            localStorage.setItem(CONSTANTS.ActiveTime, now.toString())\n        }\n\n        return false\n    }\n\n\n    public static getAccountId() {\n        const rawId = sessionStorage.getItem(CONSTANTS.AccountId)\n        try {\n            if (rawId)\n                return parseInt(rawId)\n        } catch (err) {\n        }\n        return undefined\n    }\n\n    public static setAccountId(accountId: number) {\n        sessionStorage.setItem(CONSTANTS.AccountId, accountId.toString())\n    }\n\n    public static getAccount() {\n        return sessionStorage.getItem(CONSTANTS.Account)\n    }\n\n    public static setAccount(account: string) {\n        sessionStorage.setItem(CONSTANTS.Account, account)\n    }\n\n    public static getApikey() {\n        return sessionStorage.getItem(CONSTANTS.Apikey)\n    }\n\n    public static setApikey(apikey: string) {\n        sessionStorage.setItem(CONSTANTS.Apikey, apikey)\n    }\n\n    public static getEddsakey() {\n        return sessionStorage.getItem(CONSTANTS.Eddsakey)\n    }\n\n    public static setEddsakey(eddsakey: string) {\n        sessionStorage.setItem(CONSTANTS.Eddsakey, eddsakey)\n    }\n\n    public static getAmmOrder(): string {\n        var orderHash = localStorage.getItem(CONSTANTS.AmmOrder)\n        return orderHash ? orderHash : ''\n    }\n\n    public static setAmmOrder(orderHash: string) {\n        localStorage.setItem(CONSTANTS.AmmOrder, orderHash)\n    }\n\n    public static clearAmmOrder() {\n        localStorage.removeItem(CONSTANTS.AmmOrder)\n    }\n\n    public static isHardwareAddress(address: string) {\n        let current = localStorage.getItem(CONSTANTS.HardwareAddresses)\n        if (current) {\n            if (current.includes(address.toLowerCase())) {\n                return true\n            }\n        }\n        return false\n    }\n\n    public static saveHardwareAddress(address: string) {\n        let current = localStorage.getItem(CONSTANTS.HardwareAddresses);\n        if (current) {\n            if (current.includes(address.toLowerCase()) !== true) {\n                let newValue = current + ',' + address.toLowerCase();\n                localStorage.setItem(CONSTANTS.HardwareAddresses, newValue);\n            }\n        } else {\n            localStorage.setItem(CONSTANTS.HardwareAddresses, address.toLowerCase());\n        }\n\n    }\n}\n","import { ChartUnit,UpColor } from '@loopring-web/common-resources'\nimport { ScaleAreaChart, ToggleButtonGroup, useSettings, TradeTitle, ChartType } from '@loopring-web/component-lib'\nimport { Box, Grid } from \"@material-ui/core\"\nimport { WithTranslation } from 'react-i18next'\nimport { useBasicInfo } from './hook'\nimport { VolToNumberWithPrecision } from 'utils/formatter_tool'\n\nconst BasicInfoPanel = ({ props, coinAInfo, coinBInfo, tradeFloat, marketArray, t, ...rest }: any & WithTranslation) => {\n\n    const {\n        // change,\n        chartType,\n        tgItemJSXs,\n        tgItemJSXsPriceChart,\n        handleChange,\n        originData,\n        chartUnit,\n        handleChartUnitChange,\n    } = useBasicInfo(props, coinAInfo, coinBInfo, marketArray, t)\n    const { upColor } = useSettings();\n    const baseToken = coinAInfo?.name\n    const quoteToken = coinBInfo?.name\n    const trendChartData = originData && !!originData.length ? originData.sort((a: any, b: any) => a.timeStamp - b.timeStamp) : []\n    const depthChartData = originData && coinAInfo && originData.asksAmtTotals ? { \n        ...originData,\n        asksAmtTotals: originData.asksAmtTotals.map((amt: string) => Number(VolToNumberWithPrecision(amt, baseToken))),\n        bidsAmtTotals: originData.bidsAmtTotals.map((amt: string) => Number(VolToNumberWithPrecision(amt, baseToken))),\n    } : []\n    return  <>\n        <Grid item xs={8}>\n            <TradeTitle {...{\n                coinAInfo, coinBInfo,\n                ...rest, t, tradeFloat\n            }}></TradeTitle>\n        </Grid>\n        <Grid item xs={4} display={'flex'} justifyContent={'flex-end'} alignItems={'flex-end'}>\n            <ToggleButtonGroup exclusive {...{ ...rest, t, tgItemJSXs, value: chartType }}\n                handleChange={handleChange} />\n        </Grid>\n\n        <Grid item xs={12} position={'relative'}>\n            <Box minHeight={256} maxHeight={256} display={'block'} style={{ height: '100%', width: '100%' }}>\n                <ScaleAreaChart \n                    type={chartType} \n                    data={chartType === ChartType.Trend ? trendChartData : depthChartData} \n                    riseColor={upColor as keyof typeof UpColor}\n                    extraInfo={quoteToken}\n                    handleMove={() => {}}\n                    showXAxis\n                />\n            </Box>\n            {/* {chartType === ChartType.Trend && (\n                <Box height={24} display={'flex'} justifyContent={'flex-end'} position={'absolute'} right={0} bottom={0}>\n                    <ToggleButtonGroup exclusive {...{\n                        ...rest, t, tgItemJSXs: tgItemJSXsPriceChart,\n                        value: chartUnit, size: 'small'\n                    }}\n                        handleChange={handleChartUnitChange} />\n                </Box>\n            )} */}\n        </Grid> \n        {/* <Grid item xs={12} height={24} display={'flex'} justifyContent={'flex-end'}>\n            <ToggleButtonGroup exclusive {...{\n                ...rest, t, tgItemJSXs: tgItemJSXsPriceChart,\n                value: chartUnit, size: 'small'\n            }}\n                handleChange={handleChartUnitChange} />\n        </Grid> */}\n    </>\n\n};\n\nexport default BasicInfoPanel\n","\n\nimport { RefAttributes, useState } from 'react'\n\nimport Tabs from '@material-ui/core/Tabs'\nimport Tab from '@material-ui/core/Tab'\nimport Checkbox from '@material-ui/core/Checkbox'\nimport styled from '@emotion/styled'\n\nimport { FormControlLabel, TradeTable, } from '@loopring-web/component-lib'\nimport { withTranslation, WithTranslation } from 'react-i18next';\nimport { CheckBoxIcon, CheckedIcon } from '@loopring-web/common-resources'\nimport { RouteComponentProps, withRouter } from 'react-router'\nimport { RawDataTradeItem, BasicHeaderItem, HeadMenuType } from '@loopring-web/component-lib'\nimport { TableWrapStyled } from '../../../styled';\n\n\nconst applyProps = (index: number) => {\n    return {\n        id: `simple-tab-${index}`,\n        'aria-controls': `simple-tabpanel-${index}`,\n    }\n}\nconst StyledTabsWrapper = styled.div`\n          position: relative;\n          width: 100%;\n          margin-top: ${({theme}) => theme.unit * 4}px;\n        `\n\nconst StyledFormControlLabel = styled(FormControlLabel)`\n          position: absolute;\n          top: 0;\n          right: ${({theme}) => theme.unit}px;\n          margin: ${({theme}) => theme.unit}px 0 0 0;\n        `\n\nconst TradePanel = withTranslation('common')(\n   // withRouter(\n    (\n        {tradeArray,  myTradeArray, t}:\n            { tradeArray: RawDataTradeItem[], myTradeArray: RawDataTradeItem[] } & WithTranslation & RouteComponentProps) => {\n        // const [isAllTrade, setIsAllTrade] = useState(false)\n        const [value, setValue] = useState(1)\n        const handleChange = (event: any, newValue: any) => {\n            setValue(newValue)\n        }\n\n        // const handleCheckboxChange = () => {\n        //     setIsAllTrade((flag: boolean) => !flag)\n        // }\n\n        return (\n            <StyledTabsWrapper>\n                {/* <StyledFormControlLabel\n                    control={<Checkbox checked={isAllTrade} size={'small'} checkedIcon={<CheckedIcon/>}\n                                       icon={<CheckBoxIcon/>} color={'default'} onChange={handleCheckboxChange}/>}\n                    label={t('labelTradePanelHideOtherPairs')}/> */}\n\n                <Tabs value={value}\n                      onChange={handleChange}\n                      aria-label=\"tabs switch\">\n                    <Tab label={t('labelMyTrade')} {...applyProps(0)} />\n                    <Tab label={t('labelRecent')}   {...applyProps(1)} />\n                </Tabs>\n\n                <TableWrapStyled marginY={2}  paddingBottom={2} flex={1}>\n                    {value === 0 ?  <TradeTable rawData={myTradeArray} /> : <TradeTable rawData={tradeArray}/> }\n                </TableWrapStyled>\n\n            </StyledTabsWrapper>\n        )\n    }\n    ) as  (props: { tradeArray: RawDataTradeItem[], myTradeArray: RawDataTradeItem[] }) => JSX.Element;\n//)\n\nexport default TradePanel\n\n","import { useRouteMatch } from 'react-router';\nimport {\n    AccountState,\n    AccountStatus,\n    CoinInfo,\n    CustomError,\n    ErrorMap,\n    fnType,\n    globalSetup,\n    IBData,\n    SagaStatus,\n    TradeCalcData,\n    TradeFloat,\n    WalletMap\n} from '@loopring-web/common-resources';\nimport React, { useCallback, useEffect, useState } from 'react';\nimport { LoopringAPI } from '../../stores/apis/api';\nimport { useTokenMap } from '../../stores/token';\nimport * as sdk from 'loopring-sdk';\nimport {\n    AmmPoolInfoV3,\n    AmmPoolSnapshot,\n    DepthData,\n    dumpError400,\n    getExistedMarket,\n    GetMinimumTokenAmtRequest,\n    GetNextStorageIdRequest,\n    LoopringMap,\n    OrderType,\n    SubmitOrderRequestV3,\n    VALID_UNTIL\n} from 'loopring-sdk';\nimport { useAmmMap } from '../../stores/Amm/AmmMap';\nimport { useWalletLayer2 } from '../../stores/walletLayer2';\nimport { RawDataTradeItem, SwapData, SwapTradeData, SwapType, TradeBtnStatus } from '@loopring-web/component-lib';\nimport { useAccount } from '../../stores/account/hook';\nimport { useCustomDCEffect } from '../../hooks/common/useCustomDCEffect';\nimport {\n    accountStaticCallBack,\n    bntLabel,\n    btnClickMap,\n    coinPairInit,\n    getUserTrades,\n    makeCache,\n    makeMarketArray,\n    makeTickView,\n    makeWalletLayer2,\n    pairDetailBlock,\n    pairDetailDone\n} from '../../hooks/help';\nimport * as _ from 'lodash'\nimport store from 'stores';\nimport { deepClone } from '../../utils/obj_tools';\nimport { myLog } from 'utils/log_tools';\nimport { useTranslation } from 'react-i18next';\nimport { REFRESH_RATE_SLOW } from 'defs/common_defs';\n\nexport const useSwapBtnStatusCheck = () => {\n\n    const [btnStatus, setBtnStatus] = useState(TradeBtnStatus.DISABLED)\n\n    const [isSwapLoading, setIsSwapLoading] = useState(false)\n\n    const [isValidAmt, setIsValidAmt] = useState<boolean>(false)\n\n    const { account } = useAccount()\n\n    useEffect(() => {\n\n        if (account.readyState !== AccountStatus.ACTIVATED) {\n            setBtnStatus(TradeBtnStatus.DISABLED)\n        } else {\n\n            if (isSwapLoading) {\n                setBtnStatus(TradeBtnStatus.LOADING)\n            } else {\n                if (isValidAmt) {\n                    setBtnStatus(TradeBtnStatus.AVAILABLE)\n                } else {\n                    setBtnStatus(TradeBtnStatus.DISABLED)\n                }\n            }\n\n        }\n\n    }, [isSwapLoading, isValidAmt, account.readyState])\n\n    return {\n        btnStatus,\n        setIsSwapLoading,\n        setIsValidAmt,\n    }\n\n}\n\nexport const useSwapPage = <C extends { [key: string]: any }>() => {\n    /*** api prepare ***/\n    const { t } = useTranslation('common')\n\n    const [swapToastOpen, setSwapToastOpen] = useState<boolean>(false)\n\n    const [swapAlertText, setSwapAlertText] = useState<string>()\n    const wait = globalSetup.wait;\n    const match: any = useRouteMatch(\":symbol\")\n    const { coinMap, tokenMap, marketArray, marketCoins, marketMap, } = useTokenMap()\n    const { ammMap } = useAmmMap();\n\n    const { account, status: accountStatus } = useAccount()\n    const { delayAndUpdateWalletLayer2, walletLayer2, status: walletLayer2Status } = useWalletLayer2();\n\n    // const walletLayer2State = useWalletLayer2()\n    const [tradeData, setTradeData] = React.useState<SwapTradeData<IBData<C>> | undefined>(undefined);\n    const [tradeCalcData, setTradeCalcData] = React.useState<Partial<TradeCalcData<C>>>({});\n    const [tradeArray, setTradeArray] = React.useState<RawDataTradeItem[]>([]);\n    const [myTradeArray, setMyTradeArray] = React.useState<RawDataTradeItem[]>([]);\n    const [tradeFloat, setTradeFloat] = React.useState<TradeFloat | undefined>(undefined);\n    const [pair, setPair] = React.useState<{ coinAInfo: CoinInfo<C> | undefined, coinBInfo: CoinInfo<C> | undefined }>({\n        coinAInfo: undefined,\n        coinBInfo: undefined,\n    });\n\n    const [ammPoolSnapshot, setAmmPoolSnapshot] = React.useState<AmmPoolSnapshot | undefined>(undefined);\n\n    const [swapBtnI18nKey, setSwapBtnI18nKey] = React.useState<string | undefined>(undefined);\n\n    const [output, setOutput] = useState<any>()\n\n    const [takerRate, setTakerRate] = useState<string>('0')\n\n    const [feeBips, setFeeBips] = useState<string>('0')\n\n    const [baseMinAmt, setBaseMinAmt] = useState<string>()\n\n    const [quoteMinAmt, setQuoteMinAmt] = useState<string>()\n\n    // --- btn status check\n    const {\n        btnStatus,\n        setIsSwapLoading,\n        setIsValidAmt,\n    } = useSwapBtnStatusCheck()\n    // --- end of btn status check.\n\n    useCustomDCEffect(async () => {\n\n        const base = tradeData?.sell.belong\n        const quote = tradeData?.buy.belong\n\n        if (!LoopringAPI.userAPI || !base || !quote || !ammMap || !marketArray\n            || account.readyState !== AccountStatus.ACTIVATED || !account.accountId || !account.apiKey) {\n            return\n        }\n\n        const {\n            amm\n        } = getExistedMarket(marketArray, base, quote)\n\n        if (!amm) {\n            return\n        }\n\n        const ammInfo = ammMap[amm]\n\n        if (!ammInfo) {\n            return\n        }\n\n        const feeBips = ammInfo.__rawConfig__.feeBips\n\n        const req: GetMinimumTokenAmtRequest = {\n            accountId: account?.accountId,\n            market: amm,\n        }\n\n        const { amountMap } = await LoopringAPI.userAPI.getMinimumTokenAmt(req, account.apiKey)\n\n        const baseMinAmtInfo = amountMap[base]\n        const quoteMinAmtInfo = amountMap[quote]\n\n        if (!baseMinAmtInfo || !quoteMinAmtInfo) {\n            return\n        }\n\n        const takerRate = quoteMinAmtInfo.userOrderInfo.takerRate\n\n        const totalFee = sdk.toBig(feeBips).plus(sdk.toBig(takerRate)).toString()\n\n        setBaseMinAmt(baseMinAmtInfo.userOrderInfo.minAmount)\n        setQuoteMinAmt(quoteMinAmtInfo.userOrderInfo.minAmount)\n\n        myLog('---------------------------- amountMap:', amountMap)\n\n        myLog('totalFee:', totalFee)\n        myLog('takerRate:', takerRate)\n\n        setFeeBips(totalFee)\n        setTakerRate(takerRate.toString())\n\n        setTradeCalcData({ ...tradeCalcData, fee: totalFee } as TradeCalcData<C>)\n\n    }, [tradeData?.sell.belong, tradeData?.buy.belong, marketArray, ammMap,\n    account.readyState, account.apiKey, account.accountId])\n\n    //HIGH: get Router info\n    // const symbol = match?.params.symbol ?? undefined;\n    React.useEffect(() => {\n        const symbol = match?.params.symbol ?? undefined;\n        resetSwap(symbol, undefined, undefined, undefined);\n        // const label: string | undefined = accountStaticCallBack(bntLabel)\n        // setSwapBtnI18nKey(label);\n    }, []);\n\n    //HIGH: effect by wallet state update\n    React.useEffect(() => {\n        if (walletLayer2Status === SagaStatus.UNSET) {\n            const { walletMap } = makeWalletLayer2();\n            // if (tradeCalcData) {\n            setTradeCalcData({ ...tradeCalcData, fee: feeBips, walletMap } as TradeCalcData<C>);\n            setTradeData({\n                sell: {\n                    belong: tradeCalcData.sellCoinInfoMap ? tradeCalcData.sellCoinInfoMap[tradeCalcData.coinSell]?.simpleName : undefined,\n                    balance: walletMap ? walletMap[tradeCalcData.coinSell as string]?.count : 0\n                },\n                // @ts-ignore\n                buy: {\n                    belong: tradeCalcData.sellCoinInfoMap ? tradeCalcData.sellCoinInfoMap[tradeCalcData.coinBuy]?.simpleName : undefined,\n                    balance: walletMap ? walletMap[tradeCalcData.coinBuy as string]?.count : 0\n                },\n            } as SwapTradeData<IBData<C>>)\n            const {\n                market\n            } = getExistedMarket(marketArray, tradeCalcData.coinSell as string, tradeCalcData.coinBuy as string);\n            getUserTrades(market).then((marketTrades) => {\n                let _myTradeArray = makeMarketArray(market, marketTrades) as RawDataTradeItem[]\n                setMyTradeArray(_myTradeArray ? _myTradeArray : [])\n            })\n            // }\n        }\n    }, [walletLayer2Status])\n\n    React.useEffect(() => {\n        const label: string | undefined = accountStaticCallBack(bntLabel)\n        setSwapBtnI18nKey(label);\n    }, [accountStatus]);\n\n    const swapCalculatorCallback = useCallback(async ({ sell, buy, slippage, ...rest }: any) => {\n\n        const { exchangeInfo } = store.getState().system\n        setIsSwapLoading(true);\n        if (!LoopringAPI.userAPI || !tokenMap || !exchangeInfo || !output\n            || account.readyState !== AccountStatus.ACTIVATED) {\n\n            setSwapAlertText(t('labelSwapFailed'))\n            setSwapToastOpen(true)\n\n            setIsSwapLoading(false)\n\n            return\n        }\n\n        const baseToken = tokenMap[sell.belong as string]\n        const quoteToken = tokenMap[buy.belong as string]\n\n        const request: GetNextStorageIdRequest = {\n            accountId: account.accountId,\n            sellTokenId: baseToken.tokenId\n        }\n\n        const storageId = await LoopringAPI.userAPI.getNextStorageId(request, account.apiKey)\n\n        try {\n\n            const request: SubmitOrderRequestV3 = {\n                exchange: exchangeInfo.exchangeAddress,\n                accountId: account.accountId,\n                storageId: storageId.orderId,\n                sellToken: {\n                    tokenId: baseToken.tokenId,\n                    volume: output.amountS\n                },\n                buyToken: {\n                    tokenId: quoteToken.tokenId,\n                    volume: output.amountBOutSlip.minReceived\n                },\n                allOrNone: false,\n                validUntil: VALID_UNTIL,\n                maxFeeBips: parseInt(feeBips),\n                fillAmountBOrS: false, // amm only false\n                orderType: OrderType.ClassAmm,\n                eddsaSignature: '',\n            }\n\n            myLog(request)\n\n            const response = await LoopringAPI.userAPI.submitOrder(request, account.eddsaKey.sk, account.apiKey)\n\n            myLog(response)\n\n            await delayAndUpdateWalletLayer2()\n\n            setTradeData({\n                ...tradeData,\n                ...{\n                    sell: { ...tradeData?.sell, tradeValue: 0 },\n                    buy: { ...tradeData?.buy, tradeValue: 0 },\n                }\n            } as SwapTradeData<IBData<C>>)\n\n            setSwapAlertText(t('labelSwapSuccess'))\n            setSwapToastOpen(true)\n\n            setIsSwapLoading(false)\n\n        } catch (reason) {\n            setIsSwapLoading(false);\n            dumpError400(reason)\n\n            setSwapAlertText(t('labelSwapFailed'))\n            setSwapToastOpen(true)\n\n            setIsSwapLoading(false)\n        }\n\n        setOutput(undefined)\n\n        if (rest.__cache__) {\n            makeCache(rest.__cache__)\n        }\n\n    }, [tradeData, output, tokenMap])\n\n    const swapBtnClickArray: typeof btnClickMap = Object.assign(deepClone(btnClickMap), {\n        [fnType.ACTIVATED]: [swapCalculatorCallback]\n    })\n\n    const onSwapClick = React.useCallback(({ sell, buy, slippage, ...rest }: SwapTradeData<IBData<C>>) => {\n        accountStaticCallBack(swapBtnClickArray, [{ sell, buy, slippage, ...rest }])\n    }, [swapBtnClickArray])\n\n    const handleSwapPanelEvent = async (swapData: SwapData<SwapTradeData<IBData<C>>>, switchType: any): Promise<void> => {\n\n        const { tradeData } = swapData\n        return new Promise((resolve) => {\n            switch (switchType) {\n                case SwapType.SEll_CLICK:\n                    break\n                case SwapType.BUY_CLICK:\n                    break\n                case SwapType.SELL_SELECTED:\n                    resetSwap(`${tradeData.sell.belong}-${tradeData.buy.belong}`, 'sell', tradeData, ammPoolSnapshot)\n                    break\n                case SwapType.BUY_SELECTED:\n                    resetSwap(`${tradeData.sell.belong}-${tradeData.buy.belong}`, 'buy', tradeData, ammPoolSnapshot)\n                    break\n                case SwapType.EXCHANGE_CLICK:\n                    resetSwap(`${tradeData.sell.belong}-${tradeData.buy.belong}`, undefined, undefined, ammPoolSnapshot)\n                    break\n                default:\n                    break\n            }\n\n            resolve(undefined)\n        })\n\n    }\n\n    const [depth, setDepth] = useState<DepthData>()\n\n    useEffect(() => {\n\n        const updateDepth = async () => {\n            if (!pair || !LoopringAPI.exchangeAPI || !pair.coinAInfo) {\n                return\n            }\n            const market = `${pair.coinAInfo?.simpleName}-${pair.coinBInfo?.simpleName}`\n            const { depth } = await LoopringAPI.exchangeAPI?.getMixDepth({ market })\n            setDepth(depth)\n        }\n\n        updateDepth()\n\n        const handler = setInterval(() => {\n            updateDepth()\n        }, REFRESH_RATE_SLOW)\n\n        return () => {\n            if (handler) {\n                clearInterval(handler)\n            }\n        }\n    }, [pair])\n\n    const calculateTradeData = async (type: 'sell' | 'buy', _tradeData: SwapTradeData<IBData<C>>, ammPoolSnapshot: AmmPoolSnapshot | undefined)\n        : Promise<{ _tradeCalcData: TradeCalcData<C>, _tradeData: SwapTradeData<IBData<C>> }> => {\n\n        const market = `${pair.coinAInfo?.simpleName}-${pair.coinBInfo?.simpleName}`\n        if (!marketArray || !tokenMap || !marketMap || !depth || !ammMap || !tradeCalcData) {\n            let _tradeCalcData = { ...tradeCalcData } as TradeCalcData<C>\n            return { _tradeData, _tradeCalcData }\n        }\n\n        const isAtoB = type === 'sell'\n        let input: any = (isAtoB ? _tradeData.sell.tradeValue : _tradeData.buy.tradeValue)\n\n        if (input) {\n            input = (input.toString() as string).trim()\n            if (input === '0.') {\n                input = '0'\n            }\n        } else {\n            input = '0'\n        }\n\n        const base = _tradeData.sell.belong as string\n        const quote = _tradeData.buy.belong as string\n\n        let slippage = _tradeData.slippage\n\n        if (slippage === undefined) {\n            slippage = 0.5\n        }\n\n        slippage = sdk.toBig(slippage).times(100).toString()\n\n        const ammMapRaw = { ['AMM-' + market]: ammMap['AMM-' + market].__rawConfig__ } as LoopringMap<AmmPoolInfoV3>\n\n        myLog(input)\n\n        const output = sdk.getOutputAmount(input, base, quote, isAtoB, marketArray, tokenMap,\n            marketMap, depth, ammMapRaw, ammPoolSnapshot, takerRate, slippage)\n\n        setOutput(output)\n\n        tradeCalcData.priceImpact = output?.priceImpact as string\n        tradeCalcData.minimumReceived = output?.amountBOutSlip.minReceivedVal as string\n\n        if (isAtoB) {\n            _tradeData.buy.tradeValue = output?.output ? parseFloat(output?.output) : 0\n        } else {\n            _tradeData.sell.tradeValue = output?.output ? parseFloat(output?.output) : 0\n        }\n\n        //TODO: renew  tradeCalcData\n        let _tradeCalcData = { ...tradeCalcData } as TradeCalcData<C>;\n\n        return { _tradeData, _tradeCalcData }\n\n    }\n\n    // check output and min order amt\n    useCustomDCEffect(() => {\n\n        const validAmt = (output?.amountBOut && quoteMinAmt\n            && sdk.toBig(output?.amountBOut).gte(sdk.toBig(quoteMinAmt))) ? true : false\n\n        setIsValidAmt(validAmt)\n\n        myLog(output, quoteMinAmt)\n\n        myLog('.........validAmt:', validAmt)\n\n    }, [output, quoteMinAmt])\n\n    const throttleSetValue = React.useCallback(_.debounce(async (type, _tradeData, _ammPoolSnapshot) => {\n\n        const { _tradeData: td, _tradeCalcData } = await calculateTradeData(type, _tradeData, _ammPoolSnapshot)//.then(()=>{\n        setTradeData(td)\n        setTradeCalcData({ ..._tradeCalcData, fee: feeBips })\n\n    }, wait * 2), [setTradeData, setTradeCalcData, calculateTradeData, takerRate]);\n\n    const resetSwap = async (coinKey: any, type: 'sell' | 'buy' | undefined, _tradeData: SwapTradeData<IBData<C>> | undefined, _ammPoolSnapshot: AmmPoolSnapshot | undefined) => {\n        if (tradeCalcData\n            && coinKey === `${tradeCalcData.coinSell}-${tradeCalcData.coinBuy}`\n            && _tradeData\n            && type\n            && (!tradeData || (tradeData[type].tradeValue !== _tradeData[type].tradeValue))) {\n\n            throttleSetValue(type, _tradeData, _ammPoolSnapshot)\n\n        } else {\n            let _tradeFloat: Partial<TradeFloat> = {}\n            let _tradeArray: Array<Partial<RawDataTradeItem>> | undefined = undefined;\n            let _tradeCalcData: Partial<TradeCalcData<C>> = coinPairInit({\n                coinKey,\n                _tradeCalcData: {},\n                tokenMap,\n                coinMap\n            })\n            let {\n                amm,\n                market\n            } = getExistedMarket(marketArray, _tradeCalcData.coinSell as string, _tradeCalcData.coinBuy as string);\n            const [, coinA, coinB] = market.match(/(\\w+)-(\\w+)/i)\n\n            setTradeCalcData({ ...tradeCalcData, fee: feeBips, ..._tradeCalcData } as TradeCalcData<C>);\n            if (coinMap) {\n                setPair({\n                    coinAInfo: coinMap[coinA],\n                    coinBInfo: coinMap[coinB],\n                })\n            }\n            if (walletLayer2) {\n                const { walletMap } = makeWalletLayer2();\n                _tradeCalcData.walletMap = walletMap as WalletMap<any>;\n                getUserTrades(market).then((marketTrades) => {\n                    let _myTradeArray = makeMarketArray(market, marketTrades) as RawDataTradeItem[]\n                    setMyTradeArray(_myTradeArray ? _myTradeArray : [])\n                })\n            }\n            let apiList = [];\n            //TODO wallet saga done\n            if (marketArray && amm && market && ammMap) {\n                // let pairPromise =  usePairTitleBlock({market})\n                apiList = [\n                    LoopringAPI.exchangeAPI?.getMarketTrades({ market }),\n                    pairDetailBlock({ coinKey: market, ammKey: amm, ammMap })\n                ];\n                //HiGH: this need add websocket to update infr ticker ammpoolsbalace\n                // @ts-ignore\n                Promise.all([...apiList]).then(\n                    ([{ marketTrades }, { ammPoolsBalance, tickMap }]: any[]) => {\n                        setAmmPoolSnapshot(ammPoolsBalance)\n                        if (tokenMap) {\n                            let { _tradeCalcData: _td } = pairDetailDone({\n                                coinKey: `${_tradeCalcData.coinSell}-${_tradeCalcData.coinBuy}`,\n                                market,\n                                ammPoolsBalance,\n                                tickerData: tickMap[market] ? tickMap[market] : {},\n                                tokenMap,\n                                _tradeCalcData,\n                                coinMap,\n                                marketCoins,\n                                fee: feeBips,\n                            })\n                            _tradeCalcData = _td;\n                            _tradeFloat = makeTickView(tickMap[market] ? tickMap[market] : {})\n                            _tradeArray = makeMarketArray(market, marketTrades)\n                            // @ts-ignore\n                            setTradeCalcData(_tradeCalcData as TradeCalcData<C>);\n                            // @ts-ignore\n                            setTradeFloat(_tradeFloat);\n                            setTradeArray(_tradeArray as RawDataTradeItem[])\n                            // setPair(_pair)\n                            setTradeData({\n                                sell: {\n                                    belong: _tradeCalcData.sellCoinInfoMap ? _tradeCalcData.sellCoinInfoMap[_tradeCalcData.coinSell]?.simpleName : undefined,\n                                    balance: _tradeCalcData.walletMap ? _tradeCalcData.walletMap[_tradeCalcData.coinSell]?.count : 0\n                                },\n                                // @ts-ignore\n                                buy: {\n                                    belong: _tradeCalcData.sellCoinInfoMap ? _tradeCalcData.sellCoinInfoMap[_tradeCalcData.coinBuy]?.simpleName : undefined,\n                                    balance: _tradeCalcData.walletMap ? _tradeCalcData.walletMap[_tradeCalcData.coinBuy]?.count : 0\n                                },\n                            } as SwapTradeData<IBData<C>>)\n                        }\n                    }).catch((error) => {\n                        throw new CustomError({ ...ErrorMap.TRADE_LITE_SET_PAIR_ERROR, options: error })\n                        //TODO solve error\n                    })\n\n            }\n        }\n\n    }\n\n    return {\n        swapToastOpen,\n        setSwapToastOpen,\n        swapAlertText,\n\n        tradeCalcData,\n        tradeFloat,\n        tradeArray,\n        myTradeArray,\n        btnStatus,\n        tradeData,\n        pair,\n        marketArray,\n        onSwapClick,\n        swapBtnI18nKey,\n        handleSwapPanelEvent\n    }\n\n}","import { Box, Grid, } from '@material-ui/core'\nimport { WithTranslation, withTranslation } from 'react-i18next'\nimport { useLocation } from 'react-router-dom'\nimport BasicInfoPanel from './panel/BasicInfoPanel'\nimport TradePanel from './panel/TradePanel'\nimport styled from 'styled-components'\nimport { useSwapPage } from './hook';\nimport { SwapPanel, Toast } from '@loopring-web/component-lib'\nimport { TradeBtnStatus } from '@loopring-web/component-lib'\nimport { useTokenMap } from '../../stores/token';\nimport { TOAST_TIME } from 'defs/common_defs'\n\nconst FixedStyle = styled(Box)`\n  @media only screen and (min-height: 780px ) and (min-width: 1024px) {\n    position: fixed;\n  }\n`\n\nexport const SwapPage = withTranslation('common')(({...rest}: WithTranslation) => {\n\n    const {\n        tradeCalcData,\n        tradeData,\n        tradeFloat,\n        tradeArray,\n        myTradeArray,\n        marketArray,\n        handleSwapPanelEvent,\n        onSwapClick,\n        pair,\n        swapBtnI18nKey,\n        btnStatus,\n        swapToastOpen,\n        setSwapToastOpen,\n        swapAlertText,\n\n    } = useSwapPage();\n\n    const { coinMap } = useTokenMap()\n    const { pathname } = useLocation()\n    const pairNameList = pathname ? pathname.split('/')[pathname.split('/').length - 1].split('-') : ''\n    const coinA = Array.isArray(pairNameList) ? pairNameList[0] : ''\n    const coinB = Array.isArray(pairNameList) ? pairNameList[1] : ''\n    const customPair = {\n        coinAInfo: coinMap ? coinMap[coinA] : '',\n        coinBInfo: coinMap ? coinMap[coinB] : '',\n    }\n    const renderPair = customPair.coinAInfo ? customPair : pair\n\n    return <>\n\n        <Toast alertText={swapAlertText as string} open={swapToastOpen} \n            autoHideDuration={TOAST_TIME} setOpen={setSwapToastOpen}/>\n\n        <Grid container marginRight={3} alignContent={'flex-start'}>\n            <BasicInfoPanel {...{\n                ...rest,\n                ...renderPair, marketArray,\n                tradeFloat, tradeArray\n            }} />\n            <TradePanel tradeArray={tradeArray} myTradeArray={myTradeArray}/>\n        </Grid>\n\n        <Box display={'flex'} style={{minWidth: 'var(--swap-box-width)'}}>\n            <FixedStyle>\n                <SwapPanel tradeData={tradeData as any}\n                           tradeCalcData={tradeCalcData as any}\n                           onSwapClick={onSwapClick}\n                           swapBtnI18nKey={swapBtnI18nKey}\n                           swapBtnStatus={btnStatus}\n                    // handleError={}\n                           {...{handleSwapPanelEvent, ...rest}}\n                />\n            </FixedStyle>\n\n        </Box>\n\n    </>\n});\n\n\n// SwapPage\n","import React from 'react'\n\nexport const DevWrapper = ({ children }: { children: React.ReactNode }) => {\n\n  return (\n    <React.Fragment>\n      {\n        process.env.NODE_ENV !== 'production' ? (\n          <>\n          {children}\n          </>\n        ) : null\n      }\n    </React.Fragment>\n  )\n\n}\n\n","import { SHORT_INTERVAL } from 'defs/common_defs'\nimport { debounce } from 'lodash'\nimport React, { useEffect } from 'react'\nimport { UserStorage } from 'storage'\n\nenum WindowEvent {\n  Click = 'click',\n  Scroll = 'scroll',\n  Mouseover = 'mouseover',\n}\n\nconst events = [WindowEvent.Click, WindowEvent.Scroll]\n\nconst forceReset = debounce(() => { UserStorage.checkTimeout(true) }, SHORT_INTERVAL)\n\nexport const GlobalProvider = ({ children }: { children: React.ReactNode }) => {\n\n  useEffect(() => {\n\n    events.forEach((event: string) => {\n      document.addEventListener(event, forceReset)\n    })\n\n    return () => {\n\n      events.forEach((event: string) => {\n        document.removeEventListener(event, forceReset)\n      })\n    }\n\n  }, [])\n\n  return (\n    <React.Fragment>\n      { children}\n    </React.Fragment>\n  )\n\n}\n","import React from 'react'\nimport { TransactionTable } from '@loopring-web/component-lib'\nimport { WithTranslation, withTranslation } from 'react-i18next'\nimport { StylePaper } from '../../styled'\nimport { useGetTxs } from './hooks';\n\nconst TxPanel = withTranslation('common')((rest:WithTranslation<'common'>) => {\n    const { t } = rest\n    const container = React.useRef(null);\n    const [pageSize, setPageSize] = React.useState(10);\n\n    const { txs: txTableData, isLoading } = useGetTxs()\n\n    React.useEffect(() => {\n        // @ts-ignore\n        let height = container?.current?.offsetHeight;\n        if (height) {\n            setPageSize(Math.floor((height - 120) / 44) - 2);\n        }\n    }, [container, pageSize]);\n\n    return (\n        <StylePaper ref={container}>\n            <div className=\"title\">{t('labelTxnPageTitle')}</div>\n            <div className=\"tableWrapper\">\n                <TransactionTable {...{\n                    rawData: txTableData,\n                    pagination: {\n                        pageSize: pageSize\n                    },\n                    showFilter: true,\n                    showLoading: isLoading,\n                    ...rest\n                }} />\n            </div>\n        </StylePaper>\n    )\n})\n\nexport default TxPanel\n","import { useState, useCallback } from 'react'\n// import { useAmmpoolAPI, useUserAPI } from \"hooks/exchange/useApi\"\nimport { useCustomDCEffect } from 'hooks/common/useCustomDCEffect'\nimport { useAccount } from 'stores/account/hook'\nimport { TransactionStatus, RawDataTransactionItem } from '@loopring-web/component-lib'\nimport { volumeToCount, volumeToCountAsBigNumber } from 'hooks/help'\nimport { LoopringAPI } from 'stores/apis/api'\n\nimport { TransactionTradeTypes } from '@loopring-web/component-lib';\n\nexport function useGetTxs() {\n\n    const { account: {accountId, apiKey} } = useAccount()\n\n    // const userApi = useUserAPI()\n\n    const [txs, setTxs] = useState<RawDataTransactionItem[]>([])\n    const [isLoading, setIsLoading] = useState(true)\n\n    const getTxnStatus = (status: string) => \n        status === ''\n        ? TransactionStatus.processing :\n        status === 'processed'\n            ? TransactionStatus.processed\n            : status === 'processing'\n                ? TransactionStatus.processing \n                : status === 'received' \n                    ? TransactionStatus.received \n                    : TransactionStatus.failed\n\n    const getUserTxnList = useCallback(async () => {\n        if (LoopringAPI && LoopringAPI.userAPI && accountId && apiKey) {\n            const userTxnList = await Promise.all([\n                LoopringAPI.userAPI.getUserTranferList({\n                    accountId,\n                }, apiKey),\n                LoopringAPI.userAPI.getUserDepositHistory({\n                    accountId,\n                }, apiKey),\n                LoopringAPI.userAPI.getUserOnchainWithdrawalHistory({\n                    accountId,\n                }, apiKey)\n            ])\n            const userTransferMapped = userTxnList[0].userTransfers?.map(o => ({\n                side: TransactionTradeTypes.transfer,\n                // token: o.symbol,\n                // from: o.senderAddress,\n                // to: o.receiverAddress,\n                amount: {\n                    unit: o.symbol || '',\n                    value: Number(volumeToCount(o.symbol, o.amount))\n                },\n                fee: {\n                    unit: o.feeTokenSymbol || '',\n                    value: Number(volumeToCountAsBigNumber(o.feeTokenSymbol, o.feeAmount || 0))\n                },\n                memo: o.memo || '',\n                time: o.timestamp,\n                txnHash: o.hash,\n                status: getTxnStatus(o.status),\n                // tradeType: TransactionTradeTypes.transfer\n            }))\n            const userDepositMapped = userTxnList[1].userDepositHistory?.map(o => ({\n                side: TransactionTradeTypes.deposit,\n                symbol: o.symbol,\n                // token: o.symbol,\n                // from: o.hash,\n                // to: 'My Loopring',\n                // amount: Number(volumeToCount(o.symbol, o.amount)),\n                amount: {\n                    unit: o.symbol || '',\n                    value: Number(volumeToCount(o.symbol, o.amount))\n                },\n                fee: {\n                    unit: '',\n                    value: 0\n                },\n                memo: '',\n                time: o.timestamp,\n                txnHash: o.txHash,\n                status: getTxnStatus(o.status),\n                // tradeType: TransactionTradeTypes.deposit\n            }))\n            const userWithdrawMapped = userTxnList[2].userOnchainWithdrawalHistory?.map((o => ({\n                side: TransactionTradeTypes.withdraw,\n                // token: o.symbol,\n                // from: 'My Loopring',\n                // to: o.distributeHash,\n                amount: {\n                    unit: o.symbol || '',\n                    value: Number(volumeToCount(o.symbol, o.amount))\n                },\n                fee: {\n                    unit: o.feeTokenSymbol || '',\n                    value: Number(volumeToCount(o.feeTokenSymbol, o.feeAmount || 0)?.toFixed(6))\n                },\n                memo: '',\n                time: o.timestamp,\n                txnHash: o.txHash,\n                status: getTxnStatus(o.status),\n                // tradeType: TransactionTradeTypes.withdraw\n            })))\n            const mappingList = [...userTransferMapped??[], ...userDepositMapped??[], ...userWithdrawMapped??[]]\n            const sortedMappingList = mappingList.sort((a, b) => b.time - a.time)\n            setTxs(sortedMappingList)\n            setIsLoading(false)\n        }\n    }, [accountId, apiKey])\n\n    useCustomDCEffect(() => {\n        getUserTxnList()\n    }, [getUserTxnList])\n\n    return {\n        txs,\n        isLoading\n    }\n}\n","import { useCallback, useEffect, useRef, useState } from 'react'\nimport { WithTranslation, withTranslation } from 'react-i18next'\nimport { PriceTag } from '@loopring-web/common-resources'\nimport { Box, Paper, Typography } from '@material-ui/core'\nimport styled from '@emotion/styled'\nimport { useHistory } from 'react-router-dom'\nimport {\n    AssetsTable,\n    AssetTitle,\n    AssetTitleProps,\n    ChartType,\n    DoughnutChart,\n    ScaleAreaChart,\n    ToggleButtonGroup,\n    TokenType,\n    LpTokenAction,\n} from '@loopring-web/component-lib'\nimport { useModals } from 'modal/useModals'\n\nimport { volumeToCount } from 'hooks/help'\nimport { LoopringAPI } from 'stores/apis/api'\nimport { AssetType } from 'loopring-sdk'\nimport store from 'stores'\nimport { useWalletLayer1 } from 'stores/walletLayer1'\nimport { makeWalletLayer2 } from 'hooks/help'\nimport { EmptyValueTag,unit } from '@loopring-web/common-resources'\nimport { StylePaper } from '../../styled'\nimport { useAccount } from '../../../stores/account';\n\n// const StylePaper = styled(Box)`\n//   width: 100%;\n//   height: 100%;\n//   flex: 1;\n//   background-color: ${({theme}) => theme.colorBase.background().default};\n//   border-radius: ${({theme}) => theme.unit}px;\n// //   padding: 20px;\n//\n//   .title {\n//     font-family: Gilroy-Medium;\n//     font-size: ${({theme}) => theme.unit * 3}px;\n//     line-height: 19px;\n//   }\n//\n//   .tableWrapper {\n//     display: flex;\n//     flex: 1;\n//     height: 100%;\n//     border: 1px solid ${({theme}) => theme.colorBase.borderColor};\n//     border-radius: ${({theme}) => theme.unit}px;\n//     padding: 26px 0;\n//   }\n// ` as typeof Box;\n\nconst StyledChartWrapper = styled(Box)`\n    height: 225px;\n\n    > div {\n        position: relative;\n        width: calc(50% - 6px);\n        height: 100%;\n        background-color: ${({theme}) => theme.colorBase.background().default};\n        border-radius: ${({theme}) => theme.unit}px;\n        padding: ${({theme}) => theme.unit * 2.5}px ${({theme}) => theme.unit * 3}px;\n    }\n`\n\nconst StyledBtnGroupWrapper = styled(Box)`\n    position: absolute;\n    z-index: 10;\n    right: ${({theme}) => theme.unit * 3}px;\n    bottom: ${({theme}) => theme.unit * 2.5}px;\n`\n\nconst toggleData = [\n    // {value: '24 H', key: '24 H'},\n    {value: 'week', key: '1 W'},\n    {value: 'all', key: 'ALL'},\n]\n\nexport type ITokenInfoItem = {\n    token: string,\n    detail: {\n        price: string,\n        symbol: string,\n        updatedAt: number\n    }\n}\n\nexport type TrendDataItem = {\n    timeStamp: number;\n    close: number;\n}\n\nconst AssetPanel = withTranslation('common')(({t, ...rest}: WithTranslation) => {\n    const container = useRef(null);\n    const [pageSize, setPageSize] = useState(10);\n    const [chartPeriod, setChartPeriod] = useState('week')\n    const [chartData, setChartData] = useState<TrendDataItem[]>([])\n    \n    const { account:{accAddress} } = useAccount()\n    const { walletLayer2 } = store.getState().walletLayer2;\n    const { ammMap } = store.getState().amm.ammMap\n    const walletMap = makeWalletLayer2()\n    const assetsKeyList = walletMap && walletMap.walletMap ? Object.keys(walletMap.walletMap) : []\n    const assetsDetailList = walletMap && walletMap.walletMap ? Object.values(walletMap.walletMap) : []\n    const assetsList = assetsKeyList.map((key, index) => ({\n        token: key,\n        detail: assetsDetailList[index]\n    }))\n\n    const getUserTotalAssets = useCallback(async (limit: number = 7) => {\n        const userAssets = await LoopringAPI.walletAPI?.getUserAssets({\n            wallet: accAddress,\n            assetType: AssetType.DEX,\n            limit: limit // TODO: minium unit is day, discuss with pm later\n        })\n        if (userAssets && userAssets.userAssets.length && !!userAssets.userAssets.length) {\n            // console.log(userAssets.userAssets)\n            setChartData(userAssets.userAssets.map(o => ({\n                timeStamp: Number(o.createdAt),\n                // close: o.amount && o.amount !== NaN ? Number(o.amount) : 0\n                close: Number(o.amount)\n            })))\n        }\n    }, [accAddress])\n\n    useEffect(() => {\n        if (LoopringAPI && LoopringAPI.walletAPI && walletLayer2) {\n            getUserTotalAssets()\n        }\n    }, [walletLayer2, getUserTotalAssets])\n\n    useEffect(() => {\n        // @ts-ignore\n        let height = container?.current?.offsetHeight;\n        if (height) {\n            setPageSize(Math.floor((height - 120) / 44) - 1);\n        }\n    }, [container, pageSize]);\n\n    const {\n        showDeposit,\n        showTransfer,\n        showWithdraw,\n        // ShowResetAccount,\n    } = useModals()\n\n    // const { updateWalletLayer1 } = useWalletLayer1()\n\n    let history = useHistory();\n\n    const onShowDeposit = useCallback((token?: any) => {\n        // updateWalletLayer1()\n        showDeposit(true, {\n            tradeData: {\n                balance: '',\n                belong: token\n            },\n        })\n    }, [showDeposit])\n\n    const onShowTransfer = useCallback((token?: any) => {\n        showTransfer(true, {\n            tradeData: {\n                balance: '',\n                belong: token\n            },\n        })\n    }, [showTransfer])\n\n    const onShowWithdraw = useCallback((token?: any) => {\n        showWithdraw(true, {\n            tradeData: {\n                balance: '',\n                belong: token\n            },\n        })\n    }, [showWithdraw])\n\n    const lpTokenJump = useCallback((token: string, type: LpTokenAction) => {\n        if (history) {\n            history.push(`/liquidity/pools/coinPair/${token}?type=${type}`)\n        }\n    }, [history])\n\n    const handleChartPeriodChange = useCallback((event: React.MouseEvent<HTMLElement, MouseEvent>, newValue: string) => {\n        const limit = newValue === 'week' ? 7 : 9999\n        getUserTotalAssets(limit)\n    }, [getUserTotalAssets])\n\n    const { faitPrices } = store.getState().system\n\n    const tokenPriceList = faitPrices ? Object.entries(faitPrices).map(o => ({\n        token: o[ 0 ],\n        detail: o[ 1 ]\n    })) as ITokenInfoItem[] : []\n\n    // let jointLPTokenValue = 0\n    // assetsList.filter(o => o.token.split('-')[0] === 'LP').forEach(o => {\n    //     const result = o.token.split('-')\n    //     result.splice(0, 1, 'AMM')\n    //     const ammToken = result.join('-')\n    //     console.log(ammToken)\n    //     const ammTokenList = Object.keys(ammMap)\n    //     const tokenValue = ammTokenList.includes(ammToken) && ammMap[ammToken] && ammMap[ammToken].amountDollar ? Number(ammMap[ammToken].amountDollar) : 0\n    //     console.log(ammMap)\n    //     jointLPTokenValue += tokenValue\n    // });\n\n    // const doughnutData = assetsList.filter(o => o.token.split('-')[0] !== 'LP').map((tokenInfo) => {\n    //     const tokenPriceUSDT = tokenInfo.token === 'DAI'\n    //         ? 1\n    //         : Number(tokenPriceList.find(o => o.token === tokenInfo.token) ? tokenPriceList.find(o => o.token === tokenInfo.token)?.detail.price : 0) / Number(tokenPriceList.find(o => o.token === 'USDT')?.detail.price)\n    //     return ({\n    //         name: tokenInfo.token,\n    //         value: Number(volumeToCount(tokenInfo.token, tokenInfo.detail?.detail?.total as string)) * tokenPriceUSDT\n    //     })\n    // })\n    const formattedData = assetsList.map(item => {\n        const isLpToken = item.token.split('-')[0] === 'LP'\n        if (!isLpToken) {\n            const tokenPriceUSDT = item.token === 'DAI'\n                ? 1\n                : Number(tokenPriceList.find(o => o.token === item.token) ? tokenPriceList.find(o => o.token === item.token)?.detail.price : 0) / Number(tokenPriceList.find(o => o.token === 'USDT')?.detail.price)\n            return ({\n                name: item.token,\n                value: Number(volumeToCount(item.token, item.detail?.detail?.total as string)) * tokenPriceUSDT\n            })\n        }\n        // let jointLPTokenValue = 0\n        const result = item.token.split('-')\n        result.splice(0, 1, 'AMM')\n        const ammToken = result.join('-')\n        const ammTokenList = Object.keys(ammMap)\n        const ammTokenPrice = ammTokenList.includes(ammToken) && ammMap[ammToken] && ammMap[ammToken].amountDollar ? (ammMap[ammToken].totalLpToken || 0) / ammMap[ammToken].amountDollar : 0\n        const tokenValue =  ammTokenPrice * (item.detail?.count || 0)\n        // jointLPTokenValue += 1\n        return ({\n            name: item.token,\n            value: tokenValue\n        })\n    })\n\n    \n    const lpTotalData = formattedData\n        .filter(o => o.name.split('-')[0] === 'LP')\n        .reduce((prev, next) => ({\n            name: 'LP-Token',\n            value: prev.value + next.value\n        }), {\n            name: 'LP-Token',\n            value: 0\n        })\n    \n    const formattedDoughnutData = formattedData.filter(o => o.name.split('-')[0] === 'LP').length > 0\n        ? [...formattedData.filter(o => o.name.split('-')[0] !== 'LP'), lpTotalData]\n        : formattedData\n\n    // const formattedDoughnutData = [...doughnutData, {\n    //         name: 'LP-Token',\n    //         value: jointLPTokenValue\n    //     }]\n    const AssetTitleProps: AssetTitleProps = {\n        assetInfo: {\n            totalAsset: formattedData.map(o => o.value).reduce((prev, next) => {\n                return prev + next\n            }, 0),\n            priceTag: PriceTag.Dollar,\n        },\n        onShowDeposit,\n        onShowTransfer,\n        onShowWithdraw,\n    }\n\n    const assetsRawData = assetsList.map((tokenInfo) => {\n        \n        const tokenPriceUSDT = Number(tokenPriceList.find(o => o.token === tokenInfo.token)?.detail.price) / Number(tokenPriceList.find(o => o.token === 'USDT')?.detail.price)\n        return ({\n            token: {\n                type: tokenInfo.token.split('-')[0] === 'LP' ? TokenType.lp : TokenType.single,\n                value: tokenInfo.token\n            },\n            amount: String(Number(volumeToCount(tokenInfo.token, tokenInfo.detail?.detail.total as string)).toFixed(6)) || EmptyValueTag,\n            available: String(tokenInfo.detail?.count) || EmptyValueTag,\n            locked: String(tokenInfo.detail?.detail.locked) || EmptyValueTag,\n            smallBalance: tokenPriceUSDT * Number(volumeToCount(tokenInfo.token, tokenInfo.detail?.detail.total as string)) < 1,\n        })\n    })\n\n    return (\n        <>\n            <Box>\n                <AssetTitle  {...{\n                    t,\n                    ...rest,\n                    ...AssetTitleProps\n                }} />\n            </Box>\n\n            {/*<div className=\"title\">{t('labelAssetsTitle')}</div>*/}\n\n            <StyledChartWrapper display={'flex'} justifyContent={'space-between'} alignItems={'center'} marginTop={2}>\n                <Paper component={'div'}>\n                    <Typography component=\"span\" color=\"textSecondary\" variant=\"body1\">{t('labelAssetsDistribution')}</Typography>\n                    <DoughnutChart data={walletLayer2 ? formattedDoughnutData : []}/>\n                </Paper>\n                <Paper component={'div'}>\n                    <Typography component=\"span\" color=\"textSecondary\" variant=\"body1\">{t('labelTotalAssets')}</Typography>\n                    <ScaleAreaChart type={ChartType.Trend} data={chartData}/>\n                    <StyledBtnGroupWrapper>\n                        <ToggleButtonGroup exclusive size=\"small\" {...{\n                            ...rest,\n                            t,\n                            data: toggleData,\n                            value: chartPeriod,\n                            setValue: setChartPeriod,\n                            onChange: handleChartPeriodChange\n                        }} />\n                    </StyledBtnGroupWrapper>\n                </Paper>\n            </StyledChartWrapper>\n            <StylePaper style={{marginTop: `${unit*2}px`}}>\n                <div className=\"tableWrapper\" ref={container}>\n                    <AssetsTable {...{\n                        rawData: assetsRawData,\n                        pagination: {\n                            pageSize: pageSize\n                        },\n                        showFiliter: true,\n                        onShowDeposit: onShowDeposit,\n                        onShowTransfer: onShowTransfer,\n                        onShowWithdraw: onShowWithdraw,\n                        onLpDeposit: lpTokenJump,\n                        onLpWithdraw: lpTokenJump,\n                        ...rest\n                    }} />\n                </div>\n            </StylePaper>\n        </>\n    )\n})\n\nexport default AssetPanel\n","import React from \"react\";\nimport { useDispatch } from \"react-redux\"\n\nimport { setShowDeposit, setShowResetAccount, setShowTransfer, setShowWithdraw, } from '@loopring-web/component-lib'\nimport { useTranslation } from \"react-i18next\";\nimport { useAccount } from '../stores/account';\nimport { AccountStatus } from '@loopring-web/common-resources';\n\nexport function useModals() {\n    const dispatch = useDispatch()\n    const {account: {readyState}} = useAccount()\n    const {t} = useTranslation('common')\n    const showDeposit = React.useCallback((isShow: boolean, defaultProps?: any) => {\n\n        const isNoAccount = readyState === AccountStatus.NO_ACCOUNT\n\n        console.log('isNoAccount: ', isNoAccount, t('depositTitleAndActive'))\n        const action = {\n            isShow,\n            props: {\n                title: isNoAccount ? t('depositTitleAndActive') : t('depositTitle'),\n                description: 'depositAndActiveDescription',\n                ...defaultProps\n            },\n        }\n        dispatch(setShowDeposit(action))\n    }, [dispatch, t, readyState])\n    const showTransfer = React.useCallback((isShow: boolean, defaultProps?: any) => dispatch(setShowTransfer({\n        isShow,\n        props: {...defaultProps}\n    })), [dispatch])\n    const showWithdraw = React.useCallback((isShow: boolean, defaultProps?: any) => dispatch(setShowWithdraw({\n        isShow,\n        props: {...defaultProps}\n    })), [dispatch])\n    const showResetAccount = React.useCallback((isShow: boolean, defaultProps?: any) => dispatch(setShowResetAccount({\n        isShow,\n        props: {...defaultProps}\n    })), [dispatch])\n\n    return {\n        showDeposit,\n        showTransfer,\n        showWithdraw,\n        // ShowResetAccount,\n    }\n}","import React, { useEffect } from 'react'\nimport { TradeTable, TradeFilterTable, RawDataTradeItem } from '@loopring-web/component-lib'\nimport { WithTranslation, withTranslation } from 'react-i18next'\n// import styled from '@emotion/styled'\n// import { Box, Paper } from '@material-ui/core'\nimport { StylePaper } from '../../styled'\nimport { useGetTrades } from './hooks'\n\n// const StylePaper = styled(Box)`\n//   display: flex;\n//   flex-direction: column;\n//   width: 100%;\n//   height: 100%;\n//   flex: 1;\n//   background-color: ${({ theme }) => theme.colorBase.background().default};\n//   border-radius: ${({ theme }) => theme.unit}px;\n//   padding: 20px;\n//   margin-bottom: ${({ theme }) => 2* theme.unit}px;\n//   .title {\n//     font-family: Gilroy-Medium;\n//     font-size: ${({ theme }) => theme.unit * 3}px;\n//     line-height: 19px;\n//   }\n//\n//   .tableWrapper {\n//     display: flex;\n//     flex: 1;\n//     margin-top: 20px;\n//     border: 1px solid ${({ theme }) => theme.colorBase.borderColor};\n//     border-radius: ${({ theme }) => theme.unit}px;\n//     padding: 26px 0;\n//\n//     .rdg {\n//       flex: 1;\n//     }\n//   }\n// ` as typeof Paper;\n//\n// // side: keyof typeof TradeTypes;\n// //     amount: {\n// //         from: {\n// //             key: string;\n// //             value: number|undefined;\n// //         },\n// //         to: {\n// //             key: string;\n// //             value: number|undefined;\n// //         }\n// //     };\n// //     price:{\n// //         key:string\n// //         value:number|undefined,\n// //     }\n// //     // priceDollar: number;\n// //     // priceYuan: number;\n// //     fee: {\n// //         key: string;\n// //         value: number|undefined;\n// //     };\n// //     time: number;\n\nconst TradePanel = withTranslation('common')((rest:WithTranslation<'common'>) => {\n    const [pageSize, setPageSize] = React.useState(10);\n    const { userTrades, showLoading } = useGetTrades()\n    const container = React.useRef(null);\n    const { t } = rest\n\n    React.useEffect(() => {\n        // @ts-ignore\n        let height = container?.current?.offsetHeight;\n        if (height) {\n            setPageSize(Math.floor((height - 120) / 44) - 2);\n        }\n    }, [container, pageSize]);\n\n    return (\n        <StylePaper ref={container}>\n            <div className=\"title\">{t('labelTradePageTitle')}</div>\n            <div className=\"tableWrapper extraTradeClass\">\n                <TradeTable {...{\n                  rawData: userTrades,\n                  pagination: {\n                    pageSize: pageSize\n                  },\n                  showFilter: true,\n                  showLoading: showLoading,\n                  ...rest}}/>\n            </div>\n        </StylePaper>\n    )\n})\n\nexport default TradePanel\n","import React from 'react'\n\nimport { useCustomDCEffect } from 'hooks/common/useCustomDCEffect'\nimport { useAccount } from 'stores/account/hook'\nimport { TransactionStatus, RawDataTransactionItem, RawDataTradeItem } from '@loopring-web/component-lib'\n\nimport { FilledType, TxStatus, UserTrade } from 'loopring-sdk'\nimport { TransactionTradeTypes } from '@loopring-web/component-lib';\nimport { LoopringAPI } from 'stores/apis/api'\nimport store from 'stores'\nimport { TradeTypes } from '@loopring-web/common-resources'\nimport { toBig, Side } from 'loopring-sdk'\nimport { volumeToCount, volumeToCountAsBigNumber } from 'hooks/help'\n\nexport function useGetTrades() {\n    const [userTrades, setUserTrades] = React.useState<RawDataTradeItem[]>([])\n    const [showLoading, setShowLoading] = React.useState(true)\n    const { account:{accountId, apiKey} } = useAccount()\n\n    const tokenMap = store.getState().tokenMap.tokenMap\n\n    const getUserTradeList = React.useCallback(async () => {\n        if (LoopringAPI && LoopringAPI.userAPI && accountId && apiKey && tokenMap) {\n            const userTrades = await LoopringAPI.userAPI.getUserTrades({\n                accountId,\n            }, apiKey)\n\n            if (userTrades && userTrades.userTrades) {\n                // @ts-ignore\n                setUserTrades(userTrades.userTrades.map(o => {\n                    const marketList = o.market.split('-')\n                    // due to AMM case, we cannot use first index\n                    const baseToken = marketList[marketList.length - 2]\n                    const quoteToken = marketList[marketList.length - 1]\n\n                    // const amt = toBig(o.volume).times(o.price).toString()\n\n                    const feeKey = o.side === Side.Buy ? baseToken : quoteToken\n\n\n                    return ({\n                        side: o.side === Side.Buy ? TradeTypes.Buy : TradeTypes.Sell ,\n                        price: {\n                            key: baseToken,\n                            // value: StringToNumberWithPrecision(o.price, baseToken)\n                            value: toBig(o.price).toNumber()\n                        },\n                        fee: {\n                            key: feeKey,\n                            // value: VolToNumberWithPrecision(o.fee, quoteToken),\n                            value: feeKey ? volumeToCount(feeKey, o.fee)?.toFixed(6) : undefined\n                        },\n                        time: Number(o.tradeTime),\n                        amount: {\n                            from: {\n                            key: baseToken,\n                            // value: VolToNumberWithPrecision(o.volume, baseToken),\n                            value: baseToken ? volumeToCount(baseToken, o.volume) : undefined\n                            },\n                            to: {\n                            key: quoteToken,\n                            // value: VolToNumberWithPrecision(amt, quoteToken)\n                            value: baseToken ? volumeToCountAsBigNumber(baseToken, o.volume)?.times(o.price).toNumber() : undefined\n                            }\n                        }\n                    })\n                }))\n                setShowLoading(false)\n            }\n        }\n    }, [accountId, apiKey, tokenMap])\n\n    React.useEffect(() => {\n        getUserTradeList()\n    }, [getUserTradeList])\n\n    // useCustomDCEffect(async() => {\n\n    //     if (!LoopringAPI.userAPI || !accountId || !apiKey) {\n    //         return\n    //     }\n\n    //     const response = await LoopringAPI.userAPI.getUserTrades({accountId: accountId}, apiKey)\n\n    //     let userTrades: RawDataTradeItem[] = []\n\n    //     response.userTrades.forEach((item: UserTrade, index: number) => {\n    //     })\n\n    //     setUserTrades(userTrades)\n\n    // }, [accountId, apiKey, LoopringAPI.userAPI])\n\n    return {\n        userTrades,\n        showLoading,\n    }\n}\n","import React, { useEffect } from 'react'\nimport { RawDataAmmItem, AmmTable, AmmSideTypes } from '@loopring-web/component-lib'\nimport { WithTranslation, withTranslation } from 'react-i18next'\nimport store from 'stores'\nimport { LoopringAPI } from 'stores/apis/api'\nimport { AmmTxType } from 'loopring-sdk'\nimport { StylePaper } from '../../styled'\nimport { volumeToCount } from '../../../hooks/help';\nimport { useGetAmmRecord } from'./hook'\n\nconst AmmPanel = withTranslation('common')(({ t, ...rest }: WithTranslation<'common'>) => {\n    const container = React.useRef(null);\n    const [pageSize, setPageSize] = React.useState(10);\n    const { ammRecordList, showLoading } = useGetAmmRecord()\n\n    React.useEffect(() => {\n        // @ts-ignore\n        let height = container?.current?.offsetHeight;\n        if (height) {\n            setPageSize(Math.floor((height - 120) / 44) - 2);\n        }\n    }, [container, pageSize]);\n\n    return (\n        <>\n            <StylePaper ref={container}>\n                <div className=\"title\">{t('labelAmmPageTitle')}</div>\n                <div className=\"tableWrapper\">\n                    <AmmTable {...{\n                        rawData: ammRecordList,\n                        pagination: {\n                            pageSize: pageSize\n                        },\n                        showFilter: true,\n                        showLoading: showLoading,\n                        ...rest}}/>\n                </div>\n            </StylePaper>\n        </>\n    )\n})\n\nexport default AmmPanel\n","import React, { useEffect } from 'react'\nimport { RawDataAmmItem, AmmSideTypes } from '@loopring-web/component-lib'\nimport store from 'stores'\nimport { LoopringAPI } from 'stores/apis/api'\nimport { AmmTxType } from 'loopring-sdk'\nimport { volumeToCount } from '../../../hooks/help';\n\nexport function useGetAmmRecord() {\n    const [ammRecordList, setAmmRecordList] = React.useState<RawDataAmmItem[]>([])\n    const [showLoading, setShowLoading] = React.useState(true)\n    const { accountId,apiKey } = store.getState().account;\n    const { tokenMap } = store.getState().tokenMap\n\n    const getTokenName = React.useCallback((tokenId?: number) => {\n        if (tokenMap) {\n            const keys = Object.keys(tokenMap)\n            const values = Object.values(tokenMap)\n            const index = values.findIndex(o => o.tokenId === tokenId)\n            if (index > -1) {\n                return keys[index]\n            }\n            return ''\n        }\n        return ''\n    }, [tokenMap])\n\n    const getAmmpoolList = React.useCallback(async () => {\n        if (LoopringAPI.ammpoolAPI && accountId && apiKey) {\n            const ammpool = await LoopringAPI.ammpoolAPI.getUserAmmPoolTxs({\n                accountId,\n            }, apiKey)\n            if (ammpool && ammpool.userAmmPoolTxs) {\n                const result = ammpool.userAmmPoolTxs.map(o => ({\n                    side: o.txType === AmmTxType.JOIN ? AmmSideTypes.Join : AmmSideTypes.Exit,\n                    amount: {\n                        from: {\n                            key: getTokenName(o.poolTokens[0]?.tokenId),\n                            value: String(volumeToCount(getTokenName(o.poolTokens[0]?.tokenId), o.poolTokens[0]?.actualAmount))\n                        },\n                        to: {\n                            key: getTokenName(o.poolTokens[1]?.tokenId),\n                            value: String(volumeToCount(getTokenName(o.poolTokens[1]?.tokenId), o.poolTokens[1]?.actualAmount))\n                        }\n                    },\n                    lpTokenAmount: String(volumeToCount(getTokenName(o.lpToken?.tokenId), o.lpToken?.actualAmount)),\n                    fee: {\n                        key: getTokenName(o.poolTokens[1]?.tokenId),\n                        value: volumeToCount(getTokenName(o.poolTokens[1]?.tokenId), o.poolTokens[1]?.feeAmount)?.toFixed(6)\n                    },\n                    time: o.updatedAt\n                }))\n                setAmmRecordList(result)\n                setShowLoading(false)\n            }\n        }\n    }, [accountId, apiKey, getTokenName])\n    \n    useEffect(() => {\n        getAmmpoolList()\n    }, [getAmmpoolList])\n\n    return  {\n        ammRecordList,\n        showLoading,\n    }\n}\n\n","export enum Commands {\n    ErrorNetwork='ErrorNetwork',\n    LockAccount='LockAccount',// clear private data\n    NoAccount='NoAccount',//\n    DepositingAccount='DepositingAccount',\n    ErrorApproveToken='ErrorApproveToken',\n    ErrorDepositSign='ErrorDepositSign',\n    ProcessDeposit='ProcessDeposit',// two or one step\n    SignAccount='SignAccount', //unlock or update account  assgin\n    ErrorSign='ErrorSign',\n    ProcessSign='ProcessSign',\n    ProcessAccountCheck='ProcessAccountCheck',\n    AccountUnlocked = 'AccountUnlocked'\n}\nexport enum ErrorType {\n    FailedConnect = 'FailedConnect'\n}\n// 'ConnectWallet',\n// 'UnLockWallet',\n// 'SignatureTransfer',\n// 'SignatureApprove'\n\n\nexport enum ProcessingType{\n    waiting = 'waiting',\n    nextStep = 'nextStep'\n}\n","import styled from '@emotion/styled';\nimport { Box, Button, Divider, Grid, Switch, Typography } from '@material-ui/core';\nimport React from 'react';\nimport { UpColor, Currency, DropDownIcon } from '@loopring-web/common-resources';\nimport {\n    BtnLanguage,\n    OutlineSelect,\n    OutlineSelectItem, QRCodePanel,\n    TypographyStrong, useSettings\n} from '@loopring-web/component-lib';\nimport { Trans, useTranslation, WithTranslation, withTranslation } from 'react-i18next';\nimport { useTheme } from '@emotion/react';\nimport { LanguageKeys } from '@loopring-web/common-resources';\nimport { useExportAccoutInfo } from './hook';\n\n// const MuiModalStyled = styled(MuiModal)`\n//   //background: ${({theme}) => theme.colorBase.background().secondary};\n//   // .MuiBackdrop-root{\n//   //   z-index: -1;\n//   //   background-color: ${({theme}) => theme.colorBase.background().outline};\n//   // }\n//   display: flex;\n//   align-items: center;\n//   justify-content: center;\n// ` as typeof MuiModal;\n// const BlockStyled = styled(Box)`\n//   ${({theme}) => theme.border.defaultFrame({c_key: 'blur', d_R: 1})};\n//   background: ${({theme}) => theme.colorBase.background().secondary};\n//   max-height: var(--panel-setting-height);\n//   max-width: var(--panel-setting-width);\n//   display: flex;\n//   justify-content: space-around;\n//   align-items: center;\n//   overflow: scroll;\n//   padding: ${({theme}) => theme.unit*8}px\n// `;\n\nconst StyledPaper = styled(Grid)`\n  width: 100%;\n  height: 100%;\n  background-color: ${({theme}) => theme.colorBase.background().default};\n  border-radius: ${({ theme }) => theme.unit}px;\n`\n//${({theme}) => theme.border.defaultFrame({c_key: 'blur', d_R: 1})};\n\nconst StyledSwitch = styled(Switch)(({theme}) => ({\n    \"& .Mui-checked\": {\n        color: theme.colorBase.textPrimary,\n        '& + .MuiSwitch-track.MuiSwitch-track': {\n            border: `solid ${theme.colorBase.success}`,\n        },\n        '& .MuiSwitch-thumb': {\n            backgroundColor: theme.colorBase.success,\n        }\n    },\n    '& .MuiSwitch-track': {\n        border: `solid ${theme.colorBase.error}`,\n        opacity: 1\n    },\n    '& .MuiSwitch-thumb': {\n        backgroundColor: theme.colorBase.error,\n    }\n}));\n\nexport const BtnCurrency = ({t, currency, label, handleChange}: any) => {\n    const [state, setState] = React.useState<string>(currency ? currency : Currency.dollar);\n    const _handleChange = React.useCallback((event: React.ChangeEvent<any>) => {\n        setState(event.target.value);\n        if (handleChange) {\n\n            handleChange(event.target.value)\n        }\n    }, [handleChange])\n    return <OutlineSelect aria-label={t(label)} IconComponent={DropDownIcon}\n                          labelId=\"language-selected\"\n                          id=\"language-selected\"\n                          value={state} autoWidth\n                          onChange={_handleChange}>\n        <OutlineSelectItem value={Currency.dollar}>$ {t('labelUSDollar')}</OutlineSelectItem>\n            <OutlineSelectItem value={Currency.yen}>¥ {t('labelCNYYuan')}</OutlineSelectItem>\n    </OutlineSelect>\n}\n\nconst StyledDivider = styled(Divider)`\n  margin: ${({theme}) => theme.unit}px 0 ${({theme}) => theme.unit}px 0px;\n`\nconst DividerBlock = styled(Divider)`\n  margin: 0;\n  flex: 1;\n  width: 1px;\n  height: ${({theme}) => theme.unit * 3}px;\n  background: ${({theme}) => theme.colorBase.focus};\n`\n\n\n\nexport const SettingPanel = withTranslation(['common', 'layout'])(({t,i18n, ...rest}: & WithTranslation) => {\n    const theme = useTheme();\n    const {setUpColor,setLanguage,setCurrency,currency,upColor} = useSettings()\n    const language = i18n.language;\n    const handleOnLanguageChange = (lang: LanguageKeys) => {\n        setLanguage(lang);\n        i18n.changeLanguage(lang);\n    }\n    const handleOnCurrencyChange = (value: any) => {\n        setCurrency(value);\n    }\n    const handleColorChange = (e:any) => {\n        if(e.target.checked){\n            setUpColor(UpColor.green) ;\n        }else{\n            setUpColor(UpColor.red);\n        }\n    }\n\n    const { exportAccInfo } = useExportAccoutInfo()\n\n    return <Grid container direction={'column'} justifyContent={'space-between'} alignItems={'stretch'} flexWrap={'nowrap'}>\n        {/* <Typography variant={'h4'} component={'h3'} paddingLeft={2}>{t('labelTitleSecurity')}</Typography>\n        <StyledPaper item xs={12} display={'flex'} flexDirection={'column'} marginY={2}  paddingY={3}>\n            <Box component={'section'} display={'flex'} flexDirection={'column'} marginBottom={1}>\n                <Typography variant={'h5'} component={'h4'} paddingX={3}  marginBottom={1}>{t('labelTitleResetL2Keypair')}</Typography>\n                <Grid container display={'flex'} flexDirection={'row'} justifyContent={'stretch'}\n                      alignItems={'flex-start'} paddingX={3} >\n                    <Grid item xs={8} display={'flex'} flexDirection={'column'}>\n                        <Typography variant={'body1'} component={'p'}>\n                            <Trans i18nKey=\"resetDescription\">\n                                Create a new signing key for layer-2 authentication (no backup needed). This will\n                                <TypographyStrong component={'span'}>cancel all your pending orders</TypographyStrong>.\n                            </Trans>\n                        </Typography>\n                    </Grid>\n                    <Grid item xs={4} display={'flex'} flexDirection={'column'} justifyContent={'space-evenly'}\n                          alignItems={'flex-end'} alignSelf={'stretch'}>\n                        <Button variant={'outlined'} size={'medium'} color={'primary'} disabled={false}>{t('labelBtnReset')}</Button>\n                    </Grid>\n                    <Grid item xs={12} display={'flex'} flexDirection={'row'} justifyContent={'flex-end'}\n                          alignItems={'center'} alignSelf={'stretch'}>\n                        <Typography variant={'body2'} component={'p'}\n                                    paddingTop={1}>{t('labelHadChangPassword', {passDay: '14 hours'})}</Typography>\n                    </Grid>\n\n                </Grid>\n            </Box>\n            <StyledDivider/>\n            <Box component={'section'} display={'flex'} flexDirection={'column'}>\n                <Typography variant={'h5'} component={'h4'} paddingX={3} marginY={1}>{t('labelTitleExportAccount')}</Typography>\n\n                <Grid container display={'flex'} flexDirection={'row'} justifyContent={'stretch'}\n                      alignItems={'flex-start'} paddingX={3} marginBottom={2}>\n                    <Grid item xs={7} display={'flex'} flexDirection={'column'}>\n                        <Typography variant={'body1'} component={'p'}>{t('descriptionExportAccount')}</Typography>\n                    </Grid>\n                    <Grid item xs={5} display={'flex'} flexDirection={'column'} justifyContent={'space-evenly'}\n                          alignItems={'flex-end'} alignSelf={'stretch'}>\n                        <Grid item> <Button onClick={() => {\n                            exportAccInfo()\n                        }} variant={'outlined'} size={'medium'}\n                                            color={'primary'} disabled={false}>{t('labelBtnExportAccount')}</Button></Grid>\n                    </Grid>\n                </Grid>\n            </Box>\n        </StyledPaper> */}\n\n        <Typography variant={'h4'} component={'h3'} paddingLeft={2}>{t('labelTitlePreferences')}</Typography>\n        <StyledPaper item xs={12} display={'flex'} flexDirection={'column'} marginY={2} paddingY={3}>\n            <Box component={'section'} display={'flex'} flexDirection={'column'}>\n                {/*<Typography variant={'h5'} component={'h4'} paddingX={2}>{t('labelTitleLayout')}</Typography>*/}\n                {/*<StyledDivider/>*/}\n                <Grid container display={'flex'} flexDirection={'row'} justifyContent={'stretch'}\n                      alignItems={'flex-start'} paddingX={3} marginBottom={2}>\n                    <Grid item xs={7} display={'flex'} flexDirection={'column'}>\n                        <Typography variant={'body1'} component={'p'}>{t('labelLanguage')}</Typography>\n                    </Grid>\n                    <Grid item xs={5} display={'flex'} flexDirection={'column'} justifyContent={'space-evenly'}\n                          alignItems={'flex-end'} alignSelf={'stretch'}>\n                        <Grid item>\n                            <BtnLanguage {...{\n                                t, ...rest,\n                                language,\n                                label: 'languageSetting',\n                                handleChange: handleOnLanguageChange\n                            }}></BtnLanguage>\n                        </Grid>\n                    </Grid>\n                </Grid>\n                <StyledDivider/>\n                <Grid container display={'flex'} flexDirection={'row'} justifyContent={'stretch'}\n                      alignItems={'flex-start'} paddingX={3} marginY={2}>\n                    <Grid item xs={7} display={'flex'} flexDirection={'column'}>\n                        <Typography variant={'body1'} component={'p'}>{t('labelCurrency')}</Typography>\n                    </Grid>\n                    <Grid item xs={5} display={'flex'} flexDirection={'column'} justifyContent={'space-evenly'}\n                          alignItems={'flex-end'} alignSelf={'stretch'}>\n                        <Grid item>\n                            <BtnCurrency {...{\n                                t, ...rest,\n                                currency,\n                                label: 'currencySetting',\n                                handleChange: handleOnCurrencyChange\n                            }}></BtnCurrency>\n\n                        </Grid>\n                    </Grid>\n                </Grid>\n                <StyledDivider/>\n                <Grid container display={'flex'} flexDirection={'row'} justifyContent={'stretch'}\n                      alignItems={'flex-start'} paddingX={3} marginTop={2}>\n                    <Grid item xs={7} display={'flex'} flexDirection={'column'}>\n                        <Typography variant={'body1'} component={'p'}>{t('labelColors')}</Typography>\n                    </Grid>\n                    <Grid item xs={5} display={'flex'} flexDirection={'row'} justifyContent={'flex-end'}\n                          alignItems={'center'} alignSelf={'stretch'}>\n                        <Typography variant={'body1'} component={'span'} paddingX={2}>\n                            <Trans i18nKey=\"whichColorIsUp\">\n                                <span style={{\n                                    textTransform: 'capitalize',\n                                    color: upColor === UpColor.green ? theme.colorBase.success : theme.colorBase.error\n                                }}>{{up: upColor === UpColor.green ? t('labelgreen') : t('labelred')}} up</span>\n                                and <span style={{\n                                textTransform: 'capitalize',\n                                color: upColor === UpColor.green ? theme.colorBase.error : theme.colorBase.success\n                            }}>{{down: upColor === UpColor.green ? t('labelred') : t('labelgreen')}} down</span>\n                            </Trans>\n                        </Typography>\n                        <StyledSwitch checked={upColor === UpColor.green} color=\"default\"\n                                      onChange={handleColorChange}/>\n                    </Grid>\n                </Grid>\n            </Box>\n\n        </StyledPaper>\n\n    </Grid>\n})\n\n// export const SettingPage = ({open,onClose}: { open:boolean, onClose:(e:any)=>void})=>{\n//     return  <MuiModalStyled\n//         open={open}\n//         onClose={onClose}\n//         aria-labelledby=\"modal-modal-title\"\n//         aria-describedby=\"modal-modal-description\"\n//     >\n//         <BlockStyled >\n//            <SettingPanel/>\n//         </BlockStyled>\n//     </MuiModalStyled>\n// }\n\n\n","import { useCallback } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { RootState } from \"stores\";\n\nimport { myLog } from \"utils/log_tools\";\nimport { Account, AccountStatus } from '@loopring-web/common-resources';\nimport exportFromJSON from 'export-from-json';\n\nexport function useResetAccount() {\n\n}\n\nexport function useExportAccoutInfo() {\n    const account: Account = useSelector((state: RootState) => state.account)\n\n    const exportAccInfo = useCallback(() => {\n\n        if (account.readyState !== AccountStatus.ACTIVATED) {\n            return undefined\n        }\n\n        const accInfo = {\n            address: account.accAddress,\n            accountId: account.accountId,\n            nonce: account.level,\n            apiKey: account.apiKey,\n            publicX: account.publicKey.x,\n            publicY: account.publicKey.y,\n            privateKey: account.eddsaKey,\n        }\n\n        const fileName = 'accountInfo'\n        const exportType = 'json'\n\n        exportFromJSON({data: accInfo, fileName, exportType})\n\n        myLog('exportFromJSON:', accInfo)\n\n    }, [account])\n\n    return {\n        exportAccInfo,\n    }\n}\n","import React, { useCallback } from 'react';\n\nimport { AccountStep, DepositProps, SwitchData, TradeBtnStatus, useOpenModals } from '@loopring-web/component-lib';\nimport { AccountStatus, CoinMap, ConnectProviders, IBData, WalletMap } from '@loopring-web/common-resources';\nimport * as sdk from 'loopring-sdk';\nimport { useTokenMap } from '../stores/token';\nimport { useAccount } from '../stores/account';\nimport { useSystem } from '../stores/system';\nimport { connectProvides } from '@loopring-web/web3-provider';\nimport { LoopringAPI } from 'stores/apis/api';\nimport { dumpError400, GetAllowancesRequest } from 'loopring-sdk';\nimport { myLog } from 'utils/log_tools';\nimport { useWalletLayer1 } from '../stores/walletLayer1';\nimport { useTranslation } from 'react-i18next';\nimport { ActionResult, ActionResultCode } from 'defs/common_defs';\n\nexport const useDeposit = <R extends IBData<T>, T>(isNewAccount: boolean = false): {\n    depositProps: DepositProps<R, T>\n} => {\n    const {tokenMap, coinMap} = useTokenMap()\n    const {account} = useAccount()\n    const {exchangeInfo, chainId, gasPrice} = useSystem()\n    const [depositValue, setDepositValue] = React.useState<IBData<T>>({\n        belong: undefined,\n        tradeValue: 0,\n        balance: 0\n    } as IBData<unknown>)\n\n    const {walletLayer1} = useWalletLayer1()\n    const {setShowDeposit, setShowAccount}  = useOpenModals()\n\n    const { t } = useTranslation('common')\n\n    // walletMap1: WalletMap<T> | undefined, ShowDeposit: (isShow: boolean, defaultProps?: any) => void\n    const handleDeposit = React.useCallback(async (inputValue: any) => {\n        const {accountId, accAddress, readyState, apiKey, connectName, eddsaKey} = account\n\n        console.log(LoopringAPI.exchangeAPI, connectProvides.usedWeb3)\n\n        let result: ActionResult = { code: ActionResultCode.NoError }\n\n        if ((readyState !== AccountStatus.UN_CONNECT\n            && inputValue.tradeValue)\n            && tokenMap && exchangeInfo?.exchangeAddress\n            && connectProvides.usedWeb3 && LoopringAPI.exchangeAPI) {\n            try {\n                const tokenInfo = tokenMap[inputValue.belong]\n                const gasLimit = parseInt(tokenInfo.gasAmounts.deposit)\n                let nonce = await sdk.getNonce(connectProvides.usedWeb3, account.accAddress)\n\n                const fee = 0\n                \n                const isMetaMask = connectName === ConnectProviders.MetaMask\n\n                const realGasPrice = gasPrice ?? 30\n\n                if (tokenInfo.symbol.toUpperCase() !== 'ETH') {\n\n                    setShowAccount({isShow: true, step: AccountStep.TokenAccessProcess})\n\n                    const req: GetAllowancesRequest = { owner: account.accAddress, token: tokenInfo.symbol}\n\n                    const { tokenAllowances } = await LoopringAPI.exchangeAPI.getAllowances(req, tokenMap)\n    \n                    const allowance = sdk.toBig(tokenAllowances[tokenInfo.symbol])\n    \n                    const curValInWei = sdk.toBig(inputValue.tradeValue).times('1e' + tokenInfo.decimals)\n    \n                    if (curValInWei.gt(allowance)) {\n\n                        myLog(curValInWei, allowance, ' need approveMax!')\n\n                        try {\n                            await sdk.approveMax(connectProvides.usedWeb3, account.accAddress, tokenInfo.address,\n                                exchangeInfo?.depositAddress, realGasPrice, gasLimit, chainId === 'unknown' ? undefined : chainId, nonce, isMetaMask)\n                            nonce += 1\n                        } catch(reason) {\n                            result.code = ActionResultCode.ApproveFailed\n                            result.data = reason\n                            \n                            setShowAccount({isShow: true, step: AccountStep.FailedTokenAccess})\n                            return\n                        }\n\n                        setShowAccount({isShow: true, step: AccountStep.Depositing})\n\n                    } else {\n                        myLog('allowance is enough! don\\'t need approveMax!')\n                    }\n\n                }\n\n                myLog('before deposit:', chainId, connectName, isMetaMask)\n\n                const realChainId = chainId === 'unknown' ? 1 : chainId\n\n                const response2 = await sdk.deposit(connectProvides.usedWeb3, account.accAddress,\n                    exchangeInfo.exchangeAddress, tokenInfo, inputValue.tradeValue, fee,\n                    realGasPrice, gasLimit, realChainId, nonce, isMetaMask)\n\n                myLog('response2:', response2)\n\n                result.data = response2\n\n                setShowAccount({isShow: true, step: AccountStep.Depositing})\n\n            } catch (reason) {\n                dumpError400(reason)\n                result.code = ActionResultCode.DepositFailed\n                result.data = reason\n\n                setShowAccount({isShow: true, step: AccountStep.FailedDeposit})\n            }\n\n        } else {\n            result.code = ActionResultCode.DataNotReady\n        }\n\n        return result\n\n    }, [account, tokenMap, chainId, exchangeInfo, gasPrice, LoopringAPI.exchangeAPI, setShowAccount])\n\n    const onDepositClick = useCallback(async(depositValue) => {\n        myLog('onDepositClick depositValue:', depositValue)\n        setShowDeposit({isShow:false})\n\n        if (depositValue && depositValue.belong) {\n            await handleDeposit(depositValue as R)\n        }\n\n    }, [depositValue, handleDeposit, setShowDeposit, setShowAccount, isNewAccount])\n\n    const handlePanelEvent = useCallback(async(data: SwitchData<any>, switchType: 'Tomenu' | 'Tobutton') => {\n        return new Promise<void>((res: any) => {\n            res();\n        })\n    }, [depositValue, setDepositValue])\n\n    const title = isNewAccount ? t('labelCreateLayer2Title') : t('depositTitleAndActive')\n\n    const depositProps: DepositProps<R, T> = {\n        isNewAccount,\n        title,\n        tradeData: {belong: undefined} as any,\n        coinMap: coinMap as CoinMap<any>,\n        walletMap: walletLayer1 as WalletMap<any>,\n        depositBtnStatus: TradeBtnStatus.AVAILABLE,\n        onDepositClick,\n    }\n\n    return {\n        depositProps: depositProps,\n    }\n}\n","import { useRouteMatch } from 'react-router'\n\nimport { Box } from '@material-ui/core'\nimport {\n    AccountStep,\n    Button,\n    DepositPanel,\n    SubMenu,\n    SubMenuList as BasicSubMenuList,\n    useOpenModals,\n} from '@loopring-web/component-lib'\nimport { useTranslation, withTranslation } from 'react-i18next'\nimport styled from '@emotion/styled'\nimport { AccountStatus, fnType, subMenuLayer2 } from '@loopring-web/common-resources'\n\nimport TxPanel from './TxPanel'\nimport AssetPanel from './AssetPanel'\nimport TradePanel from './TradePanel'\nimport AmmPanel from './AmmPanel'\nimport { SettingPanel } from '../SettingPage';\n// import { useModalProps } from '../../layouts/header/hook';\nimport { Redirect } from 'react-router-dom'\nimport React from 'react';\nimport { useAccount } from '../../stores/account';\nimport { accountStaticCallBack, bntLabel, btnClickMap } from '../../layouts/connectStatusCallback';\nimport { deepClone } from '../../utils/obj_tools';\nimport store from '../../stores';\nimport { useCustomDCEffect } from '../../hooks/common/useCustomDCEffect';\nimport { useDeposit } from '../../modal/useDeposit';\n// import { useModalProps } from '../../modal';\n\nexport const subMenu = subMenuLayer2;\nconst BoxStyle = styled(Box)`\n  ${({theme}) => `\n    background-color: ${theme.colorBase.background().default};\n    width: 100%;\n    min-width:auto;\n    ${theme.border.defaultFrame({c_key: 'blur'})};\n    & > div{\n      background-color:initial;\n      border:0;\n      width:auto;\n      min-width: var(--swap-box-width);\n      max-width: 520px;\n    }\n    `\n}\n   \n` as typeof Box\nconst BtnConnect = withTranslation(['common'], {withRef: true})(({t}: any) => {\n    const [label,setLabel]  = React.useState(undefined);\n    const { status: accountStatus} = useAccount();\n    const _btnClickMap: typeof btnClickMap = Object.assign(deepClone(btnClickMap));\n    useCustomDCEffect(() => {\n        setLabel(accountStaticCallBack(bntLabel));\n    }, [accountStatus])\n    return <Button variant={'contained'} size={'large'} color={'primary'} fullWidth={true}\n                   style={{maxWidth: '280px'}} onClick={()=>{accountStaticCallBack(_btnClickMap, [])}\n    }>{t(label)}\n    </Button>\n}) as typeof Button\nconst SubMenuList = withTranslation(['layout', 'common'], {withRef: true})(BasicSubMenuList);\nexport const Layer2Page = () => {\n\n    let match: any = useRouteMatch(\"/layer2/:item\")\n    const {account: {readyState}} = useAccount()\n    const {t, ...rest} = useTranslation();\n    const selected = match?.params.item ?? 'assets';\n    const {depositProps} = useDeposit()\n\n    return <>  {\n        readyState === AccountStatus.UN_CONNECT\n            ? <Redirect to=\"/\"/>\n            :\n            readyState === AccountStatus.NO_ACCOUNT\n            || readyState === AccountStatus.DEPOSITING ?\n                <BoxStyle display={'flex'} flexWrap={'wrap'} alignItems={'center'} justifyContent={'center'}\n                          alignContent={'flex-start'}>\n                    <DepositPanel  {...{\n                        ...rest, ...depositProps,\n                        title: t('depositTitleAndActive'),\n                        description: 'depositAndActiveDescription'\n                    }} > </DepositPanel>\n                </BoxStyle> : <>\n                    <Box width={'200px'} display={'flex'} justifyContent={'stretch'} marginRight={3} marginBottom={2}>\n                        <SubMenu>\n                            <SubMenuList selected={selected} subMenu={subMenu as any}/>\n                        </SubMenu>\n                    </Box>\n                    <Box minHeight={420} display={'flex'} alignItems={'stretch'} flexDirection={'column'} marginTop={0}\n                         flex={1}>\n                        {readyState === AccountStatus.LOCKED ?\n                            <>\n                                {\n                                    selected === 'setting' ? <SettingPanel/> :\n                                        <Box flex={1} display={'flex'} justifyContent={'center'} alignItems={'center'}\n                                             marginTop={-10}>\n                                            <BtnConnect/>\n                                        </Box>\n\n                                }\n                            </> :\n                            <>\n                                {selected === 'assets' && <AssetPanel/>}\n                                {selected === 'transactions' && <TxPanel/>}\n                                {selected === 'trades' && <TradePanel/>}\n                                {selected === 'ammRecords' && <AmmPanel/>}\n                                {/* {selected === 'orders' && <OrderPanel />} */}\n                                {selected === 'setting' && <SettingPanel/>}\n                            </>\n\n                        }\n\n\n                    </Box>\n                </>\n    }\n    </>\n\n\n}\n","import { WithTranslation, withTranslation } from 'react-i18next'\nimport { Box, } from '@material-ui/core'\nimport styled from '@emotion/styled'\n\nimport React from 'react';\nimport { useAmmMapUI } from './hook';\n\nimport { PoolsTable } from '@loopring-web/component-lib';\nimport { AmmPoolActivityRule, LoopringMap } from 'loopring-sdk/dist/defs/loopring_defs';\n\nconst StylePaper = styled(Box)`\n  width: 100%;\n  height: 100%;\n  flex: 1;\n  background-color: ${({theme}) => theme.colorBase.background().default};\n  border-radius: ${({theme}) => theme.unit}px;\n\n  .rdg {\n    flex: 1;\n  }\n\n` as typeof Box;\n\n\nexport const PoolsPanel = withTranslation('common')(<R extends { [ key: string ]: any }, I extends { [ key: string ]: any }>\n({t, ammActivityMap, ...rest}: WithTranslation\n    & {\n    ammActivityMap: LoopringMap<LoopringMap<AmmPoolActivityRule[]>> | undefined }) => {\n    const container = React.useRef(null);\n    const [pageSize, setPageSize] = React.useState(10);\n    const {updateTickersUI, rawData, page} = useAmmMapUI({pageSize});\n\n    React.useEffect(() => {\n        // @ts-ignore\n        let height = container?.current?.offsetHeight;\n        if (height) {\n            setPageSize(Math.floor((height - 120) / 44) - 1);\n        }\n    }, [container, pageSize]);\n\n    const handlePageChange = React.useCallback((page) => {\n        updateTickersUI(page)\n    }, [updateTickersUI]);\n    return (\n        <>\n            <StylePaper display={'flex'} flexDirection={'column'} ref={container}>\n                <PoolsTable {...{\n                    rawData,\n                    handlePageChange,\n                    page,\n                    pagination: {\n                        pageSize\n                    }\n                }} />\n            </StylePaper>\n        </>\n    )\n})\n\n","import { AmmPanel, AmmPanelType, Toast } from '@loopring-web/component-lib';\nimport { AmmData, AmmInData, CoinInfo, IBData, WalletMap } from '@loopring-web/common-resources';\nimport { useAmmPanel } from './hooks';\nimport React from 'react';\nimport { Box } from '@material-ui/core';\nimport { AmmPoolSnapshot, TickerData } from 'loopring-sdk';\nimport { TradeBtnStatus } from '@loopring-web/component-lib';\nimport { TOAST_TIME } from 'defs/common_defs';\n\nexport const AmmPanelView = <T extends AmmData<C extends IBData<I> ? C : IBData<I>>, I,\n    ACD extends AmmInData<I>,\n    C = IBData<I>>({\n                       pair,\n                       walletMap,\n                       ammType, snapShotData,\n                       ...rest\n                   }: {\n    pair: { coinAInfo: CoinInfo<C> | undefined, coinBInfo: CoinInfo<C> | undefined },\n    snapShotData: { tickerData: TickerData | undefined, ammPoolsBalance: AmmPoolSnapshot | undefined } | undefined\n    walletMap: WalletMap<C>\n    ammType?: keyof typeof AmmPanelType\n} & any) => {\n    const {\n        ammAlertText,\n        ammToastOpen,\n        setAmmToastOpen,\n\n\n        ammCalcData,\n        ammJoinData,\n        ammExitData,\n        handleJoinAmmPoolEvent,\n        handleExitAmmPoolEvent,\n        onAmmRemoveClick,\n        onAmmAddClick,\n        isJoinLoading,\n        isExitLoading,\n        ammDepositBtnI18nKey,\n        ammWithdrawBtnI18nKey,\n    } = useAmmPanel({\n        pair,\n        snapShotData, walletMap, ammType: ammType ? ammType : AmmPanelType.Deposit\n    })\n\n    // const [index, setIndex] = React.useState(AmmPanelTypeMap[ tabSelected ]);\n    const isLoading = React.useCallback(()=>{\n        \n        if((!snapShotData || !snapShotData.tickerData || !snapShotData.ammPoolsBalance)\n            &&  ammDepositBtnI18nKey === undefined\n            &&  ammWithdrawBtnI18nKey === undefined\n        ) {\n          return true\n        }\n    \n        if(isJoinLoading || isExitLoading){\n            return true   \n            \n        }\n    },[snapShotData,ammWithdrawBtnI18nKey,ammWithdrawBtnI18nKey,isJoinLoading,isExitLoading])\n\n\n    return <> \n    \n    <Toast alertText={ammAlertText as string} open={ammToastOpen} \n            autoHideDuration={TOAST_TIME} setOpen={setAmmToastOpen}/>\n\n    {pair ?\n        <AmmPanel {...{...rest}}\n                  ammDepositData={ammJoinData}\n                  ammWithdrawData={ammExitData}\n                  ammCalcData={ammCalcData}\n                  handleAmmAddChangeEvent={handleJoinAmmPoolEvent}\n                  handleAmmRemoveChangeEvent={handleExitAmmPoolEvent}\n                  onAmmRemoveClick={onAmmRemoveClick}\n                  onAmmAddClick={onAmmAddClick}\n                  tabSelected={ammType ? ammType : AmmPanelType.Deposit}\n                  ammDepositBtnI18nKey={ammDepositBtnI18nKey}\n                  ammWithdrawBtnI18nKey={ammWithdrawBtnI18nKey}\n                  ammDepositBtnStatus={isLoading()?TradeBtnStatus.LOADING:TradeBtnStatus.AVAILABLE}\n                  ammWithdrawBtnStatus={isLoading()?TradeBtnStatus.LOADING:TradeBtnStatus.AVAILABLE}\n\n        /> : <Box width={'var(--swap-box-width)'}/>}\n    </>\n\n}","import React, { useState } from \"react\";\nimport {\n    AccountStatus,\n    AmmData,\n    AmmInData,\n    CoinInfo,\n    fnType,\n    globalSetup,\n    IBData,\n    SagaStatus,\n    WalletMap\n} from '@loopring-web/common-resources';\nimport { AmmPanelType } from '@loopring-web/component-lib';\nimport { IdMap, useTokenMap } from '../../../stores/token';\nimport { useAmmMap } from '../../../stores/Amm/AmmMap';\nimport { accountStaticCallBack, ammPairInit, bntLabel, btnClickMap, makeCache } from '../../../hooks/help';\nimport * as sdk from 'loopring-sdk';\nimport {\n    AmmPoolRequestPatch,\n    AmmPoolSnapshot,\n    ChainId,\n    dumpError400,\n    ExitAmmPoolRequest,\n    GetAmmPoolSnapshotRequest,\n    getExistedMarket,\n    GetNextStorageIdRequest,\n    GetOffchainFeeAmtRequest,\n    JoinAmmPoolRequest,\n    LoopringMap,\n    makeExitAmmPoolRequest,\n    makeJoinAmmPoolRequest,\n    MarketInfo,\n    OffchainFeeInfo,\n    OffchainFeeReqType,\n    TickerData,\n    toBig,\n    TokenInfo\n} from 'loopring-sdk';\nimport { useCustomDCEffect } from '../../../hooks/common/useCustomDCEffect';\nimport { useAccount } from '../../../stores/account/hook';\nimport store from \"stores\";\nimport { LoopringAPI } from \"stores/apis/api\";\nimport { debounce } from \"lodash\";\n// import { AccountStatus } from \"state_machine/account_machine_spec\";\nimport { deepClone } from '../../../utils/obj_tools';\nimport { useWalletLayer2 } from \"stores/walletLayer2\";\nimport { myLog } from \"utils/log_tools\";\nimport { BIG10 } from \"defs/swap_defs\";\nimport { REFRESH_RATE_SLOW } from \"defs/common_defs\";\nimport { useTranslation } from \"react-i18next\";\n\nexport const useAmmPanel = <C extends { [ key: string ]: any }>({\n                                                                    pair,\n                                                                    walletMap,\n                                                                    ammType,\n                                                                    snapShotData,\n                                                                }\n                                                                    : {\n    pair: { coinAInfo: CoinInfo<C> | undefined, coinBInfo: CoinInfo<C> | undefined },\n    snapShotData: { tickerData: TickerData | undefined, ammPoolsBalance: AmmPoolSnapshot | undefined } | undefined\n    walletMap: WalletMap<C>\n    ammType: keyof typeof AmmPanelType\n}) => {\n\n    const [ammToastOpen, setAmmToastOpen] = useState<boolean>(false)\n    const [ammAlertText, setAmmAlertText] = useState<string>()\n    const {delayAndUpdateWalletLayer2} = useWalletLayer2();\n    const {t} = useTranslation('common')\n    const {coinMap, tokenMap} = useTokenMap();\n    const {ammMap} = useAmmMap();\n    const {account, status: accountStatus} = useAccount();\n    const [ammCalcData, setAmmCalcData] = React.useState<AmmInData<C> | undefined>();\n    const nodeTimer = React.useRef<NodeJS.Timeout | -1>(-1);\n    const [ammJoinData, setAmmJoinData] = React.useState<AmmData<IBData<C>, C>>({\n        coinA: {belong: undefined} as unknown as IBData<C>,\n        coinB: {belong: undefined} as unknown as IBData<C>,\n        slippage: 0.5\n    } as AmmData<IBData<C>, C>);\n\n    const [ammExitData, setAmmExitData] = React.useState({\n        coinA: {belong: undefined} as unknown as IBData<C>,\n        coinB: {belong: undefined} as unknown as IBData<C>,\n        slippage: 0.5\n    } as AmmData<IBData<C>, C>);\n\n    const [ammDepositBtnI18nKey, setAmmDepositBtnI18nKey] = React.useState<string | undefined>(undefined);\n    const [ammWithdrawBtnI18nKey, setAmmWithdrawBtnI18nKey] = React.useState<string | undefined>(undefined);\n\n    const initAmmData = React.useCallback(async (pair: any) => {\n        let _ammCalcData = ammPairInit(\n            {\n                pair,\n                ammType,\n                _ammCalcData: {},\n                tokenMap,\n                coinMap,\n                walletMap: walletMap, //walletLayer2State.walletLayer2,\n                ammMap,\n                tickerData: snapShotData?.tickerData,\n                ammPoolsBalance: snapShotData?.ammPoolsBalance\n            })\n\n        setAmmCalcData({...ammCalcData, ..._ammCalcData});\n        if (_ammCalcData.myCoinA) {\n            setAmmJoinData({\n                coinA: {..._ammCalcData.myCoinA, tradeValue: undefined},\n                coinB: {..._ammCalcData.myCoinB, tradeValue: undefined},\n                slippage: 0.5\n            })\n            setAmmExitData({\n                coinA: {..._ammCalcData.lpCoinA, tradeValue: undefined},\n                coinB: {..._ammCalcData.lpCoinB, tradeValue: undefined},\n                slippage: 0.5\n            })\n        }\n    }, [snapShotData, walletMap, coinMap, tokenMap, ammCalcData, ammMap, ammType])\n\n    const [ammPoolSnapshot, setAmmPoolSnapShot] = useState<AmmPoolSnapshot>()\n    const updateAmmPoolSnapshot = React.useCallback(async () => {\n\n        if (!pair.coinAInfo?.simpleName || !pair.coinBInfo?.simpleName || !LoopringAPI.ammpoolAPI) {\n            setAmmAlertText(t('labelAmmJoinFailed'))\n            return\n        }\n\n        const {marketArray, marketMap,} = store.getState().tokenMap\n\n        const {ammMap} = store.getState().amm.ammMap\n\n        const {market, amm} = getExistedMarket(marketArray, pair.coinAInfo.simpleName as string,\n            pair.coinBInfo.simpleName as string)\n\n        if (!market || !amm || !marketMap) {\n            return\n        }\n\n        const ammInfo: any = ammMap[ amm as string ]\n\n        const request1: GetAmmPoolSnapshotRequest = {\n            poolAddress: ammInfo.address\n        }\n\n        const response = await LoopringAPI.ammpoolAPI.getAmmPoolSnapshot(request1)\n\n        if (!response) {\n            return\n        }\n\n        const {ammPoolSnapshot} = response\n\n        setAmmPoolSnapShot(ammPoolSnapshot)\n    }, [])\n\n    React.useEffect( () => {\n        if(nodeTimer.current !== -1){\n            clearInterval(nodeTimer.current as NodeJS.Timeout);\n        }\n        nodeTimer.current = setInterval( () => {\n            updateAmmPoolSnapshot()\n        }, REFRESH_RATE_SLOW)\n        \n        updateAmmPoolSnapshot()\n\n        return ()=>{\n            if(nodeTimer.current !== -1){\n                clearInterval(nodeTimer.current as NodeJS.Timeout);\n            }\n        }\n\n    }, [nodeTimer.current])\n\n    // set fees\n\n    const [joinFees, setJoinFees] = useState<LoopringMap<OffchainFeeInfo>>()\n    const [exitFees, setExitfees] = useState<LoopringMap<OffchainFeeInfo>>()\n    const {account: {accountId, apiKey}} = useAccount()\n\n    // const { status } = useSelector((state: RootState) => state.account)\n\n    useCustomDCEffect(async () => {\n        if (accountStatus === SagaStatus.UNSET) {\n            const label: string | undefined = accountStaticCallBack(bntLabel)\n            setAmmDepositBtnI18nKey(label);\n            setAmmWithdrawBtnI18nKey(label)\n\n            if (!LoopringAPI.userAPI || !pair.coinBInfo?.simpleName\n                || account.readyState !== AccountStatus.ACTIVATED\n                || !ammCalcData || !tokenMap) {\n                return\n            }\n            const feeToken: TokenInfo = tokenMap[ pair.coinBInfo.simpleName ]\n\n            const requestJoin: GetOffchainFeeAmtRequest = {\n                accountId: account.accountId,\n                requestType: OffchainFeeReqType.AMM_JOIN,\n                tokenSymbol: pair.coinBInfo.simpleName as string,\n            }\n\n            const {fees: feesJoin} = await LoopringAPI.userAPI.getOffchainFeeAmt(requestJoin, account.apiKey)\n            setJoinFees(feesJoin)\n\n            const feeJoin = sdk.toBig(feesJoin[ pair.coinBInfo.simpleName ]?.fee as string).div('1e' + feeToken.decimals).toString()\n                + ' ' + pair.coinBInfo.simpleName\n\n            const requestExit: GetOffchainFeeAmtRequest = {\n                accountId: account.accountId,\n                requestType: OffchainFeeReqType.AMM_EXIT,\n                tokenSymbol: pair.coinBInfo.simpleName as string,\n            }\n            const {fees: feesExit} = await LoopringAPI.userAPI.getOffchainFeeAmt(requestExit, account.apiKey)\n\n            setExitfees(feesExit)\n\n            const feeExit = sdk.toBig(feesExit[ pair.coinBInfo.simpleName ].fee as string).div('1e' + feeToken.decimals).toString()\n                + ' ' + pair.coinBInfo.simpleName\n\n            myLog('-> feeJoin:', feeJoin, ' feeExit:', feeExit)\n\n            setAmmCalcData({...ammCalcData, feeJoin, feeExit})\n        }\n    }, [accountStatus])\n\n    // join\n\n    const [joinRequest, setJoinRequest] = useState<{ ammInfo: any, request: JoinAmmPoolRequest }>()\n\n    const handlerJoinInDebounce = React.useCallback(debounce(async (data, type, joinFees, ammPoolSnapshot) => {\n\n\n        if (!data || !tokenMap || !data.coinA.belong || !data.coinB.belong || !ammPoolSnapshot || !joinFees) {\n            return\n        }\n\n        myLog('handlerJoinInDebounce', data, type);\n\n        const {slippage} = data\n\n        const slippageReal = sdk.toBig(slippage).div(100).toString()\n\n        const isAtoB = type === 'coinA'\n\n\n        const {idIndex, marketArray, marketMap,} = store.getState().tokenMap\n\n        const {ammMap} = store.getState().amm.ammMap\n\n        const {market, amm} = getExistedMarket(marketArray, data.coinA.belong as string,\n            data.coinB.belong as string)\n\n        if (!market || !amm || !marketMap) {\n            return\n        }\n\n        const marketInfo: MarketInfo = marketMap[ market ]\n\n        const ammInfo: any = ammMap[ amm as string ]\n\n        const coinA = tokenMap[ data.coinA.belong as string ]\n        const coinB = tokenMap[ data.coinB.belong as string ]\n\n        const coinA_TV = ammPoolSnapshot.pooled[ 0 ]\n        const coinB_TV = ammPoolSnapshot.pooled[ 1 ]\n\n        const covertVal = data.coinA.tradeValue ? sdk.toBig(data.coinA.tradeValue)\n            .times('1e' + isAtoB ? coinA.decimals : coinB.decimals).toFixed(0, 0) : '0'\n        const {output, ratio} = sdk.ammPoolCalc(covertVal, isAtoB, coinA_TV, coinB_TV)\n        const rawA = data.coinA.tradeValue ? data.coinA.tradeValue.toString() : 0;\n        const rawB = data.coinB.tradeValue ? data.coinB.tradeValue.toString() : 0;\n        const rawVal = isAtoB ? rawA : rawB;\n\n        const {request} = makeJoinAmmPoolRequest(rawVal,\n            isAtoB, slippageReal, account.accAddress, joinFees as LoopringMap<OffchainFeeInfo>,\n            ammMap[ amm ], ammPoolSnapshot, tokenMap as any, idIndex as IdMap, 0, 0)\n\n        if (isAtoB) {\n            data.coinB.tradeValue = parseFloat(toBig(request.joinTokens.pooled[ 1 ].volume)\n                .div('1e' + coinB.decimals).toFixed(marketInfo.precisionForPrice))\n        } else {\n            data.coinA.tradeValue = parseFloat(toBig(request.joinTokens.pooled[ 0 ].volume)\n                .div('1e' + coinA.decimals).toFixed(marketInfo.precisionForPrice))\n        }\n\n        setAmmJoinData({\n            coinA: data.coinA as IBData<C>,\n            coinB: data.coinB as IBData<C>,\n            slippage: slippage\n        })\n\n        setJoinRequest({\n            ammInfo,\n            request\n        })\n        // }\n\n    }, globalSetup.wait), [account])\n\n    const handleJoinAmmPoolEvent = React.useCallback(async (data: AmmData<IBData<any>>, type: 'coinA' | 'coinB') => {\n        await handlerJoinInDebounce(data, type, joinFees, ammPoolSnapshot)\n    }, [joinFees, handlerJoinInDebounce, ammPoolSnapshot]);\n\n    const addToAmmCalculator = React.useCallback(async function (props\n    ) {\n\n        setJoinLoading(true)\n        if (!LoopringAPI.ammpoolAPI || !LoopringAPI.userAPI || !joinRequest) {\n            myLog(' onAmmJoin ammpoolAPI:', LoopringAPI.ammpoolAPI,\n                'joinRequest:', joinRequest)\n\n            setAmmAlertText(t('labelJoinAmmFailed'))\n            setAmmToastOpen(true)\n\n            setJoinLoading(false)\n            return\n        }\n\n        //todo add loading\n\n        // const acc: Lv2Account = store.getState().account\n\n        const {ammInfo, request} = joinRequest\n\n        const patch: AmmPoolRequestPatch = {\n            chainId: store.getState().system.chainId as ChainId,\n            ammName: ammInfo.__rawConfig__.name,\n            poolAddress: ammInfo.address,\n            eddsaKey: account.eddsaKey\n        }\n\n        try {\n\n            const request2: GetNextStorageIdRequest = {\n                accountId: account.accountId,\n                sellTokenId: request.joinTokens.pooled[ 0 ].tokenId as number\n            }\n            const storageId0 = await LoopringAPI.userAPI.getNextStorageId(request2, account.apiKey)\n\n            const request_1: GetNextStorageIdRequest = {\n                accountId: account.accountId,\n                sellTokenId: request.joinTokens.pooled[ 1 ].tokenId as number\n            }\n            const storageId1 = await LoopringAPI.userAPI.getNextStorageId(request_1, account.apiKey)\n\n            request.storageIds = [storageId0.offchainId, storageId1.offchainId]\n            setAmmJoinData({\n                ...ammJoinData, ...{\n                    coinA: {...ammJoinData.coinA, tradeValue: 0},\n                    coinB: {...ammJoinData.coinB, tradeValue: 0},\n                }\n            })\n            const response = await LoopringAPI.ammpoolAPI.joinAmmPool(request, patch, account.apiKey)\n\n            myLog('join ammpool response:', response)\n\n            await delayAndUpdateWalletLayer2()\n\n            setAmmAlertText(t('labelJoinAmmSuccess'))\n\n        } catch (reason) {\n\n            dumpError400(reason)\n\n            setAmmAlertText(t('labelJoinAmmFailed'))\n        } finally {\n            setAmmToastOpen(true)\n            setJoinLoading(false)\n        }\n        if (props.__cache__) {\n            makeCache(props.__cache__)\n        }\n    }, [joinRequest, ammJoinData, account, delayAndUpdateWalletLayer2, t])\n\n    const onAmmDepositClickMap: typeof btnClickMap = Object.assign(deepClone(btnClickMap), {\n        [ fnType.ACTIVATED ]: [addToAmmCalculator]\n    })\n    const onAmmAddClick = React.useCallback((props: AmmData<IBData<any>>) => {\n        accountStaticCallBack(onAmmDepositClickMap, [props])\n    }, [onAmmDepositClickMap]);\n\n    // exit\n    const [exitRequest, setExitRequest] = useState<{ rawVal: '', ammInfo: any, request: ExitAmmPoolRequest }>()\n\n    // const handler = React.useCallback(async () =>,[])\n    const handleExitInDebounce = React.useCallback(debounce(async (data, type, exitFees, ammPoolSnapshot) => {\n\n        if (!tokenMap || !data.coinA.belong || !data.coinB.belong || !ammPoolSnapshot || !exitFees) {\n            return\n        }\n\n        myLog('handleExitInDebounce', data, type);\n\n        const isAtoB = type === 'coinA'\n\n        // const acc: Lv2Account = store.getState().account\n\n        const {idIndex, marketArray, marketMap,} = store.getState().tokenMap\n\n        const {ammMap} = store.getState().amm.ammMap\n\n        const {market, amm} = getExistedMarket(marketArray, data.coinA.belong as string,\n            data.coinB.belong as string)\n\n        if (!market || !amm || !marketMap) {\n            return\n        }\n\n        const marketInfo: MarketInfo = marketMap[ market ]\n\n        const ammInfo: any = ammMap[ amm as string ]\n\n        const coinA = tokenMap[ data.coinA.belong as string ]\n        const coinB = tokenMap[ data.coinB.belong as string ]\n\n        const coinA_TV = ammPoolSnapshot.pooled[ 0 ]\n        const coinB_TV = ammPoolSnapshot.pooled[ 1 ]\n\n        const covertVal = data.coinA.tradeValue ? sdk.toBig(data.coinA.tradeValue)\n            .times('1e' + isAtoB ? coinA.decimals : coinB.decimals).toFixed(0, 0) : '0'\n        const {output, ratio} = sdk.ammPoolCalc(covertVal, isAtoB, coinA_TV, coinB_TV)\n\n        const rawVal = isAtoB ? data.coinA.tradeValue.toString() : data.coinB.tradeValue.toString()\n\n        const {request} = makeExitAmmPoolRequest(rawVal, isAtoB, '0.001', account.accAddress, exitFees as LoopringMap<OffchainFeeInfo>,\n            ammMap[ amm ], ammPoolSnapshot, tokenMap as any, idIndex as IdMap, 0)\n\n        if (isAtoB) {\n            data.coinB.tradeValue = parseFloat(toBig(request.exitTokens.unPooled[ 1 ].volume)\n                .div('1e' + coinB.decimals).toFixed(marketInfo.precisionForPrice))\n        } else {\n            data.coinA.tradeValue = parseFloat(toBig(request.exitTokens.unPooled[ 0 ].volume)\n                .div('1e' + coinA.decimals).toFixed(marketInfo.precisionForPrice))\n        }\n\n        setAmmExitData({\n            coinA: data.coinA as IBData<C>,\n            coinB: data.coinB as IBData<C>,\n            slippage: 0.5\n        })\n\n        setExitRequest({\n            rawVal,\n            ammInfo,\n            request,\n        })\n        // }\n\n    }, globalSetup.wait), [])\n\n    const handleExitAmmPoolEvent = React.useCallback(async (data: AmmData<IBData<any>>, type: 'coinA' | 'coinB') => {\n        await handleExitInDebounce(data, type, exitFees, ammPoolSnapshot)\n    }, [exitFees, ammPoolSnapshot, handleExitInDebounce]);\n\n\n    const [isJoinLoading, setJoinLoading] = useState(false)\n\n    const [isExitLoading, setExitLoading] = useState(false)\n\n    const removeAmmCalculator = React.useCallback(async function (props\n    ) {\n        setExitLoading(true);\n        //TODO: onExit\n        myLog('removeAmmCalculator props:', props)\n\n        // const { exitRequest } = props\n\n        if (!LoopringAPI.ammpoolAPI || !LoopringAPI.userAPI || !exitRequest) {\n            myLog(' onExit ammpoolAPI:', LoopringAPI.ammpoolAPI,\n                'exitRequest:', exitRequest)\n\n            setAmmAlertText(t('labelExitAmmFailed'))\n            setAmmToastOpen(true)\n\n            setExitLoading(false);\n            return\n        }\n\n        // const acc: Lv2Account = store.getState().account\n\n        const {ammInfo, request} = exitRequest\n\n        const patch: AmmPoolRequestPatch = {\n            chainId: store.getState().system.chainId as ChainId,\n            ammName: ammInfo.__rawConfig__.name,\n            poolAddress: ammInfo.address,\n            eddsaKey: account.eddsaKey\n        }\n\n        const burnedReq: GetNextStorageIdRequest = {\n            accountId: account.accountId,\n            sellTokenId: request.exitTokens.burned.tokenId as number\n        }\n        const storageId0 = await LoopringAPI.userAPI.getNextStorageId(burnedReq, account.apiKey)\n\n        request.storageId = storageId0.offchainId\n\n        try {\n\n            myLog('exit req:', request)\n            setAmmExitData({\n                ...ammExitData, ...{\n                    coinA: {...ammExitData.coinA, tradeValue: 0},\n                    coinB: {...ammExitData.coinB, tradeValue: 0},\n                }\n            })\n            const response = await LoopringAPI.ammpoolAPI.exitAmmPool(request, patch, account.apiKey)\n\n            myLog('exit ammpool response:', response)\n\n            await delayAndUpdateWalletLayer2()\n\n            setAmmAlertText(t('labelExitAmmSuccess'))\n        } catch (reason) {\n            dumpError400(reason)\n            setAmmAlertText(t('labelExitAmmFailed'))\n        } finally {\n            setAmmToastOpen(true)\n            setExitLoading(false)\n        }\n\n        // if (props.__cache__) {\n        //     makeCache(props.__cache__)\n        // }\n\n    }, [exitRequest, ammExitData, delayAndUpdateWalletLayer2, account, t])\n\n    const removeAmmClickMap: typeof btnClickMap = Object.assign(deepClone(btnClickMap), {\n        [ fnType.ACTIVATED ]: [removeAmmCalculator]\n    })\n\n    const onAmmRemoveClick = React.useCallback((props: AmmData<IBData<any>>) => {\n\n        myLog('onAmmRemoveClick, exitRequest:', exitRequest, ' ammExitData:', ammExitData)\n        accountStaticCallBack(removeAmmClickMap, [props])\n    }, [exitRequest, ammExitData, removeAmmClickMap]);\n\n    React.useEffect(() => {\n        console.log('initAmmData--->')\n        if (snapShotData) {\n            initAmmData(pair)\n        }\n    }, [snapShotData, pair, walletMap]);\n\n    return {\n        ammAlertText,\n        ammToastOpen,\n        setAmmToastOpen,\n\n        ammCalcData,\n        ammJoinData,\n        ammExitData,\n        isJoinLoading,\n        isExitLoading,\n        handleJoinAmmPoolEvent,\n        handleExitAmmPoolEvent,\n        onAmmRemoveClick,\n        onAmmAddClick,\n        ammDepositBtnI18nKey,\n        ammWithdrawBtnI18nKey,\n    }\n}","import React from \"react\";\nimport { AmmActivity, CoinInfo, MyAmmLP, SagaStatus, TradeFloat } from \"@loopring-web/common-resources\";\nimport { useTokenMap } from \"stores/token\";\nimport { useRouteMatch } from 'react-router';\nimport moment from 'moment'\nimport { AmmDetailStore, useAmmMap } from '../../../stores/Amm/AmmMap';\nimport { useWalletLayer2 } from '../../../stores/walletLayer2';\nimport { makeTickView, makeWalletLayer2, pairDetailBlock, WalletMapExtend } from '../../../hooks/help';\nimport { AmmPoolSnapshot, AmmUserRewardMap, getExistedMarket, TickerData, TradingInterval } from 'loopring-sdk';\nimport { deepClone } from '../../../utils/obj_tools';\nimport { getUserAmmTransaction, makeMyAmmMarketArray } from '../../../hooks/help/marketTable';\nimport { AmmRecordRow } from '@loopring-web/component-lib';\nimport { AmmPoolActivityRule, LoopringMap } from 'loopring-sdk/dist/defs/loopring_defs';\nimport { useSystem } from '../../../stores/system';\nimport { makeMyAmmWithSnapshot } from '../../../hooks/help/makeUIAmmActivityMap';\nimport { useUserRewards } from '../../../stores/userRewards';\nimport { LoopringAPI } from 'stores/apis/api';\n\nconst makeAmmDetailExtendsActivityMap = ({ammMap, coinMap, ammActivityMap, ammKey}: any) => {\n\n    if (ammMap && coinMap) {\n        let ammDetail = deepClone(ammMap[ ammKey as string ]);\n        const ammActivity = ammActivityMap [ ammKey as string ];\n\n        if (ammDetail && ammDetail.coinA) {\n            ammDetail.myCoinA = coinMap[ ammDetail.coinA ];\n            ammDetail.myCoinB = coinMap[ ammDetail.coinB ];\n            ammDetail[ 'activity' ] = ammActivity ? ammActivity : {};\n        }\n        return ammDetail;\n    }\n}\ntype PgAmmDetail<C extends { [ key: string ]: any }> = AmmDetailStore<C> & {\n    myCoinA: CoinInfo<C>,\n    myCoinB: CoinInfo<C>,\n    activity: AmmActivity<C> | undefined\n}\n\nexport type ammHistoryItem = {\n    close: number;\n    timeStamp: number;\n}\n\nexport const useCoinPair = <C extends { [ key: string ]: any }>(ammActivityMap: LoopringMap<LoopringMap<AmmPoolActivityRule[]>>) => {\n    const match: any = useRouteMatch(\"/liquidity/pools/coinPair/:symbol\")\n    const {coinMap, tokenMap, marketArray} = useTokenMap();\n    const {faitPrices} = useSystem();\n    const {ammMap, getAmmMap, status: ammMapStatus} = useAmmMap();\n    const {userRewardsMap, status: useUserRewardsStatus} = useUserRewards()\n\n    // const {account} = useAccount();\n\n\n    // const {ammMap, getAmmMap} = ammMapState;\n\n    // const {ammMap,updateAmmMap} = useAmmMap();\n    // const walletLayer2State = useWalletLayer2();\n    const {walletLayer2, status: walletLayer2Status} = useWalletLayer2();\n    const [walletMap, setWalletMap] = React.useState<WalletMapExtend<C> | undefined>(undefined);\n    // const [ammRecordArray, setAmmRecordArray] = React.useState<AmmRecordRow<C>[]>([]);\n    const [ammMarketArray, setAmmMarketArray] = React.useState<AmmRecordRow<C>[]>([]);\n\n\n    const [myAmmMarketArray, setMyAmmMarketArray] = React.useState<AmmRecordRow<C>[]>([]);\n    const [ammUserRewardMap, setAmmUserRewardMap] = React.useState<AmmUserRewardMap | undefined>(undefined);\n    const [snapShotData, setSnapShotData] = React.useState<{\n        tickerData: TickerData | undefined\n        ammPoolsBalance: AmmPoolSnapshot | undefined\n    } | undefined>(undefined);\n\n    const [myAmm, setMyAmm] = React.useState<MyAmmLP<C>>(\n        {\n            feeA: 0,\n            feeB: 0,\n            feeDollar: 0,\n            feeYuan: 0,\n            reward: 0,\n            rewardToken: undefined as any,\n            balanceA: 0,\n            balanceB: 0,\n            balanceYuan: 0,\n            balanceDollar: 0,\n        })\n    // const [ammPoolsBalance, setAmmpoolsbalance] = React.useState<AmmPoolSnapshot|undefined>(undefined);\n    const [coinPairInfo, setCoinPairInfo] = React.useState<PgAmmDetail<C>>({\n        myCoinA: undefined,\n        myCoinB: undefined,\n        activity: undefined,\n        totalRewards: undefined,\n        amountDollar: undefined,\n        amountYuan: undefined,\n        totalLPToken: undefined,\n        totalA: undefined,\n        totalB: undefined,\n        rewardToken: undefined,\n        rewardValue: undefined,\n        feeA: undefined,\n        feeB: undefined,\n        isNew: undefined,\n        isActivity: undefined,\n        APY: undefined\n    } as unknown as PgAmmDetail<C>);\n    const [tradeFloat, setTradeFloat] = React.useState<TradeFloat | undefined>(undefined);\n    const [pair, setPair] = React.useState<{ coinAInfo: CoinInfo<C> | undefined, coinBInfo: CoinInfo<C> | undefined }>({\n        coinAInfo: undefined,\n        coinBInfo: undefined,\n    });\n    const [pairHistory, setPairHistory] = React.useState<ammHistoryItem[]>([])\n\n    const walletLayer2DoIt = React.useCallback((market) => {\n        const {walletMap: _walletMap} = makeWalletLayer2();\n\n        setWalletMap(_walletMap as WalletMapExtend<any>)\n        if (_walletMap) {\n            getUserAmmTransaction()?.then((marketTrades) => {\n                let _myTradeArray = makeMyAmmMarketArray(market, marketTrades)\n                setMyAmmMarketArray(_myTradeArray ? _myTradeArray : [])\n            })\n        }\n        return _walletMap\n    }, [makeWalletLayer2, getUserAmmTransaction, makeMyAmmMarketArray, marketArray, pair])\n\n    const getPairList = React.useCallback(async () => {\n        if (LoopringAPI.exchangeAPI && coinPairInfo.coinA && coinPairInfo.coinB) {\n            const {myCoinA, myCoinB} = coinPairInfo\n            const market = `${myCoinA?.name}-${myCoinB?.name}`\n            const ammList = await LoopringAPI.exchangeAPI.getMixCandlestick({\n                market: market,\n                interval: TradingInterval.d1,\n                limit: 30\n            })\n            const formattedPairHistory = ammList.candlesticks.map(o => ({\n                ...o,\n                timeStamp: o.timestamp,\n                date: moment(o.timestamp).format('MMM DD')\n            })).sort((a, b) => a.timeStamp - b.timeStamp)\n            setPairHistory(formattedPairHistory)\n        }\n    }, [coinPairInfo])\n\n    React.useEffect(() => {\n        getPairList()\n    }, [getPairList])\n\n    React.useEffect(() => {\n        const coinKey = match?.params.symbol ?? undefined;\n        let _tradeFloat: Partial<TradeFloat> = {}\n        const [, coinA, coinB] = coinKey.match(/(\\w+)-(\\w+)/i)\n        let {\n            amm,\n            market\n        } = getExistedMarket(marketArray, coinA, coinB);\n\n        const _coinPairInfo = makeAmmDetailExtendsActivityMap({ammMap, coinMap, ammActivityMap, ammKey: amm})\n        setCoinPairInfo(_coinPairInfo ? _coinPairInfo : {})\n\n        if (coinMap) {\n            setPair({\n                coinAInfo: coinMap[ coinA ],\n                coinBInfo: coinMap[ coinB ]\n            })\n        }\n\n        // let _walletMap: WalletMapExtend<C>|undefined = undefined\n        if (walletLayer2) {\n            walletLayer2DoIt(market);\n        }\n\n        if (amm && market && ammMap) {\n            //TODO should add it into websocket\n            getAmmMap();\n            let apiList = [\n                pairDetailBlock({coinKey: market, ammKey: amm, ammMap}),\n                // LoopringAPI.ammpoolAPI.getAmmPoolSnapshot({poolAddress: ammMap[ ammKey ].address}),\n                // LoopringAPI.exchangeAPI.getMixTicker({market: coinKey})])\n            ];\n            // @ts-ignore\n            Promise.all([...apiList]).then(\n                ([{ammPoolsBalance, tickMap}\n                     //  ,ammUserRewardMap\n                 ]: any[]) => {\n                    if (tokenMap) {\n                        const _snapShotData = {\n                            tickerData: tickMap[ market ],\n                            ammPoolsBalance: ammPoolsBalance,\n                        }\n                        _tradeFloat = makeTickView(tickMap[ market ] ? tickMap[ market ] : {})\n                        setTradeFloat(_tradeFloat as TradeFloat);\n                        setCoinPairInfo({..._coinPairInfo})\n                        setSnapShotData(_snapShotData)\n\n                    }\n                }).catch((error) => {\n                console.log(error);\n                throw  Error\n            })\n        }\n\n    }, []);\n\n    React.useEffect(() => {\n        const {market} = getExistedMarket(marketArray, pair.coinAInfo?.simpleName as string, pair.coinBInfo?.simpleName as string);\n        if (market && snapShotData && snapShotData.ammPoolsBalance && walletLayer2Status === SagaStatus.UNSET) {\n            const _walletMap = walletLayer2DoIt(market);\n            const _myAmm: MyAmmLP<C> = makeMyAmmWithSnapshot(market, _walletMap, ammUserRewardMap, snapShotData);\n            setMyAmm(_myAmm)\n            // case \"DONE\":\n            //             walletLayer2State.statusUnset();\n\n            //         break;\n            //     default:\n            //         break;\n            //\n            // }\n        }\n    }, [walletLayer2Status])\n\n    React.useEffect(() => {\n        const {market} = getExistedMarket(marketArray, pair.coinAInfo?.simpleName as string, pair.coinBInfo?.simpleName as string);\n        if (useUserRewardsStatus === SagaStatus.UNSET && market) {\n            // const {userRewardsMap} = store.getState().userRewardsMap\n            setAmmUserRewardMap(userRewardsMap)\n            const _myAmm: MyAmmLP<C> = makeMyAmmWithSnapshot(market, walletMap, ammUserRewardMap, snapShotData);\n            setMyAmm(_myAmm);\n        }\n\n    }, [useUserRewardsStatus])\n\n    React.useEffect(() => {\n        if (ammMapStatus === SagaStatus.UNSET && ammMap && pair.coinAInfo?.simpleName && pair.coinBInfo?.simpleName) {\n            const _coinPairInfo = makeAmmDetailExtendsActivityMap(\n                {\n                    ammMap,\n                    coinMap,\n                    ammActivityMap,\n                    ammKey: 'AMM-' + pair.coinAInfo.simpleName + pair.coinBInfo.simpleName\n                })\n            setCoinPairInfo({\n                ...coinPairInfo, ..._coinPairInfo,\n                tradeFloat: coinPairInfo.tradeFloat\n            })\n\n        }\n    }, [ammMapStatus])\n\n\n    return {\n        walletMap,\n        myAmm,\n        // tickerData,\n        coinPairInfo,\n        snapShotData,\n        // ammPoolsBalance,\n        pair,\n        tradeFloat,\n        ammMarketArray,\n        myAmmMarketArray,\n        pairHistory,\n    }\n}","import React from 'react';\nimport { WithTranslation, withTranslation } from 'react-i18next';\nimport { AmmRecordTable, ChartType, ScaleAreaChart, TradeTitle, useSettings } from '@loopring-web/component-lib';\nimport {\n    AvatarCoinStyled,\n    Currency,\n    EmptyValueTag,\n    getThousandFormattedNumbers,\n    PriceTag,\n    unit\n} from '@loopring-web/common-resources';\nimport { Avatar, Box, Breadcrumbs, Grid, Link, Typography } from '@material-ui/core';\nimport { AmmPanelView } from '../AmmPanel';\nimport moment from 'moment';\nimport styled from '@emotion/styled/';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\n\nimport { useCoinPair } from './hooks';\nimport { AmmPoolActivityRule, LoopringMap } from 'loopring-sdk/dist/defs/loopring_defs';\nimport { StylePaper } from 'pages/styled';\n\n\n//******************** page code ************************//\n//  ${({theme}) => theme.border.defaultFrame({c_key: 'blur'})};\nconst BoxStyled = styled(Box)`\n  flex: 1;\n  background-color: ${({theme}) => theme.colorBase.background().default};\n  border-radius: ${({theme}) => theme.unit}px;\n  padding: ${({theme}) => theme.unit * 2}px;\n  height: 120px;\n  // min-width: 160px;\n  max-width: 210px;\n  // & .MuiAvatar-root {\n    //     height: ${({theme}) => theme.fontDefault.h4};\n    //     width: ${({theme}) => theme.fontDefault.h4};\n  // }\n`;\n\nconst BoxTopStyled = styled(Box)`\n  background-color: ${({theme}) => theme.colorBase.background().default};\n  border-radius: ${({theme}) => theme.unit}px;\n  padding: ${({theme}) => theme.unit * 2}px;\n  width: var(--swap-box-width);\n  box-sizing: border-box;\n  //height: 120px;\n  //min-width: 160px;\n  // & .MuiAvatar-root {\n    //   height: ${({theme}) => theme.fontDefault.h4};\n    //   width: ${({theme}) => theme.fontDefault.h4};\n  // }\n`;\n// const StyleWrapper = styled(Box)`\n//   //position: relative;\n//   //width: 100%;\n//   background-color: ${({theme}) => theme.colorBase.background().default};\n//   border-radius: ${({theme}) => theme.unit}px;\n// ` as typeof Grid\n\n\nconst applyProps = (index: number) => {\n    return {\n        id: `simple-tab-${index}`,\n        'aria-controls': `tabpanel-${index}`,\n    }\n}\n\nexport const CoinPairPanel = withTranslation('common')(<R extends { [ key: string ]: any }, I extends { [ key: string ]: any }>\n({t, ammActivityMap, ...rest}:\n     WithTranslation & { ammActivityMap: LoopringMap<LoopringMap<AmmPoolActivityRule[]>> | undefined } & any) => {    //ActivityMap<I, I>\n    const {currency} = useSettings();\n    const {\n        tradeFloat,\n        snapShotData,\n        pair,\n        coinPairInfo,\n        walletMap,\n        ammMarketArray,\n        myAmmMarketArray,\n        myAmm,\n        pairHistory,\n    } = useCoinPair({ammActivityMap});\n    const [tabIndex, setTabIndex] = React.useState<0 | 1>(0);\n    const [page, setPage] = React.useState(rest?.page ? rest.page : 1);\n    const handleChange = (event: any, newValue: 0 | 1) => {\n        setTabIndex(newValue);\n        setPage(1);\n    }\n    const _handlePageChange = React.useCallback((page: number) => {\n        setPage(page);\n    }, [])\n    // const sellIconHasLoaded = useImage(coinPairInfo.myCoinA?.icon ? coinPairInfo.myCoinA?.icon : '').hasLoaded;\n    // const buyIconHasLoaded = useImage(coinPairInfo.myCoinB?.icon ? coinPairInfo.myCoinB?.icon : '').hasLoaded;\n    const {coinJson} = useSettings();\n    const coinAIcon: any = coinJson [ coinPairInfo.myCoinA?.simpleName ];\n    const coinBIcon: any = coinJson [ coinPairInfo.myCoinB?.simpleName ];\n\n    return <>\n\n        <Grid container>\n            <Grid item xs={7}>\n                <Breadcrumbs aria-label=\"breadcrumb\">\n                    <Link color=\"textSecondary\" href=\"/#/liquidity/pools\">\n                        {t('labelAmmList')}\n                    </Link>\n                    <Typography color={'textSecondary'} display={'flex'} alignItems={'center'}\n                                justifyContent={'center'}\n                    >{pair.coinAInfo?.simpleName}-{pair.coinBInfo?.simpleName}</Typography>\n                </Breadcrumbs>\n                <Grid item xs={12} marginTop={2}>\n                    <TradeTitle {...{\n                        ...rest, t,\n                        ...pair,\n                        tradeFloat,\n                        isNew: false\n                    }}></TradeTitle>\n                </Grid>\n            </Grid>\n            <Grid item xs={4} alignItems={'center'} justifyContent={'flex-end'} display={'flex'}>\n                {typeof coinPairInfo.isActivity === 'undefined'? '':\n                <BoxTopStyled paddingY={3} paddingX={1 / 2 * 5} display={'flex'}\n                              flexDirection={'column'}>\n                    <Box display={'flex'} flexDirection={'row'} justifyContent={'space-between'}>\n                        <Typography display={'flex'} flexDirection={'column'} component={'div'}>\n                            <Typography variant={'body2'} component={'h5'} color={'textSecondary'}>\n                                {t('labelReward')}\n                            </Typography>\n                            <Typography variant={'body1'} component={'span'} color={'textPrimary'}>\n                                {typeof coinPairInfo.isActivity === 'undefined' ? EmptyValueTag : <>\n                                    <Typography\n                                        component={'span'}>{coinPairInfo.activity ? getThousandFormattedNumbers(coinPairInfo.activity.totalRewards) : EmptyValueTag} </Typography>\n                                    <Typography\n                                        component={'span'}>{coinPairInfo.activity?.rewardToken?.simpleName}</Typography>\n                                </>}\n                            </Typography>\n                        </Typography>\n                        <Typography display={'flex'} flexDirection={'column'} alignItems={'flex-end'}\n                                    component={'div'}>\n                            <Typography variant={'body2'} component={'h5'} color={'textSecondary'}>\n                                {t('labelMyReward')}\n                            </Typography>\n                            <Typography variant={'body1'} component={'span'} color={'textPrimary'}>\n                                {/*{typeof coinPairInfo.isActivity === 'undefined' ? EmptyValueTag : <>*/}\n                                {typeof myAmm.reward === 'undefined' ? EmptyValueTag : <>\n\n                                    <Typography\n                                        component={'span'}> {getThousandFormattedNumbers(myAmm.reward)} </Typography>\n                                    <Typography\n                                        component={'span'}> {coinPairInfo.activity?.rewardToken?.simpleName}</Typography></>}\n\n                            </Typography>\n                        </Typography>\n                    </Box>\n                    <Typography alignSelf={'flex-start'} variant={'body2'} color={'textSecondary'}\n                                component=\"span\" marginTop={1}>\n                        {typeof coinPairInfo.isActivity === 'undefined' ? t('labelNoActiveEvent')\n                            : <>\n                                {t('labelDate')} : \n                                <> {' '+moment(coinPairInfo.activity?.duration.from).format('L') + ' - ' + moment(coinPairInfo.activity?.duration.to).format('L')}</>\n                            </>\n                        }\n                    </Typography>\n                </BoxTopStyled>\n                }\n            </Grid>\n            {/*<Grid item xs={4} alignItems={'center'} justifyContent={'flex-end'} display={'flex'}>*/}\n            {/*    <Link href=\"/#/liquidity/pools\" variant={'h5'}>*/}\n            {/*        {t('labelBack')}*/}\n            {/*    </Link>*/}\n            {/*</Grid>*/}\n        </Grid>\n        {/*<Grid container marginTop={3}>*/}\n        {/*   */}\n        {/*</Grid>*/}\n        <Box flex={1} display={'flex'} alignItems={'stretch'} flexDirection=\"row\" marginTop={3}>\n            <Box flex={1} display={'flex'} flexDirection={'column'} marginRight={3} justifyContent={'space-between'}>\n                <Box flex={1} width={'101%'}>\n                    <ScaleAreaChart\n                        type={ChartType.Trend} \n                        data={pairHistory} \n                        extraInfo={pair.coinBInfo?.simpleName}\n                        showXAxis\n                    />\n                </Box>\n                <Box display={'flex'} flexDirection={'row'} justifyContent={'space-between'}>\n                    <BoxStyled paddingX={2} display={'flex'} flexDirection={'column'}>\n                        <Typography component={'p'} color={'textSecondary'} display={'flex'} marginBottom={1 / 2 * 3}\n                        >\n                            {t('labelAmmTotalToken')}\n                        </Typography>\n                        <Typography component={'span'} display={'flex'} flexDirection={'row'}\n                                    justifyContent={'space-between'} alignItems={'center'}\n                                    style={{textTransform: 'capitalize'}} color={'textPrimary'}>\n                            <Box component={'span'} className={'logo-icon'} height={'var(--list-menu-coin-size)'}\n                                 width={'var(--list-menu-coin-size)'} alignItems={'center'} justifyContent={'center'}>\n                                {coinAIcon ?\n                                    <AvatarCoinStyled imgx={coinAIcon.x} imgy={coinAIcon.y}\n                                                      imgheight={coinAIcon.height}\n                                                      imgwidth={coinAIcon.width} size={24}\n                                                      variant=\"circular\"\n                                                      alt={coinPairInfo?.myCoinA?.simpleName as string}\n                                        // src={sellData?.icon}\n                                                      src={'data:image/svg+xml;utf8,' + '<svg width=\"36\" height=\"36\" viewBox=\"0 0 36 36\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M0 0H36V36H0V0Z\"/></svg>'}/>\n                                    : <Avatar variant=\"circular\" alt={coinPairInfo?.myCoinA?.simpleName as string}\n                                              style={{\n                                                  height: 'var(--list-menu-coin-size))',\n                                                  width: 'var(--list-menu-coin-size)'\n                                              }}\n                                        // src={sellData?.icon}\n                                              src={'static/images/icon-default.png'}/>\n                                }</Box>\n                            <Typography justifyContent={'center'} display={'flex'}>\n                                <Typography component={'span'} alignSelf={'right'} height={24} lineHeight={'24px'}>\n                                    {getThousandFormattedNumbers(coinPairInfo.totalA, 6)}</Typography>\n                                <Typography component={'span'} marginLeft={1} alignSelf={'right'} height={24} lineHeight={'24px'}>\n                                    {/*<HiddenHidden>{t('labelLPTotal')}</Hidden>*/}\n                                    {coinPairInfo.myCoinA?.simpleName}\n                                </Typography>\n\n                            </Typography>\n\n                        </Typography>\n                        <Typography component={'span'} display={'flex'} flexDirection={'row'}\n                                    justifyContent={'space-between'} alignItems={'center'} marginTop={1}\n                                    style={{textTransform: 'capitalize'}}>\n                            {/*<Typography component={'span'} marginRight={1 / 2}*/}\n                            {/*            color={'textSecondary'}>*/}\n                            {/*    */}\n                            {/*    /!*<Avatar variant=\"square\" sizes={'small'} alt={'coinLogo'}*!/*/}\n                            {/*    /!*    // src={coinBInfo?.icon}*!/*/}\n                            {/*    /!*        src={buyIconHasLoaded ? coinPairInfo?.myCoinB?.icon : 'static/images/icon-default.png'}/>*!/*/}\n                            {/*</Typography>*/}\n                            <Box component={'span'} className={'logo-icon'} height={'var(--list-menu-coin-size)'}\n                                 width={'var(--list-menu-coin-size)'} alignItems={'center'}\n                                 justifyContent={'center'}>{coinBIcon ?\n                                <AvatarCoinStyled imgx={coinBIcon.x} imgy={coinBIcon.y} imgheight={coinBIcon.height}\n                                                  imgwidth={coinBIcon.width} size={24}\n                                                  variant=\"circular\" alt={coinPairInfo?.myCoinB?.simpleName as string}\n                                    // src={sellData?.icon}\n                                                  src={'data:image/svg+xml;utf8,' + '<svg width=\"36\" height=\"36\" viewBox=\"0 0 36 36\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M0 0H36V36H0V0Z\"/></svg>'}/>\n                                : <Avatar variant=\"circular\" alt={coinPairInfo?.myCoinB?.simpleName as string} style={{\n                                    height: 'var(--list-menu-coin-size)',\n                                    width: 'var(--list-menu-coin-size)'\n                                }}\n                                    // src={sellData?.icon}\n                                          src={'static/images/icon-default.png'}/>}</Box>\n                            <Typography justifyContent={'center'} display={'flex'}>\n                                <Typography component={'span'} alignSelf={'right'} height={24} lineHeight={'24px'}>\n                                    {getThousandFormattedNumbers(coinPairInfo.totalB, 6)}</Typography>\n                                <Typography component={'span'} marginLeft={1} alignSelf={'right'} height={24} lineHeight={'24px'}>\n                                    {/*<Hidden>{t('labelLPTotal')}</Hidden>*/}\n                                    {coinPairInfo.myCoinB?.simpleName}\n                                </Typography>\n\n                            </Typography>\n\n                        </Typography>\n\n                    </BoxStyled>\n                    <BoxStyled paddingX={2} display={'flex'} flexDirection={'column'}>\n                        <Typography component={'p'} color={'textSecondary'} display={'flex'}\n                        >\n                            {t('label24Volume')}\n                        </Typography>\n                        <Typography variant={'h4'} marginTop={4}\n                                    component={'span'}>\n                            {currency === Currency.dollar ? PriceTag.Dollar + getThousandFormattedNumbers(tradeFloat && tradeFloat.priceDollar ? tradeFloat.priceDollar as number : 0, 2)\n                                : PriceTag.Yuan + getThousandFormattedNumbers(tradeFloat && tradeFloat.priceYuan ? tradeFloat.priceYuan as number : 0, 2)}\n                        </Typography>\n\n                    </BoxStyled>\n                    <BoxStyled paddingX={2} display={'flex'} flexDirection={'column'}>\n                        <Typography component={'p'} color={'textSecondary'} display={'flex'}\n                        >\n                            {t('labelTVL')}\n                        </Typography>\n\n                        <Typography variant={'h4'} marginTop={4}\n                                    component={'span'}> {typeof coinPairInfo.amountDollar === 'undefined' ? EmptyValueTag :\n                            currency === Currency.dollar ? PriceTag.Dollar + getThousandFormattedNumbers(coinPairInfo.amountDollar, 2) : PriceTag.Yuan + getThousandFormattedNumbers(coinPairInfo.amountYuan ? coinPairInfo.amountYuan : 0, 2)}\n                        </Typography>\n\n\n                    </BoxStyled>\n                    <BoxStyled paddingX={2} display={'flex'} flexDirection={'column'}>\n                        <Typography component={'p'} color={'textSecondary'} display={'flex'}\n                        >\n                            {t('labelAPY')}\n                        </Typography>\n                        <Typography variant={'h4'} marginTop={4}\n                                    component={'span'}> {coinPairInfo.APY ? coinPairInfo.APY : EmptyValueTag}%\n                        </Typography>\n                    </BoxStyled>\n                </Box>\n            </Box>\n            <Box display={'flex'}>\n                <AmmPanelView pair={pair} walletMap={walletMap} snapShotData={snapShotData}/>\n            </Box>\n        </Box>\n\n        <Grid container marginY={3}>\n            <Grid item xs={12}>\n                <Tabs value={tabIndex}\n                    //   onChange={handleChange}\n                      aria-label=\"tabs switch\">\n                    {/* <Tab label={t('labelAll')} {...applyProps(0)} /> */}\n                    <Tab label={t('labelMe')} {...applyProps(1)} />\n                </Tabs>\n                <StylePaper style={{marginTop: `${unit * 2}px`}}>\n                    {/*ammRecordArray*/}\n                    {tabIndex === 0 ? <AmmRecordTable\n                        rawData={ammMarketArray}\n                        handlePageChange={_handlePageChange} page={page}\n                    /> : <AmmRecordTable rawData={myAmmMarketArray} handlePageChange={_handlePageChange}\n                                         page={page}/>}\n                </StylePaper>\n            </Grid>\n\n        </Grid>\n\n    </>\n\n})\n\n\n\n\n\n\n\n","import { AmmCard, AmmProps, EmptyDefault } from '@loopring-web/component-lib';\nimport React from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { AmmCardProps, AmmData, AmmInData, IBData } from '@loopring-web/common-resources';\nimport { Box, Grid } from '@material-ui/core';\nimport { useAmmMiningUI } from './hook';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport { Trans, withTranslation } from 'react-i18next';\nimport { AmmPoolActivityRule, LoopringMap } from 'loopring-sdk/dist/defs/loopring_defs';\n\ntype ClickHandler = {\n    handleClick: (pair: string) => void\n}\n\nconst AmmCardWrap = React.memo(React.forwardRef((props: AmmCardProps<{ [ key: string ]: any }> & ClickHandler, ref) => {\n    const pair = `${props.coinAInfo.name}-${props.coinBInfo.name}`\n    return props ? <AmmCard ref={ref} {...props} handleClick={() => props.handleClick(pair)}/> : <></>\n}));\n\nconst AmmList = <I extends { [ key: string ]: any }>({ammActivityViewMap}: { ammActivityViewMap: Array<AmmCardProps<I>> }) => {\n    let history = useHistory();\n    const jumpTo = React.useCallback((pair: string) => {\n        if (history) {\n            history.push(`/liquidity/pools/coinPair/${pair}`)\n        }\n    }, [history])\n\n    return <>{ammActivityViewMap.length ? ammActivityViewMap.map((item: AmmCardProps<I>, index) =>\n        <Grid item xs={12} sm={6} lg={4} key={index}>\n            <AmmCardWrap handleClick={jumpTo} {...item as any} />\n        </Grid>\n    ) : <Box flex={1} display={'flex'} alignItems={'center'} justifyContent={'center'} flexDirection={'column'}>\n        <EmptyDefault height={\"calc(100% - 35px)\"} marginTop={10} display={'flex'} flexWrap={'nowrap'} alignItems={'center'} justifyContent={'center'}\n                      flexDirection={'column'} message={() => {\n            return <Trans i18nKey=\"labelEmptyDefault\">\n                Content is Empty\n            </Trans>\n        }}/> </Box>}   </>\n}\n\nexport const AmmMiningView = withTranslation('common')(<T extends AmmData<C extends IBData<I> ? C : IBData<I>>, I,\n    ACD extends AmmInData<I>,\n    C = IBData<I>>({ammProps, t, ammActivityMap, ...rest}: {\n    ammProps: AmmProps<T, I, ACD>,\n    ammActivityMap: LoopringMap<LoopringMap<AmmPoolActivityRule[]>> | undefined,\n} & any) => {\n    const {\n        ammActivityViewMap,\n        ammActivityPastViewMap\n    } = useAmmMiningUI({ammActivityMap});\n    const [tabIndex, setTabIndex] = React.useState<0 | 1>(0);\n    const handleChange = (event: any, newValue: 0 | 1) => {\n        setTabIndex(newValue);\n    }\n\n    return <Grid container spacing={2}>\n        <Grid item xs={12}>\n            <Tabs value={tabIndex}\n                  onChange={handleChange}\n                  aria-label=\"tabs switch\">\n                <Tab label={t('labelCurrentActivities')}/>\n                <Tab label={t('labelPastActivities')}/>\n            </Tabs>\n        </Grid>\n        <AmmList ammActivityViewMap={tabIndex === 0 ? ammActivityViewMap : ammActivityPastViewMap}/>\n    </Grid>\n})\n","import { AmmCardProps } from '@loopring-web/common-resources';\nimport { AmmPoolActivityRule, AmmPoolActivityStatus,LoopringMap } from 'loopring-sdk';\nimport React from 'react';\nimport {\n    makeUIAmmActivityMap\n} from '../../../hooks/help';\n\nimport { useUserRewards } from '../../../stores/userRewards';\n\nexport const useAmmMiningUI = <R extends { [ key: string ]: any }, I extends { [ key: string ]: any }>(\n    {\n        ammActivityMap\n    }: { ammActivityMap: LoopringMap<LoopringMap<AmmPoolActivityRule[]>> | undefined }\n): {\n    ammActivityViewMap: Array<AmmCardProps<I>>,\n    ammActivityPastViewMap: Array<AmmCardProps<I>>\n} => {\n    const  userRewardsMapState =  useUserRewards();// store.getState().userRewardsMap\n    // const {coinMap} = useTokenMap();\n    // const ammMapState = useAmmMap();\n    // const walletLayer2State = useWalletLayer2();\n    const [ammActivityViewMap, setAmmActivityViewMap] = React.useState<Array<AmmCardProps<I>>>([]);\n\n\n    const [ammActivityPastViewMap, setAmmActivityPastViewMap] = React.useState<Array<AmmCardProps<I>>>(\n        []);\n    // const [ammUserRewardMap, setAmmUserRewardMap] = React.useState<AmmUserRewardMap>(\n    //     {});\n\n\n    // );\n    React.useEffect(() => {\n        if(ammActivityMap && Object.keys(ammActivityMap).length>0 ){\n\n           // getAmmPoolUserRewards().then((ammUserRewardMap)=>{\n                // setAmmUserRewardMap(ammUserRewardMap as AmmUserRewardMap);\n                setAmmActivityViewMap(makeUIAmmActivityMap(\n                    {\n                        ammActivityMap,\n                        type: 'AMM_MINING',\n                        ammPoolActivityStatus: [AmmPoolActivityStatus.NotStarted, AmmPoolActivityStatus.InProgress]\n                    }, userRewardsMapState.userRewardsMap\n                ));\n                setAmmActivityPastViewMap(\n                    makeUIAmmActivityMap(\n                        {\n                            ammActivityMap,\n                            type: 'AMM_MINING',\n                            ammPoolActivityStatus: [AmmPoolActivityStatus.EndOfGame]\n                        }, userRewardsMapState.userRewardsMap\n                    ))\n          //  })\n        }\n\n    },[ammActivityMap])\n    React.useEffect(() => {\n            if (userRewardsMapState.status === \"ERROR\") {\n                //TODO: solve error\n                userRewardsMapState.statusUnset();\n            } else if (userRewardsMapState.status === \"DONE\") {\n                userRewardsMapState.statusUnset();\n                setAmmActivityViewMap(\n                    makeUIAmmActivityMap(\n                    {\n                        ammActivityMap,\n                        type: 'AMM_MINING',\n                        ammPoolActivityStatus: [AmmPoolActivityStatus.NotStarted, AmmPoolActivityStatus.InProgress]\n                    }, userRewardsMapState.userRewardsMap\n                ));\n                setAmmActivityPastViewMap(\n                    makeUIAmmActivityMap(\n                        {\n                            ammActivityMap,\n                            type: 'AMM_MINING',\n                            ammPoolActivityStatus: [AmmPoolActivityStatus.EndOfGame]\n                        }, userRewardsMapState.userRewardsMap\n                    ))\n                // if (userRewardsMapState.ammMap) {\n                //     setAmmActivityViewMap(\n                //         makeUIAmmActivityMap(\n                //             {\n                //                 ammActivityMap,\n                //                 type: 'AMM_MINING',\n                //                 ammPoolActivityStatus: [AmmPoolActivityStatus.NotStarted, AmmPoolActivityStatus.InProgress]\n                //             }, ammUserRewardMap\n                //         ))\n                //     setAmmActivityPastViewMap(\n                //         makeUIAmmActivityMap(\n                //             {\n                //                 ammActivityMap,\n                //                 type: 'AMM_MINING',\n                //                 ammPoolActivityStatus: [AmmPoolActivityStatus.EndOfGame]\n                //             }, ammUserRewardMap\n                //         ))\n                //\n                // }\n\n            }\n        },\n        [userRewardsMapState.status]\n    )\n\n\n    return {\n        ammActivityViewMap,\n        ammActivityPastViewMap\n    }\n\n}\n","import { AmmPoolActivityRule, LoopringMap } from 'loopring-sdk';\nimport React from 'react';\nimport { AmmRecordRow, MyPoolRow } from '@loopring-web/component-lib';\nimport { makeWalletLayer2, WalletMapExtend } from '../../../hooks/help/makeWallet';\nimport {\n    getUserAmmTransaction,\n    makeMyAmmMarketArray,\n    makeMyPoolRowWithPoolState,\n    makeSummaryMyAmm,\n    SummaryMyAmm\n} from '../../../hooks/help';\nimport { useTokenMap } from '../../../stores/token';\nimport { useWalletLayer2 } from '../../../stores/walletLayer2';\nimport { useUserRewards } from '../../../stores/userRewards';\nimport { useAmmMap } from '../../../stores/Amm/AmmMap';\nimport { SagaStatus } from '@loopring-web/common-resources';\n\n\nexport const useOverview = <R extends { [ key: string ]: any }, I extends { [ key: string ]: any }>(\n    {\n        ammActivityMap\n    }: { ammActivityMap: LoopringMap<LoopringMap<AmmPoolActivityRule[]>> | undefined }\n): {\n    myAmmMarketArray: AmmRecordRow<R>[],\n    summaryReward: SummaryMyAmm | undefined,\n    myPoolRow: MyPoolRow<R>[]\n    // ammActivityViewMap: Array<AmmCardProps<I>>,\n    // ammActivityPastViewMap: Array<AmmCardProps<I>>\n} => {\n    const {walletLayer2, status: walletLayer2Status} = useWalletLayer2();\n    const userRewardsMapState = useUserRewards();\n    const {marketArray} = useTokenMap();\n    const ammMapState = useAmmMap();\n    const {ammMap} = ammMapState;\n\n    // const [walletMap, setWalletMap] = React.useState<WalletMapExtend<R> | undefined>(undefined);\n    const [summaryReward, setSummaryReward] = React.useState<SummaryMyAmm | undefined>(undefined);\n    const [myPoolRow, setMyPoolRow] = React.useState<MyPoolRow<R>[]>([])\n    const [myAmmMarketArray, setMyAmmMarketArray] = React.useState<AmmRecordRow<R>[]>([]);\n    // const [ammUserRewardMap, setAmmUserRewardMap] = React.useState<AmmUserRewardMap|undefined>(undefined);\n    // const [snapShotData,setSnapShotData] = React.useState<{\n    //     tickerData: TickerData|undefined\n    //     ammPoolsBalance: AmmPoolSnapshot|undefined\n    // }|undefined>(undefined);\n    const walletLayer2DoIt = React.useCallback(() => {\n        const {walletMap: _walletMap} = makeWalletLayer2();\n        // setWalletMap(_walletMap as WalletMapExtend<any>)\n        if (_walletMap) {\n            getUserAmmTransaction()?.then((marketTrades) => {\n                let _myTradeArray = makeMyAmmMarketArray(undefined, marketTrades)\n                setMyAmmMarketArray(_myTradeArray ? _myTradeArray : [])\n            })\n        }\n        return _walletMap\n    }, [makeWalletLayer2, getUserAmmTransaction, makeMyAmmMarketArray, marketArray])\n    const makeMyPoolRow = React.useCallback((_walletMap): MyPoolRow<R>[] => {\n        if (_walletMap && ammMap) {\n            // @ts-ignore\n            const _myPoolRow: MyPoolRow<R>[] = Reflect.ownKeys(_walletMap).reduce((prev: MyPoolRow<R>[], walletKey: string) => {\n                if (/LP-/i.test(walletKey)) {\n                    const ammKey = walletKey.replace('LP-', 'AMM-');\n                    const marketKey = walletKey.replace('LP-', '');\n                    let rowData: MyPoolRow<R> | undefined;\n                    //TODO：websocket open\n                    //  if(ammPoolSnapShots)\n                    // makeData by snapshot else\n                    // else\n\n                    rowData = makeMyPoolRowWithPoolState(\n                        {\n                            ammDetail: ammMap[ ammKey ],\n                            walletMap: _walletMap,\n                            market: marketKey,\n                            ammUserRewardMap: userRewardsMapState.userRewardsMap\n                        }\n                    ) as any\n                    if (rowData !== undefined) {\n                        prev.push(rowData);\n                    }\n                }\n                return prev\n            }, [] as MyPoolRow<R>[])\n            // console.log('rowData',_myPoolRow);\n            return _myPoolRow;\n        }\n        return [];\n    }, [ammMap, userRewardsMapState.userRewardsMap])\n\n    // React.useEffect(() => {\n    //     if (walletLayer2) {\n    //         const _walletMap = walletLayer2DoIt();\n    //         if (ammMap) {\n    //             const _myPoolRow = makeMyPoolRow(_walletMap)\n    //             setMyPoolRow(_myPoolRow)\n    //         }\n    //     }\n    // }, []);\n    // const {walletLayer2, status: walletLayer2Status} = useWalletLayer2();\n\n    React.useEffect(() => {\n        //ammMapState.ammMap or\n        if (walletLayer2Status === SagaStatus.UNSET && ammMapState.ammMap) {\n            const _walletMap = walletLayer2DoIt();\n            // //TODO check AmmMap state or ammSnapshot sockets\n            // //userRewardsMapState is an option but  walletLayer2 amd ammMapState.ammMap is required\n            //     if () {\n            const _myPoolRow = makeMyPoolRow(_walletMap);\n            setMyPoolRow(_myPoolRow)\n            // }\n        }\n        // }\n    }, [walletLayer2Status])\n\n    React.useEffect(() => {\n        if (ammMapState.status === \"ERROR\") {\n            //TODO: solve error\n            ammMapState.statusUnset();\n        } else if (ammMapState.status === \"DONE\") {\n            ammMapState.statusUnset();\n            //TODO check AmmMap state or ammSnapshot sockets when websocket open  ammMapState done should not effect myPoolRow\n            if (walletLayer2) {\n                const _walletMap = walletLayer2DoIt();\n                //userRewardsMapState is an option and walletLayer2 is required\n                const _myPoolRow = makeMyPoolRow(_walletMap);\n                setMyPoolRow(_myPoolRow);\n            }\n        }\n    }, [ammMapState.status])\n\n    React.useEffect(() => {\n        if (userRewardsMapState.status === \"ERROR\") {\n            //TODO: solve error\n            userRewardsMapState.statusUnset();\n        } else if (userRewardsMapState.status === \"DONE\") {\n            userRewardsMapState.statusUnset();\n            // setAmmUserRewardMap()\n            const summaryReward = makeSummaryMyAmm({userRewardsMap: userRewardsMapState.userRewardsMap});\n            setSummaryReward(summaryReward);\n\n            //TODO check AmmMap state or ammSnapshot sockets\n            if (walletLayer2 && ammMapState.ammMap) {  //  ammMapState.ammMap or websocket\n                //userRewardsMapState is an option and walletLayer2 is required\n                const _myPoolRow = makeMyPoolRow(walletLayer2);\n                setMyPoolRow(_myPoolRow);\n            }\n\n        }\n    }, [userRewardsMapState.status])\n    return {\n        myAmmMarketArray,\n        summaryReward,\n        myPoolRow,\n        // ammActivityViewMap,\n        // ammActivityPastViewMap\n    }\n\n}\n","import React from 'react'\nimport styled from '@emotion/styled'\nimport { Box, Grid, Typography } from '@material-ui/core'\nimport { WithTranslation, withTranslation } from 'react-i18next'\nimport { useHistory } from 'react-router-dom'\nimport {\n    AmmRecordTable,\n    AmmTradeType,\n    ChartType,\n    ScaleAreaChart,\n    TablePaddingX,\n    ToggleButtonGroup,\n    useSettings ,\n    MyPoolTable\n} from '@loopring-web/component-lib'\nimport {\n    Currency, EmptyValueTag,\n    getThousandFormattedNumbers,\n    PriceTag\n} from '@loopring-web/common-resources';\n\nimport { AmmPoolActivityRule, LoopringMap } from 'loopring-sdk/dist/defs/loopring_defs';\nimport { useOverview } from './hook';\nimport { TableWrapStyled } from 'pages/styled'\n\n\n//TODO: FIXED:  demo data\n\n\nconst toggleData = [\n    {value: '24 H', key: '24 H'},\n    {value: '1 W', key: '1 W'},\n    {value: 'ALL', key: 'ALL'},\n]\n\nconst StylePaper = styled(Box)`\n  width: 100%;\n  height: 100%;\n  flex: 1;\n` as typeof Box;\n\nconst StyleWrapper = styled(Grid)`\n  position: relative;\n  width: 100%;\n  background-color: ${({theme}) => theme.colorBase.background().default};\n  border-radius: ${({theme}) => theme.unit}px;\n` as typeof Grid\n\n\n\nconst StyledBtnGroupWrapper = styled(Box)`\n  position: absolute;\n  z-index: 99;\n  top: ${({theme}) => theme.unit}px;\n  width: 100%;\n` as typeof Box\n\n\nexport const MyLiquidity = withTranslation('common')(\n    <R extends { [ key: string ]: any }, I extends { [ key: string ]: any }>\n    ({t, ammActivityMap, ...rest}:\n         WithTranslation &\n         { ammActivityMap: LoopringMap<LoopringMap<AmmPoolActivityRule[]>> | undefined }\n    ) => {\n        const [chartPeriod, setChartPeriod] = React.useState('ALL');\n        const [page, setPage] = React.useState(1);\n        const {currency} = useSettings();\n        const history = useHistory()\n\n        const JumpToLiqudity = React.useCallback((pair, type) => {\n            if (history) {\n                history.push(`/liquidity/pools/coinPair/${pair}?type=${type}`)\n            }\n        }, [history])\n\n        const _handlePageChange = React.useCallback((page: number) => {\n            setPage(page);\n        }, [])\n\n        const {myAmmMarketArray, summaryReward, myPoolRow} = useOverview({ammActivityMap});\n        return (\n            <>\n                <StyleWrapper container spacing={1} padding={3} margin={0}>\n                    <Grid display={'flex'} flexDirection={'column'} justifyContent={'space-around'} item sm={3}>\n                        <Typography variant={'body1'} component={'h5'}\n                                    color={'textSecondary'}>{t('labelTotalPositionValue')}</Typography>\n                        <Typography variant={'h4'} marginTop={1}>\n                            {summaryReward === undefined ? EmptyValueTag : currency === Currency.dollar ? PriceTag.Dollar\n                                + getThousandFormattedNumbers(summaryReward.rewardDollar !== undefined? summaryReward.rewardDollar : 0)\n                                + getThousandFormattedNumbers( summaryReward.feeDollar !== undefined?summaryReward.feeDollar : 0)\n                                : PriceTag.Yuan + getThousandFormattedNumbers(summaryReward.rewardYuan ? summaryReward.rewardYuan : 0)\n                                    +  getThousandFormattedNumbers(summaryReward.feeYuan ? summaryReward.feeYuan : 0)}\n                        </Typography>\n                    </Grid>\n                    <Grid display={'flex'} flexDirection={'column'} justifyContent={'space-around'} item sm={3}>\n                        <Typography variant={'body1'} component={'h5'}\n                                    color={'textSecondary'}>{t('labelFeeRewards')}</Typography>\n                        <Typography variant={'h4'} marginTop={1}>\n                            {summaryReward === undefined ? EmptyValueTag : currency === Currency.dollar ? PriceTag.Dollar\n                                + getThousandFormattedNumbers(summaryReward.feeDollar ? summaryReward.feeDollar : 0)\n                                : PriceTag.Yuan\n                                + getThousandFormattedNumbers(summaryReward.feeYuan ? summaryReward.feeYuan : 0)}\n                        </Typography>\n                    </Grid>\n                    <Grid display={'flex'} flexDirection={'column'} justifyContent={'space-around'} item sm={3}>\n                        <Typography variant={'body1'} component={'h5'}\n                                    color={'textSecondary'}>{t('labelMiningRewards')}</Typography>\n                        <Typography variant={'h4'} marginTop={1}>\n                            {summaryReward === undefined ? EmptyValueTag : currency === Currency.dollar ? PriceTag.Dollar\n                                + getThousandFormattedNumbers(summaryReward.rewardDollar ? summaryReward.rewardDollar : 0)\n                                : PriceTag.Yuan\n                                + getThousandFormattedNumbers(summaryReward.rewardYuan ? summaryReward.rewardYuan : 0)}\n                        </Typography>\n                    </Grid>\n                </StyleWrapper>\n                {/*<StyleWrapper container marginY={2} height={340}>*/}\n                {/*    <StyledBtnGroupWrapper display={'flex'} padding={3} justifyContent={'space-between'}>*/}\n                {/*        <Typography variant={'body1'} component={'h5'}*/}\n                {/*                    color={'textSecondary'}>{t('labelLiquidityValue')}</Typography>*/}\n                {/*        <Box marginRight={-1}>*/}\n                {/*            <ToggleButtonGroup exclusive size=\"small\" {...{*/}\n                {/*                ...rest,*/}\n                {/*                t,*/}\n                {/*                data: toggleData,*/}\n                {/*                value: chartPeriod,*/}\n                {/*                setValue: setChartPeriod*/}\n                {/*            }} />*/}\n                {/*        </Box>*/}\n                {/*    </StyledBtnGroupWrapper>*/}\n                {/*    <ScaleAreaChart type={ChartType.Trend} data={[]}/>*/}\n                {/*</StyleWrapper>*/}\n                <Typography paddingLeft={2} marginTop={2} variant={'h4'}>{t('labelMyAmm')}</Typography>\n                <TableWrapStyled container marginY={2} paddingBottom={2} flex={1} height={568}>\n                    <Grid item xs={12} display={'flex'} flexDirection={'column'}>\n                        <MyPoolTable\n                            rawData={myPoolRow}\n                            pagination={{pageSize: 5}}\n                            handleDeposit={(row: any) => {\n                                const pair = `${row.ammDetail.coinAInfo.name}-${row.ammDetail.coinBInfo.name}`\n                                JumpToLiqudity(pair, 'add')\n                            }}\n                            handleWithdraw={(row: any) => {\n                                const pair = `${row.ammDetail.coinAInfo.name}-${row.ammDetail.coinBInfo.name}`\n                                JumpToLiqudity(pair, 'remove')\n                            }}\n                            handlePageChange={() => {\n                            }}\n                        />\n                    </Grid>\n                </TableWrapStyled>\n                <Typography paddingLeft={2} variant={'h4'}>{t('labelMyAmmRecord')}</Typography>\n                <TableWrapStyled container marginTop={2}  paddingBottom={2} flex={1}>\n                    <Grid item xs={12} display={'flex'} flexDirection={'column'}>\n                        <AmmRecordTable rawData={myAmmMarketArray} handlePageChange={_handlePageChange} page={page}/>\n                    </Grid>\n                </TableWrapStyled>\n            </>\n        )\n    })","import { useRouteMatch } from 'react-router'\n\nimport { Box } from '@material-ui/core'\nimport {\n    SubMenu,\n    SubMenuList as BasicSubMenuList,\n} from '@loopring-web/component-lib'\nimport { withTranslation } from 'react-i18next'\nimport { subMenuLiquidity } from '@loopring-web/common-resources'\nimport { PoolsPanel } from './PoolsPanel'\nimport { CoinPairPanel } from './CoinPairPanel';\nimport { AmmMiningView } from './AmmMining';\nimport { MyLiquidity } from './MyLiquidity'\nimport { useAmmPool } from './hook';\n\nexport const subMenu = subMenuLiquidity\n\nconst SubMenuList = withTranslation(['layout','common'], { withRef: true })(BasicSubMenuList);\nexport const LiquidityPage = () => {\n\n    // const { ammFee } = useAmmPool('LRC', 'ETH')\n    //\n    // console.log('--- > ammFee:', ammFee)\n    //\n    const {ammActivityMap} = useAmmPool();\n    let match: any = useRouteMatch(['/liquidity/:item',':next/']);\n    const selected = match?.params.item ?? 'pools'\n    let matchPair: any = useRouteMatch(['/liquidity/:item/:next/:symbol']);\n    let symbol:any = undefined\n    if (matchPair && matchPair?.params?.next && matchPair.params.item === 'pools') {\n       if(!matchPair.params.symbol){\n           symbol='LRC-ETH';\n       }else{\n           symbol=matchPair.params.symbol;\n       }\n    }\n    \n    return (\n        <>\n            { symbol && <Box display={'flex'} flexDirection={'column'}  flex={1} alignSelf={'flex-start'}>\n              <CoinPairPanel ammActivityMap={ammActivityMap}/>\n            </Box>\n            }\n            {!symbol && <>  <Box width={'200px'} display={'flex'} justifyContent={'stretch'} marginRight={3} marginBottom={3}>\n                    <SubMenu>\n                        <SubMenuList selected={selected} subMenu={subMenu as any} />\n                    </SubMenu>\n                </Box>\n                <Box  minHeight={420}  display={'flex'} alignItems={'stretch'} justifyContent={'stretch'} flexDirection=\"column\" marginTop={0} flex={1} marginBottom={3}>\n                    {(selected === 'pools' && !symbol ) && <PoolsPanel ammActivityMap={ammActivityMap}/>}\n                    {(selected === 'amm-mining' && !symbol ) && <AmmMiningView ammActivityMap={ammActivityMap}/>}\n                    {(selected === 'my-liquidity' && !symbol ) && <MyLiquidity ammActivityMap={ammActivityMap}/>}\n                    {selected === 'orderBook-Mining' && <AmmMiningView ammActivityMap={ammActivityMap}/>}\n                    {/*{selected === 'orders' && <OrderPanel />}*/}\n                </Box>\n             </>\n            }\n        </>\n    )\n\n}\n","import React from 'react';\nimport { useAmmActivityMap } from '../../stores/Amm/AmmActivityMap';\n\nimport { AmmPoolActivityRule, LoopringMap } from 'loopring-sdk';\nimport { useAccount } from '../../stores/account/hook';\nimport { useUserRewards } from '../../stores/userRewards';\nimport { useAmmMap } from '../../stores/Amm/AmmMap';\nimport { SagaStatus } from '@loopring-web/common-resources';\n\nexport const useAmmPool = <R extends {[key:string]:any},I extends {[key:string]:any}>()=>{\n    const {ammActivityMap,status:ammActivityMapStatus}  = useAmmActivityMap()\n    const {account,status:accountStatus} = useAccount();\n    const {ammMap,getAmmMap} = useAmmMap();\n    const [_ammActivityMap,setAmmActivityMap] = React.useState<LoopringMap<LoopringMap<AmmPoolActivityRule[]>>|undefined>(ammActivityMap)\n    // init AmmMap at begin\n    React.useEffect(() => {\n        if (!ammMap || Object.keys(ammMap).length === 0) {\n            getAmmMap();\n        }\n    }, []);\n\n    React.useEffect(() => {\n        if(ammActivityMapStatus === SagaStatus.UNSET){\n            setAmmActivityMap(ammActivityMap)\n        }\n    }, [ammActivityMapStatus])\n    // React.useEffect(() => {\n    //     if(accountStatus === SagaStatus.UNSET){\n    //\n    //     }\n    // }, [accountStatus])\n\n    return {\n        ammActivityMap:_ammActivityMap\n    }\n\n}\n\n","import { WithTranslation, withTranslation } from 'react-i18next';\nimport {\n    FailedConnect,\n    MetaMaskProcess,\n    ModalWalletConnect,\n    ProviderMenu,\n    SuccessConnect,\n    Toast,\n    useOpenModals,\n    WalletConnectProcess,\n    WalletConnectQRCode,\n    WalletConnectStep\n} from '@loopring-web/component-lib';\nimport { ChainId } from 'loopring-sdk'\nimport React, { useEffect, useState } from 'react';\nimport {\n    ConnectProviders,\n    GatewayItem,\n    gatewayList as DefaultGatewayList,\n    SagaStatus\n} from '@loopring-web/common-resources';\nimport { useAccount } from 'stores/account';\nimport { connectProvides, ProcessingType, useConnectHook, walletServices } from '@loopring-web/web3-provider';\nimport { useSystem } from 'stores/system';\nimport { myLog } from '../../utils/log_tools';\nimport { copyToClipBoard } from '../../utils/obj_tools';\nimport { TOAST_TIME } from '../../defs/common_defs';\n\nexport const ModalWalletConnectPanel = withTranslation('common')(({\n                                                                      onClose,\n                                                                      open,\n                                                                      // step,\n                                                                      t,\n                                                                      ...rest\n                                                                  }: {\n    // step?:number,\n    open: boolean, onClose: (e: any) => void\n} & WithTranslation) => {\n    // const [_step, setStep] = React.useState<number>(step === undefined? WalletConnectStep.Provider: step);\n    const {\n        account,\n        updateAccount,\n        setShouldShow,\n        resetAccount,\n        statusUnset: statusAccountUnset,\n        status: accountStatus\n    } = useAccount();\n    const {updateSystem, chainId: _chainId, exchangeInfo} = useSystem();\n    const {modals: {isShowConnect}, setShowConnect, setShowAccount} = useOpenModals();\n    const [qrCodeUrl, setQrCodeUrl] = React.useState<string>('');\n    const [stateCheck, setStateCheck] = React.useState<boolean>(false);\n    const metaMaskCallback = React.useCallback(async () => {\n        await connectProvides.MetaMask();\n        updateAccount({connectName: ConnectProviders.MetaMask});\n        // statusAccountUnset();\n        if (connectProvides.usedProvide) {\n            const chainId = Number(await connectProvides.usedWeb3?.eth.getChainId());\n            updateSystem({chainId: (chainId && chainId === ChainId.GORLI ? chainId as ChainId : ChainId.MAINNET)})\n            return\n        }\n    }, []);\n    const walletConnectCallback = React.useCallback(async () => {\n        await connectProvides.WalletConnect();\n        updateAccount({connectName: ConnectProviders.WalletConnect});\n        // statusAccountUnset();\n        if (connectProvides.usedProvide) {\n            const chainId = Number(await connectProvides.usedWeb3?.eth.getChainId());\n            updateSystem({chainId: (chainId && chainId === ChainId.GORLI ? chainId as ChainId : ChainId.MAINNET)})\n            return\n        }\n    }, []);\n\n    const [processingCallback, setProcessingCallback] = React.useState<{ callback: () => Promise<void> } | undefined>(undefined)\n    useEffect(() => {\n        if (stateCheck === true && [SagaStatus.UNSET].findIndex((ele: string) => ele === accountStatus) !== -1) {\n            myLog('clear cache connect done')\n            setStateCheck(false)\n            if (processingCallback !== undefined) {\n                processingCallback.callback()\n            }\n        }\n\n    }, [accountStatus, stateCheck])\n\n    const gatewayList: GatewayItem[] = [\n        {\n            ...DefaultGatewayList[ 0 ],\n            handleSelect: React.useCallback(async () => {\n                if (account.connectName === DefaultGatewayList[ 0 ].key) {\n                    setShowConnect({isShow: false});\n                } else {\n                    walletServices.sendDisconnect('', 'should new provider')\n                    setShowConnect({isShow: true, step: WalletConnectStep.MetaMaskProcessing});\n                    setProcessingCallback({callback: metaMaskCallback});\n                    setStateCheck(true)\n                }\n\n            }, [account])\n        },\n        {\n            ...DefaultGatewayList[ 1 ],\n            handleSelect: React.useCallback(async () => {\n                walletServices.sendDisconnect('', 'should new provider')\n                setShowConnect({isShow: true, step: WalletConnectStep.WalletConnectProcessing});\n                setProcessingCallback({callback: walletConnectCallback});\n                setStateCheck(true)\n            }, [account])\n        },\n\n    ]\n\n    const handleProcessing = React.useCallback(({type, opts}: { type: keyof typeof ProcessingType, opts: any }) => {\n        const {qrCodeUrl} = opts;\n        if (qrCodeUrl) {\n            setQrCodeUrl(qrCodeUrl)\n            setShowConnect({isShow: true, step: WalletConnectStep.WalletConnectQRCode});\n        }\n    }, []);\n    const [copyToastOpen, setCopyToastOpen] = useState(false);\n    useConnectHook({handleProcessing});\n    // const onCopy = React.useCallback(() => {\n    //\n    //     setCopyToastOpen(true)\n    // }, [account])\n    const walletList = React.useMemo(() => {\n        return Object.values({\n            [ WalletConnectStep.Provider ]: <ProviderMenu gatewayList={gatewayList}\n                                                          providerName={account.connectName} {...{t, ...rest}}/>,\n            [ WalletConnectStep.MetaMaskProcessing ]: <MetaMaskProcess {...{t, ...rest}}/>,\n            [ WalletConnectStep.WalletConnectProcessing ]: <WalletConnectProcess {...{t, ...rest}}/>,\n            [ WalletConnectStep.WalletConnectQRCode ]: <WalletConnectQRCode onCopy={() => {\n                copyToClipBoard(qrCodeUrl);\n                setCopyToastOpen(true);\n            }} url={qrCodeUrl} {...{t, ...rest}}/>,\n            [ WalletConnectStep.SuccessConnect ]: <SuccessConnect\n                providerName={account.connectName} {...{t, ...rest}}/>,\n            [ WalletConnectStep.FailedConnect ]: <FailedConnect{...{t, ...rest}} onRetry={resetAccount}/>,\n        })\n    }, [qrCodeUrl, account])\n    return <>\n        <ModalWalletConnect open={isShowConnect.isShow} onClose={(e) => {\n            setShouldShow(false);\n            onClose(e);\n        }} panelList={walletList} step={isShowConnect.step}/>\n        <Toast alertText={t('Address Copied to Clipboard!')} open={copyToastOpen}\n               autoHideDuration={TOAST_TIME} setOpen={setCopyToastOpen} severity={\"success\"}/>\n    </>\n})\n\n\n","import { updateAccountStatus } from '../../stores/account';\nimport { AccountStep, setShowAccount, setShowConnect } from '@loopring-web/component-lib';\nimport store from '../../stores';\nimport { AccountStatus } from '@loopring-web/common-resources';\nimport { myLog } from 'utils/log_tools';\nimport { LoopringAPI } from 'stores/apis/api';\nimport { connectProvides } from '@loopring-web/web3-provider';\nimport * as sdk from 'loopring-sdk'\nimport { ActionResult, ActionResultCode, REFRESH_RATE } from 'defs/common_defs';\n\nexport async function activeAccount({ reason, shouldShow }: { reason: any, shouldShow: boolean }) {\n    const account = store.getState().account;\n    // const {exchangeInfo} = store.getState().system;\n    if (reason?.response?.data?.resultInfo?.code === 100001) {\n        // deposited, but need update account\n        console.log('SignAccount')\n        store.dispatch(setShowConnect({ isShow: false }));\n        store.dispatch(setShowAccount({ isShow: true, step: AccountStep.SignAccount }));\n        store.dispatch(updateAccountStatus({ readyState: AccountStatus.DEPOSITING }));\n\n    } else {\n        // need to deposit.\n        let activeDeposit = localStorage.getItem('activeDeposit');\n        if (activeDeposit) {\n            activeDeposit = JSON.stringify(activeDeposit);\n        }\n        if (activeDeposit && activeDeposit[account.accAddress]) {\n            console.log('DEPOSITING')\n            store.dispatch(setShowConnect({ isShow: false }));\n            store.dispatch(setShowAccount({ isShow: shouldShow, step: AccountStep.Depositing }));\n            store.dispatch(updateAccountStatus({ readyState: AccountStatus.DEPOSITING }));\n            // store.dispatch(statusAccountUnset(undefined))\n        } else {\n            console.log('NO_ACCOUNT')\n            setShowConnect({ isShow: false });\n            setShowAccount({ isShow: shouldShow, step: AccountStep.NoAccount });\n            store.dispatch(updateAccountStatus({ readyState: AccountStatus.NO_ACCOUNT }));\n            // store.dispatch(statusAccountUnset(undefined));\n        }\n    }\n}\n\nexport async function updateAccountFromServer() {\n\n    const system = store.getState().system\n    const account = store.getState().account\n\n    myLog('before check!', account)\n\n    let result: ActionResult = { code: ActionResultCode.NoError, }\n\n    try {\n\n        if (LoopringAPI.userAPI && LoopringAPI.exchangeAPI && system.exchangeInfo && connectProvides.usedWeb3 && account\n            && system.chainId !== 'unknown' && account.connectName !== 'unknown') {\n            const feeMap = {\n                'ETH': '529000000000000',\n                'LRC': '34000000000000000000',\n                'USDT': '7850000',\n                'DAI': '98100000000000000000',\n            }\n\n            const { accInfo } = (await LoopringAPI.exchangeAPI.getAccount({\n                owner: account.accAddress\n            }))\n\n            if (accInfo?.owner && accInfo?.accountId) {\n\n                const connectName = account.connectName as sdk.ConnectorNames\n\n                try {\n                    const eddsaKey = await sdk\n                        .generateKeyPair(\n                            connectProvides.usedWeb3,\n                            accInfo.owner,\n                            system.exchangeInfo.exchangeAddress,\n                            accInfo.keyNonce as number,\n                            connectName,\n                        )\n\n                    try {\n                        const request: sdk.UpdateAccountRequestV3 = {\n                            exchange: system.exchangeInfo.exchangeAddress,\n                            owner: accInfo.owner,\n                            accountId: accInfo.accountId,\n                            publicKey: { x: eddsaKey.formatedPx, y: eddsaKey.formatedPy },\n                            maxFee: { tokenId: 0, volume: feeMap['ETH'] },\n                            validUntil: sdk.VALID_UNTIL,\n                            nonce: accInfo.nonce as number,\n                        }\n\n                        myLog('req:', request)\n\n                        const updateAccountResponse = await LoopringAPI.userAPI.updateAccount(request,\n                            connectProvides.usedWeb3, system.chainId, connectName)\n\n                        await sdk.sleep(REFRESH_RATE)\n\n                        result.data = updateAccountResponse\n\n                    } catch (reason) {\n                        result.code = ActionResultCode.UpdateAccoutError\n                        result.data = reason\n                    }\n\n                } catch (reason) {\n                    result.code = ActionResultCode.GenEddsaKeyError\n                    result.data = reason\n                }\n            }\n        }\n    } catch (reason) {\n        result.code = ActionResultCode.GetAccError\n        result.data = reason\n    }\n\n    return result\n}","import { Account, AccountStatus } from '@loopring-web/common-resources';\nimport { Subject } from 'rxjs';\nimport { Commands } from './command';\nimport { LoopringAPI } from '../../stores/apis/api';\nimport { myLog } from '../../utils/log_tools';\nimport store from 'stores';\nimport { updateAccountStatus } from 'stores/account';\nimport * as sdk from 'loopring-sdk'\nimport { connectProvides } from '@loopring-web/web3-provider';\nimport { ConnectorNames } from 'loopring-sdk';\n\nconst subject = new Subject<{ status: keyof typeof Commands, data: any, }>();\n\nexport const walletLayer2Services = {\n    //INFO: for update Account and unlock account\n    sendSign: async  () => {\n        // const account = store.getState().account;\n        // const {exchangeInfo} = store.getState().system;\n        subject.next({\n            status: Commands.ProcessSign,\n            data: undefined,\n        })\n        // if (exchangeInfo && LoopringAPI.userAPI && account.nonce !== undefined) {\n        //     const eddsaKey = await generateKeyPair(\n        //         connectProvides.usedWeb3,\n        //         account.accAddress,\n        //         exchangeInfo.exchangeAddress,\n        //         account.nonce - 1,\n        //         account.connectName as any,\n        //     )\n        //     const sk = toHex(toBig(eddsaKey.keyPair.secretKey))\n        //     const {apiKey} = (await LoopringAPI.userAPI.getUserApiKey({\n        //         accountId: account.accountId\n        //     }, sk))\n        //\n        //     walletLayer2Services.sendAccountSigned(apiKey, eddsaKey)\n        //\n        // }\n    },\n    sendErrorUnlock:() => {\n        subject.next({\n            status: Commands.ErrorSign,\n            data: undefined,\n        })\n    },\n\n    sendUpdateAccStatusAndReset: (readyState: AccountStatus, accountId: number = -1) => {\n        store.dispatch(updateAccountStatus({\n            accountId,\n            readyState,\n            apiKey: '',\n            eddsaKey: '',\n            publicKey: '',\n            nonce:undefined,\n        }))\n\n        if(readyState === AccountStatus.ERROR_NETWORK){\n            subject.next({\n                status: Commands.ErrorNetwork,\n                data: undefined,\n            })\n        }else{\n            const {accAddress} =store.getState().account\n            walletLayer2Services.sendCheckAccount(accAddress);\n        }\n\n    },\n\n    //INFO: for lock account todo clear the private info, user click or provider on wrong network\n    sendAccountLock: (accInfo?: sdk.AccountInfo) => {\n        const updateInfo = accInfo ? {\n            readyState:AccountStatus.LOCKED,\n            accountId: accInfo.accountId,\n            nonce: accInfo.nonce,\n            level: accInfo.tags,\n        }:{readyState:AccountStatus.LOCKED,\n            apiKey: '',\n            eddsaKey: '',\n            publicKey: '',\n            nonce: undefined,}\n        store.dispatch(updateAccountStatus(updateInfo))\n        subject.next({\n            status: Commands.LockAccount,\n            data: undefined,\n        })\n    },\n    sendActiveAccountDeposit: () => {\n\n    },\n    sendAccountSigned: (apiKey?:any,eddsaKey?:any) => {\n        const updateInfo = apiKey && eddsaKey ?{\n            apiKey,\n            eddsaKey,\n            publicKey: {\n                x: sdk.toHex(sdk.toBig(eddsaKey.keyPair.publicKeyX)),\n                y: sdk.toHex(sdk.toBig(eddsaKey.keyPair.publicKeyY)),\n            },\n            readyState: AccountStatus.ACTIVATED\n        }:{readyState:AccountStatus.ACTIVATED}\n        store.dispatch(updateAccountStatus(updateInfo));\n        subject.next({\n            status: Commands.AccountUnlocked,\n            data: undefined\n        })\n    },\n    sendNoAccount: () => {\n        store.dispatch(updateAccountStatus({readyState:AccountStatus.NO_ACCOUNT, }))\n        subject.next({\n            status: Commands.NoAccount,\n            data: undefined\n        })\n    },\n    sendNeedUpdateAccount: async(accInfo: sdk.AccountInfo) => {\n        myLog('sendNeedUpdateAccount accInfo:', accInfo)\n        store.dispatch(updateAccountStatus({readyState:AccountStatus.DEPOSITING, }))\n        subject.next({\n            status: Commands.ProcessDeposit,\n            data: accInfo\n        })\n    },\n    sendCheckAccount: async (ethAddress: string) => {\n        const self = this;\n        myLog('After connect >>,checkAccount: step3 processAccountCheck')\n        subject.next({\n            status: Commands.ProcessAccountCheck,\n            data: undefined\n        })\n        if (LoopringAPI.exchangeAPI) {\n            const {accInfo} = (await LoopringAPI.exchangeAPI.getAccount({\n                owner: ethAddress\n            }))\n            myLog('After connect >>,checkAccount: step3',accInfo)\n\n            //TODO code is notaccount\n            if (accInfo === undefined) {\n                walletLayer2Services.sendNoAccount()\n                // subject.next({\n                //     status: Commands.NoAccount,\n                //     data:undefined\n                // })\n            } else {\n                if (accInfo.accountId) {\n                    if (!accInfo.publicKey.x || !accInfo.publicKey.y) {\n                        myLog('-------need update account!')\n                        walletLayer2Services.sendNeedUpdateAccount(accInfo)\n                    } else {\n                        walletLayer2Services.sendAccountLock(accInfo)\n                    }\n                } else {\n                    myLog('unexpected accInfo:', accInfo)\n                    throw Error('unexpected accinfo:' + accInfo)\n                }\n            }\n        }\n\n        // try {\n        //\n        //\n        //     if (accInfo && accInfo.accountId) {\n        //         await unlockAccount({accInfo, shouldShow: shouldShow ?? false})\n        //     }\n        //     statusAccountUnset();\n        // } catch (reason) {\n        //     dumpError400(reason)\n        //     await activeAccount({reason, shouldShow: shouldShow ?? false});\n        //     statusAccountUnset();\n        // }\n\n\n    },\n\n    onSocket: () => subject.asObservable()\n    // clearMessages: () => subject.next(),\n    // onSocket: () => subject.asObservable()\n};","import { AccountStatus } from '@loopring-web/common-resources';\nimport { walletLayer2Services } from './walletLayer2Services';\nimport { Commands } from './command';\n\nexport function lockAccount() {\n    walletLayer2Services.sendAccountLock()\n}\n\nexport function goErrorNetWork(){\n    walletLayer2Services.sendUpdateAccStatusAndReset(AccountStatus.ERROR_NETWORK)\n\n}\n\nexport function cleanLayer2() {\n    walletLayer2Services.sendUpdateAccStatusAndReset(AccountStatus.UN_CONNECT)\n}\n","import { generateKeyPair, sleep, toBig, toHex } from 'loopring-sdk';\nimport { connectProvides } from '@loopring-web/web3-provider';\nimport { LoopringAPI } from '../../stores/apis/api';\nimport store from '../../stores';\nimport { walletLayer2Services } from './walletLayer2Services';\nimport { myLog } from '../../utils/log_tools';\n\nexport async function unlockAccount() {\n    const account = store.getState().account;\n    const {exchangeInfo} = store.getState().system;\n    walletLayer2Services.sendSign()\n    if (exchangeInfo && LoopringAPI.userAPI && account.nonce !== undefined) {\n        try{\n            const eddsaKey = await generateKeyPair(\n                connectProvides.usedWeb3,\n                account.accAddress,\n                exchangeInfo.exchangeAddress,\n                account.nonce - 1,\n                account.connectName as any,\n            )\n            const sk = toHex(toBig(eddsaKey.keyPair.secretKey))\n            const {apiKey} = (await LoopringAPI.userAPI.getUserApiKey({\n                accountId: account.accountId\n            }, sk))\n            myLog('After connect >>,unlockAccount: step2 apiKey',apiKey)\n\n            walletLayer2Services.sendAccountSigned(apiKey, eddsaKey)\n        }catch (e){\n            walletLayer2Services.sendErrorUnlock()\n\n        }\n\n\n\n    }\n}","import { WithTranslation, withTranslation } from 'react-i18next';\nimport {\n    AccountStep,\n    ActiveAccountProcess,\n    ApproveAccount,\n    Button,\n    DepositApproveProcess,\n    Depositing,\n    DepositPanel,\n    DepositProps,\n    FailedDeposit,\n    FailedTokenAccess,\n    FailedUnlock,\n    FailedUpdateAcc,\n    HadAccount,\n    ModalAccount,\n    ModalQRCode,\n    NoAccount,\n    ProcessUnlock,\n    SuccessUnlock,\n    Toast,\n    TokenAccessProcess,\n    useOpenModals\n} from '@loopring-web/component-lib';\nimport React, { useCallback, useState } from 'react';\nimport { copyToClipBoard } from 'utils/obj_tools';\nimport { useAccount } from 'stores/account';\nimport { ActionResult, ActionResultCode, REFRESH_RATE, TOAST_TIME } from 'defs/common_defs';\nimport { getShortAddr } from '@loopring-web/common-resources';\nimport { updateAccountFromServer } from 'services/account/activeAccount';\nimport { lockAccount } from 'services/account/lockAccount';\nimport { unlockAccount } from 'services/account/unlockAccount';\nimport { useTokenMap } from 'stores/token';\nimport { myLog } from 'utils/log_tools';\nimport { walletServices } from '@loopring-web/web3-provider';\nimport { useDeposit } from 'modal/useDeposit';\nimport { sleep } from 'loopring-sdk';\n\nimport { walletLayer2Services } from '../../services/account/walletLayer2Services'\n\nexport const ModalAccountInfo = withTranslation('common')(({\n                                                               onClose,\n                                                               etherscanUrl,\n                                                               open,\n                                                               t,\n                                                               ...rest\n                                                           }: {\n    open: boolean,\n    onClose: (e: any) => void,\n    etherscanUrl: string\n} & WithTranslation) => {\n    const {\n        account,\n        shouldShow,\n        updateAccount,\n        setShouldShow,\n        resetAccount,\n    } = useAccount();\n\n    const isNewAccount = true\n\n    const { depositProps } = useDeposit(isNewAccount)\n\n    const { modals: { isShowAccount }, setShowConnect, setShowAccount, } = useOpenModals()\n\n    const [openQRCode, setOpenQRCode] = useState(false)\n    const addressShort = getShortAddr(account.accAddress)\n    \n    const {coinMap} = useTokenMap()\n    \n    const [copyToastOpen, setCopyToastOpen] = useState(false);\n    const onSwitch = useCallback(() => {\n        setShowAccount({isShow: false})\n        setShouldShow(true);\n        setShowConnect({isShow: shouldShow ?? false})\n    }, [setShowConnect, setShowAccount, shouldShow])\n    const onCopy = React.useCallback(() => {\n        copyToClipBoard(account.accAddress);\n        setCopyToastOpen(true)\n    }, [account])\n    const onViewQRCode = React.useCallback(() => {\n        setOpenQRCode(true)\n    }, [])\n    const onDisconnect = React.useCallback(async () => {\n        walletServices.sendDisconnect('', 'customer click disconnect');\n        setShowAccount({ isShow: false })\n    }, [resetAccount, setShowAccount])\n\n    const goDeposit = React.useCallback(() => {\n\n        setShowAccount({isShow: true, step: AccountStep.Deposit});\n\n    }, [setShowAccount])\n\n    const goUpdateAccount = React.useCallback(async() => {\n\n        if (!account.accAddress) {\n            myLog('account.accAddress is nil')\n            return\n        }\n\n        myLog('goActiveAccount....')\n        setShowAccount({isShow: true, step: AccountStep.ActiveAccountProcess});\n\n        const result: ActionResult = await updateAccountFromServer()\n\n        switch (result.code) {\n            case ActionResultCode.NoError:\n                setShowAccount({isShow: true, step: AccountStep.SuccessUnlock})\n                await sleep(REFRESH_RATE)\n                setShowAccount({isShow: false})\n                walletLayer2Services.sendCheckAccount(account.accAddress)\n                break\n            case ActionResultCode.GetAccError:\n            case ActionResultCode.GenEddsaKeyError:\n            case ActionResultCode.UpdateAccoutError:\n                break\n            default:\n                break\n        }\n\n    }, [account, setShowAccount])\n\n    const unlockBtn = React.useMemo(() => {\n        return <Button variant={'contained'} fullWidth size={'medium'} onClick={() => {\n            setShouldShow(true);\n            unlockAccount();\n        }}>{t('labelUnLockLayer2')} </Button>\n    }, [updateAccount]);\n    const lockBtn = React.useMemo(() => {\n        return <Button variant={'contained'} fullWidth size={'medium'} onClick={() => {\n            lockAccount();\n        }}>{t('labelLockLayer2')} </Button>\n    }, [lockAccount]);\n    \n    const title = t(\"labelCreateLayer2Title\")\n    \n    const accountList = React.useMemo(() => {\n        return Object.values({\n            [ AccountStep.NoAccount ]: <NoAccount {...{\n                goDeposit,\n                ...account,\n                etherscanUrl,\n                onSwitch, onCopy,\n                onViewQRCode, onDisconnect, addressShort,\n            }} />,\n            [ AccountStep.Deposit ]: <DepositPanel title={title} {...{\n                ...rest,\n                _height: 'var(--modal-height)',\n                _width: 'var(--modal-width)', ...depositProps,\n                t\n            }} />,\n            [ AccountStep.Depositing ]: <Depositing label={title}\n                                                    etherscanLink={etherscanUrl + account.accAddress}\n                                                    goUpdateAccount={() => goUpdateAccount()}  {...{...rest, t}} />,\n            [ AccountStep.FailedDeposit ]: <FailedDeposit label={title}\n                                                          etherscanLink={etherscanUrl + account.accAddress}\n                                                          onRetry={() => undefined} {...{...rest, t}} />,\n            [ AccountStep.SignAccount ]: <ApproveAccount {...{\n                ...account,\n                etherscanUrl,\n                onSwitch, onCopy,\n                onViewQRCode, onDisconnect, addressShort,\n            }} goActiveAccount={() => {\n                return undefined\n            }}  {...{...rest, t}} />,\n            [ AccountStep.ProcessUnlock ]: <ProcessUnlock providerName={account.connectName} {...{...rest, t}} />,\n            [ AccountStep.SuccessUnlock ]: <SuccessUnlock providerName={account.connectName} {...{...rest, t}} />,\n            [ AccountStep.FailedUnlock ]: <FailedUnlock onRetry={() => {\n                unlockAccount()\n            }} {...{...rest, t}} />,\n            [ AccountStep.HadAccount ]: <HadAccount {...{\n                ...account,\n                onSwitch, onCopy,\n                etherscanUrl,\n                // address: account.accAddress,\n                // connectBy: account.connectName,\n                onViewQRCode, onDisconnect, addressShort,\n                etherscanLink: etherscanUrl + account.accAddress,\n                mainBtn: account.readyState === 'ACTIVATED' ? lockBtn : unlockBtn\n            }} />,\n            [ AccountStep.TokenAccessProcess ]: <TokenAccessProcess label={title}\n                                                    providerName={account.connectName} {...{\n                ...rest,\n                t\n            }} />,\n            [ AccountStep.DepositApproveProcess ]: <DepositApproveProcess label={title}\n                                                        etherscanLink={etherscanUrl + account.accAddress}\n                                                        providerName={account.connectName} {...{\n                ...rest,\n                t\n            }} />,\n            [ AccountStep.ActiveAccountProcess ]: <ActiveAccountProcess providerName={account.connectName} {...{\n                ...rest,\n                t\n            }} />,\n            [ AccountStep.ActiveAccountFailed ]: <FailedUnlock label={title} onRetry={() => {\n                goUpdateAccount()\n            }} {...{...rest, t}} />,\n            [ AccountStep.FailedTokenAccess ]: <FailedTokenAccess label={title} onRetry={() => { goDeposit() }} {...{\n                t, ...rest,\n                coinInfo: coinMap ? coinMap[ 'USTD' ] : undefined\n            }} />,\n\n        })\n    }, [addressShort, account, depositProps, etherscanUrl, onCopy, onSwitch, onDisconnect, onViewQRCode])\n\n    return <>\n        <Toast alertText={t('Address Copied to Clipboard!')} open={copyToastOpen}\n               autoHideDuration={TOAST_TIME} setOpen={setCopyToastOpen} severity={\"success\"}/>\n\n        <ModalQRCode open={openQRCode} onClose={() => setOpenQRCode(false)} title={'ETH Address'}\n                     description={account?.accAddress} url={account?.accAddress}/>\n\n        <ModalAccount open={isShowAccount.isShow} onClose={(e) => {\n            setShouldShow(false);\n            onClose(e);\n        }} panelList={accountList} step={isShowAccount.step}/>\n    </>\n})","import {\n    dumpError400,\n    GetOffchainFeeAmtRequest,\n    LoopringMap,\n    OffchainFeeReqType,\n    toBig,\n    TokenInfo\n} from 'loopring-sdk';\nimport { useAccount } from '../stores/account';\nimport { useState } from 'react';\nimport { useCustomDCEffect } from '../hooks/common/useCustomDCEffect';\nimport { LoopringAPI } from '../stores/apis/api';\nimport * as sdk from 'loopring-sdk';\nimport { BIG10 } from '../defs/swap_defs';\nimport { myLog } from '../utils/log_tools';\n\nexport function useChargeFees(tokenSymbol: string | undefined, requestType: OffchainFeeReqType,\n                                 tokenMap: LoopringMap<TokenInfo> | undefined, amount?: number) {\n\n    const {account} = useAccount()\n\n    const [chargeFeeList, setChargeFeeList] = useState<any[]>([])\n\n    useCustomDCEffect(async () => {\n\n        if (account.accountId === -1 || !tokenSymbol || !tokenMap || !LoopringAPI.userAPI) {\n            return\n        }\n\n        let chargeFeeList: any[] = []\n\n        try {\n            const tokenInfo = tokenMap[ tokenSymbol ]\n\n            const request: GetOffchainFeeAmtRequest = {\n                accountId: account.accountId,\n                tokenSymbol,\n                requestType,\n                amount: amount ? toBig(amount).times('1e' + tokenInfo.decimals).toFixed(0, 0) : undefined\n            }\n\n            const response = await LoopringAPI.userAPI.getOffchainFeeAmt(request, account.apiKey)\n\n            if (response?.raw_data?.fees instanceof Array) {\n                response.raw_data.fees.forEach((item: any) => {\n                    const feeRaw = item.fee\n                    const tokenInfo = tokenMap[ item.token ]\n                    const fee = sdk.toBig(item.fee).div('1e' + tokenInfo.decimals).toNumber()\n                    chargeFeeList.push({belong: item.token, fee, __raw__: feeRaw})\n                })\n\n                setChargeFeeList(chargeFeeList)\n            }\n            myLog('response:', response)\n\n        } catch (reason) {\n            dumpError400(reason)\n        }\n\n\n        setChargeFeeList(chargeFeeList)\n\n    }, [account.accountId, account.apiKey, LoopringAPI.userAPI, requestType, tokenSymbol, tokenMap])\n\n    return {\n        chargeFeeList,\n    }\n\n}","import { useAccount } from '../stores/account';\nimport { AccountStep, useOpenModals } from '@loopring-web/component-lib';\nimport React from 'react';\nimport { sleep } from 'loopring-sdk';\nimport { useAccountHook } from '../services/account/useAccountHook';\n\nexport  function useAccountModal() {\n    const { shouldShow, setShouldShow, statusUnset: statusAccountUnset} = useAccount();\n    const { setShowAccount } = useOpenModals();\n    const handleErrorAccount = React.useCallback(()=>{\n        // updateAccount({readyState:'NO_ACCOUNT'});\n        statusAccountUnset();\n    },[shouldShow])\n    const handleLockAccount = React.useCallback(()=>{\n        // updateAccount({readyState:'NO_ACCOUNT'});\n        statusAccountUnset();\n        setShowAccount({isShow: shouldShow ?? false,step:AccountStep.HadAccount});\n    },[shouldShow])\n    const handleNoAccount = React.useCallback((data: any)=>{\n        // updateAccount({readyState:'NO_ACCOUNT'});\n        statusAccountUnset();\n        setShowAccount({isShow: shouldShow ?? false,step:AccountStep.NoAccount});\n    },[shouldShow])\n    const handleDepositingAccount = React.useCallback(async ()=>{\n        // updateAccount({readyState:'DEPOSITING'});\n        setShowAccount({isShow: shouldShow ?? false,step:AccountStep.Depositing});\n        await sleep(5000)\n        setShouldShow(false)\n        setShowAccount({isShow: false});\n        statusAccountUnset();\n    },[shouldShow])\n    const handleErrorApproveToken = React.useCallback(()=>{\n        // updateAccount({readyState:'DEPOSITING'});\n        setShowAccount({isShow: shouldShow ?? false,step:AccountStep.Depositing});\n    },[shouldShow])\n    const handleErrorDepositSign = React.useCallback(()=>{\n        // updateAccount({readyState:'DEPOSITING'});\n        setShowAccount({isShow: shouldShow ?? false,step:AccountStep.FailedDeposit});\n    },[shouldShow])\n    const handleProcessDeposit = React.useCallback(()=>{\n        // updateAccount({readyState:'DEPOSITING'});\n        setShowAccount({isShow: shouldShow ?? false,step:AccountStep.DepositApproveProcess});\n    },[shouldShow])\n    const handleSignAccount = React.useCallback(()=>{\n        // updateAccount({readyState:'DEPOSITING'});\n        statusAccountUnset();\n        setShowAccount({isShow: shouldShow ?? false,step:AccountStep.SignAccount});\n    },[shouldShow])\n    const handleSignError = React.useCallback(()=>{\n        setShowAccount({isShow: shouldShow ?? false,step:AccountStep.FailedUnlock});\n    },[shouldShow])\n    const handleProcessSign = React.useCallback(()=>{\n        setShowAccount({isShow: shouldShow ?? false,step:AccountStep.ProcessUnlock});\n    },[shouldShow])\n    const handleAccountActive  = React.useCallback(async ()=>{\n\n        //updateAccount({readyState:'ACTIVATED'});\n        setShowAccount({isShow: shouldShow ?? false,step:AccountStep.SuccessUnlock});\n        await sleep(1000)\n        setShouldShow(false)\n        setShowAccount({isShow: false});\n        statusAccountUnset();\n    },[shouldShow])\n    useAccountHook({\n        handleErrorAccount,\n        handleLockAccount,// clear private data\n        handleNoAccount,//\n        // TODO\n        //  step1 Approve account;  click allow from provider\n        //  step2 send to ETH;  click allow from provider\n        handleDepositingAccount,\n        handleErrorApproveToken,\n        handleErrorDepositSign,\n        handleProcessDeposit,// two or one step\n        handleSignAccount, //unlock or update account  sgin\n        handleProcessSign,\n        handleSignError,\n        // handleProcessAccountCheck,\n        handleAccountActive: handleAccountActive,\n    })\n}","import React from 'react';\n// import { walletLa } from './walletServices';\nimport { Commands } from './command';\nimport { walletLayer2Services } from './walletLayer2Services';\n\nexport function useAccountHook(\n    {\n        handleLockAccount,// clear private data\n        handleNoAccount,//\n        handleErrorAccount,\n        // TODO\n        //  step1 Approve account;  click allow from provider\n        //  step2 send to ETH;  click allow from provider\n        handleDepositingAccount,\n        handleErrorApproveToken,\n        handleErrorDepositSign,\n        handleProcessDeposit,// two or one step\n        handleSignAccount, //unlock or update account  assgin\n        handleProcessSign,\n        handleSignError,\n        handleProcessAccountCheck,\n        handleAccountActive,\n    }\n\n        : any) {\n    const subject = React.useMemo(() => walletLayer2Services.onSocket(), []);\n    React.useEffect(() => {\n        const subscription = subject.subscribe(({data, status}: { status: keyof typeof Commands, data?: any }) => {\n            switch (status) {\n                case 'ErrorNetwork':\n                    handleErrorAccount(data);\n                    break;// clear private data\n                case 'LockAccount':\n                    handleLockAccount(data);\n                    break;// clear private data\n                case 'NoAccount':\n                    handleNoAccount(data);\n                    break;//\n                case 'DepositingAccount':\n                    handleDepositingAccount(data);\n                    break;\n                case 'ErrorApproveToken':\n                    handleErrorApproveToken(data);\n                    break;\n                case 'ErrorDepositSign':\n                    handleErrorDepositSign(data);\n                    break;\n                case 'ProcessDeposit':\n                    handleProcessDeposit(data);\n                    break;// two or one step\n                case 'SignAccount':\n                    handleSignAccount(data);\n                    break;//unlock or update account  assgin\n                case 'ProcessSign':\n                    handleProcessSign(data);\n                    break;\n                case 'ErrorSign':\n                    handleSignError(data);\n                    break;\n                case 'AccountUnlocked':\n                    handleAccountActive(data);\n                    break;\n            }\n        });\n        return () => subscription.unsubscribe();\n    }, [subject, handleLockAccount,// clear private data\n        handleErrorAccount,\n        handleNoAccount,//\n        handleDepositingAccount,\n        handleErrorApproveToken,\n        handleErrorDepositSign,\n        handleProcessDeposit,// two or one step\n        handleSignAccount, //unlock or update account  assgin\n        handleProcessSign,\n        handleProcessAccountCheck,]);\n}\n","import {\n    ModalPanel, Toast,\n    useOpenModals\n} from '@loopring-web/component-lib';\nimport { ModalWalletConnectPanel } from './WalletModal';\nimport { ModalAccountInfo } from './AccountModal';\nimport { withTranslation, WithTranslation } from 'react-i18next';\nimport { useTransfer } from './useTransfer';\nimport { useDeposit } from './useDeposit';\nimport { useWithdraw } from './useWithdraw';\nimport { useSystem } from '../stores/system';\nimport { useAccountModal } from './useAccountModal';\nimport { TOAST_TIME } from '../defs/common_defs';\nimport React from 'react';\n\nexport const ModalGroup = withTranslation('common',{withRef: true})(({...rest}:WithTranslation)=>{\n    const {transferProps} = useTransfer();\n    const {depositProps} = useDeposit();\n    const {withdrawProps} = useWithdraw();\n    const {etherscanUrl} = useSystem();\n    useAccountModal();\n    const {modals: {isShowAccount, isShowConnect}, setShowConnect, setShowAccount} = useOpenModals();\n    return  <>\n\n        <ModalPanel transferProps={transferProps}\n                    withDrawProps={withdrawProps}\n                    depositProps={depositProps}\n                    resetProps={{} as any}\n                    ammProps={{} as any}\n                    swapProps={{} as any}\n                    {...{_height: 'var(--modal-height)', _width: 'var(--modal-width)'}}\n        />\n\n        <ModalWalletConnectPanel {...{\n            ...rest,\n            open: isShowConnect.isShow,\n            onClose: () => setShowConnect({isShow: false})\n        }} />\n        <ModalAccountInfo\n            {...{\n                ...rest,\n                etherscanUrl,\n                open: isShowAccount.isShow,\n                onClose: () => setShowAccount({isShow: false})\n            }}\n        ></ModalAccountInfo>\n    </>\n\n} )","import React, { useCallback } from 'react';\n\nimport { SwitchData, TradeBtnStatus, TransferProps, useOpenModals } from '@loopring-web/component-lib';\nimport { AccountStatus, CoinMap, IBData, SagaStatus, WalletMap } from '@loopring-web/common-resources';\nimport { ConnectorNames, dumpError400, OffchainFeeReqType, OriginTransferRequestV3, toBig, VALID_UNTIL } from 'loopring-sdk';\nimport { useTokenMap } from '../stores/token';\nimport { useAccount } from '../stores/account';\nimport { useChargeFees } from './useChargeFees';\nimport { LoopringAPI } from '../stores/apis/api';\nimport { useSystem } from '../stores/system';\nimport { connectProvides } from '@loopring-web/web3-provider';\nimport { useCustomDCEffect } from '../hooks/common/useCustomDCEffect';\nimport { myLog } from 'utils/log_tools';\nimport { useWalletLayer2 } from '../stores/walletLayer2';\nimport { makeWalletLayer2 } from '../hooks/help';\n// import { useCustomDCEffect } from '../../hooks/common/useCustomDCEffect';\n// import { useChargeFeeList } from './hook';\n\nexport const useTransfer = <R extends IBData<T>, T>(): {\n    // handleTransfer: (inputValue:R) => void,\n    transferProps: TransferProps<R, T>\n    // transferValue: R\n} => {\n    const {tokenMap, coinMap} = useTokenMap();\n    const {account} = useAccount()\n    const {exchangeInfo, chainId} = useSystem();\n    const {walletLayer2,status:walletLayer2Status} = useWalletLayer2();\n    const [walletMap, setWalletMap] = React.useState(makeWalletLayer2().walletMap??{} as WalletMap<R>);\n    // const {setShowTransfer}  = useOpenModals();\n    const [transferValue, setTransferValue] = React.useState<IBData<T>>({\n        belong: undefined,\n        tradeValue: 0,\n        balance: 0\n    } as IBData<unknown>)\n    const {chargeFeeList} = useChargeFees(transferValue.belong, OffchainFeeReqType.TRANSFER, tokenMap)\n\n    const [tranferFeeInfo, setTransferFeeInfo] = React.useState<any>()\n    const [payeeAddr, setPayeeAddr] = React.useState<string>('')\n    React.useEffect(()=>{\n        if(walletLayer2Status === SagaStatus.UNSET){\n            setWalletMap(makeWalletLayer2().walletMap??{} as WalletMap<R>)\n        }\n    },[walletLayer2Status])\n\n    useCustomDCEffect(() => {\n\n        if (chargeFeeList.length > 0) {\n            setTransferFeeInfo(chargeFeeList[0])\n        }\n\n    }, [chargeFeeList, setTransferFeeInfo])\n\n    const onTransferClick = useCallback(async(transferValue) => {\n        const {accountId, accAddress, readyState, apiKey, connectName, eddsaKey} = account\n        console.log('useCallback tranferFeeInfo:', tranferFeeInfo) \n        \n        if (readyState === AccountStatus.ACTIVATED && tokenMap \n            && exchangeInfo && connectProvides.usedWeb3 \n            && transferValue?.belong && tranferFeeInfo?.belong && eddsaKey?.sk) {\n            \n            try {\n                const sellToken = tokenMap[ transferValue.belong as string ]\n                const feeToken = tokenMap[ tranferFeeInfo.belong ]\n                const transferVol = toBig(transferValue.tradeValue).times('1e' + sellToken.decimals).toFixed(0, 0)\n                const storageId = await LoopringAPI.userAPI?.getNextStorageId({\n                    accountId,\n                    sellTokenId: sellToken.tokenId\n                }, apiKey)\n                const req: OriginTransferRequestV3 = {\n                    exchange: exchangeInfo.exchangeAddress,\n                    payerAddr: accAddress,\n                    payerId: accountId,\n                    payeeAddr,\n                    payeeId: 0,\n                    storageId: storageId?.offchainId,\n                    token: {\n                        tokenId: sellToken.tokenId,\n                        volume: transferVol,\n                    },\n                    maxFee: {\n                        tokenId: feeToken.tokenId,\n                        volume: tranferFeeInfo.__raw__,\n                    },\n                    validUntil: VALID_UNTIL,\n                }\n                const response = await LoopringAPI.userAPI?.submitInternalTransfer(req,\n                    connectProvides.usedWeb3,\n                    chainId === 'unknown' ? 5 : chainId, connectName as ConnectorNames,\n                    eddsaKey.sk, apiKey)\n\n                    myLog(response)\n                //TODO check success or failed API\n            } catch (e) {\n                dumpError400(e)\n            }\n\n        } else {\n            return false\n        }\n\n    }, [account, tokenMap, tranferFeeInfo?.belong, transferValue, payeeAddr])\n\n    const handlePanelEvent = useCallback(async (data: SwitchData<R>, switchType: 'Tomenu' | 'Tobutton') => {\n        return new Promise<void>((res: any) => {\n            if (data?.tradeData?.belong) {\n                if (transferValue !== data.tradeData) {\n                    setTransferValue(data.tradeData)\n                }\n            } else {\n                setTransferValue({belong: undefined, tradeValue: 0, balance: 0} as IBData<unknown>)\n            }\n            res();\n        })\n    }, [setTransferValue])\n\n    const handleFeeChange = useCallback((value: { belong: any; \n        fee: number | string; \n        __raw__?: any }): void => {\n            myLog('handleFeeChange:', value)\n            setTransferFeeInfo(value)\n    }, [setTransferFeeInfo])\n\n    const transferProps = {\n        tradeData: { belong: undefined } as any,\n        coinMap: coinMap as CoinMap<T>,\n        walletMap: walletMap as WalletMap<T>, \n        transferBtnStatus: TradeBtnStatus.AVAILABLE,\n        onTransferClick,\n        handleFeeChange,\n        handlePanelEvent,\n        chargeFeeToken: 'ETH',\n        chargeFeeTokenList: chargeFeeList,\n        handleOnAddressChange: (value: any) => {\n            myLog('transfer handleOnAddressChange:', value);\n            setPayeeAddr(value)\n        },\n        handleAddressError: (_value: any) => {\n            return {error: false, message: ''}\n        }\n    }\n\n    return {\n        transferProps ,\n    }\n}\n","import React, { useState } from 'react';\n\nimport { SwitchData, TradeBtnStatus, useOpenModals, WithdrawProps } from '@loopring-web/component-lib';\nimport {\n    AccountStatus,\n    CoinMap,\n    IBData,\n    SagaStatus,\n    WalletMap,\n    WithdrawType,\n    WithdrawTypes\n} from '@loopring-web/common-resources';\nimport { ConnectorNames, dumpError400, OffchainFeeReqType, toBig, VALID_UNTIL } from 'loopring-sdk';\nimport { useTokenMap } from '../stores/token';\nimport { useAccount } from '../stores/account';\nimport { useChargeFees } from './useChargeFees';\nimport { useCustomDCEffect } from '../hooks/common/useCustomDCEffect';\nimport { LoopringAPI } from '../stores/apis/api';\nimport { useSystem } from '../stores/system';\nimport { connectProvides } from '@loopring-web/web3-provider';\nimport { myLog } from 'utils/log_tools';\nimport { useWalletLayer2 } from '../stores/walletLayer2';\nimport { makeWalletLayer2 } from '../hooks/help';\n// import { useCustomDCEffect } from '../../hooks/common/useCustomDCEffect';\n// import { useChargeFeeList } from './hook';\n\nexport const useWithdraw = <R extends IBData<T>, T>(): {\n    // handleWithdraw: (inputValue:R) => void,\n    withdrawProps: WithdrawProps<R, T>\n    // withdrawValue: R\n} => {\n    const {tokenMap, coinMap} = useTokenMap();\n    const {account} = useAccount()\n    const {exchangeInfo, chainId} = useSystem();\n    const [withdrawValue, setWithdrawValue] = React.useState<IBData<T>>({\n        belong: undefined,\n        tradeValue: 0,\n        balance: 0\n    } as IBData<unknown>)\n    const {status:walletLayer2Status} = useWalletLayer2();\n    const [walletMap2, setWalletMap2] = React.useState(makeWalletLayer2().walletMap??{} as WalletMap<R>);\n    const {chargeFeeList} = useChargeFees(withdrawValue.belong, OffchainFeeReqType.OFFCHAIN_WITHDRAWAL, tokenMap)\n    const [withdrawAddr, setWithdrawAddr] = useState<string>()\n    const [withdrawFeeInfo, setWithdrawFeeInfo] = useState<any>(undefined)\n    const [withdrawType, setWithdrawType] = useState<OffchainFeeReqType>(OffchainFeeReqType.OFFCHAIN_WITHDRAWAL)\n    const {setShowWithdraw}  = useOpenModals();\n\n    React.useEffect(()=>{\n        if(walletLayer2Status === SagaStatus.UNSET){\n            setWalletMap2(makeWalletLayer2().walletMap??{} as WalletMap<R>)\n        }\n    },[walletLayer2Status])\n    useCustomDCEffect(() => {\n        if (chargeFeeList.length > 0) {\n            setWithdrawFeeInfo(chargeFeeList[0])\n        }\n    }, [chargeFeeList, setWithdrawFeeInfo])\n\n    const handleWithdraw = React.useCallback(async (inputValue: R) => {\n        const {accountId, accAddress, readyState, apiKey, connectName, eddsaKey} = account\n        if (readyState === AccountStatus.ACTIVATED && tokenMap \n            && exchangeInfo && connectProvides.usedWeb3 \n            && withdrawAddr && withdrawFeeInfo?.belong && eddsaKey?.sk) {\n            try {\n                const withdrawToken = tokenMap[ inputValue.belong as string ]\n                const feeToken = tokenMap[ withdrawFeeInfo.belong ]\n                const withdrawVol = toBig(inputValue.tradeValue).times('1e' + withdrawToken.decimals).toFixed(0, 0)\n                const storageId = await LoopringAPI.userAPI?.getNextStorageId({\n                    accountId: accountId,\n                    sellTokenId: withdrawToken.tokenId\n                }, apiKey)\n                const response = await LoopringAPI.userAPI?.submitOffchainWithdraw({\n                        exchange: exchangeInfo.exchangeAddress,\n                        owner: accAddress,\n                        to: withdrawAddr,\n                        accountId: account.accountId,\n                        storageId: storageId?.offchainId,\n                        token: {\n                            tokenId: withdrawToken.tokenId,\n                            volume: withdrawVol,\n                        },\n                        maxFee: {\n                            tokenId: feeToken.tokenId,\n                            volume: withdrawFeeInfo.__raw__,\n                        },\n                        extraData: '',\n                        minGas: 0,\n                        validUntil: VALID_UNTIL,\n                    },\n                    connectProvides.usedWeb3,\n                    chainId === 'unknown' ? 1 : chainId, connectName as ConnectorNames,\n                    eddsaKey.sk, apiKey)\n\n                    myLog('got response:', response)\n                //TODO check success or failed API\n            } catch (e) {\n                dumpError400(e)\n            }\n\n        } else {\n            return false\n        }\n\n    }, [account, tokenMap, withdrawFeeInfo])\n\n    const withdrawType2 = withdrawType === OffchainFeeReqType.FAST_OFFCHAIN_WITHDRAWAL ? 'Fast' : 'Standard'\n\n    const withdrawProps: WithdrawProps<R, T> = {\n        tradeData: {belong: undefined} as any,\n        coinMap: coinMap as CoinMap<T>,\n        walletMap: walletMap2 as WalletMap<any>,\n        withdrawBtnStatus: TradeBtnStatus.AVAILABLE,\n        withdrawType: withdrawType2,\n        withdrawTypes: WithdrawTypes,\n        onWithdrawClick: () => {\n            if (withdrawValue && withdrawValue.belong) {\n                handleWithdraw(withdrawValue as R)\n            }\n            setShowWithdraw({isShow:false})\n        },\n        handleFeeChange(value: { belong: any; fee: number | string; __raw__?: any }): void {\n            setWithdrawFeeInfo(value as any)\n        },\n        handleWithdrawTypeChange: (value: 'Fast' | 'Standard') => {\n            myLog('handleWithdrawTypeChange', value)\n            const offchainType = value === WithdrawType.Fast ? OffchainFeeReqType.FAST_OFFCHAIN_WITHDRAWAL : OffchainFeeReqType.OFFCHAIN_WITHDRAWAL\n            setWithdrawType(offchainType)\n        },\n        handlePanelEvent: async (data: SwitchData<R>, switchType: 'Tomenu' | 'Tobutton') => {\n            return new Promise((res: any) => {\n                if (data?.tradeData?.belong) {\n                    if (withdrawValue !== data.tradeData) {\n                        setWithdrawValue(data.tradeData)\n                    }\n                } else {\n                    setWithdrawValue({belong: undefined, tradeValue: 0, balance: 0} as IBData<unknown>)\n                }\n\n                res();\n            })\n        },\n        chargeFeeToken: 'ETH',\n        chargeFeeTokenList: chargeFeeList,\n        handleOnAddressChange: (value: any) => {\n            // myLog('withdraw handleOnAddressChange', value);\n            setWithdrawAddr(value)\n        },\n        handleAddressError: (_value: any) => {\n            return {error: false, message: ''}\n        }\n    }\n\n    return {\n        withdrawProps,\n    }\n}\n","import { HashRouter as Router, Route, Switch, } from 'react-router-dom'\n\nimport Header from 'layouts/header'\n\nimport QuotePage from 'pages/QuotePage'\nimport { SwapPage } from 'pages/SwapPage'\n\nimport Container from '@material-ui/core/Container'\nimport { Box } from '@material-ui/core'\nimport { DevWrapper } from '../provider/'\nimport { Layer2Page } from '../pages/Layer2Page'\nimport { LiquidityPage } from '../pages/LiquidityPage'\nimport { ModalGroup } from '../modal';\nimport React from 'react';\n\nconst RouterView = () => {\n\n    return <Router>\n        <Header />\n\n        {/*<Box style={{marginTop: `var(--header-height)`}} flex={1} display={'flex'}>*/}\n        <Container maxWidth=\"lg\" style={{minHeight:'calc(100% - 64px - 32px)',display:'flex',flexDirection:'column'}}>\n            {/*style={{height: '100%' }}*/}\n            <Box display={'flex'} flex={1} alignItems={'stretch'} flexDirection={'row'} marginTop={3}  >\n                <Switch>\n                    <Route exact component={SwapPage} path='/'/>\n                    <Route exact component={QuotePage} path='/markets'/>\n                    <Route component={SwapPage} path='/trading/lite'/>\n                    <Route component={SwapPage} path='/trading/lite(/:symbol)'/>\n\n                    <Route exact component={Layer2Page} path='/layer2'/>\n                    <Route exact component={Layer2Page} path='/layer2/assets'/>\n                    <Route exact component={Layer2Page} path='/layer2/transactions'/>\n                    <Route exact component={Layer2Page} path='/layer2/trades'/>\n                    <Route exact component={Layer2Page} path='/layer2/ammRecords'/>\n                    {/* <Route exact component={Layer2Page} path='/layer2/orders'/> */}\n                    <Route exact component={Layer2Page} path='/layer2/setting'/>\n\n                    <Route exact component={LiquidityPage} path='/liquidity'/>\n                    <Route exact component={LiquidityPage} path='/liquidity/pools/*'/>\n                    <Route exact component={LiquidityPage} path='/liquidity/pools'/>\n                    {/*<Route exact component={LiquidityPage} path='/liquidity/pools/coinPair(/:symbol)'/>*/}\n                    <Route exact component={LiquidityPage} path='/liquidity/amm-mining'/>\n                    <Route exact component={LiquidityPage} path='/liquidity/my-liquidity'/>\n                    <Route exact component={LiquidityPage} path='/liquidity/orderBook-Mining'/>\n                    <Route exact component={LiquidityPage} path='/liquidity/maker-rebates'/>\n\n                    <DevWrapper>\n                        <Route exact path='/debug'>\n                        </Route>\n                    </DevWrapper>\n\n                </Switch>\n            </Box>\n        </Container>\n        {/*</Box>*/}\n        <ModalGroup/>\n    </Router>\n}\n\nexport default RouterView\n","import { cleanLayer2, goErrorNetWork } from './lockAccount';\nimport store from '../../stores';\nimport { cleanAccountStatus, updateAccountStatus } from '../../stores/account';\nimport { updateSystem } from '../../stores/system';\n\nexport const networkUpdate = ({chainId}: any): boolean => {\n    const _chainId = store.getState().system.chainId;\n    if (chainId === 'unknown') {\n        store.dispatch(updateAccountStatus({wrongChain: true, _chainId:chainId}));\n        goErrorNetWork();\n        return false;\n    } else if (chainId !== _chainId && _chainId !== 'unknown' && chainId !== 'unknown') {\n        store.dispatch(updateAccountStatus({_chainId:chainId}));\n        store.dispatch(updateSystem({chainId}));\n        cleanLayer2()\n        window.location.reload();\n        return true;\n    }else{\n        store.dispatch(updateAccountStatus({wrongChain: false, _chainId:chainId}));\n        return true;\n    }\n}\n","import { walletLayer2Services } from './walletLayer2Services';\nimport store from '../../stores';\nimport { cleanAccountStatus, updateAccountStatus } from '../../stores/account';\nimport { myLog } from '../../utils/log_tools';\n\nexport const checkAccount = (newAccAddress: string) => {\n    const account = store.getState().account;\n    if (account.accAddress === '' || account.accAddress !== newAccAddress) {\n        myLog('After connect >>,account part: diff account, clean layer2')\n        store.dispatch(cleanAccountStatus(undefined));\n    }\n    if (newAccAddress && newAccAddress !== '') {\n        myLog('After connect >>,checkAccount: step1 address',newAccAddress)\n        if (account.accountId === -1) {\n            myLog('After connect >>,checkAccount: step1 no account Id')\n            walletLayer2Services.sendCheckAccount(newAccAddress)\n            store.dispatch(updateAccountStatus({accAddress: newAccAddress}))\n        } else if (account.accountId && account.apiKey && account.eddsaKey) {\n            myLog('After connect >>,checkAccount: step1 have activate account from store, account:', account)\n            walletLayer2Services.sendAccountSigned();\n        } else {\n            myLog('After connect >>,checkAccount: step1 account locked')\n            walletLayer2Services.sendAccountLock();\n        }\n    }\n}","import React from 'react';\nimport { SagaStatus } from '@loopring-web/common-resources';\nimport { useWalletLayer1 } from './stores/walletLayer1';\nimport { useWalletLayer2 } from './stores/walletLayer2';\nimport { useAccount } from './stores/account';\nimport { useUserRewards } from './stores/userRewards';\nimport { useConnect } from './hookConnect';\n\nexport function useAccountInit({state}: { state: keyof typeof SagaStatus }) {\n    const {getUserRewards}  = useUserRewards()\n    useConnect({state})\n    const {\n        updateWalletLayer1,\n        resetLayer1,\n        status: walletLayer1Status,\n        statusUnset: wallet1statusUnset\n    } = useWalletLayer1()\n    const {\n        updateWalletLayer2,\n        resetLayer2,\n        status: walletLayer2Status,\n        statusUnset: wallet2statusUnset\n    } = useWalletLayer2();\n    const {account, status: accountStatus, statusUnset: accountStatusUnset} = useAccount();\n\n    React.useEffect(() => {\n        if (accountStatus === SagaStatus.UNSET && state === SagaStatus.DONE) {\n            switch (account.readyState) {\n                case 'UN_CONNECT':\n                case 'ERROR_NETWORK':\n                    resetLayer1();\n                    break;\n                case 'NO_ACCOUNT':\n                case 'DEPOSITING':\n                case 'LOCKED':\n                    resetLayer2();\n                    if (walletLayer1Status !== SagaStatus.PENDING) {\n                        updateWalletLayer1();\n                    }\n                    break;\n                case 'ACTIVATED':\n                    // \n                    if (walletLayer1Status !== SagaStatus.PENDING) {\n                        updateWalletLayer1();\n                    }\n                    if (walletLayer2Status !== SagaStatus.PENDING) {\n                        updateWalletLayer2();\n                    }\n                    break;\n\n            }\n            getUserRewards();\n        }\n\n    }, [accountStatus, state]);\n    React.useEffect(() => {\n        switch (walletLayer1Status) {\n            case \"ERROR\":\n                wallet1statusUnset();\n                // setState('ERROR')\n                //TODO: show error at button page show error  some retry dispath again\n                break;\n            case \"DONE\":\n                wallet1statusUnset();\n                //setWalletMap1(walletLayer1State.walletLayer1);\n                break;\n            default:\n                break;\n\n        }\n    }, [walletLayer1Status]);\n    React.useEffect(() => {\n        switch (walletLayer2Status) {\n            case \"ERROR\":\n                wallet2statusUnset();\n                // setState('ERROR')\n                //TODO: show error at button page show error  some retry dispath again\n                break;\n            case \"DONE\":\n                wallet2statusUnset();\n                //setWalletMap1(walletLayer1State.walletLayer1);\n                break;\n            default:\n                break;\n\n        }\n    }, [walletLayer2Status])\n}\n","import { useAccount } from './stores/account';\nimport { useSystem } from './stores/system';\nimport { useOpenModals, WalletConnectStep } from '@loopring-web/component-lib';\nimport React from 'react';\nimport { ChainId, sleep } from 'loopring-sdk';\nimport { myLog } from './utils/log_tools';\nimport { networkUpdate } from './services/account/networkUpdate';\nimport { checkAccount } from './services/account/checkAccount';\nimport { ErrorType, useConnectHook } from '@loopring-web/web3-provider';\nimport { SagaStatus } from '@loopring-web/common-resources';\n\nexport  function useConnect({state}: { state: keyof typeof SagaStatus }) {\n    const {account, shouldShow, resetAccount, statusUnset: statusAccountUnset, setShouldShow,status:accountStatus } = useAccount();\n    const {updateSystem, chainId: _chainId, status: systemStatus, statusUnset: systemStatusUnset} = useSystem();\n    const {setShowConnect} = useOpenModals();\n    const [stateAccount,setStateAccount] = React.useState<SagaStatus>(SagaStatus.DONE);\n    React.useEffect(()=>{\n        if(stateAccount === SagaStatus.PENDING && accountStatus === SagaStatus.DONE) {\n            setStateAccount(SagaStatus.DONE)\n            statusAccountUnset();\n        }\n    },[stateAccount,accountStatus])\n    const handleConnect = React.useCallback(async ({\n                                                       accounts,\n                                                       chainId,\n                                                   }: { accounts: string, provider: any, chainId: ChainId | 'unknown' }) => {\n        const accAddress = accounts[ 0 ];\n        myLog('After connect >>,network part start: step1 networkUpdate')\n        const networkFlag = networkUpdate({chainId})\n        myLog('After connect >>,network part done: step2 check account')\n        if(networkFlag){\n            checkAccount(accAddress);\n        }\n        setShouldShow(false)\n        setShowConnect({isShow: shouldShow ?? false, step: WalletConnectStep.SuccessConnect});\n        await sleep(1000)\n        setShowConnect({isShow: false, step: WalletConnectStep.SuccessConnect});\n\n    }, [_chainId, account, shouldShow])\n\n    const handleAccountDisconnect = React.useCallback(async () => {\n        await resetAccount({shouldUpdateProvider:true});\n        setStateAccount(SagaStatus.PENDING)\n    }, [state]);\n\n    const handleError = React.useCallback(async ({type, errorObj}: { type: keyof typeof ErrorType, errorObj: any }) => {\n        updateSystem({chainId: account._chainId ? account._chainId : 1})\n        resetAccount();\n        statusAccountUnset();\n        myLog('Error')\n    }, [account]);\n\n    useConnectHook({handleAccountDisconnect, handleError, handleConnect});\n\n}","import { Trans, useTranslation } from 'react-i18next';\nimport { Box, Container, Link, Typography } from '@material-ui/core';\nimport styled from '@emotion/styled';\nimport { ErrorObject } from '@loopring-web/common-resources';\nimport { getContactInfo } from '../../utils/dt_tools';\n\nconst StyleBox = styled(Box)`\n  background-image: url('./static/images/error_bg.png');\n  background-repeat: no-repeat;\n  background-size: contain;\n  background-position: bottom;\n  white-space: pre-wrap;\n  //h2{\n  //  position: relative;\n  //}\n` as typeof Box\n\nexport const ErrorPage = ({messageKey}: ErrorObject) => {\n    // const {messageKey}: { id?:string,messageKey:string } = {messageKey: 'errorMessageTokenMapIsEmpty'};\n    //TODO: checkRouter\n    const {t} = useTranslation('error');\n    const message = `labelConnectUs`;\n    return <>\n        <Container>\n            {/*style={{height: '100%' }}*/}\n            <StyleBox flex={1} display={'flex'} alignItems={'flex-start'} justifyContent={'center'}\n                      flexDirection={'column'} marginTop={4} height={680} maxWidth={1200}>\n                {/*<StyleBox>*/}\n                <Box textAlign={'center'} position={'relative'} left={128} top={-64}>\n                    <Typography component={'h2'} variant={'h2'}>\n                        {t(messageKey)}\n                    </Typography>\n                    <Typography marginY={2} component={'p'} variant={'body1'} color={'textSecondary'}>\n                        <Trans i18nKey={message}>\n                            If you believe this is indeed a bug, please <Link\n                            component={'a'}\n                            onClick={(e) => {\n                                window.location.href = getContactInfo();\n                                e.preventDefault();\n                            }}\n                        >contact us</Link> <br/> We would appreciate your feedback\n\n                        </Trans>\n                        {/*{t(message)}*/}\n                        {/*{t(messageKey)}*/}\n                    </Typography>\n                </Box>\n                {/*</StyleBox>*/}\n            </StyleBox>\n        </Container>\n\n        {/*<Footer></Footer>*/}\n    </>\n}\n","// import { i18nInstance as i18n  } from \"@loopring-web/common-resources\"\nimport i18n from 'i18next';\n\nconst covertLocale = (rawLocale: string = i18n.language) => {\n    return rawLocale.replace('_', '-')\n}\n\nexport function getLocaleDtFromTs(ts: number | string, locale: string = i18n.language) {\n    if (typeof(ts) === 'string') {\n        ts = parseInt(ts)\n    }\n    const dt = new Date(ts).toLocaleString(covertLocale(locale))\n    return dt\n}\n\nexport function getLocaleDt(dt?: Date, locale: string = i18n.language) {\n    if (dt) {\n        return dt.toLocaleString(covertLocale(locale))\n    }\n    return ''\n}\n\nexport function getContactInfo(subject: string = 'report to loopring website', body: string ='Body Content') {\n    const email = process.env.CONTACT_US_EMAIL ?? 'contact@loopring.io'\n    return `mailto:${email}?subject=${subject}&body=${body}`\n}\n","import { Trans, useTranslation } from 'react-i18next';\nimport { Box, Container, Link, Slide, Typography } from '@material-ui/core';\nimport styled from '@emotion/styled';\nimport { ErrorObject } from '@loopring-web/common-resources';\nimport { getContactInfo } from '../../utils/dt_tools';\n\nconst StyleBox = styled(Box)`\n  //background-image: url('./static/images/error_bg.png');\n  //background-repeat: no-repeat;\n  //background-size: contain;\n  //background-position: bottom;\n  //white-space: pre-wrap;\n  ////h2{\n  ////  position: relative;\n  ////}\n  /*\n  Set the color of the icon\n*/\n  svg path,\n  svg rect{\n    fill: ${({theme}) => theme.colorBase.primaryLight};\n  }\n` as typeof Box\n\nexport const LoadingPage = () => {\n    const {t} = useTranslation('layout');\n    return <>\n        {/*<Container>*/}\n            {/*style={{height: '100%' }}*/}\n            <StyleBox flex={1} display={'flex'} alignItems={'center'} justifyContent={'center'}\n                      flexDirection={'column'} height={'100%'}  width={'100%'}>\n                <div className=\"loader loader--style3\" title=\"2\">\n                    <svg version=\"1.1\" id=\"loader-1\" xmlns=\"http://www.w3.org/2000/svg\"\n                         xmlnsXlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n                         width=\"40px\" height=\"40px\" viewBox=\"0 0 50 50\" enableBackground={'new 0 0 50 50'}\n                         xmlSpace=\"preserve\">\n  <path fill=\"#000\"\n        d=\"M43.935,25.145c0-10.318-8.364-18.683-18.683-18.683c-10.318,0-18.683,8.365-18.683,18.683h4.068c0-8.071,6.543-14.615,14.615-14.615c8.072,0,14.615,6.543,14.615,14.615H43.935z\">\n    <animateTransform attributeType=\"xml\"\n                      attributeName=\"transform\"\n                      type=\"rotate\"\n                      from=\"0 25 25\"\n                      to=\"360 25 25\"\n                      dur=\"0.6s\"\n                      repeatCount=\"indefinite\"/>\n    </path>\n  </svg>\n                </div>\n                {/*<StyleBox>*/}\n                {/*<Slide direction=\"up\" in={true} mountOnEnter unmountOnExit>*/}\n                {/*<Box textAlign={'center'} >*/}\n                {/*    <Typography component={'h1'} variant={'h1'} fontWeight={500} fontFamily={'DINCondensed2'} fontSize={96} style={{textTransform: \"uppercase\"}} >*/}\n                {/*        {t('titleLoopring')}*/}\n                {/*    </Typography>*/}\n                {/*    <Typography component={'h2'}   marginTop={3}  fontSize={32} fontFamily={'DINCondensed2'}>*/}\n                {/*        {t('labelLoopringDescribe')}*/}\n                {/*    </Typography>*/}\n                {/*    /!*<Typography marginY={2} component={'p'} variant={'body1'} color={'textSecondary'}>*!/*/}\n                {/*    /!*    <Trans i18nKey={message}>*!/*/}\n                {/*    /!*        If you believe this is indeed a bug, please <Link*!/*/}\n                {/*    /!*        component={'a'}*!/*/}\n                {/*    /!*        onClick={(e) => {*!/*/}\n                {/*    /!*            window.location.href = getContactInfo();*!/*/}\n                {/*    /!*            e.preventDefault();*!/*/}\n                {/*    /!*        }}*!/*/}\n                {/*    /!*    >contact us</Link> <br/> We would appreciate your feedback*!/*/}\n\n                {/*    /!*    </Trans>*!/*/}\n                {/*    /!*    /!*{t(message)}*!/*!/*/}\n                {/*    /!*    /!*{t(messageKey)}*!/*!/*/}\n                {/*    /!*</Typography>*!/*/}\n                {/*</Box>*/}\n                {/*</Slide>*/}\n                {/*</StyleBox>*/}\n            </StyleBox>\n\n        {/*</Container>*/}\n\n        {/*<Footer></Footer>*/}\n    </>\n}\n","import { ModalProvider } from 'styled-react-modal'\nimport RouterView from './routers'\nimport { GlobalStyles } from '@material-ui/core';\nimport { css, Theme, useTheme } from '@emotion/react';\nimport { ErrorMap, globalCss, SagaStatus } from '@loopring-web/common-resources';\n// import { GlobalProvider, Web3ReactManager } from './provider/';\nimport { useInit } from './hook';\n// import loadingSvg from '@loopring-web/common-resources/assets/svg/loading.svg';\nimport { ErrorPage } from './pages/ErrorPage';\nimport { LoadingPage } from './pages/LoadingPage';\nimport { GlobalProvider } from './provider';\n\nconst App = () => {\n  const theme: Theme = useTheme();\n  const { state } = useInit();\n  // const [status, setStatus] = React.useState<keyof typeof SagaStatus>('PENDING');\n  // check all status be\n  //TODO  demo if  tokenMapStatus is unset and tokenMap is empty. show error\n  //TODO tokenMapObj.status is pending, show global loading\n  //console.log(tokenMapObj.tokenMap && Object.keys(tokenMapObj.tokenMap).length>0,tokenMapObj.status, tokenMapObj.errorMessage)\n\n  // useEffect(() => {\n  //     if (state === SagaStatus.PENDING || state === SagaStatus.ERROR) {\n  //         setStatus(state)\n  //     } else {\n  //         setStatus('DONE')\n  //     }\n  // }, [state, setStatus])\n\n  return <><GlobalStyles styles={css` \n      ${globalCss({ theme })};\n      body{\n          ${theme.mode === 'dark' ? `\n            color: ${theme.colorBase.textPrimary};\n          ` : ``}\n      }\n      body:before {\n        ${theme.mode === 'dark' ? `\n            background: #191C30;\n            background: ${theme.colorBase.background().bg};\n       ` : ''}\n      }\n      //#root{\n      //  display: flex;\n      //  flex-direction: column;\n      //}\n}`}></GlobalStyles>\n    <ModalProvider>\n      <GlobalProvider>\n        {/*<Web3ReactManager>*/}\n        {state === 'PENDING' ?\n          <LoadingPage />\n          // <ErrorPage {...ErrorMap.LOADING_WHOLE_SITE}/>\n          // <Avatar src={loadingSvg}/>\n          : state === 'ERROR' ? <ErrorPage {...ErrorMap.NO_NETWORK_ERROR} /> : <>\n            <RouterView />\n\n            {/*    <ErrorPage {...ErrorMap.LOADING_WHOLE_SITE}/>*/}\n          </>}\n      </GlobalProvider>\n\n    </ModalProvider></>\n\n\n}\n\nexport default App;\n\n\n","import React from 'react';\nimport { useCustomDCEffect } from 'hooks/common/useCustomDCEffect';\nimport { useSystem } from './stores/system';\nimport { ChainId, sleep } from 'loopring-sdk';\nimport { useAmmMap } from './stores/Amm/AmmMap';\nimport { SagaStatus } from '@loopring-web/common-resources';\nimport { useTokenMap } from './stores/token';\nimport { useAccount } from './stores/account/hook';\nimport { connectProvides, walletServices } from '@loopring-web/web3-provider';\nimport { useAccountInit } from './hookAccountInit';\nimport { useAmmActivityMap } from './stores/Amm/AmmActivityMap';\nimport { useTicker } from './stores/ticker';\nimport { checkAccount } from './services/account/checkAccount';\n// import { statusUnset as accountStatusUnset } from './stores/account';\n\n/**\n * @description\n * @step1 subscribe Connect hook\n * @step2 check the session storage ? choose the provider : none provider\n * @step3 decide china Id by step2\n * @step4 prepare the static date (tokenMap, ammMap, faitPrice, gasPrice, forex, Activities ...)\n * @step5 launch the page\n * @todo each step has error show the ErrorPage , next version for service maintain page.\n */\n\nexport function useInit() {\n    const [state, setState] = React.useState<keyof typeof SagaStatus>('PENDING')\n    // const {updateWalletLayer1, resetLayer1, status:walletLayer1Status,statusUnset:wallet1statusUnset} = useWalletLayer1()\n    // const {updateWalletLayer2, resetLayer2, status:walletLayer2Status,statusUnset:wallet2statusUnset } = useWalletLayer2();\n    const {account, updateAccount, resetAccount, status:accountStatus,statusUnset:accountStatusUnset} = useAccount();\n    const {status: tokenMapStatus, statusUnset: tokenMapStatusUnset}  = useTokenMap();\n    const {status: ammMapStatus, statusUnset: ammMapStatusUnset}  = useAmmMap();\n    const {updateSystem, status: systemStatus, statusUnset: systemStatusUnset} = useSystem();\n    const {status:ammActivityMapStatus,statusUnset:ammActivityMapStatusUnset}  = useAmmActivityMap()\n    const {status: tickerStatus,statusUnset: tickerStatusUnset} = useTicker();\n\n    useCustomDCEffect(async () => {\n        // TODO getSessionAccount infor\n\n        if (account.accAddress !== '' && account.connectName && account.connectName !== 'unknown') {\n            try {\n                await connectProvides[ account.connectName ](account.accAddress);\n                updateAccount({})\n                if (connectProvides.usedProvide && connectProvides.usedWeb3) {\n\n                    // @ts-ignore\n                    let chainId = Number(connectProvides.usedProvide?.connector?.chainId) ??  Number(await connectProvides.usedWeb3.eth.getChainId())\n                    if( ChainId[chainId] === undefined) {\n                        chainId = account._chainId && account._chainId !=='unknown'? account._chainId  :ChainId.MAINNET\n                    }\n                    updateSystem({chainId:chainId as any})\n                    return\n                }\n            } catch (error) {\n                //await resetAccount({shouldUpdateProvider:true});\n                walletServices.sendDisconnect('',`error at init loading  ${error}, disconnect`)\n                const chainId = account._chainId && account._chainId !=='unknown'? account._chainId  :ChainId.MAINNET\n                updateSystem({chainId})\n            }\n        } else  {\n            if(account.accAddress === '' ||  account.connectName === 'unknown' ){\n                resetAccount() \n            }\n            const chainId = account._chainId && account._chainId !=='unknown'? account._chainId  :ChainId.MAINNET\n            updateSystem({chainId})\n        }\n\n    }, [])\n    React.useEffect(() => {\n        switch (systemStatus) {\n            case \"ERROR\":\n                systemStatusUnset();\n                setState('ERROR')\n                //TODO show error at button page show error  some retry dispat again\n                break;\n            case \"DONE\":\n                systemStatusUnset();\n                break;\n            default:\n                break;\n        }\n    }, [systemStatus, systemStatusUnset]);\n    React.useEffect(() => {\n        switch (tokenMapStatus) {\n            case \"ERROR\":\n                tokenMapStatusUnset();\n                setState('ERROR')\n                break;\n            case \"DONE\":\n                tokenMapStatusUnset();\n                break;\n            default:\n                break;\n        }\n        switch (ammMapStatus) {\n            case \"ERROR\":\n                ammMapStatusUnset();\n                setState('ERROR')\n                break;\n            case \"DONE\":\n                ammMapStatusUnset();\n                break;\n            default:\n                break;\n        }\n        if(tokenMapStatus === SagaStatus.UNSET && ammMapStatus ===  SagaStatus.UNSET ){\n            setState('DONE')\n        }\n    }, [tokenMapStatus,ammMapStatus])\n\n    React.useEffect(() => {\n        switch (ammActivityMapStatus) {\n            case \"ERROR\":\n                ammActivityMapStatusUnset();\n                // setState('ERROR')\n                //TODO: show error at button page show error  some retry dispath again\n                break;\n            case \"DONE\":\n                ammActivityMapStatusUnset();\n                break;\n            default:\n                break;\n        }\n    }, [ammActivityMapStatus])\n    React.useEffect(() => {\n        switch (tickerStatus) {\n            case \"ERROR\":\n                console.log(\"ERROR\", 'get ticker error,ui');\n                tickerStatusUnset()\n                break;\n            case \"PENDING\":\n                break;\n            case \"DONE\":\n                tickerStatusUnset();\n                break;\n            default:\n                break;\n        }\n    }, [tickerStatus])\n\n    useAccountInit({state})\n    // React.useEffect(() => {\n    //     if (tokenMapStatus === SagaStatus.ERROR|| tokenState.status === \"ERROR\") {\n    //         //TODO: solve errorx\n    //         ammMapState.statusUnset();\n    //\n    //         setState('ERROR');\n    //     } else if(){\n    //         ammMapState.statusUnset();\n    //         tokenState.statusUnset();\n    //     }\n    //     if (ammMapState.status === \"DONE\" && tokenState.status === \"DONE\") {\n    //\n    //         setState('DONE');\n    //     }\n    // }, [ammMapStatus])\n\n\n    return {\n        state,\n    }\n}\n\n\n","import { Provider } from 'react-redux'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\n// import { createWeb3ReactRoot, Web3ReactProvider } from '@web3-react/core'\nimport store from 'stores' //{persistor}\n// import { getLibrary } from 'utils/web3_tools'\n// import { NetworkContextName } from 'loopring-sdk'\nimport { getTheme, i18n, provider, ProviderComposer } from \"@loopring-web/common-resources\"\n\nimport { ThemeProvider as MuThemeProvider } from '@material-ui/core'\nimport LocalizationProvider from '@material-ui/pickers/LocalizationProvider'\n\nimport MomentUtils from '@material-ui/lab/AdapterMoment'\n\nimport { ThemeProvider } from \"@emotion/react\"\n\nimport { I18nextProvider } from \"react-i18next\"\n\n// const Web3ProviderNetwork = createWeb3ReactRoot(NetworkContextName)\nconst providers = [\n    provider(LocalizationProvider as any, {dateAdapter: MomentUtils}),\n    provider(I18nextProvider as any, {i18n: i18n}),\n    provider(MuThemeProvider as any, {theme: getTheme('dark')}),\n    provider(ThemeProvider as any, {theme: getTheme('dark')}),\n    provider(Provider as any, {store}),// persistor\n]\n\nReactDOM.render(\n// @ts-ignore\n    <ProviderComposer providers={providers}>\n        {/*<Web3ReactProvider getLibrary={getLibrary}>*/}\n        {/*    <Web3ProviderNetwork getLibrary={getLibrary}>*/}\n        <App/>\n        {/*</Web3ProviderNetwork>*/}\n        {/*</Web3ReactProvider>*/}\n    </ProviderComposer>,\n    document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\nif (process.env.NODE_ENV !== 'production') {\n    reportWebVitals(console.log)\n}\n","import { createSlice, PayloadAction, Slice } from '@reduxjs/toolkit'\nimport { AmmMapStates, GetAmmMapParams } from './interface';\nimport { SagaStatus } from '@loopring-web/common-resources';\n\n\nconst initialState: Required<AmmMapStates<object, object>> = {\n    ammMap: undefined,\n    __timer__: -1,\n    status: 'PENDING',\n    errorMessage: null,\n}\nconst ammMapSlice: Slice = createSlice({\n    name: 'ammMap',\n    initialState,\n    reducers: {\n        getAmmMap(state, action: PayloadAction<GetAmmMapParams>) {\n            state.status = SagaStatus.PENDING\n        },\n        getAmmMapStatus(state, action: PayloadAction<AmmMapStates<any, any>>) {\n            // @ts-ignore\n            if (action.error) {\n                state.status = SagaStatus.ERROR\n                // @ts-ignore\n                state.errorMessage = action.error\n            }\n            const {ammMap, __timer__} = action.payload\n            if (ammMap) {\n                state.ammMap = ammMap;\n            }\n            if (__timer__) {\n                state.__timer__ = __timer__;\n            }\n            state.status = SagaStatus.DONE\n        },\n        updateRealTimeAmmMap(state, action: PayloadAction<undefined>) {\n            state.status = SagaStatus.PENDING\n        },\n        statusUnset: state => {\n            state.status = SagaStatus.UNSET\n        }\n    },\n});\nexport { ammMapSlice };\nexport const {getAmmMap, getAmmMapStatus, statusUnset, updateRealTimeAmmMap} = ammMapSlice.actions\n","import { createSlice, PayloadAction, Slice } from '@reduxjs/toolkit'\nimport { SagaStatus, StateBase } from '@loopring-web/common-resources';\nimport { SocketMap } from './interface';\n\nconst initialState: StateBase & { socket: SocketMap } = {\n    socket: {},\n    status: 'PENDING',\n    errorMessage: null,\n}\nconst socketSlice: Slice<StateBase & { socket: SocketMap }> = createSlice({\n    name: 'socket',\n    initialState,\n    reducers: {\n        socketEnd(state, action: PayloadAction<undefined>) {\n            state.socket = {};\n            state.status = SagaStatus.PENDING;\n        },\n        sendSocketTopic(state, action: PayloadAction<{ socket: SocketMap }>) {\n            state.socket = action.payload.socket\n        },\n        getSocketStatus(state, action: PayloadAction<undefined>) {\n\n            // @ts-ignore\n            if (action.error) {\n                state.status = SagaStatus.ERROR\n                // @ts-ignore\n                state.errorMessage = action.error\n            }\n            // state.socket = action.payload.socket\n            state.status = SagaStatus.DONE\n        },\n\n        statusUnset: state => {\n            state.status = SagaStatus.UNSET\n        }\n\n    },\n});\nexport { socketSlice };\nexport const {getSocketStatus, sendSocketTopic, socketEnd, statusUnset} = socketSlice.actions;\n","import { createSlice, PayloadAction, Slice } from '@reduxjs/toolkit'\nimport { TickerStates } from './interface';\nimport { CoinKey, SagaStatus } from '@loopring-web/common-resources';\n\nconst initialState: Required<TickerStates> = {\n    tickerMap: {},\n    status: 'PENDING',\n    errorMessage: null,\n}\nconst tickerMapSlice: Slice = createSlice({\n    name: 'tickerMap',\n    initialState,\n    reducers: {\n        getTicker(state, action: PayloadAction<CoinKey<any>>) {\n            state.status = SagaStatus.PENDING\n        },\n        getTickers(state, action: PayloadAction<Array<CoinKey<any>>>) {\n            state.status = SagaStatus.PENDING\n        },\n        getTickerStatus(state, action: PayloadAction<TickerStates>) {\n            // @ts-ignore\n            if (action.error) {\n                state.status = SagaStatus.ERROR\n                // @ts-ignore\n                state.errorMessage = action.error\n            }\n            state.tickerMap = action.payload.tickerMap;//{...state.tickerMap,...};\n            state.status = SagaStatus.DONE\n        },\n        statusUnset: state => {\n            state.status = SagaStatus.UNSET\n        }\n\n    },\n});\nexport { tickerMapSlice };\nexport const {getTicker, getTickers, getTickerStatus, statusUnset} = tickerMapSlice.actions;","import { createSlice, PayloadAction, Slice } from '@reduxjs/toolkit'\nimport { GetTokenMapParams, TokenMapStates } from './interface';\nimport { SagaStatus } from '@loopring-web/common-resources';\n\nconst initialState: TokenMapStates<object> = {\n    coinMap: {},\n    totalCoinMap: {},\n    addressIndex: undefined,\n    tokenMap: undefined,\n    marketMap: undefined,\n    idIndex: undefined,\n    status: 'PENDING',\n    errorMessage: null,\n}\nconst tokenMapSlice: Slice<TokenMapStates<object>> = createSlice({\n    name: 'tokenMap',\n    initialState,\n    reducers: {\n        getTokenMap(state, action: PayloadAction<GetTokenMapParams<any>>) {\n            state.status = SagaStatus.PENDING\n        },\n        getTokenMapStatus(state, action: PayloadAction<TokenMapStates<object>>) {\n            // @ts-ignore      console.log(action.type)\n            if (action.error) {\n                state.status = SagaStatus.ERROR\n                // @ts-ignore\n                state.errorMessage = action.error\n            }\n\n            const {\n                tokenMap,\n                totalCoinMap,\n                marketMap,\n                addressIndex,\n                idIndex,\n                coinMap,\n                marketArray,\n                marketCoins\n            } = action.payload;\n            if (tokenMap) {\n                state.tokenMap = tokenMap\n            }\n            if (marketMap) {\n                state.marketMap = marketMap\n            }\n            if (addressIndex) {\n                state.addressIndex = addressIndex\n            }\n            if (idIndex) {\n                state.idIndex = idIndex\n            }\n            if (coinMap) {\n                state.coinMap = coinMap\n            }\n            if (totalCoinMap) {\n                state.totalCoinMap = totalCoinMap\n            }\n            if (marketArray) {\n                state.marketArray = marketArray\n            }\n            if (marketCoins) {\n                state.marketCoins = marketCoins\n            }\n            // if (tokenPairsMap) {state.tokenPairsMap = tokenPairsMap }\n            state.status = SagaStatus.DONE;\n        },\n\n        // getTokenPairMap(state, action: PayloadAction<{tokenPairs: TokenPairs }>) {\n        //     const {tokenPairs} = action.payload;\n        //     const tokenPairsMap =  Reflect.ownKeys(tokenPairs).reduce((prev,key)=>{\n        //         // @ts-ignore\n        //         return prev[key as string] =  tokenPairs[key as string].tokenList\n        //     }, {} )\n        //     if (tokenPairsMap) {state.tokenPairsMap = tokenPairsMap }\n        //     // state.status = SagaStatus.PENDING\n        // },\n        statusUnset: state => {\n            state.status = SagaStatus.UNSET\n        }\n\n    },\n});\nexport { tokenMapSlice };\nexport const {getTokenMap, getTokenMapStatus, statusUnset} = tokenMapSlice.actions;","import { useDispatch, useSelector } from 'react-redux'\nimport { getTicker, getTickers, statusUnset } from './reducer';\nimport { TickerStates } from './interface';\nimport { CoinKey } from '@loopring-web/common-resources';\nimport React from 'react';\n\nexport function useTicker(): TickerStates & {\n    updateTickers: (tickerKeys: Array<CoinKey<any>>) => void,\n    updateTicker: (tickerKey: CoinKey<any>) => void,\n    statusUnset: () => void,\n} {\n    const tickerMap: TickerStates = useSelector((state: any) => state.tickerMap)\n    const dispatch = useDispatch();\n    return {\n        ...tickerMap,\n        statusUnset: React.useCallback(() => dispatch(statusUnset(undefined)), [dispatch]),\n        updateTickers: React.useCallback((tickerKeys: Array<CoinKey<any>>) => dispatch(getTickers({tickerKeys})), [dispatch]),\n        updateTicker: React.useCallback((tickerKey: CoinKey<any>) => dispatch(getTicker({tickerKey})), [dispatch]),\n    }\n\n}\n","import { useDispatch, useSelector } from 'react-redux'\nimport { sendSocketTopic, socketEnd } from './reducer';\nimport { SocketMap } from './interface';\nimport React from 'react';\nimport { statusUnset } from '../Amm/AmmMap';\nimport { StateBase } from '@loopring-web/common-resources';\n\nexport function useSocket(): StateBase & {\n    // socketStart:()=>void,\n    statusUnset: () => void,\n    sendSocketTopic: (socket: SocketMap) => void,\n    socketEnd: () => void\n} {\n    const socket: StateBase & { socket: SocketMap } = useSelector((state: any) => state.socket)\n    const dispatch = useDispatch();\n    // const socketStart = () => {\n    //     dispatch(socketSlice.actions.socketStart(undefined))\n    // }\n    // const sendSocketTopic = (socket: SocketMap) => {\n    //     dispatch(socketSlice.actions.sendSocketTopic({socket}))\n    // }\n    // const socketEnd = () => {\n    //     dispatch(socketSlice.actions.socketEnd(undefined))\n    // }\n    // const statusUnset = () => {\n    //     dispatch(socketSlice.actions.statusUnset(undefined))\n    // }\n    return {\n        ...socket,\n        statusUnset: React.useCallback(() => dispatch(statusUnset(undefined)), [dispatch]),\n        sendSocketTopic: React.useCallback((socket: SocketMap) => dispatch(sendSocketTopic({socket})), [dispatch]),\n        socketEnd: React.useCallback(() => dispatch(socketEnd(undefined)), [dispatch]),\n    }\n\n}\n","import React from 'react';\nimport { useAmmMap } from '../../../stores/Amm/AmmMap';\nimport { AmmDetail, CustomError, ErrorMap, SagaStatus, } from '@loopring-web/common-resources';\nimport { deepClone } from '../../../utils/obj_tools';\nimport { useTokenMap } from '../../../stores/token';\nimport { useSocket } from '../../../stores/socket';\nimport { useTicker } from '../../../stores/ticker';\n\n// import { tickerService } from '../../../services/tickerService';\n\nexport function useAmmMapUI<R extends { [ key: string ]: any }, I extends { [ key: string ]: any }>({pageSize}: { pageSize: number }) {\n    const [rawData, setRawData] = React.useState<Array<AmmDetail<any>> | []>([]);\n    const [page, setPage] = React.useState<number>(1);\n    const [timestamp, setTimestamp] = React.useState<NodeJS.Timer | -1>(-1)\n    const {coinMap} = useTokenMap();\n    const {ammMap, status: ammMapStatus,} = useAmmMap();\n    const {\n        tickerMap,\n        status: tickerStatus,\n        updateTickers,\n    } = useTicker();\n    const {status: socketStatus, statusUnset: socketStatusUnset,} = useSocket();\n    const updateRawData = React.useCallback((tickerMap) => {\n        try {\n            const _ammMap = deepClone(ammMap);\n            for (let tickerMapKey in tickerMap) {\n                if (_ammMap[ 'AMM-' + tickerMapKey ]) {\n                    _ammMap[ 'AMM-' + tickerMapKey ].tradeFloat = {\n                        ..._ammMap[ 'AMM-' + tickerMapKey ].tradeFloat,\n                        ...tickerMap[ tickerMapKey ],\n                        // APY: _ammMap['AMM-' + tickerMapKey ].APY\n                    }\n\n                }\n            }\n            setRawData(Object.keys(_ammMap).map((ammKey: string) => {\n                if (coinMap) {\n                    _ammMap[ ammKey ][ 'coinAInfo' ] = coinMap[ _ammMap[ ammKey ][ 'coinA' ] ];\n                    _ammMap[ ammKey ][ 'coinBInfo' ] = coinMap[ _ammMap[ ammKey ][ 'coinB' ] ];\n                }\n                return _ammMap[ ammKey ];\n            }))\n        } catch (error) {\n            throw new CustomError({...ErrorMap.NO_TOKEN_MAP, options: error})\n        }\n\n    }, [ammMap]);\n    const updateTickerLoop = React.useCallback((_keys?: string[]) => {\n\n        if (timestamp !== -1) {\n            clearTimeout(timestamp)\n        }\n\n        setTimestamp(setTimeout(() => {\n            updateTickerLoop(_keys);\n        }, 60000))\n\n        //console.log(_keys)\n        setImmediate(updateTickers, _keys as string[])\n    },[])\n\n    const updateTickersUI = React.useCallback((_page) => {\n        setPage(_page);\n        if (ammMap && Object.keys(ammMap).length > 0) {\n            const _keys = []\n            for (let i = (page - 1) * pageSize; i < Object.keys(ammMap).length && i < (page - 1) * pageSize + pageSize; i++) {\n                _keys.push(Object.keys(ammMap)[ i ]);\n            }\n            \n            // setKeys(_keys);\n            updateTickerLoop(_keys);\n            // try{\n            //    // socketStart({})\n            // }catch (error){\n            //\n            // }\n\n\n        }\n    }, [ammMap, pageSize]);\n    React.useEffect(() => {\n        if (ammMap && Object.keys(ammMap).length !== 0) {\n            updateTickersUI(page)\n        }\n    }, []);\n    React.useEffect(() => {\n        if (tickerStatus === SagaStatus.UNSET){\n            updateRawData(tickerMap)\n        }\n    }, [tickerStatus]);\n    React.useEffect(() => {\n        if(ammMapStatus === SagaStatus.UNSET){\n            updateTickersUI(1)\n        }\n    }, [ammMapStatus, updateTickersUI]);\n    return {\n        page,\n        rawData,\n        updateTickersUI,\n    }\n}\n\n","import { useDispatch, useSelector } from 'react-redux'\nimport { getTokenMap, statusUnset} from './reducer';\nimport { GetTokenMapParams, TokenMapStates } from './interface';\nimport React from 'react';\nimport { PayloadAction } from '@reduxjs/toolkit';\n\nexport function useTokenMap<R extends {[key:string]:any}>(): TokenMapStates<R> & {\n    getTokenMap:(props:PayloadAction<GetTokenMapParams<any>>)=>void,\n    statusUnset:()=>void,\n} {\n    const tokenMap:TokenMapStates<R> = useSelector((state: any) => state.tokenMap)\n    const dispatch = useDispatch();\n\n    return {\n        ...tokenMap,\n        statusUnset:React.useCallback(()=>dispatch(statusUnset(undefined)),[dispatch]),\n        getTokenMap:React.useCallback((props:PayloadAction<GetTokenMapParams<R>>)=>dispatch(getTokenMap(props)),[dispatch]),\n    }\n\n}\n"],"sourceRoot":""}