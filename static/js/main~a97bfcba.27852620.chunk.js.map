{"version":3,"sources":["hooks/modal/useModals.ts","utils/swap_calc_utils.ts","hooks/exchange/useExchangeAPI.ts","hooks/exchange/useUserAPI.ts","layouts/header/hook.tsx","utils/web3_tools.ts","pages/SettingPage/SettingPanel.tsx","utils/obj_tools.ts","layouts/header/index.tsx","pages/QuotePage/index.tsx","pages/QuotePage/hook.ts","pages/SwapPage/panel/SwapPanel/index.tsx","pages/SwapPage/hook.ts","hooks/exchange/useAmmpoolAPI.ts","pages/SwapPage/panel/BasicInfoPanel/hook.tsx","pages/SwapPage/panel/BasicInfoPanel/index.tsx","hooks/exchange/useWsAPI.ts","defs/swap_defs.ts","pages/SwapPage/panel/SwapPanel/hooks.ts","pages/SwapPage/panel/TradePanel/TradePanel.tsx","pages/SwapPage/panel/TradePanel/index.tsx","pages/SwapPage/panel/TradePanel/hooks.ts","pages/SwapPage/index.tsx","pages/DebugPage/index.tsx","pages/Layer2Page/TxPanel/index.tsx","pages/Layer2Page/TxPanel/hooks.ts","pages/Layer2Page/AssetPanel/index.tsx","pages/Layer2Page/TradePanel/index.tsx","pages/Layer2Page/TradePanel/hooks.ts","pages/Layer2Page/OrderPanel/index.tsx","pages/Layer2Page/index.tsx","routers/index.tsx","storage/index.ts","stores/account/reducer.ts","index.tsx","stores/global/actions.ts","stores/system/reducer.ts","stores/transactions/reducer.ts","stores/index.ts","stores/trading/reducer.ts","defs/common_defs.ts","stores/trading/hook.ts","provider/global/index.tsx","provider/web3ReactManager/index.tsx","provider/dev-wrapper/index.tsx","state_machine/account_machine_spec.ts","defs/web3_defs.ts","stores/account/hook.ts","state_machine/machine_builder.ts"],"names":["useModals","dispatch","useDispatch","t","useTranslation","ShowDeposit","useCallback","isShow","isNoAccount","store","getState","account","status","AccountStatus","NOACCOUNT","console","log","action","props","title","description","setShowDeposit","ShowTransfer","setShowTransfer","ShowWithdraw","setShowWithdraw","ShowResetAccount","setShowResetAccount","SwapStatus","MULTI_FACTOR","checkStatus","baseAmt","MaxBaseAmt","quoteAmt","MaxQuoteAmt","newStatus","Normal","BigNumber","zero","gt","ExceedUserBalance","ExceedPoolBalance","eq","EmptyInput","isNormal","getIcon","symbol","tokens","baseToken","addr","utils","getAddress","address","getRight","pairs","left","right","tokenList","coinMapRight","forEach","key","icon","name","simpleName","company","getToken","token","Error","getTokenInfoByToken","ammBalance","tokenInfo","tokenVol","pooledMap","tokenId","volume","reserve","fm","getKey","base","quote","undefined","key_bak","isOK","getInfoByKey","raw_data","keyPair","getBalances","ammpools","ammPoolsBalances","getAmmInfo","ammInfo","quoteToken","baseBalance","quoteBalance","feeBips","parseInt","getAmt","rawAmt","times","decimals","applySlippageTolerance","value","slippageTolerance","f","feeFactor","amount","outInWei","dividedBy","out","fromWEI","applyOrderFee","feeBip","valueInWEI","precision","ceil","precisionToFixed","div","error","toWEI","rm","toFixed","useGetMarkets","useState","markets","setMarkets","api","useExchangeAPI","usePromiseJob","getMarkets","useGetExchangeInfo","exchangeInfo","setExchangeInfo","getExchangeInfo","useGetTokens","setTokens","getTokens","useGetUserBalances","useUserAPI","balances","setBalances","useAccount","apiKey","accountId","useCustomDCEffect","keys","Reflect","ownKeys","tokenMap","item","push","getUserBalances","join","then","data","map","total","locked","availableInWei","minus","toString","catch","reason","dumpError400","useHeader","i18n","useSettings","setTheme","themeMode","language","setLanguage","React","open","setOpen","forceUpdate","useReducer","bool","useUnlock","lock","unlock","connect","useConnect","etherscanUrl","useEtherscan","gatewayList","DefaultGatewayList","handleSelect","ConnectorNames","Injected","accountInfoProps","setAccountInfoProps","onNotification","a","onWalletBtnConnent","acc","UNCONNNECTED","LOCKED","ACTIVATED","onThemeBtnClick","Theme","dark","light","onLangBtnClick","lang","accAddr","showAccountInfo","setShowAccountInfo","advanceOpen","setAdvanceOpen","handleViewAccountInfo","event","stopPropagation","preventDefault","headerToolBarData","ButtonComponentsMap","WalletConnect","handleClick","Language","handleChange","GoAdvanceBtn","withTranslation","variant","size","color","onClick","_e","trim","substr","length","getShortAddr","level","ethLink","mainBtn","updateHeaderMenuWhenHasAccountInfo","headerMenuData","HeadMenuTabKey","Layer2","extender","IconButton","disabled","aria-label","HeaderMenuTabStatus","default","label","WalletStatus","hidden","UNACTIVATED","noAccount","DEPOSITING","DEPOSIT_TO_CONFIREM","ARPROVING","APPROV_TO_CONFIRM","accountPending","useChargeFeeList","tokenSymbol","requestType","chargeFeeList","setChargeFeeList","request","getOffchainFeeAmt","response","fees","index","belong","fee","useModalProps","useWeb3Account","chainId","isConnected","connector","eddsaKey","tokensAll","tokenSymbolMap","userApi","exchangeApi","coinMap","setCoinMap","startsWith","useCoinMap","walletMap_Lv1","walletMap","setWalletMap","getTokenBalances","owner","tokenBalances","balance","count","useLv1WalletMap","walletMap_Lv2","useLv2WalletMap","deposit","amt","exchangeAddress","depositAddress","getProvider","provider","web3","Web3","sendByMetaMask","connectName","getGasPrice","gasPrice","gasLimit","contract","nonce","response2","withdraw","sellTokenId","getNextStorageId","storageId","request2","exchange","to","offchainId","maxFee","extraData","minGas","validUntil","VALID_UNTIL","submitOffchainWithdraw","transfer","payeeAddr","JSON","stringify","walletType","getAccount","payeeAcc","payeeId","payerAddr","payerId","submitInternalTransfer","tradeValue","depositValue","setDepositValue","depositProps","tradeData","depositBtnStatus","TradeBtnStatus","AVAILABLE","onDepositClick","handlePanelEvent","switchType","Promise","res","setTokenSymbol","withdrawValue","setWithdrawValue","withdrawalFeeList","OffchainFeeReqType","OFFCHAIN_WITHDRAWAL","withdrawProps","withdrawBtnStatus","onWithdrawClick","withdrawType","WithdrawType","Fast","withdrawTypes","WithdrawTypes","chargeFeeToken","chargeFeeTokenList","handleOnAddressChange","handleAddressError","_value","message","transferValue","setTransferValue","transferTokenSymbol","setTransferTokenSymbol","transferFeeList","TRANSFER","transferProps","transferBtnStatus","onTransferClick","resetValue","setResetValue","resetProps","resetBtnStatus","onResetClick","price","MuiModalStyled","styled","MuiModal","theme","colorBase","background","secondary","outline","BlockStyled","Box","border","defaultFrame","c_key","d_R","unit","StyledPaper","Grid","StyledSwitch","Switch","textPrimary","success","backgroundColor","opacity","BtnCurrency","currency","Currency","dollar","state","setState","_handleChange","target","IconComponent","DropDownIcon","labelId","id","autoWidth","onChange","yen","StyledDivider","Divider","SettingPanel","focus","rest","useTheme","setUpColor","setCurrency","upColor","container","direction","justifyContent","alignItems","Typography","component","marginY","paddingLeft","xs","display","flexDirection","marginBottom","paddingY","paddingX","Trans","i18nKey","alignSelf","Button","paddingTop","passDay","changeLanguage","style","textTransform","UpColor","green","up","down","checked","e","red","SettingPage","onClose","aria-labelledby","aria-describedby","deepClone","Object","result","constructor","hasOwnProperty","Header","location","useLocation","disconnect","useDisconnect","onSwitch","openQRCode","setOpenQRCode","copyToastOpen","setCopyToastOpen","closeCopyToast","Snackbar","autoHideDuration","Alert","severity","url","withDrawProps","process","selected","pathname","headerRoot","Toolbar","Collapse","in","Container","maxWidth","marginTop","onCopy","text","document","execCommand","textarea","createElement","body","appendChild","select","removeChild","window","clipboardData","setData","copyToClipBoard","onViewQRCode","onDisconnect","onSwith","RowStyled","TableWrapStyled","TablePaddingX","pLeft","pRight","QuotePage","tickList","setTickList","big4","setBig4","mounted","refresh","getAllTickers","ticks","quote_token_volume","base_token_volume","close","high","low","rowData","change","base_token_amt","sort","b","isNaN","slice","useQuote","buyData","ETH","sellData","LRC","tradeFloat","priceDollar","priceYuan","percent","chartUnit","floatTag","FloatTag","increase","flex","none","decrease","onVisibleRowsChange","rawData","SwapPanel","swapProps","useSwapPage","setBase","setQuote","setAmmpools","useAmmpoolAPI","getAmmPoolConf","useGetAmmPools","ammPoolsBalances_all","setAmmPoolsBalances","getAmmPoolBalances","useGetAmmPoolsBalances","ammpoolsbalances","poolAddress","setPoolAddress","market","setMarket","toggleData","ChartType","Trend","Depth","BasicInfoPanel","tgItemJSXs","tlabel","JSX","chartType","setChartType","setChange","setVolume","ChartUnit","D1","originData","setOriginData","getTicker","ticker","baseVol","tgItemJSXsPriceChart","reduce","pre","tGItemData","interval","TradingInterval","min15","limit","getCandlestick","candlesticks","timeStamp","quoteVol","getDepth","depth","useBasicInfo","swapTradeData","getThousandFormattedNumbers","exclusive","minHeight","maxHeight","height","width","type","riseColor","handleMove","useHandleSocketData","setAccount","ammPool","setAmmPool","order","setOrder","setTicker","op","topic","WsTopicType","Account","Ammpool","timestamp","Candlestick","Order","OrderBook","Ticker","Trade","OrderHandling","useSwap","globalAcc","UserStorage","getAmmOrder","ammOrder","setAmmOrder","priceImpact","setPriceImpact","setBaseAmt","setQuoteAmt","minimumReceived","setLeft","setRight","setFee","takerRate","setTakerRate","currentPrice","setCurrentPrice","amount1ApplyOrderFee","setAmount1ApplyOrderFee","setBalance","availToShow","setAvailToShow","setQuoteBalance","quoteToShow","setQuoteToShow","setSwapProps","topics","getAccountArg","getOrderArg","getAmmpoolArg","useWs","socketData","useSwapPageWs","currentBalance","totalAmount","amountLocked","newAvailable","balancesTmp","fn","orderHash","resolve","reject","getOrderDetails","TxStatus","processed","clearAmmOrder","setTimeout","too_many_times","no_such_order","coinMapLeft","getLeft","getUserFeeRate","onBaseAmtInputChange","baseAmtVal","baseTokenInfo","reserveIn","reserveOut","amountIn","feeBipsFactor","amountInWithFee","numerator","denominator","plus","_amount1ApplyOrderFeeInWei","_amount1ApplyOrderFee","Number","getAmountOut","quoteAmtVal","onQuoteAmtInputChange","quoteTokenInfo","amountOut","hasError","reserveOutSubAmountOut","getAmountOut_Reverse","onSwap","allOrNone","orderId","amount0InBigNumber","amount1WithSlippage","amount1InBigNumber","sellToken","buyToken","maxFeeBips","fillAmountBOrS","orderType","OrderType","ClassAmm","eddsaSignature","submitOrder","hash","swap","tradeCalcData","coinSell","coinBuy","StoB","parseFloat","BtoS","sellCoinInfoMap","buyCoinInfoMap","slippage","Math","abs","sell","buy","__cache__","onSwapClick","handleSwapPanelEvent","swapData","SwapType","SEll_CLICK","BUY_CLICK","SELL_SELECTED","BUY_SELECTED","EXCHANGE_CLICK","applyProps","TradePanel","withRef","TableUI","myTrades","recentTrades","setValue","hideOtherPairs","setHideOtherPairs","StyledTabsWrapper","generateRows","generateColumns","StyledFormControlLabel","FormControlLabel","control","Checkbox","checkedIcon","flag","Tabs","newValue","Tab","setMyTrades","tradesNew","getUserTrades","fillTypes","FilledType","amm","trades","useGetMyTrades","ammPoolAddress","ammPoolApi","setRecentTrades","getAmmPoolTrades","side","feeAmount","createdAt","useGetRecentTrades","FixedStyle","SwapPage","marginRight","minWidth","DebugPage","useRef","useAmmpoolWs","gas","setGas","useGetGas","StylePaper","borderColor","TxPanel","txs","setTxs","getUserTranferList","tmpTx","transactions","from","senderAddress","env","receiverAddress","feeTokenSymbol","memo","time","txnHash","tradeType","TransactionTradeTypes","allTypes","useGetTxs","txList","className","StyledChartWrapper","StyledBtnGroupWrapper","AssetPanel","chartPeriod","setChartPeriod","AssetTitleProps","assetInfo","totalAsset","priceTag","PriceTag","Dollar","onShowDeposit","onShowTransfer","onShowWithdraw","testTrendData","random","OrderPanel","subMenu","subMenuLayer2","SubMenuList","BasicSubMenuList","Layer2Page","match","useRouteMatch","params","marginLeft","RouterView","exact","path","CONSTANTS","rawHandler","sessionStorage","getItem","Handler","err","handler","setItem","removeItem","reset","dateTimeStr","localStorage","ActiveTime","now","Date","getTime","tmpDt","SESSION_TIMEOUT_SECONDS","clear","rawId","AccountId","Apikey","apikey","Eddsakey","eddsakey","AmmOrder","current","HardwareAddresses","includes","toLowerCase","initialState","defaultAccId","REACT_APP_TEST_ACCOUND_ID","getAccountId","defaultApiKey","REACT_APP_TEST_API_KEY","getApikey","defaultOwner","REACT_APP_TEST_OWNER","defaultEddsaKey","REACT_APP_TEST_EDDSA_KEY","getEddsakey","publicKey","isContractAddress","Unknown","connectNameTemp","accountSlice","createSlice","reducers","initState","assign","setAccAddr","payload","setAccountInfo","setApikey","setAccountStatus","setEddsaKey","setConnectName","setConnectNameTemp","setIsContractAddress","actions","Web3ProviderNetwork","createWeb3ReactRoot","NetworkContextName","providers","LocalizationProvider","dateAdapter","MomentUtils","I18nextProvider","MuThemeProvider","getTheme","ThemeProvider","Provider","ReactDOM","render","getLibrary","App","getElementById","updateVersion","createAction","SystemStatus","NORMAL","systemSlice","setSystemStatus","transactionsSlice","addTransaction","approval","summary","claim","addedTime","clearAllTransactions","checkedTransaction","blockNumber","tx","lastCheckedBlockNumber","max","finalizeTransaction","receipt","confirmedTime","sagaMiddleware","createSagaMiddleware","reducer","combineReducers","settings","settingsSlice","system","trading","tradingSlice","transactionlice","modals","modalsSlice","PERSISTED_KEYS","configureStore","middleware","getDefaultMiddleware","thunk","save","states","devTools","enhancers","reduxBatch","preloadedState","load","getBaseQuote","ind","indexOf","symbol_base","symbol_quote","defaultSymbol","refreshRate","refreshRateSlow","wsApiKey","changeSymbol","changeTradingInterval","setWsApiKey","LangType","MODAL_TYPE","useGetTradingInfo","tradingInfo","useSelector","useUpdateExchangeInfo","WindowEvent","events","Click","Scroll","forceReset","debounce","checkTimeout","GlobalProvider","children","useCheckAccStatus","useEffect","addEventListener","removeEventListener","Fragment","MessageWrapper","Message","Web3ReactManager","active","useWeb3React","networkActive","networkError","activateNetwork","activate","triedEager","useEagerConnect","network","useInactiveListener","showLoader","setShowLoader","timeout","clearTimeout","DevWrapper","StatusChangeEvent","AccountMachineSpec","Connecting","CONNECTED","Reset","HasPubkey","HasNoPubkey","ErrorResponse","FinishDeposit","IsSmartWallet","ApproveSubmit","ApproveConfirmed","Unlock","Lock","connectorsByName","injected","Network","walletconnect","WalletLink","walletlink","Ledger","ledger","Trezor","trezor","Authereum","authereum","useActiveWeb3React","library","voca","isBlank","isActivated","useStateMachine","spec","machine","currentState","stateTransitions","nextState","sendEvent","activatingConnector","setActivatingConnector","item_name","isSwitch","newConnector","deactivate","sk","sign_tools","toHex","toBig","secretKey","getUserApiKey","web3Account","lv1Acc","prevChainId","usePrevious","prevWeb3Account","cleanUp","resultInfo","code","setInterval","isTimeOut","clearInterval","setHandler","getHandler"],"mappings":"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","file":"static/js/main~a97bfcba.27852620.chunk.js","sourcesContent":["import { useCallback } from \"react\";\nimport { useDispatch } from \"react-redux\"\n\nimport {\n    setShowDeposit,\n    setShowResetAccount,\n    setShowTransfer,\n    setShowWithdraw,\n} from '@loopring-web/component-lib'\nimport { useTranslation } from \"react-i18next\";\nimport store from 'stores'\nimport { AccountStatus } from \"state_machine/account_machine_spec\";\n\nexport function useModals() {\n\n    const dispatch = useDispatch()\n\n    const { t } = useTranslation('common')\n\n    const ShowDeposit = useCallback((isShow: boolean)=>{\n        const isNoAccount = store.getState().account.status === AccountStatus.NOACCOUNT\n\n        console.log('isNoAccount: ', isNoAccount, t('depositTitleAndActive'))\n        const action = {\n            isShow,\n            props: {\n                title: isNoAccount ? t('depositTitleAndActive') : t('depositTitle'),\n                description: 'depositAndActiveDescription'\n            }\n        }\n        dispatch(setShowDeposit(action))\n    }, [dispatch, t])\n    const ShowTransfer = useCallback((isShow: boolean)=>dispatch(setShowTransfer({isShow})), [dispatch])\n    const ShowWithdraw = useCallback((isShow: boolean)=>dispatch(setShowWithdraw({isShow})), [dispatch])\n    const ShowResetAccount = useCallback((isShow: boolean)=>dispatch(setShowResetAccount({isShow})), [dispatch])\n\n    return {\n        ShowDeposit,\n        ShowTransfer,\n        ShowWithdraw,\n        ShowResetAccount,\n    }\n}","import * as fm from '@loopring-web/sdk/api/common/formatter'\nimport BigNumber from 'bignumber.js'\n\nimport { CoinInfo, CoinMap, } from '@loopring-web/component-lib/static-resource'\n\nimport { utils } from 'ethers'\n\nconst MULTI_FACTOR = 10000\n\nexport enum SwapStatus {\n    Normal = 'Normal',\n    EmptyInput = 'EmptyInput',\n    ExceedUserBalance = 'ExceedUserBalance',\n    ExceedPoolBalance = 'ExceedPoolBalance',\n    Loading = 'Loading',\n}\n\nexport const checkStatus = (baseAmt: any, MaxBaseAmt: any, quoteAmt: any, MaxQuoteAmt: any) => {\n    let newStatus = SwapStatus.Normal\n\n    baseAmt = new BigNumber(baseAmt)\n    MaxBaseAmt = new BigNumber(MaxBaseAmt)\n    quoteAmt = new BigNumber(quoteAmt)\n    MaxQuoteAmt = new BigNumber(MaxQuoteAmt)\n\n    const zero = new BigNumber(0)\n\n    if (baseAmt.gt(MaxBaseAmt)) {\n        newStatus = SwapStatus.ExceedUserBalance\n    } else if (quoteAmt.gt(MaxQuoteAmt)) {\n        newStatus = SwapStatus.ExceedPoolBalance\n    } else if (baseAmt.eq(zero) || quoteAmt.eq(zero)) {\n        newStatus = SwapStatus.EmptyInput\n    }\n\n    const isNormal = newStatus === SwapStatus.Normal\n\n    return {\n        isNormal,\n    }\n\n}\n\nexport function getIcon(symbol: string, tokens: any) {\n    const baseToken: any = tokens[symbol]\n    if (baseToken) {\n        const addr = utils.getAddress(baseToken.address)\n        const path = `https://exchange.loopring.io/assets/images/ethereum/assets/${addr}/logo.png`\n        return path\n    }\n    return ''\n}\n\nexport const getLeft = (pairs: any, tokens: any) => {\n    if (pairs) {\n\n        const left = Reflect.ownKeys(pairs)\n\n        let coinMapLeft: CoinMap<any, CoinInfo<any>> = {}\n\n        //https://exchange.loopring.io/assets/images/ethereum/assets/0x9A0aBA393aac4dFbFf4333B06c407458002C6183/logo.png\n\n        left.forEach((key: any) => {\n            coinMapLeft[key] = {\n                icon: getIcon(key, tokens),\n                name: key,\n                simpleName: key,\n                description: '',\n                company: ''\n            }\n        })\n\n        return {\n            left,\n            coinMapLeft,\n        }\n    }\n\n    return undefined\n}\n\nexport const getRight = (pairs: any, left: any, tokens: any) => {\n    if (pairs) {\n        const right = pairs[left].tokenList\n\n        let coinMapRight: CoinMap<any, CoinInfo<any>> = {}\n\n        if (right) {\n            right.forEach((key: any) => {\n                coinMapRight[key] = {\n                    icon: getIcon(key, tokens),\n                    name: key,\n                    simpleName: key,\n                    description: '',\n                    company: ''\n                }\n            })\n\n            return {\n                right,\n                coinMapRight,\n            }\n        }\n    }\n    return undefined\n}\n\nexport const getToken = (tokens: any, token: any) => {\n    if (!tokens) {\n        throw Error('no tokens list!')\n    }\n    return tokens[token]\n}\n\nexport const getTokenInfoByToken = (ammBalance: any, tokens: any, token: any) => {\n\n    const tokenInfo = getToken(tokens, token)\n\n    // console.log(' tokenInfo:', tokenInfo, ' tokens:', tokens, ' token:', token)\n    const tokenVol = ammBalance.pooledMap[tokenInfo.tokenId].volume\n    const reserve = fm.toBig(tokenVol)\n\n    // console.log(' tokenInfo:', tokenInfo, ' tokenVol:', tokenVol)\n\n    return {\n        tokenInfo, tokenVol, reserve,\n    }\n}\n\nconst getKey = (base: any, quote: any) => {\n    // const isLRCETH = (base === 'LRC' && quote === 'ETH') || (base === 'ETH' && quote === 'LRC')\n\n    if (!base || !quote) {\n        return {\n            key: undefined,\n            key_bak: undefined,\n            isOK: false,\n        }\n    }\n\n    const isLRCETH = false\n    const key = isLRCETH ? 'LRCETH-Pool' : ('AMM-' + base + '-' + quote)\n    const key_bak = isLRCETH ? 'LRCETH-Pool' : ('AMM-' + quote + '-' + base)\n    return {\n        key,\n        key_bak,\n        isOK: true,\n    }\n}\n\nconst getInfoByKey = (raw_data: any, keyPair: any) => {\n    const {\n        key,\n        key_bak,\n    } = keyPair\n\n    if (raw_data[key]) return raw_data[key]\n    return raw_data[key_bak]\n}\n\nexport const getBalances = (ammpools: any, ammPoolsBalances: any, base: any, quote: any, tokens: any) => {\n\n    const { ammInfo,\n        ammBalance,\n    } = getAmmInfo(ammpools, ammPoolsBalances, base, quote)\n\n    const baseToken = getToken(tokens, base)\n    const quoteToken = getToken(tokens, quote)\n\n    const baseBalance = ammBalance.pooledMap[baseToken.tokenId]\n    const quoteBalance = ammBalance.pooledMap[quoteToken.tokenId]\n\n    return {\n        ammInfo,\n        ammBalance,\n        baseBalance,\n        quoteBalance,\n    }\n\n}\n\nexport const getAmmInfoOnly = (ammpools: any, base: any, quote: any) => {\n\n    const keyPair = getKey(base, quote)\n    // console.log('keyPair:', keyPair)\n\n    const ammInfo = getInfoByKey(ammpools, keyPair)\n\n    if (!ammInfo) {\n        throw Error('no ammInfo!')\n    }\n\n    return {\n        ammInfo,\n    }\n\n}\n\nexport const getAmmInfo = (ammpools: any, ammPoolsBalances: any, base: any, quote: any) => {\n\n    const keyPair = getKey(base, quote)\n\n    const ammInfo = getInfoByKey(ammpools, keyPair)\n    const ammBalance = getInfoByKey(ammPoolsBalances, keyPair)\n\n    if (!ammInfo || !ammBalance) {\n        throw Error('no ammInfo! no ammBalance!')\n    }\n\n    const feeBips = parseInt(ammInfo.feeBips)\n\n    return {\n        ammInfo,\n        ammBalance,\n        feeBips,\n    }\n\n}\n\nconst getAmt = (rawAmt: any, tokenInfo: any) => {\n    if (rawAmt === undefined) {\n        rawAmt = 0\n    }\n\n    return fm.toBig(rawAmt).times('1e' + tokenInfo.decimals)\n}\n\nexport const applySlippageTolerance = (\n    tokens: any,\n    token: any,\n    value: any,\n    slippageTolerance: number = 0.01\n) => {\n    const tokenInfo = getToken(tokens, token)\n    const f = 1e7\n    const feeFactor = fm.toBig(f * (1 - slippageTolerance))\n    const amount = fm.toBig(value).times('1e' + tokenInfo.decimals)\n    const outInWei = amount.times(feeFactor).dividedBy(f)\n    const out = fromWEI(tokens, token, outInWei)\n\n    return {\n        outInWei,\n        out,\n    }\n}\n\nexport const applyOrderFee = (tokens: any, token: any, value: any, feeBip: any) => {\n    const tokenInfo = getToken(tokens, token)\n    const feeFactor = fm.toBig(MULTI_FACTOR - feeBip)\n    const amount = fm.toBig(value).times('1e' + tokenInfo.decimals)\n    const appliedAmount = amount.times(feeFactor).dividedBy(MULTI_FACTOR)\n    return appliedAmount\n}\n\nexport function fromWEI(tokens: any, symbol: any, valueInWEI: any, precision?: any, ceil?: any) {\n    try {\n        const tokenInfo = getToken(tokens, symbol)\n        const precisionToFixed = precision ? precision : tokenInfo.precision\n        const value = fm.toBig(valueInWEI).div('1e' + tokenInfo.decimals)\n        return fm.toFixed(value, precisionToFixed, ceil)\n    } catch (error) {\n        return 0\n    }\n}\n\n\nexport function toWEI(tokens: any, symbol: any, value: any, rm: any = 3) {\n    const tokenInfo = getToken(tokens, symbol)\n    if (typeof tokenInfo === 'undefined') {\n        return 0\n    }\n\n    return fm.toBig(value)\n        .times('1e' + tokenInfo.decimals)\n        .toFixed(0, rm)\n}\n\nexport const getAmountOut = (amt: any, ammpools: any, ammPoolsBalances: any, tokens: any,\n    base: any, quote: any, takerRate: number, currentPrice: number) => {\n\n    if (amt === undefined) {\n        amt = 0\n    }\n\n    const { ammBalance, feeBips, } = getAmmInfo(ammpools, ammPoolsBalances, base, quote)\n\n    const { tokenInfo: baseTokenInfo, reserve: reserveIn } = getTokenInfoByToken(ammBalance, tokens, base)\n    const { tokenInfo: quoteTokenInfo, reserve: reserveOut } = getTokenInfoByToken(ammBalance, tokens, quote)\n\n    const amountIn = getAmt(amt, baseTokenInfo)\n    const feeBipsFactor = fm.toBig(MULTI_FACTOR - feeBips)\n    const amountInWithFee = amountIn.times(feeBipsFactor)\n    const numerator = amountInWithFee.times(reserveOut)\n    const denominator = reserveIn.times(MULTI_FACTOR).plus(amountInWithFee)\n    const amountOutInWei: any = numerator.dividedBy(denominator)\n\n    let quoteAmt: any = fromWEI(tokens, quote, amountOutInWei)\n\n    const _amount1ApplyOrderFeeInWei = applyOrderFee(tokens, quote, quoteAmt, takerRate + feeBips)\n\n    let _amount1ApplyOrderFee = Number(fromWEI(tokens, quote, _amount1ApplyOrderFeeInWei))\n\n    let priceImpact = 0\n    if (_amount1ApplyOrderFee < 0) {\n        _amount1ApplyOrderFee = 0\n        quoteAmt = null\n    } else {\n        const newPrice = Number(quoteAmt) / Number(amt)\n        priceImpact = (newPrice - currentPrice) / currentPrice\n    }\n\n    // console.log('got:', ammBalance)\n\n    return {\n        quoteAmt,\n        _amount1ApplyOrderFeeInWei,\n        _amount1ApplyOrderFee,\n        priceImpact,\n    }\n\n}\n\nexport const getAmountOut_Reverse = (amt: any, ammpools: any, ammPoolsBalances: any, tokens: any,\n    base: any, quote: any, takerRate: number, currentPrice: number) => {\n\n    if (amt === undefined) {\n        amt = 0\n    }\n\n    // console.log('amt:', amt, 'ammpools:', ammpools, 'ammPoolsBalances:', ammPoolsBalances, ' base:', base, ' quote:', quote)\n\n    const { ammBalance, feeBips, } = getAmmInfo(ammpools, ammPoolsBalances, base, quote)\n\n    const { tokenInfo: baseTokenInfo, reserve: reserveIn } = getTokenInfoByToken(ammBalance, tokens, base)\n    const { tokenInfo: quoteTokenInfo, reserve: reserveOut } = getTokenInfoByToken(ammBalance, tokens, quote)\n\n    const amountOut = getAmt(amt, quoteTokenInfo)\n\n    if (amountOut.gt(reserveOut)) {\n        return {\n            baseAmt: 0,\n            _amount1ApplyOrderFeeInWei: 0,\n            _amount1ApplyOrderFee: 0,\n            priceImpact: 0,\n            hasError: false,\n        }\n    }\n\n    const numerator = amountOut.times(reserveIn).times(MULTI_FACTOR)\n    const feeBipsFactor = fm.toBig(MULTI_FACTOR - feeBips)\n\n    // If amountOut is larger than reserveOut?\n    // It's handled before getAmountOut_reserve\n    const reserveOutSubAmountOut = reserveOut.minus(amountOut)\n\n    const denominator = feeBipsFactor.times(reserveOutSubAmountOut)\n    const amountInInWei = numerator.dividedBy(denominator)\n\n    let baseAmt: any = fromWEI(tokens, quote, amountInInWei)\n\n    const _amount1ApplyOrderFeeInWei = applyOrderFee(tokens, quote, amt, takerRate + feeBips)\n\n    let _amount1ApplyOrderFee = Number(fromWEI(tokens, quote, _amount1ApplyOrderFeeInWei))\n\n    let priceImpact = 0\n    if (_amount1ApplyOrderFee < 0) {\n        _amount1ApplyOrderFee = 0\n        baseAmt = null\n    } else {\n        const newPrice = Number(amt) / Number(baseAmt)\n        priceImpact = (newPrice - currentPrice) / currentPrice\n    }\n\n    // console.log('got:', ammBalance)\n\n    return {\n        baseAmt,\n        _amount1ApplyOrderFeeInWei,\n        _amount1ApplyOrderFee,\n        priceImpact,\n        hasError: false,\n    }\n\n}\n\n/*\nexport const getAmountIn = (amt: any, ammpools: any, ammPoolsBalances: any, tokens: any, base: any, quote: any) => {\n\n    const { ammBalance, feeBips, } = getAmmInfo(ammpools, ammPoolsBalances, base, quote)\n\n    const { tokenInfo: baseTokenInfo, reserve: reserveIn } = getTokenInfoByToken(ammBalance, tokens, base)\n    const { tokenInfo: quoteTokenInfo, reserve: reserveOut } = getTokenInfoByToken(ammBalance, tokens, quote)\n\n    const amountOut = getAmt(amt, quoteTokenInfo)\n    const numerator = reserveIn.times(amountOut).times(MULTI_FACTOR)\n    const denominator = reserveOut.minus(amountOut).times(MULTI_FACTOR - feeBips)\n    const amountIn = numerator.dividedBy(denominator).plus(1)\n\n    // const baseAmt = amountIn.dividedBy('1e' + baseTokenInfo.decimals).toString()\n    const baseAmt = fromWEI(tokens, base, amountIn)\n\n    let amountInShown: any = ''\n    if (baseAmt !== 'NaN') {\n        amountInShown = baseAmt\n    }\n\n    return {\n        amountIn,\n        amountInShown,\n    }\n}\n*/\n","import { useState, } from 'react'\n\nimport { TradesData, TickerData, DepthData, } from '@loopring-web/sdk/defs/exchange_defs'\n\nimport { usePromiseJob } from '@loopring-web/sdk/hooks/common/useCommon'\nimport { useExchangeAPI, } from '@loopring-web/sdk/hooks/common/useApi'\n\nexport function useGetGas() {\n\n  const [gas, setGas] = useState<any>()\n\n  const api = useExchangeAPI()\n\n  const fetchData = () => {\n    if (!api) {\n      return undefined\n    }\n    return api.getGasPrice()\n  }\n\n  usePromiseJob(fetchData, setGas, undefined, 'useGetGas', [api])\n\n  return { gas }\n\n}\n\nexport function useGetMixMarkets() {\n\n  const [markets, setMarkets] = useState<any>()\n    const api = useExchangeAPI()\n\n    const fetchData = () => {\n      if (!api) {\n        return undefined\n      }\n      return api.getMixMarkets()\n    }\n  \n    usePromiseJob(fetchData, setMarkets, undefined, 'useGetMarkets', [api])\n    \n    return { markets }\n\n}\n\nexport function useGetMarkets() {\n\n  const [markets, setMarkets] = useState<any>()\n    const api = useExchangeAPI()\n\n    const fetchData = () => {\n      if (!api) {\n        return undefined\n      }\n      return api.getMarkets()\n    }\n  \n    usePromiseJob(fetchData, setMarkets, undefined, 'useGetMarkets', [api])\n    \n    return { markets }\n\n}\n\nexport function useGetExchangeInfo() {\n\n  const [exchangeInfo, setExchangeInfo] = useState<any>()\n    const api = useExchangeAPI()\n\n    const fetchData = () => {\n      if (!api) {\n        return undefined\n      }\n      return api.getExchangeInfo()\n    }\n  \n    usePromiseJob(fetchData, setExchangeInfo, 'exchangeInfo', 'useGetExchangeInfo', [api])\n    \n    return { exchangeInfo }\n\n}\n\nexport function useGetTokens() {\n\n  const [tokens, setTokens] = useState<any>()\n    const api = useExchangeAPI()\n\n    const fetchData = () => {\n      if (!api) {\n        return undefined\n      }\n      return api.getTokens()\n    }\n  \n    usePromiseJob(fetchData, setTokens, undefined, 'useGetTokens', [api])\n    \n    return { tokens }\n\n}\n\n\nexport function useTrades(symbol: string) {\n\n  const [trades, setTrades] = useState<TradesData>()\n\n  const api = useExchangeAPI()\n\n  const fetchData = () => {\n    if (!api) {\n      return undefined\n    }\n    return api.getMarketTrades({\n      market: symbol\n    })\n  }\n\n  usePromiseJob(fetchData, setTrades, undefined, 'useTrades', [api, symbol])\n\n  return { trades, }\n\n}\n\nexport function useTickerMap(market: string) {\n\n  const [tickerMap, setTickerMap] = useState<{[key: string]: TickerData}>()\n\n  const api = useExchangeAPI()\n\n  const fetchData = () => {\n    if (!api) {\n      return undefined\n    }\n    return api.getTicker({\n      market\n    })\n  }\n\n  usePromiseJob(fetchData, setTickerMap, 'tickMap', 'useTickerMap', [api, market])\n\n  return { tickerMap, }\n\n}\n\nexport function useDepth(symbol: string) {\n\n  const api = useExchangeAPI()\n\n  const [depth, setDepth] = useState<DepthData>()\n\n    const fetchData = () => {\n      if (!api) {\n        return undefined\n      }\n      return api.getDepth({\n        market: [symbol]\n      })\n    }\n  \n    usePromiseJob(fetchData, setDepth, 'depth', 'useDepth', [api, symbol])\n\n  return { depth, }\n\n}\n","import { useState, useCallback } from 'react'\n\nimport { useAccount } from 'stores/account/hook'\n\nimport { OrdersData } from '@loopring-web/sdk/defs/exchange_defs'\n\nimport { REFRESH_RATE } from '@loopring-web/sdk/defs/exchange_defs'\nimport { useUserAPI } from '@loopring-web/sdk/hooks/common/useApi'\nimport { dumpError400 } from '@loopring-web/sdk/utils/network_tools'\n\nimport { getToken, fromWEI } from 'utils/swap_calc_utils'\n\nimport * as fm from '@loopring-web/sdk/api/common/formatter'\nimport { useCustomDCEffect } from '@loopring-web/sdk/hooks/useCustomDCEffect'\n\nexport function useOrders() {\n\n  const acc = useAccount().account\n\n  const api = useUserAPI()\n\n  const [orders, setOrders] = useState<OrdersData>()\n\n  useCustomDCEffect(() => {\n\n    if (!acc || !api) {\n      return\n    }\n\n    let mounted = true\n\n    const exit = (id: any) => {\n      mounted = false\n      clearInterval(id)\n    }\n\n    if (acc && acc.accountId > 0) {\n\n      const id: any = setInterval(async () => {\n        try {\n          const orders_data = (await api.getOrders({\n            accountId: acc.accountId\n          }, acc.apiKey)).data\n          if (mounted) {\n            setOrders(orders_data)\n          }\n        } catch (err) {\n          return exit(id)\n        }\n      }, REFRESH_RATE)\n\n      return exit(id)\n\n    }\n  }, [acc, api])\n\n  return {\n    orders,\n  }\n\n}\n\nexport function useGetUserBalancesByToken(token: any) {\n\n  const api = useUserAPI()\n\n  //const [balance, setBalance] = useState<any>({total: '0', locked: '0', availableInWei: '0'})\n\n  const [balance, setBalance] = useState<any>('0')\n\n  const { apiKey, accountId } = useAccount()\n\n  // console.log('enter! useGetUserBalances tokens:', tokens, 'symbol:', symbol, 'apiKey:', apiKey, ' accountId:', accountId )\n\n  useCustomDCEffect(() => {\n    if (!api || !apiKey || !accountId || !token) {\n      return\n    }\n\n    api.getUserBalances({\n      accountId,\n      tokens: token.tokenId\n    }, apiKey).then((data) => {\n      const total = fm.toBig(data[0].total)\n      const locked = fm.toBig(data[0].locked)\n      const availableInWei = total.minus(locked)\n      /*\n      setBalance({\n        total: data[0].total, \n        locked: data[0].locked, \n        availableInWei: availableInWei.toString(),\n        available: fromWEI(tokens, symbol, availableInWei)\n      })\n      */\n      setBalance(availableInWei.toString())\n    }).catch((reason: any) => {\n      dumpError400(reason, 'getUserBalances tokenId:' + token.tokenId)\n    })\n\n  }, [api, apiKey, accountId, token,])\n\n  return {\n    balance,\n    setBalance,\n  }\n\n}\n\nexport function useGetUserBalances(tokens: any, toList: boolean = false) {\n\n  const api = useUserAPI()\n\n  //const [balance, setBalance] = useState<any>({total: '0', locked: '0', availableInWei: '0'})\n\n  const [balances, setBalances] = useState<any>(undefined)\n\n  const { apiKey, accountId } = useAccount()\n\n  // console.log('enter! useGetUserBalances tokens:', tokens, 'symbol:', symbol, 'apiKey:', apiKey, ' accountId:', accountId )\n\n  useCustomDCEffect(() => {\n\n    if (!api || !apiKey || !accountId || !tokens) {\n      return\n    }\n\n    let tokenList: any[] = []\n\n    const keys = Reflect.ownKeys(tokens)\n\n    let tokenMap: any = {}\n\n    keys.forEach((item: any) => {\n      const token = tokens[item]\n      tokenList.push(token.tokenId)\n      tokenMap[token.tokenId] = token\n    })\n\n    api.getUserBalances({\n      accountId,\n      tokens: tokenList.join(',')\n    }, apiKey).then((data) => {\n\n      let balances: any = {\n        map: tokenMap,\n        tokenId: {},\n        symbol: {},\n      }\n\n      data.forEach((item: any) => {\n        const total = fm.toBig(item.total)\n        const locked = fm.toBig(item.locked)\n        const availableInWei = total.minus(locked)\n\n        console.log('item:', item)\n\n        const token = tokenMap[item.tokenId]\n\n        const balance = {\n          total: data[0].total,\n          locked: data[0].locked,\n          availableInWei: availableInWei.toString(),\n          available: fromWEI(tokens, token.symbol, availableInWei)\n        }\n\n        balances.tokenId[item.tokenId] = availableInWei.toString()\n        balances.symbol[token.symbol] = availableInWei.toString()\n      })\n\n      setBalances(balances)\n\n    }).catch((reason: any) => {\n      dumpError400(reason, 'getUserBalances tokenId:' + tokens.tokenId)\n    })\n\n  }, [api, apiKey, accountId, tokens,])\n\n  return {\n    balances,\n    setBalances,\n  }\n\n}\n\nexport function useGetUserBalance(tokens: any, symbol: any) {\n\n  const api = useUserAPI()\n\n  //const [balance, setBalance] = useState<any>({total: '0', locked: '0', availableInWei: '0'})\n\n  const [balance, setBalance] = useState<any>('0')\n\n  const { apiKey, accountId } = useAccount()\n\n  useCustomDCEffect(() => {\n    if (!api || !apiKey || !accountId || !tokens || !symbol) {\n      return\n    }\n\n    const tokenInfo = getToken(tokens, symbol)\n\n    api.getUserBalances({\n      accountId,\n      tokens: tokenInfo.tokenId\n    }, apiKey).then((data) => {\n      const total = fm.toBig(data[0].total)\n      const locked = fm.toBig(data[0].locked)\n      const availableInWei = total.minus(locked)\n      \n      setBalance(availableInWei.toString())\n\n    }).catch((reason: any) => {\n      dumpError400(reason, 'getUserBalances tokenId:' + tokens.tokenId)\n    })\n\n  }, [api, apiKey, accountId, tokens, symbol,])\n\n  return {\n    balance,\n    setBalance,\n  }\n\n}","import React, { useCallback } from 'react'\n\nimport { useTranslation, WithTranslation, withTranslation } from 'react-i18next'\n\nimport {\n    gatewayList as DefaultGatewayList,\n    headerMenuData, HeaderMenuTabStatus,\n    headerToolBarData, HeadMenuTabKey,\n    ButtonComponentsMap, LanguageKeys,\n    WalletStatus, HideIcon,\n    GatewayItem, ViewIcon, ThemeKeys,\n} from '@loopring-web/component-lib/src/static-resource'\n\nimport { useAccount, useDisconnect, useUnlock, useConnect, } from 'stores/account/hook'\n\nimport { getShortAddr } from 'utils/web3_tools'\n\nimport { AccountStatus } from 'state_machine/account_machine_spec'\n\nimport { useCustomDCEffect } from '@loopring-web/sdk/hooks/useCustomDCEffect'\n\nimport { Theme, } from 'defs/common_defs'\n\nimport { Button, useSettings } from '@loopring-web/component-lib'\n\nimport store from 'stores'\n\nimport { ConnectorNames } from '@loopring-web/sdk/defs/web3_defs'\nimport { IconButton } from '@material-ui/core';\nimport { AccountInfoProps } from '@loopring-web/component-lib/components/block';\nimport { useEtherscan } from '@loopring-web/sdk/hooks/web3/useWeb3'\n\nimport { useModals } from 'hooks/modal/useModals'\n\nimport {useState } from 'react'\nimport Web3 from 'web3'\n\nimport { CoinInfo, CoinMap, IBData, WalletCoin, WalletMap, } from '@loopring-web/component-lib/static-resource'\n\nimport { useExchangeAPI, useUserAPI } from '@loopring-web/sdk/hooks/common/useApi'\n\nimport { fromWEI, getIcon } from 'utils/swap_calc_utils'\nimport { useWeb3Account } from 'stores/account/hook'\nimport { useGetExchangeInfo, useGetTokens } from 'hooks/exchange/useExchangeAPI'\n\nimport * as contract from '@loopring-web/sdk/api/contract_api'\n\nimport { Lv2Account } from 'defs/account_defs'\n\nimport { ExchangeAPI } from '@loopring-web/sdk/api/exchange_api'\nimport { dumpError400 } from '@loopring-web/sdk/utils/network_tools'\n\nimport {\n    GetNextStorageIdRequest,\n    GetOffchainFeeAmtRequest,\n    OffchainFeeReqType,\n    OffChainWithdrawalRequestV3,\n    OriginTransferRequestV3,\n    TokenInfo,\n    VALID_UNTIL,\n} from '@loopring-web/sdk/defs/loopring_defs'\n\nimport { useGetUserBalances } from 'hooks/exchange/useUserAPI'\n\nimport {\n    DepositProps,\n    ResetProps,\n    SwitchData,\n    TradeBtnStatus,\n    TransferProps,\n    WithdrawProps,\n} from '@loopring-web/component-lib'\n\nimport { WithdrawType, WithdrawTypes } from '@loopring-web/component-lib/src/static-resource'\nimport { ButtonProps } from '@loopring-web/component-lib/components/basic-lib/index';\n\n\nexport const useHeader = () => {\n    const { i18n,t } = useTranslation(['common','layout'])\n    const { setTheme,themeMode,language, setLanguage } = useSettings();\n    const { ShowDeposit } = useModals()\n\n    const [open, setOpen] = React.useState(false)\n\n    const forceUpdate = React.useReducer((bool) => !bool, false)[1]\n\n    const { account } = useAccount()\n\n    const { lock, unlock } = useUnlock()\n\n    const { connect } = useConnect()\n\n    const { etherscanUrl } = useEtherscan()\n\n    const gatewayList: GatewayItem[] = [\n        {\n            ...DefaultGatewayList[0],\n            handleSelect: () => {\n                console.log('try to connect to ', ConnectorNames.Injected)\n                connect(ConnectorNames.Injected, true)\n                setOpen(false)\n            }\n        },\n        /*\n        {\n            key: ConnectorNames.WalletConnect,\n            imgSrc: '',\n            handleSelect: () => {\n                connect(ConnectorNames.WalletConnect)\n                setOpen(false)\n            }\n        },\n        {\n            key: ConnectorNames.Ledger,\n            imgSrc: '',\n            handleSelect: () => {\n                connect(ConnectorNames.Ledger)\n                setOpen(false)\n            }\n        },\n        {\n            key: ConnectorNames.Trezor,\n            imgSrc: '',\n            handleSelect: () => {\n                connect(ConnectorNames.Trezor)\n                setOpen(false)\n            }\n        },\n        */\n    ]\n\n    const [accountInfoProps, setAccountInfoProps] = React.useState<undefined|AccountInfoProps>(undefined)\n    //const theme: any = useTheme()\n\n    const onNotification = React.useCallback(async () => {\n        console.log('onNotification click')\n    }, [])\n\n    const onWalletBtnConnent = React.useCallback(async () => {\n        const acc = store.getState().account\n        console.log(`onWalletBtnConnent click: ${acc.status}`)\n\n        switch (acc.status) {\n            case AccountStatus.NOACCOUNT:\n                ShowDeposit(true)\n                break\n            case AccountStatus.UNCONNNECTED:\n                setOpen(true)\n                break\n            case AccountStatus.LOCKED:\n                console.log('onWalletBtnConnent try to unlock')\n                await unlock(acc)\n                break\n            case AccountStatus.ACTIVATED:\n                console.log('onWalletBtnConnent try to lock')\n                await lock(acc)\n                break\n\n            default:\n                break\n        }\n    }, [setOpen, lock, unlock, ShowDeposit])\n\n    const onThemeBtnClick = React.useCallback(async (themeMode:ThemeKeys) => {\n        if (themeMode === Theme.dark) {\n            setTheme(Theme.light)\n        } else {\n            setTheme(Theme.dark)\n        }\n    }, [setTheme])\n\n    const onLangBtnClick = (lang: LanguageKeys) => {\n        //i18n.changeLanguage(lang);\n        setLanguage(lang);\n    }\n    const [showAccountInfo, setShowAccountInfo] = React.useState(account?.accAddr ? true : false)\n    const [advanceOpen,setAdvanceOpen] = React.useState(false)\n\n    const handleViewAccountInfo =  React.useCallback((event: React.MouseEvent) => {\n        event.stopPropagation();\n        event.preventDefault();\n        if (showAccountInfo) {\n            // headerMenuData[ NavListIndex.layer2 ].iconBtn.view = false;\n            setShowAccountInfo(false);\n        } else {\n            // headerMenuData[ NavListIndex.layer2 ].iconBtn.view = true;\n            setShowAccountInfo(true);\n        }\n    },[setShowAccountInfo, showAccountInfo])\n\n    // useCustomCompareEffect(()=>{\n    //     if(language!==i18n.language)  {\n    //         headerToolBarData[ButtonComponentsMap.Language] = { ...headerToolBarData[ButtonComponentsMap.Language], language: i18n.language}\n    //     }\n    // },[language],(prevDeps,curDeps)=> prevDeps!== curDeps)\n    //init componment\n    useCustomDCEffect(() => {\n\n\n        headerToolBarData[ButtonComponentsMap.WalletConnect] = {\n            ...headerToolBarData[ButtonComponentsMap.WalletConnect],\n            handleClick: onWalletBtnConnent,\n        }\n\n        // headerToolBarData[ButtonComponentsMap.Notification] = { ...headerToolBarData[ButtonComponentsMap.Theme], themeMode: theme.mode, handleClick: onNotification }\n        // headerToolBarData.update(ButtonComponentsMap.WalletConnect,value=>{\n        //   return {...value, handleClick:onWalletBtnConnent}});\n        headerToolBarData[ButtonComponentsMap.Theme] = { ...headerToolBarData[ButtonComponentsMap.Theme], themeMode, handleClick: onThemeBtnClick }\n        // headerToolBarData.update(ButtonComponentsMap.Theme,value=>{\n        //   return {...value, themeMode:theme.mode, handleClick:onThemeBtnClick}});\n\n        headerToolBarData[ButtonComponentsMap.Language] = { ...headerToolBarData[ButtonComponentsMap.Language], handleChange: onLangBtnClick }\n        // headerToolBarData.update(ButtonComponentsMap.Language,value=>{\n        //  return  {...value, language:i18n.language, handleClick:onThemeBtnClick}});\n    }, [themeMode, language, i18n, onWalletBtnConnent, onThemeBtnClick, onLangBtnClick, onNotification, t]);\n\n    const GoAdvanceBtn = withTranslation('common')(({t}:WithTranslation)=>{\n        return <Button variant={'contained'} size={'small'} color={'primary'} onClick={_e => setAdvanceOpen(true)}>{ t('labelGoAdvance')}</Button>\n    }) as React.ElementType<ButtonProps>\n\n    useCustomDCEffect(() => {\n\n        if (!account) {\n            console.log('account'+account+'* exit')\n            setAccountInfoProps(undefined)\n            return\n        }\n\n        const { status } = account\n\n        const addr = getShortAddr(account?.accAddr)\n\n        if((addr && accountInfoProps && accountInfoProps.address !== addr) || addr ){\n            //TODO getAccount detail info\n            setAccountInfoProps({\n                address: addr,\n                level: 'VIP 1',\n                ethLink: etherscanUrl + account?.accAddr,\n                //TODO: changed by account status\n                mainBtn: <GoAdvanceBtn />\n            })\n        }else if(addr) {\n            setAccountInfoProps(undefined)\n        }\n\n        const updateHeaderMenuWhenHasAccountInfo =  ()=>{\n            headerMenuData[HeadMenuTabKey.Layer2] = {\n                ...headerMenuData[HeadMenuTabKey.Layer2],\n                extender : <IconButton disabled={!account}\n                                       onClick={handleViewAccountInfo}\n                                       aria-label={t('labelShowAccountInfo')} color=\"primary\">\n                    {showAccountInfo ? <HideIcon/> : <ViewIcon/>}</IconButton>,\n                status: HeaderMenuTabStatus.default\n            }\n            // setShowAccountInfo(true);\n        }\n        switch (status) {\n            case AccountStatus.UNCONNNECTED:\n                headerToolBarData[ButtonComponentsMap.WalletConnect] = {\n                    ...headerToolBarData[ButtonComponentsMap.WalletConnect],\n                    label: 'Connect Wallet',\n                    status: WalletStatus.default\n                }\n                headerMenuData[HeadMenuTabKey.Layer2] = {\n                    //TODO:  HeaderMenuTabStatus.hidden\n                    ...headerMenuData[HeadMenuTabKey.Layer2], status: HeaderMenuTabStatus.hidden\n                }\n                break\n            case AccountStatus.LOCKED:\n                headerToolBarData[ButtonComponentsMap.WalletConnect] = {\n                    ...headerToolBarData[ButtonComponentsMap.WalletConnect],\n                    label: addr,\n                    status: WalletStatus.connect\n                };\n\n                updateHeaderMenuWhenHasAccountInfo();\n                break\n            case AccountStatus.ACTIVATED:\n                headerToolBarData[ButtonComponentsMap.WalletConnect] = {\n                    ...headerToolBarData[ButtonComponentsMap.WalletConnect],\n                    label: addr,\n                    status: WalletStatus.unlock\n                }\n\n                updateHeaderMenuWhenHasAccountInfo();\n                break\n            case AccountStatus.UNACTIVATED:\n            case AccountStatus.NOACCOUNT:\n                headerToolBarData[ButtonComponentsMap.WalletConnect] = {\n                    ...headerToolBarData[ButtonComponentsMap.WalletConnect],\n                    // TODO got cache address if no show Connect Wallet\n                    label: addr,\n                    status: WalletStatus.noAccount\n                }\n\n                updateHeaderMenuWhenHasAccountInfo();\n                break\n            case AccountStatus.DEPOSITING:\n            case AccountStatus.DEPOSIT_TO_CONFIREM:\n            case AccountStatus.ARPROVING:\n            case AccountStatus.APPROV_TO_CONFIRM:\n                headerToolBarData[ButtonComponentsMap.WalletConnect] = {\n                    ...headerToolBarData[ButtonComponentsMap.WalletConnect],\n                    label: addr,\n                    status: WalletStatus.accountPending\n                }\n                updateHeaderMenuWhenHasAccountInfo();\n\n                break\n        }\n        forceUpdate()\n    }, [account, showAccountInfo, etherscanUrl, setAccountInfoProps])\n\n    return {\n        headerToolBarData,\n        headerMenuData,\n        gatewayList,\n        open,\n        setOpen,\n        setShowAccountInfo,\n        account,\n        showAccountInfo,\n        accountInfoProps,\n        advanceOpen,\n        setAdvanceOpen\n    }\n\n}\n\nexport function useCoinMap(exchangeApi: ExchangeAPI, tokens: any) {\n\n    const [coinMap, setCoinMap] = useState<CoinMap<any, CoinInfo<any>>>({})\n\n    useCustomDCEffect(async () => {\n\n        if (!exchangeApi || !tokens) {\n            return\n        }\n\n        const keys = Reflect.ownKeys(tokens)\n\n        let coinMap: CoinMap<any, CoinInfo<any>> = {}\n\n        keys.forEach((key: any) => {\n\n            if (!(key as string).startsWith('LP-')) {\n                coinMap[ key ] = {\n                    icon: getIcon(key, tokens),\n                    name: key,\n                    simpleName: key,\n                    description: '',\n                    company: '',\n                }\n            }\n\n        })\n\n        setCoinMap(coinMap)\n\n    }, [exchangeApi, tokens])\n\n    return {\n        coinMap,\n    }\n\n}\n\nexport function useLv1WalletMap(exchangeApi: ExchangeAPI, account: Lv2Account, tokens: any) {\n\n    const [walletMap, setWalletMap] = useState<WalletMap<any, WalletCoin<any>>>({})\n\n    useCustomDCEffect(async () => {\n\n        if (!exchangeApi || !account || !account.accAddr || !tokens) {\n            return\n        }\n\n        let walletMap: WalletMap<any, WalletCoin<any>> = {}\n\n        const {tokenBalances} = await exchangeApi.getTokenBalances({\n            owner: account.accAddr, token: ''\n        }, tokens)\n\n        const keys = Reflect.ownKeys(tokenBalances)\n\n        keys.forEach((item: any) => {\n            const balance = tokenBalances[ item ]\n            walletMap[ item ] = {\n                belong: item,\n                count: fromWEI(tokens, item, balance) as number,\n            }\n        })\n\n        setWalletMap(walletMap)\n\n    }, [exchangeApi, account, tokens])\n\n    return {\n        walletMap,\n    }\n\n}\n\nexport function useLv2WalletMap(tokens: any) {\n\n    const {balances} = useGetUserBalances(tokens)\n\n    const [walletMap, setWalletMap] = useState<WalletMap<any, WalletCoin<any>>>({})\n\n    useCustomDCEffect(() => {\n        let walletMap: WalletMap<any, WalletCoin<any>> = {}\n        if (balances && balances.symbol) {\n            const keys = Reflect.ownKeys(balances.symbol)\n\n            keys.forEach((item: any) => {\n                const balance = balances.symbol[ item ]\n                walletMap[ item ] = {\n                    belong: item,\n                    count: fromWEI(tokens, item, balance) as number,\n                }\n            })\n        }\n\n        console.log('lv2:', walletMap)\n\n        setWalletMap(walletMap)\n    }, [balances, tokens])\n\n    return {\n        walletMap,\n    }\n\n}\n\nexport function useChargeFeeList(tokenSymbol: string | undefined, requestType: OffchainFeeReqType) {\n\n    const api = useUserAPI()\n\n    const {accountId, apiKey,} = useAccount()\n\n    const [chargeFeeList, setChargeFeeList] = useState<any>([])\n\n    useCustomDCEffect(async () => {\n\n        console.log('!!!!!!!!!useCustomDCEffect useChargeFeeList:', tokenSymbol, accountId)\n\n        if (!accountId || !tokenSymbol) {\n            return\n        }\n\n        let chargeFeeList: any[] = []\n\n        try {\n\n            const request: GetOffchainFeeAmtRequest = {\n                accountId,\n                tokenSymbol,\n                requestType,\n            }\n\n            const response = await api.getOffchainFeeAmt(request, apiKey)\n\n            if (response) {\n                response.fees.forEach((item: any, index: number) => {\n                    chargeFeeList.push({belong: item.token, fee: item.fee})\n                })\n\n                setChargeFeeList(chargeFeeList)\n            }\n            console.log('response:', response)\n\n        } catch (reason) {\n            dumpError400(reason)\n        }\n\n\n        setChargeFeeList(chargeFeeList)\n\n    }, [accountId, apiKey, tokenSymbol])\n\n    return {\n        chargeFeeList,\n    }\n\n}\n\nexport function useModalProps() {\n\n    const {\n        ShowDeposit,\n        ShowTransfer,\n        ShowWithdraw,\n        ShowResetAccount,\n    } = useModals()\n\n    const {chainId, isConnected, connector,} = useWeb3Account()\n\n    const {exchangeInfo} = useGetExchangeInfo()\n\n    const {account, apiKey, accountId, eddsaKey,} = useAccount()\n\n    const {tokens: tokensAll} = useGetTokens()\n\n    const tokens = tokensAll?.tokenSymbolMap\n\n    const userApi = useUserAPI()\n\n    const exchangeApi = useExchangeAPI()\n\n    const {coinMap} = useCoinMap(exchangeApi, tokens)\n\n    const {walletMap: walletMap_Lv1} = useLv1WalletMap(exchangeApi, account, tokens)\n\n    const {walletMap: walletMap_Lv2} = useLv2WalletMap(tokens)\n\n    const deposit = useCallback(async (token: string, amt: any) => {\n\n        if (!tokens || !isConnected || !connector || !exchangeInfo?.exchangeAddress || !exchangeInfo?.depositAddress) {\n            console.log(`exchangeInfo:${exchangeInfo} deposit exit!!!!!`)\n            return\n        }\n\n        try {\n            const tokenInfo: TokenInfo = tokens[ token ]\n\n            const provider = await connector.getProvider()\n            const web3 = new Web3(provider as any)\n\n            let sendByMetaMask = account.connectName === ConnectorNames.Injected\n            sendByMetaMask = true\n\n            const gasPrice = (await exchangeApi.getGasPrice()).data / 1e+9\n            const gasLimit = 350000\n\n            const nonce = await contract.getNonce(web3, account.accAddr)\n\n            console.log('gasPrice:', gasPrice)\n            console.log('account.connectName:', account.connectName, ' tokenInfo:', tokenInfo)\n\n            const response = await contract.approveMax(web3, account.accAddr, tokenInfo.address,\n                exchangeInfo?.depositAddress, gasPrice, gasLimit, chainId, nonce, sendByMetaMask)\n\n            console.log('response:', response)\n\n            const fee = 0\n\n            const response2 = await contract.deposit(web3, account.accAddr,\n                exchangeInfo?.exchangeAddress, tokenInfo, amt, fee,\n                gasPrice, gasLimit, chainId, nonce + 1, sendByMetaMask)\n\n            console.log('response2:', response2)\n\n\n        } catch (reason) {\n            dumpError400(reason)\n        }\n\n    }, [chainId, isConnected, connector, account, exchangeInfo, tokens, exchangeApi])\n\n    const withdraw = useCallback(async (token: string, amt: any) => {\n\n        console.log('withdraw apiKey:', apiKey, ' exchangeInfo:', exchangeInfo, ' exchangeAddr:', exchangeInfo.exchangeAddress)\n\n        if (!account || !account.accountId || !account.accAddr\n            || !connector || !chainId || !apiKey || !exchangeInfo\n            || !exchangeInfo.exchangeAddress) {\n            console.log('return directly!!!!!', account, connector, chainId, apiKey, exchangeInfo)\n            return\n        }\n\n        amt = '5500000000000000000'\n\n        const fee = '5500000000000000000'\n\n        console.log('exchangeAddress:', exchangeInfo.exchangeAddress)\n\n        try {\n\n            const request: GetNextStorageIdRequest = {\n                accountId: account.accountId,\n                sellTokenId: 1\n            }\n\n            const storageId = await userApi.getNextStorageId(request, apiKey)\n\n            const request2: OffChainWithdrawalRequestV3 = {\n                exchange: exchangeInfo.exchangeAddress,\n                owner: account.accAddr,\n                to: account.accAddr,\n                accountId: account.accountId,\n                storageId: storageId.offchainId,\n                token: {\n                    tokenId: '1',\n                    volume: '100000000000000000000',\n                },\n                maxFee: {\n                    tokenId: '1',\n                    volume: '9400000000000000000',\n                },\n                extraData: '',\n                minGas: 0,\n                validUntil: VALID_UNTIL,\n            }\n\n            const provider = await connector.getProvider()\n            const web3 = new Web3(provider as any)\n\n            const response = await userApi.submitOffchainWithdraw(request2, web3, chainId, ConnectorNames.Injected,\n                account.eddsaKey, apiKey, false)\n\n            console.log(response)\n\n        } catch (reason) {\n            dumpError400(reason)\n        }\n\n    }, [apiKey, account, connector, exchangeInfo, chainId, userApi])\n\n    const transfer = useCallback(async (amt: number, payeeAddr: string = '0xb6AdaC3e924B4985Ad74646FEa3610f14cDFB79c') => {\n\n        if (!connector || !apiKey || !chainId || !accountId || !account?.accAddr) {\n            return\n        }\n\n        const request: GetNextStorageIdRequest = {\n            accountId,\n            sellTokenId: 1\n        }\n        const storageId = await userApi.getNextStorageId(request, apiKey)\n\n        console.log(`amt: ${amt} storageId:${JSON.stringify(storageId)}`)\n\n        try {\n\n            const provider = await connector.getProvider()\n            const web3 = new Web3(provider as any)\n\n            let walletType = account.connectName\n            walletType = ConnectorNames.Injected\n\n            const payeeAcc = await exchangeApi.getAccount({owner: payeeAddr})\n\n            let payeeId = 0\n            if (payeeAcc) {\n                payeeId = payeeAcc.accountId\n            }\n\n            const request2: OriginTransferRequestV3 = {\n                exchange: exchangeInfo.exchangeAddress,\n                payerAddr: account.accAddr,\n                payerId: accountId,\n                payeeAddr,\n                payeeId,\n                storageId: storageId.offchainId,\n                token: {\n                    tokenId: '1',\n                    volume: '100000000000000000000',\n                },\n                maxFee: {\n                    tokenId: '1',\n                    volume: '9400000000000000000',\n                },\n                validUntil: VALID_UNTIL,\n            }\n\n            console.log(`request2:${JSON.stringify(request2)}`)\n\n            const response = await userApi.submitInternalTransfer(request2, web3, chainId, walletType,\n                eddsaKey, apiKey, false)\n\n            console.log(response)\n\n        } catch (reason) {\n            dumpError400(reason)\n        }\n\n    }, [apiKey, accountId, account, connector, exchangeInfo, chainId, eddsaKey, userApi, exchangeApi])\n\n    const [depositValue, setDepositValue] = useState<IBData<any>>({\n        belong: undefined,\n        tradeValue: 0,\n        balance: 0\n    } as IBData<unknown>)\n\n    // deposit\n\n    let depositProps: DepositProps<any, any> = {\n        tradeData: {belong: undefined},\n        coinMap: coinMap,\n        walletMap: walletMap_Lv1,\n        depositBtnStatus: TradeBtnStatus.AVAILABLE,\n        onDepositClick: (tradeData: any) => {\n            console.log('1. onDepositClick', depositValue)\n            if (depositValue && depositValue.belong) {\n                deposit(depositValue.belong.toString(), depositValue.tradeValue)\n            }\n            ShowDeposit(false)\n        },\n        handlePanelEvent: async (data: SwitchData<any>, switchType: 'Tomenu' | 'Tobutton') => {\n            return new Promise((res) => {\n                if (data?.tradeData?.belong) {\n                    if (depositValue !== data.tradeData) {\n                        setDepositValue(data.tradeData)\n                    }\n                    setTokenSymbol(data.tradeData.belong)\n                } else {\n                    setDepositValue({belong: undefined, tradeValue: 0, balance: 0} as IBData<unknown>)\n                }\n                res();\n            })\n        },\n    }\n\n    // withdraw\n    const [withdrawValue, setWithdrawValue] = useState<IBData<any>>({\n        belong: undefined,\n        tradeValue: 0,\n        balance: 0\n    } as IBData<unknown>);\n\n    const [tokenSymbol, setTokenSymbol] = useState<string>('')\n    const {chargeFeeList: withdrawalFeeList} = useChargeFeeList(tokenSymbol, OffchainFeeReqType.OFFCHAIN_WITHDRAWAL)\n\n    let withdrawProps: WithdrawProps<any, any> = {\n        tradeData: {belong: undefined},\n        coinMap: coinMap,\n        walletMap: walletMap_Lv2,\n        withdrawBtnStatus: TradeBtnStatus.AVAILABLE,\n        onWithdrawClick: (tradeData: any) => {\n            console.log('Swap button click', withdrawValue)\n            if (withdrawValue && withdrawValue.belong) {\n                withdraw(withdrawValue.belong.toString(), withdrawValue.tradeValue)\n            }\n            ShowWithdraw(false)\n        },\n\n        handlePanelEvent: async (data: SwitchData<any>, switchType: 'Tomenu' | 'Tobutton') => {\n            return new Promise((res: any) => {\n                if (data?.tradeData?.belong) {\n                    if (withdrawValue !== data.tradeData) {\n                        setWithdrawValue(data.tradeData)\n                    }\n                    setTokenSymbol(data.tradeData.belong)\n                } else {\n                    setWithdrawValue({belong: undefined, tradeValue: 0, balance: 0} as IBData<unknown>);\n                }\n                res();\n            })\n        },\n        withdrawType: WithdrawType.Fast,\n        withdrawTypes: WithdrawTypes,\n        chargeFeeToken: 'ETH',\n        chargeFeeTokenList: withdrawalFeeList,\n        handleOnAddressChange: (value: any) => {\n            console.log('handleOnAddressChange', value);\n        },\n        handleAddressError: (_value: any) => {\n            return {error: true, message: 'any error'}\n        }\n    }\n\n    // transfer\n    const [transferValue, setTransferValue] = useState<IBData<any>>({\n        belong: undefined,\n        tradeValue: 0,\n        balance: 0\n    } as IBData<unknown>)\n\n    const [transferTokenSymbol, setTransferTokenSymbol] = useState<string>('')\n    const {chargeFeeList: transferFeeList} = useChargeFeeList(transferTokenSymbol, OffchainFeeReqType.TRANSFER)\n\n    let transferProps: TransferProps<any, any> = {\n        tradeData: {belong: undefined},\n        coinMap: coinMap,\n        walletMap: walletMap_Lv2,\n        transferBtnStatus: TradeBtnStatus.AVAILABLE,\n        onTransferClick: (tradeData: any) => {\n            console.log('onTransferClick:', transferValue);\n            if (transferValue && transferValue.belong) {\n                transfer(transferValue.tradeValue)\n            }\n\n            ShowTransfer(false)\n        },\n\n        handlePanelEvent: async (data: SwitchData<any>, switchType: 'Tomenu' | 'Tobutton') => {\n            return new Promise((res: any) => {\n                if (data?.tradeData?.belong) {\n                    if (transferValue !== data.tradeData) {\n                        setTransferValue(data.tradeData)\n                    }\n                    setTransferTokenSymbol(data.tradeData.belong)\n                } else {\n                    setTransferValue({belong: undefined, tradeValue: 0, balance: 0} as IBData<unknown>)\n                }\n                // else{\n                //     setTransferValue({ belong: undefined, amt: 0 })\n                // }\n\n                res();\n            })\n        },\n\n        chargeFeeToken: 'ETH',\n        chargeFeeTokenList: transferFeeList,\n        handleOnAddressChange: (value: any) => {\n            console.log('handleOnAddressChange', value);\n        },\n        handleAddressError: (_value: any) => {\n            return {error: true, message: 'any error'}\n        }\n    }\n\n    // reset\n    const [resetValue, setResetValue] = useState<IBData<any>>({\n        belong: undefined,\n        tradeValue: 0,\n        balance: 0\n    } as IBData<unknown>)\n\n    let resetProps: ResetProps<any, any> = {\n        tradeData: {belong: undefined},\n        coinMap: coinMap,\n        walletMap: walletMap_Lv2,\n        resetBtnStatus: TradeBtnStatus.AVAILABLE,\n        onResetClick: (tradeData: any) => {\n            console.log('onResetClick', resetValue)\n            if (resetValue && resetValue.belong) {\n            }\n\n            ShowResetAccount(false)\n        },\n        handlePanelEvent: async (data: SwitchData<any>, switchType: 'Tomenu' | 'Tobutton') => {\n            return new Promise((res) => {\n                if (data?.tradeData?.belong) {\n                    if (resetValue !== data.tradeData) {\n                        setResetValue(data.tradeData)\n                    }\n                } else {\n                    setResetValue({belong: undefined, tradeValue: 0, balance: 0} as IBData<unknown>)\n                }\n\n                res();\n            })\n        },\n        fee: {count: 234, price: 123}\n    }\n\n    return {\n        depositProps, withdrawProps, transferProps, resetProps,\n    }\n}\n","export function getShortAddr(address: string) {\n    if (!address || address === undefined || address === null || address.trim() === '') {\n        console.log('getShortAddr got empty!')\n        return undefined\n    }\n    const convertAddr = address.substr(0, 6) + '...' + address.substr(address.length - 4)\n    return convertAddr\n}\n","import styled from '@emotion/styled';\nimport { Box, Button, Divider, Grid, Modal as MuiModal, Switch, Typography } from '@material-ui/core';\nimport React from 'react';\nimport { UpColor, Currency, DropDownIcon } from '@loopring-web/component-lib/src/static-resource';\nimport {\n    BtnLanguage,\n    OutlineSelect,\n    OutlineSelectItem,\n    TypographyStrong, useSettings\n} from '@loopring-web/component-lib';\nimport { Trans, useTranslation, WithTranslation, withTranslation } from 'react-i18next';\nimport { useTheme } from '@emotion/react';\nimport { LanguageKeys } from '@loopring-web/component-lib/static-resource';\n\nconst MuiModalStyled = styled(MuiModal)`\n  //background: ${({theme}) => theme.colorBase.background().secondary};\n  // .MuiBackdrop-root{\n  //   z-index: -1;\n  //   background-color: ${({theme}) => theme.colorBase.background().outline}; \n  // }\n  display: flex;\n  align-items: center;\n  justify-content: center;\n` as typeof MuiModal;\nconst BlockStyled = styled(Box)`\n  ${({theme}) => theme.border.defaultFrame({c_key: 'blur', d_R: 1})};\n  background: ${({theme}) => theme.colorBase.background().secondary};\n  max-height: var(--panel-setting-height);\n  max-width: var(--panel-setting-width);\n  display: flex;\n  justify-content: space-around;\n  align-items: center;\n  overflow: scroll;\n  padding: ${({theme}) => theme.unit*8}px\n`;\n\nconst StyledPaper = styled(Grid)`\n  width: 100%;\n  height: 100%;\n  background-color: ${({theme}) => theme.colorBase.background().default};\n  ${({theme}) => theme.border.defaultFrame({c_key: 'blur', d_R: 1})};\n`\n\nconst StyledSwitch = styled(Switch)(({theme}) => ({\n    \"& .Mui-checked\": {\n        color: theme.colorBase.textPrimary,\n        '& + .MuiSwitch-track.MuiSwitch-track': {\n            border: `solid ${theme.colorBase.success}`,\n        },\n        '& .MuiSwitch-thumb': {\n            backgroundColor: theme.colorBase.success,\n        }\n    },\n    '& .MuiSwitch-track': {\n        border: `solid ${theme.colorBase.error}`,\n        opacity: 1\n    },\n    '& .MuiSwitch-thumb': {\n        backgroundColor: theme.colorBase.error,\n    }\n}));\n\nexport const BtnCurrency = ({t, currency, label, handleChange}: any) => {\n    const [state, setState] = React.useState<string>(currency ? currency : Currency.dollar);\n    const _handleChange = React.useCallback((event: React.ChangeEvent<any>) => {\n        setState(event.target.value);\n        if (handleChange) {\n\n            handleChange(event.target.value)\n        }\n    }, [handleChange])\n    return <OutlineSelect aria-label={t(label)} IconComponent={DropDownIcon}\n                          labelId=\"language-selected\"\n                          id=\"language-selected\"\n                          value={state} autoWidth\n                          onChange={_handleChange}>\n        <OutlineSelectItem value={Currency.dollar}>$ {t('labelUSDollar')}</OutlineSelectItem>\n            <OutlineSelectItem value={Currency.yen}>¥ {t('labelCNYYuan')}</OutlineSelectItem>\n    </OutlineSelect>\n}\n\nconst StyledDivider = styled(Divider)`\n  margin: ${({theme}) => theme.unit}px 0 ${({theme}) => theme.unit}px 0px;\n`\nconst DividerBlock = styled(Divider)`\n  margin: 0;\n  flex: 1;\n  width: 1px;\n  height: ${({theme}) => theme.unit * 3}px;\n  background: ${({theme}) => theme.colorBase.focus};\n`\n\n\n\nexport const SettingPanel = withTranslation(['common', 'layout'])(({t,i18n, ...rest}: & WithTranslation) => {\n    const theme = useTheme();\n    const {setUpColor,setLanguage,setCurrency,currency,upColor} = useSettings()\n    const language = i18n.language;\n    const handleOnLanguageChange = (lang: LanguageKeys) => {\n        setLanguage(lang);\n        i18n.changeLanguage(lang);\n    }\n    const handleOnCurrencyChange = (value: any) => {\n        setCurrency(value);\n    }\n    const handleColorChange = (e:any) => {\n        if(e.target.checked){\n            setUpColor(UpColor.green) ;\n        }else{\n            setUpColor(UpColor.red);\n        }\n    }\n    return <Grid container direction={'column'} justifyContent={'space-between'} alignItems={'stretch'}>\n        <Typography variant={'h4'} component={'h3'} marginY={1} paddingLeft={2}>{t('labelTitleSecurity')}</Typography>\n        <StyledPaper item xs={12} display={'flex'} flexDirection={'column'} marginBottom={2} paddingY={2}>\n            <Box component={'section'} display={'flex'} flexDirection={'column'}>\n                <Typography variant={'h5'} component={'h4'} paddingX={2}>{t('labelTitleResetL2Keypair')}</Typography>\n                <StyledDivider/>\n                <Grid container display={'flex'} flexDirection={'row'} justifyContent={'stretch'}\n                      alignItems={'flex-start'} paddingX={2} marginBottom={2}>\n                    <Grid item xs={8} display={'flex'} flexDirection={'column'}>\n                        <Typography variant={'body1'} component={'p'}>\n                            <Trans i18nKey=\"resetDescription\">\n                                Create a new signing key for layer-2 authentication (no backup needed). This will\n                                <TypographyStrong component={'span'}>cancel all your pending orders</TypographyStrong>.\n                            </Trans>\n                        </Typography>\n                    </Grid>\n                    <Grid item xs={4} display={'flex'} flexDirection={'column'} justifyContent={'space-evenly'}\n                          alignItems={'flex-end'} alignSelf={'stretch'}>\n                        <Button variant={'outlined'} size={'medium'} color={'primary'}>{t('labelBtnReset')}</Button>\n                    </Grid>\n                    <Grid item xs={12} display={'flex'} flexDirection={'row'} justifyContent={'flex-end'}\n                          alignItems={'center'} alignSelf={'stretch'}>\n                        <Typography variant={'body2'} component={'p'}\n                                    paddingTop={1}>{t('labelHadChangPassword', {passDay: '14 hours'})}</Typography>\n                    </Grid>\n\n                </Grid>\n            </Box>\n            <Box component={'section'} display={'flex'} flexDirection={'column'}>\n                <Typography variant={'h5'} component={'h4'} paddingX={2}>{t('labelTitleExportAccount')}</Typography>\n                <StyledDivider/>\n                <Grid container display={'flex'} flexDirection={'row'} justifyContent={'stretch'}\n                      alignItems={'flex-start'} paddingX={2} marginBottom={2}>\n                    <Grid item xs={7} display={'flex'} flexDirection={'column'}>\n                        <Typography variant={'body1'} component={'p'}>{t('descriptionExportAccount')}</Typography>\n                    </Grid>\n                    <Grid item xs={5} display={'flex'} flexDirection={'column'} justifyContent={'space-evenly'}\n                          alignItems={'flex-end'} alignSelf={'stretch'}>\n                        <Grid item> <Button variant={'outlined'} size={'medium'}\n                                            color={'primary'}>{t('labelBtnExportAccount')}</Button></Grid>\n                    </Grid>\n                </Grid>\n            </Box>\n        </StyledPaper>\n\n        <Typography variant={'h4'} component={'h3'} marginY={1} paddingLeft={2}>{t('labelTitlePreferences')}</Typography>\n        <StyledPaper item xs={12} display={'flex'} flexDirection={'column'} marginBottom={2} paddingY={2}>\n            <Box component={'section'} display={'flex'} flexDirection={'column'}>\n                <Typography variant={'h5'} component={'h4'} paddingX={2}>{t('labelTitleLayout')}</Typography>\n                <StyledDivider/>\n                <Grid container display={'flex'} flexDirection={'row'} justifyContent={'stretch'}\n                      alignItems={'flex-start'} paddingX={2} marginBottom={2}>\n                    <Grid item xs={7} display={'flex'} flexDirection={'column'}>\n                        <Typography variant={'body1'} component={'p'}>{t('labelLanguage')}</Typography>\n                    </Grid>\n                    <Grid item xs={5} display={'flex'} flexDirection={'column'} justifyContent={'space-evenly'}\n                          alignItems={'flex-end'} alignSelf={'stretch'}>\n                        <Grid item>\n                            <BtnLanguage {...{\n                                t, ...rest,\n                                language,\n                                label: 'languageSetting',\n                                handleChange: handleOnLanguageChange\n                            }}></BtnLanguage>\n                        </Grid>\n                    </Grid>\n                </Grid>\n                <Grid container display={'flex'} flexDirection={'row'} justifyContent={'stretch'}\n                      alignItems={'flex-start'} paddingX={2} marginBottom={2}>\n                    <Grid item xs={7} display={'flex'} flexDirection={'column'}>\n                        <Typography variant={'body1'} component={'p'}>{t('labelCurrency')}</Typography>\n                    </Grid>\n                    <Grid item xs={5} display={'flex'} flexDirection={'column'} justifyContent={'space-evenly'}\n                          alignItems={'flex-end'} alignSelf={'stretch'}>\n                        <Grid item>\n                            <BtnCurrency {...{\n                                t, ...rest,\n                                currency,\n                                label: 'currencySetting',\n                                handleChange: handleOnCurrencyChange\n                            }}></BtnCurrency>\n\n                        </Grid>\n                    </Grid>\n                </Grid>\n                <Grid container display={'flex'} flexDirection={'row'} justifyContent={'stretch'}\n                      alignItems={'flex-start'} paddingX={2}>\n                    <Grid item xs={7} display={'flex'} flexDirection={'column'}>\n                        <Typography variant={'body1'} component={'p'}>{t('labelColors')}</Typography>\n                    </Grid>\n                    <Grid item xs={5} display={'flex'} flexDirection={'row'} justifyContent={'flex-end'}\n                          alignItems={'center'} alignSelf={'stretch'}>\n                        <Typography variant={'body1'} component={'span'} paddingX={2}>\n                            <Trans i18nKey=\"whichColorIsUp\">\n                                <span style={{\n                                    textTransform: 'capitalize',\n                                    color: upColor === UpColor.green ? theme.colorBase.success : theme.colorBase.error\n                                }}>{{up: upColor === UpColor.green ? t('labelgreen') : t('labelred')}} up</span>\n                                and <span style={{\n                                textTransform: 'capitalize',\n                                color: upColor === UpColor.green ? theme.colorBase.error : theme.colorBase.success\n                            }}>{{down: upColor === UpColor.green ? t('labelred') : t('labelgreen')}} down</span>\n                            </Trans>\n                        </Typography>\n                        <StyledSwitch checked={upColor === UpColor.green} color=\"default\"\n                                      onChange={handleColorChange}/>\n                    </Grid>\n                </Grid>\n            </Box>\n\n        </StyledPaper>\n\n    </Grid>\n})\n\nexport const SettingPage = ({open,onClose}: { open:boolean, onClose:(e:any)=>void})=>{\n    return  <MuiModalStyled\n        open={open}\n        onClose={onClose}\n        aria-labelledby=\"modal-modal-title\"\n        aria-describedby=\"modal-modal-description\"\n    >\n        <BlockStyled >\n           <SettingPanel/>\n        </BlockStyled>\n    </MuiModalStyled>\n}","export function deepClone(data: any) {\n    if (!data || !(data instanceof Object) || (typeof data == \"function\")) {\n        return data || undefined\n    }\n    let constructor = data.constructor\n    let result = new constructor()\n    for (let key in data) {\n        if (data.hasOwnProperty(key)) {\n            result[key] = deepClone(data[key])\n        }\n    }\n    return result\n}\n\nexport function copyToClipBoard(text: string){ //复制到剪切板\n\n    if(document.execCommand){\n        var textarea =document.createElement('textarea')\n        document.body.appendChild(textarea)\n        textarea.value=text\n        textarea.select()\n        document.execCommand(\"Copy\")\n        document.body.removeChild(textarea)\n\t}\n\n\tif((window as any).clipboardData){\n        (window as any).clipboardData.setData(\"Text\", text)\n        return true\n    }\n\treturn false\n}","import { useCallback, useState, } from 'react'\n\nimport {\n    Header as HeaderUI,\n    HideOnScroll,\n    ModalWalletConnect,\n    AccountInfo,\n} from '@loopring-web/component-lib'\n\nimport { headerRoot } from '@loopring-web/component-lib/src/static-resource'\n\nimport { useLocation } from 'react-router-dom'\n\nimport { Box, Collapse, Container, Toolbar, Snackbar, Alert, } from '@material-ui/core'\n\nimport { useHeader } from './hook'\n\nimport { useDisconnect, } from 'stores/account/hook'\nimport { ModalPanel, ModalQRCode, } from '@loopring-web/component-lib';\nimport { useGetExchangeInfo } from 'hooks/exchange/useExchangeAPI'\nimport { SettingPage } from '../../pages/SettingPage';\nimport { useModalProps } from './hook'\n\nimport { copyToClipBoard } from 'utils/obj_tools'\n\nconst Header = ({ ...rest }: any) => {\n\n    const {\n        depositProps,\n        withdrawProps,\n        transferProps,\n        resetProps,\n    } = useModalProps()\n\n    const location = useLocation()\n\n    const {\n        headerToolBarData,\n        headerMenuData,\n        gatewayList,\n        open,\n        setOpen,\n        setShowAccountInfo,\n        account,\n        accountInfoProps,\n        showAccountInfo,\n        advanceOpen,\n        setAdvanceOpen\n    } = useHeader()\n\n    const { exchangeInfo } = useGetExchangeInfo()\n\n    const { disconnect } = useDisconnect()\n\n    const onSwitch = useCallback(() => {\n        setOpen(true)\n    }, [setOpen])\n\n    const [openQRCode, setOpenQRCode] = useState(false)\n\n    const [copyToastOpen, setCopyToastOpen] = useState(false)\n\n    const closeCopyToast = () => { setCopyToastOpen(false) }\n\n    return (<>\n        <Snackbar open={copyToastOpen} autoHideDuration={2500} onClose={closeCopyToast}>\n            <Alert onClose={closeCopyToast} severity=\"success\">\n                Address Copied to Clipboard!\n        </Alert>\n        </Snackbar>\n\n        <ModalQRCode open={openQRCode} onClose={() => setOpenQRCode(false)} title={'ETH Address'}\n            description={account.accAddr} url={account.accAddr} />\n\n        <ModalPanel transferProps={transferProps} withDrawProps={withdrawProps} depositProps={depositProps} resetProps={resetProps} />\n\n        <HideOnScroll>\n            {process.env.NODE_ENV !== 'production' && JSON.stringify(account?.status)}\n            {process.env.NODE_ENV !== 'production' && ' exchangeAddress:' + JSON.stringify(exchangeInfo?.exchangeAddress)}\n\n            <HeaderUI {...rest} headerMenuData={headerMenuData} headerToolBarData={headerToolBarData}\n                selected={location.pathname === '/' ? headerRoot : location.pathname}></HeaderUI>\n\n        </HideOnScroll>\n        <Toolbar />\n\n        <ModalWalletConnect {...{ ...rest, gatewayList, open, onClose: () => setOpen(false) }} />\n\n        {\n            accountInfoProps && <><Collapse in={showAccountInfo}>\n                <Container maxWidth=\"lg\">\n                    <Box marginTop={2}>\n                        <AccountInfo onCopy={() => {\n                            console.log('onCopy')\n                            copyToClipBoard(account.accAddr)\n                            setCopyToastOpen(true)\n                        }} onViewQRCode={() => {\n                            setOpenQRCode(true)\n                        }}\n                            onDisconnect={() => { disconnect(); setShowAccountInfo(false); }}\n                            onSwith={onSwitch} {...accountInfoProps}>\n                        </AccountInfo>\n                    </Box>\n                </Container>\n            </Collapse>\n                <SettingPage open={advanceOpen} onClose={e => setAdvanceOpen(false)} />\n            </>\n        }\n\n    </>)\n}\n\nexport default Header\n","import styled from '@emotion/styled/macro'\n\nimport { MarketBlock, QuoteTable, TablePaddingX } from '@loopring-web/component-lib'\n\nimport { WithTranslation, withTranslation } from 'react-i18next'\nimport { coinMap } from '@loopring-web/component-lib/static'\nimport { FloatTag } from '@loopring-web/component-lib/src/static-resource'\nimport { Box, Grid } from '@material-ui/core'\nimport { useQuote } from './hook'\n\nconst  RowStyled = styled(Grid)`\n      & .MuiGrid-root:not(:last-of-type) > div{\n        margin-right: ${({theme}) => theme.unit * 3}px;\n      }\n` as typeof Grid\nconst  TableWrapStyled = styled(Grid)`\n  &{\n    background-color: ${({theme}) => theme.colorBase.background().default};\n    ${({theme}) => theme.border.defaultFrame({c_key: 'blur', d_R: 1})};\n  }\n  ${({theme}) => TablePaddingX({pLeft:theme.unit * 3,pRight:theme.unit * 3})}\n` as typeof Grid\n\nconst QuotePage = withTranslation('common')((rest: WithTranslation) => {\n\n    const { tickList, big4 } = useQuote()\n\n    let props: any = {\n        ...rest,\n        buyData: coinMap.ETH,\n        sellData: coinMap.LRC,\n        tradeFloat: {priceDollar: +123, priceYuan: 2343232, percent: '+15%', chartUnit: \"24h\",\n            volume: 112312312,\n            floatTag:FloatTag.increase},\n\n    }\n\n    return <Box display={'flex'} flexDirection={'column'} flex={1}>\n\n        <RowStyled container >\n            <Grid item xs={3} >\n                <MarketBlock {...{...props,tradeFloat: {priceDollar: 123,priceYuan: 2343232, percent: '0%', chartUnit: \"24h\",floatTag:FloatTag.none}}} />\n            </Grid>\n            <Grid item xs={3} >\n                <MarketBlock {...{...props,tradeFloat: {priceDollar: 123,priceYuan: 2343232, percent: '-15%', chartUnit: \"24h\",floatTag:FloatTag.decrease}}} />\n            </Grid>\n            <Grid item xs={3} >\n                <MarketBlock {...{...props}}></MarketBlock>\n            </Grid>\n            <Grid item xs={3} >\n                <MarketBlock {...{...props}}></MarketBlock>\n            </Grid>\n        </RowStyled>\n        <TableWrapStyled container marginY={3} paddingY={2}>\n            <Grid item xs={12} >\n                <QuoteTable onVisibleRowsChange={(data: any) => {console.log(data)}} rawData={tickList} {...{ ...rest }} />\n            </Grid>\n        </TableWrapStyled>\n    </Box>\n\n\n})\n\nexport default QuotePage\n","import { QuoteTableRawDataItem } from \"@loopring-web/component-lib\"\nimport { TickerData } from \"@loopring-web/sdk/defs/exchange_defs\"\nimport { useExchangeAPI } from \"@loopring-web/sdk/hooks/common/useApi\"\nimport { useCustomDCEffect } from \"@loopring-web/sdk/hooks/useCustomDCEffect\"\nimport { useQuotePageWs } from \"hooks/exchange/useWsAPI\"\nimport { useState } from \"react\"\n\nconst amtCol = 5\n\nexport function useQuote() {\n\n    const [tickList, setTickList] = useState<any>([])\n\n    const [big4, setBig4] = useState<any>([])\n\n    const exchangeApi = useExchangeAPI()\n\n    useCustomDCEffect(async() => {\n\n        if (!exchangeApi) {\n            return\n        }\n\n        let mounted = true\n\n        const refresh = async () => {\n\n            const { tickList } = await exchangeApi.getAllTickers()\n\n            let ticks: any[] = []\n\n            tickList.forEach((item: TickerData) => {\n                const item2: QuoteTableRawDataItem = {\n                    pair: {\n                        first: item.base as string,\n                        last: item.quote as string,\n                    },\n                    lastPrice: item.quote_token_volume / item.base_token_volume,\n                    change: (item.close - item.open) / item.open,\n                    high: item.high,\n                    low: item.low,\n                    volume: item.base_token_volume,\n                }\n                const rowData: any = [[item.base, item.quote], [item.close, item.close],\n                item.change, item.high, item.low, item.base_token_volume, item.base_token_amt, item.base, item.quote]\n                ticks.push(rowData)\n            })\n            \n            ticks = ticks.sort((a: any, b: any) => {\n                let res = 0\n                if (!isNaN(b[amtCol]) && !isNaN(a[amtCol])) {\n                    res = b[amtCol] - a[amtCol]\n                }\n\n                return res\n            })\n\n            if (mounted) {\n                setBig4(ticks.slice(0, 4))\n                setTickList(ticks)\n            }\n        }\n\n        await refresh()\n\n        /*\n\n        const handler = setInterval(async() => {\n            await refresh()\n        }, 3000)\n        */\n\n        return () => {\n            /*\n            if (handler) {\n                clearInterval(handler)\n            }\n            */\n            mounted = false\n        }\n\n    }, [exchangeApi])\n\n    return {\n        tickList,\n        big4,\n    }\n\n}\n","import { SwapPanel as SwapPanelUi } from '@loopring-web/component-lib'\nimport styled from 'styled-components';\n\n\n\nconst SwapPanel = ({swapProps,...rest}: any) => {\n\n    // console.log('swapProps:', swapProps)\n\n    return (<SwapPanelUi {...{\n        ...swapProps\n        , ...rest\n    }}> </SwapPanelUi>\n    )\n\n}\n\nexport default SwapPanel\n","import { useState } from 'react'\n\nimport { useGetAmmPools, useGetAmmPoolsBalances } from 'hooks/exchange/useAmmpoolAPI'\nimport { useCustomDCEffect } from '@loopring-web/sdk/hooks/useCustomDCEffect'\nimport { useGetTokens } from 'hooks/exchange/useExchangeAPI'\n\nimport { getAmmInfo, } from 'utils/swap_calc_utils'\n\nexport function useSwapPage() {\n\n    const [base, setBase] = useState<string>('')\n  \n    const [quote, setQuote] = useState<string>('')\n  \n    const { ammpools } = useGetAmmPools()\n\n    const { ammPoolsBalances: ammPoolsBalances_all } = useGetAmmPoolsBalances()\n  \n    const ammPoolsBalances = ammPoolsBalances_all?.ammpoolsbalances\n\n    const [poolAddress, setPoolAddress] = useState<string>('')\n  \n    const [market, setMarket] = useState<string>('')\n  \n    const { tokens: tokensAll } = useGetTokens()\n  \n    const tokens = tokensAll?.tokenSymbolMap\n\n    useCustomDCEffect(() => {\n  \n      if (!base || !quote || !ammpools || !ammPoolsBalances) {\n        return\n      }\n  \n      const { ammInfo, } = getAmmInfo(ammpools.ammpools, ammPoolsBalances, base, quote)\n\n      console.log('ammInfo.market:', ammInfo.market)\n  \n      setMarket(ammInfo.market)\n      setPoolAddress(ammInfo.address)\n  \n    }, [base, quote, ammpools, ammPoolsBalances,])\n\n    return {\n        base,\n        setBase,\n        quote,\n        setQuote,\n        market,\n        tokens,\n        poolAddress,\n        ammpools,\n        ammPoolsBalances,\n    }\n\n}","import { useState, } from 'react'\n\nimport { usePromiseJob } from '@loopring-web/sdk/hooks/common/useCommon'\nimport { useAmmpoolAPI, } from '@loopring-web/sdk/hooks/common/useApi'\n\nexport function useGetAmmPools() {\n\n  const [ammpools, setAmmpools] = useState<any>()\n\n  const api = useAmmpoolAPI()\n\n    const fetchData = () => {\n      if (!api) {\n        return undefined\n      }\n      return api.getAmmPoolConf()\n    }\n  \n    usePromiseJob(fetchData, setAmmpools, undefined, 'useGetAmmPools', [api])\n\n  return { ammpools }\n\n}\n\nexport function useGetAmmPoolsBalances() {\n\n  const [ammPoolsBalances, setAmmPoolsBalances] = useState<any>()\n\n  const api = useAmmpoolAPI()\n\n  const fetchData = () => {\n    if (!api) {\n      return undefined\n    }\n    return api.getAmmPoolBalances()\n  }\n\n  usePromiseJob(fetchData, setAmmPoolsBalances, undefined, 'useGetAmmPoolsBalances', [api])\n\n  return { ammPoolsBalances }\n\n}\n","import { useCallback, useState } from 'react'\n\nimport { useExchangeAPI } from '@loopring-web/sdk/hooks/common/useApi'\nimport { useCustomDCEffect } from '@loopring-web/sdk/hooks/useCustomDCEffect'\nimport { TradingInterval, GetCandlestickRequest, GetDepthRequest, GetTickerRequest, } from '@loopring-web/sdk/defs/loopring_defs'\nimport { dumpError400 } from '@loopring-web/sdk/utils/network_tools'\nimport { fromWEI } from 'utils/swap_calc_utils'\n\nimport { ChartUnit } from '@loopring-web/component-lib/static-resource'\n\nimport { ChartType } from '@loopring-web/component-lib'\n\nimport { TGItemData, TGItemJSXInterface, } from '@loopring-web/component-lib'\nimport { Candlestick } from '@loopring-web/sdk/defs/exchange_defs'\n\nconst toggleData: TGItemData[] = [\n  {\n    value: ChartType.Trend,\n    key: ChartType.Trend,\n    label: 'label' + ChartType.Trend\n  },\n  {\n    value: ChartType.Depth,\n    key: ChartType.Depth,\n    label: 'label' + ChartType.Depth\n  },\n]\n\nexport function useBasicInfo(props: any, t: any) {\n  const tgItemJSXs: TGItemJSXInterface[] = toggleData.map(({ value, label, key }) => {\n    return { value, tlabel: t(label), key, JSX: <>{t(label)}</> }\n  })\n\n  const { base, quote, market, tokens } = props\n\n  const [chartType, setChartType] = useState<ChartType>(ChartType.Trend)\n\n  const [change, setChange] = useState(0)\n\n  const [volume, setVolume] = useState('')\n\n  const [chartUnit, setChartUnit] = useState(ChartUnit.D1)\n\n  const [originData, setOriginData] = useState<any>(undefined)\n\n  const handleChange = useCallback((_e: React.MouseEvent, value: any) => {\n    // Settings.setChartType(value)\n    console.log('handleChange:', value)\n    setOriginData(undefined)\n    setChartType(value)\n  }, [setOriginData, setChartType])\n\n  const exchangeApi = useExchangeAPI()\n\n  useCustomDCEffect(async() => {\n\n    if (!exchangeApi || !market || !tokens || !quote) {\n      return\n    }\n\n    let mounted = true\n\n    try {\n\n      const request: GetTickerRequest = {\n        market,\n      }\n\n      const ticker = await exchangeApi.getTicker(request)\n      if (mounted) {\n\n          if (ticker.tickList[0].change) {\n            setChange(ticker.tickList[0].change)\n          }\n\n          if (ticker.tickList[0].base_token_volume) {\n            const baseVol = fromWEI(tokens, base, ticker.tickList[0].base_token_volume) as string\n            setVolume(baseVol)\n          }\n        }\n      }\n    catch (reason) {\n      dumpError400(reason, 'ChartPanel getCandlestick')\n    }\n\n    return () => {\n      mounted = false\n    }\n\n  }, [exchangeApi, market, tokens, base,])\n\n  const tgItemJSXsPriceChart: TGItemJSXInterface[] = Object.keys(ChartUnit).reduce((pre, item) => {\n    // @ts-ignore\n    const tGItemData: TGItemData = { value: ChartUnit[item], key: ChartUnit[item], label: 'label' + ChartUnit[item] };\n    pre.push({ value: tGItemData.value, tlabel: t(tGItemData.label ? tGItemData.label : tGItemData.key), key: tGItemData.key, JSX: <>{t(tGItemData.label ? tGItemData.label : tGItemData.key)}</> })\n    return pre\n  }, [] as TGItemJSXInterface[])\n\n  useCustomDCEffect(async () => {\n\n    let mounted = true\n\n    if (!exchangeApi || !market) {\n      return\n    }\n\n    if (chartType === ChartType.Trend) {\n      const request: GetCandlestickRequest = {\n        market,\n        interval: TradingInterval.min15,\n        limit: 96\n      }\n  \n      try {\n        const candlesticks = await exchangeApi.getCandlestick(request)\n        if (mounted) {\n          const originData = candlesticks.candlesticks.map((item: Candlestick) => {\n            return {\n              timeStamp: item.timeStamp,\n              low: item.low,\n              high: item.high,\n              open: item.open,\n              close: item.close,\n              volume: item.quoteVol,\n            }\n          })\n          setOriginData(originData)\n        }\n      }\n      catch (reason) {\n        dumpError400(reason, 'ChartPanel getCandlestick')\n      }\n  \n    } else {\n      const request: GetDepthRequest = {\n        market: [market],\n      }\n\n      try {\n\n        const depth = await exchangeApi.getDepth(request)\n        console.log('depth:', depth)\n        setOriginData(depth)\n\n      } catch (reason) {\n        dumpError400(reason)\n      }\n\n    }\n\n    return () => {\n      mounted = false\n    }\n\n  }, [exchangeApi, market, chartType])\n\n  return {\n    change,\n    volume,\n    chartUnit,\n    chartType,\n    tgItemJSXs,\n    tgItemJSXsPriceChart,\n    handleChange,\n    originData,\n  }\n}","import { ChartUnit } from '@loopring-web/component-lib/static-resource'\n\nimport { ScaleAreaChart } from '@loopring-web/component-lib'\nimport { Box, Grid } from \"@material-ui/core\"\n\nimport { ToggleButtonGroup, useSettings } from '@loopring-web/component-lib'\nimport { WithTranslation } from 'react-i18next'\nimport { TradeTitle } from '@loopring-web/component-lib/components/block'\nimport { getThousandFormattedNumbers, UpColor } from '@loopring-web/component-lib/src/static-resource';\nimport { useBasicInfo } from './hook'\n\nconst BasicInfoPanel = ({ props, swapProps, t, ...rest }: any & WithTranslation) => {\n\n  const {\n    change,\n    chartType,\n    tgItemJSXs,\n    tgItemJSXsPriceChart,\n    handleChange,\n    originData,\n  } = useBasicInfo(props, t)\n  const {upColor} = useSettings();\n  return <>{swapProps.swapTradeData ?\n          <>\n                <Grid item xs={8}>\n                  <TradeTitle {...{\n                    ...rest, t, ...swapProps, tradeFloat: {\n                      priceDollar: getThousandFormattedNumbers(change,8),\n                      percent: '+15%',\n                      chartUnit: \"24h\",\n                      volume:'',\n                    }\n                  }}></TradeTitle>\n                </Grid>\n                <Grid item xs={4} display={'flex'} justifyContent={'flex-end'} alignItems={'flex-end'}>\n                  <ToggleButtonGroup exclusive {...{ ...rest, t, tgItemJSXs, value: chartType }}\n                                                 handleChange={handleChange} />\n                </Grid>\n            </> : undefined}\n\n\n            <Grid item xs={12} >\n              <Box minHeight={256} maxHeight={256} display={'block'} style={{ height: '100%', width: '100%' }} >\n                <ScaleAreaChart type={chartType} data={originData ?? []} riseColor={upColor as keyof typeof UpColor}  handleMove={() => { }} />\n              </Box>\n            </Grid>\n            <Grid item xs={12} height={24} display={'flex'} justifyContent={'flex-end'}>\n              <ToggleButtonGroup exclusive {...{ ...rest, t, tgItemJSXs: tgItemJSXsPriceChart,\n                value: ChartUnit.D1, size: 'small' }}\n                                 handleChange={() => undefined} />\n            </Grid>\n       </>\n\n};\n\nexport default BasicInfoPanel\n","import { useState, } from 'react'\n\nimport { getAccountArg, getCandlestickArg, getAmmpoolArg, getTickerArg, getOrderArg, WsTopicType, } from '@loopring-web/sdk/defs/ws_defs'\n\nimport { useWs } from '@loopring-web/sdk/hooks/common/useWebsocketApi'\nimport { useCustomDCEffect } from '@loopring-web/sdk/hooks/useCustomDCEffect'\n\nimport { useGetMarkets } from \"hooks/exchange/useExchangeAPI\"\n\nfunction useHandleSocketData(data: any) {\n  const [account, setAccount] = useState<any>()\n  const [ammPool, setAmmPool] = useState<any>()\n  const [order, setOrder] = useState<any>()\n  const [ticker, setTicker] = useState<any>()\n\n  useCustomDCEffect(() => {\n\n      // console.log('useCustomDCEffect ws!~ data:', data)\n\n      if (!data) {\n        return\n      }\n\n      if (data.op) {\n        return\n      }\n\n      if (!data.topic || !data.topic.topic) {\n        return\n      }\n\n      switch(data.topic.topic) {\n        case WsTopicType.Account:\n          // console.log(',data.data:', data.data)\n          setAccount(data.data)\n          break\n        case WsTopicType.Ammpool:\n          let ammPool = {\n            baseAmt: data.data[0][0],\n            quoteAmt: data.data[0][1],\n            timestamp: data.data[1],\n          }\n          // console.log(',ammPool:', ammPool)\n          setAmmPool(ammPool)\n          break\n        case WsTopicType.Candlestick:\n          break\n        case WsTopicType.Order:\n          setOrder(data.data)\n          break\n        case WsTopicType.OrderBook:\n          break\n        case WsTopicType.Ticker:\n          setTicker(data.data)\n          break\n        case WsTopicType.Trade:\n          break\n        default:\n          throw Error('Unknown WsTopicType:' + data.topic.topic)\n      }\n  }, [data])\n\n  return {\n    account,\n    ammPool,\n    order,\n    ticker,\n  }\n}\n\nexport function useSwapPageWs(poolAddress: string, market: string, apiKey: string) {\n\n  let topics: any[] = []\n\n  topics.push(getAccountArg())\n  topics.push(getOrderArg(market))\n  topics.push(getAmmpoolArg(poolAddress))\n\n  const { socketData } = useWs(topics, true, apiKey, !!poolAddress && !!market && !!apiKey)\n\n  return useHandleSocketData(socketData)\n\n}\n\nexport function useQuotePageWs() {\n\n  const { markets } = useGetMarkets()\n\n  let topics: any[] = []\n\n  if (markets) {\n\n    const keys = Reflect.ownKeys(markets.markets)\n\n    let c = 0\n  \n    keys.every((item: any) => {\n      c += 1\n      topics.push(getTickerArg(item))\n      if (c >= 20) {\n        return false\n      }\n\n      return true\n    })\n\n  }\n\n  const { socketData } = useWs(topics, false)\n\n  return useHandleSocketData(socketData)\n\n}\n","export enum OrderHandling {\n    processed = 'processed',\n    no_such_order = 'no_such_order',\n    too_many_times = 'too_many_times',\n}\n\n// export enum PriceChartType {\n//     h24 = '24hrs',\n//     w1 = '1week',\n//     all = 'all',\n// }\n","import { useCallback, useState } from 'react'\nimport BigNumber from 'bignumber.js'\n\nimport { useGetExchangeInfo } from 'hooks/exchange/useExchangeAPI'\n\nimport { useGetUserBalances } from 'hooks/exchange/useUserAPI'\nimport { useUserAPI } from '@loopring-web/sdk/hooks/common/useApi'\nimport { useAccount } from 'stores/account/hook'\nimport {\n    applySlippageTolerance,\n    checkStatus,\n    fromWEI,\n    getAmmInfo,\n    getAmountOut,\n    getAmountOut_Reverse,\n    getBalances,\n    getLeft,\n    getRight,\n    getToken,\n    toWEI,\n} from 'utils/swap_calc_utils'\n\nimport { dumpError400 } from '@loopring-web/sdk/utils/network_tools'\n\nimport * as fm from '@loopring-web/sdk/api/common/formatter'\nimport { useSwapPageWs } from 'hooks/exchange/useWsAPI'\nimport { useCustomDCEffect } from '@loopring-web/sdk/hooks/useCustomDCEffect'\nimport { UserStorage } from 'storage'\nimport { OrderType, SubmitOrderRequestV3, TxStatus } from '@loopring-web/sdk/defs/loopring_defs'\nimport { OrderHandling } from 'defs/swap_defs'\n\nimport {\n    CoinInfo,\n    CoinMap,\n    IBData,\n    TradeCalcData,\n    WalletCoin,\n    WalletMap,\n} from '@loopring-web/component-lib/static-resource'\n\nimport { SwapProps, SwapTradeData, } from '@loopring-web/component-lib'\nimport { deepClone } from 'utils/obj_tools'\nimport { SwapType } from '@loopring-web/component-lib/components/panel/Interface';\nimport { AccountStatus } from 'state_machine/account_machine_spec'\n\nexport function useSwap(base: any, quote: any, setBase: any, setQuote: any, tokens: any, market: string, poolAddress: string, ammpools: any, ammPoolsBalances: any) {\n\n    const { apiKey, eddsaKey, accountId, account: globalAcc, } = useAccount()\n\n    const [ammOrder, setAmmOrder] = useState<string>(UserStorage.getAmmOrder())\n\n    const [slippageTolerance, setSlippageTolerance] = useState(0.01)\n\n    const [priceImpact, setPriceImpact] = useState(0)\n\n    const [baseAmt, setBaseAmt] = useState<string | number>()\n\n    const [quoteAmt, setQuoteAmt] = useState<number>(0)\n\n    const minimumReceived = quoteAmt ? quoteAmt * (1 - slippageTolerance) : 0\n\n    const userApi = useUserAPI()\n\n    const [left, setLeft] = useState<CoinMap<any, CoinInfo<any>>>({})\n\n    const [right, setRight] = useState<CoinMap<any, CoinInfo<any>>>({})\n\n    const { exchangeInfo } = useGetExchangeInfo()\n\n    const [fee, setFee] = useState(0)\n    const [takerRate, setTakerRate] = useState(10)\n\n    const [currentPrice, setCurrentPrice] = useState<number>(0)\n\n    const [amount1ApplyOrderFee, setAmount1ApplyOrderFee] = useState(0)\n\n    const { balances, setBalances } = useGetUserBalances(tokens)\n\n    const [balance, setBalance] = useState<any>(0)\n    const [availToShow, setAvailToShow] = useState<any>(0)\n\n    const [walletMap, setWalletMap] = useState<WalletMap<any, WalletCoin<any>>>({})\n\n    // const quoteUserBalance = useGetUserBalances(tokens, quote)\n    const [quoteBalance, setQuoteBalance] = useState<any>(0)\n    const [quoteToShow, setQuoteToShow] = useState<any>(0)\n\n    const [swapProps, setSwapProps] = useState<any>({})\n\n    const {\n        account,\n        ammPool,\n        order,\n    } = useSwapPageWs(poolAddress, market, apiKey)\n\n    useCustomDCEffect(() => {\n\n        if (!balances || !base || !tokens) {\n            return\n        }\n\n        if (globalAcc.status === AccountStatus.ACTIVATED) {\n\n            const balance = balances.symbol[base]\n            setBalance(balance)\n            setAvailToShow(fromWEI(tokens, base, balance))\n\n            const quoteBalance = balances.symbol[quote]\n            setQuoteBalance(quoteBalance)\n            setQuoteToShow(fromWEI(tokens, quote, quoteBalance))\n\n        } else {\n\n            setBalance(0)\n            setAvailToShow(0)\n\n            setQuoteBalance(0)\n            setQuoteToShow(0)\n\n        }\n\n    }, [balances, base, tokens, globalAcc.status])\n\n    useCustomDCEffect(() => {\n        if (!account || !tokens || !base) {\n            return\n        }\n\n        if (globalAcc.status === AccountStatus.ACTIVATED) {\n\n            const currentBalance = balances.tokenId[account.tokenId]\n            const totalAmount = fm.toBig(account.totalAmount)\n            const amountLocked = fm.toBig(account.amountLocked)\n            const newAvailable = totalAmount.minus(amountLocked)\n\n            if (!newAvailable.eq(fm.toBig(currentBalance))) {\n                const avail = fromWEI(tokens, base, newAvailable.toString())\n\n                const balancesTmp = deepClone(balances)\n                balancesTmp.tokenId[account.tokenId] = newAvailable.toString()\n                const token = balancesTmp.map[account.tokenId]\n                balancesTmp.symbol[token.symbol] = newAvailable.toString()\n                setBalances(balancesTmp)\n            }\n\n        } else {\n            setBalances(undefined)\n        }\n\n    }, [account, tokens, base, globalAcc.status])\n\n    useCustomDCEffect(() => {\n\n        let walletMap: WalletMap<any, WalletCoin<any>> = {}\n\n        if (globalAcc.status === AccountStatus.ACTIVATED) {\n            if (balances && balances.symbol) {\n                const keys = Reflect.ownKeys(balances.symbol)\n\n                keys.forEach((item: any) => {\n                    const balance = balances.symbol[item]\n                    walletMap[item] = {\n                        belong: item,\n                        count: fromWEI(tokens, item, balance) as number,\n                    }\n                })\n            }\n\n        }\n\n        setWalletMap(walletMap)\n\n    }, [balances, tokens, globalAcc.status])\n\n    useCustomDCEffect(() => {\n\n        if (!base || !quote || !ammpools || !ammPoolsBalances || !tokens) {\n            console.log('return!!! --->setQuoteBalance')\n            return\n        }\n\n        const {\n            ammInfo,\n            baseBalance,\n            quoteBalance,\n        } = getBalances(ammpools.ammpools, ammPoolsBalances, base, quote, tokens)\n\n        setFee(ammInfo.feeBips)\n        // setQuoteBalance(quoteBalance.volume)\n        // setQuoteToShow(quoteShow)\n\n        if (baseBalance.volume > 0) {\n            setCurrentPrice(quoteBalance.volume / baseBalance.volume)\n        } else {\n            setCurrentPrice(0)\n        }\n\n    }, [tokens, base, quote, ammpools, ammPoolsBalances,])\n\n    /*\n    useCustomDCEffect(() => {\n\n        if (!ammPool || !quoteBalance) {\n            console.log(`return 216 quoteBalance : ${ammPool} --- ${quoteBalance}`)\n            return\n        }\n\n        const quoteAmt = fm.toBig(ammPool.quoteAmt)\n        // console.log('got ammPool update:', ammPool, ' quoteAmt:', quoteAmt.toString())\n        if (!quoteAmt.eq(fm.toBig(quoteBalance))) {\n            // console.log('got ammPool update newAvailable:', ammPool.quoteAmt)\n\n            const quoteShow = fromWEI(tokens, quote, quoteAmt)\n            console.log(`quoteShow2 : ${quoteShow}`)\n            setQuoteBalance(quoteAmt.toString())\n            setQuoteToShow(quoteShow)\n        }\n        console.log(`216 quoteAmt : ${quoteAmt}`)\n\n    }, [ammPool, quoteBalance, quote, tokens])\n    */\n\n    useCustomDCEffect(async () => {\n\n        if (!apiKey && !accountId && !userApi && !ammOrder) {\n            return\n        }\n\n        const fn = (accountId: number, orderHash: string, apiKey: string, count = 0) => {\n            // console.log('orderHash:', orderHash, ' count:', count)\n            return new Promise((resolve, reject) => {\n                if (orderHash) {\n                    userApi.getOrderDetails({\n                        accountId,\n                        orderHash\n                    }, apiKey).then((order) => {\n                        console.log('order.status:', order.status)\n                        if (order.status === TxStatus.processed) {\n                            UserStorage.clearAmmOrder()\n                            return resolve(OrderHandling.processed)\n                        } else {\n                            if (count < 10) {\n                                setTimeout(() => {\n                                    fn(accountId, UserStorage.getAmmOrder(), apiKey, count++)\n                                }, 1000)\n                            } else {\n                                reject(OrderHandling.too_many_times)\n                            }\n                        }\n                    }).catch(() => {\n                        UserStorage.clearAmmOrder()\n                        return reject(OrderHandling.no_such_order)\n                    })\n                }\n            })\n        }\n\n        fn(accountId, UserStorage.getAmmOrder(), apiKey).then((result) => {\n            console.log('then:', result)\n        }).catch((reason) => {\n            dumpError400(reason)\n        })\n\n        return () => {\n        }\n\n    }, [apiKey, accountId, ammOrder, userApi])\n\n    useCustomDCEffect(() => {\n\n        if (!ammpools || !tokens) {\n            return\n        }\n\n        if (globalAcc.status !== AccountStatus.UNCONNNECTED) {\n\n            const left = getLeft(ammpools.pairs, tokens)\n\n            if (left) {\n                setLeft(left.coinMapLeft)\n                setBase(left.left[0])\n\n                const right = getRight(ammpools.pairs, left.left[0], tokens)\n\n                if (right) {\n                    setRight(right.coinMapRight)\n                    setQuote(right.right[0])\n                }\n\n            }\n\n        } else {\n            setLeft({})\n            setRight({})\n            setBase(undefined)\n            setQuote(undefined)\n        }\n\n    }, [ammpools, tokens, globalAcc.status])\n\n    useCustomDCEffect(() => {\n\n        if (!userApi || !accountId || !apiKey || !base || !quote || !ammpools || !ammPoolsBalances || !tokens) {\n            return\n        }\n\n        let mounted = true\n\n        const { ammInfo, } = getBalances(ammpools.ammpools, ammPoolsBalances, base, quote, tokens)\n\n        userApi.getUserFeeRate({\n            accountId,\n            markets: ammInfo.market\n        }, apiKey).then((response) => {\n            if (mounted) {\n                setTakerRate(response[0].takerRate)\n            } else {\n                console.log('setTakerRate unmounted!')\n            }\n        }).catch((reason) => {\n            dumpError400(reason, 'after getUserFeeRate')\n        })\n\n        return () => {\n            mounted = false\n        }\n\n    }, [tokens, userApi, accountId, apiKey, base, quote, ammpools, ammPoolsBalances, globalAcc.status])\n\n    const onBaseAmtInputChange = useCallback((event: any) => {\n\n        if (!ammpools || !ammPoolsBalances) {\n            return\n        }\n\n        let baseAmtVal = event.tradeValue as number\n\n        // console.log('onBaseAmtInputChange baseAmtVal:', baseAmtVal, ' baseAmt:', baseAmt)\n        if (baseAmtVal !== undefined && baseAmtVal === baseAmt) {\n            console.log('return directly')\n            return\n        } else if (baseAmtVal === undefined) {\n            baseAmtVal = 0\n        }\n\n        const {\n            quoteAmt: quoteAmtVal,\n            _amount1ApplyOrderFee,\n            priceImpact,\n        } = getAmountOut(baseAmtVal, ammpools.ammpools, ammPoolsBalances, tokens, base, quote, takerRate, currentPrice)\n\n        const { isNormal, } = checkStatus(baseAmtVal, balance, quoteAmtVal, fromWEI(tokens, quote, quoteBalance))\n\n        if (isNormal) {\n            setBaseAmt(baseAmtVal)\n            setQuoteAmt(quoteAmtVal)\n            setAmount1ApplyOrderFee(_amount1ApplyOrderFee)\n            setPriceImpact(priceImpact)\n        } else {\n            setQuoteAmt(0)\n            setAmount1ApplyOrderFee(0)\n            setPriceImpact(0)\n        }\n\n        return quoteAmtVal\n\n    }, [tokens, baseAmt, balance, quoteBalance, ammpools, ammPoolsBalances, base, quote, takerRate, currentPrice])\n\n    const onQuoteAmtInputChange = useCallback((event: any) => {\n\n        if (!ammpools || !ammPoolsBalances) {\n            return\n        }\n\n        let quoteAmtVal = event.tradeValue as number\n\n        // console.log('onQuoteAmtInputChange quoteAmtVal:', quoteAmtVal, ' quoteAmt:', quoteAmt)\n        if (quoteAmtVal !== undefined && quoteAmtVal === quoteAmt) {\n            // console.log('return directly')\n            return\n        } else if (quoteAmtVal === undefined) {\n            quoteAmtVal = 0\n        }\n\n        const {\n            baseAmt: baseAmtVal,\n            _amount1ApplyOrderFee,\n            priceImpact,\n            hasError,\n        } = getAmountOut_Reverse(quoteAmtVal, ammpools.ammpools, ammPoolsBalances, tokens, base, quote, takerRate, currentPrice)\n\n        const { isNormal, } = checkStatus(baseAmtVal, balance, quoteAmtVal, fromWEI(tokens, quote, quoteBalance))\n\n        if (!hasError && isNormal) {\n            setBaseAmt(baseAmtVal)\n            setQuoteAmt(quoteAmtVal)\n            setAmount1ApplyOrderFee(_amount1ApplyOrderFee)\n            setPriceImpact(priceImpact)\n        } else {\n            setBaseAmt(0)\n            setAmount1ApplyOrderFee(0)\n            setPriceImpact(0)\n        }\n\n        return baseAmtVal\n\n    }, [tokens, quoteAmt, balance, quoteBalance, ammpools, ammPoolsBalances, base, quote, takerRate, currentPrice])\n\n    const onSwap = useCallback(() => {\n        console.log('try to swap ', baseAmt, base, ' -> ', quoteAmt, quote)\n\n        const swap = async () => {\n\n            if (!exchangeInfo?.exchangeAddress) {\n                throw Error('no exchangeAddress!')\n            }\n\n            if (!baseAmt || !quoteAmt) {\n                // throw Error('no baseAmt or quoteAmt!')\n                console.log('no baseAmt or quoteAmt!')\n                return\n            }\n\n            const {\n                ammInfo,\n                feeBips,\n            } = getAmmInfo(ammpools.ammpools, ammPoolsBalances, base, quote)\n\n            const allOrNone = false\n\n            const baseToken = getToken(tokens, base)\n\n            const quoteToken = getToken(tokens, quote)\n\n            // const storageId = await authKeyApi.getNextStorageId(accountId, baseToken.tokenId, apiKey)\n\n            let orderId: number\n            try {\n\n                const storageId = await userApi.getNextStorageId({\n                    accountId,\n                    sellTokenId: baseToken.tokenId\n                }, apiKey\n                )\n                // console.log('storageId:', storageId)\n\n                orderId = storageId.orderId\n\n            } catch (reason) {\n                dumpError400(reason, 'getNextStorageId')\n                throw Error('getNextStorageId failed')\n            }\n\n            // const validUntil = Math.ceil(new Date().getTime() / 1000) + 3600 * 1000\n            const validUntil = 1700000000\n\n            const amount0InBigNumber = toWEI(tokens, base, baseAmt)\n            const amount1WithSlippage = applySlippageTolerance(\n                tokens,\n                quote,\n                amount1ApplyOrderFee,\n                slippageTolerance,\n            )\n\n            const amount1InBigNumber = new BigNumber(amount1WithSlippage.outInWei).toFixed()\n\n            try {\n\n                console.log('amount0InBigNumber:', amount0InBigNumber, ' amount1InBigNumber:', amount1InBigNumber)\n\n                const request: SubmitOrderRequestV3 = {\n                    exchange: exchangeInfo?.exchangeAddress,\n                    accountId,\n                    storageId: orderId,\n                    sellToken: {\n                        tokenId: baseToken.tokenId,\n                        volume: amount0InBigNumber.toString()\n                    },\n                    buyToken: {\n                        tokenId: quoteToken.tokenId,\n                        volume: amount1InBigNumber.toString()\n                    },\n                    allOrNone,\n                    validUntil,\n                    maxFeeBips: 60,\n                    fillAmountBOrS: false,\n                    orderType: OrderType.ClassAmm,\n                    eddsaSignature: '',\n                }\n\n                const response = await userApi.submitOrder(request, eddsaKey, apiKey)\n\n                console.log('response:', response)\n\n                UserStorage.setAmmOrder(response.hash)\n                setAmmOrder(response.hash)\n\n            } catch (reason) {\n                dumpError400(reason, 'submitOrderV3')\n            }\n\n        }\n\n        swap()\n\n    }, [accountId, ammPoolsBalances, ammpools, amount1ApplyOrderFee, apiKey,\n        base, baseAmt, eddsaKey, exchangeInfo?.exchangeAddress,\n        quote, quoteAmt, slippageTolerance, tokens, userApi])\n\n    useCustomDCEffect(() => {\n\n        const tradeCalcData: TradeCalcData<any> = {\n            coinSell: base, //name\n            coinBuy: quote,\n            StoB: parseFloat(currentPrice?.toFixed(4)),\n            BtoS: 0,\n            sellCoinInfoMap: left,\n            buyCoinInfoMap: right,\n            walletMap: walletMap,\n            slippage: slippageTolerance * 100,   //TODO which number is selected, from localstorage;\n            slippageTolerance: [0.1, 0.5, 1, 'slippage:N'],    //TODO getLocalstorage Customer slippage\n            priceImpact: `${(Math.abs(priceImpact) * 100).toFixed(2)}%`,\n            minimumReceived: minimumReceived.toFixed(7),\n            fee: `${(Math.abs(fee + takerRate) / 100).toFixed(2)}%`,\n        }\n\n        const swapProps: SwapProps<IBData<any>, string, any> = {\n            swapTradeData: {\n                sell: {\n                    belong: base,\n                    balance: availToShow,\n                    tradeValue: baseAmt as any,\n                }, buy: {\n                    belong: quote,\n                    balance: quoteToShow,\n                    tradeValue: quoteAmt,\n                },\n                slippage: slippageTolerance,\n                __cache__: {}\n            },\n            tradeCalcData,\n\n            onSwapClick: (tradeData: SwapTradeData<any>) => {\n                onSwap()\n            },\n\n            handleSwapPanelEvent: async (swapData, switchType) => {\n                return new Promise((res) => {\n\n                    console.log('swapData:', swapData)\n\n                    const { type, tradeData, to, } = swapData\n                    let right = undefined\n                    switch (switchType) {\n                        case SwapType.SEll_CLICK:\n                            break\n                        case SwapType.BUY_CLICK:\n                            break\n                        case SwapType.SELL_SELECTED:\n                            const quoteAmtVal = onBaseAmtInputChange(tradeData?.sell);\n                            if (quoteAmtVal !== undefined) {\n                                tradeData.buy = { ...tradeData.buy, tradeValue: quoteAmtVal }\n                            }\n                            setBase(tradeData.sell.belong)\n                            right = getRight(ammpools.pairs, tradeData.sell.belong, tokens)\n\n                            console.log('right:', right)\n\n                            if (right) {\n                                setRight(right.coinMapRight)\n                                setQuote(right.right[0])\n                            } else {\n                                setQuote(undefined)\n                            }\n                            break\n                        case SwapType.BUY_SELECTED:\n                            console.log()\n                            onQuoteAmtInputChange(tradeData?.buy)\n                            setQuote(tradeData.buy.belong)\n                            break\n                        case SwapType.EXCHANGE_CLICK:\n                            setBaseAmt(0)\n                            setQuoteAmt(0)\n\n                            tradeData.buy = { ...tradeData.buy, balance: availToShow, tradeValue: 0 }\n                            tradeData.sell = { ...tradeData.sell, balance: quoteToShow, tradeValue: 0 }\n\n                            // console.log('balances:', balances.symbol)\n                            console.log('sell:', tradeData.sell)\n                            console.log('buy:', tradeData.buy)\n\n                            console.log('availToShow:', availToShow)\n                            console.log('quoteToShow:', quoteToShow)\n\n                            setBase(tradeData.sell?.belong)\n                            right = getRight(ammpools.pairs, tradeData.sell.belong, tokens)\n                            if (right) {\n                                console.log('right:', right.right[0])\n                                setRight(right.coinMapRight)\n                                setQuote(right.right[0])\n                            } else {\n                                setQuote(tradeData.buy?.belong)\n                            }\n                            break\n                        default:\n                            break\n                    }\n\n                    res()\n                })\n            },\n        }\n\n        setSwapProps(swapProps)\n\n    }, [slippageTolerance,\n        priceImpact,\n        fee,\n        takerRate,\n        left,\n        right,\n        walletMap,\n        minimumReceived, availToShow, quoteToShow, baseAmt, quoteAmt, currentPrice,\n        onBaseAmtInputChange,\n        onQuoteAmtInputChange,\n        onSwap])\n\n    // console.log(`base:${base} quote:${quote}. quoteToShow before render: ${quoteToShow}`)\n\n    return {\n        baseAmt,\n        quoteAmt,\n        slippageTolerance,\n\n        availToShow,\n        quoteToShow,\n        walletMap,\n        balances,\n        currentPrice,\n        minimumReceived,\n        priceImpact,\n        fee,\n        takerRate,\n\n        left,\n        right,\n\n        swapProps,\n\n        onBaseAmtInputChange,\n        onQuoteAmtInputChange,\n        onSwap,\n\n    }\n}","import React, { useState } from 'react'\n\nimport AppBar from '@material-ui/core/AppBar'\nimport Tabs from '@material-ui/core/Tabs'\nimport Tab from '@material-ui/core/Tab'\nimport Checkbox from '@material-ui/core/Checkbox'\nimport styled from '@emotion/styled'\n\nimport {\n  Table as TableUI,\n  generateRows,\n  generateColumns,\n  Column,\n  TradeTable,\n  FormControlLabel,\n} from '@loopring-web/component-lib'\nimport { withTranslation, WithTranslation } from 'react-i18next';\nimport { CheckedIcon, CheckBoxIcon } from '@loopring-web/component-lib/static-resource'\n\ninterface Row {\n  side: string;\n  amount: string;\n  price: string;\n  fee: string;\n  time: string;\n  sortColumn: string;\n  filterColumn: string;\n  cellExpend: {\n    value: string;\n    children: [];\n    isExpanded: boolean;\n  }\n  children?: Row[];\n  isExpanded?: boolean;\n  format?: any;\n}\n\nconst columnModeDefault: Column<Row, unknown>[] = [\n  { key: 'side', name: 'Side' },\n  { key: 'amount', name: 'Amount' },\n  { key: 'price', name: 'Price' },\n  { key: 'fee', name: 'Fee' },\n  { key: 'time', name: 'Time' },\n]\n\nconst ammColumnModeDefault: Column<Row, unknown>[] = [\n  { key: 'side', name: 'Side' },\n  { key: 'price', name: 'Price' },\n  { key: 'feeAmount', name: 'FeeAmount' },\n  { key: 'time', name: 'Time' },\n]\n\nconst applyProps = (index: number) => {\n  return {\n    id: `simple-tab-${index}`,\n    'aria-controls': `simple-tabpanel-${index}`,\n  }\n}\nconst Table = withTranslation('common',{withRef:true})(TableUI);\nconst TabPanel = (props: any) => {\n  const { children, value, index, ...other } = props;\n\n  return (\n    <div\n      role=\"tabpanel\"\n      hidden={value !== index}\n      id={`simple-tabpanel-${index}`}\n      aria-labelledby={`simple-tab-${index}`}\n      {...other}\n    >\n      {value === index && (\n        <React.Fragment>{children}</React.Fragment>\n      )}\n    </div>\n  )\n}\n\nconst TradePanel = withTranslation('common')(({ myTrades, recentTrades, t }: { myTrades: any, recentTrades: any } & WithTranslation) => {\n\n  const [value, setValue] = useState(0)\n  const [hideOtherPairs, setHideOtherPairs] = useState(false)\n  const handleChange = (event: any, newValue: any) => {\n    setValue(newValue)\n  }\n\n  const myArgs: any = {\n    rawData: myTrades ? myTrades : [],\n    columnMode: columnModeDefault,\n    generateRows,\n    generateColumns,\n  }\n\n  const recentArgs: any = {\n    rawData: recentTrades ? recentTrades : [],\n    columnMode: ammColumnModeDefault,\n    generateRows,\n    generateColumns,\n  }\n  \n  const StyledTabsWrapper = styled.div`\n    position: relative;\n    width: 100%;\n    margin-top: ${({theme}) => theme.unit * 4}px;\n  `\n\n  const StyledFormControlLabel = styled(FormControlLabel)`\n    position: absolute;\n    top: 0;\n    right: ${({theme}) => theme.unit}px;\n    margin: ${({theme}) => theme.unit}px 0 0 0;\n  `\n\n  const handleCheckboxChange = () => {\n    setHideOtherPairs(flag => !flag)\n  }\n\n  return (\n      <StyledTabsWrapper>\n        <StyledFormControlLabel\n            control={<Checkbox checked={hideOtherPairs} size={'small'} checkedIcon={<CheckedIcon/>} icon={<CheckBoxIcon/>} color={'default'} onChange={handleCheckboxChange} />} label={t('labelTradePanelHideOtherPairs')} />\n        <Tabs\n            value={value}\n            onChange={handleChange}\n            aria-label=\"tabs switch\"\n        >\n          <Tab label=\"My Trades\" {...applyProps(0)} />\n          <Tab label=\"Recent Trades\" {...applyProps(1)} />\n        </Tabs>\n        \n        {/*</AppBar>*/}\n        {/* <TabPanel value={value} index={0}>\n            <TradeTable rawData={[]} />\n          \n        </TabPanel>\n        <TabPanel value={value} index={1}>\n          <TradeTable rawData={[]} />\n        </TabPanel> */}\n        <TradeTable rawData={[]} />\n      </StyledTabsWrapper>\n  )\n})\n\nexport default TradePanel\n","import TradePanelUi from './TradePanel'\nimport { useGetMyTrades, useGetRecentTrades, } from './hooks'\n\nconst TradePanel = (props: any) => {\n\n  const { market, poolAddress, } = props\n\n  const { myTrades } = useGetMyTrades(market)\n\n  const { recentTrades } = useGetRecentTrades(poolAddress)\n\n  return (\n    <TradePanelUi myTrades={myTrades} recentTrades={recentTrades} />\n  )\n\n}\n\nexport default TradePanel\n","import { useState } from 'react'\n\nimport { useAmmpoolAPI, useUserAPI } from '@loopring-web/sdk/hooks/common/useApi'\nimport { useAccount } from 'stores/account/hook'\n\nimport { dumpError400 } from '@loopring-web/sdk/utils/network_tools'\n\nimport { useCustomDCEffect } from '@loopring-web/sdk/hooks/useCustomDCEffect'\nimport { AmmTrade, FilledType } from '@loopring-web/sdk/defs/loopring_defs'\nimport { AccountStatus } from 'state_machine/account_machine_spec'\n\nexport function useGetMyTrades(market: string) {\n\n  const { apiKey, accountId, account, } = useAccount()\n\n  const userApi = useUserAPI()\n\n  const [myTrades, setMyTrades] = useState<any>()\n\n  useCustomDCEffect(async() => {\n    if (!userApi || !accountId || !apiKey || !market) {\n      return\n    }\n\n    let tradesNew: any = []\n\n    if (account.status === AccountStatus.ACTIVATED) {\n\n      try {\n\n        const trades = await userApi.getUserTrades({\n          accountId,\n          market,\n          fillTypes: FilledType.amm,\n        }, apiKey)\n\n        trades.trades.forEach((item: any) => {\n          tradesNew.push([item[2], item[3], item[4], item[6], item[0]])\n        })\n\n      } catch (reason) {\n        dumpError400(reason)\n      }\n      \n    }\n\n\n    console.log('----------------------tradesNew:', tradesNew)\n      \n    setMyTrades(tradesNew)\n\n  }, [userApi, accountId, apiKey, market, account.status])\n\n  return {\n    myTrades,\n  }\n}\n\nexport function useGetRecentTrades(ammPoolAddress: string) {\n\n  const ammPoolApi = useAmmpoolAPI()\n\n  const [recentTrades, setRecentTrades] = useState<any>()\n\n  useCustomDCEffect(() => {\n    if (!ammPoolApi || !ammPoolAddress) {\n      return\n    }\n\n    ammPoolApi.getAmmPoolTrades({\n      ammPoolAddress\n    }).then((trades) => {\n      let tradesNew: any = []\n      trades.trades.forEach((item: AmmTrade) => {\n        tradesNew.push([item.side, item.price, item.feeAmount, item.createdAt])\n      })\n      // console.log('getAmmPoolTrades:', tradesNew)\n      setRecentTrades(tradesNew)\n    }).catch((reason) => {\n      dumpError400(reason)\n    })\n\n  }, [ammPoolApi, ammPoolAddress])\n\n  return {\n    recentTrades,\n  }\n}\n","import { Box, Grid, } from '@material-ui/core'\nimport { WithTranslation, withTranslation } from 'react-i18next'\nimport SwapPanel from './panel/SwapPanel'\nimport { useSwapPage } from './hook'\nimport BasicInfoPanel from './panel/BasicInfoPanel'\nimport { useSwap } from './panel/SwapPanel/hooks'\nimport TradePanel from './panel/TradePanel'\nimport styled from 'styled-components'\n\nconst FixedStyle = styled(Box)`\n  @media only screen and (min-height: 680px ) and (min-width:1024px){\n    position: fixed;\n  }\n`\n\nconst SwapPage = withTranslation('common')(({...rest}: WithTranslation) => {\n\n    const props = useSwapPage()\n\n    const {\n        base, quote, setBase, setQuote, tokens, market,\n        poolAddress, ammpools, ammPoolsBalances,\n    } = props\n\n    const {swapProps} = useSwap(base, quote, setBase, setQuote, tokens, market, poolAddress, ammpools, ammPoolsBalances)\n\n    return <>\n        <Grid container marginRight={3}>\n            <BasicInfoPanel {...{...rest, swapProps, props}} />\n            <TradePanel market={market} poolAddress={poolAddress}/>\n\n        </Grid>\n        <Box display={'flex'} style={{minWidth:'var(--swap-box-width)'}} >\n            <FixedStyle>\n                <SwapPanel {...{\n                    ...rest, swapProps\n                }} />\n            </FixedStyle>\n\n        </Box>\n\n    </>\n});\n\n\nexport default SwapPage\n","import { useRef } from 'react'\n\n// import Qrcode from 'components/qrcodes/Qrcode'\n\n\nimport { useAccount } from 'stores/account/hook'\n\nimport { useGetExchangeInfo, useGetGas, useGetMarkets, useGetTokens } from 'hooks/exchange/useExchangeAPI'\n\nimport { useAmmpoolWs } from '@loopring-web/sdk/hooks/common/useWebsocketApi'\n\nconst DebugPage = () => {\n\n  const inputRef = useRef<HTMLInputElement>(null)\n\n  const { account, isNoAccount, apiKey } = useAccount()\n\n  const {socketData} = useAmmpoolWs(apiKey)\n\n  const { markets } = useGetMarkets()\n\n  const { exchangeInfo } = useGetExchangeInfo()\n\n  const { tokens } = useGetTokens()\n\n  const { gas } = useGetGas()\n\n  const gasPrice = gas?.data\n\n  console.log('account:', account)\n  console.log('exchangeInfo:', exchangeInfo)\n  console.log('tokens:', tokens)\n\n  const showAddr = account.accAddr ? account.accAddr : ''\n\n  return (\n    <div>\n      Debug\n      <div>account:{JSON.stringify(account)}</div>\n      <div>eddsaKey:{account.eddsaKey}</div>\n      <div>wsdata: {JSON.stringify(socketData)}</div>\n      <div>----------------------------</div>\n      <div>markets:{JSON.stringify(markets)}</div>\n      <div>----------------------------</div>\n      <div>depositAddress:{exchangeInfo?.depositAddress}</div>\n      <div>exchangeAddress:{exchangeInfo?.exchangeAddress}</div>\n      <div>----------------------------</div>\n      {/*<div>exchangeInfo:{JSON.stringify(exchangeInfo)}</div>\n      <div>----------------------------</div>*/}\n      <div>tokens:{JSON.stringify(tokens)}</div>\n      <div>----------------------------</div>\n\n      {/*{isNoAccount() && <Qrcode value={showAddr} size={300} />}*/}\n      {/*<input type='input' ref={inputRef} width=\"150px\" />*/}\n      {/*<DepositBtn onClick={deposit} />*/}\n    </div>\n  )\n\n}\n\nexport default DebugPage\n","import { TransactionTable } from '@loopring-web/component-lib'\nimport { WithTranslation, withTranslation } from 'react-i18next'\nimport { Box, Paper } from '@material-ui/core'\nimport styled from '@emotion/styled'\nimport { useGetTxs } from './hooks'\n\nconst StylePaper = styled(Box)`\n  width: 100%;\n  height: 100%;\n  flex: 1;\n  background-color: ${({ theme }) => theme.colorBase.background().default};\n  border-radius: ${({ theme }) => theme.unit}px;\n  padding: 20px;\n\n  .title {\n    font-family: Gilroy-Medium;\n    font-size: ${({ theme }) => theme.unit * 3}px;\n    line-height: 19px;\n  }\n\n  .tableWrapper {\n    margin-top: 20px;\n    border: 1px solid ${({ theme }) => theme.colorBase.borderColor};\n    border-radius: ${({ theme }) => theme.unit}px;\n    padding: 26px;\n  }\n` as typeof Paper;\n\nconst TxPanel = withTranslation('common')((rest:WithTranslation<'common'>) => {\n\n    const { txs } = useGetTxs()\n\n    const txList = txs !== undefined ? txs: []\n    \n\n    return (\n        <StylePaper>\n            <div className=\"title\">Transactions</div>\n            <div className=\"tableWrapper\">\n                <TransactionTable rawData={txList} {...rest} />\n            </div>\n        </StylePaper>\n        // <StyledTableWrapper>\n        //     <TransactionTable rawData={txList} {...{...rest}}/>\n        // </StyledTableWrapper>\n    )\n})\n\nexport default TxPanel\n","import { useState } from 'react'\n\nimport { useAmmpoolAPI, useUserAPI } from \"@loopring-web/sdk/hooks/common/useApi\"\nimport { useCustomDCEffect } from '@loopring-web/sdk/hooks/useCustomDCEffect'\nimport { useAccount } from 'stores/account/hook'\nimport { TransactionStatus, RawDataTransactionItem } from '@loopring-web/component-lib'\n\nimport { TxStatus } from '@loopring-web/sdk/defs/loopring_defs'\nimport { TransactionTradeTypes } from '@loopring-web/component-lib/components/tableList/transactionsTable/Interface';\n\nexport function useGetTxs() {\n\n    const { accountId, apiKey } = useAccount()\n\n    const userApi = useUserAPI()\n\n    const [txs, setTxs] = useState<RawDataTransactionItem[]>()\n\n    useCustomDCEffect(async() => {\n\n        if (!userApi || !accountId || !apiKey) {\n            return\n        }\n\n        const txs = await userApi.getUserTranferList({ accountId }, apiKey)\n\n        let tmpTx: RawDataTransactionItem[] = []\n\n        txs.transactions.forEach((item: any, index: number) => {\n            tmpTx.push({from: {\n                    address: item.senderAddress,\n                    env: ''\n                },\n                to: {\n                    address: item.receiverAddress,\n                    env: ''\n                },\n                amount: item.amount,\n                fee: {\n                    unit: item.feeTokenSymbol,\n                    value: item.feeAmount\n                },\n                memo: item.symbol,\n                time: item.timestamp,\n                txnHash: item.hash,\n                status: item.status,\n                token:item.token,\n                tradeType:TransactionTradeTypes.allTypes,\n            })\n        })\n\n        setTxs(tmpTx)\n\n    }, [accountId, apiKey, userApi])\n\n    return {\n        txs,\n    }\n}\n","import { useState } from 'react'\nimport { WithTranslation, withTranslation } from 'react-i18next'\nimport { PriceTag } from '@loopring-web/component-lib/static-resource'\nimport { Box, Paper, Typography } from '@material-ui/core'\nimport styled from '@emotion/styled'\nimport { AssetTitleProps, AssetTitle, AssetsTable, DoughnutChart, ScaleAreaChart, ChartType, ToggleButtonGroup } from '@loopring-web/component-lib'\nimport { useModals } from 'hooks/modal/useModals'\nimport { useGetUserBalances } from 'hooks/exchange/useUserAPI'\nimport { useGetTokens } from 'hooks/exchange/useExchangeAPI'\n\nconst StylePaper = styled(Box)`\n  width: 100%;\n  height: 100%;\n  flex: 1;\n  background-color: ${({ theme }) => theme.colorBase.background().default};\n  border-radius: ${({ theme }) => theme.unit}px;\n  padding: 20px;\n\n  .title {\n    font-family: Gilroy-Medium;\n    font-size: ${({ theme }) => theme.unit * 3}px;\n    line-height: 19px;\n  }\n\n  .tableWrapper {\n    margin-top: ${({ theme }) => theme.unit * 1.5}px;\n    border: 1px solid ${({ theme }) => theme.colorBase.borderColor};\n    border-radius: ${({ theme }) => theme.unit}px;\n    padding: 26px;\n  }\n` as typeof Paper;\n\nconst StyledChartWrapper = styled(Box)`\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    height: 225px;\n    margin-top: ${({ theme }) => theme.unit * 4}px;\n\n    >div {\n        position: relative;\n        width: calc(50% - 6px);\n        height: 100%;\n        border: 1px solid ${({ theme }) => theme.colorBase.borderColor};\n        border-radius: ${({ theme }) => theme.unit}px;\n        padding: ${({ theme }) => theme.unit * 2.5}px ${({ theme }) => theme.unit * 3}px;\n    }\n`\n\nconst StyledBtnGroupWrapper = styled(Box)`\n    position: absolute;\n    z-index: 10000;\n    right: ${({ theme }) => theme.unit * 3}px;\n    bottom: ${({ theme }) => theme.unit * 2.5}px;\n`\n\nconst toggleData = [\n    {value: '24 H', key: '24 H'},\n    {value: '1 W', key: '1 W'},\n    {value: 'ALL', key: 'ALL'},\n]\n\nconst AssetPanel = withTranslation('common')(({t,...rest}: WithTranslation) => {\n    const [chartPeriod, setChartPeriod] = useState('24 H')\n    const {\n        ShowDeposit,\n        ShowTransfer,\n        ShowWithdraw,\n        ShowResetAccount,\n    } = useModals()\n\n    const onShowDeposit = () => {\n        ShowDeposit(true)\n    }\n\n    const onShowTransfer = () => {\n        ShowTransfer(true)\n    }\n\n    const onShowWithdraw = () => {\n        ShowWithdraw(true)\n    }\n\n    const AssetTitleProps: AssetTitleProps = {\n        assetInfo: {\n            totalAsset: 123456.789,\n            priceTag: PriceTag.Dollar,\n        },\n        onShowDeposit,\n        onShowTransfer,\n        onShowWithdraw,\n    }\n\n    const { tokens: tokensAll } = useGetTokens()\n\n    const tokens = tokensAll?.tokenSymbolMap\n\n    const { balances } = useGetUserBalances(tokens)\n\n    const DoughnutData = [\n        {\n            name: 'LP Token',\n            value: 12898.0\n        },\n        {\n            name: 'LRC',\n            value: 12898.50\n        },\n        {\n            name: 'ETH',\n            value: 36547.00\n        },\n        {\n            name: 'DOT',\n            value: 23898.09\n        },\n        {\n            name: 'BTC',\n            value: 3489\n        },\n        {\n            name: 'CRV',\n            value: 180.09\n        },\n        {\n            name: 'ALICE',\n            value: 150.7\n        },\n        {\n            name: 'LINA',\n            value: 230.5\n        },\n    ]\n\n    const testTrendData:any = [\n        {\n            timeStamp: 150,\n            low: Math.random() + 1,\n            high: Math.random() + 6,\n            open: Math.random() + 3,\n            close: Math.random() + 4,\n            volume: (Math.random() + 4) * 1500,\n        },\n        {\n            timeStamp: 160,\n            low: Math.random() + 1,\n            high: Math.random() + 6,\n            open: Math.random() + 3,\n            close: Math.random() + 4,\n            volume: (Math.random() + 4) * 1500,\n        },\n        {\n            timeStamp: 170,\n            low: Math.random() + 1,\n            high: Math.random() + 6,\n            open: Math.random() + 3,\n            close: Math.random() + 4,\n            volume: (Math.random() + 4) * 1500,\n        },\n        {\n            timeStamp: 180,\n            low: Math.random() + 1,\n            high: Math.random() + 6,\n            open: Math.random() + 3,\n            close: Math.random() + 4,\n            volume: (Math.random() + 4) * 1500,\n        },\n        {\n            timeStamp: 190,\n            low: Math.random() + 1,\n            high: Math.random() + 6,\n            open: Math.random() + 3,\n            close: Math.random() + 4,\n            volume: (Math.random() + 4) * 1500,\n        },\n        {\n            timeStamp: 200,\n            low: Math.random() + 1,\n            high: Math.random() + 6,\n            open: Math.random() + 3,\n            close: Math.random() + 4,\n            volume: (Math.random() + 4) * 1500,\n        },\n        {\n            timeStamp: 210,\n            low: Math.random() + 1,\n            high: Math.random() + 6,\n            open: Math.random() + 3,\n            close: Math.random() + 4,\n            volume: (Math.random() + 4) * 1500,\n        },\n        {\n            timeStamp: 220,\n            low: Math.random() + 1,\n            high: Math.random() + 6,\n            open: Math.random() + 3,\n            close: Math.random() + 4,\n            volume: (Math.random() + 4) * 1500,\n        },\n        {\n            timeStamp: 230,\n            low: Math.random() + 1,\n            high: Math.random() + 6,\n            open: Math.random() + 3,\n            close: Math.random() + 4,\n            volume: (Math.random() + 4) * 1500,\n        },\n        {\n            timeStamp: 240,\n            low: Math.random() + 1,\n            high: Math.random() + 6,\n            open: Math.random() + 3,\n            close: Math.random() + 4,\n            volume: (Math.random() + 4) * 1500,\n        },\n    ]\n\n    return (\n        <>\n            <Box marginBottom={3}>\n                <AssetTitle  {...{\n                    t,\n                    ...rest,\n                    ...AssetTitleProps\n                }} />\n            </Box>\n            <StylePaper>\n                <div className=\"title\">{t('labelAssetsTitle')}</div>\n                <StyledChartWrapper>\n                    <div>\n                        <Typography component=\"span\" color=\"textSecondary\" variant=\"body1\">Asset Distribution</Typography>\n                        <DoughnutChart data={DoughnutData} />\n                    </div>\n                    <div>\n                        <Typography component=\"span\" color=\"textSecondary\" variant=\"body1\">Total Assets</Typography>\n                        <ScaleAreaChart type={ChartType.Trend} data={testTrendData} />\n                        <StyledBtnGroupWrapper>\n                            <ToggleButtonGroup exclusive size=\"small\" {...{...rest, t, data: toggleData, value: chartPeriod, setValue: setChartPeriod}} />\n                        </StyledBtnGroupWrapper>\n                    </div>\n                </StyledChartWrapper>\n                <div className=\"tableWrapper\">\n                    <AssetsTable rawData={[]} />\n                </div>\n            </StylePaper>\n        </>\n    )\n})\n\nexport default AssetPanel\n","import { TransactionTable, } from '@loopring-web/component-lib'\nimport { WithTranslation, withTranslation } from 'react-i18next'\nimport styled from '@emotion/styled'\nimport { Box, Paper } from '@material-ui/core'\nimport { useGetTxs } from './hooks'\n\nconst StylePaper = styled(Box)`\n  width: 100%;\n  height: 100%;\n  flex: 1;\n  background-color: ${({ theme }) => theme.colorBase.background().default};\n  border-radius: ${({ theme }) => theme.unit}px;\n  padding: 20px;\n\n  .title {\n    font-family: Gilroy-Medium;\n    font-size: ${({ theme }) => theme.unit * 3}px;\n    line-height: 19px;\n  }\n\n  .tableWrapper {\n    margin-top: 20px;\n    border: 1px solid ${({ theme }) => theme.colorBase.borderColor};\n    border-radius: ${({ theme }) => theme.unit}px;\n    padding: 26px;\n  }\n` as typeof Paper;\n\nconst TradePanel = withTranslation('common')((rest:WithTranslation<'common'>) => {\n\n    const { txs } = useGetTxs()\n\n    const txList = txs !== undefined ? txs: []\n\n    return (\n        <>\n            <StylePaper>\n                <div className=\"title\">Trades</div>\n                <div className=\"tableWrapper\">\n                    <TransactionTable rawData={txList} {...{...rest}}/>\n                </div>\n            </StylePaper>\n        </>\n    )\n})\n\nexport default TradePanel\n","import { useState } from 'react'\n\nimport { useAmmpoolAPI, useUserAPI } from \"@loopring-web/sdk/hooks/common/useApi\"\nimport { useCustomDCEffect } from '@loopring-web/sdk/hooks/useCustomDCEffect'\nimport { useAccount } from 'stores/account/hook'\nimport { TransactionStatus, RawDataTransactionItem } from '@loopring-web/component-lib'\n\nimport { TxStatus } from '@loopring-web/sdk/defs/loopring_defs'\nimport { TransactionTradeTypes } from '@loopring-web/component-lib/components/tableList/transactionsTable/Interface';\n\n/*\n    {\n        from: {\n            address: '0x5e8cxxxxxe741',\n            env: 'Ethereum'\n        },\n        to: 'My Loopring',\n        amount: 25987.09324,\n        fee: {\n            unit: 'ETH',\n            value: 0.0993\n        },\n        memo: 'NoteNoteNoteNoteNoteNoteNote',\n        time: 3,\n        txnHash: '0x2b21xxxxxxx02',\n        status: TransactionStatus.success\n    },\n */\n\nexport function useGetTxs() {\n\n    const { accountId, apiKey } = useAccount()\n\n    const userApi = useUserAPI()\n\n    const [txs, setTxs] = useState<RawDataTransactionItem[]>()\n\n    useCustomDCEffect(async() => {\n\n        if (!userApi || !accountId || !apiKey) {\n            return\n        }\n\n        const txs = await userApi.getUserTranferList({ accountId }, apiKey)\n\n        let tmpTx: RawDataTransactionItem[] = []\n\n        txs.transactions.forEach((item: any, index: number) => {\n            tmpTx.push({from: {\n                    address: item.senderAddress,\n                    env: ''\n                },\n                to: {\n                    address: item.receiverAddress,\n                    env: ''\n                },\n                amount: item.amount,\n                fee: {\n                    unit: item.feeTokenSymbol,\n                    value: item.feeAmount\n                },\n                memo: item.symbol,\n                time: item.timestamp,\n                txnHash: item.hash,\n                status: item.status,\n                token:item.token,\n                tradeType:TransactionTradeTypes.allTypes,\n            })\n        })\n\n        setTxs(tmpTx)\n\n    }, [accountId, apiKey, userApi])\n\n    return {\n        txs,\n    }\n}\n","import { OrderHistoryTable, } from '@loopring-web/component-lib'\nimport { WithTranslation, withTranslation } from 'react-i18next'\nimport { Box, Paper } from '@material-ui/core'\nimport styled from '@emotion/styled'\n\nconst rawDataOrderHistory: any[] = [\n    ['Sell', [{type: 'out', key: 'ETH', value: 25}, {type: 'in', key: 'LRC', value: 100}], 0.12, [{\n        type: 'out',\n        key: 'ETH',\n        value: 25\n    }, {type: 'in', key: 'LRC', value: 100}], 0.0054, 3, 'Filled'],\n    ['Buy', [{type: 'out', key: 'ETH', value: 25}, {type: 'in', key: 'LRC', value: 100}], 0.12, [{\n        type: 'out',\n        key: 'ETH',\n        value: 25\n    }, {type: 'in', key: 'LRC', value: 100}], 0.0054, 3, 'Filled'],\n    ['Buy', [{type: 'out', key: 'ETH', value: 25}, {type: 'in', key: 'LRC', value: 100}], 0.12, [{\n        type: 'out',\n        key: 'ETH',\n        value: 25\n    }, {type: 'in', key: 'LRC', value: 100}], 0.0054, 3, 'Cancelled'],\n    ['Sell', [{type: 'out', key: 'ETH', value: 25}, {type: 'in', key: 'LRC', value: 100}], 0.12, [{\n        type: 'out',\n        key: 'ETH',\n        value: 25\n    }, {type: 'in', key: 'LRC', value: 100}], 0.0054, 3, 'Filled'],\n    ['Sell', [{type: 'out', key: 'ETH', value: 25}, {type: 'in', key: 'LRC', value: 100}], 0.12, [{\n        type: 'out',\n        key: 'ETH',\n        value: 25\n    }, {type: 'in', key: 'LRC', value: 100}], 0.0054, 3, 'Cancelled'],\n]\n\nconst StylePaper = styled(Box)`\n  width: 100%;\n  height: 100%;\n  flex: 1;\n  background-color: ${({ theme }) => theme.colorBase.background().default};\n  border-radius: ${({ theme }) => theme.unit}px;\n  padding: 20px;\n\n  .title {\n    font-family: Gilroy-Medium;\n    font-size: ${({ theme }) => theme.unit * 3}px;\n    line-height: 19px;\n  }\n\n  .tableWrapper {\n    margin-top: 20px;\n    border: 1px solid ${({ theme }) => theme.colorBase.borderColor};\n    border-radius: ${({ theme }) => theme.unit}px;\n    padding: 26px;\n  }\n` as typeof Paper;\n\nconst OrderPanel = withTranslation('common')((rest: WithTranslation) => {\n\n    return (\n        <>\n            <StylePaper>\n                <div className=\"title\">Order History</div>\n                <div className=\"tableWrapper\">\n                    <OrderHistoryTable rawData={[]} {...{...rest}}/>\n                </div>\n            </StylePaper>\n        </>\n    )\n})\n\nexport default OrderPanel\n","import { useRouteMatch } from 'react-router'\n\nimport { Box, Paper } from '@material-ui/core'\nimport {\n    SubMenu,\n    SubMenuList as BasicSubMenuList,\n} from '@loopring-web/component-lib'\nimport { withTranslation } from 'react-i18next'\nimport styled from '@emotion/styled'\nimport { subMenuLayer2 } from '@loopring-web/component-lib/src/static-resource'\n\nimport TxPanel from './TxPanel'\nimport AssetPanel from './AssetPanel'\nimport TradePanel from './TradePanel'\nimport OrderPanel from './OrderPanel'\n\nexport const subMenu = subMenuLayer2\n\nconst SubMenuList = withTranslation(['layout','common'], { withRef: true })(BasicSubMenuList);\nexport const Layer2Page = () => {\n\n    let match: any = useRouteMatch(\"/layer2/:item\")\n\n    const selected = match?.params.item ?? 'assets'\n    return (\n        <>\n            <Box width={'200px'} display={'flex'} justifyContent={'stretch'}>\n                <SubMenu>\n                    <SubMenuList selected={selected} subMenu={subMenu as any} />\n                </SubMenu>\n            </Box>\n            <Box minHeight={420} display={'flex'} alignItems={'stretch'} flexDirection=\"row\" marginTop={0} flex={1}>\n\n                <Box flex={1} marginLeft={3} display={'flex'} flexDirection={'column'} >\n                    {selected === 'assets' && <AssetPanel />}\n                    {selected === 'transactions' && <TxPanel />}\n                    {selected === 'trades' && <TradePanel />}\n                    {selected === 'orders' && <OrderPanel />}\n                </Box>\n            </Box>\n        </>\n    )\n\n}\n","import {\n  HashRouter as Router,\n  Switch,\n  Route,\n  useParams,\n  useRouteMatch,\n  Redirect,\n} from 'react-router-dom'\n\nimport Header from 'layouts/header'\nimport Footer from 'layouts/footer'\n\nimport QuotePage from 'pages/QuotePage'\nimport SwapPage from 'pages/SwapPage'\n\n\nimport DebugPage from 'pages/DebugPage'\n\nimport Container from '@material-ui/core/Container'\nimport { Box } from '@material-ui/core'\nimport { DevWrapper } from '../provider/'\nimport { Layer2Page } from '../pages/Layer2Page'\n\nconst RouterView = () => {\n  // const SwapPageWrap = ()=> <SwapPage />\n  // const QuotePageWrap = ()=> <SwapPage />\n  return <Router>\n        <Header />\n\n        {/*<Box style={{marginTop: `var(--header-height)`}} flex={1} display={'flex'}>*/}\n          <Container maxWidth=\"lg\" >\n            {/*style={{height: '100%' }}*/}\n            <Box flex={1} display={'flex'} alignItems={'stretch'} flexDirection={'row'} marginTop={3} minWidth={800}>\n              <Switch>\n                <Route exact component={SwapPage}  path='/' />\n                <Route exact component={QuotePage}  path='/markets' />\n                <Route exact component={SwapPage}  path='/trading/lite' />\n\n                <Route exact component={Layer2Page}  path='/layer2' />\n                <Route exact component={Layer2Page}  path='/layer2/assets' />\n                <Route exact component={Layer2Page}  path='/layer2/transactions' />\n                <Route exact component={Layer2Page}  path='/layer2/trades' />\n                <Route exact component={Layer2Page}  path='/layer2/orders' />\n\n                <DevWrapper>\n                  <Route exact path='/debug'>\n                    <DebugPage />\n                  </Route>\n                </DevWrapper>\n\n              </Switch>\n            </Box>\n          </Container>\n        {/*</Box>*/}\n\n      </Router>\n}\n\nexport default RouterView\n","export enum CONSTANTS {\n    Handler = 'handler',\n    AccountId = 'account_id',\n    Account = 'account',\n    Apikey = 'apikey',\n    Eddsakey = 'eddsakey',\n    ActiveTime = 'active_time',\n    AmmOrder = 'amm_order',\n    HardwareAddresses = 'hardware_addresses',\n}\n\nconst SESSION_TIMEOUT_SECONDS = 600\n\nexport class UserStorage {\n\n    public static getHandler() {\n        const rawHandler = sessionStorage.getItem(CONSTANTS.Handler)\n        try {\n            if (rawHandler !== undefined && rawHandler !== null)\n                return parseInt(rawHandler)\n        } catch (err) {\n        }\n        return undefined\n    }\n\n    public static setHandler(handler: any) {\n        sessionStorage.setItem(CONSTANTS.Handler, handler)\n    }\n\n    public static clearHandler() {\n        sessionStorage.removeItem(CONSTANTS.Handler)\n    }\n\n    public static checkTimeout(reset: boolean = false) : boolean {\n        let dateTimeStr = localStorage.getItem(CONSTANTS.ActiveTime)\n        let now = new Date().getTime()\n\n        if (dateTimeStr !== null && !reset) {\n            let tmpDt = new Date(parseInt(dateTimeStr))\n\n            // console.log(`now:${now} dateTimeStr:${dateTimeStr} delta:${now - tmpDt.getTime()}`)\n\n            if(now - tmpDt.getTime() > SESSION_TIMEOUT_SECONDS * 1000) {\n                console.log(`TIMEOUT! now:${now} dateTimeStr:${dateTimeStr} delta:${now - tmpDt.getTime()}`)\n                sessionStorage.clear()\n                localStorage.setItem(CONSTANTS.ActiveTime, now.toString())\n                return true\n            }\n        } else {\n\n            if (reset) {\n                console.log('force reset!!')\n            }\n\n            localStorage.setItem(CONSTANTS.ActiveTime, now.toString())\n        }\n\n        return false\n    }\n\n\n    public static getAccountId() {\n        const rawId = sessionStorage.getItem(CONSTANTS.AccountId)\n        try {\n            if (rawId)\n                return parseInt(rawId)\n        } catch (err) {\n        }\n        return undefined\n    }\n\n    public static setAccountId(accountId: number) {\n        sessionStorage.setItem(CONSTANTS.AccountId, accountId.toString())\n    }\n\n    public static getAccount() {\n        return sessionStorage.getItem(CONSTANTS.Account)\n    }\n\n    public static setAccount(account: string) {\n        sessionStorage.setItem(CONSTANTS.Account, account)\n    }\n\n    public static getApikey() {\n        return sessionStorage.getItem(CONSTANTS.Apikey)\n    }\n\n    public static setApikey(apikey: string) {\n        sessionStorage.setItem(CONSTANTS.Apikey, apikey)\n    }\n\n    public static getEddsakey() {\n        return sessionStorage.getItem(CONSTANTS.Eddsakey)\n    }\n\n    public static setEddsakey(eddsakey: string) {\n        sessionStorage.setItem(CONSTANTS.Eddsakey, eddsakey)\n    }\n\n    public static getAmmOrder(): string {\n        var orderHash = localStorage.getItem(CONSTANTS.AmmOrder)\n        return orderHash ? orderHash : ''\n    }\n\n    public static setAmmOrder(orderHash: string) {\n        localStorage.setItem(CONSTANTS.AmmOrder, orderHash)\n    }\n\n    public static clearAmmOrder() {\n        localStorage.removeItem(CONSTANTS.AmmOrder)\n    }\n\n    public static isHardwareAddress(address: string) {\n        let current = localStorage.getItem(CONSTANTS.HardwareAddresses)\n        if (current) {\n            if (current.includes(address.toLowerCase())) {\n                return true\n            }\n        }\n        return false\n    }\n\n    public static saveHardwareAddress(address: string) {\n        let current = localStorage.getItem(CONSTANTS.HardwareAddresses);\n        if (current) {\n            if (current.includes(address.toLowerCase()) !== true) {\n                let newValue = current + ',' + address.toLowerCase();\n                localStorage.setItem(CONSTANTS.HardwareAddresses, newValue);\n            }\n        } else {\n            localStorage.setItem(CONSTANTS.HardwareAddresses, address.toLowerCase());\n        }\n\n    }\n}\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit'\n\nimport { AccountInfo } from '@loopring-web/sdk/defs/account_defs'\nimport { ConnectorNames } from '@loopring-web/sdk/defs/web3_defs'\nimport { Lv2Account, } from 'defs/account_defs'\nimport { AccountStatus } from 'state_machine/account_machine_spec'\nimport { UserStorage } from 'storage'\n\n\nconst initialState = () => {\n  const defaultAccId = process.env.REACT_APP_TEST_ACCOUND_ID ? process.env.REACT_APP_TEST_ACCOUND_ID : UserStorage.getAccountId()\n  const defaultApiKey = process.env.REACT_APP_TEST_API_KEY ? process.env.REACT_APP_TEST_API_KEY : UserStorage.getApikey()\n  const defaultOwner = process.env.REACT_APP_TEST_OWNER ? process.env.REACT_APP_TEST_OWNER : UserStorage.getAccount()\n  const defaultEddsaKey = process.env.REACT_APP_TEST_EDDSA_KEY ? process.env.REACT_APP_TEST_EDDSA_KEY : UserStorage.getEddsakey()\n\n  console.log('defaultApiKey:', JSON.stringify(defaultApiKey))\n  const defaultStatus = AccountStatus.UNCONNNECTED\n  return {\n    accAddr: defaultOwner,\n    status: defaultStatus,\n    accountId: defaultAccId,\n    publicKey: {},\n    nonce: 0,\n    isContractAddress: false,\n    apiKey: defaultApiKey,\n    eddsaKey: defaultEddsaKey,\n    connectName: ConnectorNames.Unknown,\n    connectNameTemp: ConnectorNames.Unknown,\n  } as Lv2Account\n}\n\nconst accountSlice = createSlice({\n  name: 'account',\n  initialState: initialState(),\n  reducers: {\n    reset(state) {\n      const initState = initialState()\n      console.log('!!! reset account!', initState)\n      Object.assign(state, initState)\n    },\n    setAccAddr(state, action: PayloadAction<string>) {\n      state.accAddr = action.payload\n      // UserStorage.setAccount(action.payload)\n    },\n    setAccountInfo(state, action: PayloadAction<AccountInfo>) {\n      state.accAddr = action.payload.owner\n      state.accountId = action.payload.accountId\n      state.nonce = action.payload.nonce\n      state.publicKey = action.payload.publicKey\n\n      // UserStorage.setAccount(state.accAddr)\n      // UserStorage.setAccountId(state.accountId)\n      \n    },\n    setApikey(state, action: PayloadAction<string>) {\n      state.apiKey = action.payload\n      // UserStorage.setApikey(action.payload)\n    },\n    setAccountStatus(state, action: PayloadAction<AccountStatus>) {\n      state.status = action.payload\n    },\n    setEddsaKey(state, action: PayloadAction<any>) {\n      state.eddsaKey = action.payload\n      // UserStorage.setEddsakey(action.payload)\n    },\n    setConnectName(state, action: PayloadAction<ConnectorNames>) {\n      state.connectName = action.payload\n    },\n    setConnectNameTemp(state, action: PayloadAction<ConnectorNames>) {\n      state.connectNameTemp = action.payload\n    },\n    setIsContractAddress(state, action: PayloadAction<boolean>) {\n      state.isContractAddress = action.payload\n    },\n  },\n})\n\nexport const { reset, setAccAddr, setApikey, setConnectName, setConnectNameTemp, setAccountInfo, setAccountStatus, setEddsaKey, setIsContractAddress, } = accountSlice.actions\nexport default accountSlice\n","import { Provider } from 'react-redux'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nimport { createWeb3ReactRoot, Web3ReactProvider } from '@web3-react/core'\nimport store from 'stores'\n\nimport { getLibrary } from '@loopring-web/sdk/utils/web3_tools'\nimport { NetworkContextName } from '@loopring-web/sdk/defs/web3_defs'\n\nimport { getTheme, i18n, provider, ProviderComposer } from \"@loopring-web/component-lib/static-resource\"\nimport { ThemeProvider as MuThemeProvider } from '@material-ui/core'\nimport LocalizationProvider from '@material-ui/pickers/LocalizationProvider'\n\nimport MomentUtils from '@material-ui/lab/AdapterMoment'\n\nimport { ThemeProvider } from \"@emotion/react\"\n\nimport { I18nextProvider } from \"react-i18next\"\n\n\n\nconst Web3ProviderNetwork = createWeb3ReactRoot(NetworkContextName)\nconst providers = [\n    provider(LocalizationProvider as any, {dateAdapter: MomentUtils}),\n    provider(I18nextProvider as any, {i18n:i18n}),\n    provider(MuThemeProvider as any, {theme: getTheme('dark')}),\n    provider(ThemeProvider as any, {theme: getTheme('dark')}),\n    provider(Provider as any, {store}),\n]\n\nReactDOM.render(\n// @ts-ignore\n    <ProviderComposer providers={providers}>\n        <Web3ReactProvider getLibrary={getLibrary}>\n            <Web3ProviderNetwork getLibrary={getLibrary}>\n                <App/>\n            </Web3ProviderNetwork>\n        </Web3ReactProvider>\n    </ProviderComposer>,\n    document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\nif (process.env.NODE_ENV !== 'production') {\n    reportWebVitals(console.log)\n}\n","import { createAction } from '@reduxjs/toolkit'\n\n// fired once when the app reloads but before the app renders\n// allows any updates to be applied to store data loaded from localStorage\nexport const updateVersion = createAction<void>('global/updateVersion')\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit'\nimport { SystemStatus } from 'defs/common_defs'\n\nexport interface SystemInfo {\n  status: SystemStatus\n}\n\nconst initialState = {\n  status: SystemStatus.NORMAL, \n} as SystemInfo\n\nconst systemSlice = createSlice({\n  name: 'system',\n  initialState,\n  reducers: {\n    setSystemStatus(state, action: PayloadAction<any>) {\n      state.status = action.payload\n    },\n  },\n})\n\nexport const { setSystemStatus, } = systemSlice.actions\nexport default systemSlice\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit'\n\nconst now = () => new Date().getTime()\n\nexport interface SerializableTransactionReceipt {\n  to: string\n  from: string\n  contractAddress: string\n  transactionIndex: number\n  blockHash: string\n  transactionHash: string\n  blockNumber: number\n  status?: number\n}\n\nexport interface TransactionDetails {\n  hash: string\n  approval?: { tokenAddress: string; spender: string }\n  summary?: string\n  claim?: { recipient: string }\n  receipt?: SerializableTransactionReceipt\n  lastCheckedBlockNumber?: number\n  addedTime: number\n  confirmedTime?: number\n  from: string\n}\n\nexport interface TransactionState {\n  [chainId: number]: {\n    [txHash: string]: TransactionDetails\n  }\n}\n\nexport const initialState: TransactionState = {}\n\nconst transactionsSlice = createSlice({\n  name: 'transactions',\n  initialState,\n  reducers: {\n    reset(state) {\n      Object.assign(state, initialState)\n    },\n    addTransaction(state: TransactionState, action: PayloadAction<{\n      chainId: number, from: string,\n      hash: string, approval: any, summary: string, claim: any\n    }>) {\n      const { chainId, from, hash, approval, summary, claim} = action.payload\n      if (state[chainId]?.[hash]) {\n        throw Error('the existing TX can\\'t be added again')\n      }\n\n      const txs = state[chainId] ?? {}\n      txs[hash] = {\n        hash, \n        approval, \n        summary, \n        claim, \n        from,\n        addedTime: now(), \n      }\n      // state[chainId] = txs\n    },\n    clearAllTransactions(state: TransactionState, action: PayloadAction<number>) {\n      const chainId = action.payload\n      if (!state[chainId]) return\n      state[chainId] = {}\n    },\n    checkedTransaction(state: TransactionState, action: PayloadAction<{chainId: number,\n    hash: string, blockNumber: number}>) {\n      const { chainId, hash, blockNumber} = action.payload\n      const tx = state[chainId]?.[hash]\n      if (!tx) {\n        return\n      }\n      if (!tx.lastCheckedBlockNumber) {\n        tx.lastCheckedBlockNumber = blockNumber\n      } else {\n        tx.lastCheckedBlockNumber = Math.max(blockNumber, tx.lastCheckedBlockNumber)\n      }\n      // state[chainId][hash] = tx\n    },\n    finalizeTransaction(state: TransactionState, action: PayloadAction<{\n      hash: string, chainId: number, receipt: any\n    }>) {\n      const { chainId, hash, receipt } = action.payload\n      \n      const tx = state[chainId]?.[hash]\n      if (!tx) {\n        return\n      }\n      tx.receipt = receipt\n      tx.confirmedTime = now()\n    }\n  }\n}\n)\n\nexport const { reset, addTransaction, clearAllTransactions, checkedTransaction, finalizeTransaction, } = transactionsSlice.actions\nexport default transactionsSlice\n","import { configureStore, combineReducers, getDefaultMiddleware } from '@reduxjs/toolkit'\n\nimport { useDispatch } from 'react-redux'\nimport { save, load } from 'redux-localstorage-simple'\n\nimport createSagaMiddleware from 'redux-saga'\n\n// We'll use redux-logger just as an example of adding another middleware\nimport logger from 'redux-logger'\n\n// And use redux-batch as an example of adding enhancers\nimport { reduxBatch } from '@manaflair/redux-batch'\nimport { updateVersion } from './global/actions'\n\nimport accountSlice from './account/reducer'\nimport systemSlice from './system/reducer'\nimport tradingSlice from './trading/reducer'\nimport transactionlice from './transactions/reducer'\n\nimport { modalsSlice, setLanguage, settingsSlice } from '@loopring-web/component-lib';\n\nconst sagaMiddleware = createSagaMiddleware()\n\nconst reducer = combineReducers({\n  account: accountSlice.reducer,\n  settings: settingsSlice.reducer,\n  system: systemSlice.reducer,\n  trading: tradingSlice.reducer,\n  transactions: transactionlice.reducer,\n  modals: modalsSlice.reducer\n})\n\n//\n\nconst PERSISTED_KEYS: string[] = ['settings']\n\nconst store = configureStore({\n  reducer,\n  // middleware: (getDefaultMiddleware) => getDefaultMiddleware().concat(logger),\n  middleware: [...getDefaultMiddleware({ thunk: false }), save({ states: PERSISTED_KEYS }), sagaMiddleware, ],\n  // middleware: [...getDefaultMiddleware({ thunk: true }), ],\n  devTools: process.env.NODE_ENV !== 'production',\n  enhancers: [reduxBatch],\n  preloadedState: load({ states: PERSISTED_KEYS })\n})\n\nstore.dispatch(updateVersion())\nstore.dispatch(setLanguage(store.getState().settings.language))\n// The store has been created with these options:\n// - The slice reducers were automatically passed to combineReducers()\n// - redux-thunk and redux-logger were added as middleware\n// - The Redux DevTools Extension is disabled for production\n// - The middleware, batch, and devtools enhancers were composed together\n\nexport type AppDispatch = typeof store.dispatch\nexport const useAppDispatch = () => useDispatch<AppDispatch>()\n\nexport type RootState = ReturnType<typeof reducer>\n\nexport default store\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit'\n\nimport { ExchangeInfo, TokenInfo } from '@loopring-web/sdk/defs/exchange_defs'\n\nexport enum TradingInterval {\n  min1 = '1min',\n  min5 = '5min',\n  min15 = '15min',\n  min30 = '30min',\n  hr1 = '1hr',\n  hr2 = '2hr',\n  hr4 = '4hr',\n  hr12 = '12hr',\n  d1 = '1d',\n  w1 = '1w',\n}\n\nexport interface TradingInfo {\n  symbol: string\n  symbol_base: string\n  symbol_quote: string\n  interval: TradingInterval\n  markets: any\n  tokens: {[key: string]: [value: TokenInfo]}\n  exchangeInfo?: ExchangeInfo\n  wsApiKey: string\n}\n\nconst getBaseQuote = (symbol: string) => {\n  const ind = symbol.indexOf('-')\n  const symbol_base = symbol.substr(ind + 1)\n  const symbol_quote = symbol.substr(0, ind)\n  return {symbol_base, symbol_quote}\n}\n\nconst defaultSymbol = process.env.REACT_APP_TEST_SYMBOL ? process.env.REACT_APP_TEST_SYMBOL : 'LRC-USDT'\nconst defaultInterval = process.env.REACT_APP_TEST_INTERVAL ? process.env.REACT_APP_TEST_INTERVAL : TradingInterval.hr1\n\nconst { symbol_base, symbol_quote } = getBaseQuote(defaultSymbol)\n\nconst initialState = {\n  symbol: defaultSymbol,\n  symbol_base: symbol_base,\n  symbol_quote: symbol_quote,\n  interval: defaultInterval,\n  markets: [],\n  tokens: {},\n  refreshRate: 1000,\n  refreshRateSlow: 3000,\n  wsApiKey: '',\n} as TradingInfo\n\nconst tradingSlice = createSlice({\n  name: 'trading',\n  initialState,\n  reducers: {\n    changeSymbol(state, action: PayloadAction<any>) {\n      state.symbol = action.payload\n      const { symbol_base, symbol_quote } = getBaseQuote(state.symbol)\n      state.symbol_base = symbol_base\n      state.symbol_quote = symbol_quote\n    },\n    changeTradingInterval(state, action: PayloadAction<any>) {\n      state.interval = action.payload\n    },\n    setWsApiKey(state, action: PayloadAction<string>) {\n      state.wsApiKey = action.payload\n    },\n    setMarkets(state, action: PayloadAction<any>) {\n      state.markets = action.payload\n    },\n    setTokens(state, action: PayloadAction<{}>) {\n      state.tokens = action.payload\n    },\n    setExchangeInfo(state, action: PayloadAction<ExchangeInfo>) {\n      state.exchangeInfo = action.payload\n    },\n  },\n})\n\nexport const { changeSymbol, changeTradingInterval, setWsApiKey, setMarkets, setTokens, setExchangeInfo, } = tradingSlice.actions\nexport default tradingSlice\n","export enum Theme {\n    dark = 'dark',\n    light = 'light',\n}\n\nexport enum LangType {\n    en = 'en_US',\n    cn = 'zh_CN',\n}\n\nexport enum SystemStatus {\n    NORMAL,\n    ERROR,\n    UNKNOWN,\n}\n\nexport enum MODAL_TYPE {\n    UNKNOWN,\n    LOADING,\n    WALLET,\n}\n","import { useExchangeAPI } from '@loopring-web/sdk/hooks/common/useApi'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { useCustomDCEffect } from '@loopring-web/sdk/hooks/useCustomDCEffect'\n\n// import { useAuthNoKeyApiInstance, useAuthWsApiInstance, } from '@loopring-web/sdk/hooks/common/useApi'\n\nimport { RootState } from 'stores'\n\nimport { setMarkets, setExchangeInfo, setTokens, } from 'stores/trading/reducer'\n\nexport function useGetTradingInfo() {\n    const tradingInfo = useSelector((state: RootState) => state.trading)\n    return {\n        tradingInfo,\n        exchangeInfo: tradingInfo.exchangeInfo,\n        /*\n        markets: tradingInfo.markets,\n        tokens: tradingInfo.tokens,\n        */\n    }\n}\n\nexport function useUpdateExchangeMarkets() {\n    const dispatch = useDispatch()\n    const api = useExchangeAPI()\n\n    useCustomDCEffect(() => {\n\n        if (!api) {\n            return\n        }\n\n        api.getMarkets().then((response: any) => {\n    \n            dispatch(setMarkets(response))\n    \n        }, (reject: any) => {\n            console.log(reject)\n        })\n\n    }, [api])\n\n}\n\nexport function useUpdateExchangeInfo() {\n\n    const dispatch = useDispatch()\n    const api = useExchangeAPI()\n\n    useCustomDCEffect(() => {\n\n        if (!api) {\n            return\n        }\n\n        api.getExchangeInfo().then((response: any) => {\n            dispatch(setExchangeInfo(response.exchangeInfo))\n        }, (reject: any) => {\n            console.log(reject)\n        })\n\n    }, [api])\n\n}\n\nexport function useUpdateTokens() {\n\n    const dispatch = useDispatch()\n    const api = useExchangeAPI()\n\n    useCustomDCEffect(() => {\n\n        if (!api) {\n            return\n        }\n\n        api.getTokens().then((response: any) => {\n            console.log('useUpdateTokens response:', response)\n            dispatch(setTokens(response.tokenSymbolMap))\n        }, (reject: any) => {\n            console.log(reject)\n        })\n\n    }, [api])\n\n}\n","import { debounce } from 'lodash'\nimport React, { useEffect } from 'react'\nimport { UserStorage } from 'storage'\n\nimport { useCheckAccStatus } from 'stores/account/hook'\n\nimport { useUpdateExchangeInfo, useUpdateExchangeMarkets, useUpdateTokens, } from 'stores/trading/hook'\n\nenum WindowEvent {\n  Click = 'click',\n  Scroll = 'scroll',\n  Mouseover = 'mouseover',\n}\n\nconst events = [WindowEvent.Click, WindowEvent.Scroll]\n\nconst forceReset = debounce(() => { UserStorage.checkTimeout(true) }, 100)\n\nexport const GlobalProvider = ({ children }: { children: React.ReactNode }) => {\n\n  useUpdateExchangeInfo()\n\n  // useUpdateExchangeMarkets()\n  // useUpdateTokens()\n\n  useCheckAccStatus()\n\n  useEffect(() => {\n\n    events.forEach((event: string) => {\n      document.addEventListener(event, forceReset)\n    })\n\n    return () => {\n\n      events.forEach((event: string) => {\n        document.removeEventListener(event, forceReset)\n      })\n    }\n\n  }, [])\n\n  return (\n    <React.Fragment>\n      { children}\n    </React.Fragment>\n  )\n\n}\n","import React, { useState, useEffect } from 'react'\nimport styled from '@emotion/styled/macro'\nimport { useTranslation } from 'react-i18next'\n\nimport { useWeb3React } from '@web3-react/core'\n\nimport { network } from '@loopring-web/sdk/networks/web3_connectors'\n\nimport { useEagerConnect, useInactiveListener } from '@loopring-web/sdk/hooks/web3/useWeb3'\nimport { reset, setAccountStatus } from 'stores/account/reducer'\n\nimport { ChainId, NetworkContextName } from '@loopring-web/sdk/defs/web3_defs'\n\n// import Loader from 'components/modals/Loader'\nimport { useDispatch } from 'react-redux'\nimport { AccountStatus } from 'state_machine/account_machine_spec'\n\nconst MessageWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  height: 20rem;\n`\n\nconst Message = styled.h2`\n  color: ${({ theme }) => theme.colorBase.error};\n`\n\nexport function Web3ReactManager({ children }: { children: JSX.Element }) {\n  const { t } = useTranslation()\n  const { active } = useWeb3React()\n  const { active: networkActive, error: networkError, activate: activateNetwork } = useWeb3React(NetworkContextName)\n\n  // try to eagerly connect to an injected provider, if it exists and has granted access already\n  const triedEager = useEagerConnect()\n\n  // after eagerly trying injected, if the network connect ever isn't active or in an error state, activate itd\n  useEffect(() => {\n    if (triedEager && !networkActive && !networkError && !active) {\n      activateNetwork(network)\n    }\n  }, [triedEager, networkActive, networkError, activateNetwork, active])\n\n  // when there's no account connected, react to logins (broadly speaking) on the injected provider, if it exists\n  \n  const dispatch = useDispatch()\n\n  const onReConnectInjected = () => {\n    console.log('onReConnectInjected')\n    dispatch(reset())\n    dispatch(setAccountStatus(AccountStatus.UNCONNNECTED))\n  }\n  \n  useInactiveListener(onReConnectInjected, !triedEager)\n\n  // handle delayed loader state\n  const [showLoader, setShowLoader] = useState(false)\n  useEffect(() => {\n    const timeout = setTimeout(() => {\n      setShowLoader(true)\n    }, 600)\n\n    return () => {\n      clearTimeout(timeout)\n    }\n  }, [])\n\n  // on page load, do nothing until we've tried to connect to the injected connector\n  if (!triedEager) {\n    return null\n  }\n\n  // if the account context isn't active, and there's an error on the network context, it's an irrecoverable error\n  if (!active && networkError) {\n    return (\n      <MessageWrapper>\n        <Message>{t('unknownError')}</Message>\n      </MessageWrapper>\n    )\n  }\n\n  // if neither context is active, spin\n  if (!active && !networkActive) {\n    return showLoader ? (\n      <MessageWrapper>\n        {/*<Loader />*/}\n      </MessageWrapper>\n    ) : null\n  }\n\n  return children\n}\n","import React from 'react'\n\nexport const DevWrapper = ({ children }: { children: React.ReactNode }) => {\n\n  return (\n    <React.Fragment>\n      {\n        process.env.NODE_ENV !== 'production' ? (\n          <>\n          {children}\n          </>\n        ) : null\n      }\n    </React.Fragment>\n  )\n\n}\n\n","export enum AccountStatus {\n    UNKNOWN = 'UNKNOWN',\n    UNCONNNECTED = 'UNCONNNECTED',\n    CONNECTED = 'CONNECTED',\n    NOACCOUNT = 'NOACCOUNT',\n    DEPOSITING = 'DEPOSITING',\n    DEPOSIT_TO_CONFIREM = 'DEPOSIT_TO_CONFIREM',\n    UNACTIVATED = 'UNACTIVATED',\n    ARPROVING = 'ARPROVING',\n    APPROV_TO_CONFIRM = 'APPROV_TO_CONFIRM',\n    LOCKED = 'LOCKED',\n    ACTIVATED = 'ACTIVATED',\n}\n\nexport enum StatusChangeEvent {\n    Reset = 'Reset',\n    Connecting = 'Connecting',\n    HasPubkey = 'HasPubkey',\n    HasNoPubkey = 'HasNoPubkey',\n    ErrorResponse = 'ErrorResponse',\n    FinishDeposit = 'FinishDeposit',\n    DepositConfirmed = 'DepositConfirmed',\n    IsSmartWallet = 'IsSmartWallet',\n    ApproveSubmit = 'ApproveSubmit',\n    ApproveConfirmed = 'ApproveConfirmed',\n    Unlock = 'Unlock',\n    Lock = 'Lock',\n}\n\nexport const AccountMachineSpec = (initialState: AccountStatus = AccountStatus.UNCONNNECTED) => \n{\n    return {\n        initialState: initialState,\n        states: {\n            UNCONNNECTED: {\n                Connecting: AccountStatus.CONNECTED,\n                Reset: AccountStatus.UNCONNNECTED,\n            },\n            CONNECTED: {\n                HasPubkey: AccountStatus.LOCKED,\n                HasNoPubkey: AccountStatus.UNACTIVATED,\n                ErrorResponse: AccountStatus.NOACCOUNT,\n                Reset: AccountStatus.UNCONNNECTED,\n            },\n            NOACCOUNT: {\n                ErrorResponse: AccountStatus.NOACCOUNT,\n                Reset: AccountStatus.UNCONNNECTED,\n            },\n            DEPOSITING: {\n                FinishDeposit: AccountStatus.DEPOSIT_TO_CONFIREM,\n                Reset: AccountStatus.UNCONNNECTED,\n            },\n            DEPOSIT_TO_CONFIREM: {\n                HasPubkey: AccountStatus.ACTIVATED,\n                HasNoPubkey: AccountStatus.DEPOSIT_TO_CONFIREM,\n                ErrorResponse: AccountStatus.DEPOSIT_TO_CONFIREM,\n                Reset: AccountStatus.UNCONNNECTED,\n            },\n            UNACTIVATED: {\n                IsSmartWallet: AccountStatus.ARPROVING,\n                Reset: AccountStatus.UNCONNNECTED,\n            },\n            ARPROVING: {\n                ApproveSubmit: AccountStatus.APPROV_TO_CONFIRM,\n                Reset: AccountStatus.UNCONNNECTED,\n            },\n            APPROV_TO_CONFIRM: {\n                ApproveConfirmed: AccountStatus.ACTIVATED,\n                Reset: AccountStatus.UNCONNNECTED,\n            },\n            LOCKED: {\n                Unlock: AccountStatus.ACTIVATED,\n                Reset: AccountStatus.UNCONNNECTED,\n            },\n            ACTIVATED: {\n                Lock: AccountStatus.LOCKED,\n                Reset: AccountStatus.UNCONNNECTED,\n            },\n        },\n    }\n}\n","import { ConnectorNames } from '@loopring-web/sdk/defs/web3_defs'\n\nimport {\n    injected,\n    network,\n    walletconnect,\n    walletlink,\n    ledger,\n    trezor,\n    authereum,\n} from '@loopring-web/sdk/networks/web3_connectors'\n\nexport const connectorsByName: { [connectorName in ConnectorNames]: any } = {\n    [ConnectorNames.Unknown]: undefined,\n    [ConnectorNames.Injected]: injected,\n    [ConnectorNames.Network]: network,\n    [ConnectorNames.WalletConnect]: walletconnect,\n    [ConnectorNames.WalletLink]: walletlink,\n    [ConnectorNames.Ledger]: ledger,\n    [ConnectorNames.Trezor]: trezor,\n    [ConnectorNames.Authereum]: authereum,\n}\n","import { useState, useCallback, useMemo, useRef, } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\n\nimport { useCustomDCEffect } from '@loopring-web/sdk/hooks/useCustomDCEffect'\n\nimport { useGetTradingInfo } from 'stores/trading/hook'\nimport { useActiveWeb3React, } from '@loopring-web/sdk/hooks/web3/useWeb3'\n\nimport { Lv2Account, } from 'defs/account_defs'\n\nimport { AccountStatus, StatusChangeEvent } from 'state_machine/account_machine_spec'\n\nimport * as sign_tools from '@loopring-web/sdk/api/sign/sign_tools'\n\nimport { connectorsByName } from 'defs/web3_defs'\n\nimport { ConnectorNames, } from '@loopring-web/sdk/defs/web3_defs'\n\nimport { RootState } from 'stores'\n\nimport {\n    reset, setAccountStatus, setConnectName,\n    setConnectNameTemp, setAccountInfo, setEddsaKey, setApikey, setAccAddr,\n} from 'stores/account/reducer'\n\nimport { AccountMachineSpec, } from 'state_machine/account_machine_spec'\n\nimport { buildMachine } from 'state_machine/machine_builder'\n\nimport voca from 'voca'\nimport { usePrevious } from 'react-use'\n\nimport Web3 from 'web3'\n\nimport { ExchangeAPI, UserAPI, } from '@loopring-web/sdk/api'\nimport { useExchangeAPI, useUserAPI } from '@loopring-web/sdk/hooks/common/useApi'\n\nimport { toHex, toBig, } from '@loopring-web/sdk/api/common/formatter'\n\nimport { dumpError400 } from '@loopring-web/sdk/utils/network_tools'\nimport { UserStorage } from 'storage'\n\nimport store from 'stores'\n\nexport function useWeb3Account() {\n\n    const {\n        connector,\n        library,\n        account,\n        chainId,\n        active,\n        error,\n    } = useActiveWeb3React()\n\n    const isConnected: boolean = active && !voca.isBlank(account as string)\n\n    return {\n        account,\n        connector,\n        library,\n        chainId,\n        active,\n        isConnected,\n        error,\n    }\n\n}\n\nexport function useAccount() {\n\n    const account: Lv2Account = useSelector((state: RootState) => state.account)\n\n    const isNoAccount = () => {\n        return account.status === AccountStatus.NOACCOUNT\n    }\n\n    const isActivated = () => {\n        return account.status === AccountStatus.ACTIVATED\n    }\n\n    return {\n        account,\n        isNoAccount,\n        isActivated,\n        apiKey: account.apiKey,\n        eddsaKey: account.eddsaKey,\n        accountId: account.accountId,\n    }\n}\n\nexport function useStateMachine() {\n    const dispatch = useDispatch()\n\n    const machine = buildMachine(AccountMachineSpec())\n\n    const sendEvent = useCallback((account: Lv2Account, event: StatusChangeEvent) => {\n        const nextState = machine(account.status, event)\n        if (nextState) {\n            dispatch(setAccountStatus(nextState))\n        }\n    }, [machine, dispatch])\n\n    return {\n        sendEvent,\n    }\n}\n\nexport function useConnect() {\n\n    const {\n        activate,\n    } = useActiveWeb3React()\n\n    const { sendEvent } = useStateMachine()\n\n    const dispatch = useDispatch()\n\n    const [activatingConnector, setActivatingConnector] = useState<any>()\n\n    const connect = useCallback((item_name: ConnectorNames, isSwitch: boolean = false) => {\n        const newConnector: any = connectorsByName[item_name]\n        setActivatingConnector(newConnector)\n        activate(newConnector)\n        dispatch(setConnectNameTemp(item_name))\n\n        if (isSwitch) {\n            console.log('try Connecting... isSwitch Reset')\n            sendEvent(store.getState().account, StatusChangeEvent.Reset)\n        }\n\n        sendEvent(store.getState().account, StatusChangeEvent.Connecting)\n\n        console.log('try Connecting...')\n    }, [activate, dispatch, sendEvent])\n\n    return {\n        connect,\n        activatingConnector,\n    }\n\n}\n\nexport function useDisconnect() {\n\n    const {\n        deactivate,\n    } = useActiveWeb3React()\n\n    const dispatch = useDispatch()\n\n    const disconnect = useCallback(() => {\n        deactivate()\n        dispatch(reset())\n    }, [deactivate, dispatch])\n\n    return {\n        disconnect,\n    }\n\n}\n\nexport function useUnlock() {\n\n    const dispatch = useDispatch()\n\n    const exchangeApi: any = useExchangeAPI()\n\n    const userApi: any = useUserAPI()\n\n    const { exchangeInfo } = useGetTradingInfo()\n\n    const { connector, } = useWeb3Account()\n\n    const { sendEvent } = useStateMachine()\n\n    const lock = useCallback(async (account: Lv2Account) => {\n        console.log('useCallback lock:', account.status)\n        sendEvent(account, StatusChangeEvent.Lock)\n    }, [sendEvent])\n\n    const unlock = useCallback(async (account: Lv2Account) => {\n\n        if (!userApi || !exchangeApi || !connector || !account.accountId || !exchangeInfo?.exchangeAddress\n            || account.status !== AccountStatus.LOCKED) {\n            console.log('accountId:', account.accountId)\n            console.log('exchangeAddress:', exchangeInfo)\n            console.log('enter !! account.status:', account.status)\n            return\n        }\n\n        console.log('useUnlock useCallback:', account.status)\n\n        if (account.status !== AccountStatus.LOCKED) {\n            throw Error('unexpected status:' + account.status)\n        }\n\n        let event = undefined\n        let sk = undefined\n        let apikey: any = undefined\n\n        try {\n            const provider = await connector.getProvider()\n            const web3 = new Web3(provider as any)\n            console.log('useUnlock eddsaKey:', account.eddsaKey)\n\n            if (!account.eddsaKey) {\n                const eddsakey = await sign_tools\n                    .generateKeyPair(\n                        web3,\n                        account.accAddr,\n                        exchangeInfo?.exchangeAddress as string,\n                        account.nonce - 1,\n                        account.connectName,\n                    )\n                sk = toHex(toBig(eddsakey.keyPair.secretKey))\n\n            } else {\n                sk = account.eddsaKey\n            }\n\n            apikey = await userApi.getUserApiKey({\n                accountId: account.accountId\n            }, sk)\n\n            console.log('useUnlock apikey:', apikey)\n\n            event = StatusChangeEvent.Unlock\n\n        } catch (reason) {\n            event = StatusChangeEvent.Reset\n        }\n\n        if (sk) {\n            dispatch(setEddsaKey(sk))\n        }\n\n        if (apikey?.apiKey) {\n            dispatch(setApikey(apikey.apiKey))\n        }\n\n        console.log('next event:', event)\n        if (event) {\n            sendEvent(account, event)\n        }\n\n    }\n        , [dispatch, sendEvent, exchangeApi, userApi, connector, exchangeInfo])\n\n    return {\n        lock,\n        unlock,\n    }\n}\n\nasync function checkAccountAvailableAsync(exchangeApi: ExchangeAPI, userApi: UserAPI, account: Lv2Account, dispatch: any, sendEvent: any, connector: any, exchangeAddress: string) {\n\n    let accInfo = undefined\n    let event = undefined\n    let sk = undefined\n    let code = undefined\n    let apikey: any = undefined\n\n    try {\n        accInfo = await exchangeApi.getAccount({\n            owner: account.accAddr\n        })\n        if (accInfo.publicKey && accInfo.publicKey.x && accInfo.publicKey.y) {\n            if (account.accountId !== accInfo.accountId) {\n                const provider = await connector.getProvider()\n                const web3 = new Web3(provider as any)\n                try {\n                    code = await web3.eth.getCode(account.accAddr)\n                    // console.log('!!!!!! about to generateKeyPair!!!!!!!!!!!')\n                    try {\n                        const eddsakey = await sign_tools\n                            .generateKeyPair(\n                                web3,\n                                account.accAddr,\n                                exchangeAddress,\n                                accInfo.nonce - 1,\n                                account.connectName,\n                            )\n                        sk = toHex(toBig(eddsakey.keyPair.secretKey))\n                        const px = toHex(toBig(eddsakey.keyPair.publicKeyX))\n                        const py = toHex(toBig(eddsakey.keyPair.publicKeyY))\n\n                        try {\n                            apikey = await userApi.getUserApiKey({\n                                accountId: accInfo.accountId\n                            }, sk)\n                            event = (StatusChangeEvent.HasPubkey)\n                        } catch (reason) {\n                            dumpError400(reason)\n                            event = (StatusChangeEvent.ErrorResponse)\n                        }\n                    } catch (reason) {\n                        dumpError400(reason)\n                        event = (StatusChangeEvent.ErrorResponse)\n                    }\n\n                } catch (reason) {\n                    dumpError400(reason)\n                    event = (StatusChangeEvent.ErrorResponse)\n                }\n\n            } else {\n                console.log('already has accountId!')\n            }\n        } else {\n            console.log('2 has id but no pubkey currStatus:', account.status)\n            event = (StatusChangeEvent.HasNoPubkey)\n        }\n    } catch (reason) {\n        // 3 has none of above\n        console.log('2 has id but no pubkey currStatus:', account.status)\n        dumpError400(reason)\n        // check deposit tx (local and ethereum)\n        event = (StatusChangeEvent.ErrorResponse)\n    }\n\n    if (accInfo && accInfo.owner !== account.accAddr) {\n        dispatch(setAccountInfo(accInfo))\n    }\n\n    if (sk) {\n        dispatch(setEddsaKey(sk))\n    }\n\n    if (apikey) {\n        console.log('---------> apikey:', apikey)\n        dispatch(setApikey(apikey.apiKey))\n    }\n\n    if (event) {\n        sendEvent(event)\n    }\n\n}\n\nexport function useCheckAccStatus() {\n\n    const dispatch = useDispatch()\n\n    const { account } = useAccount()\n\n    const { sendEvent } = useStateMachine()\n\n    const exchangeApi: ExchangeAPI = useExchangeAPI()\n\n    const userApi: UserAPI = useUserAPI()\n\n    const { account: web3Account, active, isConnected, chainId, connector, } = useWeb3Account()\n\n    const lv1Acc = web3Account as string\n\n    const prevChainId = usePrevious(chainId)\n    const prevWeb3Account = usePrevious(web3Account)\n\n    // console.log('prevChainId:', prevChainId, ' chainId:', chainId)\n    // console.log('prevWeb3Account:', prevWeb3Account, ' web3Account:', web3Account)\n\n    // console.log(exchangeApi, userApi, account, 'prevChainId:', prevChainId, 'chainId:', chainId, 'web3Account:', web3Account)\n\n    const { exchangeInfo } = useGetTradingInfo()\n\n    useCustomDCEffect(async () => {\n\n        const cleanUp = () => {\n            let handler = UserStorage.getHandler()\n            if (account.status !== AccountStatus.ACTIVATED && handler) {\n                clearInterval(handler)\n            }\n        }\n\n        async function checkStatus() {\n\n            if (!account || !lv1Acc || !exchangeApi || !userApi || !connector || !exchangeInfo?.exchangeAddress) {\n                console.log('checkStatus return!!!!!!')\n                return\n            }\n\n            if (((prevChainId && chainId && prevChainId !== chainId)\n                || (prevWeb3Account && web3Account && prevWeb3Account !== web3Account))\n                && account.status !== AccountStatus.UNCONNNECTED) {\n\n                console.log('checkStatus try to resetFunc')\n                dispatch(reset())\n                sendEvent(account, StatusChangeEvent.Reset)\n                return\n            }\n\n            cleanUp()\n\n            switch (account.status) {\n                case AccountStatus.UNCONNNECTED:\n                    console.log('---> render UNCONNNECTED active:', active, ' isConnected:', isConnected)\n\n                    if (isConnected) {\n                        dispatch(setConnectNameTemp(ConnectorNames.Injected))\n                        sendEvent(account, StatusChangeEvent.Connecting)\n                    }\n\n                    break\n\n                case AccountStatus.CONNECTED:\n                    //check session or local storage\n\n                    console.log('---> render CONNECTED account:', account)\n\n                    try {\n\n                        const acc = await exchangeApi.getAccount({ owner: lv1Acc })\n\n                        // current acc is local acc info\n                        if (account.accAddr && account.eddsaKey && acc.owner === account.accAddr) {\n                            console.log('cur Eddsakey:', account.eddsaKey)\n                        } else {\n                            console.log('got a new address:', acc)\n                            // got a new address\n                            dispatch(setAccountInfo(acc))\n                            // dispatch(setEddsaKey(''))\n                        }\n\n                        if (account?.connectName !== account?.connectNameTemp) {\n                            dispatch(setConnectName(account.connectNameTemp))\n                        }\n\n                        sendEvent(account, StatusChangeEvent.HasPubkey)\n\n                    } catch (reason) {\n                        dumpError400(reason)\n                        if (lv1Acc) {\n                            dispatch(setAccAddr(lv1Acc))\n                        }\n                        if (reason.response.data.resultInfo.code === 101002) {\n                            sendEvent(account, StatusChangeEvent.ErrorResponse)\n                        }\n                    }\n\n                    break\n\n                case AccountStatus.NOACCOUNT:\n                    break\n\n                case AccountStatus.DEPOSITING:\n                    // TODO sub contract event, check deposit.\n                    const depositFinished = true // TODO\n                    if (depositFinished) {\n                        console.log('depositFinished currStatus:', account.status)\n                        sendEvent(account, StatusChangeEvent.FinishDeposit)\n                    }\n                    break\n\n                case AccountStatus.DEPOSIT_TO_CONFIREM:\n                    // getAccount every 10s to check\n                    break\n\n                case AccountStatus.UNACTIVATED:\n                    const isSmartWallet = false // TODO\n                    if (isSmartWallet) {\n                        // TODO approve hash,\n                        console.log('approve hash, currStatus:', account.status)\n                        sendEvent(account, StatusChangeEvent.IsSmartWallet)\n                    } else {\n                        console.log('approve hash no smartwallet, account.status:', account.status)\n                    }\n                    break\n\n                case AccountStatus.ARPROVING:\n                    // TODO sub contract event, check approving.\n                    const approved = false // TODO\n                    if (approved) {\n                        console.log('sub contract event, check approving. approved! status:', account.status)\n                        sendEvent(account, StatusChangeEvent.ApproveSubmit)\n                    }\n                    break\n\n                case AccountStatus.APPROV_TO_CONFIRM:\n                    const approveConfirmed = false // TODO\n                    if (approveConfirmed) {\n                        console.log('approveConfirmed status:', account.status)\n                        sendEvent(account, StatusChangeEvent.ApproveConfirmed)\n                    }\n                    break\n\n                case AccountStatus.LOCKED:\n                    break\n\n                case AccountStatus.ACTIVATED:\n                    UserStorage.checkTimeout(true)\n                    const handler = setInterval(() => {\n                        const isTimeOut = UserStorage.checkTimeout()\n                        if (account.status === AccountStatus.ACTIVATED && isTimeOut) {\n                            clearInterval(handler)\n                            sendEvent(account, StatusChangeEvent.Lock)\n                        }\n                    }, 1000)\n                    UserStorage.setHandler(handler)\n                    break\n\n                default:\n                    break\n            }\n\n\n\n        }\n\n        checkStatus()\n\n        return () => {\n            cleanUp()\n        }\n\n    }, [exchangeApi, userApi, account, prevChainId, chainId, lv1Acc, dispatch, connector, exchangeInfo?.exchangeAddress,])\n\n}\n","export const buildMachine = <S, E>(spec: any) => (currentState: S, event: E) => {\n    // We get all possible transitions for the current State\n    const stateTransitions = spec.states[currentState]\n\n    // No transitions? Error!\n    if (stateTransitions === undefined) {\n        throw new Error(`No transitions defined for ${currentState}`)\n    }\n\n    // We try to transition to the next state\n    const nextState = stateTransitions[event]\n\n    // No next state? Error!\n    if (nextState === undefined) {\n        throw new Error(\n            `Unknown transition for event ${event} in state ${currentState}`\n        )\n    }\n\n    console.log('got nextState:', nextState)\n\n    // We return the new state\n    return nextState\n}\n"],"sourceRoot":""}