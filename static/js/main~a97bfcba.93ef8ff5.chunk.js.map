{"version":3,"sources":["pages/LiquidityPage/PoolsPanel/hook.ts","hook.ts","pages/LoadingPage/index.tsx","hooks/modal/useModals.ts","layouts/header/hook.tsx","pages/AccountPage/index.tsx","layouts/header/index.tsx","pages/QuotePage/hook.ts","pages/styled.ts","pages/QuotePage/index.tsx","pages/SwapPage/panel/BasicInfoPanel/hook.tsx","pages/SwapPage/panel/BasicInfoPanel/index.tsx","pages/SwapPage/panel/TradePanel/index.tsx","pages/SwapPage/index.tsx","pages/SwapPage/hook.ts","pages/Layer2Page/TxPanel/index.tsx","pages/Layer2Page/TxPanel/hooks.ts","pages/Layer2Page/AssetPanel/index.tsx","pages/Layer2Page/TradePanel/index.tsx","pages/Layer2Page/AmmPanel/index.tsx","pages/SettingPage/index.tsx","pages/Layer2Page/index.tsx","pages/LiquidityPage/PoolsPanel/index.tsx","pages/LiquidityPage/AmmPanel/index.tsx","pages/LiquidityPage/AmmPanel/hooks.ts","pages/LiquidityPage/CoinPairPanel/hooks.ts","pages/LiquidityPage/CoinPairPanel/index.tsx","pages/LiquidityPage/AmmMining/index.tsx","pages/LiquidityPage/AmmMining/hook.ts","pages/LiquidityPage/MyLiquidity/index.tsx","pages/LiquidityPage/MyLiquidity/hook.ts","pages/LiquidityPage/index.tsx","pages/LiquidityPage/hook.ts","routers/index.tsx","pages/ErrorPage/index.tsx","utils/dt_tools.ts","hooks/help/volumeToCount.ts","hooks/common/useCustomDCEffect.ts","stores/Amm/AmmMap/hook.ts","stores/token/hook.ts","defs/web3_defs.ts","stores/account/hook.ts","state_machine/machine_builder.ts","stores/account/reducer.ts","storage/index.ts","utils/obj_tools.ts","defs/common_defs.ts","stores/walletLayer2/hook.ts","networks/web3_connectors.ts","stores/Amm/AmmMap/reducer.ts","index.tsx","stores/walletLayer1/hook.ts","stores/socket/reducer.ts","stores/ticker/reducer.ts","stores/walletLayer2/reducer.ts","stores/userRewards/hook.ts","stores/system/interface.ts","stores/walletLayer1/reducer.ts","stores/userRewards/reducer.ts","stores/Amm/AmmActivityMap/reducer.ts","stores/token/reducer.ts","stores/system/reducer.ts","hooks/web3/useWeb3.ts","stores/apis/api.ts","hooks/help/makeUIAmmActivityMap.ts","utils/formatter_tool.ts","defs/swap_defs.ts","hooks/help/marketTable.ts","state_machine/account_machine_spec.ts","stores/global/actions.ts","stores/Amm/AmmActivityMap/saga.ts","stores/Amm/AmmMap/saga.ts","stores/Amm/index.ts","utils/swap_utils.ts","stores/token/saga.ts","stores/ticker/saga.ts","services/socketUtil.ts","services/ammPoolService.ts","stores/system/saga.ts","stores/walletLayer1/saga.ts","stores/walletLayer2/saga.ts","stores/userRewards/saga.ts","stores/socket/saga.ts","stores/rootSaga.ts","stores/localStore/favoriteMarket/reducer.ts","stores/localStore/index.ts","stores/index.ts","stores/ticker/hook.ts","stores/Amm/AmmActivityMap/hook.ts","stores/system/hook.ts","stores/socket/hook.ts","hooks/help/ammPairDetail.ts","hooks/help/coinPairInit.ts","hooks/help/connectStatusCallback.ts","hooks/help/makeCache.ts","hooks/help/makeMyPoolDetail.ts","hooks/help/makeTickView.ts","hooks/help/pairDetail.ts","hooks/help/makeWallet.ts","utils/log_tools.ts","utils/web3_tools.ts","provider/global/index.tsx","provider/web3ReactManager/index.tsx","provider/dev-wrapper/index.tsx","services/tickerService.ts","stores/constant.ts"],"names":["useAmmMapUI","pageSize","React","useState","rawData","setRawData","page","setPage","timestamp","setTimestamp","coinMap","useTokenMap","useAmmMap","ammMap","ammMapStatus","status","ammMapStatusUnset","statusUnset","useTicker","tickerMap","tickerStatus","tickerStatusUnset","updateTickers","useSocket","updateRawData","useCallback","_ammMap","deepClone","tickerMapKey","tradeFloat","Object","keys","map","ammKey","error","CustomError","ErrorMap","NO_TOKEN_MAP","options","updateTickerLoop","_keys","clearTimeout","setTimeout","setImmediate","updateTickersUI","_page","length","i","push","useEffect","console","log","STATUS","PENDING","DONE","useInit","state","setState","systemState","useSystem","tokenState","ammMapState","accountState","useAccount","walletLayer1State","useWalletLayer1","useCustomDCEffect","a","handleChainChanged","chainId","updateSystem","window","location","reload","handleAccountChanged","accounts","detectEthereumProvider","provider","Number","request","method","on","ChainId","MAINNET","accountId","StyleBox","styled","Box","theme","colorBase","primaryLight","LoadingPage","useTranslation","t","flex","display","alignItems","justifyContent","flexDirection","height","width","className","title","version","id","xmlns","xmlnsXlink","x","y","viewBox","enableBackground","xmlSpace","fill","d","attributeType","attributeName","type","from","to","dur","repeatCount","useModals","dispatch","useDispatch","ShowDeposit","isShow","defaultProps","isNoAccount","store","getState","account","AccountStatus","NOACCOUNT","action","props","description","setShowDeposit","ShowTransfer","setShowTransfer","ShowWithdraw","setShowWithdraw","ShowResetAccount","setShowResetAccount","useChargeFeeList","tokenSymbol","requestType","tokenMap","amount","apiKey","chargeFeeList","setChargeFeeList","LoopringAPI","userAPI","tokenInfo","toBig","times","decimals","toFixed","undefined","getOffchainFeeAmt","response","raw_data","fees","forEach","item","index","feeRaw","fee","token","sdk","div","BIG10","pow","toNumber","belong","__raw__","myLog","dumpError400","useModalProps","useWeb3Account","isConnected","connector","eddsaKey","totalCoinMap","walletLayer2State","marketArray","marketCoins","marketMap","useWalletLayer2","walletMap1","setWalletMap1","walletMap2","setWalletMap2","walletLayer2","walletMap","makeWalletLayer2","walletLayer1","tradeValue","balance","depositValue","setDepositValue","deposit","amt","exchangeInfo","system","exchangeAPI","exchangeAddress","depositAddress","getProvider","web3","Web3","sendByMetaMask","connectName","ConnectorNames","Injected","gasPrice","gasLimit","parseInt","gasAmounts","accAddr","nonce","address","response2","depositProps","tradeData","depositBtnStatus","TradeBtnStatus","AVAILABLE","onDepositClick","toString","handlePanelEvent","data","switchType","Promise","res","setTokenSymbol","transferValue","setTransferValue","transferTokenSymbol","setTransferTokenSymbol","transferFeeList","OffchainFeeReqType","TRANSFER","feeInfo","setFeeInfo","payeeAddr","setPayeeAddr","transfer","sellToken","feeToken","transferVol","sellTokenId","tokenId","getNextStorageId","storageId","walletType","request2","exchange","payerAddr","payerId","payeeId","offchainId","volume","maxFee","validUntil","VALID_UNTIL","submitInternalTransfer","transferProps","transferBtnStatus","onTransferClick","handleFeeChange","value","chargeFeeToken","chargeFeeTokenList","handleOnAddressChange","handleAddressError","_value","message","withdrawValue","setWithdrawValue","OFFCHAIN_WITHDRAWAL","withdrawType","setWithdrawType","withdrawalFeeList","withdrawType2","FAST_OFFCHAIN_WITHDRAWAL","withdrawFeeInfo","setWithdrawFeeInfo","withdrawAddr","setWithdrawAddr","withdraw","symbol","withdrawToken","owner","extraData","minGas","submitOffchainWithdraw","withdrawProps","withdrawBtnStatus","onWithdrawClick","withdrawTypes","WithdrawTypes","handleWithdrawTypeChange","offchainType","WithdrawType","Fast","resetValue","setResetValue","resetProps","resetBtnStatus","onResetClick","count","price","ammProps","ammDepositData","coinA","coinB","slippage","ammWithdrawData","ammCalcData","myCoinA","myCoinB","lpCoinA","lpCoinB","lpCoin","AtoB","coinInfoMap","feeJoin","feeExit","handleAmmAddChangeEvent","handleAmmRemoveChangeEvent","onAmmRemoveClick","onAmmAddClick","swapProps","tradeCalcData","coinSell","coinBuy","BtoS","StoB","sellCoinInfoMap","buyCoinInfoMap","priceImpact","minimumReceived","onSwapClick","handleSwapPanelEvent","ModalAccountInfo","withTranslation","onClose","open","rest","Modal","aria-labelledby","aria-describedby","style","boxShadow","minWidth","Header","useLocation","i18n","useSettings","setTheme","themeMode","language","setLanguage","useOpenModals","modals","isShowAccountInfo","isShowConnect","setShowConnect","setShowAccountInfo","forceUpdate","useReducer","bool","useUnlock","lock","unlock","connect","useConnect","etherscanUrl","useEtherscan","gatewayList","DefaultGatewayList","handleSelect","WalletConnect","Ledger","Trezor","accountInfoProps","setAccountInfoProps","onNotification","onWalletBtnConnect","acc","UNCONNNECTED","CONNECTED","LOCKED","ACTIVATED","onThemeBtnClick","Theme","dark","light","onLangBtnClick","lang","headerToolBarData","ButtonComponentsMap","handleClick","Language","handleChange","UnlockBtn","onClick","startIcon","fontSize","event","variant","Typography","marginTop","lockCallback","unLockCallback","LockBtn","addr","getShortAddr","updateHeaderMenuWhenHasAccountInfo","headerMenuData","HeadMenuTabKey","Layer2","HeaderMenuTabStatus","default","addressShort","level","etherscanLink","mainBtn","_event","connectBy","UNACTIVATED","DEPOSITING","DEPOSIT_TO_CONFIREM","ARPROVING","APPROV_TO_CONFIRM","onLock","label","WalletStatus","hidden","noAccount","accountPending","useHeader","disconnect","useDisconnect","onSwitch","openQRCode","setOpenQRCode","copyToastOpen","setCopyToastOpen","alertText","autoHideDuration","TOAST_TIME","setOpen","severity","url","withDrawProps","process","selected","pathname","headerRoot","Toolbar","onCopy","copyToClipBoard","onViewQRCode","onDisconnect","OnePageSize","isNeedCallMore","currentStartIndex","marketArrayLength","currentListLength","pageCurrent","StylePaper","background","unit","TableWrapStyled","Grid","TablePaddingX","pLeft","pRight","RowStyled","QuotePage","candlestickList","setCandlestickList","getCandlestick","market","getMixCandlestick","interval","TradingInterval","d1","limit","candlesticks","o","timeStamp","low","high","close","baseVol","sign","prev","sendSocketTopic","socketEnd","recommendMarkets","slice","_marketArrayWithOutRecommend","filter","findIndex","m","tickList","setTickList","recommendations","setRecommendations","setTickerKeys","focusRowFrom","setFocusRowFrom","startIndex","setStartIndex","subject","useMemo","tickerService","onSocket","updateRecommendation","recommendationIndex","ticker","subscription","subscribe","Reflect","ownKeys","key","ele","unsubscribe","getTicker","socketSendTicker","array","concat","_recommendationsFloat","_tickList","reduce","match","_item","pair","_recommendations","coinAInfo","coinBInfo","debounceGetTicker","debounce","globalSetup","wait","_startIndex","WsTopicType","onVisibleRowsChange","useQuote","list","simpleName","history","useHistory","handleRowClick","row","tradePair","container","chartData","find","sort","b","xs","marginY","paddingBottom","onRowClick","col","toggleData","ChartType","Trend","Depth","BasicInfoPanel","tgItemJSXs","tlabel","JSX","getExistedMarket","name","amm","chartType","setChartType","ChartUnit","D1","chartUnit","setChartUnit","originData","setOriginData","_e","tgItemJSXsPriceChart","pre","tGItemData","mounted","quoteVol","change","date","moment","format","getMixDepth","depth","bidsPrices","bids_prices","bidsAmtTotals","bids_amtTotals","asksPrices","asks_prices","asksAmtTotals","asks_amtTotals","handleChartUnitChange","newValue","mappedValue","H1","W1","useBasicInfo","upColor","baseToken","quoteToken","trendChartData","depthChartData","VolToNumberWithPrecision","exclusive","position","minHeight","maxHeight","riseColor","extraInfo","handleMove","showXAxis","applyProps","StyledTabsWrapper","TradePanel","FormControlLabel","tradeArray","myTradeArray","setValue","Tabs","onChange","aria-label","Tab","FixedStyle","SwapPage","swapToastOpen","setSwapToastOpen","swapAlertText","setSwapAlertText","useRouteMatch","delayAndUpdateWalletLayer2","isSwapLoading","setIsSwapLoading","setTradeData","setTradeCalcData","setTradeArray","setMyTradeArray","setTradeFloat","setPair","ammPoolSnapshot","setAmmPoolSnapshot","swapBtnI18nKey","setSwapBtnI18nKey","output","setOutput","takerRate","setTakerRate","feeBips","setFeeBips","base","sell","quote","buy","ammInfo","__rawConfig__","req","getMinimumTokenAmt","amountMap","userOrderInfo","totalFee","fm","plus","params","resetSwap","getUserTrades","then","marketTrades","_myTradeArray","makeMarketArray","accountStaticCallBack","bntLabel","swapCalculatorCallback","orderId","amountS","buyToken","amountBOutSlip","minReceived","allOrNone","maxFeeBips","fillAmountBOrS","orderType","OrderType","ClassAmm","eddsaSignature","submitOrder","__cache__","makeCache","swapBtnClickArray","assign","btnClickMap","fnType","swapData","resolve","SwapType","SEll_CLICK","BUY_CLICK","SELL_SELECTED","BUY_SELECTED","EXCHANGE_CLICK","setDepth","updateDepth","handler","setInterval","REFRESH_RATE_SLOW","clearInterval","calculateTradeData","_tradeData","_tradeCalcData","input","isAtoB","trim","ammMapRaw","tokens","pooled","minReceivedVal","parseFloat","throttleSetValue","_","_ammPoolSnapshot","td","coinKey","_tradeFloat","_tradeArray","coinPairInit","apiList","getMarketTrades","pairDetailBlock","all","ammPoolsBalance","tickMap","_td","pairDetailDone","tickerData","makeTickView","catch","TRADE_LITE_SET_PAIR_ERROR","useSwapPage","pairNameList","split","Array","isArray","customPair","renderPair","marginRight","alignContent","swapBtnStatus","LOADING","TxPanel","useRef","setPageSize","txTableData","txs","setTxs","getTxnStatus","TransactionStatus","processing","processed","received","failed","getUserTxnList","getUserTranferList","getUserDepositHistory","getUserOnchainWithdrawalHistory","userTxnList","userTransferMapped","userTransfers","side","TransactionTradeTypes","volumeToCount","feeTokenSymbol","feeAmount","memo","time","txnHash","hash","userDepositMapped","userDepositHistory","txHash","userWithdrawMapped","userOnchainWithdrawalHistory","mappingList","sortedMappingList","useGetTxs","current","offsetHeight","Math","floor","ref","pagination","showFilter","StyledChartWrapper","StyledBtnGroupWrapper","AssetPanel","chartPeriod","setChartPeriod","setChartData","assetsKeyList","assetsDetailList","values","assetsList","detail","getUserTotalAssets","walletAPI","getUserAssets","wallet","assetType","AssetType","DEX","userAssets","createdAt","updateWalletLayer1","onShowDeposit","onShowTransfer","onShowWithdraw","lpTokenJump","handleChartPeriodChange","faitPrices","tokenPriceList","entries","jointLPTokenValue","result","splice","ammToken","join","tokenValue","includes","amountDollar","doughnutData","tokenPriceUSDT","total","formattedDoughnutData","AssetTitleProps","assetInfo","totalAsset","next","priceTag","PriceTag","Dollar","assetsRawData","TokenType","lp","single","String","EmptyValueTag","available","locked","smallBalance","Paper","component","color","size","showFiliter","onLpDeposit","onLpWithdraw","originalData","setOriginalData","userTrades","marketList","feeKey","Side","Buy","TradeTypes","Sell","volumeToCountAsBigNumber","tradeTime","AmmPanel","getTokenName","getAmmpoolList","ammpoolAPI","getUserAmmPoolTxs","ammpool","userAmmPoolTxs","txType","AmmTxType","JOIN","AmmSideTypes","Join","Exit","poolTokens","actualAmount","lpTokenAmount","lpToken","updatedAt","StyledPaper","StyledSwitch","Switch","textPrimary","border","success","backgroundColor","opacity","BtnCurrency","currency","Currency","dollar","_handleChange","target","IconComponent","DropDownIcon","labelId","autoWidth","yen","StyledDivider","Divider","SettingPanel","focus","useTheme","setUpColor","setCurrency","direction","flexWrap","paddingLeft","paddingY","paddingX","marginBottom","alignSelf","changeLanguage","Trans","i18nKey","textTransform","UpColor","green","up","down","checked","e","red","subMenu","subMenuLayer2","BoxStyle","defaultFrame","c_key","BtnConnect","withRef","showAccountInfo","fullWidth","maxWidth","SubMenuList","BasicSubMenuList","Layer2Page","accStatus","PoolsPanel","ammActivityMap","handlePageChange","AmmPanelView","ammType","snapShotData","ammToastOpen","setAmmToastOpen","ammAlertText","setAmmAlertText","setAmmCalcData","ammJoinData","setAmmJoinData","ammExitData","setAmmExitData","ammDepositBtnI18nKey","setAmmDepositBtnI18nKey","ammWithdrawBtnI18nKey","setAmmWithdrawBtnI18nKey","initAmmData","_ammCalcData","ammPairInit","setAmmPoolSnapShot","updateAmmPoolSnapshot","request1","poolAddress","getAmmPoolSnapshot","joinFees","setJoinFees","exitFees","setExitfees","useSelector","requestJoin","AMM_JOIN","feesJoin","requestExit","AMM_EXIT","feesExit","joinRequest","setJoinRequest","handlerJoinInDebounce","slippageReal","idIndex","marketInfo","coinA_TV","coinB_TV","covertVal","ratio","rawA","rawB","rawVal","makeJoinAmmPoolRequest","joinTokens","precisionForPrice","handleJoinAmmPoolEvent","addToAmmCalculator","setJoinLoading","patch","ammName","storageId0","request_1","storageId1","storageIds","joinAmmPool","onAmmDepositClickMap","exitRequest","setExitRequest","handleExitInDebounce","makeExitAmmPoolRequest","exitTokens","unPooled","handleExitAmmPoolEvent","isJoinLoading","isExitLoading","setExitLoading","removeAmmCalculator","burnedReq","burned","exitAmmPool","removeAmmClickMap","useAmmPanel","AmmPanelType","Deposit","isLoading","tabSelected","ammDepositBtnStatus","ammWithdrawBtnStatus","makeAmmDetailExtendsActivityMap","ammDetail","ammActivity","BoxStyled","fontDefault","h4","BoxTopStyled","CoinPairPanel","useUserRewardsState","useUserRewards","getAmmMap","setWalletMap","ammMarketArray","myAmmMarketArray","setMyAmmMarketArray","ammUserRewardMap","setAmmUserRewardMap","setSnapShotData","feeA","feeB","feeDollar","feeYuan","reward","rewardToken","balanceA","balanceB","balanceYuan","balanceDollar","myAmm","setMyAmm","activity","totalRewards","amountYuan","totalLPToken","totalA","totalB","rewardValue","isNew","isActivity","APY","coinPairInfo","setCoinPairInfo","pairHistory","setPairHistory","walletLayer2DoIt","_walletMap","getUserAmmTransaction","makeMyAmmMarketArray","getPairList","ammList","formattedPairHistory","_coinPairInfo","_snapShotData","Error","_myAmm","makeMyAmmWithSnapshot","userRewardsMap","useCoinPair","tabIndex","_handlePageChange","coinJson","coinAIcon","coinBIcon","Breadcrumbs","Link","href","getThousandFormattedNumbers","duration","imgx","imgy","imgheight","imgwidth","alt","src","Avatar","lineHeight","marginLeft","priceDollar","Yuan","priceYuan","AmmCardWrap","forwardRef","AmmList","ammActivityViewMap","jumpTo","sm","lg","AmmMiningView","userRewardsMapState","setAmmActivityViewMap","ammActivityPastViewMap","setAmmActivityPastViewMap","makeUIAmmActivityMap","ammPoolActivityStatus","AmmPoolActivityStatus","NotStarted","InProgress","EndOfGame","useAmmMiningUI","setTabIndex","spacing","StyleWrapper","MyLiquidity","JumpToLiqudity","summaryReward","setSummaryReward","myPoolRow","setMyPoolRow","makeMyPoolRow","walletKey","test","rowData","replace","marketKey","makeMyPoolRowWithPoolState","_myPoolRow","makeSummaryMyAmm","useOverview","padding","margin","rewardDollar","rewardYuan","handleDeposit","handleWithdraw","subMenuLiquidity","LiquidityPage","AmmActivityMapState","useAmmActivityMap","getUserRewards","setAmmActivityMap","useAmmPool","matchPair","RouterView","Container","exact","path","ErrorPage","messageKey","textAlign","left","top","body","email","CONTACT_US_EMAIL","getContactInfo","preventDefault","volumn","deps","useDeepCompareEffect","getTokenMap","connectorsByName","Unknown","injected","Network","network","walletconnect","WalletLink","walletlink","ledger","trezor","Authereum","authereum","useActiveWeb3React","library","active","voca","isBlank","isActivated","useStateMachine","spec","machine","AccountMachineSpec","currentState","stateTransitions","states","nextState","sendEvent","setAccountStatus","activate","activatingConnector","setActivatingConnector","item_name","isSwitch","StatusChangeEvent","Reset","newConnector","UserStorage","setConnectorName","setConnectName","Connecting","deactivate","reset","resetLayer2","Lock","sk","apikey","sign_tools","getUserApiKey","Unlock","resultInfo","code","feeMap","publicKey","formatedPx","formatedPy","updateAccount","updateAccountResponse","sleep","setEddsaKey","setApikey","useCheckAccStatus","web3Account","lv1Acc","prevChainId","usePrevious","resetLayer1","updateWalletLayer2","checkStatus","cleanUp","getConnectorName","getAccount","accInfo","setAccountInfo","HasPubkey","setAccAddr","ErrorResponse","delay","Reconnect","FinishDeposit","checkTimeout","isTimeOut","setHandler","getHandler","initialState","defaultAccId","REACT_APP_TEST_ACCOUND_ID","getAccountId","defaultApiKey","REACT_APP_TEST_API_KEY","getApikey","defaultOwner","REACT_APP_TEST_OWNER","defaultEddsaKey","REACT_APP_TEST_EDDSA_KEY","getEddsakey","isContractAddress","accountSlice","createSlice","reducers","initState","payload","setIsContractAddress","actions","CONSTANTS","rawHandler","sessionStorage","getItem","Handler","err","connectionName","setItem","ConnectorName","removeItem","dateTimeStr","localStorage","ActiveTime","now","Date","getTime","tmpDt","SESSION_TIMEOUT_SECONDS","clear","rawId","AccountId","Account","Apikey","Eddsakey","eddsakey","orderHash","AmmOrder","HardwareAddresses","toLowerCase","constructor","hasOwnProperty","text","document","execCommand","textarea","createElement","appendChild","select","removeChild","navigator","clipboard","writeText","clipboardData","setData","LangType","SystemStatus","MODAL_TYPE","UPDATE_ACC_DELAY","POLLING_INTERVAL","RPC_URLS","1","5","InjectedConnector","supportedChainIds","NetworkConnector","urls","defaultChainId","WalletConnectConnector","rpc","bridge","qrcode","pollingInterval","WalletLinkConnector","appName","LedgerConnector","TrezorConnector","manifestEmail","manifestAppUrl","AuthereumConnector","__timer__","errorMessage","ammMapSlice","getAmmMapStatus","ERROR","updateRealTimeAmmMap","UNSET","Web3ProviderNetwork","createWeb3ReactRoot","NetworkContextName","providers","LocalizationProvider","dateAdapter","MomentUtils","I18nextProvider","MuThemeProvider","getTheme","ThemeProvider","Provider","ReactDOM","render","getLibrary","App","getElementById","socketSlice","socket","getSocketStatus","tickerMapSlice","getTickers","getTickerStatus","walletLayer2Slice","getWalletLayer2Status","ENV","NETWORKEXTEND","walletLayer1Slice","getWalletLayer1Status","userRewardsMapSlice","getUserRewardsStatus","ammActivityMapSlice","getAmmActivityMap","getAmmActivityMapStatus","addressIndex","tokenMapSlice","getTokenMapStatus","env","PROD","baseURL","socketURL","forex","topics","systemSlice","updateRealTimeObj","getSystemStatus","setTopics","context","useWeb3React","contextNetwork","setEtherscanUrl","useEagerConnect","tried","setTried","isAuthorized","isMobile","ethereum","useInactiveListener","onReConnectInjected","suppress","reConnectInjected","handleAccountsChanged","removeListener","getChainId","UserAPI","ExchangeAPI","AmmpoolAPI","wsAPI","InitApi","WalletAPI","WsAPI","myReward","ammPoolActivityRule","awardRules","myRewards","currentRewards","rangeFrom","rangeTo","isPass","makeAsCard","_ammInfo","itemArray","ammUserReward","getOneRewardInfo","rewardToken2","reward2","feeRewards","BigNumber","makeMyAmmWithStat","getTokenInfo","precision","OrderHandling","userApi","getBaseQuote","settings","marketTransaction","AmmTradeType","add","remove","totalDollar","totalYuan","amountA","amountB","txStatus","HasNoPubkey","IsSmartWallet","ApproveSubmit","ApproveConfirmed","updateVersion","createAction","getPostsSaga","ammActivityMapSaga","getAmmActivityMapApi","getAmmPoolActivityRules","groupByRuleTypeAndStatus","call","put","takeLatest","updateRealTimeSaga","ammMapInitSaga","ammMapRealTimeSaga","setAmmState","ammPoolState","keyPair","liquidityUSD","lpLiquidity","liquidity","rewards","rewardValue2","timeUnit","apyBips","getAmmMapApi","ammpools","getAmmPoolStats","ammPoolStats","dataItem","ammMapSaga","fork","ammReducer","combineReducers","reducer","ammForks","getIconByTokenInfo","utils","getAddress","tokenInitSaga","getTokenMapApi","tokensMap","pairs","marketArr","tokenArr","coinInfo","icon","company","startsWith","tokenList","tradePairs","tokenSaga","tickerSaga","tickersSaga","getTickersApi","getMixTicker","tickers","makeTickerMap","tickerKey","tickerKeys","NO_TOKEN_KEY_LIST","SocketEventType","tickerForks","Subject","ammPoolService","ammPoolMap","LoopringSocket","_socketCallbackMap","_loopringSocket","__wsTimer__","timer","_baseUrl","socketSendMessage","clearInitTimer","resetSocketEvents","makeMessageArray","isConnectSocket","socketConnect","send","makeTopics","socketClose","SOCKET_ERROR","ws","reolve","onclose","reason","removeSocketEvents","eventType","getTickerArg","addSocketEvents","getAccountArg","order","getOrderArg","orderbook","getOrderBookArg","trade","getTradeArg","candlestick","getCandlestickArg","getAmmpoolArg","op","unsubscribeAll","JSON","stringify","fn","SocketEventMap","self","getWsKey","wsKey","WebSocket","onopen","warn","readyState","OPEN","onmessage","pingpong","parse","topic","this","onerror","init","bid","ask","base_token_volume","quote_token_volume","minus","sendTicker","base_fee_amt","quote_fee_amt","poolName","risky","instance","loopringSocket","getUpdateSystem","systemSaga","initConfig","getTokens","tokenSymbolMap","getAmmPoolConf","getMixMarkets","markets","take","getSystemsApi","hostname","DEV","GORLI","UAT","NONETWORK","NO_NETWORK_ERROR","getExchangeInfo","getFiatPrice","legal","fiatPrices","faitPricesY","getGasPrice","systemForks","walletLayer1Saga","getWalletLayer1Balance","exchangeApi","getEthBalances","ethBalance","getTokenBalances","tokenBalances","fromWEI","walletLayer1Fork","walletLayer2Saga","getWalletLayer2Balance","getUserBalances","userBalances","walletLayer2Fork","userRewardsSaga","getUserRewardsApi","getAmmPoolUserRewards","reject","userRewardsForks","closeSocket","sendMessage","socketEndSaga","socketSendMessageSaga","socketForks","mySaga","favoriteMarketSlice","clearAll","removeMarket","_pair","addMarket","addMarkets","localStoreReducer","favoriteMarket","sagaMiddleware","createSagaMiddleware","settingsSlice","modalsSlice","localStore","PERSISTED_KEYS","configureStore","middleware","getDefaultMiddleware","thunk","serializableCheck","save","devTools","enhancers","reduxBatch","preloadedState","load","setCoinJson","imgConfig","run","updateTicker","isNaN","coinACount","coinBCount","onclickMap","args","UNKNOWN","DEFAULT","apply","customSlippage","setSlippage","tick","floatTag","FloatTag","none","increase","decrease","closeDollar","closeYuan","qPrice","changeDollar","changeYuan","__rawTicker__","NO_SDK","stob","poolVolumn","poolBaseTokenVol","quoteBaseTokenVol","NO_SUPPORT_PAIR","countBig","pending","Web3Provider","substr","WindowEvent","events","Click","Scroll","forceReset","GlobalProvider","children","addEventListener","removeEventListener","Fragment","MessageWrapper","Message","Web3ReactManager","networkActive","networkError","activateNetwork","triedEager","showLoader","setShowLoader","timeout","DevWrapper","_tickerMap","asObservable"],"mappings":"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","file":"static/js/main~a97bfcba.93ef8ff5.chunk.js","sourcesContent":["import React from 'react';\nimport { useAmmMap } from '../../../stores/Amm/AmmMap';\nimport { AmmDetail, CustomError, ErrorMap, } from '@loopring-web/common-resources';\nimport { deepClone } from '../../../utils/obj_tools';\nimport { STATUS } from '../../../stores/constant';\nimport { useTokenMap } from '../../../stores/token';\nimport { useSocket } from '../../../stores/socket';\nimport { useTicker } from '../../../stores/ticker';\n// import { tickerService } from '../../../services/tickerService';\n\nexport function useAmmMapUI<R extends { [ key: string ]: any }, I extends { [ key: string ]: any }>({pageSize}: { pageSize: number }) {\n    const [rawData, setRawData] = React.useState<Array<AmmDetail<any>> | []>([]);\n    const [page, setPage] = React.useState<number>(1);\n    // const [keys, setKeys] = React.useState<string[]>([]);\n    const [timestamp, setTimestamp ] = React.useState<NodeJS.Timer|-1>(-1)\n    const {coinMap} = useTokenMap();\n    const {\n        ammMap,\n        status: ammMapStatus,\n        // errorMessage: errorAmmMap,\n        statusUnset: ammMapStatusUnset,\n        // updateAmmMap,\n    } = useAmmMap();\n    const {\n        tickerMap,\n        status: tickerStatus,\n        // errorMessage: errorTickerMap,\n        statusUnset: tickerStatusUnset,\n        updateTickers,\n    } = useTicker();\n    const {\n        status:socketStatus,\n        // errorMessage: errorTickerMap,\n        statusUnset: socketStatusUnset,\n    } = useSocket();\n    const updateRawData = React.useCallback( (tickerMap) => {\n        try {\n            const _ammMap = deepClone(ammMap);\n            for (let tickerMapKey in tickerMap) {\n                if(_ammMap['AMM-' + tickerMapKey ]){\n                    _ammMap['AMM-' + tickerMapKey ].tradeFloat =  {\n                        ..._ammMap['AMM-' + tickerMapKey ].tradeFloat,\n                        ...tickerMap[ tickerMapKey ],\n                        // APY: _ammMap['AMM-' + tickerMapKey ].APY\n                    }\n\n                }\n            }\n            setRawData(Object.keys(_ammMap).map((ammKey: string) => {\n                if (coinMap) {\n                    _ammMap[ ammKey ][ 'coinAInfo' ] = coinMap[ _ammMap[ ammKey ][ 'coinA' ] ];\n                    _ammMap[ ammKey ][ 'coinBInfo' ] = coinMap[ _ammMap[ ammKey ][ 'coinB' ] ];\n                }\n                return  _ammMap[ ammKey ];\n            }) )\n        } catch (error) {\n            throw new CustomError({...ErrorMap.NO_TOKEN_MAP, options: error})\n        }\n\n    } ,[ammMap]);\n    const updateTickerLoop =  React.useCallback((_keys?:string[])=>{\n\n        if(timestamp !== -1){\n            clearTimeout(timestamp)\n        }\n\n        setTimestamp(setTimeout(()=>{\n            updateTickerLoop(_keys);\n        },60000))\n        \n        //console.log(_keys)\n        setImmediate(updateTickers,_keys)\n    },[])\n\n    const updateTickersUI = React.useCallback((_page) => {\n        setPage(_page);\n        if (ammMap && Object.keys(ammMap).length > 0) {\n            const _keys = []\n            for (let i = (page - 1) * pageSize; i < Object.keys(ammMap).length && i < (page - 1) * pageSize + pageSize; i++) {\n                _keys.push(Object.keys(ammMap)[ i ]);\n            }\n            \n            // setKeys(_keys);\n            updateTickerLoop(_keys);\n            // try{\n            //    // socketStart({})\n            // }catch (error){\n            //\n            // }\n\n\n        }\n    }, [ammMap, pageSize]);\n    React.useEffect(() => {\n        if(ammMap && Object.keys(ammMap).length !== 0) {\n            updateTickersUI(page)\n        }\n    }, []);\n\n    React.useEffect(() => {\n        switch (tickerStatus) {\n            case \"ERROR\":\n                console.log(\"ERROR\", 'get ticker error,ui');\n                tickerStatusUnset()\n                break;\n            case \"PENDING\":\n                break;\n            case \"DONE\":\n                tickerStatusUnset();\n                \n                updateRawData(tickerMap)\n                break;\n            default:\n                break;\n        }\n    }, [tickerStatus, tickerStatusUnset]);\n\n    React.useEffect(() => {\n        switch (ammMapStatus) {\n            case \"ERROR\":\n                console.log(\"ERROR\", 'get ammMap error,ui');\n                ammMapStatusUnset();\n                break;\n            case STATUS.PENDING:\n                console.log(\"PENDING\", 'get ammMap error,ui');\n                break;\n            case STATUS.DONE:\n                ammMapStatusUnset();\n                updateTickersUI(1)\n                break;\n            default :\n                break;\n        }\n    }, [ammMapStatus, ammMapStatusUnset, updateTickersUI]);\n\n\n\n    return {\n        page,\n        rawData,\n        updateTickersUI,\n    }\n}\n\n","import React  from 'react';\nimport detectEthereumProvider from '@metamask/detect-provider';\nimport { useCustomDCEffect } from 'hooks/common/useCustomDCEffect';\nimport { useSystem } from './stores/system';\nimport { ChainId } from 'loopring-sdk';\nimport { useAmmMap } from './stores/Amm/AmmMap';\nimport { STATUS } from './stores/constant';\nimport { useTokenMap } from './stores/token';\nimport { useWalletLayer1 } from './stores/walletLayer1';\nimport { useAccount } from './stores/account/hook';\n\n\n/**\n * @description call it when bootstrap the page or change the network\n */\nexport function useInit(){\n    const [state,setState] = React.useState<keyof typeof STATUS>('PENDING')\n    const systemState = useSystem();\n    const tokenState = useTokenMap();\n    const ammMapState = useAmmMap();\n    const accountState  = useAccount();\n    const walletLayer1State  =  useWalletLayer1()\n    //store.getState().account\n    // const socketState =   useSocket();\n\n    useCustomDCEffect(async() => {\n\n        const handleChainChanged = (chainId: any) => {\n    \n            // const network = chainId == ChainId.GORLI ? NETWORK.Goerli : NETWORK.MAIN\n             systemState.updateSystem({ chainId })\n             window.location.reload();\n        }\n\n        const handleAccountChanged = (accounts: Array<string>) => {\n            window.location.reload()\n        }\n\n        const provider: any = await detectEthereumProvider()\n        if (provider) {\n            const chainId = Number(await provider.request({ method: 'eth_chainId' }))\n            const accounts = await provider.request({ method: 'eth_requestAccounts' })\n\n            provider.on('accountsChanged', handleAccountChanged)\n            provider.on('chainChanged', ()=>{handleChainChanged(chainId)} )\n            // @ts-ignore\n            systemState.updateSystem({ chainId  })\n           //handleChainChanged(chainId)\n            \n        } else {\n            systemState.updateSystem({chainId:ChainId.MAINNET})\n        }\n\n    }, [])\n\n    React.useEffect(() => {\n        switch (systemState.status) {\n            case \"ERROR\":\n                systemState.statusUnset();\n                setState('ERROR')\n                //TODO show error at button page show error  some retry dispat again\n                break;\n            case \"DONE\":\n                systemState.statusUnset();\n                //TODO do some static information update\n                //tokenState.getTokenMap();\n                break;\n            default:\n                break;\n\n        }\n    },[\n        systemState,\n        // systemState.status,\n        // systemState.statusUnset,\n        //tokenState.getTokenMap\n\n    ]);\n    React.useEffect(() => {\n        if(ammMapState.status ===\"ERROR\" || tokenState.status === \"ERROR\"){\n            //TODO: solve error\n            ammMapState.statusUnset();\n            tokenState.statusUnset();\n            setState('ERROR');\n        }else if(ammMapState.status ===\"DONE\" && tokenState.status === \"DONE\"){\n            ammMapState.statusUnset();\n            tokenState.statusUnset();\n            setState('DONE');\n        }\n    },[ammMapState,tokenState,accountState.accountId,walletLayer1State])\n\n    // React.useEffect(()=>{\n    //\n    // },[])\n\n\n\n    return {\n        state,\n    }\n\n}\n","import { Trans, useTranslation } from 'react-i18next';\nimport { Box, Container, Link, Slide, Typography } from '@material-ui/core';\nimport styled from '@emotion/styled';\nimport { ErrorObject } from '@loopring-web/common-resources';\nimport { getContactInfo } from '../../utils/dt_tools';\n\nconst StyleBox = styled(Box)`\n  //background-image: url('./static/images/error_bg.png');\n  //background-repeat: no-repeat;\n  //background-size: contain;\n  //background-position: bottom;\n  //white-space: pre-wrap;\n  ////h2{\n  ////  position: relative;\n  ////}\n  /*\n  Set the color of the icon\n*/\n  svg path,\n  svg rect{\n    fill: ${({theme}) => theme.colorBase.primaryLight};\n  }\n` as typeof Box\n\nexport const LoadingPage = () => {\n    const {t} = useTranslation('layout');\n    return <>\n        {/*<Container>*/}\n            {/*style={{height: '100%' }}*/}\n            <StyleBox flex={1} display={'flex'} alignItems={'center'} justifyContent={'center'}\n                      flexDirection={'column'} height={'100%'}  width={'100%'}>\n                <div className=\"loader loader--style3\" title=\"2\">\n                    <svg version=\"1.1\" id=\"loader-1\" xmlns=\"http://www.w3.org/2000/svg\"\n                         xmlnsXlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n                         width=\"40px\" height=\"40px\" viewBox=\"0 0 50 50\" enableBackground={'new 0 0 50 50'}\n                         xmlSpace=\"preserve\">\n  <path fill=\"#000\"\n        d=\"M43.935,25.145c0-10.318-8.364-18.683-18.683-18.683c-10.318,0-18.683,8.365-18.683,18.683h4.068c0-8.071,6.543-14.615,14.615-14.615c8.072,0,14.615,6.543,14.615,14.615H43.935z\">\n    <animateTransform attributeType=\"xml\"\n                      attributeName=\"transform\"\n                      type=\"rotate\"\n                      from=\"0 25 25\"\n                      to=\"360 25 25\"\n                      dur=\"0.6s\"\n                      repeatCount=\"indefinite\"/>\n    </path>\n  </svg>\n                </div>\n                {/*<StyleBox>*/}\n                {/*<Slide direction=\"up\" in={true} mountOnEnter unmountOnExit>*/}\n                {/*<Box textAlign={'center'} >*/}\n                {/*    <Typography component={'h1'} variant={'h1'} fontWeight={500} fontFamily={'DINCondensed2'} fontSize={96} style={{textTransform: \"uppercase\"}} >*/}\n                {/*        {t('titleLoopring')}*/}\n                {/*    </Typography>*/}\n                {/*    <Typography component={'h2'}   marginTop={3}  fontSize={32} fontFamily={'DINCondensed2'}>*/}\n                {/*        {t('labelLoopringDescribe')}*/}\n                {/*    </Typography>*/}\n                {/*    /!*<Typography marginY={2} component={'p'} variant={'body1'} color={'textSecondary'}>*!/*/}\n                {/*    /!*    <Trans i18nKey={message}>*!/*/}\n                {/*    /!*        If you believe this is indeed a bug, please <Link*!/*/}\n                {/*    /!*        component={'a'}*!/*/}\n                {/*    /!*        onClick={(e) => {*!/*/}\n                {/*    /!*            window.location.href = getContactInfo();*!/*/}\n                {/*    /!*            e.preventDefault();*!/*/}\n                {/*    /!*        }}*!/*/}\n                {/*    /!*    >contact us</Link> <br/> We would appreciate your feedback*!/*/}\n\n                {/*    /!*    </Trans>*!/*/}\n                {/*    /!*    /!*{t(message)}*!/*!/*/}\n                {/*    /!*    /!*{t(messageKey)}*!/*!/*/}\n                {/*    /!*</Typography>*!/*/}\n                {/*</Box>*/}\n                {/*</Slide>*/}\n                {/*</StyleBox>*/}\n            </StyleBox>\n\n        {/*</Container>*/}\n\n        {/*<Footer></Footer>*/}\n    </>\n}\n","import { useCallback } from \"react\";\nimport { useDispatch } from \"react-redux\"\n\nimport {\n    setShowDeposit,\n    setShowResetAccount,\n    setShowTransfer,\n    setShowWithdraw,\n} from '@loopring-web/component-lib'\nimport { useTranslation } from \"react-i18next\";\nimport store from 'stores'\nimport { AccountStatus } from \"state_machine/account_machine_spec\";\n\nexport function useModals() {\n\n    const dispatch = useDispatch()\n\n    const { t } = useTranslation('common')\n\n    const ShowDeposit = useCallback((isShow: boolean, defaultProps?: any)=>{\n        const isNoAccount = store.getState().account.status === AccountStatus.NOACCOUNT\n\n        console.log('isNoAccount: ', isNoAccount, t('depositTitleAndActive'))\n        const action = {\n            isShow,\n            props: {\n                title: isNoAccount ? t('depositTitleAndActive') : t('depositTitle'),\n                description: 'depositAndActiveDescription',\n                ...defaultProps\n            },\n        }\n        dispatch(setShowDeposit(action))\n    }, [dispatch, t])\n    const ShowTransfer = useCallback((isShow: boolean, defaultProps?: any) => dispatch(setShowTransfer({isShow, props: {...defaultProps}})), [dispatch])\n    const ShowWithdraw = useCallback((isShow: boolean, defaultProps?: any) => dispatch(setShowWithdraw({isShow, props: {...defaultProps}})), [dispatch])\n    const ShowResetAccount = useCallback((isShow: boolean, defaultProps?: any) => dispatch(setShowResetAccount({isShow, props: {...defaultProps}})), [dispatch])\n\n    return {\n        ShowDeposit,\n        ShowTransfer,\n        ShowWithdraw,\n        ShowResetAccount,\n    }\n}","import React, { useCallback, useState } from 'react'\n\nimport { useTranslation } from 'react-i18next'\n\nimport {\n    ButtonComponentsMap,\n    CoinMap,\n    GatewayItem,\n    gatewayList as DefaultGatewayList,\n    headerMenuData,\n    HeaderMenuTabStatus,\n    headerToolBarData,\n    HeadMenuTabKey,\n    LanguageKeys,\n    LockIcon,\n    ThemeKeys,\n    UnLockIcon,\n    WalletStatus,\n    WithdrawType,\n    WithdrawTypes,\n} from '@loopring-web/common-resources'\n\nimport { useAccount, useConnect, useUnlock, useWeb3Account, } from 'stores/account/hook'\n\nimport { getShortAddr } from 'utils/web3_tools'\n\nimport { AccountStatus } from 'state_machine/account_machine_spec'\n\nimport { useCustomDCEffect } from 'hooks/common/useCustomDCEffect'\n\nimport { Theme, } from 'defs/common_defs'\n\nimport {\n    AmmProps,\n    Button,\n    DepositProps,\n    ResetProps,\n    SwapProps,\n    SwitchData,\n    TradeBtnStatus,\n    TransferProps,\n    useOpenModals,\n    useSettings,\n    WithdrawProps\n} from '@loopring-web/component-lib'\n\nimport store from 'stores'\n\nimport * as sdk from 'loopring-sdk'\nimport {\n    ConnectorNames,\n    dumpError400,\n    GetNextStorageIdRequest,\n    GetOffchainFeeAmtRequest,\n    LoopringMap,\n    OffchainFeeReqType,\n    OffChainWithdrawalRequestV3,\n    OriginTransferRequestV3,\n    toBig,\n    TokenInfo,\n    VALID_UNTIL\n} from 'loopring-sdk'\nimport { Typography } from '@material-ui/core';\nimport { AccountInfoProps, CoinType, } from '@loopring-web/component-lib';\nimport { useEtherscan } from 'hooks/web3/useWeb3'\n\nimport { useModals } from 'hooks/modal/useModals'\nimport Web3 from 'web3'\n\nimport { AmmData, AmmInData, IBData, TradeCalcData, WalletMap } from '@loopring-web/common-resources'\n\nimport { makeWalletLayer2 } from 'hooks/help'\nimport { useWalletLayer2 } from 'stores/walletLayer2'\nimport { useTokenMap } from 'stores/token'\nimport { LoopringAPI } from 'stores/apis/api'\nimport { BIG10 } from 'defs/swap_defs'\nimport { useWalletLayer1 } from '../../stores/walletLayer1';\nimport { myLog } from 'utils/log_tools'\n\nexport const useHeader = () => {\n    const {i18n, t} = useTranslation(['common', 'layout'])\n    const {setTheme, themeMode, language, setLanguage} = useSettings();\n    const {ShowDeposit} = useModals()\n    const {modals: {isShowAccountInfo, isShowConnect}, setShowConnect, setShowAccountInfo} = useOpenModals()\n\n    const forceUpdate = React.useReducer((bool) => !bool, false)[ 1 ]\n    const {account} = useAccount()\n\n    const {lock, unlock} = useUnlock()\n\n    const {connect} = useConnect()\n\n    const {etherscanUrl} = useEtherscan()\n\n    const gatewayList: GatewayItem[] = [\n        {\n            ...DefaultGatewayList[ 0 ],\n            handleSelect: () => {\n                myLog('try to connect to ', ConnectorNames.Injected)\n                connect(ConnectorNames.Injected, true)\n                setShowConnect({isShow: false})\n            }\n        },\n        {\n            ...DefaultGatewayList[ 1 ],\n            handleSelect: () => {\n                connect(ConnectorNames.WalletConnect, true)\n                setShowConnect({isShow: false})\n            }\n        },\n        {\n            ...DefaultGatewayList[ 2 ],\n            handleSelect: () => {\n                connect(ConnectorNames.Ledger, true)\n                setShowConnect({isShow: false})\n            }\n        },\n        {\n            ...DefaultGatewayList[ 3 ],\n            handleSelect: () => {\n                connect(ConnectorNames.Trezor, true)\n                setShowConnect({isShow: false})\n            }\n        },\n    ]\n    // const [showAccountInfo, setShowAccountInfo] = React.useState(account?.accAddr ? true : false)\n    const [accountInfoProps, setAccountInfoProps] = React.useState<undefined | AccountInfoProps>(undefined)\n    //const theme: any = useTheme()\n\n    const onNotification = React.useCallback(async () => {\n        myLog('onNotification click')\n    }, [])\n\n    const onWalletBtnConnect = React.useCallback(async () => {\n        const acc = store.getState().account\n        myLog(`onWalletBtnConnect click: ${acc.status}`)\n\n        switch (acc.status) {\n            case AccountStatus.UNCONNNECTED:\n                setShowConnect({isShow: true})\n                break\n            case AccountStatus.NOACCOUNT:\n            case AccountStatus.CONNECTED:\n            case AccountStatus.LOCKED:\n            case AccountStatus.ACTIVATED:\n                setShowAccountInfo({isShow: true})\n                break\n            default:\n                break\n        }\n    }, [setShowConnect, setShowAccountInfo])\n\n    const onThemeBtnClick = React.useCallback(async (themeMode: ThemeKeys) => {\n        if (themeMode === Theme.dark) {\n            setTheme(Theme.light)\n        } else {\n            setTheme(Theme.dark)\n        }\n    }, [setTheme])\n\n    const onLangBtnClick = (lang: LanguageKeys) => {\n        setLanguage(lang);\n    }\n\n\n    useCustomDCEffect(() => {\n\n\n        headerToolBarData[ ButtonComponentsMap.WalletConnect ] = {\n            ...headerToolBarData[ ButtonComponentsMap.WalletConnect ],\n            handleClick: onWalletBtnConnect,\n        }\n\n        // headerToolBarData[ButtonComponentsMap.Notification] = { ...headerToolBarData[ButtonComponentsMap.Theme], themeMode: theme.mode, handleClick: onNotification }\n        // headerToolBarData.update(ButtonComponentsMap.WalletConnect,value=>{\n        //   return {...value, handleClick:onWalletBtnConnect}});\n        headerToolBarData[ ButtonComponentsMap.Theme ] = {\n            ...headerToolBarData[ ButtonComponentsMap.Theme ],\n            themeMode,\n            handleClick: onThemeBtnClick\n        }\n        // headerToolBarData.update(ButtonComponentsMap.Theme,value=>{\n        //   return {...value, themeMode:theme.mode, handleClick:onThemeBtnClick}});\n\n        headerToolBarData[ ButtonComponentsMap.Language ] = {\n            ...headerToolBarData[ ButtonComponentsMap.Language ],\n            handleChange: onLangBtnClick\n        }\n        // headerToolBarData.update(ButtonComponentsMap.Language,value=>{\n        //  return  {...value, language:i18n.language, handleClick:onThemeBtnClick}});\n    }, [themeMode, language, i18n, onWalletBtnConnect, onThemeBtnClick, onLangBtnClick, onNotification, t]);\n\n    const UnlockBtn = ({onClick}: { onClick: ({...props}: any) => void }) => {\n        return <Button className={'unlock'} startIcon={<UnLockIcon fontSize={'large'}/>}\n                       onClick={(event) => {\n                           onClick(event)\n                       }} variant={'outlined'}>\n            <Typography variant={'body2'} marginTop={1 / 2}>   {t('labelUnLockLayer2')} </Typography>\n        </Button>\n    }\n\n    const lockCallback = React.useCallback((event) => {\n        lock(account)\n    }, [account,lock])\n    const unLockCallback = React.useCallback((event) => {\n        unlock(account)\n    }, [account,unlock])\n\n    const LockBtn = ({onClick}: { onClick: ({...props}: any) => void }) => {\n        return <Button className={'lock'} startIcon={<LockIcon fontSize={'large'}/>}\n                       onClick={(event) => {\n                           onClick(event)\n                       }} variant={'outlined'}>\n            <Typography variant={'body2'} marginTop={1 / 2}>  {t('labelLockLayer2')} </Typography>\n        </Button>\n    }\n\n    useCustomDCEffect(() => {\n\n        if (!account) {\n            myLog('account' + account + '* exit')\n            setAccountInfoProps(undefined)\n            return\n        }\n\n        const {status} = account\n\n        const addr = getShortAddr(account?.accAddr)\n\n        const updateHeaderMenuWhenHasAccountInfo = ({status}: { status: keyof typeof AccountStatus }) => {\n            headerMenuData[ HeadMenuTabKey.Layer2 ] = {\n                ...headerMenuData[ HeadMenuTabKey.Layer2 ],\n                status: HeaderMenuTabStatus.default\n            }\n            let props: AccountInfoProps | undefined = undefined;\n            if (status === AccountStatus.ACTIVATED) {\n                props = {\n                    addressShort: addr ? addr : '',\n                    address: account?.accAddr,\n                    level: 'VIP 1',\n                    etherscanLink: etherscanUrl + account?.accAddr,\n                    //TODO: changed by account status\n                    mainBtn: <LockBtn onClick={(_event) => {\n                        lockCallback(_event)\n                    }}/>,\n                    connectBy: ''\n                }\n                setShowAccountInfo({isShow: false})\n            } else if (status === AccountStatus.LOCKED) {\n                props = {\n                    addressShort: addr ? addr : '',\n                    address: account?.accAddr,\n                    level: 'VIP 1',\n                    etherscanLink: etherscanUrl + account?.accAddr,\n                    //TODO: changed by account status\n                    mainBtn: <UnlockBtn onClick={(_event) => {\n                        unLockCallback(_event)\n                    }}/>,\n                    connectBy: ''\n                }\n                setShowAccountInfo({isShow: true})\n            } else if (status === AccountStatus.UNACTIVATED\n                || status === AccountStatus.NOACCOUNT\n                || status === AccountStatus.DEPOSITING\n                || status === AccountStatus.DEPOSIT_TO_CONFIREM\n                || status === AccountStatus.ARPROVING\n                || status === AccountStatus.APPROV_TO_CONFIRM\n            ) {\n                props = {\n                    addressShort: addr ? addr : '',\n                    address: account?.accAddr,\n                    //TODO: level\n                    level: 'VIP 1',\n                    etherscanLink: etherscanUrl + account?.accAddr,\n                    //TODO: changed by account status\n                    connectBy: ''\n                }\n                setShowAccountInfo({isShow: false});\n\n            } else {\n                setShowAccountInfo({isShow: false})\n            }\n\n            if (props) {\n                props.connectBy = account.connectName\n            }\n\n            if (status === AccountStatus.NOACCOUNT && props) {\n                props.onLock = () => {\n                    setShowAccountInfo({isShow: false})\n                    ShowDeposit(true)\n                }\n            }\n\n            setAccountInfoProps(props)\n        }\n        switch (status) {\n            case AccountStatus.UNCONNNECTED:\n                headerToolBarData[ ButtonComponentsMap.WalletConnect ] = {\n                    ...headerToolBarData[ ButtonComponentsMap.WalletConnect ],\n                    label: t('labelConnectWallet'),\n                    status: WalletStatus.default\n                }\n                headerMenuData[ HeadMenuTabKey.Layer2 ] = {\n                    //TODO:  HeaderMenuTabStatus.hidden\n                    ...headerMenuData[ HeadMenuTabKey.Layer2 ], status: HeaderMenuTabStatus.hidden\n                }\n                setShowAccountInfo({isShow: false})\n                break\n            case AccountStatus.LOCKED:\n                headerToolBarData[ ButtonComponentsMap.WalletConnect ] = {\n                    ...headerToolBarData[ ButtonComponentsMap.WalletConnect ],\n                    label: addr,\n                    status: WalletStatus.connect\n                };\n\n                updateHeaderMenuWhenHasAccountInfo({status});\n                break\n            case AccountStatus.ACTIVATED:\n                headerToolBarData[ ButtonComponentsMap.WalletConnect ] = {\n                    ...headerToolBarData[ ButtonComponentsMap.WalletConnect ],\n                    label: addr,\n                    status: WalletStatus.unlock\n                }\n\n                updateHeaderMenuWhenHasAccountInfo({status});\n                break\n            case AccountStatus.UNACTIVATED:\n            case AccountStatus.NOACCOUNT:\n                headerToolBarData[ ButtonComponentsMap.WalletConnect ] = {\n                    ...headerToolBarData[ ButtonComponentsMap.WalletConnect ],\n                    // TODO got cache address if no show Connect Wallet\n                    label: addr,\n                    status: WalletStatus.noAccount\n                }\n\n                updateHeaderMenuWhenHasAccountInfo({status});\n                break\n            case AccountStatus.DEPOSITING:\n            case AccountStatus.DEPOSIT_TO_CONFIREM:\n            case AccountStatus.ARPROVING:\n            case AccountStatus.APPROV_TO_CONFIRM:\n                headerToolBarData[ ButtonComponentsMap.WalletConnect ] = {\n                    ...headerToolBarData[ ButtonComponentsMap.WalletConnect ],\n                    label: addr,\n                    status: WalletStatus.accountPending\n                }\n                updateHeaderMenuWhenHasAccountInfo({status});\n\n                break\n        }\n        forceUpdate()\n    }, [account, etherscanUrl, setAccountInfoProps])\n\n    return {\n        headerToolBarData,\n        headerMenuData,\n        gatewayList,\n        isShowConnect,\n        isShowAccountInfo,\n        setShowAccountInfo,\n        setShowConnect,\n        // open,\n        // setOpen,\n        // openConnect,\n        // setOpenConnect,\n        account,\n        accountInfoProps,\n\n    }\n\n}\n\nexport function useChargeFeeList(tokenSymbol: string | undefined, requestType: OffchainFeeReqType,\n                                 tokenMap: LoopringMap<TokenInfo> | undefined, amount?: number) {\n\n    const {accountId, apiKey,} = useAccount()\n\n    const [chargeFeeList, setChargeFeeList] = useState<any[]>([])\n\n    useCustomDCEffect(async () => {\n\n        if (!accountId || !tokenSymbol || !tokenMap || !LoopringAPI.userAPI) {\n            return\n        }\n\n        let chargeFeeList: any[] = []\n\n        try {\n            const tokenInfo = tokenMap[ tokenSymbol ]\n\n            const request: GetOffchainFeeAmtRequest = {\n                accountId,\n                tokenSymbol,\n                requestType,\n                amount: amount ? toBig(amount).times('1e' + tokenInfo.decimals).toFixed(0, 0) : undefined\n            }\n\n            const response = await LoopringAPI.userAPI.getOffchainFeeAmt(request, apiKey)\n\n            if (response) {\n                response.raw_data.fees.forEach((item: any, index: number) => {\n                    const feeRaw = item.fee\n                    const tokenInfo = tokenMap[ item.token ]\n                    const fee = sdk.toBig(item.fee).div(BIG10.pow(sdk.toBig(tokenInfo.decimals))).toNumber()\n                    chargeFeeList.push({belong: item.token, fee, __raw__: feeRaw})\n                })\n\n                setChargeFeeList(chargeFeeList)\n            }\n            myLog('response:', response)\n\n        } catch (reason) {\n            dumpError400(reason)\n        }\n\n\n        setChargeFeeList(chargeFeeList)\n\n    }, [accountId, apiKey, LoopringAPI.userAPI, requestType, tokenSymbol, tokenMap])\n\n    return {\n        chargeFeeList,\n    }\n\n}\n\nexport function useModalProps() {\n\n    const {\n        ShowDeposit,\n        ShowTransfer,\n        ShowWithdraw,\n        ShowResetAccount,\n    } = useModals()\n\n    const {chainId, isConnected, connector,} = useWeb3Account()\n\n    const {account, apiKey, accountId, eddsaKey,} = useAccount()\n\n    const {totalCoinMap: coinMap, tokenMap, marketArray, marketCoins, marketMap,} = useTokenMap()\n\n    const walletLayer2State = useWalletLayer2();\n    const walletLayer1State = useWalletLayer1();\n    const [walletMap1, setWalletMap1] = useState<WalletMap<any> | undefined>(undefined);\n    const [walletMap2, setWalletMap2] = useState<WalletMap<any> | undefined>(undefined);\n\n    //HIGH: effect by wallet state update\n    useCustomDCEffect(() => {\n        if (walletLayer2State.walletLayer2) {\n            let {walletMap} = makeWalletLayer2();\n            setWalletMap2(walletMap)\n        }\n        if (walletLayer1State.walletLayer1) {\n            // let {walletMap} =  makeWalletLayer1();\n            setWalletMap1(walletLayer1State.walletLayer1)\n        }\n    }, [walletLayer1State.walletLayer1, walletLayer2State.walletLayer2])\n\n    useCustomDCEffect(() => {\n        switch (walletLayer2State.status) {\n            case \"ERROR\":\n                walletLayer2State.statusUnset();\n                // setState('ERROR')\n                //TODO: show error at button page show error  some retry dispath again\n                break;\n            case \"DONE\":\n                walletLayer2State.statusUnset();\n                let {walletMap} = makeWalletLayer2();\n                setWalletMap2(walletMap)\n                break;\n            default:\n                break;\n\n        }\n    }, [walletLayer2State])\n\n    useCustomDCEffect(() => {\n        switch (walletLayer1State.status) {\n            case \"ERROR\":\n                walletLayer1State.statusUnset();\n                // setState('ERROR')\n                //TODO: show error at button page show error  some retry dispath again\n                break;\n            case \"DONE\":\n                walletLayer1State.statusUnset();\n                setWalletMap1(walletLayer1State.walletLayer1);\n                break;\n            default:\n                break;\n\n        }\n    }, [walletLayer1State])\n\n    // deposit\n    const [depositValue, setDepositValue] = useState<IBData<any>>({\n        belong: undefined,\n        tradeValue: 0,\n        balance: 0\n    } as IBData<unknown>)\n\n    const deposit = useCallback(async (token: string, amt: any) => {\n\n        const exchangeInfo = store.getState().system.exchangeInfo\n\n        if (!LoopringAPI.exchangeAPI || !tokenMap || !isConnected || !connector || !exchangeInfo?.exchangeAddress || !exchangeInfo?.depositAddress) {\n            return\n        }\n\n        try {\n            const tokenInfo: TokenInfo = tokenMap[ token ]\n\n            const provider = await connector.getProvider()\n            const web3 = new Web3(provider as any)\n\n            let sendByMetaMask = account.connectName === ConnectorNames.Injected\n\n            const gasPrice = store.getState().system.gasPrice ?? 20\n            const gasLimit = parseInt(tokenInfo.gasAmounts.deposit)\n\n            const nonce = await sdk.getNonce(web3, account.accAddr)\n\n            const response = await sdk.approveMax(web3, account.accAddr, tokenInfo.address,\n                exchangeInfo?.depositAddress, gasPrice, gasLimit, chainId, nonce, sendByMetaMask)\n\n            const fee = 0\n\n            const response2 = await sdk.deposit(web3, account.accAddr,\n                exchangeInfo?.exchangeAddress, tokenInfo, amt, fee,\n                gasPrice, gasLimit, chainId, nonce + 1, sendByMetaMask)\n\n            myLog('!!!!deposit r:', response2)\n\n        } catch (reason) {\n            dumpError400(reason)\n        }\n\n    }, [chainId, isConnected, connector, account, tokenMap])\n\n    let depositProps: DepositProps<any, any> = {\n        tradeData: {belong: undefined},\n        coinMap: coinMap as CoinMap<any>,\n        walletMap: walletMap1 as WalletMap<any>,\n        depositBtnStatus: TradeBtnStatus.AVAILABLE,\n        onDepositClick: (tradeData: any) => {\n            if (depositValue && depositValue.belong) {\n                deposit(depositValue.belong.toString(), depositValue.tradeValue)\n            }\n            ShowDeposit(false)\n        },\n        handlePanelEvent: async (data: SwitchData<any>, switchType: 'Tomenu' | 'Tobutton') => {\n            return new Promise((res) => {\n                if (data?.tradeData?.belong) {\n                    if (depositValue !== data.tradeData) {\n                        setDepositValue(data.tradeData)\n                    }\n                    setTokenSymbol(data.tradeData.belong)\n                } else {\n                    setDepositValue({belong: undefined, tradeValue: 0, balance: 0} as IBData<unknown>)\n                }\n                res();\n            })\n        },\n    }\n\n    // transfer\n    const [transferValue, setTransferValue] = useState<IBData<any>>({\n        belong: undefined,\n        tradeValue: 0,\n        balance: 0\n    } as IBData<unknown>)\n\n    const [transferTokenSymbol, setTransferTokenSymbol] = useState<string>('')\n\n    const {chargeFeeList: transferFeeList} = useChargeFeeList(transferTokenSymbol, OffchainFeeReqType.TRANSFER, tokenMap)\n\n    const [feeInfo, setFeeInfo] = useState<any>()\n\n    const [payeeAddr, setPayeeAddr] = useState<string>()\n\n    useCustomDCEffect(() => {\n\n        if (transferFeeList.length > 0) {\n            setFeeInfo(transferFeeList[ 0 ])\n        }\n\n    }, [transferFeeList])\n\n    const transfer = useCallback(async (transferValue: any) => {\n\n        const exchangeInfo = store.getState().system.exchangeInfo\n\n        if (!LoopringAPI.userAPI || !LoopringAPI.exchangeAPI || !exchangeInfo\n            || !connector || !apiKey || !chainId || !accountId || !account?.accAddr) {\n            return\n        }\n\n        if (!tokenMap || !feeInfo || !payeeAddr) {\n            console.error(feeInfo)\n            return\n        }\n\n        try {\n\n            const sellToken = tokenMap[ transferValue.belong ]\n\n            const feeToken = tokenMap[ feeInfo.belong ]\n\n            const transferVol = toBig(transferValue.tradeValue).times('1e' + sellToken.decimals).toFixed(0, 0)\n\n            const request: GetNextStorageIdRequest = {\n                accountId,\n                sellTokenId: sellToken.tokenId\n            }\n            const storageId = await LoopringAPI.userAPI.getNextStorageId(request, apiKey)\n\n            const provider = await connector.getProvider()\n            const web3 = new Web3(provider as any)\n\n            let walletType = account.connectName\n\n            const request2: OriginTransferRequestV3 = {\n                exchange: exchangeInfo.exchangeAddress,\n                payerAddr: account.accAddr,\n                payerId: accountId,\n                payeeAddr,\n                payeeId: 0,\n                storageId: storageId.offchainId,\n                token: {\n                    tokenId: sellToken.tokenId,\n                    volume: transferVol,\n                },\n                maxFee: {\n                    tokenId: feeToken.tokenId,\n                    volume: feeInfo.__raw__,\n                },\n                validUntil: VALID_UNTIL,\n            }\n\n            const response = await LoopringAPI.userAPI.submitInternalTransfer(request2, web3, chainId, walletType,\n                eddsaKey, apiKey, false)\n\n            myLog('transfer r:', response)\n\n        } catch (reason) {\n            dumpError400(reason)\n        }\n\n    }, [apiKey, tokenMap, payeeAddr, accountId, account, connector, chainId, eddsaKey, feeInfo])\n\n    let transferProps: TransferProps<any, any> = {\n        tradeData: {belong: undefined},\n        coinMap: coinMap as CoinMap<any>,\n        walletMap: walletMap2 as WalletMap<any>,\n        transferBtnStatus: TradeBtnStatus.AVAILABLE,\n        onTransferClick: (tradeData: any) => {\n            if (transferValue && transferValue.belong) {\n                transfer(transferValue)\n            }\n\n            ShowTransfer(false)\n        },\n        handleFeeChange(value: { belong: any; fee: number | string; __raw__?: any }): void {\n            setFeeInfo(value)\n        },\n        handlePanelEvent: async (data: SwitchData<any>, switchType: 'Tomenu' | 'Tobutton') => {\n            return new Promise((res: any) => {\n                if (data?.tradeData?.belong) {\n                    if (transferValue !== data.tradeData) {\n                        setTransferValue(data.tradeData)\n                    }\n                    setTransferTokenSymbol(data.tradeData.belong)\n                } else {\n                    setTransferValue({belong: undefined, tradeValue: 0, balance: 0} as IBData<unknown>)\n                }\n                // else{\n                //     setTransferValue({ belong: undefined, amt: 0 })\n                // }\n\n                res();\n            })\n        },\n\n        chargeFeeToken: 'ETH',\n        chargeFeeTokenList: transferFeeList,\n        handleOnAddressChange: (value: any) => {\n            myLog('transfer handleOnAddressChange', value);\n            setPayeeAddr(value)\n        },\n        handleAddressError: (_value: any) => {\n            return {error: false, message: ''}\n        }\n    }\n\n    // withdraw\n    const [withdrawValue, setWithdrawValue] = useState<IBData<any>>({\n        belong: undefined,\n        tradeValue: 0,\n        balance: 0\n    } as IBData<unknown>);\n\n    const [tokenSymbol, setTokenSymbol] = useState<string>('')\n    const [withdrawType, setWithdrawType] = useState<OffchainFeeReqType>(OffchainFeeReqType.OFFCHAIN_WITHDRAWAL)\n    const {chargeFeeList: withdrawalFeeList} = useChargeFeeList(tokenSymbol, withdrawType, tokenMap, withdrawValue.tradeValue)\n\n    const withdrawType2 = withdrawType === OffchainFeeReqType.FAST_OFFCHAIN_WITHDRAWAL ? 'Fast' : 'Standard'\n    const [withdrawFeeInfo, setWithdrawFeeInfo] = useState<any>()\n\n    const [withdrawAddr, setWithdrawAddr] = useState<string>()\n\n    useCustomDCEffect(() => {\n\n        if (withdrawalFeeList.length > 0) {\n            setWithdrawFeeInfo(withdrawalFeeList[ 0 ])\n        }\n\n    }, [withdrawalFeeList])\n\n    const withdraw = useCallback(async (withdrawValue: any) => {\n\n        const exchangeInfo = store.getState().system.exchangeInfo\n\n        if (!LoopringAPI.userAPI || !account || !account.accountId || !account.accAddr\n            || !connector || !chainId || !apiKey || !exchangeInfo\n            || !exchangeInfo.exchangeAddress || !withdrawFeeInfo\n            || !withdrawValue || !tokenMap || !withdrawAddr) {\n            console.error('withdraw return directly!', account, connector, chainId, apiKey, exchangeInfo)\n            console.error('withdraw return directly!', withdrawValue, withdrawFeeInfo, tokenMap)\n            return\n        }\n\n        const symbol = withdrawValue.belong as string\n\n        const withdrawToken = tokenMap[ symbol ]\n\n        const feeToken = tokenMap[ withdrawFeeInfo.belong ]\n\n        const amt = toBig(withdrawValue.tradeValue).times('1e' + withdrawToken.decimals).toFixed(0, 0)\n\n        try {\n\n            const request: GetNextStorageIdRequest = {\n                accountId: account.accountId,\n                sellTokenId: withdrawToken.tokenId\n            }\n\n            const storageId = await LoopringAPI.userAPI.getNextStorageId(request, apiKey)\n\n            const request2: OffChainWithdrawalRequestV3 = {\n                exchange: exchangeInfo.exchangeAddress,\n                owner: account.accAddr,\n                to: withdrawAddr,\n                accountId: account.accountId,\n                storageId: storageId.offchainId,\n                token: {\n                    tokenId: withdrawToken.tokenId,\n                    volume: amt,\n                },\n                maxFee: {\n                    tokenId: feeToken.tokenId,\n                    volume: withdrawFeeInfo.__raw__,\n                },\n                extraData: '',\n                minGas: 0,\n                validUntil: VALID_UNTIL,\n            }\n\n            const provider = await connector.getProvider()\n            const web3 = new Web3(provider as any)\n\n            const response = await LoopringAPI.userAPI.submitOffchainWithdraw(request2, web3, chainId, ConnectorNames.Injected,\n                account.eddsaKey, apiKey, false)\n\n            myLog(response)\n\n        } catch (reason) {\n            dumpError400(reason)\n        }\n\n    }, [apiKey, account, connector, chainId, withdrawFeeInfo, tokenMap, withdrawAddr])\n\n    let withdrawProps: WithdrawProps<any, any> = {\n        tradeData: {belong: undefined},\n        coinMap: coinMap as CoinMap<any>,\n        walletMap: walletMap2 as WalletMap<any>,\n        withdrawBtnStatus: TradeBtnStatus.AVAILABLE,\n        onWithdrawClick: (tradeData: any) => {\n            if (withdrawValue && withdrawValue.belong) {\n                withdraw(withdrawValue)\n            }\n            ShowWithdraw(false)\n        },\n\n        handlePanelEvent: async (data: SwitchData<any>, switchType: 'Tomenu' | 'Tobutton') => {\n            return new Promise((res: any) => {\n                if (data?.tradeData?.belong) {\n                    if (withdrawValue !== data.tradeData) {\n                        setWithdrawValue(data.tradeData)\n                    }\n                    setTokenSymbol(data.tradeData.belong)\n                } else {\n                    setWithdrawValue({belong: undefined, tradeValue: 0, balance: 0} as IBData<unknown>);\n                }\n                res();\n            })\n        },\n        withdrawType: withdrawType2,\n        withdrawTypes: WithdrawTypes,\n        chargeFeeToken: 'ETH',\n        chargeFeeTokenList: withdrawalFeeList,\n        handleFeeChange(value: { belong: any; fee: number | string; __raw__?: any }): void {\n            myLog('handleWithdrawFee', value);\n            setWithdrawFeeInfo(value)\n        },\n        handleWithdrawTypeChange: (value: any) => {\n            myLog('handleWithdrawTypeChange', value)\n            const offchainType = value === WithdrawType.Fast ? OffchainFeeReqType.FAST_OFFCHAIN_WITHDRAWAL : OffchainFeeReqType.OFFCHAIN_WITHDRAWAL\n            setWithdrawType(offchainType)\n        },\n        handleOnAddressChange: (value: any) => {\n            myLog('handleOnAddressChange', value);\n            setWithdrawAddr(value)\n        },\n        handleAddressError: (_value: any) => {\n            return {error: false, message: ''}\n        }\n    }\n\n\n    // reset\n    const [resetValue, setResetValue] = useState<IBData<any>>({\n        belong: undefined,\n        tradeValue: 0,\n        balance: 0\n    } as IBData<unknown>)\n\n\n    let resetProps: ResetProps<any, any> = {\n        tradeData: {belong: undefined},\n        coinMap: coinMap as CoinMap<any>,\n        walletMap: walletMap2 as WalletMap<any>,\n        resetBtnStatus: TradeBtnStatus.AVAILABLE,\n        onResetClick: (tradeData: any) => {\n            if (resetValue && resetValue.belong) {\n            }\n\n            ShowResetAccount(false)\n        },\n        handlePanelEvent: async (data: SwitchData<any>, switchType: 'Tomenu' | 'Tobutton') => {\n            return new Promise((res) => {\n                if (data?.tradeData?.belong) {\n                    if (resetValue !== data.tradeData) {\n                        setResetValue(data.tradeData)\n                    }\n                } else {\n                    setResetValue({belong: undefined, tradeValue: 0, balance: 0} as IBData<unknown>)\n                }\n\n                res();\n            })\n        },\n        fee: {count: 234, price: 123}\n    }\n\n    const tradeCalcData: TradeCalcData<CoinType> = {\n        coinSell: 'ETH', //name\n        coinBuy: 'LRC',\n        BtoS: 0,\n        StoB: 0,\n        sellCoinInfoMap: coinMap,\n        buyCoinInfoMap: coinMap,\n        walletMap: {},\n        slippage: 0.5,\n        // slippageTolerance: [0.1, 0.5, 1, 'slippage:N'],\n        priceImpact: '12',\n        minimumReceived: '1%',\n        fee: '1%'\n    }\n    const ammCalcData: AmmInData<{ [ key: string ]: any }> = {\n        myCoinA: {belong: 'ETH', balance: 0, tradeValue: 0},\n        myCoinB: {belong: 'LRC', balance: 0, tradeValue: 0},\n        lpCoinA: {belong: 'ETH', balance: 0, tradeValue: 0},\n        lpCoinB: {belong: 'LRC', balance: 0, tradeValue: 0},\n        lpCoin: {belong: 'LP-ETH-LRC', balance: 0, tradeValue: 0},\n        AtoB: 50,\n        coinInfoMap: coinMap as any,\n        slippage: 0.5,\n        // slippageTolerance: [0.1, 0.5, 1, 'slippage:N'],\n        feeJoin: '1',\n        feeExit: '1',\n    }\n\n\n    let swapProps: SwapProps<IBData<string>, string, any> = {\n        tradeData: undefined,\n        tradeCalcData,\n        onSwapClick: (tradeData) => {\n            myLog('Swap button click', tradeData);\n        },\n        handleSwapPanelEvent: async (data: any, switchType: any) => {\n            myLog(data, switchType)\n        },\n    };\n    let ammProps: AmmProps<AmmData<IBData<any>>, any, AmmInData<any>> = {\n        ammDepositData: {\n            coinA: {belong: 'ETH', balance: 0.3, tradeValue: 0},\n            coinB: {belong: 'LRC', balance: 1000, tradeValue: 0},\n            slippage: '',\n        },\n        ammWithdrawData: {\n            coinA: {belong: 'ETH', balance: 0.3, tradeValue: 0},\n            coinB: {belong: 'LRC', balance: 1000, tradeValue: 0},\n            slippage: '',\n        },\n        // tradeCalcData,\n        ammCalcData: ammCalcData,\n        handleAmmAddChangeEvent: (data, type) => {\n            myLog('handleAmmAddChangeEvent', data, type);\n        },\n        handleAmmRemoveChangeEvent: (data, type) => {\n            myLog('handleAmmRemoveChangeEvent', data, type);\n        },\n        onAmmRemoveClick: (data) => {\n            myLog('onAmmRemoveClick', data);\n        },\n        onAmmAddClick: (data) => {\n            myLog('onAmmAddClick', data);\n        }\n    }\n\n    return {\n        depositProps, withdrawProps, transferProps, resetProps, ammProps, swapProps,\n    }\n}\n","import { WithTranslation, withTranslation } from 'react-i18next';\nimport { Box, Modal } from '@material-ui/core';\nimport { ModalCloseButton, ModalContentStyled, ModalQRCode } from '@loopring-web/component-lib';\nimport React from 'react';\nimport { AccountInfo, AccountInfoProps } from '@loopring-web/component-lib';\n\nexport const ModalAccountInfo = withTranslation('common')(({\n                                                               onClose,\n                                                               open,\n                                                               t,\n                                                               ...rest\n                                                           }: { open:boolean, onClose:(e:any)=>void} & AccountInfoProps & WithTranslation) => {\n\n\n    return <Modal\n        open={open}\n        onClose={onClose}\n        aria-labelledby=\"Account information\"\n        aria-describedby=\"show layer2 address, unlock/locked loopring wallet, copy address\"\n    >\n        <ModalContentStyled style={{boxShadow: '24'}} minWidth='var(--modal-width)'>\n            {/*<Box paddingTop={3} paddingBottom={3} display={'flex'} flexDirection={'column'} minWidth='var(--modal-width)'>*/}\n            {/*    */}\n            {/*</Box>*/}\n            <ModalCloseButton onClose={onClose} {...{...rest, t}} />\n            <AccountInfo {...rest}/>\n        </ModalContentStyled>\n    </Modal>\n})","import { useCallback, useState, } from 'react'\n\nimport {\n    Header as HeaderUI,\n    HideOnScroll,\n    ModalWalletConnect,\n    Toast,\n} from '@loopring-web/component-lib'\n\nimport { headerRoot } from '@loopring-web/common-resources'\n\nimport { useLocation } from 'react-router-dom'\n\nimport { Toolbar, } from '@material-ui/core'\n\nimport { useHeader } from './hook'\n\nimport { useDisconnect, } from 'stores/account/hook'\nimport { ModalPanel, ModalQRCode, } from '@loopring-web/component-lib'\nimport { useModalProps } from './hook'\n\nimport { copyToClipBoard } from 'utils/obj_tools'\nimport { ModalAccountInfo } from '../../pages/AccountPage';\nimport { useTranslation } from 'react-i18next';\nimport { TOAST_TIME } from 'defs/common_defs'\n\nconst Header = ({ ...rest }: any) => {\n\n    const {\n        depositProps,\n        withdrawProps,\n        transferProps,\n        resetProps,\n        ammProps,\n        swapProps,\n    } = useModalProps()\n\n    const location = useLocation()\n\n    const {\n        headerToolBarData,\n        headerMenuData,\n        gatewayList,\n        isShowConnect,\n        isShowAccountInfo,\n        setShowAccountInfo,\n        // setShowAccountInfo,\n        setShowConnect,\n        // open,\n        // setOpen,\n        // openConnect,\n        // setOpenConnect,\n        account,\n        accountInfoProps,\n        // showAccountInfo\n    } = useHeader()\n\n    const { disconnect } = useDisconnect()\n\n    const {t} = useTranslation('common')\n\n    const onSwitch = useCallback(() => {\n        setShowAccountInfo({isShow:false})\n        setShowConnect({isShow:true})\n    }, [setShowConnect,setShowAccountInfo])\n\n    const [openQRCode, setOpenQRCode] = useState(false)\n\n    const [copyToastOpen, setCopyToastOpen] = useState(false);\n\n    return (<>\n        <Toast alertText={t('Address Copied to Clipboard!')} open={copyToastOpen} \n            autoHideDuration={TOAST_TIME} setOpen={setCopyToastOpen} severity={\"success\"} />\n\n        <ModalQRCode open={openQRCode} onClose={() => setOpenQRCode(false)} title={'ETH Address'}\n            description={account?.accAddr} url={account?.accAddr ?? ''} />\n\n        <ModalPanel transferProps={transferProps} withDrawProps={withdrawProps} \n        depositProps={depositProps} resetProps={resetProps} ammProps={ammProps} swapProps={swapProps}/>\n\n        <HideOnScroll>\n            {process.env.NODE_ENV !== 'production' && JSON.stringify(account?.status) + '\\t'\n            + account?.connectName }\n\n            <HeaderUI {...rest} headerMenuData={headerMenuData} headerToolBarData={headerToolBarData}\n                selected={location.pathname === '/' ? headerRoot : location.pathname}></HeaderUI>\n\n        </HideOnScroll>\n        <Toolbar />\n\n        <ModalWalletConnect {...{ ...rest, gatewayList, open:isShowConnect.isShow, onClose: () => setShowConnect({isShow:false}) }} />\n        {<ModalAccountInfo\n            open={isShowAccountInfo.isShow}\n            onClose={() => {setShowAccountInfo({isShow:false})}}\n            onCopy={() => {\n                copyToClipBoard(account.accAddr);\n                setCopyToastOpen(true)\n            }}\n            onViewQRCode={() => {\n                setOpenQRCode(true)\n            }}\n            onDisconnect={() => {\n                disconnect();\n                setShowAccountInfo({isShow:false});\n            }}\n            onSwitch={onSwitch}\n            {...{...accountInfoProps, ...rest}}></ModalAccountInfo>}\n    </>)\n}\n\n\nexport default Header\n\n\n\n","import React from \"react\"\nimport store from '../../stores';\nimport { TickerMap, useTicker } from '../../stores/ticker';\nimport { MarketBlockProps, QuoteTableRawDataItem, } from '@loopring-web/component-lib';\nimport { deepClone } from '../../utils/obj_tools';\nimport { useSocket } from '../../stores/socket';\nimport { TradingInterval, WsTopicType } from 'loopring-sdk';\nimport { LoopringAPI } from 'stores/apis/api'\nimport { tickerService } from '../../services/tickerService';\nimport { debounce } from \"lodash\"\nimport { globalSetup } from '@loopring-web/common-resources';\n\nconst amtCol = 5\nconst OnePageSize = 16;\nconst rowHeight = 44;\n\n// 0\nfunction isNeedCallMore(currentStartIndex: number, to: number, marketArrayLength: number, currentListLength: number, pageSize: number = OnePageSize): boolean {\n    const pageCurrent = currentStartIndex / OnePageSize\n    if (to - pageCurrent > 1) {\n        return false\n    } else if (pageSize * to < marketArrayLength && currentListLength - 4 < pageSize * (to + 1)) {\n        return true\n    } else {\n        return false\n    }\n}\n\nexport function useQuote<C extends { [ key: string ]: string }>() {\n\n\n    const {\n        tickerMap,\n        status: tickerStatus,\n        // errorMessage: errorTickerMap,\n        statusUnset: tickerStatusUnset,\n        updateTickers,\n    } = useTicker();\n    const {sendSocketTopic, socketEnd} = useSocket();\n    const {marketArray, coinMap} = store.getState().tokenMap;\n    const recommendMarkets: string[] = marketArray ? marketArray.slice(0, 4) : ['LRC-ETH', 'LRC-ETH', 'LRC-ETH', 'LRC-ETH']\n    const _marketArrayWithOutRecommend = marketArray ? marketArray.filter(item => recommendMarkets.findIndex(m => m === item) === -1) : [];\n    const [tickList, setTickList] = React.useState<any>([]);\n    const [recommendations, setRecommendations] = React.useState<MarketBlockProps<C>[]>([]);\n    const [, setTickerKeys] = React.useState<string[]>([]);\n    const [focusRowFrom, setFocusRowFrom] = React.useState<[start: number, end: number]>([0, 2]);\n    const [startIndex, setStartIndex] = React.useState<number>(-1);\n\n    const subject = React.useMemo(() => tickerService.onSocket(), []);\n\n    const updateRecommendation = React.useCallback((recommendationIndex, ticker) => {\n        if (recommendations.length) {\n          //  let _recommendations = deepClone(recommendations)\n            recommendations[ recommendationIndex ].tradeFloat = ticker\n            setRecommendations(recommendations)\n        }\n    }, [recommendations]);\n    React.useEffect(() => {\n        const subscription = subject.subscribe(({tickerMap}) => {\n            if (tickerMap) {\n                Reflect.ownKeys(tickerMap).forEach((key) => {\n                    let recommendationIndex = recommendMarkets.findIndex(ele => ele === key)\n                    if (recommendationIndex !== -1) {\n                        // setRecommendations\n                        updateRecommendation(recommendationIndex, tickerMap[ key as string ])\n                    }\n                    //TODO update related row. use socket return\n                })\n            }\n        });\n        return () => subscription.unsubscribe();\n    }, [subject,recommendations]);\n\n\n    //TODO if socket is error throw use recall will pending on it\n    // React.useEffect(() => {\n    //     switch (socketStatus) {\n    //         case \"ERROR\":\n    //             console.log(\"ERROR\", 'open websocket error get moment value from api ');\n    //             socketStatusUnset();\n    //             updateTickers(tickerKeys);\n    //             break;\n    //         default:\n    //             break;\n    //     }\n    // }, [socketStatus, socketStatusUnset]);\n    React.useEffect(() => {\n        const [from, to] = focusRowFrom\n        getTicker(from, to);\n        socketSendTicker(from*OnePageSize);\n        return () => {\n            socketEnd()\n        }\n    }, []);\n    React.useEffect(() => {\n        switch (tickerStatus) {\n            case \"ERROR\":\n                console.log(\"ERROR\", 'get ticker error,ui');\n                tickerStatusUnset()\n                break;\n            case \"PENDING\":\n                break;\n            case \"DONE\":\n                tickerStatusUnset();\n                updateRawData(tickerMap as TickerMap<C>)\n                break;\n            default:\n                break;\n        }\n    }, [tickerStatus, tickerStatusUnset]);\n    const getTicker = React.useCallback((from: number, to: number) => {\n        if (_marketArrayWithOutRecommend) {\n            let array = _marketArrayWithOutRecommend.slice(from * OnePageSize, to * OnePageSize);\n            //High: add recommendations market first time is 36个数据\n            if (from === 0) {\n                array = recommendMarkets.concat(array)\n            }\n            updateTickers(array);\n        }\n\n\n    }, [marketArray, OnePageSize, recommendMarkets])\n\n    const updateRawData = React.useCallback((tickerMap: TickerMap<C>) => {\n        let _recommendationsFloat: QuoteTableRawDataItem[] = [];\n        const _tickList = tickerMap && Object.keys(tickerMap) ? Reflect.ownKeys(tickerMap).reduce((prev, key) => {\n            // @ts-ignore\n            const [, coinA, coinB] = key.match(/(\\w+)-(\\w+)/i);\n            let _item = {\n                ...tickerMap[ key as string ],\n                pair: {\n                    coinA,\n                    coinB,\n                },\n            } as QuoteTableRawDataItem;\n\n            if (recommendMarkets.findIndex(m => m === key) !== -1) {\n                _recommendationsFloat.push(deepClone(_item))\n            }\n            prev.push(_item);\n            return prev\n        }, [] as QuoteTableRawDataItem[]) : []\n        setTickList([...tickList, ..._tickList])\n        //setTickList\n        if (focusRowFrom[ 0 ] === 0 && _recommendationsFloat.length > 0) {\n            //FIX: fix in uat env not enough pair_recommendations\n            while (_recommendationsFloat.length < 4) {\n                _recommendationsFloat.push(deepClone(_recommendationsFloat[ 0 ]));\n            }\n\n            const _recommendations = _recommendationsFloat.reduce((prev, item) => {\n                if (coinMap) {\n                    const {coinA, coinB} = item.pair;\n                    const _item: MarketBlockProps<C> = {\n                        tradeFloat: item as any,\n                        // @ts-ignore\n                        coinAInfo: coinMap[ coinA ],\n                        // @ts-ignore\n                        coinBInfo: coinMap[ coinB ]\n                    } as MarketBlockProps<C>\n                    prev.push(_item)\n                }\n                return prev\n            }, [] as MarketBlockProps<C>[])\n\n            setRecommendations(_recommendations)\n        }\n    }, [tickList, focusRowFrom])\n\n\n    // const  = (startIndex: number) => {\n    //     console.log(startIndex)\n    // }\n    const debounceGetTicker = React.useCallback(debounce((from, to) => {\n        getTicker(from, to)\n    }, globalSetup.wait), [])\n    const socketSendTicker = React.useCallback(debounce((_startIndex: number, pageSize = OnePageSize) => {\n        if(_startIndex !== startIndex)  {\n            let marketArray: string[] = _marketArrayWithOutRecommend.slice(_startIndex, _startIndex + pageSize);\n            marketArray = [...recommendMarkets, ...marketArray];\n            setTickerKeys(marketArray);\n            //High:\n            sendSocketTopic({[ WsTopicType.ticker ]: marketArray});\n        }\n    }, globalSetup.wait * 2), [startIndex])\n    const onVisibleRowsChange = React.useCallback(async (startIndex: number) => {\n        //TODO isBottom and is On prev tickerCall\n        // if (!isAtBottom(startIndex,focusRowFrom[1],_marketArrayWithOutRecommend.length,OnePageSize)\n        //     && tickerStatus !== 'PENDING'){\n        // }\n        //TODO load more\n        const [, to] = focusRowFrom\n        if (isNeedCallMore(startIndex, to, _marketArrayWithOutRecommend.length, tickList.length, OnePageSize)) {\n            console.log('getNextPage.......')\n            setFocusRowFrom([to, to + 1]);\n            debounceGetTicker(to, to + 1);\n        }\n        setStartIndex(startIndex);\n        socketSendTicker(startIndex, OnePageSize)\n    }, [focusRowFrom, OnePageSize, tickerStatus, marketArray, tickList])\n\n    return {\n        tickList,\n        recommendations,\n        // handleScroll,\n        onVisibleRowsChange\n    }\n\n}\n\nexport type CandlestickItem = {\n    close: number;\n    timeStamp: number;\n}\n\nexport const useCandlestickList = (market: string) => {\n    const [candlestickList, setCandlestickList] = React.useState<CandlestickItem[]>([])\n    const getCandlestick = React.useCallback(async (market: string) => {\n        if (LoopringAPI.exchangeAPI) {\n            const res = await LoopringAPI.exchangeAPI.getMixCandlestick({\n                market: market,\n                interval: TradingInterval.d1,\n                // start?: number;\n                // end?: number;\n                limit: 7\n            })\n            if (res && res.candlesticks && !!res.candlesticks.length) {\n                const data = res.candlesticks.map(o => ({\n                    close: o.close,\n                    timeStamp: o.timestamp\n                }))\n                setCandlestickList(data)\n            }\n            setCandlestickList([])\n        }\n        setCandlestickList([])\n    }, [])\n\n    React.useEffect(() => {\n        getCandlestick(market)\n    }, [getCandlestick, market])\n\n    return candlestickList\n}\n","import styled from '@emotion/styled';\nimport { Box, Grid, Paper } from '@material-ui/core';\nimport { TablePaddingX } from '@loopring-web/component-lib';\n\nexport const StylePaper = styled(Box)`\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  //height: 100%;\n  flex: 1;\n  background-color: ${({ theme }) => theme.colorBase.background().default};\n  border-radius: ${({ theme }) => theme.unit}px;\n  // padding: ${({ theme }) => 3 * theme.unit}px  0;\n  margin-bottom: ${({ theme }) => 2* theme.unit}px;\n  .title {\n    font-size: ${({ theme }) => theme.unit * 3}px;\n    //line-height: 19px;\n    margin-left: ${({ theme }) => 3 * theme.unit}px;\n    margin-top: ${({ theme }) => 3 * theme.unit}px;\n    // margin-bottom: ${({ theme }) => 2 * theme.unit}px;\n  }\n\n  .tableWrapper {\n    display: flex;\n    margin-top: ${({ theme }) => 3 * theme.unit}px;\n    flex: 1;\n    .rdg {\n      flex: 1;\n    }\n  }\n` as typeof Paper;\n\n\nexport const  TableWrapStyled = styled(Grid)`\n  &{\n    background-color: ${({theme}) => theme.colorBase.background().default};\n    border-radius: ${({ theme }) => theme.unit}px;\n    .rdg{\n      .rdg-header-row {\n        border-radius: ${({theme}) => theme.unit}px ${({theme}) => theme.unit}px 0 0;\n      }\n    }\n  }\n  ${({theme}) => TablePaddingX({pLeft:theme.unit * 3,pRight:theme.unit * 3})}\n` as typeof Grid\n\n//    ${({theme}) => theme.border.defaultFrame({c_key: 'blur', d_R: 1})};\n","import React from 'react'\nimport styled from '@emotion/styled/macro'\n\nimport { MarketBlock, QuoteTable, TablePaddingX, QuoteTableRawDataItem } from '@loopring-web/component-lib'\n\nimport { WithTranslation, withTranslation } from 'react-i18next'\nimport { useHistory } from 'react-router-dom'\n// import { FloatTag } from '@loopring-web/common-resources'\nimport { Box, Grid } from '@material-ui/core'\nimport { useQuote, useCandlestickList } from './hook'\nimport { LoopringAPI } from 'stores/apis/api'\nimport { TradingInterval } from 'loopring-sdk/dist'\nimport { TableWrapStyled } from 'pages/styled'\n\nconst  RowStyled = styled(Grid)`\n      & .MuiGrid-root:not(:last-of-type) > div{\n        margin-right: ${({theme}) => theme.unit * 3}px;\n      }\n` as typeof Grid\n\n\nexport type CandlestickItem = {\n  market: string;\n  data: {\n    close: number;\n    timeStamp: number;\n  }[]\n}\n\nconst QuotePage = withTranslation('common')((rest: WithTranslation) => {\n    const [candlestickList, setCandlestickList] = React.useState<any[]>([])\n    const getCandlestick = React.useCallback(async (market: string) => {\n      if (LoopringAPI.exchangeAPI) {\n        const res = await LoopringAPI.exchangeAPI.getMixCandlestick({\n          market: market,\n          interval: TradingInterval.d1,\n          // start?: number;\n          // end?: number;\n          limit: 30,\n        })\n        if (res && res.candlesticks && !!res.candlesticks.length) {\n          // const data = res.candlesticks.map(o => ({\n          //   close: o.close,\n          //   timeStamp: o.timestamp\n          // }))\n          // setCandlestickList(prev => [...prev, {\n          //   market: market,\n          //   data: data\n          // }])\n          const data = res.candlesticks.map(o => ({\n            timeStamp: o.timestamp,\n            low: o.low,\n            high: o.high,\n            open: o.open,\n            close: o.close,\n            volume: o.baseVol,\n            sign: o.close < o.open ? -1 : 1,\n          }))\n          setCandlestickList(prev => [...prev, {\n            market: market,\n            data: data\n          }])\n        }\n      }\n    }, [])\n\n    const { recommendations, tickList, onVisibleRowsChange } = useQuote()\n    React.useEffect(() => {\n      const list = recommendations.map(item => {\n        const market = `${item.coinAInfo.simpleName}-${item.coinBInfo.simpleName}`\n        return market\n      })\n      if (!!list.length) {\n        getCandlestick(list[0])\n        getCandlestick(list[1])\n        getCandlestick(list[2])\n        getCandlestick(list[3])\n      }\n    }, [recommendations, getCandlestick])\n\n    let history = useHistory()\n\n    const handleRowClick = React.useCallback((row: QuoteTableRawDataItem) => {\n      const { coinA, coinB } = row.pair\n      const tradePair = `${coinA}-${coinB}`\n      history && history.push({\n        pathname: `/trading/lite/${tradePair}`\n      })\n    }, [history])\n\n    return <Box display={'flex'} flexDirection={'column'} flex={1} >\n\n        <RowStyled container >\n\n            {/* {recommendations.map((item,index)=> <Grid key={item.coinAInfo+item.coinBInfo+index} item xs={3} >\n                    <MarketBlock {...{...item, ...rest}}></MarketBlock>\n                </Grid>\n            )} */}\n            {recommendations.map((item,index)=> {\n              const market = `${item.coinAInfo.simpleName}-${item.coinBInfo.simpleName}`\n              const chartData = candlestickList.find(o => o.market === market)?.data.sort((a: any, b: any) => a.timeStamp - b.timeStamp)\n              return (\n                <Grid key={index} item xs={3} onClick={() => {\n                  history && history.push({\n                    pathname: `/trading/lite/${market}`\n                  })\n                }}>\n                    <MarketBlock {...{...item, chartData: chartData ? chartData : [], ...rest}}></MarketBlock>\n                </Grid>\n              )\n            } \n            )}\n\n\n\n        </RowStyled>\n        <TableWrapStyled container marginY={3}  paddingBottom={2} flex={1}>\n            <Grid item xs={12} display={'flex'}>\n                <QuoteTable onVisibleRowsChange={onVisibleRowsChange} onRowClick={(index, row, col) => \n                  handleRowClick(row)\n                } rawData={tickList} {...{ ...rest }} />\n            </Grid>\n        </TableWrapStyled>\n    </Box>\n\n\n})\n\nexport default QuotePage\n","import { useCallback, useState } from 'react'\nimport moment from 'moment'\nimport { useCustomDCEffect } from 'hooks/common/useCustomDCEffect'\n\nimport { TradingInterval, Candlestick, GetCandlestickRequest, GetDepthRequest, GetTickerRequest, dumpError400, getExistedMarket } from 'loopring-sdk'\n\nimport { ChartUnit, CoinInfo } from '@loopring-web/common-resources'\n\nimport { ChartType } from '@loopring-web/component-lib'\n\nimport { TGItemData, TGItemJSXInterface, } from '@loopring-web/component-lib'\n\nimport { IGetDepthDataParams } from '@loopring-web/component-lib'\nimport { LoopringAPI } from 'stores/apis/api'\n\nconst toggleData: TGItemData[] = [\n  {\n    value: ChartType.Trend,\n    key: ChartType.Trend,\n    label: 'label' + ChartType.Trend\n  },\n  {\n    value: ChartType.Depth,\n    key: ChartType.Depth,\n    label: 'label' + ChartType.Depth\n  },\n]\n\nexport function useBasicInfo(props: any, coinAInfo: any, coinBInfo: any, marketArray: any[], t: any) {\n  const tgItemJSXs: TGItemJSXInterface[] = toggleData.map(({ value, label, key }) => {\n    return { value, tlabel: t(label), key, JSX: <>{t(label)}</> }\n  })\n\n  // const { base, quote, market, tokens } = props\n\n  const { market, amm } = getExistedMarket(marketArray, coinAInfo?.name, coinBInfo?.name)\n\n  const [chartType, setChartType] = useState<ChartType>(ChartType.Trend)\n\n  // console.log('---useBasicInfo market:', market, ' amm:', amm, ' chartType:', chartType)\n  //\n  // const [change, setChange] = useState(0)\n  //\n  // const [volume, setVolume] = useState('')\n\n  const [chartUnit, setChartUnit] = useState(ChartUnit.D1)\n\n  const [originData, setOriginData] = useState<any>(undefined)\n\n  const handleChange = useCallback((_e: React.MouseEvent, value: any) => {\n    // Settings.setChartType(value)\n    // console.log('useBasicInfo handleChange:', value)\n    setOriginData(undefined)\n    setChartType(value === 'Trend' ? ChartType.Trend : ChartType.Depth)\n  }, [setOriginData, setChartType])\n\n  const handleChartUnitChange = (event: React.MouseEvent<HTMLElement, MouseEvent>, newValue: string) => {\n      const mappedValue = newValue === '1H' ? ChartUnit.H1 : newValue === '1W' ? ChartUnit.W1 : ChartUnit.D1\n      setChartUnit(mappedValue)\n  }\n\n  // useCustomDCEffect(async () => {\n  //\n  //   if (!exchangeApi || !market || !tokens || !quote) {\n  //     return\n  //   }\n  //\n  //   let mounted = true\n  //\n  //   try {\n  //\n  //     const request: GetTickerRequest = {\n  //       market: market.market,\n  //     }\n  //\n  //     const ticker = await exchangeApi.getTicker(request)\n  //     if (mounted) {\n  //\n  //       if (ticker.tickList[0].change) {\n  //         setChange(ticker.tickList[0].change)\n  //       }\n  //\n  //       if (ticker.tickList[0].base_token_volume) {\n  //         const baseVol = fromWEI(tokens.tokenSymbolMap, base, ticker.tickList[0].base_token_volume) as string\n  //         setVolume(baseVol)\n  //       }\n  //     }\n  //   }\n  //   catch (reason) {\n  //     dumpError400(reason, 'ChartPanel getCandlestick')\n  //   }\n  //\n  //   return () => {\n  //     mounted = false\n  //   }\n  //\n  // }, [exchangeApi, market, tokens, base,])\n\n  const tgItemJSXsPriceChart: TGItemJSXInterface[] = Object.keys(ChartUnit).reduce((pre, item) => {\n    // @ts-ignore\n    const tGItemData: TGItemData = { value: ChartUnit[item], key: ChartUnit[item], label: 'label' + ChartUnit[item] };\n    pre.push({ value: tGItemData.value, tlabel: t(tGItemData.label ? tGItemData.label : tGItemData.key), key: tGItemData.key, JSX: <>{t(tGItemData.label ? tGItemData.label : tGItemData.key)}</> })\n    return pre\n  }, [] as TGItemJSXInterface[])\n\n  useCustomDCEffect(async () => {\n  \n    let mounted = true\n  \n    if (!LoopringAPI.exchangeAPI || !market || !amm) {\n      return\n    }\n  \n    if (chartType === ChartType.Trend) {\n      const request: GetCandlestickRequest = {\n        market: amm as string,\n        interval: TradingInterval.d1,\n        limit: 30\n      }\n  \n      try {\n        const candlesticks = await LoopringAPI.exchangeAPI.getCandlestick(request)\n  \n        if (mounted) {\n          const originData = candlesticks.candlesticks.map((item: Candlestick) => {\n            return {\n              timeStamp: item.timestamp,\n              low: item.low,\n              high: item.high,\n              open: item.open,\n              close: item.close,\n              volume: item.quoteVol,\n              change: (item.close - item.open) / item.open,\n              date: moment(item.timestamp).format('MMM DD')\n            }\n          })\n          setOriginData(originData)\n        }\n      }\n      catch (reason) {\n        dumpError400(reason, 'ChartPanel getCandlestick')\n      }\n  \n    } else {\n      const request: GetDepthRequest = {\n        market,\n      }\n  \n      try {\n  \n        const { depth } = await LoopringAPI.exchangeAPI.getMixDepth(request)\n        \n        if (mounted) {\n          const originData: IGetDepthDataParams = {\n            bidsPrices: depth.bids_prices,\n            bidsAmtTotals: depth.bids_amtTotals as any,\n            asksPrices: depth.asks_prices,\n            asksAmtTotals: depth.asks_amtTotals as any,\n          }\n          setOriginData(originData)\n        }\n  \n      } catch (reason) {\n        dumpError400(reason)\n      }\n  \n    }\n  \n    return () => {\n      mounted = false\n    }\n  \n  }, [LoopringAPI.exchangeAPI, amm, market, chartType])\n\n  return {\n    // change,\n    // volume,\n    chartUnit,\n    chartType,\n    tgItemJSXs,\n    tgItemJSXsPriceChart,\n    handleChange,\n    originData,\n    handleChartUnitChange,\n  }\n}","import { ChartUnit,UpColor } from '@loopring-web/common-resources'\nimport { ScaleAreaChart, ToggleButtonGroup, useSettings, TradeTitle, ChartType } from '@loopring-web/component-lib'\nimport { Box, Grid } from \"@material-ui/core\"\nimport { WithTranslation } from 'react-i18next'\nimport { useBasicInfo } from './hook'\nimport { VolToNumberWithPrecision } from 'utils/formatter_tool'\n\nconst BasicInfoPanel = ({ props, coinAInfo, coinBInfo, tradeFloat, marketArray, t, ...rest }: any & WithTranslation) => {\n\n    const {\n        // change,\n        chartType,\n        tgItemJSXs,\n        tgItemJSXsPriceChart,\n        handleChange,\n        originData,\n        chartUnit,\n        handleChartUnitChange,\n    } = useBasicInfo(props, coinAInfo, coinBInfo, marketArray, t)\n    const { upColor } = useSettings();\n    const baseToken = coinAInfo?.name\n    const quoteToken = coinBInfo?.name\n    const trendChartData = originData && !!originData.length ? originData.sort((a: any, b: any) => a.timeStamp - b.timeStamp) : []\n    const depthChartData = originData && coinAInfo && originData.asksAmtTotals ? { \n        ...originData,\n        asksAmtTotals: originData.asksAmtTotals.map((amt: string) => Number(VolToNumberWithPrecision(amt, baseToken))),\n        bidsAmtTotals: originData.bidsAmtTotals.map((amt: string) => Number(VolToNumberWithPrecision(amt, baseToken))),\n    } : []\n    return  <>\n        <Grid item xs={8}>\n            <TradeTitle {...{\n                coinAInfo, coinBInfo,\n                ...rest, t, tradeFloat\n            }}></TradeTitle>\n        </Grid>\n        <Grid item xs={4} display={'flex'} justifyContent={'flex-end'} alignItems={'flex-end'}>\n            <ToggleButtonGroup exclusive {...{ ...rest, t, tgItemJSXs, value: chartType }}\n                handleChange={handleChange} />\n        </Grid>\n\n        <Grid item xs={12} position={'relative'}>\n            <Box minHeight={256} maxHeight={256} display={'block'} style={{ height: '100%', width: '100%' }}>\n                <ScaleAreaChart \n                    type={chartType} \n                    data={chartType === ChartType.Trend ? trendChartData : depthChartData} \n                    riseColor={upColor as keyof typeof UpColor}\n                    extraInfo={quoteToken}\n                    handleMove={() => {}}\n                    showXAxis\n                />\n            </Box>\n            {/* {chartType === ChartType.Trend && (\n                <Box height={24} display={'flex'} justifyContent={'flex-end'} position={'absolute'} right={0} bottom={0}>\n                    <ToggleButtonGroup exclusive {...{\n                        ...rest, t, tgItemJSXs: tgItemJSXsPriceChart,\n                        value: chartUnit, size: 'small'\n                    }}\n                        handleChange={handleChartUnitChange} />\n                </Box>\n            )} */}\n        </Grid> \n        {/* <Grid item xs={12} height={24} display={'flex'} justifyContent={'flex-end'}>\n            <ToggleButtonGroup exclusive {...{\n                ...rest, t, tgItemJSXs: tgItemJSXsPriceChart,\n                value: chartUnit, size: 'small'\n            }}\n                handleChange={handleChartUnitChange} />\n        </Grid> */}\n    </>\n\n};\n\nexport default BasicInfoPanel\n","\n\nimport { RefAttributes, useState } from 'react'\n\nimport Tabs from '@material-ui/core/Tabs'\nimport Tab from '@material-ui/core/Tab'\nimport Checkbox from '@material-ui/core/Checkbox'\nimport styled from '@emotion/styled'\n\nimport { FormControlLabel, TradeTable, } from '@loopring-web/component-lib'\nimport { withTranslation, WithTranslation } from 'react-i18next';\nimport { CheckBoxIcon, CheckedIcon } from '@loopring-web/common-resources'\nimport { RouteComponentProps, withRouter } from 'react-router'\nimport { RawDataTradeItem, BasicHeaderItem, HeadMenuType } from '@loopring-web/component-lib'\nimport { TableWrapStyled } from '../../../styled';\n\n\nconst applyProps = (index: number) => {\n    return {\n        id: `simple-tab-${index}`,\n        'aria-controls': `simple-tabpanel-${index}`,\n    }\n}\nconst StyledTabsWrapper = styled.div`\n          position: relative;\n          width: 100%;\n          margin-top: ${({theme}) => theme.unit * 4}px;\n        `\n\nconst StyledFormControlLabel = styled(FormControlLabel)`\n          position: absolute;\n          top: 0;\n          right: ${({theme}) => theme.unit}px;\n          margin: ${({theme}) => theme.unit}px 0 0 0;\n        `\n\nconst TradePanel = withTranslation('common')(\n   // withRouter(\n    (\n        {tradeArray,  myTradeArray, t}:\n            { tradeArray: RawDataTradeItem[], myTradeArray: RawDataTradeItem[] } & WithTranslation & RouteComponentProps) => {\n        // const [isAllTrade, setIsAllTrade] = useState(false)\n        const [value, setValue] = useState(1)\n        const handleChange = (event: any, newValue: any) => {\n            setValue(newValue)\n        }\n\n        // const handleCheckboxChange = () => {\n        //     setIsAllTrade((flag: boolean) => !flag)\n        // }\n\n        return (\n            <StyledTabsWrapper>\n                {/* <StyledFormControlLabel\n                    control={<Checkbox checked={isAllTrade} size={'small'} checkedIcon={<CheckedIcon/>}\n                                       icon={<CheckBoxIcon/>} color={'default'} onChange={handleCheckboxChange}/>}\n                    label={t('labelTradePanelHideOtherPairs')}/> */}\n\n                <Tabs value={value}\n                      onChange={handleChange}\n                      aria-label=\"tabs switch\">\n                    <Tab label={t('labelMyTrade')} {...applyProps(0)} />\n                    <Tab label={t('labelRecent')}   {...applyProps(1)} />\n                </Tabs>\n\n                <TableWrapStyled marginY={2}  paddingBottom={2} flex={1}>\n                    {value === 0 ?  <TradeTable rawData={myTradeArray} /> : <TradeTable rawData={tradeArray}/> }\n                </TableWrapStyled>\n\n            </StyledTabsWrapper>\n        )\n    }\n    ) as  (props: { tradeArray: RawDataTradeItem[], myTradeArray: RawDataTradeItem[] }) => JSX.Element;\n//)\n\nexport default TradePanel\n\n","import { Box, Grid, } from '@material-ui/core'\nimport { WithTranslation, withTranslation } from 'react-i18next'\nimport { useLocation } from 'react-router-dom'\nimport BasicInfoPanel from './panel/BasicInfoPanel'\nimport TradePanel from './panel/TradePanel'\nimport styled from 'styled-components'\nimport { useSwapPage } from './hook';\nimport { SwapPanel, Toast } from '@loopring-web/component-lib'\nimport { TradeBtnStatus } from '@loopring-web/component-lib'\nimport { useTokenMap } from '../../stores/token';\nimport { TOAST_TIME } from 'defs/common_defs'\n\nconst FixedStyle = styled(Box)`\n  @media only screen and (min-height: 780px ) and (min-width: 1024px) {\n    position: fixed;\n  }\n`\n\nexport const SwapPage = withTranslation('common')(({...rest}: WithTranslation) => {\n\n    const {\n        tradeCalcData,\n        tradeData,\n        tradeFloat,\n        tradeArray,\n        myTradeArray,\n        marketArray,\n        handleSwapPanelEvent,\n        onSwapClick,\n        pair,\n        swapBtnI18nKey,\n        isSwapLoading,\n        swapToastOpen,\n        setSwapToastOpen,\n        swapAlertText,\n\n    } = useSwapPage();\n\n    const { coinMap } = useTokenMap()\n    const { pathname } = useLocation()\n    const pairNameList = pathname ? pathname.split('/')[pathname.split('/').length - 1].split('-') : ''\n    const coinA = Array.isArray(pairNameList) ? pairNameList[0] : ''\n    const coinB = Array.isArray(pairNameList) ? pairNameList[1] : ''\n    const customPair = {\n        coinAInfo: coinMap ? coinMap[coinA] : '',\n        coinBInfo: coinMap ? coinMap[coinB] : '',\n    }\n    const renderPair = customPair.coinAInfo ? customPair : pair\n\n    return <>\n\n        <Toast alertText={swapAlertText as string} open={swapToastOpen} \n            autoHideDuration={TOAST_TIME} setOpen={setSwapToastOpen}/>\n\n        <Grid container marginRight={3} alignContent={'flex-start'}>\n            <BasicInfoPanel {...{\n                ...rest,\n                ...renderPair, marketArray,\n                tradeFloat, tradeArray\n            }} />\n            <TradePanel tradeArray={tradeArray} myTradeArray={myTradeArray}/>\n        </Grid>\n\n        <Box display={'flex'} style={{minWidth: 'var(--swap-box-width)'}}>\n            <FixedStyle>\n                <SwapPanel tradeData={tradeData as any}\n                           tradeCalcData={tradeCalcData as any}\n                           onSwapClick={onSwapClick}\n                           swapBtnI18nKey={swapBtnI18nKey}\n                           swapBtnStatus={isSwapLoading ? TradeBtnStatus.LOADING : TradeBtnStatus.AVAILABLE}\n                    // handleError={}\n                           {...{handleSwapPanelEvent, ...rest}}\n                />\n            </FixedStyle>\n\n        </Box>\n\n    </>\n});\n\n\n// SwapPage\n","import { useRouteMatch } from 'react-router';\nimport {\n    CoinInfo,\n    CustomError,\n    ErrorMap,\n    globalSetup,\n    IBData,\n    TradeCalcData,\n    TradeFloat,\n    WalletMap\n} from '@loopring-web/common-resources';\nimport React, { useCallback, useEffect, useState } from 'react';\nimport { LoopringAPI } from '../../stores/apis/api';\nimport { useTokenMap } from '../../stores/token';\nimport * as fm from 'loopring-sdk';\nimport {\n    AmmPoolInfoV3,\n    AmmPoolSnapshot,\n    DepthData,\n    dumpError400,\n    getExistedMarket,\n    GetMinimumTokenAmtRequest,\n    GetNextStorageIdRequest,\n    LoopringMap,\n    OrderType,\n    SubmitOrderRequestV3,\n    VALID_UNTIL\n} from 'loopring-sdk';\nimport { useAmmMap } from '../../stores/Amm/AmmMap';\nimport { useWalletLayer2 } from '../../stores/walletLayer2';\nimport { RawDataTradeItem, SwapTradeData, SwapType, ToastProps } from '@loopring-web/component-lib';\nimport { useAccount } from '../../stores/account/hook';\nimport { useCustomDCEffect } from '../../hooks/common/useCustomDCEffect';\nimport {\n    accountStaticCallBack,\n    bntLabel,\n    btnClickMap,\n    coinPairInit,\n    fnType,\n    getUserTrades,\n    makeCache,\n    makeMarketArray,\n    makeTickView,\n    makeWalletLayer2,\n    pairDetailBlock,\n    pairDetailDone\n} from '../../hooks/help';\nimport * as _ from 'lodash'\nimport store from 'stores';\nimport { AccountStatus } from 'state_machine/account_machine_spec';\nimport { SwapData } from '@loopring-web/component-lib';\nimport { deepClone } from '../../utils/obj_tools';\nimport { debug } from 'console';\nimport { myLog } from 'utils/log_tools';\nimport { useTranslation } from 'react-i18next';\nimport { REFRESH_RATE_SLOW } from 'defs/common_defs';\nimport { accordionClasses } from '@material-ui/core';\n\nexport const useSwapPage = <C extends { [ key: string ]: any }>() => {\n    /*** api prepare ***/\n    const { t } = useTranslation('common')\n\n    const [swapToastOpen, setSwapToastOpen] = useState<boolean>(false)\n        \n    const [swapAlertText, setSwapAlertText] = useState<string>()\n    const wait = globalSetup.wait;\n    const match: any = useRouteMatch(\":symbol\")\n    const {coinMap, tokenMap, marketArray, marketCoins, marketMap,} = useTokenMap()\n    const {ammMap} = useAmmMap();\n    // const {setShowConnect, setShowAccountInfo} = useOpenModals();\n    // const {ShowDeposit} = useModals()\n    const {account} = useAccount()\n    const {delayAndUpdateWalletLayer2} = useWalletLayer2();\n\n    const walletLayer2State = useWalletLayer2();\n    const [isSwapLoading, setIsSwapLoading] = useState(false)\n    const [tradeData, setTradeData] = React.useState<SwapTradeData<IBData<C>> | undefined>(undefined);\n    const [tradeCalcData, setTradeCalcData] = React.useState<TradeCalcData<C> | undefined>(undefined);\n    const [tradeArray, setTradeArray] = React.useState<RawDataTradeItem[]>([]);\n    const [myTradeArray, setMyTradeArray] = React.useState<RawDataTradeItem[]>([]);\n    const [tradeFloat, setTradeFloat] = React.useState<TradeFloat | undefined>(undefined);\n    const [pair, setPair] = React.useState<{ coinAInfo: CoinInfo<C> | undefined, coinBInfo: CoinInfo<C> | undefined }>({\n        coinAInfo: undefined,\n        coinBInfo: undefined,\n    });\n\n    const [ammPoolSnapshot, setAmmPoolSnapshot] = React.useState<AmmPoolSnapshot | undefined>(undefined);\n\n    const [swapBtnI18nKey, setSwapBtnI18nKey] = React.useState<string | undefined>(undefined);\n\n    const [output, setOutput] = useState<any>()\n\n    const [takerRate, setTakerRate] = useState<string>('0')\n\n    const [feeBips, setFeeBips] = useState<string>('0')\n\n    useCustomDCEffect(async() => {\n\n        const base = tradeData?.sell.belong\n        const quote = tradeData?.buy.belong\n\n        if (!LoopringAPI.userAPI || !base || !quote || !ammMap || !marketArray \n            || account.status !== AccountStatus.ACTIVATED || !account.accountId || !account.apiKey) {\n            return\n        }\n\n        const {\n            amm\n        } = getExistedMarket(marketArray, base, quote)\n\n        if (!amm) {\n            return\n        }\n\n        const ammInfo = ammMap[amm]\n\n        const feeBips = ammInfo.__rawConfig__.feeBips\n\n        const req: GetMinimumTokenAmtRequest = {\n            accountId: account?.accountId,\n            market: amm,\n        }\n\n        const { amountMap } = await LoopringAPI.userAPI.getMinimumTokenAmt(req, account.apiKey)\n\n        const takerRate = amountMap[quote].userOrderInfo.takerRate\n\n        const totalFee = fm.toBig(feeBips).plus(fm.toBig(takerRate)).toString()\n\n        myLog('totalFee:', totalFee)\n        myLog('takerRate:', takerRate)\n\n        setFeeBips(totalFee)\n        setTakerRate(takerRate.toString())\n\n        setTradeCalcData({...tradeCalcData, fee: totalFee} as TradeCalcData<C>)\n\n    }, [tradeData?.sell.belong, tradeData?.buy.belong, marketArray, ammMap, \n        account.status, account.apiKey, account.accountId])\n\n    //HIGH: get Router info\n    // const symbol = match?.params.symbol ?? undefined;\n    React.useEffect(() => {\n        const symbol = match?.params.symbol ?? undefined;\n        resetSwap(symbol, undefined, undefined, undefined);\n        // const label: string | undefined = accountStaticCallBack(bntLabel)\n        // setSwapBtnI18nKey(label);\n    }, []);\n\n        //HIGH: effect by wallet state update\n    React.useEffect(() => {\n        switch (walletLayer2State.status) {\n            case \"ERROR\":\n                walletLayer2State.statusUnset();\n                // setState('ERROR')\n                //TODO: show error at button page show error  some retry dispath again\n                break;\n            case \"DONE\":\n                walletLayer2State.statusUnset();\n                const {walletMap} = makeWalletLayer2();\n                if (tradeCalcData) {\n                    setTradeCalcData({...tradeCalcData, fee: feeBips, walletMap} as TradeCalcData<C>);\n                    setTradeData({\n                        sell: {\n                            belong: tradeCalcData.sellCoinInfoMap ? tradeCalcData.sellCoinInfoMap[ tradeCalcData.coinSell ]?.simpleName : undefined,\n                            balance: walletMap ? walletMap[ tradeCalcData.coinSell ]?.count : 0\n                        },\n                        // @ts-ignore\n                        buy: {\n                            belong: tradeCalcData.sellCoinInfoMap ? tradeCalcData.sellCoinInfoMap[ tradeCalcData.coinBuy ]?.simpleName : undefined,\n                            balance: walletMap ? walletMap[ tradeCalcData.coinBuy ]?.count : 0\n                        },\n                    } as SwapTradeData<IBData<C>>)\n                    const {\n                        market\n                    } = getExistedMarket(marketArray, tradeCalcData.coinSell as string, tradeCalcData.coinBuy as string);\n                    getUserTrades(market).then((marketTrades) => {\n                        let _myTradeArray = makeMarketArray(market, marketTrades) as RawDataTradeItem[]\n                        setMyTradeArray(_myTradeArray ? _myTradeArray : [])\n                    })\n                }\n\n                break;\n            default:\n                break;\n\n        }\n    }, [walletLayer2State.status, setMyTradeArray, marketArray, tradeCalcData])\n\n    useCustomDCEffect(() => {\n        const label: string | undefined = accountStaticCallBack(bntLabel)\n        setSwapBtnI18nKey(label);\n    }, [account.status]);\n\n    const swapCalculatorCallback = useCallback(async({sell, buy, slippage, ...rest}: any) => {\n\n        const {exchangeInfo} = store.getState().system\n        setIsSwapLoading(true);\n        if (!LoopringAPI.userAPI || !tokenMap || !exchangeInfo || !output\n            || account.status !== AccountStatus.ACTIVATED) {\n\n            setSwapAlertText(t('labelSwapFailed'))\n            setSwapToastOpen(true)\n            \n            setIsSwapLoading(false)\n\n            return\n        }\n\n        const baseToken = tokenMap[ sell.belong as string ]\n        const quoteToken = tokenMap[ buy.belong as string ]\n\n        const request: GetNextStorageIdRequest = {\n            accountId: account.accountId,\n            sellTokenId: baseToken.tokenId\n        }\n\n        const storageId = await LoopringAPI.userAPI.getNextStorageId(request, account.apiKey)\n\n        try {\n\n            const request: SubmitOrderRequestV3 = {\n                exchange: exchangeInfo.exchangeAddress,\n                accountId: account.accountId,\n                storageId: storageId.orderId,\n                sellToken: {\n                    tokenId: baseToken.tokenId,\n                    volume: output.amountS\n                },\n                buyToken: {\n                    tokenId: quoteToken.tokenId,\n                    volume: output.amountBOutSlip.minReceived\n                },\n                allOrNone: false,\n                validUntil: VALID_UNTIL,\n                maxFeeBips: parseInt(feeBips),\n                fillAmountBOrS: false, // amm only false\n                orderType: OrderType.ClassAmm,\n                eddsaSignature: '',\n            }\n            \n            myLog(request)\n\n            const response = await LoopringAPI.userAPI.submitOrder(request, account.eddsaKey, account.apiKey)\n\n            myLog(response)\n\n            await delayAndUpdateWalletLayer2()\n            \n            setTradeData({\n                ...tradeData,\n                ...{\n                    sell: {...tradeData?.sell, tradeValue: 0},\n                    buy: {...tradeData?.buy, tradeValue: 0},\n                }\n            } as SwapTradeData<IBData<C>>)\n\n            setSwapAlertText(t('labelSwapSuccess'))\n            setSwapToastOpen(true)\n\n            setIsSwapLoading(false)\n\n        } catch (reason) {\n            setIsSwapLoading(false);\n            dumpError400(reason)\n\n            setSwapAlertText(t('labelSwapFailed'))\n            setSwapToastOpen(true)\n\n            setIsSwapLoading(false)\n        }\n\n        setOutput(undefined)\n\n        if (rest.__cache__) {\n            makeCache(rest.__cache__)\n        }\n        \n    },[tradeData, output, tokenMap])\n\n    const swapBtnClickArray: typeof btnClickMap = Object.assign(deepClone(btnClickMap), {\n        [ fnType.ACTIVATED ]:[swapCalculatorCallback]\n    })\n\n    const onSwapClick = React.useCallback(({sell, buy, slippage, ...rest}: SwapTradeData<IBData<C>>) => {\n        accountStaticCallBack(swapBtnClickArray, [{sell, buy, slippage, ...rest}])\n    }, [swapBtnClickArray])\n\n    const handleSwapPanelEvent = async (swapData: SwapData<SwapTradeData<IBData<C>>>, switchType: any): Promise<void> => {\n        //TODO setMarket(market);\n        // _.throttle(()=>{\n        const {tradeData} = swapData\n        return new Promise((resolve) => {\n            switch (switchType) {\n                case SwapType.SEll_CLICK:\n                    break\n                case SwapType.BUY_CLICK:\n                    break\n                case SwapType.SELL_SELECTED:\n                    resetSwap(`${tradeData.sell.belong}-${tradeData.buy.belong}`, 'sell', tradeData, ammPoolSnapshot)\n                    break\n                case SwapType.BUY_SELECTED:\n                    resetSwap(`${tradeData.sell.belong}-${tradeData.buy.belong}`, 'buy', tradeData, ammPoolSnapshot)\n                    break\n                case SwapType.EXCHANGE_CLICK:\n                    resetSwap(`${tradeData.sell.belong}-${tradeData.buy.belong}`, undefined, undefined, ammPoolSnapshot)\n                    break\n                default:\n                    break\n            }\n\n            resolve(undefined)\n        })\n        // },wait)\n\n    }\n\n    const [depth, setDepth] = useState<DepthData>()\n\n    useEffect(() => {\n        \n        const updateDepth = async() => {\n            if (!pair || !LoopringAPI.exchangeAPI || !pair.coinAInfo) {\n                return\n            }\n            const market = `${pair.coinAInfo?.simpleName}-${pair.coinBInfo?.simpleName}`\n            const { depth } = await LoopringAPI.exchangeAPI?.getMixDepth({market})\n            setDepth(depth)\n        }\n\n        updateDepth()\n        \n        const handler = setInterval(() => {\n            updateDepth()\n        }, REFRESH_RATE_SLOW)\n\n        return () => {\n            if (handler) {\n                clearInterval(handler)\n            }\n        }\n    }, [pair])\n\n    const calculateTradeData = async (type: 'sell' | 'buy', _tradeData: SwapTradeData<IBData<C>>, ammPoolSnapshot: AmmPoolSnapshot | undefined)\n        : Promise<{ _tradeCalcData: TradeCalcData<C>, _tradeData: SwapTradeData<IBData<C>> }> => {\n        \n        const market = `${pair.coinAInfo?.simpleName}-${pair.coinBInfo?.simpleName}`\n        if (!marketArray || !tokenMap || !marketMap || !depth || !ammMap || !tradeCalcData) {\n            let _tradeCalcData = {...tradeCalcData} as TradeCalcData<C>;\n            debugger\n            return {_tradeData, _tradeCalcData}\n        }\n\n        const isAtoB = type === 'sell'\n        let input: any = (isAtoB ? _tradeData.sell.tradeValue : _tradeData.buy.tradeValue)\n\n        if (input) {\n            input = (input.toString() as string).trim()\n        } else {\n            input = '0'\n        }\n\n        const base = _tradeData.sell.belong as string\n        const quote = _tradeData.buy.belong as string\n\n        let slippage = _tradeData.slippage\n\n        if (slippage === undefined) {\n            slippage = 0.5\n        }\n\n        slippage = fm.toBig(slippage).times(100).toString()\n\n        const ammMapRaw = {[ 'AMM-' + market ]: ammMap[ 'AMM-' + market ].__rawConfig__} as LoopringMap<AmmPoolInfoV3>\n\n        if (input !== '0' && input !== '0.') {\n            console.log(input, '*', base, quote, isAtoB, depth, \n                ammMap[ 'AMM-' + market ].__rawConfig__.tokens.pooled, ammPoolSnapshot?.pooled, takerRate, slippage)\n        }\n\n        const output = fm.getOutputAmount(input, base, quote, isAtoB, marketArray, tokenMap,\n            marketMap, depth, ammMapRaw, ammPoolSnapshot, takerRate, slippage)\n\n        setOutput(output)\n\n        tradeCalcData.priceImpact = output?.priceImpact as string\n        tradeCalcData.minimumReceived = output?.amountBOutSlip.minReceivedVal as string\n\n        if (isAtoB) {\n            _tradeData.buy.tradeValue = output?.output ? parseFloat(output?.output) : 0\n        } else {\n            _tradeData.sell.tradeValue = output?.output ? parseFloat(output?.output) : 0\n        }\n        //TODO: renew  tradeCalcData\n        let _tradeCalcData = {...tradeCalcData} as TradeCalcData<C>;\n        return {_tradeData, _tradeCalcData}\n        \n    }\n\n    const throttleSetValue = React.useCallback(_.debounce(async (type, _tradeData, _ammPoolSnapshot) => {\n      \n        const {_tradeData: td, _tradeCalcData} = await calculateTradeData(type, _tradeData, _ammPoolSnapshot)//.then(()=>{\n        setTradeData(td)\n        setTradeCalcData({..._tradeCalcData, fee: feeBips})\n\n    }, wait * 2), [setTradeData, setTradeCalcData, calculateTradeData, takerRate]);\n\n    const resetSwap = async (coinKey: any, type: 'sell' | 'buy' | undefined, _tradeData: SwapTradeData<IBData<C>> | undefined, _ammPoolSnapshot: AmmPoolSnapshot | undefined) => {\n        if (tradeCalcData\n            && coinKey === `${tradeCalcData.coinSell}-${tradeCalcData.coinBuy}`\n            && _tradeData\n            && type\n            && (!tradeData || (tradeData[ type ].tradeValue !== _tradeData[ type ].tradeValue))) {\n                \n            throttleSetValue(type, _tradeData, _ammPoolSnapshot)\n\n        } else {\n            let _tradeFloat: Partial<TradeFloat> = {}\n            let _tradeArray: Array<Partial<RawDataTradeItem>> | undefined = undefined;\n            let _tradeCalcData: Partial<TradeCalcData<C>> = coinPairInit({\n                coinKey,\n                _tradeCalcData: {},\n                tokenMap,\n                coinMap\n            })\n            let {\n                amm,\n                market\n            } = getExistedMarket(marketArray, _tradeCalcData.coinSell as string, _tradeCalcData.coinBuy as string);\n            const [, coinA, coinB] = market.match(/(\\w+)-(\\w+)/i)\n\n            setTradeCalcData({...tradeCalcData, fee: feeBips, ..._tradeCalcData} as TradeCalcData<C>);\n            if (coinMap) {\n                setPair({\n                    coinAInfo: coinMap[ coinA ],\n                    coinBInfo: coinMap[ coinB ],\n                })\n            }\n            if (walletLayer2State.walletLayer2) {\n                const {walletMap} = makeWalletLayer2();\n                _tradeCalcData.walletMap = walletMap as WalletMap<any>;\n                getUserTrades(market).then((marketTrades) => {\n                    let _myTradeArray = makeMarketArray(market, marketTrades) as RawDataTradeItem[]\n                    setMyTradeArray(_myTradeArray ? _myTradeArray : [])\n                })\n\n            }\n            let apiList = [];\n            //TODO wallet saga done\n            if (marketArray && amm && market && ammMap) {\n                // let pairPromise =  usePairTitleBlock({market})\n                apiList = [\n                    LoopringAPI.exchangeAPI?.getMarketTrades({market}),\n                    pairDetailBlock({coinKey: market, ammKey: amm, ammMap})\n                ];\n                //HiGH: this need add websocket to update infr ticker ammpoolsbalace\n                // @ts-ignore\n                Promise.all([...apiList]).then(\n                    ([{marketTrades}, {ammPoolsBalance, tickMap}]: any[]) => {\n                        setAmmPoolSnapshot(ammPoolsBalance)\n                        if (tokenMap) {\n                            let {_tradeCalcData: _td} = pairDetailDone({\n                                coinKey: `${_tradeCalcData.coinSell}-${_tradeCalcData.coinBuy}`,\n                                market,\n                                ammPoolsBalance,\n                                tickerData: tickMap[ market ] ? tickMap[ market ] : {},\n                                tokenMap,\n                                _tradeCalcData,\n                                coinMap,\n                                marketCoins,\n                                fee: feeBips,\n                            })\n                            _tradeCalcData = _td;\n                            _tradeFloat = makeTickView(tickMap[ market ] ? tickMap[ market ] : {})\n                            _tradeArray = makeMarketArray(market, marketTrades)\n                            // @ts-ignore\n                            setTradeCalcData(_tradeCalcData as TradeCalcData<C>);\n                            // @ts-ignore\n                            setTradeFloat(_tradeFloat);\n                            setTradeArray(_tradeArray as RawDataTradeItem[])\n                            // setPair(_pair)\n                            setTradeData({\n                                sell: {\n                                    belong: _tradeCalcData.sellCoinInfoMap ? _tradeCalcData.sellCoinInfoMap[ _tradeCalcData.coinSell ]?.simpleName : undefined,\n                                    balance: _tradeCalcData.walletMap ? _tradeCalcData.walletMap[ _tradeCalcData.coinSell ]?.count : 0\n                                },\n                                // @ts-ignore\n                                buy: {\n                                    belong: _tradeCalcData.sellCoinInfoMap ? _tradeCalcData.sellCoinInfoMap[ _tradeCalcData.coinBuy ]?.simpleName : undefined,\n                                    balance: _tradeCalcData.walletMap ? _tradeCalcData.walletMap[ _tradeCalcData.coinBuy ]?.count : 0\n                                },\n                            } as SwapTradeData<IBData<C>>)\n                        }\n                    }).catch((error) => {\n                    throw new CustomError({...ErrorMap.TRADE_LITE_SET_PAIR_ERROR, options: error})\n                    //TODO solve error\n                })\n\n            }\n        }\n\n    }\n    return {\n        swapToastOpen,\n        setSwapToastOpen,\n        swapAlertText,\n\n        tradeCalcData,\n        tradeFloat,\n        tradeArray,\n        myTradeArray,\n        isSwapLoading,\n        tradeData,\n        pair,\n        marketArray,\n        onSwapClick,\n        swapBtnI18nKey,\n        handleSwapPanelEvent\n    }\n\n}","import React from 'react'\nimport { TransactionTable } from '@loopring-web/component-lib'\nimport { WithTranslation, withTranslation } from 'react-i18next'\nimport { StylePaper } from '../../styled'\nimport { useGetTxs } from './hooks'\n\nconst TxPanel = withTranslation('common')((rest:WithTranslation<'common'>) => {\n    const { t } = rest\n    const container = React.useRef(null);\n    const [pageSize, setPageSize] = React.useState(10);\n\n    const { txs: txTableData } = useGetTxs()\n\n    React.useEffect(() => {\n        // @ts-ignore\n        let height = container?.current?.offsetHeight;\n        if (height) {\n            setPageSize(Math.floor((height - 120) / 44) - 2);\n        }\n    }, [container, pageSize]);\n\n    return (\n        <StylePaper ref={container}>\n            <div className=\"title\">{t('labelTxnPageTitle')}</div>\n            <div className=\"tableWrapper\">\n                <TransactionTable {...{\n                    rawData: txTableData,\n                    pagination: {\n                        pageSize: pageSize\n                    },\n                    showFilter: true,\n                    ...rest\n                }} />\n            </div>\n        </StylePaper>\n    )\n})\n\nexport default TxPanel\n","import { useState, useCallback } from 'react'\n// import { useAmmpoolAPI, useUserAPI } from \"hooks/exchange/useApi\"\nimport { useCustomDCEffect } from 'hooks/common/useCustomDCEffect'\nimport { useAccount } from 'stores/account/hook'\nimport { TransactionStatus, RawDataTransactionItem } from '@loopring-web/component-lib'\nimport { volumeToCount } from 'hooks/help'\nimport { LoopringAPI } from 'stores/apis/api'\n\nimport { TransactionTradeTypes } from '@loopring-web/component-lib';\n\nexport function useGetTxs() {\n\n    const { accountId, apiKey } = useAccount()\n\n    // const userApi = useUserAPI()\n\n    const [txs, setTxs] = useState<RawDataTransactionItem[]>([])\n\n    const getTxnStatus = (status: string) => \n        status === ''\n        ? TransactionStatus.processing :\n        status === 'processed'\n            ? TransactionStatus.processed\n            : status === 'processing'\n                ? TransactionStatus.processing \n                : status === 'received' \n                    ? TransactionStatus.received \n                    : TransactionStatus.failed\n\n    const getUserTxnList = useCallback(async () => {\n        if (LoopringAPI && LoopringAPI.userAPI && accountId && apiKey) {\n            const userTxnList = await Promise.all([\n                LoopringAPI.userAPI.getUserTranferList({\n                    accountId,\n                }, apiKey),\n                LoopringAPI.userAPI.getUserDepositHistory({\n                    accountId,\n                }, apiKey),\n                LoopringAPI.userAPI.getUserOnchainWithdrawalHistory({\n                    accountId,\n                }, apiKey)\n            ])\n            const userTransferMapped = userTxnList[0].userTransfers.map(o => ({\n                side: TransactionTradeTypes.transfer,\n                // token: o.symbol,\n                // from: o.senderAddress,\n                // to: o.receiverAddress,\n                amount: Number(volumeToCount(o.symbol, o.amount)),\n                fee: {\n                    unit: o.feeTokenSymbol || '',\n                    value: Number(volumeToCount(o.symbol, o.feeAmount || 0))\n                },\n                memo: o.memo || '',\n                time: o.timestamp,\n                txnHash: o.hash,\n                status: getTxnStatus(o.status),\n                // tradeType: TransactionTradeTypes.transfer\n            }))\n            const userDepositMapped = userTxnList[1].userDepositHistory.map(o => ({\n                side: TransactionTradeTypes.deposit,\n                symbol: o.symbol,\n                // token: o.symbol,\n                // from: o.hash,\n                // to: 'My Loopring',\n                amount: Number(volumeToCount(o.symbol, o.amount)),\n                fee: {\n                    unit: '',\n                    value: 0\n                },\n                memo: '',\n                time: o.timestamp,\n                txnHash: o.txHash,\n                status: getTxnStatus(o.status),\n                // tradeType: TransactionTradeTypes.deposit\n            }))\n            const userWithdrawMapped = userTxnList[2].userOnchainWithdrawalHistory.map((o => ({\n                side: TransactionTradeTypes.withdraw,\n                // token: o.symbol,\n                // from: 'My Loopring',\n                // to: o.distributeHash,\n                amount: Number(volumeToCount(o.symbol, o.amount)),\n                fee: {\n                    unit: o.feeTokenSymbol,\n                    value: Number(volumeToCount(o.feeTokenSymbol, o.feeAmount))\n                },\n                memo: '',\n                time: o.timestamp,\n                txnHash: o.txHash,\n                status: getTxnStatus(o.status),\n                // tradeType: TransactionTradeTypes.withdraw\n            })))\n            const mappingList = [...userTransferMapped, ...userDepositMapped, ...userWithdrawMapped]\n            const sortedMappingList = mappingList.sort((a, b) => b.time - a.time)\n            setTxs(sortedMappingList)\n        }\n    }, [accountId, apiKey])\n\n    useCustomDCEffect(() => {\n        getUserTxnList()\n    }, [getUserTxnList])\n\n    return {\n        txs,\n    }\n}\n","import { useCallback, useEffect, useRef, useState } from 'react'\nimport { WithTranslation, withTranslation } from 'react-i18next'\nimport { PriceTag } from '@loopring-web/common-resources'\nimport { Box, Paper, Typography } from '@material-ui/core'\nimport styled from '@emotion/styled'\nimport { useHistory } from 'react-router-dom'\nimport {\n    AssetsTable,\n    AssetTitle,\n    AssetTitleProps,\n    ChartType,\n    DoughnutChart,\n    ScaleAreaChart,\n    ToggleButtonGroup,\n    TokenType,\n    LpTokenAction,\n} from '@loopring-web/component-lib'\nimport { useModals } from 'hooks/modal/useModals'\n\nimport { volumeToCount } from 'hooks/help'\nimport { LoopringAPI } from 'stores/apis/api'\nimport { AssetType } from 'loopring-sdk'\nimport store from 'stores'\nimport { useWalletLayer1 } from 'stores/walletLayer1'\nimport { makeWalletLayer2 } from 'hooks/help'\nimport { EmptyValueTag,unit } from '@loopring-web/common-resources'\nimport { StylePaper } from '../../styled'\n\n// const StylePaper = styled(Box)`\n//   width: 100%;\n//   height: 100%;\n//   flex: 1;\n//   background-color: ${({theme}) => theme.colorBase.background().default};\n//   border-radius: ${({theme}) => theme.unit}px;\n// //   padding: 20px;\n//\n//   .title {\n//     font-family: Gilroy-Medium;\n//     font-size: ${({theme}) => theme.unit * 3}px;\n//     line-height: 19px;\n//   }\n//\n//   .tableWrapper {\n//     display: flex;\n//     flex: 1;\n//     height: 100%;\n//     border: 1px solid ${({theme}) => theme.colorBase.borderColor};\n//     border-radius: ${({theme}) => theme.unit}px;\n//     padding: 26px 0;\n//   }\n// ` as typeof Box;\n\nconst StyledChartWrapper = styled(Box)`\n    height: 225px;\n\n    > div {\n        position: relative;\n        width: calc(50% - 6px);\n        height: 100%;\n        background-color: ${({theme}) => theme.colorBase.background().default};\n        border-radius: ${({theme}) => theme.unit}px;\n        padding: ${({theme}) => theme.unit * 2.5}px ${({theme}) => theme.unit * 3}px;\n    }\n`\n\nconst StyledBtnGroupWrapper = styled(Box)`\n    position: absolute;\n    z-index: 10;\n    right: ${({theme}) => theme.unit * 3}px;\n    bottom: ${({theme}) => theme.unit * 2.5}px;\n`\n\nconst toggleData = [\n    // {value: '24 H', key: '24 H'},\n    {value: 'week', key: '1 W'},\n    {value: 'all', key: 'ALL'},\n]\n\nexport type ITokenInfoItem = {\n    token: string,\n    detail: {\n        price: string,\n        symbol: string,\n        updatedAt: number\n    }\n}\n\nexport type TrendDataItem = {\n    timeStamp: number;\n    close: number;\n}\n\nconst AssetPanel = withTranslation('common')(({t, ...rest}: WithTranslation) => {\n    const container = useRef(null);\n    const [pageSize, setPageSize] = useState(10);\n    const [chartPeriod, setChartPeriod] = useState('week')\n    const [chartData, setChartData] = useState<TrendDataItem[]>([])\n    \n    const { accAddr } = store.getState().account\n    const { walletLayer2 } = store.getState().walletLayer2;\n    const { ammMap } = store.getState().amm.ammMap\n    const walletMap = makeWalletLayer2()\n    const assetsKeyList = walletMap && walletMap.walletMap ? Object.keys(walletMap.walletMap) : []\n    const assetsDetailList = walletMap && walletMap.walletMap ? Object.values(walletMap.walletMap) : []\n    const assetsList = assetsKeyList.map((key, index) => ({\n        token: key,\n        detail: assetsDetailList[index]\n    }))\n\n    const getUserTotalAssets = useCallback(async (limit: number = 7) => {\n        const userAssets = await LoopringAPI.walletAPI?.getUserAssets({\n            wallet: accAddr,\n            assetType: AssetType.DEX,\n            limit: limit // TODO: minium unit is day, discuss with pm later\n        })\n        if (userAssets && userAssets.userAssets.length && !!userAssets.userAssets.length) {\n            setChartData(userAssets.userAssets.map(o => ({\n                timeStamp: Number(o.createdAt),\n                close: Number(o.amount)\n            })))\n        }\n    }, [accAddr])\n\n    useEffect(() => {\n        if (LoopringAPI && LoopringAPI.walletAPI && walletLayer2) {\n            getUserTotalAssets()\n        }\n    }, [walletLayer2, getUserTotalAssets])\n\n    useEffect(() => {\n        // @ts-ignore\n        let height = container?.current?.offsetHeight;\n        if (height) {\n            setPageSize(Math.floor((height - 120) / 44) - 1);\n        }\n    }, [container, pageSize]);\n\n    const {\n        ShowDeposit,\n        ShowTransfer,\n        ShowWithdraw,\n        ShowResetAccount,\n    } = useModals()\n\n    const { updateWalletLayer1 } = useWalletLayer1()\n\n    let history = useHistory();\n\n    const onShowDeposit = useCallback((token?: any) => {\n        updateWalletLayer1()\n        ShowDeposit(true, {\n            tradeData: {\n                balance: '',\n                belong: token\n            },\n        })\n    }, [ShowDeposit, updateWalletLayer1])\n\n    const onShowTransfer = useCallback((token?: any) => {\n        ShowTransfer(true, {\n            tradeData: {\n                balance: '',\n                belong: token\n            },\n        })\n    }, [ShowTransfer])\n\n    const onShowWithdraw = useCallback((token?: any) => {\n        ShowWithdraw(true, {\n            tradeData: {\n                balance: '',\n                belong: token\n            },\n        })\n    }, [ShowWithdraw])\n\n    const lpTokenJump = useCallback((token: string, type: LpTokenAction) => {\n        if (history) {\n            history.push(`/liquidity/pools/coinPair/${token}?type=${type}`)\n        }\n    }, [history])\n\n    const handleChartPeriodChange = useCallback((event: React.MouseEvent<HTMLElement, MouseEvent>, newValue: string) => {\n        const limit = newValue === 'week' ? 7 : 9999\n        getUserTotalAssets(limit)\n    }, [getUserTotalAssets])\n\n    const { faitPrices } = store.getState().system\n\n    const tokenPriceList = faitPrices ? Object.entries(faitPrices).map(o => ({\n        token: o[ 0 ],\n        detail: o[ 1 ]\n    })) as ITokenInfoItem[] : []\n\n    let jointLPTokenValue = 0\n    assetsList.filter(o => o.token.split('-')[0] === 'LP').forEach(o => {\n        const result = o.token.split('-')\n        result.splice(0, 1, 'AMM')\n        const ammToken = result.join('-')\n        const ammTokenList = Object.keys(ammMap)\n        const tokenValue = ammTokenList.includes(ammToken) && ammMap[ammToken] && ammMap[ammToken].amountDollar ? Number(ammMap[ammToken].amountDollar) : 0\n        jointLPTokenValue += tokenValue\n    });\n\n    const doughnutData = assetsList.filter(o => o.token.split('-')[0] !== 'LP').map((tokenInfo) => {\n        const tokenPriceUSDT = tokenInfo.token === 'DAI' ? 1 : Number(tokenPriceList.find(o => o.token === tokenInfo.token)?.detail.price) / Number(tokenPriceList.find(o => o.token === 'USDT')?.detail.price)\n        return ({\n            name: tokenInfo.token,\n            value: Number(volumeToCount(tokenInfo.token, tokenInfo.detail?.detail?.total as string)) * tokenPriceUSDT\n        })\n    })\n    const formattedDoughnutData = [...doughnutData, {\n            name: 'LP-Token',\n            value: jointLPTokenValue\n        }]\n    const AssetTitleProps: AssetTitleProps = {\n        assetInfo: {\n            totalAsset: formattedDoughnutData.map(o => o.value).reduce((prev, next) => {\n                return prev + next\n            }, 0),\n            priceTag: PriceTag.Dollar,\n        },\n        onShowDeposit,\n        onShowTransfer,\n        onShowWithdraw,\n    }\n\n    const assetsRawData = assetsList.map((tokenInfo) => {\n        const tokenPriceUSDT = Number(tokenPriceList.find(o => o.token === tokenInfo.token)?.detail.price) / Number(tokenPriceList.find(o => o.token === 'USDT')?.detail.price)\n        return ({\n            token: {\n                type: tokenInfo.token.split('-')[0] === 'LP' ? TokenType.lp : TokenType.single,\n                value: tokenInfo.token\n            },\n            amount: String(Number(volumeToCount(tokenInfo.token, tokenInfo.detail?.detail.total as string)).toFixed(6)) || EmptyValueTag,\n            available: String(tokenInfo.detail?.count) || EmptyValueTag,\n            locked: String(tokenInfo.detail?.detail.locked) || EmptyValueTag,\n            smallBalance: tokenPriceUSDT * Number(volumeToCount(tokenInfo.token, tokenInfo.detail?.detail.total as string)) < 1,\n        })\n    })\n\n    return (\n        <>\n            <Box>\n                <AssetTitle  {...{\n                    t,\n                    ...rest,\n                    ...AssetTitleProps\n                }} />\n            </Box>\n\n            {/*<div className=\"title\">{t('labelAssetsTitle')}</div>*/}\n\n            <StyledChartWrapper display={'flex'} justifyContent={'space-between'} alignItems={'center'} marginTop={2}>\n                <Paper component={'div'}>\n                    <Typography component=\"span\" color=\"textSecondary\" variant=\"body1\">{t('labelAssetsDistribution')}</Typography>\n                    <DoughnutChart data={walletLayer2 ? formattedDoughnutData : []}/>\n                </Paper>\n                <Paper component={'div'}>\n                    <Typography component=\"span\" color=\"textSecondary\" variant=\"body1\">{t('labelTotalAssets')}</Typography>\n                    <ScaleAreaChart type={ChartType.Trend} data={chartData}/>\n                    <StyledBtnGroupWrapper>\n                        <ToggleButtonGroup exclusive size=\"small\" {...{\n                            ...rest,\n                            t,\n                            data: toggleData,\n                            value: chartPeriod,\n                            setValue: setChartPeriod,\n                            onChange: handleChartPeriodChange\n                        }} />\n                    </StyledBtnGroupWrapper>\n                </Paper>\n            </StyledChartWrapper>\n            <StylePaper style={{marginTop: `${unit*2}px`}}>\n                <div className=\"tableWrapper\" ref={container}>\n                    <AssetsTable {...{\n                        rawData: assetsRawData,\n                        pagination: {\n                            pageSize: pageSize\n                        },\n                        showFiliter: true,\n                        onShowDeposit: onShowDeposit,\n                        onShowTransfer: onShowTransfer,\n                        onShowWithdraw: onShowWithdraw,\n                        onLpDeposit: lpTokenJump,\n                        onLpWithdraw: lpTokenJump,\n                        ...rest\n                    }} />\n                </div>\n            </StylePaper>\n        </>\n    )\n})\n\nexport default AssetPanel\n","import React, { useEffect } from 'react'\nimport { TradeTable, TradeFilterTable, RawDataTradeItem } from '@loopring-web/component-lib'\nimport { WithTranslation, withTranslation } from 'react-i18next'\n// import styled from '@emotion/styled'\n// import { Box, Paper } from '@material-ui/core'\nimport store from 'stores'\nimport { LoopringAPI } from 'stores/apis/api'\nimport { volumeToCount, volumeToCountAsBigNumber } from 'hooks/help'\nimport { StylePaper } from '../../styled'\nimport { TradeTypes } from '@loopring-web/common-resources'\nimport { toBig, Side } from 'loopring-sdk'\nimport { StringToNumberWithPrecision, VolToNumberWithPrecision } from 'utils/formatter_tool'\n\n// const StylePaper = styled(Box)`\n//   display: flex;\n//   flex-direction: column;\n//   width: 100%;\n//   height: 100%;\n//   flex: 1;\n//   background-color: ${({ theme }) => theme.colorBase.background().default};\n//   border-radius: ${({ theme }) => theme.unit}px;\n//   padding: 20px;\n//   margin-bottom: ${({ theme }) => 2* theme.unit}px;\n//   .title {\n//     font-family: Gilroy-Medium;\n//     font-size: ${({ theme }) => theme.unit * 3}px;\n//     line-height: 19px;\n//   }\n//\n//   .tableWrapper {\n//     display: flex;\n//     flex: 1;\n//     margin-top: 20px;\n//     border: 1px solid ${({ theme }) => theme.colorBase.borderColor};\n//     border-radius: ${({ theme }) => theme.unit}px;\n//     padding: 26px 0;\n//\n//     .rdg {\n//       flex: 1;\n//     }\n//   }\n// ` as typeof Paper;\n//\n// // side: keyof typeof TradeTypes;\n// //     amount: {\n// //         from: {\n// //             key: string;\n// //             value: number|undefined;\n// //         },\n// //         to: {\n// //             key: string;\n// //             value: number|undefined;\n// //         }\n// //     };\n// //     price:{\n// //         key:string\n// //         value:number|undefined,\n// //     }\n// //     // priceDollar: number;\n// //     // priceYuan: number;\n// //     fee: {\n// //         key: string;\n// //         value: number|undefined;\n// //     };\n// //     time: number;\n\nconst TradePanel = withTranslation('common')((rest:WithTranslation<'common'>) => {\n    const container = React.useRef(null);\n    const { t } = rest\n    const [pageSize, setPageSize] = React.useState(10);\n    const [originalData, setOriginalData] = React.useState<RawDataTradeItem[]>([])\n\n    const { accountId, apiKey } = store.getState().account;\n    const tokenMap = store.getState().tokenMap.tokenMap\n\n    useEffect(() => {\n        (async function getUserApi () {\n            if (LoopringAPI && LoopringAPI.userAPI && accountId && apiKey && tokenMap) {\n                const userTrades = await LoopringAPI.userAPI.getUserTrades({\n                    accountId,\n                }, apiKey)\n\n                if (userTrades && userTrades.userTrades) {\n                  // @ts-ignore\n                  setOriginalData(userTrades.userTrades.map(o => {\n                    const marketList = o.market.split('-')\n                    // due to AMM case, we cannot use first index\n                    const baseToken = marketList[marketList.length - 2]\n                    const quoteToken = marketList[marketList.length - 1]\n\n                    const amt = toBig(o.volume).times(o.price).toString()\n\n                    const feeKey = o.side === Side.Buy ? baseToken : quoteToken\n\n\n                    return ({\n                      side: o.side === Side.Buy ? TradeTypes.Buy : TradeTypes.Sell ,\n                      price: {\n                        key: baseToken,\n                        // value: StringToNumberWithPrecision(o.price, baseToken)\n                        value: toBig(o.price).toNumber()\n                      }, \n                      fee: {\n                        key: feeKey,\n                        // value: VolToNumberWithPrecision(o.fee, quoteToken),\n                        value: feeKey ? volumeToCountAsBigNumber(feeKey, o.fee)?.toNumber() : undefined\n                      },\n                      time: Number(o.tradeTime),\n                      amount: {\n                        from: {\n                          key: baseToken,\n                          // value: VolToNumberWithPrecision(o.volume, baseToken),\n                          value: baseToken ? volumeToCount(baseToken, o.volume) : undefined\n                        },\n                        to: {\n                          key: quoteToken,\n                          // value: VolToNumberWithPrecision(amt, quoteToken)\n                          value: baseToken ? volumeToCountAsBigNumber(baseToken, o.volume)?.times(o.price).toNumber() : undefined\n                        }\n                      }\n                    })\n                  }))\n                }\n            }\n        })()\n    }, [accountId, apiKey, tokenMap])\n\n    React.useEffect(() => {\n        // @ts-ignore\n        let height = container?.current?.offsetHeight;\n        if (height) {\n            setPageSize(Math.floor((height - 120) / 44) - 2);\n        }\n    }, [container, pageSize]);\n\n    // const txList: any[] = []\n\n    return (\n        <>\n            <StylePaper ref={container}>\n                <div className=\"title\">{t('labelTradePageTitle')}</div>\n                <div className=\"tableWrapper\">\n                    <TradeTable {...{\n                      rawData: originalData,\n                      pagination: {\n                        pageSize: pageSize\n                      },\n                      showFilter: true,\n                      ...rest}}/>\n                </div>\n            </StylePaper>\n        </>\n    )\n})\n\nexport default TradePanel\n","import React, { useEffect } from 'react'\nimport { RawDataAmmItem, AmmTable, AmmSideTypes } from '@loopring-web/component-lib'\nimport { WithTranslation, withTranslation } from 'react-i18next'\nimport store from 'stores'\nimport { LoopringAPI } from 'stores/apis/api'\nimport { AmmTxType } from 'loopring-sdk'\nimport { StylePaper } from '../../styled'\nimport { volumeToCount } from '../../../hooks/help';\n\nconst AmmPanel = withTranslation('common')(({ t, ...rest }: WithTranslation<'common'>) => {\n    const container = React.useRef(null);\n    const [pageSize, setPageSize] = React.useState(10);\n    const [originalData, setOriginalData] = React.useState<RawDataAmmItem[]>([])\n\n    const { accountId,apiKey } = store.getState().account;\n    const { tokenMap } = store.getState().tokenMap\n    \n    const getTokenName = React.useCallback((tokenId?: number) => {\n        if (tokenMap) {\n            const keys = Object.keys(tokenMap)\n            const values = Object.values(tokenMap)\n            const index = values.findIndex(o => o.tokenId === tokenId)\n            if (index > -1) {\n                return keys[index]\n            }\n            return ''\n        }\n        return ''\n    }, [tokenMap])\n\n    const getAmmpoolList = React.useCallback(async () => {\n        if (LoopringAPI.ammpoolAPI && accountId && apiKey) {\n            const ammpool = await LoopringAPI.ammpoolAPI.getUserAmmPoolTxs({\n                accountId,\n            }, apiKey)\n            if (ammpool && ammpool.userAmmPoolTxs) {\n                const result = ammpool.userAmmPoolTxs.map(o => ({\n                    side: o.txType === AmmTxType.JOIN ? AmmSideTypes.Join : AmmSideTypes.Exit,\n                    amount: {\n                        from: {\n                            key: getTokenName(o.poolTokens[0]?.tokenId),\n                            value: String(volumeToCount(getTokenName(o.poolTokens[0]?.tokenId), o.poolTokens[0]?.actualAmount))\n                        },\n                        to: {\n                            key: getTokenName(o.poolTokens[1]?.tokenId),\n                            value: String(volumeToCount(getTokenName(o.poolTokens[1]?.tokenId), o.poolTokens[1]?.actualAmount))\n                        }\n                    },\n                    lpTokenAmount: String(volumeToCount(getTokenName(o.lpToken?.tokenId), o.lpToken?.actualAmount)),\n                    fee: {\n                        key: getTokenName(o.poolTokens[1]?.tokenId),\n                        value: String(volumeToCount(getTokenName(o.poolTokens[1]?.tokenId), o.poolTokens[1]?.feeAmount))\n                    },\n                    time: o.updatedAt\n                }))\n                setOriginalData(result)\n            }\n        }\n    }, [accountId, apiKey, getTokenName])\n\n    useEffect(() => {\n        getAmmpoolList()\n    }, [getAmmpoolList])\n\n    React.useEffect(() => {\n        // @ts-ignore\n        let height = container?.current?.offsetHeight;\n        if (height) {\n            setPageSize(Math.floor((height - 120) / 44) - 2);\n        }\n    }, [container, pageSize]);\n\n    return (\n        <>\n            <StylePaper ref={container}>\n                <div className=\"title\">{t('labelAmmPageTitle')}</div>\n                <div className=\"tableWrapper\">\n                    <AmmTable {...{\n                        rawData: originalData,\n                        pagination: {\n                            pageSize: pageSize\n                        },\n                        showFilter: true,\n                        ...rest}}/>\n                </div>\n            </StylePaper>\n        </>\n    )\n})\n\nexport default AmmPanel\n","import styled from '@emotion/styled';\nimport { Box, Button, Divider, Grid, Switch, Typography } from '@material-ui/core';\nimport React from 'react';\nimport { UpColor, Currency, DropDownIcon } from '@loopring-web/common-resources';\nimport {\n    BtnLanguage,\n    OutlineSelect,\n    OutlineSelectItem, QRCodePanel,\n    TypographyStrong, useSettings\n} from '@loopring-web/component-lib';\nimport { Trans, useTranslation, WithTranslation, withTranslation } from 'react-i18next';\nimport { useTheme } from '@emotion/react';\nimport { LanguageKeys } from '@loopring-web/common-resources';\n\n// const MuiModalStyled = styled(MuiModal)`\n//   //background: ${({theme}) => theme.colorBase.background().secondary};\n//   // .MuiBackdrop-root{\n//   //   z-index: -1;\n//   //   background-color: ${({theme}) => theme.colorBase.background().outline};\n//   // }\n//   display: flex;\n//   align-items: center;\n//   justify-content: center;\n// ` as typeof MuiModal;\n// const BlockStyled = styled(Box)`\n//   ${({theme}) => theme.border.defaultFrame({c_key: 'blur', d_R: 1})};\n//   background: ${({theme}) => theme.colorBase.background().secondary};\n//   max-height: var(--panel-setting-height);\n//   max-width: var(--panel-setting-width);\n//   display: flex;\n//   justify-content: space-around;\n//   align-items: center;\n//   overflow: scroll;\n//   padding: ${({theme}) => theme.unit*8}px\n// `;\n\nconst StyledPaper = styled(Grid)`\n  width: 100%;\n  height: 100%;\n  background-color: ${({theme}) => theme.colorBase.background().default};\n  border-radius: ${({ theme }) => theme.unit}px;\n`\n//${({theme}) => theme.border.defaultFrame({c_key: 'blur', d_R: 1})};\n\nconst StyledSwitch = styled(Switch)(({theme}) => ({\n    \"& .Mui-checked\": {\n        color: theme.colorBase.textPrimary,\n        '& + .MuiSwitch-track.MuiSwitch-track': {\n            border: `solid ${theme.colorBase.success}`,\n        },\n        '& .MuiSwitch-thumb': {\n            backgroundColor: theme.colorBase.success,\n        }\n    },\n    '& .MuiSwitch-track': {\n        border: `solid ${theme.colorBase.error}`,\n        opacity: 1\n    },\n    '& .MuiSwitch-thumb': {\n        backgroundColor: theme.colorBase.error,\n    }\n}));\n\nexport const BtnCurrency = ({t, currency, label, handleChange}: any) => {\n    const [state, setState] = React.useState<string>(currency ? currency : Currency.dollar);\n    const _handleChange = React.useCallback((event: React.ChangeEvent<any>) => {\n        setState(event.target.value);\n        if (handleChange) {\n\n            handleChange(event.target.value)\n        }\n    }, [handleChange])\n    return <OutlineSelect aria-label={t(label)} IconComponent={DropDownIcon}\n                          labelId=\"language-selected\"\n                          id=\"language-selected\"\n                          value={state} autoWidth\n                          onChange={_handleChange}>\n        <OutlineSelectItem value={Currency.dollar}>$ {t('labelUSDollar')}</OutlineSelectItem>\n            <OutlineSelectItem value={Currency.yen}>¥ {t('labelCNYYuan')}</OutlineSelectItem>\n    </OutlineSelect>\n}\n\nconst StyledDivider = styled(Divider)`\n  margin: ${({theme}) => theme.unit}px 0 ${({theme}) => theme.unit}px 0px;\n`\nconst DividerBlock = styled(Divider)`\n  margin: 0;\n  flex: 1;\n  width: 1px;\n  height: ${({theme}) => theme.unit * 3}px;\n  background: ${({theme}) => theme.colorBase.focus};\n`\n\n\n\nexport const SettingPanel = withTranslation(['common', 'layout'])(({t,i18n, ...rest}: & WithTranslation) => {\n    const theme = useTheme();\n    const {setUpColor,setLanguage,setCurrency,currency,upColor} = useSettings()\n    const language = i18n.language;\n    const handleOnLanguageChange = (lang: LanguageKeys) => {\n        setLanguage(lang);\n        i18n.changeLanguage(lang);\n    }\n    const handleOnCurrencyChange = (value: any) => {\n        setCurrency(value);\n    }\n    const handleColorChange = (e:any) => {\n        if(e.target.checked){\n            setUpColor(UpColor.green) ;\n        }else{\n            setUpColor(UpColor.red);\n        }\n    }\n    return <Grid container direction={'column'} justifyContent={'space-between'} alignItems={'stretch'} flexWrap={'nowrap'}>\n        {/* <Typography variant={'h4'} component={'h3'} paddingLeft={2}>{t('labelTitleSecurity')}</Typography>\n        <StyledPaper item xs={12} display={'flex'} flexDirection={'column'} marginY={2}  paddingY={3}>\n            <Box component={'section'} display={'flex'} flexDirection={'column'} marginBottom={1}>\n                <Typography variant={'h5'} component={'h4'} paddingX={3}  marginBottom={1}>{t('labelTitleResetL2Keypair')}</Typography>\n                <Grid container display={'flex'} flexDirection={'row'} justifyContent={'stretch'}\n                      alignItems={'flex-start'} paddingX={3} >\n                    <Grid item xs={8} display={'flex'} flexDirection={'column'}>\n                        <Typography variant={'body1'} component={'p'}>\n                            <Trans i18nKey=\"resetDescription\">\n                                Create a new signing key for layer-2 authentication (no backup needed). This will\n                                <TypographyStrong component={'span'}>cancel all your pending orders</TypographyStrong>.\n                            </Trans>\n                        </Typography>\n                    </Grid>\n                    <Grid item xs={4} display={'flex'} flexDirection={'column'} justifyContent={'space-evenly'}\n                          alignItems={'flex-end'} alignSelf={'stretch'}>\n                        <Button variant={'outlined'} size={'medium'} color={'primary'} disabled={true}>{t('labelBtnReset')}</Button>\n                    </Grid>\n                    <Grid item xs={12} display={'flex'} flexDirection={'row'} justifyContent={'flex-end'}\n                          alignItems={'center'} alignSelf={'stretch'}>\n                        <Typography variant={'body2'} component={'p'}\n                                    paddingTop={1}>{t('labelHadChangPassword', {passDay: '14 hours'})}</Typography>\n                    </Grid>\n\n                </Grid>\n            </Box>\n            <StyledDivider/>\n            <Box component={'section'} display={'flex'} flexDirection={'column'}>\n                <Typography variant={'h5'} component={'h4'} paddingX={3} marginY={1}>{t('labelTitleExportAccount')}</Typography>\n\n                <Grid container display={'flex'} flexDirection={'row'} justifyContent={'stretch'}\n                      alignItems={'flex-start'} paddingX={3} marginBottom={2}>\n                    <Grid item xs={7} display={'flex'} flexDirection={'column'}>\n                        <Typography variant={'body1'} component={'p'}>{t('descriptionExportAccount')}</Typography>\n                    </Grid>\n                    <Grid item xs={5} display={'flex'} flexDirection={'column'} justifyContent={'space-evenly'}\n                          alignItems={'flex-end'} alignSelf={'stretch'}>\n                        <Grid item> <Button variant={'outlined'} size={'medium'}\n                                            color={'primary'} disabled={true}>{t('labelBtnExportAccount')}</Button></Grid>\n                    </Grid>\n                </Grid>\n            </Box>\n        </StyledPaper> */}\n\n        <Typography variant={'h4'} component={'h3'} paddingLeft={2}>{t('labelTitlePreferences')}</Typography>\n        <StyledPaper item xs={12} display={'flex'} flexDirection={'column'} marginY={2} paddingY={3}>\n            <Box component={'section'} display={'flex'} flexDirection={'column'}>\n                {/*<Typography variant={'h5'} component={'h4'} paddingX={2}>{t('labelTitleLayout')}</Typography>*/}\n                {/*<StyledDivider/>*/}\n                <Grid container display={'flex'} flexDirection={'row'} justifyContent={'stretch'}\n                      alignItems={'flex-start'} paddingX={3} marginBottom={2}>\n                    <Grid item xs={7} display={'flex'} flexDirection={'column'}>\n                        <Typography variant={'body1'} component={'p'}>{t('labelLanguage')}</Typography>\n                    </Grid>\n                    <Grid item xs={5} display={'flex'} flexDirection={'column'} justifyContent={'space-evenly'}\n                          alignItems={'flex-end'} alignSelf={'stretch'}>\n                        <Grid item>\n                            <BtnLanguage {...{\n                                t, ...rest,\n                                language,\n                                label: 'languageSetting',\n                                handleChange: handleOnLanguageChange\n                            }}></BtnLanguage>\n                        </Grid>\n                    </Grid>\n                </Grid>\n                <StyledDivider/>\n                <Grid container display={'flex'} flexDirection={'row'} justifyContent={'stretch'}\n                      alignItems={'flex-start'} paddingX={3} marginY={2}>\n                    <Grid item xs={7} display={'flex'} flexDirection={'column'}>\n                        <Typography variant={'body1'} component={'p'}>{t('labelCurrency')}</Typography>\n                    </Grid>\n                    <Grid item xs={5} display={'flex'} flexDirection={'column'} justifyContent={'space-evenly'}\n                          alignItems={'flex-end'} alignSelf={'stretch'}>\n                        <Grid item>\n                            <BtnCurrency {...{\n                                t, ...rest,\n                                currency,\n                                label: 'currencySetting',\n                                handleChange: handleOnCurrencyChange\n                            }}></BtnCurrency>\n\n                        </Grid>\n                    </Grid>\n                </Grid>\n                <StyledDivider/>\n                <Grid container display={'flex'} flexDirection={'row'} justifyContent={'stretch'}\n                      alignItems={'flex-start'} paddingX={3} marginTop={2}>\n                    <Grid item xs={7} display={'flex'} flexDirection={'column'}>\n                        <Typography variant={'body1'} component={'p'}>{t('labelColors')}</Typography>\n                    </Grid>\n                    <Grid item xs={5} display={'flex'} flexDirection={'row'} justifyContent={'flex-end'}\n                          alignItems={'center'} alignSelf={'stretch'}>\n                        <Typography variant={'body1'} component={'span'} paddingX={2}>\n                            <Trans i18nKey=\"whichColorIsUp\">\n                                <span style={{\n                                    textTransform: 'capitalize',\n                                    color: upColor === UpColor.green ? theme.colorBase.success : theme.colorBase.error\n                                }}>{{up: upColor === UpColor.green ? t('labelgreen') : t('labelred')}} up</span>\n                                and <span style={{\n                                textTransform: 'capitalize',\n                                color: upColor === UpColor.green ? theme.colorBase.error : theme.colorBase.success\n                            }}>{{down: upColor === UpColor.green ? t('labelred') : t('labelgreen')}} down</span>\n                            </Trans>\n                        </Typography>\n                        <StyledSwitch checked={upColor === UpColor.green} color=\"default\"\n                                      onChange={handleColorChange}/>\n                    </Grid>\n                </Grid>\n            </Box>\n\n        </StyledPaper>\n\n    </Grid>\n})\n\n// export const SettingPage = ({open,onClose}: { open:boolean, onClose:(e:any)=>void})=>{\n//     return  <MuiModalStyled\n//         open={open}\n//         onClose={onClose}\n//         aria-labelledby=\"modal-modal-title\"\n//         aria-describedby=\"modal-modal-description\"\n//     >\n//         <BlockStyled >\n//            <SettingPanel/>\n//         </BlockStyled>\n//     </MuiModalStyled>\n// }\n\n\n","import { useRouteMatch } from 'react-router'\n\nimport { Box, Paper } from '@material-ui/core'\nimport {\n    DepositPanel,\n    SubMenu,\n    Button,\n    SubMenuList as BasicSubMenuList, setShowAccountInfo, useOpenModals,\n} from '@loopring-web/component-lib'\nimport { useTranslation, withTranslation } from 'react-i18next'\nimport styled from '@emotion/styled'\nimport { subMenuLayer2 } from '@loopring-web/common-resources'\n\nimport TxPanel from './TxPanel'\nimport AssetPanel from './AssetPanel'\nimport TradePanel from './TradePanel'\nimport AmmPanel from './AmmPanel'\nimport OrderPanel from './OrderPanel'\nimport { SettingPanel } from '../SettingPage';\nimport store from '../../stores';\nimport { AccountStatus } from '../../state_machine/account_machine_spec';\nimport { useModalProps } from '../../layouts/header/hook';\nimport { Redirect } from 'react-router-dom'\nimport React from 'react';\n\nexport const subMenu = subMenuLayer2;\nconst BoxStyle = styled(Box)`\n  ${({theme})=>`\n    background-color: ${theme.colorBase.background().default};\n    width: 100%;\n    min-width:auto;\n    ${theme.border.defaultFrame({c_key: 'blur'})};\n    & > div{\n      background-color:initial;\n      border:0;\n      width:auto;\n      min-width: var(--swap-box-width);\n      max-width: 520px;\n    }\n    `\n  }\n   \n` as typeof Box\nconst BtnConnect = withTranslation(['common'], { withRef: true })( ({t}:any)=>{\n    const {setShowAccountInfo} = useOpenModals();\n    const showAccountInfo = React.useCallback(()=>{\n        setShowAccountInfo({isShow: true})\n     \n    },[setShowAccountInfo])\n    return <Button  variant={'contained'} size={'large'} color={'primary'} fullWidth={true}\n                   style={{maxWidth:'280px'}} onClick={ showAccountInfo }>{t(`labelUnlockAccount`) }\n    </Button>\n}) as typeof Button\nconst SubMenuList = withTranslation(['layout','common'], { withRef: true })(BasicSubMenuList);\nexport const Layer2Page = () => {\n\n    let match: any = useRouteMatch(\"/layer2/:item\")\n    const {status: accStatus} = store.getState().account;\n    const {t,...rest} = useTranslation();\n    const selected = match?.params.item ?? 'assets';\n    const {depositProps} = useModalProps();\n\n    return <>  {\n        accStatus === AccountStatus.UNCONNNECTED \n            ? <Redirect to=\"/\" />\n            :\n        accStatus === AccountStatus.NOACCOUNT\n    || accStatus === AccountStatus.DEPOSITING\n    || accStatus === AccountStatus.DEPOSIT_TO_CONFIREM ?\n        <BoxStyle display={'flex'} flexWrap={'wrap'} alignItems={'center'} justifyContent={'center'} alignContent={'flex-start'}>\n            <DepositPanel  {...{\n                ...rest, ...depositProps,\n                title: t('depositTitleAndActive'),\n                description: 'depositAndActiveDescription'\n            }} > </DepositPanel>\n        </BoxStyle>: <>\n            <Box width={'200px'} display={'flex'} justifyContent={'stretch'} marginRight={3} marginBottom={2}>\n                <SubMenu>\n                    <SubMenuList selected={selected} subMenu={subMenu as any} />\n                </SubMenu>\n            </Box>\n            <Box minHeight={420} display={'flex'} alignItems={'stretch'} flexDirection={'column'} marginTop={0} flex={1}>\n                {accStatus === AccountStatus.LOCKED ?\n                <>\n                    {\n                        selected === 'setting' ? <SettingPanel /> :\n                            <Box flex={1} display={'flex'} justifyContent={'center'} alignItems={'center'} marginTop={-10}>\n                                <BtnConnect  />\n                            </Box>\n\n                    }\n                </> :\n                <>\n                    {selected === 'assets' && <AssetPanel />}\n                    {selected === 'transactions' && <TxPanel />}\n                    {selected === 'trades' && <TradePanel />}\n                    {selected === 'ammRecords' && <AmmPanel />}\n                    {/* {selected === 'orders' && <OrderPanel />} */}\n                    {selected === 'setting' && <SettingPanel />}\n                </>\n\n                }\n\n\n\n            </Box>\n        </>\n    }\n        </>\n\n\n\n}\n","import { WithTranslation, withTranslation } from 'react-i18next'\nimport { Box, } from '@material-ui/core'\nimport styled from '@emotion/styled'\n\nimport React from 'react';\nimport { useAmmMapUI } from './hook';\n\nimport { PoolsTable } from '@loopring-web/component-lib';\nimport { AmmPoolActivityRule, LoopringMap } from 'loopring-sdk/dist/defs/loopring_defs';\n\nconst StylePaper = styled(Box)`\n  width: 100%;\n  height: 100%;\n  flex: 1;\n  background-color: ${({theme}) => theme.colorBase.background().default};\n  border-radius: ${({theme}) => theme.unit}px;\n\n  .rdg {\n    flex: 1;\n  }\n\n` as typeof Box;\n\n\nexport const PoolsPanel = withTranslation('common')(<R extends { [ key: string ]: any }, I extends { [ key: string ]: any }>\n({t, ammActivityMap, ...rest}: WithTranslation\n    & {\n    ammActivityMap: LoopringMap<LoopringMap<AmmPoolActivityRule[]>> | undefined }) => {\n    const container = React.useRef(null);\n    const [pageSize, setPageSize] = React.useState(10);\n    const {updateTickersUI, rawData, page} = useAmmMapUI({pageSize});\n\n    React.useEffect(() => {\n        // @ts-ignore\n        let height = container?.current?.offsetHeight;\n        if (height) {\n            setPageSize(Math.floor((height - 120) / 44) - 1);\n        }\n    }, [container, pageSize]);\n\n    const handlePageChange = React.useCallback((page) => {\n        updateTickersUI(page)\n    }, [updateTickersUI]);\n    return (\n        <>\n            <StylePaper display={'flex'} flexDirection={'column'} ref={container}>\n                <PoolsTable {...{\n                    rawData,\n                    handlePageChange,\n                    page,\n                    pagination: {\n                        pageSize\n                    }\n                }} />\n            </StylePaper>\n        </>\n    )\n})\n\n","import { AmmPanel, AmmPanelType, Toast } from '@loopring-web/component-lib';\nimport { AmmData, AmmInData, CoinInfo, IBData, WalletMap } from '@loopring-web/common-resources';\nimport { useAmmPanel } from './hooks';\nimport React from 'react';\nimport { Box } from '@material-ui/core';\nimport { AmmPoolSnapshot, TickerData } from 'loopring-sdk';\nimport { TradeBtnStatus } from '@loopring-web/component-lib';\nimport { TOAST_TIME } from 'defs/common_defs';\n\nexport const AmmPanelView = <T extends AmmData<C extends IBData<I> ? C : IBData<I>>, I,\n    ACD extends AmmInData<I>,\n    C = IBData<I>>({\n                       pair,\n                       walletMap,\n                       ammType, snapShotData,\n                       ...rest\n                   }: {\n    pair: { coinAInfo: CoinInfo<C> | undefined, coinBInfo: CoinInfo<C> | undefined },\n    snapShotData: { tickerData: TickerData | undefined, ammPoolsBalance: AmmPoolSnapshot | undefined } | undefined\n    walletMap: WalletMap<C>\n    ammType?: keyof typeof AmmPanelType\n} & any) => {\n    const {\n        ammAlertText,\n        ammToastOpen,\n        setAmmToastOpen,\n\n\n        ammCalcData,\n        ammJoinData,\n        ammExitData,\n        handleJoinAmmPoolEvent,\n        handleExitAmmPoolEvent,\n        onAmmRemoveClick,\n        onAmmAddClick,\n        isJoinLoading,\n        isExitLoading,\n        ammDepositBtnI18nKey,\n        ammWithdrawBtnI18nKey,\n    } = useAmmPanel({\n        pair,\n        snapShotData, walletMap, ammType: ammType ? ammType : AmmPanelType.Deposit\n    })\n\n    // const [index, setIndex] = React.useState(AmmPanelTypeMap[ tabSelected ]);\n    const isLoading = React.useCallback(()=>{\n        \n        if((!snapShotData || !snapShotData.tickerData || !snapShotData.ammPoolsBalance)\n            &&  ammDepositBtnI18nKey === undefined\n            &&  ammWithdrawBtnI18nKey === undefined\n        ) {\n          return true\n        }\n    \n        if(isJoinLoading || isExitLoading){\n            return true   \n            \n        }\n    },[snapShotData,ammWithdrawBtnI18nKey,ammWithdrawBtnI18nKey,isJoinLoading,isExitLoading])\n\n\n    return <> \n    \n    <Toast alertText={ammAlertText as string} open={ammToastOpen} \n            autoHideDuration={TOAST_TIME} setOpen={setAmmToastOpen}/>\n\n    {pair ?\n        <AmmPanel {...{...rest}}\n                  ammDepositData={ammJoinData}\n                  ammWithdrawData={ammExitData}\n                  ammCalcData={ammCalcData}\n                  handleAmmAddChangeEvent={handleJoinAmmPoolEvent}\n                  handleAmmRemoveChangeEvent={handleExitAmmPoolEvent}\n                  onAmmRemoveClick={onAmmRemoveClick}\n                  onAmmAddClick={onAmmAddClick}\n                  tabSelected={ammType ? ammType : AmmPanelType.Deposit}\n                  ammDepositBtnI18nKey={ammDepositBtnI18nKey}\n                  ammWithdrawBtnI18nKey={ammWithdrawBtnI18nKey}\n                  ammDepositBtnStatus={isLoading()?TradeBtnStatus.LOADING:TradeBtnStatus.AVAILABLE}\n                  ammWithdrawBtnStatus={isLoading()?TradeBtnStatus.LOADING:TradeBtnStatus.AVAILABLE}\n\n        /> : <Box width={'var(--swap-box-width)'}/>}\n    </>\n\n}","import React, { useState } from \"react\";\nimport { AmmData, AmmInData, CoinInfo, globalSetup, IBData } from '@loopring-web/common-resources';\nimport { AmmPanelType } from '@loopring-web/component-lib';\nimport { IdMap, useTokenMap } from '../../../stores/token';\nimport { useAmmMap } from '../../../stores/Amm/AmmMap';\nimport { accountStaticCallBack, ammPairInit, bntLabel, btnClickMap, fnType, makeCache } from '../../../hooks/help';\nimport { WalletMap } from '@loopring-web/common-resources';\nimport * as sdk from 'loopring-sdk';\nimport {\n    AmmPoolRequestPatch,\n    AmmPoolSnapshot,\n    ChainId,\n    dumpError400,\n    ExitAmmPoolRequest,\n    GetAmmPoolSnapshotRequest,\n    getExistedMarket,\n    GetNextStorageIdRequest,\n    GetOffchainFeeAmtRequest,\n    JoinAmmPoolRequest,\n    LoopringMap,\n    makeExitAmmPoolRequest,\n    makeJoinAmmPoolRequest,\n    MarketInfo,\n    OffchainFeeInfo,\n    OffchainFeeReqType,\n    TickerData,\n    toBig,\n    TokenInfo\n} from 'loopring-sdk';\nimport { useCustomDCEffect } from '../../../hooks/common/useCustomDCEffect';\nimport { useAccount } from '../../../stores/account/hook';\nimport store, { RootState } from \"stores\";\nimport { LoopringAPI } from \"stores/apis/api\";\nimport { debounce } from \"lodash\";\nimport { AccountStatus } from \"state_machine/account_machine_spec\";\nimport { Lv2Account } from \"defs/account_defs\";\nimport { deepClone } from '../../../utils/obj_tools';\nimport { useWalletLayer2 } from \"stores/walletLayer2\";\nimport { myLog } from \"utils/log_tools\";\nimport { BIG10 } from \"defs/swap_defs\";\nimport { useSelector } from \"react-redux\";\nimport { REFRESH_RATE_SLOW } from \"defs/common_defs\";\nimport { useTranslation } from \"react-i18next\";\n\nexport const useAmmPanel = <C extends { [ key: string ]: any }>({\n                                                                    pair,\n                                                                    walletMap,\n                                                                    ammType,\n                                                                    snapShotData,\n                                                                }\n                                                                    : {\n    pair: { coinAInfo: CoinInfo<C> | undefined, coinBInfo: CoinInfo<C> | undefined },\n    snapShotData: { tickerData: TickerData | undefined, ammPoolsBalance: AmmPoolSnapshot | undefined } | undefined\n    walletMap: WalletMap<C>\n    ammType: keyof typeof AmmPanelType\n}) => {\n\n    const [ammToastOpen, setAmmToastOpen] = useState<boolean>(false)\n    const [ammAlertText, setAmmAlertText] = useState<string>()\n\n    const { t } = useTranslation('common')\n\n    // const walletLayer2State = useWalletLayer2();\n    const {coinMap, tokenMap} = useTokenMap();\n    const {ammMap} = useAmmMap();\n    const {account} = useAccount();\n    const {delayAndUpdateWalletLayer2} = useWalletLayer2();\n    const [ammCalcData, setAmmCalcData] = React.useState<AmmInData<C> | undefined>();\n\n    const [ammJoinData, setAmmJoinData] = React.useState<AmmData<IBData<C>, C>>({\n        coinA: {belong: undefined} as unknown as IBData<C>,\n        coinB: {belong: undefined} as unknown as IBData<C>,\n        slippage: 0.5\n    } as AmmData<IBData<C>, C>);\n\n    const [ammExitData, setAmmExitData] = React.useState({\n        coinA: {belong: undefined} as unknown as IBData<C>,\n        coinB: {belong: undefined} as unknown as IBData<C>,\n        slippage: 0.5\n    } as AmmData<IBData<C>, C>);\n\n    const [ammDepositBtnI18nKey, setAmmDepositBtnI18nKey] = React.useState<string | undefined>(undefined);\n    const [ammWithdrawBtnI18nKey, setAmmWithdrawBtnI18nKey] = React.useState<string | undefined>(undefined);\n\n    const initAmmData = React.useCallback(async (pair: any) => {\n        // @ts-ignore\n        let _ammCalcData: Partial<AmmInData<C>> = ammPairInit(\n            {\n                pair,\n                ammType,\n                _ammCalcData: {},\n                tokenMap,\n                coinMap,\n                walletMap: walletMap, //walletLayer2State.walletLayer2,\n                ammMap,\n                tickerData: snapShotData?.tickerData,\n                ammPoolsBalance: snapShotData?.ammPoolsBalance\n            })\n\n        setAmmCalcData({...ammCalcData, ..._ammCalcData} as AmmInData<C>);\n        if (_ammCalcData.myCoinA) {\n            setAmmJoinData({\n                coinA: {..._ammCalcData.myCoinA, tradeValue: undefined} as IBData<C>,\n                coinB: {..._ammCalcData.myCoinB, tradeValue: undefined} as IBData<C>,\n                slippage: 0.5\n            })\n            setAmmExitData({\n                coinA: {..._ammCalcData.lpCoinA, tradeValue: undefined} as IBData<C>,\n                coinB: {..._ammCalcData.lpCoinB, tradeValue: undefined} as IBData<C>,\n                slippage: 0.5\n            })\n        }\n    }, [snapShotData, walletMap, ammJoinData, ammExitData])\n\n    const [ammPoolSnapshot, setAmmPoolSnapShot] = useState<AmmPoolSnapshot>()\n\n    useCustomDCEffect(async() => {\n\n        const updateAmmPoolSnapshot = async() => {\n\n            if (!pair.coinAInfo?.simpleName || !pair.coinBInfo?.simpleName || !LoopringAPI.ammpoolAPI) {\n                setAmmAlertText(t('labelAmmJoinFailed'))\n                return\n            }\n\n            const {marketArray, marketMap,} = store.getState().tokenMap\n\n            const {ammMap} = store.getState().amm.ammMap\n\n            const {market, amm} = getExistedMarket(marketArray, pair.coinAInfo.simpleName as string,\n                pair.coinBInfo.simpleName as string)\n\n            if (!market || !amm || !marketMap) {\n                return\n            }\n\n            const ammInfo: any = ammMap[ amm as string ]\n\n            const request1: GetAmmPoolSnapshotRequest = {\n                poolAddress: ammInfo.address\n            }\n\n            const response = await LoopringAPI.ammpoolAPI.getAmmPoolSnapshot(request1)\n\n            if (!response) {\n                return\n            }\n\n            const { ammPoolSnapshot } = response\n\n            setAmmPoolSnapShot(ammPoolSnapshot)\n        }\n\n        await updateAmmPoolSnapshot()\n\n        const handler = setInterval(async() => {\n\n            updateAmmPoolSnapshot()\n\n        }, REFRESH_RATE_SLOW)\n\n        return () => {\n            if (handler) {\n                clearInterval(handler)\n            }\n        }\n\n    }, [pair, LoopringAPI.ammpoolAPI])\n\n    // set fees\n\n    const [joinFees, setJoinFees] = useState<LoopringMap<OffchainFeeInfo>>()\n    const [exitFees, setExitfees] = useState<LoopringMap<OffchainFeeInfo>>()\n\n    const { status } = useSelector((state: RootState) => state.account)\n\n    useCustomDCEffect(async () => {\n        if (!LoopringAPI.userAPI || !pair.coinBInfo?.simpleName\n            || status !== AccountStatus.ACTIVATED\n             || !ammCalcData || !tokenMap) {\n            return\n        }\n\n        const feeToken: TokenInfo = tokenMap[pair.coinBInfo.simpleName]\n\n        const acc = store.getState().account\n\n        const requestJoin: GetOffchainFeeAmtRequest = {\n            accountId: acc.accountId,\n            requestType: OffchainFeeReqType.AMM_JOIN,\n            tokenSymbol: pair.coinBInfo.simpleName as string,\n        }\n\n        const {fees: feesJoin} = await LoopringAPI.userAPI.getOffchainFeeAmt(requestJoin, acc.apiKey)\n        setJoinFees(feesJoin)\n\n        const feeJoin = sdk.toBig(feesJoin[pair.coinBInfo.simpleName].fee as string).div(BIG10.pow(feeToken.decimals)).toString()\n                    + ' ' + pair.coinBInfo.simpleName\n\n        const requestExit: GetOffchainFeeAmtRequest = {\n            accountId: acc.accountId,\n            requestType: OffchainFeeReqType.AMM_EXIT,\n            tokenSymbol: pair.coinBInfo.simpleName as string,\n        }\n\n        const {fees: feesExit} = await LoopringAPI.userAPI.getOffchainFeeAmt(requestExit, acc.apiKey)\n\n        setExitfees(feesExit)\n\n        const feeExit = sdk.toBig(feesExit[pair.coinBInfo.simpleName].fee as string).div(BIG10.pow(feeToken.decimals)).toString()\n                    + ' ' + pair.coinBInfo.simpleName\n\n        myLog('-> feeJoin:', feeJoin, ' feeExit:', feeExit)\n\n        setAmmCalcData({ ...ammCalcData, feeJoin, feeExit })\n\n    }, [LoopringAPI.userAPI, pair.coinBInfo?.simpleName, ammCalcData, status, tokenMap])\n\n    // join\n\n    const [joinRequest, setJoinRequest] = useState<{ ammInfo: any, request: JoinAmmPoolRequest }>()\n\n    const handlerJoinInDebounce = React.useCallback(debounce(async (data, type, joinFees, ammPoolSnapshot) => {\n\n\n        if (!data || !tokenMap || !data.coinA.belong || !data.coinB.belong || !ammPoolSnapshot || !joinFees) {\n            return\n        }\n\n        myLog('handlerJoinInDebounce', data, type);\n\n        const { slippage } = data\n\n        const slippageReal = sdk.toBig(slippage).div(100).toString()\n\n        const isAtoB = type === 'coinA'\n\n        const acc: Lv2Account = store.getState().account\n\n        const {idIndex, marketArray, marketMap,} = store.getState().tokenMap\n\n        const {ammMap} = store.getState().amm.ammMap\n\n        const {market, amm} = getExistedMarket(marketArray, data.coinA.belong as string,\n            data.coinB.belong as string)\n\n        if (!market || !amm || !marketMap) {\n            return\n        }\n\n        const marketInfo: MarketInfo = marketMap[ market ]\n\n        const ammInfo: any = ammMap[ amm as string ]\n\n        const coinA = tokenMap[ data.coinA.belong as string ]\n        const coinB = tokenMap[ data.coinB.belong as string ]\n\n        const coinA_TV = ammPoolSnapshot.pooled[ 0 ]\n        const coinB_TV = ammPoolSnapshot.pooled[ 1 ]\n\n        const covertVal = data.coinA.tradeValue ? sdk.toBig(data.coinA.tradeValue)\n            .times('1e' + isAtoB ? coinA.decimals : coinB.decimals).toFixed(0, 0) : '0'\n        const {output, ratio} = sdk.ammPoolCalc(covertVal, isAtoB, coinA_TV, coinB_TV)\n        const rawA = data.coinA.tradeValue ? data.coinA.tradeValue.toString() : 0;\n        const rawB = data.coinB.tradeValue ? data.coinB.tradeValue.toString() : 0;\n        const rawVal = isAtoB ? rawA : rawB;\n\n        const {request} = makeJoinAmmPoolRequest(rawVal,\n            isAtoB, slippageReal, acc.accAddr, joinFees as LoopringMap<OffchainFeeInfo>,\n            ammMap[ amm ], ammPoolSnapshot, tokenMap as any, idIndex as IdMap, 0, 0)\n\n        if (isAtoB) {\n            data.coinB.tradeValue = parseFloat(toBig(request.joinTokens.pooled[ 1 ].volume)\n                .div('1e' + coinB.decimals).toFixed(marketInfo.precisionForPrice))\n        } else {\n            data.coinA.tradeValue = parseFloat(toBig(request.joinTokens.pooled[ 0 ].volume)\n                .div('1e' + coinA.decimals).toFixed(marketInfo.precisionForPrice))\n        }\n\n        setAmmJoinData({\n            coinA: data.coinA as IBData<C>,\n            coinB: data.coinB as IBData<C>,\n            slippage: slippage\n        })\n\n        setJoinRequest({\n            ammInfo,\n            request\n        })\n        // }\n\n    }, globalSetup.wait), [])\n\n    const handleJoinAmmPoolEvent = React.useCallback(async (data: AmmData<IBData<C>>, type: 'coinA' | 'coinB') => {\n        await handlerJoinInDebounce(data, type, joinFees, ammPoolSnapshot)\n    }, [joinFees, ammPoolSnapshot]);\n\n    const addToAmmCalculator = React.useCallback(async function (props\n    ) {\n\n        setJoinLoading(true)\n        if (!LoopringAPI.ammpoolAPI || !LoopringAPI.userAPI || !joinRequest) {\n            myLog(' onAmmJoin ammpoolAPI:', LoopringAPI.ammpoolAPI,\n                'joinRequest:', joinRequest)\n\n            setAmmAlertText(t('labelJoinAmmFailed'))\n            setAmmToastOpen(true)\n\n            setJoinLoading(false)\n            return\n        }\n\n        //todo add loading\n\n        const acc: Lv2Account = store.getState().account\n\n        const {ammInfo, request} = joinRequest\n\n        const patch: AmmPoolRequestPatch = {\n            chainId: store.getState().system.chainId as ChainId,\n            ammName: ammInfo.__rawConfig__.name,\n            poolAddress: ammInfo.address,\n            eddsaKey: acc.eddsaKey\n        }\n\n        try {\n\n            const request2: GetNextStorageIdRequest = {\n                accountId: acc.accountId,\n                sellTokenId: request.joinTokens.pooled[ 0 ].tokenId as number\n            }\n            const storageId0 = await LoopringAPI.userAPI.getNextStorageId(request2, acc.apiKey)\n\n            const request_1: GetNextStorageIdRequest = {\n                accountId: acc.accountId,\n                sellTokenId: request.joinTokens.pooled[ 1 ].tokenId as number\n            }\n            const storageId1 = await LoopringAPI.userAPI.getNextStorageId(request_1, acc.apiKey)\n\n            request.storageIds = [storageId0.offchainId, storageId1.offchainId]\n            setAmmJoinData({\n                ...ammJoinData, ...{\n                    coinA: {...ammJoinData.coinA, tradeValue: 0},\n                    coinB: {...ammJoinData.coinB, tradeValue: 0},\n                }\n            })\n            const response = await LoopringAPI.ammpoolAPI.joinAmmPool(request, patch, acc.apiKey)\n\n            myLog('join ammpool response:', response)\n\n            await delayAndUpdateWalletLayer2()\n\n            setAmmAlertText(t('labelJoinAmmSuccess'))\n\n        } catch (reason) {\n\n            dumpError400(reason)\n\n            setAmmAlertText(t('labelJoinAmmFailed'))\n        }\n        finally {\n            setAmmToastOpen(true)\n            setJoinLoading(false)\n        }\n        if (props.__cache__) {\n            makeCache(props.__cache__)\n        }\n    }, [joinRequest, ammJoinData])\n\n    const onAmmDepositClickMap: typeof btnClickMap = Object.assign(deepClone(btnClickMap), {\n        [ fnType.ACTIVATED ]: [addToAmmCalculator]\n    })\n    const onAmmAddClick = React.useCallback((props: AmmData<IBData<C>>) => {\n        accountStaticCallBack(onAmmDepositClickMap, [props])\n    }, [onAmmDepositClickMap]);\n\n    // exit\n    const [exitRequest, setExitRequest] = useState<{ rawVal: '', ammInfo: any, request: ExitAmmPoolRequest }>()\n\n    // const handler = React.useCallback(async () =>,[])\n    const handleExitInDebounce = React.useCallback(debounce(async (data, type, exitFees, ammPoolSnapshot) => {\n\n        if (!tokenMap || !data.coinA.belong || !data.coinB.belong || !ammPoolSnapshot || !exitFees) {\n            return\n        }\n\n        myLog('handleExitInDebounce', data, type);\n\n        const isAtoB = type === 'coinA'\n\n        const acc: Lv2Account = store.getState().account\n\n        const {idIndex, marketArray, marketMap,} = store.getState().tokenMap\n\n        const {ammMap} = store.getState().amm.ammMap\n\n        const {market, amm} = getExistedMarket(marketArray, data.coinA.belong as string,\n            data.coinB.belong as string)\n\n        if (!market || !amm || !marketMap) {\n            return\n        }\n\n        const marketInfo: MarketInfo = marketMap[ market ]\n\n        const ammInfo: any = ammMap[ amm as string ]\n\n        const coinA = tokenMap[ data.coinA.belong as string ]\n        const coinB = tokenMap[ data.coinB.belong as string ]\n\n        const coinA_TV = ammPoolSnapshot.pooled[ 0 ]\n        const coinB_TV = ammPoolSnapshot.pooled[ 1 ]\n\n        const covertVal = data.coinA.tradeValue ? sdk.toBig(data.coinA.tradeValue)\n            .times('1e' + isAtoB ? coinA.decimals : coinB.decimals).toFixed(0, 0) : '0'\n        const {output, ratio} = sdk.ammPoolCalc(covertVal, isAtoB, coinA_TV, coinB_TV)\n\n        const rawVal = isAtoB ? data.coinA.tradeValue.toString() : data.coinB.tradeValue.toString()\n\n        const {request} = makeExitAmmPoolRequest(rawVal, isAtoB, '0.001', acc.accAddr, exitFees as LoopringMap<OffchainFeeInfo>,\n            ammMap[ amm ], ammPoolSnapshot, tokenMap as any, idIndex as IdMap, 0)\n\n        if (isAtoB) {\n            data.coinB.tradeValue = parseFloat(toBig(request.exitTokens.unPooled[ 1 ].volume)\n                .div('1e' + coinB.decimals).toFixed(marketInfo.precisionForPrice))\n        } else {\n            data.coinA.tradeValue = parseFloat(toBig(request.exitTokens.unPooled[ 0 ].volume)\n                .div('1e' + coinA.decimals).toFixed(marketInfo.precisionForPrice))\n        }\n\n        setAmmExitData({\n            coinA: data.coinA as IBData<C>,\n            coinB: data.coinB as IBData<C>,\n            slippage: 0.5\n        })\n\n        setExitRequest({\n            rawVal,\n            ammInfo,\n            request,\n        })\n        // }\n\n    }, globalSetup.wait), [])\n\n    const handleExitAmmPoolEvent = React.useCallback(async (data: AmmData<IBData<C>>, type: 'coinA' | 'coinB') => {\n        await handleExitInDebounce(data, type, exitFees, ammPoolSnapshot)\n    }, [exitFees, ammPoolSnapshot]);\n\n    useCustomDCEffect(() => {\n\n        const label: string | undefined = accountStaticCallBack(bntLabel)\n        setAmmDepositBtnI18nKey(label);\n        setAmmWithdrawBtnI18nKey(label)\n    }, [account.status, bntLabel])\n\n    const [isJoinLoading, setJoinLoading] = useState(false)\n\n    const [isExitLoading, setExitLoading] = useState(false)\n\n    const removeAmmCalculator = React.useCallback(async function (props\n    ) {\n        setExitLoading(true);\n        //TODO: onExit\n        myLog('removeAmmCalculator props:', props)\n\n        // const { exitRequest } = props\n\n        if (!LoopringAPI.ammpoolAPI || !LoopringAPI.userAPI || !exitRequest) {\n            myLog(' onExit ammpoolAPI:', LoopringAPI.ammpoolAPI,\n                'exitRequest:', exitRequest)\n                \n            setAmmAlertText(t('labelExitAmmFailed'))\n            setAmmToastOpen(true)\n    \n            setExitLoading(false);\n            return\n        }\n\n        const acc: Lv2Account = store.getState().account\n\n        const {ammInfo, request} = exitRequest\n\n        const patch: AmmPoolRequestPatch = {\n            chainId: store.getState().system.chainId as ChainId,\n            ammName: ammInfo.__rawConfig__.name,\n            poolAddress: ammInfo.address,\n            eddsaKey: acc.eddsaKey\n        }\n\n        const burnedReq: GetNextStorageIdRequest = {\n            accountId: acc.accountId,\n            sellTokenId: request.exitTokens.burned.tokenId as number\n        }\n        const storageId0 = await LoopringAPI.userAPI.getNextStorageId(burnedReq, acc.apiKey)\n\n        request.storageId = storageId0.offchainId\n\n        try {\n\n            myLog('exit req:', request)\n            setAmmExitData({\n                ...ammExitData, ...{\n                    coinA: {...ammExitData.coinA, tradeValue: 0},\n                    coinB: {...ammExitData.coinB, tradeValue: 0},\n                }\n            })\n            const response = await LoopringAPI.ammpoolAPI.exitAmmPool(request, patch, acc.apiKey)\n\n            myLog('exit ammpool response:', response)\n\n            await delayAndUpdateWalletLayer2()\n\n            setAmmAlertText(t('labelExitAmmSuccess'))\n        } catch (reason) {\n            dumpError400(reason)\n            setAmmAlertText(t('labelExitAmmFailed'))\n        } finally {\n            setAmmToastOpen(true)\n            setExitLoading(false)\n        }\n\n        // if (props.__cache__) {\n        //     makeCache(props.__cache__)\n        // }\n\n    }, [exitRequest, ammExitData])\n\n    const removeAmmClickMap: typeof btnClickMap = Object.assign(deepClone(btnClickMap), {\n        [ fnType.ACTIVATED ]: [removeAmmCalculator]\n    })\n\n    const onAmmRemoveClick = React.useCallback((props: AmmData<IBData<C>>) => {\n\n        myLog('onAmmRemoveClick, exitRequest:', exitRequest, ' ammExitData:', ammExitData)\n        accountStaticCallBack(removeAmmClickMap, [props])\n    }, [exitRequest, ammExitData]);\n\n    React.useEffect(() => {\n        if (snapShotData) {\n            initAmmData(pair)\n        }\n    }, [snapShotData, pair, walletMap]);\n\n    return {\n        ammAlertText,\n        ammToastOpen,\n        setAmmToastOpen,\n\n        ammCalcData,\n        ammJoinData,\n        ammExitData,\n        isJoinLoading,\n        isExitLoading,\n        handleJoinAmmPoolEvent,\n        handleExitAmmPoolEvent,\n        onAmmRemoveClick,\n        onAmmAddClick,\n        ammDepositBtnI18nKey,\n        ammWithdrawBtnI18nKey,\n    }\n}","import React from \"react\";\nimport { AmmActivity, CoinInfo, TradeFloat, WalletMap } from \"@loopring-web/common-resources\";\nimport { useTokenMap } from \"stores/token\";\nimport { useRouteMatch } from 'react-router';\nimport moment from 'moment'\nimport { AmmDetailStore, useAmmMap } from '../../../stores/Amm/AmmMap';\nimport { useWalletLayer2 } from '../../../stores/walletLayer2';\nimport { makeTickView, makeWalletLayer2, pairDetailBlock, WalletMapExtend } from '../../../hooks/help';\nimport { AmmPoolSnapshot, AmmUserRewardMap, getExistedMarket, TickerData } from 'loopring-sdk';\nimport { deepClone } from '../../../utils/obj_tools';\nimport { getUserAmmTransaction, makeMyAmmMarketArray } from '../../../hooks/help/marketTable';\nimport { AmmRecordRow } from '@loopring-web/component-lib';\nimport { AmmPoolActivityRule, LoopringMap } from 'loopring-sdk/dist/defs/loopring_defs';\nimport { MyAmmLP } from '@loopring-web/common-resources';\nimport { useSystem } from '../../../stores/system';\nimport { makeMyAmmWithSnapshot } from '../../../hooks/help/makeUIAmmActivityMap';\nimport store from '../../../stores';\nimport { useUserRewards } from '../../../stores/userRewards';\nimport { LoopringAPI } from 'stores/apis/api';\nimport { TradingInterval } from 'loopring-sdk'\n\nconst makeAmmDetailExtendsActivityMap = ({ammMap, coinMap, ammActivityMap, ammKey}: any) => {\n\n    if (ammMap && coinMap) {\n        let ammDetail = deepClone(ammMap[ ammKey as string ]);\n        const ammActivity = ammActivityMap [ ammKey as string ];\n\n        if (ammDetail && ammDetail.coinA) {\n            ammDetail.myCoinA = coinMap[ ammDetail.coinA ];\n            ammDetail.myCoinB = coinMap[ ammDetail.coinB ];\n            ammDetail[ 'activity' ] = ammActivity ? ammActivity : {};\n        }\n        return ammDetail;\n    }\n}\ntype PgAmmDetail<C extends { [ key: string ]: any }> = AmmDetailStore<C> & {\n    myCoinA: CoinInfo<C>,\n    myCoinB: CoinInfo<C>,\n    activity: AmmActivity<C> | undefined\n}\n\nexport type ammHistoryItem = {\n    close: number;\n    timeStamp: number;\n}\n\nexport const useCoinPair = <C extends { [ key: string ]: any }>(ammActivityMap: LoopringMap<LoopringMap<AmmPoolActivityRule[]>>) => {\n    const match: any = useRouteMatch(\"/liquidity/pools/coinPair/:symbol\")\n    const {coinMap, tokenMap, marketArray} = useTokenMap();\n    const {faitPrices} = useSystem();\n    const ammMapState = useAmmMap();\n    const useUserRewardsState = useUserRewards()\n\n    // const {account} = useAccount();\n\n\n    const {ammMap, getAmmMap} = ammMapState;\n\n    // const {ammMap,updateAmmMap} = useAmmMap();\n    const walletLayer2State = useWalletLayer2();\n    const [walletMap, setWalletMap] = React.useState<WalletMapExtend<C> | undefined>(undefined);\n    // const [ammRecordArray, setAmmRecordArray] = React.useState<AmmRecordRow<C>[]>([]);\n    const [ammMarketArray, setAmmMarketArray] = React.useState<AmmRecordRow<C>[]>([]);\n\n\n    const [myAmmMarketArray, setMyAmmMarketArray] = React.useState<AmmRecordRow<C>[]>([]);\n    const [ammUserRewardMap, setAmmUserRewardMap] = React.useState<AmmUserRewardMap | undefined>(undefined);\n    const [snapShotData, setSnapShotData] = React.useState<{\n        tickerData: TickerData | undefined\n        ammPoolsBalance: AmmPoolSnapshot | undefined\n    } | undefined>(undefined);\n\n    const [myAmm, setMyAmm] = React.useState<MyAmmLP<C>>(\n        {\n            feeA: 0,\n            feeB: 0,\n            feeDollar: 0,\n            feeYuan: 0,\n            reward: 0,\n            rewardToken: undefined as any,\n            balanceA: 0,\n            balanceB: 0,\n            balanceYuan: 0,\n            balanceDollar: 0,\n        })\n    // const [ammPoolsBalance, setAmmpoolsbalance] = React.useState<AmmPoolSnapshot|undefined>(undefined);\n    const [coinPairInfo, setCoinPairInfo] = React.useState<PgAmmDetail<C>>({\n        myCoinA: undefined,\n        myCoinB: undefined,\n        activity: undefined,\n        totalRewards: undefined,\n        amountDollar: undefined,\n        amountYuan: undefined,\n        totalLPToken: undefined,\n        totalA: undefined,\n        totalB: undefined,\n        rewardToken: undefined,\n        rewardValue: undefined,\n        feeA: undefined,\n        feeB: undefined,\n        isNew: undefined,\n        isActivity: undefined,\n        APY: undefined\n    } as unknown as PgAmmDetail<C>);\n    const [tradeFloat, setTradeFloat] = React.useState<TradeFloat | undefined>(undefined);\n    const [pair, setPair] = React.useState<{ coinAInfo: CoinInfo<C> | undefined, coinBInfo: CoinInfo<C> | undefined }>({\n        coinAInfo: undefined,\n        coinBInfo: undefined,\n    });\n    const [pairHistory, setPairHistory] = React.useState<ammHistoryItem[]>([])\n\n    const walletLayer2DoIt = React.useCallback((market) => {\n        const {walletMap: _walletMap} = makeWalletLayer2();\n\n        setWalletMap(_walletMap as WalletMapExtend<any>)\n        if (_walletMap) {\n            getUserAmmTransaction()?.then((marketTrades) => {\n                let _myTradeArray = makeMyAmmMarketArray(market, marketTrades)\n                setMyAmmMarketArray(_myTradeArray ? _myTradeArray : [])\n            })\n        }\n        return _walletMap\n    }, [makeWalletLayer2, getUserAmmTransaction, makeMyAmmMarketArray, marketArray, pair])\n\n    const getPairList = React.useCallback(async () => {\n        if (LoopringAPI.exchangeAPI && coinPairInfo.coinA && coinPairInfo.coinB) {\n            const { myCoinA, myCoinB } = coinPairInfo\n            const market = `${myCoinA?.name}-${myCoinB?.name}`\n            const ammList = await LoopringAPI.exchangeAPI.getMixCandlestick({\n                market: market,\n                interval: TradingInterval.d1,\n                limit: 30\n            })\n            const formattedPairHistory = ammList.candlesticks.map(o => ({\n                ...o,\n                timeStamp: o.timestamp,\n                date: moment(o.timestamp).format('MMM DD')\n            })).sort((a, b) => a.timeStamp - b.timeStamp)\n            setPairHistory(formattedPairHistory)\n        }\n    }, [coinPairInfo])\n\n    React.useEffect(() => {\n        getPairList()\n    }, [getPairList])\n\n    React.useEffect(() => {\n        const coinKey = match?.params.symbol ?? undefined;\n        let _tradeFloat: Partial<TradeFloat> = {}\n        const [, coinA, coinB] = coinKey.match(/(\\w+)-(\\w+)/i)\n        let {\n            amm,\n            market\n        } = getExistedMarket(marketArray, coinA, coinB);\n\n        const _coinPairInfo = makeAmmDetailExtendsActivityMap({ammMap, coinMap, ammActivityMap, ammKey: amm})\n        setCoinPairInfo(_coinPairInfo ? _coinPairInfo : {})\n\n        if (coinMap) {\n            setPair({\n                coinAInfo: coinMap[ coinA ],\n                coinBInfo: coinMap[ coinB ]\n            })\n        }\n\n        // let _walletMap: WalletMapExtend<C>|undefined = undefined\n        if (walletLayer2State.walletLayer2) {\n            walletLayer2DoIt(market);\n        }\n\n        if (amm && market && ammMap) {\n            //TODO should add it into websocket\n            getAmmMap();\n            let apiList = [\n                pairDetailBlock({coinKey: market, ammKey: amm, ammMap}),\n                // LoopringAPI.ammpoolAPI.getAmmPoolSnapshot({poolAddress: ammMap[ ammKey ].address}),\n                // LoopringAPI.exchangeAPI.getMixTicker({market: coinKey})])\n            ];\n            // @ts-ignore\n            Promise.all([...apiList]).then(\n                ([{ammPoolsBalance, tickMap}\n                     //  ,ammUserRewardMap\n                 ]: any[]) => {\n                    if (tokenMap) {\n                        const _snapShotData = {\n                            tickerData: tickMap[ market ],\n                            ammPoolsBalance: ammPoolsBalance,\n                        }\n                        _tradeFloat = makeTickView(tickMap[ market ] ? tickMap[ market ] : {})\n                        setTradeFloat(_tradeFloat as TradeFloat);\n                        setCoinPairInfo({..._coinPairInfo})\n                        setSnapShotData(_snapShotData)\n\n                    }\n                }).catch((error) => {\n                console.log(error);\n                throw  Error\n            })\n        }\n\n    }, []);\n\n    React.useEffect(() => {\n        const {market} = getExistedMarket(marketArray, pair.coinAInfo?.simpleName as string, pair.coinBInfo?.simpleName as string);\n        if (market && snapShotData && snapShotData.ammPoolsBalance) {\n            switch (walletLayer2State.status) {\n                case \"ERROR\":\n                    walletLayer2State.statusUnset();\n                    break;\n                case \"DONE\":\n                    walletLayer2State.statusUnset();\n                    const _walletMap = walletLayer2DoIt(market);\n                    const _myAmm: MyAmmLP<C> = makeMyAmmWithSnapshot(market, _walletMap, ammUserRewardMap, snapShotData);\n                    setMyAmm(_myAmm)\n                    break;\n                default:\n                    break;\n\n            }\n        }\n\n    }, [walletLayer2State.status, ammUserRewardMap])\n\n    React.useEffect(() => {\n        const {market} = getExistedMarket(marketArray, pair.coinAInfo?.simpleName as string, pair.coinBInfo?.simpleName as string);\n        if (market) {\n            switch (useUserRewardsState.status) {\n                case \"ERROR\":\n                    useUserRewardsState.statusUnset();\n                    break;\n                case \"DONE\":\n                    // getAmmPoolUserRewards().then((ammUserRewardMap)=>{\n                    const {userRewardsMap} = store.getState().userRewardsMap\n                    setAmmUserRewardMap(userRewardsMap)\n                    const _myAmm: MyAmmLP<C> = makeMyAmmWithSnapshot(market, walletMap, ammUserRewardMap, snapShotData);\n                    setMyAmm(_myAmm);\n                    break;\n                default:\n                    break;\n\n            }\n        }\n\n    }, [useUserRewardsState.status])\n\n    React.useEffect(() => {\n        if (ammMapState.status === \"ERROR\") {\n            ammMapState.statusUnset();\n        } else if (ammMapState.status === \"DONE\") {\n            ammMapState.statusUnset();\n            if (ammMapState.ammMap && pair.coinAInfo?.simpleName && pair.coinBInfo?.simpleName) {\n                const _coinPairInfo = makeAmmDetailExtendsActivityMap(\n                    {\n                        ammMap,\n                        coinMap,\n                        ammActivityMap,\n                        ammKey: 'AMM-' + pair.coinAInfo.simpleName + pair.coinBInfo.simpleName\n                    })\n                setCoinPairInfo({\n                    ...coinPairInfo, ..._coinPairInfo,\n                    tradeFloat: coinPairInfo.tradeFloat\n                })\n\n            }\n\n            // tokenState.statusUnset()\n            // setState('DONE');\n        }\n    }, [ammMapState.status, ammMapState.ammMap, pair, ammActivityMap, tokenMap])\n\n\n    return {\n        walletMap,\n        myAmm,\n        // tickerData,\n        coinPairInfo,\n        snapShotData,\n        // ammPoolsBalance,\n        pair,\n        tradeFloat,\n        ammMarketArray,\n        myAmmMarketArray,\n        pairHistory,\n    }\n}","import React from 'react';\nimport { WithTranslation, withTranslation } from 'react-i18next';\nimport { AmmRecordTable, ChartType, ScaleAreaChart, TradeTitle, useSettings } from '@loopring-web/component-lib';\nimport {\n    AvatarCoinStyled,\n    Currency,\n    EmptyValueTag,\n    getThousandFormattedNumbers,\n    PriceTag,\n    unit\n} from '@loopring-web/common-resources';\nimport { Avatar, Box, Breadcrumbs, Grid, Link, Typography } from '@material-ui/core';\nimport { AmmPanelView } from '../AmmPanel';\nimport moment from 'moment';\nimport styled from '@emotion/styled/';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\n\nimport { useCoinPair } from './hooks';\nimport { AmmPoolActivityRule, LoopringMap } from 'loopring-sdk/dist/defs/loopring_defs';\nimport { StylePaper } from 'pages/styled';\n\n\n//******************** page code ************************//\n//  ${({theme}) => theme.border.defaultFrame({c_key: 'blur'})};\nconst BoxStyled = styled(Box)`\n  flex: 1;\n  background-color: ${({theme}) => theme.colorBase.background().default};\n  border-radius: ${({theme}) => theme.unit}px;\n  padding: ${({theme}) => theme.unit * 2}px;\n  height: 120px;\n  // min-width: 160px;\n  max-width: 210px;\n  // & .MuiAvatar-root {\n    //     height: ${({theme}) => theme.fontDefault.h4};\n    //     width: ${({theme}) => theme.fontDefault.h4};\n  // }\n`;\n\nconst BoxTopStyled = styled(Box)`\n  background-color: ${({theme}) => theme.colorBase.background().default};\n  border-radius: ${({theme}) => theme.unit}px;\n  padding: ${({theme}) => theme.unit * 2}px;\n  width: var(--swap-box-width);\n  box-sizing: border-box;\n  //height: 120px;\n  //min-width: 160px;\n  // & .MuiAvatar-root {\n    //   height: ${({theme}) => theme.fontDefault.h4};\n    //   width: ${({theme}) => theme.fontDefault.h4};\n  // }\n`;\n// const StyleWrapper = styled(Box)`\n//   //position: relative;\n//   //width: 100%;\n//   background-color: ${({theme}) => theme.colorBase.background().default};\n//   border-radius: ${({theme}) => theme.unit}px;\n// ` as typeof Grid\n\n\nconst applyProps = (index: number) => {\n    return {\n        id: `simple-tab-${index}`,\n        'aria-controls': `tabpanel-${index}`,\n    }\n}\n\nexport const CoinPairPanel = withTranslation('common')(<R extends { [ key: string ]: any }, I extends { [ key: string ]: any }>\n({t, ammActivityMap, ...rest}:\n     WithTranslation & { ammActivityMap: LoopringMap<LoopringMap<AmmPoolActivityRule[]>> | undefined } & any) => {    //ActivityMap<I, I>\n    const {currency} = useSettings();\n    const {\n        tradeFloat,\n        snapShotData,\n        pair,\n        coinPairInfo,\n        walletMap,\n        ammMarketArray,\n        myAmmMarketArray,\n        myAmm,\n        pairHistory,\n    } = useCoinPair({ammActivityMap});\n    const [tabIndex, setTabIndex] = React.useState<0 | 1>(0);\n    const [page, setPage] = React.useState(rest?.page ? rest.page : 1);\n    const handleChange = (event: any, newValue: 0 | 1) => {\n        setTabIndex(newValue);\n        setPage(1);\n    }\n    const _handlePageChange = React.useCallback((page: number) => {\n        setPage(page);\n    }, [])\n    // const sellIconHasLoaded = useImage(coinPairInfo.myCoinA?.icon ? coinPairInfo.myCoinA?.icon : '').hasLoaded;\n    // const buyIconHasLoaded = useImage(coinPairInfo.myCoinB?.icon ? coinPairInfo.myCoinB?.icon : '').hasLoaded;\n    const {coinJson} = useSettings();\n    const coinAIcon: any = coinJson [ coinPairInfo.myCoinA?.simpleName ];\n    const coinBIcon: any = coinJson [ coinPairInfo.myCoinB?.simpleName ];\n\n    return <>\n\n        <Grid container>\n            <Grid item xs={7}>\n                <Breadcrumbs aria-label=\"breadcrumb\">\n                    <Link color=\"textSecondary\" href=\"/#/liquidity/pools\">\n                        {t('labelAmmList')}\n                    </Link>\n                    <Typography color={'textSecondary'} display={'flex'} alignItems={'center'}\n                                justifyContent={'center'}\n                    >{pair.coinAInfo?.simpleName}-{pair.coinBInfo?.simpleName}</Typography>\n                </Breadcrumbs>\n                <Grid item xs={12} marginTop={2}>\n                    <TradeTitle {...{\n                        ...rest, t,\n                        ...pair,\n                        tradeFloat,\n                        isNew: false\n                    }}></TradeTitle>\n                </Grid>\n            </Grid>\n            <Grid item xs={4} alignItems={'center'} justifyContent={'flex-end'} display={'flex'}>\n                {typeof coinPairInfo.isActivity === 'undefined'? '':\n                <BoxTopStyled paddingY={3} paddingX={1 / 2 * 5} display={'flex'}\n                              flexDirection={'column'}>\n                    <Box display={'flex'} flexDirection={'row'} justifyContent={'space-between'}>\n                        <Typography display={'flex'} flexDirection={'column'} component={'div'}>\n                            <Typography variant={'body2'} component={'h5'} color={'textSecondary'}>\n                                {t('labelReward')}\n                            </Typography>\n                            <Typography variant={'body1'} component={'span'} color={'textPrimary'}>\n                                {typeof coinPairInfo.isActivity === 'undefined' ? EmptyValueTag : <>\n                                    <Typography\n                                        component={'span'}>{coinPairInfo.activity ? getThousandFormattedNumbers(coinPairInfo.activity.totalRewards) : EmptyValueTag} </Typography>\n                                    <Typography\n                                        component={'span'}>{coinPairInfo.activity?.rewardToken?.simpleName}</Typography>\n                                </>}\n                            </Typography>\n                        </Typography>\n                        <Typography display={'flex'} flexDirection={'column'} alignItems={'flex-end'}\n                                    component={'div'}>\n                            <Typography variant={'body2'} component={'h5'} color={'textSecondary'}>\n                                {t('labelMyReward')}\n                            </Typography>\n                            <Typography variant={'body1'} component={'span'} color={'textPrimary'}>\n                                {/*{typeof coinPairInfo.isActivity === 'undefined' ? EmptyValueTag : <>*/}\n                                {typeof myAmm.reward === 'undefined' ? EmptyValueTag : <>\n\n                                    <Typography\n                                        component={'span'}> {getThousandFormattedNumbers(myAmm.reward)} </Typography>\n                                    <Typography\n                                        component={'span'}> {coinPairInfo.activity?.rewardToken?.simpleName}</Typography></>}\n\n                            </Typography>\n                        </Typography>\n                    </Box>\n                    <Typography alignSelf={'flex-start'} variant={'body2'} color={'textSecondary'}\n                                component=\"span\" marginTop={1}>\n                        {typeof coinPairInfo.isActivity === 'undefined' ? t('labelNoActiveEvent')\n                            : <>\n                                {t('labelDate')} : \n                                <> {' '+moment(coinPairInfo.activity?.duration.from).format('L') + ' - ' + moment(coinPairInfo.activity?.duration.to).format('L')}</>\n                            </>\n                        }\n                    </Typography>\n                </BoxTopStyled>\n                }\n            </Grid>\n            {/*<Grid item xs={4} alignItems={'center'} justifyContent={'flex-end'} display={'flex'}>*/}\n            {/*    <Link href=\"/#/liquidity/pools\" variant={'h5'}>*/}\n            {/*        {t('labelBack')}*/}\n            {/*    </Link>*/}\n            {/*</Grid>*/}\n        </Grid>\n        {/*<Grid container marginTop={3}>*/}\n        {/*   */}\n        {/*</Grid>*/}\n        <Box flex={1} display={'flex'} alignItems={'stretch'} flexDirection=\"row\" marginTop={3}>\n            <Box flex={1} display={'flex'} flexDirection={'column'} marginRight={3} justifyContent={'space-between'}>\n                <Box flex={1} width={'101%'}>\n                    <ScaleAreaChart\n                        type={ChartType.Trend} \n                        data={pairHistory} \n                        extraInfo={pair.coinBInfo?.simpleName}\n                        showXAxis\n                    />\n                </Box>\n                <Box display={'flex'} flexDirection={'row'} justifyContent={'space-between'}>\n                    <BoxStyled paddingX={2} display={'flex'} flexDirection={'column'}>\n                        <Typography component={'p'} color={'textSecondary'} display={'flex'} marginBottom={1 / 2 * 3}\n                        >\n                            {t('labelAmmTotalToken')}\n                        </Typography>\n                        <Typography component={'span'} display={'flex'} flexDirection={'row'}\n                                    justifyContent={'space-between'} alignItems={'center'}\n                                    style={{textTransform: 'capitalize'}} color={'textPrimary'}>\n                            <Box component={'span'} className={'logo-icon'} height={'var(--list-menu-coin-size)'}\n                                 width={'var(--list-menu-coin-size)'} alignItems={'center'} justifyContent={'center'}>\n                                {coinAIcon ?\n                                    <AvatarCoinStyled imgx={coinAIcon.x} imgy={coinAIcon.y}\n                                                      imgheight={coinAIcon.height}\n                                                      imgwidth={coinAIcon.width} size={24}\n                                                      variant=\"circular\"\n                                                      alt={coinPairInfo?.myCoinA?.simpleName as string}\n                                        // src={sellData?.icon}\n                                                      src={'data:image/svg+xml;utf8,' + '<svg width=\"36\" height=\"36\" viewBox=\"0 0 36 36\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M0 0H36V36H0V0Z\"/></svg>'}/>\n                                    : <Avatar variant=\"circular\" alt={coinPairInfo?.myCoinA?.simpleName as string}\n                                              style={{\n                                                  height: 'var(--list-menu-coin-size))',\n                                                  width: 'var(--list-menu-coin-size)'\n                                              }}\n                                        // src={sellData?.icon}\n                                              src={'static/images/icon-default.png'}/>\n                                }</Box>\n                            <Typography justifyContent={'center'} display={'flex'}>\n                                <Typography component={'span'} alignSelf={'right'} height={24} lineHeight={'24px'}>\n                                    {getThousandFormattedNumbers(coinPairInfo.totalA, 6)}</Typography>\n                                <Typography component={'span'} marginLeft={1} alignSelf={'right'} height={24} lineHeight={'24px'}>\n                                    {/*<HiddenHidden>{t('labelLPTotal')}</Hidden>*/}\n                                    {coinPairInfo.myCoinA?.simpleName}\n                                </Typography>\n\n                            </Typography>\n\n                        </Typography>\n                        <Typography component={'span'} display={'flex'} flexDirection={'row'}\n                                    justifyContent={'space-between'} alignItems={'center'} marginTop={1}\n                                    style={{textTransform: 'capitalize'}}>\n                            {/*<Typography component={'span'} marginRight={1 / 2}*/}\n                            {/*            color={'textSecondary'}>*/}\n                            {/*    */}\n                            {/*    /!*<Avatar variant=\"square\" sizes={'small'} alt={'coinLogo'}*!/*/}\n                            {/*    /!*    // src={coinBInfo?.icon}*!/*/}\n                            {/*    /!*        src={buyIconHasLoaded ? coinPairInfo?.myCoinB?.icon : 'static/images/icon-default.png'}/>*!/*/}\n                            {/*</Typography>*/}\n                            <Box component={'span'} className={'logo-icon'} height={'var(--list-menu-coin-size)'}\n                                 width={'var(--list-menu-coin-size)'} alignItems={'center'}\n                                 justifyContent={'center'}>{coinBIcon ?\n                                <AvatarCoinStyled imgx={coinBIcon.x} imgy={coinBIcon.y} imgheight={coinBIcon.height}\n                                                  imgwidth={coinBIcon.width} size={24}\n                                                  variant=\"circular\" alt={coinPairInfo?.myCoinB?.simpleName as string}\n                                    // src={sellData?.icon}\n                                                  src={'data:image/svg+xml;utf8,' + '<svg width=\"36\" height=\"36\" viewBox=\"0 0 36 36\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M0 0H36V36H0V0Z\"/></svg>'}/>\n                                : <Avatar variant=\"circular\" alt={coinPairInfo?.myCoinB?.simpleName as string} style={{\n                                    height: 'var(--list-menu-coin-size)',\n                                    width: 'var(--list-menu-coin-size)'\n                                }}\n                                    // src={sellData?.icon}\n                                          src={'static/images/icon-default.png'}/>}</Box>\n                            <Typography justifyContent={'center'} display={'flex'}>\n                                <Typography component={'span'} alignSelf={'right'} height={24} lineHeight={'24px'}>\n                                    {getThousandFormattedNumbers(coinPairInfo.totalB, 6)}</Typography>\n                                <Typography component={'span'} marginLeft={1} alignSelf={'right'} height={24} lineHeight={'24px'}>\n                                    {/*<Hidden>{t('labelLPTotal')}</Hidden>*/}\n                                    {coinPairInfo.myCoinB?.simpleName}\n                                </Typography>\n\n                            </Typography>\n\n                        </Typography>\n\n                    </BoxStyled>\n                    <BoxStyled paddingX={2} display={'flex'} flexDirection={'column'}>\n                        <Typography component={'p'} color={'textSecondary'} display={'flex'}\n                        >\n                            {t('label24Volume')}\n                        </Typography>\n                        <Typography variant={'h4'} marginTop={4}\n                                    component={'span'}>\n                            {currency === Currency.dollar ? PriceTag.Dollar + getThousandFormattedNumbers(tradeFloat && tradeFloat.priceDollar ? tradeFloat.priceDollar as number : 0, 2)\n                                : PriceTag.Yuan + getThousandFormattedNumbers(tradeFloat && tradeFloat.priceYuan ? tradeFloat.priceYuan as number : 0, 2)}\n                        </Typography>\n\n                    </BoxStyled>\n                    <BoxStyled paddingX={2} display={'flex'} flexDirection={'column'}>\n                        <Typography component={'p'} color={'textSecondary'} display={'flex'}\n                        >\n                            {t('labelTVL')}\n                        </Typography>\n\n                        <Typography variant={'h4'} marginTop={4}\n                                    component={'span'}> {typeof coinPairInfo.amountDollar === 'undefined' ? EmptyValueTag :\n                            currency === Currency.dollar ? PriceTag.Dollar + getThousandFormattedNumbers(coinPairInfo.amountDollar, 2) : PriceTag.Yuan + getThousandFormattedNumbers(coinPairInfo.amountYuan ? coinPairInfo.amountYuan : 0, 2)}\n                        </Typography>\n\n\n                    </BoxStyled>\n                    <BoxStyled paddingX={2} display={'flex'} flexDirection={'column'}>\n                        <Typography component={'p'} color={'textSecondary'} display={'flex'}\n                        >\n                            {t('labelAPY')}\n                        </Typography>\n                        <Typography variant={'h4'} marginTop={4}\n                                    component={'span'}> {coinPairInfo.APY ? coinPairInfo.APY : EmptyValueTag}%\n                        </Typography>\n                    </BoxStyled>\n                </Box>\n            </Box>\n            <Box display={'flex'}>\n                <AmmPanelView pair={pair} walletMap={walletMap} snapShotData={snapShotData}/>\n            </Box>\n        </Box>\n\n        <Grid container marginY={3}>\n            <Grid item xs={12}>\n                <Tabs value={tabIndex}\n                    //   onChange={handleChange}\n                      aria-label=\"tabs switch\">\n                    {/* <Tab label={t('labelAll')} {...applyProps(0)} /> */}\n                    <Tab label={t('labelMe')} {...applyProps(1)} />\n                </Tabs>\n                <StylePaper style={{marginTop: `${unit * 2}px`}}>\n                    {/*ammRecordArray*/}\n                    {tabIndex === 0 ? <AmmRecordTable\n                        rawData={ammMarketArray}\n                        handlePageChange={_handlePageChange} page={page}\n                    /> : <AmmRecordTable rawData={myAmmMarketArray} handlePageChange={_handlePageChange}\n                                         page={page}/>}\n                </StylePaper>\n            </Grid>\n\n        </Grid>\n\n    </>\n\n})\n\n\n\n\n\n\n\n","import { AmmCard, AmmProps, EmptyDefault } from '@loopring-web/component-lib';\nimport React from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { AmmCardProps, AmmData, AmmInData, IBData } from '@loopring-web/common-resources';\nimport { Box, Grid } from '@material-ui/core';\nimport { useAmmMiningUI } from './hook';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport { Trans, withTranslation } from 'react-i18next';\nimport { AmmPoolActivityRule, LoopringMap } from 'loopring-sdk/dist/defs/loopring_defs';\n\ntype ClickHandler = {\n    handleClick: (pair: string) => void\n}\n\nconst AmmCardWrap = React.memo(React.forwardRef((props: AmmCardProps<{ [ key: string ]: any }> & ClickHandler, ref) => {\n    const pair = `${props.coinAInfo.name}-${props.coinBInfo.name}`\n    return props ? <AmmCard ref={ref} {...props} handleClick={() => props.handleClick(pair)}/> : <></>\n}));\n\nconst AmmList = <I extends { [ key: string ]: any }>({ammActivityViewMap}: { ammActivityViewMap: Array<AmmCardProps<I>> }) => {\n    let history = useHistory();\n    const jumpTo = React.useCallback((pair: string) => {\n        if (history) {\n            history.push(`/liquidity/pools/coinPair/${pair}`)\n        }\n    }, [history])\n\n    return <>{ammActivityViewMap.length ? ammActivityViewMap.map((item: AmmCardProps<I>, index) =>\n        <Grid item xs={12} sm={6} lg={4} key={index}>\n            <AmmCardWrap handleClick={jumpTo} {...item as any} />\n        </Grid>\n    ) : <Box flex={1} display={'flex'} alignItems={'center'} justifyContent={'center'} flexDirection={'column'}>\n        <EmptyDefault height={\"calc(100% - 35px)\"} marginTop={10} display={'flex'} flexWrap={'nowrap'} alignItems={'center'} justifyContent={'center'}\n                      flexDirection={'column'} message={() => {\n            return <Trans i18nKey=\"labelEmptyDefault\">\n                Content is Empty\n            </Trans>\n        }}/> </Box>}   </>\n}\n\nexport const AmmMiningView = withTranslation('common')(<T extends AmmData<C extends IBData<I> ? C : IBData<I>>, I,\n    ACD extends AmmInData<I>,\n    C = IBData<I>>({ammProps, t, ammActivityMap, ...rest}: {\n    ammProps: AmmProps<T, I, ACD>,\n    ammActivityMap: LoopringMap<LoopringMap<AmmPoolActivityRule[]>> | undefined,\n} & any) => {\n    const {\n        ammActivityViewMap,\n        ammActivityPastViewMap\n    } = useAmmMiningUI({ammActivityMap});\n    const [tabIndex, setTabIndex] = React.useState<0 | 1>(0);\n    const handleChange = (event: any, newValue: 0 | 1) => {\n        setTabIndex(newValue);\n    }\n\n    return <Grid container spacing={2}>\n        <Grid item xs={12}>\n            <Tabs value={tabIndex}\n                  onChange={handleChange}\n                  aria-label=\"tabs switch\">\n                <Tab label={t('labelCurrentActivities')}/>\n                <Tab label={t('labelPastActivities')}/>\n            </Tabs>\n        </Grid>\n        <AmmList ammActivityViewMap={tabIndex === 0 ? ammActivityViewMap : ammActivityPastViewMap}/>\n    </Grid>\n})\n","import { AmmCardProps } from '@loopring-web/common-resources';\nimport { AmmPoolActivityRule, AmmPoolActivityStatus,LoopringMap } from 'loopring-sdk';\nimport React from 'react';\nimport {\n    makeUIAmmActivityMap\n} from '../../../hooks/help';\n\nimport { useUserRewards } from '../../../stores/userRewards';\n\nexport const useAmmMiningUI = <R extends { [ key: string ]: any }, I extends { [ key: string ]: any }>(\n    {\n        ammActivityMap\n    }: { ammActivityMap: LoopringMap<LoopringMap<AmmPoolActivityRule[]>> | undefined }\n): {\n    ammActivityViewMap: Array<AmmCardProps<I>>,\n    ammActivityPastViewMap: Array<AmmCardProps<I>>\n} => {\n    const  userRewardsMapState =  useUserRewards();// store.getState().userRewardsMap\n    // const {coinMap} = useTokenMap();\n    // const ammMapState = useAmmMap();\n    // const walletLayer2State = useWalletLayer2();\n    const [ammActivityViewMap, setAmmActivityViewMap] = React.useState<Array<AmmCardProps<I>>>([]);\n\n\n    const [ammActivityPastViewMap, setAmmActivityPastViewMap] = React.useState<Array<AmmCardProps<I>>>(\n        []);\n    // const [ammUserRewardMap, setAmmUserRewardMap] = React.useState<AmmUserRewardMap>(\n    //     {});\n\n\n    // );\n    React.useEffect(() => {\n        if(ammActivityMap && Object.keys(ammActivityMap).length>0 ){\n\n           // getAmmPoolUserRewards().then((ammUserRewardMap)=>{\n                // setAmmUserRewardMap(ammUserRewardMap as AmmUserRewardMap);\n                setAmmActivityViewMap(makeUIAmmActivityMap(\n                    {\n                        ammActivityMap,\n                        type: 'AMM_MINING',\n                        ammPoolActivityStatus: [AmmPoolActivityStatus.NotStarted, AmmPoolActivityStatus.InProgress]\n                    }, userRewardsMapState.userRewardsMap\n                ));\n                setAmmActivityPastViewMap(\n                    makeUIAmmActivityMap(\n                        {\n                            ammActivityMap,\n                            type: 'AMM_MINING',\n                            ammPoolActivityStatus: [AmmPoolActivityStatus.EndOfGame]\n                        }, userRewardsMapState.userRewardsMap\n                    ))\n          //  })\n        }\n\n    },[ammActivityMap])\n    React.useEffect(() => {\n            if (userRewardsMapState.status === \"ERROR\") {\n                //TODO: solve error\n                userRewardsMapState.statusUnset();\n            } else if (userRewardsMapState.status === \"DONE\") {\n                userRewardsMapState.statusUnset();\n                setAmmActivityViewMap(\n                    makeUIAmmActivityMap(\n                    {\n                        ammActivityMap,\n                        type: 'AMM_MINING',\n                        ammPoolActivityStatus: [AmmPoolActivityStatus.NotStarted, AmmPoolActivityStatus.InProgress]\n                    }, userRewardsMapState.userRewardsMap\n                ));\n                setAmmActivityPastViewMap(\n                    makeUIAmmActivityMap(\n                        {\n                            ammActivityMap,\n                            type: 'AMM_MINING',\n                            ammPoolActivityStatus: [AmmPoolActivityStatus.EndOfGame]\n                        }, userRewardsMapState.userRewardsMap\n                    ))\n                // if (userRewardsMapState.ammMap) {\n                //     setAmmActivityViewMap(\n                //         makeUIAmmActivityMap(\n                //             {\n                //                 ammActivityMap,\n                //                 type: 'AMM_MINING',\n                //                 ammPoolActivityStatus: [AmmPoolActivityStatus.NotStarted, AmmPoolActivityStatus.InProgress]\n                //             }, ammUserRewardMap\n                //         ))\n                //     setAmmActivityPastViewMap(\n                //         makeUIAmmActivityMap(\n                //             {\n                //                 ammActivityMap,\n                //                 type: 'AMM_MINING',\n                //                 ammPoolActivityStatus: [AmmPoolActivityStatus.EndOfGame]\n                //             }, ammUserRewardMap\n                //         ))\n                //\n                // }\n\n            }\n        },\n        [userRewardsMapState.status]\n    )\n\n\n    return {\n        ammActivityViewMap,\n        ammActivityPastViewMap\n    }\n\n}\n","import React from 'react'\nimport styled from '@emotion/styled'\nimport { Box, Grid, Typography } from '@material-ui/core'\nimport { WithTranslation, withTranslation } from 'react-i18next'\nimport { useHistory } from 'react-router-dom'\nimport {\n    AmmRecordTable,\n    AmmTradeType,\n    ChartType,\n    ScaleAreaChart,\n    TablePaddingX,\n    ToggleButtonGroup,\n    useSettings ,\n    MyPoolTable\n} from '@loopring-web/component-lib'\nimport {\n    Currency, EmptyValueTag,\n    getThousandFormattedNumbers,\n    PriceTag\n} from '@loopring-web/common-resources';\n\nimport { AmmPoolActivityRule, LoopringMap } from 'loopring-sdk/dist/defs/loopring_defs';\nimport { useOverview } from './hook';\nimport { TableWrapStyled } from 'pages/styled'\n\n\n//TODO: FIXED:  demo data\n\n\nconst toggleData = [\n    {value: '24 H', key: '24 H'},\n    {value: '1 W', key: '1 W'},\n    {value: 'ALL', key: 'ALL'},\n]\n\nconst StylePaper = styled(Box)`\n  width: 100%;\n  height: 100%;\n  flex: 1;\n` as typeof Box;\n\nconst StyleWrapper = styled(Grid)`\n  position: relative;\n  width: 100%;\n  background-color: ${({theme}) => theme.colorBase.background().default};\n  border-radius: ${({theme}) => theme.unit}px;\n` as typeof Grid\n\n\n\nconst StyledBtnGroupWrapper = styled(Box)`\n  position: absolute;\n  z-index: 99;\n  top: ${({theme}) => theme.unit}px;\n  width: 100%;\n` as typeof Box\n\n\nexport const MyLiquidity = withTranslation('common')(\n    <R extends { [ key: string ]: any }, I extends { [ key: string ]: any }>\n    ({t, ammActivityMap, ...rest}:\n         WithTranslation &\n         { ammActivityMap: LoopringMap<LoopringMap<AmmPoolActivityRule[]>> | undefined }\n    ) => {\n        const [chartPeriod, setChartPeriod] = React.useState('ALL');\n        const [page, setPage] = React.useState(1);\n        const {currency} = useSettings();\n        const history = useHistory()\n\n        const JumpToLiqudity = React.useCallback((pair, type) => {\n            if (history) {\n                history.push(`/liquidity/pools/coinPair/${pair}?type=${type}`)\n            }\n        }, [history])\n\n        const _handlePageChange = React.useCallback((page: number) => {\n            setPage(page);\n        }, [])\n\n        const {myAmmMarketArray, summaryReward, myPoolRow} = useOverview({ammActivityMap});\n        return (\n            <>\n                <StyleWrapper container spacing={1} padding={3} margin={0}>\n                    <Grid display={'flex'} flexDirection={'column'} justifyContent={'space-around'} item sm={3}>\n                        <Typography variant={'body1'} component={'h5'}\n                                    color={'textSecondary'}>{t('labelTotalPositionValue')}</Typography>\n                        <Typography variant={'h4'} marginTop={1}>\n                            {summaryReward === undefined ? EmptyValueTag : currency === Currency.dollar ? PriceTag.Dollar\n                                + getThousandFormattedNumbers(summaryReward.rewardDollar !== undefined? summaryReward.rewardDollar : 0)\n                                + getThousandFormattedNumbers( summaryReward.feeDollar !== undefined?summaryReward.feeDollar : 0)\n                                : PriceTag.Yuan + getThousandFormattedNumbers(summaryReward.rewardYuan ? summaryReward.rewardYuan : 0)\n                                    +  getThousandFormattedNumbers(summaryReward.feeYuan ? summaryReward.feeYuan : 0)}\n                        </Typography>\n                    </Grid>\n                    <Grid display={'flex'} flexDirection={'column'} justifyContent={'space-around'} item sm={3}>\n                        <Typography variant={'body1'} component={'h5'}\n                                    color={'textSecondary'}>{t('labelFeeRewards')}</Typography>\n                        <Typography variant={'h4'} marginTop={1}>\n                            {summaryReward === undefined ? EmptyValueTag : currency === Currency.dollar ? PriceTag.Dollar\n                                + getThousandFormattedNumbers(summaryReward.feeDollar ? summaryReward.feeDollar : 0)\n                                : PriceTag.Yuan\n                                + getThousandFormattedNumbers(summaryReward.feeYuan ? summaryReward.feeYuan : 0)}\n                        </Typography>\n                    </Grid>\n                    <Grid display={'flex'} flexDirection={'column'} justifyContent={'space-around'} item sm={3}>\n                        <Typography variant={'body1'} component={'h5'}\n                                    color={'textSecondary'}>{t('labelMiningRewards')}</Typography>\n                        <Typography variant={'h4'} marginTop={1}>\n                            {summaryReward === undefined ? EmptyValueTag : currency === Currency.dollar ? PriceTag.Dollar\n                                + getThousandFormattedNumbers(summaryReward.rewardDollar ? summaryReward.rewardDollar : 0)\n                                : PriceTag.Yuan\n                                + getThousandFormattedNumbers(summaryReward.rewardYuan ? summaryReward.rewardYuan : 0)}\n                        </Typography>\n                    </Grid>\n                </StyleWrapper>\n                {/*<StyleWrapper container marginY={2} height={340}>*/}\n                {/*    <StyledBtnGroupWrapper display={'flex'} padding={3} justifyContent={'space-between'}>*/}\n                {/*        <Typography variant={'body1'} component={'h5'}*/}\n                {/*                    color={'textSecondary'}>{t('labelLiquidityValue')}</Typography>*/}\n                {/*        <Box marginRight={-1}>*/}\n                {/*            <ToggleButtonGroup exclusive size=\"small\" {...{*/}\n                {/*                ...rest,*/}\n                {/*                t,*/}\n                {/*                data: toggleData,*/}\n                {/*                value: chartPeriod,*/}\n                {/*                setValue: setChartPeriod*/}\n                {/*            }} />*/}\n                {/*        </Box>*/}\n                {/*    </StyledBtnGroupWrapper>*/}\n                {/*    <ScaleAreaChart type={ChartType.Trend} data={[]}/>*/}\n                {/*</StyleWrapper>*/}\n                <Typography paddingLeft={2} marginTop={2} variant={'h4'}>{t('labelMyAmm')}</Typography>\n                <TableWrapStyled container marginY={2} paddingBottom={2} flex={1} height={568}>\n                    <Grid item xs={12} display={'flex'} flexDirection={'column'}>\n                        <MyPoolTable\n                            rawData={myPoolRow}\n                            pagination={{pageSize: 5}}\n                            handleDeposit={(row: any) => {\n                                const pair = `${row.ammDetail.coinAInfo.name}-${row.ammDetail.coinBInfo.name}`\n                                JumpToLiqudity(pair, 'add')\n                            }}\n                            handleWithdraw={(row: any) => {\n                                const pair = `${row.ammDetail.coinAInfo.name}-${row.ammDetail.coinBInfo.name}`\n                                JumpToLiqudity(pair, 'remove')\n                            }}\n                            handlePageChange={() => {\n                            }}\n                        />\n                    </Grid>\n                </TableWrapStyled>\n                <Typography paddingLeft={2} variant={'h4'}>{t('labelMyAmmRecord')}</Typography>\n                <TableWrapStyled container marginTop={2}  paddingBottom={2} flex={1}>\n                    <Grid item xs={12} display={'flex'} flexDirection={'column'}>\n                        <AmmRecordTable rawData={myAmmMarketArray} handlePageChange={_handlePageChange} page={page}/>\n                    </Grid>\n                </TableWrapStyled>\n            </>\n        )\n    })","import { AmmPoolActivityRule, LoopringMap } from 'loopring-sdk';\nimport React from 'react';\nimport { AmmRecordRow, MyPoolRow } from '@loopring-web/component-lib';\nimport { makeWalletLayer2, WalletMapExtend } from '../../../hooks/help/makeWallet';\nimport {\n    getUserAmmTransaction,\n    makeMyAmmMarketArray,\n    makeMyPoolRowWithPoolState,\n    makeSummaryMyAmm,\n    SummaryMyAmm\n} from '../../../hooks/help';\nimport { useTokenMap } from '../../../stores/token';\nimport { useWalletLayer2 } from '../../../stores/walletLayer2';\nimport { useUserRewards } from '../../../stores/userRewards';\nimport { useAmmMap } from '../../../stores/Amm/AmmMap';\n\n\nexport const useOverview = <R extends { [ key: string ]: any }, I extends { [ key: string ]: any }>(\n    {\n        ammActivityMap\n    }: { ammActivityMap: LoopringMap<LoopringMap<AmmPoolActivityRule[]>> | undefined }\n): {\n    myAmmMarketArray: AmmRecordRow<R>[],\n    summaryReward: SummaryMyAmm | undefined,\n    myPoolRow: MyPoolRow<R>[]\n    // ammActivityViewMap: Array<AmmCardProps<I>>,\n    // ammActivityPastViewMap: Array<AmmCardProps<I>>\n} => {\n    const walletLayer2State = useWalletLayer2();\n    const userRewardsMapState = useUserRewards();\n    const {marketArray} = useTokenMap();\n    const ammMapState = useAmmMap();\n    const {ammMap} = ammMapState;\n\n    const [walletMap, setWalletMap] = React.useState<WalletMapExtend<R> | undefined>(undefined);\n    const [summaryReward, setSummaryReward] = React.useState<SummaryMyAmm | undefined>(undefined);\n    const [myPoolRow, setMyPoolRow] = React.useState<MyPoolRow<R>[]>([])\n    const [myAmmMarketArray, setMyAmmMarketArray] = React.useState<AmmRecordRow<R>[]>([]);\n    // const [ammUserRewardMap, setAmmUserRewardMap] = React.useState<AmmUserRewardMap|undefined>(undefined);\n    // const [snapShotData,setSnapShotData] = React.useState<{\n    //     tickerData: TickerData|undefined\n    //     ammPoolsBalance: AmmPoolSnapshot|undefined\n    // }|undefined>(undefined);\n    const walletLayer2DoIt = React.useCallback(() => {\n        const {walletMap: _walletMap} = makeWalletLayer2();\n        setWalletMap(_walletMap as WalletMapExtend<any>)\n        if (_walletMap) {\n            getUserAmmTransaction()?.then((marketTrades) => {\n                let _myTradeArray = makeMyAmmMarketArray(undefined, marketTrades)\n                setMyAmmMarketArray(_myTradeArray ? _myTradeArray : [])\n            })\n        }\n        return _walletMap\n    }, [makeWalletLayer2, getUserAmmTransaction, makeMyAmmMarketArray, marketArray])\n    const makeMyPoolRow = React.useCallback((_walletMap): MyPoolRow<R>[] => {\n        if (_walletMap && ammMap) {\n            // @ts-ignore\n            const _myPoolRow: MyPoolRow<R>[] = Reflect.ownKeys(_walletMap).reduce((prev: MyPoolRow<R>[], walletKey: string) => {\n                if (/LP-/i.test(walletKey)) {\n                    const ammKey = walletKey.replace('LP-', 'AMM-');\n                    const marketKey = walletKey.replace('LP-', '');\n                    let rowData: MyPoolRow<R> | undefined;\n                    //TODO：websocket open\n                    //  if(ammPoolSnapShots)\n                    // makeData by snapshot else\n                    // else\n                    \n                    rowData = makeMyPoolRowWithPoolState(\n                        {\n                            ammDetail: ammMap[ ammKey ] ,\n                            walletMap: _walletMap,\n                            market: marketKey,\n                            ammUserRewardMap: userRewardsMapState.userRewardsMap\n                        }\n                    ) as any\n                    if (rowData !== undefined) {\n                        prev.push(rowData);\n                    }\n                }\n                return prev\n            }, [] as MyPoolRow<R>[])\n            // console.log('rowData',_myPoolRow);\n            return _myPoolRow;\n        }\n        return [];\n    }, [ammMap, userRewardsMapState.userRewardsMap])\n\n    React.useEffect(() => {\n        if (walletLayer2State.walletLayer2) {\n            const _walletMap = walletLayer2DoIt();\n            if (ammMap) {\n                const _myPoolRow = makeMyPoolRow(_walletMap)\n                setMyPoolRow(_myPoolRow)\n            }\n        }\n    }, []);\n\n    React.useEffect(() => {\n        //ammMapState.ammMap or\n\n        switch (walletLayer2State.status) {\n            case \"ERROR\":\n                walletLayer2State.statusUnset();\n                break;\n            case \"DONE\":\n                walletLayer2State.statusUnset();\n               // const _walletMap = walletLayer2DoIt()\n                const _walletMap = walletLayer2DoIt();\n                //TODO check AmmMap state or ammSnapshot sockets\n                //userRewardsMapState is an option but  walletLayer2 amd ammMapState.ammMap is required\n                if (ammMapState.ammMap) {\n                    const _myPoolRow = makeMyPoolRow(_walletMap);\n                    setMyPoolRow(_myPoolRow)\n                }\n                break;\n            default:\n                break;\n\n        }\n        // }\n    }, [walletLayer2State.status])\n\n    React.useEffect(() => {\n        if (ammMapState.status === \"ERROR\") {\n            //TODO: solve error\n            ammMapState.statusUnset();\n        } else if (ammMapState.status === \"DONE\") {\n            ammMapState.statusUnset();\n            //TODO check AmmMap state or ammSnapshot sockets when websocket open  ammMapState done should not effect myPoolRow\n            if (walletLayer2State.walletLayer2) {\n                const _walletMap = walletLayer2DoIt();\n                //userRewardsMapState is an option and walletLayer2 is required\n                const _myPoolRow = makeMyPoolRow(_walletMap);\n                setMyPoolRow(_myPoolRow);\n            }\n        }\n    }, [ammMapState.status])\n\n    React.useEffect(() => {\n        if (userRewardsMapState.status === \"ERROR\") {\n            //TODO: solve error\n            userRewardsMapState.statusUnset();\n        } else if (userRewardsMapState.status === \"DONE\") {\n            userRewardsMapState.statusUnset();\n            // setAmmUserRewardMap()\n            const summaryReward = makeSummaryMyAmm({userRewardsMap: userRewardsMapState.userRewardsMap});\n            setSummaryReward(summaryReward);\n\n            //TODO check AmmMap state or ammSnapshot sockets\n            if (walletLayer2State.walletLayer2 && ammMapState.ammMap) {  //  ammMapState.ammMap or websocket\n                //userRewardsMapState is an option and walletLayer2 is required\n                const _myPoolRow = makeMyPoolRow(walletLayer2State.walletLayer2);\n                setMyPoolRow(_myPoolRow);\n            }\n\n        }\n    }, [userRewardsMapState.status])\n    return {\n        myAmmMarketArray,\n        summaryReward,\n        myPoolRow,\n        // ammActivityViewMap,\n        // ammActivityPastViewMap\n    }\n\n}\n","import { useRouteMatch } from 'react-router'\n\nimport { Box } from '@material-ui/core'\nimport {\n    SubMenu,\n    SubMenuList as BasicSubMenuList,\n} from '@loopring-web/component-lib'\nimport { withTranslation } from 'react-i18next'\nimport { subMenuLiquidity } from '@loopring-web/common-resources'\nimport { PoolsPanel } from './PoolsPanel'\nimport { CoinPairPanel } from './CoinPairPanel';\nimport { AmmMiningView } from './AmmMining';\nimport { MyLiquidity } from './MyLiquidity'\nimport { useAmmPool } from './hook';\n\nexport const subMenu = subMenuLiquidity\n\nconst SubMenuList = withTranslation(['layout','common'], { withRef: true })(BasicSubMenuList);\nexport const LiquidityPage = () => {\n\n    // const { ammFee } = useAmmPool('LRC', 'ETH')\n    //\n    // console.log('--- > ammFee:', ammFee)\n    //\n    const {ammActivityMap} = useAmmPool();\n    let match: any = useRouteMatch(['/liquidity/:item',':next/']);\n    const selected = match?.params.item ?? 'pools'\n    let matchPair: any = useRouteMatch(['/liquidity/:item/:next/:symbol']);\n    let symbol:any = undefined\n    if (matchPair && matchPair?.params?.next && matchPair.params.item === 'pools') {\n       if(!matchPair.params.symbol){\n           symbol='LRC-ETH';\n       }else{\n           symbol=matchPair.params.symbol;\n       }\n    }\n    \n    return (\n        <>\n            { symbol && <Box display={'flex'} flexDirection={'column'}  flex={1} alignSelf={'flex-start'}>\n              <CoinPairPanel ammActivityMap={ammActivityMap}/>\n            </Box>\n            }\n            {!symbol && <>  <Box width={'200px'} display={'flex'} justifyContent={'stretch'} marginRight={3} marginBottom={3}>\n                    <SubMenu>\n                        <SubMenuList selected={selected} subMenu={subMenu as any} />\n                    </SubMenu>\n                </Box>\n                <Box  minHeight={420}  display={'flex'} alignItems={'stretch'} justifyContent={'stretch'} flexDirection=\"column\" marginTop={0} flex={1} marginBottom={3}>\n                    {(selected === 'pools' && !symbol ) && <PoolsPanel ammActivityMap={ammActivityMap}/>}\n                    {(selected === 'amm-mining' && !symbol ) && <AmmMiningView ammActivityMap={ammActivityMap}/>}\n                    {(selected === 'my-liquidity' && !symbol ) && <MyLiquidity ammActivityMap={ammActivityMap}/>}\n                    {selected === 'orderBook-Mining' && <AmmMiningView ammActivityMap={ammActivityMap}/>}\n                    {/*{selected === 'orders' && <OrderPanel />}*/}\n                </Box>\n             </>\n            }\n        </>\n    )\n\n}\n","import React from 'react';\nimport { useAmmActivityMap } from '../../stores/Amm/AmmActivityMap';\n\nimport { AmmPoolActivityRule, LoopringMap } from 'loopring-sdk';\nimport { useAccount } from '../../stores/account/hook';\nimport { useUserRewards } from '../../stores/userRewards';\nimport { useAmmMap } from '../../stores/Amm/AmmMap';\n\nexport const useAmmPool = <R extends {[key:string]:any},I extends {[key:string]:any}>()=>{\n    const AmmActivityMapState  = useAmmActivityMap()\n    const {getUserRewards}  = useUserRewards()\n    const {account} = useAccount();\n    const {ammMap,getAmmMap} = useAmmMap();\n    const [ammActivityMap,setAmmActivityMap] = React.useState<LoopringMap<LoopringMap<AmmPoolActivityRule[]>>|undefined>(AmmActivityMapState.ammActivityMap)\n    // init AmmMap at begin\n    React.useEffect(() => {\n        if (!ammMap || Object.keys(ammMap).length === 0) {\n            getAmmMap();\n        }\n    }, []);\n    React.useEffect(() => {\n        switch (AmmActivityMapState.status) {\n            case \"ERROR\":\n                AmmActivityMapState.statusUnset();\n                // setState('ERROR')\n                //TODO: show error at button page show error  some retry dispath again\n                break;\n            case \"DONE\":\n                AmmActivityMapState.statusUnset();\n                setAmmActivityMap(AmmActivityMapState.ammActivityMap)\n                break;\n            default:\n                break;\n\n        }\n    }, [AmmActivityMapState.status])\n    React.useEffect(() => {\n        if(account.accountId){\n            getUserRewards()\n        }\n    }, [account.accountId])\n\n    return {\n        ammActivityMap\n    }\n\n}\n\n","import { HashRouter as Router, Route, Switch, } from 'react-router-dom'\n\nimport Header from 'layouts/header'\n\nimport QuotePage from 'pages/QuotePage'\nimport { SwapPage } from 'pages/SwapPage'\n\nimport Container from '@material-ui/core/Container'\nimport { Box } from '@material-ui/core'\nimport { DevWrapper } from '../provider/'\nimport { Layer2Page } from '../pages/Layer2Page'\nimport { LiquidityPage } from '../pages/LiquidityPage'\n\nconst RouterView = () => {\n    \n    return <Router>\n        <Header />\n\n        {/*<Box style={{marginTop: `var(--header-height)`}} flex={1} display={'flex'}>*/}\n        <Container maxWidth=\"lg\" style={{minHeight:'calc(100% - 64px - 32px)',display:'flex',flexDirection:'column'}}>\n            {/*style={{height: '100%' }}*/}\n            <Box display={'flex'} flex={1} alignItems={'stretch'} flexDirection={'row'} marginTop={3}  >\n                <Switch>\n                    <Route exact component={SwapPage} path='/'/>\n                    <Route exact component={QuotePage} path='/markets'/>\n                    <Route component={SwapPage} path='/trading/lite'/>\n                    <Route component={SwapPage} path='/trading/lite(/:symbol)'/>\n\n                    <Route exact component={Layer2Page} path='/layer2'/>\n                    <Route exact component={Layer2Page} path='/layer2/assets'/>\n                    <Route exact component={Layer2Page} path='/layer2/transactions'/>\n                    <Route exact component={Layer2Page} path='/layer2/trades'/>\n                    <Route exact component={Layer2Page} path='/layer2/ammRecords'/>\n                    {/* <Route exact component={Layer2Page} path='/layer2/orders'/> */}\n                    <Route exact component={Layer2Page} path='/layer2/setting'/>\n\n                    <Route exact component={LiquidityPage} path='/liquidity'/>\n                    <Route exact component={LiquidityPage} path='/liquidity/pools/*'/>\n                    <Route exact component={LiquidityPage} path='/liquidity/pools'/>\n                    {/*<Route exact component={LiquidityPage} path='/liquidity/pools/coinPair(/:symbol)'/>*/}\n                    <Route exact component={LiquidityPage} path='/liquidity/amm-mining'/>\n                    <Route exact component={LiquidityPage} path='/liquidity/my-liquidity'/>\n                    <Route exact component={LiquidityPage} path='/liquidity/orderBook-Mining'/>\n                    <Route exact component={LiquidityPage} path='/liquidity/maker-rebates'/>\n\n                    <DevWrapper>\n                        <Route exact path='/debug'>\n                        </Route>\n                    </DevWrapper>\n\n                </Switch>\n            </Box>\n        </Container>\n        {/*</Box>*/}\n\n    </Router>\n}\n\nexport default RouterView\n","import { Trans, useTranslation } from 'react-i18next';\nimport { Box, Container, Link, Typography } from '@material-ui/core';\nimport styled from '@emotion/styled';\nimport { ErrorObject } from '@loopring-web/common-resources';\nimport { getContactInfo } from '../../utils/dt_tools';\n\nconst StyleBox = styled(Box)`\n  background-image: url('./static/images/error_bg.png');\n  background-repeat: no-repeat;\n  background-size: contain;\n  background-position: bottom;\n  white-space: pre-wrap;\n  //h2{\n  //  position: relative;\n  //}\n` as typeof Box\n\nexport const ErrorPage = ({messageKey}: ErrorObject) => {\n    // const {messageKey}: { id?:string,messageKey:string } = {messageKey: 'errorMessageTokenMapIsEmpty'};\n    //TODO: checkRouter\n    const {t} = useTranslation('error');\n    const message = `labelConnectUs`;\n    return <>\n        <Container>\n            {/*style={{height: '100%' }}*/}\n            <StyleBox flex={1} display={'flex'} alignItems={'flex-start'} justifyContent={'center'}\n                      flexDirection={'column'} marginTop={4} height={680} maxWidth={1200}>\n                {/*<StyleBox>*/}\n                <Box textAlign={'center'} position={'relative'} left={128} top={-64}>\n                    <Typography component={'h2'} variant={'h2'}>\n                        {t(messageKey)}\n                    </Typography>\n                    <Typography marginY={2} component={'p'} variant={'body1'} color={'textSecondary'}>\n                        <Trans i18nKey={message}>\n                            If you believe this is indeed a bug, please <Link\n                            component={'a'}\n                            onClick={(e) => {\n                                window.location.href = getContactInfo();\n                                e.preventDefault();\n                            }}\n                        >contact us</Link> <br/> We would appreciate your feedback\n\n                        </Trans>\n                        {/*{t(message)}*/}\n                        {/*{t(messageKey)}*/}\n                    </Typography>\n                </Box>\n                {/*</StyleBox>*/}\n            </StyleBox>\n        </Container>\n\n        {/*<Footer></Footer>*/}\n    </>\n}\n","// import { i18nInstance as i18n  } from \"@loopring-web/common-resources\"\nimport i18n from 'i18next';\n\nconst covertLocale = (rawLocale: string = i18n.language) => {\n    return rawLocale.replace('_', '-')\n}\n\nexport function getLocaleDtFromTs(ts: number | string, locale: string = i18n.language) {\n    if (typeof(ts) === 'string') {\n        ts = parseInt(ts)\n    }\n    const dt = new Date(ts).toLocaleString(covertLocale(locale))\n    return dt\n}\n\nexport function getLocaleDt(dt?: Date, locale: string = i18n.language) {\n    if (dt) {\n        return dt.toLocaleString(covertLocale(locale))\n    }\n    return ''\n}\n\nexport function getContactInfo(subject: string = 'report to loopring website', body: string ='Body Content') {\n    const email = process.env.CONTACT_US_EMAIL ?? 'contact@loopring.io'\n    return `mailto:${email}?subject=${subject}&body=${body}`\n}\n","import store from '../../stores';\nimport { toBig } from 'loopring-sdk';\nimport { BIG10 } from '../../defs/swap_defs';\nimport BigNumber from 'bignumber.js';\n\nexport const volumeToCount = (symbol:string,volumn:string|number|BigNumber,tokenMap= store.getState().tokenMap.tokenMap):number|undefined =>{\n   const result =  volumeToCountAsBigNumber(symbol,volumn,tokenMap);\n   return result? result.toNumber():undefined;\n}\nexport const volumeToCountAsBigNumber = (symbol:string,volumn:string|number|BigNumber,tokenMap= store.getState().tokenMap.tokenMap):BigNumber|undefined =>{\n    if(tokenMap && tokenMap[symbol] && typeof volumn !== 'undefined'){\n        try{\n            return toBig(volumn).div( BIG10.pow(tokenMap[symbol].decimals))\n        }catch (error){\n            throw error;\n        }\n    }else{\n        return undefined;\n    }\n}","import { useDeepCompareEffect } from \"react-use\"\n\nexport function useCustomDCEffect(action: any, deps: any[] | undefined | null) {\n    useDeepCompareEffect(action, [deps || {}])\n}\n","import { useDispatch, useSelector } from 'react-redux'\nimport { AmmMapStates } from './interface';\nimport React from 'react';\nimport { getAmmMap, statusUnset } from './reducer';\n\nexport const useAmmMap = <R extends {[key:string]:any},I extends {[key:string]:any}>(): AmmMapStates<R,I> & {\n    getAmmMap:()=> void,\n    statusUnset:()=> void,\n} => {\n    const ammMap:AmmMapStates<R,I>= useSelector((state: any) => state.amm.ammMap)\n    const dispatch = useDispatch();\n    return {\n        ...ammMap,\n        statusUnset:React.useCallback(()=>dispatch(statusUnset(undefined)),[dispatch]),\n        getAmmMap:React.useCallback(()=>dispatch(getAmmMap(undefined)),[dispatch]),\n    }\n}\n","import { useDispatch, useSelector } from 'react-redux'\nimport { getTokenMap, statusUnset} from './reducer';\nimport { GetTokenMapParams, TokenMapStates } from './interface';\nimport React from 'react';\nimport { PayloadAction } from '@reduxjs/toolkit';\n\nexport function useTokenMap<R extends {[key:string]:any}>(): TokenMapStates<R> & {\n    getTokenMap:(props:PayloadAction<GetTokenMapParams<any>>)=>void,\n    statusUnset:()=>void,\n} {\n    const tokenMap:TokenMapStates<R> = useSelector((state: any) => state.tokenMap)\n    const dispatch = useDispatch();\n\n    return {\n        ...tokenMap,\n        statusUnset:React.useCallback(()=>dispatch(statusUnset(undefined)),[dispatch]),\n        getTokenMap:React.useCallback((props:PayloadAction<GetTokenMapParams<R>>)=>dispatch(getTokenMap(props)),[dispatch]),\n    }\n\n}\n","import { ConnectorNames } from 'loopring-sdk'\n\nimport {\n    injected,\n    network,\n    walletconnect,\n    walletlink,\n    ledger,\n    trezor,\n    authereum,\n} from 'networks/web3_connectors'\n\nexport const connectorsByName: { [connectorName in ConnectorNames]: any } = {\n    [ConnectorNames.Unknown]: undefined,\n    [ConnectorNames.Injected]: injected,\n    [ConnectorNames.Network]: network,\n    [ConnectorNames.WalletConnect]: walletconnect,\n    [ConnectorNames.WalletLink]: walletlink,\n    [ConnectorNames.Ledger]: ledger,\n    [ConnectorNames.Trezor]: trezor,\n    [ConnectorNames.Authereum]: authereum,\n}\n","import { useCallback, useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\n\nimport { useCustomDCEffect } from 'hooks/common/useCustomDCEffect'\n\nimport { useActiveWeb3React, } from 'hooks/web3/useWeb3'\n\nimport { Lv2Account, } from 'defs/account_defs'\n\nimport { AccountStatus, StatusChangeEvent } from 'state_machine/account_machine_spec'\n\nimport * as sign_tools from 'loopring-sdk'\n\nimport { connectorsByName } from 'defs/web3_defs'\n\nimport { ConnectorNames, dumpError400, ExchangeAPI, sleep, UpdateAccountRequestV3, UserAPI, VALID_UNTIL, } from 'loopring-sdk'\n\nimport { toHex, toBig, } from 'loopring-sdk'\n\nimport { RootState } from 'stores'\n\nimport {\n    reset, setAccountStatus, setConnectName,\n    setAccountInfo, setEddsaKey, setApikey, setAccAddr,\n} from 'stores/account/reducer'\n\nimport { AccountMachineSpec, } from 'state_machine/account_machine_spec'\n\nimport { buildMachine } from 'state_machine/machine_builder'\n\nimport voca from 'voca'\nimport { usePrevious } from 'react-use'\n\nimport Web3 from 'web3'\n\nimport { UserStorage } from 'storage'\n\nimport store from 'stores'\nimport { useWalletLayer1 } from '../walletLayer1';\nimport { useWalletLayer2 } from '../walletLayer2';\nimport { useTokenMap } from '../token';\nimport _ from 'lodash'\nimport { myLog } from 'utils/log_tools'\nimport { LoopringAPI } from 'stores/apis/api'\n\nexport function useWeb3Account() {\n\n    const {\n        connector,\n        library,\n        account,\n        chainId,\n        active,\n        error,\n    } = useActiveWeb3React()\n\n    const isConnected: boolean = active && !voca.isBlank(account as string)\n\n    return {\n        account,\n        connector,\n        library,\n        chainId,\n        active,\n        isConnected,\n        error,\n    }\n\n}\n\nexport function useAccount() {\n\n    const account: Lv2Account = useSelector((state: RootState) => state.account)\n\n    const isNoAccount = useCallback(() => {\n        return account.status === AccountStatus.NOACCOUNT\n    }, [account.status])\n\n    const isActivated = useCallback(() => {\n        return account.status === AccountStatus.ACTIVATED\n    }, [account.status])\n\n    return {\n        account,\n        isNoAccount,\n        isActivated,\n        apiKey: account.apiKey,\n        eddsaKey: account.eddsaKey,\n        accountId: account.accountId,\n    }\n}\n\nexport function useStateMachine() {\n    const dispatch = useDispatch()\n\n    const machine = buildMachine(AccountMachineSpec())\n\n    const sendEvent = useCallback((account: Lv2Account, event: StatusChangeEvent) => {\n        const nextState = machine(account.status, event)\n        if (nextState) {\n            dispatch(setAccountStatus(nextState))\n        }\n    }, [machine, dispatch])\n\n    return {\n        sendEvent,\n    }\n}\n\nexport function useConnect() {\n\n    const {\n        activate,\n    } = useActiveWeb3React()\n\n    const { sendEvent } = useStateMachine()\n\n    const dispatch = useDispatch()\n\n    const [activatingConnector, setActivatingConnector] = useState<any>()\n\n    const connect = useCallback((item_name: ConnectorNames, isSwitch: boolean = false) => {\n\n        if (isSwitch) {\n            myLog('try Connecting... isSwitch Reset')\n            sendEvent(store.getState().account, StatusChangeEvent.Reset)\n        }\n\n        const newConnector: any = connectorsByName[item_name]\n        myLog('newConnector:', newConnector)\n        setActivatingConnector(newConnector)\n        activate(newConnector)\n\n        UserStorage.setConnectorName(item_name)\n        \n        dispatch(setConnectName(item_name))\n\n        sendEvent(store.getState().account, StatusChangeEvent.Connecting)\n\n    }, [activate, dispatch, sendEvent, setActivatingConnector])\n\n    return {\n        connect,\n        activatingConnector,\n    }\n\n}\n\nexport function useDisconnect() {\n\n    const {\n        deactivate,\n    } = useActiveWeb3React()\n\n    const dispatch = useDispatch()\n\n    const disconnect = useCallback(() => {\n        deactivate()\n        console.log('disconnect!!!---->')\n        dispatch(reset(undefined))\n    }, [deactivate, dispatch])\n\n    return {\n        disconnect,\n    }\n\n}\n\nexport function useUnlock() {\n\n    const dispatch = useDispatch()\n\n    const { chainId } = useWeb3Account()\n\n    const { connector, } = useWeb3Account()\n\n    const { sendEvent } = useStateMachine()\n\n    const { resetLayer2 } = useWalletLayer2()\n\n    const lock = useCallback(async (account: Lv2Account) => {\n        resetLayer2()\n        sendEvent(account, StatusChangeEvent.Lock)\n    }, [sendEvent, resetLayer2])\n\n    const exchangeInfo = useSelector((state: RootState) => state.system.exchangeInfo)\n\n    const unlock = useCallback(async (account: Lv2Account) => {\n\n        if (!LoopringAPI.userAPI || !LoopringAPI.exchangeAPI || !connector\n            || !account.accountId || !exchangeInfo?.exchangeAddress\n            || !chainId\n            || account.status !== AccountStatus.LOCKED) {\n            return\n        }\n\n        if (account.status !== AccountStatus.LOCKED) {\n            throw Error('unexpected status:' + account.status)\n        }\n        \n        myLog('try to unlock!', account)\n\n        let event = undefined\n        let sk = undefined\n        let apikey: any = undefined\n\n        const provider = await connector.getProvider()\n        const web3 = new Web3(provider as any)\n\n        try {\n\n            const nonce = account.nonce - 1 < 0 ? 0 : account.nonce - 1\n            myLog('try to unlock! nonce:', nonce)\n\n            if (!account.eddsaKey) {\n                const eddsaKey = await sign_tools\n                    .generateKeyPair(\n                        web3,\n                        account.accAddr,\n                        exchangeInfo?.exchangeAddress,\n                        nonce,\n                        account.connectName,\n                    )\n                sk = eddsaKey.sk\n            } else {\n                sk = account.eddsaKey\n            }\n\n            myLog('useUnlock account:', account, ' sk:', sk)\n\n            apikey = await LoopringAPI.userAPI.getUserApiKey({\n                accountId: account.accountId\n            }, sk)\n\n            event = StatusChangeEvent.Unlock\n\n        } catch (reason) {\n            myLog('got :', reason)\n            dumpError400(reason)\n            if (reason?.response?.data?.resultInfo?.code === 100001) {\n\n                try {\n\n                    // const req: GetOffchainFeeAmtRequest = {\n                    //     accountId: account.accountId,\n                    //     requestType: OffchainFeeReqType.UPDATE_ACCOUNT,\n                    // }\n    \n                    // const response = await userApi.getOffchainFeeAmt(req, account.apiKey)\n\n                    const feeMap = {\n                        'ETH': '529000000000000',\n                        'LRC': '34000000000000000000',\n                        'USDT': '7850000',\n                        'DAI': '98100000000000000000',\n                    }\n                    \n                    const eddsaKey = await sign_tools\n                        .generateKeyPair(\n                            web3,\n                            account.accAddr,\n                            exchangeInfo?.exchangeAddress,\n                            account.nonce,\n                            account.connectName,\n                        )\n                    \n                    const request: UpdateAccountRequestV3 = {\n                        exchange: exchangeInfo?.exchangeAddress,\n                        owner: account.accAddr,\n                        accountId: account.accountId,\n                        publicKey: { x: eddsaKey.formatedPx, y: eddsaKey.formatedPy },\n                        maxFee: { tokenId: 0, volume: feeMap['ETH'] },\n                        validUntil: VALID_UNTIL,\n                        nonce: account.nonce,\n                    }\n\n                    const updateAccountResponse = await LoopringAPI.userAPI.updateAccount(request, web3,\n                        chainId, account.connectName, false)\n\n                    myLog('updateAccountResponse:', updateAccountResponse)\n\n                    await sleep(1000)\n\n                } catch (reason2) {\n                    dumpError400(reason2)\n                }\n            }\n            event = StatusChangeEvent.Reset\n        }\n\n        if (sk) {\n            dispatch(setEddsaKey(sk))\n        }\n\n        if (apikey?.apiKey) {\n            dispatch(setApikey(apikey.apiKey))\n        }\n\n        if (event) {\n            sendEvent(account, event)\n        }\n\n    }\n        , [dispatch, sendEvent, connector, chainId, exchangeInfo?.exchangeAddress])\n\n    return {\n        lock,\n        unlock,\n    }\n}\n\nasync function checkAccountAvailableAsync(exchangeApi: ExchangeAPI, userApi: UserAPI, account: Lv2Account, dispatch: any, sendEvent: any, connector: any, exchangeAddress: string) {\n\n    let accInfo = undefined\n    let event = undefined\n    let sk = undefined\n    let code = undefined\n    let apikey: any = undefined\n\n    try {\n        accInfo = (await exchangeApi.getAccount({\n            owner: account.accAddr\n        })).accInfo\n        if (accInfo.publicKey && accInfo.publicKey.x && accInfo.publicKey.y) {\n            if (account.accountId !== accInfo.accountId) {\n                const provider = await connector.getProvider()\n                const web3 = new Web3(provider as any)\n                try {\n                    code = await web3.eth.getCode(account.accAddr)\n                    try {\n                        const eddsakey = await sign_tools\n                            .generateKeyPair(\n                                web3,\n                                account.accAddr,\n                                exchangeAddress,\n                                accInfo.nonce - 1,\n                                account.connectName,\n                            )\n                        sk = toHex(toBig(eddsakey.keyPair.secretKey))\n                        const px = toHex(toBig(eddsakey.keyPair.publicKeyX))\n                        const py = toHex(toBig(eddsakey.keyPair.publicKeyY))\n\n                        try {\n                            apikey = await userApi.getUserApiKey({\n                                accountId: accInfo.accountId\n                            }, sk)\n                            event = (StatusChangeEvent.HasPubkey)\n                        } catch (reason) {\n                            dumpError400(reason)\n                            event = (StatusChangeEvent.ErrorResponse)\n                        }\n                    } catch (reason) {\n                        dumpError400(reason)\n                        event = (StatusChangeEvent.ErrorResponse)\n                    }\n\n                } catch (reason) {\n                    dumpError400(reason)\n                    event = (StatusChangeEvent.ErrorResponse)\n                }\n\n            } else {\n                myLog('already has accountId!')\n            }\n        } else {\n            event = (StatusChangeEvent.HasNoPubkey)\n        }\n    } catch (reason) {\n        // 3 has none of above\n        dumpError400(reason)\n        // check deposit tx (local and ethereum)\n        event = (StatusChangeEvent.ErrorResponse)\n    }\n\n    if (accInfo && accInfo.owner !== account.accAddr) {\n        dispatch(setAccountInfo(accInfo))\n    }\n\n    if (sk) {\n        dispatch(setEddsaKey(sk))\n    }\n\n    if (apikey) {\n        dispatch(setApikey(apikey.apiKey))\n    }\n\n    if (event) {\n        sendEvent(event)\n    }\n\n}\n\nexport function useCheckAccStatus() {\n\n    const dispatch = useDispatch()\n\n    const { sendEvent } = useStateMachine()\n\n    const { account: web3Account, active, isConnected, chainId, connector, } = useWeb3Account()\n    const { marketArray } = useTokenMap()\n\n    const lv1Acc = web3Account as string\n\n    const prevChainId = usePrevious(chainId)\n    const prevWeb3Account = usePrevious(web3Account)\n\n    const {updateWalletLayer1, resetLayer1,} = useWalletLayer1()\n    const {updateWalletLayer2, resetLayer2, } = useWalletLayer2();\n\n    // const { updateWalletLayer1,resetLayer1} = useWalletLayer1();\n    // const { updateWalletLayer2, resetLayer2} = useWalletLayer2()\n    // console.log('prevChainId:', prevChainId, ' chainId:', chainId)\n    // console.log('prevWeb3Account:', prevWeb3Account, ' web3Account:', web3Account)\n    // console.log(exchangeApi, userApi, account, 'prevChainId:', prevChainId, 'chainId:', chainId, 'web3Account:', web3Account)\n\n    useCustomDCEffect(async() => {\n\n        const account = store.getState().account as Lv2Account\n\n        const exchangeAddress = store.getState().system.exchangeInfo?.exchangeAddress\n\n        const cleanUp = () => {\n            let handler = UserStorage.getHandler()\n            if (account.status !== AccountStatus.ACTIVATED && handler) {\n                clearInterval(handler)\n            }\n        }\n\n        async function checkStatus() {\n\n            if (!account || !lv1Acc || !LoopringAPI.userAPI || !LoopringAPI.exchangeAPI || !chainId\n                || !connector || !exchangeAddress) {\n                return\n            }\n\n            // if (((prevChainId && chainId && prevChainId !== chainId)\n            //     || (prevWeb3Account && web3Account && prevWeb3Account !== web3Account))\n            //     && account.status !== AccountStatus.UNCONNNECTED) {\n            //     console.log('-------------------->>>>>>>Reset')\n            //     dispatch(reset(undefined))\n            //     sendEvent(account, StatusChangeEvent.Reset)\n            //     return\n            // }\n\n            cleanUp()\n\n            switch (account.status) {\n                case AccountStatus.UNCONNNECTED:\n                    myLog('---> render UNCONNNECTED active:', active, ' isConnected:', isConnected)\n\n                    //HIGH:\n                    // resetLayer1()\n                    // resetLayer2()\n\n                    if (active && isConnected) {\n\n                        if (UserStorage.getConnectorName() === ConnectorNames.Injected) {\n                            dispatch(setConnectName(ConnectorNames.Injected))\n                        }\n\n                        sendEvent(account, StatusChangeEvent.Connecting)\n                    }\n                    break\n\n                case AccountStatus.CONNECTED:\n                    //check session or local storage\n\n                    myLog('---> render CONNECTED account:', account)\n\n                    try {\n\n                        const { accInfo } = (await LoopringAPI.exchangeAPI.getAccount({ owner: lv1Acc }))\n\n                        // current acc is local acc info\n                        if (account.accAddr && account.eddsaKey && accInfo.owner === account.accAddr) {\n                            // console.log('cur Eddsakey:', account.eddsaKey)\n                        } else {\n                            // console.log('got a new address:', acc)\n                            // got a new address\n                            dispatch(setAccountInfo(accInfo))\n                            // dispatch(setEddsaKey(''))\n\n                            //updateWalletLayer1();\n                            if (marketArray?.length) {\n                                updateWalletLayer1()\n                            }\n                        }\n\n                        sendEvent(account, StatusChangeEvent.HasPubkey)\n\n                    } catch (reason) {\n                        dumpError400(reason)\n\n                        if (lv1Acc) {\n                            dispatch(setAccAddr(lv1Acc))\n                        }\n\n                        if (reason.response && reason.response.data && reason.response.data.resultInfo\n                            && reason.response.data.resultInfo.code === 101002) {\n                            sendEvent(account, StatusChangeEvent.ErrorResponse)\n                        }\n                    }\n\n                    break\n\n                case AccountStatus.NOACCOUNT:\n\n                    myLog('NOACCOUNT before wait 30s!')\n\n                    _.delay(() => {\n                        sendEvent(account, StatusChangeEvent.Reconnect)\n                        myLog('NOACCOUNT wait 15s to reconnect again!')\n                    }, 30000)\n\n                    break\n\n                case AccountStatus.DEPOSITING:\n                    const depositFinished = true // TODO\n                    if (depositFinished) {\n                        //   console.log('depositFinished currStatus:', account.status)\n                        sendEvent(account, StatusChangeEvent.FinishDeposit)\n                    }\n                    break\n\n                case AccountStatus.DEPOSIT_TO_CONFIREM:\n                    // getAccount every 10s to check\n                    break\n\n                case AccountStatus.UNACTIVATED:\n                    const isSmartWallet = false // TODO\n                    if (isSmartWallet) {\n                        sendEvent(account, StatusChangeEvent.IsSmartWallet)\n                    } else {\n                        // console.log('approve hash no smartwallet, account.status:', account.status)\n                    }\n                    break\n\n                case AccountStatus.ARPROVING:\n                    const approved = false // TODO\n                    if (approved) {\n                        //  console.log('sub contract event, check approving. approved! status:', account.status)\n                        sendEvent(account, StatusChangeEvent.ApproveSubmit)\n                    }\n                    break\n\n                case AccountStatus.APPROV_TO_CONFIRM:\n                    const approveConfirmed = false // TODO\n                    if (approveConfirmed) {\n                        //   console.log('approveConfirmed status:', account.status)\n                        sendEvent(account, StatusChangeEvent.ApproveConfirmed)\n                    }\n                    break\n\n                case AccountStatus.LOCKED:\n                    //HIGH:\n                    resetLayer1()\n                    break\n\n                case AccountStatus.ACTIVATED:\n                    UserStorage.checkTimeout(true)\n                    const handler = setInterval(() => {\n                        const isTimeOut = UserStorage.checkTimeout()\n                        if (account.status === AccountStatus.ACTIVATED && isTimeOut) {\n                            clearInterval(handler)\n                            sendEvent(account, StatusChangeEvent.Lock)\n                        }\n                    }, 1000)\n                    UserStorage.setHandler(handler)\n                    updateWalletLayer2()\n                    break\n\n                default:\n                    break\n            }\n\n\n\n        }\n\n        checkStatus()\n\n        return () => {\n            cleanUp()\n        }\n\n    }, [updateWalletLayer1, updateWalletLayer2, resetLayer1, resetLayer2,\n        LoopringAPI.userAPI, LoopringAPI.exchangeAPI, store.getState().account.status, prevChainId, chainId, lv1Acc, \n        dispatch, connector, store.getState().system.exchangeInfo?.exchangeAddress])\n\n}\n\n","export const buildMachine = <S, E>(spec: any) => (currentState: S, event: E) => {\n    // We get all possible transitions for the current State\n    const stateTransitions = spec.states[currentState]\n\n    // No transitions? Error!\n    if (stateTransitions === undefined) {\n        throw new Error(`No transitions defined for ${currentState}`)\n    }\n\n    // We try to transition to the next state\n    const nextState = stateTransitions[event]\n\n    // No next state? Error!\n    if (nextState === undefined) {\n        throw new Error(\n            `Unknown transition for event ${event} in state ${currentState}`\n        )\n    }\n\n   // console.log('got nextState:', nextState)\n\n    // We return the new state\n    return nextState\n}\n","import { createSlice, PayloadAction, Slice } from '@reduxjs/toolkit'\n\nimport { AccountInfo, ConnectorNames, } from 'loopring-sdk'\n\nimport { Lv2Account, } from 'defs/account_defs'\nimport { AccountStatus } from 'state_machine/account_machine_spec'\nimport { UserStorage } from 'storage'\nimport { myLog } from 'utils/log_tools'\n\n\nconst initialState = () => {\n  const defaultAccId = process.env.REACT_APP_TEST_ACCOUND_ID ? process.env.REACT_APP_TEST_ACCOUND_ID : UserStorage.getAccountId()\n  const defaultApiKey = process.env.REACT_APP_TEST_API_KEY ? process.env.REACT_APP_TEST_API_KEY : UserStorage.getApikey()\n  const defaultOwner = process.env.REACT_APP_TEST_OWNER ? process.env.REACT_APP_TEST_OWNER : UserStorage.getAccount()\n  const defaultEddsaKey = process.env.REACT_APP_TEST_EDDSA_KEY ? process.env.REACT_APP_TEST_EDDSA_KEY : UserStorage.getEddsakey()\n\n  const defaultStatus = AccountStatus.UNCONNNECTED\n  return {\n    accAddr: defaultOwner,\n    status: defaultStatus,\n    accountId: defaultAccId,\n    publicKey: {},\n    nonce: 0,\n    isContractAddress: false,\n    apiKey: defaultApiKey,\n    eddsaKey: defaultEddsaKey,\n    connectName: ConnectorNames.Unknown,\n  } as Lv2Account\n}\n\nconst accountSlice:Slice = createSlice({\n  name: 'account',\n  initialState: initialState(),\n  reducers: {\n    reset(state) {\n      myLog('try to reset account !!!!!!!!!')\n      const initState = initialState()\n      Object.assign(state, initState)\n    },\n    setAccAddr(state, action: PayloadAction<string>) {\n      state.accAddr = action.payload\n      // UserStorage.setAccount(action.payload)\n    },\n    setAccountInfo(state, action: PayloadAction<AccountInfo>) {\n      state.accAddr = action.payload.owner\n      state.accountId = action.payload.accountId\n      state.nonce = action.payload.nonce\n      state.publicKey = action.payload.publicKey\n\n      // UserStorage.setAccount(state.accAddr)\n      // UserStorage.setAccountId(state.accountId)\n      \n    },\n    setApikey(state, action: PayloadAction<string>) {\n      state.apiKey = action.payload\n      // UserStorage.setApikey(action.payload)\n    },\n    setAccountStatus(state, action: PayloadAction<AccountStatus>) {\n      state.status = action.payload\n    },\n    setEddsaKey(state, action: PayloadAction<any>) {\n      state.eddsaKey = action.payload\n      // UserStorage.setEddsakey(action.payload)\n    },\n    setConnectName(state, action: PayloadAction<ConnectorNames>) {\n      state.connectName = action.payload\n    },\n    setIsContractAddress(state, action: PayloadAction<boolean>) {\n      state.isContractAddress = action.payload\n    },\n  },\n})\n\nexport const { reset, setAccAddr, setApikey, setConnectName, setAccountInfo, setAccountStatus, setEddsaKey, setIsContractAddress, } = accountSlice.actions\nexport default accountSlice\n","import { myLog } from \"utils/log_tools\"\n\nexport enum CONSTANTS {\n    Handler = 'handler',\n    AccountId = 'account_id',\n    Account = 'account',\n    Apikey = 'apikey',\n    Eddsakey = 'eddsakey',\n    ActiveTime = 'active_time',\n    AmmOrder = 'amm_order',\n    HardwareAddresses = 'hardware_addresses',\n    ConnectorName = 'connector_name',\n}\n\nconst SESSION_TIMEOUT_SECONDS = 600\n\nexport class UserStorage {\n\n    public static getHandler() {\n        const rawHandler = sessionStorage.getItem(CONSTANTS.Handler)\n        try {\n            if (rawHandler !== undefined && rawHandler !== null)\n                return parseInt(rawHandler)\n        } catch (err) {\n        }\n        return undefined\n    }\n\n    public static setConnectorName(connectionName: string) {\n        sessionStorage.setItem(CONSTANTS.ConnectorName, connectionName)\n    }\n\n    public static getConnectorName() {\n        return sessionStorage.getItem(CONSTANTS.ConnectorName)\n    }\n\n    public static clearConnectorName() {\n        sessionStorage.removeItem(CONSTANTS.ConnectorName)\n    }\n\n    public static setHandler(handler: any) {\n        sessionStorage.setItem(CONSTANTS.Handler, handler)\n    }\n\n    public static clearHandler() {\n        sessionStorage.removeItem(CONSTANTS.Handler)\n    }\n\n    public static checkTimeout(reset: boolean = false) : boolean {\n        let dateTimeStr = localStorage.getItem(CONSTANTS.ActiveTime)\n        let now = new Date().getTime()\n\n        if (dateTimeStr !== null && !reset) {\n            let tmpDt = new Date(parseInt(dateTimeStr))\n\n            if(now - tmpDt.getTime() > SESSION_TIMEOUT_SECONDS * 1000) {\n                myLog(`TIMEOUT! now:${now} dateTimeStr:${dateTimeStr} delta:${now - tmpDt.getTime()}`)\n                sessionStorage.clear()\n                localStorage.setItem(CONSTANTS.ActiveTime, now.toString())\n                return true\n            }\n        } else {\n            localStorage.setItem(CONSTANTS.ActiveTime, now.toString())\n        }\n\n        return false\n    }\n\n\n    public static getAccountId() {\n        const rawId = sessionStorage.getItem(CONSTANTS.AccountId)\n        try {\n            if (rawId)\n                return parseInt(rawId)\n        } catch (err) {\n        }\n        return undefined\n    }\n\n    public static setAccountId(accountId: number) {\n        sessionStorage.setItem(CONSTANTS.AccountId, accountId.toString())\n    }\n\n    public static getAccount() {\n        return sessionStorage.getItem(CONSTANTS.Account)\n    }\n\n    public static setAccount(account: string) {\n        sessionStorage.setItem(CONSTANTS.Account, account)\n    }\n\n    public static getApikey() {\n        return sessionStorage.getItem(CONSTANTS.Apikey)\n    }\n\n    public static setApikey(apikey: string) {\n        sessionStorage.setItem(CONSTANTS.Apikey, apikey)\n    }\n\n    public static getEddsakey() {\n        return sessionStorage.getItem(CONSTANTS.Eddsakey)\n    }\n\n    public static setEddsakey(eddsakey: string) {\n        sessionStorage.setItem(CONSTANTS.Eddsakey, eddsakey)\n    }\n\n    public static getAmmOrder(): string {\n        var orderHash = localStorage.getItem(CONSTANTS.AmmOrder)\n        return orderHash ? orderHash : ''\n    }\n\n    public static setAmmOrder(orderHash: string) {\n        localStorage.setItem(CONSTANTS.AmmOrder, orderHash)\n    }\n\n    public static clearAmmOrder() {\n        localStorage.removeItem(CONSTANTS.AmmOrder)\n    }\n\n    public static isHardwareAddress(address: string) {\n        let current = localStorage.getItem(CONSTANTS.HardwareAddresses)\n        if (current) {\n            if (current.includes(address.toLowerCase())) {\n                return true\n            }\n        }\n        return false\n    }\n\n    public static saveHardwareAddress(address: string) {\n        let current = localStorage.getItem(CONSTANTS.HardwareAddresses);\n        if (current) {\n            if (current.includes(address.toLowerCase()) !== true) {\n                let newValue = current + ',' + address.toLowerCase();\n                localStorage.setItem(CONSTANTS.HardwareAddresses, newValue);\n            }\n        } else {\n            localStorage.setItem(CONSTANTS.HardwareAddresses, address.toLowerCase());\n        }\n\n    }\n}\n","import { debug } from \"console\"\n\nexport function deepClone(data: any) {\n    if (!data || !(data instanceof Object) || (typeof data == \"function\")) {\n        return data || undefined\n    }\n    let constructor = data.constructor\n    let result = new constructor()\n    for (let key in data) {\n        if (data.hasOwnProperty(key)) {\n            result[key] = deepClone(data[key])\n        }\n    }\n    return result\n}\n\nexport async function copyToClipBoard(text: string){ //复制到剪切板\n\n    if(document.execCommand){\n        var textarea =document.createElement('textarea')\n        document.body.appendChild(textarea)\n        textarea.value=text\n        textarea.select()\n        document.execCommand(\"copy\")\n        document.body.removeChild(textarea)\n\t}\n\n    if (navigator.clipboard) {\n        await navigator.clipboard.writeText(text)\n    }\n\n\tif((window as any).clipboardData) {\n        (window as any).clipboardData.setData(\"Text\", text)\n\n        console.log('clipboardData:', text)\n        return true\n    }\n\treturn false\n}","export enum Theme {\n    dark = 'dark',\n    light = 'light',\n}\n\nexport enum LangType {\n    en = 'en_US',\n    cn = 'zh_CN',\n}\n\nexport enum SystemStatus {\n    NORMAL,\n    ERROR,\n    UNKNOWN,\n}\n\nexport enum MODAL_TYPE {\n    UNKNOWN,\n    LOADING,\n    WALLET,\n}\n\nexport const REFRESH_RATE = 1000\n\nexport const REFRESH_RATE_SLOW = 10000\n\nexport const UPDATE_ACC_DELAY = 2500\n\nexport const TOAST_TIME = 3000\n","import { useDispatch, useSelector } from 'react-redux'\nimport { reset, statusUnset, updateWalletLayer2 } from './reducer';\nimport { WalletLayer2States } from './interface';\nimport { myLog } from 'utils/log_tools';\nimport _ from 'lodash'\nimport React from 'react';\nimport { TOAST_TIME, UPDATE_ACC_DELAY } from 'defs/common_defs';\n\nexport function useWalletLayer2(): WalletLayer2States & {\n    delayAndUpdateWalletLayer2: () => Promise<void>,\n    updateWalletLayer2: () => void,\n    statusUnset: () => void,\n    resetLayer2: () => void,\n} {\n    const walletLayer2: WalletLayer2States = useSelector((state: any) => state.walletLayer2)\n    const dispatch = useDispatch();\n\n    // const updateWalletLayer2 = () => {\n    //     dispatch(walletLayer2Slice.actions.updateWalletLayer2(undefined))\n    // }\n    // const statusUnset = ()=>{\n    //     dispatch(walletLayer2Slice.actions.statusUnset(undefined))\n    // }\n    // const resetLayer2 = ()=>{\n    //     dispatch(walletLayer2Slice.actions.reset(undefined))\n    // }\n    return {\n        ...walletLayer2,\n        resetLayer2: React.useCallback(() => {\n            myLog('resetLayer2 resetLayer2 resetLayer2')\n            dispatch(reset(undefined))\n        }, [dispatch]),\n        statusUnset: React.useCallback(() => dispatch(statusUnset(undefined)), [dispatch]),\n        updateWalletLayer2: React.useCallback(() => dispatch(updateWalletLayer2(undefined)), [dispatch]),\n        delayAndUpdateWalletLayer2: React.useCallback(async () => {\n            myLog('try to delayAndUpdateWalletLayer2!' + new Date().getTime())\n            _.delay(() => {\n                dispatch(updateWalletLayer2(undefined))\n                myLog('try to delayAndUpdateWalletLayer2 updated!' + new Date().getTime())\n                return Promise.resolve()\n            }, UPDATE_ACC_DELAY);\n        }, [dispatch]),\n    }\n\n}\n","import { InjectedConnector } from '@web3-react/injected-connector'\nimport { NetworkConnector } from '@web3-react/network-connector'\nimport { WalletConnectConnector } from '@web3-react/walletconnect-connector'\nimport { WalletLinkConnector } from '@web3-react/walletlink-connector'\nimport { LedgerConnector } from '@web3-react/ledger-connector'\nimport { TrezorConnector } from '@web3-react/trezor-connector'\nimport { AuthereumConnector } from '@web3-react/authereum-connector'\nimport { myLog } from 'utils/log_tools'\n\nconst POLLING_INTERVAL = 12000\n\nconst RPC_URLS: { [chainId: number]: string } = {\n  1: process.env.REACT_APP_RPC_URL_1 as string,\n  5: process.env.REACT_APP_RPC_URL_5 as string\n}\n\nmyLog('RPC_URLS 1:', RPC_URLS[1])\nmyLog('RPC_URLS 5:', RPC_URLS[5])\n\nexport const injected = new InjectedConnector({ supportedChainIds: [1, 5,] })\n\nexport const network = new NetworkConnector({\n  urls: RPC_URLS,\n  defaultChainId: 1\n})\n\nexport const walletconnect = new WalletConnectConnector({\n  rpc: RPC_URLS,\n  bridge: 'https://bridge.walletconnect.org',\n  qrcode: true,\n  pollingInterval: POLLING_INTERVAL\n})\n\nexport const walletlink = new WalletLinkConnector({\n  url: RPC_URLS[1],\n  appName: 'Loopring DEX'\n})\n\nexport const ledger = new LedgerConnector({ chainId: 1, url: RPC_URLS[1], pollingInterval: POLLING_INTERVAL })\n\nexport const trezor = new TrezorConnector({\n  chainId: 1,\n  url: RPC_URLS[1],\n  pollingInterval: POLLING_INTERVAL,\n  manifestEmail: 'dummy@abc.xyz',\n  manifestAppUrl: 'http://localhost:1234'\n})\n\nexport const authereum = new AuthereumConnector({ chainId: 42 })\n","import { createSlice, PayloadAction, Slice } from '@reduxjs/toolkit'\nimport { AmmMapStates, GetAmmMapParams } from './interface';\nimport { STATUS } from '../../constant';\n\n\n\nconst initialState: Required<AmmMapStates<object, object>> = {\n    ammMap: undefined,\n    __timer__: -1,\n    status: 'UNSET',\n    errorMessage: null,\n}\nconst ammMapSlice: Slice = createSlice({\n    name: 'ammMap',\n    initialState,\n    reducers: {\n        getAmmMap(state, action: PayloadAction<GetAmmMapParams>) {\n            state.status = STATUS.PENDING\n        },\n        getAmmMapStatus(state, action: PayloadAction<AmmMapStates<any, any>>) {\n            // @ts-ignore\n            if (action.error) {\n                state.status = STATUS.ERROR\n                // @ts-ignore\n                state.errorMessage = action.error\n            }\n            const {ammMap, __timer__} = action.payload\n            if (ammMap) {state.ammMap = ammMap;}\n            if (__timer__) {state.__timer__ = __timer__;}\n            state.status = STATUS.DONE\n        },\n        updateRealTimeAmmMap(state, action: PayloadAction<undefined>) {\n            state.status = STATUS.PENDING\n        },\n        statusUnset: state => {\n            state.status = STATUS.UNSET\n        }\n    },\n});\nexport { ammMapSlice };\nexport const {getAmmMap, getAmmMapStatus, statusUnset, updateRealTimeAmmMap} = ammMapSlice.actions\n","import { Provider } from 'react-redux'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nimport { createWeb3ReactRoot, Web3ReactProvider } from '@web3-react/core'\nimport store from 'stores'\n\nimport { getLibrary } from 'utils/web3_tools'\nimport { NetworkContextName } from 'loopring-sdk'\n\nimport { getTheme, i18n } from \"@loopring-web/common-resources\"\nimport { provider, ProviderComposer } from \"@loopring-web/common-resources\"\n\nimport { ThemeProvider as MuThemeProvider } from '@material-ui/core'\nimport LocalizationProvider from '@material-ui/pickers/LocalizationProvider'\n\nimport MomentUtils from '@material-ui/lab/AdapterMoment'\n\nimport { ThemeProvider } from \"@emotion/react\"\n\nimport { I18nextProvider } from \"react-i18next\"\n\nconst Web3ProviderNetwork = createWeb3ReactRoot(NetworkContextName)\nconst providers = [\n    provider(LocalizationProvider as any, {dateAdapter: MomentUtils}),\n    provider(I18nextProvider as any, {i18n:i18n}),\n    provider(MuThemeProvider as any, {theme: getTheme('dark')}),\n    provider(ThemeProvider as any, {theme: getTheme('dark')}),\n    provider(Provider as any, {store}),\n]\n\nReactDOM.render(\n// @ts-ignore\n    <ProviderComposer providers={providers}>\n        <Web3ReactProvider getLibrary={getLibrary}>\n            <Web3ProviderNetwork getLibrary={getLibrary}>\n                <App/>\n            </Web3ProviderNetwork>\n        </Web3ReactProvider>\n    </ProviderComposer>,\n    document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\nif (process.env.NODE_ENV !== 'production') {\n    reportWebVitals(console.log)\n}\n","import { useDispatch, useSelector } from 'react-redux'\nimport { updateWalletLayer1, reset,statusUnset } from './reducer';\nimport { WalletLayer1States } from './interface';\nimport React from 'react';\nimport { myLog } from 'utils/log_tools';\n\nexport function useWalletLayer1(): WalletLayer1States & {\n    updateWalletLayer1:()=> void,\n    statusUnset:()=> void,\n    resetLayer1:()=>void,\n} {\n    const walletLayer1:WalletLayer1States = useSelector((state: any) => state.walletLayer1)\n    const dispatch = useDispatch();\n\n    return {\n        ...walletLayer1,\n        resetLayer1:React.useCallback(()=>{\n            myLog('resetLayer1 resetLayer1 resetLayer1')\n            dispatch(reset(undefined))\n        },[dispatch]),\n        statusUnset:React.useCallback(()=>dispatch(statusUnset(undefined)),[dispatch]),\n        updateWalletLayer1:React.useCallback(()=>dispatch(updateWalletLayer1(undefined)),[dispatch]),\n    }\n\n}\n","import { createSlice, PayloadAction, Slice } from '@reduxjs/toolkit'\nimport { STATUS } from '../constant';\nimport { StateBase } from '../interface';\nimport { SocketMap } from './interface';\n\nconst initialState: StateBase & {socket: SocketMap} = {\n  socket: {},\n  status: 'UNSET',\n  errorMessage: null,\n}\nconst socketSlice: Slice<StateBase & {socket: SocketMap}> = createSlice({\n  name: 'socket',\n  initialState,\n  reducers: {\n    socketEnd(state,action:PayloadAction<undefined>){\n      state.socket = {};\n      state.status = STATUS.PENDING;\n    },\n    sendSocketTopic(state, action: PayloadAction<{socket: SocketMap}>) {\n      state.socket = action.payload.socket\n    },\n    getSocketStatus(state, action: PayloadAction<undefined>) {\n\n      // @ts-ignore\n      if (action.error) {\n        state.status = STATUS.ERROR\n        // @ts-ignore\n        state.errorMessage = action.error\n      }\n      // state.socket = action.payload.socket\n      state.status = STATUS.DONE\n    },\n\n    statusUnset: state => {\n      state.status = STATUS.UNSET\n    }\n\n  },\n});\nexport { socketSlice };\nexport const { getSocketStatus, sendSocketTopic, socketEnd, statusUnset} = socketSlice.actions;\n","import { createSlice, PayloadAction, Slice } from '@reduxjs/toolkit'\nimport {  TickerStates } from './interface';\nimport { STATUS } from '../constant';\nimport { CoinKey } from '@loopring-web/common-resources';\n\nconst initialState:Required<TickerStates>  = {\n    tickerMap:{},\n    status:'UNSET',\n    errorMessage:null,\n}\nconst tickerMapSlice:Slice = createSlice({\n    name: 'tickerMap',\n    initialState,\n    reducers: {\n        getTicker(state, action:PayloadAction<CoinKey<any>>) {\n            state.status = STATUS.PENDING\n        },\n        getTickers(state, action:PayloadAction<Array<CoinKey<any>>>) {\n            state.status = STATUS.PENDING\n        },\n        getTickerStatus(state, action: PayloadAction<TickerStates>) {\n            // @ts-ignore\n            if (action.error) {\n                state.status =  STATUS.ERROR\n                // @ts-ignore\n                state.errorMessage = action.error\n            }\n            state.tickerMap = action.payload.tickerMap;//{...state.tickerMap,...};\n            state.status = STATUS.DONE\n        },\n        statusUnset: state => {\n            state.status = STATUS.UNSET\n        }\n\n    },\n});\nexport { tickerMapSlice };\nexport const { getTicker,getTickers, getTickerStatus, statusUnset } = tickerMapSlice.actions;","import { createSlice, PayloadAction, Slice } from '@reduxjs/toolkit'\nimport { WalletLayer2Map, WalletLayer2States } from './interface';\nimport { STATUS } from '../constant';\n\n\nconst initialState:WalletLayer2States  = {\n    walletLayer2:undefined,\n    status:'UNSET',\n    errorMessage:null,\n}\nconst walletLayer2Slice:Slice = createSlice({\n    name: 'walletLayer2',\n    initialState,\n    reducers: {\n        updateWalletLayer2(state, action:PayloadAction<string | undefined>) {\n            state.status = STATUS.PENDING\n        },\n        reset(state, action:PayloadAction<string | undefined>) {\n            state.walletLayer2 = undefined;\n            state.status = STATUS.UNSET;\n        },\n        getWalletLayer2Status(state, action: PayloadAction<{ walletLayer2:WalletLayer2Map<object> }>) {\n            // @ts-ignore\n            if (action.error) {\n                state.status =  STATUS.ERROR\n                // @ts-ignore\n                state.errorMessage = action.error\n            }\n            state.walletLayer2 = {...action.payload.walletLayer2};\n            state.status = STATUS.DONE\n        },\n        statusUnset: state => {\n            state.status = STATUS.UNSET\n        }\n    },\n});\nexport { walletLayer2Slice };\nexport const {  updateWalletLayer2,getWalletLayer2Status,statusUnset,reset } = walletLayer2Slice.actions\n","import { useDispatch, useSelector } from 'react-redux'\nimport { getUserRewards, statusUnset } from './reducer';\nimport { UserRewardsStates } from './interface';\nimport React from 'react';\n\nexport function useUserRewards(): UserRewardsStates & {\n    getUserRewards:()=>void,\n    statusUnset:()=>void,\n} {\n    const userRewardsMap:UserRewardsStates = useSelector((state: any) => state.userRewardsMap)\n    const dispatch = useDispatch();\n    return {\n        ...userRewardsMap,\n        statusUnset:React.useCallback(()=>dispatch(statusUnset(undefined)),[dispatch]),\n        getUserRewards: React.useCallback(()=>dispatch(getUserRewards(undefined)),[dispatch]),\n    }\n\n}\n","import { StateBase } from '../interface';\nimport { ChainId, ExchangeInfo } from 'loopring-sdk';\n\nexport enum ENV {\n    DEV='DEV',\n    UAT='UAT',\n    PROD='PROD',\n}\nexport enum NETWORKEXTEND {\n    NONETWORK = 'unknown'\n}\nexport type NETWORK = NETWORKEXTEND | ChainId\n\n\nexport type System<C extends {[key:string]:any}> = {\n    env:keyof typeof ENV,\n    chainId: 1|5|'unknown'\n    // network: keyof typeof NETWORK,\n    socketURL:string,\n    baseURL: string,\n    faitPrices:{ [k in keyof C]:{price:any,[key:string]:any}} | undefined,\n    gasPrice:number | undefined,\n    forex:number | undefined,\n    exchangeInfo: ExchangeInfo | undefined,\n\n}\n\nexport type SystemStatus = System<{[key:string]:any}> & {\n    // system:System | {}\n    __timer__:NodeJS.Timeout | -1\n    topics: any[]\n}  & StateBase\n\n\n\n","import { createSlice, PayloadAction, Slice } from '@reduxjs/toolkit'\nimport { WalletLayer1Map, WalletLayer1States } from './interface';\nimport { STATUS } from '../constant';\n\n\nconst initialState:WalletLayer1States  = {\n    walletLayer1:undefined,\n    status:'UNSET',\n    errorMessage:null,\n}\nconst walletLayer1Slice:Slice = createSlice({\n    name: 'walletLayer1',\n    initialState,\n    reducers: {\n        updateWalletLayer1(state, action:PayloadAction<string | undefined>) {\n            state.status = STATUS.PENDING\n        },\n        reset(state, action:PayloadAction<string | undefined>) {\n            state.walletLayer1 = undefined;\n            state.status = STATUS.UNSET;\n        },\n        getWalletLayer1Status(state, action: PayloadAction<{ walletLayer1:WalletLayer1Map<object> }>) {\n            // @ts-ignore\n            if (action.error) {\n                state.status =  STATUS.ERROR\n                // @ts-ignore\n                state.errorMessage = action.error\n            }\n            state.walletLayer1 = {...action.payload.walletLayer1};\n            state.status = STATUS.DONE\n        },\n        statusUnset: state => {\n            state.status = STATUS.UNSET\n        }\n    },\n});\nexport { walletLayer1Slice };\nexport const { updateWalletLayer1, getWalletLayer1Status,statusUnset,reset } = walletLayer1Slice.actions\n","import { createSlice, PayloadAction, Slice } from '@reduxjs/toolkit'\nimport {  UserRewardsStates } from './interface';\nimport { STATUS } from '../constant';\n\nconst initialState:UserRewardsStates = {\n    userRewardsMap:undefined,\n    status:'UNSET',\n    errorMessage:null,\n    __timer__:-1,\n}\nconst userRewardsMapSlice:Slice<UserRewardsStates> = createSlice({\n    name: 'userRewardsMap',\n    initialState,\n    reducers: {\n        getUserRewards(state, action:PayloadAction<undefined>) {\n            state.status = STATUS.PENDING\n        },\n        getUserRewardsStatus(state, action: PayloadAction<UserRewardsStates>) {\n            // @ts-ignore\n            if (action.error) {\n                state.status =  STATUS.ERROR\n                // @ts-ignore\n                state.errorMessage = action.error\n            }\n            state.userRewardsMap = {...state.userRewardsMap,...action.payload.userRewardsMap};\n            if(action.payload.__timer__){\n                state.__timer__  =  action.payload.__timer__\n            }\n            state.status = STATUS.DONE\n        },\n        statusUnset: state => {\n            state.status = STATUS.UNSET\n        }\n\n    },\n});\nexport { userRewardsMapSlice };\nexport const { getUserRewards, getUserRewardsStatus, statusUnset } = userRewardsMapSlice.actions;","import { createSlice, PayloadAction, Slice } from '@reduxjs/toolkit'\nimport { AmmActivityMapStates } from './interface';\nimport { STATUS } from '../../constant';\n\n\nconst initialState:Required<AmmActivityMapStates>  = {\n    ammActivityMap:{},\n    status:'UNSET',\n    errorMessage:null,\n}\nconst ammActivityMapSlice:Slice = createSlice({\n    name: 'ammActivityMap',\n    initialState,\n    reducers: {\n        getAmmActivityMap(state, action:PayloadAction<string | undefined>) {\n            state.status = STATUS.PENDING\n        },\n        getAmmActivityMapStatus(state, action: PayloadAction<AmmActivityMapStates>) {\n            // @ts-ignore\n            if (action.error) {\n                state.status =  STATUS.ERROR\n                // @ts-ignore\n                state.errorMessage = action.error\n            }\n            state.ammActivityMap = {...action.payload.ammActivityMap};\n            state.status = STATUS.DONE\n        },\n        statusUnset: state => {\n            state.status = STATUS.UNSET\n        }\n\n    },\n});\nexport { ammActivityMapSlice };\nexport const { getAmmActivityMap, getAmmActivityMapStatus, statusUnset } = ammActivityMapSlice.actions\n","import { createSlice, PayloadAction, Slice } from '@reduxjs/toolkit'\nimport { GetTokenMapParams, TokenMapStates } from './interface';\nimport { STATUS } from '../constant';\n\nconst initialState: TokenMapStates<object> = {\n    coinMap: {},\n    totalCoinMap: {},\n    addressIndex: undefined,\n    tokenMap: undefined,\n    marketMap: undefined,\n    idIndex: undefined,\n    status: 'UNSET',\n    errorMessage: null,\n}\nconst tokenMapSlice: Slice<TokenMapStates<object>> = createSlice({\n    name: 'tokenMap',\n    initialState,\n    reducers: {\n        getTokenMap(state, action: PayloadAction<GetTokenMapParams<any>>) {\n            state.status = STATUS.PENDING\n        },\n        getTokenMapStatus(state, action: PayloadAction<TokenMapStates<object>>) {\n            // @ts-ignore      console.log(action.type)\n            if (action.error) {\n                state.status = STATUS.ERROR\n                // @ts-ignore\n                state.errorMessage = action.error\n            }\n\n            const {tokenMap, totalCoinMap, marketMap, addressIndex, idIndex, coinMap, marketArray, marketCoins} = action.payload;\n            if (tokenMap) { state.tokenMap = tokenMap }\n            if (marketMap) { state.marketMap = marketMap }\n            if (addressIndex) { state.addressIndex = addressIndex }\n            if (idIndex) { state.idIndex = idIndex }\n            if (coinMap) { state.coinMap = coinMap }\n            if (totalCoinMap) { state.totalCoinMap = totalCoinMap }\n            if (marketArray) { state.marketArray = marketArray }\n            if (marketCoins)  { state.marketCoins = marketCoins }\n            // if (tokenPairsMap) {state.tokenPairsMap = tokenPairsMap }\n            state.status = STATUS.DONE;\n        },\n        \n        // getTokenPairMap(state, action: PayloadAction<{tokenPairs: TokenPairs }>) {\n        //     const {tokenPairs} = action.payload;\n        //     const tokenPairsMap =  Reflect.ownKeys(tokenPairs).reduce((prev,key)=>{\n        //         // @ts-ignore\n        //         return prev[key as string] =  tokenPairs[key as string].tokenList\n        //     }, {} )\n        //     if (tokenPairsMap) {state.tokenPairsMap = tokenPairsMap }\n        //     // state.status = STATUS.PENDING\n        // },\n        statusUnset: state => {\n            state.status = STATUS.UNSET\n        }\n\n    },\n});\nexport { tokenMapSlice };\nexport const {getTokenMap, getTokenMapStatus, statusUnset} = tokenMapSlice.actions;","import { createSlice, PayloadAction, Slice } from '@reduxjs/toolkit'\nimport { ENV, System, SystemStatus } from './interface';\nimport { STATUS } from '../constant';\n\nconst initialState: SystemStatus = {\n    env: ENV.PROD,\n    chainId: 'unknown',\n    // network:'NONETWORK',\n    baseURL: '',\n    socketURL: '',\n    faitPrices: undefined,\n    gasPrice: undefined,\n    forex: undefined,\n    __timer__: -1,\n    status: 'UNSET',\n    errorMessage: null,\n\n    exchangeInfo: undefined,\n\n    topics: [],\n}\nconst systemSlice: Slice<SystemStatus> = createSlice({\n    name: 'system',\n    initialState,\n    reducers: {\n\n        updateSystem(state, action: PayloadAction<System<{[key:string]:any}>>) {\n            state.chainId = action.payload.chainId\n            state.status = STATUS.PENDING\n        },\n        // updateSocketURL(state, action:PayloadAction<{socketURL:string}>) {\n        //     state.socketURL =  action.payload.socketURL;\n        // },\n        updateRealTimeObj(state, action: PayloadAction<Partial<{ faitPrices: any, gasPrice: number, forex: number }>>) {\n            const {forex, faitPrices, gasPrice} = action.payload;\n            if (forex) {\n                state.forex = forex\n            }\n            if (faitPrices) {\n                state.faitPrices = faitPrices\n            }\n            if (gasPrice) {\n                state.gasPrice = gasPrice\n            }\n\n\n            // state = {\n            //     ...state.system,\n            //     forex: forex?,\n            //     faitPrices: action.payload.faitPrices ? action.payload.faitPrices : state.system.faitPrices,\n            //     gasPrice: action.payload.gasPrice ? action.payload.gasPrice : state.system.gasPrice,\n            // };\n\n        },\n        getSystemStatus(state, action: PayloadAction<Partial<SystemStatus>>) {\n\n            // @ts-ignore\n            if (action.error) {\n                state.status = STATUS.ERROR\n                // @ts-ignore\n                state.errorMessage = action.error\n            }\n            const {env, baseURL,socketURL, faitPrices, gasPrice, forex, exchangeInfo, __timer__} = action.payload;\n            if (env) {\n                state.env = env\n            }\n            if(socketURL){\n                state.socketURL = socketURL;\n            }\n            if (baseURL) {\n                state.baseURL = baseURL\n            }\n            if (faitPrices) {\n                state.faitPrices = faitPrices\n            }\n            if (gasPrice) {\n                state.gasPrice = gasPrice\n            }\n            if (forex) {\n                state.forex = forex\n            }\n            \n            if (exchangeInfo) {\n                state.exchangeInfo = exchangeInfo\n            }\n\n            if (__timer__) {\n                state.__timer__ = __timer__\n            }\n            state.status = STATUS.DONE\n        },\n        statusUnset: state => {\n            state.status = STATUS.UNSET\n        }\n\n    },\n});\nexport { systemSlice };\nexport const {updateSystem, setTopics, getSystemStatus, statusUnset, updateRealTimeObj} = systemSlice.actions;","import { useMemo, useState, useEffect, useCallback } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\n\nimport { Web3Provider } from '@ethersproject/providers'\nimport { Web3ReactContextInterface } from '@web3-react/core/dist/types'\n\nimport { useWeb3React } from '@web3-react/core'\n\nimport { isMobile } from 'react-device-detect'\n\nimport { injected } from 'networks/web3_connectors'\n\nimport { ChainId, ConnectorNames, NetworkContextName } from 'loopring-sdk'\nimport { myLog } from 'utils/log_tools'\nimport { setConnectName } from 'stores/account/reducer'\nimport { UserStorage } from 'storage'\n\nexport function useActiveWeb3React(): Web3ReactContextInterface<Web3Provider> & { chainId?: ChainId } {\n  const context = useWeb3React<Web3Provider>()\n  const contextNetwork = useWeb3React<Web3Provider>(NetworkContextName)\n  return context.active ? context : contextNetwork\n}\n\nexport function useEtherscan() {\n  const { chainId } = useActiveWeb3React()\n\n  const [etherscanUrl, setEtherscanUrl] = useState<string>('')\n\n  useEffect(() => {\n    switch(chainId) {\n      case ChainId.MAINNET:\n        setEtherscanUrl('https://etherscan.io/address/')\n        break\n      default:\n        setEtherscanUrl('https://goerli.etherscan.io/address/')\n    }\n  }, [chainId])\n\n  return {\n    etherscanUrl,\n  }\n}\n\nexport function useEagerConnect() {\n\n  const { activate, active } = useWeb3React()\n\n  const [tried, setTried] = useState(false)\n\n  const dispatch = useDispatch()\n\n  useEffect(() => {\n    injected.isAuthorized().then((isAuthorized: boolean) => {\n      if (isAuthorized) {\n        myLog('useEagerConnect isAuthorized')\n        activate(injected, undefined, true).then(() => {\n          myLog('-------------------->>>>>>>dispatch 1')\n          UserStorage.setConnectorName(ConnectorNames.Injected)\n        }).catch(() => {\n          setTried(true)\n        })\n      } else {\n        if (isMobile && window.ethereum) {\n          activate(injected, undefined, true).then(() => {\n            myLog('-------------------->>>>>>>dispatch 2')\n            UserStorage.setConnectorName(ConnectorNames.Injected)\n          }).catch(() => {\n            setTried(true)\n          })\n        } else {\n          setTried(true)\n        }\n      }\n    })\n  }, [activate, dispatch]) // intentionally only running on mount (make sure it's only mounted once :))\n\n  // if the connection worked, wait until we get confirmation of that to flip the flag\n  useEffect(() => {\n    if (active) {\n      setTried(true)\n    }\n  }, [active])\n\n  return tried\n}\n\nexport function useInactiveListener(onReConnectInjected: any = undefined, suppress: boolean = false) {\n  const { active, error, activate, } = useWeb3React()\n\n  useEffect((): any => {\n    const { ethereum } = window as any\n\n    const reConnectInjected = () => {\n      activate(injected)\n      if (onReConnectInjected) {\n        onReConnectInjected()\n      }\n    }\n\n    if (ethereum && ethereum.on && !active && !error && !suppress) {\n\n      const handleChainChanged = (chainId: string | number) => {\n        myLog('Handling \\'chainChanged\\' event with payload', chainId)\n        reConnectInjected()\n      }\n      const handleAccountsChanged = (accounts: string[]) => {\n        myLog('---------------------------------------------')\n        myLog('Handling \\'accountsChanged\\' event with payload', accounts)\n        if (accounts.length > 0) {\n          reConnectInjected()\n        }\n      }\n\n      ethereum.on('chainChanged', handleChainChanged)\n      ethereum.on('accountsChanged', handleAccountsChanged)\n\n      return () => {\n        if (ethereum.removeListener) {\n          ethereum.removeListener('chainChanged', handleChainChanged)\n          ethereum.removeListener('accountsChanged', handleAccountsChanged)\n        }\n      }\n    }\n  }, [active, error, suppress, activate, onReConnectInjected])\n}\n\nexport function useBlockNumber() {\n  const { library, chainId } = useActiveWeb3React()\n\n  const [blockNumber, setBlockNumber] = useState<number>()\n\n  useEffect((): any => {\n      if (!!library) {\n          let stale = false\n\n          library\n              .getBlockNumber()\n              .then((blockNumber: number) => {\n                  if (!stale) {\n                      setBlockNumber(blockNumber)\n                  }\n              })\n              .catch(() => {\n                  if (!stale) {\n                      setBlockNumber(-1)\n                  }\n              })\n\n          const updateBlockNumber = (blockNumber: number) => {\n              setBlockNumber(blockNumber)\n          }\n          library.on('block', updateBlockNumber)\n\n          return () => {\n              stale = true\n              library.removeListener('block', updateBlockNumber)\n              setBlockNumber(undefined)\n          }\n      }\n  }, [library, chainId])\n\n  return {\n      blockNumber,\n  }\n}\n\nexport function useBalance() {\n  const { account, library, chainId } = useActiveWeb3React()\n\n  const [balance, setBalance] = useState<number>()\n  useEffect((): any => {\n      if (!!account && !!library) {\n          let stale = false\n\n          library\n              .getBalance(account)\n              .then((balance: any) => {\n                  if (!stale) {\n                      setBalance(balance)\n                  }\n              })\n              .catch(() => {\n                  if (!stale) {\n                      setBalance(0)\n                  }\n              })\n\n          return () => {\n              stale = true\n              setBalance(0)\n          }\n      }\n  }, [account, library, chainId]) // ensures refresh if referential identity of library doesn't change across chainIds\n\n  return {\n      balance,\n  }\n}\n","import { AmmpoolAPI, ChainId, ExchangeAPI, UserAPI, WalletAPI, WsAPI } from \"loopring-sdk\"\nimport store from 'stores'\n\nexport function getChainId(){\n    const chainId = store.getState().system.chainId\n    return chainId\n}\n\nexport const walletAPI = () => {\n    const walletApi = new WalletAPI(getChainId() as ChainId)\n    return walletApi\n}\n\nexport const userAPI = () => {\n    const userApi = new UserAPI(getChainId() as ChainId)\n    return userApi\n}\n\nexport const exchangeAPI = () => {\n    const exchangeApi = new ExchangeAPI(getChainId() as ChainId)\n    return exchangeApi\n}\n\nexport const ammpoolAPI = () => {\n    const ammpoolApi = new AmmpoolAPI(getChainId() as ChainId)\n    return  ammpoolApi\n}\n\nexport const wsAPI = () => {\n    const wsApi = new WsAPI(getChainId() as ChainId)\n    return wsApi\n}\n\nexport class LoopringAPI {\n    \n    public static userAPI: UserAPI | undefined = undefined\n    public static exchangeAPI: ExchangeAPI | undefined = undefined\n    public static ammpoolAPI: AmmpoolAPI | undefined = undefined\n    public static walletAPI: WalletAPI | undefined = undefined\n    public static wsAPI: WsAPI | undefined = undefined\n\n    public static InitApi = (chainId: ChainId) => {\n        LoopringAPI.userAPI = new UserAPI(chainId) \n        LoopringAPI.exchangeAPI = new ExchangeAPI(chainId) \n        LoopringAPI.ammpoolAPI = new AmmpoolAPI(chainId) \n        LoopringAPI.walletAPI = new WalletAPI(chainId) \n        LoopringAPI.wsAPI = new WsAPI(chainId) \n    }\n\n}\n","import {\n    AmmPoolActivityRule,\n    AmmPoolActivityStatus,\n    AmmPoolSnapshot,\n    LoopringMap,\n    TickerData,\n    toBig,\n} from 'loopring-sdk';\nimport { AmmActivity, AmmCardProps, MyAmmLP } from '@loopring-web/common-resources';\nimport store from '../../stores';\nimport { deepClone } from '../../utils/obj_tools';\nimport { AmmUserReward, AmmUserRewardMap } from 'loopring-sdk/dist/defs/loopring_defs';\nimport BigNumber from 'bignumber.js';\nimport { volumeToCount, volumeToCountAsBigNumber } from './volumeToCount';\nimport { coinMap } from '@loopring-web/component-lib';\nimport { AmmDetailStore } from '../../stores/Amm/AmmMap';\nimport { WalletMapExtend } from './makeWallet';\nimport { VolToNumberWithPrecision } from '../../utils/formatter_tool';\n\nexport type AmmActivityViewMap<R, I> = {\n    [key in keyof R]?: AmmActivity<I>[] | undefined\n}\nexport const makeUIAmmActivityMap = <R extends { [ key: string ]: any }, I extends { [ key: string ]: any }>\n({ammActivityMap, type, ammPoolActivityStatus}: {\n    ammActivityMap: LoopringMap<LoopringMap<AmmPoolActivityRule[ ]>> | undefined,\n    type: 'AMM_MINING' | 'SWAP_VOLUME_RANKING',\n    ammPoolActivityStatus: AmmPoolActivityStatus[]\n}, myReward: AmmUserRewardMap | undefined):\n    Array<AmmCardProps<I>> => {\n    const {coinMap, tokenMap, idIndex} = store.getState().tokenMap\n    let ammActivityViewMap: AmmActivityViewMap<R, I> = {}\n    if (ammActivityMap && ammActivityMap[ type ]) {\n\n\n        // @ts-ignore\n        ammPoolActivityStatus.forEach((status: AmmPoolActivityStatus) => {\n\n            if (ammActivityMap[ type ][ status ]) {\n                // @ts-ignore\n                ammActivityMap[ type ][ status ].reduce((prev: AmmActivityViewMap<R, I>, ammPoolActivityRule: AmmPoolActivityRule) => {\n\n                    if (coinMap && ammPoolActivityRule.awardRules[ 0 ] && idIndex && tokenMap) {\n\n                        const symbol = idIndex[ ammPoolActivityRule.awardRules[ 0 ].tokenId as any ]\n                        const totalRewards = VolToNumberWithPrecision(ammPoolActivityRule.awardRules[ 0 ].volume ,symbol)\n                        // @ts-ignore\n                        const item = {\n                            // @ts-ignore\n                            rewardToken: coinMap[ symbol ],\n                            totalRewards: Number(totalRewards),\n                            myRewards: status === AmmPoolActivityStatus.InProgress && myReward && myReward[ ammPoolActivityRule.market ] ?\n                                volumeToCount(symbol, myReward[ ammPoolActivityRule.market ]?.currentRewards[ 0 ].volume) : 0,\n                            duration: {\n                                from: new Date(ammPoolActivityRule?.rangeFrom),\n                                to: new Date(ammPoolActivityRule?.rangeTo),\n                            },\n                            isPass: AmmPoolActivityStatus.EndOfGame === status,\n                        }\n                        if (prev[ ammPoolActivityRule.market ]) {\n                            // @ts-ignore\n                            prev[ ammPoolActivityRule.market ].push(item);\n                        } else {\n                            // @ts-ignore\n                            prev[ ammPoolActivityRule.market ] = [item];\n                        }\n\n\n                        // return prev;\n                    }\n                    return prev;\n                }, ammActivityViewMap)\n\n            }\n        })\n    }\n    const resultArray = makeAsCard(ammActivityViewMap)\n    // console.log(resultArray)\n    return resultArray;\n\n\n}\nconst makeAsCard = <R extends { [ key: string ]: any }, I extends { [ key: string ]: any }>\n(ammActivityViewMap: AmmActivityViewMap<R, I> | undefined, myReward?: any): Array<AmmCardProps<I>> => {\n    const {coinMap} = store.getState().tokenMap\n    const {ammMap} = store.getState().amm.ammMap\n    try {\n        if (ammActivityViewMap && coinMap) {\n            // @ts-ignore\n            return Reflect.ownKeys(ammActivityViewMap).reduce((prev: Array<AmmCardProps<I>>, key: string) => {\n                const _ammInfo = ammMap[ key as string ]\n                if (_ammInfo && _ammInfo.coinA && coinMap && ammActivityViewMap[ key ]) {\n\n                    // @ts-ignore\n                    const itemArray = ammActivityViewMap[ key ].map((item) => {\n                        return {\n                            ...deepClone(_ammInfo),\n                            // @ts-ignore\n                            coinAInfo: coinMap[ _ammInfo.coinA ],\n                            // @ts-ignore\n                            coinBInfo: coinMap[ _ammInfo.coinB ],\n                            activity: item,\n                        }\n                    })\n                    prev = [...prev, ...itemArray]\n                }\n                return prev;\n            }, [] as Array<AmmCardProps<I>>) as Array<AmmCardProps<I>>\n        } else {\n            return [] as Array<AmmCardProps<I>>\n        }\n    } catch (error) {\n        console.log(error)\n        return []\n    }\n}\ntype Value = undefined | number;\nexport type SummaryMyAmm = {\n    rewardDollar: Value,\n    rewardYuan: Value,\n    feeDollar: Value,\n    feeYuan: Value,\n}\nexport const makeSummaryMyAmm = <C extends { [ key: string ]: any }>({\n                                                                         userRewardsMap\n                                                                     }: {\n    userRewardsMap: LoopringMap<AmmUserReward> | undefined\n}):\n    SummaryMyAmm | undefined => {\n    const {coinMap, idIndex, tokenMap} = store.getState().tokenMap;\n    const {faitPrices, forex} = store.getState().system;\n    if (userRewardsMap && idIndex && coinMap && tokenMap && faitPrices && forex) {\n        let summaryMyAmm = Object.keys(userRewardsMap).reduce((prev, key) => {\n            if (/AMM-/i.test(key)) {\n                // @ts-ignore\n                const [, coinA, coinB] = key.match(/AMM-(\\w+)-(\\w+)/i);\n                const ammUserReward = userRewardsMap[ key ]\n                const {\n                    rewardDollar,\n                    rewardYuan,\n                    feeDollar,\n                    feeYuan\n                } = getOneRewardInfo({coinB, coinA, ammUserReward, idIndex, faitPrices, forex})\n                prev.rewardDollar = rewardDollar ? toBig(rewardDollar).plus(prev.rewardDollar).toNumber() : 0;\n                prev.rewardYuan = rewardYuan ? toBig(rewardYuan).plus(prev.rewardYuan).toNumber() : 0;\n                prev.feeDollar = feeDollar ? toBig(feeDollar).plus(prev.feeDollar).toNumber() : 0;\n                prev.feeYuan = feeYuan ? toBig(feeYuan).plus(prev.feeYuan).toNumber() : 0;\n            }\n            return prev\n        }, {\n            rewardDollar: 0,\n            rewardYuan: 0,\n            feeDollar: 0,\n            feeYuan: 0\n        })\n\n        return summaryMyAmm\n    }\n    return undefined\n}\nconst getOneRewardInfo = <C>({\n                                 coinA,\n                                 coinB,\n                                 ammUserReward,\n                                 idIndex,\n                                 faitPrices,\n                                 forex,\n                                 walletMap,\n                                 snapShotData\n                             }: any) => {\n    let rewardToken, rewardToken2, feeA, feeB, feeDollar, feeYuan, reward, reward2, rewardDollar, rewardYuan;\n    if (ammUserReward) {\n        rewardToken = ammUserReward.currentRewards[ 0 ] ? idIndex[ ammUserReward.currentRewards[ 0 ].tokenId as number ] : undefined\n        rewardToken2 = ammUserReward.currentRewards[ 1 ] ? idIndex[ ammUserReward.currentRewards[ 1 ].tokenId as number ] : undefined\n        feeA = ammUserReward ? volumeToCountAsBigNumber(coinA, ammUserReward.feeRewards[ 0 ]) : toBig(0);\n        feeB = ammUserReward ? volumeToCountAsBigNumber(coinB, ammUserReward.feeRewards[ 1 ]) : toBig(0);\n        feeA = feeA ? feeA : toBig(0);\n        feeB = feeB ? feeB : toBig(0);\n        feeDollar = feeA.times(faitPrices[ coinA ]?faitPrices[ coinA ].price:0).plus(feeB.times(faitPrices[ coinB ]?faitPrices[ coinB ].price:0))\n        feeYuan = feeDollar.times(forex);\n        reward = rewardToken ? volumeToCountAsBigNumber(rewardToken, ammUserReward.currentRewards[ 0 ].volume) as BigNumber : toBig(0);\n        reward2 = rewardToken2 ? volumeToCountAsBigNumber(rewardToken2, ammUserReward.currentRewards[ 1 ].volume) as BigNumber : toBig(0);\n        reward = reward ? reward : toBig(0);\n        reward2 = reward2 ? reward2 : toBig(0);\n        rewardDollar = reward.times(rewardToken ? faitPrices[ rewardToken ].price : 1).plus(reward2.times(rewardToken2 ? faitPrices[ rewardToken2 ].price : 1));\n        rewardYuan = rewardDollar.times(forex);\n    }\n    let balanceA, balanceB, balanceDollar, balanceYuan;\n    if (walletMap && walletMap[ 'LP-' + coinA + '-' + coinB ] && snapShotData) {\n        // @ts-ignore\n        const ratio = new BigNumber(walletMap[ 'LP-' + coinA + '-' + coinB ].count).div(snapShotData.ammPoolsBalance.lp.volume);\n        balanceA = ratio.times(volumeToCountAsBigNumber(coinA, snapShotData.ammPoolsBalance.pooled[ 0 ].volume) || 1);\n        balanceB = ratio.times(volumeToCountAsBigNumber(coinB, snapShotData.ammPoolsBalance.pooled[ 1 ].volume) || 1);\n        // @ts-ignore\n        balanceDollar = balanceA.times(faitPrices[ coinA ].price).plus(balanceB.times(faitPrices[ coinB ].price))\n        balanceYuan = balanceDollar.times(forex)\n    }\n\n    return {\n        feeA: feeA ? feeA.toNumber() : undefined,\n        feeB: feeB ? feeB.toNumber() : undefined,\n        reward: reward ? reward.toNumber() : undefined,\n        rewardToken: rewardToken ? coinMap[ rewardToken ] : undefined,\n        reward2: reward2 ? reward2.toNumber() : undefined,\n        rewardToken2: rewardToken2 ? coinMap[ rewardToken2 ] : undefined,\n        rewardDollar: rewardDollar ? rewardDollar.toNumber() : undefined,\n        rewardYuan: rewardYuan ? rewardYuan.toNumber() : undefined,\n        feeDollar: feeDollar ? feeDollar.toNumber() : undefined,\n        feeYuan: feeYuan ? feeYuan.toNumber() : undefined,\n        ammDetail: {\n            coinAInfo: coinMap[ coinA ],\n            coinBInfo: coinMap[ coinB ]\n        },\n        balanceA: balanceA ? balanceA.toNumber() : undefined,\n        balanceB: balanceB ? balanceB.toNumber() : undefined,\n        balanceDollar: balanceDollar ? balanceDollar.toNumber() : undefined,\n        balanceYuan: balanceYuan ? balanceYuan.toNumber() : undefined,\n    } as MyAmmLP<C>\n}\n\nexport const makeMyAmmWithSnapshot = <C extends { [ key: string ]: any }>(market: any, _walletMap: WalletMapExtend<C> | undefined, ammUserRewardMap: LoopringMap<AmmUserReward> | undefined, snapShotData?: {\n    tickerData?: TickerData | undefined\n    ammPoolsBalance: AmmPoolSnapshot | undefined\n} | undefined) => {\n    const {coinMap, idIndex, tokenMap} = store.getState().tokenMap;\n    const {faitPrices, forex} = store.getState().system;\n    const [, coinA, coinB] = market.match(/(\\w+)-(\\w+)/i);\n    let _myAmm: Partial<MyAmmLP<C>> = {};\n    if (ammUserRewardMap && ammUserRewardMap[ 'AMM-' + market ]\n        && snapShotData && snapShotData.ammPoolsBalance) {\n        const ammUserReward: AmmUserReward = ammUserRewardMap[ 'AMM-' + market ];\n        // @ts-ignore\n        if (coinMap && tokenMap && idIndex && forex && faitPrices) {\n            _myAmm = getOneRewardInfo({\n                coinA, coinB, ammUserReward,\n                idIndex, faitPrices, forex, walletMap: _walletMap, snapShotData\n            })\n\n            return _myAmm as MyAmmLP<C>\n        }\n    }\n    return {\n        feeA: undefined,\n        feeB: undefined,\n        feeDollar: undefined,\n        feeYuan: undefined,\n        reward: undefined,\n        rewardToken: undefined as any,\n        balanceA: undefined,\n        balanceB: undefined,\n        balanceYuan: undefined,\n        balanceDollar: undefined,\n    }\n}\n\nexport const makeMyAmmWithStat = <C extends { [ key: string ]: any }>\n(market: any,\n _walletMap: WalletMapExtend<C> | undefined,\n ammUserRewardMap: LoopringMap<AmmUserReward> | undefined,\n ammDetail: AmmDetailStore<C>) => {\n    const {coinMap, idIndex, tokenMap} = store.getState().tokenMap;\n    const {faitPrices, forex} = store.getState().system;\n    const [, coinA, coinB] = market.match(/(\\w+)-(\\w+)/i);\n    let _myAmm = {};\n    let balanceA, balanceB, balanceDollar, balanceYuan;\n    if (_walletMap && _walletMap[ 'LP-' + coinA + '-' + coinB ] && forex) {\n        // @ts-ignore\n        const ratio = new BigNumber(_walletMap[ 'LP-' + coinA + '-' + coinB ].count).div(ammDetail.totalLPToken);\n        balanceA = ratio.times(volumeToCountAsBigNumber(coinA, ammDetail.totalA ? ammDetail.totalA : 0) || 1);\n        balanceB = ratio.times(volumeToCountAsBigNumber(coinB, ammDetail.totalB ? ammDetail.totalB : 0) || 1);\n        // @ts-ignore\n        balanceDollar = balanceA.times(faitPrices[ coinA ]?faitPrices[ coinA ].price:0).plus(balanceB.times(faitPrices[ coinB ]?faitPrices[ coinB ].price:0))\n        balanceYuan = balanceDollar.times(forex);\n        _myAmm = {\n            // ...ammDetail,\n            balanceA: balanceA.toNumber(),\n            balanceB: balanceB.toNumber(),\n            balanceYuan: balanceYuan.toNumber(),\n            balanceDollar: balanceDollar.toNumber(),\n        }\n    }\n    if (ammUserRewardMap && ammUserRewardMap[ 'AMM-' + market ]\n        && ammDetail && forex) {\n        const ammUserReward: AmmUserReward = ammUserRewardMap[ 'AMM-' + market ];\n        let rewardToken, rewardToken2, feeA, feeB, feeDollar, feeYuan, reward, reward2, rewardDollar, rewardYuan;\n\n        if (coinMap && tokenMap && idIndex && forex && faitPrices && ammUserReward) {\n            rewardToken = ammUserReward.currentRewards[ 0 ] ? idIndex[ ammUserReward.currentRewards[ 0 ].tokenId as number ] : undefined\n            rewardToken2 = ammUserReward.currentRewards[ 1 ] ? idIndex[ ammUserReward.currentRewards[ 1 ].tokenId as number ] : undefined\n            feeA = ammUserReward ? volumeToCountAsBigNumber(coinA, ammUserReward.feeRewards[ 0 ]) : toBig(0);\n            feeB = ammUserReward ? volumeToCountAsBigNumber(coinB, ammUserReward.feeRewards[ 1 ]) : toBig(0);\n            feeA = feeA ? feeA : toBig(0);\n            feeB = feeB ? feeB : toBig(0);\n            feeDollar = feeA.times(faitPrices[ coinA ]?faitPrices[ coinA ].price:0).plus(feeB.times(faitPrices[ coinB ]?faitPrices[ coinB ].price:0))\n            feeYuan = feeDollar.times(forex);\n            reward = rewardToken ? volumeToCountAsBigNumber(rewardToken, ammUserReward.currentRewards[ 0 ].volume) as BigNumber : toBig(0);\n            reward2 = rewardToken2 ? volumeToCountAsBigNumber(rewardToken2, ammUserReward.currentRewards[ 1 ].volume) as BigNumber : toBig(0);\n            reward = reward ? reward : toBig(0);\n            reward2 = reward2 ? reward2 : toBig(0);\n            rewardDollar = reward.times(rewardToken ? faitPrices[ rewardToken ].price : 1).plus(reward2.times(rewardToken2 ? faitPrices[ rewardToken2 ].price : 1));\n            rewardYuan = rewardDollar.times(forex);\n            _myAmm = {\n                ..._myAmm,\n                feeA: feeA ? feeA.toNumber() : undefined,\n                feeB: feeB ? feeB.toNumber() : undefined,\n                reward: reward ? reward.toNumber() : undefined,\n                // @ts-ignore\n                rewardToken: rewardToken ? coinMap[ rewardToken ] : undefined,\n                reward2: reward2 ? reward2.toNumber() : undefined,\n                // @ts-ignore\n                rewardToken2: rewardToken2 ? coinMap[ rewardToken2 ] : undefined,\n                rewardDollar: rewardDollar ? rewardDollar.toNumber() : undefined,\n                rewardYuan: rewardYuan ? rewardYuan.toNumber() : undefined,\n                feeDollar: feeDollar ? feeDollar.toNumber() : undefined,\n                feeYuan: feeYuan ? feeYuan.toNumber() : undefined,\n                ammDetail: {\n                    // @ts-ignore\n                    coinAInfo: coinA ? coinMap[ coinA ] : undefined,\n                    // @ts-ignore\n                    coinBInfo: coinB ? coinMap[ coinB ] : undefined,\n                },\n            }\n\n        }\n        return _myAmm as MyAmmLP<C>\n    }\n    return {\n        feeA: undefined,\n        feeB: undefined,\n        feeDollar: undefined,\n        feeYuan: undefined,\n        reward: undefined,\n        rewardToken: undefined as any,\n        balanceA: undefined,\n        balanceB: undefined,\n        balanceYuan: undefined,\n        balanceDollar: undefined,\n    }\n}\n\n// if (ammUserReward) {\n//     const symbol = ammUserReward.currentRewards[ 0 ] ? idIndex[ ammUserReward.currentRewards[ 0 ].tokenId as number ] : undefined\n//     const symbol2 = ammUserReward.currentRewards[ 1 ] ? idIndex[ ammUserReward.currentRewards[ 1 ].tokenId as number ] : undefined\n//\n//     _myAmm = {\n//         ..._myAmm,\n//         feeA: ammUserReward ? volumeToCount(coinA, ammUserReward.feeRewards[ 0 ]) : 0,//Number(ammUserReward.feeRewards[ 0 ]) : 0,\n//         feeB: ammUserReward ? volumeToCount(coinB, ammUserReward.feeRewards[ 1 ]) : 0,//Number(ammUserReward.feeRewards[ 1 ]) : 0,\n//         reward: symbol ? volumeToCount(symbol, ammUserReward.currentRewards[ 0 ].volume) : 0,\n//         // @ts-ignore\n//         rewardToken: symbol ? coinMap[ symbol ] : undefined,\n//         reward2: symbol2 ? volumeToCount(symbol2, ammUserReward.currentRewards[ 1 ].volume) : 0,\n//         // @ts-ignore\n//         rewardToken2: symbol2 ? coinMap[ symbol2 ] : undefined,\n//\n//\n//     }\n//     _myAmm.feeDollar = _myAmm.feeA && _myAmm.feeA * faitPrices[ coinA ].price;\n//     _myAmm.feeDollar = _myAmm.feeB && _myAmm.feeB * faitPrices[ coinB ].price;\n// }\n//\n//\n// if (_walletMap && _walletMap[ 'LP-' + market ]) {\n//     // @ts-ignore\n//     const ratio = new BigNumber(_walletMap[ 'LP-' + market ].detail.total).div(snapShotData.ammPoolsBalance.lp.volume);\n//     _myAmm = {\n//         ..._myAmm,  //snapShotData.ammPoolsBalance.pooled[ 0 ].volume).div(BIG10.pow(tokenMap[coinA].decimals)\n//         balanceA: ratio.times(volumeToCountAsBigNumber(coinA, snapShotData.ammPoolsBalance.pooled[ 0 ].volume) || 1).toNumber(),\n//         balanceB: ratio.times(volumeToCountAsBigNumber(coinB, snapShotData.ammPoolsBalance.pooled[ 1 ].volume) || 1).toNumber(),\n//     }\n//     // @ts-ignore\n//     _myAmm.balanceDollar = _myAmm.balanceA * faitPrices[ coinA ].price + _myAmm.balanceB * faitPrices[ coinB ].price\n//     _myAmm.balanceYuan = _myAmm.balanceDollar * forex\n// }\n// export const getAmmPoolGameUserRanks = ():Promise<AmmUserRewardMap> => {\n//     const {accountId} = store.getState().account\n//     //https://api3.loopring.io/api/v2/amm/user/rewards?owner=10917\n//     if(LoopringAPI.ammpoolAPI){\n//         return LoopringAPI.ammpoolAPI.getAmmPoolUserRewards({owner:accountId}).then(({ammUserRewardMap}:any)=>{\n//               return ammUserRewardMap  as AmmUserRewardMap\n//         })\n//     }else{\n//         return  Promise.resolve({} as AmmUserRewardMap);\n//     }\n//\n//     // return LoopringAPI.ammpoolAPI?.getUserAmmPoolTxs({accountId}, apiKey).then(({userAmmPoolTxs}) => {\n//     //     return userAmmPoolTxs\n//     // })\n//     // if(LoopringAPI.ammpoolAPI)   {\n//     //    let promiseList =  marketKeys.map((key)=>{\n//     //         // @ts-ignore\n//     //         return LoopringAPI.ammpoolAPI.getAmmPoolGameUserRank({owner:accAddr,ammPoolMarket:'key'},apiKey)\n//     //     })\n//     //     return Promise.all(promiseList).then(\n//     //         (array:any[])=>{\n//     //\n//     //           return  array.reduce((prev,item:{userRankList:GameRankInfo[]},index)=>{\n//     //                 const market = marketKeys[index]\n//     //                 prev[ market] = item.userRankList[0]\n//     //                 return item.userRankList[0]\n//     //             },{})\n//     //\n//     //         }\n//     //     )\n//     // }else{\n//     //   return  Promise.resolve({});\n//     // }\n//\n//\n//\n//\n// }\n//\n// {\n//     userRankList: GameRankInfo[];\n//     raw_data: any;\n// }\n","import { BIG10 } from 'defs/swap_defs'\nimport { flatMap } from 'lodash'\nimport { LoopringMap, MarketInfo, toBig } from 'loopring-sdk'\n\nimport store from 'stores'\n\nimport * as fm from 'loopring-sdk'\n\nconst getTokenInfo = (symbol: string) => {\n    const tokenMap = store.getState().tokenMap.tokenMap\n\n    if (!tokenMap || !tokenMap[symbol]) {\n        return undefined\n    }\n\n    return tokenMap[symbol]\n}\n\nconst getMarketInfo = (symbol: string) => {\n    const marketMap = store.getState().tokenMap.marketMap\n\n    if (!marketMap || !marketMap[symbol]) {\n        return undefined\n    }\n\n    return marketMap[symbol]\n}\n\nexport function StringToNumberWithPrecision(rawVal: string, symbol: string) {\n    \n    if (rawVal === undefined || rawVal === null || rawVal.trim() === '')\n        return 0\n\n    const tokenInfo = getTokenInfo(symbol)\n\n    if (!tokenInfo) {\n        return undefined\n    }\n\n    return parseFloat(toBig(rawVal).toFixed(tokenInfo.precision, 0))\n}\n\n/*\n* format volume to real number\n*/\nexport function VolToNumberWithPrecision(rawVal: string, symbol: string) {\n\n    const tokenInfo = getTokenInfo(symbol)\n\n    if (!tokenInfo) {\n        return undefined\n    }\n\n    if (rawVal === undefined || rawVal === null || rawVal.trim() === '')\n        return 0\n\n    return toBig(rawVal).div('1e' + tokenInfo.decimals).toFixed(tokenInfo.precision, 0)\n}\n\n/*\n* format raw val with precision\n*/\nexport function FormatValWithPrecision(rawVal: string, symbol: string) {\n\n    const tokenInfo = getTokenInfo(symbol)\n\n    if (!tokenInfo) {\n        return undefined\n    }\n\n    if (rawVal === undefined || rawVal === null || rawVal.trim() === '')\n        return 0\n\n    return toBig(rawVal).toFixed(tokenInfo.precision, 0)\n}\n\n/*\n* format order price with precision\n*/\nexport function formatPriceWithPrecision(rawVal: string, \n    symbol: string) {\n    const marketInfo = getMarketInfo(symbol)\n    if (!rawVal || !marketInfo || !symbol) {\n        return '0'\n    }\n\n    return fm.toBig(rawVal).toFixed(marketInfo.precisionForPrice)\n\n}","import { toBig } from 'loopring-sdk'\n\nexport enum OrderHandling {\n    processed = 'processed',\n    no_such_order = 'no_such_order',\n    too_many_times = 'too_many_times',\n}\n\nexport const BIG0 = toBig(0)\n\nexport const BIG1 = toBig(1)\n\nexport const BIG10 = toBig(10)\n\nexport const BIG10K = toBig(10000)\n","import * as fm from 'loopring-sdk';\nimport store from '../../stores';\nimport { TradeTypes,CoinMap } from '@loopring-web/common-resources';\nimport { ammpoolAPI, LoopringAPI, userAPI } from '../../stores/apis/api';\nimport { AmmRecordRow, AmmTradeType,RawDataTradeItem } from '@loopring-web/component-lib';\nimport { AmmPoolTx, BillType, AmmTxType, UserAmmPoolTx,getBaseQuote, MarketTradeInfo, Side, UserTrade } from 'loopring-sdk';\nimport { volumeToCount, volumeToCountAsBigNumber } from './volumeToCount';\n\nexport const getUserTrades = (marketKey: any) => {\n    const userApi = userAPI();\n    const {accountId, apiKey} = store.getState().account\n    return userApi.getUserTrades({accountId}, apiKey).then((response: {\n        totalNum: any;\n        userTrades: UserTrade[];\n        raw_data: any;\n    }) => {\n        return response.userTrades\n    })\n}\nexport const makeMarketArray = (coinKey: any, marketTrades: MarketTradeInfo[]): RawDataTradeItem[] => {\n\n    let tradeArray: Array<Partial<RawDataTradeItem>> = []\n\n    marketTrades.forEach((item: MarketTradeInfo) => {\n        try {\n            const {base, quote} = getBaseQuote(item.market)\n            const {forex} = store.getState().system\n            const {currency} = store.getState().settings\n            const {tokenMap} = store.getState().tokenMap\n            if (tokenMap) {\n                // const baseToken = tokenMap[ base as string ]\n                // const quoteToken = tokenMap[ quote as string ]\n                const feeKey = item.side === Side.Buy ? base : quote\n                // @ts-ignore\n                tradeArray.push({\n                    side: item.side === Side.Sell ? TradeTypes.Sell : TradeTypes.Buy,\n                    amount: {\n                        from: {\n                            key: base as string,\n                            value: base ? volumeToCount(base, item.volume) : undefined\n                        },\n                        to: {\n                            key: quote as string,\n                            value: base ? volumeToCountAsBigNumber(base, item.volume)?.times(item.price).toNumber():undefined\n                        },\n\n                    },\n                    price: {\n                        key: '',\n                        value: fm.toBig(item.price).toNumber(),\n                    },\n                    fee: {\n                        key: feeKey || '--',\n                        value: feeKey ? volumeToCountAsBigNumber(feeKey, item.fee)?.toNumber() : undefined, //fm.toBig(item.fee).div(BIG10.pow(quoteToken.decimals)).toNumber(),\n                    },\n                    time: parseInt(item.tradeTime.toString()),\n                })\n            }\n        } catch (error) {\n            //CATCHERROR:\n            console.log(error)\n            // new CustomError()\n        }\n\n    })\n    // console.log('tradeArray:', tradeArray)\n    return tradeArray as RawDataTradeItem[];\n\n}\n\nexport const getUserAmmTransaction = () => {\n    const {accountId, apiKey} = store.getState().account\n    return LoopringAPI.ammpoolAPI?.getUserAmmPoolTxs({accountId}, apiKey).then(({userAmmPoolTxs}) => {\n        return userAmmPoolTxs\n    })\n    // }\n\n}\n\n\nexport const makeMyAmmMarketArray = <C extends { [ key: string ]:any }>(coinKey: string|undefined, marketTransaction: UserAmmPoolTx[]): AmmRecordRow<C>[] => {\n\n    let tradeArray: Array<Partial<AmmRecordRow<C>>> = [];\n    let {tokenMap, coinMap, idIndex} = store.getState().tokenMap;\n    marketTransaction.forEach((item: UserAmmPoolTx) => {\n        try {\n           // const {base, quote} = getBaseQuote(coinKey)\n            const {forex} = store.getState().system\n            // const {currency} = store.getState().settings\n            if (coinMap && tokenMap && idIndex\n                && !(coinKey && tokenMap['LP-'+coinKey].tokenId !== item.lpToken.tokenId) ) {\n                // @ts-ignore\n                const [, coinA, coinB] = idIndex[item.lpToken.tokenId].match(/LP-(\\w+)-(\\w+)/i);\n                 \n                tradeArray.push({\n                        type: item.txType === AmmTxType.JOIN ? AmmTradeType.add : AmmTradeType.remove,\n                        //TODO:\n                        totalDollar: 1000,\n                        totalYuan: 1000 / Number(forex),\n                        amountA: volumeToCount(coinA,item.poolTokens[ 0 ]?.actualAmount),\n                        amountB: volumeToCount(coinA,item.poolTokens[ 1 ]?.actualAmount),\n                        time: Number(item.updatedAt),\n                        // @ts-ignore\n                        coinA: coinMap[ coinA ],\n                        // @ts-ignore\n                        coinB: coinMap[ coinB ],\n                        status: item.txStatus\n                    })\n                }\n                return tradeArray\n            }\n         catch (error) {\n            //CATCHERROR:\n            console.log(error)\n            // new CustomError()\n        }\n\n    })\n    // console.log('tradeArray:', tradeArray)\n    return tradeArray as AmmRecordRow<C>[];\n\n}\n\n\nexport const makeMarketAmmArray = <C extends object>(coinKey: any, marketTransaction: AmmPoolTx[]): AmmRecordRow<C>[] => {\n\n    let tradeArray: Array<Partial<AmmRecordRow<C>>> = [];\n\n    // marketTransaction.forEach((item: AmmPoolTx) => {\n    //     try {\n    //         const {base, quote} = getBaseQuote(coinKey)\n    //         const {forex} = store.getState().system\n    //         // const {currency} = store.getState().settings\n    //         const coinMap = store.getState().tokenMap.coinMap as CoinMap<C>\n    //         if (coinMap) {\n    //\n    //             // id: number;\n    //             // from: string;\n    //             // to: string;\n    //             // token: string;\n    //             // amount: string;\n    //             // tokenF: string;\n    //             // amountF: string;\n    //             // status: TxStatus;\n    //             // txHash: string;\n    //             // billType: BillType;\n    //             // income: boolean;\n    //             // timestamp: number;\n    //             // memo: string;\n    //             // price: string;\n    //             // transferType: TransferType;\n    //             // label: string;\n    //             tradeArray.push({\n    //                 // type: item.billType === BillType.ORDER ?\n    //                 //     AmmTradeType.swap : item.billType === BillType.TRANSFER && item.income ?\n    //                 //         AmmTradeType.add : AmmTradeType.remove,\n    //                 // // //TODO:\n    //                 // totalDollar: 1000,\n    //                 // totalYuan: 1000 / Number(forex),\n    //                 // amountA: Number(item.poolTokens[ 0 ].amount),\n    //                 // amountB: Number(item.poolTokens[ 1 ].amount),\n    //                 // time: Number(item.updatedAt),\n    //                 // coinA: coinMap[ base as keyof C],\n    //                 // coinB: coinMap[ quote as keyof C ],\n    //             })\n    //         }\n    //     } catch (error) {\n    //         //CATCHERROR:\n    //         console.log(error)\n    //         // new CustomError()\n    //     }\n    //\n    // })\n    // console.log('tradeArray:', tradeArray)\n    return tradeArray as AmmRecordRow<C>[];\n\n}\n","export enum AccountStatus {\n    UNKNOWN = 'UNKNOWN',\n    UNCONNNECTED = 'UNCONNNECTED',\n    CONNECTED = 'CONNECTED',\n    NOACCOUNT = 'NOACCOUNT',\n    DEPOSITING = 'DEPOSITING',\n    DEPOSIT_TO_CONFIREM = 'DEPOSIT_TO_CONFIREM',\n    UNACTIVATED = 'UNACTIVATED',\n    ARPROVING = 'ARPROVING',\n    APPROV_TO_CONFIRM = 'APPROV_TO_CONFIRM',\n    LOCKED = 'LOCKED',\n    ACTIVATED = 'ACTIVATED',\n}\n\nexport enum StatusChangeEvent {\n    Reset = 'Reset',\n    Connecting = 'Connecting',\n    HasPubkey = 'HasPubkey',\n    HasNoPubkey = 'HasNoPubkey',\n    ErrorResponse = 'ErrorResponse',\n    Reconnect = 'Reconnect',\n    FinishDeposit = 'FinishDeposit',\n    DepositConfirmed = 'DepositConfirmed',\n    IsSmartWallet = 'IsSmartWallet',\n    ApproveSubmit = 'ApproveSubmit',\n    ApproveConfirmed = 'ApproveConfirmed',\n    Unlock = 'Unlock',\n    Lock = 'Lock',\n}\n\nexport const AccountMachineSpec = (initialState: AccountStatus = AccountStatus.UNCONNNECTED) => \n{\n    return {\n        initialState: initialState,\n        states: {\n            UNCONNNECTED: {\n                Connecting: AccountStatus.CONNECTED,\n                Reset: AccountStatus.UNCONNNECTED,\n            },\n            CONNECTED: {\n                HasPubkey: AccountStatus.LOCKED,\n                HasNoPubkey: AccountStatus.UNACTIVATED,\n                ErrorResponse: AccountStatus.NOACCOUNT,\n                Reset: AccountStatus.UNCONNNECTED,\n            },\n            NOACCOUNT: {\n                ErrorResponse: AccountStatus.NOACCOUNT,\n                Reconnect: AccountStatus.CONNECTED,\n                Reset: AccountStatus.UNCONNNECTED,\n            },\n            DEPOSITING: {\n                FinishDeposit: AccountStatus.DEPOSIT_TO_CONFIREM,\n                Reset: AccountStatus.UNCONNNECTED,\n            },\n            DEPOSIT_TO_CONFIREM: {\n                HasPubkey: AccountStatus.ACTIVATED,\n                HasNoPubkey: AccountStatus.DEPOSIT_TO_CONFIREM,\n                ErrorResponse: AccountStatus.DEPOSIT_TO_CONFIREM,\n                Reset: AccountStatus.UNCONNNECTED,\n            },\n            UNACTIVATED: {\n                IsSmartWallet: AccountStatus.ARPROVING,\n                Reset: AccountStatus.UNCONNNECTED,\n            },\n            ARPROVING: {\n                ApproveSubmit: AccountStatus.APPROV_TO_CONFIRM,\n                Reset: AccountStatus.UNCONNNECTED,\n            },\n            APPROV_TO_CONFIRM: {\n                ApproveConfirmed: AccountStatus.ACTIVATED,\n                Reset: AccountStatus.UNCONNNECTED,\n            },\n            LOCKED: {\n                Unlock: AccountStatus.ACTIVATED,\n                Reset: AccountStatus.UNCONNNECTED,\n            },\n            ACTIVATED: {\n                Lock: AccountStatus.LOCKED,\n                Reset: AccountStatus.UNCONNNECTED,\n            },\n        },\n    }\n}\n","import { createAction } from '@reduxjs/toolkit'\n\n// fired once when the app reloads but before the app renders\n// allows any updates to be applied to store data loaded from localStorage\nexport const updateVersion = createAction<void>('global/updateVersion')\n","import { all, takeLatest, call, put } from \"redux-saga/effects\"\nimport { getAmmActivityMap, getAmmActivityMapStatus } from './reducer'\nimport { LoopringAPI } from '../../apis/api';\nconst getAmmActivityMapApi = async () => {\n\n    if(LoopringAPI.ammpoolAPI){\n        const { groupByRuleTypeAndStatus } =  await LoopringAPI.ammpoolAPI.getAmmPoolActivityRules();\n        return  {data:groupByRuleTypeAndStatus}\n    }else{\n        return {data:undefined}\n    }\n\n}\n\nexport function* getPostsSaga() {\n    try {\n        //\n        const { data } = yield call(getAmmActivityMapApi);\n        yield put(getAmmActivityMapStatus({ammActivityMap:data}));\n    } catch (err) {\n        yield put(getAmmActivityMapStatus(err));\n    }\n}\n\nexport default function* ammActivityMapSaga() {\n    yield all([takeLatest(getAmmActivityMap, getPostsSaga)]);\n}\n","import { all, call, fork, put, takeLatest } from \"redux-saga/effects\";\nimport { getAmmMap, getAmmMapStatus, updateRealTimeAmmMap } from './reducer';\nimport { AmmDetail } from '@loopring-web/common-resources';\nimport store from '../../index';\nimport { AmmPoolInfoV3, AmmPoolStat, toBig, TokenVolumeV3, } from \"loopring-sdk\";\nimport { ammpoolAPI } from \"stores/apis/api\";\nimport { PayloadAction } from '@reduxjs/toolkit';\nimport { AmmDetailStore, GetAmmMapParams } from './interface';\nimport { volumeToCount, volumeToCountAsBigNumber } from '../../../hooks/help';\n\ntype AmmMap<R extends { [ key: string ]: any }> = { [ key: string ]: AmmDetail<R> } | {}  //key is AMM-XXX-XXX\nexport const setAmmState = ({ammPoolState, keyPair}: { ammPoolState: AmmPoolStat, keyPair: string }) => {\n    const {idIndex} = store.getState().tokenMap\n    // @ts-ignore\n    const [, coinA, coinB] = keyPair.match(/(\\w+)-(\\w+)/i);\n    const {forex,faitPrices} = store.getState().system;\n    if (idIndex && coinA && coinB && faitPrices && forex) {\n        let result =  {\n            amountDollar: parseFloat(ammPoolState.liquidityUSD),\n            amountYuan: (parseFloat(ammPoolState.liquidityUSD) / (forex ? forex : 6.5)),\n            totalLPToken: volumeToCount('LP-' + keyPair, ammPoolState.lpLiquidity),\n            totalA: volumeToCount(coinA, ammPoolState.liquidity[ 0 ]),//parseInt(ammPoolState.liquidity[ 0 ]),\n            totalB: volumeToCount(coinB, ammPoolState.liquidity[ 1 ]),//parseInt(ammPoolState.liquidity[ 1 ]),\n            rewardValue: ammPoolState.rewards[ 0 ] ? volumeToCount(idIndex[ ammPoolState.rewards[ 0 ].tokenId as number ], ammPoolState.rewards[ 0 ].volume) : undefined,\n            rewardToken: ammPoolState.rewards[ 0 ] ? idIndex[ ammPoolState.rewards[ 0 ].tokenId as number ] : undefined,\n            rewardValue2: ammPoolState.rewards[ 1 ] ? volumeToCount(idIndex[ ammPoolState.rewards[ 1 ].tokenId as number ], ammPoolState.rewards[ 1 ].volume) : undefined,\n            rewardToken2: ammPoolState.rewards[ 1 ] ? idIndex[ ammPoolState.rewards[ 1 ].tokenId as number ] : undefined,\n        }\n\n        const feeA =  volumeToCountAsBigNumber(coinA, ammPoolState.fees[ 0 ]);//parseInt(ammPoolState.fees[ 0 ]),\n        const feeB = volumeToCountAsBigNumber(coinB, ammPoolState.fees[ 1 ]);//parseInt(ammPoolState.fees[ 1 ]),\n        const feeDollar =  faitPrices[coinA] && faitPrices[coinB]  ?\n            toBig(feeA||0).times(faitPrices[coinA].price).plus(toBig(feeB||0).times(faitPrices[coinB].price)):undefined\n        const feeYuan = feeDollar ? feeDollar.times(forex) : undefined;\n\n        return {\n             ...result,\n            feeA:feeA?.toNumber(),\n            feeB:feeB?.toNumber(),\n            feeDollar:feeDollar? feeDollar.toNumber(): undefined,\n            feeYuan:feeYuan? feeYuan.toNumber(): undefined,\n            tradeFloat: {\n                change: undefined,\n                timeUnit: '24h',\n                // priceYuan: 100,\n                // priceDollar: 1.23123,\n                // floatTag: FloatTag.increase,\n                // reward: 12312,\n                // APY: (parseInt(ammPoolState.apyBips) * 1.0 / 100)\n            },\n            APY: (parseInt(ammPoolState.apyBips) * 1.0 / 100)\n        }\n\n\n    }\n}\nconst getAmmMapApi = async <R extends { [ key: string ]: any }>({ammpools}: GetAmmMapParams) => {\n\n    let ammMap: AmmMap<R> = {}\n    const {ammPoolStats} = (await ammpoolAPI().getAmmPoolStats());\n\n    let {__timer__} = store.getState().amm.ammMap\n    __timer__ = (() => {\n        if (__timer__ && __timer__ !== -1) {\n            clearInterval(__timer__)\n        }\n        return setInterval(async () => {\n            let ammPoolStats: { [key in keyof R]: AmmPoolStat } = (await ammpoolAPI().getAmmPoolStats()).ammPoolStats as { [key in keyof R]: AmmPoolStat }\n            store.dispatch(updateRealTimeAmmMap({ammPoolStats}))\n        }, 900000)    //15*60*1000 //900000\n    })()\n    const {tokenMap: {coinMap, idIndex}} = store.getState();\n\n    // const forex = faitPrices.prices['USDC']\n\n\n    Reflect.ownKeys(ammpools).forEach(async (key) => {\n        const item: AmmPoolInfoV3 = ammpools[ key as string ]\n        if (item.market === key && item.tokens.pooled && idIndex) {\n\n            // const tokenA =  ; //getTokenInfoById(tokens.tokenIdMap, parseInt(item.tokens.pooled[0]))\n            // const tokenB =  ; // getTokenInfoById(tokens.tokenIdMap, parseInt(item.tokens.pooled[1]))\n            const coinA = idIndex[ item.tokens.pooled[ 0 ] as any ];\n            const coinB = idIndex[ item.tokens.pooled[ 1 ] as any ];\n            const dataItem: AmmDetailStore<R> = {\n                coinA: coinA,\n                coinB: coinB,\n                isNew: Date.now() - (Number(item.createdAt)) > 3 * 86400 * 1000 ? false : true,//3*24*60*60*1000,\n                isActivity: item.status === 7 ? true : false,\n                address: item.address,\n                ...setAmmState({ammPoolState: ammPoolStats[ key ], keyPair: `${coinA}-${coinB}`}),\n                __rawConfig__: item\n            } as AmmDetailStore<R>\n            // @ts-ignore\n            ammMap[ item.market ] = dataItem\n\n\n        }\n\n\n    })\n    return {ammMap, __timer__}\n}\n\n\nexport function* getPostsSaga({payload}: PayloadAction<GetAmmMapParams>) {\n    try {\n        const {ammpools} = payload;\n        const {ammMap, __timer__} = yield call(getAmmMapApi, {ammpools});\n        yield put(getAmmMapStatus({ammMap, __timer__}));\n    } catch (err) {\n        yield put(getAmmMapStatus(err));\n    }\n}\n\nexport function* updateRealTimeSaga({payload}: any) {\n    try {\n        const {ammPoolStats} = payload;\n        let {ammMap}: { ammMap: AmmMap<object> } = store.getState().amm.ammMap;\n        if (ammPoolStats) {\n            //{ ammPoolStats?: { [ key: string ]: AmmPoolStat } }\n            Reflect.ownKeys(ammPoolStats).map((key) => {\n                const keyPair = (key as string).replace('AMM-', '')\n                \n                // @ts-ignore\n                ammMap[ key ] = {\n                    // @ts-ignore\n                    ...ammMap[ key ],\n                    ...setAmmState({ammPoolState: ammPoolStats[ key as string ], keyPair, })\n                }\n                return ammMap\n            })\n        }\n        yield put(getAmmMapStatus({ammMap}));\n    } catch (err) {\n        yield put(getAmmMapStatus(err));\n    }\n}\n\n\nexport function* ammMapInitSaga() {\n    yield all([takeLatest(getAmmMap, getPostsSaga)]);\n}\n\nexport function* ammMapRealTimeSaga() {\n    yield all([takeLatest(updateRealTimeAmmMap, updateRealTimeSaga)]);\n}\n\nexport const ammMapSaga = [\n    fork(ammMapInitSaga),\n    fork(ammMapRealTimeSaga),\n]\n\n","import { combineReducers } from '@reduxjs/toolkit';\n// import { ammRecordSlice } from './AmmConfig';\n// import { ammTradesSlice } from './AmmTrades';\nimport { ammMapSlice } from './AmmMap';\nimport { ammActivityMapSlice } from './AmmActivityMap';\nimport ammActivityMapSaga from './AmmActivityMap/saga';\nimport { ammMapSaga } from './AmmMap/saga';\n// import ammTradesSaga from './AmmTrades/saga';\nimport {  fork } from 'redux-saga/effects';\n\nexport const  ammReducer = combineReducers({\n    // ammRecord: ammRecordSlice.reducer,\n    // ammTrades: ammTradesSlice.reducer,\n    ammMap: ammMapSlice.reducer,\n    ammActivityMap:ammActivityMapSlice.reducer\n})\nexport const ammForks =  [\n    fork(ammActivityMapSaga),\n    ...ammMapSaga,\n    // fork(ammRecordSaga),\n    // fork(ammTradesSaga)\n]\n\n// export * from './interface'\n","import { utils } from 'ethers'\n\nimport { TokenInfo, } from 'loopring-sdk'\n\nimport { CoinInfo, } from '@loopring-web/common-resources'\n\nexport function getIcon(symbol: string, tokens: any) {\n    const token: any = tokens[symbol]\n    return getIconByTokenInfo(token)\n}\n\nexport function getIconByTokenInfo(token: TokenInfo) {\n    if (token) {\n        const addr = utils.getAddress(token.address)\n        const path = `https://exchange.loopring.io/assets/images/ethereum/assets/${addr}/logo.png`\n        return path\n    }\n    return ''\n}\n\nexport function makeCoinInfo(token: TokenInfo) {\n    if (token) {\n        const info: CoinInfo<any> = {\n            icon: getIconByTokenInfo(token),\n            name: token.symbol,\n            simpleName: token.symbol,\n            description: token.name,\n            company: token.name,\n        }\n        return info\n    }\n    return undefined\n}","import { all, call, fork, put, takeLatest } from \"redux-saga/effects\";\nimport { getTokenMap, getTokenMapStatus } from './reducer';\nimport { getIcon } from '../../utils/swap_utils';\nimport { CoinInfo, CoinMap } from '@loopring-web/common-resources';\nimport { AddressMap, GetTokenMapParams, IdMap } from './interface';\nimport { PayloadAction } from '@reduxjs/toolkit';\n\nconst getTokenMapApi = async <R extends { [ key: string ]: any }>({\n                                                                      tokensMap,\n                                                                      pairs,\n                                                                      marketArr,\n                                                                      tokenArr\n                                                                  }: GetTokenMapParams<R>) => {\n    let coinMap: CoinMap<any, CoinInfo<any>> = {};\n    let totalCoinMap: CoinMap<any, CoinInfo<any>> = {};\n    let tokenMap:any = tokensMap;\n    let addressIndex: AddressMap = {};\n    let idIndex: IdMap = {};\n    Reflect.ownKeys(tokensMap).forEach((key) => {\n        const coinInfo = {\n            icon: getIcon(key as string, tokensMap),\n            name: key as string,\n            simpleName: key as string,\n            description: '',\n            company: '',\n        }\n        if (!(key as string).startsWith('LP-')) {\n            coinMap[ key as string ] = coinInfo\n        }\n        totalCoinMap[ key as string ] = coinInfo\n\n        if (pairs[ key as string ] && pairs[ key as string ].tokenList) {\n            // @ts-ignore\n            tokensMap[ key ].tradePairs = pairs[ key as string ].tokenList;\n        }\n        addressIndex = {\n            ...addressIndex,\n            // @ts-ignore\n            [ tokensMap[ key ].address ]: key as string\n        }\n        idIndex = {\n            ...idIndex,\n            // @ts-ignore\n            [ tokensMap[ key ].tokenId ]: key as string\n        }\n    })\n    return {data: {coinMap, totalCoinMap, addressIndex, idIndex, tokenMap, marketArray: marketArr, marketCoins: tokenArr}}\n};\n\nexport function* getPostsSaga<R extends { [ key: string ]: any }>({payload}: PayloadAction<GetTokenMapParams<R>>) {\n    try {\n        const {tokensMap, marketMap, pairs, marketArr,tokenArr} = payload\n        // @ts-ignore\n        const {data} = yield call(getTokenMapApi, {tokensMap, pairs, marketArr, tokenArr});\n\n        yield put(getTokenMapStatus({...data, marketMap}));\n    } catch (err) {\n        yield put(getTokenMapStatus(err));\n    }\n}\n\nexport function* tokenInitSaga() {\n    yield all([takeLatest(getTokenMap, getPostsSaga)]);\n}\n\n\nexport const tokenSaga = [\n    fork(tokenInitSaga),\n    // fork(tokenPairsSaga),\n]\n\n// export function* getPairsSaga({payload}:PayloadAction<{tokenPairs: TokenPairs }>) {\n//     try {\n//         const {tokenPairs} = payload;\n//         const tokenPairsMap =  Reflect.ownKeys(tokenPairs).reduce((prev,key)=>{\n//            // @ts-ignore\n//             return prev[key as string] =  tokenPairs[key as string].tokenList\n//         }, {} )\n//\n//         yield put(getTokenMapStatus({tokenPairsMap}));\n//     } catch (err) {\n//         yield put(getAmmMapStatus(err));\n//     }\n// }\n// export function* tokenPairsSaga() {\n//     yield all([takeLatest(getTokenPairMap, getPairsSaga)]);\n// }\n\n\n","import { all, call, fork, put, takeLatest } from \"redux-saga/effects\"\nimport { getTicker, getTickers, getTickerStatus } from './reducer'\nimport { CoinKey, CustomError, ErrorMap, PairKey, TradeFloat } from '@loopring-web/common-resources'\n\n\nimport { exchangeAPI } from \"stores/apis/api\"\nimport { makeTickerMap } from '../../hooks/help';\n\n\ntype TickerMap<R extends { [ key: string ]: any }> = {\n    [key in CoinKey<R> | PairKey<R>]?: TradeFloat & {\n    reward?: number, rewardToken?: string\n}\n\n}\n\n\nconst getTickersApi = async <R extends { [ key: string ]: any }>(list: Array<keyof R>) => {\n\n    const tickers = await exchangeAPI().getMixTicker({market: list.join(',')})\n    const data = makeTickerMap({tickerMap: tickers.tickMap})\n    return {data}\n}\n\nexport function* getPostsSaga({payload}: any) {\n    try {\n        // @ts-ignore\n        const {tickerKey, tickerKeys} = payload;\n        if (tickerKey || (tickerKeys && tickerKeys.length)) {\n            const {data} = yield call(getTickersApi, tickerKey ? [tickerKey] : tickerKeys);\n            yield put(getTickerStatus({tickerMap: data}));\n\n        } else {\n            throw new CustomError(ErrorMap.NO_TOKEN_KEY_LIST);\n        }\n    } catch (err) {\n        yield put(getTickerStatus(err));\n    }\n}\n\nfunction* tickerSaga() {\n    yield all([takeLatest(getTicker, getPostsSaga)]);\n}\n\nfunction* tickersSaga() {\n    yield all([takeLatest(getTickers, getPostsSaga)]);\n}\n\nexport const tickerForks = [\n    fork(tickerSaga),\n    fork(tickersSaga),\n]\n ","import {\n    ChainId,\n    getAccountArg,\n    getAmmpoolArg,\n    getCandlestickArg,\n    getOrderArg,\n    getOrderBookArg,\n    getTickerArg,\n    getTradeArg,\n    toBig,\n} from 'loopring-sdk';\nimport { tickerService } from './tickerService';\nimport { ammPoolService } from './ammPoolService';\nimport { CustomError, ErrorMap } from '@loopring-web/common-resources';\nimport { LoopringAPI } from '../stores/apis/api';\n// import store from '../stores';\n// import { updateSocketURL } from '../stores/system';\n\n\nexport type SocketEvent = (e: any, ...props: any[]) => any\n\nexport enum SocketEventType {\n    pingpong = 'pingpong',\n    account = \"account\",\n    order = \"order\",\n    orderbook = \"orderbook\",\n    trade = \"trade\",\n    ticker = \"ticker\",\n    candlestick = \"candlestick\",\n    ammpool = \"ammpool\"\n}\n\nexport type SocketCallbackMap = {\n    // [SocketEventType.pingpong]:  { fn: SocketEvent, deps?: any[] },\n    [key in SocketEventType]?: { fn: SocketEvent, deps: any[] }\n}\n//\nexport type SocketEventMap = {\n    [key in SocketEventType]: SocketEvent\n}\n\nexport class LoopringSocket {\n    private static SocketEventMap: SocketEventMap = {\n        [ SocketEventType.account ]: (_e: any) => {\n\n        },\n        [ SocketEventType.order ]: (_e: any) => {\n\n        },\n        [ SocketEventType.orderbook ]: (_e: any) => {\n\n        },\n        [ SocketEventType.trade ]: (_e: any) => {\n\n        },\n        [ SocketEventType.ticker ]: (data: string[]) => {\n            const [symbol, timestamp, size, volume, open, high, low, close, count, bid, ask] = data;\n            // @ts-ignore\n            const [, base, quote] = symbol.match(/(\\w+)-(\\w+)/i);\n            const base_token_volume = size;\n            const quote_token_volume = volume;\n            const change = open === undefined || Number(open) === 0 ? undefined : (toBig(close).minus(open)).div(open)\n            tickerService.sendTicker({\n                [ symbol ]: {\n                    symbol, base, quote,\n                    base_token_volume,\n                    quote_token_volume,\n                    timestamp: Number(timestamp),\n                    change,\n                    base_fee_amt: undefined,\n                    quote_fee_amt: undefined,\n                    open, high, low, close, count, bid, ask\n                } as any\n            })\n        },\n        [ SocketEventType.candlestick ]: (_e: any) => {\n\n        },\n        [ SocketEventType.candlestick ]: (data: string) => {\n\n        },\n        [ SocketEventType.ammpool ]: (data: string[]) => {\n            // const [market,timestamp,size,volume,open,high,low,close,count,bid,ask] = data;\n            // @ts-ignore\n            const [poolName, poolAddress, pooled, [tokenId, volume], risky] = data;\n            // @ts-ignore\n            ammPoolService.sendAmmPool({poolName, poolAddress, pooled, lp: {tokenId, volume}, risky})\n        },\n        // @ts-ignore\n        [ SocketEventType.pingpong ]: (data: string, instance:InstanceType<LoopringSocket>) => {\n\n            if (data === 'ping') {\n                instance.loopringSocket.send('pong')\n            }\n        },\n    }\n    get loopringSocket(): WebSocket | undefined {\n        return this._loopringSocket;\n    }\n    get socketCallbackMap(): SocketCallbackMap | undefined {\n        return this._socketCallbackMap;\n    }\n    //TODO fill the socket receiver format callback\n\n    private _socketCallbackMap: SocketCallbackMap|undefined;\n    private _loopringSocket:WebSocket|undefined;\n    private __wsTimer__:{timer:NodeJS.Timer|-1,count:number} = {\n        timer:-1,\n        count:0\n    };\n    private _baseUrl:string;\n    constructor(url:string) {\n        // const url = ChainId.MAINNET === chainId ? process.env.REACT_APP_API_URL : process.env.REACT_APP_API_URL_UAT;\n        this._baseUrl = url; // baseSocket: string = `wss://ws.${url}/v3/ws?wsApiKey=${wsKey}`;\n    }\n\n    // private static PingPong = {\n    //     fn:\n    // }\n\n    public socketSendMessage = async ({socket, apiKey}: {\n        chainId: ChainId | 'unknown',\n        socket: { [ key: string ]: string[] }\n        apiKey?: string\n    }): Promise<boolean> => {\n        try {\n            if (socket && Reflect.ownKeys(socket).length) {\n                //register ping pong event\n                this.clearInitTimer(true);\n                this.resetSocketEvents();\n                const {topics} = this.makeMessageArray({socket});\n                if (!this.isConnectSocket() ) {\n                    await this.socketConnect({ topics, apiKey})\n                } else {\n\n                    this._loopringSocket?.send(this.makeTopics(topics))\n\n                }\n                return true\n            } else {\n                if (!this.isConnectSocket()) {\n                    this.socketClose();\n                }\n                return false\n            }\n        } catch (error) {\n            throw  new CustomError(ErrorMap.SOCKET_ERROR)\n        }\n\n    }\n    public socketClose = async () => {\n        let ws: WebSocket | undefined = this._loopringSocket;\n\n        return new Promise((reolve) => {\n            if (ws) {\n                ws.onclose = function (e) {\n                    reolve(`Socket is closed, ${e.reason}`)\n                };\n                ws.close();\n            } else {\n                Promise.resolve('no websocket')\n            }\n        })\n    }\n\n    public removeSocketEvents = (key: string) => {\n        // @ts-ignore\n        if (this._socketCallbackMap && this._socketCallbackMap[ key ]) {\n            // @ts-ignore\n            delete this._socketCallbackMap[ key ]\n        }\n    }\n\n    private makeMessageArray = ({socket}: { socket: { [ key: string ]: string[] } }): {\n        topics: any[]\n    } => {\n        let topics: any[] = [], list: any[] = []; // let registerDispatch = [];\n        Reflect.ownKeys(socket).forEach((eventType) => {\n            switch (eventType) {\n                case  SocketEventType.ticker:\n                    list = socket[ SocketEventType.ticker ].map(key => getTickerArg(key))\n                    if (list && list.length) {\n                        this.addSocketEvents(SocketEventType.ticker)\n                        topics = [...topics, ...list];\n                    }\n                    break\n                case  SocketEventType.account:\n                    if (socket[ SocketEventType.account ]) {\n                        list = [getAccountArg()]\n                    }\n                    if (list && list.length) {\n                        this.addSocketEvents(SocketEventType.account)\n                        topics = [...topics, ...list];\n                    }\n                    break;\n                case  SocketEventType.order:\n                    //FIX:  make order Topic\n                    list = socket[ SocketEventType.order ].map(key => getOrderArg(key))\n                    if (list && list.length) {\n                        this.addSocketEvents(SocketEventType.order)\n                        topics = [...topics, ...list];\n                    }\n                    break\n                case  SocketEventType.orderbook:\n                    //FIX:  make orderbook Topic\n                    list = socket[ SocketEventType.orderbook ].map(key => getOrderBookArg(key, 0))\n                    if (list && list.length) {\n                        this.addSocketEvents(SocketEventType.orderbook)\n                        topics = [...topics, ...list];\n                    }\n                    break\n                case  SocketEventType.trade:\n                    list = socket[ SocketEventType.trade ].map(key => getTradeArg(key))\n                    if (list && list.length) {\n                        this.addSocketEvents(SocketEventType.trade)\n                        topics = [...topics, ...list];\n                    }\n                    break\n                case  SocketEventType.candlestick:\n                    list = socket[ SocketEventType.candlestick ].map(key => getCandlestickArg(key))\n                    if (list && list.length) {\n                        this.addSocketEvents(SocketEventType.candlestick)\n                        topics = [...topics, ...list];\n                    }\n                    break\n                case  SocketEventType.ammpool:\n                    list = socket[ SocketEventType.ammpool ].map(key => getAmmpoolArg(key))\n                    if (list && list.length) {\n                        this.addSocketEvents(SocketEventType.ammpool)\n                        topics = [...topics, ...list];\n                    }\n                    break\n            }\n        })\n        return {topics}\n    }\n\n    private isConnectSocket = () => {\n        return !!(this._loopringSocket && this._loopringSocket.send);\n    }\n\n    private makeTopics = (topics: any, apiKey?: string) => {\n        let data: any = {\n            op: 'sub',\n            unsubscribeAll: 'true',\n            topics: topics,\n        }\n\n        if (apiKey) {\n            data.apiKey = apiKey\n        }\n        // console.log('Socket>>Socket',JSON.stringify(data));\n        return JSON.stringify(data)\n        // sendMessage(flat_txt)\n    }\n\n    private addSocketEvents = (type: keyof typeof SocketEventType,deps?:any[]) => {\n\n        this._socketCallbackMap = {\n            ...this._socketCallbackMap,\n            [ type ]: {\n                fn: LoopringSocket.SocketEventMap[type],\n                deps:deps?deps:[]\n            }\n        }\n    }\n\n    private socketConnect = async ({ topics, apiKey}: {\n       // chainId: ChainId | 'unknown',\n        topics: any[],\n        apiKey?: string\n    }) => {\n        try {\n            const self = this;\n            if (LoopringAPI.wsAPI && topics) {\n                const {wsKey} = await LoopringAPI.wsAPI.getWsKey();\n                this._loopringSocket = new WebSocket(`${this._baseUrl}?wsApiKey=${wsKey}`);\n\n                this._loopringSocket.onopen = function () {\n                    console.warn('Socket>>Socket', \"WebSocket is open now.\");\n                    if(self._loopringSocket && self._loopringSocket.readyState === WebSocket.OPEN){\n                        self._loopringSocket.send(self.makeTopics(topics))\n                    }\n\n                };\n                this._loopringSocket.onmessage = function (e) {\n                    const {data} = e;\n                    // data.topic.topic;\n                    if (data === 'ping' && self._socketCallbackMap) {\n                        // console.log('Socket>>Socket ping:', e);\n                        self._socketCallbackMap?.pingpong?.fn.call( self, data, ...self._socketCallbackMap.pingpong.deps);\n                    } else {\n                        const result = JSON.parse(data);\n                        const {topics, topic} = result;\n                        if (topics) {\n                            // console.log('Socket>>Socket topics first return', topics);\n                        }\n                        if (topic && topic.topic && self._socketCallbackMap) {\n                            const {topic: {topic}, data} = result\n                             self._socketCallbackMap[ topic.topic ]?.fn.call( self, data, ...self._socketCallbackMap[ topic.topic ].deps);\n\n                        }\n\n                    }\n                    return false;\n                };\n                this._loopringSocket.onclose = async function (e) {\n                    // console.error('Socket>>Socket', e);\n                    if (self._loopringSocket) {\n                        self._loopringSocket = undefined;\n                    }\n                    console.log('Socket>>Socket', 'Socket is closed. Reconnect will be attempted in 1 second.', e.reason);\n                    self.clearInitTimer()\n                    if (self.__wsTimer__.count < 5) {\n                        self.__wsTimer__.timer = setTimeout(function () {\n                            self.socketConnect.call(self, { topics, apiKey});\n                        }, 1000 * self.__wsTimer__.count);\n                    }\n                };\n                this._loopringSocket.onerror = function (err: Event) {\n                    console.error('Socket>>Socket', 'Socket encountered error:', 'Closing socket', err);\n                };\n\n            }\n        } catch (error) {\n            console.error('Socket>>Socket', 'connect error, not from reconnect')\n            // @ts-ignore\n            if (this._loopringSocket) {\n                // @ts-ignore\n                this._loopringSocket.close()\n            }\n        }\n    }\n    private clearInitTimer = (init?: boolean) => {\n\n        if (this.__wsTimer__) {\n            if (this.__wsTimer__.timer !== -1) {\n                clearTimeout(this.__wsTimer__.timer)\n            }\n            this.__wsTimer__.timer = -1\n            this.__wsTimer__.count++;\n        }\n        if (init) {\n            this.__wsTimer__ = {\n                //...self.__wsTimer__,\n                timer: -1,\n                count: 0\n            }\n        }\n    }\n    private resetSocketEvents = () => {\n        this._socketCallbackMap = undefined;\n        this.addSocketEvents(SocketEventType.pingpong,[this])\n    }\n}\n// const socketInstance = new LoopringSocket();\n// // @ts-ignore\n// window.loopringSocket = socketInstance;\n//\n// export default socketInstance;\n\n\n\n","import { Subject } from 'rxjs';\nimport { TradeFloat } from '@loopring-web/common-resources';\n\nconst subject = new Subject();\n\nexport type AmmPoolMap<R> = {\n    [key in keyof R]:TradeFloat\n}\n// <R extends {[key:string]:any}>\n\nexport const ammPoolService = {\n    sendAmmPool: (ammPoolMap:AmmPoolMap<{[key:string]:any}>) => subject.next({ ammPoolMap: ammPoolMap }),\n    // clearMessages: () => subject.next(),\n    onSocket: () => subject.asObservable()\n};","import { all, call, fork, put, take, takeLatest } from \"redux-saga/effects\"\nimport { getSystemStatus, updateRealTimeObj, updateSystem } from './reducer'\nimport { ENV, NETWORKEXTEND } from \"./interface\"\nimport store from '../index';\nimport { reset } from '../account/reducer';\nimport { ChainId } from 'loopring-sdk';\nimport { exchangeAPI, LoopringAPI } from '../apis/api';\nimport { getAmmMap, updateRealTimeAmmMap } from '../Amm/AmmMap';\nimport { getTokenMap } from '../token';\nimport { CustomError, ErrorMap } from '@loopring-web/common-resources';\nimport { getAmmActivityMap } from '../Amm/AmmActivityMap';\nimport { updateWalletLayer1 } from '../walletLayer1';\nimport { delay } from 'rxjs/operators';\nimport { LoopringSocket } from '../../services/socketUtil';\nimport { myLog } from \"utils/log_tools\";\n\n\nconst initConfig = function* <R extends { [ key: string ]: any }>(chainId: ChainId | 'unknown') {\n    myLog('initConfig initConfig initConfig')\n    store.dispatch(reset(undefined));\n    const {tokenSymbolMap: tokensMap} = yield call(async ()=> await LoopringAPI.exchangeAPI?.getTokens())\n    const {ammpools} = yield call(async ()=>await LoopringAPI.ammpoolAPI?.getAmmPoolConf());\n    const {pairs, marketArr, tokenArr, markets}  = yield call(async ()=> LoopringAPI.exchangeAPI?.getMixMarkets());\n    store.dispatch(getTokenMap({tokensMap, marketMap: markets, pairs,marketArr,tokenArr}))\n    yield take('tokenMap/getTokenMapStatus');\n    // let basePath: string = `wss://ws.${baseURL}/v3/ws?wsApiKey=${wsKey}`\n    store.dispatch(getAmmMap({ammpools}))\n    store.dispatch(getAmmActivityMap({ammpools}))\n    if(store.getState().tokenMap.status === 'ERROR'){\n\n    }\n    yield delay(10);\n    //IF already connect has address, getInfo walletLayer 1\n    const {account,walletLayer1} = store.getState() //.account.accAddr && !store.getState().walletLayer1.walletLayer1\n    if(account.accAddr && walletLayer1.walletLayer1 === undefined){\n        store.dispatch(updateWalletLayer1(undefined));\n    }\n\n}\n\nconst getSystemsApi = async <R extends { [ key: string ]: any }>(chainId: any) => {\n    //TODO get some other reuqired id...... put into system\n    // const { chainId } = system\n    const env = window.location.hostname === 'localhost' ? ENV.DEV : ChainId.GORLI === chainId ? ENV.UAT : ENV.PROD\n    chainId = ChainId.GORLI === chainId ? ChainId.GORLI : ChainId.MAINNET === chainId ? ChainId.MAINNET : NETWORKEXTEND.NONETWORK\n\n    if (chainId === NETWORKEXTEND.NONETWORK) {\n        throw new CustomError(ErrorMap.NO_NETWORK_ERROR)\n    } else {\n        LoopringAPI.InitApi(chainId as ChainId);\n        if (LoopringAPI.exchangeAPI) {\n            const { exchangeInfo } = (await LoopringAPI.exchangeAPI.getExchangeInfo())\n            const faitPrices = (await LoopringAPI.exchangeAPI.getFiatPrice({legal: 'USD'})).fiatPrices\n            const faitPricesY = (await LoopringAPI.exchangeAPI.getFiatPrice({legal: 'CNY'})).fiatPrices\n            const gasPrice = (await exchangeAPI().getGasPrice()).gasPrice / 1e+9;\n            // : process.env.REACT_APP_API_URL_UAT;\n            const baseURL = ChainId.MAINNET === chainId ? `https://${process.env.REACT_APP_API_URL}` : `https:/${process.env.REACT_APP_API_URL_UAT}`\n            \n            const socketURL = ChainId.MAINNET === chainId ? `wss://ws.${process.env.REACT_APP_API_URL}/v3/ws` :`wss://ws.${process.env.REACT_APP_API_URL_UAT}/v3/ws`  ;\n            window.loopringSocket = new LoopringSocket(socketURL);\n\n            const forex = faitPricesY[ 'USDT' ].price;\n            let {__timer__} = store.getState().system;\n            __timer__ = ((__timer__) => {\n                if (__timer__ && __timer__ !== -1) {\n                    clearInterval(__timer__);\n                }\n                return setInterval(async () => {\n                    const faitPrices = (await exchangeAPI().getFiatPrice({legal: 'CNY'})).fiatPrices\n                    const gasPrice = (await exchangeAPI().getGasPrice()).gasPrice / 1e+9\n                    const forex = faitPrices[ 'USDT' ]?.price\n                    store.dispatch(updateRealTimeAmmMap(undefined))\n                    store.dispatch(updateRealTimeObj({faitPrices, gasPrice, forex}))\n                }, 300000)   //\n\n            })(__timer__);\n            return {chainId, env, baseURL,socketURL, faitPrices, gasPrice, forex, exchangeInfo, __timer__}\n        }\n    }\n}\n\nexport function* getUpdateSystem({payload}: any) {\n    try {\n        // @ts-ignore\n        const {chainId} = payload;\n        const {env, baseURL, faitPrices, gasPrice, forex, exchangeInfo, __timer__} = yield call(getSystemsApi, chainId);\n\n        yield put(getSystemStatus({env, baseURL, faitPrices, gasPrice, forex, exchangeInfo, __timer__}));\n        yield call(initConfig,chainId)\n        //TODO check wallect store\n    } catch (err) {\n        yield put(getSystemStatus(err));\n    }\n}\n\nfunction* systemSaga() {\n    yield all([takeLatest(updateSystem, getUpdateSystem)]);\n}\n\nexport const systemForks = [\n    fork(systemSaga),\n]\n","import { all, call, fork, put, takeLatest } from \"redux-saga/effects\";\nimport { getWalletLayer1Status, updateWalletLayer1 } from './reducer';\nimport { CoinKey, PairKey, WalletCoin } from '@loopring-web/common-resources';\nimport { exchangeAPI } from '../apis/api';\nimport store from '../index';\nimport { fromWEI } from 'loopring-sdk';\n\ntype WalletLayer1Map<R extends {[key:string]:any}> = {\n    [key in CoinKey<R>|PairKey<R>]?:WalletCoin<R>\n}\n\nconst getWalletLayer1Balance = async <R extends {[key:string]:any}>()=> {\n    //TODO: check is connect and active and assign walletLayer1\n    //TODO: if not reject directory, any error happen will clean the\n    // await sdk\n    const exchangeApi = exchangeAPI();\n    const {accAddr,accountId} = store.getState().account;\n    const {tokenMap,marketCoins} = store.getState().tokenMap;\n    const {ethBalance} =  await exchangeApi.getEthBalances({owner:accAddr});\n    // @ts-ignore\n    const {tokenBalances} =  await exchangeApi.getTokenBalances({owner:accAddr,token: marketCoins.join()},tokenMap);\n    tokenBalances['ETH'] = ethBalance;\n    let walletLayer1;\n    if(tokenBalances) {\n        walletLayer1 = Reflect.ownKeys(tokenBalances).reduce((prev,item)=>{\n            return   {...prev, [ item ]:{\n                    belong: item,\n                    count: fromWEI(tokenMap, item, tokenBalances[item as string]),\n                }\n            }\n        },{} as WalletLayer1Map<R>)\n    }\n    return {walletLayer1}\n};\n\nexport function* getPostsSaga() {\n    try {\n        //\n        const {walletLayer1} = yield call(getWalletLayer1Balance);\n        yield put(getWalletLayer1Status({walletLayer1}));\n    } catch (err) {\n        yield put(getWalletLayer1Status(err));\n    }\n}\n\nexport function* walletLayer1Saga() {\n    yield all([takeLatest(updateWalletLayer1, getPostsSaga)]);\n}\n\nexport const walletLayer1Fork = [\n    fork(walletLayer1Saga),\n    // fork(tokenPairsSaga),\n]\n\n","import { all, call, fork, put, takeLatest } from \"redux-saga/effects\";\nimport { getWalletLayer2Status, updateWalletLayer2 } from './reducer';\nimport { CoinKey, PairKey, WalletCoin } from '@loopring-web/common-resources';\nimport { userAPI } from '../apis/api';\nimport store from '../index';\n\ntype WalletLayer2Map<R extends { [ key: string ]: any }> = {\n    [key in CoinKey<R> | PairKey<R>]?: WalletCoin<R>\n}\n\nconst getWalletLayer2Balance = async <R extends { [ key: string ]: any }>() => {\n    //TODO: check is connect and active and assign walletLayer1\n    //TODO: if not reject directory, any error happen will clean the\n    // await sdk\n    // const exchangeApi = exchangeAPI();\n    const userApi = userAPI();\n    const {accountId, apiKey} = store.getState().account;\n    const {tokenMap, idIndex, marketCoins} = store.getState().tokenMap;\n    let walletLayer2;\n    if (apiKey && accountId) {\n        // @ts-ignore\n        const {userBalances} = await userApi.getUserBalances({accountId: accountId, tokens: ''}, apiKey)\n        if (userBalances) {\n            // tokenId: number;\n            // total: string;\n            // locked: string;\n            // pending: {\n            //     withdraw: string;\n            //     deposit: string;\n            // };\n            walletLayer2 = Reflect.ownKeys(userBalances).reduce((prev, item) => {\n                // @ts-ignore\n                return {...prev, [ idIndex[ item ] ]: userBalances[ Number(item) ]}\n            }, {} as WalletLayer2Map<R>)\n        }\n    }\n\n    return {walletLayer2}\n};\n\nexport function* getPostsSaga() {\n    try {\n        //\n        const {walletLayer2} = yield call(getWalletLayer2Balance);\n        yield put(getWalletLayer2Status({walletLayer2}));\n    } catch (err) {\n        yield put(getWalletLayer2Status(err));\n    }\n}\n\nexport function* walletLayer2Saga() {\n    yield all([takeLatest(updateWalletLayer2, getPostsSaga)]);\n}\n\n// export function* walletLayer2Saga() {\n//     yield all([takeLatest(updateWalletLayer2, getPostsSaga)]);\n// }\n\n\nexport const walletLayer2Fork = [\n    fork(walletLayer2Saga),\n    // fork(tokenPairsSaga),\n]\n\n","import { all, call, fork, put, takeLatest } from \"redux-saga/effects\"\nimport { getUserRewards, getUserRewardsStatus } from './reducer'\n\nimport store from '../index';\nimport { exchangeAPI, LoopringAPI } from '../apis/api';\nimport { updateRealTimeAmmMap } from '../Amm/AmmMap';\nimport { updateRealTimeObj } from '../system';\n\nconst getUserRewardsApi = async <R extends {[key:string]:any}>(list:Array<keyof R>)=> {\n\n    // const data:UserRewardsMap<R> = {}\n\n    // const userRewardss = await exchangeAPI().getUserRewards({market: list.join(',')})\n    const {accountId} = store.getState().account\n    let {__timer__} = store.getState().userRewardsMap;\n    \n    if(LoopringAPI.ammpoolAPI) {\n        __timer__ = ((__timer__) => {\n            if (__timer__ && __timer__ !== -1) {\n                clearInterval(__timer__);\n            }\n            return setTimeout(async () => {\n                store.dispatch(getUserRewards(undefined))\n            }, 300000 * 4)   //\n\n        })(__timer__);\n        return  LoopringAPI.ammpoolAPI.getAmmPoolUserRewards({owner:accountId}).then(({ammUserRewardMap}) => {\n            return {data:ammUserRewardMap,__timer__}\n        })\n\n\n    }else{\n        return  Promise.reject({data:undefined,__timer__})\n    }\n\n}\n\nexport function* getPostsSaga({payload}:any) {\n    try {\n        // @ts-ignore\n        // const { userRewardsKey,userRewardsKeys } = payload;\n        // console.log('getPostsSaga userRewardsKey',userRewardsKey, userRewardsKeys)\n        // if(userRewardsKey || (userRewardsKeys && userRewardsKeys.length)) {\n        const {data,__timer__}  = yield call(getUserRewardsApi);\n        yield put(getUserRewardsStatus({userRewardsMap:data,__timer__}));\n\n        // }else{\n        //     throw new CustomError(ErrorMap.NO_SDK);\n        // }\n    } catch (err) {\n        yield put(getUserRewardsStatus(err));\n    }\n}\n\nfunction* userRewardsSaga() {\n    yield all([takeLatest(getUserRewards, getPostsSaga)]);\n}\n\nexport const userRewardsForks = [\n    fork(userRewardsSaga),\n    // fork(userRewardssSaga),\n]\n ","import { all, call, fork, put, takeLatest } from 'redux-saga/effects';\nimport { getSocketStatus, sendSocketTopic, socketEnd } from './reducer'\nimport store from '../index';\nexport function* closeSocket(){\n    try {\n        if (window.loopringSocket){\n            yield call(window.loopringSocket.socketClose)\n        }\n        yield put(getSocketStatus(undefined));\n        //TODO check wallect store\n    } catch (err) {\n        yield put(getSocketStatus(err));\n    }\n}\nexport function* sendMessage({payload}: any){\n    try {\n        const { apiKey } = store.getState().account;\n        const { socket } = payload;\n        if (window.loopringSocket){\n            yield call(window.loopringSocket.socketSendMessage, { socket, apiKey })\n        }\n        yield put(getSocketStatus(undefined));\n    } catch (err) {\n        yield put(getSocketStatus(err));\n    }\n}\n\nfunction* socketEndSaga(){\n    yield all([takeLatest(socketEnd, closeSocket)]);\n}\n\nfunction* socketSendMessageSaga() {\n    yield all([takeLatest(sendSocketTopic, sendMessage)]);\n}\n\n\n\nexport const socketForks = [\n    // fork(socketSaga),\n    fork(socketEndSaga),\n    fork(socketSendMessageSaga),\n //   fork(initConfig),\n]\n\n\n\n","import { all } from \"redux-saga/effects\"\n// import machine from \"../state_machine/fsm/machine\"\n// import { TRANSITION } from \"../state_machine/fsm/actionTypes\"\n// import { helloSaga } from \"./sagas\"\nimport { tokenSaga } from './token/saga';\nimport { ammForks } from './Amm';\nimport { tickerForks } from './ticker/saga';\nimport { systemForks } from './system/saga';\nimport { walletLayer1Fork } from './walletLayer1/saga';\nimport { walletLayer2Fork } from './walletLayer2/saga';\nimport { userRewardsForks } from './userRewards/saga';\nimport { socketForks } from './socket/saga';\n\n\n// https://css-tricks.com/finite-state-machines-with-react/\n// https://musing-rosalind-2ce8e7.netlify.com/?machine=%7B%22initial%22%3A%22initial%22%2C%22states%22%3A%7B%22initial%22%3A%7B%22on%22%3A%7B%22LOGIN%22%3A%22loggedIn%22%2C%22LOGOUT%22%3A%22loggedOut%22%7D%7D%2C%22loggedOut%22%3A%7B%22on%22%3A%7B%22SUBMIT%22%3A%22loading%22%7D%7D%2C%22loading%22%3A%7B%22on%22%3A%7B%22SUCCESS%22%3A%22loggedIn%22%2C%22FAIL%22%3A%22loggedOut%22%7D%7D%2C%22loggedIn%22%3A%7B%22onEntry%22%3A%5B%22SET_TOKEN%22%5D%2C%22onExit%22%3A%5B%22CLEAR_TOKEN%22%5D%2C%22on%22%3A%7B%22LOGOUT%22%3A%22loggedOut%22%7D%7D%7D%7D\n\n// function* machineHandler(event: any, action: any) {\n//\n//   // @ts-ignore\n//   const currentAppState = yield select((state) => { state.account.status })\n//   const nextAppState = machine.transition(currentAppState, event)\n//\n//   yield put({\n//     type: \"APP_STATE/\" + nextAppState.value,\n//     payload: {\n//       value: nextAppState.value\n//     }\n//   });\n//\n//   console.debug(\"-> from \" + currentAppState + \" to \" + nextAppState);\n//\n//   for (let i = 0; i < nextAppState.actions.length; i++) {\n//     yield put({\n//       type: nextAppState.actions[i],\n//       payload: action\n//     });\n//   }\n// }\n\n// function* watchTransition() {\n//   yield takeEvery(TRANSITION, function*(action: any) {\n//     yield machineHandler(action.event, action.payload);\n//   });\n// }\n\nfunction* mySaga() {\n    yield all([\n        // fork(helloSaga),\n        // fork(watchTransition),\n        ...tokenSaga,\n        ...walletLayer1Fork,\n        ...walletLayer2Fork,\n        ...systemForks,\n        ...ammForks,\n        ...tickerForks,\n        ...userRewardsForks,\n        ...socketForks,\n\n    ]);\n}\n\nexport default mySaga;\n","import { createSlice, PayloadAction, Slice } from '@reduxjs/toolkit'\nimport { FavoriteMarketStates } from './interface';\nimport { SliceCaseReducers } from '@reduxjs/toolkit/src/createSlice';\n\n\nconst favoriteMarketSlice: Slice<FavoriteMarketStates> = createSlice<FavoriteMarketStates,SliceCaseReducers<FavoriteMarketStates>,'favoriteMarket'>({\n    name: 'favoriteMarket',\n    initialState:[],\n    reducers: {\n        clearAll(state:FavoriteMarketStates, action: PayloadAction<undefined>) {\n            state = [];\n        },\n        removeMarket(state:FavoriteMarketStates, action: PayloadAction<string>) {\n            const pair = action.payload\n            if (pair) {\n                state = state.filter((_pair: string) => {\n                    return _pair === pair;\n                });\n            }\n\n        },\n        addMarket(state:FavoriteMarketStates, action: PayloadAction<string>) {\n            const pair = action.payload\n            if (pair && state.findIndex((_pair: string) => _pair === pair) === -1) {\n                state = [...state, pair]\n            }\n\n        },\n        addMarkets(state:FavoriteMarketStates, action: PayloadAction<string[]>) {\n            let pairs = action.payload\n            if (pairs.length) {\n                state = [...state, ...pairs.reduce((prev, pair) => {\n                    if (pair && state.findIndex((_pair: string) => _pair === pair) === -1) {\n                        prev.push(pair)\n                    }\n                    return prev\n                }, [] as string[])]\n\n\n            }\n        },\n\n    },\n});\nexport { favoriteMarketSlice };\nexport const {clearAll, removeMarket, addMarket, addMarkets} = favoriteMarketSlice.actions\n","import { combineReducers } from '@reduxjs/toolkit';\nimport { favoriteMarketSlice } from './favoriteMarket';\n\n\nexport const  localStoreReducer = combineReducers({\n    // ammRecord: ammRecordSlice.reducer,\n    // ammTrades: ammTradesSlice.reducer,\n    favoriteMarket: favoriteMarketSlice.reducer,\n})\n","import { configureStore, combineReducers, getDefaultMiddleware } from '@reduxjs/toolkit'\n\nimport { useDispatch } from 'react-redux'\nimport { save, load } from 'redux-localstorage-simple'\n\nimport createSagaMiddleware from 'redux-saga'\nimport * as imgConfig  from '@loopring-web/common-resources/assets/images/coin/loopring.json'\n\n// We'll use redux-logger just as an example of adding another middleware\nimport logger from 'redux-logger'\n\n// And use redux-batch as an example of adding enhancers\nimport { reduxBatch } from '@manaflair/redux-batch'\nimport { updateVersion } from './global/actions'\n\nimport accountSlice from './account/reducer'\n\nimport { modalsSlice, setCoinJson, setLanguage, settingsSlice } from '@loopring-web/component-lib';\nimport { ammReducer } from './Amm';\nimport { tokenMapSlice } from './token';\nimport mySaga from './rootSaga';\nimport { tickerMapSlice } from './ticker';\nimport { systemSlice } from './system';\nimport { walletLayer1Slice } from './walletLayer1';\nimport { walletLayer2Slice } from './walletLayer2';\nimport { socketSlice } from './socket';\nimport { userRewardsMapSlice } from './userRewards';\nimport { localStoreReducer } from './localStore';\n\nconst sagaMiddleware = createSagaMiddleware()\n\nconst reducer = combineReducers({\n  account: accountSlice.reducer,\n  socket: socketSlice.reducer,\n  settings: settingsSlice.reducer,\n  system: systemSlice.reducer,\n  modals: modalsSlice.reducer,\n  userRewardsMap: userRewardsMapSlice.reducer,\n  amm:ammReducer,\n  tokenMap: tokenMapSlice.reducer,\n  walletLayer2: walletLayer2Slice.reducer,\n  walletLayer1: walletLayer1Slice.reducer,\n  tickerMap: tickerMapSlice.reducer,\n  localStore: localStoreReducer,\n})\n\n\n//\n\nconst PERSISTED_KEYS: string[] = ['settings','localStore']\n\nconst store = configureStore({\n  reducer,\n  // middleware: (getDefaultMiddleware) => getDefaultMiddleware().concat(logger),\n  middleware: [...getDefaultMiddleware({ thunk: false,serializableCheck:false, }), save({ states: PERSISTED_KEYS }), sagaMiddleware ],\n  // middleware: [...getDefaultMiddleware({ thunk: true }), ],\n  devTools: process.env.NODE_ENV !== 'production',\n  enhancers: [reduxBatch],\n  preloadedState: load({ states: PERSISTED_KEYS }) as any\n})\nstore.dispatch(updateVersion())\nstore.dispatch(setLanguage(store.getState().settings.language))\nstore.dispatch(setCoinJson(imgConfig.frames))\n// @ts-ignore\nsagaMiddleware.run(mySaga, store.dispatch);\n\n// The store has been created with these options:\n// - The slice reducers were automatically passed to combineReducers()\n// - redux-thunk and redux-logger were added as middleware\n// - The Redux DevTools Extension is disabled for production\n// - The middleware, batch, and devtools enhancers were composed together\n\nexport type AppDispatch = typeof store.dispatch\nexport const useAppDispatch = () => useDispatch<AppDispatch>()\n\nexport type RootState = ReturnType<typeof reducer>\n\nexport default store\n","import { useDispatch, useSelector } from 'react-redux'\nimport { getTicker, getTickers, statusUnset } from './reducer';\nimport { TickerStates } from './interface';\nimport { CoinKey } from '@loopring-web/common-resources';\nimport React from 'react';\n\nexport function useTicker(): TickerStates & {\n    updateTickers: (tickerKeys: Array<CoinKey<any>>) => void,\n    updateTicker: (tickerKey: CoinKey<any>) => void,\n    statusUnset: () => void,\n} {\n    const tickerMap: TickerStates = useSelector((state: any) => state.tickerMap)\n    const dispatch = useDispatch();\n    return {\n        ...tickerMap,\n        statusUnset: React.useCallback(() => dispatch(statusUnset(undefined)), [dispatch]),\n        updateTickers: React.useCallback((tickerKeys: Array<CoinKey<any>>) => dispatch(getTickers({tickerKeys})), [dispatch]),\n        updateTicker: React.useCallback((tickerKey: CoinKey<any>) => dispatch(getTicker({tickerKey})), [dispatch]),\n    }\n\n}\n","import { useDispatch, useSelector } from 'react-redux'\nimport { AmmActivityMapStates } from './interface';\nimport { ammActivityMapSlice, getAmmActivityMap, statusUnset } from './reducer';\nimport React from 'react';\n\nexport function useAmmActivityMap(): AmmActivityMapStates & {\n    getAmmActivityMap:()=> void,\n    statusUnset:()=> void,\n} {\n    const ammActivityMap:AmmActivityMapStates = useSelector((state: any) => state.amm.ammActivityMap)\n    const dispatch = useDispatch();\n    return {\n        ...ammActivityMap,\n        statusUnset: React.useCallback(()=>dispatch(statusUnset(undefined)),[dispatch]),\n        getAmmActivityMap: React.useCallback(()=>dispatch(getAmmActivityMap(undefined)),[dispatch])\n    }\n\n}\n","import { useDispatch, useSelector } from 'react-redux'\nimport { updateSystem } from './reducer';\nimport { System, SystemStatus } from './interface';\nimport React from 'react';\nimport { statusUnset } from '../Amm/AmmMap';\n\nexport function useSystem(): SystemStatus & {\n    updateSystem:(system:Partial<System< {[key:string]:any}>>)=>void,\n    statusUnset:()=>void,\n} {\n    const system:SystemStatus = useSelector((state: any) => state.system)\n    const dispatch = useDispatch();\n    return {\n        ...system,\n        statusUnset:React.useCallback(()=>dispatch(statusUnset(undefined)),[dispatch]),\n        updateSystem:React.useCallback((system:Partial<System<{[key:string]:any}>>)=>dispatch(updateSystem(system)),[dispatch]),\n    }\n\n}\n","import { useDispatch, useSelector } from 'react-redux'\nimport { StateBase } from '../interface';\nimport { sendSocketTopic, socketEnd, socketSlice } from './reducer';\nimport { SocketMap } from './interface';\nimport React from 'react';\nimport { statusUnset } from '../Amm/AmmMap';\n\nexport function useSocket(): StateBase & {\n    // socketStart:()=>void,\n    statusUnset: () => void,\n    sendSocketTopic: (socket: SocketMap) => void,\n    socketEnd: () => void\n} {\n    const socket: StateBase & { socket: SocketMap } = useSelector((state: any) => state.socket)\n    const dispatch = useDispatch();\n    // const socketStart = () => {\n    //     dispatch(socketSlice.actions.socketStart(undefined))\n    // }\n    // const sendSocketTopic = (socket: SocketMap) => {\n    //     dispatch(socketSlice.actions.sendSocketTopic({socket}))\n    // }\n    // const socketEnd = () => {\n    //     dispatch(socketSlice.actions.socketEnd(undefined))\n    // }\n    // const statusUnset = () => {\n    //     dispatch(socketSlice.actions.statusUnset(undefined))\n    // }\n    return {\n        ...socket,\n        statusUnset:React.useCallback(()=>dispatch(statusUnset(undefined)),[dispatch]),\n        sendSocketTopic:React.useCallback((socket: SocketMap)=>dispatch(sendSocketTopic({socket})),[dispatch]),\n        socketEnd:React.useCallback(()=>dispatch(socketEnd(undefined)),[dispatch]),\n    }\n\n}\n","import { AmmDetailBase } from '@loopring-web/common-resources';\nimport { volumeToCountAsBigNumber } from './volumeToCount';\n\nexport const ammPairInit = ({\n                                   pair,\n                                   _ammCalcData,\n                                   ammType,\n                                   tokenMap,\n                                   coinMap,\n                                   walletMap,\n                                   ammMap,\n                                   tickerData,\n                                   ammPoolsBalance\n                               }: any) => {\n    _ammCalcData.coinInfoMap = coinMap;\n    if (tickerData) {\n        _ammCalcData.AtoB = Number(tickerData.close)\n    }\n    if (isNaN(_ammCalcData.AtoB) && ammPoolsBalance) {\n        const baseVol = volumeToCountAsBigNumber(pair.coinAInfo.simpleName, ammPoolsBalance.pooled[ 0 ].volume);\n        const quoteVol = volumeToCountAsBigNumber(pair.coinBInfo.simpleName, ammPoolsBalance.pooled[ 1 ].volume);\n        _ammCalcData.AtoB = quoteVol && baseVol && parseFloat(quoteVol.div(baseVol).toFixed(7, 0) as string)\n    }\n    if (pair.coinAInfo) {\n        // if(ammType === AmmPanelType.Deposit ) {\n        _ammCalcData.myCoinA = {\n            belong: pair.coinAInfo.simpleName,\n            balance: walletMap ? walletMap[ pair.coinAInfo.simpleName ]?.count : 0,\n        }\n        _ammCalcData.myCoinB = {\n            belong: pair.coinBInfo.simpleName,\n            balance: walletMap ? walletMap[ pair.coinBInfo.simpleName ]?.count : 0,\n        }\n        // }else {\n        const key = `${pair.coinAInfo.simpleName}-${pair.coinBInfo.simpleName}`;\n        let coinACount = 0, coinBCount = 0;\n        if (walletMap) {\n            const balance = walletMap ? walletMap[ 'LP-' + key ]?.count : 0;\n            const {totalLPToken, totalA, totalB}: AmmDetailBase<any> = ammMap[ 'AMM-' + key ];\n            if (totalA && totalLPToken && totalB) {\n                coinACount = totalA / totalLPToken * balance;\n                coinBCount = totalB / totalLPToken * balance;\n            }\n            _ammCalcData.lpCoin = balance;\n        }\n        _ammCalcData.lpCoinA = {\n            belong: pair.coinAInfo.simpleName,\n            balance: coinACount,\n        }\n        _ammCalcData.lpCoinB = {\n            belong: pair.coinBInfo.simpleName,\n            balance: coinBCount,\n        }\n        // }\n    }\n\n\n    return _ammCalcData\n}\n\n\n","export function coinPairInit({coinKey, _tradeCalcData, tokenMap, coinMap}: any) {\n    if (coinKey) {\n        const [_match, sell, buy] = coinKey.match(/(\\w+)-(\\w+)/i);\n        // @ts-ignore\n        if (sell && coinMap && coinMap[ sell ]) {\n            _tradeCalcData.coinSell = sell;\n        }// @ts-ignore\n        if (sell!==buy && buy && -1 !== tokenMap[ sell ].tradePairs.findIndex(ele => ele === buy)) {\n            _tradeCalcData.coinBuy = buy;\n            return _tradeCalcData\n        }\n        // else{\n        //     _tradeCalcData.coinBuy = tokenMap[ sell ].tradePairs[ 0 ];\n        // }\n    }\n    if (!_tradeCalcData.coinSell || _tradeCalcData.coinSell === '') {\n        _tradeCalcData.coinSell = 'LRC';\n        _tradeCalcData.coinBuy = 'ETH';\n        return _tradeCalcData\n    }\n    if (!_tradeCalcData.coinBuy || _tradeCalcData.coinBuy === '' || _tradeCalcData.coinBuy === 'undefined') {\n        // @ts-ignore\n        if (tokenMap && tokenMap[ _tradeCalcData.coinSell ].tradePairs) {\n            _tradeCalcData.coinBuy = tokenMap[ _tradeCalcData.coinSell ].tradePairs[ 0 ]\n        } else {\n            _tradeCalcData.coinSell = 'LRC';\n            _tradeCalcData.coinBuy = 'ETH';\n        }\n    }\n    return _tradeCalcData\n}","import store from '../../stores';\nimport { AccountStatus } from '../../state_machine/account_machine_spec';\nimport { setShowAccountInfo, setShowConnect, setShowDeposit } from '@loopring-web/component-lib';\n\nexport enum fnType {\n    UNKNOWN,\n    UNCONNNECTED,\n    CONNECTED,\n    NOACCOUNT,\n    DEPOSITING,\n    DEPOSIT_TO_CONFIREM,\n    UNACTIVATED,\n    ARPROVING,\n    APPROV_TO_CONFIRM,\n    LOCKED,\n    ACTIVATED,\n    DEFAULT\n}\n\nexport const accountStaticCallBack = (onclickMap: { [ key: number ]: [fn: (props: any) => any, args?: any[]] }, deps?: any[]) => {\n    const {status} = store.getState().account;\n    let fn, args;\n    switch (status) {\n        case AccountStatus.UNKNOWN:\n            [fn, args] = onclickMap[ fnType.UNKNOWN ] ? onclickMap[ fnType.UNKNOWN ] : [];\n            break\n        case AccountStatus.UNCONNNECTED:\n            [fn, args] = onclickMap[ fnType.UNCONNNECTED ] ? onclickMap[ fnType.UNCONNNECTED ] : [];\n            break\n        case AccountStatus.CONNECTED:\n            [fn, args] = onclickMap[ fnType.CONNECTED ] ? onclickMap[ fnType.CONNECTED ] : [];\n            break\n        case AccountStatus.NOACCOUNT:\n            [fn, args] = onclickMap[ fnType.NOACCOUNT ] ? onclickMap[ fnType.NOACCOUNT ] : [];\n            break;\n        case AccountStatus.DEPOSITING:\n            [fn, args] = onclickMap[ fnType.DEPOSITING ] ? onclickMap[ fnType.DEPOSITING ] : [];\n            break;\n        case AccountStatus.DEPOSIT_TO_CONFIREM:\n            [fn, args] = onclickMap[ fnType.DEPOSIT_TO_CONFIREM ] ? onclickMap[ fnType.DEPOSIT_TO_CONFIREM ] : [];\n            break;\n        case AccountStatus.UNACTIVATED:\n            [fn, args] = onclickMap[ fnType.UNACTIVATED ] ? onclickMap[ fnType.UNACTIVATED ] : [];\n            break;\n        case AccountStatus.ARPROVING:\n            [fn, args] = onclickMap[ fnType.ARPROVING ] ? onclickMap[ fnType.ARPROVING ] : [];\n            break;\n        case AccountStatus.APPROV_TO_CONFIRM:\n            [fn, args] = onclickMap[ fnType.APPROV_TO_CONFIRM ] ? onclickMap[ fnType.APPROV_TO_CONFIRM ] : [];\n            break;\n        case AccountStatus.LOCKED:\n            [fn, args] = onclickMap[ fnType.LOCKED ] ? onclickMap[ fnType.LOCKED ] : [];\n            break;\n        case AccountStatus.ACTIVATED:\n            [fn, args] = onclickMap[ fnType.ACTIVATED ] ? onclickMap[ fnType.ACTIVATED ] : [];\n            break;\n        default:\n            //[fn, args] = onclickMap[ fnType.DEFAULT ] ? onclickMap[ fnType.DEFAULT ] : [];\n            break;\n    }\n\n\n    if (fn === undefined) {\n        [fn, args] = onclickMap[ fnType.DEFAULT ] ? onclickMap[ fnType.DEFAULT ] : [];\n    }\n    if (typeof fn === 'function') {\n        args = [...(args ?? []), ...(deps ?? [])] as [props: any]\n        return fn.apply(this, args);\n    }\n\n    // break;\n    // [fn, args] = props[ fnType.DEFAULT ]?props[ fnType.DEFAULT ]:[];\n    // if (typeof fn === 'function') {\n    //     return fn.call(this, args);\n    // }\n}\n\n\nexport const bntLabel: typeof btnClickMap = {\n    [ fnType.UNCONNNECTED ]: [\n        function () {\n            return `labelConnectWallet`\n        }\n    ]\n    , [ fnType.DEFAULT ]: [\n        function () {\n            return `depositTitleAndActive`\n        }\n    ]\n    , [ fnType.ACTIVATED ]: [\n        function () {\n            return undefined\n        }\n    ]\n    , [ fnType.LOCKED ]: [\n        function () {\n            return `labelUnLockLayer2`\n        }\n    ]\n};\n\n\nexport const btnClickMap: { [ key: number ]: [fn: (props: any) => any, args?: any[]] } = {\n    [ fnType.UNCONNNECTED ]: [\n        function () {\n            // setShowConnect({isShow: true})\n            store.dispatch(setShowConnect({isShow: true}))\n        }\n    ]\n    , [ fnType.DEFAULT ]: [\n        function () {\n            store.dispatch(setShowDeposit({isShow: true}))\n            // ShowDeposit(true)\n        }\n    ]\n\n    , [ fnType.LOCKED ]: [\n        function () {\n            store.dispatch(setShowAccountInfo({isShow: true}))\n        }\n    ]\n};\n\n\n","import store from '../../stores';\nimport { setSlippage } from '@loopring-web/component-lib';\n\ntype Cache = {\n    customSlippage?:number\n}\nexport  const makeCache  = (__cache__:Cache)=>{\n   if(typeof  __cache__.customSlippage !== undefined){\n       store.dispatch(setSlippage(__cache__.customSlippage as number))\n      // store.getState().settings\n   }\n}","import { AmmDetailStore } from '../../stores/Amm/AmmMap';\nimport { AmmPoolSnapshot } from 'loopring-sdk';\nimport { makeMyAmmWithSnapshot, makeMyAmmWithStat } from './makeUIAmmActivityMap';\nimport { AmmUserRewardMap } from 'loopring-sdk/dist/defs/loopring_defs';\nimport { WalletMapExtend } from './makeWallet';\n\nexport const makeMyPoolRowWithSnapShot = <T extends { [ key: string ]: any }>({market,ammSnapShot,walletMap,ammUserRewardMap}: {\n    market:string\n    ammSnapShot: AmmPoolSnapshot,\n    walletMap: WalletMapExtend<T>\n    ammUserRewardMap:AmmUserRewardMap|undefined\n}) => {\n\n    return makeMyAmmWithSnapshot(market,walletMap, ammUserRewardMap, {\n        ammPoolsBalance: ammSnapShot\n    })\n}\n\n                                                                        \nexport const makeMyPoolRowWithPoolState = <T extends { [ key: string ]: any }>({market,ammDetail,walletMap,ammUserRewardMap}: {\n    market:string\n    ammDetail: AmmDetailStore<T>,\n    walletMap: WalletMapExtend<T>\n    ammUserRewardMap:AmmUserRewardMap|undefined\n}) => {\n    if(walletMap && ammDetail){\n        return makeMyAmmWithStat (market,walletMap, ammUserRewardMap, ammDetail)\n    }\n    return undefined\n}","import { TickerData, toBig } from 'loopring-sdk';\nimport store from '../../stores';\nimport { FloatTag,TradeFloat } from '@loopring-web/common-resources';\nimport { volumeToCountAsBigNumber } from './volumeToCount';\nimport { Ticker, TickerMap } from '../../stores/ticker';\nimport { LoopringMap } from 'loopring-sdk/dist/defs/loopring_defs';\nimport { VolToNumberWithPrecision } from '../../utils/formatter_tool';\n\nexport const makeTickView = (tick: TickerData) => {\n    // const {forex} = store.getState().system;\n\n    const {faitPrices, forex} = store.getState().system;\n    const floatTag = (isNaN(tick.close) || isNaN(tick.open))  || tick.open === tick.close ? FloatTag.none :\n        tick.close > tick.open ? FloatTag.increase : FloatTag.decrease\n    let _tradeFloat: Partial<TradeFloat> = {\n        change: (tick.close - tick.open) / tick.open,\n        timeUnit: '24h',\n        priceYuan:  0,\n        priceDollar: 0,\n        floatTag,\n        reward: 0,\n        close: isNaN(tick.close) ? undefined : tick.close,\n        high: tick.high === 0 ? undefined : tick.high,\n        low: tick.low === 0 ? undefined : tick.low,\n\n        // APY: 0,\n    }\n    if (faitPrices && forex) {\n        const volume = VolToNumberWithPrecision(tick.base_token_volume, tick.base as string)\n        // const priceDollar = toBig(tiem).times(faitPrices[ tick.base as string ] ? faitPrices[ tick.base as string ].price : 0);\n        // const priceYuan = priceDollar.times(forex);\n        const closeDollar = toBig(tick.close).times(faitPrices[ tick.quote as string ] ? faitPrices[ tick.quote as string ].price : 0);\n        const closeYuan = closeDollar.times(forex);\n        const qPrice = faitPrices[tick.quote as string].price?    faitPrices[tick.quote as string].price:0;\n        _tradeFloat = {\n            ..._tradeFloat,\n            changeDollar: toBig(tick.close - tick.open).times( qPrice ).toNumber(),\n            changeYuan: toBig(tick.close - tick.open).times( qPrice ).times(forex).toNumber(),\n            volume: volume?Number(volume):undefined,\n            closeDollar:closeDollar.toNumber(),\n            closeYuan:closeYuan.toNumber(),\n        }\n    }\n    return _tradeFloat;\n}\nexport  const makeTickerMap =  <R extends {[key:string]:any}>({tickerMap}:{tickerMap:LoopringMap<TickerData>}):TickerMap<{[key:string]:any}>=>{\n    const {faitPrices, forex} = store.getState().system;\n    return Reflect.ownKeys(tickerMap).reduce((prev, key) => {\n        const item: TickerData = tickerMap[ key as any ];\n        if (item && item.base && forex && faitPrices && (faitPrices[ item.base ] || faitPrices[ 'USDT' ])) {\n            const volume = VolToNumberWithPrecision(item.base_token_volume, item.base as string)\n            //FIX: DIE is not in faitPrices\n            const priceDollar = toBig(volume?volume:0).times(faitPrices[ item.base ] ? faitPrices[ item.base ].price : faitPrices[ 'USDT' ].price);\n            const priceYuan = priceDollar?.times(forex);\n            const change = item.change && item.change !== 0 ? item.change * 100 : undefined;\n\n            prev[ key as keyof R] = {\n                // ...item,\n                timeUnit: '24h',\n                priceDollar: priceDollar?.toNumber() === 0 ? undefined : priceDollar?.toNumber(),\n                priceYuan: priceYuan?.toNumber() === 0 ? undefined : priceYuan?.toNumber(),\n                volume: volume?Number(volume):undefined,\n                floatTag: item.close > item.open ? 'increase' : 'decrease',\n                change: change,\n                close: isNaN(item.close) ? undefined : item.close,\n                high: item.high === 0 ? undefined : item.high,\n                low: item.low === 0 ? undefined : item.low,\n                // APY: 0,\n                reward: 0,\n                rewardToken: '',\n                __rawTicker__: item,\n            } as Ticker;\n        }\n        return prev\n    }, {} as TickerMap<R>)\n}\n","import { AmmMap } from '../../stores/Amm/AmmMap';\nimport { AmmPoolSnapshot, getBaseQuote, LoopringMap, TickerData, TokenInfo, TokenVolumeV3 } from 'loopring-sdk';\nimport { LoopringAPI } from '../../stores/apis/api';\nimport { CoinMap, CustomError, ErrorMap } from '@loopring-web/common-resources';\nimport { volumeToCountAsBigNumber } from './volumeToCount';\n\nexport const pairDetailBlock = <C extends { [ key: string ]: any }, I extends { [ key: string ]: any }>({\n                                                                                                           coinKey,\n                                                                                                           ammKey,\n                                                                                                           ammMap\n                                                                                                       }: { coinKey: string, ammKey: string, ammMap: AmmMap<C, I> }):\n    Promise<{\n        ammPoolsBalance: AmmPoolSnapshot,\n        tickMap:  LoopringMap<TickerData>\n}> => {\n    // const exchangeApi = exchangeAPI();\n    // const ammpoolApi = ammpoolAPI();\n    return new Promise((resolve, reject) => {\n        if(LoopringAPI.ammpoolAPI && LoopringAPI.exchangeAPI ) {\n            Promise.all([\n                LoopringAPI.ammpoolAPI.getAmmPoolSnapshot({poolAddress: ammMap[ ammKey ].address}),\n                LoopringAPI.exchangeAPI.getMixTicker({market: coinKey})])\n                // exchangeApi.getMarketTrades({market:coinKey})])\n                //{raw_data},\n                .then(([{ammPoolSnapshot}, {tickMap}]) => {\n                    resolve({\n                        ammPoolsBalance: ammPoolSnapshot,\n                        tickMap,\n                    })\n                })\n\n        }else{\n            reject(new CustomError(ErrorMap.NO_SDK))\n        }\n       \n    })\n}\n\nexport const pairDetailDone = <C>({coinKey, market,ammPoolsBalance, fee, tokenMap,tickerData, _tradeCalcData, coinMap, marketCoins}:any)=>{\n\n    const [, coinSell, coinbuy] = coinKey.match(/(\\w+)-(\\w+)/i)\n    let stob:number|undefined;\n    if (tickerData.base === coinSell) {\n        // const ticker: TickerData = tickMap[market]\n        stob = Number(tickerData.close)\n\n    } else{\n        // const ticker: TickerData = tickMap[market]\n        stob = Number(tickerData.close)!==0? 1/Number(tickerData.close): 0\n    }\n    if(isNaN(stob) && ammPoolsBalance){\n        const {base, quote} = getBaseQuote(coinKey)\n\n        // const baseToken: TokenInfo = getToken(tokenMap, base)\n        // const quoteToken: TokenInfo = getToken(tokenMap, quote)\n        // const baseVol = (fm.toBig(poolBaseTokenVol.volume).div(BIG10.pow(baseToken.decimals)))\n        // const quoteVol = (fm.toBig(quoteBaseTokenVol.volume).div(BIG10.pow(quoteToken.decimals)))\n        //\n        // stob = volumeToCountAsBigNumber(base,poolBaseTokenVol.volume)?.div(\n        //     volumeToCountAsBigNumber(quote,quoteBaseTokenVol.volume) || 1\n        // ) .toNumber()\n        // console.log('1', base, poolBaseTokenVol, quote, quoteBaseTokenVol)\n        //baseToken.tokenId === quoteBaseTokenVol.tokenId && quoteToken.tokenId === poolBaseTokenVol.tokenId) {\n        // const quoteVol = (fm.toBig(quoteBaseTokenVol.volume).div(BIG10.pow(baseToken.decimals)))\n        // const baseVol = (fm.toBig(poolBaseTokenVol.volume).div(BIG10.pow(quoteToken.decimals)))\n        //baseVol.div(quoteVol).toNumber()\n        // console.log('2', base, poolBaseTokenVol, quote, quoteBaseTokenVol)\n        //ErrorMap.NOTS\n        const poolBaseTokenVol: TokenVolumeV3 = ammPoolsBalance.pooled[0];\n        const quoteBaseTokenVol: TokenVolumeV3 = ammPoolsBalance.pooled[1];\n        let poolVolumn:[baseVol:any, quoteVol:any];\n        if ( base && quote && tokenMap[base].tokenId === poolBaseTokenVol.tokenId ) {\n            poolVolumn =  [[base,poolBaseTokenVol.volume],[quote,quoteBaseTokenVol.volume]]\n        } else if (base && quote && tokenMap[base].tokenId === quoteBaseTokenVol.tokenId){\n            poolVolumn =  [[quote,quoteBaseTokenVol.volume],[base,poolBaseTokenVol.volume]]\n        } else {\n            throw new CustomError(ErrorMap.NO_SUPPORT_PAIR)\n        }\n        let [baseVol,quoteVol]  = poolVolumn\n        if(baseVol && quoteVol){\n            // stob = volumeToCountAsBigNumber(baseVol[0],baseVol[1])?.div(\n            //     volumeToCountAsBigNumber(quoteVol[0],quoteVol[1]) || 1\n            // ) .toNumber()\n            stob = parseFloat(volumeToCountAsBigNumber(quoteVol[0],quoteVol[1])?.div(\n                volumeToCountAsBigNumber(baseVol[0],baseVol[1]) || 1).toFixed(7, 0) as string)\n        }\n    }\n\n    _tradeCalcData.StoB = stob;\n    _tradeCalcData.BtoS = stob !== 0 && stob !== undefined? 1 / (stob * 1.0): 0;\n    _tradeCalcData.sellCoinInfoMap = coinMap && marketCoins?.reduce((prev: any, item: string | number) => {\n        return {...prev, [ item ]: coinMap[ item ]}\n    }, {} as CoinMap<C>)\n    _tradeCalcData.buyCoinInfoMap = coinMap && tokenMap && tokenMap[ _tradeCalcData.coinSell as string ].tradePairs?.reduce((prev: any, item: string | number) => {\n        return {...prev, [ item ]: coinMap[ item ]}\n    }, {} as CoinMap<C>);\n\n    _tradeCalcData.fee = fee\n\n    return {\n        _tradeCalcData\n    }\n    //setPair();\n}","import store from '../../stores';\nimport { WalletMap,WalletCoin,CoinKey } from '@loopring-web/common-resources';\nimport * as fm from 'loopring-sdk';\nimport { UserBalanceInfo } from 'loopring-sdk';\nexport type WalletMapExtend<C> =    {\n    [K in CoinKey<C>]?: WalletCoin<C> & {\n    detail:UserBalanceInfo\n}\n}\n\n// export const makeWalletLayer1 = <C extends { [ key: string ]: any }>():{ walletMap: WalletMapExtend<C> | undefined } => {\n//     const {walletLayer1} = store.getState().walletLayer1;\n//     const {tokenMap} = store.getState().tokenMap;\n//     let walletMap: WalletMapExtend<C> | undefined;\n//     if (walletLayer1) {\n//         walletMap = Reflect.ownKeys(walletLayer1).reduce((prev, item) => {\n//             const {total, locked, pending: {withdraw}} = walletLayer1[ item as string ];\n//             const countBig = fm.toBig(total).minus(fm.toBig(locked)).minus(fm.toBig(withdraw)).toString()\n//             return {\n//                 ...prev, [ item ]: {\n//                     belong: item,\n//                     count: fromWEI(tokenMap, item, countBig),\n//                     detail: walletLayer1[ item as string ]\n//                 }\n//             }\n//         }, {} as  WalletMapExtend<C> )\n//     }\n//\n//     return {walletMap}\n// }\n\nexport const makeWalletLayer2 = <C extends { [ key: string ]: any }>():{ walletMap: WalletMapExtend<C> | undefined } => {\n    const {walletLayer2} = store.getState().walletLayer2;\n    const {tokenMap} = store.getState().tokenMap;\n    let walletMap: WalletMapExtend<C> | undefined;\n\n\n    if (walletLayer2) {\n        walletMap = Reflect.ownKeys(walletLayer2).reduce((prev, item) => {\n            const {total, locked, pending: { withdraw }} = walletLayer2[ item as string ];\n            const countBig = fm.toBig(total).minus(fm.toBig(locked)).toString()\n            return {\n                ...prev, [ item ]: {\n                    belong: item,\n                    count: fm.fromWEI(tokenMap, item, countBig),\n                    detail: walletLayer2[ item as string ]\n                }\n            }\n        }, {} as  WalletMapExtend<C> )\n    }\n\n    return {walletMap}\n}","export function myLog(message?: any, ...optionalParams: any[]) {\n    if (process.env.NODE_ENV !== 'production') {\n        console.log(message, ...optionalParams)\n    }\n}\n\nexport function myError(message?: any, ...optionalParams: any[]) {\n    if (process.env.NODE_ENV !== 'production') {\n        console.error(message, ...optionalParams)\n    }\n}\n","import { Contract } from '@ethersproject/contracts'\nimport { getAddress } from '@ethersproject/address'\nimport { AddressZero } from '@ethersproject/constants'\nimport { BigNumber } from '@ethersproject/bignumber'\n\nimport { JsonRpcSigner, Web3Provider } from '@ethersproject/providers'\n\nimport { UnsupportedChainIdError } from '@web3-react/core'\n\nimport {\n  NoEthereumProviderError,\n  UserRejectedRequestError as UserRejectedRequestErrorInjected\n} from '@web3-react/injected-connector'\nimport { UserRejectedRequestError as UserRejectedRequestErrorWalletConnect } from '@web3-react/walletconnect-connector'\n\nimport { ChainId } from 'loopring-sdk'\n\nimport ms from 'ms.macro'\n\nexport function getLibrary(provider: any): Web3Provider {\n  const library = new Web3Provider(\n    provider,\n    typeof provider.chainId === 'number'\n      ? provider.chainId\n      : typeof provider.chainId === 'string'\n      ? parseInt(provider.chainId)\n      : 'any'\n  )\n  library.pollingInterval = ms`15s`\n\n  return library\n}\n\nexport function getErrorMessage(error: Error) {\n  if (error instanceof NoEthereumProviderError) {\n    return 'No Ethereum browser extension detected, install MetaMask on desktop or visit from a dApp browser on mobile.'\n  } else if (error instanceof UnsupportedChainIdError) {\n    return 'You\\'re connected to an unsupported network.'\n  } else if (\n    error instanceof UserRejectedRequestErrorInjected ||\n    error instanceof UserRejectedRequestErrorWalletConnect\n  ) {\n    return 'Please authorize this website to access your Ethereum account.'\n  } else {\n    console.error(error)\n    return 'An unknown error occurred. Check the console for more details.'\n  }\n}\n\nexport function transactionChecker(web3: any, address: string) {\n  const account = address.toLowerCase()\n\n  const subscription = web3.eth.subscribe('pendingTransactions', (err: any, res: any) => {\n    if (err) {\n      console.error(err)\n    }\n  })\n\n  return function watchTransactions() {\n    console.log('Watch Transactions...')\n    subscription.on('data', (txHash: any) => {\n      setTimeout(async () => {\n        try {\n          let tx = await web3.eth.getTransaction(txHash)\n          if (tx.to && tx.to.toLowerCase() === account) {\n            const value = web3.utils.fromWei(tx.value, 'ether')\n            if (value > 0) {\n              console.log('watchTransactions value:', value)\n            }\n          }\n        } catch (err) {\n          console.error(err)\n        }\n      }, 60 * 1000)\n    })\n  }\n}\n\n// returns the checksummed address if the address is valid, otherwise returns false\nexport function isAddress(value: any): string | false {\n  try {\n    return getAddress(value)\n  } catch {\n    return false\n  }\n}\n\nconst ETHERSCAN_PREFIXES: { [key: number]: string } = {\n  1: '',\n  5: 'goerli.',\n}\n\nexport function getEtherscanLink(\n  chainId: ChainId,\n  data: string,\n  type: 'transaction' | 'token' | 'address' | 'block'\n): string {\n  const prefix = `https://${ETHERSCAN_PREFIXES[chainId] || ETHERSCAN_PREFIXES[1]}etherscan.io`\n\n  switch (type) {\n    case 'transaction': {\n      return `${prefix}/tx/${data}`\n    }\n    case 'token': {\n      return `${prefix}/token/${data}`\n    }\n    case 'block': {\n      return `${prefix}/block/${data}`\n    }\n    case 'address':\n    default: {\n      return `${prefix}/address/${data}`\n    }\n  }\n}\n\n// shorten the checksummed version of the input address to have 0x + 4 characters at start and end\nexport function shortenAddress(address: string, chars = 4): string {\n  const parsed = isAddress(address)\n  if (!parsed) {\n    throw Error(`Invalid 'address' parameter '${address}'.`)\n  }\n  return `${parsed.substring(0, chars + 2)}...${parsed.substring(42 - chars)}`\n}\n\n// add 10%\nexport function calculateGasMargin(value: BigNumber): BigNumber {\n  return value.mul(BigNumber.from(10000).add(BigNumber.from(1000))).div(BigNumber.from(10000))\n}\n\n// account is not optional\nexport function getSigner(library: Web3Provider, account: string): JsonRpcSigner {\n  return library.getSigner(account).connectUnchecked()\n}\n\n// account is optional\nexport function getProviderOrSigner(library: Web3Provider, account?: string): Web3Provider | JsonRpcSigner {\n  return account ? getSigner(library, account) : library\n}\n\n// account is optional\nexport function getContract(address: string, ABI: any, library: Web3Provider, account?: string): Contract {\n  if (!isAddress(address) || address === AddressZero) {\n    throw Error(`Invalid 'address' parameter '${address}'.`)\n  }\n\n  return new Contract(address, ABI, getProviderOrSigner(library, account) as any)\n}\n\nexport function escapeRegExp(string: string): string {\n  return string.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&') // $& means the whole matched string\n}\n\nexport async function isContract(web3: any, address: string) {\n  const code = await web3.eth.getCode(address)\n  return code && code.length > 2\n}\n\nexport function getShortAddr(address: string) {\n    if (!address || address === undefined || address === null || address.trim() === '') {\n        console.log('getShortAddr got empty!')\n        return undefined\n    }\n    const convertAddr = address.substr(0, 6) + '...' + address.substr(address.length - 4)\n    return convertAddr\n}\n","import { debounce } from 'lodash'\nimport React, { useEffect } from 'react'\nimport { UserStorage } from 'storage'\n\nimport { useCheckAccStatus, } from 'stores/account/hook'\n\nenum WindowEvent {\n  Click = 'click',\n  Scroll = 'scroll',\n  Mouseover = 'mouseover',\n}\n\nconst events = [WindowEvent.Click, WindowEvent.Scroll]\n\nconst forceReset = debounce(() => { UserStorage.checkTimeout(true) }, 100)\n\nexport const GlobalProvider = ({ children }: { children: React.ReactNode }) => {\n\n  useCheckAccStatus()\n\n  useEffect(() => {\n\n    events.forEach((event: string) => {\n      document.addEventListener(event, forceReset)\n    })\n\n    return () => {\n\n      events.forEach((event: string) => {\n        document.removeEventListener(event, forceReset)\n      })\n    }\n\n  }, [])\n\n  return (\n    <React.Fragment>\n      { children}\n    </React.Fragment>\n  )\n\n}\n","import React, { useState, useEffect } from 'react'\nimport styled from '@emotion/styled/macro'\nimport { useTranslation } from 'react-i18next'\n\nimport { useWeb3React } from '@web3-react/core'\n\nimport { network } from 'networks/web3_connectors'\n\nimport { useEagerConnect, useInactiveListener } from 'hooks/web3/useWeb3'\nimport { reset, setAccountStatus, setConnectName } from 'stores/account/reducer'\n\nimport { ChainId, ConnectorNames, NetworkContextName } from 'loopring-sdk'\n\n// import Loader from 'components/modals/Loader'\nimport { useDispatch } from 'react-redux'\nimport { AccountStatus } from 'state_machine/account_machine_spec'\nimport { ConnectorEvent } from '@web3-react/types'\nimport { myLog } from 'utils/log_tools'\n\nconst MessageWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  height: 20rem;\n`\n\nconst Message = styled.h2`\n  color: ${({ theme }) => theme.colorBase.error};\n`\n\nexport function Web3ReactManager({ children }: { children: JSX.Element }) {\n  const { t } = useTranslation()\n  const { active } = useWeb3React()\n  const { active: networkActive, error: networkError, activate: activateNetwork } = useWeb3React(NetworkContextName)\n\n  // try to eagerly connect to an injected provider, if it exists and has granted access already\n  const triedEager = useEagerConnect()\n\n  // after eagerly trying injected, if the network connect ever isn't active or in an error state, activate itd\n  useEffect(() => {\n    if (triedEager && !networkActive && !networkError && !active) {\n      myLog('-------------------->>>>>>>')\n      activateNetwork(network)\n    } else {\n      myLog(triedEager, !networkActive, !networkError, !active)\n    }\n  }, [triedEager, networkActive, networkError, activateNetwork, active])\n\n  // when there's no account connected, react to logins (broadly speaking) on the injected provider, if it exists\n  \n  const dispatch = useDispatch()\n\n  const onReConnectInjected = () => {\n    myLog('1111 ------------> onReConnectInjected')\n    dispatch(reset(undefined))\n  }\n  \n  useInactiveListener(onReConnectInjected, !triedEager)\n\n  // handle delayed loader state\n  const [showLoader, setShowLoader] = useState(false)\n  useEffect(() => {\n    const timeout = setTimeout(() => {\n      setShowLoader(true)\n    }, 600)\n\n    return () => {\n      clearTimeout(timeout)\n    }\n  }, [])\n\n  // on page load, do nothing until we've tried to connect to the injected connector\n  if (!triedEager) {\n    return null\n  }\n\n  // if the account context isn't active, and there's an error on the network context, it's an irrecoverable error\n  if (!active && networkError) {\n    return (\n      <MessageWrapper>\n        <Message>{t('unknownError')}</Message>\n      </MessageWrapper>\n    )\n  }\n\n  // if neither context is active, spin\n  if (!active && !networkActive) {\n    return showLoader ? (\n      <MessageWrapper>\n        {/*<Loader />*/}\n      </MessageWrapper>\n    ) : null\n  }\n\n  return children\n}\n","import React from 'react'\n\nexport const DevWrapper = ({ children }: { children: React.ReactNode }) => {\n\n  return (\n    <React.Fragment>\n      {\n        process.env.NODE_ENV !== 'production' ? (\n          <>\n          {children}\n          </>\n        ) : null\n      }\n    </React.Fragment>\n  )\n\n}\n\n","import { Subject } from 'rxjs';\n// import { TradeFloat } from '@loopring-web/common-resources';\nimport { LoopringMap } from 'loopring-sdk/dist/defs/loopring_defs';\nimport { TickerData } from 'loopring-sdk';\nimport { makeTickerMap } from '../hooks/help';\nimport { TickerMap } from '../stores/ticker';\n\nconst subject = new Subject<{ tickerMap: TickerMap<{ [ key: string ]: any }> }>();\n\n// export type TickerMap<R> = {\n//     [key in keyof R]:TradeFloat\n// }\n// <R extends {[key:string]:any}>\n  //<R>\nexport const tickerService = {\n    sendTicker: (_tickerMap:LoopringMap<TickerData>) => {\n       const tickerMap:TickerMap<{[key:string]:any}> = makeTickerMap({tickerMap:_tickerMap})\n       subject.next({ tickerMap })\n    },\n    // clearMessages: () => subject.next(),\n    onSocket: () => subject.asObservable()\n};","export enum STATUS {\n    UNSET='UNSET',\n    PENDING='PENDING',\n    ERROR='ERROR',   // success failed timeout is Done\n    DONE='DONE',   // success failed timeout is Done\n}\n"],"sourceRoot":""}