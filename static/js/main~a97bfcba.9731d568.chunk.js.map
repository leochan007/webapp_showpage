{"version":3,"sources":["pages/LiquidityPage/PoolsPanel/hook.ts","hook.ts","defs/common_defs.ts","hooks/modal/useModals.ts","utils/hook_tools.ts","hooks/common/useCommon.ts","hooks/exchange/useExchangeAPI.ts","layouts/header/hook.tsx","pages/AccountPage/index.tsx","layouts/header/index.tsx","pages/QuotePage/hook.ts","pages/styled.ts","pages/QuotePage/index.tsx","pages/SwapPage/panel/BasicInfoPanel/hook.tsx","pages/SwapPage/panel/BasicInfoPanel/index.tsx","pages/SwapPage/panel/TradePanel/index.tsx","pages/SwapPage/index.tsx","pages/SwapPage/hook.ts","hooks/exchange/useWebsocketApi.ts","hooks/exchange/useWsAPI.ts","pages/DebugPage/index.tsx","pages/Layer2Page/TxPanel/index.tsx","pages/Layer2Page/AssetPanel/index.tsx","pages/Layer2Page/TradePanel/index.tsx","pages/Layer2Page/AmmPanel/index.tsx","pages/Layer2Page/OrderPanel/index.tsx","pages/SettingPage/SettingPanel.tsx","pages/Layer2Page/index.tsx","pages/LiquidityPage/PoolsPanel/index.tsx","pages/LiquidityPage/AmmPanel/index.tsx","pages/LiquidityPage/AmmPanel/hooks.ts","pages/LiquidityPage/CoinPairPanel/hooks.ts","pages/LiquidityPage/CoinPairPanel/index.tsx","pages/LiquidityPage/AmmMining/index.tsx","pages/LiquidityPage/AmmMining/hook.ts","pages/LiquidityPage/MyLiquidity/index.tsx","pages/LiquidityPage/MyLiquidity/hook.ts","pages/LiquidityPage/index.tsx","pages/LiquidityPage/hook.ts","routers/index.tsx","hooks/common/useCustomDCEffect.ts","defs/swap_defs.ts","stores/account/reducer.ts","stores/token/hook.ts","defs/web3_defs.ts","stores/account/hook.ts","state_machine/machine_builder.ts","stores/Amm/AmmMap/hook.ts","stores/trading/hook.ts","stores/walletLayer1/hook.ts","stores/walletLayer2/hook.ts","networks/web3_connectors.ts","index.tsx","stores/Amm/AmmMap/reducer.ts","stores/socket/reducer.ts","stores/trading/reducer.ts","storage/index.ts","utils/obj_tools.ts","stores/ticker/reducer.ts","hooks/web3/useWeb3.ts","stores/userRewards/hook.ts","stores/system/reducer.ts","stores/system/interface.ts","stores/walletLayer1/reducer.ts","stores/walletLayer2/reducer.ts","stores/userRewards/reducer.ts","stores/Amm/AmmActivityMap/reducer.ts","stores/token/reducer.ts","hooks/help/makeUIAmmActivityMap.ts","stores/system/hook.ts","hooks/help/marketTable.ts","stores/apis/api.ts","utils/swap_calc_utils.ts","stores/ticker/hook.ts","stores/Amm/AmmActivityMap/hook.ts","stores/socket/hook.ts","state_machine/account_machine_spec.ts","hooks/help/ammPairDetail.ts","hooks/help/coinPairInit.ts","hooks/help/connectStatusCallback.ts","hooks/help/makeCache.ts","hooks/help/makeMyPoolDetail.ts","hooks/help/makeTickView.ts","hooks/help/pairDetail.ts","hooks/help/makeWallet.ts","stores/global/actions.ts","stores/transactions/reducer.ts","stores/Amm/AmmTrades/reducer.ts","stores/Amm/AmmActivityMap/saga.ts","stores/Amm/AmmMap/saga.ts","stores/Amm/AmmTrades/saga.ts","stores/Amm/index.ts","stores/token/saga.ts","stores/ticker/saga.ts","stores/system/saga.ts","stores/walletLayer1/saga.ts","stores/walletLayer2/saga.ts","stores/userRewards/saga.ts","stores/socket/saga.ts","stores/rootSaga.ts","stores/index.ts","utils/web3_tools.ts","provider/global/index.tsx","provider/web3ReactManager/index.tsx","provider/dev-wrapper/index.tsx","services/tickerService.ts","stores/constant.ts","services/socketUtil.ts","pages/ErrorPage/index.tsx","utils/dt_tools.ts","hooks/help/volumeToCount.ts","hooks/exchange/useApi.ts","services/ammPoolService.ts"],"names":["useAmmMapUI","pageSize","React","useState","rawData","setRawData","page","setPage","timestamp","setTimestamp","coinMap","useTokenMap","useAmmMap","ammMap","ammMapStatus","status","ammMapStatusUnset","statusUnset","useTicker","tickerMap","tickerStatus","tickerStatusUnset","updateTickers","useSocket","updateRawData","useCallback","_ammMap","deepClone","tickerMapKey","tradeFloat","Object","keys","map","ammKey","error","CustomError","ErrorMap","NO_TOKEN_MAP","options","updateTickerLoop","_keys","clearTimeout","setTimeout","setImmediate","updateTickersUI","_page","length","i","push","useEffect","console","log","STATUS","PENDING","DONE","useInit","state","setState","systemState","useSystem","tokenState","ammMapState","accountState","useAccount","walletLayer1State","useWalletLayer1","useCustomDCEffect","a","handleChainChanged","chainId","updateSystem","window","location","reload","handleAccountChanged","accounts","detectEthereumProvider","provider","Number","request","method","on","ChainId","MAINNET","accountId","Theme","LangType","SystemStatus","MODAL_TYPE","useModals","dispatch","useDispatch","t","useTranslation","ShowDeposit","isShow","isNoAccount","store","getState","account","AccountStatus","NOACCOUNT","action","props","title","description","setShowDeposit","ShowTransfer","setShowTransfer","ShowWithdraw","setShowWithdraw","ShowResetAccount","setShowResetAccount","PromiseJob","fetchPromise","setFunc","field","prefix","mounted","handler","then","data","catch","reason","cleanUp","usePromiseJob","undefined","dependencies","useGetExchangeInfo","exchangeInfo","setExchangeInfo","api","useExchangeAPI","getExchangeInfo","useChargeFeeList","tokenSymbol","requestType","tokenMap","amount","useUserAPI","apiKey","chargeFeeList","setChargeFeeList","tokenInfo","toBig","times","decimals","toFixed","getOffchainFeeAmt","response","raw_data","fees","forEach","item","index","feeRaw","fee","token","sdk","div","BIG10","pow","toNumber","belong","__raw__","dumpError400","useModalProps","useWeb3Account","isConnected","connector","eddsaKey","walletLayer2State","marketArray","marketCoins","marketMap","useWalletLayer2","walletMap1","setWalletMap1","walletMap2","setWalletMap2","walletLayer2","walletMap","makeWallet","walletLayer1","tradeValue","balance","depositValue","setDepositValue","deposit","amt","LoopringAPI","exchangeAPI","exchangeAddress","depositAddress","getProvider","web3","Web3","sendByMetaMask","connectName","ConnectorNames","Injected","gasPrice","system","gasLimit","parseInt","gasAmounts","accAddr","nonce","address","response2","depositProps","tradeData","depositBtnStatus","TradeBtnStatus","AVAILABLE","onDepositClick","toString","handlePanelEvent","switchType","Promise","res","setTokenSymbol","transferValue","setTransferValue","transferTokenSymbol","setTransferTokenSymbol","transferFeeList","OffchainFeeReqType","TRANSFER","feeInfo","setFeeInfo","transfer","userAPI","sellToken","feeToken","transferVol","sellTokenId","tokenId","getNextStorageId","storageId","walletType","request2","exchange","payerAddr","payerId","payeeAddr","payeeId","offchainId","volume","maxFee","validUntil","VALID_UNTIL","JSON","stringify","submitInternalTransfer","transferProps","transferBtnStatus","onTransferClick","handleFeeChange","value","chargeFeeToken","chargeFeeTokenList","handleOnAddressChange","handleAddressError","_value","message","withdrawValue","setWithdrawValue","OFFCHAIN_WITHDRAWAL","withdrawType","setWithdrawType","withdrawalFeeList","withdrawFeeInfo","setWithdrawFeeInfo","withdraw","symbol","withdrawToken","owner","to","extraData","minGas","submitOffchainWithdraw","withdrawProps","withdrawBtnStatus","onWithdrawClick","withdrawTypes","WithdrawTypes","handleWithdrawTypeChange","offchainType","WithdrawType","Fast","FAST_OFFCHAIN_WITHDRAWAL","resetValue","setResetValue","resetProps","resetBtnStatus","onResetClick","count","price","ammProps","ammDepositData","coinA","coinB","slippage","ammWithdrawData","ammCalcData","myCoinA","myCoinB","AtoB","coinInfoMap","handleDepositEvent","type","handleWithDrawEvent","onAmmWithdrawClick","onAmmDepositClick","swapProps","tradeCalcData","coinSell","coinBuy","BtoS","StoB","sellCoinInfoMap","buyCoinInfoMap","priceImpact","minimumReceived","onSwapClick","handleSwapPanelEvent","ModalAccountInfo","withTranslation","onClose","open","rest","Modal","aria-labelledby","aria-describedby","style","boxShadow","Box","paddingTop","paddingBottom","display","flexDirection","minWidth","Header","useLocation","i18n","useSettings","setTheme","themeMode","language","setLanguage","useOpenModals","modals","isShowAccountInfo","isShowConnect","setShowConnect","setShowAccountInfo","forceUpdate","useReducer","bool","useUnlock","lock","unlock","connect","useConnect","etherscanUrl","useEtherscan","gatewayList","DefaultGatewayList","handleSelect","WalletConnect","Ledger","Trezor","accountInfoProps","setAccountInfoProps","onNotification","onWalletBtnConnect","acc","UNCONNNECTED","CONNECTED","LOCKED","ACTIVATED","onThemeBtnClick","dark","light","onLangBtnClick","lang","headerToolBarData","ButtonComponentsMap","handleClick","Language","handleChange","UnlockBtn","onClick","className","startIcon","fontSize","event","variant","Typography","marginTop","lockCallback","unLockCallback","LockBtn","addr","getShortAddr","updateHeaderMenuWhenHasAccountInfo","headerMenuData","HeadMenuTabKey","Layer2","HeaderMenuTabStatus","default","addressShort","level","etherscanLink","mainBtn","_event","connectBy","UNACTIVATED","DEPOSITING","DEPOSIT_TO_CONFIREM","ARPROVING","APPROV_TO_CONFIRM","onLock","label","WalletStatus","hidden","noAccount","accountPending","useHeader","disconnect","useDisconnect","onSwitch","openQRCode","setOpenQRCode","copyToastOpen","setCopyToastOpen","closeCopyToast","Snackbar","autoHideDuration","Alert","severity","url","withDrawProps","process","selected","pathname","headerRoot","Toolbar","onCopy","copyToClipBoard","onViewQRCode","onDisconnect","OnePageSize","isNeedCallMore","currentStartIndex","marketArrayLength","currentListLength","pageCurrent","StylePaper","styled","theme","colorBase","background","unit","TableWrapStyled","Grid","TablePaddingX","pLeft","pRight","RowStyled","QuotePage","candlestickList","setCandlestickList","getCandlestick","market","getMixCandlestick","interval","TradingInterval","d1","limit","candlesticks","o","close","timeStamp","prev","sendSocketTopic","socketEnd","recommendMarkets","slice","_marketArrayWithOutRecommend","filter","findIndex","m","tickList","setTickList","recommendations","setRecommendations","setTickerKeys","focusRowFrom","setFocusRowFrom","startIndex","setStartIndex","subject","useMemo","tickerService","onSocket","updateRecommendation","recommendationIndex","ticker","subscription","subscribe","Reflect","ownKeys","key","ele","unsubscribe","from","getTicker","socketSendTicker","array","concat","_recommendationsFloat","_tickList","reduce","match","_item","pair","_recommendations","coinAInfo","coinBInfo","debounceGetTicker","debounce","globalSetup","wait","_startIndex","WsTopicType","onVisibleRowsChange","useQuote","list","simpleName","flex","container","chartData","find","xs","marginY","toggleData","ChartType","Trend","Depth","BasicInfoPanel","tgItemJSXs","tlabel","JSX","getExistedMarket","name","amm","chartType","setChartType","ChartUnit","D1","chartUnit","originData","setOriginData","_e","exchangeApi","tgItemJSXsPriceChart","pre","tGItemData","min15","low","high","quoteVol","getMixDepth","depth","bidsPrices","bids_prices","bidsAmtTotals","bids_amtTotals","asksPrices","asks_prices","asksAmtTotals","asks_amtTotals","useBasicInfo","upColor","justifyContent","alignItems","exclusive","minHeight","maxHeight","height","width","riseColor","handleMove","size","applyProps","id","StyledTabsWrapper","StyledFormControlLabel","FormControlLabel","TradePanel","tradeArray","myTradeArray","isAllTrade","setIsAllTrade","setValue","control","Checkbox","checked","checkedIcon","icon","color","onChange","flag","Tabs","newValue","aria-label","Tab","FixedStyle","SwapPage","useRouteMatch","setTradeData","setTradeCalcData","setTradeArray","setMyTradeArray","setTradeFloat","setPair","ammPoolSnapshot","setAmmPoolSnapshot","swapBtnI18nKey","setSwapBtnI18nKey","output","setOutput","params","resetSwap","sell","buy","getUserTrades","marketTrades","_myTradeArray","makeMarketArray","accountStaticCallBack","bntLabel","swapData","resolve","SwapType","SEll_CLICK","BUY_CLICK","SELL_SELECTED","BUY_SELECTED","EXCHANGE_CLICK","calculateTradeData","_tradeData","fm","_tradeCalcData","input","isAtoB","base","quote","__rawConfig__","parseFloat","throttleSetValue","_","_ammPoolSnapshot","td","coinKey","_tradeFloat","_tradeArray","coinPairInit","apiList","getMarketTrades","pairDetailBlock","all","ammPoolsBalance","tickMap","_td","pairDetailDone","tickerData","makeTickView","TRADE_LITE_SET_PAIR_ERROR","swapBtnClickArray","assign","btnClickArray","fnType","baseToken","quoteToken","orderId","amountS","buyToken","amountBOutSlip","allOrNone","maxFeeBips","fillAmountBOrS","orderType","OrderType","ClassAmm","eddsaSignature","submitOrder","__cache__","makeCache","useSwapPage","marginRight","alignContent","stateArr","useWebsocket","topics","verify","ws","needApiKey","useRef","wsData","setMessage","readyState","setReadyState","trading","useWsAPI","webSocketInit","current","getWsKey","wsApiKey","basePath","wsKey","WebSocket","onopen","onclose","e","onerror","onmessage","closeWebSocket","sendMessage","msg","send","reconnect","useWs","socketData","setSocketData","isLocalPage","setIsLocalPage","document","addEventListener","visibilityState","err","parse","useHandleSocketData","setAccount","ammPool","setAmmPool","order","setOrder","setTicker","op","topic","ammpool","baseAmt","quoteAmt","candlestick","orderBook","trade","Error","useQuotePageWs","markets","setMarkets","getMarkets","useGetMarkets","c","every","getTickerArg","DebugPage","TxPanel","setPageSize","txTableData","setTxTableData","getUserTranferList","userTxns","mappingList","userTransfers","senderAddress","receiverAddress","volumeToCount","feeTokenSymbol","feeAmount","memo","time","txnHash","hash","TransactionStatus","processed","processing","received","failed","tradeType","txType","TransactionTradeTypes","offsetHeight","Math","floor","ref","pagination","showFilter","StyledChartWrapper","StyledBtnGroupWrapper","AssetPanel","chartPeriod","setChartPeriod","setChartData","assetsKeyList","assetsDetailList","values","assetsList","detail","getUserTotalAssets","walletAPI","getUserAssets","wallet","assetType","AssetType","DEX","userAssets","createdAt","updateWalletLayer1","onShowDeposit","handleChartPeriodChange","faitPrices","tokenPriceList","entries","jointLPTokenValue","split","result","splice","ammToken","join","tokenValue","includes","amountDollar","doughnutData","tokenPriceUSDT","total","formattedDoughnutData","AssetTitleProps","assetInfo","totalAsset","next","priceTag","PriceTag","Dollar","onShowTransfer","onShowWithdraw","assetsRawData","TokenType","lp","single","String","EmptyValueTag","available","locked","smallBalance","Paper","component","showFiliter","originalData","setOriginalData","userTrades","marketList","side","tradeTime","AmmPanel","getTokenName","getAmmpoolList","ammpoolAPI","getUserAmmPoolTxs","userAmmPoolTxs","AmmTxType","JOIN","AmmSideTypes","Join","Exit","poolTokens","actualAmount","lpTokenAmount","lpToken","updatedAt","OrderPanel","orderOriginalData","setOrderOriginalData","getOrders","userOrders","Array","isArray","orders","volumes","baseAmount","quoteAmount","baseFilled","quoteFilled","TradeTypes","Buy","Sell","average","filledAmount","filledPrice","validity","start","detailTable","StyledPaper","StyledSwitch","Switch","textPrimary","border","success","backgroundColor","opacity","BtnCurrency","currency","Currency","dollar","_handleChange","target","IconComponent","DropDownIcon","labelId","autoWidth","yen","StyledDivider","Divider","SettingPanel","focus","useTheme","setUpColor","setCurrency","direction","flexWrap","paddingLeft","marginBottom","paddingY","paddingX","Trans","i18nKey","alignSelf","Button","passDay","changeLanguage","textTransform","UpColor","green","up","down","red","subMenu","subMenuLayer2","BoxStyle","defaultFrame","c_key","SubMenuList","withRef","BasicSubMenuList","Layer2Page","accStatus","PoolsPanel","ammActivityMap","handlePageChange","AmmPanelView","ammType","snapShotData","setAmmCalcData","setAmmDepositData","setAmmWithdrawData","joinRequest","setJoinRequest","ammDepositBtnI18nKey","setAmmDepositBtnI18nKey","ammWithdrawBtnI18nKey","setAmmWithdrawBtnI18nKey","initAmmData","_ammCalcData","ammPairInit","AmmPanelType","Deposit","joinFees","setJoinfees","AMM_JOIN","handleJoinAmmPoolEvent","idIndex","marketInfo","ammInfo","request1","poolAddress","getAmmPoolSnapshot","coinA_TV","pooled","coinB_TV","covertVal","ratio","rawVal","makeJoinAmmPoolRequest","joinTokens","precisionForPrice","handleExitAmmPoolEvent","onAmmDepositClickArray","patch","ammName","storageId0","request_1","storageId1","storageIds","joinAmmPool","onAmmWithdrawClickArray","useAmmPanel","isLoading","tabSelected","ammDepositBtnStatus","LOADING","ammWithdrawBtnStatus","makeAmmDetailExtendsActivityMap","ammDetail","ammActivity","BoxStyled","CoinPairPanel","useUserRewardsState","useUserRewards","updateAmmMap","setWalletMap","ammMarketArray","myAmmMarketArray","setMyAmmMarketArray","ammUserRewardMap","setAmmUserRewardMap","setSnapShotData","feeA","feeB","feeDollar","feeYuan","reward","rewardToken","balanceA","balanceB","balanceYuan","balanceDollar","myAmm","setMyAmm","activity","totalRewards","amountYuan","totalLPToken","totalA","totalB","rewardValue","isNew","isActivity","APY","coinPairInfo","setCoinPairInfo","walletLayer2DoIt","_walletMap","getUserAmmTransaction","makeMyAmmMarketArray","_coinPairInfo","_snapShotData","_myAmm","makeMyAmmWithSnapshot","userRewardsMap","useCoinPair","tabIndex","setTabIndex","_handlePageChange","Breadcrumbs","Link","href","spacing","wrap","md","paddingRight","getThousandFormattedNumbers","Yuan","Hidden","mdDown","timeUnit","priceDollar","priceYuan","noWrap","textAlign","textOverflow","moment","duration","format","AmmCardWrap","forwardRef","AmmCard","AmmList","ammActivityViewMap","sm","lg","AmmMiningView","userRewardsMapState","setAmmActivityViewMap","ammActivityPastViewMap","setAmmActivityPastViewMap","makeUIAmmActivityMap","ammPoolActivityStatus","AmmPoolActivityStatus","NotStarted","InProgress","EndOfGame","useAmmMiningUI","StyleWrapper","MyLiquidity","summaryReward","setSummaryReward","myPoolRow","setMyPoolRow","makeMyPoolRow","walletKey","test","rowData","replace","marketKey","makeMyPoolRowWithPoolState","_myPoolRow","makeSummaryMyAmm","useOverview","padding","margin","rewardDollar","rewardYuan","handleDeposit","row","handleWithdraw","subMenuLiquidity","LiquidityPage","AmmActivityMapState","useAmmActivityMap","updateUserRewards","setAmmActivityMap","useAmmPool","matchPair","RouterView","Container","maxWidth","exact","path","deps","useDeepCompareEffect","OrderHandling","BIG0","BIG1","BIG10K","MULTI_FACTOR","initialState","defaultAccId","REACT_APP_TEST_ACCOUND_ID","UserStorage","getAccountId","defaultApiKey","REACT_APP_TEST_API_KEY","getApikey","defaultOwner","REACT_APP_TEST_OWNER","getAccount","defaultEddsaKey","REACT_APP_TEST_EDDSA_KEY","getEddsakey","publicKey","isContractAddress","Unknown","connectNameTemp","accountSlice","createSlice","reducers","reset","initState","setAccAddr","payload","setAccountInfo","setApikey","setAccountStatus","setEddsaKey","setConnectName","setConnectNameTemp","setIsContractAddress","actions","useSelector","tokenMapSlice","updateTokenMap","getTokenMap","connectorsByName","injected","Network","network","walletconnect","WalletLink","walletlink","ledger","trezor","Authereum","authereum","useActiveWeb3React","library","active","voca","isBlank","isActivated","useStateMachine","spec","machine","AccountMachineSpec","currentState","stateTransitions","states","nextState","sendEvent","activate","activatingConnector","setActivatingConnector","item_name","isSwitch","newConnector","StatusChangeEvent","Reset","Connecting","deactivate","userApi","tradingInfo","useGetTradingInfo","resetLayer2","Lock","sk","apikey","sign_tools","toHex","keyPair","secretKey","getUserApiKey","Unlock","resultInfo","code","x","formatedPx","y","formatedPy","updateAccount","updateAccountResponse","sleep","useCheckAccStatus","web3Account","lv1Acc","prevChainId","usePrevious","prevWeb3Account","resetLayer1","accInfo","HasPubkey","ErrorResponse","FinishDeposit","checkTimeout","setInterval","isTimeOut","clearInterval","setHandler","updateWalletLayer2","getHandler","checkStatus","ammMapSlice","getAmmMap","getChainId","useUpdateChainId","setChainId","GORLI","useUpdateExchangeMarkets","getMixMarkets","useUpdateExchangeInfo","useUpdateAmmPoolConf","useAmmpoolAPI","getAmmPoolConf","ammPoolConf","setAmmPoolConf","useUpdateAmmPoolStats","getAmmPoolStats","ammPoolStats","setAmmPoolStats","useUpdateAmmActivityRules","getAmmPoolActivityRules","ammActivityRules","setAmmActivityRules","activityRules","useUpdateTokens","getTokens","tokens","setTokens","walletLayer1Slice","walletLayer2Slice","getWalletLayer2","POLLING_INTERVAL","RPC_URLS","InjectedConnector","supportedChainIds","NetworkConnector","urls","1","5","defaultChainId","WalletConnectConnector","rpc","bridge","qrcode","pollingInterval","WalletLinkConnector","appName","LedgerConnector","TrezorConnector","manifestEmail","manifestAppUrl","AuthereumConnector","Web3ProviderNetwork","createWeb3ReactRoot","NetworkContextName","providers","LocalizationProvider","dateAdapter","MomentUtils","I18nextProvider","MuThemeProvider","getTheme","ThemeProvider","Provider","ReactDOM","render","getLibrary","App","getElementById","__timer__","errorMessage","getAmmMapStatus","ERROR","updateRealTimeAmmMap","UNSET","socketSlice","socket","getSocketStatus","refreshRate","refreshRateSlow","tradingSlice","changeTradingInterval","setTickerMap","setMarketTrades","CONSTANTS","rawHandler","sessionStorage","getItem","Handler","setItem","removeItem","dateTimeStr","localStorage","ActiveTime","now","Date","getTime","tmpDt","SESSION_TIMEOUT_SECONDS","clear","rawId","AccountId","Account","Apikey","Eddsakey","eddsakey","orderHash","AmmOrder","HardwareAddresses","toLowerCase","constructor","hasOwnProperty","text","execCommand","textarea","createElement","body","appendChild","select","removeChild","navigator","clipboard","writeText","clipboardData","setData","tickerMapSlice","getTickers","getTickerStatus","context","useWeb3React","contextNetwork","setEtherscanUrl","useEagerConnect","tried","setTried","isAuthorized","useInactiveListener","onReConnectInjected","ethereum","reConnectInjected","handleAccountsChanged","removeListener","userRewardsMapSlice","getUserRewards","env","ENV","PROD","baseURL","socketURL","forex","systemSlice","updateSocketURL","updateRealTimeObj","getSystemStatus","setTopics","NETWORKEXTEND","getWalletLayer1Status","getWalletLayer2Status","getUserRewardsStatus","ammActivityMapSlice","getAmmActivityMap","getAmmActivityMapStatus","addressIndex","getTokenMapStatus","getTokenPairMap","myReward","ammPoolActivityRule","awardRules","myRewards","currentRewards","rangeFrom","rangeTo","isPass","makeAsCard","_ammInfo","itemArray","ammUserReward","getOneRewardInfo","plus","rewardToken2","reward2","volumeToCountAsBigNumber","feeRewards","BigNumber","makeMyAmmWithStat","getBaseQuote","settings","Side","marketTransaction","AmmTradeType","add","remove","totalDollar","totalYuan","amountA","amountB","txStatus","UserAPI","ExchangeAPI","AmmpoolAPI","wsAPI","InitApi","WalletAPI","WsAPI","getIcon","getIconByTokenInfo","utils","getAddress","getToken","fromWEI","valueInWEI","precision","ceil","precisionToFixed","tickerKeys","updateTicker","tickerKey","updateAmmActivityMap","HasNoPubkey","IsSmartWallet","ApproveSubmit","ApproveConfirmed","isNaN","baseVol","coinACount","coinBCount","tradePairs","fn","args","UNKNOWN","call","DEFAULT","customSlippage","setSlippage","tick","floatTag","FloatTag","none","increase","decrease","change","makeTickerMap","base_token_volume","__rawTicker__","reject","getMixTicker","NO_SDK","stob","poolVolumn","poolBaseTokenVol","quoteBaseTokenVol","NO_SUPPORT_PAIR","pending","countBig","minus","updateVersion","createAction","transactionsSlice","addTransaction","approval","summary","claim","addedTime","clearAllTransactions","checkedTransaction","blockNumber","tx","lastCheckedBlockNumber","max","finalizeTransaction","receipt","confirmedTime","ammTradesSlice","ammTrades","getAmmTrades","getAmmTradesStatus","getPostsSaga","ammActivityMapSaga","getAmmActivityMapApi","groupByRuleTypeAndStatus","put","takeLatest","updateRealTimeSaga","ammMapInitSaga","ammMapRealTimeSaga","setAmmState","ammPoolState","liquidityUSD","lpLiquidity","liquidity","rewards","rewardValue2","apyBips","getAmmMapApi","ammpools","dataItem","ammMapSaga","fork","ammTradesSaga","getAmmTradesApi","priceValue","priceToken","posts","ammReducer","combineReducers","reducer","ammForks","tokenInitSaga","getTokenMapApi","tokensMap","pairs","marketArr","tokenArr","startsWith","company","tokenList","tokenSaga","tickerSaga","tickersSaga","getTickersApi","tickers","NO_TOKEN_KEY_LIST","tickerForks","getUpdateSystem","systemSaga","initConfig","tokenSymbolMap","take","delay","getSystemsApi","hostname","DEV","UAT","NONETWORK","NO_NETWORK_ERROR","getFiatPrice","legal","fiatPrices","getGasPrice","systemForks","walletLayer1Saga","getWalletLayer1Balance","getEthBalances","ethBalance","getTokenBalances","tokenBalances","walletLayer1Fork","walletLayer2Saga","getWalletLayer2Balance","getUserBalances","userBalances","walletLayer2Fork","userRewardsSaga","getUserRewardsApi","getAmmPoolUserRewards","userRewardsForks","closeSocket","socketEndSaga","socketSendMessageSaga","socketClose","socketSendMessage","socketForks","mySaga","sagaMiddleware","createSagaMiddleware","settingsSlice","transactions","transactionlice","modalsSlice","PERSISTED_KEYS","configureStore","middleware","getDefaultMiddleware","thunk","serializableCheck","save","devTools","enhancers","reduxBatch","preloadedState","load","run","Web3Provider","trim","substr","WindowEvent","events","Click","Scroll","forceReset","GlobalProvider","children","removeEventListener","Fragment","MessageWrapper","Message","Web3ReactManager","networkActive","networkError","activateNetwork","triedEager","showLoader","setShowLoader","timeout","DevWrapper","Subject","sendTicker","_tickerMap","asObservable","SocketEventType","pingPong","global","looperingSocket","socketEventMap","pingpong","isConnectSocket","globalThis","loopringSocket","reolve","makeTopics","unsubscribeAll","clearInitTimer","init","__wsTimer__","timer","socketConnect","baseSocket","_topic","makeMessageArray","SOCKET_ERROR","eventType","makeReceiveMessageCallback","getAccountArg","getOrderArg","orderbook","getOrderBookArg","getTradeArg","getCandlestickArg","getAmmpoolArg","SocketEventMap","bid","ask","quote_token_volume","base_fee_amt","quote_fee_amt","poolName","risky","ammPoolService","sendAmmPool","StyleBox","ErrorPage","messageKey","position","left","top","email","CONTACT_US_EMAIL","getContactInfo","preventDefault","volumn","useApi","ApiClass","DEFAULT_TIMEOUT","genApi","ammPoolMap"],"mappings":"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","file":"static/js/main~a97bfcba.9731d568.chunk.js","sourcesContent":["import React from 'react';\nimport { useAmmMap } from '../../../stores/Amm/AmmMap';\nimport { AmmDetail, CustomError, ErrorMap, } from '@loopring-web/component-lib/src/static-resource';\nimport { deepClone } from '../../../utils/obj_tools';\nimport { STATUS } from '../../../stores/constant';\nimport { useTokenMap } from '../../../stores/token';\nimport { useSocket } from '../../../stores/socket';\nimport { useTicker } from '../../../stores/ticker';\n// import { tickerService } from '../../../services/tickerService';\n\nexport function useAmmMapUI<R extends { [ key: string ]: any }, I extends { [ key: string ]: any }>({pageSize}: { pageSize: number }) {\n    const [rawData, setRawData] = React.useState<Array<AmmDetail<any>> | []>([]);\n    const [page, setPage] = React.useState<number>(1);\n    // const [keys, setKeys] = React.useState<string[]>([]);\n    const [timestamp, setTimestamp ] = React.useState<NodeJS.Timer|-1>(-1)\n    const {coinMap} = useTokenMap();\n    const {\n        ammMap,\n        status: ammMapStatus,\n        // errorMessage: errorAmmMap,\n        statusUnset: ammMapStatusUnset,\n        // updateAmmMap,\n    } = useAmmMap();\n    const {\n        tickerMap,\n        status: tickerStatus,\n        // errorMessage: errorTickerMap,\n        statusUnset: tickerStatusUnset,\n        updateTickers,\n    } = useTicker();\n    const {\n        status:socketStatus,\n        // errorMessage: errorTickerMap,\n        statusUnset: socketStatusUnset,\n    } = useSocket();\n    const updateRawData = React.useCallback( (tickerMap) => {\n        try {\n            const _ammMap = deepClone(ammMap);\n            for (let tickerMapKey in tickerMap) {\n                if(_ammMap['AMM-' + tickerMapKey ]){\n                    _ammMap['AMM-' + tickerMapKey ].tradeFloat =  {\n                        ..._ammMap['AMM-' + tickerMapKey ].tradeFloat,\n                        ...tickerMap[ tickerMapKey ],\n                        // APY: _ammMap['AMM-' + tickerMapKey ].APY\n                    }\n\n                }\n            }\n            setRawData(Object.keys(_ammMap).map((ammKey: string) => {\n                if (coinMap) {\n                    _ammMap[ ammKey ][ 'coinAInfo' ] = coinMap[ _ammMap[ ammKey ][ 'coinA' ] ];\n                    _ammMap[ ammKey ][ 'coinBInfo' ] = coinMap[ _ammMap[ ammKey ][ 'coinB' ] ];\n                }\n                return  _ammMap[ ammKey ];\n            }) )\n        } catch (error) {\n            throw new CustomError({...ErrorMap.NO_TOKEN_MAP, options: error})\n        }\n\n    } ,[ammMap]);\n    const updateTickerLoop =  React.useCallback((_keys?:string[])=>{\n\n        if(timestamp !== -1){\n            clearTimeout(timestamp)\n        }\n\n        setTimestamp(setTimeout(()=>{\n            updateTickerLoop(_keys);\n        },60000))\n        \n        //console.log(_keys)\n        setImmediate(updateTickers,_keys)\n    },[])\n\n    const updateTickersUI = React.useCallback((_page) => {\n        setPage(_page);\n        if (ammMap && Object.keys(ammMap).length > 0) {\n            const _keys = []\n            for (let i = (page - 1) * pageSize; i < Object.keys(ammMap).length && i < (page - 1) * pageSize + pageSize; i++) {\n                _keys.push(Object.keys(ammMap)[ i ]);\n            }\n            \n            // setKeys(_keys);\n            updateTickerLoop(_keys);\n            // try{\n            //    // socketStart({})\n            // }catch (error){\n            //\n            // }\n\n\n        }\n    }, [ammMap, pageSize]);\n    React.useEffect(() => {\n        if(ammMap && Object.keys(ammMap).length !== 0) {\n            updateTickersUI(page)\n        }\n    }, []);\n\n    React.useEffect(() => {\n        switch (tickerStatus) {\n            case \"ERROR\":\n                console.log(\"ERROR\", 'get ticker error,ui');\n                tickerStatusUnset()\n                break;\n            case \"PENDING\":\n                break;\n            case \"DONE\":\n                tickerStatusUnset();\n                \n                updateRawData(tickerMap)\n                break;\n            default:\n                break;\n        }\n    }, [tickerStatus, tickerStatusUnset]);\n\n    React.useEffect(() => {\n        switch (ammMapStatus) {\n            case \"ERROR\":\n                console.log(\"ERROR\", 'get ammMap error,ui');\n                ammMapStatusUnset();\n                break;\n            case STATUS.PENDING:\n                console.log(\"PENDING\", 'get ammMap error,ui');\n                break;\n            case STATUS.DONE:\n                ammMapStatusUnset();\n                updateTickersUI(1)\n                break;\n            default :\n                break;\n        }\n    }, [ammMapStatus, ammMapStatusUnset, updateTickersUI]);\n\n\n\n    return {\n        page,\n        rawData,\n        updateTickersUI,\n    }\n}\n\n","import React  from 'react';\nimport detectEthereumProvider from '@metamask/detect-provider';\nimport { useCustomDCEffect } from 'hooks/common/useCustomDCEffect';\nimport { useSystem } from './stores/system';\nimport { ChainId } from 'loopring-sdk';\nimport { useAmmMap } from './stores/Amm/AmmMap';\nimport { STATUS } from './stores/constant';\nimport { useTokenMap } from './stores/token';\nimport { useWalletLayer1 } from './stores/walletLayer1';\nimport { useAccount } from './stores/account/hook';\n\n\n/**\n * @description call it when bootstrap the page or change the network\n */\nexport function useInit(){\n    const [state,setState] = React.useState<keyof typeof STATUS>('PENDING')\n    const systemState = useSystem();\n    const tokenState = useTokenMap();\n    const ammMapState = useAmmMap();\n    const accountState  = useAccount();\n    const walletLayer1State  =  useWalletLayer1()\n    //store.getState().account\n    // const socketState =   useSocket();\n\n    useCustomDCEffect(async() => {\n\n        const handleChainChanged = (chainId: any) => {\n    \n            // const network = chainId == ChainId.GORLI ? NETWORK.Goerli : NETWORK.MAIN\n             console.log('handleChainChanged chainId: ', chainId)\n             systemState.updateSystem({ chainId })\n             window.location.reload();\n        }\n\n        const handleAccountChanged = (accounts: Array<string>) => {\n            console.log('handleAccountChanged accounts: ', accounts)\n            window.location.reload()\n        }\n\n        const provider: any = await detectEthereumProvider()\n        if (provider) {\n            const chainId = Number(await provider.request({ method: 'eth_chainId' }))\n            const accounts = await provider.request({ method: 'eth_requestAccounts' })\n\n            console.log('accountsaccounts:', accounts)\n\n            provider.on('accountsChanged', handleAccountChanged)\n            provider.on('chainChanged', ()=>{handleChainChanged(chainId)} )\n            // @ts-ignore\n            systemState.updateSystem({ chainId  })\n           //handleChainChanged(chainId)\n            \n        } else {\n            systemState.updateSystem({chainId:ChainId.MAINNET})\n            console.log('web3 is not found')\n        }\n\n    }, [])\n\n    React.useEffect(() => {\n        switch (systemState.status) {\n            case \"ERROR\":\n                systemState.statusUnset();\n                setState('ERROR')\n                //TODO show error at button page show error  some retry dispat again\n                break;\n            case \"DONE\":\n                systemState.statusUnset();\n                //TODO do some static information update\n                //tokenState.updateTokenMap();\n                break;\n            default:\n                break;\n\n        }\n    },[\n        systemState,\n        // systemState.status,\n        // systemState.statusUnset,\n        //tokenState.updateTokenMap\n    ]);\n    React.useEffect(() => {\n        if(ammMapState.status ===\"ERROR\" || tokenState.status === \"ERROR\"){\n            //TODO: solve error\n            ammMapState.statusUnset();\n            tokenState.statusUnset();\n            setState('ERROR');\n        }else if(ammMapState.status ===\"DONE\" && tokenState.status === \"DONE\"){\n            ammMapState.statusUnset();\n            tokenState.statusUnset();\n            setState('DONE');\n        }\n    },[ammMapState,tokenState,accountState.accountId,walletLayer1State])\n\n    // React.useEffect(()=>{\n    //\n    // },[])\n\n\n\n    return {\n        state,\n    }\n\n}\n","export enum Theme {\n    dark = 'dark',\n    light = 'light',\n}\n\nexport enum LangType {\n    en = 'en_US',\n    cn = 'zh_CN',\n}\n\nexport enum SystemStatus {\n    NORMAL,\n    ERROR,\n    UNKNOWN,\n}\n\nexport enum MODAL_TYPE {\n    UNKNOWN,\n    LOADING,\n    WALLET,\n}\n\nexport const REFRESH_RATE = 1000\n\nexport const REFRESH_RATE_SLOW = 15000\n","import { useCallback } from \"react\";\nimport { useDispatch } from \"react-redux\"\n\nimport {\n    setShowDeposit,\n    setShowResetAccount,\n    setShowTransfer,\n    setShowWithdraw,\n} from '@loopring-web/component-lib'\nimport { useTranslation } from \"react-i18next\";\nimport store from 'stores'\nimport { AccountStatus } from \"state_machine/account_machine_spec\";\n\nexport function useModals() {\n\n    const dispatch = useDispatch()\n\n    const { t } = useTranslation('common')\n\n    const ShowDeposit = useCallback((isShow: boolean)=>{\n        const isNoAccount = store.getState().account.status === AccountStatus.NOACCOUNT\n\n        console.log('isNoAccount: ', isNoAccount, t('depositTitleAndActive'))\n        const action = {\n            isShow,\n            props: {\n                title: isNoAccount ? t('depositTitleAndActive') : t('depositTitle'),\n                description: 'depositAndActiveDescription'\n            }\n        }\n        dispatch(setShowDeposit(action))\n    }, [dispatch, t])\n    const ShowTransfer = useCallback((isShow: boolean)=>dispatch(setShowTransfer({isShow})), [dispatch])\n    const ShowWithdraw = useCallback((isShow: boolean)=>dispatch(setShowWithdraw({isShow})), [dispatch])\n    const ShowResetAccount = useCallback((isShow: boolean)=>dispatch(setShowResetAccount({isShow})), [dispatch])\n\n    return {\n        ShowDeposit,\n        ShowTransfer,\n        ShowWithdraw,\n        ShowResetAccount,\n    }\n}","import { REFRESH_RATE } from \"defs/common_defs\"\n\nexport function PromiseJob(fetchPromise: any, setFunc: any, field?: string, prefix: any = 'PromiseJob') {\n\n    let mounted = true\n\n    const handler = () => {\n        if (fetchPromise()) {\n            fetchPromise().then((data: any) => {\n                if (mounted) {\n                    setFunc(field ? data[field] : data)\n                } else {\n                    console.log(prefix + ' unmounted!')\n                }\n            }).catch((reason: any) => {\n                console.error(reason)\n            })\n        }\n    }\n\n    const cleanUp = () => {\n        mounted = false\n    }\n\n    return {\n        handler,\n        cleanUp,\n    }\n\n}\n\n\nexport function PromiseJobInTimer(fetchPromise: any, setFunc: any, field?: string, prefix: any = 'PromiseJobInTimer', timeout: number = REFRESH_RATE) {\n\n    let mounted = true\n\n    const handler = () => {\n\n        mounted = true\n\n        const fetchFunc = () => {\n            if (fetchPromise()) {\n                fetchPromise().then((data: any) => {\n                    if (mounted) {\n                        setFunc(field ? data[field] : data)\n                    } else {\n                        console.log(prefix + ' unmounted!')\n                    }\n                }).catch((reason: any) => {\n                    console.error(reason)\n                })\n            }\n        }\n\n        fetchFunc()\n\n        const id = setInterval(fetchFunc, timeout)\n\n        return id\n    }\n\n    const cleanUp = (handler: any) => {\n        mounted = false\n        if (handler) clearInterval(handler)\n    }\n\n    return {\n        handler,\n        cleanUp,\n    }\n\n}\n","import { useEffect } from 'react'\nimport { PromiseJob, PromiseJobInTimer } from '../../utils/hook_tools'\nimport { REFRESH_RATE_SLOW } from \"defs/common_defs\"\n\nexport function usePromiseJob(fetchPromise: any, setFunc: any, field? :string, prefix: any = undefined, dependencies: any[] = []) {\n\n  const {\n    handler,\n    cleanUp,\n  } = PromiseJob(fetchPromise, setFunc, field, prefix)\n\n  useEffect(() => {\n    handler()\n    return () => cleanUp()\n  }, dependencies)\n\n}\n\nexport function usePromiseJobInTimer(fetchPromise: any, setFunc: any, field? :string, \n  prefix: any = undefined, dependencies: any[] = [], timeout: number= REFRESH_RATE_SLOW) {\n  const {\n    handler,\n    cleanUp,\n  } = PromiseJobInTimer(fetchPromise, setFunc, field, prefix, timeout)\n\n  useEffect(() => {\n\n    const id = handler()\n    return () => cleanUp(id)\n  }, dependencies)\n\n}\n","import { useState, } from 'react'\n\nimport { TradesData, TickerData, DepthData, \n  TokensResponse,\n  MarketsResponse, } from 'loopring-sdk'\n\nimport { usePromiseJob } from 'hooks/common/useCommon'\nimport { useExchangeAPI, } from './useApi'\n\nexport function useGetGas() {\n\n  const [gas, setGas] = useState<any>()\n\n  const api = useExchangeAPI()\n\n  const fetchData = () => {\n    if (!api) {\n      return undefined\n    }\n    return api.getGasPrice()\n  }\n\n  usePromiseJob(fetchData, setGas, undefined, 'useGetGas', [api])\n\n  return { gas }\n\n}\n\nexport function useGetMixMarkets() {\n\n  const [markets, setMarkets] = useState<MarketsResponse>()\n    const api = useExchangeAPI()\n\n    const fetchData = () => {\n      if (!api) {\n        return undefined\n      }\n      return api.getMixMarkets()\n    }\n  \n    usePromiseJob(fetchData, setMarkets, undefined, 'useGetMarkets', [api])\n    \n    return { markets }\n\n}\n\nexport function useGetMarkets() {\n\n  const [markets, setMarkets] = useState<MarketsResponse>()\n    const api = useExchangeAPI()\n\n    const fetchData = () => {\n      if (!api) {\n        return undefined\n      }\n      return api.getMarkets()\n    }\n  \n    usePromiseJob(fetchData, setMarkets, undefined, 'useGetMarkets', [api])\n    \n    return { markets }\n\n}\n\nexport function useGetExchangeInfo() {\n\n  const [exchangeInfo, setExchangeInfo] = useState<any>()\n    const api = useExchangeAPI()\n\n    const fetchData = () => {\n      if (!api) {\n        return undefined\n      }\n      return api.getExchangeInfo()\n    }\n  \n    usePromiseJob(fetchData, setExchangeInfo, 'exchangeInfo', 'useGetExchangeInfo', [api])\n    \n    return { exchangeInfo }\n\n}\n\nexport function useGetTokens() {\n\n  const [tokens, setTokens] = useState<TokensResponse>()\n    const api = useExchangeAPI()\n\n    const fetchData = () => {\n      if (!api) {\n        return undefined\n      }\n      return api.getTokens()\n    }\n  \n    usePromiseJob(fetchData, setTokens, undefined, 'useGetTokens', [api])\n    \n    return { tokens }\n\n}\n\n\nexport function useTrades(symbol: string) {\n\n  const [trades, setTrades] = useState<TradesData>()\n\n  const api = useExchangeAPI()\n\n  const fetchData = () => {\n    if (!api) {\n      return undefined\n    }\n    return api.getMarketTrades({\n      market: symbol\n    })\n  }\n\n  usePromiseJob(fetchData, setTrades, undefined, 'useTrades', [api, symbol])\n\n  return { trades, }\n\n}\n\nexport function useTickerMap(market: string) {\n\n  const [tickerMap, setTickerMap] = useState<{[key: string]: TickerData}>()\n\n  const api = useExchangeAPI()\n\n  const fetchData = () => {\n    if (!api) {\n      return undefined\n    }\n    return api.getTicker({\n      market\n    })\n  }\n\n  usePromiseJob(fetchData, setTickerMap, 'tickMap', 'useTickerMap', [api, market])\n\n  return { tickerMap, }\n\n}\n\nexport function useDepth(symbol: string) {\n\n  const api = useExchangeAPI()\n\n  const [depth, setDepth] = useState<DepthData>()\n\n    const fetchData = () => {\n      if (!api) {\n        return undefined\n      }\n      return api.getMixDepth({\n        market: symbol\n      })\n    }\n  \n    usePromiseJob(fetchData, setDepth, 'depth', 'useDepth', [api, symbol])\n\n  return { depth, }\n\n}\n","import React, { useCallback } from 'react'\n\nimport { useTranslation } from 'react-i18next'\n\nimport {\n    gatewayList as DefaultGatewayList,\n    headerMenuData, HeaderMenuTabStatus,\n    headerToolBarData, HeadMenuTabKey,\n    ButtonComponentsMap, LanguageKeys,\n    WalletStatus, HideIcon,\n    GatewayItem, ViewIcon, ThemeKeys, LockIcon, UnLockIcon,\n} from '@loopring-web/component-lib/src/static-resource'\n\nimport { useAccount, useUnlock, useConnect, } from 'stores/account/hook'\n\nimport { getShortAddr } from 'utils/web3_tools'\n\nimport { AccountStatus } from 'state_machine/account_machine_spec'\n\nimport { useCustomDCEffect } from 'hooks/common/useCustomDCEffect'\n\nimport { Theme, } from 'defs/common_defs'\n\nimport { Button, setShowDeposit, SwapProps, useOpenModals, useSettings } from '@loopring-web/component-lib'\n\nimport store from 'stores'\n\nimport { ConnectorNames, LoopringMap } from 'loopring-sdk'\nimport { Typography } from '@material-ui/core';\nimport { AccountInfoProps } from '@loopring-web/component-lib/components/block';\nimport { useEtherscan } from 'hooks/web3/useWeb3'\n\nimport { useModals } from 'hooks/modal/useModals'\n\nimport {useState } from 'react'\nimport Web3 from 'web3'\n\nimport { AmmData, AmmInData, IBData, TradeCalcData, WalletMap } from '@loopring-web/component-lib/static-resource'\nimport { AmmProps } from '@loopring-web/component-lib'\n\nimport {  useUserAPI } from 'hooks/exchange/useApi'\n\nimport { useWeb3Account } from 'stores/account/hook'\nimport { useGetExchangeInfo, useGetTokens } from 'hooks/exchange/useExchangeAPI'\n\nimport * as sdk from 'loopring-sdk'\n\n\nimport {\n    ExchangeAPI,\n    dumpError400,\n    GetNextStorageIdRequest,\n    GetOffchainFeeAmtRequest,\n    OffchainFeeReqType,\n    OffChainWithdrawalRequestV3,\n    OriginTransferRequestV3,\n    TokenInfo,\n    VALID_UNTIL,\n    toBig,\n} from 'loopring-sdk'\n\nimport { useGetUserBalances } from 'hooks/exchange/useUserAPI'\n\nimport {\n    DepositProps,\n    ResetProps,\n    SwitchData,\n    TradeBtnStatus,\n    TransferProps,\n    WithdrawProps,\n} from '@loopring-web/component-lib'\n\nimport { WithdrawType, WithdrawTypes } from '@loopring-web/component-lib/src/static-resource'\nimport { CoinType } from '@loopring-web/component-lib/static'\nimport { useDispatch  } from 'react-redux'\nimport { makeWallet } from 'hooks/help'\nimport { useWalletLayer2 } from 'stores/walletLayer2'\nimport { useTokenMap } from 'stores/token'\nimport { LoopringAPI } from 'stores/apis/api'\nimport { BIG10 } from 'defs/swap_defs'\nimport { useWalletLayer1 } from '../../stores/walletLayer1';\n\nexport const useHeader = () => {\n    const { i18n,t } = useTranslation(['common','layout'])\n    const { setTheme,themeMode,language, setLanguage } = useSettings();\n    const { ShowDeposit } = useModals()\n    const { modals:{isShowAccountInfo,isShowConnect}, setShowConnect, setShowAccountInfo }  = useOpenModals()\n \n    const [openConnect, setOpenConnect] = React.useState(false)\n\n    const forceUpdate = React.useReducer((bool) => !bool, false)[1]\n    const { account } = useAccount()\n\n    const { lock, unlock } = useUnlock()\n\n    const { connect } = useConnect()\n\n    const { etherscanUrl } = useEtherscan()\n\n    const dispatch = useDispatch()\n\n    const gatewayList: GatewayItem[] = [\n        {\n            ...DefaultGatewayList[0],\n            handleSelect: () => {\n                console.log('try to connect to ', ConnectorNames.Injected)\n                connect(ConnectorNames.Injected, true)\n                setShowConnect({isShow: false})\n            }\n        },\n        {\n            ...DefaultGatewayList[1],\n            handleSelect: () => {\n                connect(ConnectorNames.WalletConnect, true)\n                setShowConnect({isShow: false})\n            }\n        },\n        {\n            ...DefaultGatewayList[2],\n            handleSelect: () => {\n                connect(ConnectorNames.Ledger, true)\n                setShowConnect({isShow: false})\n            }\n        },\n        {\n            ...DefaultGatewayList[3],\n            handleSelect: () => {\n                connect(ConnectorNames.Trezor, true)\n                setShowConnect({isShow: false})\n            }\n        },\n    ]\n    // const [showAccountInfo, setShowAccountInfo] = React.useState(account?.accAddr ? true : false)\n    const [accountInfoProps, setAccountInfoProps] = React.useState<undefined|AccountInfoProps>(undefined)\n    //const theme: any = useTheme()\n\n    const onNotification = React.useCallback(async () => {\n        console.log('onNotification click')\n    }, [])\n\n    const onWalletBtnConnect = React.useCallback(async () => {\n        const acc = store.getState().account\n        console.log(`onWalletBtnConnect click: ${acc.status}`)\n\n        switch (acc.status) {\n            case AccountStatus.UNCONNNECTED:\n                setShowConnect({isShow: true})\n                break\n                case AccountStatus.NOACCOUNT:\n            case AccountStatus.CONNECTED:\n            case AccountStatus.LOCKED:\n            case AccountStatus.ACTIVATED:\n                setShowAccountInfo({isShow: true})\n                break\n            default:\n                break\n        }\n    }, [setShowConnect, lock, unlock, ShowDeposit, setShowAccountInfo])\n\n    const onThemeBtnClick = React.useCallback(async (themeMode:ThemeKeys) => {\n        if (themeMode === Theme.dark) {\n            setTheme(Theme.light)\n        } else {\n            setTheme(Theme.dark)\n        }\n    }, [setTheme])\n\n    const onLangBtnClick = (lang: LanguageKeys) => {\n        setLanguage(lang);\n    }\n\n\n    useCustomDCEffect(() => {\n\n\n        headerToolBarData[ButtonComponentsMap.WalletConnect] = {\n            ...headerToolBarData[ButtonComponentsMap.WalletConnect],\n            handleClick: onWalletBtnConnect,\n        }\n\n        // headerToolBarData[ButtonComponentsMap.Notification] = { ...headerToolBarData[ButtonComponentsMap.Theme], themeMode: theme.mode, handleClick: onNotification }\n        // headerToolBarData.update(ButtonComponentsMap.WalletConnect,value=>{\n        //   return {...value, handleClick:onWalletBtnConnect}});\n        headerToolBarData[ButtonComponentsMap.Theme] = { ...headerToolBarData[ButtonComponentsMap.Theme], themeMode, handleClick: onThemeBtnClick }\n        // headerToolBarData.update(ButtonComponentsMap.Theme,value=>{\n        //   return {...value, themeMode:theme.mode, handleClick:onThemeBtnClick}});\n\n        headerToolBarData[ButtonComponentsMap.Language] = { ...headerToolBarData[ButtonComponentsMap.Language], handleChange: onLangBtnClick }\n        // headerToolBarData.update(ButtonComponentsMap.Language,value=>{\n        //  return  {...value, language:i18n.language, handleClick:onThemeBtnClick}});\n    }, [themeMode, language, i18n, onWalletBtnConnect, onThemeBtnClick, onLangBtnClick, onNotification, t]);\n\n    const UnlockBtn = ({onClick}:{onClick:({...props}:any)=>void})=>{\n        return <Button className={'unlock'}  startIcon={<LockIcon fontSize={'large'}/>}\n                       onClick={(event)=>{\n                           onClick(event)\n                       }} variant={'outlined'} >\n            <Typography variant={'body2'} marginTop={1/2}>   {t('labelUnLockLayer2')} </Typography>\n        </Button>\n    }\n\n    const lockCallback = React.useCallback((event)=>{\n        lock(account)\n    } ,[account])\n    const unLockCallback = React.useCallback((event)=>{\n        unlock(account)\n    } ,[account])\n\n    const LockBtn = ({onClick}:{onClick:({...props}:any)=>void})=>{\n        return  <Button className={'lock'}  startIcon={<UnLockIcon fontSize={'large'}/>} \n        onClick={(event) => {\n            onClick(event)\n        } } variant={'outlined'} >\n            <Typography variant={'body2'} marginTop={1/2}>  {t('labelLockLayer2')} </Typography>\n        </Button>\n    }\n\n    useCustomDCEffect(() => {\n\n        if (!account) {\n            console.log('account'+account+'* exit')\n            setAccountInfoProps(undefined)\n            return\n        }\n\n        const { status } = account\n\n        const addr = getShortAddr(account?.accAddr)\n\n        const updateHeaderMenuWhenHasAccountInfo =  ({status}:{status:keyof  typeof AccountStatus})=>{\n            headerMenuData[HeadMenuTabKey.Layer2] = {\n                ...headerMenuData[HeadMenuTabKey.Layer2],\n                status: HeaderMenuTabStatus.default\n            }\n            let props;\n            if(status === AccountStatus.ACTIVATED) {\n                props = {\n                    addressShort: addr?addr:'',\n                    address: account?.accAddr,\n                    level: 'VIP 1',\n                    etherscanLink: etherscanUrl + account?.accAddr,\n                    //TODO: changed by account status\n                    mainBtn: <LockBtn onClick={(_event)=>{lockCallback(_event)}}/>,\n                    connectBy:''\n                }\n                setShowAccountInfo({isShow:false})\n            }else if(status === AccountStatus.LOCKED) {\n                props = {\n                    addressShort: addr?addr:'',\n                    address: account?.accAddr,\n                    level: 'VIP 1',\n                    etherscanLink: etherscanUrl + account?.accAddr,\n                    //TODO: changed by account status\n                    mainBtn: <UnlockBtn onClick={(_event)=>{unLockCallback(_event)}}/>,\n                    connectBy:''\n                }\n                setShowAccountInfo({isShow:true})\n            }else if(status === AccountStatus.UNACTIVATED\n                || status === AccountStatus.NOACCOUNT\n                || status === AccountStatus.DEPOSITING\n                || status === AccountStatus.DEPOSIT_TO_CONFIREM\n                || status === AccountStatus.ARPROVING\n                || status === AccountStatus.APPROV_TO_CONFIRM\n            )  {\n                props = {\n                    addressShort: addr?addr:'',\n                    address: account?.accAddr,\n                    //TODO: level\n                    level: 'VIP 1',\n                    etherscanLink: etherscanUrl + account?.accAddr,\n                    //TODO: changed by account status\n                    connectBy:''\n                }\n                setShowAccountInfo({isShow:false});\n\n            } else  {\n                setShowAccountInfo({isShow:false})\n            }\n            \n            if(status === AccountStatus.NOACCOUNT)  {\n                (props as any).onLock = () => {\n                    setShowAccountInfo({isShow:false})\n                    ShowDeposit(true)\n                }\n            } \n\n            setAccountInfoProps(props)\n        }\n        switch (status) {\n            case AccountStatus.UNCONNNECTED:\n                headerToolBarData[ButtonComponentsMap.WalletConnect] = {\n                    ...headerToolBarData[ButtonComponentsMap.WalletConnect],\n                    label: t('labelConnectWallet'),\n                    status: WalletStatus.default\n                }\n                headerMenuData[HeadMenuTabKey.Layer2] = {\n                    //TODO:  HeaderMenuTabStatus.hidden\n                    ...headerMenuData[HeadMenuTabKey.Layer2], status: HeaderMenuTabStatus.hidden\n                }\n                setShowAccountInfo({isShow:false})\n                break\n            case AccountStatus.LOCKED:\n                headerToolBarData[ButtonComponentsMap.WalletConnect] = {\n                    ...headerToolBarData[ButtonComponentsMap.WalletConnect],\n                    label: addr,\n                    status: WalletStatus.connect\n                };\n\n                updateHeaderMenuWhenHasAccountInfo({status});\n                break\n            case AccountStatus.ACTIVATED:\n                headerToolBarData[ButtonComponentsMap.WalletConnect] = {\n                    ...headerToolBarData[ButtonComponentsMap.WalletConnect],\n                    label: addr,\n                    status: WalletStatus.unlock\n                }\n\n                updateHeaderMenuWhenHasAccountInfo({status});\n                break\n            case AccountStatus.UNACTIVATED:\n            case AccountStatus.NOACCOUNT:\n                headerToolBarData[ButtonComponentsMap.WalletConnect] = {\n                    ...headerToolBarData[ButtonComponentsMap.WalletConnect],\n                    // TODO got cache address if no show Connect Wallet\n                    label: addr,\n                    status: WalletStatus.noAccount\n                }\n\n                updateHeaderMenuWhenHasAccountInfo({status});\n                break\n            case AccountStatus.DEPOSITING:\n            case AccountStatus.DEPOSIT_TO_CONFIREM:\n            case AccountStatus.ARPROVING:\n            case AccountStatus.APPROV_TO_CONFIRM:\n                headerToolBarData[ButtonComponentsMap.WalletConnect] = {\n                    ...headerToolBarData[ButtonComponentsMap.WalletConnect],\n                    label: addr,\n                    status: WalletStatus.accountPending\n                }\n                updateHeaderMenuWhenHasAccountInfo({status});\n\n                break\n        }\n        forceUpdate()\n    }, [account, etherscanUrl, setAccountInfoProps])\n\n    return {\n        headerToolBarData,\n        headerMenuData,\n        gatewayList,\n        isShowConnect,\n        isShowAccountInfo,\n        setShowAccountInfo,\n        setShowConnect,\n        // open,\n        // setOpen,\n        // openConnect,\n        // setOpenConnect,\n        account,\n        accountInfoProps,\n\n    }\n\n}\n\nexport function useChargeFeeList(tokenSymbol: string | undefined, requestType: OffchainFeeReqType, \n    tokenMap: LoopringMap<TokenInfo> | undefined, amount?: number) {\n\n    const api = useUserAPI()\n\n    const {accountId, apiKey,} = useAccount()\n\n    const [chargeFeeList, setChargeFeeList] = useState<any[]>([])\n\n    useCustomDCEffect(async () => {\n\n        console.log('!!!!!!!!!useCustomDCEffect useChargeFeeList:', tokenSymbol, requestType, accountId)\n\n        if (!accountId || !tokenSymbol || !tokenMap) {\n            return\n        }\n\n        let chargeFeeList: any[] = []\n\n        try {\n            const tokenInfo = tokenMap[tokenSymbol]\n\n            const request: GetOffchainFeeAmtRequest = {\n                accountId,\n                tokenSymbol,\n                requestType,\n                amount: amount ? toBig(amount).times('1e' + tokenInfo.decimals).toFixed(0, 0) : undefined\n            }\n\n            const response = await api.getOffchainFeeAmt(request, apiKey)\n\n            if (response) {\n                response.raw_data.fees.forEach((item: any, index: number) => {\n                    const feeRaw = item.fee\n                    const tokenInfo = tokenMap[item.token]\n                    const fee = sdk.toBig(item.fee).div(BIG10.pow(sdk.toBig(tokenInfo.decimals))).toNumber() \n                    chargeFeeList.push({belong: item.token, fee, __raw__: feeRaw })\n                })\n\n                setChargeFeeList(chargeFeeList)\n            }\n            console.log('response:', response)\n\n        } catch (reason) {\n            dumpError400(reason)\n        }\n\n\n        setChargeFeeList(chargeFeeList)\n\n    }, [accountId, apiKey, requestType, tokenSymbol, tokenMap])\n\n    return {\n        chargeFeeList,\n    }\n\n}\n\nexport function useModalProps() {\n\n    const {\n        ShowDeposit,\n        ShowTransfer,\n        ShowWithdraw,\n        ShowResetAccount,\n    } = useModals()\n\n    const {chainId, isConnected, connector,} = useWeb3Account()\n\n    const {exchangeInfo} = useGetExchangeInfo()\n\n    const {account, apiKey, accountId, eddsaKey,} = useAccount()\n    \n    const {coinMap, tokenMap, marketArray, marketCoins, marketMap, } = useTokenMap()\n\n    const walletLayer2State = useWalletLayer2();\n    const walletLayer1State = useWalletLayer1();\n    const [walletMap1, setWalletMap1] = useState<WalletMap<any>|undefined>(undefined);\n    const [walletMap2, setWalletMap2] = useState<WalletMap<any>|undefined>(undefined);\n    //HIGH: effect by wallet state update\n    React.useEffect(() => {\n        if(walletLayer2State.walletLayer2){\n            let {walletMap} =  makeWallet();\n            setWalletMap1(walletMap)\n        }\n        if(walletLayer1State.walletLayer1){\n            // let {walletMap} =  makeWalletLayer1();\n            setWalletMap1(walletLayer1State.walletLayer1)\n        }\n    }, [])\n    React.useEffect(() => {\n        switch (walletLayer2State.status) {\n            case \"ERROR\":\n                walletLayer2State.statusUnset();\n                // setState('ERROR')\n                //TODO: show error at button page show error  some retry dispath again\n                break;\n            case \"DONE\":\n                walletLayer2State.statusUnset();\n                let {walletMap} =  makeWallet();\n                setWalletMap2(walletMap)\n                break;\n            default:\n                break;\n\n        }\n    }, [walletLayer2State.status])\n    React.useEffect(() => {\n        switch (walletLayer1State.status) {\n            case \"ERROR\":\n                walletLayer1State.statusUnset();\n                // setState('ERROR')\n                //TODO: show error at button page show error  some retry dispath again\n                break;\n            case \"DONE\":\n                walletLayer1State.statusUnset();\n                setWalletMap1(walletLayer1State.walletLayer1);\n                break;\n            default:\n                break;\n\n        }\n    }, [walletLayer1State.status])\n\n    // deposit\n    const [depositValue, setDepositValue] = useState<IBData<any>>({\n        belong: undefined,\n        tradeValue: 0,\n        balance: 0\n    } as IBData<unknown>)\n\n    const deposit = useCallback(async (token: string, amt: any) => {\n\n        if (!LoopringAPI.exchangeAPI || !tokenMap || !isConnected || !connector || !exchangeInfo?.exchangeAddress || !exchangeInfo?.depositAddress) {\n            console.log(`exchangeInfo:${exchangeInfo} deposit exit!!!!!`)\n            return\n        }\n\n        try {\n            const tokenInfo: TokenInfo = tokenMap[token]\n\n            const provider = await connector.getProvider()\n            const web3 = new Web3(provider as any)\n\n            let sendByMetaMask = account.connectName === ConnectorNames.Injected\n            console.log('sendByMetaMask:', sendByMetaMask)\n            sendByMetaMask = true\n\n            const gasPrice = store.getState().system.gasPrice ?? 30\n            const gasLimit = parseInt(tokenInfo.gasAmounts.deposit)\n\n            const nonce = await sdk.getNonce(web3, account.accAddr)\n\n            console.log('111 gasPrice:', gasPrice)\n            console.log('account.connectName:', account.connectName, ' tokenInfo:', tokenInfo)\n\n            const response = await sdk.approveMax(web3, account.accAddr, tokenInfo.address,\n                exchangeInfo?.depositAddress, gasPrice, gasLimit, chainId, nonce, sendByMetaMask)\n\n            console.log('response:', response)\n\n            const fee = 0\n\n            const response2 = await sdk.deposit(web3, account.accAddr,\n                exchangeInfo?.exchangeAddress, tokenInfo, amt, fee,\n                gasPrice, gasLimit, chainId, nonce + 1, sendByMetaMask)\n\n            console.log('!!!!deposit response2:', response2)\n\n\n        } catch (reason) {\n            dumpError400(reason)\n        }\n\n    }, [chainId, isConnected, connector, account, tokenMap, exchangeInfo, LoopringAPI.exchangeAPI])\n\n    let depositProps: DepositProps<any, any> = {\n        tradeData: {belong: undefined},\n        coinMap: coinMap,\n        walletMap: walletMap1,\n        depositBtnStatus: TradeBtnStatus.AVAILABLE,\n        onDepositClick: (tradeData: any) => {\n            console.log('1. onDepositClick', depositValue)\n            if (depositValue && depositValue.belong) {\n                deposit(depositValue.belong.toString(), depositValue.tradeValue)\n            }\n            ShowDeposit(false)\n        },\n        handlePanelEvent: async (data: SwitchData<any>, switchType: 'Tomenu' | 'Tobutton') => {\n            return new Promise((res) => {\n                if (data?.tradeData?.belong) {\n                    if (depositValue !== data.tradeData) {\n                        setDepositValue(data.tradeData)\n                    }\n                    setTokenSymbol(data.tradeData.belong)\n                } else {\n                    setDepositValue({belong: undefined, tradeValue: 0, balance: 0} as IBData<unknown>)\n                }\n                res();\n            })\n        },\n    }\n\n    // transfer\n    const [transferValue, setTransferValue] = useState<IBData<any>>({\n        belong: undefined,\n        tradeValue: 0,\n        balance: 0\n    } as IBData<unknown>)\n\n    const [transferTokenSymbol, setTransferTokenSymbol] = useState<string>('')\n\n    const {chargeFeeList: transferFeeList} = useChargeFeeList(transferTokenSymbol, OffchainFeeReqType.TRANSFER, tokenMap)\n\n    const [feeInfo, setFeeInfo] = useState<any>()\n\n    useCustomDCEffect(() => {\n\n        if (transferFeeList.length > 0) {\n            setFeeInfo(transferFeeList[0])\n        }\n\n    }, [transferFeeList])\n\n    const transfer = useCallback(async (transferValue: any) => {\n\n        if (!LoopringAPI.userAPI || !LoopringAPI.exchangeAPI \n            || !connector || !apiKey || !chainId || !accountId || !account?.accAddr) {\n            return\n        }\n\n        if (!tokenMap || !feeInfo) {\n            console.log(tokenMap)\n            console.log(feeInfo)\n            return\n        }\n\n        console.log('transfer transferValue:', transferValue)\n\n        const sellToken = tokenMap[transferValue.belong]\n\n        const feeToken = tokenMap[feeInfo.belong]\n\n        const transferVol = toBig(transferValue.tradeValue).times('1e' + sellToken.decimals).toFixed(0, 0)\n\n        const request: GetNextStorageIdRequest = {\n            accountId,\n            sellTokenId: sellToken.tokenId\n        }\n        const storageId = await LoopringAPI.userAPI.getNextStorageId(request, apiKey)\n\n        try {\n\n            const provider = await connector.getProvider()\n            const web3 = new Web3(provider as any)\n\n            let walletType = account.connectName\n            walletType = ConnectorNames.Injected\n\n            const request2: OriginTransferRequestV3 = {\n                exchange: exchangeInfo.exchangeAddress,\n                payerAddr: account.accAddr,\n                payerId: accountId,\n                payeeAddr: '0x8cdc4B6C1FA234AE54c53e56376359bFC497f2e6',\n                payeeId: 0,\n                storageId: storageId.offchainId,\n                token: {\n                    tokenId: sellToken.tokenId,\n                    volume: transferVol,\n                },\n                maxFee: {\n                    tokenId: feeToken.tokenId,\n                    volume: feeInfo.__raw__,\n                },\n                validUntil: VALID_UNTIL,\n            }\n\n            console.log(`request2:${JSON.stringify(request2)}`)\n\n            const response = await LoopringAPI.userAPI.submitInternalTransfer(request2, web3, chainId, walletType,\n                eddsaKey, apiKey, false)\n\n            console.log(response)\n\n        } catch (reason) {\n            dumpError400(reason)\n        }\n\n    }, [apiKey, accountId, account, connector, exchangeInfo, chainId, eddsaKey, LoopringAPI.userAPI, LoopringAPI.exchangeAPI])\n\n    let transferProps: TransferProps<any, any> = {\n        tradeData: {belong: undefined},\n        coinMap: coinMap,\n        walletMap: walletMap2,\n        transferBtnStatus: TradeBtnStatus.AVAILABLE,\n        onTransferClick: (tradeData: any) => {\n            console.log('onTransferClick:', transferValue);\n            if (transferValue && transferValue.belong) {\n                transfer(transferValue)\n            }\n\n            ShowTransfer(false)\n        },\n        handleFeeChange(value: { belong: string; fee: number | string; __raw__?: any }): void {\n            console.log('transfer handleFeeChange', value);\n            setFeeInfo(value)\n        },\n        handlePanelEvent: async (data: SwitchData<any>, switchType: 'Tomenu' | 'Tobutton') => {\n            return new Promise((res: any) => {\n                if (data?.tradeData?.belong) {\n                    if (transferValue !== data.tradeData) {\n                        setTransferValue(data.tradeData)\n                    }\n                    setTransferTokenSymbol(data.tradeData.belong)\n                } else {\n                    setTransferValue({belong: undefined, tradeValue: 0, balance: 0} as IBData<unknown>)\n                }\n                // else{\n                //     setTransferValue({ belong: undefined, amt: 0 })\n                // }\n\n                res();\n            })\n        },\n\n        chargeFeeToken: 'ETH',\n        chargeFeeTokenList: transferFeeList,\n        handleOnAddressChange: (value: any) => {\n            console.log('transfer handleOnAddressChange', value);\n        },\n        handleAddressError: (_value: any) => {\n            return {error: false, message: ''}\n        }\n    }\n\n    // withdraw\n    const [withdrawValue, setWithdrawValue] = useState<IBData<any>>({\n        belong: undefined,\n        tradeValue: 0,\n        balance: 0\n    } as IBData<unknown>);\n\n    const [tokenSymbol, setTokenSymbol] = useState<string>('')\n    const [withdrawType, setWithdrawType] = useState<OffchainFeeReqType>(OffchainFeeReqType.OFFCHAIN_WITHDRAWAL)\n    const {chargeFeeList: withdrawalFeeList} = useChargeFeeList(tokenSymbol, withdrawType, tokenMap, withdrawValue.tradeValue)\n\n    const [withdrawFeeInfo, setWithdrawFeeInfo] = useState<any>()\n\n    useCustomDCEffect(() => {\n\n        if (withdrawalFeeList.length > 0) {\n            setWithdrawFeeInfo(withdrawalFeeList[0])\n        }\n\n    }, [withdrawalFeeList])\n\n    const withdraw = useCallback(async (token: string, amt: any) => {\n\n        console.log('withdraw apiKey:', apiKey, ' exchangeInfo:', exchangeInfo, ' exchangeAddr:', exchangeInfo.exchangeAddress)\n\n        if (!LoopringAPI.userAPI || !account || !account.accountId || !account.accAddr\n            || !connector || !chainId || !apiKey || !exchangeInfo\n            || !exchangeInfo.exchangeAddress || !withdrawFeeInfo\n            || !withdrawValue || !tokenMap) {\n            console.log('return directly 11111!', account, connector, chainId, apiKey, exchangeInfo)\n            console.log('return directly 22222!', withdrawValue, withdrawFeeInfo, tokenMap)\n            return\n        }\n\n        const symbol = withdrawValue.belong as string\n\n        const withdrawToken = tokenMap[symbol]\n\n        const feeToken = tokenMap[withdrawFeeInfo.belong]\n\n        amt = toBig(withdrawValue.tradeValue).times('1e' + withdrawToken.decimals).toFixed(0, 0)\n\n        try {\n\n            const request: GetNextStorageIdRequest = {\n                accountId: account.accountId,\n                sellTokenId: withdrawToken.tokenId\n            }\n\n            const storageId = await LoopringAPI.userAPI.getNextStorageId(request, apiKey)\n\n            const request2: OffChainWithdrawalRequestV3 = {\n                exchange: exchangeInfo.exchangeAddress,\n                owner: account.accAddr,\n                to: account.accAddr,\n                accountId: account.accountId,\n                storageId: storageId.offchainId,\n                token: {\n                    tokenId: withdrawToken.tokenId,\n                    volume: amt,\n                },\n                maxFee: {\n                    tokenId: feeToken.tokenId,\n                    volume: withdrawFeeInfo.__raw__,\n                },\n                extraData: '',\n                minGas: 0,\n                validUntil: VALID_UNTIL,\n            }\n\n            const provider = await connector.getProvider()\n            const web3 = new Web3(provider as any)\n\n            const response = await LoopringAPI.userAPI.submitOffchainWithdraw(request2, web3, chainId, ConnectorNames.Injected,\n                account.eddsaKey, apiKey, false)\n\n            console.log(response)\n\n        } catch (reason) {\n            dumpError400(reason)\n        }\n\n    }, [apiKey, account, connector, exchangeInfo, chainId, LoopringAPI.userAPI])\n     \n    let withdrawProps: WithdrawProps<any, any> = {\n        tradeData: {belong: undefined},\n        coinMap: coinMap,\n        walletMap: walletMap2,\n        withdrawBtnStatus: TradeBtnStatus.AVAILABLE,\n        onWithdrawClick: (tradeData: any) => {\n            console.log('Swap button click', withdrawValue)\n            if (withdrawValue && withdrawValue.belong) {\n                withdraw(withdrawValue.belong.toString(), withdrawValue.tradeValue)\n            }\n            ShowWithdraw(false)\n        },\n\n        handlePanelEvent: async (data: SwitchData<any>, switchType: 'Tomenu' | 'Tobutton') => {\n            console.log('withdrawProps handlePanelEvent: ', data, switchType)\n            console.log('withdrawProps withdrawValue: ', withdrawValue)\n            return new Promise((res: any) => {\n                if (data?.tradeData?.belong) {\n                    if (withdrawValue !== data.tradeData) {\n                        setWithdrawValue(data.tradeData)\n                    }\n                    setTokenSymbol(data.tradeData.belong)\n                } else {\n                    setWithdrawValue({belong: undefined, tradeValue: 0, balance: 0} as IBData<unknown>);\n                }\n                res();\n            })\n        },\n        withdrawType,\n        withdrawTypes: WithdrawTypes,\n        chargeFeeToken: 'ETH',\n        chargeFeeTokenList: withdrawalFeeList,\n        handleFeeChange(value: { belong: string; fee: number | string; __raw__?: any }): void {\n            console.log('handleWithdrawFee', value);\n            setWithdrawFeeInfo(value)\n        },\n        handleWithdrawTypeChange: (value: any) => {\n            console.log('handleWithdrawTypeChange',value)\n            const offchainType = value === WithdrawType.Fast ? OffchainFeeReqType.FAST_OFFCHAIN_WITHDRAWAL : OffchainFeeReqType.OFFCHAIN_WITHDRAWAL\n            setWithdrawType(offchainType)\n        },\n        handleOnAddressChange: (value: any) => {\n            console.log('handleOnAddressChange', value);\n        },\n        handleAddressError: (_value: any) => {\n            return {error: false, message: ''}\n        }\n    }\n    \n\n    // reset\n    const [resetValue, setResetValue] = useState<IBData<any>>({\n        belong: undefined,\n        tradeValue: 0,\n        balance: 0\n    } as IBData<unknown>)\n\n\n    let resetProps: ResetProps<any, any> = {\n        tradeData: {belong: undefined},\n        coinMap: coinMap,\n        walletMap: walletMap2,\n        resetBtnStatus: TradeBtnStatus.AVAILABLE,\n        onResetClick: (tradeData: any) => {\n            console.log('onResetClick', resetValue)\n            if (resetValue && resetValue.belong) {\n            }\n\n            ShowResetAccount(false)\n        },\n        handlePanelEvent: async (data: SwitchData<any>, switchType: 'Tomenu' | 'Tobutton') => {\n            return new Promise((res) => {\n                if (data?.tradeData?.belong) {\n                    if (resetValue !== data.tradeData) {\n                        setResetValue(data.tradeData)\n                    }\n                } else {\n                    setResetValue({belong: undefined, tradeValue: 0, balance: 0} as IBData<unknown>)\n                }\n\n                res();\n            })\n        },\n        fee: {count: 234, price: 123}\n    }\n\n     const tradeCalcData: TradeCalcData<CoinType> = {\n        coinSell: 'ETH', //name\n        coinBuy: 'LRC',\n        BtoS: 0,\n        StoB: 0,\n        sellCoinInfoMap: coinMap,\n        buyCoinInfoMap: coinMap,\n        walletMap: {},\n        slippage: 0.5,\n        // slippageTolerance: [0.1, 0.5, 1, 'slippage:N'],\n        priceImpact: '12',\n        minimumReceived: '1%',\n        fee: '1%'\n    }\n     const ammCalcData: AmmInData<{[key: string]: any}> = {\n        myCoinA: {belong:'ETH',balance:1000,tradeValue:0},\n        myCoinB: {belong:'LRC',balance:1000,tradeValue:0},\n        AtoB:50,\n        coinInfoMap: coinMap as any,\n        slippage: 0.5,\n        // slippageTolerance: [0.1, 0.5, 1, 'slippage:N'],\n        fee: '1%'\n    }\n\n\n    let swapProps: SwapProps<IBData<string>, string, any> = {\n        tradeData: undefined,\n        tradeCalcData,\n        onSwapClick: (tradeData) => {\n            console.log('Swap button click', tradeData);\n        },\n        handleSwapPanelEvent: async (data: any, switchType: any) => {\n            console.log(data, switchType)\n        },\n    };\n    let ammProps: AmmProps<AmmData<IBData<any>>, any, AmmInData<any>> = {\n        ammDepositData:{coinA: {belong: 'ETH',balance:0.3,tradeValue:0}, coinB:  {belong: 'LRC',balance:1000,tradeValue:0},slippage: '',},\n        ammWithdrawData:{coinA: {belong: 'ETH',balance:0.3,tradeValue:0}, coinB:  {belong: 'LRC',balance:1000,tradeValue:0},slippage: '',},\n        // tradeCalcData,\n        ammCalcData:ammCalcData,\n        handleDepositEvent: (data,type) => {\n            console.log('handleDepositEvent',data,type) ;\n        },\n        handleWithDrawEvent:  (data,type) => {\n            console.log('handleWithDrawEvent',data,type) ;\n        },\n        onAmmWithdrawClick: (data)=>{\n            console.log('onAmmWithdrawClick',data) ;\n        },\n        onAmmDepositClick: (data)=>{\n            console.log('onAmmDepositClick',data) ;\n        }\n    }\n\n    return {\n        depositProps, withdrawProps, transferProps, resetProps, ammProps, swapProps,\n    }\n}\n","import { WithTranslation, withTranslation } from 'react-i18next';\nimport { Box, Modal } from '@material-ui/core';\nimport { ModalCloseButton, ModalContentStyled, ModalQRCode } from '@loopring-web/component-lib';\nimport React from 'react';\nimport { AccountInfo, AccountInfoProps } from '@loopring-web/component-lib';\n\nexport const ModalAccountInfo = withTranslation('common')(({\n                                                               onClose,\n                                                               open,\n                                                               t,\n                                                               ...rest\n                                                           }: { open:boolean, onClose:(e:any)=>void} & AccountInfoProps & WithTranslation) => {\n\n\n    return <Modal\n        open={open}\n        onClose={onClose}\n        aria-labelledby=\"Account information\"\n        aria-describedby=\"show layer2 address, unlock/locked loopring wallet, copy address\"\n    >\n        <ModalContentStyled style={{boxShadow: '24'}}>\n            <Box paddingTop={3} paddingBottom={3} display={'flex'} flexDirection={'column'} minWidth='var(--modal-width)'>\n                <ModalCloseButton onClose={onClose} {...{...rest, t}} />\n                <AccountInfo {...rest}/>\n            </Box>\n\n        </ModalContentStyled>\n    </Modal>\n})","import React, { useCallback, useState, } from 'react'\n\nimport {\n    Header as HeaderUI,\n    HideOnScroll,\n    ModalWalletConnect,\n    AccountInfo,\n    ModalCloseButton,\n} from '@loopring-web/component-lib'\n\nimport { headerRoot } from '@loopring-web/component-lib/src/static-resource'\n\nimport { useLocation } from 'react-router-dom'\n\nimport { Toolbar, Snackbar, Alert, } from '@material-ui/core'\n\nimport { useHeader } from './hook'\n\nimport { useDisconnect, } from 'stores/account/hook'\nimport { ModalPanel, ModalQRCode, } from '@loopring-web/component-lib';\nimport { useGetExchangeInfo } from 'hooks/exchange/useExchangeAPI'\nimport { useModalProps } from './hook'\n\nimport { copyToClipBoard } from 'utils/obj_tools'\nimport { ModalAccountInfo } from '../../pages/AccountPage';\nimport { useTranslation } from 'react-i18next';\n\nconst Header = ({ ...rest }: any) => {\n\n    const {\n        depositProps,\n        withdrawProps,\n        transferProps,\n        resetProps,\n        ammProps,\n        swapProps,\n    } = useModalProps()\n\n    const location = useLocation()\n\n    const {\n        headerToolBarData,\n        headerMenuData,\n        gatewayList,\n        isShowConnect,\n        isShowAccountInfo,\n        setShowAccountInfo,\n        // setShowAccountInfo,\n        setShowConnect,\n        // open,\n        // setOpen,\n        // openConnect,\n        // setOpenConnect,\n        account,\n        accountInfoProps,\n        // showAccountInfo\n    } = useHeader()\n\n    const { exchangeInfo } = useGetExchangeInfo()\n\n    const { disconnect } = useDisconnect()\n\n    const onSwitch = useCallback(() => {\n        setShowAccountInfo({isShow:false})\n        setShowConnect({isShow:true})\n    }, [setShowConnect,setShowAccountInfo])\n\n    const [openQRCode, setOpenQRCode] = useState(false)\n\n    const [copyToastOpen, setCopyToastOpen] = useState(false);\n    const {t} = useTranslation('commom')\n\n    const closeCopyToast = () => { setCopyToastOpen(false) }\n\n    return (<>\n        <Snackbar open={copyToastOpen} autoHideDuration={2500} onClose={closeCopyToast}>\n            <Alert onClose={closeCopyToast} severity=\"success\">\n                {t('Address Copied to Clipboard!')}\n        </Alert>\n        </Snackbar>\n\n        <ModalQRCode open={openQRCode} onClose={() => setOpenQRCode(false)} title={'ETH Address'}\n            description={account.accAddr} url={account.accAddr} />\n\n        <ModalPanel transferProps={transferProps} withDrawProps={withdrawProps} \n        depositProps={depositProps} resetProps={resetProps} ammProps={ammProps} swapProps={swapProps}/>\n\n        <HideOnScroll>\n            {process.env.NODE_ENV !== 'production' && JSON.stringify(account?.status)}\n            {process.env.NODE_ENV !== 'production' && ' exchangeAddress:' + JSON.stringify(exchangeInfo?.exchangeAddress)}\n\n            <HeaderUI {...rest} headerMenuData={headerMenuData} headerToolBarData={headerToolBarData}\n                selected={location.pathname === '/' ? headerRoot : location.pathname}></HeaderUI>\n\n        </HideOnScroll>\n        <Toolbar />\n\n        <ModalWalletConnect {...{ ...rest, gatewayList, open:isShowConnect.isShow, onClose: () => setShowConnect({isShow:false}) }} />\n        {<ModalAccountInfo\n            open={isShowAccountInfo.isShow}\n            onClose={() => {setShowAccountInfo({isShow:false})}}\n            onCopy={() => {\n                copyToClipBoard(account.accAddr);\n                setCopyToastOpen(true)\n            }}\n            onViewQRCode={() => {\n                setOpenQRCode(true)\n            }}\n            onDisconnect={() => {\n                disconnect();\n                setShowAccountInfo({isShow:false});\n            }}\n            onSwitch={onSwitch}\n            {...{...accountInfoProps, ...rest}}></ModalAccountInfo>}\n    </>)\n}\n\n\nexport default Header\n\n\n\n","import React from \"react\"\nimport store from '../../stores';\nimport { TickerMap, useTicker } from '../../stores/ticker';\nimport { globalSetup, MarketBlockProps, QuoteTableRawDataItem, } from '@loopring-web/component-lib';\nimport { deepClone } from '../../utils/obj_tools';\nimport { useSocket } from '../../stores/socket';\nimport { TradingInterval, WsTopicType } from 'loopring-sdk';\nimport { LoopringAPI } from 'stores/apis/api'\nimport { tickerService } from '../../services/tickerService';\nimport { debounce } from \"lodash\"\n\nconst amtCol = 5\nconst OnePageSize = 16;\nconst rowHeight = 44;\n\n// 0\nfunction isNeedCallMore(currentStartIndex: number, to: number, marketArrayLength: number, currentListLength: number, pageSize: number = OnePageSize): boolean {\n    const pageCurrent = currentStartIndex / OnePageSize\n    if (to - pageCurrent > 1) {\n        return false\n    } else if (pageSize * to < marketArrayLength && currentListLength - 4 < pageSize * (to + 1)) {\n        return true\n    } else {\n        return false\n    }\n    // const target = event.target as HTMLDivElement;\n    //TODO 2 times height for scrollHeight  to - 16 - 4  calculator scroll  超过 20 个刷第二屏幕 。。。。超过 36 个刷下个一个屏幕 第一屏幕是 16+4+16\n    // if( target.clientHeight + target.scrollTop === target.scrollHeight &&  to*pageSize >= marketArrayLength) {\n    //     return  true\n    // }else{\n    //     return false;\n    // }\n}\n\nexport function useQuote<C extends { [ key: string ]: string }>() {\n\n\n    const {\n        tickerMap,\n        status: tickerStatus,\n        // errorMessage: errorTickerMap,\n        statusUnset: tickerStatusUnset,\n        updateTickers,\n    } = useTicker();\n    const {sendSocketTopic, socketEnd} = useSocket();\n    const {marketArray, coinMap} = store.getState().tokenMap;\n    const recommendMarkets: string[] = marketArray ? marketArray.slice(0, 4) : ['LRC-ETH', 'LRC-ETH', 'LRC-ETH', 'LRC-ETH']\n    const _marketArrayWithOutRecommend = marketArray ? marketArray.filter(item => recommendMarkets.findIndex(m => m === item) === -1) : [];\n    const [tickList, setTickList] = React.useState<any>([]);\n    const [recommendations, setRecommendations] = React.useState<MarketBlockProps<C>[]>([]);\n    const [, setTickerKeys] = React.useState<string[]>([]);\n    const [focusRowFrom, setFocusRowFrom] = React.useState<[start: number, end: number]>([0, 2]);\n    const [startIndex, setStartIndex] = React.useState<number>(-1);\n\n    const subject = React.useMemo(() => tickerService.onSocket(), []);\n\n    const updateRecommendation = React.useCallback((recommendationIndex, ticker) => {\n        if (recommendations.length) {\n          //  let _recommendations = deepClone(recommendations)\n            recommendations[ recommendationIndex ].tradeFloat = ticker\n            setRecommendations(recommendations)\n        }\n    }, [recommendations]);\n    React.useEffect(() => {\n        const subscription = subject.subscribe(({tickerMap}) => {\n            if (tickerMap) {\n                Reflect.ownKeys(tickerMap).forEach((key) => {\n                    let recommendationIndex = recommendMarkets.findIndex(ele => ele === key)\n                    if (recommendationIndex !== -1) {\n                        // setRecommendations\n                        updateRecommendation(recommendationIndex, tickerMap[ key as string ])\n                    }\n                    //todo update related row. use socket return\n                })\n            }\n        });\n        return () => subscription.unsubscribe();\n    }, [subject,recommendations]);\n\n\n    //TODO if socket is error throw use recall will pending on it\n    // React.useEffect(() => {\n    //     switch (socketStatus) {\n    //         case \"ERROR\":\n    //             console.log(\"ERROR\", 'open websocket error get moment value from api ');\n    //             socketStatusUnset();\n    //             updateTickers(tickerKeys);\n    //             break;\n    //         default:\n    //             break;\n    //     }\n    // }, [socketStatus, socketStatusUnset]);\n    React.useEffect(() => {\n        const [from, to] = focusRowFrom\n        getTicker(from, to);\n        socketSendTicker(from*OnePageSize);\n        return () => {\n            socketEnd()\n        }\n    }, []);\n    React.useEffect(() => {\n        switch (tickerStatus) {\n            case \"ERROR\":\n                console.log(\"ERROR\", 'get ticker error,ui');\n                tickerStatusUnset()\n                break;\n            case \"PENDING\":\n                break;\n            case \"DONE\":\n                tickerStatusUnset();\n                updateRawData(tickerMap as TickerMap<C>)\n                break;\n            default:\n                break;\n        }\n    }, [tickerStatus, tickerStatusUnset]);\n    const getTicker = React.useCallback((from: number, to: number) => {\n        if (_marketArrayWithOutRecommend) {\n            let array = _marketArrayWithOutRecommend.slice(from * OnePageSize, to * OnePageSize);\n            //High: add recommendations market first time is 36个数据\n            if (from === 0) {\n                array = recommendMarkets.concat(array)\n            }\n            updateTickers(array);\n        }\n\n\n    }, [marketArray, OnePageSize, recommendMarkets])\n\n    const updateRawData = React.useCallback((tickerMap: TickerMap<C>) => {\n        let _recommendationsFloat: QuoteTableRawDataItem[] = [];\n        const _tickList = Reflect.ownKeys(tickerMap).reduce((prev, key) => {\n            // @ts-ignore\n            const [, coinA, coinB] = key.match(/(\\w+)-(\\w+)/i);\n            let _item = {\n                ...tickerMap[ key as string ],\n                pair: {\n                    coinA,\n                    coinB,\n                },\n            } as QuoteTableRawDataItem;\n\n            if (recommendMarkets.findIndex(m => m === key) !== -1) {\n                _recommendationsFloat.push(deepClone(_item))\n            }\n            prev.push(_item);\n            return prev\n        }, [] as QuoteTableRawDataItem[])\n        setTickList([...tickList, ..._tickList])\n        //setTickList\n        if (focusRowFrom[ 0 ] === 0 && _recommendationsFloat.length > 0) {\n            //TODO : fix in uat env not enough pair_recommendations\n            while (_recommendationsFloat.length < 4) {\n                _recommendationsFloat.push(deepClone(_recommendationsFloat[ 0 ]));\n            }\n\n            const _recommendations = _recommendationsFloat.reduce((prev, item) => {\n                if (coinMap) {\n                    const {coinA, coinB} = item.pair;\n                    const _item: MarketBlockProps<C> = {\n                        tradeFloat: item,\n                        // @ts-ignore\n                        coinAInfo: coinMap[ coinA ],\n                        // @ts-ignore\n                        coinBInfo: coinMap[ coinB ]\n                    } as MarketBlockProps<C>\n                    prev.push(_item)\n                }\n                return prev\n            }, [] as MarketBlockProps<C>[])\n\n            setRecommendations(_recommendations)\n        }\n    }, [tickList, focusRowFrom])\n\n\n    // const  = (startIndex: number) => {\n    //     console.log(startIndex)\n    // }\n    const debounceGetTicker = React.useCallback(debounce((from, to) => {\n        getTicker(from, to)\n    }, globalSetup.wait), [])\n    const socketSendTicker = React.useCallback(debounce((_startIndex: number, pageSize = OnePageSize) => {\n        if(_startIndex !== startIndex)  {\n            let marketArray: string[] = _marketArrayWithOutRecommend.slice(_startIndex, _startIndex + pageSize);\n            marketArray = [...recommendMarkets, ...marketArray];\n            setTickerKeys(marketArray);\n            //High:\n            sendSocketTopic({[ WsTopicType.ticker ]: marketArray});\n        }\n    }, globalSetup.wait * 2), [startIndex])\n    const onVisibleRowsChange = React.useCallback(async (startIndex: number) => {\n        //TODO isBottom and is On prev tickerCall\n        // if (!isAtBottom(startIndex,focusRowFrom[1],_marketArrayWithOutRecommend.length,OnePageSize)\n        //     && tickerStatus !== 'PENDING'){\n        // }\n        //TODO load more\n        const [, to] = focusRowFrom\n        if (isNeedCallMore(startIndex, to, _marketArrayWithOutRecommend.length, tickList.length, OnePageSize)) {\n            console.log('getNextPage.......')\n            setFocusRowFrom([to, to + 1]);\n            debounceGetTicker(to, to + 1);\n        }\n        setStartIndex(startIndex);\n        socketSendTicker(startIndex, OnePageSize)\n    }, [focusRowFrom, OnePageSize, tickerStatus, marketArray, tickList])\n\n    return {\n        tickList,\n        recommendations,\n        // handleScroll,\n        onVisibleRowsChange\n    }\n\n}\n\nexport type CandlestickItem = {\n    close: number;\n    timeStamp: number;\n}\n\nexport const useCandlestickList = (market: string) => {\n    const [candlestickList, setCandlestickList] = React.useState<CandlestickItem[]>([])\n    const getCandlestick = React.useCallback(async (market: string) => {\n        if (LoopringAPI.exchangeAPI) {\n            const res = await LoopringAPI.exchangeAPI.getMixCandlestick({\n                market: market,\n                interval: TradingInterval.d1,\n                // start?: number;\n                // end?: number;\n                limit: 7\n            })\n            if (res && res.candlesticks && !!res.candlesticks.length) {\n                const data = res.candlesticks.map(o => ({\n                    close: o.close,\n                    timeStamp: o.timestamp\n                }))\n                setCandlestickList(data)\n            }\n            setCandlestickList([])\n        }\n        setCandlestickList([])\n    }, [])\n\n    React.useEffect(() => {\n        getCandlestick(market)\n    }, [getCandlestick, market])\n\n    return candlestickList\n}\n","import styled from '@emotion/styled';\nimport { Box, Grid, Paper } from '@material-ui/core';\nimport { TablePaddingX } from '@loopring-web/component-lib/index';\n\nexport const StylePaper = styled(Box)`\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  //height: 100%;\n  flex: 1;\n  background-color: ${({ theme }) => theme.colorBase.background().default};\n  border-radius: ${({ theme }) => theme.unit}px;\n  // padding: ${({ theme }) => 3 * theme.unit}px  0;\n  margin-bottom: ${({ theme }) => 2* theme.unit}px;\n  .title {\n    font-family: Gilroy-Medium;\n    font-size: ${({ theme }) => theme.unit * 3}px;\n    line-height: 19px;\n    margin-left: ${({ theme }) => 3 * theme.unit}px;\n    margin-top: ${({ theme }) => 3 * theme.unit}px;\n    margin-bottom: ${({ theme }) => 2 * theme.unit}px;\n  }\n\n  .tableWrapper {\n    display: flex;\n    margin-top: ${({ theme }) => 2 * theme.unit}px;\n    flex: 1;\n    .rdg {\n      flex: 1;\n    }\n  }\n` as typeof Paper;\n\n\nexport const  TableWrapStyled = styled(Grid)`\n  &{\n    background-color: ${({theme}) => theme.colorBase.background().default};\n    border-radius: ${({ theme }) => theme.unit}px;\n    .rdg{\n      .rdg-header-row {\n        border-radius: ${({theme}) => theme.unit}px ${({theme}) => theme.unit}px 0 0;\n      }\n    }\n  }\n  ${({theme}) => TablePaddingX({pLeft:theme.unit * 3,pRight:theme.unit * 3})}\n` as typeof Grid\n\n//    ${({theme}) => theme.border.defaultFrame({c_key: 'blur', d_R: 1})};\n","import React from 'react'\nimport styled from '@emotion/styled/macro'\n\nimport { MarketBlock, QuoteTable, TablePaddingX } from '@loopring-web/component-lib'\n\nimport { WithTranslation, withTranslation } from 'react-i18next'\n// import { FloatTag } from '@loopring-web/component-lib/src/static-resource'\nimport { Box, Grid } from '@material-ui/core'\nimport { useQuote, useCandlestickList } from './hook'\nimport { LoopringAPI } from 'stores/apis/api'\nimport { TradingInterval } from 'loopring-sdk/dist'\nimport { TableWrapStyled } from 'pages/styled'\n\nconst  RowStyled = styled(Grid)`\n      & .MuiGrid-root:not(:last-of-type) > div{\n        margin-right: ${({theme}) => theme.unit * 3}px;\n      }\n` as typeof Grid\n\n\nexport type CandlestickItem = {\n  market: string;\n  data: {\n    close: number;\n    timeStamp: number;\n  }[]\n}\n\nconst QuotePage = withTranslation('common')((rest: WithTranslation) => {\n    const [candlestickList, setCandlestickList] = React.useState<CandlestickItem[]>([])\n    const getCandlestick = React.useCallback(async (market: string) => {\n      if (LoopringAPI.exchangeAPI) {\n        const res = await LoopringAPI.exchangeAPI.getMixCandlestick({\n          market: market,\n          interval: TradingInterval.d1,\n          // start?: number;\n          // end?: number;\n          limit: 30\n        })\n        if (res && res.candlesticks && !!res.candlesticks.length) {\n          const data = res.candlesticks.map(o => ({\n            close: o.close,\n            timeStamp: o.timestamp\n          }))\n          setCandlestickList(prev => [...prev, {\n            market: market,\n            data: data\n          }])\n        }\n      }\n    }, [])\n\n    const { recommendations, tickList, onVisibleRowsChange } = useQuote()\n    React.useEffect(() => {\n      const list = recommendations.map(item => {\n        const market = `${item.coinAInfo.simpleName}-${item.coinBInfo.simpleName}`\n        return market\n      })\n      if (!!list.length) {\n        getCandlestick(list[0])\n        getCandlestick(list[1])\n        getCandlestick(list[2])\n        getCandlestick(list[3])\n      }\n    }, [recommendations, getCandlestick])\n\n\n\n    return <Box display={'flex'} flexDirection={'column'} flex={1} >\n\n        <RowStyled container >\n\n            {/* {recommendations.map((item,index)=> <Grid key={item.coinAInfo+item.coinBInfo+index} item xs={3} >\n                    <MarketBlock {...{...item, ...rest}}></MarketBlock>\n                </Grid>\n            )} */}\n            {recommendations.map((item,index)=> {\n              const market = `${item.coinAInfo.simpleName}-${item.coinBInfo.simpleName}`\n              const chartData = candlestickList.find(o => o.market === market)?.data\n              return (\n                <Grid key={item.coinAInfo+item.coinBInfo+index} item xs={3} >\n                    <MarketBlock {...{...item, chartData: chartData ? chartData : [], ...rest}}></MarketBlock>\n                </Grid>\n              )\n            } \n            )}\n\n\n\n        </RowStyled>\n        <TableWrapStyled container marginY={3}  paddingBottom={2} flex={1}>\n            <Grid item xs={12} display={'flex'}>\n                <QuoteTable onVisibleRowsChange={onVisibleRowsChange}  rawData={tickList} {...{ ...rest }} />\n            </Grid>\n        </TableWrapStyled>\n    </Box>\n\n\n})\n\nexport default QuotePage\n","import { useCallback, useState } from 'react'\n\nimport { useExchangeAPI } from 'hooks/exchange/useApi'\nimport { useCustomDCEffect } from 'hooks/common/useCustomDCEffect'\n\nimport { TradingInterval, Candlestick, GetCandlestickRequest, GetDepthRequest, GetTickerRequest, dumpError400, getExistedMarket } from 'loopring-sdk'\nimport { fromWEI } from 'utils/swap_calc_utils'\n\nimport { ChartUnit, CoinInfo } from '@loopring-web/component-lib/static-resource'\n\nimport { ChartType } from '@loopring-web/component-lib'\n\nimport { TGItemData, TGItemJSXInterface, } from '@loopring-web/component-lib'\n\nimport { IGetDepthDataParams } from '@loopring-web/component-lib/components/charts/scaleAreaChart/data'\n\nconst toggleData: TGItemData[] = [\n  {\n    value: ChartType.Trend,\n    key: ChartType.Trend,\n    label: 'label' + ChartType.Trend\n  },\n  {\n    value: ChartType.Depth,\n    key: ChartType.Depth,\n    label: 'label' + ChartType.Depth\n  },\n]\n\nexport function useBasicInfo(props: any, coinAInfo: any, coinBInfo: any, marketArray: any[], t: any) {\n  const tgItemJSXs: TGItemJSXInterface[] = toggleData.map(({ value, label, key }) => {\n    return { value, tlabel: t(label), key, JSX: <>{t(label)}</> }\n  })\n\n  // const { base, quote, market, tokens } = props\n\n  const { market, amm } = getExistedMarket(marketArray, coinAInfo?.name, coinBInfo?.name)\n\n  const [chartType, setChartType] = useState<ChartType>(ChartType.Trend)\n\n  // console.log('---useBasicInfo market:', market, ' amm:', amm, ' chartType:', chartType)\n  //\n  // const [change, setChange] = useState(0)\n  //\n  // const [volume, setVolume] = useState('')\n\n  const [chartUnit, setChartUnit] = useState(ChartUnit.D1)\n\n  const [originData, setOriginData] = useState<any>(undefined)\n\n  const handleChange = useCallback((_e: React.MouseEvent, value: any) => {\n    // Settings.setChartType(value)\n    // console.log('useBasicInfo handleChange:', value)\n    setOriginData(undefined)\n    setChartType(value)\n  }, [setOriginData, setChartType])\n\n  const exchangeApi = useExchangeAPI()\n\n  // useCustomDCEffect(async () => {\n  //\n  //   if (!exchangeApi || !market || !tokens || !quote) {\n  //     return\n  //   }\n  //\n  //   let mounted = true\n  //\n  //   try {\n  //\n  //     const request: GetTickerRequest = {\n  //       market: market.market,\n  //     }\n  //\n  //     const ticker = await exchangeApi.getTicker(request)\n  //     if (mounted) {\n  //\n  //       if (ticker.tickList[0].change) {\n  //         setChange(ticker.tickList[0].change)\n  //       }\n  //\n  //       if (ticker.tickList[0].base_token_volume) {\n  //         const baseVol = fromWEI(tokens.tokenSymbolMap, base, ticker.tickList[0].base_token_volume) as string\n  //         setVolume(baseVol)\n  //       }\n  //     }\n  //   }\n  //   catch (reason) {\n  //     dumpError400(reason, 'ChartPanel getCandlestick')\n  //   }\n  //\n  //   return () => {\n  //     mounted = false\n  //   }\n  //\n  // }, [exchangeApi, market, tokens, base,])\n\n  const tgItemJSXsPriceChart: TGItemJSXInterface[] = Object.keys(ChartUnit).reduce((pre, item) => {\n    // @ts-ignore\n    const tGItemData: TGItemData = { value: ChartUnit[item], key: ChartUnit[item], label: 'label' + ChartUnit[item] };\n    pre.push({ value: tGItemData.value, tlabel: t(tGItemData.label ? tGItemData.label : tGItemData.key), key: tGItemData.key, JSX: <>{t(tGItemData.label ? tGItemData.label : tGItemData.key)}</> })\n    return pre\n  }, [] as TGItemJSXInterface[])\n\n  useCustomDCEffect(async () => {\n  \n    let mounted = true\n  \n    if (!exchangeApi || !market || !amm) {\n      return\n    }\n  \n    if (chartType === ChartType.Trend) {\n      const request: GetCandlestickRequest = {\n        market: amm as string,\n        interval: TradingInterval.min15,\n        limit: 96\n      }\n  \n      try {\n        const candlesticks = await exchangeApi.getCandlestick(request)\n  \n        if (mounted) {\n          const originData = candlesticks.candlesticks.map((item: Candlestick) => {\n            return {\n              timeStamp: item.timestamp,\n              low: item.low,\n              high: item.high,\n              open: item.open,\n              close: item.close,\n              volume: item.quoteVol,\n            }\n          })\n          console.log(`useBasicInfo amm: ${amm} candlesticks originData: `, originData)\n          setOriginData(originData)\n        }\n      }\n      catch (reason) {\n        dumpError400(reason, 'ChartPanel getCandlestick')\n      }\n  \n    } else {\n      const request: GetDepthRequest = {\n        market,\n      }\n  \n      try {\n  \n        const { depth } = await exchangeApi.getMixDepth(request)\n        console.log('useBasicInfo depth:', depth)\n        if (mounted) {\n          const originData: IGetDepthDataParams = {\n            bidsPrices: depth.bids_prices,\n            bidsAmtTotals: depth.bids_amtTotals as any,\n            asksPrices: depth.asks_prices,\n            asksAmtTotals: depth.asks_amtTotals as any,\n          }\n          setOriginData(originData)\n        }\n  \n      } catch (reason) {\n        dumpError400(reason)\n      }\n  \n    }\n  \n    return () => {\n      mounted = false\n    }\n  \n  }, [exchangeApi, amm, market, chartType])\n\n  return {\n    // change,\n    // volume,\n    chartUnit,\n    chartType,\n    tgItemJSXs,\n    tgItemJSXsPriceChart,\n    handleChange,\n    originData,\n  }\n}","import { ChartUnit,UpColor } from '@loopring-web/component-lib/static-resource'\nimport { ScaleAreaChart, ToggleButtonGroup, useSettings,TradeTitle } from '@loopring-web/component-lib'\nimport { Box, Grid } from \"@material-ui/core\"\nimport { WithTranslation } from 'react-i18next'\nimport { useBasicInfo } from './hook'\n\nconst BasicInfoPanel = ({ props, coinAInfo, coinBInfo, tradeFloat, marketArray, t, ...rest }: any & WithTranslation) => {\n\n    const {\n        // change,\n        chartType,\n        tgItemJSXs,\n        tgItemJSXsPriceChart,\n        handleChange,\n        originData,\n    } = useBasicInfo(props, coinAInfo, coinBInfo, marketArray, t)\n    const { upColor } = useSettings();\n\n    return <>\n        <Grid item xs={8}>\n            <TradeTitle {...{\n                coinAInfo, coinBInfo,\n                ...rest, t, tradeFloat\n            }}></TradeTitle>\n        </Grid>\n        <Grid item xs={4} display={'flex'} justifyContent={'flex-end'} alignItems={'flex-end'}>\n            <ToggleButtonGroup exclusive {...{ ...rest, t, tgItemJSXs, value: chartType }}\n                handleChange={handleChange} />\n        </Grid>\n\n        <Grid item xs={12}>\n            <Box minHeight={256} maxHeight={256} display={'block'} style={{ height: '100%', width: '100%' }}>\n                <ScaleAreaChart type={chartType} data={originData ?? []} riseColor={upColor as keyof typeof UpColor}\n                    handleMove={() => {\n                    }} />\n            </Box>\n        </Grid>\n        <Grid item xs={12} height={24} display={'flex'} justifyContent={'flex-end'}>\n            <ToggleButtonGroup exclusive {...{\n                ...rest, t, tgItemJSXs: tgItemJSXsPriceChart,\n                value: ChartUnit.D1, size: 'small'\n            }}\n                handleChange={() => undefined} />\n        </Grid>\n    </>\n\n};\n\nexport default BasicInfoPanel\n","\n\nimport { RefAttributes, useState } from 'react'\n\nimport Tabs from '@material-ui/core/Tabs'\nimport Tab from '@material-ui/core/Tab'\nimport Checkbox from '@material-ui/core/Checkbox'\nimport styled from '@emotion/styled'\n\nimport { FormControlLabel, TradeTable, } from '@loopring-web/component-lib'\nimport { withTranslation, WithTranslation } from 'react-i18next';\nimport { CheckBoxIcon, CheckedIcon } from '@loopring-web/component-lib/static-resource'\nimport { RouteComponentProps, withRouter } from 'react-router'\nimport { Box } from '@material-ui/core';\nimport { RawDataTradeItem } from '@loopring-web/component-lib/components/tableList/tradeTable/TradeTable';\nimport { BasicHeaderItem, HeadMenuType } from '@loopring-web/component-lib/components/basic-lib/lists/Interface';\nimport { TableWrapStyled } from '../../../styled';\n\n// const StylePaper = styled(Box)`\n//\n//\n//   background-color: ${({theme}) => theme.colorBase.background().default};\n//   border-radius: ${({theme}) => theme.unit}px;\n//\n//   //padding: 20px;\n//\n//   // .tableWrapper {\n//   //   margin-top: ${({theme}) => theme.unit * 1.5}px;\n//   //   border: 1px solid ${({theme}) => theme.colorBase.borderColor};\n//   //   border-radius: ${({theme}) => theme.unit}px;\n//   //   padding: 26px;\n//   // }\n// ` as typeof Box;\n\n\nconst applyProps = (index: number) => {\n    return {\n        id: `simple-tab-${index}`,\n        'aria-controls': `simple-tabpanel-${index}`,\n    }\n}\nconst StyledTabsWrapper = styled.div`\n          position: relative;\n          width: 100%;\n          margin-top: ${({theme}) => theme.unit * 4}px;\n        `\n\nconst StyledFormControlLabel = styled(FormControlLabel)`\n          position: absolute;\n          top: 0;\n          right: ${({theme}) => theme.unit}px;\n          margin: ${({theme}) => theme.unit}px 0 0 0;\n        `\n\n\nconst TradePanel = withTranslation('common')(\n   // withRouter(\n    (\n        {tradeArray,  myTradeArray, t}:\n            { tradeArray: RawDataTradeItem[], myTradeArray: RawDataTradeItem[] } & WithTranslation & RouteComponentProps) => {\n        const [isAllTrade, setIsAllTrade] = useState(false)\n        const [value, setValue] = useState(1)\n        const handleChange = (event: any, newValue: any) => {\n            setValue(newValue)\n        }\n\n        const handleCheckboxChange = () => {\n            setIsAllTrade((flag: boolean) => !flag)\n        }\n\n        return (\n            <StyledTabsWrapper>\n                <StyledFormControlLabel\n                    control={<Checkbox checked={isAllTrade} size={'small'} checkedIcon={<CheckedIcon/>}\n                                       icon={<CheckBoxIcon/>} color={'default'} onChange={handleCheckboxChange}/>}\n                    label={t('labelTradePanelHideOtherPairs')}/>\n\n                <Tabs value={value}\n                      onChange={handleChange}\n                      aria-label=\"tabs switch\">\n                    <Tab label={t('labelMyTrade')} {...applyProps(0)} />\n                    <Tab label={t('labelRecent')}   {...applyProps(1)} />\n                </Tabs>\n\n                <TableWrapStyled marginY={2}  paddingBottom={2} flex={1}>\n                    {value === 0 ?  <TradeTable rawData={myTradeArray} /> : <TradeTable rawData={tradeArray}/> }\n                </TableWrapStyled>\n\n            </StyledTabsWrapper>\n        )\n    }\n    ) as  (props: { tradeArray: RawDataTradeItem[], myTradeArray: RawDataTradeItem[] }) => JSX.Element;\n//)\n\nexport default TradePanel\n\n","import { Box, Grid, } from '@material-ui/core'\nimport { WithTranslation, withTranslation } from 'react-i18next'\nimport BasicInfoPanel from './panel/BasicInfoPanel'\nimport TradePanel from './panel/TradePanel'\nimport styled from 'styled-components'\nimport { useSwapPage } from './hook';\nimport { SwapPanel } from '@loopring-web/component-lib'\n\nconst FixedStyle = styled(Box)`\n  @media only screen and (min-height: 680px ) and (min-width:1024px){\n    position: fixed;\n  }\n`\n\nexport const SwapPage = withTranslation('common')(({ ...rest }: WithTranslation) => {\n\n    const {tradeCalcData,tradeData,tradeFloat,tradeArray, myTradeArray, marketArray, handleSwapPanelEvent,onSwapClick,pair,swapBtnI18nKey} = useSwapPage();\n\n    return <>\n        <Grid container marginRight={3} alignContent={'flex-start'} >\n            <BasicInfoPanel {...{ ...rest,\n                ...pair, marketArray,\n                tradeFloat, tradeArray }} />\n            <TradePanel tradeArray={tradeArray} myTradeArray={myTradeArray} />\n\n            {/**/}\n        </Grid>\n\n        <Box display={'flex'} style={{ minWidth: 'var(--swap-box-width)' }} >\n            <FixedStyle>\n                <SwapPanel tradeData={tradeData}\n                           tradeCalcData={tradeCalcData}\n                           onSwapClick={onSwapClick}\n                           swapBtnI18nKey={swapBtnI18nKey}\n                           // handleError={}\n                           {...{handleSwapPanelEvent,...rest}}\n                />\n            </FixedStyle>\n\n        </Box>\n\n    </>\n});\n\n\n // SwapPage\n","import { useRouteMatch } from 'react-router';\nimport { CoinInfo, IBData, TradeCalcData } from '@loopring-web/component-lib/static-resource';\nimport React, { useState } from 'react';\nimport { LoopringAPI } from '../../stores/apis/api';\nimport { useTokenMap } from '../../stores/token';\nimport * as fm from 'loopring-sdk';\nimport {\n    AmmPoolInfoV3,\n    AmmPoolSnapshot,\n    dumpError400,\n    getExistedMarket,\n    GetNextStorageIdRequest,\n    LoopringMap,\n    OrderType,\n    SubmitOrderRequestV3,\n    VALID_UNTIL\n} from 'loopring-sdk';\nimport { useAmmMap } from '../../stores/Amm/AmmMap';\nimport { RawDataTradeItem } from '@loopring-web/component-lib/components/tableList/tradeTable/TradeTable';\nimport { useWalletLayer2 } from '../../stores/walletLayer2';\nimport { CustomError, ErrorMap, globalSetup, TradeFloat } from '@loopring-web/component-lib/src/static-resource';\nimport { SwapTradeData } from '@loopring-web/component-lib';\nimport { SwapData } from '@loopring-web/component-lib/components/panel/components/panel/SwapWrap/Interface';\nimport { SwapType } from '@loopring-web/component-lib/components/panel/Interface';\nimport { useAccount } from '../../stores/account/hook';\nimport { useCustomDCEffect } from '../../hooks/common/useCustomDCEffect';\nimport {\n    accountStaticCallBack,\n    bntLabel,\n    btnClickArray,\n    coinPairInit,\n    fnType,\n    getUserTrades,\n    makeCache,\n    makeMarketArray,\n    makeTickView,\n    makeWallet,\n    pairDetailBlock,\n    pairDetailDone\n} from '../../hooks/help';\nimport * as _ from 'lodash'\nimport store from 'stores';\nimport { AccountStatus } from 'state_machine/account_machine_spec';\n\nexport const useSwapPage = <C extends { [ key: string ]: any }>() => {\n    /*** api prepare ***/\n        // const exchangeApi = exchangeAPI();\n    const wait = globalSetup.wait;\n    const match: any = useRouteMatch(\":symbol\")\n    const {coinMap, tokenMap, marketArray, marketCoins, marketMap,} = useTokenMap()\n    const {ammMap} = useAmmMap();\n    // const {setShowConnect, setShowAccountInfo} = useOpenModals();\n    // const {ShowDeposit} = useModals()\n    const {account} = useAccount()\n\n    const walletLayer2State = useWalletLayer2();\n\n    const [tradeData, setTradeData] = React.useState<SwapTradeData<IBData<C>> | undefined>(undefined);\n    const [tradeCalcData, setTradeCalcData] = React.useState<TradeCalcData<C> | undefined>(undefined);\n    const [tradeArray, setTradeArray] = React.useState<RawDataTradeItem[]>([]);\n    const [myTradeArray, setMyTradeArray] = React.useState<RawDataTradeItem[]>([]);\n    const [tradeFloat, setTradeFloat] = React.useState<TradeFloat | undefined>(undefined);\n    const [pair, setPair] = React.useState<{ coinAInfo: CoinInfo<C> | undefined, coinBInfo: CoinInfo<C> | undefined }>({\n        coinAInfo: undefined,\n        coinBInfo: undefined,\n    });\n\n\n    const [ammPoolSnapshot, setAmmPoolSnapshot] = React.useState<AmmPoolSnapshot | undefined>(undefined);\n\n    const [swapBtnI18nKey, setSwapBtnI18nKey] = React.useState<string | undefined>(undefined);\n\n    const [output, setOutput] = useState<any>()\n\n    //HIGH: get Router info\n    // const symbol = match?.params.symbol ?? undefined;\n    React.useEffect(() => {\n        const symbol = match?.params.symbol ?? undefined;\n        resetSwap(symbol, undefined, undefined, undefined)\n    }, []);\n    //TODO tickMap\n    React.useEffect(() => {\n    }, [])\n\n    //HIGH: effect by wallet state update\n    React.useEffect(() => {\n        switch (walletLayer2State.status) {\n            case \"ERROR\":\n                walletLayer2State.statusUnset();\n                // setState('ERROR')\n                //TODO: show error at button page show error  some retry dispath again\n                break;\n            case \"DONE\":\n                walletLayer2State.statusUnset();\n                const {walletMap} = makeWallet();\n                if (tradeCalcData) {\n                    setTradeCalcData({...tradeCalcData, walletMap} as TradeCalcData<C>);\n                    setTradeData({\n                        sell: {\n                            belong: tradeCalcData.sellCoinInfoMap ? tradeCalcData.sellCoinInfoMap[ tradeCalcData.coinSell ]?.simpleName : undefined,\n                            balance: walletMap ? walletMap[ tradeCalcData.coinSell ]?.count : 0\n                        },\n                        // @ts-ignore\n                        buy: {\n                            belong: tradeCalcData.sellCoinInfoMap ? tradeCalcData.sellCoinInfoMap[ tradeCalcData.coinBuy ]?.simpleName : undefined,\n                            balance: walletMap ? walletMap[ tradeCalcData.coinBuy ]?.count : 0\n                        },\n                    } as SwapTradeData<IBData<C>>)\n                    let {\n                        amm,\n                        market\n                    } = getExistedMarket(marketArray, tradeCalcData.coinSell as string, tradeCalcData.coinBuy as string);\n                    getUserTrades(market).then((marketTrades) => {\n                        let _myTradeArray = makeMarketArray(market, marketTrades) as RawDataTradeItem[]\n                        setMyTradeArray(_myTradeArray ? _myTradeArray : [])\n                    })\n                }\n                break;\n            default:\n                break;\n\n        }\n    }, [walletLayer2State.status, setMyTradeArray])\n\n    React.useEffect(() => {\n    }, [])\n\n\n    useCustomDCEffect(() => {\n        const label: string | undefined = accountStaticCallBack(bntLabel)\n        setSwapBtnI18nKey(label);\n    }, [account.status, bntLabel])\n\n    const onSwapClick = ({sell, buy, slippage, ...rest}: SwapTradeData<IBData<C>>) => {\n        const swapBtnClickArray: typeof btnClickArray = Object.assign(btnClickArray, {\n            [ fnType.ACTIVATED ]: [async function () {\n                //TODO: swap onClick\n\n                const {exchangeInfo} = store.getState().system\n\n                if (!LoopringAPI.userAPI || !tokenMap || !exchangeInfo\n                    || account.status !== AccountStatus.ACTIVATED) {\n                    return\n                }\n\n                console.log('onSwap', sell, buy, slippage)\n                console.log('onSwap output:', output)\n\n                console.log('onSwap account:', account)\n\n                const baseToken = tokenMap[ sell.belong as string ]\n                const quoteToken = tokenMap[ buy.belong as string ]\n\n                const request: GetNextStorageIdRequest = {\n                    accountId: account.accountId,\n                    sellTokenId: baseToken.tokenId\n                }\n\n                const storageId = await LoopringAPI.userAPI.getNextStorageId(request, account.apiKey)\n\n                try {\n\n                    const request: SubmitOrderRequestV3 = {\n                        exchange: exchangeInfo.exchangeAddress,\n                        accountId: account.accountId,\n                        storageId: storageId.orderId,\n                        sellToken: {\n                            tokenId: baseToken.tokenId,\n                            volume: output.amountS\n                        },\n                        buyToken: {\n                            tokenId: quoteToken.tokenId,\n                            volume: output.amountBOutSlip\n                        },\n                        allOrNone: false,\n                        validUntil: VALID_UNTIL,\n                        maxFeeBips: 60,\n                        fillAmountBOrS: false, // amm only false\n                        orderType: OrderType.ClassAmm,\n                        eddsaSignature: '',\n                    }\n\n                    console.log(request)\n\n                    const response = await LoopringAPI.userAPI.submitOrder(request, account.eddsaKey, account.apiKey)\n\n                    console.log(response)\n\n                } catch (reason) {\n                    dumpError400(reason)\n                }\n\n                if (rest.__cache__) {\n                    makeCache(rest.__cache__)\n                }\n            }, {sell, buy, slippage}]\n        })\n        accountStaticCallBack(swapBtnClickArray)\n    }\n    const handleSwapPanelEvent = async (swapData: SwapData<SwapTradeData<IBData<C>>>, switchType: any): Promise<void> => {\n        //TODO setMarket(market);\n        // _.throttle(()=>{\n        const {tradeData} = swapData\n        return new Promise((resolve) => {\n            switch (switchType) {\n                case SwapType.SEll_CLICK:\n                    break\n                case SwapType.BUY_CLICK:\n                    break\n                case SwapType.SELL_SELECTED:\n                    resetSwap(`${tradeData.sell.belong}-${tradeData.buy.belong}`, 'sell', tradeData, ammPoolSnapshot)\n                    break\n                case SwapType.BUY_SELECTED:\n                    resetSwap(`${tradeData.sell.belong}-${tradeData.buy.belong}`, 'buy', tradeData, ammPoolSnapshot)\n                    break\n                case SwapType.EXCHANGE_CLICK:\n                    resetSwap(`${tradeData.sell.belong}-${tradeData.buy.belong}`, undefined, undefined, ammPoolSnapshot)\n                    break\n                default:\n                    break\n            }\n\n            resolve(undefined)\n        })\n        // },wait)\n\n    }\n\n    const calculateTradeData = async (type: 'sell' | 'buy', _tradeData: SwapTradeData<IBData<C>>, ammPoolSnapshot: AmmPoolSnapshot | undefined): Promise<{ _tradeCalcData: TradeCalcData<C>, _tradeData: SwapTradeData<IBData<C>> }> => {\n        //if(`${pair.coinAInfo?.simpleName}-${pair.coinBInfo?.simpleName}` === coinKey)\n        if (_tradeData[ type ].tradeValue && tradeCalcData) {\n            type === 'sell' ? _tradeData[ 'buy' ].tradeValue = fm.toBig(_tradeData[ 'sell' ].tradeValue).times(tradeCalcData.StoB).toNumber()\n                : _tradeData[ 'sell' ].tradeValue = fm.toBig(_tradeData[ 'buy' ].tradeValue).times(tradeCalcData.BtoS).toNumber()\n        }\n        const market = `${pair.coinAInfo?.simpleName}-${pair.coinBInfo?.simpleName}`\n        const depth = await LoopringAPI.exchangeAPI?.getMixDepth({market})\n        if (!marketArray || !tokenMap || !marketMap || !depth || !ammMap || !tradeCalcData) {\n            let _tradeCalcData = {...tradeCalcData} as TradeCalcData<C>;\n            return {_tradeData, _tradeCalcData}\n        }\n\n        const isAtoB = type === 'sell'\n        let input: any = (isAtoB ? _tradeData.sell.tradeValue : _tradeData.buy.tradeValue)\n\n        if (input) {\n            input = input.toString()\n        } else {\n            input = '0'\n        }\n\n        const base = _tradeData.sell.belong as string\n        const quote = _tradeData.buy.belong as string\n\n        const output = fm.getOutputAmount(input, base, quote, isAtoB, marketArray, tokenMap,\n            marketMap, depth?.depth, {[ 'AMM-' + market ]: ammMap[ 'AMM-' + market ].__rawConfig__} as LoopringMap<AmmPoolInfoV3>,\n            ammPoolSnapshot, '6', '200')\n\n        console.log('output:', output)\n\n        setOutput(output)\n\n        tradeCalcData.priceImpact = output?.priceImpact as string\n\n        if (isAtoB) {\n            _tradeData.buy.tradeValue = output?.output ? parseFloat(output?.output) : 0\n        } else {\n            _tradeData.sell.tradeValue = output?.output ? parseFloat(output?.output) : 0\n        }\n        //TODO: renew  tradeCalcData\n        let _tradeCalcData = {...tradeCalcData} as TradeCalcData<C>;\n        return {_tradeData, _tradeCalcData}\n    }\n\n    const throttleSetValue = React.useCallback(_.debounce(async (type, _tradeData, _ammPoolSnapshot) => {\n        const {_tradeData: td, _tradeCalcData} = await calculateTradeData(type, _tradeData, _ammPoolSnapshot)//.then(()=>{\n        setTradeData(td)\n        setTradeCalcData(_tradeCalcData)\n\n    }, wait * 2), [setTradeData, setTradeCalcData, calculateTradeData]);\n\n    const resetSwap = async (coinKey: any, type: 'sell' | 'buy' | undefined, _tradeData: SwapTradeData<IBData<C>> | undefined, _ammPoolSnapshot: AmmPoolSnapshot | undefined) => {\n        if (tradeCalcData\n            && coinKey === `${tradeCalcData.coinSell}-${tradeCalcData.coinBuy}`\n            && _tradeData\n            && type\n            && (!tradeData || (tradeData[ type ].tradeValue !== _tradeData[ type ].tradeValue))) {\n            // calculateTradeData(type,_tradeData,_ammPoolSnapshot)\n            throttleSetValue(type, _tradeData, _ammPoolSnapshot)\n            //throttleSetValue(td,_tradeCalcData);\n\n        } else {\n            let _tradeFloat: Partial<TradeFloat> = {}\n            let _tradeArray: Array<Partial<RawDataTradeItem>> | undefined = undefined;\n            let _tradeCalcData: Partial<TradeCalcData<C>> = coinPairInit({\n                coinKey,\n                _tradeCalcData: {},\n                tokenMap,\n                coinMap\n            })\n            let {\n                amm,\n                market\n            } = getExistedMarket(marketArray, _tradeCalcData.coinSell as string, _tradeCalcData.coinBuy as string);\n            const [, coinA, coinB] = market.match(/(\\w+)-(\\w+)/i)\n\n            setTradeCalcData({...tradeCalcData, ..._tradeCalcData} as TradeCalcData<C>);\n            if (coinMap) {\n                setPair({\n                    coinAInfo: coinMap[ coinA ],\n                    coinBInfo: coinMap[ coinB ],\n                })\n            }\n            if (walletLayer2State.walletLayer2) {\n                const {walletMap} = makeWallet();\n                _tradeCalcData.walletMap = walletMap;\n                getUserTrades(market).then((marketTrades) => {\n                    let _myTradeArray = makeMarketArray(market, marketTrades) as RawDataTradeItem[]\n                    setMyTradeArray(_myTradeArray ? _myTradeArray : [])\n                })\n\n\n            }\n            let apiList = [];\n            //TODO wallet saga done\n            if (marketArray && amm && market && ammMap) {\n                // let pairPromise =  usePairTitleBlock({market})\n                apiList = [\n                    LoopringAPI.exchangeAPI?.getMarketTrades({market}),\n                    pairDetailBlock({coinKey: market, ammKey: amm, ammMap})\n                ];\n                //HiGH: this need add websocket to update infr ticker ammpoolsbalace\n                // @ts-ignore\n                Promise.all([...apiList]).then(\n                    ([{marketTrades}, {ammPoolsBalance, tickMap}]: any[]) => {\n                        setAmmPoolSnapshot(ammPoolsBalance)\n                        if (tokenMap) {\n                            let {_tradeCalcData: _td} = pairDetailDone({\n                                coinKey: `${_tradeCalcData.coinSell}-${_tradeCalcData.coinBuy}`,\n                                market,\n                                ammPoolsBalance,\n                                tickerData: tickMap[ market ] ? tickMap[ market ] : {},\n                                tokenMap,\n                                _tradeCalcData,\n                                coinMap,\n                                marketCoins\n                            })\n                            _tradeCalcData = _td;\n                            _tradeFloat = makeTickView(tickMap[ market ] ? tickMap[ market ] : {})\n                            _tradeArray = makeMarketArray(market, marketTrades)\n                            // @ts-ignore\n                            setTradeCalcData(_tradeCalcData as TradeCalcData<C>);\n                            // @ts-ignore\n                            setTradeFloat(_tradeFloat);\n                            setTradeArray(_tradeArray as RawDataTradeItem[])\n                            // setPair(_pair)\n                            setTradeData({\n                                sell: {\n                                    belong: _tradeCalcData.sellCoinInfoMap ? _tradeCalcData.sellCoinInfoMap[ _tradeCalcData.coinSell ]?.simpleName : undefined,\n                                    balance: _tradeCalcData.walletMap ? _tradeCalcData.walletMap[ _tradeCalcData.coinSell ]?.count : 0\n                                },\n                                // @ts-ignore\n                                buy: {\n                                    belong: _tradeCalcData.sellCoinInfoMap ? _tradeCalcData.sellCoinInfoMap[ _tradeCalcData.coinBuy ]?.simpleName : undefined,\n                                    balance: _tradeCalcData.walletMap ? _tradeCalcData.walletMap[ _tradeCalcData.coinBuy ]?.count : 0\n                                },\n                            } as SwapTradeData<IBData<C>>)\n                        }\n                    }).catch((error) => {\n                    throw new CustomError({...ErrorMap.TRADE_LITE_SET_PAIR_ERROR, options: error})\n                    //TODO solve error\n                })\n\n            }\n        }\n\n    }\n    return {\n        tradeCalcData,\n        tradeFloat,\n        tradeArray,\n        myTradeArray,\n        tradeData,\n        pair,\n        marketArray,\n        onSwapClick,\n        swapBtnI18nKey,\n        handleSwapPanelEvent\n    }\n\n}","import { useCallback, useMemo, useState, useRef, useEffect } from 'react'\n\nimport { useWsAPI, } from './useApi'\n\nimport { ChainId, getAccountArg, getCandlestickArg, getAmmpoolArg, \n    getTickerArg, WsProps } from 'loopring-sdk'\nimport store from 'stores'\n\nconst stateArr = [\n    { key: 0, value: 'Connecting' },\n    { key: 1, value: 'Connected' },\n    { key: 2, value: 'Closing' },\n    { key: 3, value: 'Closed' }\n]\n\nexport const useWebsocket = ({ topics, verify, needApiKey, apiKey, }: { topics: any, needApiKey: boolean, apiKey: string|undefined, verify: boolean, }) => {\n    const ws = useRef<WebSocket | null>(null)\n    const [wsData, setMessage] = useState<any>(undefined)\n    const [readyState, setReadyState] = useState({ key: 0, value: 'Connecting' })\n\n    const chainId = store.getState().trading.chainId\n\n    const api = useWsAPI()\n\n    const creatWebSocket = () => {\n\n        if (!api || !chainId) {\n            return\n        }\n\n        api.getWsKey().then((wsApiKey: any) => {\n            let basePath: string = 'wss://ws.'\n            switch (chainId) {\n                case ChainId.MAINNET:\n                    basePath += process.env.REACT_APP_API_URL\n                    break\n                default:\n                    basePath += process.env.REACT_APP_API_URL_UAT\n                    basePath = 'wss://ws.uat2.loopring.io'\n            }\n\n            console.log('wsApiKey:', wsApiKey.wsKey)\n\n            basePath += '/v3/ws?wsApiKey=' + wsApiKey.wsKey\n    \n            try {\n                ws.current = new WebSocket(basePath)\n\n                const subTopics = (topics: any) => {\n                    let data: any = {\n                        op: 'sub',\n                        unsubscribeAll: 'true',\n                        topics: topics,\n                    }\n            \n                    if (needApiKey && apiKey) {\n                        data.apiKey = apiKey\n                    }\n            \n                    const flat_txt = JSON.stringify(data)\n                    sendMessage(flat_txt)\n                }\n    \n                ws.current.onopen = (_e) => {\n                    setReadyState(stateArr[ws.current?.readyState ?? 0])\n                    // subTopics(topics)\n                }\n                \n                ws.current.onclose = (e) => {\n                    setReadyState(stateArr[ws.current?.readyState ?? 0])\n                }\n                \n                ws.current.onerror = (e) => {\n                    setReadyState(stateArr[ws.current?.readyState ?? 0])\n                }\n    \n                ws.current.onmessage = (e) => {\n                    setMessage(e.data)\n                }\n            } catch (error) {\n                console.log(error)\n            }\n\n        })\n\n    }\n\n    const webSocketInit = () => {\n        if (!ws.current || ws.current.readyState === 3) {\n            creatWebSocket()\n        }\n    }\n\n    const closeWebSocket = () => {\n        ws.current?.close()\n    }\n\n    const sendMessage = (msg: any) => {\n        ws.current?.send(msg)\n    }\n\n    const reconnect = () => {\n        try {\n            closeWebSocket()\n            ws.current = null\n            // creatWebSocket()\n        } catch (e) {\n            console.log(e)\n        }\n    }\n\n    useEffect(() => {\n\n        verify && webSocketInit()\n        return () => {\n            ws.current?.close()\n        }\n    }, [ws, verify, webSocketInit])\n\n    return {\n        wsData,\n        readyState,\n        sendMessage,\n        closeWebSocket,\n        reconnect,\n    }\n}\n\nexport function useWs(topics: any, needApiKey: boolean, apiKey?: string, verify: boolean = true) {\n    const [socketData, setSocketData] = useState({})\n\n    const [isLocalPage, setIsLocalPage] = useState<boolean>(true)\n\n    useEffect(() => {\n\n        let mounted = true\n\n        const checkIsLocalPage = () => {\n            console.log('enter checkIsLocalPage')\n            document.addEventListener('visibilitychange', function () {\n                // page invisible trigger!\n                let isLocalPage = true\n                if (document.visibilityState === 'hidden') {\n                    isLocalPage = false\n                }\n                if (mounted) {\n                    setIsLocalPage(isLocalPage)\n                } else {\n                    console.log('unmounted! dont setIsLocalPage!')\n                }\n            })\n        }\n\n        checkIsLocalPage()\n\n        return () => {\n            mounted = false\n        }\n\n    }, [])\n\n    const { wsData, readyState, closeWebSocket, reconnect, sendMessage, } = useWebsocket({\n        topics,\n        apiKey,\n        needApiKey,\n        verify,\n    })\n\n    useEffect(() => {\n    \n        if (needApiKey && !apiKey) {\n            return\n        }\n\n        if (!verify) {\n            return\n        }\n\n        if (wsData === 'ping') {\n            try {\n                sendMessage('pong')\n            } catch (err) {\n                console.log(err)\n            }\n        } else {\n            if (wsData) {\n                setSocketData(JSON.parse(wsData))\n            }\n        }\n        \n        // if closed and is currente page then, reconnect.\n        if (readyState.key === 3 && isLocalPage) {\n            // reconnect()\n        }\n        // if not current page, close it.\n        if (!isLocalPage) {\n            closeWebSocket()\n        }\n\n    }, [wsData, readyState, isLocalPage, verify, apiKey])\n\n    return {\n        socketData,\n    }\n}\n\nexport function useAmmpoolWs(apiKey: string) {\n\n    let topics: any[] = []\n\n    topics.push(getTickerArg('LRC-ETH'))\n\n    topics.push(getAmmpoolArg('0x18920d6E6Fb7EbE057a4DD9260D6D95845c95036'))\n\n    const needApiKey = false\n\n    const { socketData } = useWs(topics, needApiKey, apiKey)\n\n    return {\n        socketData,\n    }\n\n}\n","import { useState, } from 'react'\n\nimport { getAccountArg, getCandlestickArg, \n  getAmmpoolArg, getTickerArg, getOrderArg, WsTopicType, } from 'loopring-sdk'\n\nimport { useWs } from './useWebsocketApi'\nimport { useCustomDCEffect } from 'hooks/common/useCustomDCEffect'\n\nimport { useGetMarkets } from \"hooks/exchange/useExchangeAPI\"\n\nfunction useHandleSocketData(data: any) {\n  const [account, setAccount] = useState<any>()\n  const [ammPool, setAmmPool] = useState<any>()\n  const [order, setOrder] = useState<any>()\n  const [ticker, setTicker] = useState<any>()\n\n  useCustomDCEffect(() => {\n\n      // console.log('useCustomDCEffect ws!~ data:', data)\n\n      if (!data) {\n        return\n      }\n\n      if (data.op) {\n        return\n      }\n\n      if (!data.topic || !data.topic.topic) {\n        return\n      }\n\n      switch(data.topic.topic) {\n        case WsTopicType.account:\n          // console.log(',data.data:', data.data)\n          setAccount(data.data)\n          break\n        case WsTopicType.ammpool:\n          let ammPool = {\n            baseAmt: data.data[0][0],\n            quoteAmt: data.data[0][1],\n            timestamp: data.data[1],\n          }\n          // console.log(',ammPool:', ammPool)\n          setAmmPool(ammPool)\n          break\n        case WsTopicType.candlestick:\n          break\n        case WsTopicType.order:\n          setOrder(data.data)\n          break\n        case WsTopicType.orderBook:\n          break\n        case WsTopicType.ticker:\n          setTicker(data.data)\n          break\n        case WsTopicType.trade:\n          break\n        default:\n          throw Error('Unknown WsTopicType:' + data.topic.topic)\n      }\n  }, [data])\n\n  return {\n    account,\n    ammPool,\n    order,\n    ticker,\n  }\n}\n\nexport function useSwapPageWs(poolAddress: string, market: string, apiKey: string) {\n\n  let topics: any[] = []\n\n  topics.push(getAccountArg())\n  topics.push(getOrderArg(market))\n  topics.push(getAmmpoolArg(poolAddress))\n\n  const { socketData } = useWs(topics, true, apiKey, !!poolAddress && !!market && !!apiKey)\n\n  return useHandleSocketData(socketData)\n\n}\n\nexport function useQuotePageWs() {\n\n  const { markets } = useGetMarkets()\n\n  let topics: any[] = []\n\n  if (markets) {\n\n    const keys = Reflect.ownKeys(markets.markets)\n\n    let c = 0\n  \n    keys.every((item: any) => {\n      c += 1\n      topics.push(getTickerArg(item))\n      if (c >= 20) {\n        return false\n      }\n\n      return true\n    })\n\n  }\n\n  const { socketData } = useWs(topics, false)\n\n  return useHandleSocketData(socketData)\n\n}\n","import { useRef } from 'react'\n\n// import Qrcode from 'components/qrcodes/Qrcode'\n\n\nimport { useAccount } from 'stores/account/hook'\n\nimport { useGetExchangeInfo, useGetGas, useGetMarkets, useGetTokens } from 'hooks/exchange/useExchangeAPI'\n\nimport { useAmmpoolWs } from 'hooks/common/useWebsocketApi'\nimport { useQuotePageWs } from 'hooks/exchange/useWsAPI'\n\nconst DebugPage = () => {\n\n  const {ticker} = useQuotePageWs()\n\n  return (\n    <div>\n      Debug\n      <div>wsdata: {JSON.stringify(ticker)}</div>\n    </div>\n  )\n\n}\n\nexport default DebugPage\n","import React, { useEffect } from 'react'\nimport { TransactionTable, RawDataTransactionItem, TransactionTradeTypes, TransactionSide, TransactionStatus } from '@loopring-web/component-lib'\nimport { WithTranslation, withTranslation } from 'react-i18next'\nimport store from 'stores'\nimport { LoopringAPI } from 'stores/apis/api'\nimport { volumeToCount } from 'hooks/help'\nimport { StylePaper } from '../../styled'\n\n\nconst TxPanel = withTranslation('common')((rest:WithTranslation<'common'>) => {\n    const container = React.useRef(null);\n    const [pageSize, setPageSize] = React.useState(10);\n    const [txTableData, setTxTableData] = React.useState<RawDataTransactionItem[]>([]);\n\n    const { accountId,apiKey } = store.getState().account;\n\n    useEffect(() => {\n        (async function getUserApi () {\n            if (LoopringAPI && LoopringAPI.userAPI && accountId && apiKey) {\n                const userTxns = await LoopringAPI.userAPI.getUserTranferList({\n                    accountId,\n                }, apiKey)\n                const mappingList = userTxns.userTransfers.map(o => ({\n                  token: o.symbol,\n                  from: o.senderAddress,\n                  to: o.receiverAddress,\n                  // amount: Number(o.amount),\n                  amount: Number(volumeToCount(o.symbol, o.amount)),\n                  fee: {\n                    unit: o.feeTokenSymbol || '',\n                    value: Number(volumeToCount(o.symbol, o.feeAmount || 0))\n                  },\n                  memo: o.memo || '',\n                  time: o.timestamp,\n                  txnHash: o.hash,\n                  status: o.status === 'processed' ? TransactionStatus.processed : o.status === 'processing' ? TransactionStatus.processing : o.status === 'received' ? TransactionStatus.received : TransactionStatus.failed,\n                  tradeType: o.txType === 'TRANSFER' ? TransactionTradeTypes.transfer : o.txType === 'DEPOSIT' ? TransactionTradeTypes.deposit : TransactionTradeTypes.withdraw,\n                }))\n                setTxTableData(mappingList)\n            }\n        })()\n    }, [accountId, apiKey])\n\n    React.useEffect(() => {\n        // @ts-ignore\n        let height = container?.current?.offsetHeight;\n        if (height) {\n            setPageSize(Math.floor((height - 120) / 44) - 2);\n        }\n    }, [container, pageSize]);\n\n    return (\n        <StylePaper ref={container}>\n            <div className=\"title\">Transactions</div>\n            <div className=\"tableWrapper\">\n                <TransactionTable {...{\n                  // rawData: txList,\n                  rawData: txTableData,\n                  pagination: {\n                    pageSize: pageSize\n                  },\n                  showFilter: true,\n                  ...rest\n                }} />\n            </div>\n        </StylePaper>\n    )\n})\n\nexport default TxPanel\n","import { useCallback, useEffect, useRef, useState } from 'react'\nimport { WithTranslation, withTranslation } from 'react-i18next'\nimport { PriceTag } from '@loopring-web/component-lib/static-resource'\nimport { Box, Paper, Typography } from '@material-ui/core'\nimport styled from '@emotion/styled'\nimport {\n    AssetsTable,\n    AssetTitle,\n    AssetTitleProps,\n    ChartType,\n    DoughnutChart,\n    ScaleAreaChart,\n    ToggleButtonGroup,\n    TokenType,\n} from '@loopring-web/component-lib'\nimport { useModals } from 'hooks/modal/useModals'\n// import { useGetUserBalances } from 'hooks/exchange/useUserAPI'\nimport { useGetTokens } from 'hooks/exchange/useExchangeAPI'\nimport { volumeToCount } from 'hooks/help'\nimport { LoopringAPI } from 'stores/apis/api'\nimport { AssetType } from 'loopring-sdk'\nimport store from 'stores'\nimport { useWalletLayer1 } from 'stores/walletLayer1'\nimport { makeWallet } from 'hooks/help'\nimport { EmptyValueTag,unit } from '@loopring-web/component-lib/src/static-resource'\nimport { StylePaper } from '../../styled'\n\n// const StylePaper = styled(Box)`\n//   width: 100%;\n//   height: 100%;\n//   flex: 1;\n//   background-color: ${({theme}) => theme.colorBase.background().default};\n//   border-radius: ${({theme}) => theme.unit}px;\n// //   padding: 20px;\n//\n//   .title {\n//     font-family: Gilroy-Medium;\n//     font-size: ${({theme}) => theme.unit * 3}px;\n//     line-height: 19px;\n//   }\n//\n//   .tableWrapper {\n//     display: flex;\n//     flex: 1;\n//     height: 100%;\n//     border: 1px solid ${({theme}) => theme.colorBase.borderColor};\n//     border-radius: ${({theme}) => theme.unit}px;\n//     padding: 26px 0;\n//   }\n// ` as typeof Box;\n\nconst StyledChartWrapper = styled(Box)`\n  height: 225px;\n\n  > div {\n    position: relative;\n    width: calc(50% - 6px);\n    height: 100%;\n    background-color: ${({theme}) => theme.colorBase.background().default};\n    border-radius: ${({theme}) => theme.unit}px;\n    padding: ${({theme}) => theme.unit * 2.5}px ${({theme}) => theme.unit * 3}px;\n  }\n`\n\nconst StyledBtnGroupWrapper = styled(Box)`\n  position: absolute;\n  z-index: 10;\n  right: ${({theme}) => theme.unit * 3}px;\n  bottom: ${({theme}) => theme.unit * 2.5}px;\n`\n\nconst toggleData = [\n    // {value: '24 H', key: '24 H'},\n    {value: 'week', key: '1 W'},\n    {value: 'all', key: 'ALL'},\n]\n\n// const testTrendData: any = [\n//     {\n//         timeStamp: 150,\n//         close: Math.random() + 4,\n//     },\n//     {\n//         timeStamp: 160,\n//         close: Math.random() + 4,\n//     },\n//     {\n//         timeStamp: 170,\n//         close: Math.random() + 4,\n//     },\n//     {\n//         timeStamp: 180,\n//         close: Math.random() + 4,\n//     },\n//     {\n//         timeStamp: 190,\n//         close: Math.random() + 4,\n//     },\n//     {\n//         timeStamp: 200,\n//         close: Math.random() + 4,\n//     },\n//     {\n//         timeStamp: 210,\n//         close: Math.random() + 4,\n//     },\n//     {\n//         timeStamp: 220,\n//         close: Math.random() + 4,\n//     },\n//     {\n//         timeStamp: 230,\n//         close: Math.random() + 4,\n//     },\n//     {\n//         timeStamp: 240,\n//         close: Math.random() + 4,\n//     },\n// ]\n\nexport type ITokenInfoItem = {\n    token: string,\n    detail: {\n        price: string,\n        symbol: string,\n        updatedAt: number\n    }\n}\n\nexport type TrendDataItem = {\n    timeStamp: number;\n    close: number;\n}\n\nconst AssetPanel = withTranslation('common')(({t, ...rest}: WithTranslation) => {\n    const container = useRef(null);\n    const [pageSize, setPageSize] = useState(10);\n    const [chartPeriod, setChartPeriod] = useState('week')\n    const [chartData, setChartData] = useState<TrendDataItem[]>([])\n    \n    const { accAddr } = store.getState().account\n    const { walletLayer2 } = store.getState().walletLayer2;\n    const { ammMap } = store.getState().amm.ammMap\n    const walletMap = makeWallet()\n    const assetsKeyList = walletMap && walletMap.walletMap ? Object.keys(walletMap.walletMap) : []\n    const assetsDetailList = walletMap && walletMap.walletMap ? Object.values(walletMap.walletMap) : []\n    const assetsList = assetsKeyList.map((key, index) => ({\n        token: key,\n        detail: assetsDetailList[index]\n    }))\n\n    const getUserTotalAssets = useCallback(async (limit: number = 7) => {\n        const userAssets = await LoopringAPI.walletAPI?.getUserAssets({\n            wallet: accAddr,\n            assetType: AssetType.DEX,\n            limit: limit // TODO: minium unit is day, discuss with pm later\n        })\n        if (userAssets && userAssets.userAssets.length && !!userAssets.userAssets.length) {\n            setChartData(userAssets.userAssets.map(o => ({\n                timeStamp: Number(o.createdAt),\n                close: Number(o.amount)\n            })))\n        }\n    }, [accAddr])\n\n    useEffect(() => {\n        if (LoopringAPI && LoopringAPI.walletAPI && walletLayer2) {\n            getUserTotalAssets()\n        }\n    }, [walletLayer2, getUserTotalAssets])\n\n    useEffect(() => {\n        // @ts-ignore\n        let height = container?.current?.offsetHeight;\n        if (height) {\n            setPageSize(Math.floor((height - 120) / 44) - 1);\n        }\n    }, [container, pageSize]);\n\n    const {\n        ShowDeposit,\n        ShowTransfer,\n        ShowWithdraw,\n        ShowResetAccount,\n    } = useModals()\n\n    const { updateWalletLayer1 } = useWalletLayer1()\n\n    const onShowDeposit = useCallback(() => {\n        updateWalletLayer1()\n        ShowDeposit(true)\n    }, [ShowDeposit, updateWalletLayer1])\n\n    const onShowTransfer = () => {\n        ShowTransfer(true)\n    }\n\n    const onShowWithdraw = () => {\n        ShowWithdraw(true)\n    }\n\n    const handleChartPeriodChange = useCallback((event: React.MouseEvent<HTMLElement, MouseEvent>, newValue: string) => {\n        const limit = newValue === 'week' ? 7 : 9999\n        getUserTotalAssets(limit)\n    }, [getUserTotalAssets])\n\n    // const { tokens: tokensAll } = useGetTokens()\n\n    // const tokens = tokensAll?.tokenSymbolMap\n\n    // const { balances } = useGetUserBalances(tokens)\n\n    // const { walletLayer2 } = store.getState().walletLayer2;\n    const { faitPrices } = store.getState().system\n\n    const tokenPriceList = faitPrices ? Object.entries(faitPrices).map(o => ({\n        token: o[ 0 ],\n        detail: o[ 1 ]\n    })) as ITokenInfoItem[] : []\n\n    let jointLPTokenValue = 0\n    assetsList.filter(o => o.token.split('-')[0] === 'LP').forEach(o => {\n        const result = o.token.split('-')\n        result.splice(0, 1, 'AMM')\n        const ammToken = result.join('-')\n        const ammTokenList = Object.keys(ammMap)\n        const tokenValue = ammTokenList.includes(ammToken) && ammMap[ammToken] ? Number(ammMap[ammToken].amountDollar) : 0\n        jointLPTokenValue += tokenValue\n    });\n\n    const doughnutData = assetsList.filter(o => o.token.split('-')[0] !== 'LP').map((tokenInfo) => {\n        const tokenPriceUSDT = tokenInfo.token === 'DAI' ? 1 : Number(tokenPriceList.find(o => o.token === tokenInfo.token)?.detail.price) / Number(tokenPriceList.find(o => o.token === 'USDT')?.detail.price)\n        return ({\n            name: tokenInfo.token,\n            value: Number(volumeToCount(tokenInfo.token, tokenInfo.detail?.detail?.total as string)) * tokenPriceUSDT\n        })\n    })\n    const formattedDoughnutData = [...doughnutData, {\n            name: 'LP-Token',\n            value: jointLPTokenValue\n        }]\n    const AssetTitleProps: AssetTitleProps = {\n        assetInfo: {\n            totalAsset: formattedDoughnutData.map(o => o.value).reduce((prev, next) => {\n                return prev + next\n            }, 0),\n            priceTag: PriceTag.Dollar,\n        },\n        onShowDeposit,\n        onShowTransfer,\n        onShowWithdraw,\n    }\n\n    const assetsRawData = assetsList.map((tokenInfo) => {\n        const tokenPriceUSDT = Number(tokenPriceList.find(o => o.token === tokenInfo.token)?.detail.price) / Number(tokenPriceList.find(o => o.token === 'USDT')?.detail.price)\n        return ({\n            token: {\n                type: tokenInfo.token.split('-')[0] === 'LP' ? TokenType.lp : TokenType.single,\n                value: tokenInfo.token\n            },\n            amount: String(Number(volumeToCount(tokenInfo.token, tokenInfo.detail?.detail.total as string)).toFixed(6)) || EmptyValueTag,\n            available: String(tokenInfo.detail?.count) || EmptyValueTag,\n            locked: String(tokenInfo.detail?.detail.locked) || EmptyValueTag,\n            smallBalance: tokenPriceUSDT * Number(volumeToCount(tokenInfo.token, tokenInfo.detail?.detail.total as string)) < 1,\n        })\n    })\n\n    return (\n        <>\n            <Box>\n                <AssetTitle  {...{\n                    t,\n                    ...rest,\n                    ...AssetTitleProps\n                }} />\n            </Box>\n\n            {/*<div className=\"title\">{t('labelAssetsTitle')}</div>*/}\n\n            <StyledChartWrapper display={'flex'} justifyContent={'space-between'} alignItems={'center'} marginTop={2}>\n                <Paper component={'div'}>\n                    <Typography component=\"span\" color=\"textSecondary\" variant=\"body1\">Asset Distribution</Typography>\n                    <DoughnutChart data={walletLayer2 ? formattedDoughnutData : []}/>\n                </Paper>\n                <Paper component={'div'}>\n                    <Typography component=\"span\" color=\"textSecondary\" variant=\"body1\">Total Assets</Typography>\n                    <ScaleAreaChart type={ChartType.Trend} data={chartData}/>\n                    <StyledBtnGroupWrapper>\n                        <ToggleButtonGroup exclusive size=\"small\" {...{\n                            ...rest,\n                            t,\n                            data: toggleData,\n                            value: chartPeriod,\n                            setValue: setChartPeriod,\n                            onChange: handleChartPeriodChange\n                        }} />\n                    </StyledBtnGroupWrapper>\n                </Paper>\n            </StyledChartWrapper>\n            <StylePaper style={{marginTop: `${unit*2}px`}}>\n                <div className=\"tableWrapper\" ref={container}>\n                    <AssetsTable {...{\n                        rawData: assetsRawData,\n                        pagination: {\n                            pageSize: pageSize\n                        },\n                        showFiliter: true,\n                        ...rest\n                    }} />\n                </div>\n            </StylePaper>\n        </>\n    )\n})\n\nexport default AssetPanel\n","import React, { useEffect } from 'react'\nimport { TradeTable, TradeFilterTable, RawDataTradeItem } from '@loopring-web/component-lib'\nimport { WithTranslation, withTranslation } from 'react-i18next'\nimport styled from '@emotion/styled'\nimport { Box, Paper } from '@material-ui/core'\nimport store from 'stores'\nimport { LoopringAPI } from 'stores/apis/api'\nimport { volumeToCount } from 'hooks/help'\nimport { StylePaper } from '../../styled'\n\n// const StylePaper = styled(Box)`\n//   display: flex;\n//   flex-direction: column;\n//   width: 100%;\n//   height: 100%;\n//   flex: 1;\n//   background-color: ${({ theme }) => theme.colorBase.background().default};\n//   border-radius: ${({ theme }) => theme.unit}px;\n//   padding: 20px;\n//   margin-bottom: ${({ theme }) => 2* theme.unit}px;\n//   .title {\n//     font-family: Gilroy-Medium;\n//     font-size: ${({ theme }) => theme.unit * 3}px;\n//     line-height: 19px;\n//   }\n//\n//   .tableWrapper {\n//     display: flex;\n//     flex: 1;\n//     margin-top: 20px;\n//     border: 1px solid ${({ theme }) => theme.colorBase.borderColor};\n//     border-radius: ${({ theme }) => theme.unit}px;\n//     padding: 26px 0;\n//\n//     .rdg {\n//       flex: 1;\n//     }\n//   }\n// ` as typeof Paper;\n//\n// // side: keyof typeof TradeTypes;\n// //     amount: {\n// //         from: {\n// //             key: string;\n// //             value: number|undefined;\n// //         },\n// //         to: {\n// //             key: string;\n// //             value: number|undefined;\n// //         }\n// //     };\n// //     price:{\n// //         key:string\n// //         value:number|undefined,\n// //     }\n// //     // priceDollar: number;\n// //     // priceYuan: number;\n// //     fee: {\n// //         key: string;\n// //         value: number|undefined;\n// //     };\n// //     time: number;\n\nconst TradePanel = withTranslation('common')((rest:WithTranslation<'common'>) => {\n    const container = React.useRef(null);\n    const [pageSize, setPageSize] = React.useState(10);\n    const [originalData, setOriginalData] = React.useState<RawDataTradeItem[]>([])\n\n    const { accountId,apiKey } = store.getState().account;\n\n    useEffect(() => {\n        (async function getUserApi () {\n            if (LoopringAPI && LoopringAPI.userAPI && accountId && apiKey) {\n                const userTrades = await LoopringAPI.userAPI.getUserTrades({\n                    accountId,\n                }, apiKey)\n                if (userTrades && userTrades.userTrades) {\n                  setOriginalData(userTrades.userTrades.map(o => {\n                    const marketList = o.market.split('-')\n                    // due to AMM case, we cannot use first index\n                    const baseToken = marketList[marketList.length - 2]\n                    const quoteToken = marketList[marketList.length - 1]\n\n                    return ({\n                      side: o.side,\n                      price: {\n                        key: baseToken,\n                        value: Number(o.price)\n                      },\n                      fee: {\n                        key: baseToken,\n                        value: Number(volumeToCount(baseToken, o.fee))\n                      },\n                      time: Number(o.tradeTime),\n                      amount: {\n                        from: {\n                          key: baseToken,\n                          value: Number(volumeToCount(baseToken, o.volume))\n                        },\n                        to: {\n                          key: quoteToken,\n                          value: Number(volumeToCount(baseToken, o.volume)) / Number(o.price)\n                        }\n                      }\n                    })\n                  }))\n                }\n            }\n        })()\n    }, [accountId, apiKey])\n\n    React.useEffect(() => {\n        // @ts-ignore\n        let height = container?.current?.offsetHeight;\n        if (height) {\n            setPageSize(Math.floor((height - 120) / 44) - 2);\n        }\n    }, [container, pageSize]);\n\n    // const txList: any[] = []\n\n    return (\n        <>\n            <StylePaper ref={container}>\n                <div className=\"title\">Trades</div>\n                <div className=\"tableWrapper\">\n                    <TradeTable {...{\n                      rawData: originalData,\n                      pagination: {\n                        pageSize: pageSize\n                      },\n                      showFilter: true,\n                      ...rest}}/>\n                </div>\n            </StylePaper>\n        </>\n    )\n})\n\nexport default TradePanel\n","import React, { useEffect } from 'react'\nimport { RawDataAmmItem, AmmTable, AmmSideTypes } from '@loopring-web/component-lib'\nimport { WithTranslation, withTranslation } from 'react-i18next'\nimport store from 'stores'\nimport { LoopringAPI } from 'stores/apis/api'\nimport { AmmTxType } from 'loopring-sdk'\nimport { StylePaper } from '../../styled'\nimport { volumeToCount } from '../../../hooks/help';\n\nconst AmmPanel = withTranslation('common')((rest:WithTranslation<'common'>) => {\n    const container = React.useRef(null);\n    const [pageSize, setPageSize] = React.useState(10);\n    const [originalData, setOriginalData] = React.useState<RawDataAmmItem[]>([])\n\n    const { accountId,apiKey } = store.getState().account;\n    const { tokenMap } = store.getState().tokenMap\n    \n    const getTokenName = React.useCallback((tokenId?: number) => {\n        if (tokenMap) {\n            const keys = Object.keys(tokenMap)\n            const values = Object.values(tokenMap)\n            const index = values.findIndex(o => o.tokenId === tokenId)\n            if (index > -1) {\n                return keys[index]\n            }\n            return ''\n        }\n        return ''\n    }, [tokenMap])\n\n    const getAmmpoolList = React.useCallback(async () => {\n        if (LoopringAPI.ammpoolAPI && accountId && apiKey) {\n            const ammpool = await LoopringAPI.ammpoolAPI.getUserAmmPoolTxs({\n                accountId,\n            }, apiKey)\n            if (ammpool && ammpool.userAmmPoolTxs) {\n                const result = ammpool.userAmmPoolTxs.map(o => ({\n                    side: o.txType === AmmTxType.JOIN ? AmmSideTypes.Join : AmmSideTypes.Exit,\n                    amount: {\n                        from: {\n                            key: getTokenName(o.poolTokens[0]?.tokenId),\n                            value: String(volumeToCount(getTokenName(o.poolTokens[0]?.tokenId), o.poolTokens[0]?.actualAmount))\n                        },\n                        to: {\n                            key: getTokenName(o.poolTokens[1]?.tokenId),\n                            value: String(volumeToCount(getTokenName(o.poolTokens[1]?.tokenId), o.poolTokens[1]?.actualAmount))\n                        }\n                    },\n                    lpTokenAmount: String(volumeToCount(getTokenName(o.lpToken?.tokenId), o.lpToken?.actualAmount)),\n                    fee: {\n                        key: getTokenName(o.poolTokens[1]?.tokenId),\n                        value: String(volumeToCount(getTokenName(o.poolTokens[1]?.tokenId), o.poolTokens[1]?.feeAmount))\n                    },\n                    time: o.updatedAt\n                }))\n                setOriginalData(result)\n            }\n        }\n    }, [accountId, apiKey, getTokenName])\n\n    useEffect(() => {\n        getAmmpoolList()\n    }, [getAmmpoolList])\n\n    React.useEffect(() => {\n        // @ts-ignore\n        let height = container?.current?.offsetHeight;\n        if (height) {\n            setPageSize(Math.floor((height - 120) / 44) - 2);\n        }\n    }, [container, pageSize]);\n\n    return (\n        <>\n            <StylePaper ref={container}>\n                <div className=\"title\">AMM Records</div>\n                <div className=\"tableWrapper\">\n                    <AmmTable {...{\n                        rawData: originalData,\n                        pagination: {\n                            pageSize: pageSize\n                        },\n                        showFilter: true,\n                        ...rest}}/>\n                </div>\n            </StylePaper>\n        </>\n    )\n})\n\nexport default AmmPanel\n","\nimport React, { useEffect } from 'react'\nimport { OrderHistoryTable, OrderHistoryRawDataItem } from '@loopring-web/component-lib'\nimport { TradeTypes } from '@loopring-web/component-lib/static-resource'\nimport { WithTranslation, withTranslation } from 'react-i18next'\nimport store from 'stores'\nimport { LoopringAPI } from 'stores/apis/api'\nimport { volumeToCount } from 'hooks/help'\nimport { StylePaper } from '../../styled'\n\n\n\nconst OrderPanel = withTranslation('common')((rest: WithTranslation) => {\n    const container = React.useRef(null);\n    const [pageSize, setPageSize] = React.useState(10);\n    const [orderOriginalData, setOrderOriginalData] = React.useState<OrderHistoryRawDataItem[]>([])\n\n    const { accountId,apiKey } = store.getState().account;\n\n    useEffect(() => {\n        (async function getUserApi () {\n            if (LoopringAPI && LoopringAPI.userAPI && accountId && apiKey) {\n                const userOrders = await LoopringAPI.userAPI.getOrders({\n                    accountId,\n                }, apiKey)\n                if (userOrders && Array.isArray(userOrders.orders) && !!userOrders.orders.length) {\n                    setOrderOriginalData(userOrders.orders.map(o => {\n                        const marketList = o.market.split('-')\n                        // due to AMM case, we cannot use first index\n                        const baseToken = marketList[marketList.length - 2]\n                        const quoteToken = marketList[marketList.length - 1]\n                        const { baseAmount, quoteAmount, baseFilled, quoteFilled } = o.volumes\n\n                        return ({\n                            side: o.side === 'BUY' ? TradeTypes.Buy : TradeTypes.Sell,\n                            amount: {\n                                from: {\n                                    key: baseToken,\n                                    // value: Number(baseAmount)\n                                    value: Number(volumeToCount(baseToken, baseAmount))\n                                },\n                                to: {\n                                    key: quoteToken,\n                                    value: Number(volumeToCount(quoteToken, quoteAmount))\n                                }\n                            },\n                            // average: Number(o.price),\n                            average: Number(volumeToCount(quoteToken, quoteFilled)) / Number(volumeToCount(baseToken, baseFilled)),\n                            filledAmount: {\n                                from: {\n                                    key: baseToken,\n                                    // value: Number(baseFilled)\n                                    value: Number(volumeToCount(baseToken, baseFilled))\n                                },\n                                to: {\n                                    key: quoteToken,\n                                    value: Number(volumeToCount(quoteToken, quoteFilled))\n                                }\n                            },\n                            filledPrice: {\n                                key: quoteToken,\n                                value: Number(o.price)\n                            },\n                            time: o.validity.start * 1000,\n                            status: o.status,\n                            detailTable: []\n                        })\n                    }))\n                }\n            }\n        })()\n    }, [accountId, apiKey])\n\n    React.useEffect(() => {\n        // @ts-ignore\n        let height = container?.current?.offsetHeight;\n        if (height) {\n            setPageSize(Math.floor((height - 120) / 44) - 2);\n        }\n    }, [container, pageSize]);\n\n    return (\n        <>\n            <StylePaper ref={container}>\n                <div className=\"title\">Order History</div>\n                <div className=\"tableWrapper\">\n                    <OrderHistoryTable {...{\n                        pagination: {\n                            pageSize: pageSize\n                        },\n                        rawData: orderOriginalData,\n                        showFilter: true,\n                        ...rest\n                    }} />\n                </div>\n            </StylePaper>\n        </>\n    )\n})\n\nexport default OrderPanel\n","import styled from '@emotion/styled';\nimport { Box, Button, Divider, Grid, Switch, Typography } from '@material-ui/core';\nimport React from 'react';\nimport { UpColor, Currency, DropDownIcon } from '@loopring-web/component-lib/src/static-resource';\nimport {\n    BtnLanguage,\n    OutlineSelect,\n    OutlineSelectItem, QRCodePanel,\n    TypographyStrong, useSettings\n} from '@loopring-web/component-lib';\nimport { Trans, useTranslation, WithTranslation, withTranslation } from 'react-i18next';\nimport { useTheme } from '@emotion/react';\nimport { LanguageKeys } from '@loopring-web/component-lib/static-resource';\n\n// const MuiModalStyled = styled(MuiModal)`\n//   //background: ${({theme}) => theme.colorBase.background().secondary};\n//   // .MuiBackdrop-root{\n//   //   z-index: -1;\n//   //   background-color: ${({theme}) => theme.colorBase.background().outline};\n//   // }\n//   display: flex;\n//   align-items: center;\n//   justify-content: center;\n// ` as typeof MuiModal;\n// const BlockStyled = styled(Box)`\n//   ${({theme}) => theme.border.defaultFrame({c_key: 'blur', d_R: 1})};\n//   background: ${({theme}) => theme.colorBase.background().secondary};\n//   max-height: var(--panel-setting-height);\n//   max-width: var(--panel-setting-width);\n//   display: flex;\n//   justify-content: space-around;\n//   align-items: center;\n//   overflow: scroll;\n//   padding: ${({theme}) => theme.unit*8}px\n// `;\n\nconst StyledPaper = styled(Grid)`\n  width: 100%;\n  height: 100%;\n  background-color: ${({theme}) => theme.colorBase.background().default};\n  border-radius: ${({ theme }) => theme.unit}px;\n`\n//${({theme}) => theme.border.defaultFrame({c_key: 'blur', d_R: 1})};\n\nconst StyledSwitch = styled(Switch)(({theme}) => ({\n    \"& .Mui-checked\": {\n        color: theme.colorBase.textPrimary,\n        '& + .MuiSwitch-track.MuiSwitch-track': {\n            border: `solid ${theme.colorBase.success}`,\n        },\n        '& .MuiSwitch-thumb': {\n            backgroundColor: theme.colorBase.success,\n        }\n    },\n    '& .MuiSwitch-track': {\n        border: `solid ${theme.colorBase.error}`,\n        opacity: 1\n    },\n    '& .MuiSwitch-thumb': {\n        backgroundColor: theme.colorBase.error,\n    }\n}));\n\nexport const BtnCurrency = ({t, currency, label, handleChange}: any) => {\n    const [state, setState] = React.useState<string>(currency ? currency : Currency.dollar);\n    const _handleChange = React.useCallback((event: React.ChangeEvent<any>) => {\n        setState(event.target.value);\n        if (handleChange) {\n\n            handleChange(event.target.value)\n        }\n    }, [handleChange])\n    return <OutlineSelect aria-label={t(label)} IconComponent={DropDownIcon}\n                          labelId=\"language-selected\"\n                          id=\"language-selected\"\n                          value={state} autoWidth\n                          onChange={_handleChange}>\n        <OutlineSelectItem value={Currency.dollar}>$ {t('labelUSDollar')}</OutlineSelectItem>\n            <OutlineSelectItem value={Currency.yen}>¥ {t('labelCNYYuan')}</OutlineSelectItem>\n    </OutlineSelect>\n}\n\nconst StyledDivider = styled(Divider)`\n  margin: ${({theme}) => theme.unit}px 0 ${({theme}) => theme.unit}px 0px;\n`\nconst DividerBlock = styled(Divider)`\n  margin: 0;\n  flex: 1;\n  width: 1px;\n  height: ${({theme}) => theme.unit * 3}px;\n  background: ${({theme}) => theme.colorBase.focus};\n`\n\n\n\nexport const SettingPanel = withTranslation(['common', 'layout'])(({t,i18n, ...rest}: & WithTranslation) => {\n    const theme = useTheme();\n    const {setUpColor,setLanguage,setCurrency,currency,upColor} = useSettings()\n    const language = i18n.language;\n    const handleOnLanguageChange = (lang: LanguageKeys) => {\n        setLanguage(lang);\n        i18n.changeLanguage(lang);\n    }\n    const handleOnCurrencyChange = (value: any) => {\n        setCurrency(value);\n    }\n    const handleColorChange = (e:any) => {\n        if(e.target.checked){\n            setUpColor(UpColor.green) ;\n        }else{\n            setUpColor(UpColor.red);\n        }\n    }\n    return <Grid container direction={'column'} justifyContent={'space-between'} alignItems={'stretch'} flexWrap={'nowrap'}>\n        <Typography variant={'h4'} component={'h3'} marginY={1} paddingLeft={2}>{t('labelTitleSecurity')}</Typography>\n        <StyledPaper item xs={12} display={'flex'} flexDirection={'column'} marginBottom={2} paddingY={2}>\n            <Box component={'section'} display={'flex'} flexDirection={'column'}>\n                <Typography variant={'h5'} component={'h4'} paddingX={2}>{t('labelTitleResetL2Keypair')}</Typography>\n                <StyledDivider/>\n                <Grid container display={'flex'} flexDirection={'row'} justifyContent={'stretch'}\n                      alignItems={'flex-start'} paddingX={2} marginBottom={2}>\n                    <Grid item xs={8} display={'flex'} flexDirection={'column'}>\n                        <Typography variant={'body1'} component={'p'}>\n                            <Trans i18nKey=\"resetDescription\">\n                                Create a new signing key for layer-2 authentication (no backup needed). This will\n                                <TypographyStrong component={'span'}>cancel all your pending orders</TypographyStrong>.\n                            </Trans>\n                        </Typography>\n                    </Grid>\n                    <Grid item xs={4} display={'flex'} flexDirection={'column'} justifyContent={'space-evenly'}\n                          alignItems={'flex-end'} alignSelf={'stretch'}>\n                        <Button variant={'outlined'} size={'medium'} color={'primary'}>{t('labelBtnReset')}</Button>\n                    </Grid>\n                    <Grid item xs={12} display={'flex'} flexDirection={'row'} justifyContent={'flex-end'}\n                          alignItems={'center'} alignSelf={'stretch'}>\n                        <Typography variant={'body2'} component={'p'}\n                                    paddingTop={1}>{t('labelHadChangPassword', {passDay: '14 hours'})}</Typography>\n                    </Grid>\n\n                </Grid>\n            </Box>\n            <Box component={'section'} display={'flex'} flexDirection={'column'}>\n                <Typography variant={'h5'} component={'h4'} paddingX={2}>{t('labelTitleExportAccount')}</Typography>\n                <StyledDivider/>\n                <Grid container display={'flex'} flexDirection={'row'} justifyContent={'stretch'}\n                      alignItems={'flex-start'} paddingX={2} marginBottom={2}>\n                    <Grid item xs={7} display={'flex'} flexDirection={'column'}>\n                        <Typography variant={'body1'} component={'p'}>{t('descriptionExportAccount')}</Typography>\n                    </Grid>\n                    <Grid item xs={5} display={'flex'} flexDirection={'column'} justifyContent={'space-evenly'}\n                          alignItems={'flex-end'} alignSelf={'stretch'}>\n                        <Grid item> <Button variant={'outlined'} size={'medium'}\n                                            color={'primary'}>{t('labelBtnExportAccount')}</Button></Grid>\n                    </Grid>\n                </Grid>\n            </Box>\n        </StyledPaper>\n\n        <Typography variant={'h4'} component={'h3'} marginY={1} paddingLeft={2}>{t('labelTitlePreferences')}</Typography>\n        <StyledPaper item xs={12} display={'flex'} flexDirection={'column'} marginBottom={2} paddingY={2}>\n            <Box component={'section'} display={'flex'} flexDirection={'column'}>\n                {/*<Typography variant={'h5'} component={'h4'} paddingX={2}>{t('labelTitleLayout')}</Typography>*/}\n                {/*<StyledDivider/>*/}\n                <Grid container display={'flex'} flexDirection={'row'} justifyContent={'stretch'}\n                      alignItems={'flex-start'} paddingX={2} marginBottom={2}>\n                    <Grid item xs={7} display={'flex'} flexDirection={'column'}>\n                        <Typography variant={'body1'} component={'p'}>{t('labelLanguage')}</Typography>\n                    </Grid>\n                    <Grid item xs={5} display={'flex'} flexDirection={'column'} justifyContent={'space-evenly'}\n                          alignItems={'flex-end'} alignSelf={'stretch'}>\n                        <Grid item>\n                            <BtnLanguage {...{\n                                t, ...rest,\n                                language,\n                                label: 'languageSetting',\n                                handleChange: handleOnLanguageChange\n                            }}></BtnLanguage>\n                        </Grid>\n                    </Grid>\n                </Grid>\n                <Grid container display={'flex'} flexDirection={'row'} justifyContent={'stretch'}\n                      alignItems={'flex-start'} paddingX={2} marginBottom={2}>\n                    <Grid item xs={7} display={'flex'} flexDirection={'column'}>\n                        <Typography variant={'body1'} component={'p'}>{t('labelCurrency')}</Typography>\n                    </Grid>\n                    <Grid item xs={5} display={'flex'} flexDirection={'column'} justifyContent={'space-evenly'}\n                          alignItems={'flex-end'} alignSelf={'stretch'}>\n                        <Grid item>\n                            <BtnCurrency {...{\n                                t, ...rest,\n                                currency,\n                                label: 'currencySetting',\n                                handleChange: handleOnCurrencyChange\n                            }}></BtnCurrency>\n\n                        </Grid>\n                    </Grid>\n                </Grid>\n                <Grid container display={'flex'} flexDirection={'row'} justifyContent={'stretch'}\n                      alignItems={'flex-start'} paddingX={2}>\n                    <Grid item xs={7} display={'flex'} flexDirection={'column'}>\n                        <Typography variant={'body1'} component={'p'}>{t('labelColors')}</Typography>\n                    </Grid>\n                    <Grid item xs={5} display={'flex'} flexDirection={'row'} justifyContent={'flex-end'}\n                          alignItems={'center'} alignSelf={'stretch'}>\n                        <Typography variant={'body1'} component={'span'} paddingX={2}>\n                            <Trans i18nKey=\"whichColorIsUp\">\n                                <span style={{\n                                    textTransform: 'capitalize',\n                                    color: upColor === UpColor.green ? theme.colorBase.success : theme.colorBase.error\n                                }}>{{up: upColor === UpColor.green ? t('labelgreen') : t('labelred')}} up</span>\n                                and <span style={{\n                                textTransform: 'capitalize',\n                                color: upColor === UpColor.green ? theme.colorBase.error : theme.colorBase.success\n                            }}>{{down: upColor === UpColor.green ? t('labelred') : t('labelgreen')}} down</span>\n                            </Trans>\n                        </Typography>\n                        <StyledSwitch checked={upColor === UpColor.green} color=\"default\"\n                                      onChange={handleColorChange}/>\n                    </Grid>\n                </Grid>\n            </Box>\n\n        </StyledPaper>\n\n    </Grid>\n})\n\n// export const SettingPage = ({open,onClose}: { open:boolean, onClose:(e:any)=>void})=>{\n//     return  <MuiModalStyled\n//         open={open}\n//         onClose={onClose}\n//         aria-labelledby=\"modal-modal-title\"\n//         aria-describedby=\"modal-modal-description\"\n//     >\n//         <BlockStyled >\n//            <SettingPanel/>\n//         </BlockStyled>\n//     </MuiModalStyled>\n// }\n\n\n","import { useRouteMatch } from 'react-router'\n\nimport { Box, Paper } from '@material-ui/core'\nimport {\n    DepositPanel,\n    SubMenu,\n    SubMenuList as BasicSubMenuList,\n} from '@loopring-web/component-lib'\nimport { useTranslation, withTranslation } from 'react-i18next'\nimport styled from '@emotion/styled'\nimport { subMenuLayer2 } from '@loopring-web/component-lib/src/static-resource'\n\nimport TxPanel from './TxPanel'\nimport AssetPanel from './AssetPanel'\nimport TradePanel from './TradePanel'\nimport AmmPanel from './AmmPanel'\nimport OrderPanel from './OrderPanel'\nimport { SettingPanel } from '../SettingPage';\nimport store from '../../stores';\nimport { AccountStatus } from '../../state_machine/account_machine_spec';\nimport { useModalProps } from '../../layouts/header/hook';\nimport { Redirect } from 'react-router-dom'\n\nexport const subMenu = subMenuLayer2;\nconst BoxStyle = styled(Box)`\n  ${({theme})=>`\n    background-color: ${theme.colorBase.background().default};\n    width: 100%;\n    min-width:auto;\n    ${theme.border.defaultFrame({c_key: 'blur'})};\n    & > div{\n      background-color:initial;\n      border:0;\n      width:auto;\n      min-width: var(--swap-box-width);\n      max-width: 520px;\n    }\n    `\n  }\n   \n` as typeof Box\n\nconst SubMenuList = withTranslation(['layout','common'], { withRef: true })(BasicSubMenuList);\nexport const Layer2Page = () => {\n\n    let match: any = useRouteMatch(\"/layer2/:item\")\n    const {status: accStatus} = store.getState().account;\n    const {t,...rest} = useTranslation()\n    const selected = match?.params.item ?? 'assets';\n    const {depositProps} = useModalProps()\n\n    return <>  {\n        accStatus === AccountStatus.UNCONNNECTED \n            ? <Redirect to=\"/\" />\n            :\n        accStatus === AccountStatus.NOACCOUNT\n    || accStatus === AccountStatus.DEPOSITING\n    || accStatus === AccountStatus.DEPOSIT_TO_CONFIREM ?\n        <BoxStyle display={'flex'} flexWrap={'wrap'} alignItems={'center'} justifyContent={'center'} alignContent={'flex-start'}>\n            <DepositPanel  {...{\n                ...rest, ...depositProps,\n                title: t('depositTitleAndActive'),\n                description: 'depositAndActiveDescription'\n            }} > </DepositPanel>\n        </BoxStyle>: <>\n            <Box width={'200px'} display={'flex'} justifyContent={'stretch'} marginRight={3} marginBottom={2}>\n                <SubMenu>\n                    <SubMenuList selected={selected} subMenu={subMenu as any} />\n                </SubMenu>\n            </Box>\n            <Box minHeight={420} display={'flex'} alignItems={'stretch'} flexDirection={'column'} marginTop={0} flex={1}>\n                {selected === 'assets' && <AssetPanel />}\n                {selected === 'transactions' && <TxPanel />}\n                {selected === 'trades' && <TradePanel />}\n                {selected === 'ammRecords' && <AmmPanel />}\n                {selected === 'orders' && <OrderPanel />}\n                {selected === 'setting' && <SettingPanel />}\n            </Box>\n        </>\n    }\n        </>\n\n\n\n}\n","import { WithTranslation, withTranslation } from 'react-i18next'\nimport { Box, } from '@material-ui/core'\nimport styled from '@emotion/styled'\n\nimport React from 'react';\nimport { useAmmMapUI } from './hook';\n\nimport { PoolsTable } from '@loopring-web/component-lib';\nimport { AmmPoolActivityRule, LoopringMap } from 'loopring-sdk/dist/defs/loopring_defs';\n\nconst StylePaper = styled(Box)`\n  width: 100%;\n  height: 100%;\n  flex: 1;\n  background-color: ${({theme}) => theme.colorBase.background().default};\n  border-radius: ${({theme}) => theme.unit}px;\n\n  .rdg {\n    flex: 1;\n  }\n\n` as typeof Box;\n\n\nexport const PoolsPanel = withTranslation('common')(<R extends { [ key: string ]: any }, I extends { [ key: string ]: any }>\n({t, ammActivityMap, ...rest}: WithTranslation\n    & {\n    ammActivityMap: LoopringMap<LoopringMap<AmmPoolActivityRule[]>> | undefined }) => {\n    const container = React.useRef(null);\n    const [pageSize, setPageSize] = React.useState(10);\n    const {updateTickersUI, rawData, page} = useAmmMapUI({pageSize});\n\n    React.useEffect(() => {\n        // @ts-ignore\n        let height = container?.current?.offsetHeight;\n        if (height) {\n            setPageSize(Math.floor((height - 120) / 44) - 1);\n        }\n    }, [container, pageSize]);\n\n    const handlePageChange = React.useCallback((page) => {\n        updateTickersUI(page)\n    }, [updateTickersUI]);\n    return (\n        <>\n            <StylePaper display={'flex'} flexDirection={'column'} ref={container}>\n                <PoolsTable {...{\n                    rawData,\n                    handlePageChange,\n                    page,\n                    pagination: {\n                        pageSize\n                    }\n                }} />\n            </StylePaper>\n        </>\n    )\n})\n\n","import { AmmPanel, AmmPanelType } from '@loopring-web/component-lib';\nimport { AmmData, AmmInData, CoinInfo, IBData, WalletMap } from '@loopring-web/component-lib/static-resource';\nimport { useAmmPanel } from './hooks';\nimport React from 'react';\nimport { Box } from '@material-ui/core';\nimport { AmmPoolSnapshot, TickerData } from 'loopring-sdk';\nimport { TradeBtnStatus } from '@loopring-web/component-lib/components/panel/index';\n\nexport const AmmPanelView = <T extends AmmData<C extends IBData<I> ? C : IBData<I>>, I,\n    ACD extends AmmInData<I>,\n    C = IBData<I>>({\n                       pair,\n                       walletMap,\n                       ammType, snapShotData,\n                       ...rest\n                   }: {\n    pair: { coinAInfo: CoinInfo<C> | undefined, coinBInfo: CoinInfo<C> | undefined },\n    snapShotData: { tickerData: TickerData | undefined, ammPoolsBalance: AmmPoolSnapshot | undefined } | undefined\n    walletMap: WalletMap<C>\n    ammType?: keyof typeof AmmPanelType\n} & any) => {\n    const {\n        ammCalcData,\n        ammDepositData,\n        ammWithdrawData,\n        handleJoinAmmPoolEvent,\n        handleExitAmmPoolEvent,\n        onAmmWithdrawClick,\n        onAmmDepositClick,\n        ammDepositBtnI18nKey,\n        ammWithdrawBtnI18nKey,\n    } = useAmmPanel({\n        pair,\n        snapShotData, walletMap, ammType: ammType ? ammType : AmmPanelType.Deposit\n    })\n\n    // const [index, setIndex] = React.useState(AmmPanelTypeMap[ tabSelected ]);\n    const isLoading = React.useCallback(()=>{\n        if((!snapShotData || !snapShotData.tradeData || !snapShotData.ammPoolsBalance)\n            &&  ammDepositBtnI18nKey === undefined\n            &&  ammWithdrawBtnI18nKey === undefined\n        ) {\n          return true\n        }\n    },[snapShotData,ammWithdrawBtnI18nKey,ammWithdrawBtnI18nKey])\n\n    return <> {pair ?\n        <AmmPanel {...{...rest}}\n                  ammWithdrawData={ammWithdrawData}\n                  ammDepositData={ammDepositData}\n                  ammCalcData={ammCalcData}\n                  handleDepositEvent={handleJoinAmmPoolEvent}\n                  handleWithDrawEvent={handleExitAmmPoolEvent}\n                  onAmmWithdrawClick={onAmmWithdrawClick}\n                  onAmmDepositClick={onAmmDepositClick}\n                  tabSelected={ammType ? ammType : AmmPanelType.Deposit}\n                  ammDepositBtnI18nKey={ammDepositBtnI18nKey}\n                  ammWithdrawBtnI18nKey={ammWithdrawBtnI18nKey}\n                  ammDepositBtnStatus={isLoading()?TradeBtnStatus.LOADING:TradeBtnStatus.AVAILABLE}\n                  ammWithdrawBtnStatus={isLoading()?TradeBtnStatus.LOADING:TradeBtnStatus.AVAILABLE}\n\n        /> : <Box width={'var(--swap-box-width)'}/>}\n    </>\n\n}","import React, { useState } from \"react\";\nimport { AmmData, AmmInData, CoinInfo, IBData } from '@loopring-web/component-lib/src/static-resource';\nimport { AmmPanelType, LoopringLogo } from '@loopring-web/component-lib';\nimport { IdMap, TokenMap, useTokenMap } from '../../../stores/token';\nimport { useAmmMap } from '../../../stores/Amm/AmmMap';\nimport { accountStaticCallBack, ammPairInit, bntLabel, btnClickArray, fnType, makeCache } from '../../../hooks/help';\nimport { WalletMap } from '@loopring-web/component-lib/static-resource';\nimport { AmmPoolSnapshot, TickerData, ammPoolCalc, makeJoinAmmPoolRequest, makeExitAmmPoolRequest, TokenInfo, TokenVolumeV3, GetOffchainFeeAmtRequest, OffchainFeeReqType, LoopringMap, OffchainFeeInfo, GetAmmPoolSnapshotRequest, getExistedMarket, JoinAmmPoolRequest, AmmPoolInfoV3, AmmPoolRequestPatch, ChainId, GetNextStorageIdRequest, dumpError400, toBig, MarketInfo, } from 'loopring-sdk';\nimport { useCustomDCEffect } from '../../../hooks/common/useCustomDCEffect';\nimport { useAccount } from '../../../stores/account/hook';\nimport store from \"stores\";\n\nimport * as sdk from 'loopring-sdk'\nimport { LoopringAPI } from \"stores/apis/api\";\nimport { debounce } from \"lodash\";\nimport { AccountStatus } from \"state_machine/account_machine_spec\";\nimport { Lv2Account } from \"defs/account_defs\";\n\nexport const useAmmPanel = <C extends { [key: string]: any }>({\n    pair,\n    walletMap,\n    ammType,\n    snapShotData,\n}\n    : {\n        pair: { coinAInfo: CoinInfo<C> | undefined, coinBInfo: CoinInfo<C> | undefined },\n        snapShotData: { tickerData: TickerData | undefined, ammPoolsBalance: AmmPoolSnapshot | undefined } | undefined\n        walletMap: WalletMap<C>\n        ammType: keyof typeof AmmPanelType\n    }) => {\n    // const walletLayer2State = useWalletLayer2();\n    const { coinMap, tokenMap } = useTokenMap();\n    const { ammMap } = useAmmMap();\n    const { account } = useAccount();\n\n    const [ammCalcData, setAmmCalcData] = React.useState<AmmInData<C> | undefined>();\n\n    const [ammDepositData, setAmmDepositData] = React.useState<AmmData<IBData<C>, C>>({\n        coinA: { belong: undefined } as unknown as IBData<C>,\n        coinB: { belong: undefined } as unknown as IBData<C>,\n        slippage: .5\n    } as AmmData<IBData<C>, C>);\n\n    const [ammWithdrawData, setAmmWithdrawData] = React.useState({\n        coinA: { belong: undefined } as unknown as IBData<C>,\n        coinB: { belong: undefined } as unknown as IBData<C>,\n        slippage: .5\n    } as AmmData<IBData<C>, C>);\n\n    const [joinRequest, setJoinRequest] = useState<{ ammInfo: any, request: JoinAmmPoolRequest }>()\n\n    const [ammDepositBtnI18nKey, setAmmDepositBtnI18nKey] = React.useState<string | undefined>(undefined);\n    const [ammWithdrawBtnI18nKey, setAmmWithdrawBtnI18nKey] = React.useState<string | undefined>(undefined);\n\n    const initAmmData = React.useCallback(async (pair: any) => {\n        let _ammCalcData: Partial<AmmInData<C>> = ammPairInit(\n            {\n                pair,\n                ammType,\n                _ammCalcData: {},\n                tokenMap,\n                coinMap,\n                walletMap: walletMap, //walletLayer2State.walletLayer2,\n                ammMap,\n                tickerData: snapShotData?.tickerData,\n                ammPoolsBalance: snapShotData?.ammPoolsBalance\n            })\n        setAmmCalcData({ ...ammCalcData, ..._ammCalcData } as AmmInData<C>);\n        if (_ammCalcData.myCoinA) {\n            if (ammType === AmmPanelType.Deposit) {\n                setAmmDepositData({\n                    coinA: _ammCalcData.myCoinA as IBData<C>,\n                    coinB: _ammCalcData.myCoinB as IBData<C>,\n                    slippage: 0.001\n                })\n            } else {\n                setAmmWithdrawData({\n                    coinA: _ammCalcData.myCoinA as IBData<C>,\n                    coinB: _ammCalcData.myCoinB as IBData<C>,\n                    slippage: 0.001\n                })\n            }\n        }\n    }, [snapShotData, walletMap])\n\n    const [snapShot, setSnapShot] = useState<AmmPoolSnapshot>()\n\n    const [joinFees, setJoinfees] = useState<LoopringMap<OffchainFeeInfo>>()\n\n    useCustomDCEffect(async () => {\n        if (!LoopringAPI.userAPI || !pair.coinBInfo?.simpleName\n            || store.getState().account.status !== AccountStatus.ACTIVATED) {\n            return\n        }\n\n        const acc = store.getState().account\n\n        const request2: GetOffchainFeeAmtRequest = {\n            accountId: acc.accountId,\n            requestType: OffchainFeeReqType.AMM_JOIN,\n            tokenSymbol: pair.coinBInfo.simpleName as string,\n        }\n\n        const { fees } = await LoopringAPI.userAPI.getOffchainFeeAmt(request2, acc.apiKey)\n        setJoinfees(fees)\n\n        console.log('joinFees:', fees)\n\n    }, [LoopringAPI.userAPI, pair.coinBInfo?.simpleName, store.getState().account.status])\n\n    /*\n    const [exitFees, setExitfees] = useState<LoopringMap<OffchainFeeInfo>>()\n\n    useCustomDCEffect(async() => {\n        if (!LoopringAPI.userAPI || !pair.coinBInfo?.simpleName) {\n            return\n        }\n\n        const acc = store.getState().account\n\n        const request2: GetOffchainFeeAmtRequest = {\n            accountId: acc.accountId,\n            requestType: OffchainFeeReqType.AMM_EXIT,\n            tokenSymbol: pair.coinBInfo.simpleName as string,\n        }\n\n        const { fees } = await LoopringAPI.userAPI.getOffchainFeeAmt(request2, acc.apiKey)\n        setExitfees(fees)\n\n    }, [LoopringAPI.userAPI, pair.coinBInfo?.simpleName])\n    */\n\n    const handleJoinAmmPoolEvent = React.useCallback(async (data: AmmData<IBData<C>>, type: 'coinA' | 'coinB') => {\n\n        // snapShotData is undefined?\n\n        const handler = async () => {\n            console.log('handleJoinAmmPoolEvent', data, type, snapShotData);\n\n            if (!tokenMap || !data.coinA.belong || !data.coinB.belong) {\n                console.log('return!')\n                return\n            }\n\n            const isAtoB = type === 'coinA'\n\n            const acc: Lv2Account = store.getState().account\n\n            const { idIndex, marketArray, marketMap, } = store.getState().tokenMap\n\n            const { ammMap } = store.getState().amm.ammMap\n\n            const { market, amm } = getExistedMarket(marketArray, data.coinA.belong as string,\n                data.coinB.belong as string)\n\n            if (!market || !amm || !marketMap) {\n                return\n            }\n\n            const marketInfo: MarketInfo = marketMap[market]\n\n            const ammInfo: any = ammMap[amm as string]\n\n            const request1: GetAmmPoolSnapshotRequest = {\n                poolAddress: ammInfo.address\n            }\n\n            const response = await LoopringAPI.ammpoolAPI?.getAmmPoolSnapshot(request1)\n\n            if (!response) {\n                return\n            }\n\n            const { ammPoolSnapshot } = response\n\n            console.log('ammsnap:', ammPoolSnapshot)\n\n            const coinA = tokenMap[data.coinA.belong as string]\n            const coinB = tokenMap[data.coinB.belong as string]\n\n            const coinA_TV = ammPoolSnapshot.pooled[0]\n            const coinB_TV = ammPoolSnapshot.pooled[1]\n\n            const covertVal = data.coinA.tradeValue ? sdk.toBig(data.coinA.tradeValue)\n                .times('1e' + isAtoB ? coinA.decimals : coinB.decimals).toFixed(0, 0) : '0'\n            const { output, ratio } = sdk.ammPoolCalc(covertVal, isAtoB, coinA_TV, coinB_TV)\n\n            const rawVal = isAtoB ? data.coinA.tradeValue.toString() : data.coinB.tradeValue.toString()\n\n            const { request } = makeJoinAmmPoolRequest(rawVal,\n                isAtoB, '0.001', acc.accAddr, joinFees as LoopringMap<OffchainFeeInfo>,\n                ammMap[amm], response.ammPoolSnapshot, tokenMap as any, idIndex as IdMap, 0, 0)\n\n            console.log('request:', request)\n\n            if (isAtoB) {\n                data.coinB.tradeValue = parseFloat(toBig(request.joinTokens.pooled[1].volume)\n                .div('1e' + coinB.decimals).toFixed(marketInfo.precisionForPrice))\n            } else {\n                data.coinA.tradeValue = parseFloat(toBig(request.joinTokens.pooled[0].volume)\n                .div('1e' + coinA.decimals).toFixed(marketInfo.precisionForPrice))\n            }\n\n            setAmmDepositData({\n                coinA: data.coinA as IBData<C>,\n                coinB: data.coinB as IBData<C>,\n                slippage: 0.001\n            })\n\n            setJoinRequest({\n                ammInfo,\n                request\n            })\n        }\n\n        const handlerInDebounce = debounce(async() => {\n\n            await handler()\n\n        }, 100)\n\n        await handler()\n        // await handlerInDebounce()\n\n    }, [joinFees]);\n\n    const handleExitAmmPoolEvent = React.useCallback((data: AmmData<IBData<C>>, type: 'coinA' | 'coinB') => {\n        console.log('handleExitAmmPoolEvent', data, type);\n    }, []);\n\n\n    useCustomDCEffect(() => {\n        const label: string | undefined = accountStaticCallBack(bntLabel)\n        setAmmDepositBtnI18nKey(label);\n        setAmmWithdrawBtnI18nKey(label)\n    }, [account.status, bntLabel])\n\n    const onAmmDepositClick = React.useCallback((props: AmmData<IBData<C>>) => {\n        const onAmmDepositClickArray: typeof btnClickArray = Object.assign(btnClickArray, {\n            [fnType.ACTIVATED]: [async function () {\n                //TODO: onDeposit\n\n                if (!LoopringAPI.ammpoolAPI || !LoopringAPI.userAPI || !joinRequest) {\n                    console.log(' onAmmDeposit ammpoolAPI:', LoopringAPI.ammpoolAPI,\n                        'joinRequest:', joinRequest)\n                    return\n                }\n\n                console.log('onAmmDeposit req:', joinRequest)\n                const acc: Lv2Account = store.getState().account\n\n                const { ammInfo, request } = joinRequest\n\n                const patch: AmmPoolRequestPatch = {\n                    chainId: store.getState().system.chainId as ChainId,\n                    ammName: ammInfo.__rawConfig__.name,\n                    poolAddress: ammInfo.address,\n                    eddsaKey: acc.eddsaKey\n                }\n\n                console.log('request:', request)\n                console.log('patch:', patch)\n\n\n                const request2: GetNextStorageIdRequest = {\n                    accountId: acc.accountId,\n                    sellTokenId: request.joinTokens.pooled[0].tokenId as number\n                }\n                const storageId0 = await LoopringAPI.userAPI.getNextStorageId(request2, acc.apiKey)\n\n                const request_1: GetNextStorageIdRequest = {\n                    accountId: acc.accountId,\n                    sellTokenId: request.joinTokens.pooled[1].tokenId as number\n                }\n                const storageId1 = await LoopringAPI.userAPI.getNextStorageId(request_1, acc.apiKey)\n\n                request.storageIds = [storageId0.offchainId, storageId1.offchainId]\n\n                try {\n\n                    const response = await LoopringAPI.ammpoolAPI?.joinAmmPool(request, patch, acc.apiKey)\n\n                    console.log('join response:', response)\n\n                } catch (reason) {\n                    dumpError400(reason)\n                }\n\n                if (props.__cache__) {\n                    makeCache(props.__cache__)\n                }\n            }, props]\n        })\n        accountStaticCallBack(onAmmDepositClickArray)\n    }, [joinRequest,]);\n\n    const onAmmWithdrawClick = React.useCallback((props: AmmData<IBData<C>>) => {\n        const onAmmWithdrawClickArray: typeof btnClickArray = Object.assign(btnClickArray, {\n            [fnType.ACTIVATED]: [function (props: AmmData<IBData<C>>) {\n                //TODO: onWithdraw\n                console.log('onAmmWithdraw', props)\n\n                if (props.__cache__) {\n                    makeCache(props.__cache__)\n                }\n            }, props]\n        })\n        accountStaticCallBack(onAmmWithdrawClickArray)\n    }, []);\n\n    React.useEffect(() => {\n        if (snapShotData) {\n            initAmmData(pair)\n        }\n    }, [snapShotData, pair, walletMap]);\n\n\n    return {\n        ammCalcData,\n        ammDepositData,\n        ammWithdrawData,\n        handleJoinAmmPoolEvent,\n        handleExitAmmPoolEvent,\n        onAmmWithdrawClick,\n        onAmmDepositClick,\n        ammDepositBtnI18nKey,\n        ammWithdrawBtnI18nKey,\n    }\n}","import React from \"react\";\nimport { AmmActivity, CoinInfo, TradeFloat } from \"@loopring-web/component-lib/static-resource\";\nimport { useTokenMap } from \"stores/token\";\nimport { useRouteMatch } from 'react-router';\nimport { AmmDetailStore, useAmmMap } from '../../../stores/Amm/AmmMap';\nimport { useWalletLayer2 } from '../../../stores/walletLayer2';\nimport { makeTickView, makeWallet, pairDetailBlock, WalletMapExtend } from '../../../hooks/help';\nimport { AmmPoolSnapshot, AmmUserRewardMap, getExistedMarket, TickerData } from 'loopring-sdk';\nimport { deepClone } from '../../../utils/obj_tools';\nimport { getUserAmmTransaction, makeMyAmmMarketArray } from '../../../hooks/help/marketTable';\nimport { AmmRecordRow } from '@loopring-web/component-lib/components/tableList/ammRecordTable/Interface';\nimport { AmmPoolActivityRule, LoopringMap } from 'loopring-sdk/dist/defs/loopring_defs';\nimport { MyAmmLP } from '@loopring-web/component-lib/src/static-resource';\nimport { useSystem } from '../../../stores/system';\nimport { makeMyAmmWithSnapshot } from '../../../hooks/help/makeUIAmmActivityMap';\nimport store from '../../../stores';\nimport { useUserRewards } from '../../../stores/userRewards';\n\nconst makeAmmDetailExtendsActivityMap = ({ammMap, coinMap, ammActivityMap, ammKey}: any) => {\n\n    if (ammMap && coinMap) {\n        let ammDetail = deepClone(ammMap[ ammKey as string ]);\n        const ammActivity = ammActivityMap [ ammKey as string ];\n\n        if (ammDetail && ammDetail.coinA) {\n            ammDetail.myCoinA = coinMap[ ammDetail.coinA ];\n            ammDetail.myCoinB = coinMap[ ammDetail.coinB ];\n            ammDetail[ 'activity' ] = ammActivity ? ammActivity : {};\n        }\n        return ammDetail;\n    }\n}\ntype PgAmmDetail<C extends { [ key: string ]: any }> = AmmDetailStore<C> & {\n    myCoinA: CoinInfo<C>,\n    myCoinB: CoinInfo<C>,\n    activity: AmmActivity<C> | undefined\n}\n\n\nexport const useCoinPair = <C extends { [ key: string ]: any }>(ammActivityMap: LoopringMap<LoopringMap<AmmPoolActivityRule[]>>) => {\n    const match: any = useRouteMatch(\"/liquidity/pools/coinPair/:symbol\")\n    const {coinMap, tokenMap, marketArray} = useTokenMap();\n    const {faitPrices} = useSystem();\n    const ammMapState = useAmmMap();\n    const useUserRewardsState = useUserRewards()\n\n    // const {account} = useAccount();\n\n\n    const {ammMap, updateAmmMap} = ammMapState;\n\n    // const {ammMap,updateAmmMap} = useAmmMap();\n    const walletLayer2State = useWalletLayer2();\n    const [walletMap, setWalletMap] = React.useState<WalletMapExtend<C> | undefined>(undefined);\n    // const [ammRecordArray, setAmmRecordArray] = React.useState<AmmRecordRow<C>[]>([]);\n    const [ammMarketArray, setAmmMarketArray] = React.useState<AmmRecordRow<C>[]>([]);\n\n\n    const [myAmmMarketArray, setMyAmmMarketArray] = React.useState<AmmRecordRow<C>[]>([]);\n    const [ammUserRewardMap, setAmmUserRewardMap] = React.useState<AmmUserRewardMap | undefined>(undefined);\n    const [snapShotData, setSnapShotData] = React.useState<{\n        tickerData: TickerData | undefined\n        ammPoolsBalance: AmmPoolSnapshot | undefined\n    } | undefined>(undefined);\n\n    const [myAmm, setMyAmm] = React.useState<MyAmmLP<C>>(\n        {\n            feeA: 0,\n            feeB: 0,\n            feeDollar: 0,\n            feeYuan: 0,\n            reward: 0,\n            rewardToken: undefined as any,\n            balanceA: 0,\n            balanceB: 0,\n            balanceYuan: 0,\n            balanceDollar: 0,\n        })\n    // const [ammPoolsBalance, setAmmpoolsbalance] = React.useState<AmmPoolSnapshot|undefined>(undefined);\n    const [coinPairInfo, setCoinPairInfo] = React.useState<PgAmmDetail<C>>({\n        myCoinA: undefined,\n        myCoinB: undefined,\n        activity: undefined,\n        totalRewards: undefined,\n        amountDollar: undefined,\n        amountYuan: undefined,\n        totalLPToken: undefined,\n        totalA: undefined,\n        totalB: undefined,\n        rewardToken: undefined,\n        rewardValue: undefined,\n        feeA: undefined,\n        feeB: undefined,\n        isNew: undefined,\n        isActivity: undefined,\n        APY: undefined\n    } as unknown as PgAmmDetail<C>);\n    const [tradeFloat, setTradeFloat] = React.useState<TradeFloat | undefined>(undefined);\n    const [pair, setPair] = React.useState<{ coinAInfo: CoinInfo<C> | undefined, coinBInfo: CoinInfo<C> | undefined }>({\n        coinAInfo: undefined,\n        coinBInfo: undefined,\n    });\n\n    const walletLayer2DoIt = React.useCallback((market) => {\n        const {walletMap: _walletMap} = makeWallet();\n        setWalletMap(_walletMap)\n        if (_walletMap) {\n            getUserAmmTransaction()?.then((marketTrades) => {\n                let _myTradeArray = makeMyAmmMarketArray(market, marketTrades)\n                setMyAmmMarketArray(_myTradeArray ? _myTradeArray : [])\n            })\n        }\n        return _walletMap\n    }, [makeWallet, getUserAmmTransaction, makeMyAmmMarketArray, marketArray, pair])\n\n    React.useEffect(() => {\n        const coinKey = match?.params.symbol ?? undefined;\n        let _tradeFloat: Partial<TradeFloat> = {}\n        const [, coinA, coinB] = coinKey.match(/(\\w+)-(\\w+)/i)\n        let {\n            amm,\n            market\n        } = getExistedMarket(marketArray, coinA, coinB);\n\n        const _coinPairInfo = makeAmmDetailExtendsActivityMap({ammMap, coinMap, ammActivityMap, ammKey: amm})\n        setCoinPairInfo(_coinPairInfo ? _coinPairInfo : {})\n\n        if (coinMap) {\n            setPair({\n                coinAInfo: coinMap[ coinA ],\n                coinBInfo: coinMap[ coinB ]\n            })\n        }\n\n        // let _walletMap: WalletMapExtend<C>|undefined = undefined\n        if (walletLayer2State.walletLayer2) {\n            walletLayer2DoIt(market);\n        }\n\n        if (amm && market && ammMap) {\n            //TODO should add it into websocket\n            updateAmmMap();\n            let apiList = [\n                pairDetailBlock({coinKey: market, ammKey: amm, ammMap}),\n                // LoopringAPI.ammpoolAPI.getAmmPoolSnapshot({poolAddress: ammMap[ ammKey ].address}),\n                // LoopringAPI.exchangeAPI.getMixTicker({market: coinKey})])\n            ];\n            // @ts-ignore\n            Promise.all([...apiList]).then(\n                ([{ammPoolsBalance, tickMap}\n                     //  ,ammUserRewardMap\n                 ]: any[]) => {\n                    if (tokenMap) {\n                        const _snapShotData = {\n                            tickerData: tickMap[ market ],\n                            ammPoolsBalance: ammPoolsBalance,\n                        }\n                        _tradeFloat = makeTickView(tickMap[ market ] ? tickMap[ market ] : {})\n                        setTradeFloat(_tradeFloat as TradeFloat);\n                        setCoinPairInfo({..._coinPairInfo})\n                        setSnapShotData(_snapShotData)\n\n                    }\n                }).catch((error) => {\n                console.log(error);\n                throw  Error\n            })\n        }\n\n    }, []);\n\n    React.useEffect(() => {\n        const {market} = getExistedMarket(marketArray, pair.coinAInfo?.simpleName as string, pair.coinBInfo?.simpleName as string);\n        if (market && snapShotData && snapShotData.ammPoolsBalance) {\n            switch (walletLayer2State.status) {\n                case \"ERROR\":\n                    walletLayer2State.statusUnset();\n                    // setState('ERROR')\n                    //TODO: show error at button page show error  some retry dispath again\n                    break;\n                case \"DONE\":\n                    walletLayer2State.statusUnset();\n                    const _walletMap = walletLayer2DoIt(market);\n                    const _myAmm: MyAmmLP<C> = makeMyAmmWithSnapshot(market, _walletMap, ammUserRewardMap, snapShotData);\n                    setMyAmm(_myAmm)\n                    break;\n                default:\n                    break;\n\n            }\n        }\n\n    }, [walletLayer2State.status, ammUserRewardMap])\n\n    //TODO tickMap\n    React.useEffect(() => {\n        const {market} = getExistedMarket(marketArray, pair.coinAInfo?.simpleName as string, pair.coinBInfo?.simpleName as string);\n        if (market) {\n            switch (useUserRewardsState.status) {\n                case \"ERROR\":\n                    useUserRewardsState.statusUnset();\n                    // setState('ERROR')\n                    //TODO: show error at button page show error  some retry dispath again\n                    break;\n                case \"DONE\":\n                    // getAmmPoolUserRewards().then((ammUserRewardMap)=>{\n                    const {userRewardsMap} = store.getState().userRewardsMap\n                    setAmmUserRewardMap(userRewardsMap)\n                    const _myAmm: MyAmmLP<C> = makeMyAmmWithSnapshot(market, walletMap, ammUserRewardMap, snapShotData);\n                    setMyAmm(_myAmm);\n                    break;\n                default:\n                    break;\n\n            }\n        }\n\n    }, [useUserRewardsState.status])\n\n    React.useEffect(() => {\n        if (ammMapState.status === \"ERROR\") {\n            //TODO: solve error\n            ammMapState.statusUnset();\n        } else if (ammMapState.status === \"DONE\") {\n            ammMapState.statusUnset();\n            if (ammMapState.ammMap && pair.coinAInfo?.simpleName && pair.coinBInfo?.simpleName) {\n                const _coinPairInfo = makeAmmDetailExtendsActivityMap(\n                    {\n                        ammMap,\n                        coinMap,\n                        ammActivityMap,\n                        ammKey: 'AMM-' + pair.coinAInfo.simpleName + pair.coinBInfo.simpleName\n                    })\n                setCoinPairInfo({\n                    ...coinPairInfo, ..._coinPairInfo,\n                    tradeFloat: coinPairInfo.tradeFloat\n                })\n\n            }\n\n            // tokenState.statusUnset()\n            // setState('DONE');\n        }\n    }, [ammMapState.status, ammMapState.ammMap, pair, ammActivityMap, tokenMap])\n\n\n    return {\n        walletMap,\n        myAmm,\n        // tickerData,\n        coinPairInfo,\n        snapShotData,\n        // ammPoolsBalance,\n        pair,\n        tradeFloat,\n        ammMarketArray,\n        myAmmMarketArray,\n    }\n}","import React from 'react';\nimport { WithTranslation, withTranslation } from 'react-i18next';\nimport { AmmRecordTable, TradeTitle, useSettings } from '@loopring-web/component-lib';\nimport {\n    Currency,\n    getThousandFormattedNumbers,\n    PriceTag,\n    EmptyValueTag,\n    unit\n} from '@loopring-web/component-lib/static-resource';\nimport { Box, Breadcrumbs, Grid, Hidden, Link, Typography} from '@material-ui/core';\nimport { AmmPanelView } from '../AmmPanel';\nimport moment from 'moment';\nimport styled from '@emotion/styled/';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\n\nimport { useCoinPair } from './hooks';\nimport { AmmPoolActivityRule, LoopringMap } from 'loopring-sdk/dist/defs/loopring_defs';\nimport { StylePaper } from 'pages/styled';\n\n\n//******************** page code ************************//\n//  ${({theme}) => theme.border.defaultFrame({c_key: 'blur'})};\nconst BoxStyled = styled(Box)`\n  background-color: ${({theme}) => theme.colorBase.background().default};\n  border-radius: ${({ theme }) => theme.unit}px;\n`;\n\n\nconst applyProps = (index: number) => {\n    return {\n        id: `simple-tab-${index}`,\n        'aria-controls': `tabpanel-${index}`,\n    }\n}\n\nexport const CoinPairPanel = withTranslation('common')(<R extends {[key:string]:any},I extends {[key:string]:any}>\n({t,  ammActivityMap, ...rest}:\n     WithTranslation & { ammActivityMap: LoopringMap<LoopringMap<AmmPoolActivityRule[]>>|undefined } & any) => {    //ActivityMap<I, I>\n    //TODO: checkRouter\n\n    const {currency} = useSettings();\n    const {tradeFloat,snapShotData, pair, coinPairInfo, walletMap,ammMarketArray,myAmmMarketArray,myAmm} = useCoinPair({ammActivityMap});\n    const [tabIndex, setTabIndex] = React.useState<0 | 1>(0);\n    const [page, setPage] = React.useState(rest?.page ? rest.page : 1);\n    const handleChange = (event: any, newValue: 0 | 1) => {\n        setTabIndex(newValue);\n        setPage(1);\n    }\n    const _handlePageChange = React.useCallback((page: number) => {\n        setPage(page);\n    }, [])\n\n\n    return <>\n\n        <Grid container>\n            <Grid item xs={8}>\n                <Breadcrumbs aria-label=\"breadcrumb\">\n                    <Link color=\"textSecondary\" href=\"/#/liquidity/pools\">\n                        {t('labelAmmList')}\n                    </Link>\n                    <Typography color={'textSecondary'} display={'flex'} alignItems={'center'}\n                                justifyContent={'center'}\n                    >{pair.coinAInfo?.simpleName}-{pair.coinBInfo?.simpleName}</Typography>\n                </Breadcrumbs>\n            </Grid>\n            <Grid item xs={4} alignItems={'center'} justifyContent={'flex-end'} display={'flex'}>\n                <Link href=\"/#/liquidity/pools\" variant={'h5'}>\n                    {t('labelBack')}\n                </Link>\n            </Grid>\n        </Grid>\n        <Grid container marginTop={3}>\n            <Grid item xs={7}>\n                <TradeTitle {...{\n                    ...rest, t,\n                    ...pair,\n                    tradeFloat,\n                    isNew: false\n                }}></TradeTitle>\n            </Grid>\n        </Grid>\n        <Box flex={1} display={'flex'} alignItems={'stretch'} flexDirection=\"row\" marginTop={3}>\n            <Box flex={1} display={'flex'}>\n                <Grid container spacing={2} wrap={'nowrap'}>\n                    <Grid item md={5} xs={12} paddingRight={2} display={'flex'} flexDirection={'column'}\n                          alignItems={'stretch'} justifyContent={'flex-start'}>\n                        <BoxStyled paddingY={3} marginBottom={2} paddingX={1 / 2 * 5} display={'flex'} flexDirection={'column'}>\n                            <Typography component={'p'} color={'textSecondary'} display={'flex'}\n                                        justifyContent={'space-between'}>\n                                <Typography component={'span'}\n                                            style={{textTransform: 'capitalize'}}>{t('labelLiquidity')}</Typography>\n                                <Typography component={'span'}\n                                            style={{textTransform: 'uppercase'}}>{t('labelAPY')}</Typography>\n                            </Typography>\n                            <Typography component={'p'} color={'textPrimary'} display={'flex'}\n                                        justifyContent={'space-between'} marginTop={1}>\n                                <>\n                                    <Typography\n                                        component={'span'}> {typeof coinPairInfo.amountDollar === 'undefined' ? EmptyValueTag :\n                                        currency === Currency.dollar ? PriceTag.Dollar + getThousandFormattedNumbers(coinPairInfo.amountDollar) : PriceTag.Yuan + getThousandFormattedNumbers(coinPairInfo.amountYuan ? coinPairInfo.amountYuan : 0)}\n                                    </Typography>\n                                    <Typography\n                                        component={'span'}> {coinPairInfo.APY ? coinPairInfo.APY : EmptyValueTag}%\n                                    </Typography>\n                                </>\n\n\n                            </Typography>\n\n                            <Typography component={'p'} color={'textSecondary'} display={'flex'}\n                                        justifyContent={'space-between'} marginTop={2}>\n                                <Typography component={'span'}\n                                            color={'textSecondary'}>\n                                    <Hidden mdDown>{t('labelLPTotal')}</Hidden>{t('labelLPTokens')}</Typography>\n                                <Typography component={'span'}\n                                            color={'textSecondary'}>{coinPairInfo.totalLPToken}</Typography>\n                            </Typography>\n                            <Typography component={'p'} color={'textSecondary'} display={'flex'}\n                                        justifyContent={'space-between'} marginTop={1}>\n\n                                <Typography component={'span'}\n                                            color={'textSecondary'}>\n                                    <Hidden\n                                        mdDown>{t('labelLPTotal')}</Hidden>{coinPairInfo.myCoinA?.simpleName}\n                                </Typography>\n\n                                <Typography component={'span'}\n                                            color={'textSecondary'}>{coinPairInfo.totalA}</Typography>\n                            </Typography>\n                            <Typography component={'p'} color={'textSecondary'} display={'flex'}\n                                        justifyContent={'space-between'} marginTop={1}>\n                                <Typography component={'span'}\n                                            color={'textSecondary'}>\n                                    <Hidden\n                                        mdDown>{t('labelLPTotal')}</Hidden>{coinPairInfo.myCoinB?.simpleName}\n                                </Typography>\n                                <Typography component={'span'}\n                                            color={'textSecondary'}>{coinPairInfo.totalB}</Typography>\n                            </Typography>\n\n                        </BoxStyled>\n                        <BoxStyled paddingY={3} marginBottom={2} paddingX={1 / 2 * 5} display={'flex'} flexDirection={'column'}>\n                            <Typography component={'p'} color={'textSecondary'} display={'flex'}\n                                        justifyContent={'space-between'} alignItems={'center'}>\n                                <Typography component={'span'} color={'textSecondary'} variant={'body2'} style={{textTransform: 'capitalize'}}>\n                                    {coinPairInfo.tradeFloat?.timeUnit} {t('labelVolume')}\n                                </Typography>\n                                <Typography component={'span'} color={'textSecondary'}>\n                                    {t('labelFee')} {/* ' : '*/}\n                                </Typography>\n                            </Typography>\n                            <Typography component={'p'} color={'textSecondary'} display={'flex'}\n                                        justifyContent={'space-between'} marginTop={1} alignItems={'center'}>\n                                <Typography component={'span'} variant={'h4'} color={'textPrimary'}>\n                                    {currency === Currency.dollar ? PriceTag.Dollar + getThousandFormattedNumbers(coinPairInfo.tradeFloat && coinPairInfo.tradeFloat.priceDollar ? coinPairInfo.tradeFloat.priceDollar as number : 0)\n                                        : PriceTag.Yuan + getThousandFormattedNumbers(coinPairInfo.tradeFloat && coinPairInfo.tradeFloat.priceYuan ? coinPairInfo.tradeFloat.priceYuan as number : 0)}\n                                </Typography>\n                                <Typography noWrap textAlign={'center'} component={'span'} color={'textSecondary'}\n                                            variant={'body2'} textOverflow={'ellipsis'} display={'flex'}\n                                            alignItems={'center'}>\n                                    <Typography component={'span'} color={'inherit'} variant={'inherit'}\n                                                display={'flex'} flexDirection={'column'}>\n                                        <Typography component={'span'} color={'inherit'} variant={'inherit'}>\n                                            {coinPairInfo.myCoinA?.simpleName}\n                                        </Typography>\n                                        <Typography component={'span'} color={'inherit'} variant={'inherit'}>\n                                            {coinPairInfo.feeA?getThousandFormattedNumbers(coinPairInfo.feeA):EmptyValueTag}\n                                        </Typography>\n                                    </Typography>\n                                    <Typography component={'span'} color={'inherit'} variant={'h5'}\n                                                paddingX={1}>{' + '}</Typography>\n                                    <Typography component={'span'} color={'inherit'} variant={'inherit'}\n                                                display={'flex'} flexDirection={'column'}>\n                                        <Typography component={'span'} color={'inherit'} variant={'inherit'}>\n                                            {coinPairInfo.myCoinB?.simpleName}\n                                        </Typography>\n                                        <Typography component={'span'} color={'inherit'} variant={'inherit'}>\n                                            {coinPairInfo.feeB?getThousandFormattedNumbers(coinPairInfo.feeB):EmptyValueTag}\n                                        </Typography>\n                                    </Typography>\n                                </Typography>\n                            </Typography>\n                        </BoxStyled>\n                        <BoxStyled paddingY={3} marginBottom={2} paddingX={1 / 2 * 5} display={'flex'} flexDirection={'column'}>\n                            <Typography component={'p'} color={'textSecondary'} display={'flex'}\n                                        justifyContent={'space-between'}>\n                                <Typography component={'span'}\n                                            color={'textSecondary'}> {t('labelMyPoolShare')}</Typography>\n                            </Typography>\n                            <Typography component={'p'} color={'textSecondary'} display={'flex'}\n                                        justifyContent={'space-between'} marginTop={1}>\n                                <Typography component={'span'}\n                                            color={'textSecondary'}>\n                                    <>{myAmm.balanceA ? getThousandFormattedNumbers(myAmm.balanceA,2)  : EmptyValueTag}</>\n                                    <> { coinPairInfo.myCoinA?.simpleName}</>\n                                </Typography>\n                                <Typography component={'span'} color={'textecondary'}\n                                            variant={'h5'}> {myAmm.feeA?getThousandFormattedNumbers(myAmm.feeA):EmptyValueTag} {coinPairInfo.myCoinA?.simpleName}  </Typography>\n                            </Typography>\n                            <Typography component={'p'} color={'textSecondary'} display={'flex'}\n                                        justifyContent={'space-between'} marginTop={1}>\n                                <Typography component={'span'}\n                                            color={'textSecondary'}>\n                                    <>{myAmm.balanceB ? getThousandFormattedNumbers(myAmm.balanceB,2) : EmptyValueTag}</>\n                                    <> {coinPairInfo.myCoinB?.simpleName}</>\n                                </Typography>\n                                <Typography component={'span'} color={'textSecondary'}\n                                            variant={'h5'}> {myAmm.feeB?getThousandFormattedNumbers(myAmm.feeB):EmptyValueTag} {coinPairInfo.myCoinB?.simpleName}</Typography>\n                            </Typography>\n                        </BoxStyled>\n                        <BoxStyled paddingY={3} paddingX={1 / 2 * 5} display={'flex'}\n                                   flexDirection={'column'}>\n                            <Box display={'flex'} flexDirection={'row'} justifyContent={'space-between'}>\n                                <Typography display={'flex'} flexDirection={'column'} component={'div'}>\n                                    <Typography variant={'body2'} component={'h5'} color={'textSecondary'}>\n                                        {t('labelReward')}\n                                    </Typography>\n                                    <Typography variant={'body1'} component={'span'} color={'textPrimary'}>\n                                        {typeof coinPairInfo.isActivity === 'undefined' ? EmptyValueTag : <>\n                                            <Typography\n                                                component={'span'}>{coinPairInfo.activity?getThousandFormattedNumbers(coinPairInfo.activity.totalRewards):EmptyValueTag} </Typography>\n                                            <Typography\n                                                component={'span'}>{coinPairInfo.activity?.rewardToken?.simpleName}</Typography>\n                                        </>}\n                                    </Typography>\n                                </Typography>\n                                <Typography display={'flex'} flexDirection={'column'} alignItems={'flex-end'}\n                                            component={'div'}>\n                                    <Typography variant={'body2'} component={'h5'} color={'textSecondary'}>\n                                        {t('labelMyReward')}\n                                    </Typography>\n                                    <Typography variant={'body1'} component={'span'} color={'textPrimary'}>\n                                        {/*{typeof coinPairInfo.isActivity === 'undefined' ? EmptyValueTag : <>*/}\n                                        {typeof myAmm.reward === 'undefined' ? EmptyValueTag : <>\n\n                                        <Typography component={'span'}> {getThousandFormattedNumbers(myAmm.reward)} </Typography>\n                                            <Typography\n                                                component={'span'}> {coinPairInfo.activity?.rewardToken?.simpleName}</Typography></>}\n\n                                    </Typography>\n                                </Typography>\n                            </Box>\n                            <Typography alignSelf={'flex-start'} variant={'body2'} color={'textSecondary'}\n                                        component=\"span\" marginTop={1}>\n                                {typeof coinPairInfo.isActivity === 'undefined' ? t('labelNoActiveEvent')\n                                    : <>\n                                        {t('labelDate')} :\n                                       <> {moment(coinPairInfo.activity?.duration.from).format('L') + ' - ' + moment(coinPairInfo.activity?.duration.to).format('L')}</>\n                                    </>\n                                }\n                            </Typography>\n                        </BoxStyled>\n                    </Grid>\n                    <Hidden mdDown>\n                        <Grid item md={7} paddingRight={2}>\n\n\n                        </Grid>\n                    </Hidden>\n                </Grid>\n            </Box>\n            <Box display={'flex'}>\n                <AmmPanelView pair={pair} walletMap={walletMap} snapShotData={snapShotData}/>\n            </Box>\n        </Box>\n        <Grid container marginY={3}>\n            <Grid item xs={12}>\n                <Tabs value={tabIndex}\n                      onChange={handleChange}\n                      aria-label=\"tabs switch\">\n                    <Tab label={t('labelAll')} {...applyProps(0)} />\n                    <Tab label={t('labelMe')} {...applyProps(1)} />\n                </Tabs>\n                <StylePaper style={{marginTop: `${unit*2}px`}}>\n                    {/*ammRecordArray*/}\n                    {tabIndex === 0 ?  <AmmRecordTable\n                        rawData={ammMarketArray}\n                        handlePageChange={_handlePageChange} page={page}\n                    /> : <AmmRecordTable rawData={myAmmMarketArray}  handlePageChange={_handlePageChange} page={page} /> }\n                </StylePaper>\n            </Grid>\n\n        </Grid>\n\n    </>\n})\n\n\n\n","import { AmmProps } from '@loopring-web/component-lib';\nimport React from 'react';\nimport { AmmCardProps, AmmData, AmmInData, IBData } from '@loopring-web/component-lib/static-resource';\nimport { AmmCard } from '@loopring-web/component-lib/components/block/AmmCard';\nimport { Grid } from '@material-ui/core';\nimport { useAmmMiningUI } from './hook';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport { withTranslation } from 'react-i18next';\nimport { AmmPoolActivityRule, LoopringMap } from 'loopring-sdk/dist/defs/loopring_defs';\n\nconst AmmCardWrap = React.memo(React.forwardRef((props:AmmCardProps<{[key:string]:any}>,ref) => {\n    return props? <AmmCard ref={ref} {...props} /> :<></>\n}));\nconst AmmList = <I extends {[key:string]:any}>({ammActivityViewMap}: {ammActivityViewMap: Array<AmmCardProps<I>> })=>{\n    return  <>{ammActivityViewMap.map((item:AmmCardProps<I>,index)=>\n        <Grid item xs={12} sm={6} lg={4}  key={index}>\n            <AmmCardWrap {...item as any} />\n        </Grid>\n    ) }</>\n}\n\nexport const AmmMiningView =  withTranslation('common')(<T extends AmmData<C extends IBData<I> ? C : IBData<I>>, I,\n    ACD extends AmmInData<I>,\n    C = IBData<I>>({ammProps,t,ammActivityMap,...rest}: { ammProps:AmmProps<T ,I,ACD>,\n    ammActivityMap: LoopringMap<LoopringMap<AmmPoolActivityRule[]>>|undefined,   \n} & any) => {\n    const { ammActivityViewMap,\n        ammActivityPastViewMap} = useAmmMiningUI({ammActivityMap});\n    const [tabIndex,setTabIndex] = React.useState<0|1>(0);\n    const handleChange = (event: any, newValue: 0|1) => {\n        setTabIndex(newValue);\n    }\n\n    return <Grid container spacing={2}>\n        <Grid item xs={12}>\n            <Tabs value={tabIndex}\n                  onChange={handleChange}\n                  aria-label=\"tabs switch\">\n                <Tab label={t('labelCurrentActivities')}  />\n                <Tab label={t('labelPastActivities')}  />\n            </Tabs>\n        </Grid>\n        <AmmList ammActivityViewMap={tabIndex === 0 ? ammActivityViewMap : ammActivityPastViewMap}/>\n    </Grid>\n})\n","import { AmmCardProps } from '@loopring-web/component-lib/static-resource';\nimport { AmmPoolActivityRule, AmmPoolActivityStatus,LoopringMap } from 'loopring-sdk';\nimport React from 'react';\nimport {\n    makeUIAmmActivityMap\n} from '../../../hooks/help';\n\nimport { useUserRewards } from '../../../stores/userRewards';\n\nexport const useAmmMiningUI = <R extends { [ key: string ]: any }, I extends { [ key: string ]: any }>(\n    {\n        ammActivityMap\n    }: { ammActivityMap: LoopringMap<LoopringMap<AmmPoolActivityRule[]>> | undefined }\n): {\n    ammActivityViewMap: Array<AmmCardProps<I>>,\n    ammActivityPastViewMap: Array<AmmCardProps<I>>\n} => {\n    const  userRewardsMapState =  useUserRewards();// store.getState().userRewardsMap\n    // const {coinMap} = useTokenMap();\n    // const ammMapState = useAmmMap();\n    // const walletLayer2State = useWalletLayer2();\n    const [ammActivityViewMap, setAmmActivityViewMap] = React.useState<Array<AmmCardProps<I>>>([]);\n\n\n    const [ammActivityPastViewMap, setAmmActivityPastViewMap] = React.useState<Array<AmmCardProps<I>>>(\n        []);\n    // const [ammUserRewardMap, setAmmUserRewardMap] = React.useState<AmmUserRewardMap>(\n    //     {});\n\n\n    // );\n    React.useEffect(() => {\n        if(ammActivityMap && Object.keys(ammActivityMap).length>0 ){\n\n           // getAmmPoolUserRewards().then((ammUserRewardMap)=>{\n                // setAmmUserRewardMap(ammUserRewardMap as AmmUserRewardMap);\n                setAmmActivityViewMap(makeUIAmmActivityMap(\n                    {\n                        ammActivityMap,\n                        type: 'AMM_MINING',\n                        ammPoolActivityStatus: [AmmPoolActivityStatus.NotStarted, AmmPoolActivityStatus.InProgress]\n                    }, userRewardsMapState.userRewardsMap\n                ));\n                setAmmActivityPastViewMap(\n                    makeUIAmmActivityMap(\n                        {\n                            ammActivityMap,\n                            type: 'AMM_MINING',\n                            ammPoolActivityStatus: [AmmPoolActivityStatus.EndOfGame]\n                        }, userRewardsMapState.userRewardsMap\n                    ))\n          //  })\n        }\n\n    },[ammActivityMap])\n    React.useEffect(() => {\n            if (userRewardsMapState.status === \"ERROR\") {\n                //TODO: solve error\n                userRewardsMapState.statusUnset();\n            } else if (userRewardsMapState.status === \"DONE\") {\n                userRewardsMapState.statusUnset();\n                setAmmActivityViewMap(\n                    makeUIAmmActivityMap(\n                    {\n                        ammActivityMap,\n                        type: 'AMM_MINING',\n                        ammPoolActivityStatus: [AmmPoolActivityStatus.NotStarted, AmmPoolActivityStatus.InProgress]\n                    }, userRewardsMapState.userRewardsMap\n                ));\n                setAmmActivityPastViewMap(\n                    makeUIAmmActivityMap(\n                        {\n                            ammActivityMap,\n                            type: 'AMM_MINING',\n                            ammPoolActivityStatus: [AmmPoolActivityStatus.EndOfGame]\n                        }, userRewardsMapState.userRewardsMap\n                    ))\n                // if (userRewardsMapState.ammMap) {\n                //     setAmmActivityViewMap(\n                //         makeUIAmmActivityMap(\n                //             {\n                //                 ammActivityMap,\n                //                 type: 'AMM_MINING',\n                //                 ammPoolActivityStatus: [AmmPoolActivityStatus.NotStarted, AmmPoolActivityStatus.InProgress]\n                //             }, ammUserRewardMap\n                //         ))\n                //     setAmmActivityPastViewMap(\n                //         makeUIAmmActivityMap(\n                //             {\n                //                 ammActivityMap,\n                //                 type: 'AMM_MINING',\n                //                 ammPoolActivityStatus: [AmmPoolActivityStatus.EndOfGame]\n                //             }, ammUserRewardMap\n                //         ))\n                //\n                // }\n\n            }\n        },\n        [userRewardsMapState.status]\n    )\n\n\n    return {\n        ammActivityViewMap,\n        ammActivityPastViewMap\n    }\n\n}\n","import React from 'react'\nimport styled from '@emotion/styled'\nimport { Box, Grid, Typography } from '@material-ui/core'\nimport { WithTranslation, withTranslation } from 'react-i18next'\nimport {\n    AmmRecordTable,\n    AmmTradeType,\n    ChartType,\n    ScaleAreaChart,\n    TablePaddingX,\n    ToggleButtonGroup,\n    useSettings\n} from '@loopring-web/component-lib'\nimport { MyPoolTable } from '@loopring-web/component-lib/components/tableList/myPoolTable';\nimport {\n    Currency, EmptyValueTag,\n    getThousandFormattedNumbers,\n    PriceTag\n} from '@loopring-web/component-lib/src/static-resource';\n\nimport { AmmPoolActivityRule, LoopringMap } from 'loopring-sdk/dist/defs/loopring_defs';\nimport { useOverview } from './hook';\nimport { TableWrapStyled } from 'pages/styled'\n\n\n//TODO: FIXED:  demo data\n\n\nconst toggleData = [\n    {value: '24 H', key: '24 H'},\n    {value: '1 W', key: '1 W'},\n    {value: 'ALL', key: 'ALL'},\n]\n\nconst StylePaper = styled(Box)`\n  width: 100%;\n  height: 100%;\n  flex: 1;\n` as typeof Box;\n\nconst StyleWrapper = styled(Grid)`\n  position: relative;\n  width: 100%;\n  background-color: ${({theme}) => theme.colorBase.background().default};\n  border-radius: ${({theme}) => theme.unit}px;\n` as typeof Grid\n\n\n\nconst StyledBtnGroupWrapper = styled(Box)`\n  position: absolute;\n  z-index: 99;\n  top: ${({theme}) => theme.unit}px;\n  width: 100%;\n` as typeof Box\n\n\nexport const MyLiquidity = withTranslation('common')(\n    <R extends { [ key: string ]: any }, I extends { [ key: string ]: any }>\n    ({t, ammActivityMap, ...rest}:\n         WithTranslation &\n         { ammActivityMap: LoopringMap<LoopringMap<AmmPoolActivityRule[]>> | undefined }\n    ) => {\n        const [chartPeriod, setChartPeriod] = React.useState('ALL');\n        const [page, setPage] = React.useState(1);\n        const {currency} = useSettings();\n\n        const _handlePageChange = React.useCallback((page: number) => {\n            setPage(page);\n        }, [])\n\n        const {myAmmMarketArray, summaryReward, myPoolRow} = useOverview({ammActivityMap});\n        return (\n            <>\n                <StyleWrapper container spacing={1} padding={3} margin={0}>\n                    <Grid display={'flex'} flexDirection={'column'} justifyContent={'space-around'} item sm={3}>\n                        <Typography variant={'body1'} component={'h5'}\n                                    color={'textSecondary'}>{t('labelTotalPositionValue')}</Typography>\n                        <Typography variant={'h4'} marginTop={1}>\n                            {summaryReward === undefined ? EmptyValueTag : currency === Currency.dollar ? PriceTag.Dollar\n                                + getThousandFormattedNumbers(summaryReward.rewardDollar !== undefined? summaryReward.rewardDollar : 0)\n                                + getThousandFormattedNumbers( summaryReward.feeDollar !== undefined?summaryReward.feeDollar : 0)\n                                : PriceTag.Yuan + getThousandFormattedNumbers(summaryReward.rewardYuan ? summaryReward.rewardYuan : 0)\n                                    +  getThousandFormattedNumbers(summaryReward.feeYuan ? summaryReward.feeYuan : 0)}\n                        </Typography>\n                    </Grid>\n                    <Grid display={'flex'} flexDirection={'column'} justifyContent={'space-around'} item sm={3}>\n                        <Typography variant={'body1'} component={'h5'}\n                                    color={'textSecondary'}>{t('labelFeeRewards')}</Typography>\n                        <Typography variant={'h4'} marginTop={1}>\n                            {summaryReward === undefined ? EmptyValueTag : currency === Currency.dollar ? PriceTag.Dollar\n                                + getThousandFormattedNumbers(summaryReward.feeDollar ? summaryReward.feeDollar : 0)\n                                : PriceTag.Yuan\n                                + getThousandFormattedNumbers(summaryReward.feeYuan ? summaryReward.feeYuan : 0)}\n                        </Typography>\n                    </Grid>\n                    <Grid display={'flex'} flexDirection={'column'} justifyContent={'space-around'} item sm={3}>\n                        <Typography variant={'body1'} component={'h5'}\n                                    color={'textSecondary'}>{t('labelMiningRewards')}</Typography>\n                        <Typography variant={'h4'} marginTop={1}>\n                            {summaryReward === undefined ? EmptyValueTag : currency === Currency.dollar ? PriceTag.Dollar\n                                + getThousandFormattedNumbers(summaryReward.rewardDollar ? summaryReward.rewardDollar : 0)\n                                : PriceTag.Yuan\n                                + getThousandFormattedNumbers(summaryReward.rewardYuan ? summaryReward.rewardYuan : 0)}\n                        </Typography>\n                    </Grid>\n                </StyleWrapper>\n                <StyleWrapper container marginY={2} height={340}>\n                    <StyledBtnGroupWrapper display={'flex'} padding={3} justifyContent={'space-between'}>\n                        <Typography variant={'body1'} component={'h5'}\n                                    color={'textSecondary'}>{t('labelLiquidityValue')}</Typography>\n                        <Box marginRight={-1}>\n                            <ToggleButtonGroup exclusive size=\"small\" {...{\n                                ...rest,\n                                t,\n                                data: toggleData,\n                                value: chartPeriod,\n                                setValue: setChartPeriod\n                            }} />\n                        </Box>\n                    </StyledBtnGroupWrapper>\n                    <ScaleAreaChart type={ChartType.Trend} data={[]}/>\n                </StyleWrapper>\n                <Typography paddingLeft={2} variant={'h4'}>{t('labelMyAmm')}</Typography>\n                <TableWrapStyled container marginY={2} paddingBottom={2} flex={1} height={568}>\n                    <Grid item xs={12} display={'flex'} flexDirection={'column'}>\n                        <MyPoolTable\n                            rawData={myPoolRow}\n                            pagination={{pageSize: 5}}\n                            handleDeposit={(row: any) => {\n                                console.log()\n                            }}\n                            handleWithdraw={(row: any) => {\n                                console.log()\n                            }}\n                            handlePageChange={() => {\n                            }}\n                        />\n                    </Grid>\n                </TableWrapStyled>\n                <Typography paddingLeft={2} variant={'h4'}>{t('labelMyAmmRecord')}</Typography>\n                <TableWrapStyled container marginTop={2}  paddingBottom={2} flex={1}>\n                    <Grid item xs={12} display={'flex'} flexDirection={'column'}>\n                        <AmmRecordTable rawData={myAmmMarketArray} handlePageChange={_handlePageChange} page={page}/>\n                    </Grid>\n                </TableWrapStyled>\n            </>\n        )\n    })","import { AmmPoolActivityRule, LoopringMap } from 'loopring-sdk';\nimport React from 'react';\nimport { AmmRecordRow, MyPoolRow } from '@loopring-web/component-lib';\nimport { makeWallet, WalletMapExtend } from '../../../hooks/help/makeWallet';\nimport {\n    getUserAmmTransaction,\n    makeMyAmmMarketArray,\n    makeMyPoolRowWithPoolState,\n    makeSummaryMyAmm,\n    SummaryMyAmm\n} from '../../../hooks/help';\nimport { useTokenMap } from '../../../stores/token';\nimport { useWalletLayer2 } from '../../../stores/walletLayer2';\nimport { useUserRewards } from '../../../stores/userRewards';\nimport { useAmmMap } from '../../../stores/Amm/AmmMap';\n\n\nexport const useOverview = <R extends { [ key: string ]: any }, I extends { [ key: string ]: any }>(\n    {\n        ammActivityMap\n    }: { ammActivityMap: LoopringMap<LoopringMap<AmmPoolActivityRule[]>> | undefined }\n): {\n    myAmmMarketArray: AmmRecordRow<R>[],\n    summaryReward: SummaryMyAmm | undefined,\n    myPoolRow: AmmRecordRow<R>[]\n    // ammActivityViewMap: Array<AmmCardProps<I>>,\n    // ammActivityPastViewMap: Array<AmmCardProps<I>>\n} => {\n    const walletLayer2State = useWalletLayer2();\n    const userRewardsMapState = useUserRewards();\n    const {marketArray} = useTokenMap();\n    const ammMapState = useAmmMap();\n    const {ammMap} = ammMapState;\n\n    const [walletMap, setWalletMap] = React.useState<WalletMapExtend<R> | undefined>(undefined);\n    const [summaryReward, setSummaryReward] = React.useState<SummaryMyAmm | undefined>(undefined);\n    const [myPoolRow, setMyPoolRow] = React.useState<MyPoolRow<R>[]>([])\n    const [myAmmMarketArray, setMyAmmMarketArray] = React.useState<AmmRecordRow<R>[]>([]);\n    // const [ammUserRewardMap, setAmmUserRewardMap] = React.useState<AmmUserRewardMap|undefined>(undefined);\n    // const [snapShotData,setSnapShotData] = React.useState<{\n    //     tickerData: TickerData|undefined\n    //     ammPoolsBalance: AmmPoolSnapshot|undefined\n    // }|undefined>(undefined);\n    const walletLayer2DoIt = React.useCallback(() => {\n        const {walletMap: _walletMap} = makeWallet();\n        setWalletMap(_walletMap)\n        if (_walletMap) {\n            getUserAmmTransaction()?.then((marketTrades) => {\n                let _myTradeArray = makeMyAmmMarketArray(undefined, marketTrades)\n                setMyAmmMarketArray(_myTradeArray ? _myTradeArray : [])\n            })\n        }\n        return _walletMap\n    }, [makeWallet, getUserAmmTransaction, makeMyAmmMarketArray, marketArray])\n    const makeMyPoolRow = React.useCallback((_walletMap): MyPoolRow<R>[] => {\n        if (_walletMap && ammMap) {\n            // @ts-ignore\n            const _myPoolRow: MyPoolRow<R>[] = Reflect.ownKeys(_walletMap).reduce((prev: MyPoolRow<R>[], walletKey: string) => {\n                if (/LP-/i.test(walletKey)) {\n                    const ammKey = walletKey.replace('LP-', 'AMM-');\n                    const marketKey = walletKey.replace('LP-', '');\n                    let rowData: MyPoolRow<R> | undefined;\n                    //TODO：websocket open\n                    //  if(ammPoolSnapShots)\n                    // makeData by snapshot else\n                    // else\n                    rowData = makeMyPoolRowWithPoolState(\n                        {\n                            ammDetail: ammMap[ ammKey ],\n                            walletMap: _walletMap,\n                            market: marketKey,\n                            ammUserRewardMap: userRewardsMapState.userRewardsMap\n                        }\n                    )\n                    if (rowData !== undefined) {\n                        prev.push(rowData);\n                    }\n                }\n                return prev\n            }, [] as MyPoolRow<R>[])\n            // console.log('rowData',_myPoolRow);\n            return _myPoolRow;\n        }\n        return [];\n    }, [ammMap, userRewardsMapState.userRewardsMap])\n\n    React.useEffect(() => {\n        if (walletLayer2State.walletLayer2) {\n            const _walletMap = walletLayer2DoIt();\n            if (ammMap) {\n                const _myPoolRow = makeMyPoolRow(_walletMap)\n                setMyPoolRow(_myPoolRow)\n            }\n        }\n    }, []);\n\n    React.useEffect(() => {\n        //ammMapState.ammMap or\n\n        switch (walletLayer2State.status) {\n            case \"ERROR\":\n                walletLayer2State.statusUnset();\n                break;\n            case \"DONE\":\n                walletLayer2State.statusUnset();\n               // const _walletMap = walletLayer2DoIt()\n                const _walletMap = walletLayer2DoIt();\n                //TODO check AmmMap state or ammSnapshot sockets\n                //userRewardsMapState is an option but  walletLayer2 amd ammMapState.ammMap is required\n                if (ammMapState.ammMap) {\n                    const _myPoolRow = makeMyPoolRow(_walletMap);\n                    setMyPoolRow(_myPoolRow)\n                }\n                break;\n            default:\n                break;\n\n        }\n        // }\n    }, [walletLayer2State.status])\n\n    React.useEffect(() => {\n        if (ammMapState.status === \"ERROR\") {\n            //TODO: solve error\n            ammMapState.statusUnset();\n        } else if (ammMapState.status === \"DONE\") {\n            ammMapState.statusUnset();\n            //TODO check AmmMap state or ammSnapshot sockets when websocket open  ammMapState done should not effect myPoolRow\n            if (walletLayer2State.walletLayer2) {\n                const _walletMap = walletLayer2DoIt();\n                //userRewardsMapState is an option and walletLayer2 is required\n                const _myPoolRow = makeMyPoolRow(_walletMap);\n                setMyPoolRow(_myPoolRow);\n            }\n        }\n    }, [ammMapState.status])\n\n    React.useEffect(() => {\n        if (userRewardsMapState.status === \"ERROR\") {\n            //TODO: solve error\n            userRewardsMapState.statusUnset();\n        } else if (userRewardsMapState.status === \"DONE\") {\n            userRewardsMapState.statusUnset();\n            // setAmmUserRewardMap()\n            const summaryReward = makeSummaryMyAmm({userRewardsMap: userRewardsMapState.userRewardsMap});\n            setSummaryReward(summaryReward);\n\n            //TODO check AmmMap state or ammSnapshot sockets\n            if (walletLayer2State.walletLayer2 && ammMapState.ammMap) {  //  ammMapState.ammMap or websocket\n                //userRewardsMapState is an option and walletLayer2 is required\n                const _myPoolRow = makeMyPoolRow(walletLayer2State.walletLayer2);\n                setMyPoolRow(_myPoolRow);\n            }\n\n        }\n    }, [userRewardsMapState.status])\n    return {\n        myAmmMarketArray,\n        summaryReward,\n        myPoolRow,\n        // ammActivityViewMap,\n        // ammActivityPastViewMap\n    }\n\n}\n","import { useRouteMatch } from 'react-router'\n\nimport { Box } from '@material-ui/core'\nimport {\n    SubMenu,\n    SubMenuList as BasicSubMenuList,\n} from '@loopring-web/component-lib'\nimport { withTranslation } from 'react-i18next'\nimport { subMenuLiquidity } from '@loopring-web/component-lib/src/static-resource'\nimport { PoolsPanel } from './PoolsPanel'\nimport { CoinPairPanel } from './CoinPairPanel';\nimport { AmmMiningView } from './AmmMining';\nimport { MyLiquidity } from './MyLiquidity'\nimport { useAmmPool } from './hook';\n\nexport const subMenu = subMenuLiquidity\n\nconst SubMenuList = withTranslation(['layout','common'], { withRef: true })(BasicSubMenuList);\nexport const LiquidityPage = () => {\n\n    // const { ammFee } = useAmmPool('LRC', 'ETH')\n    //\n    // console.log('--- > ammFee:', ammFee)\n    //\n    const {ammActivityMap} = useAmmPool();\n    let match: any = useRouteMatch(['/liquidity/:item',':next/']);\n    const selected = match?.params.item ?? 'pools'\n    let matchPair: any = useRouteMatch(['/liquidity/:item/:next/:symbol']);\n    let symbol:any = undefined\n    if (matchPair && matchPair?.params?.next && matchPair.params.item === 'pools') {\n       if(!matchPair.params.symbol){\n           symbol='LRC-ETH';\n       }else{\n           symbol=matchPair.params.symbol;\n       }\n    }\n    \n    return (\n        <>\n            { symbol && <Box display={'flex'} flexDirection={'column'}  flex={1} alignSelf={'flex-start'}>\n              <CoinPairPanel ammActivityMap={ammActivityMap}/>\n            </Box>\n            }\n            {!symbol && <>  <Box width={'200px'} display={'flex'} justifyContent={'stretch'} marginRight={3} marginBottom={3}>\n                    <SubMenu>\n                        <SubMenuList selected={selected} subMenu={subMenu as any} />\n                    </SubMenu>\n                </Box>\n                <Box  minHeight={420}  display={'flex'} alignItems={'stretch'} justifyContent={'stretch'} flexDirection=\"column\" marginTop={0} flex={1} marginBottom={3}>\n                    {(selected === 'pools' && !symbol ) && <PoolsPanel ammActivityMap={ammActivityMap}/>}\n                    {(selected === 'amm-mining' && !symbol ) && <AmmMiningView ammActivityMap={ammActivityMap}/>}\n                    {(selected === 'my-liquidity' && !symbol ) && <MyLiquidity ammActivityMap={ammActivityMap}/>}\n                    {selected === 'orderBook-Mining' && <AmmMiningView ammActivityMap={ammActivityMap}/>}\n                    {/*{selected === 'orders' && <OrderPanel />}*/}\n                </Box>\n             </>\n            }\n        </>\n    )\n\n}\n","import React from 'react';\nimport { useAmmActivityMap } from '../../stores/Amm/AmmActivityMap';\n\nimport { AmmPoolActivityRule, LoopringMap } from 'loopring-sdk';\nimport { useAccount } from '../../stores/account/hook';\nimport { useUserRewards } from '../../stores/userRewards';\nimport { useAmmMap } from '../../stores/Amm/AmmMap';\n\nexport const useAmmPool = <R extends {[key:string]:any},I extends {[key:string]:any}>()=>{\n    const AmmActivityMapState  = useAmmActivityMap()\n    const {updateUserRewards}  = useUserRewards()\n    const {account} = useAccount();\n    const {ammMap,updateAmmMap} = useAmmMap();\n    const [ammActivityMap,setAmmActivityMap] = React.useState<LoopringMap<LoopringMap<AmmPoolActivityRule[]>>|undefined>(AmmActivityMapState.ammActivityMap)\n    // init AmmMap at begin\n    React.useEffect(() => {\n        if (!ammMap || Object.keys(ammMap).length === 0) {\n            updateAmmMap();\n        }\n    }, []);\n    React.useEffect(() => {\n        switch (AmmActivityMapState.status) {\n            case \"ERROR\":\n                AmmActivityMapState.statusUnset();\n                // setState('ERROR')\n                //TODO: show error at button page show error  some retry dispath again\n                break;\n            case \"DONE\":\n                AmmActivityMapState.statusUnset();\n                setAmmActivityMap(AmmActivityMapState.ammActivityMap)\n                break;\n            default:\n                break;\n\n        }\n    }, [AmmActivityMapState.status])\n    React.useEffect(() => {\n        if(account.accountId){\n            updateUserRewards()\n        }\n    }, [account.accountId])\n\n    return {\n        ammActivityMap\n    }\n\n}\n\n","import { HashRouter as Router, Route, Switch, } from 'react-router-dom'\n\nimport Header from 'layouts/header'\n\nimport QuotePage from 'pages/QuotePage'\nimport { SwapPage } from 'pages/SwapPage'\n\nimport DebugPage from 'pages/DebugPage'\n\nimport Container from '@material-ui/core/Container'\nimport { Box } from '@material-ui/core'\nimport { DevWrapper } from '../provider/'\nimport { Layer2Page } from '../pages/Layer2Page'\nimport { LiquidityPage } from '../pages/LiquidityPage'\n\nconst RouterView = () => {\n    \n    return <Router>\n        <Header />\n\n        {/*<Box style={{marginTop: `var(--header-height)`}} flex={1} display={'flex'}>*/}\n        <Container maxWidth=\"lg\" style={{minHeight:'calc(100% - 64px - 32px)',display:'flex',flexDirection:'column'}}>\n            {/*style={{height: '100%' }}*/}\n            <Box display={'flex'} flex={1} alignItems={'stretch'} flexDirection={'row'} marginTop={3}  >\n                <Switch>\n                    <Route exact component={SwapPage} path='/'/>\n                    <Route exact component={QuotePage} path='/markets'/>\n                    <Route component={SwapPage} path='/trading/lite'/>\n                    <Route component={SwapPage} path='/trading/lite(/:symbol)'/>\n\n                    <Route exact component={Layer2Page} path='/layer2'/>\n                    <Route exact component={Layer2Page} path='/layer2/assets'/>\n                    <Route exact component={Layer2Page} path='/layer2/transactions'/>\n                    <Route exact component={Layer2Page} path='/layer2/trades'/>\n                    <Route exact component={Layer2Page} path='/layer2/ammRecords'/>\n                    <Route exact component={Layer2Page} path='/layer2/orders'/>\n                    <Route exact component={Layer2Page} path='/layer2/setting'/>\n\n                    <Route exact component={LiquidityPage} path='/liquidity'/>\n                    <Route exact component={LiquidityPage} path='/liquidity/pools/*'/>\n                    <Route exact component={LiquidityPage} path='/liquidity/pools'/>\n                    {/*<Route exact component={LiquidityPage} path='/liquidity/pools/coinPair(/:symbol)'/>*/}\n                    <Route exact component={LiquidityPage} path='/liquidity/amm-mining'/>\n                    <Route exact component={LiquidityPage} path='/liquidity/my-liquidity'/>\n                    <Route exact component={LiquidityPage} path='/liquidity/orderBook-Mining'/>\n                    <Route exact component={LiquidityPage} path='/liquidity/maker-rebates'/>\n\n                    <DevWrapper>\n                        <Route exact path='/debug'>\n                            <DebugPage/>\n                        </Route>\n                    </DevWrapper>\n\n                </Switch>\n            </Box>\n        </Container>\n        {/*</Box>*/}\n\n    </Router>\n}\n\nexport default RouterView\n","import { useDeepCompareEffect } from \"react-use\"\n\nexport function useCustomDCEffect(action: any, deps: any[] | undefined | null) {\n    useDeepCompareEffect(action, [deps || {}])\n}\n","import { toBig } from 'loopring-sdk'\n\nexport enum OrderHandling {\n    processed = 'processed',\n    no_such_order = 'no_such_order',\n    too_many_times = 'too_many_times',\n}\n\nexport const BIG0 = toBig(0)\n\nexport const BIG1 = toBig(1)\n\nexport const BIG10 = toBig(10)\n\nexport const BIG10K = toBig(10000)\n\nexport const MULTI_FACTOR = 10000\n","import { createSlice, PayloadAction, Slice } from '@reduxjs/toolkit'\n\nimport { AccountInfo, ConnectorNames, } from 'loopring-sdk'\n\nimport { Lv2Account, } from 'defs/account_defs'\nimport { AccountStatus } from 'state_machine/account_machine_spec'\nimport { UserStorage } from 'storage'\n\n\nconst initialState = () => {\n  const defaultAccId = process.env.REACT_APP_TEST_ACCOUND_ID ? process.env.REACT_APP_TEST_ACCOUND_ID : UserStorage.getAccountId()\n  const defaultApiKey = process.env.REACT_APP_TEST_API_KEY ? process.env.REACT_APP_TEST_API_KEY : UserStorage.getApikey()\n  const defaultOwner = process.env.REACT_APP_TEST_OWNER ? process.env.REACT_APP_TEST_OWNER : UserStorage.getAccount()\n  const defaultEddsaKey = process.env.REACT_APP_TEST_EDDSA_KEY ? process.env.REACT_APP_TEST_EDDSA_KEY : UserStorage.getEddsakey()\n\n  console.log('defaultApiKey:', JSON.stringify(defaultApiKey))\n  const defaultStatus = AccountStatus.UNCONNNECTED\n  return {\n    accAddr: defaultOwner,\n    status: defaultStatus,\n    accountId: defaultAccId,\n    publicKey: {},\n    nonce: 0,\n    isContractAddress: false,\n    apiKey: defaultApiKey,\n    eddsaKey: defaultEddsaKey,\n    connectName: ConnectorNames.Unknown,\n    connectNameTemp: ConnectorNames.Unknown,\n  } as Lv2Account\n}\n\nconst accountSlice:Slice = createSlice({\n  name: 'account',\n  initialState: initialState(),\n  reducers: {\n    reset(state) {\n      const initState = initialState()\n      console.log('!!! reset account!', initState)\n      Object.assign(state, initState)\n    },\n    setAccAddr(state, action: PayloadAction<string>) {\n      state.accAddr = action.payload\n      // UserStorage.setAccount(action.payload)\n    },\n    setAccountInfo(state, action: PayloadAction<AccountInfo>) {\n      state.accAddr = action.payload.owner\n      state.accountId = action.payload.accountId\n      state.nonce = action.payload.nonce\n      state.publicKey = action.payload.publicKey\n\n      // UserStorage.setAccount(state.accAddr)\n      // UserStorage.setAccountId(state.accountId)\n      \n    },\n    setApikey(state, action: PayloadAction<string>) {\n      state.apiKey = action.payload\n      // UserStorage.setApikey(action.payload)\n    },\n    setAccountStatus(state, action: PayloadAction<AccountStatus>) {\n      state.status = action.payload\n    },\n    setEddsaKey(state, action: PayloadAction<any>) {\n      state.eddsaKey = action.payload\n      // UserStorage.setEddsakey(action.payload)\n    },\n    setConnectName(state, action: PayloadAction<ConnectorNames>) {\n      state.connectName = action.payload\n    },\n    setConnectNameTemp(state, action: PayloadAction<ConnectorNames>) {\n      state.connectNameTemp = action.payload\n    },\n    setIsContractAddress(state, action: PayloadAction<boolean>) {\n      state.isContractAddress = action.payload\n    },\n  },\n})\n\nexport const { reset, setAccAddr, setApikey, setConnectName, setConnectNameTemp, setAccountInfo, setAccountStatus, setEddsaKey, setIsContractAddress, } = accountSlice.actions\nexport default accountSlice\n","import { useDispatch, useSelector } from 'react-redux'\nimport { tokenMapSlice } from './reducer';\nimport { TokenMapStates } from './interface';\n\nexport function useTokenMap<R extends {[key:string]:any}>(): TokenMapStates<R> & {\n    updateTokenMap:()=>void,\n    statusUnset:()=>void,\n} {\n    const tokenMap:TokenMapStates<R> = useSelector((state: any) => state.tokenMap)\n    const dispatch = useDispatch();\n    const updateTokenMap = () => {\n        dispatch(tokenMapSlice.actions.getTokenMap(undefined))\n    }\n    const statusUnset = ()=>{\n        dispatch(tokenMapSlice.actions.statusUnset(undefined))\n    }\n    return {\n        ...tokenMap,\n        statusUnset,\n        updateTokenMap,\n    }\n\n}\n","import { ConnectorNames } from 'loopring-sdk'\n\nimport {\n    injected,\n    network,\n    walletconnect,\n    walletlink,\n    ledger,\n    trezor,\n    authereum,\n} from 'networks/web3_connectors'\n\nexport const connectorsByName: { [connectorName in ConnectorNames]: any } = {\n    [ConnectorNames.Unknown]: undefined,\n    [ConnectorNames.Injected]: injected,\n    [ConnectorNames.Network]: network,\n    [ConnectorNames.WalletConnect]: walletconnect,\n    [ConnectorNames.WalletLink]: walletlink,\n    [ConnectorNames.Ledger]: ledger,\n    [ConnectorNames.Trezor]: trezor,\n    [ConnectorNames.Authereum]: authereum,\n}\n","import React from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\n\nimport { useCustomDCEffect } from 'hooks/common/useCustomDCEffect'\n\nimport { useGetTradingInfo } from 'stores/trading/hook'\nimport { useActiveWeb3React, } from 'hooks/web3/useWeb3'\n\nimport { Lv2Account, } from 'defs/account_defs'\n\nimport { AccountStatus, StatusChangeEvent } from 'state_machine/account_machine_spec'\n\nimport * as sign_tools from 'loopring-sdk'\n\nimport { connectorsByName } from 'defs/web3_defs'\n\nimport { ChainId, ConnectorNames, dumpError400, ExchangeAPI, GetOffchainFeeAmtRequest, OffchainFeeReqType, sleep, UpdateAccountRequestV3, UserAPI, VALID_UNTIL, } from 'loopring-sdk'\n\nimport { toHex, toBig, formatEddsaKey, } from 'loopring-sdk'\n\nimport { RootState } from 'stores'\n\nimport {\n    reset, setAccountStatus, setConnectName,\n    setConnectNameTemp, setAccountInfo, setEddsaKey, setApikey, setAccAddr,\n} from 'stores/account/reducer'\n\nimport { AccountMachineSpec, } from 'state_machine/account_machine_spec'\n\nimport { buildMachine } from 'state_machine/machine_builder'\n\nimport voca from 'voca'\nimport { usePrevious } from 'react-use'\n\nimport Web3 from 'web3'\n\nimport { useExchangeAPI, useUserAPI } from 'hooks/exchange/useApi'\n\nimport { UserStorage } from 'storage'\n\nimport store from 'stores'\nimport { updateWalletLayer1, reset as resetLayer1 } from '../walletLayer1';\nimport { updateWalletLayer2, reset as resetLayer2, useWalletLayer2 } from '../walletLayer2';\nimport { useTokenMap } from '../token';\nimport { LoopringAPI } from 'stores/apis/api'\n\n\nexport function useWeb3Account() {\n\n    const {\n        connector,\n        library,\n        account,\n        chainId,\n        active,\n        error,\n    } = useActiveWeb3React()\n\n    const isConnected: boolean = active && !voca.isBlank(account as string)\n\n    return {\n        account,\n        connector,\n        library,\n        chainId,\n        active,\n        isConnected,\n        error,\n    }\n\n}\n\nexport function useAccount() {\n\n    const account: Lv2Account = useSelector((state: RootState) => state.account)\n\n    const isNoAccount = () => {\n        return account.status === AccountStatus.NOACCOUNT\n    }\n\n    const isActivated = () => {\n        return account.status === AccountStatus.ACTIVATED\n    }\n\n    return {\n        account,\n        isNoAccount,\n        isActivated,\n        apiKey: account.apiKey,\n        eddsaKey: account.eddsaKey,\n        accountId: account.accountId,\n    }\n}\n\nexport function useStateMachine() {\n    const dispatch = useDispatch()\n\n    const machine = buildMachine(AccountMachineSpec())\n\n    const sendEvent = React.useCallback((account: Lv2Account, event: StatusChangeEvent) => {\n        const nextState = machine(account.status, event)\n        if (nextState) {\n            dispatch(setAccountStatus(nextState))\n        }\n    }, [machine, dispatch])\n\n    return {\n        sendEvent,\n    }\n}\n\nexport function useConnect() {\n\n    const {\n        activate,\n    } = useActiveWeb3React()\n\n    const { sendEvent } = useStateMachine()\n\n    const dispatch = useDispatch()\n\n    const [activatingConnector, setActivatingConnector] = React.useState<any>()\n\n    const connect = React.useCallback((item_name: ConnectorNames, isSwitch: boolean = false) => {\n        const newConnector: any = connectorsByName[item_name]\n        setActivatingConnector(newConnector)\n        activate(newConnector)\n        dispatch(setConnectNameTemp(item_name))\n\n        if (isSwitch) {\n            //  console.log('try Connecting... isSwitch Reset')\n            sendEvent(store.getState().account, StatusChangeEvent.Reset)\n        }\n\n        sendEvent(store.getState().account, StatusChangeEvent.Connecting)\n\n        console.log('try Connecting...')\n    }, [activate, dispatch, sendEvent])\n\n    return {\n        connect,\n        activatingConnector,\n    }\n\n}\n\nexport function useDisconnect() {\n\n    const {\n        deactivate,\n    } = useActiveWeb3React()\n\n    const dispatch = useDispatch()\n\n    const disconnect = React.useCallback(() => {\n        deactivate()\n        dispatch(reset(undefined))\n        //TODO dispatch wallet info \n    }, [deactivate, dispatch])\n\n    return {\n        disconnect,\n    }\n\n}\n\nexport function useUnlock() {\n\n    const dispatch = useDispatch()\n\n    const { chainId } = useWeb3Account()\n\n    const exchangeApi: ExchangeAPI = useExchangeAPI()\n\n    const userApi: UserAPI = useUserAPI()\n\n    const { tradingInfo } = useGetTradingInfo()\n\n    const { connector, } = useWeb3Account()\n\n    const { sendEvent } = useStateMachine()\n\n    const { resetLayer2 } = useWalletLayer2()\n    const lock = React.useCallback(async (account: Lv2Account) => {\n        console.log('useCallback lock:', account.status);\n        dispatch(resetLayer2());\n        sendEvent(account, StatusChangeEvent.Lock)\n    }, [sendEvent])\n\n    const unlock = React.useCallback(async (account: Lv2Account) => {\n\n        if (!userApi || !exchangeApi || !connector\n            || !account.accountId || !tradingInfo.exchangeInfo?.exchangeAddress\n            || !chainId\n            || account.status !== AccountStatus.LOCKED) {\n            console.log('accountId:', account.accountId)\n            console.log('exchangeAddress:', tradingInfo.exchangeInfo)\n            console.log('enter !! account.status:', account.status)\n            return\n        }\n\n        console.log('useUnlock useCallback:', account)\n\n        if (account.status !== AccountStatus.LOCKED) {\n            throw Error('unexpected status:' + account.status)\n        }\n\n        let event = undefined\n        let sk = undefined\n        let apikey: any = undefined\n\n        const provider = await connector.getProvider()\n        const web3 = new Web3(provider as any)\n\n        try {\n            console.log('useUnlock eddsaKey:', account.eddsaKey)\n\n            if (!account.eddsaKey) {\n                const eddsaKey = await sign_tools\n                    .generateKeyPair(\n                        web3,\n                        account.accAddr,\n                        tradingInfo.exchangeInfo?.exchangeAddress as string,\n                        account.nonce - 1,\n                        account.connectName,\n                    )\n                sk = toHex(toBig(eddsaKey.keyPair.secretKey))\n\n            } else {\n                sk = account.eddsaKey\n            }\n\n            apikey = await userApi.getUserApiKey({\n                accountId: account.accountId\n            }, sk)\n\n            console.log('useUnlock account:', account)\n\n            event = StatusChangeEvent.Unlock\n\n        } catch (reason) {\n            if (reason?.response?.data?.resultInfo?.code === 100001) {\n                console.log('10000001')\n\n                try {\n\n                    /*\n                    const req: GetOffchainFeeAmtRequest = {\n                        accountId: account.accountId,\n                        requestType: OffchainFeeReqType.UPDATE_ACCOUNT,\n                    }\n    \n                    const response = await userApi.getOffchainFeeAmt(req, account.apiKey)\n    \n                    console.log('getOffchainFeeAmt:', response)\n                    */\n                    const eddsaKey = await sign_tools\n                        .generateKeyPair(\n                            web3,\n                            account.accAddr,\n                            tradingInfo.exchangeInfo?.exchangeAddress as string,\n                            account.nonce,\n                            account.connectName,\n                        )\n\n                    console.log('account:', account)\n                    console.log('eddsaKey:', eddsaKey)\n                    \n                    const request: UpdateAccountRequestV3 = {\n                        exchange: tradingInfo.exchangeInfo?.exchangeAddress,\n                        owner: account.accAddr,\n                        accountId: account.accountId,\n                        publicKey: { x: eddsaKey.formatedPx, y: eddsaKey.formatedPy },\n                        maxFee: { tokenId: 0, volume: toBig('1e+16').toFixed(0, 0) },\n                        validUntil: VALID_UNTIL,\n                        nonce: account.nonce,\n                    }\n\n                    console.log('UpdateAccountRequestV3:', request)\n\n                    const updateAccountResponse = await userApi.updateAccount(request, web3,\n                        chainId, account.connectName, false)\n                    console.log('updateAccountResponse:', updateAccountResponse)\n\n                    await sleep(1000)\n\n                } catch (reason2) {\n\n                    dumpError400(reason2)\n\n                }\n            }\n            dumpError400(reason)\n            console.log('after dumpError400')\n            event = StatusChangeEvent.Reset\n        }\n\n        if (sk) {\n            dispatch(setEddsaKey(sk))\n        }\n\n        if (apikey?.apiKey) {\n            dispatch(setApikey(apikey.apiKey))\n        }\n\n        console.log('next event:', event)\n        if (event) {\n            sendEvent(account, event)\n        }\n\n    }\n        , [dispatch, sendEvent, exchangeApi, userApi, connector, chainId, tradingInfo.exchangeInfo])\n\n    return {\n        lock,\n        unlock,\n    }\n}\n\nasync function checkAccountAvailableAsync(exchangeApi: ExchangeAPI, userApi: UserAPI, account: Lv2Account, dispatch: any, sendEvent: any, connector: any, exchangeAddress: string) {\n\n    let accInfo = undefined\n    let event = undefined\n    let sk = undefined\n    let code = undefined\n    let apikey: any = undefined\n\n    try {\n        accInfo = (await exchangeApi.getAccount({\n            owner: account.accAddr\n        })).accInfo\n        if (accInfo.publicKey && accInfo.publicKey.x && accInfo.publicKey.y) {\n            if (account.accountId !== accInfo.accountId) {\n                const provider = await connector.getProvider()\n                const web3 = new Web3(provider as any)\n                try {\n                    code = await web3.eth.getCode(account.accAddr)\n                    // console.log('!!!!!! about to generateKeyPair!!!!!!!!!!!')\n                    try {\n                        const eddsakey = await sign_tools\n                            .generateKeyPair(\n                                web3,\n                                account.accAddr,\n                                exchangeAddress,\n                                accInfo.nonce - 1,\n                                account.connectName,\n                            )\n                        sk = toHex(toBig(eddsakey.keyPair.secretKey))\n                        const px = toHex(toBig(eddsakey.keyPair.publicKeyX))\n                        const py = toHex(toBig(eddsakey.keyPair.publicKeyY))\n\n                        try {\n                            apikey = await userApi.getUserApiKey({\n                                accountId: accInfo.accountId\n                            }, sk)\n                            event = (StatusChangeEvent.HasPubkey)\n                        } catch (reason) {\n                            dumpError400(reason)\n                            event = (StatusChangeEvent.ErrorResponse)\n                        }\n                    } catch (reason) {\n                        dumpError400(reason)\n                        event = (StatusChangeEvent.ErrorResponse)\n                    }\n\n                } catch (reason) {\n                    dumpError400(reason)\n                    event = (StatusChangeEvent.ErrorResponse)\n                }\n\n            } else {\n                console.log('already has accountId!')\n            }\n        } else {\n            console.log('2 has id but no pubkey currStatus:', account.status)\n            event = (StatusChangeEvent.HasNoPubkey)\n        }\n    } catch (reason) {\n        // 3 has none of above\n        console.log('2 has id but no pubkey currStatus:', account.status)\n        dumpError400(reason)\n        // check deposit tx (local and ethereum)\n        event = (StatusChangeEvent.ErrorResponse)\n    }\n\n    if (accInfo && accInfo.owner !== account.accAddr) {\n        dispatch(setAccountInfo(accInfo))\n    }\n\n    if (sk) {\n        dispatch(setEddsaKey(sk))\n    }\n\n    if (apikey) {\n        console.log('---------> apikey:', apikey)\n        dispatch(setApikey(apikey.apiKey))\n    }\n\n    if (event) {\n        sendEvent(event)\n    }\n\n}\n\nexport function useCheckAccStatus() {\n\n    const dispatch = useDispatch()\n\n    const { account } = useAccount()\n\n    const { sendEvent } = useStateMachine()\n\n    const exchangeApi: ExchangeAPI = useExchangeAPI()\n\n    const userApi: UserAPI = useUserAPI()\n\n    const { account: web3Account, active, isConnected, chainId, connector, } = useWeb3Account()\n    const { marketArray } = useTokenMap()\n\n    const lv1Acc = web3Account as string\n\n    const prevChainId = usePrevious(chainId)\n    const prevWeb3Account = usePrevious(web3Account)\n\n    // const { updateWalletLayer1,resetLayer1} = useWalletLayer1();\n    // const { updateWalletLayer2, resetLayer2} = useWalletLayer2()\n\n\n    // console.log('prevChainId:', prevChainId, ' chainId:', chainId)\n    // console.log('prevWeb3Account:', prevWeb3Account, ' web3Account:', web3Account)\n\n    // console.log(exchangeApi, userApi, account, 'prevChainId:', prevChainId, 'chainId:', chainId, 'web3Account:', web3Account)\n\n    const { tradingInfo } = useGetTradingInfo()\n\n    useCustomDCEffect(async () => {\n\n        const cleanUp = () => {\n            let handler = UserStorage.getHandler()\n            if (account.status !== AccountStatus.ACTIVATED && handler) {\n                clearInterval(handler)\n            }\n        }\n\n        async function checkStatus() {\n\n            if (!account || !lv1Acc || !exchangeApi || !userApi || !connector || !tradingInfo.exchangeInfo?.exchangeAddress) {\n                //console.log('checkStatus return!!!!!!')\n                return\n            }\n\n            if (((prevChainId && chainId && prevChainId !== chainId)\n                || (prevWeb3Account && web3Account && prevWeb3Account !== web3Account))\n                && account.status !== AccountStatus.UNCONNNECTED) {\n\n                console.log('checkStatus try to resetFunc')\n                dispatch(reset(undefined))\n                sendEvent(account, StatusChangeEvent.Reset)\n                return\n            }\n\n            cleanUp()\n\n            switch (account.status) {\n                case AccountStatus.UNCONNNECTED:\n                    // console.log('---> render UNCONNNECTED active:', active, ' isConnected:', isConnected)\n\n                    if (isConnected) {\n                        dispatch(setConnectNameTemp(ConnectorNames.Injected))\n                        sendEvent(account, StatusChangeEvent.Connecting)\n                    }\n\n                    //HIGH:\n                    dispatch(resetLayer1(undefined));\n                    dispatch(resetLayer2(undefined));\n                    break\n\n                case AccountStatus.CONNECTED:\n                    //check session or local storage\n\n                    //  console.log('---> render CONNECTED account:', account)\n\n                    try {\n\n                        const acc = (await exchangeApi.getAccount({ owner: lv1Acc })).accInfo\n\n                        // current acc is local acc info\n                        if (account.accAddr && account.eddsaKey && acc.owner === account.accAddr) {\n                            // console.log('cur Eddsakey:', account.eddsaKey)\n                        } else {\n                            // console.log('got a new address:', acc)\n                            // got a new address\n                            dispatch(setAccountInfo(acc))\n                            // dispatch(setEddsaKey(''))\n\n                            //updateWalletLayer1();\n                            if (marketArray?.length) {\n                                dispatch(updateWalletLayer1(undefined));\n                            }\n                        }\n\n                        if (account?.connectName !== account?.connectNameTemp) {\n                            dispatch(setConnectName(account.connectNameTemp))\n                        }\n\n                        sendEvent(account, StatusChangeEvent.HasPubkey)\n\n                    } catch (reason) {\n                        dumpError400(reason)\n\n                        if (lv1Acc) {\n                            dispatch(setAccAddr(lv1Acc))\n                        }\n\n                        if (reason.response && reason.response.data && reason.response.data.resultInfo\n                            && reason.response.data.resultInfo.code === 101002) {\n                            sendEvent(account, StatusChangeEvent.ErrorResponse)\n                        }\n                    }\n\n                    break\n\n                case AccountStatus.NOACCOUNT:\n                    break\n\n                case AccountStatus.DEPOSITING:\n                    // TODO sub contract event, check deposit.\n                    const depositFinished = true // TODO\n                    if (depositFinished) {\n                        //   console.log('depositFinished currStatus:', account.status)\n                        sendEvent(account, StatusChangeEvent.FinishDeposit)\n                    }\n                    break\n\n                case AccountStatus.DEPOSIT_TO_CONFIREM:\n                    // getAccount every 10s to check\n                    break\n\n                case AccountStatus.UNACTIVATED:\n                    const isSmartWallet = false // TODO\n                    if (isSmartWallet) {\n                        // TODO approve hash,\n                        //  console.log('approve hash, currStatus:', account.status)\n                        sendEvent(account, StatusChangeEvent.IsSmartWallet)\n                    } else {\n                        // console.log('approve hash no smartwallet, account.status:', account.status)\n                    }\n                    break\n\n                case AccountStatus.ARPROVING:\n                    // TODO sub contract event, check approving.\n                    const approved = false // TODO\n                    if (approved) {\n                        //  console.log('sub contract event, check approving. approved! status:', account.status)\n                        sendEvent(account, StatusChangeEvent.ApproveSubmit)\n                    }\n                    break\n\n                case AccountStatus.APPROV_TO_CONFIRM:\n                    const approveConfirmed = false // TODO\n                    if (approveConfirmed) {\n                        //   console.log('approveConfirmed status:', account.status)\n                        sendEvent(account, StatusChangeEvent.ApproveConfirmed)\n                    }\n                    break\n\n                case AccountStatus.LOCKED:\n                    //HIGH:\n                    dispatch(resetLayer1(undefined))\n                    break\n\n                case AccountStatus.ACTIVATED:\n                    UserStorage.checkTimeout(true)\n                    const handler = setInterval(() => {\n                        const isTimeOut = UserStorage.checkTimeout()\n                        if (account.status === AccountStatus.ACTIVATED && isTimeOut) {\n                            clearInterval(handler)\n                            sendEvent(account, StatusChangeEvent.Lock)\n                        }\n                    }, 1000)\n                    UserStorage.setHandler(handler);\n                    //HIGH:\n                    dispatch(updateWalletLayer2(undefined))\n                    //useWalletLayer2().updateWalletLayer2();\n                    //dispatch((undefined));\n                    break\n\n                default:\n                    break\n            }\n\n\n\n        }\n\n        checkStatus()\n\n        return () => {\n            cleanUp()\n        }\n\n    }, [updateWalletLayer1, updateWalletLayer2, resetLayer1, resetLayer2,\n        //updateWalletLayer2, updateWalletLayer1,resetLayer1,resetLayer2,\n\n        exchangeApi, userApi, account, prevChainId, chainId, lv1Acc, dispatch, connector, tradingInfo.exchangeInfo?.exchangeAddress,])\n\n}\n\n","export const buildMachine = <S, E>(spec: any) => (currentState: S, event: E) => {\n    // We get all possible transitions for the current State\n    const stateTransitions = spec.states[currentState]\n\n    // No transitions? Error!\n    if (stateTransitions === undefined) {\n        throw new Error(`No transitions defined for ${currentState}`)\n    }\n\n    // We try to transition to the next state\n    const nextState = stateTransitions[event]\n\n    // No next state? Error!\n    if (nextState === undefined) {\n        throw new Error(\n            `Unknown transition for event ${event} in state ${currentState}`\n        )\n    }\n\n   // console.log('got nextState:', nextState)\n\n    // We return the new state\n    return nextState\n}\n","import { useDispatch, useSelector } from 'react-redux'\nimport { AmmMapStates } from './interface';\nimport { ammMapSlice } from './reducer';\n\nexport const useAmmMap = <R extends {[key:string]:any},I extends {[key:string]:any}>(): AmmMapStates<R,I> & {\n    updateAmmMap:()=> void,\n    statusUnset:()=> void,\n} => {\n    const ammMap:AmmMapStates<R,I>= useSelector((state: any) => state.amm.ammMap)\n    const dispatch = useDispatch();\n    const updateAmmMap = () => {\n        dispatch(ammMapSlice.actions.getAmmMap(undefined))\n    }\n    const statusUnset = ()=>{\n        dispatch(ammMapSlice.actions.statusUnset(undefined))\n    }\n    return {\n        ...ammMap,\n        statusUnset,\n        updateAmmMap\n    }\n}\n","import { useAmmpoolAPI, useExchangeAPI } from 'hooks/exchange/useApi'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { useCustomDCEffect } from 'hooks/common/useCustomDCEffect'\n\nimport store, { RootState } from 'stores'\n\nimport { \n    setMarkets, \n    setExchangeInfo, \n    setTokens, \n    setTickerMap, \n    setAmmPoolStats,\n    setAmmPoolConf, \n    setMarketTrades,\n    setAmmActivityRules,\n    setChainId, \n} from 'stores/trading/reducer'\n\nimport { dumpError400, ChainId, AmmPoolStat, Currency, } from 'loopring-sdk'\nimport { useActiveWeb3React } from 'hooks/web3/useWeb3'\nimport { useEffect } from 'react'\n\nimport { ammpoolAPI, exchangeAPI } from \"stores/apis/api\"\n\nexport function getTradingInfo() {\n    const tradingInfo = store.getState().trading\n    return {\n        tradingInfo,\n        chainId: tradingInfo.chainId,\n    }\n}\n\nexport function getAccount() {\n    return  store.getState().account\n\n}\n\nexport function getChainId(){\n    const chainId = store.getState().system.chainId;\n    return chainId\n\n}\n\nexport function useGetTradingInfo() {\n    const tradingInfo = useSelector((state: RootState) => state.trading)\n    return {\n        tradingInfo,\n        chainId: tradingInfo.chainId,\n    }\n}\n\nexport function useUpdateChainId() {\n    const { chainId } = useActiveWeb3React()\n    const dispatch = useDispatch()\n    useEffect(() => {\n        dispatch(setChainId(chainId ?? ChainId.GORLI))\n    }, [chainId, dispatch])\n}\n\nexport function useUpdateExchangeMarkets() {\n    const dispatch = useDispatch()\n    const api = useExchangeAPI()\n\n    useCustomDCEffect(async() => {\n\n        if (!api) {\n            return\n        }\n\n        try {\n            const response = await api.getMixMarkets()\n            dispatch(setMarkets(response))\n        } catch (reason) {\n            dumpError400(reason)\n        }\n\n    }, [api])\n\n}\n\nexport function useUpdateExchangeInfo() {\n\n    const dispatch = useDispatch()\n    const api = useExchangeAPI()\n\n    useCustomDCEffect(async() => {\n\n        if (!api) {\n            return\n        }\n\n        try {\n            const response = await api.getExchangeInfo()\n            dispatch(setExchangeInfo(response.exchangeInfo))\n        } catch (reason) {\n            dumpError400(reason)\n        }\n\n    }, [api])\n\n}\n\nexport function useUpdateAmmPoolConf() {\n\n    const dispatch = useDispatch()\n    const api = useAmmpoolAPI()\n\n    useCustomDCEffect(async() => {\n\n        if (!api) {\n            return\n        }\n\n        try {\n            const ammPoolConf = await api.getAmmPoolConf()\n            dispatch(setAmmPoolConf(ammPoolConf))\n        } catch (reason) {\n            dumpError400(reason)\n        }\n\n    }, [api])\n\n}\n\nexport function useUpdateAmmPoolStats() {\n\n    const dispatch = useDispatch()\n    const api = useAmmpoolAPI()\n\n    useCustomDCEffect(async() => {\n\n        if (!api) {\n            return\n        }\n\n        try {\n            const ammPoolStats = await api.getAmmPoolStats()\n            dispatch(setAmmPoolStats(ammPoolStats))\n        } catch (reason) {\n            dumpError400(reason)\n        }\n\n    }, [api])\n\n}\n\nexport function useUpdateAmmActivityRules() {\n\n    const dispatch = useDispatch()\n    const api = useAmmpoolAPI()\n\n    useCustomDCEffect(async() => {\n\n        if (!api) {\n            return\n        }\n\n        try {\n            const ammActivityRules = await api.getAmmPoolActivityRules()\n            dispatch(setAmmActivityRules(ammActivityRules.activityRules))\n        } catch (reason) {\n            dumpError400(reason)\n        }\n\n    }, [api])\n\n}\n\nexport function useUpdateTokens() {\n\n    const dispatch = useDispatch()\n    const api = useExchangeAPI()\n\n    useCustomDCEffect(async() => {\n\n        if (!api) {\n            return\n        }\n\n        try {\n            const tokens = await api.getTokens()\n            dispatch(setTokens(tokens))\n        } catch (reason) {\n            dumpError400(reason)\n        }\n\n    }, [api])\n\n}\n\nexport function useUpdateTickerMap(market: string) {\n\n    const dispatch = useDispatch()\n    const api = useExchangeAPI()\n\n    useCustomDCEffect(async() => {\n\n        if (!api) {\n            return\n        }\n\n        try {\n            const tickMap = await api.getTicker({\n                market\n              })\n            dispatch(setTickerMap(tickMap))\n        } catch (reason) {\n            dumpError400(reason)\n        }\n\n    }, [api])\n\n}\n\nexport function useMarketTrades(market: string) {\n  \n    const dispatch = useDispatch()\n    const api = useExchangeAPI()\n\n    useCustomDCEffect(async() => {\n\n        if (!api) {\n            return\n        }\n\n        try {\n            const marketTrades = await api.getMarketTrades({\n                market\n              })\n            dispatch(setMarketTrades(marketTrades))\n        } catch (reason) {\n            dumpError400(reason)\n        }\n\n    }, [api, dispatch])\n\n}\n\nexport function useUpdateFiatPrice() {\n  \n    const dispatch = useDispatch()\n    const api = useExchangeAPI()\n\n    useCustomDCEffect(async() => {\n\n        if (!api) {\n            return\n        }\n\n        try {\n            const usdFiatPrices = await api.getFiatPrice({\n                legal: Currency.USD\n            })\n            const cnyFiatPrices = await api.getFiatPrice({\n                legal: Currency.CNY\n            })\n            dispatch(setMarketTrades({}))\n        } catch (reason) {\n            dumpError400(reason)\n        }\n\n    }, [api, dispatch])\n\n}\n\n// export const asyncGetTradingInfo = async() => {\n//\n//     const { tradingInfo } = getTradingInfo()\n//     console.log('--- tradingInfo', tradingInfo)\n//\n//     let tokens: any = undefined\n//\n//     if (tradingInfo.tokens?.tokenIdMap) {\n//         tokens = tradingInfo.tokens\n//     } else {\n//         tokens = (await exchangeAPI().getTokens())\n//     }\n//\n//     let ammpools: any = undefined\n//\n//     if (tradingInfo.ammPoolConf?.ammpools) {\n//         ammpools = tradingInfo.ammPoolConf.ammpools\n//     } else {\n//         ammpools = (await ammpoolAPI().getAmmPoolConf()).ammpools\n//     }\n//\n//     let ammPoolStats: { [key: string] : AmmPoolStat } = {}\n//\n//     if (tradingInfo.ammPoolStats.ammPoolStats) {\n//         ammPoolStats = tradingInfo.ammPoolStats.ammPoolStats\n//     } else {\n//         ammPoolStats = (await ammpoolAPI().getAmmPoolStats()).ammPoolStats\n//     }\n//\n//     return {\n//         tokens,\n//         ammpools,\n//         ammPoolStats,\n//     }\n// }","import { useDispatch, useSelector } from 'react-redux'\nimport { walletLayer1Slice } from './reducer';\nimport { WalletLayer1States } from './interface';\n\nexport function useWalletLayer1(): WalletLayer1States & {\n    updateWalletLayer1:()=> void,\n    statusUnset:()=> void,\n    resetLayer1:()=>void,\n} {\n    const walletLayer1:WalletLayer1States = useSelector((state: any) => state.walletLayer1)\n    const dispatch = useDispatch();\n    const updateWalletLayer1 = () => {\n        dispatch(walletLayer1Slice.actions.updateWalletLayer1(undefined))\n    }\n    const statusUnset = ()=>{\n        dispatch(walletLayer1Slice.actions.statusUnset(undefined))\n    }\n    const resetLayer1 = ()=>{\n        dispatch(walletLayer1Slice.actions.reset(undefined))\n    }\n    return {\n        ...walletLayer1,\n        resetLayer1,\n        statusUnset,\n        updateWalletLayer1\n    }\n\n}\n","import { useDispatch, useSelector } from 'react-redux'\nimport { walletLayer2Slice } from './reducer';\nimport { WalletLayer2States } from './interface';\n\nexport function useWalletLayer2(): WalletLayer2States & {\n    updateWalletLayer2:()=> void,\n    statusUnset:()=> void,\n    resetLayer2:()=>void,\n} {\n    const walletLayer2:WalletLayer2States = useSelector((state: any) => state.walletLayer2)\n    const dispatch = useDispatch();\n    const updateWalletLayer2 = () => {\n        dispatch(walletLayer2Slice.actions.getWalletLayer2(undefined))\n    }\n    const statusUnset = ()=>{\n        dispatch(walletLayer2Slice.actions.statusUnset(undefined))\n    }\n    const resetLayer2 = ()=>{\n        dispatch(walletLayer2Slice.actions.reset(undefined))\n    }\n    return {\n        ...walletLayer2,\n        resetLayer2,\n        statusUnset,\n        updateWalletLayer2\n    }\n\n}\n","import { InjectedConnector } from '@web3-react/injected-connector'\nimport { NetworkConnector } from '@web3-react/network-connector'\nimport { WalletConnectConnector } from '@web3-react/walletconnect-connector'\nimport { WalletLinkConnector } from '@web3-react/walletlink-connector'\nimport { LedgerConnector } from '@web3-react/ledger-connector'\nimport { TrezorConnector } from '@web3-react/trezor-connector'\nimport { AuthereumConnector } from '@web3-react/authereum-connector'\n\nconst POLLING_INTERVAL = 12000\n\nconst RPC_URLS: { [chainId: number]: string } = {\n  1: process.env.REACT_APP_RPC_URL_1 as string,\n  5: process.env.REACT_APP_RPC_URL_5 as string\n}\n\nconsole.log('RPC_URLS 1:', RPC_URLS[1])\nconsole.log('RPC_URLS 5:', RPC_URLS[5])\n\nexport const injected = new InjectedConnector({ supportedChainIds: [1, 5,] })\n\nexport const network = new NetworkConnector({\n  urls: { \n    1: RPC_URLS[1], \n    5: RPC_URLS[5] \n  },\n  defaultChainId: 1\n})\n\nexport const walletconnect = new WalletConnectConnector({\n  rpc: { 1: RPC_URLS[1] },\n  bridge: 'https://bridge.walletconnect.org',\n  qrcode: true,\n  pollingInterval: POLLING_INTERVAL\n})\n\nexport const walletlink = new WalletLinkConnector({\n  url: RPC_URLS[1],\n  appName: 'Loopring DEX'\n})\n\nexport const ledger = new LedgerConnector({ chainId: 1, url: RPC_URLS[1], pollingInterval: POLLING_INTERVAL })\n\nexport const trezor = new TrezorConnector({\n  chainId: 1,\n  url: RPC_URLS[1],\n  pollingInterval: POLLING_INTERVAL,\n  manifestEmail: 'dummy@abc.xyz',\n  manifestAppUrl: 'http://localhost:1234'\n})\n\nexport const authereum = new AuthereumConnector({ chainId: 42 })\n","import { Provider } from 'react-redux'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nimport { createWeb3ReactRoot, Web3ReactProvider } from '@web3-react/core'\nimport store from 'stores'\n\nimport { getLibrary } from 'utils/web3_tools'\nimport { NetworkContextName } from 'loopring-sdk'\n\nimport { getTheme, i18n, provider, ProviderComposer } from \"@loopring-web/component-lib/static-resource\"\nimport { ThemeProvider as MuThemeProvider } from '@material-ui/core'\nimport LocalizationProvider from '@material-ui/pickers/LocalizationProvider'\n\nimport MomentUtils from '@material-ui/lab/AdapterMoment'\n\nimport { ThemeProvider } from \"@emotion/react\"\n\nimport { I18nextProvider } from \"react-i18next\"\n\n\n\nconst Web3ProviderNetwork = createWeb3ReactRoot(NetworkContextName)\nconst providers = [\n    provider(LocalizationProvider as any, {dateAdapter: MomentUtils}),\n    provider(I18nextProvider as any, {i18n:i18n}),\n    provider(MuThemeProvider as any, {theme: getTheme('dark')}),\n    provider(ThemeProvider as any, {theme: getTheme('dark')}),\n    provider(Provider as any, {store}),\n]\n\nReactDOM.render(\n// @ts-ignore\n    <ProviderComposer providers={providers}>\n        <Web3ReactProvider getLibrary={getLibrary}>\n            <Web3ProviderNetwork getLibrary={getLibrary}>\n                <App/>\n            </Web3ProviderNetwork>\n        </Web3ReactProvider>\n    </ProviderComposer>,\n    document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\nif (process.env.NODE_ENV !== 'production') {\n    reportWebVitals(console.log)\n}\n","import { createSlice, PayloadAction, Slice } from '@reduxjs/toolkit'\nimport { AmmMapStates, GetAmmMapParams } from './interface';\nimport { STATUS } from '../../constant';\n\n\n\nconst initialState: Required<AmmMapStates<object, object>> = {\n    ammMap: undefined,\n    __timer__: -1,\n    status: 'UNSET',\n    errorMessage: null,\n}\nconst ammMapSlice: Slice = createSlice({\n    name: 'ammMap',\n    initialState,\n    reducers: {\n        getAmmMap(state, action: PayloadAction<GetAmmMapParams>) {\n            state.status = STATUS.PENDING\n        },\n        getAmmMapStatus(state, action: PayloadAction<AmmMapStates<any, any>>) {\n            // @ts-ignore\n            if (action.error) {\n                state.status = STATUS.ERROR\n                // @ts-ignore\n                state.errorMessage = action.error\n            }\n            const {ammMap, __timer__} = action.payload\n            if (ammMap) {state.ammMap = ammMap;}\n            if (__timer__) {state.__timer__ = __timer__;}\n            state.status = STATUS.DONE\n        },\n        updateRealTimeAmmMap(state, action: PayloadAction<undefined>) {\n            state.status = STATUS.PENDING\n\n\n        },\n        statusUnset: state => {\n            state.status = STATUS.UNSET\n        }\n    },\n});\nexport { ammMapSlice };\nexport const {getAmmMap, getAmmMapStatus, statusUnset, updateRealTimeAmmMap} = ammMapSlice.actions\n","import { createSlice, PayloadAction, Slice } from '@reduxjs/toolkit'\nimport { STATUS } from '../constant';\nimport { StateBase } from '../interface';\nimport { SocketMap } from './interface';\n\nconst initialState: StateBase & {socket: SocketMap} = {\n  socket: {},\n  status: 'UNSET',\n  errorMessage: null,\n}\nconst socketSlice: Slice<StateBase & {socket: SocketMap}> = createSlice({\n  name: 'socket',\n  initialState,\n  reducers: {\n    socketEnd(state,action:PayloadAction<undefined>){\n      state.status = STATUS.PENDING\n    },\n    sendSocketTopic(state, action: PayloadAction<{socket: SocketMap}>) {\n      state.socket = action.payload.socket\n    },\n    getSocketStatus(state, action: PayloadAction<undefined>) {\n\n      // @ts-ignore\n      if (action.error) {\n        state.status = STATUS.ERROR\n        // @ts-ignore\n        state.errorMessage = action.error\n      }\n      // state.socket = action.payload.socket\n      state.status = STATUS.DONE\n    },\n\n    statusUnset: state => {\n      state.status = STATUS.UNSET\n    }\n\n  },\n});\nexport { socketSlice };\nexport const { getSocketStatus, sendSocketTopic, socketEnd, statusUnset} = socketSlice.actions;\n","import { createSlice, PayloadAction, Slice } from '@reduxjs/toolkit'\n\nimport { TradingInterval, ChainId, ExchangeInfo, TokenInfo, TickerData, } from 'loopring-sdk'\n\nexport interface TradingInfo {\n  chainId: number\n  interval: TradingInterval\n  ammPoolStats: any\n  ammPoolConf: any\n  ammActivityRules: any\n  markets: any\n  marketTrades: any\n  tickerMap: {[key: string]: TickerData}\n  tokens: {[key: string]: [value: TokenInfo]}\n  exchangeInfo?: ExchangeInfo\n}\n\nconst defaultInterval = process.env.REACT_APP_TEST_INTERVAL ? process.env.REACT_APP_TEST_INTERVAL : TradingInterval.hr1\n\nconst initialState = {\n  chainId: ChainId.GORLI,\n  interval: defaultInterval,\n  ammPoolConf: {},\n  ammActivityRules: {},\n  ammPoolStats: {},\n  markets: [],\n  marketTrades: {},\n  tokens: {},\n  tickerMap: {},\n  refreshRate: 1000,\n  refreshRateSlow: 3000,\n} as TradingInfo\n\nconst tradingSlice:Slice = createSlice({\n  name: 'trading',\n  initialState,\n  reducers: {\n    setChainId(state, action: PayloadAction<number>) {\n      state.chainId = action.payload\n    },\n    changeTradingInterval(state, action: PayloadAction<any>) {\n      state.interval = action.payload\n    },\n    setTickerMap(state, action: PayloadAction<any>) {\n      state.tickerMap = action.payload\n    },\n    setAmmPoolStats(state, action: PayloadAction<any>) {\n      state.ammPoolStats = action.payload\n    },\n    setAmmActivityRules(state, action: PayloadAction<any>) {\n      state.ammActivityRules = action.payload\n    },\n    setAmmPoolConf(state, action: PayloadAction<any>) {\n      state.ammPoolConf = action.payload\n    },\n    setMarketTrades(state, action: PayloadAction<any>) {\n      state.marketTrades = action.payload\n    },\n    setMarkets(state, action: PayloadAction<any>) {\n      state.markets = action.payload\n    },\n    setTokens(state, action: PayloadAction<{}>) {\n      state.tokens = action.payload\n    },\n    setExchangeInfo(state, action: PayloadAction<ExchangeInfo>) {\n      state.exchangeInfo = action.payload\n    },\n  },\n})\n\nexport const {\n  setChainId, \n  setAmmPoolStats,\n  setAmmActivityRules,\n  setMarketTrades, \n  setTickerMap, \n  setAmmPoolConf, \n  changeTradingInterval, \n  setMarkets, \n  setTokens, \n  setExchangeInfo, \n} = tradingSlice.actions\n\nexport default tradingSlice\n","export enum CONSTANTS {\n    Handler = 'handler',\n    AccountId = 'account_id',\n    Account = 'account',\n    Apikey = 'apikey',\n    Eddsakey = 'eddsakey',\n    ActiveTime = 'active_time',\n    AmmOrder = 'amm_order',\n    HardwareAddresses = 'hardware_addresses',\n}\n\nconst SESSION_TIMEOUT_SECONDS = 600\n\nexport class UserStorage {\n\n    public static getHandler() {\n        const rawHandler = sessionStorage.getItem(CONSTANTS.Handler)\n        try {\n            if (rawHandler !== undefined && rawHandler !== null)\n                return parseInt(rawHandler)\n        } catch (err) {\n        }\n        return undefined\n    }\n\n    public static setHandler(handler: any) {\n        sessionStorage.setItem(CONSTANTS.Handler, handler)\n    }\n\n    public static clearHandler() {\n        sessionStorage.removeItem(CONSTANTS.Handler)\n    }\n\n    public static checkTimeout(reset: boolean = false) : boolean {\n        let dateTimeStr = localStorage.getItem(CONSTANTS.ActiveTime)\n        let now = new Date().getTime()\n\n        if (dateTimeStr !== null && !reset) {\n            let tmpDt = new Date(parseInt(dateTimeStr))\n\n            // console.log(`now:${now} dateTimeStr:${dateTimeStr} delta:${now - tmpDt.getTime()}`)\n\n            if(now - tmpDt.getTime() > SESSION_TIMEOUT_SECONDS * 1000) {\n                console.log(`TIMEOUT! now:${now} dateTimeStr:${dateTimeStr} delta:${now - tmpDt.getTime()}`)\n                sessionStorage.clear()\n                localStorage.setItem(CONSTANTS.ActiveTime, now.toString())\n                return true\n            }\n        } else {\n\n            if (reset) {\n                console.log('force reset!!')\n            }\n\n            localStorage.setItem(CONSTANTS.ActiveTime, now.toString())\n        }\n\n        return false\n    }\n\n\n    public static getAccountId() {\n        const rawId = sessionStorage.getItem(CONSTANTS.AccountId)\n        try {\n            if (rawId)\n                return parseInt(rawId)\n        } catch (err) {\n        }\n        return undefined\n    }\n\n    public static setAccountId(accountId: number) {\n        sessionStorage.setItem(CONSTANTS.AccountId, accountId.toString())\n    }\n\n    public static getAccount() {\n        return sessionStorage.getItem(CONSTANTS.Account)\n    }\n\n    public static setAccount(account: string) {\n        sessionStorage.setItem(CONSTANTS.Account, account)\n    }\n\n    public static getApikey() {\n        return sessionStorage.getItem(CONSTANTS.Apikey)\n    }\n\n    public static setApikey(apikey: string) {\n        sessionStorage.setItem(CONSTANTS.Apikey, apikey)\n    }\n\n    public static getEddsakey() {\n        return sessionStorage.getItem(CONSTANTS.Eddsakey)\n    }\n\n    public static setEddsakey(eddsakey: string) {\n        sessionStorage.setItem(CONSTANTS.Eddsakey, eddsakey)\n    }\n\n    public static getAmmOrder(): string {\n        var orderHash = localStorage.getItem(CONSTANTS.AmmOrder)\n        return orderHash ? orderHash : ''\n    }\n\n    public static setAmmOrder(orderHash: string) {\n        localStorage.setItem(CONSTANTS.AmmOrder, orderHash)\n    }\n\n    public static clearAmmOrder() {\n        localStorage.removeItem(CONSTANTS.AmmOrder)\n    }\n\n    public static isHardwareAddress(address: string) {\n        let current = localStorage.getItem(CONSTANTS.HardwareAddresses)\n        if (current) {\n            if (current.includes(address.toLowerCase())) {\n                return true\n            }\n        }\n        return false\n    }\n\n    public static saveHardwareAddress(address: string) {\n        let current = localStorage.getItem(CONSTANTS.HardwareAddresses);\n        if (current) {\n            if (current.includes(address.toLowerCase()) !== true) {\n                let newValue = current + ',' + address.toLowerCase();\n                localStorage.setItem(CONSTANTS.HardwareAddresses, newValue);\n            }\n        } else {\n            localStorage.setItem(CONSTANTS.HardwareAddresses, address.toLowerCase());\n        }\n\n    }\n}\n","import { debug } from \"console\"\n\nexport function deepClone(data: any) {\n    if (!data || !(data instanceof Object) || (typeof data == \"function\")) {\n        return data || undefined\n    }\n    let constructor = data.constructor\n    let result = new constructor()\n    for (let key in data) {\n        if (data.hasOwnProperty(key)) {\n            result[key] = deepClone(data[key])\n        }\n    }\n    return result\n}\n\nexport async function copyToClipBoard(text: string){ //复制到剪切板\n\n    if(document.execCommand){\n        var textarea =document.createElement('textarea')\n        document.body.appendChild(textarea)\n        textarea.value=text\n        textarea.select()\n        document.execCommand(\"copy\")\n        document.body.removeChild(textarea)\n\t}\n\n    if (navigator.clipboard) {\n        await navigator.clipboard.writeText(text)\n    }\n\n\tif((window as any).clipboardData) {\n        (window as any).clipboardData.setData(\"Text\", text)\n\n        console.log('clipboardData:', text)\n        return true\n    }\n\treturn false\n}","import { createSlice, PayloadAction, Slice } from '@reduxjs/toolkit'\nimport {  TickerStates } from './interface';\nimport { STATUS } from '../constant';\nimport { CoinKey } from '@loopring-web/component-lib/src/static-resource';\n\nconst initialState:Required<TickerStates>  = {\n    tickerMap:{},\n    status:'UNSET',\n    errorMessage:null,\n}\nconst tickerMapSlice:Slice = createSlice({\n    name: 'tickerMap',\n    initialState,\n    reducers: {\n        getTicker(state, action:PayloadAction<CoinKey<any>>) {\n            state.status = STATUS.PENDING\n        },\n        getTickers(state, action:PayloadAction<Array<CoinKey<any>>>) {\n            state.status = STATUS.PENDING\n        },\n        getTickerStatus(state, action: PayloadAction<TickerStates>) {\n            // @ts-ignore\n            if (action.error) {\n                state.status =  STATUS.ERROR\n                // @ts-ignore\n                state.errorMessage = action.error\n            }\n            state.tickerMap = action.payload.tickerMap;//{...state.tickerMap,...};\n            state.status = STATUS.DONE\n        },\n        statusUnset: state => {\n            state.status = STATUS.UNSET\n        }\n\n    },\n});\nexport { tickerMapSlice };\nexport const { getTicker,getTickers, getTickerStatus, statusUnset } = tickerMapSlice.actions;","import { useMemo, useState, useEffect } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\n\nimport { Web3Provider } from '@ethersproject/providers'\nimport { Web3ReactContextInterface } from '@web3-react/core/dist/types'\n\nimport { useWeb3React } from '@web3-react/core'\n\nimport { injected } from 'networks/web3_connectors'\n\nimport { ChainId, NetworkContextName } from 'loopring-sdk'\n\n/*\nimport EXCHANGE_ABI from 'config/abis/exchange_3_6.json'\nimport ERC20_ABI from 'config/abis/erc20.json'\nimport DEPOSIT_ABI from 'config/abis/deposit.json'\n\nimport Web3 from 'web3'\n*/\n\nexport function useActiveWeb3React(): Web3ReactContextInterface<Web3Provider> & { chainId?: ChainId } {\n  const context = useWeb3React<Web3Provider>()\n  const contextNetwork = useWeb3React<Web3Provider>(NetworkContextName)\n  return context.active ? context : contextNetwork\n}\n\nexport function useEtherscan() {\n  const { chainId } = useActiveWeb3React()\n\n  const [etherscanUrl, setEtherscanUrl] = useState<string>('')\n\n  useEffect(() => {\n    switch(chainId) {\n      case ChainId.MAINNET:\n        setEtherscanUrl('https://etherscan.io/address/')\n        break\n      default:\n        setEtherscanUrl('https://goerli.etherscan.io/address/')\n    }\n  }, [chainId])\n\n  return {\n    etherscanUrl,\n  }\n}\n\nexport function useEagerConnect() {\n\n  const { activate, active } = useWeb3React()\n\n  const [tried, setTried] = useState(false)\n\n  useEffect(() => {\n    injected.isAuthorized().then((isAuthorized: boolean) => {\n      if (isAuthorized) {\n        console.log('useEagerConnect isAuthorized')\n        activate(injected, undefined, true).catch(() => {\n          setTried(true)\n        })\n      } else {\n        console.log('useEagerConnect NOT isAuthorized')\n        setTried(true)\n      }\n    })\n  }, []) // intentionally only running on mount (make sure it's only mounted once :))\n\n  // if the connection worked, wait until we get confirmation of that to flip the flag\n  useEffect(() => {\n    if (!tried && active) {\n      setTried(true)\n    }\n  }, [tried, active])\n\n  return tried\n}\n\nexport function useInactiveListener(onReConnectInjected: any = undefined, suppress: boolean = false) {\n  const { active, error, activate, chainId, } = useWeb3React()\n  const dispatch = useDispatch()\n\n  useEffect((): any => {\n    const { ethereum } = window as any\n\n    const reConnectInjected = () => {\n      console.log('--------------------------> reConnectInjected')\n      activate(injected)\n      if (onReConnectInjected) {\n        onReConnectInjected()\n      }\n    }\n\n    if (ethereum && ethereum.on && !active && !error) {\n\n      const handleChainChanged = (chainId: string | number) => {\n        console.log('Handling \\'chainChanged\\' event with payload', chainId)\n        reConnectInjected()\n      }\n      const handleAccountsChanged = (accounts: string[]) => {\n        console.log('---------------------------------------------')\n        console.log('Handling \\'accountsChanged\\' event with payload', accounts)\n        console.log('before reset accounts.length=', accounts.length)\n        if (accounts.length > 0) {\n          console.log('before reset!!!!!!!!!!!!!!!!1')\n          reConnectInjected()\n        }\n      }\n\n      ethereum.on('chainChanged', handleChainChanged)\n      ethereum.on('accountsChanged', handleAccountsChanged)\n\n      return () => {\n        if (ethereum.removeListener) {\n          ethereum.removeListener('chainChanged', handleChainChanged)\n          ethereum.removeListener('accountsChanged', handleAccountsChanged)\n        }\n      }\n    }\n  }, [active, error, chainId, activate, dispatch])\n}\n\nexport function useBlockNumber() {\n  const { library, chainId } = useActiveWeb3React()\n\n  const [blockNumber, setBlockNumber] = useState<number>()\n\n  useEffect((): any => {\n      if (!!library) {\n          let stale = false\n\n          library\n              .getBlockNumber()\n              .then((blockNumber: number) => {\n                  if (!stale) {\n                      setBlockNumber(blockNumber)\n                  }\n              })\n              .catch(() => {\n                  if (!stale) {\n                      setBlockNumber(-1)\n                  }\n              })\n\n          const updateBlockNumber = (blockNumber: number) => {\n              setBlockNumber(blockNumber)\n          }\n          library.on('block', updateBlockNumber)\n\n          return () => {\n              stale = true\n              library.removeListener('block', updateBlockNumber)\n              setBlockNumber(undefined)\n          }\n      }\n  }, [library, chainId])\n\n  return {\n      blockNumber,\n  }\n}\n\nexport function useBalance() {\n  const { account, library, chainId } = useActiveWeb3React()\n\n  const [balance, setBalance] = useState<number>()\n  useEffect((): any => {\n      if (!!account && !!library) {\n          let stale = false\n\n          library\n              .getBalance(account)\n              .then((balance: any) => {\n                  if (!stale) {\n                      setBalance(balance)\n                  }\n              })\n              .catch(() => {\n                  if (!stale) {\n                      setBalance(0)\n                  }\n              })\n\n          return () => {\n              stale = true\n              setBalance(0)\n          }\n      }\n  }, [account, library, chainId]) // ensures refresh if referential identity of library doesn't change across chainIds\n\n  return {\n      balance,\n  }\n}\n","import { useDispatch, useSelector } from 'react-redux'\nimport { userRewardsMapSlice } from './reducer';\nimport { UserRewardsStates } from './interface';\n\nexport function useUserRewards(): UserRewardsStates & {\n    updateUserRewards:()=>void,\n    statusUnset:()=>void,\n} {\n    const userRewardsMap:UserRewardsStates = useSelector((state: any) => state.userRewardsMap)\n    const dispatch = useDispatch();\n\n    const updateUserRewards = () => {\n        dispatch(userRewardsMapSlice.actions.getUserRewards(undefined))\n    }\n    const statusUnset = ()=>{\n        dispatch(userRewardsMapSlice.actions.statusUnset(undefined))\n    }\n    return {\n        ...userRewardsMap,\n        statusUnset,\n        updateUserRewards,\n    }\n\n}\n","import { createSlice, PayloadAction, Slice } from '@reduxjs/toolkit'\nimport { ENV, System, SystemStatus } from './interface';\nimport { STATUS } from '../constant';\n\nconst initialState: SystemStatus = {\n    env: ENV.PROD,\n    chainId: 'unknown',\n    // network:'NONETWORK',\n    baseURL: '',\n    socketURL: '',\n    faitPrices: undefined,\n    gasPrice: undefined,\n    forex: undefined,\n    __timer__: -1,\n    status: 'UNSET',\n    errorMessage: null,\n\n    exchangeInfo: undefined,\n\n    topics: [],\n}\nconst systemSlice: Slice<SystemStatus> = createSlice({\n    name: 'system',\n    initialState,\n    reducers: {\n\n        updateSystem(state, action: PayloadAction<System<{[key:string]:any}>>) {\n            state.chainId = action.payload.chainId\n            state.status = STATUS.PENDING\n        },\n        updateSocketURL(state, action:PayloadAction<{socketURL:string}>) {\n            state.socketURL =  action.payload.socketURL;\n        },\n        updateRealTimeObj(state, action: PayloadAction<Partial<{ faitPrices: any, gasPrice: number, forex: number }>>) {\n            const {forex, faitPrices, gasPrice} = action.payload;\n            if (forex) {\n                state.forex = forex\n            }\n            if (faitPrices) {\n                state.faitPrices = faitPrices\n            }\n            if (gasPrice) {\n                state.gasPrice = gasPrice\n            }\n\n\n            // state = {\n            //     ...state.system,\n            //     forex: forex?,\n            //     faitPrices: action.payload.faitPrices ? action.payload.faitPrices : state.system.faitPrices,\n            //     gasPrice: action.payload.gasPrice ? action.payload.gasPrice : state.system.gasPrice,\n            // };\n\n        },\n        getSystemStatus(state, action: PayloadAction<Partial<SystemStatus>>) {\n\n            // @ts-ignore\n            if (action.error) {\n                state.status = STATUS.ERROR\n                // @ts-ignore\n                state.errorMessage = action.error\n            }\n            const {env, baseURL, faitPrices, gasPrice, forex, exchangeInfo, __timer__} = action.payload;\n            if (env) {\n                state.env = env\n            }\n            if (baseURL) {\n                state.baseURL = baseURL\n            }\n            if (faitPrices) {\n                state.faitPrices = faitPrices\n            }\n            if (gasPrice) {\n                state.gasPrice = gasPrice\n            }\n            if (forex) {\n                state.forex = forex\n            }\n            \n            if (exchangeInfo) {\n                state.exchangeInfo = exchangeInfo\n            }\n\n            if (__timer__) {\n                state.__timer__ = __timer__\n            }\n            state.status = STATUS.DONE\n        },\n        statusUnset: state => {\n            state.status = STATUS.UNSET\n        }\n\n    },\n});\nexport { systemSlice };\nexport const {updateSystem, setTopics, getSystemStatus, statusUnset, updateRealTimeObj, updateSocketURL} = systemSlice.actions;","import { StateBase } from '../interface';\nimport { ChainId, ExchangeInfo } from 'loopring-sdk';\n\nexport enum ENV {\n    DEV='DEV',\n    UAT='UAT',\n    PROD='PROD',\n}\nexport enum NETWORKEXTEND {\n    NONETWORK = 'unknown'\n}\nexport type NETWORK = NETWORKEXTEND | ChainId\n\n\nexport type System<C extends {[key:string]:any}> = {\n    env:keyof typeof ENV,\n    chainId: 1|5|'unknown'\n    // network: keyof typeof NETWORK,\n    socketURL:string,\n    baseURL: string,\n    faitPrices:{ [k in keyof C]:{price:any,[key:string]:any}} | undefined,\n    gasPrice:number | undefined,\n    forex:number | undefined,\n    exchangeInfo: ExchangeInfo | undefined,\n\n}\n\nexport type SystemStatus = System<{[key:string]:any}> & {\n    // system:System | {}\n    __timer__:NodeJS.Timeout | -1\n    topics: any[]\n}  & StateBase\n\n\n\n","import { createSlice, PayloadAction, Slice } from '@reduxjs/toolkit'\nimport { WalletLayer1Map, WalletLayer1States } from './interface';\nimport { STATUS } from '../constant';\n\n\nconst initialState:WalletLayer1States  = {\n    walletLayer1:undefined,\n    status:'UNSET',\n    errorMessage:null,\n}\nconst walletLayer1Slice:Slice = createSlice({\n    name: 'walletLayer1',\n    initialState,\n    reducers: {\n        updateWalletLayer1(state, action:PayloadAction<string | undefined>) {\n            state.status = STATUS.PENDING\n        },\n        reset(state, action:PayloadAction<string | undefined>) {\n            state.walletLayer1 = undefined;\n            state.status = STATUS.UNSET;\n        },\n        getWalletLayer1Status(state, action: PayloadAction<{ walletLayer1:WalletLayer1Map<object> }>) {\n            // @ts-ignore\n            if (action.error) {\n                state.status =  STATUS.ERROR\n                // @ts-ignore\n                state.errorMessage = action.error\n            }\n            state.walletLayer1 = {...action.payload.walletLayer1};\n            state.status = STATUS.DONE\n        },\n        statusUnset: state => {\n            state.status = STATUS.UNSET\n        }\n    },\n});\nexport { walletLayer1Slice };\nexport const { updateWalletLayer1, getWalletLayer1Status,statusUnset,reset } = walletLayer1Slice.actions\n","import { createSlice, PayloadAction, Slice } from '@reduxjs/toolkit'\nimport { WalletLayer2Map, WalletLayer2States } from './interface';\nimport { STATUS } from '../constant';\n\n\nconst initialState:WalletLayer2States  = {\n    walletLayer2:undefined,\n    status:'UNSET',\n    errorMessage:null,\n}\nconst walletLayer2Slice:Slice = createSlice({\n    name: 'walletLayer2S',\n    initialState,\n    reducers: {\n        updateWalletLayer2(state, action:PayloadAction<string | undefined>) {\n            state.status = STATUS.PENDING\n        },\n        reset(state, action:PayloadAction<string | undefined>) {\n            state.walletLayer2 = undefined;\n            state.status = STATUS.UNSET;\n        },\n        getWalletLayer2Status(state, action: PayloadAction<{ walletLayer2:WalletLayer2Map<object> }>) {\n            // @ts-ignore\n            if (action.error) {\n                state.status =  STATUS.ERROR\n                // @ts-ignore\n                state.errorMessage = action.error\n            }\n            state.walletLayer2 = {...action.payload.walletLayer2};\n            state.status = STATUS.DONE\n        },\n        statusUnset: state => {\n            state.status = STATUS.UNSET\n        }\n    },\n});\nexport { walletLayer2Slice };\nexport const {  updateWalletLayer2,getWalletLayer2Status,statusUnset,reset } = walletLayer2Slice.actions\n","import { createSlice, PayloadAction, Slice } from '@reduxjs/toolkit'\nimport {  UserRewardsStates } from './interface';\nimport { STATUS } from '../constant';\n\nconst initialState:UserRewardsStates = {\n    userRewardsMap:undefined,\n    status:'UNSET',\n    errorMessage:null,\n    __timer__:-1,\n}\nconst userRewardsMapSlice:Slice<UserRewardsStates> = createSlice({\n    name: 'userRewardsMap',\n    initialState,\n    reducers: {\n        getUserRewards(state, action:PayloadAction<undefined>) {\n            state.status = STATUS.PENDING\n        },\n        getUserRewardsStatus(state, action: PayloadAction<UserRewardsStates>) {\n            // @ts-ignore\n            if (action.error) {\n                state.status =  STATUS.ERROR\n                // @ts-ignore\n                state.errorMessage = action.error\n            }\n            state.userRewardsMap = {...state.userRewardsMap,...action.payload.userRewardsMap};\n            if(action.payload.__timer__){\n                state.__timer__  =  action.payload.__timer__\n            }\n            state.status = STATUS.DONE\n        },\n        statusUnset: state => {\n            state.status = STATUS.UNSET\n        }\n\n    },\n});\nexport { userRewardsMapSlice };\nexport const { getUserRewards, getUserRewardsStatus, statusUnset } = userRewardsMapSlice.actions;","import { createSlice, PayloadAction, Slice } from '@reduxjs/toolkit'\nimport { AmmActivityMapStates } from './interface';\nimport { STATUS } from '../../constant';\n\n\nconst initialState:Required<AmmActivityMapStates>  = {\n    ammActivityMap:{},\n    status:'UNSET',\n    errorMessage:null,\n}\nconst ammActivityMapSlice:Slice = createSlice({\n    name: 'ammActivityMap',\n    initialState,\n    reducers: {\n        getAmmActivityMap(state, action:PayloadAction<string | undefined>) {\n            state.status = STATUS.PENDING\n        },\n        getAmmActivityMapStatus(state, action: PayloadAction<AmmActivityMapStates>) {\n            // @ts-ignore\n            if (action.error) {\n                state.status =  STATUS.ERROR\n                // @ts-ignore\n                state.errorMessage = action.error\n            }\n            state.ammActivityMap = {...action.payload.ammActivityMap};\n            state.status = STATUS.DONE\n        },\n        statusUnset: state => {\n            state.status = STATUS.UNSET\n        }\n\n    },\n});\nexport { ammActivityMapSlice };\nexport const { getAmmActivityMap, getAmmActivityMapStatus, statusUnset } = ammActivityMapSlice.actions\n","import { createSlice, PayloadAction, Slice } from '@reduxjs/toolkit'\nimport { GetTokenMapParams, TokenMapStates } from './interface';\nimport { STATUS } from '../constant';\n\nconst initialState: TokenMapStates<object> = {\n    coinMap: {},\n    addressIndex: undefined,\n    tokenMap: undefined,\n    marketMap: undefined,\n    idIndex: undefined,\n    status: 'UNSET',\n    errorMessage: null,\n}\nconst tokenMapSlice: Slice<TokenMapStates<object>> = createSlice({\n    name: 'tokenMap',\n    initialState,\n    reducers: {\n        getTokenMap(state, action: PayloadAction<GetTokenMapParams<any>>) {\n            state.status = STATUS.PENDING\n        },\n        getTokenMapStatus(state, action: PayloadAction<TokenMapStates<object>>) {\n            // @ts-ignore      console.log(action.type)\n            if (action.error) {\n                state.status = STATUS.ERROR\n                // @ts-ignore\n                state.errorMessage = action.error\n            }\n\n            const {tokenMap, marketMap, addressIndex, idIndex, coinMap, marketArray, marketCoins} = action.payload;\n            if (tokenMap) { state.tokenMap = tokenMap }\n            if (marketMap) { state.marketMap = marketMap }\n            if (addressIndex) { state.addressIndex = addressIndex }\n            if (idIndex) { state.idIndex = idIndex }\n            if (coinMap) { state.coinMap = coinMap }\n            if (marketArray) { state.marketArray = marketArray }\n            if (marketCoins)  { state.marketCoins = marketCoins }\n            // if (tokenPairsMap) {state.tokenPairsMap = tokenPairsMap }\n            state.status = STATUS.DONE;\n        },\n        // getTokenPairMap(state, action: PayloadAction<{tokenPairs: TokenPairs }>) {\n        //     const {tokenPairs} = action.payload;\n        //     const tokenPairsMap =  Reflect.ownKeys(tokenPairs).reduce((prev,key)=>{\n        //         // @ts-ignore\n        //         return prev[key as string] =  tokenPairs[key as string].tokenList\n        //     }, {} )\n        //     if (tokenPairsMap) {state.tokenPairsMap = tokenPairsMap }\n        //     // state.status = STATUS.PENDING\n        // },\n        statusUnset: state => {\n            state.status = STATUS.UNSET\n        }\n\n    },\n});\nexport { tokenMapSlice };\nexport const {getTokenMap, getTokenMapStatus,getTokenPairMap, statusUnset} = tokenMapSlice.actions;","import {\n    AmmPoolActivityRule,\n    AmmPoolActivityStatus,\n    AmmPoolSnapshot,\n    LoopringMap,\n    TickerData,\n    toBig,\n} from 'loopring-sdk';\nimport { AmmActivity, AmmCardProps } from '@loopring-web/component-lib/static-resource';\nimport store from '../../stores';\nimport { deepClone } from '../../utils/obj_tools';\nimport { AmmUserReward, AmmUserRewardMap } from 'loopring-sdk/dist/defs/loopring_defs';\nimport BigNumber from 'bignumber.js';\nimport { MyAmmLP } from '@loopring-web/component-lib/src/static-resource';\nimport { volumeToCount, volumeToCountAsBigNumber } from './volumeToCount';\nimport { coinMap } from '@loopring-web/component-lib/static';\nimport { AmmDetailStore } from '../../stores/Amm/AmmMap';\nimport { WalletMapExtend } from './makeWallet';\n\nexport type AmmActivityViewMap<R, I> = {\n    [key in keyof R]?: AmmActivity<I>[] | undefined\n}\nexport const makeUIAmmActivityMap = <R extends { [ key: string ]: any }, I extends { [ key: string ]: any }>\n({ammActivityMap, type, ammPoolActivityStatus}: {\n    ammActivityMap: LoopringMap<LoopringMap<AmmPoolActivityRule[ ]>> | undefined,\n    type: 'AMM_MINING' | 'SWAP_VOLUME_RANKING',\n    ammPoolActivityStatus: AmmPoolActivityStatus[]\n}, myReward: AmmUserRewardMap | undefined):\n    Array<AmmCardProps<I>> => {\n    const {coinMap, tokenMap, idIndex} = store.getState().tokenMap\n    let ammActivityViewMap: AmmActivityViewMap<R, I> = {}\n    if (ammActivityMap && ammActivityMap[ type ]) {\n\n\n        // @ts-ignore\n        ammPoolActivityStatus.forEach((status: AmmPoolActivityStatus) => {\n\n            if (ammActivityMap[ type ][ status ]) {\n                // @ts-ignore\n                ammActivityMap[ type ][ status ].reduce((prev: AmmActivityViewMap<R, I>, ammPoolActivityRule: AmmPoolActivityRule) => {\n\n                    if (coinMap && ammPoolActivityRule.awardRules[ 0 ] && idIndex && tokenMap) {\n\n                        const symbol = idIndex[ ammPoolActivityRule.awardRules[ 0 ].tokenId as any ]\n\n                        // @ts-ignore\n                        const item = {\n                            // @ts-ignore\n                            rewardToken: coinMap[ symbol ],\n                            myRewards: status === AmmPoolActivityStatus.InProgress && myReward && myReward[ ammPoolActivityRule.market ] ?\n                                volumeToCount(symbol, myReward[ ammPoolActivityRule.market ]?.currentRewards[ 0 ].volume) : 0,\n                            duration: {\n                                from: new Date(ammPoolActivityRule?.rangeFrom),\n                                to: new Date(ammPoolActivityRule?.rangeTo),\n                            },\n                            isPass: AmmPoolActivityStatus.EndOfGame === status,\n                        }\n                        if (prev[ ammPoolActivityRule.market ]) {\n                            // @ts-ignore\n                            prev[ ammPoolActivityRule.market ].push(item);\n                        } else {\n                            // @ts-ignore\n                            prev[ ammPoolActivityRule.market ] = [item];\n                        }\n\n\n                        // return prev;\n                    }\n                    return prev;\n                }, ammActivityViewMap)\n\n            }\n        })\n    }\n    const resultArray = makeAsCard(ammActivityViewMap)\n    // console.log(resultArray)\n    return resultArray;\n\n\n}\nconst makeAsCard = <R extends { [ key: string ]: any }, I extends { [ key: string ]: any }>\n(ammActivityViewMap: AmmActivityViewMap<R, I> | undefined, myReward?: any): Array<AmmCardProps<I>> => {\n    const {coinMap} = store.getState().tokenMap\n    const {ammMap} = store.getState().amm.ammMap\n    try {\n        if (ammActivityViewMap && coinMap) {\n            // @ts-ignore\n            return Reflect.ownKeys(ammActivityViewMap).reduce((prev: Array<AmmCardProps<I>>, key: string) => {\n                const _ammInfo = ammMap[ key as string ]\n                if (_ammInfo && _ammInfo.coinA && coinMap && ammActivityViewMap[ key ]) {\n\n                    // @ts-ignore\n                    const itemArray = ammActivityViewMap[ key ].map((item) => {\n                        return {\n                            ...deepClone(_ammInfo),\n                            // @ts-ignore\n                            coinAInfo: coinMap[ _ammInfo.coinA ],\n                            // @ts-ignore\n                            coinBInfo: coinMap[ _ammInfo.coinB ],\n                            activity: item,\n                        }\n                    })\n                    prev = [...prev, ...itemArray]\n                }\n                return prev;\n            }, [] as Array<AmmCardProps<I>>) as Array<AmmCardProps<I>>\n        } else {\n            return [] as Array<AmmCardProps<I>>\n        }\n    } catch (error) {\n        console.log(error)\n        return []\n    }\n}\ntype Value = undefined | number;\nexport type SummaryMyAmm = {\n    rewardDollar: Value,\n    rewardYuan: Value,\n    feeDollar: Value,\n    feeYuan: Value,\n}\nexport const makeSummaryMyAmm = <C extends { [ key: string ]: any }>({\n                                                                         userRewardsMap\n                                                                     }: {\n    userRewardsMap: LoopringMap<AmmUserReward> | undefined\n}):\n    SummaryMyAmm | undefined => {\n    const {coinMap, idIndex, tokenMap} = store.getState().tokenMap;\n    const {faitPrices, forex} = store.getState().system;\n    if (userRewardsMap && idIndex && coinMap && tokenMap && faitPrices && forex) {\n        let summaryMyAmm = Object.keys(userRewardsMap).reduce((prev, key) => {\n            if (/AMM-/i.test(key)) {\n                // @ts-ignore\n                const [, coinA, coinB] = key.match(/AMM-(\\w+)-(\\w+)/i);\n                const ammUserReward = userRewardsMap[ key ]\n                const {\n                    rewardDollar,\n                    rewardYuan,\n                    feeDollar,\n                    feeYuan\n                } = getOneRewardInfo({coinB, coinA, ammUserReward, idIndex, faitPrices, forex})\n                prev.rewardDollar = rewardDollar ? toBig(rewardDollar).plus(prev.rewardDollar).toNumber() : 0;\n                prev.rewardYuan = rewardYuan ? toBig(rewardYuan).plus(prev.rewardYuan).toNumber() : 0;\n                prev.feeDollar = feeDollar ? toBig(feeDollar).plus(prev.feeDollar).toNumber() : 0;\n                prev.feeYuan = feeYuan ? toBig(feeYuan).plus(prev.feeYuan).toNumber() : 0;\n            }\n            return prev\n        }, {\n            rewardDollar: 0,\n            rewardYuan: 0,\n            feeDollar: 0,\n            feeYuan: 0\n        })\n\n        return summaryMyAmm\n    }\n    return undefined\n}\nconst getOneRewardInfo = <C>({\n                                 coinA,\n                                 coinB,\n                                 ammUserReward,\n                                 idIndex,\n                                 faitPrices,\n                                 forex,\n                                 walletMap,\n                                 snapShotData\n                             }: any) => {\n    let rewardToken, rewardToken2, feeA, feeB, feeDollar, feeYuan, reward, reward2, rewardDollar, rewardYuan;\n    if (ammUserReward) {\n        rewardToken = ammUserReward.currentRewards[ 0 ] ? idIndex[ ammUserReward.currentRewards[ 0 ].tokenId as number ] : undefined\n        rewardToken2 = ammUserReward.currentRewards[ 1 ] ? idIndex[ ammUserReward.currentRewards[ 1 ].tokenId as number ] : undefined\n        feeA = ammUserReward ? volumeToCountAsBigNumber(coinA, ammUserReward.feeRewards[ 0 ]) : toBig(0);\n        feeB = ammUserReward ? volumeToCountAsBigNumber(coinB, ammUserReward.feeRewards[ 1 ]) : toBig(0);\n        feeA = feeA ? feeA : toBig(0);\n        feeB = feeB ? feeB : toBig(0);\n        feeDollar = feeA.times(faitPrices[ coinA ].price).plus(feeB.times(faitPrices[ coinB ].price))\n        feeYuan = feeDollar.times(forex);\n        reward = rewardToken ? volumeToCountAsBigNumber(rewardToken, ammUserReward.currentRewards[ 0 ].volume) as BigNumber : toBig(0);\n        reward2 = rewardToken2 ? volumeToCountAsBigNumber(rewardToken2, ammUserReward.currentRewards[ 1 ].volume) as BigNumber : toBig(0);\n        reward = reward ? reward : toBig(0);\n        reward2 = reward2 ? reward2 : toBig(0);\n        rewardDollar = reward.times(rewardToken ? faitPrices[ rewardToken ].price : 1).plus(reward2.times(rewardToken2 ? faitPrices[ rewardToken2 ].price : 1));\n        rewardYuan = rewardDollar.times(forex);\n    }\n    let balanceA, balanceB, balanceDollar, balanceYuan;\n    if (walletMap && walletMap[ 'LP-' + coinA + '-' + coinB ] && snapShotData) {\n        // @ts-ignore\n        const ratio = new BigNumber(walletMap[ 'LP-' + coinA + '-' + coinB ].count).div(snapShotData.ammPoolsBalance.lp.volume);\n        balanceA = ratio.times(volumeToCountAsBigNumber(coinA, snapShotData.ammPoolsBalance.pooled[ 0 ].volume) || 1);\n        balanceB = ratio.times(volumeToCountAsBigNumber(coinB, snapShotData.ammPoolsBalance.pooled[ 1 ].volume) || 1);\n        // @ts-ignore\n        balanceDollar = balanceA.times(faitPrices[ coinA ].price).plus(balanceB.times(faitPrices[ coinB ].price))\n        balanceYuan = balanceDollar.times(forex)\n    }\n\n    return {\n        feeA: feeA ? feeA.toNumber() : undefined,\n        feeB: feeB ? feeB.toNumber() : undefined,\n        reward: reward ? reward.toNumber() : undefined,\n        rewardToken: rewardToken ? coinMap[ rewardToken ] : undefined,\n        reward2: reward2 ? reward2.toNumber() : undefined,\n        rewardToken2: rewardToken2 ? coinMap[ rewardToken2 ] : undefined,\n        rewardDollar: rewardDollar ? rewardDollar.toNumber() : undefined,\n        rewardYuan: rewardYuan ? rewardYuan.toNumber() : undefined,\n        feeDollar: feeDollar ? feeDollar.toNumber() : undefined,\n        feeYuan: feeYuan ? feeYuan.toNumber() : undefined,\n        ammDetail: {\n            coinAInfo: coinMap[ coinA ],\n            coinBInfo: coinMap[ coinB ]\n        },\n        balanceA: balanceA ? balanceA.toNumber() : undefined,\n        balanceB: balanceB ? balanceB.toNumber() : undefined,\n        balanceDollar: balanceDollar ? balanceDollar.toNumber() : undefined,\n        balanceYuan: balanceYuan ? balanceYuan.toNumber() : undefined,\n    } as MyAmmLP<C>\n}\n\nexport const makeMyAmmWithSnapshot = <C extends { [ key: string ]: any }>(market: any, _walletMap: WalletMapExtend<C> | undefined, ammUserRewardMap: LoopringMap<AmmUserReward> | undefined, snapShotData?: {\n    tickerData?: TickerData | undefined\n    ammPoolsBalance: AmmPoolSnapshot | undefined\n} | undefined) => {\n    const {coinMap, idIndex, tokenMap} = store.getState().tokenMap;\n    const {faitPrices, forex} = store.getState().system;\n    const [, coinA, coinB] = market.match(/(\\w+)-(\\w+)/i);\n    let _myAmm: Partial<MyAmmLP<C>> = {};\n    if (ammUserRewardMap && ammUserRewardMap[ 'AMM-' + market ]\n        && snapShotData && snapShotData.ammPoolsBalance) {\n        const ammUserReward: AmmUserReward = ammUserRewardMap[ 'AMM-' + market ];\n        // @ts-ignore\n        if (coinMap && tokenMap && idIndex && forex && faitPrices) {\n            _myAmm = getOneRewardInfo({\n                coinA, coinB, ammUserReward,\n                idIndex, faitPrices, forex, walletMap: _walletMap, snapShotData\n            })\n\n            return _myAmm as MyAmmLP<C>\n        }\n    }\n    return {\n        feeA: undefined,\n        feeB: undefined,\n        feeDollar: undefined,\n        feeYuan: undefined,\n        reward: undefined,\n        rewardToken: undefined as any,\n        balanceA: undefined,\n        balanceB: undefined,\n        balanceYuan: undefined,\n        balanceDollar: undefined,\n    }\n}\n\nexport const makeMyAmmWithStat = <C extends { [ key: string ]: any }>\n(market: any,\n _walletMap: WalletMapExtend<C> | undefined,\n ammUserRewardMap: LoopringMap<AmmUserReward> | undefined,\n ammDetail: AmmDetailStore<C>) => {\n    const {coinMap, idIndex, tokenMap} = store.getState().tokenMap;\n    const {faitPrices, forex} = store.getState().system;\n    const [, coinA, coinB] = market.match(/(\\w+)-(\\w+)/i);\n    let _myAmm = {};\n    let balanceA, balanceB, balanceDollar, balanceYuan;\n    if (_walletMap && _walletMap[ 'LP-' + coinA + '-' + coinB ] && forex) {\n        // @ts-ignore\n        const ratio = new BigNumber(_walletMap[ 'LP-' + coinA + '-' + coinB ].count).div(ammDetail.totalLPToken);\n        balanceA = ratio.times(volumeToCountAsBigNumber(coinA, ammDetail.totalA ? ammDetail.totalA : 0) || 1);\n        balanceB = ratio.times(volumeToCountAsBigNumber(coinB, ammDetail.totalB ? ammDetail.totalB : 0) || 1);\n        // @ts-ignore\n        balanceDollar = balanceA.times(faitPrices[ coinA ].price).plus(balanceB.times(faitPrices[ coinB ].price))\n        balanceYuan = balanceDollar.times(forex);\n        _myAmm = {\n            // ...ammDetail,\n            balanceA: balanceA.toNumber(),\n            balanceB: balanceB.toNumber(),\n            balanceYuan: balanceYuan.toNumber(),\n            balanceDollar: balanceDollar.toNumber(),\n        }\n    }\n    if (ammUserRewardMap && ammUserRewardMap[ 'AMM-' + market ]\n        && ammDetail && forex) {\n        const ammUserReward: AmmUserReward = ammUserRewardMap[ 'AMM-' + market ];\n        let rewardToken, rewardToken2, feeA, feeB, feeDollar, feeYuan, reward, reward2, rewardDollar, rewardYuan;\n\n        if (coinMap && tokenMap && idIndex && forex && faitPrices && ammUserReward) {\n            rewardToken = ammUserReward.currentRewards[ 0 ] ? idIndex[ ammUserReward.currentRewards[ 0 ].tokenId as number ] : undefined\n            rewardToken2 = ammUserReward.currentRewards[ 1 ] ? idIndex[ ammUserReward.currentRewards[ 1 ].tokenId as number ] : undefined\n            feeA = ammUserReward ? volumeToCountAsBigNumber(coinA, ammUserReward.feeRewards[ 0 ]) : toBig(0);\n            feeB = ammUserReward ? volumeToCountAsBigNumber(coinB, ammUserReward.feeRewards[ 1 ]) : toBig(0);\n            feeA = feeA ? feeA : toBig(0);\n            feeB = feeB ? feeB : toBig(0);\n            feeDollar = feeA.times(faitPrices[ coinA ].price).plus(feeB.times(faitPrices[ coinB ].price))\n            feeYuan = feeDollar.times(forex);\n            reward = rewardToken ? volumeToCountAsBigNumber(rewardToken, ammUserReward.currentRewards[ 0 ].volume) as BigNumber : toBig(0);\n            reward2 = rewardToken2 ? volumeToCountAsBigNumber(rewardToken2, ammUserReward.currentRewards[ 1 ].volume) as BigNumber : toBig(0);\n            reward = reward ? reward : toBig(0);\n            reward2 = reward2 ? reward2 : toBig(0);\n            rewardDollar = reward.times(rewardToken ? faitPrices[ rewardToken ].price : 1).plus(reward2.times(rewardToken2 ? faitPrices[ rewardToken2 ].price : 1));\n            rewardYuan = rewardDollar.times(forex);\n            _myAmm = {\n                ..._myAmm,\n                feeA: feeA ? feeA.toNumber() : undefined,\n                feeB: feeB ? feeB.toNumber() : undefined,\n                reward: reward ? reward.toNumber() : undefined,\n                // @ts-ignore\n                rewardToken: rewardToken ? coinMap[ rewardToken ] : undefined,\n                reward2: reward2 ? reward2.toNumber() : undefined,\n                // @ts-ignore\n                rewardToken2: rewardToken2 ? coinMap[ rewardToken2 ] : undefined,\n                rewardDollar: rewardDollar ? rewardDollar.toNumber() : undefined,\n                rewardYuan: rewardYuan ? rewardYuan.toNumber() : undefined,\n                feeDollar: feeDollar ? feeDollar.toNumber() : undefined,\n                feeYuan: feeYuan ? feeYuan.toNumber() : undefined,\n                ammDetail: {\n                    // @ts-ignore\n                    coinAInfo: coinA ? coinMap[ coinA ] : undefined,\n                    // @ts-ignore\n                    coinBInfo: coinB ? coinMap[ coinB ] : undefined,\n                },\n            }\n\n        }\n        return _myAmm as MyAmmLP<C>\n    }\n    return {\n        feeA: undefined,\n        feeB: undefined,\n        feeDollar: undefined,\n        feeYuan: undefined,\n        reward: undefined,\n        rewardToken: undefined as any,\n        balanceA: undefined,\n        balanceB: undefined,\n        balanceYuan: undefined,\n        balanceDollar: undefined,\n    }\n}\n\n// if (ammUserReward) {\n//     const symbol = ammUserReward.currentRewards[ 0 ] ? idIndex[ ammUserReward.currentRewards[ 0 ].tokenId as number ] : undefined\n//     const symbol2 = ammUserReward.currentRewards[ 1 ] ? idIndex[ ammUserReward.currentRewards[ 1 ].tokenId as number ] : undefined\n//\n//     _myAmm = {\n//         ..._myAmm,\n//         feeA: ammUserReward ? volumeToCount(coinA, ammUserReward.feeRewards[ 0 ]) : 0,//Number(ammUserReward.feeRewards[ 0 ]) : 0,\n//         feeB: ammUserReward ? volumeToCount(coinB, ammUserReward.feeRewards[ 1 ]) : 0,//Number(ammUserReward.feeRewards[ 1 ]) : 0,\n//         reward: symbol ? volumeToCount(symbol, ammUserReward.currentRewards[ 0 ].volume) : 0,\n//         // @ts-ignore\n//         rewardToken: symbol ? coinMap[ symbol ] : undefined,\n//         reward2: symbol2 ? volumeToCount(symbol2, ammUserReward.currentRewards[ 1 ].volume) : 0,\n//         // @ts-ignore\n//         rewardToken2: symbol2 ? coinMap[ symbol2 ] : undefined,\n//\n//\n//     }\n//     _myAmm.feeDollar = _myAmm.feeA && _myAmm.feeA * faitPrices[ coinA ].price;\n//     _myAmm.feeDollar = _myAmm.feeB && _myAmm.feeB * faitPrices[ coinB ].price;\n// }\n//\n//\n// if (_walletMap && _walletMap[ 'LP-' + market ]) {\n//     // @ts-ignore\n//     const ratio = new BigNumber(_walletMap[ 'LP-' + market ].detail.total).div(snapShotData.ammPoolsBalance.lp.volume);\n//     _myAmm = {\n//         ..._myAmm,  //snapShotData.ammPoolsBalance.pooled[ 0 ].volume).div(BIG10.pow(tokenMap[coinA].decimals)\n//         balanceA: ratio.times(volumeToCountAsBigNumber(coinA, snapShotData.ammPoolsBalance.pooled[ 0 ].volume) || 1).toNumber(),\n//         balanceB: ratio.times(volumeToCountAsBigNumber(coinB, snapShotData.ammPoolsBalance.pooled[ 1 ].volume) || 1).toNumber(),\n//     }\n//     // @ts-ignore\n//     _myAmm.balanceDollar = _myAmm.balanceA * faitPrices[ coinA ].price + _myAmm.balanceB * faitPrices[ coinB ].price\n//     _myAmm.balanceYuan = _myAmm.balanceDollar * forex\n// }\n// export const getAmmPoolGameUserRanks = ():Promise<AmmUserRewardMap> => {\n//     const {accountId} = store.getState().account\n//     //https://api3.loopring.io/api/v2/amm/user/rewards?owner=10917\n//     if(LoopringAPI.ammpoolAPI){\n//         return LoopringAPI.ammpoolAPI.getAmmPoolUserRewards({owner:accountId}).then(({ammUserRewardMap}:any)=>{\n//               return ammUserRewardMap  as AmmUserRewardMap\n//         })\n//     }else{\n//         return  Promise.resolve({} as AmmUserRewardMap);\n//     }\n//\n//     // return LoopringAPI.ammpoolAPI?.getUserAmmPoolTxs({accountId}, apiKey).then(({userAmmPoolTxs}) => {\n//     //     return userAmmPoolTxs\n//     // })\n//     // if(LoopringAPI.ammpoolAPI)   {\n//     //    let promiseList =  marketKeys.map((key)=>{\n//     //         // @ts-ignore\n//     //         return LoopringAPI.ammpoolAPI.getAmmPoolGameUserRank({owner:accAddr,ammPoolMarket:'key'},apiKey)\n//     //     })\n//     //     return Promise.all(promiseList).then(\n//     //         (array:any[])=>{\n//     //\n//     //           return  array.reduce((prev,item:{userRankList:GameRankInfo[]},index)=>{\n//     //                 const market = marketKeys[index]\n//     //                 prev[ market] = item.userRankList[0]\n//     //                 return item.userRankList[0]\n//     //             },{})\n//     //\n//     //         }\n//     //     )\n//     // }else{\n//     //   return  Promise.resolve({});\n//     // }\n//\n//\n//\n//\n// }\n//\n// {\n//     userRankList: GameRankInfo[];\n//     raw_data: any;\n// }\n","import { useDispatch, useSelector } from 'react-redux'\nimport { systemSlice } from './reducer';\nimport { System, SystemStatus } from './interface';\n\nexport function useSystem(): SystemStatus & {\n    updateSystem:(system:Partial<System< {[key:string]:any}>>)=>void,\n    statusUnset:()=>void,\n} {\n    const system:SystemStatus = useSelector((state: any) => state.system)\n    const dispatch = useDispatch();\n    const updateSystem = (system:Partial<System<{[key:string]:any}>>) => {\n        dispatch(systemSlice.actions.updateSystem(system))\n    }\n    const statusUnset = ()=>{\n        dispatch(systemSlice.actions.statusUnset(undefined))\n    }\n    return {\n        ...system,\n        statusUnset,\n        updateSystem,\n    }\n\n}\n","import * as fm from 'loopring-sdk';\nimport store from '../../stores';\nimport { TradeTypes,CoinMap } from '@loopring-web/component-lib/static-resource';\nimport { ammpoolAPI, LoopringAPI, userAPI } from '../../stores/apis/api';\nimport { AmmRecordRow, AmmTradeType,RawDataTradeItem } from '@loopring-web/component-lib';\nimport { AmmPoolTx, BillType, AmmTxType, UserAmmPoolTx,getBaseQuote, MarketTradeInfo, Side, UserTrade } from 'loopring-sdk';\nimport { volumeToCount, volumeToCountAsBigNumber } from './volumeToCount';\n\nexport const getUserTrades = (marketKey: any) => {\n    const userApi = userAPI();\n    const {accountId, apiKey} = store.getState().account\n    return userApi.getUserTrades({accountId}, apiKey).then((response: {\n        totalNum: any;\n        userTrades: UserTrade[];\n        raw_data: any;\n    }) => {\n        return response.userTrades\n    })\n}\nexport const makeMarketArray = (coinKey: any, marketTrades: MarketTradeInfo[]): RawDataTradeItem[] => {\n\n    let tradeArray: Array<Partial<RawDataTradeItem>> = []\n\n    marketTrades.forEach((item: MarketTradeInfo) => {\n        try {\n            const {base, quote} = getBaseQuote(item.market)\n            const {forex} = store.getState().system\n            const {currency} = store.getState().settings\n            const {tokenMap} = store.getState().tokenMap\n            if (tokenMap) {\n               // const baseToken = tokenMap[ base as string ]\n               // const quoteToken = tokenMap[ quote as string ]\n\n                // @ts-ignore\n                tradeArray.push({\n                    side: item.side === Side.Sell ? TradeTypes.Sell : TradeTypes.Buy,\n                    amount: {\n                        from: {\n                            key: base as string,\n                            value: base ? volumeToCount(base, item.volume) : undefined\n                        },\n                        to: {\n                            key: quote as string,\n                            value: base ? volumeToCountAsBigNumber(base, item.volume)?.times(item.price).toNumber():undefined\n                        },\n\n                    },\n                    price: {\n                        key: '',\n                        value: fm.toBig(item.price).toNumber(),\n                    },\n                    fee: {\n                        key: '',\n                        value: quote? volumeToCount(quote, item.fee):undefined, //fm.toBig(item.fee).div(BIG10.pow(quoteToken.decimals)).toNumber(),\n                    },\n                    time: parseInt(item.tradeTime.toString()),\n                })\n            }\n        } catch (error) {\n            //CATCHERROR:\n            console.log(error)\n            // new CustomError()\n        }\n\n    })\n    // console.log('tradeArray:', tradeArray)\n    return tradeArray as RawDataTradeItem[];\n\n}\n\nexport const getUserAmmTransaction = () => {\n    const {accountId, apiKey} = store.getState().account\n    return LoopringAPI.ammpoolAPI?.getUserAmmPoolTxs({accountId}, apiKey).then(({userAmmPoolTxs}) => {\n        return userAmmPoolTxs\n    })\n    // }\n\n}\n\n\nexport const makeMyAmmMarketArray = <C extends { [ key: string ]:any }>(coinKey: string|undefined, marketTransaction: UserAmmPoolTx[]): AmmRecordRow<C>[] => {\n\n    let tradeArray: Array<Partial<AmmRecordRow<C>>> = [];\n    let {tokenMap, coinMap, idIndex} = store.getState().tokenMap;\n    marketTransaction.forEach((item: UserAmmPoolTx) => {\n        try {\n           // const {base, quote} = getBaseQuote(coinKey)\n            const {forex} = store.getState().system\n            // const {currency} = store.getState().settings\n            if (coinMap && tokenMap && idIndex\n                && !(coinKey && tokenMap['LP-'+coinKey].tokenId !== item.lpToken.tokenId) ) {\n                // @ts-ignore\n                const [, coinA, coinB] = idIndex[item.lpToken.tokenId].match(/LP-(\\w+)-(\\w+)/i);\n                 \n                tradeArray.push({\n                        type: item.txType === AmmTxType.JOIN ? AmmTradeType.add : AmmTradeType.remove,\n                        //TODO:\n                        totalDollar: 1000,\n                        totalYuan: 1000 / Number(forex),\n                        amountA: volumeToCount(coinA,item.poolTokens[ 0 ]?.actualAmount),\n                        amountB: volumeToCount(coinA,item.poolTokens[ 1 ]?.actualAmount),\n                        time: Number(item.updatedAt),\n                        // @ts-ignore\n                        coinA: coinMap[ coinA ],\n                        // @ts-ignore\n                        coinB: coinMap[ coinB ],\n                        status: item.txStatus\n                    })\n                }\n                return tradeArray\n            }\n         catch (error) {\n            //CATCHERROR:\n            console.log(error)\n            // new CustomError()\n        }\n\n    })\n    // console.log('tradeArray:', tradeArray)\n    return tradeArray as AmmRecordRow<C>[];\n\n}\n\n\nexport const makeMarketAmmArray = <C extends object>(coinKey: any, marketTransaction: AmmPoolTx[]): AmmRecordRow<C>[] => {\n\n    let tradeArray: Array<Partial<AmmRecordRow<C>>> = [];\n\n    // marketTransaction.forEach((item: AmmPoolTx) => {\n    //     try {\n    //         const {base, quote} = getBaseQuote(coinKey)\n    //         const {forex} = store.getState().system\n    //         // const {currency} = store.getState().settings\n    //         const coinMap = store.getState().tokenMap.coinMap as CoinMap<C>\n    //         if (coinMap) {\n    //\n    //             // id: number;\n    //             // from: string;\n    //             // to: string;\n    //             // token: string;\n    //             // amount: string;\n    //             // tokenF: string;\n    //             // amountF: string;\n    //             // status: TxStatus;\n    //             // txHash: string;\n    //             // billType: BillType;\n    //             // income: boolean;\n    //             // timestamp: number;\n    //             // memo: string;\n    //             // price: string;\n    //             // transferType: TransferType;\n    //             // label: string;\n    //             tradeArray.push({\n    //                 // type: item.billType === BillType.ORDER ?\n    //                 //     AmmTradeType.swap : item.billType === BillType.TRANSFER && item.income ?\n    //                 //         AmmTradeType.add : AmmTradeType.remove,\n    //                 // // //TODO:\n    //                 // totalDollar: 1000,\n    //                 // totalYuan: 1000 / Number(forex),\n    //                 // amountA: Number(item.poolTokens[ 0 ].amount),\n    //                 // amountB: Number(item.poolTokens[ 1 ].amount),\n    //                 // time: Number(item.updatedAt),\n    //                 // coinA: coinMap[ base as keyof C],\n    //                 // coinB: coinMap[ quote as keyof C ],\n    //             })\n    //         }\n    //     } catch (error) {\n    //         //CATCHERROR:\n    //         console.log(error)\n    //         // new CustomError()\n    //     }\n    //\n    // })\n    // console.log('tradeArray:', tradeArray)\n    return tradeArray as AmmRecordRow<C>[];\n\n}\n","import { AmmpoolAPI, ChainId, ExchangeAPI, UserAPI, WalletAPI, WsAPI } from \"loopring-sdk\"\nimport { getChainId } from 'stores/trading/hook'\n\nexport const walletAPI = () => {\n    const walletApi = new WalletAPI(getChainId() as ChainId)\n    return walletApi\n}\n\nexport const userAPI = () => {\n    const userApi = new UserAPI(getChainId() as ChainId)\n    return userApi\n}\n\nexport const exchangeAPI = () => {\n    const exchangeApi = new ExchangeAPI(getChainId() as ChainId)\n    return exchangeApi\n}\n\nexport const ammpoolAPI = () => {\n    const ammpoolApi = new AmmpoolAPI(getChainId() as ChainId)\n    return  ammpoolApi\n}\n\nexport const wsAPI = () => {\n    const wsApi = new WsAPI(getChainId() as ChainId)\n    return wsApi\n}\n\nexport class LoopringAPI {\n    \n    public static userAPI: UserAPI | undefined = undefined\n    public static exchangeAPI: ExchangeAPI | undefined = undefined\n    public static ammpoolAPI: AmmpoolAPI | undefined = undefined\n    public static walletAPI: WalletAPI | undefined = undefined\n    public static wsAPI: WsAPI | undefined = undefined\n\n    public static InitApi = (chainId: ChainId) => {\n        LoopringAPI.userAPI = new UserAPI(chainId) \n        LoopringAPI.exchangeAPI = new ExchangeAPI(chainId) \n        LoopringAPI.ammpoolAPI = new AmmpoolAPI(chainId) \n        LoopringAPI.walletAPI = new WalletAPI(chainId) \n        LoopringAPI.wsAPI = new WsAPI(chainId) \n    }\n\n}\n","import { utils } from 'ethers'\n\nimport * as fm from 'loopring-sdk'\n\nimport BigNumber from 'bignumber.js'\n\nimport { CoinInfo, CoinMap, } from '@loopring-web/component-lib/static-resource'\nimport { DepthData, getBaseQuote, LoopringMap, MarketInfo, MarketStatus, TokenInfo, } from 'loopring-sdk'\nimport { BIG0, BIG1, BIG10, BIG10K, MULTI_FACTOR, } from '../defs/swap_defs'\n\nexport function getIcon(symbol: string, tokens: any) {\n    const token: any = tokens[symbol]\n    return getIconByTokenInfo(token)\n}\n\nexport function getIconByTokenInfo(token: TokenInfo) {\n    if (token) {\n        const addr = utils.getAddress(token.address)\n        const path = `https://exchange.loopring.io/assets/images/ethereum/assets/${addr}/logo.png`\n        return path\n    }\n    return ''\n}\n\nexport function makeCoinInfo(token: TokenInfo) {\n    if (token) {\n        const info: CoinInfo<any> = {\n            icon: getIconByTokenInfo(token),\n            name: token.symbol,\n            simpleName: token.symbol,\n            description: token.name,\n            company: token.name,\n        }\n        return info\n    }\n    return undefined\n}\n\nexport const getLeft = (pairs: any, tokens: any) => {\n    if (pairs) {\n\n        const left = Reflect.ownKeys(pairs)\n\n        let coinMapLeft: CoinMap<any, CoinInfo<any>> = {}\n\n        left.forEach((key: any) => {\n            coinMapLeft[key] = {\n                icon: getIcon(key, tokens),\n                name: key,\n                simpleName: key,\n                description: '',\n                company: ''\n            }\n        })\n\n        return {\n            left,\n            coinMapLeft,\n        }\n    }\n\n    return undefined\n}\n\nexport const getRight = (pairs: any, left: any, tokens: any) => {\n    if (pairs) {\n        const right = pairs[left].tokenList\n\n        let coinMapRight: CoinMap<any, CoinInfo<any>> = {}\n\n        if (right) {\n            right.forEach((key: any) => {\n                coinMapRight[key] = {\n                    icon: getIcon(key, tokens),\n                    name: key,\n                    simpleName: key,\n                    description: '',\n                    company: ''\n                }\n            })\n\n            return {\n                right,\n                coinMapRight,\n            }\n        }\n    }\n    return undefined\n}\n\nexport const getToken = (tokens: any, token: any) => {\n    if (!tokens) {\n        throw Error('no tokens list!')\n    }\n    return tokens[token]\n}\n\nexport const getTokenInfoByToken = (ammBalance: any, tokens: any, token: any) => {\n\n    const tokenInfo = getToken(tokens, token)\n\n    const tokenVol = ammBalance.pooledMap[tokenInfo.tokenId].volume\n    const reserve = fm.toBig(tokenVol)\n\n    return {\n        tokenInfo, tokenVol, reserve,\n    }\n}\n\nconst getKey = (base: any, quote: any) => {\n\n    if (!base || !quote) {\n        return {\n            key: undefined,\n            key_bak: undefined,\n            isOK: false,\n        }\n    }\n\n    const isLRCETH = false\n    const key = isLRCETH ? 'LRCETH-Pool' : ('AMM-' + base + '-' + quote)\n    const key_bak = isLRCETH ? 'LRCETH-Pool' : ('AMM-' + quote + '-' + base)\n    return {\n        key,\n        key_bak,\n        isOK: true,\n    }\n}\n\nconst getInfoByKey = (raw_data: any, keyPair: any) => {\n    const {\n        key,\n        key_bak,\n    } = keyPair\n\n    if (raw_data[key]) return raw_data[key]\n    return raw_data[key_bak]\n}\n\nexport const getBalances = (ammpools: any, ammPoolsBalances: any, base: any, quote: any, tokens: any) => {\n\n    const { ammInfo,\n        ammBalance,\n    } = getAmmInfo(ammpools, ammPoolsBalances, base, quote)\n\n    const baseToken = getToken(tokens, base)\n    const quoteToken = getToken(tokens, quote)\n\n    const baseBalance = ammBalance.pooledMap[baseToken.tokenId]\n    const quoteBalance = ammBalance.pooledMap[quoteToken.tokenId]\n\n    return {\n        ammInfo,\n        ammBalance,\n        baseBalance,\n        quoteBalance,\n    }\n\n}\n\nexport const getAmmInfoOnly = (ammpools: any, base: any, quote: any) => {\n\n    const keyPair = getKey(base, quote)\n\n    const ammInfo = getInfoByKey(ammpools, keyPair)\n\n    if (!ammInfo) {\n        throw Error('no ammInfo!')\n    }\n\n    return {\n        ammInfo,\n    }\n\n}\n\nexport const getAmmInfo = (ammpools: any, ammPoolsBalances: any, base: any, quote: any) => {\n\n    const keyPair = getKey(base, quote)\n\n    const ammInfo = getInfoByKey(ammpools, keyPair)\n    const ammBalance = getInfoByKey(ammPoolsBalances, keyPair)\n\n    if (!ammInfo || !ammBalance) {\n        throw Error('no ammInfo! no ammBalance!')\n    }\n\n    const feeBips = parseInt(ammInfo.feeBips)\n\n    return {\n        ammInfo,\n        ammBalance,\n        feeBips,\n    }\n\n}\n\nconst getAmt = (rawAmt: any, tokenInfo: any) => {\n    if (rawAmt === undefined) {\n        rawAmt = 0\n    }\n\n    return fm.toBig(rawAmt).times('1e' + tokenInfo.decimals)\n}\n\nexport const applySlippageTolerance = (\n    tokens: any,\n    token: any,\n    value: any,\n    slippageTolerance: number = 0.01\n) => {\n    const tokenInfo = getToken(tokens, token)\n    const f = 1e7\n    const feeFactor = fm.toBig(f * (1 - slippageTolerance))\n    const amount = fm.toBig(value).times('1e' + tokenInfo.decimals)\n    const outInWei = amount.times(feeFactor).dividedBy(f)\n    const out = fromWEI(tokens, token, outInWei)\n\n    return {\n        outInWei,\n        out,\n    }\n}\n\nexport const applyOrderFee = (tokens: any, token: any, value: any, feeBip: any) => {\n    const tokenInfo = getToken(tokens, token)\n    const feeFactor = fm.toBig(MULTI_FACTOR - feeBip)\n    const amount = fm.toBig(value).times('1e' + tokenInfo.decimals)\n    const appliedAmount = amount.times(feeFactor).dividedBy(MULTI_FACTOR)\n    return appliedAmount\n}\n\nexport function fromWEI(tokens: any, symbol: any, valueInWEI: any, precision?: any, ceil?: any) {\n    try {\n        const tokenInfo = getToken(tokens, symbol)\n        const precisionToFixed = precision ? precision : tokenInfo.precision\n        const value = fm.toBig(valueInWEI).div('1e' + tokenInfo.decimals)\n        return fm.toFixed(value, precisionToFixed, ceil)\n    } catch (error) {\n    }\n    return '0'\n}\n\n\nexport function toWEI(tokens: any, symbol: any, value: any, rm: any = 3) {\n    const tokenInfo = getToken(tokens, symbol)\n    if (typeof tokenInfo === 'undefined') {\n        return '0'\n    }\n\n    return fm.toBig(value)\n        .times('1e' + tokenInfo.decimals)\n        .toFixed(0, rm)\n}\n\nexport const getAmountOut = (amt: any, ammpools: any, ammPoolsBalances: any, tokens: any,\n    base: any, quote: any, takerRate: number, currentPrice: number) => {\n\n    if (amt === undefined) {\n        amt = 0\n    }\n\n    const { ammBalance, feeBips, } = getAmmInfo(ammpools, ammPoolsBalances, base, quote)\n\n    const { tokenInfo: baseTokenInfo, reserve: reserveIn } = getTokenInfoByToken(ammBalance, tokens, base)\n    const { tokenInfo: quoteTokenInfo, reserve: reserveOut } = getTokenInfoByToken(ammBalance, tokens, quote)\n\n    const amountIn = getAmt(amt, baseTokenInfo)\n    const feeBipsFactor = fm.toBig(MULTI_FACTOR - feeBips)\n    const amountInWithFee = amountIn.times(feeBipsFactor)\n    const numerator = amountInWithFee.times(reserveOut)\n    const denominator = reserveIn.times(MULTI_FACTOR).plus(amountInWithFee)\n    const amountOutInWei: any = numerator.dividedBy(denominator)\n\n    let quoteAmt: any = fromWEI(tokens, quote, amountOutInWei)\n\n    const _amount1ApplyOrderFeeInWei = applyOrderFee(tokens, quote, quoteAmt, takerRate + feeBips)\n\n    let _amount1ApplyOrderFee = Number(fromWEI(tokens, quote, _amount1ApplyOrderFeeInWei))\n\n    let priceImpact = 0\n    if (_amount1ApplyOrderFee < 0) {\n        _amount1ApplyOrderFee = 0\n        quoteAmt = null\n    } else {\n        const newPrice = Number(quoteAmt) / Number(amt)\n        priceImpact = (newPrice - currentPrice) / currentPrice\n    }\n\n    return {\n        quoteAmt,\n        _amount1ApplyOrderFeeInWei,\n        _amount1ApplyOrderFee,\n        priceImpact,\n    }\n\n}\n\nexport const getAmountOut_Reverse = (amt: any, ammpools: any, ammPoolsBalances: any, tokens: any,\n    base: any, quote: any, takerRate: number, currentPrice: number) => {\n\n    if (amt === undefined) {\n        amt = 0\n    }\n    \n    const { ammBalance, feeBips, } = getAmmInfo(ammpools, ammPoolsBalances, base, quote)\n\n    const { tokenInfo: baseTokenInfo, reserve: reserveIn } = getTokenInfoByToken(ammBalance, tokens, base)\n    const { tokenInfo: quoteTokenInfo, reserve: reserveOut } = getTokenInfoByToken(ammBalance, tokens, quote)\n\n    const amountOut = getAmt(amt, quoteTokenInfo)\n\n    if (amountOut.gt(reserveOut)) {\n        return {\n            baseAmt: 0,\n            _amount1ApplyOrderFeeInWei: 0,\n            _amount1ApplyOrderFee: 0,\n            priceImpact: 0,\n            hasError: false,\n        }\n    }\n\n    const numerator = amountOut.times(reserveIn).times(MULTI_FACTOR)\n    const feeBipsFactor = fm.toBig(MULTI_FACTOR - feeBips)\n\n    // If amountOut is larger than reserveOut?\n    // It's handled before getAmountOut_reserve\n    const reserveOutSubAmountOut = reserveOut.minus(amountOut)\n\n    const denominator = feeBipsFactor.times(reserveOutSubAmountOut)\n    const amountInInWei = numerator.dividedBy(denominator)\n\n    let baseAmt: any = fromWEI(tokens, quote, amountInInWei)\n\n    const _amount1ApplyOrderFeeInWei = applyOrderFee(tokens, quote, amt, takerRate + feeBips)\n\n    let _amount1ApplyOrderFee = Number(fromWEI(tokens, quote, _amount1ApplyOrderFeeInWei))\n\n    let priceImpact = 0\n    if (_amount1ApplyOrderFee < 0) {\n        _amount1ApplyOrderFee = 0\n        baseAmt = null\n    } else {\n        const newPrice = Number(amt) / Number(baseAmt)\n        priceImpact = (newPrice - currentPrice) / currentPrice\n    }\n\n    return {\n        baseAmt,\n        _amount1ApplyOrderFeeInWei,\n        _amount1ApplyOrderFee,\n        priceImpact,\n        hasError: false,\n    }\n\n}\n\nexport function isEmpty(input: any) {\n    if (!input || input.trim() === '') {\n        return true\n    }\n\n    return false\n}\n\nfunction getAmountOutWithFeeBips(amountIn: string, feeBips: string, reserveIn: string, reserveOut: string ) {\n    const amountInBig = fm.toBig(amountIn)\n    const reserveInBig = fm.toBig(reserveIn)\n    const reserveOutBig = fm.toBig(reserveOut)\n    \n    if (amountInBig.lt(BIG0) || reserveInBig.lt(BIG0) || reserveOutBig.lt(BIG0)) {\n        return BIG0\n    }\n    const feeBipsBig = fm.toBig(feeBips)\n\n    const amountInWithFee = amountInBig.times(BIG10K.minus(feeBipsBig))\n    const numerator = amountInWithFee.times(reserveOutBig)\n    const denominator = reserveInBig.times(BIG10K).plus(amountInWithFee)\n\n    return numerator.div(denominator)\n}\n\nfunction getAmountInWithFeeBips(amountOut: string, feeBips: string, reserveIn: string, reserveOut: string ) {\n    const amountOutBig = fm.toBig(amountOut)\n    const reserveInBig = fm.toBig(reserveIn)\n    const reserveOutBig = fm.toBig(reserveOut)\n    \n    if (amountOutBig.lt(BIG0) || reserveInBig.lt(BIG0) || reserveOutBig.lt(BIG0)) {\n        return BIG0\n    }\n    const feeBipsBig = fm.toBig(feeBips)\n\n    const numerator = reserveInBig.times(amountOutBig).times(BIG10K)\n    const denominator = reserveOutBig.times(amountOutBig).times(BIG10K.minus(feeBipsBig))\n\n    return numerator.div(denominator).plus(BIG1)\n}\n\nfunction getOutputOrderbook(input: string, feeBips: string, isAtoB: boolean) {\n    let output: string  = \"0\"\n    let remain: string  = input\n}\n\nexport function getOutputAmount(base: string, quote: string, market: string, \n    input: string, isAtoB: boolean, feeBips: string, \n    tokenMap: LoopringMap<TokenInfo>, marketMap: LoopringMap<MarketInfo>, depth: DepthData) {\n\n    if (isEmpty(input) || isEmpty(feeBips) || !(market in Object.keys(marketMap))) {\n        return undefined\n    }\n\n    const { base: baseRaw, quote: quoteRaw } = getBaseQuote(market)\n\n    const marketInfo: MarketInfo = marketMap[market]\n\n    const isSwapEnabled = marketInfo.status === MarketStatus.ALL || marketInfo.status === MarketStatus.AMM\n\n    input = input.trim()\n\n    let exceedDepth = false\n\n    const reserveIn = ''\n    const reserveOut = ''\n\n    if (isAtoB) {\n\n        // bids_amtTotal -> bidsSizeShown\n        // asks_volTotal -> asksQuoteSizeShown\n        const amountInWei = toWEI(tokenMap, base, input)\n\n        if (isEmpty(depth.bids_amtTotal) || isEmpty(depth.asks_volTotal)) {\n            exceedDepth = true\n        } else {\n\n            if (base === baseRaw) {\n                exceedDepth = fm.toBig(amountInWei).lt(fm.toBig(depth.bids_amtTotal))\n            } else {\n                exceedDepth = fm.toBig(amountInWei).lt(fm.toBig(depth.asks_volTotal))\n            }\n\n        }\n\n        let amountB = new BigNumber(0)\n\n        if (exceedDepth) {\n            if (isSwapEnabled) {\n                amountB = getAmountOutWithFeeBips(amountInWei, feeBips, reserveIn, reserveOut)\n            }\n        } else {\n            amountB = fm.toBig(toWEI(tokenMap, base, getOutputOrderbook(input, feeBips, isAtoB)))\n        }\n\n        return fromWEI(tokenMap, quote, amountB)\n\n    } else {\n\n        // asks_amtTotal -> asksSizeShown\n        // bids_volTotal -> bidsQuoteSizeShown\n\n        if (isEmpty(depth.bids_volTotal) || isEmpty(depth.asks_amtTotal)) {\n            exceedDepth = true\n        } else {\n            const amountInWei = toWEI(tokenMap, quote, input)\n\n            if (base === baseRaw) {\n                exceedDepth = fm.toBig(amountInWei).gt(fm.toBig(depth.bids_volTotal))\n            } else {\n                exceedDepth = fm.toBig(amountInWei).gt(fm.toBig(depth.asks_amtTotal))\n            }\n\n        }\n\n        let amountSBint = BIG0\n\n        const amountB: string = toWEI(tokenMap, quote, input)\n\n        if (exceedDepth) {\n            if (isSwapEnabled) {\n                amountSBint = getAmountInWithFeeBips(amountB, feeBips, reserveIn, reserveOut)\n            }\n        } else {\n            amountSBint = fm.toBig(toWEI(tokenMap, base, getOutputOrderbook(input, feeBips, isAtoB)))\n        }\n\n        if (amountSBint.gt(BIG0)) {\n            return fromWEI(tokenMap, base, amountSBint)\n        }\n\n        return '0'\n\n    }\n\n}\n","import { useDispatch, useSelector } from 'react-redux'\nimport { tickerMapSlice } from './reducer';\nimport { TickerStates } from './interface';\nimport { CoinKey } from '@loopring-web/component-lib/src/static-resource';\n\nexport function useTicker(): TickerStates & {\n    updateTickers:(tickerKeys:Array<CoinKey<any>>)=>void,\n    updateTicker:(tickerKey:CoinKey<any>)=>void,\n    statusUnset:()=>void,\n} {\n    const tickerMap:TickerStates = useSelector((state: any) => state.tickerMap)\n    const dispatch = useDispatch();\n    const updateTicker = (tickerKey:CoinKey<any>) => {\n        dispatch(tickerMapSlice.actions.getTicker({tickerKey}))\n    }\n    const updateTickers = (tickerKeys:Array<CoinKey<any>>) => {\n        dispatch(tickerMapSlice.actions.getTickers({tickerKeys}))\n    }\n    const statusUnset = ()=>{\n        dispatch(tickerMapSlice.actions.statusUnset(undefined))\n    }\n    return {\n        ...tickerMap,\n        statusUnset,\n        updateTickers,\n        updateTicker,\n    }\n\n}\n","import { useDispatch, useSelector } from 'react-redux'\nimport { AmmActivityMapStates } from './interface';\nimport { ammActivityMapSlice } from './reducer';\n\nexport function useAmmActivityMap(): AmmActivityMapStates & {\n    updateAmmActivityMap:()=> void,\n    statusUnset:()=> void,\n} {\n    const ammActivityMap:AmmActivityMapStates = useSelector((state: any) => state.amm.ammActivityMap)\n    const dispatch = useDispatch();\n    const updateAmmActivityMap = () => {\n        dispatch(ammActivityMapSlice.actions.getAmmActivityMap(undefined))\n    }\n    const statusUnset = ()=>{\n        dispatch(ammActivityMapSlice.actions.statusUnset(undefined))\n    }\n    return {\n        ...ammActivityMap,\n        statusUnset,\n        updateAmmActivityMap\n    }\n\n}\n","import { useDispatch, useSelector } from 'react-redux'\nimport { StateBase } from '../interface';\nimport { socketSlice } from './reducer';\nimport { SocketMap } from './interface';\n\nexport function useSocket(): StateBase & {\n    // socketStart:()=>void,\n    statusUnset: () => void,\n    sendSocketTopic: (socket: SocketMap) => void,\n    socketEnd: () => void\n} {\n    const socket: StateBase & { socket: SocketMap } = useSelector((state: any) => state.socket)\n    const dispatch = useDispatch();\n    // const socketStart = () => {\n    //     dispatch(socketSlice.actions.socketStart(undefined))\n    // }\n    const sendSocketTopic = (socket: SocketMap) => {\n        dispatch(socketSlice.actions.sendSocketTopic({socket}))\n    }\n    const socketEnd = () => {\n        dispatch(socketSlice.actions.socketEnd(undefined))\n    }\n    const statusUnset = () => {\n        dispatch(socketSlice.actions.statusUnset(undefined))\n    }\n    return {\n        ...socket,\n        statusUnset,\n        // socketStart,\n        sendSocketTopic,\n        socketEnd,\n    }\n\n}\n","export enum AccountStatus {\n    UNKNOWN = 'UNKNOWN',\n    UNCONNNECTED = 'UNCONNNECTED',\n    CONNECTED = 'CONNECTED',\n    NOACCOUNT = 'NOACCOUNT',\n    DEPOSITING = 'DEPOSITING',\n    DEPOSIT_TO_CONFIREM = 'DEPOSIT_TO_CONFIREM',\n    UNACTIVATED = 'UNACTIVATED',\n    ARPROVING = 'ARPROVING',\n    APPROV_TO_CONFIRM = 'APPROV_TO_CONFIRM',\n    LOCKED = 'LOCKED',\n    ACTIVATED = 'ACTIVATED',\n}\n\nexport enum StatusChangeEvent {\n    Reset = 'Reset',\n    Connecting = 'Connecting',\n    HasPubkey = 'HasPubkey',\n    HasNoPubkey = 'HasNoPubkey',\n    ErrorResponse = 'ErrorResponse',\n    FinishDeposit = 'FinishDeposit',\n    DepositConfirmed = 'DepositConfirmed',\n    IsSmartWallet = 'IsSmartWallet',\n    ApproveSubmit = 'ApproveSubmit',\n    ApproveConfirmed = 'ApproveConfirmed',\n    Unlock = 'Unlock',\n    Lock = 'Lock',\n}\n\nexport const AccountMachineSpec = (initialState: AccountStatus = AccountStatus.UNCONNNECTED) => \n{\n    return {\n        initialState: initialState,\n        states: {\n            UNCONNNECTED: {\n                Connecting: AccountStatus.CONNECTED,\n                Reset: AccountStatus.UNCONNNECTED,\n            },\n            CONNECTED: {\n                HasPubkey: AccountStatus.LOCKED,\n                HasNoPubkey: AccountStatus.UNACTIVATED,\n                ErrorResponse: AccountStatus.NOACCOUNT,\n                Reset: AccountStatus.UNCONNNECTED,\n            },\n            NOACCOUNT: {\n                ErrorResponse: AccountStatus.NOACCOUNT,\n                Reset: AccountStatus.UNCONNNECTED,\n            },\n            DEPOSITING: {\n                FinishDeposit: AccountStatus.DEPOSIT_TO_CONFIREM,\n                Reset: AccountStatus.UNCONNNECTED,\n            },\n            DEPOSIT_TO_CONFIREM: {\n                HasPubkey: AccountStatus.ACTIVATED,\n                HasNoPubkey: AccountStatus.DEPOSIT_TO_CONFIREM,\n                ErrorResponse: AccountStatus.DEPOSIT_TO_CONFIREM,\n                Reset: AccountStatus.UNCONNNECTED,\n            },\n            UNACTIVATED: {\n                IsSmartWallet: AccountStatus.ARPROVING,\n                Reset: AccountStatus.UNCONNNECTED,\n            },\n            ARPROVING: {\n                ApproveSubmit: AccountStatus.APPROV_TO_CONFIRM,\n                Reset: AccountStatus.UNCONNNECTED,\n            },\n            APPROV_TO_CONFIRM: {\n                ApproveConfirmed: AccountStatus.ACTIVATED,\n                Reset: AccountStatus.UNCONNNECTED,\n            },\n            LOCKED: {\n                Unlock: AccountStatus.ACTIVATED,\n                Reset: AccountStatus.UNCONNNECTED,\n            },\n            ACTIVATED: {\n                Lock: AccountStatus.LOCKED,\n                Reset: AccountStatus.UNCONNNECTED,\n            },\n        },\n    }\n}\n","import { AmmPanelType } from '@loopring-web/component-lib';\nimport { AmmDetailBase } from '@loopring-web/component-lib/src/static-resource';\nimport {  volumeToCountAsBigNumber } from './volumeToCount';\n\nexport const ammPairInit = ({pair, _ammCalcData,ammType,tokenMap, coinMap, walletMap,ammMap ,tickerData,ammPoolsBalance}:any)=>{\n    _ammCalcData.coinInfoMap = coinMap;\n    if(tickerData){\n        \n        _ammCalcData.AtoB =  Number(tickerData.close)\n    }\n    if(isNaN(_ammCalcData.AtoB) && ammPoolsBalance){\n        const baseVol = volumeToCountAsBigNumber(pair.coinAInfo.simpleName,ammPoolsBalance.pooled[0].volume);\n        const quoteVol = volumeToCountAsBigNumber(pair.coinBInfo.simpleName,ammPoolsBalance.pooled[1].volume);\n        _ammCalcData.AtoB = quoteVol && baseVol && quoteVol.div(baseVol).toNumber();\n\n    }\n    if(pair.coinAInfo){\n        if(ammType === AmmPanelType.Deposit ) {\n            _ammCalcData.myCoinA = {\n                belong: pair.coinAInfo.simpleName,\n                balance: walletMap ? walletMap[ pair.coinAInfo.simpleName ]?.count : 0,\n            }\n            _ammCalcData.myCoinB = {\n                belong: pair.coinBInfo.simpleName,\n                balance: walletMap ? walletMap[ pair.coinBInfo.simpleName ]?.count : 0,\n            }\n        }else {\n            const key = `${pair.coinAInfo.simpleName}-${pair.coinBInfo.simpleName}`;\n            let coinACount = 0,coinBCount = 0 ;\n            if(walletMap){\n                const  balance =  walletMap ? walletMap[ 'LP-' + key ]?.count : 0;\n                const {totalLPToken,totalA,totalB}:AmmDetailBase<any> = ammMap[ 'AMM-' + key ];\n                if(totalA && totalLPToken &&totalB) {\n                    coinACount = totalA / totalLPToken * balance;\n                    coinBCount = totalB / totalLPToken * balance;\n                }\n            }\n            _ammCalcData.myCoinA = {\n                belong: pair.coinAInfo.simpleName,\n                balance: coinACount,\n            }\n            _ammCalcData.myCoinB = {\n                belong: pair.coinBInfo.simpleName,\n                balance: coinBCount,\n            }\n        }\n    }\n\n\n    return  _ammCalcData\n}\n","export function coinPairInit({coinKey, _tradeCalcData, tokenMap, coinMap}: any) {\n    if (coinKey) {\n        const [_match, sell, buy] = coinKey.match(/(\\w+)-(\\w+)/i);\n        // @ts-ignore\n        if (sell && coinMap && coinMap[ sell ]) {\n            _tradeCalcData.coinSell = sell;\n        }// @ts-ignore\n        if (sell!==buy && buy && -1 !== tokenMap[ sell ].tradePairs.findIndex(ele => ele === buy)) {\n            _tradeCalcData.coinBuy = buy;\n            return _tradeCalcData\n        }\n        // else{\n        //     _tradeCalcData.coinBuy = tokenMap[ sell ].tradePairs[ 0 ];\n        // }\n    }\n    if (!_tradeCalcData.coinSell || _tradeCalcData.coinSell === '') {\n        _tradeCalcData.coinSell = 'LRC';\n        _tradeCalcData.coinBuy = 'ETH';\n        return _tradeCalcData\n    }\n    if (!_tradeCalcData.coinBuy || _tradeCalcData.coinBuy === '' || _tradeCalcData.coinBuy === 'undefined') {\n        // @ts-ignore\n        if (tokenMap && tokenMap[ _tradeCalcData.coinSell ].tradePairs) {\n            _tradeCalcData.coinBuy = tokenMap[ _tradeCalcData.coinSell ].tradePairs[ 0 ]\n        } else {\n            _tradeCalcData.coinSell = 'LRC';\n            _tradeCalcData.coinBuy = 'ETH';\n        }\n    }\n    return _tradeCalcData\n}","import store from '../../stores';\nimport { AccountStatus } from '../../state_machine/account_machine_spec';\nimport { setShowAccountInfo, setShowConnect, setShowDeposit } from '@loopring-web/component-lib';\nimport React from 'react';\n\nexport enum fnType {\n    UNKNOWN,\n    UNCONNNECTED,\n    CONNECTED,\n    NOACCOUNT,\n    DEPOSITING,\n    DEPOSIT_TO_CONFIREM,\n    UNACTIVATED,\n    ARPROVING,\n    APPROV_TO_CONFIRM,\n    LOCKED,\n    ACTIVATED,\n    DEFAULT\n}\nexport const accountStaticCallBack = (props: { [key: number ]:[ fn: (props: any) => any, args?: object] }) => {\n    const {status} = store.getState().account\n    let fn, args;\n    switch (status) {\n        case AccountStatus.UNKNOWN:\n            [fn, args] = props[ fnType.UNKNOWN ]?props[ fnType.UNKNOWN ]:[];\n            if (typeof fn === 'function') {\n                return fn.call(this, args);\n            }\n            return\n        case AccountStatus.UNCONNNECTED:\n            [fn, args] = props[ fnType.UNCONNNECTED ]?props[ fnType.UNCONNNECTED ]:[];\n            if (typeof fn === 'function') {\n                return fn.call(this, args);\n            }\n            break;\n        case AccountStatus.CONNECTED:\n            [fn, args] = props[ fnType.CONNECTED ]?props[ fnType.CONNECTED ]:[];\n            if (typeof fn === 'function') {\n                return fn.call(this, args);\n            }\n            break;\n        case AccountStatus.NOACCOUNT:\n            [fn, args] = props[ fnType.NOACCOUNT ]?props[ fnType.NOACCOUNT ]:[];\n            if (typeof fn === 'function') {\n                return fn.call(this, args);\n            }\n            break;\n        case AccountStatus.DEPOSITING:\n            [fn, args] = props[ fnType.DEPOSITING ]?props[ fnType.DEPOSITING ]:[];\n            if (typeof fn === 'function') {\n                return fn.call(this, args);\n            }\n            break;\n        case AccountStatus.DEPOSIT_TO_CONFIREM:\n            [fn, args] = props[ fnType.DEPOSIT_TO_CONFIREM ]?props[ fnType.DEPOSIT_TO_CONFIREM ]:[];\n            if (typeof fn === 'function') {\n                return fn.call(this, args);\n            }\n            break;\n        case AccountStatus.UNACTIVATED:\n            [fn, args] = props[ fnType.UNACTIVATED ]?props[ fnType.UNACTIVATED ]:[];\n            if (typeof fn === 'function') {\n                return fn.call(this, args);\n            }\n            break;\n        case AccountStatus.ARPROVING:\n            [fn, args] = props[ fnType.ARPROVING ]?props[ fnType.ARPROVING ]:[];\n            if (typeof fn === 'function') {\n                return fn.call(this, args);\n            }\n            break;\n        case AccountStatus.APPROV_TO_CONFIRM:\n            [fn, args] = props[ fnType.APPROV_TO_CONFIRM ]?props[ fnType.APPROV_TO_CONFIRM ]:[];\n            if (typeof fn === 'function') {\n                return fn.call(this, args);\n            }\n            break;\n        case AccountStatus.LOCKED:\n            [fn, args] = props[ fnType.LOCKED ]?props[ fnType.LOCKED ]:[];\n            if (typeof fn === 'function') {\n                return fn.call(this, args);\n            }\n            break;\n        case AccountStatus.ACTIVATED:\n            [fn, args] = props[ fnType.ACTIVATED ]?props[ fnType.ACTIVATED ]:[];\n            if (typeof fn === 'function') {\n                return fn.call(this, args);\n            }\n            break;\n        default:\n            break;\n\n    }\n    [fn, args] = props[ fnType.DEFAULT ]?props[ fnType.DEFAULT ]:[];\n    if (typeof fn === 'function') {\n        return fn.call(this, args);\n    }\n}\n\n\nexport const bntLabel: { [ key: number ]: [fn: (props: any) => any, args?: object] } = {\n    [ fnType.UNCONNNECTED ]: [\n        function () {\n            return `labelConnectWallet`\n        }\n    ]\n    , [ fnType.DEFAULT ]: [\n        function () {\n            return `depositTitleAndActive`\n        }\n    ]\n    , [ fnType.ACTIVATED ]: [\n        function () {\n            return undefined\n        }\n    ]\n    , [ fnType.LOCKED ]: [\n        function () {\n            return `labelUnLockLayer2`\n        }\n    ]\n};\n\n\nexport const btnClickArray: { [ key: number ]: [fn: (props: any) => any, args?: object] } = {\n    [ fnType.UNCONNNECTED ]: [\n        function () {\n            // setShowConnect({isShow: true})\n            store.dispatch(setShowConnect({isShow: true}))\n        }\n    ]\n    , [ fnType.DEFAULT ]: [\n        function () {\n            store.dispatch(setShowDeposit({isShow: true}))\n            // ShowDeposit(true)\n        }\n    ]\n\n    , [ fnType.LOCKED ]: [\n        function () {\n            store.dispatch(setShowAccountInfo({isShow: true}))\n        }\n    ]\n};\n\n\n","import store from '../../stores';\nimport { setSlippage } from '@loopring-web/component-lib';\n\ntype Cache = {\n    customSlippage?:number\n}\nexport  const makeCache  = (__cache__:Cache)=>{\n   if(typeof  __cache__.customSlippage !== undefined){\n       store.dispatch(setSlippage(__cache__.customSlippage as number))\n      // store.getState().settings\n   }\n}","import { AmmDetailStore } from '../../stores/Amm/AmmMap';\nimport { AmmPoolSnapshot } from 'loopring-sdk';\nimport { makeMyAmmWithSnapshot, makeMyAmmWithStat } from './makeUIAmmActivityMap';\nimport { AmmUserRewardMap } from 'loopring-sdk/dist/defs/loopring_defs';\nimport { WalletMapExtend } from './makeWallet';\n\nexport const makeMyPoolRowWithSnapShot = <T extends { [ key: string ]: any }>({market,ammSnapShot,walletMap,ammUserRewardMap}: {\n    market:string\n    ammSnapShot: AmmPoolSnapshot,\n    walletMap: WalletMapExtend<T>\n    ammUserRewardMap:AmmUserRewardMap|undefined\n}) => {\n\n    return makeMyAmmWithSnapshot(market,walletMap, ammUserRewardMap, {\n        ammPoolsBalance: ammSnapShot\n    })\n}\n\n                                                                        \nexport const makeMyPoolRowWithPoolState = <T extends { [ key: string ]: any }>({market,ammDetail,walletMap,ammUserRewardMap}: {\n    market:string\n    ammDetail: AmmDetailStore<T>,\n    walletMap: WalletMapExtend<T>\n    ammUserRewardMap:AmmUserRewardMap|undefined\n}) => {\n    if(walletMap && ammDetail){\n        return makeMyAmmWithStat (market,walletMap, ammUserRewardMap, ammDetail)\n    }\n    return undefined\n}","import { TickerData } from 'loopring-sdk';\nimport store from '../../stores';\nimport { FloatTag,TradeFloat } from '@loopring-web/component-lib/src/static-resource';\nimport { volumeToCountAsBigNumber } from './volumeToCount';\nimport { Ticker, TickerMap } from '../../stores/ticker';\nimport { LoopringMap } from 'loopring-sdk/dist/defs/loopring_defs';\n\nexport const makeTickView = (tick: TickerData) => {\n    // const {forex} = store.getState().system;\n\n    const price = !isNaN(tick.close) ? tick.close : 0\n\n    const floatTag = (isNaN(tick.close) || isNaN(tick.open))  || tick.open === tick.close ? FloatTag.none : \n        tick.close > tick.open ? FloatTag.increase : FloatTag.decrease\n\n    let _tradeFloat: Partial<TradeFloat> = {\n        change: (tick.close - tick.open) / tick.open,\n        timeUnit: '24h',\n        priceYuan: price,\n        priceDollar: price,\n        floatTag,\n        reward: 0,\n        // APY: 0,\n    }\n\n    return _tradeFloat;\n}\nexport  const makeTickerMap =  <R extends {[key:string]:any}>({tickerMap}:{tickerMap:LoopringMap<TickerData>}):TickerMap<{[key:string]:any}>=>{\n    const {faitPrices, forex} = store.getState().system;\n    return Reflect.ownKeys(tickerMap).reduce((prev, key) => {\n        const item: TickerData = tickerMap[ key as any ];\n        if (item && item.base && forex && faitPrices && (faitPrices[ item.base ] || faitPrices[ 'USDT' ])) {\n            const volume = volumeToCountAsBigNumber(item.base, item.base_token_volume);\n            //FIX: DIE is not in faitPrices\n            const priceDollar = volume?.times(faitPrices[ item.base ] ? faitPrices[ item.base ].price : faitPrices[ 'USDT' ].price);\n            const priceYuan = priceDollar?.times(forex);\n            const change = item.change && item.change !== 0 ? item.change * 100 : undefined;\n\n            prev[ key as keyof R] = {\n                // ...item,\n                timeUnit: '24h',\n                priceDollar: priceDollar?.toNumber() === 0 ? undefined : priceDollar?.toNumber(),\n                priceYuan: priceYuan?.toNumber() === 0 ? undefined : priceYuan?.toNumber(),\n                volume: volume?.toNumber() === 0 ? undefined : volume?.toNumber(),\n                floatTag: item.close > item.open ? 'increase' : 'decrease',\n                change: change,\n                close: isNaN(item.close) ? undefined : item.close,\n                high: item.high === 0 ? undefined : item.high,\n                low: item.low === 0 ? undefined : item.high,\n                // APY: 0,\n                reward: 0,\n                rewardToken: '',\n                __rawTicker__: item,\n            } as Ticker;\n        }\n        return prev\n    }, {} as TickerMap<R>)\n}\n","import { AmmMap } from '../../stores/Amm/AmmMap';\nimport { AmmPoolSnapshot, getBaseQuote, LoopringMap, TickerData, TokenInfo, TokenVolumeV3 } from 'loopring-sdk';\nimport { LoopringAPI } from '../../stores/apis/api';\nimport * as fm from 'loopring-sdk';\nimport { BIG10 } from '../../defs/swap_defs';\nimport { getToken } from 'utils/swap_calc_utils';\nimport { CoinMap, CustomError, ErrorMap } from '@loopring-web/component-lib/src/static-resource';\nimport { volumeToCountAsBigNumber } from './volumeToCount';\n\nexport const pairDetailBlock = <C extends { [ key: string ]: any }, I extends { [ key: string ]: any }>({\n                                                                                                           coinKey,\n                                                                                                           ammKey,\n                                                                                                           ammMap\n                                                                                                       }: { coinKey: string, ammKey: string, ammMap: AmmMap<C, I> }):\n    Promise<{\n        ammPoolsBalance: AmmPoolSnapshot,\n        tickMap:  LoopringMap<TickerData>\n}> => {\n    // const exchangeApi = exchangeAPI();\n    // const ammpoolApi = ammpoolAPI();\n    return new Promise((resolve, reject) => {\n        if(LoopringAPI.ammpoolAPI && LoopringAPI.exchangeAPI ) {\n            Promise.all([\n                LoopringAPI.ammpoolAPI.getAmmPoolSnapshot({poolAddress: ammMap[ ammKey ].address}),\n                LoopringAPI.exchangeAPI.getMixTicker({market: coinKey})])\n                // exchangeApi.getMarketTrades({market:coinKey})])\n                //{raw_data},\n                .then(([{ammPoolSnapshot}, {tickMap}]) => {\n                    resolve({\n                        ammPoolsBalance: ammPoolSnapshot,\n                        tickMap,\n                    })\n                })\n\n        }else{\n            reject(new CustomError(ErrorMap.NO_SDK))\n        }\n       \n    })\n}\n\nexport const pairDetailDone = <C>({coinKey, market,ammPoolsBalance, tokenMap,tickerData, _tradeCalcData, coinMap, marketCoins}:any)=>{\n\n    const [, coinSell, coinbuy] = coinKey.match(/(\\w+)-(\\w+)/i)\n    let stob:number|undefined;\n    if (tickerData.base === coinSell) {\n        // const ticker: TickerData = tickMap[market]\n        stob = Number(tickerData.close)\n\n    } else{\n        // const ticker: TickerData = tickMap[market]\n        stob = Number(tickerData.close)!==0? 1/Number(tickerData.close): 0\n    }\n    if(isNaN(stob) && ammPoolsBalance){\n        const {base, quote} = getBaseQuote(coinKey)\n\n        // const baseToken: TokenInfo = getToken(tokenMap, base)\n        // const quoteToken: TokenInfo = getToken(tokenMap, quote)\n        // const baseVol = (fm.toBig(poolBaseTokenVol.volume).div(BIG10.pow(baseToken.decimals)))\n        // const quoteVol = (fm.toBig(quoteBaseTokenVol.volume).div(BIG10.pow(quoteToken.decimals)))\n        //\n        // stob = volumeToCountAsBigNumber(base,poolBaseTokenVol.volume)?.div(\n        //     volumeToCountAsBigNumber(quote,quoteBaseTokenVol.volume) || 1\n        // ) .toNumber()\n        // console.log('1', base, poolBaseTokenVol, quote, quoteBaseTokenVol)\n        //baseToken.tokenId === quoteBaseTokenVol.tokenId && quoteToken.tokenId === poolBaseTokenVol.tokenId) {\n        // const quoteVol = (fm.toBig(quoteBaseTokenVol.volume).div(BIG10.pow(baseToken.decimals)))\n        // const baseVol = (fm.toBig(poolBaseTokenVol.volume).div(BIG10.pow(quoteToken.decimals)))\n        //baseVol.div(quoteVol).toNumber()\n        // console.log('2', base, poolBaseTokenVol, quote, quoteBaseTokenVol)\n        //ErrorMap.NOTS\n        const poolBaseTokenVol: TokenVolumeV3 = ammPoolsBalance.pooled[0];\n        const quoteBaseTokenVol: TokenVolumeV3 = ammPoolsBalance.pooled[1];\n        let poolVolumn:[baseVol:any, quoteVol:any];\n        if ( base && quote && tokenMap[base].tokenId === poolBaseTokenVol.tokenId ) {\n            poolVolumn =  [[base,poolBaseTokenVol.volume],[quote,quoteBaseTokenVol.volume]]\n        } else if (base && quote && tokenMap[base].tokenId === quoteBaseTokenVol.tokenId){\n            poolVolumn =  [[quote,quoteBaseTokenVol.volume],[base,poolBaseTokenVol.volume]]\n        } else {\n            throw new CustomError(ErrorMap.NO_SUPPORT_PAIR)\n        }\n        let [baseVol,quoteVol]  = poolVolumn\n        if(baseVol && quoteVol){\n            // stob = volumeToCountAsBigNumber(baseVol[0],baseVol[1])?.div(\n            //     volumeToCountAsBigNumber(quoteVol[0],quoteVol[1]) || 1\n            // ) .toNumber()\n            stob = volumeToCountAsBigNumber(quoteVol[0],quoteVol[1])?.div(\n                volumeToCountAsBigNumber(baseVol[0],baseVol[1]) || 1).toNumber()\n        }\n    }\n\n    _tradeCalcData.StoB = stob;\n    _tradeCalcData.BtoS = stob !== 0 && stob !== undefined? 1 / (stob * 1.0): 0;\n    _tradeCalcData.sellCoinInfoMap = coinMap && marketCoins?.reduce((prev: any, item: string | number) => {\n        return {...prev, [ item ]: coinMap[ item ]}\n    }, {} as CoinMap<C>)\n    _tradeCalcData.buyCoinInfoMap = coinMap && tokenMap && tokenMap[ _tradeCalcData.coinSell as string ].tradePairs?.reduce((prev: any, item: string | number) => {\n        return {...prev, [ item ]: coinMap[ item ]}\n    }, {} as CoinMap<C>);\n\n    return {\n        _tradeCalcData\n    }\n    //setPair();\n}","import store from '../../stores';\nimport { WalletMap,WalletCoin,CoinKey } from '@loopring-web/component-lib/static-resource';\nimport * as fm from 'loopring-sdk';\nimport { fromWEI } from '../../utils/swap_calc_utils';\nimport { UserBalanceInfo } from 'loopring-sdk';\nexport type WalletMapExtend<C> =    {\n    [K in CoinKey<C>]?: WalletCoin<C> & {\n    detail:UserBalanceInfo\n}\n}\n\n\n// export const makeWalletLayer1 = <C extends { [ key: string ]: any }>():{ walletMap: WalletMapExtend<C> | undefined } => {\n//     const {walletLayer1} = store.getState().walletLayer1;\n//     const {tokenMap} = store.getState().tokenMap;\n//     let walletMap: WalletMapExtend<C> | undefined;\n//     if (walletLayer1) {\n//         walletMap = Reflect.ownKeys(walletLayer1).reduce((prev, item) => {\n//             const {total, locked, pending: {withdraw}} = walletLayer1[ item as string ];\n//             const countBig = fm.toBig(total).minus(fm.toBig(locked)).minus(fm.toBig(withdraw)).toString()\n//             return {\n//                 ...prev, [ item ]: {\n//                     belong: item,\n//                     count: fromWEI(tokenMap, item, countBig),\n//                     detail: walletLayer1[ item as string ]\n//                 }\n//             }\n//         }, {} as  WalletMapExtend<C> )\n//     }\n//\n//     return {walletMap}\n// }\n\nexport const makeWallet = <C extends { [ key: string ]: any }>():{ walletMap: WalletMapExtend<C> | undefined } => {\n    const {walletLayer2} = store.getState().walletLayer2;\n    const {tokenMap} = store.getState().tokenMap;\n    let walletMap: WalletMapExtend<C> | undefined;\n    if (walletLayer2) {\n        walletMap = Reflect.ownKeys(walletLayer2).reduce((prev, item) => {\n            const {total, locked, pending: {withdraw}} = walletLayer2[ item as string ];\n            const countBig = fm.toBig(total).minus(fm.toBig(locked)).minus(fm.toBig(withdraw)).toString()\n            return {\n                ...prev, [ item ]: {\n                    belong: item,\n                    count: fromWEI(tokenMap, item, countBig),\n                    detail: walletLayer2[ item as string ]\n                }\n            }\n        }, {} as  WalletMapExtend<C> )\n    }\n\n    return {walletMap}\n}","import { createAction } from '@reduxjs/toolkit'\n\n// fired once when the app reloads but before the app renders\n// allows any updates to be applied to store data loaded from localStorage\nexport const updateVersion = createAction<void>('global/updateVersion')\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit'\n\nconst now = () => new Date().getTime()\n\nexport interface SerializableTransactionReceipt {\n  to: string\n  from: string\n  contractAddress: string\n  transactionIndex: number\n  blockHash: string\n  transactionHash: string\n  blockNumber: number\n  status?: number\n}\n\nexport interface TransactionDetails {\n  hash: string\n  approval?: { tokenAddress: string; spender: string }\n  summary?: string\n  claim?: { recipient: string }\n  receipt?: SerializableTransactionReceipt\n  lastCheckedBlockNumber?: number\n  addedTime: number\n  confirmedTime?: number\n  from: string\n}\n\nexport interface TransactionState {\n  [chainId: number]: {\n    [txHash: string]: TransactionDetails\n  }\n}\n\nexport const initialState: TransactionState = {}\n\nconst transactionsSlice = createSlice({\n  name: 'transactions',\n  initialState,\n  reducers: {\n    reset(state) {\n      Object.assign(state, initialState)\n    },\n    addTransaction(state: TransactionState, action: PayloadAction<{\n      chainId: number, from: string,\n      hash: string, approval: any, summary: string, claim: any\n    }>) {\n      const { chainId, from, hash, approval, summary, claim} = action.payload\n      if (state[chainId]?.[hash]) {\n        throw Error('the existing TX can\\'t be added again')\n      }\n\n      const txs = state[chainId] ?? {}\n      txs[hash] = {\n        hash, \n        approval, \n        summary, \n        claim, \n        from,\n        addedTime: now(), \n      }\n      // state[chainId] = txs\n    },\n    clearAllTransactions(state: TransactionState, action: PayloadAction<number>) {\n      const chainId = action.payload\n      if (!state[chainId]) return\n      state[chainId] = {}\n    },\n    checkedTransaction(state: TransactionState, action: PayloadAction<{chainId: number,\n    hash: string, blockNumber: number}>) {\n      const { chainId, hash, blockNumber} = action.payload\n      const tx = state[chainId]?.[hash]\n      if (!tx) {\n        return\n      }\n      if (!tx.lastCheckedBlockNumber) {\n        tx.lastCheckedBlockNumber = blockNumber\n      } else {\n        tx.lastCheckedBlockNumber = Math.max(blockNumber, tx.lastCheckedBlockNumber)\n      }\n      // state[chainId][hash] = tx\n    },\n    finalizeTransaction(state: TransactionState, action: PayloadAction<{\n      hash: string, chainId: number, receipt: any\n    }>) {\n      const { chainId, hash, receipt } = action.payload\n      \n      const tx = state[chainId]?.[hash]\n      if (!tx) {\n        return\n      }\n      tx.receipt = receipt\n      tx.confirmedTime = now()\n    }\n  }\n}\n)\n\nexport const { reset, addTransaction, clearAllTransactions, checkedTransaction, finalizeTransaction, } = transactionsSlice.actions\nexport default transactionsSlice\n","import { createSlice, PayloadAction, Slice } from '@reduxjs/toolkit'\nimport {  AmmTradesStates } from './interface';\nimport { STATUS } from '../../constant';\n\n\nconst initialState:Required<AmmTradesStates>  = {\n    ammTrades:[],\n    status:'UNSET',\n    errorMessage:null,\n}\nconst ammTradesSlice:Slice = createSlice({\n    name: 'ammTrades',\n    initialState,\n    reducers: {\n        getAmmTrades(state, action:PayloadAction<string | undefined>) {\n            state.status = STATUS.PENDING\n        },\n        getAmmTradesStatus(state, action: PayloadAction<AmmTradesStates>) {\n            // @ts-ignore\n            if (action.error) {\n                state.status =  STATUS.ERROR\n                // @ts-ignore\n                state.errorMessage = action.error\n            }\n            state.ammTrades = {...action.payload.ammTrades};\n            state.status = STATUS.DONE\n        },\n        statusUnset: state => {\n            state.status = STATUS.UNSET\n        }\n    },\n});\nexport { ammTradesSlice };\nexport const { getAmmTrades, getAmmTradesStatus, statusUnset } = ammTradesSlice.actions\n","import { all, takeLatest, call, put } from \"redux-saga/effects\"\nimport { getAmmActivityMap, getAmmActivityMapStatus } from './reducer'\nimport { LoopringAPI } from '../../apis/api';\nconst getAmmActivityMapApi = async () => {\n\n    if(LoopringAPI.ammpoolAPI){\n        const { groupByRuleTypeAndStatus } =  await LoopringAPI.ammpoolAPI.getAmmPoolActivityRules();\n        return  {data:groupByRuleTypeAndStatus}\n    }else{\n        return {data:undefined}\n    }\n\n}\n\nexport function* getPostsSaga() {\n    try {\n        //\n        const { data } = yield call(getAmmActivityMapApi);\n        yield put(getAmmActivityMapStatus({ammActivityMap:data}));\n    } catch (err) {\n        yield put(getAmmActivityMapStatus(err));\n    }\n}\n\nexport default function* ammActivityMapSaga() {\n    yield all([takeLatest(getAmmActivityMap, getPostsSaga)]);\n}\n","import { all, call, fork, put, takeLatest } from \"redux-saga/effects\";\nimport { getAmmMap, getAmmMapStatus, updateRealTimeAmmMap } from './reducer';\nimport { AmmDetail } from '@loopring-web/component-lib/src/static-resource';\nimport store from '../../index';\nimport { AmmPoolInfoV3, AmmPoolStat, toBig, TokenVolumeV3, } from \"loopring-sdk\";\nimport { ammpoolAPI } from \"stores/apis/api\";\nimport { PayloadAction } from '@reduxjs/toolkit';\nimport { AmmDetailStore, GetAmmMapParams } from './interface';\nimport { volumeToCount, volumeToCountAsBigNumber } from '../../../hooks/help';\n\ntype AmmMap<R extends { [ key: string ]: any }> = { [ key: string ]: AmmDetail<R> } | {}  //key is AMM-XXX-XXX\nexport const setAmmState = ({ammPoolState, keyPair}: { ammPoolState: AmmPoolStat, keyPair: string }) => {\n    const {idIndex} = store.getState().tokenMap\n    // @ts-ignore\n    const [, coinA, coinB] = keyPair.match(/(\\w+)-(\\w+)/i);\n    const {forex,faitPrices} = store.getState().system;\n    if (idIndex && coinA && coinB && faitPrices && forex) {\n        let result =  {\n            amountDollar: parseFloat(ammPoolState.liquidityUSD),\n            amountYuan: (parseFloat(ammPoolState.liquidityUSD) / (forex ? forex : 6.5)),\n            totalLPToken: volumeToCount('LP-' + keyPair, ammPoolState.lpLiquidity),\n            totalA: volumeToCount(coinA, ammPoolState.liquidity[ 0 ]),//parseInt(ammPoolState.liquidity[ 0 ]),\n            totalB: volumeToCount(coinB, ammPoolState.liquidity[ 1 ]),//parseInt(ammPoolState.liquidity[ 1 ]),\n            rewardValue: ammPoolState.rewards[ 0 ] ? volumeToCount(idIndex[ ammPoolState.rewards[ 0 ].tokenId as number ], ammPoolState.rewards[ 0 ].volume) : undefined,\n            rewardToken: ammPoolState.rewards[ 0 ] ? idIndex[ ammPoolState.rewards[ 0 ].tokenId as number ] : undefined,\n            rewardValue2: ammPoolState.rewards[ 1 ] ? volumeToCount(idIndex[ ammPoolState.rewards[ 1 ].tokenId as number ], ammPoolState.rewards[ 1 ].volume) : undefined,\n            rewardToken2: ammPoolState.rewards[ 1 ] ? idIndex[ ammPoolState.rewards[ 1 ].tokenId as number ] : undefined,\n        }\n\n        const feeA =  volumeToCountAsBigNumber(coinA, ammPoolState.fees[ 0 ]);//parseInt(ammPoolState.fees[ 0 ]),\n        const feeB = volumeToCountAsBigNumber(coinB, ammPoolState.fees[ 1 ]);//parseInt(ammPoolState.fees[ 1 ]),\n        const feeDollar =  faitPrices[coinA] && faitPrices[coinB]  ?\n            toBig(feeA||0).times(faitPrices[coinA].price).plus(toBig(feeB||0).times(faitPrices[coinB].price)):undefined\n        const feeYuan = feeDollar ? feeDollar.times(forex) : undefined;\n\n        return {\n             ...result,\n            feeA:feeA?.toNumber(),\n            feeB:feeB?.toNumber(),\n            feeDollar:feeDollar? feeDollar.toNumber(): undefined,\n            feeYuan:feeYuan? feeYuan.toNumber(): undefined,\n            tradeFloat: {\n                change: undefined,\n                timeUnit: '24h',\n                // priceYuan: 100,\n                // priceDollar: 1.23123,\n                // floatTag: FloatTag.increase,\n                // reward: 12312,\n                // APY: (parseInt(ammPoolState.apyBips) * 1.0 / 100)\n            },\n            APY: (parseInt(ammPoolState.apyBips) * 1.0 / 100)\n        }\n\n\n    }\n}\nconst getAmmMapApi = async <R extends { [ key: string ]: any }>({ammpools}: GetAmmMapParams) => {\n\n    let ammMap: AmmMap<R> = {}\n    const {ammPoolStats} = (await ammpoolAPI().getAmmPoolStats());\n\n    let {__timer__} = store.getState().amm.ammMap\n    __timer__ = (() => {\n        if (__timer__ && __timer__ !== -1) {\n            clearInterval(__timer__)\n        }\n        return setInterval(async () => {\n            let ammPoolStats: { [key in keyof R]: AmmPoolStat } = (await ammpoolAPI().getAmmPoolStats()).ammPoolStats as { [key in keyof R]: AmmPoolStat }\n            store.dispatch(updateRealTimeAmmMap({ammPoolStats}))\n        }, 900000)    //15*60*1000 //900000\n    })()\n    const {tokenMap: {coinMap, idIndex}} = store.getState();\n\n    // const forex = faitPrices.prices['USDC']\n\n\n    Reflect.ownKeys(ammpools).forEach(async (key) => {\n        const item: AmmPoolInfoV3 = ammpools[ key as string ]\n        if (item.market === key && item.tokens.pooled && idIndex) {\n\n            // const tokenA =  ; //getTokenInfoById(tokens.tokenIdMap, parseInt(item.tokens.pooled[0]))\n            // const tokenB =  ; // getTokenInfoById(tokens.tokenIdMap, parseInt(item.tokens.pooled[1]))\n            const coinA = idIndex[ item.tokens.pooled[ 0 ] as any ];\n            const coinB = idIndex[ item.tokens.pooled[ 1 ] as any ];\n            const dataItem: AmmDetailStore<R> = {\n                coinA: coinA,\n                coinB: coinB,\n                isNew: Date.now() - (Number(item.createdAt)) > 3 * 86400 * 1000 ? false : true,//3*24*60*60*1000,\n                isActivity: item.status === 7 ? true : false,\n                address: item.address,\n                ...setAmmState({ammPoolState: ammPoolStats[ key ], keyPair: `${coinA}-${coinB}`}),\n                __rawConfig__: item\n            } as AmmDetailStore<R>\n            // @ts-ignore\n            ammMap[ item.market ] = dataItem\n\n\n        }\n\n\n    })\n    return {ammMap, __timer__}\n}\n\n\nexport function* getPostsSaga({payload}: PayloadAction<GetAmmMapParams>) {\n    try {\n        const {ammpools} = payload;\n        const {ammMap, __timer__} = yield call(getAmmMapApi, {ammpools});\n        console.log('--- getPostsSaga:', ammMap)\n        yield put(getAmmMapStatus({ammMap, __timer__}));\n    } catch (err) {\n        yield put(getAmmMapStatus(err));\n    }\n}\n\nexport function* updateRealTimeSaga({payload}: any) {\n    try {\n        const {ammPoolStats} = payload;\n        let {ammMap}: { ammMap: AmmMap<object> } = store.getState().amm.ammMap;\n        if (ammPoolStats) {\n            //{ ammPoolStats?: { [ key: string ]: AmmPoolStat } }\n            Reflect.ownKeys(ammPoolStats).map((key) => {\n                const keyPair = (key as string).replace('AMM-', '')\n                \n                // @ts-ignore\n                ammMap[ key ] = {\n                    // @ts-ignore\n                    ...ammMap[ key ],\n                    ...setAmmState({ammPoolState: ammPoolStats[ key as string ], keyPair, })\n                }\n                return ammMap\n            })\n        }\n        yield put(getAmmMapStatus({ammMap}));\n    } catch (err) {\n        yield put(getAmmMapStatus(err));\n    }\n}\n\n\nexport function* ammMapInitSaga() {\n    yield all([takeLatest(getAmmMap, getPostsSaga)]);\n}\n\nexport function* ammMapRealTimeSaga() {\n    yield all([takeLatest(updateRealTimeAmmMap, updateRealTimeSaga)]);\n}\n\nexport const ammMapSaga = [\n    fork(ammMapInitSaga),\n    fork(ammMapRealTimeSaga),\n]\n\n","import { all, takeLatest, call, put } from \"redux-saga/effects\";\nimport { getAmmTrades, getAmmTradesStatus } from './reducer';\n\nconst getAmmTradesApi = ()=>new Promise((resolve)=>{\n    //TODO: check is connect and active and assign wallet\n    //TODO: if not reject directory, any error happen will clean the\n    resolve([\n    {side: 'Buy',\n        amount: {\n            sell:{ belong:'ETH', tradeValue: 0.1 },\n            buy:{ belong:'LRC', tradeValue: 123 }\n        },\n        time: Date.now(),\n        fee: 0.02,\n        priceValue: 0.123,\n        priceToken: 'LRC'}\n    ,{side: 'Buy',\n        amount: {\n            sell:{ belong:'ETH', tradeValue: 0.1 },\n            buy:{ belong:'LRC', tradeValue: 123 }\n        },\n        time: Date.now(),\n        fee: 0.02,\n        priceValue: 0.123,\n        priceToken: 'LRC'}\n])});\nexport function* getPostsSaga() {\n    try {\n        //\n        const { data } = yield call(getAmmTradesApi);\n        const posts = data;\n        yield put(getAmmTradesStatus(posts));\n    } catch (err) {\n        yield put(getAmmTradesStatus(err));\n    }\n}\n\nexport default function* ammTradesSaga() {\n    yield all([takeLatest(getAmmTrades, getPostsSaga)]);\n}\n","import { combineReducers } from '@reduxjs/toolkit';\n// import { ammRecordSlice } from './AmmConfig';\nimport { ammTradesSlice } from './AmmTrades';\nimport { ammMapSlice } from './AmmMap';\nimport { ammActivityMapSlice } from './AmmActivityMap';\nimport ammActivityMapSaga from './AmmActivityMap/saga';\nimport { ammMapSaga } from './AmmMap/saga';\nimport ammTradesSaga from './AmmTrades/saga';\nimport {  fork } from 'redux-saga/effects';\n\nexport const  ammReducer = combineReducers({\n    // ammRecord: ammRecordSlice.reducer,\n    ammTrades: ammTradesSlice.reducer,\n    ammMap: ammMapSlice.reducer,\n    ammActivityMap:ammActivityMapSlice.reducer\n})\nexport const ammForks =  [\n    fork(ammActivityMapSaga),\n    ...ammMapSaga,\n    // fork(ammRecordSaga),\n    fork(ammTradesSaga)\n]\n\n// export * from './interface'\n","import { all, call, fork, put, takeLatest } from \"redux-saga/effects\";\nimport { getTokenMap, getTokenMapStatus } from './reducer';\nimport { getIcon } from '../../utils/swap_calc_utils';\nimport { CoinInfo, CoinMap } from '@loopring-web/component-lib/static-resource';\nimport { AddressMap, GetTokenMapParams, IdMap } from './interface';\nimport { PayloadAction } from '@reduxjs/toolkit';\n\nconst getTokenMapApi = async <R extends { [ key: string ]: any }>({\n                                                                      tokensMap,\n                                                                      pairs,\n                                                                      marketArr,\n                                                                      tokenArr\n                                                                  }: GetTokenMapParams<R>) => {\n    let coinMap: CoinMap<any, CoinInfo<any>> = {};\n    let tokenMap:any = tokensMap;\n    let addressIndex: AddressMap = {};\n    let idIndex: IdMap = {};\n    Reflect.ownKeys(tokensMap).forEach((key) => {\n        if (!(key as string).startsWith('LP-')) {\n            coinMap[ key as string ] = {\n                icon: getIcon(key as string, tokensMap),\n                name: key as string,\n                simpleName: key,\n                description: '',\n                company: '',\n            }\n        }\n\n        if (pairs[ key as string ] && pairs[ key as string ].tokenList) {\n            // @ts-ignore\n            tokensMap[ key ].tradePairs = pairs[ key as string ].tokenList;\n        }\n        addressIndex = {\n            ...addressIndex,\n            // @ts-ignore\n            [ tokensMap[ key ].address ]: key as string\n        }\n        idIndex = {\n            ...idIndex,\n            // @ts-ignore\n            [ tokensMap[ key ].tokenId ]: key as string\n        }\n    })\n    return {data: {coinMap, addressIndex, idIndex, tokenMap, marketArray: marketArr, marketCoins: tokenArr}}\n};\n\nexport function* getPostsSaga<R extends { [ key: string ]: any }>({payload}: PayloadAction<GetTokenMapParams<R>>) {\n    try {\n        const {tokensMap, marketMap, pairs, marketArr,tokenArr} = payload\n        // @ts-ignore\n        const {data} = yield call(getTokenMapApi, {tokensMap, pairs, marketArr, tokenArr});\n\n        yield put(getTokenMapStatus({...data, marketMap}));\n    } catch (err) {\n        yield put(getTokenMapStatus(err));\n    }\n}\n\n\nexport function* tokenInitSaga() {\n    yield all([takeLatest(getTokenMap, getPostsSaga)]);\n}\n\n\nexport const tokenSaga = [\n    fork(tokenInitSaga),\n    // fork(tokenPairsSaga),\n]\n\n// export function* getPairsSaga({payload}:PayloadAction<{tokenPairs: TokenPairs }>) {\n//     try {\n//         const {tokenPairs} = payload;\n//         const tokenPairsMap =  Reflect.ownKeys(tokenPairs).reduce((prev,key)=>{\n//            // @ts-ignore\n//             return prev[key as string] =  tokenPairs[key as string].tokenList\n//         }, {} )\n//\n//         yield put(getTokenMapStatus({tokenPairsMap}));\n//     } catch (err) {\n//         yield put(getAmmMapStatus(err));\n//     }\n// }\n// export function* tokenPairsSaga() {\n//     yield all([takeLatest(getTokenPairMap, getPairsSaga)]);\n// }\n\n\n","import { all, call, fork, put, takeLatest } from \"redux-saga/effects\"\nimport { getTicker, getTickers, getTickerStatus } from './reducer'\nimport { CoinKey, CustomError, ErrorMap, PairKey, TradeFloat } from '@loopring-web/component-lib/src/static-resource'\n\n\nimport { exchangeAPI } from \"stores/apis/api\"\nimport { makeTickerMap } from '../../hooks/help';\n\n\ntype TickerMap<R extends { [ key: string ]: any }> = {\n    [key in CoinKey<R> | PairKey<R>]?: TradeFloat & {\n    reward?: number, rewardToken?: string\n}\n\n}\n\n\nconst getTickersApi = async <R extends { [ key: string ]: any }>(list: Array<keyof R>) => {\n\n    const tickers = await exchangeAPI().getMixTicker({market: list.join(',')})\n    const data = makeTickerMap({tickerMap: tickers.tickMap})\n    return {data}\n}\n\nexport function* getPostsSaga({payload}: any) {\n    try {\n        // @ts-ignore\n        const {tickerKey, tickerKeys} = payload;\n        console.log('getPostsSaga tickerKey', tickerKey, tickerKeys)\n        if (tickerKey || (tickerKeys && tickerKeys.length)) {\n            const {data} = yield call(getTickersApi, tickerKey ? [tickerKey] : tickerKeys);\n            yield put(getTickerStatus({tickerMap: data}));\n\n        } else {\n            throw new CustomError(ErrorMap.NO_TOKEN_KEY_LIST);\n        }\n    } catch (err) {\n        yield put(getTickerStatus(err));\n    }\n}\n\nfunction* tickerSaga() {\n    yield all([takeLatest(getTicker, getPostsSaga)]);\n}\n\nfunction* tickersSaga() {\n    yield all([takeLatest(getTickers, getPostsSaga)]);\n}\n\nexport const tickerForks = [\n    fork(tickerSaga),\n    fork(tickersSaga),\n]\n ","import { all, call, fork, put, take, takeLatest } from \"redux-saga/effects\"\nimport { getSystemStatus, updateRealTimeObj, updateSystem } from './reducer'\nimport { ENV, NETWORKEXTEND } from \"./interface\"\nimport store from '../index';\nimport { reset } from '../account/reducer';\nimport { ChainId } from 'loopring-sdk';\nimport { exchangeAPI, LoopringAPI } from '../apis/api';\nimport { getAmmMap, updateRealTimeAmmMap } from '../Amm/AmmMap';\nimport { getTokenMap } from '../token';\nimport { CustomError, ErrorMap } from '@loopring-web/component-lib/src/static-resource';\nimport { getAmmActivityMap } from '../Amm/AmmActivityMap';\nimport { updateWalletLayer1 } from '../walletLayer1';\nimport { delay } from 'rxjs/operators';\n\n\nconst initConfig = function* <R extends { [ key: string ]: any }>(chainId: ChainId | 'unknown') {\n    store.dispatch(reset(undefined));\n    const {tokenSymbolMap: tokensMap} = yield call(async ()=> await LoopringAPI.exchangeAPI?.getTokens())\n    const {ammpools} = yield call(async ()=>await LoopringAPI.ammpoolAPI?.getAmmPoolConf());\n    const {pairs, marketArr, tokenArr, markets}  = yield call(async ()=> LoopringAPI.exchangeAPI?.getMixMarkets());\n    store.dispatch(getTokenMap({tokensMap, marketMap: markets, pairs,marketArr,tokenArr}))\n    yield take('tokenMap/getTokenMapStatus');\n    // let basePath: string = `wss://ws.${baseURL}/v3/ws?wsApiKey=${wsKey}`\n    store.dispatch(getAmmMap({ammpools}))\n    store.dispatch(getAmmActivityMap({ammpools}))\n    if(store.getState().tokenMap.status === 'ERROR'){\n\n    }\n    yield delay(10);\n    //IF already connect has address, getInfo walletLayer 1\n    const {account,walletLayer1} = store.getState() //.account.accAddr && !store.getState().walletLayer1.walletLayer1\n    if(account.accAddr && walletLayer1.walletLayer1 === undefined){\n        store.dispatch(updateWalletLayer1(undefined));\n    }\n\n}\n\nconst getSystemsApi = async <R extends { [ key: string ]: any }>(chainId: any) => {\n    //TODO get some other reuqired id...... put into system\n    // const { chainId } = system\n    const env = window.location.hostname === 'localhost' ? ENV.DEV : ChainId.GORLI === chainId ? ENV.UAT : ENV.PROD\n    chainId = ChainId.GORLI === chainId ? ChainId.GORLI : ChainId.MAINNET === chainId ? ChainId.MAINNET : NETWORKEXTEND.NONETWORK\n    if (chainId === NETWORKEXTEND.NONETWORK) {\n        throw new CustomError(ErrorMap.NO_NETWORK_ERROR)\n    } else {\n        LoopringAPI.InitApi(chainId as ChainId);\n        if (LoopringAPI.exchangeAPI) {\n            const { exchangeInfo } = (await LoopringAPI.exchangeAPI.getExchangeInfo())\n            const faitPrices = (await LoopringAPI.exchangeAPI.getFiatPrice({legal: 'CNY'})).fiatPrices\n            const gasPrice = (await exchangeAPI().getGasPrice()).gasPrice / 1e+9;\n            // : process.env.REACT_APP_API_URL_UAT;\n            const baseURL = ChainId.MAINNET === chainId ? `https://${process.env.REACT_APP_API_URL}` : `https:/${process.env.REACT_APP_API_URL_UAT}`\n            const forex = faitPrices[ 'USDT' ].price;\n            let {__timer__} = store.getState().system;\n            __timer__ = ((__timer__) => {\n                if (__timer__ && __timer__ !== -1) {\n                    clearInterval(__timer__);\n                }\n                return setInterval(async () => {\n                    const faitPrices = (await exchangeAPI().getFiatPrice({legal: 'CNY'})).fiatPrices\n                    const gasPrice = (await exchangeAPI().getGasPrice()).gasPrice / 1e+9\n                    const forex = faitPrices[ 'USDT' ]?.price\n                    store.dispatch(updateRealTimeAmmMap(undefined))\n                    store.dispatch(updateRealTimeObj({faitPrices, gasPrice, forex}))\n                }, 300000)   //\n\n            })(__timer__);\n            return {chainId, env, baseURL, faitPrices, gasPrice, forex, exchangeInfo, __timer__}\n        }\n    }\n}\n\nexport function* getUpdateSystem({payload}: any) {\n    try {\n        // @ts-ignore\n        const {chainId} = payload;\n        const {env, baseURL, faitPrices, gasPrice, forex, exchangeInfo, __timer__} = yield call(getSystemsApi, chainId);\n\n        yield put(getSystemStatus({env, baseURL, faitPrices, gasPrice, forex, exchangeInfo, __timer__}));\n        yield call(initConfig,chainId)\n        //TODO check wallect store\n    } catch (err) {\n        yield put(getSystemStatus(err));\n    }\n}\n\nfunction* systemSaga() {\n    yield all([takeLatest(updateSystem, getUpdateSystem)]);\n}\n\nexport const systemForks = [\n    fork(systemSaga),\n]\n","import { all, call, fork, put, takeLatest } from \"redux-saga/effects\";\nimport { getWalletLayer1Status, updateWalletLayer1 } from './reducer';\nimport { CoinKey, PairKey, WalletCoin } from '@loopring-web/component-lib/src/static-resource';\nimport { exchangeAPI } from '../apis/api';\nimport store from '../index';\nimport { fromWEI } from '../../utils/swap_calc_utils';\n\ntype WalletLayer1Map<R extends {[key:string]:any}> = {\n    [key in CoinKey<R>|PairKey<R>]?:WalletCoin<R>\n}\n\nconst getWalletLayer1Balance = async <R extends {[key:string]:any}>()=> {\n    //TODO: check is connect and active and assign walletLayer1\n    //TODO: if not reject directory, any error happen will clean the\n    // await sdk\n    const exchangeApi = exchangeAPI();\n    const {accAddr,accountId} = store.getState().account;\n    const {tokenMap,marketCoins} = store.getState().tokenMap;\n    const {ethBalance} =  await exchangeApi.getEthBalances({owner:accAddr});\n    // @ts-ignore\n    const {tokenBalances} =  await exchangeApi.getTokenBalances({owner:accAddr,token: marketCoins.join()},tokenMap);\n    tokenBalances['ETH'] = ethBalance;\n    let walletLayer1;\n    if(tokenBalances) {\n        walletLayer1 = Reflect.ownKeys(tokenBalances).reduce((prev,item)=>{\n            return   {...prev, [ item ]:{\n                    belong: item,\n                    count: fromWEI(tokenMap, item, tokenBalances[item as string]),\n                }\n            }\n        },{} as WalletLayer1Map<R>)\n    }\n    return {walletLayer1}\n};\n\nexport function* getPostsSaga() {\n    try {\n        //\n        const {walletLayer1} = yield call(getWalletLayer1Balance);\n        yield put(getWalletLayer1Status({walletLayer1}));\n    } catch (err) {\n        yield put(getWalletLayer1Status(err));\n    }\n}\n\nexport function* walletLayer1Saga() {\n    yield all([takeLatest(updateWalletLayer1, getPostsSaga)]);\n}\n\nexport const walletLayer1Fork = [\n    fork(walletLayer1Saga),\n    // fork(tokenPairsSaga),\n]\n\n","import { all, call, fork, put, takeLatest } from \"redux-saga/effects\";\nimport { getWalletLayer2Status, updateWalletLayer2 } from './reducer';\nimport { CoinKey, PairKey, WalletCoin } from '@loopring-web/component-lib/src/static-resource';\nimport {  userAPI } from '../apis/api';\nimport store from '../index';\n\ntype WalletLayer2Map<R extends {[key:string]:any}> = {\n    [key in CoinKey<R>|PairKey<R>]?:WalletCoin<R>\n}\n\nconst getWalletLayer2Balance = async <R extends {[key:string]:any}>()=> {\n    //TODO: check is connect and active and assign walletLayer1\n    //TODO: if not reject directory, any error happen will clean the\n    // await sdk\n    // const exchangeApi = exchangeAPI();\n    const userApi = userAPI();\n    const {accountId,apiKey} = store.getState().account;\n    const {tokenMap,idIndex,marketCoins} = store.getState().tokenMap;\n    let walletLayer2;\n    if(apiKey && accountId){\n        // @ts-ignore\n        const {userBalances} =  await userApi.getUserBalances({accountId:accountId,tokens:''},apiKey)\n        if(userBalances) {\n            // tokenId: number;\n            // total: string;\n            // locked: string;\n            // pending: {\n            //     withdraw: string;\n            //     deposit: string;\n            // };\n            walletLayer2 = Reflect.ownKeys(userBalances).reduce((prev,item)=>{\n                // @ts-ignore\n                return   {...prev, [ idIndex[item] ]:userBalances[Number(item)]}\n            },{} as WalletLayer2Map<R>)\n        }\n    }\n\n    return {walletLayer2}\n};\nexport function* getPostsSaga() {\n    try {\n        //\n        const {walletLayer2} = yield call(getWalletLayer2Balance);\n        yield put(getWalletLayer2Status({walletLayer2}));\n    } catch (err) {\n        yield put(getWalletLayer2Status(err));\n    }\n}\n\nexport function* walletLayer2Saga() {\n    yield all([takeLatest(updateWalletLayer2, getPostsSaga)]);\n}\n// export function* walletLayer2Saga() {\n//     yield all([takeLatest(updateWalletLayer2, getPostsSaga)]);\n// }\n\n\nexport const walletLayer2Fork = [\n    fork(walletLayer2Saga),\n    // fork(tokenPairsSaga),\n]\n\n","import { all, call, fork, put, takeLatest } from \"redux-saga/effects\"\nimport { getUserRewards, getUserRewardsStatus } from './reducer'\n\nimport store from '../index';\nimport { exchangeAPI, LoopringAPI } from '../apis/api';\nimport { updateRealTimeAmmMap } from '../Amm/AmmMap';\nimport { updateRealTimeObj } from '../system';\n\nconst getUserRewardsApi = async <R extends {[key:string]:any}>(list:Array<keyof R>)=> {\n\n    // const data:UserRewardsMap<R> = {}\n\n    // const userRewardss = await exchangeAPI().getUserRewards({market: list.join(',')})\n    const {accountId} = store.getState().account\n    let {__timer__} = store.getState().userRewardsMap;\n    \n    if(LoopringAPI.ammpoolAPI) {\n        __timer__ = ((__timer__) => {\n            if (__timer__ && __timer__ !== -1) {\n                clearInterval(__timer__);\n            }\n            return setTimeout(async () => {\n                store.dispatch(getUserRewards(undefined))\n            }, 300000 * 4)   //\n\n        })(__timer__);\n        return  LoopringAPI.ammpoolAPI.getAmmPoolUserRewards({owner:accountId}).then(({ammUserRewardMap}) => {\n            return {data:ammUserRewardMap,__timer__}\n        })\n\n\n    }else{\n        return  Promise.reject({data:undefined,__timer__})\n    }\n\n}\n\nexport function* getPostsSaga({payload}:any) {\n    try {\n        // @ts-ignore\n        // const { userRewardsKey,userRewardsKeys } = payload;\n        // console.log('getPostsSaga userRewardsKey',userRewardsKey, userRewardsKeys)\n        // if(userRewardsKey || (userRewardsKeys && userRewardsKeys.length)) {\n        const {data,__timer__}  = yield call(getUserRewardsApi);\n        yield put(getUserRewardsStatus({userRewardsMap:data,__timer__}));\n\n        // }else{\n        //     throw new CustomError(ErrorMap.NO_SDK);\n        // }\n    } catch (err) {\n        yield put(getUserRewardsStatus(err));\n    }\n}\n\nfunction* userRewardsSaga() {\n    yield all([takeLatest(getUserRewards, getPostsSaga)]);\n}\n\nexport const userRewardsForks = [\n    fork(userRewardsSaga),\n    // fork(userRewardssSaga),\n]\n ","import { all, call, fork, put, takeLatest } from 'redux-saga/effects';\nimport { getSocketStatus, sendSocketTopic, socketEnd } from './reducer'\nimport {\n    socketClose, socketSendMessage,\n} from '../../services/socketUtil';\nimport store from '../index';\nexport function* closeSocket(){\n    try {\n        yield call(socketClose)\n        yield put(getSocketStatus(undefined));\n        //TODO check wallect store\n    } catch (err) {\n        yield put(getSocketStatus(err));\n    }\n}\nexport function* sendMessage({payload}: any){\n    try {\n        const { chainId } = store.getState().system;\n        const { apiKey } = store.getState().account;\n        const { socket } = payload;\n        // @ts-ignore\n        yield call(socketSendMessage, { chainId, socket, apiKey })\n        yield put(getSocketStatus(undefined));\n    } catch (err) {\n        yield put(getSocketStatus(err));\n    }\n}\n\nfunction* socketEndSaga(){\n    yield all([takeLatest(socketEnd, closeSocket)]);\n}\n// function* socketSaga() {\n//     yield all([takeLatest(socketStart, startSocket)]);\n// }\nfunction* socketSendMessageSaga() {\n    yield all([takeLatest(sendSocketTopic, sendMessage)]);\n}\n\n\n\nexport const socketForks = [\n    // fork(socketSaga),\n    fork(socketEndSaga),\n    fork(socketSendMessageSaga),\n //   fork(initConfig),\n]\n\n\n\n","import { all } from \"redux-saga/effects\"\n// import machine from \"../state_machine/fsm/machine\"\n// import { TRANSITION } from \"../state_machine/fsm/actionTypes\"\n// import { helloSaga } from \"./sagas\"\nimport { tokenSaga } from './token/saga';\nimport { ammForks } from './Amm';\nimport { tickerForks } from './ticker/saga';\nimport { systemForks } from './system/saga';\nimport { walletLayer1Fork } from './walletLayer1/saga';\nimport { walletLayer2Fork } from './walletLayer2/saga';\nimport { userRewardsForks } from './userRewards/saga';\nimport { socketForks } from './socket/saga';\n\n\n// https://css-tricks.com/finite-state-machines-with-react/\n// https://musing-rosalind-2ce8e7.netlify.com/?machine=%7B%22initial%22%3A%22initial%22%2C%22states%22%3A%7B%22initial%22%3A%7B%22on%22%3A%7B%22LOGIN%22%3A%22loggedIn%22%2C%22LOGOUT%22%3A%22loggedOut%22%7D%7D%2C%22loggedOut%22%3A%7B%22on%22%3A%7B%22SUBMIT%22%3A%22loading%22%7D%7D%2C%22loading%22%3A%7B%22on%22%3A%7B%22SUCCESS%22%3A%22loggedIn%22%2C%22FAIL%22%3A%22loggedOut%22%7D%7D%2C%22loggedIn%22%3A%7B%22onEntry%22%3A%5B%22SET_TOKEN%22%5D%2C%22onExit%22%3A%5B%22CLEAR_TOKEN%22%5D%2C%22on%22%3A%7B%22LOGOUT%22%3A%22loggedOut%22%7D%7D%7D%7D\n\n// function* machineHandler(event: any, action: any) {\n//\n//   // @ts-ignore\n//   const currentAppState = yield select((state) => { state.account.status })\n//   const nextAppState = machine.transition(currentAppState, event)\n//\n//   yield put({\n//     type: \"APP_STATE/\" + nextAppState.value,\n//     payload: {\n//       value: nextAppState.value\n//     }\n//   });\n//\n//   console.debug(\"-> from \" + currentAppState + \" to \" + nextAppState);\n//\n//   for (let i = 0; i < nextAppState.actions.length; i++) {\n//     yield put({\n//       type: nextAppState.actions[i],\n//       payload: action\n//     });\n//   }\n// }\n\n// function* watchTransition() {\n//   yield takeEvery(TRANSITION, function*(action: any) {\n//     yield machineHandler(action.event, action.payload);\n//   });\n// }\n\nfunction* mySaga() {\n    yield all([\n        // fork(helloSaga),\n        // fork(watchTransition),\n        ...tokenSaga,\n        ...walletLayer1Fork,\n        ...walletLayer2Fork,\n        ...systemForks,\n        ...ammForks,\n        ...tickerForks,\n        ...userRewardsForks,\n        ...socketForks,\n\n    ]);\n}\n\nexport default mySaga;\n","import { configureStore, combineReducers, getDefaultMiddleware } from '@reduxjs/toolkit'\n\nimport { useDispatch } from 'react-redux'\nimport { save, load } from 'redux-localstorage-simple'\n\nimport createSagaMiddleware from 'redux-saga'\n\n// We'll use redux-logger just as an example of adding another middleware\nimport logger from 'redux-logger'\n\n// And use redux-batch as an example of adding enhancers\nimport { reduxBatch } from '@manaflair/redux-batch'\nimport { updateVersion } from './global/actions'\n\nimport accountSlice from './account/reducer'\nimport tradingSlice from './trading/reducer'\nimport transactionlice from './transactions/reducer'\n\n\nimport { modalsSlice, setLanguage, settingsSlice } from '@loopring-web/component-lib';\nimport { ammReducer } from './Amm';\nimport { tokenMapSlice } from './token';\nimport mySaga from './rootSaga';\nimport { tickerMapSlice } from './ticker';\nimport { systemSlice } from './system';\nimport { walletLayer1Slice } from './walletLayer1';\nimport { walletLayer2Slice } from './walletLayer2';\nimport { socketSlice } from './socket';\nimport { userRewardsMapSlice } from './userRewards';\n\nconst sagaMiddleware = createSagaMiddleware()\n\nconst reducer = combineReducers({\n  account: accountSlice.reducer,\n  socket: socketSlice.reducer,\n  settings: settingsSlice.reducer,\n  system: systemSlice.reducer,\n  trading: tradingSlice.reducer,\n  transactions: transactionlice.reducer,\n  modals: modalsSlice.reducer,\n  userRewardsMap: userRewardsMapSlice.reducer,\n  amm:ammReducer,\n  tokenMap: tokenMapSlice.reducer,\n  walletLayer2: walletLayer2Slice.reducer,\n  walletLayer1: walletLayer1Slice.reducer,\n  tickerMap: tickerMapSlice.reducer\n})\n\n//\n\nconst PERSISTED_KEYS: string[] = ['settings']\n\nconst store = configureStore({\n  reducer,\n  // middleware: (getDefaultMiddleware) => getDefaultMiddleware().concat(logger),\n  middleware: [...getDefaultMiddleware({ thunk: false,serializableCheck:false, }), save({ states: PERSISTED_KEYS }), sagaMiddleware, ],\n  // middleware: [...getDefaultMiddleware({ thunk: true }), ],\n  devTools: process.env.NODE_ENV !== 'production',\n  enhancers: [reduxBatch],\n  preloadedState: load({ states: PERSISTED_KEYS })\n})\nstore.dispatch(updateVersion())\nstore.dispatch(setLanguage(store.getState().settings.language))\n// @ts-ignore\nsagaMiddleware.run(mySaga, store.dispatch);\n\n// The store has been created with these options:\n// - The slice reducers were automatically passed to combineReducers()\n// - redux-thunk and redux-logger were added as middleware\n// - The Redux DevTools Extension is disabled for production\n// - The middleware, batch, and devtools enhancers were composed together\n\nexport type AppDispatch = typeof store.dispatch\nexport const useAppDispatch = () => useDispatch<AppDispatch>()\n\nexport type RootState = ReturnType<typeof reducer>\n\nexport default store\n","import { Contract } from '@ethersproject/contracts'\nimport { getAddress } from '@ethersproject/address'\nimport { AddressZero } from '@ethersproject/constants'\nimport { BigNumber } from '@ethersproject/bignumber'\n\nimport { JsonRpcSigner, Web3Provider } from '@ethersproject/providers'\n\nimport { UnsupportedChainIdError } from '@web3-react/core'\n\nimport {\n  NoEthereumProviderError,\n  UserRejectedRequestError as UserRejectedRequestErrorInjected\n} from '@web3-react/injected-connector'\nimport { UserRejectedRequestError as UserRejectedRequestErrorWalletConnect } from '@web3-react/walletconnect-connector'\n\nimport { ChainId } from 'loopring-sdk'\n\nexport function getLibrary(provider: any): Web3Provider {\n  const library = new Web3Provider(provider)\n  library.pollingInterval = 10000\n  return library\n}\n\nexport function getErrorMessage(error: Error) {\n  if (error instanceof NoEthereumProviderError) {\n    return 'No Ethereum browser extension detected, install MetaMask on desktop or visit from a dApp browser on mobile.'\n  } else if (error instanceof UnsupportedChainIdError) {\n    return 'You\\'re connected to an unsupported network.'\n  } else if (\n    error instanceof UserRejectedRequestErrorInjected ||\n    error instanceof UserRejectedRequestErrorWalletConnect\n  ) {\n    return 'Please authorize this website to access your Ethereum account.'\n  } else {\n    console.error(error)\n    return 'An unknown error occurred. Check the console for more details.'\n  }\n}\n\nexport function transactionChecker(web3: any, address: string) {\n  const account = address.toLowerCase()\n\n  const subscription = web3.eth.subscribe('pendingTransactions', (err: any, res: any) => {\n    if (err) {\n      console.error(err)\n    }\n  })\n\n  return function watchTransactions() {\n    console.log('Watch Transactions...')\n    subscription.on('data', (txHash: any) => {\n      setTimeout(async () => {\n        try {\n          let tx = await web3.eth.getTransaction(txHash)\n          if (tx.to && tx.to.toLowerCase() === account) {\n            const value = web3.utils.fromWei(tx.value, 'ether')\n            if (value > 0) {\n              console.log('watchTransactions value:', value)\n            }\n          }\n        } catch (err) {\n          console.error(err)\n        }\n      }, 60 * 1000)\n    })\n  }\n}\n\n// returns the checksummed address if the address is valid, otherwise returns false\nexport function isAddress(value: any): string | false {\n  try {\n    return getAddress(value)\n  } catch {\n    return false\n  }\n}\n\nconst ETHERSCAN_PREFIXES: { [chainId in ChainId]: string } = {\n  1: '',\n  5: 'goerli.',\n}\n\nexport function getEtherscanLink(\n  chainId: ChainId,\n  data: string,\n  type: 'transaction' | 'token' | 'address' | 'block'\n): string {\n  const prefix = `https://${ETHERSCAN_PREFIXES[chainId] || ETHERSCAN_PREFIXES[1]}etherscan.io`\n\n  switch (type) {\n    case 'transaction': {\n      return `${prefix}/tx/${data}`\n    }\n    case 'token': {\n      return `${prefix}/token/${data}`\n    }\n    case 'block': {\n      return `${prefix}/block/${data}`\n    }\n    case 'address':\n    default: {\n      return `${prefix}/address/${data}`\n    }\n  }\n}\n\n// shorten the checksummed version of the input address to have 0x + 4 characters at start and end\nexport function shortenAddress(address: string, chars = 4): string {\n  const parsed = isAddress(address)\n  if (!parsed) {\n    throw Error(`Invalid 'address' parameter '${address}'.`)\n  }\n  return `${parsed.substring(0, chars + 2)}...${parsed.substring(42 - chars)}`\n}\n\n// add 10%\nexport function calculateGasMargin(value: BigNumber): BigNumber {\n  return value.mul(BigNumber.from(10000).add(BigNumber.from(1000))).div(BigNumber.from(10000))\n}\n\n// account is not optional\nexport function getSigner(library: Web3Provider, account: string): JsonRpcSigner {\n  return library.getSigner(account).connectUnchecked()\n}\n\n// account is optional\nexport function getProviderOrSigner(library: Web3Provider, account?: string): Web3Provider | JsonRpcSigner {\n  return account ? getSigner(library, account) : library\n}\n\n// account is optional\nexport function getContract(address: string, ABI: any, library: Web3Provider, account?: string): Contract {\n  if (!isAddress(address) || address === AddressZero) {\n    throw Error(`Invalid 'address' parameter '${address}'.`)\n  }\n\n  return new Contract(address, ABI, getProviderOrSigner(library, account) as any)\n}\n\nexport function escapeRegExp(string: string): string {\n  return string.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&') // $& means the whole matched string\n}\n\nexport async function isContract(web3: any, address: string) {\n  const code = await web3.eth.getCode(address)\n  return code && code.length > 2\n}\n\nexport function getShortAddr(address: string) {\n    if (!address || address === undefined || address === null || address.trim() === '') {\n        console.log('getShortAddr got empty!')\n        return undefined\n    }\n    const convertAddr = address.substr(0, 6) + '...' + address.substr(address.length - 4)\n    return convertAddr\n}\n","import { debounce } from 'lodash'\nimport React, { useEffect } from 'react'\nimport { UserStorage } from 'storage'\n\nimport { useCheckAccStatus, } from 'stores/account/hook'\n\nimport { \n  useUpdateChainId,\n  useUpdateExchangeInfo, \n  useUpdateExchangeMarkets, \n  useUpdateTokens, \n  useUpdateAmmPoolConf,\n  useUpdateAmmActivityRules,\n  useUpdateAmmPoolStats,\n} from 'stores/trading/hook'\n\nenum WindowEvent {\n  Click = 'click',\n  Scroll = 'scroll',\n  Mouseover = 'mouseover',\n}\n\nconst events = [WindowEvent.Click, WindowEvent.Scroll]\n\nconst forceReset = debounce(() => { UserStorage.checkTimeout(true) }, 100)\n\nexport const GlobalProvider = ({ children }: { children: React.ReactNode }) => {\n\n  useUpdateExchangeInfo()\n  useUpdateExchangeMarkets()\n  useUpdateTokens()\n  useUpdateAmmPoolConf()\n  useUpdateAmmActivityRules()\n  useUpdateAmmPoolStats()\n  useUpdateChainId()\n\n  useCheckAccStatus()\n\n  useEffect(() => {\n\n    events.forEach((event: string) => {\n      document.addEventListener(event, forceReset)\n    })\n\n    return () => {\n\n      events.forEach((event: string) => {\n        document.removeEventListener(event, forceReset)\n      })\n    }\n\n  }, [])\n\n  return (\n    <React.Fragment>\n      { children}\n    </React.Fragment>\n  )\n\n}\n","import React, { useState, useEffect } from 'react'\nimport styled from '@emotion/styled/macro'\nimport { useTranslation } from 'react-i18next'\n\nimport { useWeb3React } from '@web3-react/core'\n\nimport { network } from 'networks/web3_connectors'\n\nimport { useEagerConnect, useInactiveListener } from 'hooks/web3/useWeb3'\nimport { reset, setAccountStatus } from 'stores/account/reducer'\n\nimport { ChainId, NetworkContextName } from 'loopring-sdk'\n\n// import Loader from 'components/modals/Loader'\nimport { useDispatch } from 'react-redux'\nimport { AccountStatus } from 'state_machine/account_machine_spec'\n\nconst MessageWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  height: 20rem;\n`\n\nconst Message = styled.h2`\n  color: ${({ theme }) => theme.colorBase.error};\n`\n\nexport function Web3ReactManager({ children }: { children: JSX.Element }) {\n  const { t } = useTranslation()\n  const { active } = useWeb3React()\n  const { active: networkActive, error: networkError, activate: activateNetwork } = useWeb3React(NetworkContextName)\n\n  // try to eagerly connect to an injected provider, if it exists and has granted access already\n  const triedEager = useEagerConnect()\n\n  // after eagerly trying injected, if the network connect ever isn't active or in an error state, activate itd\n  useEffect(() => {\n    if (triedEager && !networkActive && !networkError && !active) {\n      activateNetwork(network)\n    }\n  }, [triedEager, networkActive, networkError, activateNetwork, active])\n\n  // when there's no account connected, react to logins (broadly speaking) on the injected provider, if it exists\n  \n  const dispatch = useDispatch()\n\n  const onReConnectInjected = () => {\n    console.log('onReConnectInjected')\n    dispatch(reset(undefined))\n    dispatch(setAccountStatus(AccountStatus.UNCONNNECTED))\n  }\n  \n  useInactiveListener(onReConnectInjected, !triedEager)\n\n  // handle delayed loader state\n  const [showLoader, setShowLoader] = useState(false)\n  useEffect(() => {\n    const timeout = setTimeout(() => {\n      setShowLoader(true)\n    }, 600)\n\n    return () => {\n      clearTimeout(timeout)\n    }\n  }, [])\n\n  // on page load, do nothing until we've tried to connect to the injected connector\n  if (!triedEager) {\n    return null\n  }\n\n  // if the account context isn't active, and there's an error on the network context, it's an irrecoverable error\n  if (!active && networkError) {\n    return (\n      <MessageWrapper>\n        <Message>{t('unknownError')}</Message>\n      </MessageWrapper>\n    )\n  }\n\n  // if neither context is active, spin\n  if (!active && !networkActive) {\n    return showLoader ? (\n      <MessageWrapper>\n        {/*<Loader />*/}\n      </MessageWrapper>\n    ) : null\n  }\n\n  return children\n}\n","import React from 'react'\n\nexport const DevWrapper = ({ children }: { children: React.ReactNode }) => {\n\n  return (\n    <React.Fragment>\n      {\n        process.env.NODE_ENV !== 'production' ? (\n          <>\n          {children}\n          </>\n        ) : null\n      }\n    </React.Fragment>\n  )\n\n}\n\n","import { Subject } from 'rxjs';\n// import { TradeFloat } from '@loopring-web/component-lib/src/static-resource';\nimport { LoopringMap } from 'loopring-sdk/dist/defs/loopring_defs';\nimport { TickerData } from 'loopring-sdk';\nimport { makeTickerMap } from '../hooks/help';\nimport { TickerMap } from '../stores/ticker';\n\nconst subject = new Subject<{ tickerMap: TickerMap<{ [ key: string ]: any }> }>();\n\n// export type TickerMap<R> = {\n//     [key in keyof R]:TradeFloat\n// }\n// <R extends {[key:string]:any}>\n  //<R>\nexport const tickerService = {\n    sendTicker: (_tickerMap:LoopringMap<TickerData>) => {\n       const tickerMap:TickerMap<{[key:string]:any}> = makeTickerMap({tickerMap:_tickerMap})\n       subject.next({ tickerMap })\n    },\n    // clearMessages: () => subject.next(),\n    onSocket: () => subject.asObservable()\n};","export enum STATUS {\n    UNSET='UNSET',\n    PENDING='PENDING',\n    ERROR='ERROR',   // success failed timeout is Done\n    DONE='DONE',   // success failed timeout is Done\n}\n","import {\n    ChainId,\n    getAccountArg,\n    getAmmpoolArg,\n    getCandlestickArg,\n    getOrderArg,\n    getOrderBookArg,\n    getTickerArg,\n    getTradeArg,\n    toBig,\n    WsTopicType\n} from 'loopring-sdk';\nimport { LoopringAPI } from '../stores/apis/api';\nimport store from '../stores';\nimport { updateSocketURL } from '../stores/system';\nimport { tickerService } from './tickerService';\nimport { ammPoolService } from './ammPoolService';\nimport { CustomError, ErrorMap } from '@loopring-web/component-lib/static-resource';\n\nexport type socketEventMap = { fn: (e: MessageEvent, props?: { [ key: string ]: any }) => any, deps?: any[] }\n\nexport enum SocketEventType {\n    pingpong = 'pingpong',\n    account = \"account\",\n    order = \"order\",\n    orderbook = \"orderbook\",\n    trade = \"trade\",\n    ticker = \"ticker\",\n    candlestick = \"candlestick\",\n    ammpool = \"ammpool\"\n}\n\n\nexport type SocketEventMap = {\n    [key in WsTopicType]: socketEventMap\n}\n\nconst pingPong = {\n    fn: (e: MessageEvent) => {\n        if (e.data === 'ping') {\n            // @ts-ignore\n            global.looperingSocket.send('pong')\n        }\n    }\n}\n\n//@ts-ignore\nwindow.socketEventMap = {\n    [ SocketEventType.pingpong ]: pingPong\n} as SocketEventMap;\n\nexport const addSocketEvents = (key: string, event: socketEventMap) => {\n    // @ts-ignore\n    window.socketEventMap = {\n        // @ts-ignore\n        ...window.socketEventMap,\n        [ key ]: event\n    }\n}\nexport const removeSocketEvents = (key: string) => {\n    // @ts-ignore\n    if (window.socketEventMap && window.socketEventMap[ key ]) {\n        // @ts-ignore\n        delete window.socketEventMap[ key ]\n    }\n}\nexport const resetSocketEvents = () => {\n    // @ts-ignore\n    window.socketEventMap = {\n        [ SocketEventType.pingpong ]: pingPong\n    }\n}\n\nexport const isConnectSocket = () => {\n    const global: Window = window || globalThis;\n    // @ts-ignore\n    if (global.looperingSocket && global.looperingSocket.send) {\n        return true;\n    } else {\n        return false\n    }\n}\nexport const socketClose = async () => {\n    const global = window || globalThis;\n    // @ts-ignore\n    let ws: WebSocket | undefined = global.loopringSocket;\n\n    return new Promise((reolve, reject) => {\n        if (ws) {\n            ws.onclose = function (e) {\n                reolve(`Socket is closed, ${e.reason}`)\n            };\n            ws.close();\n        } else {\n            Promise.resolve('no websocket')\n        }\n    })\n}\nconst makeTopics = (topics: any, apiKey?: string) => {\n    let data: any = {\n        op: 'sub',\n        unsubscribeAll: 'true',\n        topics: topics,\n    }\n\n    if (apiKey) {\n        data.apiKey = apiKey\n    }\n    // console.log('Socket>>Socket',JSON.stringify(data));\n    return JSON.stringify(data)\n    // sendMessage(flat_txt)\n}\nexport const clearInitTimer = (init?: boolean) => {\n    const global: any = window || globalThis;\n\n    if (global.__wsTimer__) {\n        if (global.__wsTimer__.timer && global.__wsTimer__.timer !== -1) {\n            clearTimeout(global.__wsTimer__.timer)\n        }\n        global.__wsTimer__.timer = -1\n        global.__wsTimer__.count++;\n    }\n    if (init) {\n        global.__wsTimer__ = {\n            //...global.__wsTimer__,\n            timer: -1,\n            count: 0\n        }\n    }\n}\nexport const socketConnect = async ({chainId, topics, apiKey}: {\n    chainId: ChainId | 'unknown',\n    topics: any[],\n    apiKey?: string\n}) => {\n    try {\n        if (chainId !== 'unknown' && LoopringAPI.wsAPI && topics) {\n            const url = ChainId.MAINNET === chainId ? process.env.REACT_APP_API_URL : process.env.REACT_APP_API_URL_UAT;\n            const {wsKey} = await LoopringAPI.wsAPI.getWsKey();\n            let baseSocket: string = `wss://ws.${url}/v3/ws?wsApiKey=${wsKey}`;\n            store.dispatch(updateSocketURL({socketURL: baseSocket}));\n            const global: any = window || globalThis;\n            console.log(baseSocket)\n\n            let ws: WebSocket;\n            ws = new WebSocket(baseSocket);\n            // @ts-ignore\n            global.looperingSocket = ws;\n            ws.onopen = function () {\n                console.log('Socket>>Socket', \"WebSocket is open now.\");\n                // @ts-ignore\n                ws.send(makeTopics(topics))\n            };\n            ws.onmessage = function (e) {\n                const {data} = e;\n                // data.topic.topic;\n                if (data === 'ping') {\n                    console.log('Socket>>Socket ping:', e);\n                    global.socketEventMap.pingpong.fn.call(global.socketEventMap.pingpong.deps, e);\n                } else {\n                    const result = JSON.parse(data);\n                    const {topics, topic} = result;\n                    if (topics) {\n                        // console.log('Socket>>Socket topics first return', topics);\n                    }\n                    if (topic && topic.topic) {\n                        const {topic: {topic: _topic}, data} = result\n                        // {\n                        //     \"topic\" : {\n                        //         \"topic\" : \"ticker\",\n                        //             \"market\" : \"LRC-USDT\"\n                        //     },\n                        //     \"ts\" : 1626062177522,\n                        //         \"data\" : [ \"LRC-USDT\", \"1626062177173\", \"1614688563700000000000000\", \"381151436640\", \"0.2315\", \"0.2408\", \"0.2309\", \"0.2408\", \"869\", \"0.2406\", \"0.2413\" ]\n                        // }\n                        console.log('Socket>>Socket topic', _topic, data);\n                        global.socketEventMap[ topic.topic ].fn.call(global.socketEventMap[ topic.topic ].deps, data)\n\n                    }\n\n                }\n                return false;\n            };\n            ws.onclose = async function (e) {\n                // @ts-ignore\n                console.log('Socket>>Socket', e);\n                if (global.looperingSocket) {\n                    global.looperingSocket = undefined;\n                }\n                console.log('Socket>>Socket', 'Socket is closed. Reconnect will be attempted in 1 second.', e.reason);\n                clearInitTimer()\n                if (global.__wsTimer__.count < 5) {\n                    global.__wsTimer__.timer = setTimeout(function () {\n                        socketConnect.call(global, {chainId, topics, apiKey});\n                    }, 1000 * global.__wsTimer__.count);\n                }\n            };\n            ws.onerror = function (err: Event) {\n                console.error('Socket>>Socket', 'Socket encountered error:', 'Closing socket');\n\n\n            };\n\n        }\n    } catch (error) {\n        console.log('Socket>>Socket', 'connect error, not from reconnect')\n\n        // @ts-ignore\n        if (global.looperingSocket) {\n            // @ts-ignore\n            global.looperingSocket.close()\n        }\n\n\n    }\n}\n\nexport const socketSendMessage = async ({socket, chainId, apiKey}: {\n    chainId: ChainId | 'unknown',\n    socket: { [ key: string ]: string[] }\n    apiKey?: string\n}): Promise<boolean> => {\n    try {\n        if (socket && Reflect.ownKeys(socket).length) {\n            //register ping pong event\n            clearInitTimer(true);\n            resetSocketEvents();\n            const {topics} = makeMessageArray({socket});\n            if (!isConnectSocket()) {\n                await socketConnect({chainId, topics, apiKey})\n            } else {\n                const global: Window = window || globalThis;\n                // @ts-ignore\n                global.looperingSocket.send(makeTopics(topics))\n\n            }\n            return true\n        } else {\n            if (!isConnectSocket()) {\n                socketClose();\n            }\n            return false\n        }\n    } catch (error) {\n        throw  new CustomError(ErrorMap.SOCKET_ERROR)\n    }\n\n}\n\n\nexport const makeMessageArray = ({socket}: { socket: { [ key: string ]: string[] } }): {\n    topics: any[]\n} => {\n    let topics: any[] = [], list: any[] = []; // let registerDispatch = [];\n    Reflect.ownKeys(socket).forEach((eventType) => {\n        switch (eventType) {\n            case  SocketEventType.ticker:\n                list = socket[ SocketEventType.ticker ].map(key => getTickerArg(key))\n                if (list && list.length) {\n                    makeReceiveMessageCallback(SocketEventType.ticker)\n                    topics = [...topics, ...list];\n                }\n                break\n            case  SocketEventType.account:\n                if(socket[ SocketEventType.account ]){\n                    list = [getAccountArg()]\n                }\n                if (list && list.length) {\n                    makeReceiveMessageCallback(SocketEventType.account)\n                    topics = [...topics, ...list];\n                }\n                break;\n            case  SocketEventType.order:\n                //FIX:  make order Topic\n                list = socket[ SocketEventType.order ].map(key => getOrderArg(key))\n                if (list && list.length) {\n                    makeReceiveMessageCallback(SocketEventType.order)\n                    topics = [...topics, ...list];\n                }\n                break\n            case  SocketEventType.orderbook:\n                //FIX:  make orderbook Topic\n                list = socket[ SocketEventType.orderbook ].map(key => getOrderBookArg(key, 0))\n                if (list && list.length) {\n                    makeReceiveMessageCallback(SocketEventType.orderbook)\n                    topics = [...topics, ...list];\n                }\n                break\n            case  SocketEventType.trade:\n                list = socket[ SocketEventType.trade ].map(key => getTradeArg(key))\n                if (list && list.length) {\n                    makeReceiveMessageCallback(SocketEventType.trade)\n                    topics = [...topics, ...list];\n                }\n                break\n            case  SocketEventType.candlestick:\n                list = socket[ SocketEventType.candlestick ].map(key => getCandlestickArg(key))\n                if (list && list.length) {\n                    makeReceiveMessageCallback(SocketEventType.candlestick)\n                    topics = [...topics, ...list];\n                }\n                break\n            case  SocketEventType.ammpool:\n                list = socket[ SocketEventType.ammpool ].map(key => getAmmpoolArg(key))\n                if (list && list.length) {\n                    makeReceiveMessageCallback(SocketEventType.ammpool)\n                    topics = [...topics, ...list];\n                }\n                break\n        }\n    })\n    return {topics}\n}\nconst SocketEventMap = {\n    // PING_PONG : (e)=>{\n    //\n    // },\n    [ SocketEventType.account ]: (_e: any) => {\n\n    },\n    [ SocketEventType.order ]: (_e: any) => {\n\n    },\n    [ SocketEventType.orderbook ]: (_e: any) => {\n\n    },\n    [ SocketEventType.trade ]: (_e: any) => {\n\n    },\n    [ SocketEventType.ticker ]: (data: string[]) => {\n        const [symbol, timestamp, size, volume, open, high, low, close, count, bid, ask] = data;\n        // @ts-ignore\n        const [, base, quote] = symbol.match(/(\\w+)-(\\w+)/i);\n        const base_token_volume = size;\n        const quote_token_volume = volume;\n        const change = open === undefined || Number(open) === 0 ? undefined : (toBig(close).minus(open)).div(open)\n        // @ts-ignore\n        tickerService.sendTicker({\n            [ symbol ]: {\n                symbol, base, quote,\n                base_token_volume,\n                quote_token_volume,\n                timestamp: Number(timestamp),\n                change,\n                base_fee_amt: undefined,\n                quote_fee_amt: undefined,\n                open, high, low, close, count, bid, ask\n            }\n        })\n    },\n    [ SocketEventType.candlestick ]: (_e: any) => {\n\n    },\n    [ SocketEventType.ammpool ]: (data: string[]) => {\n        // const [market,timestamp,size,volume,open,high,low,close,count,bid,ask] = data;\n        // @ts-ignore\n        const [poolName, poolAddress, pooled, [tokenId, volume], risky] = data;\n        // @ts-ignore\n        ammPoolService.sendAmmPool({poolName, poolAddress, pooled, lp: {tokenId, volume}, risky})\n    },\n}\n\n\nexport const makeReceiveMessageCallback = (type: keyof typeof SocketEventType) => {\n\n\n    addSocketEvents(type, {\n        // @ts-ignore\n        fn: SocketEventMap [ type ]\n    })\n}\n\n\n\n\n\n","import { Trans, useTranslation } from 'react-i18next';\nimport { Box, Container, Link, Typography } from '@material-ui/core';\nimport styled from '@emotion/styled';\nimport { ErrorObject } from '@loopring-web/component-lib/src/static-resource';\nimport { getContactInfo } from '../../utils/dt_tools';\n\nconst StyleBox = styled(Box)`\n  background-image: url('./static/images/error_bg.png');\n  background-repeat: no-repeat;\n  background-size: contain;\n  background-position: bottom;\n  white-space: pre-wrap;\n  //h2{\n  //  position: relative;\n  //}\n` as typeof Box\n\nexport const ErrorPage = ({messageKey}: ErrorObject) => {\n    // const {messageKey}: { id?:string,messageKey:string } = {messageKey: 'errorMessageTokenMapIsEmpty'};\n    //TODO: checkRouter\n    const {t} = useTranslation('error');\n    const message = `labelConnectUs`;\n    return <>\n        <Container>\n            {/*style={{height: '100%' }}*/}\n            <StyleBox flex={1} display={'flex'} alignItems={'flex-start'} justifyContent={'center'}\n                      flexDirection={'column'} marginTop={4} height={680} maxWidth={1200}>\n                {/*<StyleBox>*/}\n                <Box textAlign={'center'} position={'relative'} left={128} top={-64}>\n                    <Typography component={'h2'} variant={'h2'}>\n                        {t(messageKey)}\n                    </Typography>\n                    <Typography marginY={2} component={'p'} variant={'body1'} color={'textSecondary'}>\n                        <Trans i18nKey={message}>\n                            If you believe this is indeed a bug, please <Link\n                            component={'a'}\n                            onClick={(e) => {\n                                window.location.href = getContactInfo();\n                                e.preventDefault();\n                            }}\n                        >contact us</Link> <br/> We would appreciate your feedback\n\n                        </Trans>\n                        {/*{t(message)}*/}\n                        {/*{t(messageKey)}*/}\n                    </Typography>\n                </Box>\n                {/*</StyleBox>*/}\n            </StyleBox>\n        </Container>\n\n        {/*<Footer></Footer>*/}\n    </>\n}\n","// import { i18nInstance as i18n  } from \"@loopring-web/component-lib/static-resource\"\nimport i18n from 'i18next';\n\nconst covertLocale = (rawLocale: string = i18n.language) => {\n    return rawLocale.replace('_', '-')\n}\n\nexport function getLocaleDtFromTs(ts: number | string, locale: string = i18n.language) {\n    if (typeof(ts) === 'string') {\n        ts = parseInt(ts)\n    }\n    const dt = new Date(ts).toLocaleString(covertLocale(locale))\n    return dt\n}\n\nexport function getLocaleDt(dt?: Date, locale: string = i18n.language) {\n    if (dt) {\n        return dt.toLocaleString(covertLocale(locale))\n    }\n    return ''\n}\n\nexport function getContactInfo(subject: string = 'report to loopring website', body: string ='Body Content') {\n    const email = process.env.CONTACT_US_EMAIL ?? 'contact@loopring.io'\n    return `mailto:${email}?subject=${subject}&body=${body}`\n}\n","import store from '../../stores';\nimport { toBig } from 'loopring-sdk';\nimport { BIG10 } from '../../defs/swap_defs';\nimport BigNumber from 'bignumber.js';\n\nexport const volumeToCount = (symbol:string,volumn:string|number|BigNumber,tokenMap= store.getState().tokenMap.tokenMap):number|undefined =>{\n   const result =  volumeToCountAsBigNumber(symbol,volumn,tokenMap);\n   return result? result.toNumber():undefined;\n}\nexport const volumeToCountAsBigNumber = (symbol:string,volumn:string|number|BigNumber,tokenMap= store.getState().tokenMap.tokenMap):BigNumber|undefined =>{\n    if(tokenMap && tokenMap[symbol] && typeof volumn !== 'undefined'){\n        try{\n            return toBig(volumn).div( BIG10.pow(tokenMap[symbol].decimals))\n        }catch (error){\n            throw error;\n        }\n    }else{\n        return undefined;\n    }\n}","import { WsAPI, ExchangeAPI, AmmpoolAPI, UserAPI, DEFAULT_TIMEOUT, } from 'loopring-sdk'\nimport store, { RootState } from 'stores'\nimport { useSelector } from 'react-redux'\n\nimport { useMemo } from 'react'\n\nfunction useApi(ApiClass: any, timeout = DEFAULT_TIMEOUT) {\n    // const chainId = store.getState().trading.chainId\n    // return new ApiClass(chainId, timeout)\n\n  const { chainId, } = useSelector((state: RootState) => state.trading)\n\n  const genApi = () => {\n      if (!chainId) {\n          return undefined\n      }\n\n      return new ApiClass(chainId, timeout)\n  }\n\n  const api = useMemo(genApi, [ApiClass, chainId, timeout])\n\n  return api\n}\n\nexport function useWsAPI() {\n    return useApi(WsAPI) as WsAPI\n}\n\nexport function useExchangeAPI() {\n    return useApi(ExchangeAPI) as ExchangeAPI\n}\n\nexport function useAmmpoolAPI() {\n    return useApi(AmmpoolAPI) as AmmpoolAPI\n}\n\nexport function useUserAPI() {\n    return useApi(UserAPI) as UserAPI\n}\n","import { Subject } from 'rxjs';\nimport { TradeFloat } from '@loopring-web/component-lib/src/static-resource';\n\nconst subject = new Subject();\n\nexport type AmmPoolMap<R> = {\n    [key in keyof R]:TradeFloat\n}\n// <R extends {[key:string]:any}>\n\nexport const ammPoolService = {\n    sendAmmPool: (ammPoolMap:AmmPoolMap<{[key:string]:any}>) => subject.next({ ammPoolMap: ammPoolMap }),\n    // clearMessages: () => subject.next(),\n    onSocket: () => subject.asObservable()\n};"],"sourceRoot":""}