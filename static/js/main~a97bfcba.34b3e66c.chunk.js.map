{"version":3,"sources":["storage/index.ts","stores/account/reducer.ts","index.tsx","stores/global/actions.ts","stores/system/reducer.ts","stores/transactions/reducer.ts","stores/index.ts","stores/trading/reducer.ts","defs/common_defs.ts","state_machine/account_machine_spec.ts","stores/trading/hook.ts","provider/global/index.tsx","provider/web3ReactManager/index.tsx","provider/dev-wrapper/index.tsx","defs/web3_defs.ts","stores/account/hook.ts","state_machine/machine_builder.ts","hooks/modal/useModals.ts","utils/swap_calc_utils.ts","hooks/exchange/useExchangeAPI.ts","hooks/exchange/useUserAPI.ts","layouts/header/hook.tsx","utils/web3_tools.ts","pages/SettingPage/SettingPanel.tsx","layouts/header/index.tsx","pages/QuotePage/index.tsx","pages/SwapPage/panel/SwapPanel/index.tsx","pages/SwapPage/hook.ts","hooks/exchange/useAmmpoolAPI.ts","pages/SwapPage/panel/BasicInfoPanel/index.tsx","hooks/exchange/useWsAPI.ts","defs/swap_defs.ts","utils/obj_tools.ts","pages/SwapPage/panel/SwapPanel/hooks.ts","pages/SwapPage/panel/TradePanel/TradePanel.tsx","pages/SwapPage/panel/TradePanel/index.tsx","pages/SwapPage/panel/TradePanel/hooks.ts","pages/SwapPage/index.tsx","pages/DebugPage/index.tsx","pages/Layer2Page/TxPanel/index.tsx","pages/Layer2Page/TxPanel/hooks.ts","pages/Layer2Page/AssetPanel/index.tsx","pages/Layer2Page/TradePanel/index.tsx","pages/Layer2Page/TradePanel/hooks.ts","pages/Layer2Page/OrderPanel/index.tsx","pages/Layer2Page/index.tsx","routers/index.tsx"],"names":["CONSTANTS","UserStorage","rawHandler","sessionStorage","getItem","Handler","undefined","parseInt","err","handler","setItem","removeItem","reset","dateTimeStr","localStorage","ActiveTime","now","Date","getTime","console","log","toString","tmpDt","SESSION_TIMEOUT_SECONDS","clear","rawId","AccountId","accountId","Account","account","Apikey","apikey","Eddsakey","eddsakey","orderHash","AmmOrder","address","current","HardwareAddresses","includes","toLowerCase","newValue","initialState","defaultAccId","process","REACT_APP_TEST_ACCOUND_ID","getAccountId","defaultApiKey","REACT_APP_TEST_API_KEY","getApikey","defaultOwner","REACT_APP_TEST_OWNER","getAccount","defaultEddsaKey","REACT_APP_TEST_EDDSA_KEY","getEddsakey","JSON","stringify","accAddr","status","AccountStatus","UNCONNNECTED","publicKey","nonce","isContractAddress","apiKey","eddsaKey","connectName","ConnectorNames","Unknown","connectNameTemp","accountSlice","createSlice","name","reducers","state","initState","Object","assign","setAccAddr","action","payload","setAccountInfo","owner","setApikey","setAccountStatus","setEddsaKey","setConnectName","setConnectNameTemp","setIsContractAddress","actions","Web3ProviderNetwork","createWeb3ReactRoot","NetworkContextName","providers","provider","LocalizationProvider","dateAdapter","MomentUtils","I18nextProvider","i18n","MuThemeProvider","theme","getTheme","ThemeProvider","Provider","store","ReactDOM","render","getLibrary","App","document","getElementById","updateVersion","createAction","SystemStatus","NORMAL","systemSlice","setSystemStatus","transactionsSlice","addTransaction","chainId","from","hash","approval","summary","claim","Error","addedTime","clearAllTransactions","checkedTransaction","blockNumber","tx","lastCheckedBlockNumber","Math","max","finalizeTransaction","receipt","confirmedTime","sagaMiddleware","createSagaMiddleware","reducer","combineReducers","settings","settingsSlice","system","trading","tradingSlice","transactions","transactionlice","modals","modalsSlice","PERSISTED_KEYS","configureStore","middleware","getDefaultMiddleware","thunk","save","states","devTools","enhancers","reduxBatch","preloadedState","load","dispatch","TradingInterval","getBaseQuote","symbol","ind","indexOf","symbol_base","substr","symbol_quote","defaultSymbol","interval","markets","tokens","refreshRate","refreshRateSlow","wsApiKey","changeSymbol","changeTradingInterval","setWsApiKey","setMarkets","setTokens","setExchangeInfo","exchangeInfo","Theme","LangType","MODAL_TYPE","StatusChangeEvent","AccountMachineSpec","Connecting","CONNECTED","Reset","HasPubkey","LOCKED","HasNoPubkey","UNACTIVATED","ErrorResponse","NOACCOUNT","DEPOSITING","FinishDeposit","DEPOSIT_TO_CONFIREM","ACTIVATED","IsSmartWallet","ARPROVING","ApproveSubmit","APPROV_TO_CONFIRM","ApproveConfirmed","Unlock","Lock","useGetTradingInfo","tradingInfo","useSelector","useUpdateExchangeInfo","useDispatch","api","useExchangeAPI","useCustomDCEffect","getExchangeInfo","then","response","reject","WindowEvent","events","Click","Scroll","forceReset","debounce","checkTimeout","GlobalProvider","children","useCheckAccStatus","useEffect","forEach","event","addEventListener","removeEventListener","Fragment","MessageWrapper","Message","colorBase","error","Web3ReactManager","t","useTranslation","active","useWeb3React","networkActive","networkError","activateNetwork","activate","triedEager","useEagerConnect","network","useInactiveListener","useState","showLoader","setShowLoader","timeout","setTimeout","clearTimeout","DevWrapper","connectorsByName","Injected","injected","Network","WalletConnect","walletconnect","WalletLink","walletlink","Ledger","ledger","Trezor","trezor","Authereum","authereum","useWeb3Account","useActiveWeb3React","connector","library","isConnected","voca","isBlank","useAccount","isNoAccount","isActivated","useStateMachine","spec","machine","currentState","stateTransitions","nextState","sendEvent","useCallback","useConnect","activatingConnector","setActivatingConnector","connect","item_name","isSwitch","newConnector","getState","useDisconnect","deactivate","disconnect","useUnlock","exchangeApi","userApi","useUserAPI","lock","a","unlock","exchangeAddress","sk","getProvider","web3","Web3","sign_tools","toHex","toBig","keyPair","secretKey","getUserApiKey","web3Account","lv1Acc","prevChainId","usePrevious","prevWeb3Account","cleanUp","acc","dumpError400","data","resultInfo","code","setInterval","isTimeOut","clearInterval","setHandler","getHandler","checkStatus","useModals","ShowDeposit","isShow","props","title","setShowDeposit","ShowTransfer","setShowTransfer","ShowWithdraw","setShowWithdraw","ShowResetAccount","setShowResetAccount","SwapStatus","MULTI_FACTOR","baseAmt","MaxBaseAmt","quoteAmt","MaxQuoteAmt","newStatus","Normal","BigNumber","zero","gt","ExceedUserBalance","ExceedPoolBalance","eq","EmptyInput","isNormal","getIcon","baseToken","addr","utils","getAddress","getRight","pairs","left","right","tokenList","coinMapRight","key","icon","simpleName","description","company","getToken","token","getTokenInfoByToken","ammBalance","tokenInfo","tokenVol","pooledMap","tokenId","volume","reserve","fm","getKey","base","quote","key_bak","isOK","getInfoByKey","raw_data","getBalances","ammpools","ammPoolsBalances","getAmmInfo","ammInfo","quoteToken","baseBalance","quoteBalance","feeBips","getAmt","rawAmt","times","decimals","applySlippageTolerance","value","slippageTolerance","f","feeFactor","amount","outInWei","dividedBy","out","fromWEI","applyOrderFee","feeBip","valueInWEI","precision","ceil","precisionToFixed","div","toWEI","rm","toFixed","useGetExchangeInfo","usePromiseJob","useGetTokens","getTokens","useGetUserBalances","balances","setBalances","keys","Reflect","ownKeys","tokenMap","item","push","getUserBalances","join","map","total","locked","availableInWei","minus","catch","reason","useHeader","useSettings","setTheme","themeMode","language","setLanguage","React","open","setOpen","forceUpdate","useReducer","bool","etherscanUrl","useEtherscan","gatewayList","DefaultGatewayList","handleSelect","accountInfoProps","setAccountInfoProps","onNotification","onWalletBtnConnent","onThemeBtnClick","dark","light","onLangBtnClick","lang","showAccountInfo","setShowAccountInfo","advanceOpen","setAdvanceOpen","handleViewAccountInfo","stopPropagation","preventDefault","headerToolBarData","ButtonComponentsMap","handleClick","Language","handleChange","GoAdvanceBtn","withTranslation","variant","size","color","onClick","_e","trim","length","getShortAddr","level","ethLink","mainBtn","updateHeaderMenuWhenHasAccountInfo","headerMenuData","HeadMenuTabKey","Layer2","extender","IconButton","disabled","aria-label","HeaderMenuTabStatus","default","label","WalletStatus","hidden","noAccount","accountPending","useChargeFeeList","tokenSymbol","requestType","chargeFeeList","setChargeFeeList","request","getOffchainFeeAmt","fees","index","belong","fee","useModalProps","tokensAll","tokenSymbolMap","coinMap","setCoinMap","startsWith","useCoinMap","walletMap_Lv1","walletMap","setWalletMap","getTokenBalances","tokenBalances","balance","count","useLv1WalletMap","walletMap_Lv2","useLv2WalletMap","deposit","amt","depositAddress","sendByMetaMask","getGasPrice","gasPrice","gasLimit","contract","response2","withdraw","sellTokenId","getNextStorageId","storageId","request2","exchange","to","offchainId","maxFee","extraData","minGas","validUntil","VALID_UNTIL","submitOffchainWithdraw","transfer","payeeAddr","walletType","payeeAcc","payeeId","payerAddr","payerId","submitInternalTransfer","tradeValue","depositValue","setDepositValue","depositProps","tradeData","depositBtnStatus","TradeBtnStatus","AVAILABLE","onDepositClick","handlePanelEvent","switchType","Promise","res","setTokenSymbol","withdrawValue","setWithdrawValue","withdrawalFeeList","OffchainFeeReqType","OFFCHAIN_WITHDRAWAL","withdrawProps","withdrawBtnStatus","onWithdrawClick","withdrawType","WithdrawType","Fast","withdrawTypes","WithdrawTypes","chargeFeeToken","chargeFeeTokenList","handleOnAddressChange","handleAddressError","_value","message","transferValue","setTransferValue","transferTokenSymbol","setTransferTokenSymbol","transferFeeList","TRANSFER","transferProps","transferBtnStatus","onTransferClick","resetValue","setResetValue","resetProps","resetBtnStatus","onResetClick","price","MuiModalStyled","styled","MuiModal","background","BlockStyled","Box","border","defaultFrame","c_key","d_R","secondary","unit","StyledPaper","Grid","StyledSwitch","Switch","textPrimary","success","backgroundColor","opacity","BtnCurrency","currency","Currency","dollar","setState","_handleChange","target","IconComponent","DropDownIcon","labelId","id","autoWidth","onChange","yen","StyledDivider","Divider","SettingPanel","focus","rest","useTheme","setUpColor","setCurrency","upColor","container","direction","justifyContent","alignItems","Typography","component","marginY","paddingLeft","xs","display","flexDirection","marginBottom","paddingY","paddingX","Trans","i18nKey","alignSelf","Button","paddingTop","passDay","changeLanguage","style","textTransform","UpColor","green","up","down","checked","e","red","SettingPage","onClose","aria-labelledby","aria-describedby","Header","location","useLocation","onSwitch","withDrawProps","selected","pathname","headerRoot","Toolbar","Collapse","in","Container","maxWidth","marginTop","onDisconnect","onSwith","rawDataLastPrice","RowStyled","TableWrapStyled","TablePaddingX","pLeft","pRight","QuotePage","buyData","ETH","sellData","LRC","tradeFloat","priceDollar","priceYuan","percent","chartUnit","floatTag","FloatTag","increase","flex","none","decrease","rawData","SwapPanel","swapProps","useSwapPage","setBase","setQuote","setAmmpools","useAmmpoolAPI","getAmmPoolConf","useGetAmmPools","ammPoolsBalances_all","setAmmPoolsBalances","getAmmPoolBalances","useGetAmmPoolsBalances","ammpoolsbalances","poolAddress","setPoolAddress","market","setMarket","toggleData","ChartType","Depth","Trend","BasicInfoPanel","tgItemJSXs","tlabel","JSX","chartType","setChartType","change","setChange","setVolume","mounted","d1","limit","getCandlestick","candlesticks","lastBar","lastClose","close","firstClose","quoteVol","originData","setOriginData","tgItemJSXsPriceChart","ChartUnit","reduce","pre","tGItemData","min15","timeStamp","low","high","swapTradeData","getThousandFormattedNumbers","exclusive","minHeight","maxHeight","type","handleMove","height","D1","useSwapPageWs","topics","getAccountArg","getOrderArg","getAmmpoolArg","setAccount","ammPool","setAmmPool","order","setOrder","op","topic","WsTopicType","Ammpool","timestamp","Candlestick","Order","OrderBook","Ticker","Trade","useHandleSocketData","useWs","socketData","OrderHandling","deepClone","result","constructor","hasOwnProperty","useSwap","globalAcc","getAmmOrder","ammOrder","setAmmOrder","priceImpact","setPriceImpact","setBaseAmt","setQuoteAmt","minimumReceived","setLeft","setRight","setFee","takerRate","setTakerRate","currentPrice","setCurrentPrice","amount1ApplyOrderFee","setAmount1ApplyOrderFee","setBalance","availToShow","setAvailToShow","setQuoteBalance","quoteToShow","setQuoteToShow","setSwapProps","currentBalance","totalAmount","amountLocked","newAvailable","balancesTmp","quoteShow","fn","resolve","getOrderDetails","TxStatus","processed","clearAmmOrder","too_many_times","no_such_order","coinMapLeft","getLeft","getUserFeeRate","onBaseAmtInputChange","baseAmtVal","baseTokenInfo","reserveIn","reserveOut","amountIn","feeBipsFactor","amountInWithFee","numerator","denominator","plus","_amount1ApplyOrderFeeInWei","_amount1ApplyOrderFee","Number","getAmountOut","quoteAmtVal","onQuoteAmtInputChange","quoteTokenInfo","amountOut","hasError","reserveOutSubAmountOut","getAmountOut_Reverse","onSwap","allOrNone","orderId","amount0InBigNumber","amount1WithSlippage","amount1InBigNumber","sellToken","buyToken","maxFeeBips","fillAmountBOrS","orderType","OrderType","ClassAmm","eddsaSignature","submitOrder","swap","tradeCalcData","coinSell","coinBuy","StoB","parseFloat","BtoS","sellCoinInfoMap","buyCoinInfoMap","slippage","abs","sell","buy","__cache__","onSwapClick","handleSwapPanelEvent","swapData","SwapType","SEll_CLICK","BUY_CLICK","SELL_SELECTED","BUY_SELECTED","EXCHANGE_CLICK","columnModeDefault","ammColumnModeDefault","applyProps","Table","withRef","TableUI","TabPanel","other","role","TradePanel","myTrades","recentTrades","setValue","myArgs","columnMode","generateRows","generateColumns","recentArgs","Tabs","Tab","setMyTrades","tradesNew","getUserTrades","fillTypes","FilledType","amm","trades","useGetMyTrades","ammPoolAddress","ammPoolApi","setRecentTrades","getAmmPoolTrades","side","feeAmount","createdAt","useGetRecentTrades","PaperStyled","Paper","SwapPage","paddingRight","minWidth","DebugPage","useRef","useAmmpoolWs","getMarkets","useGetMarkets","gas","setGas","useGetGas","StylePaper","borderColor","TxPanel","txs","setTxs","getUserTranferList","tmpTx","senderAddress","env","receiverAddress","feeTokenSymbol","memo","time","txnHash","tradeType","TransactionTradeTypes","allTypes","useGetTxs","txList","className","AssetPanel","AssetTitleProps","assetInfo","totalAsset","priceTag","PriceTag","Dollar","onShowDeposit","onShowTransfer","onShowWithdraw","OrderPanel","subMenu","subMenuLayer2","SubMenuList","BasicSubMenuList","Layer2Page","match","useRouteMatch","params","width","marginLeft","RouterView","exact","path"],"mappings":"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","file":"static/js/main~a97bfcba.34b3e66c.chunk.js","sourcesContent":["export enum CONSTANTS {\n    Handler = 'handler',\n    AccountId = 'account_id',\n    Account = 'account',\n    Apikey = 'apikey',\n    Eddsakey = 'eddsakey',\n    ActiveTime = 'active_time',\n    AmmOrder = 'amm_order',\n    HardwareAddresses = 'hardware_addresses',\n}\n\nconst SESSION_TIMEOUT_SECONDS = 600\n\nexport class UserStorage {\n\n    public static getHandler() {\n        const rawHandler = sessionStorage.getItem(CONSTANTS.Handler)\n        try {\n            if (rawHandler !== undefined && rawHandler !== null)\n                return parseInt(rawHandler)\n        } catch (err) {\n        }\n        return undefined\n    }\n\n    public static setHandler(handler: any) {\n        sessionStorage.setItem(CONSTANTS.Handler, handler)\n    }\n\n    public static clearHandler() {\n        sessionStorage.removeItem(CONSTANTS.Handler)\n    }\n\n    public static checkTimeout(reset: boolean = false) : boolean {\n        let dateTimeStr = localStorage.getItem(CONSTANTS.ActiveTime)\n        let now = new Date().getTime()\n\n        if (dateTimeStr !== null && !reset) {\n            let tmpDt = new Date(parseInt(dateTimeStr))\n\n            // console.log(`now:${now} dateTimeStr:${dateTimeStr} delta:${now - tmpDt.getTime()}`)\n\n            if(now - tmpDt.getTime() > SESSION_TIMEOUT_SECONDS * 1000) {\n                console.log(`TIMEOUT! now:${now} dateTimeStr:${dateTimeStr} delta:${now - tmpDt.getTime()}`)\n                sessionStorage.clear()\n                localStorage.setItem(CONSTANTS.ActiveTime, now.toString())\n                return true\n            }\n        } else {\n\n            if (reset) {\n                console.log('force reset!!')\n            }\n\n            localStorage.setItem(CONSTANTS.ActiveTime, now.toString())\n        }\n\n        return false\n    }\n\n\n    public static getAccountId() {\n        const rawId = sessionStorage.getItem(CONSTANTS.AccountId)\n        try {\n            if (rawId)\n                return parseInt(rawId)\n        } catch (err) {\n        }\n        return undefined\n    }\n\n    public static setAccountId(accountId: number) {\n        sessionStorage.setItem(CONSTANTS.AccountId, accountId.toString())\n    }\n\n    public static getAccount() {\n        return sessionStorage.getItem(CONSTANTS.Account)\n    }\n\n    public static setAccount(account: string) {\n        sessionStorage.setItem(CONSTANTS.Account, account)\n    }\n\n    public static getApikey() {\n        return sessionStorage.getItem(CONSTANTS.Apikey)\n    }\n\n    public static setApikey(apikey: string) {\n        sessionStorage.setItem(CONSTANTS.Apikey, apikey)\n    }\n\n    public static getEddsakey() {\n        return sessionStorage.getItem(CONSTANTS.Eddsakey)\n    }\n\n    public static setEddsakey(eddsakey: string) {\n        sessionStorage.setItem(CONSTANTS.Eddsakey, eddsakey)\n    }\n\n    public static getAmmOrder(): string {\n        var orderHash = localStorage.getItem(CONSTANTS.AmmOrder)\n        return orderHash ? orderHash : ''\n    }\n\n    public static setAmmOrder(orderHash: string) {\n        localStorage.setItem(CONSTANTS.AmmOrder, orderHash)\n    }\n\n    public static clearAmmOrder() {\n        localStorage.removeItem(CONSTANTS.AmmOrder)\n    }\n\n    public static isHardwareAddress(address: string) {\n        let current = localStorage.getItem(CONSTANTS.HardwareAddresses)\n        if (current) {\n            if (current.includes(address.toLowerCase())) {\n                return true\n            }\n        }\n        return false\n    }\n\n    public static saveHardwareAddress(address: string) {\n        let current = localStorage.getItem(CONSTANTS.HardwareAddresses);\n        if (current) {\n            if (current.includes(address.toLowerCase()) !== true) {\n                let newValue = current + ',' + address.toLowerCase();\n                localStorage.setItem(CONSTANTS.HardwareAddresses, newValue);\n            }\n        } else {\n            localStorage.setItem(CONSTANTS.HardwareAddresses, address.toLowerCase());\n        }\n\n    }\n}\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit'\n\nimport { AccountInfo } from '@loopring-web/sdk/defs/account_defs'\nimport { ConnectorNames } from '@loopring-web/sdk/defs/web3_defs'\nimport { Lv2Account, } from 'defs/account_defs'\nimport { AccountStatus } from 'state_machine/account_machine_spec'\nimport { UserStorage } from 'storage'\n\n\nconst initialState = () => {\n  const defaultAccId = process.env.REACT_APP_TEST_ACCOUND_ID ? process.env.REACT_APP_TEST_ACCOUND_ID : UserStorage.getAccountId()\n  const defaultApiKey = process.env.REACT_APP_TEST_API_KEY ? process.env.REACT_APP_TEST_API_KEY : UserStorage.getApikey()\n  const defaultOwner = process.env.REACT_APP_TEST_OWNER ? process.env.REACT_APP_TEST_OWNER : UserStorage.getAccount()\n  const defaultEddsaKey = process.env.REACT_APP_TEST_EDDSA_KEY ? process.env.REACT_APP_TEST_EDDSA_KEY : UserStorage.getEddsakey()\n\n  console.log('defaultApiKey:', JSON.stringify(defaultApiKey))\n  const defaultStatus = AccountStatus.UNCONNNECTED\n  return {\n    accAddr: defaultOwner,\n    status: defaultStatus,\n    accountId: defaultAccId,\n    publicKey: {},\n    nonce: 0,\n    isContractAddress: false,\n    apiKey: defaultApiKey,\n    eddsaKey: defaultEddsaKey,\n    connectName: ConnectorNames.Unknown,\n    connectNameTemp: ConnectorNames.Unknown,\n  } as Lv2Account\n}\n\nconst accountSlice = createSlice({\n  name: 'account',\n  initialState: initialState(),\n  reducers: {\n    reset(state) {\n      const initState = initialState()\n      console.log('!!! reset account!', initState)\n      Object.assign(state, initState)\n    },\n    setAccAddr(state, action: PayloadAction<string>) {\n      state.accAddr = action.payload\n      // UserStorage.setAccount(action.payload)\n    },\n    setAccountInfo(state, action: PayloadAction<AccountInfo>) {\n      state.accAddr = action.payload.owner\n      state.accountId = action.payload.accountId\n      state.nonce = action.payload.nonce\n      state.publicKey = action.payload.publicKey\n\n      // UserStorage.setAccount(state.accAddr)\n      // UserStorage.setAccountId(state.accountId)\n      \n    },\n    setApikey(state, action: PayloadAction<string>) {\n      state.apiKey = action.payload\n      // UserStorage.setApikey(action.payload)\n    },\n    setAccountStatus(state, action: PayloadAction<AccountStatus>) {\n      state.status = action.payload\n    },\n    setEddsaKey(state, action: PayloadAction<any>) {\n      state.eddsaKey = action.payload\n      // UserStorage.setEddsakey(action.payload)\n    },\n    setConnectName(state, action: PayloadAction<ConnectorNames>) {\n      state.connectName = action.payload\n    },\n    setConnectNameTemp(state, action: PayloadAction<ConnectorNames>) {\n      state.connectNameTemp = action.payload\n    },\n    setIsContractAddress(state, action: PayloadAction<boolean>) {\n      state.isContractAddress = action.payload\n    },\n  },\n})\n\nexport const { reset, setAccAddr, setApikey, setConnectName, setConnectNameTemp, setAccountInfo, setAccountStatus, setEddsaKey, setIsContractAddress, } = accountSlice.actions\nexport default accountSlice\n","import { Provider } from 'react-redux'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nimport { createWeb3ReactRoot, Web3ReactProvider } from '@web3-react/core'\nimport store from 'stores'\n\nimport { getLibrary } from '@loopring-web/sdk/utils/web3_tools'\nimport { NetworkContextName } from '@loopring-web/sdk/defs/web3_defs'\n\nimport { getTheme, i18n, provider, ProviderComposer } from \"@loopring-web/component-lib/static-resource\"\nimport { ThemeProvider as MuThemeProvider } from '@material-ui/core'\nimport LocalizationProvider from '@material-ui/pickers/LocalizationProvider'\n\nimport MomentUtils from '@material-ui/lab/AdapterMoment'\n\nimport { ThemeProvider } from \"@emotion/react\"\n\nimport { I18nextProvider } from \"react-i18next\"\n\n\n\nconst Web3ProviderNetwork = createWeb3ReactRoot(NetworkContextName)\nconst providers = [\n    provider(LocalizationProvider as any, {dateAdapter: MomentUtils}),\n    provider(I18nextProvider as any, {i18n:i18n}),\n    provider(MuThemeProvider as any, {theme: getTheme('dark')}),\n    provider(ThemeProvider as any, {theme: getTheme('dark')}),\n    provider(Provider as any, {store}),\n]\n\nReactDOM.render(\n// @ts-ignore\n    <ProviderComposer providers={providers}>\n        <Web3ReactProvider getLibrary={getLibrary}>\n            <Web3ProviderNetwork getLibrary={getLibrary}>\n                <App/>\n            </Web3ProviderNetwork>\n        </Web3ReactProvider>\n    </ProviderComposer>,\n    document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\nif (process.env.NODE_ENV !== 'production') {\n    reportWebVitals(console.log)\n}\n","import { createAction } from '@reduxjs/toolkit'\n\n// fired once when the app reloads but before the app renders\n// allows any updates to be applied to store data loaded from localStorage\nexport const updateVersion = createAction<void>('global/updateVersion')\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit'\nimport { SystemStatus } from 'defs/common_defs'\n\nexport interface SystemInfo {\n  status: SystemStatus\n}\n\nconst initialState = {\n  status: SystemStatus.NORMAL, \n} as SystemInfo\n\nconst systemSlice = createSlice({\n  name: 'system',\n  initialState,\n  reducers: {\n    setSystemStatus(state, action: PayloadAction<any>) {\n      state.status = action.payload\n    },\n  },\n})\n\nexport const { setSystemStatus, } = systemSlice.actions\nexport default systemSlice\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit'\n\nconst now = () => new Date().getTime()\n\nexport interface SerializableTransactionReceipt {\n  to: string\n  from: string\n  contractAddress: string\n  transactionIndex: number\n  blockHash: string\n  transactionHash: string\n  blockNumber: number\n  status?: number\n}\n\nexport interface TransactionDetails {\n  hash: string\n  approval?: { tokenAddress: string; spender: string }\n  summary?: string\n  claim?: { recipient: string }\n  receipt?: SerializableTransactionReceipt\n  lastCheckedBlockNumber?: number\n  addedTime: number\n  confirmedTime?: number\n  from: string\n}\n\nexport interface TransactionState {\n  [chainId: number]: {\n    [txHash: string]: TransactionDetails\n  }\n}\n\nexport const initialState: TransactionState = {}\n\nconst transactionsSlice = createSlice({\n  name: 'transactions',\n  initialState,\n  reducers: {\n    reset(state) {\n      Object.assign(state, initialState)\n    },\n    addTransaction(state: TransactionState, action: PayloadAction<{\n      chainId: number, from: string,\n      hash: string, approval: any, summary: string, claim: any\n    }>) {\n      const { chainId, from, hash, approval, summary, claim} = action.payload\n      if (state[chainId]?.[hash]) {\n        throw Error('the existing TX can\\'t be added again')\n      }\n\n      const txs = state[chainId] ?? {}\n      txs[hash] = {\n        hash, \n        approval, \n        summary, \n        claim, \n        from,\n        addedTime: now(), \n      }\n      // state[chainId] = txs\n    },\n    clearAllTransactions(state: TransactionState, action: PayloadAction<number>) {\n      const chainId = action.payload\n      if (!state[chainId]) return\n      state[chainId] = {}\n    },\n    checkedTransaction(state: TransactionState, action: PayloadAction<{chainId: number,\n    hash: string, blockNumber: number}>) {\n      const { chainId, hash, blockNumber} = action.payload\n      const tx = state[chainId]?.[hash]\n      if (!tx) {\n        return\n      }\n      if (!tx.lastCheckedBlockNumber) {\n        tx.lastCheckedBlockNumber = blockNumber\n      } else {\n        tx.lastCheckedBlockNumber = Math.max(blockNumber, tx.lastCheckedBlockNumber)\n      }\n      // state[chainId][hash] = tx\n    },\n    finalizeTransaction(state: TransactionState, action: PayloadAction<{\n      hash: string, chainId: number, receipt: any\n    }>) {\n      const { chainId, hash, receipt } = action.payload\n      \n      const tx = state[chainId]?.[hash]\n      if (!tx) {\n        return\n      }\n      tx.receipt = receipt\n      tx.confirmedTime = now()\n    }\n  }\n}\n)\n\nexport const { reset, addTransaction, clearAllTransactions, checkedTransaction, finalizeTransaction, } = transactionsSlice.actions\nexport default transactionsSlice\n","import { configureStore, combineReducers, getDefaultMiddleware } from '@reduxjs/toolkit'\n\nimport { useDispatch } from 'react-redux'\nimport { save, load } from 'redux-localstorage-simple'\n\nimport createSagaMiddleware from 'redux-saga'\n\n// We'll use redux-logger just as an example of adding another middleware\nimport logger from 'redux-logger'\n\n// And use redux-batch as an example of adding enhancers\nimport { reduxBatch } from '@manaflair/redux-batch'\nimport { updateVersion } from './global/actions'\n\nimport accountSlice from './account/reducer'\nimport systemSlice from './system/reducer'\nimport tradingSlice from './trading/reducer'\nimport transactionlice from './transactions/reducer'\n\nimport { modalsSlice, settingsSlice } from '@loopring-web/component-lib';\n\nconst sagaMiddleware = createSagaMiddleware()\n\nconst reducer = combineReducers({\n  account: accountSlice.reducer,\n  settings: settingsSlice.reducer,\n  system: systemSlice.reducer,\n  trading: tradingSlice.reducer,\n  transactions: transactionlice.reducer,\n  modals: modalsSlice.reducer\n})\n\n//\n\nconst PERSISTED_KEYS: string[] = ['settings']\n\nconst store = configureStore({\n  reducer,\n  // middleware: (getDefaultMiddleware) => getDefaultMiddleware().concat(logger),\n  middleware: [...getDefaultMiddleware({ thunk: false }), save({ states: PERSISTED_KEYS }), sagaMiddleware, ],\n  // middleware: [...getDefaultMiddleware({ thunk: true }), ],\n  devTools: process.env.NODE_ENV !== 'production',\n  enhancers: [reduxBatch],\n  preloadedState: load({ states: PERSISTED_KEYS })\n})\n\nstore.dispatch(updateVersion())\n\n// The store has been created with these options:\n// - The slice reducers were automatically passed to combineReducers()\n// - redux-thunk and redux-logger were added as middleware\n// - The Redux DevTools Extension is disabled for production\n// - The middleware, batch, and devtools enhancers were composed together\n\nexport type AppDispatch = typeof store.dispatch\nexport const useAppDispatch = () => useDispatch<AppDispatch>()\n\nexport type RootState = ReturnType<typeof reducer>\n\nexport default store\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit'\n\nimport { ExchangeInfo, TokenInfo } from '@loopring-web/sdk/defs/exchange_defs'\n\nexport enum TradingInterval {\n  min1 = '1min',\n  min5 = '5min',\n  min15 = '15min',\n  min30 = '30min',\n  hr1 = '1hr',\n  hr2 = '2hr',\n  hr4 = '4hr',\n  hr12 = '12hr',\n  d1 = '1d',\n  w1 = '1w',\n}\n\nexport interface TradingInfo {\n  symbol: string\n  symbol_base: string\n  symbol_quote: string\n  interval: TradingInterval\n  markets: any\n  tokens: {[key: string]: [value: TokenInfo]}\n  exchangeInfo?: ExchangeInfo\n  wsApiKey: string\n}\n\nconst getBaseQuote = (symbol: string) => {\n  const ind = symbol.indexOf('-')\n  const symbol_base = symbol.substr(ind + 1)\n  const symbol_quote = symbol.substr(0, ind)\n  return {symbol_base, symbol_quote}\n}\n\nconst defaultSymbol = process.env.REACT_APP_TEST_SYMBOL ? process.env.REACT_APP_TEST_SYMBOL : 'LRC-USDT'\nconst defaultInterval = process.env.REACT_APP_TEST_INTERVAL ? process.env.REACT_APP_TEST_INTERVAL : TradingInterval.hr1\n\nconst { symbol_base, symbol_quote } = getBaseQuote(defaultSymbol)\n\nconst initialState = {\n  symbol: defaultSymbol,\n  symbol_base: symbol_base,\n  symbol_quote: symbol_quote,\n  interval: defaultInterval,\n  markets: [],\n  tokens: {},\n  refreshRate: 1000,\n  refreshRateSlow: 3000,\n  wsApiKey: '',\n} as TradingInfo\n\nconst tradingSlice = createSlice({\n  name: 'trading',\n  initialState,\n  reducers: {\n    changeSymbol(state, action: PayloadAction<any>) {\n      state.symbol = action.payload\n      const { symbol_base, symbol_quote } = getBaseQuote(state.symbol)\n      state.symbol_base = symbol_base\n      state.symbol_quote = symbol_quote\n    },\n    changeTradingInterval(state, action: PayloadAction<any>) {\n      state.interval = action.payload\n    },\n    setWsApiKey(state, action: PayloadAction<string>) {\n      state.wsApiKey = action.payload\n    },\n    setMarkets(state, action: PayloadAction<any>) {\n      state.markets = action.payload\n    },\n    setTokens(state, action: PayloadAction<{}>) {\n      state.tokens = action.payload\n    },\n    setExchangeInfo(state, action: PayloadAction<ExchangeInfo>) {\n      state.exchangeInfo = action.payload\n    },\n  },\n})\n\nexport const { changeSymbol, changeTradingInterval, setWsApiKey, setMarkets, setTokens, setExchangeInfo, } = tradingSlice.actions\nexport default tradingSlice\n","export enum Theme {\n    dark = 'dark',\n    light = 'light',\n}\n\nexport enum LangType {\n    en = 'en_US',\n    cn = 'zh_CN',\n}\n\nexport enum SystemStatus {\n    NORMAL,\n    ERROR,\n    UNKNOWN,\n}\n\nexport enum MODAL_TYPE {\n    UNKNOWN,\n    LOADING,\n    WALLET,\n}\n","export enum AccountStatus {\n    UNKNOWN = 'UNKNOWN',\n    UNCONNNECTED = 'UNCONNNECTED',\n    CONNECTED = 'CONNECTED',\n    NOACCOUNT = 'NOACCOUNT',\n    DEPOSITING = 'DEPOSITING',\n    DEPOSIT_TO_CONFIREM = 'DEPOSIT_TO_CONFIREM',\n    UNACTIVATED = 'UNACTIVATED',\n    ARPROVING = 'ARPROVING',\n    APPROV_TO_CONFIRM = 'APPROV_TO_CONFIRM',\n    LOCKED = 'LOCKED',\n    ACTIVATED = 'ACTIVATED',\n}\n\nexport enum StatusChangeEvent {\n    Reset = 'Reset',\n    Connecting = 'Connecting',\n    HasPubkey = 'HasPubkey',\n    HasNoPubkey = 'HasNoPubkey',\n    ErrorResponse = 'ErrorResponse',\n    FinishDeposit = 'FinishDeposit',\n    DepositConfirmed = 'DepositConfirmed',\n    IsSmartWallet = 'IsSmartWallet',\n    ApproveSubmit = 'ApproveSubmit',\n    ApproveConfirmed = 'ApproveConfirmed',\n    Unlock = 'Unlock',\n    Lock = 'Lock',\n}\n\nexport const AccountMachineSpec = (initialState: AccountStatus = AccountStatus.UNCONNNECTED) => \n{\n    return {\n        initialState: initialState,\n        states: {\n            UNCONNNECTED: {\n                Connecting: AccountStatus.CONNECTED,\n                Reset: AccountStatus.UNCONNNECTED,\n            },\n            CONNECTED: {\n                HasPubkey: AccountStatus.LOCKED,\n                HasNoPubkey: AccountStatus.UNACTIVATED,\n                ErrorResponse: AccountStatus.NOACCOUNT,\n                Reset: AccountStatus.UNCONNNECTED,\n            },\n            NOACCOUNT: {\n                ErrorResponse: AccountStatus.NOACCOUNT,\n                Reset: AccountStatus.UNCONNNECTED,\n            },\n            DEPOSITING: {\n                FinishDeposit: AccountStatus.DEPOSIT_TO_CONFIREM,\n                Reset: AccountStatus.UNCONNNECTED,\n            },\n            DEPOSIT_TO_CONFIREM: {\n                HasPubkey: AccountStatus.ACTIVATED,\n                HasNoPubkey: AccountStatus.DEPOSIT_TO_CONFIREM,\n                ErrorResponse: AccountStatus.DEPOSIT_TO_CONFIREM,\n                Reset: AccountStatus.UNCONNNECTED,\n            },\n            UNACTIVATED: {\n                IsSmartWallet: AccountStatus.ARPROVING,\n                Reset: AccountStatus.UNCONNNECTED,\n            },\n            ARPROVING: {\n                ApproveSubmit: AccountStatus.APPROV_TO_CONFIRM,\n                Reset: AccountStatus.UNCONNNECTED,\n            },\n            APPROV_TO_CONFIRM: {\n                ApproveConfirmed: AccountStatus.ACTIVATED,\n                Reset: AccountStatus.UNCONNNECTED,\n            },\n            LOCKED: {\n                Unlock: AccountStatus.ACTIVATED,\n                Reset: AccountStatus.UNCONNNECTED,\n            },\n            ACTIVATED: {\n                Lock: AccountStatus.LOCKED,\n                Reset: AccountStatus.UNCONNNECTED,\n            },\n        },\n    }\n}\n","import { useExchangeAPI } from '@loopring-web/sdk/hooks/common/useApi'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { useCustomDCEffect } from '@loopring-web/sdk/hooks/useCustomDCEffect'\n\n// import { useAuthNoKeyApiInstance, useAuthWsApiInstance, } from '@loopring-web/sdk/hooks/common/useApi'\n\nimport { RootState } from 'stores'\n\nimport { setMarkets, setExchangeInfo, setTokens, } from 'stores/trading/reducer'\n\nexport function useGetTradingInfo() {\n    const tradingInfo = useSelector((state: RootState) => state.trading)\n    return {\n        tradingInfo,\n        exchangeInfo: tradingInfo.exchangeInfo,\n        /*\n        markets: tradingInfo.markets,\n        tokens: tradingInfo.tokens,\n        */\n    }\n}\n\nexport function useUpdateExchangeMarkets() {\n    const dispatch = useDispatch()\n    const api = useExchangeAPI()\n\n    useCustomDCEffect(() => {\n\n        if (!api) {\n            return\n        }\n\n        api.getMarkets().then((response: any) => {\n    \n            dispatch(setMarkets(response))\n    \n        }, (reject: any) => {\n            console.log(reject)\n        })\n\n    }, [api])\n\n}\n\nexport function useUpdateExchangeInfo() {\n\n    const dispatch = useDispatch()\n    const api = useExchangeAPI()\n\n    useCustomDCEffect(() => {\n\n        if (!api) {\n            return\n        }\n\n        api.getExchangeInfo().then((response: any) => {\n            dispatch(setExchangeInfo(response.exchangeInfo))\n        }, (reject: any) => {\n            console.log(reject)\n        })\n\n    }, [api])\n\n}\n\nexport function useUpdateTokens() {\n\n    const dispatch = useDispatch()\n    const api = useExchangeAPI()\n\n    useCustomDCEffect(() => {\n\n        if (!api) {\n            return\n        }\n\n        api.getTokens().then((response: any) => {\n            console.log('useUpdateTokens response:', response)\n            dispatch(setTokens(response.tokenSymbolMap))\n        }, (reject: any) => {\n            console.log(reject)\n        })\n\n    }, [api])\n\n}\n","import { debounce } from 'lodash'\nimport React, { useEffect } from 'react'\nimport { UserStorage } from 'storage'\n\nimport { useCheckAccStatus } from 'stores/account/hook'\n\nimport { useUpdateExchangeInfo, useUpdateExchangeMarkets, useUpdateTokens, } from 'stores/trading/hook'\n\nenum WindowEvent {\n  Click = 'click',\n  Scroll = 'scroll',\n  Mouseover = 'mouseover',\n}\n\nconst events = [WindowEvent.Click, WindowEvent.Scroll]\n\nconst forceReset = debounce(() => { UserStorage.checkTimeout(true) }, 100)\n\nexport const GlobalProvider = ({ children }: { children: React.ReactNode }) => {\n\n  useUpdateExchangeInfo()\n\n  // useUpdateExchangeMarkets()\n  // useUpdateTokens()\n\n  useCheckAccStatus()\n\n  useEffect(() => {\n\n    events.forEach((event: string) => {\n      document.addEventListener(event, forceReset)\n    })\n\n    return () => {\n\n      events.forEach((event: string) => {\n        document.removeEventListener(event, forceReset)\n      })\n    }\n\n  }, [])\n\n  return (\n    <React.Fragment>\n      { children}\n    </React.Fragment>\n  )\n\n}\n","import React, { useState, useEffect } from 'react'\nimport styled from '@emotion/styled/macro'\nimport { useTranslation } from 'react-i18next'\n\nimport { useWeb3React } from '@web3-react/core'\n\nimport { network } from '@loopring-web/sdk/networks/web3_connectors'\n\nimport { useEagerConnect, useInactiveListener } from '@loopring-web/sdk/hooks/web3/useWeb3'\nimport { reset, setAccountStatus } from 'stores/account/reducer'\n\nimport { ChainId, NetworkContextName } from '@loopring-web/sdk/defs/web3_defs'\n\n// import Loader from 'components/modals/Loader'\nimport { useDispatch } from 'react-redux'\nimport { AccountStatus } from 'state_machine/account_machine_spec'\n\nconst MessageWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  height: 20rem;\n`\n\nconst Message = styled.h2`\n  color: ${({ theme }) => theme.colorBase.error};\n`\n\nexport function Web3ReactManager({ children }: { children: JSX.Element }) {\n  const { t } = useTranslation()\n  const { active } = useWeb3React()\n  const { active: networkActive, error: networkError, activate: activateNetwork } = useWeb3React(NetworkContextName)\n\n  // try to eagerly connect to an injected provider, if it exists and has granted access already\n  const triedEager = useEagerConnect()\n\n  // after eagerly trying injected, if the network connect ever isn't active or in an error state, activate itd\n  useEffect(() => {\n    if (triedEager && !networkActive && !networkError && !active) {\n      activateNetwork(network)\n    }\n  }, [triedEager, networkActive, networkError, activateNetwork, active])\n\n  // when there's no account connected, react to logins (broadly speaking) on the injected provider, if it exists\n  \n  const dispatch = useDispatch()\n\n  const onReConnectInjected = () => {\n    console.log('onReConnectInjected')\n    dispatch(reset())\n    dispatch(setAccountStatus(AccountStatus.UNCONNNECTED))\n  }\n  \n  useInactiveListener(onReConnectInjected, !triedEager)\n\n  // handle delayed loader state\n  const [showLoader, setShowLoader] = useState(false)\n  useEffect(() => {\n    const timeout = setTimeout(() => {\n      setShowLoader(true)\n    }, 600)\n\n    return () => {\n      clearTimeout(timeout)\n    }\n  }, [])\n\n  // on page load, do nothing until we've tried to connect to the injected connector\n  if (!triedEager) {\n    return null\n  }\n\n  // if the account context isn't active, and there's an error on the network context, it's an irrecoverable error\n  if (!active && networkError) {\n    return (\n      <MessageWrapper>\n        <Message>{t('unknownError')}</Message>\n      </MessageWrapper>\n    )\n  }\n\n  // if neither context is active, spin\n  if (!active && !networkActive) {\n    return showLoader ? (\n      <MessageWrapper>\n        {/*<Loader />*/}\n      </MessageWrapper>\n    ) : null\n  }\n\n  return children\n}\n","import React from 'react'\n\nexport const DevWrapper = ({ children }: { children: React.ReactNode }) => {\n\n  return (\n    <React.Fragment>\n      {\n        process.env.NODE_ENV !== 'production' ? (\n          <>\n          {children}\n          </>\n        ) : null\n      }\n    </React.Fragment>\n  )\n\n}\n\n","import { ConnectorNames } from '@loopring-web/sdk/defs/web3_defs'\n\nimport {\n    injected,\n    network,\n    walletconnect,\n    walletlink,\n    ledger,\n    trezor,\n    authereum,\n} from '@loopring-web/sdk/networks/web3_connectors'\n\nexport const connectorsByName: { [connectorName in ConnectorNames]: any } = {\n    [ConnectorNames.Unknown]: undefined,\n    [ConnectorNames.Injected]: injected,\n    [ConnectorNames.Network]: network,\n    [ConnectorNames.WalletConnect]: walletconnect,\n    [ConnectorNames.WalletLink]: walletlink,\n    [ConnectorNames.Ledger]: ledger,\n    [ConnectorNames.Trezor]: trezor,\n    [ConnectorNames.Authereum]: authereum,\n}\n","import { useState, useCallback, useMemo, useRef, } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\n\nimport { useCustomDCEffect } from '@loopring-web/sdk/hooks/useCustomDCEffect'\n\nimport { useGetTradingInfo } from 'stores/trading/hook'\nimport { useActiveWeb3React, } from '@loopring-web/sdk/hooks/web3/useWeb3'\n\nimport { Lv2Account, } from 'defs/account_defs'\n\nimport { AccountStatus, StatusChangeEvent } from 'state_machine/account_machine_spec'\n\nimport * as sign_tools from '@loopring-web/sdk/api/sign/sign_tools'\n\nimport { connectorsByName } from 'defs/web3_defs'\n\nimport { ConnectorNames, } from '@loopring-web/sdk/defs/web3_defs'\n\nimport { RootState } from 'stores'\n\nimport {\n    reset, setAccountStatus, setConnectName,\n    setConnectNameTemp, setAccountInfo, setEddsaKey, setApikey, setAccAddr,\n} from 'stores/account/reducer'\n\nimport { AccountMachineSpec, } from 'state_machine/account_machine_spec'\n\nimport { buildMachine } from 'state_machine/machine_builder'\n\nimport voca from 'voca'\nimport { usePrevious } from 'react-use'\n\nimport Web3 from 'web3'\n\nimport { ExchangeAPI, UserAPI, } from '@loopring-web/sdk/api'\nimport { useExchangeAPI, useUserAPI } from '@loopring-web/sdk/hooks/common/useApi'\n\nimport { toHex, toBig, } from '@loopring-web/sdk/api/common/formatter'\n\nimport { dumpError400 } from '@loopring-web/sdk/utils/network_tools'\nimport { UserStorage } from 'storage'\n\nimport store from 'stores'\n\nexport function useWeb3Account() {\n\n    const {\n        connector,\n        library,\n        account,\n        chainId,\n        active,\n        error,\n    } = useActiveWeb3React()\n\n    const isConnected: boolean = active && !voca.isBlank(account as string)\n\n    return {\n        account,\n        connector,\n        library,\n        chainId,\n        active,\n        isConnected,\n        error,\n    }\n\n}\n\nexport function useAccount() {\n\n    const account: Lv2Account = useSelector((state: RootState) => state.account)\n\n    const isNoAccount = () => {\n        return account.status === AccountStatus.NOACCOUNT\n    }\n\n    const isActivated = () => {\n        return account.status === AccountStatus.ACTIVATED\n    }\n\n    return {\n        account,\n        isNoAccount,\n        isActivated,\n        apiKey: account.apiKey,\n        eddsaKey: account.eddsaKey,\n        accountId: account.accountId,\n    }\n}\n\nexport function useStateMachine() {\n    const dispatch = useDispatch()\n\n    const machine = buildMachine(AccountMachineSpec())\n\n    const sendEvent = useCallback((account: Lv2Account, event: StatusChangeEvent) => {\n        const nextState = machine(account.status, event)\n        if (nextState) {\n            dispatch(setAccountStatus(nextState))\n        }\n    }, [machine, dispatch])\n\n    return {\n        sendEvent,\n    }\n}\n\nexport function useConnect() {\n\n    const {\n        activate,\n    } = useActiveWeb3React()\n\n    const { sendEvent } = useStateMachine()\n\n    const dispatch = useDispatch()\n\n    const [activatingConnector, setActivatingConnector] = useState<any>()\n\n    const connect = useCallback((item_name: ConnectorNames, isSwitch: boolean = false) => {\n        const newConnector: any = connectorsByName[item_name]\n        setActivatingConnector(newConnector)\n        activate(newConnector)\n        dispatch(setConnectNameTemp(item_name))\n\n        if (isSwitch) {\n            console.log('try Connecting... isSwitch Reset')\n            sendEvent(store.getState().account, StatusChangeEvent.Reset)\n        }\n\n        sendEvent(store.getState().account, StatusChangeEvent.Connecting)\n\n        console.log('try Connecting...')\n    }, [activate, dispatch, sendEvent])\n\n    return {\n        connect,\n        activatingConnector,\n    }\n\n}\n\nexport function useDisconnect() {\n\n    const {\n        deactivate,\n    } = useActiveWeb3React()\n\n    const dispatch = useDispatch()\n\n    const disconnect = useCallback(() => {\n        deactivate()\n        dispatch(reset())\n    }, [deactivate, dispatch])\n\n    return {\n        disconnect,\n    }\n\n}\n\nexport function useUnlock() {\n\n    const dispatch = useDispatch()\n\n    const exchangeApi: any = useExchangeAPI()\n\n    const userApi: any = useUserAPI()\n\n    const { exchangeInfo } = useGetTradingInfo()\n\n    const { connector, } = useWeb3Account()\n\n    const { sendEvent } = useStateMachine()\n\n    const lock = useCallback(async (account: Lv2Account) => {\n        console.log('useCallback lock:', account.status)\n        sendEvent(account, StatusChangeEvent.Lock)\n    }, [sendEvent])\n\n    const unlock = useCallback(async (account: Lv2Account) => {\n\n        if (!userApi || !exchangeApi || !connector || !account.accountId || !exchangeInfo?.exchangeAddress\n            || account.status !== AccountStatus.LOCKED) {\n            console.log('accountId:', account.accountId)\n            console.log('exchangeAddress:', exchangeInfo)\n            console.log('enter !! account.status:', account.status)\n            return\n        }\n\n        console.log('useUnlock useCallback:', account.status)\n\n        if (account.status !== AccountStatus.LOCKED) {\n            throw Error('unexpected status:' + account.status)\n        }\n\n        let event = undefined\n        let sk = undefined\n        let apikey: any = undefined\n\n        try {\n            const provider = await connector.getProvider()\n            const web3 = new Web3(provider as any)\n            console.log('useUnlock eddsaKey:', account.eddsaKey)\n\n            if (!account.eddsaKey) {\n                const eddsakey = await sign_tools\n                    .generateKeyPair(\n                        web3,\n                        account.accAddr,\n                        exchangeInfo?.exchangeAddress as string,\n                        account.nonce - 1,\n                        account.connectName,\n                    )\n                sk = toHex(toBig(eddsakey.keyPair.secretKey))\n\n            } else {\n                sk = account.eddsaKey\n            }\n\n            apikey = await userApi.getUserApiKey({\n                accountId: account.accountId\n            }, sk)\n\n            console.log('useUnlock apikey:', apikey)\n\n            event = StatusChangeEvent.Unlock\n\n        } catch (reason) {\n            event = StatusChangeEvent.Reset\n        }\n\n        if (sk) {\n            dispatch(setEddsaKey(sk))\n        }\n\n        if (apikey?.apiKey) {\n            dispatch(setApikey(apikey.apiKey))\n        }\n\n        console.log('next event:', event)\n        if (event) {\n            sendEvent(account, event)\n        }\n\n    }\n        , [dispatch, sendEvent, exchangeApi, userApi, connector, exchangeInfo])\n\n    return {\n        lock,\n        unlock,\n    }\n}\n\nasync function checkAccountAvailableAsync(exchangeApi: ExchangeAPI, userApi: UserAPI, account: Lv2Account, dispatch: any, sendEvent: any, connector: any, exchangeAddress: string) {\n\n    let accInfo = undefined\n    let event = undefined\n    let sk = undefined\n    let code = undefined\n    let apikey: any = undefined\n\n    try {\n        accInfo = await exchangeApi.getAccount({\n            owner: account.accAddr\n        })\n        if (accInfo.publicKey && accInfo.publicKey.x && accInfo.publicKey.y) {\n            if (account.accountId !== accInfo.accountId) {\n                const provider = await connector.getProvider()\n                const web3 = new Web3(provider as any)\n                try {\n                    code = await web3.eth.getCode(account.accAddr)\n                    // console.log('!!!!!! about to generateKeyPair!!!!!!!!!!!')\n                    try {\n                        const eddsakey = await sign_tools\n                            .generateKeyPair(\n                                web3,\n                                account.accAddr,\n                                exchangeAddress,\n                                accInfo.nonce - 1,\n                                account.connectName,\n                            )\n                        sk = toHex(toBig(eddsakey.keyPair.secretKey))\n                        const px = toHex(toBig(eddsakey.keyPair.publicKeyX))\n                        const py = toHex(toBig(eddsakey.keyPair.publicKeyY))\n\n                        try {\n                            apikey = await userApi.getUserApiKey({\n                                accountId: accInfo.accountId\n                            }, sk)\n                            event = (StatusChangeEvent.HasPubkey)\n                        } catch (reason) {\n                            dumpError400(reason)\n                            event = (StatusChangeEvent.ErrorResponse)\n                        }\n                    } catch (reason) {\n                        dumpError400(reason)\n                        event = (StatusChangeEvent.ErrorResponse)\n                    }\n\n                } catch (reason) {\n                    dumpError400(reason)\n                    event = (StatusChangeEvent.ErrorResponse)\n                }\n\n            } else {\n                console.log('already has accountId!')\n            }\n        } else {\n            console.log('2 has id but no pubkey currStatus:', account.status)\n            event = (StatusChangeEvent.HasNoPubkey)\n        }\n    } catch (reason) {\n        // 3 has none of above\n        console.log('2 has id but no pubkey currStatus:', account.status)\n        dumpError400(reason)\n        // check deposit tx (local and ethereum)\n        event = (StatusChangeEvent.ErrorResponse)\n    }\n\n    if (accInfo && accInfo.owner !== account.accAddr) {\n        dispatch(setAccountInfo(accInfo))\n    }\n\n    if (sk) {\n        dispatch(setEddsaKey(sk))\n    }\n\n    if (apikey) {\n        console.log('---------> apikey:', apikey)\n        dispatch(setApikey(apikey.apiKey))\n    }\n\n    if (event) {\n        sendEvent(event)\n    }\n\n}\n\nexport function useCheckAccStatus() {\n\n    const dispatch = useDispatch()\n\n    const { account } = useAccount()\n\n    const { sendEvent } = useStateMachine()\n\n    const exchangeApi: ExchangeAPI = useExchangeAPI()\n\n    const userApi: UserAPI = useUserAPI()\n\n    const { account: web3Account, active, isConnected, chainId, connector, } = useWeb3Account()\n\n    const lv1Acc = web3Account as string\n\n    const prevChainId = usePrevious(chainId)\n    const prevWeb3Account = usePrevious(web3Account)\n\n    // console.log('prevChainId:', prevChainId, ' chainId:', chainId)\n    // console.log('prevWeb3Account:', prevWeb3Account, ' web3Account:', web3Account)\n\n    // console.log(exchangeApi, userApi, account, 'prevChainId:', prevChainId, 'chainId:', chainId, 'web3Account:', web3Account)\n\n    const { exchangeInfo } = useGetTradingInfo()\n\n    useCustomDCEffect(async () => {\n\n        const cleanUp = () => {\n            let handler = UserStorage.getHandler()\n            if (account.status !== AccountStatus.ACTIVATED && handler) {\n                clearInterval(handler)\n            }\n        }\n\n        async function checkStatus() {\n\n            if (!account || !lv1Acc || !exchangeApi || !userApi || !connector || !exchangeInfo?.exchangeAddress) {\n                console.log('checkStatus return!!!!!!')\n                return\n            }\n\n            if (((prevChainId && chainId && prevChainId !== chainId)\n                || (prevWeb3Account && web3Account && prevWeb3Account !== web3Account))\n                && account.status !== AccountStatus.UNCONNNECTED) {\n\n                console.log('checkStatus try to resetFunc')\n                dispatch(reset())\n                sendEvent(account, StatusChangeEvent.Reset)\n                return\n            }\n\n            cleanUp()\n\n            switch (account.status) {\n                case AccountStatus.UNCONNNECTED:\n                    console.log('---> render UNCONNNECTED active:', active, ' isConnected:', isConnected)\n\n                    if (isConnected) {\n                        dispatch(setConnectNameTemp(ConnectorNames.Injected))\n                        sendEvent(account, StatusChangeEvent.Connecting)\n                    }\n\n                    break\n\n                case AccountStatus.CONNECTED:\n                    //check session or local storage\n\n                    console.log('---> render CONNECTED account:', account)\n\n                    try {\n\n                        const acc = await exchangeApi.getAccount({ owner: lv1Acc })\n\n                        // current acc is local acc info\n                        if (account.accAddr && account.eddsaKey && acc.owner === account.accAddr) {\n                            console.log('cur Eddsakey:', account.eddsaKey)\n                        } else {\n                            console.log('got a new address:', acc)\n                            // got a new address\n                            dispatch(setAccountInfo(acc))\n                            // dispatch(setEddsaKey(''))\n                        }\n\n                        if (account?.connectName !== account?.connectNameTemp) {\n                            dispatch(setConnectName(account.connectNameTemp))\n                        }\n\n                        sendEvent(account, StatusChangeEvent.HasPubkey)\n\n                    } catch (reason) {\n                        dumpError400(reason)\n                        if (lv1Acc) {\n                            dispatch(setAccAddr(lv1Acc))\n                        }\n                        if (reason.response.data.resultInfo.code === 101002) {\n                            sendEvent(account, StatusChangeEvent.ErrorResponse)\n                        }\n                    }\n\n                    break\n\n                case AccountStatus.NOACCOUNT:\n                    break\n\n                case AccountStatus.DEPOSITING:\n                    // TODO sub contract event, check deposit.\n                    const depositFinished = true // TODO\n                    if (depositFinished) {\n                        console.log('depositFinished currStatus:', account.status)\n                        sendEvent(account, StatusChangeEvent.FinishDeposit)\n                    }\n                    break\n\n                case AccountStatus.DEPOSIT_TO_CONFIREM:\n                    // getAccount every 10s to check\n                    break\n\n                case AccountStatus.UNACTIVATED:\n                    const isSmartWallet = false // TODO\n                    if (isSmartWallet) {\n                        // TODO approve hash,\n                        console.log('approve hash, currStatus:', account.status)\n                        sendEvent(account, StatusChangeEvent.IsSmartWallet)\n                    } else {\n                        console.log('approve hash no smartwallet, account.status:', account.status)\n                    }\n                    break\n\n                case AccountStatus.ARPROVING:\n                    // TODO sub contract event, check approving.\n                    const approved = false // TODO\n                    if (approved) {\n                        console.log('sub contract event, check approving. approved! status:', account.status)\n                        sendEvent(account, StatusChangeEvent.ApproveSubmit)\n                    }\n                    break\n\n                case AccountStatus.APPROV_TO_CONFIRM:\n                    const approveConfirmed = false // TODO\n                    if (approveConfirmed) {\n                        console.log('approveConfirmed status:', account.status)\n                        sendEvent(account, StatusChangeEvent.ApproveConfirmed)\n                    }\n                    break\n\n                case AccountStatus.LOCKED:\n                    break\n\n                case AccountStatus.ACTIVATED:\n                    UserStorage.checkTimeout(true)\n                    const handler = setInterval(() => {\n                        const isTimeOut = UserStorage.checkTimeout()\n                        if (account.status === AccountStatus.ACTIVATED && isTimeOut) {\n                            clearInterval(handler)\n                            sendEvent(account, StatusChangeEvent.Lock)\n                        }\n                    }, 1000)\n                    UserStorage.setHandler(handler)\n                    break\n\n                default:\n                    break\n            }\n\n\n\n        }\n\n        checkStatus()\n\n        return () => {\n            cleanUp()\n        }\n\n    }, [exchangeApi, userApi, account, prevChainId, chainId, lv1Acc, dispatch, connector, exchangeInfo?.exchangeAddress,])\n\n}\n","export const buildMachine = <S, E>(spec: any) => (currentState: S, event: E) => {\n    // We get all possible transitions for the current State\n    const stateTransitions = spec.states[currentState]\n\n    // No transitions? Error!\n    if (stateTransitions === undefined) {\n        throw new Error(`No transitions defined for ${currentState}`)\n    }\n\n    // We try to transition to the next state\n    const nextState = stateTransitions[event]\n\n    // No next state? Error!\n    if (nextState === undefined) {\n        throw new Error(\n            `Unknown transition for event ${event} in state ${currentState}`\n        )\n    }\n\n    console.log('got nextState:', nextState)\n\n    // We return the new state\n    return nextState\n}\n","import { useCallback } from \"react\";\nimport { useDispatch } from \"react-redux\"\n\nimport {\n    setShowDeposit,\n    setShowResetAccount,\n    setShowTransfer,\n    setShowWithdraw,\n} from '@loopring-web/component-lib'\nimport { useTranslation } from \"react-i18next\";\nimport store from 'stores'\nimport { AccountStatus } from \"state_machine/account_machine_spec\";\n\nexport function useModals() {\n\n    const dispatch = useDispatch()\n\n    const { t } = useTranslation('common')\n\n    const ShowDeposit = useCallback((isShow: boolean)=>{\n        const isNoAccount = store.getState().account.status === AccountStatus.NOACCOUNT\n\n        console.log('isNoAccount: ', isNoAccount, t('depositTitleAndActive'))\n        const action = {\n            isShow,\n            props: {\n                title: isNoAccount ? t('depositTitleAndActive') : t('depositTitle')\n            }\n        }\n        dispatch(setShowDeposit(action))\n    }, [dispatch])\n    const ShowTransfer = useCallback((isShow: boolean)=>dispatch(setShowTransfer({isShow})), [dispatch])\n    const ShowWithdraw = useCallback((isShow: boolean)=>dispatch(setShowWithdraw({isShow})), [dispatch])\n    const ShowResetAccount = useCallback((isShow: boolean)=>dispatch(setShowResetAccount({isShow})), [dispatch])\n\n    return {\n        ShowDeposit,\n        ShowTransfer,\n        ShowWithdraw,\n        ShowResetAccount,\n    }\n}","import * as fm from '@loopring-web/sdk/api/common/formatter'\nimport BigNumber from 'bignumber.js'\n\nimport { CoinInfo, CoinMap, } from '@loopring-web/component-lib/static-resource'\n\nimport { utils } from 'ethers'\n\nconst MULTI_FACTOR = 10000\n\nexport enum SwapStatus {\n    Normal = 'Normal',\n    EmptyInput = 'EmptyInput',\n    ExceedUserBalance = 'ExceedUserBalance',\n    ExceedPoolBalance = 'ExceedPoolBalance',\n    Loading = 'Loading',\n}\n\nexport const checkStatus = (baseAmt: any, MaxBaseAmt: any, quoteAmt: any, MaxQuoteAmt: any) => {\n    let newStatus = SwapStatus.Normal\n\n    baseAmt = new BigNumber(baseAmt)\n    MaxBaseAmt = new BigNumber(MaxBaseAmt)\n    quoteAmt = new BigNumber(quoteAmt)\n    MaxQuoteAmt = new BigNumber(MaxQuoteAmt)\n\n    const zero = new BigNumber(0)\n\n    if (baseAmt.gt(MaxBaseAmt)) {\n        newStatus = SwapStatus.ExceedUserBalance\n    } else if (quoteAmt.gt(MaxQuoteAmt)) {\n        newStatus = SwapStatus.ExceedPoolBalance\n    } else if (baseAmt.eq(zero) || quoteAmt.eq(zero)) {\n        newStatus = SwapStatus.EmptyInput\n    }\n\n    const isNormal = newStatus === SwapStatus.Normal\n\n    return {\n        isNormal,\n    }\n\n}\n\nexport function getIcon(symbol: string, tokens: any) {\n    const baseToken: any = tokens[symbol]\n    if (baseToken) {\n        const addr = utils.getAddress(baseToken.address)\n        const path = `https://exchange.loopring.io/assets/images/ethereum/assets/${addr}/logo.png`\n        return path\n    }\n    return ''\n}\n\nexport const getLeft = (pairs: any, tokens: any) => {\n    if (pairs) {\n\n        const left = Reflect.ownKeys(pairs)\n\n        let coinMapLeft: CoinMap<any, CoinInfo<any>> = {}\n\n        //https://exchange.loopring.io/assets/images/ethereum/assets/0x9A0aBA393aac4dFbFf4333B06c407458002C6183/logo.png\n\n        left.forEach((key: any) => {\n            coinMapLeft[key] = {\n                icon: getIcon(key, tokens),\n                name: key,\n                simpleName: key,\n                description: '',\n                company: ''\n            }\n        })\n\n        return {\n            left,\n            coinMapLeft,\n        }\n    }\n\n    return undefined\n}\n\nexport const getRight = (pairs: any, left: any, tokens: any) => {\n    if (pairs) {\n        const right = pairs[left].tokenList\n\n        let coinMapRight: CoinMap<any, CoinInfo<any>> = {}\n\n        if (right) {\n            right.forEach((key: any) => {\n                coinMapRight[key] = {\n                    icon: getIcon(key, tokens),\n                    name: key,\n                    simpleName: key,\n                    description: '',\n                    company: ''\n                }\n            })\n\n            return {\n                right,\n                coinMapRight,\n            }\n        }\n    }\n    return undefined\n}\n\nexport const getToken = (tokens: any, token: any) => {\n    if (!tokens) {\n        throw Error('no tokens list!')\n    }\n    return tokens[token]\n}\n\nexport const getTokenInfoByToken = (ammBalance: any, tokens: any, token: any) => {\n\n    const tokenInfo = getToken(tokens, token)\n\n    // console.log(' tokenInfo:', tokenInfo, ' tokens:', tokens, ' token:', token)\n    const tokenVol = ammBalance.pooledMap[tokenInfo.tokenId].volume\n    const reserve = fm.toBig(tokenVol)\n\n    // console.log(' tokenInfo:', tokenInfo, ' tokenVol:', tokenVol)\n\n    return {\n        tokenInfo, tokenVol, reserve,\n    }\n}\n\nconst getKey = (base: any, quote: any) => {\n    // const isLRCETH = (base === 'LRC' && quote === 'ETH') || (base === 'ETH' && quote === 'LRC')\n\n    if (!base || !quote) {\n        return {\n            key: undefined,\n            key_bak: undefined,\n            isOK: false,\n        }\n    }\n\n    const isLRCETH = false\n    const key = isLRCETH ? 'LRCETH-Pool' : ('AMM-' + base + '-' + quote)\n    const key_bak = isLRCETH ? 'LRCETH-Pool' : ('AMM-' + quote + '-' + base)\n    return {\n        key,\n        key_bak,\n        isOK: true,\n    }\n}\n\nconst getInfoByKey = (raw_data: any, keyPair: any) => {\n    const {\n        key,\n        key_bak,\n    } = keyPair\n\n    if (raw_data[key]) return raw_data[key]\n    return raw_data[key_bak]\n}\n\nexport const getBalances = (ammpools: any, ammPoolsBalances: any, base: any, quote: any, tokens: any) => {\n\n    const { ammInfo,\n        ammBalance,\n    } = getAmmInfo(ammpools, ammPoolsBalances, base, quote)\n\n    const baseToken = getToken(tokens, base)\n    const quoteToken = getToken(tokens, quote)\n\n    const baseBalance = ammBalance.pooledMap[baseToken.tokenId]\n    const quoteBalance = ammBalance.pooledMap[quoteToken.tokenId]\n\n    return {\n        ammInfo,\n        ammBalance,\n        baseBalance,\n        quoteBalance,\n    }\n\n}\n\nexport const getAmmInfoOnly = (ammpools: any, base: any, quote: any) => {\n\n    const keyPair = getKey(base, quote)\n    // console.log('keyPair:', keyPair)\n\n    const ammInfo = getInfoByKey(ammpools, keyPair)\n\n    if (!ammInfo) {\n        throw Error('no ammInfo!')\n    }\n\n    return {\n        ammInfo,\n    }\n\n}\n\nexport const getAmmInfo = (ammpools: any, ammPoolsBalances: any, base: any, quote: any) => {\n\n    const keyPair = getKey(base, quote)\n\n    const ammInfo = getInfoByKey(ammpools, keyPair)\n    const ammBalance = getInfoByKey(ammPoolsBalances, keyPair)\n\n    if (!ammInfo || !ammBalance) {\n        throw Error('no ammInfo! no ammBalance!')\n    }\n\n    const feeBips = parseInt(ammInfo.feeBips)\n\n    return {\n        ammInfo,\n        ammBalance,\n        feeBips,\n    }\n\n}\n\nconst getAmt = (rawAmt: any, tokenInfo: any) => {\n    if (rawAmt === undefined) {\n        rawAmt = 0\n    }\n\n    return fm.toBig(rawAmt).times('1e' + tokenInfo.decimals)\n}\n\nexport const applySlippageTolerance = (\n    tokens: any,\n    token: any,\n    value: any,\n    slippageTolerance: number = 0.01\n) => {\n    const tokenInfo = getToken(tokens, token)\n    const f = 1e7\n    const feeFactor = fm.toBig(f * (1 - slippageTolerance))\n    const amount = fm.toBig(value).times('1e' + tokenInfo.decimals)\n    const outInWei = amount.times(feeFactor).dividedBy(f)\n    const out = fromWEI(tokens, token, outInWei)\n\n    return {\n        outInWei,\n        out,\n    }\n}\n\nexport const applyOrderFee = (tokens: any, token: any, value: any, feeBip: any) => {\n    const tokenInfo = getToken(tokens, token)\n    const feeFactor = fm.toBig(MULTI_FACTOR - feeBip)\n    const amount = fm.toBig(value).times('1e' + tokenInfo.decimals)\n    const appliedAmount = amount.times(feeFactor).dividedBy(MULTI_FACTOR)\n    return appliedAmount\n}\n\nexport function fromWEI(tokens: any, symbol: any, valueInWEI: any, precision?: any, ceil?: any) {\n    try {\n        const tokenInfo = getToken(tokens, symbol)\n        const precisionToFixed = precision ? precision : tokenInfo.precision\n        const value = fm.toBig(valueInWEI).div('1e' + tokenInfo.decimals)\n        return fm.toFixed(value, precisionToFixed, ceil)\n    } catch (error) {\n        return 0\n    }\n}\n\n\nexport function toWEI(tokens: any, symbol: any, value: any, rm: any = 3) {\n    const tokenInfo = getToken(tokens, symbol)\n    if (typeof tokenInfo === 'undefined') {\n        return 0\n    }\n\n    return fm.toBig(value)\n        .times('1e' + tokenInfo.decimals)\n        .toFixed(0, rm)\n}\n\nexport const getAmountOut = (amt: any, ammpools: any, ammPoolsBalances: any, tokens: any,\n    base: any, quote: any, takerRate: number, currentPrice: number) => {\n\n    if (amt === undefined) {\n        amt = 0\n    }\n\n    const { ammBalance, feeBips, } = getAmmInfo(ammpools, ammPoolsBalances, base, quote)\n\n    const { tokenInfo: baseTokenInfo, reserve: reserveIn } = getTokenInfoByToken(ammBalance, tokens, base)\n    const { tokenInfo: quoteTokenInfo, reserve: reserveOut } = getTokenInfoByToken(ammBalance, tokens, quote)\n\n    const amountIn = getAmt(amt, baseTokenInfo)\n    const feeBipsFactor = fm.toBig(MULTI_FACTOR - feeBips)\n    const amountInWithFee = amountIn.times(feeBipsFactor)\n    const numerator = amountInWithFee.times(reserveOut)\n    const denominator = reserveIn.times(MULTI_FACTOR).plus(amountInWithFee)\n    const amountOutInWei: any = numerator.dividedBy(denominator)\n\n    let quoteAmt: any = fromWEI(tokens, quote, amountOutInWei)\n\n    const _amount1ApplyOrderFeeInWei = applyOrderFee(tokens, quote, quoteAmt, takerRate + feeBips)\n\n    let _amount1ApplyOrderFee = Number(fromWEI(tokens, quote, _amount1ApplyOrderFeeInWei))\n\n    let priceImpact = 0\n    if (_amount1ApplyOrderFee < 0) {\n        _amount1ApplyOrderFee = 0\n        quoteAmt = null\n    } else {\n        const newPrice = Number(quoteAmt) / Number(amt)\n        priceImpact = (newPrice - currentPrice) / currentPrice\n    }\n\n    // console.log('got:', ammBalance)\n\n    return {\n        quoteAmt,\n        _amount1ApplyOrderFeeInWei,\n        _amount1ApplyOrderFee,\n        priceImpact,\n    }\n\n}\n\nexport const getAmountOut_Reverse = (amt: any, ammpools: any, ammPoolsBalances: any, tokens: any,\n    base: any, quote: any, takerRate: number, currentPrice: number) => {\n\n    if (amt === undefined) {\n        amt = 0\n    }\n\n    // console.log('amt:', amt, 'ammpools:', ammpools, 'ammPoolsBalances:', ammPoolsBalances, ' base:', base, ' quote:', quote)\n\n    const { ammBalance, feeBips, } = getAmmInfo(ammpools, ammPoolsBalances, base, quote)\n\n    const { tokenInfo: baseTokenInfo, reserve: reserveIn } = getTokenInfoByToken(ammBalance, tokens, base)\n    const { tokenInfo: quoteTokenInfo, reserve: reserveOut } = getTokenInfoByToken(ammBalance, tokens, quote)\n\n    const amountOut = getAmt(amt, quoteTokenInfo)\n\n    if (amountOut.gt(reserveOut)) {\n        return {\n            baseAmt: 0,\n            _amount1ApplyOrderFeeInWei: 0,\n            _amount1ApplyOrderFee: 0,\n            priceImpact: 0,\n            hasError: false,\n        }\n    }\n\n    const numerator = amountOut.times(reserveIn).times(MULTI_FACTOR)\n    const feeBipsFactor = fm.toBig(MULTI_FACTOR - feeBips)\n\n    // If amountOut is larger than reserveOut?\n    // It's handled before getAmountOut_reserve\n    const reserveOutSubAmountOut = reserveOut.minus(amountOut)\n\n    const denominator = feeBipsFactor.times(reserveOutSubAmountOut)\n    const amountInInWei = numerator.dividedBy(denominator)\n\n    let baseAmt: any = fromWEI(tokens, quote, amountInInWei)\n\n    const _amount1ApplyOrderFeeInWei = applyOrderFee(tokens, quote, amt, takerRate + feeBips)\n\n    let _amount1ApplyOrderFee = Number(fromWEI(tokens, quote, _amount1ApplyOrderFeeInWei))\n\n    let priceImpact = 0\n    if (_amount1ApplyOrderFee < 0) {\n        _amount1ApplyOrderFee = 0\n        baseAmt = null\n    } else {\n        const newPrice = Number(amt) / Number(baseAmt)\n        priceImpact = (newPrice - currentPrice) / currentPrice\n    }\n\n    // console.log('got:', ammBalance)\n\n    return {\n        baseAmt,\n        _amount1ApplyOrderFeeInWei,\n        _amount1ApplyOrderFee,\n        priceImpact,\n        hasError: false,\n    }\n\n}\n\n/*\nexport const getAmountIn = (amt: any, ammpools: any, ammPoolsBalances: any, tokens: any, base: any, quote: any) => {\n\n    const { ammBalance, feeBips, } = getAmmInfo(ammpools, ammPoolsBalances, base, quote)\n\n    const { tokenInfo: baseTokenInfo, reserve: reserveIn } = getTokenInfoByToken(ammBalance, tokens, base)\n    const { tokenInfo: quoteTokenInfo, reserve: reserveOut } = getTokenInfoByToken(ammBalance, tokens, quote)\n\n    const amountOut = getAmt(amt, quoteTokenInfo)\n    const numerator = reserveIn.times(amountOut).times(MULTI_FACTOR)\n    const denominator = reserveOut.minus(amountOut).times(MULTI_FACTOR - feeBips)\n    const amountIn = numerator.dividedBy(denominator).plus(1)\n\n    // const baseAmt = amountIn.dividedBy('1e' + baseTokenInfo.decimals).toString()\n    const baseAmt = fromWEI(tokens, base, amountIn)\n\n    let amountInShown: any = ''\n    if (baseAmt !== 'NaN') {\n        amountInShown = baseAmt\n    }\n\n    return {\n        amountIn,\n        amountInShown,\n    }\n}\n*/\n","import { useState, } from 'react'\n\nimport { TradesData, TickerData, DepthData, } from '@loopring-web/sdk/defs/exchange_defs'\n\nimport { usePromiseJob } from '@loopring-web/sdk/hooks/common/useCommon'\nimport { useExchangeAPI, } from '@loopring-web/sdk/hooks/common/useApi'\n\nexport function useGetGas() {\n\n  const [gas, setGas] = useState<any>()\n\n  const api = useExchangeAPI()\n\n  const fetchData = () => {\n    if (!api) {\n      return undefined\n    }\n    return api.getGasPrice()\n  }\n\n  usePromiseJob(fetchData, setGas, undefined, 'useGetGas', [api])\n\n  return { gas }\n\n}\n\nexport function useGetMarkets() {\n\n  const [markets, setMarkets] = useState<any>()\n    const api = useExchangeAPI()\n\n    const fetchData = () => {\n      if (!api) {\n        return undefined\n      }\n      return api.getMarkets()\n    }\n  \n    usePromiseJob(fetchData, setMarkets, undefined, 'useGetMarkets', [api])\n    \n    return { markets }\n\n}\n\nexport function useGetExchangeInfo() {\n\n  const [exchangeInfo, setExchangeInfo] = useState<any>()\n    const api = useExchangeAPI()\n\n    const fetchData = () => {\n      if (!api) {\n        return undefined\n      }\n      return api.getExchangeInfo()\n    }\n  \n    usePromiseJob(fetchData, setExchangeInfo, 'exchangeInfo', 'useGetExchangeInfo', [api])\n    \n    return { exchangeInfo }\n\n}\n\nexport function useGetTokens() {\n\n  const [tokens, setTokens] = useState<any>()\n    const api = useExchangeAPI()\n\n    const fetchData = () => {\n      if (!api) {\n        return undefined\n      }\n      return api.getTokens()\n    }\n  \n    usePromiseJob(fetchData, setTokens, undefined, 'useGetTokens', [api])\n    \n    return { tokens }\n\n}\n\n\nexport function useTrades(symbol: string) {\n\n  const [trades, setTrades] = useState<TradesData>()\n\n  const api = useExchangeAPI()\n\n  const fetchData = () => {\n    if (!api) {\n      return undefined\n    }\n    return api.getMarketTrades({\n      market: symbol\n    })\n  }\n\n  usePromiseJob(fetchData, setTrades, undefined, 'useTrades', [api, symbol])\n\n  return { trades, }\n\n}\n\nexport function useTickerMap(market: string) {\n\n  const [tickerMap, setTickerMap] = useState<{[key: string]: TickerData}>()\n\n  const api = useExchangeAPI()\n\n  const fetchData = () => {\n    if (!api) {\n      return undefined\n    }\n    return api.getTicker({\n      market\n    })\n  }\n\n  usePromiseJob(fetchData, setTickerMap, 'tickMap', 'useTickerMap', [api, market])\n\n  return { tickerMap, }\n\n}\n\nexport function useDepth(symbol: string) {\n\n  const api = useExchangeAPI()\n\n  const [depth, setDepth] = useState<DepthData>()\n\n    const fetchData = () => {\n      if (!api) {\n        return undefined\n      }\n      return api.getDepth({\n        market: [symbol]\n      })\n    }\n  \n    usePromiseJob(fetchData, setDepth, 'depth', 'useDepth', [api, symbol])\n\n  return { depth, }\n\n}\n","import { useState, useCallback } from 'react'\n\nimport { useAccount } from 'stores/account/hook'\n\nimport { OrdersData } from '@loopring-web/sdk/defs/exchange_defs'\n\nimport { REFRESH_RATE } from '@loopring-web/sdk/defs/exchange_defs'\nimport { useUserAPI } from '@loopring-web/sdk/hooks/common/useApi'\nimport { dumpError400 } from '@loopring-web/sdk/utils/network_tools'\n\nimport { getToken, fromWEI } from 'utils/swap_calc_utils'\n\nimport * as fm from '@loopring-web/sdk/api/common/formatter'\nimport { useCustomDCEffect } from '@loopring-web/sdk/hooks/useCustomDCEffect'\n\nexport function useOrders() {\n\n  const acc = useAccount().account\n\n  const api = useUserAPI()\n\n  const [orders, setOrders] = useState<OrdersData>()\n\n  useCustomDCEffect(() => {\n\n    if (!acc || !api) {\n      return\n    }\n\n    let mounted = true\n\n    const exit = (id: any) => {\n      mounted = false\n      clearInterval(id)\n    }\n\n    if (acc && acc.accountId > 0) {\n\n      const id: any = setInterval(async () => {\n        try {\n          const orders_data = (await api.getOrders({\n            accountId: acc.accountId\n          }, acc.apiKey)).data\n          if (mounted) {\n            setOrders(orders_data)\n          }\n        } catch (err) {\n          return exit(id)\n        }\n      }, REFRESH_RATE)\n\n      return exit(id)\n\n    }\n  }, [acc, api])\n\n  return {\n    orders,\n  }\n\n}\n\nexport function useGetUserBalancesByToken(token: any) {\n\n  const api = useUserAPI()\n\n  //const [balance, setBalance] = useState<any>({total: '0', locked: '0', availableInWei: '0'})\n\n  const [balance, setBalance] = useState<any>('0')\n\n  const { apiKey, accountId } = useAccount()\n\n  // console.log('enter! useGetUserBalances tokens:', tokens, 'symbol:', symbol, 'apiKey:', apiKey, ' accountId:', accountId )\n\n  useCustomDCEffect(() => {\n    if (!api || !apiKey || !accountId || !token) {\n      return\n    }\n\n    api.getUserBalances({\n      accountId,\n      tokens: token.tokenId\n    }, apiKey).then((data) => {\n      const total = fm.toBig(data[0].total)\n      const locked = fm.toBig(data[0].locked)\n      const availableInWei = total.minus(locked)\n      /*\n      setBalance({\n        total: data[0].total, \n        locked: data[0].locked, \n        availableInWei: availableInWei.toString(),\n        available: fromWEI(tokens, symbol, availableInWei)\n      })\n      */\n      setBalance(availableInWei.toString())\n    }).catch((reason: any) => {\n      dumpError400(reason, 'getUserBalances tokenId:' + token.tokenId)\n    })\n\n  }, [api, apiKey, accountId, token,])\n\n  return {\n    balance,\n    setBalance,\n  }\n\n}\n\nexport function useGetUserBalances(tokens: any, toList: boolean = false) {\n\n  const api = useUserAPI()\n\n  //const [balance, setBalance] = useState<any>({total: '0', locked: '0', availableInWei: '0'})\n\n  const [balances, setBalances] = useState<any>(undefined)\n\n  const { apiKey, accountId } = useAccount()\n\n  // console.log('enter! useGetUserBalances tokens:', tokens, 'symbol:', symbol, 'apiKey:', apiKey, ' accountId:', accountId )\n\n  useCustomDCEffect(() => {\n\n    if (!api || !apiKey || !accountId || !tokens) {\n      return\n    }\n\n    let tokenList: any[] = []\n\n    const keys = Reflect.ownKeys(tokens)\n\n    let tokenMap: any = {}\n\n    keys.forEach((item: any) => {\n      const token = tokens[item]\n      tokenList.push(token.tokenId)\n      tokenMap[token.tokenId] = token\n    })\n\n    api.getUserBalances({\n      accountId,\n      tokens: tokenList.join(',')\n    }, apiKey).then((data) => {\n\n      let balances: any = {\n        map: tokenMap,\n        tokenId: {},\n        symbol: {},\n      }\n\n      data.forEach((item: any) => {\n        const total = fm.toBig(item.total)\n        const locked = fm.toBig(item.locked)\n        const availableInWei = total.minus(locked)\n\n        console.log('item:', item)\n\n        const token = tokenMap[item.tokenId]\n\n        const balance = {\n          total: data[0].total,\n          locked: data[0].locked,\n          availableInWei: availableInWei.toString(),\n          available: fromWEI(tokens, token.symbol, availableInWei)\n        }\n\n        balances.tokenId[item.tokenId] = availableInWei.toString()\n        balances.symbol[token.symbol] = availableInWei.toString()\n      })\n\n      setBalances(balances)\n\n    }).catch((reason: any) => {\n      dumpError400(reason, 'getUserBalances tokenId:' + tokens.tokenId)\n    })\n\n  }, [api, apiKey, accountId, tokens,])\n\n  return {\n    balances,\n    setBalances,\n  }\n\n}\n\nexport function useGetUserBalance(tokens: any, symbol: any) {\n\n  const api = useUserAPI()\n\n  //const [balance, setBalance] = useState<any>({total: '0', locked: '0', availableInWei: '0'})\n\n  const [balance, setBalance] = useState<any>('0')\n\n  const { apiKey, accountId } = useAccount()\n\n  useCustomDCEffect(() => {\n    if (!api || !apiKey || !accountId || !tokens || !symbol) {\n      return\n    }\n\n    const tokenInfo = getToken(tokens, symbol)\n\n    api.getUserBalances({\n      accountId,\n      tokens: tokenInfo.tokenId\n    }, apiKey).then((data) => {\n      const total = fm.toBig(data[0].total)\n      const locked = fm.toBig(data[0].locked)\n      const availableInWei = total.minus(locked)\n      \n      setBalance(availableInWei.toString())\n\n    }).catch((reason: any) => {\n      dumpError400(reason, 'getUserBalances tokenId:' + tokens.tokenId)\n    })\n\n  }, [api, apiKey, accountId, tokens, symbol,])\n\n  return {\n    balance,\n    setBalance,\n  }\n\n}","import React, { useCallback } from 'react'\n\nimport { useTheme } from '@emotion/react'\n\nimport { useTranslation, WithTranslation, withTranslation } from 'react-i18next'\n\nimport {\n    gatewayList as DefaultGatewayList,\n    headerMenuData, HeaderMenuTabStatus,\n    headerToolBarData, HeadMenuTabKey,\n    ButtonComponentsMap, LanguageKeys,\n    WalletStatus,\n    GatewayItem, NavListIndex, HideIcon, ViewIcon, i18n, ThemeKeys,\n} from '@loopring-web/component-lib/src/static-resource'\n\nimport { useAccount, useDisconnect, useUnlock, useConnect, } from 'stores/account/hook'\n\nimport { getShortAddr } from 'utils/web3_tools'\n\nimport { AccountStatus } from 'state_machine/account_machine_spec'\n\nimport { useCustomDCEffect } from '@loopring-web/sdk/hooks/useCustomDCEffect'\n\nimport { Theme, } from 'defs/common_defs'\n\nimport { Button, useSettings } from '@loopring-web/component-lib'\n\nimport store from 'stores'\n\nimport { ConnectorNames } from '@loopring-web/sdk/defs/web3_defs'\nimport { IconButton, Link } from '@material-ui/core';\nimport { AccountInfoProps } from '@loopring-web/component-lib/components/block';\nimport { useEtherscan } from '@loopring-web/sdk/hooks/web3/useWeb3'\n\n\nimport { useModals } from 'hooks/modal/useModals'\n\nimport {useState } from 'react'\nimport Web3 from 'web3'\n\nimport { CoinInfo, CoinMap, IBData, WalletCoin, WalletMap, } from '@loopring-web/component-lib/static-resource'\n\nimport { useExchangeAPI, useUserAPI } from '@loopring-web/sdk/hooks/common/useApi'\n\nimport { fromWEI, getIcon } from 'utils/swap_calc_utils'\nimport { useWeb3Account } from 'stores/account/hook'\nimport { useGetExchangeInfo, useGetTokens } from 'hooks/exchange/useExchangeAPI'\n\nimport * as contract from '@loopring-web/sdk/api/contract_api'\n\nimport { Lv2Account } from 'defs/account_defs'\n\nimport { ExchangeAPI } from '@loopring-web/sdk/api/exchange_api'\nimport { dumpError400 } from '@loopring-web/sdk/utils/network_tools'\n\nimport {\n    GetNextStorageIdRequest,\n    GetOffchainFeeAmtRequest,\n    OffchainFeeReqType,\n    OffChainWithdrawalRequestV3,\n    OriginTransferRequestV3,\n    TokenInfo,\n    VALID_UNTIL,\n} from '@loopring-web/sdk/defs/loopring_defs'\n\nimport { useGetUserBalances } from 'hooks/exchange/useUserAPI'\n\nimport {\n    DepositProps,\n    ResetProps,\n    SwitchData,\n    TradeBtnStatus,\n    TransferProps,\n    WithdrawProps,\n} from '@loopring-web/component-lib'\n\nimport { WithdrawType, WithdrawTypes } from '@loopring-web/component-lib/src/static-resource'\nimport { ButtonProps } from '@loopring-web/component-lib/components/basic-lib/index';\n\n\nexport const useHeader = () => {\n    const { i18n,t } = useTranslation(['common','layout'])\n    const { setTheme,themeMode,language, setLanguage } = useSettings();\n    const { ShowDeposit } = useModals()\n\n    const [open, setOpen] = React.useState(false)\n\n    const forceUpdate = React.useReducer((bool) => !bool, false)[1]\n\n\n    const { account } = useAccount()\n\n    const { lock, unlock } = useUnlock()\n\n    const { disconnect } = useDisconnect()\n\n    const { connect } = useConnect()\n\n    const { etherscanUrl } = useEtherscan()\n\n    const gatewayList: GatewayItem[] = [\n        {\n            ...DefaultGatewayList[0],\n            handleSelect: () => {\n                console.log('try to connect to ', ConnectorNames.Injected)\n                connect(ConnectorNames.Injected, true)\n                setOpen(false)\n            }\n        },\n        /*\n        {\n            key: ConnectorNames.WalletConnect,\n            imgSrc: '',\n            handleSelect: () => {\n                connect(ConnectorNames.WalletConnect)\n                setOpen(false)\n            }\n        },\n        {\n            key: ConnectorNames.Ledger,\n            imgSrc: '',\n            handleSelect: () => {\n                connect(ConnectorNames.Ledger)\n                setOpen(false)\n            }\n        },\n        {\n            key: ConnectorNames.Trezor,\n            imgSrc: '',\n            handleSelect: () => {\n                connect(ConnectorNames.Trezor)\n                setOpen(false)\n            }\n        },\n        */\n    ]\n\n    const [accountInfoProps, setAccountInfoProps] = React.useState<undefined|AccountInfoProps>(undefined)\n    //const theme: any = useTheme()\n\n    const onNotification = React.useCallback(async () => {\n        console.log('onNotification click')\n    }, [])\n\n    const onWalletBtnConnent = React.useCallback(async () => {\n        const acc = store.getState().account\n        console.log(`onWalletBtnConnent click: ${acc.status}`)\n\n        switch (acc.status) {\n            case AccountStatus.NOACCOUNT:\n                ShowDeposit(true)\n                break\n            case AccountStatus.UNCONNNECTED:\n                setOpen(true)\n                break\n            case AccountStatus.LOCKED:\n                console.log('onWalletBtnConnent try to unlock')\n                await unlock(acc)\n                break\n            case AccountStatus.ACTIVATED:\n                console.log('onWalletBtnConnent try to lock')\n                await lock(acc)\n                break\n\n            default:\n                break\n        }\n    }, [setOpen, lock, unlock])\n\n    const onThemeBtnClick = React.useCallback(async (themeMode:ThemeKeys) => {\n        if (themeMode === Theme.dark) {\n            setTheme(Theme.light)\n        } else {\n            setTheme(Theme.dark)\n        }\n    }, [setTheme])\n\n    const onLangBtnClick = (lang: LanguageKeys) => {\n        //i18n.changeLanguage(lang);\n        setLanguage(lang);\n    }\n    const [showAccountInfo, setShowAccountInfo] = React.useState(account?.accAddr ? true : false)\n    const [advanceOpen,setAdvanceOpen] = React.useState(false)\n\n    const handleViewAccountInfo =  React.useCallback((event: React.MouseEvent) => {\n        event.stopPropagation();\n        event.preventDefault();\n        if (showAccountInfo) {\n            // headerMenuData[ NavListIndex.layer2 ].iconBtn.view = false;\n            setShowAccountInfo(false);\n        } else {\n            // headerMenuData[ NavListIndex.layer2 ].iconBtn.view = true;\n            setShowAccountInfo(true);\n        }\n    },[setShowAccountInfo, showAccountInfo])\n\n    // useCustomCompareEffect(()=>{\n    //     if(language!==i18n.language)  {\n    //         headerToolBarData[ButtonComponentsMap.Language] = { ...headerToolBarData[ButtonComponentsMap.Language], language: i18n.language}\n    //     }\n    // },[language],(prevDeps,curDeps)=> prevDeps!== curDeps)\n    //init componment\n    useCustomDCEffect(() => {\n\n\n        headerToolBarData[ButtonComponentsMap.WalletConnect] = {\n            ...headerToolBarData[ButtonComponentsMap.WalletConnect],\n            handleClick: onWalletBtnConnent,\n        }\n\n        // headerToolBarData[ButtonComponentsMap.Notification] = { ...headerToolBarData[ButtonComponentsMap.Theme], themeMode: theme.mode, handleClick: onNotification }\n        // headerToolBarData.update(ButtonComponentsMap.WalletConnect,value=>{\n        //   return {...value, handleClick:onWalletBtnConnent}});\n        headerToolBarData[ButtonComponentsMap.Theme] = { ...headerToolBarData[ButtonComponentsMap.Theme], themeMode, handleClick: onThemeBtnClick }\n        // headerToolBarData.update(ButtonComponentsMap.Theme,value=>{\n        //   return {...value, themeMode:theme.mode, handleClick:onThemeBtnClick}});\n\n        headerToolBarData[ButtonComponentsMap.Language] = { ...headerToolBarData[ButtonComponentsMap.Language], handleChange: onLangBtnClick }\n        // headerToolBarData.update(ButtonComponentsMap.Language,value=>{\n        //  return  {...value, language:i18n.language, handleClick:onThemeBtnClick}});\n    }, [themeMode, language, i18n, onWalletBtnConnent, onThemeBtnClick, onLangBtnClick, onNotification, t]);\n\n    const GoAdvanceBtn = withTranslation('common')(({t}:WithTranslation)=>{\n        return <Button variant={'contained'} size={'small'} color={'primary'} onClick={_e => setAdvanceOpen(true)}>{ t('labelGoAdvance')}</Button>\n    }) as React.ElementType<ButtonProps>\n\n    useCustomDCEffect(() => {\n\n        if (!account) {\n            console.log('account'+account+'* exit')\n            setAccountInfoProps(undefined)\n            return\n        }\n\n        const { status } = account\n\n        const addr = getShortAddr(account?.accAddr)\n\n        if((addr && accountInfoProps && accountInfoProps.address !== addr) || addr ){\n            //TODO getAccount detail info\n            setAccountInfoProps({\n                address: addr,\n                level: 'VIP 1',\n                ethLink: etherscanUrl + account?.accAddr,\n                //TODO: changed by account status\n                mainBtn: <GoAdvanceBtn />\n            })\n        }else if(addr) {\n            setAccountInfoProps(undefined)\n        }\n\n        const updateHeaderMenuWhenHasAccountInfo =  ()=>{\n            headerMenuData[HeadMenuTabKey.Layer2] = {\n                ...headerMenuData[HeadMenuTabKey.Layer2],\n                extender : <IconButton disabled={!account}\n                                       onClick={handleViewAccountInfo}\n                                       aria-label={t('labelShowAccountInfo')} color=\"primary\">\n                    {showAccountInfo ? <HideIcon/> : <ViewIcon/>}</IconButton>,\n                status: HeaderMenuTabStatus.default\n            }\n            // setShowAccountInfo(true);\n        }\n        switch (status) {\n            case AccountStatus.UNCONNNECTED:\n                headerToolBarData[ButtonComponentsMap.WalletConnect] = {\n                    ...headerToolBarData[ButtonComponentsMap.WalletConnect],\n                    label: 'Connect Wallet',\n                    status: WalletStatus.default\n                }\n                headerMenuData[HeadMenuTabKey.Layer2] = {\n                    //TODO:  HeaderMenuTabStatus.hidden\n                    ...headerMenuData[HeadMenuTabKey.Layer2], status: HeaderMenuTabStatus.hidden\n                }\n                break\n            case AccountStatus.LOCKED:\n                headerToolBarData[ButtonComponentsMap.WalletConnect] = {\n                    ...headerToolBarData[ButtonComponentsMap.WalletConnect],\n                    label: addr,\n                    status: WalletStatus.connect\n                };\n\n                updateHeaderMenuWhenHasAccountInfo();\n                break\n            case AccountStatus.ACTIVATED:\n                headerToolBarData[ButtonComponentsMap.WalletConnect] = {\n                    ...headerToolBarData[ButtonComponentsMap.WalletConnect],\n                    label: addr,\n                    status: WalletStatus.unlock\n                }\n\n                updateHeaderMenuWhenHasAccountInfo();\n                break\n            case AccountStatus.UNACTIVATED:\n            case AccountStatus.NOACCOUNT:\n                headerToolBarData[ButtonComponentsMap.WalletConnect] = {\n                    ...headerToolBarData[ButtonComponentsMap.WalletConnect],\n                    // TODO got cache address if no show Connect Wallet\n                    label: addr,\n                    status: WalletStatus.noAccount\n                }\n\n                updateHeaderMenuWhenHasAccountInfo();\n                break\n            case AccountStatus.DEPOSITING:\n            case AccountStatus.DEPOSIT_TO_CONFIREM:\n            case AccountStatus.ARPROVING:\n            case AccountStatus.APPROV_TO_CONFIRM:\n                headerToolBarData[ButtonComponentsMap.WalletConnect] = {\n                    ...headerToolBarData[ButtonComponentsMap.WalletConnect],\n                    label: addr,\n                    status: WalletStatus.accountPending\n                }\n                updateHeaderMenuWhenHasAccountInfo();\n\n                break\n        }\n        forceUpdate()\n    }, [account, showAccountInfo, etherscanUrl, setAccountInfoProps])\n\n    return {\n        headerToolBarData,\n        headerMenuData,\n        gatewayList,\n        open,\n        setOpen,\n        setShowAccountInfo,\n        account,\n        showAccountInfo,\n        accountInfoProps,\n        advanceOpen,\n        setAdvanceOpen\n    }\n\n}\n\nexport function useCoinMap(exchangeApi: ExchangeAPI, tokens: any) {\n\n    const [coinMap, setCoinMap] = useState<CoinMap<any, CoinInfo<any>>>({})\n\n    useCustomDCEffect(async () => {\n\n        if (!exchangeApi || !tokens) {\n            return\n        }\n\n        const keys = Reflect.ownKeys(tokens)\n\n        let coinMap: CoinMap<any, CoinInfo<any>> = {}\n\n        keys.forEach((key: any) => {\n\n            if (!(key as string).startsWith('LP-')) {\n                coinMap[ key ] = {\n                    icon: getIcon(key, tokens),\n                    name: key,\n                    simpleName: key,\n                    description: '',\n                    company: '',\n                }\n            }\n\n        })\n\n        setCoinMap(coinMap)\n\n    }, [exchangeApi, tokens])\n\n    return {\n        coinMap,\n    }\n\n}\n\nexport function useLv1WalletMap(exchangeApi: ExchangeAPI, account: Lv2Account, tokens: any) {\n\n    const [walletMap, setWalletMap] = useState<WalletMap<any, WalletCoin<any>>>({})\n\n    useCustomDCEffect(async () => {\n\n        if (!exchangeApi || !account || !account.accAddr || !tokens) {\n            return\n        }\n\n        let walletMap: WalletMap<any, WalletCoin<any>> = {}\n\n        const {tokenBalances} = await exchangeApi.getTokenBalances({\n            owner: account.accAddr, token: ''\n        }, tokens)\n\n        const keys = Reflect.ownKeys(tokenBalances)\n\n        keys.forEach((item: any) => {\n            const balance = tokenBalances[ item ]\n            walletMap[ item ] = {\n                belong: item,\n                count: fromWEI(tokens, item, balance) as number,\n            }\n        })\n\n        setWalletMap(walletMap)\n\n    }, [exchangeApi, account, tokens])\n\n    return {\n        walletMap,\n    }\n\n}\n\nexport function useLv2WalletMap(tokens: any) {\n\n    const {balances} = useGetUserBalances(tokens)\n\n    const [walletMap, setWalletMap] = useState<WalletMap<any, WalletCoin<any>>>({})\n\n    useCustomDCEffect(() => {\n        let walletMap: WalletMap<any, WalletCoin<any>> = {}\n        if (balances && balances.symbol) {\n            const keys = Reflect.ownKeys(balances.symbol)\n\n            keys.forEach((item: any) => {\n                const balance = balances.symbol[ item ]\n                walletMap[ item ] = {\n                    belong: item,\n                    count: fromWEI(tokens, item, balance) as number,\n                }\n            })\n        }\n\n        console.log('lv2:', walletMap)\n\n        setWalletMap(walletMap)\n    }, [balances, tokens])\n\n    return {\n        walletMap,\n    }\n\n}\n\nexport function useChargeFeeList(tokenSymbol: string | undefined, requestType: OffchainFeeReqType) {\n\n    const api = useUserAPI()\n\n    const {accountId, apiKey,} = useAccount()\n\n    const [chargeFeeList, setChargeFeeList] = useState<any>([])\n\n    useCustomDCEffect(async () => {\n\n        console.log('!!!!!!!!!useCustomDCEffect useChargeFeeList:', tokenSymbol, accountId)\n\n        if (!accountId || !tokenSymbol) {\n            return\n        }\n\n        let chargeFeeList: any[] = []\n\n        try {\n\n            const request: GetOffchainFeeAmtRequest = {\n                accountId,\n                tokenSymbol,\n                requestType,\n            }\n\n            const response = await api.getOffchainFeeAmt(request, apiKey)\n\n            if (response) {\n                response.fees.forEach((item: any, index: number) => {\n                    chargeFeeList.push({belong: item.token, fee: item.fee})\n                })\n\n                setChargeFeeList(chargeFeeList)\n            }\n            console.log('response:', response)\n\n        } catch (reason) {\n            dumpError400(reason)\n        }\n\n\n        setChargeFeeList(chargeFeeList)\n\n    }, [accountId, apiKey, tokenSymbol])\n\n    return {\n        chargeFeeList,\n    }\n\n}\n\nexport function useModalProps() {\n\n    const {\n        ShowDeposit,\n        ShowTransfer,\n        ShowWithdraw,\n        ShowResetAccount,\n    } = useModals()\n\n    const {chainId, isConnected, connector,} = useWeb3Account()\n\n    const {exchangeInfo} = useGetExchangeInfo()\n\n    const {account, apiKey, accountId, eddsaKey,} = useAccount()\n\n    const {tokens: tokensAll} = useGetTokens()\n\n    const tokens = tokensAll?.tokenSymbolMap\n\n    const userApi = useUserAPI()\n\n    const exchangeApi = useExchangeAPI()\n\n    const {coinMap} = useCoinMap(exchangeApi, tokens)\n\n    const {walletMap: walletMap_Lv1} = useLv1WalletMap(exchangeApi, account, tokens)\n\n    const {walletMap: walletMap_Lv2} = useLv2WalletMap(tokens)\n\n    const deposit = useCallback(async (token: string, amt: any) => {\n\n        if (!tokens || !isConnected || !connector || !exchangeInfo?.exchangeAddress || !exchangeInfo?.depositAddress) {\n            console.log(`exchangeInfo:${exchangeInfo} deposit exit!!!!!`)\n            return\n        }\n\n        try {\n            const tokenInfo: TokenInfo = tokens[ token ]\n\n            const provider = await connector.getProvider()\n            const web3 = new Web3(provider as any)\n\n            let sendByMetaMask = account.connectName === ConnectorNames.Injected\n            sendByMetaMask = true\n\n            const gasPrice = (await exchangeApi.getGasPrice()).data / 1e+9\n            const gasLimit = 350000\n\n            const nonce = await contract.getNonce(web3, account.accAddr)\n\n            console.log('gasPrice:', gasPrice)\n            console.log('account.connectName:', account.connectName, ' tokenInfo:', tokenInfo)\n\n            const response = await contract.approveMax(web3, account.accAddr, tokenInfo.address,\n                exchangeInfo?.depositAddress, gasPrice, gasLimit, chainId, nonce, sendByMetaMask)\n\n            console.log('response:', response)\n\n            const fee = 0\n\n            const response2 = await contract.deposit(web3, account.accAddr,\n                exchangeInfo?.exchangeAddress, tokenInfo, amt, fee,\n                gasPrice, gasLimit, chainId, nonce + 1, sendByMetaMask)\n\n            console.log('response2:', response2)\n\n\n        } catch (reason) {\n            dumpError400(reason)\n        }\n\n    }, [chainId, isConnected, connector, account, exchangeInfo, tokens, exchangeApi])\n\n    const withdraw = useCallback(async (token: string, amt: any) => {\n\n        console.log('withdraw apiKey:', apiKey, ' exchangeInfo:', exchangeInfo, ' exchangeAddr:', exchangeInfo.exchangeAddress)\n\n        if (!account || !account.accountId || !account.accAddr\n            || !connector || !chainId || !apiKey || !exchangeInfo\n            || !exchangeInfo.exchangeAddress) {\n            console.log('return directly!!!!!', account, connector, chainId, apiKey, exchangeInfo)\n            return\n        }\n\n        amt = '5500000000000000000'\n\n        const fee = '5500000000000000000'\n\n        console.log('exchangeAddress:', exchangeInfo.exchangeAddress)\n\n        try {\n\n            const request: GetNextStorageIdRequest = {\n                accountId: account.accountId,\n                sellTokenId: 1\n            }\n\n            const storageId = await userApi.getNextStorageId(request, apiKey)\n\n            const request2: OffChainWithdrawalRequestV3 = {\n                exchange: exchangeInfo.exchangeAddress,\n                owner: account.accAddr,\n                to: account.accAddr,\n                accountId: account.accountId,\n                storageId: storageId.offchainId,\n                token: {\n                    tokenId: '1',\n                    volume: '100000000000000000000',\n                },\n                maxFee: {\n                    tokenId: '1',\n                    volume: '9400000000000000000',\n                },\n                extraData: '',\n                minGas: 0,\n                validUntil: VALID_UNTIL,\n            }\n\n            const provider = await connector.getProvider()\n            const web3 = new Web3(provider as any)\n\n            const response = await userApi.submitOffchainWithdraw(request2, web3, chainId, ConnectorNames.Injected,\n                account.eddsaKey, apiKey, false)\n\n            console.log(response)\n\n        } catch (reason) {\n            dumpError400(reason)\n        }\n\n    }, [apiKey, account, connector, exchangeInfo, chainId, userApi])\n\n    const transfer = useCallback(async (amt: number, payeeAddr: string = '0xb6AdaC3e924B4985Ad74646FEa3610f14cDFB79c') => {\n\n        if (!connector || !apiKey || !chainId || !accountId || !account?.accAddr) {\n            return\n        }\n\n        const request: GetNextStorageIdRequest = {\n            accountId,\n            sellTokenId: 1\n        }\n        const storageId = await userApi.getNextStorageId(request, apiKey)\n\n        console.log(`amt: ${amt} storageId:${JSON.stringify(storageId)}`)\n\n        try {\n\n            const provider = await connector.getProvider()\n            const web3 = new Web3(provider as any)\n\n            let walletType = account.connectName\n            walletType = ConnectorNames.Injected\n\n            const payeeAcc = await exchangeApi.getAccount({owner: payeeAddr})\n\n            let payeeId = 0\n            if (payeeAcc) {\n                payeeId = payeeAcc.accountId\n            }\n\n            const request2: OriginTransferRequestV3 = {\n                exchange: exchangeInfo.exchangeAddress,\n                payerAddr: account.accAddr,\n                payerId: accountId,\n                payeeAddr,\n                payeeId,\n                storageId: storageId.offchainId,\n                token: {\n                    tokenId: '1',\n                    volume: '100000000000000000000',\n                },\n                maxFee: {\n                    tokenId: '1',\n                    volume: '9400000000000000000',\n                },\n                validUntil: VALID_UNTIL,\n            }\n\n            console.log(`request2:${JSON.stringify(request2)}`)\n\n            const response = await userApi.submitInternalTransfer(request2, web3, chainId, walletType,\n                eddsaKey, apiKey, false)\n\n            console.log(response)\n\n        } catch (reason) {\n            dumpError400(reason)\n        }\n\n    }, [apiKey, accountId, account, connector, exchangeInfo, chainId, eddsaKey, userApi, exchangeApi])\n\n    const [depositValue, setDepositValue] = useState<IBData<any>>({\n        belong: undefined,\n        tradeValue: 0,\n        balance: 0\n    } as IBData<unknown>)\n\n    // deposit\n\n    let depositProps: DepositProps<any, any> = {\n        tradeData: {belong: undefined},\n        coinMap: coinMap,\n        walletMap: walletMap_Lv1,\n        depositBtnStatus: TradeBtnStatus.AVAILABLE,\n        onDepositClick: (tradeData: any) => {\n            console.log('1. onDepositClick', depositValue)\n            if (depositValue && depositValue.belong) {\n                deposit(depositValue.belong.toString(), depositValue.tradeValue)\n            }\n            ShowDeposit(false)\n        },\n        handlePanelEvent: async (data: SwitchData<any>, switchType: 'Tomenu' | 'Tobutton') => {\n            return new Promise((res) => {\n                if (data?.tradeData?.belong) {\n                    if (depositValue !== data.tradeData) {\n                        setDepositValue(data.tradeData)\n                    }\n                    setTokenSymbol(data.tradeData.belong)\n                } else {\n                    setDepositValue({belong: undefined, tradeValue: 0, balance: 0} as IBData<unknown>)\n                }\n                res();\n            })\n        },\n    }\n\n    // withdraw\n    const [withdrawValue, setWithdrawValue] = useState<IBData<any>>({\n        belong: undefined,\n        tradeValue: 0,\n        balance: 0\n    } as IBData<unknown>);\n\n    const [tokenSymbol, setTokenSymbol] = useState<string>('')\n    const {chargeFeeList: withdrawalFeeList} = useChargeFeeList(tokenSymbol, OffchainFeeReqType.OFFCHAIN_WITHDRAWAL)\n\n    let withdrawProps: WithdrawProps<any, any> = {\n        tradeData: {belong: undefined},\n        coinMap: coinMap,\n        walletMap: walletMap_Lv2,\n        withdrawBtnStatus: TradeBtnStatus.AVAILABLE,\n        onWithdrawClick: (tradeData: any) => {\n            console.log('Swap button click', withdrawValue)\n            if (withdrawValue && withdrawValue.belong) {\n                withdraw(withdrawValue.belong.toString(), withdrawValue.tradeValue)\n            }\n            ShowWithdraw(false)\n        },\n\n        handlePanelEvent: async (data: SwitchData<any>, switchType: 'Tomenu' | 'Tobutton') => {\n            return new Promise((res: any) => {\n                if (data?.tradeData?.belong) {\n                    if (withdrawValue !== data.tradeData) {\n                        setWithdrawValue(data.tradeData)\n                    }\n                    setTokenSymbol(data.tradeData.belong)\n                } else {\n                    setWithdrawValue({belong: undefined, tradeValue: 0, balance: 0} as IBData<unknown>);\n                }\n                res();\n            })\n        },\n        withdrawType: WithdrawType.Fast,\n        withdrawTypes: WithdrawTypes,\n        chargeFeeToken: 'ETH',\n        chargeFeeTokenList: withdrawalFeeList,\n        handleOnAddressChange: (value: any) => {\n            console.log('handleOnAddressChange', value);\n        },\n        handleAddressError: (_value: any) => {\n            return {error: true, message: 'any error'}\n        }\n    }\n\n    // transfer\n    const [transferValue, setTransferValue] = useState<IBData<any>>({\n        belong: undefined,\n        tradeValue: 0,\n        balance: 0\n    } as IBData<unknown>)\n\n    const [transferTokenSymbol, setTransferTokenSymbol] = useState<string>('')\n    const {chargeFeeList: transferFeeList} = useChargeFeeList(transferTokenSymbol, OffchainFeeReqType.TRANSFER)\n\n    let transferProps: TransferProps<any, any> = {\n        tradeData: {belong: undefined},\n        coinMap: coinMap,\n        walletMap: walletMap_Lv2,\n        transferBtnStatus: TradeBtnStatus.AVAILABLE,\n        onTransferClick: (tradeData: any) => {\n            console.log('onTransferClick:', transferValue);\n            if (transferValue && transferValue.belong) {\n                transfer(transferValue.tradeValue)\n            }\n\n            ShowTransfer(false)\n        },\n\n        handlePanelEvent: async (data: SwitchData<any>, switchType: 'Tomenu' | 'Tobutton') => {\n            return new Promise((res: any) => {\n                if (data?.tradeData?.belong) {\n                    if (transferValue !== data.tradeData) {\n                        setTransferValue(data.tradeData)\n                    }\n                    setTransferTokenSymbol(data.tradeData.belong)\n                } else {\n                    setTransferValue({belong: undefined, tradeValue: 0, balance: 0} as IBData<unknown>)\n                }\n                // else{\n                //     setTransferValue({ belong: undefined, amt: 0 })\n                // }\n\n                res();\n            })\n        },\n\n        chargeFeeToken: 'ETH',\n        chargeFeeTokenList: transferFeeList,\n        handleOnAddressChange: (value: any) => {\n            console.log('handleOnAddressChange', value);\n        },\n        handleAddressError: (_value: any) => {\n            return {error: true, message: 'any error'}\n        }\n    }\n\n    // reset\n    const [resetValue, setResetValue] = useState<IBData<any>>({\n        belong: undefined,\n        tradeValue: 0,\n        balance: 0\n    } as IBData<unknown>)\n\n    let resetProps: ResetProps<any, any> = {\n        tradeData: {belong: undefined},\n        coinMap: coinMap,\n        walletMap: walletMap_Lv2,\n        resetBtnStatus: TradeBtnStatus.AVAILABLE,\n        onResetClick: (tradeData: any) => {\n            console.log('onResetClick', resetValue)\n            if (resetValue && resetValue.belong) {\n            }\n\n            ShowResetAccount(false)\n        },\n        handlePanelEvent: async (data: SwitchData<any>, switchType: 'Tomenu' | 'Tobutton') => {\n            return new Promise((res) => {\n                if (data?.tradeData?.belong) {\n                    if (resetValue !== data.tradeData) {\n                        setResetValue(data.tradeData)\n                    }\n                } else {\n                    setResetValue({belong: undefined, tradeValue: 0, balance: 0} as IBData<unknown>)\n                }\n\n                res();\n            })\n        },\n        fee: {count: 234, price: 123}\n    }\n\n    return {\n        depositProps, withdrawProps, transferProps, resetProps,\n    }\n}\n","export function getShortAddr(address: string) {\n    if (!address || address === undefined || address === null || address.trim() === '') {\n        console.log('getShortAddr got empty!')\n        return undefined\n    }\n    const convertAddr = address.substr(0, 6) + '...' + address.substr(address.length - 4)\n    return convertAddr\n}\n","import styled from '@emotion/styled';\nimport { Box, Button, Divider, Grid, Modal as MuiModal, Switch, Typography } from '@material-ui/core';\nimport React from 'react';\nimport { UpColor, Currency, DropDownIcon } from '@loopring-web/component-lib/src/static-resource';\nimport {\n    BtnLanguage,\n    OutlineSelect,\n    OutlineSelectItem,\n    TypographyStrong, useSettings\n} from '@loopring-web/component-lib';\nimport { Trans, useTranslation, WithTranslation, withTranslation } from 'react-i18next';\nimport { useTheme } from '@emotion/react';\nimport { LanguageProps } from '@loopring-web/chart-lib/stores/interface';\n\nconst MuiModalStyled = styled(MuiModal)`\n  //background: ${({theme}) => theme.colorBase.background().default};\n  .MuiBackdrop-root{\n    background-color: rgba(0,0,0,.2); \n  }\n  display: flex;\n  align-items: center;\n  justify-content: center;\n` as typeof MuiModal;\nconst BlockStyled = styled(Box)`\n  ${({theme}) => theme.border.defaultFrame({c_key: 'blur', d_R: 1})};\n  background: ${({theme}) => theme.colorBase.background().secondary};\n  max-height: var(--panel-setting-height);\n  max-width: var(--panel-setting-width);\n  display: flex;\n  justify-content: space-around;\n  align-items: center;\n  overflow: scroll;\n  padding: ${({theme}) => theme.unit*8}px\n`;\n\nconst StyledPaper = styled(Grid)`\n  width: 100%;\n  height: 100%;\n  background-color: ${({theme}) => theme.colorBase.background().default};\n  ${({theme}) => theme.border.defaultFrame({c_key: 'blur', d_R: 1})};\n`\n\nconst StyledSwitch = styled(Switch)(({theme}) => ({\n    \"& .Mui-checked\": {\n        color: theme.colorBase.textPrimary,\n        '& + .MuiSwitch-track.MuiSwitch-track': {\n            border: `solid ${theme.colorBase.success}`,\n        },\n        '& .MuiSwitch-thumb': {\n            backgroundColor: theme.colorBase.success,\n        }\n    },\n    '& .MuiSwitch-track': {\n        border: `solid ${theme.colorBase.error}`,\n        opacity: 1\n    },\n    '& .MuiSwitch-thumb': {\n        backgroundColor: theme.colorBase.error,\n    }\n}));\n\nexport const BtnCurrency = ({t, currency, label, handleChange}: any) => {\n    const [state, setState] = React.useState<string>(currency ? currency : Currency.dollar);\n    const _handleChange = React.useCallback((event: React.ChangeEvent<any>) => {\n        setState(event.target.value);\n        if (handleChange) {\n\n            handleChange(event.target.value)\n        }\n    }, [handleChange])\n    return <OutlineSelect aria-label={t(label)} IconComponent={DropDownIcon}\n                          labelId=\"language-selected\"\n                          id=\"language-selected\"\n                          value={state} autoWidth\n                          onChange={_handleChange}>\n        <OutlineSelectItem value={Currency.dollar}>$ {t('labelUSDollar')}</OutlineSelectItem>\n            <OutlineSelectItem value={Currency.yen}>¥ {t('labelCNYYuan')}</OutlineSelectItem>\n    </OutlineSelect>\n}\n\nconst StyledDivider = styled(Divider)`\n  margin: ${({theme}) => theme.unit}px 0 ${({theme}) => theme.unit}px 0px;\n`\nconst DividerBlock = styled(Divider)`\n  margin: 0;\n  flex: 1;\n  width: 1px;\n  height: ${({theme}) => theme.unit * 3}px;\n  background: ${({theme}) => theme.colorBase.focus};\n`\n\n\n\nexport const SettingPanel = withTranslation(['common', 'layout'])(({t,i18n, ...rest}: & WithTranslation) => {\n    const theme = useTheme();\n    const {setUpColor,setLanguage,setCurrency,currency,upColor} = useSettings()\n    const language = i18n.language;\n    const handleOnLanguageChange = (lang: LanguageProps) => {\n        setLanguage(lang);\n        i18n.changeLanguage(lang);\n    }\n    const handleOnCurrencyChange = (value: any) => {\n        setCurrency(value);\n    }\n    const handleColorChange = (e:any) => {\n        if(e.target.checked){\n            setUpColor(UpColor.green) ;\n        }else{\n            setUpColor(UpColor.red);\n        }\n    }\n    return <Grid container direction={'column'} justifyContent={'space-between'} alignItems={'stretch'}>\n        <Typography variant={'h4'} component={'h3'} marginY={1} paddingLeft={2}>{t('labelTitleSecurity')}</Typography>\n        <StyledPaper item xs={12} display={'flex'} flexDirection={'column'} marginBottom={2} paddingY={2}>\n            <Box component={'section'} display={'flex'} flexDirection={'column'}>\n                <Typography variant={'h5'} component={'h4'} paddingX={2}>{t('labelTitleResetL2Keypair')}</Typography>\n                <StyledDivider/>\n                <Grid container display={'flex'} flexDirection={'row'} justifyContent={'stretch'}\n                      alignItems={'flex-start'} paddingX={2} marginBottom={2}>\n                    <Grid item xs={8} display={'flex'} flexDirection={'column'}>\n                        <Typography variant={'body1'} component={'p'}>\n                            <Trans i18nKey=\"resetDescription\">\n                                Create a new signing key for layer-2 authentication (no backup needed). This will\n                                <TypographyStrong component={'span'}>cancel all your pending orders</TypographyStrong>.\n                            </Trans>\n                        </Typography>\n                    </Grid>\n                    <Grid item xs={4} display={'flex'} flexDirection={'column'} justifyContent={'space-evenly'}\n                          alignItems={'flex-end'} alignSelf={'stretch'}>\n                        <Button variant={'outlined'} size={'medium'} color={'primary'}>{t('labelBtnReset')}</Button>\n                    </Grid>\n                    <Grid item xs={12} display={'flex'} flexDirection={'row'} justifyContent={'flex-end'}\n                          alignItems={'center'} alignSelf={'stretch'}>\n                        <Typography variant={'body2'} component={'p'}\n                                    paddingTop={1}>{t('labelHadChangPassword', {passDay: '14 hours'})}</Typography>\n                    </Grid>\n\n                </Grid>\n            </Box>\n            <Box component={'section'} display={'flex'} flexDirection={'column'}>\n                <Typography variant={'h5'} component={'h4'} paddingX={2}>{t('labelTitleExportAccount')}</Typography>\n                <StyledDivider/>\n                <Grid container display={'flex'} flexDirection={'row'} justifyContent={'stretch'}\n                      alignItems={'flex-start'} paddingX={2} marginBottom={2}>\n                    <Grid item xs={7} display={'flex'} flexDirection={'column'}>\n                        <Typography variant={'body1'} component={'p'}>{t('descriptionExportAccount')}</Typography>\n                    </Grid>\n                    <Grid item xs={5} display={'flex'} flexDirection={'column'} justifyContent={'space-evenly'}\n                          alignItems={'flex-end'} alignSelf={'stretch'}>\n                        <Grid item> <Button variant={'outlined'} size={'medium'}\n                                            color={'primary'}>{t('labelBtnExportAccount')}</Button></Grid>\n                    </Grid>\n                </Grid>\n            </Box>\n        </StyledPaper>\n\n        <Typography variant={'h4'} component={'h3'} marginY={1} paddingLeft={2}>{t('labelTitlePreferences')}</Typography>\n        <StyledPaper item xs={12} display={'flex'} flexDirection={'column'} marginBottom={2} paddingY={2}>\n            <Box component={'section'} display={'flex'} flexDirection={'column'}>\n                <Typography variant={'h5'} component={'h4'} paddingX={2}>{t('labelTitleLayout')}</Typography>\n                <StyledDivider/>\n                <Grid container display={'flex'} flexDirection={'row'} justifyContent={'stretch'}\n                      alignItems={'flex-start'} paddingX={2} marginBottom={2}>\n                    <Grid item xs={7} display={'flex'} flexDirection={'column'}>\n                        <Typography variant={'body1'} component={'p'}>{t('labelLanguage')}</Typography>\n                    </Grid>\n                    <Grid item xs={5} display={'flex'} flexDirection={'column'} justifyContent={'space-evenly'}\n                          alignItems={'flex-end'} alignSelf={'stretch'}>\n                        <Grid item>\n                            <BtnLanguage {...{\n                                t, ...rest,\n                                language,\n                                label: 'languageSetting',\n                                handleChange: handleOnLanguageChange\n                            }}></BtnLanguage>\n                        </Grid>\n                    </Grid>\n                </Grid>\n                <Grid container display={'flex'} flexDirection={'row'} justifyContent={'stretch'}\n                      alignItems={'flex-start'} paddingX={2} marginBottom={2}>\n                    <Grid item xs={7} display={'flex'} flexDirection={'column'}>\n                        <Typography variant={'body1'} component={'p'}>{t('labelCurrency')}</Typography>\n                    </Grid>\n                    <Grid item xs={5} display={'flex'} flexDirection={'column'} justifyContent={'space-evenly'}\n                          alignItems={'flex-end'} alignSelf={'stretch'}>\n                        <Grid item>\n                            <BtnCurrency {...{\n                                t, ...rest,\n                                currency,\n                                label: 'currencySetting',\n                                handleChange: handleOnCurrencyChange\n                            }}></BtnCurrency>\n\n                        </Grid>\n                    </Grid>\n                </Grid>\n                <Grid container display={'flex'} flexDirection={'row'} justifyContent={'stretch'}\n                      alignItems={'flex-start'} paddingX={2}>\n                    <Grid item xs={7} display={'flex'} flexDirection={'column'}>\n                        <Typography variant={'body1'} component={'p'}>{t('labelColors')}</Typography>\n                    </Grid>\n                    <Grid item xs={5} display={'flex'} flexDirection={'row'} justifyContent={'flex-end'}\n                          alignItems={'center'} alignSelf={'stretch'}>\n                        <Typography variant={'body1'} component={'span'} paddingX={2}>\n                            <Trans i18nKey=\"whichColorIsUp\">\n                                <span style={{\n                                    textTransform: 'capitalize',\n                                    color: upColor === UpColor.green ? theme.colorBase.success : theme.colorBase.error\n                                }}>{{up: upColor === UpColor.green ? t('labelgreen') : t('labelred')}} up</span>\n                                and <span style={{\n                                textTransform: 'capitalize',\n                                color: upColor === UpColor.green ? theme.colorBase.error : theme.colorBase.success\n                            }}>{{down: upColor === UpColor.green ? t('labelred') : t('labelgreen')}} down</span>\n                            </Trans>\n                        </Typography>\n                        <StyledSwitch checked={upColor === UpColor.green} color=\"default\"\n                                      onChange={handleColorChange}/>\n                    </Grid>\n                </Grid>\n            </Box>\n\n        </StyledPaper>\n\n    </Grid>\n})\n\nexport const SettingPage = ({open,onClose}: { open:boolean, onClose:(e:any)=>void})=>{\n    return  <MuiModalStyled\n        open={open}\n        onClose={onClose}\n        aria-labelledby=\"modal-modal-title\"\n        aria-describedby=\"modal-modal-description\"\n    >\n        <BlockStyled >\n           <SettingPanel/>\n        </BlockStyled>\n    </MuiModalStyled>\n}","import { useCallback } from 'react'\n\nimport {\n    Header as HeaderUI,\n    HideOnScroll,\n    ModalWalletConnect,\n    AccountInfo,\n} from '@loopring-web/component-lib'\n\nimport { headerRoot } from '@loopring-web/component-lib/src/static-resource'\n\nimport { useLocation } from 'react-router-dom'\n\nimport { Box, Collapse, Container, Toolbar } from '@material-ui/core'\n\nimport { useHeader } from './hook'\n\nimport { useDisconnect, } from 'stores/account/hook'\nimport { ModalPanel } from '@loopring-web/component-lib';\nimport { useGetExchangeInfo } from 'hooks/exchange/useExchangeAPI'\nimport { SettingPage } from '../../pages/SettingPage';\nimport { useModalProps } from './hook'\n\nconst Header = ({ ...rest }: any) => {\n\n    const {\n      depositProps,\n      withdrawProps,\n      transferProps,\n      resetProps,\n    } = useModalProps()\n\n    const location = useLocation()\n    \n    const {\n        headerToolBarData,\n        headerMenuData,\n        gatewayList,\n        open,\n        setOpen,\n        setShowAccountInfo,\n        account,\n        accountInfoProps,\n        showAccountInfo,\n        advanceOpen,\n        setAdvanceOpen\n    } = useHeader()\n\n    const { exchangeInfo } = useGetExchangeInfo()\n\n    const { disconnect } = useDisconnect()\n\n    const onSwitch = useCallback(() => {\n        setOpen(true)\n    }, [setOpen])\n\n    return (<>\n\n        <ModalPanel transferProps={transferProps} withDrawProps={withdrawProps} depositProps={depositProps} resetProps={resetProps} />\n\n        <HideOnScroll>\n            {process.env.NODE_ENV !== 'production' && JSON.stringify(account?.status)}\n            {process.env.NODE_ENV !== 'production' && ' exchangeAddress:' + JSON.stringify(exchangeInfo?.exchangeAddress)}\n\n            <HeaderUI {...rest} headerMenuData={headerMenuData} headerToolBarData={headerToolBarData}\n                selected={location.pathname === '/' ? headerRoot : location.pathname}></HeaderUI>\n\n        </HideOnScroll>\n        <Toolbar />\n\n        <ModalWalletConnect {...{ ...rest, gatewayList, open, onClose: () => setOpen(false) }} />\n\n        {\n            accountInfoProps && <><Collapse in={showAccountInfo}>\n                <Container maxWidth=\"lg\">\n                    <Box marginTop={2}>\n                        <AccountInfo onDisconnect={() => { disconnect(); setShowAccountInfo(false); }} onSwith={onSwitch} {...accountInfoProps}></AccountInfo>\n                    </Box>\n                </Container>\n            </Collapse>\n                <SettingPage open={advanceOpen} onClose={e => setAdvanceOpen(false)} />\n            </>\n        }\n\n    </>)\n}\n\nexport default Header\n","import styled from '@emotion/styled/macro'\n\nimport { MarketBlock, QuoteTable, TablePaddingX } from '@loopring-web/component-lib'\n\nimport { WithTranslation, withTranslation } from 'react-i18next'\nimport { coinMap } from '@loopring-web/component-lib/static';\nimport { FloatTag } from '@loopring-web/component-lib/src/static-resource';\nimport { Box, Grid } from '@material-ui/core';\n\nconst rawDataOrderHistory: any[] = [\n    ['Sell', [{ type: 'out', key: 'ETH', value: 25 }, { type: 'in', key: 'LRC', value: 100 }], 0.12, [{\n        type: 'out',\n        key: 'ETH',\n        value: 25\n    }, { type: 'in', key: 'LRC', value: 100 }], 0.0054, 3, 'Filled'],\n    ['Buy', [{ type: 'out', key: 'ETH', value: 25 }, { type: 'in', key: 'LRC', value: 100 }], 0.12, [{\n        type: 'out',\n        key: 'ETH',\n        value: 25\n    }, { type: 'in', key: 'LRC', value: 100 }], 0.0054, 3, 'Filled'],\n    ['Buy', [{ type: 'out', key: 'ETH', value: 25 }, { type: 'in', key: 'LRC', value: 100 }], 0.12, [{\n        type: 'out',\n        key: 'ETH',\n        value: 25\n    }, { type: 'in', key: 'LRC', value: 100 }], 0.0054, 3, 'Cancelled'],\n    ['Sell', [{ type: 'out', key: 'ETH', value: 25 }, { type: 'in', key: 'LRC', value: 100 }], 0.12, [{\n        type: 'out',\n        key: 'ETH',\n        value: 25\n    }, { type: 'in', key: 'LRC', value: 100 }], 0.0054, 3, 'Filled'],\n    ['Sell', [{ type: 'out', key: 'ETH', value: 25 }, { type: 'in', key: 'LRC', value: 100 }], 0.12, [{\n        type: 'out',\n        key: 'ETH',\n        value: 25\n    }, { type: 'in', key: 'LRC', value: 100 }], 0.0054, 3, 'Cancelled'],\n]\n\nconst rawDataLastPrice: any[] = [\n    [['LRC', 'BUSD'], [12.4, 13], -0.12, 123.34, 23.41, 21759000],\n    [['LRC', 'BUSD'], [12.4, 13], 12.2, 0.99, 12.3, '', ''],\n    [['LRC', 'BUSD'], [12.4, 13], 34.55, 0.42, 4.678, '', 13759500],\n    [['LRC', 'BUSD'], [12.4, 13], 0.0, -0.32, 3.23, 1.45, 37346000],\n    [['LRC', 'BUSD'], [12.4, 13], 54, 0.52, 12.333, '', ''],\n    [['LRC', 'BUSD'], [12.4, 13], '', -0.852, 8.881, 7.56, ''],\n    [['LRC', 'BUSD'], [12.4, 13], 26, 0.12, 0.659, 1.344, 42245000],\n]\n\n\nconst  RowStyled = styled(Grid)`\n      & .MuiGrid-root:not(:last-of-type) > div{\n        margin-right: ${({theme}) => theme.unit * 3}px;\n      }\n` as typeof Grid\nconst  TableWrapStyled = styled(Grid)`\n  &{\n    background-color: ${({theme}) => theme.colorBase.background().default};\n    ${({theme}) => theme.border.defaultFrame({c_key: 'blur', d_R: 1})};\n  }\n  ${({theme}) => TablePaddingX({pLeft:theme.unit * 3,pRight:theme.unit * 3})}\n` as typeof Grid\n\nconst QuotePage = withTranslation('common')((rest: WithTranslation) => {\n\n    let props: any = {\n        ...rest,\n        buyData: coinMap.ETH,\n        sellData:coinMap.LRC,\n        tradeFloat: {priceDollar: +123,priceYuan: 2343232, percent: '+15%', chartUnit: \"24h\",\n            volume: 112312312,\n            floatTag:FloatTag.increase},\n\n    }\n\n    return <Box display={'flex'} flexDirection={'column'} flex={1}>\n\n        <RowStyled container >\n            <Grid item xs={3} >\n                <MarketBlock {...{...props}}></MarketBlock>\n            </Grid>\n            <Grid item xs={3} >\n                <MarketBlock {...{...props,tradeFloat: {priceDollar: 123,priceYuan: 2343232, percent: '0%', chartUnit: \"24h\",floatTag:FloatTag.none}}}></MarketBlock>\n            </Grid>\n            <Grid item xs={3} >\n                <MarketBlock {...{...props,tradeFloat: {priceDollar: 123,priceYuan: 2343232, percent: '-15%', chartUnit: \"24h\",floatTag:FloatTag.decrease}}}></MarketBlock>\n            </Grid>\n            <Grid item xs={3} >\n                <MarketBlock {...{...props}}></MarketBlock>\n            </Grid>\n        </RowStyled>\n        <TableWrapStyled container marginY={3} paddingY={2}>\n            <Grid item xs={12} >\n                <QuoteTable rawData={rawDataLastPrice} {...{ ...rest }} />\n            </Grid>\n        </TableWrapStyled>\n    </Box>\n\n\n})\n\nexport default QuotePage\n","import { SwapPanel as SwapPanelUi } from '@loopring-web/component-lib'\n\nconst SwapPanel = ({swapProps,...rest}: any) => {\n\n    // console.log('swapProps:', swapProps)\n\n    return (<SwapPanelUi {...{\n        ...swapProps\n        , ...rest\n    }}> </SwapPanelUi>\n    )\n\n}\n\nexport default SwapPanel\n","import { useState } from 'react'\n\nimport { useGetAmmPools, useGetAmmPoolsBalances } from 'hooks/exchange/useAmmpoolAPI'\nimport { useCustomDCEffect } from '@loopring-web/sdk/hooks/useCustomDCEffect'\nimport { useGetTokens } from 'hooks/exchange/useExchangeAPI'\n\nimport { getAmmInfo, } from 'utils/swap_calc_utils'\n\nexport function useSwapPage() {\n\n    const [base, setBase] = useState<string>('')\n  \n    const [quote, setQuote] = useState<string>('')\n  \n    const { ammpools } = useGetAmmPools()\n\n    const { ammPoolsBalances: ammPoolsBalances_all } = useGetAmmPoolsBalances()\n  \n    const ammPoolsBalances = ammPoolsBalances_all?.ammpoolsbalances\n\n    const [poolAddress, setPoolAddress] = useState<string>('')\n  \n    const [market, setMarket] = useState<string>('')\n  \n    const { tokens: tokensAll } = useGetTokens()\n  \n    const tokens = tokensAll?.tokenSymbolMap\n\n    useCustomDCEffect(() => {\n  \n      if (!base || !quote || !ammpools || !ammPoolsBalances) {\n        return\n      }\n  \n      const { ammInfo, } = getAmmInfo(ammpools.ammpools, ammPoolsBalances, base, quote)\n  \n      setMarket(ammInfo.market)\n      setPoolAddress(ammInfo.address)\n  \n    }, [base, quote, ammpools, ammPoolsBalances,])\n\n    return {\n        base,\n        setBase,\n        quote,\n        setQuote,\n        market,\n        tokens,\n        poolAddress,\n        ammpools,\n        ammPoolsBalances,\n    }\n\n}","import { useState, } from 'react'\n\nimport { usePromiseJob } from '@loopring-web/sdk/hooks/common/useCommon'\nimport { useAmmpoolAPI, } from '@loopring-web/sdk/hooks/common/useApi'\n\nexport function useGetAmmPools() {\n\n  const [ammpools, setAmmpools] = useState<any>()\n\n  const api = useAmmpoolAPI()\n\n    const fetchData = () => {\n      if (!api) {\n        return undefined\n      }\n      return api.getAmmPoolConf()\n    }\n  \n    usePromiseJob(fetchData, setAmmpools, undefined, 'useGetAmmPools', [api])\n\n  return { ammpools }\n\n}\n\nexport function useGetAmmPoolsBalances() {\n\n  const [ammPoolsBalances, setAmmPoolsBalances] = useState<any>()\n\n  const api = useAmmpoolAPI()\n\n  const fetchData = () => {\n    if (!api) {\n      return undefined\n    }\n    return api.getAmmPoolBalances()\n  }\n\n  usePromiseJob(fetchData, setAmmPoolsBalances, undefined, 'useGetAmmPoolsBalances', [api])\n\n  return { ammPoolsBalances }\n\n}\n","import { useState } from 'react'\n\nimport { useExchangeAPI } from '@loopring-web/sdk/hooks/common/useApi'\nimport { useCustomDCEffect } from '@loopring-web/sdk/hooks/useCustomDCEffect'\nimport { TradingInterval, GetCandlestickRequest, } from '@loopring-web/sdk/defs/loopring_defs'\nimport { dumpError400 } from '@loopring-web/sdk/utils/network_tools'\nimport { fromWEI } from 'utils/swap_calc_utils'\n\nimport { ChartUnit } from '@loopring-web/component-lib/static-resource'\n\nimport {  ScaleAreaChart, ChartType } from '@loopring-web/chart-lib'\nimport { Box, Grid } from \"@material-ui/core\"\n\nimport { TGItemData, TGItemJSXInterface, ToggleButtonGroup, } from '@loopring-web/component-lib'\nimport { WithTranslation } from 'react-i18next'\nimport { TradeTitle } from '@loopring-web/component-lib/components/block'\nimport { Candlestick } from '@loopring-web/sdk/defs/exchange_defs'\nimport { getThousandFormattedNumbers } from '@loopring-web/component-lib/src/static-resource';\n\nconst toggleData: TGItemData[] = [\n  {\n    value: ChartType.Depth,\n    key: ChartType.Depth,\n    label: 'label' + ChartType.Depth\n  },\n  {\n    value: ChartType.Trend,\n    key: ChartType.Trend,\n    label: 'label' + ChartType.Trend\n  },\n]\n\nconst BasicInfoPanel = ({ props, swapProps, t, ...rest }: any & WithTranslation) => {\n\n  const tgItemJSXs: TGItemJSXInterface[] = toggleData.map(({ value, label, key }) => {\n    return { value, tlabel: t(label), key, JSX: <>{t(label)}</> }\n  })\n\n  const { quote, market, tokens } = props\n\n  const [chartType, setChartType] = useState<ChartType>(ChartType.Trend)\n\n  const [change, setChange] = useState(0)\n\n  const [volume, setVolume] = useState('')\n\n  const handleChange = (_e: React.MouseEvent, value: any) => {\n    // Settings.setChartType(value)\n    console.log('handleChange:', value)\n    setChartType(value)\n  }\n\n  const exchangeApi = useExchangeAPI()\n\n  useCustomDCEffect(() => {\n\n    if (!exchangeApi || !market || !tokens || !quote) {\n      return\n    }\n\n    let mounted = true\n\n    const request: GetCandlestickRequest = {\n      market,\n      interval: TradingInterval.d1,\n      limit: 2\n    }\n\n    exchangeApi.getCandlestick(request).then((candlesticks) => {\n\n      if (mounted) {\n        if (candlesticks?.candlesticks && candlesticks.candlesticks.length > 0) {\n          const lastBar = candlesticks.candlesticks[candlesticks.candlesticks.length - 1]\n          const lastClose = lastBar.close\n          const firstClose = candlesticks.candlesticks[0].close\n          const change = firstClose ? ((lastClose - firstClose) / firstClose) : 0\n\n          if (change) {\n            setChange(change)\n          }\n\n          if (lastBar?.quoteVol) {\n            const quoteVol = fromWEI(tokens, quote, lastBar?.quoteVol) as string\n            setVolume(quoteVol)\n          }\n        }\n      }\n\n    }).catch((reason) => {\n      dumpError400(reason)\n    })\n\n    return () => {\n      mounted = false\n    }\n\n  }, [exchangeApi, market, tokens, quote,])\n\n  const [originData, setOriginData] = useState<any>()\n\n  const [chartTypes, setChartTypes] = useState<ChartType>(ChartType.Trend)\n\n  const tgItemJSXsPriceChart: TGItemJSXInterface[] = Object.keys(ChartUnit).reduce((pre, item) => {\n    // @ts-ignore\n    const tGItemData: TGItemData = { value: ChartUnit[item], key: ChartUnit[item], label: 'label' + ChartUnit[item] };\n    pre.push({ value: tGItemData.value, tlabel: t(tGItemData.label ? tGItemData.label : tGItemData.key), key: tGItemData.key, JSX: <>{t(tGItemData.label ? tGItemData.label : tGItemData.key)}</> })\n    return pre\n  }, [] as TGItemJSXInterface[])\n\n  useCustomDCEffect(async () => {\n\n    let mounted = true\n\n    if (!exchangeApi || !market) {\n      return\n    }\n\n    const request: GetCandlestickRequest = {\n      market,\n      interval: TradingInterval.min15,\n      limit: 96\n    }\n\n    try {\n      const candlesticks = await exchangeApi.getCandlestick(request)\n      if (mounted) {\n        const originData = candlesticks.candlesticks.map((item: Candlestick) => {\n          return {\n            timeStamp: item.timeStamp,\n            low: item.low,\n            high: item.high,\n            open: item.open,\n            close: item.close,\n            volume: item.quoteVol,\n          }\n        })\n        setOriginData(originData)\n      }\n    }\n    catch (reason) {\n      dumpError400(reason, 'ChartPanel getCandlestick')\n    }\n\n    return () => {\n      mounted = false\n    }\n\n  }, [exchangeApi, market])\n\n  return (\n      <>\n        <Box display={'flex'} justifyContent={'space-between'} alignItems={'flex-end'}>\n          {swapProps.swapTradeData ? <>\n            <TradeTitle {...{\n              ...rest, t, ...swapProps, tradeFloat: {\n                priceDollar: getThousandFormattedNumbers(change,8),\n                percent: '+15%',\n                chartUnit: \"24h\",\n                volume:'',\n              }\n            }}></TradeTitle><ToggleButtonGroup exclusive {...{ ...rest, t, tgItemJSXs, value: chartType }}\n                                               handleChange={handleChange} />\n          </> : undefined}\n\n        </Box>\n        <Grid container>\n          <Grid item xs={12} minHeight={256} maxHeight={256}>\n            <ScaleAreaChart type={chartType} data={originData ?? []} handleMove={() => { }} />\n          </Grid>\n          <Grid item xs={12} height={24} display={'flex'} justifyContent={'flex-end'}>\n            <ToggleButtonGroup exclusive {...{ ...rest, t, tgItemJSXs: tgItemJSXsPriceChart,\n              value: ChartUnit.D1, size: 'small' }}\n                               handleChange={() => undefined} />\n          </Grid>\n        </Grid>\n      </>\n  )\n\n\n};\n\nexport default BasicInfoPanel\n","import { useState, } from 'react'\n\nimport { getAccountArg, getCandlestickArg, getAmmpoolArg, getTickerArg, getOrderArg, WsTopicType, } from '@loopring-web/sdk/defs/ws_defs'\n\nimport { useWs } from '@loopring-web/sdk/hooks/common/useWebsocketApi'\nimport { useCustomDCEffect } from '@loopring-web/sdk/hooks/useCustomDCEffect'\n\nfunction useHandleSocketData(data: any) {\n  const [account, setAccount] = useState<any>()\n  const [ammPool, setAmmPool] = useState<any>()\n  const [order, setOrder] = useState<any>()\n\n  useCustomDCEffect(() => {\n\n      if (!data) {\n        return\n      }\n\n      if (data.op) {\n        return\n      }\n\n      if (!data.topic || !data.topic.topic) {\n        return\n      }\n\n      switch(data.topic.topic) {\n        case WsTopicType.Account:\n          // console.log(',data.data:', data.data)\n          setAccount(data.data)\n          break\n        case WsTopicType.Ammpool:\n          let ammPool = {\n            baseAmt: data.data[0][0],\n            quoteAmt: data.data[0][1],\n            timestamp: data.data[1],\n          }\n          // console.log(',ammPool:', ammPool)\n          setAmmPool(ammPool)\n          break\n        case WsTopicType.Candlestick:\n          break\n        case WsTopicType.Order:\n          setOrder(data.data)\n          break\n        case WsTopicType.OrderBook:\n          break\n        case WsTopicType.Ticker:\n          break\n        case WsTopicType.Trade:\n          break\n        default:\n          throw Error('Unknown WsTopicType:' + data.topic.topic)\n      }\n  }, [data])\n\n  return {\n    account,\n    ammPool,\n    order,\n  }\n}\n\nexport function useSwapPageWs(poolAddress: string, market: string, apiKey: string) {\n\n  let topics: any[] = []\n\n  topics.push(getAccountArg())\n  topics.push(getOrderArg(market))\n  topics.push(getAmmpoolArg(poolAddress))\n\n  const { socketData } = useWs(topics, true, apiKey, !!poolAddress && !!market && !!apiKey)\n\n  return useHandleSocketData(socketData)\n\n}\n","export enum OrderHandling {\n    processed = 'processed',\n    no_such_order = 'no_such_order',\n    too_many_times = 'too_many_times',\n}\n\n// export enum PriceChartType {\n//     h24 = '24hrs',\n//     w1 = '1week',\n//     all = 'all',\n// }\n","export function deepClone(data: any) {\n    if (!data || !(data instanceof Object) || (typeof data == \"function\")) {\n        return data || undefined;\n    }\n    let constructor = data.constructor;\n    let result = new constructor();\n    for (let key in data) {\n        if (data.hasOwnProperty(key)) {\n            result[key] = deepClone(data[key]);\n        }\n    }\n    return result;\n}\n","import { useCallback, useState } from 'react'\nimport BigNumber from 'bignumber.js'\n\nimport { useGetExchangeInfo } from 'hooks/exchange/useExchangeAPI'\n\nimport { useGetUserBalances } from 'hooks/exchange/useUserAPI'\nimport { useUserAPI } from '@loopring-web/sdk/hooks/common/useApi'\nimport { useAccount } from 'stores/account/hook'\nimport {\n    applySlippageTolerance,\n    checkStatus,\n    fromWEI,\n    getAmmInfo,\n    getAmountOut,\n    getAmountOut_Reverse,\n    getBalances,\n    getLeft,\n    getRight,\n    getToken,\n    toWEI,\n} from 'utils/swap_calc_utils'\n\nimport { dumpError400 } from '@loopring-web/sdk/utils/network_tools'\n\nimport * as fm from '@loopring-web/sdk/api/common/formatter'\nimport { useSwapPageWs } from 'hooks/exchange/useWsAPI'\nimport { useCustomDCEffect } from '@loopring-web/sdk/hooks/useCustomDCEffect'\nimport { UserStorage } from 'storage'\nimport { OrderType, SubmitOrderRequestV3, TxStatus } from '@loopring-web/sdk/defs/loopring_defs'\nimport { OrderHandling } from 'defs/swap_defs'\n\nimport {\n    CoinInfo,\n    CoinMap,\n    IBData,\n    TradeCalcData,\n    WalletCoin,\n    WalletMap,\n} from '@loopring-web/component-lib/static-resource'\n\nimport { SwapProps, SwapTradeData, } from '@loopring-web/component-lib'\nimport { deepClone } from 'utils/obj_tools'\nimport { SwapType } from '@loopring-web/component-lib/components/panel/Interface';\nimport { AccountStatus } from 'state_machine/account_machine_spec'\n\nexport function useSwap(base: any, quote: any, setBase: any, setQuote: any, tokens: any, market: string, poolAddress: string, ammpools: any, ammPoolsBalances: any) {\n\n    const { apiKey, eddsaKey, accountId, account: globalAcc, } = useAccount()\n\n    const [ammOrder, setAmmOrder] = useState<string>(UserStorage.getAmmOrder())\n\n    // const [status, setStatus] = useState<SwapStatus>(SwapStatus.Normal)\n\n    const [slippageTolerance, setSlippageTolerance] = useState(0.01)\n\n    const [priceImpact, setPriceImpact] = useState(0)\n\n    const [baseAmt, setBaseAmt] = useState<string | number>()\n\n    const [quoteAmt, setQuoteAmt] = useState<number>(0)\n\n    const minimumReceived = quoteAmt ? quoteAmt * (1 - slippageTolerance) : 0\n\n    const userApi = useUserAPI()\n\n    const [left, setLeft] = useState<CoinMap<any, CoinInfo<any>>>({})\n\n    const [right, setRight] = useState<CoinMap<any, CoinInfo<any>>>({})\n\n    const { exchangeInfo } = useGetExchangeInfo()\n\n    const [fee, setFee] = useState(0)\n    const [takerRate, setTakerRate] = useState(10)\n\n    const [currentPrice, setCurrentPrice] = useState<number>(0)\n\n    const [amount1ApplyOrderFee, setAmount1ApplyOrderFee] = useState(0)\n\n    const { balances, setBalances } = useGetUserBalances(tokens)\n\n    const [balance, setBalance] = useState<any>(0)\n    const [availToShow, setAvailToShow] = useState<any>(0)\n\n    const [walletMap, setWalletMap] = useState<WalletMap<any, WalletCoin<any>>>({})\n\n    // const quoteUserBalance = useGetUserBalances(tokens, quote)\n    const [quoteBalance, setQuoteBalance] = useState<string>('0')\n    const [quoteToShow, setQuoteToShow] = useState<any>(0)\n\n    const [swapProps, setSwapProps] = useState<any>({})\n\n    const {\n        account,\n        ammPool,\n        order,\n    } = useSwapPageWs(poolAddress, market, apiKey)\n\n    useCustomDCEffect(() => {\n\n        if (!balances || !base || !tokens) {\n            return\n        }\n\n        if (globalAcc.status === AccountStatus.ACTIVATED) {\n\n            const balance = balances.symbol[base]\n\n            setBalance(balance)\n            setAvailToShow(fromWEI(tokens, base, balance))\n\n        } else {\n\n            setBalance(0)\n            setAvailToShow(0)\n\n        }\n\n    }, [balances, base, tokens, globalAcc.status])\n\n    useCustomDCEffect(() => {\n        if (!account || !tokens || !base) {\n            return\n        }\n\n        if (globalAcc.status === AccountStatus.ACTIVATED) {\n\n            const currentBalance = balances.tokenId[account.tokenId]\n            const totalAmount = fm.toBig(account.totalAmount)\n            const amountLocked = fm.toBig(account.amountLocked)\n            const newAvailable = totalAmount.minus(amountLocked)\n\n            if (!newAvailable.eq(fm.toBig(currentBalance))) {\n                const avail = fromWEI(tokens, base, newAvailable.toString())\n\n                const balancesTmp = deepClone(balances)\n                balancesTmp.tokenId[account.tokenId] = newAvailable.toString()\n                const token = balancesTmp.map[account.tokenId]\n                balancesTmp.symbol[token.symbol] = newAvailable.toString()\n                setBalances(balancesTmp)\n            }\n\n        } else {\n            setBalances(undefined)\n        }\n\n    }, [account, tokens, base, globalAcc.status])\n\n    useCustomDCEffect(() => {\n\n        let walletMap: WalletMap<any, WalletCoin<any>> = {}\n\n        if (globalAcc.status === AccountStatus.ACTIVATED) {\n            if (balances && balances.symbol) {\n                const keys = Reflect.ownKeys(balances.symbol)\n\n                keys.forEach((item: any) => {\n                    const balance = balances.symbol[item]\n                    walletMap[item] = {\n                        belong: item,\n                        count: fromWEI(tokens, item, balance) as number,\n                    }\n                })\n            }\n\n        }\n\n        setWalletMap(walletMap)\n\n    }, [balances, tokens, globalAcc.status])\n\n    useCustomDCEffect(() => {\n\n        if (!base || !quote || !ammpools || !ammPoolsBalances || !tokens) {\n            console.log('return!!! --->setQuoteBalance')\n            return\n        }\n\n        const {\n            ammInfo,\n            baseBalance,\n            quoteBalance,\n        } = getBalances(ammpools.ammpools, ammPoolsBalances, base, quote, tokens)\n\n        const quoteShow = fromWEI(tokens, quote, quoteBalance.volume)\n        \n        console.log('quoteBalance.volume:', quoteBalance.volume)\n        console.log('quoteShow:', quoteShow)\n\n        setFee(ammInfo.feeBips)\n        setQuoteBalance(quoteBalance.volume)\n        setQuoteToShow(quoteShow)\n\n        if (baseBalance.volume > 0) {\n            setCurrentPrice(quoteBalance.volume / baseBalance.volume)\n        } else {\n            setCurrentPrice(0)\n        }\n\n    }, [tokens, base, quote, ammpools, ammPoolsBalances,])\n\n    useCustomDCEffect(() => {\n\n        if (!ammPool || !quoteBalance) {\n            console.log(`return 216 quoteBalance : ${ammPool} --- ${quoteBalance}`)\n            return\n        }\n\n        const quoteAmt = fm.toBig(ammPool.quoteAmt)\n        // console.log('got ammPool update:', ammPool, ' quoteAmt:', quoteAmt.toString())\n        if (!quoteAmt.eq(fm.toBig(quoteBalance))) {\n            // console.log('got ammPool update newAvailable:', ammPool.quoteAmt)\n\n            const quoteShow = fromWEI(tokens, quote, quoteAmt)\n            console.log(`quoteShow2 : ${quoteShow}`)\n            setQuoteBalance(quoteAmt.toString())\n            setQuoteToShow(quoteShow)\n        }\n        console.log(`216 quoteAmt : ${quoteAmt}`)\n\n    }, [ammPool, quoteBalance, quote, tokens])\n\n    useCustomDCEffect(async () => {\n\n        if (!apiKey && !accountId && !userApi && !ammOrder) {\n            return\n        }\n\n        const fn = (accountId: number, orderHash: string, apiKey: string, count = 0) => {\n            // console.log('orderHash:', orderHash, ' count:', count)\n            return new Promise((resolve, reject) => {\n                if (orderHash) {\n                    userApi.getOrderDetails({\n                        accountId,\n                        orderHash\n                    }, apiKey).then((order) => {\n                        console.log('order.status:', order.status)\n                        if (order.status === TxStatus.processed) {\n                            UserStorage.clearAmmOrder()\n                            return resolve(OrderHandling.processed)\n                        } else {\n                            if (count < 10) {\n                                setTimeout(() => {\n                                    fn(accountId, UserStorage.getAmmOrder(), apiKey, count++)\n                                }, 1000)\n                            } else {\n                                reject(OrderHandling.too_many_times)\n                            }\n                        }\n                    }).catch(() => {\n                        UserStorage.clearAmmOrder()\n                        return reject(OrderHandling.no_such_order)\n                    })\n                }\n            })\n        }\n\n        fn(accountId, UserStorage.getAmmOrder(), apiKey).then((result) => {\n            console.log('then:', result)\n        }).catch((reason) => {\n            dumpError400(reason)\n        })\n\n        return () => {\n        }\n\n    }, [apiKey, accountId, ammOrder, userApi])\n\n    useCustomDCEffect(() => {\n\n        if (!ammpools || !tokens) {\n            return\n        }\n\n        if (globalAcc.status !== AccountStatus.UNCONNNECTED) {\n\n            const left = getLeft(ammpools.pairs, tokens)\n\n            if (left) {\n                setLeft(left.coinMapLeft)\n                setBase(left.left[0])\n\n                const right = getRight(ammpools.pairs, left.left[0], tokens)\n\n                if (right) {\n                    setRight(right.coinMapRight)\n                    setQuote(right.right[0])\n                }\n\n            }\n\n        } else {\n            setLeft({})\n            setRight({})\n            setBase(undefined)\n            setQuote(undefined)\n        }\n\n    }, [ammpools, tokens, globalAcc.status])\n\n    useCustomDCEffect(() => {\n\n        if (!userApi || !accountId || !apiKey || !base || !quote || !ammpools || !ammPoolsBalances || !tokens) {\n            return\n        }\n\n        let mounted = true\n\n        const { ammInfo, } = getBalances(ammpools.ammpools, ammPoolsBalances, base, quote, tokens)\n\n        userApi.getUserFeeRate({\n            accountId,\n            markets: ammInfo.market\n        }, apiKey).then((response) => {\n            if (mounted) {\n                setTakerRate(response[0].takerRate)\n            } else {\n                console.log('setTakerRate unmounted!')\n            }\n        }).catch((reason) => {\n            dumpError400(reason, 'after getUserFeeRate')\n        })\n\n        return () => {\n            mounted = false\n        }\n\n    }, [tokens, userApi, accountId, apiKey, base, quote, ammpools, ammPoolsBalances, globalAcc.status])\n\n    const onBaseAmtInputChange = useCallback((event: any) => {\n\n        if (!ammpools || !ammPoolsBalances) {\n            return\n        }\n\n        let baseAmtVal = event.tradeValue as number\n\n        // console.log('onBaseAmtInputChange baseAmtVal:', baseAmtVal, ' baseAmt:', baseAmt)\n        if (baseAmtVal !== undefined && baseAmtVal === baseAmt) {\n            console.log('return directly')\n            return\n        } else if (baseAmtVal === undefined) {\n            baseAmtVal = 0\n        }\n\n        const {\n            quoteAmt: quoteAmtVal,\n            _amount1ApplyOrderFee,\n            priceImpact,\n        } = getAmountOut(baseAmtVal, ammpools.ammpools, ammPoolsBalances, tokens, base, quote, takerRate, currentPrice)\n\n        const { isNormal, } = checkStatus(baseAmtVal, balance, quoteAmtVal, fromWEI(tokens, quote, quoteBalance))\n\n        if (isNormal) {\n            setBaseAmt(baseAmtVal)\n            setQuoteAmt(quoteAmtVal)\n            setAmount1ApplyOrderFee(_amount1ApplyOrderFee)\n            setPriceImpact(priceImpact)\n        } else {\n            setQuoteAmt(0)\n            setAmount1ApplyOrderFee(0)\n            setPriceImpact(0)\n        }\n\n        return quoteAmtVal\n\n    }, [tokens, baseAmt, balance, quoteBalance, ammpools, ammPoolsBalances, base, quote, takerRate, currentPrice])\n\n    const onQuoteAmtInputChange = useCallback((event: any) => {\n\n        if (!ammpools || !ammPoolsBalances) {\n            return\n        }\n\n        let quoteAmtVal = event.tradeValue as number\n\n        // console.log('onQuoteAmtInputChange quoteAmtVal:', quoteAmtVal, ' quoteAmt:', quoteAmt)\n        if (quoteAmtVal !== undefined && quoteAmtVal === quoteAmt) {\n            // console.log('return directly')\n            return\n        } else if (quoteAmtVal === undefined) {\n            quoteAmtVal = 0\n        }\n\n        const {\n            baseAmt: baseAmtVal,\n            _amount1ApplyOrderFee,\n            priceImpact,\n            hasError,\n        } = getAmountOut_Reverse(quoteAmtVal, ammpools.ammpools, ammPoolsBalances, tokens, base, quote, takerRate, currentPrice)\n\n        const { isNormal, } = checkStatus(baseAmtVal, balance, quoteAmtVal, fromWEI(tokens, quote, quoteBalance))\n\n        if (!hasError && isNormal) {\n            setBaseAmt(baseAmtVal)\n            setQuoteAmt(quoteAmtVal)\n            setAmount1ApplyOrderFee(_amount1ApplyOrderFee)\n            setPriceImpact(priceImpact)\n        } else {\n            setBaseAmt(0)\n            setAmount1ApplyOrderFee(0)\n            setPriceImpact(0)\n        }\n\n        return baseAmtVal\n\n    }, [tokens, quoteAmt, balance, quoteBalance, ammpools, ammPoolsBalances, base, quote, takerRate, currentPrice])\n\n    const onSwap = useCallback(() => {\n        console.log('try to swap ', baseAmt, base, ' -> ', quoteAmt, quote)\n\n        const swap = async () => {\n\n            if (!exchangeInfo?.exchangeAddress) {\n                throw Error('no exchangeAddress!')\n            }\n\n            if (!baseAmt || !quoteAmt) {\n                // throw Error('no baseAmt or quoteAmt!')\n                console.log('no baseAmt or quoteAmt!')\n                return\n            }\n\n            const {\n                ammInfo,\n                feeBips,\n            } = getAmmInfo(ammpools.ammpools, ammPoolsBalances, base, quote)\n\n            const allOrNone = false\n\n            const baseToken = getToken(tokens, base)\n\n            const quoteToken = getToken(tokens, quote)\n\n            // const storageId = await authKeyApi.getNextStorageId(accountId, baseToken.tokenId, apiKey)\n\n            let orderId: number\n            try {\n\n                const storageId = await userApi.getNextStorageId({\n                    accountId,\n                    sellTokenId: baseToken.tokenId\n                }, apiKey\n                )\n                // console.log('storageId:', storageId)\n\n                orderId = storageId.orderId\n\n            } catch (reason) {\n                dumpError400(reason, 'getNextStorageId')\n                throw Error('getNextStorageId failed')\n            }\n\n            // const validUntil = Math.ceil(new Date().getTime() / 1000) + 3600 * 1000\n            const validUntil = 1700000000\n\n            const amount0InBigNumber = toWEI(tokens, base, baseAmt)\n            const amount1WithSlippage = applySlippageTolerance(\n                tokens,\n                quote,\n                amount1ApplyOrderFee,\n                slippageTolerance,\n            )\n\n            const amount1InBigNumber = new BigNumber(amount1WithSlippage.outInWei).toFixed()\n\n            try {\n\n                console.log('amount0InBigNumber:', amount0InBigNumber, ' amount1InBigNumber:', amount1InBigNumber)\n\n                const request: SubmitOrderRequestV3 = {\n                    exchange: exchangeInfo?.exchangeAddress,\n                    accountId,\n                    storageId: orderId,\n                    sellToken: {\n                        tokenId: baseToken.tokenId,\n                        volume: amount0InBigNumber.toString()\n                    },\n                    buyToken: {\n                        tokenId: quoteToken.tokenId,\n                        volume: amount1InBigNumber.toString()\n                    },\n                    allOrNone,\n                    validUntil,\n                    maxFeeBips: 60,\n                    fillAmountBOrS: false,\n                    orderType: OrderType.ClassAmm,\n                    eddsaSignature: '',\n                }\n\n                const response = await userApi.submitOrder(request, eddsaKey, apiKey)\n\n                console.log('response:', response)\n\n                UserStorage.setAmmOrder(response.hash)\n                setAmmOrder(response.hash)\n\n            } catch (reason) {\n                dumpError400(reason, 'submitOrderV3')\n            }\n\n        }\n\n        swap()\n\n    }, [accountId, ammPoolsBalances, ammpools, amount1ApplyOrderFee, apiKey,\n        base, baseAmt, eddsaKey, exchangeInfo?.exchangeAddress,\n        quote, quoteAmt, slippageTolerance, tokens, userApi])\n\n    useCustomDCEffect(() => {\n\n        const tradeCalcData: TradeCalcData<any> = {\n            coinSell: base, //name\n            coinBuy: quote,\n            StoB: parseFloat(currentPrice?.toFixed(4)),\n            BtoS: 0,\n            sellCoinInfoMap: left,\n            buyCoinInfoMap: right,\n            walletMap: walletMap,\n            slippage: slippageTolerance * 100,   //TODO which number is selected, from localstorage;\n            slippageTolerance: [0.1, 0.5, 1, 'slippage:N'],    //TODO getLocalstorage Customer slippage\n            priceImpact: `${(Math.abs(priceImpact) * 100).toFixed(2)}%`,\n            minimumReceived: minimumReceived.toFixed(7),\n            fee: `${(Math.abs(fee + takerRate) / 100).toFixed(2)}%`,\n        }\n\n        const swapProps: SwapProps<IBData<any>, string, any> = {\n            swapTradeData: {\n                sell: {\n                    belong: base,\n                    balance: availToShow,\n                    tradeValue: baseAmt as any,\n                }, buy: {\n                    belong: quote,\n                    balance: quoteToShow,\n                    tradeValue: quoteAmt,\n                },\n                slippage: slippageTolerance,\n                __cache__: {}\n            },\n            tradeCalcData,\n\n            onSwapClick: (tradeData: SwapTradeData<any>) => {\n                onSwap()\n            },\n\n            handleSwapPanelEvent: async (swapData, switchType) => {\n                return new Promise((res) => {\n                    const { type, tradeData, to, } = swapData\n                    let right\n                    switch (switchType) {\n                        case SwapType.SEll_CLICK:\n                            break\n                        case SwapType.BUY_CLICK:\n                            break\n                        case SwapType.SELL_SELECTED:\n                            const quoteAmtVal = onBaseAmtInputChange(tradeData?.sell);\n                            if (quoteAmtVal !== undefined) {\n                                tradeData.buy = { ...tradeData.buy, tradeValue: quoteAmtVal }\n                            }\n                            setBase(tradeData.sell.belong)\n                            right = getRight(ammpools.pairs, tradeData.sell.belong, tokens)\n\n                            console.log('right:', right)\n\n                            if (right) {\n                                setRight(right.coinMapRight)\n                                setQuote(right.right[0])\n                            } else {\n                                setQuote(undefined)\n                            }\n                            break\n                        case SwapType.BUY_SELECTED:\n                            console.log()\n                            onQuoteAmtInputChange(tradeData?.buy)\n                            setQuote(tradeData.buy.belong)\n                            break\n                        case SwapType.EXCHANGE_CLICK:\n                            setBaseAmt(0)\n                            setQuoteAmt(0)\n                            tradeData.buy = { ...tradeData.buy, tradeValue: 0 }\n                            tradeData.sell = { ...tradeData.sell, tradeValue: 0 }\n\n                            setBase(tradeData.sell?.belong)\n                            right = getRight(ammpools.pairs, tradeData.sell.belong, tokens)\n                            if (right) {\n                                setRight(right.coinMapRight)\n                                setQuote(right.right[0])\n                            } else {\n                                setQuote(tradeData.buy?.belong)\n                            }\n                            break\n                        default:\n                            break\n                    }\n\n                    res()\n                })\n            },\n        }\n\n        setSwapProps(swapProps)\n\n    }, [slippageTolerance,\n        priceImpact,\n        fee,\n        takerRate,\n        left,\n        right,\n        walletMap,\n        minimumReceived, availToShow, quoteToShow, baseAmt, quoteAmt, currentPrice,\n        onBaseAmtInputChange,\n        onQuoteAmtInputChange,\n        onSwap])\n\n    // console.log(`base:${base} quote:${quote}. quoteToShow before render: ${quoteToShow}`)\n\n    return {\n        baseAmt,\n        quoteAmt,\n        slippageTolerance,\n\n        availToShow,\n        quoteToShow,\n        walletMap,\n        balances,\n        currentPrice,\n        minimumReceived,\n        priceImpact,\n        fee,\n        takerRate,\n\n        left,\n        right,\n\n        swapProps,\n\n        onBaseAmtInputChange,\n        onQuoteAmtInputChange,\n        onSwap,\n\n    }\n}","import React, { useState } from 'react'\n\nimport AppBar from '@material-ui/core/AppBar'\nimport Tabs from '@material-ui/core/Tabs'\nimport Tab from '@material-ui/core/Tab'\n\nimport {\n  Table as TableUI,\n  generateRows,\n  generateColumns,\n  Column,\n} from '@loopring-web/component-lib'\nimport { withTranslation } from 'react-i18next';\n\ninterface Row {\n  side: string;\n  amount: string;\n  price: string;\n  fee: string;\n  time: string;\n  sortColumn: string;\n  filterColumn: string;\n  cellExpend: {\n    value: string;\n    children: [];\n    isExpanded: boolean;\n  }\n  children?: Row[];\n  isExpanded?: boolean;\n  format?: any;\n}\n\nconst columnModeDefault: Column<Row, unknown>[] = [\n  { key: 'side', name: 'Side' },\n  { key: 'amount', name: 'Amount' },\n  { key: 'price', name: 'Price' },\n  { key: 'fee', name: 'Fee' },\n  { key: 'time', name: 'Time' },\n]\n\nconst ammColumnModeDefault: Column<Row, unknown>[] = [\n  { key: 'side', name: 'Side' },\n  { key: 'price', name: 'Price' },\n  { key: 'feeAmount', name: 'FeeAmount' },\n  { key: 'time', name: 'Time' },\n]\n\nconst applyProps = (index: number) => {\n  return {\n    id: `simple-tab-${index}`,\n    'aria-controls': `simple-tabpanel-${index}`,\n  }\n}\nconst Table = withTranslation('common',{withRef:true})(TableUI);\nconst TabPanel = (props: any) => {\n  const { children, value, index, ...other } = props;\n\n  return (\n    <div\n      role=\"tabpanel\"\n      hidden={value !== index}\n      id={`simple-tabpanel-${index}`}\n      aria-labelledby={`simple-tab-${index}`}\n      {...other}\n    >\n      {value === index && (\n        <React.Fragment>{children}</React.Fragment>\n      )}\n    </div>\n  )\n}\n\nconst TradePanel = ({ myTrades, recentTrades }: { myTrades: any, recentTrades: any }) => {\n\n  const [value, setValue] = useState(0)\n\n  const handleChange = (event: any, newValue: any) => {\n    setValue(newValue)\n  }\n\n  const myArgs: any = {\n    rawData: myTrades ? myTrades : [],\n    columnMode: columnModeDefault,\n    generateRows,\n    generateColumns,\n  }\n\n  const recentArgs: any = {\n    rawData: recentTrades ? recentTrades : [],\n    columnMode: ammColumnModeDefault,\n    generateRows,\n    generateColumns,\n  }\n\n  return (\n    <>\n      {/*<AppBar position=\"static\">*/}\n      <Tabs\n          value={value}\n          onChange={handleChange}\n          aria-label=\"tabs switch\"\n      >\n        <Tab label=\"My Trades\" {...applyProps(0)} />\n        <Tab label=\"Recent Trades\" {...applyProps(1)} />\n      </Tabs>\n      {/*</AppBar>*/}\n      <TabPanel value={value} index={0}>\n        <Table {...myArgs} />\n      </TabPanel>\n      <TabPanel value={value} index={1}>\n        <Table {...recentArgs} />\n      </TabPanel>\n    </>\n  )\n\n}\n\nexport default TradePanel\n","import TradePanelUi from './TradePanel'\nimport { useGetMyTrades, useGetRecentTrades, } from './hooks'\n\nconst TradePanel = (props: any) => {\n\n  const { market, poolAddress, } = props\n\n  const { myTrades } = useGetMyTrades(market)\n\n  const { recentTrades } = useGetRecentTrades(poolAddress)\n\n  return (\n    <TradePanelUi myTrades={myTrades} recentTrades={recentTrades} />\n  )\n\n}\n\nexport default TradePanel\n","import { useState } from 'react'\n\nimport { useAmmpoolAPI, useUserAPI } from '@loopring-web/sdk/hooks/common/useApi'\nimport { useAccount } from 'stores/account/hook'\n\nimport { dumpError400 } from '@loopring-web/sdk/utils/network_tools'\n\nimport { useCustomDCEffect } from '@loopring-web/sdk/hooks/useCustomDCEffect'\nimport { AmmTrade, FilledType } from '@loopring-web/sdk/defs/loopring_defs'\nimport { AccountStatus } from 'state_machine/account_machine_spec'\n\nexport function useGetMyTrades(market: string) {\n\n  const { apiKey, accountId, account, } = useAccount()\n\n  const userApi = useUserAPI()\n\n  const [myTrades, setMyTrades] = useState<any>()\n\n  useCustomDCEffect(async() => {\n    if (!userApi || !accountId || !apiKey || !market) {\n      return\n    }\n\n    let tradesNew: any = []\n\n    if (account.status === AccountStatus.ACTIVATED) {\n\n      try {\n\n        const trades = await userApi.getUserTrades({\n          accountId,\n          market,\n          fillTypes: FilledType.amm,\n        }, apiKey)\n\n        trades.trades.forEach((item: any) => {\n          tradesNew.push([item[2], item[3], item[4], item[6], item[0]])\n        })\n\n      } catch (reason) {\n        dumpError400(reason)\n      }\n      \n    }\n\n\n    console.log('----------------------tradesNew:', tradesNew)\n      \n    setMyTrades(tradesNew)\n\n  }, [userApi, accountId, apiKey, market, account.status])\n\n  return {\n    myTrades,\n  }\n}\n\nexport function useGetRecentTrades(ammPoolAddress: string) {\n\n  const ammPoolApi = useAmmpoolAPI()\n\n  const [recentTrades, setRecentTrades] = useState<any>()\n\n  useCustomDCEffect(() => {\n    if (!ammPoolApi || !ammPoolAddress) {\n      return\n    }\n\n    ammPoolApi.getAmmPoolTrades({\n      ammPoolAddress\n    }).then((trades) => {\n      let tradesNew: any = []\n      trades.trades.forEach((item: AmmTrade) => {\n        tradesNew.push([item.side, item.price, item.feeAmount, item.createdAt])\n      })\n      // console.log('getAmmPoolTrades:', tradesNew)\n      setRecentTrades(tradesNew)\n    }).catch((reason) => {\n      dumpError400(reason)\n    })\n\n  }, [ammPoolApi, ammPoolAddress])\n\n  return {\n    recentTrades,\n  }\n}\n","import { Box, Grid, Paper, } from '@material-ui/core'\nimport SwapPanel from './panel/SwapPanel'\nimport { useSwapPage } from './hook'\nimport { WithTranslation, withTranslation } from 'react-i18next';\nimport BasicInfoPanel from './panel/BasicInfoPanel';\nimport { useSwap } from './panel/SwapPanel/hooks';\nimport TradePanel from './panel/TradePanel';\nimport { ChartUnit } from '@loopring-web/component-lib/static-resource';\nimport styled from 'styled-components';\n\nconst PaperStyled = styled(Paper)`\n  @media only screen and (min-height: 680px ) and (min-width:1200px){\n    position: fixed;\n  }\n\n`\nconst SwapPage = withTranslation('common')(({...rest}: WithTranslation) => {\n\n    const props = useSwapPage()\n\n    // const {\n    //   base,\n    //   quote,\n    //   market,\n    //   tokens,\n    //   poolAddress,\n    //     ..\n    // } = props\n    const {\n        base, quote, setBase, setQuote, tokens, market,\n        poolAddress, ammpools, ammPoolsBalances,\n    } = props;\n    const {swapProps} = useSwap(base, quote, setBase, setQuote, tokens, market, poolAddress, ammpools, ammPoolsBalances);\n\n    return <>\n        <Box display={'flex'} height={500} paddingRight={4} flexDirection={'column'}>\n            <BasicInfoPanel {...{...rest, swapProps, props}} />\n            <TradePanel market={market} poolAddress={poolAddress}/>\n\n        </Box>\n        <Box display={'flex'} style={{minWidth:'var(--swap-box-width)'}} >\n            <PaperStyled >\n                <SwapPanel {...{\n                    ...rest, swapProps\n                }} />\n            </PaperStyled>\n        </Box>\n\n    </>\n});\n\n\nexport default SwapPage\n","import { useRef } from 'react'\n\n// import Qrcode from 'components/qrcodes/Qrcode'\n\n\nimport { useAccount } from 'stores/account/hook'\n\nimport { useGetExchangeInfo, useGetGas, useGetMarkets, useGetTokens } from 'hooks/exchange/useExchangeAPI'\n\nimport { useAmmpoolWs } from '@loopring-web/sdk/hooks/common/useWebsocketApi'\n\nconst DebugPage = () => {\n\n  const inputRef = useRef<HTMLInputElement>(null)\n\n  const { account, isNoAccount, apiKey } = useAccount()\n\n  const {socketData} = useAmmpoolWs(apiKey)\n\n  const { markets } = useGetMarkets()\n\n  const { exchangeInfo } = useGetExchangeInfo()\n\n  const { tokens } = useGetTokens()\n\n  const { gas } = useGetGas()\n\n  const gasPrice = gas?.data\n\n  console.log('account:', account)\n  console.log('exchangeInfo:', exchangeInfo)\n  console.log('tokens:', tokens)\n\n  const showAddr = account.accAddr ? account.accAddr : ''\n\n  return (\n    <div>\n      Debug\n      <div>account:{JSON.stringify(account)}</div>\n      <div>eddsaKey:{account.eddsaKey}</div>\n      <div>wsdata: {JSON.stringify(socketData)}</div>\n      <div>----------------------------</div>\n      <div>markets:{JSON.stringify(markets)}</div>\n      <div>----------------------------</div>\n      <div>depositAddress:{exchangeInfo?.depositAddress}</div>\n      <div>exchangeAddress:{exchangeInfo?.exchangeAddress}</div>\n      <div>----------------------------</div>\n      {/*<div>exchangeInfo:{JSON.stringify(exchangeInfo)}</div>\n      <div>----------------------------</div>*/}\n      <div>tokens:{JSON.stringify(tokens)}</div>\n      <div>----------------------------</div>\n\n      {/*{isNoAccount() && <Qrcode value={showAddr} size={300} />}*/}\n      {/*<input type='input' ref={inputRef} width=\"150px\" />*/}\n      {/*<DepositBtn onClick={deposit} />*/}\n    </div>\n  )\n\n}\n\nexport default DebugPage\n","import { TransactionTable } from '@loopring-web/component-lib'\nimport { WithTranslation, withTranslation } from 'react-i18next'\nimport { Box, Paper } from '@material-ui/core'\nimport styled from '@emotion/styled'\nimport { useGetTxs } from './hooks'\n\nconst StylePaper = styled(Box)`\n  width: 100%;\n  height: 100%;\n  flex: 1;\n  background-color: ${({ theme }) => theme.colorBase.background().default};\n  border-radius: ${({ theme }) => theme.unit}px;\n  padding: 20px;\n\n  .title {\n    font-family: Gilroy-Medium;\n    font-size: ${({ theme }) => theme.unit * 3}px;\n    line-height: 19px;\n  }\n\n  .tableWrapper {\n    margin-top: 20px;\n    border: 1px solid ${({ theme }) => theme.colorBase.borderColor};\n    border-radius: ${({ theme }) => theme.unit}px;\n    padding: 26px;\n  }\n` as typeof Paper;\n\nconst TxPanel = withTranslation('common')((rest:WithTranslation<'common'>) => {\n\n    const { txs } = useGetTxs()\n\n    const txList = txs !== undefined ? txs: []\n    \n\n    return (\n        <StylePaper>\n            <div className=\"title\">Transactions</div>\n            <div className=\"tableWrapper\">\n                <TransactionTable rawData={txList} {...rest} />\n            </div>\n        </StylePaper>\n        // <StyledTableWrapper>\n        //     <TransactionTable rawData={txList} {...{...rest}}/>\n        // </StyledTableWrapper>\n    )\n})\n\nexport default TxPanel\n","import { useState } from 'react'\n\nimport { useAmmpoolAPI, useUserAPI } from \"@loopring-web/sdk/hooks/common/useApi\"\nimport { useCustomDCEffect } from '@loopring-web/sdk/hooks/useCustomDCEffect'\nimport { useAccount } from 'stores/account/hook'\nimport { TransactionStatus, RawDataTransactionItem } from '@loopring-web/component-lib'\n\nimport { TxStatus } from '@loopring-web/sdk/defs/loopring_defs'\nimport { TransactionTradeTypes } from '@loopring-web/component-lib/components/tableList/transactionsTable/Interface';\n\nexport function useGetTxs() {\n\n    const { accountId, apiKey } = useAccount()\n\n    const userApi = useUserAPI()\n\n    const [txs, setTxs] = useState<RawDataTransactionItem[]>()\n\n    useCustomDCEffect(async() => {\n\n        if (!userApi || !accountId || !apiKey) {\n            return\n        }\n\n        const txs = await userApi.getUserTranferList({ accountId }, apiKey)\n\n        let tmpTx: RawDataTransactionItem[] = []\n\n        txs.transactions.forEach((item: any, index: number) => {\n            tmpTx.push({from: {\n                    address: item.senderAddress,\n                    env: ''\n                },\n                to: {\n                    address: item.receiverAddress,\n                    env: ''\n                },\n                amount: item.amount,\n                fee: {\n                    unit: item.feeTokenSymbol,\n                    value: item.feeAmount\n                },\n                memo: item.symbol,\n                time: item.timestamp,\n                txnHash: item.hash,\n                status: item.status,\n                token:item.token,\n                tradeType:TransactionTradeTypes.allTypes,\n            })\n        })\n\n        setTxs(tmpTx)\n\n    }, [accountId, apiKey, userApi])\n\n    return {\n        txs,\n    }\n}\n","import { WithTranslation, withTranslation } from 'react-i18next'\nimport { PriceTag } from '@loopring-web/component-lib/static-resource'\nimport { Box, Paper } from '@material-ui/core'\nimport styled from '@emotion/styled'\nimport { AssetTitleProps, AssetTitle, AssetsTable, } from '@loopring-web/component-lib'\nimport { useModals } from 'hooks/modal/useModals'\nimport { useGetUserBalances } from 'hooks/exchange/useUserAPI'\nimport { useGetTokens } from 'hooks/exchange/useExchangeAPI'\n\nconst StylePaper = styled(Box)`\n  width: 100%;\n  height: 100%;\n  flex: 1;\n  background-color: ${({ theme }) => theme.colorBase.background().default};\n  border-radius: ${({ theme }) => theme.unit}px;\n  padding: 20px;\n\n  .title {\n    font-family: Gilroy-Medium;\n    font-size: ${({ theme }) => theme.unit * 3}px;\n    line-height: 19px;\n  }\n\n  .tableWrapper {\n    margin-top: 20px;\n    border: 1px solid ${({ theme }) => theme.colorBase.borderColor};\n    border-radius: ${({ theme }) => theme.unit}px;\n    padding: 26px;\n  }\n` as typeof Paper;\n\nconst StyledChartWrapper = styled(Box)`\n    display: flex;\n    align-items: center;\n\n    >div {\n        flex: 1;\n    }\n`\n\nconst AssetPanel = withTranslation('common')(({t,...rest}: WithTranslation<'common'>) => {\n\n    const {\n        ShowDeposit,\n        ShowTransfer,\n        ShowWithdraw,\n        ShowResetAccount,\n    } = useModals()\n\n    const onShowDeposit = () => {\n        ShowDeposit(true)\n    }\n\n    const onShowTransfer = () => {\n        ShowTransfer(true)\n    }\n\n    const onShowWithdraw = () => {\n        ShowWithdraw(true)\n    }\n\n    const AssetTitleProps: AssetTitleProps = {\n        assetInfo: {\n            totalAsset: 123456.789,\n            priceTag: PriceTag.Dollar,\n        },\n        onShowDeposit,\n        onShowTransfer,\n        onShowWithdraw,\n    }\n\n    const { tokens: tokensAll } = useGetTokens()\n\n    const tokens = tokensAll?.tokenSymbolMap\n\n    const { balances } = useGetUserBalances(tokens)\n\n    return (\n        <>\n            <Box marginBottom={3}>\n                <AssetTitle  {...{\n                    t,\n                    ...rest,\n                    ...AssetTitleProps\n                }} />\n            </Box>\n            <StylePaper>\n                <div className=\"title\">{t('labelAssetsTitle')}</div>\n                {/* <StyledChartWrapper>\n                    <div>test</div>\n                    <Box>\n                        <ScaleAreaChart type=\"depth\" data={[]} />\n                    </Box>\n                </StyledChartWrapper> */}\n                <div className=\"tableWrapper\">\n                    <AssetsTable rawData={[]} />\n                </div>\n            </StylePaper>\n        </>\n    )\n})\n\nexport default AssetPanel\n","import { TransactionTable, } from '@loopring-web/component-lib'\nimport { WithTranslation, withTranslation } from 'react-i18next'\nimport styled from '@emotion/styled'\nimport { Box, Paper } from '@material-ui/core'\nimport { useGetTxs } from './hooks'\n\nconst StylePaper = styled(Box)`\n  width: 100%;\n  height: 100%;\n  flex: 1;\n  background-color: ${({ theme }) => theme.colorBase.background().default};\n  border-radius: ${({ theme }) => theme.unit}px;\n  padding: 20px;\n\n  .title {\n    font-family: Gilroy-Medium;\n    font-size: ${({ theme }) => theme.unit * 3}px;\n    line-height: 19px;\n  }\n\n  .tableWrapper {\n    margin-top: 20px;\n    border: 1px solid ${({ theme }) => theme.colorBase.borderColor};\n    border-radius: ${({ theme }) => theme.unit}px;\n    padding: 26px;\n  }\n` as typeof Paper;\n\nconst TradePanel = withTranslation('common')((rest:WithTranslation<'common'>) => {\n\n    const { txs } = useGetTxs()\n\n    const txList = txs !== undefined ? txs: []\n\n    return (\n        <>\n            <StylePaper>\n                <div className=\"title\">Trades</div>\n                <div className=\"tableWrapper\">\n                    <TransactionTable rawData={txList} {...{...rest}}/>\n                </div>\n            </StylePaper>\n        </>\n    )\n})\n\nexport default TradePanel\n","import { useState } from 'react'\n\nimport { useAmmpoolAPI, useUserAPI } from \"@loopring-web/sdk/hooks/common/useApi\"\nimport { useCustomDCEffect } from '@loopring-web/sdk/hooks/useCustomDCEffect'\nimport { useAccount } from 'stores/account/hook'\nimport { TransactionStatus, RawDataTransactionItem } from '@loopring-web/component-lib'\n\nimport { TxStatus } from '@loopring-web/sdk/defs/loopring_defs'\nimport { TransactionTradeTypes } from '@loopring-web/component-lib/components/tableList/transactionsTable/Interface';\n\n/*\n    {\n        from: {\n            address: '0x5e8cxxxxxe741',\n            env: 'Ethereum'\n        },\n        to: 'My Loopring',\n        amount: 25987.09324,\n        fee: {\n            unit: 'ETH',\n            value: 0.0993\n        },\n        memo: 'NoteNoteNoteNoteNoteNoteNote',\n        time: 3,\n        txnHash: '0x2b21xxxxxxx02',\n        status: TransactionStatus.success\n    },\n */\n\nexport function useGetTxs() {\n\n    const { accountId, apiKey } = useAccount()\n\n    const userApi = useUserAPI()\n\n    const [txs, setTxs] = useState<RawDataTransactionItem[]>()\n\n    useCustomDCEffect(async() => {\n\n        if (!userApi || !accountId || !apiKey) {\n            return\n        }\n\n        const txs = await userApi.getUserTranferList({ accountId }, apiKey)\n\n        let tmpTx: RawDataTransactionItem[] = []\n\n        txs.transactions.forEach((item: any, index: number) => {\n            tmpTx.push({from: {\n                    address: item.senderAddress,\n                    env: ''\n                },\n                to: {\n                    address: item.receiverAddress,\n                    env: ''\n                },\n                amount: item.amount,\n                fee: {\n                    unit: item.feeTokenSymbol,\n                    value: item.feeAmount\n                },\n                memo: item.symbol,\n                time: item.timestamp,\n                txnHash: item.hash,\n                status: item.status,\n                token:item.token,\n                tradeType:TransactionTradeTypes.allTypes,\n            })\n        })\n\n        setTxs(tmpTx)\n\n    }, [accountId, apiKey, userApi])\n\n    return {\n        txs,\n    }\n}\n","import { OrderHistoryTable, } from '@loopring-web/component-lib'\nimport { WithTranslation, withTranslation } from 'react-i18next'\nimport { Box, Paper } from '@material-ui/core'\nimport styled from '@emotion/styled'\n\nconst rawDataOrderHistory: any[] = [\n    ['Sell', [{type: 'out', key: 'ETH', value: 25}, {type: 'in', key: 'LRC', value: 100}], 0.12, [{\n        type: 'out',\n        key: 'ETH',\n        value: 25\n    }, {type: 'in', key: 'LRC', value: 100}], 0.0054, 3, 'Filled'],\n    ['Buy', [{type: 'out', key: 'ETH', value: 25}, {type: 'in', key: 'LRC', value: 100}], 0.12, [{\n        type: 'out',\n        key: 'ETH',\n        value: 25\n    }, {type: 'in', key: 'LRC', value: 100}], 0.0054, 3, 'Filled'],\n    ['Buy', [{type: 'out', key: 'ETH', value: 25}, {type: 'in', key: 'LRC', value: 100}], 0.12, [{\n        type: 'out',\n        key: 'ETH',\n        value: 25\n    }, {type: 'in', key: 'LRC', value: 100}], 0.0054, 3, 'Cancelled'],\n    ['Sell', [{type: 'out', key: 'ETH', value: 25}, {type: 'in', key: 'LRC', value: 100}], 0.12, [{\n        type: 'out',\n        key: 'ETH',\n        value: 25\n    }, {type: 'in', key: 'LRC', value: 100}], 0.0054, 3, 'Filled'],\n    ['Sell', [{type: 'out', key: 'ETH', value: 25}, {type: 'in', key: 'LRC', value: 100}], 0.12, [{\n        type: 'out',\n        key: 'ETH',\n        value: 25\n    }, {type: 'in', key: 'LRC', value: 100}], 0.0054, 3, 'Cancelled'],\n]\n\nconst StylePaper = styled(Box)`\n  width: 100%;\n  height: 100%;\n  flex: 1;\n  background-color: ${({ theme }) => theme.colorBase.background().default};\n  border-radius: ${({ theme }) => theme.unit}px;\n  padding: 20px;\n\n  .title {\n    font-family: Gilroy-Medium;\n    font-size: ${({ theme }) => theme.unit * 3}px;\n    line-height: 19px;\n  }\n\n  .tableWrapper {\n    margin-top: 20px;\n    border: 1px solid ${({ theme }) => theme.colorBase.borderColor};\n    border-radius: ${({ theme }) => theme.unit}px;\n    padding: 26px;\n  }\n` as typeof Paper;\n\nconst OrderPanel = withTranslation('common')((rest: WithTranslation) => {\n\n    return (\n        <>\n            <StylePaper>\n                <div className=\"title\">Order History</div>\n                <div className=\"tableWrapper\">\n                    <OrderHistoryTable rawData={[]} {...{...rest}}/>\n                </div>\n            </StylePaper>\n        </>\n    )\n})\n\nexport default OrderPanel\n","import { useRouteMatch } from 'react-router'\n\nimport { Box, Paper } from '@material-ui/core'\nimport {\n    SubMenu,\n    SubMenuList as BasicSubMenuList,\n} from '@loopring-web/component-lib'\nimport { withTranslation } from 'react-i18next'\nimport styled from '@emotion/styled'\nimport { subMenuLayer2 } from '@loopring-web/component-lib/src/static-resource'\n\nimport TxPanel from './TxPanel'\nimport AssetPanel from './AssetPanel'\nimport TradePanel from './TradePanel'\nimport OrderPanel from './OrderPanel'\n\nexport const subMenu = subMenuLayer2\n\nconst SubMenuList = withTranslation(['layout','common'], { withRef: true })(BasicSubMenuList);\nexport const Layer2Page = () => {\n\n    let match: any = useRouteMatch(\"/layer2/:item\")\n\n    const selected = match?.params.item ?? 'assets'\n    return (\n        <>\n            <Box width={'200px'} display={'flex'} justifyContent={'stretch'}>\n                <SubMenu>\n                    <SubMenuList selected={selected} subMenu={subMenu as any} />\n                </SubMenu>\n            </Box>\n            <Box minHeight={420} display={'flex'} alignItems={'stretch'} flexDirection=\"row\" marginTop={0} flex={1}>\n\n                <Box flex={1} marginLeft={3} display={'flex'} flexDirection={'column'} >\n                    {selected === 'assets' && <AssetPanel />}\n                    {selected === 'transactions' && <TxPanel />}\n                    {selected === 'trades' && <TradePanel />}\n                    {selected === 'orders' && <OrderPanel />}\n                </Box>\n            </Box>\n        </>\n    )\n\n}\n","import {\n  HashRouter as Router,\n  Switch,\n  Route,\n  useParams,\n  useRouteMatch,\n  Redirect,\n} from 'react-router-dom'\n\nimport Header from 'layouts/header'\nimport Footer from 'layouts/footer'\n\nimport QuotePage from 'pages/QuotePage'\nimport SwapPage from 'pages/SwapPage'\n\n\nimport DebugPage from 'pages/DebugPage'\n\nimport Container from '@material-ui/core/Container'\nimport { Box } from '@material-ui/core'\nimport { DevWrapper } from '../provider/'\nimport { Layer2Page } from '../pages/Layer2Page'\n\nconst RouterView = () => {\n  // const SwapPageWrap = ()=> <SwapPage />\n  // const QuotePageWrap = ()=> <SwapPage />\n  return <Router>\n        <Header />\n\n        {/*<Box style={{marginTop: `var(--header-height)`}} flex={1} display={'flex'}>*/}\n          <Container maxWidth=\"lg\" >\n            {/*style={{height: '100%' }}*/}\n            <Box flex={1} display={'flex'} alignItems={'stretch'} flexDirection={'row'} marginTop={3} minWidth={800}>\n              <Switch>\n                <Route exact component={SwapPage}  path='/' />\n                <Route exact component={QuotePage}  path='/markets' />\n                <Route exact component={SwapPage}  path='/trading/lite' />\n\n                <Route exact component={Layer2Page}  path='/layer2' />\n                <Route exact component={Layer2Page}  path='/layer2/assets' />\n                <Route exact component={Layer2Page}  path='/layer2/transactions' />\n                <Route exact component={Layer2Page}  path='/layer2/trades' />\n                <Route exact component={Layer2Page}  path='/layer2/orders' />\n\n                <DevWrapper>\n                  <Route exact path='/debug'>\n                    <DebugPage />\n                  </Route>\n                </DevWrapper>\n\n              </Switch>\n            </Box>\n          </Container>\n        {/*</Box>*/}\n\n      </Router>\n}\n\nexport default RouterView\n"],"sourceRoot":""}