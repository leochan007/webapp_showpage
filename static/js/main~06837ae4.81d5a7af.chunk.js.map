{"version":3,"sources":["defs/swap_defs.ts","stores/Amm/AmmMap/hook.ts","stores/account/reducer.ts","stores/token/hook.ts","utils/log_tools.ts","stores/trading/hook.ts","utils/obj_tools.ts","stores/walletLayer2/hook.ts","networks/web3_connectors.ts","stores/Amm/AmmMap/reducer.ts","defs/web3_defs.ts","stores/account/hook.ts","state_machine/machine_builder.ts","utils/web3_tools.ts","defs/common_defs.ts","hooks/modal/useModals.ts","layouts/header/hook.tsx","utils/hook_tools.ts","hooks/common/useCommon.ts","pages/AccountPage/index.tsx","layouts/header/index.tsx","hooks/exchange/useExchangeAPI.ts","pages/QuotePage/hook.ts","pages/styled.ts","pages/QuotePage/index.tsx","pages/SwapPage/panel/BasicInfoPanel/hook.tsx","pages/SwapPage/panel/BasicInfoPanel/index.tsx","pages/SwapPage/panel/TradePanel/index.tsx","pages/SwapPage/index.tsx","pages/SwapPage/hook.ts","hooks/exchange/useWebsocketApi.ts","hooks/exchange/useWsAPI.ts","pages/DebugPage/index.tsx","provider/global/index.tsx","provider/web3ReactManager/index.tsx","provider/dev-wrapper/index.tsx","pages/Layer2Page/TxPanel/index.tsx","pages/Layer2Page/AssetPanel/index.tsx","utils/formatter_tool.ts","pages/Layer2Page/TradePanel/index.tsx","pages/Layer2Page/AmmPanel/index.tsx","pages/Layer2Page/OrderPanel/index.tsx","pages/SettingPage/SettingPanel.tsx","pages/Layer2Page/index.tsx","pages/LiquidityPage/PoolsPanel/index.tsx","pages/LiquidityPage/AmmPanel/index.tsx","pages/LiquidityPage/AmmPanel/hooks.ts","pages/LiquidityPage/CoinPairPanel/hooks.ts","pages/LiquidityPage/CoinPairPanel/index.tsx","pages/LiquidityPage/AmmMining/index.tsx","pages/LiquidityPage/AmmMining/hook.ts","pages/LiquidityPage/MyLiquidity/index.tsx","pages/LiquidityPage/MyLiquidity/hook.ts","pages/LiquidityPage/index.tsx","pages/LiquidityPage/hook.ts","routers/index.tsx","pages/ErrorPage/index.tsx","utils/dt_tools.ts","App.tsx","hook.ts","index.tsx","stores/trading/reducer.ts","stores/walletLayer1/hook.ts","stores/socket/reducer.ts","storage/index.ts","stores/ticker/reducer.ts","stores/walletLayer2/reducer.ts","hooks/web3/useWeb3.ts","stores/userRewards/hook.ts","stores/system/interface.ts","stores/walletLayer1/reducer.ts","stores/userRewards/reducer.ts","stores/Amm/AmmActivityMap/reducer.ts","stores/token/reducer.ts","stores/system/reducer.ts","hooks/help/makeUIAmmActivityMap.ts","stores/system/hook.ts","hooks/help/marketTable.ts","stores/apis/api.ts","stores/global/actions.ts","stores/Amm/AmmActivityMap/saga.ts","stores/Amm/AmmMap/saga.ts","stores/Amm/index.ts","stores/token/saga.ts","stores/ticker/saga.ts","stores/system/saga.ts","stores/walletLayer1/saga.ts","stores/walletLayer2/saga.ts","stores/userRewards/saga.ts","stores/socket/saga.ts","stores/rootSaga.ts","stores/index.ts","state_machine/account_machine_spec.ts","utils/swap_calc_utils.ts","stores/ticker/hook.ts","stores/Amm/AmmActivityMap/hook.ts","stores/socket/hook.ts","hooks/help/ammPairDetail.ts","hooks/help/coinPairInit.ts","hooks/help/connectStatusCallback.ts","hooks/help/makeCache.ts","hooks/help/makeMyPoolDetail.ts","hooks/help/makeTickView.ts","hooks/help/pairDetail.ts","hooks/help/makeWallet.ts","services/tickerService.ts","stores/constant.ts","services/socketUtil.ts","hooks/common/useCustomDCEffect.ts","services/ammPoolService.ts","hooks/help/volumeToCount.ts","pages/LiquidityPage/PoolsPanel/hook.ts","hooks/exchange/useApi.ts"],"names":["OrderHandling","BIG0","toBig","BIG1","BIG10","BIG10K","MULTI_FACTOR","useAmmMap","ammMap","useSelector","state","amm","dispatch","useDispatch","statusUnset","React","useCallback","undefined","getAmmMap","initialState","defaultAccId","process","REACT_APP_TEST_ACCOUND_ID","UserStorage","getAccountId","defaultApiKey","REACT_APP_TEST_API_KEY","getApikey","defaultOwner","REACT_APP_TEST_OWNER","getAccount","defaultEddsaKey","REACT_APP_TEST_EDDSA_KEY","getEddsakey","accAddr","status","AccountStatus","UNCONNNECTED","accountId","publicKey","nonce","isContractAddress","apiKey","eddsaKey","connectName","ConnectorNames","Unknown","connectNameTemp","accountSlice","createSlice","name","reducers","reset","initState","Object","assign","setAccAddr","action","payload","setAccountInfo","owner","setApikey","setAccountStatus","setEddsaKey","setConnectName","setConnectNameTemp","setIsContractAddress","actions","useTokenMap","tokenMap","getTokenMap","props","myLog","message","getChainId","store","getState","system","chainId","useGetTradingInfo","tradingInfo","trading","useUpdateChainId","useActiveWeb3React","useEffect","setChainId","ChainId","GORLI","useUpdateExchangeMarkets","api","useExchangeAPI","useCustomDCEffect","a","getMixMarkets","response","setMarkets","dumpError400","useUpdateExchangeInfo","getExchangeInfo","setExchangeInfo","exchangeInfo","useUpdateAmmPoolConf","useAmmpoolAPI","getAmmPoolConf","ammPoolConf","setAmmPoolConf","useUpdateAmmPoolStats","getAmmPoolStats","ammPoolStats","setAmmPoolStats","useUpdateAmmActivityRules","getAmmPoolActivityRules","ammActivityRules","setAmmActivityRules","activityRules","useUpdateTokens","getTokens","tokens","setTokens","deepClone","data","result","constructor","key","hasOwnProperty","copyToClipBoard","text","document","execCommand","textarea","createElement","body","appendChild","value","select","removeChild","navigator","clipboard","writeText","window","clipboardData","setData","console","log","useWalletLayer2","walletLayer2","resetLayer2","delayAndUpdateWalletLayer2","_","delay","updateWalletLayer2","Promise","resolve","POLLING_INTERVAL","RPC_URLS","injected","InjectedConnector","supportedChainIds","network","NetworkConnector","urls","1","5","defaultChainId","walletconnect","WalletConnectConnector","rpc","bridge","qrcode","pollingInterval","walletlink","WalletLinkConnector","url","appName","ledger","LedgerConnector","trezor","TrezorConnector","manifestEmail","manifestAppUrl","authereum","AuthereumConnector","__timer__","errorMessage","ammMapSlice","STATUS","PENDING","getAmmMapStatus","error","ERROR","DONE","updateRealTimeAmmMap","UNSET","connectorsByName","Injected","Network","WalletConnect","WalletLink","Ledger","Trezor","Authereum","useWeb3Account","connector","library","account","active","isConnected","voca","isBlank","useAccount","isNoAccount","NOACCOUNT","isActivated","ACTIVATED","useStateMachine","spec","machine","AccountMachineSpec","currentState","event","stateTransitions","states","Error","nextState","sendEvent","getLibrary","provider","Web3Provider","Theme","LangType","SystemStatus","MODAL_TYPE","useModals","t","useTranslation","ShowDeposit","isShow","defaultProps","title","description","setShowDeposit","ShowTransfer","setShowTransfer","ShowWithdraw","setShowWithdraw","ShowResetAccount","setShowResetAccount","useHeader","i18n","useSettings","setTheme","themeMode","language","setLanguage","useOpenModals","modals","isShowAccountInfo","isShowConnect","setShowConnect","setShowAccountInfo","useState","forceUpdate","useReducer","bool","exchangeApi","userApi","useUserAPI","lock","StatusChangeEvent","Lock","unlock","exchangeAddress","LOCKED","sk","apikey","getProvider","web3","Web3","sign_tools","getUserApiKey","Unlock","resultInfo","code","feeMap","request","exchange","x","formatedPx","y","formatedPy","maxFee","tokenId","volume","validUntil","VALID_UNTIL","updateAccount","updateAccountResponse","sleep","Reset","useUnlock","connect","activate","activatingConnector","setActivatingConnector","item_name","isSwitch","newConnector","Connecting","useConnect","etherscanUrl","useEtherscan","gatewayList","DefaultGatewayList","handleSelect","accountInfoProps","setAccountInfoProps","onNotification","onWalletBtnConnect","acc","CONNECTED","onThemeBtnClick","dark","light","onLangBtnClick","lang","headerToolBarData","ButtonComponentsMap","handleClick","Language","handleChange","UnlockBtn","onClick","className","startIcon","fontSize","variant","Typography","marginTop","lockCallback","unLockCallback","LockBtn","addr","address","trim","substr","length","getShortAddr","updateHeaderMenuWhenHasAccountInfo","headerMenuData","HeadMenuTabKey","Layer2","HeaderMenuTabStatus","default","addressShort","level","etherscanLink","mainBtn","_event","connectBy","UNACTIVATED","DEPOSITING","DEPOSIT_TO_CONFIREM","ARPROVING","APPROV_TO_CONFIRM","onLock","label","WalletStatus","hidden","noAccount","accountPending","useChargeFeeList","tokenSymbol","requestType","amount","chargeFeeList","setChargeFeeList","tokenInfo","times","decimals","toFixed","getOffchainFeeAmt","raw_data","fees","forEach","item","index","feeRaw","fee","token","sdk","div","pow","toNumber","push","belong","__raw__","useModalProps","coinMap","walletLayer2State","marketArray","marketCoins","marketMap","walletLayer1State","useWalletLayer1","walletMap1","setWalletMap1","walletMap2","setWalletMap2","walletMap","makeWallet","walletLayer1","tradeValue","balance","depositValue","setDepositValue","deposit","amt","LoopringAPI","exchangeAPI","depositAddress","sendByMetaMask","gasPrice","gasLimit","parseInt","gasAmounts","response2","depositProps","tradeData","depositBtnStatus","TradeBtnStatus","AVAILABLE","onDepositClick","toString","handlePanelEvent","switchType","res","setTokenSymbol","transferValue","setTransferValue","transferTokenSymbol","setTransferTokenSymbol","transferFeeList","OffchainFeeReqType","TRANSFER","feeInfo","setFeeInfo","transfer","userAPI","sellToken","feeToken","transferVol","sellTokenId","getNextStorageId","storageId","walletType","request2","payerAddr","payerId","payeeAddr","payeeId","offchainId","submitInternalTransfer","transferProps","transferBtnStatus","onTransferClick","handleFeeChange","chargeFeeToken","chargeFeeTokenList","handleOnAddressChange","handleAddressError","_value","withdrawValue","setWithdrawValue","OFFCHAIN_WITHDRAWAL","withdrawType","setWithdrawType","withdrawalFeeList","withdrawType2","FAST_OFFCHAIN_WITHDRAWAL","withdrawFeeInfo","setWithdrawFeeInfo","withdraw","symbol","withdrawToken","to","extraData","minGas","submitOffchainWithdraw","withdrawProps","withdrawBtnStatus","onWithdrawClick","withdrawTypes","WithdrawTypes","handleWithdrawTypeChange","offchainType","WithdrawType","Fast","resetValue","setResetValue","resetProps","resetBtnStatus","onResetClick","count","price","ammProps","ammDepositData","coinA","coinB","slippage","ammWithdrawData","ammCalcData","myCoinA","myCoinB","lpCoinA","lpCoinB","lpCoin","AtoB","coinInfoMap","handleAmmAddChangeEvent","type","handleAmmRemoveChangeEvent","onAmmRemoveClick","onAmmAddClick","swapProps","tradeCalcData","coinSell","coinBuy","BtoS","StoB","sellCoinInfoMap","buyCoinInfoMap","priceImpact","minimumReceived","onSwapClick","handleSwapPanelEvent","PromiseJob","fetchPromise","setFunc","field","prefix","mounted","handler","then","catch","reason","cleanUp","usePromiseJob","dependencies","ModalAccountInfo","withTranslation","onClose","open","rest","Modal","aria-labelledby","aria-describedby","style","boxShadow","Box","paddingTop","paddingBottom","display","flexDirection","minWidth","Header","location","useLocation","disconnect","useGetExchangeInfo","deactivate","useDisconnect","onSwitch","openQRCode","setOpenQRCode","copyToastOpen","setCopyToastOpen","closeCopyToast","Snackbar","autoHideDuration","Alert","severity","withDrawProps","selected","pathname","headerRoot","Toolbar","onCopy","onViewQRCode","onDisconnect","OnePageSize","isNeedCallMore","currentStartIndex","marketArrayLength","currentListLength","pageSize","pageCurrent","StylePaper","styled","theme","colorBase","background","unit","TableWrapStyled","Grid","TablePaddingX","pLeft","pRight","RowStyled","QuotePage","candlestickList","setCandlestickList","getCandlestick","market","getMixCandlestick","interval","TradingInterval","d1","limit","candlesticks","map","o","close","timeStamp","timestamp","prev","useTicker","tickerMap","tickerStatus","tickerStatusUnset","updateTickers","useSocket","sendSocketTopic","socketEnd","recommendMarkets","slice","_marketArrayWithOutRecommend","filter","findIndex","m","tickList","setTickList","recommendations","setRecommendations","setTickerKeys","focusRowFrom","setFocusRowFrom","startIndex","setStartIndex","subject","useMemo","tickerService","onSocket","updateRecommendation","recommendationIndex","ticker","tradeFloat","subscription","subscribe","Reflect","ownKeys","ele","unsubscribe","from","getTicker","socketSendTicker","updateRawData","array","concat","_recommendationsFloat","_tickList","reduce","match","_item","pair","_recommendations","coinAInfo","coinBInfo","debounceGetTicker","debounce","globalSetup","wait","_startIndex","WsTopicType","onVisibleRowsChange","useQuote","list","simpleName","flex","container","chartData","find","xs","marginY","rawData","toggleData","ChartType","Trend","Depth","BasicInfoPanel","tgItemJSXs","tlabel","JSX","getExistedMarket","chartType","setChartType","ChartUnit","D1","chartUnit","setChartUnit","originData","setOriginData","_e","tgItemJSXsPriceChart","keys","pre","tGItemData","min15","low","high","quoteVol","getMixDepth","depth","bidsPrices","bids_prices","bidsAmtTotals","bids_amtTotals","asksPrices","asks_prices","asksAmtTotals","asks_amtTotals","handleChartUnitChange","newValue","mappedValue","H1","W1","useBasicInfo","upColor","justifyContent","alignItems","exclusive","position","minHeight","maxHeight","height","width","riseColor","handleMove","right","bottom","size","applyProps","id","StyledTabsWrapper","StyledFormControlLabel","FormControlLabel","TradePanel","tradeArray","myTradeArray","isAllTrade","setIsAllTrade","setValue","control","Checkbox","checked","checkedIcon","icon","color","onChange","flag","Tabs","aria-label","Tab","FixedStyle","SwapPage","useRouteMatch","isSwapLoading","setIsSwapLoading","setTradeData","setTradeCalcData","setTradeArray","setMyTradeArray","setTradeFloat","setPair","ammPoolSnapshot","setAmmPoolSnapshot","swapBtnI18nKey","setSwapBtnI18nKey","output","setOutput","params","resetSwap","sell","buy","getUserTrades","marketTrades","_myTradeArray","makeMarketArray","accountStaticCallBack","bntLabel","swapCalculatorCallback","baseToken","quoteToken","orderId","amountS","buyToken","amountBOutSlip","allOrNone","maxFeeBips","fillAmountBOrS","orderType","OrderType","ClassAmm","eddsaSignature","submitOrder","__cache__","makeCache","swapBtnClickArray","btnClickMap","fnType","swapData","SwapType","SEll_CLICK","BUY_CLICK","SELL_SELECTED","BUY_SELECTED","EXCHANGE_CLICK","calculateTradeData","_tradeData","fm","_tradeCalcData","input","isAtoB","base","quote","__rawConfig__","parseFloat","throttleSetValue","_ammPoolSnapshot","td","coinKey","_tradeFloat","_tradeArray","coinPairInit","apiList","getMarketTrades","pairDetailBlock","ammKey","all","ammPoolsBalance","tickMap","_td","pairDetailDone","tickerData","makeTickView","CustomError","ErrorMap","TRADE_LITE_SET_PAIR_ERROR","options","useSwapPage","marginRight","alignContent","swapBtnStatus","LOADING","stateArr","useWebsocket","topics","verify","ws","needApiKey","useRef","wsData","setMessage","readyState","setReadyState","useWsAPI","webSocketInit","current","getWsKey","wsApiKey","basePath","MAINNET","wsKey","WebSocket","onopen","onclose","e","onerror","onmessage","closeWebSocket","sendMessage","msg","send","reconnect","useWs","socketData","setSocketData","isLocalPage","setIsLocalPage","addEventListener","visibilityState","err","JSON","parse","useHandleSocketData","setAccount","ammPool","setAmmPool","order","setOrder","setTicker","op","topic","ammpool","baseAmt","quoteAmt","candlestick","orderBook","trade","useQuotePageWs","markets","getMarkets","useGetMarkets","c","every","getTickerArg","WindowEvent","DebugPage","stringify","events","Click","Scroll","forceReset","checkTimeout","GlobalProvider","children","web3Account","lv1Acc","prevChainId","usePrevious","prevWeb3Account","updateWalletLayer1","resetLayer1","checkStatus","accInfo","HasPubkey","ErrorResponse","Reconnect","FinishDeposit","setInterval","isTimeOut","clearInterval","setHandler","getHandler","useCheckAccStatus","removeEventListener","Fragment","MessageWrapper","Message","Web3ReactManager","useWeb3React","NetworkContextName","networkActive","networkError","activateNetwork","triedEager","useEagerConnect","useInactiveListener","showLoader","setShowLoader","timeout","setTimeout","clearTimeout","DevWrapper","TxPanel","setPageSize","txTableData","setTxTableData","getTxnStatus","TransactionStatus","processing","processed","received","failed","getUserTxnList","getUserTranferList","getUserDepositHistory","getUserOnchainWithdrawalHistory","userTxnList","userTransferMapped","userTransfers","senderAddress","receiverAddress","Number","volumeToCount","feeTokenSymbol","feeAmount","memo","time","txnHash","hash","tradeType","TransactionTradeTypes","userDepositMapped","userDepositHistory","txHash","userWithdrawMapped","userOnchainWithdrawalHistory","distributeHash","mappingList","sortedMappingList","sort","b","offsetHeight","Math","floor","ref","pagination","showFilter","StyledChartWrapper","StyledBtnGroupWrapper","AssetPanel","chartPeriod","setChartPeriod","setChartData","assetsKeyList","assetsDetailList","values","assetsList","detail","getUserTotalAssets","walletAPI","getUserAssets","wallet","assetType","AssetType","DEX","userAssets","createdAt","history","useHistory","onShowDeposit","onShowTransfer","onShowWithdraw","lpTokenJump","handleChartPeriodChange","faitPrices","tokenPriceList","entries","jointLPTokenValue","split","splice","ammToken","join","tokenValue","includes","amountDollar","doughnutData","tokenPriceUSDT","total","formattedDoughnutData","AssetTitleProps","assetInfo","totalAsset","next","priceTag","PriceTag","Dollar","assetsRawData","TokenType","lp","single","String","EmptyValueTag","available","locked","smallBalance","Paper","component","showFiliter","onLpDeposit","onLpWithdraw","getTokenInfo","StringToNumberWithPrecision","rawVal","precision","VolToNumberWithPrecision","originalData","setOriginalData","userTrades","marketList","side","Side","Buy","TradeTypes","Sell","tradeTime","AmmPanel","getTokenName","getAmmpoolList","ammpoolAPI","getUserAmmPoolTxs","userAmmPoolTxs","txType","AmmTxType","JOIN","AmmSideTypes","Join","Exit","poolTokens","actualAmount","lpTokenAmount","lpToken","updatedAt","OrderPanel","orderOriginalData","setOrderOriginalData","getOrders","userOrders","Array","isArray","orders","volumes","baseAmount","quoteAmount","baseFilled","quoteFilled","average","filledAmount","filledPrice","validity","start","detailTable","StyledPaper","StyledSwitch","Switch","textPrimary","border","success","backgroundColor","opacity","BtnCurrency","currency","Currency","dollar","setState","_handleChange","target","IconComponent","DropDownIcon","labelId","autoWidth","yen","StyledDivider","Divider","SettingPanel","focus","useTheme","setUpColor","setCurrency","direction","flexWrap","paddingLeft","paddingY","marginBottom","paddingX","Trans","i18nKey","alignSelf","Button","disabled","passDay","changeLanguage","textTransform","UpColor","green","up","down","red","subMenu","subMenuLayer2","BoxStyle","defaultFrame","c_key","SubMenuList","withRef","BasicSubMenuList","Layer2Page","accStatus","PoolsPanel","ammActivityMap","useAmmMapUI","updateTickersUI","page","handlePageChange","AmmPanelView","ammType","snapShotData","setAmmCalcData","ammJoinData","setAmmJoinData","ammExitData","setAmmExitData","ammDepositBtnI18nKey","setAmmDepositBtnI18nKey","ammWithdrawBtnI18nKey","setAmmWithdrawBtnI18nKey","initAmmData","_ammCalcData","ammPairInit","joinRequest","setJoinRequest","joinFees","setJoinFees","AMM_JOIN","handlerJoinInDebounce","idIndex","marketInfo","ammInfo","request1","poolAddress","getAmmPoolSnapshot","coinA_TV","pooled","coinB_TV","covertVal","ratio","rawA","rawB","makeJoinAmmPoolRequest","joinTokens","precisionForPrice","handleJoinAmmPoolEvent","exitRequest","setExitRequest","exitFees","setExitfees","AMM_EXIT","handleExitInDebounce","makeExitAmmPoolRequest","exitTokens","unPooled","handleExitAmmPoolEvent","isJoinLoading","setJoinLoading","isExitLoading","setExitLoading","addToAmmCalculator","patch","ammName","storageId0","request_1","storageId1","storageIds","joinAmmPool","onAmmDepositClickMap","removeAmmCalculator","burnedReq","burned","exitAmmPool","removeAmmClickMap","useAmmPanel","AmmPanelType","Deposit","isLoading","tabSelected","ammDepositBtnStatus","ammWithdrawBtnStatus","makeAmmDetailExtendsActivityMap","ammDetail","ammActivity","BoxStyled","fontDefault","h4","BoxTopStyled","CoinPairPanel","ammMapState","useSystem","useUserRewardsState","useUserRewards","setWalletMap","ammMarketArray","myAmmMarketArray","setMyAmmMarketArray","ammUserRewardMap","setAmmUserRewardMap","setSnapShotData","feeA","feeB","feeDollar","feeYuan","reward","rewardToken","balanceA","balanceB","balanceYuan","balanceDollar","myAmm","setMyAmm","activity","totalRewards","amountYuan","totalLPToken","totalA","totalB","rewardValue","isNew","isActivity","APY","coinPairInfo","setCoinPairInfo","pairHistory","setPairHistory","walletLayer2DoIt","_walletMap","getUserAmmTransaction","makeMyAmmMarketArray","getPairList","ammList","formattedPairHistory","reverse","_coinPairInfo","_snapShotData","_myAmm","makeMyAmmWithSnapshot","userRewardsMap","useCoinPair","tabIndex","setTabIndex","setPage","_handlePageChange","sellIconHasLoaded","useImage","hasLoaded","buyIconHasLoaded","Breadcrumbs","Link","href","getThousandFormattedNumbers","moment","duration","format","Avatar","sizes","alt","src","Yuan","priceDollar","priceYuan","AmmCardWrap","forwardRef","AmmList","ammActivityViewMap","jumpTo","sm","lg","AmmMiningView","userRewardsMapState","setAmmActivityViewMap","ammActivityPastViewMap","setAmmActivityPastViewMap","makeUIAmmActivityMap","ammPoolActivityStatus","AmmPoolActivityStatus","NotStarted","InProgress","EndOfGame","useAmmMiningUI","spacing","StyleWrapper","MyLiquidity","JumpToLiqudity","summaryReward","setSummaryReward","myPoolRow","setMyPoolRow","makeMyPoolRow","walletKey","test","rowData","replace","marketKey","makeMyPoolRowWithPoolState","_myPoolRow","makeSummaryMyAmm","useOverview","padding","margin","rewardDollar","rewardYuan","handleDeposit","row","handleWithdraw","subMenuLiquidity","LiquidityPage","AmmActivityMapState","useAmmActivityMap","getUserRewards","setAmmActivityMap","useAmmPool","matchPair","RouterView","Container","maxWidth","exact","path","StyleBox","ErrorPage","messageKey","textAlign","left","top","email","CONTACT_US_EMAIL","getContactInfo","preventDefault","App","systemState","tokenState","accountState","handleChainChanged","updateSystem","reload","handleAccountChanged","accounts","detectEthereumProvider","method","on","useInit","setStatus","GlobalStyles","styles","css","globalCss","mode","bg","LOADING_WHOLE_SITE","NO_NETWORK_ERROR","Web3ProviderNetwork","createWeb3ReactRoot","providers","LocalizationProvider","dateAdapter","MomentUtils","I18nextProvider","MuThemeProvider","getTheme","ThemeProvider","Provider","ReactDOM","render","getElementById","refreshRate","refreshRateSlow","tradingSlice","changeTradingInterval","setTickerMap","setMarketTrades","socketSlice","socket","getSocketStatus","CONSTANTS","rawHandler","sessionStorage","getItem","Handler","setItem","removeItem","dateTimeStr","localStorage","ActiveTime","now","Date","getTime","tmpDt","SESSION_TIMEOUT_SECONDS","clear","rawId","AccountId","Account","Apikey","Eddsakey","eddsakey","orderHash","AmmOrder","HardwareAddresses","toLowerCase","tickerMapSlice","getTickers","getTickerStatus","walletLayer2Slice","getWalletLayer2Status","context","contextNetwork","setEtherscanUrl","tried","setTried","isAuthorized","onReConnectInjected","ethereum","reConnectInjected","handleAccountsChanged","removeListener","ENV","NETWORKEXTEND","walletLayer1Slice","getWalletLayer1Status","userRewardsMapSlice","getUserRewardsStatus","ammActivityMapSlice","getAmmActivityMap","getAmmActivityMapStatus","addressIndex","tokenMapSlice","getTokenMapStatus","env","PROD","baseURL","socketURL","forex","systemSlice","updateSocketURL","updateRealTimeObj","getSystemStatus","setTopics","myReward","ammPoolActivityRule","awardRules","myRewards","currentRewards","rangeFrom","rangeTo","isPass","makeAsCard","_ammInfo","itemArray","ammUserReward","getOneRewardInfo","plus","rewardToken2","reward2","volumeToCountAsBigNumber","feeRewards","BigNumber","makeMyAmmWithStat","getBaseQuote","settings","marketTransaction","AmmTradeType","add","remove","totalDollar","totalYuan","amountA","amountB","txStatus","UserAPI","ExchangeAPI","AmmpoolAPI","wsAPI","InitApi","WalletAPI","WsAPI","updateVersion","createAction","getPostsSaga","ammActivityMapSaga","getAmmActivityMapApi","groupByRuleTypeAndStatus","call","put","takeLatest","updateRealTimeSaga","ammMapInitSaga","ammMapRealTimeSaga","setAmmState","ammPoolState","keyPair","liquidityUSD","lpLiquidity","liquidity","rewards","rewardValue2","change","timeUnit","apyBips","getAmmMapApi","ammpools","dataItem","ammMapSaga","fork","ammReducer","combineReducers","reducer","ammForks","tokenInitSaga","getTokenMapApi","tokensMap","pairs","marketArr","tokenArr","startsWith","getIcon","company","tokenList","tradePairs","tokenSaga","tickerSaga","tickersSaga","getTickersApi","getMixTicker","tickers","makeTickerMap","tickerKey","tickerKeys","NO_TOKEN_KEY_LIST","tickerForks","getUpdateSystem","systemSaga","initConfig","tokenSymbolMap","take","getSystemsApi","hostname","DEV","UAT","NONETWORK","getFiatPrice","legal","fiatPrices","getGasPrice","systemForks","walletLayer1Saga","getWalletLayer1Balance","getEthBalances","ethBalance","getTokenBalances","tokenBalances","fromWEI","walletLayer1Fork","walletLayer2Saga","getWalletLayer2Balance","getUserBalances","userBalances","walletLayer2Fork","userRewardsSaga","getUserRewardsApi","getAmmPoolUserRewards","reject","userRewardsForks","closeSocket","socketEndSaga","socketSendMessageSaga","socketClose","socketSendMessage","socketForks","mySaga","sagaMiddleware","createSagaMiddleware","settingsSlice","modalsSlice","PERSISTED_KEYS","configureStore","middleware","getDefaultMiddleware","thunk","serializableCheck","save","devTools","enhancers","reduxBatch","preloadedState","load","run","HasNoPubkey","IsSmartWallet","ApproveSubmit","ApproveConfirmed","getIconByTokenInfo","utils","getAddress","getToken","valueInWEI","ceil","precisionToFixed","updateTicker","isNaN","baseVol","coinACount","coinBCount","onclickMap","deps","fn","args","UNKNOWN","DEFAULT","apply","customSlippage","setSlippage","tick","floatTag","FloatTag","none","increase","decrease","base_token_volume","__rawTicker__","NO_SDK","stob","poolVolumn","poolBaseTokenVol","quoteBaseTokenVol","NO_SUPPORT_PAIR","countBig","pending","minus","Subject","sendTicker","_tickerMap","asObservable","SocketEventType","pingPong","global","looperingSocket","socketEventMap","pingpong","isConnectSocket","globalThis","loopringSocket","reolve","makeTopics","unsubscribeAll","clearInitTimer","init","__wsTimer__","timer","socketConnect","baseSocket","warn","makeMessageArray","SOCKET_ERROR","eventType","makeReceiveMessageCallback","getAccountArg","getOrderArg","orderbook","getOrderBookArg","getTradeArg","getCandlestickArg","getAmmpoolArg","SocketEventMap","bid","ask","quote_token_volume","base_fee_amt","quote_fee_amt","poolName","risky","ammPoolService","sendAmmPool","useDeepCompareEffect","ammPoolMap","volumn","setRawData","setTimestamp","ammMapStatus","ammMapStatusUnset","_ammMap","tickerMapKey","NO_TOKEN_MAP","updateTickerLoop","_keys","setImmediate","_page","i","useApi","ApiClass","DEFAULT_TIMEOUT","genApi"],"mappings":"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","file":"static/js/main~06837ae4.81d5a7af.chunk.js","sourcesContent":["import { toBig } from 'loopring-sdk'\n\nexport enum OrderHandling {\n    processed = 'processed',\n    no_such_order = 'no_such_order',\n    too_many_times = 'too_many_times',\n}\n\nexport const BIG0 = toBig(0)\n\nexport const BIG1 = toBig(1)\n\nexport const BIG10 = toBig(10)\n\nexport const BIG10K = toBig(10000)\n\nexport const MULTI_FACTOR = 10000\n","import { useDispatch, useSelector } from 'react-redux'\nimport { AmmMapStates } from './interface';\nimport React from 'react';\nimport { getAmmMap, statusUnset } from './reducer';\n\nexport const useAmmMap = <R extends {[key:string]:any},I extends {[key:string]:any}>(): AmmMapStates<R,I> & {\n    getAmmMap:()=> void,\n    statusUnset:()=> void,\n} => {\n    const ammMap:AmmMapStates<R,I>= useSelector((state: any) => state.amm.ammMap)\n    const dispatch = useDispatch();\n    return {\n        ...ammMap,\n        statusUnset:React.useCallback(()=>dispatch(statusUnset(undefined)),[dispatch]),\n        getAmmMap:React.useCallback(()=>dispatch(getAmmMap(undefined)),[dispatch]),\n    }\n}\n","import { createSlice, PayloadAction, Slice } from '@reduxjs/toolkit'\n\nimport { AccountInfo, ConnectorNames, } from 'loopring-sdk'\n\nimport { Lv2Account, } from 'defs/account_defs'\nimport { AccountStatus } from 'state_machine/account_machine_spec'\nimport { UserStorage } from 'storage'\n\n\nconst initialState = () => {\n  const defaultAccId = process.env.REACT_APP_TEST_ACCOUND_ID ? process.env.REACT_APP_TEST_ACCOUND_ID : UserStorage.getAccountId()\n  const defaultApiKey = process.env.REACT_APP_TEST_API_KEY ? process.env.REACT_APP_TEST_API_KEY : UserStorage.getApikey()\n  const defaultOwner = process.env.REACT_APP_TEST_OWNER ? process.env.REACT_APP_TEST_OWNER : UserStorage.getAccount()\n  const defaultEddsaKey = process.env.REACT_APP_TEST_EDDSA_KEY ? process.env.REACT_APP_TEST_EDDSA_KEY : UserStorage.getEddsakey()\n\n  const defaultStatus = AccountStatus.UNCONNNECTED\n  return {\n    accAddr: defaultOwner,\n    status: defaultStatus,\n    accountId: defaultAccId,\n    publicKey: {},\n    nonce: 0,\n    isContractAddress: false,\n    apiKey: defaultApiKey,\n    eddsaKey: defaultEddsaKey,\n    connectName: ConnectorNames.Unknown,\n    connectNameTemp: ConnectorNames.Unknown,\n  } as Lv2Account\n}\n\nconst accountSlice:Slice = createSlice({\n  name: 'account',\n  initialState: initialState(),\n  reducers: {\n    reset(state) {\n      const initState = initialState()\n      Object.assign(state, initState)\n    },\n    setAccAddr(state, action: PayloadAction<string>) {\n      state.accAddr = action.payload\n      // UserStorage.setAccount(action.payload)\n    },\n    setAccountInfo(state, action: PayloadAction<AccountInfo>) {\n      state.accAddr = action.payload.owner\n      state.accountId = action.payload.accountId\n      state.nonce = action.payload.nonce\n      state.publicKey = action.payload.publicKey\n\n      // UserStorage.setAccount(state.accAddr)\n      // UserStorage.setAccountId(state.accountId)\n      \n    },\n    setApikey(state, action: PayloadAction<string>) {\n      state.apiKey = action.payload\n      // UserStorage.setApikey(action.payload)\n    },\n    setAccountStatus(state, action: PayloadAction<AccountStatus>) {\n      state.status = action.payload\n    },\n    setEddsaKey(state, action: PayloadAction<any>) {\n      state.eddsaKey = action.payload\n      // UserStorage.setEddsakey(action.payload)\n    },\n    setConnectName(state, action: PayloadAction<ConnectorNames>) {\n      state.connectName = action.payload\n    },\n    setConnectNameTemp(state, action: PayloadAction<ConnectorNames>) {\n      state.connectNameTemp = action.payload\n    },\n    setIsContractAddress(state, action: PayloadAction<boolean>) {\n      state.isContractAddress = action.payload\n    },\n  },\n})\n\nexport const { reset, setAccAddr, setApikey, setConnectName, setConnectNameTemp, setAccountInfo, setAccountStatus, setEddsaKey, setIsContractAddress, } = accountSlice.actions\nexport default accountSlice\n","import { useDispatch, useSelector } from 'react-redux'\nimport { getTokenMap, statusUnset} from './reducer';\nimport { GetTokenMapParams, TokenMapStates } from './interface';\nimport React from 'react';\nimport { PayloadAction } from '@reduxjs/toolkit';\n\nexport function useTokenMap<R extends {[key:string]:any}>(): TokenMapStates<R> & {\n    getTokenMap:(props:PayloadAction<GetTokenMapParams<any>>)=>void,\n    statusUnset:()=>void,\n} {\n    const tokenMap:TokenMapStates<R> = useSelector((state: any) => state.tokenMap)\n    const dispatch = useDispatch();\n\n    return {\n        ...tokenMap,\n        statusUnset:React.useCallback(()=>dispatch(statusUnset(undefined)),[dispatch]),\n        getTokenMap:React.useCallback((props:PayloadAction<GetTokenMapParams<R>>)=>dispatch(getTokenMap(props)),[dispatch]),\n    }\n\n}\n","export function myLog(message?: any, ...optionalParams: any[]) {\n    if (process.env.NODE_ENV !== 'production') {\n        console.log(message, ...optionalParams)\n    }\n}\n","import { useAmmpoolAPI, useExchangeAPI } from 'hooks/exchange/useApi'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { useCustomDCEffect } from 'hooks/common/useCustomDCEffect'\n\nimport store, { RootState } from 'stores'\n\nimport { \n    setMarkets, \n    setExchangeInfo, \n    setTokens, \n    setTickerMap, \n    setAmmPoolStats,\n    setAmmPoolConf, \n    setMarketTrades,\n    setAmmActivityRules,\n    setChainId, \n} from 'stores/trading/reducer'\n\nimport { dumpError400, ChainId, AmmPoolStat, Currency, } from 'loopring-sdk'\nimport { useActiveWeb3React } from 'hooks/web3/useWeb3'\nimport { useEffect } from 'react'\n\nimport { ammpoolAPI, exchangeAPI } from \"stores/apis/api\"\n\nexport function getTradingInfo() {\n    const tradingInfo = store.getState().trading\n    return {\n        tradingInfo,\n        chainId: tradingInfo.chainId,\n    }\n}\n\nexport function getAccount() {\n    return  store.getState().account\n\n}\n\nexport function getChainId(){\n    const chainId = store.getState().system.chainId;\n    return chainId\n\n}\n\nexport function useGetTradingInfo() {\n    const tradingInfo = useSelector((state: RootState) => state.trading)\n    return {\n        tradingInfo,\n        chainId: tradingInfo.chainId,\n    }\n}\n\nexport function useUpdateChainId() {\n    const { chainId } = useActiveWeb3React()\n    const dispatch = useDispatch()\n    useEffect(() => {\n        dispatch(setChainId(chainId ?? ChainId.GORLI))\n    }, [chainId, dispatch])\n}\n\nexport function useUpdateExchangeMarkets() {\n    const dispatch = useDispatch()\n    const api = useExchangeAPI()\n\n    useCustomDCEffect(async() => {\n\n        if (!api) {\n            return\n        }\n\n        try {\n            const response = await api.getMixMarkets()\n            dispatch(setMarkets(response))\n        } catch (reason) {\n            dumpError400(reason)\n        }\n\n    }, [api])\n\n}\n\nexport function useUpdateExchangeInfo() {\n\n    const dispatch = useDispatch()\n    const api = useExchangeAPI()\n\n    useCustomDCEffect(async() => {\n\n        if (!api) {\n            return\n        }\n\n        try {\n            const response = await api.getExchangeInfo()\n            dispatch(setExchangeInfo(response.exchangeInfo))\n        } catch (reason) {\n            dumpError400(reason)\n        }\n\n    }, [api])\n\n}\n\nexport function useUpdateAmmPoolConf() {\n\n    const dispatch = useDispatch()\n    const api = useAmmpoolAPI()\n\n    useCustomDCEffect(async() => {\n\n        if (!api) {\n            return\n        }\n\n        try {\n            const ammPoolConf = await api.getAmmPoolConf()\n            dispatch(setAmmPoolConf(ammPoolConf))\n        } catch (reason) {\n            dumpError400(reason)\n        }\n\n    }, [api])\n\n}\n\nexport function useUpdateAmmPoolStats() {\n\n    const dispatch = useDispatch()\n    const api = useAmmpoolAPI()\n\n    useCustomDCEffect(async() => {\n\n        if (!api) {\n            return\n        }\n\n        try {\n            const ammPoolStats = await api.getAmmPoolStats()\n            dispatch(setAmmPoolStats(ammPoolStats))\n        } catch (reason) {\n            dumpError400(reason)\n        }\n\n    }, [api])\n\n}\n\nexport function useUpdateAmmActivityRules() {\n\n    const dispatch = useDispatch()\n    const api = useAmmpoolAPI()\n\n    useCustomDCEffect(async() => {\n\n        if (!api) {\n            return\n        }\n\n        try {\n            const ammActivityRules = await api.getAmmPoolActivityRules()\n            dispatch(setAmmActivityRules(ammActivityRules.activityRules))\n        } catch (reason) {\n            dumpError400(reason)\n        }\n\n    }, [api])\n\n}\n\nexport function useUpdateTokens() {\n\n    const dispatch = useDispatch()\n    const api = useExchangeAPI()\n\n    useCustomDCEffect(async() => {\n\n        if (!api) {\n            return\n        }\n\n        try {\n            const tokens = await api.getTokens()\n            dispatch(setTokens(tokens))\n        } catch (reason) {\n            dumpError400(reason)\n        }\n\n    }, [api])\n\n}\n\nexport function useUpdateTickerMap(market: string) {\n\n    const dispatch = useDispatch()\n    const api = useExchangeAPI()\n\n    useCustomDCEffect(async() => {\n\n        if (!api) {\n            return\n        }\n\n        try {\n            const tickMap = await api.getTicker({\n                market\n              })\n            dispatch(setTickerMap(tickMap))\n        } catch (reason) {\n            dumpError400(reason)\n        }\n\n    }, [api])\n\n}\n\nexport function useMarketTrades(market: string) {\n  \n    const dispatch = useDispatch()\n    const api = useExchangeAPI()\n\n    useCustomDCEffect(async() => {\n\n        if (!api) {\n            return\n        }\n\n        try {\n            const marketTrades = await api.getMarketTrades({\n                market\n              })\n            dispatch(setMarketTrades(marketTrades))\n        } catch (reason) {\n            dumpError400(reason)\n        }\n\n    }, [api, dispatch])\n\n}\n\nexport function useUpdateFiatPrice() {\n  \n    const dispatch = useDispatch()\n    const api = useExchangeAPI()\n\n    useCustomDCEffect(async() => {\n\n        if (!api) {\n            return\n        }\n\n        try {\n            const usdFiatPrices = await api.getFiatPrice({\n                legal: Currency.USD\n            })\n            const cnyFiatPrices = await api.getFiatPrice({\n                legal: Currency.CNY\n            })\n            dispatch(setMarketTrades({}))\n        } catch (reason) {\n            dumpError400(reason)\n        }\n\n    }, [api, dispatch])\n\n}\n\n// export const asyncGetTradingInfo = async() => {\n//\n//     const { tradingInfo } = getTradingInfo()\n//     console.log('--- tradingInfo', tradingInfo)\n//\n//     let tokens: any = undefined\n//\n//     if (tradingInfo.tokens?.tokenIdMap) {\n//         tokens = tradingInfo.tokens\n//     } else {\n//         tokens = (await exchangeAPI().getTokens())\n//     }\n//\n//     let ammpools: any = undefined\n//\n//     if (tradingInfo.ammPoolConf?.ammpools) {\n//         ammpools = tradingInfo.ammPoolConf.ammpools\n//     } else {\n//         ammpools = (await ammpoolAPI().getAmmPoolConf()).ammpools\n//     }\n//\n//     let ammPoolStats: { [key: string] : AmmPoolStat } = {}\n//\n//     if (tradingInfo.ammPoolStats.ammPoolStats) {\n//         ammPoolStats = tradingInfo.ammPoolStats.ammPoolStats\n//     } else {\n//         ammPoolStats = (await ammpoolAPI().getAmmPoolStats()).ammPoolStats\n//     }\n//\n//     return {\n//         tokens,\n//         ammpools,\n//         ammPoolStats,\n//     }\n// }","import { debug } from \"console\"\n\nexport function deepClone(data: any) {\n    if (!data || !(data instanceof Object) || (typeof data == \"function\")) {\n        return data || undefined\n    }\n    let constructor = data.constructor\n    let result = new constructor()\n    for (let key in data) {\n        if (data.hasOwnProperty(key)) {\n            result[key] = deepClone(data[key])\n        }\n    }\n    return result\n}\n\nexport async function copyToClipBoard(text: string){ //复制到剪切板\n\n    if(document.execCommand){\n        var textarea =document.createElement('textarea')\n        document.body.appendChild(textarea)\n        textarea.value=text\n        textarea.select()\n        document.execCommand(\"copy\")\n        document.body.removeChild(textarea)\n\t}\n\n    if (navigator.clipboard) {\n        await navigator.clipboard.writeText(text)\n    }\n\n\tif((window as any).clipboardData) {\n        (window as any).clipboardData.setData(\"Text\", text)\n\n        console.log('clipboardData:', text)\n        return true\n    }\n\treturn false\n}","import { useDispatch, useSelector } from 'react-redux'\nimport { reset, statusUnset, updateWalletLayer2 } from './reducer';\nimport { WalletLayer2States } from './interface';\nimport { myLog } from 'utils/log_tools';\nimport _ from 'lodash'\nimport React from 'react';\n\nexport function useWalletLayer2(): WalletLayer2States & {\n    delayAndUpdateWalletLayer2: () => Promise<void>,\n    updateWalletLayer2: () => void,\n    statusUnset: () => void,\n    resetLayer2: () => void,\n} {\n    const walletLayer2: WalletLayer2States = useSelector((state: any) => state.walletLayer2)\n    const dispatch = useDispatch();\n\n    const delayAndUpdateWalletLayer2 = async () => {\n\n    }\n\n    // const updateWalletLayer2 = () => {\n    //     dispatch(walletLayer2Slice.actions.updateWalletLayer2(undefined))\n    // }\n    // const statusUnset = ()=>{\n    //     dispatch(walletLayer2Slice.actions.statusUnset(undefined))\n    // }\n    // const resetLayer2 = ()=>{\n    //     dispatch(walletLayer2Slice.actions.reset(undefined))\n    // }\n    return {\n        ...walletLayer2,\n        resetLayer2: React.useCallback(() => dispatch(reset(undefined)), [dispatch]),\n        statusUnset: React.useCallback(() => dispatch(statusUnset(undefined)), [dispatch]),\n        delayAndUpdateWalletLayer2: React.useCallback(async () => {\n            myLog('try to delayAndUpdateWalletLayer2')\n            _.delay(() => {\n                updateWalletLayer2(undefined)\n                return Promise.resolve()\n            }, 3000);\n        }, [dispatch]),\n        updateWalletLayer2: React.useCallback(() => dispatch(updateWalletLayer2(undefined)), [dispatch]),\n    }\n\n}\n","import { InjectedConnector } from '@web3-react/injected-connector'\nimport { NetworkConnector } from '@web3-react/network-connector'\nimport { WalletConnectConnector } from '@web3-react/walletconnect-connector'\nimport { WalletLinkConnector } from '@web3-react/walletlink-connector'\nimport { LedgerConnector } from '@web3-react/ledger-connector'\nimport { TrezorConnector } from '@web3-react/trezor-connector'\nimport { AuthereumConnector } from '@web3-react/authereum-connector'\nimport { myLog } from 'utils/log_tools'\n\nconst POLLING_INTERVAL = 12000\n\nconst RPC_URLS: { [chainId: number]: string } = {\n  1: process.env.REACT_APP_RPC_URL_1 as string,\n  5: process.env.REACT_APP_RPC_URL_5 as string\n}\n\nmyLog('RPC_URLS 1:', RPC_URLS[1])\nmyLog('RPC_URLS 5:', RPC_URLS[5])\n\nexport const injected = new InjectedConnector({ supportedChainIds: [1, 5,] })\n\nexport const network = new NetworkConnector({\n  urls: { \n    1: RPC_URLS[1], \n    5: RPC_URLS[5] \n  },\n  defaultChainId: 1\n})\n\nexport const walletconnect = new WalletConnectConnector({\n  rpc: { 1: RPC_URLS[1] },\n  bridge: 'https://bridge.walletconnect.org',\n  qrcode: true,\n  pollingInterval: POLLING_INTERVAL\n})\n\nexport const walletlink = new WalletLinkConnector({\n  url: RPC_URLS[1],\n  appName: 'Loopring DEX'\n})\n\nexport const ledger = new LedgerConnector({ chainId: 1, url: RPC_URLS[1], pollingInterval: POLLING_INTERVAL })\n\nexport const trezor = new TrezorConnector({\n  chainId: 1,\n  url: RPC_URLS[1],\n  pollingInterval: POLLING_INTERVAL,\n  manifestEmail: 'dummy@abc.xyz',\n  manifestAppUrl: 'http://localhost:1234'\n})\n\nexport const authereum = new AuthereumConnector({ chainId: 42 })\n","import { createSlice, PayloadAction, Slice } from '@reduxjs/toolkit'\nimport { AmmMapStates, GetAmmMapParams } from './interface';\nimport { STATUS } from '../../constant';\n\n\n\nconst initialState: Required<AmmMapStates<object, object>> = {\n    ammMap: undefined,\n    __timer__: -1,\n    status: 'UNSET',\n    errorMessage: null,\n}\nconst ammMapSlice: Slice = createSlice({\n    name: 'ammMap',\n    initialState,\n    reducers: {\n        getAmmMap(state, action: PayloadAction<GetAmmMapParams>) {\n            state.status = STATUS.PENDING\n        },\n        getAmmMapStatus(state, action: PayloadAction<AmmMapStates<any, any>>) {\n            // @ts-ignore\n            if (action.error) {\n                state.status = STATUS.ERROR\n                // @ts-ignore\n                state.errorMessage = action.error\n            }\n            const {ammMap, __timer__} = action.payload\n            if (ammMap) {state.ammMap = ammMap;}\n            if (__timer__) {state.__timer__ = __timer__;}\n            state.status = STATUS.DONE\n        },\n        updateRealTimeAmmMap(state, action: PayloadAction<undefined>) {\n            state.status = STATUS.PENDING\n        },\n        statusUnset: state => {\n            state.status = STATUS.UNSET\n        }\n    },\n});\nexport { ammMapSlice };\nexport const {getAmmMap, getAmmMapStatus, statusUnset, updateRealTimeAmmMap} = ammMapSlice.actions\n","import { ConnectorNames } from 'loopring-sdk'\n\nimport {\n    injected,\n    network,\n    walletconnect,\n    walletlink,\n    ledger,\n    trezor,\n    authereum,\n} from 'networks/web3_connectors'\n\nexport const connectorsByName: { [connectorName in ConnectorNames]: any } = {\n    [ConnectorNames.Unknown]: undefined,\n    [ConnectorNames.Injected]: injected,\n    [ConnectorNames.Network]: network,\n    [ConnectorNames.WalletConnect]: walletconnect,\n    [ConnectorNames.WalletLink]: walletlink,\n    [ConnectorNames.Ledger]: ledger,\n    [ConnectorNames.Trezor]: trezor,\n    [ConnectorNames.Authereum]: authereum,\n}\n","import React from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\n\nimport { useCustomDCEffect } from 'hooks/common/useCustomDCEffect'\n\nimport { useGetTradingInfo } from 'stores/trading/hook'\nimport { useActiveWeb3React, } from 'hooks/web3/useWeb3'\n\nimport { Lv2Account, } from 'defs/account_defs'\n\nimport { AccountStatus, StatusChangeEvent } from 'state_machine/account_machine_spec'\n\nimport * as sign_tools from 'loopring-sdk'\n\nimport { connectorsByName } from 'defs/web3_defs'\n\nimport { ChainId, ConnectorNames, dumpError400, ExchangeAPI, GetOffchainFeeAmtRequest, OffchainFeeReqType, sleep, UpdateAccountRequestV3, UserAPI, VALID_UNTIL, } from 'loopring-sdk'\n\nimport { toHex, toBig, } from 'loopring-sdk'\n\nimport { RootState } from 'stores'\n\nimport {\n    reset, setAccountStatus, setConnectName,\n    setConnectNameTemp, setAccountInfo, setEddsaKey, setApikey, setAccAddr,\n} from 'stores/account/reducer'\n\nimport { AccountMachineSpec, } from 'state_machine/account_machine_spec'\n\nimport { buildMachine } from 'state_machine/machine_builder'\n\nimport voca from 'voca'\nimport { usePrevious } from 'react-use'\n\nimport Web3 from 'web3'\n\nimport { useExchangeAPI, useUserAPI } from 'hooks/exchange/useApi'\n\nimport { UserStorage } from 'storage'\n\nimport store from 'stores'\nimport { useWalletLayer1 } from '../walletLayer1';\nimport { useWalletLayer2 } from '../walletLayer2';\nimport { useTokenMap } from '../token';\nimport _ from 'lodash'\n\nexport function useWeb3Account() {\n\n    const {\n        connector,\n        library,\n        account,\n        chainId,\n        active,\n        error,\n    } = useActiveWeb3React()\n\n    const isConnected: boolean = active && !voca.isBlank(account as string)\n\n    return {\n        account,\n        connector,\n        library,\n        chainId,\n        active,\n        isConnected,\n        error,\n    }\n\n}\n\nexport function useAccount() {\n\n    const account: Lv2Account = useSelector((state: RootState) => state.account)\n\n    const isNoAccount = () => {\n        return account.status === AccountStatus.NOACCOUNT\n    }\n\n    const isActivated = () => {\n        return account.status === AccountStatus.ACTIVATED\n    }\n\n    return {\n        account,\n        isNoAccount,\n        isActivated,\n        apiKey: account.apiKey,\n        eddsaKey: account.eddsaKey,\n        accountId: account.accountId,\n    }\n}\n\nexport function useStateMachine() {\n    const dispatch = useDispatch()\n\n    const machine = buildMachine(AccountMachineSpec())\n\n    const sendEvent = React.useCallback((account: Lv2Account, event: StatusChangeEvent) => {\n        const nextState = machine(account.status, event)\n        if (nextState) {\n            dispatch(setAccountStatus(nextState))\n        }\n    }, [machine, dispatch])\n\n    return {\n        sendEvent,\n    }\n}\n\nexport function useConnect() {\n\n    const {\n        activate,\n    } = useActiveWeb3React()\n\n    const { sendEvent } = useStateMachine()\n\n    const dispatch = useDispatch()\n\n    const [activatingConnector, setActivatingConnector] = React.useState<any>()\n\n    const connect = React.useCallback((item_name: ConnectorNames, isSwitch: boolean = false) => {\n        const newConnector: any = connectorsByName[item_name]\n        setActivatingConnector(newConnector)\n        activate(newConnector)\n        dispatch(setConnectNameTemp(item_name))\n\n        if (isSwitch) {\n            //  console.log('try Connecting... isSwitch Reset')\n            sendEvent(store.getState().account, StatusChangeEvent.Reset)\n        }\n\n        sendEvent(store.getState().account, StatusChangeEvent.Connecting)\n\n    }, [activate, dispatch, sendEvent])\n\n    return {\n        connect,\n        activatingConnector,\n    }\n\n}\n\nexport function useDisconnect() {\n\n    const {\n        deactivate,\n    } = useActiveWeb3React()\n\n    const dispatch = useDispatch()\n\n    const disconnect = React.useCallback(() => {\n        deactivate()\n        dispatch(reset(undefined))\n        //TODO dispatch wallet info \n    }, [deactivate, dispatch])\n\n    return {\n        disconnect,\n    }\n\n}\n\nexport function useUnlock() {\n\n    const dispatch = useDispatch()\n\n    const { chainId } = useWeb3Account()\n\n    const exchangeApi: ExchangeAPI = useExchangeAPI()\n\n    const userApi: UserAPI = useUserAPI()\n\n    const { tradingInfo } = useGetTradingInfo()\n\n    const { connector, } = useWeb3Account()\n\n    const { sendEvent } = useStateMachine()\n\n    const { resetLayer2 } = useWalletLayer2()\n\n    const lock = React.useCallback(async (account: Lv2Account) => {\n        resetLayer2()\n        sendEvent(account, StatusChangeEvent.Lock)\n    }, [sendEvent])\n\n    const unlock = React.useCallback(async (account: Lv2Account) => {\n\n        const exchangeInfo = store.getState().system.exchangeInfo?.exchangeAddress\n\n        if (!userApi || !exchangeApi || !connector\n            || !account.accountId || !exchangeInfo\n            || !chainId\n            || account.status !== AccountStatus.LOCKED) {\n            return\n        }\n\n        if (account.status !== AccountStatus.LOCKED) {\n            throw Error('unexpected status:' + account.status)\n        }\n\n        let event = undefined\n        let sk = undefined\n        let apikey: any = undefined\n\n        const provider = await connector.getProvider()\n        const web3 = new Web3(provider as any)\n\n        try {\n\n            const nonce = account.nonce - 1 < 0 ? 0 : account.nonce - 1\n\n            if (!account.eddsaKey) {\n                const eddsaKey = await sign_tools\n                    .generateKeyPair(\n                        web3,\n                        account.accAddr,\n                        exchangeInfo,\n                        nonce,\n                        account.connectName,\n                    )\n                sk = eddsaKey.sk\n\n            } else {\n                sk = account.eddsaKey\n            }\n\n            // console.log('useUnlock account:', account, ' sk:', sk)\n\n            apikey = await userApi.getUserApiKey({\n                accountId: account.accountId\n            }, sk)\n\n            event = StatusChangeEvent.Unlock\n\n        } catch (reason) {\n            dumpError400(reason)\n            if (reason?.response?.data?.resultInfo?.code === 100001) {\n\n                try {\n\n                    // const req: GetOffchainFeeAmtRequest = {\n                    //     accountId: account.accountId,\n                    //     requestType: OffchainFeeReqType.UPDATE_ACCOUNT,\n                    // }\n    \n                    // const response = await userApi.getOffchainFeeAmt(req, account.apiKey)\n\n                    const feeMap = {\n                        'ETH': '529000000000000',\n                        'LRC': '34000000000000000000',\n                        'USDT': '7850000',\n                        'DAI': '98100000000000000000',\n                    }\n                    \n                    const eddsaKey = await sign_tools\n                        .generateKeyPair(\n                            web3,\n                            account.accAddr,\n                            tradingInfo.exchangeInfo?.exchangeAddress as string,\n                            account.nonce,\n                            account.connectName,\n                        )\n                    \n                    const request: UpdateAccountRequestV3 = {\n                        exchange: tradingInfo.exchangeInfo?.exchangeAddress,\n                        owner: account.accAddr,\n                        accountId: account.accountId,\n                        publicKey: { x: eddsaKey.formatedPx, y: eddsaKey.formatedPy },\n                        maxFee: { tokenId: 0, volume: feeMap['ETH'] },\n                        validUntil: VALID_UNTIL,\n                        nonce: account.nonce,\n                    }\n\n                    const updateAccountResponse = await userApi.updateAccount(request, web3,\n                        chainId, account.connectName, false)\n\n                    console.log('updateAccountResponse:', updateAccountResponse)\n\n                    await sleep(1000)\n\n                } catch (reason2) {\n                    dumpError400(reason2)\n                }\n            }\n            event = StatusChangeEvent.Reset\n        }\n\n        if (sk) {\n            dispatch(setEddsaKey(sk))\n        }\n\n        if (apikey?.apiKey) {\n            dispatch(setApikey(apikey.apiKey))\n        }\n\n        if (event) {\n            sendEvent(account, event)\n        }\n\n    }\n        , [dispatch, sendEvent, exchangeApi, userApi, connector, chainId, tradingInfo.exchangeInfo])\n\n    return {\n        lock,\n        unlock,\n    }\n}\n\nasync function checkAccountAvailableAsync(exchangeApi: ExchangeAPI, userApi: UserAPI, account: Lv2Account, dispatch: any, sendEvent: any, connector: any, exchangeAddress: string) {\n\n    let accInfo = undefined\n    let event = undefined\n    let sk = undefined\n    let code = undefined\n    let apikey: any = undefined\n\n    try {\n        accInfo = (await exchangeApi.getAccount({\n            owner: account.accAddr\n        })).accInfo\n        if (accInfo.publicKey && accInfo.publicKey.x && accInfo.publicKey.y) {\n            if (account.accountId !== accInfo.accountId) {\n                const provider = await connector.getProvider()\n                const web3 = new Web3(provider as any)\n                try {\n                    code = await web3.eth.getCode(account.accAddr)\n                    try {\n                        const eddsakey = await sign_tools\n                            .generateKeyPair(\n                                web3,\n                                account.accAddr,\n                                exchangeAddress,\n                                accInfo.nonce - 1,\n                                account.connectName,\n                            )\n                        sk = toHex(toBig(eddsakey.keyPair.secretKey))\n                        const px = toHex(toBig(eddsakey.keyPair.publicKeyX))\n                        const py = toHex(toBig(eddsakey.keyPair.publicKeyY))\n\n                        try {\n                            apikey = await userApi.getUserApiKey({\n                                accountId: accInfo.accountId\n                            }, sk)\n                            event = (StatusChangeEvent.HasPubkey)\n                        } catch (reason) {\n                            dumpError400(reason)\n                            event = (StatusChangeEvent.ErrorResponse)\n                        }\n                    } catch (reason) {\n                        dumpError400(reason)\n                        event = (StatusChangeEvent.ErrorResponse)\n                    }\n\n                } catch (reason) {\n                    dumpError400(reason)\n                    event = (StatusChangeEvent.ErrorResponse)\n                }\n\n            } else {\n                console.log('already has accountId!')\n            }\n        } else {\n            event = (StatusChangeEvent.HasNoPubkey)\n        }\n    } catch (reason) {\n        // 3 has none of above\n        dumpError400(reason)\n        // check deposit tx (local and ethereum)\n        event = (StatusChangeEvent.ErrorResponse)\n    }\n\n    if (accInfo && accInfo.owner !== account.accAddr) {\n        dispatch(setAccountInfo(accInfo))\n    }\n\n    if (sk) {\n        dispatch(setEddsaKey(sk))\n    }\n\n    if (apikey) {\n        dispatch(setApikey(apikey.apiKey))\n    }\n\n    if (event) {\n        sendEvent(event)\n    }\n\n}\n\nexport function useCheckAccStatus() {\n\n    const dispatch = useDispatch()\n\n    // const { account } = useAccount()\n\n    const { sendEvent } = useStateMachine()\n\n    const exchangeApi: ExchangeAPI = useExchangeAPI()\n\n    const userApi: UserAPI = useUserAPI()\n\n    const { account: web3Account, active, isConnected, chainId, connector, } = useWeb3Account()\n    const { marketArray } = useTokenMap()\n\n    const lv1Acc = web3Account as string\n\n    const prevChainId = usePrevious(chainId)\n    const prevWeb3Account = usePrevious(web3Account)\n\n    const {updateWalletLayer1, resetLayer1,} = useWalletLayer1()\n    const {updateWalletLayer2, resetLayer2, } = useWalletLayer2();\n\n    // const { updateWalletLayer1,resetLayer1} = useWalletLayer1();\n    // const { updateWalletLayer2, resetLayer2} = useWalletLayer2()\n\n    // console.log('prevChainId:', prevChainId, ' chainId:', chainId)\n    // console.log('prevWeb3Account:', prevWeb3Account, ' web3Account:', web3Account)\n\n    // console.log(exchangeApi, userApi, account, 'prevChainId:', prevChainId, 'chainId:', chainId, 'web3Account:', web3Account)\n\n    const { tradingInfo } = useGetTradingInfo()\n\n    useCustomDCEffect(async() => {\n\n        const account = store.getState().account\n\n        const cleanUp = () => {\n            let handler = UserStorage.getHandler()\n            if (account.status !== AccountStatus.ACTIVATED && handler) {\n                clearInterval(handler)\n            }\n        }\n\n        async function checkStatus() {\n\n            if (!account || !lv1Acc || !exchangeApi || !userApi || !chainId\n                || !connector || !tradingInfo.exchangeInfo?.exchangeAddress) {\n                return\n            }\n\n            if (((prevChainId && chainId && prevChainId !== chainId)\n                || (prevWeb3Account && web3Account && prevWeb3Account !== web3Account))\n                && account.status !== AccountStatus.UNCONNNECTED) {\n                dispatch(reset(undefined))\n                sendEvent(account, StatusChangeEvent.Reset)\n                return\n            }\n\n            cleanUp()\n\n            switch (account.status) {\n                case AccountStatus.UNCONNNECTED:\n                    // console.log('---> render UNCONNNECTED active:', active, ' isConnected:', isConnected)\n\n                    if (isConnected) {\n                        dispatch(setConnectNameTemp(ConnectorNames.Injected))\n                        sendEvent(account, StatusChangeEvent.Connecting)\n                    }\n\n                    //HIGH:\n                    resetLayer1()\n                    resetLayer2()\n                    break\n\n                case AccountStatus.CONNECTED:\n                    //check session or local storage\n\n                    //  console.log('---> render CONNECTED account:', account)\n\n                    try {\n\n                        const { accInfo } = (await exchangeApi.getAccount({ owner: lv1Acc }))\n\n                        // current acc is local acc info\n                        if (account.accAddr && account.eddsaKey && accInfo.owner === account.accAddr) {\n                            // console.log('cur Eddsakey:', account.eddsaKey)\n                        } else {\n                            // console.log('got a new address:', acc)\n                            // got a new address\n                            dispatch(setAccountInfo(accInfo))\n                            // dispatch(setEddsaKey(''))\n\n                            //updateWalletLayer1();\n                            if (marketArray?.length) {\n                                updateWalletLayer1()\n                            }\n                        }\n\n                        if (account?.connectName !== account?.connectNameTemp) {\n                            dispatch(setConnectName(account.connectNameTemp))\n                        }\n\n                        sendEvent(account, StatusChangeEvent.HasPubkey)\n\n                    } catch (reason) {\n                        dumpError400(reason)\n\n                        if (lv1Acc) {\n                            dispatch(setAccAddr(lv1Acc))\n                        }\n\n                        if (reason.response && reason.response.data && reason.response.data.resultInfo\n                            && reason.response.data.resultInfo.code === 101002) {\n                            sendEvent(account, StatusChangeEvent.ErrorResponse)\n                        }\n                    }\n\n                    break\n\n                case AccountStatus.NOACCOUNT:\n\n                    console.log('NOACCOUNT before wait 15s!')\n\n                    _.delay(() => {\n                        sendEvent(account, StatusChangeEvent.Reconnect)\n                        console.log('NOACCOUNT wait 15s to reconnect again!')\n                    }, 15000)\n                    \n\n                    // const noAccHandler = setInterval(async() => {\n\n                    //     try {\n                    //         const { accInfo } = (await exchangeApi.getAccount({ owner: lv1Acc }))\n                    //         clearInterval(noAccHandler)\n                    //         sendEvent(account, StatusChangeEvent.Lock)\n                    //     } catch (reason) {\n                    //     }\n\n                    // }, 15000)\n\n                    break\n\n                case AccountStatus.DEPOSITING:\n                    // TODO sub contract event, check deposit.\n                    const depositFinished = true // TODO\n                    if (depositFinished) {\n                        //   console.log('depositFinished currStatus:', account.status)\n                        sendEvent(account, StatusChangeEvent.FinishDeposit)\n                    }\n                    break\n\n                case AccountStatus.DEPOSIT_TO_CONFIREM:\n                    // getAccount every 10s to check\n                    break\n\n                case AccountStatus.UNACTIVATED:\n                    const isSmartWallet = false // TODO\n                    if (isSmartWallet) {\n                        // TODO approve hash,\n                        //  console.log('approve hash, currStatus:', account.status)\n                        sendEvent(account, StatusChangeEvent.IsSmartWallet)\n                    } else {\n                        // console.log('approve hash no smartwallet, account.status:', account.status)\n                    }\n                    break\n\n                case AccountStatus.ARPROVING:\n                    // TODO sub contract event, check approving.\n                    const approved = false // TODO\n                    if (approved) {\n                        //  console.log('sub contract event, check approving. approved! status:', account.status)\n                        sendEvent(account, StatusChangeEvent.ApproveSubmit)\n                    }\n                    break\n\n                case AccountStatus.APPROV_TO_CONFIRM:\n                    const approveConfirmed = false // TODO\n                    if (approveConfirmed) {\n                        //   console.log('approveConfirmed status:', account.status)\n                        sendEvent(account, StatusChangeEvent.ApproveConfirmed)\n                    }\n                    break\n\n                case AccountStatus.LOCKED:\n                    //HIGH:\n                    resetLayer1()\n                    break\n\n                case AccountStatus.ACTIVATED:\n                    UserStorage.checkTimeout(true)\n                    const handler = setInterval(() => {\n                        const isTimeOut = UserStorage.checkTimeout()\n                        if (account.status === AccountStatus.ACTIVATED && isTimeOut) {\n                            clearInterval(handler)\n                            sendEvent(account, StatusChangeEvent.Lock)\n                        }\n                    }, 1000)\n                    UserStorage.setHandler(handler)\n                    updateWalletLayer2()\n                    break\n\n                default:\n                    break\n            }\n\n\n\n        }\n\n        checkStatus()\n\n        return () => {\n            cleanUp()\n        }\n\n    }, [updateWalletLayer1, updateWalletLayer2, resetLayer1, resetLayer2,\n        exchangeApi, userApi, store.getState().account.status, prevChainId, chainId, lv1Acc, \n        dispatch, connector, tradingInfo.exchangeInfo?.exchangeAddress,])\n\n}\n\n","export const buildMachine = <S, E>(spec: any) => (currentState: S, event: E) => {\n    // We get all possible transitions for the current State\n    const stateTransitions = spec.states[currentState]\n\n    // No transitions? Error!\n    if (stateTransitions === undefined) {\n        throw new Error(`No transitions defined for ${currentState}`)\n    }\n\n    // We try to transition to the next state\n    const nextState = stateTransitions[event]\n\n    // No next state? Error!\n    if (nextState === undefined) {\n        throw new Error(\n            `Unknown transition for event ${event} in state ${currentState}`\n        )\n    }\n\n   // console.log('got nextState:', nextState)\n\n    // We return the new state\n    return nextState\n}\n","import { Contract } from '@ethersproject/contracts'\nimport { getAddress } from '@ethersproject/address'\nimport { AddressZero } from '@ethersproject/constants'\nimport { BigNumber } from '@ethersproject/bignumber'\n\nimport { JsonRpcSigner, Web3Provider } from '@ethersproject/providers'\n\nimport { UnsupportedChainIdError } from '@web3-react/core'\n\nimport {\n  NoEthereumProviderError,\n  UserRejectedRequestError as UserRejectedRequestErrorInjected\n} from '@web3-react/injected-connector'\nimport { UserRejectedRequestError as UserRejectedRequestErrorWalletConnect } from '@web3-react/walletconnect-connector'\n\nimport { ChainId } from 'loopring-sdk'\n\nexport function getLibrary(provider: any): Web3Provider {\n  const library = new Web3Provider(provider)\n  library.pollingInterval = 10000\n  return library\n}\n\nexport function getErrorMessage(error: Error) {\n  if (error instanceof NoEthereumProviderError) {\n    return 'No Ethereum browser extension detected, install MetaMask on desktop or visit from a dApp browser on mobile.'\n  } else if (error instanceof UnsupportedChainIdError) {\n    return 'You\\'re connected to an unsupported network.'\n  } else if (\n    error instanceof UserRejectedRequestErrorInjected ||\n    error instanceof UserRejectedRequestErrorWalletConnect\n  ) {\n    return 'Please authorize this website to access your Ethereum account.'\n  } else {\n    console.error(error)\n    return 'An unknown error occurred. Check the console for more details.'\n  }\n}\n\nexport function transactionChecker(web3: any, address: string) {\n  const account = address.toLowerCase()\n\n  const subscription = web3.eth.subscribe('pendingTransactions', (err: any, res: any) => {\n    if (err) {\n      console.error(err)\n    }\n  })\n\n  return function watchTransactions() {\n    console.log('Watch Transactions...')\n    subscription.on('data', (txHash: any) => {\n      setTimeout(async () => {\n        try {\n          let tx = await web3.eth.getTransaction(txHash)\n          if (tx.to && tx.to.toLowerCase() === account) {\n            const value = web3.utils.fromWei(tx.value, 'ether')\n            if (value > 0) {\n              console.log('watchTransactions value:', value)\n            }\n          }\n        } catch (err) {\n          console.error(err)\n        }\n      }, 60 * 1000)\n    })\n  }\n}\n\n// returns the checksummed address if the address is valid, otherwise returns false\nexport function isAddress(value: any): string | false {\n  try {\n    return getAddress(value)\n  } catch {\n    return false\n  }\n}\n\nconst ETHERSCAN_PREFIXES: { [key: number]: string } = {\n  1: '',\n  5: 'goerli.',\n}\n\nexport function getEtherscanLink(\n  chainId: ChainId,\n  data: string,\n  type: 'transaction' | 'token' | 'address' | 'block'\n): string {\n  const prefix = `https://${ETHERSCAN_PREFIXES[chainId] || ETHERSCAN_PREFIXES[1]}etherscan.io`\n\n  switch (type) {\n    case 'transaction': {\n      return `${prefix}/tx/${data}`\n    }\n    case 'token': {\n      return `${prefix}/token/${data}`\n    }\n    case 'block': {\n      return `${prefix}/block/${data}`\n    }\n    case 'address':\n    default: {\n      return `${prefix}/address/${data}`\n    }\n  }\n}\n\n// shorten the checksummed version of the input address to have 0x + 4 characters at start and end\nexport function shortenAddress(address: string, chars = 4): string {\n  const parsed = isAddress(address)\n  if (!parsed) {\n    throw Error(`Invalid 'address' parameter '${address}'.`)\n  }\n  return `${parsed.substring(0, chars + 2)}...${parsed.substring(42 - chars)}`\n}\n\n// add 10%\nexport function calculateGasMargin(value: BigNumber): BigNumber {\n  return value.mul(BigNumber.from(10000).add(BigNumber.from(1000))).div(BigNumber.from(10000))\n}\n\n// account is not optional\nexport function getSigner(library: Web3Provider, account: string): JsonRpcSigner {\n  return library.getSigner(account).connectUnchecked()\n}\n\n// account is optional\nexport function getProviderOrSigner(library: Web3Provider, account?: string): Web3Provider | JsonRpcSigner {\n  return account ? getSigner(library, account) : library\n}\n\n// account is optional\nexport function getContract(address: string, ABI: any, library: Web3Provider, account?: string): Contract {\n  if (!isAddress(address) || address === AddressZero) {\n    throw Error(`Invalid 'address' parameter '${address}'.`)\n  }\n\n  return new Contract(address, ABI, getProviderOrSigner(library, account) as any)\n}\n\nexport function escapeRegExp(string: string): string {\n  return string.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&') // $& means the whole matched string\n}\n\nexport async function isContract(web3: any, address: string) {\n  const code = await web3.eth.getCode(address)\n  return code && code.length > 2\n}\n\nexport function getShortAddr(address: string) {\n    if (!address || address === undefined || address === null || address.trim() === '') {\n        console.log('getShortAddr got empty!')\n        return undefined\n    }\n    const convertAddr = address.substr(0, 6) + '...' + address.substr(address.length - 4)\n    return convertAddr\n}\n","export enum Theme {\n    dark = 'dark',\n    light = 'light',\n}\n\nexport enum LangType {\n    en = 'en_US',\n    cn = 'zh_CN',\n}\n\nexport enum SystemStatus {\n    NORMAL,\n    ERROR,\n    UNKNOWN,\n}\n\nexport enum MODAL_TYPE {\n    UNKNOWN,\n    LOADING,\n    WALLET,\n}\n\nexport const REFRESH_RATE = 1000\n\nexport const REFRESH_RATE_SLOW = 15000\n","import { useCallback } from \"react\";\nimport { useDispatch } from \"react-redux\"\n\nimport {\n    setShowDeposit,\n    setShowResetAccount,\n    setShowTransfer,\n    setShowWithdraw,\n} from '@loopring-web/component-lib'\nimport { useTranslation } from \"react-i18next\";\nimport store from 'stores'\nimport { AccountStatus } from \"state_machine/account_machine_spec\";\n\nexport function useModals() {\n\n    const dispatch = useDispatch()\n\n    const { t } = useTranslation('common')\n\n    const ShowDeposit = useCallback((isShow: boolean, defaultProps?: any)=>{\n        const isNoAccount = store.getState().account.status === AccountStatus.NOACCOUNT\n\n        console.log('isNoAccount: ', isNoAccount, t('depositTitleAndActive'))\n        const action = {\n            isShow,\n            props: {\n                title: isNoAccount ? t('depositTitleAndActive') : t('depositTitle'),\n                description: 'depositAndActiveDescription',\n                ...defaultProps\n            },\n        }\n        dispatch(setShowDeposit(action))\n    }, [dispatch, t])\n    const ShowTransfer = useCallback((isShow: boolean, defaultProps?: any) => dispatch(setShowTransfer({isShow, props: {...defaultProps}})), [dispatch])\n    const ShowWithdraw = useCallback((isShow: boolean, defaultProps?: any) => dispatch(setShowWithdraw({isShow, props: {...defaultProps}})), [dispatch])\n    const ShowResetAccount = useCallback((isShow: boolean, defaultProps?: any) => dispatch(setShowResetAccount({isShow, props: {...defaultProps}})), [dispatch])\n\n    return {\n        ShowDeposit,\n        ShowTransfer,\n        ShowWithdraw,\n        ShowResetAccount,\n    }\n}","import React, { useCallback, useState } from 'react'\n\nimport { useTranslation } from 'react-i18next'\n\nimport {\n    ButtonComponentsMap,\n    CoinMap,\n    GatewayItem,\n    gatewayList as DefaultGatewayList,\n    headerMenuData,\n    HeaderMenuTabStatus,\n    headerToolBarData,\n    HeadMenuTabKey,\n    LanguageKeys,\n    LockIcon,\n    ThemeKeys,\n    UnLockIcon,\n    WalletStatus,\n    WithdrawType,\n    WithdrawTypes,\n} from '@loopring-web/common-resources'\n\nimport { useAccount, useConnect, useUnlock, useWeb3Account, } from 'stores/account/hook'\n\nimport { getShortAddr } from 'utils/web3_tools'\n\nimport { AccountStatus } from 'state_machine/account_machine_spec'\n\nimport { useCustomDCEffect } from 'hooks/common/useCustomDCEffect'\n\nimport { Theme, } from 'defs/common_defs'\n\nimport {\n    AmmProps,\n    Button,\n    DepositProps,\n    ResetProps,\n    SwapProps,\n    SwitchData,\n    TradeBtnStatus,\n    TransferProps,\n    useOpenModals,\n    useSettings,\n    WithdrawProps\n} from '@loopring-web/component-lib'\n\nimport store from 'stores'\n\nimport * as sdk from 'loopring-sdk'\nimport {\n    ConnectorNames,\n    dumpError400,\n    GetNextStorageIdRequest,\n    GetOffchainFeeAmtRequest,\n    LoopringMap,\n    OffchainFeeReqType,\n    OffChainWithdrawalRequestV3,\n    OriginTransferRequestV3,\n    toBig,\n    TokenInfo,\n    VALID_UNTIL\n} from 'loopring-sdk'\nimport { Typography } from '@material-ui/core';\nimport { AccountInfoProps, CoinType, } from '@loopring-web/component-lib';\nimport { useEtherscan } from 'hooks/web3/useWeb3'\n\nimport { useModals } from 'hooks/modal/useModals'\nimport Web3 from 'web3'\n\nimport { AmmData, AmmInData, IBData, TradeCalcData, WalletMap } from '@loopring-web/common-resources'\n\nimport { useUserAPI } from 'hooks/exchange/useApi'\nimport { makeWallet } from 'hooks/help'\nimport { useWalletLayer2 } from 'stores/walletLayer2'\nimport { useTokenMap } from 'stores/token'\nimport { LoopringAPI } from 'stores/apis/api'\nimport { BIG10 } from 'defs/swap_defs'\nimport { useWalletLayer1 } from '../../stores/walletLayer1';\n\nexport const useHeader = () => {\n    const {i18n, t} = useTranslation(['common', 'layout'])\n    const {setTheme, themeMode, language, setLanguage} = useSettings();\n    const {ShowDeposit} = useModals()\n    const {modals: {isShowAccountInfo, isShowConnect}, setShowConnect, setShowAccountInfo} = useOpenModals()\n\n    const [openConnect, setOpenConnect] = React.useState(false)\n\n    const forceUpdate = React.useReducer((bool) => !bool, false)[ 1 ]\n    const {account} = useAccount()\n\n    const {lock, unlock} = useUnlock()\n\n    const {connect} = useConnect()\n\n    const {etherscanUrl} = useEtherscan()\n\n    const gatewayList: GatewayItem[] = [\n        {\n            ...DefaultGatewayList[ 0 ],\n            handleSelect: () => {\n                console.log('try to connect to ', ConnectorNames.Injected)\n                connect(ConnectorNames.Injected, true)\n                setShowConnect({isShow: false})\n            }\n        },\n        {\n            ...DefaultGatewayList[ 1 ],\n            handleSelect: () => {\n                connect(ConnectorNames.WalletConnect, true)\n                setShowConnect({isShow: false})\n            }\n        },\n        {\n            ...DefaultGatewayList[ 2 ],\n            handleSelect: () => {\n                connect(ConnectorNames.Ledger, true)\n                setShowConnect({isShow: false})\n            }\n        },\n        {\n            ...DefaultGatewayList[ 3 ],\n            handleSelect: () => {\n                connect(ConnectorNames.Trezor, true)\n                setShowConnect({isShow: false})\n            }\n        },\n    ]\n    // const [showAccountInfo, setShowAccountInfo] = React.useState(account?.accAddr ? true : false)\n    const [accountInfoProps, setAccountInfoProps] = React.useState<undefined | AccountInfoProps>(undefined)\n    //const theme: any = useTheme()\n\n    const onNotification = React.useCallback(async () => {\n        console.log('onNotification click')\n    }, [])\n\n    const onWalletBtnConnect = React.useCallback(async () => {\n        const acc = store.getState().account\n        console.log(`onWalletBtnConnect click: ${acc.status}`)\n\n        switch (acc.status) {\n            case AccountStatus.UNCONNNECTED:\n                setShowConnect({isShow: true})\n                break\n            case AccountStatus.NOACCOUNT:\n            case AccountStatus.CONNECTED:\n            case AccountStatus.LOCKED:\n            case AccountStatus.ACTIVATED:\n                setShowAccountInfo({isShow: true})\n                break\n            default:\n                break\n        }\n    }, [setShowConnect, setShowAccountInfo])\n\n    const onThemeBtnClick = React.useCallback(async (themeMode: ThemeKeys) => {\n        if (themeMode === Theme.dark) {\n            setTheme(Theme.light)\n        } else {\n            setTheme(Theme.dark)\n        }\n    }, [setTheme])\n\n    const onLangBtnClick = (lang: LanguageKeys) => {\n        setLanguage(lang);\n    }\n\n\n    useCustomDCEffect(() => {\n\n\n        headerToolBarData[ ButtonComponentsMap.WalletConnect ] = {\n            ...headerToolBarData[ ButtonComponentsMap.WalletConnect ],\n            handleClick: onWalletBtnConnect,\n        }\n\n        // headerToolBarData[ButtonComponentsMap.Notification] = { ...headerToolBarData[ButtonComponentsMap.Theme], themeMode: theme.mode, handleClick: onNotification }\n        // headerToolBarData.update(ButtonComponentsMap.WalletConnect,value=>{\n        //   return {...value, handleClick:onWalletBtnConnect}});\n        headerToolBarData[ ButtonComponentsMap.Theme ] = {\n            ...headerToolBarData[ ButtonComponentsMap.Theme ],\n            themeMode,\n            handleClick: onThemeBtnClick\n        }\n        // headerToolBarData.update(ButtonComponentsMap.Theme,value=>{\n        //   return {...value, themeMode:theme.mode, handleClick:onThemeBtnClick}});\n\n        headerToolBarData[ ButtonComponentsMap.Language ] = {\n            ...headerToolBarData[ ButtonComponentsMap.Language ],\n            handleChange: onLangBtnClick\n        }\n        // headerToolBarData.update(ButtonComponentsMap.Language,value=>{\n        //  return  {...value, language:i18n.language, handleClick:onThemeBtnClick}});\n    }, [themeMode, language, i18n, onWalletBtnConnect, onThemeBtnClick, onLangBtnClick, onNotification, t]);\n\n    const UnlockBtn = ({onClick}: { onClick: ({...props}: any) => void }) => {\n        return <Button className={'unlock'} startIcon={<LockIcon fontSize={'large'}/>}\n                       onClick={(event) => {\n                           onClick(event)\n                       }} variant={'outlined'}>\n            <Typography variant={'body2'} marginTop={1 / 2}>   {t('labelUnLockLayer2')} </Typography>\n        </Button>\n    }\n\n    const lockCallback = React.useCallback((event) => {\n        lock(account)\n    }, [account,lock])\n    const unLockCallback = React.useCallback((event) => {\n        unlock(account)\n    }, [account,unlock])\n\n    const LockBtn = ({onClick}: { onClick: ({...props}: any) => void }) => {\n        return <Button className={'lock'} startIcon={<UnLockIcon fontSize={'large'}/>}\n                       onClick={(event) => {\n                           onClick(event)\n                       }} variant={'outlined'}>\n            <Typography variant={'body2'} marginTop={1 / 2}>  {t('labelLockLayer2')} </Typography>\n        </Button>\n    }\n\n    useCustomDCEffect(() => {\n\n        if (!account) {\n            console.log('account' + account + '* exit')\n            setAccountInfoProps(undefined)\n            return\n        }\n\n        const {status} = account\n\n        const addr = getShortAddr(account?.accAddr)\n\n        const updateHeaderMenuWhenHasAccountInfo = ({status}: { status: keyof typeof AccountStatus }) => {\n            headerMenuData[ HeadMenuTabKey.Layer2 ] = {\n                ...headerMenuData[ HeadMenuTabKey.Layer2 ],\n                status: HeaderMenuTabStatus.default\n            }\n            let props;\n            if (status === AccountStatus.ACTIVATED) {\n                props = {\n                    addressShort: addr ? addr : '',\n                    address: account?.accAddr,\n                    level: 'VIP 1',\n                    etherscanLink: etherscanUrl + account?.accAddr,\n                    //TODO: changed by account status\n                    mainBtn: <LockBtn onClick={(_event) => {\n                        lockCallback(_event)\n                    }}/>,\n                    connectBy: ''\n                }\n                setShowAccountInfo({isShow: false})\n            } else if (status === AccountStatus.LOCKED) {\n                props = {\n                    addressShort: addr ? addr : '',\n                    address: account?.accAddr,\n                    level: 'VIP 1',\n                    etherscanLink: etherscanUrl + account?.accAddr,\n                    //TODO: changed by account status\n                    mainBtn: <UnlockBtn onClick={(_event) => {\n                        unLockCallback(_event)\n                    }}/>,\n                    connectBy: ''\n                }\n                setShowAccountInfo({isShow: true})\n            } else if (status === AccountStatus.UNACTIVATED\n                || status === AccountStatus.NOACCOUNT\n                || status === AccountStatus.DEPOSITING\n                || status === AccountStatus.DEPOSIT_TO_CONFIREM\n                || status === AccountStatus.ARPROVING\n                || status === AccountStatus.APPROV_TO_CONFIRM\n            ) {\n                props = {\n                    addressShort: addr ? addr : '',\n                    address: account?.accAddr,\n                    //TODO: level\n                    level: 'VIP 1',\n                    etherscanLink: etherscanUrl + account?.accAddr,\n                    //TODO: changed by account status\n                    connectBy: ''\n                }\n                setShowAccountInfo({isShow: false});\n\n            } else {\n                setShowAccountInfo({isShow: false})\n            }\n\n            if (status === AccountStatus.NOACCOUNT) {\n                (props as any).onLock = () => {\n                    setShowAccountInfo({isShow: false})\n                    ShowDeposit(true)\n                }\n            }\n\n            setAccountInfoProps(props)\n        }\n        switch (status) {\n            case AccountStatus.UNCONNNECTED:\n                headerToolBarData[ ButtonComponentsMap.WalletConnect ] = {\n                    ...headerToolBarData[ ButtonComponentsMap.WalletConnect ],\n                    label: t('labelConnectWallet'),\n                    status: WalletStatus.default\n                }\n                headerMenuData[ HeadMenuTabKey.Layer2 ] = {\n                    //TODO:  HeaderMenuTabStatus.hidden\n                    ...headerMenuData[ HeadMenuTabKey.Layer2 ], status: HeaderMenuTabStatus.hidden\n                }\n                setShowAccountInfo({isShow: false})\n                break\n            case AccountStatus.LOCKED:\n                headerToolBarData[ ButtonComponentsMap.WalletConnect ] = {\n                    ...headerToolBarData[ ButtonComponentsMap.WalletConnect ],\n                    label: addr,\n                    status: WalletStatus.connect\n                };\n\n                updateHeaderMenuWhenHasAccountInfo({status});\n                break\n            case AccountStatus.ACTIVATED:\n                headerToolBarData[ ButtonComponentsMap.WalletConnect ] = {\n                    ...headerToolBarData[ ButtonComponentsMap.WalletConnect ],\n                    label: addr,\n                    status: WalletStatus.unlock\n                }\n\n                updateHeaderMenuWhenHasAccountInfo({status});\n                break\n            case AccountStatus.UNACTIVATED:\n            case AccountStatus.NOACCOUNT:\n                headerToolBarData[ ButtonComponentsMap.WalletConnect ] = {\n                    ...headerToolBarData[ ButtonComponentsMap.WalletConnect ],\n                    // TODO got cache address if no show Connect Wallet\n                    label: addr,\n                    status: WalletStatus.noAccount\n                }\n\n                updateHeaderMenuWhenHasAccountInfo({status});\n                break\n            case AccountStatus.DEPOSITING:\n            case AccountStatus.DEPOSIT_TO_CONFIREM:\n            case AccountStatus.ARPROVING:\n            case AccountStatus.APPROV_TO_CONFIRM:\n                headerToolBarData[ ButtonComponentsMap.WalletConnect ] = {\n                    ...headerToolBarData[ ButtonComponentsMap.WalletConnect ],\n                    label: addr,\n                    status: WalletStatus.accountPending\n                }\n                updateHeaderMenuWhenHasAccountInfo({status});\n\n                break\n        }\n        forceUpdate()\n    }, [account, etherscanUrl, setAccountInfoProps])\n\n    return {\n        headerToolBarData,\n        headerMenuData,\n        gatewayList,\n        isShowConnect,\n        isShowAccountInfo,\n        setShowAccountInfo,\n        setShowConnect,\n        // open,\n        // setOpen,\n        // openConnect,\n        // setOpenConnect,\n        account,\n        accountInfoProps,\n\n    }\n\n}\n\nexport function useChargeFeeList(tokenSymbol: string | undefined, requestType: OffchainFeeReqType,\n                                 tokenMap: LoopringMap<TokenInfo> | undefined, amount?: number) {\n\n    const api = useUserAPI()\n\n    const {accountId, apiKey,} = useAccount()\n\n    const [chargeFeeList, setChargeFeeList] = useState<any[]>([])\n\n    useCustomDCEffect(async () => {\n\n        if (!accountId || !tokenSymbol || !tokenMap) {\n            return\n        }\n\n        let chargeFeeList: any[] = []\n\n        try {\n            const tokenInfo = tokenMap[ tokenSymbol ]\n\n            const request: GetOffchainFeeAmtRequest = {\n                accountId,\n                tokenSymbol,\n                requestType,\n                amount: amount ? toBig(amount).times('1e' + tokenInfo.decimals).toFixed(0, 0) : undefined\n            }\n\n            const response = await api.getOffchainFeeAmt(request, apiKey)\n\n            if (response) {\n                response.raw_data.fees.forEach((item: any, index: number) => {\n                    const feeRaw = item.fee\n                    const tokenInfo = tokenMap[ item.token ]\n                    const fee = sdk.toBig(item.fee).div(BIG10.pow(sdk.toBig(tokenInfo.decimals))).toNumber()\n                    chargeFeeList.push({belong: item.token, fee, __raw__: feeRaw})\n                })\n\n                setChargeFeeList(chargeFeeList)\n            }\n            console.log('response:', response)\n\n        } catch (reason) {\n            dumpError400(reason)\n        }\n\n\n        setChargeFeeList(chargeFeeList)\n\n    }, [accountId, apiKey, requestType, tokenSymbol, tokenMap])\n\n    return {\n        chargeFeeList,\n    }\n\n}\n\nexport function useModalProps() {\n\n    const {\n        ShowDeposit,\n        ShowTransfer,\n        ShowWithdraw,\n        ShowResetAccount,\n    } = useModals()\n\n    const {chainId, isConnected, connector,} = useWeb3Account()\n\n    const {account, apiKey, accountId, eddsaKey,} = useAccount()\n\n    const {coinMap, tokenMap, marketArray, marketCoins, marketMap,} = useTokenMap()\n\n    const walletLayer2State = useWalletLayer2();\n    const walletLayer1State = useWalletLayer1();\n    const [walletMap1, setWalletMap1] = useState<WalletMap<any> | undefined>(undefined);\n    const [walletMap2, setWalletMap2] = useState<WalletMap<any> | undefined>(undefined);\n    //HIGH: effect by wallet state update\n    React.useEffect(() => {\n        if (walletLayer2State.walletLayer2) {\n            let {walletMap} = makeWallet();\n            setWalletMap1(walletMap)\n        }\n        if (walletLayer1State.walletLayer1) {\n            // let {walletMap} =  makeWalletLayer1();\n            setWalletMap1(walletLayer1State.walletLayer1)\n        }\n    }, [])\n    React.useEffect(() => {\n        switch (walletLayer2State.status) {\n            case \"ERROR\":\n                walletLayer2State.statusUnset();\n                // setState('ERROR')\n                //TODO: show error at button page show error  some retry dispath again\n                break;\n            case \"DONE\":\n                walletLayer2State.statusUnset();\n                let {walletMap} = makeWallet();\n                setWalletMap2(walletMap)\n                break;\n            default:\n                break;\n\n        }\n    }, [walletLayer2State.status])\n    React.useEffect(() => {\n        switch (walletLayer1State.status) {\n            case \"ERROR\":\n                walletLayer1State.statusUnset();\n                // setState('ERROR')\n                //TODO: show error at button page show error  some retry dispath again\n                break;\n            case \"DONE\":\n                walletLayer1State.statusUnset();\n                setWalletMap1(walletLayer1State.walletLayer1);\n                break;\n            default:\n                break;\n\n        }\n    }, [walletLayer1State.status])\n\n    // deposit\n    const [depositValue, setDepositValue] = useState<IBData<any>>({\n        belong: undefined,\n        tradeValue: 0,\n        balance: 0\n    } as IBData<unknown>)\n\n    const deposit = useCallback(async (token: string, amt: any) => {\n\n        const exchangeInfo = store.getState().system.exchangeInfo\n\n        if (!LoopringAPI.exchangeAPI || !tokenMap || !isConnected || !connector || !exchangeInfo?.exchangeAddress || !exchangeInfo?.depositAddress) {\n            return\n        }\n\n        try {\n            const tokenInfo: TokenInfo = tokenMap[ token ]\n\n            const provider = await connector.getProvider()\n            const web3 = new Web3(provider as any)\n\n            let sendByMetaMask = account.connectName === ConnectorNames.Injected\n            sendByMetaMask = true\n\n            const gasPrice = store.getState().system.gasPrice ?? 30\n            const gasLimit = parseInt(tokenInfo.gasAmounts.deposit)\n\n            const nonce = await sdk.getNonce(web3, account.accAddr)\n\n            const response = await sdk.approveMax(web3, account.accAddr, tokenInfo.address,\n                exchangeInfo?.depositAddress, gasPrice, gasLimit, chainId, nonce, sendByMetaMask)\n\n            const fee = 0\n\n            const response2 = await sdk.deposit(web3, account.accAddr,\n                exchangeInfo?.exchangeAddress, tokenInfo, amt, fee,\n                gasPrice, gasLimit, chainId, nonce + 1, sendByMetaMask)\n\n            console.log('!!!!deposit r:', response2)\n\n        } catch (reason) {\n            dumpError400(reason)\n        }\n\n    }, [chainId, isConnected, connector, account, tokenMap, LoopringAPI.exchangeAPI])\n\n    let depositProps: DepositProps<any, any> = {\n        tradeData: {belong: undefined},\n        coinMap: coinMap as CoinMap<any>,\n        walletMap: walletMap1 as WalletMap<any>,\n        depositBtnStatus: TradeBtnStatus.AVAILABLE,\n        onDepositClick: (tradeData: any) => {\n            if (depositValue && depositValue.belong) {\n                deposit(depositValue.belong.toString(), depositValue.tradeValue)\n            }\n            ShowDeposit(false)\n        },\n        handlePanelEvent: async (data: SwitchData<any>, switchType: 'Tomenu' | 'Tobutton') => {\n            return new Promise((res) => {\n                if (data?.tradeData?.belong) {\n                    if (depositValue !== data.tradeData) {\n                        setDepositValue(data.tradeData)\n                    }\n                    setTokenSymbol(data.tradeData.belong)\n                } else {\n                    setDepositValue({belong: undefined, tradeValue: 0, balance: 0} as IBData<unknown>)\n                }\n                res();\n            })\n        },\n    }\n\n    // transfer\n    const [transferValue, setTransferValue] = useState<IBData<any>>({\n        belong: undefined,\n        tradeValue: 0,\n        balance: 0\n    } as IBData<unknown>)\n\n    const [transferTokenSymbol, setTransferTokenSymbol] = useState<string>('')\n\n    const {chargeFeeList: transferFeeList} = useChargeFeeList(transferTokenSymbol, OffchainFeeReqType.TRANSFER, tokenMap)\n\n    const [feeInfo, setFeeInfo] = useState<any>()\n\n    useCustomDCEffect(() => {\n\n        if (transferFeeList.length > 0) {\n            setFeeInfo(transferFeeList[ 0 ])\n        }\n\n    }, [transferFeeList])\n\n    const transfer = useCallback(async (transferValue: any) => {\n\n        const exchangeInfo = store.getState().system.exchangeInfo\n\n        if (!LoopringAPI.userAPI || !LoopringAPI.exchangeAPI || !exchangeInfo\n            || !connector || !apiKey || !chainId || !accountId || !account?.accAddr) {\n            return\n        }\n\n        if (!tokenMap || !feeInfo) {\n            console.error(feeInfo)\n            return\n        }\n\n        try {\n\n            const sellToken = tokenMap[ transferValue.belong ]\n\n            const feeToken = tokenMap[ feeInfo.belong ]\n\n            const transferVol = toBig(transferValue.tradeValue).times('1e' + sellToken.decimals).toFixed(0, 0)\n\n            const request: GetNextStorageIdRequest = {\n                accountId,\n                sellTokenId: sellToken.tokenId\n            }\n            const storageId = await LoopringAPI.userAPI.getNextStorageId(request, apiKey)\n\n            const provider = await connector.getProvider()\n            const web3 = new Web3(provider as any)\n\n            let walletType = account.connectName\n            walletType = ConnectorNames.Injected\n\n            const request2: OriginTransferRequestV3 = {\n                exchange: exchangeInfo.exchangeAddress,\n                payerAddr: account.accAddr,\n                payerId: accountId,\n                payeeAddr: '0x8cdc4B6C1FA234AE54c53e56376359bFC497f2e6',\n                payeeId: 0,\n                storageId: storageId.offchainId,\n                token: {\n                    tokenId: sellToken.tokenId,\n                    volume: transferVol,\n                },\n                maxFee: {\n                    tokenId: feeToken.tokenId,\n                    volume: feeInfo.__raw__,\n                },\n                validUntil: VALID_UNTIL,\n            }\n\n            const response = await LoopringAPI.userAPI.submitInternalTransfer(request2, web3, chainId, walletType,\n                eddsaKey, apiKey, false)\n\n            console.log('transfer r:', response)\n\n        } catch (reason) {\n            dumpError400(reason)\n        }\n\n    }, [apiKey, accountId, account, connector, chainId, eddsaKey, feeInfo, LoopringAPI.userAPI, LoopringAPI.exchangeAPI])\n\n    let transferProps: TransferProps<any, any> = {\n        tradeData: {belong: undefined},\n        coinMap: coinMap as CoinMap<any>,\n        walletMap: walletMap2 as WalletMap<any>,\n        transferBtnStatus: TradeBtnStatus.AVAILABLE,\n        onTransferClick: (tradeData: any) => {\n            if (transferValue && transferValue.belong) {\n                transfer(transferValue)\n            }\n\n            ShowTransfer(false)\n        },\n        handleFeeChange(value: { belong: any; fee: number | string; __raw__?: any }): void {\n            setFeeInfo(value)\n        },\n        handlePanelEvent: async (data: SwitchData<any>, switchType: 'Tomenu' | 'Tobutton') => {\n            return new Promise((res: any) => {\n                if (data?.tradeData?.belong) {\n                    if (transferValue !== data.tradeData) {\n                        setTransferValue(data.tradeData)\n                    }\n                    setTransferTokenSymbol(data.tradeData.belong)\n                } else {\n                    setTransferValue({belong: undefined, tradeValue: 0, balance: 0} as IBData<unknown>)\n                }\n                // else{\n                //     setTransferValue({ belong: undefined, amt: 0 })\n                // }\n\n                res();\n            })\n        },\n\n        chargeFeeToken: 'ETH',\n        chargeFeeTokenList: transferFeeList,\n        handleOnAddressChange: (value: any) => {\n            console.log('transfer handleOnAddressChange', value);\n        },\n        handleAddressError: (_value: any) => {\n            return {error: false, message: ''}\n        }\n    }\n\n    // withdraw\n    const [withdrawValue, setWithdrawValue] = useState<IBData<any>>({\n        belong: undefined,\n        tradeValue: 0,\n        balance: 0\n    } as IBData<unknown>);\n\n    const [tokenSymbol, setTokenSymbol] = useState<string>('')\n    const [withdrawType, setWithdrawType] = useState<OffchainFeeReqType>(OffchainFeeReqType.OFFCHAIN_WITHDRAWAL)\n    const {chargeFeeList: withdrawalFeeList} = useChargeFeeList(tokenSymbol, withdrawType, tokenMap, withdrawValue.tradeValue)\n\n    const withdrawType2 = withdrawType === OffchainFeeReqType.FAST_OFFCHAIN_WITHDRAWAL ? 'Fast' : 'Standard'\n    const [withdrawFeeInfo, setWithdrawFeeInfo] = useState<any>()\n\n    useCustomDCEffect(() => {\n\n        if (withdrawalFeeList.length > 0) {\n            setWithdrawFeeInfo(withdrawalFeeList[ 0 ])\n        }\n\n    }, [withdrawalFeeList])\n\n    const withdraw = useCallback(async (withdrawValue: any) => {\n\n        const exchangeInfo = store.getState().system.exchangeInfo\n\n        if (!LoopringAPI.userAPI || !account || !account.accountId || !account.accAddr\n            || !connector || !chainId || !apiKey || !exchangeInfo\n            || !exchangeInfo.exchangeAddress || !withdrawFeeInfo\n            || !withdrawValue || !tokenMap) {\n            console.error('withdraw return directly!', account, connector, chainId, apiKey, exchangeInfo)\n            console.error('withdraw return directly!', withdrawValue, withdrawFeeInfo, tokenMap)\n            return\n        }\n\n        const symbol = withdrawValue.belong as string\n\n        const withdrawToken = tokenMap[ symbol ]\n\n        const feeToken = tokenMap[ withdrawFeeInfo.belong ]\n\n        const amt = toBig(withdrawValue.tradeValue).times('1e' + withdrawToken.decimals).toFixed(0, 0)\n\n        try {\n\n            const request: GetNextStorageIdRequest = {\n                accountId: account.accountId,\n                sellTokenId: withdrawToken.tokenId\n            }\n\n            const storageId = await LoopringAPI.userAPI.getNextStorageId(request, apiKey)\n\n            const request2: OffChainWithdrawalRequestV3 = {\n                exchange: exchangeInfo.exchangeAddress,\n                owner: account.accAddr,\n                to: account.accAddr,\n                accountId: account.accountId,\n                storageId: storageId.offchainId,\n                token: {\n                    tokenId: withdrawToken.tokenId,\n                    volume: amt,\n                },\n                maxFee: {\n                    tokenId: feeToken.tokenId,\n                    volume: withdrawFeeInfo.__raw__,\n                },\n                extraData: '',\n                minGas: 0,\n                validUntil: VALID_UNTIL,\n            }\n\n            const provider = await connector.getProvider()\n            const web3 = new Web3(provider as any)\n\n            const response = await LoopringAPI.userAPI.submitOffchainWithdraw(request2, web3, chainId, ConnectorNames.Injected,\n                account.eddsaKey, apiKey, false)\n\n            console.log(response)\n\n        } catch (reason) {\n            dumpError400(reason)\n        }\n\n    }, [apiKey, account, connector, chainId, withdrawFeeInfo, LoopringAPI.userAPI])\n\n    let withdrawProps: WithdrawProps<any, any> = {\n        tradeData: {belong: undefined},\n        coinMap: coinMap as CoinMap<any>,\n        walletMap: walletMap2 as WalletMap<any>,\n        withdrawBtnStatus: TradeBtnStatus.AVAILABLE,\n        onWithdrawClick: (tradeData: any) => {\n            if (withdrawValue && withdrawValue.belong) {\n                withdraw(withdrawValue)\n            }\n            ShowWithdraw(false)\n        },\n\n        handlePanelEvent: async (data: SwitchData<any>, switchType: 'Tomenu' | 'Tobutton') => {\n            return new Promise((res: any) => {\n                if (data?.tradeData?.belong) {\n                    if (withdrawValue !== data.tradeData) {\n                        setWithdrawValue(data.tradeData)\n                    }\n                    setTokenSymbol(data.tradeData.belong)\n                } else {\n                    setWithdrawValue({belong: undefined, tradeValue: 0, balance: 0} as IBData<unknown>);\n                }\n                res();\n            })\n        },\n        withdrawType: withdrawType2,\n        withdrawTypes: WithdrawTypes,\n        chargeFeeToken: 'ETH',\n        chargeFeeTokenList: withdrawalFeeList,\n        handleFeeChange(value: { belong: any; fee: number | string; __raw__?: any }): void {\n            console.log('handleWithdrawFee', value);\n            setWithdrawFeeInfo(value)\n        },\n        handleWithdrawTypeChange: (value: any) => {\n            console.log('handleWithdrawTypeChange', value)\n            const offchainType = value === WithdrawType.Fast ? OffchainFeeReqType.FAST_OFFCHAIN_WITHDRAWAL : OffchainFeeReqType.OFFCHAIN_WITHDRAWAL\n            setWithdrawType(offchainType)\n        },\n        handleOnAddressChange: (value: any) => {\n            console.log('handleOnAddressChange', value);\n        },\n        handleAddressError: (_value: any) => {\n            return {error: false, message: ''}\n        }\n    }\n\n\n    // reset\n    const [resetValue, setResetValue] = useState<IBData<any>>({\n        belong: undefined,\n        tradeValue: 0,\n        balance: 0\n    } as IBData<unknown>)\n\n\n    let resetProps: ResetProps<any, any> = {\n        tradeData: {belong: undefined},\n        coinMap: coinMap as CoinMap<any>,\n        walletMap: walletMap2 as WalletMap<any>,\n        resetBtnStatus: TradeBtnStatus.AVAILABLE,\n        onResetClick: (tradeData: any) => {\n            if (resetValue && resetValue.belong) {\n            }\n\n            ShowResetAccount(false)\n        },\n        handlePanelEvent: async (data: SwitchData<any>, switchType: 'Tomenu' | 'Tobutton') => {\n            return new Promise((res) => {\n                if (data?.tradeData?.belong) {\n                    if (resetValue !== data.tradeData) {\n                        setResetValue(data.tradeData)\n                    }\n                } else {\n                    setResetValue({belong: undefined, tradeValue: 0, balance: 0} as IBData<unknown>)\n                }\n\n                res();\n            })\n        },\n        fee: {count: 234, price: 123}\n    }\n\n    const tradeCalcData: TradeCalcData<CoinType> = {\n        coinSell: 'ETH', //name\n        coinBuy: 'LRC',\n        BtoS: 0,\n        StoB: 0,\n        sellCoinInfoMap: coinMap,\n        buyCoinInfoMap: coinMap,\n        walletMap: {},\n        slippage: 0.5,\n        // slippageTolerance: [0.1, 0.5, 1, 'slippage:N'],\n        priceImpact: '12',\n        minimumReceived: '1%',\n        fee: '1%'\n    }\n    const ammCalcData: AmmInData<{ [ key: string ]: any }> = {\n        myCoinA: {belong: 'ETH', balance: 0, tradeValue: 0},\n        myCoinB: {belong: 'LRC', balance: 0, tradeValue: 0},\n        lpCoinA: {belong: 'ETH', balance: 0, tradeValue: 0},\n        lpCoinB: {belong: 'LRC', balance: 0, tradeValue: 0},\n        lpCoin: {belong: 'LP-ETH-LRC', balance: 0, tradeValue: 0},\n        AtoB: 50,\n        coinInfoMap: coinMap as any,\n        slippage: 0.5,\n        // slippageTolerance: [0.1, 0.5, 1, 'slippage:N'],\n        fee: '1%'\n    }\n\n\n    let swapProps: SwapProps<IBData<string>, string, any> = {\n        tradeData: undefined,\n        tradeCalcData,\n        onSwapClick: (tradeData) => {\n            console.log('Swap button click', tradeData);\n        },\n        handleSwapPanelEvent: async (data: any, switchType: any) => {\n            console.log(data, switchType)\n        },\n    };\n    let ammProps: AmmProps<AmmData<IBData<any>>, any, AmmInData<any>> = {\n        ammDepositData: {\n            coinA: {belong: 'ETH', balance: 0.3, tradeValue: 0},\n            coinB: {belong: 'LRC', balance: 1000, tradeValue: 0},\n            slippage: '',\n        },\n        ammWithdrawData: {\n            coinA: {belong: 'ETH', balance: 0.3, tradeValue: 0},\n            coinB: {belong: 'LRC', balance: 1000, tradeValue: 0},\n            slippage: '',\n        },\n        // tradeCalcData,\n        ammCalcData: ammCalcData,\n        handleAmmAddChangeEvent: (data, type) => {\n            console.log('handleAmmAddChangeEvent', data, type);\n        },\n        handleAmmRemoveChangeEvent: (data, type) => {\n            console.log('handleAmmRemoveChangeEvent', data, type);\n        },\n        onAmmRemoveClick: (data) => {\n            console.log('onAmmRemoveClick', data);\n        },\n        onAmmAddClick: (data) => {\n            console.log('onAmmAddClick', data);\n        }\n    }\n\n    return {\n        depositProps, withdrawProps, transferProps, resetProps, ammProps, swapProps,\n    }\n}\n","import { REFRESH_RATE } from \"defs/common_defs\"\n\nexport function PromiseJob(fetchPromise: any, setFunc: any, field?: string, prefix: any = 'PromiseJob') {\n\n    let mounted = true\n\n    const handler = () => {\n        if (fetchPromise()) {\n            fetchPromise().then((data: any) => {\n                if (mounted) {\n                    setFunc(field ? data[field] : data)\n                } else {\n                    console.log(prefix + ' unmounted!')\n                }\n            }).catch((reason: any) => {\n                console.error(reason)\n            })\n        }\n    }\n\n    const cleanUp = () => {\n        mounted = false\n    }\n\n    return {\n        handler,\n        cleanUp,\n    }\n\n}\n\n\nexport function PromiseJobInTimer(fetchPromise: any, setFunc: any, field?: string, prefix: any = 'PromiseJobInTimer', timeout: number = REFRESH_RATE) {\n\n    let mounted = true\n\n    const handler = () => {\n\n        mounted = true\n\n        const fetchFunc = () => {\n            if (fetchPromise()) {\n                fetchPromise().then((data: any) => {\n                    if (mounted) {\n                        setFunc(field ? data[field] : data)\n                    } else {\n                        console.log(prefix + ' unmounted!')\n                    }\n                }).catch((reason: any) => {\n                    console.error(reason)\n                })\n            }\n        }\n\n        fetchFunc()\n\n        const id = setInterval(fetchFunc, timeout)\n\n        return id\n    }\n\n    const cleanUp = (handler: any) => {\n        mounted = false\n        if (handler) clearInterval(handler)\n    }\n\n    return {\n        handler,\n        cleanUp,\n    }\n\n}\n","import { useEffect } from 'react'\nimport { PromiseJob, PromiseJobInTimer } from '../../utils/hook_tools'\nimport { REFRESH_RATE_SLOW } from \"defs/common_defs\"\n\nexport function usePromiseJob(fetchPromise: any, setFunc: any, field? :string, prefix: any = undefined, dependencies: any[] = []) {\n\n  const {\n    handler,\n    cleanUp,\n  } = PromiseJob(fetchPromise, setFunc, field, prefix)\n\n  useEffect(() => {\n    handler()\n    return () => cleanUp()\n  }, dependencies)\n\n}\n\nexport function usePromiseJobInTimer(fetchPromise: any, setFunc: any, field? :string, \n  prefix: any = undefined, dependencies: any[] = [], timeout: number= REFRESH_RATE_SLOW) {\n  const {\n    handler,\n    cleanUp,\n  } = PromiseJobInTimer(fetchPromise, setFunc, field, prefix, timeout)\n\n  useEffect(() => {\n\n    const id = handler()\n    return () => cleanUp(id)\n  }, dependencies)\n\n}\n","import { WithTranslation, withTranslation } from 'react-i18next';\nimport { Box, Modal } from '@material-ui/core';\nimport { ModalCloseButton, ModalContentStyled, ModalQRCode } from '@loopring-web/component-lib';\nimport React from 'react';\nimport { AccountInfo, AccountInfoProps } from '@loopring-web/component-lib';\n\nexport const ModalAccountInfo = withTranslation('common')(({\n                                                               onClose,\n                                                               open,\n                                                               t,\n                                                               ...rest\n                                                           }: { open:boolean, onClose:(e:any)=>void} & AccountInfoProps & WithTranslation) => {\n\n\n    return <Modal\n        open={open}\n        onClose={onClose}\n        aria-labelledby=\"Account information\"\n        aria-describedby=\"show layer2 address, unlock/locked loopring wallet, copy address\"\n    >\n        <ModalContentStyled style={{boxShadow: '24'}}>\n            <Box paddingTop={3} paddingBottom={3} display={'flex'} flexDirection={'column'} minWidth='var(--modal-width)'>\n                <ModalCloseButton onClose={onClose} {...{...rest, t}} />\n                <AccountInfo {...rest}/>\n            </Box>\n\n        </ModalContentStyled>\n    </Modal>\n})","import React, { useCallback, useState, } from 'react'\n\nimport {\n    Header as HeaderUI,\n    HideOnScroll,\n    ModalWalletConnect,\n    AccountInfo,\n    ModalCloseButton,\n} from '@loopring-web/component-lib'\n\nimport { headerRoot } from '@loopring-web/common-resources'\n\nimport { useLocation } from 'react-router-dom'\n\nimport { Toolbar, Snackbar, Alert, } from '@material-ui/core'\n\nimport { useHeader } from './hook'\n\nimport { useDisconnect, } from 'stores/account/hook'\nimport { ModalPanel, ModalQRCode, } from '@loopring-web/component-lib';\nimport { useGetExchangeInfo } from 'hooks/exchange/useExchangeAPI'\nimport { useModalProps } from './hook'\n\nimport { copyToClipBoard } from 'utils/obj_tools'\nimport { ModalAccountInfo } from '../../pages/AccountPage';\nimport { useTranslation } from 'react-i18next';\n\nconst Header = ({ ...rest }: any) => {\n\n    const {\n        depositProps,\n        withdrawProps,\n        transferProps,\n        resetProps,\n        ammProps,\n        swapProps,\n    } = useModalProps()\n\n    const location = useLocation()\n\n    const {\n        headerToolBarData,\n        headerMenuData,\n        gatewayList,\n        isShowConnect,\n        isShowAccountInfo,\n        setShowAccountInfo,\n        // setShowAccountInfo,\n        setShowConnect,\n        // open,\n        // setOpen,\n        // openConnect,\n        // setOpenConnect,\n        account,\n        accountInfoProps,\n        // showAccountInfo\n    } = useHeader()\n\n    const { exchangeInfo } = useGetExchangeInfo()\n\n    const { disconnect } = useDisconnect()\n\n    const onSwitch = useCallback(() => {\n        setShowAccountInfo({isShow:false})\n        setShowConnect({isShow:true})\n    }, [setShowConnect,setShowAccountInfo])\n\n    const [openQRCode, setOpenQRCode] = useState(false)\n\n    const [copyToastOpen, setCopyToastOpen] = useState(false);\n    const {t} = useTranslation('commom')\n\n    const closeCopyToast = () => { setCopyToastOpen(false) }\n\n    return (<>\n        <Snackbar open={copyToastOpen} autoHideDuration={2500} onClose={closeCopyToast}>\n            <Alert onClose={closeCopyToast} severity=\"success\">\n                {t('Address Copied to Clipboard!')}\n        </Alert>\n        </Snackbar>\n\n        <ModalQRCode open={openQRCode} onClose={() => setOpenQRCode(false)} title={'ETH Address'}\n            description={account.accAddr} url={account.accAddr} />\n\n        <ModalPanel transferProps={transferProps} withDrawProps={withdrawProps} \n        depositProps={depositProps} resetProps={resetProps} ammProps={ammProps} swapProps={swapProps}/>\n\n        <HideOnScroll>\n            {process.env.NODE_ENV !== 'production' && JSON.stringify(account?.status)}\n            {process.env.NODE_ENV !== 'production' && ' exchangeAddress:' + JSON.stringify(exchangeInfo?.exchangeAddress)}\n\n            <HeaderUI {...rest} headerMenuData={headerMenuData} headerToolBarData={headerToolBarData}\n                selected={location.pathname === '/' ? headerRoot : location.pathname}></HeaderUI>\n\n        </HideOnScroll>\n        <Toolbar />\n\n        <ModalWalletConnect {...{ ...rest, gatewayList, open:isShowConnect.isShow, onClose: () => setShowConnect({isShow:false}) }} />\n        {<ModalAccountInfo\n            open={isShowAccountInfo.isShow}\n            onClose={() => {setShowAccountInfo({isShow:false})}}\n            onCopy={() => {\n                copyToClipBoard(account.accAddr);\n                setCopyToastOpen(true)\n            }}\n            onViewQRCode={() => {\n                setOpenQRCode(true)\n            }}\n            onDisconnect={() => {\n                disconnect();\n                setShowAccountInfo({isShow:false});\n            }}\n            onSwitch={onSwitch}\n            {...{...accountInfoProps, ...rest}}></ModalAccountInfo>}\n    </>)\n}\n\n\nexport default Header\n\n\n\n","import { useState, } from 'react'\n\nimport { TradesData, TickerData, DepthData, \n  TokensResponse,\n  MarketsResponse, } from 'loopring-sdk'\n\nimport { usePromiseJob } from 'hooks/common/useCommon'\nimport { useExchangeAPI, } from './useApi'\n\nexport function useGetGas() {\n\n  const [gas, setGas] = useState<any>()\n\n  const api = useExchangeAPI()\n\n  const fetchData = () => {\n    if (!api) {\n      return undefined\n    }\n    return api.getGasPrice()\n  }\n\n  usePromiseJob(fetchData, setGas, undefined, 'useGetGas', [api])\n\n  return { gas }\n\n}\n\nexport function useGetMixMarkets() {\n\n  const [markets, setMarkets] = useState<MarketsResponse>()\n    const api = useExchangeAPI()\n\n    const fetchData = () => {\n      if (!api) {\n        return undefined\n      }\n      return api.getMixMarkets()\n    }\n  \n    usePromiseJob(fetchData, setMarkets, undefined, 'useGetMarkets', [api])\n    \n    return { markets }\n\n}\n\nexport function useGetMarkets() {\n\n  const [markets, setMarkets] = useState<MarketsResponse>()\n    const api = useExchangeAPI()\n\n    const fetchData = () => {\n      if (!api) {\n        return undefined\n      }\n      return api.getMarkets()\n    }\n  \n    usePromiseJob(fetchData, setMarkets, undefined, 'useGetMarkets', [api])\n    \n    return { markets }\n\n}\n\nexport function useGetExchangeInfo() {\n\n  const [exchangeInfo, setExchangeInfo] = useState<any>()\n    const api = useExchangeAPI()\n\n    const fetchData = () => {\n      if (!api) {\n        return undefined\n      }\n      return api.getExchangeInfo()\n    }\n  \n    usePromiseJob(fetchData, setExchangeInfo, 'exchangeInfo', 'useGetExchangeInfo', [api])\n    \n    return { exchangeInfo }\n\n}\n\nexport function useGetTokens() {\n\n  const [tokens, setTokens] = useState<TokensResponse>()\n    const api = useExchangeAPI()\n\n    const fetchData = () => {\n      if (!api) {\n        return undefined\n      }\n      return api.getTokens()\n    }\n  \n    usePromiseJob(fetchData, setTokens, undefined, 'useGetTokens', [api])\n    \n    return { tokens }\n\n}\n\n\nexport function useTrades(symbol: string) {\n\n  const [trades, setTrades] = useState<TradesData>()\n\n  const api = useExchangeAPI()\n\n  const fetchData = () => {\n    if (!api) {\n      return undefined\n    }\n    return api.getMarketTrades({\n      market: symbol\n    })\n  }\n\n  usePromiseJob(fetchData, setTrades, undefined, 'useTrades', [api, symbol])\n\n  return { trades, }\n\n}\n\nexport function useTickerMap(market: string) {\n\n  const [tickerMap, setTickerMap] = useState<{[key: string]: TickerData}>()\n\n  const api = useExchangeAPI()\n\n  const fetchData = () => {\n    if (!api) {\n      return undefined\n    }\n    return api.getTicker({\n      market\n    })\n  }\n\n  usePromiseJob(fetchData, setTickerMap, 'tickMap', 'useTickerMap', [api, market])\n\n  return { tickerMap, }\n\n}\n\nexport function useDepth(symbol: string) {\n\n  const api = useExchangeAPI()\n\n  const [depth, setDepth] = useState<DepthData>()\n\n    const fetchData = () => {\n      if (!api) {\n        return undefined\n      }\n      return api.getMixDepth({\n        market: symbol\n      })\n    }\n  \n    usePromiseJob(fetchData, setDepth, 'depth', 'useDepth', [api, symbol])\n\n  return { depth, }\n\n}\n","import React from \"react\"\nimport store from '../../stores';\nimport { TickerMap, useTicker } from '../../stores/ticker';\nimport { MarketBlockProps, QuoteTableRawDataItem, } from '@loopring-web/component-lib';\nimport { deepClone } from '../../utils/obj_tools';\nimport { useSocket } from '../../stores/socket';\nimport { TradingInterval, WsTopicType } from 'loopring-sdk';\nimport { LoopringAPI } from 'stores/apis/api'\nimport { tickerService } from '../../services/tickerService';\nimport { debounce } from \"lodash\"\nimport { globalSetup } from '@loopring-web/common-resources';\n\nconst amtCol = 5\nconst OnePageSize = 16;\nconst rowHeight = 44;\n\n// 0\nfunction isNeedCallMore(currentStartIndex: number, to: number, marketArrayLength: number, currentListLength: number, pageSize: number = OnePageSize): boolean {\n    const pageCurrent = currentStartIndex / OnePageSize\n    if (to - pageCurrent > 1) {\n        return false\n    } else if (pageSize * to < marketArrayLength && currentListLength - 4 < pageSize * (to + 1)) {\n        return true\n    } else {\n        return false\n    }\n}\n\nexport function useQuote<C extends { [ key: string ]: string }>() {\n\n\n    const {\n        tickerMap,\n        status: tickerStatus,\n        // errorMessage: errorTickerMap,\n        statusUnset: tickerStatusUnset,\n        updateTickers,\n    } = useTicker();\n    const {sendSocketTopic, socketEnd} = useSocket();\n    const {marketArray, coinMap} = store.getState().tokenMap;\n    const recommendMarkets: string[] = marketArray ? marketArray.slice(0, 4) : ['LRC-ETH', 'LRC-ETH', 'LRC-ETH', 'LRC-ETH']\n    const _marketArrayWithOutRecommend = marketArray ? marketArray.filter(item => recommendMarkets.findIndex(m => m === item) === -1) : [];\n    const [tickList, setTickList] = React.useState<any>([]);\n    const [recommendations, setRecommendations] = React.useState<MarketBlockProps<C>[]>([]);\n    const [, setTickerKeys] = React.useState<string[]>([]);\n    const [focusRowFrom, setFocusRowFrom] = React.useState<[start: number, end: number]>([0, 2]);\n    const [startIndex, setStartIndex] = React.useState<number>(-1);\n\n    const subject = React.useMemo(() => tickerService.onSocket(), []);\n\n    const updateRecommendation = React.useCallback((recommendationIndex, ticker) => {\n        if (recommendations.length) {\n          //  let _recommendations = deepClone(recommendations)\n            recommendations[ recommendationIndex ].tradeFloat = ticker\n            setRecommendations(recommendations)\n        }\n    }, [recommendations]);\n    React.useEffect(() => {\n        const subscription = subject.subscribe(({tickerMap}) => {\n            if (tickerMap) {\n                Reflect.ownKeys(tickerMap).forEach((key) => {\n                    let recommendationIndex = recommendMarkets.findIndex(ele => ele === key)\n                    if (recommendationIndex !== -1) {\n                        // setRecommendations\n                        updateRecommendation(recommendationIndex, tickerMap[ key as string ])\n                    }\n                    //TODO update related row. use socket return\n                })\n            }\n        });\n        return () => subscription.unsubscribe();\n    }, [subject,recommendations]);\n\n\n    //TODO if socket is error throw use recall will pending on it\n    // React.useEffect(() => {\n    //     switch (socketStatus) {\n    //         case \"ERROR\":\n    //             console.log(\"ERROR\", 'open websocket error get moment value from api ');\n    //             socketStatusUnset();\n    //             updateTickers(tickerKeys);\n    //             break;\n    //         default:\n    //             break;\n    //     }\n    // }, [socketStatus, socketStatusUnset]);\n    React.useEffect(() => {\n        const [from, to] = focusRowFrom\n        getTicker(from, to);\n        socketSendTicker(from*OnePageSize);\n        return () => {\n            socketEnd()\n        }\n    }, []);\n    React.useEffect(() => {\n        switch (tickerStatus) {\n            case \"ERROR\":\n                console.log(\"ERROR\", 'get ticker error,ui');\n                tickerStatusUnset()\n                break;\n            case \"PENDING\":\n                break;\n            case \"DONE\":\n                tickerStatusUnset();\n                updateRawData(tickerMap as TickerMap<C>)\n                break;\n            default:\n                break;\n        }\n    }, [tickerStatus, tickerStatusUnset]);\n    const getTicker = React.useCallback((from: number, to: number) => {\n        if (_marketArrayWithOutRecommend) {\n            let array = _marketArrayWithOutRecommend.slice(from * OnePageSize, to * OnePageSize);\n            //High: add recommendations market first time is 36个数据\n            if (from === 0) {\n                array = recommendMarkets.concat(array)\n            }\n            updateTickers(array);\n        }\n\n\n    }, [marketArray, OnePageSize, recommendMarkets])\n\n    const updateRawData = React.useCallback((tickerMap: TickerMap<C>) => {\n        let _recommendationsFloat: QuoteTableRawDataItem[] = [];\n        const _tickList = Reflect.ownKeys(tickerMap).reduce((prev, key) => {\n            // @ts-ignore\n            const [, coinA, coinB] = key.match(/(\\w+)-(\\w+)/i);\n            let _item = {\n                ...tickerMap[ key as string ],\n                pair: {\n                    coinA,\n                    coinB,\n                },\n            } as QuoteTableRawDataItem;\n\n            if (recommendMarkets.findIndex(m => m === key) !== -1) {\n                _recommendationsFloat.push(deepClone(_item))\n            }\n            prev.push(_item);\n            return prev\n        }, [] as QuoteTableRawDataItem[])\n        setTickList([...tickList, ..._tickList])\n        //setTickList\n        if (focusRowFrom[ 0 ] === 0 && _recommendationsFloat.length > 0) {\n            //FIX: fix in uat env not enough pair_recommendations\n            while (_recommendationsFloat.length < 4) {\n                _recommendationsFloat.push(deepClone(_recommendationsFloat[ 0 ]));\n            }\n\n            const _recommendations = _recommendationsFloat.reduce((prev, item) => {\n                if (coinMap) {\n                    const {coinA, coinB} = item.pair;\n                    const _item: MarketBlockProps<C> = {\n                        tradeFloat: item as any,\n                        // @ts-ignore\n                        coinAInfo: coinMap[ coinA ],\n                        // @ts-ignore\n                        coinBInfo: coinMap[ coinB ]\n                    } as MarketBlockProps<C>\n                    prev.push(_item)\n                }\n                return prev\n            }, [] as MarketBlockProps<C>[])\n\n            setRecommendations(_recommendations)\n        }\n    }, [tickList, focusRowFrom])\n\n\n    // const  = (startIndex: number) => {\n    //     console.log(startIndex)\n    // }\n    const debounceGetTicker = React.useCallback(debounce((from, to) => {\n        getTicker(from, to)\n    }, globalSetup.wait), [])\n    const socketSendTicker = React.useCallback(debounce((_startIndex: number, pageSize = OnePageSize) => {\n        if(_startIndex !== startIndex)  {\n            let marketArray: string[] = _marketArrayWithOutRecommend.slice(_startIndex, _startIndex + pageSize);\n            marketArray = [...recommendMarkets, ...marketArray];\n            setTickerKeys(marketArray);\n            //High:\n            sendSocketTopic({[ WsTopicType.ticker ]: marketArray});\n        }\n    }, globalSetup.wait * 2), [startIndex])\n    const onVisibleRowsChange = React.useCallback(async (startIndex: number) => {\n        //TODO isBottom and is On prev tickerCall\n        // if (!isAtBottom(startIndex,focusRowFrom[1],_marketArrayWithOutRecommend.length,OnePageSize)\n        //     && tickerStatus !== 'PENDING'){\n        // }\n        //TODO load more\n        const [, to] = focusRowFrom\n        if (isNeedCallMore(startIndex, to, _marketArrayWithOutRecommend.length, tickList.length, OnePageSize)) {\n            console.log('getNextPage.......')\n            setFocusRowFrom([to, to + 1]);\n            debounceGetTicker(to, to + 1);\n        }\n        setStartIndex(startIndex);\n        socketSendTicker(startIndex, OnePageSize)\n    }, [focusRowFrom, OnePageSize, tickerStatus, marketArray, tickList])\n\n    return {\n        tickList,\n        recommendations,\n        // handleScroll,\n        onVisibleRowsChange\n    }\n\n}\n\nexport type CandlestickItem = {\n    close: number;\n    timeStamp: number;\n}\n\nexport const useCandlestickList = (market: string) => {\n    const [candlestickList, setCandlestickList] = React.useState<CandlestickItem[]>([])\n    const getCandlestick = React.useCallback(async (market: string) => {\n        if (LoopringAPI.exchangeAPI) {\n            const res = await LoopringAPI.exchangeAPI.getMixCandlestick({\n                market: market,\n                interval: TradingInterval.d1,\n                // start?: number;\n                // end?: number;\n                limit: 7\n            })\n            if (res && res.candlesticks && !!res.candlesticks.length) {\n                const data = res.candlesticks.map(o => ({\n                    close: o.close,\n                    timeStamp: o.timestamp\n                }))\n                setCandlestickList(data)\n            }\n            setCandlestickList([])\n        }\n        setCandlestickList([])\n    }, [])\n\n    React.useEffect(() => {\n        getCandlestick(market)\n    }, [getCandlestick, market])\n\n    return candlestickList\n}\n","import styled from '@emotion/styled';\nimport { Box, Grid, Paper } from '@material-ui/core';\nimport { TablePaddingX } from '@loopring-web/component-lib';\n\nexport const StylePaper = styled(Box)`\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  //height: 100%;\n  flex: 1;\n  background-color: ${({ theme }) => theme.colorBase.background().default};\n  border-radius: ${({ theme }) => theme.unit}px;\n  // padding: ${({ theme }) => 3 * theme.unit}px  0;\n  margin-bottom: ${({ theme }) => 2* theme.unit}px;\n  .title {\n    font-family: Gilroy-Medium;\n    font-size: ${({ theme }) => theme.unit * 3}px;\n    line-height: 19px;\n    margin-left: ${({ theme }) => 3 * theme.unit}px;\n    margin-top: ${({ theme }) => 3 * theme.unit}px;\n    // margin-bottom: ${({ theme }) => 2 * theme.unit}px;\n  }\n\n  .tableWrapper {\n    display: flex;\n    margin-top: ${({ theme }) => 3 * theme.unit}px;\n    flex: 1;\n    .rdg {\n      flex: 1;\n    }\n  }\n` as typeof Paper;\n\n\nexport const  TableWrapStyled = styled(Grid)`\n  &{\n    background-color: ${({theme}) => theme.colorBase.background().default};\n    border-radius: ${({ theme }) => theme.unit}px;\n    .rdg{\n      .rdg-header-row {\n        border-radius: ${({theme}) => theme.unit}px ${({theme}) => theme.unit}px 0 0;\n      }\n    }\n  }\n  ${({theme}) => TablePaddingX({pLeft:theme.unit * 3,pRight:theme.unit * 3})}\n` as typeof Grid\n\n//    ${({theme}) => theme.border.defaultFrame({c_key: 'blur', d_R: 1})};\n","import React from 'react'\nimport styled from '@emotion/styled/macro'\n\nimport { MarketBlock, QuoteTable, TablePaddingX } from '@loopring-web/component-lib'\n\nimport { WithTranslation, withTranslation } from 'react-i18next'\n// import { FloatTag } from '@loopring-web/common-resources'\nimport { Box, Grid } from '@material-ui/core'\nimport { useQuote, useCandlestickList } from './hook'\nimport { LoopringAPI } from 'stores/apis/api'\nimport { TradingInterval } from 'loopring-sdk/dist'\nimport { TableWrapStyled } from 'pages/styled'\n\nconst  RowStyled = styled(Grid)`\n      & .MuiGrid-root:not(:last-of-type) > div{\n        margin-right: ${({theme}) => theme.unit * 3}px;\n      }\n` as typeof Grid\n\n\nexport type CandlestickItem = {\n  market: string;\n  data: {\n    close: number;\n    timeStamp: number;\n  }[]\n}\n\nconst QuotePage = withTranslation('common')((rest: WithTranslation) => {\n    const [candlestickList, setCandlestickList] = React.useState<CandlestickItem[]>([])\n    const getCandlestick = React.useCallback(async (market: string) => {\n      if (LoopringAPI.exchangeAPI) {\n        const res = await LoopringAPI.exchangeAPI.getMixCandlestick({\n          market: market,\n          interval: TradingInterval.d1,\n          // start?: number;\n          // end?: number;\n          limit: 30\n        })\n        if (res && res.candlesticks && !!res.candlesticks.length) {\n          const data = res.candlesticks.map(o => ({\n            close: o.close,\n            timeStamp: o.timestamp\n          }))\n          setCandlestickList(prev => [...prev, {\n            market: market,\n            data: data\n          }])\n        }\n      }\n    }, [])\n\n    const { recommendations, tickList, onVisibleRowsChange } = useQuote()\n    React.useEffect(() => {\n      const list = recommendations.map(item => {\n        const market = `${item.coinAInfo.simpleName}-${item.coinBInfo.simpleName}`\n        return market\n      })\n      if (!!list.length) {\n        getCandlestick(list[0])\n        getCandlestick(list[1])\n        getCandlestick(list[2])\n        getCandlestick(list[3])\n      }\n    }, [recommendations, getCandlestick])\n\n\n\n    return <Box display={'flex'} flexDirection={'column'} flex={1} >\n\n        <RowStyled container >\n\n            {/* {recommendations.map((item,index)=> <Grid key={item.coinAInfo+item.coinBInfo+index} item xs={3} >\n                    <MarketBlock {...{...item, ...rest}}></MarketBlock>\n                </Grid>\n            )} */}\n            {recommendations.map((item,index)=> {\n              const market = `${item.coinAInfo.simpleName}-${item.coinBInfo.simpleName}`\n              const chartData = candlestickList.find(o => o.market === market)?.data\n              return (\n                <Grid key={index} item xs={3} >\n                    <MarketBlock {...{...item, chartData: chartData ? chartData : [], ...rest}}></MarketBlock>\n                </Grid>\n              )\n            } \n            )}\n\n\n\n        </RowStyled>\n        <TableWrapStyled container marginY={3}  paddingBottom={2} flex={1}>\n            <Grid item xs={12} display={'flex'}>\n                <QuoteTable onVisibleRowsChange={onVisibleRowsChange}  rawData={tickList} {...{ ...rest }} />\n            </Grid>\n        </TableWrapStyled>\n    </Box>\n\n\n})\n\nexport default QuotePage\n","import { useCallback, useState } from 'react'\n\nimport { useExchangeAPI } from 'hooks/exchange/useApi'\nimport { useCustomDCEffect } from 'hooks/common/useCustomDCEffect'\n\nimport { TradingInterval, Candlestick, GetCandlestickRequest, GetDepthRequest, GetTickerRequest, dumpError400, getExistedMarket } from 'loopring-sdk'\nimport { fromWEI } from 'utils/swap_calc_utils'\n\nimport { ChartUnit, CoinInfo } from '@loopring-web/common-resources'\n\nimport { ChartType } from '@loopring-web/component-lib'\n\nimport { TGItemData, TGItemJSXInterface, } from '@loopring-web/component-lib'\n\nimport { IGetDepthDataParams } from '@loopring-web/component-lib'\n\nconst toggleData: TGItemData[] = [\n  {\n    value: ChartType.Trend,\n    key: ChartType.Trend,\n    label: 'label' + ChartType.Trend\n  },\n  {\n    value: ChartType.Depth,\n    key: ChartType.Depth,\n    label: 'label' + ChartType.Depth\n  },\n]\n\nexport function useBasicInfo(props: any, coinAInfo: any, coinBInfo: any, marketArray: any[], t: any) {\n  const tgItemJSXs: TGItemJSXInterface[] = toggleData.map(({ value, label, key }) => {\n    return { value, tlabel: t(label), key, JSX: <>{t(label)}</> }\n  })\n\n  // const { base, quote, market, tokens } = props\n\n  const { market, amm } = getExistedMarket(marketArray, coinAInfo?.name, coinBInfo?.name)\n\n  const [chartType, setChartType] = useState<ChartType>(ChartType.Trend)\n\n  // console.log('---useBasicInfo market:', market, ' amm:', amm, ' chartType:', chartType)\n  //\n  // const [change, setChange] = useState(0)\n  //\n  // const [volume, setVolume] = useState('')\n\n  const [chartUnit, setChartUnit] = useState(ChartUnit.D1)\n\n  const [originData, setOriginData] = useState<any>(undefined)\n\n  const handleChange = useCallback((_e: React.MouseEvent, value: any) => {\n    // Settings.setChartType(value)\n    // console.log('useBasicInfo handleChange:', value)\n    setOriginData(undefined)\n    setChartType(value)\n  }, [setOriginData, setChartType])\n\n  const handleChartUnitChange = (event: React.MouseEvent<HTMLElement, MouseEvent>, newValue: string) => {\n      const mappedValue = newValue === '1H' ? ChartUnit.H1 : newValue === '1W' ? ChartUnit.W1 : ChartUnit.D1\n      setChartUnit(mappedValue)\n  }\n\n  const exchangeApi = useExchangeAPI()\n\n  // useCustomDCEffect(async () => {\n  //\n  //   if (!exchangeApi || !market || !tokens || !quote) {\n  //     return\n  //   }\n  //\n  //   let mounted = true\n  //\n  //   try {\n  //\n  //     const request: GetTickerRequest = {\n  //       market: market.market,\n  //     }\n  //\n  //     const ticker = await exchangeApi.getTicker(request)\n  //     if (mounted) {\n  //\n  //       if (ticker.tickList[0].change) {\n  //         setChange(ticker.tickList[0].change)\n  //       }\n  //\n  //       if (ticker.tickList[0].base_token_volume) {\n  //         const baseVol = fromWEI(tokens.tokenSymbolMap, base, ticker.tickList[0].base_token_volume) as string\n  //         setVolume(baseVol)\n  //       }\n  //     }\n  //   }\n  //   catch (reason) {\n  //     dumpError400(reason, 'ChartPanel getCandlestick')\n  //   }\n  //\n  //   return () => {\n  //     mounted = false\n  //   }\n  //\n  // }, [exchangeApi, market, tokens, base,])\n\n  const tgItemJSXsPriceChart: TGItemJSXInterface[] = Object.keys(ChartUnit).reduce((pre, item) => {\n    // @ts-ignore\n    const tGItemData: TGItemData = { value: ChartUnit[item], key: ChartUnit[item], label: 'label' + ChartUnit[item] };\n    pre.push({ value: tGItemData.value, tlabel: t(tGItemData.label ? tGItemData.label : tGItemData.key), key: tGItemData.key, JSX: <>{t(tGItemData.label ? tGItemData.label : tGItemData.key)}</> })\n    return pre\n  }, [] as TGItemJSXInterface[])\n\n  useCustomDCEffect(async () => {\n  \n    let mounted = true\n  \n    if (!exchangeApi || !market || !amm) {\n      return\n    }\n  \n    if (chartType === ChartType.Trend) {\n      const request: GetCandlestickRequest = {\n        market: amm as string,\n        interval: TradingInterval.min15,\n        limit: 96\n      }\n  \n      try {\n        const candlesticks = await exchangeApi.getCandlestick(request)\n  \n        if (mounted) {\n          const originData = candlesticks.candlesticks.map((item: Candlestick) => {\n            return {\n              timeStamp: item.timestamp,\n              low: item.low,\n              high: item.high,\n              open: item.open,\n              close: item.close,\n              volume: item.quoteVol,\n            }\n          })\n          setOriginData(originData)\n        }\n      }\n      catch (reason) {\n        dumpError400(reason, 'ChartPanel getCandlestick')\n      }\n  \n    } else {\n      const request: GetDepthRequest = {\n        market,\n      }\n  \n      try {\n  \n        const { depth } = await exchangeApi.getMixDepth(request)\n        console.log('useBasicInfo depth:', depth)\n        if (mounted) {\n          const originData: IGetDepthDataParams = {\n            bidsPrices: depth.bids_prices,\n            bidsAmtTotals: depth.bids_amtTotals as any,\n            asksPrices: depth.asks_prices,\n            asksAmtTotals: depth.asks_amtTotals as any,\n          }\n          setOriginData(originData)\n        }\n  \n      } catch (reason) {\n        dumpError400(reason)\n      }\n  \n    }\n  \n    return () => {\n      mounted = false\n    }\n  \n  }, [exchangeApi, amm, market, chartType])\n\n  return {\n    // change,\n    // volume,\n    chartUnit,\n    chartType,\n    tgItemJSXs,\n    tgItemJSXsPriceChart,\n    handleChange,\n    originData,\n    handleChartUnitChange,\n  }\n}","import { ChartUnit,UpColor } from '@loopring-web/common-resources'\nimport { ScaleAreaChart, ToggleButtonGroup, useSettings, TradeTitle, ChartType } from '@loopring-web/component-lib'\nimport { Box, Grid } from \"@material-ui/core\"\nimport { WithTranslation } from 'react-i18next'\nimport { useBasicInfo } from './hook'\n\nconst BasicInfoPanel = ({ props, coinAInfo, coinBInfo, tradeFloat, marketArray, t, ...rest }: any & WithTranslation) => {\n\n    const {\n        // change,\n        chartType,\n        tgItemJSXs,\n        tgItemJSXsPriceChart,\n        handleChange,\n        originData,\n        chartUnit,\n        handleChartUnitChange,\n    } = useBasicInfo(props, coinAInfo, coinBInfo, marketArray, t)\n    const { upColor } = useSettings();\n\n    return <>\n        <Grid item xs={8}>\n            <TradeTitle {...{\n                coinAInfo, coinBInfo,\n                ...rest, t, tradeFloat\n            }}></TradeTitle>\n        </Grid>\n        <Grid item xs={4} display={'flex'} justifyContent={'flex-end'} alignItems={'flex-end'}>\n            <ToggleButtonGroup exclusive {...{ ...rest, t, tgItemJSXs, value: chartType }}\n                handleChange={handleChange} />\n        </Grid>\n\n        <Grid item xs={12} position={'relative'}>\n            <Box minHeight={256} maxHeight={256} display={'block'} style={{ height: '100%', width: '100%' }}>\n                <ScaleAreaChart type={chartType} data={originData ?? []} riseColor={upColor as keyof typeof UpColor}\n                    handleMove={() => {\n                    }} />\n            </Box>\n            {chartType === ChartType.Trend && (\n                <Box height={24} display={'flex'} justifyContent={'flex-end'} position={'absolute'} right={0} bottom={0}>\n                    <ToggleButtonGroup exclusive {...{\n                        ...rest, t, tgItemJSXs: tgItemJSXsPriceChart,\n                        value: chartUnit, size: 'small'\n                    }}\n                        handleChange={handleChartUnitChange} />\n                </Box>\n            )}\n        </Grid> \n        {/* <Grid item xs={12} height={24} display={'flex'} justifyContent={'flex-end'}>\n            <ToggleButtonGroup exclusive {...{\n                ...rest, t, tgItemJSXs: tgItemJSXsPriceChart,\n                value: chartUnit, size: 'small'\n            }}\n                handleChange={handleChartUnitChange} />\n        </Grid> */}\n    </>\n\n};\n\nexport default BasicInfoPanel\n","\n\nimport { RefAttributes, useState } from 'react'\n\nimport Tabs from '@material-ui/core/Tabs'\nimport Tab from '@material-ui/core/Tab'\nimport Checkbox from '@material-ui/core/Checkbox'\nimport styled from '@emotion/styled'\n\nimport { FormControlLabel, TradeTable, } from '@loopring-web/component-lib'\nimport { withTranslation, WithTranslation } from 'react-i18next';\nimport { CheckBoxIcon, CheckedIcon } from '@loopring-web/common-resources'\nimport { RouteComponentProps, withRouter } from 'react-router'\nimport { Box } from '@material-ui/core';\nimport { RawDataTradeItem, BasicHeaderItem, HeadMenuType } from '@loopring-web/component-lib'\nimport { TableWrapStyled } from '../../../styled';\n\n// const StylePaper = styled(Box)`\n//\n//\n//   background-color: ${({theme}) => theme.colorBase.background().default};\n//   border-radius: ${({theme}) => theme.unit}px;\n//\n//   //padding: 20px;\n//\n//   // .tableWrapper {\n//   //   margin-top: ${({theme}) => theme.unit * 1.5}px;\n//   //   border: 1px solid ${({theme}) => theme.colorBase.borderColor};\n//   //   border-radius: ${({theme}) => theme.unit}px;\n//   //   padding: 26px;\n//   // }\n// ` as typeof Box;\n\n\nconst applyProps = (index: number) => {\n    return {\n        id: `simple-tab-${index}`,\n        'aria-controls': `simple-tabpanel-${index}`,\n    }\n}\nconst StyledTabsWrapper = styled.div`\n          position: relative;\n          width: 100%;\n          margin-top: ${({theme}) => theme.unit * 4}px;\n        `\n\nconst StyledFormControlLabel = styled(FormControlLabel)`\n          position: absolute;\n          top: 0;\n          right: ${({theme}) => theme.unit}px;\n          margin: ${({theme}) => theme.unit}px 0 0 0;\n        `\n\n\nconst TradePanel = withTranslation('common')(\n   // withRouter(\n    (\n        {tradeArray,  myTradeArray, t}:\n            { tradeArray: RawDataTradeItem[], myTradeArray: RawDataTradeItem[] } & WithTranslation & RouteComponentProps) => {\n        const [isAllTrade, setIsAllTrade] = useState(false)\n        const [value, setValue] = useState(1)\n        const handleChange = (event: any, newValue: any) => {\n            setValue(newValue)\n        }\n\n        const handleCheckboxChange = () => {\n            setIsAllTrade((flag: boolean) => !flag)\n        }\n\n        return (\n            <StyledTabsWrapper>\n                <StyledFormControlLabel\n                    control={<Checkbox checked={isAllTrade} size={'small'} checkedIcon={<CheckedIcon/>}\n                                       icon={<CheckBoxIcon/>} color={'default'} onChange={handleCheckboxChange}/>}\n                    label={t('labelTradePanelHideOtherPairs')}/>\n\n                <Tabs value={value}\n                      onChange={handleChange}\n                      aria-label=\"tabs switch\">\n                    <Tab label={t('labelMyTrade')} {...applyProps(0)} />\n                    <Tab label={t('labelRecent')}   {...applyProps(1)} />\n                </Tabs>\n\n                <TableWrapStyled marginY={2}  paddingBottom={2} flex={1}>\n                    {value === 0 ?  <TradeTable rawData={myTradeArray} /> : <TradeTable rawData={tradeArray}/> }\n                </TableWrapStyled>\n\n            </StyledTabsWrapper>\n        )\n    }\n    ) as  (props: { tradeArray: RawDataTradeItem[], myTradeArray: RawDataTradeItem[] }) => JSX.Element;\n//)\n\nexport default TradePanel\n\n","import { Box, Grid, } from '@material-ui/core'\nimport { WithTranslation, withTranslation } from 'react-i18next'\nimport BasicInfoPanel from './panel/BasicInfoPanel'\nimport TradePanel from './panel/TradePanel'\nimport styled from 'styled-components'\nimport { useSwapPage } from './hook';\nimport { SwapPanel } from '@loopring-web/component-lib'\nimport { TradeBtnStatus } from '@loopring-web/component-lib'\n\nconst FixedStyle = styled(Box)`\n  @media only screen and (min-height: 680px ) and (min-width: 1024px) {\n    position: fixed;\n  }\n`\n\nexport const SwapPage = withTranslation('common')(({...rest}: WithTranslation) => {\n\n    const {\n        tradeCalcData,\n        tradeData,\n        tradeFloat,\n        tradeArray,\n        myTradeArray,\n        marketArray,\n        handleSwapPanelEvent,\n        onSwapClick,\n        pair,\n        swapBtnI18nKey,\n        isSwapLoading\n    } = useSwapPage();\n\n    return <>\n        <Grid container marginRight={3} alignContent={'flex-start'}>\n            <BasicInfoPanel {...{\n                ...rest,\n                ...pair, marketArray,\n                tradeFloat, tradeArray\n            }} />\n            <TradePanel tradeArray={tradeArray} myTradeArray={myTradeArray}/>\n\n            {/**/}\n        </Grid>\n\n        <Box display={'flex'} style={{minWidth: 'var(--swap-box-width)'}}>\n            <FixedStyle>\n                <SwapPanel tradeData={tradeData as any}\n                           tradeCalcData={tradeCalcData as any}\n                           onSwapClick={onSwapClick}\n                           swapBtnI18nKey={swapBtnI18nKey}\n                           swapBtnStatus={isSwapLoading ? TradeBtnStatus.LOADING : TradeBtnStatus.AVAILABLE}\n                    // handleError={}\n                           {...{handleSwapPanelEvent, ...rest}}\n                />\n            </FixedStyle>\n\n        </Box>\n\n    </>\n});\n\n\n// SwapPage\n","import { useRouteMatch } from 'react-router';\nimport {\n    CoinInfo,\n    CustomError,\n    ErrorMap,\n    globalSetup,\n    IBData,\n    TradeCalcData,\n    TradeFloat,\n    WalletMap\n} from '@loopring-web/common-resources';\nimport React, { useState } from 'react';\nimport { LoopringAPI } from '../../stores/apis/api';\nimport { useTokenMap } from '../../stores/token';\nimport * as fm from 'loopring-sdk';\nimport {\n    AmmPoolInfoV3,\n    AmmPoolSnapshot,\n    dumpError400,\n    getExistedMarket,\n    GetNextStorageIdRequest,\n    LoopringMap,\n    OrderType,\n    SubmitOrderRequestV3,\n    VALID_UNTIL\n} from 'loopring-sdk';\nimport { useAmmMap } from '../../stores/Amm/AmmMap';\nimport { useWalletLayer2 } from '../../stores/walletLayer2';\nimport { RawDataTradeItem, SwapTradeData, SwapType } from '@loopring-web/component-lib';\nimport { useAccount } from '../../stores/account/hook';\nimport { useCustomDCEffect } from '../../hooks/common/useCustomDCEffect';\nimport {\n    accountStaticCallBack,\n    bntLabel,\n    btnClickMap,\n    coinPairInit,\n    fnType,\n    getUserTrades,\n    makeCache,\n    makeMarketArray,\n    makeTickView,\n    makeWallet,\n    pairDetailBlock,\n    pairDetailDone\n} from '../../hooks/help';\nimport * as _ from 'lodash'\nimport store from 'stores';\nimport { AccountStatus } from 'state_machine/account_machine_spec';\nimport { SwapData } from '@loopring-web/component-lib';\nimport { deepClone } from '../../utils/obj_tools';\n\nexport const useSwapPage = <C extends { [ key: string ]: any }>() => {\n    /*** api prepare ***/\n        // const exchangeApi = exchangeAPI();\n    const wait = globalSetup.wait;\n    const match: any = useRouteMatch(\":symbol\")\n    const {coinMap, tokenMap, marketArray, marketCoins, marketMap,} = useTokenMap()\n    const {ammMap} = useAmmMap();\n    // const {setShowConnect, setShowAccountInfo} = useOpenModals();\n    // const {ShowDeposit} = useModals()\n    const {account} = useAccount()\n\n    const walletLayer2State = useWalletLayer2();\n    const [isSwapLoading, setIsSwapLoading] = useState(false)\n    const [tradeData, setTradeData] = React.useState<SwapTradeData<IBData<C>> | undefined>(undefined);\n    const [tradeCalcData, setTradeCalcData] = React.useState<TradeCalcData<C> | undefined>(undefined);\n    const [tradeArray, setTradeArray] = React.useState<RawDataTradeItem[]>([]);\n    const [myTradeArray, setMyTradeArray] = React.useState<RawDataTradeItem[]>([]);\n    const [tradeFloat, setTradeFloat] = React.useState<TradeFloat | undefined>(undefined);\n    const [pair, setPair] = React.useState<{ coinAInfo: CoinInfo<C> | undefined, coinBInfo: CoinInfo<C> | undefined }>({\n        coinAInfo: undefined,\n        coinBInfo: undefined,\n    });\n\n\n    const [ammPoolSnapshot, setAmmPoolSnapshot] = React.useState<AmmPoolSnapshot | undefined>(undefined);\n\n    const [swapBtnI18nKey, setSwapBtnI18nKey] = React.useState<string | undefined>(undefined);\n\n    const [output, setOutput] = useState<any>()\n\n    //HIGH: get Router info\n    // const symbol = match?.params.symbol ?? undefined;\n    React.useEffect(() => {\n        const symbol = match?.params.symbol ?? undefined;\n        resetSwap(symbol, undefined, undefined, undefined);\n        // const label: string | undefined = accountStaticCallBack(bntLabel)\n        // setSwapBtnI18nKey(label);\n    }, []);\n    //TODO tickMap\n    // React.useEffect(() => {\n    // }, [])\n\n    //HIGH: effect by wallet state update\n    React.useEffect(() => {\n        switch (walletLayer2State.status) {\n            case \"ERROR\":\n                walletLayer2State.statusUnset();\n                // setState('ERROR')\n                //TODO: show error at button page show error  some retry dispath again\n                break;\n            case \"DONE\":\n                walletLayer2State.statusUnset();\n                const {walletMap} = makeWallet();\n                if (tradeCalcData) {\n                    setTradeCalcData({...tradeCalcData, walletMap} as TradeCalcData<C>);\n                    setTradeData({\n                        sell: {\n                            belong: tradeCalcData.sellCoinInfoMap ? tradeCalcData.sellCoinInfoMap[ tradeCalcData.coinSell ]?.simpleName : undefined,\n                            balance: walletMap ? walletMap[ tradeCalcData.coinSell ]?.count : 0\n                        },\n                        // @ts-ignore\n                        buy: {\n                            belong: tradeCalcData.sellCoinInfoMap ? tradeCalcData.sellCoinInfoMap[ tradeCalcData.coinBuy ]?.simpleName : undefined,\n                            balance: walletMap ? walletMap[ tradeCalcData.coinBuy ]?.count : 0\n                        },\n                    } as SwapTradeData<IBData<C>>)\n                    let {\n                        amm,\n                        market\n                    } = getExistedMarket(marketArray, tradeCalcData.coinSell as string, tradeCalcData.coinBuy as string);\n                    getUserTrades(market).then((marketTrades) => {\n                        let _myTradeArray = makeMarketArray(market, marketTrades) as RawDataTradeItem[]\n                        setMyTradeArray(_myTradeArray ? _myTradeArray : [])\n                    })\n                }\n                break;\n            default:\n                break;\n\n        }\n    }, [walletLayer2State.status, setMyTradeArray, marketArray, tradeCalcData])\n\n    // React.useEffect(() => {\n    //    // const label: string | undefined = accountStaticCallBack(bntLabel)\n    //     // setSwapBtnI18nKey(label);\n    // }, [])\n\n    // console.log(account.status)\n\n    useCustomDCEffect(() => {\n        const label: string | undefined = accountStaticCallBack(bntLabel)\n        setSwapBtnI18nKey(label);\n    }, [account.status]);\n    const swapCalculatorCallback = React.useCallback(async function ({sell, buy, slippage, ...rest}: any) {\n        const {exchangeInfo} = store.getState().system\n        setIsSwapLoading(true);\n        if (!LoopringAPI.userAPI || !tokenMap || !exchangeInfo\n            || account.status !== AccountStatus.ACTIVATED) {\n            setIsSwapLoading(false);\n            return\n        }\n\n        const baseToken = tokenMap[ sell.belong as string ]\n        const quoteToken = tokenMap[ buy.belong as string ]\n\n        const request: GetNextStorageIdRequest = {\n            accountId: account.accountId,\n            sellTokenId: baseToken.tokenId\n        }\n\n        const storageId = await LoopringAPI.userAPI.getNextStorageId(request, account.apiKey)\n\n        try {\n\n            const request: SubmitOrderRequestV3 = {\n                exchange: exchangeInfo.exchangeAddress,\n                accountId: account.accountId,\n                storageId: storageId.orderId,\n                sellToken: {\n                    tokenId: baseToken.tokenId,\n                    volume: output.amountS\n                },\n                buyToken: {\n                    tokenId: quoteToken.tokenId,\n                    volume: output.amountBOutSlip\n                },\n                allOrNone: false,\n                validUntil: VALID_UNTIL,\n                maxFeeBips: 60,\n                fillAmountBOrS: false, // amm only false\n                orderType: OrderType.ClassAmm,\n                eddsaSignature: '',\n            }\n            setTradeData({\n                ...tradeData,\n                ...{\n                    sell: {...tradeData?.sell, tradeValue: 0},\n                    buy: {...tradeData?.buy, tradeValue: 0},\n                }\n            } as SwapTradeData<IBData<C>>)\n            const response = await LoopringAPI.userAPI.submitOrder(request, account.eddsaKey, account.apiKey)\n            setIsSwapLoading(false);\n            console.log(response)\n\n        } catch (reason) {\n            setIsSwapLoading(false);\n            dumpError400(reason)\n        }\n\n        if (rest.__cache__) {\n            makeCache(rest.__cache__)\n        }\n    },[tradeData])\n    const swapBtnClickArray: typeof btnClickMap = Object.assign(deepClone(btnClickMap), {\n        [ fnType.ACTIVATED ]:[swapCalculatorCallback]\n    })\n    const onSwapClick = React.useCallback(({sell, buy, slippage, ...rest}: SwapTradeData<IBData<C>>) => {\n        accountStaticCallBack(swapBtnClickArray, [{sell, buy, slippage, ...rest}])\n    }, [swapBtnClickArray])\n    const handleSwapPanelEvent = async (swapData: SwapData<SwapTradeData<IBData<C>>>, switchType: any): Promise<void> => {\n        //TODO setMarket(market);\n        // _.throttle(()=>{\n        const {tradeData} = swapData\n        return new Promise((resolve) => {\n            switch (switchType) {\n                case SwapType.SEll_CLICK:\n                    break\n                case SwapType.BUY_CLICK:\n                    break\n                case SwapType.SELL_SELECTED:\n                    resetSwap(`${tradeData.sell.belong}-${tradeData.buy.belong}`, 'sell', tradeData, ammPoolSnapshot)\n                    break\n                case SwapType.BUY_SELECTED:\n                    resetSwap(`${tradeData.sell.belong}-${tradeData.buy.belong}`, 'buy', tradeData, ammPoolSnapshot)\n                    break\n                case SwapType.EXCHANGE_CLICK:\n                    resetSwap(`${tradeData.sell.belong}-${tradeData.buy.belong}`, undefined, undefined, ammPoolSnapshot)\n                    break\n                default:\n                    break\n            }\n\n            resolve(undefined)\n        })\n        // },wait)\n\n    }\n\n    const calculateTradeData = async (type: 'sell' | 'buy', _tradeData: SwapTradeData<IBData<C>>, ammPoolSnapshot: AmmPoolSnapshot | undefined): Promise<{ _tradeCalcData: TradeCalcData<C>, _tradeData: SwapTradeData<IBData<C>> }> => {\n        //if(`${pair.coinAInfo?.simpleName}-${pair.coinBInfo?.simpleName}` === coinKey)\n        if (_tradeData[ type ].tradeValue && tradeCalcData) {\n            type === 'sell' ? _tradeData[ 'buy' ].tradeValue = fm.toBig(_tradeData[ 'sell' ].tradeValue).times(tradeCalcData.StoB).toNumber()\n                : _tradeData[ 'sell' ].tradeValue = fm.toBig(_tradeData[ 'buy' ].tradeValue).times(tradeCalcData.BtoS).toNumber()\n        }\n        const market = `${pair.coinAInfo?.simpleName}-${pair.coinBInfo?.simpleName}`\n        const depth = await LoopringAPI.exchangeAPI?.getMixDepth({market})\n        if (!marketArray || !tokenMap || !marketMap || !depth || !ammMap || !tradeCalcData) {\n            let _tradeCalcData = {...tradeCalcData} as TradeCalcData<C>;\n            return {_tradeData, _tradeCalcData}\n        }\n\n        const isAtoB = type === 'sell'\n        let input: any = (isAtoB ? _tradeData.sell.tradeValue : _tradeData.buy.tradeValue)\n\n        if (input) {\n            input = input.toString()\n        } else {\n            input = '0'\n        }\n\n        const base = _tradeData.sell.belong as string\n        const quote = _tradeData.buy.belong as string\n\n        const output = fm.getOutputAmount(input, base, quote, isAtoB, marketArray, tokenMap,\n            marketMap, depth?.depth, {[ 'AMM-' + market ]: ammMap[ 'AMM-' + market ].__rawConfig__} as LoopringMap<AmmPoolInfoV3>,\n            ammPoolSnapshot, '6', '200')\n\n        setOutput(output)\n\n        tradeCalcData.priceImpact = output?.priceImpact as string\n\n        if (isAtoB) {\n            _tradeData.buy.tradeValue = output?.output ? parseFloat(output?.output) : 0\n        } else {\n            _tradeData.sell.tradeValue = output?.output ? parseFloat(output?.output) : 0\n        }\n        //TODO: renew  tradeCalcData\n        let _tradeCalcData = {...tradeCalcData} as TradeCalcData<C>;\n        return {_tradeData, _tradeCalcData}\n    }\n\n    const throttleSetValue = React.useCallback(_.debounce(async (type, _tradeData, _ammPoolSnapshot) => {\n        const {_tradeData: td, _tradeCalcData} = await calculateTradeData(type, _tradeData, _ammPoolSnapshot)//.then(()=>{\n        setTradeData(td)\n        setTradeCalcData(_tradeCalcData)\n\n    }, wait * 2), [setTradeData, setTradeCalcData, calculateTradeData]);\n\n    const resetSwap = async (coinKey: any, type: 'sell' | 'buy' | undefined, _tradeData: SwapTradeData<IBData<C>> | undefined, _ammPoolSnapshot: AmmPoolSnapshot | undefined) => {\n        if (tradeCalcData\n            && coinKey === `${tradeCalcData.coinSell}-${tradeCalcData.coinBuy}`\n            && _tradeData\n            && type\n            && (!tradeData || (tradeData[ type ].tradeValue !== _tradeData[ type ].tradeValue))) {\n            // calculateTradeData(type,_tradeData,_ammPoolSnapshot)\n            throttleSetValue(type, _tradeData, _ammPoolSnapshot)\n            //throttleSetValue(td,_tradeCalcData);\n\n        } else {\n            let _tradeFloat: Partial<TradeFloat> = {}\n            let _tradeArray: Array<Partial<RawDataTradeItem>> | undefined = undefined;\n            let _tradeCalcData: Partial<TradeCalcData<C>> = coinPairInit({\n                coinKey,\n                _tradeCalcData: {},\n                tokenMap,\n                coinMap\n            })\n            let {\n                amm,\n                market\n            } = getExistedMarket(marketArray, _tradeCalcData.coinSell as string, _tradeCalcData.coinBuy as string);\n            const [, coinA, coinB] = market.match(/(\\w+)-(\\w+)/i)\n\n            setTradeCalcData({...tradeCalcData, ..._tradeCalcData} as TradeCalcData<C>);\n            if (coinMap) {\n                setPair({\n                    coinAInfo: coinMap[ coinA ],\n                    coinBInfo: coinMap[ coinB ],\n                })\n            }\n            if (walletLayer2State.walletLayer2) {\n                const {walletMap} = makeWallet();\n                _tradeCalcData.walletMap = walletMap as WalletMap<any>;\n                getUserTrades(market).then((marketTrades) => {\n                    let _myTradeArray = makeMarketArray(market, marketTrades) as RawDataTradeItem[]\n                    setMyTradeArray(_myTradeArray ? _myTradeArray : [])\n                })\n\n\n            }\n            let apiList = [];\n            //TODO wallet saga done\n            if (marketArray && amm && market && ammMap) {\n                // let pairPromise =  usePairTitleBlock({market})\n                apiList = [\n                    LoopringAPI.exchangeAPI?.getMarketTrades({market}),\n                    pairDetailBlock({coinKey: market, ammKey: amm, ammMap})\n                ];\n                //HiGH: this need add websocket to update infr ticker ammpoolsbalace\n                // @ts-ignore\n                Promise.all([...apiList]).then(\n                    ([{marketTrades}, {ammPoolsBalance, tickMap}]: any[]) => {\n                        setAmmPoolSnapshot(ammPoolsBalance)\n                        if (tokenMap) {\n                            let {_tradeCalcData: _td} = pairDetailDone({\n                                coinKey: `${_tradeCalcData.coinSell}-${_tradeCalcData.coinBuy}`,\n                                market,\n                                ammPoolsBalance,\n                                tickerData: tickMap[ market ] ? tickMap[ market ] : {},\n                                tokenMap,\n                                _tradeCalcData,\n                                coinMap,\n                                marketCoins\n                            })\n                            _tradeCalcData = _td;\n                            _tradeFloat = makeTickView(tickMap[ market ] ? tickMap[ market ] : {})\n                            _tradeArray = makeMarketArray(market, marketTrades)\n                            // @ts-ignore\n                            setTradeCalcData(_tradeCalcData as TradeCalcData<C>);\n                            // @ts-ignore\n                            setTradeFloat(_tradeFloat);\n                            setTradeArray(_tradeArray as RawDataTradeItem[])\n                            // setPair(_pair)\n                            setTradeData({\n                                sell: {\n                                    belong: _tradeCalcData.sellCoinInfoMap ? _tradeCalcData.sellCoinInfoMap[ _tradeCalcData.coinSell ]?.simpleName : undefined,\n                                    balance: _tradeCalcData.walletMap ? _tradeCalcData.walletMap[ _tradeCalcData.coinSell ]?.count : 0\n                                },\n                                // @ts-ignore\n                                buy: {\n                                    belong: _tradeCalcData.sellCoinInfoMap ? _tradeCalcData.sellCoinInfoMap[ _tradeCalcData.coinBuy ]?.simpleName : undefined,\n                                    balance: _tradeCalcData.walletMap ? _tradeCalcData.walletMap[ _tradeCalcData.coinBuy ]?.count : 0\n                                },\n                            } as SwapTradeData<IBData<C>>)\n                        }\n                    }).catch((error) => {\n                    throw new CustomError({...ErrorMap.TRADE_LITE_SET_PAIR_ERROR, options: error})\n                    //TODO solve error\n                })\n\n            }\n        }\n\n    }\n    return {\n        tradeCalcData,\n        tradeFloat,\n        tradeArray,\n        myTradeArray,\n        isSwapLoading,\n        tradeData,\n        pair,\n        marketArray,\n        onSwapClick,\n        swapBtnI18nKey,\n        handleSwapPanelEvent\n    }\n\n}","import { useCallback, useMemo, useState, useRef, useEffect } from 'react'\n\nimport { useWsAPI, } from './useApi'\n\nimport { ChainId, getAccountArg, getCandlestickArg, getAmmpoolArg, \n    getTickerArg, WsProps } from 'loopring-sdk'\nimport store from 'stores'\n\nconst stateArr = [\n    { key: 0, value: 'Connecting' },\n    { key: 1, value: 'Connected' },\n    { key: 2, value: 'Closing' },\n    { key: 3, value: 'Closed' }\n]\n\nexport const useWebsocket = ({ topics, verify, needApiKey, apiKey, }: { topics: any, needApiKey: boolean, apiKey: string|undefined, verify: boolean, }) => {\n    const ws = useRef<WebSocket | null>(null)\n    const [wsData, setMessage] = useState<any>(undefined)\n    const [readyState, setReadyState] = useState({ key: 0, value: 'Connecting' })\n\n    const chainId = store.getState().trading.chainId\n\n    const api = useWsAPI()\n\n    const creatWebSocket = () => {\n\n        if (!api || !chainId) {\n            return\n        }\n\n        api.getWsKey().then((wsApiKey: any) => {\n            let basePath: string = 'wss://ws.'\n            switch (chainId) {\n                case ChainId.MAINNET:\n                    basePath += process.env.REACT_APP_API_URL\n                    break\n                default:\n                    basePath += process.env.REACT_APP_API_URL_UAT\n                    basePath = 'wss://ws.uat2.loopring.io'\n            }\n\n            basePath += '/v3/ws?wsApiKey=' + wsApiKey.wsKey\n    \n            try {\n                ws.current = new WebSocket(basePath)\n\n                const subTopics = (topics: any) => {\n                    let data: any = {\n                        op: 'sub',\n                        unsubscribeAll: 'true',\n                        topics: topics,\n                    }\n            \n                    if (needApiKey && apiKey) {\n                        data.apiKey = apiKey\n                    }\n            \n                    const flat_txt = JSON.stringify(data)\n                    sendMessage(flat_txt)\n                }\n    \n                ws.current.onopen = (_e) => {\n                    setReadyState(stateArr[ws.current?.readyState ?? 0])\n                    // subTopics(topics)\n                }\n                \n                ws.current.onclose = (e) => {\n                    setReadyState(stateArr[ws.current?.readyState ?? 0])\n                }\n                \n                ws.current.onerror = (e) => {\n                    setReadyState(stateArr[ws.current?.readyState ?? 0])\n                }\n    \n                ws.current.onmessage = (e) => {\n                    setMessage(e.data)\n                }\n            } catch (error) {\n                console.error(error)\n            }\n\n        })\n\n    }\n\n    const webSocketInit = () => {\n        if (!ws.current || ws.current.readyState === 3) {\n            creatWebSocket()\n        }\n    }\n\n    const closeWebSocket = () => {\n        ws.current?.close()\n    }\n\n    const sendMessage = (msg: any) => {\n        ws.current?.send(msg)\n    }\n\n    const reconnect = () => {\n        try {\n            closeWebSocket()\n            ws.current = null\n            // creatWebSocket()\n        } catch (e) {\n            console.error(e)\n        }\n    }\n\n    useEffect(() => {\n\n        verify && webSocketInit()\n        return () => {\n            ws.current?.close()\n        }\n    }, [ws, verify, webSocketInit])\n\n    return {\n        wsData,\n        readyState,\n        sendMessage,\n        closeWebSocket,\n        reconnect,\n    }\n}\n\nexport function useWs(topics: any, needApiKey: boolean, apiKey?: string, verify: boolean = true) {\n    const [socketData, setSocketData] = useState({})\n\n    const [isLocalPage, setIsLocalPage] = useState<boolean>(true)\n\n    useEffect(() => {\n\n        let mounted = true\n\n        const checkIsLocalPage = () => {\n            document.addEventListener('visibilitychange', function () {\n                // page invisible trigger!\n                let isLocalPage = true\n                if (document.visibilityState === 'hidden') {\n                    isLocalPage = false\n                }\n                if (mounted) {\n                    setIsLocalPage(isLocalPage)\n                }\n            })\n        }\n\n        checkIsLocalPage()\n\n        return () => {\n            mounted = false\n        }\n\n    }, [])\n\n    const { wsData, readyState, closeWebSocket, reconnect, sendMessage, } = useWebsocket({\n        topics,\n        apiKey,\n        needApiKey,\n        verify,\n    })\n\n    useEffect(() => {\n    \n        if (needApiKey && !apiKey) {\n            return\n        }\n\n        if (!verify) {\n            return\n        }\n\n        if (wsData === 'ping') {\n            try {\n                sendMessage('pong')\n            } catch (err) {\n                console.log(err)\n            }\n        } else {\n            if (wsData) {\n                setSocketData(JSON.parse(wsData))\n            }\n        }\n        \n        // if closed and is currente page then, reconnect.\n        if (readyState.key === 3 && isLocalPage) {\n            // reconnect()\n        }\n        // if not current page, close it.\n        if (!isLocalPage) {\n            closeWebSocket()\n        }\n\n    }, [wsData, readyState, isLocalPage, verify, apiKey])\n\n    return {\n        socketData,\n    }\n}\n\nexport function useAmmpoolWs(apiKey: string) {\n\n    let topics: any[] = []\n\n    topics.push(getTickerArg('LRC-ETH'))\n\n    topics.push(getAmmpoolArg('0x18920d6E6Fb7EbE057a4DD9260D6D95845c95036'))\n\n    const needApiKey = false\n\n    const { socketData } = useWs(topics, needApiKey, apiKey)\n\n    return {\n        socketData,\n    }\n\n}\n","import { useState, } from 'react'\n\nimport { getAccountArg, getCandlestickArg, \n  getAmmpoolArg, getTickerArg, getOrderArg, WsTopicType, } from 'loopring-sdk'\n\nimport { useWs } from './useWebsocketApi'\nimport { useCustomDCEffect } from 'hooks/common/useCustomDCEffect'\n\nimport { useGetMarkets } from \"hooks/exchange/useExchangeAPI\"\n\nfunction useHandleSocketData(data: any) {\n  const [account, setAccount] = useState<any>()\n  const [ammPool, setAmmPool] = useState<any>()\n  const [order, setOrder] = useState<any>()\n  const [ticker, setTicker] = useState<any>()\n\n  useCustomDCEffect(() => {\n\n      if (!data) {\n        return\n      }\n\n      if (data.op) {\n        return\n      }\n\n      if (!data.topic || !data.topic.topic) {\n        return\n      }\n\n      switch(data.topic.topic) {\n        case WsTopicType.account:\n          setAccount(data.data)\n          break\n        case WsTopicType.ammpool:\n          let ammPool = {\n            baseAmt: data.data[0][0],\n            quoteAmt: data.data[0][1],\n            timestamp: data.data[1],\n          }\n          setAmmPool(ammPool)\n          break\n        case WsTopicType.candlestick:\n          break\n        case WsTopicType.order:\n          setOrder(data.data)\n          break\n        case WsTopicType.orderBook:\n          break\n        case WsTopicType.ticker:\n          setTicker(data.data)\n          break\n        case WsTopicType.trade:\n          break\n        default:\n          throw Error('Unknown WsTopicType:' + data.topic.topic)\n      }\n  }, [data])\n\n  return {\n    account,\n    ammPool,\n    order,\n    ticker,\n  }\n}\n\nexport function useSwapPageWs(poolAddress: string, market: string, apiKey: string) {\n\n  let topics: any[] = []\n\n  topics.push(getAccountArg())\n  topics.push(getOrderArg(market))\n  topics.push(getAmmpoolArg(poolAddress))\n\n  const { socketData } = useWs(topics, true, apiKey, !!poolAddress && !!market && !!apiKey)\n\n  return useHandleSocketData(socketData)\n\n}\n\nexport function useQuotePageWs() {\n\n  const { markets } = useGetMarkets()\n\n  let topics: any[] = []\n\n  if (markets) {\n\n    const keys = Reflect.ownKeys(markets.markets)\n\n    let c = 0\n  \n    keys.every((item: any) => {\n      c += 1\n      topics.push(getTickerArg(item))\n      if (c >= 20) {\n        return false\n      }\n\n      return true\n    })\n\n  }\n\n  const { socketData } = useWs(topics, false)\n\n  return useHandleSocketData(socketData)\n\n}\n","import { useRef } from 'react'\n\n// import Qrcode from 'components/qrcodes/Qrcode'\n\n\nimport { useAccount } from 'stores/account/hook'\n\nimport { useGetExchangeInfo, useGetGas, useGetMarkets, useGetTokens } from 'hooks/exchange/useExchangeAPI'\n\nimport { useAmmpoolWs } from 'hooks/common/useWebsocketApi'\nimport { useQuotePageWs } from 'hooks/exchange/useWsAPI'\n\nconst DebugPage = () => {\n\n  const {ticker} = useQuotePageWs()\n\n  return (\n    <div>\n      Debug\n      <div>wsdata: {JSON.stringify(ticker)}</div>\n    </div>\n  )\n\n}\n\nexport default DebugPage\n","import { debounce } from 'lodash'\nimport React, { useEffect } from 'react'\nimport { UserStorage } from 'storage'\n\nimport { useCheckAccStatus, } from 'stores/account/hook'\n\nimport { \n  useUpdateChainId,\n  useUpdateExchangeInfo, \n  useUpdateExchangeMarkets, \n  useUpdateTokens, \n  useUpdateAmmPoolConf,\n  useUpdateAmmActivityRules,\n  useUpdateAmmPoolStats,\n} from 'stores/trading/hook'\n\nenum WindowEvent {\n  Click = 'click',\n  Scroll = 'scroll',\n  Mouseover = 'mouseover',\n}\n\nconst events = [WindowEvent.Click, WindowEvent.Scroll]\n\nconst forceReset = debounce(() => { UserStorage.checkTimeout(true) }, 100)\n\nexport const GlobalProvider = ({ children }: { children: React.ReactNode }) => {\n\n  useUpdateExchangeInfo()\n  useUpdateExchangeMarkets()\n  useUpdateTokens()\n  useUpdateAmmPoolConf()\n  useUpdateAmmActivityRules()\n  useUpdateAmmPoolStats()\n  useUpdateChainId()\n\n  useCheckAccStatus()\n\n  useEffect(() => {\n\n    events.forEach((event: string) => {\n      document.addEventListener(event, forceReset)\n    })\n\n    return () => {\n\n      events.forEach((event: string) => {\n        document.removeEventListener(event, forceReset)\n      })\n    }\n\n  }, [])\n\n  return (\n    <React.Fragment>\n      { children}\n    </React.Fragment>\n  )\n\n}\n","import React, { useState, useEffect } from 'react'\nimport styled from '@emotion/styled/macro'\nimport { useTranslation } from 'react-i18next'\n\nimport { useWeb3React } from '@web3-react/core'\n\nimport { network } from 'networks/web3_connectors'\n\nimport { useEagerConnect, useInactiveListener } from 'hooks/web3/useWeb3'\nimport { reset, setAccountStatus } from 'stores/account/reducer'\n\nimport { ChainId, NetworkContextName } from 'loopring-sdk'\n\n// import Loader from 'components/modals/Loader'\nimport { useDispatch } from 'react-redux'\nimport { AccountStatus } from 'state_machine/account_machine_spec'\n\nconst MessageWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  height: 20rem;\n`\n\nconst Message = styled.h2`\n  color: ${({ theme }) => theme.colorBase.error};\n`\n\nexport function Web3ReactManager({ children }: { children: JSX.Element }) {\n  const { t } = useTranslation()\n  const { active } = useWeb3React()\n  const { active: networkActive, error: networkError, activate: activateNetwork } = useWeb3React(NetworkContextName)\n\n  // try to eagerly connect to an injected provider, if it exists and has granted access already\n  const triedEager = useEagerConnect()\n\n  // after eagerly trying injected, if the network connect ever isn't active or in an error state, activate itd\n  useEffect(() => {\n    if (triedEager && !networkActive && !networkError && !active) {\n      activateNetwork(network)\n    }\n  }, [triedEager, networkActive, networkError, activateNetwork, active])\n\n  // when there's no account connected, react to logins (broadly speaking) on the injected provider, if it exists\n  \n  const dispatch = useDispatch()\n\n  const onReConnectInjected = () => {\n    console.log('onReConnectInjected')\n    dispatch(reset(undefined))\n    dispatch(setAccountStatus(AccountStatus.UNCONNNECTED))\n  }\n  \n  useInactiveListener(onReConnectInjected, !triedEager)\n\n  // handle delayed loader state\n  const [showLoader, setShowLoader] = useState(false)\n  useEffect(() => {\n    const timeout = setTimeout(() => {\n      setShowLoader(true)\n    }, 600)\n\n    return () => {\n      clearTimeout(timeout)\n    }\n  }, [])\n\n  // on page load, do nothing until we've tried to connect to the injected connector\n  if (!triedEager) {\n    return null\n  }\n\n  // if the account context isn't active, and there's an error on the network context, it's an irrecoverable error\n  if (!active && networkError) {\n    return (\n      <MessageWrapper>\n        <Message>{t('unknownError')}</Message>\n      </MessageWrapper>\n    )\n  }\n\n  // if neither context is active, spin\n  if (!active && !networkActive) {\n    return showLoader ? (\n      <MessageWrapper>\n        {/*<Loader />*/}\n      </MessageWrapper>\n    ) : null\n  }\n\n  return children\n}\n","import React from 'react'\n\nexport const DevWrapper = ({ children }: { children: React.ReactNode }) => {\n\n  return (\n    <React.Fragment>\n      {\n        process.env.NODE_ENV !== 'production' ? (\n          <>\n          {children}\n          </>\n        ) : null\n      }\n    </React.Fragment>\n  )\n\n}\n\n","import React, { useEffect } from 'react'\nimport { TransactionTable, RawDataTransactionItem, TransactionTradeTypes, TransactionStatus } from '@loopring-web/component-lib'\nimport { WithTranslation, withTranslation } from 'react-i18next'\nimport store from 'stores'\nimport { LoopringAPI } from 'stores/apis/api'\nimport { volumeToCount } from 'hooks/help'\nimport { StylePaper } from '../../styled'\n\nconst TxPanel = withTranslation('common')((rest:WithTranslation<'common'>) => {\n    const container = React.useRef(null);\n    const [pageSize, setPageSize] = React.useState(10);\n    const [txTableData, setTxTableData] = React.useState<RawDataTransactionItem[]>([]);\n\n    const { accountId,apiKey } = store.getState().account;\n\n    const getTxnStatus = (status: string) => \n        status === ''\n        ? TransactionStatus.processing :\n        status === 'processed'\n            ? TransactionStatus.processed\n            : status === 'processing'\n                ? TransactionStatus.processing \n                : status === 'received' \n                    ? TransactionStatus.received \n                    : TransactionStatus.failed\n\n    const getUserTxnList = React.useCallback(async () => {\n        if (LoopringAPI && LoopringAPI.userAPI && accountId && apiKey) {\n            const userTxnList = await Promise.all([\n                LoopringAPI.userAPI.getUserTranferList({\n                    accountId,\n                }, apiKey),\n                LoopringAPI.userAPI.getUserDepositHistory({\n                    accountId,\n                }, apiKey),\n                LoopringAPI.userAPI.getUserOnchainWithdrawalHistory({\n                    accountId,\n                }, apiKey)\n            ])\n            const userTransferMapped = userTxnList[0].userTransfers.map(o => ({\n                token: o.symbol,\n                from: o.senderAddress,\n                to: o.receiverAddress,\n                amount: Number(volumeToCount(o.symbol, o.amount)),\n                fee: {\n                    unit: o.feeTokenSymbol || '',\n                    value: Number(volumeToCount(o.symbol, o.feeAmount || 0))\n                },\n                memo: o.memo || '',\n                time: o.timestamp,\n                txnHash: o.hash,\n                status: getTxnStatus(o.status),\n                tradeType: TransactionTradeTypes.transfer\n            }))\n            const userDepositMapped = userTxnList[1].userDepositHistory.map(o => ({\n                token: o.symbol,\n                from: o.hash,\n                to: 'My Loopring',\n                amount: Number(volumeToCount(o.symbol, o.amount)),\n                fee: {\n                    unit: '',\n                    value: 0\n                },\n                memo: '',\n                time: o.timestamp,\n                txnHash: o.txHash,\n                status: getTxnStatus(o.status),\n                tradeType: TransactionTradeTypes.deposit\n            }))\n            const userWithdrawMapped = userTxnList[2].userOnchainWithdrawalHistory.map((o => ({\n                token: o.symbol,\n                from: 'My Loopring',\n                to: o.distributeHash,\n                amount: Number(volumeToCount(o.symbol, o.amount)),\n                fee: {\n                    unit: o.feeTokenSymbol,\n                    value: Number(volumeToCount(o.feeTokenSymbol, o.feeAmount))\n                },\n                memo: '',\n                time: o.timestamp,\n                txnHash: o.txHash,\n                status: getTxnStatus(o.status),\n                tradeType: TransactionTradeTypes.withdraw\n            })))\n            const mappingList = [...userTransferMapped, ...userDepositMapped, ...userWithdrawMapped]\n            const sortedMappingList = mappingList.sort((a, b) => b.time - a.time)\n            setTxTableData(sortedMappingList)\n        }\n    }, [accountId, apiKey])\n\n    useEffect(() => {\n        getUserTxnList()\n    }, [getUserTxnList])\n\n    React.useEffect(() => {\n        // @ts-ignore\n        let height = container?.current?.offsetHeight;\n        if (height) {\n            setPageSize(Math.floor((height - 120) / 44) - 2);\n        }\n    }, [container, pageSize]);\n\n    return (\n        <StylePaper ref={container}>\n            <div className=\"title\">Transactions</div>\n            <div className=\"tableWrapper\">\n                <TransactionTable {...{\n                    // rawData: txList,\n                    rawData: txTableData,\n                    pagination: {\n                        pageSize: pageSize\n                    },\n                    showFilter: true,\n                    ...rest\n                }} />\n            </div>\n        </StylePaper>\n    )\n})\n\nexport default TxPanel\n","import { useCallback, useEffect, useRef, useState } from 'react'\nimport { WithTranslation, withTranslation } from 'react-i18next'\nimport { PriceTag } from '@loopring-web/common-resources'\nimport { Box, Paper, Typography } from '@material-ui/core'\nimport styled from '@emotion/styled'\nimport { useHistory } from 'react-router-dom'\nimport {\n    AssetsTable,\n    AssetTitle,\n    AssetTitleProps,\n    ChartType,\n    DoughnutChart,\n    ScaleAreaChart,\n    ToggleButtonGroup,\n    TokenType,\n    LpTokenAction,\n} from '@loopring-web/component-lib'\nimport { useModals } from 'hooks/modal/useModals'\n// import { useGetUserBalances } from 'hooks/exchange/useUserAPI'\nimport { useGetTokens } from 'hooks/exchange/useExchangeAPI'\nimport { volumeToCount } from 'hooks/help'\nimport { LoopringAPI } from 'stores/apis/api'\nimport { AssetType } from 'loopring-sdk'\nimport store from 'stores'\nimport { useWalletLayer1 } from 'stores/walletLayer1'\nimport { makeWallet } from 'hooks/help'\nimport { EmptyValueTag,unit } from '@loopring-web/common-resources'\nimport { StylePaper } from '../../styled'\n\n// const StylePaper = styled(Box)`\n//   width: 100%;\n//   height: 100%;\n//   flex: 1;\n//   background-color: ${({theme}) => theme.colorBase.background().default};\n//   border-radius: ${({theme}) => theme.unit}px;\n// //   padding: 20px;\n//\n//   .title {\n//     font-family: Gilroy-Medium;\n//     font-size: ${({theme}) => theme.unit * 3}px;\n//     line-height: 19px;\n//   }\n//\n//   .tableWrapper {\n//     display: flex;\n//     flex: 1;\n//     height: 100%;\n//     border: 1px solid ${({theme}) => theme.colorBase.borderColor};\n//     border-radius: ${({theme}) => theme.unit}px;\n//     padding: 26px 0;\n//   }\n// ` as typeof Box;\n\nconst StyledChartWrapper = styled(Box)`\n    height: 225px;\n\n    > div {\n        position: relative;\n        width: calc(50% - 6px);\n        height: 100%;\n        background-color: ${({theme}) => theme.colorBase.background().default};\n        border-radius: ${({theme}) => theme.unit}px;\n        padding: ${({theme}) => theme.unit * 2.5}px ${({theme}) => theme.unit * 3}px;\n    }\n`\n\nconst StyledBtnGroupWrapper = styled(Box)`\n    position: absolute;\n    z-index: 10;\n    right: ${({theme}) => theme.unit * 3}px;\n    bottom: ${({theme}) => theme.unit * 2.5}px;\n`\n\nconst toggleData = [\n    // {value: '24 H', key: '24 H'},\n    {value: 'week', key: '1 W'},\n    {value: 'all', key: 'ALL'},\n]\n\nexport type ITokenInfoItem = {\n    token: string,\n    detail: {\n        price: string,\n        symbol: string,\n        updatedAt: number\n    }\n}\n\nexport type TrendDataItem = {\n    timeStamp: number;\n    close: number;\n}\n\nconst AssetPanel = withTranslation('common')(({t, ...rest}: WithTranslation) => {\n    const container = useRef(null);\n    const [pageSize, setPageSize] = useState(10);\n    const [chartPeriod, setChartPeriod] = useState('week')\n    const [chartData, setChartData] = useState<TrendDataItem[]>([])\n    \n    const { accAddr } = store.getState().account\n    const { walletLayer2 } = store.getState().walletLayer2;\n    const { ammMap } = store.getState().amm.ammMap\n    const walletMap = makeWallet()\n    const assetsKeyList = walletMap && walletMap.walletMap ? Object.keys(walletMap.walletMap) : []\n    const assetsDetailList = walletMap && walletMap.walletMap ? Object.values(walletMap.walletMap) : []\n    const assetsList = assetsKeyList.map((key, index) => ({\n        token: key,\n        detail: assetsDetailList[index]\n    }))\n\n    const getUserTotalAssets = useCallback(async (limit: number = 7) => {\n        const userAssets = await LoopringAPI.walletAPI?.getUserAssets({\n            wallet: accAddr,\n            assetType: AssetType.DEX,\n            limit: limit // TODO: minium unit is day, discuss with pm later\n        })\n        if (userAssets && userAssets.userAssets.length && !!userAssets.userAssets.length) {\n            setChartData(userAssets.userAssets.map(o => ({\n                timeStamp: Number(o.createdAt),\n                close: Number(o.amount)\n            })))\n        }\n    }, [accAddr])\n\n    useEffect(() => {\n        if (LoopringAPI && LoopringAPI.walletAPI && walletLayer2) {\n            getUserTotalAssets()\n        }\n    }, [walletLayer2, getUserTotalAssets])\n\n    useEffect(() => {\n        // @ts-ignore\n        let height = container?.current?.offsetHeight;\n        if (height) {\n            setPageSize(Math.floor((height - 120) / 44) - 1);\n        }\n    }, [container, pageSize]);\n\n    const {\n        ShowDeposit,\n        ShowTransfer,\n        ShowWithdraw,\n        ShowResetAccount,\n    } = useModals()\n\n    const { updateWalletLayer1 } = useWalletLayer1()\n\n    let history = useHistory();\n\n    const onShowDeposit = useCallback((token?: any) => {\n        updateWalletLayer1()\n        ShowDeposit(true, {\n            tradeData: {\n                balance: '',\n                belong: token\n            },\n        })\n    }, [ShowDeposit, updateWalletLayer1])\n\n    const onShowTransfer = useCallback((token?: any) => {\n        ShowTransfer(true, {\n            tradeData: {\n                balance: '',\n                belong: token\n            },\n        })\n    }, [ShowTransfer])\n\n    const onShowWithdraw = useCallback((token?: any) => {\n        ShowWithdraw(true, {\n            tradeData: {\n                balance: '',\n                belong: token\n            },\n        })\n    }, [ShowWithdraw])\n\n    const lpTokenJump = useCallback((token: string, type: LpTokenAction) => {\n        if (history) {\n            history.push(`/liquidity/pools/coinPair/${token}?type=${type}`)\n        }\n    }, [history])\n\n    const handleChartPeriodChange = useCallback((event: React.MouseEvent<HTMLElement, MouseEvent>, newValue: string) => {\n        const limit = newValue === 'week' ? 7 : 9999\n        getUserTotalAssets(limit)\n    }, [getUserTotalAssets])\n\n    // const { tokens: tokensAll } = useGetTokens()\n\n    // const tokens = tokensAll?.tokenSymbolMap\n\n    // const { balances } = useGetUserBalances(tokens)\n\n    // const { walletLayer2 } = store.getState().walletLayer2;\n    const { faitPrices } = store.getState().system\n\n    const tokenPriceList = faitPrices ? Object.entries(faitPrices).map(o => ({\n        token: o[ 0 ],\n        detail: o[ 1 ]\n    })) as ITokenInfoItem[] : []\n\n    let jointLPTokenValue = 0\n    assetsList.filter(o => o.token.split('-')[0] === 'LP').forEach(o => {\n        const result = o.token.split('-')\n        result.splice(0, 1, 'AMM')\n        const ammToken = result.join('-')\n        const ammTokenList = Object.keys(ammMap)\n        const tokenValue = ammTokenList.includes(ammToken) && ammMap[ammToken] ? Number(ammMap[ammToken].amountDollar) : 0\n        jointLPTokenValue += tokenValue\n    });\n\n    const doughnutData = assetsList.filter(o => o.token.split('-')[0] !== 'LP').map((tokenInfo) => {\n        const tokenPriceUSDT = tokenInfo.token === 'DAI' ? 1 : Number(tokenPriceList.find(o => o.token === tokenInfo.token)?.detail.price) / Number(tokenPriceList.find(o => o.token === 'USDT')?.detail.price)\n        return ({\n            name: tokenInfo.token,\n            value: Number(volumeToCount(tokenInfo.token, tokenInfo.detail?.detail?.total as string)) * tokenPriceUSDT\n        })\n    })\n    const formattedDoughnutData = [...doughnutData, {\n            name: 'LP-Token',\n            value: jointLPTokenValue\n        }]\n    const AssetTitleProps: AssetTitleProps = {\n        assetInfo: {\n            totalAsset: formattedDoughnutData.map(o => o.value).reduce((prev, next) => {\n                return prev + next\n            }, 0),\n            priceTag: PriceTag.Dollar,\n        },\n        onShowDeposit,\n        onShowTransfer,\n        onShowWithdraw,\n    }\n\n    const assetsRawData = assetsList.map((tokenInfo) => {\n        const tokenPriceUSDT = Number(tokenPriceList.find(o => o.token === tokenInfo.token)?.detail.price) / Number(tokenPriceList.find(o => o.token === 'USDT')?.detail.price)\n        return ({\n            token: {\n                type: tokenInfo.token.split('-')[0] === 'LP' ? TokenType.lp : TokenType.single,\n                value: tokenInfo.token\n            },\n            amount: String(Number(volumeToCount(tokenInfo.token, tokenInfo.detail?.detail.total as string)).toFixed(6)) || EmptyValueTag,\n            available: String(tokenInfo.detail?.count) || EmptyValueTag,\n            locked: String(tokenInfo.detail?.detail.locked) || EmptyValueTag,\n            smallBalance: tokenPriceUSDT * Number(volumeToCount(tokenInfo.token, tokenInfo.detail?.detail.total as string)) < 1,\n        })\n    })\n\n    return (\n        <>\n            <Box>\n                <AssetTitle  {...{\n                    t,\n                    ...rest,\n                    ...AssetTitleProps\n                }} />\n            </Box>\n\n            {/*<div className=\"title\">{t('labelAssetsTitle')}</div>*/}\n\n            <StyledChartWrapper display={'flex'} justifyContent={'space-between'} alignItems={'center'} marginTop={2}>\n                <Paper component={'div'}>\n                    <Typography component=\"span\" color=\"textSecondary\" variant=\"body1\">Asset Distribution</Typography>\n                    <DoughnutChart data={walletLayer2 ? formattedDoughnutData : []}/>\n                </Paper>\n                <Paper component={'div'}>\n                    <Typography component=\"span\" color=\"textSecondary\" variant=\"body1\">Total Assets</Typography>\n                    <ScaleAreaChart type={ChartType.Trend} data={chartData}/>\n                    <StyledBtnGroupWrapper>\n                        <ToggleButtonGroup exclusive size=\"small\" {...{\n                            ...rest,\n                            t,\n                            data: toggleData,\n                            value: chartPeriod,\n                            setValue: setChartPeriod,\n                            onChange: handleChartPeriodChange\n                        }} />\n                    </StyledBtnGroupWrapper>\n                </Paper>\n            </StyledChartWrapper>\n            <StylePaper style={{marginTop: `${unit*2}px`}}>\n                <div className=\"tableWrapper\" ref={container}>\n                    <AssetsTable {...{\n                        rawData: assetsRawData,\n                        pagination: {\n                            pageSize: pageSize\n                        },\n                        showFiliter: true,\n                        onShowDeposit: onShowDeposit,\n                        onShowTransfer: onShowTransfer,\n                        onShowWithdraw: onShowWithdraw,\n                        onLpDeposit: lpTokenJump,\n                        onLpWithdraw: lpTokenJump,\n                        ...rest\n                    }} />\n                </div>\n            </StylePaper>\n        </>\n    )\n})\n\nexport default AssetPanel\n","import { BIG10 } from 'defs/swap_defs'\nimport { toBig } from 'loopring-sdk'\n\nimport store from 'stores'\n\nconst getTokenInfo = (symbol: string) => {\n    const tokenMap = store.getState().tokenMap.tokenMap\n\n    if (!tokenMap || !tokenMap[symbol]) {\n        return undefined\n    }\n\n    return tokenMap[symbol]\n}\n\nexport function StringToNumberWithPrecision(rawVal: string, symbol: string) {\n    \n    if (rawVal === undefined || rawVal === null || rawVal.trim() === '')\n        return 0\n\n    const tokenInfo = getTokenInfo(symbol)\n\n    if (!tokenInfo) {\n        return undefined\n    }\n\n    return parseFloat(toBig(rawVal).toFixed(tokenInfo.precision, 0))\n}\n\nexport function VolToNumberWithPrecision(rawVal: string, symbol: string) {\n\n    const tokenInfo = getTokenInfo(symbol)\n\n    if (!tokenInfo) {\n        return undefined\n    }\n\n    if (rawVal === undefined || rawVal === null || rawVal.trim() === '')\n        return 0\n\n    return parseFloat(toBig(rawVal).div('1e' + tokenInfo.decimals).toFixed(tokenInfo.precision, 0))\n}\n","import React, { useEffect } from 'react'\nimport { TradeTable, TradeFilterTable, RawDataTradeItem } from '@loopring-web/component-lib'\nimport { WithTranslation, withTranslation } from 'react-i18next'\n// import styled from '@emotion/styled'\n// import { Box, Paper } from '@material-ui/core'\nimport store from 'stores'\nimport { LoopringAPI } from 'stores/apis/api'\n// import { volumeToCount } from 'hooks/help'\nimport { StylePaper } from '../../styled'\nimport { TradeTypes } from '@loopring-web/common-resources'\nimport { toBig, Side } from 'loopring-sdk'\nimport { StringToNumberWithPrecision, VolToNumberWithPrecision, } from 'utils/formatter_tool'\n\n// const StylePaper = styled(Box)`\n//   display: flex;\n//   flex-direction: column;\n//   width: 100%;\n//   height: 100%;\n//   flex: 1;\n//   background-color: ${({ theme }) => theme.colorBase.background().default};\n//   border-radius: ${({ theme }) => theme.unit}px;\n//   padding: 20px;\n//   margin-bottom: ${({ theme }) => 2* theme.unit}px;\n//   .title {\n//     font-family: Gilroy-Medium;\n//     font-size: ${({ theme }) => theme.unit * 3}px;\n//     line-height: 19px;\n//   }\n//\n//   .tableWrapper {\n//     display: flex;\n//     flex: 1;\n//     margin-top: 20px;\n//     border: 1px solid ${({ theme }) => theme.colorBase.borderColor};\n//     border-radius: ${({ theme }) => theme.unit}px;\n//     padding: 26px 0;\n//\n//     .rdg {\n//       flex: 1;\n//     }\n//   }\n// ` as typeof Paper;\n//\n// // side: keyof typeof TradeTypes;\n// //     amount: {\n// //         from: {\n// //             key: string;\n// //             value: number|undefined;\n// //         },\n// //         to: {\n// //             key: string;\n// //             value: number|undefined;\n// //         }\n// //     };\n// //     price:{\n// //         key:string\n// //         value:number|undefined,\n// //     }\n// //     // priceDollar: number;\n// //     // priceYuan: number;\n// //     fee: {\n// //         key: string;\n// //         value: number|undefined;\n// //     };\n// //     time: number;\n\nconst TradePanel = withTranslation('common')((rest:WithTranslation<'common'>) => {\n    const container = React.useRef(null);\n    const [pageSize, setPageSize] = React.useState(10);\n    const [originalData, setOriginalData] = React.useState<RawDataTradeItem[]>([])\n\n    const { accountId, apiKey } = store.getState().account;\n    const tokenMap = store.getState().tokenMap.tokenMap\n\n    useEffect(() => {\n        (async function getUserApi () {\n            if (LoopringAPI && LoopringAPI.userAPI && accountId && apiKey && tokenMap) {\n                const userTrades = await LoopringAPI.userAPI.getUserTrades({\n                    accountId,\n                }, apiKey)\n\n                if (userTrades && userTrades.userTrades) {\n                  setOriginalData(userTrades.userTrades.map(o => {\n                    const marketList = o.market.split('-')\n                    // due to AMM case, we cannot use first index\n                    const baseToken = marketList[marketList.length - 2]\n                    const quoteToken = marketList[marketList.length - 1]\n\n                    const amt = toBig(o.volume).times(o.price).toString()\n\n                    return ({\n                      side: o.side === Side.Buy ? TradeTypes.Buy : TradeTypes.Sell ,\n                      price: {\n                        key: baseToken,\n                        value: StringToNumberWithPrecision(o.price, baseToken)\n                      },\n                      fee: {\n                        key: quoteToken,\n                        value: VolToNumberWithPrecision(o.fee, quoteToken)\n                      },\n                      time: Number(o.tradeTime),\n                      amount: {\n                        from: {\n                          key: baseToken,\n                          value: VolToNumberWithPrecision(o.volume, baseToken)\n                        },\n                        to: {\n                          key: quoteToken,\n                          value: VolToNumberWithPrecision(amt, quoteToken)\n                        }\n                      }\n                    })\n                  }))\n                }\n            }\n        })()\n    }, [accountId, apiKey, tokenMap])\n\n    React.useEffect(() => {\n        // @ts-ignore\n        let height = container?.current?.offsetHeight;\n        if (height) {\n            setPageSize(Math.floor((height - 120) / 44) - 2);\n        }\n    }, [container, pageSize]);\n\n    // const txList: any[] = []\n\n    return (\n        <>\n            <StylePaper ref={container}>\n                <div className=\"title\">Trades</div>\n                <div className=\"tableWrapper\">\n                    <TradeTable {...{\n                      rawData: originalData,\n                      pagination: {\n                        pageSize: pageSize\n                      },\n                      showFilter: true,\n                      ...rest}}/>\n                </div>\n            </StylePaper>\n        </>\n    )\n})\n\nexport default TradePanel\n","import React, { useEffect } from 'react'\nimport { RawDataAmmItem, AmmTable, AmmSideTypes } from '@loopring-web/component-lib'\nimport { WithTranslation, withTranslation } from 'react-i18next'\nimport store from 'stores'\nimport { LoopringAPI } from 'stores/apis/api'\nimport { AmmTxType } from 'loopring-sdk'\nimport { StylePaper } from '../../styled'\nimport { volumeToCount } from '../../../hooks/help';\n\nconst AmmPanel = withTranslation('common')((rest:WithTranslation<'common'>) => {\n    const container = React.useRef(null);\n    const [pageSize, setPageSize] = React.useState(10);\n    const [originalData, setOriginalData] = React.useState<RawDataAmmItem[]>([])\n\n    const { accountId,apiKey } = store.getState().account;\n    const { tokenMap } = store.getState().tokenMap\n    \n    const getTokenName = React.useCallback((tokenId?: number) => {\n        if (tokenMap) {\n            const keys = Object.keys(tokenMap)\n            const values = Object.values(tokenMap)\n            const index = values.findIndex(o => o.tokenId === tokenId)\n            if (index > -1) {\n                return keys[index]\n            }\n            return ''\n        }\n        return ''\n    }, [tokenMap])\n\n    const getAmmpoolList = React.useCallback(async () => {\n        if (LoopringAPI.ammpoolAPI && accountId && apiKey) {\n            const ammpool = await LoopringAPI.ammpoolAPI.getUserAmmPoolTxs({\n                accountId,\n            }, apiKey)\n            if (ammpool && ammpool.userAmmPoolTxs) {\n                const result = ammpool.userAmmPoolTxs.map(o => ({\n                    side: o.txType === AmmTxType.JOIN ? AmmSideTypes.Join : AmmSideTypes.Exit,\n                    amount: {\n                        from: {\n                            key: getTokenName(o.poolTokens[0]?.tokenId),\n                            value: String(volumeToCount(getTokenName(o.poolTokens[0]?.tokenId), o.poolTokens[0]?.actualAmount))\n                        },\n                        to: {\n                            key: getTokenName(o.poolTokens[1]?.tokenId),\n                            value: String(volumeToCount(getTokenName(o.poolTokens[1]?.tokenId), o.poolTokens[1]?.actualAmount))\n                        }\n                    },\n                    lpTokenAmount: String(volumeToCount(getTokenName(o.lpToken?.tokenId), o.lpToken?.actualAmount)),\n                    fee: {\n                        key: getTokenName(o.poolTokens[1]?.tokenId),\n                        value: String(volumeToCount(getTokenName(o.poolTokens[1]?.tokenId), o.poolTokens[1]?.feeAmount))\n                    },\n                    time: o.updatedAt\n                }))\n                setOriginalData(result)\n            }\n        }\n    }, [accountId, apiKey, getTokenName])\n\n    useEffect(() => {\n        getAmmpoolList()\n    }, [getAmmpoolList])\n\n    React.useEffect(() => {\n        // @ts-ignore\n        let height = container?.current?.offsetHeight;\n        if (height) {\n            setPageSize(Math.floor((height - 120) / 44) - 2);\n        }\n    }, [container, pageSize]);\n\n    return (\n        <>\n            <StylePaper ref={container}>\n                <div className=\"title\">AMM Records</div>\n                <div className=\"tableWrapper\">\n                    <AmmTable {...{\n                        rawData: originalData,\n                        pagination: {\n                            pageSize: pageSize\n                        },\n                        showFilter: true,\n                        ...rest}}/>\n                </div>\n            </StylePaper>\n        </>\n    )\n})\n\nexport default AmmPanel\n","\nimport React, { useEffect } from 'react'\nimport { OrderHistoryTable, OrderHistoryRawDataItem } from '@loopring-web/component-lib'\nimport { TradeTypes, TradeStatus } from '@loopring-web/common-resources'\nimport { WithTranslation, withTranslation } from 'react-i18next'\nimport store from 'stores'\nimport { LoopringAPI } from 'stores/apis/api'\nimport { volumeToCount } from 'hooks/help'\nimport { StylePaper } from '../../styled'\n\n\nconst OrderPanel = withTranslation('common')((rest: WithTranslation) => {\n    const container = React.useRef(null);\n    const [pageSize, setPageSize] = React.useState(10);\n    const [orderOriginalData, setOrderOriginalData] = React.useState<OrderHistoryRawDataItem[]>([])\n\n    const { accountId,apiKey } = store.getState().account;\n\n    useEffect(() => {\n        (async function getUserApi () {\n            if (LoopringAPI && LoopringAPI.userAPI && accountId && apiKey) {\n                const userOrders = await LoopringAPI.userAPI.getOrders({\n                    accountId,\n                }, apiKey)\n                if (userOrders && Array.isArray(userOrders.orders) && !!userOrders.orders.length) {\n                    \n                    setOrderOriginalData(userOrders.orders.map(o => {\n                        const marketList = o.market.split('-')\n                        // due to AMM case, we cannot use first index\n                        const baseToken = marketList[marketList.length - 2]\n                        const quoteToken = marketList[marketList.length - 1]\n                        const { baseAmount, quoteAmount, baseFilled, quoteFilled } = o.volumes\n\n                        return ({\n                            side: o.side === 'BUY' ? TradeTypes.Buy : TradeTypes.Sell,\n                            amount: {\n                                from: {\n                                    key: baseToken,\n                                    // value: Number(baseAmount)\n                                    value: Number(volumeToCount(baseToken, baseAmount))\n                                },\n                                to: {\n                                    key: quoteToken,\n                                    value: Number(volumeToCount(quoteToken, quoteAmount))\n                                }\n                            },\n                            // average: Number(o.price),\n                            average: Number(volumeToCount(quoteToken, quoteFilled)) / Number(volumeToCount(baseToken, baseFilled)),\n                            filledAmount: {\n                                from: {\n                                    key: baseToken,\n                                    // value: Number(baseFilled)\n                                    value: Number(volumeToCount(baseToken, baseFilled))\n                                },\n                                to: {\n                                    key: quoteToken,\n                                    value: Number(volumeToCount(quoteToken, quoteFilled))\n                                }\n                            },\n                            filledPrice: {\n                                key: quoteToken,\n                                value: Number(o.price)\n                            },\n                            time: o.validity.start * 1000,\n                            status: o.status as unknown as TradeStatus,\n                            detailTable: []\n                        })\n                    }))\n                }\n            }\n        })()\n    }, [accountId, apiKey])\n\n    React.useEffect(() => {\n        // @ts-ignore\n        let height = container?.current?.offsetHeight;\n        if (height) {\n            setPageSize(Math.floor((height - 120) / 44) - 2);\n        }\n    }, [container, pageSize]);\n\n    return (\n        <>\n            <StylePaper ref={container}>\n                <div className=\"title\">Order History</div>\n                <div className=\"tableWrapper\">\n                    <OrderHistoryTable {...{\n                        pagination: {\n                            pageSize: pageSize\n                        },\n                        rawData: orderOriginalData,\n                        showFilter: true,\n                        ...rest\n                    }} />\n                </div>\n            </StylePaper>\n        </>\n    )\n})\n\nexport default OrderPanel\n","import styled from '@emotion/styled';\nimport { Box, Button, Divider, Grid, Switch, Typography } from '@material-ui/core';\nimport React from 'react';\nimport { UpColor, Currency, DropDownIcon } from '@loopring-web/common-resources';\nimport {\n    BtnLanguage,\n    OutlineSelect,\n    OutlineSelectItem, QRCodePanel,\n    TypographyStrong, useSettings\n} from '@loopring-web/component-lib';\nimport { Trans, useTranslation, WithTranslation, withTranslation } from 'react-i18next';\nimport { useTheme } from '@emotion/react';\nimport { LanguageKeys } from '@loopring-web/common-resources';\n\n// const MuiModalStyled = styled(MuiModal)`\n//   //background: ${({theme}) => theme.colorBase.background().secondary};\n//   // .MuiBackdrop-root{\n//   //   z-index: -1;\n//   //   background-color: ${({theme}) => theme.colorBase.background().outline};\n//   // }\n//   display: flex;\n//   align-items: center;\n//   justify-content: center;\n// ` as typeof MuiModal;\n// const BlockStyled = styled(Box)`\n//   ${({theme}) => theme.border.defaultFrame({c_key: 'blur', d_R: 1})};\n//   background: ${({theme}) => theme.colorBase.background().secondary};\n//   max-height: var(--panel-setting-height);\n//   max-width: var(--panel-setting-width);\n//   display: flex;\n//   justify-content: space-around;\n//   align-items: center;\n//   overflow: scroll;\n//   padding: ${({theme}) => theme.unit*8}px\n// `;\n\nconst StyledPaper = styled(Grid)`\n  width: 100%;\n  height: 100%;\n  background-color: ${({theme}) => theme.colorBase.background().default};\n  border-radius: ${({ theme }) => theme.unit}px;\n`\n//${({theme}) => theme.border.defaultFrame({c_key: 'blur', d_R: 1})};\n\nconst StyledSwitch = styled(Switch)(({theme}) => ({\n    \"& .Mui-checked\": {\n        color: theme.colorBase.textPrimary,\n        '& + .MuiSwitch-track.MuiSwitch-track': {\n            border: `solid ${theme.colorBase.success}`,\n        },\n        '& .MuiSwitch-thumb': {\n            backgroundColor: theme.colorBase.success,\n        }\n    },\n    '& .MuiSwitch-track': {\n        border: `solid ${theme.colorBase.error}`,\n        opacity: 1\n    },\n    '& .MuiSwitch-thumb': {\n        backgroundColor: theme.colorBase.error,\n    }\n}));\n\nexport const BtnCurrency = ({t, currency, label, handleChange}: any) => {\n    const [state, setState] = React.useState<string>(currency ? currency : Currency.dollar);\n    const _handleChange = React.useCallback((event: React.ChangeEvent<any>) => {\n        setState(event.target.value);\n        if (handleChange) {\n\n            handleChange(event.target.value)\n        }\n    }, [handleChange])\n    return <OutlineSelect aria-label={t(label)} IconComponent={DropDownIcon}\n                          labelId=\"language-selected\"\n                          id=\"language-selected\"\n                          value={state} autoWidth\n                          onChange={_handleChange}>\n        <OutlineSelectItem value={Currency.dollar}>$ {t('labelUSDollar')}</OutlineSelectItem>\n            <OutlineSelectItem value={Currency.yen}>¥ {t('labelCNYYuan')}</OutlineSelectItem>\n    </OutlineSelect>\n}\n\nconst StyledDivider = styled(Divider)`\n  margin: ${({theme}) => theme.unit}px 0 ${({theme}) => theme.unit}px 0px;\n`\nconst DividerBlock = styled(Divider)`\n  margin: 0;\n  flex: 1;\n  width: 1px;\n  height: ${({theme}) => theme.unit * 3}px;\n  background: ${({theme}) => theme.colorBase.focus};\n`\n\n\n\nexport const SettingPanel = withTranslation(['common', 'layout'])(({t,i18n, ...rest}: & WithTranslation) => {\n    const theme = useTheme();\n    const {setUpColor,setLanguage,setCurrency,currency,upColor} = useSettings()\n    const language = i18n.language;\n    const handleOnLanguageChange = (lang: LanguageKeys) => {\n        setLanguage(lang);\n        i18n.changeLanguage(lang);\n    }\n    const handleOnCurrencyChange = (value: any) => {\n        setCurrency(value);\n    }\n    const handleColorChange = (e:any) => {\n        if(e.target.checked){\n            setUpColor(UpColor.green) ;\n        }else{\n            setUpColor(UpColor.red);\n        }\n    }\n    return <Grid container direction={'column'} justifyContent={'space-between'} alignItems={'stretch'} flexWrap={'nowrap'}>\n        <Typography variant={'h4'} component={'h3'} paddingLeft={2}>{t('labelTitleSecurity')}</Typography>\n        <StyledPaper item xs={12} display={'flex'} flexDirection={'column'} marginY={2}  paddingY={3}>\n            <Box component={'section'} display={'flex'} flexDirection={'column'} marginBottom={1}>\n                <Typography variant={'h5'} component={'h4'} paddingX={3}  marginBottom={1}>{t('labelTitleResetL2Keypair')}</Typography>\n                {/*<StyledDivider/>*/}\n                <Grid container display={'flex'} flexDirection={'row'} justifyContent={'stretch'}\n                      alignItems={'flex-start'} paddingX={3} >\n                    <Grid item xs={8} display={'flex'} flexDirection={'column'}>\n                        <Typography variant={'body1'} component={'p'}>\n                            <Trans i18nKey=\"resetDescription\">\n                                Create a new signing key for layer-2 authentication (no backup needed). This will\n                                <TypographyStrong component={'span'}>cancel all your pending orders</TypographyStrong>.\n                            </Trans>\n                        </Typography>\n                    </Grid>\n                    <Grid item xs={4} display={'flex'} flexDirection={'column'} justifyContent={'space-evenly'}\n                          alignItems={'flex-end'} alignSelf={'stretch'}>\n                        <Button variant={'outlined'} size={'medium'} color={'primary'} disabled={true}>{t('labelBtnReset')}</Button>\n                    </Grid>\n                    <Grid item xs={12} display={'flex'} flexDirection={'row'} justifyContent={'flex-end'}\n                          alignItems={'center'} alignSelf={'stretch'}>\n                        <Typography variant={'body2'} component={'p'}\n                                    paddingTop={1}>{t('labelHadChangPassword', {passDay: '14 hours'})}</Typography>\n                    </Grid>\n\n                </Grid>\n            </Box>\n            <StyledDivider/>\n            <Box component={'section'} display={'flex'} flexDirection={'column'}>\n                <Typography variant={'h5'} component={'h4'} paddingX={3} marginY={1}>{t('labelTitleExportAccount')}</Typography>\n\n                <Grid container display={'flex'} flexDirection={'row'} justifyContent={'stretch'}\n                      alignItems={'flex-start'} paddingX={3} marginBottom={2}>\n                    <Grid item xs={7} display={'flex'} flexDirection={'column'}>\n                        <Typography variant={'body1'} component={'p'}>{t('descriptionExportAccount')}</Typography>\n                    </Grid>\n                    <Grid item xs={5} display={'flex'} flexDirection={'column'} justifyContent={'space-evenly'}\n                          alignItems={'flex-end'} alignSelf={'stretch'}>\n                        <Grid item> <Button variant={'outlined'} size={'medium'}\n                                            color={'primary'} disabled={true}>{t('labelBtnExportAccount')}</Button></Grid>\n                    </Grid>\n                </Grid>\n            </Box>\n        </StyledPaper>\n\n        <Typography variant={'h4'} component={'h3'} paddingLeft={2}>{t('labelTitlePreferences')}</Typography>\n        <StyledPaper item xs={12} display={'flex'} flexDirection={'column'} marginY={2} paddingY={3}>\n            <Box component={'section'} display={'flex'} flexDirection={'column'}>\n                {/*<Typography variant={'h5'} component={'h4'} paddingX={2}>{t('labelTitleLayout')}</Typography>*/}\n                {/*<StyledDivider/>*/}\n                <Grid container display={'flex'} flexDirection={'row'} justifyContent={'stretch'}\n                      alignItems={'flex-start'} paddingX={3} marginBottom={2}>\n                    <Grid item xs={7} display={'flex'} flexDirection={'column'}>\n                        <Typography variant={'body1'} component={'p'}>{t('labelLanguage')}</Typography>\n                    </Grid>\n                    <Grid item xs={5} display={'flex'} flexDirection={'column'} justifyContent={'space-evenly'}\n                          alignItems={'flex-end'} alignSelf={'stretch'}>\n                        <Grid item>\n                            <BtnLanguage {...{\n                                t, ...rest,\n                                language,\n                                label: 'languageSetting',\n                                handleChange: handleOnLanguageChange\n                            }}></BtnLanguage>\n                        </Grid>\n                    </Grid>\n                </Grid>\n                <StyledDivider/>\n                <Grid container display={'flex'} flexDirection={'row'} justifyContent={'stretch'}\n                      alignItems={'flex-start'} paddingX={3} marginY={2}>\n                    <Grid item xs={7} display={'flex'} flexDirection={'column'}>\n                        <Typography variant={'body1'} component={'p'}>{t('labelCurrency')}</Typography>\n                    </Grid>\n                    <Grid item xs={5} display={'flex'} flexDirection={'column'} justifyContent={'space-evenly'}\n                          alignItems={'flex-end'} alignSelf={'stretch'}>\n                        <Grid item>\n                            <BtnCurrency {...{\n                                t, ...rest,\n                                currency,\n                                label: 'currencySetting',\n                                handleChange: handleOnCurrencyChange\n                            }}></BtnCurrency>\n\n                        </Grid>\n                    </Grid>\n                </Grid>\n                <StyledDivider/>\n                <Grid container display={'flex'} flexDirection={'row'} justifyContent={'stretch'}\n                      alignItems={'flex-start'} paddingX={3} marginTop={2}>\n                    <Grid item xs={7} display={'flex'} flexDirection={'column'}>\n                        <Typography variant={'body1'} component={'p'}>{t('labelColors')}</Typography>\n                    </Grid>\n                    <Grid item xs={5} display={'flex'} flexDirection={'row'} justifyContent={'flex-end'}\n                          alignItems={'center'} alignSelf={'stretch'}>\n                        <Typography variant={'body1'} component={'span'} paddingX={2}>\n                            <Trans i18nKey=\"whichColorIsUp\">\n                                <span style={{\n                                    textTransform: 'capitalize',\n                                    color: upColor === UpColor.green ? theme.colorBase.success : theme.colorBase.error\n                                }}>{{up: upColor === UpColor.green ? t('labelgreen') : t('labelred')}} up</span>\n                                and <span style={{\n                                textTransform: 'capitalize',\n                                color: upColor === UpColor.green ? theme.colorBase.error : theme.colorBase.success\n                            }}>{{down: upColor === UpColor.green ? t('labelred') : t('labelgreen')}} down</span>\n                            </Trans>\n                        </Typography>\n                        <StyledSwitch checked={upColor === UpColor.green} color=\"default\"\n                                      onChange={handleColorChange}/>\n                    </Grid>\n                </Grid>\n            </Box>\n\n        </StyledPaper>\n\n    </Grid>\n})\n\n// export const SettingPage = ({open,onClose}: { open:boolean, onClose:(e:any)=>void})=>{\n//     return  <MuiModalStyled\n//         open={open}\n//         onClose={onClose}\n//         aria-labelledby=\"modal-modal-title\"\n//         aria-describedby=\"modal-modal-description\"\n//     >\n//         <BlockStyled >\n//            <SettingPanel/>\n//         </BlockStyled>\n//     </MuiModalStyled>\n// }\n\n\n","import { useRouteMatch } from 'react-router'\n\nimport { Box, Paper } from '@material-ui/core'\nimport {\n    DepositPanel,\n    SubMenu,\n    SubMenuList as BasicSubMenuList,\n} from '@loopring-web/component-lib'\nimport { useTranslation, withTranslation } from 'react-i18next'\nimport styled from '@emotion/styled'\nimport { subMenuLayer2 } from '@loopring-web/common-resources'\n\nimport TxPanel from './TxPanel'\nimport AssetPanel from './AssetPanel'\nimport TradePanel from './TradePanel'\nimport AmmPanel from './AmmPanel'\nimport OrderPanel from './OrderPanel'\nimport { SettingPanel } from '../SettingPage';\nimport store from '../../stores';\nimport { AccountStatus } from '../../state_machine/account_machine_spec';\nimport { useModalProps } from '../../layouts/header/hook';\nimport { Redirect } from 'react-router-dom'\n\nexport const subMenu = subMenuLayer2;\nconst BoxStyle = styled(Box)`\n  ${({theme})=>`\n    background-color: ${theme.colorBase.background().default};\n    width: 100%;\n    min-width:auto;\n    ${theme.border.defaultFrame({c_key: 'blur'})};\n    & > div{\n      background-color:initial;\n      border:0;\n      width:auto;\n      min-width: var(--swap-box-width);\n      max-width: 520px;\n    }\n    `\n  }\n   \n` as typeof Box\n\nconst SubMenuList = withTranslation(['layout','common'], { withRef: true })(BasicSubMenuList);\nexport const Layer2Page = () => {\n\n    let match: any = useRouteMatch(\"/layer2/:item\")\n    const {status: accStatus} = store.getState().account;\n    const {t,...rest} = useTranslation()\n    const selected = match?.params.item ?? 'assets';\n    const {depositProps} = useModalProps()\n\n    return <>  {\n        accStatus === AccountStatus.UNCONNNECTED \n            ? <Redirect to=\"/\" />\n            :\n        accStatus === AccountStatus.NOACCOUNT\n    || accStatus === AccountStatus.DEPOSITING\n    || accStatus === AccountStatus.DEPOSIT_TO_CONFIREM ?\n        <BoxStyle display={'flex'} flexWrap={'wrap'} alignItems={'center'} justifyContent={'center'} alignContent={'flex-start'}>\n            <DepositPanel  {...{\n                ...rest, ...depositProps,\n                title: t('depositTitleAndActive'),\n                description: 'depositAndActiveDescription'\n            }} > </DepositPanel>\n        </BoxStyle>: <>\n            <Box width={'200px'} display={'flex'} justifyContent={'stretch'} marginRight={3} marginBottom={2}>\n                <SubMenu>\n                    <SubMenuList selected={selected} subMenu={subMenu as any} />\n                </SubMenu>\n            </Box>\n            <Box minHeight={420} display={'flex'} alignItems={'stretch'} flexDirection={'column'} marginTop={0} flex={1}>\n                {selected === 'assets' && <AssetPanel />}\n                {selected === 'transactions' && <TxPanel />}\n                {selected === 'trades' && <TradePanel />}\n                {selected === 'ammRecords' && <AmmPanel />}\n                {selected === 'orders' && <OrderPanel />}\n                {selected === 'setting' && <SettingPanel />}\n            </Box>\n        </>\n    }\n        </>\n\n\n\n}\n","import { WithTranslation, withTranslation } from 'react-i18next'\nimport { Box, } from '@material-ui/core'\nimport styled from '@emotion/styled'\n\nimport React from 'react';\nimport { useAmmMapUI } from './hook';\n\nimport { PoolsTable } from '@loopring-web/component-lib';\nimport { AmmPoolActivityRule, LoopringMap } from 'loopring-sdk/dist/defs/loopring_defs';\n\nconst StylePaper = styled(Box)`\n  width: 100%;\n  height: 100%;\n  flex: 1;\n  background-color: ${({theme}) => theme.colorBase.background().default};\n  border-radius: ${({theme}) => theme.unit}px;\n\n  .rdg {\n    flex: 1;\n  }\n\n` as typeof Box;\n\n\nexport const PoolsPanel = withTranslation('common')(<R extends { [ key: string ]: any }, I extends { [ key: string ]: any }>\n({t, ammActivityMap, ...rest}: WithTranslation\n    & {\n    ammActivityMap: LoopringMap<LoopringMap<AmmPoolActivityRule[]>> | undefined }) => {\n    const container = React.useRef(null);\n    const [pageSize, setPageSize] = React.useState(10);\n    const {updateTickersUI, rawData, page} = useAmmMapUI({pageSize});\n\n    React.useEffect(() => {\n        // @ts-ignore\n        let height = container?.current?.offsetHeight;\n        if (height) {\n            setPageSize(Math.floor((height - 120) / 44) - 1);\n        }\n    }, [container, pageSize]);\n\n    const handlePageChange = React.useCallback((page) => {\n        updateTickersUI(page)\n    }, [updateTickersUI]);\n    return (\n        <>\n            <StylePaper display={'flex'} flexDirection={'column'} ref={container}>\n                <PoolsTable {...{\n                    rawData,\n                    handlePageChange,\n                    page,\n                    pagination: {\n                        pageSize\n                    }\n                }} />\n            </StylePaper>\n        </>\n    )\n})\n\n","import { AmmPanel, AmmPanelType } from '@loopring-web/component-lib';\nimport { AmmData, AmmInData, CoinInfo, IBData, WalletMap } from '@loopring-web/common-resources';\nimport { useAmmPanel } from './hooks';\nimport React from 'react';\nimport { Box } from '@material-ui/core';\nimport { AmmPoolSnapshot, TickerData } from 'loopring-sdk';\nimport { TradeBtnStatus } from '@loopring-web/component-lib';\n\nexport const AmmPanelView = <T extends AmmData<C extends IBData<I> ? C : IBData<I>>, I,\n    ACD extends AmmInData<I>,\n    C = IBData<I>>({\n                       pair,\n                       walletMap,\n                       ammType, snapShotData,\n                       ...rest\n                   }: {\n    pair: { coinAInfo: CoinInfo<C> | undefined, coinBInfo: CoinInfo<C> | undefined },\n    snapShotData: { tickerData: TickerData | undefined, ammPoolsBalance: AmmPoolSnapshot | undefined } | undefined\n    walletMap: WalletMap<C>\n    ammType?: keyof typeof AmmPanelType\n} & any) => {\n    const {\n        ammCalcData,\n        ammJoinData,\n        ammExitData,\n        handleJoinAmmPoolEvent,\n        handleExitAmmPoolEvent,\n        onAmmRemoveClick,\n        onAmmAddClick,\n        isJoinLoading,\n        isExitLoading,\n        ammDepositBtnI18nKey,\n        ammWithdrawBtnI18nKey,\n    } = useAmmPanel({\n        pair,\n        snapShotData, walletMap, ammType: ammType ? ammType : AmmPanelType.Deposit\n    })\n\n    // const [index, setIndex] = React.useState(AmmPanelTypeMap[ tabSelected ]);\n    const isLoading = React.useCallback(()=>{\n        \n        if((!snapShotData || !snapShotData.tickerData || !snapShotData.ammPoolsBalance)\n            &&  ammDepositBtnI18nKey === undefined\n            &&  ammWithdrawBtnI18nKey === undefined\n        ) {\n          return true\n        }\n    \n        if(isJoinLoading || isExitLoading){\n            return true   \n            \n        }\n    },[snapShotData,ammWithdrawBtnI18nKey,ammWithdrawBtnI18nKey,isJoinLoading,isExitLoading])\n\n\n    return <> {pair ?\n        <AmmPanel {...{...rest}}\n                  ammDepositData={ammJoinData}\n                  ammWithdrawData={ammExitData}\n                  ammCalcData={ammCalcData}\n                  handleAmmAddChangeEvent={handleJoinAmmPoolEvent}\n                  handleAmmRemoveChangeEvent={handleExitAmmPoolEvent}\n                  onAmmRemoveClick={onAmmRemoveClick}\n                  onAmmAddClick={onAmmAddClick}\n                  tabSelected={ammType ? ammType : AmmPanelType.Deposit}\n                  ammDepositBtnI18nKey={ammDepositBtnI18nKey}\n                  ammWithdrawBtnI18nKey={ammWithdrawBtnI18nKey}\n                  ammDepositBtnStatus={isLoading()?TradeBtnStatus.LOADING:TradeBtnStatus.AVAILABLE}\n                  ammWithdrawBtnStatus={isLoading()?TradeBtnStatus.LOADING:TradeBtnStatus.AVAILABLE}\n\n        /> : <Box width={'var(--swap-box-width)'}/>}\n    </>\n\n}","import React, { useState } from \"react\";\nimport { AmmData, AmmInData, CoinInfo, globalSetup, IBData } from '@loopring-web/common-resources';\nimport { AmmPanelType } from '@loopring-web/component-lib';\nimport { IdMap, useTokenMap } from '../../../stores/token';\nimport { useAmmMap } from '../../../stores/Amm/AmmMap';\nimport { accountStaticCallBack, ammPairInit, bntLabel, btnClickMap, fnType, makeCache } from '../../../hooks/help';\nimport { WalletMap } from '@loopring-web/common-resources';\nimport * as sdk from 'loopring-sdk';\nimport {\n    AmmPoolRequestPatch,\n    AmmPoolSnapshot,\n    ChainId,\n    dumpError400,\n    ExitAmmPoolRequest,\n    GetAmmPoolSnapshotRequest,\n    getExistedMarket,\n    GetNextStorageIdRequest,\n    GetOffchainFeeAmtRequest,\n    JoinAmmPoolRequest,\n    LoopringMap,\n    makeExitAmmPoolRequest,\n    makeJoinAmmPoolRequest,\n    MarketInfo,\n    OffchainFeeInfo,\n    OffchainFeeReqType,\n    TickerData,\n    toBig\n} from 'loopring-sdk';\nimport { useCustomDCEffect } from '../../../hooks/common/useCustomDCEffect';\nimport { useAccount } from '../../../stores/account/hook';\nimport store from \"stores\";\nimport { LoopringAPI } from \"stores/apis/api\";\nimport { debounce } from \"lodash\";\nimport { AccountStatus } from \"state_machine/account_machine_spec\";\nimport { Lv2Account } from \"defs/account_defs\";\nimport { deepClone } from '../../../utils/obj_tools';\nimport { useWalletLayer2 } from \"stores/walletLayer2\";\nimport { myLog } from \"utils/log_tools\";\n\nexport const useAmmPanel = <C extends { [ key: string ]: any }>({\n                                                                    pair,\n                                                                    walletMap,\n                                                                    ammType,\n                                                                    snapShotData,\n                                                                }\n                                                                    : {\n    pair: { coinAInfo: CoinInfo<C> | undefined, coinBInfo: CoinInfo<C> | undefined },\n    snapShotData: { tickerData: TickerData | undefined, ammPoolsBalance: AmmPoolSnapshot | undefined } | undefined\n    walletMap: WalletMap<C>\n    ammType: keyof typeof AmmPanelType\n}) => {\n    // const walletLayer2State = useWalletLayer2();\n    const {coinMap, tokenMap} = useTokenMap();\n    const {ammMap} = useAmmMap();\n    const {account} = useAccount();\n    const {delayAndUpdateWalletLayer2} = useWalletLayer2();\n    const [ammCalcData, setAmmCalcData] = React.useState<AmmInData<C> | undefined>();\n\n    const [ammJoinData, setAmmJoinData] = React.useState<AmmData<IBData<C>, C>>({\n        coinA: {belong: undefined} as unknown as IBData<C>,\n        coinB: {belong: undefined} as unknown as IBData<C>,\n        slippage: 0.001\n    } as AmmData<IBData<C>, C>);\n\n    const [ammExitData, setAmmExitData] = React.useState({\n        coinA: {belong: undefined} as unknown as IBData<C>,\n        coinB: {belong: undefined} as unknown as IBData<C>,\n        slippage: 0.001\n    } as AmmData<IBData<C>, C>);\n\n    const [ammDepositBtnI18nKey, setAmmDepositBtnI18nKey] = React.useState<string | undefined>(undefined);\n    const [ammWithdrawBtnI18nKey, setAmmWithdrawBtnI18nKey] = React.useState<string | undefined>(undefined);\n\n    const initAmmData = React.useCallback(async (pair: any) => {\n        // @ts-ignore\n        let _ammCalcData: Partial<AmmInData<C>> = ammPairInit(\n            {\n                pair,\n                ammType,\n                _ammCalcData: {},\n                tokenMap,\n                coinMap,\n                walletMap: walletMap, //walletLayer2State.walletLayer2,\n                ammMap,\n                tickerData: snapShotData?.tickerData,\n                ammPoolsBalance: snapShotData?.ammPoolsBalance\n            })\n\n        setAmmCalcData({...ammCalcData, ..._ammCalcData} as AmmInData<C>);\n        if (_ammCalcData.myCoinA) {\n            setAmmJoinData({\n                coinA: {..._ammCalcData.myCoinA, tradeValue: undefined} as IBData<C>,\n                coinB: {..._ammCalcData.myCoinB, tradeValue: undefined} as IBData<C>,\n                slippage: 0.001\n            })\n            setAmmExitData({\n                coinA: {..._ammCalcData.lpCoinA, tradeValue: undefined} as IBData<C>,\n                coinB: {..._ammCalcData.lpCoinB, tradeValue: undefined} as IBData<C>,\n                slippage: 0.001\n            })\n        }\n    }, [snapShotData, walletMap, ammJoinData, ammExitData])\n\n    // const [snapShot, setSnapShot] = useState<AmmPoolSnapshot>()\n\n    const [joinRequest, setJoinRequest] = useState<{ ammInfo: any, request: JoinAmmPoolRequest }>()\n\n    const [joinFees, setJoinFees] = useState<LoopringMap<OffchainFeeInfo>>()\n\n    useCustomDCEffect(async () => {\n        if (!LoopringAPI.userAPI || !pair.coinBInfo?.simpleName\n            || store.getState().account.status !== AccountStatus.ACTIVATED) {\n            return\n        }\n\n        const acc = store.getState().account\n\n        const request2: GetOffchainFeeAmtRequest = {\n            accountId: acc.accountId,\n            requestType: OffchainFeeReqType.AMM_JOIN,\n            tokenSymbol: pair.coinBInfo.simpleName as string,\n        }\n\n        const {fees} = await LoopringAPI.userAPI.getOffchainFeeAmt(request2, acc.apiKey)\n        setJoinFees(fees)\n\n        myLog('joinFees:', fees)\n\n    }, [LoopringAPI.userAPI, pair.coinBInfo?.simpleName, store.getState().account.status])\n\n    // const handler = React.useCallback(async () =>,[])\n    const handlerJoinInDebounce = React.useCallback(debounce(async (data, type, joinFees) => {\n\n        // {\n            myLog('handlerJoinInDebounce', data, type);\n\n        if (!tokenMap || !data.coinA.belong || !data.coinB.belong) {\n            return\n        }\n\n        const isAtoB = type === 'coinA'\n\n        const acc: Lv2Account = store.getState().account\n\n        const {idIndex, marketArray, marketMap,} = store.getState().tokenMap\n\n        const {ammMap} = store.getState().amm.ammMap\n\n        const {market, amm} = getExistedMarket(marketArray, data.coinA.belong as string,\n            data.coinB.belong as string)\n\n        if (!market || !amm || !marketMap) {\n            return\n        }\n\n        const marketInfo: MarketInfo = marketMap[ market ]\n\n        const ammInfo: any = ammMap[ amm as string ]\n\n        const request1: GetAmmPoolSnapshotRequest = {\n            poolAddress: ammInfo.address\n        }\n\n        const response = await LoopringAPI.ammpoolAPI?.getAmmPoolSnapshot(request1)\n\n        if (!response) {\n            return\n        }\n\n        const {ammPoolSnapshot} = response\n\n        const coinA = tokenMap[ data.coinA.belong as string ]\n        const coinB = tokenMap[ data.coinB.belong as string ]\n\n        const coinA_TV = ammPoolSnapshot.pooled[ 0 ]\n        const coinB_TV = ammPoolSnapshot.pooled[ 1 ]\n\n        const covertVal = data.coinA.tradeValue ? sdk.toBig(data.coinA.tradeValue)\n            .times('1e' + isAtoB ? coinA.decimals : coinB.decimals).toFixed(0, 0) : '0'\n        const {output, ratio} = sdk.ammPoolCalc(covertVal, isAtoB, coinA_TV, coinB_TV)\n        const rawA = data.coinA.tradeValue ? data.coinA.tradeValue.toString() : 0;\n        const rawB = data.coinB.tradeValue ? data.coinB.tradeValue.toString() : 0;\n        const rawVal = isAtoB ? rawA : rawB;\n\n        const {request} = makeJoinAmmPoolRequest(rawVal,\n            isAtoB, '0.001', acc.accAddr, joinFees as LoopringMap<OffchainFeeInfo>,\n            ammMap[ amm ], response.ammPoolSnapshot, tokenMap as any, idIndex as IdMap, 0, 0)\n\n        if (isAtoB) {\n            data.coinB.tradeValue = parseFloat(toBig(request.joinTokens.pooled[ 1 ].volume)\n                .div('1e' + coinB.decimals).toFixed(marketInfo.precisionForPrice))\n        } else {\n            data.coinA.tradeValue = parseFloat(toBig(request.joinTokens.pooled[ 0 ].volume)\n                .div('1e' + coinA.decimals).toFixed(marketInfo.precisionForPrice))\n        }\n\n        setAmmJoinData({\n            coinA: data.coinA as IBData<C>,\n            coinB: data.coinB as IBData<C>,\n            slippage: 0.001\n        })\n\n        setJoinRequest({\n            ammInfo,\n            request\n        })\n        // }\n\n    }, globalSetup.wait), [joinFees])\n\n    const handleJoinAmmPoolEvent = React.useCallback(async (data: AmmData<IBData<C>>, type: 'coinA' | 'coinB') => {\n        await handlerJoinInDebounce(data, type, joinFees)\n    }, [joinFees]);\n\n    const [exitRequest, setExitRequest] = useState<{ rawVal: '', ammInfo: any, request: ExitAmmPoolRequest }>()\n\n    const [exitFees, setExitfees] = useState<LoopringMap<OffchainFeeInfo>>()\n\n    useCustomDCEffect(async () => {\n        if (!LoopringAPI.userAPI || !pair.coinBInfo?.simpleName\n            || store.getState().account.status !== AccountStatus.ACTIVATED) {\n            return\n        }\n\n        const acc = store.getState().account\n\n        const request2: GetOffchainFeeAmtRequest = {\n            accountId: acc.accountId,\n            requestType: OffchainFeeReqType.AMM_EXIT,\n            tokenSymbol: pair.coinBInfo.simpleName as string,\n        }\n\n        const {fees} = await LoopringAPI.userAPI.getOffchainFeeAmt(request2, acc.apiKey)\n\n        myLog('setExitfees:', fees)\n\n        setExitfees(fees)\n\n    }, [LoopringAPI.userAPI, pair.coinBInfo?.simpleName, store.getState().account.status])\n\n    // const handler = React.useCallback(async () =>,[])\n    const handleExitInDebounce = React.useCallback(debounce(async (data, type, exitFees) => {\n\n        myLog('handleExitInDebounce', data, type);\n\n        if (!tokenMap || !data.coinA.belong || !data.coinB.belong) {\n            return\n        }\n\n        const isAtoB = type === 'coinA'\n\n        const acc: Lv2Account = store.getState().account\n\n        const {idIndex, marketArray, marketMap,} = store.getState().tokenMap\n\n        const {ammMap} = store.getState().amm.ammMap\n\n        const {market, amm} = getExistedMarket(marketArray, data.coinA.belong as string,\n            data.coinB.belong as string)\n\n        if (!market || !amm || !marketMap) {\n            return\n        }\n\n        const marketInfo: MarketInfo = marketMap[ market ]\n\n        const ammInfo: any = ammMap[ amm as string ]\n\n        const request1: GetAmmPoolSnapshotRequest = {\n            poolAddress: ammInfo.address\n        }\n\n        const response = await LoopringAPI.ammpoolAPI?.getAmmPoolSnapshot(request1)\n\n        if (!response) {\n            return\n        }\n\n        const {ammPoolSnapshot} = response\n\n        const coinA = tokenMap[ data.coinA.belong as string ]\n        const coinB = tokenMap[ data.coinB.belong as string ]\n\n        const coinA_TV = ammPoolSnapshot.pooled[ 0 ]\n        const coinB_TV = ammPoolSnapshot.pooled[ 1 ]\n\n        const covertVal = data.coinA.tradeValue ? sdk.toBig(data.coinA.tradeValue)\n            .times('1e' + isAtoB ? coinA.decimals : coinB.decimals).toFixed(0, 0) : '0'\n        const {output, ratio} = sdk.ammPoolCalc(covertVal, isAtoB, coinA_TV, coinB_TV)\n\n        const rawVal = isAtoB ? data.coinA.tradeValue.toString() : data.coinB.tradeValue.toString()\n\n        const {request} = makeExitAmmPoolRequest(rawVal, isAtoB, '0.001', acc.accAddr, exitFees as LoopringMap<OffchainFeeInfo>,\n            ammMap[ amm ], response.ammPoolSnapshot, tokenMap as any, idIndex as IdMap, 0)\n\n        if (isAtoB) {\n            data.coinB.tradeValue = parseFloat(toBig(request.exitTokens.unPooled[ 1 ].volume)\n                .div('1e' + coinB.decimals).toFixed(marketInfo.precisionForPrice))\n        } else {\n            data.coinA.tradeValue = parseFloat(toBig(request.exitTokens.unPooled[ 0 ].volume)\n                .div('1e' + coinA.decimals).toFixed(marketInfo.precisionForPrice))\n        }\n\n        setAmmExitData({\n            coinA: data.coinA as IBData<C>,\n            coinB: data.coinB as IBData<C>,\n            slippage: 0.001\n        })\n\n        setExitRequest({\n            rawVal,\n            ammInfo,\n            request,\n        })\n        // }\n\n    }, globalSetup.wait), [exitFees])\n\n    const handleExitAmmPoolEvent = React.useCallback(async (data: AmmData<IBData<C>>, type: 'coinA' | 'coinB') => {\n        await handleExitInDebounce(data, type, exitFees)\n    }, [exitFees]);\n    // console.log(account.status)\n    useCustomDCEffect(() => {\n\n        const label: string | undefined = accountStaticCallBack(bntLabel)\n        setAmmDepositBtnI18nKey(label);\n        setAmmWithdrawBtnI18nKey(label)\n    }, [account.status, bntLabel])\n\n    const [isJoinLoading, setJoinLoading] = useState(false)\n\n    const [isExitLoading, setExitLoading] = useState(false)\n\n    const addToAmmCalculator = React.useCallback(async function (props\n    ) {\n\n        setJoinLoading(true);\n        if (!LoopringAPI.ammpoolAPI || !LoopringAPI.userAPI || !joinRequest) {\n            myLog(' onAmmJoin ammpoolAPI:', LoopringAPI.ammpoolAPI,\n                'joinRequest:', joinRequest)\n            setJoinLoading(true);\n            return\n        }\n\n        //todo add loading\n\n        const acc: Lv2Account = store.getState().account\n\n        const {ammInfo, request} = joinRequest\n\n        const patch: AmmPoolRequestPatch = {\n            chainId: store.getState().system.chainId as ChainId,\n            ammName: ammInfo.__rawConfig__.name,\n            poolAddress: ammInfo.address,\n            eddsaKey: acc.eddsaKey\n        }\n\n        try {\n\n            const request2: GetNextStorageIdRequest = {\n                accountId: acc.accountId,\n                sellTokenId: request.joinTokens.pooled[ 0 ].tokenId as number\n            }\n            const storageId0 = await LoopringAPI.userAPI.getNextStorageId(request2, acc.apiKey)\n\n            const request_1: GetNextStorageIdRequest = {\n                accountId: acc.accountId,\n                sellTokenId: request.joinTokens.pooled[ 1 ].tokenId as number\n            }\n            const storageId1 = await LoopringAPI.userAPI.getNextStorageId(request_1, acc.apiKey)\n\n            request.storageIds = [storageId0.offchainId, storageId1.offchainId]\n            setAmmJoinData({\n                ...ammJoinData, ...{\n                    coinA: {...ammJoinData.coinA, tradeValue: 0},\n                    coinB: {...ammJoinData.coinB, tradeValue: 0},\n                }\n            })\n            const response = await LoopringAPI.ammpoolAPI.joinAmmPool(request, patch, acc.apiKey)\n\n            myLog('join ammpool response:', response)\n\n            await delayAndUpdateWalletLayer2();\n            setJoinLoading(false);\n\n        } catch (reason) {\n            setJoinLoading(false);\n            dumpError400(reason)\n        }\n        if (props.__cache__) {\n            makeCache(props.__cache__)\n        }\n    }, [joinRequest, ammJoinData])\n\n    const onAmmDepositClickMap: typeof btnClickMap = Object.assign(deepClone(btnClickMap), {\n        [ fnType.ACTIVATED ]: [addToAmmCalculator]\n    })\n    const onAmmAddClick = React.useCallback((props: AmmData<IBData<C>>) => {\n        accountStaticCallBack(onAmmDepositClickMap, [props])\n    }, [onAmmDepositClickMap]);\n\n    const removeAmmCalculator = React.useCallback(async function (props\n    ) {\n        setExitLoading(true);\n        //TODO: onExit\n        myLog('removeAmmCalculator props:', props)\n\n        // const { exitRequest } = props\n\n        if (!LoopringAPI.ammpoolAPI || !LoopringAPI.userAPI || !exitRequest) {\n            myLog(' onExit ammpoolAPI:', LoopringAPI.ammpoolAPI,\n                'exitRequest:', exitRequest)\n            setExitLoading(false);\n            return\n        }\n\n        const acc: Lv2Account = store.getState().account\n\n        const {ammInfo, request} = exitRequest\n\n        const patch: AmmPoolRequestPatch = {\n            chainId: store.getState().system.chainId as ChainId,\n            ammName: ammInfo.__rawConfig__.name,\n            poolAddress: ammInfo.address,\n            eddsaKey: acc.eddsaKey\n        }\n\n        const burnedReq: GetNextStorageIdRequest = {\n            accountId: acc.accountId,\n            sellTokenId: request.exitTokens.burned.tokenId as number\n        }\n        const storageId0 = await LoopringAPI.userAPI.getNextStorageId(burnedReq, acc.apiKey)\n\n        request.storageId = storageId0.offchainId\n\n        try {\n\n            myLog('exit req:', request)\n            setAmmExitData({\n                ...ammExitData, ...{\n                    coinA: {...ammExitData.coinA, tradeValue: 0},\n                    coinB: {...ammExitData.coinB, tradeValue: 0},\n                }\n            })\n            const response = await LoopringAPI.ammpoolAPI.exitAmmPool(request, patch, acc.apiKey)\n\n            myLog('exit ammpool response:', response)\n\n            await delayAndUpdateWalletLayer2()\n            setExitLoading(false);\n        } catch (reason) {\n            dumpError400(reason)\n            setExitLoading(false);\n        }\n\n        // if (props.__cache__) {\n        //     makeCache(props.__cache__)\n        // }\n\n    }, [exitRequest, ammExitData])\n\n    const removeAmmClickMap: typeof btnClickMap = Object.assign(deepClone(btnClickMap), {\n        [ fnType.ACTIVATED ]: [removeAmmCalculator]\n    })\n\n    const onAmmRemoveClick = React.useCallback((props: AmmData<IBData<C>>) => {\n\n        myLog('onAmmRemoveClick, exitRequest:', exitRequest, ' ammExitData:', ammExitData)\n        accountStaticCallBack(removeAmmClickMap, [props])\n    }, [exitRequest, ammExitData]);\n\n    React.useEffect(() => {\n        if (snapShotData) {\n            initAmmData(pair)\n        }\n    }, [snapShotData, pair, walletMap]);\n\n\n    return {\n        ammCalcData,\n        ammJoinData,\n        ammExitData,\n        isJoinLoading,\n        isExitLoading,\n        handleJoinAmmPoolEvent,\n        handleExitAmmPoolEvent,\n        onAmmRemoveClick,\n        onAmmAddClick,\n        ammDepositBtnI18nKey,\n        ammWithdrawBtnI18nKey,\n    }\n}","import React from \"react\";\nimport { AmmActivity, CoinInfo, TradeFloat, WalletMap } from \"@loopring-web/common-resources\";\nimport { useTokenMap } from \"stores/token\";\nimport { useRouteMatch } from 'react-router';\nimport { AmmDetailStore, useAmmMap } from '../../../stores/Amm/AmmMap';\nimport { useWalletLayer2 } from '../../../stores/walletLayer2';\nimport { makeTickView, makeWallet, pairDetailBlock, WalletMapExtend } from '../../../hooks/help';\nimport { AmmPoolSnapshot, AmmUserRewardMap, getExistedMarket, TickerData } from 'loopring-sdk';\nimport { deepClone } from '../../../utils/obj_tools';\nimport { getUserAmmTransaction, makeMyAmmMarketArray } from '../../../hooks/help/marketTable';\nimport { AmmRecordRow } from '@loopring-web/component-lib';\nimport { AmmPoolActivityRule, LoopringMap } from 'loopring-sdk/dist/defs/loopring_defs';\nimport { MyAmmLP } from '@loopring-web/common-resources';\nimport { useSystem } from '../../../stores/system';\nimport { makeMyAmmWithSnapshot } from '../../../hooks/help/makeUIAmmActivityMap';\nimport store from '../../../stores';\nimport { useUserRewards } from '../../../stores/userRewards';\nimport { LoopringAPI } from 'stores/apis/api';\nimport { TradingInterval } from 'loopring-sdk'\n\nconst makeAmmDetailExtendsActivityMap = ({ammMap, coinMap, ammActivityMap, ammKey}: any) => {\n\n    if (ammMap && coinMap) {\n        let ammDetail = deepClone(ammMap[ ammKey as string ]);\n        const ammActivity = ammActivityMap [ ammKey as string ];\n\n        if (ammDetail && ammDetail.coinA) {\n            ammDetail.myCoinA = coinMap[ ammDetail.coinA ];\n            ammDetail.myCoinB = coinMap[ ammDetail.coinB ];\n            ammDetail[ 'activity' ] = ammActivity ? ammActivity : {};\n        }\n        return ammDetail;\n    }\n}\ntype PgAmmDetail<C extends { [ key: string ]: any }> = AmmDetailStore<C> & {\n    myCoinA: CoinInfo<C>,\n    myCoinB: CoinInfo<C>,\n    activity: AmmActivity<C> | undefined\n}\n\nexport type ammHistoryItem = {\n    close: number;\n    timeStamp: number;\n}\n\nexport const useCoinPair = <C extends { [ key: string ]: any }>(ammActivityMap: LoopringMap<LoopringMap<AmmPoolActivityRule[]>>) => {\n    const match: any = useRouteMatch(\"/liquidity/pools/coinPair/:symbol\")\n    const {coinMap, tokenMap, marketArray} = useTokenMap();\n    const {faitPrices} = useSystem();\n    const ammMapState = useAmmMap();\n    const useUserRewardsState = useUserRewards()\n\n    // const {account} = useAccount();\n\n\n    const {ammMap, getAmmMap} = ammMapState;\n\n    // const {ammMap,updateAmmMap} = useAmmMap();\n    const walletLayer2State = useWalletLayer2();\n    const [walletMap, setWalletMap] = React.useState<WalletMapExtend<C> | undefined>(undefined);\n    // const [ammRecordArray, setAmmRecordArray] = React.useState<AmmRecordRow<C>[]>([]);\n    const [ammMarketArray, setAmmMarketArray] = React.useState<AmmRecordRow<C>[]>([]);\n\n\n    const [myAmmMarketArray, setMyAmmMarketArray] = React.useState<AmmRecordRow<C>[]>([]);\n    const [ammUserRewardMap, setAmmUserRewardMap] = React.useState<AmmUserRewardMap | undefined>(undefined);\n    const [snapShotData, setSnapShotData] = React.useState<{\n        tickerData: TickerData | undefined\n        ammPoolsBalance: AmmPoolSnapshot | undefined\n    } | undefined>(undefined);\n\n    const [myAmm, setMyAmm] = React.useState<MyAmmLP<C>>(\n        {\n            feeA: 0,\n            feeB: 0,\n            feeDollar: 0,\n            feeYuan: 0,\n            reward: 0,\n            rewardToken: undefined as any,\n            balanceA: 0,\n            balanceB: 0,\n            balanceYuan: 0,\n            balanceDollar: 0,\n        })\n    // const [ammPoolsBalance, setAmmpoolsbalance] = React.useState<AmmPoolSnapshot|undefined>(undefined);\n    const [coinPairInfo, setCoinPairInfo] = React.useState<PgAmmDetail<C>>({\n        myCoinA: undefined,\n        myCoinB: undefined,\n        activity: undefined,\n        totalRewards: undefined,\n        amountDollar: undefined,\n        amountYuan: undefined,\n        totalLPToken: undefined,\n        totalA: undefined,\n        totalB: undefined,\n        rewardToken: undefined,\n        rewardValue: undefined,\n        feeA: undefined,\n        feeB: undefined,\n        isNew: undefined,\n        isActivity: undefined,\n        APY: undefined\n    } as unknown as PgAmmDetail<C>);\n    const [tradeFloat, setTradeFloat] = React.useState<TradeFloat | undefined>(undefined);\n    const [pair, setPair] = React.useState<{ coinAInfo: CoinInfo<C> | undefined, coinBInfo: CoinInfo<C> | undefined }>({\n        coinAInfo: undefined,\n        coinBInfo: undefined,\n    });\n    const [pairHistory, setPairHistory] = React.useState<ammHistoryItem[]>([])\n\n    const walletLayer2DoIt = React.useCallback((market) => {\n        const {walletMap: _walletMap} = makeWallet();\n\n        setWalletMap(_walletMap as WalletMapExtend<any>)\n        if (_walletMap) {\n            getUserAmmTransaction()?.then((marketTrades) => {\n                let _myTradeArray = makeMyAmmMarketArray(market, marketTrades)\n                setMyAmmMarketArray(_myTradeArray ? _myTradeArray : [])\n            })\n        }\n        return _walletMap\n    }, [makeWallet, getUserAmmTransaction, makeMyAmmMarketArray, marketArray, pair])\n\n    const getPairList = React.useCallback(async () => {\n        if (LoopringAPI.exchangeAPI && coinPairInfo.coinA && coinPairInfo.coinB) {\n            const { myCoinA, myCoinB } = coinPairInfo\n            const market = `${myCoinA?.name}-${myCoinB?.name}`\n            const ammList = await LoopringAPI.exchangeAPI.getMixCandlestick({\n                market: market,\n                interval: TradingInterval.d1,\n                limit: 30\n            })\n            const formattedPairHistory = ammList.candlesticks.map(o => ({\n                close: o.close,\n                timeStamp: o.timestamp\n            })).reverse()\n            setPairHistory(formattedPairHistory)\n        }\n    }, [coinPairInfo])\n\n    React.useEffect(() => {\n        getPairList()\n    }, [getPairList])\n\n    React.useEffect(() => {\n        const coinKey = match?.params.symbol ?? undefined;\n        let _tradeFloat: Partial<TradeFloat> = {}\n        const [, coinA, coinB] = coinKey.match(/(\\w+)-(\\w+)/i)\n        let {\n            amm,\n            market\n        } = getExistedMarket(marketArray, coinA, coinB);\n\n        const _coinPairInfo = makeAmmDetailExtendsActivityMap({ammMap, coinMap, ammActivityMap, ammKey: amm})\n        setCoinPairInfo(_coinPairInfo ? _coinPairInfo : {})\n\n        if (coinMap) {\n            setPair({\n                coinAInfo: coinMap[ coinA ],\n                coinBInfo: coinMap[ coinB ]\n            })\n        }\n\n        // let _walletMap: WalletMapExtend<C>|undefined = undefined\n        if (walletLayer2State.walletLayer2) {\n            walletLayer2DoIt(market);\n        }\n\n        if (amm && market && ammMap) {\n            //TODO should add it into websocket\n            getAmmMap();\n            let apiList = [\n                pairDetailBlock({coinKey: market, ammKey: amm, ammMap}),\n                // LoopringAPI.ammpoolAPI.getAmmPoolSnapshot({poolAddress: ammMap[ ammKey ].address}),\n                // LoopringAPI.exchangeAPI.getMixTicker({market: coinKey})])\n            ];\n            // @ts-ignore\n            Promise.all([...apiList]).then(\n                ([{ammPoolsBalance, tickMap}\n                     //  ,ammUserRewardMap\n                 ]: any[]) => {\n                    if (tokenMap) {\n                        const _snapShotData = {\n                            tickerData: tickMap[ market ],\n                            ammPoolsBalance: ammPoolsBalance,\n                        }\n                        _tradeFloat = makeTickView(tickMap[ market ] ? tickMap[ market ] : {})\n                        setTradeFloat(_tradeFloat as TradeFloat);\n                        setCoinPairInfo({..._coinPairInfo})\n                        setSnapShotData(_snapShotData)\n\n                    }\n                }).catch((error) => {\n                console.log(error);\n                throw  Error\n            })\n        }\n\n    }, []);\n\n    React.useEffect(() => {\n        const {market} = getExistedMarket(marketArray, pair.coinAInfo?.simpleName as string, pair.coinBInfo?.simpleName as string);\n        if (market && snapShotData && snapShotData.ammPoolsBalance) {\n            switch (walletLayer2State.status) {\n                case \"ERROR\":\n                    walletLayer2State.statusUnset();\n                    break;\n                case \"DONE\":\n                    walletLayer2State.statusUnset();\n                    const _walletMap = walletLayer2DoIt(market);\n                    const _myAmm: MyAmmLP<C> = makeMyAmmWithSnapshot(market, _walletMap, ammUserRewardMap, snapShotData);\n                    setMyAmm(_myAmm)\n                    break;\n                default:\n                    break;\n\n            }\n        }\n\n    }, [walletLayer2State.status, ammUserRewardMap])\n\n    React.useEffect(() => {\n        const {market} = getExistedMarket(marketArray, pair.coinAInfo?.simpleName as string, pair.coinBInfo?.simpleName as string);\n        if (market) {\n            switch (useUserRewardsState.status) {\n                case \"ERROR\":\n                    useUserRewardsState.statusUnset();\n                    break;\n                case \"DONE\":\n                    // getAmmPoolUserRewards().then((ammUserRewardMap)=>{\n                    const {userRewardsMap} = store.getState().userRewardsMap\n                    setAmmUserRewardMap(userRewardsMap)\n                    const _myAmm: MyAmmLP<C> = makeMyAmmWithSnapshot(market, walletMap, ammUserRewardMap, snapShotData);\n                    setMyAmm(_myAmm);\n                    break;\n                default:\n                    break;\n\n            }\n        }\n\n    }, [useUserRewardsState.status])\n\n    React.useEffect(() => {\n        if (ammMapState.status === \"ERROR\") {\n            ammMapState.statusUnset();\n        } else if (ammMapState.status === \"DONE\") {\n            ammMapState.statusUnset();\n            if (ammMapState.ammMap && pair.coinAInfo?.simpleName && pair.coinBInfo?.simpleName) {\n                const _coinPairInfo = makeAmmDetailExtendsActivityMap(\n                    {\n                        ammMap,\n                        coinMap,\n                        ammActivityMap,\n                        ammKey: 'AMM-' + pair.coinAInfo.simpleName + pair.coinBInfo.simpleName\n                    })\n                setCoinPairInfo({\n                    ...coinPairInfo, ..._coinPairInfo,\n                    tradeFloat: coinPairInfo.tradeFloat\n                })\n\n            }\n\n            // tokenState.statusUnset()\n            // setState('DONE');\n        }\n    }, [ammMapState.status, ammMapState.ammMap, pair, ammActivityMap, tokenMap])\n\n\n    return {\n        walletMap,\n        myAmm,\n        // tickerData,\n        coinPairInfo,\n        snapShotData,\n        // ammPoolsBalance,\n        pair,\n        tradeFloat,\n        ammMarketArray,\n        myAmmMarketArray,\n        pairHistory,\n    }\n}","import React from 'react';\nimport { WithTranslation, withTranslation } from 'react-i18next';\nimport { AmmRecordTable, TradeTitle, useImage, useSettings, ScaleAreaChart, ChartType } from '@loopring-web/component-lib';\nimport {\n    Currency,\n    EmptyValueTag,\n    getThousandFormattedNumbers,\n    PriceTag,\n    unit\n} from '@loopring-web/common-resources';\nimport { Avatar, Box, Breadcrumbs, Grid, Link, Typography } from '@material-ui/core';\nimport { AmmPanelView } from '../AmmPanel';\nimport moment from 'moment';\nimport styled from '@emotion/styled/';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\n\nimport { useCoinPair } from './hooks';\nimport { AmmPoolActivityRule, LoopringMap } from 'loopring-sdk/dist/defs/loopring_defs';\nimport { StylePaper } from 'pages/styled';\n\n\n//******************** page code ************************//\n//  ${({theme}) => theme.border.defaultFrame({c_key: 'blur'})};\nconst BoxStyled = styled(Box)`\n    flex: 1;\n    background-color: ${({theme}) => theme.colorBase.background().default};\n    border-radius: ${({theme}) => theme.unit}px;\n    padding: ${({theme}) => theme.unit*2}px;\n    height: 120px;\n    // min-width: 160px;\n    max-width: 210px;\n    & .MuiAvatar-root {\n        height: ${({theme}) => theme.fontDefault.h4};\n        width: ${({theme}) => theme.fontDefault.h4};\n    }\n`;\n\nconst BoxTopStyled = styled(Box)`\n  background-color: ${({theme}) => theme.colorBase.background().default};\n  border-radius: ${({theme}) => theme.unit}px;\n  padding: ${({theme}) => theme.unit*2}px;\n  width: var(--swap-box-width);\n  box-sizing: border-box;\n  //height: 120px;\n  //min-width: 160px;\n  // & .MuiAvatar-root {\n  //   height: ${({theme}) => theme.fontDefault.h4};\n  //   width: ${({theme}) => theme.fontDefault.h4};\n  // }\n`;\n// const StyleWrapper = styled(Box)`\n//   //position: relative;\n//   //width: 100%;\n//   background-color: ${({theme}) => theme.colorBase.background().default};\n//   border-radius: ${({theme}) => theme.unit}px;\n// ` as typeof Grid\n\n\nconst applyProps = (index: number) => {\n    return {\n        id: `simple-tab-${index}`,\n        'aria-controls': `tabpanel-${index}`,\n    }\n}\n\nexport const CoinPairPanel = withTranslation('common')(<R extends { [ key: string ]: any }, I extends { [ key: string ]: any }>\n({t, ammActivityMap, ...rest}:\n     WithTranslation & { ammActivityMap: LoopringMap<LoopringMap<AmmPoolActivityRule[]>> | undefined } & any) => {    //ActivityMap<I, I>\n    //TODO: checkRouter\n\n    const {currency} = useSettings();\n    const {\n        tradeFloat,\n        snapShotData,\n        pair,\n        coinPairInfo,\n        walletMap,\n        ammMarketArray,\n        myAmmMarketArray,\n        myAmm,\n        pairHistory,\n    } = useCoinPair({ammActivityMap});\n    const [tabIndex, setTabIndex] = React.useState<0 | 1>(0);\n    const [page, setPage] = React.useState(rest?.page ? rest.page : 1);\n    const handleChange = (event: any, newValue: 0 | 1) => {\n        setTabIndex(newValue);\n        setPage(1);\n    }\n    const _handlePageChange = React.useCallback((page: number) => {\n        setPage(page);\n    }, [])\n    const sellIconHasLoaded = useImage(coinPairInfo.myCoinA?.icon ? coinPairInfo.myCoinA?.icon : '').hasLoaded;\n    const buyIconHasLoaded = useImage(coinPairInfo.myCoinB?.icon ? coinPairInfo.myCoinB?.icon : '').hasLoaded;\n\n    return <>\n\n        <Grid container>\n            <Grid item xs={8}>\n                <Breadcrumbs aria-label=\"breadcrumb\">\n                    <Link color=\"textSecondary\" href=\"/#/liquidity/pools\">\n                        {t('labelAmmList')}\n                    </Link>\n                    <Typography color={'textSecondary'} display={'flex'} alignItems={'center'}\n                                justifyContent={'center'}\n                    >{pair.coinAInfo?.simpleName}-{pair.coinBInfo?.simpleName}</Typography>\n                </Breadcrumbs>\n                <Grid item xs={7} marginTop={2}>\n                    <TradeTitle {...{\n                        ...rest, t,\n                        ...pair,\n                        tradeFloat,\n                        isNew: false\n                    }}></TradeTitle>\n                </Grid>\n            </Grid>\n            <Grid item xs={4} alignItems={'center'} justifyContent={'flex-end'} display={'flex'}>\n                {/*{typeof coinPairInfo.isActivity === 'undefined'? '':*/}\n                        <BoxTopStyled paddingY={3} paddingX={1 / 2 * 5} display={'flex'}\n                                      flexDirection={'column'}>\n                            <Box display={'flex'} flexDirection={'row'} justifyContent={'space-between'}>\n                                <Typography display={'flex'} flexDirection={'column'} component={'div'}>\n                                    <Typography variant={'body2'} component={'h5'} color={'textSecondary'}>\n                                        {t('labelReward')}\n                                    </Typography>\n                                    <Typography variant={'body1'} component={'span'} color={'textPrimary'}>\n                                        {typeof coinPairInfo.isActivity === 'undefined' ? EmptyValueTag : <>\n                                            <Typography\n                                                component={'span'}>{coinPairInfo.activity ? getThousandFormattedNumbers(coinPairInfo.activity.totalRewards) : EmptyValueTag} </Typography>\n                                            <Typography\n                                                component={'span'}>{coinPairInfo.activity?.rewardToken?.simpleName}</Typography>\n                                        </>}\n                                    </Typography>\n                                </Typography>\n                                <Typography display={'flex'} flexDirection={'column'} alignItems={'flex-end'}\n                                            component={'div'}>\n                                    <Typography variant={'body2'} component={'h5'} color={'textSecondary'}>\n                                        {t('labelMyReward')}\n                                    </Typography>\n                                    <Typography variant={'body1'} component={'span'} color={'textPrimary'}>\n                                        {/*{typeof coinPairInfo.isActivity === 'undefined' ? EmptyValueTag : <>*/}\n                                        {typeof myAmm.reward === 'undefined' ? EmptyValueTag : <>\n\n                                            <Typography\n                                                component={'span'}> {getThousandFormattedNumbers(myAmm.reward)} </Typography>\n                                            <Typography\n                                                component={'span'}> {coinPairInfo.activity?.rewardToken?.simpleName}</Typography></>}\n\n                                    </Typography>\n                                </Typography>\n                            </Box>\n                            <Typography alignSelf={'flex-start'} variant={'body2'} color={'textSecondary'}\n                                        component=\"span\" marginTop={1}>\n                                {typeof coinPairInfo.isActivity === 'undefined' ? t('labelNoActiveEvent')\n                                    : <>\n                                        {t('labelDate')} :\n                                        <> {moment(coinPairInfo.activity?.duration.from).format('L') + ' - ' + moment(coinPairInfo.activity?.duration.to).format('L')}</>\n                                    </>\n                                }\n                            </Typography>\n                        </BoxTopStyled>\n                {/*}*/}\n\n\n            </Grid>\n            {/*<Grid item xs={4} alignItems={'center'} justifyContent={'flex-end'} display={'flex'}>*/}\n            {/*    <Link href=\"/#/liquidity/pools\" variant={'h5'}>*/}\n            {/*        {t('labelBack')}*/}\n            {/*    </Link>*/}\n            {/*</Grid>*/}\n        </Grid>\n        {/*<Grid container marginTop={3}>*/}\n        {/*   */}\n        {/*</Grid>*/}\n        <Box flex={1} display={'flex'} alignItems={'stretch'} flexDirection=\"row\" marginTop={3}>\n            <Box flex={1} display={'flex'} flexDirection={'column'} marginRight={3} justifyContent={'space-between'}>\n                <Box flex={1} width={'101%'} >\n                    <ScaleAreaChart type={ChartType.Trend} data={pairHistory} />\n                </Box>\n                <Box display={'flex'} flexDirection={'row'} justifyContent={'space-between'}>\n                    <BoxStyled paddingX={2} display={'flex'} flexDirection={'column'}>\n                        <Typography component={'p'} color={'textSecondary'} display={'flex'} marginBottom={1/2*3}\n                        >\n                            {t('labelAmmTotalToken')}\n                        </Typography>\n                        <Typography component={'span'} display={'flex'} flexDirection={'row'} alignItems={'center'}\n                                    style={{textTransform: 'capitalize'}} color={'textPrimary'}>\n                            <Typography component={'span'} marginRight={1 / 2}\n                            >\n                                <Avatar variant=\"square\" sizes={'small'} alt={'coinLogo'}\n                                    // src={coinAInfo?.icon}\n                                        src={sellIconHasLoaded ? coinPairInfo?.myCoinA?.icon : 'static/images/icon-default.png'}/>\n                            </Typography>\n                            <Typography component={'span'}>{getThousandFormattedNumbers(coinPairInfo.totalA,6)}</Typography>\n                            <Typography component={'span'}>\n                                {/*<HiddenHidden>{t('labelLPTotal')}</Hidden>*/}\n                                {coinPairInfo.myCoinA?.simpleName}\n                            </Typography>\n\n                        </Typography>\n                        <Typography component={'span'} display={'flex'} flexDirection={'row'} alignItems={'center'}  marginTop={1}\n                                    style={{textTransform: 'capitalize'}}>\n                            <Typography component={'span'} marginRight={1 / 2}\n                                        color={'textSecondary'}>\n                                <Avatar variant=\"square\" sizes={'small'} alt={'coinLogo'}\n                                    // src={coinBInfo?.icon}\n                                        src={buyIconHasLoaded ? coinPairInfo?.myCoinB?.icon : 'static/images/icon-default.png'}/>\n                            </Typography>\n                            <Typography component={'span'}>{getThousandFormattedNumbers(coinPairInfo.totalB,6)}</Typography>\n                            <Typography component={'span'}>\n                                {/*<Hidden>{t('labelLPTotal')}</Hidden>*/}\n                                {coinPairInfo.myCoinB?.simpleName}\n                            </Typography>\n\n                        </Typography>\n\n                    </BoxStyled>\n                    <BoxStyled paddingX={2} display={'flex'} flexDirection={'column'}>\n                        <Typography component={'p'} color={'textSecondary'} display={'flex'}\n                        >\n                            {t('label24Volume')}\n                        </Typography>\n                        <Typography  variant={'h4'} marginTop={4}\n                            component={'span'}> {typeof coinPairInfo.amountDollar === 'undefined' ? EmptyValueTag :\n                            currency === Currency.dollar ? PriceTag.Dollar + getThousandFormattedNumbers(coinPairInfo.amountDollar,4) : PriceTag.Yuan + getThousandFormattedNumbers(coinPairInfo.amountYuan ? coinPairInfo.amountYuan : 0,4)}\n                        </Typography>\n\n                    </BoxStyled>\n                    <BoxStyled paddingX={2} display={'flex'} flexDirection={'column'}>\n                        <Typography component={'p'} color={'textSecondary'} display={'flex'}\n                        >\n                            {t('labelTVL')}\n                        </Typography>\n\n\n                        <Typography variant={'h4'} marginTop={4}\n                                    component={'span'}>\n                            {currency === Currency.dollar ? PriceTag.Dollar + getThousandFormattedNumbers(coinPairInfo.tradeFloat && coinPairInfo.tradeFloat.priceDollar ? coinPairInfo.tradeFloat.priceDollar as number : 0,4)\n                                : PriceTag.Yuan + getThousandFormattedNumbers(coinPairInfo.tradeFloat && coinPairInfo.tradeFloat.priceYuan ? coinPairInfo.tradeFloat.priceYuan as number : 0,4)}\n                        </Typography>\n\n                    </BoxStyled>\n                    <BoxStyled paddingX={2} display={'flex'} flexDirection={'column'}>\n                        <Typography component={'p'} color={'textSecondary'} display={'flex'}\n                        >\n                            {t('labelAPY')}\n                        </Typography>\n                        <Typography  variant={'h4'} marginTop={4}\n                                      component={'span'}> {coinPairInfo.APY ? coinPairInfo.APY : EmptyValueTag}%\n                        </Typography>\n                    </BoxStyled>\n                </Box>\n            </Box>\n            <Box display={'flex'}>\n                <AmmPanelView pair={pair} walletMap={walletMap} snapShotData={snapShotData}/>\n            </Box>\n        </Box>\n\n        <Grid container marginY={3}>\n            <Grid item xs={12}>\n                <Tabs value={tabIndex}\n                      onChange={handleChange}\n                      aria-label=\"tabs switch\">\n                    <Tab label={t('labelAll')} {...applyProps(0)} />\n                    <Tab label={t('labelMe')} {...applyProps(1)} />\n                </Tabs>\n                <StylePaper style={{marginTop: `${unit * 2}px`}}>\n                    {/*ammRecordArray*/}\n                    {tabIndex === 0 ? <AmmRecordTable\n                        rawData={ammMarketArray}\n                        handlePageChange={_handlePageChange} page={page}\n                    /> : <AmmRecordTable rawData={myAmmMarketArray} handlePageChange={_handlePageChange}\n                                         page={page}/>}\n                </StylePaper>\n            </Grid>\n\n        </Grid>\n\n    </>\n\n})\n\n\n\n\n\n\n\n","import { AmmProps } from '@loopring-web/component-lib';\nimport React from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { AmmCardProps, AmmData, AmmInData, IBData } from '@loopring-web/common-resources';\nimport { AmmCard } from '@loopring-web/component-lib';\nimport { Grid } from '@material-ui/core';\nimport { useAmmMiningUI } from './hook';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport { withTranslation } from 'react-i18next';\nimport { AmmPoolActivityRule, LoopringMap } from 'loopring-sdk/dist/defs/loopring_defs';\n\ntype ClickHandler = {\n    handleClick: (pair: string) => void\n}\n\nconst AmmCardWrap = React.memo(React.forwardRef((props:AmmCardProps<{[key:string]:any}> & ClickHandler ,ref) => {\n    const pair = `${props.coinAInfo.name}-${props.coinBInfo.name}`\n    return props? <AmmCard ref={ref} {...props} handleClick={() => props.handleClick(pair)} /> :<></>\n}));\n\nconst AmmList = <I extends {[key:string]:any}>({ammActivityViewMap}: {ammActivityViewMap: Array<AmmCardProps<I>> })=>{\n    let history = useHistory();\n    const jumpTo = React.useCallback((pair: string) => {\n        if (history) {\n            history.push(`/liquidity/pools/coinPair/${pair}`)\n        }\n    }, [history])\n    \n    return  <>{ammActivityViewMap.map((item:AmmCardProps<I>,index)=>\n        <Grid item xs={12} sm={6} lg={4} key={index}>\n            <AmmCardWrap handleClick={jumpTo} {...item as any} />\n        </Grid>\n    ) }</>\n}\n\nexport const AmmMiningView =  withTranslation('common')(<T extends AmmData<C extends IBData<I> ? C : IBData<I>>, I,\n    ACD extends AmmInData<I>,\n    C = IBData<I>>({ammProps,t,ammActivityMap,...rest}: { ammProps:AmmProps<T ,I,ACD>,\n    ammActivityMap: LoopringMap<LoopringMap<AmmPoolActivityRule[]>>|undefined,   \n} & any) => {\n    const { ammActivityViewMap,\n        ammActivityPastViewMap} = useAmmMiningUI({ammActivityMap});\n    const [tabIndex,setTabIndex] = React.useState<0|1>(0);\n    const handleChange = (event: any, newValue: 0|1) => {\n        setTabIndex(newValue);\n    }\n\n    return <Grid container spacing={2}>\n        <Grid item xs={12}>\n            <Tabs value={tabIndex}\n                  onChange={handleChange}\n                  aria-label=\"tabs switch\">\n                <Tab label={t('labelCurrentActivities')}  />\n                <Tab label={t('labelPastActivities')}  />\n            </Tabs>\n        </Grid>\n        <AmmList ammActivityViewMap={tabIndex === 0 ? ammActivityViewMap : ammActivityPastViewMap}/>\n    </Grid>\n})\n","import { AmmCardProps } from '@loopring-web/common-resources';\nimport { AmmPoolActivityRule, AmmPoolActivityStatus,LoopringMap } from 'loopring-sdk';\nimport React from 'react';\nimport {\n    makeUIAmmActivityMap\n} from '../../../hooks/help';\n\nimport { useUserRewards } from '../../../stores/userRewards';\n\nexport const useAmmMiningUI = <R extends { [ key: string ]: any }, I extends { [ key: string ]: any }>(\n    {\n        ammActivityMap\n    }: { ammActivityMap: LoopringMap<LoopringMap<AmmPoolActivityRule[]>> | undefined }\n): {\n    ammActivityViewMap: Array<AmmCardProps<I>>,\n    ammActivityPastViewMap: Array<AmmCardProps<I>>\n} => {\n    const  userRewardsMapState =  useUserRewards();// store.getState().userRewardsMap\n    // const {coinMap} = useTokenMap();\n    // const ammMapState = useAmmMap();\n    // const walletLayer2State = useWalletLayer2();\n    const [ammActivityViewMap, setAmmActivityViewMap] = React.useState<Array<AmmCardProps<I>>>([]);\n\n\n    const [ammActivityPastViewMap, setAmmActivityPastViewMap] = React.useState<Array<AmmCardProps<I>>>(\n        []);\n    // const [ammUserRewardMap, setAmmUserRewardMap] = React.useState<AmmUserRewardMap>(\n    //     {});\n\n\n    // );\n    React.useEffect(() => {\n        if(ammActivityMap && Object.keys(ammActivityMap).length>0 ){\n\n           // getAmmPoolUserRewards().then((ammUserRewardMap)=>{\n                // setAmmUserRewardMap(ammUserRewardMap as AmmUserRewardMap);\n                setAmmActivityViewMap(makeUIAmmActivityMap(\n                    {\n                        ammActivityMap,\n                        type: 'AMM_MINING',\n                        ammPoolActivityStatus: [AmmPoolActivityStatus.NotStarted, AmmPoolActivityStatus.InProgress]\n                    }, userRewardsMapState.userRewardsMap\n                ));\n                setAmmActivityPastViewMap(\n                    makeUIAmmActivityMap(\n                        {\n                            ammActivityMap,\n                            type: 'AMM_MINING',\n                            ammPoolActivityStatus: [AmmPoolActivityStatus.EndOfGame]\n                        }, userRewardsMapState.userRewardsMap\n                    ))\n          //  })\n        }\n\n    },[ammActivityMap])\n    React.useEffect(() => {\n            if (userRewardsMapState.status === \"ERROR\") {\n                //TODO: solve error\n                userRewardsMapState.statusUnset();\n            } else if (userRewardsMapState.status === \"DONE\") {\n                userRewardsMapState.statusUnset();\n                setAmmActivityViewMap(\n                    makeUIAmmActivityMap(\n                    {\n                        ammActivityMap,\n                        type: 'AMM_MINING',\n                        ammPoolActivityStatus: [AmmPoolActivityStatus.NotStarted, AmmPoolActivityStatus.InProgress]\n                    }, userRewardsMapState.userRewardsMap\n                ));\n                setAmmActivityPastViewMap(\n                    makeUIAmmActivityMap(\n                        {\n                            ammActivityMap,\n                            type: 'AMM_MINING',\n                            ammPoolActivityStatus: [AmmPoolActivityStatus.EndOfGame]\n                        }, userRewardsMapState.userRewardsMap\n                    ))\n                // if (userRewardsMapState.ammMap) {\n                //     setAmmActivityViewMap(\n                //         makeUIAmmActivityMap(\n                //             {\n                //                 ammActivityMap,\n                //                 type: 'AMM_MINING',\n                //                 ammPoolActivityStatus: [AmmPoolActivityStatus.NotStarted, AmmPoolActivityStatus.InProgress]\n                //             }, ammUserRewardMap\n                //         ))\n                //     setAmmActivityPastViewMap(\n                //         makeUIAmmActivityMap(\n                //             {\n                //                 ammActivityMap,\n                //                 type: 'AMM_MINING',\n                //                 ammPoolActivityStatus: [AmmPoolActivityStatus.EndOfGame]\n                //             }, ammUserRewardMap\n                //         ))\n                //\n                // }\n\n            }\n        },\n        [userRewardsMapState.status]\n    )\n\n\n    return {\n        ammActivityViewMap,\n        ammActivityPastViewMap\n    }\n\n}\n","import React from 'react'\nimport styled from '@emotion/styled'\nimport { Box, Grid, Typography } from '@material-ui/core'\nimport { WithTranslation, withTranslation } from 'react-i18next'\nimport { useHistory } from 'react-router-dom'\nimport {\n    AmmRecordTable,\n    AmmTradeType,\n    ChartType,\n    ScaleAreaChart,\n    TablePaddingX,\n    ToggleButtonGroup,\n    useSettings ,\n    MyPoolTable\n} from '@loopring-web/component-lib'\nimport {\n    Currency, EmptyValueTag,\n    getThousandFormattedNumbers,\n    PriceTag\n} from '@loopring-web/common-resources';\n\nimport { AmmPoolActivityRule, LoopringMap } from 'loopring-sdk/dist/defs/loopring_defs';\nimport { useOverview } from './hook';\nimport { TableWrapStyled } from 'pages/styled'\n\n\n//TODO: FIXED:  demo data\n\n\nconst toggleData = [\n    {value: '24 H', key: '24 H'},\n    {value: '1 W', key: '1 W'},\n    {value: 'ALL', key: 'ALL'},\n]\n\nconst StylePaper = styled(Box)`\n  width: 100%;\n  height: 100%;\n  flex: 1;\n` as typeof Box;\n\nconst StyleWrapper = styled(Grid)`\n  position: relative;\n  width: 100%;\n  background-color: ${({theme}) => theme.colorBase.background().default};\n  border-radius: ${({theme}) => theme.unit}px;\n` as typeof Grid\n\n\n\nconst StyledBtnGroupWrapper = styled(Box)`\n  position: absolute;\n  z-index: 99;\n  top: ${({theme}) => theme.unit}px;\n  width: 100%;\n` as typeof Box\n\n\nexport const MyLiquidity = withTranslation('common')(\n    <R extends { [ key: string ]: any }, I extends { [ key: string ]: any }>\n    ({t, ammActivityMap, ...rest}:\n         WithTranslation &\n         { ammActivityMap: LoopringMap<LoopringMap<AmmPoolActivityRule[]>> | undefined }\n    ) => {\n        const [chartPeriod, setChartPeriod] = React.useState('ALL');\n        const [page, setPage] = React.useState(1);\n        const {currency} = useSettings();\n        const history = useHistory()\n\n        const JumpToLiqudity = React.useCallback((pair, type) => {\n            if (history) {\n                history.push(`/liquidity/pools/coinPair/${pair}?type=${type}`)\n            }\n        }, [history])\n\n        const _handlePageChange = React.useCallback((page: number) => {\n            setPage(page);\n        }, [])\n\n        const {myAmmMarketArray, summaryReward, myPoolRow} = useOverview({ammActivityMap});\n        return (\n            <>\n                <StyleWrapper container spacing={1} padding={3} margin={0}>\n                    <Grid display={'flex'} flexDirection={'column'} justifyContent={'space-around'} item sm={3}>\n                        <Typography variant={'body1'} component={'h5'}\n                                    color={'textSecondary'}>{t('labelTotalPositionValue')}</Typography>\n                        <Typography variant={'h4'} marginTop={1}>\n                            {summaryReward === undefined ? EmptyValueTag : currency === Currency.dollar ? PriceTag.Dollar\n                                + getThousandFormattedNumbers(summaryReward.rewardDollar !== undefined? summaryReward.rewardDollar : 0)\n                                + getThousandFormattedNumbers( summaryReward.feeDollar !== undefined?summaryReward.feeDollar : 0)\n                                : PriceTag.Yuan + getThousandFormattedNumbers(summaryReward.rewardYuan ? summaryReward.rewardYuan : 0)\n                                    +  getThousandFormattedNumbers(summaryReward.feeYuan ? summaryReward.feeYuan : 0)}\n                        </Typography>\n                    </Grid>\n                    <Grid display={'flex'} flexDirection={'column'} justifyContent={'space-around'} item sm={3}>\n                        <Typography variant={'body1'} component={'h5'}\n                                    color={'textSecondary'}>{t('labelFeeRewards')}</Typography>\n                        <Typography variant={'h4'} marginTop={1}>\n                            {summaryReward === undefined ? EmptyValueTag : currency === Currency.dollar ? PriceTag.Dollar\n                                + getThousandFormattedNumbers(summaryReward.feeDollar ? summaryReward.feeDollar : 0)\n                                : PriceTag.Yuan\n                                + getThousandFormattedNumbers(summaryReward.feeYuan ? summaryReward.feeYuan : 0)}\n                        </Typography>\n                    </Grid>\n                    <Grid display={'flex'} flexDirection={'column'} justifyContent={'space-around'} item sm={3}>\n                        <Typography variant={'body1'} component={'h5'}\n                                    color={'textSecondary'}>{t('labelMiningRewards')}</Typography>\n                        <Typography variant={'h4'} marginTop={1}>\n                            {summaryReward === undefined ? EmptyValueTag : currency === Currency.dollar ? PriceTag.Dollar\n                                + getThousandFormattedNumbers(summaryReward.rewardDollar ? summaryReward.rewardDollar : 0)\n                                : PriceTag.Yuan\n                                + getThousandFormattedNumbers(summaryReward.rewardYuan ? summaryReward.rewardYuan : 0)}\n                        </Typography>\n                    </Grid>\n                </StyleWrapper>\n                {/*<StyleWrapper container marginY={2} height={340}>*/}\n                {/*    <StyledBtnGroupWrapper display={'flex'} padding={3} justifyContent={'space-between'}>*/}\n                {/*        <Typography variant={'body1'} component={'h5'}*/}\n                {/*                    color={'textSecondary'}>{t('labelLiquidityValue')}</Typography>*/}\n                {/*        <Box marginRight={-1}>*/}\n                {/*            <ToggleButtonGroup exclusive size=\"small\" {...{*/}\n                {/*                ...rest,*/}\n                {/*                t,*/}\n                {/*                data: toggleData,*/}\n                {/*                value: chartPeriod,*/}\n                {/*                setValue: setChartPeriod*/}\n                {/*            }} />*/}\n                {/*        </Box>*/}\n                {/*    </StyledBtnGroupWrapper>*/}\n                {/*    <ScaleAreaChart type={ChartType.Trend} data={[]}/>*/}\n                {/*</StyleWrapper>*/}\n                <Typography paddingLeft={2} marginTop={2} variant={'h4'}>{t('labelMyAmm')}</Typography>\n                <TableWrapStyled container marginY={2} paddingBottom={2} flex={1} height={568}>\n                    <Grid item xs={12} display={'flex'} flexDirection={'column'}>\n                        <MyPoolTable\n                            rawData={myPoolRow}\n                            pagination={{pageSize: 5}}\n                            handleDeposit={(row: any) => {\n                                const pair = `${row.ammDetail.coinAInfo.name}-${row.ammDetail.coinBInfo.name}`\n                                JumpToLiqudity(pair, 'add')\n                            }}\n                            handleWithdraw={(row: any) => {\n                                const pair = `${row.ammDetail.coinAInfo.name}-${row.ammDetail.coinBInfo.name}`\n                                JumpToLiqudity(pair, 'remove')\n                            }}\n                            handlePageChange={() => {\n                            }}\n                        />\n                    </Grid>\n                </TableWrapStyled>\n                <Typography paddingLeft={2} variant={'h4'}>{t('labelMyAmmRecord')}</Typography>\n                <TableWrapStyled container marginTop={2}  paddingBottom={2} flex={1}>\n                    <Grid item xs={12} display={'flex'} flexDirection={'column'}>\n                        <AmmRecordTable rawData={myAmmMarketArray} handlePageChange={_handlePageChange} page={page}/>\n                    </Grid>\n                </TableWrapStyled>\n            </>\n        )\n    })","import { AmmPoolActivityRule, LoopringMap } from 'loopring-sdk';\nimport React from 'react';\nimport { AmmRecordRow, MyPoolRow } from '@loopring-web/component-lib';\nimport { makeWallet, WalletMapExtend } from '../../../hooks/help/makeWallet';\nimport {\n    getUserAmmTransaction,\n    makeMyAmmMarketArray,\n    makeMyPoolRowWithPoolState,\n    makeSummaryMyAmm,\n    SummaryMyAmm\n} from '../../../hooks/help';\nimport { useTokenMap } from '../../../stores/token';\nimport { useWalletLayer2 } from '../../../stores/walletLayer2';\nimport { useUserRewards } from '../../../stores/userRewards';\nimport { useAmmMap } from '../../../stores/Amm/AmmMap';\n\n\nexport const useOverview = <R extends { [ key: string ]: any }, I extends { [ key: string ]: any }>(\n    {\n        ammActivityMap\n    }: { ammActivityMap: LoopringMap<LoopringMap<AmmPoolActivityRule[]>> | undefined }\n): {\n    myAmmMarketArray: AmmRecordRow<R>[],\n    summaryReward: SummaryMyAmm | undefined,\n    myPoolRow: MyPoolRow<R>[]\n    // ammActivityViewMap: Array<AmmCardProps<I>>,\n    // ammActivityPastViewMap: Array<AmmCardProps<I>>\n} => {\n    const walletLayer2State = useWalletLayer2();\n    const userRewardsMapState = useUserRewards();\n    const {marketArray} = useTokenMap();\n    const ammMapState = useAmmMap();\n    const {ammMap} = ammMapState;\n\n    const [walletMap, setWalletMap] = React.useState<WalletMapExtend<R> | undefined>(undefined);\n    const [summaryReward, setSummaryReward] = React.useState<SummaryMyAmm | undefined>(undefined);\n    const [myPoolRow, setMyPoolRow] = React.useState<MyPoolRow<R>[]>([])\n    const [myAmmMarketArray, setMyAmmMarketArray] = React.useState<AmmRecordRow<R>[]>([]);\n    // const [ammUserRewardMap, setAmmUserRewardMap] = React.useState<AmmUserRewardMap|undefined>(undefined);\n    // const [snapShotData,setSnapShotData] = React.useState<{\n    //     tickerData: TickerData|undefined\n    //     ammPoolsBalance: AmmPoolSnapshot|undefined\n    // }|undefined>(undefined);\n    const walletLayer2DoIt = React.useCallback(() => {\n        const {walletMap: _walletMap} = makeWallet();\n        setWalletMap(_walletMap as WalletMapExtend<any>)\n        if (_walletMap) {\n            getUserAmmTransaction()?.then((marketTrades) => {\n                let _myTradeArray = makeMyAmmMarketArray(undefined, marketTrades)\n                setMyAmmMarketArray(_myTradeArray ? _myTradeArray : [])\n            })\n        }\n        return _walletMap\n    }, [makeWallet, getUserAmmTransaction, makeMyAmmMarketArray, marketArray])\n    const makeMyPoolRow = React.useCallback((_walletMap): MyPoolRow<R>[] => {\n        if (_walletMap && ammMap) {\n            // @ts-ignore\n            const _myPoolRow: MyPoolRow<R>[] = Reflect.ownKeys(_walletMap).reduce((prev: MyPoolRow<R>[], walletKey: string) => {\n                if (/LP-/i.test(walletKey)) {\n                    const ammKey = walletKey.replace('LP-', 'AMM-');\n                    const marketKey = walletKey.replace('LP-', '');\n                    let rowData: MyPoolRow<R> | undefined;\n                    //TODO：websocket open\n                    //  if(ammPoolSnapShots)\n                    // makeData by snapshot else\n                    // else\n                    \n                    rowData = makeMyPoolRowWithPoolState(\n                        {\n                            ammDetail: ammMap[ ammKey ] ,\n                            walletMap: _walletMap,\n                            market: marketKey,\n                            ammUserRewardMap: userRewardsMapState.userRewardsMap\n                        }\n                    ) as any\n                    if (rowData !== undefined) {\n                        prev.push(rowData);\n                    }\n                }\n                return prev\n            }, [] as MyPoolRow<R>[])\n            // console.log('rowData',_myPoolRow);\n            return _myPoolRow;\n        }\n        return [];\n    }, [ammMap, userRewardsMapState.userRewardsMap])\n\n    React.useEffect(() => {\n        if (walletLayer2State.walletLayer2) {\n            const _walletMap = walletLayer2DoIt();\n            if (ammMap) {\n                const _myPoolRow = makeMyPoolRow(_walletMap)\n                setMyPoolRow(_myPoolRow)\n            }\n        }\n    }, []);\n\n    React.useEffect(() => {\n        //ammMapState.ammMap or\n\n        switch (walletLayer2State.status) {\n            case \"ERROR\":\n                walletLayer2State.statusUnset();\n                break;\n            case \"DONE\":\n                walletLayer2State.statusUnset();\n               // const _walletMap = walletLayer2DoIt()\n                const _walletMap = walletLayer2DoIt();\n                //TODO check AmmMap state or ammSnapshot sockets\n                //userRewardsMapState is an option but  walletLayer2 amd ammMapState.ammMap is required\n                if (ammMapState.ammMap) {\n                    const _myPoolRow = makeMyPoolRow(_walletMap);\n                    setMyPoolRow(_myPoolRow)\n                }\n                break;\n            default:\n                break;\n\n        }\n        // }\n    }, [walletLayer2State.status])\n\n    React.useEffect(() => {\n        if (ammMapState.status === \"ERROR\") {\n            //TODO: solve error\n            ammMapState.statusUnset();\n        } else if (ammMapState.status === \"DONE\") {\n            ammMapState.statusUnset();\n            //TODO check AmmMap state or ammSnapshot sockets when websocket open  ammMapState done should not effect myPoolRow\n            if (walletLayer2State.walletLayer2) {\n                const _walletMap = walletLayer2DoIt();\n                //userRewardsMapState is an option and walletLayer2 is required\n                const _myPoolRow = makeMyPoolRow(_walletMap);\n                setMyPoolRow(_myPoolRow);\n            }\n        }\n    }, [ammMapState.status])\n\n    React.useEffect(() => {\n        if (userRewardsMapState.status === \"ERROR\") {\n            //TODO: solve error\n            userRewardsMapState.statusUnset();\n        } else if (userRewardsMapState.status === \"DONE\") {\n            userRewardsMapState.statusUnset();\n            // setAmmUserRewardMap()\n            const summaryReward = makeSummaryMyAmm({userRewardsMap: userRewardsMapState.userRewardsMap});\n            setSummaryReward(summaryReward);\n\n            //TODO check AmmMap state or ammSnapshot sockets\n            if (walletLayer2State.walletLayer2 && ammMapState.ammMap) {  //  ammMapState.ammMap or websocket\n                //userRewardsMapState is an option and walletLayer2 is required\n                const _myPoolRow = makeMyPoolRow(walletLayer2State.walletLayer2);\n                setMyPoolRow(_myPoolRow);\n            }\n\n        }\n    }, [userRewardsMapState.status])\n    return {\n        myAmmMarketArray,\n        summaryReward,\n        myPoolRow,\n        // ammActivityViewMap,\n        // ammActivityPastViewMap\n    }\n\n}\n","import { useRouteMatch } from 'react-router'\n\nimport { Box } from '@material-ui/core'\nimport {\n    SubMenu,\n    SubMenuList as BasicSubMenuList,\n} from '@loopring-web/component-lib'\nimport { withTranslation } from 'react-i18next'\nimport { subMenuLiquidity } from '@loopring-web/common-resources'\nimport { PoolsPanel } from './PoolsPanel'\nimport { CoinPairPanel } from './CoinPairPanel';\nimport { AmmMiningView } from './AmmMining';\nimport { MyLiquidity } from './MyLiquidity'\nimport { useAmmPool } from './hook';\n\nexport const subMenu = subMenuLiquidity\n\nconst SubMenuList = withTranslation(['layout','common'], { withRef: true })(BasicSubMenuList);\nexport const LiquidityPage = () => {\n\n    // const { ammFee } = useAmmPool('LRC', 'ETH')\n    //\n    // console.log('--- > ammFee:', ammFee)\n    //\n    const {ammActivityMap} = useAmmPool();\n    let match: any = useRouteMatch(['/liquidity/:item',':next/']);\n    const selected = match?.params.item ?? 'pools'\n    let matchPair: any = useRouteMatch(['/liquidity/:item/:next/:symbol']);\n    let symbol:any = undefined\n    if (matchPair && matchPair?.params?.next && matchPair.params.item === 'pools') {\n       if(!matchPair.params.symbol){\n           symbol='LRC-ETH';\n       }else{\n           symbol=matchPair.params.symbol;\n       }\n    }\n    \n    return (\n        <>\n            { symbol && <Box display={'flex'} flexDirection={'column'}  flex={1} alignSelf={'flex-start'}>\n              <CoinPairPanel ammActivityMap={ammActivityMap}/>\n            </Box>\n            }\n            {!symbol && <>  <Box width={'200px'} display={'flex'} justifyContent={'stretch'} marginRight={3} marginBottom={3}>\n                    <SubMenu>\n                        <SubMenuList selected={selected} subMenu={subMenu as any} />\n                    </SubMenu>\n                </Box>\n                <Box  minHeight={420}  display={'flex'} alignItems={'stretch'} justifyContent={'stretch'} flexDirection=\"column\" marginTop={0} flex={1} marginBottom={3}>\n                    {(selected === 'pools' && !symbol ) && <PoolsPanel ammActivityMap={ammActivityMap}/>}\n                    {(selected === 'amm-mining' && !symbol ) && <AmmMiningView ammActivityMap={ammActivityMap}/>}\n                    {(selected === 'my-liquidity' && !symbol ) && <MyLiquidity ammActivityMap={ammActivityMap}/>}\n                    {selected === 'orderBook-Mining' && <AmmMiningView ammActivityMap={ammActivityMap}/>}\n                    {/*{selected === 'orders' && <OrderPanel />}*/}\n                </Box>\n             </>\n            }\n        </>\n    )\n\n}\n","import React from 'react';\nimport { useAmmActivityMap } from '../../stores/Amm/AmmActivityMap';\n\nimport { AmmPoolActivityRule, LoopringMap } from 'loopring-sdk';\nimport { useAccount } from '../../stores/account/hook';\nimport { useUserRewards } from '../../stores/userRewards';\nimport { useAmmMap } from '../../stores/Amm/AmmMap';\n\nexport const useAmmPool = <R extends {[key:string]:any},I extends {[key:string]:any}>()=>{\n    const AmmActivityMapState  = useAmmActivityMap()\n    const {getUserRewards}  = useUserRewards()\n    const {account} = useAccount();\n    const {ammMap,getAmmMap} = useAmmMap();\n    const [ammActivityMap,setAmmActivityMap] = React.useState<LoopringMap<LoopringMap<AmmPoolActivityRule[]>>|undefined>(AmmActivityMapState.ammActivityMap)\n    // init AmmMap at begin\n    React.useEffect(() => {\n        if (!ammMap || Object.keys(ammMap).length === 0) {\n            getAmmMap();\n        }\n    }, []);\n    React.useEffect(() => {\n        switch (AmmActivityMapState.status) {\n            case \"ERROR\":\n                AmmActivityMapState.statusUnset();\n                // setState('ERROR')\n                //TODO: show error at button page show error  some retry dispath again\n                break;\n            case \"DONE\":\n                AmmActivityMapState.statusUnset();\n                setAmmActivityMap(AmmActivityMapState.ammActivityMap)\n                break;\n            default:\n                break;\n\n        }\n    }, [AmmActivityMapState.status])\n    React.useEffect(() => {\n        if(account.accountId){\n            getUserRewards()\n        }\n    }, [account.accountId])\n\n    return {\n        ammActivityMap\n    }\n\n}\n\n","import { HashRouter as Router, Route, Switch, } from 'react-router-dom'\n\nimport Header from 'layouts/header'\n\nimport QuotePage from 'pages/QuotePage'\nimport { SwapPage } from 'pages/SwapPage'\n\nimport DebugPage from 'pages/DebugPage'\n\nimport Container from '@material-ui/core/Container'\nimport { Box } from '@material-ui/core'\nimport { DevWrapper } from '../provider/'\nimport { Layer2Page } from '../pages/Layer2Page'\nimport { LiquidityPage } from '../pages/LiquidityPage'\n\nconst RouterView = () => {\n    \n    return <Router>\n        <Header />\n\n        {/*<Box style={{marginTop: `var(--header-height)`}} flex={1} display={'flex'}>*/}\n        <Container maxWidth=\"lg\" style={{minHeight:'calc(100% - 64px - 32px)',display:'flex',flexDirection:'column'}}>\n            {/*style={{height: '100%' }}*/}\n            <Box display={'flex'} flex={1} alignItems={'stretch'} flexDirection={'row'} marginTop={3}  >\n                <Switch>\n                    <Route exact component={SwapPage} path='/'/>\n                    <Route exact component={QuotePage} path='/markets'/>\n                    <Route component={SwapPage} path='/trading/lite'/>\n                    <Route component={SwapPage} path='/trading/lite(/:symbol)'/>\n\n                    <Route exact component={Layer2Page} path='/layer2'/>\n                    <Route exact component={Layer2Page} path='/layer2/assets'/>\n                    <Route exact component={Layer2Page} path='/layer2/transactions'/>\n                    <Route exact component={Layer2Page} path='/layer2/trades'/>\n                    <Route exact component={Layer2Page} path='/layer2/ammRecords'/>\n                    <Route exact component={Layer2Page} path='/layer2/orders'/>\n                    <Route exact component={Layer2Page} path='/layer2/setting'/>\n\n                    <Route exact component={LiquidityPage} path='/liquidity'/>\n                    <Route exact component={LiquidityPage} path='/liquidity/pools/*'/>\n                    <Route exact component={LiquidityPage} path='/liquidity/pools'/>\n                    {/*<Route exact component={LiquidityPage} path='/liquidity/pools/coinPair(/:symbol)'/>*/}\n                    <Route exact component={LiquidityPage} path='/liquidity/amm-mining'/>\n                    <Route exact component={LiquidityPage} path='/liquidity/my-liquidity'/>\n                    <Route exact component={LiquidityPage} path='/liquidity/orderBook-Mining'/>\n                    <Route exact component={LiquidityPage} path='/liquidity/maker-rebates'/>\n\n                    <DevWrapper>\n                        <Route exact path='/debug'>\n                            <DebugPage/>\n                        </Route>\n                    </DevWrapper>\n\n                </Switch>\n            </Box>\n        </Container>\n        {/*</Box>*/}\n\n    </Router>\n}\n\nexport default RouterView\n","import { Trans, useTranslation } from 'react-i18next';\nimport { Box, Container, Link, Typography } from '@material-ui/core';\nimport styled from '@emotion/styled';\nimport { ErrorObject } from '@loopring-web/common-resources';\nimport { getContactInfo } from '../../utils/dt_tools';\n\nconst StyleBox = styled(Box)`\n  background-image: url('./static/images/error_bg.png');\n  background-repeat: no-repeat;\n  background-size: contain;\n  background-position: bottom;\n  white-space: pre-wrap;\n  //h2{\n  //  position: relative;\n  //}\n` as typeof Box\n\nexport const ErrorPage = ({messageKey}: ErrorObject) => {\n    // const {messageKey}: { id?:string,messageKey:string } = {messageKey: 'errorMessageTokenMapIsEmpty'};\n    //TODO: checkRouter\n    const {t} = useTranslation('error');\n    const message = `labelConnectUs`;\n    return <>\n        <Container>\n            {/*style={{height: '100%' }}*/}\n            <StyleBox flex={1} display={'flex'} alignItems={'flex-start'} justifyContent={'center'}\n                      flexDirection={'column'} marginTop={4} height={680} maxWidth={1200}>\n                {/*<StyleBox>*/}\n                <Box textAlign={'center'} position={'relative'} left={128} top={-64}>\n                    <Typography component={'h2'} variant={'h2'}>\n                        {t(messageKey)}\n                    </Typography>\n                    <Typography marginY={2} component={'p'} variant={'body1'} color={'textSecondary'}>\n                        <Trans i18nKey={message}>\n                            If you believe this is indeed a bug, please <Link\n                            component={'a'}\n                            onClick={(e) => {\n                                window.location.href = getContactInfo();\n                                e.preventDefault();\n                            }}\n                        >contact us</Link> <br/> We would appreciate your feedback\n\n                        </Trans>\n                        {/*{t(message)}*/}\n                        {/*{t(messageKey)}*/}\n                    </Typography>\n                </Box>\n                {/*</StyleBox>*/}\n            </StyleBox>\n        </Container>\n\n        {/*<Footer></Footer>*/}\n    </>\n}\n","// import { i18nInstance as i18n  } from \"@loopring-web/common-resources\"\nimport i18n from 'i18next';\n\nconst covertLocale = (rawLocale: string = i18n.language) => {\n    return rawLocale.replace('_', '-')\n}\n\nexport function getLocaleDtFromTs(ts: number | string, locale: string = i18n.language) {\n    if (typeof(ts) === 'string') {\n        ts = parseInt(ts)\n    }\n    const dt = new Date(ts).toLocaleString(covertLocale(locale))\n    return dt\n}\n\nexport function getLocaleDt(dt?: Date, locale: string = i18n.language) {\n    if (dt) {\n        return dt.toLocaleString(covertLocale(locale))\n    }\n    return ''\n}\n\nexport function getContactInfo(subject: string = 'report to loopring website', body: string ='Body Content') {\n    const email = process.env.CONTACT_US_EMAIL ?? 'contact@loopring.io'\n    return `mailto:${email}?subject=${subject}&body=${body}`\n}\n","import { ModalProvider } from 'styled-react-modal'\nimport RouterView from './routers'\nimport { Avatar, GlobalStyles } from '@material-ui/core';\nimport { css, Theme, useTheme } from '@emotion/react';\nimport { globalCss,ErrorMap } from '@loopring-web/common-resources';\nimport { GlobalProvider, Web3ReactManager } from './provider/';\nimport React, { useEffect } from 'react';\nimport { useInit } from './hook';\nimport { STATUS } from 'stores/constant';\nimport loadingSvg from '@loopring-web/common-resources/assets/svg/loading.svg';\nimport { ErrorPage } from './pages/ErrorPage';\n\nconst App =  () => {\n    const theme: Theme = useTheme();\n    const { state } = useInit();\n    const [status,setStatus] = React.useState<keyof typeof STATUS>('PENDING');\n    // check all status be\n    //TODO  demo if  tokenMapStatus is unset and tokenMap is empty. show error\n    //TODO tokenMapObj.status is pending, show global loading\n    //console.log(tokenMapObj.tokenMap && Object.keys(tokenMapObj.tokenMap).length>0,tokenMapObj.status, tokenMapObj.errorMessage)\n\n    useEffect(() => {\n      if (state === STATUS.PENDING || state === STATUS.ERROR) {\n          setStatus(state)\n      } else {\n          setStatus('DONE')\n      }\n    }, [state, setStatus])\n    \n    return <><GlobalStyles styles={css` \n      ${globalCss({theme})};\n      body{\n          ${theme.mode === 'dark' ? `\n            color: ${theme.colorBase.textPrimary};\n          `:``}\n      }\n      body:before {\n        ${theme.mode === 'dark' ? `\n            background: #191C30;\n            background: ${theme.colorBase.background().bg};\n       ` : ''}\n      }\n      //#root{\n      //  display: flex;\n      //  flex-direction: column;\n      //}\n}`}></GlobalStyles>\n  <ModalProvider>\n      <GlobalProvider>\n          <Web3ReactManager>\n              { status === 'PENDING' ?\n                  <ErrorPage {...ErrorMap.LOADING_WHOLE_SITE}/>\n                  // <Avatar src={loadingSvg}/>\n                  : status === 'ERROR'? <ErrorPage {...ErrorMap.NO_NETWORK_ERROR}/> : <>\n                  <RouterView />\n                  {/*    <ErrorPage {...ErrorMap.LOADING_WHOLE_SITE}/>*/}\n                  </>  }\n          </Web3ReactManager>\n      </GlobalProvider>\n  </ModalProvider></>\n\n     \n}\n\n// const mapStateToProps = state => {\n//     ,\n//         status,\n//         getTokenMap\n\n//     return {\n//         tokenMap: state.tokenMap.tokenMap,\n//         tokenMap: state.tokenMap.t,\n//         actionCreated: state.posts.newAction\n//     };\n// };\n\n\nexport default App;\n\n// connect(\n//     mapStateToProps,\n//     null // Generaly its the place of mapStateToDispatch\n// )(App);\n\n","import React  from 'react';\nimport detectEthereumProvider from '@metamask/detect-provider';\nimport { useCustomDCEffect } from 'hooks/common/useCustomDCEffect';\nimport { useSystem } from './stores/system';\nimport { ChainId } from 'loopring-sdk';\nimport { useAmmMap } from './stores/Amm/AmmMap';\nimport { STATUS } from './stores/constant';\nimport { useTokenMap } from './stores/token';\nimport { useWalletLayer1 } from './stores/walletLayer1';\nimport { useAccount } from './stores/account/hook';\n\n\n/**\n * @description call it when bootstrap the page or change the network\n */\nexport function useInit(){\n    const [state,setState] = React.useState<keyof typeof STATUS>('PENDING')\n    const systemState = useSystem();\n    const tokenState = useTokenMap();\n    const ammMapState = useAmmMap();\n    const accountState  = useAccount();\n    const walletLayer1State  =  useWalletLayer1()\n    //store.getState().account\n    // const socketState =   useSocket();\n\n    useCustomDCEffect(async() => {\n\n        const handleChainChanged = (chainId: any) => {\n    \n            // const network = chainId == ChainId.GORLI ? NETWORK.Goerli : NETWORK.MAIN\n             systemState.updateSystem({ chainId })\n             window.location.reload();\n        }\n\n        const handleAccountChanged = (accounts: Array<string>) => {\n            window.location.reload()\n        }\n\n        const provider: any = await detectEthereumProvider()\n        if (provider) {\n            const chainId = Number(await provider.request({ method: 'eth_chainId' }))\n            const accounts = await provider.request({ method: 'eth_requestAccounts' })\n\n            provider.on('accountsChanged', handleAccountChanged)\n            provider.on('chainChanged', ()=>{handleChainChanged(chainId)} )\n            // @ts-ignore\n            systemState.updateSystem({ chainId  })\n           //handleChainChanged(chainId)\n            \n        } else {\n            systemState.updateSystem({chainId:ChainId.MAINNET})\n        }\n\n    }, [])\n\n    React.useEffect(() => {\n        switch (systemState.status) {\n            case \"ERROR\":\n                systemState.statusUnset();\n                setState('ERROR')\n                //TODO show error at button page show error  some retry dispat again\n                break;\n            case \"DONE\":\n                systemState.statusUnset();\n                //TODO do some static information update\n                //tokenState.getTokenMap();\n                break;\n            default:\n                break;\n\n        }\n    },[\n        systemState,\n        // systemState.status,\n        // systemState.statusUnset,\n        //tokenState.getTokenMap\n\n    ]);\n    React.useEffect(() => {\n        if(ammMapState.status ===\"ERROR\" || tokenState.status === \"ERROR\"){\n            //TODO: solve error\n            ammMapState.statusUnset();\n            tokenState.statusUnset();\n            setState('ERROR');\n        }else if(ammMapState.status ===\"DONE\" && tokenState.status === \"DONE\"){\n            ammMapState.statusUnset();\n            tokenState.statusUnset();\n            setState('DONE');\n        }\n    },[ammMapState,tokenState,accountState.accountId,walletLayer1State])\n\n    // React.useEffect(()=>{\n    //\n    // },[])\n\n\n\n    return {\n        state,\n    }\n\n}\n","import { Provider } from 'react-redux'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nimport { createWeb3ReactRoot, Web3ReactProvider } from '@web3-react/core'\nimport store from 'stores'\n\nimport { getLibrary } from 'utils/web3_tools'\nimport { NetworkContextName } from 'loopring-sdk'\n\nimport { getTheme, i18n } from \"@loopring-web/common-resources\"\nimport { provider, ProviderComposer } from \"@loopring-web/common-resources\"\n\nimport { ThemeProvider as MuThemeProvider } from '@material-ui/core'\nimport LocalizationProvider from '@material-ui/pickers/LocalizationProvider'\n\nimport MomentUtils from '@material-ui/lab/AdapterMoment'\n\nimport { ThemeProvider } from \"@emotion/react\"\n\nimport { I18nextProvider } from \"react-i18next\"\n\n\n\nconst Web3ProviderNetwork = createWeb3ReactRoot(NetworkContextName)\nconst providers = [\n    provider(LocalizationProvider as any, {dateAdapter: MomentUtils}),\n    provider(I18nextProvider as any, {i18n:i18n}),\n    provider(MuThemeProvider as any, {theme: getTheme('dark')}),\n    provider(ThemeProvider as any, {theme: getTheme('dark')}),\n    provider(Provider as any, {store}),\n]\n\nReactDOM.render(\n// @ts-ignore\n    <ProviderComposer providers={providers}>\n        <Web3ReactProvider getLibrary={getLibrary}>\n            <Web3ProviderNetwork getLibrary={getLibrary}>\n                <App/>\n            </Web3ProviderNetwork>\n        </Web3ReactProvider>\n    </ProviderComposer>,\n    document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\nif (process.env.NODE_ENV !== 'production') {\n    reportWebVitals(console.log)\n}\n","import { createSlice, PayloadAction, Slice } from '@reduxjs/toolkit'\n\nimport { TradingInterval, ChainId, ExchangeInfo, TokenInfo, TickerData, } from 'loopring-sdk'\n\nexport interface TradingInfo {\n  chainId: number\n  interval: TradingInterval\n  ammPoolStats: any\n  ammPoolConf: any\n  ammActivityRules: any\n  markets: any\n  marketTrades: any\n  tickerMap: {[key: string]: TickerData}\n  tokens: {[key: string]: [value: TokenInfo]}\n  exchangeInfo?: ExchangeInfo\n}\n\nconst defaultInterval = process.env.REACT_APP_TEST_INTERVAL ? process.env.REACT_APP_TEST_INTERVAL : TradingInterval.hr1\n\nconst initialState = {\n  chainId: ChainId.GORLI,\n  interval: defaultInterval,\n  ammPoolConf: {},\n  ammActivityRules: {},\n  ammPoolStats: {},\n  markets: [],\n  marketTrades: {},\n  tokens: {},\n  tickerMap: {},\n  refreshRate: 1000,\n  refreshRateSlow: 3000,\n} as TradingInfo\n\nconst tradingSlice:Slice = createSlice({\n  name: 'trading',\n  initialState,\n  reducers: {\n    setChainId(state, action: PayloadAction<number>) {\n      state.chainId = action.payload\n    },\n    changeTradingInterval(state, action: PayloadAction<any>) {\n      state.interval = action.payload\n    },\n    setTickerMap(state, action: PayloadAction<any>) {\n      state.tickerMap = action.payload\n    },\n    setAmmPoolStats(state, action: PayloadAction<any>) {\n      state.ammPoolStats = action.payload\n    },\n    setAmmActivityRules(state, action: PayloadAction<any>) {\n      state.ammActivityRules = action.payload\n    },\n    setAmmPoolConf(state, action: PayloadAction<any>) {\n      state.ammPoolConf = action.payload\n    },\n    setMarketTrades(state, action: PayloadAction<any>) {\n      state.marketTrades = action.payload\n    },\n    setMarkets(state, action: PayloadAction<any>) {\n      state.markets = action.payload\n    },\n    setTokens(state, action: PayloadAction<{}>) {\n      state.tokens = action.payload\n    },\n    setExchangeInfo(state, action: PayloadAction<ExchangeInfo>) {\n      state.exchangeInfo = action.payload\n    },\n  },\n})\n\nexport const {\n  setChainId, \n  setAmmPoolStats,\n  setAmmActivityRules,\n  setMarketTrades, \n  setTickerMap, \n  setAmmPoolConf, \n  changeTradingInterval, \n  setMarkets, \n  setTokens, \n  setExchangeInfo, \n} = tradingSlice.actions\n\nexport default tradingSlice\n","import { useDispatch, useSelector } from 'react-redux'\nimport { updateWalletLayer1, reset,statusUnset } from './reducer';\nimport { WalletLayer1States } from './interface';\nimport React from 'react';\n\nexport function useWalletLayer1(): WalletLayer1States & {\n    updateWalletLayer1:()=> void,\n    statusUnset:()=> void,\n    resetLayer1:()=>void,\n} {\n    const walletLayer1:WalletLayer1States = useSelector((state: any) => state.walletLayer1)\n    const dispatch = useDispatch();\n\n    return {\n        ...walletLayer1,\n        resetLayer1:React.useCallback(()=>dispatch(reset(undefined)),[dispatch]),\n        statusUnset:React.useCallback(()=>dispatch(statusUnset(undefined)),[dispatch]),\n        updateWalletLayer1:React.useCallback(()=>dispatch(updateWalletLayer1(undefined)),[dispatch]),\n    }\n\n}\n","import { createSlice, PayloadAction, Slice } from '@reduxjs/toolkit'\nimport { STATUS } from '../constant';\nimport { StateBase } from '../interface';\nimport { SocketMap } from './interface';\n\nconst initialState: StateBase & {socket: SocketMap} = {\n  socket: {},\n  status: 'UNSET',\n  errorMessage: null,\n}\nconst socketSlice: Slice<StateBase & {socket: SocketMap}> = createSlice({\n  name: 'socket',\n  initialState,\n  reducers: {\n    socketEnd(state,action:PayloadAction<undefined>){\n      state.socket = {};\n      state.status = STATUS.PENDING;\n    },\n    sendSocketTopic(state, action: PayloadAction<{socket: SocketMap}>) {\n      state.socket = action.payload.socket\n    },\n    getSocketStatus(state, action: PayloadAction<undefined>) {\n\n      // @ts-ignore\n      if (action.error) {\n        state.status = STATUS.ERROR\n        // @ts-ignore\n        state.errorMessage = action.error\n      }\n      // state.socket = action.payload.socket\n      state.status = STATUS.DONE\n    },\n\n    statusUnset: state => {\n      state.status = STATUS.UNSET\n    }\n\n  },\n});\nexport { socketSlice };\nexport const { getSocketStatus, sendSocketTopic, socketEnd, statusUnset} = socketSlice.actions;\n","import { myLog } from \"utils/log_tools\"\n\nexport enum CONSTANTS {\n    Handler = 'handler',\n    AccountId = 'account_id',\n    Account = 'account',\n    Apikey = 'apikey',\n    Eddsakey = 'eddsakey',\n    ActiveTime = 'active_time',\n    AmmOrder = 'amm_order',\n    HardwareAddresses = 'hardware_addresses',\n}\n\nconst SESSION_TIMEOUT_SECONDS = 600\n\nexport class UserStorage {\n\n    public static getHandler() {\n        const rawHandler = sessionStorage.getItem(CONSTANTS.Handler)\n        try {\n            if (rawHandler !== undefined && rawHandler !== null)\n                return parseInt(rawHandler)\n        } catch (err) {\n        }\n        return undefined\n    }\n\n    public static setHandler(handler: any) {\n        sessionStorage.setItem(CONSTANTS.Handler, handler)\n    }\n\n    public static clearHandler() {\n        sessionStorage.removeItem(CONSTANTS.Handler)\n    }\n\n    public static checkTimeout(reset: boolean = false) : boolean {\n        let dateTimeStr = localStorage.getItem(CONSTANTS.ActiveTime)\n        let now = new Date().getTime()\n\n        if (dateTimeStr !== null && !reset) {\n            let tmpDt = new Date(parseInt(dateTimeStr))\n\n            if(now - tmpDt.getTime() > SESSION_TIMEOUT_SECONDS * 1000) {\n                myLog(`TIMEOUT! now:${now} dateTimeStr:${dateTimeStr} delta:${now - tmpDt.getTime()}`)\n                sessionStorage.clear()\n                localStorage.setItem(CONSTANTS.ActiveTime, now.toString())\n                return true\n            }\n        } else {\n            localStorage.setItem(CONSTANTS.ActiveTime, now.toString())\n        }\n\n        return false\n    }\n\n\n    public static getAccountId() {\n        const rawId = sessionStorage.getItem(CONSTANTS.AccountId)\n        try {\n            if (rawId)\n                return parseInt(rawId)\n        } catch (err) {\n        }\n        return undefined\n    }\n\n    public static setAccountId(accountId: number) {\n        sessionStorage.setItem(CONSTANTS.AccountId, accountId.toString())\n    }\n\n    public static getAccount() {\n        return sessionStorage.getItem(CONSTANTS.Account)\n    }\n\n    public static setAccount(account: string) {\n        sessionStorage.setItem(CONSTANTS.Account, account)\n    }\n\n    public static getApikey() {\n        return sessionStorage.getItem(CONSTANTS.Apikey)\n    }\n\n    public static setApikey(apikey: string) {\n        sessionStorage.setItem(CONSTANTS.Apikey, apikey)\n    }\n\n    public static getEddsakey() {\n        return sessionStorage.getItem(CONSTANTS.Eddsakey)\n    }\n\n    public static setEddsakey(eddsakey: string) {\n        sessionStorage.setItem(CONSTANTS.Eddsakey, eddsakey)\n    }\n\n    public static getAmmOrder(): string {\n        var orderHash = localStorage.getItem(CONSTANTS.AmmOrder)\n        return orderHash ? orderHash : ''\n    }\n\n    public static setAmmOrder(orderHash: string) {\n        localStorage.setItem(CONSTANTS.AmmOrder, orderHash)\n    }\n\n    public static clearAmmOrder() {\n        localStorage.removeItem(CONSTANTS.AmmOrder)\n    }\n\n    public static isHardwareAddress(address: string) {\n        let current = localStorage.getItem(CONSTANTS.HardwareAddresses)\n        if (current) {\n            if (current.includes(address.toLowerCase())) {\n                return true\n            }\n        }\n        return false\n    }\n\n    public static saveHardwareAddress(address: string) {\n        let current = localStorage.getItem(CONSTANTS.HardwareAddresses);\n        if (current) {\n            if (current.includes(address.toLowerCase()) !== true) {\n                let newValue = current + ',' + address.toLowerCase();\n                localStorage.setItem(CONSTANTS.HardwareAddresses, newValue);\n            }\n        } else {\n            localStorage.setItem(CONSTANTS.HardwareAddresses, address.toLowerCase());\n        }\n\n    }\n}\n","import { createSlice, PayloadAction, Slice } from '@reduxjs/toolkit'\nimport {  TickerStates } from './interface';\nimport { STATUS } from '../constant';\nimport { CoinKey } from '@loopring-web/common-resources';\n\nconst initialState:Required<TickerStates>  = {\n    tickerMap:{},\n    status:'UNSET',\n    errorMessage:null,\n}\nconst tickerMapSlice:Slice = createSlice({\n    name: 'tickerMap',\n    initialState,\n    reducers: {\n        getTicker(state, action:PayloadAction<CoinKey<any>>) {\n            state.status = STATUS.PENDING\n        },\n        getTickers(state, action:PayloadAction<Array<CoinKey<any>>>) {\n            state.status = STATUS.PENDING\n        },\n        getTickerStatus(state, action: PayloadAction<TickerStates>) {\n            // @ts-ignore\n            if (action.error) {\n                state.status =  STATUS.ERROR\n                // @ts-ignore\n                state.errorMessage = action.error\n            }\n            state.tickerMap = action.payload.tickerMap;//{...state.tickerMap,...};\n            state.status = STATUS.DONE\n        },\n        statusUnset: state => {\n            state.status = STATUS.UNSET\n        }\n\n    },\n});\nexport { tickerMapSlice };\nexport const { getTicker,getTickers, getTickerStatus, statusUnset } = tickerMapSlice.actions;","import { createSlice, PayloadAction, Slice } from '@reduxjs/toolkit'\nimport { WalletLayer2Map, WalletLayer2States } from './interface';\nimport { STATUS } from '../constant';\n\n\nconst initialState:WalletLayer2States  = {\n    walletLayer2:undefined,\n    status:'UNSET',\n    errorMessage:null,\n}\nconst walletLayer2Slice:Slice = createSlice({\n    name: 'walletLayer2',\n    initialState,\n    reducers: {\n        updateWalletLayer2(state, action:PayloadAction<string | undefined>) {\n            state.status = STATUS.PENDING\n        },\n        reset(state, action:PayloadAction<string | undefined>) {\n            state.walletLayer2 = undefined;\n            state.status = STATUS.UNSET;\n        },\n        getWalletLayer2Status(state, action: PayloadAction<{ walletLayer2:WalletLayer2Map<object> }>) {\n            // @ts-ignore\n            if (action.error) {\n                state.status =  STATUS.ERROR\n                // @ts-ignore\n                state.errorMessage = action.error\n            }\n            state.walletLayer2 = {...action.payload.walletLayer2};\n            state.status = STATUS.DONE\n        },\n        statusUnset: state => {\n            state.status = STATUS.UNSET\n        }\n    },\n});\nexport { walletLayer2Slice };\nexport const {  updateWalletLayer2,getWalletLayer2Status,statusUnset,reset } = walletLayer2Slice.actions\n","import { useMemo, useState, useEffect } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\n\nimport { Web3Provider } from '@ethersproject/providers'\nimport { Web3ReactContextInterface } from '@web3-react/core/dist/types'\n\nimport { useWeb3React } from '@web3-react/core'\n\nimport { injected } from 'networks/web3_connectors'\n\nimport { ChainId, NetworkContextName } from 'loopring-sdk'\n\n/*\nimport EXCHANGE_ABI from 'config/abis/exchange_3_6.json'\nimport ERC20_ABI from 'config/abis/erc20.json'\nimport DEPOSIT_ABI from 'config/abis/deposit.json'\n\nimport Web3 from 'web3'\n*/\n\nexport function useActiveWeb3React(): Web3ReactContextInterface<Web3Provider> & { chainId?: ChainId } {\n  const context = useWeb3React<Web3Provider>()\n  const contextNetwork = useWeb3React<Web3Provider>(NetworkContextName)\n  return context.active ? context : contextNetwork\n}\n\nexport function useEtherscan() {\n  const { chainId } = useActiveWeb3React()\n\n  const [etherscanUrl, setEtherscanUrl] = useState<string>('')\n\n  useEffect(() => {\n    switch(chainId) {\n      case ChainId.MAINNET:\n        setEtherscanUrl('https://etherscan.io/address/')\n        break\n      default:\n        setEtherscanUrl('https://goerli.etherscan.io/address/')\n    }\n  }, [chainId])\n\n  return {\n    etherscanUrl,\n  }\n}\n\nexport function useEagerConnect() {\n\n  const { activate, active } = useWeb3React()\n\n  const [tried, setTried] = useState(false)\n\n  useEffect(() => {\n    injected.isAuthorized().then((isAuthorized: boolean) => {\n      if (isAuthorized) {\n        console.log('useEagerConnect isAuthorized')\n        activate(injected, undefined, true).catch(() => {\n          setTried(true)\n        })\n      } else {\n        console.log('useEagerConnect NOT isAuthorized')\n        setTried(true)\n      }\n    })\n  }, []) // intentionally only running on mount (make sure it's only mounted once :))\n\n  // if the connection worked, wait until we get confirmation of that to flip the flag\n  useEffect(() => {\n    if (!tried && active) {\n      setTried(true)\n    }\n  }, [tried, active])\n\n  return tried\n}\n\nexport function useInactiveListener(onReConnectInjected: any = undefined, suppress: boolean = false) {\n  const { active, error, activate, chainId, } = useWeb3React()\n  const dispatch = useDispatch()\n\n  useEffect((): any => {\n    const { ethereum } = window as any\n\n    const reConnectInjected = () => {\n      console.log('--------------------------> reConnectInjected')\n      activate(injected)\n      if (onReConnectInjected) {\n        onReConnectInjected()\n      }\n    }\n\n    if (ethereum && ethereum.on && !active && !error) {\n\n      const handleChainChanged = (chainId: string | number) => {\n        console.log('Handling \\'chainChanged\\' event with payload', chainId)\n        reConnectInjected()\n      }\n      const handleAccountsChanged = (accounts: string[]) => {\n        console.log('---------------------------------------------')\n        console.log('Handling \\'accountsChanged\\' event with payload', accounts)\n        console.log('before reset accounts.length=', accounts.length)\n        if (accounts.length > 0) {\n          console.log('before reset!!!!!!!!!!!!!!!!1')\n          reConnectInjected()\n        }\n      }\n\n      ethereum.on('chainChanged', handleChainChanged)\n      ethereum.on('accountsChanged', handleAccountsChanged)\n\n      return () => {\n        if (ethereum.removeListener) {\n          ethereum.removeListener('chainChanged', handleChainChanged)\n          ethereum.removeListener('accountsChanged', handleAccountsChanged)\n        }\n      }\n    }\n  }, [active, error, chainId, activate, dispatch])\n}\n\nexport function useBlockNumber() {\n  const { library, chainId } = useActiveWeb3React()\n\n  const [blockNumber, setBlockNumber] = useState<number>()\n\n  useEffect((): any => {\n      if (!!library) {\n          let stale = false\n\n          library\n              .getBlockNumber()\n              .then((blockNumber: number) => {\n                  if (!stale) {\n                      setBlockNumber(blockNumber)\n                  }\n              })\n              .catch(() => {\n                  if (!stale) {\n                      setBlockNumber(-1)\n                  }\n              })\n\n          const updateBlockNumber = (blockNumber: number) => {\n              setBlockNumber(blockNumber)\n          }\n          library.on('block', updateBlockNumber)\n\n          return () => {\n              stale = true\n              library.removeListener('block', updateBlockNumber)\n              setBlockNumber(undefined)\n          }\n      }\n  }, [library, chainId])\n\n  return {\n      blockNumber,\n  }\n}\n\nexport function useBalance() {\n  const { account, library, chainId } = useActiveWeb3React()\n\n  const [balance, setBalance] = useState<number>()\n  useEffect((): any => {\n      if (!!account && !!library) {\n          let stale = false\n\n          library\n              .getBalance(account)\n              .then((balance: any) => {\n                  if (!stale) {\n                      setBalance(balance)\n                  }\n              })\n              .catch(() => {\n                  if (!stale) {\n                      setBalance(0)\n                  }\n              })\n\n          return () => {\n              stale = true\n              setBalance(0)\n          }\n      }\n  }, [account, library, chainId]) // ensures refresh if referential identity of library doesn't change across chainIds\n\n  return {\n      balance,\n  }\n}\n","import { useDispatch, useSelector } from 'react-redux'\nimport { getUserRewards, statusUnset } from './reducer';\nimport { UserRewardsStates } from './interface';\nimport React from 'react';\n\nexport function useUserRewards(): UserRewardsStates & {\n    getUserRewards:()=>void,\n    statusUnset:()=>void,\n} {\n    const userRewardsMap:UserRewardsStates = useSelector((state: any) => state.userRewardsMap)\n    const dispatch = useDispatch();\n    return {\n        ...userRewardsMap,\n        statusUnset:React.useCallback(()=>dispatch(statusUnset(undefined)),[dispatch]),\n        getUserRewards: React.useCallback(()=>dispatch(getUserRewards(undefined)),[dispatch]),\n    }\n\n}\n","import { StateBase } from '../interface';\nimport { ChainId, ExchangeInfo } from 'loopring-sdk';\n\nexport enum ENV {\n    DEV='DEV',\n    UAT='UAT',\n    PROD='PROD',\n}\nexport enum NETWORKEXTEND {\n    NONETWORK = 'unknown'\n}\nexport type NETWORK = NETWORKEXTEND | ChainId\n\n\nexport type System<C extends {[key:string]:any}> = {\n    env:keyof typeof ENV,\n    chainId: 1|5|'unknown'\n    // network: keyof typeof NETWORK,\n    socketURL:string,\n    baseURL: string,\n    faitPrices:{ [k in keyof C]:{price:any,[key:string]:any}} | undefined,\n    gasPrice:number | undefined,\n    forex:number | undefined,\n    exchangeInfo: ExchangeInfo | undefined,\n\n}\n\nexport type SystemStatus = System<{[key:string]:any}> & {\n    // system:System | {}\n    __timer__:NodeJS.Timeout | -1\n    topics: any[]\n}  & StateBase\n\n\n\n","import { createSlice, PayloadAction, Slice } from '@reduxjs/toolkit'\nimport { WalletLayer1Map, WalletLayer1States } from './interface';\nimport { STATUS } from '../constant';\n\n\nconst initialState:WalletLayer1States  = {\n    walletLayer1:undefined,\n    status:'UNSET',\n    errorMessage:null,\n}\nconst walletLayer1Slice:Slice = createSlice({\n    name: 'walletLayer1',\n    initialState,\n    reducers: {\n        updateWalletLayer1(state, action:PayloadAction<string | undefined>) {\n            state.status = STATUS.PENDING\n        },\n        reset(state, action:PayloadAction<string | undefined>) {\n            state.walletLayer1 = undefined;\n            state.status = STATUS.UNSET;\n        },\n        getWalletLayer1Status(state, action: PayloadAction<{ walletLayer1:WalletLayer1Map<object> }>) {\n            // @ts-ignore\n            if (action.error) {\n                state.status =  STATUS.ERROR\n                // @ts-ignore\n                state.errorMessage = action.error\n            }\n            state.walletLayer1 = {...action.payload.walletLayer1};\n            state.status = STATUS.DONE\n        },\n        statusUnset: state => {\n            state.status = STATUS.UNSET\n        }\n    },\n});\nexport { walletLayer1Slice };\nexport const { updateWalletLayer1, getWalletLayer1Status,statusUnset,reset } = walletLayer1Slice.actions\n","import { createSlice, PayloadAction, Slice } from '@reduxjs/toolkit'\nimport {  UserRewardsStates } from './interface';\nimport { STATUS } from '../constant';\n\nconst initialState:UserRewardsStates = {\n    userRewardsMap:undefined,\n    status:'UNSET',\n    errorMessage:null,\n    __timer__:-1,\n}\nconst userRewardsMapSlice:Slice<UserRewardsStates> = createSlice({\n    name: 'userRewardsMap',\n    initialState,\n    reducers: {\n        getUserRewards(state, action:PayloadAction<undefined>) {\n            state.status = STATUS.PENDING\n        },\n        getUserRewardsStatus(state, action: PayloadAction<UserRewardsStates>) {\n            // @ts-ignore\n            if (action.error) {\n                state.status =  STATUS.ERROR\n                // @ts-ignore\n                state.errorMessage = action.error\n            }\n            state.userRewardsMap = {...state.userRewardsMap,...action.payload.userRewardsMap};\n            if(action.payload.__timer__){\n                state.__timer__  =  action.payload.__timer__\n            }\n            state.status = STATUS.DONE\n        },\n        statusUnset: state => {\n            state.status = STATUS.UNSET\n        }\n\n    },\n});\nexport { userRewardsMapSlice };\nexport const { getUserRewards, getUserRewardsStatus, statusUnset } = userRewardsMapSlice.actions;","import { createSlice, PayloadAction, Slice } from '@reduxjs/toolkit'\nimport { AmmActivityMapStates } from './interface';\nimport { STATUS } from '../../constant';\n\n\nconst initialState:Required<AmmActivityMapStates>  = {\n    ammActivityMap:{},\n    status:'UNSET',\n    errorMessage:null,\n}\nconst ammActivityMapSlice:Slice = createSlice({\n    name: 'ammActivityMap',\n    initialState,\n    reducers: {\n        getAmmActivityMap(state, action:PayloadAction<string | undefined>) {\n            state.status = STATUS.PENDING\n        },\n        getAmmActivityMapStatus(state, action: PayloadAction<AmmActivityMapStates>) {\n            // @ts-ignore\n            if (action.error) {\n                state.status =  STATUS.ERROR\n                // @ts-ignore\n                state.errorMessage = action.error\n            }\n            state.ammActivityMap = {...action.payload.ammActivityMap};\n            state.status = STATUS.DONE\n        },\n        statusUnset: state => {\n            state.status = STATUS.UNSET\n        }\n\n    },\n});\nexport { ammActivityMapSlice };\nexport const { getAmmActivityMap, getAmmActivityMapStatus, statusUnset } = ammActivityMapSlice.actions\n","import { createSlice, PayloadAction, Slice } from '@reduxjs/toolkit'\nimport { GetTokenMapParams, TokenMapStates } from './interface';\nimport { STATUS } from '../constant';\n\nconst initialState: TokenMapStates<object> = {\n    coinMap: {},\n    addressIndex: undefined,\n    tokenMap: undefined,\n    marketMap: undefined,\n    idIndex: undefined,\n    status: 'UNSET',\n    errorMessage: null,\n}\nconst tokenMapSlice: Slice<TokenMapStates<object>> = createSlice({\n    name: 'tokenMap',\n    initialState,\n    reducers: {\n        getTokenMap(state, action: PayloadAction<GetTokenMapParams<any>>) {\n            state.status = STATUS.PENDING\n        },\n        getTokenMapStatus(state, action: PayloadAction<TokenMapStates<object>>) {\n            // @ts-ignore      console.log(action.type)\n            if (action.error) {\n                state.status = STATUS.ERROR\n                // @ts-ignore\n                state.errorMessage = action.error\n            }\n\n            const {tokenMap, marketMap, addressIndex, idIndex, coinMap, marketArray, marketCoins} = action.payload;\n            if (tokenMap) { state.tokenMap = tokenMap }\n            if (marketMap) { state.marketMap = marketMap }\n            if (addressIndex) { state.addressIndex = addressIndex }\n            if (idIndex) { state.idIndex = idIndex }\n            if (coinMap) { state.coinMap = coinMap }\n            if (marketArray) { state.marketArray = marketArray }\n            if (marketCoins)  { state.marketCoins = marketCoins }\n            // if (tokenPairsMap) {state.tokenPairsMap = tokenPairsMap }\n            state.status = STATUS.DONE;\n        },\n        // getTokenPairMap(state, action: PayloadAction<{tokenPairs: TokenPairs }>) {\n        //     const {tokenPairs} = action.payload;\n        //     const tokenPairsMap =  Reflect.ownKeys(tokenPairs).reduce((prev,key)=>{\n        //         // @ts-ignore\n        //         return prev[key as string] =  tokenPairs[key as string].tokenList\n        //     }, {} )\n        //     if (tokenPairsMap) {state.tokenPairsMap = tokenPairsMap }\n        //     // state.status = STATUS.PENDING\n        // },\n        statusUnset: state => {\n            state.status = STATUS.UNSET\n        }\n\n    },\n});\nexport { tokenMapSlice };\nexport const {getTokenMap, getTokenMapStatus, statusUnset} = tokenMapSlice.actions;","import { createSlice, PayloadAction, Slice } from '@reduxjs/toolkit'\nimport { ENV, System, SystemStatus } from './interface';\nimport { STATUS } from '../constant';\n\nconst initialState: SystemStatus = {\n    env: ENV.PROD,\n    chainId: 'unknown',\n    // network:'NONETWORK',\n    baseURL: '',\n    socketURL: '',\n    faitPrices: undefined,\n    gasPrice: undefined,\n    forex: undefined,\n    __timer__: -1,\n    status: 'UNSET',\n    errorMessage: null,\n\n    exchangeInfo: undefined,\n\n    topics: [],\n}\nconst systemSlice: Slice<SystemStatus> = createSlice({\n    name: 'system',\n    initialState,\n    reducers: {\n\n        updateSystem(state, action: PayloadAction<System<{[key:string]:any}>>) {\n            state.chainId = action.payload.chainId\n            state.status = STATUS.PENDING\n        },\n        updateSocketURL(state, action:PayloadAction<{socketURL:string}>) {\n            state.socketURL =  action.payload.socketURL;\n        },\n        updateRealTimeObj(state, action: PayloadAction<Partial<{ faitPrices: any, gasPrice: number, forex: number }>>) {\n            const {forex, faitPrices, gasPrice} = action.payload;\n            if (forex) {\n                state.forex = forex\n            }\n            if (faitPrices) {\n                state.faitPrices = faitPrices\n            }\n            if (gasPrice) {\n                state.gasPrice = gasPrice\n            }\n\n\n            // state = {\n            //     ...state.system,\n            //     forex: forex?,\n            //     faitPrices: action.payload.faitPrices ? action.payload.faitPrices : state.system.faitPrices,\n            //     gasPrice: action.payload.gasPrice ? action.payload.gasPrice : state.system.gasPrice,\n            // };\n\n        },\n        getSystemStatus(state, action: PayloadAction<Partial<SystemStatus>>) {\n\n            // @ts-ignore\n            if (action.error) {\n                state.status = STATUS.ERROR\n                // @ts-ignore\n                state.errorMessage = action.error\n            }\n            const {env, baseURL, faitPrices, gasPrice, forex, exchangeInfo, __timer__} = action.payload;\n            if (env) {\n                state.env = env\n            }\n            if (baseURL) {\n                state.baseURL = baseURL\n            }\n            if (faitPrices) {\n                state.faitPrices = faitPrices\n            }\n            if (gasPrice) {\n                state.gasPrice = gasPrice\n            }\n            if (forex) {\n                state.forex = forex\n            }\n            \n            if (exchangeInfo) {\n                state.exchangeInfo = exchangeInfo\n            }\n\n            if (__timer__) {\n                state.__timer__ = __timer__\n            }\n            state.status = STATUS.DONE\n        },\n        statusUnset: state => {\n            state.status = STATUS.UNSET\n        }\n\n    },\n});\nexport { systemSlice };\nexport const {updateSystem, setTopics, getSystemStatus, statusUnset, updateRealTimeObj, updateSocketURL} = systemSlice.actions;","import {\n    AmmPoolActivityRule,\n    AmmPoolActivityStatus,\n    AmmPoolSnapshot,\n    LoopringMap,\n    TickerData,\n    toBig,\n} from 'loopring-sdk';\nimport { AmmActivity, AmmCardProps } from '@loopring-web/common-resources';\nimport store from '../../stores';\nimport { deepClone } from '../../utils/obj_tools';\nimport { AmmUserReward, AmmUserRewardMap } from 'loopring-sdk/dist/defs/loopring_defs';\nimport BigNumber from 'bignumber.js';\nimport { MyAmmLP } from '@loopring-web/common-resources';\nimport { volumeToCount, volumeToCountAsBigNumber } from './volumeToCount';\nimport { coinMap } from '@loopring-web/component-lib';\nimport { AmmDetailStore } from '../../stores/Amm/AmmMap';\nimport { WalletMapExtend } from './makeWallet';\n\nexport type AmmActivityViewMap<R, I> = {\n    [key in keyof R]?: AmmActivity<I>[] | undefined\n}\nexport const makeUIAmmActivityMap = <R extends { [ key: string ]: any }, I extends { [ key: string ]: any }>\n({ammActivityMap, type, ammPoolActivityStatus}: {\n    ammActivityMap: LoopringMap<LoopringMap<AmmPoolActivityRule[ ]>> | undefined,\n    type: 'AMM_MINING' | 'SWAP_VOLUME_RANKING',\n    ammPoolActivityStatus: AmmPoolActivityStatus[]\n}, myReward: AmmUserRewardMap | undefined):\n    Array<AmmCardProps<I>> => {\n    const {coinMap, tokenMap, idIndex} = store.getState().tokenMap\n    let ammActivityViewMap: AmmActivityViewMap<R, I> = {}\n    if (ammActivityMap && ammActivityMap[ type ]) {\n\n\n        // @ts-ignore\n        ammPoolActivityStatus.forEach((status: AmmPoolActivityStatus) => {\n\n            if (ammActivityMap[ type ][ status ]) {\n                // @ts-ignore\n                ammActivityMap[ type ][ status ].reduce((prev: AmmActivityViewMap<R, I>, ammPoolActivityRule: AmmPoolActivityRule) => {\n\n                    if (coinMap && ammPoolActivityRule.awardRules[ 0 ] && idIndex && tokenMap) {\n\n                        const symbol = idIndex[ ammPoolActivityRule.awardRules[ 0 ].tokenId as any ]\n\n                        // @ts-ignore\n                        const item = {\n                            // @ts-ignore\n                            rewardToken: coinMap[ symbol ],\n                            myRewards: status === AmmPoolActivityStatus.InProgress && myReward && myReward[ ammPoolActivityRule.market ] ?\n                                volumeToCount(symbol, myReward[ ammPoolActivityRule.market ]?.currentRewards[ 0 ].volume) : 0,\n                            duration: {\n                                from: new Date(ammPoolActivityRule?.rangeFrom),\n                                to: new Date(ammPoolActivityRule?.rangeTo),\n                            },\n                            isPass: AmmPoolActivityStatus.EndOfGame === status,\n                        }\n                        if (prev[ ammPoolActivityRule.market ]) {\n                            // @ts-ignore\n                            prev[ ammPoolActivityRule.market ].push(item);\n                        } else {\n                            // @ts-ignore\n                            prev[ ammPoolActivityRule.market ] = [item];\n                        }\n\n\n                        // return prev;\n                    }\n                    return prev;\n                }, ammActivityViewMap)\n\n            }\n        })\n    }\n    const resultArray = makeAsCard(ammActivityViewMap)\n    // console.log(resultArray)\n    return resultArray;\n\n\n}\nconst makeAsCard = <R extends { [ key: string ]: any }, I extends { [ key: string ]: any }>\n(ammActivityViewMap: AmmActivityViewMap<R, I> | undefined, myReward?: any): Array<AmmCardProps<I>> => {\n    const {coinMap} = store.getState().tokenMap\n    const {ammMap} = store.getState().amm.ammMap\n    try {\n        if (ammActivityViewMap && coinMap) {\n            // @ts-ignore\n            return Reflect.ownKeys(ammActivityViewMap).reduce((prev: Array<AmmCardProps<I>>, key: string) => {\n                const _ammInfo = ammMap[ key as string ]\n                if (_ammInfo && _ammInfo.coinA && coinMap && ammActivityViewMap[ key ]) {\n\n                    // @ts-ignore\n                    const itemArray = ammActivityViewMap[ key ].map((item) => {\n                        return {\n                            ...deepClone(_ammInfo),\n                            // @ts-ignore\n                            coinAInfo: coinMap[ _ammInfo.coinA ],\n                            // @ts-ignore\n                            coinBInfo: coinMap[ _ammInfo.coinB ],\n                            activity: item,\n                        }\n                    })\n                    prev = [...prev, ...itemArray]\n                }\n                return prev;\n            }, [] as Array<AmmCardProps<I>>) as Array<AmmCardProps<I>>\n        } else {\n            return [] as Array<AmmCardProps<I>>\n        }\n    } catch (error) {\n        console.log(error)\n        return []\n    }\n}\ntype Value = undefined | number;\nexport type SummaryMyAmm = {\n    rewardDollar: Value,\n    rewardYuan: Value,\n    feeDollar: Value,\n    feeYuan: Value,\n}\nexport const makeSummaryMyAmm = <C extends { [ key: string ]: any }>({\n                                                                         userRewardsMap\n                                                                     }: {\n    userRewardsMap: LoopringMap<AmmUserReward> | undefined\n}):\n    SummaryMyAmm | undefined => {\n    const {coinMap, idIndex, tokenMap} = store.getState().tokenMap;\n    const {faitPrices, forex} = store.getState().system;\n    if (userRewardsMap && idIndex && coinMap && tokenMap && faitPrices && forex) {\n        let summaryMyAmm = Object.keys(userRewardsMap).reduce((prev, key) => {\n            if (/AMM-/i.test(key)) {\n                // @ts-ignore\n                const [, coinA, coinB] = key.match(/AMM-(\\w+)-(\\w+)/i);\n                const ammUserReward = userRewardsMap[ key ]\n                const {\n                    rewardDollar,\n                    rewardYuan,\n                    feeDollar,\n                    feeYuan\n                } = getOneRewardInfo({coinB, coinA, ammUserReward, idIndex, faitPrices, forex})\n                prev.rewardDollar = rewardDollar ? toBig(rewardDollar).plus(prev.rewardDollar).toNumber() : 0;\n                prev.rewardYuan = rewardYuan ? toBig(rewardYuan).plus(prev.rewardYuan).toNumber() : 0;\n                prev.feeDollar = feeDollar ? toBig(feeDollar).plus(prev.feeDollar).toNumber() : 0;\n                prev.feeYuan = feeYuan ? toBig(feeYuan).plus(prev.feeYuan).toNumber() : 0;\n            }\n            return prev\n        }, {\n            rewardDollar: 0,\n            rewardYuan: 0,\n            feeDollar: 0,\n            feeYuan: 0\n        })\n\n        return summaryMyAmm\n    }\n    return undefined\n}\nconst getOneRewardInfo = <C>({\n                                 coinA,\n                                 coinB,\n                                 ammUserReward,\n                                 idIndex,\n                                 faitPrices,\n                                 forex,\n                                 walletMap,\n                                 snapShotData\n                             }: any) => {\n    let rewardToken, rewardToken2, feeA, feeB, feeDollar, feeYuan, reward, reward2, rewardDollar, rewardYuan;\n    if (ammUserReward) {\n        rewardToken = ammUserReward.currentRewards[ 0 ] ? idIndex[ ammUserReward.currentRewards[ 0 ].tokenId as number ] : undefined\n        rewardToken2 = ammUserReward.currentRewards[ 1 ] ? idIndex[ ammUserReward.currentRewards[ 1 ].tokenId as number ] : undefined\n        feeA = ammUserReward ? volumeToCountAsBigNumber(coinA, ammUserReward.feeRewards[ 0 ]) : toBig(0);\n        feeB = ammUserReward ? volumeToCountAsBigNumber(coinB, ammUserReward.feeRewards[ 1 ]) : toBig(0);\n        feeA = feeA ? feeA : toBig(0);\n        feeB = feeB ? feeB : toBig(0);\n        feeDollar = feeA.times(faitPrices[ coinA ].price).plus(feeB.times(faitPrices[ coinB ].price))\n        feeYuan = feeDollar.times(forex);\n        reward = rewardToken ? volumeToCountAsBigNumber(rewardToken, ammUserReward.currentRewards[ 0 ].volume) as BigNumber : toBig(0);\n        reward2 = rewardToken2 ? volumeToCountAsBigNumber(rewardToken2, ammUserReward.currentRewards[ 1 ].volume) as BigNumber : toBig(0);\n        reward = reward ? reward : toBig(0);\n        reward2 = reward2 ? reward2 : toBig(0);\n        rewardDollar = reward.times(rewardToken ? faitPrices[ rewardToken ].price : 1).plus(reward2.times(rewardToken2 ? faitPrices[ rewardToken2 ].price : 1));\n        rewardYuan = rewardDollar.times(forex);\n    }\n    let balanceA, balanceB, balanceDollar, balanceYuan;\n    if (walletMap && walletMap[ 'LP-' + coinA + '-' + coinB ] && snapShotData) {\n        // @ts-ignore\n        const ratio = new BigNumber(walletMap[ 'LP-' + coinA + '-' + coinB ].count).div(snapShotData.ammPoolsBalance.lp.volume);\n        balanceA = ratio.times(volumeToCountAsBigNumber(coinA, snapShotData.ammPoolsBalance.pooled[ 0 ].volume) || 1);\n        balanceB = ratio.times(volumeToCountAsBigNumber(coinB, snapShotData.ammPoolsBalance.pooled[ 1 ].volume) || 1);\n        // @ts-ignore\n        balanceDollar = balanceA.times(faitPrices[ coinA ].price).plus(balanceB.times(faitPrices[ coinB ].price))\n        balanceYuan = balanceDollar.times(forex)\n    }\n\n    return {\n        feeA: feeA ? feeA.toNumber() : undefined,\n        feeB: feeB ? feeB.toNumber() : undefined,\n        reward: reward ? reward.toNumber() : undefined,\n        rewardToken: rewardToken ? coinMap[ rewardToken ] : undefined,\n        reward2: reward2 ? reward2.toNumber() : undefined,\n        rewardToken2: rewardToken2 ? coinMap[ rewardToken2 ] : undefined,\n        rewardDollar: rewardDollar ? rewardDollar.toNumber() : undefined,\n        rewardYuan: rewardYuan ? rewardYuan.toNumber() : undefined,\n        feeDollar: feeDollar ? feeDollar.toNumber() : undefined,\n        feeYuan: feeYuan ? feeYuan.toNumber() : undefined,\n        ammDetail: {\n            coinAInfo: coinMap[ coinA ],\n            coinBInfo: coinMap[ coinB ]\n        },\n        balanceA: balanceA ? balanceA.toNumber() : undefined,\n        balanceB: balanceB ? balanceB.toNumber() : undefined,\n        balanceDollar: balanceDollar ? balanceDollar.toNumber() : undefined,\n        balanceYuan: balanceYuan ? balanceYuan.toNumber() : undefined,\n    } as MyAmmLP<C>\n}\n\nexport const makeMyAmmWithSnapshot = <C extends { [ key: string ]: any }>(market: any, _walletMap: WalletMapExtend<C> | undefined, ammUserRewardMap: LoopringMap<AmmUserReward> | undefined, snapShotData?: {\n    tickerData?: TickerData | undefined\n    ammPoolsBalance: AmmPoolSnapshot | undefined\n} | undefined) => {\n    const {coinMap, idIndex, tokenMap} = store.getState().tokenMap;\n    const {faitPrices, forex} = store.getState().system;\n    const [, coinA, coinB] = market.match(/(\\w+)-(\\w+)/i);\n    let _myAmm: Partial<MyAmmLP<C>> = {};\n    if (ammUserRewardMap && ammUserRewardMap[ 'AMM-' + market ]\n        && snapShotData && snapShotData.ammPoolsBalance) {\n        const ammUserReward: AmmUserReward = ammUserRewardMap[ 'AMM-' + market ];\n        // @ts-ignore\n        if (coinMap && tokenMap && idIndex && forex && faitPrices) {\n            _myAmm = getOneRewardInfo({\n                coinA, coinB, ammUserReward,\n                idIndex, faitPrices, forex, walletMap: _walletMap, snapShotData\n            })\n\n            return _myAmm as MyAmmLP<C>\n        }\n    }\n    return {\n        feeA: undefined,\n        feeB: undefined,\n        feeDollar: undefined,\n        feeYuan: undefined,\n        reward: undefined,\n        rewardToken: undefined as any,\n        balanceA: undefined,\n        balanceB: undefined,\n        balanceYuan: undefined,\n        balanceDollar: undefined,\n    }\n}\n\nexport const makeMyAmmWithStat = <C extends { [ key: string ]: any }>\n(market: any,\n _walletMap: WalletMapExtend<C> | undefined,\n ammUserRewardMap: LoopringMap<AmmUserReward> | undefined,\n ammDetail: AmmDetailStore<C>) => {\n    const {coinMap, idIndex, tokenMap} = store.getState().tokenMap;\n    const {faitPrices, forex} = store.getState().system;\n    const [, coinA, coinB] = market.match(/(\\w+)-(\\w+)/i);\n    let _myAmm = {};\n    let balanceA, balanceB, balanceDollar, balanceYuan;\n    if (_walletMap && _walletMap[ 'LP-' + coinA + '-' + coinB ] && forex) {\n        // @ts-ignore\n        const ratio = new BigNumber(_walletMap[ 'LP-' + coinA + '-' + coinB ].count).div(ammDetail.totalLPToken);\n        balanceA = ratio.times(volumeToCountAsBigNumber(coinA, ammDetail.totalA ? ammDetail.totalA : 0) || 1);\n        balanceB = ratio.times(volumeToCountAsBigNumber(coinB, ammDetail.totalB ? ammDetail.totalB : 0) || 1);\n        // @ts-ignore\n        balanceDollar = balanceA.times(faitPrices[ coinA ].price).plus(balanceB.times(faitPrices[ coinB ].price))\n        balanceYuan = balanceDollar.times(forex);\n        _myAmm = {\n            // ...ammDetail,\n            balanceA: balanceA.toNumber(),\n            balanceB: balanceB.toNumber(),\n            balanceYuan: balanceYuan.toNumber(),\n            balanceDollar: balanceDollar.toNumber(),\n        }\n    }\n    if (ammUserRewardMap && ammUserRewardMap[ 'AMM-' + market ]\n        && ammDetail && forex) {\n        const ammUserReward: AmmUserReward = ammUserRewardMap[ 'AMM-' + market ];\n        let rewardToken, rewardToken2, feeA, feeB, feeDollar, feeYuan, reward, reward2, rewardDollar, rewardYuan;\n\n        if (coinMap && tokenMap && idIndex && forex && faitPrices && ammUserReward) {\n            rewardToken = ammUserReward.currentRewards[ 0 ] ? idIndex[ ammUserReward.currentRewards[ 0 ].tokenId as number ] : undefined\n            rewardToken2 = ammUserReward.currentRewards[ 1 ] ? idIndex[ ammUserReward.currentRewards[ 1 ].tokenId as number ] : undefined\n            feeA = ammUserReward ? volumeToCountAsBigNumber(coinA, ammUserReward.feeRewards[ 0 ]) : toBig(0);\n            feeB = ammUserReward ? volumeToCountAsBigNumber(coinB, ammUserReward.feeRewards[ 1 ]) : toBig(0);\n            feeA = feeA ? feeA : toBig(0);\n            feeB = feeB ? feeB : toBig(0);\n            feeDollar = feeA.times(faitPrices[ coinA ].price).plus(feeB.times(faitPrices[ coinB ].price))\n            feeYuan = feeDollar.times(forex);\n            reward = rewardToken ? volumeToCountAsBigNumber(rewardToken, ammUserReward.currentRewards[ 0 ].volume) as BigNumber : toBig(0);\n            reward2 = rewardToken2 ? volumeToCountAsBigNumber(rewardToken2, ammUserReward.currentRewards[ 1 ].volume) as BigNumber : toBig(0);\n            reward = reward ? reward : toBig(0);\n            reward2 = reward2 ? reward2 : toBig(0);\n            rewardDollar = reward.times(rewardToken ? faitPrices[ rewardToken ].price : 1).plus(reward2.times(rewardToken2 ? faitPrices[ rewardToken2 ].price : 1));\n            rewardYuan = rewardDollar.times(forex);\n            _myAmm = {\n                ..._myAmm,\n                feeA: feeA ? feeA.toNumber() : undefined,\n                feeB: feeB ? feeB.toNumber() : undefined,\n                reward: reward ? reward.toNumber() : undefined,\n                // @ts-ignore\n                rewardToken: rewardToken ? coinMap[ rewardToken ] : undefined,\n                reward2: reward2 ? reward2.toNumber() : undefined,\n                // @ts-ignore\n                rewardToken2: rewardToken2 ? coinMap[ rewardToken2 ] : undefined,\n                rewardDollar: rewardDollar ? rewardDollar.toNumber() : undefined,\n                rewardYuan: rewardYuan ? rewardYuan.toNumber() : undefined,\n                feeDollar: feeDollar ? feeDollar.toNumber() : undefined,\n                feeYuan: feeYuan ? feeYuan.toNumber() : undefined,\n                ammDetail: {\n                    // @ts-ignore\n                    coinAInfo: coinA ? coinMap[ coinA ] : undefined,\n                    // @ts-ignore\n                    coinBInfo: coinB ? coinMap[ coinB ] : undefined,\n                },\n            }\n\n        }\n        return _myAmm as MyAmmLP<C>\n    }\n    return {\n        feeA: undefined,\n        feeB: undefined,\n        feeDollar: undefined,\n        feeYuan: undefined,\n        reward: undefined,\n        rewardToken: undefined as any,\n        balanceA: undefined,\n        balanceB: undefined,\n        balanceYuan: undefined,\n        balanceDollar: undefined,\n    }\n}\n\n// if (ammUserReward) {\n//     const symbol = ammUserReward.currentRewards[ 0 ] ? idIndex[ ammUserReward.currentRewards[ 0 ].tokenId as number ] : undefined\n//     const symbol2 = ammUserReward.currentRewards[ 1 ] ? idIndex[ ammUserReward.currentRewards[ 1 ].tokenId as number ] : undefined\n//\n//     _myAmm = {\n//         ..._myAmm,\n//         feeA: ammUserReward ? volumeToCount(coinA, ammUserReward.feeRewards[ 0 ]) : 0,//Number(ammUserReward.feeRewards[ 0 ]) : 0,\n//         feeB: ammUserReward ? volumeToCount(coinB, ammUserReward.feeRewards[ 1 ]) : 0,//Number(ammUserReward.feeRewards[ 1 ]) : 0,\n//         reward: symbol ? volumeToCount(symbol, ammUserReward.currentRewards[ 0 ].volume) : 0,\n//         // @ts-ignore\n//         rewardToken: symbol ? coinMap[ symbol ] : undefined,\n//         reward2: symbol2 ? volumeToCount(symbol2, ammUserReward.currentRewards[ 1 ].volume) : 0,\n//         // @ts-ignore\n//         rewardToken2: symbol2 ? coinMap[ symbol2 ] : undefined,\n//\n//\n//     }\n//     _myAmm.feeDollar = _myAmm.feeA && _myAmm.feeA * faitPrices[ coinA ].price;\n//     _myAmm.feeDollar = _myAmm.feeB && _myAmm.feeB * faitPrices[ coinB ].price;\n// }\n//\n//\n// if (_walletMap && _walletMap[ 'LP-' + market ]) {\n//     // @ts-ignore\n//     const ratio = new BigNumber(_walletMap[ 'LP-' + market ].detail.total).div(snapShotData.ammPoolsBalance.lp.volume);\n//     _myAmm = {\n//         ..._myAmm,  //snapShotData.ammPoolsBalance.pooled[ 0 ].volume).div(BIG10.pow(tokenMap[coinA].decimals)\n//         balanceA: ratio.times(volumeToCountAsBigNumber(coinA, snapShotData.ammPoolsBalance.pooled[ 0 ].volume) || 1).toNumber(),\n//         balanceB: ratio.times(volumeToCountAsBigNumber(coinB, snapShotData.ammPoolsBalance.pooled[ 1 ].volume) || 1).toNumber(),\n//     }\n//     // @ts-ignore\n//     _myAmm.balanceDollar = _myAmm.balanceA * faitPrices[ coinA ].price + _myAmm.balanceB * faitPrices[ coinB ].price\n//     _myAmm.balanceYuan = _myAmm.balanceDollar * forex\n// }\n// export const getAmmPoolGameUserRanks = ():Promise<AmmUserRewardMap> => {\n//     const {accountId} = store.getState().account\n//     //https://api3.loopring.io/api/v2/amm/user/rewards?owner=10917\n//     if(LoopringAPI.ammpoolAPI){\n//         return LoopringAPI.ammpoolAPI.getAmmPoolUserRewards({owner:accountId}).then(({ammUserRewardMap}:any)=>{\n//               return ammUserRewardMap  as AmmUserRewardMap\n//         })\n//     }else{\n//         return  Promise.resolve({} as AmmUserRewardMap);\n//     }\n//\n//     // return LoopringAPI.ammpoolAPI?.getUserAmmPoolTxs({accountId}, apiKey).then(({userAmmPoolTxs}) => {\n//     //     return userAmmPoolTxs\n//     // })\n//     // if(LoopringAPI.ammpoolAPI)   {\n//     //    let promiseList =  marketKeys.map((key)=>{\n//     //         // @ts-ignore\n//     //         return LoopringAPI.ammpoolAPI.getAmmPoolGameUserRank({owner:accAddr,ammPoolMarket:'key'},apiKey)\n//     //     })\n//     //     return Promise.all(promiseList).then(\n//     //         (array:any[])=>{\n//     //\n//     //           return  array.reduce((prev,item:{userRankList:GameRankInfo[]},index)=>{\n//     //                 const market = marketKeys[index]\n//     //                 prev[ market] = item.userRankList[0]\n//     //                 return item.userRankList[0]\n//     //             },{})\n//     //\n//     //         }\n//     //     )\n//     // }else{\n//     //   return  Promise.resolve({});\n//     // }\n//\n//\n//\n//\n// }\n//\n// {\n//     userRankList: GameRankInfo[];\n//     raw_data: any;\n// }\n","import { useDispatch, useSelector } from 'react-redux'\nimport { updateSystem } from './reducer';\nimport { System, SystemStatus } from './interface';\nimport React from 'react';\nimport { statusUnset } from '../Amm/AmmMap';\n\nexport function useSystem(): SystemStatus & {\n    updateSystem:(system:Partial<System< {[key:string]:any}>>)=>void,\n    statusUnset:()=>void,\n} {\n    const system:SystemStatus = useSelector((state: any) => state.system)\n    const dispatch = useDispatch();\n    return {\n        ...system,\n        statusUnset:React.useCallback(()=>dispatch(statusUnset(undefined)),[dispatch]),\n        updateSystem:React.useCallback((system:Partial<System<{[key:string]:any}>>)=>dispatch(updateSystem(system)),[dispatch]),\n    }\n\n}\n","import * as fm from 'loopring-sdk';\nimport store from '../../stores';\nimport { TradeTypes,CoinMap } from '@loopring-web/common-resources';\nimport { ammpoolAPI, LoopringAPI, userAPI } from '../../stores/apis/api';\nimport { AmmRecordRow, AmmTradeType,RawDataTradeItem } from '@loopring-web/component-lib';\nimport { AmmPoolTx, BillType, AmmTxType, UserAmmPoolTx,getBaseQuote, MarketTradeInfo, Side, UserTrade } from 'loopring-sdk';\nimport { volumeToCount, volumeToCountAsBigNumber } from './volumeToCount';\n\nexport const getUserTrades = (marketKey: any) => {\n    const userApi = userAPI();\n    const {accountId, apiKey} = store.getState().account\n    return userApi.getUserTrades({accountId}, apiKey).then((response: {\n        totalNum: any;\n        userTrades: UserTrade[];\n        raw_data: any;\n    }) => {\n        return response.userTrades\n    })\n}\nexport const makeMarketArray = (coinKey: any, marketTrades: MarketTradeInfo[]): RawDataTradeItem[] => {\n\n    let tradeArray: Array<Partial<RawDataTradeItem>> = []\n\n    marketTrades.forEach((item: MarketTradeInfo) => {\n        try {\n            const {base, quote} = getBaseQuote(item.market)\n            const {forex} = store.getState().system\n            const {currency} = store.getState().settings\n            const {tokenMap} = store.getState().tokenMap\n            if (tokenMap) {\n               // const baseToken = tokenMap[ base as string ]\n               // const quoteToken = tokenMap[ quote as string ]\n\n                // @ts-ignore\n                tradeArray.push({\n                    side: item.side === Side.Sell ? TradeTypes.Sell : TradeTypes.Buy,\n                    amount: {\n                        from: {\n                            key: base as string,\n                            value: base ? volumeToCount(base, item.volume) : undefined\n                        },\n                        to: {\n                            key: quote as string,\n                            value: base ? volumeToCountAsBigNumber(base, item.volume)?.times(item.price).toNumber():undefined\n                        },\n\n                    },\n                    price: {\n                        key: '',\n                        value: fm.toBig(item.price).toNumber(),\n                    },\n                    fee: {\n                        key: '',\n                        value: quote? volumeToCount(quote, item.fee):undefined, //fm.toBig(item.fee).div(BIG10.pow(quoteToken.decimals)).toNumber(),\n                    },\n                    time: parseInt(item.tradeTime.toString()),\n                })\n            }\n        } catch (error) {\n            //CATCHERROR:\n            console.log(error)\n            // new CustomError()\n        }\n\n    })\n    // console.log('tradeArray:', tradeArray)\n    return tradeArray as RawDataTradeItem[];\n\n}\n\nexport const getUserAmmTransaction = () => {\n    const {accountId, apiKey} = store.getState().account\n    return LoopringAPI.ammpoolAPI?.getUserAmmPoolTxs({accountId}, apiKey).then(({userAmmPoolTxs}) => {\n        return userAmmPoolTxs\n    })\n    // }\n\n}\n\n\nexport const makeMyAmmMarketArray = <C extends { [ key: string ]:any }>(coinKey: string|undefined, marketTransaction: UserAmmPoolTx[]): AmmRecordRow<C>[] => {\n\n    let tradeArray: Array<Partial<AmmRecordRow<C>>> = [];\n    let {tokenMap, coinMap, idIndex} = store.getState().tokenMap;\n    marketTransaction.forEach((item: UserAmmPoolTx) => {\n        try {\n           // const {base, quote} = getBaseQuote(coinKey)\n            const {forex} = store.getState().system\n            // const {currency} = store.getState().settings\n            if (coinMap && tokenMap && idIndex\n                && !(coinKey && tokenMap['LP-'+coinKey].tokenId !== item.lpToken.tokenId) ) {\n                // @ts-ignore\n                const [, coinA, coinB] = idIndex[item.lpToken.tokenId].match(/LP-(\\w+)-(\\w+)/i);\n                 \n                tradeArray.push({\n                        type: item.txType === AmmTxType.JOIN ? AmmTradeType.add : AmmTradeType.remove,\n                        //TODO:\n                        totalDollar: 1000,\n                        totalYuan: 1000 / Number(forex),\n                        amountA: volumeToCount(coinA,item.poolTokens[ 0 ]?.actualAmount),\n                        amountB: volumeToCount(coinA,item.poolTokens[ 1 ]?.actualAmount),\n                        time: Number(item.updatedAt),\n                        // @ts-ignore\n                        coinA: coinMap[ coinA ],\n                        // @ts-ignore\n                        coinB: coinMap[ coinB ],\n                        status: item.txStatus\n                    })\n                }\n                return tradeArray\n            }\n         catch (error) {\n            //CATCHERROR:\n            console.log(error)\n            // new CustomError()\n        }\n\n    })\n    // console.log('tradeArray:', tradeArray)\n    return tradeArray as AmmRecordRow<C>[];\n\n}\n\n\nexport const makeMarketAmmArray = <C extends object>(coinKey: any, marketTransaction: AmmPoolTx[]): AmmRecordRow<C>[] => {\n\n    let tradeArray: Array<Partial<AmmRecordRow<C>>> = [];\n\n    // marketTransaction.forEach((item: AmmPoolTx) => {\n    //     try {\n    //         const {base, quote} = getBaseQuote(coinKey)\n    //         const {forex} = store.getState().system\n    //         // const {currency} = store.getState().settings\n    //         const coinMap = store.getState().tokenMap.coinMap as CoinMap<C>\n    //         if (coinMap) {\n    //\n    //             // id: number;\n    //             // from: string;\n    //             // to: string;\n    //             // token: string;\n    //             // amount: string;\n    //             // tokenF: string;\n    //             // amountF: string;\n    //             // status: TxStatus;\n    //             // txHash: string;\n    //             // billType: BillType;\n    //             // income: boolean;\n    //             // timestamp: number;\n    //             // memo: string;\n    //             // price: string;\n    //             // transferType: TransferType;\n    //             // label: string;\n    //             tradeArray.push({\n    //                 // type: item.billType === BillType.ORDER ?\n    //                 //     AmmTradeType.swap : item.billType === BillType.TRANSFER && item.income ?\n    //                 //         AmmTradeType.add : AmmTradeType.remove,\n    //                 // // //TODO:\n    //                 // totalDollar: 1000,\n    //                 // totalYuan: 1000 / Number(forex),\n    //                 // amountA: Number(item.poolTokens[ 0 ].amount),\n    //                 // amountB: Number(item.poolTokens[ 1 ].amount),\n    //                 // time: Number(item.updatedAt),\n    //                 // coinA: coinMap[ base as keyof C],\n    //                 // coinB: coinMap[ quote as keyof C ],\n    //             })\n    //         }\n    //     } catch (error) {\n    //         //CATCHERROR:\n    //         console.log(error)\n    //         // new CustomError()\n    //     }\n    //\n    // })\n    // console.log('tradeArray:', tradeArray)\n    return tradeArray as AmmRecordRow<C>[];\n\n}\n","import { AmmpoolAPI, ChainId, ExchangeAPI, UserAPI, WalletAPI, WsAPI } from \"loopring-sdk\"\nimport { getChainId } from 'stores/trading/hook'\n\nexport const walletAPI = () => {\n    const walletApi = new WalletAPI(getChainId() as ChainId)\n    return walletApi\n}\n\nexport const userAPI = () => {\n    const userApi = new UserAPI(getChainId() as ChainId)\n    return userApi\n}\n\nexport const exchangeAPI = () => {\n    const exchangeApi = new ExchangeAPI(getChainId() as ChainId)\n    return exchangeApi\n}\n\nexport const ammpoolAPI = () => {\n    const ammpoolApi = new AmmpoolAPI(getChainId() as ChainId)\n    return  ammpoolApi\n}\n\nexport const wsAPI = () => {\n    const wsApi = new WsAPI(getChainId() as ChainId)\n    return wsApi\n}\n\nexport class LoopringAPI {\n    \n    public static userAPI: UserAPI | undefined = undefined\n    public static exchangeAPI: ExchangeAPI | undefined = undefined\n    public static ammpoolAPI: AmmpoolAPI | undefined = undefined\n    public static walletAPI: WalletAPI | undefined = undefined\n    public static wsAPI: WsAPI | undefined = undefined\n\n    public static InitApi = (chainId: ChainId) => {\n        LoopringAPI.userAPI = new UserAPI(chainId) \n        LoopringAPI.exchangeAPI = new ExchangeAPI(chainId) \n        LoopringAPI.ammpoolAPI = new AmmpoolAPI(chainId) \n        LoopringAPI.walletAPI = new WalletAPI(chainId) \n        LoopringAPI.wsAPI = new WsAPI(chainId) \n    }\n\n}\n","import { createAction } from '@reduxjs/toolkit'\n\n// fired once when the app reloads but before the app renders\n// allows any updates to be applied to store data loaded from localStorage\nexport const updateVersion = createAction<void>('global/updateVersion')\n","import { all, takeLatest, call, put } from \"redux-saga/effects\"\nimport { getAmmActivityMap, getAmmActivityMapStatus } from './reducer'\nimport { LoopringAPI } from '../../apis/api';\nconst getAmmActivityMapApi = async () => {\n\n    if(LoopringAPI.ammpoolAPI){\n        const { groupByRuleTypeAndStatus } =  await LoopringAPI.ammpoolAPI.getAmmPoolActivityRules();\n        return  {data:groupByRuleTypeAndStatus}\n    }else{\n        return {data:undefined}\n    }\n\n}\n\nexport function* getPostsSaga() {\n    try {\n        //\n        const { data } = yield call(getAmmActivityMapApi);\n        yield put(getAmmActivityMapStatus({ammActivityMap:data}));\n    } catch (err) {\n        yield put(getAmmActivityMapStatus(err));\n    }\n}\n\nexport default function* ammActivityMapSaga() {\n    yield all([takeLatest(getAmmActivityMap, getPostsSaga)]);\n}\n","import { all, call, fork, put, takeLatest } from \"redux-saga/effects\";\nimport { getAmmMap, getAmmMapStatus, updateRealTimeAmmMap } from './reducer';\nimport { AmmDetail } from '@loopring-web/common-resources';\nimport store from '../../index';\nimport { AmmPoolInfoV3, AmmPoolStat, toBig, TokenVolumeV3, } from \"loopring-sdk\";\nimport { ammpoolAPI } from \"stores/apis/api\";\nimport { PayloadAction } from '@reduxjs/toolkit';\nimport { AmmDetailStore, GetAmmMapParams } from './interface';\nimport { volumeToCount, volumeToCountAsBigNumber } from '../../../hooks/help';\n\ntype AmmMap<R extends { [ key: string ]: any }> = { [ key: string ]: AmmDetail<R> } | {}  //key is AMM-XXX-XXX\nexport const setAmmState = ({ammPoolState, keyPair}: { ammPoolState: AmmPoolStat, keyPair: string }) => {\n    const {idIndex} = store.getState().tokenMap\n    // @ts-ignore\n    const [, coinA, coinB] = keyPair.match(/(\\w+)-(\\w+)/i);\n    const {forex,faitPrices} = store.getState().system;\n    if (idIndex && coinA && coinB && faitPrices && forex) {\n        let result =  {\n            amountDollar: parseFloat(ammPoolState.liquidityUSD),\n            amountYuan: (parseFloat(ammPoolState.liquidityUSD) / (forex ? forex : 6.5)),\n            totalLPToken: volumeToCount('LP-' + keyPair, ammPoolState.lpLiquidity),\n            totalA: volumeToCount(coinA, ammPoolState.liquidity[ 0 ]),//parseInt(ammPoolState.liquidity[ 0 ]),\n            totalB: volumeToCount(coinB, ammPoolState.liquidity[ 1 ]),//parseInt(ammPoolState.liquidity[ 1 ]),\n            rewardValue: ammPoolState.rewards[ 0 ] ? volumeToCount(idIndex[ ammPoolState.rewards[ 0 ].tokenId as number ], ammPoolState.rewards[ 0 ].volume) : undefined,\n            rewardToken: ammPoolState.rewards[ 0 ] ? idIndex[ ammPoolState.rewards[ 0 ].tokenId as number ] : undefined,\n            rewardValue2: ammPoolState.rewards[ 1 ] ? volumeToCount(idIndex[ ammPoolState.rewards[ 1 ].tokenId as number ], ammPoolState.rewards[ 1 ].volume) : undefined,\n            rewardToken2: ammPoolState.rewards[ 1 ] ? idIndex[ ammPoolState.rewards[ 1 ].tokenId as number ] : undefined,\n        }\n\n        const feeA =  volumeToCountAsBigNumber(coinA, ammPoolState.fees[ 0 ]);//parseInt(ammPoolState.fees[ 0 ]),\n        const feeB = volumeToCountAsBigNumber(coinB, ammPoolState.fees[ 1 ]);//parseInt(ammPoolState.fees[ 1 ]),\n        const feeDollar =  faitPrices[coinA] && faitPrices[coinB]  ?\n            toBig(feeA||0).times(faitPrices[coinA].price).plus(toBig(feeB||0).times(faitPrices[coinB].price)):undefined\n        const feeYuan = feeDollar ? feeDollar.times(forex) : undefined;\n\n        return {\n             ...result,\n            feeA:feeA?.toNumber(),\n            feeB:feeB?.toNumber(),\n            feeDollar:feeDollar? feeDollar.toNumber(): undefined,\n            feeYuan:feeYuan? feeYuan.toNumber(): undefined,\n            tradeFloat: {\n                change: undefined,\n                timeUnit: '24h',\n                // priceYuan: 100,\n                // priceDollar: 1.23123,\n                // floatTag: FloatTag.increase,\n                // reward: 12312,\n                // APY: (parseInt(ammPoolState.apyBips) * 1.0 / 100)\n            },\n            APY: (parseInt(ammPoolState.apyBips) * 1.0 / 100)\n        }\n\n\n    }\n}\nconst getAmmMapApi = async <R extends { [ key: string ]: any }>({ammpools}: GetAmmMapParams) => {\n\n    let ammMap: AmmMap<R> = {}\n    const {ammPoolStats} = (await ammpoolAPI().getAmmPoolStats());\n\n    let {__timer__} = store.getState().amm.ammMap\n    __timer__ = (() => {\n        if (__timer__ && __timer__ !== -1) {\n            clearInterval(__timer__)\n        }\n        return setInterval(async () => {\n            let ammPoolStats: { [key in keyof R]: AmmPoolStat } = (await ammpoolAPI().getAmmPoolStats()).ammPoolStats as { [key in keyof R]: AmmPoolStat }\n            store.dispatch(updateRealTimeAmmMap({ammPoolStats}))\n        }, 900000)    //15*60*1000 //900000\n    })()\n    const {tokenMap: {coinMap, idIndex}} = store.getState();\n\n    // const forex = faitPrices.prices['USDC']\n\n\n    Reflect.ownKeys(ammpools).forEach(async (key) => {\n        const item: AmmPoolInfoV3 = ammpools[ key as string ]\n        if (item.market === key && item.tokens.pooled && idIndex) {\n\n            // const tokenA =  ; //getTokenInfoById(tokens.tokenIdMap, parseInt(item.tokens.pooled[0]))\n            // const tokenB =  ; // getTokenInfoById(tokens.tokenIdMap, parseInt(item.tokens.pooled[1]))\n            const coinA = idIndex[ item.tokens.pooled[ 0 ] as any ];\n            const coinB = idIndex[ item.tokens.pooled[ 1 ] as any ];\n            const dataItem: AmmDetailStore<R> = {\n                coinA: coinA,\n                coinB: coinB,\n                isNew: Date.now() - (Number(item.createdAt)) > 3 * 86400 * 1000 ? false : true,//3*24*60*60*1000,\n                isActivity: item.status === 7 ? true : false,\n                address: item.address,\n                ...setAmmState({ammPoolState: ammPoolStats[ key ], keyPair: `${coinA}-${coinB}`}),\n                __rawConfig__: item\n            } as AmmDetailStore<R>\n            // @ts-ignore\n            ammMap[ item.market ] = dataItem\n\n\n        }\n\n\n    })\n    return {ammMap, __timer__}\n}\n\n\nexport function* getPostsSaga({payload}: PayloadAction<GetAmmMapParams>) {\n    try {\n        const {ammpools} = payload;\n        const {ammMap, __timer__} = yield call(getAmmMapApi, {ammpools});\n        yield put(getAmmMapStatus({ammMap, __timer__}));\n    } catch (err) {\n        yield put(getAmmMapStatus(err));\n    }\n}\n\nexport function* updateRealTimeSaga({payload}: any) {\n    try {\n        const {ammPoolStats} = payload;\n        let {ammMap}: { ammMap: AmmMap<object> } = store.getState().amm.ammMap;\n        if (ammPoolStats) {\n            //{ ammPoolStats?: { [ key: string ]: AmmPoolStat } }\n            Reflect.ownKeys(ammPoolStats).map((key) => {\n                const keyPair = (key as string).replace('AMM-', '')\n                \n                // @ts-ignore\n                ammMap[ key ] = {\n                    // @ts-ignore\n                    ...ammMap[ key ],\n                    ...setAmmState({ammPoolState: ammPoolStats[ key as string ], keyPair, })\n                }\n                return ammMap\n            })\n        }\n        yield put(getAmmMapStatus({ammMap}));\n    } catch (err) {\n        yield put(getAmmMapStatus(err));\n    }\n}\n\n\nexport function* ammMapInitSaga() {\n    yield all([takeLatest(getAmmMap, getPostsSaga)]);\n}\n\nexport function* ammMapRealTimeSaga() {\n    yield all([takeLatest(updateRealTimeAmmMap, updateRealTimeSaga)]);\n}\n\nexport const ammMapSaga = [\n    fork(ammMapInitSaga),\n    fork(ammMapRealTimeSaga),\n]\n\n","import { combineReducers } from '@reduxjs/toolkit';\n// import { ammRecordSlice } from './AmmConfig';\n// import { ammTradesSlice } from './AmmTrades';\nimport { ammMapSlice } from './AmmMap';\nimport { ammActivityMapSlice } from './AmmActivityMap';\nimport ammActivityMapSaga from './AmmActivityMap/saga';\nimport { ammMapSaga } from './AmmMap/saga';\n// import ammTradesSaga from './AmmTrades/saga';\nimport {  fork } from 'redux-saga/effects';\n\nexport const  ammReducer = combineReducers({\n    // ammRecord: ammRecordSlice.reducer,\n    // ammTrades: ammTradesSlice.reducer,\n    ammMap: ammMapSlice.reducer,\n    ammActivityMap:ammActivityMapSlice.reducer\n})\nexport const ammForks =  [\n    fork(ammActivityMapSaga),\n    ...ammMapSaga,\n    // fork(ammRecordSaga),\n    // fork(ammTradesSaga)\n]\n\n// export * from './interface'\n","import { all, call, fork, put, takeLatest } from \"redux-saga/effects\";\nimport { getTokenMap, getTokenMapStatus } from './reducer';\nimport { getIcon } from '../../utils/swap_calc_utils';\nimport { CoinInfo, CoinMap } from '@loopring-web/common-resources';\nimport { AddressMap, GetTokenMapParams, IdMap } from './interface';\nimport { PayloadAction } from '@reduxjs/toolkit';\n\nconst getTokenMapApi = async <R extends { [ key: string ]: any }>({\n                                                                      tokensMap,\n                                                                      pairs,\n                                                                      marketArr,\n                                                                      tokenArr\n                                                                  }: GetTokenMapParams<R>) => {\n    let coinMap: CoinMap<any, CoinInfo<any>> = {};\n    let tokenMap:any = tokensMap;\n    let addressIndex: AddressMap = {};\n    let idIndex: IdMap = {};\n    Reflect.ownKeys(tokensMap).forEach((key) => {\n        if (!(key as string).startsWith('LP-')) {\n            coinMap[ key as string ] = {\n                icon: getIcon(key as string, tokensMap),\n                name: key as string,\n                simpleName: key as string,\n                description: '',\n                company: '',\n            }\n        }\n\n        if (pairs[ key as string ] && pairs[ key as string ].tokenList) {\n            // @ts-ignore\n            tokensMap[ key ].tradePairs = pairs[ key as string ].tokenList;\n        }\n        addressIndex = {\n            ...addressIndex,\n            // @ts-ignore\n            [ tokensMap[ key ].address ]: key as string\n        }\n        idIndex = {\n            ...idIndex,\n            // @ts-ignore\n            [ tokensMap[ key ].tokenId ]: key as string\n        }\n    })\n    return {data: {coinMap, addressIndex, idIndex, tokenMap, marketArray: marketArr, marketCoins: tokenArr}}\n};\n\nexport function* getPostsSaga<R extends { [ key: string ]: any }>({payload}: PayloadAction<GetTokenMapParams<R>>) {\n    try {\n        const {tokensMap, marketMap, pairs, marketArr,tokenArr} = payload\n        // @ts-ignore\n        const {data} = yield call(getTokenMapApi, {tokensMap, pairs, marketArr, tokenArr});\n\n        yield put(getTokenMapStatus({...data, marketMap}));\n    } catch (err) {\n        yield put(getTokenMapStatus(err));\n    }\n}\n\n\nexport function* tokenInitSaga() {\n    yield all([takeLatest(getTokenMap, getPostsSaga)]);\n}\n\n\nexport const tokenSaga = [\n    fork(tokenInitSaga),\n    // fork(tokenPairsSaga),\n]\n\n// export function* getPairsSaga({payload}:PayloadAction<{tokenPairs: TokenPairs }>) {\n//     try {\n//         const {tokenPairs} = payload;\n//         const tokenPairsMap =  Reflect.ownKeys(tokenPairs).reduce((prev,key)=>{\n//            // @ts-ignore\n//             return prev[key as string] =  tokenPairs[key as string].tokenList\n//         }, {} )\n//\n//         yield put(getTokenMapStatus({tokenPairsMap}));\n//     } catch (err) {\n//         yield put(getAmmMapStatus(err));\n//     }\n// }\n// export function* tokenPairsSaga() {\n//     yield all([takeLatest(getTokenPairMap, getPairsSaga)]);\n// }\n\n\n","import { all, call, fork, put, takeLatest } from \"redux-saga/effects\"\nimport { getTicker, getTickers, getTickerStatus } from './reducer'\nimport { CoinKey, CustomError, ErrorMap, PairKey, TradeFloat } from '@loopring-web/common-resources'\n\n\nimport { exchangeAPI } from \"stores/apis/api\"\nimport { makeTickerMap } from '../../hooks/help';\n\n\ntype TickerMap<R extends { [ key: string ]: any }> = {\n    [key in CoinKey<R> | PairKey<R>]?: TradeFloat & {\n    reward?: number, rewardToken?: string\n}\n\n}\n\n\nconst getTickersApi = async <R extends { [ key: string ]: any }>(list: Array<keyof R>) => {\n\n    const tickers = await exchangeAPI().getMixTicker({market: list.join(',')})\n    const data = makeTickerMap({tickerMap: tickers.tickMap})\n    return {data}\n}\n\nexport function* getPostsSaga({payload}: any) {\n    try {\n        // @ts-ignore\n        const {tickerKey, tickerKeys} = payload;\n        if (tickerKey || (tickerKeys && tickerKeys.length)) {\n            const {data} = yield call(getTickersApi, tickerKey ? [tickerKey] : tickerKeys);\n            yield put(getTickerStatus({tickerMap: data}));\n\n        } else {\n            throw new CustomError(ErrorMap.NO_TOKEN_KEY_LIST);\n        }\n    } catch (err) {\n        yield put(getTickerStatus(err));\n    }\n}\n\nfunction* tickerSaga() {\n    yield all([takeLatest(getTicker, getPostsSaga)]);\n}\n\nfunction* tickersSaga() {\n    yield all([takeLatest(getTickers, getPostsSaga)]);\n}\n\nexport const tickerForks = [\n    fork(tickerSaga),\n    fork(tickersSaga),\n]\n ","import { all, call, fork, put, take, takeLatest } from \"redux-saga/effects\"\nimport { getSystemStatus, updateRealTimeObj, updateSystem } from './reducer'\nimport { ENV, NETWORKEXTEND } from \"./interface\"\nimport store from '../index';\nimport { reset } from '../account/reducer';\nimport { ChainId } from 'loopring-sdk';\nimport { exchangeAPI, LoopringAPI } from '../apis/api';\nimport { getAmmMap, updateRealTimeAmmMap } from '../Amm/AmmMap';\nimport { getTokenMap } from '../token';\nimport { CustomError, ErrorMap } from '@loopring-web/common-resources';\nimport { getAmmActivityMap } from '../Amm/AmmActivityMap';\nimport { updateWalletLayer1 } from '../walletLayer1';\nimport { delay } from 'rxjs/operators';\n\n\nconst initConfig = function* <R extends { [ key: string ]: any }>(chainId: ChainId | 'unknown') {\n    store.dispatch(reset(undefined));\n    const {tokenSymbolMap: tokensMap} = yield call(async ()=> await LoopringAPI.exchangeAPI?.getTokens())\n    const {ammpools} = yield call(async ()=>await LoopringAPI.ammpoolAPI?.getAmmPoolConf());\n    const {pairs, marketArr, tokenArr, markets}  = yield call(async ()=> LoopringAPI.exchangeAPI?.getMixMarkets());\n    store.dispatch(getTokenMap({tokensMap, marketMap: markets, pairs,marketArr,tokenArr}))\n    yield take('tokenMap/getTokenMapStatus');\n    // let basePath: string = `wss://ws.${baseURL}/v3/ws?wsApiKey=${wsKey}`\n    store.dispatch(getAmmMap({ammpools}))\n    store.dispatch(getAmmActivityMap({ammpools}))\n    if(store.getState().tokenMap.status === 'ERROR'){\n\n    }\n    yield delay(10);\n    //IF already connect has address, getInfo walletLayer 1\n    const {account,walletLayer1} = store.getState() //.account.accAddr && !store.getState().walletLayer1.walletLayer1\n    if(account.accAddr && walletLayer1.walletLayer1 === undefined){\n        store.dispatch(updateWalletLayer1(undefined));\n    }\n\n}\n\nconst getSystemsApi = async <R extends { [ key: string ]: any }>(chainId: any) => {\n    //TODO get some other reuqired id...... put into system\n    // const { chainId } = system\n    const env = window.location.hostname === 'localhost' ? ENV.DEV : ChainId.GORLI === chainId ? ENV.UAT : ENV.PROD\n    chainId = ChainId.GORLI === chainId ? ChainId.GORLI : ChainId.MAINNET === chainId ? ChainId.MAINNET : NETWORKEXTEND.NONETWORK\n    if (chainId === NETWORKEXTEND.NONETWORK) {\n        throw new CustomError(ErrorMap.NO_NETWORK_ERROR)\n    } else {\n        LoopringAPI.InitApi(chainId as ChainId);\n        if (LoopringAPI.exchangeAPI) {\n            const { exchangeInfo } = (await LoopringAPI.exchangeAPI.getExchangeInfo())\n            const faitPrices = (await LoopringAPI.exchangeAPI.getFiatPrice({legal: 'CNY'})).fiatPrices\n            const gasPrice = (await exchangeAPI().getGasPrice()).gasPrice / 1e+9;\n            // : process.env.REACT_APP_API_URL_UAT;\n            const baseURL = ChainId.MAINNET === chainId ? `https://${process.env.REACT_APP_API_URL}` : `https:/${process.env.REACT_APP_API_URL_UAT}`\n            const forex = faitPrices[ 'USDT' ].price;\n            let {__timer__} = store.getState().system;\n            __timer__ = ((__timer__) => {\n                if (__timer__ && __timer__ !== -1) {\n                    clearInterval(__timer__);\n                }\n                return setInterval(async () => {\n                    const faitPrices = (await exchangeAPI().getFiatPrice({legal: 'CNY'})).fiatPrices\n                    const gasPrice = (await exchangeAPI().getGasPrice()).gasPrice / 1e+9\n                    const forex = faitPrices[ 'USDT' ]?.price\n                    store.dispatch(updateRealTimeAmmMap(undefined))\n                    store.dispatch(updateRealTimeObj({faitPrices, gasPrice, forex}))\n                }, 300000)   //\n\n            })(__timer__);\n            return {chainId, env, baseURL, faitPrices, gasPrice, forex, exchangeInfo, __timer__}\n        }\n    }\n}\n\nexport function* getUpdateSystem({payload}: any) {\n    try {\n        // @ts-ignore\n        const {chainId} = payload;\n        const {env, baseURL, faitPrices, gasPrice, forex, exchangeInfo, __timer__} = yield call(getSystemsApi, chainId);\n\n        yield put(getSystemStatus({env, baseURL, faitPrices, gasPrice, forex, exchangeInfo, __timer__}));\n        yield call(initConfig,chainId)\n        //TODO check wallect store\n    } catch (err) {\n        yield put(getSystemStatus(err));\n    }\n}\n\nfunction* systemSaga() {\n    yield all([takeLatest(updateSystem, getUpdateSystem)]);\n}\n\nexport const systemForks = [\n    fork(systemSaga),\n]\n","import { all, call, fork, put, takeLatest } from \"redux-saga/effects\";\nimport { getWalletLayer1Status, updateWalletLayer1 } from './reducer';\nimport { CoinKey, PairKey, WalletCoin } from '@loopring-web/common-resources';\nimport { exchangeAPI } from '../apis/api';\nimport store from '../index';\nimport { fromWEI } from '../../utils/swap_calc_utils';\n\ntype WalletLayer1Map<R extends {[key:string]:any}> = {\n    [key in CoinKey<R>|PairKey<R>]?:WalletCoin<R>\n}\n\nconst getWalletLayer1Balance = async <R extends {[key:string]:any}>()=> {\n    //TODO: check is connect and active and assign walletLayer1\n    //TODO: if not reject directory, any error happen will clean the\n    // await sdk\n    const exchangeApi = exchangeAPI();\n    const {accAddr,accountId} = store.getState().account;\n    const {tokenMap,marketCoins} = store.getState().tokenMap;\n    const {ethBalance} =  await exchangeApi.getEthBalances({owner:accAddr});\n    // @ts-ignore\n    const {tokenBalances} =  await exchangeApi.getTokenBalances({owner:accAddr,token: marketCoins.join()},tokenMap);\n    tokenBalances['ETH'] = ethBalance;\n    let walletLayer1;\n    if(tokenBalances) {\n        walletLayer1 = Reflect.ownKeys(tokenBalances).reduce((prev,item)=>{\n            return   {...prev, [ item ]:{\n                    belong: item,\n                    count: fromWEI(tokenMap, item, tokenBalances[item as string]),\n                }\n            }\n        },{} as WalletLayer1Map<R>)\n    }\n    return {walletLayer1}\n};\n\nexport function* getPostsSaga() {\n    try {\n        //\n        const {walletLayer1} = yield call(getWalletLayer1Balance);\n        yield put(getWalletLayer1Status({walletLayer1}));\n    } catch (err) {\n        yield put(getWalletLayer1Status(err));\n    }\n}\n\nexport function* walletLayer1Saga() {\n    yield all([takeLatest(updateWalletLayer1, getPostsSaga)]);\n}\n\nexport const walletLayer1Fork = [\n    fork(walletLayer1Saga),\n    // fork(tokenPairsSaga),\n]\n\n","import { all, call, fork, put, takeLatest } from \"redux-saga/effects\";\nimport { getWalletLayer2Status, updateWalletLayer2 } from './reducer';\nimport { CoinKey, PairKey, WalletCoin } from '@loopring-web/common-resources';\nimport { userAPI } from '../apis/api';\nimport store from '../index';\n\ntype WalletLayer2Map<R extends { [ key: string ]: any }> = {\n    [key in CoinKey<R> | PairKey<R>]?: WalletCoin<R>\n}\n\nconst getWalletLayer2Balance = async <R extends { [ key: string ]: any }>() => {\n    //TODO: check is connect and active and assign walletLayer1\n    //TODO: if not reject directory, any error happen will clean the\n    // await sdk\n    // const exchangeApi = exchangeAPI();\n    const userApi = userAPI();\n    const {accountId, apiKey} = store.getState().account;\n    const {tokenMap, idIndex, marketCoins} = store.getState().tokenMap;\n    let walletLayer2;\n    if (apiKey && accountId) {\n        // @ts-ignore\n        const {userBalances} = await userApi.getUserBalances({accountId: accountId, tokens: ''}, apiKey)\n        if (userBalances) {\n            // tokenId: number;\n            // total: string;\n            // locked: string;\n            // pending: {\n            //     withdraw: string;\n            //     deposit: string;\n            // };\n            walletLayer2 = Reflect.ownKeys(userBalances).reduce((prev, item) => {\n                // @ts-ignore\n                return {...prev, [ idIndex[ item ] ]: userBalances[ Number(item) ]}\n            }, {} as WalletLayer2Map<R>)\n        }\n    }\n\n    return {walletLayer2}\n};\n\nexport function* getPostsSaga() {\n    try {\n        //\n        const {walletLayer2} = yield call(getWalletLayer2Balance);\n        yield put(getWalletLayer2Status({walletLayer2}));\n    } catch (err) {\n        yield put(getWalletLayer2Status(err));\n    }\n}\n\nexport function* walletLayer2Saga() {\n    yield all([takeLatest(updateWalletLayer2, getPostsSaga)]);\n}\n\n// export function* walletLayer2Saga() {\n//     yield all([takeLatest(updateWalletLayer2, getPostsSaga)]);\n// }\n\n\nexport const walletLayer2Fork = [\n    fork(walletLayer2Saga),\n    // fork(tokenPairsSaga),\n]\n\n","import { all, call, fork, put, takeLatest } from \"redux-saga/effects\"\nimport { getUserRewards, getUserRewardsStatus } from './reducer'\n\nimport store from '../index';\nimport { exchangeAPI, LoopringAPI } from '../apis/api';\nimport { updateRealTimeAmmMap } from '../Amm/AmmMap';\nimport { updateRealTimeObj } from '../system';\n\nconst getUserRewardsApi = async <R extends {[key:string]:any}>(list:Array<keyof R>)=> {\n\n    // const data:UserRewardsMap<R> = {}\n\n    // const userRewardss = await exchangeAPI().getUserRewards({market: list.join(',')})\n    const {accountId} = store.getState().account\n    let {__timer__} = store.getState().userRewardsMap;\n    \n    if(LoopringAPI.ammpoolAPI) {\n        __timer__ = ((__timer__) => {\n            if (__timer__ && __timer__ !== -1) {\n                clearInterval(__timer__);\n            }\n            return setTimeout(async () => {\n                store.dispatch(getUserRewards(undefined))\n            }, 300000 * 4)   //\n\n        })(__timer__);\n        return  LoopringAPI.ammpoolAPI.getAmmPoolUserRewards({owner:accountId}).then(({ammUserRewardMap}) => {\n            return {data:ammUserRewardMap,__timer__}\n        })\n\n\n    }else{\n        return  Promise.reject({data:undefined,__timer__})\n    }\n\n}\n\nexport function* getPostsSaga({payload}:any) {\n    try {\n        // @ts-ignore\n        // const { userRewardsKey,userRewardsKeys } = payload;\n        // console.log('getPostsSaga userRewardsKey',userRewardsKey, userRewardsKeys)\n        // if(userRewardsKey || (userRewardsKeys && userRewardsKeys.length)) {\n        const {data,__timer__}  = yield call(getUserRewardsApi);\n        yield put(getUserRewardsStatus({userRewardsMap:data,__timer__}));\n\n        // }else{\n        //     throw new CustomError(ErrorMap.NO_SDK);\n        // }\n    } catch (err) {\n        yield put(getUserRewardsStatus(err));\n    }\n}\n\nfunction* userRewardsSaga() {\n    yield all([takeLatest(getUserRewards, getPostsSaga)]);\n}\n\nexport const userRewardsForks = [\n    fork(userRewardsSaga),\n    // fork(userRewardssSaga),\n]\n ","import { all, call, fork, put, takeLatest } from 'redux-saga/effects';\nimport { getSocketStatus, sendSocketTopic, socketEnd } from './reducer'\nimport {\n    socketClose, socketSendMessage,\n} from '../../services/socketUtil';\nimport store from '../index';\nexport function* closeSocket(){\n    try {\n        yield call(socketClose)\n        yield put(getSocketStatus(undefined));\n        //TODO check wallect store\n    } catch (err) {\n        yield put(getSocketStatus(err));\n    }\n}\nexport function* sendMessage({payload}: any){\n    try {\n        const { chainId } = store.getState().system;\n        const { apiKey } = store.getState().account;\n        const { socket } = payload;\n        // @ts-ignore\n        yield call(socketSendMessage, { chainId, socket, apiKey })\n        yield put(getSocketStatus(undefined));\n    } catch (err) {\n        yield put(getSocketStatus(err));\n    }\n}\n\nfunction* socketEndSaga(){\n    yield all([takeLatest(socketEnd, closeSocket)]);\n}\n// function* socketSaga() {\n//     yield all([takeLatest(socketStart, startSocket)]);\n// }\nfunction* socketSendMessageSaga() {\n    yield all([takeLatest(sendSocketTopic, sendMessage)]);\n}\n\n\n\nexport const socketForks = [\n    // fork(socketSaga),\n    fork(socketEndSaga),\n    fork(socketSendMessageSaga),\n //   fork(initConfig),\n]\n\n\n\n","import { all } from \"redux-saga/effects\"\n// import machine from \"../state_machine/fsm/machine\"\n// import { TRANSITION } from \"../state_machine/fsm/actionTypes\"\n// import { helloSaga } from \"./sagas\"\nimport { tokenSaga } from './token/saga';\nimport { ammForks } from './Amm';\nimport { tickerForks } from './ticker/saga';\nimport { systemForks } from './system/saga';\nimport { walletLayer1Fork } from './walletLayer1/saga';\nimport { walletLayer2Fork } from './walletLayer2/saga';\nimport { userRewardsForks } from './userRewards/saga';\nimport { socketForks } from './socket/saga';\n\n\n// https://css-tricks.com/finite-state-machines-with-react/\n// https://musing-rosalind-2ce8e7.netlify.com/?machine=%7B%22initial%22%3A%22initial%22%2C%22states%22%3A%7B%22initial%22%3A%7B%22on%22%3A%7B%22LOGIN%22%3A%22loggedIn%22%2C%22LOGOUT%22%3A%22loggedOut%22%7D%7D%2C%22loggedOut%22%3A%7B%22on%22%3A%7B%22SUBMIT%22%3A%22loading%22%7D%7D%2C%22loading%22%3A%7B%22on%22%3A%7B%22SUCCESS%22%3A%22loggedIn%22%2C%22FAIL%22%3A%22loggedOut%22%7D%7D%2C%22loggedIn%22%3A%7B%22onEntry%22%3A%5B%22SET_TOKEN%22%5D%2C%22onExit%22%3A%5B%22CLEAR_TOKEN%22%5D%2C%22on%22%3A%7B%22LOGOUT%22%3A%22loggedOut%22%7D%7D%7D%7D\n\n// function* machineHandler(event: any, action: any) {\n//\n//   // @ts-ignore\n//   const currentAppState = yield select((state) => { state.account.status })\n//   const nextAppState = machine.transition(currentAppState, event)\n//\n//   yield put({\n//     type: \"APP_STATE/\" + nextAppState.value,\n//     payload: {\n//       value: nextAppState.value\n//     }\n//   });\n//\n//   console.debug(\"-> from \" + currentAppState + \" to \" + nextAppState);\n//\n//   for (let i = 0; i < nextAppState.actions.length; i++) {\n//     yield put({\n//       type: nextAppState.actions[i],\n//       payload: action\n//     });\n//   }\n// }\n\n// function* watchTransition() {\n//   yield takeEvery(TRANSITION, function*(action: any) {\n//     yield machineHandler(action.event, action.payload);\n//   });\n// }\n\nfunction* mySaga() {\n    yield all([\n        // fork(helloSaga),\n        // fork(watchTransition),\n        ...tokenSaga,\n        ...walletLayer1Fork,\n        ...walletLayer2Fork,\n        ...systemForks,\n        ...ammForks,\n        ...tickerForks,\n        ...userRewardsForks,\n        ...socketForks,\n\n    ]);\n}\n\nexport default mySaga;\n","import { configureStore, combineReducers, getDefaultMiddleware } from '@reduxjs/toolkit'\n\nimport { useDispatch } from 'react-redux'\nimport { save, load } from 'redux-localstorage-simple'\n\nimport createSagaMiddleware from 'redux-saga'\n\n// We'll use redux-logger just as an example of adding another middleware\nimport logger from 'redux-logger'\n\n// And use redux-batch as an example of adding enhancers\nimport { reduxBatch } from '@manaflair/redux-batch'\nimport { updateVersion } from './global/actions'\n\nimport accountSlice from './account/reducer'\nimport tradingSlice from './trading/reducer'\n// import transactionlice from './transactions/reducer'\n\n\nimport { modalsSlice, setLanguage, settingsSlice } from '@loopring-web/component-lib';\nimport { ammReducer } from './Amm';\nimport { tokenMapSlice } from './token';\nimport mySaga from './rootSaga';\nimport { tickerMapSlice } from './ticker';\nimport { systemSlice } from './system';\nimport { walletLayer1Slice } from './walletLayer1';\nimport { walletLayer2Slice } from './walletLayer2';\nimport { socketSlice } from './socket';\nimport { userRewardsMapSlice } from './userRewards';\n\nconst sagaMiddleware = createSagaMiddleware()\n\nconst reducer = combineReducers({\n  account: accountSlice.reducer,\n  socket: socketSlice.reducer,\n  settings: settingsSlice.reducer,\n  system: systemSlice.reducer,\n  trading: tradingSlice.reducer,\n  // transactions: transactionlice.reducer,\n  modals: modalsSlice.reducer,\n  userRewardsMap: userRewardsMapSlice.reducer,\n  amm:ammReducer,\n  tokenMap: tokenMapSlice.reducer,\n  walletLayer2: walletLayer2Slice.reducer,\n  walletLayer1: walletLayer1Slice.reducer,\n  tickerMap: tickerMapSlice.reducer\n})\n\n//\n\nconst PERSISTED_KEYS: string[] = ['settings']\n\nconst store = configureStore({\n  reducer,\n  // middleware: (getDefaultMiddleware) => getDefaultMiddleware().concat(logger),\n  middleware: [...getDefaultMiddleware({ thunk: false,serializableCheck:false, }), save({ states: PERSISTED_KEYS }), sagaMiddleware, ],\n  // middleware: [...getDefaultMiddleware({ thunk: true }), ],\n  devTools: process.env.NODE_ENV !== 'production',\n  enhancers: [reduxBatch],\n  preloadedState: load({ states: PERSISTED_KEYS }) as any\n})\nstore.dispatch(updateVersion())\nstore.dispatch(setLanguage(store.getState().settings.language))\n// @ts-ignore\nsagaMiddleware.run(mySaga, store.dispatch);\n\n// The store has been created with these options:\n// - The slice reducers were automatically passed to combineReducers()\n// - redux-thunk and redux-logger were added as middleware\n// - The Redux DevTools Extension is disabled for production\n// - The middleware, batch, and devtools enhancers were composed together\n\nexport type AppDispatch = typeof store.dispatch\nexport const useAppDispatch = () => useDispatch<AppDispatch>()\n\nexport type RootState = ReturnType<typeof reducer>\n\nexport default store\n","export enum AccountStatus {\n    UNKNOWN = 'UNKNOWN',\n    UNCONNNECTED = 'UNCONNNECTED',\n    CONNECTED = 'CONNECTED',\n    NOACCOUNT = 'NOACCOUNT',\n    DEPOSITING = 'DEPOSITING',\n    DEPOSIT_TO_CONFIREM = 'DEPOSIT_TO_CONFIREM',\n    UNACTIVATED = 'UNACTIVATED',\n    ARPROVING = 'ARPROVING',\n    APPROV_TO_CONFIRM = 'APPROV_TO_CONFIRM',\n    LOCKED = 'LOCKED',\n    ACTIVATED = 'ACTIVATED',\n}\n\nexport enum StatusChangeEvent {\n    Reset = 'Reset',\n    Connecting = 'Connecting',\n    HasPubkey = 'HasPubkey',\n    HasNoPubkey = 'HasNoPubkey',\n    ErrorResponse = 'ErrorResponse',\n    Reconnect = 'Reconnect',\n    FinishDeposit = 'FinishDeposit',\n    DepositConfirmed = 'DepositConfirmed',\n    IsSmartWallet = 'IsSmartWallet',\n    ApproveSubmit = 'ApproveSubmit',\n    ApproveConfirmed = 'ApproveConfirmed',\n    Unlock = 'Unlock',\n    Lock = 'Lock',\n}\n\nexport const AccountMachineSpec = (initialState: AccountStatus = AccountStatus.UNCONNNECTED) => \n{\n    return {\n        initialState: initialState,\n        states: {\n            UNCONNNECTED: {\n                Connecting: AccountStatus.CONNECTED,\n                Reset: AccountStatus.UNCONNNECTED,\n            },\n            CONNECTED: {\n                HasPubkey: AccountStatus.LOCKED,\n                HasNoPubkey: AccountStatus.UNACTIVATED,\n                ErrorResponse: AccountStatus.NOACCOUNT,\n                Reset: AccountStatus.UNCONNNECTED,\n            },\n            NOACCOUNT: {\n                ErrorResponse: AccountStatus.NOACCOUNT,\n                Reconnect: AccountStatus.CONNECTED,\n                Reset: AccountStatus.UNCONNNECTED,\n            },\n            DEPOSITING: {\n                FinishDeposit: AccountStatus.DEPOSIT_TO_CONFIREM,\n                Reset: AccountStatus.UNCONNNECTED,\n            },\n            DEPOSIT_TO_CONFIREM: {\n                HasPubkey: AccountStatus.ACTIVATED,\n                HasNoPubkey: AccountStatus.DEPOSIT_TO_CONFIREM,\n                ErrorResponse: AccountStatus.DEPOSIT_TO_CONFIREM,\n                Reset: AccountStatus.UNCONNNECTED,\n            },\n            UNACTIVATED: {\n                IsSmartWallet: AccountStatus.ARPROVING,\n                Reset: AccountStatus.UNCONNNECTED,\n            },\n            ARPROVING: {\n                ApproveSubmit: AccountStatus.APPROV_TO_CONFIRM,\n                Reset: AccountStatus.UNCONNNECTED,\n            },\n            APPROV_TO_CONFIRM: {\n                ApproveConfirmed: AccountStatus.ACTIVATED,\n                Reset: AccountStatus.UNCONNNECTED,\n            },\n            LOCKED: {\n                Unlock: AccountStatus.ACTIVATED,\n                Reset: AccountStatus.UNCONNNECTED,\n            },\n            ACTIVATED: {\n                Lock: AccountStatus.LOCKED,\n                Reset: AccountStatus.UNCONNNECTED,\n            },\n        },\n    }\n}\n","import { utils } from 'ethers'\n\nimport * as fm from 'loopring-sdk'\n\nimport BigNumber from 'bignumber.js'\n\nimport { CoinInfo, CoinMap, } from '@loopring-web/common-resources'\nimport { DepthData, getBaseQuote, LoopringMap, MarketInfo, MarketStatus, TokenInfo, } from 'loopring-sdk'\nimport { BIG0, BIG1, BIG10, BIG10K, MULTI_FACTOR, } from '../defs/swap_defs'\n\nexport function getIcon(symbol: string, tokens: any) {\n    const token: any = tokens[symbol]\n    return getIconByTokenInfo(token)\n}\n\nexport function getIconByTokenInfo(token: TokenInfo) {\n    if (token) {\n        const addr = utils.getAddress(token.address)\n        const path = `https://exchange.loopring.io/assets/images/ethereum/assets/${addr}/logo.png`\n        return path\n    }\n    return ''\n}\n\nexport function makeCoinInfo(token: TokenInfo) {\n    if (token) {\n        const info: CoinInfo<any> = {\n            icon: getIconByTokenInfo(token),\n            name: token.symbol,\n            simpleName: token.symbol,\n            description: token.name,\n            company: token.name,\n        }\n        return info\n    }\n    return undefined\n}\n\nexport const getLeft = (pairs: any, tokens: any) => {\n    if (pairs) {\n\n        const left = Reflect.ownKeys(pairs)\n\n        let coinMapLeft: CoinMap<any, CoinInfo<any>> = {}\n\n        left.forEach((key: any) => {\n            coinMapLeft[key] = {\n                icon: getIcon(key, tokens),\n                name: key,\n                simpleName: key,\n                description: '',\n                company: ''\n            }\n        })\n\n        return {\n            left,\n            coinMapLeft,\n        }\n    }\n\n    return undefined\n}\n\nexport const getRight = (pairs: any, left: any, tokens: any) => {\n    if (pairs) {\n        const right = pairs[left].tokenList\n\n        let coinMapRight: CoinMap<any, CoinInfo<any>> = {}\n\n        if (right) {\n            right.forEach((key: any) => {\n                coinMapRight[key] = {\n                    icon: getIcon(key, tokens),\n                    name: key,\n                    simpleName: key,\n                    description: '',\n                    company: ''\n                }\n            })\n\n            return {\n                right,\n                coinMapRight,\n            }\n        }\n    }\n    return undefined\n}\n\nexport const getToken = (tokens: any, token: any) => {\n    if (!tokens) {\n        throw Error('no tokens list!')\n    }\n    return tokens[token]\n}\n\nexport const getTokenInfoByToken = (ammBalance: any, tokens: any, token: any) => {\n\n    const tokenInfo = getToken(tokens, token)\n\n    const tokenVol = ammBalance.pooledMap[tokenInfo.tokenId].volume\n    const reserve = fm.toBig(tokenVol)\n\n    return {\n        tokenInfo, tokenVol, reserve,\n    }\n}\n\nconst getKey = (base: any, quote: any) => {\n\n    if (!base || !quote) {\n        return {\n            key: undefined,\n            key_bak: undefined,\n            isOK: false,\n        }\n    }\n\n    const isLRCETH = false\n    const key = isLRCETH ? 'LRCETH-Pool' : ('AMM-' + base + '-' + quote)\n    const key_bak = isLRCETH ? 'LRCETH-Pool' : ('AMM-' + quote + '-' + base)\n    return {\n        key,\n        key_bak,\n        isOK: true,\n    }\n}\n\nconst getInfoByKey = (raw_data: any, keyPair: any) => {\n    const {\n        key,\n        key_bak,\n    } = keyPair\n\n    if (raw_data[key]) return raw_data[key]\n    return raw_data[key_bak]\n}\n\nexport const getBalances = (ammpools: any, ammPoolsBalances: any, base: any, quote: any, tokens: any) => {\n\n    const { ammInfo,\n        ammBalance,\n    } = getAmmInfo(ammpools, ammPoolsBalances, base, quote)\n\n    const baseToken = getToken(tokens, base)\n    const quoteToken = getToken(tokens, quote)\n\n    const baseBalance = ammBalance.pooledMap[baseToken.tokenId]\n    const quoteBalance = ammBalance.pooledMap[quoteToken.tokenId]\n\n    return {\n        ammInfo,\n        ammBalance,\n        baseBalance,\n        quoteBalance,\n    }\n\n}\n\nexport const getAmmInfoOnly = (ammpools: any, base: any, quote: any) => {\n\n    const keyPair = getKey(base, quote)\n\n    const ammInfo = getInfoByKey(ammpools, keyPair)\n\n    if (!ammInfo) {\n        throw Error('no ammInfo!')\n    }\n\n    return {\n        ammInfo,\n    }\n\n}\n\nexport const getAmmInfo = (ammpools: any, ammPoolsBalances: any, base: any, quote: any) => {\n\n    const keyPair = getKey(base, quote)\n\n    const ammInfo = getInfoByKey(ammpools, keyPair)\n    const ammBalance = getInfoByKey(ammPoolsBalances, keyPair)\n\n    if (!ammInfo || !ammBalance) {\n        throw Error('no ammInfo! no ammBalance!')\n    }\n\n    const feeBips = parseInt(ammInfo.feeBips)\n\n    return {\n        ammInfo,\n        ammBalance,\n        feeBips,\n    }\n\n}\n\nconst getAmt = (rawAmt: any, tokenInfo: any) => {\n    if (rawAmt === undefined) {\n        rawAmt = 0\n    }\n\n    return fm.toBig(rawAmt).times('1e' + tokenInfo.decimals)\n}\n\nexport const applySlippageTolerance = (\n    tokens: any,\n    token: any,\n    value: any,\n    slippageTolerance: number = 0.01\n) => {\n    const tokenInfo = getToken(tokens, token)\n    const f = 1e7\n    const feeFactor = fm.toBig(f * (1 - slippageTolerance))\n    const amount = fm.toBig(value).times('1e' + tokenInfo.decimals)\n    const outInWei = amount.times(feeFactor).dividedBy(f)\n    const out = fromWEI(tokens, token, outInWei)\n\n    return {\n        outInWei,\n        out,\n    }\n}\n\nexport const applyOrderFee = (tokens: any, token: any, value: any, feeBip: any) => {\n    const tokenInfo = getToken(tokens, token)\n    const feeFactor = fm.toBig(MULTI_FACTOR - feeBip)\n    const amount = fm.toBig(value).times('1e' + tokenInfo.decimals)\n    const appliedAmount = amount.times(feeFactor).dividedBy(MULTI_FACTOR)\n    return appliedAmount\n}\n\nexport function fromWEI(tokens: any, symbol: any, valueInWEI: any, precision?: any, ceil?: any) {\n    try {\n        const tokenInfo = getToken(tokens, symbol)\n        const precisionToFixed = precision ? precision : tokenInfo.precision\n        const value = fm.toBig(valueInWEI).div('1e' + tokenInfo.decimals)\n        return fm.toFixed(value, precisionToFixed, ceil)\n    } catch (error) {\n    }\n    return '0'\n}\n\n\nexport function toWEI(tokens: any, symbol: any, value: any, rm: any = 3) {\n    const tokenInfo = getToken(tokens, symbol)\n    if (typeof tokenInfo === 'undefined') {\n        return '0'\n    }\n\n    return fm.toBig(value)\n        .times('1e' + tokenInfo.decimals)\n        .toFixed(0, rm)\n}\n\nexport const getAmountOut = (amt: any, ammpools: any, ammPoolsBalances: any, tokens: any,\n    base: any, quote: any, takerRate: number, currentPrice: number) => {\n\n    if (amt === undefined) {\n        amt = 0\n    }\n\n    const { ammBalance, feeBips, } = getAmmInfo(ammpools, ammPoolsBalances, base, quote)\n\n    const { tokenInfo: baseTokenInfo, reserve: reserveIn } = getTokenInfoByToken(ammBalance, tokens, base)\n    const { tokenInfo: quoteTokenInfo, reserve: reserveOut } = getTokenInfoByToken(ammBalance, tokens, quote)\n\n    const amountIn = getAmt(amt, baseTokenInfo)\n    const feeBipsFactor = fm.toBig(MULTI_FACTOR - feeBips)\n    const amountInWithFee = amountIn.times(feeBipsFactor)\n    const numerator = amountInWithFee.times(reserveOut)\n    const denominator = reserveIn.times(MULTI_FACTOR).plus(amountInWithFee)\n    const amountOutInWei: any = numerator.dividedBy(denominator)\n\n    let quoteAmt: any = fromWEI(tokens, quote, amountOutInWei)\n\n    const _amount1ApplyOrderFeeInWei = applyOrderFee(tokens, quote, quoteAmt, takerRate + feeBips)\n\n    let _amount1ApplyOrderFee = Number(fromWEI(tokens, quote, _amount1ApplyOrderFeeInWei))\n\n    let priceImpact = 0\n    if (_amount1ApplyOrderFee < 0) {\n        _amount1ApplyOrderFee = 0\n        quoteAmt = null\n    } else {\n        const newPrice = Number(quoteAmt) / Number(amt)\n        priceImpact = (newPrice - currentPrice) / currentPrice\n    }\n\n    return {\n        quoteAmt,\n        _amount1ApplyOrderFeeInWei,\n        _amount1ApplyOrderFee,\n        priceImpact,\n    }\n\n}\n\nexport const getAmountOut_Reverse = (amt: any, ammpools: any, ammPoolsBalances: any, tokens: any,\n    base: any, quote: any, takerRate: number, currentPrice: number) => {\n\n    if (amt === undefined) {\n        amt = 0\n    }\n    \n    const { ammBalance, feeBips, } = getAmmInfo(ammpools, ammPoolsBalances, base, quote)\n\n    const { tokenInfo: baseTokenInfo, reserve: reserveIn } = getTokenInfoByToken(ammBalance, tokens, base)\n    const { tokenInfo: quoteTokenInfo, reserve: reserveOut } = getTokenInfoByToken(ammBalance, tokens, quote)\n\n    const amountOut = getAmt(amt, quoteTokenInfo)\n\n    if (amountOut.gt(reserveOut)) {\n        return {\n            baseAmt: 0,\n            _amount1ApplyOrderFeeInWei: 0,\n            _amount1ApplyOrderFee: 0,\n            priceImpact: 0,\n            hasError: false,\n        }\n    }\n\n    const numerator = amountOut.times(reserveIn).times(MULTI_FACTOR)\n    const feeBipsFactor = fm.toBig(MULTI_FACTOR - feeBips)\n\n    // If amountOut is larger than reserveOut?\n    // It's handled before getAmountOut_reserve\n    const reserveOutSubAmountOut = reserveOut.minus(amountOut)\n\n    const denominator = feeBipsFactor.times(reserveOutSubAmountOut)\n    const amountInInWei = numerator.dividedBy(denominator)\n\n    let baseAmt: any = fromWEI(tokens, quote, amountInInWei)\n\n    const _amount1ApplyOrderFeeInWei = applyOrderFee(tokens, quote, amt, takerRate + feeBips)\n\n    let _amount1ApplyOrderFee = Number(fromWEI(tokens, quote, _amount1ApplyOrderFeeInWei))\n\n    let priceImpact = 0\n    if (_amount1ApplyOrderFee < 0) {\n        _amount1ApplyOrderFee = 0\n        baseAmt = null\n    } else {\n        const newPrice = Number(amt) / Number(baseAmt)\n        priceImpact = (newPrice - currentPrice) / currentPrice\n    }\n\n    return {\n        baseAmt,\n        _amount1ApplyOrderFeeInWei,\n        _amount1ApplyOrderFee,\n        priceImpact,\n        hasError: false,\n    }\n\n}\n\nexport function isEmpty(input: any) {\n    if (!input || input.trim() === '') {\n        return true\n    }\n\n    return false\n}\n\nfunction getAmountOutWithFeeBips(amountIn: string, feeBips: string, reserveIn: string, reserveOut: string ) {\n    const amountInBig = fm.toBig(amountIn)\n    const reserveInBig = fm.toBig(reserveIn)\n    const reserveOutBig = fm.toBig(reserveOut)\n    \n    if (amountInBig.lt(BIG0) || reserveInBig.lt(BIG0) || reserveOutBig.lt(BIG0)) {\n        return BIG0\n    }\n    const feeBipsBig = fm.toBig(feeBips)\n\n    const amountInWithFee = amountInBig.times(BIG10K.minus(feeBipsBig))\n    const numerator = amountInWithFee.times(reserveOutBig)\n    const denominator = reserveInBig.times(BIG10K).plus(amountInWithFee)\n\n    return numerator.div(denominator)\n}\n\nfunction getAmountInWithFeeBips(amountOut: string, feeBips: string, reserveIn: string, reserveOut: string ) {\n    const amountOutBig = fm.toBig(amountOut)\n    const reserveInBig = fm.toBig(reserveIn)\n    const reserveOutBig = fm.toBig(reserveOut)\n    \n    if (amountOutBig.lt(BIG0) || reserveInBig.lt(BIG0) || reserveOutBig.lt(BIG0)) {\n        return BIG0\n    }\n    const feeBipsBig = fm.toBig(feeBips)\n\n    const numerator = reserveInBig.times(amountOutBig).times(BIG10K)\n    const denominator = reserveOutBig.times(amountOutBig).times(BIG10K.minus(feeBipsBig))\n\n    return numerator.div(denominator).plus(BIG1)\n}\n\nfunction getOutputOrderbook(input: string, feeBips: string, isAtoB: boolean) {\n    let output: string  = \"0\"\n    let remain: string  = input\n}\n\nexport function getOutputAmount(base: string, quote: string, market: string, \n    input: string, isAtoB: boolean, feeBips: string, \n    tokenMap: LoopringMap<TokenInfo>, marketMap: LoopringMap<MarketInfo>, depth: DepthData) {\n\n    if (isEmpty(input) || isEmpty(feeBips) || !(market in Object.keys(marketMap))) {\n        return undefined\n    }\n\n    const { base: baseRaw, quote: quoteRaw } = getBaseQuote(market)\n\n    const marketInfo: MarketInfo = marketMap[market]\n\n    const isSwapEnabled = marketInfo.status === MarketStatus.ALL || marketInfo.status === MarketStatus.AMM\n\n    input = input.trim()\n\n    let exceedDepth = false\n\n    const reserveIn = ''\n    const reserveOut = ''\n\n    if (isAtoB) {\n\n        // bids_amtTotal -> bidsSizeShown\n        // asks_volTotal -> asksQuoteSizeShown\n        const amountInWei = toWEI(tokenMap, base, input)\n\n        if (isEmpty(depth.bids_amtTotal) || isEmpty(depth.asks_volTotal)) {\n            exceedDepth = true\n        } else {\n\n            if (base === baseRaw) {\n                exceedDepth = fm.toBig(amountInWei).lt(fm.toBig(depth.bids_amtTotal))\n            } else {\n                exceedDepth = fm.toBig(amountInWei).lt(fm.toBig(depth.asks_volTotal))\n            }\n\n        }\n\n        let amountB = new BigNumber(0)\n\n        if (exceedDepth) {\n            if (isSwapEnabled) {\n                amountB = getAmountOutWithFeeBips(amountInWei, feeBips, reserveIn, reserveOut)\n            }\n        } else {\n            amountB = fm.toBig(toWEI(tokenMap, base, getOutputOrderbook(input, feeBips, isAtoB)))\n        }\n\n        return fromWEI(tokenMap, quote, amountB)\n\n    } else {\n\n        // asks_amtTotal -> asksSizeShown\n        // bids_volTotal -> bidsQuoteSizeShown\n\n        if (isEmpty(depth.bids_volTotal) || isEmpty(depth.asks_amtTotal)) {\n            exceedDepth = true\n        } else {\n            const amountInWei = toWEI(tokenMap, quote, input)\n\n            if (base === baseRaw) {\n                exceedDepth = fm.toBig(amountInWei).gt(fm.toBig(depth.bids_volTotal))\n            } else {\n                exceedDepth = fm.toBig(amountInWei).gt(fm.toBig(depth.asks_amtTotal))\n            }\n\n        }\n\n        let amountSBint = BIG0\n\n        const amountB: string = toWEI(tokenMap, quote, input)\n\n        if (exceedDepth) {\n            if (isSwapEnabled) {\n                amountSBint = getAmountInWithFeeBips(amountB, feeBips, reserveIn, reserveOut)\n            }\n        } else {\n            amountSBint = fm.toBig(toWEI(tokenMap, base, getOutputOrderbook(input, feeBips, isAtoB)))\n        }\n\n        if (amountSBint.gt(BIG0)) {\n            return fromWEI(tokenMap, base, amountSBint)\n        }\n\n        return '0'\n\n    }\n\n}\n","import { useDispatch, useSelector } from 'react-redux'\nimport { getTicker, getTickers, statusUnset } from './reducer';\nimport { TickerStates } from './interface';\nimport { CoinKey } from '@loopring-web/common-resources';\nimport React from 'react';\n\nexport function useTicker(): TickerStates & {\n    updateTickers: (tickerKeys: Array<CoinKey<any>>) => void,\n    updateTicker: (tickerKey: CoinKey<any>) => void,\n    statusUnset: () => void,\n} {\n    const tickerMap: TickerStates = useSelector((state: any) => state.tickerMap)\n    const dispatch = useDispatch();\n    return {\n        ...tickerMap,\n        statusUnset: React.useCallback(() => dispatch(statusUnset(undefined)), [dispatch]),\n        updateTickers: React.useCallback((tickerKeys: Array<CoinKey<any>>) => dispatch(getTickers({tickerKeys})), [dispatch]),\n        updateTicker: React.useCallback((tickerKey: CoinKey<any>) => dispatch(getTicker({tickerKey})), [dispatch]),\n    }\n\n}\n","import { useDispatch, useSelector } from 'react-redux'\nimport { AmmActivityMapStates } from './interface';\nimport { ammActivityMapSlice, getAmmActivityMap, statusUnset } from './reducer';\nimport React from 'react';\n\nexport function useAmmActivityMap(): AmmActivityMapStates & {\n    getAmmActivityMap:()=> void,\n    statusUnset:()=> void,\n} {\n    const ammActivityMap:AmmActivityMapStates = useSelector((state: any) => state.amm.ammActivityMap)\n    const dispatch = useDispatch();\n    return {\n        ...ammActivityMap,\n        statusUnset: React.useCallback(()=>dispatch(statusUnset(undefined)),[dispatch]),\n        getAmmActivityMap: React.useCallback(()=>dispatch(getAmmActivityMap(undefined)),[dispatch])\n    }\n\n}\n","import { useDispatch, useSelector } from 'react-redux'\nimport { StateBase } from '../interface';\nimport { sendSocketTopic, socketEnd, socketSlice } from './reducer';\nimport { SocketMap } from './interface';\nimport React from 'react';\nimport { statusUnset } from '../Amm/AmmMap';\n\nexport function useSocket(): StateBase & {\n    // socketStart:()=>void,\n    statusUnset: () => void,\n    sendSocketTopic: (socket: SocketMap) => void,\n    socketEnd: () => void\n} {\n    const socket: StateBase & { socket: SocketMap } = useSelector((state: any) => state.socket)\n    const dispatch = useDispatch();\n    // const socketStart = () => {\n    //     dispatch(socketSlice.actions.socketStart(undefined))\n    // }\n    // const sendSocketTopic = (socket: SocketMap) => {\n    //     dispatch(socketSlice.actions.sendSocketTopic({socket}))\n    // }\n    // const socketEnd = () => {\n    //     dispatch(socketSlice.actions.socketEnd(undefined))\n    // }\n    // const statusUnset = () => {\n    //     dispatch(socketSlice.actions.statusUnset(undefined))\n    // }\n    return {\n        ...socket,\n        statusUnset:React.useCallback(()=>dispatch(statusUnset(undefined)),[dispatch]),\n        sendSocketTopic:React.useCallback((socket: SocketMap)=>dispatch(sendSocketTopic({socket})),[dispatch]),\n        socketEnd:React.useCallback(()=>dispatch(socketEnd(undefined)),[dispatch]),\n    }\n\n}\n","import { AmmDetailBase } from '@loopring-web/common-resources';\nimport { volumeToCountAsBigNumber } from './volumeToCount';\n\nexport const ammPairInit = ({\n                                   pair,\n                                   _ammCalcData,\n                                   ammType,\n                                   tokenMap,\n                                   coinMap,\n                                   walletMap,\n                                   ammMap,\n                                   tickerData,\n                                   ammPoolsBalance\n                               }: any) => {\n    _ammCalcData.coinInfoMap = coinMap;\n    if (tickerData) {\n\n        _ammCalcData.AtoB = Number(tickerData.close)\n    }\n    if (isNaN(_ammCalcData.AtoB) && ammPoolsBalance) {\n        const baseVol = volumeToCountAsBigNumber(pair.coinAInfo.simpleName, ammPoolsBalance.pooled[ 0 ].volume);\n        const quoteVol = volumeToCountAsBigNumber(pair.coinBInfo.simpleName, ammPoolsBalance.pooled[ 1 ].volume);\n        _ammCalcData.AtoB = quoteVol && baseVol && quoteVol.div(baseVol).toNumber();\n\n    }\n    if (pair.coinAInfo) {\n        // if(ammType === AmmPanelType.Deposit ) {\n        _ammCalcData.myCoinA = {\n            belong: pair.coinAInfo.simpleName,\n            balance: walletMap ? walletMap[ pair.coinAInfo.simpleName ]?.count : 0,\n        }\n        _ammCalcData.myCoinB = {\n            belong: pair.coinBInfo.simpleName,\n            balance: walletMap ? walletMap[ pair.coinBInfo.simpleName ]?.count : 0,\n        }\n        // }else {\n        const key = `${pair.coinAInfo.simpleName}-${pair.coinBInfo.simpleName}`;\n        let coinACount = 0, coinBCount = 0;\n        if (walletMap) {\n            const balance = walletMap ? walletMap[ 'LP-' + key ]?.count : 0;\n            const {totalLPToken, totalA, totalB}: AmmDetailBase<any> = ammMap[ 'AMM-' + key ];\n            if (totalA && totalLPToken && totalB) {\n                coinACount = totalA / totalLPToken * balance;\n                coinBCount = totalB / totalLPToken * balance;\n            }\n            _ammCalcData.lpCoin = balance;\n        }\n        _ammCalcData.lpCoinA = {\n            belong: pair.coinAInfo.simpleName,\n            balance: coinACount,\n        }\n        _ammCalcData.lpCoinB = {\n            belong: pair.coinBInfo.simpleName,\n            balance: coinBCount,\n        }\n        // }\n    }\n\n\n    return _ammCalcData\n}\n\n\n","export function coinPairInit({coinKey, _tradeCalcData, tokenMap, coinMap}: any) {\n    if (coinKey) {\n        const [_match, sell, buy] = coinKey.match(/(\\w+)-(\\w+)/i);\n        // @ts-ignore\n        if (sell && coinMap && coinMap[ sell ]) {\n            _tradeCalcData.coinSell = sell;\n        }// @ts-ignore\n        if (sell!==buy && buy && -1 !== tokenMap[ sell ].tradePairs.findIndex(ele => ele === buy)) {\n            _tradeCalcData.coinBuy = buy;\n            return _tradeCalcData\n        }\n        // else{\n        //     _tradeCalcData.coinBuy = tokenMap[ sell ].tradePairs[ 0 ];\n        // }\n    }\n    if (!_tradeCalcData.coinSell || _tradeCalcData.coinSell === '') {\n        _tradeCalcData.coinSell = 'LRC';\n        _tradeCalcData.coinBuy = 'ETH';\n        return _tradeCalcData\n    }\n    if (!_tradeCalcData.coinBuy || _tradeCalcData.coinBuy === '' || _tradeCalcData.coinBuy === 'undefined') {\n        // @ts-ignore\n        if (tokenMap && tokenMap[ _tradeCalcData.coinSell ].tradePairs) {\n            _tradeCalcData.coinBuy = tokenMap[ _tradeCalcData.coinSell ].tradePairs[ 0 ]\n        } else {\n            _tradeCalcData.coinSell = 'LRC';\n            _tradeCalcData.coinBuy = 'ETH';\n        }\n    }\n    return _tradeCalcData\n}","import store from '../../stores';\nimport { AccountStatus } from '../../state_machine/account_machine_spec';\nimport { setShowAccountInfo, setShowConnect, setShowDeposit } from '@loopring-web/component-lib';\n\nexport enum fnType {\n    UNKNOWN,\n    UNCONNNECTED,\n    CONNECTED,\n    NOACCOUNT,\n    DEPOSITING,\n    DEPOSIT_TO_CONFIREM,\n    UNACTIVATED,\n    ARPROVING,\n    APPROV_TO_CONFIRM,\n    LOCKED,\n    ACTIVATED,\n    DEFAULT\n}\n\nexport const accountStaticCallBack = (onclickMap: { [ key: number ]: [fn: (props: any) => any, args?: any[]] }, deps?: any[]) => {\n    const {status} = store.getState().account;\n    let fn, args;\n    switch (status) {\n        case AccountStatus.UNKNOWN:\n            [fn, args] = onclickMap[ fnType.UNKNOWN ] ? onclickMap[ fnType.UNKNOWN ] : [];\n            break\n        case AccountStatus.UNCONNNECTED:\n            [fn, args] = onclickMap[ fnType.UNCONNNECTED ] ? onclickMap[ fnType.UNCONNNECTED ] : [];\n            break\n        case AccountStatus.CONNECTED:\n            [fn, args] = onclickMap[ fnType.CONNECTED ] ? onclickMap[ fnType.CONNECTED ] : [];\n            break\n        case AccountStatus.NOACCOUNT:\n            [fn, args] = onclickMap[ fnType.NOACCOUNT ] ? onclickMap[ fnType.NOACCOUNT ] : [];\n            break;\n        case AccountStatus.DEPOSITING:\n            [fn, args] = onclickMap[ fnType.DEPOSITING ] ? onclickMap[ fnType.DEPOSITING ] : [];\n            break;\n        case AccountStatus.DEPOSIT_TO_CONFIREM:\n            [fn, args] = onclickMap[ fnType.DEPOSIT_TO_CONFIREM ] ? onclickMap[ fnType.DEPOSIT_TO_CONFIREM ] : [];\n            break;\n        case AccountStatus.UNACTIVATED:\n            [fn, args] = onclickMap[ fnType.UNACTIVATED ] ? onclickMap[ fnType.UNACTIVATED ] : [];\n            break;\n        case AccountStatus.ARPROVING:\n            [fn, args] = onclickMap[ fnType.ARPROVING ] ? onclickMap[ fnType.ARPROVING ] : [];\n            break;\n        case AccountStatus.APPROV_TO_CONFIRM:\n            [fn, args] = onclickMap[ fnType.APPROV_TO_CONFIRM ] ? onclickMap[ fnType.APPROV_TO_CONFIRM ] : [];\n            break;\n        case AccountStatus.LOCKED:\n            [fn, args] = onclickMap[ fnType.LOCKED ] ? onclickMap[ fnType.LOCKED ] : [];\n            break;\n        case AccountStatus.ACTIVATED:\n            [fn, args] = onclickMap[ fnType.ACTIVATED ] ? onclickMap[ fnType.ACTIVATED ] : [];\n            break;\n        default:\n            //[fn, args] = onclickMap[ fnType.DEFAULT ] ? onclickMap[ fnType.DEFAULT ] : [];\n            break;\n    }\n\n\n    if (fn === undefined) {\n        [fn, args] = onclickMap[ fnType.DEFAULT ] ? onclickMap[ fnType.DEFAULT ] : [];\n    }\n    if (typeof fn === 'function') {\n        args = [...(args ?? []), ...(deps ?? [])] as [props: any]\n        return fn.apply(this, args);\n    }\n\n    // break;\n    // [fn, args] = props[ fnType.DEFAULT ]?props[ fnType.DEFAULT ]:[];\n    // if (typeof fn === 'function') {\n    //     return fn.call(this, args);\n    // }\n}\n\n\nexport const bntLabel: typeof btnClickMap = {\n    [ fnType.UNCONNNECTED ]: [\n        function () {\n            return `labelConnectWallet`\n        }\n    ]\n    , [ fnType.DEFAULT ]: [\n        function () {\n            return `depositTitleAndActive`\n        }\n    ]\n    , [ fnType.ACTIVATED ]: [\n        function () {\n            return undefined\n        }\n    ]\n    , [ fnType.LOCKED ]: [\n        function () {\n            return `labelUnLockLayer2`\n        }\n    ]\n};\n\n\nexport const btnClickMap: { [ key: number ]: [fn: (props: any) => any, args?: any[]] } = {\n    [ fnType.UNCONNNECTED ]: [\n        function () {\n            // setShowConnect({isShow: true})\n            store.dispatch(setShowConnect({isShow: true}))\n        }\n    ]\n    , [ fnType.DEFAULT ]: [\n        function () {\n            store.dispatch(setShowDeposit({isShow: true}))\n            // ShowDeposit(true)\n        }\n    ]\n\n    , [ fnType.LOCKED ]: [\n        function () {\n            store.dispatch(setShowAccountInfo({isShow: true}))\n        }\n    ]\n};\n\n\n","import store from '../../stores';\nimport { setSlippage } from '@loopring-web/component-lib';\n\ntype Cache = {\n    customSlippage?:number\n}\nexport  const makeCache  = (__cache__:Cache)=>{\n   if(typeof  __cache__.customSlippage !== undefined){\n       store.dispatch(setSlippage(__cache__.customSlippage as number))\n      // store.getState().settings\n   }\n}","import { AmmDetailStore } from '../../stores/Amm/AmmMap';\nimport { AmmPoolSnapshot } from 'loopring-sdk';\nimport { makeMyAmmWithSnapshot, makeMyAmmWithStat } from './makeUIAmmActivityMap';\nimport { AmmUserRewardMap } from 'loopring-sdk/dist/defs/loopring_defs';\nimport { WalletMapExtend } from './makeWallet';\n\nexport const makeMyPoolRowWithSnapShot = <T extends { [ key: string ]: any }>({market,ammSnapShot,walletMap,ammUserRewardMap}: {\n    market:string\n    ammSnapShot: AmmPoolSnapshot,\n    walletMap: WalletMapExtend<T>\n    ammUserRewardMap:AmmUserRewardMap|undefined\n}) => {\n\n    return makeMyAmmWithSnapshot(market,walletMap, ammUserRewardMap, {\n        ammPoolsBalance: ammSnapShot\n    })\n}\n\n                                                                        \nexport const makeMyPoolRowWithPoolState = <T extends { [ key: string ]: any }>({market,ammDetail,walletMap,ammUserRewardMap}: {\n    market:string\n    ammDetail: AmmDetailStore<T>,\n    walletMap: WalletMapExtend<T>\n    ammUserRewardMap:AmmUserRewardMap|undefined\n}) => {\n    if(walletMap && ammDetail){\n        return makeMyAmmWithStat (market,walletMap, ammUserRewardMap, ammDetail)\n    }\n    return undefined\n}","import { TickerData } from 'loopring-sdk';\nimport store from '../../stores';\nimport { FloatTag,TradeFloat } from '@loopring-web/common-resources';\nimport { volumeToCountAsBigNumber } from './volumeToCount';\nimport { Ticker, TickerMap } from '../../stores/ticker';\nimport { LoopringMap } from 'loopring-sdk/dist/defs/loopring_defs';\n\nexport const makeTickView = (tick: TickerData) => {\n    // const {forex} = store.getState().system;\n\n    const price = !isNaN(tick.close) ? tick.close : 0\n\n    const floatTag = (isNaN(tick.close) || isNaN(tick.open))  || tick.open === tick.close ? FloatTag.none : \n        tick.close > tick.open ? FloatTag.increase : FloatTag.decrease\n\n    let _tradeFloat: Partial<TradeFloat> = {\n        change: (tick.close - tick.open) / tick.open,\n        timeUnit: '24h',\n        priceYuan: price,\n        priceDollar: price,\n        floatTag,\n        reward: 0,\n        // APY: 0,\n    }\n\n    return _tradeFloat;\n}\nexport  const makeTickerMap =  <R extends {[key:string]:any}>({tickerMap}:{tickerMap:LoopringMap<TickerData>}):TickerMap<{[key:string]:any}>=>{\n    const {faitPrices, forex} = store.getState().system;\n    return Reflect.ownKeys(tickerMap).reduce((prev, key) => {\n        const item: TickerData = tickerMap[ key as any ];\n        if (item && item.base && forex && faitPrices && (faitPrices[ item.base ] || faitPrices[ 'USDT' ])) {\n            const volume = volumeToCountAsBigNumber(item.base, item.base_token_volume);\n            //FIX: DIE is not in faitPrices\n            const priceDollar = volume?.times(faitPrices[ item.base ] ? faitPrices[ item.base ].price : faitPrices[ 'USDT' ].price);\n            const priceYuan = priceDollar?.times(forex);\n            const change = item.change && item.change !== 0 ? item.change * 100 : undefined;\n\n            prev[ key as keyof R] = {\n                // ...item,\n                timeUnit: '24h',\n                priceDollar: priceDollar?.toNumber() === 0 ? undefined : priceDollar?.toNumber(),\n                priceYuan: priceYuan?.toNumber() === 0 ? undefined : priceYuan?.toNumber(),\n                volume: volume?.toNumber() === 0 ? undefined : volume?.toNumber(),\n                floatTag: item.close > item.open ? 'increase' : 'decrease',\n                change: change,\n                close: isNaN(item.close) ? undefined : item.close,\n                high: item.high === 0 ? undefined : item.high,\n                low: item.low === 0 ? undefined : item.high,\n                // APY: 0,\n                reward: 0,\n                rewardToken: '',\n                __rawTicker__: item,\n            } as Ticker;\n        }\n        return prev\n    }, {} as TickerMap<R>)\n}\n","import { AmmMap } from '../../stores/Amm/AmmMap';\nimport { AmmPoolSnapshot, getBaseQuote, LoopringMap, TickerData, TokenInfo, TokenVolumeV3 } from 'loopring-sdk';\nimport { LoopringAPI } from '../../stores/apis/api';\nimport * as fm from 'loopring-sdk';\nimport { BIG10 } from '../../defs/swap_defs';\nimport { getToken } from 'utils/swap_calc_utils';\nimport { CoinMap, CustomError, ErrorMap } from '@loopring-web/common-resources';\nimport { volumeToCountAsBigNumber } from './volumeToCount';\n\nexport const pairDetailBlock = <C extends { [ key: string ]: any }, I extends { [ key: string ]: any }>({\n                                                                                                           coinKey,\n                                                                                                           ammKey,\n                                                                                                           ammMap\n                                                                                                       }: { coinKey: string, ammKey: string, ammMap: AmmMap<C, I> }):\n    Promise<{\n        ammPoolsBalance: AmmPoolSnapshot,\n        tickMap:  LoopringMap<TickerData>\n}> => {\n    // const exchangeApi = exchangeAPI();\n    // const ammpoolApi = ammpoolAPI();\n    return new Promise((resolve, reject) => {\n        if(LoopringAPI.ammpoolAPI && LoopringAPI.exchangeAPI ) {\n            Promise.all([\n                LoopringAPI.ammpoolAPI.getAmmPoolSnapshot({poolAddress: ammMap[ ammKey ].address}),\n                LoopringAPI.exchangeAPI.getMixTicker({market: coinKey})])\n                // exchangeApi.getMarketTrades({market:coinKey})])\n                //{raw_data},\n                .then(([{ammPoolSnapshot}, {tickMap}]) => {\n                    resolve({\n                        ammPoolsBalance: ammPoolSnapshot,\n                        tickMap,\n                    })\n                })\n\n        }else{\n            reject(new CustomError(ErrorMap.NO_SDK))\n        }\n       \n    })\n}\n\nexport const pairDetailDone = <C>({coinKey, market,ammPoolsBalance, tokenMap,tickerData, _tradeCalcData, coinMap, marketCoins}:any)=>{\n\n    const [, coinSell, coinbuy] = coinKey.match(/(\\w+)-(\\w+)/i)\n    let stob:number|undefined;\n    if (tickerData.base === coinSell) {\n        // const ticker: TickerData = tickMap[market]\n        stob = Number(tickerData.close)\n\n    } else{\n        // const ticker: TickerData = tickMap[market]\n        stob = Number(tickerData.close)!==0? 1/Number(tickerData.close): 0\n    }\n    if(isNaN(stob) && ammPoolsBalance){\n        const {base, quote} = getBaseQuote(coinKey)\n\n        // const baseToken: TokenInfo = getToken(tokenMap, base)\n        // const quoteToken: TokenInfo = getToken(tokenMap, quote)\n        // const baseVol = (fm.toBig(poolBaseTokenVol.volume).div(BIG10.pow(baseToken.decimals)))\n        // const quoteVol = (fm.toBig(quoteBaseTokenVol.volume).div(BIG10.pow(quoteToken.decimals)))\n        //\n        // stob = volumeToCountAsBigNumber(base,poolBaseTokenVol.volume)?.div(\n        //     volumeToCountAsBigNumber(quote,quoteBaseTokenVol.volume) || 1\n        // ) .toNumber()\n        // console.log('1', base, poolBaseTokenVol, quote, quoteBaseTokenVol)\n        //baseToken.tokenId === quoteBaseTokenVol.tokenId && quoteToken.tokenId === poolBaseTokenVol.tokenId) {\n        // const quoteVol = (fm.toBig(quoteBaseTokenVol.volume).div(BIG10.pow(baseToken.decimals)))\n        // const baseVol = (fm.toBig(poolBaseTokenVol.volume).div(BIG10.pow(quoteToken.decimals)))\n        //baseVol.div(quoteVol).toNumber()\n        // console.log('2', base, poolBaseTokenVol, quote, quoteBaseTokenVol)\n        //ErrorMap.NOTS\n        const poolBaseTokenVol: TokenVolumeV3 = ammPoolsBalance.pooled[0];\n        const quoteBaseTokenVol: TokenVolumeV3 = ammPoolsBalance.pooled[1];\n        let poolVolumn:[baseVol:any, quoteVol:any];\n        if ( base && quote && tokenMap[base].tokenId === poolBaseTokenVol.tokenId ) {\n            poolVolumn =  [[base,poolBaseTokenVol.volume],[quote,quoteBaseTokenVol.volume]]\n        } else if (base && quote && tokenMap[base].tokenId === quoteBaseTokenVol.tokenId){\n            poolVolumn =  [[quote,quoteBaseTokenVol.volume],[base,poolBaseTokenVol.volume]]\n        } else {\n            throw new CustomError(ErrorMap.NO_SUPPORT_PAIR)\n        }\n        let [baseVol,quoteVol]  = poolVolumn\n        if(baseVol && quoteVol){\n            // stob = volumeToCountAsBigNumber(baseVol[0],baseVol[1])?.div(\n            //     volumeToCountAsBigNumber(quoteVol[0],quoteVol[1]) || 1\n            // ) .toNumber()\n            stob = volumeToCountAsBigNumber(quoteVol[0],quoteVol[1])?.div(\n                volumeToCountAsBigNumber(baseVol[0],baseVol[1]) || 1).toNumber()\n        }\n    }\n\n    _tradeCalcData.StoB = stob;\n    _tradeCalcData.BtoS = stob !== 0 && stob !== undefined? 1 / (stob * 1.0): 0;\n    _tradeCalcData.sellCoinInfoMap = coinMap && marketCoins?.reduce((prev: any, item: string | number) => {\n        return {...prev, [ item ]: coinMap[ item ]}\n    }, {} as CoinMap<C>)\n    _tradeCalcData.buyCoinInfoMap = coinMap && tokenMap && tokenMap[ _tradeCalcData.coinSell as string ].tradePairs?.reduce((prev: any, item: string | number) => {\n        return {...prev, [ item ]: coinMap[ item ]}\n    }, {} as CoinMap<C>);\n\n    return {\n        _tradeCalcData\n    }\n    //setPair();\n}","import store from '../../stores';\nimport { WalletMap,WalletCoin,CoinKey } from '@loopring-web/common-resources';\nimport * as fm from 'loopring-sdk';\nimport { fromWEI } from '../../utils/swap_calc_utils';\nimport { UserBalanceInfo } from 'loopring-sdk';\nexport type WalletMapExtend<C> =    {\n    [K in CoinKey<C>]?: WalletCoin<C> & {\n    detail:UserBalanceInfo\n}\n}\n\n\n// export const makeWalletLayer1 = <C extends { [ key: string ]: any }>():{ walletMap: WalletMapExtend<C> | undefined } => {\n//     const {walletLayer1} = store.getState().walletLayer1;\n//     const {tokenMap} = store.getState().tokenMap;\n//     let walletMap: WalletMapExtend<C> | undefined;\n//     if (walletLayer1) {\n//         walletMap = Reflect.ownKeys(walletLayer1).reduce((prev, item) => {\n//             const {total, locked, pending: {withdraw}} = walletLayer1[ item as string ];\n//             const countBig = fm.toBig(total).minus(fm.toBig(locked)).minus(fm.toBig(withdraw)).toString()\n//             return {\n//                 ...prev, [ item ]: {\n//                     belong: item,\n//                     count: fromWEI(tokenMap, item, countBig),\n//                     detail: walletLayer1[ item as string ]\n//                 }\n//             }\n//         }, {} as  WalletMapExtend<C> )\n//     }\n//\n//     return {walletMap}\n// }\n\nexport const makeWallet = <C extends { [ key: string ]: any }>():{ walletMap: WalletMapExtend<C> | undefined } => {\n    const {walletLayer2} = store.getState().walletLayer2;\n    const {tokenMap} = store.getState().tokenMap;\n    let walletMap: WalletMapExtend<C> | undefined;\n    if (walletLayer2) {\n        walletMap = Reflect.ownKeys(walletLayer2).reduce((prev, item) => {\n            const {total, locked, pending: {withdraw}} = walletLayer2[ item as string ];\n            const countBig = fm.toBig(total).minus(fm.toBig(locked)).toString()\n            return {\n                ...prev, [ item ]: {\n                    belong: item,\n                    count: fromWEI(tokenMap, item, countBig),\n                    detail: walletLayer2[ item as string ]\n                }\n            }\n        }, {} as  WalletMapExtend<C> )\n    }\n\n    return {walletMap}\n}","import { Subject } from 'rxjs';\n// import { TradeFloat } from '@loopring-web/common-resources';\nimport { LoopringMap } from 'loopring-sdk/dist/defs/loopring_defs';\nimport { TickerData } from 'loopring-sdk';\nimport { makeTickerMap } from '../hooks/help';\nimport { TickerMap } from '../stores/ticker';\n\nconst subject = new Subject<{ tickerMap: TickerMap<{ [ key: string ]: any }> }>();\n\n// export type TickerMap<R> = {\n//     [key in keyof R]:TradeFloat\n// }\n// <R extends {[key:string]:any}>\n  //<R>\nexport const tickerService = {\n    sendTicker: (_tickerMap:LoopringMap<TickerData>) => {\n       const tickerMap:TickerMap<{[key:string]:any}> = makeTickerMap({tickerMap:_tickerMap})\n       subject.next({ tickerMap })\n    },\n    // clearMessages: () => subject.next(),\n    onSocket: () => subject.asObservable()\n};","export enum STATUS {\n    UNSET='UNSET',\n    PENDING='PENDING',\n    ERROR='ERROR',   // success failed timeout is Done\n    DONE='DONE',   // success failed timeout is Done\n}\n","import {\n    ChainId,\n    getAccountArg,\n    getAmmpoolArg,\n    getCandlestickArg,\n    getOrderArg,\n    getOrderBookArg,\n    getTickerArg,\n    getTradeArg,\n    toBig,\n    WsTopicType\n} from 'loopring-sdk';\nimport { LoopringAPI } from '../stores/apis/api';\nimport store from '../stores';\nimport { updateSocketURL } from '../stores/system';\nimport { tickerService } from './tickerService';\nimport { ammPoolService } from './ammPoolService';\nimport { CustomError, ErrorMap } from '@loopring-web/common-resources';\n\nexport type socketEventMap = { fn: (e: MessageEvent, props?: { [ key: string ]: any }) => any, deps?: any[] }\n\nexport enum SocketEventType {\n    pingpong = 'pingpong',\n    account = \"account\",\n    order = \"order\",\n    orderbook = \"orderbook\",\n    trade = \"trade\",\n    ticker = \"ticker\",\n    candlestick = \"candlestick\",\n    ammpool = \"ammpool\"\n}\n\n\nexport type SocketEventMap = {\n    [key in WsTopicType]: socketEventMap\n}\n\nconst pingPong = {\n    fn: (e: MessageEvent) => {\n        if (e.data === 'ping') {\n            // @ts-ignore\n            global.looperingSocket.send('pong')\n        }\n    }\n}\n\n//@ts-ignore\nwindow.socketEventMap = {\n    [ SocketEventType.pingpong ]: pingPong\n} as SocketEventMap;\n\nexport const addSocketEvents = (key: string, event: socketEventMap) => {\n    // @ts-ignore\n    window.socketEventMap = {\n        // @ts-ignore\n        ...window.socketEventMap,\n        [ key ]: event\n    }\n}\nexport const removeSocketEvents = (key: string) => {\n    // @ts-ignore\n    if (window.socketEventMap && window.socketEventMap[ key ]) {\n        // @ts-ignore\n        delete window.socketEventMap[ key ]\n    }\n}\nexport const resetSocketEvents = () => {\n    // @ts-ignore\n    window.socketEventMap = {\n        [ SocketEventType.pingpong ]: pingPong\n    }\n}\n\nexport const isConnectSocket = () => {\n    const global: Window = window || globalThis;\n    // @ts-ignore\n    if (global.looperingSocket && global.looperingSocket.send) {\n        return true;\n    } else {\n        return false\n    }\n}\nexport const socketClose = async () => {\n    const global = window || globalThis;\n    // @ts-ignore\n    let ws: WebSocket | undefined = global.loopringSocket;\n\n    return new Promise((reolve, reject) => {\n        if (ws) {\n            ws.onclose = function (e) {\n                reolve(`Socket is closed, ${e.reason}`)\n            };\n            ws.close();\n        } else {\n            Promise.resolve('no websocket')\n        }\n    })\n}\nconst makeTopics = (topics: any, apiKey?: string) => {\n    let data: any = {\n        op: 'sub',\n        unsubscribeAll: 'true',\n        topics: topics,\n    }\n\n    if (apiKey) {\n        data.apiKey = apiKey\n    }\n    // console.log('Socket>>Socket',JSON.stringify(data));\n    return JSON.stringify(data)\n    // sendMessage(flat_txt)\n}\nexport const clearInitTimer = (init?: boolean) => {\n    const global: any = window || globalThis;\n\n    if (global.__wsTimer__) {\n        if (global.__wsTimer__.timer && global.__wsTimer__.timer !== -1) {\n            clearTimeout(global.__wsTimer__.timer)\n        }\n        global.__wsTimer__.timer = -1\n        global.__wsTimer__.count++;\n    }\n    if (init) {\n        global.__wsTimer__ = {\n            //...global.__wsTimer__,\n            timer: -1,\n            count: 0\n        }\n    }\n}\nexport const socketConnect = async ({chainId, topics, apiKey}: {\n    chainId: ChainId | 'unknown',\n    topics: any[],\n    apiKey?: string\n}) => {\n    try {\n        if (chainId !== 'unknown' && LoopringAPI.wsAPI && topics) {\n            const url = ChainId.MAINNET === chainId ? process.env.REACT_APP_API_URL : process.env.REACT_APP_API_URL_UAT;\n            const {wsKey} = await LoopringAPI.wsAPI.getWsKey();\n            let baseSocket: string = `wss://ws.${url}/v3/ws?wsApiKey=${wsKey}`;\n            store.dispatch(updateSocketURL({socketURL: baseSocket}));\n            const global: any = window || globalThis;\n\n            let ws: WebSocket;\n            ws = new WebSocket(baseSocket);\n            // @ts-ignore\n            global.looperingSocket = ws;\n            ws.onopen = function () {\n                console.warn('Socket>>Socket', \"WebSocket is open now.\");\n                // @ts-ignore\n                ws.send(makeTopics(topics))\n            };\n            ws.onmessage = function (e) {\n                const {data} = e;\n                // data.topic.topic;\n                if (data === 'ping') {\n                    // console.log('Socket>>Socket ping:', e);\n                    global.socketEventMap.pingpong.fn.call(global.socketEventMap.pingpong.deps, e);\n                } else {\n                    const result = JSON.parse(data);\n                    const {topics, topic} = result;\n                    if (topics) {\n                        // console.log('Socket>>Socket topics first return', topics);\n                    }\n                    if (topic && topic.topic) {\n                        const {topic: {topic: _topic}, data} = result\n                        // {\n                        //     \"topic\" : {\n                        //         \"topic\" : \"ticker\",\n                        //             \"market\" : \"LRC-USDT\"\n                        //     },\n                        //     \"ts\" : 1626062177522,\n                        //         \"data\" : [ \"LRC-USDT\", \"1626062177173\", \"1614688563700000000000000\", \"381151436640\", \"0.2315\", \"0.2408\", \"0.2309\", \"0.2408\", \"869\", \"0.2406\", \"0.2413\" ]\n                        // }\n                        // console.log('Socket>>Socket topic', _topic, data);\n                        global.socketEventMap[ topic.topic ].fn.call(global.socketEventMap[ topic.topic ].deps, data)\n\n                    }\n\n                }\n                return false;\n            };\n            ws.onclose = async function (e) {\n                // @ts-ignore\n                console.error('Socket>>Socket', e);\n                if (global.looperingSocket) {\n                    global.looperingSocket = undefined;\n                }\n                console.log('Socket>>Socket', 'Socket is closed. Reconnect will be attempted in 1 second.', e.reason);\n                clearInitTimer()\n                if (global.__wsTimer__.count < 5) {\n                    global.__wsTimer__.timer = setTimeout(function () {\n                        socketConnect.call(global, {chainId, topics, apiKey});\n                    }, 1000 * global.__wsTimer__.count);\n                }\n            };\n            ws.onerror = function (err: Event) {\n                console.error('Socket>>Socket', 'Socket encountered error:', 'Closing socket');\n            };\n\n        }\n    } catch (error) {\n        console.error('Socket>>Socket', 'connect error, not from reconnect')\n\n        // @ts-ignore\n        if (global.looperingSocket) {\n            // @ts-ignore\n            global.looperingSocket.close()\n        }\n\n\n    }\n}\n\nexport const socketSendMessage = async ({socket, chainId, apiKey}: {\n    chainId: ChainId | 'unknown',\n    socket: { [ key: string ]: string[] }\n    apiKey?: string\n}): Promise<boolean> => {\n    try {\n        if (socket && Reflect.ownKeys(socket).length) {\n            //register ping pong event\n            clearInitTimer(true);\n            resetSocketEvents();\n            const {topics} = makeMessageArray({socket});\n            if (!isConnectSocket()) {\n                await socketConnect({chainId, topics, apiKey})\n            } else {\n                const global: Window = window || globalThis;\n                // @ts-ignore\n                global.looperingSocket.send(makeTopics(topics))\n\n            }\n            return true\n        } else {\n            if (!isConnectSocket()) {\n                socketClose();\n            }\n            return false\n        }\n    } catch (error) {\n        throw  new CustomError(ErrorMap.SOCKET_ERROR)\n    }\n\n}\n\n\nexport const makeMessageArray = ({socket}: { socket: { [ key: string ]: string[] } }): {\n    topics: any[]\n} => {\n    let topics: any[] = [], list: any[] = []; // let registerDispatch = [];\n    Reflect.ownKeys(socket).forEach((eventType) => {\n        switch (eventType) {\n            case  SocketEventType.ticker:\n                list = socket[ SocketEventType.ticker ].map(key => getTickerArg(key))\n                if (list && list.length) {\n                    makeReceiveMessageCallback(SocketEventType.ticker)\n                    topics = [...topics, ...list];\n                }\n                break\n            case  SocketEventType.account:\n                if(socket[ SocketEventType.account ]){\n                    list = [getAccountArg()]\n                }\n                if (list && list.length) {\n                    makeReceiveMessageCallback(SocketEventType.account)\n                    topics = [...topics, ...list];\n                }\n                break;\n            case  SocketEventType.order:\n                //FIX:  make order Topic\n                list = socket[ SocketEventType.order ].map(key => getOrderArg(key))\n                if (list && list.length) {\n                    makeReceiveMessageCallback(SocketEventType.order)\n                    topics = [...topics, ...list];\n                }\n                break\n            case  SocketEventType.orderbook:\n                //FIX:  make orderbook Topic\n                list = socket[ SocketEventType.orderbook ].map(key => getOrderBookArg(key, 0))\n                if (list && list.length) {\n                    makeReceiveMessageCallback(SocketEventType.orderbook)\n                    topics = [...topics, ...list];\n                }\n                break\n            case  SocketEventType.trade:\n                list = socket[ SocketEventType.trade ].map(key => getTradeArg(key))\n                if (list && list.length) {\n                    makeReceiveMessageCallback(SocketEventType.trade)\n                    topics = [...topics, ...list];\n                }\n                break\n            case  SocketEventType.candlestick:\n                list = socket[ SocketEventType.candlestick ].map(key => getCandlestickArg(key))\n                if (list && list.length) {\n                    makeReceiveMessageCallback(SocketEventType.candlestick)\n                    topics = [...topics, ...list];\n                }\n                break\n            case  SocketEventType.ammpool:\n                list = socket[ SocketEventType.ammpool ].map(key => getAmmpoolArg(key))\n                if (list && list.length) {\n                    makeReceiveMessageCallback(SocketEventType.ammpool)\n                    topics = [...topics, ...list];\n                }\n                break\n        }\n    })\n    return {topics}\n}\nconst SocketEventMap = {\n    // PING_PONG : (e)=>{\n    //\n    // },\n    [ SocketEventType.account ]: (_e: any) => {\n\n    },\n    [ SocketEventType.order ]: (_e: any) => {\n\n    },\n    [ SocketEventType.orderbook ]: (_e: any) => {\n\n    },\n    [ SocketEventType.trade ]: (_e: any) => {\n\n    },\n    [ SocketEventType.ticker ]: (data: string[]) => {\n        const [symbol, timestamp, size, volume, open, high, low, close, count, bid, ask] = data;\n        // @ts-ignore\n        const [, base, quote] = symbol.match(/(\\w+)-(\\w+)/i);\n        const base_token_volume = size;\n        const quote_token_volume = volume;\n        const change = open === undefined || Number(open) === 0 ? undefined : (toBig(close).minus(open)).div(open)\n        // @ts-ignore\n        tickerService.sendTicker({\n            [ symbol ]: {\n                symbol, base, quote,\n                base_token_volume,\n                quote_token_volume,\n                timestamp: Number(timestamp),\n                change,\n                base_fee_amt: undefined,\n                quote_fee_amt: undefined,\n                open, high, low, close, count, bid, ask\n            }\n        })\n    },\n    [ SocketEventType.candlestick ]: (_e: any) => {\n\n    },\n    [ SocketEventType.ammpool ]: (data: string[]) => {\n        // const [market,timestamp,size,volume,open,high,low,close,count,bid,ask] = data;\n        // @ts-ignore\n        const [poolName, poolAddress, pooled, [tokenId, volume], risky] = data;\n        // @ts-ignore\n        ammPoolService.sendAmmPool({poolName, poolAddress, pooled, lp: {tokenId, volume}, risky})\n    },\n}\n\n\nexport const makeReceiveMessageCallback = (type: keyof typeof SocketEventType) => {\n\n\n    addSocketEvents(type, {\n        // @ts-ignore\n        fn: SocketEventMap [ type ]\n    })\n}\n\n\n\n\n\n","import { useDeepCompareEffect } from \"react-use\"\n\nexport function useCustomDCEffect(action: any, deps: any[] | undefined | null) {\n    useDeepCompareEffect(action, [deps || {}])\n}\n","import { Subject } from 'rxjs';\nimport { TradeFloat } from '@loopring-web/common-resources';\n\nconst subject = new Subject();\n\nexport type AmmPoolMap<R> = {\n    [key in keyof R]:TradeFloat\n}\n// <R extends {[key:string]:any}>\n\nexport const ammPoolService = {\n    sendAmmPool: (ammPoolMap:AmmPoolMap<{[key:string]:any}>) => subject.next({ ammPoolMap: ammPoolMap }),\n    // clearMessages: () => subject.next(),\n    onSocket: () => subject.asObservable()\n};","import store from '../../stores';\nimport { toBig } from 'loopring-sdk';\nimport { BIG10 } from '../../defs/swap_defs';\nimport BigNumber from 'bignumber.js';\n\nexport const volumeToCount = (symbol:string,volumn:string|number|BigNumber,tokenMap= store.getState().tokenMap.tokenMap):number|undefined =>{\n   const result =  volumeToCountAsBigNumber(symbol,volumn,tokenMap);\n   return result? result.toNumber():undefined;\n}\nexport const volumeToCountAsBigNumber = (symbol:string,volumn:string|number|BigNumber,tokenMap= store.getState().tokenMap.tokenMap):BigNumber|undefined =>{\n    if(tokenMap && tokenMap[symbol] && typeof volumn !== 'undefined'){\n        try{\n            return toBig(volumn).div( BIG10.pow(tokenMap[symbol].decimals))\n        }catch (error){\n            throw error;\n        }\n    }else{\n        return undefined;\n    }\n}","import React from 'react';\nimport { useAmmMap } from '../../../stores/Amm/AmmMap';\nimport { AmmDetail, CustomError, ErrorMap, } from '@loopring-web/common-resources';\nimport { deepClone } from '../../../utils/obj_tools';\nimport { STATUS } from '../../../stores/constant';\nimport { useTokenMap } from '../../../stores/token';\nimport { useSocket } from '../../../stores/socket';\nimport { useTicker } from '../../../stores/ticker';\n// import { tickerService } from '../../../services/tickerService';\n\nexport function useAmmMapUI<R extends { [ key: string ]: any }, I extends { [ key: string ]: any }>({pageSize}: { pageSize: number }) {\n    const [rawData, setRawData] = React.useState<Array<AmmDetail<any>> | []>([]);\n    const [page, setPage] = React.useState<number>(1);\n    // const [keys, setKeys] = React.useState<string[]>([]);\n    const [timestamp, setTimestamp ] = React.useState<NodeJS.Timer|-1>(-1)\n    const {coinMap} = useTokenMap();\n    const {\n        ammMap,\n        status: ammMapStatus,\n        // errorMessage: errorAmmMap,\n        statusUnset: ammMapStatusUnset,\n        // updateAmmMap,\n    } = useAmmMap();\n    const {\n        tickerMap,\n        status: tickerStatus,\n        // errorMessage: errorTickerMap,\n        statusUnset: tickerStatusUnset,\n        updateTickers,\n    } = useTicker();\n    const {\n        status:socketStatus,\n        // errorMessage: errorTickerMap,\n        statusUnset: socketStatusUnset,\n    } = useSocket();\n    const updateRawData = React.useCallback( (tickerMap) => {\n        try {\n            const _ammMap = deepClone(ammMap);\n            for (let tickerMapKey in tickerMap) {\n                if(_ammMap['AMM-' + tickerMapKey ]){\n                    _ammMap['AMM-' + tickerMapKey ].tradeFloat =  {\n                        ..._ammMap['AMM-' + tickerMapKey ].tradeFloat,\n                        ...tickerMap[ tickerMapKey ],\n                        // APY: _ammMap['AMM-' + tickerMapKey ].APY\n                    }\n\n                }\n            }\n            setRawData(Object.keys(_ammMap).map((ammKey: string) => {\n                if (coinMap) {\n                    _ammMap[ ammKey ][ 'coinAInfo' ] = coinMap[ _ammMap[ ammKey ][ 'coinA' ] ];\n                    _ammMap[ ammKey ][ 'coinBInfo' ] = coinMap[ _ammMap[ ammKey ][ 'coinB' ] ];\n                }\n                return  _ammMap[ ammKey ];\n            }) )\n        } catch (error) {\n            throw new CustomError({...ErrorMap.NO_TOKEN_MAP, options: error})\n        }\n\n    } ,[ammMap]);\n    const updateTickerLoop =  React.useCallback((_keys?:string[])=>{\n\n        if(timestamp !== -1){\n            clearTimeout(timestamp)\n        }\n\n        setTimestamp(setTimeout(()=>{\n            updateTickerLoop(_keys);\n        },60000))\n        \n        //console.log(_keys)\n        setImmediate(updateTickers,_keys)\n    },[])\n\n    const updateTickersUI = React.useCallback((_page) => {\n        setPage(_page);\n        if (ammMap && Object.keys(ammMap).length > 0) {\n            const _keys = []\n            for (let i = (page - 1) * pageSize; i < Object.keys(ammMap).length && i < (page - 1) * pageSize + pageSize; i++) {\n                _keys.push(Object.keys(ammMap)[ i ]);\n            }\n            \n            // setKeys(_keys);\n            updateTickerLoop(_keys);\n            // try{\n            //    // socketStart({})\n            // }catch (error){\n            //\n            // }\n\n\n        }\n    }, [ammMap, pageSize]);\n    React.useEffect(() => {\n        if(ammMap && Object.keys(ammMap).length !== 0) {\n            updateTickersUI(page)\n        }\n    }, []);\n\n    React.useEffect(() => {\n        switch (tickerStatus) {\n            case \"ERROR\":\n                console.log(\"ERROR\", 'get ticker error,ui');\n                tickerStatusUnset()\n                break;\n            case \"PENDING\":\n                break;\n            case \"DONE\":\n                tickerStatusUnset();\n                \n                updateRawData(tickerMap)\n                break;\n            default:\n                break;\n        }\n    }, [tickerStatus, tickerStatusUnset]);\n\n    React.useEffect(() => {\n        switch (ammMapStatus) {\n            case \"ERROR\":\n                console.log(\"ERROR\", 'get ammMap error,ui');\n                ammMapStatusUnset();\n                break;\n            case STATUS.PENDING:\n                console.log(\"PENDING\", 'get ammMap error,ui');\n                break;\n            case STATUS.DONE:\n                ammMapStatusUnset();\n                updateTickersUI(1)\n                break;\n            default :\n                break;\n        }\n    }, [ammMapStatus, ammMapStatusUnset, updateTickersUI]);\n\n\n\n    return {\n        page,\n        rawData,\n        updateTickersUI,\n    }\n}\n\n","import { WsAPI, ExchangeAPI, AmmpoolAPI, UserAPI, DEFAULT_TIMEOUT, } from 'loopring-sdk'\nimport store, { RootState } from 'stores'\nimport { useSelector } from 'react-redux'\n\nimport { useMemo } from 'react'\n\nfunction useApi(ApiClass: any, timeout = DEFAULT_TIMEOUT) {\n    // const chainId = store.getState().trading.chainId\n    // return new ApiClass(chainId, timeout)\n\n  const { chainId, } = useSelector((state: RootState) => state.trading)\n\n  const genApi = () => {\n      if (!chainId) {\n          return undefined\n      }\n\n      return new ApiClass(chainId, timeout)\n  }\n\n  const api = useMemo(genApi, [ApiClass, chainId, timeout])\n\n  return api\n}\n\nexport function useWsAPI() {\n    return useApi(WsAPI) as WsAPI\n}\n\nexport function useExchangeAPI() {\n    return useApi(ExchangeAPI) as ExchangeAPI\n}\n\nexport function useAmmpoolAPI() {\n    return useApi(AmmpoolAPI) as AmmpoolAPI\n}\n\nexport function useUserAPI() {\n    return useApi(UserAPI) as UserAPI\n}\n"],"sourceRoot":""}