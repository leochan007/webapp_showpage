{"version":3,"sources":["../../../node_modules/bip66/index.js","../../../node_modules/bip39/index.js"],"names":["Buffer","require","module","exports","check","buffer","length","lenR","lenS","decode","Error","r","slice","s","encode","signature","allocUnsafe","copy","createHash","_pbkdf2","pbkdf2","pbkdf2Sync","pbkdf2Async","randomBytes","unorm","CHINESE_SIMPLIFIED_WORDLIST","CHINESE_TRADITIONAL_WORDLIST","ENGLISH_WORDLIST","FRENCH_WORDLIST","ITALIAN_WORDLIST","JAPANESE_WORDLIST","KOREAN_WORDLIST","SPANISH_WORDLIST","DEFAULT_WORDLIST","INVALID_MNEMONIC","INVALID_ENTROPY","lpad","str","padString","binaryToByte","bin","parseInt","bytesToBinary","bytes","map","x","toString","join","deriveChecksumBits","entropyBuffer","CS","hash","update","digest","call","salt","password","mnemonicToSeed","mnemonic","mnemonicBuffer","from","nfkd","saltBuffer","mnemonicToSeedAsync","Promise","resolve","reject","error","err","data","mnemonicToEntropy","wordlist","words","split","bits","word","index","indexOf","dividerIndex","Math","floor","entropyBits","checksumBits","entropyBytes","match","entropy","entropyToMnemonic","isBuffer","TypeError","binary","mnemonicToSeedHex","mnemonicToSeedHexAsync","then","buf","generateMnemonic","strength","rng","validateMnemonic","e","wordlists","EN","JA","chinese_simplified","chinese_traditional","english","french","italian","japanese","korean","spanish"],"mappings":"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","file":"static/js/main~0b2bf7bf.663fa72f.chunk.js","sourcesContent":["// Reference https://github.com/bitcoin/bips/blob/master/bip-0066.mediawiki\n// Format: 0x30 [total-length] 0x02 [R-length] [R] 0x02 [S-length] [S]\n// NOTE: SIGHASH byte ignored AND restricted, truncate before use\n\nvar Buffer = require('safe-buffer').Buffer\n\nfunction check (buffer) {\n  if (buffer.length < 8) return false\n  if (buffer.length > 72) return false\n  if (buffer[0] !== 0x30) return false\n  if (buffer[1] !== buffer.length - 2) return false\n  if (buffer[2] !== 0x02) return false\n\n  var lenR = buffer[3]\n  if (lenR === 0) return false\n  if (5 + lenR >= buffer.length) return false\n  if (buffer[4 + lenR] !== 0x02) return false\n\n  var lenS = buffer[5 + lenR]\n  if (lenS === 0) return false\n  if ((6 + lenR + lenS) !== buffer.length) return false\n\n  if (buffer[4] & 0x80) return false\n  if (lenR > 1 && (buffer[4] === 0x00) && !(buffer[5] & 0x80)) return false\n\n  if (buffer[lenR + 6] & 0x80) return false\n  if (lenS > 1 && (buffer[lenR + 6] === 0x00) && !(buffer[lenR + 7] & 0x80)) return false\n  return true\n}\n\nfunction decode (buffer) {\n  if (buffer.length < 8) throw new Error('DER sequence length is too short')\n  if (buffer.length > 72) throw new Error('DER sequence length is too long')\n  if (buffer[0] !== 0x30) throw new Error('Expected DER sequence')\n  if (buffer[1] !== buffer.length - 2) throw new Error('DER sequence length is invalid')\n  if (buffer[2] !== 0x02) throw new Error('Expected DER integer')\n\n  var lenR = buffer[3]\n  if (lenR === 0) throw new Error('R length is zero')\n  if (5 + lenR >= buffer.length) throw new Error('R length is too long')\n  if (buffer[4 + lenR] !== 0x02) throw new Error('Expected DER integer (2)')\n\n  var lenS = buffer[5 + lenR]\n  if (lenS === 0) throw new Error('S length is zero')\n  if ((6 + lenR + lenS) !== buffer.length) throw new Error('S length is invalid')\n\n  if (buffer[4] & 0x80) throw new Error('R value is negative')\n  if (lenR > 1 && (buffer[4] === 0x00) && !(buffer[5] & 0x80)) throw new Error('R value excessively padded')\n\n  if (buffer[lenR + 6] & 0x80) throw new Error('S value is negative')\n  if (lenS > 1 && (buffer[lenR + 6] === 0x00) && !(buffer[lenR + 7] & 0x80)) throw new Error('S value excessively padded')\n\n  // non-BIP66 - extract R, S values\n  return {\n    r: buffer.slice(4, 4 + lenR),\n    s: buffer.slice(6 + lenR)\n  }\n}\n\n/*\n * Expects r and s to be positive DER integers.\n *\n * The DER format uses the most significant bit as a sign bit (& 0x80).\n * If the significant bit is set AND the integer is positive, a 0x00 is prepended.\n *\n * Examples:\n *\n *      0 =>     0x00\n *      1 =>     0x01\n *     -1 =>     0xff\n *    127 =>     0x7f\n *   -127 =>     0x81\n *    128 =>   0x0080\n *   -128 =>     0x80\n *    255 =>   0x00ff\n *   -255 =>   0xff01\n *  16300 =>   0x3fac\n * -16300 =>   0xc054\n *  62300 => 0x00f35c\n * -62300 => 0xff0ca4\n*/\nfunction encode (r, s) {\n  var lenR = r.length\n  var lenS = s.length\n  if (lenR === 0) throw new Error('R length is zero')\n  if (lenS === 0) throw new Error('S length is zero')\n  if (lenR > 33) throw new Error('R length is too long')\n  if (lenS > 33) throw new Error('S length is too long')\n  if (r[0] & 0x80) throw new Error('R value is negative')\n  if (s[0] & 0x80) throw new Error('S value is negative')\n  if (lenR > 1 && (r[0] === 0x00) && !(r[1] & 0x80)) throw new Error('R value excessively padded')\n  if (lenS > 1 && (s[0] === 0x00) && !(s[1] & 0x80)) throw new Error('S value excessively padded')\n\n  var signature = Buffer.allocUnsafe(6 + lenR + lenS)\n\n  // 0x30 [total-length] 0x02 [R-length] [R] 0x02 [S-length] [S]\n  signature[0] = 0x30\n  signature[1] = signature.length - 2\n  signature[2] = 0x02\n  signature[3] = r.length\n  r.copy(signature, 4)\n  signature[4 + lenR] = 0x02\n  signature[5 + lenR] = s.length\n  s.copy(signature, 6 + lenR)\n\n  return signature\n}\n\nmodule.exports = {\n  check: check,\n  decode: decode,\n  encode: encode\n}\n","var Buffer = require('safe-buffer').Buffer\nvar createHash = require('create-hash')\nvar _pbkdf2 = require('pbkdf2')\nvar pbkdf2 = _pbkdf2.pbkdf2Sync\nvar pbkdf2Async = _pbkdf2.pbkdf2\nvar randomBytes = require('randombytes')\n\n// use unorm until String.prototype.normalize gets better browser support\nvar unorm = require('unorm')\n\nvar CHINESE_SIMPLIFIED_WORDLIST = require('./wordlists/chinese_simplified.json')\nvar CHINESE_TRADITIONAL_WORDLIST = require('./wordlists/chinese_traditional.json')\nvar ENGLISH_WORDLIST = require('./wordlists/english.json')\nvar FRENCH_WORDLIST = require('./wordlists/french.json')\nvar ITALIAN_WORDLIST = require('./wordlists/italian.json')\nvar JAPANESE_WORDLIST = require('./wordlists/japanese.json')\nvar KOREAN_WORDLIST = require('./wordlists/korean.json')\nvar SPANISH_WORDLIST = require('./wordlists/spanish.json')\nvar DEFAULT_WORDLIST = ENGLISH_WORDLIST\n\nvar INVALID_MNEMONIC = 'Invalid mnemonic'\nvar INVALID_ENTROPY = 'Invalid entropy'\nvar INVALID_CHECKSUM = 'Invalid mnemonic checksum'\n\nfunction lpad (str, padString, length) {\n  while (str.length < length) str = padString + str\n  return str\n}\n\nfunction binaryToByte (bin) {\n  return parseInt(bin, 2)\n}\n\nfunction bytesToBinary (bytes) {\n  return bytes.map(function (x) {\n    return lpad(x.toString(2), '0', 8)\n  }).join('')\n}\n\nfunction deriveChecksumBits (entropyBuffer) {\n  var ENT = entropyBuffer.length * 8\n  var CS = ENT / 32\n  var hash = createHash('sha256').update(entropyBuffer).digest()\n\n  return bytesToBinary([].slice.call(hash)).slice(0, CS)\n}\n\nfunction salt (password) {\n  return 'mnemonic' + (password || '')\n}\n\nfunction mnemonicToSeed (mnemonic, password) {\n  var mnemonicBuffer = Buffer.from(unorm.nfkd(mnemonic), 'utf8')\n  var saltBuffer = Buffer.from(salt(unorm.nfkd(password)), 'utf8')\n\n  return pbkdf2(mnemonicBuffer, saltBuffer, 2048, 64, 'sha512')\n}\n\nfunction mnemonicToSeedHex (mnemonic, password) {\n  return mnemonicToSeed(mnemonic, password).toString('hex')\n}\n\nfunction mnemonicToSeedAsync (mnemonic, password) {\n  return new Promise(function (resolve, reject) {\n    try {\n      var mnemonicBuffer = Buffer.from(unorm.nfkd(mnemonic), 'utf8')\n      var saltBuffer = Buffer.from(salt(unorm.nfkd(password)), 'utf8')\n    } catch (error) {\n      return reject(error)\n    }\n\n    pbkdf2Async(mnemonicBuffer, saltBuffer, 2048, 64, 'sha512', function (err, data) {\n      if (err) return reject(err)\n      else return resolve(data)\n    })\n  })\n}\n\nfunction mnemonicToSeedHexAsync (mnemonic, password) {\n  return mnemonicToSeedAsync(mnemonic, password)\n    .then(function (buf) { return buf.toString('hex') })\n}\n\nfunction mnemonicToEntropy (mnemonic, wordlist) {\n  wordlist = wordlist || DEFAULT_WORDLIST\n\n  var words = unorm.nfkd(mnemonic).split(' ')\n  if (words.length % 3 !== 0) throw new Error(INVALID_MNEMONIC)\n\n  // convert word indices to 11 bit binary strings\n  var bits = words.map(function (word) {\n    var index = wordlist.indexOf(word)\n    if (index === -1) throw new Error(INVALID_MNEMONIC)\n\n    return lpad(index.toString(2), '0', 11)\n  }).join('')\n\n  // split the binary string into ENT/CS\n  var dividerIndex = Math.floor(bits.length / 33) * 32\n  var entropyBits = bits.slice(0, dividerIndex)\n  var checksumBits = bits.slice(dividerIndex)\n\n  // calculate the checksum and compare\n  var entropyBytes = entropyBits.match(/(.{1,8})/g).map(binaryToByte)\n  if (entropyBytes.length < 16) throw new Error(INVALID_ENTROPY)\n  if (entropyBytes.length > 32) throw new Error(INVALID_ENTROPY)\n  if (entropyBytes.length % 4 !== 0) throw new Error(INVALID_ENTROPY)\n\n  var entropy = Buffer.from(entropyBytes)\n  var newChecksum = deriveChecksumBits(entropy)\n  if (newChecksum !== checksumBits) throw new Error(INVALID_CHECKSUM)\n\n  return entropy.toString('hex')\n}\n\nfunction entropyToMnemonic (entropy, wordlist) {\n  if (!Buffer.isBuffer(entropy)) entropy = Buffer.from(entropy, 'hex')\n  wordlist = wordlist || DEFAULT_WORDLIST\n\n  // 128 <= ENT <= 256\n  if (entropy.length < 16) throw new TypeError(INVALID_ENTROPY)\n  if (entropy.length > 32) throw new TypeError(INVALID_ENTROPY)\n  if (entropy.length % 4 !== 0) throw new TypeError(INVALID_ENTROPY)\n\n  var entropyBits = bytesToBinary([].slice.call(entropy))\n  var checksumBits = deriveChecksumBits(entropy)\n\n  var bits = entropyBits + checksumBits\n  var chunks = bits.match(/(.{1,11})/g)\n  var words = chunks.map(function (binary) {\n    var index = binaryToByte(binary)\n    return wordlist[index]\n  })\n\n  return wordlist === JAPANESE_WORDLIST ? words.join('\\u3000') : words.join(' ')\n}\n\nfunction generateMnemonic (strength, rng, wordlist) {\n  strength = strength || 128\n  if (strength % 32 !== 0) throw new TypeError(INVALID_ENTROPY)\n  rng = rng || randomBytes\n\n  return entropyToMnemonic(rng(strength / 8), wordlist)\n}\n\nfunction validateMnemonic (mnemonic, wordlist) {\n  try {\n    mnemonicToEntropy(mnemonic, wordlist)\n  } catch (e) {\n    return false\n  }\n\n  return true\n}\n\nmodule.exports = {\n  mnemonicToSeed: mnemonicToSeed,\n  mnemonicToSeedAsync: mnemonicToSeedAsync,\n  mnemonicToSeedHex: mnemonicToSeedHex,\n  mnemonicToSeedHexAsync: mnemonicToSeedHexAsync,\n  mnemonicToEntropy: mnemonicToEntropy,\n  entropyToMnemonic: entropyToMnemonic,\n  generateMnemonic: generateMnemonic,\n  validateMnemonic: validateMnemonic,\n  wordlists: {\n    EN: ENGLISH_WORDLIST,\n    JA: JAPANESE_WORDLIST,\n\n    chinese_simplified: CHINESE_SIMPLIFIED_WORDLIST,\n    chinese_traditional: CHINESE_TRADITIONAL_WORDLIST,\n    english: ENGLISH_WORDLIST,\n    french: FRENCH_WORDLIST,\n    italian: ITALIAN_WORDLIST,\n    japanese: JAPANESE_WORDLIST,\n    korean: KOREAN_WORDLIST,\n    spanish: SPANISH_WORDLIST\n  }\n}\n"],"sourceRoot":""}