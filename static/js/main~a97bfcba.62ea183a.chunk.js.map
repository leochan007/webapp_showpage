{"version":3,"sources":["defs/web3_defs.ts","stores/account/hook.ts","state_machine/machine_builder.ts","defs/swap_defs.ts","stores/account/reducer.ts","stores/Amm/AmmMap/hook.ts","stores/trading/hook.ts","stores/token/hook.ts","hooks/web3/useWeb3.ts","networks/web3_connectors.ts","stores/walletLayer2/hook.ts","stores/Amm/AmmMap/reducer.ts","index.tsx","stores/socket/reducer.ts","stores/trading/reducer.ts","utils/swap_calc_utils.ts","storage/index.ts","stores/ticker/reducer.ts","stores/userRewards/hook.ts","stores/system/reducer.ts","stores/system/interface.ts","stores/walletLayer1/reducer.ts","stores/walletLayer2/reducer.ts","stores/userRewards/reducer.ts","stores/Amm/AmmActivityMap/reducer.ts","stores/token/reducer.ts","stores/system/hook.ts","stores/Amm/AmmActivityMap/hook.ts","stores/socket/hook.ts","state_machine/account_machine_spec.ts","utils/web3_tools.ts","provider/global/index.tsx","provider/web3ReactManager/index.tsx","provider/dev-wrapper/index.tsx","services/tickerService.ts","stores/ticker/hook.ts","stores/global/actions.ts","stores/transactions/reducer.ts","stores/Amm/AmmTrades/reducer.ts","stores/Amm/AmmActivityMap/saga.ts","stores/Amm/AmmMap/saga.ts","stores/Amm/AmmTrades/saga.ts","stores/Amm/index.ts","stores/token/saga.ts","stores/ticker/saga.ts","stores/system/saga.ts","stores/walletLayer1/saga.ts","stores/walletLayer2/saga.ts","stores/userRewards/saga.ts","stores/socket/saga.ts","stores/rootSaga.ts","stores/index.ts","stores/constant.ts","stores/apis/api.ts","hooks/help/volumeToCount.ts","services/socketUtil.ts","pages/ErrorPage/index.tsx","utils/dt_tools.ts","hooks/exchange/useApi.ts","hooks/common/useCustomDCEffect.ts","services/ammPoolService.ts","hook.ts","defs/common_defs.ts","hooks/modal/useModals.ts","utils/hook_tools.ts","hooks/common/useCommon.ts","hooks/exchange/useExchangeAPI.ts","layouts/header/hook.tsx","hooks/exchange/useUserAPI.ts","utils/obj_tools.ts","pages/AccountPage/index.tsx","layouts/header/index.tsx","pages/QuotePage/index.tsx","pages/QuotePage/hook.ts","pages/SwapPage/panel/BasicInfoPanel/hook.tsx","hooks/help/connetStatusCallback.ts","pages/SwapPage/panel/BasicInfoPanel/index.tsx","pages/SwapPage/panel/TradePanel/index.tsx","hooks/help/updateWallet.ts","hooks/help/coinPairInit.ts","hooks/help/pairDetail.ts","hooks/help/makeTickView.ts","hooks/help/marketTable.ts","hooks/help/makeCache.ts","pages/SwapPage/index.tsx","pages/SwapPage/hook.ts","hooks/common/useApi2.ts","hooks/common/useWebsocketApi.ts","pages/DebugPage/index.tsx","pages/Layer2Page/TxPanel/index.tsx","pages/Layer2Page/AssetPanel/index.tsx","pages/Layer2Page/TradePanel/index.tsx","pages/Layer2Page/OrderPanel/index.tsx","pages/SettingPage/SettingPanel.tsx","pages/Layer2Page/index.tsx","pages/LiquidityPage/PoolsPanel/index.tsx","pages/LiquidityPage/PoolsPanel/hook.ts","hooks/help/ammPairDetail.ts","pages/LiquidityPage/AmmPanel/index.tsx","pages/LiquidityPage/AmmPanel/hooks.ts","hooks/help/makeUIAmmActivityMap.ts","pages/LiquidityPage/CoinPairPanel/hooks.ts","pages/LiquidityPage/CoinPairPanel/index.tsx","pages/LiquidityPage/AmmMining/index.tsx","pages/LiquidityPage/AmmMining/hook.ts","hooks/help/makeMyPoolDetail.ts","pages/LiquidityPage/LiquidityOverview/hook.ts","pages/LiquidityPage/LiquidityOverview/index.tsx","pages/LiquidityPage/index.tsx","pages/LiquidityPage/hook.ts","routers/index.tsx"],"names":["connectorsByName","ConnectorNames","Unknown","undefined","Injected","injected","Network","network","WalletConnect","walletconnect","WalletLink","walletlink","Ledger","ledger","Trezor","trezor","Authereum","authereum","useWeb3Account","useActiveWeb3React","connector","library","account","chainId","active","error","isConnected","voca","isBlank","useAccount","useSelector","state","isNoAccount","status","AccountStatus","NOACCOUNT","isActivated","ACTIVATED","apiKey","eddsaKey","accountId","useStateMachine","spec","dispatch","useDispatch","machine","AccountMachineSpec","currentState","event","stateTransitions","states","Error","nextState","sendEvent","useCallback","setAccountStatus","useConnect","activate","useState","activatingConnector","setActivatingConnector","connect","item_name","isSwitch","newConnector","setConnectNameTemp","store","getState","StatusChangeEvent","Reset","Connecting","console","log","useDisconnect","deactivate","disconnect","reset","useUnlock","exchangeApi","useExchangeAPI","userApi","useUserAPI","tradingInfo","useGetTradingInfo","lock","a","Lock","unlock","exchangeInfo","exchangeAddress","LOCKED","sk","apikey","getProvider","provider","web3","Web3","sign_tools","accAddr","nonce","connectName","eddsakey","toHex","toBig","keyPair","secretKey","getUserApiKey","Unlock","setEddsaKey","setApikey","useCheckAccStatus","web3Account","lv1Acc","prevChainId","usePrevious","prevWeb3Account","useCustomDCEffect","UNCONNNECTED","cleanUp","CONNECTED","DEPOSITING","DEPOSIT_TO_CONFIREM","UNACTIVATED","ARPROVING","APPROV_TO_CONFIRM","resetLayer1","resetLayer2","getAccount","owner","acc","accInfo","setAccountInfo","updateWalletLayer1","connectNameTemp","setConnectName","HasPubkey","dumpError400","setAccAddr","response","data","resultInfo","code","ErrorResponse","FinishDeposit","UserStorage","checkTimeout","handler","setInterval","isTimeOut","clearInterval","setHandler","updateWalletLayer2","getHandler","checkStatus","OrderHandling","BIG0","BIG1","BIG10","BIG10K","MULTI_FACTOR","initialState","defaultAccId","process","REACT_APP_TEST_ACCOUND_ID","getAccountId","defaultApiKey","REACT_APP_TEST_API_KEY","getApikey","defaultOwner","REACT_APP_TEST_OWNER","defaultEddsaKey","REACT_APP_TEST_EDDSA_KEY","getEddsakey","JSON","stringify","publicKey","isContractAddress","accountSlice","createSlice","name","reducers","initState","Object","assign","action","payload","setIsContractAddress","actions","useAmmMap","ammMap","amm","statusUnset","ammMapSlice","updateAmmMap","getAmmMap","getChainId","system","trading","useUpdateChainId","useEffect","setChainId","ChainId","GORLI","useUpdateExchangeMarkets","api","getMixMarkets","setMarkets","useUpdateExchangeInfo","getExchangeInfo","setExchangeInfo","useUpdateAmmPoolConf","useAmmpoolAPI","getAmmPoolConf","ammPoolConf","setAmmPoolConf","useUpdateAmmPoolStats","getAmmPoolStats","ammPoolStats","setAmmPoolStats","useUpdateAmmActivityRules","getAmmPoolActivityRules","ammActivityRules","setAmmActivityRules","activityRules","useUpdateTokens","getTokens","tokens","setTokens","useTokenMap","tokenMap","tokenMapSlice","updateTokenMap","getTokenMap","context","useWeb3React","contextNetwork","NetworkContextName","useEtherscan","etherscanUrl","setEtherscanUrl","MAINNET","useEagerConnect","tried","setTried","isAuthorized","then","catch","useInactiveListener","onReConnectInjected","ethereum","window","reConnectInjected","on","handleChainChanged","handleAccountsChanged","accounts","length","removeListener","POLLING_INTERVAL","RPC_URLS","InjectedConnector","supportedChainIds","NetworkConnector","urls","1","5","defaultChainId","WalletConnectConnector","rpc","bridge","qrcode","pollingInterval","WalletLinkConnector","url","appName","LedgerConnector","TrezorConnector","manifestEmail","manifestAppUrl","AuthereumConnector","useWalletLayer2","walletLayer2","walletLayer2Slice","getWalletLayer2","__timer__","errorMessage","STATUS","PENDING","getAmmMapStatus","ERROR","DONE","updateRealTimeAmmMap","UNSET","Web3ProviderNetwork","createWeb3ReactRoot","providers","LocalizationProvider","dateAdapter","MomentUtils","I18nextProvider","i18n","MuThemeProvider","theme","getTheme","ThemeProvider","Provider","ReactDOM","render","getLibrary","App","document","getElementById","socketSlice","socket","socketEnd","sendNewMessage","getSocketStatus","interval","markets","marketTrades","tickerMap","refreshRate","refreshRateSlow","tradingSlice","changeTradingInterval","setTickerMap","setMarketTrades","getIcon","symbol","getIconByTokenInfo","token","addr","utils","getAddress","address","getToken","fromWEI","valueInWEI","precision","ceil","tokenInfo","precisionToFixed","value","fm","div","decimals","CONSTANTS","rawHandler","sessionStorage","getItem","Handler","parseInt","err","setItem","removeItem","dateTimeStr","localStorage","ActiveTime","now","Date","getTime","toString","tmpDt","SESSION_TIMEOUT_SECONDS","clear","rawId","AccountId","Account","Apikey","Eddsakey","orderHash","AmmOrder","current","HardwareAddresses","includes","toLowerCase","newValue","tickerMapSlice","getTicker","getTickers","getTickerStatus","useUserRewards","userRewardsMap","userRewardsMapSlice","updateUserRewards","getUserRewards","env","ENV","PROD","baseURL","socketURL","faitPrices","gasPrice","forex","topics","systemSlice","updateSystem","updateSocketURL","updateRealTimeObj","getSystemStatus","setTopics","NETWORKEXTEND","walletLayer1","walletLayer1Slice","getWalletLayer1Status","getWalletLayer2Status","getUserRewardsStatus","ammActivityMapSlice","ammActivityMap","getAmmActivityMap","getAmmActivityMapStatus","coinMap","addressIndex","marketMap","idIndex","getTokenMapStatus","marketArray","marketCoins","getTokenPairMap","useSystem","useAmmActivityMap","updateAmmActivityMap","useSocket","HasNoPubkey","IsSmartWallet","ApproveSubmit","ApproveConfirmed","Web3Provider","getShortAddr","trim","substr","WindowEvent","events","Click","Scroll","forceReset","debounce","GlobalProvider","children","forEach","addEventListener","removeEventListener","Fragment","MessageWrapper","Message","colorBase","Web3ReactManager","t","useTranslation","networkActive","networkError","activateNetwork","triedEager","showLoader","setShowLoader","timeout","setTimeout","clearTimeout","DevWrapper","subject","Subject","tickerService","sendTicker","next","onSocket","asObservable","useTicker","updateTickers","tickerKeys","updateTicker","tickerKey","updateVersion","createAction","transactionsSlice","addTransaction","from","hash","approval","summary","claim","addedTime","clearAllTransactions","checkedTransaction","blockNumber","tx","lastCheckedBlockNumber","Math","max","finalizeTransaction","receipt","confirmedTime","ammTradesSlice","ammTrades","getAmmTrades","getAmmTradesStatus","getPostsSaga","ammActivityMapSaga","getAmmActivityMapApi","LoopringAPI","ammpoolAPI","groupByRuleTypeAndStatus","call","put","all","takeLatest","updateRealTimeSaga","ammMapInitSaga","ammMapRealTimeSaga","setAmmState","ammPoolState","match","coinA","coinB","result","amountDollar","parseFloat","liquidityUSD","amountYuan","totalLPToken","volumeToCount","lpLiquidity","totalA","liquidity","totalB","rewardValue","rewards","tokenId","volume","rewardToken","rewardValue2","rewardToken2","feeA","volumeToCountAsBigNumber","fees","feeB","feeDollar","times","price","plus","feeYuan","toNumber","tradeFloat","percent","timeUnit","APY","apyBips","getAmmMapApi","ammpools","Reflect","ownKeys","key","item","market","pooled","dataItem","isNew","Number","createdAt","isActivity","__rawConfig__","map","replace","ammMapSaga","fork","ammTradesSaga","getAmmTradesApi","Promise","resolve","side","amount","sell","belong","tradeValue","buy","time","fee","priceValue","priceToken","posts","ammReducer","combineReducers","reducer","ammForks","tokenInitSaga","getTokenMapApi","tokensMap","pairs","marketArr","tokenArr","startsWith","icon","simpleName","description","company","tokenList","tradePairs","tokenSaga","tickerSaga","tickersSaga","getTickersApi","list","exchangeAPI","join","tickers","tickMap","base_token_volume","priceDollar","priceYuan","floatTag","close","open","reward","CustomError","ErrorMap","NO_TOKEN_KEY_LIST","tickerForks","getUpdateSystem","systemSaga","initConfig","tokenSymbolMap","take","getSystemsApi","location","hostname","DEV","UAT","NONETWORK","NO_NETWORK_ERROR","InitApi","getFiatPrice","legal","fiatPrices","getGasPrice","systemForks","walletLayer1Saga","getWalletLayer1Balance","getTokenBalances","tokenBalances","reduce","prev","count","walletLayer1Fork","walletLayer2Saga","getWalletLayer2Balance","userAPI","getUserBalances","userBalances","walletLayer2Fork","userRewardsSaga","getUserRewardsApi","getAmmPoolUserRewards","ammUserRewardMap","reject","userRewardsForks","closeSocket","sendMessage","socketEndSaga","socketSendMessageSaga","socketClose","socketSendMessage","socketForks","mySaga","sagaMiddleware","createSagaMiddleware","settings","settingsSlice","transactions","transactionlice","modals","modalsSlice","PERSISTED_KEYS","configureStore","middleware","getDefaultMiddleware","thunk","serializableCheck","save","devTools","enhancers","reduxBatch","preloadedState","load","setLanguage","language","run","UserAPI","ExchangeAPI","AmmpoolAPI","walletAPI","wsAPI","WalletAPI","WsAPI","volumn","pow","SocketEventType","pingPong","fn","e","global","looperingSocket","send","socketEventMap","WsTopicType","isConnectSocket","globalThis","ws","loopringSocket","promise","reolve","onclose","reason","socketConnect","getWsKey","wsKey","baseSocket","WebSocket","onopen","onmessage","deps","topic","_detail","onerror","CLOSED","__wsTimer__","timer","pingpong","makeMessageArray","eventType","getAccountArg","makeReceiveMessageCallback","order","getOrderArg","orderbook","getOrderBookArg","trade","getTradeArg","ticker","getTickerArg","candlestick","getCandlestickArg","ammpool","getAmmpoolArg","type","SocketEventMap","timestamp","size","high","low","bid","ask","poolName","poolAddress","risky","ammPoolService","sendAmmPool","lp","StyleBox","styled","Box","ErrorPage","messageKey","Container","flex","display","alignItems","justifyContent","flexDirection","marginTop","height","maxWidth","textAlign","position","left","top","Typography","component","variant","marginY","color","Trans","i18nKey","Link","onClick","href","body","email","CONTACT_US_EMAIL","getContactInfo","preventDefault","useApi","ApiClass","DEFAULT_TIMEOUT","genApi","useMemo","useDeepCompareEffect","ammPoolMap","useInit","React","setState","systemState","tokenState","ammMapState","reload","detectEthereumProvider","request","method","Theme","LangType","SystemStatus","MODAL_TYPE","useModals","ShowDeposit","isShow","props","title","setShowDeposit","ShowTransfer","setShowTransfer","ShowWithdraw","setShowWithdraw","ShowResetAccount","setShowResetAccount","PromiseJob","fetchPromise","setFunc","field","prefix","mounted","usePromiseJob","dependencies","useGetExchangeInfo","useGetTokens","useLv2WalletMap","balances","setBalances","keys","push","raw_data","total","locked","availableInWei","minus","useGetUserBalances","walletMap","setWalletMap","balance","useChargeFeeList","tokenSymbol","requestType","chargeFeeList","setChargeFeeList","getOffchainFeeAmt","index","useModalProps","tokensAll","setCoinMap","useCoinMap","walletMap_Lv1","useLv1WalletMap","walletMap_Lv2","deposit","amt","depositAddress","sendByMetaMask","gasLimit","contract","response2","withdraw","sellTokenId","getNextStorageId","storageId","request2","exchange","to","offchainId","maxFee","extraData","minGas","validUntil","VALID_UNTIL","submitOffchainWithdraw","transfer","payeeAddr","walletType","payeeAcc","payeeId","payerAddr","payerId","submitInternalTransfer","depositValue","setDepositValue","depositProps","tradeData","depositBtnStatus","TradeBtnStatus","AVAILABLE","onDepositClick","handlePanelEvent","switchType","res","setTokenSymbol","withdrawValue","setWithdrawValue","withdrawalFeeList","OffchainFeeReqType","OFFCHAIN_WITHDRAWAL","withdrawProps","withdrawBtnStatus","onWithdrawClick","withdrawType","WithdrawType","Fast","withdrawTypes","WithdrawTypes","chargeFeeToken","chargeFeeTokenList","handleOnAddressChange","handleAddressError","_value","message","transferValue","setTransferValue","transferTokenSymbol","setTransferTokenSymbol","transferFeeList","TRANSFER","transferProps","transferBtnStatus","onTransferClick","resetValue","setResetValue","resetProps","resetBtnStatus","onResetClick","ammProps","ammDepositData","slippage","ammWithdrawData","ammCalcData","myCoinA","myCoinB","AtoB","coinInfoMap","handleDepositEvent","handleWithDrawEvent","onAmmWithdrawClick","onAmmDepositClick","swapProps","tradeCalcData","coinSell","coinBuy","BtoS","StoB","sellCoinInfoMap","buyCoinInfoMap","priceImpact","minimumReceived","onSwapClick","handleSwapPanelEvent","deepClone","constructor","hasOwnProperty","ModalAccountInfo","withTranslation","onClose","rest","Modal","aria-labelledby","aria-describedby","style","boxShadow","paddingTop","paddingBottom","minWidth","Header","useLocation","useSettings","setTheme","themeMode","useOpenModals","isShowAccountInfo","isShowConnect","setShowConnect","setShowAccountInfo","forceUpdate","useReducer","bool","gatewayList","DefaultGatewayList","handleSelect","accountInfoProps","setAccountInfoProps","onNotification","onWalletBtnConnect","onThemeBtnClick","dark","light","onLangBtnClick","lang","headerToolBarData","ButtonComponentsMap","handleClick","Language","handleChange","UnlockBtn","className","startIcon","fontSize","lockCallback","unLockCallback","LockBtn","updateHeaderMenuWhenHasAccountInfo","headerMenuData","HeadMenuTabKey","Layer2","HeaderMenuTabStatus","default","addressShort","level","etherscanLink","mainBtn","_event","connectBy","label","WalletStatus","hidden","noAccount","accountPending","useHeader","onSwitch","openQRCode","setOpenQRCode","copyToastOpen","setCopyToastOpen","closeCopyToast","Snackbar","autoHideDuration","Alert","severity","withDrawProps","selected","pathname","headerRoot","Toolbar","onCopy","text","execCommand","textarea","createElement","appendChild","select","removeChild","clipboardData","setData","copyToClipBoard","onViewQRCode","onDisconnect","RowStyled","Grid","unit","TableWrapStyled","background","border","defaultFrame","c_key","d_R","TablePaddingX","pLeft","pRight","QuotePage","tickList","setTickList","big4","setBig4","refresh","getAllTickers","ticks","base","quote","quote_token_volume","change","rowData","sort","b","isNaN","slice","useQuote","formattedRawData","o","pair","first","last","lastPrice","isFinite","buyData","ETH","sellData","LRC","FloatTag","increase","container","xs","none","decrease","paddingY","onVisibleRowsChange","rawData","toggleData","ChartType","Trend","Depth","fnType","BasicInfoPanel","coinAInfo","coinBInfo","tgItemJSXs","tlabel","JSX","getExistedMarket","chartType","setChartType","ChartUnit","D1","chartUnit","originData","setOriginData","_e","tgItemJSXsPriceChart","pre","tGItemData","TradingInterval","min15","limit","getCandlestick","candlesticks","timeStamp","quoteVol","getMixDepth","depth","bidsPrices","bids_prices","bidsAmtTotals","bids_amtTotals","asksPrices","asks_prices","asksAmtTotals","asks_amtTotals","useBasicInfo","upColor","exclusive","minHeight","maxHeight","width","riseColor","handleMove","StylePaper","borderColor","applyProps","id","StyledTabsWrapper","StyledFormControlLabel","FormControlLabel","TradePanel","tradeArray","myTradeArray","isAllTrade","setIsAllTrade","setValue","control","Checkbox","checked","checkedIcon","onChange","flag","Tabs","aria-label","Tab","accountStaticCallBack","args","UNKNOWN","DEFAULT","bntLabel","btnClickArray","updateWallet","pending","countBig","detail","coinPairInit","coinKey","_tradeCalcData","findIndex","ele","pairDetailBlock","ammKey","getAmmPoolSnapshot","getMixTicker","ammPoolSnapshot","ammPoolsBalance","NO_SDK","pairDetailDone","stob","tickerData","poolVolumn","getBaseQuote","poolBaseTokenVol","quoteBaseTokenVol","NO_SUPPORT_PAIR","baseVol","makeTickView","tick","getUserTrades","marketKey","userTrades","makeMarketArray","currency","Side","Sell","TradeTypes","Buy","tradeTime","getUserAmmTransaction","getUserAmmPoolTxs","userAmmPoolTxs","makeMyAmmMarketArray","marketTransaction","lpToken","txType","AmmTxType","JOIN","AmmTradeType","add","remove","totalDollar","totalYuan","amountA","poolTokens","actualAmount","amountB","updatedAt","txStatus","makeCache","__cache__","customSlippage","setSlippage","FixedStyle","SwapPage","globalSetup","wait","useRouteMatch","walletLayer2State","setTradeData","setTradeCalcData","setTradeArray","setMyTradeArray","setTradeFloat","setPair","setAmmPoolSnapshot","swapBtnI18nKey","setSwapBtnI18nKey","params","resetSwap","_myTradeArray","swapData","SwapType","SEll_CLICK","BUY_CLICK","SELL_SELECTED","BUY_SELECTED","EXCHANGE_CLICK","calculateTradeData","_tradeData","input","isAtoB","output","throttleSetValue","_","_ammPoolSnapshot","td","_tradeFloat","_tradeArray","apiList","getMarketTrades","_td","TRADE_LITE_SET_PAIR_ERROR","options","swapBtnClickArray","useSwapPage","marginRight","alignContent","stateArr","useWebsocket","verify","needApiKey","useRef","wsData","setMessage","readyState","setReadyState","creatWebSocket","wsApiKey","basePath","op","unsubscribeAll","flat_txt","subTopics","closeWebSocket","msg","reconnect","useAmmpoolWs","socketData","setSocketData","isLocalPage","setIsLocalPage","visibilityState","parse","useWs","DebugPage","getMarkets","useGetMarkets","gas","setGas","useGetGas","TxPanel","pageSize","setPageSize","txTableData","setTxTableData","getUserTranferList","userTxns","mappingList","userTransfers","senderAddress","receiverAddress","feeTokenSymbol","feeAmount","memo","txnHash","TransactionStatus","processed","processing","received","failed","tradeType","TransactionTradeTypes","offsetHeight","floor","ref","pagination","StyledChartWrapper","StyledBtnGroupWrapper","testTrendData","random","AssetPanel","chartPeriod","setChartPeriod","getUserAssets","wallet","assetType","AssetType","DEX","userAssets","assetSeries","AssetTitleProps","assetInfo","totalAsset","priceTag","PriceTag","Dollar","onShowDeposit","onShowTransfer","onShowWithdraw","tokenPriceList","entries","tokenDetail","coinList","coinDetailList","values","doughnutData","coin","tokenPriceUSDT","find","assetsRawData","isLpToken","TokenType","single","available","smallBalance","Paper","showFiliter","originalData","setOriginalData","marketList","split","baseToken","quoteToken","OrderPanel","orderOriginalData","setOrderOriginalData","getOrders","userOrders","Array","isArray","orders","volumes","baseAmount","quoteAmount","baseFilled","quoteFilled","average","filledAmount","filledPrice","validity","start","detailTable","StyledPaper","StyledSwitch","Switch","textPrimary","success","backgroundColor","opacity","BtnCurrency","Currency","dollar","_handleChange","target","IconComponent","DropDownIcon","labelId","autoWidth","yen","StyledDivider","Divider","SettingPanel","focus","useTheme","setUpColor","setCurrency","direction","flexWrap","paddingLeft","marginBottom","paddingX","alignSelf","Button","passDay","changeLanguage","textTransform","UpColor","green","up","down","red","subMenu","subMenuLayer2","BoxStyle","SubMenuList","withRef","BasicSubMenuList","Layer2Page","accStatus","PoolsPanel","setRawData","page","setPage","setKeys","ammMapStatus","ammMapStatusUnset","tickerStatus","tickerStatusUnset","socketStatus","socketStatusUnset","updateRawData","_ammMap","tickerMapKey","NO_TOKEN_MAP","updateTickersUI","_page","i","subscription","subscribe","unsubscribe","useAmmMapUI","handlePageChange","ammPairInit","_ammCalcData","ammType","AmmPanelType","Deposit","coinACount","coinBCount","AmmPanelView","snapShotData","setAmmCalcData","setAmmDepositData","setAmmWithdrawData","ammDepositBtnI18nKey","setAmmDepositBtnI18nKey","ammWithdrawBtnI18nKey","setAmmWithdrawBtnI18nKey","initAmmData","onAmmWithdrawClickArray","onAmmDepositClickArray","useAmmPanel","isLoading","tabSelected","ammDepositBtnStatus","LOADING","ammWithdrawBtnStatus","makeUIAmmActivityMap","myReward","ammPoolActivityStatus","ammActivityViewMap","ammPoolActivityRule","awardRules","myRewards","AmmPoolActivityStatus","InProgress","currentRewards","duration","rangeFrom","rangeTo","isPass","EndOfGame","makeAsCard","_ammInfo","itemArray","activity","getOneRewardInfo","reward2","rewardDollar","rewardYuan","balanceA","balanceB","balanceDollar","balanceYuan","ammUserReward","feeRewards","ratio","BigNumber","_walletMap","ammDetail","makeMyAmmWithSnapshot","makeAmmDetailExtendsActivityMap","ammActivity","BoxStyled","CoinPairPanel","useUserRewardsState","ammMarketArray","myAmmMarketArray","setMyAmmMarketArray","setAmmUserRewardMap","setSnapShotData","myAmm","setMyAmm","totalRewards","coinPairInfo","setCoinPairInfo","walletLayer2DoIt","_coinPairInfo","_snapShotData","_myAmm","useCoinPair","tabIndex","setTabIndex","_handlePageChange","Breadcrumbs","spacing","wrap","md","paddingRight","getThousandFormattedNumbers","Yuan","Hidden","mdDown","noWrap","textOverflow","moment","format","AmmCardWrap","forwardRef","AmmCard","AmmList","sm","lg","AmmMiningView","userRewardsMapState","setAmmActivityViewMap","ammActivityPastViewMap","setAmmActivityPastViewMap","NotStarted","useAmmMiningUI","makeMyPoolRowWithPoolState","makeMyAmmWithStat","useOverview","summaryReward","setSummaryReward","myPoolRow","setMyPoolRow","makeMyPoolRow","walletKey","test","_myPoolRow","makeSummaryMyAmm","StyleWrapper","LiquidityOverview","padding","margin","handleDeposit","row","handleWithdraw","subMenuLiquidity","LiquidityPage","AmmActivityMapState","setAmmActivityMap","useAmmPool","matchPair","RouterView","exact","path"],"mappings":"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","file":"static/js/main~a97bfcba.62ea183a.chunk.js","sourcesContent":["import { ConnectorNames } from 'loopring-sdk'\n\nimport {\n    injected,\n    network,\n    walletconnect,\n    walletlink,\n    ledger,\n    trezor,\n    authereum,\n} from 'networks/web3_connectors'\n\nexport const connectorsByName: { [connectorName in ConnectorNames]: any } = {\n    [ConnectorNames.Unknown]: undefined,\n    [ConnectorNames.Injected]: injected,\n    [ConnectorNames.Network]: network,\n    [ConnectorNames.WalletConnect]: walletconnect,\n    [ConnectorNames.WalletLink]: walletlink,\n    [ConnectorNames.Ledger]: ledger,\n    [ConnectorNames.Trezor]: trezor,\n    [ConnectorNames.Authereum]: authereum,\n}\n","import { useState, useCallback, useMemo, useRef, useEffect, } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\n\nimport { useCustomDCEffect } from 'hooks/common/useCustomDCEffect'\n\nimport { useGetTradingInfo } from 'stores/trading/hook'\nimport { useActiveWeb3React, } from 'hooks/web3/useWeb3'\n\nimport { Lv2Account, } from 'defs/account_defs'\n\nimport { AccountStatus, StatusChangeEvent } from 'state_machine/account_machine_spec'\n\nimport * as sign_tools from 'loopring-sdk'\n\nimport { connectorsByName } from 'defs/web3_defs'\n\nimport { ChainId, ConnectorNames, dumpError400, ExchangeAPI, UserAPI, } from 'loopring-sdk'\n\nimport { toHex, toBig, } from 'loopring-sdk'\n\nimport { RootState } from 'stores'\n\nimport {\n    reset, setAccountStatus, setConnectName,\n    setConnectNameTemp, setAccountInfo, setEddsaKey, setApikey, setAccAddr,\n} from 'stores/account/reducer'\n\nimport { AccountMachineSpec, } from 'state_machine/account_machine_spec'\n\nimport { buildMachine } from 'state_machine/machine_builder'\n\nimport voca from 'voca'\nimport { usePrevious } from 'react-use'\n\nimport Web3 from 'web3'\n\nimport { useExchangeAPI, useUserAPI } from 'hooks/exchange/useApi'\n\nimport { UserStorage } from 'storage'\n\nimport store from 'stores'\nimport { updateWalletLayer1, reset as resetLayer1 } from '../walletLayer1';\nimport { updateWalletLayer2,reset as resetLayer2 } from '../walletLayer2';\n\n\nexport function useWeb3Account() {\n\n    const {\n        connector,\n        library,\n        account,\n        chainId,\n        active,\n        error,\n    } = useActiveWeb3React()\n\n    const isConnected: boolean = active && !voca.isBlank(account as string)\n\n    return {\n        account,\n        connector,\n        library,\n        chainId,\n        active,\n        isConnected,\n        error,\n    }\n\n}\n\nexport function useAccount() {\n\n    const account: Lv2Account = useSelector((state: RootState) => state.account)\n\n    const isNoAccount = () => {\n        return account.status === AccountStatus.NOACCOUNT\n    }\n\n    const isActivated = () => {\n        return account.status === AccountStatus.ACTIVATED\n    }\n\n    return {\n        account,\n        isNoAccount,\n        isActivated,\n        apiKey: account.apiKey,\n        eddsaKey: account.eddsaKey,\n        accountId: account.accountId,\n    }\n}\n\nexport function useStateMachine() {\n    const dispatch = useDispatch()\n\n    const machine = buildMachine(AccountMachineSpec())\n\n    const sendEvent = useCallback((account: Lv2Account, event: StatusChangeEvent) => {\n        const nextState = machine(account.status, event)\n        if (nextState) {\n            dispatch(setAccountStatus(nextState))\n        }\n    }, [machine, dispatch])\n\n    return {\n        sendEvent,\n    }\n}\n\nexport function useConnect() {\n\n    const {\n        activate,\n    } = useActiveWeb3React()\n\n    const { sendEvent } = useStateMachine()\n\n    const dispatch = useDispatch()\n\n    const [activatingConnector, setActivatingConnector] = useState<any>()\n\n    const connect = useCallback((item_name: ConnectorNames, isSwitch: boolean = false) => {\n        const newConnector: any = connectorsByName[item_name]\n        setActivatingConnector(newConnector)\n        activate(newConnector)\n        dispatch(setConnectNameTemp(item_name))\n\n        if (isSwitch) {\n          //  console.log('try Connecting... isSwitch Reset')\n            sendEvent(store.getState().account, StatusChangeEvent.Reset)\n        }\n\n        sendEvent(store.getState().account, StatusChangeEvent.Connecting)\n\n        console.log('try Connecting...')\n    }, [activate, dispatch, sendEvent])\n\n    return {\n        connect,\n        activatingConnector,\n    }\n\n}\n\nexport function useDisconnect() {\n\n    const {\n        deactivate,\n    } = useActiveWeb3React()\n\n    const dispatch = useDispatch()\n\n    const disconnect = useCallback(() => {\n        deactivate()\n        dispatch(reset(undefined))\n        //TODO dispatch wallet info \n    }, [deactivate, dispatch])\n\n    return {\n        disconnect,\n    }\n\n}\n\nexport function useUnlock() {\n\n    const dispatch = useDispatch()\n\n    const exchangeApi: any = useExchangeAPI()\n\n    const userApi: any = useUserAPI()\n\n    const { tradingInfo } = useGetTradingInfo()\n\n    const { connector, } = useWeb3Account()\n\n    const { sendEvent } = useStateMachine()\n\n    const lock = useCallback(async (account: Lv2Account) => {\n        console.log('useCallback lock:', account.status)\n        sendEvent(account, StatusChangeEvent.Lock)\n    }, [sendEvent])\n\n    const unlock = useCallback(async (account: Lv2Account) => {\n\n        if (!userApi || !exchangeApi || !connector || !account.accountId || !tradingInfo.exchangeInfo?.exchangeAddress\n            || account.status !== AccountStatus.LOCKED) {\n            console.log('accountId:', account.accountId)\n            console.log('exchangeAddress:', tradingInfo.exchangeInfo)\n            console.log('enter !! account.status:', account.status)\n            return\n        }\n\n        console.log('useUnlock useCallback:', account.status)\n\n        if (account.status !== AccountStatus.LOCKED) {\n            throw Error('unexpected status:' + account.status)\n        }\n\n        let event = undefined\n        let sk = undefined\n        let apikey: any = undefined\n\n        try {\n            const provider = await connector.getProvider()\n            const web3 = new Web3(provider as any)\n            console.log('useUnlock eddsaKey:', account.eddsaKey)\n\n            if (!account.eddsaKey) {\n                const eddsakey = await sign_tools\n                    .generateKeyPair(\n                        web3,\n                        account.accAddr,\n                        tradingInfo.exchangeInfo?.exchangeAddress as string,\n                        account.nonce - 1,\n                        account.connectName,\n                    )\n                sk = toHex(toBig(eddsakey.keyPair.secretKey))\n\n            } else {\n                sk = account.eddsaKey\n            }\n\n            apikey = await userApi.getUserApiKey({\n                accountId: account.accountId\n            }, sk)\n\n            console.log('useUnlock apikey:', apikey)\n\n            event = StatusChangeEvent.Unlock\n\n        } catch (reason) {\n            console.log(reason)\n            event = StatusChangeEvent.Reset\n        }\n\n        if (sk) {\n            dispatch(setEddsaKey(sk))\n        }\n\n        if (apikey?.apiKey) {\n            dispatch(setApikey(apikey.apiKey))\n        }\n\n        console.log('next event:', event)\n        if (event) {\n            sendEvent(account, event)\n        }\n\n    }\n        , [dispatch, sendEvent, exchangeApi, userApi, connector, tradingInfo.exchangeInfo])\n\n    return {\n        lock,\n        unlock,\n    }\n}\n\nasync function checkAccountAvailableAsync(exchangeApi: ExchangeAPI, userApi: UserAPI, account: Lv2Account, dispatch: any, sendEvent: any, connector: any, exchangeAddress: string) {\n\n    let accInfo = undefined\n    let event = undefined\n    let sk = undefined\n    let code = undefined\n    let apikey: any = undefined\n\n    try {\n        accInfo = (await exchangeApi.getAccount({\n            owner: account.accAddr\n        })).accInfo\n        if (accInfo.publicKey && accInfo.publicKey.x && accInfo.publicKey.y) {\n            if (account.accountId !== accInfo.accountId) {\n                const provider = await connector.getProvider()\n                const web3 = new Web3(provider as any)\n                try {\n                    code = await web3.eth.getCode(account.accAddr)\n                    // console.log('!!!!!! about to generateKeyPair!!!!!!!!!!!')\n                    try {\n                        const eddsakey = await sign_tools\n                            .generateKeyPair(\n                                web3,\n                                account.accAddr,\n                                exchangeAddress,\n                                accInfo.nonce - 1,\n                                account.connectName,\n                            )\n                        sk = toHex(toBig(eddsakey.keyPair.secretKey))\n                        const px = toHex(toBig(eddsakey.keyPair.publicKeyX))\n                        const py = toHex(toBig(eddsakey.keyPair.publicKeyY))\n\n                        try {\n                            apikey = await userApi.getUserApiKey({\n                                accountId: accInfo.accountId\n                            }, sk)\n                            event = (StatusChangeEvent.HasPubkey)\n                        } catch (reason) {\n                            dumpError400(reason)\n                            event = (StatusChangeEvent.ErrorResponse)\n                        }\n                    } catch (reason) {\n                        dumpError400(reason)\n                        event = (StatusChangeEvent.ErrorResponse)\n                    }\n\n                } catch (reason) {\n                    dumpError400(reason)\n                    event = (StatusChangeEvent.ErrorResponse)\n                }\n\n            } else {\n                console.log('already has accountId!')\n            }\n        } else {\n            console.log('2 has id but no pubkey currStatus:', account.status)\n            event = (StatusChangeEvent.HasNoPubkey)\n        }\n    } catch (reason) {\n        // 3 has none of above\n        console.log('2 has id but no pubkey currStatus:', account.status)\n        dumpError400(reason)\n        // check deposit tx (local and ethereum)\n        event = (StatusChangeEvent.ErrorResponse)\n    }\n\n    if (accInfo && accInfo.owner !== account.accAddr) {\n        dispatch(setAccountInfo(accInfo))\n    }\n\n    if (sk) {\n        dispatch(setEddsaKey(sk))\n    }\n\n    if (apikey) {\n        console.log('---------> apikey:', apikey)\n        dispatch(setApikey(apikey.apiKey))\n    }\n\n    if (event) {\n        sendEvent(event)\n    }\n\n}\n\nexport function useCheckAccStatus() {\n\n    const dispatch = useDispatch()\n\n    const { account } = useAccount()\n\n    const { sendEvent } = useStateMachine()\n\n    const exchangeApi: ExchangeAPI = useExchangeAPI()\n\n    const userApi: UserAPI = useUserAPI()\n\n    const { account: web3Account, active, isConnected, chainId, connector, } = useWeb3Account()\n\n    const lv1Acc = web3Account as string\n\n    const prevChainId = usePrevious(chainId)\n    const prevWeb3Account = usePrevious(web3Account)\n\n    // const { updateWalletLayer1,resetLayer1} = useWalletLayer1();\n    // const { updateWalletLayer2, resetLayer2} = useWalletLayer2()\n\n\n    // console.log('prevChainId:', prevChainId, ' chainId:', chainId)\n    // console.log('prevWeb3Account:', prevWeb3Account, ' web3Account:', web3Account)\n\n    // console.log(exchangeApi, userApi, account, 'prevChainId:', prevChainId, 'chainId:', chainId, 'web3Account:', web3Account)\n\n    const { tradingInfo } = useGetTradingInfo()\n\n    useCustomDCEffect(async () => {\n\n        const cleanUp = () => {\n            let handler = UserStorage.getHandler()\n            if (account.status !== AccountStatus.ACTIVATED && handler) {\n                clearInterval(handler)\n            }\n        }\n\n        async function checkStatus() {\n\n            if (!account || !lv1Acc || !exchangeApi || !userApi || !connector || !tradingInfo.exchangeInfo?.exchangeAddress) {\n                //console.log('checkStatus return!!!!!!')\n                return\n            }\n\n            if (((prevChainId && chainId && prevChainId !== chainId)\n                || (prevWeb3Account && web3Account && prevWeb3Account !== web3Account))\n                && account.status !== AccountStatus.UNCONNNECTED) {\n\n                console.log('checkStatus try to resetFunc')\n                dispatch(reset(undefined))\n                sendEvent(account, StatusChangeEvent.Reset)\n                return\n            }\n\n            cleanUp()\n\n            switch (account.status) {\n                case AccountStatus.UNCONNNECTED:\n                   // console.log('---> render UNCONNNECTED active:', active, ' isConnected:', isConnected)\n\n                    if (isConnected) {\n                        dispatch(setConnectNameTemp(ConnectorNames.Injected))\n                        sendEvent(account, StatusChangeEvent.Connecting)\n                    }\n\n                    //HIGH:\n                    dispatch(resetLayer1(undefined));\n                    dispatch(resetLayer2(undefined));\n                    break\n\n                case AccountStatus.CONNECTED:\n                    //check session or local storage\n\n                  //  console.log('---> render CONNECTED account:', account)\n\n                    try {\n\n                        const acc = (await exchangeApi.getAccount({ owner: lv1Acc })).accInfo\n\n                        // current acc is local acc info\n                        if (account.accAddr && account.eddsaKey && acc.owner === account.accAddr) {\n                            // console.log('cur Eddsakey:', account.eddsaKey)\n                        } else {\n                            // console.log('got a new address:', acc)\n                            // got a new address\n                            dispatch(setAccountInfo(acc))\n                            // dispatch(setEddsaKey(''))\n                            //HIGH:\n                            dispatch(updateWalletLayer1(undefined))\n                            //updateWalletLayer1();\n                           // dispatch(updateWalletLayer1(undefined));\n                        }\n\n                        if (account?.connectName !== account?.connectNameTemp) {\n                            dispatch(setConnectName(account.connectNameTemp))\n                        }\n\n                        sendEvent(account, StatusChangeEvent.HasPubkey)\n\n                    } catch (reason) {\n                        dumpError400(reason)\n\n                        if (lv1Acc) {\n                            dispatch(setAccAddr(lv1Acc))\n                        }\n\n                        if (reason.response && reason.response.data && reason.response.data.resultInfo\n                             && reason.response.data.resultInfo.code === 101002) {\n                            sendEvent(account, StatusChangeEvent.ErrorResponse)\n                        }\n                    }\n\n                    break\n\n                case AccountStatus.NOACCOUNT:\n                    break\n\n                case AccountStatus.DEPOSITING:\n                    // TODO sub contract event, check deposit.\n                    const depositFinished = true // TODO\n                    if (depositFinished) {\n                     //   console.log('depositFinished currStatus:', account.status)\n                        sendEvent(account, StatusChangeEvent.FinishDeposit)\n                    }\n                    break\n\n                case AccountStatus.DEPOSIT_TO_CONFIREM:\n                    // getAccount every 10s to check\n                    break\n\n                case AccountStatus.UNACTIVATED:\n                    const isSmartWallet = false // TODO\n                    if (isSmartWallet) {\n                        // TODO approve hash,\n                      //  console.log('approve hash, currStatus:', account.status)\n                        sendEvent(account, StatusChangeEvent.IsSmartWallet)\n                    } else {\n                       // console.log('approve hash no smartwallet, account.status:', account.status)\n                    }\n                    break\n\n                case AccountStatus.ARPROVING:\n                    // TODO sub contract event, check approving.\n                    const approved = false // TODO\n                    if (approved) {\n                      //  console.log('sub contract event, check approving. approved! status:', account.status)\n                        sendEvent(account, StatusChangeEvent.ApproveSubmit)\n                    }\n                    break\n\n                case AccountStatus.APPROV_TO_CONFIRM:\n                    const approveConfirmed = false // TODO\n                    if (approveConfirmed) {\n                     //   console.log('approveConfirmed status:', account.status)\n                        sendEvent(account, StatusChangeEvent.ApproveConfirmed)\n                    }\n                    break\n\n                case AccountStatus.LOCKED:\n                    //HIGH:\n                    dispatch(resetLayer1(undefined))\n                    break\n\n                case AccountStatus.ACTIVATED:\n                    UserStorage.checkTimeout(true)\n                    const handler = setInterval(() => {\n                        const isTimeOut = UserStorage.checkTimeout()\n                        if (account.status === AccountStatus.ACTIVATED && isTimeOut) {\n                            clearInterval(handler)\n                            sendEvent(account, StatusChangeEvent.Lock)\n                        }\n                    }, 1000)\n                    UserStorage.setHandler(handler);\n                    //HIGH:\n                    dispatch(updateWalletLayer2(undefined))\n                        //useWalletLayer2().updateWalletLayer2();\n                    //dispatch((undefined));\n                    break\n\n                default:\n                    break\n            }\n\n\n\n        }\n\n        checkStatus()\n\n        return () => {\n            cleanUp()\n        }\n\n    }, [    updateWalletLayer1, updateWalletLayer2, resetLayer1,resetLayer2,\n        //updateWalletLayer2, updateWalletLayer1,resetLayer1,resetLayer2,\n\n        exchangeApi, userApi, account, prevChainId, chainId, lv1Acc, dispatch, connector, tradingInfo.exchangeInfo?.exchangeAddress,])\n\n}\n\n","export const buildMachine = <S, E>(spec: any) => (currentState: S, event: E) => {\n    // We get all possible transitions for the current State\n    const stateTransitions = spec.states[currentState]\n\n    // No transitions? Error!\n    if (stateTransitions === undefined) {\n        throw new Error(`No transitions defined for ${currentState}`)\n    }\n\n    // We try to transition to the next state\n    const nextState = stateTransitions[event]\n\n    // No next state? Error!\n    if (nextState === undefined) {\n        throw new Error(\n            `Unknown transition for event ${event} in state ${currentState}`\n        )\n    }\n\n   // console.log('got nextState:', nextState)\n\n    // We return the new state\n    return nextState\n}\n","import { toBig } from 'loopring-sdk'\n\nexport enum OrderHandling {\n    processed = 'processed',\n    no_such_order = 'no_such_order',\n    too_many_times = 'too_many_times',\n}\n\nexport const BIG0 = toBig(0)\n\nexport const BIG1 = toBig(1)\n\nexport const BIG10 = toBig(10)\n\nexport const BIG10K = toBig(10000)\n\nexport const MULTI_FACTOR = 10000\n","import { createSlice, PayloadAction, Slice } from '@reduxjs/toolkit'\n\nimport { AccountInfo, ConnectorNames, } from 'loopring-sdk'\n\nimport { Lv2Account, } from 'defs/account_defs'\nimport { AccountStatus } from 'state_machine/account_machine_spec'\nimport { UserStorage } from 'storage'\n\n\nconst initialState = () => {\n  const defaultAccId = process.env.REACT_APP_TEST_ACCOUND_ID ? process.env.REACT_APP_TEST_ACCOUND_ID : UserStorage.getAccountId()\n  const defaultApiKey = process.env.REACT_APP_TEST_API_KEY ? process.env.REACT_APP_TEST_API_KEY : UserStorage.getApikey()\n  const defaultOwner = process.env.REACT_APP_TEST_OWNER ? process.env.REACT_APP_TEST_OWNER : UserStorage.getAccount()\n  const defaultEddsaKey = process.env.REACT_APP_TEST_EDDSA_KEY ? process.env.REACT_APP_TEST_EDDSA_KEY : UserStorage.getEddsakey()\n\n  console.log('defaultApiKey:', JSON.stringify(defaultApiKey))\n  const defaultStatus = AccountStatus.UNCONNNECTED\n  return {\n    accAddr: defaultOwner,\n    status: defaultStatus,\n    accountId: defaultAccId,\n    publicKey: {},\n    nonce: 0,\n    isContractAddress: false,\n    apiKey: defaultApiKey,\n    eddsaKey: defaultEddsaKey,\n    connectName: ConnectorNames.Unknown,\n    connectNameTemp: ConnectorNames.Unknown,\n  } as Lv2Account\n}\n\nconst accountSlice:Slice = createSlice({\n  name: 'account',\n  initialState: initialState(),\n  reducers: {\n    reset(state) {\n      const initState = initialState()\n      console.log('!!! reset account!', initState)\n      Object.assign(state, initState)\n    },\n    setAccAddr(state, action: PayloadAction<string>) {\n      state.accAddr = action.payload\n      // UserStorage.setAccount(action.payload)\n    },\n    setAccountInfo(state, action: PayloadAction<AccountInfo>) {\n      state.accAddr = action.payload.owner\n      state.accountId = action.payload.accountId\n      state.nonce = action.payload.nonce\n      state.publicKey = action.payload.publicKey\n\n      // UserStorage.setAccount(state.accAddr)\n      // UserStorage.setAccountId(state.accountId)\n      \n    },\n    setApikey(state, action: PayloadAction<string>) {\n      state.apiKey = action.payload\n      // UserStorage.setApikey(action.payload)\n    },\n    setAccountStatus(state, action: PayloadAction<AccountStatus>) {\n      state.status = action.payload\n    },\n    setEddsaKey(state, action: PayloadAction<any>) {\n      state.eddsaKey = action.payload\n      // UserStorage.setEddsakey(action.payload)\n    },\n    setConnectName(state, action: PayloadAction<ConnectorNames>) {\n      state.connectName = action.payload\n    },\n    setConnectNameTemp(state, action: PayloadAction<ConnectorNames>) {\n      state.connectNameTemp = action.payload\n    },\n    setIsContractAddress(state, action: PayloadAction<boolean>) {\n      state.isContractAddress = action.payload\n    },\n  },\n})\n\nexport const { reset, setAccAddr, setApikey, setConnectName, setConnectNameTemp, setAccountInfo, setAccountStatus, setEddsaKey, setIsContractAddress, } = accountSlice.actions\nexport default accountSlice\n","import { useDispatch, useSelector } from 'react-redux'\nimport { AmmMapStates } from './interface';\nimport { ammMapSlice } from './reducer';\n\nexport const useAmmMap = <R extends {[key:string]:any},I extends {[key:string]:any}>(): AmmMapStates<R,I> & {\n    updateAmmMap:()=> void,\n    statusUnset:()=> void,\n} => {\n    const ammMap:AmmMapStates<R,I>= useSelector((state: any) => state.amm.ammMap)\n    const dispatch = useDispatch();\n    const updateAmmMap = () => {\n        dispatch(ammMapSlice.actions.getAmmMap(undefined))\n    }\n    const statusUnset = ()=>{\n        dispatch(ammMapSlice.actions.statusUnset(undefined))\n    }\n    return {\n        ...ammMap,\n        statusUnset,\n        updateAmmMap\n    }\n}\n","import { useAmmpoolAPI, useExchangeAPI } from 'hooks/exchange/useApi'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { useCustomDCEffect } from 'hooks/common/useCustomDCEffect'\n\nimport store, { RootState } from 'stores'\n\nimport { \n    setMarkets, \n    setExchangeInfo, \n    setTokens, \n    setTickerMap, \n    setAmmPoolStats,\n    setAmmPoolConf, \n    setMarketTrades,\n    setAmmActivityRules,\n    setChainId, \n} from 'stores/trading/reducer'\n\nimport { dumpError400, ChainId, AmmPoolStat, Currency, } from 'loopring-sdk'\nimport { useActiveWeb3React } from 'hooks/web3/useWeb3'\nimport { useEffect } from 'react'\n\nimport { ammpoolAPI, exchangeAPI } from \"stores/apis/api\"\n\nexport function getTradingInfo() {\n    const tradingInfo = store.getState().trading\n    return {\n        tradingInfo,\n        chainId: tradingInfo.chainId,\n    }\n}\n\nexport function getAccount() {\n    return  store.getState().account\n\n}\n\nexport function getChainId(){\n    const chainId = store.getState().system.chainId;\n    return chainId\n\n}\n\nexport function useGetTradingInfo() {\n    const tradingInfo = useSelector((state: RootState) => state.trading)\n    return {\n        tradingInfo,\n        chainId: tradingInfo.chainId,\n    }\n}\n\nexport function useUpdateChainId() {\n    const { chainId } = useActiveWeb3React()\n    const dispatch = useDispatch()\n    useEffect(() => {\n        dispatch(setChainId(chainId ?? ChainId.GORLI))\n    }, [chainId, dispatch])\n}\n\nexport function useUpdateExchangeMarkets() {\n    const dispatch = useDispatch()\n    const api = useExchangeAPI()\n\n    useCustomDCEffect(async() => {\n\n        if (!api) {\n            return\n        }\n\n        try {\n            const response = await api.getMixMarkets()\n            dispatch(setMarkets(response))\n        } catch (reason) {\n            dumpError400(reason)\n        }\n\n    }, [api])\n\n}\n\nexport function useUpdateExchangeInfo() {\n\n    const dispatch = useDispatch()\n    const api = useExchangeAPI()\n\n    useCustomDCEffect(async() => {\n\n        if (!api) {\n            return\n        }\n\n        try {\n            const response = await api.getExchangeInfo()\n            dispatch(setExchangeInfo(response.exchangeInfo))\n        } catch (reason) {\n            dumpError400(reason)\n        }\n\n    }, [api])\n\n}\n\nexport function useUpdateAmmPoolConf() {\n\n    const dispatch = useDispatch()\n    const api = useAmmpoolAPI()\n\n    useCustomDCEffect(async() => {\n\n        if (!api) {\n            return\n        }\n\n        try {\n            const ammPoolConf = await api.getAmmPoolConf()\n            dispatch(setAmmPoolConf(ammPoolConf))\n        } catch (reason) {\n            dumpError400(reason)\n        }\n\n    }, [api])\n\n}\n\nexport function useUpdateAmmPoolStats() {\n\n    const dispatch = useDispatch()\n    const api = useAmmpoolAPI()\n\n    useCustomDCEffect(async() => {\n\n        if (!api) {\n            return\n        }\n\n        try {\n            const ammPoolStats = await api.getAmmPoolStats()\n            dispatch(setAmmPoolStats(ammPoolStats))\n        } catch (reason) {\n            dumpError400(reason)\n        }\n\n    }, [api])\n\n}\n\nexport function useUpdateAmmActivityRules() {\n\n    const dispatch = useDispatch()\n    const api = useAmmpoolAPI()\n\n    useCustomDCEffect(async() => {\n\n        if (!api) {\n            return\n        }\n\n        try {\n            const ammActivityRules = await api.getAmmPoolActivityRules()\n            dispatch(setAmmActivityRules(ammActivityRules.activityRules))\n        } catch (reason) {\n            dumpError400(reason)\n        }\n\n    }, [api])\n\n}\n\nexport function useUpdateTokens() {\n\n    const dispatch = useDispatch()\n    const api = useExchangeAPI()\n\n    useCustomDCEffect(async() => {\n\n        if (!api) {\n            return\n        }\n\n        try {\n            const tokens = await api.getTokens()\n            dispatch(setTokens(tokens))\n        } catch (reason) {\n            dumpError400(reason)\n        }\n\n    }, [api])\n\n}\n\nexport function useUpdateTickerMap(market: string) {\n\n    const dispatch = useDispatch()\n    const api = useExchangeAPI()\n\n    useCustomDCEffect(async() => {\n\n        if (!api) {\n            return\n        }\n\n        try {\n            const tickMap = await api.getTicker({\n                market\n              })\n            dispatch(setTickerMap(tickMap))\n        } catch (reason) {\n            dumpError400(reason)\n        }\n\n    }, [api])\n\n}\n\nexport function useMarketTrades(market: string) {\n  \n    const dispatch = useDispatch()\n    const api = useExchangeAPI()\n\n    useCustomDCEffect(async() => {\n\n        if (!api) {\n            return\n        }\n\n        try {\n            const marketTrades = await api.getMarketTrades({\n                market\n              })\n            dispatch(setMarketTrades(marketTrades))\n        } catch (reason) {\n            dumpError400(reason)\n        }\n\n    }, [api, dispatch])\n\n}\n\nexport function useUpdateFiatPrice() {\n  \n    const dispatch = useDispatch()\n    const api = useExchangeAPI()\n\n    useCustomDCEffect(async() => {\n\n        if (!api) {\n            return\n        }\n\n        try {\n            const usdFiatPrices = await api.getFiatPrice({\n                legal: Currency.USD\n            })\n            const cnyFiatPrices = await api.getFiatPrice({\n                legal: Currency.CNY\n            })\n            dispatch(setMarketTrades({}))\n        } catch (reason) {\n            dumpError400(reason)\n        }\n\n    }, [api, dispatch])\n\n}\n\n// export const asyncGetTradingInfo = async() => {\n//\n//     const { tradingInfo } = getTradingInfo()\n//     console.log('--- tradingInfo', tradingInfo)\n//\n//     let tokens: any = undefined\n//\n//     if (tradingInfo.tokens?.tokenIdMap) {\n//         tokens = tradingInfo.tokens\n//     } else {\n//         tokens = (await exchangeAPI().getTokens())\n//     }\n//\n//     let ammpools: any = undefined\n//\n//     if (tradingInfo.ammPoolConf?.ammpools) {\n//         ammpools = tradingInfo.ammPoolConf.ammpools\n//     } else {\n//         ammpools = (await ammpoolAPI().getAmmPoolConf()).ammpools\n//     }\n//\n//     let ammPoolStats: { [key: string] : AmmPoolStat } = {}\n//\n//     if (tradingInfo.ammPoolStats.ammPoolStats) {\n//         ammPoolStats = tradingInfo.ammPoolStats.ammPoolStats\n//     } else {\n//         ammPoolStats = (await ammpoolAPI().getAmmPoolStats()).ammPoolStats\n//     }\n//\n//     return {\n//         tokens,\n//         ammpools,\n//         ammPoolStats,\n//     }\n// }","import { useDispatch, useSelector } from 'react-redux'\nimport { tokenMapSlice } from './reducer';\nimport { TokenMapStates } from './interface';\n\nexport function useTokenMap<R extends {[key:string]:any}>(): TokenMapStates<R> & {\n    updateTokenMap:()=>void,\n    statusUnset:()=>void,\n} {\n    const tokenMap:TokenMapStates<R> = useSelector((state: any) => state.tokenMap)\n    const dispatch = useDispatch();\n    const updateTokenMap = () => {\n        dispatch(tokenMapSlice.actions.getTokenMap(undefined))\n    }\n    const statusUnset = ()=>{\n        dispatch(tokenMapSlice.actions.statusUnset(undefined))\n    }\n    return {\n        ...tokenMap,\n        statusUnset,\n        updateTokenMap,\n    }\n\n}\n","import { useMemo, useState, useEffect } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\n\nimport { Web3Provider } from '@ethersproject/providers'\nimport { Web3ReactContextInterface } from '@web3-react/core/dist/types'\n\nimport { useWeb3React } from '@web3-react/core'\n\nimport { injected } from 'networks/web3_connectors'\n\nimport { ChainId, NetworkContextName } from 'loopring-sdk'\n\n/*\nimport EXCHANGE_ABI from 'config/abis/exchange_3_6.json'\nimport ERC20_ABI from 'config/abis/erc20.json'\nimport DEPOSIT_ABI from 'config/abis/deposit.json'\n\nimport Web3 from 'web3'\n*/\n\nexport function useActiveWeb3React(): Web3ReactContextInterface<Web3Provider> & { chainId?: ChainId } {\n  const context = useWeb3React<Web3Provider>()\n  const contextNetwork = useWeb3React<Web3Provider>(NetworkContextName)\n  return context.active ? context : contextNetwork\n}\n\nexport function useEtherscan() {\n  const { chainId } = useActiveWeb3React()\n\n  const [etherscanUrl, setEtherscanUrl] = useState<string>('')\n\n  useEffect(() => {\n    switch(chainId) {\n      case ChainId.MAINNET:\n        setEtherscanUrl('https://etherscan.io/address/')\n        break\n      default:\n        setEtherscanUrl('https://goerli.etherscan.io/address/')\n    }\n  }, [chainId])\n\n  return {\n    etherscanUrl,\n  }\n}\n\nexport function useEagerConnect() {\n\n  const { activate, active } = useWeb3React()\n\n  const [tried, setTried] = useState(false)\n\n  useEffect(() => {\n    injected.isAuthorized().then((isAuthorized: boolean) => {\n      if (isAuthorized) {\n        console.log('useEagerConnect isAuthorized')\n        activate(injected, undefined, true).catch(() => {\n          setTried(true)\n        })\n      } else {\n        console.log('useEagerConnect NOT isAuthorized')\n        setTried(true)\n      }\n    })\n  }, []) // intentionally only running on mount (make sure it's only mounted once :))\n\n  // if the connection worked, wait until we get confirmation of that to flip the flag\n  useEffect(() => {\n    if (!tried && active) {\n      setTried(true)\n    }\n  }, [tried, active])\n\n  return tried\n}\n\nexport function useInactiveListener(onReConnectInjected: any = undefined, suppress: boolean = false) {\n  const { active, error, activate, chainId, } = useWeb3React()\n  const dispatch = useDispatch()\n\n  useEffect((): any => {\n    const { ethereum } = window as any\n\n    const reConnectInjected = () => {\n      console.log('--------------------------> reConnectInjected')\n      activate(injected)\n      if (onReConnectInjected) {\n        onReConnectInjected()\n      }\n    }\n\n    if (ethereum && ethereum.on && !active && !error) {\n\n      const handleChainChanged = (chainId: string | number) => {\n        console.log('Handling \\'chainChanged\\' event with payload', chainId)\n        reConnectInjected()\n      }\n      const handleAccountsChanged = (accounts: string[]) => {\n        console.log('---------------------------------------------')\n        console.log('Handling \\'accountsChanged\\' event with payload', accounts)\n        console.log('before reset accounts.length=', accounts.length)\n        if (accounts.length > 0) {\n          console.log('before reset!!!!!!!!!!!!!!!!1')\n          reConnectInjected()\n        }\n      }\n\n      ethereum.on('chainChanged', handleChainChanged)\n      ethereum.on('accountsChanged', handleAccountsChanged)\n\n      return () => {\n        if (ethereum.removeListener) {\n          ethereum.removeListener('chainChanged', handleChainChanged)\n          ethereum.removeListener('accountsChanged', handleAccountsChanged)\n        }\n      }\n    }\n  }, [active, error, chainId, activate, dispatch])\n}\n\nexport function useBlockNumber() {\n  const { library, chainId } = useActiveWeb3React()\n\n  const [blockNumber, setBlockNumber] = useState<number>()\n\n  useEffect((): any => {\n      if (!!library) {\n          let stale = false\n\n          library\n              .getBlockNumber()\n              .then((blockNumber: number) => {\n                  if (!stale) {\n                      setBlockNumber(blockNumber)\n                  }\n              })\n              .catch(() => {\n                  if (!stale) {\n                      setBlockNumber(-1)\n                  }\n              })\n\n          const updateBlockNumber = (blockNumber: number) => {\n              setBlockNumber(blockNumber)\n          }\n          library.on('block', updateBlockNumber)\n\n          return () => {\n              stale = true\n              library.removeListener('block', updateBlockNumber)\n              setBlockNumber(undefined)\n          }\n      }\n  }, [library, chainId])\n\n  return {\n      blockNumber,\n  }\n}\n\nexport function useBalance() {\n  const { account, library, chainId } = useActiveWeb3React()\n\n  const [balance, setBalance] = useState<number>()\n  useEffect((): any => {\n      if (!!account && !!library) {\n          let stale = false\n\n          library\n              .getBalance(account)\n              .then((balance: any) => {\n                  if (!stale) {\n                      setBalance(balance)\n                  }\n              })\n              .catch(() => {\n                  if (!stale) {\n                      setBalance(0)\n                  }\n              })\n\n          return () => {\n              stale = true\n              setBalance(0)\n          }\n      }\n  }, [account, library, chainId]) // ensures refresh if referential identity of library doesn't change across chainIds\n\n  return {\n      balance,\n  }\n}\n","import { InjectedConnector } from '@web3-react/injected-connector'\nimport { NetworkConnector } from '@web3-react/network-connector'\nimport { WalletConnectConnector } from '@web3-react/walletconnect-connector'\nimport { WalletLinkConnector } from '@web3-react/walletlink-connector'\nimport { LedgerConnector } from '@web3-react/ledger-connector'\nimport { TrezorConnector } from '@web3-react/trezor-connector'\nimport { AuthereumConnector } from '@web3-react/authereum-connector'\n\nconst POLLING_INTERVAL = 12000\n\nconst RPC_URLS: { [chainId: number]: string } = {\n  1: process.env.REACT_APP_RPC_URL_1 as string,\n  5: process.env.REACT_APP_RPC_URL_5 as string\n}\n\nconsole.log('RPC_URLS 1:', RPC_URLS[1])\nconsole.log('RPC_URLS 5:', RPC_URLS[5])\n\nexport const injected = new InjectedConnector({ supportedChainIds: [1, 5,] })\n\nexport const network = new NetworkConnector({\n  urls: { \n    1: RPC_URLS[1], \n    5: RPC_URLS[5] \n  },\n  defaultChainId: 1\n})\n\nexport const walletconnect = new WalletConnectConnector({\n  rpc: { 1: RPC_URLS[1] },\n  bridge: 'https://bridge.walletconnect.org',\n  qrcode: true,\n  pollingInterval: POLLING_INTERVAL\n})\n\nexport const walletlink = new WalletLinkConnector({\n  url: RPC_URLS[1],\n  appName: 'Loopring DEX'\n})\n\nexport const ledger = new LedgerConnector({ chainId: 1, url: RPC_URLS[1], pollingInterval: POLLING_INTERVAL })\n\nexport const trezor = new TrezorConnector({\n  chainId: 1,\n  url: RPC_URLS[1],\n  pollingInterval: POLLING_INTERVAL,\n  manifestEmail: 'dummy@abc.xyz',\n  manifestAppUrl: 'http://localhost:1234'\n})\n\nexport const authereum = new AuthereumConnector({ chainId: 42 })\n","import { useDispatch, useSelector } from 'react-redux'\nimport { walletLayer2Slice } from './reducer';\nimport { WalletLayer2States } from './interface';\n\nexport function useWalletLayer2(): WalletLayer2States & {\n    updateWalletLayer2:()=> void,\n    statusUnset:()=> void,\n    resetLayer2:()=>void,\n} {\n    const walletLayer2:WalletLayer2States = useSelector((state: any) => state.walletLayer2)\n    const dispatch = useDispatch();\n    const updateWalletLayer2 = () => {\n        dispatch(walletLayer2Slice.actions.getWalletLayer2(undefined))\n    }\n    const statusUnset = ()=>{\n        dispatch(walletLayer2Slice.actions.statusUnset(undefined))\n    }\n    const resetLayer2 = ()=>{\n        dispatch(walletLayer2Slice.actions.reset(undefined))\n    }\n    return {\n        ...walletLayer2,\n        resetLayer2,\n        statusUnset,\n        updateWalletLayer2\n    }\n\n}\n","import { createSlice, PayloadAction, Slice } from '@reduxjs/toolkit'\nimport { AmmMapStates, GetAmmMapParams } from './interface';\nimport { STATUS } from '../../constant';\n\n\n\nconst initialState: Required<AmmMapStates<object, object>> = {\n    ammMap: undefined,\n    __timer__: -1,\n    status: 'UNSET',\n    errorMessage: null,\n}\nconst ammMapSlice: Slice = createSlice({\n    name: 'ammMap',\n    initialState,\n    reducers: {\n        getAmmMap(state, action: PayloadAction<GetAmmMapParams>) {\n            state.status = STATUS.PENDING\n        },\n        getAmmMapStatus(state, action: PayloadAction<AmmMapStates<any, any>>) {\n            // @ts-ignore\n            if (action.error) {\n                state.status = STATUS.ERROR\n                // @ts-ignore\n                state.errorMessage = action.error\n            }\n            const {ammMap, __timer__} = action.payload\n            if (ammMap) {state.ammMap = ammMap;}\n            if (__timer__) {state.__timer__ = __timer__;}\n            state.status = STATUS.DONE\n        },\n        updateRealTimeAmmMap(state, action: PayloadAction<undefined>) {\n            state.status = STATUS.PENDING\n\n\n        },\n        statusUnset: state => {\n            state.status = STATUS.UNSET\n        }\n    },\n});\nexport { ammMapSlice };\nexport const {getAmmMap, getAmmMapStatus, statusUnset, updateRealTimeAmmMap} = ammMapSlice.actions\n","import { Provider } from 'react-redux'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nimport { createWeb3ReactRoot, Web3ReactProvider } from '@web3-react/core'\nimport store from 'stores'\n\nimport { getLibrary } from 'utils/web3_tools'\nimport { NetworkContextName } from 'loopring-sdk'\n\nimport { getTheme, i18n, provider, ProviderComposer } from \"@loopring-web/component-lib/static-resource\"\nimport { ThemeProvider as MuThemeProvider } from '@material-ui/core'\nimport LocalizationProvider from '@material-ui/pickers/LocalizationProvider'\n\nimport MomentUtils from '@material-ui/lab/AdapterMoment'\n\nimport { ThemeProvider } from \"@emotion/react\"\n\nimport { I18nextProvider } from \"react-i18next\"\n\n\n\nconst Web3ProviderNetwork = createWeb3ReactRoot(NetworkContextName)\nconst providers = [\n    provider(LocalizationProvider as any, {dateAdapter: MomentUtils}),\n    provider(I18nextProvider as any, {i18n:i18n}),\n    provider(MuThemeProvider as any, {theme: getTheme('dark')}),\n    provider(ThemeProvider as any, {theme: getTheme('dark')}),\n    provider(Provider as any, {store}),\n]\n\nReactDOM.render(\n// @ts-ignore\n    <ProviderComposer providers={providers}>\n        <Web3ReactProvider getLibrary={getLibrary}>\n            <Web3ProviderNetwork getLibrary={getLibrary}>\n                <App/>\n            </Web3ProviderNetwork>\n        </Web3ReactProvider>\n    </ProviderComposer>,\n    document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\nif (process.env.NODE_ENV !== 'production') {\n    reportWebVitals(console.log)\n}\n","import { createSlice, PayloadAction, Slice } from '@reduxjs/toolkit'\nimport { STATUS } from '../constant';\nimport { StateBase } from '../interface';\n\nconst initialState: StateBase & {socket: { [ key: string]:string[] }} = {\n  socket: {},\n  status: 'UNSET',\n  errorMessage: null,\n}\nconst socketSlice: Slice<StateBase & {socket: { [ key: string]:string[] }}> = createSlice({\n  name: 'socket',\n  initialState,\n  reducers: {\n    socketEnd(state,action:PayloadAction<undefined>){\n      state.status = STATUS.PENDING\n    },\n    sendNewMessage(state, action: PayloadAction<{socket: { [ key: string]:string[] }}>) {\n      state.socket = action.payload.socket\n    },\n    getSocketStatus(state, action: PayloadAction<{socket: { [ key: string]:string[] }}>) {\n\n      // @ts-ignore\n      if (action.error) {\n        state.status = STATUS.ERROR\n        // @ts-ignore\n        state.errorMessage = action.error\n      }\n      // state.socket = action.payload.socket\n      state.status = STATUS.DONE\n    },\n\n    statusUnset: state => {\n      state.status = STATUS.UNSET\n    }\n\n  },\n});\nexport { socketSlice };\nexport const { getSocketStatus, sendNewMessage, socketEnd, statusUnset} = socketSlice.actions;\n","import { createSlice, PayloadAction, Slice } from '@reduxjs/toolkit'\n\nimport { TradingInterval, ChainId, ExchangeInfo, TokenInfo, TickerData, } from 'loopring-sdk'\n\nexport interface TradingInfo {\n  chainId: number\n  interval: TradingInterval\n  ammPoolStats: any\n  ammPoolConf: any\n  ammActivityRules: any\n  markets: any\n  marketTrades: any\n  tickerMap: {[key: string]: TickerData}\n  tokens: {[key: string]: [value: TokenInfo]}\n  exchangeInfo?: ExchangeInfo\n}\n\nconst defaultInterval = process.env.REACT_APP_TEST_INTERVAL ? process.env.REACT_APP_TEST_INTERVAL : TradingInterval.hr1\n\nconst initialState = {\n  chainId: ChainId.GORLI,\n  interval: defaultInterval,\n  ammPoolConf: {},\n  ammActivityRules: {},\n  ammPoolStats: {},\n  markets: [],\n  marketTrades: {},\n  tokens: {},\n  tickerMap: {},\n  refreshRate: 1000,\n  refreshRateSlow: 3000,\n} as TradingInfo\n\nconst tradingSlice:Slice = createSlice({\n  name: 'trading',\n  initialState,\n  reducers: {\n    setChainId(state, action: PayloadAction<number>) {\n      state.chainId = action.payload\n    },\n    changeTradingInterval(state, action: PayloadAction<any>) {\n      state.interval = action.payload\n    },\n    setTickerMap(state, action: PayloadAction<any>) {\n      state.tickerMap = action.payload\n    },\n    setAmmPoolStats(state, action: PayloadAction<any>) {\n      state.ammPoolStats = action.payload\n    },\n    setAmmActivityRules(state, action: PayloadAction<any>) {\n      state.ammActivityRules = action.payload\n    },\n    setAmmPoolConf(state, action: PayloadAction<any>) {\n      state.ammPoolConf = action.payload\n    },\n    setMarketTrades(state, action: PayloadAction<any>) {\n      state.marketTrades = action.payload\n    },\n    setMarkets(state, action: PayloadAction<any>) {\n      state.markets = action.payload\n    },\n    setTokens(state, action: PayloadAction<{}>) {\n      state.tokens = action.payload\n    },\n    setExchangeInfo(state, action: PayloadAction<ExchangeInfo>) {\n      state.exchangeInfo = action.payload\n    },\n  },\n})\n\nexport const {\n  setChainId, \n  setAmmPoolStats,\n  setAmmActivityRules,\n  setMarketTrades, \n  setTickerMap, \n  setAmmPoolConf, \n  changeTradingInterval, \n  setMarkets, \n  setTokens, \n  setExchangeInfo, \n} = tradingSlice.actions\n\nexport default tradingSlice\n","import { utils } from 'ethers'\n\nimport * as fm from 'loopring-sdk'\n\nimport BigNumber from 'bignumber.js'\n\nimport { CoinInfo, CoinMap, } from '@loopring-web/component-lib/static-resource'\nimport { DepthData, getBaseQuote, LoopringMap, MarketInfo, MarketStatus, TokenInfo, } from 'loopring-sdk'\nimport { BIG0, BIG1, BIG10, BIG10K, MULTI_FACTOR, } from '../defs/swap_defs'\n\nexport function getIcon(symbol: string, tokens: any) {\n    const token: any = tokens[symbol]\n    return getIconByTokenInfo(token)\n}\n\nexport function getIconByTokenInfo(token: TokenInfo) {\n    if (token) {\n        const addr = utils.getAddress(token.address)\n        const path = `https://exchange.loopring.io/assets/images/ethereum/assets/${addr}/logo.png`\n        return path\n    }\n    return ''\n}\n\nexport function makeCoinInfo(token: TokenInfo) {\n    if (token) {\n        const info: CoinInfo<any> = {\n            icon: getIconByTokenInfo(token),\n            name: token.symbol,\n            simpleName: token.symbol,\n            description: token.name,\n            company: token.name,\n        }\n        return info\n    }\n    return undefined\n}\n\nexport const getLeft = (pairs: any, tokens: any) => {\n    if (pairs) {\n\n        const left = Reflect.ownKeys(pairs)\n\n        let coinMapLeft: CoinMap<any, CoinInfo<any>> = {}\n\n        left.forEach((key: any) => {\n            coinMapLeft[key] = {\n                icon: getIcon(key, tokens),\n                name: key,\n                simpleName: key,\n                description: '',\n                company: ''\n            }\n        })\n\n        return {\n            left,\n            coinMapLeft,\n        }\n    }\n\n    return undefined\n}\n\nexport const getRight = (pairs: any, left: any, tokens: any) => {\n    if (pairs) {\n        const right = pairs[left].tokenList\n\n        let coinMapRight: CoinMap<any, CoinInfo<any>> = {}\n\n        if (right) {\n            right.forEach((key: any) => {\n                coinMapRight[key] = {\n                    icon: getIcon(key, tokens),\n                    name: key,\n                    simpleName: key,\n                    description: '',\n                    company: ''\n                }\n            })\n\n            return {\n                right,\n                coinMapRight,\n            }\n        }\n    }\n    return undefined\n}\n\nexport const getToken = (tokens: any, token: any) => {\n    if (!tokens) {\n        throw Error('no tokens list!')\n    }\n    return tokens[token]\n}\n\nexport const getTokenInfoByToken = (ammBalance: any, tokens: any, token: any) => {\n\n    const tokenInfo = getToken(tokens, token)\n\n    const tokenVol = ammBalance.pooledMap[tokenInfo.tokenId].volume\n    const reserve = fm.toBig(tokenVol)\n\n    return {\n        tokenInfo, tokenVol, reserve,\n    }\n}\n\nconst getKey = (base: any, quote: any) => {\n\n    if (!base || !quote) {\n        return {\n            key: undefined,\n            key_bak: undefined,\n            isOK: false,\n        }\n    }\n\n    const isLRCETH = false\n    const key = isLRCETH ? 'LRCETH-Pool' : ('AMM-' + base + '-' + quote)\n    const key_bak = isLRCETH ? 'LRCETH-Pool' : ('AMM-' + quote + '-' + base)\n    return {\n        key,\n        key_bak,\n        isOK: true,\n    }\n}\n\nconst getInfoByKey = (raw_data: any, keyPair: any) => {\n    const {\n        key,\n        key_bak,\n    } = keyPair\n\n    if (raw_data[key]) return raw_data[key]\n    return raw_data[key_bak]\n}\n\nexport const getBalances = (ammpools: any, ammPoolsBalances: any, base: any, quote: any, tokens: any) => {\n\n    const { ammInfo,\n        ammBalance,\n    } = getAmmInfo(ammpools, ammPoolsBalances, base, quote)\n\n    const baseToken = getToken(tokens, base)\n    const quoteToken = getToken(tokens, quote)\n\n    const baseBalance = ammBalance.pooledMap[baseToken.tokenId]\n    const quoteBalance = ammBalance.pooledMap[quoteToken.tokenId]\n\n    return {\n        ammInfo,\n        ammBalance,\n        baseBalance,\n        quoteBalance,\n    }\n\n}\n\nexport const getAmmInfoOnly = (ammpools: any, base: any, quote: any) => {\n\n    const keyPair = getKey(base, quote)\n\n    const ammInfo = getInfoByKey(ammpools, keyPair)\n\n    if (!ammInfo) {\n        throw Error('no ammInfo!')\n    }\n\n    return {\n        ammInfo,\n    }\n\n}\n\nexport const getAmmInfo = (ammpools: any, ammPoolsBalances: any, base: any, quote: any) => {\n\n    const keyPair = getKey(base, quote)\n\n    const ammInfo = getInfoByKey(ammpools, keyPair)\n    const ammBalance = getInfoByKey(ammPoolsBalances, keyPair)\n\n    if (!ammInfo || !ammBalance) {\n        throw Error('no ammInfo! no ammBalance!')\n    }\n\n    const feeBips = parseInt(ammInfo.feeBips)\n\n    return {\n        ammInfo,\n        ammBalance,\n        feeBips,\n    }\n\n}\n\nconst getAmt = (rawAmt: any, tokenInfo: any) => {\n    if (rawAmt === undefined) {\n        rawAmt = 0\n    }\n\n    return fm.toBig(rawAmt).times('1e' + tokenInfo.decimals)\n}\n\nexport const applySlippageTolerance = (\n    tokens: any,\n    token: any,\n    value: any,\n    slippageTolerance: number = 0.01\n) => {\n    const tokenInfo = getToken(tokens, token)\n    const f = 1e7\n    const feeFactor = fm.toBig(f * (1 - slippageTolerance))\n    const amount = fm.toBig(value).times('1e' + tokenInfo.decimals)\n    const outInWei = amount.times(feeFactor).dividedBy(f)\n    const out = fromWEI(tokens, token, outInWei)\n\n    return {\n        outInWei,\n        out,\n    }\n}\n\nexport const applyOrderFee = (tokens: any, token: any, value: any, feeBip: any) => {\n    const tokenInfo = getToken(tokens, token)\n    const feeFactor = fm.toBig(MULTI_FACTOR - feeBip)\n    const amount = fm.toBig(value).times('1e' + tokenInfo.decimals)\n    const appliedAmount = amount.times(feeFactor).dividedBy(MULTI_FACTOR)\n    return appliedAmount\n}\n\nexport function fromWEI(tokens: any, symbol: any, valueInWEI: any, precision?: any, ceil?: any) {\n    try {\n        const tokenInfo = getToken(tokens, symbol)\n        const precisionToFixed = precision ? precision : tokenInfo.precision\n        const value = fm.toBig(valueInWEI).div('1e' + tokenInfo.decimals)\n        return fm.toFixed(value, precisionToFixed, ceil)\n    } catch (error) {\n    }\n    return '0'\n}\n\n\nexport function toWEI(tokens: any, symbol: any, value: any, rm: any = 3) {\n    const tokenInfo = getToken(tokens, symbol)\n    if (typeof tokenInfo === 'undefined') {\n        return '0'\n    }\n\n    return fm.toBig(value)\n        .times('1e' + tokenInfo.decimals)\n        .toFixed(0, rm)\n}\n\nexport const getAmountOut = (amt: any, ammpools: any, ammPoolsBalances: any, tokens: any,\n    base: any, quote: any, takerRate: number, currentPrice: number) => {\n\n    if (amt === undefined) {\n        amt = 0\n    }\n\n    const { ammBalance, feeBips, } = getAmmInfo(ammpools, ammPoolsBalances, base, quote)\n\n    const { tokenInfo: baseTokenInfo, reserve: reserveIn } = getTokenInfoByToken(ammBalance, tokens, base)\n    const { tokenInfo: quoteTokenInfo, reserve: reserveOut } = getTokenInfoByToken(ammBalance, tokens, quote)\n\n    const amountIn = getAmt(amt, baseTokenInfo)\n    const feeBipsFactor = fm.toBig(MULTI_FACTOR - feeBips)\n    const amountInWithFee = amountIn.times(feeBipsFactor)\n    const numerator = amountInWithFee.times(reserveOut)\n    const denominator = reserveIn.times(MULTI_FACTOR).plus(amountInWithFee)\n    const amountOutInWei: any = numerator.dividedBy(denominator)\n\n    let quoteAmt: any = fromWEI(tokens, quote, amountOutInWei)\n\n    const _amount1ApplyOrderFeeInWei = applyOrderFee(tokens, quote, quoteAmt, takerRate + feeBips)\n\n    let _amount1ApplyOrderFee = Number(fromWEI(tokens, quote, _amount1ApplyOrderFeeInWei))\n\n    let priceImpact = 0\n    if (_amount1ApplyOrderFee < 0) {\n        _amount1ApplyOrderFee = 0\n        quoteAmt = null\n    } else {\n        const newPrice = Number(quoteAmt) / Number(amt)\n        priceImpact = (newPrice - currentPrice) / currentPrice\n    }\n\n    return {\n        quoteAmt,\n        _amount1ApplyOrderFeeInWei,\n        _amount1ApplyOrderFee,\n        priceImpact,\n    }\n\n}\n\nexport const getAmountOut_Reverse = (amt: any, ammpools: any, ammPoolsBalances: any, tokens: any,\n    base: any, quote: any, takerRate: number, currentPrice: number) => {\n\n    if (amt === undefined) {\n        amt = 0\n    }\n    \n    const { ammBalance, feeBips, } = getAmmInfo(ammpools, ammPoolsBalances, base, quote)\n\n    const { tokenInfo: baseTokenInfo, reserve: reserveIn } = getTokenInfoByToken(ammBalance, tokens, base)\n    const { tokenInfo: quoteTokenInfo, reserve: reserveOut } = getTokenInfoByToken(ammBalance, tokens, quote)\n\n    const amountOut = getAmt(amt, quoteTokenInfo)\n\n    if (amountOut.gt(reserveOut)) {\n        return {\n            baseAmt: 0,\n            _amount1ApplyOrderFeeInWei: 0,\n            _amount1ApplyOrderFee: 0,\n            priceImpact: 0,\n            hasError: false,\n        }\n    }\n\n    const numerator = amountOut.times(reserveIn).times(MULTI_FACTOR)\n    const feeBipsFactor = fm.toBig(MULTI_FACTOR - feeBips)\n\n    // If amountOut is larger than reserveOut?\n    // It's handled before getAmountOut_reserve\n    const reserveOutSubAmountOut = reserveOut.minus(amountOut)\n\n    const denominator = feeBipsFactor.times(reserveOutSubAmountOut)\n    const amountInInWei = numerator.dividedBy(denominator)\n\n    let baseAmt: any = fromWEI(tokens, quote, amountInInWei)\n\n    const _amount1ApplyOrderFeeInWei = applyOrderFee(tokens, quote, amt, takerRate + feeBips)\n\n    let _amount1ApplyOrderFee = Number(fromWEI(tokens, quote, _amount1ApplyOrderFeeInWei))\n\n    let priceImpact = 0\n    if (_amount1ApplyOrderFee < 0) {\n        _amount1ApplyOrderFee = 0\n        baseAmt = null\n    } else {\n        const newPrice = Number(amt) / Number(baseAmt)\n        priceImpact = (newPrice - currentPrice) / currentPrice\n    }\n\n    return {\n        baseAmt,\n        _amount1ApplyOrderFeeInWei,\n        _amount1ApplyOrderFee,\n        priceImpact,\n        hasError: false,\n    }\n\n}\n\nexport function isEmpty(input: any) {\n    if (!input || input.trim() === '') {\n        return true\n    }\n\n    return false\n}\n\nfunction getAmountOutWithFeeBips(amountIn: string, feeBips: string, reserveIn: string, reserveOut: string ) {\n    const amountInBig = fm.toBig(amountIn)\n    const reserveInBig = fm.toBig(reserveIn)\n    const reserveOutBig = fm.toBig(reserveOut)\n    \n    if (amountInBig.lt(BIG0) || reserveInBig.lt(BIG0) || reserveOutBig.lt(BIG0)) {\n        return BIG0\n    }\n    const feeBipsBig = fm.toBig(feeBips)\n\n    const amountInWithFee = amountInBig.times(BIG10K.minus(feeBipsBig))\n    const numerator = amountInWithFee.times(reserveOutBig)\n    const denominator = reserveInBig.times(BIG10K).plus(amountInWithFee)\n\n    return numerator.div(denominator)\n}\n\nfunction getAmountInWithFeeBips(amountOut: string, feeBips: string, reserveIn: string, reserveOut: string ) {\n    const amountOutBig = fm.toBig(amountOut)\n    const reserveInBig = fm.toBig(reserveIn)\n    const reserveOutBig = fm.toBig(reserveOut)\n    \n    if (amountOutBig.lt(BIG0) || reserveInBig.lt(BIG0) || reserveOutBig.lt(BIG0)) {\n        return BIG0\n    }\n    const feeBipsBig = fm.toBig(feeBips)\n\n    const numerator = reserveInBig.times(amountOutBig).times(BIG10K)\n    const denominator = reserveOutBig.times(amountOutBig).times(BIG10K.minus(feeBipsBig))\n\n    return numerator.div(denominator).plus(BIG1)\n}\n\nfunction getOutputOrderbook(input: string, feeBips: string, isAtoB: boolean) {\n    let output: string  = \"0\"\n    let remain: string  = input\n}\n\nexport function getOutputAmount(base: string, quote: string, market: string, \n    input: string, isAtoB: boolean, feeBips: string, \n    tokenMap: LoopringMap<TokenInfo>, marketMap: LoopringMap<MarketInfo>, depth: DepthData) {\n\n    if (isEmpty(input) || isEmpty(feeBips) || !(market in Object.keys(marketMap))) {\n        return undefined\n    }\n\n    const { base: baseRaw, quote: quoteRaw } = getBaseQuote(market)\n\n    const marketInfo: MarketInfo = marketMap[market]\n\n    const isSwapEnabled = marketInfo.status === MarketStatus.ALL || marketInfo.status === MarketStatus.AMM\n\n    input = input.trim()\n\n    let exceedDepth = false\n\n    const reserveIn = ''\n    const reserveOut = ''\n\n    if (isAtoB) {\n\n        // bids_amtTotal -> bidsSizeShown\n        // asks_volTotal -> asksQuoteSizeShown\n        const amountInWei = toWEI(tokenMap, base, input)\n\n        if (isEmpty(depth.bids_amtTotal) || isEmpty(depth.asks_volTotal)) {\n            exceedDepth = true\n        } else {\n\n            if (base === baseRaw) {\n                exceedDepth = fm.toBig(amountInWei).lt(fm.toBig(depth.bids_amtTotal))\n            } else {\n                exceedDepth = fm.toBig(amountInWei).lt(fm.toBig(depth.asks_volTotal))\n            }\n\n        }\n\n        let amountB = new BigNumber(0)\n\n        if (exceedDepth) {\n            if (isSwapEnabled) {\n                amountB = getAmountOutWithFeeBips(amountInWei, feeBips, reserveIn, reserveOut)\n            }\n        } else {\n            amountB = fm.toBig(toWEI(tokenMap, base, getOutputOrderbook(input, feeBips, isAtoB)))\n        }\n\n        return fromWEI(tokenMap, quote, amountB)\n\n    } else {\n\n        // asks_amtTotal -> asksSizeShown\n        // bids_volTotal -> bidsQuoteSizeShown\n\n        if (isEmpty(depth.bids_volTotal) || isEmpty(depth.asks_amtTotal)) {\n            exceedDepth = true\n        } else {\n            const amountInWei = toWEI(tokenMap, quote, input)\n\n            if (base === baseRaw) {\n                exceedDepth = fm.toBig(amountInWei).gt(fm.toBig(depth.bids_volTotal))\n            } else {\n                exceedDepth = fm.toBig(amountInWei).gt(fm.toBig(depth.asks_amtTotal))\n            }\n\n        }\n\n        let amountSBint = BIG0\n\n        const amountB: string = toWEI(tokenMap, quote, input)\n\n        if (exceedDepth) {\n            if (isSwapEnabled) {\n                amountSBint = getAmountInWithFeeBips(amountB, feeBips, reserveIn, reserveOut)\n            }\n        } else {\n            amountSBint = fm.toBig(toWEI(tokenMap, base, getOutputOrderbook(input, feeBips, isAtoB)))\n        }\n\n        if (amountSBint.gt(BIG0)) {\n            return fromWEI(tokenMap, base, amountSBint)\n        }\n\n        return '0'\n\n    }\n\n}\n","export enum CONSTANTS {\n    Handler = 'handler',\n    AccountId = 'account_id',\n    Account = 'account',\n    Apikey = 'apikey',\n    Eddsakey = 'eddsakey',\n    ActiveTime = 'active_time',\n    AmmOrder = 'amm_order',\n    HardwareAddresses = 'hardware_addresses',\n}\n\nconst SESSION_TIMEOUT_SECONDS = 600\n\nexport class UserStorage {\n\n    public static getHandler() {\n        const rawHandler = sessionStorage.getItem(CONSTANTS.Handler)\n        try {\n            if (rawHandler !== undefined && rawHandler !== null)\n                return parseInt(rawHandler)\n        } catch (err) {\n        }\n        return undefined\n    }\n\n    public static setHandler(handler: any) {\n        sessionStorage.setItem(CONSTANTS.Handler, handler)\n    }\n\n    public static clearHandler() {\n        sessionStorage.removeItem(CONSTANTS.Handler)\n    }\n\n    public static checkTimeout(reset: boolean = false) : boolean {\n        let dateTimeStr = localStorage.getItem(CONSTANTS.ActiveTime)\n        let now = new Date().getTime()\n\n        if (dateTimeStr !== null && !reset) {\n            let tmpDt = new Date(parseInt(dateTimeStr))\n\n            // console.log(`now:${now} dateTimeStr:${dateTimeStr} delta:${now - tmpDt.getTime()}`)\n\n            if(now - tmpDt.getTime() > SESSION_TIMEOUT_SECONDS * 1000) {\n                console.log(`TIMEOUT! now:${now} dateTimeStr:${dateTimeStr} delta:${now - tmpDt.getTime()}`)\n                sessionStorage.clear()\n                localStorage.setItem(CONSTANTS.ActiveTime, now.toString())\n                return true\n            }\n        } else {\n\n            if (reset) {\n                console.log('force reset!!')\n            }\n\n            localStorage.setItem(CONSTANTS.ActiveTime, now.toString())\n        }\n\n        return false\n    }\n\n\n    public static getAccountId() {\n        const rawId = sessionStorage.getItem(CONSTANTS.AccountId)\n        try {\n            if (rawId)\n                return parseInt(rawId)\n        } catch (err) {\n        }\n        return undefined\n    }\n\n    public static setAccountId(accountId: number) {\n        sessionStorage.setItem(CONSTANTS.AccountId, accountId.toString())\n    }\n\n    public static getAccount() {\n        return sessionStorage.getItem(CONSTANTS.Account)\n    }\n\n    public static setAccount(account: string) {\n        sessionStorage.setItem(CONSTANTS.Account, account)\n    }\n\n    public static getApikey() {\n        return sessionStorage.getItem(CONSTANTS.Apikey)\n    }\n\n    public static setApikey(apikey: string) {\n        sessionStorage.setItem(CONSTANTS.Apikey, apikey)\n    }\n\n    public static getEddsakey() {\n        return sessionStorage.getItem(CONSTANTS.Eddsakey)\n    }\n\n    public static setEddsakey(eddsakey: string) {\n        sessionStorage.setItem(CONSTANTS.Eddsakey, eddsakey)\n    }\n\n    public static getAmmOrder(): string {\n        var orderHash = localStorage.getItem(CONSTANTS.AmmOrder)\n        return orderHash ? orderHash : ''\n    }\n\n    public static setAmmOrder(orderHash: string) {\n        localStorage.setItem(CONSTANTS.AmmOrder, orderHash)\n    }\n\n    public static clearAmmOrder() {\n        localStorage.removeItem(CONSTANTS.AmmOrder)\n    }\n\n    public static isHardwareAddress(address: string) {\n        let current = localStorage.getItem(CONSTANTS.HardwareAddresses)\n        if (current) {\n            if (current.includes(address.toLowerCase())) {\n                return true\n            }\n        }\n        return false\n    }\n\n    public static saveHardwareAddress(address: string) {\n        let current = localStorage.getItem(CONSTANTS.HardwareAddresses);\n        if (current) {\n            if (current.includes(address.toLowerCase()) !== true) {\n                let newValue = current + ',' + address.toLowerCase();\n                localStorage.setItem(CONSTANTS.HardwareAddresses, newValue);\n            }\n        } else {\n            localStorage.setItem(CONSTANTS.HardwareAddresses, address.toLowerCase());\n        }\n\n    }\n}\n","import { createSlice, PayloadAction, Slice } from '@reduxjs/toolkit'\nimport {  TickerStates } from './interface';\nimport { STATUS } from '../constant';\nimport { CoinKey } from '@loopring-web/component-lib/src/static-resource';\n\nconst initialState:Required<TickerStates>  = {\n    tickerMap:{},\n    status:'UNSET',\n    errorMessage:null,\n}\nconst tickerMapSlice:Slice = createSlice({\n    name: 'tickerMap',\n    initialState,\n    reducers: {\n        getTicker(state, action:PayloadAction<CoinKey<any>>) {\n            state.status = STATUS.PENDING\n        },\n        getTickers(state, action:PayloadAction<Array<CoinKey<any>>>) {\n            state.status = STATUS.PENDING\n        },\n        getTickerStatus(state, action: PayloadAction<TickerStates>) {\n            // @ts-ignore\n            if (action.error) {\n                state.status =  STATUS.ERROR\n                // @ts-ignore\n                state.errorMessage = action.error\n            }\n            state.tickerMap = {...state.tickerMap,...action.payload.tickerMap};\n            state.status = STATUS.DONE\n        },\n        statusUnset: state => {\n            state.status = STATUS.UNSET\n        }\n\n    },\n});\nexport { tickerMapSlice };\nexport const { getTicker,getTickers, getTickerStatus, statusUnset } = tickerMapSlice.actions;","import { useDispatch, useSelector } from 'react-redux'\nimport { userRewardsMapSlice } from './reducer';\nimport { UserRewardsStates } from './interface';\n\nexport function useUserRewards(): UserRewardsStates & {\n    updateUserRewards:()=>void,\n    statusUnset:()=>void,\n} {\n    const userRewardsMap:UserRewardsStates = useSelector((state: any) => state.userRewardsMap)\n    const dispatch = useDispatch();\n\n    const updateUserRewards = () => {\n        dispatch(userRewardsMapSlice.actions.getUserRewards(undefined))\n    }\n    const statusUnset = ()=>{\n        dispatch(userRewardsMapSlice.actions.statusUnset(undefined))\n    }\n    return {\n        ...userRewardsMap,\n        statusUnset,\n        updateUserRewards,\n    }\n\n}\n","import { createSlice, PayloadAction, Slice } from '@reduxjs/toolkit'\nimport { ENV, System, SystemStatus } from './interface';\nimport { STATUS } from '../constant';\n\nconst initialState: SystemStatus = {\n    env: ENV.PROD,\n    chainId: 'unknown',\n    // network:'NONETWORK',\n    baseURL: '',\n    socketURL: '',\n    faitPrices: undefined,\n    gasPrice: undefined,\n    forex: undefined,\n    __timer__: -1,\n    status: 'UNSET',\n    errorMessage: null,\n\n    topics: [],\n}\nconst systemSlice: Slice<SystemStatus> = createSlice({\n    name: 'system',\n    initialState,\n    reducers: {\n\n        updateSystem(state, action: PayloadAction<System<{[key:string]:any}>>) {\n            state.chainId = action.payload.chainId\n            state.status = STATUS.PENDING\n        },\n        updateSocketURL(state, action:PayloadAction<{socketURL:string}>) {\n            state.socketURL =  action.payload.socketURL;\n        },\n        updateRealTimeObj(state, action: PayloadAction<Partial<{ faitPrices: any, gasPrice: number, forex: number }>>) {\n            const {forex, faitPrices, gasPrice} = action.payload;\n            if (forex) {\n                state.forex = forex\n            }\n            if (faitPrices) {\n                state.faitPrices = faitPrices\n            }\n            if (gasPrice) {\n                state.gasPrice = gasPrice\n            }\n\n\n            // state = {\n            //     ...state.system,\n            //     forex: forex?,\n            //     faitPrices: action.payload.faitPrices ? action.payload.faitPrices : state.system.faitPrices,\n            //     gasPrice: action.payload.gasPrice ? action.payload.gasPrice : state.system.gasPrice,\n            // };\n\n        },\n        getSystemStatus(state, action: PayloadAction<Partial<SystemStatus>>) {\n\n            // @ts-ignore\n            if (action.error) {\n                state.status = STATUS.ERROR\n                // @ts-ignore\n                state.errorMessage = action.error\n            }\n            const {env, baseURL, faitPrices, gasPrice, forex, __timer__} = action.payload;\n            if (env) {\n                state.env = env\n            }\n            if (baseURL) {\n                state.baseURL = baseURL\n            }\n            if (faitPrices) {\n                state.faitPrices = faitPrices\n            }\n            if (gasPrice) {\n                state.gasPrice = gasPrice\n            }\n            if (forex) {\n                state.forex = forex\n            }\n            if (__timer__) {\n                state.__timer__ = __timer__\n            }\n            state.status = STATUS.DONE\n        },\n        statusUnset: state => {\n            state.status = STATUS.UNSET\n        }\n\n    },\n});\nexport { systemSlice };\nexport const {updateSystem, setTopics, getSystemStatus, statusUnset, updateRealTimeObj, updateSocketURL} = systemSlice.actions;","import { StateBase } from '../interface';\nimport { ChainId } from 'loopring-sdk';\n\nexport enum ENV {\n    DEV='DEV',\n    UAT='UAT',\n    PROD='PROD',\n}\nexport enum NETWORKEXTEND {\n    NONETWORK = 'unknown'\n}\nexport type NETWORK = NETWORKEXTEND | ChainId\n\n\nexport type System<C extends {[key:string]:any}> = {\n    env:keyof typeof ENV,\n    chainId: 1|5|'unknown'\n    // network: keyof typeof NETWORK,\n    socketURL:string,\n    baseURL: string,\n    faitPrices:{ [k in keyof C]:{price:any,[key:string]:any}} | undefined,\n    gasPrice:number | undefined,\n    forex:number | undefined,\n\n\n}\n\nexport type SystemStatus = System<{[key:string]:any}> & {\n    // system:System | {}\n    __timer__:NodeJS.Timeout | -1\n    topics: any[]\n}  & StateBase\n\n\n\n","import { createSlice, PayloadAction, Slice } from '@reduxjs/toolkit'\nimport { WalletLayer1Map, WalletLayer1States } from './interface';\nimport { STATUS } from '../constant';\n\n\nconst initialState:WalletLayer1States  = {\n    walletLayer1:undefined,\n    status:'UNSET',\n    errorMessage:null,\n}\nconst walletLayer1Slice:Slice = createSlice({\n    name: 'walletLayer1S',\n    initialState,\n    reducers: {\n        updateWalletLayer1(state, action:PayloadAction<string | undefined>) {\n            state.status = STATUS.PENDING\n        },\n        reset(state, action:PayloadAction<string | undefined>) {\n            state.walletLayer1 = undefined;\n            state.status = STATUS.UNSET;\n        },\n        getWalletLayer1Status(state, action: PayloadAction<{ walletLayer1:WalletLayer1Map<object> }>) {\n            // @ts-ignore\n            if (action.error) {\n                state.status =  STATUS.ERROR\n                // @ts-ignore\n                state.errorMessage = action.error\n            }\n            state.walletLayer1 = {...action.payload.walletLayer1};\n            state.status = STATUS.DONE\n        },\n        statusUnset: state => {\n            state.status = STATUS.UNSET\n        }\n    },\n});\nexport { walletLayer1Slice };\nexport const { updateWalletLayer1, getWalletLayer1Status,statusUnset,reset } = walletLayer1Slice.actions\n","import { createSlice, PayloadAction, Slice } from '@reduxjs/toolkit'\nimport { WalletLayer2Map, WalletLayer2States } from './interface';\nimport { STATUS } from '../constant';\n\n\nconst initialState:WalletLayer2States  = {\n    walletLayer2:undefined,\n    status:'UNSET',\n    errorMessage:null,\n}\nconst walletLayer2Slice:Slice = createSlice({\n    name: 'walletLayer2S',\n    initialState,\n    reducers: {\n        updateWalletLayer2(state, action:PayloadAction<string | undefined>) {\n            state.status = STATUS.PENDING\n        },\n        reset(state, action:PayloadAction<string | undefined>) {\n            state.walletLayer2 = undefined;\n            state.status = STATUS.UNSET;\n        },\n        getWalletLayer2Status(state, action: PayloadAction<{ walletLayer2:WalletLayer2Map<object> }>) {\n            // @ts-ignore\n            if (action.error) {\n                state.status =  STATUS.ERROR\n                // @ts-ignore\n                state.errorMessage = action.error\n            }\n            state.walletLayer2 = {...action.payload.walletLayer2};\n            state.status = STATUS.DONE\n        },\n        statusUnset: state => {\n            state.status = STATUS.UNSET\n        }\n    },\n});\nexport { walletLayer2Slice };\nexport const {  updateWalletLayer2,getWalletLayer2Status,statusUnset,reset } = walletLayer2Slice.actions\n","import { createSlice, PayloadAction, Slice } from '@reduxjs/toolkit'\nimport {  UserRewardsStates } from './interface';\nimport { STATUS } from '../constant';\n\nconst initialState:UserRewardsStates = {\n    userRewardsMap:undefined,\n    status:'UNSET',\n    errorMessage:null,\n    __timer__:-1,\n}\nconst userRewardsMapSlice:Slice<UserRewardsStates> = createSlice({\n    name: 'userRewardsMap',\n    initialState,\n    reducers: {\n        getUserRewards(state, action:PayloadAction<undefined>) {\n            state.status = STATUS.PENDING\n        },\n        getUserRewardsStatus(state, action: PayloadAction<UserRewardsStates>) {\n            // @ts-ignore\n            if (action.error) {\n                state.status =  STATUS.ERROR\n                // @ts-ignore\n                state.errorMessage = action.error\n            }\n            state.userRewardsMap = {...state.userRewardsMap,...action.payload.userRewardsMap};\n            if(action.payload.__timer__){\n                state.__timer__  =  action.payload.__timer__\n            }\n            state.status = STATUS.DONE\n        },\n        statusUnset: state => {\n            state.status = STATUS.UNSET\n        }\n\n    },\n});\nexport { userRewardsMapSlice };\nexport const { getUserRewards, getUserRewardsStatus, statusUnset } = userRewardsMapSlice.actions;","import { createSlice, PayloadAction, Slice } from '@reduxjs/toolkit'\nimport { AmmActivityMapStates } from './interface';\nimport { STATUS } from '../../constant';\n\n\nconst initialState:Required<AmmActivityMapStates>  = {\n    ammActivityMap:{},\n    status:'UNSET',\n    errorMessage:null,\n}\nconst ammActivityMapSlice:Slice = createSlice({\n    name: 'ammActivityMap',\n    initialState,\n    reducers: {\n        getAmmActivityMap(state, action:PayloadAction<string | undefined>) {\n            state.status = STATUS.PENDING\n        },\n        getAmmActivityMapStatus(state, action: PayloadAction<AmmActivityMapStates>) {\n            // @ts-ignore\n            if (action.error) {\n                state.status =  STATUS.ERROR\n                // @ts-ignore\n                state.errorMessage = action.error\n            }\n            state.ammActivityMap = {...action.payload.ammActivityMap};\n            state.status = STATUS.DONE\n        },\n        statusUnset: state => {\n            state.status = STATUS.UNSET\n        }\n\n    },\n});\nexport { ammActivityMapSlice };\nexport const { getAmmActivityMap, getAmmActivityMapStatus, statusUnset } = ammActivityMapSlice.actions\n","import { createSlice, PayloadAction, Slice } from '@reduxjs/toolkit'\nimport { GetTokenMapParams, TokenMapStates } from './interface';\nimport { STATUS } from '../constant';\n\nconst initialState: TokenMapStates<object> = {\n    coinMap: {},\n    addressIndex: undefined,\n    tokenMap: undefined,\n    marketMap: undefined,\n    idIndex: undefined,\n    status: 'UNSET',\n    errorMessage: null,\n}\nconst tokenMapSlice: Slice<TokenMapStates<object>> = createSlice({\n    name: 'tokenMap',\n    initialState,\n    reducers: {\n        getTokenMap(state, action: PayloadAction<GetTokenMapParams<any>>) {\n            state.status = STATUS.PENDING\n        },\n        getTokenMapStatus(state, action: PayloadAction<TokenMapStates<object>>) {\n            // @ts-ignore      console.log(action.type)\n            if (action.error) {\n                state.status = STATUS.ERROR\n                // @ts-ignore\n                state.errorMessage = action.error\n            }\n\n            const {tokenMap, marketMap, addressIndex, idIndex, coinMap, marketArray, marketCoins} = action.payload;\n            if (tokenMap) { state.tokenMap = tokenMap }\n            if (marketMap) { state.marketMap = marketMap }\n            if (addressIndex) { state.addressIndex = addressIndex }\n            if (idIndex) { state.idIndex = idIndex }\n            if (coinMap) { state.coinMap = coinMap }\n            if (marketArray) { state.marketArray = marketArray }\n            if (marketCoins)  { state.marketCoins = marketCoins }\n            // if (tokenPairsMap) {state.tokenPairsMap = tokenPairsMap }\n            state.status = STATUS.DONE;\n        },\n        // getTokenPairMap(state, action: PayloadAction<{tokenPairs: TokenPairs }>) {\n        //     const {tokenPairs} = action.payload;\n        //     const tokenPairsMap =  Reflect.ownKeys(tokenPairs).reduce((prev,key)=>{\n        //         // @ts-ignore\n        //         return prev[key as string] =  tokenPairs[key as string].tokenList\n        //     }, {} )\n        //     if (tokenPairsMap) {state.tokenPairsMap = tokenPairsMap }\n        //     // state.status = STATUS.PENDING\n        // },\n        statusUnset: state => {\n            state.status = STATUS.UNSET\n        }\n\n    },\n});\nexport { tokenMapSlice };\nexport const {getTokenMap, getTokenMapStatus,getTokenPairMap, statusUnset} = tokenMapSlice.actions;","import { useDispatch, useSelector } from 'react-redux'\nimport { systemSlice } from './reducer';\nimport { System, SystemStatus } from './interface';\n\nexport function useSystem(): SystemStatus & {\n    updateSystem:(system:Partial<System< {[key:string]:any}>>)=>void,\n    statusUnset:()=>void,\n} {\n    const system:SystemStatus = useSelector((state: any) => state.system)\n    const dispatch = useDispatch();\n    const updateSystem = (system:Partial<System<{[key:string]:any}>>) => {\n        dispatch(systemSlice.actions.updateSystem(system))\n    }\n    const statusUnset = ()=>{\n        dispatch(systemSlice.actions.statusUnset(undefined))\n    }\n    return {\n        ...system,\n        statusUnset,\n        updateSystem,\n    }\n\n}\n","import { useDispatch, useSelector } from 'react-redux'\nimport { AmmActivityMapStates } from './interface';\nimport { ammActivityMapSlice } from './reducer';\n\nexport function useAmmActivityMap(): AmmActivityMapStates & {\n    updateAmmActivityMap:()=> void,\n    statusUnset:()=> void,\n} {\n    const ammActivityMap:AmmActivityMapStates = useSelector((state: any) => state.amm.ammActivityMap)\n    const dispatch = useDispatch();\n    const updateAmmActivityMap = () => {\n        dispatch(ammActivityMapSlice.actions.getAmmActivityMap(undefined))\n    }\n    const statusUnset = ()=>{\n        dispatch(ammActivityMapSlice.actions.statusUnset(undefined))\n    }\n    return {\n        ...ammActivityMap,\n        statusUnset,\n        updateAmmActivityMap\n    }\n\n}\n","import { useDispatch, useSelector } from 'react-redux'\nimport { StateBase } from '../interface';\nimport { socketSlice } from './reducer';\n\nexport function useSocket(): StateBase & {\n    // socketStart:()=>void,\n    statusUnset:()=>void,\n    sendNewMessage:(socket: { [ key: string]:string[] })=>void,\n    socketEnd:()=>void\n}\n{\n    const socket:StateBase & {socket: { [ key: string]:string[] }} = useSelector((state: any) => state.socket)\n    const dispatch = useDispatch();\n    // const socketStart = () => {\n    //     dispatch(socketSlice.actions.socketStart(undefined))\n    // }\n    const sendNewMessage = (socket: { [ key: string]:string[] }) => {\n        dispatch(socketSlice.actions.sendNewMessage(socket))\n    }\n    const socketEnd = () => {\n        dispatch(socketSlice.actions.socketEnd(undefined))\n    }\n    const statusUnset = ()=>{\n        dispatch(socketSlice.actions.statusUnset(undefined))\n    }\n    return {\n        ...socket,\n        statusUnset,\n        // socketStart,\n        sendNewMessage,\n        socketEnd,\n    }\n\n}\n","export enum AccountStatus {\n    UNKNOWN = 'UNKNOWN',\n    UNCONNNECTED = 'UNCONNNECTED',\n    CONNECTED = 'CONNECTED',\n    NOACCOUNT = 'NOACCOUNT',\n    DEPOSITING = 'DEPOSITING',\n    DEPOSIT_TO_CONFIREM = 'DEPOSIT_TO_CONFIREM',\n    UNACTIVATED = 'UNACTIVATED',\n    ARPROVING = 'ARPROVING',\n    APPROV_TO_CONFIRM = 'APPROV_TO_CONFIRM',\n    LOCKED = 'LOCKED',\n    ACTIVATED = 'ACTIVATED',\n}\n\nexport enum StatusChangeEvent {\n    Reset = 'Reset',\n    Connecting = 'Connecting',\n    HasPubkey = 'HasPubkey',\n    HasNoPubkey = 'HasNoPubkey',\n    ErrorResponse = 'ErrorResponse',\n    FinishDeposit = 'FinishDeposit',\n    DepositConfirmed = 'DepositConfirmed',\n    IsSmartWallet = 'IsSmartWallet',\n    ApproveSubmit = 'ApproveSubmit',\n    ApproveConfirmed = 'ApproveConfirmed',\n    Unlock = 'Unlock',\n    Lock = 'Lock',\n}\n\nexport const AccountMachineSpec = (initialState: AccountStatus = AccountStatus.UNCONNNECTED) => \n{\n    return {\n        initialState: initialState,\n        states: {\n            UNCONNNECTED: {\n                Connecting: AccountStatus.CONNECTED,\n                Reset: AccountStatus.UNCONNNECTED,\n            },\n            CONNECTED: {\n                HasPubkey: AccountStatus.LOCKED,\n                HasNoPubkey: AccountStatus.UNACTIVATED,\n                ErrorResponse: AccountStatus.NOACCOUNT,\n                Reset: AccountStatus.UNCONNNECTED,\n            },\n            NOACCOUNT: {\n                ErrorResponse: AccountStatus.NOACCOUNT,\n                Reset: AccountStatus.UNCONNNECTED,\n            },\n            DEPOSITING: {\n                FinishDeposit: AccountStatus.DEPOSIT_TO_CONFIREM,\n                Reset: AccountStatus.UNCONNNECTED,\n            },\n            DEPOSIT_TO_CONFIREM: {\n                HasPubkey: AccountStatus.ACTIVATED,\n                HasNoPubkey: AccountStatus.DEPOSIT_TO_CONFIREM,\n                ErrorResponse: AccountStatus.DEPOSIT_TO_CONFIREM,\n                Reset: AccountStatus.UNCONNNECTED,\n            },\n            UNACTIVATED: {\n                IsSmartWallet: AccountStatus.ARPROVING,\n                Reset: AccountStatus.UNCONNNECTED,\n            },\n            ARPROVING: {\n                ApproveSubmit: AccountStatus.APPROV_TO_CONFIRM,\n                Reset: AccountStatus.UNCONNNECTED,\n            },\n            APPROV_TO_CONFIRM: {\n                ApproveConfirmed: AccountStatus.ACTIVATED,\n                Reset: AccountStatus.UNCONNNECTED,\n            },\n            LOCKED: {\n                Unlock: AccountStatus.ACTIVATED,\n                Reset: AccountStatus.UNCONNNECTED,\n            },\n            ACTIVATED: {\n                Lock: AccountStatus.LOCKED,\n                Reset: AccountStatus.UNCONNNECTED,\n            },\n        },\n    }\n}\n","import { Contract } from '@ethersproject/contracts'\nimport { getAddress } from '@ethersproject/address'\nimport { AddressZero } from '@ethersproject/constants'\nimport { BigNumber } from '@ethersproject/bignumber'\n\nimport { JsonRpcSigner, Web3Provider } from '@ethersproject/providers'\n\nimport { UnsupportedChainIdError } from '@web3-react/core'\n\nimport {\n  NoEthereumProviderError,\n  UserRejectedRequestError as UserRejectedRequestErrorInjected\n} from '@web3-react/injected-connector'\nimport { UserRejectedRequestError as UserRejectedRequestErrorWalletConnect } from '@web3-react/walletconnect-connector'\n\nimport { ChainId } from 'loopring-sdk'\n\nexport function getLibrary(provider: any): Web3Provider {\n  const library = new Web3Provider(provider)\n  library.pollingInterval = 10000\n  return library\n}\n\nexport function getErrorMessage(error: Error) {\n  if (error instanceof NoEthereumProviderError) {\n    return 'No Ethereum browser extension detected, install MetaMask on desktop or visit from a dApp browser on mobile.'\n  } else if (error instanceof UnsupportedChainIdError) {\n    return 'You\\'re connected to an unsupported network.'\n  } else if (\n    error instanceof UserRejectedRequestErrorInjected ||\n    error instanceof UserRejectedRequestErrorWalletConnect\n  ) {\n    return 'Please authorize this website to access your Ethereum account.'\n  } else {\n    console.error(error)\n    return 'An unknown error occurred. Check the console for more details.'\n  }\n}\n\nexport function transactionChecker(web3: any, address: string) {\n  const account = address.toLowerCase()\n\n  const subscription = web3.eth.subscribe('pendingTransactions', (err: any, res: any) => {\n    if (err) {\n      console.error(err)\n    }\n  })\n\n  return function watchTransactions() {\n    console.log('Watch Transactions...')\n    subscription.on('data', (txHash: any) => {\n      setTimeout(async () => {\n        try {\n          let tx = await web3.eth.getTransaction(txHash)\n          if (tx.to && tx.to.toLowerCase() === account) {\n            const value = web3.utils.fromWei(tx.value, 'ether')\n            if (value > 0) {\n              console.log('watchTransactions value:', value)\n            }\n          }\n        } catch (err) {\n          console.error(err)\n        }\n      }, 60 * 1000)\n    })\n  }\n}\n\n// returns the checksummed address if the address is valid, otherwise returns false\nexport function isAddress(value: any): string | false {\n  try {\n    return getAddress(value)\n  } catch {\n    return false\n  }\n}\n\nconst ETHERSCAN_PREFIXES: { [chainId in ChainId]: string } = {\n  1: '',\n  5: 'goerli.',\n}\n\nexport function getEtherscanLink(\n  chainId: ChainId,\n  data: string,\n  type: 'transaction' | 'token' | 'address' | 'block'\n): string {\n  const prefix = `https://${ETHERSCAN_PREFIXES[chainId] || ETHERSCAN_PREFIXES[1]}etherscan.io`\n\n  switch (type) {\n    case 'transaction': {\n      return `${prefix}/tx/${data}`\n    }\n    case 'token': {\n      return `${prefix}/token/${data}`\n    }\n    case 'block': {\n      return `${prefix}/block/${data}`\n    }\n    case 'address':\n    default: {\n      return `${prefix}/address/${data}`\n    }\n  }\n}\n\n// shorten the checksummed version of the input address to have 0x + 4 characters at start and end\nexport function shortenAddress(address: string, chars = 4): string {\n  const parsed = isAddress(address)\n  if (!parsed) {\n    throw Error(`Invalid 'address' parameter '${address}'.`)\n  }\n  return `${parsed.substring(0, chars + 2)}...${parsed.substring(42 - chars)}`\n}\n\n// add 10%\nexport function calculateGasMargin(value: BigNumber): BigNumber {\n  return value.mul(BigNumber.from(10000).add(BigNumber.from(1000))).div(BigNumber.from(10000))\n}\n\n// account is not optional\nexport function getSigner(library: Web3Provider, account: string): JsonRpcSigner {\n  return library.getSigner(account).connectUnchecked()\n}\n\n// account is optional\nexport function getProviderOrSigner(library: Web3Provider, account?: string): Web3Provider | JsonRpcSigner {\n  return account ? getSigner(library, account) : library\n}\n\n// account is optional\nexport function getContract(address: string, ABI: any, library: Web3Provider, account?: string): Contract {\n  if (!isAddress(address) || address === AddressZero) {\n    throw Error(`Invalid 'address' parameter '${address}'.`)\n  }\n\n  return new Contract(address, ABI, getProviderOrSigner(library, account) as any)\n}\n\nexport function escapeRegExp(string: string): string {\n  return string.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&') // $& means the whole matched string\n}\n\nexport async function isContract(web3: any, address: string) {\n  const code = await web3.eth.getCode(address)\n  return code && code.length > 2\n}\n\nexport function getShortAddr(address: string) {\n    if (!address || address === undefined || address === null || address.trim() === '') {\n        console.log('getShortAddr got empty!')\n        return undefined\n    }\n    const convertAddr = address.substr(0, 6) + '...' + address.substr(address.length - 4)\n    return convertAddr\n}\n","import { debounce } from 'lodash'\nimport React, { useEffect } from 'react'\nimport { UserStorage } from 'storage'\n\nimport { useCheckAccStatus, } from 'stores/account/hook'\n\nimport { \n  useUpdateChainId,\n  useUpdateExchangeInfo, \n  useUpdateExchangeMarkets, \n  useUpdateTokens, \n  useUpdateAmmPoolConf,\n  useUpdateAmmActivityRules,\n  useUpdateAmmPoolStats,\n} from 'stores/trading/hook'\n\nenum WindowEvent {\n  Click = 'click',\n  Scroll = 'scroll',\n  Mouseover = 'mouseover',\n}\n\nconst events = [WindowEvent.Click, WindowEvent.Scroll]\n\nconst forceReset = debounce(() => { UserStorage.checkTimeout(true) }, 100)\n\nexport const GlobalProvider = ({ children }: { children: React.ReactNode }) => {\n\n  useUpdateExchangeInfo()\n  useUpdateExchangeMarkets()\n  useUpdateTokens()\n  useUpdateAmmPoolConf()\n  useUpdateAmmActivityRules()\n  useUpdateAmmPoolStats()\n  useUpdateChainId()\n\n  useCheckAccStatus()\n\n  useEffect(() => {\n\n    events.forEach((event: string) => {\n      document.addEventListener(event, forceReset)\n    })\n\n    return () => {\n\n      events.forEach((event: string) => {\n        document.removeEventListener(event, forceReset)\n      })\n    }\n\n  }, [])\n\n  return (\n    <React.Fragment>\n      { children}\n    </React.Fragment>\n  )\n\n}\n","import React, { useState, useEffect } from 'react'\nimport styled from '@emotion/styled/macro'\nimport { useTranslation } from 'react-i18next'\n\nimport { useWeb3React } from '@web3-react/core'\n\nimport { network } from 'networks/web3_connectors'\n\nimport { useEagerConnect, useInactiveListener } from 'hooks/web3/useWeb3'\nimport { reset, setAccountStatus } from 'stores/account/reducer'\n\nimport { ChainId, NetworkContextName } from 'loopring-sdk'\n\n// import Loader from 'components/modals/Loader'\nimport { useDispatch } from 'react-redux'\nimport { AccountStatus } from 'state_machine/account_machine_spec'\n\nconst MessageWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  height: 20rem;\n`\n\nconst Message = styled.h2`\n  color: ${({ theme }) => theme.colorBase.error};\n`\n\nexport function Web3ReactManager({ children }: { children: JSX.Element }) {\n  const { t } = useTranslation()\n  const { active } = useWeb3React()\n  const { active: networkActive, error: networkError, activate: activateNetwork } = useWeb3React(NetworkContextName)\n\n  // try to eagerly connect to an injected provider, if it exists and has granted access already\n  const triedEager = useEagerConnect()\n\n  // after eagerly trying injected, if the network connect ever isn't active or in an error state, activate itd\n  useEffect(() => {\n    if (triedEager && !networkActive && !networkError && !active) {\n      activateNetwork(network)\n    }\n  }, [triedEager, networkActive, networkError, activateNetwork, active])\n\n  // when there's no account connected, react to logins (broadly speaking) on the injected provider, if it exists\n  \n  const dispatch = useDispatch()\n\n  const onReConnectInjected = () => {\n    console.log('onReConnectInjected')\n    dispatch(reset(undefined))\n    dispatch(setAccountStatus(AccountStatus.UNCONNNECTED))\n  }\n  \n  useInactiveListener(onReConnectInjected, !triedEager)\n\n  // handle delayed loader state\n  const [showLoader, setShowLoader] = useState(false)\n  useEffect(() => {\n    const timeout = setTimeout(() => {\n      setShowLoader(true)\n    }, 600)\n\n    return () => {\n      clearTimeout(timeout)\n    }\n  }, [])\n\n  // on page load, do nothing until we've tried to connect to the injected connector\n  if (!triedEager) {\n    return null\n  }\n\n  // if the account context isn't active, and there's an error on the network context, it's an irrecoverable error\n  if (!active && networkError) {\n    return (\n      <MessageWrapper>\n        <Message>{t('unknownError')}</Message>\n      </MessageWrapper>\n    )\n  }\n\n  // if neither context is active, spin\n  if (!active && !networkActive) {\n    return showLoader ? (\n      <MessageWrapper>\n        {/*<Loader />*/}\n      </MessageWrapper>\n    ) : null\n  }\n\n  return children\n}\n","import React from 'react'\n\nexport const DevWrapper = ({ children }: { children: React.ReactNode }) => {\n\n  return (\n    <React.Fragment>\n      {\n        process.env.NODE_ENV !== 'production' ? (\n          <>\n          {children}\n          </>\n        ) : null\n      }\n    </React.Fragment>\n  )\n\n}\n\n","import { Subject } from 'rxjs';\nimport { TradeFloat } from '@loopring-web/component-lib/src/static-resource';\n\nconst subject = new Subject();\n\nexport type TickerMap<R> = {\n    [key in keyof R]:TradeFloat\n}\n// <R extends {[key:string]:any}>\n\nexport const tickerService = {\n    sendTicker: (tickerMap:TickerMap<{[key:string]:any}>) => subject.next({ tickerMap: tickerMap }),\n    // clearMessages: () => subject.next(),\n    onSocket: () => subject.asObservable()\n};","import { useDispatch, useSelector } from 'react-redux'\nimport { tickerMapSlice } from './reducer';\nimport { TickerStates } from './interface';\nimport { CoinKey } from '@loopring-web/component-lib/src/static-resource';\n\nexport function useTicker(): TickerStates & {\n    updateTickers:(tickerKeys:Array<CoinKey<any>>)=>void,\n    updateTicker:(tickerKey:CoinKey<any>)=>void,\n    statusUnset:()=>void,\n} {\n    const tickerMap:TickerStates = useSelector((state: any) => state.tickerMap)\n    const dispatch = useDispatch();\n    const updateTicker = (tickerKey:CoinKey<any>) => {\n        dispatch(tickerMapSlice.actions.getTicker({tickerKey}))\n    }\n    const updateTickers = (tickerKeys:Array<CoinKey<any>>) => {\n        dispatch(tickerMapSlice.actions.getTickers({tickerKeys}))\n    }\n    const statusUnset = ()=>{\n        dispatch(tickerMapSlice.actions.statusUnset(undefined))\n    }\n    return {\n        ...tickerMap,\n        statusUnset,\n        updateTickers,\n        updateTicker,\n    }\n\n}\n","import { createAction } from '@reduxjs/toolkit'\n\n// fired once when the app reloads but before the app renders\n// allows any updates to be applied to store data loaded from localStorage\nexport const updateVersion = createAction<void>('global/updateVersion')\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit'\n\nconst now = () => new Date().getTime()\n\nexport interface SerializableTransactionReceipt {\n  to: string\n  from: string\n  contractAddress: string\n  transactionIndex: number\n  blockHash: string\n  transactionHash: string\n  blockNumber: number\n  status?: number\n}\n\nexport interface TransactionDetails {\n  hash: string\n  approval?: { tokenAddress: string; spender: string }\n  summary?: string\n  claim?: { recipient: string }\n  receipt?: SerializableTransactionReceipt\n  lastCheckedBlockNumber?: number\n  addedTime: number\n  confirmedTime?: number\n  from: string\n}\n\nexport interface TransactionState {\n  [chainId: number]: {\n    [txHash: string]: TransactionDetails\n  }\n}\n\nexport const initialState: TransactionState = {}\n\nconst transactionsSlice = createSlice({\n  name: 'transactions',\n  initialState,\n  reducers: {\n    reset(state) {\n      Object.assign(state, initialState)\n    },\n    addTransaction(state: TransactionState, action: PayloadAction<{\n      chainId: number, from: string,\n      hash: string, approval: any, summary: string, claim: any\n    }>) {\n      const { chainId, from, hash, approval, summary, claim} = action.payload\n      if (state[chainId]?.[hash]) {\n        throw Error('the existing TX can\\'t be added again')\n      }\n\n      const txs = state[chainId] ?? {}\n      txs[hash] = {\n        hash, \n        approval, \n        summary, \n        claim, \n        from,\n        addedTime: now(), \n      }\n      // state[chainId] = txs\n    },\n    clearAllTransactions(state: TransactionState, action: PayloadAction<number>) {\n      const chainId = action.payload\n      if (!state[chainId]) return\n      state[chainId] = {}\n    },\n    checkedTransaction(state: TransactionState, action: PayloadAction<{chainId: number,\n    hash: string, blockNumber: number}>) {\n      const { chainId, hash, blockNumber} = action.payload\n      const tx = state[chainId]?.[hash]\n      if (!tx) {\n        return\n      }\n      if (!tx.lastCheckedBlockNumber) {\n        tx.lastCheckedBlockNumber = blockNumber\n      } else {\n        tx.lastCheckedBlockNumber = Math.max(blockNumber, tx.lastCheckedBlockNumber)\n      }\n      // state[chainId][hash] = tx\n    },\n    finalizeTransaction(state: TransactionState, action: PayloadAction<{\n      hash: string, chainId: number, receipt: any\n    }>) {\n      const { chainId, hash, receipt } = action.payload\n      \n      const tx = state[chainId]?.[hash]\n      if (!tx) {\n        return\n      }\n      tx.receipt = receipt\n      tx.confirmedTime = now()\n    }\n  }\n}\n)\n\nexport const { reset, addTransaction, clearAllTransactions, checkedTransaction, finalizeTransaction, } = transactionsSlice.actions\nexport default transactionsSlice\n","import { createSlice, PayloadAction, Slice } from '@reduxjs/toolkit'\nimport {  AmmTradesStates } from './interface';\nimport { STATUS } from '../../constant';\n\n\nconst initialState:Required<AmmTradesStates>  = {\n    ammTrades:[],\n    status:'UNSET',\n    errorMessage:null,\n}\nconst ammTradesSlice:Slice = createSlice({\n    name: 'ammTrades',\n    initialState,\n    reducers: {\n        getAmmTrades(state, action:PayloadAction<string | undefined>) {\n            state.status = STATUS.PENDING\n        },\n        getAmmTradesStatus(state, action: PayloadAction<AmmTradesStates>) {\n            // @ts-ignore\n            if (action.error) {\n                state.status =  STATUS.ERROR\n                // @ts-ignore\n                state.errorMessage = action.error\n            }\n            state.ammTrades = {...action.payload.ammTrades};\n            state.status = STATUS.DONE\n        },\n        statusUnset: state => {\n            state.status = STATUS.UNSET\n        }\n    },\n});\nexport { ammTradesSlice };\nexport const { getAmmTrades, getAmmTradesStatus, statusUnset } = ammTradesSlice.actions\n","import { all, takeLatest, call, put } from \"redux-saga/effects\"\nimport { getAmmActivityMap, getAmmActivityMapStatus } from './reducer'\nimport { LoopringAPI } from '../../apis/api';\nconst getAmmActivityMapApi = async () => {\n\n    if(LoopringAPI.ammpoolAPI){\n        const { groupByRuleTypeAndStatus } =  await LoopringAPI.ammpoolAPI.getAmmPoolActivityRules();\n        return  {data:groupByRuleTypeAndStatus}\n    }else{\n        return {data:undefined}\n    }\n\n}\n\nexport function* getPostsSaga() {\n    try {\n        //\n        const { data } = yield call(getAmmActivityMapApi);\n        yield put(getAmmActivityMapStatus({ammActivityMap:data}));\n    } catch (err) {\n        yield put(getAmmActivityMapStatus(err));\n    }\n}\n\nexport default function* ammActivityMapSaga() {\n    yield all([takeLatest(getAmmActivityMap, getPostsSaga)]);\n}\n","import { all, call, fork, put, takeLatest } from \"redux-saga/effects\";\nimport { getAmmMap, getAmmMapStatus, updateRealTimeAmmMap } from './reducer';\nimport { AmmDetail } from '@loopring-web/component-lib/src/static-resource';\nimport store from '../../index';\nimport { AmmPoolInfoV3, AmmPoolStat, toBig, TokenVolumeV3, } from \"loopring-sdk\";\nimport { ammpoolAPI } from \"stores/apis/api\";\nimport { PayloadAction } from '@reduxjs/toolkit';\nimport { AmmDetailStore, GetAmmMapParams } from './interface';\nimport { volumeToCount, volumeToCountAsBigNumber } from '../../../hooks/help/volumeToCount';\n\ntype AmmMap<R extends { [ key: string ]: any }> = { [ key: string ]: AmmDetail<R> } | {}  //key is AMM-XXX-XXX\nexport const setAmmState = ({ammPoolState, keyPair}: { ammPoolState: AmmPoolStat, keyPair: string }) => {\n    const {idIndex} = store.getState().tokenMap\n    // @ts-ignore\n    const [, coinA, coinB] = keyPair.match(/(\\w+)-(\\w+)/i);\n    const {forex,faitPrices} = store.getState().system;\n    if (idIndex && coinA && coinB && faitPrices && forex) {\n        let result =  {\n            amountDollar: parseFloat(ammPoolState.liquidityUSD),\n            amountYuan: (parseFloat(ammPoolState.liquidityUSD) / (forex ? forex : 6.5)),\n            totalLPToken: volumeToCount('LP-' + keyPair, ammPoolState.lpLiquidity),\n            totalA: volumeToCount(coinA, ammPoolState.liquidity[ 0 ]),//parseInt(ammPoolState.liquidity[ 0 ]),\n            totalB: volumeToCount(coinB, ammPoolState.liquidity[ 1 ]),//parseInt(ammPoolState.liquidity[ 1 ]),\n            rewardValue: ammPoolState.rewards[ 0 ] ? volumeToCount(idIndex[ ammPoolState.rewards[ 0 ].tokenId as number ], ammPoolState.rewards[ 0 ].volume) : undefined,\n            rewardToken: ammPoolState.rewards[ 0 ] ? idIndex[ ammPoolState.rewards[ 0 ].tokenId as number ] : undefined,\n            rewardValue2: ammPoolState.rewards[ 1 ] ? volumeToCount(idIndex[ ammPoolState.rewards[ 1 ].tokenId as number ], ammPoolState.rewards[ 1 ].volume) : undefined,\n            rewardToken2: ammPoolState.rewards[ 1 ] ? idIndex[ ammPoolState.rewards[ 1 ].tokenId as number ] : undefined,\n        }\n\n        const feeA =  volumeToCountAsBigNumber(coinA, ammPoolState.fees[ 0 ]);//parseInt(ammPoolState.fees[ 0 ]),\n        const feeB = volumeToCountAsBigNumber(coinB, ammPoolState.fees[ 1 ]);//parseInt(ammPoolState.fees[ 1 ]),\n        const feeDollar = toBig(feeA||0).times(faitPrices[coinA].price).plus(toBig(feeB||0).times(faitPrices[coinB].price))\n        const feeYuan = feeDollar.times(forex);\n\n        return {\n             ...result,\n            feeA:feeA?.toNumber(),\n            feeB:feeB?.toNumber(),\n            feeDollar:feeDollar.toNumber(),\n            feeYuan:feeYuan.toNumber(),\n            tradeFloat: {\n                percent: '',\n                timeUnit: '24h',\n                // priceYuan: 100,\n                // priceDollar: 1.23123,\n                // floatTag: FloatTag.increase,\n                // reward: 12312,\n                APY: (parseInt(ammPoolState.apyBips) * 1.0 / 100)\n            },\n            APY: (parseInt(ammPoolState.apyBips) * 1.0 / 100)\n        }\n\n\n    }\n}\nconst getAmmMapApi = async <R extends { [ key: string ]: any }>({ammpools}: GetAmmMapParams) => {\n\n    let ammMap: AmmMap<R> = {}\n    const {ammPoolStats} = (await ammpoolAPI().getAmmPoolStats());\n\n    let {__timer__} = store.getState().amm.ammMap\n    __timer__ = (() => {\n        if (__timer__ && __timer__ !== -1) {\n            clearInterval(__timer__)\n        }\n        return setInterval(async () => {\n            let ammPoolStats: { [key in keyof R]: AmmPoolStat } = (await ammpoolAPI().getAmmPoolStats()).ammPoolStats as { [key in keyof R]: AmmPoolStat }\n            store.dispatch(updateRealTimeAmmMap({ammPoolStats}))\n        }, 900000)    //15*60*1000 //900000\n    })()\n    const {tokenMap: {coinMap, idIndex}} = store.getState();\n\n    // const forex = faitPrices.prices['USDC']\n\n\n    Reflect.ownKeys(ammpools).forEach(async (key) => {\n        const item: AmmPoolInfoV3 = ammpools[ key as string ]\n        if (item.market === key && item.tokens.pooled && idIndex) {\n\n            // const tokenA =  ; //getTokenInfoById(tokens.tokenIdMap, parseInt(item.tokens.pooled[0]))\n            // const tokenB =  ; // getTokenInfoById(tokens.tokenIdMap, parseInt(item.tokens.pooled[1]))\n            const coinA = idIndex[ item.tokens.pooled[ 0 ] as any ];\n            const coinB = idIndex[ item.tokens.pooled[ 1 ] as any ];\n            const dataItem: AmmDetailStore<R> = {\n                coinA: coinA,\n                coinB: coinB,\n                isNew: Date.now() - (Number(item.createdAt)) > 3 * 86400 * 1000 ? false : true,//3*24*60*60*1000,\n                isActivity: item.status === 7 ? true : false,\n                address: item.address,\n                ...setAmmState({ammPoolState: ammPoolStats[ key ], keyPair: `${coinA}-${coinB}`}),\n                __rawConfig__: item\n            } as AmmDetailStore<R>\n            // @ts-ignore\n            ammMap[ item.market ] = dataItem\n\n\n        }\n\n\n    })\n    return {ammMap, __timer__}\n}\n\n\nexport function* getPostsSaga({payload}: PayloadAction<GetAmmMapParams>) {\n    try {\n        const {ammpools} = payload;\n        const {ammMap, __timer__} = yield call(getAmmMapApi, {ammpools});\n        console.log('--- getPostsSaga:', ammMap)\n        yield put(getAmmMapStatus({ammMap, __timer__}));\n    } catch (err) {\n        yield put(getAmmMapStatus(err));\n    }\n}\n\nexport function* updateRealTimeSaga({payload}: any) {\n    try {\n        const {ammPoolStats} = payload;\n        let {ammMap}: { ammMap: AmmMap<object> } = store.getState().amm.ammMap;\n        if (ammPoolStats) {\n            //{ ammPoolStats?: { [ key: string ]: AmmPoolStat } }\n            Reflect.ownKeys(ammPoolStats).map((key) => {\n                const keyPair = (key as string).replace('AMM-', '')\n                // debugger\n                // @ts-ignore\n                ammMap[ key ] = {\n                    // @ts-ignore\n                    ...ammMap[ key ],\n                    ...setAmmState({ammPoolState: ammPoolStats[ key as string ], keyPair, })\n                }\n                return ammMap\n            })\n        }\n        yield put(getAmmMapStatus({ammMap}));\n    } catch (err) {\n        yield put(getAmmMapStatus(err));\n    }\n}\n\n\nexport function* ammMapInitSaga() {\n    yield all([takeLatest(getAmmMap, getPostsSaga)]);\n}\n\nexport function* ammMapRealTimeSaga() {\n    yield all([takeLatest(updateRealTimeAmmMap, updateRealTimeSaga)]);\n}\n\nexport const ammMapSaga = [\n    fork(ammMapInitSaga),\n    fork(ammMapRealTimeSaga),\n]\n\n","import { all, takeLatest, call, put } from \"redux-saga/effects\";\nimport { getAmmTrades, getAmmTradesStatus } from './reducer';\n\nconst getAmmTradesApi = ()=>new Promise((resolve)=>{\n    //TODO: check is connect and active and assign wallet\n    //TODO: if not reject directory, any error happen will clean the\n    resolve([\n    {side: 'Buy',\n        amount: {\n            sell:{ belong:'ETH', tradeValue: 0.1 },\n            buy:{ belong:'LRC', tradeValue: 123 }\n        },\n        time: Date.now(),\n        fee: 0.02,\n        priceValue: 0.123,\n        priceToken: 'LRC'}\n    ,{side: 'Buy',\n        amount: {\n            sell:{ belong:'ETH', tradeValue: 0.1 },\n            buy:{ belong:'LRC', tradeValue: 123 }\n        },\n        time: Date.now(),\n        fee: 0.02,\n        priceValue: 0.123,\n        priceToken: 'LRC'}\n])});\nexport function* getPostsSaga() {\n    try {\n        //\n        const { data } = yield call(getAmmTradesApi);\n        const posts = data;\n        yield put(getAmmTradesStatus(posts));\n    } catch (err) {\n        yield put(getAmmTradesStatus(err));\n    }\n}\n\nexport default function* ammTradesSaga() {\n    yield all([takeLatest(getAmmTrades, getPostsSaga)]);\n}\n","import { combineReducers } from '@reduxjs/toolkit';\n// import { ammRecordSlice } from './AmmConfig';\nimport { ammTradesSlice } from './AmmTrades';\nimport { ammMapSlice } from './AmmMap';\nimport { ammActivityMapSlice } from './AmmActivityMap';\nimport ammActivityMapSaga from './AmmActivityMap/saga';\nimport { ammMapSaga } from './AmmMap/saga';\nimport ammTradesSaga from './AmmTrades/saga';\nimport {  fork } from 'redux-saga/effects';\n\nexport const  ammReducer = combineReducers({\n    // ammRecord: ammRecordSlice.reducer,\n    ammTrades: ammTradesSlice.reducer,\n    ammMap: ammMapSlice.reducer,\n    ammActivityMap:ammActivityMapSlice.reducer\n})\nexport const ammForks =  [\n    fork(ammActivityMapSaga),\n    ...ammMapSaga,\n    // fork(ammRecordSaga),\n    fork(ammTradesSaga)\n]\n\n// export * from './interface'\n","import { all, call, fork, put, takeLatest } from \"redux-saga/effects\";\nimport { getTokenMap, getTokenMapStatus } from './reducer';\nimport { getIcon } from '../../utils/swap_calc_utils';\nimport { CoinInfo, CoinMap } from '@loopring-web/component-lib/static-resource';\nimport { AddressMap, GetTokenMapParams, IdMap } from './interface';\nimport { PayloadAction } from '@reduxjs/toolkit';\n\nconst getTokenMapApi = async <R extends { [ key: string ]: any }>({\n                                                                      tokensMap,\n                                                                      pairs,\n                                                                      marketArr,\n                                                                      tokenArr\n                                                                  }: GetTokenMapParams<R>) => {\n    let coinMap: CoinMap<any, CoinInfo<any>> = {};\n    let tokenMap:any = tokensMap;\n    let addressIndex: AddressMap = {};\n    let idIndex: IdMap = {};\n    Reflect.ownKeys(tokensMap).forEach((key) => {\n        if (!(key as string).startsWith('LP-')) {\n            coinMap[ key as string ] = {\n                icon: getIcon(key as string, tokensMap),\n                name: key as string,\n                simpleName: key,\n                description: '',\n                company: '',\n            }\n        }\n\n        if (pairs[ key as string ] && pairs[ key as string ].tokenList) {\n            // @ts-ignore\n            tokensMap[ key ].tradePairs = pairs[ key as string ].tokenList;\n        }\n        addressIndex = {\n            ...addressIndex,\n            // @ts-ignore\n            [ tokensMap[ key ].address ]: key as string\n        }\n        idIndex = {\n            ...idIndex,\n            // @ts-ignore\n            [ tokensMap[ key ].tokenId ]: key as string\n        }\n    })\n    return {data: {coinMap, addressIndex, idIndex, tokenMap, marketArray: marketArr, marketCoins: tokenArr}}\n};\n\nexport function* getPostsSaga<R extends { [ key: string ]: any }>({payload}: PayloadAction<GetTokenMapParams<R>>) {\n    try {\n        const {tokensMap, marketMap, pairs, marketArr,tokenArr} = payload\n        // @ts-ignore\n        const {data} = yield call(getTokenMapApi, {tokensMap, pairs, marketArr, tokenArr});\n\n        yield put(getTokenMapStatus({...data, marketMap}));\n    } catch (err) {\n        yield put(getTokenMapStatus(err));\n    }\n}\n\n\nexport function* tokenInitSaga() {\n    yield all([takeLatest(getTokenMap, getPostsSaga)]);\n}\n\n\nexport const tokenSaga = [\n    fork(tokenInitSaga),\n    // fork(tokenPairsSaga),\n]\n\n// export function* getPairsSaga({payload}:PayloadAction<{tokenPairs: TokenPairs }>) {\n//     try {\n//         const {tokenPairs} = payload;\n//         const tokenPairsMap =  Reflect.ownKeys(tokenPairs).reduce((prev,key)=>{\n//            // @ts-ignore\n//             return prev[key as string] =  tokenPairs[key as string].tokenList\n//         }, {} )\n//\n//         yield put(getTokenMapStatus({tokenPairsMap}));\n//     } catch (err) {\n//         yield put(getAmmMapStatus(err));\n//     }\n// }\n// export function* tokenPairsSaga() {\n//     yield all([takeLatest(getTokenPairMap, getPairsSaga)]);\n// }\n\n\n","import { all, call, fork, put, takeLatest } from \"redux-saga/effects\"\nimport { getTicker, getTickers, getTickerStatus } from './reducer'\nimport {\n    CoinKey,\n    CustomError,\n    ErrorMap,\n    FloatTag,\n    PairKey,\n    TradeFloat\n} from '@loopring-web/component-lib/src/static-resource'\n\n// import { asyncGetTradingInfo, getTradingInfo } from \"stores/trading/hook\"\nimport { TickerData, getTokenInfoById, toBig } from \"loopring-sdk\"\n\n// import { makeCoinInfo } from 'utils/swap_calc_utils'\nimport { exchangeAPI } from \"stores/apis/api\"\n\ntype TickerMap<R extends {[key:string]:any}> = {\n    [key in CoinKey<R>|PairKey<R>]?:TradeFloat & {\n    reward?:number,rewardToken?:string\n    }\n\n}\n\nconst demoTicker = [\n    ['ETH','2.4','24h','1234','3423525222','up'],\n    ['LRC','2.4','24h','1234','3423525222','up'],\n    ['DPR','2.4','24h','1234','3423525222','up'],\n    ['USDC','2.4','24h','1234','3423525222'],\n    ['USDT','2.4','24h','1234','3423525222','down'],\n    ['AMM-LRC-ETH','2.4','24h','1234','3423525222','up','23','1231','LRC'],\n    ['AMM-USDT-USDC','2.4','24h','1234','3423525222','up','23','1231','USDT'],\n    ['AMM-USDT-LRC','2.4','24h','1234','3423525222','up','23','1231'],\n    ['AMM-USDT-ETH','2.4','24h','1234','3423525222','up','23','1331'],\n    ['AMM-ETH-USDC','2.4','24h','1234','3423525222','up','12','233'],\n    ['AMM-ETH-USDT','2.4','24h','1234','3423525222','up','56','233'],\n\n]\n/*\nconst getTickersApi = async <R extends {[key:string]:any}>(list:Array<keyof R>)=>new Promise((resolve,reject)=>{\n\n    if(list.length>0){\n        const data:TickerMap<R> = {}; //= // {\n        list.map((tokenKey: keyof R) => {\n                const index = demoTicker.findIndex((item) => {\n                  return  item[ 0 ] === tokenKey\n                })\n                if (index > -1) {\n                    const ticker = demoTicker[index]\n                    data[tokenKey] = {\n                        percent: ticker[1],\n                        timeUnit: ticker[2].toString(),\n                        priceDollar: Number(ticker[3]),\n                        priceYuan:  Number(ticker[3]) * 6.3, //TODO get usdt to rmb price\n                        volume: Number(ticker[4]),\n                        floatTag: ticker[5].toString() === 'up'? FloatTag.increase:ticker[5].toString() === 'down'?FloatTag.decrease:FloatTag.none ,\n                        APY: 0,\n                        reward: ticker[7] ?  Number(ticker[7]) :undefined,\n                        rewardToken: ticker[8] ?  Number(ticker[8]) :undefined,\n                    } as TradeFloat\n                } else {\n                    throw new CustomError({...ErrorMap.GET_X_TOKEN_TICKER_ERROR, options: {token: tokenKey}});\n                    //reject(ErrorMap.GET_X_TOKEN_TICKER_ERROR)\n                }\n        })\n        resolve({data});\n    }else{\n       reject(ErrorMap.NO_TOKEN_KEY_LIST)\n    }\n\n});\n*/\nconst getTickersApi = async <R extends {[key:string]:any}>(list:Array<keyof R>)=> {\n\n    const data:TickerMap<R> = {}\n\n    const tickers = await exchangeAPI().getTicker({market: list.join(',')})\n\n    console.log('>>>tickMap:', tickers.tickMap)\n\n    //@ts-ignore\n    tickers.tickMap.forEach((item: TickerData, key: keyof R) => {\n        console.log('>>>base_token_volume:', item.base_token_volume)\n        data[key] = {\n            timeUnit: '24h',\n            priceDollar: 0,\n            priceYuan:  0,\n            volume: toBig(item.base_token_volume).toNumber(),\n            floatTag: item.close > item.open ? 'increase' : 'decrease' ,\n            APY: 0,\n            reward: 0,\n            rewardToken: '',\n        } as TradeFloat\n    })\n\n    return { data }\n}\n\nexport function* getPostsSaga({payload}:any) {\n    try {\n        // @ts-ignore\n        const { tickerKey,tickerKeys } = payload;\n        console.log('getPostsSaga tickerKey',tickerKey, tickerKeys)\n        if(tickerKey || (tickerKeys && tickerKeys.length)) {\n            const {data}  = yield call(getTickersApi,tickerKey?[tickerKey]:tickerKeys);\n            yield put(getTickerStatus({tickerMap:data}));\n\n        }else{\n            throw new CustomError(ErrorMap.NO_TOKEN_KEY_LIST);\n        }\n    } catch (err) {\n        yield put(getTickerStatus(err));\n    }\n}\n\nfunction* tickerSaga() {\n    yield all([takeLatest(getTicker, getPostsSaga)]);\n}\nfunction* tickersSaga() {\n    yield all([takeLatest(getTickers, getPostsSaga)]);\n}\n\nexport const tickerForks = [\n    fork(tickerSaga),\n    fork(tickersSaga),\n]\n ","import { all, call, fork, put, take, takeLatest } from \"redux-saga/effects\"\nimport { getSystemStatus, updateRealTimeObj, updateSystem } from './reducer'\nimport { ENV, NETWORKEXTEND } from \"./interface\"\nimport store from '../index';\nimport { reset } from '../account/reducer';\nimport { ChainId } from 'loopring-sdk';\nimport { exchangeAPI, LoopringAPI } from '../apis/api';\nimport { getAmmMap, updateRealTimeAmmMap } from '../Amm/AmmMap';\nimport { getTokenMap } from '../token';\nimport { CustomError, ErrorMap } from '@loopring-web/component-lib/src/static-resource';\nimport { getAmmActivityMap } from '../Amm/AmmActivityMap';\n\n\nconst initConfig = function* <R extends { [ key: string ]: any }>(chainId: ChainId | 'unknown') {\n    store.dispatch(reset(undefined));\n    const {tokenSymbolMap: tokensMap} = yield call(async ()=> await LoopringAPI.exchangeAPI?.getTokens())\n    const {ammpools} = yield call(async ()=>await LoopringAPI.ammpoolAPI?.getAmmPoolConf());\n    const {pairs, marketArr, tokenArr, markets}  = yield call(async ()=> LoopringAPI.exchangeAPI?.getMixMarkets());\n    store.dispatch(getTokenMap({tokensMap, marketMap: markets, pairs,marketArr,tokenArr}))\n    yield take('tokenMap/getTokenMapStatus');\n    // let basePath: string = `wss://ws.${baseURL}/v3/ws?wsApiKey=${wsKey}`\n    store.dispatch(getAmmMap({ammpools}))\n    store.dispatch(getAmmActivityMap({ammpools}))\n    if(store.getState().tokenMap.status === 'ERROR'){\n\n    }\n\n}\n\nconst getSystemsApi = async <R extends { [ key: string ]: any }>(chainId: any) => {\n    //TODO get some other reuqired id...... put into system\n    // const { chainId } = system\n    const env = window.location.hostname === 'localhost' ? ENV.DEV : ChainId.GORLI === chainId ? ENV.UAT : ENV.PROD\n    chainId = ChainId.GORLI === chainId ? ChainId.GORLI : ChainId.MAINNET === chainId ? ChainId.MAINNET : NETWORKEXTEND.NONETWORK\n    if (chainId === NETWORKEXTEND.NONETWORK) {\n        throw new CustomError(ErrorMap.NO_NETWORK_ERROR)\n    } else {\n        LoopringAPI.InitApi(chainId as ChainId);\n        if (LoopringAPI.exchangeAPI) {\n            const faitPrices = (await LoopringAPI.exchangeAPI.getFiatPrice({legal: 'CNY'})).fiatPrices\n            const gasPrice = (await exchangeAPI().getGasPrice()).gasPrice / 1e+9;\n            const baseURL = ChainId.MAINNET === chainId ? 'https://api3.loopring.io' : 'https://uat2.loopring.io'\n            const forex = faitPrices[ 'USDT' ].price;\n            let {__timer__} = store.getState().system;\n            __timer__ = ((__timer__) => {\n                if (__timer__ && __timer__ !== -1) {\n                    clearInterval(__timer__);\n                }\n                return setInterval(async () => {\n                    const faitPrices = (await exchangeAPI().getFiatPrice({legal: 'CNY'})).fiatPrices\n                    const gasPrice = (await exchangeAPI().getGasPrice()).gasPrice / 1e+9\n                    const forex = faitPrices[ 'USDT' ]\n                    store.dispatch(updateRealTimeAmmMap(undefined))\n                    store.dispatch(updateRealTimeObj({faitPrices, gasPrice, forex}))\n                }, 300000)   //\n\n            })(__timer__);\n            return {chainId, env, baseURL, faitPrices, gasPrice, forex, __timer__}\n        }\n    }\n}\n\nexport function* getUpdateSystem({payload}: any) {\n    try {\n        // @ts-ignore\n        const {chainId} = payload;\n        const {env, baseURL, faitPrices, gasPrice, forex, __timer__} = yield call(getSystemsApi, chainId);\n\n        yield put(getSystemStatus({env, baseURL, faitPrices, gasPrice, forex, __timer__}));\n        yield call(initConfig,chainId)\n        //TODO check wallect store\n    } catch (err) {\n        yield put(getSystemStatus(err));\n    }\n}\n\nfunction* systemSaga() {\n    yield all([takeLatest(updateSystem, getUpdateSystem)]);\n}\n\nexport const systemForks = [\n    fork(systemSaga),\n]\n","import { all, call, fork, put, takeLatest } from \"redux-saga/effects\";\nimport {  getWalletLayer1Status, updateWalletLayer1 } from './reducer';\nimport { CoinKey, PairKey, WalletCoin } from '@loopring-web/component-lib/src/static-resource';\nimport { exchangeAPI } from '../apis/api';\nimport store from '../index';\nimport { fromWEI } from '../../utils/swap_calc_utils';\n\ntype WalletLayer1Map<R extends {[key:string]:any}> = {\n    [key in CoinKey<R>|PairKey<R>]?:WalletCoin<R>\n}\n\nconst getWalletLayer1Balance = async <R extends {[key:string]:any}>()=> {\n    //TODO: check is connect and active and assign walletLayer1\n    //TODO: if not reject directory, any error happen will clean the\n    // await sdk\n    const exchangeApi = exchangeAPI();\n    const {accAddr,accountId} = store.getState().account;\n    const {tokenMap,marketCoins} = store.getState().tokenMap;\n    // @ts-ignore\n    const {tokenBalances} =  await exchangeApi.getTokenBalances({owner:accAddr,token: marketCoins.join()},tokenMap)\n    let walletLayer1;\n\n    if(tokenBalances) {\n        walletLayer1 = Reflect.ownKeys(tokenBalances).reduce((prev,item)=>{\n            return   {...prev, [ item ]:{\n                    belong: item,\n                    count: fromWEI(tokenMap, item, tokenBalances[item as string]),\n                }\n            }\n        },{} as WalletLayer1Map<R>)\n    }\n    return {walletLayer1}\n};\n\nexport function* getPostsSaga() {\n    try {\n        //\n        const {walletLayer1} = yield call(getWalletLayer1Balance);\n        yield put(getWalletLayer1Status({walletLayer1}));\n    } catch (err) {\n        yield put(getWalletLayer1Status(err));\n    }\n}\n\nexport function* walletLayer1Saga() {\n    yield all([takeLatest(updateWalletLayer1, getPostsSaga)]);\n}\n\nexport const walletLayer1Fork = [\n    fork(walletLayer1Saga),\n    // fork(tokenPairsSaga),\n]\n\n","import { all, call, fork, put, takeLatest } from \"redux-saga/effects\";\nimport { getWalletLayer2Status, updateWalletLayer2 } from './reducer';\nimport { CoinKey, PairKey, WalletCoin } from '@loopring-web/component-lib/src/static-resource';\nimport {  userAPI } from '../apis/api';\nimport store from '../index';\n\ntype WalletLayer2Map<R extends {[key:string]:any}> = {\n    [key in CoinKey<R>|PairKey<R>]?:WalletCoin<R>\n}\n\nconst getWalletLayer2Balance = async <R extends {[key:string]:any}>()=> {\n    //TODO: check is connect and active and assign walletLayer1\n    //TODO: if not reject directory, any error happen will clean the\n    // await sdk\n    // const exchangeApi = exchangeAPI();\n    const userApi = userAPI();\n    const {accountId,apiKey} = store.getState().account;\n    const {tokenMap,idIndex,marketCoins} = store.getState().tokenMap;\n    let walletLayer2;\n    if(apiKey && accountId){\n        // @ts-ignore\n        const {userBalances} =  await userApi.getUserBalances({accountId:accountId,tokens:''},apiKey)\n        if(userBalances) {\n            // tokenId: number;\n            // total: string;\n            // locked: string;\n            // pending: {\n            //     withdraw: string;\n            //     deposit: string;\n            // };\n            walletLayer2 = Reflect.ownKeys(userBalances).reduce((prev,item)=>{\n                // @ts-ignore\n                return   {...prev, [ idIndex[item] ]:userBalances[Number(item)]}\n            },{} as WalletLayer2Map<R>)\n        }\n    }\n\n    return {walletLayer2}\n};\nexport function* getPostsSaga() {\n    try {\n        //\n        const {walletLayer2} = yield call(getWalletLayer2Balance);\n        yield put(getWalletLayer2Status({walletLayer2}));\n    } catch (err) {\n        yield put(getWalletLayer2Status(err));\n    }\n}\n\nexport function* walletLayer2Saga() {\n    yield all([takeLatest(updateWalletLayer2, getPostsSaga)]);\n}\n\n\nexport const walletLayer2Fork = [\n    fork(walletLayer2Saga),\n    // fork(tokenPairsSaga),\n]\n\n","import { all, call, fork, put, takeLatest } from \"redux-saga/effects\"\nimport { getUserRewards, getUserRewardsStatus } from './reducer'\n\nimport store from '../index';\nimport { exchangeAPI, LoopringAPI } from '../apis/api';\nimport { updateRealTimeAmmMap } from '../Amm/AmmMap';\nimport { updateRealTimeObj } from '../system';\n\nconst getUserRewardsApi = async <R extends {[key:string]:any}>(list:Array<keyof R>)=> {\n\n    // const data:UserRewardsMap<R> = {}\n\n    // const userRewardss = await exchangeAPI().getUserRewards({market: list.join(',')})\n    const {accountId} = store.getState().account\n    let {__timer__} = store.getState().userRewardsMap;\n    // debugger\n    if(LoopringAPI.ammpoolAPI) {\n        __timer__ = ((__timer__) => {\n            if (__timer__ && __timer__ !== -1) {\n                clearInterval(__timer__);\n            }\n            return setTimeout(async () => {\n                store.dispatch(getUserRewards(undefined))\n            }, 300000 * 4)   //\n\n        })(__timer__);\n        return  LoopringAPI.ammpoolAPI.getAmmPoolUserRewards({owner:accountId}).then(({ammUserRewardMap}) => {\n            return {data:ammUserRewardMap,__timer__}\n        })\n\n\n    }else{\n        return  Promise.reject({data:undefined,__timer__})\n    }\n\n}\n\nexport function* getPostsSaga({payload}:any) {\n    try {\n        // @ts-ignore\n        // const { userRewardsKey,userRewardsKeys } = payload;\n        // console.log('getPostsSaga userRewardsKey',userRewardsKey, userRewardsKeys)\n        // if(userRewardsKey || (userRewardsKeys && userRewardsKeys.length)) {\n        const {data,__timer__}  = yield call(getUserRewardsApi);\n        yield put(getUserRewardsStatus({userRewardsMap:data,__timer__}));\n\n        // }else{\n        //     throw new CustomError(ErrorMap.NO_SDK);\n        // }\n    } catch (err) {\n        yield put(getUserRewardsStatus(err));\n    }\n}\n\nfunction* userRewardsSaga() {\n    yield all([takeLatest(getUserRewards, getPostsSaga)]);\n}\n\nexport const userRewardsForks = [\n    fork(userRewardsSaga),\n    // fork(userRewardssSaga),\n]\n ","import { all, call, fork, put, takeLatest } from 'redux-saga/effects';\nimport { getSocketStatus, sendNewMessage, socketEnd } from './reducer'\n// import store from '../index';\nimport {\n    socketClose, socketSendMessage,\n    // socketConnect\n} from '../../services/socketUtil';\nimport store from '../index';\nimport { WsTopicType } from 'loopring-sdk/dist/defs/ws_defs';\n\n// export function* startSocket() {\n//     try {\n//         // @ts-ignore\n//         const { socket } = payload;\n//         // console.log('getPostsSaga systemKey',systemKey, systemKeys)\n//\n//         const { chainId } = store.getState().system;\n//         if(socket && chainId !=='unknown'){\n//             yield call(socketConnect, {chainId,socket});\n//         }\n//         yield put(getSocketStatus(undefined));\n//         //TODO check wallect store\n//     } catch (err) {\n//         yield put(getSocketStatus(err));\n//     }\n// }\nexport function* closeSocket(){\n    try {\n        yield call(socketClose)\n        yield put(getSocketStatus(undefined));\n        //TODO check wallect store\n    } catch (err) {\n        yield put(getSocketStatus(err));\n    }\n}\nexport function* sendMessage({payload}: any){\n    try {\n        const { chainId } = store.getState().system;\n        const { socket } = payload;\n        //const global = window || globalThis;\n        // @ts-ignore\n        // let ws:WebSocket|undefined = global.loopringSocket;\n        // if(ws){\n        //     // ws.onclose = function(e) {\n        //     //     console.log('Socket is closed', e.reason);\n        //     // };\n        //     // ws.close();\n        // }\n        yield call(socketSendMessage, { chainId, socket })\n        yield put(getSocketStatus(undefined));\n        //TODO check wallet store\n    } catch (err) {\n        yield put(getSocketStatus(err));\n    }\n}\n\nfunction* socketEndSaga(){\n    yield all([takeLatest(socketEnd, closeSocket)]);\n}\n// function* socketSaga() {\n//     yield all([takeLatest(socketStart, startSocket)]);\n// }\nfunction* socketSendMessageSaga() {\n    yield all([takeLatest(sendNewMessage, sendMessage)]);\n}\n\n\n\nexport const socketForks = [\n    // fork(socketSaga),\n    fork(socketEndSaga),\n    fork(socketSendMessageSaga),\n //   fork(initConfig),\n]\n\n\n\n","import { all } from \"redux-saga/effects\"\n// import machine from \"../state_machine/fsm/machine\"\n// import { TRANSITION } from \"../state_machine/fsm/actionTypes\"\n// import { helloSaga } from \"./sagas\"\nimport { tokenSaga } from './token/saga';\nimport { ammForks } from './Amm';\nimport { tickerForks } from './ticker/saga';\nimport { systemForks } from './system/saga';\nimport { walletLayer1Fork } from './walletLayer1/saga';\nimport { walletLayer2Fork } from './walletLayer2/saga';\nimport { userRewardsForks } from './userRewards/saga';\nimport { socketForks } from './socket/saga';\n\n\n// https://css-tricks.com/finite-state-machines-with-react/\n// https://musing-rosalind-2ce8e7.netlify.com/?machine=%7B%22initial%22%3A%22initial%22%2C%22states%22%3A%7B%22initial%22%3A%7B%22on%22%3A%7B%22LOGIN%22%3A%22loggedIn%22%2C%22LOGOUT%22%3A%22loggedOut%22%7D%7D%2C%22loggedOut%22%3A%7B%22on%22%3A%7B%22SUBMIT%22%3A%22loading%22%7D%7D%2C%22loading%22%3A%7B%22on%22%3A%7B%22SUCCESS%22%3A%22loggedIn%22%2C%22FAIL%22%3A%22loggedOut%22%7D%7D%2C%22loggedIn%22%3A%7B%22onEntry%22%3A%5B%22SET_TOKEN%22%5D%2C%22onExit%22%3A%5B%22CLEAR_TOKEN%22%5D%2C%22on%22%3A%7B%22LOGOUT%22%3A%22loggedOut%22%7D%7D%7D%7D\n\n// function* machineHandler(event: any, action: any) {\n//\n//   // @ts-ignore\n//   const currentAppState = yield select((state) => { state.account.status })\n//   const nextAppState = machine.transition(currentAppState, event)\n//\n//   yield put({\n//     type: \"APP_STATE/\" + nextAppState.value,\n//     payload: {\n//       value: nextAppState.value\n//     }\n//   });\n//\n//   console.debug(\"-> from \" + currentAppState + \" to \" + nextAppState);\n//\n//   for (let i = 0; i < nextAppState.actions.length; i++) {\n//     yield put({\n//       type: nextAppState.actions[i],\n//       payload: action\n//     });\n//   }\n// }\n\n// function* watchTransition() {\n//   yield takeEvery(TRANSITION, function*(action: any) {\n//     yield machineHandler(action.event, action.payload);\n//   });\n// }\n\nfunction* mySaga() {\n    yield all([\n        // fork(helloSaga),\n        // fork(watchTransition),\n        ...tokenSaga,\n        ...walletLayer1Fork,\n        ...walletLayer2Fork,\n        ...systemForks,\n        ...ammForks,\n        ...tickerForks,\n        ...userRewardsForks,\n        ...socketForks,\n\n    ]);\n}\n\nexport default mySaga;\n","import { configureStore, combineReducers, getDefaultMiddleware } from '@reduxjs/toolkit'\n\nimport { useDispatch } from 'react-redux'\nimport { save, load } from 'redux-localstorage-simple'\n\nimport createSagaMiddleware from 'redux-saga'\n\n// We'll use redux-logger just as an example of adding another middleware\nimport logger from 'redux-logger'\n\n// And use redux-batch as an example of adding enhancers\nimport { reduxBatch } from '@manaflair/redux-batch'\nimport { updateVersion } from './global/actions'\n\nimport accountSlice from './account/reducer'\nimport tradingSlice from './trading/reducer'\nimport transactionlice from './transactions/reducer'\n\n\nimport { modalsSlice, setLanguage, settingsSlice } from '@loopring-web/component-lib';\nimport { ammReducer } from './Amm';\nimport { tokenMapSlice } from './token';\nimport mySaga from './rootSaga';\nimport { tickerMapSlice } from './ticker';\nimport { systemSlice } from './system';\nimport { walletLayer1Slice } from './walletLayer1';\nimport { walletLayer2Slice } from './walletLayer2';\nimport { socketSlice } from './socket';\nimport { userRewardsMapSlice } from './userRewards';\n\nconst sagaMiddleware = createSagaMiddleware()\n\nconst reducer = combineReducers({\n  account: accountSlice.reducer,\n  socket: socketSlice.reducer,\n  settings: settingsSlice.reducer,\n  system: systemSlice.reducer,\n  trading: tradingSlice.reducer,\n  transactions: transactionlice.reducer,\n  modals: modalsSlice.reducer,\n  userRewardsMap: userRewardsMapSlice.reducer,\n  amm:ammReducer,\n  tokenMap: tokenMapSlice.reducer,\n  walletLayer2: walletLayer2Slice.reducer,\n  walletLayer1: walletLayer1Slice.reducer,\n  tickerMap: tickerMapSlice.reducer\n})\n\n//\n\nconst PERSISTED_KEYS: string[] = ['settings']\n\nconst store = configureStore({\n  reducer,\n  // middleware: (getDefaultMiddleware) => getDefaultMiddleware().concat(logger),\n  middleware: [...getDefaultMiddleware({ thunk: false,serializableCheck:false, }), save({ states: PERSISTED_KEYS }), sagaMiddleware, ],\n  // middleware: [...getDefaultMiddleware({ thunk: true }), ],\n  devTools: process.env.NODE_ENV !== 'production',\n  enhancers: [reduxBatch],\n  preloadedState: load({ states: PERSISTED_KEYS })\n})\nstore.dispatch(updateVersion())\nstore.dispatch(setLanguage(store.getState().settings.language))\n// @ts-ignore\nsagaMiddleware.run(mySaga, store.dispatch);\n\n// The store has been created with these options:\n// - The slice reducers were automatically passed to combineReducers()\n// - redux-thunk and redux-logger were added as middleware\n// - The Redux DevTools Extension is disabled for production\n// - The middleware, batch, and devtools enhancers were composed together\n\nexport type AppDispatch = typeof store.dispatch\nexport const useAppDispatch = () => useDispatch<AppDispatch>()\n\nexport type RootState = ReturnType<typeof reducer>\n\nexport default store\n","export enum STATUS {\n    UNSET='UNSET',\n    PENDING='PENDING',\n    ERROR='ERROR',   // success failed timeout is Done\n    DONE='DONE',   // success failed timeout is Done\n}\n","import { AmmpoolAPI, ChainId, ExchangeAPI, UserAPI, WalletAPI, WsAPI } from \"loopring-sdk\"\nimport { getChainId } from 'stores/trading/hook'\n\nexport const walletAPI = () => {\n    const walletApi = new WalletAPI(getChainId() as ChainId)\n    return walletApi\n}\n\nexport const userAPI = () => {\n    const userApi = new UserAPI(getChainId() as ChainId)\n    return userApi\n}\n\nexport const exchangeAPI = () => {\n    const exchangeApi = new ExchangeAPI(getChainId() as ChainId)\n    return exchangeApi\n}\n\nexport const ammpoolAPI = () => {\n    const ammpoolApi = new AmmpoolAPI(getChainId() as ChainId)\n    return  ammpoolApi\n}\n\nexport const wsAPI = () => {\n    const wsApi = new WsAPI(getChainId() as ChainId)\n    return wsApi\n}\n\nexport class LoopringAPI {\n    \n    public static userAPI: UserAPI | undefined = undefined\n    public static exchangeAPI: ExchangeAPI | undefined = undefined\n    public static ammpoolAPI: AmmpoolAPI | undefined = undefined\n    public static walletAPI: WalletAPI | undefined = undefined\n    public static wsAPI: WsAPI | undefined = undefined\n\n    public static InitApi = (chainId: ChainId) => {\n        LoopringAPI.userAPI = new UserAPI(chainId) \n        LoopringAPI.exchangeAPI = new ExchangeAPI(chainId) \n        LoopringAPI.ammpoolAPI = new AmmpoolAPI(chainId) \n        LoopringAPI.walletAPI = new WalletAPI(chainId) \n        LoopringAPI.wsAPI = new WsAPI(chainId) \n    }\n\n}\n","import store from '../../stores';\nimport { toBig } from 'loopring-sdk';\nimport { BIG10 } from '../../defs/swap_defs';\nimport BigNumber from 'bignumber.js';\n\nexport const volumeToCount = (symbol:string,volumn:string|number|BigNumber,tokenMap= store.getState().tokenMap.tokenMap):number|undefined =>{\n   const result =  volumeToCountAsBigNumber(symbol,volumn,tokenMap);\n   return result? result.toNumber():undefined;\n}\nexport const volumeToCountAsBigNumber = (symbol:string,volumn:string|number|BigNumber,tokenMap= store.getState().tokenMap.tokenMap):BigNumber|undefined =>{\n    if(tokenMap && tokenMap[symbol] && typeof volumn !== 'undefined'){\n        try{\n            return toBig(volumn).div( BIG10.pow(tokenMap[symbol].decimals))\n        }catch (error){\n            throw error;\n        }\n    }else{\n        return undefined;\n    }\n}","// @ts-nocheck\nimport { ChainId, getAccountArg, getOrderArg, getOrderBookArg, WsTopicType } from 'loopring-sdk';\nimport { LoopringAPI } from '../stores/apis/api';\nimport store from '../stores';\nimport { updateSocketURL } from '../stores/system';\nimport { tickerService } from './tickerService';\nimport { ammPoolService } from './ammPoolService';\nimport { TokenVolumeV3 } from 'loopring-sdk/dist/defs/loopring_defs';\n\nexport type socketEventMap = { fn: (e: MessageEvent, props?: { [ key: string ]: any }) => any, deps?: any[] }\n\nexport enum SocketEventType {\n    pingpong = 'pingpong',\n    account = \"account\",\n    order = \"order\",\n    orderbook = \"orderbook\",\n    trade = \"trade\",\n    ticker = \"ticker\",\n    candlestick = \"candlestick\",\n    ammpool = \"ammpool\"\n}\n\n// enum SocketEventType {\n//     PING_PONG = 'PING_PONG',\n//     ACCOUNT = 'ACCOUNT',\n//     ORDER = 'ORDER',\n//     ORDERBOOK = 'ORDERBOOK',\n//     TRADE = 'TRADE',\n//     TICKER = 'TICKER',\n//     CANDLESTICK = 'CANDLESTICK',\n//     AMMPOOL = 'AMMPOOL',\n// }\n\nexport type SocketEventMap = {\n    [ key: keyof typeof WsTopicType ]: socketEventMap\n}\n\nconst pingPong = {\n    fn: (e: MessageEvent) => {\n        if (e.data === 'ping') {\n            global.looperingSocket.send('pong')\n        }\n    }\n}\n\n//@ts-ignore\nwindow.socketEventMap = {\n    [ WsTopicType ]: pingPong\n} as SocketEventMap;\n\nexport const addSocketEvents = (key: string, event: socketEventMap) => {\n    window.socketEventMap = {\n        ...window.socketEventMap,\n        [ key ]: event\n    }\n}\nexport const removeSocketEvents = (key: string) => {\n    if (window.socketEventMap && window.socketEventMap[ key ]) {\n        delete window.socketEventMap[ key ]\n    }\n}\nexport const resetSocketEvents = () => {\n    window.socketEventMap = {\n        [ SocketEventType.pingpong ]: pingPong\n    }\n}\n\nexport const isConnectSocket = () => {\n    const global: Window = window || globalThis;\n    if (global.looperingSocket && global.looperingSocket.send) {\n        return true;\n    } else {\n        return false\n    }\n}\nexport const socketClose = async () => {\n    const global = window || globalThis;\n    let ws: WebSocket | undefined = global.loopringSocket;\n    if (ws) {\n        const promise = new Promise((reolve, reject) => {\n            ws.onclose = function (e) {\n                reolve(`Socket is closed, ${e.reason}`)\n            };\n        })\n        ws.close();\n        return promise;\n    } else {\n        Promise.resolve('no websocket')\n    }\n}\nexport const socketConnect = async ({chainId, socket}: {\n    chainId: ChainId | 'unknown',\n    socket: { [ key: string ]: string[] }\n}) => {\n\n    if (chainId !== 'unknown' && LoopringAPI.wsAPI && socket) {\n        const url = chainId === ChainId.GORLI ? 'uat2.loopring.io' : 'api3.loopring.io'\n        const {wsKey} = await LoopringAPI.wsAPI.getWsKey();\n        let baseSocket: string = `wss://ws.${url}/v3/ws?wsApiKey=${wsKey}`;\n        store.dispatch(updateSocketURL({socketURL: baseSocket}));\n        const global: Window = window || globalThis;\n        let ws: WebSocket;\n        // @ts-ignore\n        // global.loopringSocket;\n\n        try {\n            ws = new WebSocket(baseSocket);\n            // @ts-ignore\n            global.looperingSocket = ws;\n            ws.onopen = function () {\n                console.log(\"WebSocket is open now.\");\n                // ws.send('pong');\n                // return  Promise.resolve('One time Connect done')\n                // subscribe to some channels\n                // ws.send(JSON.stringify({\n                //     //.... some message the I must send when I connect ....\n                // }));\n            };\n            ws.onmessage = function (e) {\n                console.log('Message:', e.data);\n                const {data} = e;\n                // data.topic.topic;\n                if (typeof data === 'string') {\n                    window.socketEventMap.pingPong.fn.call(window.socketEventMap.pingPong.deps, e);\n                } else {\n                    const {topic: [topic], data: _detail} = data;\n                    if (topic) {\n                        const {fn, deps} = window.socketEventMap[ topic ]\n                        if(typeof fn == 'function'){\n                            fn.call(deps, _detail);\n                        }\n                    }\n                }\n            };\n            ws.onclose = function (e) {\n                console.log('Socket is closed. Reconnect will be attempted in 1 second.', e.reason);\n                setTimeout(function () {\n                    socketConnect.call(global, chainId);\n                }, 1000);\n            };\n            ws.onerror = function (err: Event) {\n                console.error('Socket encountered error: ', 'Closing socket');\n                ws.close(WebSocket.CLOSED);\n            };\n        } catch (error) {\n            console.log('connect error, not from reconnect')\n            const global: Window & { __wsTimer__?: { timer?: NodeJS.Timeout | -1, count: 0 } } = window || globalThis;\n            if (global.__wsTimer__) {\n                if (global.__wsTimer__.timer && global.__wsTimer__.timer !== -1) {\n                    clearTimeout(global.__wsTimer__.timer)\n                }\n                global.__wsTimer__.timer = -1\n                global.__wsTimer__.count++;\n            } else {\n                global.__wsTimer__ = {\n                    //...global.__wsTimer__,\n                    timer: -1,\n                    count: 0\n                }\n            }\n            if (global.__wsTimer__.count < 5) {\n                global.__wsTimer__.timer = setTimeout(function () {\n                    socketConnect.call(global, chainId);\n                }, 1000 * global.__wsTimer__.count);\n            } else {\n                ws.onclose();\n            }\n        }\n\n    }\n}\n\nexport const socketSendMessage = async ({socket, chainId}: {\n    chainId: ChainId | 'unknown',\n    socket: { [ key: string ]: string[] }\n}) => {\n    if (socket && Reflect.ownKeys(socket).length) {\n        const list = resetSocketEvents();\n        makeMessageArray();\n        if (!isConnectSocket()) {\n            socketConnect({socket})\n        } else {\n            const global: Window = window || globalThis;\n            global.looperingSocket.send()\n        }\n    } else {\n        if (!isConnectSocket()) {\n            socketClose();\n        }\n    }\n}\n\n\nexport const makeMessageArray = ({socket}: { socket: { [ key: string ]: string[] } }) => {\n    let topics = [], list = []; // let registerDispatch = [];\n    return Reflect.ownKeys(socket).map((eventType: keyof typeof SocketEventType) => {\n        switch (eventType) {\n            case  SocketEventType.account:\n                list = socket[ SocketEventType.account ].map(key => getAccountArg(key));\n                if (list && list.length) {\n                    makeReceiveMessageCallback(SocketEventType.account)\n                    topics = [...topics, ...list];\n                }\n                break;\n            case  SocketEventType.order:\n                list = socket[ SocketEventType.order ].map(key => getOrderArg(key))\n                if (list && list.length) {\n                    makeReceiveMessageCallback(SocketEventType.order)\n                    topics = [...topics, ...list];\n                }\n                break\n            case  SocketEventType.orderbook:\n                list = socket[ SocketEventType.orderbook ].map(key => getOrderBookArg(key))\n                if (list && list.length) {\n                    makeReceiveMessageCallback(SocketEventType.orderbook)\n                    topics = [...topics, ...list];\n                }\n                break\n            case  SocketEventType.trade:\n                list = socket[ SocketEventType.trade ].map(key => getTradeArg(key))\n                if (list && list.length) {\n                    makeReceiveMessageCallback(SocketEventType.trade)\n                    topics = [...topics, ...list];\n                }\n                break\n            case  SocketEventType.ticker:\n                list = socket[ SocketEventType.ticker ].map(key => getTickerArg(key))\n                if (list && list.length) {\n                    makeReceiveMessageCallback(SocketEventType.ticker)\n                    topics = [...topics, ...list];\n                }\n                break\n            case  SocketEventType.candlestick:\n                list = socket[ SocketEventType.candlestick ].map(key => getCandlestickArg(key))\n                if (list && list.length) {\n                    makeReceiveMessageCallback(SocketEventType.candlestick)\n                    topics = [...topics, ...list];\n                }\n                break\n            case  SocketEventType.ammpool:\n                list = socket[ SocketEventType.ammpool ].map(key => getAmmpoolArg(key))\n                if (list && list.length) {\n                    makeReceiveMessageCallback(SocketEventType.ammpool)\n                    topics = [...topics, ...list];\n                }\n                break\n        }\n        return topics\n    })\n\n}\nexport const makeReceiveMessageCallback = (type: keyof typeof SocketEventType) => {\n\n    addSocketEvents(type, {\n        fn: SocketEventMap [ type ]\n    })\n}\n\n\nconst SocketEventMap = {\n    // PING_PONG : (e)=>{\n    //\n    // },\n    [SocketEventType.account]: (e) => {\n\n    },\n    [SocketEventType.order]: (e) => {\n\n    },\n    [SocketEventType.orderbook]: (e) => {\n\n    },\n    [SocketEventType.trade]: (e) => {\n\n    },\n    [SocketEventType.ticker]: (data:string[]) => {\n        const [market,timestamp,size,volume,open,high,low,close,count,bid,ask] = data;\n        tickerService.sendTicker({market,timestamp,size,volume,open,high,low,close,count,bid,ask})\n    },\n    [SocketEventType.candlestick]: (e) => {\n\n    },\n    [SocketEventType.ammpool]: (data:string[]) =>{\n       // const [market,timestamp,size,volume,open,high,low,close,count,bid,ask] = data;\n        const [poolName,poolAddress,pooled,[tokenId,volume],risky] = data;\n        ammPoolService.sendAmmPool({poolName,poolAddress,pooled,lp:{tokenId,volume},risky})\n    },\n}\n\n\n\n","import { Trans, useTranslation } from 'react-i18next';\nimport { Box, Container, Link, Typography } from '@material-ui/core';\nimport styled from '@emotion/styled';\nimport { ErrorObject } from '@loopring-web/component-lib/src/static-resource';\nimport { getContactInfo } from '../../utils/dt_tools';\n\nconst StyleBox = styled(Box)`\n  background-image: url('./static/images/error_bg.png');\n  background-repeat: no-repeat;\n  background-size: contain;\n  background-position: bottom;\n  white-space: pre-wrap;\n  //h2{\n  //  position: relative;\n  //}\n` as typeof Box\n\nexport const ErrorPage = ({messageKey}: ErrorObject) => {\n    // const {messageKey}: { id?:string,messageKey:string } = {messageKey: 'errorMessageTokenMapIsEmpty'};\n    //TODO: checkRouter\n    const {t} = useTranslation('error');\n    const message = `labelConnectUs`;\n    return <>\n        <Container>\n            {/*style={{height: '100%' }}*/}\n            <StyleBox flex={1} display={'flex'} alignItems={'flex-start'} justifyContent={'center'}\n                      flexDirection={'column'} marginTop={4} height={680} maxWidth={1200}>\n                {/*<StyleBox>*/}\n                <Box textAlign={'center'} position={'relative'} left={128} top={-64}>\n                    <Typography component={'h2'} variant={'h2'}>\n                        {t(messageKey)}\n                    </Typography>\n                    <Typography marginY={2} component={'p'} variant={'body1'} color={'textSecondary'}>\n                        <Trans i18nKey={message}>\n                            If you believe this is indeed a bug, please <Link\n                            component={'a'}\n                            onClick={(e) => {\n                                window.location.href = getContactInfo();\n                                e.preventDefault();\n                            }}\n                        >contact us</Link> <br/> We would appreciate your feedback\n\n                        </Trans>\n                        {/*{t(message)}*/}\n                        {/*{t(messageKey)}*/}\n                    </Typography>\n                </Box>\n                {/*</StyleBox>*/}\n            </StyleBox>\n        </Container>\n\n        {/*<Footer></Footer>*/}\n    </>\n}\n","// import { i18nInstance as i18n  } from \"@loopring-web/component-lib/static-resource\"\nimport i18n from 'i18next';\n\nconst covertLocale = (rawLocale: string = i18n.language) => {\n    return rawLocale.replace('_', '-')\n}\n\nexport function getLocaleDtFromTs(ts: number | string, locale: string = i18n.language) {\n    if (typeof(ts) === 'string') {\n        ts = parseInt(ts)\n    }\n    const dt = new Date(ts).toLocaleString(covertLocale(locale))\n    return dt\n}\n\nexport function getLocaleDt(dt?: Date, locale: string = i18n.language) {\n    if (dt) {\n        return dt.toLocaleString(covertLocale(locale))\n    }\n    return ''\n}\n\nexport function getContactInfo(subject: string = 'report to loopring website', body: string ='Body Content') {\n    const email = process.env.CONTACT_US_EMAIL ?? 'contact@loopring.io'\n    return `mailto:${email}?subject=${subject}&body=${body}`\n}\n","import { WsAPI, ExchangeAPI, AmmpoolAPI, UserAPI, DEFAULT_TIMEOUT, } from 'loopring-sdk'\nimport store, { RootState } from 'stores'\nimport { useSelector } from 'react-redux'\n\nimport { useMemo } from 'react'\n\nfunction useApi(ApiClass: any, timeout = DEFAULT_TIMEOUT) {\n    // const chainId = store.getState().trading.chainId\n    // return new ApiClass(chainId, timeout)\n\n  const { chainId, } = useSelector((state: RootState) => state.trading)\n\n  const genApi = () => {\n      if (!chainId) {\n          return undefined\n      }\n\n      return new ApiClass(chainId, timeout)\n  }\n\n  const api = useMemo(genApi, [ApiClass, chainId, timeout])\n\n  return api\n}\n\nexport function useWsAPI() {\n    return useApi(WsAPI) as WsAPI\n}\n\nexport function useExchangeAPI() {\n    return useApi(ExchangeAPI) as ExchangeAPI\n}\n\nexport function useAmmpoolAPI() {\n    return useApi(AmmpoolAPI) as AmmpoolAPI\n}\n\nexport function useUserAPI() {\n    return useApi(UserAPI) as UserAPI\n}\n","import { useDeepCompareEffect } from \"react-use\"\n\nexport function useCustomDCEffect(action: any, deps: any[] | undefined | null) {\n    useDeepCompareEffect(action, [deps || {}])\n}\n","import { Subject } from 'rxjs';\nimport { TradeFloat } from '@loopring-web/component-lib/src/static-resource';\n\nconst subject = new Subject();\n\nexport type AmmPoolMap<R> = {\n    [key in keyof R]:TradeFloat\n}\n// <R extends {[key:string]:any}>\n\nexport const ammPoolService = {\n    sendAmmPool: (ammPoolMap:AmmPoolMap<{[key:string]:any}>) => subject.next({ ammPoolMap: ammPoolMap }),\n    // clearMessages: () => subject.next(),\n    onSocket: () => subject.asObservable()\n};","import React  from 'react';\nimport detectEthereumProvider from '@metamask/detect-provider';\nimport { useCustomDCEffect } from 'hooks/common/useCustomDCEffect';\nimport { useSystem } from './stores/system';\nimport { ChainId } from 'loopring-sdk';\nimport { useAmmMap } from './stores/Amm/AmmMap';\nimport { STATUS } from './stores/constant';\nimport { useTokenMap } from './stores/token';\nimport { useSocket } from './stores/socket';\n\n\n/**\n * @description call it when bootstrap the page or change the network\n */\nexport function useInit(){\n    const [state,setState] = React.useState<keyof typeof STATUS>('PENDING')\n    const systemState = useSystem();\n    const tokenState = useTokenMap();\n    const ammMapState = useAmmMap();\n    const socketState =   useSocket();\n\n    useCustomDCEffect(async() => {\n\n        const handleChainChanged = (chainId: any) => {\n    \n            // const network = chainId == ChainId.GORLI ? NETWORK.Goerli : NETWORK.MAIN\n             console.log('handleChainChanged chainId: ', chainId)\n             systemState.updateSystem({ chainId })\n             window.location.reload();\n        }\n\n        const provider: any = await detectEthereumProvider()\n        if (provider) {\n            const chainId = Number(await provider.request({ method: 'eth_chainId' }))\n    \n            provider.on('chainChanged', ()=>{handleChainChanged(chainId)} )\n            // @ts-ignore\n            systemState.updateSystem({ chainId  })\n           //handleChainChanged(chainId)\n            \n        } else {\n            systemState.updateSystem({chainId:ChainId.MAINNET})\n            console.log('web3 is not found')\n        }\n\n    }, [])\n\n    React.useEffect(() => {\n        switch (systemState.status) {\n            case \"ERROR\":\n                systemState.statusUnset();\n                setState('ERROR')\n                //TODO show error at button page show error  some retry dispat again\n                break;\n            case \"DONE\":\n                systemState.statusUnset();\n                //TODO do some static information update\n                //tokenState.updateTokenMap();\n                break;\n            default:\n                break;\n\n        }\n    },[\n        systemState,\n        // systemState.status,\n        // systemState.statusUnset,\n        //tokenState.updateTokenMap\n    ]);\n    React.useEffect(() => {\n        if(ammMapState.status ===\"ERROR\" || tokenState.status === \"ERROR\"){\n            //TODO: solve error\n            ammMapState.statusUnset();\n            tokenState.statusUnset();\n            setState('ERROR');\n        }else if(ammMapState.status ===\"DONE\" && tokenState.status === \"DONE\"){\n            ammMapState.statusUnset();\n            tokenState.statusUnset();\n            //TODO socket\n            // socketState.socketStart();\n            setState('DONE');\n        }\n    },[ammMapState,tokenState])\n\n    // React.useEffect(()=>{\n    //\n    // },[])\n\n\n\n    return {\n        state,\n    }\n\n}\n","export enum Theme {\n    dark = 'dark',\n    light = 'light',\n}\n\nexport enum LangType {\n    en = 'en_US',\n    cn = 'zh_CN',\n}\n\nexport enum SystemStatus {\n    NORMAL,\n    ERROR,\n    UNKNOWN,\n}\n\nexport enum MODAL_TYPE {\n    UNKNOWN,\n    LOADING,\n    WALLET,\n}\n\nexport const REFRESH_RATE = 1000\n\nexport const REFRESH_RATE_SLOW = 15000\n","import { useCallback } from \"react\";\nimport { useDispatch } from \"react-redux\"\n\nimport {\n    setShowDeposit,\n    setShowResetAccount,\n    setShowTransfer,\n    setShowWithdraw,\n} from '@loopring-web/component-lib'\nimport { useTranslation } from \"react-i18next\";\nimport store from 'stores'\nimport { AccountStatus } from \"state_machine/account_machine_spec\";\n\nexport function useModals() {\n\n    const dispatch = useDispatch()\n\n    const { t } = useTranslation('common')\n\n    const ShowDeposit = useCallback((isShow: boolean)=>{\n        const isNoAccount = store.getState().account.status === AccountStatus.NOACCOUNT\n\n        console.log('isNoAccount: ', isNoAccount, t('depositTitleAndActive'))\n        const action = {\n            isShow,\n            props: {\n                title: isNoAccount ? t('depositTitleAndActive') : t('depositTitle'),\n                description: 'depositAndActiveDescription'\n            }\n        }\n        dispatch(setShowDeposit(action))\n    }, [dispatch, t])\n    const ShowTransfer = useCallback((isShow: boolean)=>dispatch(setShowTransfer({isShow})), [dispatch])\n    const ShowWithdraw = useCallback((isShow: boolean)=>dispatch(setShowWithdraw({isShow})), [dispatch])\n    const ShowResetAccount = useCallback((isShow: boolean)=>dispatch(setShowResetAccount({isShow})), [dispatch])\n\n    return {\n        ShowDeposit,\n        ShowTransfer,\n        ShowWithdraw,\n        ShowResetAccount,\n    }\n}","import { REFRESH_RATE } from \"defs/common_defs\"\n\nexport function PromiseJob(fetchPromise: any, setFunc: any, field?: string, prefix: any = 'PromiseJob') {\n\n    let mounted = true\n\n    const handler = () => {\n        if (fetchPromise()) {\n            fetchPromise().then((data: any) => {\n                if (mounted) {\n                    setFunc(field ? data[field] : data)\n                } else {\n                    console.log(prefix + ' unmounted!')\n                }\n            }).catch((reason: any) => {\n                console.error(reason)\n            })\n        }\n    }\n\n    const cleanUp = () => {\n        mounted = false\n    }\n\n    return {\n        handler,\n        cleanUp,\n    }\n\n}\n\n\nexport function PromiseJobInTimer(fetchPromise: any, setFunc: any, field?: string, prefix: any = 'PromiseJobInTimer', timeout: number = REFRESH_RATE) {\n\n    let mounted = true\n\n    const handler = () => {\n\n        mounted = true\n\n        const fetchFunc = () => {\n            if (fetchPromise()) {\n                fetchPromise().then((data: any) => {\n                    if (mounted) {\n                        setFunc(field ? data[field] : data)\n                    } else {\n                        console.log(prefix + ' unmounted!')\n                    }\n                }).catch((reason: any) => {\n                    console.error(reason)\n                })\n            }\n        }\n\n        fetchFunc()\n\n        const id = setInterval(fetchFunc, timeout)\n\n        return id\n    }\n\n    const cleanUp = (handler: any) => {\n        mounted = false\n        if (handler) clearInterval(handler)\n    }\n\n    return {\n        handler,\n        cleanUp,\n    }\n\n}\n","import { useEffect } from 'react'\nimport { PromiseJob, PromiseJobInTimer } from '../../utils/hook_tools'\nimport { REFRESH_RATE_SLOW } from \"defs/common_defs\"\n\nexport function usePromiseJob(fetchPromise: any, setFunc: any, field? :string, prefix: any = undefined, dependencies: any[] = []) {\n\n  const {\n    handler,\n    cleanUp,\n  } = PromiseJob(fetchPromise, setFunc, field, prefix)\n\n  useEffect(() => {\n    handler()\n    return () => cleanUp()\n  }, dependencies)\n\n}\n\nexport function usePromiseJobInTimer(fetchPromise: any, setFunc: any, field? :string, \n  prefix: any = undefined, dependencies: any[] = [], timeout: number= REFRESH_RATE_SLOW) {\n  const {\n    handler,\n    cleanUp,\n  } = PromiseJobInTimer(fetchPromise, setFunc, field, prefix, timeout)\n\n  useEffect(() => {\n\n    const id = handler()\n    return () => cleanUp(id)\n  }, dependencies)\n\n}\n","import { useState, } from 'react'\n\nimport { TradesData, TickerData, DepthData, \n  TokensResponse,\n  MarketsResponse, } from 'loopring-sdk'\n\nimport { usePromiseJob } from 'hooks/common/useCommon'\nimport { useExchangeAPI, } from './useApi'\n\nexport function useGetGas() {\n\n  const [gas, setGas] = useState<any>()\n\n  const api = useExchangeAPI()\n\n  const fetchData = () => {\n    if (!api) {\n      return undefined\n    }\n    return api.getGasPrice()\n  }\n\n  usePromiseJob(fetchData, setGas, undefined, 'useGetGas', [api])\n\n  return { gas }\n\n}\n\nexport function useGetMixMarkets() {\n\n  const [markets, setMarkets] = useState<MarketsResponse>()\n    const api = useExchangeAPI()\n\n    const fetchData = () => {\n      if (!api) {\n        return undefined\n      }\n      return api.getMixMarkets()\n    }\n  \n    usePromiseJob(fetchData, setMarkets, undefined, 'useGetMarkets', [api])\n    \n    return { markets }\n\n}\n\nexport function useGetMarkets() {\n\n  const [markets, setMarkets] = useState<MarketsResponse>()\n    const api = useExchangeAPI()\n\n    const fetchData = () => {\n      if (!api) {\n        return undefined\n      }\n      return api.getMarkets()\n    }\n  \n    usePromiseJob(fetchData, setMarkets, undefined, 'useGetMarkets', [api])\n    \n    return { markets }\n\n}\n\nexport function useGetExchangeInfo() {\n\n  const [exchangeInfo, setExchangeInfo] = useState<any>()\n    const api = useExchangeAPI()\n\n    const fetchData = () => {\n      if (!api) {\n        return undefined\n      }\n      return api.getExchangeInfo()\n    }\n  \n    usePromiseJob(fetchData, setExchangeInfo, 'exchangeInfo', 'useGetExchangeInfo', [api])\n    \n    return { exchangeInfo }\n\n}\n\nexport function useGetTokens() {\n\n  const [tokens, setTokens] = useState<TokensResponse>()\n    const api = useExchangeAPI()\n\n    const fetchData = () => {\n      if (!api) {\n        return undefined\n      }\n      return api.getTokens()\n    }\n  \n    usePromiseJob(fetchData, setTokens, undefined, 'useGetTokens', [api])\n    \n    return { tokens }\n\n}\n\n\nexport function useTrades(symbol: string) {\n\n  const [trades, setTrades] = useState<TradesData>()\n\n  const api = useExchangeAPI()\n\n  const fetchData = () => {\n    if (!api) {\n      return undefined\n    }\n    return api.getMarketTrades({\n      market: symbol\n    })\n  }\n\n  usePromiseJob(fetchData, setTrades, undefined, 'useTrades', [api, symbol])\n\n  return { trades, }\n\n}\n\nexport function useTickerMap(market: string) {\n\n  const [tickerMap, setTickerMap] = useState<{[key: string]: TickerData}>()\n\n  const api = useExchangeAPI()\n\n  const fetchData = () => {\n    if (!api) {\n      return undefined\n    }\n    return api.getTicker({\n      market\n    })\n  }\n\n  usePromiseJob(fetchData, setTickerMap, 'tickMap', 'useTickerMap', [api, market])\n\n  return { tickerMap, }\n\n}\n\nexport function useDepth(symbol: string) {\n\n  const api = useExchangeAPI()\n\n  const [depth, setDepth] = useState<DepthData>()\n\n    const fetchData = () => {\n      if (!api) {\n        return undefined\n      }\n      return api.getMixDepth({\n        market: symbol\n      })\n    }\n  \n    usePromiseJob(fetchData, setDepth, 'depth', 'useDepth', [api, symbol])\n\n  return { depth, }\n\n}\n","import React, { useCallback } from 'react'\n\nimport { useTranslation, WithTranslation, withTranslation } from 'react-i18next'\n\nimport {\n    gatewayList as DefaultGatewayList,\n    headerMenuData, HeaderMenuTabStatus,\n    headerToolBarData, HeadMenuTabKey,\n    ButtonComponentsMap, LanguageKeys,\n    WalletStatus, HideIcon,\n    GatewayItem, ViewIcon, ThemeKeys, LockIcon, UnLockIcon,\n} from '@loopring-web/component-lib/src/static-resource'\n\nimport { useAccount, useUnlock, useConnect, } from 'stores/account/hook'\n\nimport { getShortAddr } from 'utils/web3_tools'\n\nimport { AccountStatus } from 'state_machine/account_machine_spec'\n\nimport { useCustomDCEffect } from 'hooks/common/useCustomDCEffect'\n\nimport { Theme, } from 'defs/common_defs'\n\nimport { Button, SwapProps, useOpenModals, useSettings } from '@loopring-web/component-lib'\n\nimport store from 'stores'\n\nimport { ConnectorNames } from 'loopring-sdk'\nimport { IconButton, Typography } from '@material-ui/core';\nimport { AccountInfoProps } from '@loopring-web/component-lib/components/block';\nimport { useEtherscan } from 'hooks/web3/useWeb3'\n\nimport { useModals } from 'hooks/modal/useModals'\n\nimport {useState } from 'react'\nimport Web3 from 'web3'\n\nimport { AmmData, AmmInData, CoinInfo, CoinMap, IBData, TradeCalcData, WalletCoin, WalletMap, } from '@loopring-web/component-lib/static-resource'\nimport { AmmProps } from '@loopring-web/component-lib'\n\nimport { useExchangeAPI, useUserAPI } from 'hooks/exchange/useApi'\n\nimport { fromWEI, getIcon } from 'utils/swap_calc_utils'\nimport { useWeb3Account } from 'stores/account/hook'\nimport { useGetExchangeInfo, useGetTokens } from 'hooks/exchange/useExchangeAPI'\n\nimport * as contract from 'loopring-sdk'\n\nimport { Lv2Account } from 'defs/account_defs'\n\nimport {\n    ExchangeAPI,\n    dumpError400,\n    GetNextStorageIdRequest,\n    GetOffchainFeeAmtRequest,\n    OffchainFeeReqType,\n    OffChainWithdrawalRequestV3,\n    OriginTransferRequestV3,\n    TokenInfo,\n    VALID_UNTIL,\n} from 'loopring-sdk'\n\nimport { useGetUserBalances } from 'hooks/exchange/useUserAPI'\n\nimport {\n    DepositProps,\n    ResetProps,\n    SwitchData,\n    TradeBtnStatus,\n    TransferProps,\n    WithdrawProps,\n} from '@loopring-web/component-lib'\n\nimport { WithdrawType, WithdrawTypes } from '@loopring-web/component-lib/src/static-resource'\nimport { ButtonProps } from '@loopring-web/component-lib/components/basic-lib/index';\nimport { CoinType } from '@loopring-web/component-lib/static'\nimport { useDispatch } from 'react-redux'\n\nexport const useHeader = () => {\n    const { i18n,t } = useTranslation(['common','layout'])\n    const { setTheme,themeMode,language, setLanguage } = useSettings();\n    const { ShowDeposit } = useModals()\n    const { modals:{isShowAccountInfo,isShowConnect}, setShowConnect, setShowAccountInfo }  = useOpenModals()\n \n    const [openConnect, setOpenConnect] = React.useState(false)\n\n    const forceUpdate = React.useReducer((bool) => !bool, false)[1]\n    const { account } = useAccount()\n\n    const { lock, unlock } = useUnlock()\n\n    const { connect } = useConnect()\n\n    const { etherscanUrl } = useEtherscan()\n\n    const dispatch = useDispatch()\n\n    const gatewayList: GatewayItem[] = [\n        {\n            ...DefaultGatewayList[0],\n            handleSelect: () => {\n                console.log('try to connect to ', ConnectorNames.Injected)\n                connect(ConnectorNames.Injected, true)\n                setShowConnect({isShow: false})\n            }\n        },\n        /*\n        {\n            key: ConnectorNames.WalletConnect,\n            imgSrc: '',\n            handleSelect: () => {\n                connect(ConnectorNames.WalletConnect)\n                setOpen(false)\n            }\n        },\n        {\n            key: ConnectorNames.Ledger,\n            imgSrc: '',\n            handleSelect: () => {\n                connect(ConnectorNames.Ledger)\n                setOpen(false)\n            }\n        },\n        {\n            key: ConnectorNames.Trezor,\n            imgSrc: '',\n            handleSelect: () => {\n                connect(ConnectorNames.Trezor)\n                setOpen(false)\n            }\n        },\n        */\n    ]\n    // const [showAccountInfo, setShowAccountInfo] = React.useState(account?.accAddr ? true : false)\n    const [accountInfoProps, setAccountInfoProps] = React.useState<undefined|AccountInfoProps>(undefined)\n    //const theme: any = useTheme()\n\n    const onNotification = React.useCallback(async () => {\n        console.log('onNotification click')\n    }, [])\n\n    const onWalletBtnConnect = React.useCallback(async () => {\n        const acc = store.getState().account\n        console.log(`onWalletBtnConnect click: ${acc.status}`)\n\n        switch (acc.status) {\n            case AccountStatus.NOACCOUNT:\n                ShowDeposit(true)\n                break\n            case AccountStatus.UNCONNNECTED:\n                setShowConnect({isShow:true})\n                break\n            case AccountStatus.CONNECTED:\n            case AccountStatus.LOCKED:\n            case AccountStatus.ACTIVATED:\n                setShowAccountInfo({isShow:true})\n                break\n            default:\n                // console.log('setOpenConnect(true)')\n                // setOpenConnect(true)\n                break\n        }\n    }, [setShowConnect, lock, unlock, ShowDeposit, setShowAccountInfo])\n\n    const onThemeBtnClick = React.useCallback(async (themeMode:ThemeKeys) => {\n        if (themeMode === Theme.dark) {\n            setTheme(Theme.light)\n        } else {\n            setTheme(Theme.dark)\n        }\n    }, [setTheme])\n\n    const onLangBtnClick = (lang: LanguageKeys) => {\n        //i18n.changeLanguage(lang);\n        setLanguage(lang);\n    }\n\n\n    useCustomDCEffect(() => {\n\n\n        headerToolBarData[ButtonComponentsMap.WalletConnect] = {\n            ...headerToolBarData[ButtonComponentsMap.WalletConnect],\n            handleClick: onWalletBtnConnect,\n        }\n\n        // headerToolBarData[ButtonComponentsMap.Notification] = { ...headerToolBarData[ButtonComponentsMap.Theme], themeMode: theme.mode, handleClick: onNotification }\n        // headerToolBarData.update(ButtonComponentsMap.WalletConnect,value=>{\n        //   return {...value, handleClick:onWalletBtnConnect}});\n        headerToolBarData[ButtonComponentsMap.Theme] = { ...headerToolBarData[ButtonComponentsMap.Theme], themeMode, handleClick: onThemeBtnClick }\n        // headerToolBarData.update(ButtonComponentsMap.Theme,value=>{\n        //   return {...value, themeMode:theme.mode, handleClick:onThemeBtnClick}});\n\n        headerToolBarData[ButtonComponentsMap.Language] = { ...headerToolBarData[ButtonComponentsMap.Language], handleChange: onLangBtnClick }\n        // headerToolBarData.update(ButtonComponentsMap.Language,value=>{\n        //  return  {...value, language:i18n.language, handleClick:onThemeBtnClick}});\n    }, [themeMode, language, i18n, onWalletBtnConnect, onThemeBtnClick, onLangBtnClick, onNotification, t]);\n\n\n    const UnlockBtn = ({onClick}:{onClick:({...props}:any)=>void})=>{\n        return <Button className={'unlock'}  startIcon={<LockIcon fontSize={'large'}/>}\n                       onClick={(event)=>{\n                           onClick(event)\n                       }} variant={'outlined'} >\n            <Typography variant={'body2'} marginTop={1/2}>   {t('labelUnLock')} </Typography>\n        </Button>\n    }\n    const lockCallback = React.useCallback((event)=>{\n        lock(account)\n    } ,[account])\n    const unLockCallback = React.useCallback((event)=>{\n        unlock(account)\n    } ,[account])\n    const LockBtn = ({onClick}:{onClick:({...props}:any)=>void})=>{\n        return  <Button className={'lock'}  startIcon={<UnLockIcon fontSize={'large'}/>} \n        onClick={(event) => {\n            onClick(event)\n        } } variant={'outlined'} >\n            <Typography variant={'body2'} marginTop={1/2}>  {t('labelLock')} </Typography>\n        </Button>\n    }\n\n\n    useCustomDCEffect(() => {\n\n        if (!account) {\n            console.log('account'+account+'* exit')\n            setAccountInfoProps(undefined)\n            return\n        }\n\n        const { status } = account\n\n        const addr = getShortAddr(account?.accAddr)\n\n\n\n        // if((addr && accountInfoProps && accountInfoProps.address !== addr) || addr ){\n        //     //TODO getAccount detail info\n        //\n        // }else if(addr) {\n        //     setAccountInfoProps(undefined)\n        // }\n\n        const updateHeaderMenuWhenHasAccountInfo =  ({status}:{status:keyof  typeof AccountStatus})=>{\n            headerMenuData[HeadMenuTabKey.Layer2] = {\n                ...headerMenuData[HeadMenuTabKey.Layer2],\n                status: HeaderMenuTabStatus.default\n            }\n            let props;\n            if(status === AccountStatus.ACTIVATED) {\n                props = {\n                    addressShort: addr?addr:'',\n                    address: account?.accAddr,\n                    level: 'VIP 1',\n                    etherscanLink: etherscanUrl + account?.accAddr,\n                    //TODO: changed by account status\n                    mainBtn: <LockBtn onClick={(_event)=>{lockCallback(_event)}}/>,\n                    connectBy:''\n                }\n                setShowAccountInfo({isShow:false})\n            }else if(status === AccountStatus.LOCKED) {\n                props = {\n                    addressShort: addr?addr:'',\n                    address: account?.accAddr,\n                    level: 'VIP 1',\n                    etherscanLink: etherscanUrl + account?.accAddr,\n                    //TODO: changed by account status\n                    mainBtn: <UnlockBtn onClick={(_event)=>{unLockCallback(_event)}}/>,\n                    connectBy:''\n                }\n                setShowAccountInfo({isShow:true})\n            }else if(status === AccountStatus.UNACTIVATED\n                || status === AccountStatus.NOACCOUNT\n                || status === AccountStatus.DEPOSITING\n                || status === AccountStatus.DEPOSIT_TO_CONFIREM\n                || status === AccountStatus.ARPROVING\n                || status === AccountStatus.APPROV_TO_CONFIRM\n            )  {\n                props = {\n                    addressShort: addr?addr:'',\n                    address: account?.accAddr,\n                    //TODO: level\n                    level: 'VIP 1',\n                    etherscanLink: etherscanUrl + account?.accAddr,\n                    //TODO: changed by account status\n                    connectBy:''\n                }\n                setShowAccountInfo({isShow:false})\n            } else  {\n                setShowAccountInfo({isShow:false})\n            }\n\n\n            setAccountInfoProps(props)\n            // setShowAccountInfo(true);\n        }\n        switch (status) {\n            case AccountStatus.UNCONNNECTED:\n                headerToolBarData[ButtonComponentsMap.WalletConnect] = {\n                    ...headerToolBarData[ButtonComponentsMap.WalletConnect],\n                    label: 'Connect Wallet',\n                    status: WalletStatus.default\n                }\n                headerMenuData[HeadMenuTabKey.Layer2] = {\n                    //TODO:  HeaderMenuTabStatus.hidden\n                    ...headerMenuData[HeadMenuTabKey.Layer2], status: HeaderMenuTabStatus.hidden\n                }\n                setShowAccountInfo({isShow:false})\n                break\n            case AccountStatus.LOCKED:\n                headerToolBarData[ButtonComponentsMap.WalletConnect] = {\n                    ...headerToolBarData[ButtonComponentsMap.WalletConnect],\n                    label: addr,\n                    status: WalletStatus.connect\n                };\n\n                updateHeaderMenuWhenHasAccountInfo({status});\n                break\n            case AccountStatus.ACTIVATED:\n                headerToolBarData[ButtonComponentsMap.WalletConnect] = {\n                    ...headerToolBarData[ButtonComponentsMap.WalletConnect],\n                    label: addr,\n                    status: WalletStatus.unlock\n                }\n\n                updateHeaderMenuWhenHasAccountInfo({status});\n                break\n            case AccountStatus.UNACTIVATED:\n            case AccountStatus.NOACCOUNT:\n                headerToolBarData[ButtonComponentsMap.WalletConnect] = {\n                    ...headerToolBarData[ButtonComponentsMap.WalletConnect],\n                    // TODO got cache address if no show Connect Wallet\n                    label: addr,\n                    status: WalletStatus.noAccount\n                }\n\n                updateHeaderMenuWhenHasAccountInfo({status});\n                break\n            case AccountStatus.DEPOSITING:\n            case AccountStatus.DEPOSIT_TO_CONFIREM:\n            case AccountStatus.ARPROVING:\n            case AccountStatus.APPROV_TO_CONFIRM:\n                headerToolBarData[ButtonComponentsMap.WalletConnect] = {\n                    ...headerToolBarData[ButtonComponentsMap.WalletConnect],\n                    label: addr,\n                    status: WalletStatus.accountPending\n                }\n                updateHeaderMenuWhenHasAccountInfo({status});\n\n                break\n        }\n        forceUpdate()\n    }, [account, etherscanUrl, setAccountInfoProps])\n\n    return {\n        headerToolBarData,\n        headerMenuData,\n        gatewayList,\n        isShowConnect,\n        isShowAccountInfo,\n        setShowAccountInfo,\n        setShowConnect,\n        // open,\n        // setOpen,\n        // openConnect,\n        // setOpenConnect,\n        account,\n        accountInfoProps,\n\n    }\n\n}\n\nexport function useCoinMap(exchangeApi: ExchangeAPI, tokens: any) {\n\n    const [coinMap, setCoinMap] = useState<CoinMap<any, CoinInfo<any>>>({})\n\n    useCustomDCEffect(async () => {\n\n        if (!exchangeApi || !tokens) {\n            return\n        }\n\n        const keys = Reflect.ownKeys(tokens)\n\n        let coinMap: CoinMap<any, CoinInfo<any>> = {}\n\n        keys.forEach((key: any) => {\n\n            if (!(key as string).startsWith('LP-')) {\n                coinMap[ key ] = {\n                    icon: getIcon(key, tokens),\n                    name: key,\n                    simpleName: key,\n                    description: '',\n                    company: '',\n                }\n            }\n\n        })\n\n        setCoinMap(coinMap)\n\n    }, [exchangeApi, tokens])\n\n    return {\n        coinMap,\n    }\n\n}\n\nexport function useLv1WalletMap(exchangeApi: ExchangeAPI, account: Lv2Account, tokens: any) {\n\n    const [walletMap, setWalletMap] = useState<WalletMap<any, WalletCoin<any>>>({})\n\n    useCustomDCEffect(async () => {\n\n        if (!exchangeApi || !account || !account.accAddr || !tokens) {\n            return\n        }\n\n        let walletMap: WalletMap<any, WalletCoin<any>> = {}\n\n        const {tokenBalances} = await exchangeApi.getTokenBalances({\n            owner: account.accAddr, token: ''\n        }, tokens)\n\n        const keys = Reflect.ownKeys(tokenBalances)\n\n        keys.forEach((item: any) => {\n            const balance = tokenBalances[ item ]\n            walletMap[ item ] = {\n                belong: item,\n                count: fromWEI(tokens, item, balance) as any,\n            }\n        })\n\n        setWalletMap(walletMap)\n\n    }, [exchangeApi, account, tokens])\n\n    return {\n        walletMap,\n    }\n\n}\n\nexport function useLv2WalletMap(tokens: any) {\n\n    const {balances} = useGetUserBalances(tokens)\n\n    const [walletMap, setWalletMap] = useState<WalletMap<any, WalletCoin<any>>>({})\n\n    useCustomDCEffect(() => {\n        let walletMap: WalletMap<any, WalletCoin<any>> = {}\n        if (balances && balances.symbol) {\n            const keys = Reflect.ownKeys(balances.symbol)\n\n            keys.forEach((item: any) => {\n                const balance = balances.symbol[ item ]\n                walletMap[ item ] = {\n                    belong: item,\n                    count: fromWEI(tokens, item, balance) as any,\n                }\n            })\n        }\n\n        console.log('lv2:', walletMap)\n\n        setWalletMap(walletMap)\n    }, [balances, tokens])\n\n    return {\n        walletMap,\n    }\n\n}\n\nexport function useChargeFeeList(tokenSymbol: string | undefined, requestType: OffchainFeeReqType) {\n\n    const api = useUserAPI()\n\n    const {accountId, apiKey,} = useAccount()\n\n    const [chargeFeeList, setChargeFeeList] = useState<any>([])\n\n    useCustomDCEffect(async () => {\n\n        console.log('!!!!!!!!!useCustomDCEffect useChargeFeeList:', tokenSymbol, accountId)\n\n        if (!accountId || !tokenSymbol) {\n            return\n        }\n\n        let chargeFeeList: any[] = []\n\n        try {\n\n            const request: GetOffchainFeeAmtRequest = {\n                accountId,\n                tokenSymbol,\n                requestType,\n            }\n\n            const response = await api.getOffchainFeeAmt(request, apiKey)\n\n            if (response) {\n                response.raw_data.fees.forEach((item: any, index: number) => {\n                    chargeFeeList.push({belong: item.token, fee: item.fee})\n                })\n\n                setChargeFeeList(chargeFeeList)\n            }\n            console.log('response:', response)\n\n        } catch (reason) {\n            dumpError400(reason)\n        }\n\n\n        setChargeFeeList(chargeFeeList)\n\n    }, [accountId, apiKey, tokenSymbol])\n\n    return {\n        chargeFeeList,\n    }\n\n}\n\nexport function useModalProps() {\n\n    const {\n        ShowDeposit,\n        ShowTransfer,\n        ShowWithdraw,\n        ShowResetAccount,\n    } = useModals()\n\n    const {chainId, isConnected, connector,} = useWeb3Account()\n\n    const {exchangeInfo} = useGetExchangeInfo()\n\n    const {account, apiKey, accountId, eddsaKey,} = useAccount()\n\n    const {tokens: tokensAll} = useGetTokens()\n\n    const tokens = tokensAll?.tokenSymbolMap\n\n    const userApi = useUserAPI()\n\n    const exchangeApi = useExchangeAPI()\n\n    const {coinMap} = useCoinMap(exchangeApi, tokens)\n\n    const {walletMap: walletMap_Lv1} = useLv1WalletMap(exchangeApi, account, tokens)\n\n    const {walletMap: walletMap_Lv2} = useLv2WalletMap(tokens)\n\n    const deposit = useCallback(async (token: string, amt: any) => {\n\n        if (!tokens || !isConnected || !connector || !exchangeInfo?.exchangeAddress || !exchangeInfo?.depositAddress) {\n            console.log(`exchangeInfo:${exchangeInfo} deposit exit!!!!!`)\n            return\n        }\n\n        try {\n            const tokenInfo: TokenInfo = tokens[ token ]\n\n            const provider = await connector.getProvider()\n            const web3 = new Web3(provider as any)\n\n            let sendByMetaMask = account.connectName === ConnectorNames.Injected\n            sendByMetaMask = true\n\n            const gasPrice = (await exchangeApi.getGasPrice()).gasPrice / 1e+9\n            const gasLimit = 350000\n\n            const nonce = await contract.getNonce(web3, account.accAddr)\n\n            console.log('gasPrice:', gasPrice)\n            console.log('account.connectName:', account.connectName, ' tokenInfo:', tokenInfo)\n\n            const response = await contract.approveMax(web3, account.accAddr, tokenInfo.address,\n                exchangeInfo?.depositAddress, gasPrice, gasLimit, chainId, nonce, sendByMetaMask)\n\n            console.log('response:', response)\n\n            const fee = 0\n\n            const response2 = await contract.deposit(web3, account.accAddr,\n                exchangeInfo?.exchangeAddress, tokenInfo, amt, fee,\n                gasPrice, gasLimit, chainId, nonce + 1, sendByMetaMask)\n\n            console.log('response2:', response2)\n\n\n        } catch (reason) {\n            dumpError400(reason)\n        }\n\n    }, [chainId, isConnected, connector, account, exchangeInfo, tokens, exchangeApi])\n\n    const withdraw = useCallback(async (token: string, amt: any) => {\n\n        console.log('withdraw apiKey:', apiKey, ' exchangeInfo:', exchangeInfo, ' exchangeAddr:', exchangeInfo.exchangeAddress)\n\n        if (!account || !account.accountId || !account.accAddr\n            || !connector || !chainId || !apiKey || !exchangeInfo\n            || !exchangeInfo.exchangeAddress) {\n            console.log('return directly!!!!!', account, connector, chainId, apiKey, exchangeInfo)\n            return\n        }\n\n        amt = '5500000000000000000'\n\n        const fee = '5500000000000000000'\n\n        console.log('exchangeAddress:', exchangeInfo.exchangeAddress)\n\n        try {\n\n            const request: GetNextStorageIdRequest = {\n                accountId: account.accountId,\n                sellTokenId: 1\n            }\n\n            const storageId = await userApi.getNextStorageId(request, apiKey)\n\n            const request2: OffChainWithdrawalRequestV3 = {\n                exchange: exchangeInfo.exchangeAddress,\n                owner: account.accAddr,\n                to: account.accAddr,\n                accountId: account.accountId,\n                storageId: storageId.offchainId,\n                token: {\n                    tokenId: '1',\n                    volume: '100000000000000000000',\n                },\n                maxFee: {\n                    tokenId: '1',\n                    volume: '9400000000000000000',\n                },\n                extraData: '',\n                minGas: 0,\n                validUntil: VALID_UNTIL,\n            }\n\n            const provider = await connector.getProvider()\n            const web3 = new Web3(provider as any)\n\n            const response = await userApi.submitOffchainWithdraw(request2, web3, chainId, ConnectorNames.Injected,\n                account.eddsaKey, apiKey, false)\n\n            console.log(response)\n\n        } catch (reason) {\n            dumpError400(reason)\n        }\n\n    }, [apiKey, account, connector, exchangeInfo, chainId, userApi])\n\n    const transfer = useCallback(async (amt: number, payeeAddr: string = '0xb6AdaC3e924B4985Ad74646FEa3610f14cDFB79c') => {\n\n        if (!connector || !apiKey || !chainId || !accountId || !account?.accAddr) {\n            return\n        }\n\n        const request: GetNextStorageIdRequest = {\n            accountId,\n            sellTokenId: 1\n        }\n        const storageId = await userApi.getNextStorageId(request, apiKey)\n\n        console.log(`amt: ${amt} storageId:${JSON.stringify(storageId)}`)\n\n        try {\n\n            const provider = await connector.getProvider()\n            const web3 = new Web3(provider as any)\n\n            let walletType = account.connectName\n            walletType = ConnectorNames.Injected\n\n            const payeeAcc = await exchangeApi.getAccount({owner: payeeAddr})\n\n            let payeeId = 0\n            if (payeeAcc) {\n                payeeId = payeeAcc.accInfo.accountId\n            }\n\n            const request2: OriginTransferRequestV3 = {\n                exchange: exchangeInfo.exchangeAddress,\n                payerAddr: account.accAddr,\n                payerId: accountId,\n                payeeAddr,\n                payeeId,\n                storageId: storageId.offchainId,\n                token: {\n                    tokenId: '1',\n                    volume: '100000000000000000000',\n                },\n                maxFee: {\n                    tokenId: '1',\n                    volume: '9400000000000000000',\n                },\n                validUntil: VALID_UNTIL,\n            }\n\n            console.log(`request2:${JSON.stringify(request2)}`)\n\n            const response = await userApi.submitInternalTransfer(request2, web3, chainId, walletType,\n                eddsaKey, apiKey, false)\n\n            console.log(response)\n\n        } catch (reason) {\n            dumpError400(reason)\n        }\n\n    }, [apiKey, accountId, account, connector, exchangeInfo, chainId, eddsaKey, userApi, exchangeApi])\n\n    const [depositValue, setDepositValue] = useState<IBData<any>>({\n        belong: undefined,\n        tradeValue: 0,\n        balance: 0\n    } as IBData<unknown>)\n\n    // deposit\n\n    let depositProps: DepositProps<any, any> = {\n        tradeData: {belong: undefined},\n        coinMap: coinMap,\n        walletMap: walletMap_Lv1,\n        depositBtnStatus: TradeBtnStatus.AVAILABLE,\n        onDepositClick: (tradeData: any) => {\n            console.log('1. onDepositClick', depositValue)\n            if (depositValue && depositValue.belong) {\n                deposit(depositValue.belong.toString(), depositValue.tradeValue)\n            }\n            ShowDeposit(false)\n        },\n        handlePanelEvent: async (data: SwitchData<any>, switchType: 'Tomenu' | 'Tobutton') => {\n            return new Promise((res) => {\n                if (data?.tradeData?.belong) {\n                    if (depositValue !== data.tradeData) {\n                        setDepositValue(data.tradeData)\n                    }\n                    setTokenSymbol(data.tradeData.belong)\n                } else {\n                    setDepositValue({belong: undefined, tradeValue: 0, balance: 0} as IBData<unknown>)\n                }\n                res();\n            })\n        },\n    }\n\n    // withdraw\n    const [withdrawValue, setWithdrawValue] = useState<IBData<any>>({\n        belong: undefined,\n        tradeValue: 0,\n        balance: 0\n    } as IBData<unknown>);\n\n    const [tokenSymbol, setTokenSymbol] = useState<string>('')\n    const {chargeFeeList: withdrawalFeeList} = useChargeFeeList(tokenSymbol, OffchainFeeReqType.OFFCHAIN_WITHDRAWAL)\n\n    let withdrawProps: WithdrawProps<any, any> = {\n        tradeData: {belong: undefined},\n        coinMap: coinMap,\n        walletMap: walletMap_Lv2,\n        withdrawBtnStatus: TradeBtnStatus.AVAILABLE,\n        onWithdrawClick: (tradeData: any) => {\n            console.log('Swap button click', withdrawValue)\n            if (withdrawValue && withdrawValue.belong) {\n                withdraw(withdrawValue.belong.toString(), withdrawValue.tradeValue)\n            }\n            ShowWithdraw(false)\n        },\n\n        handlePanelEvent: async (data: SwitchData<any>, switchType: 'Tomenu' | 'Tobutton') => {\n            return new Promise((res: any) => {\n                if (data?.tradeData?.belong) {\n                    if (withdrawValue !== data.tradeData) {\n                        setWithdrawValue(data.tradeData)\n                    }\n                    setTokenSymbol(data.tradeData.belong)\n                } else {\n                    setWithdrawValue({belong: undefined, tradeValue: 0, balance: 0} as IBData<unknown>);\n                }\n                res();\n            })\n        },\n        withdrawType: WithdrawType.Fast,\n        withdrawTypes: WithdrawTypes,\n        chargeFeeToken: 'ETH',\n        chargeFeeTokenList: withdrawalFeeList,\n        handleOnAddressChange: (value: any) => {\n            console.log('handleOnAddressChange', value);\n        },\n        handleAddressError: (_value: any) => {\n            return {error: true, message: 'any error'}\n        }\n    }\n    // console.log(coinMap)\n    // transfer\n    const [transferValue, setTransferValue] = useState<IBData<any>>({\n        belong: undefined,\n        tradeValue: 0,\n        balance: 0\n    } as IBData<unknown>)\n\n    const [transferTokenSymbol, setTransferTokenSymbol] = useState<string>('')\n    const {chargeFeeList: transferFeeList} = useChargeFeeList(transferTokenSymbol, OffchainFeeReqType.TRANSFER)\n\n    let transferProps: TransferProps<any, any> = {\n        tradeData: {belong: undefined},\n        coinMap: coinMap,\n        walletMap: walletMap_Lv2,\n        transferBtnStatus: TradeBtnStatus.AVAILABLE,\n        onTransferClick: (tradeData: any) => {\n            console.log('onTransferClick:', transferValue);\n            if (transferValue && transferValue.belong) {\n                transfer(transferValue.tradeValue)\n            }\n\n            ShowTransfer(false)\n        },\n\n        handlePanelEvent: async (data: SwitchData<any>, switchType: 'Tomenu' | 'Tobutton') => {\n            return new Promise((res: any) => {\n                if (data?.tradeData?.belong) {\n                    if (transferValue !== data.tradeData) {\n                        setTransferValue(data.tradeData)\n                    }\n                    setTransferTokenSymbol(data.tradeData.belong)\n                } else {\n                    setTransferValue({belong: undefined, tradeValue: 0, balance: 0} as IBData<unknown>)\n                }\n                // else{\n                //     setTransferValue({ belong: undefined, amt: 0 })\n                // }\n\n                res();\n            })\n        },\n\n        chargeFeeToken: 'ETH',\n        chargeFeeTokenList: transferFeeList,\n        handleOnAddressChange: (value: any) => {\n            console.log('handleOnAddressChange', value);\n        },\n        handleAddressError: (_value: any) => {\n            return {error: true, message: 'any error'}\n        }\n    }\n\n    // reset\n    const [resetValue, setResetValue] = useState<IBData<any>>({\n        belong: undefined,\n        tradeValue: 0,\n        balance: 0\n    } as IBData<unknown>)\n\n\n    let resetProps: ResetProps<any, any> = {\n        tradeData: {belong: undefined},\n        coinMap: coinMap,\n        walletMap: walletMap_Lv2,\n        resetBtnStatus: TradeBtnStatus.AVAILABLE,\n        onResetClick: (tradeData: any) => {\n            console.log('onResetClick', resetValue)\n            if (resetValue && resetValue.belong) {\n            }\n\n            ShowResetAccount(false)\n        },\n        handlePanelEvent: async (data: SwitchData<any>, switchType: 'Tomenu' | 'Tobutton') => {\n            return new Promise((res) => {\n                if (data?.tradeData?.belong) {\n                    if (resetValue !== data.tradeData) {\n                        setResetValue(data.tradeData)\n                    }\n                } else {\n                    setResetValue({belong: undefined, tradeValue: 0, balance: 0} as IBData<unknown>)\n                }\n\n                res();\n            })\n        },\n        fee: {count: 234, price: 123}\n    }\n\n     const tradeCalcData: TradeCalcData<CoinType> = {\n        coinSell: 'ETH', //name\n        coinBuy: 'LRC',\n        BtoS: 0,\n        StoB: 0,\n        sellCoinInfoMap: coinMap,\n        buyCoinInfoMap: coinMap,\n        walletMap: {},\n        slippage: 0.5,\n        // slippageTolerance: [0.1, 0.5, 1, 'slippage:N'],\n        priceImpact: '12',\n        minimumReceived: '1%',\n        fee: '1%'\n    }\n     const ammCalcData: AmmInData<CoinType> = {\n        myCoinA: {belong:'ETH',balance:1000,tradeValue:0},\n        myCoinB: {belong:'LRC',balance:1000,tradeValue:0},\n        AtoB:50,\n        coinInfoMap: coinMap,\n        slippage: 0.5,\n        // slippageTolerance: [0.1, 0.5, 1, 'slippage:N'],\n        fee: '1%'\n    }\n\n\n    let swapProps: SwapProps<IBData<string>, string, any> = {\n        tradeData: undefined,\n        tradeCalcData,\n        onSwapClick: (tradeData) => {\n            console.log('Swap button click', tradeData);\n        },\n        handleSwapPanelEvent: async (data: any, switchType: any) => {\n            console.log(data, switchType)\n        },\n    };\n    let ammProps: AmmProps<AmmData<IBData<any>>, any, AmmInData<any>> = {\n        ammDepositData:{coinA: {belong: 'ETH',balance:0.3,tradeValue:0}, coinB:  {belong: 'LRC',balance:1000,tradeValue:0},slippage: '',},\n        ammWithdrawData:{coinA: {belong: 'ETH',balance:0.3,tradeValue:0}, coinB:  {belong: 'LRC',balance:1000,tradeValue:0},slippage: '',},\n        // tradeCalcData,\n        ammCalcData:ammCalcData,\n        handleDepositEvent: (data,type) => {\n            console.log('handleDepositEvent',data,type) ;\n        },\n        handleWithDrawEvent:  (data,type) => {\n            console.log('handleWithDrawEvent',data,type) ;\n        },\n        onAmmWithdrawClick: (data)=>{\n            console.log('onAmmWithdrawClick',data) ;\n        },\n        onAmmDepositClick: (data)=>{\n            console.log('onAmmDepositClick',data) ;\n        }\n    }\n\n    return {\n        depositProps, withdrawProps, transferProps, resetProps, ammProps, swapProps,\n    }\n}\n","import { useState, useCallback } from 'react'\n\nimport { useAccount } from 'stores/account/hook'\n\nimport { OrdersData, dumpError400, } from 'loopring-sdk'\n\nimport { REFRESH_RATE } from 'defs/common_defs'\n\nimport { useUserAPI } from './useApi'\n\nimport { getToken, fromWEI } from 'utils/swap_calc_utils'\n\nimport * as fm from 'loopring-sdk'\n\nimport { useCustomDCEffect } from 'hooks/common/useCustomDCEffect'\n\nexport function useOrders() {\n\n  const acc = useAccount().account\n\n  const api = useUserAPI()\n\n  const [orders, setOrders] = useState<OrdersData>()\n\n  useCustomDCEffect(() => {\n\n    if (!acc || !api) {\n      return\n    }\n\n    let mounted = true\n\n    const exit = (id: any) => {\n      mounted = false\n      clearInterval(id)\n    }\n\n    if (acc && acc.accountId > 0) {\n\n      const id: any = setInterval(async () => {\n        try {\n          const { raw_data } = (await api.getOrders({\n            accountId: acc.accountId\n          }, acc.apiKey))\n          if (mounted) {\n            setOrders(raw_data)\n          }\n        } catch (err) {\n          return exit(id)\n        }\n      }, REFRESH_RATE)\n\n      return exit(id)\n\n    }\n  }, [acc, api])\n\n  return {\n    orders,\n  }\n\n}\n\nexport function useGetUserBalancesByToken(token: any) {\n\n  const api = useUserAPI()\n\n  //const [balance, setBalance] = useState<any>({total: '0', locked: '0', availableInWei: '0'})\n\n  const [balance, setBalance] = useState<any>('0')\n\n  const { apiKey, accountId } = useAccount()\n\n  // console.log('enter! useGetUserBalances tokens:', tokens, 'symbol:', symbol, 'apiKey:', apiKey, ' accountId:', accountId )\n\n  useCustomDCEffect(() => {\n    if (!api || !apiKey || !accountId || !token) {\n      return\n    }\n\n    api.getUserBalances({\n      accountId,\n      tokens: token.tokenId\n    }, apiKey).then((data) => {\n      const total = fm.toBig(data.userBalances[token.tokenId].total)\n      const locked = fm.toBig(data.userBalances[token.tokenId].locked)\n      const availableInWei = total.minus(locked)\n      /*\n      setBalance({\n        total: data[0].total, \n        locked: data[0].locked, \n        availableInWei: availableInWei.toString(),\n        available: fromWEI(tokens, symbol, availableInWei)\n      })\n      */\n      setBalance(availableInWei.toString())\n    }).catch((reason: any) => {\n      dumpError400(reason, 'getUserBalances tokenId:' + token.tokenId)\n    })\n\n  }, [api, apiKey, accountId, token,])\n\n  return {\n    balance,\n    setBalance,\n  }\n\n}\n\nexport function useGetUserBalances(tokens: any, toList: boolean = false) {\n\n  const api = useUserAPI()\n\n  //const [balance, setBalance] = useState<any>({total: '0', locked: '0', availableInWei: '0'})\n\n  const [balances, setBalances] = useState<any>(undefined)\n\n  const { apiKey, accountId } = useAccount()\n\n  // console.log('enter! useGetUserBalances tokens:', tokens, 'symbol:', symbol, 'apiKey:', apiKey, ' accountId:', accountId )\n\n  useCustomDCEffect(() => {\n\n    if (!api || !apiKey || !accountId || !tokens) {\n      return\n    }\n\n    let tokenList: any[] = []\n\n    const keys = Reflect.ownKeys(tokens)\n\n    let tokenMap: any = {}\n\n    keys.forEach((item: any) => {\n      const token = tokens[item]\n      tokenList.push(token.tokenId)\n      tokenMap[token.tokenId] = token\n    })\n\n    api.getUserBalances({\n      accountId,\n      tokens: tokenList.join(',')\n    }, apiKey).then((data) => {\n\n      let balances: any = {\n        map: tokenMap,\n        tokenId: {},\n        symbol: {},\n      }\n\n      data.raw_data.forEach((item: any) => {\n        const total = fm.toBig(item.total)\n        const locked = fm.toBig(item.locked)\n        const availableInWei = total.minus(locked)\n\n        console.log('item:', item)\n\n        const token = tokenMap[item.tokenId]\n\n        balances.tokenId[item.tokenId] = availableInWei.toString()\n        balances.symbol[token.symbol] = availableInWei.toString()\n      })\n\n      setBalances(balances)\n\n    }).catch((reason: any) => {\n      dumpError400(reason, 'getUserBalances tokenId:' + tokens.tokenId)\n    })\n\n  }, [api, apiKey, accountId, tokens,])\n\n  return {\n    balances,\n    setBalances,\n  }\n\n}\n\nexport function useGetUserBalance(tokens: any, symbol: any) {\n\n  const api = useUserAPI()\n\n  //const [balance, setBalance] = useState<any>({total: '0', locked: '0', availableInWei: '0'})\n\n  const [balance, setBalance] = useState<any>('0')\n\n  const { apiKey, accountId } = useAccount()\n\n  useCustomDCEffect(() => {\n    if (!api || !apiKey || !accountId || !tokens || !symbol) {\n      return\n    }\n\n    const tokenInfo = getToken(tokens, symbol)\n\n    api.getUserBalances({\n      accountId,\n      tokens: tokenInfo.tokenId\n    }, apiKey).then((data) => {\n      const total = fm.toBig(data.userBalances[tokenInfo.tokenId].total)\n      const locked = fm.toBig(data.userBalances[tokenInfo.tokenId].locked)\n      const availableInWei = total.minus(locked)\n      \n      setBalance(availableInWei.toString())\n\n    }).catch((reason: any) => {\n      dumpError400(reason, 'getUserBalances tokenId:' + tokens.tokenId)\n    })\n\n  }, [api, apiKey, accountId, tokens, symbol,])\n\n  return {\n    balance,\n    setBalance,\n  }\n\n}","export function deepClone(data: any) {\n    if (!data || !(data instanceof Object) || (typeof data == \"function\")) {\n        return data || undefined\n    }\n    let constructor = data.constructor\n    let result = new constructor()\n    for (let key in data) {\n        if (data.hasOwnProperty(key)) {\n            result[key] = deepClone(data[key])\n        }\n    }\n    return result\n}\n\nexport function copyToClipBoard(text: string){ //复制到剪切板\n\n    if(document.execCommand){\n        var textarea =document.createElement('textarea')\n        document.body.appendChild(textarea)\n        textarea.value=text\n        textarea.select()\n        document.execCommand(\"Copy\")\n        document.body.removeChild(textarea)\n\t}\n\n\tif((window as any).clipboardData){\n        (window as any).clipboardData.setData(\"Text\", text)\n        return true\n    }\n\treturn false\n}","import { WithTranslation, withTranslation } from 'react-i18next';\nimport { Box, Modal } from '@material-ui/core';\nimport { ModalCloseButton, ModalContentStyled, ModalQRCode } from '@loopring-web/component-lib';\nimport React from 'react';\nimport { AccountInfo, AccountInfoProps } from '@loopring-web/component-lib';\n\nexport const ModalAccountInfo = withTranslation('common')(({\n                                                               onClose,\n                                                               open,\n                                                               t,\n                                                               ...rest\n                                                           }: { open:boolean, onClose:(e:any)=>void} & AccountInfoProps & WithTranslation) => {\n\n\n    return <Modal\n        open={open}\n        onClose={onClose}\n        aria-labelledby=\"Account information\"\n        aria-describedby=\"show layer2 address, unlock/locked loopring wallet, copy address\"\n    >\n        <ModalContentStyled style={{boxShadow: '24'}}>\n            <Box paddingTop={3} paddingBottom={3} display={'flex'} flexDirection={'column'} minWidth='var(--modal-width)'>\n                <ModalCloseButton onClose={onClose} {...{...rest, t}} />\n                <AccountInfo {...rest}/>\n            </Box>\n\n        </ModalContentStyled>\n    </Modal>\n})","import React, { useCallback, useState, } from 'react'\n\nimport {\n    Header as HeaderUI,\n    HideOnScroll,\n    ModalWalletConnect,\n    AccountInfo,\n    ModalCloseButton,\n} from '@loopring-web/component-lib'\n\nimport { headerRoot } from '@loopring-web/component-lib/src/static-resource'\n\nimport { useLocation } from 'react-router-dom'\n\nimport { Toolbar, Snackbar, Alert, } from '@material-ui/core'\n\nimport { useHeader } from './hook'\n\nimport { useDisconnect, } from 'stores/account/hook'\nimport { ModalPanel, ModalQRCode, } from '@loopring-web/component-lib';\nimport { useGetExchangeInfo } from 'hooks/exchange/useExchangeAPI'\nimport { useModalProps } from './hook'\n\nimport { copyToClipBoard } from 'utils/obj_tools'\nimport { ModalAccountInfo } from '../../pages/AccountPage';\nimport { useTranslation } from 'react-i18next';\n\nconst Header = ({ ...rest }: any) => {\n\n    const {\n        depositProps,\n        withdrawProps,\n        transferProps,\n        resetProps,\n        ammProps,\n        swapProps,\n    } = useModalProps()\n\n    const location = useLocation()\n\n    const {\n        headerToolBarData,\n        headerMenuData,\n        gatewayList,\n        isShowConnect,\n        isShowAccountInfo,\n        setShowAccountInfo,\n        // setShowAccountInfo,\n        setShowConnect,\n        // open,\n        // setOpen,\n        // openConnect,\n        // setOpenConnect,\n        account,\n        accountInfoProps,\n        // showAccountInfo\n    } = useHeader()\n\n    const { exchangeInfo } = useGetExchangeInfo()\n\n    const { disconnect } = useDisconnect()\n\n    const onSwitch = useCallback(() => {\n        setShowAccountInfo({isShow:false})\n        setShowConnect({isShow:true})\n    }, [setShowConnect,setShowAccountInfo])\n\n    const [openQRCode, setOpenQRCode] = useState(false)\n\n    const [copyToastOpen, setCopyToastOpen] = useState(false);\n    const {t} = useTranslation('commom')\n\n    const closeCopyToast = () => { setCopyToastOpen(false) }\n\n    return (<>\n        <Snackbar open={copyToastOpen} autoHideDuration={2500} onClose={closeCopyToast}>\n            <Alert onClose={closeCopyToast} severity=\"success\">\n                {t('Address Copied to Clipboard!')}\n        </Alert>\n        </Snackbar>\n\n        <ModalQRCode open={openQRCode} onClose={() => setOpenQRCode(false)} title={'ETH Address'}\n            description={account.accAddr} url={account.accAddr} />\n\n        <ModalPanel transferProps={transferProps} withDrawProps={withdrawProps} \n        depositProps={depositProps} resetProps={resetProps} ammProps={ammProps} swapProps={swapProps}/>\n\n        <HideOnScroll>\n            {process.env.NODE_ENV !== 'production' && JSON.stringify(account?.status)}\n            {process.env.NODE_ENV !== 'production' && ' exchangeAddress:' + JSON.stringify(exchangeInfo?.exchangeAddress)}\n\n            <HeaderUI {...rest} headerMenuData={headerMenuData} headerToolBarData={headerToolBarData}\n                selected={location.pathname === '/' ? headerRoot : location.pathname}></HeaderUI>\n\n        </HideOnScroll>\n        <Toolbar />\n\n        <ModalWalletConnect {...{ ...rest, gatewayList, open:isShowConnect.isShow, onClose: () => setShowConnect({isShow:false}) }} />\n        {<ModalAccountInfo\n            open={isShowAccountInfo.isShow}\n            onClose={() => {setShowAccountInfo({isShow:false})}}\n            onCopy={() => {\n                copyToClipBoard(account.accAddr);\n                setCopyToastOpen(true)\n            }}\n            onViewQRCode={() => {\n                setOpenQRCode(true)\n            }}\n            onDisconnect={() => {\n                disconnect();\n                setShowAccountInfo({isShow:false});\n            }}\n            onSwitch={onSwitch}\n            {...{...accountInfoProps, ...rest}}></ModalAccountInfo>}\n    </>)\n}\n\n\nexport default Header\n\n\n\n","import styled from '@emotion/styled/macro'\n\nimport { MarketBlock, QuoteTable, TablePaddingX } from '@loopring-web/component-lib'\n\nimport { WithTranslation, withTranslation } from 'react-i18next'\nimport { coinMap } from '@loopring-web/component-lib/static'\nimport { FloatTag } from '@loopring-web/component-lib/src/static-resource'\nimport { Box, Grid } from '@material-ui/core'\nimport { useQuote } from './hook'\n\nconst  RowStyled = styled(Grid)`\n      & .MuiGrid-root:not(:last-of-type) > div{\n        margin-right: ${({theme}) => theme.unit * 3}px;\n      }\n` as typeof Grid\nconst  TableWrapStyled = styled(Grid)`\n  &{\n    background-color: ${({theme}) => theme.colorBase.background().default};\n    ${({theme}) => theme.border.defaultFrame({c_key: 'blur', d_R: 1})};\n    .rdg{\n      height: 100%;\n    }\n  }\n  ${({theme}) => TablePaddingX({pLeft:theme.unit * 3,pRight:theme.unit * 3})}\n` as typeof Grid\n\nconst QuotePage = withTranslation('common')((rest: WithTranslation) => {\n\n    const { tickList, big4 } = useQuote()\n\n    const formattedRawData = tickList.map((o: any) => ({\n        pair: !!o[0].length ? {\n            first: o[0][0],\n            last: o[0][1]\n        }: {\n            first: '--',\n            last: '--'\n        },\n        lastPrice: Number.isFinite(o[2]) ? o[2] : '--',\n        change: Number.isFinite(o[3]) ? o[3] : '--',\n        high: Number.isFinite(o[4]) ? o[4] : '--',\n        low: Number.isFinite(o[5]) ? o[5] : '--',\n        volumn: Number.isFinite(o[6]) ? o[6] : '--'\n    }))\n    \n    let props: any = {\n        ...rest,\n        buyData: coinMap.ETH,\n        sellData: coinMap.LRC,\n        tradeFloat: {priceDollar: +123, priceYuan: 2343232, percent: '+15%', timeUnit: \"24h\",\n            volume: 112312312,\n            floatTag:FloatTag.increase},\n\n    }\n\n    const onVisibleRowsChange=(data: any) => {\n        console.log(data)\n    }\n\n    return <Box display={'flex'} flexDirection={'column'} flex={1}>\n\n        <RowStyled container >\n            <Grid item xs={3} >\n                <MarketBlock {...{...props,tradeFloat: {priceDollar: 123,priceYuan: 2343232, percent: '0%', timeUnit: \"24h\",floatTag:FloatTag.none}}} />\n            </Grid>\n            <Grid item xs={3} >\n                <MarketBlock {...{...props,tradeFloat: {priceDollar: 123,priceYuan: 2343232, percent: '-15%', timeUnit: \"24h\",floatTag:FloatTag.decrease}}} />\n            </Grid>\n            <Grid item xs={3} >\n                <MarketBlock {...{...props}}></MarketBlock>\n            </Grid>\n            <Grid item xs={3} >\n                <MarketBlock {...{...props}}></MarketBlock>\n            </Grid>\n        </RowStyled>\n        <TableWrapStyled container marginY={3} paddingY={2} flex={1}>\n            <Grid item xs={12} display={'flex'}>\n                <QuoteTable onVisibleRowsChange={onVisibleRowsChange} rawData={formattedRawData} {...{ ...rest }} />\n            </Grid>\n        </TableWrapStyled>\n    </Box>\n\n\n})\n\nexport default QuotePage\n","import { QuoteTableRawDataItem } from \"@loopring-web/component-lib\"\nimport { TickerData, toBig } from \"loopring-sdk\"\nimport { useExchangeAPI } from \"hooks/exchange/useApi\"\nimport { useCustomDCEffect } from \"hooks/common/useCustomDCEffect\"\n\nimport { useState } from \"react\"\n\nconst amtCol = 5\n\nexport function useQuote() {\n\n    const [tickList, setTickList] = useState<any>([])\n\n    const [big4, setBig4] = useState<any>([])\n\n    const exchangeApi = useExchangeAPI()\n\n    useCustomDCEffect(async() => {\n\n        if (!exchangeApi) {\n            return\n        }\n\n        let mounted = true\n\n        const refresh = async () => {\n\n            const { tickList } = await exchangeApi.getAllTickers()\n\n            let ticks: any[] = []\n\n            tickList.forEach((item: TickerData) => {\n                const item2: QuoteTableRawDataItem = {\n                    pair: {\n                        first: item.base as string,\n                        last: item.quote as string,\n                    },\n                    lastPrice: toBig(item.quote_token_volume).div(item.base_token_volume).toNumber(),\n                    change: item?.change ?? 0,\n                    high: item.high,\n                    low: item.low,\n                    volume: toBig(item.base_token_volume).toNumber(),\n                }\n                const rowData: any = [[item.base, item.quote], [item.close, item.close],\n                item.change, item.high, item.low, item.base_token_volume, item.base_token_volume, item.base, item.quote]\n                ticks.push(rowData)\n            })\n            \n            ticks = ticks.sort((a: any, b: any) => {\n                let res = 0\n                if (!isNaN(b[amtCol]) && !isNaN(a[amtCol])) {\n                    res = b[amtCol] - a[amtCol]\n                }\n\n                return res\n            })\n\n            if (mounted) {\n                setBig4(ticks.slice(0, 4))\n                setTickList(ticks)\n            }\n        }\n\n        await refresh()\n\n        /*\n\n        const handler = setInterval(async() => {\n            await refresh()\n        }, 3000)\n        */\n\n        return () => {\n            /*\n            if (handler) {\n                clearInterval(handler)\n            }\n            */\n            mounted = false\n        }\n\n    }, [exchangeApi])\n\n    return {\n        tickList,\n        big4,\n    }\n\n}\n","import { useCallback, useState } from 'react'\n\nimport { useExchangeAPI } from 'hooks/exchange/useApi'\nimport { useCustomDCEffect } from 'hooks/common/useCustomDCEffect'\n\nimport { TradingInterval, Candlestick, GetCandlestickRequest, GetDepthRequest, GetTickerRequest, dumpError400, getExistedMarket } from 'loopring-sdk'\nimport { fromWEI } from 'utils/swap_calc_utils'\n\nimport { ChartUnit, CoinInfo } from '@loopring-web/component-lib/static-resource'\n\nimport { ChartType } from '@loopring-web/component-lib'\n\nimport { TGItemData, TGItemJSXInterface, } from '@loopring-web/component-lib'\n\nimport { IGetDepthDataParams } from '@loopring-web/component-lib/components/charts/scaleAreaChart/data'\n\nconst toggleData: TGItemData[] = [\n  {\n    value: ChartType.Trend,\n    key: ChartType.Trend,\n    label: 'label' + ChartType.Trend\n  },\n  {\n    value: ChartType.Depth,\n    key: ChartType.Depth,\n    label: 'label' + ChartType.Depth\n  },\n]\n\nexport function useBasicInfo(props: any, coinAInfo: any, coinBInfo: any, marketArray: any[], t: any) {\n  const tgItemJSXs: TGItemJSXInterface[] = toggleData.map(({ value, label, key }) => {\n    return { value, tlabel: t(label), key, JSX: <>{t(label)}</> }\n  })\n\n  // const { base, quote, market, tokens } = props\n\n  const { market, amm } = getExistedMarket(marketArray, coinAInfo?.name, coinBInfo?.name)\n\n  const [chartType, setChartType] = useState<ChartType>(ChartType.Trend)\n\n  console.log('---useBasicInfo market:', market, ' amm:', amm, ' chartType:', chartType)\n  //\n  // const [change, setChange] = useState(0)\n  //\n  // const [volume, setVolume] = useState('')\n\n  const [chartUnit, setChartUnit] = useState(ChartUnit.D1)\n\n  const [originData, setOriginData] = useState<any>(undefined)\n\n  const handleChange = useCallback((_e: React.MouseEvent, value: any) => {\n    // Settings.setChartType(value)\n    console.log('useBasicInfo handleChange:', value)\n    setOriginData(undefined)\n    setChartType(value)\n  }, [setOriginData, setChartType])\n\n  const exchangeApi = useExchangeAPI()\n\n  // useCustomDCEffect(async () => {\n  //\n  //   if (!exchangeApi || !market || !tokens || !quote) {\n  //     return\n  //   }\n  //\n  //   let mounted = true\n  //\n  //   try {\n  //\n  //     const request: GetTickerRequest = {\n  //       market: market.market,\n  //     }\n  //\n  //     const ticker = await exchangeApi.getTicker(request)\n  //     if (mounted) {\n  //\n  //       if (ticker.tickList[0].change) {\n  //         setChange(ticker.tickList[0].change)\n  //       }\n  //\n  //       if (ticker.tickList[0].base_token_volume) {\n  //         const baseVol = fromWEI(tokens.tokenSymbolMap, base, ticker.tickList[0].base_token_volume) as string\n  //         setVolume(baseVol)\n  //       }\n  //     }\n  //   }\n  //   catch (reason) {\n  //     dumpError400(reason, 'ChartPanel getCandlestick')\n  //   }\n  //\n  //   return () => {\n  //     mounted = false\n  //   }\n  //\n  // }, [exchangeApi, market, tokens, base,])\n\n  const tgItemJSXsPriceChart: TGItemJSXInterface[] = Object.keys(ChartUnit).reduce((pre, item) => {\n    // @ts-ignore\n    const tGItemData: TGItemData = { value: ChartUnit[item], key: ChartUnit[item], label: 'label' + ChartUnit[item] };\n    pre.push({ value: tGItemData.value, tlabel: t(tGItemData.label ? tGItemData.label : tGItemData.key), key: tGItemData.key, JSX: <>{t(tGItemData.label ? tGItemData.label : tGItemData.key)}</> })\n    return pre\n  }, [] as TGItemJSXInterface[])\n\n  useCustomDCEffect(async () => {\n  \n    let mounted = true\n  \n    if (!exchangeApi || !market || !amm) {\n      return\n    }\n  \n    if (chartType === ChartType.Trend) {\n      const request: GetCandlestickRequest = {\n        market: amm as string,\n        interval: TradingInterval.min15,\n        limit: 96\n      }\n  \n      try {\n        const candlesticks = await exchangeApi.getCandlestick(request)\n  \n        if (mounted) {\n          const originData = candlesticks.candlesticks.map((item: Candlestick) => {\n            return {\n              timeStamp: item.timestamp,\n              low: item.low,\n              high: item.high,\n              open: item.open,\n              close: item.close,\n              volume: item.quoteVol,\n            }\n          })\n          console.log(`useBasicInfo amm: ${amm} candlesticks originData: `, originData)\n          setOriginData(originData)\n        }\n      }\n      catch (reason) {\n        dumpError400(reason, 'ChartPanel getCandlestick')\n      }\n  \n    } else {\n      const request: GetDepthRequest = {\n        market,\n      }\n  \n      try {\n  \n        const { depth } = await exchangeApi.getMixDepth(request)\n        console.log('useBasicInfo depth:', depth)\n        if (mounted) {\n          const originData: IGetDepthDataParams = {\n            bidsPrices: depth.bids_prices,\n            bidsAmtTotals: depth.bids_amtTotals as any,\n            asksPrices: depth.asks_prices,\n            asksAmtTotals: depth.asks_amtTotals as any,\n          }\n          setOriginData(originData)\n        }\n  \n      } catch (reason) {\n        dumpError400(reason)\n      }\n  \n    }\n  \n    return () => {\n      mounted = false\n    }\n  \n  }, [exchangeApi, amm, market, chartType])\n\n  return {\n    // change,\n    // volume,\n    chartUnit,\n    chartType,\n    tgItemJSXs,\n    tgItemJSXsPriceChart,\n    handleChange,\n    originData,\n  }\n}","import store from '../../stores';\nimport { AccountStatus } from '../../state_machine/account_machine_spec';\nimport { setShowAccountInfo, setShowConnect, setShowDeposit } from '@loopring-web/component-lib';\nimport React from 'react';\n\nexport enum fnType {\n    UNKNOWN,\n    UNCONNNECTED,\n    CONNECTED,\n    NOACCOUNT,\n    DEPOSITING,\n    DEPOSIT_TO_CONFIREM,\n    UNACTIVATED,\n    ARPROVING,\n    APPROV_TO_CONFIRM,\n    LOCKED,\n    ACTIVATED,\n    DEFAULT\n}\nexport const accountStaticCallBack = (props: { [key: number ]:[ fn: (props: any) => any, args?: object] }) => {\n    const {status} = store.getState().account\n    let fn, args;\n    switch (status) {\n        case AccountStatus.UNKNOWN:\n            [fn, args] = props[ fnType.UNKNOWN ]?props[ fnType.UNKNOWN ]:[];\n            if (typeof fn === 'function') {\n                return fn.call(this, args);\n            }\n            return\n        case AccountStatus.UNCONNNECTED:\n            [fn, args] = props[ fnType.UNCONNNECTED ]?props[ fnType.UNCONNNECTED ]:[];\n            if (typeof fn === 'function') {\n                return fn.call(this, args);\n            }\n            break;\n        case AccountStatus.CONNECTED:\n            [fn, args] = props[ fnType.CONNECTED ]?props[ fnType.CONNECTED ]:[];\n            if (typeof fn === 'function') {\n                return fn.call(this, args);\n            }\n            break;\n        case AccountStatus.NOACCOUNT:\n            [fn, args] = props[ fnType.NOACCOUNT ]?props[ fnType.NOACCOUNT ]:[];\n            if (typeof fn === 'function') {\n                return fn.call(this, args);\n            }\n            break;\n        case AccountStatus.DEPOSITING:\n            [fn, args] = props[ fnType.DEPOSITING ]?props[ fnType.DEPOSITING ]:[];\n            if (typeof fn === 'function') {\n                return fn.call(this, args);\n            }\n            break;\n        case AccountStatus.DEPOSIT_TO_CONFIREM:\n            [fn, args] = props[ fnType.DEPOSIT_TO_CONFIREM ]?props[ fnType.DEPOSIT_TO_CONFIREM ]:[];\n            if (typeof fn === 'function') {\n                return fn.call(this, args);\n            }\n            break;\n        case AccountStatus.UNACTIVATED:\n            [fn, args] = props[ fnType.UNACTIVATED ]?props[ fnType.UNACTIVATED ]:[];\n            if (typeof fn === 'function') {\n                return fn.call(this, args);\n            }\n            break;\n        case AccountStatus.ARPROVING:\n            [fn, args] = props[ fnType.ARPROVING ]?props[ fnType.ARPROVING ]:[];\n            if (typeof fn === 'function') {\n                return fn.call(this, args);\n            }\n            break;\n        case AccountStatus.APPROV_TO_CONFIRM:\n            [fn, args] = props[ fnType.APPROV_TO_CONFIRM ]?props[ fnType.APPROV_TO_CONFIRM ]:[];\n            if (typeof fn === 'function') {\n                return fn.call(this, args);\n            }\n            break;\n        case AccountStatus.LOCKED:\n            [fn, args] = props[ fnType.LOCKED ]?props[ fnType.LOCKED ]:[];\n            if (typeof fn === 'function') {\n                return fn.call(this, args);\n            }\n            break;\n        case AccountStatus.ACTIVATED:\n            [fn, args] = props[ fnType.ACTIVATED ]?props[ fnType.ACTIVATED ]:[];\n            if (typeof fn === 'function') {\n                return fn.call(this, args);\n            }\n            break;\n        default:\n            break;\n\n    }\n    [fn, args] = props[ fnType.DEFAULT ]?props[ fnType.DEFAULT ]:[];\n    if (typeof fn === 'function') {\n        return fn.call(this, args);\n    }\n}\n\n\nexport const bntLabel: { [ key: number ]: [fn: (props: any) => any, args?: object] } = {\n    [ fnType.UNCONNNECTED ]: [\n        function () {\n            return `labelConnectWallet`\n        }\n    ]\n    , [ fnType.DEFAULT ]: [\n        function () {\n            return `depositTitleAndActive`\n        }\n    ]\n    , [ fnType.ACTIVATED ]: [\n        function () {\n            return undefined\n        }\n    ]\n    , [ fnType.LOCKED ]: [\n        function () {\n            return `labelUnLock`\n        }\n    ]\n};\n\n\nexport const btnClickArray: { [ key: number ]: [fn: (props: any) => any, args?: object] } = {\n    [ fnType.UNCONNNECTED ]: [\n        function () {\n            // setShowConnect({isShow: true})\n            store.dispatch(setShowConnect({isShow: true}))\n        }\n    ]\n    , [ fnType.DEFAULT ]: [\n        function () {\n            store.dispatch(setShowDeposit({isShow: true}))\n            // ShowDeposit(true)\n        }\n    ]\n\n    , [ fnType.LOCKED ]: [\n        function () {\n            store.dispatch(setShowAccountInfo({isShow: true}))\n        }\n    ]\n};\n\n\n","import { ChartUnit } from '@loopring-web/component-lib/static-resource'\n\nimport { ScaleAreaChart, ToggleButtonGroup, useSettings } from '@loopring-web/component-lib'\nimport { Box, Grid } from \"@material-ui/core\"\nimport { WithTranslation } from 'react-i18next'\nimport { TradeTitle } from '@loopring-web/component-lib/components/block'\nimport { UpColor } from '@loopring-web/component-lib/src/static-resource';\nimport { useBasicInfo } from './hook'\n\nconst BasicInfoPanel = ({ props, coinAInfo, coinBInfo, tradeFloat, marketArray, t, ...rest }: any & WithTranslation) => {\n\n    const {\n        // change,\n        chartType,\n        tgItemJSXs,\n        tgItemJSXsPriceChart,\n        handleChange,\n        originData,\n    } = useBasicInfo(props, coinAInfo, coinBInfo, marketArray, t)\n    const { upColor } = useSettings();\n\n    return <>\n        <Grid item xs={8}>\n            <TradeTitle {...{\n                coinAInfo, coinBInfo,\n                ...rest, t, tradeFloat\n            }}></TradeTitle>\n        </Grid>\n        <Grid item xs={4} display={'flex'} justifyContent={'flex-end'} alignItems={'flex-end'}>\n            <ToggleButtonGroup exclusive {...{ ...rest, t, tgItemJSXs, value: chartType }}\n                handleChange={handleChange} />\n        </Grid>\n\n        <Grid item xs={12}>\n            <Box minHeight={256} maxHeight={256} display={'block'} style={{ height: '100%', width: '100%' }}>\n                <ScaleAreaChart type={chartType} data={originData ?? []} riseColor={upColor as keyof typeof UpColor}\n                    handleMove={() => {\n                    }} />\n            </Box>\n        </Grid>\n        <Grid item xs={12} height={24} display={'flex'} justifyContent={'flex-end'}>\n            <ToggleButtonGroup exclusive {...{\n                ...rest, t, tgItemJSXs: tgItemJSXsPriceChart,\n                value: ChartUnit.D1, size: 'small'\n            }}\n                handleChange={() => undefined} />\n        </Grid>\n    </>\n\n};\n\nexport default BasicInfoPanel\n","// import { useState } from 'react'\n//\n// import TradePanelUi from './TradePanel'\n// import { useGetMyTrades, useGetRecentTrades, } from './hooks'\n//\n// const TradePanel = ({tradeArray}: any) => {\n//\n//   // const { market, poolAddress, base, quote } = props\n//\n//   console.log('TradePanel market:', tradeArray)\n//\n//   // const { myTrades } = useGetMyTrades(market)\n//   //\n//   // const { recentTrades } = useGetRecentTrades(poolAddress)\n//\n//\n//\n//   return (\n//     <TradePanelUi trades={tradeArray} isAllTrade={isAllTrade}\n//     setIsAllTrade={setIsAllTrade} />\n//   )\n//\n// }\n//\n// export default TradePanel\n\nimport { RefAttributes, useState } from 'react'\n\nimport Tabs from '@material-ui/core/Tabs'\nimport Tab from '@material-ui/core/Tab'\nimport Checkbox from '@material-ui/core/Checkbox'\nimport styled from '@emotion/styled'\n\nimport { FormControlLabel, TradeTable, } from '@loopring-web/component-lib'\nimport { withTranslation, WithTranslation } from 'react-i18next';\nimport { CheckBoxIcon, CheckedIcon } from '@loopring-web/component-lib/static-resource'\nimport { RouteComponentProps, withRouter } from 'react-router'\nimport { Box } from '@material-ui/core';\nimport { RawDataTradeItem } from '@loopring-web/component-lib/components/tableList/tradeTable/TradeTable';\nimport { BasicHeaderItem, HeadMenuType } from '@loopring-web/component-lib/components/basic-lib/lists/Interface';\n\nconst StylePaper = styled(Box)`\n  width: 100%;\n  height: 100%;\n  flex: 1;\n  background-color: ${({theme}) => theme.colorBase.background().default};\n  border-radius: ${({theme}) => theme.unit}px;\n  padding: 20px;\n\n  .tableWrapper {\n    margin-top: ${({theme}) => theme.unit * 1.5}px;\n    border: 1px solid ${({theme}) => theme.colorBase.borderColor};\n    border-radius: ${({theme}) => theme.unit}px;\n    padding: 26px;\n  }\n` as typeof Box;\n\n\nconst applyProps = (index: number) => {\n    return {\n        id: `simple-tab-${index}`,\n        'aria-controls': `simple-tabpanel-${index}`,\n    }\n}\nconst StyledTabsWrapper = styled.div`\n          position: relative;\n          width: 100%;\n          margin-top: ${({theme}) => theme.unit * 4}px;\n        `\n\nconst StyledFormControlLabel = styled(FormControlLabel)`\n          position: absolute;\n          top: 0;\n          right: ${({theme}) => theme.unit}px;\n          margin: ${({theme}) => theme.unit}px 0 0 0;\n        `\n\n\nconst TradePanel = withTranslation('common')(\n   // withRouter(\n    (\n        {tradeArray,  myTradeArray, t}:\n            { tradeArray: RawDataTradeItem[], myTradeArray: RawDataTradeItem[] } & WithTranslation & RouteComponentProps) => {\n        const [isAllTrade, setIsAllTrade] = useState(false)\n        const [value, setValue] = useState(1)\n        const handleChange = (event: any, newValue: any) => {\n            setValue(newValue)\n        }\n\n        const handleCheckboxChange = () => {\n            setIsAllTrade((flag: boolean) => !flag)\n        }\n\n        return (\n            <StyledTabsWrapper>\n                <StyledFormControlLabel\n                    control={<Checkbox checked={isAllTrade} size={'small'} checkedIcon={<CheckedIcon/>}\n                                       icon={<CheckBoxIcon/>} color={'default'} onChange={handleCheckboxChange}/>}\n                    label={t('labelTradePanelHideOtherPairs')}/>\n\n                <Tabs value={value}\n                      onChange={handleChange}\n                      aria-label=\"tabs switch\">\n                    <Tab label={t('labelMyTrade')} {...applyProps(0)} />\n                    <Tab label={t('labelRecent')}   {...applyProps(1)} />\n                </Tabs>\n\n                <StylePaper marginTop={2}>\n                    {value === 0 ?  <TradeTable rawData={myTradeArray} /> : <TradeTable rawData={tradeArray}/> }\n                </StylePaper>\n\n            </StyledTabsWrapper>\n        )\n    }\n    ) as  (props: { tradeArray: RawDataTradeItem[], myTradeArray: RawDataTradeItem[] }) => JSX.Element;\n//)\n\nexport default TradePanel\n\n","import store from '../../stores';\nimport { WalletMap,WalletCoin,CoinKey } from '@loopring-web/component-lib/static-resource';\nimport * as fm from 'loopring-sdk';\nimport { fromWEI } from '../../utils/swap_calc_utils';\nimport { UserBalanceInfo } from 'loopring-sdk';\nexport type WalletMapExtend<C> =    {\n    [K in CoinKey<C>]?: WalletCoin<C> & {\n    detail:UserBalanceInfo\n}\n}\n\n\nexport const updateWallet = <C extends { [ key: string ]: any }>():{ walletMap: WalletMapExtend<C> | undefined } => {\n    const {walletLayer2} = store.getState().walletLayer2;\n    const {tokenMap} = store.getState().tokenMap;\n    let walletMap: WalletMapExtend<C> | undefined;\n    if (walletLayer2) {\n        walletMap = Reflect.ownKeys(walletLayer2).reduce((prev, item) => {\n            const {total, locked, pending: {withdraw}} = walletLayer2[ item as string ];\n            const countBig = fm.toBig(total).minus(fm.toBig(locked)).minus(fm.toBig(withdraw)).toString()\n            return {\n                ...prev, [ item ]: {\n                    belong: item,\n                    count: fromWEI(tokenMap, item, countBig),\n                    detail: walletLayer2[ item as string ]\n                }\n            }\n        }, {} as  WalletMapExtend<C> )\n    }\n\n    return {walletMap}\n}","export function coinPairInit({coinKey, _tradeCalcData, tokenMap, coinMap}: any) {\n    if (coinKey) {\n        const [_match, sell, buy] = coinKey.match(/(\\w+)-(\\w+)/i);\n        // @ts-ignore\n        if (sell && coinMap && coinMap[ sell ]) {\n            _tradeCalcData.coinSell = sell;\n        }// @ts-ignore\n        if (sell!==buy && buy && -1 !== tokenMap[ sell ].tradePairs.findIndex(ele => ele === buy)) {\n            _tradeCalcData.coinBuy = buy;\n            return _tradeCalcData\n        }\n        // else{\n        //     _tradeCalcData.coinBuy = tokenMap[ sell ].tradePairs[ 0 ];\n        // }\n    }\n    if (!_tradeCalcData.coinSell || _tradeCalcData.coinSell === '') {\n        _tradeCalcData.coinSell = 'LRC';\n        _tradeCalcData.coinBuy = 'ETH';\n        return _tradeCalcData\n    }\n    if (!_tradeCalcData.coinBuy || _tradeCalcData.coinBuy === '' || _tradeCalcData.coinBuy === 'undefined') {\n        // @ts-ignore\n        if (tokenMap && tokenMap[ _tradeCalcData.coinSell ].tradePairs) {\n            _tradeCalcData.coinBuy = tokenMap[ _tradeCalcData.coinSell ].tradePairs[ 0 ]\n        } else {\n            _tradeCalcData.coinSell = 'LRC';\n            _tradeCalcData.coinBuy = 'ETH';\n        }\n    }\n    return _tradeCalcData\n}","import { AmmMap } from '../../stores/Amm/AmmMap';\nimport { AmmPoolSnapshot, getBaseQuote, LoopringMap, TickerData, TokenInfo, TokenVolumeV3 } from 'loopring-sdk';\nimport { LoopringAPI } from '../../stores/apis/api';\nimport * as fm from 'loopring-sdk';\nimport { BIG10 } from '../../defs/swap_defs';\nimport { getToken } from 'utils/swap_calc_utils';\nimport { CoinMap, CustomError, ErrorMap } from '@loopring-web/component-lib/src/static-resource';\nimport { volumeToCountAsBigNumber } from './volumeToCount';\n\nexport const pairDetailBlock = <C extends { [ key: string ]: any }, I extends { [ key: string ]: any }>({\n                                                                                                           coinKey,\n                                                                                                           ammKey,\n                                                                                                           ammMap\n                                                                                                       }: { coinKey: string, ammKey: string, ammMap: AmmMap<C, I> }):\n    Promise<{\n        ammPoolsBalance: AmmPoolSnapshot,\n        tickMap:  LoopringMap<TickerData>\n}> => {\n    // const exchangeApi = exchangeAPI();\n    // const ammpoolApi = ammpoolAPI();\n    return new Promise((resolve, reject) => {\n        if(LoopringAPI.ammpoolAPI && LoopringAPI.exchangeAPI ) {\n            Promise.all([\n                LoopringAPI.ammpoolAPI.getAmmPoolSnapshot({poolAddress: ammMap[ ammKey ].address}),\n                LoopringAPI.exchangeAPI.getMixTicker({market: coinKey})])\n                // exchangeApi.getMarketTrades({market:coinKey})])\n                //{raw_data},\n                .then(([{ammPoolSnapshot}, {tickMap}]) => {\n                    resolve({\n                        ammPoolsBalance: ammPoolSnapshot,\n                        tickMap,\n                    })\n                })\n\n        }else{\n            reject(new CustomError(ErrorMap.NO_SDK))\n        }\n       \n    })\n}\n\nexport const pairDetailDone = <C>({coinKey, market,ammPoolsBalance, tokenMap,tickerData, _tradeCalcData, coinMap, marketCoins}:any)=>{\n\n    const [, coinSell, coinbuy] = coinKey.match(/(\\w+)-(\\w+)/i)\n    let stob:number|undefined;\n    if (tickerData.base === coinSell) {\n        // const ticker: TickerData = tickMap[market]\n        stob = Number(tickerData.close)\n\n    } else{\n        // const ticker: TickerData = tickMap[market]\n        stob = Number(tickerData.close)!==0? 1/Number(tickerData.close): 0\n    }\n    if(isNaN(stob) && ammPoolsBalance){\n        const {base, quote} = getBaseQuote(coinKey)\n\n        // const baseToken: TokenInfo = getToken(tokenMap, base)\n        // const quoteToken: TokenInfo = getToken(tokenMap, quote)\n        // const baseVol = (fm.toBig(poolBaseTokenVol.volume).div(BIG10.pow(baseToken.decimals)))\n        // const quoteVol = (fm.toBig(quoteBaseTokenVol.volume).div(BIG10.pow(quoteToken.decimals)))\n        //\n        // stob = volumeToCountAsBigNumber(base,poolBaseTokenVol.volume)?.div(\n        //     volumeToCountAsBigNumber(quote,quoteBaseTokenVol.volume) || 1\n        // ) .toNumber()\n        // console.log('1', base, poolBaseTokenVol, quote, quoteBaseTokenVol)\n        //baseToken.tokenId === quoteBaseTokenVol.tokenId && quoteToken.tokenId === poolBaseTokenVol.tokenId) {\n        // const quoteVol = (fm.toBig(quoteBaseTokenVol.volume).div(BIG10.pow(baseToken.decimals)))\n        // const baseVol = (fm.toBig(poolBaseTokenVol.volume).div(BIG10.pow(quoteToken.decimals)))\n        //baseVol.div(quoteVol).toNumber()\n        // console.log('2', base, poolBaseTokenVol, quote, quoteBaseTokenVol)\n        //ErrorMap.NOTS\n        const poolBaseTokenVol: TokenVolumeV3 = ammPoolsBalance.pooled[0];\n        const quoteBaseTokenVol: TokenVolumeV3 = ammPoolsBalance.pooled[1];\n        let poolVolumn:[baseVol:any, quoteVol:any];\n        if ( base && quote && tokenMap[base].tokenId === poolBaseTokenVol.tokenId ) {\n            poolVolumn =  [[base,poolBaseTokenVol.volume],[quote,quoteBaseTokenVol.volume]]\n        } else if (base && quote && tokenMap[base].tokenId === quoteBaseTokenVol.tokenId){\n            poolVolumn =  [[quote,quoteBaseTokenVol.volume],[base,poolBaseTokenVol.volume]]\n        } else {\n            throw new CustomError(ErrorMap.NO_SUPPORT_PAIR)\n        }\n        let [baseVol,quoteVol]  = poolVolumn\n        if(baseVol && quoteVol){\n            stob = volumeToCountAsBigNumber(baseVol[0],baseVol[1])?.div(\n                volumeToCountAsBigNumber(quoteVol[0],quoteVol[1]) || 1\n            ) .toNumber()\n        }\n    }\n\n    _tradeCalcData.StoB = stob;\n    _tradeCalcData.BtoS = stob !== 0 && stob !== undefined? 1 / (stob * 1.0): 0;\n    _tradeCalcData.sellCoinInfoMap = coinMap && marketCoins?.reduce((prev: any, item: string | number) => {\n        return {...prev, [ item ]: coinMap[ item ]}\n    }, {} as CoinMap<C>)\n    _tradeCalcData.buyCoinInfoMap = coinMap && tokenMap && tokenMap[ _tradeCalcData.coinSell as string ].tradePairs?.reduce((prev: any, item: string | number) => {\n        return {...prev, [ item ]: coinMap[ item ]}\n    }, {} as CoinMap<C>);\n\n    return {\n        _tradeCalcData\n    }\n    //setPair();\n}","import { TickerData } from 'loopring-sdk';\nimport store from '../../stores';\nimport { FloatTag,TradeFloat } from '@loopring-web/component-lib/src/static-resource';\n\nexport const makeTickView = (tick: TickerData) => {\n    // const {forex} = store.getState().system;\n\n    const price = !isNaN(tick.close) ? tick.close : 0\n\n    const floatTag = (isNaN(tick.close) || isNaN(tick.open))  || tick.open === tick.close ? FloatTag.none : \n        tick.close > tick.open ? FloatTag.increase : FloatTag.decrease\n\n    let _tradeFloat: Partial<TradeFloat> = {\n        percent: (tick.close - tick.open) / tick.open,\n        timeUnit: '24h',\n        priceYuan: price,\n        priceDollar: price,\n        floatTag,\n        reward: 0,\n        APY: 0,\n    }\n\n    return _tradeFloat;\n}\n","import * as fm from 'loopring-sdk';\nimport store from '../../stores';\nimport { TradeTypes,CoinMap } from '@loopring-web/component-lib/static-resource';\nimport { ammpoolAPI, LoopringAPI, userAPI } from '../../stores/apis/api';\nimport { AmmRecordRow, AmmTradeType,RawDataTradeItem } from '@loopring-web/component-lib';\nimport { AmmPoolTx, BillType, AmmTxType, UserAmmPoolTx,getBaseQuote, MarketTradeInfo, Side, UserTrade } from 'loopring-sdk';\nimport { volumeToCount, volumeToCountAsBigNumber } from './volumeToCount';\n\nexport const getUserTrades = (marketKey: any) => {\n    const userApi = userAPI();\n    const {accountId, apiKey} = store.getState().account\n    return userApi.getUserTrades({accountId}, apiKey).then((response: {\n        totalNum: any;\n        userTrades: UserTrade[];\n        raw_data: any;\n    }) => {\n        return response.userTrades\n    })\n}\nexport const makeMarketArray = (coinKey: any, marketTrades: MarketTradeInfo[]): RawDataTradeItem[] => {\n\n    let tradeArray: Array<Partial<RawDataTradeItem>> = []\n\n    marketTrades.forEach((item: MarketTradeInfo) => {\n        try {\n            const {base, quote} = getBaseQuote(item.market)\n            const {forex} = store.getState().system\n            const {currency} = store.getState().settings\n            const {tokenMap} = store.getState().tokenMap\n            if (tokenMap) {\n               // const baseToken = tokenMap[ base as string ]\n               // const quoteToken = tokenMap[ quote as string ]\n\n                // @ts-ignore\n                tradeArray.push({\n                    side: item.side === Side.Sell ? TradeTypes.Sell : TradeTypes.Buy,\n                    amount: {\n                        from: {\n                            key: base as string,\n                            value: base ? volumeToCount(base, item.volume) : undefined\n                        },\n                        to: {\n                            key: quote as string,\n                            value: base ? volumeToCountAsBigNumber(base, item.volume)?.times(item.price).toNumber():undefined\n                        },\n\n                    },\n                    price: {\n                        key: '',\n                        value: fm.toBig(item.price).toNumber(),\n                    },\n                    fee: {\n                        key: '',\n                        value: quote? volumeToCount(quote, item.fee):undefined, //fm.toBig(item.fee).div(BIG10.pow(quoteToken.decimals)).toNumber(),\n                    },\n                    time: parseInt(item.tradeTime.toString()),\n                })\n            }\n        } catch (error) {\n            //CATCHERROR:\n            console.log(error)\n            // new CustomError()\n        }\n\n    })\n    // console.log('tradeArray:', tradeArray)\n    return tradeArray as RawDataTradeItem[];\n\n}\n\nexport const getUserAmmTransaction = () => {\n    const {accountId, apiKey} = store.getState().account\n    return LoopringAPI.ammpoolAPI?.getUserAmmPoolTxs({accountId}, apiKey).then(({userAmmPoolTxs}) => {\n        return userAmmPoolTxs\n    })\n    // }\n\n}\n\n\nexport const makeMyAmmMarketArray = <C extends { [ key: string ]:any }>(coinKey: string|undefined, marketTransaction: UserAmmPoolTx[]): AmmRecordRow<C>[] => {\n\n    let tradeArray: Array<Partial<AmmRecordRow<C>>> = [];\n    let {tokenMap, coinMap, idIndex} = store.getState().tokenMap;\n    marketTransaction.forEach((item: UserAmmPoolTx) => {\n        try {\n           // const {base, quote} = getBaseQuote(coinKey)\n            const {forex} = store.getState().system\n            // const {currency} = store.getState().settings\n            if (coinMap && tokenMap && idIndex\n                && !(coinKey && tokenMap['LP-'+coinKey].tokenId !== item.lpToken.tokenId) ) {\n                // @ts-ignore\n                const [, coinA, coinB] = idIndex[item.lpToken.tokenId].match(/LP-(\\w+)-(\\w+)/i);\n                 \n                tradeArray.push({\n                        type: item.txType === AmmTxType.JOIN ? AmmTradeType.add : AmmTradeType.remove,\n                        //TODO:\n                        totalDollar: 1000,\n                        totalYuan: 1000 / Number(forex),\n                        amountA: volumeToCount(coinA,item.poolTokens[ 0 ]?.actualAmount),\n                        amountB: volumeToCount(coinA,item.poolTokens[ 1 ]?.actualAmount),\n                        time: Number(item.updatedAt),\n                        // @ts-ignore\n                        coinA: coinMap[ coinA ],\n                        // @ts-ignore\n                        coinB: coinMap[ coinB ],\n                        status: item.txStatus\n                    })\n                }\n                return tradeArray\n            }\n         catch (error) {\n            //CATCHERROR:\n            console.log(error)\n            // new CustomError()\n        }\n\n    })\n    // console.log('tradeArray:', tradeArray)\n    return tradeArray as AmmRecordRow<C>[];\n\n}\n\n\nexport const makeMarketAmmArray = <C extends object>(coinKey: any, marketTransaction: AmmPoolTx[]): AmmRecordRow<C>[] => {\n\n    let tradeArray: Array<Partial<AmmRecordRow<C>>> = [];\n\n    // marketTransaction.forEach((item: AmmPoolTx) => {\n    //     try {\n    //         const {base, quote} = getBaseQuote(coinKey)\n    //         const {forex} = store.getState().system\n    //         // const {currency} = store.getState().settings\n    //         const coinMap = store.getState().tokenMap.coinMap as CoinMap<C>\n    //         if (coinMap) {\n    //\n    //             // id: number;\n    //             // from: string;\n    //             // to: string;\n    //             // token: string;\n    //             // amount: string;\n    //             // tokenF: string;\n    //             // amountF: string;\n    //             // status: TxStatus;\n    //             // txHash: string;\n    //             // billType: BillType;\n    //             // income: boolean;\n    //             // timestamp: number;\n    //             // memo: string;\n    //             // price: string;\n    //             // transferType: TransferType;\n    //             // label: string;\n    //             tradeArray.push({\n    //                 // type: item.billType === BillType.ORDER ?\n    //                 //     AmmTradeType.swap : item.billType === BillType.TRANSFER && item.income ?\n    //                 //         AmmTradeType.add : AmmTradeType.remove,\n    //                 // // //TODO:\n    //                 // totalDollar: 1000,\n    //                 // totalYuan: 1000 / Number(forex),\n    //                 // amountA: Number(item.poolTokens[ 0 ].amount),\n    //                 // amountB: Number(item.poolTokens[ 1 ].amount),\n    //                 // time: Number(item.updatedAt),\n    //                 // coinA: coinMap[ base as keyof C],\n    //                 // coinB: coinMap[ quote as keyof C ],\n    //             })\n    //         }\n    //     } catch (error) {\n    //         //CATCHERROR:\n    //         console.log(error)\n    //         // new CustomError()\n    //     }\n    //\n    // })\n    // console.log('tradeArray:', tradeArray)\n    return tradeArray as AmmRecordRow<C>[];\n\n}\n","import store from '../../stores';\nimport { setSlippage } from '@loopring-web/component-lib';\n\ntype Cache = {\n    customSlippage?:number\n}\nexport  const makeCache  = (__cache__:Cache)=>{\n   if(typeof  __cache__.customSlippage !== undefined){\n       store.dispatch(setSlippage(__cache__.customSlippage as number))\n      // store.getState().settings\n   }\n}","import { Box, Grid, } from '@material-ui/core'\nimport { WithTranslation, withTranslation } from 'react-i18next'\nimport BasicInfoPanel from './panel/BasicInfoPanel'\nimport TradePanel from './panel/TradePanel'\nimport styled from 'styled-components'\nimport { useSwapPage } from './hook';\nimport { SwapPanel } from '@loopring-web/component-lib'\n\nconst FixedStyle = styled(Box)`\n  @media only screen and (min-height: 680px ) and (min-width:1024px){\n    position: fixed;\n  }\n`\n\nexport const SwapPage = withTranslation('common')(({ ...rest }: WithTranslation) => {\n\n    const {tradeCalcData,tradeData,tradeFloat,tradeArray, myTradeArray, marketArray, handleSwapPanelEvent,onSwapClick,pair,swapBtnI18nKey} = useSwapPage();\n\n    return <>\n        <Grid container marginRight={3} alignContent={'flex-start'} >\n            <BasicInfoPanel {...{ ...rest,\n                ...pair, marketArray,\n                tradeFloat, tradeArray }} />\n            <TradePanel tradeArray={tradeArray} myTradeArray={myTradeArray} />\n\n            {/**/}\n        </Grid>\n\n        <Box display={'flex'} style={{ minWidth: 'var(--swap-box-width)' }} >\n            <FixedStyle>\n                <SwapPanel tradeData={tradeData}\n                           tradeCalcData={tradeCalcData}\n                           onSwapClick={onSwapClick}\n                           swapBtnI18nKey={swapBtnI18nKey}\n                           // handleError={}\n                           {...{handleSwapPanelEvent,...rest}}\n                />\n            </FixedStyle>\n\n        </Box>\n\n    </>\n});\n\n\n // SwapPage\n","import { useRouteMatch } from 'react-router';\nimport { CoinInfo, IBData, TradeCalcData, TradeTypes } from '@loopring-web/component-lib/static-resource';\nimport React, { useCallback } from 'react';\nimport { exchangeAPI, LoopringAPI, userAPI } from '../../stores/apis/api';\nimport { useTokenMap } from '../../stores/token';\nimport * as fm from 'loopring-sdk';\nimport { AmmPoolInfoV3, AmmPoolSnapshot, getAccountArg, getBaseQuote, getExistedMarket, getTickerArg, LoopringMap, MarketTradeInfo, Side, UserTrade } from 'loopring-sdk';\nimport { AmmMapStates, useAmmMap } from '../../stores/Amm/AmmMap';\nimport { RawDataTradeItem } from '@loopring-web/component-lib/components/tableList/tradeTable/TradeTable';\nimport { useWalletLayer2 } from '../../stores/walletLayer2';\nimport store from '../../stores';\nimport { CustomError, ErrorMap, globalSetup, TradeFloat } from '@loopring-web/component-lib/src/static-resource';\nimport { SwapTradeData, useOpenModals } from '@loopring-web/component-lib';\nimport { SwapData } from '@loopring-web/component-lib/components/panel/components/panel/SwapWrap/Interface';\nimport { SwapType } from '@loopring-web/component-lib/components/panel/Interface';\nimport { useAccount } from '../../stores/account/hook';\nimport { useCustomDCEffect } from '../../hooks/common/useCustomDCEffect';\nimport { accountStaticCallBack, bntLabel, btnClickArray, fnType } from '../../hooks/help/connetStatusCallback';\nimport { useModals } from '../../hooks/modal/useModals';\nimport { updateWallet } from '../../hooks/help/updateWallet';\nimport { coinPairInit } from '../../hooks/help/coinPairInit';\nimport { pairDetailBlock, pairDetailDone } from '../../hooks/help/pairDetail';\nimport { makeTickView } from '../../hooks/help/makeTickView';\nimport { getUserTrades, makeMarketArray } from '../../hooks/help/marketTable';\nimport { makeCache } from '../../hooks/help/makeCache';\nimport * as _ from 'lodash'\n\n\n\n\n\nexport const useSwapPage = <C extends { [ key: string ]: any }>() => {\n    /*** api prepare ***/\n    // const exchangeApi = exchangeAPI();\n    const wait = globalSetup.wait;\n    const match: any = useRouteMatch(\":symbol\")\n    const {coinMap, tokenMap, marketArray, marketCoins, marketMap, } = useTokenMap()\n    const {ammMap} = useAmmMap();\n    const {setShowConnect, setShowAccountInfo} = useOpenModals();\n    const {ShowDeposit} = useModals()\n    const {account} = useAccount()\n\n    const walletLayer2State = useWalletLayer2();\n\n    const [tradeData, setTradeData] = React.useState<SwapTradeData<IBData<C>> | undefined>(undefined);\n    const [tradeCalcData, setTradeCalcData] = React.useState<TradeCalcData<C> | undefined>(undefined);\n    const [tradeArray, setTradeArray] = React.useState<RawDataTradeItem[]>([]);\n    const [myTradeArray, setMyTradeArray] = React.useState<RawDataTradeItem[]>([]);\n    const [tradeFloat, setTradeFloat] = React.useState<TradeFloat | undefined>(undefined);\n    const [pair, setPair] = React.useState<{ coinAInfo: CoinInfo<C> | undefined, coinBInfo: CoinInfo<C> | undefined }>({\n        coinAInfo: undefined,\n        coinBInfo: undefined,\n    });\n\n\n    const [ammPoolSnapshot, setAmmPoolSnapshot] = React.useState<AmmPoolSnapshot | undefined>(undefined);\n\n   \n    const [swapBtnI18nKey, setSwapBtnI18nKey] = React.useState<string|undefined>(undefined);\n\n    //HIGH: get Router info\n    // const symbol = match?.params.symbol ?? undefined;\n    React.useEffect(() => {\n        const symbol = match?.params.symbol ?? undefined;\n        resetSwap(symbol,undefined,undefined,undefined)\n    }, []);\n    //TODO tickMap\n    React.useEffect(() => {\n    }, [])\n\n    //HIGH: effect by wallet state update\n    React.useEffect(() => {\n        switch (walletLayer2State.status) {\n            case \"ERROR\":\n                walletLayer2State.statusUnset();\n                // setState('ERROR')\n                //TODO: show error at button page show error  some retry dispath again\n                break;\n            case \"DONE\":\n                walletLayer2State.statusUnset();\n                const {walletMap} = updateWallet();\n                if (tradeCalcData) {\n                    setTradeCalcData({...tradeCalcData, walletMap} as TradeCalcData<C>);\n                    setTradeData({\n                        sell: {\n                            belong: tradeCalcData.sellCoinInfoMap ? tradeCalcData.sellCoinInfoMap[ tradeCalcData.coinSell ]?.simpleName : undefined,\n                            balance: walletMap ? walletMap[ tradeCalcData.coinSell ]?.count : 0\n                        },\n                        // @ts-ignore\n                        buy: {\n                            belong: tradeCalcData.sellCoinInfoMap ? tradeCalcData.sellCoinInfoMap[ tradeCalcData.coinBuy ]?.simpleName : undefined,\n                            balance: walletMap ? walletMap[ tradeCalcData.coinBuy ]?.count : 0\n                        },\n                    } as SwapTradeData<IBData<C>>)\n                    let {\n                        amm,\n                        market\n                    } = getExistedMarket(marketArray, tradeCalcData.coinSell as string, tradeCalcData.coinBuy as string);\n                    getUserTrades(market).then((marketTrades)=>{\n                        let _myTradeArray  = makeMarketArray(market, marketTrades) as RawDataTradeItem[]\n                        setMyTradeArray(_myTradeArray?_myTradeArray:[])\n                    })\n                }\n                break;\n            default:\n                break;\n\n        }\n    }, [walletLayer2State.status,setMyTradeArray])\n\n    React.useEffect(() => {\n    }, [])\n\n\n    useCustomDCEffect(() => {\n        const label:string|undefined = accountStaticCallBack(bntLabel)\n        setSwapBtnI18nKey(label);\n    }, [account.status, bntLabel])\n\n    const onSwapClick = ({sell, buy, slippage,...rest}: SwapTradeData<IBData<C>>) => {\n        const  swapBtnClickArray: typeof  btnClickArray =  Object.assign(btnClickArray,{\n            [ fnType.ACTIVATED ]: [  function () {\n                //TODO: swap onClick\n                console.log('onSwap',sell, buy, slippage)\n                if(rest.__cache__){\n                    makeCache(rest.__cache__)\n                }\n            },{sell, buy, slippage}]\n        })\n        accountStaticCallBack(swapBtnClickArray)\n    }\n    const handleSwapPanelEvent = async (swapData: SwapData<SwapTradeData<IBData<C>>>, switchType: any): Promise<void> => {\n        //TODO setMarket(market);\n        // _.throttle(()=>{\n                const {tradeData} = swapData\n                return new Promise((resolve) => {\n                    switch (switchType) {\n                        case SwapType.SEll_CLICK:\n                            break\n                        case SwapType.BUY_CLICK:\n                            break\n                        case SwapType.SELL_SELECTED:\n                            resetSwap(`${tradeData.sell.belong}-${tradeData.buy.belong}`, 'sell', tradeData,ammPoolSnapshot)\n                            break\n                        case SwapType.BUY_SELECTED:\n                            resetSwap(`${tradeData.sell.belong}-${tradeData.buy.belong}`, 'buy', tradeData,ammPoolSnapshot)\n                            break\n                        case SwapType.EXCHANGE_CLICK:\n                            resetSwap(`${tradeData.sell.belong}-${tradeData.buy.belong}`,undefined,undefined, ammPoolSnapshot)\n                            break\n                        default:\n                            break\n                    }\n\n                    resolve(undefined)\n                })\n            // },wait)\n\n    }\n\n    const calculateTradeData = async (type: 'sell' | 'buy', _tradeData: SwapTradeData<IBData<C>>, ammPoolSnapshot:AmmPoolSnapshot|undefined): Promise <{ _tradeCalcData: TradeCalcData<C>, _tradeData: SwapTradeData<IBData<C>> }> => {\n        //if(`${pair.coinAInfo?.simpleName}-${pair.coinBInfo?.simpleName}` === coinKey)\n        if (_tradeData[ type ].tradeValue && tradeCalcData) {\n            type === 'sell' ? _tradeData[ 'buy' ].tradeValue = fm.toBig(_tradeData[ 'sell' ].tradeValue).times(tradeCalcData.StoB).toNumber()\n                : _tradeData[ 'sell' ].tradeValue = fm.toBig(_tradeData[ 'buy' ].tradeValue).times(tradeCalcData.BtoS).toNumber()\n        }   \n        const market = `${pair.coinAInfo?.simpleName}-${pair.coinBInfo?.simpleName}`\n        const depth = await LoopringAPI.exchangeAPI?.getMixDepth({market})\n        if (!marketArray || !tokenMap || !marketMap || !depth || !ammMap || !tradeCalcData) {\n            let _tradeCalcData = {...tradeCalcData} as TradeCalcData<C>;\n            return {_tradeData, _tradeCalcData}\n        }\n\n        const isAtoB = type === 'sell' \n        let input: any = (isAtoB ? _tradeData.sell.tradeValue : _tradeData.buy.tradeValue)\n\n        if (input) {\n            input = input.toString()\n        } else {\n            input = '0'\n        }\n\n\n        const base = _tradeData.sell.belong as string\n        const quote = _tradeData.buy.belong as string\n\n        const output = fm.getOutputAmount(input, base, quote, isAtoB, marketArray, tokenMap, \n            marketMap, depth?.depth, { ['AMM-'+market]:ammMap['AMM-'+market].__rawConfig__ } as LoopringMap<AmmPoolInfoV3>,\n            ammPoolSnapshot, '6', '200')\n\n        console.log('output:', output)\n\n        tradeCalcData.priceImpact = output?.priceImpact as string\n\n        if (isAtoB) {\n            _tradeData.buy.tradeValue = output?.output ? parseFloat(output?.output) : 0\n        } else {\n            _tradeData.sell.tradeValue = output?.output ? parseFloat(output?.output) : 0\n        }\n        //TODO: renew  tradeCalcData\n        let _tradeCalcData = {...tradeCalcData} as TradeCalcData<C>;\n        return {_tradeData, _tradeCalcData}\n    }\n\n    const throttleSetValue = React.useCallback(_.debounce(async (type,_tradeData,_ammPoolSnapshot) =>  {\n        const  {_tradeData:td,_tradeCalcData} = await calculateTradeData(type, _tradeData, _ammPoolSnapshot)//.then(()=>{\n        setTradeData(td)\n        setTradeCalcData(_tradeCalcData)\n\n    }, 500*2),[setTradeData,setTradeCalcData,calculateTradeData]);\n\n    const resetSwap = async (coinKey: any, type: 'sell' | 'buy'| undefined, _tradeData: SwapTradeData<IBData<C>>|undefined, _ammPoolSnapshot:AmmPoolSnapshot|undefined) => {\n        if (tradeCalcData\n            && coinKey === `${tradeCalcData.coinSell}-${tradeCalcData.coinBuy}`\n            && _tradeData\n            && type\n            && (!tradeData || (tradeData[ type ].tradeValue !== _tradeData[ type ].tradeValue))) {\n           // calculateTradeData(type,_tradeData,_ammPoolSnapshot)\n            throttleSetValue(type,_tradeData,_ammPoolSnapshot)\n            //throttleSetValue(td,_tradeCalcData);\n\n        } else {\n            let _tradeFloat: Partial<TradeFloat> = {}\n            let _tradeArray: Array<Partial<RawDataTradeItem>> | undefined = undefined;\n            let _tradeCalcData: Partial<TradeCalcData<C>> = coinPairInit({coinKey, _tradeCalcData:{}, tokenMap, coinMap})\n            let {\n                amm,\n                market\n            } = getExistedMarket(marketArray, _tradeCalcData.coinSell as string, _tradeCalcData.coinBuy as string);\n            const [,coinA,coinB] = market.match(/(\\w+)-(\\w+)/i)\n\n            setTradeCalcData({...tradeCalcData, ..._tradeCalcData} as TradeCalcData<C>);\n            if (coinMap) {\n                setPair({\n                    coinAInfo: coinMap[ coinA ],\n                    coinBInfo: coinMap[ coinB ],\n                })\n            }\n            if (walletLayer2State.walletLayer2) {\n                const {walletMap} = updateWallet();\n                _tradeCalcData.walletMap = walletMap;\n                getUserTrades(market).then((marketTrades)=>{\n                    let _myTradeArray = makeMarketArray(market, marketTrades) as RawDataTradeItem[]\n                    setMyTradeArray(_myTradeArray?_myTradeArray:[])\n                })\n\n\n            }\n            let apiList = [];\n            //TODO wallet saga done\n            if (marketArray && amm && market && ammMap) {\n                // let pairPromise =  usePairTitleBlock({market})\n                apiList = [\n                    LoopringAPI.exchangeAPI?.getMarketTrades({market}),\n                    pairDetailBlock({coinKey: market, ammKey: amm, ammMap})\n                ];\n                //HiGH: this need add websocket to update infr ticker ammpoolsbalace\n                // @ts-ignore\n                Promise.all([...apiList]).then(\n                    ([{marketTrades}, {ammPoolsBalance,tickMap}]: any[]) => {\n                        setAmmPoolSnapshot(ammPoolsBalance)\n                        if (tokenMap) {\n                            let {_tradeCalcData: _td} = pairDetailDone({\n                                coinKey:`${_tradeCalcData.coinSell}-${_tradeCalcData.coinBuy}`,\n                                market,\n                                ammPoolsBalance,\n                                tickerData: tickMap[ market ] ? tickMap[ market ]: {},\n                                tokenMap,\n                                _tradeCalcData,\n                                coinMap,\n                                marketCoins\n                            })\n                            _tradeCalcData = _td;\n                            _tradeFloat = makeTickView(tickMap[ market ] ?tickMap[ market ]: {})\n                            _tradeArray = makeMarketArray(market, marketTrades)\n                            // @ts-ignore\n                            setTradeCalcData(_tradeCalcData as TradeCalcData<C>);\n                            // @ts-ignore\n                            setTradeFloat(_tradeFloat);\n                            setTradeArray(_tradeArray as RawDataTradeItem[])\n                            // setPair(_pair)\n                            setTradeData({\n                                sell: {\n                                    belong: _tradeCalcData.sellCoinInfoMap ? _tradeCalcData.sellCoinInfoMap[ _tradeCalcData.coinSell ]?.simpleName : undefined,\n                                    balance: _tradeCalcData.walletMap ? _tradeCalcData.walletMap[ _tradeCalcData.coinSell ]?.count : 0\n                                },\n                                // @ts-ignore\n                                buy: {\n                                    belong: _tradeCalcData.sellCoinInfoMap ? _tradeCalcData.sellCoinInfoMap[ _tradeCalcData.coinBuy ]?.simpleName : undefined,\n                                    balance: _tradeCalcData.walletMap ? _tradeCalcData.walletMap[ _tradeCalcData.coinBuy ]?.count : 0\n                                },\n                            } as SwapTradeData<IBData<C>>)\n                        }\n                    }).catch((error) => {\n                        throw new CustomError({...ErrorMap.TRADE_LITE_SET_PAIR_ERROR, options: error})\n                        //TODO solve error\n                    })\n\n            }\n        }\n\n    }\n    return {\n        tradeCalcData,\n        tradeFloat,\n        tradeArray,\n        myTradeArray,\n        tradeData,\n        pair,\n        marketArray,\n        onSwapClick,\n        swapBtnI18nKey,\n        handleSwapPanelEvent\n    }\n\n}","import { useMemo, } from \"react\"\n\nimport { useActiveWeb3React } from \"../web3/useWeb3\"\n\nimport { WsAPI, ExchangeAPI, AmmpoolAPI, UserAPI, DEFAULT_TIMEOUT, } from 'loopring-sdk'\n\nfunction useApi(ApiClass: any, timeout = DEFAULT_TIMEOUT) {\n\n  const { chainId, active, } = useActiveWeb3React()\n\n    const genApi = () => {\n        if (!active || !chainId) {\n            return undefined\n        }\n\n        return new ApiClass(chainId, timeout)\n    }\n\n    const api = useMemo(genApi, [ApiClass, chainId, active, timeout])\n\n    return api\n}\n\nexport function useWsAPI() {\n    return useApi(WsAPI) as WsAPI\n}\n\nexport function useExchangeAPI() {\n    return useApi(ExchangeAPI) as ExchangeAPI\n}\n\nexport function useAmmpoolAPI() {\n    return useApi(AmmpoolAPI) as AmmpoolAPI\n}\n\nexport function useUserAPI() {\n    return useApi(UserAPI) as UserAPI\n}\n","import { useCallback, useMemo, useState, useRef, useEffect } from 'react'\n\nimport { useActiveWeb3React } from '../web3/useWeb3'\nimport { useWsAPI, } from './useApi2'\n\nimport { ChainId, getAccountArg, getCandlestickArg, \n    getAmmpoolArg, getTickerArg, WsProps } from 'loopring-sdk'\n\nconst stateArr = [\n    { key: 0, value: 'Connecting' },\n    { key: 1, value: 'Connected' },\n    { key: 2, value: 'Closing' },\n    { key: 3, value: 'Closed' }\n]\n\nexport const useWebsocket = ({ topics, verify, needApiKey, apiKey, }: { topics: any, needApiKey: boolean, apiKey: string|undefined, verify: boolean, }) => {\n    const ws = useRef<WebSocket | null>(null)\n    const [wsData, setMessage] = useState<any>(undefined)\n    const [readyState, setReadyState] = useState({ key: 0, value: 'Connecting' })\n\n    const { chainId, } = useActiveWeb3React()\n\n    const api = useWsAPI()\n\n    const creatWebSocket = () => {\n\n        if (!api || !chainId) {\n            return\n        }\n\n        api.getWsKey().then((wsApiKey: any) => {\n            let basePath: string = 'wss://ws.'\n            switch (chainId) {\n                case ChainId.MAINNET:\n                    basePath += process.env.REACT_APP_API_URL\n                    break\n                default:\n                    basePath += process.env.REACT_APP_API_URL_UAT\n                    basePath = 'wss://ws.uat2.loopring.io'\n            }\n\n            basePath += '/v3/ws?wsApiKey=' + wsApiKey\n    \n            try {\n                ws.current = new WebSocket(basePath)\n\n                const subTopics = (topics: any) => {\n                    let data: any = {\n                        op: 'sub',\n                        unsubscribeAll: 'true',\n                        topics: topics,\n                    }\n            \n                    if (needApiKey && apiKey) {\n                        data.apiKey = apiKey\n                    }\n            \n                    const flat_txt = JSON.stringify(data)\n                    sendMessage(flat_txt)\n                }\n    \n                ws.current.onopen = (_e) => {\n                    setReadyState(stateArr[ws.current?.readyState ?? 0])\n                    subTopics(topics)\n                }\n                \n                ws.current.onclose = (e) => {\n                    setReadyState(stateArr[ws.current?.readyState ?? 0])\n                }\n                \n                ws.current.onerror = (e) => {\n                    setReadyState(stateArr[ws.current?.readyState ?? 0])\n                }\n    \n                ws.current.onmessage = (e) => {\n                    setMessage(e.data)\n                }\n            } catch (error) {\n                console.log(error)\n            }\n\n        })\n\n        \n    }\n\n    const webSocketInit = () => {\n        if (!ws.current || ws.current.readyState === 3) {\n            creatWebSocket()\n        }\n    }\n\n    const closeWebSocket = () => {\n        ws.current?.close()\n    }\n\n    const sendMessage = (msg: any) => {\n        ws.current?.send(msg)\n    }\n\n    const reconnect = () => {\n        try {\n            closeWebSocket()\n            ws.current = null\n            creatWebSocket()\n        } catch (e) {\n            console.log(e)\n        }\n    }\n\n    useEffect(() => {\n\n        verify && webSocketInit()\n        return () => {\n            ws.current?.close()\n        }\n    }, [ws, verify])\n\n    return {\n        wsData,\n        readyState,\n        sendMessage,\n        closeWebSocket,\n        reconnect,\n    }\n}\n\nexport function useWs(topics: any, needApiKey: boolean, apiKey?: string, verify: boolean = true) {\n    const [socketData, setSocketData] = useState({})\n\n    const [isLocalPage, setIsLocalPage] = useState<boolean>(true)\n\n    useEffect(() => {\n\n        let mounted = true\n\n        const checkIsLocalPage = () => {\n            console.log('enter checkIsLocalPage')\n            document.addEventListener('visibilitychange', function () {\n                // page invisible trigger!\n                let isLocalPage = true\n                if (document.visibilityState === 'hidden') {\n                    isLocalPage = false\n                }\n                if (mounted) {\n                    setIsLocalPage(isLocalPage)\n                } else {\n                    console.log('unmounted! dont setIsLocalPage!')\n                }\n            })\n        }\n\n        checkIsLocalPage()\n\n        return () => {\n            mounted = false\n        }\n\n    }, [])\n\n    const { wsData, readyState, closeWebSocket, reconnect, sendMessage, } = useWebsocket({\n        topics,\n        apiKey,\n        needApiKey,\n        verify,\n    })\n\n    useEffect(() => {\n    \n        if (needApiKey && !apiKey) {\n            return\n        }\n\n        if (!verify) {\n            return\n        }\n\n        if (wsData === 'ping') {\n            try {\n                sendMessage('pong')\n            } catch (err) {\n                console.log(err)\n            }\n        } else {\n            if (wsData) {\n                setSocketData(JSON.parse(wsData))\n            }\n        }\n        \n        // if closed and is currente page then, reconnect.\n        if (readyState.key === 3 && isLocalPage) {\n            reconnect()\n        }\n        // if not current page, close it.\n        if (!isLocalPage) {\n            closeWebSocket()\n        }\n\n    }, [wsData, readyState, isLocalPage, verify, apiKey])\n\n    return {\n        socketData,\n    }\n}\n\nexport function useAmmpoolWs(apiKey: string) {\n\n    let topics: any[] = []\n\n    topics.push(getTickerArg('LRC-ETH'))\n\n    topics.push(getAmmpoolArg('0x18920d6E6Fb7EbE057a4DD9260D6D95845c95036'))\n\n    const needApiKey = false\n\n    const { socketData } = useWs(topics, needApiKey, apiKey)\n\n    return {\n        socketData,\n    }\n\n}\n","import { useRef } from 'react'\n\n// import Qrcode from 'components/qrcodes/Qrcode'\n\n\nimport { useAccount } from 'stores/account/hook'\n\nimport { useGetExchangeInfo, useGetGas, useGetMarkets, useGetTokens } from 'hooks/exchange/useExchangeAPI'\n\nimport { useAmmpoolWs } from 'hooks/common/useWebsocketApi'\n\nconst DebugPage = () => {\n\n  const inputRef = useRef<HTMLInputElement>(null)\n\n  const { account, isNoAccount, apiKey } = useAccount()\n\n  const {socketData} = useAmmpoolWs(apiKey)\n\n  const { markets } = useGetMarkets()\n\n  const { exchangeInfo } = useGetExchangeInfo()\n\n  const { tokens } = useGetTokens()\n\n  const { gas } = useGetGas()\n\n  const gasPrice = gas?.data\n\n  console.log('account:', account)\n  console.log('exchangeInfo:', exchangeInfo)\n  console.log('tokens:', tokens)\n\n  const showAddr = account.accAddr ? account.accAddr : ''\n\n  return (\n    <div>\n      Debug\n      <div>account:{JSON.stringify(account)}</div>\n      <div>eddsaKey:{account.eddsaKey}</div>\n      <div>wsdata: {JSON.stringify(socketData)}</div>\n      <div>----------------------------</div>\n      <div>markets:{JSON.stringify(markets)}</div>\n      <div>----------------------------</div>\n      <div>depositAddress:{exchangeInfo?.depositAddress}</div>\n      <div>exchangeAddress:{exchangeInfo?.exchangeAddress}</div>\n      <div>----------------------------</div>\n      {/*<div>exchangeInfo:{JSON.stringify(exchangeInfo)}</div>\n      <div>----------------------------</div>*/}\n      <div>tokens:{JSON.stringify(tokens)}</div>\n      <div>----------------------------</div>\n\n      {/*{isNoAccount() && <Qrcode value={showAddr} size={300} />}*/}\n      {/*<input type='input' ref={inputRef} width=\"150px\" />*/}\n      {/*<DepositBtn onClick={deposit} />*/}\n    </div>\n  )\n\n}\n\nexport default DebugPage\n","import React, { useEffect } from 'react'\nimport { TransactionTable, RawDataTransactionItem, TransactionTradeTypes, TransactionSide, TransactionStatus } from '@loopring-web/component-lib'\nimport { WithTranslation, withTranslation } from 'react-i18next'\nimport { Box, Paper } from '@material-ui/core'\nimport styled from '@emotion/styled'\nimport moment from 'moment'\nimport store from 'stores'\nimport { LoopringAPI } from 'stores/apis/api'\nimport { volumeToCount } from 'hooks/help/volumeToCount'\n// import { useGetTxs } from './hooks'\n\nconst StylePaper = styled(Box)`\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  height: 100%;\n  flex: 1;\n  background-color: ${({ theme }) => theme.colorBase.background().default};\n  border-radius: ${({ theme }) => theme.unit}px;\n  padding: 20px;\n\n  .title {\n    font-family: Gilroy-Medium;\n    font-size: ${({ theme }) => theme.unit * 3}px;\n    line-height: 19px;\n  }\n\n  .tableWrapper {\n    display: flex;\n    margin-top: 20px;\n    border: 1px solid ${({ theme }) => theme.colorBase.borderColor};\n    border-radius: ${({ theme }) => theme.unit}px;\n    padding: 26px;\n    flex: 1;\n    \n    .rdg {\n      flex: 1;\n    }\n  }\n` as typeof Paper;\n\n// export type RawDataTransactionItem2 = {\n//   token?: string,\n//   tradeType: TransactionTradeTypes,\n//   from: string | TransactionSide;\n//   to: string | TransactionSide;\n//   amount: number;\n//   fee: {\n//       unit: string;\n//       value: number;\n//   };\n//   memo?: string;\n//   time: number;\n//   txnHash: string;\n//   status: TransactionStatus;\n//   path?: string;\n// }\n\nconst TxPanel = withTranslation('common')((rest:WithTranslation<'common'>) => {\n    const container = React.useRef(null);\n    const [pageSize, setPageSize] = React.useState(10);\n    const [txTableData, setTxTableData] = React.useState<RawDataTransactionItem[]>([]);\n\n    const { accountId,apiKey } = store.getState().account;\n\n    useEffect(() => {\n        (async function getUserApi () {\n            if (LoopringAPI && LoopringAPI.userAPI && accountId && apiKey) {\n                const userTxns = await LoopringAPI.userAPI.getUserTranferList({\n                    accountId,\n                }, apiKey)\n                const mappingList = userTxns.userTransfers.map(o => ({\n                  token: o.symbol,\n                  from: o.senderAddress,\n                  to: o.receiverAddress,\n                  // amount: Number(o.amount),\n                  amount: Number(volumeToCount(o.symbol, o.amount)),\n                  fee: {\n                    unit: o.feeTokenSymbol || '',\n                    value: Number(volumeToCount(o.symbol, o.feeAmount || 0))\n                  },\n                  memo: o.memo || '',\n                  time: o.timestamp,\n                  txnHash: o.hash,\n                  status: o.status === 'processed' ? TransactionStatus.processed : o.status === 'processing' ? TransactionStatus.processing : o.status === 'received' ? TransactionStatus.received : TransactionStatus.failed,\n                  tradeType: o.txType === 'TRANSFER' ? TransactionTradeTypes.transfer : o.txType === 'DEPOSIT' ? TransactionTradeTypes.deposit : TransactionTradeTypes.withdraw,\n                }))\n                setTxTableData(mappingList)\n            }\n        })()\n    }, [accountId, apiKey])\n\n    React.useEffect(() => {\n        // @ts-ignore\n        let height = container?.current?.offsetHeight;\n        if (height) {\n            setPageSize(Math.floor((height - 120) / 44) - 2);\n        }\n    }, [container, pageSize]);\n\n    return (\n        <StylePaper ref={container}>\n            <div className=\"title\">Transactions</div>\n            <div className=\"tableWrapper\">\n                <TransactionTable {...{\n                  // rawData: txList,\n                  rawData: txTableData,\n                  pagination: {\n                    pageSize: pageSize\n                  },\n                  ...rest\n                }} />\n            </div>\n        </StylePaper>\n    )\n})\n\nexport default TxPanel\n","import { useEffect, useRef, useState } from 'react'\nimport { WithTranslation, withTranslation } from 'react-i18next'\nimport { PriceTag } from '@loopring-web/component-lib/static-resource'\nimport { Box, Paper, Typography } from '@material-ui/core'\nimport styled from '@emotion/styled'\nimport {\n    AssetsTable,\n    AssetTitle,\n    AssetTitleProps,\n    ChartType,\n    DoughnutChart,\n    ScaleAreaChart,\n    ToggleButtonGroup,\n    TokenType\n} from '@loopring-web/component-lib'\nimport { useModals } from 'hooks/modal/useModals'\n// import { useGetUserBalances } from 'hooks/exchange/useUserAPI'\nimport { useGetTokens } from 'hooks/exchange/useExchangeAPI'\nimport { volumeToCount } from 'hooks/help/volumeToCount'\nimport { LoopringAPI } from 'stores/apis/api'\nimport { AssetType } from 'loopring-sdk'\nimport store from 'stores'\n\nconst StylePaper = styled(Box)`\n  width: 100%;\n  height: 100%;\n  flex: 1;\n  background-color: ${({theme}) => theme.colorBase.background().default};\n  border-radius: ${({theme}) => theme.unit}px;\n  padding: 20px;\n\n  .title {\n    font-family: Gilroy-Medium;\n    font-size: ${({theme}) => theme.unit * 3}px;\n    line-height: 19px;\n  }\n\n  .tableWrapper {\n    display: flex;\n    flex: 1;\n    height: 100%;\n    border: 1px solid ${({theme}) => theme.colorBase.borderColor};\n    border-radius: ${({theme}) => theme.unit}px;\n    padding: 26px;\n  }\n` as typeof Box;\n\nconst StyledChartWrapper = styled(Box)`\n  height: 225px;\n\n  > div {\n    position: relative;\n    width: calc(50% - 6px);\n    height: 100%;\n    background-color: ${({theme}) => theme.colorBase.background().default};\n    border: 1px solid ${({theme}) => theme.colorBase.borderColor};\n    border-radius: ${({theme}) => theme.unit}px;\n    padding: ${({theme}) => theme.unit * 2.5}px ${({theme}) => theme.unit * 3}px;\n  }\n`\n\nconst StyledBtnGroupWrapper = styled(Box)`\n  position: absolute;\n  z-index: 10000;\n  right: ${({theme}) => theme.unit * 3}px;\n  bottom: ${({theme}) => theme.unit * 2.5}px;\n`\n\nconst toggleData = [\n    {value: '24 H', key: '24 H'},\n    {value: '1 W', key: '1 W'},\n    {value: 'ALL', key: 'ALL'},\n]\n\n// const DoughnutData = [\n//     {\n//         name: 'LP Token',\n//         value: 12898.0\n//     },\n//     {\n//         name: 'LRC',\n//         value: 12898.50\n//     },\n//     {\n//         name: 'ETH',\n//         value: 36547.00\n//     },\n//     {\n//         name: 'DOT',\n//         value: 23898.09\n//     },\n//     {\n//         name: 'BTC',\n//         value: 3489\n//     },\n//     {\n//         name: 'CRV',\n//         value: 180.09\n//     },\n//     {\n//         name: 'ALICE',\n//         value: 150.7\n//     },\n//     {\n//         name: 'LINA',\n//         value: 230.5\n//     },\n// ]\n\nconst testTrendData: any = [\n    {\n        timeStamp: 150,\n        low: Math.random() + 1,\n        high: Math.random() + 6,\n        open: Math.random() + 3,\n        close: Math.random() + 4,\n        volume: (Math.random() + 4) * 1500,\n    },\n    {\n        timeStamp: 160,\n        low: Math.random() + 1,\n        high: Math.random() + 6,\n        open: Math.random() + 3,\n        close: Math.random() + 4,\n        volume: (Math.random() + 4) * 1500,\n    },\n    {\n        timeStamp: 170,\n        low: Math.random() + 1,\n        high: Math.random() + 6,\n        open: Math.random() + 3,\n        close: Math.random() + 4,\n        volume: (Math.random() + 4) * 1500,\n    },\n    {\n        timeStamp: 180,\n        low: Math.random() + 1,\n        high: Math.random() + 6,\n        open: Math.random() + 3,\n        close: Math.random() + 4,\n        volume: (Math.random() + 4) * 1500,\n    },\n    {\n        timeStamp: 190,\n        low: Math.random() + 1,\n        high: Math.random() + 6,\n        open: Math.random() + 3,\n        close: Math.random() + 4,\n        volume: (Math.random() + 4) * 1500,\n    },\n    {\n        timeStamp: 200,\n        low: Math.random() + 1,\n        high: Math.random() + 6,\n        open: Math.random() + 3,\n        close: Math.random() + 4,\n        volume: (Math.random() + 4) * 1500,\n    },\n    {\n        timeStamp: 210,\n        low: Math.random() + 1,\n        high: Math.random() + 6,\n        open: Math.random() + 3,\n        close: Math.random() + 4,\n        volume: (Math.random() + 4) * 1500,\n    },\n    {\n        timeStamp: 220,\n        low: Math.random() + 1,\n        high: Math.random() + 6,\n        open: Math.random() + 3,\n        close: Math.random() + 4,\n        volume: (Math.random() + 4) * 1500,\n    },\n    {\n        timeStamp: 230,\n        low: Math.random() + 1,\n        high: Math.random() + 6,\n        open: Math.random() + 3,\n        close: Math.random() + 4,\n        volume: (Math.random() + 4) * 1500,\n    },\n    {\n        timeStamp: 240,\n        low: Math.random() + 1,\n        high: Math.random() + 6,\n        open: Math.random() + 3,\n        close: Math.random() + 4,\n        volume: (Math.random() + 4) * 1500,\n    },\n]\n\nexport type ITokenInfoItem = {\n    token: string,\n    detail: {\n        price: string,\n        symbol: string,\n        updatedAt: number\n    }\n}\n\nconst AssetPanel = withTranslation('common')(({t, ...rest}: WithTranslation) => {\n    const container = useRef(null);\n    const [pageSize, setPageSize] = useState(10);\n\n    const [chartPeriod, setChartPeriod] = useState('24 H')\n\n    // const { accountId,apiKey } = store.getState().account;\n\n    \n    // console.log(walletLayer2)\n    const { walletLayer2 } = store.getState().walletLayer2;\n\n    useEffect(() => {\n        (async function getUserApi () {\n            if (LoopringAPI && LoopringAPI.walletAPI) {\n                if (walletLayer2) {\n                    const userAssets = await LoopringAPI.walletAPI?.getUserAssets({\n                        wallet: '0xeF041462825bFdF79b2f1f02A70b2753cB5b1516',\n                        assetType: AssetType.DEX\n                    })\n                    console.log({userAssets})\n                    if (userAssets.assetSeries.length && !!userAssets.assetSeries.length) {\n                        \n                    }\n                }\n            }\n        })()\n    }, [walletLayer2])\n\n    useEffect(() => {\n        // @ts-ignore\n        let height = container?.current?.offsetHeight;\n        if (height) {\n            setPageSize(Math.floor((height - 120) / 44) - 1);\n        }\n    }, [container, pageSize]);\n    \n    const {\n        ShowDeposit,\n        ShowTransfer,\n        ShowWithdraw,\n        ShowResetAccount,\n    } = useModals()\n\n    const onShowDeposit = () => {\n        ShowDeposit(true)\n    }\n\n    const onShowTransfer = () => {\n        ShowTransfer(true)\n    }\n\n    const onShowWithdraw = () => {\n        ShowWithdraw(true)\n    }\n\n    const AssetTitleProps: AssetTitleProps = {\n        assetInfo: {\n            totalAsset: 123456.789,\n            priceTag: PriceTag.Dollar,\n        },\n        onShowDeposit,\n        onShowTransfer,\n        onShowWithdraw,\n    }\n\n    const { tokens: tokensAll } = useGetTokens()\n\n    const tokens = tokensAll?.tokenSymbolMap\n\n    // const { balances } = useGetUserBalances(tokens)\n\n    // const { walletLayer2 } = store.getState().walletLayer2;\n    const { faitPrices } = store.getState().system\n\n    const tokenPriceList = faitPrices ? Object.entries(faitPrices).map(o => ({\n        token: o[ 0 ],\n        detail: o[ 1 ]\n    })) as ITokenInfoItem[] : []\n\n\n    const tokenMap = Object.entries(store.getState().tokenMap.tokenMap || {}).map(o => ({\n        token: o[ 0 ],\n        tokenDetail: o[ 1 ]\n    }))\n    const coinList = walletLayer2 ? Object.keys(walletLayer2) : []\n    const coinDetailList = walletLayer2 ? Object.values(walletLayer2) as any : []\n\n    const doughnutData = coinList.map((coin, index) => {\n        const tokenPriceUSDT = Number(tokenPriceList.find(o => o.token === coin)?.detail.price) / Number(tokenPriceList.find(o => o.token === 'USDT')?.detail.price)\n        return ({\n            name: coin,\n            // TODO: LP TOKEN use 'hooks/help/makeMyAmmWithStat'\n            value: Number(volumeToCount(coin, coinDetailList[index].total)) * tokenPriceUSDT\n        })\n    })\n\n    // TODO: cannot get lp token or smallbalances for now\n    const assetsRawData = coinList.map((coin, index) => {\n        const tokenInfo = coinDetailList[ index ]\n        const tokenPriceUSDT = Number(tokenPriceList.find(o => o.token === coin)?.detail.price) / Number(tokenPriceList.find(o => o.token === 'USDT')?.detail.price)\n        const amount = Number(volumeToCount(coin, tokenInfo.total))\n        const locked = Number(volumeToCount(coin, tokenInfo.locked))\n\n        return ({\n            token: {\n                type: tokenMap.find(o => o.token === coin)?.tokenDetail.isLpToken ? TokenType.lp : TokenType.single,\n                value: coin\n            },\n            amount: amount,\n            available: amount - locked,\n            locked: locked,\n            smallBalance: tokenPriceUSDT * Number(volumeToCount(coin, coinDetailList[index].total)) < 1,\n        })\n    })\n\n    return (\n        <>\n            <Box>\n                <AssetTitle  {...{\n                    t,\n                    ...rest,\n                    ...AssetTitleProps\n                }} />\n            </Box>\n\n            {/*<div className=\"title\">{t('labelAssetsTitle')}</div>*/}\n\n            <StyledChartWrapper display={'flex'} justifyContent={'space-between'} alignItems={'center'} marginTop={2}>\n                <Paper component={'div'}>\n                    <Typography component=\"span\" color=\"textSecondary\" variant=\"body1\">Asset Distribution</Typography>\n                    <DoughnutChart data={doughnutData}/>\n                </Paper>\n                <Paper component={'div'}>\n                    <Typography component=\"span\" color=\"textSecondary\" variant=\"body1\">Total Assets</Typography>\n                    <ScaleAreaChart type={ChartType.Trend} data={testTrendData}/>\n                    <StyledBtnGroupWrapper>\n                        <ToggleButtonGroup exclusive size=\"small\" {...{\n                            ...rest,\n                            t,\n                            data: toggleData,\n                            value: chartPeriod,\n                            setValue: setChartPeriod\n                        }} />\n                    </StyledBtnGroupWrapper>\n                </Paper>\n            </StyledChartWrapper>\n            <StylePaper marginTop={2}>\n                <div className=\"tableWrapper\" ref={container}>\n                    <AssetsTable {...{\n                        rawData: assetsRawData,\n                        pagination: {\n                            pageSize: pageSize\n                        },\n                        showFiliter: true,\n                        ...rest\n                    }} />\n                </div>\n            </StylePaper>\n        </>\n    )\n})\n\nexport default AssetPanel\n","import React, { useEffect } from 'react'\nimport { TradeTable, TradeFilterTable, RawDataTradeItem } from '@loopring-web/component-lib'\nimport { WithTranslation, withTranslation } from 'react-i18next'\nimport styled from '@emotion/styled'\nimport { Box, Paper } from '@material-ui/core'\nimport store from 'stores'\nimport { LoopringAPI } from 'stores/apis/api'\nimport { volumeToCount } from 'hooks/help/volumeToCount'\n\nconst StylePaper = styled(Box)`\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  height: 100%;\n  flex: 1;\n  background-color: ${({ theme }) => theme.colorBase.background().default};\n  border-radius: ${({ theme }) => theme.unit}px;\n  padding: 20px;\n\n  .title {\n    font-family: Gilroy-Medium;\n    font-size: ${({ theme }) => theme.unit * 3}px;\n    line-height: 19px;\n  }\n\n  .tableWrapper {\n    display: flex;\n    flex: 1;\n    margin-top: 20px;\n    border: 1px solid ${({ theme }) => theme.colorBase.borderColor};\n    border-radius: ${({ theme }) => theme.unit}px;\n    padding: 26px;\n\n    .rdg {\n      flex: 1;\n    }\n  }\n` as typeof Paper;\n\n// side: keyof typeof TradeTypes;\n//     amount: {\n//         from: {\n//             key: string;\n//             value: number|undefined;\n//         },\n//         to: {\n//             key: string;\n//             value: number|undefined;\n//         }\n//     };\n//     price:{\n//         key:string\n//         value:number|undefined,\n//     }\n//     // priceDollar: number;\n//     // priceYuan: number;\n//     fee: {\n//         key: string;\n//         value: number|undefined;\n//     };\n//     time: number;\n\nconst TradePanel = withTranslation('common')((rest:WithTranslation<'common'>) => {\n    const container = React.useRef(null);\n    const [pageSize, setPageSize] = React.useState(10);\n    const [originalData, setOriginalData] = React.useState<RawDataTradeItem[]>([])\n\n    const { accountId,apiKey } = store.getState().account;\n\n    useEffect(() => {\n        (async function getUserApi () {\n            if (LoopringAPI && LoopringAPI.userAPI && accountId && apiKey) {\n                const userTrades = await LoopringAPI.userAPI.getUserTrades({\n                    accountId,\n                }, apiKey)\n                if (userTrades && userTrades.userTrades) {\n                  setOriginalData(userTrades.userTrades.map(o => {\n                    const marketList = o.market.split('-')\n                    // due to AMM case, we cannot use first index\n                    const baseToken = marketList[marketList.length - 2]\n                    const quoteToken = marketList[marketList.length - 1]\n\n                    return ({\n                      side: o.side,\n                      price: {\n                        key: baseToken,\n                        value: Number(o.price)\n                      },\n                      fee: {\n                        key: baseToken,\n                        value: Number(volumeToCount(baseToken, o.fee))\n                      },\n                      time: Number(o.tradeTime),\n                      amount: {\n                        from: {\n                          key: baseToken,\n                          value: Number(volumeToCount(baseToken, o.volume))\n                        },\n                        to: {\n                          key: quoteToken,\n                          value: Number(volumeToCount(baseToken, o.volume)) / Number(o.price)\n                        }\n                      }\n                    })\n                  }))\n                }\n            }\n        })()\n    }, [accountId, apiKey])\n\n    React.useEffect(() => {\n        // @ts-ignore\n        let height = container?.current?.offsetHeight;\n        if (height) {\n            setPageSize(Math.floor((height - 120) / 44) - 2);\n        }\n    }, [container, pageSize]);\n\n    // const txList: any[] = []\n\n    return (\n        <>\n            <StylePaper ref={container}>\n                <div className=\"title\">Trades</div>\n                <div className=\"tableWrapper\">\n                    <TradeTable {...{\n                      rawData: originalData,\n                      pagination: {\n                        pageSize: pageSize\n                      },\n                      ...rest}}/>\n                </div>\n            </StylePaper>\n        </>\n    )\n})\n\nexport default TradePanel\n","\nimport React, { useEffect } from 'react'\nimport { OrderHistoryTable, OrderHistoryRawDataItem } from '@loopring-web/component-lib'\nimport { TradeTypes } from '@loopring-web/component-lib/static-resource'\nimport { WithTranslation, withTranslation } from 'react-i18next'\nimport { Box, Paper } from '@material-ui/core'\nimport styled from '@emotion/styled'\nimport store from 'stores'\nimport { LoopringAPI } from 'stores/apis/api'\nimport { volumeToCount } from 'hooks/help/volumeToCount'\n\nconst StylePaper = styled(Box)`\n    display: flex;\n    flex-direction: column;\n    width: 100%;\n    height: 100%;\n    flex: 1;\n    background-color: ${({ theme }) => theme.colorBase.background().default};\n    border-radius: ${({ theme }) => theme.unit}px;\n    padding: 20px;\n\n    .title {\n        font-family: Gilroy-Medium;\n        font-size: ${({ theme }) => theme.unit * 3}px;\n        line-height: 19px;\n    }\n\n    .tableWrapper {\n        display: flex;\n        flex: 1;\n        margin-top: 20px;\n        border: 1px solid ${({ theme }) => theme.colorBase.borderColor};\n        border-radius: ${({ theme }) => theme.unit}px;\n        padding: 26px;\n\n        .rdg {\n            flex: 1;\n        }\n    }\n` as typeof Paper;\n\n// export type OrderHistoryRawDataItem = {\n//     side: keyof typeof TradeTypes;\n//     amount: OrderPair;\n//     average: number;\n//     filledAmount: OrderPair;\n//     filledPrice: {\n//         key: string;\n//         value: number;\n//     }\n//     time: number;\n//     status: keyof typeof TradeStatus;\n//     detailTable: OrderHistoryTableDetailItem[]\n// }\n\nconst OrderPanel = withTranslation('common')((rest: WithTranslation) => {\n    const container = React.useRef(null);\n    const [pageSize, setPageSize] = React.useState(10);\n    const [orderOriginalData, setOrderOriginalData] = React.useState<OrderHistoryRawDataItem[]>([])\n\n    const { accountId,apiKey } = store.getState().account;\n\n    useEffect(() => {\n        (async function getUserApi () {\n            if (LoopringAPI && LoopringAPI.userAPI && accountId && apiKey) {\n                const userOrders = await LoopringAPI.userAPI.getOrders({\n                    accountId,\n                }, apiKey)\n                if (userOrders && Array.isArray(userOrders.orders) && !!userOrders.orders.length) {\n                    setOrderOriginalData(userOrders.orders.map(o => {\n                        const marketList = o.market.split('-')\n                        // due to AMM case, we cannot use first index\n                        const baseToken = marketList[marketList.length - 2]\n                        const quoteToken = marketList[marketList.length - 1]\n                        const { baseAmount, quoteAmount, baseFilled, quoteFilled } = o.volumes\n\n                        return ({\n                            side: o.side === 'BUY' ? TradeTypes.Buy : TradeTypes.Sell,\n                            amount: {\n                                from: {\n                                    key: baseToken,\n                                    // value: Number(baseAmount)\n                                    value: Number(volumeToCount(baseToken, baseAmount))\n                                },\n                                to: {\n                                    key: quoteToken,\n                                    value: Number(volumeToCount(quoteToken, quoteAmount))\n                                }\n                            },\n                            // average: Number(o.price),\n                            average: Number(volumeToCount(quoteToken, quoteFilled)) / Number(volumeToCount(baseToken, baseFilled)),\n                            filledAmount: {\n                                from: {\n                                    key: baseToken,\n                                    // value: Number(baseFilled)\n                                    value: Number(volumeToCount(baseToken, baseFilled))\n                                },\n                                to: {\n                                    key: quoteToken,\n                                    value: Number(volumeToCount(quoteToken, quoteFilled))\n                                }\n                            },\n                            filledPrice: {\n                                key: quoteToken,\n                                value: Number(o.price)\n                            },\n                            time: o.validity.start * 1000,\n                            status: o.status,\n                            detailTable: []\n                        })\n                    }))\n                }\n            }\n        })()\n    }, [accountId, apiKey])\n\n    React.useEffect(() => {\n        // @ts-ignore\n        let height = container?.current?.offsetHeight;\n        if (height) {\n            setPageSize(Math.floor((height - 120) / 44) - 2);\n        }\n    }, [container, pageSize]);\n\n    return (\n        <>\n            <StylePaper ref={container}>\n                <div className=\"title\">Order History</div>\n                <div className=\"tableWrapper\">\n                    <OrderHistoryTable {...{\n                        pagination: {\n                            pageSize: pageSize\n                        },\n                        rawData: orderOriginalData,\n                        ...rest\n                    }} />\n                </div>\n            </StylePaper>\n        </>\n    )\n})\n\nexport default OrderPanel\n","import styled from '@emotion/styled';\nimport { Box, Button, Divider, Grid, Switch, Typography } from '@material-ui/core';\nimport React from 'react';\nimport { UpColor, Currency, DropDownIcon } from '@loopring-web/component-lib/src/static-resource';\nimport {\n    BtnLanguage,\n    OutlineSelect,\n    OutlineSelectItem, QRCodePanel,\n    TypographyStrong, useSettings\n} from '@loopring-web/component-lib';\nimport { Trans, useTranslation, WithTranslation, withTranslation } from 'react-i18next';\nimport { useTheme } from '@emotion/react';\nimport { LanguageKeys } from '@loopring-web/component-lib/static-resource';\n\n// const MuiModalStyled = styled(MuiModal)`\n//   //background: ${({theme}) => theme.colorBase.background().secondary};\n//   // .MuiBackdrop-root{\n//   //   z-index: -1;\n//   //   background-color: ${({theme}) => theme.colorBase.background().outline};\n//   // }\n//   display: flex;\n//   align-items: center;\n//   justify-content: center;\n// ` as typeof MuiModal;\n// const BlockStyled = styled(Box)`\n//   ${({theme}) => theme.border.defaultFrame({c_key: 'blur', d_R: 1})};\n//   background: ${({theme}) => theme.colorBase.background().secondary};\n//   max-height: var(--panel-setting-height);\n//   max-width: var(--panel-setting-width);\n//   display: flex;\n//   justify-content: space-around;\n//   align-items: center;\n//   overflow: scroll;\n//   padding: ${({theme}) => theme.unit*8}px\n// `;\n\nconst StyledPaper = styled(Grid)`\n  width: 100%;\n  height: 100%;\n  background-color: ${({theme}) => theme.colorBase.background().default};\n  ${({theme}) => theme.border.defaultFrame({c_key: 'blur', d_R: 1})};\n`\n\nconst StyledSwitch = styled(Switch)(({theme}) => ({\n    \"& .Mui-checked\": {\n        color: theme.colorBase.textPrimary,\n        '& + .MuiSwitch-track.MuiSwitch-track': {\n            border: `solid ${theme.colorBase.success}`,\n        },\n        '& .MuiSwitch-thumb': {\n            backgroundColor: theme.colorBase.success,\n        }\n    },\n    '& .MuiSwitch-track': {\n        border: `solid ${theme.colorBase.error}`,\n        opacity: 1\n    },\n    '& .MuiSwitch-thumb': {\n        backgroundColor: theme.colorBase.error,\n    }\n}));\n\nexport const BtnCurrency = ({t, currency, label, handleChange}: any) => {\n    const [state, setState] = React.useState<string>(currency ? currency : Currency.dollar);\n    const _handleChange = React.useCallback((event: React.ChangeEvent<any>) => {\n        setState(event.target.value);\n        if (handleChange) {\n\n            handleChange(event.target.value)\n        }\n    }, [handleChange])\n    return <OutlineSelect aria-label={t(label)} IconComponent={DropDownIcon}\n                          labelId=\"language-selected\"\n                          id=\"language-selected\"\n                          value={state} autoWidth\n                          onChange={_handleChange}>\n        <OutlineSelectItem value={Currency.dollar}>$ {t('labelUSDollar')}</OutlineSelectItem>\n            <OutlineSelectItem value={Currency.yen}>¥ {t('labelCNYYuan')}</OutlineSelectItem>\n    </OutlineSelect>\n}\n\nconst StyledDivider = styled(Divider)`\n  margin: ${({theme}) => theme.unit}px 0 ${({theme}) => theme.unit}px 0px;\n`\nconst DividerBlock = styled(Divider)`\n  margin: 0;\n  flex: 1;\n  width: 1px;\n  height: ${({theme}) => theme.unit * 3}px;\n  background: ${({theme}) => theme.colorBase.focus};\n`\n\n\n\nexport const SettingPanel = withTranslation(['common', 'layout'])(({t,i18n, ...rest}: & WithTranslation) => {\n    const theme = useTheme();\n    const {setUpColor,setLanguage,setCurrency,currency,upColor} = useSettings()\n    const language = i18n.language;\n    const handleOnLanguageChange = (lang: LanguageKeys) => {\n        setLanguage(lang);\n        i18n.changeLanguage(lang);\n    }\n    const handleOnCurrencyChange = (value: any) => {\n        setCurrency(value);\n    }\n    const handleColorChange = (e:any) => {\n        if(e.target.checked){\n            setUpColor(UpColor.green) ;\n        }else{\n            setUpColor(UpColor.red);\n        }\n    }\n    return <Grid container direction={'column'} justifyContent={'space-between'} alignItems={'stretch'} flexWrap={'nowrap'}>\n        <Typography variant={'h4'} component={'h3'} marginY={1} paddingLeft={2}>{t('labelTitleSecurity')}</Typography>\n        <StyledPaper item xs={12} display={'flex'} flexDirection={'column'} marginBottom={2} paddingY={2}>\n            <Box component={'section'} display={'flex'} flexDirection={'column'}>\n                <Typography variant={'h5'} component={'h4'} paddingX={2}>{t('labelTitleResetL2Keypair')}</Typography>\n                <StyledDivider/>\n                <Grid container display={'flex'} flexDirection={'row'} justifyContent={'stretch'}\n                      alignItems={'flex-start'} paddingX={2} marginBottom={2}>\n                    <Grid item xs={8} display={'flex'} flexDirection={'column'}>\n                        <Typography variant={'body1'} component={'p'}>\n                            <Trans i18nKey=\"resetDescription\">\n                                Create a new signing key for layer-2 authentication (no backup needed). This will\n                                <TypographyStrong component={'span'}>cancel all your pending orders</TypographyStrong>.\n                            </Trans>\n                        </Typography>\n                    </Grid>\n                    <Grid item xs={4} display={'flex'} flexDirection={'column'} justifyContent={'space-evenly'}\n                          alignItems={'flex-end'} alignSelf={'stretch'}>\n                        <Button variant={'outlined'} size={'medium'} color={'primary'}>{t('labelBtnReset')}</Button>\n                    </Grid>\n                    <Grid item xs={12} display={'flex'} flexDirection={'row'} justifyContent={'flex-end'}\n                          alignItems={'center'} alignSelf={'stretch'}>\n                        <Typography variant={'body2'} component={'p'}\n                                    paddingTop={1}>{t('labelHadChangPassword', {passDay: '14 hours'})}</Typography>\n                    </Grid>\n\n                </Grid>\n            </Box>\n            <Box component={'section'} display={'flex'} flexDirection={'column'}>\n                <Typography variant={'h5'} component={'h4'} paddingX={2}>{t('labelTitleExportAccount')}</Typography>\n                <StyledDivider/>\n                <Grid container display={'flex'} flexDirection={'row'} justifyContent={'stretch'}\n                      alignItems={'flex-start'} paddingX={2} marginBottom={2}>\n                    <Grid item xs={7} display={'flex'} flexDirection={'column'}>\n                        <Typography variant={'body1'} component={'p'}>{t('descriptionExportAccount')}</Typography>\n                    </Grid>\n                    <Grid item xs={5} display={'flex'} flexDirection={'column'} justifyContent={'space-evenly'}\n                          alignItems={'flex-end'} alignSelf={'stretch'}>\n                        <Grid item> <Button variant={'outlined'} size={'medium'}\n                                            color={'primary'}>{t('labelBtnExportAccount')}</Button></Grid>\n                    </Grid>\n                </Grid>\n            </Box>\n        </StyledPaper>\n\n        <Typography variant={'h4'} component={'h3'} marginY={1} paddingLeft={2}>{t('labelTitlePreferences')}</Typography>\n        <StyledPaper item xs={12} display={'flex'} flexDirection={'column'} marginBottom={2} paddingY={2}>\n            <Box component={'section'} display={'flex'} flexDirection={'column'}>\n                {/*<Typography variant={'h5'} component={'h4'} paddingX={2}>{t('labelTitleLayout')}</Typography>*/}\n                {/*<StyledDivider/>*/}\n                <Grid container display={'flex'} flexDirection={'row'} justifyContent={'stretch'}\n                      alignItems={'flex-start'} paddingX={2} marginBottom={2}>\n                    <Grid item xs={7} display={'flex'} flexDirection={'column'}>\n                        <Typography variant={'body1'} component={'p'}>{t('labelLanguage')}</Typography>\n                    </Grid>\n                    <Grid item xs={5} display={'flex'} flexDirection={'column'} justifyContent={'space-evenly'}\n                          alignItems={'flex-end'} alignSelf={'stretch'}>\n                        <Grid item>\n                            <BtnLanguage {...{\n                                t, ...rest,\n                                language,\n                                label: 'languageSetting',\n                                handleChange: handleOnLanguageChange\n                            }}></BtnLanguage>\n                        </Grid>\n                    </Grid>\n                </Grid>\n                <Grid container display={'flex'} flexDirection={'row'} justifyContent={'stretch'}\n                      alignItems={'flex-start'} paddingX={2} marginBottom={2}>\n                    <Grid item xs={7} display={'flex'} flexDirection={'column'}>\n                        <Typography variant={'body1'} component={'p'}>{t('labelCurrency')}</Typography>\n                    </Grid>\n                    <Grid item xs={5} display={'flex'} flexDirection={'column'} justifyContent={'space-evenly'}\n                          alignItems={'flex-end'} alignSelf={'stretch'}>\n                        <Grid item>\n                            <BtnCurrency {...{\n                                t, ...rest,\n                                currency,\n                                label: 'currencySetting',\n                                handleChange: handleOnCurrencyChange\n                            }}></BtnCurrency>\n\n                        </Grid>\n                    </Grid>\n                </Grid>\n                <Grid container display={'flex'} flexDirection={'row'} justifyContent={'stretch'}\n                      alignItems={'flex-start'} paddingX={2}>\n                    <Grid item xs={7} display={'flex'} flexDirection={'column'}>\n                        <Typography variant={'body1'} component={'p'}>{t('labelColors')}</Typography>\n                    </Grid>\n                    <Grid item xs={5} display={'flex'} flexDirection={'row'} justifyContent={'flex-end'}\n                          alignItems={'center'} alignSelf={'stretch'}>\n                        <Typography variant={'body1'} component={'span'} paddingX={2}>\n                            <Trans i18nKey=\"whichColorIsUp\">\n                                <span style={{\n                                    textTransform: 'capitalize',\n                                    color: upColor === UpColor.green ? theme.colorBase.success : theme.colorBase.error\n                                }}>{{up: upColor === UpColor.green ? t('labelgreen') : t('labelred')}} up</span>\n                                and <span style={{\n                                textTransform: 'capitalize',\n                                color: upColor === UpColor.green ? theme.colorBase.error : theme.colorBase.success\n                            }}>{{down: upColor === UpColor.green ? t('labelred') : t('labelgreen')}} down</span>\n                            </Trans>\n                        </Typography>\n                        <StyledSwitch checked={upColor === UpColor.green} color=\"default\"\n                                      onChange={handleColorChange}/>\n                    </Grid>\n                </Grid>\n            </Box>\n\n        </StyledPaper>\n\n    </Grid>\n})\n\n// export const SettingPage = ({open,onClose}: { open:boolean, onClose:(e:any)=>void})=>{\n//     return  <MuiModalStyled\n//         open={open}\n//         onClose={onClose}\n//         aria-labelledby=\"modal-modal-title\"\n//         aria-describedby=\"modal-modal-description\"\n//     >\n//         <BlockStyled >\n//            <SettingPanel/>\n//         </BlockStyled>\n//     </MuiModalStyled>\n// }\n\n\n","import { useRouteMatch } from 'react-router'\n\nimport { Box, Paper } from '@material-ui/core'\nimport {\n    DepositPanel,\n    SubMenu,\n    SubMenuList as BasicSubMenuList,\n} from '@loopring-web/component-lib'\nimport { useTranslation, withTranslation } from 'react-i18next'\nimport styled from '@emotion/styled'\nimport { subMenuLayer2 } from '@loopring-web/component-lib/src/static-resource'\n\nimport TxPanel from './TxPanel'\nimport AssetPanel from './AssetPanel'\nimport TradePanel from './TradePanel'\nimport OrderPanel from './OrderPanel'\nimport { SettingPanel } from '../SettingPage';\nimport store from '../../stores';\nimport { AccountStatus } from '../../state_machine/account_machine_spec';\nimport { useModalProps } from '../../layouts/header/hook';\n\nexport const subMenu = subMenuLayer2;\nconst BoxStyle = styled(Box)`\n  ${({theme})=>`\n    background-color: ${theme.colorBase.background().default};\n    width: 100%;\n    min-width:auto;\n    ${theme.border.defaultFrame({c_key: 'blur'})};\n    & > div{\n      background-color:initial;\n      border:0;\n      width:auto;\n      min-width: var(--swap-box-width);\n      max-width: 520px;\n    }\n    `\n  }\n   \n` as typeof Box\n\nconst SubMenuList = withTranslation(['layout','common'], { withRef: true })(BasicSubMenuList);\nexport const Layer2Page = () => {\n\n    let match: any = useRouteMatch(\"/layer2/:item\")\n    const {status: accStatus} = store.getState().account;\n    const {t,...rest} = useTranslation()\n    const selected = match?.params.item ?? 'assets';\n    const {depositProps} = useModalProps()\n\n    return <>  { accStatus === AccountStatus.NOACCOUNT\n    || accStatus === AccountStatus.DEPOSITING\n    || accStatus === AccountStatus.DEPOSIT_TO_CONFIREM ?\n        <BoxStyle display={'flex'} flexWrap={'wrap'} alignItems={'center'} justifyContent={'center'} alignContent={'flex-start'}>\n            <DepositPanel  {...{\n                ...rest, ...depositProps,\n                title: t('depositTitleAndActive'),\n                description: 'depositAndActiveDescription'\n            }} > </DepositPanel>\n        </BoxStyle>: <>\n            <Box width={'200px'} display={'flex'} justifyContent={'stretch'} marginRight={3}>\n                <SubMenu>\n                    <SubMenuList selected={selected} subMenu={subMenu as any} />\n                </SubMenu>\n            </Box>\n            <Box minHeight={420} display={'flex'} alignItems={'stretch'} flexDirection={'column'} marginTop={0} flex={1}>\n                {selected === 'assets' && <AssetPanel />}\n                {selected === 'transactions' && <TxPanel />}\n                {selected === 'trades' && <TradePanel />}\n                {selected === 'orders' && <OrderPanel />}\n                {selected === 'setting' && <SettingPanel />}\n            </Box>\n        </>\n    }\n        </>\n\n\n\n}\n","import { WithTranslation, withTranslation } from 'react-i18next'\nimport { Box, } from '@material-ui/core'\nimport styled from '@emotion/styled'\n\nimport React from 'react';\nimport { useAmmMapUI } from './hook';\n\nimport { PoolsTable } from '@loopring-web/component-lib';\nimport { AmmPoolActivityRule, LoopringMap } from 'loopring-sdk/dist/defs/loopring_defs';\n\nconst StylePaper = styled(Box)`\n  width: 100%;\n  height: 100%;\n  flex: 1;\n  background-color: ${({theme}) => theme.colorBase.background().default};\n  border-radius: ${({theme}) => theme.unit}px;\n\n  .rdg {\n    flex: 1;\n  }\n\n` as typeof Box;\n\n\nexport const PoolsPanel = withTranslation('common')(<R extends { [ key: string ]: any }, I extends { [ key: string ]: any }>\n({t, ammActivityMap, ...rest}: WithTranslation\n    & {\n    ammActivityMap: LoopringMap<LoopringMap<AmmPoolActivityRule[]>> | undefined }) => {\n    const container = React.useRef(null);\n    const [pageSize, setPageSize] = React.useState(10);\n    const {updateTickersUI, rawData, page} = useAmmMapUI({pageSize});\n\n    React.useEffect(() => {\n        // @ts-ignore\n        let height = container?.current?.offsetHeight;\n        if (height) {\n            setPageSize(Math.floor((height - 120) / 44) - 1);\n        }\n    }, [container, pageSize]);\n\n    const handlePageChange = React.useCallback((page) => {\n        updateTickersUI(page)\n    }, [updateTickersUI]);\n    return (\n        <>\n            <StylePaper display={'flex'} flexDirection={'column'} ref={container}>\n                <PoolsTable {...{\n                    rawData,\n                    handlePageChange,\n                    page,\n                    pagination: {\n                        pageSize\n                    }\n                }} />\n            </StylePaper>\n        </>\n    )\n})\n\n","import React from 'react';\nimport { useAmmMap } from '../../../stores/Amm/AmmMap';\nimport { AmmDetail, CustomError, ErrorMap, } from '@loopring-web/component-lib/src/static-resource';\nimport { deepClone } from '../../../utils/obj_tools';\nimport { STATUS } from '../../../stores/constant';\nimport { useTokenMap } from '../../../stores/token';\nimport { useSocket } from '../../../stores/socket';\nimport { useTicker } from '../../../stores/ticker';\nimport { TickerMap, tickerService } from '../../../services/tickerService';\n\nexport function useAmmMapUI<R extends { [ key: string ]: any }, I extends { [ key: string ]: any }>({pageSize}: { pageSize: number }) {\n    const [rawData, setRawData] = React.useState<Array<AmmDetail<any>> | []>([]);\n    const [page, setPage] = React.useState<number>(1);\n    const [keys, setKeys] = React.useState<string[]>([]);\n    const {coinMap} = useTokenMap();\n    const {\n        ammMap,\n        status: ammMapStatus,\n        // errorMessage: errorAmmMap,\n        statusUnset: ammMapStatusUnset,\n        // updateAmmMap,\n    } = useAmmMap();\n    const {\n        tickerMap,\n        status: tickerStatus,\n        // errorMessage: errorTickerMap,\n        statusUnset: tickerStatusUnset,\n        updateTickers,\n    } = useTicker();\n    const {\n        status:socketStatus,\n        // errorMessage: errorTickerMap,\n        statusUnset: socketStatusUnset,\n    } = useSocket();\n    const updateRawData = React.useCallback( (tickerMap) => {\n        try {\n            const _ammMap = deepClone(ammMap);\n            for (let tickerMapKey in tickerMap) {\n                _ammMap[ tickerMapKey ].tradeFloat = tickerMap[ tickerMapKey ]\n            }\n            setRawData(Object.keys(_ammMap).map((ammKey: string) => {\n                if (coinMap) {\n                    _ammMap[ ammKey ][ 'coinAInfo' ] = coinMap[ _ammMap[ ammKey ][ 'coinA' ] ];\n                    _ammMap[ ammKey ][ 'coinBInfo' ] = coinMap[ _ammMap[ ammKey ][ 'coinB' ] ];\n                }\n                return  _ammMap[ ammKey ];\n            }) )\n        } catch (error) {\n            throw new CustomError({...ErrorMap.NO_TOKEN_MAP, options: error})\n        }\n\n    } ,[ammMap])\n\n\n    const updateTickersUI = React.useCallback((_page) => {\n        setPage(_page);\n        if (ammMap && Object.keys(ammMap).length > 0) {\n            const keys = []\n            for (let i = (page - 1) * pageSize; i < Object.keys(ammMap).length && i < (page - 1) * pageSize + pageSize; i++) {\n                keys.push(Object.keys(ammMap)[ i ]);\n            }\n            //TODO: SOCKET refixed key\n            setKeys(keys);\n            try{\n               // socketStart({})\n            }catch (error){\n                updateTickers(keys);\n            }\n\n\n        }\n    }, [ammMap, page, pageSize]);\n\n    const subject = React.useMemo(() =>  tickerService.onSocket(),[]);\n    React.useEffect(() => {\n        if(ammMap && Object.keys(ammMap).length !== 0) {\n            updateTickersUI(page)\n        }\n        const subscription = subject.subscribe(tickerMap => {\n            if (tickerMap) {\n                updateRawData(tickerMap);\n            } else {\n                updateTickers(keys);\n            }\n        });\n        return ()=> subscription.unsubscribe();\n    }, [subject]);\n\n    //Websocket catch error do Api\n    React.useEffect(() => {\n        switch (socketStatus) {\n            case \"ERROR\":\n                console.log(\"ERROR\", 'open websocket error get moment value from api ');\n                socketStatusUnset();\n                updateTickers(keys);\n                break;\n            default:\n                break;\n        }\n    }, [socketStatus, socketStatusUnset]);\n\n    React.useEffect(() => {\n        switch (tickerStatus) {\n            case \"ERROR\":\n                console.log(\"ERROR\", 'get ticker error,ui');\n                tickerStatusUnset()\n                break;\n            case \"PENDING\":\n                break;\n            case \"DONE\":\n                tickerStatusUnset()\n                updateRawData(tickerMap)\n                break;\n            default:\n                break;\n        }\n    }, [tickerStatus, tickerStatusUnset]);\n\n    React.useEffect(() => {\n        switch (ammMapStatus) {\n            case \"ERROR\":\n                console.log(\"ERROR\", 'get ammMap error,ui');\n                ammMapStatusUnset();\n                break;\n            case STATUS.PENDING:\n                console.log(\"PENDING\", 'get ammMap error,ui');\n                break;\n            case STATUS.DONE:\n                ammMapStatusUnset();\n                updateTickersUI(1)\n                break;\n            default :\n                break;\n        }\n    }, [ammMapStatus, ammMapStatusUnset, updateTickersUI]);\n\n\n\n    return {\n        page,\n        rawData,\n        updateTickersUI,\n    }\n}\n\n","import { AmmPanelType } from '@loopring-web/component-lib';\nimport { AmmDetailBase } from '@loopring-web/component-lib/src/static-resource';\nimport {  volumeToCountAsBigNumber } from './volumeToCount';\n\nexport const ammPairInit = ({pair, _ammCalcData,ammType,tokenMap, coinMap, walletMap,ammMap ,tickerData,ammPoolsBalance}:any)=>{\n    _ammCalcData.coinInfoMap = coinMap;\n    if(tickerData){\n        // debugger\n        _ammCalcData.AtoB =  Number(tickerData.close)\n    }\n    if(isNaN(_ammCalcData.AtoB) && ammPoolsBalance){\n        const baseVol = volumeToCountAsBigNumber(pair.coinAInfo.simpleName,ammPoolsBalance.pooled[0].volume);\n        const quoteVol = volumeToCountAsBigNumber(pair.coinBInfo.simpleName,ammPoolsBalance.pooled[1].volume);\n        _ammCalcData.AtoB = quoteVol && baseVol && quoteVol.div(baseVol).toNumber();\n\n    }\n    if(pair.coinAInfo){\n        if(ammType === AmmPanelType.Deposit ) {\n            _ammCalcData.myCoinA = {\n                belong: pair.coinAInfo.simpleName,\n                balance: walletMap ? walletMap[ pair.coinAInfo.simpleName ]?.count : 0,\n            }\n            _ammCalcData.myCoinB = {\n                belong: pair.coinBInfo.simpleName,\n                balance: walletMap ? walletMap[ pair.coinBInfo.simpleName ]?.count : 0,\n            }\n        }else {\n            const key = `${pair.coinAInfo.simpleName}-${pair.coinBInfo.simpleName}`;\n            let coinACount = 0,coinBCount = 0 ;\n            if(walletMap){\n                const  balance =  walletMap ? walletMap[ 'LP-' + key ]?.count : 0;\n                const {totalLPToken,totalA,totalB}:AmmDetailBase<any> = ammMap[ 'AMM-' + key ];\n                if(totalA && totalLPToken &&totalB) {\n                    coinACount = totalA / totalLPToken * balance;\n                    coinBCount = totalB / totalLPToken * balance;\n                }\n            }\n            _ammCalcData.myCoinA = {\n                belong: pair.coinAInfo.simpleName,\n                balance: coinACount,\n            }\n            _ammCalcData.myCoinB = {\n                belong: pair.coinBInfo.simpleName,\n                balance: coinBCount,\n            }\n        }\n    }\n\n\n    return  _ammCalcData\n}\n","import { AmmPanel, AmmPanelType } from '@loopring-web/component-lib';\nimport { AmmData, AmmInData, CoinInfo, IBData, WalletMap } from '@loopring-web/component-lib/static-resource';\nimport { useAmmPanel } from './hooks';\nimport React from 'react';\nimport { Box } from '@material-ui/core';\nimport { AmmPoolSnapshot, TickerData } from 'loopring-sdk';\nimport { TradeBtnStatus } from '@loopring-web/component-lib/components/panel/index';\n\nexport const AmmPanelView = <T extends AmmData<C extends IBData<I> ? C : IBData<I>>, I,\n    ACD extends AmmInData<I>,\n    C = IBData<I>>({\n                       pair,\n                       walletMap,\n                       ammType, snapShotData,\n                       ...rest\n                   }: {\n    pair: { coinAInfo: CoinInfo<C> | undefined, coinBInfo: CoinInfo<C> | undefined },\n    snapShotData: { tickerData: TickerData | undefined, ammPoolsBalance: AmmPoolSnapshot | undefined } | undefined\n    walletMap: WalletMap<C>\n    ammType?: keyof typeof AmmPanelType\n} & any) => {\n    const {\n        ammCalcData,\n        ammDepositData,\n        ammWithdrawData,\n        handleDepositEvent,\n        handleWithDrawEvent,\n        onAmmWithdrawClick,\n        onAmmDepositClick,\n        ammDepositBtnI18nKey,\n        ammWithdrawBtnI18nKey,\n    } = useAmmPanel({\n        pair,\n        snapShotData, walletMap, ammType: ammType ? ammType : AmmPanelType.Deposit\n    })\n\n    // const [index, setIndex] = React.useState(AmmPanelTypeMap[ tabSelected ]);\n    const isLoading = React.useCallback(()=>{\n        if((!snapShotData || !snapShotData.tradeData || !snapShotData.ammPoolsBalance)\n            &&  ammDepositBtnI18nKey === undefined\n            &&  ammWithdrawBtnI18nKey === undefined\n        ) {\n          return true\n        }\n    },[snapShotData,ammWithdrawBtnI18nKey,ammWithdrawBtnI18nKey])\n\n    return <> {pair ?\n        <AmmPanel {...{...rest}}\n                  ammWithdrawData={ammWithdrawData}\n                  ammDepositData={ammDepositData}\n                  ammCalcData={ammCalcData}\n                  handleDepositEvent={handleDepositEvent}\n                  handleWithDrawEvent={handleWithDrawEvent}\n                  onAmmWithdrawClick={onAmmWithdrawClick}\n                  onAmmDepositClick={onAmmDepositClick}\n                  tabSelected={ammType ? ammType : AmmPanelType.Deposit}\n                  ammDepositBtnI18nKey={ammDepositBtnI18nKey}\n                  ammWithdrawBtnI18nKey={ammWithdrawBtnI18nKey}\n                  ammDepositBtnStatus={isLoading()?TradeBtnStatus.LOADING:TradeBtnStatus.AVAILABLE}\n                  ammWithdrawBtnStatus={isLoading()?TradeBtnStatus.LOADING:TradeBtnStatus.AVAILABLE}\n\n        /> : <Box width={'var(--swap-box-width)'}/>}\n    </>\n\n}","import React from \"react\";\nimport { AmmData, AmmInData, CoinInfo, IBData } from '@loopring-web/component-lib/src/static-resource';\nimport { AmmPanelType } from '@loopring-web/component-lib';\nimport { useTokenMap } from '../../../stores/token';\nimport { useAmmMap } from '../../../stores/Amm/AmmMap';\nimport { ammPairInit } from '../../../hooks/help/ammPairDetail';\nimport {  WalletMap } from '@loopring-web/component-lib/static-resource';\nimport { AmmPoolSnapshot, getExistedMarket, TickerData } from 'loopring-sdk';\nimport { useCustomDCEffect } from '../../../hooks/common/useCustomDCEffect';\nimport { accountStaticCallBack, bntLabel, btnClickArray, fnType } from '../../../hooks/help/connetStatusCallback';\nimport { useAccount } from '../../../stores/account/hook';\nimport { updateWallet } from '../../../hooks/help/updateWallet';\nimport { getUserAmmTransaction, makeMyAmmMarketArray } from '../../../hooks/help/marketTable';\nimport { makeCache } from '../../../hooks/help/makeCache';\n\n\n\nexport const useAmmPanel = <C extends { [ key: string ]: any }>({\n                                                                    pair,\n                                                                    walletMap,\n                                                                    ammType,\n                                                                    snapShotData,\n                                                                }\n                                                                    : {\n    pair: { coinAInfo: CoinInfo<C> | undefined, coinBInfo: CoinInfo<C> | undefined },\n    snapShotData:{ tickerData: TickerData|undefined,ammPoolsBalance: AmmPoolSnapshot|undefined }|undefined\n    walletMap: WalletMap<C>\n    ammType: keyof typeof AmmPanelType\n}) => {\n    // const walletLayer2State = useWalletLayer2();\n    const {coinMap, tokenMap} = useTokenMap();\n    const {ammMap} = useAmmMap();\n    const {account} = useAccount();\n\n    const [ammCalcData, setAmmCalcData] = React.useState<AmmInData<C> | undefined>();\n    const [ammDepositData, setAmmDepositData] = React.useState<AmmData<IBData<C>, C>>({\n        coinA: {belong: undefined} as unknown as IBData<C>,\n        coinB: {belong: undefined} as unknown as IBData<C>,\n        slippage: .5\n    } as AmmData<IBData<C>, C>);\n    const [ammWithdrawData, setAmmWithdrawData] = React.useState({\n        coinA: {belong: undefined} as unknown as IBData<C>,\n        coinB: {belong: undefined} as unknown as IBData<C>,\n        slippage: .5\n    } as AmmData<IBData<C>, C>);\n    const [ammDepositBtnI18nKey, setAmmDepositBtnI18nKey] = React.useState<string | undefined>(undefined);\n    const [ammWithdrawBtnI18nKey, setAmmWithdrawBtnI18nKey] = React.useState<string | undefined>(undefined);\n\n    const initAmmData = React.useCallback(async (pair: any) => {\n        let _ammCalcData: Partial<AmmInData<C>> = ammPairInit(\n            {\n                pair,\n                ammType,\n                _ammCalcData: {},\n                tokenMap,\n                coinMap,\n                walletMap: walletMap, //walletLayer2State.walletLayer2,\n                ammMap,\n                tickerData:snapShotData?.tickerData,\n                ammPoolsBalance: snapShotData?.ammPoolsBalance\n            })\n        setAmmCalcData({...ammCalcData, ..._ammCalcData} as AmmInData<C>);\n        if (_ammCalcData.myCoinA) {\n            if (ammType === AmmPanelType.Deposit) {\n                setAmmDepositData({\n                    coinA: _ammCalcData.myCoinA as IBData<C>,\n                    coinB: _ammCalcData.myCoinB as IBData<C>,\n                    slippage: 0.5\n                })\n            } else {\n                setAmmWithdrawData({\n                    coinA: _ammCalcData.myCoinA as IBData<C>,\n                    coinB: _ammCalcData.myCoinB as IBData<C>,\n                    slippage: 0.5\n                })\n            }\n        }\n    },[snapShotData,walletMap])\n\n    const handleDepositEvent = React.useCallback((data: AmmData<IBData<C>>, type: 'coinA' | 'coinB') => {\n        console.log('handleDepositEvent', data, type);\n    }, []);\n\n    const handleWithDrawEvent = React.useCallback((data: AmmData<IBData<C>>, type: 'coinA' | 'coinB') => {\n        console.log('handleDepositEvent', data, type);\n    }, []);\n\n\n    React.useEffect(() => {\n        if (snapShotData) {\n            initAmmData(pair)\n        }\n    }, [snapShotData,pair,initAmmData,walletMap]);\n\n\n\n    useCustomDCEffect(() => {\n        const label:string|undefined = accountStaticCallBack(bntLabel)\n        setAmmDepositBtnI18nKey(label);\n        setAmmWithdrawBtnI18nKey(label)\n    }, [account.status, bntLabel])\n\n\n    const onAmmWithdrawClick = React.useCallback((props:AmmData<IBData<C>>) => {\n        const  onAmmWithdrawClickArray: typeof  btnClickArray =  Object.assign(btnClickArray,{\n            [ fnType.ACTIVATED ]: [  function (props:AmmData<IBData<C>>) {\n                //TODO: onWithdraw\n                console.log('onAmmWithdraw',props)\n\n                if(props.__cache__){\n                    makeCache(props.__cache__)\n                }\n            },props]\n        })\n        accountStaticCallBack(onAmmWithdrawClickArray)\n    }, []);\n\n    const onAmmDepositClick = React.useCallback((props:AmmData<IBData<C>>) => {\n        const  onAmmDepositClickArray: typeof  btnClickArray =  Object.assign(btnClickArray,{\n            [ fnType.ACTIVATED ]: [  function () {\n                //TODO: onDeposit\n                console.log(' onAmmDeposit',props)\n                if(props.__cache__){\n                    makeCache(props.__cache__)\n                }\n            },props]\n        })\n        accountStaticCallBack(onAmmDepositClickArray)\n    }, []);\n\n\n    return {\n        ammCalcData,\n        ammDepositData,\n        ammWithdrawData,\n        handleDepositEvent,\n        handleWithDrawEvent,\n        onAmmWithdrawClick,\n        onAmmDepositClick,\n        ammDepositBtnI18nKey,\n        ammWithdrawBtnI18nKey,\n    }\n}","import {\n    AmmPoolActivityRule,\n    AmmPoolActivityStatus,\n    AmmPoolSnapshot,\n    LoopringMap,\n    TickerData,\n    toBig,\n} from 'loopring-sdk';\nimport { AmmActivity, AmmCardProps } from '@loopring-web/component-lib/static-resource';\nimport store from '../../stores';\nimport { deepClone } from '../../utils/obj_tools';\nimport { AmmUserReward, AmmUserRewardMap } from 'loopring-sdk/dist/defs/loopring_defs';\nimport BigNumber from 'bignumber.js';\nimport { MyAmmLP } from '@loopring-web/component-lib/src/static-resource';\nimport { WalletMapExtend } from './updateWallet';\nimport { volumeToCount, volumeToCountAsBigNumber } from './volumeToCount';\nimport { coinMap } from '@loopring-web/component-lib/static';\nimport { AmmDetailStore } from '../../stores/Amm/AmmMap';\n\nexport type AmmActivityViewMap<R, I> = {\n    [key in keyof R]?: AmmActivity<I>[] | undefined\n}\nexport const makeUIAmmActivityMap = <R extends { [ key: string ]: any }, I extends { [ key: string ]: any }>\n({ammActivityMap, type, ammPoolActivityStatus}: {\n    ammActivityMap: LoopringMap<LoopringMap<AmmPoolActivityRule[ ]>> | undefined,\n    type: 'AMM_MINING' | 'SWAP_VOLUME_RANKING',\n    ammPoolActivityStatus: AmmPoolActivityStatus[]\n}, myReward: AmmUserRewardMap | undefined):\n    Array<AmmCardProps<I>> => {\n    const {coinMap, tokenMap, idIndex} = store.getState().tokenMap\n    let ammActivityViewMap: AmmActivityViewMap<R, I> = {}\n    if (ammActivityMap && ammActivityMap[ type ]) {\n        // debugger\n\n        // @ts-ignore\n        ammPoolActivityStatus.forEach((status: AmmPoolActivityStatus) => {\n\n            if (ammActivityMap[ type ][ status ]) {\n                // @ts-ignore\n                ammActivityMap[ type ][ status ].reduce((prev: AmmActivityViewMap<R, I>, ammPoolActivityRule: AmmPoolActivityRule) => {\n\n                    if (coinMap && ammPoolActivityRule.awardRules[ 0 ] && idIndex && tokenMap) {\n\n                        const symbol = idIndex[ ammPoolActivityRule.awardRules[ 0 ].tokenId as any ]\n\n                        // @ts-ignore\n                        const item = {\n                            // @ts-ignore\n                            rewardToken: coinMap[ symbol ],\n                            myRewards: status === AmmPoolActivityStatus.InProgress && myReward && myReward[ ammPoolActivityRule.market ] ?\n                                volumeToCount(symbol, myReward[ ammPoolActivityRule.market ]?.currentRewards[ 0 ].volume) : 0,\n                            duration: {\n                                from: new Date(ammPoolActivityRule?.rangeFrom),\n                                to: new Date(ammPoolActivityRule?.rangeTo),\n                            },\n                            isPass: AmmPoolActivityStatus.EndOfGame === status,\n                        }\n                        if (prev[ ammPoolActivityRule.market ]) {\n                            // @ts-ignore\n                            prev[ ammPoolActivityRule.market ].push(item);\n                        } else {\n                            // @ts-ignore\n                            prev[ ammPoolActivityRule.market ] = [item];\n                        }\n\n                        // debugger\n                        // return prev;\n                    }\n                    return prev;\n                }, ammActivityViewMap)\n\n            }\n        })\n    }\n    const resultArray = makeAsCard(ammActivityViewMap)\n    // console.log(resultArray)\n    return resultArray;\n\n\n}\nconst makeAsCard = <R extends { [ key: string ]: any }, I extends { [ key: string ]: any }>\n(ammActivityViewMap: AmmActivityViewMap<R, I> | undefined, myReward?: any): Array<AmmCardProps<I>> => {\n    const {coinMap} = store.getState().tokenMap\n    const {ammMap} = store.getState().amm.ammMap\n    try {\n        if (ammActivityViewMap && coinMap) {\n            // @ts-ignore\n            return Reflect.ownKeys(ammActivityViewMap).reduce((prev: Array<AmmCardProps<I>>, key: string) => {\n                const _ammInfo = ammMap[ key as string ]\n                if (_ammInfo && _ammInfo.coinA && coinMap && ammActivityViewMap[ key ]) {\n                    // debugger\n                    // @ts-ignore\n                    const itemArray = ammActivityViewMap[ key ].map((item) => {\n                        return {\n                            ...deepClone(_ammInfo),\n                            // @ts-ignore\n                            coinAInfo: coinMap[ _ammInfo.coinA ],\n                            // @ts-ignore\n                            coinBInfo: coinMap[ _ammInfo.coinB ],\n                            activity: item,\n                        }\n                    })\n                    prev = [...prev, ...itemArray]\n                }\n                return prev;\n            }, [] as Array<AmmCardProps<I>>) as Array<AmmCardProps<I>>\n        } else {\n            return [] as Array<AmmCardProps<I>>\n        }\n    } catch (error) {\n        console.log(error)\n        return []\n    }\n}\ntype Value = undefined | number;\nexport type SummaryMyAmm = {\n    rewardDollar: Value,\n    rewardYuan: Value,\n    feeDollar: Value,\n    feeYuan: Value,\n}\nexport const makeSummaryMyAmm = <C extends { [ key: string ]: any }>({\n                                                                         userRewardsMap\n                                                                     }: {\n    userRewardsMap: LoopringMap<AmmUserReward> | undefined\n}):\n    SummaryMyAmm | undefined => {\n    const {coinMap, idIndex, tokenMap} = store.getState().tokenMap;\n    const {faitPrices, forex} = store.getState().system;\n    if (userRewardsMap && idIndex && coinMap && tokenMap && faitPrices && forex) {\n        let summaryMyAmm = Object.keys(userRewardsMap).reduce((prev, key) => {\n            if (/AMM-/i.test(key)) {\n                // @ts-ignore\n                const [, coinA, coinB] = key.match(/AMM-(\\w+)-(\\w+)/i);\n                const ammUserReward = userRewardsMap[ key ]\n                const {\n                    rewardDollar,\n                    rewardYuan,\n                    feeDollar,\n                    feeYuan\n                } = getOneRewardInfo({coinB, coinA, ammUserReward, idIndex, faitPrices, forex})\n                prev.rewardDollar = rewardDollar ? toBig(rewardDollar).plus(prev.rewardDollar).toNumber() : 0;\n                prev.rewardYuan = rewardYuan ? toBig(rewardYuan).plus(prev.rewardYuan).toNumber() : 0;\n                prev.feeDollar = feeDollar ? toBig(feeDollar).plus(prev.feeDollar).toNumber() : 0;\n                prev.feeYuan = feeYuan ? toBig(feeYuan).plus(prev.feeYuan).toNumber() : 0;\n            }\n            return prev\n        }, {\n            rewardDollar: 0,\n            rewardYuan: 0,\n            feeDollar: 0,\n            feeYuan: 0\n        })\n\n        return summaryMyAmm\n    }\n    return undefined\n}\nconst getOneRewardInfo = <C>({coinA, coinB, ammUserReward, idIndex, faitPrices, forex, walletMap, snapShotData}: any) => {\n    let rewardToken, rewardToken2, feeA, feeB, feeDollar, feeYuan, reward, reward2, rewardDollar, rewardYuan;\n    if (ammUserReward) {\n        rewardToken = ammUserReward.currentRewards[ 0 ] ? idIndex[ ammUserReward.currentRewards[ 0 ].tokenId as number ] : undefined\n        rewardToken2 = ammUserReward.currentRewards[ 1 ] ? idIndex[ ammUserReward.currentRewards[ 1 ].tokenId as number ] : undefined\n        feeA = ammUserReward ? volumeToCountAsBigNumber(coinA, ammUserReward.feeRewards[ 0 ]) : toBig(0);\n        feeB = ammUserReward ? volumeToCountAsBigNumber(coinB, ammUserReward.feeRewards[ 1 ]) : toBig(0);\n        feeA = feeA ? feeA : toBig(0);\n        feeB = feeB ? feeB : toBig(0);\n        feeDollar = feeA.times(faitPrices[ coinA ].price).plus(feeB.times(faitPrices[ coinB ].price))\n        feeYuan = feeDollar.times(forex);\n        reward = rewardToken ? volumeToCountAsBigNumber(rewardToken, ammUserReward.currentRewards[ 0 ].volume) as BigNumber : toBig(0);\n        reward2 = rewardToken2 ? volumeToCountAsBigNumber(rewardToken2, ammUserReward.currentRewards[ 1 ].volume) as BigNumber : toBig(0);\n        reward = reward ? reward : toBig(0);\n        reward2 = reward2 ? reward2 : toBig(0);\n        rewardDollar = reward.times(rewardToken ? faitPrices[ rewardToken ].price : 1).plus(reward2.times(rewardToken2 ? faitPrices[ rewardToken2 ].price : 1));\n        rewardYuan = rewardDollar.times(forex);\n    }\n    let balanceA, balanceB, balanceDollar, balanceYuan;\n    if (walletMap && walletMap[ 'LP-' + coinA + '-' + coinB ] && snapShotData) {\n        // @ts-ignore\n        const ratio = new BigNumber(_walletMap[ 'LP-' + coinA + '-' + coinB ].detail.total).div(snapShotData.ammPoolsBalance.lp.volume);\n        balanceA = ratio.times(volumeToCountAsBigNumber(coinA, snapShotData.ammPoolsBalance.pooled[ 0 ].volume) || 1);\n        balanceB = ratio.times(volumeToCountAsBigNumber(coinB, snapShotData.ammPoolsBalance.pooled[ 1 ].volume) || 1);\n        // @ts-ignore\n        balanceDollar = balanceA.times(faitPrices[ coinA ].price).plus(balanceB .times( faitPrices[ coinB ].price))\n        balanceYuan = balanceDollar.times(forex)\n    }\n\n    return {\n        feeA:feeA? feeA.toNumber():undefined,\n        feeB:feeB? feeB.toNumber():undefined,\n        reward:reward? reward.toNumber():undefined,\n        rewardToken: rewardToken? coinMap[ rewardToken ]:undefined,\n        reward2:reward2? reward2.toNumber(): undefined,\n        rewardToken2: rewardToken2? coinMap[ rewardToken2 ]:undefined,\n        rewardDollar: rewardDollar?rewardDollar.toNumber():undefined,\n        rewardYuan: rewardYuan? rewardYuan.toNumber():undefined,\n        feeDollar: feeDollar? feeDollar.toNumber():undefined,\n        feeYuan: feeYuan? feeYuan.toNumber():undefined,\n        ammDetail: {\n            coinAInfo: coinMap[ coinA ],\n            coinBInfo: coinMap[ coinB ]\n        },\n        balanceA: balanceA? balanceA.toNumber():undefined,\n        balanceB: balanceB? balanceB.toNumber():undefined ,\n        balanceDollar: balanceDollar?balanceDollar.toNumber():undefined,\n        balanceYuan: balanceYuan? balanceYuan.toNumber():undefined,\n    } as MyAmmLP<C>\n}\n\nexport const makeMyAmmWithSnapshot = <C extends { [ key: string ]: any }>(market: any, _walletMap: WalletMapExtend<C> | undefined, ammUserRewardMap: LoopringMap<AmmUserReward> | undefined, snapShotData?: {\n    tickerData?: TickerData | undefined\n    ammPoolsBalance: AmmPoolSnapshot | undefined\n} | undefined) => {\n    const {coinMap, idIndex, tokenMap} = store.getState().tokenMap;\n    const {faitPrices, forex} = store.getState().system;\n    const [, coinA, coinB] = market.match(/(\\w+)-(\\w+)/i);\n    let _myAmm: Partial<MyAmmLP<C>> = {};\n    if (ammUserRewardMap && ammUserRewardMap[ 'AMM-' + market ]\n        && snapShotData && snapShotData.ammPoolsBalance) {\n        const ammUserReward: AmmUserReward = ammUserRewardMap[ 'AMM-' + market ];\n        // @ts-ignore\n        if (coinMap && tokenMap && idIndex && forex && faitPrices) {\n             _myAmm = getOneRewardInfo({coinA, coinB, ammUserReward,\n                idIndex, faitPrices, forex, walletMap:_walletMap, snapShotData})\n\n            return _myAmm as MyAmmLP<C>\n        }\n    }\n    return {\n        feeA: undefined,\n        feeB: undefined,\n        feeDollar: undefined,\n        feeYuan: undefined,\n        reward: undefined,\n        rewardToken: undefined as any,\n        balanceA: undefined,\n        balanceB: undefined,\n        balanceYuan: undefined,\n        balanceDollar: undefined,\n    }\n}\n\nexport const makeMyAmmWithStat = <C extends { [ key: string ]: any }>\n(market: any,\n _walletMap: WalletMapExtend<C> | undefined,\n ammUserRewardMap: LoopringMap<AmmUserReward> | undefined,\n ammDetail: AmmDetailStore<C>) => {\n    const {coinMap, idIndex, tokenMap} = store.getState().tokenMap;\n    const {faitPrices, forex} = store.getState().system;\n    const [, coinA, coinB] = market.match(/(\\w+)-(\\w+)/i);\n    let _myAmm = {};\n    let balanceA, balanceB, balanceDollar, balanceYuan;\n    if (_walletMap && _walletMap[ 'LP-' + coinA + '-' + coinB ] && forex ) {\n        // @ts-ignore\n        const ratio = new BigNumber(_walletMap[ 'LP-' + coinA + '-' + coinB ].detail.total).div(ammDetail.totalLPToken);\n        balanceA = ratio.times(volumeToCountAsBigNumber(coinA, ammDetail.totalA?ammDetail.totalA:0) || 1);\n        balanceB = ratio.times(volumeToCountAsBigNumber(coinB, ammDetail.totalB?ammDetail.totalB:0) || 1);\n        // @ts-ignore\n        balanceDollar = balanceA.times(faitPrices[ coinA ].price).plus(balanceB .times( faitPrices[ coinB ].price))\n        balanceYuan = balanceDollar.times(forex);\n        _myAmm = {\n            // ...ammDetail,\n            balanceA: balanceA.toNumber(),\n            balanceB: balanceB.toNumber(),\n            balanceYuan: balanceYuan.toNumber(),\n            balanceDollar: balanceDollar.toNumber(),\n        }\n    }\n    if (ammUserRewardMap && ammUserRewardMap[ 'AMM-' + market ]\n        && ammDetail && forex) {\n        const ammUserReward: AmmUserReward = ammUserRewardMap[ 'AMM-' + market ];\n        let rewardToken, rewardToken2, feeA, feeB, feeDollar, feeYuan, reward, reward2, rewardDollar, rewardYuan;\n\n        if (coinMap && tokenMap && idIndex && forex && faitPrices && ammUserReward) {\n            rewardToken = ammUserReward.currentRewards[ 0 ] ? idIndex[ ammUserReward.currentRewards[ 0 ].tokenId as number ] : undefined\n            rewardToken2 = ammUserReward.currentRewards[ 1 ] ? idIndex[ ammUserReward.currentRewards[ 1 ].tokenId as number ] : undefined\n            feeA = ammUserReward ? volumeToCountAsBigNumber(coinA, ammUserReward.feeRewards[ 0 ]) : toBig(0);\n            feeB = ammUserReward ? volumeToCountAsBigNumber(coinB, ammUserReward.feeRewards[ 1 ]) : toBig(0);\n            feeA = feeA ? feeA : toBig(0);\n            feeB = feeB ? feeB : toBig(0);\n            feeDollar = feeA.times(faitPrices[ coinA ].price).plus(feeB.times(faitPrices[ coinB ].price))\n            feeYuan = feeDollar.times(forex);\n            reward = rewardToken ? volumeToCountAsBigNumber(rewardToken, ammUserReward.currentRewards[ 0 ].volume) as BigNumber : toBig(0);\n            reward2 = rewardToken2 ? volumeToCountAsBigNumber(rewardToken2, ammUserReward.currentRewards[ 1 ].volume) as BigNumber : toBig(0);\n            reward = reward ? reward : toBig(0);\n            reward2 = reward2 ? reward2 : toBig(0);\n            rewardDollar = reward.times(rewardToken ? faitPrices[ rewardToken ].price : 1).plus(reward2.times(rewardToken2 ? faitPrices[ rewardToken2 ].price : 1));\n            rewardYuan = rewardDollar.times(forex);\n            _myAmm = {\n               ..._myAmm,\n                feeA:feeA? feeA.toNumber():undefined,\n                feeB:feeB? feeB.toNumber():undefined,\n                reward:reward? reward.toNumber():undefined,\n                // @ts-ignore\n                rewardToken: rewardToken ? coinMap[ rewardToken ]: undefined,\n                reward2:reward2? reward2.toNumber(): undefined,\n                // @ts-ignore\n                rewardToken2: rewardToken2? coinMap[ rewardToken2 ]: undefined,\n                rewardDollar: rewardDollar?rewardDollar.toNumber():undefined,\n                rewardYuan: rewardYuan? rewardYuan.toNumber():undefined,\n                feeDollar: feeDollar? feeDollar.toNumber():undefined,\n                feeYuan: feeYuan? feeYuan.toNumber():undefined,\n                ammDetail: {\n                    // @ts-ignore\n                    coinAInfo: coinA ? coinMap[ coinA ] : undefined,\n                    // @ts-ignore\n                    coinBInfo: coinB ? coinMap[ coinB ] : undefined,\n                },\n            }\n\n        }\n        return _myAmm as MyAmmLP<C>\n    }\n    return {\n        feeA: undefined,\n        feeB: undefined,\n        feeDollar: undefined,\n        feeYuan: undefined,\n        reward: undefined,\n        rewardToken: undefined as any,\n        balanceA: undefined,\n        balanceB: undefined,\n        balanceYuan: undefined,\n        balanceDollar: undefined,\n    }\n}\n\n// if (ammUserReward) {\n//     const symbol = ammUserReward.currentRewards[ 0 ] ? idIndex[ ammUserReward.currentRewards[ 0 ].tokenId as number ] : undefined\n//     const symbol2 = ammUserReward.currentRewards[ 1 ] ? idIndex[ ammUserReward.currentRewards[ 1 ].tokenId as number ] : undefined\n//\n//     _myAmm = {\n//         ..._myAmm,\n//         feeA: ammUserReward ? volumeToCount(coinA, ammUserReward.feeRewards[ 0 ]) : 0,//Number(ammUserReward.feeRewards[ 0 ]) : 0,\n//         feeB: ammUserReward ? volumeToCount(coinB, ammUserReward.feeRewards[ 1 ]) : 0,//Number(ammUserReward.feeRewards[ 1 ]) : 0,\n//         reward: symbol ? volumeToCount(symbol, ammUserReward.currentRewards[ 0 ].volume) : 0,\n//         // @ts-ignore\n//         rewardToken: symbol ? coinMap[ symbol ] : undefined,\n//         reward2: symbol2 ? volumeToCount(symbol2, ammUserReward.currentRewards[ 1 ].volume) : 0,\n//         // @ts-ignore\n//         rewardToken2: symbol2 ? coinMap[ symbol2 ] : undefined,\n//\n//\n//     }\n//     _myAmm.feeDollar = _myAmm.feeA && _myAmm.feeA * faitPrices[ coinA ].price;\n//     _myAmm.feeDollar = _myAmm.feeB && _myAmm.feeB * faitPrices[ coinB ].price;\n// }\n//\n//\n// if (_walletMap && _walletMap[ 'LP-' + market ]) {\n//     // @ts-ignore\n//     const ratio = new BigNumber(_walletMap[ 'LP-' + market ].detail.total).div(snapShotData.ammPoolsBalance.lp.volume);\n//     _myAmm = {\n//         ..._myAmm,  //snapShotData.ammPoolsBalance.pooled[ 0 ].volume).div(BIG10.pow(tokenMap[coinA].decimals)\n//         balanceA: ratio.times(volumeToCountAsBigNumber(coinA, snapShotData.ammPoolsBalance.pooled[ 0 ].volume) || 1).toNumber(),\n//         balanceB: ratio.times(volumeToCountAsBigNumber(coinB, snapShotData.ammPoolsBalance.pooled[ 1 ].volume) || 1).toNumber(),\n//     }\n//     // @ts-ignore\n//     _myAmm.balanceDollar = _myAmm.balanceA * faitPrices[ coinA ].price + _myAmm.balanceB * faitPrices[ coinB ].price\n//     _myAmm.balanceYuan = _myAmm.balanceDollar * forex\n// }\n\n// export const getAmmPoolGameUserRanks = ():Promise<AmmUserRewardMap> => {\n//     const {accountId} = store.getState().account\n//     //https://api3.loopring.io/api/v2/amm/user/rewards?owner=10917\n//     if(LoopringAPI.ammpoolAPI){\n//         return LoopringAPI.ammpoolAPI.getAmmPoolUserRewards({owner:accountId}).then(({ammUserRewardMap}:any)=>{\n//               return ammUserRewardMap  as AmmUserRewardMap\n//         })\n//     }else{\n//         return  Promise.resolve({} as AmmUserRewardMap);\n//     }\n//\n//     // return LoopringAPI.ammpoolAPI?.getUserAmmPoolTxs({accountId}, apiKey).then(({userAmmPoolTxs}) => {\n//     //     return userAmmPoolTxs\n//     // })\n//     // if(LoopringAPI.ammpoolAPI)   {\n//     //    let promiseList =  marketKeys.map((key)=>{\n//     //         // @ts-ignore\n//     //         return LoopringAPI.ammpoolAPI.getAmmPoolGameUserRank({owner:accAddr,ammPoolMarket:'key'},apiKey)\n//     //     })\n//     //     return Promise.all(promiseList).then(\n//     //         (array:any[])=>{\n//     //\n//     //           return  array.reduce((prev,item:{userRankList:GameRankInfo[]},index)=>{\n//     //                 const market = marketKeys[index]\n//     //                 prev[ market] = item.userRankList[0]\n//     //                 return item.userRankList[0]\n//     //             },{})\n//     //\n//     //         }\n//     //     )\n//     // }else{\n//     //   return  Promise.resolve({});\n//     // }\n//\n//\n//\n//\n// }\n//\n\n// {\n//     userRankList: GameRankInfo[];\n//     raw_data: any;\n// }\n","import React from \"react\";\nimport {\n    AmmActivity,\n    CoinInfo,\n    TradeFloat,\n    WalletMap\n} from \"@loopring-web/component-lib/static-resource\";\nimport { useTokenMap } from \"stores/token\";\nimport { useRouteMatch } from 'react-router';\nimport { AmmDetailStore, useAmmMap } from '../../../stores/Amm/AmmMap';\nimport { useWalletLayer2 } from '../../../stores/walletLayer2';\nimport { pairDetailBlock } from '../../../hooks/help/pairDetail';\nimport { AmmPoolSnapshot, AmmUserRewardMap, getExistedMarket, TickerData } from 'loopring-sdk';\nimport { makeTickView } from '../../../hooks/help/makeTickView';\nimport { useAmmActivityMap } from '../../../stores/Amm/AmmActivityMap';\nimport { deepClone } from '../../../utils/obj_tools';\nimport { updateWallet, WalletMapExtend } from '../../../hooks/help/updateWallet';\nimport {\n    getUserAmmTransaction, makeMyAmmMarketArray\n} from '../../../hooks/help/marketTable';\nimport { AmmRecordRow } from '@loopring-web/component-lib/components/tableList/ammRecordTable/Interface';\nimport { AmmPoolActivityRule, LoopringMap } from 'loopring-sdk/dist/defs/loopring_defs';\nimport { MyAmmLP } from '@loopring-web/component-lib/src/static-resource';\nimport { useSystem } from '../../../stores/system';\nimport {\n     makeMyAmmWithSnapshot\n} from '../../../hooks/help/makeUIAmmActivityMap';\nimport store from '../../../stores';\nimport { useUserRewards } from '../../../stores/userRewards';\n\nconst makeAmmDetailExtendsActivityMap = ({ammMap, coinMap, ammActivityMap, ammKey}: any) => {\n    // debugger\n    if (ammMap && coinMap) {\n        let ammDetail = deepClone(ammMap[ ammKey as string ]);\n        const ammActivity = ammActivityMap [ ammKey as string ];\n        \n        if (ammDetail && ammDetail.coinA) {\n            ammDetail.myCoinA = coinMap[ ammDetail.coinA ];\n            ammDetail.myCoinB = coinMap[ ammDetail.coinB ];\n            ammDetail[ 'activity' ] = ammActivity ? ammActivity : {};\n        }\n        return ammDetail;\n    }\n}\ntype PgAmmDetail<C extends { [ key: string ]: any }> = AmmDetailStore<C> & {\n    myCoinA: CoinInfo<C>,\n    myCoinB: CoinInfo<C>,\n    activity: AmmActivity<C> | undefined\n}\n\nexport const useCoinPair = <C extends { [ key: string ]: any }>(ammActivityMap:LoopringMap<LoopringMap<AmmPoolActivityRule[]>>) => {\n    const match: any = useRouteMatch(\"/liquidity/pools/coinPair/:symbol\")\n    const {coinMap, tokenMap, marketArray} = useTokenMap();\n    const {faitPrices} = useSystem();\n    const ammMapState = useAmmMap();\n    const useUserRewardsState  = useUserRewards()\n\n    // const {account} = useAccount();\n\n\n    const {ammMap, updateAmmMap} = ammMapState;\n\n    // const {ammMap,updateAmmMap} = useAmmMap();\n    const walletLayer2State = useWalletLayer2();\n    const [walletMap, setWalletMap] =  React.useState<WalletMapExtend<C>|undefined>(undefined);\n    // const [ammRecordArray, setAmmRecordArray] = React.useState<AmmRecordRow<C>[]>([]);\n    const [ammMarketArray, setAmmMarketArray] = React.useState<AmmRecordRow<C>[]>([]);\n\n    \n    const [myAmmMarketArray, setMyAmmMarketArray] = React.useState<AmmRecordRow<C>[]>([]);\n    const [ammUserRewardMap, setAmmUserRewardMap] = React.useState<AmmUserRewardMap|undefined>(undefined);\n    const [snapShotData,setSnapShotData] = React.useState<{\n        tickerData: TickerData|undefined\n        ammPoolsBalance: AmmPoolSnapshot|undefined\n    }|undefined>(undefined);\n\n    const [myAmm, setMyAmm] = React.useState<MyAmmLP<C>>(\n        {\n            feeA: 0,\n            feeB: 0,\n            feeDollar: 0,\n            feeYuan: 0,\n            reward: 0,\n            rewardToken: undefined as any,\n            balanceA: 0,\n            balanceB: 0,\n            balanceYuan: 0,\n            balanceDollar: 0,\n        })\n    // const [ammPoolsBalance, setAmmpoolsbalance] = React.useState<AmmPoolSnapshot|undefined>(undefined);\n    const [coinPairInfo, setCoinPairInfo] = React.useState<PgAmmDetail<C>>({\n        myCoinA: undefined,\n        myCoinB: undefined,\n        activity: undefined,\n        totalRewards: undefined,\n        amountDollar: undefined,\n        amountYuan: undefined,\n        totalLPToken: undefined,\n        totalA: undefined,\n        totalB: undefined,\n        rewardToken: undefined,\n        rewardValue: undefined,\n        feeA: undefined,\n        feeB: undefined,\n        isNew: undefined,\n        isActivity: undefined,\n    } as unknown as PgAmmDetail<C>);\n    const [tradeFloat, setTradeFloat] = React.useState<TradeFloat | undefined>(undefined);\n    const [pair, setPair] = React.useState<{ coinAInfo: CoinInfo<C> | undefined, coinBInfo: CoinInfo<C> | undefined }>({\n        coinAInfo: undefined,\n        coinBInfo: undefined,\n    });\n\n    const walletLayer2DoIt =React.useCallback((market)=>{\n        // let {market} = getExistedMarket(marketArray, pair.coinAInfo?.simpleName as string, pair.coinBInfo?.simpleName as string);\n\n        const {walletMap : _walletMap} = updateWallet();\n        setWalletMap(_walletMap)\n        if (_walletMap) {\n            getUserAmmTransaction()?.then((marketTrades)=>{\n                let _myTradeArray  = makeMyAmmMarketArray(market, marketTrades)\n                setMyAmmMarketArray(_myTradeArray?_myTradeArray:[])\n            })\n        }\n        return _walletMap\n    } ,[updateWallet,getUserAmmTransaction,makeMyAmmMarketArray,marketArray,pair])\n\n    React.useEffect(() => {\n        const coinKey = match?.params.symbol ?? undefined;\n        let _tradeFloat: Partial<TradeFloat> = {}\n        const [, coinA, coinB] = coinKey.match(/(\\w+)-(\\w+)/i)\n        let {\n            amm,\n            market\n        } = getExistedMarket(marketArray, coinA, coinB);\n\n        const _coinPairInfo = makeAmmDetailExtendsActivityMap({ammMap, coinMap, ammActivityMap, ammKey: amm})\n        setCoinPairInfo(_coinPairInfo ? _coinPairInfo : {})\n\n        if (coinMap) {\n            setPair({\n                coinAInfo: coinMap[ coinA ],\n                coinBInfo: coinMap[ coinB ]\n            })\n        }\n\n        // let _walletMap: WalletMapExtend<C>|undefined = undefined\n        if (walletLayer2State.walletLayer2) {\n            walletLayer2DoIt(market);\n        }\n\n        if (amm && market && ammMap) {\n            //TODO should add it into websocket\n            updateAmmMap();\n            let apiList  = [\n                 pairDetailBlock({coinKey: market, ammKey: amm, ammMap}),\n                // LoopringAPI.ammpoolAPI.getAmmPoolSnapshot({poolAddress: ammMap[ ammKey ].address}),\n                // LoopringAPI.exchangeAPI.getMixTicker({market: coinKey})])\n            ];\n            // @ts-ignore\n            Promise.all([...apiList]).then(\n                ([{ammPoolsBalance,tickMap}\n                   //  ,ammUserRewardMap\n                 ]: any[]) => {\n                    if (tokenMap) {\n                        const _snapShotData =  {\n                            tickerData: tickMap[ market ],\n                            ammPoolsBalance: ammPoolsBalance,\n                        }\n                        _tradeFloat = makeTickView(tickMap[ market ]?tickMap[ market ]: {})\n                        setTradeFloat(_tradeFloat as TradeFloat);\n                        setCoinPairInfo({..._coinPairInfo,tradeFloat: {..._tradeFloat,\n                              APY:  _coinPairInfo.APY,\n                        }})\n                        setSnapShotData(_snapShotData)\n\n                    }\n                }).catch((error)=>{\n                console.log(error);\n                throw  Error\n            })\n        }\n\n    }, []);\n\n    React.useEffect(() => {\n        const {market} = getExistedMarket(marketArray, pair.coinAInfo?.simpleName as string, pair.coinBInfo?.simpleName as string);\n        if(market && snapShotData && snapShotData.ammPoolsBalance) {\n            switch (walletLayer2State.status ) {\n                case \"ERROR\":\n                    walletLayer2State.statusUnset();\n                    // setState('ERROR')\n                    //TODO: show error at button page show error  some retry dispath again\n                    break;\n                case \"DONE\":\n                    walletLayer2State.statusUnset();\n                    const _walletMap = walletLayer2DoIt(market);\n                    const _myAmm:MyAmmLP<C> = makeMyAmmWithSnapshot(market,_walletMap,ammUserRewardMap,snapShotData);\n                    setMyAmm(_myAmm)\n                    break;\n                default:\n                    break;\n\n            }\n        }\n\n\n    }, [walletLayer2State.status,ammUserRewardMap])\n\n    //TODO tickMap\n    React.useEffect(() => {\n       const {market} = getExistedMarket(marketArray, pair.coinAInfo?.simpleName as string, pair.coinBInfo?.simpleName as string);\n       if(market){\n           switch (useUserRewardsState.status) {\n               case \"ERROR\":\n                   useUserRewardsState.statusUnset();\n                   // setState('ERROR')\n                   //TODO: show error at button page show error  some retry dispath again\n                   break;\n               case \"DONE\":\n                   // getAmmPoolUserRewards().then((ammUserRewardMap)=>{\n                   const {userRewardsMap} = store.getState().userRewardsMap\n                   setAmmUserRewardMap(userRewardsMap)\n                   const _myAmm:MyAmmLP<C> = makeMyAmmWithSnapshot(market,walletMap,ammUserRewardMap,snapShotData);\n                   setMyAmm(_myAmm);\n                   break;\n               default:\n                   break;\n\n           }\n       }\n\n    }, [useUserRewardsState.status,useUserRewardsState.statusUnset])\n\n    React.useEffect(() => {\n        if (ammMapState.status === \"ERROR\") {\n            //TODO: solve error\n            ammMapState.statusUnset();\n        } else if (ammMapState.status === \"DONE\") {\n            ammMapState.statusUnset();\n            if (ammMapState.ammMap && pair.coinAInfo?.simpleName && pair.coinBInfo?.simpleName) {\n                const _coinPairInfo = makeAmmDetailExtendsActivityMap(\n                    {\n                        ammMap,\n                        coinMap,\n                        ammActivityMap,\n                        ammKey: 'AMM-' + pair.coinAInfo.simpleName + pair.coinBInfo.simpleName\n                    })\n                setCoinPairInfo({...coinPairInfo,..._coinPairInfo,\n                    tradeFloat:coinPairInfo.tradeFloat\n                })\n\n            }\n\n            // tokenState.statusUnset()\n            // setState('DONE');\n        }\n    }, [ammMapState.status, ammMapState.ammMap, ammMapState.statusUnset, pair, ammActivityMap, tokenMap])\n\n\n\n    return {\n        walletMap,\n        myAmm,\n        // tickerData,\n        coinPairInfo,\n        snapShotData,\n        // ammPoolsBalance,\n        pair,\n        tradeFloat,\n        ammMarketArray,\n        myAmmMarketArray,\n    }\n}","import React from 'react';\nimport { WithTranslation, withTranslation } from 'react-i18next';\nimport { AmmRecordTable, TradeBtnStatus, TradeTable, TradeTitle, useSettings } from '@loopring-web/component-lib';\nimport { Currency, getThousandFormattedNumbers, PriceTag } from '@loopring-web/component-lib/static-resource';\nimport { Box, Breadcrumbs, Grid, Hidden, Link, Typography, } from '@material-ui/core';\nimport { AmmPanelView } from '../AmmPanel';\nimport moment from 'moment';\nimport styled from '@emotion/styled/';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\n\nimport { useCoinPair } from './hooks';\nimport { ActivityMap } from '../../../stores/Amm/AmmActivityMap';\nimport { AmmPoolActivityRule, LoopringMap } from 'loopring-sdk/dist/defs/loopring_defs';\n\n\n//******************** page code ************************//\nconst BoxStyled = styled(Box)`\n  ${({theme}) => theme.border.defaultFrame({c_key: 'blur'})};\n  background-color: ${({theme}) => theme.colorBase.background().default};\n`;\nconst StylePaper = styled(Box)`\n  width: 100%;\n  height: calc(100% - 64px);\n  \n  //height: 100%;\n  flex: 1;\n  background-color: ${({theme}) => theme.colorBase.background().default};\n  border-radius: ${({theme}) => theme.unit}px;\n  padding: ${({theme}) => theme.unit}px 0 ;\n  .rdg {\n    \n    flex: 1;\n  }\n\n` as typeof Box;\n\nconst applyProps = (index: number) => {\n    return {\n        id: `simple-tab-${index}`,\n        'aria-controls': `tabpanel-${index}`,\n    }\n}\n\nexport const CoinPairPanel = withTranslation('common')(<R extends {[key:string]:any},I extends {[key:string]:any}>\n({t,  ammActivityMap, ...rest}:\n     WithTranslation & { ammActivityMap: LoopringMap<LoopringMap<AmmPoolActivityRule[]>>|undefined } & any) => {    //ActivityMap<I, I>\n    //TODO: checkRouter\n\n    const {currency} = useSettings();\n    const {tradeFloat,snapShotData, pair, coinPairInfo, walletMap,ammMarketArray,myAmmMarketArray,myAmm} = useCoinPair({ammActivityMap});\n    const [tabIndex, setTabIndex] = React.useState<0 | 1>(0);\n    const [page, setPage] = React.useState(rest?.page ? rest.page : 1);\n    const handleChange = (event: any, newValue: 0 | 1) => {\n        setTabIndex(newValue);\n        setPage(1);\n    }\n    const _handlePageChange = React.useCallback((page: number) => {\n        setPage(page);\n    }, [])\n\n\n    return <>\n\n        <Grid container>\n            <Grid item xs={8}>\n                <Breadcrumbs aria-label=\"breadcrumb\">\n                    <Link color=\"textSecondary\" href=\"/#/liquidity/pools\">\n                        {t('labelAmmList')}\n                    </Link>\n                    <Typography color={'textSecondary'} display={'flex'} alignItems={'center'}\n                                justifyContent={'center'}\n                    >{pair.coinAInfo?.simpleName}-{pair.coinBInfo?.simpleName}</Typography>\n                </Breadcrumbs>\n            </Grid>\n            <Grid item xs={4} alignItems={'center'} justifyContent={'flex-end'} display={'flex'}>\n                <Link href=\"/#/liquidity/pools\" variant={'h5'}>\n                    {t('labelBack')}\n                </Link>\n            </Grid>\n        </Grid>\n        <Grid container marginTop={3}>\n            <Grid item xs={7}>\n                <TradeTitle {...{\n                    ...rest, t,\n                    ...pair,\n                    tradeFloat,\n                    isNew: false\n                }}></TradeTitle>\n            </Grid>\n        </Grid>\n        <Box flex={1} display={'flex'} alignItems={'stretch'} flexDirection=\"row\" marginTop={3}>\n            <Box flex={1} display={'flex'}>\n                <Grid container spacing={2} wrap={'nowrap'}>\n                    <Grid item md={5} xs={12} paddingRight={2} display={'flex'} flexDirection={'column'}\n                          alignItems={'stretch'} justifyContent={'flex-start'}>\n                        <BoxStyled paddingY={3} marginBottom={2} paddingX={1 / 2 * 5} display={'flex'} flexDirection={'column'}>\n                            <Typography component={'p'} color={'textSecondary'} display={'flex'}\n                                        justifyContent={'space-between'}>\n                                <Typography component={'span'}\n                                            style={{textTransform: 'capitalize'}}>{t('labelLiquidity')}</Typography>\n                                <Typography component={'span'}\n                                            style={{textTransform: 'uppercase'}}>{t('labelAPY')}</Typography>\n                            </Typography>\n                            <Typography component={'p'} color={'textPrimary'} display={'flex'}\n                                        justifyContent={'space-between'} marginTop={1}>\n                                <>\n                                    <Typography\n                                        component={'span'}> {typeof coinPairInfo.amountDollar === 'undefined' ? 'N/A' :\n                                        currency === Currency.dollar ? PriceTag.Dollar + getThousandFormattedNumbers(coinPairInfo.amountDollar) : PriceTag.Yuan + getThousandFormattedNumbers(coinPairInfo.amountYuan ? coinPairInfo.amountYuan : 0)}\n                                    </Typography>\n                                    <Typography\n                                        component={'span'}> {coinPairInfo.tradeFloat ? coinPairInfo.tradeFloat.APY : 'N/A'}%\n                                    </Typography>\n                                </>\n\n\n                            </Typography>\n\n                            <Typography component={'p'} color={'textSecondary'} display={'flex'}\n                                        justifyContent={'space-between'} marginTop={2}>\n                                <Typography component={'span'}\n                                            color={'textSecondary'}>\n                                    <Hidden mdDown>{t('labelLPTotal')}</Hidden>{t('labelLPTokens')}</Typography>\n                                <Typography component={'span'}\n                                            color={'textSecondary'}>{coinPairInfo.totalLPToken}</Typography>\n                            </Typography>\n                            <Typography component={'p'} color={'textSecondary'} display={'flex'}\n                                        justifyContent={'space-between'} marginTop={1}>\n\n                                <Typography component={'span'}\n                                            color={'textSecondary'}>\n                                    <Hidden\n                                        mdDown>{t('labelLPTotal')}</Hidden>{coinPairInfo.myCoinA?.simpleName}\n                                </Typography>\n\n                                <Typography component={'span'}\n                                            color={'textSecondary'}>{coinPairInfo.totalA}</Typography>\n                            </Typography>\n                            <Typography component={'p'} color={'textSecondary'} display={'flex'}\n                                        justifyContent={'space-between'} marginTop={1}>\n                                <Typography component={'span'}\n                                            color={'textSecondary'}>\n                                    <Hidden\n                                        mdDown>{t('labelLPTotal')}</Hidden>{coinPairInfo.myCoinB?.simpleName}\n                                </Typography>\n                                <Typography component={'span'}\n                                            color={'textSecondary'}>{coinPairInfo.totalB}</Typography>\n                            </Typography>\n\n                        </BoxStyled>\n                        <BoxStyled paddingY={3} marginBottom={2} paddingX={1 / 2 * 5} display={'flex'} flexDirection={'column'}>\n                            <Typography component={'p'} color={'textSecondary'} display={'flex'}\n                                        justifyContent={'space-between'} alignItems={'center'}>\n                                <Typography component={'span'} color={'textSecondary'} variant={'body2'} style={{textTransform: 'capitalize'}}>\n                                    {coinPairInfo.tradeFloat?.timeUnit} {t('labelVolume')}\n                                </Typography>\n                                <Typography component={'span'} color={'textSecondary'}>\n                                    {t('labelFee')} {/* ' : '*/}\n                                </Typography>\n                            </Typography>\n                            <Typography component={'p'} color={'textSecondary'} display={'flex'}\n                                        justifyContent={'space-between'} marginTop={1} alignItems={'center'}>\n                                <Typography component={'span'} variant={'h4'} color={'textPrimary'}>\n                                    {currency === Currency.dollar ? PriceTag.Dollar + getThousandFormattedNumbers(coinPairInfo.tradeFloat && coinPairInfo.tradeFloat.priceDollar ? coinPairInfo.tradeFloat.priceDollar as number : 0)\n                                        : PriceTag.Yuan + getThousandFormattedNumbers(coinPairInfo.tradeFloat && coinPairInfo.tradeFloat.priceYuan ? coinPairInfo.tradeFloat.priceYuan as number : 0)}\n                                </Typography>\n                                <Typography noWrap textAlign={'center'} component={'span'} color={'textSecondary'}\n                                            variant={'body2'} textOverflow={'ellipsis'} display={'flex'}\n                                            alignItems={'center'}>\n                                    <Typography component={'span'} color={'inherit'} variant={'inherit'}\n                                                display={'flex'} flexDirection={'column'}>\n                                        <Typography component={'span'} color={'inherit'} variant={'inherit'}>\n                                            {coinPairInfo.myCoinA?.simpleName}\n                                        </Typography>\n                                        <Typography component={'span'} color={'inherit'} variant={'inherit'}>\n                                            {coinPairInfo.feeA?getThousandFormattedNumbers(coinPairInfo.feeA):'N/A'}\n                                        </Typography>\n                                    </Typography>\n                                    <Typography component={'span'} color={'inherit'} variant={'h5'}\n                                                paddingX={1}>{' + '}</Typography>\n                                    <Typography component={'span'} color={'inherit'} variant={'inherit'}\n                                                display={'flex'} flexDirection={'column'}>\n                                        <Typography component={'span'} color={'inherit'} variant={'inherit'}>\n                                            {coinPairInfo.myCoinB?.simpleName}\n                                        </Typography>\n                                        <Typography component={'span'} color={'inherit'} variant={'inherit'}>\n                                            {coinPairInfo.feeB?getThousandFormattedNumbers(coinPairInfo.feeB):'N/A'}\n                                        </Typography>\n                                    </Typography>\n                                </Typography>\n                            </Typography>\n                        </BoxStyled>\n                        <BoxStyled paddingY={3} marginBottom={2} paddingX={1 / 2 * 5} display={'flex'} flexDirection={'column'}>\n                            <Typography component={'p'} color={'textSecondary'} display={'flex'}\n                                        justifyContent={'space-between'}>\n                                <Typography component={'span'}\n                                            color={'textSecondary'}> {t('labelMyPoolShare')}</Typography>\n                            </Typography>\n                            <Typography component={'p'} color={'textSecondary'} display={'flex'}\n                                        justifyContent={'space-between'} marginTop={1}>\n                                <Typography component={'span'}\n                                            color={'textSecondary'}>\n                                    <>{myAmm.balanceA ? getThousandFormattedNumbers(myAmm.balanceA,2)  : 'N/A'}</>\n                                    <> { coinPairInfo.myCoinA?.simpleName}</>\n                                </Typography>\n                                <Typography component={'span'} color={'textecondary'}\n                                            variant={'h5'}> {myAmm.feeA?getThousandFormattedNumbers(myAmm.feeA):'N/A'} {coinPairInfo.myCoinA?.simpleName}  </Typography>\n                            </Typography>\n                            <Typography component={'p'} color={'textSecondary'} display={'flex'}\n                                        justifyContent={'space-between'} marginTop={1}>\n                                <Typography component={'span'}\n                                            color={'textSecondary'}>\n                                    <>{myAmm.balanceB ? getThousandFormattedNumbers(myAmm.balanceB,2) : 'N/A'}</>\n                                    <> {coinPairInfo.myCoinB?.simpleName}</>\n                                </Typography>\n                                <Typography component={'span'} color={'textSecondary'}\n                                            variant={'h5'}> {myAmm.feeB?getThousandFormattedNumbers(myAmm.feeB):'N/A'} {coinPairInfo.myCoinB?.simpleName}</Typography>\n                            </Typography>\n                        </BoxStyled>\n                        <BoxStyled paddingY={3} paddingX={1 / 2 * 5} display={'flex'}\n                                   flexDirection={'column'}>\n                            <Box display={'flex'} flexDirection={'row'} justifyContent={'space-between'}>\n                                <Typography display={'flex'} flexDirection={'column'} component={'div'}>\n                                    <Typography variant={'body2'} component={'h5'} color={'textSecondary'}>\n                                        {t('labelReward')}\n                                    </Typography>\n                                    <Typography variant={'body1'} component={'span'} color={'textPrimary'}>\n                                        {typeof coinPairInfo.isActivity === 'undefined' ? 'N/A' : <>\n                                            <Typography\n                                                component={'span'}>{coinPairInfo.activity?getThousandFormattedNumbers(coinPairInfo.activity.totalRewards):'N/A'} </Typography>\n                                            <Typography\n                                                component={'span'}>{coinPairInfo.activity?.rewardToken?.simpleName}</Typography>\n                                        </>}\n                                    </Typography>\n                                </Typography>\n                                <Typography display={'flex'} flexDirection={'column'} alignItems={'flex-end'}\n                                            component={'div'}>\n                                    <Typography variant={'body2'} component={'h5'} color={'textSecondary'}>\n                                        {t('labelMyReward')}\n                                    </Typography>\n                                    <Typography variant={'body1'} component={'span'} color={'textPrimary'}>\n                                        {/*{typeof coinPairInfo.isActivity === 'undefined' ? 'N/A' : <>*/}\n                                        {typeof myAmm.reward === 'undefined' ? 'N/A' : <>\n\n                                        <Typography component={'span'}> {getThousandFormattedNumbers(myAmm.reward)} </Typography>\n                                            <Typography\n                                                component={'span'}> {coinPairInfo.activity?.rewardToken?.simpleName}</Typography></>}\n\n                                    </Typography>\n                                </Typography>\n                            </Box>\n                            <Typography alignSelf={'flex-start'} variant={'body2'} color={'textSecondary'}\n                                        component=\"span\" marginTop={1}>\n                                {typeof coinPairInfo.isActivity === 'undefined' ? t('labelNoActiveEvent')\n                                    : <>\n                                        {t('labelDate')} :\n                                       <> {moment(coinPairInfo.activity?.duration.from).format('L') + ' - ' + moment(coinPairInfo.activity?.duration.to).format('L')}</>\n                                    </>\n                                }\n                            </Typography>\n                        </BoxStyled>\n                    </Grid>\n                    <Hidden mdDown>\n                        <Grid item md={7} paddingRight={2}>\n\n\n                        </Grid>\n                    </Hidden>\n                </Grid>\n            </Box>\n            <Box display={'flex'}>\n                <AmmPanelView pair={pair} walletMap={walletMap} snapShotData={snapShotData}/>\n            </Box>\n        </Box>\n        <Grid container marginY={3}>\n            <Grid item xs={12}>\n                <Tabs value={tabIndex}\n                      onChange={handleChange}\n                      aria-label=\"tabs switch\">\n                    <Tab label={t('labelAll')} {...applyProps(0)} />\n                    <Tab label={t('labelMe')} {...applyProps(1)} />\n                </Tabs>\n                <StylePaper marginTop={2} >\n                    {/*ammRecordArray*/}\n                    {tabIndex === 0 ?  <AmmRecordTable\n                        rawData={ammMarketArray}\n                        handlePageChange={_handlePageChange} page={page}\n                    /> : <AmmRecordTable rawData={myAmmMarketArray}  handlePageChange={_handlePageChange} page={page} /> }\n                </StylePaper>\n            </Grid>\n\n        </Grid>\n\n    </>\n})\n\n\n\n","import { AmmProps } from '@loopring-web/component-lib';\nimport React from 'react';\nimport { AmmCardProps, AmmData, AmmInData, IBData } from '@loopring-web/component-lib/static-resource';\nimport { AmmCard } from '@loopring-web/component-lib/components/block/AmmCard';\nimport { Grid } from '@material-ui/core';\nimport { useAmmMiningUI } from './hook';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport { withTranslation } from 'react-i18next';\nimport { AmmPoolActivityRule, LoopringMap } from 'loopring-sdk/dist/defs/loopring_defs';\n\nconst AmmCardWrap = React.memo(React.forwardRef((props:AmmCardProps<{[key:string]:any}>,ref) => {\n    return props? <AmmCard ref={ref} {...props} /> :<></>\n}));\nconst AmmList = <I extends {[key:string]:any}>({ammActivityViewMap}: {ammActivityViewMap: Array<AmmCardProps<I>> })=>{\n    return  <>{ammActivityViewMap.map((item:AmmCardProps<I>,index)=>\n        <Grid item xs={12} sm={6} lg={4}  key={index}>\n            <AmmCardWrap {...item as any} />\n        </Grid>\n    ) }</>\n}\n\nexport const AmmMiningView =  withTranslation('common')(<T extends AmmData<C extends IBData<I> ? C : IBData<I>>, I,\n    ACD extends AmmInData<I>,\n    C = IBData<I>>({ammProps,t,ammActivityMap,...rest}: { ammProps:AmmProps<T ,I,ACD>,\n    ammActivityMap: LoopringMap<LoopringMap<AmmPoolActivityRule[]>>|undefined,   \n} & any) => {\n    const { ammActivityViewMap,\n        ammActivityPastViewMap} = useAmmMiningUI({ammActivityMap});\n    const [tabIndex,setTabIndex] = React.useState<0|1>(0);\n    const handleChange = (event: any, newValue: 0|1) => {\n        setTabIndex(newValue);\n    }\n\n    return <Grid container spacing={2}>\n        <Grid item xs={12}>\n            <Tabs value={tabIndex}\n                  onChange={handleChange}\n                  aria-label=\"tabs switch\">\n                <Tab label={t('labelCurrentActivities')}  />\n                <Tab label={t('labelPastActivities')}  />\n            </Tabs>\n        </Grid>\n        <AmmList ammActivityViewMap={tabIndex === 0 ? ammActivityViewMap : ammActivityPastViewMap}/>\n    </Grid>\n})\n","import { AmmCardProps } from '@loopring-web/component-lib/static-resource';\nimport { AmmPoolActivityRule, AmmPoolActivityStatus,LoopringMap } from 'loopring-sdk';\nimport React from 'react';\nimport {\n    makeUIAmmActivityMap\n} from '../../../hooks/help/makeUIAmmActivityMap';\n\nimport { useUserRewards } from '../../../stores/userRewards';\n\nexport const useAmmMiningUI = <R extends { [ key: string ]: any }, I extends { [ key: string ]: any }>(\n    {\n        ammActivityMap\n    }: { ammActivityMap: LoopringMap<LoopringMap<AmmPoolActivityRule[]>> | undefined }\n): {\n    ammActivityViewMap: Array<AmmCardProps<I>>,\n    ammActivityPastViewMap: Array<AmmCardProps<I>>\n} => {\n    const  userRewardsMapState =  useUserRewards();// store.getState().userRewardsMap\n    // const {coinMap} = useTokenMap();\n    // const ammMapState = useAmmMap();\n    // const walletLayer2State = useWalletLayer2();\n    const [ammActivityViewMap, setAmmActivityViewMap] = React.useState<Array<AmmCardProps<I>>>([]);\n\n\n    const [ammActivityPastViewMap, setAmmActivityPastViewMap] = React.useState<Array<AmmCardProps<I>>>(\n        []);\n    // const [ammUserRewardMap, setAmmUserRewardMap] = React.useState<AmmUserRewardMap>(\n    //     {});\n\n\n    // );\n    React.useEffect(() => {\n        if(ammActivityMap && Object.keys(ammActivityMap).length>0 ){\n\n           // getAmmPoolUserRewards().then((ammUserRewardMap)=>{\n                // setAmmUserRewardMap(ammUserRewardMap as AmmUserRewardMap);\n                setAmmActivityViewMap(makeUIAmmActivityMap(\n                    {\n                        ammActivityMap,\n                        type: 'AMM_MINING',\n                        ammPoolActivityStatus: [AmmPoolActivityStatus.NotStarted, AmmPoolActivityStatus.InProgress]\n                    }, userRewardsMapState.userRewardsMap\n                ));\n                setAmmActivityPastViewMap(\n                    makeUIAmmActivityMap(\n                        {\n                            ammActivityMap,\n                            type: 'AMM_MINING',\n                            ammPoolActivityStatus: [AmmPoolActivityStatus.EndOfGame]\n                        }, userRewardsMapState.userRewardsMap\n                    ))\n          //  })\n        }\n\n    },[ammActivityMap])\n    React.useEffect(() => {\n            if (userRewardsMapState.status === \"ERROR\") {\n                //TODO: solve error\n                userRewardsMapState.statusUnset();\n            } else if (userRewardsMapState.status === \"DONE\") {\n                userRewardsMapState.statusUnset();\n                setAmmActivityViewMap(\n                    makeUIAmmActivityMap(\n                    {\n                        ammActivityMap,\n                        type: 'AMM_MINING',\n                        ammPoolActivityStatus: [AmmPoolActivityStatus.NotStarted, AmmPoolActivityStatus.InProgress]\n                    }, userRewardsMapState.userRewardsMap\n                ));\n                setAmmActivityPastViewMap(\n                    makeUIAmmActivityMap(\n                        {\n                            ammActivityMap,\n                            type: 'AMM_MINING',\n                            ammPoolActivityStatus: [AmmPoolActivityStatus.EndOfGame]\n                        }, userRewardsMapState.userRewardsMap\n                    ))\n                // if (userRewardsMapState.ammMap) {\n                //     setAmmActivityViewMap(\n                //         makeUIAmmActivityMap(\n                //             {\n                //                 ammActivityMap,\n                //                 type: 'AMM_MINING',\n                //                 ammPoolActivityStatus: [AmmPoolActivityStatus.NotStarted, AmmPoolActivityStatus.InProgress]\n                //             }, ammUserRewardMap\n                //         ))\n                //     setAmmActivityPastViewMap(\n                //         makeUIAmmActivityMap(\n                //             {\n                //                 ammActivityMap,\n                //                 type: 'AMM_MINING',\n                //                 ammPoolActivityStatus: [AmmPoolActivityStatus.EndOfGame]\n                //             }, ammUserRewardMap\n                //         ))\n                //\n                // }\n\n            }\n        },\n        [userRewardsMapState.status]\n    )\n\n\n    return {\n        ammActivityViewMap,\n        ammActivityPastViewMap\n    }\n\n}\n","import { AmmDetailStore } from '../../stores/Amm/AmmMap';\nimport { AmmPoolSnapshot } from 'loopring-sdk';\nimport { WalletLayer2Map } from '../../stores/walletLayer2';\nimport { makeMyAmmWithSnapshot, makeMyAmmWithStat } from './makeUIAmmActivityMap';\nimport { AmmUserRewardMap } from 'loopring-sdk/dist/defs/loopring_defs';\nimport { WalletMapExtend } from './updateWallet';\n\nexport const makeMyPoolRowWithSnapShot = <T extends { [ key: string ]: any }>({market,ammSnapShot,walletMap,ammUserRewardMap}: {\n    market:string\n    ammSnapShot: AmmPoolSnapshot,\n    walletMap: WalletMapExtend<T>\n    ammUserRewardMap:AmmUserRewardMap|undefined\n}) => {\n\n    return makeMyAmmWithSnapshot(market,walletMap, ammUserRewardMap, {\n        ammPoolsBalance: ammSnapShot\n    })\n}\n\n                                                                        \nexport const makeMyPoolRowWithPoolState = <T extends { [ key: string ]: any }>({market,ammDetail,walletMap,ammUserRewardMap}: {\n    market:string\n    ammDetail: AmmDetailStore<T>,\n    walletMap: WalletMapExtend<T>\n    ammUserRewardMap:AmmUserRewardMap|undefined\n}) => {\n    if(walletMap && ammDetail){\n        return makeMyAmmWithStat (market,walletMap, ammUserRewardMap, ammDetail)\n    }\n    return undefined\n}","import {\n    AmmPoolActivityRule,\n    AmmPoolSnapshot,\n    LoopringMap,\n    TickerData\n} from 'loopring-sdk';\nimport React from 'react';\nimport { AmmRecordRow, MyPoolRow} from '@loopring-web/component-lib';\nimport { updateWallet, WalletMapExtend } from '../../../hooks/help/updateWallet';\nimport { getUserAmmTransaction, makeMyAmmMarketArray } from '../../../hooks/help/marketTable';\nimport { useTokenMap } from '../../../stores/token';\nimport { useWalletLayer2 } from '../../../stores/walletLayer2';\nimport { makeSummaryMyAmm, SummaryMyAmm } from '../../../hooks/help/makeUIAmmActivityMap';\nimport { useUserRewards } from '../../../stores/userRewards';\nimport { useAmmMap } from '../../../stores/Amm/AmmMap';\nimport { makeMyPoolRowWithPoolState } from '../../../hooks/help/makeMyPoolDetail';\n\n\nexport const useOverview = <R extends { [ key: string ]: any }, I extends { [ key: string ]: any }>(\n    {\n        ammActivityMap\n    }: { ammActivityMap: LoopringMap<LoopringMap<AmmPoolActivityRule[]>> | undefined }\n): {\n    myAmmMarketArray: AmmRecordRow<R>[],\n    summaryReward: SummaryMyAmm | undefined,\n    myPoolRow: AmmRecordRow<R>[]\n    // ammActivityViewMap: Array<AmmCardProps<I>>,\n    // ammActivityPastViewMap: Array<AmmCardProps<I>>\n} => {\n    const walletLayer2State = useWalletLayer2();\n    const userRewardsMapState = useUserRewards();\n    const {marketArray} = useTokenMap();\n    const ammMapState = useAmmMap();\n    const {ammMap} = ammMapState;\n\n    const [walletMap, setWalletMap] = React.useState<WalletMapExtend<R> | undefined>(undefined);\n    const [summaryReward, setSummaryReward] = React.useState<SummaryMyAmm | undefined>(undefined);\n    const [myPoolRow,setMyPoolRow] = React.useState<MyPoolRow<R>[]>([])\n    const [myAmmMarketArray, setMyAmmMarketArray] = React.useState<AmmRecordRow<R>[]>([]);\n    // const [ammUserRewardMap, setAmmUserRewardMap] = React.useState<AmmUserRewardMap|undefined>(undefined);\n    // const [snapShotData,setSnapShotData] = React.useState<{\n    //     tickerData: TickerData|undefined\n    //     ammPoolsBalance: AmmPoolSnapshot|undefined\n    // }|undefined>(undefined);\n    const walletLayer2DoIt = React.useCallback(() => {\n        const {walletMap: _walletMap} = updateWallet();\n        setWalletMap(_walletMap)\n        if (_walletMap) {\n            getUserAmmTransaction()?.then((marketTrades) => {\n                let _myTradeArray = makeMyAmmMarketArray(undefined, marketTrades)\n                setMyAmmMarketArray(_myTradeArray ? _myTradeArray : [])\n            })\n        }\n        return _walletMap\n    }, [updateWallet, getUserAmmTransaction, makeMyAmmMarketArray, marketArray])\n    const makeMyPoolRow  =  React.useCallback((_walletMap):MyPoolRow<R>[] => {\n        if (_walletMap && ammMap) {\n            // @ts-ignore\n            const _myPoolRow:MyPoolRow<R>[] =  Reflect.ownKeys(_walletMap).reduce((prev:MyPoolRow<R>[],walletKey:string)=>{\n                if(/LP-/i.test(walletKey)){\n                   const  ammKey = walletKey.replace('LP-','AMM-');\n                   const  marketKey = walletKey.replace('LP-','');\n                   let rowData: MyPoolRow<R>|undefined;\n                    //TODO：websocket open\n                    //  if(ammPoolSnapShots)\n                    // makeData by snapshot else\n                    // else\n                    rowData = makeMyPoolRowWithPoolState(\n                        {\n                            ammDetail: ammMap[ ammKey ],\n                            walletMap: _walletMap,\n                            market: marketKey,\n                            ammUserRewardMap: userRewardsMapState.userRewardsMap\n                        }\n                    )\n                    if(rowData !== undefined){\n                        prev.push(rowData);\n                    }\n                }\n                return prev\n            },[] as MyPoolRow<R>[])\n            // console.log('rowData',_myPoolRow);\n            return _myPoolRow;\n        }\n        return [];\n    },[ammMap,userRewardsMapState.userRewardsMap])\n\n    React.useEffect(() => {\n        if (walletLayer2State.walletLayer2 ) {\n            const _walletMap = walletLayer2DoIt();\n            if (ammMap) {\n                const _myPoolRow = makeMyPoolRow(_walletMap)\n                setMyPoolRow(_myPoolRow)\n            }\n        }\n    }, []);\n\n    React.useEffect(() => {\n        //ammMapState.ammMap or\n\n           switch (walletLayer2State.status ) {\n               case \"ERROR\":\n                   walletLayer2State.statusUnset();\n                   break;\n               case \"DONE\":\n                   walletLayer2State.statusUnset();\n                   const _walletMap = walletLayer2DoIt();\n                   //TODO check AmmMap state or ammSnapshot sockets\n                   //userRewardsMapState is an option but  walletLayer2 amd ammMapState.ammMap is required\n                   if( ammMapState.ammMap ){\n                       const _myPoolRow = makeMyPoolRow(_walletMap);\n                       setMyPoolRow(_myPoolRow)\n                   }\n                   break;\n               default:\n                   break;\n\n           }\n       // }\n    }, [walletLayer2State.status])\n\n    React.useEffect(() => {\n        if (ammMapState.status === \"ERROR\") {\n            //TODO: solve error\n            ammMapState.statusUnset();\n        } else if (ammMapState.status === \"DONE\") {\n            ammMapState.statusUnset();\n            //TODO check AmmMap state or ammSnapshot sockets when websocket open  ammMapState done should not effect myPoolRow\n            if (walletLayer2State.walletLayer2) {\n                //userRewardsMapState is an option and walletLayer2 is required\n                const _myPoolRow = makeMyPoolRow(walletLayer2State.walletLayer2);\n                setMyPoolRow(_myPoolRow);\n            }\n        }\n    }, [ammMapState.status])\n\n    React.useEffect(() => {\n            if (userRewardsMapState.status === \"ERROR\") {\n                //TODO: solve error\n                userRewardsMapState.statusUnset();\n            } else if (userRewardsMapState.status === \"DONE\") {\n                userRewardsMapState.statusUnset();\n                // setAmmUserRewardMap()\n                const summaryReward = makeSummaryMyAmm({userRewardsMap:userRewardsMapState.userRewardsMap});\n                setSummaryReward(summaryReward);\n\n                //TODO check AmmMap state or ammSnapshot sockets\n                if (walletLayer2State.walletLayer2 && ammMapState.ammMap) {  //  ammMapState.ammMap or websocket\n                    //userRewardsMapState is an option and walletLayer2 is required\n                    const _myPoolRow = makeMyPoolRow(walletLayer2State.walletLayer2);\n                    setMyPoolRow(_myPoolRow);\n                }\n\n            }\n        }, [userRewardsMapState.status])\n    return {\n        myAmmMarketArray,\n        summaryReward,\n        myPoolRow,\n        // ammActivityViewMap,\n        // ammActivityPastViewMap\n    }\n\n}\n","import React from 'react'\nimport styled from '@emotion/styled'\nimport { Box, Grid, Typography } from '@material-ui/core'\nimport { WithTranslation, withTranslation } from 'react-i18next'\nimport {\n    AmmRecordTable,\n    AmmTradeType,\n    ChartType,\n    ScaleAreaChart,\n    TablePaddingX,\n    ToggleButtonGroup,\n    useSettings\n} from '@loopring-web/component-lib'\nimport { MyPoolTable } from '@loopring-web/component-lib/components/tableList/myPoolTable';\nimport {\n    Currency,\n    getThousandFormattedNumbers,\n    PriceTag\n} from '@loopring-web/component-lib/src/static-resource';\n\nimport { AmmPoolActivityRule, LoopringMap } from 'loopring-sdk/dist/defs/loopring_defs';\nimport { useOverview } from './hook';\n\n\n//TODO: FIXED:  demo data\n\n\nconst toggleData = [\n    {value: '24 H', key: '24 H'},\n    {value: '1 W', key: '1 W'},\n    {value: 'ALL', key: 'ALL'},\n]\n\nconst StylePaper = styled(Box)`\n  width: 100%;\n  height: 100%;\n  flex: 1;\n` as typeof Box;\n\nconst StyleWrapper = styled(Grid)`\n  position: relative;\n  width: 100%;\n  background-color: ${({theme}) => theme.colorBase.background().default};\n  border-radius: ${({theme}) => theme.unit}px;\n` as typeof Grid\n\n\n\nconst StyledBtnGroupWrapper = styled(Box)`\n  position: absolute;\n  z-index: 99;\n  top: ${({theme}) => theme.unit}px;\n  width: 100%;\n` as typeof Box\n\nconst TableWrapStyled = styled(Grid)`\n  & {\n    background-color: ${({theme}) => theme.colorBase.background().default};\n    ${({theme}) => theme.border.defaultFrame({c_key: 'blur', d_R: 1})};\n  }\n\n  ${({theme}) => TablePaddingX({pLeft: theme.unit * 3, pRight: theme.unit * 3})}\n` as typeof Grid\n\nexport const LiquidityOverview = withTranslation('common')(\n    <R extends { [ key: string ]: any }, I extends { [ key: string ]: any }>\n    ({t, ammActivityMap, ...rest}:\n         WithTranslation &\n         { ammActivityMap: LoopringMap<LoopringMap<AmmPoolActivityRule[]>> | undefined }\n    ) => {\n        const [chartPeriod, setChartPeriod] = React.useState('ALL');\n        const [page, setPage] = React.useState(1);\n        const {currency} = useSettings();\n\n        const _handlePageChange = React.useCallback((page: number) => {\n            setPage(page);\n        }, [])\n\n        const {myAmmMarketArray, summaryReward, myPoolRow} = useOverview({ammActivityMap});\n        return (\n            <>\n                <StyleWrapper container spacing={1} padding={3} margin={0}>\n                    <Grid display={'flex'} flexDirection={'column'} justifyContent={'space-around'} item sm={3}>\n                        <Typography variant={'body1'} component={'h5'}\n                                    color={'textSecondary'}>{t('labelTotalPositionValue')}</Typography>\n                        <Typography variant={'h4'} marginTop={1}>\n                            {summaryReward === undefined ? 'N/A' : currency === Currency.dollar ? PriceTag.Dollar\n                                + getThousandFormattedNumbers(summaryReward.rewardDollar !== undefined? summaryReward.rewardDollar : 0)\n                                + getThousandFormattedNumbers( summaryReward.feeDollar !== undefined?summaryReward.feeDollar : 0)\n                                : PriceTag.Yuan + getThousandFormattedNumbers(summaryReward.rewardYuan ? summaryReward.rewardYuan : 0)\n                                    +  getThousandFormattedNumbers(summaryReward.feeYuan ? summaryReward.feeYuan : 0)}\n                        </Typography>\n                    </Grid>\n                    <Grid display={'flex'} flexDirection={'column'} justifyContent={'space-around'} item sm={3}>\n                        <Typography variant={'body1'} component={'h5'}\n                                    color={'textSecondary'}>{t('labelFeeRewards')}</Typography>\n                        <Typography variant={'h4'} marginTop={1}>\n                            {summaryReward === undefined ? 'N/A' : currency === Currency.dollar ? PriceTag.Dollar\n                                + getThousandFormattedNumbers(summaryReward.feeDollar ? summaryReward.feeDollar : 0)\n                                : PriceTag.Yuan\n                                + getThousandFormattedNumbers(summaryReward.feeYuan ? summaryReward.feeYuan : 0)}\n                        </Typography>\n                    </Grid>\n                    <Grid display={'flex'} flexDirection={'column'} justifyContent={'space-around'} item sm={3}>\n                        <Typography variant={'body1'} component={'h5'}\n                                    color={'textSecondary'}>{t('labelMiningRewards')}</Typography>\n                        <Typography variant={'h4'} marginTop={1}>\n                            {summaryReward === undefined ? 'N/A' : currency === Currency.dollar ? PriceTag.Dollar\n                                + getThousandFormattedNumbers(summaryReward.rewardDollar ? summaryReward.rewardDollar : 0)\n                                : PriceTag.Yuan\n                                + getThousandFormattedNumbers(summaryReward.rewardYuan ? summaryReward.rewardYuan : 0)}\n                        </Typography>\n                    </Grid>\n                </StyleWrapper>\n                <StyleWrapper container marginY={2} height={340}>\n                    <StyledBtnGroupWrapper display={'flex'} padding={3} justifyContent={'space-between'}>\n                        <Typography variant={'body1'} component={'h5'}\n                                    color={'textSecondary'}>{t('labelLiquidityValue')}</Typography>\n                        <Box marginRight={-1}>\n                            <ToggleButtonGroup exclusive size=\"small\" {...{\n                                ...rest,\n                                t,\n                                data: toggleData,\n                                value: chartPeriod,\n                                setValue: setChartPeriod\n                            }} />\n                        </Box>\n                    </StyledBtnGroupWrapper>\n                    <ScaleAreaChart type={ChartType.Trend} data={[]}/>\n                </StyleWrapper>\n                <Typography paddingLeft={2} variant={'h4'}>{t('labelMyAmm')}</Typography>\n                <TableWrapStyled container marginY={2} paddingY={2} flex={1} height={568}>\n                    <Grid item xs={12} display={'flex'} flexDirection={'column'}>\n                        <MyPoolTable\n                            rawData={myPoolRow}\n                            pagination={{pageSize: 5}}\n                            handleDeposit={(row: any) => {\n                                console.log()\n                            }}\n                            handleWithdraw={(row: any) => {\n                                console.log()\n                            }}\n                            handlePageChange={() => {\n                            }}\n                        />\n                    </Grid>\n                </TableWrapStyled>\n                <Typography paddingLeft={2} variant={'h4'}>{t('labelMyAmmRecord')}</Typography>\n                <TableWrapStyled container marginTop={2} paddingY={2} flex={1}>\n                    <Grid item xs={12} display={'flex'} flexDirection={'column'}>\n                        <AmmRecordTable rawData={myAmmMarketArray} handlePageChange={_handlePageChange} page={page}/>\n                    </Grid>\n                </TableWrapStyled>\n            </>\n        )\n    })","import { useRouteMatch } from 'react-router'\n\nimport { Box } from '@material-ui/core'\nimport {\n    SubMenu,\n    SubMenuList as BasicSubMenuList,\n} from '@loopring-web/component-lib'\nimport { withTranslation } from 'react-i18next'\nimport { subMenuLiquidity } from '@loopring-web/component-lib/src/static-resource'\nimport { PoolsPanel } from './PoolsPanel'\nimport { CoinPairPanel } from './CoinPairPanel';\nimport { AmmMiningView } from './AmmMining';\nimport { LiquidityOverview } from './LiquidityOverview'\nimport { useAmmPool } from './hook';\n\nexport const subMenu = subMenuLiquidity\n\nconst SubMenuList = withTranslation(['layout','common'], { withRef: true })(BasicSubMenuList);\nexport const LiquidityPage = () => {\n\n    // const { ammFee } = useAmmPool('LRC', 'ETH')\n    //\n    // console.log('--- > ammFee:', ammFee)\n    //\n    const {ammActivityMap} = useAmmPool();\n    let match: any = useRouteMatch(['/liquidity/:item',':next/']);\n    const selected = match?.params.item ?? 'pools'\n    let matchPair: any = useRouteMatch(['/liquidity/:item/:next/:symbol']);\n    let symbol:any = undefined\n    if (matchPair && matchPair?.params?.next && matchPair.params.item === 'pools') {\n       if(!matchPair.params.symbol){\n           symbol='LRC-ETH';\n       }else{\n           symbol=matchPair.params.symbol;\n       }\n    }\n    \n    return (\n        <>\n            { symbol && <Box display={'flex'} flexDirection={'column'}  flex={1} alignSelf={'flex-start'}>\n              <CoinPairPanel ammActivityMap={ammActivityMap}/>\n            </Box>\n            }\n            {!symbol && <>  <Box width={'200px'} display={'flex'} justifyContent={'stretch'} marginRight={3} marginBottom={3}>\n                    <SubMenu>\n                        <SubMenuList selected={selected} subMenu={subMenu as any} />\n                    </SubMenu>\n                </Box>\n                <Box  minHeight={420}  display={'flex'} alignItems={'stretch'} justifyContent={'stretch'} flexDirection=\"column\" marginTop={0} flex={1} marginBottom={3}>\n                    {(selected === 'pools' && !symbol ) && <PoolsPanel ammActivityMap={ammActivityMap}/>}\n                    {(selected === 'amm-mining' && !symbol ) && <AmmMiningView ammActivityMap={ammActivityMap}/>}\n                    {(selected === 'my-liquidity' && !symbol ) && <LiquidityOverview ammActivityMap={ammActivityMap}/>}\n                    {selected === 'orderBook-Mining' && <AmmMiningView ammActivityMap={ammActivityMap}/>}\n                    {/*{selected === 'orders' && <OrderPanel />}*/}\n                </Box>\n             </>\n            }\n        </>\n    )\n\n}\n","import React from 'react';\nimport { useAmmActivityMap } from '../../stores/Amm/AmmActivityMap';\n\nimport { AmmPoolActivityRule, LoopringMap } from 'loopring-sdk';\nimport { useAccount } from '../../stores/account/hook';\nimport { useUserRewards } from '../../stores/userRewards';\nimport { useAmmMap } from '../../stores/Amm/AmmMap';\n\nexport const useAmmPool = <R extends {[key:string]:any},I extends {[key:string]:any}>()=>{\n    const AmmActivityMapState  = useAmmActivityMap()\n    const {updateUserRewards}  = useUserRewards()\n    const {account} = useAccount();\n    const {ammMap,updateAmmMap} = useAmmMap();\n    const [ammActivityMap,setAmmActivityMap] = React.useState<LoopringMap<LoopringMap<AmmPoolActivityRule[]>>|undefined>(AmmActivityMapState.ammActivityMap)\n    // init AmmMap at begin\n    React.useEffect(() => {\n        if (!ammMap || Object.keys(ammMap).length === 0) {\n            updateAmmMap();\n        }\n    }, []);\n    React.useEffect(() => {\n        switch (AmmActivityMapState.status) {\n            case \"ERROR\":\n                AmmActivityMapState.statusUnset();\n                // setState('ERROR')\n                //TODO: show error at button page show error  some retry dispath again\n                break;\n            case \"DONE\":\n                AmmActivityMapState.statusUnset();\n                setAmmActivityMap(AmmActivityMapState.ammActivityMap)\n                break;\n            default:\n                break;\n\n        }\n    }, [AmmActivityMapState.status])\n\n    //TODO tickMap\n    React.useEffect(() => {\n        if(account.accountId){\n            updateUserRewards()\n        }\n    }, [account.accountId])\n\n    return {\n        ammActivityMap\n    }\n\n}\n\n","import { HashRouter as Router, Route, Switch, } from 'react-router-dom'\n\nimport Header from 'layouts/header'\n\nimport QuotePage from 'pages/QuotePage'\nimport { SwapPage } from 'pages/SwapPage'\n\nimport DebugPage from 'pages/DebugPage'\n\nimport Container from '@material-ui/core/Container'\nimport { Box } from '@material-ui/core'\nimport { DevWrapper } from '../provider/'\nimport { Layer2Page } from '../pages/Layer2Page'\nimport { LiquidityPage } from '../pages/LiquidityPage'\n\nconst RouterView = () => {\n    \n    return <Router>\n        <Header />\n\n        {/*<Box style={{marginTop: `var(--header-height)`}} flex={1} display={'flex'}>*/}\n        <Container maxWidth=\"lg\" style={{minHeight:'calc(100% - 64px - 32px)',display:'flex',flexDirection:'column'}}>\n            {/*style={{height: '100%' }}*/}\n            <Box display={'flex'} flex={1} alignItems={'stretch'} flexDirection={'row'} marginTop={3}  >\n                <Switch>\n                    <Route exact component={SwapPage} path='/'/>\n                    <Route exact component={QuotePage} path='/markets'/>\n                    <Route component={SwapPage} path='/trading/lite'/>\n                    <Route component={SwapPage} path='/trading/lite(/:symbol)'/>\n\n                    <Route exact component={Layer2Page} path='/layer2'/>\n                    <Route exact component={Layer2Page} path='/layer2/assets'/>\n                    <Route exact component={Layer2Page} path='/layer2/transactions'/>\n                    <Route exact component={Layer2Page} path='/layer2/trades'/>\n                    <Route exact component={Layer2Page} path='/layer2/orders'/>\n                    <Route exact component={Layer2Page} path='/layer2/setting'/>\n\n                    <Route exact component={LiquidityPage} path='/liquidity'/>\n                    <Route exact component={LiquidityPage} path='/liquidity/pools/*'/>\n                    <Route exact component={LiquidityPage} path='/liquidity/pools'/>\n                    {/*<Route exact component={LiquidityPage} path='/liquidity/pools/coinPair(/:symbol)'/>*/}\n                    <Route exact component={LiquidityPage} path='/liquidity/amm-mining'/>\n                    <Route exact component={LiquidityPage} path='/liquidity/my-liquidity'/>\n                    <Route exact component={LiquidityPage} path='/liquidity/orderBook-Mining'/>\n                    <Route exact component={LiquidityPage} path='/liquidity/maker-rebates'/>\n\n                    <DevWrapper>\n                        <Route exact path='/debug'>\n                            <DebugPage/>\n                        </Route>\n                    </DevWrapper>\n\n                </Switch>\n            </Box>\n        </Container>\n        {/*</Box>*/}\n\n    </Router>\n}\n\nexport default RouterView\n"],"sourceRoot":""}