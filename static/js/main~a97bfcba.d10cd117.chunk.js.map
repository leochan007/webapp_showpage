{"version":3,"sources":["storage/index.ts","stores/account/reducer.ts","index.tsx","stores/global/actions.ts","stores/system/reducer.ts","stores/transactions/reducer.ts","stores/index.ts","stores/trading/reducer.ts","defs/common_defs.ts","stores/trading/hook.ts","provider/global/index.tsx","provider/web3ReactManager/index.tsx","provider/dev-wrapper/index.tsx","state_machine/account_machine_spec.ts","defs/web3_defs.ts","stores/account/hook.ts","state_machine/machine_builder.ts","layouts/header/hook.tsx","utils/web3_tools.ts","hooks/exchange/useExchangeAPI.ts","pages/SettingPage/SettingPanel.tsx","pages/SettingPage/index.tsx","layouts/header/index.tsx","pages/QuotePage/index.tsx","pages/SwapPage/panel/SwapPanel/index.tsx","utils/swap_calc_utils.ts","pages/SwapPage/hook.ts","hooks/exchange/useAmmpoolAPI.ts","pages/SwapPage/panel/BasicInfoPanel/index.tsx","hooks/exchange/useUserAPI.ts","hooks/exchange/useWsAPI.ts","defs/swap_defs.ts","pages/SwapPage/panel/SwapPanel/hooks.ts","utils/obj_tools.ts","pages/SwapPage/panel/TradePanel/TradePanel.tsx","pages/SwapPage/panel/TradePanel/index.tsx","pages/SwapPage/panel/TradePanel/hooks.ts","pages/SwapPage/index.tsx","pages/DebugPage/index.tsx","pages/Layer2Page/TxPanel/index.tsx","pages/Layer2Page/TxPanel/hooks.ts","hooks/modal/useModals.ts","pages/Layer2Page/AssetPanel/hooks.ts","pages/Layer2Page/AssetPanel/index.tsx","pages/Layer2Page/TradePanel/index.tsx","pages/Layer2Page/TradePanel/hooks.ts","pages/Layer2Page/OrderPanel/index.tsx","pages/Layer2Page/index.tsx","routers/index.tsx"],"names":["CONSTANTS","UserStorage","rawHandler","sessionStorage","getItem","Handler","undefined","parseInt","err","handler","setItem","removeItem","reset","dateTimeStr","localStorage","ActiveTime","now","Date","getTime","console","log","toString","tmpDt","SESSION_TIMEOUT_SECONDS","clear","rawId","AccountId","accountId","Account","account","Apikey","apikey","Eddsakey","eddsakey","orderHash","AmmOrder","address","current","HardwareAddresses","includes","toLowerCase","newValue","initialState","defaultAccId","process","REACT_APP_TEST_ACCOUND_ID","getAccountId","defaultApiKey","REACT_APP_TEST_API_KEY","getApikey","defaultOwner","REACT_APP_TEST_OWNER","getAccount","defaultEddsaKey","REACT_APP_TEST_EDDSA_KEY","getEddsakey","JSON","stringify","accAddr","status","AccountStatus","UNCONNNECTED","publicKey","nonce","isContractAddress","apiKey","eddsaKey","connectName","ConnectorNames","Unknown","connectNameTemp","accountSlice","createSlice","name","reducers","state","initState","Object","assign","setAccAddr","action","payload","setAccountInfo","owner","setApikey","setAccountStatus","setEddsaKey","setConnectName","setConnectNameTemp","setIsContractAddress","actions","Web3ProviderNetwork","createWeb3ReactRoot","NetworkContextName","providers","provider","LocalizationProvider","dateAdapter","MomentUtils","I18nextProvider","i18n","MuThemeProvider","theme","getTheme","ThemeProvider","Provider","store","ReactDOM","render","getLibrary","App","document","getElementById","updateVersion","createAction","SystemStatus","NORMAL","systemSlice","setSystemStatus","transactionsSlice","addTransaction","chainId","from","hash","approval","summary","claim","Error","addedTime","clearAllTransactions","checkedTransaction","blockNumber","tx","lastCheckedBlockNumber","Math","max","finalizeTransaction","receipt","confirmedTime","sagaMiddleware","createSagaMiddleware","reducer","combineReducers","settings","settingsSlice","system","trading","tradingSlice","transactions","transactionlice","modals","modalsSlice","PERSISTED_KEYS","configureStore","middleware","getDefaultMiddleware","thunk","save","states","devTools","enhancers","reduxBatch","preloadedState","load","dispatch","TradingInterval","getBaseQuote","symbol","ind","indexOf","symbol_base","substr","symbol_quote","defaultSymbol","interval","markets","tokens","refreshRate","refreshRateSlow","wsApiKey","changeSymbol","changeTradingInterval","setWsApiKey","setMarkets","setTokens","setExchangeInfo","exchangeInfo","Theme","LangType","MODAL_TYPE","useGetTradingInfo","tradingInfo","useSelector","useUpdateExchangeInfo","useDispatch","api","useExchangeAPI","useCustomDCEffect","getExchangeInfo","then","response","reject","WindowEvent","events","Click","Scroll","forceReset","debounce","checkTimeout","GlobalProvider","children","useCheckAccStatus","useEffect","forEach","event","addEventListener","removeEventListener","Fragment","MessageWrapper","Message","colorBase","error","Web3ReactManager","t","useTranslation","active","useWeb3React","networkActive","networkError","activateNetwork","activate","triedEager","useEagerConnect","network","useInactiveListener","useState","showLoader","setShowLoader","timeout","setTimeout","clearTimeout","DevWrapper","StatusChangeEvent","AccountMachineSpec","Connecting","CONNECTED","Reset","HasPubkey","LOCKED","HasNoPubkey","UNACTIVATED","ErrorResponse","NOACCOUNT","DEPOSITING","FinishDeposit","DEPOSIT_TO_CONFIREM","ACTIVATED","IsSmartWallet","ARPROVING","ApproveSubmit","APPROV_TO_CONFIRM","ApproveConfirmed","Unlock","Lock","connectorsByName","Injected","injected","Network","WalletConnect","walletconnect","WalletLink","walletlink","Ledger","ledger","Trezor","trezor","Authereum","authereum","useWeb3Account","useActiveWeb3React","connector","library","isConnected","voca","isBlank","useAccount","isNoAccount","isActivated","useStateMachine","spec","machine","currentState","stateTransitions","nextState","sendEvent","useCallback","useConnect","activatingConnector","setActivatingConnector","connect","item_name","isSwitch","newConnector","getState","useDisconnect","deactivate","disconnect","useUnlock","exchangeApi","userApi","useUserAPI","lock","a","unlock","exchangeAddress","sk","getProvider","web3","Web3","sign_tools","toHex","toBig","keyPair","secretKey","getUserApiKey","web3Account","lv1Acc","prevChainId","usePrevious","prevWeb3Account","cleanUp","acc","dumpError400","data","resultInfo","code","setInterval","isTimeOut","clearInterval","setHandler","getHandler","checkStatus","useHeader","React","open","setOpen","forceUpdate","useReducer","bool","useSettings","etherscanUrl","useEtherscan","gatewayList","DefaultGatewayList","handleSelect","accountInfoProps","setAccountInfoProps","useTheme","onNotification","onWalletBtnConnent","onThemeBtnClick","onLangBtnClick","lang","changeLanguage","showAccountInfo","setShowAccountInfo","advanceOpen","setAdvanceOpen","handleViewAccountInfo","_event","headerToolBarData","ButtonComponentsMap","Download","url","title","description","Link","href","handleClick","themeMode","mode","Language","language","handleChange","addr","trim","length","getShortAddr","level","ethLink","mainBtn","variant","size","color","onClick","e","updateHeaderMenuWhenHasAccountInfo","headerMenuData","HeadMenuTabKey","Layer2","extender","IconButton","disabled","aria-label","HeaderMenuTabStatus","default","label","WalletStatus","hidden","noAccount","accountPending","useGetExchangeInfo","usePromiseJob","useGetTokens","getTokens","StyledPaper","styled","Grid","background","border","defaultFrame","c_key","d_R","StyledSwitch","Switch","textPrimary","success","backgroundColor","opacity","BtnCurrency","currency","Currency","dollar","setState","_handleChange","target","value","IconComponent","DropDownIcon","labelId","id","autoWidth","onChange","yen","StyledDivider","Divider","unit","SettingPanel","focus","withTranslation","rest","Chg","green","upColor","setUpColor","LanguageType","en_US","setLanguage","setCurrency","generateRows","generateColumns","container","direction","justifyContent","alignItems","Typography","component","marginY","item","xs","display","flexDirection","marginBottom","paddingY","Box","paddingX","Trans","i18nKey","alignSelf","Button","paddingTop","passDay","style","textTransform","up","down","checked","red","PaperStyled","Container","backgroundSecondary","MuiModalStyled","MuiModal","backgroundGlobal","SettingPage","onClose","aria-labelledby","aria-describedby","maxWidth","Header","location","useLocation","onSwitch","selected","pathname","headerRoot","Toolbar","Collapse","in","marginTop","onDisconnect","onSwith","rawDataLastPrice","Style","QuotePage","rawData","SwapPanel","swapProps","SwapStatus","MULTI_FACTOR","baseAmt","MaxBaseAmt","quoteAmt","MaxQuoteAmt","newStatus","Normal","BigNumber","zero","gt","ExceedUserBalance","ExceedPoolBalance","eq","EmptyInput","isNormal","getIcon","baseToken","utils","getAddress","getRight","pairs","left","right","tokenList","coinMapRight","key","icon","simpleName","company","getToken","token","getTokenInfoByToken","ammBalance","tokenInfo","tokenVol","pooledMap","tokenId","volume","reserve","fm","getKey","base","quote","key_bak","isOK","getInfoByKey","raw_data","getBalances","ammpools","ammPoolsBalances","getAmmInfo","ammInfo","quoteToken","baseBalance","quoteBalance","feeBips","getAmt","rawAmt","times","decimals","applySlippageTolerance","slippageTolerance","f","feeFactor","amount","outInWei","dividedBy","out","fromWEI","applyOrderFee","feeBip","valueInWEI","precision","ceil","precisionToFixed","div","toWEI","rm","toFixed","useSwapPage","setBase","setQuote","setAmmpools","useAmmpoolAPI","getAmmPoolConf","useGetAmmPools","ammPoolsBalances_all","setAmmPoolsBalances","getAmmPoolBalances","useGetAmmPoolsBalances","ammpoolsbalances","poolAddress","setPoolAddress","market","setMarket","tokensAll","tokenSymbolMap","toggleData","ChartTypes","depth","ChartType","Depth","trend","Price","BasicInfoPanel","props","tgItemJSXs","map","tlabel","JSX","chartType","setChartType","change","setChange","setVolume","mounted","request","d1","limit","getCandlestick","candlesticks","lastBar","lastClose","close","firstClose","quoteVol","catch","reason","originData","setOriginData","chartTypes","tgItemJSXsPriceChart","keys","ChartUnit","reduce","pre","tGItemData","push","min15","timeStamp","low","high","tradeData","tradeFloat","percent","chartUnit","exclusive","_e","minHeight","maxHeight","type","handleMove","height","D1","useGetUserBalances","balances","setBalances","Reflect","ownKeys","tokenMap","getUserBalances","join","total","locked","availableInWei","minus","useSwapPageWs","topics","getAccountArg","getOrderArg","getAmmpoolArg","setAccount","ammPool","setAmmPool","order","setOrder","op","topic","WsTopicType","Ammpool","timestamp","Candlestick","Order","OrderBook","Ticker","Trade","useHandleSocketData","useWs","socketData","OrderHandling","SwapPanelType","DirectionType","deepClone","result","constructor","hasOwnProperty","useSwap","getAmmOrder","ammOrder","setAmmOrder","priceImpact","setPriceImpact","setBaseAmt","setQuoteAmt","minimumReceived","setLeft","setRight","fee","setFee","takerRate","setTakerRate","currentPrice","setCurrentPrice","amount1ApplyOrderFee","setAmount1ApplyOrderFee","balance","setBalance","availToShow","setAvailToShow","walletMap","setWalletMap","setQuoteBalance","quoteToShow","setQuoteToShow","setSwapProps","currentBalance","totalAmount","amountLocked","newAvailable","balancesTmp","belong","count","fn","Promise","resolve","getOrderDetails","TxStatus","processed","clearAmmOrder","too_many_times","no_such_order","coinMapLeft","getLeft","getUserFeeRate","onBaseAmtInputChange","baseAmtVal","tradeValue","amt","baseTokenInfo","reserveIn","reserveOut","amountIn","feeBipsFactor","amountInWithFee","numerator","denominator","plus","_amount1ApplyOrderFeeInWei","_amount1ApplyOrderFee","Number","getAmountOut","quoteAmtVal","onQuoteAmtInputChange","quoteTokenInfo","amountOut","hasError","reserveOutSubAmountOut","getAmountOut_Reverse","onSwap","allOrNone","getNextStorageId","sellTokenId","storageId","orderId","amount0InBigNumber","amount1WithSlippage","amount1InBigNumber","exchange","sellToken","buyToken","validUntil","maxFeeBips","fillAmountBOrS","orderType","OrderType","ClassAmm","eddsaSignature","submitOrder","swap","tradeCalcData","coinSell","coinBuy","StoB","parseFloat","BtoS","sellCoinInfoMap","buyCoinInfoMap","slippage","abs","sell","buy","onSwapClick","onCoinValueChange","swapData","Sell","Buy","doBeforeSwitch","switchData","res","to","Menu","Exchange","columnModeDefault","ammColumnModeDefault","applyProps","index","Table","withRef","TableUI","TabPanel","other","role","TradePanel","myTrades","recentTrades","setValue","myArgs","columnMode","recentArgs","Tabs","Tab","setMyTrades","getUserTrades","fillTypes","FilledType","amm","trades","tradesNew","useGetMyTrades","ammPoolAddress","ammPoolApi","setRecentTrades","getAmmPoolTrades","side","price","feeAmount","createdAt","useGetRecentTrades","Paper","SwapPage","flex","marginRight","width","DebugPage","useRef","useAmmpoolWs","getMarkets","useGetMarkets","gas","setGas","getGasPrice","useGetGas","depositAddress","TxPanel","txs","setTxs","getUserTranferList","tmpTx","senderAddress","env","receiverAddress","feeTokenSymbol","memo","time","txnHash","tradeType","TransactionTradeTypes","allTypes","useGetTxs","txList","useModals","ShowDeposit","isShow","setShowDeposit","ShowTransfer","setShowTransfer","ShowWithdraw","setShowWithdraw","ShowResetAccount","setShowResetAccount","useChargeFeeList","tokenSymbol","requestType","chargeFeeList","setChargeFeeList","getOffchainFeeAmt","fees","useModalProps","coinMap","setCoinMap","startsWith","useCoinMap","walletMap_Lv1","getTokenBalances","tokenBalances","useLv1WalletMap","walletMap_Lv2","useLv2WalletMap","deposit","sendByMetaMask","gasPrice","gasLimit","contract","response2","withdraw","request2","offchainId","maxFee","extraData","minGas","VALID_UNTIL","submitOffchainWithdraw","transfer","payeeAddr","walletType","payeeAcc","payeeId","payerAddr","payerId","submitInternalTransfer","depositValue","setDepositValue","depositProps","depositBtnStatus","TradeBtnStatus","AVAILABLE","onDepositClick","switchType","setTokenSymbol","withdrawValue","setWithdrawValue","withdrawalFeeList","OffchainFeeReqType","OFFCHAIN_WITHDRAWAL","withdrawProps","withdrawBtnStatus","onWithdrawClick","withdrawType","WithdrawType","Fast","withdrawTypes","WithdrawTypes","chargeFeeToken","chargeFeeTokenList","handleOnAddressChange","handleAddressError","_value","message","transferValue","setTransferValue","transferTokenSymbol","setTransferTokenSymbol","transferFeeList","TRANSFER","transferProps","transferBtnStatus","onTransferClick","resetValue","setResetValue","resetProps","resetBtnStatus","onResetClick","StylePaper","borderColor","AssetPanel","AssetTitleProps","assetInfo","totalAsset","priceTag","PriceTag","Dollar","onShowDeposit","onShowTransfer","onShowWithdraw","className","withDrawProps","rawDataOrderHistory","OrderPanel","subMenu","assetsGroup","AssetsIcon","router","path","transactionsGroup","TransactionsIcon","TradeIcon","countInfoGroup","OrderIcon","SubMenuList","BasicSubMenuList","Layer2Page","match","useRouteMatch","params","marginLeft","RouterView","exact"],"mappings":"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","file":"static/js/main~a97bfcba.d10cd117.chunk.js","sourcesContent":["export enum CONSTANTS {\n    Handler = 'handler',\n    AccountId = 'account_id',\n    Account = 'account',\n    Apikey = 'apikey',\n    Eddsakey = 'eddsakey',\n    ActiveTime = 'active_time',\n    AmmOrder = 'amm_order',\n    HardwareAddresses = 'hardware_addresses',\n}\n\nconst SESSION_TIMEOUT_SECONDS = 600\n\nexport class UserStorage {\n\n    public static getHandler() {\n        const rawHandler = sessionStorage.getItem(CONSTANTS.Handler)\n        try {\n            if (rawHandler !== undefined && rawHandler !== null)\n                return parseInt(rawHandler)\n        } catch (err) {\n        }\n        return undefined\n    }\n\n    public static setHandler(handler: any) {\n        sessionStorage.setItem(CONSTANTS.Handler, handler)\n    }\n\n    public static clearHandler() {\n        sessionStorage.removeItem(CONSTANTS.Handler)\n    }\n\n    public static checkTimeout(reset: boolean = false) : boolean {\n        let dateTimeStr = localStorage.getItem(CONSTANTS.ActiveTime)\n        let now = new Date().getTime()\n\n        if (dateTimeStr !== null && !reset) {\n            let tmpDt = new Date(parseInt(dateTimeStr))\n\n            // console.log(`now:${now} dateTimeStr:${dateTimeStr} delta:${now - tmpDt.getTime()}`)\n\n            if(now - tmpDt.getTime() > SESSION_TIMEOUT_SECONDS * 1000) {\n                console.log(`TIMEOUT! now:${now} dateTimeStr:${dateTimeStr} delta:${now - tmpDt.getTime()}`)\n                sessionStorage.clear()\n                localStorage.setItem(CONSTANTS.ActiveTime, now.toString())\n                return true\n            }\n        } else {\n\n            if (reset) {\n                console.log('force reset!!')\n            }\n\n            localStorage.setItem(CONSTANTS.ActiveTime, now.toString())\n        }\n\n        return false\n    }\n\n\n    public static getAccountId() {\n        const rawId = sessionStorage.getItem(CONSTANTS.AccountId)\n        try {\n            if (rawId)\n                return parseInt(rawId)\n        } catch (err) {\n        }\n        return undefined\n    }\n\n    public static setAccountId(accountId: number) {\n        sessionStorage.setItem(CONSTANTS.AccountId, accountId.toString())\n    }\n\n    public static getAccount() {\n        return sessionStorage.getItem(CONSTANTS.Account)\n    }\n\n    public static setAccount(account: string) {\n        sessionStorage.setItem(CONSTANTS.Account, account)\n    }\n\n    public static getApikey() {\n        return sessionStorage.getItem(CONSTANTS.Apikey)\n    }\n\n    public static setApikey(apikey: string) {\n        sessionStorage.setItem(CONSTANTS.Apikey, apikey)\n    }\n\n    public static getEddsakey() {\n        return sessionStorage.getItem(CONSTANTS.Eddsakey)\n    }\n\n    public static setEddsakey(eddsakey: string) {\n        sessionStorage.setItem(CONSTANTS.Eddsakey, eddsakey)\n    }\n\n    public static getAmmOrder(): string {\n        var orderHash = localStorage.getItem(CONSTANTS.AmmOrder)\n        return orderHash ? orderHash : ''\n    }\n\n    public static setAmmOrder(orderHash: string) {\n        localStorage.setItem(CONSTANTS.AmmOrder, orderHash)\n    }\n\n    public static clearAmmOrder() {\n        localStorage.removeItem(CONSTANTS.AmmOrder)\n    }\n\n    public static isHardwareAddress(address: string) {\n        let current = localStorage.getItem(CONSTANTS.HardwareAddresses)\n        if (current) {\n            if (current.includes(address.toLowerCase())) {\n                return true\n            }\n        }\n        return false\n    }\n\n    public static saveHardwareAddress(address: string) {\n        let current = localStorage.getItem(CONSTANTS.HardwareAddresses);\n        if (current) {\n            if (current.includes(address.toLowerCase()) !== true) {\n                let newValue = current + ',' + address.toLowerCase();\n                localStorage.setItem(CONSTANTS.HardwareAddresses, newValue);\n            }\n        } else {\n            localStorage.setItem(CONSTANTS.HardwareAddresses, address.toLowerCase());\n        }\n\n    }\n}\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit'\n\nimport { AccountInfo } from '@loopring-web/sdk/defs/account_defs'\nimport { ConnectorNames } from '@loopring-web/sdk/defs/web3_defs'\nimport { Lv2Account, } from 'defs/account_defs'\nimport { AccountStatus } from 'state_machine/account_machine_spec'\nimport { UserStorage } from 'storage'\n\n\nconst initialState = () => {\n  const defaultAccId = process.env.REACT_APP_TEST_ACCOUND_ID ? process.env.REACT_APP_TEST_ACCOUND_ID : UserStorage.getAccountId()\n  const defaultApiKey = process.env.REACT_APP_TEST_API_KEY ? process.env.REACT_APP_TEST_API_KEY : UserStorage.getApikey()\n  const defaultOwner = process.env.REACT_APP_TEST_OWNER ? process.env.REACT_APP_TEST_OWNER : UserStorage.getAccount()\n  const defaultEddsaKey = process.env.REACT_APP_TEST_EDDSA_KEY ? process.env.REACT_APP_TEST_EDDSA_KEY : UserStorage.getEddsakey()\n\n  console.log('defaultApiKey:', JSON.stringify(defaultApiKey))\n  const defaultStatus = AccountStatus.UNCONNNECTED\n  return {\n    accAddr: defaultOwner,\n    status: defaultStatus,\n    accountId: defaultAccId,\n    publicKey: {},\n    nonce: 0,\n    isContractAddress: false,\n    apiKey: defaultApiKey,\n    eddsaKey: defaultEddsaKey,\n    connectName: ConnectorNames.Unknown,\n    connectNameTemp: ConnectorNames.Unknown,\n  } as Lv2Account\n}\n\nconst accountSlice = createSlice({\n  name: 'account',\n  initialState: initialState(),\n  reducers: {\n    reset(state) {\n      const initState = initialState()\n      console.log('!!! reset account!', initState)\n      Object.assign(state, initState)\n    },\n    setAccAddr(state, action: PayloadAction<string>) {\n      state.accAddr = action.payload\n      // UserStorage.setAccount(action.payload)\n    },\n    setAccountInfo(state, action: PayloadAction<AccountInfo>) {\n      state.accAddr = action.payload.owner\n      state.accountId = action.payload.accountId\n      state.nonce = action.payload.nonce\n      state.publicKey = action.payload.publicKey\n\n      // UserStorage.setAccount(state.accAddr)\n      // UserStorage.setAccountId(state.accountId)\n      \n    },\n    setApikey(state, action: PayloadAction<string>) {\n      state.apiKey = action.payload\n      // UserStorage.setApikey(action.payload)\n    },\n    setAccountStatus(state, action: PayloadAction<AccountStatus>) {\n      state.status = action.payload\n    },\n    setEddsaKey(state, action: PayloadAction<any>) {\n      state.eddsaKey = action.payload\n      // UserStorage.setEddsakey(action.payload)\n    },\n    setConnectName(state, action: PayloadAction<ConnectorNames>) {\n      state.connectName = action.payload\n    },\n    setConnectNameTemp(state, action: PayloadAction<ConnectorNames>) {\n      state.connectNameTemp = action.payload\n    },\n    setIsContractAddress(state, action: PayloadAction<boolean>) {\n      state.isContractAddress = action.payload\n    },\n  },\n})\n\nexport const { reset, setAccAddr, setApikey, setConnectName, setConnectNameTemp, setAccountInfo, setAccountStatus, setEddsaKey, setIsContractAddress, } = accountSlice.actions\nexport default accountSlice\n","import { Provider } from 'react-redux'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nimport { createWeb3ReactRoot, Web3ReactProvider } from '@web3-react/core'\nimport store from 'stores'\n\nimport { getLibrary } from '@loopring-web/sdk/utils/web3_tools'\nimport { NetworkContextName } from '@loopring-web/sdk/defs/web3_defs'\n\nimport { getTheme, i18n, provider, ProviderComposer } from \"@loopring-web/component-lib/static-resource\"\nimport { ThemeProvider as MuThemeProvider } from '@material-ui/core'\nimport LocalizationProvider from '@material-ui/pickers/LocalizationProvider'\n\nimport MomentUtils from '@material-ui/lab/AdapterMoment'\n\nimport { ThemeProvider } from \"@emotion/react\"\n\nimport { I18nextProvider } from \"react-i18next\"\n\n\n\nconst Web3ProviderNetwork = createWeb3ReactRoot(NetworkContextName)\nconst providers = [\n    provider(LocalizationProvider as any, {dateAdapter: MomentUtils}),\n    provider(I18nextProvider as any, {i18n:i18n}),\n    provider(MuThemeProvider as any, {theme: getTheme('dark')}),\n    provider(ThemeProvider as any, {theme: getTheme('dark')}),\n    provider(Provider as any, {store}),\n]\n\nReactDOM.render(\n// @ts-ignore\n    <ProviderComposer providers={providers}>\n        <Web3ReactProvider getLibrary={getLibrary}>\n            <Web3ProviderNetwork getLibrary={getLibrary}>\n                <App/>\n            </Web3ProviderNetwork>\n        </Web3ReactProvider>\n    </ProviderComposer>,\n    document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\nif (process.env.NODE_ENV !== 'production') {\n    reportWebVitals(console.log)\n}\n","import { createAction } from '@reduxjs/toolkit'\n\n// fired once when the app reloads but before the app renders\n// allows any updates to be applied to store data loaded from localStorage\nexport const updateVersion = createAction<void>('global/updateVersion')\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit'\nimport { SystemStatus } from 'defs/common_defs'\n\nexport interface SystemInfo {\n  status: SystemStatus\n}\n\nconst initialState = {\n  status: SystemStatus.NORMAL, \n} as SystemInfo\n\nconst systemSlice = createSlice({\n  name: 'system',\n  initialState,\n  reducers: {\n    setSystemStatus(state, action: PayloadAction<any>) {\n      state.status = action.payload\n    },\n  },\n})\n\nexport const { setSystemStatus, } = systemSlice.actions\nexport default systemSlice\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit'\n\nconst now = () => new Date().getTime()\n\nexport interface SerializableTransactionReceipt {\n  to: string\n  from: string\n  contractAddress: string\n  transactionIndex: number\n  blockHash: string\n  transactionHash: string\n  blockNumber: number\n  status?: number\n}\n\nexport interface TransactionDetails {\n  hash: string\n  approval?: { tokenAddress: string; spender: string }\n  summary?: string\n  claim?: { recipient: string }\n  receipt?: SerializableTransactionReceipt\n  lastCheckedBlockNumber?: number\n  addedTime: number\n  confirmedTime?: number\n  from: string\n}\n\nexport interface TransactionState {\n  [chainId: number]: {\n    [txHash: string]: TransactionDetails\n  }\n}\n\nexport const initialState: TransactionState = {}\n\nconst transactionsSlice = createSlice({\n  name: 'transactions',\n  initialState,\n  reducers: {\n    reset(state) {\n      Object.assign(state, initialState)\n    },\n    addTransaction(state: TransactionState, action: PayloadAction<{\n      chainId: number, from: string,\n      hash: string, approval: any, summary: string, claim: any\n    }>) {\n      const { chainId, from, hash, approval, summary, claim} = action.payload\n      if (state[chainId]?.[hash]) {\n        throw Error('the existing TX can\\'t be added again')\n      }\n\n      const txs = state[chainId] ?? {}\n      txs[hash] = {\n        hash, \n        approval, \n        summary, \n        claim, \n        from,\n        addedTime: now(), \n      }\n      // state[chainId] = txs\n    },\n    clearAllTransactions(state: TransactionState, action: PayloadAction<number>) {\n      const chainId = action.payload\n      if (!state[chainId]) return\n      state[chainId] = {}\n    },\n    checkedTransaction(state: TransactionState, action: PayloadAction<{chainId: number,\n    hash: string, blockNumber: number}>) {\n      const { chainId, hash, blockNumber} = action.payload\n      const tx = state[chainId]?.[hash]\n      if (!tx) {\n        return\n      }\n      if (!tx.lastCheckedBlockNumber) {\n        tx.lastCheckedBlockNumber = blockNumber\n      } else {\n        tx.lastCheckedBlockNumber = Math.max(blockNumber, tx.lastCheckedBlockNumber)\n      }\n      // state[chainId][hash] = tx\n    },\n    finalizeTransaction(state: TransactionState, action: PayloadAction<{\n      hash: string, chainId: number, receipt: any\n    }>) {\n      const { chainId, hash, receipt } = action.payload\n      \n      const tx = state[chainId]?.[hash]\n      if (!tx) {\n        return\n      }\n      tx.receipt = receipt\n      tx.confirmedTime = now()\n    }\n  }\n}\n)\n\nexport const { reset, addTransaction, clearAllTransactions, checkedTransaction, finalizeTransaction, } = transactionsSlice.actions\nexport default transactionsSlice\n","import { configureStore, combineReducers, getDefaultMiddleware } from '@reduxjs/toolkit'\n\nimport { useDispatch } from 'react-redux'\nimport { save, load } from 'redux-localstorage-simple'\n\nimport createSagaMiddleware from 'redux-saga'\n\n// We'll use redux-logger just as an example of adding another middleware\nimport logger from 'redux-logger'\n\n// And use redux-batch as an example of adding enhancers\nimport { reduxBatch } from '@manaflair/redux-batch'\nimport { updateVersion } from './global/actions'\n\nimport accountSlice from './account/reducer'\nimport systemSlice from './system/reducer'\nimport tradingSlice from './trading/reducer'\nimport transactionlice from './transactions/reducer'\n\nimport { modalsSlice, settingsSlice } from '@loopring-web/component-lib';\n\nconst sagaMiddleware = createSagaMiddleware()\n\nconst reducer = combineReducers({\n  account: accountSlice.reducer,\n  settings: settingsSlice.reducer,\n  system: systemSlice.reducer,\n  trading: tradingSlice.reducer,\n  transactions: transactionlice.reducer,\n  modals: modalsSlice.reducer\n})\n\n//\n\nconst PERSISTED_KEYS: string[] = ['settings']\n\nconst store = configureStore({\n  reducer,\n  // middleware: (getDefaultMiddleware) => getDefaultMiddleware().concat(logger),\n  middleware: [...getDefaultMiddleware({ thunk: false }), save({ states: PERSISTED_KEYS }), sagaMiddleware, ],\n  // middleware: [...getDefaultMiddleware({ thunk: true }), ],\n  devTools: process.env.NODE_ENV !== 'production',\n  enhancers: [reduxBatch],\n  preloadedState: load({ states: PERSISTED_KEYS })\n})\n\nstore.dispatch(updateVersion())\n\n// The store has been created with these options:\n// - The slice reducers were automatically passed to combineReducers()\n// - redux-thunk and redux-logger were added as middleware\n// - The Redux DevTools Extension is disabled for production\n// - The middleware, batch, and devtools enhancers were composed together\n\nexport type AppDispatch = typeof store.dispatch\nexport const useAppDispatch = () => useDispatch<AppDispatch>()\n\nexport type RootState = ReturnType<typeof reducer>\n\nexport default store\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit'\n\nimport { ExchangeInfo, TokenInfo } from '@loopring-web/sdk/defs/exchange_defs'\n\nexport enum TradingInterval {\n  min1 = '1min',\n  min5 = '5min',\n  min15 = '15min',\n  min30 = '30min',\n  hr1 = '1hr',\n  hr2 = '2hr',\n  hr4 = '4hr',\n  hr12 = '12hr',\n  d1 = '1d',\n  w1 = '1w',\n}\n\nexport interface TradingInfo {\n  symbol: string\n  symbol_base: string\n  symbol_quote: string\n  interval: TradingInterval\n  markets: any\n  tokens: {[key: string]: [value: TokenInfo]}\n  exchangeInfo?: ExchangeInfo\n  wsApiKey: string\n}\n\nconst getBaseQuote = (symbol: string) => {\n  const ind = symbol.indexOf('-')\n  const symbol_base = symbol.substr(ind + 1)\n  const symbol_quote = symbol.substr(0, ind)\n  return {symbol_base, symbol_quote}\n}\n\nconst defaultSymbol = process.env.REACT_APP_TEST_SYMBOL ? process.env.REACT_APP_TEST_SYMBOL : 'LRC-USDT'\nconst defaultInterval = process.env.REACT_APP_TEST_INTERVAL ? process.env.REACT_APP_TEST_INTERVAL : TradingInterval.hr1\n\nconst { symbol_base, symbol_quote } = getBaseQuote(defaultSymbol)\n\nconst initialState = {\n  symbol: defaultSymbol,\n  symbol_base: symbol_base,\n  symbol_quote: symbol_quote,\n  interval: defaultInterval,\n  markets: [],\n  tokens: {},\n  refreshRate: 1000,\n  refreshRateSlow: 3000,\n  wsApiKey: '',\n} as TradingInfo\n\nconst tradingSlice = createSlice({\n  name: 'trading',\n  initialState,\n  reducers: {\n    changeSymbol(state, action: PayloadAction<any>) {\n      state.symbol = action.payload\n      const { symbol_base, symbol_quote } = getBaseQuote(state.symbol)\n      state.symbol_base = symbol_base\n      state.symbol_quote = symbol_quote\n    },\n    changeTradingInterval(state, action: PayloadAction<any>) {\n      state.interval = action.payload\n    },\n    setWsApiKey(state, action: PayloadAction<string>) {\n      state.wsApiKey = action.payload\n    },\n    setMarkets(state, action: PayloadAction<any>) {\n      state.markets = action.payload\n    },\n    setTokens(state, action: PayloadAction<{}>) {\n      state.tokens = action.payload\n    },\n    setExchangeInfo(state, action: PayloadAction<ExchangeInfo>) {\n      state.exchangeInfo = action.payload\n    },\n  },\n})\n\nexport const { changeSymbol, changeTradingInterval, setWsApiKey, setMarkets, setTokens, setExchangeInfo, } = tradingSlice.actions\nexport default tradingSlice\n","export enum Theme {\n    dark = 'dark',\n    light = 'light',\n}\n\nexport enum LangType {\n    en = 'en_US',\n    cn = 'zh_CN',\n}\n\nexport enum SystemStatus {\n    NORMAL,\n    ERROR,\n    UNKNOWN,\n}\n\nexport enum MODAL_TYPE {\n    UNKNOWN,\n    LOADING,\n    WALLET,\n}\n","import { useExchangeAPI } from '@loopring-web/sdk/hooks/common/useApi'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { useCustomDCEffect } from '@loopring-web/sdk/hooks/useCustomDCEffect'\n\n// import { useAuthNoKeyApiInstance, useAuthWsApiInstance, } from '@loopring-web/sdk/hooks/common/useApi'\n\nimport { RootState } from 'stores'\n\nimport { setMarkets, setExchangeInfo, setTokens, } from 'stores/trading/reducer'\n\nexport function useGetTradingInfo() {\n    const tradingInfo = useSelector((state: RootState) => state.trading)\n    return {\n        tradingInfo,\n        exchangeInfo: tradingInfo.exchangeInfo,\n        /*\n        markets: tradingInfo.markets,\n        tokens: tradingInfo.tokens,\n        */\n    }\n}\n\nexport function useUpdateExchangeMarkets() {\n    const dispatch = useDispatch()\n    const api = useExchangeAPI()\n\n    useCustomDCEffect(() => {\n\n        if (!api) {\n            return\n        }\n\n        api.getMarkets().then((response: any) => {\n    \n            dispatch(setMarkets(response))\n    \n        }, (reject: any) => {\n            console.log(reject)\n        })\n\n    }, [api])\n\n}\n\nexport function useUpdateExchangeInfo() {\n\n    const dispatch = useDispatch()\n    const api = useExchangeAPI()\n\n    useCustomDCEffect(() => {\n\n        if (!api) {\n            return\n        }\n\n        api.getExchangeInfo().then((response: any) => {\n            dispatch(setExchangeInfo(response.exchangeInfo))\n        }, (reject: any) => {\n            console.log(reject)\n        })\n\n    }, [api])\n\n}\n\nexport function useUpdateTokens() {\n\n    const dispatch = useDispatch()\n    const api = useExchangeAPI()\n\n    useCustomDCEffect(() => {\n\n        if (!api) {\n            return\n        }\n\n        api.getTokens().then((response: any) => {\n            console.log('useUpdateTokens response:', response)\n            dispatch(setTokens(response.tokenSymbolMap))\n        }, (reject: any) => {\n            console.log(reject)\n        })\n\n    }, [api])\n\n}\n","import { debounce } from 'lodash'\nimport React, { useEffect } from 'react'\nimport { UserStorage } from 'storage'\n\nimport { useCheckAccStatus } from 'stores/account/hook'\n\nimport { useUpdateExchangeInfo, useUpdateExchangeMarkets, useUpdateTokens, } from 'stores/trading/hook'\n\n// import { ModalPanel } from '@loopring-web/component-lib'\n\nenum WindowEvent {\n  Click = 'click',\n  Scroll = 'scroll',\n  Mouseover = 'mouseover',\n}\n\nconst events = [WindowEvent.Click, WindowEvent.Scroll]\n\nconst forceReset = debounce(() => {UserStorage.checkTimeout(true)}, 100)\n\nexport const GlobalProvider = ({ children }: { children: React.ReactNode }) => {\n\n  useUpdateExchangeInfo()\n\n  // useUpdateExchangeMarkets()\n  // useUpdateTokens()\n\n  useCheckAccStatus()\n\n  useEffect(() => {\n\n    events.forEach((event: string) => {\n      document.addEventListener(event, forceReset)\n    })\n\n    return () => {\n\n      events.forEach((event: string) => {\n        document.removeEventListener(event, forceReset)\n      })\n    }\n\n  }, [])\n\n  return (\n    <React.Fragment>\n      { children}\n    </React.Fragment>\n  )\n\n}\n\n","import React, { useState, useEffect } from 'react'\nimport styled from '@emotion/styled/macro'\nimport { useTranslation } from 'react-i18next'\n\nimport { useWeb3React } from '@web3-react/core'\n\nimport { network } from '@loopring-web/sdk/networks/web3_connectors'\n\nimport { useEagerConnect, useInactiveListener } from '@loopring-web/sdk/hooks/web3/useWeb3'\nimport { reset, setAccountStatus } from 'stores/account/reducer'\n\nimport { ChainId, NetworkContextName } from '@loopring-web/sdk/defs/web3_defs'\n\n// import Loader from 'components/modals/Loader'\nimport { useDispatch } from 'react-redux'\nimport { AccountStatus } from 'state_machine/account_machine_spec'\n\nconst MessageWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  height: 20rem;\n`\n\nconst Message = styled.h2`\n  color: ${({ theme }) => theme.colorBase.error};\n`\n\nexport function Web3ReactManager({ children }: { children: JSX.Element }) {\n  const { t } = useTranslation()\n  const { active } = useWeb3React()\n  const { active: networkActive, error: networkError, activate: activateNetwork } = useWeb3React(NetworkContextName)\n\n  // try to eagerly connect to an injected provider, if it exists and has granted access already\n  const triedEager = useEagerConnect()\n\n  // after eagerly trying injected, if the network connect ever isn't active or in an error state, activate itd\n  useEffect(() => {\n    if (triedEager && !networkActive && !networkError && !active) {\n      activateNetwork(network)\n    }\n  }, [triedEager, networkActive, networkError, activateNetwork, active])\n\n  // when there's no account connected, react to logins (broadly speaking) on the injected provider, if it exists\n  \n  const dispatch = useDispatch()\n\n  const onReConnectInjected = () => {\n    console.log('onReConnectInjected')\n    dispatch(reset())\n    dispatch(setAccountStatus(AccountStatus.UNCONNNECTED))\n  }\n  \n  useInactiveListener(onReConnectInjected, !triedEager)\n\n  // handle delayed loader state\n  const [showLoader, setShowLoader] = useState(false)\n  useEffect(() => {\n    const timeout = setTimeout(() => {\n      setShowLoader(true)\n    }, 600)\n\n    return () => {\n      clearTimeout(timeout)\n    }\n  }, [])\n\n  // on page load, do nothing until we've tried to connect to the injected connector\n  if (!triedEager) {\n    return null\n  }\n\n  // if the account context isn't active, and there's an error on the network context, it's an irrecoverable error\n  if (!active && networkError) {\n    return (\n      <MessageWrapper>\n        <Message>{t('unknownError')}</Message>\n      </MessageWrapper>\n    )\n  }\n\n  // if neither context is active, spin\n  if (!active && !networkActive) {\n    return showLoader ? (\n      <MessageWrapper>\n        {/*<Loader />*/}\n      </MessageWrapper>\n    ) : null\n  }\n\n  return children\n}\n","import React from 'react'\n\nexport const DevWrapper = ({ children }: { children: React.ReactNode }) => {\n\n  return (\n    <React.Fragment>\n      {\n        process.env.NODE_ENV !== 'production' ? (\n          <>\n          {children}\n          </>\n        ) : null\n      }\n    </React.Fragment>\n  )\n\n}\n\n","export enum AccountStatus {\n    UNCONNNECTED = 'UNCONNNECTED',\n    CONNECTED = 'CONNECTED',\n    NOACCOUNT = 'NOACCOUNT',\n    DEPOSITING = 'DEPOSITING',\n    DEPOSIT_TO_CONFIREM = 'DEPOSIT_TO_CONFIREM',\n    UNACTIVATED = 'UNACTIVATED',\n    ARPROVING = 'ARPROVING',\n    APPROV_TO_CONFIRM = 'APPROV_TO_CONFIRM',\n    LOCKED = 'LOCKED',\n    ACTIVATED = 'ACTIVATED',\n}\n\nexport enum StatusChangeEvent {\n    Reset = 'Reset',\n    Connecting = 'Connecting',\n    HasPubkey = 'HasPubkey',\n    HasNoPubkey = 'HasNoPubkey',\n    ErrorResponse = 'ErrorResponse',\n    FinishDeposit = 'FinishDeposit',\n    DepositConfirmed = 'DepositConfirmed',\n    IsSmartWallet = 'IsSmartWallet',\n    ApproveSubmit = 'ApproveSubmit',\n    ApproveConfirmed = 'ApproveConfirmed',\n    Unlock = 'Unlock',\n    Lock = 'Lock',\n}\n\nexport const AccountMachineSpec = (initialState: AccountStatus = AccountStatus.UNCONNNECTED) => \n{\n    return {\n        initialState: initialState,\n        states: {\n            UNCONNNECTED: {\n                Connecting: AccountStatus.CONNECTED,\n                Reset: AccountStatus.UNCONNNECTED,\n            },\n            CONNECTED: {\n                HasPubkey: AccountStatus.LOCKED,\n                HasNoPubkey: AccountStatus.UNACTIVATED,\n                ErrorResponse: AccountStatus.NOACCOUNT,\n                Reset: AccountStatus.UNCONNNECTED,\n            },\n            NOACCOUNT: {\n                ErrorResponse: AccountStatus.NOACCOUNT,\n                Reset: AccountStatus.UNCONNNECTED,\n            },\n            DEPOSITING: {\n                FinishDeposit: AccountStatus.DEPOSIT_TO_CONFIREM,\n                Reset: AccountStatus.UNCONNNECTED,\n            },\n            DEPOSIT_TO_CONFIREM: {\n                HasPubkey: AccountStatus.ACTIVATED,\n                HasNoPubkey: AccountStatus.DEPOSIT_TO_CONFIREM,\n                ErrorResponse: AccountStatus.DEPOSIT_TO_CONFIREM,\n                Reset: AccountStatus.UNCONNNECTED,\n            },\n            UNACTIVATED: {\n                IsSmartWallet: AccountStatus.ARPROVING,\n                Reset: AccountStatus.UNCONNNECTED,\n            },\n            ARPROVING: {\n                ApproveSubmit: AccountStatus.APPROV_TO_CONFIRM,\n                Reset: AccountStatus.UNCONNNECTED,\n            },\n            APPROV_TO_CONFIRM: {\n                ApproveConfirmed: AccountStatus.ACTIVATED,\n                Reset: AccountStatus.UNCONNNECTED,\n            },\n            LOCKED: {\n                Unlock: AccountStatus.ACTIVATED,\n                Reset: AccountStatus.UNCONNNECTED,\n            },\n            ACTIVATED: {\n                Lock: AccountStatus.LOCKED,\n                Reset: AccountStatus.UNCONNNECTED,\n            },\n        },\n    }\n}\n","import { ConnectorNames } from '@loopring-web/sdk/defs/web3_defs'\n\nimport {\n    injected,\n    network,\n    walletconnect,\n    walletlink,\n    ledger,\n    trezor,\n    authereum,\n} from '@loopring-web/sdk/networks/web3_connectors'\n\nexport const connectorsByName: { [connectorName in ConnectorNames]: any } = {\n    [ConnectorNames.Unknown]: undefined,\n    [ConnectorNames.Injected]: injected,\n    [ConnectorNames.Network]: network,\n    [ConnectorNames.WalletConnect]: walletconnect,\n    [ConnectorNames.WalletLink]: walletlink,\n    [ConnectorNames.Ledger]: ledger,\n    [ConnectorNames.Trezor]: trezor,\n    [ConnectorNames.Authereum]: authereum,\n}\n","import { useState, useCallback, useMemo, useRef, } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\n\nimport { useCustomDCEffect } from '@loopring-web/sdk/hooks/useCustomDCEffect'\n\nimport { useGetTradingInfo } from 'stores/trading/hook'\nimport { useActiveWeb3React, } from '@loopring-web/sdk/hooks/web3/useWeb3'\n\nimport { Lv2Account, } from 'defs/account_defs'\n\nimport { AccountStatus, StatusChangeEvent } from 'state_machine/account_machine_spec'\n\nimport * as sign_tools from '@loopring-web/sdk/api/sign/sign_tools'\n\nimport { connectorsByName } from 'defs/web3_defs'\n\nimport { ConnectorNames, } from '@loopring-web/sdk/defs/web3_defs'\n\nimport { RootState } from 'stores'\n\nimport {\n    reset, setAccountStatus, setConnectName,\n    setConnectNameTemp, setAccountInfo, setEddsaKey, setApikey, setAccAddr,\n} from 'stores/account/reducer'\n\nimport { AccountMachineSpec, } from 'state_machine/account_machine_spec'\n\nimport { buildMachine } from 'state_machine/machine_builder'\n\nimport voca from 'voca'\nimport { usePrevious } from 'react-use'\n\nimport Web3 from 'web3'\n\nimport { ExchangeAPI, UserAPI, } from '@loopring-web/sdk/api'\nimport { useExchangeAPI, useUserAPI } from '@loopring-web/sdk/hooks/common/useApi'\n\nimport { toHex, toBig, } from '@loopring-web/sdk/api/common/formatter'\n\nimport { dumpError400 } from '@loopring-web/sdk/utils/network_tools'\nimport { UserStorage } from 'storage'\n\nimport store from 'stores'\n\nexport function useWeb3Account() {\n\n    const {\n        connector,\n        library,\n        account,\n        chainId,\n        active,\n        error,\n    } = useActiveWeb3React()\n\n    const isConnected: boolean = active && !voca.isBlank(account as string)\n\n    return {\n        account,\n        connector,\n        library,\n        chainId,\n        active,\n        isConnected,\n        error,\n    }\n\n}\n\nexport function useAccount() {\n\n    const account: Lv2Account = useSelector((state: RootState) => state.account)\n\n    const isNoAccount = () => {\n        return account.status === AccountStatus.NOACCOUNT\n    }\n\n    const isActivated = () => {\n        return account.status === AccountStatus.ACTIVATED\n    }\n\n    return {\n        account,\n        isNoAccount,\n        isActivated,\n        apiKey: account.apiKey,\n        eddsaKey: account.eddsaKey,\n        accountId: account.accountId,\n    }\n}\n\nexport function useStateMachine() {\n    const dispatch = useDispatch()\n\n    const machine = buildMachine(AccountMachineSpec())\n\n    const sendEvent = useCallback((account: Lv2Account, event: StatusChangeEvent) => {\n        const nextState = machine(account.status, event)\n        if (nextState) {\n            dispatch(setAccountStatus(nextState))\n        }\n    }, [machine, dispatch])\n\n    return {\n        sendEvent,\n    }\n}\n\nexport function useConnect() {\n\n    const {\n        activate,\n    } = useActiveWeb3React()\n\n    const { sendEvent } = useStateMachine()\n\n    const dispatch = useDispatch()\n\n    const [activatingConnector, setActivatingConnector] = useState<any>()\n\n    const connect = useCallback((item_name: ConnectorNames, isSwitch: boolean = false) => {\n        const newConnector: any = connectorsByName[item_name]\n        setActivatingConnector(newConnector)\n        activate(newConnector)\n        dispatch(setConnectNameTemp(item_name))\n\n        if (isSwitch) {\n            console.log('try Connecting... isSwitch Reset')\n            sendEvent(store.getState().account, StatusChangeEvent.Reset)\n        }\n\n        sendEvent(store.getState().account, StatusChangeEvent.Connecting)\n\n        console.log('try Connecting...')\n    }, [activate, dispatch, sendEvent])\n\n    return {\n        connect,\n        activatingConnector,\n    }\n\n}\n\nexport function useDisconnect() {\n\n    const {\n        deactivate,\n    } = useActiveWeb3React()\n\n    const dispatch = useDispatch()\n\n    const disconnect = useCallback(() => {\n        deactivate()\n        dispatch(reset())\n    }, [deactivate, dispatch])\n\n    return {\n        disconnect,\n    }\n\n}\n\nexport function useUnlock() {\n\n    const dispatch = useDispatch()\n\n    const exchangeApi: any = useExchangeAPI()\n\n    const userApi: any = useUserAPI()\n\n    const { exchangeInfo } = useGetTradingInfo()\n\n    const { connector, } = useWeb3Account()\n\n    const { sendEvent } = useStateMachine()\n\n    const lock = useCallback(async (account: Lv2Account) => {\n        console.log('useCallback lock:', account.status)\n        sendEvent(account, StatusChangeEvent.Lock)\n    }, [sendEvent])\n\n    const unlock = useCallback(async (account: Lv2Account) => {\n\n        if (!userApi || !exchangeApi || !connector || !account.accountId || !exchangeInfo?.exchangeAddress\n            || account.status !== AccountStatus.LOCKED) {\n            console.log('accountId:', account.accountId)\n            console.log('exchangeAddress:', exchangeInfo)\n            console.log('enter !! account.status:', account.status)\n            return\n        }\n\n        console.log('useUnlock useCallback:', account.status)\n\n        if (account.status !== AccountStatus.LOCKED) {\n            throw Error('unexpected status:' + account.status)\n        }\n\n        let event = undefined\n        let sk = undefined\n        let apikey: any = undefined\n\n        try {\n            const provider = await connector.getProvider()\n            const web3 = new Web3(provider as any)\n            console.log('useUnlock eddsaKey:', account.eddsaKey)\n\n            if (!account.eddsaKey) {\n                const eddsakey = await sign_tools\n                    .generateKeyPair(\n                        web3,\n                        account.accAddr,\n                        exchangeInfo?.exchangeAddress as string,\n                        account.nonce - 1,\n                        account.connectName,\n                    )\n                sk = toHex(toBig(eddsakey.keyPair.secretKey))\n\n            } else {\n                sk = account.eddsaKey\n            }\n\n            apikey = await userApi.getUserApiKey({\n                accountId: account.accountId\n            }, sk)\n\n            console.log('useUnlock apikey:', apikey)\n\n            event = StatusChangeEvent.Unlock\n\n        } catch (reason) {\n            event = StatusChangeEvent.Reset\n        }\n\n        if (sk) {\n            dispatch(setEddsaKey(sk))\n        }\n\n        if (apikey?.apiKey) {\n            dispatch(setApikey(apikey.apiKey))\n        }\n\n        console.log('next event:', event)\n        if (event) {\n            sendEvent(account, event)\n        }\n\n    }\n        , [dispatch, sendEvent, exchangeApi, userApi, connector, exchangeInfo])\n\n    return {\n        lock,\n        unlock,\n    }\n}\n\nasync function checkAccountAvailableAsync(exchangeApi: ExchangeAPI, userApi: UserAPI, account: Lv2Account, dispatch: any, sendEvent: any, connector: any, exchangeAddress: string) {\n\n    let accInfo = undefined\n    let event = undefined\n    let sk = undefined\n    let code = undefined\n    let apikey: any = undefined\n\n    try {\n        accInfo = await exchangeApi.getAccount({\n            owner: account.accAddr\n        })\n        if (accInfo.publicKey && accInfo.publicKey.x && accInfo.publicKey.y) {\n            if (account.accountId !== accInfo.accountId) {\n                const provider = await connector.getProvider()\n                const web3 = new Web3(provider as any)\n                try {\n                    code = await web3.eth.getCode(account.accAddr)\n                    // console.log('!!!!!! about to generateKeyPair!!!!!!!!!!!')\n                    try {\n                        const eddsakey = await sign_tools\n                            .generateKeyPair(\n                                web3,\n                                account.accAddr,\n                                exchangeAddress,\n                                accInfo.nonce - 1,\n                                account.connectName,\n                            )\n                        sk = toHex(toBig(eddsakey.keyPair.secretKey))\n                        const px = toHex(toBig(eddsakey.keyPair.publicKeyX))\n                        const py = toHex(toBig(eddsakey.keyPair.publicKeyY))\n\n                        try {\n                            apikey = await userApi.getUserApiKey({\n                                accountId: accInfo.accountId\n                            }, sk)\n                            event = (StatusChangeEvent.HasPubkey)\n                        } catch (reason) {\n                            dumpError400(reason)\n                            event = (StatusChangeEvent.ErrorResponse)\n                        }\n                    } catch (reason) {\n                        dumpError400(reason)\n                        event = (StatusChangeEvent.ErrorResponse)\n                    }\n\n                } catch (reason) {\n                    dumpError400(reason)\n                    event = (StatusChangeEvent.ErrorResponse)\n                }\n\n            } else {\n                console.log('already has accountId!')\n            }\n        } else {\n            console.log('2 has id but no pubkey currStatus:', account.status)\n            event = (StatusChangeEvent.HasNoPubkey)\n        }\n    } catch (reason) {\n        // 3 has none of above\n        console.log('2 has id but no pubkey currStatus:', account.status)\n        dumpError400(reason)\n        // check deposit tx (local and ethereum)\n        event = (StatusChangeEvent.ErrorResponse)\n    }\n\n    if (accInfo && accInfo.owner !== account.accAddr) {\n        dispatch(setAccountInfo(accInfo))\n    }\n\n    if (sk) {\n        dispatch(setEddsaKey(sk))\n    }\n\n    if (apikey) {\n        console.log('---------> apikey:', apikey)\n        dispatch(setApikey(apikey.apiKey))\n    }\n\n    if (event) {\n        sendEvent(event)\n    }\n\n}\n\nexport function useCheckAccStatus() {\n\n    const dispatch = useDispatch()\n\n    const { account } = useAccount()\n\n    const { sendEvent } = useStateMachine()\n\n    const exchangeApi: ExchangeAPI = useExchangeAPI()\n\n    const userApi: UserAPI = useUserAPI()\n\n    const { account: web3Account, active, isConnected, chainId, connector, } = useWeb3Account()\n\n    const lv1Acc = web3Account as string\n\n    const prevChainId = usePrevious(chainId)\n    const prevWeb3Account = usePrevious(web3Account)\n\n    // console.log('prevChainId:', prevChainId, ' chainId:', chainId)\n    // console.log('prevWeb3Account:', prevWeb3Account, ' web3Account:', web3Account)\n\n    // console.log(exchangeApi, userApi, account, 'prevChainId:', prevChainId, 'chainId:', chainId, 'web3Account:', web3Account)\n\n    const { exchangeInfo } = useGetTradingInfo()\n\n    useCustomDCEffect(async () => {\n\n        const cleanUp = () => {\n            let handler = UserStorage.getHandler()\n            if (account.status !== AccountStatus.ACTIVATED && handler) {\n                clearInterval(handler)\n            }\n        }\n\n        async function checkStatus() {\n\n            if (!account || !lv1Acc || !exchangeApi || !userApi || !connector || !exchangeInfo?.exchangeAddress) {\n                console.log('checkStatus return!!!!!!')\n                return\n            }\n\n            if (((prevChainId && chainId && prevChainId !== chainId)\n                || (prevWeb3Account && web3Account && prevWeb3Account !== web3Account))\n                && account.status !== AccountStatus.UNCONNNECTED) {\n\n                console.log('checkStatus try to resetFunc')\n                dispatch(reset())\n                sendEvent(account, StatusChangeEvent.Reset)\n                return\n            }\n\n            cleanUp()\n\n            switch (account.status) {\n                case AccountStatus.UNCONNNECTED:\n                    console.log('---> render UNCONNNECTED active:', active, ' isConnected:', isConnected)\n\n                    if (isConnected) {\n                        dispatch(setConnectNameTemp(ConnectorNames.Injected))\n                        sendEvent(account, StatusChangeEvent.Connecting)\n                    }\n\n                    break\n\n                case AccountStatus.CONNECTED:\n                    //check session or local storage\n\n                    console.log('---> render CONNECTED account:', account)\n\n                    try {\n\n                        const acc = await exchangeApi.getAccount({ owner: lv1Acc })\n\n                        // current acc is local acc info\n                        if (account.accAddr && account.eddsaKey && acc.owner === account.accAddr) {\n                            console.log('cur Eddsakey:', account.eddsaKey)\n                        } else {\n                            console.log('got a new address:', acc)\n                            // got a new address\n                            dispatch(setAccountInfo(acc))\n                            // dispatch(setEddsaKey(''))\n                        }\n\n                        if (account?.connectName !== account?.connectNameTemp) {\n                            dispatch(setConnectName(account.connectNameTemp))\n                        }\n\n                        sendEvent(account, StatusChangeEvent.HasPubkey)\n\n                    } catch (reason) {\n                        dumpError400(reason)\n                        if (lv1Acc) {\n                            dispatch(setAccAddr(lv1Acc))\n                        }\n                        if (reason.response.data.resultInfo.code === 101002) {\n                            sendEvent(account, StatusChangeEvent.ErrorResponse)\n                        }\n                    }\n\n                    break\n\n                case AccountStatus.NOACCOUNT:\n                    break\n\n                case AccountStatus.DEPOSITING:\n                    // TODO sub contract event, check deposit.\n                    const depositFinished = true // TODO\n                    if (depositFinished) {\n                        console.log('depositFinished currStatus:', account.status)\n                        sendEvent(account, StatusChangeEvent.FinishDeposit)\n                    }\n                    break\n\n                case AccountStatus.DEPOSIT_TO_CONFIREM:\n                    // getAccount every 10s to check\n                    break\n\n                case AccountStatus.UNACTIVATED:\n                    const isSmartWallet = false // TODO\n                    if (isSmartWallet) {\n                        // TODO approve hash,\n                        console.log('approve hash, currStatus:', account.status)\n                        sendEvent(account, StatusChangeEvent.IsSmartWallet)\n                    } else {\n                        console.log('approve hash no smartwallet, account.status:', account.status)\n                    }\n                    break\n\n                case AccountStatus.ARPROVING:\n                    // TODO sub contract event, check approving.\n                    const approved = false // TODO\n                    if (approved) {\n                        console.log('sub contract event, check approving. approved! status:', account.status)\n                        sendEvent(account, StatusChangeEvent.ApproveSubmit)\n                    }\n                    break\n\n                case AccountStatus.APPROV_TO_CONFIRM:\n                    const approveConfirmed = false // TODO\n                    if (approveConfirmed) {\n                        console.log('approveConfirmed status:', account.status)\n                        sendEvent(account, StatusChangeEvent.ApproveConfirmed)\n                    }\n                    break\n\n                case AccountStatus.LOCKED:\n                    break\n\n                case AccountStatus.ACTIVATED:\n                    UserStorage.checkTimeout(true)\n                    const handler = setInterval(() => {\n                        const isTimeOut = UserStorage.checkTimeout()\n                        if (account.status === AccountStatus.ACTIVATED && isTimeOut) {\n                            clearInterval(handler)\n                            sendEvent(account, StatusChangeEvent.Lock)\n                        }\n                    }, 1000)\n                    UserStorage.setHandler(handler)\n                    break\n\n                default:\n                    break\n            }\n\n\n\n        }\n\n        checkStatus()\n\n        return () => {\n            cleanUp()\n        }\n\n    }, [exchangeApi, userApi, account, prevChainId, chainId, lv1Acc, dispatch, connector, exchangeInfo?.exchangeAddress,])\n\n}\n","export const buildMachine = <S, E>(spec: any) => (currentState: S, event: E) => {\n    // We get all possible transitions for the current State\n    const stateTransitions = spec.states[currentState]\n\n    // No transitions? Error!\n    if (stateTransitions === undefined) {\n        throw new Error(`No transitions defined for ${currentState}`)\n    }\n\n    // We try to transition to the next state\n    const nextState = stateTransitions[event]\n\n    // No next state? Error!\n    if (nextState === undefined) {\n        throw new Error(\n            `Unknown transition for event ${event} in state ${currentState}`\n        )\n    }\n\n    console.log('got nextState:', nextState)\n\n    // We return the new state\n    return nextState\n}\n","import React, { useCallback } from 'react'\n\nimport { useTheme } from '@emotion/react'\n\nimport { useTranslation } from 'react-i18next'\n\nimport {\n    gatewayList as DefaultGatewayList,\n    headerMenuData, HeaderMenuTabStatus,\n    headerToolBarData, HeadMenuTabKey,\n    ButtonComponentsMap,\n    WalletStatus,\n    GatewayItem, NavListIndex, HideIcon, ViewIcon,\n} from '@loopring-web/component-lib/src/static-resource'\n\nimport { useAccount, useDisconnect, useUnlock, useConnect, } from 'stores/account/hook'\n\nimport { getShortAddr } from 'utils/web3_tools'\n\nimport { AccountStatus } from 'state_machine/account_machine_spec'\n\nimport { useCustomDCEffect } from '@loopring-web/sdk/hooks/useCustomDCEffect'\n\nimport { Theme, } from 'defs/common_defs'\n\nimport { Button, useSettings } from '@loopring-web/component-lib'\n\nimport store from 'stores'\n\nimport { ConnectorNames } from '@loopring-web/sdk/defs/web3_defs'\nimport { IconButton, Link } from '@material-ui/core';\nimport { AccountInfoProps } from '@loopring-web/component-lib/components/block';\nimport { ButtonProps } from '@loopring-web/component-lib/components/basic-lib/index';\nimport { useEtherscan } from '@loopring-web/sdk/hooks/web3/useWeb3'\n\nexport const useHeader = () => {\n\n    const [open, setOpen] = React.useState(false)\n\n    const forceUpdate = React.useReducer((bool) => !bool, false)[1]\n\n    const settings = useSettings()\n\n    const { account } = useAccount()\n\n    const { lock, unlock } = useUnlock()\n\n    const { disconnect } = useDisconnect()\n\n    const { connect } = useConnect()\n\n    const { etherscanUrl } = useEtherscan()\n\n    const gatewayList: GatewayItem[] = [\n        {\n            ...DefaultGatewayList[0],\n            handleSelect: () => {\n                console.log('try to connect to ', ConnectorNames.Injected)\n                connect(ConnectorNames.Injected, true)\n                setOpen(false)\n            }\n        },\n        /*\n        {\n            key: ConnectorNames.WalletConnect,\n            imgSrc: '',\n            handleSelect: () => {\n                connect(ConnectorNames.WalletConnect)\n                setOpen(false)\n            }\n        },\n        {\n            key: ConnectorNames.Ledger,\n            imgSrc: '',\n            handleSelect: () => {\n                connect(ConnectorNames.Ledger)\n                setOpen(false)\n            }\n        },\n        {\n            key: ConnectorNames.Trezor,\n            imgSrc: '',\n            handleSelect: () => {\n                connect(ConnectorNames.Trezor)\n                setOpen(false)\n            }\n        },\n        */\n    ]\n\n    const [accountInfoProps, setAccountInfoProps] = React.useState<undefined|AccountInfoProps>(undefined);\n\n    const onModeChange = () => {\n        console.log('onModeChange')\n        if (settings.themeMode === Theme.dark) {\n            settings.setThemeWrapper(Theme.light)\n        } else {\n            settings.setThemeWrapper(Theme.dark)\n        }\n    }\n\n    const { i18n } = useTranslation()\n\n    const theme: any = useTheme()\n\n    const onNotification = React.useCallback(async () => {\n        console.log('onNotification click')\n    }, [])\n\n    const onWalletBtnConnent = React.useCallback(async () => {\n        console.log('onWalletBtnConnent click')\n        const acc = store.getState().account\n        switch (acc.status) {\n            case AccountStatus.UNCONNNECTED:\n                setOpen(true)\n                break\n            case AccountStatus.LOCKED:\n                console.log('onWalletBtnConnent try to unlock')\n                await unlock(acc)\n                break\n            case AccountStatus.ACTIVATED:\n                console.log('onWalletBtnConnent try to lock')\n                await lock(acc)\n                break\n\n            default:\n                break\n        }\n    }, [setOpen, lock, unlock])\n\n    const onThemeBtnClick = React.useCallback(async () => {\n        console.log('onThemeBtnClick click')\n    }, [])\n\n    const onLangBtnClick = (lang: any) => {\n        i18n.changeLanguage(lang)\n    }\n    const [showAccountInfo, setShowAccountInfo] = React.useState(account?.accAddr ? true : false)\n    const [advanceOpen,setAdvanceOpen] = React.useState(false);\n\n    console.log('account111: ', account)\n    console.log('showAccountInfo: ', showAccountInfo)\n\n    const handleViewAccountInfo =  React.useCallback((_event: React.MouseEvent) => {\n        console.log('handleViewAccountInfo: ', showAccountInfo)\n        if (showAccountInfo) {\n            // headerMenuData[ NavListIndex.layer2 ].iconBtn.view = false;\n            setShowAccountInfo(false);\n        } else {\n            // headerMenuData[ NavListIndex.layer2 ].iconBtn.view = true;\n            setShowAccountInfo(true);\n        }\n    },[setShowAccountInfo, showAccountInfo])\n\n    const {t}  = useTranslation(['layout']);\n\n    //init componment\n    useCustomDCEffect(() => {\n        headerToolBarData[ButtonComponentsMap.Download] = {\n            ...headerToolBarData[ButtonComponentsMap.Download],\n            url:'https://apps.apple.com/us/app/loopring-smart-wallet/id1550921126',\n            title:t('labelDownloadAppTitle'),\n            description:<Link href='https://apps.apple.com/us/app/loopring-smart-wallet/id1550921126'>{t('labelDownloadBtn')}</Link>\n        }\n\n        headerToolBarData[ButtonComponentsMap.WalletConnect] = {\n            ...headerToolBarData[ButtonComponentsMap.WalletConnect],\n            handleClick: onWalletBtnConnent,\n        }\n\n        // headerToolBarData[ButtonComponentsMap.Notification] = { ...headerToolBarData[ButtonComponentsMap.Theme], themeMode: theme.mode, handleClick: onNotification }\n        // headerToolBarData.update(ButtonComponentsMap.WalletConnect,value=>{\n        //   return {...value, handleClick:onWalletBtnConnent}});\n        headerToolBarData[ButtonComponentsMap.Theme] = { ...headerToolBarData[ButtonComponentsMap.Theme], themeMode: theme.mode, handleClick: onThemeBtnClick }\n        // headerToolBarData.update(ButtonComponentsMap.Theme,value=>{\n        //   return {...value, themeMode:theme.mode, handleClick:onThemeBtnClick}});\n        headerToolBarData[ButtonComponentsMap.Language] = { ...headerToolBarData[ButtonComponentsMap.Language], language: i18n.language, handleChange: onLangBtnClick }\n        // headerToolBarData.update(ButtonComponentsMap.Language,value=>{\n        //  return  {...value, language:i18n.language, handleClick:onThemeBtnClick}});\n    }, [theme, i18n, onWalletBtnConnent, onThemeBtnClick, onLangBtnClick, onNotification, t]);\n\n    useCustomDCEffect(() => {\n\n        if (!account) {\n            console.log('account'+account+'* exit')\n            setAccountInfoProps(undefined)\n            return\n        }\n\n        const { status } = account\n\n        const addr = getShortAddr(account?.accAddr)\n\n        console.log('account:*', account, '*')\n        console.log('addr:*', addr, '*')\n        if((addr && accountInfoProps && accountInfoProps.address !== addr) || addr ){\n            //TODO getAccount detail info\n            setAccountInfoProps({\n                address: addr,\n                level: 'VIP 1',\n                ethLink: etherscanUrl + account?.accAddr,\n                //TODO: changed by account status\n                mainBtn: <Button variant={'contained'} size={'small'} color={'primary'} onClick={e => setAdvanceOpen(true)}>Advance Setting</Button>\n            })\n        }else if(addr) {\n            setAccountInfoProps(undefined)\n        }\n\n        const updateHeaderMenuWhenHasAccountInfo =  ()=>{\n            headerMenuData[HeadMenuTabKey.Layer2] = {\n                ...headerMenuData[HeadMenuTabKey.Layer2],\n                extender : <IconButton disabled={!account}\n                                       onClick={handleViewAccountInfo}\n                                       aria-label={t('labelShowAccountInfo')} color=\"primary\">\n                    {showAccountInfo ? <HideIcon/> : <ViewIcon/>}</IconButton>,\n                status: HeaderMenuTabStatus.default\n            }\n            // setShowAccountInfo(true);\n        }\n        switch (status) {\n            case AccountStatus.UNCONNNECTED:\n                headerToolBarData[ButtonComponentsMap.WalletConnect] = {\n                    ...headerToolBarData[ButtonComponentsMap.WalletConnect],\n                    label: 'Connect Wallet',\n                    status: WalletStatus.default\n                }\n                headerMenuData[HeadMenuTabKey.Layer2] = {\n                    //TODO:  HeaderMenuTabStatus.hidden\n                    ...headerMenuData[HeadMenuTabKey.Layer2], status: HeaderMenuTabStatus.hidden\n                }\n                break\n            case AccountStatus.LOCKED:\n                headerToolBarData[ButtonComponentsMap.WalletConnect] = {\n                    ...headerToolBarData[ButtonComponentsMap.WalletConnect],\n                    label: addr,\n                    status: WalletStatus.connect\n                };\n\n                updateHeaderMenuWhenHasAccountInfo();\n                break\n            case AccountStatus.ACTIVATED:\n                headerToolBarData[ButtonComponentsMap.WalletConnect] = {\n                    ...headerToolBarData[ButtonComponentsMap.WalletConnect],\n                    label: addr,\n                    status: WalletStatus.unlock\n                }\n\n                updateHeaderMenuWhenHasAccountInfo();\n                break\n            case AccountStatus.UNACTIVATED:\n            case AccountStatus.NOACCOUNT:\n                headerToolBarData[ButtonComponentsMap.WalletConnect] = {\n                    ...headerToolBarData[ButtonComponentsMap.WalletConnect],\n                    // TODO got cache address if no show Connect Wallet\n                    label: addr,\n                    status: WalletStatus.noAccount\n                }\n\n                updateHeaderMenuWhenHasAccountInfo();\n                break\n            case AccountStatus.DEPOSITING:\n            case AccountStatus.DEPOSIT_TO_CONFIREM:\n            case AccountStatus.ARPROVING:\n            case AccountStatus.APPROV_TO_CONFIRM:\n                headerToolBarData[ButtonComponentsMap.WalletConnect] = {\n                    ...headerToolBarData[ButtonComponentsMap.WalletConnect],\n                    label: addr,\n                    status: WalletStatus.accountPending\n                }\n                updateHeaderMenuWhenHasAccountInfo();\n\n                break\n        }\n        forceUpdate()\n    }, [account, showAccountInfo, etherscanUrl, setAccountInfoProps])\n\n    return {\n        headerToolBarData,\n        headerMenuData,\n        gatewayList,\n        open,\n        setOpen,\n        setShowAccountInfo,\n        account,\n        showAccountInfo,\n        accountInfoProps,\n        advanceOpen,\n        setAdvanceOpen\n    }\n\n}\n","export function getShortAddr(address: string) {\n    if (!address || address === undefined || address === null || address.trim() === '') {\n        console.log('getShortAddr got empty!')\n        return undefined\n    }\n    const convertAddr = address.substr(0, 6) + '...' + address.substr(address.length - 4)\n    return convertAddr\n}\n","import { useState, } from 'react'\n\nimport { TradesData, TickerData, DepthData, } from '@loopring-web/sdk/defs/exchange_defs'\n\nimport { usePromiseJob } from '@loopring-web/sdk/hooks/common/useCommon'\nimport { useExchangeAPI, } from '@loopring-web/sdk/hooks/common/useApi'\n\nexport function useGetGas() {\n\n  const [gas, setGas] = useState<any>()\n\n  const api = useExchangeAPI()\n\n  const fetchData = () => {\n    if (!api) {\n      return undefined\n    }\n    return api.getGasPrice()\n  }\n\n  usePromiseJob(fetchData, setGas, undefined, 'useGetGas', [api])\n\n  return { gas }\n\n}\n\nexport function useGetMarkets() {\n\n  const [markets, setMarkets] = useState<any>()\n    const api = useExchangeAPI()\n\n    const fetchData = () => {\n      if (!api) {\n        return undefined\n      }\n      return api.getMarkets()\n    }\n  \n    usePromiseJob(fetchData, setMarkets, undefined, 'useGetMarkets', [api])\n    \n    return { markets }\n\n}\n\nexport function useGetExchangeInfo() {\n\n  const [exchangeInfo, setExchangeInfo] = useState<any>()\n    const api = useExchangeAPI()\n\n    const fetchData = () => {\n      if (!api) {\n        return undefined\n      }\n      return api.getExchangeInfo()\n    }\n  \n    usePromiseJob(fetchData, setExchangeInfo, 'exchangeInfo', 'useGetExchangeInfo', [api])\n    \n    return { exchangeInfo }\n\n}\n\nexport function useGetTokens() {\n\n  const [tokens, setTokens] = useState<any>()\n    const api = useExchangeAPI()\n\n    const fetchData = () => {\n      if (!api) {\n        return undefined\n      }\n      return api.getTokens()\n    }\n  \n    usePromiseJob(fetchData, setTokens, undefined, 'useGetTokens', [api])\n    \n    return { tokens }\n\n}\n\n\nexport function useTrades(symbol: string) {\n\n  const [trades, setTrades] = useState<TradesData>()\n\n  const api = useExchangeAPI()\n\n  const fetchData = () => {\n    if (!api) {\n      return undefined\n    }\n    return api.getMarketTrades({\n      market: symbol\n    })\n  }\n\n  usePromiseJob(fetchData, setTrades, undefined, 'useTrades', [api, symbol])\n\n  return { trades, }\n\n}\n\nexport function useTickerMap(market: string) {\n\n  const [tickerMap, setTickerMap] = useState<{[key: string]: TickerData}>()\n\n  const api = useExchangeAPI()\n\n  const fetchData = () => {\n    if (!api) {\n      return undefined\n    }\n    return api.getTicker({\n      market\n    })\n  }\n\n  usePromiseJob(fetchData, setTickerMap, 'tickMap', 'useTickerMap', [api, market])\n\n  return { tickerMap, }\n\n}\n\nexport function useDepth(symbol: string) {\n\n  const api = useExchangeAPI()\n\n  const [depth, setDepth] = useState<DepthData>()\n\n    const fetchData = () => {\n      if (!api) {\n        return undefined\n      }\n      return api.getDepth({\n        market: [symbol]\n      })\n    }\n  \n    usePromiseJob(fetchData, setDepth, 'depth', 'useDepth', [api, symbol])\n\n  return { depth, }\n\n}\n","import styled from '@emotion/styled';\nimport { Switch, Grid, Divider, Typography, Box, Button } from '@material-ui/core';\nimport React from 'react';\nimport { DropDownIcon,Chg, Currency } from '@loopring-web/component-lib/src/static-resource';\nimport {\n    BtnLanguage,\n    Column, generateColumns, generateRows,\n    LoopringTBHeader,\n    LoopringTBHeaderProps,\n    OutlineSelect,\n    OutlineSelectItem, Table,\n    TypographyStrong\n} from '@loopring-web/component-lib';\nimport { Trans, WithTranslation, withTranslation } from 'react-i18next';\nimport { VipStyled } from '@loopring-web/component-lib/components/block/Styled';\nimport { useTheme } from '@emotion/react';\nimport { LanguageType } from '@loopring-web/chart-lib';\n\n\nconst StyledPaper = styled(Grid)`\n  width: 100%;\n  height: 100%;\n  //flex: 1;\n  background-color: ${({theme}) => theme.colorBase.background().default};\n  ${({theme}) => theme.border.defaultFrame({c_key: 'blur', d_R: 1})};\n`\n\nconst StyledSwitch = styled(Switch)(({ theme }) => ({\n    \"& .Mui-checked\": {\n        color: theme.colorBase.textPrimary,\n        '& + .MuiSwitch-track.MuiSwitch-track':{\n            border: `solid ${theme.colorBase.success}`,\n        },\n        '& .MuiSwitch-thumb': {\n            backgroundColor: theme.colorBase.success,\n        }\n    },\n    '& .MuiSwitch-track':{\n        border: `solid ${theme.colorBase.error}`,\n        opacity:1\n    },\n    '& .MuiSwitch-thumb': {\n        backgroundColor: theme.colorBase.error,\n    }\n}));\n\nexport const BtnCurrency = ({t, currency, label, handleChange}: any) => {\n    const [state, setState] = React.useState<string>(currency ? currency : Currency.dollar);\n    const _handleChange = React.useCallback((event: React.ChangeEvent<any>) => {\n        setState(event.target.value);\n        if (handleChange) {\n\n            handleChange(event.target.value)\n        }\n    }, [handleChange])\n    return <OutlineSelect aria-label={t(label)} IconComponent={DropDownIcon}\n                          labelId=\"language-selected\"\n                          id=\"language-selected\"\n                          value={state} autoWidth\n                          onChange={_handleChange}>\n        <OutlineSelectItem value={Currency.dollar}>$ {t('labelUSDollar')}</OutlineSelectItem>\n            <OutlineSelectItem value={Currency.yen}>¥ {t('labelCNYYuan')}</OutlineSelectItem>\n    </OutlineSelect>\n}\n\nconst StyledDivider = styled(Divider)`\n  margin: ${({theme}) => theme.unit}px 0 ${({theme}) => theme.unit}px  0px;\n`\nconst DividerBlock = styled(Divider)`\n  margin: 0;\n  flex: 1;\n  width: 1px;\n  height: ${({theme}) => theme.unit*3}px;\n  background: ${({theme}) => theme.colorBase.focus};\n`\n\n\n\ninterface Row {\n    level: string;\n    orderBook: string;\n    AMM: string;\n    deposit: string;\n    withdraw: string;\n    setPublicKey: string;\n}\n\nconst rawData: Array<Array<any>> = [\n    ['VIP 0', '< 10,000 LRC', '1,000.00', '1,000.00', '1,000.00', '--'],\n    ['VIP 1', '< 10,000 LRC', '1,000.00', '1,000.00', '1,000.00', '--'],\n    ['VIP 2', '< 10,000 LRC', '1,000.00', '1,000.00', '1,000.00', '--'],\n    ['VIP 3', '< 10,000 LRC', '1,000.00', '1,000.00', '1,000.00', '--'],\n    ['VIP 4', '< 10,000 LRC', '1,000.00', '1,000.00', '1,000.00', '--'],\n];\n\n\nexport const SettingPanel = withTranslation(['common','layout'])(({t, ...rest}: & WithTranslation) => {\n    const theme = useTheme();\n    const [upColor,setUpColor] = React.useState(Chg.green)\n    const [language,setLanguage]    = React.useState(LanguageType.en_US);\n    const [currency,setCurrency]    = React.useState(Currency.dollar);\n\n    const handleOnLanguageChange = (value:any)=>{\n        setLanguage(value)\n    }\n    const handleOnCurrencyChange = (value:any)=>{\n        setCurrency(value);\n    }\n    // let up = t(`label${upColor}`)\n    // let down = t(`label${upColor === Chg.green?Chg.red :Chg.green}`);\n    const handleColorChange = (e:any) => {\n        if(e.target.checked){\n            setUpColor(Chg.green) ;\n            // up = t(`label${Chg.green}`);\n            // down =t(`label${Chg.red}`);\n        }else{\n            setUpColor(Chg.red);\n            // up = t(`label${Chg.red}`);\n            // down =t(`label${Chg.green}`);\n        }\n    }\n    const columnModeDefault: readonly Column<Row, unknown>[] = [\n        {key: 'level', name: 'labelLevel',\n            headerRenderer:   (props: LoopringTBHeaderProps<Row>) => <LoopringTBHeader{...props} child={<Typography variant={'body1'} paddingLeft={2} component={'span'}>{t('labelLevel')}</Typography>} />,\n            formatter: ({ row }) => <Typography variant={'body1'} paddingLeft={2} component={'span'}>{row.level}</Typography>},\n        {key: 'orderBook', name: 'labelOrderbook'},\n        {key: 'AMM', name: 'AMM'},\n        {key: 'deposit', name: 'labelDeposit'},\n        {key: 'withdraw', name: 'labelWithdraw'},\n        {key: 'setPublicKey', name: 'labelSetPublicKey'}\n    ];\n\n    const vipTableArgs = {\n        rawData: rawData,\n        columnMode: columnModeDefault,\n        generateRows: generateRows,\n        generateColumns: generateColumns,\n    };\n    return <Grid container direction={'column'} justifyContent={'space-between'} alignItems={'stretch'}>\n        <Typography variant={'h4'} component={'h3'} marginY={1}>{t('labelTitleSecurity')}</Typography>\n        <StyledPaper item xs={12} display={'flex'} flexDirection={'column'} marginBottom={2} paddingY={2}>\n            <Box component={'section'} display={'flex'} flexDirection={'column'}>\n                <Typography variant={'h5'} component={'h4'} paddingX={2}>{t('labelTitleResetL2Keypair')}</Typography>\n                <StyledDivider/>\n                <Grid container display={'flex'} flexDirection={'row'} justifyContent={'stretch'}\n                      alignItems={'flex-start'} paddingX={2} marginBottom={2}>\n                    <Grid item xs={8} display={'flex'} flexDirection={'column'}>\n                        <Typography variant={'body1'} component={'p'}>\n                            <Trans i18nKey=\"resetDescription\">\n                                Create a new signing key for layer-2 authentication (no backup needed). This will\n                                <TypographyStrong  component={'span'}>cancel all your pending orders</TypographyStrong>.\n                            </Trans>\n                            </Typography>\n                    </Grid>\n                    <Grid item xs={4} display={'flex'} flexDirection={'column'} justifyContent={'space-evenly'}\n                          alignItems={'flex-end'} alignSelf={'stretch'}>\n                        <Button variant={'outlined'} size={'medium'} color={'primary'}>{t('labelBtnReset')}</Button>\n                        <Typography variant={'body1'} component={'p'} paddingTop={1}>{t('labelHadChangPassword',{passDay:'14 hours'})}</Typography>\n                    </Grid>\n                </Grid>\n            </Box>\n            {/*<Box component={'section'} display={'flex'} flexDirection={'column'}>*/}\n            {/*    <Typography variant={'h5'} component={'h4'} paddingX={2}>{t('labelTitleForceWithdraw')}</Typography>*/}\n            {/*    <StyledDivider/>*/}\n            {/*    <Grid container display={'flex'} flexDirection={'row'} justifyContent={'stretch'}*/}\n            {/*          alignItems={'flex-start'} paddingX={2} marginBottom={2}>*/}\n            {/*        <Grid item xs={7} display={'flex'} flexDirection={'column'}>*/}\n            {/*            <Typography variant={'body1'} component={'p'}>{t('descriptionForceWithdraw')}</Typography>*/}\n            {/*        </Grid>*/}\n            {/*        <Grid item xs={5} display={'flex'} flexDirection={'column'} justifyContent={'space-evenly'}*/}\n            {/*              alignItems={'flex-end'} alignSelf={'stretch'}>*/}\n            {/*            <Grid item> <Button variant={'outlined'} size={'medium'}*/}\n            {/*                                color={'primary'}>{t('labelBtnForceWithdraw')}</Button></Grid>*/}\n            {/*        </Grid>*/}\n            {/*    </Grid>*/}\n            {/*</Box>*/}\n\n            <Box component={'section'} display={'flex'} flexDirection={'column'}>\n                <Typography variant={'h5'} component={'h4'} paddingX={2}>{t('labelTitleExportAccount')}</Typography>\n                <StyledDivider/>\n                <Grid container display={'flex'} flexDirection={'row'} justifyContent={'stretch'}\n                      alignItems={'flex-start'} paddingX={2} marginBottom={2}>\n                    <Grid item xs={7} display={'flex'} flexDirection={'column'}>\n                        <Typography variant={'body1'} component={'p'}>{t('descriptionExportAccount')}</Typography>\n                    </Grid>\n                    <Grid item xs={5} display={'flex'} flexDirection={'column'} justifyContent={'space-evenly'}\n                          alignItems={'flex-end'} alignSelf={'stretch'}>\n                        <Grid item> <Button variant={'outlined'} size={'medium'}\n                                            color={'primary'}>{t('labelBtnExportAccount')}</Button></Grid>\n                    </Grid>\n                </Grid>\n            </Box>\n        </StyledPaper>\n\n        <Typography variant={'h4'} component={'h3'} marginY={1}>{t('labelTitlePreferences')}</Typography>\n        <StyledPaper item xs={12} display={'flex'} flexDirection={'column'} marginBottom={2} paddingY={2}>\n            <Box component={'section'} display={'flex'} flexDirection={'column'}>\n                <Typography variant={'h5'} component={'h4'} paddingX={2}>{t('labelTitleLayout')}</Typography>\n                <StyledDivider/>\n                <Grid container display={'flex'} flexDirection={'row'} justifyContent={'stretch'}\n                      alignItems={'flex-start'} paddingX={2} marginBottom={2}>\n                    <Grid item xs={7} display={'flex'} flexDirection={'column'}>\n                        <Typography variant={'body1'} component={'p'}>{t('labelLanguage')}</Typography>\n                    </Grid>\n                    <Grid item xs={5} display={'flex'} flexDirection={'column'} justifyContent={'space-evenly'}\n                          alignItems={'flex-end'} alignSelf={'stretch'}>\n                        <Grid item>\n                         <BtnLanguage {...{t,...rest, language, label:'languageSetting', handleChange:handleOnLanguageChange}}></BtnLanguage>\n                        </Grid>\n                    </Grid>\n                </Grid>\n                <Grid container display={'flex'} flexDirection={'row'} justifyContent={'stretch'}\n                      alignItems={'flex-start'} paddingX={2} marginBottom={2}>\n                    <Grid item xs={7} display={'flex'} flexDirection={'column'}>\n                        <Typography variant={'body1'} component={'p'}>{t('labelCurrency')}</Typography>\n                    </Grid>\n                    <Grid item xs={5} display={'flex'} flexDirection={'column'} justifyContent={'space-evenly'}\n                          alignItems={'flex-end'} alignSelf={'stretch'}>\n                        <Grid item>\n                            <BtnCurrency {...{t,...rest, currency, label:'currencySetting', handleChange:handleOnCurrencyChange}}></BtnCurrency>\n\n                            </Grid>\n                    </Grid>\n                </Grid>\n                <Grid container display={'flex'} flexDirection={'row'} justifyContent={'stretch'}\n                      alignItems={'flex-start'} paddingX={2}>\n                    <Grid item xs={7} display={'flex'} flexDirection={'column'}>\n                        <Typography variant={'body1'} component={'p'}>{t('labelColors')}</Typography>\n                    </Grid>\n                    <Grid item xs={5} display={'flex'} flexDirection={'row'} justifyContent={'flex-end'}\n                          alignItems={'center'} alignSelf={'stretch'}>\n                        <Typography variant={'body1'} component={'span'} paddingX={2}>\n                            <Trans i18nKey=\"whichColorIsUp\" >\n                                <span style={{textTransform:'capitalize',color:upColor === Chg.green?theme.colorBase.success:theme.colorBase.error}}>{{up:upColor === Chg.green?t('labelgreen'):t('labelred')}} up</span>\n                                 and <span style={{textTransform:'capitalize',color:upColor === Chg.green?theme.colorBase.error:theme.colorBase.success}}>{{down:upColor === Chg.green?t('labelred'):t('labelgreen')}} down</span>\n                            </Trans>\n                        </Typography>\n                        <StyledSwitch checked={upColor === Chg.green} color=\"default\"\n                                onChange={handleColorChange}/>\n\n                    </Grid>\n                </Grid>\n            </Box>\n            {/*<Box component={'section'} display={'flex'} flexDirection={'column'}>*/}\n            {/*    <Typography variant={'h5'} component={'h4'} paddingX={2}>{t('labelTitleNotification')}</Typography>*/}\n            {/*    <StyledDivider/>*/}\n            {/*    <Grid container display={'flex'} flexDirection={'row'} justifyContent={'stretch'}*/}\n            {/*          alignItems={'flex-start'} paddingX={2} marginBottom={2}>*/}\n            {/*        <Grid item xs={8} display={'flex'} flexDirection={'column'}>*/}\n            {/*            <Typography variant={'body1'} component={'p'}>{t('labelLanguage')}</Typography>*/}\n            {/*        </Grid>*/}\n            {/*        <Grid item xs={4} display={'flex'} flexDirection={'column'} justifyContent={'space-evenly'}*/}\n            {/*              alignItems={'flex-end'} alignSelf={'stretch'}>*/}\n            {/*            <Grid item> <Button variant={'outlined'} size={'medium'}*/}\n            {/*                                color={'primary'}>{t('labelBtnExportAccount')}</Button></Grid>*/}\n            {/*        </Grid>*/}\n            {/*    </Grid>*/}\n            {/*</Box>*/}\n        </StyledPaper>\n\n        {/*<Typography variant={'h4'} component={'h3'}  marginY={1} display={'flex'} flexDirection={'row'} alignItems={'center'} justifyContent={'space-between'}>*/}\n        {/*    <Typography  component={'p'}  flexDirection={'row'} display={'flex'}  alignSelf={'flex-end'}>*/}\n        {/*        <Typography   variant={'h4'} component={'span'} paddingRight={1}>*/}\n        {/*            {t('labelTradeFeeLevel')}*/}\n        {/*        </Typography>*/}\n        {/*        /!*<VipStyled component={'span'} variant={'body2'} > {'VIP 1'} </VipStyled>*!/*/}\n        {/*        <Typography variant={'body1'} component={'span'} display={'flex'} flexDirection={'row'} alignItems={'center'} paddingRight={1}>*/}\n        {/*            <VipStyled component={'span'} variant={'body2'} > {'VIP 1'} </VipStyled>*/}\n        {/*            /!*<Typography  padding={1} component={'div'} width={200}>*!/*/}\n        {/*            /!*    <BorderLinearProgress variant=\"determinate\" value={50}/>*!/*/}\n        {/*            /!*</Typography>*!/*/}\n        {/*            /!*<VipStyled component={'span'} variant={'body2'} > {'VIP 2'} </VipStyled>*!/*/}\n        {/*        </Typography>*/}\n        {/*    </Typography>*/}\n\n        {/*    <Typography variant={'body1'} component={'section'} display={'flex'} flexDirection={'row'}*/}\n        {/*                justifyContent={'flex-end'} alignItems={'center'}  >*/}\n        {/*        <Typography   component={'div'}  display={'flex'} flexDirection={'column'} width={120} alignItems={'center'}>*/}\n        {/*            <Typography  component={'span'} variant={'body1'} color={'textColorSecondary'} > {t('labelMaker')}  </Typography>*/}\n        {/*            <Typography  component={'span'} variant={'h3'}>0.075% </Typography>*/}\n        {/*        </Typography>*/}\n        {/*        <DividerBlock/>*/}\n        {/*        <Typography   component={'div'} display={'flex'} flexDirection={'column'} width={120} alignItems={'center'}>*/}\n        {/*            <Typography  component={'span'} variant={'body1'}  > {t('labelTaker')}  </Typography>*/}\n        {/*            <Typography  component={'span'} variant={'h3'} > 0.075%</Typography>*/}\n        {/*        </Typography>*/}\n\n        {/*    </Typography>*/}\n        {/*</Typography>*/}\n        {/*<StyledPaper item xs={12} display={'flex'} flexDirection={'column'} marginBottom={2} paddingY={2}>*/}\n        {/*    <Table<Row, unknown> {...{...vipTableArgs, t, ...rest}}  />*/}\n        {/*    /!*<Typography variant={'body1'} component={'h3'} color={'textColorSecondary'}>*!/*/}\n        {/*    /!*    {t('typographyVipDescription1')}*!/*/}\n        {/*    /!*    {t('typographyVipDescription2')}*!/*/}\n        {/*    /!*</Typography>*!/*/}\n        {/*</StyledPaper>*/}\n\n\n    </Grid>\n})\n\n\n\n","import React from \"react\"\nimport { Modal as MuiModal, Container, Paper, Box } from '@material-ui/core';\nimport { SettingPanel } from './SettingPanel';\nimport styled from '@emotion/styled';\n\nconst PaperStyled = styled(Container)`\n  // background: ${({theme}) => theme.colorBase.backgroundSecondary};\n  flex: 1;\n  height: 100%;\n  display: flex;\n  \n  justify-content: space-around;\n  align-items: center;\n`;\nconst MuiModalStyled = styled(MuiModal)`\n  background: ${({theme}) => theme.colorBase.backgroundGlobal};\n  .MuiBackdrop-root{\n    background-color: rgba(0,0,0,.2); \n  }\n` as typeof MuiModal;\n\nexport  const SettingPage = ({open,onClose}: { open:boolean, onClose:(e:any)=>void})=>{\n    return  <MuiModalStyled\n        open={open}\n        onClose={onClose}\n        aria-labelledby=\"modal-modal-title\"\n        aria-describedby=\"modal-modal-description\"\n    >\n        <PaperStyled maxWidth=\"md\" >\n             <Box>\n                 <SettingPanel/>\n             </Box>\n        </PaperStyled>\n    </MuiModalStyled>\n}","import React, { useCallback, useState } from 'react'\n\nimport {\n    DepositProps,\n    Header as HeaderUI,\n    HideOnScroll,\n    ModalWalletConnect,\n    ResetProps,\n    setShowDeposit,\n    setShowResetAccount,\n    setShowTransfer,\n    AccountInfo,\n    SwapTradeData,\n    SwitchData,\n    TradeBtnStatus,\n    TransferProps,\n    WithdrawProps,\n} from '@loopring-web/component-lib'\n\nimport { headerRoot, WithdrawType, WithdrawTypes } from '@loopring-web/component-lib/src/static-resource'\n\nimport { useLocation } from 'react-router-dom'\n\nimport { Box, Button, Collapse, Container, Dialog, Toolbar } from '@material-ui/core'\n\nimport { useHeader } from './hook'\n\nimport { useAccount, useConnect, useDisconnect, useUnlock, } from 'stores/account/hook'\nimport { useTranslation } from 'react-i18next';\nimport { useDispatch } from 'react-redux';\nimport { ModalPanel } from '@loopring-web/component-lib';\nimport { useGetExchangeInfo } from 'hooks/exchange/useExchangeAPI'\nimport { SettingPage } from '../../pages/SettingPage';\n\nfunction TmpDialog(props: any) {\n\n    const { account } = useAccount()\n\n    const { setOpenC, open } = props\n\n    const { lock, unlock } = useUnlock()\n\n    const { disconnect } = useDisconnect()\n\n    const { connect } = useConnect()\n\n    return (\n        <Dialog onClose={() => {\n            setOpenC(false)\n        }} aria-labelledby=\"simple-dialog-title\" open={open}>\n            <Button onClick={async () => {\n                await lock(account);\n                setOpenC(false)\n            }}>lock</Button>\n            <Button onClick={async () => {\n                await unlock(account);\n                setOpenC(false)\n            }}>unlock</Button>\n            <Button>switch</Button>\n            <Button onClick={() => {\n                disconnect();\n                setOpenC(false)\n            }}>logout</Button>\n            <Button>advanced</Button>\n        </Dialog>\n    )\n\n}\n\nconst Header = ({ ...rest }: any) => {\n\n    const location = useLocation()\n    const {\n        headerToolBarData,\n        headerMenuData,\n        gatewayList,\n        open,\n        setOpen,\n        setShowAccountInfo,\n        account,\n        accountInfoProps,\n        showAccountInfo,\n        advanceOpen,\n        setAdvanceOpen\n    } = useHeader()\n\n    const { exchangeInfo } = useGetExchangeInfo()\n\n    const { disconnect } = useDisconnect()\n\n    const onSwitch = useCallback(() => {\n        setOpen(true)\n    }, [setOpen])\n\n\n\n    console.log('-------accountInfoProps:', accountInfoProps, ' showAccountInfo:', showAccountInfo)\n\n    return (<>\n        <HideOnScroll>\n            {process.env.NODE_ENV !== 'production' && JSON.stringify(account?.status)}\n            {process.env.NODE_ENV !== 'production' && ' exchangeAddress:' + JSON.stringify(exchangeInfo?.exchangeAddress)}\n\n            <HeaderUI {...rest} headerMenuData={headerMenuData} headerToolBarData={headerToolBarData}\n                      selected={location.pathname === '/' ? headerRoot : location.pathname}></HeaderUI>\n\n        </HideOnScroll>\n        <Toolbar />\n\n        <ModalWalletConnect {...{ ...rest, gatewayList, open, onClose: () => setOpen(false) }} />\n\n        {\n            accountInfoProps && <><Collapse in={showAccountInfo}>\n              <Container maxWidth=\"lg\">\n                <Box marginTop={2}>\n                  <AccountInfo onDisconnect = { () => { disconnect(); setShowAccountInfo(false); } } onSwith = { onSwitch } {...accountInfoProps}></AccountInfo>\n                </Box>\n              </Container>\n            </Collapse>\n              <SettingPage open={advanceOpen} onClose={e=>setAdvanceOpen(false)}/>\n            </>\n        }\n\n    </>)\n}\n\nexport default Header\n","import styled from '@emotion/styled/macro'\n\nimport { QuoteTable } from '@loopring-web/component-lib'\n\nimport { WithTranslation, withTranslation } from 'react-i18next'\n\nconst rawDataOrderHistory: any[] = [\n    ['Sell', [{ type: 'out', key: 'ETH', value: 25 }, { type: 'in', key: 'LRC', value: 100 }], 0.12, [{\n        type: 'out',\n        key: 'ETH',\n        value: 25\n    }, { type: 'in', key: 'LRC', value: 100 }], 0.0054, 3, 'Filled'],\n    ['Buy', [{ type: 'out', key: 'ETH', value: 25 }, { type: 'in', key: 'LRC', value: 100 }], 0.12, [{\n        type: 'out',\n        key: 'ETH',\n        value: 25\n    }, { type: 'in', key: 'LRC', value: 100 }], 0.0054, 3, 'Filled'],\n    ['Buy', [{ type: 'out', key: 'ETH', value: 25 }, { type: 'in', key: 'LRC', value: 100 }], 0.12, [{\n        type: 'out',\n        key: 'ETH',\n        value: 25\n    }, { type: 'in', key: 'LRC', value: 100 }], 0.0054, 3, 'Cancelled'],\n    ['Sell', [{ type: 'out', key: 'ETH', value: 25 }, { type: 'in', key: 'LRC', value: 100 }], 0.12, [{\n        type: 'out',\n        key: 'ETH',\n        value: 25\n    }, { type: 'in', key: 'LRC', value: 100 }], 0.0054, 3, 'Filled'],\n    ['Sell', [{ type: 'out', key: 'ETH', value: 25 }, { type: 'in', key: 'LRC', value: 100 }], 0.12, [{\n        type: 'out',\n        key: 'ETH',\n        value: 25\n    }, { type: 'in', key: 'LRC', value: 100 }], 0.0054, 3, 'Cancelled'],\n]\n\nconst rawDataLastPrice: any[] = [\n    [['LRC', 'BUSD'], [12.4, 13], -0.12, 123.34, 23.41, 21759000],\n    [['LRC', 'BUSD'], [12.4, 13], 12.2, 0.99, 12.3, '', ''],\n    [['LRC', 'BUSD'], [12.4, 13], 34.55, 0.42, 4.678, '', 13759500],\n    [['LRC', 'BUSD'], [12.4, 13], 0.0, -0.32, 3.23, 1.45, 37346000],\n    [['LRC', 'BUSD'], [12.4, 13], 54, 0.52, 12.333, '', ''],\n    [['LRC', 'BUSD'], [12.4, 13], '', -0.852, 8.881, 7.56, ''],\n    [['LRC', 'BUSD'], [12.4, 13], 26, 0.12, 0.659, 1.344, 42245000],\n]\n\nconst Style = styled.div`\n\tcolor: #fff;\n\tflex: 1;\n\theight: 100%;\n\tflex: 1;\n`\n\nconst QuotePage = withTranslation('common')((rest: WithTranslation) => {\n\n    return (\n        <Style>\n            <QuoteTable rawData={rawDataLastPrice} {...{ ...rest }} />\n        </Style>\n    )\n\n})\n\nexport default QuotePage\n","import { SwapPanel as SwapPanelUi } from '@loopring-web/component-lib'\n\nconst SwapPanel = ({swapProps,...rest}: any) => {\n    return (<SwapPanelUi {...{\n        ...swapProps\n        , ...rest\n    }}> </SwapPanelUi>\n    )\n\n}\n\nexport default SwapPanel\n","import * as fm from '@loopring-web/sdk/api/common/formatter'\nimport BigNumber from 'bignumber.js'\n\nimport { CoinInfo, CoinMap, } from '@loopring-web/component-lib/static-resource'\n\nimport { utils } from 'ethers'\n\nconst MULTI_FACTOR = 10000\n\nexport enum SwapStatus {\n    Normal = 'Normal',\n    EmptyInput = 'EmptyInput',\n    ExceedUserBalance = 'ExceedUserBalance',\n    ExceedPoolBalance = 'ExceedPoolBalance',\n    Loading = 'Loading',\n}\n\nexport const checkStatus = (baseAmt: any, MaxBaseAmt: any, quoteAmt: any, MaxQuoteAmt: any) => {\n    let newStatus = SwapStatus.Normal\n\n    baseAmt = new BigNumber(baseAmt)\n    MaxBaseAmt = new BigNumber(MaxBaseAmt)\n    quoteAmt = new BigNumber(quoteAmt)\n    MaxQuoteAmt = new BigNumber(MaxQuoteAmt)\n\n    const zero = new BigNumber(0)\n\n    if (baseAmt.gt(MaxBaseAmt)) {\n        newStatus = SwapStatus.ExceedUserBalance\n    } else if (quoteAmt.gt(MaxQuoteAmt)) {\n        newStatus = SwapStatus.ExceedPoolBalance\n    } else if (baseAmt.eq(zero) || quoteAmt.eq(zero)) {\n        newStatus = SwapStatus.EmptyInput\n    }\n\n    const isNormal = newStatus === SwapStatus.Normal\n\n    return {\n        isNormal,\n    }\n\n}\n\nexport function getIcon(symbol: string, tokens: any) {\n    const baseToken: any = tokens[symbol]\n    const addr = utils.getAddress(baseToken.address)\n    const path = `https://exchange.loopring.io/assets/images/ethereum/assets/${addr}/logo.png`\n    return path\n}\n\nexport const getLeft = (pairs: any, tokens: any) => {\n    if (pairs) {\n\n        const left = Reflect.ownKeys(pairs)\n\n        let coinMapLeft: CoinMap<any, CoinInfo<any>> = {}\n\n        //https://exchange.loopring.io/assets/images/ethereum/assets/0x9A0aBA393aac4dFbFf4333B06c407458002C6183/logo.png\n\n        left.forEach((key: any) => {\n            coinMapLeft[key] = {\n                icon: getIcon(key, tokens),\n                name: key,\n                simpleName: key,\n                description: '',\n                company: ''\n            }\n        })\n\n        return {\n            left,\n            coinMapLeft,\n        }\n    }\n\n    return undefined\n}\n\nexport const getRight = (pairs: any, left: any, tokens: any) => {\n    if (pairs) {\n        const right = pairs[left].tokenList\n\n        let coinMapRight: CoinMap<any, CoinInfo<any>> = {}\n\n        if (right) {\n            right.forEach((key: any) => {\n                coinMapRight[key] = {\n                    icon: getIcon(key, tokens),\n                    name: key,\n                    simpleName: key,\n                    description: '',\n                    company: ''\n                }\n            })\n\n            return {\n                right,\n                coinMapRight,\n            }\n        }\n    }\n    return undefined\n}\n\nexport const getToken = (tokens: any, token: any) => {\n    if (!tokens) {\n        throw Error('no tokens list!')\n    }\n    return tokens[token]\n}\n\nexport const getTokenInfoByToken = (ammBalance: any, tokens: any, token: any) => {\n\n    const tokenInfo = getToken(tokens, token)\n\n    // console.log(' tokenInfo:', tokenInfo, ' tokens:', tokens, ' token:', token)\n    const tokenVol = ammBalance.pooledMap[tokenInfo.tokenId].volume\n    const reserve = fm.toBig(tokenVol)\n\n    // console.log(' tokenInfo:', tokenInfo, ' tokenVol:', tokenVol)\n\n    return {\n        tokenInfo, tokenVol, reserve,\n    }\n}\n\nconst getKey = (base: any, quote: any) => {\n    // const isLRCETH = (base === 'LRC' && quote === 'ETH') || (base === 'ETH' && quote === 'LRC')\n\n    if (!base || !quote) {\n        return {\n            key: undefined,\n            key_bak: undefined,\n            isOK: false,\n        }\n    }\n\n    const isLRCETH = false\n    const key = isLRCETH ? 'LRCETH-Pool' : ('AMM-' + base + '-' + quote)\n    const key_bak = isLRCETH ? 'LRCETH-Pool' : ('AMM-' + quote + '-' + base)\n    return {\n        key,\n        key_bak,\n        isOK: true,\n    }\n}\n\nconst getInfoByKey = (raw_data: any, keyPair: any) => {\n    const {\n        key,\n        key_bak,\n    } = keyPair\n\n    if (raw_data[key]) return raw_data[key]\n    return raw_data[key_bak]\n}\n\nexport const getBalances = (ammpools: any, ammPoolsBalances: any, base: any, quote: any, tokens: any) => {\n\n    const { ammInfo,\n        ammBalance,\n    } = getAmmInfo(ammpools, ammPoolsBalances, base, quote)\n\n    const baseToken = getToken(tokens, base)\n    const quoteToken = getToken(tokens, quote)\n\n    const baseBalance = ammBalance.pooledMap[baseToken.tokenId]\n    const quoteBalance = ammBalance.pooledMap[quoteToken.tokenId]\n\n    return {\n        ammInfo,\n        ammBalance,\n        baseBalance,\n        quoteBalance,\n    }\n\n}\n\nexport const getAmmInfoOnly = (ammpools: any, base: any, quote: any) => {\n\n    const keyPair = getKey(base, quote)\n    // console.log('keyPair:', keyPair)\n\n    const ammInfo = getInfoByKey(ammpools, keyPair)\n\n    if (!ammInfo) {\n        throw Error('no ammInfo!')\n    }\n\n    return {\n        ammInfo,\n    }\n\n}\n\nexport const getAmmInfo = (ammpools: any, ammPoolsBalances: any, base: any, quote: any) => {\n\n    const keyPair = getKey(base, quote)\n\n    const ammInfo = getInfoByKey(ammpools, keyPair)\n    const ammBalance = getInfoByKey(ammPoolsBalances, keyPair)\n\n    if (!ammInfo || !ammBalance) {\n        throw Error('no ammInfo! no ammBalance!')\n    }\n\n    const feeBips = parseInt(ammInfo.feeBips)\n\n    return {\n        ammInfo,\n        ammBalance,\n        feeBips,\n    }\n\n}\n\nconst getAmt = (rawAmt: any, tokenInfo: any) => {\n    if (rawAmt === undefined) {\n        rawAmt = 0\n    }\n\n    return fm.toBig(rawAmt).times('1e' + tokenInfo.decimals)\n}\n\nexport const applySlippageTolerance = (\n    tokens: any,\n    token: any,\n    value: any,\n    slippageTolerance: number = 0.01\n) => {\n    const tokenInfo = getToken(tokens, token)\n    const f = 1e7\n    const feeFactor = fm.toBig(f * (1 - slippageTolerance))\n    const amount = fm.toBig(value).times('1e' + tokenInfo.decimals)\n    const outInWei = amount.times(feeFactor).dividedBy(f)\n    const out = fromWEI(tokens, token, outInWei)\n\n    return {\n        outInWei,\n        out,\n    }\n}\n\nexport const applyOrderFee = (tokens: any, token: any, value: any, feeBip: any) => {\n    const tokenInfo = getToken(tokens, token)\n    const feeFactor = fm.toBig(MULTI_FACTOR - feeBip)\n    const amount = fm.toBig(value).times('1e' + tokenInfo.decimals)\n    const appliedAmount = amount.times(feeFactor).dividedBy(MULTI_FACTOR)\n    return appliedAmount\n}\n\nexport function fromWEI(tokens: any, symbol: any, valueInWEI: any, precision?: any, ceil?: any) {\n    try {\n        const tokenInfo = getToken(tokens, symbol)\n        const precisionToFixed = precision ? precision : tokenInfo.precision\n        const value = fm.toBig(valueInWEI).div('1e' + tokenInfo.decimals)\n        return fm.toFixed(value, precisionToFixed, ceil)\n    } catch (error) {\n        return 0\n    }\n}\n\n\nexport function toWEI(tokens: any, symbol: any, value: any, rm: any = 3) {\n    const tokenInfo = getToken(tokens, symbol)\n    if (typeof tokenInfo === 'undefined') {\n        return 0\n    }\n\n    return fm.toBig(value)\n        .times('1e' + tokenInfo.decimals)\n        .toFixed(0, rm)\n}\n\nexport const getAmountOut = (amt: any, ammpools: any, ammPoolsBalances: any, tokens: any,\n    base: any, quote: any, takerRate: number, currentPrice: number) => {\n\n    if (amt === undefined) {\n        amt = 0\n    }\n\n    const { ammBalance, feeBips, } = getAmmInfo(ammpools, ammPoolsBalances, base, quote)\n\n    const { tokenInfo: baseTokenInfo, reserve: reserveIn } = getTokenInfoByToken(ammBalance, tokens, base)\n    const { tokenInfo: quoteTokenInfo, reserve: reserveOut } = getTokenInfoByToken(ammBalance, tokens, quote)\n\n    const amountIn = getAmt(amt, baseTokenInfo)\n    const feeBipsFactor = fm.toBig(MULTI_FACTOR - feeBips)\n    const amountInWithFee = amountIn.times(feeBipsFactor)\n    const numerator = amountInWithFee.times(reserveOut)\n    const denominator = reserveIn.times(MULTI_FACTOR).plus(amountInWithFee)\n    const amountOutInWei: any = numerator.dividedBy(denominator)\n\n    let quoteAmt: any = fromWEI(tokens, quote, amountOutInWei)\n\n    const _amount1ApplyOrderFeeInWei = applyOrderFee(tokens, quote, quoteAmt, takerRate + feeBips)\n\n    let _amount1ApplyOrderFee = Number(fromWEI(tokens, quote, _amount1ApplyOrderFeeInWei))\n\n    let priceImpact = 0\n    if (_amount1ApplyOrderFee < 0) {\n        _amount1ApplyOrderFee = 0\n        quoteAmt = null\n    } else {\n        const newPrice = Number(quoteAmt) / Number(amt)\n        priceImpact = (newPrice - currentPrice) / currentPrice\n    }\n\n    // console.log('got:', ammBalance)\n\n    return {\n        quoteAmt,\n        _amount1ApplyOrderFeeInWei,\n        _amount1ApplyOrderFee,\n        priceImpact,\n    }\n\n}\n\nexport const getAmountOut_Reverse = (amt: any, ammpools: any, ammPoolsBalances: any, tokens: any,\n    base: any, quote: any, takerRate: number, currentPrice: number) => {\n\n    if (amt === undefined) {\n        amt = 0\n    }\n\n    // console.log('amt:', amt, 'ammpools:', ammpools, 'ammPoolsBalances:', ammPoolsBalances, ' base:', base, ' quote:', quote)\n\n    const { ammBalance, feeBips, } = getAmmInfo(ammpools, ammPoolsBalances, base, quote)\n\n    const { tokenInfo: baseTokenInfo, reserve: reserveIn } = getTokenInfoByToken(ammBalance, tokens, base)\n    const { tokenInfo: quoteTokenInfo, reserve: reserveOut } = getTokenInfoByToken(ammBalance, tokens, quote)\n\n    const amountOut = getAmt(amt, quoteTokenInfo)\n\n    if (amountOut.gt(reserveOut)) {\n        return {\n            baseAmt: 0,\n            _amount1ApplyOrderFeeInWei: 0,\n            _amount1ApplyOrderFee: 0,\n            priceImpact: 0,\n            hasError: false,\n        }\n    }\n\n    const numerator = amountOut.times(reserveIn).times(MULTI_FACTOR)\n    const feeBipsFactor = fm.toBig(MULTI_FACTOR - feeBips)\n\n    // If amountOut is larger than reserveOut?\n    // It's handled before getAmountOut_reserve\n    const reserveOutSubAmountOut = reserveOut.minus(amountOut)\n\n    const denominator = feeBipsFactor.times(reserveOutSubAmountOut)\n    const amountInInWei = numerator.dividedBy(denominator)\n\n    let baseAmt: any = fromWEI(tokens, quote, amountInInWei)\n\n    const _amount1ApplyOrderFeeInWei = applyOrderFee(tokens, quote, amt, takerRate + feeBips)\n\n    let _amount1ApplyOrderFee = Number(fromWEI(tokens, quote, _amount1ApplyOrderFeeInWei))\n\n    let priceImpact = 0\n    if (_amount1ApplyOrderFee < 0) {\n        _amount1ApplyOrderFee = 0\n        baseAmt = null\n    } else {\n        const newPrice = Number(amt) / Number(baseAmt)\n        priceImpact = (newPrice - currentPrice) / currentPrice\n    }\n\n    // console.log('got:', ammBalance)\n\n    return {\n        baseAmt,\n        _amount1ApplyOrderFeeInWei,\n        _amount1ApplyOrderFee,\n        priceImpact,\n        hasError: false,\n    }\n\n}\n\n/*\nexport const getAmountIn = (amt: any, ammpools: any, ammPoolsBalances: any, tokens: any, base: any, quote: any) => {\n\n    const { ammBalance, feeBips, } = getAmmInfo(ammpools, ammPoolsBalances, base, quote)\n\n    const { tokenInfo: baseTokenInfo, reserve: reserveIn } = getTokenInfoByToken(ammBalance, tokens, base)\n    const { tokenInfo: quoteTokenInfo, reserve: reserveOut } = getTokenInfoByToken(ammBalance, tokens, quote)\n\n    const amountOut = getAmt(amt, quoteTokenInfo)\n    const numerator = reserveIn.times(amountOut).times(MULTI_FACTOR)\n    const denominator = reserveOut.minus(amountOut).times(MULTI_FACTOR - feeBips)\n    const amountIn = numerator.dividedBy(denominator).plus(1)\n\n    // const baseAmt = amountIn.dividedBy('1e' + baseTokenInfo.decimals).toString()\n    const baseAmt = fromWEI(tokens, base, amountIn)\n\n    let amountInShown: any = ''\n    if (baseAmt !== 'NaN') {\n        amountInShown = baseAmt\n    }\n\n    return {\n        amountIn,\n        amountInShown,\n    }\n}\n*/\n","import { useState } from 'react'\n\nimport { useGetAmmPools, useGetAmmPoolsBalances } from 'hooks/exchange/useAmmpoolAPI'\nimport { useCustomDCEffect } from '@loopring-web/sdk/hooks/useCustomDCEffect'\nimport { useGetTokens } from 'hooks/exchange/useExchangeAPI'\n\nimport { getAmmInfo, } from 'utils/swap_calc_utils'\n\nexport function useSwapPage() {\n\n    const [base, setBase] = useState<string>('')\n  \n    const [quote, setQuote] = useState<string>('')\n  \n    const { ammpools } = useGetAmmPools()\n\n    const { ammPoolsBalances: ammPoolsBalances_all } = useGetAmmPoolsBalances()\n  \n    const ammPoolsBalances = ammPoolsBalances_all?.ammpoolsbalances\n\n    const [poolAddress, setPoolAddress] = useState<string>('')\n  \n    const [market, setMarket] = useState<string>('')\n  \n    const { tokens: tokensAll } = useGetTokens()\n  \n    const tokens = tokensAll?.tokenSymbolMap\n\n    useCustomDCEffect(() => {\n  \n      if (!base || !quote || !ammpools || !ammPoolsBalances) {\n        return\n      }\n  \n      const { ammInfo, } = getAmmInfo(ammpools.ammpools, ammPoolsBalances, base, quote)\n  \n      setMarket(ammInfo.market)\n      setPoolAddress(ammInfo.address)\n  \n    }, [base, quote, ammpools, ammPoolsBalances,])\n\n    return {\n        base,\n        setBase,\n        quote,\n        setQuote,\n        market,\n        tokens,\n        poolAddress,\n        ammpools,\n        ammPoolsBalances,\n    }\n\n}","import { useState, } from 'react'\n\nimport { usePromiseJob } from '@loopring-web/sdk/hooks/common/useCommon'\nimport { useAmmpoolAPI, } from '@loopring-web/sdk/hooks/common/useApi'\n\nexport function useGetAmmPools() {\n\n  const [ammpools, setAmmpools] = useState<any>()\n\n  const api = useAmmpoolAPI()\n\n    const fetchData = () => {\n      if (!api) {\n        return undefined\n      }\n      return api.getAmmPoolConf()\n    }\n  \n    usePromiseJob(fetchData, setAmmpools, undefined, 'useGetAmmPools', [api])\n\n  return { ammpools }\n\n}\n\nexport function useGetAmmPoolsBalances() {\n\n  const [ammPoolsBalances, setAmmPoolsBalances] = useState<any>()\n\n  const api = useAmmpoolAPI()\n\n  const fetchData = () => {\n    if (!api) {\n      return undefined\n    }\n    return api.getAmmPoolBalances()\n  }\n\n  usePromiseJob(fetchData, setAmmPoolsBalances, undefined, 'useGetAmmPoolsBalances', [api])\n\n  return { ammPoolsBalances }\n\n}\n","import { useState } from 'react'\n\nimport { useExchangeAPI } from '@loopring-web/sdk/hooks/common/useApi'\nimport { useCustomDCEffect } from '@loopring-web/sdk/hooks/useCustomDCEffect'\nimport { TradingInterval, GetCandlestickRequest, } from '@loopring-web/sdk/defs/loopring_defs'\nimport { dumpError400 } from '@loopring-web/sdk/utils/network_tools'\nimport { fromWEI } from 'utils/swap_calc_utils'\n\nimport { ChartUnit, ChartType } from '@loopring-web/component-lib/static-resource'\n\nimport { ChartTypes, ScaleAreaChart } from '@loopring-web/chart-lib'\nimport { Box, Grid } from \"@material-ui/core\"\n\nimport { TGItemData, TGItemJSXInterface, ToggleButtonGroup, } from '@loopring-web/component-lib'\nimport { useTranslation, WithTranslation } from 'react-i18next'\nimport { TradeTitle } from '@loopring-web/component-lib/components/block'\nimport { Candlestick } from '@loopring-web/sdk/defs/exchange_defs'\n\nconst toggleData: TGItemData[] = [\n  {\n    value: ChartTypes.depth,\n    key: ChartType.Depth,\n    label: 'label' + ChartType.Depth\n  },\n  {\n    value: ChartTypes.trend,\n    key: ChartType.Price,\n    label: 'label' + ChartType.Price\n  },\n]\n\nconst BasicInfoPanel = ({ props, swapProps, t, ...rest }: any & WithTranslation) => {\n\n  const tgItemJSXs: TGItemJSXInterface[] = toggleData.map(({ value, label, key }) => {\n    return { value, tlabel: t(label), key: key, JSX: <>{t(label)}</> }\n  })\n\n  const { quote, market, tokens } = props\n\n  const [chartType, setChartType] = useState<string>(ChartType.Depth)\n  const [change, setChange] = useState(0)\n\n  const [volume, setVolume] = useState('')\n\n  const handleChange = (_e: React.MouseEvent, value: any) => {\n    // Settings.setChartType(value)\n    setChartType(value)\n  }\n\n  const exchangeApi = useExchangeAPI()\n\n  useCustomDCEffect(() => {\n\n    if (!exchangeApi || !market || !tokens || !quote) {\n      return\n    }\n\n    let mounted = true\n\n    const request: GetCandlestickRequest = {\n      market,\n      interval: TradingInterval.d1,\n      limit: 2\n    }\n\n    exchangeApi.getCandlestick(request).then((candlesticks) => {\n\n      if (mounted) {\n        if (candlesticks?.candlesticks && candlesticks.candlesticks.length > 0) {\n          const lastBar = candlesticks.candlesticks[candlesticks.candlesticks.length - 1]\n          const lastClose = lastBar.close\n          const firstClose = candlesticks.candlesticks[0].close\n          const change = firstClose ? ((lastClose - firstClose) / firstClose) : 0\n\n          if (change) {\n            setChange(change)\n          }\n\n          if (lastBar?.quoteVol) {\n            const quoteVol = fromWEI(tokens, quote, lastBar?.quoteVol) as string\n            setVolume(quoteVol)\n          }\n        }\n      }\n\n    }).catch((reason) => {\n      dumpError400(reason)\n    })\n\n    return () => {\n      mounted = false\n    }\n\n  }, [exchangeApi, market, tokens, quote,])\n\n  const [originData, setOriginData] = useState<any>()\n\n  const [chartTypes, setChartTypes] = useState<ChartTypes>(ChartTypes.trend)\n\n  const tgItemJSXsPriceChart: TGItemJSXInterface[] = Object.keys(ChartUnit).reduce((pre, item) => {\n    // @ts-ignore\n    const tGItemData: TGItemData = { value: ChartUnit[item], key: ChartUnit[item], label: 'label' + ChartUnit[item] };\n    pre.push({ value: tGItemData.value, tlabel: t(tGItemData.label ? tGItemData.label : tGItemData.key), key: tGItemData.key, JSX: <>{t(tGItemData.label ? tGItemData.label : tGItemData.key)}</> })\n    return pre\n  }, [] as TGItemJSXInterface[])\n\n  useCustomDCEffect(() => {\n\n    let mounted = true\n\n    if (!exchangeApi || !market) {\n      return\n    }\n\n    const request: GetCandlestickRequest = {\n      market,\n      interval: TradingInterval.min15,\n      limit: 96\n    }\n\n    exchangeApi.getCandlestick(request).then((candlesticks) => {\n      if (mounted) {\n        const originData = candlesticks.candlesticks.map((item: Candlestick) => {\n          return {\n            timeStamp: item.timeStamp,\n            low: item.low,\n            high: item.high,\n            open: item.open,\n            close: item.close,\n            volume: item.quoteVol,\n          }\n        })\n        setOriginData(originData)\n\n      }\n\n      return () => {\n        mounted = false\n      }\n    }).catch((reason) => {\n      dumpError400(reason, 'ChartPanel getCandlestick')\n    })\n\n  }, [exchangeApi, market])\n  return (\n    <>\n      <Box display={'flex'} justifyContent={'space-between'} alignItems={'flex-end'}>\n        {swapProps.tradeData ? <TradeTitle {...{\n          ...rest, t, ...swapProps, tradeFloat: {\n            value: change,\n            percent: '+15%',\n            chartUnit: \"24h\"\n          }\n        }}></TradeTitle> : undefined}\n        <ToggleButtonGroup exclusive {...{ ...rest, t, tgItemJSXs: tgItemJSXs, value: chartType }}\n          handleChange={handleChange} />\n      </Box>\n      <Grid container>\n        <Grid item xs={12} minHeight={256} maxHeight={256}>\n          <ScaleAreaChart type={chartTypes} data={originData ?? []} handleMove={() => { }} />\n        </Grid>\n        <Grid item xs={12} height={24} display={'flex'} justifyContent={'flex-end'}>\n          <ToggleButtonGroup exclusive {...{ ...rest, t, tgItemJSXs: tgItemJSXsPriceChart, value: ChartUnit.D1, size: 'small' }}\n            handleChange={() => undefined} />\n        </Grid>\n      </Grid>\n    </>)\n\n\n};\n\nexport default BasicInfoPanel\n","import { useState, useCallback } from 'react'\n\nimport { useAccount } from 'stores/account/hook'\n\nimport { OrdersData } from '@loopring-web/sdk/defs/exchange_defs'\n\nimport { REFRESH_RATE } from '@loopring-web/sdk/defs/exchange_defs'\nimport { useUserAPI } from '@loopring-web/sdk/hooks/common/useApi'\nimport { dumpError400 } from '@loopring-web/sdk/utils/network_tools'\n\nimport { getToken, fromWEI } from 'utils/swap_calc_utils'\n\nimport * as fm from '@loopring-web/sdk/api/common/formatter'\nimport { useCustomDCEffect } from '@loopring-web/sdk/hooks/useCustomDCEffect'\n\nexport function useOrders() {\n\n  const acc = useAccount().account\n\n  const api = useUserAPI()\n\n  const [orders, setOrders] = useState<OrdersData>()\n\n  useCustomDCEffect(() => {\n\n    if (!acc || !api) {\n      return\n    }\n\n    let mounted = true\n\n    const exit = (id: any) => {\n      mounted = false\n      clearInterval(id)\n    }\n\n    if (acc && acc.accountId > 0) {\n\n      const id: any = setInterval(async () => {\n        try {\n          const orders_data = (await api.getOrders({\n            accountId: acc.accountId\n          }, acc.apiKey)).data\n          if (mounted) {\n            setOrders(orders_data)\n          }\n        } catch (err) {\n          return exit(id)\n        }\n      }, REFRESH_RATE)\n\n      return exit(id)\n\n    }\n  }, [acc, api])\n\n  return {\n    orders,\n  }\n\n}\n\nexport function useGetUserBalancesByToken(token: any) {\n\n  const api = useUserAPI()\n\n  //const [balance, setBalance] = useState<any>({total: '0', locked: '0', availableInWei: '0'})\n\n  const [balance, setBalance] = useState<any>('0')\n\n  const { apiKey, accountId } = useAccount()\n\n  // console.log('enter! useGetUserBalances tokens:', tokens, 'symbol:', symbol, 'apiKey:', apiKey, ' accountId:', accountId )\n\n  useCustomDCEffect(() => {\n    if (!api || !apiKey || !accountId || !token) {\n      return\n    }\n\n    api.getUserBalances({\n      accountId,\n      tokens: token.tokenId\n    }, apiKey).then((data) => {\n      const total = fm.toBig(data[0].total)\n      const locked = fm.toBig(data[0].locked)\n      const availableInWei = total.minus(locked)\n      /*\n      setBalance({\n        total: data[0].total, \n        locked: data[0].locked, \n        availableInWei: availableInWei.toString(),\n        available: fromWEI(tokens, symbol, availableInWei)\n      })\n      */\n      setBalance(availableInWei.toString())\n    }).catch((reason: any) => {\n      dumpError400(reason, 'getUserBalances tokenId:' + token.tokenId)\n    })\n\n  }, [api, apiKey, accountId, token,])\n\n  return {\n    balance,\n    setBalance,\n  }\n\n}\n\nexport function useGetUserBalances(tokens: any, toList: boolean = false) {\n\n  const api = useUserAPI()\n\n  //const [balance, setBalance] = useState<any>({total: '0', locked: '0', availableInWei: '0'})\n\n  const [balances, setBalances] = useState<any>(undefined)\n\n  const { apiKey, accountId } = useAccount()\n\n  // console.log('enter! useGetUserBalances tokens:', tokens, 'symbol:', symbol, 'apiKey:', apiKey, ' accountId:', accountId )\n\n  useCustomDCEffect(() => {\n\n    if (!api || !apiKey || !accountId || !tokens) {\n      return\n    }\n\n    let tokenList: any[] = []\n\n    const keys = Reflect.ownKeys(tokens)\n\n    let tokenMap: any = {}\n\n    keys.forEach((item: any) => {\n      const token = tokens[item]\n      tokenList.push(token.tokenId)\n      tokenMap[token.tokenId] = token\n    })\n\n    api.getUserBalances({\n      accountId,\n      tokens: tokenList.join(',')\n    }, apiKey).then((data) => {\n\n      let balances: any = {\n        map: tokenMap,\n        tokenId: {},\n        symbol: {},\n      }\n\n      data.forEach((item: any) => {\n        const total = fm.toBig(item.total)\n        const locked = fm.toBig(item.locked)\n        const availableInWei = total.minus(locked)\n\n        console.log('item:', item)\n\n        const token = tokenMap[item.tokenId]\n\n        const balance = {\n          total: data[0].total,\n          locked: data[0].locked,\n          availableInWei: availableInWei.toString(),\n          available: fromWEI(tokens, token.symbol, availableInWei)\n        }\n\n        balances.tokenId[item.tokenId] = availableInWei.toString()\n        balances.symbol[token.symbol] = availableInWei.toString()\n      })\n\n      setBalances(balances)\n\n    }).catch((reason: any) => {\n      dumpError400(reason, 'getUserBalances tokenId:' + tokens.tokenId)\n    })\n\n  }, [api, apiKey, accountId, tokens,])\n\n  return {\n    balances,\n    setBalances,\n  }\n\n}\n\nexport function useGetUserBalance(tokens: any, symbol: any) {\n\n  const api = useUserAPI()\n\n  //const [balance, setBalance] = useState<any>({total: '0', locked: '0', availableInWei: '0'})\n\n  const [balance, setBalance] = useState<any>('0')\n\n  const { apiKey, accountId } = useAccount()\n\n  useCustomDCEffect(() => {\n    if (!api || !apiKey || !accountId || !tokens || !symbol) {\n      return\n    }\n\n    const tokenInfo = getToken(tokens, symbol)\n\n    api.getUserBalances({\n      accountId,\n      tokens: tokenInfo.tokenId\n    }, apiKey).then((data) => {\n      const total = fm.toBig(data[0].total)\n      const locked = fm.toBig(data[0].locked)\n      const availableInWei = total.minus(locked)\n      \n      setBalance(availableInWei.toString())\n\n    }).catch((reason: any) => {\n      dumpError400(reason, 'getUserBalances tokenId:' + tokens.tokenId)\n    })\n\n  }, [api, apiKey, accountId, tokens, symbol,])\n\n  return {\n    balance,\n    setBalance,\n  }\n\n}","import { useState, } from 'react'\n\nimport { getAccountArg, getCandlestickArg, getAmmpoolArg, getTickerArg, getOrderArg, WsTopicType, } from '@loopring-web/sdk/defs/ws_defs'\n\nimport { useWs } from '@loopring-web/sdk/hooks/common/useWebsocketApi'\nimport { useCustomDCEffect } from '@loopring-web/sdk/hooks/useCustomDCEffect'\n\nfunction useHandleSocketData(data: any) {\n  const [account, setAccount] = useState<any>()\n  const [ammPool, setAmmPool] = useState<any>()\n  const [order, setOrder] = useState<any>()\n\n  useCustomDCEffect(() => {\n\n      if (!data) {\n        return\n      }\n\n      if (data.op) {\n        return\n      }\n\n      if (!data.topic || !data.topic.topic) {\n        return\n      }\n\n      switch(data.topic.topic) {\n        case WsTopicType.Account:\n          // console.log(',data.data:', data.data)\n          setAccount(data.data)\n          break\n        case WsTopicType.Ammpool:\n          let ammPool = {\n            baseAmt: data.data[0][0],\n            quoteAmt: data.data[0][1],\n            timestamp: data.data[1],\n          }\n          // console.log(',ammPool:', ammPool)\n          setAmmPool(ammPool)\n          break\n        case WsTopicType.Candlestick:\n          break\n        case WsTopicType.Order:\n          setOrder(data.data)\n          break\n        case WsTopicType.OrderBook:\n          break\n        case WsTopicType.Ticker:\n          break\n        case WsTopicType.Trade:\n          break\n        default:\n          throw Error('Unknown WsTopicType:' + data.topic.topic)\n      }\n  }, [data])\n\n  return {\n    account,\n    ammPool,\n    order,\n  }\n}\n\nexport function useSwapPageWs(poolAddress: string, market: string, apiKey: string) {\n\n  let topics: any[] = []\n\n  topics.push(getAccountArg())\n  topics.push(getOrderArg(market))\n  topics.push(getAmmpoolArg(poolAddress))\n\n  const { socketData } = useWs(topics, true, apiKey, !!poolAddress && !!market && !!apiKey)\n\n  return useHandleSocketData(socketData)\n\n}\n","export enum OrderHandling {\n    processed = 'processed',\n    no_such_order = 'no_such_order',\n    too_many_times = 'too_many_times',\n}\n\n// export enum PriceChartType {\n//     h24 = '24hrs',\n//     w1 = '1week',\n//     all = 'all',\n// }\n","import { useState, useCallback } from 'react'\nimport BigNumber from 'bignumber.js'\n\nimport { useGetExchangeInfo } from 'hooks/exchange/useExchangeAPI'\n\nimport { useGetUserBalances } from 'hooks/exchange/useUserAPI'\nimport { useUserAPI } from '@loopring-web/sdk/hooks/common/useApi'\nimport { useAccount } from 'stores/account/hook'\nimport {\n  checkStatus, getBalances, getAmmInfo, getAmountOut, getAmountOut_Reverse,\n  applySlippageTolerance, getToken, fromWEI, toWEI, SwapStatus, getRight, getLeft,\n} from 'utils/swap_calc_utils'\n\nimport { dumpError400 } from '@loopring-web/sdk/utils/network_tools'\n\nimport * as fm from '@loopring-web/sdk/api/common/formatter'\nimport { useSwapPageWs } from 'hooks/exchange/useWsAPI'\nimport { useCustomDCEffect } from '@loopring-web/sdk/hooks/useCustomDCEffect'\nimport { UserStorage } from 'storage'\nimport { OrderType, SubmitOrderRequestV3, TxStatus } from '@loopring-web/sdk/defs/loopring_defs'\nimport { OrderHandling } from 'defs/swap_defs'\n\nimport { TradeCalcData, CoinInfo, WalletMap, WalletCoin, CoinMap, } from '@loopring-web/component-lib/static-resource'\n\nimport { SwapData, SwapTradeData, } from '@loopring-web/component-lib'\nimport { deepClone } from 'utils/obj_tools'\n\nenum SwapPanelType {\n  Buy = 'buy',\n  Sell = 'sell',\n  Exchange = 'exchange',\n}\n\nenum DirectionType {\n  Menu = 'menu',\n  Button = 'button',\n}\nexport function useSwap(base: any, quote: any, setBase: any, setQuote: any, tokens: any, market: string, poolAddress: string, ammpools: any, ammPoolsBalances: any) {\n\n  const { apiKey, eddsaKey, accountId, } = useAccount()\n\n  const [ammOrder, setAmmOrder] = useState<string>(UserStorage.getAmmOrder())\n\n  // const [status, setStatus] = useState<SwapStatus>(SwapStatus.Normal)\n\n  const [slippageTolerance, setSlippageTolerance] = useState(0.01)\n\n  const [priceImpact, setPriceImpact] = useState(0)\n\n  const [baseAmt, setBaseAmt] = useState<string | number>()\n\n  const [quoteAmt, setQuoteAmt] = useState<number>(0)\n\n  const minimumReceived = quoteAmt ? quoteAmt * (1 - slippageTolerance) : 0\n\n  const userApi = useUserAPI()\n\n  const [left, setLeft] = useState<CoinMap<any, CoinInfo<any>>>({})\n\n  const [right, setRight] = useState<CoinMap<any, CoinInfo<any>>>({})\n\n  const { exchangeInfo } = useGetExchangeInfo()\n\n  const [fee, setFee] = useState(0)\n  const [takerRate, setTakerRate] = useState(10)\n\n  const [currentPrice, setCurrentPrice] = useState<number>(0)\n\n  const [amount1ApplyOrderFee, setAmount1ApplyOrderFee] = useState(0)\n\n  const { balances, setBalances } = useGetUserBalances(tokens)\n\n  const [balance, setBalance] = useState<any>(0)\n  const [availToShow, setAvailToShow] = useState<any>(0)\n\n  const [walletMap, setWalletMap] = useState<WalletMap<any, WalletCoin<any>>>({})\n\n  // const quoteUserBalance = useGetUserBalances(tokens, quote)\n  const [quoteBalance, setQuoteBalance] = useState<string>('0')\n  const [quoteToShow, setQuoteToShow] = useState<any>()\n\n  const [swapProps, setSwapProps] = useState<any>({})\n\n  const {\n    account,\n    ammPool,\n    order,\n  } = useSwapPageWs(poolAddress, market, apiKey)\n\n  useCustomDCEffect(() => {\n\n    if (!balances || !base || !tokens) {\n      return\n    }\n\n    const balance = balances.symbol[base]\n\n    setBalance(balance)\n    setAvailToShow(fromWEI(tokens, base, balance))\n  }, [balances, base, tokens])\n\n  useCustomDCEffect(() => {\n    if (!account || !tokens || !base) {\n      return\n    }\n\n    const currentBalance = balances.tokenId[account.tokenId]\n    const totalAmount = fm.toBig(account.totalAmount)\n    const amountLocked = fm.toBig(account.amountLocked)\n    const newAvailable = totalAmount.minus(amountLocked)\n\n    if (!newAvailable.eq(fm.toBig(currentBalance))) {\n      const avail = fromWEI(tokens, base, newAvailable.toString())\n\n      const balancesTmp = deepClone(balances)\n      balancesTmp.tokenId[account.tokenId] = newAvailable.toString()\n      const token = balancesTmp.map[account.tokenId]\n      balancesTmp.symbol[token.symbol] = newAvailable.toString()\n      setBalances(balancesTmp)\n    }\n\n  }, [account, tokens, base])\n\n  useCustomDCEffect(() => {\n    let walletMap: WalletMap<any, WalletCoin<any>> = {}\n    if (balances && balances.symbol) {\n      const keys = Reflect.ownKeys(balances.symbol)\n\n      keys.forEach((item: any) => {\n        const balance = balances.symbol[item]\n        walletMap[item] = {\n          belong: item,\n          count: fromWEI(tokens, item, balance) as number,\n        }\n      })\n    }\n\n    setWalletMap(walletMap)\n  }, [balances, tokens])\n\n  useCustomDCEffect(() => {\n\n    if (!base || !quote || !ammpools || !ammPoolsBalances || !tokens) {\n      return\n    }\n\n    const { ammInfo, baseBalance, quoteBalance, } = getBalances(ammpools.ammpools, ammPoolsBalances, base, quote, tokens)\n\n    setFee(ammInfo.feeBips)\n    setQuoteBalance(quoteBalance.volume)\n    setQuoteToShow(fromWEI(tokens, quote, quoteBalance.volume))\n\n    if (baseBalance.volume > 0) {\n      setCurrentPrice(quoteBalance.volume / baseBalance.volume)\n    }\n    else {\n      setCurrentPrice(0)\n    }\n\n  }, [tokens, base, quote, ammpools, ammPoolsBalances,])\n\n  useCustomDCEffect(() => {\n\n    if (!ammPool) {\n      return\n    }\n\n    const quoteAmt = fm.toBig(ammPool.quoteAmt)\n    // console.log('got ammPool update:', ammPool, ' quoteAmt:', quoteAmt.toString())\n    if (!quoteAmt.eq(fm.toBig(quoteBalance))) {\n      // console.log('got ammPool update newAvailable:', ammPool.quoteAmt)\n      setQuoteBalance(quoteAmt.toString())\n      setQuoteToShow(fromWEI(tokens, quote, quoteAmt))\n    }\n\n  }, [ammPool])\n\n  useCustomDCEffect(() => {\n\n    if (!apiKey && !accountId && !userApi && !ammOrder) {\n      return\n    }\n\n    const fn = (accountId: number, orderHash: string, apiKey: string, count = 0) => {\n      // console.log('orderHash:', orderHash, ' count:', count)\n      return new Promise((resolve, reject) => {\n        if (orderHash) {\n          userApi.getOrderDetails({\n            accountId,\n            orderHash\n          }, apiKey).then((order) => {\n            console.log('order.status:', order.status)\n            if (order.status === TxStatus.processed) {\n              UserStorage.clearAmmOrder()\n              return resolve(OrderHandling.processed)\n            } else {\n              if (count < 10) {\n                setTimeout(() => {\n                  fn(accountId, UserStorage.getAmmOrder(), apiKey, count++)\n                }, 1000)\n              } else {\n                reject(OrderHandling.too_many_times)\n              }\n            }\n          }).catch(() => {\n            UserStorage.clearAmmOrder()\n            return reject(OrderHandling.no_such_order)\n          })\n        }\n      })\n    }\n\n    fn(accountId, UserStorage.getAmmOrder(), apiKey).then((result) => {\n      console.log('then:', result)\n    }).catch((reason) => {\n      dumpError400(reason)\n    })\n\n    return () => {\n    }\n\n  }, [apiKey, accountId, ammOrder, userApi])\n\n  useCustomDCEffect(() => {\n\n    if (!ammpools || !tokens) {\n      return\n    }\n\n    const left = getLeft(ammpools.pairs, tokens)\n\n    if (left) {\n      setLeft(left.coinMapLeft)\n      setBase(left.left[0])\n\n      const right = getRight(ammpools.pairs, left.left[0], tokens)\n  \n      if (right) {\n        setRight(right.coinMapRight)\n        setQuote(right.right[0])\n      }\n\n    }\n\n  }, [ammpools, tokens])\n\n  useCustomDCEffect(() => {\n\n    if (!userApi || !accountId || !apiKey || !base || !quote || !ammpools || !ammPoolsBalances || !tokens) {\n      return\n    }\n\n    let mounted = true\n\n    const { ammInfo, } = getBalances(ammpools.ammpools, ammPoolsBalances, base, quote, tokens)\n\n    userApi.getUserFeeRate({\n      accountId, \n      markets: ammInfo.market\n    }, apiKey).then((response) => {\n      if (mounted) {\n        setTakerRate(response[0].takerRate)\n      } else {\n        console.log('setTakerRate unmounted!')\n      }\n    }).catch((reason) => {\n      dumpError400(reason, 'after getUserFeeRate')\n    })\n\n    return () => {\n      mounted = false\n    }\n\n  }, [tokens, userApi, accountId, apiKey, base, quote, ammpools, ammPoolsBalances,])\n\n  const onBaseAmtInputChange = useCallback((event: any) => {\n\n    if (!ammpools || !ammPoolsBalances) {\n      return\n    }\n\n    let baseAmtVal = event.tradeValue as number\n\n    // console.log('onBaseAmtInputChange baseAmtVal:', baseAmtVal, ' baseAmt:', baseAmt)\n    if (baseAmtVal !== undefined && baseAmtVal === baseAmt) {\n      console.log('return directly')\n      return\n    } else if (baseAmtVal === undefined) {\n      baseAmtVal = 0\n    }\n\n    const {\n      quoteAmt: quoteAmtVal,\n      _amount1ApplyOrderFee,\n      priceImpact,\n    } = getAmountOut(baseAmtVal, ammpools.ammpools, ammPoolsBalances, tokens, base, quote, takerRate, currentPrice)\n\n    const { isNormal, } = checkStatus(baseAmtVal, balance, quoteAmtVal, fromWEI(tokens, quote, quoteBalance))\n\n    if (isNormal) {\n      setBaseAmt(baseAmtVal)\n      setQuoteAmt(quoteAmtVal)\n      setAmount1ApplyOrderFee(_amount1ApplyOrderFee)\n      setPriceImpact(priceImpact)\n    } else {\n      setQuoteAmt(0)\n      setAmount1ApplyOrderFee(0)\n      setPriceImpact(0)\n    }\n\n    return quoteAmtVal\n\n  }, [tokens, baseAmt, balance, quoteBalance, ammpools, ammPoolsBalances, base, quote, takerRate, currentPrice])\n\n  const onQuoteAmtInputChange = useCallback((event: any) => {\n\n    if (!ammpools || !ammPoolsBalances) {\n      return\n    }\n\n    let quoteAmtVal = event.tradeValue as number\n\n    // console.log('onQuoteAmtInputChange quoteAmtVal:', quoteAmtVal, ' quoteAmt:', quoteAmt)\n    if (quoteAmtVal !== undefined && quoteAmtVal === quoteAmt) {\n      // console.log('return directly')\n      return\n    } else if (quoteAmtVal === undefined) {\n      quoteAmtVal = 0\n    }\n\n    const {\n      baseAmt: baseAmtVal,\n      _amount1ApplyOrderFee,\n      priceImpact,\n      hasError,\n    } = getAmountOut_Reverse(quoteAmtVal, ammpools.ammpools, ammPoolsBalances, tokens, base, quote, takerRate, currentPrice)\n\n    const { isNormal, } = checkStatus(baseAmtVal, balance, quoteAmtVal, fromWEI(tokens, quote, quoteBalance))\n\n    if (!hasError && isNormal) {\n      setBaseAmt(baseAmtVal)\n      setQuoteAmt(quoteAmtVal)\n      setAmount1ApplyOrderFee(_amount1ApplyOrderFee)\n      setPriceImpact(priceImpact)\n    } else {\n      setBaseAmt(0)\n      setAmount1ApplyOrderFee(0)\n      setPriceImpact(0)\n    }\n\n    return baseAmtVal\n\n  }, [tokens, quoteAmt, balance, quoteBalance, ammpools, ammPoolsBalances, base, quote, takerRate, currentPrice])\n\n  const onSwap = useCallback(() => {\n    console.log('try to swap ', baseAmt, base, ' -> ', quoteAmt, quote)\n\n    const swap = async () => {\n\n      if (!exchangeInfo?.exchangeAddress) {\n        throw Error('no exchangeAddress!')\n      }\n\n      if (!baseAmt || !quoteAmt) {\n        // throw Error('no baseAmt or quoteAmt!')\n        console.log('no baseAmt or quoteAmt!')\n        return\n      }\n\n      const {\n        ammInfo,\n        feeBips,\n      } = getAmmInfo(ammpools.ammpools, ammPoolsBalances, base, quote)\n\n      const allOrNone = false\n\n      const baseToken = getToken(tokens, base)\n\n      const quoteToken = getToken(tokens, quote)\n\n      // const storageId = await authKeyApi.getNextStorageId(accountId, baseToken.tokenId, apiKey)\n\n      let orderId: number\n      try {\n\n        const storageId = await userApi.getNextStorageId({\n          accountId,\n          sellTokenId: baseToken.tokenId\n        }, apiKey\n        )\n        // console.log('storageId:', storageId)\n\n        orderId = storageId.orderId\n\n      } catch (reason) {\n        dumpError400(reason, 'getNextStorageId')\n        throw Error('getNextStorageId failed')\n      }\n\n      // const validUntil = Math.ceil(new Date().getTime() / 1000) + 3600 * 1000\n      const validUntil = 1700000000\n\n      const amount0InBigNumber = toWEI(tokens, base, baseAmt)\n      const amount1WithSlippage = applySlippageTolerance(\n        tokens,\n        quote,\n        amount1ApplyOrderFee,\n        slippageTolerance,\n      )\n\n      const amount1InBigNumber = new BigNumber(amount1WithSlippage.outInWei).toFixed()\n\n      try {\n\n        console.log('amount0InBigNumber:', amount0InBigNumber, ' amount1InBigNumber:', amount1InBigNumber)\n\n        const request: SubmitOrderRequestV3 = {\n          exchange: exchangeInfo?.exchangeAddress,\n          accountId,\n          storageId: orderId,\n          sellToken: {\n            tokenId: baseToken.tokenId,\n            volume: amount0InBigNumber.toString()\n          },\n          buyToken: {\n            tokenId: quoteToken.tokenId,\n            volume: amount1InBigNumber.toString()\n          },\n          allOrNone,\n          validUntil,\n          maxFeeBips: 60,\n          fillAmountBOrS: false,\n          orderType: OrderType.ClassAmm,\n          eddsaSignature: '',\n        }\n\n        const response = await userApi.submitOrder(request, eddsaKey, apiKey)\n\n        console.log('response:', response)\n\n        UserStorage.setAmmOrder(response.hash)\n        setAmmOrder(response.hash)\n\n      } catch (reason) {\n        dumpError400(reason, 'submitOrderV3')\n      }\n\n    }\n\n    swap()\n\n  }, [accountId, ammPoolsBalances, ammpools, amount1ApplyOrderFee, apiKey,\n    base, baseAmt, eddsaKey, exchangeInfo?.exchangeAddress,\n    quote, quoteAmt, slippageTolerance, tokens, userApi])\n\n  useCustomDCEffect(() => {\n\n    const tradeCalcData: TradeCalcData<any> = {\n      coinSell: base, //name\n      coinBuy: quote,\n      StoB: parseFloat(currentPrice?.toFixed(4)),\n      BtoS: 0,\n      sellCoinInfoMap: left,\n      buyCoinInfoMap: right,\n      walletMap: walletMap,\n      slippage: slippageTolerance * 100 ,   //TODO which number is selected, from localstorage;\n      slippageTolerance:[0.1,0.5,1,'slippage:N'],    //TODO getLocalstorage Customer slippage\n      priceImpact: `${(Math.abs(priceImpact) * 100).toFixed(2)}%`,\n      minimumReceived: minimumReceived.toFixed(7),\n      fee: `${(Math.abs(fee + takerRate) / 100).toFixed(2)}%`,\n    }\n\n    const swapProps = {\n      tradeData: {\n        sell: {\n          belong: base,\n          balance: availToShow,\n          tradeValue: baseAmt,\n        }, buy: {\n          belong: quote,\n          balance: quoteToShow,\n          tradeValue: quoteAmt,\n        }\n      },\n      tradeCalcData,\n\n      onSwapClick: (tradeData: SwapTradeData<any>) => {\n        onSwap()\n      },\n      onCoinValueChange: (swapData: SwapData<SwapTradeData<any>>) => {\n\n        if (swapData.type === SwapPanelType.Sell && swapData.tradeData?.sell?.belong\n          && swapData.tradeData?.sell?.tradeValue) {\n          const quoteAmtVal = onBaseAmtInputChange(swapData.tradeData?.sell)\n\n          if (quoteAmtVal !== undefined) {\n            swapData.tradeData.buy = { ...swapData.tradeData.buy, tradeValue: quoteAmtVal }\n          }\n\n        } else if (swapData.type === SwapPanelType.Buy && swapData.tradeData?.buy?.belong\n          && swapData.tradeData?.buy?.tradeValue) {\n          const baseAmtVal = onQuoteAmtInputChange(swapData.tradeData?.buy)\n\n          if (baseAmtVal !== undefined) {\n            swapData.tradeData.sell = { ...swapData.tradeData.sell, tradeValue: baseAmtVal }\n          }\n        }\n\n        return swapData\n      },\n      doBeforeSwitch: async (switchData: SwapData<SwapTradeData<any>>) => {\n        return new Promise((res) => {\n          setTimeout(() => {\n            const { type, tradeData, to, } = switchData\n            // console.log('wait 100, with tradeData', tradeData)\n\n            switch (type) {\n              case SwapPanelType.Sell:\n                if (to === DirectionType.Menu) {\n                } else if (to === DirectionType.Button) {\n                  setQuote(undefined)\n                  setBase(tradeData.sell.belong)\n\n                  const right = getRight(ammpools.pairs, tradeData.sell.belong, tokens)\n\n                  if (right) {\n                    setRight(right.coinMapRight)\n                    setQuote(right.right[0])\n                  }\n                }\n                break\n              case SwapPanelType.Buy:\n                if (to === DirectionType.Menu) {\n                } else if (to === DirectionType.Button) {\n                  setQuote(tradeData.buy.belong)\n                }\n                break\n              case SwapPanelType.Exchange:\n                // exchange sell and buy\n                console.log('wait 100, with tradeData', tradeData)\n                setQuote(undefined)\n                setBase(tradeData.sell.belong)\n\n                const right = getRight(ammpools.pairs, tradeData.sell.belong, tokens)\n\n                if (right) {\n                  setRight(right.coinMapRight)\n                  setQuote(right.right[0])\n                }\n\n                setBaseAmt(0)\n                setQuoteAmt(0)\n\n                break\n            }\n\n            res(tradeCalcData)\n          }, 500)\n        })\n      },\n    }\n\n    setSwapProps(swapProps)\n\n  }, [slippageTolerance, priceImpact, fee, takerRate, left, right, walletMap,\n    minimumReceived, availToShow, quoteToShow, baseAmt, quoteAmt, currentPrice,\n    onBaseAmtInputChange,\n    onQuoteAmtInputChange,\n    onSwap])\n\n  return {\n    baseAmt,\n    quoteAmt,\n    slippageTolerance,\n\n    availToShow,\n    quoteToShow,\n    walletMap,\n    balances,\n    currentPrice,\n    minimumReceived,\n    priceImpact,\n    fee,\n    takerRate,\n\n    left,\n    right,\n\n    swapProps,\n\n    onBaseAmtInputChange,\n    onQuoteAmtInputChange,\n    onSwap,\n\n  }\n}","export function deepClone(data: any) {\n    if (!data || !(data instanceof Object) || (typeof data == \"function\")) {\n        return data || undefined;\n    }\n    let constructor = data.constructor;\n    let result = new constructor();\n    for (let key in data) {\n        if (data.hasOwnProperty(key)) {\n            result[key] = deepClone(data[key]);\n        }\n    }\n    return result;\n}\n","import React, { useState } from 'react'\n\nimport AppBar from '@material-ui/core/AppBar'\nimport Tabs from '@material-ui/core/Tabs'\nimport Tab from '@material-ui/core/Tab'\n\nimport {\n  Table as TableUI,\n  generateRows,\n  generateColumns,\n  Column,\n} from '@loopring-web/component-lib'\nimport { withTranslation } from 'react-i18next';\n\ninterface Row {\n  side: string;\n  amount: string;\n  price: string;\n  fee: string;\n  time: string;\n  sortColumn: string;\n  filterColumn: string;\n  cellExpend: {\n    value: string;\n    children: [];\n    isExpanded: boolean;\n  }\n  children?: Row[];\n  isExpanded?: boolean;\n  format?: any;\n}\n\nconst columnModeDefault: Column<Row, unknown>[] = [\n  { key: 'side', name: 'Side' },\n  { key: 'amount', name: 'Amount' },\n  { key: 'price', name: 'Price' },\n  { key: 'fee', name: 'Fee' },\n  { key: 'time', name: 'Time' },\n]\n\nconst ammColumnModeDefault: Column<Row, unknown>[] = [\n  { key: 'side', name: 'Side' },\n  { key: 'price', name: 'Price' },\n  { key: 'feeAmount', name: 'FeeAmount' },\n  { key: 'time', name: 'Time' },\n]\n\nconst applyProps = (index: number) => {\n  return {\n    id: `simple-tab-${index}`,\n    'aria-controls': `simple-tabpanel-${index}`,\n  }\n}\nconst Table = withTranslation('common',{withRef:true})(TableUI);\nconst TabPanel = (props: any) => {\n  const { children, value, index, ...other } = props;\n\n  return (\n    <div\n      role=\"tabpanel\"\n      hidden={value !== index}\n      id={`simple-tabpanel-${index}`}\n      aria-labelledby={`simple-tab-${index}`}\n      {...other}\n    >\n      {value === index && (\n        <React.Fragment>{children}</React.Fragment>\n      )}\n    </div>\n  )\n}\n\nconst TradePanel = ({ myTrades, recentTrades }: { myTrades: any, recentTrades: any }) => {\n\n  const [value, setValue] = useState(0)\n\n  const handleChange = (event: any, newValue: any) => {\n    setValue(newValue)\n  }\n\n  const myArgs: any = {\n    rawData: myTrades ? myTrades : [],\n    columnMode: columnModeDefault,\n    generateRows,\n    generateColumns,\n  }\n\n  const recentArgs: any = {\n    rawData: recentTrades ? recentTrades : [],\n    columnMode: ammColumnModeDefault,\n    generateRows,\n    generateColumns,\n  }\n\n  return (\n    <>\n      {/*<AppBar position=\"static\">*/}\n      <Tabs\n          value={value}\n          onChange={handleChange}\n          aria-label=\"tabs switch\"\n      >\n        <Tab label=\"My Trades\" {...applyProps(0)} />\n        <Tab label=\"Recent Trades\" {...applyProps(1)} />\n      </Tabs>\n      {/*</AppBar>*/}\n      <TabPanel value={value} index={0}>\n        <Table {...myArgs} />\n      </TabPanel>\n      <TabPanel value={value} index={1}>\n        <Table {...recentArgs} />\n      </TabPanel>\n    </>\n  )\n\n}\n\nexport default TradePanel\n","import TradePanelUi from './TradePanel'\nimport { useGetMyTrades, useGetRecentTrades, } from './hooks'\n\nconst TradePanel = (props: any) => {\n\n  const { market, poolAddress, } = props\n\n  const { myTrades } = useGetMyTrades(market)\n\n  const { recentTrades } = useGetRecentTrades(poolAddress)\n\n  return (\n    <TradePanelUi myTrades={myTrades} recentTrades={recentTrades} />\n  )\n\n}\n\nexport default TradePanel\n","import { useState } from 'react'\n\nimport { useAmmpoolAPI, useUserAPI } from '@loopring-web/sdk/hooks/common/useApi'\nimport { useAccount } from 'stores/account/hook'\n\nimport { dumpError400 } from '@loopring-web/sdk/utils/network_tools'\n\nimport { useCustomDCEffect } from '@loopring-web/sdk/hooks/useCustomDCEffect'\nimport { AmmTrade, FilledType } from '@loopring-web/sdk/defs/loopring_defs'\n\nexport function useGetMyTrades(market: string) {\n\n  const { apiKey, accountId, } = useAccount()\n\n  const userApi = useUserAPI()\n\n  const [myTrades, setMyTrades] = useState<any>()\n\n  useCustomDCEffect(() => {\n    if (!userApi || !accountId || !apiKey || !market) {\n      return\n    }\n\n    userApi.getUserTrades({\n      accountId,\n      market,\n      fillTypes: FilledType.amm,\n    }, apiKey).then((trades) => {\n\n      let tradesNew: any = []\n      trades.trades.forEach((item: any) => {\n        tradesNew.push([item[2], item[3], item[4], item[6], item[0]])\n      })\n      \n      setMyTrades(tradesNew)\n    }).catch((reason) => {\n      dumpError400(reason)\n    })\n\n  }, [userApi, accountId, apiKey, market])\n\n  return {\n    myTrades,\n  }\n}\n\nexport function useGetRecentTrades(ammPoolAddress: string) {\n\n  const ammPoolApi = useAmmpoolAPI()\n\n  const [recentTrades, setRecentTrades] = useState<any>()\n\n  useCustomDCEffect(() => {\n    if (!ammPoolApi || !ammPoolAddress) {\n      return\n    }\n\n    ammPoolApi.getAmmPoolTrades({\n      ammPoolAddress\n    }).then((trades) => {\n      let tradesNew: any = []\n      trades.trades.forEach((item: AmmTrade) => {\n        tradesNew.push([item.side, item.price, item.feeAmount, item.createdAt])\n      })\n      // console.log('getAmmPoolTrades:', tradesNew)\n      setRecentTrades(tradesNew)\n    }).catch((reason) => {\n      dumpError400(reason)\n    })\n\n  }, [ammPoolApi, ammPoolAddress])\n\n  return {\n    recentTrades,\n  }\n}\n","import { Box, Grid, Paper, } from '@material-ui/core'\nimport SwapPanel from './panel/SwapPanel'\nimport { useSwapPage } from './hook'\nimport { WithTranslation, withTranslation } from 'react-i18next';\nimport BasicInfoPanel from './panel/BasicInfoPanel';\nimport { useSwap } from './panel/SwapPanel/hooks';\nimport TradePanel from './panel/TradePanel';\nimport { ChartUnit } from '@loopring-web/component-lib/static-resource';\nimport styled from 'styled-components';\n\nconst PaperStyled = styled(Paper)`\n  @media (min-height: 672px) {\n    position: fixed;\n  }\n\n`\nconst SwapPage = withTranslation('common')(({...rest}: WithTranslation) => {\n\n    const props = useSwapPage()\n\n    // const {\n    //   base,\n    //   quote,\n    //   market,\n    //   tokens,\n    //   poolAddress,\n    //     ..\n    // } = props\n    const {\n        base, quote, setBase, setQuote, tokens, market,\n        poolAddress, ammpools, ammPoolsBalances,\n    } = props;\n    const {swapProps} = useSwap(base, quote, setBase, setQuote, tokens, market, poolAddress, ammpools, ammPoolsBalances);\n\n    return <>\n        <Box flex={1}  height={500} marginRight={4}>\n            <BasicInfoPanel {...{...rest, swapProps, props}} />\n            <TradePanel market={market} poolAddress={poolAddress}/>\n\n        </Box>\n        <Box display={'flex'} style={{width:'var(--swap-box-width)'}} >\n            <PaperStyled >\n                <SwapPanel {...{\n                    ...rest, swapProps\n                }} />\n            </PaperStyled>\n        </Box>\n\n    </>\n});\n\n\nexport default SwapPage\n","import { useRef } from 'react'\n\n// import Qrcode from 'components/qrcodes/Qrcode'\n\n\nimport { useAccount } from 'stores/account/hook'\n\nimport { useGetExchangeInfo, useGetGas, useGetMarkets, useGetTokens } from 'hooks/exchange/useExchangeAPI'\n\nimport { useAmmpoolWs } from '@loopring-web/sdk/hooks/common/useWebsocketApi'\n\nconst DebugPage = () => {\n\n  const inputRef = useRef<HTMLInputElement>(null)\n\n  const { account, isNoAccount, apiKey } = useAccount()\n\n  const {socketData} = useAmmpoolWs(apiKey)\n\n  const { markets } = useGetMarkets()\n\n  const { exchangeInfo } = useGetExchangeInfo()\n\n  const { tokens } = useGetTokens()\n\n  const { gas } = useGetGas()\n\n  const gasPrice = gas?.data\n\n  console.log('account:', account)\n  console.log('exchangeInfo:', exchangeInfo)\n  console.log('tokens:', tokens)\n\n  const showAddr = account.accAddr ? account.accAddr : ''\n\n  return (\n    <div>\n      Debug\n      <div>account:{JSON.stringify(account)}</div>\n      <div>eddsaKey:{account.eddsaKey}</div>\n      <div>wsdata: {JSON.stringify(socketData)}</div>\n      <div>----------------------------</div>\n      <div>markets:{JSON.stringify(markets)}</div>\n      <div>----------------------------</div>\n      <div>depositAddress:{exchangeInfo?.depositAddress}</div>\n      <div>exchangeAddress:{exchangeInfo?.exchangeAddress}</div>\n      <div>----------------------------</div>\n      {/*<div>exchangeInfo:{JSON.stringify(exchangeInfo)}</div>\n      <div>----------------------------</div>*/}\n      <div>tokens:{JSON.stringify(tokens)}</div>\n      <div>----------------------------</div>\n\n      {/*{isNoAccount() && <Qrcode value={showAddr} size={300} />}*/}\n      {/*<input type='input' ref={inputRef} width=\"150px\" />*/}\n      {/*<DepositBtn onClick={deposit} />*/}\n    </div>\n  )\n\n}\n\nexport default DebugPage\n","import { TransactionTable, } from '@loopring-web/component-lib'\nimport { WithTranslation, withTranslation } from 'react-i18next'\nimport { useGetTxs } from './hooks'\n\nconst TxPanel = withTranslation('common')((rest:WithTranslation<'common'>) => {\n\n    const { txs } = useGetTxs()\n\n    const txList = txs !== undefined ? txs: []\n\n    return (\n        <>\n            <TransactionTable rawData={txList} {...{...rest}}/>\n        </>\n    )\n})\n\nexport default TxPanel\n","import { useState } from 'react'\n\nimport { useAmmpoolAPI, useUserAPI } from \"@loopring-web/sdk/hooks/common/useApi\"\nimport { useCustomDCEffect } from '@loopring-web/sdk/hooks/useCustomDCEffect'\nimport { useAccount } from 'stores/account/hook'\nimport { TransactionStatus, RawDataTransactionItem } from '@loopring-web/component-lib'\n\nimport { TxStatus } from '@loopring-web/sdk/defs/loopring_defs'\nimport { TransactionTradeTypes } from '@loopring-web/component-lib/components/tableList/transactionsTable/Interface';\n\nexport function useGetTxs() {\n\n    const { accountId, apiKey } = useAccount()\n\n    const userApi = useUserAPI()\n\n    const [txs, setTxs] = useState<RawDataTransactionItem[]>()\n\n    useCustomDCEffect(async() => {\n\n        if (!userApi || !accountId || !apiKey) {\n            return\n        }\n\n        const txs = await userApi.getUserTranferList({ accountId }, apiKey)\n\n        let tmpTx: RawDataTransactionItem[] = []\n\n        txs.transactions.forEach((item: any, index: number) => {\n            tmpTx.push({from: {\n                    address: item.senderAddress,\n                    env: ''\n                },\n                to: {\n                    address: item.receiverAddress,\n                    env: ''\n                },\n                amount: item.amount,\n                fee: {\n                    unit: item.feeTokenSymbol,\n                    value: item.feeAmount\n                },\n                memo: item.symbol,\n                time: item.timestamp,\n                txnHash: item.hash,\n                status: item.status,\n                token:item.token,\n                tradeType:TransactionTradeTypes.allTypes,\n            })\n        })\n\n        setTxs(tmpTx)\n\n    }, [accountId, apiKey, userApi])\n\n    return {\n        txs,\n    }\n}\n","import { useCallback } from \"react\";\nimport { useDispatch } from \"react-redux\"\n\nimport {\n    setShowDeposit,\n    setShowResetAccount,\n    setShowTransfer,\n    setShowWithdraw,\n} from '@loopring-web/component-lib'\n\nexport function useModals() {\n\n    const dispatch = useDispatch()\n\n    const ShowDeposit = useCallback((isShow: boolean)=>dispatch(setShowDeposit({isShow})), [dispatch])\n    const ShowTransfer = useCallback((isShow: boolean)=>dispatch(setShowTransfer({isShow})), [dispatch])\n    const ShowWithdraw = useCallback((isShow: boolean)=>dispatch(setShowWithdraw({isShow})), [dispatch])\n    const ShowResetAccount = useCallback((isShow: boolean)=>dispatch(setShowResetAccount({isShow})), [dispatch])\n\n    return {\n        ShowDeposit,\n        ShowTransfer,\n        ShowWithdraw,\n        ShowResetAccount,\n    }\n}","import { useCallback, useState } from 'react'\nimport Web3 from 'web3'\n\nimport {\n    IBData, CoinInfo, WalletMap, WalletCoin, CoinMap,\n} from '@loopring-web/component-lib/static-resource'\n\nimport { useCustomDCEffect } from '@loopring-web/sdk/hooks/useCustomDCEffect'\nimport { useExchangeAPI, useUserAPI } from '@loopring-web/sdk/hooks/common/useApi'\n\nimport { getIcon } from 'utils/swap_calc_utils'\nimport { useAccount, useWeb3Account } from 'stores/account/hook'\nimport { useGetExchangeInfo, useGetTokens } from 'hooks/exchange/useExchangeAPI'\n\nimport { fromWEI } from 'utils/swap_calc_utils'\n\nimport * as contract from '@loopring-web/sdk/api/contract_api'\n\nimport { Lv2Account } from 'defs/account_defs'\n\nimport { ExchangeAPI } from '@loopring-web/sdk/api/exchange_api'\nimport { ConnectorNames } from '@loopring-web/sdk/defs/web3_defs'\nimport { dumpError400 } from '@loopring-web/sdk/utils/network_tools'\n\nimport {\n    TokenInfo,\n    OffchainFeeReqType,\n    GetNextStorageIdRequest,\n    OffChainWithdrawalRequestV3,\n    GetOffchainFeeAmtRequest,\n    OriginTransferRequestV3,\n    VALID_UNTIL,\n} from '@loopring-web/sdk/defs/loopring_defs'\n\nimport { useGetUserBalances } from 'hooks/exchange/useUserAPI'\n\nimport {\n    DepositProps,\n    ResetProps,\n    SwitchData,\n    TradeBtnStatus,\n    TransferProps,\n    WithdrawProps,\n} from '@loopring-web/component-lib'\n\nimport { WithdrawType, WithdrawTypes } from '@loopring-web/component-lib/src/static-resource'\nimport { useModals } from 'hooks/modal/useModals'\n\nexport function useCoinMap(exchangeApi: ExchangeAPI, tokens: any) {\n\n    const [coinMap, setCoinMap] = useState<CoinMap<any, CoinInfo<any>>>({})\n\n    useCustomDCEffect(async () => {\n\n        if (!exchangeApi || !tokens) {\n            return\n        }\n\n        const keys = Reflect.ownKeys(tokens)\n\n        let coinMap: CoinMap<any, CoinInfo<any>> = {}\n\n        keys.forEach((key: any) => {\n\n            if (!(key as string).startsWith('LP-')) {\n                coinMap[key] = {\n                    icon: getIcon(key, tokens),\n                    name: key,\n                    simpleName: key,\n                    description: '',\n                    company: '',\n                }\n            }\n\n        })\n\n        setCoinMap(coinMap)\n\n    }, [exchangeApi, tokens])\n\n    return {\n        coinMap,\n    }\n\n}\n\nexport function useLv1WalletMap(exchangeApi: ExchangeAPI, account: Lv2Account, tokens: any) {\n\n    const [walletMap, setWalletMap] = useState<WalletMap<any, WalletCoin<any>>>({})\n\n    useCustomDCEffect(async () => {\n\n        if (!exchangeApi || !account || !account.accAddr || !tokens) {\n            return\n        }\n\n        let walletMap: WalletMap<any, WalletCoin<any>> = {}\n\n        const { tokenBalances } = await exchangeApi.getTokenBalances({\n            owner: account.accAddr, token: ''\n        }, tokens)\n\n        const keys = Reflect.ownKeys(tokenBalances)\n\n        keys.forEach((item: any) => {\n            const balance = tokenBalances[item]\n            walletMap[item] = {\n                belong: item,\n                count: fromWEI(tokens, item, balance) as number,\n            }\n        })\n\n        setWalletMap(walletMap)\n\n    }, [exchangeApi, account, tokens])\n\n    return {\n        walletMap,\n    }\n\n}\n\nexport function useLv2WalletMap(tokens: any) {\n\n    const { balances } = useGetUserBalances(tokens)\n\n    const [walletMap, setWalletMap] = useState<WalletMap<any, WalletCoin<any>>>({})\n\n    useCustomDCEffect(() => {\n        let walletMap: WalletMap<any, WalletCoin<any>> = {}\n        if (balances && balances.symbol) {\n            const keys = Reflect.ownKeys(balances.symbol)\n\n            keys.forEach((item: any) => {\n                const balance = balances.symbol[item]\n                walletMap[item] = {\n                    belong: item,\n                    count: fromWEI(tokens, item, balance) as number,\n                }\n            })\n        }\n\n        console.log('lv2:', walletMap)\n\n        setWalletMap(walletMap)\n    }, [balances, tokens])\n\n    return {\n        walletMap,\n    }\n\n}\n\nexport function useChargeFeeList(tokenSymbol: string | undefined, requestType: OffchainFeeReqType) {\n\n    const api = useUserAPI()\n\n    const { accountId, apiKey, } = useAccount()\n\n    const [chargeFeeList, setChargeFeeList] = useState<any>([])\n\n    useCustomDCEffect(async () => {\n\n        console.log('!!!!!!!!!useCustomDCEffect useChargeFeeList:', tokenSymbol, accountId)\n\n        if (!accountId || !tokenSymbol) {\n            return\n        }\n\n        let chargeFeeList: any[] = []\n\n        try {\n\n            const request: GetOffchainFeeAmtRequest = {\n                accountId,\n                tokenSymbol,\n                requestType,\n            }\n\n            const response = await api.getOffchainFeeAmt(request, apiKey)\n\n            if (response) {\n                response.fees.forEach((item: any, index: number) => {\n                    chargeFeeList.push({ belong: item.token, fee: item.fee })\n                })\n\n                setChargeFeeList(chargeFeeList)\n            }\n            console.log('response:', response)\n\n        } catch (reason) {\n            dumpError400(reason)\n        }\n\n\n        setChargeFeeList(chargeFeeList)\n\n    }, [accountId, apiKey, tokenSymbol])\n\n    return {\n        chargeFeeList,\n    }\n\n}\n\nexport function useModalProps() {\n\n    const {\n        ShowDeposit,\n        ShowTransfer,\n        ShowWithdraw,\n        ShowResetAccount,\n    } = useModals()\n\n    const { chainId, isConnected, connector, } = useWeb3Account()\n\n    const { exchangeInfo } = useGetExchangeInfo()\n\n    const { account, apiKey, accountId, eddsaKey, } = useAccount()\n\n    const { tokens: tokensAll } = useGetTokens()\n\n    const tokens = tokensAll?.tokenSymbolMap\n\n    const userApi = useUserAPI()\n\n    const exchangeApi = useExchangeAPI()\n\n    const { coinMap } = useCoinMap(exchangeApi, tokens)\n\n    const { walletMap: walletMap_Lv1 } = useLv1WalletMap(exchangeApi, account, tokens)\n\n    const { walletMap: walletMap_Lv2 } = useLv2WalletMap(tokens)\n\n    const deposit = useCallback(async (token: string, amt: any) => {\n\n        if (!tokens || !isConnected || !connector || !exchangeInfo?.exchangeAddress || !exchangeInfo?.depositAddress) {\n            console.log(`exchangeInfo:${exchangeInfo} deposit exit!!!!!`)\n            return\n        }\n\n        try {\n            const tokenInfo: TokenInfo = tokens[token]\n\n            const provider = await connector.getProvider()\n            const web3 = new Web3(provider as any)\n\n            let sendByMetaMask = account.connectName === ConnectorNames.Injected\n            sendByMetaMask = true\n\n            const gasPrice = (await exchangeApi.getGasPrice()).data / 1e+9\n            const gasLimit = 350000\n\n            const nonce = await contract.getNonce(web3, account.accAddr)\n\n            console.log('gasPrice:', gasPrice)\n            console.log('account.connectName:', account.connectName, ' tokenInfo:', tokenInfo)\n\n            const response = await contract.approveMax(web3, account.accAddr, tokenInfo.address,\n                exchangeInfo?.depositAddress, gasPrice, gasLimit, chainId, nonce, sendByMetaMask)\n\n            console.log('response:', response)\n\n            const fee = 0\n\n            const response2 = await contract.deposit(web3, account.accAddr,\n                exchangeInfo?.exchangeAddress, tokenInfo, amt, fee,\n                gasPrice, gasLimit, chainId, nonce + 1, sendByMetaMask)\n\n            console.log('response2:', response2)\n\n\n        } catch (reason) {\n            dumpError400(reason)\n        }\n\n    }, [chainId, isConnected, connector, account, exchangeInfo, tokens, exchangeApi])\n\n    const withdraw = useCallback(async (token: string, amt: any) => {\n\n        console.log('withdraw apiKey:', apiKey, ' exchangeInfo:', exchangeInfo, ' exchangeAddr:', exchangeInfo.exchangeAddress)\n\n        if (!account || !account.accountId || !account.accAddr\n            || !connector || !chainId || !apiKey || !exchangeInfo\n            || !exchangeInfo.exchangeAddress) {\n            console.log('return directly!!!!!', account, connector, chainId, apiKey, exchangeInfo)\n            return\n        }\n\n        amt = '5500000000000000000'\n\n        const fee = '5500000000000000000'\n\n        console.log('exchangeAddress:', exchangeInfo.exchangeAddress)\n\n        try {\n\n            const request: GetNextStorageIdRequest = {\n                accountId: account.accountId,\n                sellTokenId: 1\n            }\n\n            const storageId = await userApi.getNextStorageId(request, apiKey)\n\n            const request2: OffChainWithdrawalRequestV3 = {\n                exchange: exchangeInfo.exchangeAddress,\n                owner: account.accAddr,\n                to: account.accAddr,\n                accountId: account.accountId,\n                storageId: storageId.offchainId,\n                token: {\n                    tokenId: '1',\n                    volume: '100000000000000000000',\n                },\n                maxFee: {\n                    tokenId: '1',\n                    volume: '9400000000000000000',\n                },\n                extraData: '',\n                minGas: 0,\n                validUntil: VALID_UNTIL,\n            }\n\n            const provider = await connector.getProvider()\n            const web3 = new Web3(provider as any)\n\n            const response = await userApi.submitOffchainWithdraw(request2, web3, chainId, ConnectorNames.Injected,\n                account.eddsaKey, apiKey, false)\n\n            console.log(response)\n\n        } catch (reason) {\n            dumpError400(reason)\n        }\n\n    }, [apiKey, account, connector, exchangeInfo, chainId, userApi])\n\n    const transfer = useCallback(async(amt: number, payeeAddr: string = '0xb6AdaC3e924B4985Ad74646FEa3610f14cDFB79c') => {\n\n        if (!connector || !apiKey || !chainId || !accountId || !account?.accAddr) {\n            return\n        }\n        \n        const request: GetNextStorageIdRequest = {\n            accountId, \n            sellTokenId: 1\n        }\n        const storageId = await userApi.getNextStorageId(request, apiKey)\n        \n        console.log(`amt: ${amt} storageId:${JSON.stringify(storageId)}`)\n\n        try {\n\n            const provider = await connector.getProvider()\n            const web3 = new Web3(provider as any)\n\n            let walletType = account.connectName\n            walletType = ConnectorNames.Injected\n\n            const payeeAcc = await exchangeApi.getAccount({ owner: payeeAddr})\n\n            let payeeId = 0\n            if (payeeAcc) {\n                payeeId = payeeAcc.accountId\n            }\n\n            const request2: OriginTransferRequestV3 = {\n                exchange: exchangeInfo.exchangeAddress,\n                payerAddr: account.accAddr,\n                payerId: accountId,\n                payeeAddr,\n                payeeId,\n                storageId: storageId.offchainId,\n                token: {\n                    tokenId: '1',\n                    volume: '100000000000000000000',\n                },\n                maxFee: {\n                    tokenId: '1',\n                    volume: '9400000000000000000',\n                },\n                validUntil: VALID_UNTIL,\n            }\n\n            console.log(`request2:${JSON.stringify(request2)}`)\n\n            const response = await userApi.submitInternalTransfer(request2, web3, chainId, walletType, \n                eddsaKey, apiKey, false)\n    \n            console.log(response)\n\n        } catch(reason) {\n            dumpError400(reason)\n        }\n\n    }, [apiKey, accountId, account, connector, exchangeInfo, chainId, eddsaKey, userApi, exchangeApi])\n\n    const [depositValue, setDepositValue] = useState<IBData<string> | { belong: undefined, amt: 0 }>({ belong: undefined, amt: 0 })\n\n    // deposit\n\n    let depositProps: DepositProps<any, any> = {\n        tradeData: { belong: undefined },\n        coinMap: coinMap,\n        walletMap: walletMap_Lv1,\n        depositBtnStatus: TradeBtnStatus.AVAILABLE,\n        onDepositClick: (tradeData: any) => {\n            console.log('1. onDepositClick', depositValue)\n            if (depositValue && depositValue.belong) {\n                deposit(depositValue.belong.toString(), depositValue.tradeValue)\n            }\n            ShowDeposit(false)\n        },\n        onCoinValueChange: (data: any) => {\n            console.log('2. onCoinValueChange', data)\n            if (depositValue !== data) {\n                console.log('2. setTradeValue', data)\n                setDepositValue(data)\n            }\n        },\n        doBeforeSwitch: async (props: SwitchData<any>, switchType: 'Tomenu' | 'Tobutton') => {\n            return new Promise((res) => {\n                setTimeout(() => {\n                    console.log('wait 100, with props', props, switchType);\n                    console.log('props?.tradeData?.belong:', props?.tradeData?.belong);\n                    if (props?.tradeData?.belong) {\n                        console.log('props?.tradeData?.belong:', props?.tradeData?.belong);\n                        setTokenSymbol(props.tradeData.belong)\n                    }\n                    res();\n                }, 500)\n            })\n        },\n    }\n\n    // withdraw\n    const [withdrawValue, setWithdrawValue] = useState<IBData<any> | { belong: undefined, amt: 0 }>({ belong: undefined, amt: 0 })\n\n    const [tokenSymbol, setTokenSymbol] = useState<string>('')\n    const { chargeFeeList: withdrawalFeeList } = useChargeFeeList(tokenSymbol, OffchainFeeReqType.OFFCHAIN_WITHDRAWAL)\n\n    let withdrawProps: WithdrawProps<any, any> = {\n        tradeData: { belong: undefined },\n        coinMap: coinMap,\n        walletMap: walletMap_Lv2,\n        withdrawBtnStatus: TradeBtnStatus.AVAILABLE,\n        onWithdrawClick: (tradeData: any) => {\n            console.log('Swap button click', withdrawValue)\n            if (withdrawValue && withdrawValue.belong) {\n                withdraw(withdrawValue.belong.toString(), withdrawValue.tradeValue)\n            }\n            ShowWithdraw(false)\n        },\n        onCoinValueChange: (data: any) => {\n            if (withdrawValue !== data) {\n                console.log('2. setWithdrawValue', data)\n                setWithdrawValue(data)\n            }\n        },\n        doBeforeSwitch: async (props: SwitchData<any>, switchType: 'Tomenu' | 'Tobutton') => {\n            return new Promise((res: any) => {\n                setTimeout(() => {\n                    console.log('wait 100, with props', props, switchType);\n\n                    if (props?.tradeData?.belong) {\n                        console.log('props?.tradeData?.belong:', props?.tradeData?.belong);\n                        setTokenSymbol(props.tradeData.belong)\n                    }\n\n                    res();\n                }, 500)\n            })\n        },\n        withdrawType: WithdrawType.Fast,\n        withdrawTypes: WithdrawTypes,\n        chargeFeeToken: 'ETH',\n        chargeFeeTokenList: withdrawalFeeList,\n        handleOnAddressChange: (value: any) => {\n            console.log('handleOnAddressChange', value);\n        },\n        handleAddressError: (_value: any) => {\n            return { error: true, message: 'any error' }\n        }\n    }\n\n    // transfer\n    const [transferValue, setTransferValue] = useState<IBData<any> | { belong: undefined, amt: 0 }>({ belong: undefined, amt: 0 })\n\n    const [transferTokenSymbol, setTransferTokenSymbol] = useState<string>('')\n    const { chargeFeeList: transferFeeList } = useChargeFeeList(transferTokenSymbol, OffchainFeeReqType.TRANSFER)\n\n    let transferProps: TransferProps<any, any> = {\n        tradeData: { belong: undefined },\n        coinMap: coinMap,\n        walletMap: walletMap_Lv2,\n        transferBtnStatus: TradeBtnStatus.AVAILABLE,\n        onTransferClick: (tradeData: any) => {\n            console.log('onTransferClick:', transferValue);\n            if (transferValue && transferValue.belong) {\n                transfer(transferValue.tradeValue)\n            }\n\n            ShowTransfer(false)\n        },\n        onCoinValueChange: (data: any) => {\n\n            if (transferValue !== data) {\n                setTransferValue(data)\n            }\n\n        },\n        doBeforeSwitch: async (props: SwitchData<any>, switchType: 'Tomenu' | 'Tobutton') => {\n            return new Promise((res: any) => {\n                setTimeout(() => {\n                    \n                    if (props?.tradeData?.belong) {\n                        console.log('wait 100, with props', props, switchType);\n                        setTransferTokenSymbol(props.tradeData.belong)\n                    }\n\n                    res();\n                }, 500)\n            })\n        },\n\n        chargeFeeToken: 'ETH',\n        chargeFeeTokenList: transferFeeList,\n        handleOnAddressChange: (value: any) => {\n            console.log('handleOnAddressChange', value);\n        },\n        handleAddressError: (_value: any) => {\n            return { error: true, message: 'any error' }\n        }\n    }\n\n    // reset\n    const [resetValue, setResetValue] = useState<IBData<any> | { belong: undefined, amt: 0 }>({ belong: undefined, amt: 0 })\n\n    let resetProps: ResetProps<any, any> = {\n        tradeData: { belong: undefined },\n        coinMap: coinMap,\n        walletMap: walletMap_Lv2,\n        resetBtnStatus: TradeBtnStatus.AVAILABLE,\n        onResetClick: (tradeData: any) => {\n            console.log('onResetClick', resetValue)\n            if (resetValue && resetValue.belong) {\n            }\n\n            ShowResetAccount(false)\n        },\n        onCoinValueChange: (data: any) => {\n            console.log(data)\n\n            if (resetValue !== data) {\n                setResetValue(data)\n            }\n\n        },\n        doBeforeSwitch: async (props: SwitchData<any>, switchType: 'Tomenu' | 'Tobutton') => {\n            return new Promise((res) => {\n                setTimeout(() => {\n                    console.log('wait 100, with props', props, switchType);\n                    res();\n                }, 500)\n            })\n        },\n        fee: { count: 234, price: 123 }\n    }\n\n    return {\n        depositProps, withdrawProps, transferProps, resetProps,\n    }\n}\n","import { WithTranslation, withTranslation } from 'react-i18next'\nimport { PriceTag } from '@loopring-web/component-lib/static-resource'\nimport { Box, Paper } from '@material-ui/core'\nimport styled from '@emotion/styled'\nimport { AssetTitleProps, AssetTitle, AssetsTable, ModalPanel, } from '@loopring-web/component-lib'\nimport { useModals } from 'hooks/modal/useModals'\nimport { useModalProps } from './hooks'\nimport { useGetUserBalances } from 'hooks/exchange/useUserAPI'\nimport { useGetTokens } from 'hooks/exchange/useExchangeAPI'\n\nconst StylePaper = styled(Box)`\n  width: 100%;\n  height: 100%;\n  flex: 1;\n  background-color: ${({ theme }) => theme.colorBase.background().default};\n  border-radius: ${({ theme }) => theme.unit}px;\n  padding: 20px;\n\n  .title {\n    font-family: Gilroy-Medium;\n    font-size: ${({ theme }) => theme.unit * 3}px;\n    line-height: 19px;\n  }\n\n  .tableWrapper {\n    margin-top: 20px;\n    border: 1px solid ${({ theme }) => theme.colorBase.borderColor};\n    border-radius: ${({ theme }) => theme.unit}px;\n    padding: 26px;\n  }\n` as typeof Paper;\n\nconst StyledChartWrapper = styled(Box)`\n    display: flex;\n    align-items: center;\n\n    >div {\n        flex: 1;\n    }\n`\n\nconst AssetPanel = withTranslation('common')((rest: WithTranslation<'common'>) => {\n\n    const {\n        depositProps,\n        withdrawProps,\n        transferProps,\n        resetProps,\n    } = useModalProps()\n\n    const {\n        ShowDeposit,\n        ShowTransfer,\n        ShowWithdraw,\n        ShowResetAccount,\n    } = useModals()\n\n    const onShowDeposit = () => {\n        ShowDeposit(true)\n    }\n\n    const onShowTransfer = () => {\n        ShowTransfer(true)\n    }\n\n    const onShowWithdraw = () => {\n        ShowWithdraw(true)\n    }\n\n    const AssetTitleProps: AssetTitleProps = {\n        assetInfo: {\n            totalAsset: 123456.789,\n            priceTag: PriceTag.Dollar,\n        },\n        onShowDeposit,\n        onShowTransfer,\n        onShowWithdraw,\n    }\n\n    const { tokens: tokensAll } = useGetTokens()\n\n    const tokens = tokensAll?.tokenSymbolMap\n\n    const { balances } = useGetUserBalances(tokens)\n\n    console.log('balances:', balances)\n\n    return (\n        <>\n            <Box marginBottom={3}>\n                <AssetTitle  {...{\n                    ...rest,\n                    ...AssetTitleProps\n                }} />\n            </Box>\n            <StylePaper>\n                <div className=\"title\">Assets</div>\n                {/* <StyledChartWrapper>\n                    <div>test</div>\n                    <Box>\n                        <ScaleAreaChart type=\"depth\" data={[]} />\n                    </Box>\n                </StyledChartWrapper> */}\n                <div className=\"tableWrapper\">\n                    <AssetsTable rawData={[]} />\n                </div>\n            </StylePaper>\n\n            <ModalPanel transferProps={transferProps} withDrawProps={withdrawProps} depositProps={depositProps} resetProps={resetProps}></ModalPanel>\n\n        </>\n    )\n})\n\nexport default AssetPanel\n","import { TransactionTable, } from '@loopring-web/component-lib'\nimport { WithTranslation, withTranslation } from 'react-i18next'\nimport { useGetTxs } from './hooks'\n\nconst TradePanel = withTranslation('common')((rest:WithTranslation<'common'>) => {\n\n    const { txs } = useGetTxs()\n\n    const txList = txs !== undefined ? txs: []\n\n    return (\n        <>\n            <TransactionTable rawData={txList} {...{...rest}}/>\n        </>\n    )\n})\n\nexport default TradePanel\n","import { useState } from 'react'\n\nimport { useAmmpoolAPI, useUserAPI } from \"@loopring-web/sdk/hooks/common/useApi\"\nimport { useCustomDCEffect } from '@loopring-web/sdk/hooks/useCustomDCEffect'\nimport { useAccount } from 'stores/account/hook'\nimport { TransactionStatus, RawDataTransactionItem } from '@loopring-web/component-lib'\n\nimport { TxStatus } from '@loopring-web/sdk/defs/loopring_defs'\nimport { TransactionTradeTypes } from '@loopring-web/component-lib/components/tableList/transactionsTable/Interface';\n\n/*\n    {\n        from: {\n            address: '0x5e8cxxxxxe741',\n            env: 'Ethereum'\n        },\n        to: 'My Loopring',\n        amount: 25987.09324,\n        fee: {\n            unit: 'ETH',\n            value: 0.0993\n        },\n        memo: 'NoteNoteNoteNoteNoteNoteNote',\n        time: 3,\n        txnHash: '0x2b21xxxxxxx02',\n        status: TransactionStatus.success\n    },\n */\n\nexport function useGetTxs() {\n\n    const { accountId, apiKey } = useAccount()\n\n    const userApi = useUserAPI()\n\n    const [txs, setTxs] = useState<RawDataTransactionItem[]>()\n\n    useCustomDCEffect(async() => {\n\n        if (!userApi || !accountId || !apiKey) {\n            return\n        }\n\n        const txs = await userApi.getUserTranferList({ accountId }, apiKey)\n\n        let tmpTx: RawDataTransactionItem[] = []\n\n        txs.transactions.forEach((item: any, index: number) => {\n            tmpTx.push({from: {\n                    address: item.senderAddress,\n                    env: ''\n                },\n                to: {\n                    address: item.receiverAddress,\n                    env: ''\n                },\n                amount: item.amount,\n                fee: {\n                    unit: item.feeTokenSymbol,\n                    value: item.feeAmount\n                },\n                memo: item.symbol,\n                time: item.timestamp,\n                txnHash: item.hash,\n                status: item.status,\n                token:item.token,\n                tradeType:TransactionTradeTypes.allTypes,\n            })\n        })\n\n        setTxs(tmpTx)\n\n    }, [accountId, apiKey, userApi])\n\n    return {\n        txs,\n    }\n}\n","import { OrderHistoryTable, } from '@loopring-web/component-lib'\nimport { WithTranslation, withTranslation } from 'react-i18next'\n\nconst rawDataOrderHistory: any[] = [\n    ['Sell', [{type: 'out', key: 'ETH', value: 25}, {type: 'in', key: 'LRC', value: 100}], 0.12, [{\n        type: 'out',\n        key: 'ETH',\n        value: 25\n    }, {type: 'in', key: 'LRC', value: 100}], 0.0054, 3, 'Filled'],\n    ['Buy', [{type: 'out', key: 'ETH', value: 25}, {type: 'in', key: 'LRC', value: 100}], 0.12, [{\n        type: 'out',\n        key: 'ETH',\n        value: 25\n    }, {type: 'in', key: 'LRC', value: 100}], 0.0054, 3, 'Filled'],\n    ['Buy', [{type: 'out', key: 'ETH', value: 25}, {type: 'in', key: 'LRC', value: 100}], 0.12, [{\n        type: 'out',\n        key: 'ETH',\n        value: 25\n    }, {type: 'in', key: 'LRC', value: 100}], 0.0054, 3, 'Cancelled'],\n    ['Sell', [{type: 'out', key: 'ETH', value: 25}, {type: 'in', key: 'LRC', value: 100}], 0.12, [{\n        type: 'out',\n        key: 'ETH',\n        value: 25\n    }, {type: 'in', key: 'LRC', value: 100}], 0.0054, 3, 'Filled'],\n    ['Sell', [{type: 'out', key: 'ETH', value: 25}, {type: 'in', key: 'LRC', value: 100}], 0.12, [{\n        type: 'out',\n        key: 'ETH',\n        value: 25\n    }, {type: 'in', key: 'LRC', value: 100}], 0.0054, 3, 'Cancelled'],\n]\n\nconst OrderPanel = withTranslation('common')((rest: WithTranslation) => {\n\n    return (\n        <>\n            <OrderHistoryTable rawData={rawDataOrderHistory} {...{...rest}}/>\n        </>\n    )\n})\n\nexport default OrderPanel\n","import { useRouteMatch } from 'react-router'\n\nimport { Box, Paper } from '@material-ui/core'\nimport {\n    SubMenu,\n    SubMenuList as BasicSubMenuList,\n} from '@loopring-web/component-lib'\nimport { withTranslation } from 'react-i18next'\nimport styled from '@emotion/styled'\nimport {\n    AmmIcon, AssetsIcon, OrderIcon, TradeIcon, TransactionsIcon\n} from '@loopring-web/component-lib/src/static-resource'\n\nimport TxPanel from './TxPanel'\nimport AssetPanel from './AssetPanel'\nimport TradePanel from './TradePanel'\nimport OrderPanel from './OrderPanel'\n\nexport const subMenu = {\n    assetsGroup: [{\n        icon: AssetsIcon,\n        router: { path: '/layer2/assets' },\n        label: {\n            id: 'assets',\n        },\n    }],\n    transactionsGroup: [{\n        icon: TransactionsIcon,\n        router: { path: '/layer2/transactions' },\n        label: {\n            id: 'transactions',\n        },\n    },\n    {\n        icon: TradeIcon,\n        router: { path: '/layer2/trades' },\n        label: {\n            id: 'trades',\n        },\n    }\n        /*, {\n            icon: AmmIcon,\n            router: {path: ''},\n            label: {\n                id: 'ammRecords',\n                description: 'ammRecordsDes',\n            },\n        }*/\n\n    ],\n    countInfoGroup: [{\n        icon: OrderIcon,\n        router: { path: '/layer2/orders' },\n        label: {\n            id: 'orders',\n        },\n    }\n    ]\n}\n\nconst StylePaper = styled(Box)`\n      width: 100%;\n      height: 100%;\n      flex: 1;\n      background-color: ${({ theme }) => theme.colorBase.background().default};\n      border-radius: ${({ theme }) => theme.unit}px;\n    ` as typeof Paper\n\nconst SubMenuList = withTranslation('layout', { withRef: true })(BasicSubMenuList);\nexport const Layer2Page = () => {\n\n    let match: any = useRouteMatch(\"/layer2/:item\")\n\n    const selected = match?.params.item ?? 'assets'\n\n    console.log('match:', match, ' selected:', selected, ' item', match?.params.item)\n\n    return (\n        <>\n            <Box width={'200px'} display={'flex'} justifyContent={'stretch'}>\n                <SubMenu>\n                    <SubMenuList selected={selected} subMenu={subMenu as any} />\n                </SubMenu>\n            </Box>\n            <Box minHeight={420} display={'flex'} alignItems={'stretch'} flexDirection=\"row\" marginTop={0} flex={1}>\n\n                <Box flex={1} marginLeft={3} display={'flex'} flexDirection={'column'} >\n                    {selected === 'assets' && <AssetPanel />}\n                    {selected === 'transactions' && <TxPanel />}\n                    {selected === 'trades' && <TradePanel />}\n                    {selected === 'orders' && <OrderPanel />}\n                </Box>\n            </Box>\n        </>\n    )\n\n}\n","import {\n  HashRouter as Router,\n  Switch,\n  Route,\n  useParams,\n  useRouteMatch,\n  Redirect,\n} from 'react-router-dom'\n\nimport Header from 'layouts/header'\nimport Footer from 'layouts/footer'\n\nimport QuotePage from 'pages/QuotePage'\nimport SwapPage from 'pages/SwapPage'\n\n\nimport DebugPage from 'pages/DebugPage'\n\nimport Container from '@material-ui/core/Container'\nimport { Box, Toolbar } from '@material-ui/core'\nimport { DevWrapper } from '../provider/'\nimport { Layer2Page } from '../pages/Layer2Page'\n\nconst RouterView = () => {\n  // const SwapPageWrap = ()=> <SwapPage />\n  // const QuotePageWrap = ()=> <SwapPage />\n  return <Router>\n        <Header />\n\n        {/*<Box style={{marginTop: `var(--header-height)`}} flex={1} display={'flex'}>*/}\n          <Container maxWidth=\"lg\" >\n            {/*style={{height: '100%' }}*/}\n            <Box flex={1} display={'flex'} alignItems={'stretch'} flexDirection=\"row\" marginTop={3}>\n              <Switch>\n                <Route exact component={SwapPage}  path='/' />\n                <Route exact component={QuotePage}  path='/markets' />\n                <Route exact component={SwapPage}  path='/trade-lite' />\n                \n                <Route exact component={Layer2Page}  path='/layer2' />\n                <Route exact component={Layer2Page}  path='/layer2/assets' />\n                <Route exact component={Layer2Page}  path='/layer2/transactions' />\n                <Route exact component={Layer2Page}  path='/layer2/trades' />\n                <Route exact component={Layer2Page}  path='/layer2/orders' />\n\n                <DevWrapper>\n                <Route exact path='/debug'>\n                  <DebugPage />\n                </Route>\n                </DevWrapper>\n\n              </Switch>\n            </Box>\n          </Container>\n        {/*</Box>*/}\n\n      </Router>\n}\n\nexport default RouterView\n"],"sourceRoot":""}