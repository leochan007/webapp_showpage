{"version":3,"sources":["stores/global/actions.ts","stores/transactions/reducer.ts","stores/Amm/AmmRecord/reducer.ts","stores/Amm/AmmTrades/reducer.ts","stores/Amm/AmmActivityMap/saga.ts","stores/Amm/AmmMap/saga.ts","stores/Amm/AmmRecord/saga.ts","stores/Amm/AmmTrades/saga.ts","stores/Amm/index.ts","stores/token/saga.ts","stores/ticker/saga.ts","stores/system/saga.ts","stores/walletLayer1/saga.ts","stores/walletLayer2/saga.ts","stores/rootSaga.ts","stores/socket/reducer.ts","stores/index.ts","stores/apis/api.ts","defs/web3_defs.ts","stores/account/hook.ts","state_machine/machine_builder.ts","stores/account/reducer.ts","stores/Amm/AmmMap/hook.ts","stores/token/hook.ts","stores/trading/hook.ts","utils/swap_calc_utils.ts","hooks/web3/useWeb3.ts","networks/web3_connectors.ts","stores/walletLayer2/hook.ts","stores/Amm/AmmMap/reducer.ts","index.tsx","stores/trading/reducer.ts","storage/index.ts","stores/ticker/reducer.ts","stores/system/reducer.ts","stores/walletLayer1/reducer.ts","stores/walletLayer2/reducer.ts","stores/Amm/AmmActivityMap/reducer.ts","stores/token/reducer.ts","stores/system/interface.ts","stores/ticker/hook.ts","stores/Amm/AmmActivityMap/hook.ts","state_machine/account_machine_spec.ts","utils/web3_tools.ts","provider/global/index.tsx","provider/web3ReactManager/index.tsx","provider/dev-wrapper/index.tsx","stores/constant.ts","stores/system/hook.ts","pages/ErrorPage/index.tsx","hooks/exchange/useApi.ts","hooks/common/useCustomDCEffect.ts","hook.ts","defs/common_defs.ts","hooks/modal/useModals.ts","utils/hook_tools.ts","hooks/common/useCommon.ts","hooks/exchange/useExchangeAPI.ts","hooks/exchange/useUserAPI.ts","layouts/header/hook.tsx","utils/obj_tools.ts","pages/AccountPage/index.tsx","layouts/header/index.tsx","pages/QuotePage/index.tsx","pages/QuotePage/hook.ts","pages/SwapPage/panel/BasicInfoPanel/hook.tsx","hooks/help/connetStatusCallback.ts","pages/SwapPage/panel/BasicInfoPanel/index.tsx","pages/SwapPage/panel/TradePanel/index.tsx","defs/swap_defs.ts","hooks/help/updateWallet.ts","hooks/help/coinPairInit.ts","hooks/help/pairDetail.ts","hooks/help/makeTickView.ts","hooks/help/marketTable.ts","pages/SwapPage/index.tsx","pages/SwapPage/hook.ts","hooks/common/useApi2.ts","hooks/common/useWebsocketApi.ts","pages/DebugPage/index.tsx","pages/Layer2Page/TxPanel/hooks.ts","pages/Layer2Page/TxPanel/index.tsx","pages/Layer2Page/AssetPanel/index.tsx","pages/Layer2Page/TradePanel/index.tsx","pages/Layer2Page/OrderPanel/index.tsx","pages/SettingPage/SettingPanel.tsx","pages/Layer2Page/index.tsx","pages/LiquidityPage/PoolsPanel/hook.ts","pages/LiquidityPage/PoolsPanel/index.tsx","hooks/help/ammPairDetail.ts","pages/LiquidityPage/AmmPanel/index.tsx","pages/LiquidityPage/AmmPanel/hooks.ts","pages/LiquidityPage/CoinPairPanel/hooks.ts","pages/LiquidityPage/CoinPairPanel/index.tsx","pages/LiquidityPage/AmmMining/index.tsx","pages/LiquidityPage/AmmMining/hook.ts","pages/LiquidityPage/LiquidityOverview/index.tsx","pages/LiquidityPage/index.tsx","routers/index.tsx"],"names":["updateVersion","createAction","now","Date","getTime","initialState","transactionsSlice","createSlice","name","reducers","reset","state","Object","assign","addTransaction","action","payload","chainId","from","hash","approval","summary","claim","Error","addedTime","clearAllTransactions","checkedTransaction","blockNumber","tx","lastCheckedBlockNumber","Math","max","finalizeTransaction","receipt","confirmedTime","actions","ammRecordSlice","ammRecords","status","errorMessage","getAmmRecord","STATUS","PENDING","getAmmRecordStatus","error","ERROR","DONE","statusUnset","UNSET","ammTradesSlice","ammTrades","getAmmTrades","getAmmTradesStatus","getPostsSaga","ammActivityMapSaga","getAmmActivityMapApi","a","data","totalRewards","myRewards","rewardToken","coinMap","ETH","duration","to","Promise","resolve","call","put","getAmmActivityMapStatus","ammActivityMap","all","takeLatest","getAmmActivityMap","updateRealTimeSaga","ammMapInitSaga","ammMapRealTimeSaga","setAmmState","ammPoolState","forex","store","getState","system","amountDollar","parseFloat","liquidityUSD","amountYuan","totalLPToken","lpLiquidity","totalA","parseInt","liquidity","totalB","rewardValue","rewards","feeA","fees","feeB","tradeFloat","percent","timeUnit","APY","apyBips","apy","getAmmMapApi","ammpools","ammMap","ammpoolAPI","getAmmPoolStats","ammPoolStats","__timer__","amm","clearInterval","setInterval","dispatch","updateRealTimeAmmMap","tokenMap","idIndex","Reflect","ownKeys","forEach","key","item","market","tokens","pooled","dataItem","coinA","coinB","feeDollar","feeYuan","isNew","Number","createdAt","isActivity","address","console","log","getAmmMapStatus","map","getAmmMap","ammMapSaga","fork","ammRecordSaga","getAmmRecordApi","side","amount","sell","belong","tradeValue","buy","time","fee","amountLP","ammTradesSaga","getAmmTradesApi","priceValue","priceToken","posts","ammReducer","combineReducers","ammRecord","reducer","ammMapSlice","ammActivityMapSlice","ammForks","tokenInitSaga","getTokenMapApi","tokensMap","pairs","marketArr","tokenArr","addressIndex","startsWith","icon","getIcon","simpleName","description","company","tokenList","tradePairs","tokenId","marketArray","marketCoins","getTokenMapStatus","getTokenMap","tokenSaga","tickerSaga","tickersSaga","getTickersApi","list","exchangeAPI","getTicker","join","tickers","tickMap","base_token_volume","priceDollar","priceYuan","volume","toBig","toNumber","floatTag","close","open","reward","tickerKey","tickerKeys","length","getTickerStatus","tickerMap","CustomError","ErrorMap","NO_TOKEN_KEY_LIST","getTickers","tickerForks","getUpdateSystem","systemSaga","initConfig","undefined","exchangeApi","ammpoolApi","getTokens","tokenSymbolMap","getAmmPoolConf","getMixMarkets","take","getSystemsApi","env","window","location","hostname","ENV","DEV","ChainId","GORLI","UAT","PROD","MAINNET","NETWORKEXTEND","NONETWORK","getFiatPrice","legal","faitPrices","fiatPrices","getGasPrice","gasPrice","baseURL","updateRealTimeObj","getSystemStatus","updateSystem","systemForks","walletLayer1Saga","getWalletLayer1Balance","account","accAddr","accountId","getTokenBalances","owner","token","tokenBalances","walletLayer1","reduce","prev","count","fromWEI","getWalletLayer1Status","updateWalletLayer1","walletLayer1Fork","walletLayer2Saga","getWalletLayer2Balance","userApi","userAPI","apiKey","getUserBalances","userBalances","walletLayer2","getWalletLayer2Status","updateWalletLayer2","walletLayer2Fork","mySaga","socketSlice","socket","socketStart","getSocketStatus","sagaMiddleware","createSagaMiddleware","accountSlice","settings","settingsSlice","systemSlice","trading","tradingSlice","transactions","transactionlice","modals","modalsSlice","tokenMapSlice","walletLayer2Slice","walletLayer1Slice","tickerMapSlice","PERSISTED_KEYS","configureStore","middleware","getDefaultMiddleware","thunk","serializableCheck","save","states","devTools","process","enhancers","reduxBatch","preloadedState","load","setLanguage","language","run","UserAPI","getChainId","ExchangeAPI","AmmpoolAPI","connectorsByName","ConnectorNames","Unknown","Injected","injected","Network","network","WalletConnect","walletconnect","WalletLink","walletlink","Ledger","ledger","Trezor","trezor","Authereum","authereum","useWeb3Account","useActiveWeb3React","connector","library","active","isConnected","voca","isBlank","useAccount","useSelector","isNoAccount","AccountStatus","NOACCOUNT","isActivated","ACTIVATED","eddsaKey","useStateMachine","spec","useDispatch","machine","AccountMachineSpec","currentState","event","stateTransitions","nextState","sendEvent","useCallback","setAccountStatus","useConnect","activate","useState","activatingConnector","setActivatingConnector","connect","item_name","isSwitch","newConnector","setConnectNameTemp","StatusChangeEvent","Reset","Connecting","useDisconnect","deactivate","disconnect","useUnlock","useExchangeAPI","useUserAPI","tradingInfo","useGetTradingInfo","lock","Lock","unlock","exchangeInfo","exchangeAddress","LOCKED","sk","apikey","getProvider","provider","web3","Web3","sign_tools","nonce","connectName","eddsakey","toHex","keyPair","secretKey","getUserApiKey","Unlock","setEddsaKey","setApikey","useCheckAccStatus","web3Account","lv1Acc","prevChainId","usePrevious","prevWeb3Account","useCustomDCEffect","UNCONNNECTED","cleanUp","CONNECTED","DEPOSITING","DEPOSIT_TO_CONFIREM","UNACTIVATED","ARPROVING","APPROV_TO_CONFIRM","resetLayer1","resetLayer2","getAccount","acc","accInfo","setAccountInfo","connectNameTemp","setConnectName","HasPubkey","dumpError400","setAccAddr","response","resultInfo","code","ErrorResponse","FinishDeposit","UserStorage","checkTimeout","handler","isTimeOut","setHandler","getHandler","checkStatus","defaultAccId","REACT_APP_TEST_ACCOUND_ID","getAccountId","defaultApiKey","REACT_APP_TEST_API_KEY","getApikey","defaultOwner","REACT_APP_TEST_OWNER","defaultEddsaKey","REACT_APP_TEST_EDDSA_KEY","getEddsakey","JSON","stringify","publicKey","isContractAddress","initState","setIsContractAddress","useAmmMap","updateAmmMap","useTokenMap","updateTokenMap","useUpdateChainId","useEffect","setChainId","useUpdateExchangeMarkets","api","setMarkets","useUpdateExchangeInfo","getExchangeInfo","setExchangeInfo","useUpdateAmmPoolConf","useAmmpoolAPI","ammPoolConf","setAmmPoolConf","useUpdateAmmPoolStats","setAmmPoolStats","useUpdateAmmActivityRules","getAmmPoolActivityRules","ammActivityRules","setAmmActivityRules","activityRules","useUpdateTokens","setTokens","SwapStatus","symbol","getIconByTokenInfo","addr","utils","getAddress","getToken","valueInWEI","precision","ceil","tokenInfo","precisionToFixed","value","fm","div","decimals","context","useWeb3React","contextNetwork","NetworkContextName","useEtherscan","etherscanUrl","setEtherscanUrl","useEagerConnect","tried","setTried","isAuthorized","then","catch","useInactiveListener","onReConnectInjected","ethereum","reConnectInjected","on","handleChainChanged","handleAccountsChanged","accounts","removeListener","POLLING_INTERVAL","RPC_URLS","InjectedConnector","supportedChainIds","NetworkConnector","urls","1","5","defaultChainId","WalletConnectConnector","rpc","bridge","qrcode","pollingInterval","WalletLinkConnector","url","appName","LedgerConnector","TrezorConnector","manifestEmail","manifestAppUrl","AuthereumConnector","useWalletLayer2","getWalletLayer2","Web3ProviderNetwork","createWeb3ReactRoot","providers","LocalizationProvider","dateAdapter","MomentUtils","I18nextProvider","i18n","MuThemeProvider","theme","getTheme","ThemeProvider","Provider","ReactDOM","render","getLibrary","App","document","getElementById","defaultSymbol","getBaseQuote","base","quote","symbol_base","symbol_quote","interval","markets","marketTrades","refreshRate","refreshRateSlow","changeSymbol","changeTradingInterval","setTickerMap","setMarketTrades","CONSTANTS","rawHandler","sessionStorage","getItem","Handler","err","setItem","removeItem","dateTimeStr","localStorage","ActiveTime","toString","tmpDt","SESSION_TIMEOUT_SECONDS","clear","rawId","AccountId","Account","Apikey","Eddsakey","orderHash","AmmOrder","current","HardwareAddresses","includes","toLowerCase","newValue","topics","setTopics","getTokenPairMap","useTicker","updateTickers","updateTicker","useAmmActivityMap","updateAmmActivityMap","HasNoPubkey","IsSmartWallet","ApproveSubmit","ApproveConfirmed","Web3Provider","getShortAddr","trim","substr","WindowEvent","events","Click","Scroll","forceReset","debounce","GlobalProvider","children","addEventListener","removeEventListener","Fragment","MessageWrapper","Message","colorBase","Web3ReactManager","t","useTranslation","networkActive","networkError","activateNetwork","triedEager","showLoader","setShowLoader","timeout","setTimeout","clearTimeout","DevWrapper","useSystem","StyleBox","styled","Box","ErrorPage","messageKey","flex","display","alignItems","justifyContent","flexDirection","marginTop","height","maxWidth","textAlign","position","left","top","component","variant","marginY","color","useApi","ApiClass","DEFAULT_TIMEOUT","genApi","useMemo","deps","useDeepCompareEffect","useInit","React","setState","systemState","tokenState","ammMapState","reload","detectEthereumProvider","request","method","Theme","LangType","SystemStatus","MODAL_TYPE","useModals","ShowDeposit","isShow","props","title","setShowDeposit","ShowTransfer","setShowTransfer","ShowWithdraw","setShowWithdraw","ShowResetAccount","setShowResetAccount","PromiseJob","fetchPromise","setFunc","field","prefix","mounted","reason","usePromiseJob","dependencies","useGetExchangeInfo","useGetTokens","useGetUserBalances","balances","setBalances","keys","push","raw_data","total","locked","availableInWei","minus","useChargeFeeList","tokenSymbol","requestType","chargeFeeList","setChargeFeeList","getOffchainFeeAmt","index","useModalProps","tokensAll","setCoinMap","useCoinMap","walletMap_Lv1","walletMap","setWalletMap","balance","useLv1WalletMap","walletMap_Lv2","useLv2WalletMap","deposit","amt","depositAddress","sendByMetaMask","gasLimit","contract","response2","withdraw","sellTokenId","getNextStorageId","storageId","request2","exchange","offchainId","maxFee","extraData","minGas","validUntil","VALID_UNTIL","submitOffchainWithdraw","transfer","payeeAddr","walletType","payeeAcc","payeeId","payerAddr","payerId","submitInternalTransfer","depositValue","setDepositValue","depositProps","tradeData","depositBtnStatus","TradeBtnStatus","AVAILABLE","onDepositClick","handlePanelEvent","switchType","res","setTokenSymbol","withdrawValue","setWithdrawValue","withdrawalFeeList","OffchainFeeReqType","OFFCHAIN_WITHDRAWAL","withdrawProps","withdrawBtnStatus","onWithdrawClick","withdrawType","WithdrawType","Fast","withdrawTypes","WithdrawTypes","chargeFeeToken","chargeFeeTokenList","handleOnAddressChange","handleAddressError","_value","message","transferValue","setTransferValue","transferTokenSymbol","setTransferTokenSymbol","transferFeeList","TRANSFER","transferProps","transferBtnStatus","onTransferClick","resetValue","setResetValue","resetProps","resetBtnStatus","onResetClick","price","ammProps","ammDepositData","slippage","ammWithdrawData","ammCalcData","myCoinA","myCoinB","AtoB","coinInfoMap","slippageTolerance","handleDepositEvent","type","handleWithDrawEvent","onAmmWithdrawClick","onAmmDepositClick","swapProps","tradeCalcData","coinSell","coinBuy","BtoS","StoB","sellCoinInfoMap","buyCoinInfoMap","priceImpact","minimumReceived","onSwapClick","handleSwapPanelEvent","deepClone","result","constructor","hasOwnProperty","ModalAccountInfo","withTranslation","onClose","rest","Modal","aria-labelledby","aria-describedby","style","boxShadow","paddingTop","paddingBottom","minWidth","Header","useLocation","useSettings","setTheme","themeMode","useOpenModals","isShowAccountInfo","isShowConnect","setShowConnect","setShowAccountInfo","forceUpdate","useReducer","bool","gatewayList","DefaultGatewayList","handleSelect","accountInfoProps","setAccountInfoProps","onNotification","onWalletBtnConnect","onThemeBtnClick","dark","light","onLangBtnClick","lang","headerToolBarData","ButtonComponentsMap","handleClick","Language","handleChange","UnlockBtn","onClick","className","startIcon","fontSize","Typography","LockBtn","updateHeaderMenuWhenHasAccountInfo","headerMenuData","HeadMenuTabKey","Layer2","HeaderMenuTabStatus","default","addressShort","level","etherscanLink","mainBtn","connectBy","label","WalletStatus","hidden","noAccount","accountPending","useHeader","onSwitch","openQRCode","setOpenQRCode","copyToastOpen","setCopyToastOpen","closeCopyToast","Snackbar","autoHideDuration","Alert","severity","withDrawProps","selected","pathname","headerRoot","Toolbar","onCopy","text","execCommand","textarea","createElement","body","appendChild","select","removeChild","clipboardData","setData","copyToClipBoard","onViewQRCode","onDisconnect","RowStyled","Grid","unit","TableWrapStyled","background","border","defaultFrame","c_key","d_R","TablePaddingX","pLeft","pRight","QuotePage","tickList","setTickList","big4","setBig4","refresh","getAllTickers","ticks","quote_token_volume","high","low","rowData","change","sort","b","isNaN","slice","useQuote","formattedRawData","o","pair","first","last","lastPrice","isFinite","volumn","buyData","sellData","LRC","FloatTag","increase","container","xs","none","decrease","paddingY","onVisibleRowsChange","rawData","toggleData","ChartType","Trend","Depth","fnType","BasicInfoPanel","coinAInfo","coinBInfo","tgItemJSXs","tlabel","JSX","getExistedMarket","chartType","setChartType","ChartUnit","D1","chartUnit","originData","setOriginData","_e","tgItemJSXsPriceChart","pre","tGItemData","TradingInterval","min15","limit","getCandlestick","candlesticks","timeStamp","timestamp","quoteVol","getDepth","depth","bidsPrices","bids_prices","bidsAmtTotals","bids_amtTotals","asksPrices","asks_prices","asksAmtTotals","asks_amtTotals","useBasicInfo","upColor","exclusive","minHeight","maxHeight","width","riseColor","handleMove","size","StylePaper","borderColor","applyProps","id","StyledTabsWrapper","StyledFormControlLabel","FormControlLabel","TradePanel","tradeArray","myTradeArray","isAllTrade","setIsAllTrade","setValue","control","Checkbox","checked","checkedIcon","onChange","flag","Tabs","aria-label","Tab","OrderHandling","accountStaticCallBack","fn","args","UNKNOWN","DEFAULT","updateWallet","pending","countBig","coinPairInit","coinKey","_tradeCalcData","match","findIndex","ele","BIG10","pairDetailBlock","ammKey","reject","getAmmPoolSnapshot","poolAddress","ammpoolsbalance","pairDetailDone","baseToken","quoteToken","poolBaseTokenVol","quoteBaseTokenVol","stob","baseVol","pow","makeTickView","tick","getUserTrades","marketKey","userTrades","makeMarketArray","currency","Side","Sell","TradeTypes","Buy","times","tradeTime","FixedStyle","SwapPage","useRouteMatch","walletLayer2State","setTradeData","setTradeCalcData","setTradeArray","setMyTradeArray","setTradeFloat","setPair","swapBtnI18nKey","setSwapBtnI18nKey","params","resetSwap","_myTradeArray","btnArray","swapBtnClickArray","swapData","SwapType","SEll_CLICK","BUY_CLICK","SELL_SELECTED","BUY_SELECTED","EXCHANGE_CLICK","calculateTradeData","_tradeData","td","_tradeFloat","_tradeArray","apiList","getMarketTrades","_td","TRADE_LITE_SET_PAIR_ERROR","options","useSwapPage","marginRight","alignContent","stateArr","useWebsocket","verify","needApiKey","ws","useRef","wsData","setMessage","readyState","setReadyState","WsAPI","creatWebSocket","getWsKey","wsApiKey","basePath","WebSocket","onopen","op","unsubscribeAll","flat_txt","sendMessage","subTopics","onclose","e","onerror","onmessage","closeWebSocket","msg","send","reconnect","useAmmpoolWs","getTickerArg","getAmmpoolArg","socketData","setSocketData","isLocalPage","setIsLocalPage","visibilityState","parse","useWs","DebugPage","getMarkets","useGetMarkets","gas","setGas","useGetGas","useGetTxs","txs","setTxs","getUserTranferList","tmpTx","userTransfers","senderAddress","receiverAddress","feeTokenSymbol","feeAmount","memo","txnHash","tradeType","TransactionTradeTypes","allTypes","TxPanel","pageSize","setPageSize","offsetHeight","floor","txList","ref","pagination","StyledChartWrapper","StyledBtnGroupWrapper","DoughnutData","testTrendData","random","AssetPanel","chartPeriod","setChartPeriod","AssetTitleProps","assetInfo","totalAsset","priceTag","PriceTag","Dollar","onShowDeposit","onShowTransfer","onShowWithdraw","Paper","OrderPanel","StyledPaper","StyledSwitch","Switch","textPrimary","success","backgroundColor","opacity","BtnCurrency","Currency","dollar","_handleChange","target","IconComponent","DropDownIcon","labelId","autoWidth","yen","StyledDivider","Divider","SettingPanel","focus","useTheme","setUpColor","setCurrency","direction","flexWrap","paddingLeft","marginBottom","paddingX","Trans","i18nKey","alignSelf","Button","passDay","changeLanguage","textTransform","UpColor","green","up","down","red","subMenu","subMenuLayer2","BoxStyle","SubMenuList","withRef","BasicSubMenuList","Layer2Page","accStatus","useAmmMapUI","setRawData","page","setPage","ammMapStatus","ammMapStatusUnset","tickerStatus","tickerStatusUnset","updateTickersUI","_page","i","_ammMap","tickerMapKey","NO_TOKEN_MAP","updateRawData","PoolsPanel","handlePageChange","ammPairInit","_ammCalcData","ammType","AmmPanelType","Deposit","coinACount","coinBCount","AmmPanelView","setAmmCalcData","setAmmDepositData","setAmmWithdrawData","ammBtnI18nKey","initAmmData","useAmmPanel","tabSelected","makeAmmDetailExtendsActivityMap","ammDetail","ammActivity","myAmm","BoxStyled","CoinPairPanel","ammRecordArray","setAmmpoolsbalance","activity","coinPairInfo","setCoinPairInfo","_coinPairInfo","useCoinPair","tabIndex","setTabIndex","_handlePageChange","Breadcrumbs","Link","href","spacing","wrap","md","paddingRight","getThousandFormattedNumbers","Yuan","Hidden","mdDown","noWrap","textOverflow","moment","format","AmmMiningView","ammActivities","ammActivityStatus","ammActivityStatusUnset","_ammActivityMap","mapArray","useAmmMiningUI","sm","lg","USTD","AmmTradeType","add","totalDollar","totalYuan","amountA","amountB","toDate","remove","swap","balanceA","balanceB","balanceYuan","balanceDollar","StyleWrapper","LiquidityOverview","totalFeeDollar","totalFeeYuan","totalMiningDollar","totalMiningYuan","padding","margin","handleDeposit","row","handleWithdraw","subMenuLiquidity","LiquidityPage","matchPair","next","RouterView","Container","exact","path"],"mappings":"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","file":"static/js/main~a97bfcba.c23f0a2f.chunk.js","sourcesContent":["import { createAction } from '@reduxjs/toolkit'\n\n// fired once when the app reloads but before the app renders\n// allows any updates to be applied to store data loaded from localStorage\nexport const updateVersion = createAction<void>('global/updateVersion')\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit'\n\nconst now = () => new Date().getTime()\n\nexport interface SerializableTransactionReceipt {\n  to: string\n  from: string\n  contractAddress: string\n  transactionIndex: number\n  blockHash: string\n  transactionHash: string\n  blockNumber: number\n  status?: number\n}\n\nexport interface TransactionDetails {\n  hash: string\n  approval?: { tokenAddress: string; spender: string }\n  summary?: string\n  claim?: { recipient: string }\n  receipt?: SerializableTransactionReceipt\n  lastCheckedBlockNumber?: number\n  addedTime: number\n  confirmedTime?: number\n  from: string\n}\n\nexport interface TransactionState {\n  [chainId: number]: {\n    [txHash: string]: TransactionDetails\n  }\n}\n\nexport const initialState: TransactionState = {}\n\nconst transactionsSlice = createSlice({\n  name: 'transactions',\n  initialState,\n  reducers: {\n    reset(state) {\n      Object.assign(state, initialState)\n    },\n    addTransaction(state: TransactionState, action: PayloadAction<{\n      chainId: number, from: string,\n      hash: string, approval: any, summary: string, claim: any\n    }>) {\n      const { chainId, from, hash, approval, summary, claim} = action.payload\n      if (state[chainId]?.[hash]) {\n        throw Error('the existing TX can\\'t be added again')\n      }\n\n      const txs = state[chainId] ?? {}\n      txs[hash] = {\n        hash, \n        approval, \n        summary, \n        claim, \n        from,\n        addedTime: now(), \n      }\n      // state[chainId] = txs\n    },\n    clearAllTransactions(state: TransactionState, action: PayloadAction<number>) {\n      const chainId = action.payload\n      if (!state[chainId]) return\n      state[chainId] = {}\n    },\n    checkedTransaction(state: TransactionState, action: PayloadAction<{chainId: number,\n    hash: string, blockNumber: number}>) {\n      const { chainId, hash, blockNumber} = action.payload\n      const tx = state[chainId]?.[hash]\n      if (!tx) {\n        return\n      }\n      if (!tx.lastCheckedBlockNumber) {\n        tx.lastCheckedBlockNumber = blockNumber\n      } else {\n        tx.lastCheckedBlockNumber = Math.max(blockNumber, tx.lastCheckedBlockNumber)\n      }\n      // state[chainId][hash] = tx\n    },\n    finalizeTransaction(state: TransactionState, action: PayloadAction<{\n      hash: string, chainId: number, receipt: any\n    }>) {\n      const { chainId, hash, receipt } = action.payload\n      \n      const tx = state[chainId]?.[hash]\n      if (!tx) {\n        return\n      }\n      tx.receipt = receipt\n      tx.confirmedTime = now()\n    }\n  }\n}\n)\n\nexport const { reset, addTransaction, clearAllTransactions, checkedTransaction, finalizeTransaction, } = transactionsSlice.actions\nexport default transactionsSlice\n","import { createSlice, PayloadAction, Slice } from '@reduxjs/toolkit'\nimport {  AmmRecordStates } from './interface';\nimport { STATUS } from '../../constant';\n\nconst initialState:Required<AmmRecordStates>  = {\n    ammRecords:[],\n    status:'UNSET',\n    errorMessage:null,\n}\nconst ammRecordSlice:Slice = createSlice({\n    name: 'ammRecord',\n    initialState,\n    reducers: {\n        getAmmRecord(state, action:PayloadAction<string | undefined>) {\n            state.status = STATUS.PENDING\n        },\n        getAmmRecordStatus(state, action: PayloadAction<AmmRecordStates>) {\n            // @ts-ignore\n            if (action.error) {\n                state.status =  STATUS.ERROR\n                // @ts-ignore\n                state.errorMessage = action.error\n            }\n            state.ammRecords = {...action.payload.ammRecords};\n            state.status = STATUS.DONE\n        },\n        statusUnset: state => {\n            state.status = STATUS.UNSET\n        }\n    },\n});\nexport { ammRecordSlice };\nexport const { getAmmRecord, getAmmRecordStatus,statusUnset } = ammRecordSlice.actions\n","import { createSlice, PayloadAction, Slice } from '@reduxjs/toolkit'\nimport {  AmmTradesStates } from './interface';\nimport { STATUS } from '../../constant';\n\n\nconst initialState:Required<AmmTradesStates>  = {\n    ammTrades:[],\n    status:'UNSET',\n    errorMessage:null,\n}\nconst ammTradesSlice:Slice = createSlice({\n    name: 'ammTrades',\n    initialState,\n    reducers: {\n        getAmmTrades(state, action:PayloadAction<string | undefined>) {\n            state.status = STATUS.PENDING\n        },\n        getAmmTradesStatus(state, action: PayloadAction<AmmTradesStates>) {\n            // @ts-ignore\n            if (action.error) {\n                state.status =  STATUS.ERROR\n                // @ts-ignore\n                state.errorMessage = action.error\n            }\n            state.ammTrades = {...action.payload.ammTrades};\n            state.status = STATUS.DONE\n        },\n        statusUnset: state => {\n            state.status = STATUS.UNSET\n        }\n    },\n});\nexport { ammTradesSlice };\nexport const { getAmmTrades, getAmmTradesStatus, statusUnset } = ammTradesSlice.actions\n","import { all, takeLatest, call, put } from \"redux-saga/effects\"\nimport { getAmmActivityMap, getAmmActivityMapStatus } from './reducer'\nimport { coinMap, CoinType } from '@loopring-web/component-lib/static'\nimport { AmmActivity, CoinInfo } from '@loopring-web/component-lib/src/static-resource'\nimport { useState } from \"react\"\nimport { useGetTradingInfo } from \"stores/trading/hook\"\n\n/*\nconst useGetAmmActivityMap = ()=>new Promise((resolve)=>{\n    const data:AmmActivity<any> = {\n        // @ts-ignore\n        'AMM-ETH-LRC': {\n            totalRewards: 241232132,\n            myRewards: 1232.123,\n            rewardToken: coinMap.ETH as CoinInfo<CoinType>,\n            duration: {\n                from: new Date('2021-1-1'),\n                to: new Date()\n            },\n        }, 'AMM-USDT-USDC': {\n            totalRewards: 241232132,\n            myRewards: 1232.123,\n            rewardToken: coinMap.ETH as CoinInfo<CoinType>,\n            duration: {\n                from: new Date('2021-1-1'),\n                to: new Date()\n            },\n        }, 'AMM-USDT-LRC': {\n            totalRewards: 241232132,\n            myRewards: 1232.123,\n            rewardToken: coinMap.ETH as CoinInfo<CoinType>,\n            duration: {\n                from: new Date('2021-1-1'),\n                to: new Date()\n            },\n        }, 'AMM-USDT-ETH': {\n            totalRewards: 241232132,\n            myRewards: 1232.123,\n            rewardToken: coinMap.ETH as CoinInfo<CoinType>,\n            duration: {\n                from: new Date('2021-1-1'),\n                to: new Date()\n            },\n        }\n    }\n    resolve({data});\n});\n*/\nconst getAmmActivityMapApi = async () => {\n    const data:AmmActivity<any> = {\n        // @ts-ignore\n        'AMM-LRC-ETH': {\n            totalRewards: 241232132,\n            myRewards: 1232.123,\n            rewardToken: coinMap.ETH as CoinInfo<CoinType>,\n            duration: {\n                from: new Date('2021-1-1'),\n                to: new Date()\n            },\n        }, 'AMM-ETH-USDC': {\n            totalRewards: 241232132,\n            myRewards: 1232.123,\n            rewardToken: coinMap.ETH as CoinInfo<CoinType>,\n            duration: {\n                from: new Date('2021-1-1'),\n                to: new Date()\n            },\n        }, 'AMM-ETH-USDT': {\n            totalRewards: 241232132,\n            myRewards: 1232.123,\n            rewardToken: coinMap.ETH as CoinInfo<CoinType>,\n            duration: {\n                from: new Date('2021-1-1'),\n                to: new Date()\n            },\n        }, 'AMM-LRC-USDT': {\n            totalRewards: 241232132,\n            myRewards: 1232.123,\n            rewardToken: coinMap.ETH as CoinInfo<CoinType>,\n            duration: {\n                from: new Date('2021-1-1'),\n                to: new Date()\n            },\n        }\n    }\n    return  Promise.resolve({data})\n}\n\nexport function* getPostsSaga() {\n    try {\n        //\n        const { data } = yield call(getAmmActivityMapApi);\n        yield put(getAmmActivityMapStatus({ammActivityMap:data}));\n    } catch (err) {\n        yield put(getAmmActivityMapStatus(err));\n    }\n}\n\nexport default function* ammActivityMapSaga() {\n    yield all([takeLatest(getAmmActivityMap, getPostsSaga)]);\n}\n","import { all, call, fork, put, takeLatest } from \"redux-saga/effects\";\nimport { getAmmMap, GetAmmMapParams, getAmmMapStatus, updateRealTimeAmmMap } from './reducer';\nimport { AmmDetail, PairKey } from '@loopring-web/component-lib/src/static-resource';\nimport store from '../../index';\nimport { AmmPoolInfoV3, AmmPoolStat, } from \"loopring-sdk\";\nimport { ammpoolAPI } from \"stores/apis/api\";\nimport { PayloadAction } from '@reduxjs/toolkit';\nimport { AmmDetailStore } from './interface';\n\ntype AmmMap<R extends {[key:string]:any}> ={ [key:string]: AmmDetail<R>} | {}  //key is AMM-XXX-XXX\nexport const setAmmState = ({ammPoolState}: { ammPoolState: AmmPoolStat }) => {\n    const {forex} = store.getState().system;\n    return {\n        amountDollar: parseFloat(ammPoolState.liquidityUSD),\n        amountYuan: parseFloat(ammPoolState.liquidityUSD) / (forex?forex:6.5),\n        totalLPToken: parseFloat(ammPoolState.lpLiquidity),\n        totalA: parseInt(ammPoolState.liquidity[ 0 ]),\n        totalB: parseInt(ammPoolState.liquidity[ 1 ]),\n        rewardValue: ammPoolState.rewards[ 1 ],\n        rewardToken: ammPoolState.rewards[ 0 ],\n        feeA: parseInt(ammPoolState.fees[ 0 ]),\n        feeB: parseInt(ammPoolState.fees[ 1 ]),\n        tradeFloat: {\n            percent: '',\n            timeUnit: '24h',\n            // priceYuan: 100,\n            // priceDollar: 1.23123,\n            // floatTag: FloatTag.increase,\n            // reward: 12312,\n            APY: (parseInt(ammPoolState.apyBips) * 1.0 / 100)\n        },\n        apy: (parseInt(ammPoolState.apyBips) * 1.0 / 100)\n    }\n\n}\nconst getAmmMapApi = async <R extends {[key:string]:any}>({ammpools}:GetAmmMapParams) => {\n\n    let ammMap: AmmMap<R> = {}\n    const {ammPoolStats} = (await ammpoolAPI().getAmmPoolStats());\n\n    let {__timer__} = store.getState().amm.ammMap\n    __timer__ = (() => {\n        if (__timer__ && __timer__ !== -1) {\n            clearInterval(__timer__)\n        }\n        return setInterval(async () => {\n            let ammPoolStats: { [key in keyof R]: AmmPoolStat } = (await ammpoolAPI().getAmmPoolStats()).ammPoolStats as { [key in keyof R]: AmmPoolStat }\n            store.dispatch(updateRealTimeAmmMap({ammPoolStats}))\n        }, 900000)    //15*60*1000 //900000\n    })()\n    const {tokenMap: {coinMap, idIndex}} = store.getState();\n\n    // const forex = faitPrices.prices['USDC']\n\n\n    Reflect.ownKeys(ammpools).forEach(async (key) => {\n        const item: AmmPoolInfoV3 = ammpools[ key as string ]\n        if (item.market === key && item.tokens.pooled && idIndex) {\n\n            // const tokenA =  ; //getTokenInfoById(tokens.tokenIdMap, parseInt(item.tokens.pooled[0]))\n            // const tokenB =  ; // getTokenInfoById(tokens.tokenIdMap, parseInt(item.tokens.pooled[1]))\n\n            const dataItem: AmmDetailStore<R> = {\n                coinA: idIndex[ item.tokens.pooled[ 0 ] as any ] ,\n                coinB: idIndex[ item.tokens.pooled[ 1 ] as any ],\n                feeDollar: 100,  //TODO coinA price * feeA + price * feeB\n                feeYuan: 100, //TODO coinA price * feeA + price * feeB  /forex\n                isNew: Date.now() - (Number(item.createdAt)) > 14 * 86400 * 1000 ? false : true,//14*24*60*60*1000,\n                isActivity: item.status === 7 ? true : false,\n                address: item.address,\n                ...setAmmState({ammPoolState: ammPoolStats[ key ]})\n            } as AmmDetailStore<R>\n            // @ts-ignore\n            ammMap[item.market] = dataItem\n\n\n          \n\n        }\n\n\n    })\n    return {ammMap, __timer__}\n}\n\n\nexport function* getPostsSaga({payload}:PayloadAction<GetAmmMapParams>) {\n    try {\n        const {ammpools} =  payload;\n        const {ammMap, __timer__} = yield call(getAmmMapApi,{ammpools});\n        console.log('--- getPostsSaga:', ammMap)\n        yield put(getAmmMapStatus({ammMap, __timer__}));\n    } catch (err) {\n        yield put(getAmmMapStatus(err));\n    }\n}\n\nexport function* updateRealTimeSaga({payload}: any) {\n    try {\n        const {ammPoolStats} = payload;\n        let {ammMap}:{ammMap:AmmMap<object>} = store.getState().amm.ammMap;\n        if (ammPoolStats) {\n            //{ ammPoolStats?: { [ key: string ]: AmmPoolStat } }\n            Reflect.ownKeys(ammPoolStats).map((key) => {\n                // @ts-ignore\n                ammMap[ key ] = {\n                    // @ts-ignore\n                    ...ammMap[ key ],\n                    ...setAmmState({ammPoolState: ammPoolStats[ key as string ]})\n                }\n                return  ammMap\n            })\n        }\n        yield put(getAmmMapStatus({ammMap}));\n    } catch (err) {\n        yield put(getAmmMapStatus(err));\n    }\n}\n\n\nexport function* ammMapInitSaga() {\n    yield all([takeLatest(getAmmMap, getPostsSaga)]);\n}\n\nexport function* ammMapRealTimeSaga() {\n    yield all([takeLatest(updateRealTimeAmmMap, updateRealTimeSaga)]);\n}\n\nexport const ammMapSaga = [\n    fork(ammMapInitSaga),\n    fork(ammMapRealTimeSaga),\n]\n\n","import { all, takeLatest, call, put } from \"redux-saga/effects\";\nimport { getAmmRecord, getAmmRecordStatus } from './reducer';\n\nconst getAmmRecordApi= ()=>new Promise((resolve)=>{ resolve({data:[\n        {side: 'Buy',\n            amount: {\n                sell:{ belong:'ETH', tradeValue: 0.1 },\n                buy:{ belong:'LRC', tradeValue: 123 }\n            },\n            time: Date.now(),\n            fee: 0.02,\n            amountLP:{\n                sell:{ belong:'ETH', tradeValue: 0.1 },\n                buy:{ belong:'LRC', tradeValue: 123 }\n            }\n        },{side: 'Buy',\n            amount: {\n                sell:{ belong:'ETH', tradeValue: 0.1 },\n                buy:{ belong:'LRC', tradeValue: 123 }\n            },\n            time: Date.now(),\n            fee: 0.02,\n            amountLP:{\n                sell:{ belong:'ETH', tradeValue: 0.1 },\n                buy:{ belong:'LRC', tradeValue: 123 }\n            }\n        }\n    ]})});\nexport function* getPostsSaga() {\n    try {\n        //\n        const { data } = yield call(getAmmRecordApi);\n        yield put(getAmmRecordStatus({ammRecords: data}));\n    } catch (err) {\n        yield put(getAmmRecordStatus(err));\n    }\n}\n\nexport default function* ammRecordSaga() {\n    yield all([takeLatest(getAmmRecord, getPostsSaga)]);\n}\n\n\n\n\n","import { all, takeLatest, call, put } from \"redux-saga/effects\";\nimport { getAmmTrades, getAmmTradesStatus } from './reducer';\n\nconst getAmmTradesApi = ()=>new Promise((resolve)=>{\n    //TODO: check is connect and active and assign wallet\n    //TODO: if not reject directory, any error happen will clean the\n    resolve([\n    {side: 'Buy',\n        amount: {\n            sell:{ belong:'ETH', tradeValue: 0.1 },\n            buy:{ belong:'LRC', tradeValue: 123 }\n        },\n        time: Date.now(),\n        fee: 0.02,\n        priceValue: 0.123,\n        priceToken: 'LRC'}\n    ,{side: 'Buy',\n        amount: {\n            sell:{ belong:'ETH', tradeValue: 0.1 },\n            buy:{ belong:'LRC', tradeValue: 123 }\n        },\n        time: Date.now(),\n        fee: 0.02,\n        priceValue: 0.123,\n        priceToken: 'LRC'}\n])});\nexport function* getPostsSaga() {\n    try {\n        //\n        const { data } = yield call(getAmmTradesApi);\n        const posts = data;\n        yield put(getAmmTradesStatus(posts));\n    } catch (err) {\n        yield put(getAmmTradesStatus(err));\n    }\n}\n\nexport default function* ammTradesSaga() {\n    yield all([takeLatest(getAmmTrades, getPostsSaga)]);\n}\n","import { combineReducers } from '@reduxjs/toolkit';\nimport { ammRecordSlice } from './AmmRecord';\nimport { ammTradesSlice, getAmmTrades } from './AmmTrades';\nimport { ammMapSlice } from './AmmMap';\nimport { ammActivityMapSlice } from './AmmActivityMap';\nimport ammActivityMapSaga from './AmmActivityMap/saga';\nimport { ammMapSaga } from './AmmMap/saga';\nimport ammRecordSaga from './AmmRecord/saga';\nimport ammTradesSaga from './AmmTrades/saga';\nimport { all, fork } from 'redux-saga/effects';\n// import tokenSaga from '../token/saga';\n// import walletSaga from '../wallet/saga';\n// export * from './AmmRecord';\n// export * from './AmmTrades';\n// export * from './AmmMap';\n// export * from './AmmActivityMap';\n\nexport const  ammReducer = combineReducers({\n    ammRecord: ammRecordSlice.reducer,\n    ammTrades: ammTradesSlice.reducer,\n    ammMap: ammMapSlice.reducer,\n    ammActivityMap:ammActivityMapSlice.reducer\n})\nexport const ammForks =  [\n    fork(ammActivityMapSaga),\n    ...ammMapSaga,\n    fork(ammRecordSaga),\n    fork(ammTradesSaga)\n]\n\n// export * from './interface'\n","import { all, call, fork, put, takeLatest } from \"redux-saga/effects\";\nimport { getTokenMap, getTokenMapStatus } from './reducer';\nimport { getIcon } from '../../utils/swap_calc_utils';\nimport { CoinInfo, CoinMap } from '@loopring-web/component-lib/static-resource';\nimport { AddressMap, GetTokenMapParams, IdMap } from './interface';\nimport { PayloadAction } from '@reduxjs/toolkit';\n\nconst getTokenMapApi = async <R extends { [ key: string ]: any }>({\n                                                                      tokensMap,\n                                                                      pairs,\n                                                                      marketArr,\n                                                                      tokenArr\n                                                                  }: GetTokenMapParams<R>) => {\n    let coinMap: CoinMap<any, CoinInfo<any>> = {};\n    let tokenMap:any = tokensMap;\n    let addressIndex: AddressMap = {};\n    let idIndex: IdMap = {};\n    Reflect.ownKeys(tokensMap).forEach((key) => {\n        if (!(key as string).startsWith('LP-')) {\n            coinMap[ key as string ] = {\n                icon: getIcon(key as string, tokensMap),\n                name: key as string,\n                simpleName: key,\n                description: '',\n                company: '',\n            }\n        }\n\n        if (pairs[ key as string ] && pairs[ key as string ].tokenList) {\n            // @ts-ignore\n            tokensMap[ key ].tradePairs = pairs[ key as string ].tokenList;\n        }\n        addressIndex = {\n            ...addressIndex,\n            // @ts-ignore\n            [ tokensMap[ key ].address ]: key as string\n        }\n        idIndex = {\n            ...idIndex,\n            // @ts-ignore\n            [ tokensMap[ key ].tokenId ]: key as string\n        }\n    })\n    return {data: {coinMap, addressIndex, idIndex, tokenMap, marketArray: marketArr, marketCoins: tokenArr}}\n};\n\nexport function* getPostsSaga<R extends { [ key: string ]: any }>({payload}: PayloadAction<GetTokenMapParams<R>>) {\n    try {\n        const {tokensMap, pairs, marketArr,tokenArr} = payload\n        // @ts-ignore\n        const {data} = yield call(getTokenMapApi, {tokensMap, pairs, marketArr, tokenArr});\n\n        yield put(getTokenMapStatus(data));\n    } catch (err) {\n        yield put(getTokenMapStatus(err));\n    }\n}\n\n\nexport function* tokenInitSaga() {\n    yield all([takeLatest(getTokenMap, getPostsSaga)]);\n}\n\n\nexport const tokenSaga = [\n    fork(tokenInitSaga),\n    // fork(tokenPairsSaga),\n]\n\n// export function* getPairsSaga({payload}:PayloadAction<{tokenPairs: TokenPairs }>) {\n//     try {\n//         const {tokenPairs} = payload;\n//         const tokenPairsMap =  Reflect.ownKeys(tokenPairs).reduce((prev,key)=>{\n//            // @ts-ignore\n//             return prev[key as string] =  tokenPairs[key as string].tokenList\n//         }, {} )\n//\n//         yield put(getTokenMapStatus({tokenPairsMap}));\n//     } catch (err) {\n//         yield put(getAmmMapStatus(err));\n//     }\n// }\n// export function* tokenPairsSaga() {\n//     yield all([takeLatest(getTokenPairMap, getPairsSaga)]);\n// }\n\n\n","import { all, call, fork, put, takeLatest } from \"redux-saga/effects\"\nimport { getTicker, getTickers, getTickerStatus } from './reducer'\nimport {\n    CoinKey,\n    CustomError,\n    ErrorMap,\n    FloatTag,\n    PairKey,\n    TradeFloat\n} from '@loopring-web/component-lib/src/static-resource'\n\n// import { asyncGetTradingInfo, getTradingInfo } from \"stores/trading/hook\"\nimport { TickerData, getTokenInfoById, toBig } from \"loopring-sdk\"\n\n// import { makeCoinInfo } from 'utils/swap_calc_utils'\nimport { exchangeAPI } from \"stores/apis/api\"\n\ntype TickerMap<R extends {[key:string]:any}> = {\n    [key in CoinKey<R>|PairKey<R>]?:TradeFloat & {\n    reward?:number,rewardToken?:string\n    }\n\n}\n\nconst demoTicker = [\n    ['ETH','2.4','24h','1234','3423525222','up'],\n    ['LRC','2.4','24h','1234','3423525222','up'],\n    ['DPR','2.4','24h','1234','3423525222','up'],\n    ['USDC','2.4','24h','1234','3423525222'],\n    ['USDT','2.4','24h','1234','3423525222','down'],\n    ['AMM-LRC-ETH','2.4','24h','1234','3423525222','up','23','1231','LRC'],\n    ['AMM-USDT-USDC','2.4','24h','1234','3423525222','up','23','1231','USDT'],\n    ['AMM-USDT-LRC','2.4','24h','1234','3423525222','up','23','1231'],\n    ['AMM-USDT-ETH','2.4','24h','1234','3423525222','up','23','1331'],\n    ['AMM-ETH-USDC','2.4','24h','1234','3423525222','up','12','233'],\n    ['AMM-ETH-USDT','2.4','24h','1234','3423525222','up','56','233'],\n\n]\n/*\nconst getTickersApi = async <R extends {[key:string]:any}>(list:Array<keyof R>)=>new Promise((resolve,reject)=>{\n\n    if(list.length>0){\n        const data:TickerMap<R> = {}; //= // {\n        list.map((tokenKey: keyof R) => {\n                const index = demoTicker.findIndex((item) => {\n                  return  item[ 0 ] === tokenKey\n                })\n                if (index > -1) {\n                    const ticker = demoTicker[index]\n                    data[tokenKey] = {\n                        percent: ticker[1],\n                        timeUnit: ticker[2].toString(),\n                        priceDollar: Number(ticker[3]),\n                        priceYuan:  Number(ticker[3]) * 6.3, //TODO get usdt to rmb price\n                        volume: Number(ticker[4]),\n                        floatTag: ticker[5].toString() === 'up'? FloatTag.increase:ticker[5].toString() === 'down'?FloatTag.decrease:FloatTag.none ,\n                        APY: 0,\n                        reward: ticker[7] ?  Number(ticker[7]) :undefined,\n                        rewardToken: ticker[8] ?  Number(ticker[8]) :undefined,\n                    } as TradeFloat\n                } else {\n                    throw new CustomError({...ErrorMap.GET_X_TOKEN_TICKER_ERROR, options: {token: tokenKey}});\n                    //reject(ErrorMap.GET_X_TOKEN_TICKER_ERROR)\n                }\n        })\n        resolve({data});\n    }else{\n       reject(ErrorMap.NO_TOKEN_KEY_LIST)\n    }\n\n});\n*/\nconst getTickersApi = async <R extends {[key:string]:any}>(list:Array<keyof R>)=> {\n\n    const data:TickerMap<R> = {}\n\n    const tickers = await exchangeAPI().getTicker({market: list.join(',')})\n\n    console.log('>>>tickMap:', tickers.tickMap)\n\n    //@ts-ignore\n    tickers.tickMap.forEach((item: TickerData, key: keyof R) => {\n        console.log('>>>base_token_volume:', item.base_token_volume)\n        data[key] = {\n            timeUnit: '24h',\n            priceDollar: 0,\n            priceYuan:  0,\n            volume: toBig(item.base_token_volume).toNumber(),\n            floatTag: item.close > item.open ? 'increase' : 'decrease' ,\n            APY: 0,\n            reward: 0,\n            rewardToken: '',\n        } as TradeFloat\n    })\n\n    return { data }\n}\n\nexport function* getPostsSaga({payload}:any) {\n    try {\n        // @ts-ignore\n        const { tickerKey,tickerKeys } = payload;\n        console.log('getPostsSaga tickerKey',tickerKey, tickerKeys)\n        if(tickerKey || (tickerKeys && tickerKeys.length)) {\n            const {data}  = yield call(getTickersApi,tickerKey?[tickerKey]:tickerKeys);\n            yield put(getTickerStatus({tickerMap:data}));\n\n        }else{\n            throw new CustomError(ErrorMap.NO_TOKEN_KEY_LIST);\n        }\n    } catch (err) {\n        yield put(getTickerStatus(err));\n    }\n}\n\nfunction* tickerSaga() {\n    yield all([takeLatest(getTicker, getPostsSaga)]);\n}\nfunction* tickersSaga() {\n    yield all([takeLatest(getTickers, getPostsSaga)]);\n}\n\nexport const tickerForks = [\n    fork(tickerSaga),\n    fork(tickersSaga),\n]\n ","import { all, call, delay, fork, put, take, takeLatest } from \"redux-saga/effects\"\nimport { updateSystem, getSystemStatus, updateRealTimeObj } from './reducer'\nimport { ENV, NETWORK, NETWORKEXTEND } from \"./interface\"\nimport store from '../index';\nimport { reset } from '../account/reducer';\nimport { ChainId } from 'loopring-sdk';\nimport { ammpoolAPI, exchangeAPI } from '../apis/api';\nimport { getAmmMap, updateRealTimeAmmMap } from '../Amm/AmmMap';\nimport { getTokenMap, statusUnset as tokenStatusUnset } from '../token';\n\n\nconst initConfig  = function* <R extends {[key:string]:any}>() {\n    store.dispatch(reset(undefined));\n    const exchangeApi = exchangeAPI();\n    const ammpoolApi = ammpoolAPI();\n    const {tokenSymbolMap: tokensMap} = yield call(async ()=> await exchangeApi.getTokens())\n    const {ammpools} = yield call(async ()=>await ammpoolApi.getAmmPoolConf());\n    const {pairs,marketArr,tokenArr}  = yield call(async ()=>await exchangeApi.getMixMarkets());\n    store.dispatch(getTokenMap({tokensMap,pairs,marketArr,tokenArr}))\n    yield take('tokenMap/getTokenMapStatus');\n    store.dispatch(getAmmMap({ammpools}))\n    if(store.getState().tokenMap.status === 'ERROR'){\n\n    }\n    // yield take('tokenMap/getTokenMapStatus');\n\n}\n\nconst getSystemsApi = async <R extends {[key:string]:any}>(chainId:any)=> {\n    //TODO get some other reuqired id...... put into system\n    // const { chainId } = system\n    const env =  window.location.hostname === 'localhost'? ENV.DEV :ChainId.GORLI === chainId ?  ENV.UAT : ENV.PROD\n    chainId = ChainId.GORLI === chainId ? ChainId.GORLI: ChainId.MAINNET === chainId ?  ChainId.MAINNET: NETWORKEXTEND.NONETWORK\n    const faitPrices = (await exchangeAPI().getFiatPrice({ legal: 'CNY' })).fiatPrices\n    const gasPrice = (await exchangeAPI().getGasPrice()).gasPrice / 1e+9\n    const baseURL = ChainId.MAINNET === chainId ? 'https://api3.loopring.io' : 'https://uat2.loopring.io';\n    const forex = faitPrices['USDC']\n    let {__timer__} = store.getState().system;\n    __timer__ = ((__timer__)=>{\n        if(__timer__ && __timer__ !== -1){\n            clearInterval(__timer__)\n\n        }\n        return  setInterval(async()=>{\n            const faitPrices = (await exchangeAPI().getFiatPrice({ legal: 'CNY' })).fiatPrices\n            const gasPrice = (await exchangeAPI().getGasPrice()).gasPrice / 1e+9\n            const forex = faitPrices['USDT']\n            store.dispatch(updateRealTimeAmmMap(undefined))\n            store.dispatch(updateRealTimeObj({faitPrices, gasPrice,forex}))\n        },900000)   //\n\n    })(__timer__);\n\n    return {  chainId, env, baseURL, faitPrices, gasPrice, forex , __timer__ }\n}\n\nexport function* getUpdateSystem({payload}:any) {\n    try {\n        // @ts-ignore\n        const { chainId } = payload;\n\n        console.log('getUpdateSystem payload:', payload)\n        // console.log('getPostsSaga systemKey',systemKey, systemKeys)\n        const { env, baseURL, faitPrices, gasPrice, forex , __timer__ } = yield call(getSystemsApi, chainId);\n\n        yield put(getSystemStatus({   env, baseURL, faitPrices, gasPrice, forex , __timer__ }));\n        yield call(initConfig)\n        //TODO check wallect store\n    } catch (err) {\n        yield put(getSystemStatus(err));\n    }\n}\n\nfunction* systemSaga() {\n    yield all([takeLatest(updateSystem, getUpdateSystem)]);\n}\nfunction* initConfigSaga(){\n    //yield all([takeLatest(initConfig, getUpdateSystem)]);\n}\n\n\nexport const systemForks = [\n    fork(systemSaga),\n //   fork(initConfig),\n]\n","import { all, call, fork, put, takeLatest } from \"redux-saga/effects\";\nimport {  getWalletLayer1Status, updateWalletLayer1 } from './reducer';\nimport { CoinKey, PairKey, WalletCoin } from '@loopring-web/component-lib/src/static-resource';\nimport { exchangeAPI } from '../apis/api';\nimport store from '../index';\nimport { fromWEI } from '../../utils/swap_calc_utils';\n\ntype WalletLayer1Map<R extends {[key:string]:any}> = {\n    [key in CoinKey<R>|PairKey<R>]?:WalletCoin<R>\n}\n\nconst getWalletLayer1Balance = async <R extends {[key:string]:any}>()=> {\n    //TODO: check is connect and active and assign walletLayer1\n    //TODO: if not reject directory, any error happen will clean the\n    // await sdk\n    const exchangeApi = exchangeAPI();\n    const {accAddr,accountId} = store.getState().account;\n    const {tokenMap,marketCoins} = store.getState().tokenMap;\n    // @ts-ignore\n    const {tokenBalances} =  await exchangeApi.getTokenBalances({owner:accAddr,token: marketCoins.join()},tokenMap)\n    let walletLayer1;\n\n    if(tokenBalances) {\n        walletLayer1 = Reflect.ownKeys(tokenBalances).reduce((prev,item)=>{\n            return   {...prev, [ item ]:{\n                    belong: item,\n                    count: fromWEI(tokenMap, item, tokenBalances[item as string]),\n                }\n            }\n        },{} as WalletLayer1Map<R>)\n    }\n    return {walletLayer1}\n};\n\nexport function* getPostsSaga() {\n    try {\n        //\n        const {walletLayer1} = yield call(getWalletLayer1Balance);\n        yield put(getWalletLayer1Status({walletLayer1}));\n    } catch (err) {\n        yield put(getWalletLayer1Status(err));\n    }\n}\n\nexport function* walletLayer1Saga() {\n    yield all([takeLatest(updateWalletLayer1, getPostsSaga)]);\n}\n\nexport const walletLayer1Fork = [\n    fork(walletLayer1Saga),\n    // fork(tokenPairsSaga),\n]\n\n","import { all, call, fork, put, takeLatest } from \"redux-saga/effects\";\nimport { getWalletLayer2Status, updateWalletLayer2 } from './reducer';\nimport { CoinKey, PairKey, WalletCoin } from '@loopring-web/component-lib/src/static-resource';\nimport {  userAPI } from '../apis/api';\nimport store from '../index';\n\ntype WalletLayer2Map<R extends {[key:string]:any}> = {\n    [key in CoinKey<R>|PairKey<R>]?:WalletCoin<R>\n}\n\nconst getWalletLayer2Balance = async <R extends {[key:string]:any}>()=> {\n    //TODO: check is connect and active and assign walletLayer1\n    //TODO: if not reject directory, any error happen will clean the\n    // await sdk\n    // const exchangeApi = exchangeAPI();\n    const userApi = userAPI();\n    const {accountId,apiKey} = store.getState().account;\n    const {tokenMap,idIndex,marketCoins} = store.getState().tokenMap;\n    let walletLayer2;\n    if(apiKey && accountId){\n        // @ts-ignore\n        const {userBalances} =  await userApi.getUserBalances({accountId:accountId,tokens:marketCoins?.map((key)=>{\n            if(tokenMap){\n                return  tokenMap[key].tokenId\n            } }).join(',')},apiKey)\n        if(userBalances) {\n            // tokenId: number;\n            // total: string;\n            // locked: string;\n            // pending: {\n            //     withdraw: string;\n            //     deposit: string;\n            // };\n            walletLayer2 = Reflect.ownKeys(userBalances).reduce((prev,item)=>{\n                // @ts-ignore\n                return   {...prev, [ idIndex[item] ]:userBalances[Number(item)]}\n            },{} as WalletLayer2Map<R>)\n        }\n    }\n\n    return {walletLayer2}\n};\nexport function* getPostsSaga() {\n    try {\n        //\n        const {walletLayer2} = yield call(getWalletLayer2Balance);\n        yield put(getWalletLayer2Status({walletLayer2}));\n    } catch (err) {\n        yield put(getWalletLayer2Status(err));\n    }\n}\n\nexport function* walletLayer2Saga() {\n    yield all([takeLatest(updateWalletLayer2, getPostsSaga)]);\n}\n\n\nexport const walletLayer2Fork = [\n    fork(walletLayer2Saga),\n    // fork(tokenPairsSaga),\n]\n\n","import { all, put, fork, select, takeEvery } from \"redux-saga/effects\"\n// import machine from \"../state_machine/fsm/machine\"\n// import { TRANSITION } from \"../state_machine/fsm/actionTypes\"\n// import { helloSaga } from \"./sagas\"\nimport { tokenSaga } from './token/saga';\nimport { ammForks } from './Amm';\nimport { tickerForks } from './ticker/saga';\nimport { systemForks } from './system/saga';\nimport { walletLayer1Fork } from './walletLayer1/saga';\nimport { walletLayer2Fork } from './walletLayer2/saga';\n\n\n// https://css-tricks.com/finite-state-machines-with-react/\n// https://musing-rosalind-2ce8e7.netlify.com/?machine=%7B%22initial%22%3A%22initial%22%2C%22states%22%3A%7B%22initial%22%3A%7B%22on%22%3A%7B%22LOGIN%22%3A%22loggedIn%22%2C%22LOGOUT%22%3A%22loggedOut%22%7D%7D%2C%22loggedOut%22%3A%7B%22on%22%3A%7B%22SUBMIT%22%3A%22loading%22%7D%7D%2C%22loading%22%3A%7B%22on%22%3A%7B%22SUCCESS%22%3A%22loggedIn%22%2C%22FAIL%22%3A%22loggedOut%22%7D%7D%2C%22loggedIn%22%3A%7B%22onEntry%22%3A%5B%22SET_TOKEN%22%5D%2C%22onExit%22%3A%5B%22CLEAR_TOKEN%22%5D%2C%22on%22%3A%7B%22LOGOUT%22%3A%22loggedOut%22%7D%7D%7D%7D\n\n// function* machineHandler(event: any, action: any) {\n//\n//   // @ts-ignore\n//   const currentAppState = yield select((state) => { state.account.status })\n//   const nextAppState = machine.transition(currentAppState, event)\n//\n//   yield put({\n//     type: \"APP_STATE/\" + nextAppState.value,\n//     payload: {\n//       value: nextAppState.value\n//     }\n//   });\n//\n//   console.debug(\"-> from \" + currentAppState + \" to \" + nextAppState);\n//\n//   for (let i = 0; i < nextAppState.actions.length; i++) {\n//     yield put({\n//       type: nextAppState.actions[i],\n//       payload: action\n//     });\n//   }\n// }\n\n// function* watchTransition() {\n//   yield takeEvery(TRANSITION, function*(action: any) {\n//     yield machineHandler(action.event, action.payload);\n//   });\n// }\n\nfunction* mySaga() {\n  yield all([\n    // fork(helloSaga),\n    // fork(watchTransition),\n    ...tokenSaga,\n    ...walletLayer1Fork,\n    ...walletLayer2Fork,\n    ...systemForks,\n    ...ammForks,\n    ...tickerForks\n\n  ]);\n}\n\nexport default mySaga;\n","import { createSlice, PayloadAction, Slice } from '@reduxjs/toolkit'\nimport { STATUS } from '../constant';\nimport { StateBase } from '../interface';\nimport { SystemStatus } from '../system';\n\nconst initialState: StateBase & {socket: { [ key: string]:string }} = {\n  socket: {},\n  status: 'UNSET',\n  errorMessage: null,\n}\nconst socketSlice: Slice<StateBase & {socket: { [ key: string]:string }}> = createSlice({\n  name: 'socket',\n  initialState,\n  reducers: {\n    socketStart(state, action: PayloadAction<{socket: { [ key: string]:string }}>) {\n      state.status = STATUS.PENDING\n      state.socket =    action.payload.socket\n    },\n    getSystemStatus(state, action: PayloadAction<{socket: { [ key: string]:string }}>) {\n\n      // @ts-ignore\n      if (action.error) {\n        state.status = STATUS.ERROR\n        // @ts-ignore\n        state.errorMessage = action.error\n      }\n      // state.socket = action.payload.socket\n      state.status = STATUS.DONE\n    },\n\n    statusUnset: state => {\n      state.status = STATUS.UNSET\n    }\n\n  },\n});\nexport { socketSlice };\nexport const {socketStart, getSocketStatus , statusUnset} = socketSlice.actions;\n","import { configureStore, combineReducers, getDefaultMiddleware } from '@reduxjs/toolkit'\n\nimport { useDispatch } from 'react-redux'\nimport { save, load } from 'redux-localstorage-simple'\n\nimport createSagaMiddleware from 'redux-saga'\n\n// We'll use redux-logger just as an example of adding another middleware\nimport logger from 'redux-logger'\n\n// And use redux-batch as an example of adding enhancers\nimport { reduxBatch } from '@manaflair/redux-batch'\nimport { updateVersion } from './global/actions'\n\nimport accountSlice from './account/reducer'\nimport tradingSlice from './trading/reducer'\nimport transactionlice from './transactions/reducer'\n\n\nimport { modalsSlice, setLanguage, settingsSlice } from '@loopring-web/component-lib';\nimport { ammReducer } from './Amm';\nimport { tokenMapSlice } from './token';\nimport mySaga from './rootSaga';\nimport { tickerMapSlice } from './ticker';\nimport { systemSlice } from './system';\nimport { walletLayer1Slice } from './walletLayer1';\nimport { walletLayer2Slice } from './walletLayer2';\nimport { socketSlice } from './socket';\n\nconst sagaMiddleware = createSagaMiddleware()\n\nconst reducer = combineReducers({\n  account: accountSlice.reducer,\n  socket: socketSlice.reducer,\n  settings: settingsSlice.reducer,\n  system: systemSlice.reducer,\n  trading: tradingSlice.reducer,\n  transactions: transactionlice.reducer,\n  modals: modalsSlice.reducer,\n  amm:ammReducer,\n  tokenMap: tokenMapSlice.reducer,\n  walletLayer2: walletLayer2Slice.reducer,\n  walletLayer1: walletLayer1Slice.reducer,\n  tickerMap: tickerMapSlice.reducer\n})\n\n//\n\nconst PERSISTED_KEYS: string[] = ['settings']\n\nconst store = configureStore({\n  reducer,\n  // middleware: (getDefaultMiddleware) => getDefaultMiddleware().concat(logger),\n  middleware: [...getDefaultMiddleware({ thunk: false,serializableCheck:false, }), save({ states: PERSISTED_KEYS }), sagaMiddleware, ],\n  // middleware: [...getDefaultMiddleware({ thunk: true }), ],\n  devTools: process.env.NODE_ENV !== 'production',\n  enhancers: [reduxBatch],\n  preloadedState: load({ states: PERSISTED_KEYS })\n})\nstore.dispatch(updateVersion())\nstore.dispatch(setLanguage(store.getState().settings.language))\n// @ts-ignore\nsagaMiddleware.run(mySaga, store.dispatch);\n\n// The store has been created with these options:\n// - The slice reducers were automatically passed to combineReducers()\n// - redux-thunk and redux-logger were added as middleware\n// - The Redux DevTools Extension is disabled for production\n// - The middleware, batch, and devtools enhancers were composed together\n\nexport type AppDispatch = typeof store.dispatch\nexport const useAppDispatch = () => useDispatch<AppDispatch>()\n\nexport type RootState = ReturnType<typeof reducer>\n\nexport default store\n","import { AmmpoolAPI, ChainId, ExchangeAPI, UserAPI, WsAPI } from \"loopring-sdk\"\nimport { getAccount, getChainId } from 'stores/trading/hook'\n\nexport const userAPI = () => {\n    const userApi = new UserAPI(getChainId() as ChainId)\n    return userApi\n}\n\nexport const exchangeAPI = () => {\n    return new ExchangeAPI(getChainId() as ChainId)\n}\n\nexport const ammpoolAPI = () => {\n    return new AmmpoolAPI(getChainId() as ChainId)\n}\n\nexport const wsAPI = () => {\n    return new WsAPI(getChainId() as ChainId)\n}\n","import { ConnectorNames } from 'loopring-sdk'\n\nimport {\n    injected,\n    network,\n    walletconnect,\n    walletlink,\n    ledger,\n    trezor,\n    authereum,\n} from 'networks/web3_connectors'\n\nexport const connectorsByName: { [connectorName in ConnectorNames]: any } = {\n    [ConnectorNames.Unknown]: undefined,\n    [ConnectorNames.Injected]: injected,\n    [ConnectorNames.Network]: network,\n    [ConnectorNames.WalletConnect]: walletconnect,\n    [ConnectorNames.WalletLink]: walletlink,\n    [ConnectorNames.Ledger]: ledger,\n    [ConnectorNames.Trezor]: trezor,\n    [ConnectorNames.Authereum]: authereum,\n}\n","import { useState, useCallback, useMemo, useRef, useEffect, } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\n\nimport { useCustomDCEffect } from 'hooks/common/useCustomDCEffect'\n\nimport { useGetTradingInfo } from 'stores/trading/hook'\nimport { useActiveWeb3React, } from 'hooks/web3/useWeb3'\n\nimport { Lv2Account, } from 'defs/account_defs'\n\nimport { AccountStatus, StatusChangeEvent } from 'state_machine/account_machine_spec'\n\nimport * as sign_tools from 'loopring-sdk'\n\nimport { connectorsByName } from 'defs/web3_defs'\n\nimport { ChainId, ConnectorNames, dumpError400, ExchangeAPI, UserAPI, } from 'loopring-sdk'\n\nimport { toHex, toBig, } from 'loopring-sdk'\n\nimport { RootState } from 'stores'\n\nimport {\n    reset, setAccountStatus, setConnectName,\n    setConnectNameTemp, setAccountInfo, setEddsaKey, setApikey, setAccAddr,\n} from 'stores/account/reducer'\n\nimport { AccountMachineSpec, } from 'state_machine/account_machine_spec'\n\nimport { buildMachine } from 'state_machine/machine_builder'\n\nimport voca from 'voca'\nimport { usePrevious } from 'react-use'\n\nimport Web3 from 'web3'\n\nimport { useExchangeAPI, useUserAPI } from 'hooks/exchange/useApi'\n\nimport { UserStorage } from 'storage'\n\nimport store from 'stores'\nimport { updateWalletLayer1, reset as resetLayer1 } from '../walletLayer1';\nimport { updateWalletLayer2,reset as resetLayer2 } from '../walletLayer2';\n\n\nexport function useWeb3Account() {\n\n    const {\n        connector,\n        library,\n        account,\n        chainId,\n        active,\n        error,\n    } = useActiveWeb3React()\n\n    const isConnected: boolean = active && !voca.isBlank(account as string)\n\n    return {\n        account,\n        connector,\n        library,\n        chainId,\n        active,\n        isConnected,\n        error,\n    }\n\n}\n\nexport function useAccount() {\n\n    const account: Lv2Account = useSelector((state: RootState) => state.account)\n\n    const isNoAccount = () => {\n        return account.status === AccountStatus.NOACCOUNT\n    }\n\n    const isActivated = () => {\n        return account.status === AccountStatus.ACTIVATED\n    }\n\n    return {\n        account,\n        isNoAccount,\n        isActivated,\n        apiKey: account.apiKey,\n        eddsaKey: account.eddsaKey,\n        accountId: account.accountId,\n    }\n}\n\nexport function useStateMachine() {\n    const dispatch = useDispatch()\n\n    const machine = buildMachine(AccountMachineSpec())\n\n    const sendEvent = useCallback((account: Lv2Account, event: StatusChangeEvent) => {\n        const nextState = machine(account.status, event)\n        if (nextState) {\n            dispatch(setAccountStatus(nextState))\n        }\n    }, [machine, dispatch])\n\n    return {\n        sendEvent,\n    }\n}\n\nexport function useConnect() {\n\n    const {\n        activate,\n    } = useActiveWeb3React()\n\n    const { sendEvent } = useStateMachine()\n\n    const dispatch = useDispatch()\n\n    const [activatingConnector, setActivatingConnector] = useState<any>()\n\n    const connect = useCallback((item_name: ConnectorNames, isSwitch: boolean = false) => {\n        const newConnector: any = connectorsByName[item_name]\n        setActivatingConnector(newConnector)\n        activate(newConnector)\n        dispatch(setConnectNameTemp(item_name))\n\n        if (isSwitch) {\n          //  console.log('try Connecting... isSwitch Reset')\n            sendEvent(store.getState().account, StatusChangeEvent.Reset)\n        }\n\n        sendEvent(store.getState().account, StatusChangeEvent.Connecting)\n\n        console.log('try Connecting...')\n    }, [activate, dispatch, sendEvent])\n\n    return {\n        connect,\n        activatingConnector,\n    }\n\n}\n\nexport function useDisconnect() {\n\n    const {\n        deactivate,\n    } = useActiveWeb3React()\n\n    const dispatch = useDispatch()\n\n    const disconnect = useCallback(() => {\n        deactivate()\n        dispatch(reset(undefined))\n        //TODO dispatch wallet info \n    }, [deactivate, dispatch])\n\n    return {\n        disconnect,\n    }\n\n}\n\nexport function useUnlock() {\n\n    const dispatch = useDispatch()\n\n    const exchangeApi: any = useExchangeAPI()\n\n    const userApi: any = useUserAPI()\n\n    const { tradingInfo } = useGetTradingInfo()\n\n    const { connector, } = useWeb3Account()\n\n    const { sendEvent } = useStateMachine()\n\n    const lock = useCallback(async (account: Lv2Account) => {\n        console.log('useCallback lock:', account.status)\n        sendEvent(account, StatusChangeEvent.Lock)\n    }, [sendEvent])\n\n    const unlock = useCallback(async (account: Lv2Account) => {\n\n        if (!userApi || !exchangeApi || !connector || !account.accountId || !tradingInfo.exchangeInfo?.exchangeAddress\n            || account.status !== AccountStatus.LOCKED) {\n            console.log('accountId:', account.accountId)\n            console.log('exchangeAddress:', tradingInfo.exchangeInfo)\n            console.log('enter !! account.status:', account.status)\n            return\n        }\n\n        console.log('useUnlock useCallback:', account.status)\n\n        if (account.status !== AccountStatus.LOCKED) {\n            throw Error('unexpected status:' + account.status)\n        }\n\n        let event = undefined\n        let sk = undefined\n        let apikey: any = undefined\n\n        try {\n            const provider = await connector.getProvider()\n            const web3 = new Web3(provider as any)\n            console.log('useUnlock eddsaKey:', account.eddsaKey)\n\n            if (!account.eddsaKey) {\n                const eddsakey = await sign_tools\n                    .generateKeyPair(\n                        web3,\n                        account.accAddr,\n                        tradingInfo.exchangeInfo?.exchangeAddress as string,\n                        account.nonce - 1,\n                        account.connectName,\n                    )\n                sk = toHex(toBig(eddsakey.keyPair.secretKey))\n\n            } else {\n                sk = account.eddsaKey\n            }\n\n            apikey = await userApi.getUserApiKey({\n                accountId: account.accountId\n            }, sk)\n\n            console.log('useUnlock apikey:', apikey)\n\n            event = StatusChangeEvent.Unlock\n\n        } catch (reason) {\n            event = StatusChangeEvent.Reset\n        }\n\n        if (sk) {\n            dispatch(setEddsaKey(sk))\n        }\n\n        if (apikey?.apiKey) {\n            dispatch(setApikey(apikey.apiKey))\n        }\n\n        console.log('next event:', event)\n        if (event) {\n            sendEvent(account, event)\n        }\n\n    }\n        , [dispatch, sendEvent, exchangeApi, userApi, connector, tradingInfo.exchangeInfo])\n\n    return {\n        lock,\n        unlock,\n    }\n}\n\nasync function checkAccountAvailableAsync(exchangeApi: ExchangeAPI, userApi: UserAPI, account: Lv2Account, dispatch: any, sendEvent: any, connector: any, exchangeAddress: string) {\n\n    let accInfo = undefined\n    let event = undefined\n    let sk = undefined\n    let code = undefined\n    let apikey: any = undefined\n\n    try {\n        accInfo = (await exchangeApi.getAccount({\n            owner: account.accAddr\n        })).accInfo\n        if (accInfo.publicKey && accInfo.publicKey.x && accInfo.publicKey.y) {\n            if (account.accountId !== accInfo.accountId) {\n                const provider = await connector.getProvider()\n                const web3 = new Web3(provider as any)\n                try {\n                    code = await web3.eth.getCode(account.accAddr)\n                    // console.log('!!!!!! about to generateKeyPair!!!!!!!!!!!')\n                    try {\n                        const eddsakey = await sign_tools\n                            .generateKeyPair(\n                                web3,\n                                account.accAddr,\n                                exchangeAddress,\n                                accInfo.nonce - 1,\n                                account.connectName,\n                            )\n                        sk = toHex(toBig(eddsakey.keyPair.secretKey))\n                        const px = toHex(toBig(eddsakey.keyPair.publicKeyX))\n                        const py = toHex(toBig(eddsakey.keyPair.publicKeyY))\n\n                        try {\n                            apikey = await userApi.getUserApiKey({\n                                accountId: accInfo.accountId\n                            }, sk)\n                            event = (StatusChangeEvent.HasPubkey)\n                        } catch (reason) {\n                            dumpError400(reason)\n                            event = (StatusChangeEvent.ErrorResponse)\n                        }\n                    } catch (reason) {\n                        dumpError400(reason)\n                        event = (StatusChangeEvent.ErrorResponse)\n                    }\n\n                } catch (reason) {\n                    dumpError400(reason)\n                    event = (StatusChangeEvent.ErrorResponse)\n                }\n\n            } else {\n                console.log('already has accountId!')\n            }\n        } else {\n            console.log('2 has id but no pubkey currStatus:', account.status)\n            event = (StatusChangeEvent.HasNoPubkey)\n        }\n    } catch (reason) {\n        // 3 has none of above\n        console.log('2 has id but no pubkey currStatus:', account.status)\n        dumpError400(reason)\n        // check deposit tx (local and ethereum)\n        event = (StatusChangeEvent.ErrorResponse)\n    }\n\n    if (accInfo && accInfo.owner !== account.accAddr) {\n        dispatch(setAccountInfo(accInfo))\n    }\n\n    if (sk) {\n        dispatch(setEddsaKey(sk))\n    }\n\n    if (apikey) {\n        console.log('---------> apikey:', apikey)\n        dispatch(setApikey(apikey.apiKey))\n    }\n\n    if (event) {\n        sendEvent(event)\n    }\n\n}\n\nexport function useCheckAccStatus() {\n\n    const dispatch = useDispatch()\n\n    const { account } = useAccount()\n\n    const { sendEvent } = useStateMachine()\n\n    const exchangeApi: ExchangeAPI = useExchangeAPI()\n\n    const userApi: UserAPI = useUserAPI()\n\n    const { account: web3Account, active, isConnected, chainId, connector, } = useWeb3Account()\n\n    const lv1Acc = web3Account as string\n\n    const prevChainId = usePrevious(chainId)\n    const prevWeb3Account = usePrevious(web3Account)\n\n    // const { updateWalletLayer1,resetLayer1} = useWalletLayer1();\n    // const { updateWalletLayer2, resetLayer2} = useWalletLayer2()\n\n\n    // console.log('prevChainId:', prevChainId, ' chainId:', chainId)\n    // console.log('prevWeb3Account:', prevWeb3Account, ' web3Account:', web3Account)\n\n    // console.log(exchangeApi, userApi, account, 'prevChainId:', prevChainId, 'chainId:', chainId, 'web3Account:', web3Account)\n\n    const { tradingInfo } = useGetTradingInfo()\n\n    useCustomDCEffect(async () => {\n\n        const cleanUp = () => {\n            let handler = UserStorage.getHandler()\n            if (account.status !== AccountStatus.ACTIVATED && handler) {\n                clearInterval(handler)\n            }\n        }\n\n        async function checkStatus() {\n\n            if (!account || !lv1Acc || !exchangeApi || !userApi || !connector || !tradingInfo.exchangeInfo?.exchangeAddress) {\n                console.log('checkStatus return!!!!!!')\n                return\n            }\n\n            if (((prevChainId && chainId && prevChainId !== chainId)\n                || (prevWeb3Account && web3Account && prevWeb3Account !== web3Account))\n                && account.status !== AccountStatus.UNCONNNECTED) {\n\n                console.log('checkStatus try to resetFunc')\n                dispatch(reset(undefined))\n                sendEvent(account, StatusChangeEvent.Reset)\n                return\n            }\n\n            cleanUp()\n\n            switch (account.status) {\n                case AccountStatus.UNCONNNECTED:\n                    console.log('---> render UNCONNNECTED active:', active, ' isConnected:', isConnected)\n\n                    if (isConnected) {\n                        dispatch(setConnectNameTemp(ConnectorNames.Injected))\n                        sendEvent(account, StatusChangeEvent.Connecting)\n                    }\n\n                    //HIGH:\n                    dispatch(resetLayer1(undefined));\n                    dispatch(resetLayer2(undefined));\n                    break\n\n                case AccountStatus.CONNECTED:\n                    //check session or local storage\n\n                    console.log('---> render CONNECTED account:', account)\n\n                    try {\n\n                        const acc = (await exchangeApi.getAccount({ owner: lv1Acc })).accInfo\n\n                        // current acc is local acc info\n                        if (account.accAddr && account.eddsaKey && acc.owner === account.accAddr) {\n                            console.log('cur Eddsakey:', account.eddsaKey)\n                        } else {\n                            console.log('got a new address:', acc)\n                            // got a new address\n                            dispatch(setAccountInfo(acc))\n                            // dispatch(setEddsaKey(''))\n                            //HIGH:\n                            dispatch(updateWalletLayer1(undefined))\n                            //updateWalletLayer1();\n                           // dispatch(updateWalletLayer1(undefined));\n                        }\n\n                        if (account?.connectName !== account?.connectNameTemp) {\n                            dispatch(setConnectName(account.connectNameTemp))\n                        }\n\n                        sendEvent(account, StatusChangeEvent.HasPubkey)\n\n                    } catch (reason) {\n                        dumpError400(reason)\n\n                        if (lv1Acc) {\n                            dispatch(setAccAddr(lv1Acc))\n                        }\n\n                        if (reason.response && reason.response.data && reason.response.data.resultInfo\n                             && reason.response.data.resultInfo.code === 101002) {\n                            sendEvent(account, StatusChangeEvent.ErrorResponse)\n                        }\n                    }\n\n                    break\n\n                case AccountStatus.NOACCOUNT:\n                    break\n\n                case AccountStatus.DEPOSITING:\n                    // TODO sub contract event, check deposit.\n                    const depositFinished = true // TODO\n                    if (depositFinished) {\n                        console.log('depositFinished currStatus:', account.status)\n                        sendEvent(account, StatusChangeEvent.FinishDeposit)\n                    }\n                    break\n\n                case AccountStatus.DEPOSIT_TO_CONFIREM:\n                    // getAccount every 10s to check\n                    break\n\n                case AccountStatus.UNACTIVATED:\n                    const isSmartWallet = false // TODO\n                    if (isSmartWallet) {\n                        // TODO approve hash,\n                        console.log('approve hash, currStatus:', account.status)\n                        sendEvent(account, StatusChangeEvent.IsSmartWallet)\n                    } else {\n                        console.log('approve hash no smartwallet, account.status:', account.status)\n                    }\n                    break\n\n                case AccountStatus.ARPROVING:\n                    // TODO sub contract event, check approving.\n                    const approved = false // TODO\n                    if (approved) {\n                        console.log('sub contract event, check approving. approved! status:', account.status)\n                        sendEvent(account, StatusChangeEvent.ApproveSubmit)\n                    }\n                    break\n\n                case AccountStatus.APPROV_TO_CONFIRM:\n                    const approveConfirmed = false // TODO\n                    if (approveConfirmed) {\n                        console.log('approveConfirmed status:', account.status)\n                        sendEvent(account, StatusChangeEvent.ApproveConfirmed)\n                    }\n                    break\n\n                case AccountStatus.LOCKED:\n                    //HIGH:\n                    dispatch(resetLayer1(undefined))\n                    break\n\n                case AccountStatus.ACTIVATED:\n                    UserStorage.checkTimeout(true)\n                    const handler = setInterval(() => {\n                        const isTimeOut = UserStorage.checkTimeout()\n                        if (account.status === AccountStatus.ACTIVATED && isTimeOut) {\n                            clearInterval(handler)\n                            sendEvent(account, StatusChangeEvent.Lock)\n                        }\n                    }, 1000)\n                    UserStorage.setHandler(handler);\n                    //HIGH:\n                    dispatch(updateWalletLayer2(undefined))\n                        //useWalletLayer2().updateWalletLayer2();\n                    //dispatch((undefined));\n                    break\n\n                default:\n                    break\n            }\n\n\n\n        }\n\n        checkStatus()\n\n        return () => {\n            cleanUp()\n        }\n\n    }, [    updateWalletLayer1, updateWalletLayer2, resetLayer1,resetLayer2,\n        //updateWalletLayer2, updateWalletLayer1,resetLayer1,resetLayer2,\n\n        exchangeApi, userApi, account, prevChainId, chainId, lv1Acc, dispatch, connector, tradingInfo.exchangeInfo?.exchangeAddress,])\n\n}\n\n","export const buildMachine = <S, E>(spec: any) => (currentState: S, event: E) => {\n    // We get all possible transitions for the current State\n    const stateTransitions = spec.states[currentState]\n\n    // No transitions? Error!\n    if (stateTransitions === undefined) {\n        throw new Error(`No transitions defined for ${currentState}`)\n    }\n\n    // We try to transition to the next state\n    const nextState = stateTransitions[event]\n\n    // No next state? Error!\n    if (nextState === undefined) {\n        throw new Error(\n            `Unknown transition for event ${event} in state ${currentState}`\n        )\n    }\n\n   // console.log('got nextState:', nextState)\n\n    // We return the new state\n    return nextState\n}\n","import { createSlice, PayloadAction, Slice } from '@reduxjs/toolkit'\n\nimport { AccountInfo, ConnectorNames, } from 'loopring-sdk'\n\nimport { Lv2Account, } from 'defs/account_defs'\nimport { AccountStatus } from 'state_machine/account_machine_spec'\nimport { UserStorage } from 'storage'\n\n\nconst initialState = () => {\n  const defaultAccId = process.env.REACT_APP_TEST_ACCOUND_ID ? process.env.REACT_APP_TEST_ACCOUND_ID : UserStorage.getAccountId()\n  const defaultApiKey = process.env.REACT_APP_TEST_API_KEY ? process.env.REACT_APP_TEST_API_KEY : UserStorage.getApikey()\n  const defaultOwner = process.env.REACT_APP_TEST_OWNER ? process.env.REACT_APP_TEST_OWNER : UserStorage.getAccount()\n  const defaultEddsaKey = process.env.REACT_APP_TEST_EDDSA_KEY ? process.env.REACT_APP_TEST_EDDSA_KEY : UserStorage.getEddsakey()\n\n  console.log('defaultApiKey:', JSON.stringify(defaultApiKey))\n  const defaultStatus = AccountStatus.UNCONNNECTED\n  return {\n    accAddr: defaultOwner,\n    status: defaultStatus,\n    accountId: defaultAccId,\n    publicKey: {},\n    nonce: 0,\n    isContractAddress: false,\n    apiKey: defaultApiKey,\n    eddsaKey: defaultEddsaKey,\n    connectName: ConnectorNames.Unknown,\n    connectNameTemp: ConnectorNames.Unknown,\n  } as Lv2Account\n}\n\nconst accountSlice:Slice = createSlice({\n  name: 'account',\n  initialState: initialState(),\n  reducers: {\n    reset(state) {\n      const initState = initialState()\n      console.log('!!! reset account!', initState)\n      Object.assign(state, initState)\n    },\n    setAccAddr(state, action: PayloadAction<string>) {\n      state.accAddr = action.payload\n      // UserStorage.setAccount(action.payload)\n    },\n    setAccountInfo(state, action: PayloadAction<AccountInfo>) {\n      state.accAddr = action.payload.owner\n      state.accountId = action.payload.accountId\n      state.nonce = action.payload.nonce\n      state.publicKey = action.payload.publicKey\n\n      // UserStorage.setAccount(state.accAddr)\n      // UserStorage.setAccountId(state.accountId)\n      \n    },\n    setApikey(state, action: PayloadAction<string>) {\n      state.apiKey = action.payload\n      // UserStorage.setApikey(action.payload)\n    },\n    setAccountStatus(state, action: PayloadAction<AccountStatus>) {\n      state.status = action.payload\n    },\n    setEddsaKey(state, action: PayloadAction<any>) {\n      state.eddsaKey = action.payload\n      // UserStorage.setEddsakey(action.payload)\n    },\n    setConnectName(state, action: PayloadAction<ConnectorNames>) {\n      state.connectName = action.payload\n    },\n    setConnectNameTemp(state, action: PayloadAction<ConnectorNames>) {\n      state.connectNameTemp = action.payload\n    },\n    setIsContractAddress(state, action: PayloadAction<boolean>) {\n      state.isContractAddress = action.payload\n    },\n  },\n})\n\nexport const { reset, setAccAddr, setApikey, setConnectName, setConnectNameTemp, setAccountInfo, setAccountStatus, setEddsaKey, setIsContractAddress, } = accountSlice.actions\nexport default accountSlice\n","import { useDispatch, useSelector } from 'react-redux'\nimport { AmmMapStates } from './interface';\nimport { ammMapSlice } from './reducer';\n\nexport const useAmmMap = <R extends {[key:string]:any},I extends {[key:string]:any}>(): AmmMapStates<R,I> & {\n    updateAmmMap:()=> void,\n    statusUnset:()=> void,\n} => {\n    const ammMap:AmmMapStates<R,I>= useSelector((state: any) => state.amm.ammMap)\n    const dispatch = useDispatch();\n    const updateAmmMap = () => {\n        dispatch(ammMapSlice.actions.getAmmMap(undefined))\n    }\n    const statusUnset = ()=>{\n        dispatch(ammMapSlice.actions.statusUnset(undefined))\n    }\n    return {\n        ...ammMap,\n        statusUnset,\n        updateAmmMap\n    }\n}\n","import { useDispatch, useSelector } from 'react-redux'\nimport { tokenMapSlice } from './reducer';\nimport { TokenMapStates } from './interface';\n\nexport function useTokenMap<R extends {[key:string]:any}>(): TokenMapStates<R> & {\n    updateTokenMap:()=>void,\n    statusUnset:()=>void,\n} {\n    const tokenMap:TokenMapStates<R> = useSelector((state: any) => state.tokenMap)\n    const dispatch = useDispatch();\n    const updateTokenMap = () => {\n        dispatch(tokenMapSlice.actions.getTokenMap(undefined))\n    }\n    const statusUnset = ()=>{\n        dispatch(tokenMapSlice.actions.statusUnset(undefined))\n    }\n    return {\n        ...tokenMap,\n        statusUnset,\n        updateTokenMap,\n    }\n\n}\n","import { useAmmpoolAPI, useExchangeAPI } from 'hooks/exchange/useApi'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { useCustomDCEffect } from 'hooks/common/useCustomDCEffect'\n\nimport store, { RootState } from 'stores'\n\nimport { \n    setMarkets, \n    setExchangeInfo, \n    setTokens, \n    setTickerMap, \n    setAmmPoolStats,\n    setAmmPoolConf, \n    setMarketTrades,\n    setAmmActivityRules,\n    setChainId, \n} from 'stores/trading/reducer'\n\nimport { dumpError400, ChainId, AmmPoolStat, FiatType, } from 'loopring-sdk'\nimport { useActiveWeb3React } from 'hooks/web3/useWeb3'\nimport { useEffect } from 'react'\n\nimport { ammpoolAPI, exchangeAPI } from \"stores/apis/api\"\n\nexport function getTradingInfo() {\n    const tradingInfo = store.getState().trading\n    return {\n        tradingInfo,\n        chainId: tradingInfo.chainId,\n    }\n}\n\nexport function getAccount() {\n    return  store.getState().account\n\n}\n\nexport function getChainId(){\n    const chainId = store.getState().system.chainId;\n    return chainId\n\n}\n\nexport function useGetTradingInfo() {\n    const tradingInfo = useSelector((state: RootState) => state.trading)\n    return {\n        tradingInfo,\n        chainId: tradingInfo.chainId,\n    }\n}\n\nexport function useUpdateChainId() {\n    const { chainId } = useActiveWeb3React()\n    const dispatch = useDispatch()\n    useEffect(() => {\n        dispatch(setChainId(chainId ?? ChainId.GORLI))\n    }, [chainId, dispatch])\n}\n\nexport function useUpdateExchangeMarkets() {\n    const dispatch = useDispatch()\n    const api = useExchangeAPI()\n\n    useCustomDCEffect(async() => {\n\n        if (!api) {\n            return\n        }\n\n        try {\n            const response = await api.getMixMarkets()\n            dispatch(setMarkets(response))\n        } catch (reason) {\n            dumpError400(reason)\n        }\n\n    }, [api])\n\n}\n\nexport function useUpdateExchangeInfo() {\n\n    const dispatch = useDispatch()\n    const api = useExchangeAPI()\n\n    useCustomDCEffect(async() => {\n\n        if (!api) {\n            return\n        }\n\n        try {\n            const response = await api.getExchangeInfo()\n            dispatch(setExchangeInfo(response.exchangeInfo))\n        } catch (reason) {\n            dumpError400(reason)\n        }\n\n    }, [api])\n\n}\n\nexport function useUpdateAmmPoolConf() {\n\n    const dispatch = useDispatch()\n    const api = useAmmpoolAPI()\n\n    useCustomDCEffect(async() => {\n\n        if (!api) {\n            return\n        }\n\n        try {\n            const ammPoolConf = await api.getAmmPoolConf()\n            dispatch(setAmmPoolConf(ammPoolConf))\n        } catch (reason) {\n            dumpError400(reason)\n        }\n\n    }, [api])\n\n}\n\nexport function useUpdateAmmPoolStats() {\n\n    const dispatch = useDispatch()\n    const api = useAmmpoolAPI()\n\n    useCustomDCEffect(async() => {\n\n        if (!api) {\n            return\n        }\n\n        try {\n            const ammPoolStats = await api.getAmmPoolStats()\n            dispatch(setAmmPoolStats(ammPoolStats))\n        } catch (reason) {\n            dumpError400(reason)\n        }\n\n    }, [api])\n\n}\n\nexport function useUpdateAmmActivityRules() {\n\n    const dispatch = useDispatch()\n    const api = useAmmpoolAPI()\n\n    useCustomDCEffect(async() => {\n\n        if (!api) {\n            return\n        }\n\n        try {\n            const ammActivityRules = await api.getAmmPoolActivityRules()\n            dispatch(setAmmActivityRules(ammActivityRules.activityRules))\n        } catch (reason) {\n            dumpError400(reason)\n        }\n\n    }, [api])\n\n}\n\nexport function useUpdateTokens() {\n\n    const dispatch = useDispatch()\n    const api = useExchangeAPI()\n\n    useCustomDCEffect(async() => {\n\n        if (!api) {\n            return\n        }\n\n        try {\n            const tokens = await api.getTokens()\n            dispatch(setTokens(tokens))\n        } catch (reason) {\n            dumpError400(reason)\n        }\n\n    }, [api])\n\n}\n\nexport function useUpdateTickerMap(market: string) {\n\n    const dispatch = useDispatch()\n    const api = useExchangeAPI()\n\n    useCustomDCEffect(async() => {\n\n        if (!api) {\n            return\n        }\n\n        try {\n            const tickMap = await api.getTicker({\n                market\n              })\n            dispatch(setTickerMap(tickMap))\n        } catch (reason) {\n            dumpError400(reason)\n        }\n\n    }, [api])\n\n}\n\nexport function useMarketTrades(market: string) {\n  \n    const dispatch = useDispatch()\n    const api = useExchangeAPI()\n\n    useCustomDCEffect(async() => {\n\n        if (!api) {\n            return\n        }\n\n        try {\n            const marketTrades = await api.getMarketTrades({\n                market\n              })\n            dispatch(setMarketTrades(marketTrades))\n        } catch (reason) {\n            dumpError400(reason)\n        }\n\n    }, [api, dispatch])\n\n}\n\nexport function useUpdateFiatPrice() {\n  \n    const dispatch = useDispatch()\n    const api = useExchangeAPI()\n\n    useCustomDCEffect(async() => {\n\n        if (!api) {\n            return\n        }\n\n        try {\n            const usdFiatPrices = await api.getFiatPrice({\n                legal: FiatType.USD\n            })\n            const cnyFiatPrices = await api.getFiatPrice({\n                legal: FiatType.CNY\n            })\n            dispatch(setMarketTrades({}))\n        } catch (reason) {\n            dumpError400(reason)\n        }\n\n    }, [api, dispatch])\n\n}\n\n// export const asyncGetTradingInfo = async() => {\n//\n//     const { tradingInfo } = getTradingInfo()\n//     console.log('--- tradingInfo', tradingInfo)\n//\n//     let tokens: any = undefined\n//\n//     if (tradingInfo.tokens?.tokenIdMap) {\n//         tokens = tradingInfo.tokens\n//     } else {\n//         tokens = (await exchangeAPI().getTokens())\n//     }\n//\n//     let ammpools: any = undefined\n//\n//     if (tradingInfo.ammPoolConf?.ammpools) {\n//         ammpools = tradingInfo.ammPoolConf.ammpools\n//     } else {\n//         ammpools = (await ammpoolAPI().getAmmPoolConf()).ammpools\n//     }\n//\n//     let ammPoolStats: { [key: string] : AmmPoolStat } = {}\n//\n//     if (tradingInfo.ammPoolStats.ammPoolStats) {\n//         ammPoolStats = tradingInfo.ammPoolStats.ammPoolStats\n//     } else {\n//         ammPoolStats = (await ammpoolAPI().getAmmPoolStats()).ammPoolStats\n//     }\n//\n//     return {\n//         tokens,\n//         ammpools,\n//         ammPoolStats,\n//     }\n// }","import * as fm from 'loopring-sdk'\nimport BigNumber from 'bignumber.js'\n\nimport { CoinInfo, CoinMap, } from '@loopring-web/component-lib/static-resource'\n\nimport { utils } from 'ethers'\nimport { TokenInfo } from 'loopring-sdk'\n\nconst MULTI_FACTOR = 10000\n\nexport enum SwapStatus {\n    Normal = 'Normal',\n    EmptyInput = 'EmptyInput',\n    ExceedUserBalance = 'ExceedUserBalance',\n    ExceedPoolBalance = 'ExceedPoolBalance',\n    Loading = 'Loading',\n}\n\nexport function getIcon(symbol: string, tokens: any) {\n    const token: any = tokens[symbol]\n    return getIconByTokenInfo(token)\n}\n\nexport function getIconByTokenInfo(token: TokenInfo) {\n    if (token) {\n        const addr = utils.getAddress(token.address)\n        const path = `https://exchange.loopring.io/assets/images/ethereum/assets/${addr}/logo.png`\n        return path\n    }\n    return ''\n}\n\nexport function makeCoinInfo(token: TokenInfo) {\n    if (token) {\n        const info: CoinInfo<any> = {\n            icon: getIconByTokenInfo(token),\n            name: token.symbol,\n            simpleName: token.symbol,\n            description: token.name,\n            company: token.name,\n        }\n        return info\n    }\n    return undefined\n}\n\nexport const getLeft = (pairs: any, tokens: any) => {\n    if (pairs) {\n\n        const left = Reflect.ownKeys(pairs)\n\n        let coinMapLeft: CoinMap<any, CoinInfo<any>> = {}\n\n        left.forEach((key: any) => {\n            coinMapLeft[key] = {\n                icon: getIcon(key, tokens),\n                name: key,\n                simpleName: key,\n                description: '',\n                company: ''\n            }\n        })\n\n        return {\n            left,\n            coinMapLeft,\n        }\n    }\n\n    return undefined\n}\n\nexport const getRight = (pairs: any, left: any, tokens: any) => {\n    if (pairs) {\n        const right = pairs[left].tokenList\n\n        let coinMapRight: CoinMap<any, CoinInfo<any>> = {}\n\n        if (right) {\n            right.forEach((key: any) => {\n                coinMapRight[key] = {\n                    icon: getIcon(key, tokens),\n                    name: key,\n                    simpleName: key,\n                    description: '',\n                    company: ''\n                }\n            })\n\n            return {\n                right,\n                coinMapRight,\n            }\n        }\n    }\n    return undefined\n}\n\nexport const getToken = (tokens: any, token: any) => {\n    if (!tokens) {\n        throw Error('no tokens list!')\n    }\n    return tokens[token]\n}\n\nexport const getTokenInfoByToken = (ammBalance: any, tokens: any, token: any) => {\n\n    const tokenInfo = getToken(tokens, token)\n\n    const tokenVol = ammBalance.pooledMap[tokenInfo.tokenId].volume\n    const reserve = fm.toBig(tokenVol)\n\n    return {\n        tokenInfo, tokenVol, reserve,\n    }\n}\n\nconst getKey = (base: any, quote: any) => {\n\n    if (!base || !quote) {\n        return {\n            key: undefined,\n            key_bak: undefined,\n            isOK: false,\n        }\n    }\n\n    const isLRCETH = false\n    const key = isLRCETH ? 'LRCETH-Pool' : ('AMM-' + base + '-' + quote)\n    const key_bak = isLRCETH ? 'LRCETH-Pool' : ('AMM-' + quote + '-' + base)\n    return {\n        key,\n        key_bak,\n        isOK: true,\n    }\n}\n\nconst getInfoByKey = (raw_data: any, keyPair: any) => {\n    const {\n        key,\n        key_bak,\n    } = keyPair\n\n    if (raw_data[key]) return raw_data[key]\n    return raw_data[key_bak]\n}\n\nexport const getBalances = (ammpools: any, ammPoolsBalances: any, base: any, quote: any, tokens: any) => {\n\n    const { ammInfo,\n        ammBalance,\n    } = getAmmInfo(ammpools, ammPoolsBalances, base, quote)\n\n    const baseToken = getToken(tokens, base)\n    const quoteToken = getToken(tokens, quote)\n\n    const baseBalance = ammBalance.pooledMap[baseToken.tokenId]\n    const quoteBalance = ammBalance.pooledMap[quoteToken.tokenId]\n\n    return {\n        ammInfo,\n        ammBalance,\n        baseBalance,\n        quoteBalance,\n    }\n\n}\n\nexport const getAmmInfoOnly = (ammpools: any, base: any, quote: any) => {\n\n    const keyPair = getKey(base, quote)\n\n    const ammInfo = getInfoByKey(ammpools, keyPair)\n\n    if (!ammInfo) {\n        throw Error('no ammInfo!')\n    }\n\n    return {\n        ammInfo,\n    }\n\n}\n\nexport const getAmmInfo = (ammpools: any, ammPoolsBalances: any, base: any, quote: any) => {\n\n    const keyPair = getKey(base, quote)\n\n    const ammInfo = getInfoByKey(ammpools, keyPair)\n    const ammBalance = getInfoByKey(ammPoolsBalances, keyPair)\n\n    if (!ammInfo || !ammBalance) {\n        throw Error('no ammInfo! no ammBalance!')\n    }\n\n    const feeBips = parseInt(ammInfo.feeBips)\n\n    return {\n        ammInfo,\n        ammBalance,\n        feeBips,\n    }\n\n}\n\nconst getAmt = (rawAmt: any, tokenInfo: any) => {\n    if (rawAmt === undefined) {\n        rawAmt = 0\n    }\n\n    return fm.toBig(rawAmt).times('1e' + tokenInfo.decimals)\n}\n\nexport const applySlippageTolerance = (\n    tokens: any,\n    token: any,\n    value: any,\n    slippageTolerance: number = 0.01\n) => {\n    const tokenInfo = getToken(tokens, token)\n    const f = 1e7\n    const feeFactor = fm.toBig(f * (1 - slippageTolerance))\n    const amount = fm.toBig(value).times('1e' + tokenInfo.decimals)\n    const outInWei = amount.times(feeFactor).dividedBy(f)\n    const out = fromWEI(tokens, token, outInWei)\n\n    return {\n        outInWei,\n        out,\n    }\n}\n\nexport const applyOrderFee = (tokens: any, token: any, value: any, feeBip: any) => {\n    const tokenInfo = getToken(tokens, token)\n    const feeFactor = fm.toBig(MULTI_FACTOR - feeBip)\n    const amount = fm.toBig(value).times('1e' + tokenInfo.decimals)\n    const appliedAmount = amount.times(feeFactor).dividedBy(MULTI_FACTOR)\n    return appliedAmount\n}\n\nexport function fromWEI(tokens: any, symbol: any, valueInWEI: any, precision?: any, ceil?: any) {\n    try {\n        const tokenInfo = getToken(tokens, symbol)\n        const precisionToFixed = precision ? precision : tokenInfo.precision\n        const value = fm.toBig(valueInWEI).div('1e' + tokenInfo.decimals)\n        return fm.toFixed(value, precisionToFixed, ceil)\n    } catch (error) {\n        return 0\n    }\n}\n\n\nexport function toWEI(tokens: any, symbol: any, value: any, rm: any = 3) {\n    const tokenInfo = getToken(tokens, symbol)\n    if (typeof tokenInfo === 'undefined') {\n        return 0\n    }\n\n    return fm.toBig(value)\n        .times('1e' + tokenInfo.decimals)\n        .toFixed(0, rm)\n}\n\nexport const getAmountOut = (amt: any, ammpools: any, ammPoolsBalances: any, tokens: any,\n    base: any, quote: any, takerRate: number, currentPrice: number) => {\n\n    if (amt === undefined) {\n        amt = 0\n    }\n\n    const { ammBalance, feeBips, } = getAmmInfo(ammpools, ammPoolsBalances, base, quote)\n\n    const { tokenInfo: baseTokenInfo, reserve: reserveIn } = getTokenInfoByToken(ammBalance, tokens, base)\n    const { tokenInfo: quoteTokenInfo, reserve: reserveOut } = getTokenInfoByToken(ammBalance, tokens, quote)\n\n    const amountIn = getAmt(amt, baseTokenInfo)\n    const feeBipsFactor = fm.toBig(MULTI_FACTOR - feeBips)\n    const amountInWithFee = amountIn.times(feeBipsFactor)\n    const numerator = amountInWithFee.times(reserveOut)\n    const denominator = reserveIn.times(MULTI_FACTOR).plus(amountInWithFee)\n    const amountOutInWei: any = numerator.dividedBy(denominator)\n\n    let quoteAmt: any = fromWEI(tokens, quote, amountOutInWei)\n\n    const _amount1ApplyOrderFeeInWei = applyOrderFee(tokens, quote, quoteAmt, takerRate + feeBips)\n\n    let _amount1ApplyOrderFee = Number(fromWEI(tokens, quote, _amount1ApplyOrderFeeInWei))\n\n    let priceImpact = 0\n    if (_amount1ApplyOrderFee < 0) {\n        _amount1ApplyOrderFee = 0\n        quoteAmt = null\n    } else {\n        const newPrice = Number(quoteAmt) / Number(amt)\n        priceImpact = (newPrice - currentPrice) / currentPrice\n    }\n\n    return {\n        quoteAmt,\n        _amount1ApplyOrderFeeInWei,\n        _amount1ApplyOrderFee,\n        priceImpact,\n    }\n\n}\n\nexport const getAmountOut_Reverse = (amt: any, ammpools: any, ammPoolsBalances: any, tokens: any,\n    base: any, quote: any, takerRate: number, currentPrice: number) => {\n\n    if (amt === undefined) {\n        amt = 0\n    }\n    \n    const { ammBalance, feeBips, } = getAmmInfo(ammpools, ammPoolsBalances, base, quote)\n\n    const { tokenInfo: baseTokenInfo, reserve: reserveIn } = getTokenInfoByToken(ammBalance, tokens, base)\n    const { tokenInfo: quoteTokenInfo, reserve: reserveOut } = getTokenInfoByToken(ammBalance, tokens, quote)\n\n    const amountOut = getAmt(amt, quoteTokenInfo)\n\n    if (amountOut.gt(reserveOut)) {\n        return {\n            baseAmt: 0,\n            _amount1ApplyOrderFeeInWei: 0,\n            _amount1ApplyOrderFee: 0,\n            priceImpact: 0,\n            hasError: false,\n        }\n    }\n\n    const numerator = amountOut.times(reserveIn).times(MULTI_FACTOR)\n    const feeBipsFactor = fm.toBig(MULTI_FACTOR - feeBips)\n\n    // If amountOut is larger than reserveOut?\n    // It's handled before getAmountOut_reserve\n    const reserveOutSubAmountOut = reserveOut.minus(amountOut)\n\n    const denominator = feeBipsFactor.times(reserveOutSubAmountOut)\n    const amountInInWei = numerator.dividedBy(denominator)\n\n    let baseAmt: any = fromWEI(tokens, quote, amountInInWei)\n\n    const _amount1ApplyOrderFeeInWei = applyOrderFee(tokens, quote, amt, takerRate + feeBips)\n\n    let _amount1ApplyOrderFee = Number(fromWEI(tokens, quote, _amount1ApplyOrderFeeInWei))\n\n    let priceImpact = 0\n    if (_amount1ApplyOrderFee < 0) {\n        _amount1ApplyOrderFee = 0\n        baseAmt = null\n    } else {\n        const newPrice = Number(amt) / Number(baseAmt)\n        priceImpact = (newPrice - currentPrice) / currentPrice\n    }\n\n    // console.log('got:', ammBalance)\n\n    return {\n        baseAmt,\n        _amount1ApplyOrderFeeInWei,\n        _amount1ApplyOrderFee,\n        priceImpact,\n        hasError: false,\n    }\n\n}\n\n/*\nexport const getAmountIn = (amt: any, ammpools: any, ammPoolsBalances: any, tokens: any, base: any, quote: any) => {\n\n    const { ammBalance, feeBips, } = getAmmInfo(ammpools, ammPoolsBalances, base, quote)\n\n    const { tokenInfo: baseTokenInfo, reserve: reserveIn } = getTokenInfoByToken(ammBalance, tokens, base)\n    const { tokenInfo: quoteTokenInfo, reserve: reserveOut } = getTokenInfoByToken(ammBalance, tokens, quote)\n\n    const amountOut = getAmt(amt, quoteTokenInfo)\n    const numerator = reserveIn.times(amountOut).times(MULTI_FACTOR)\n    const denominator = reserveOut.minus(amountOut).times(MULTI_FACTOR - feeBips)\n    const amountIn = numerator.dividedBy(denominator).plus(1)\n\n    // const baseAmt = amountIn.dividedBy('1e' + baseTokenInfo.decimals).toString()\n    const baseAmt = fromWEI(tokens, base, amountIn)\n\n    let amountInShown: any = ''\n    if (baseAmt !== 'NaN') {\n        amountInShown = baseAmt\n    }\n\n    return {\n        amountIn,\n        amountInShown,\n    }\n}\n*/\n","import { useMemo, useState, useEffect } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\n\nimport { Web3Provider } from '@ethersproject/providers'\nimport { Web3ReactContextInterface } from '@web3-react/core/dist/types'\n\nimport { useWeb3React } from '@web3-react/core'\n\nimport { injected } from 'networks/web3_connectors'\n\nimport { ChainId, NetworkContextName } from 'loopring-sdk'\n\n/*\nimport EXCHANGE_ABI from 'config/abis/exchange_3_6.json'\nimport ERC20_ABI from 'config/abis/erc20.json'\nimport DEPOSIT_ABI from 'config/abis/deposit.json'\n\nimport Web3 from 'web3'\n*/\n\nexport function useActiveWeb3React(): Web3ReactContextInterface<Web3Provider> & { chainId?: ChainId } {\n  const context = useWeb3React<Web3Provider>()\n  const contextNetwork = useWeb3React<Web3Provider>(NetworkContextName)\n  return context.active ? context : contextNetwork\n}\n\nexport function useEtherscan() {\n  const { chainId } = useActiveWeb3React()\n\n  const [etherscanUrl, setEtherscanUrl] = useState<string>('')\n\n  useEffect(() => {\n    switch(chainId) {\n      case ChainId.MAINNET:\n        setEtherscanUrl('https://etherscan.io/address/')\n        break\n      default:\n        setEtherscanUrl('https://goerli.etherscan.io/address/')\n    }\n  }, [chainId])\n\n  return {\n    etherscanUrl,\n  }\n}\n\nexport function useEagerConnect() {\n\n  const { activate, active } = useWeb3React()\n\n  const [tried, setTried] = useState(false)\n\n  useEffect(() => {\n    injected.isAuthorized().then((isAuthorized: boolean) => {\n      if (isAuthorized) {\n        console.log('useEagerConnect isAuthorized')\n        activate(injected, undefined, true).catch(() => {\n          setTried(true)\n        })\n      } else {\n        console.log('useEagerConnect NOT isAuthorized')\n        setTried(true)\n      }\n    })\n  }, []) // intentionally only running on mount (make sure it's only mounted once :))\n\n  // if the connection worked, wait until we get confirmation of that to flip the flag\n  useEffect(() => {\n    if (!tried && active) {\n      setTried(true)\n    }\n  }, [tried, active])\n\n  return tried\n}\n\nexport function useInactiveListener(onReConnectInjected: any = undefined, suppress: boolean = false) {\n  const { active, error, activate, chainId, } = useWeb3React()\n  const dispatch = useDispatch()\n\n  useEffect((): any => {\n    const { ethereum } = window as any\n\n    const reConnectInjected = () => {\n      console.log('--------------------------> reConnectInjected')\n      activate(injected)\n      if (onReConnectInjected) {\n        onReConnectInjected()\n      }\n    }\n\n    if (ethereum && ethereum.on && !active && !error) {\n\n      const handleChainChanged = (chainId: string | number) => {\n        console.log('Handling \\'chainChanged\\' event with payload', chainId)\n        reConnectInjected()\n      }\n      const handleAccountsChanged = (accounts: string[]) => {\n        console.log('---------------------------------------------')\n        console.log('Handling \\'accountsChanged\\' event with payload', accounts)\n        console.log('before reset accounts.length=', accounts.length)\n        if (accounts.length > 0) {\n          console.log('before reset!!!!!!!!!!!!!!!!1')\n          reConnectInjected()\n        }\n      }\n\n      ethereum.on('chainChanged', handleChainChanged)\n      ethereum.on('accountsChanged', handleAccountsChanged)\n\n      return () => {\n        if (ethereum.removeListener) {\n          ethereum.removeListener('chainChanged', handleChainChanged)\n          ethereum.removeListener('accountsChanged', handleAccountsChanged)\n        }\n      }\n    }\n  }, [active, error, chainId, activate, dispatch])\n}\n\nexport function useBlockNumber() {\n  const { library, chainId } = useActiveWeb3React()\n\n  const [blockNumber, setBlockNumber] = useState<number>()\n\n  useEffect((): any => {\n      if (!!library) {\n          let stale = false\n\n          library\n              .getBlockNumber()\n              .then((blockNumber: number) => {\n                  if (!stale) {\n                      setBlockNumber(blockNumber)\n                  }\n              })\n              .catch(() => {\n                  if (!stale) {\n                      setBlockNumber(-1)\n                  }\n              })\n\n          const updateBlockNumber = (blockNumber: number) => {\n              setBlockNumber(blockNumber)\n          }\n          library.on('block', updateBlockNumber)\n\n          return () => {\n              stale = true\n              library.removeListener('block', updateBlockNumber)\n              setBlockNumber(undefined)\n          }\n      }\n  }, [library, chainId])\n\n  return {\n      blockNumber,\n  }\n}\n\nexport function useBalance() {\n  const { account, library, chainId } = useActiveWeb3React()\n\n  const [balance, setBalance] = useState<number>()\n  useEffect((): any => {\n      if (!!account && !!library) {\n          let stale = false\n\n          library\n              .getBalance(account)\n              .then((balance: any) => {\n                  if (!stale) {\n                      setBalance(balance)\n                  }\n              })\n              .catch(() => {\n                  if (!stale) {\n                      setBalance(0)\n                  }\n              })\n\n          return () => {\n              stale = true\n              setBalance(0)\n          }\n      }\n  }, [account, library, chainId]) // ensures refresh if referential identity of library doesn't change across chainIds\n\n  return {\n      balance,\n  }\n}\n","import { InjectedConnector } from '@web3-react/injected-connector'\nimport { NetworkConnector } from '@web3-react/network-connector'\nimport { WalletConnectConnector } from '@web3-react/walletconnect-connector'\nimport { WalletLinkConnector } from '@web3-react/walletlink-connector'\nimport { LedgerConnector } from '@web3-react/ledger-connector'\nimport { TrezorConnector } from '@web3-react/trezor-connector'\nimport { AuthereumConnector } from '@web3-react/authereum-connector'\n\nconst POLLING_INTERVAL = 12000\n\nconst RPC_URLS: { [chainId: number]: string } = {\n  1: process.env.REACT_APP_RPC_URL_1 as string,\n  5: process.env.REACT_APP_RPC_URL_5 as string\n}\n\nconsole.log('RPC_URLS 1:', RPC_URLS[1])\nconsole.log('RPC_URLS 5:', RPC_URLS[5])\n\nexport const injected = new InjectedConnector({ supportedChainIds: [1, 5,] })\n\nexport const network = new NetworkConnector({\n  urls: { \n    1: RPC_URLS[1], \n    5: RPC_URLS[5] \n  },\n  defaultChainId: 1\n})\n\nexport const walletconnect = new WalletConnectConnector({\n  rpc: { 1: RPC_URLS[1] },\n  bridge: 'https://bridge.walletconnect.org',\n  qrcode: true,\n  pollingInterval: POLLING_INTERVAL\n})\n\nexport const walletlink = new WalletLinkConnector({\n  url: RPC_URLS[1],\n  appName: 'Loopring DEX'\n})\n\nexport const ledger = new LedgerConnector({ chainId: 1, url: RPC_URLS[1], pollingInterval: POLLING_INTERVAL })\n\nexport const trezor = new TrezorConnector({\n  chainId: 1,\n  url: RPC_URLS[1],\n  pollingInterval: POLLING_INTERVAL,\n  manifestEmail: 'dummy@abc.xyz',\n  manifestAppUrl: 'http://localhost:1234'\n})\n\nexport const authereum = new AuthereumConnector({ chainId: 42 })\n","import { useDispatch, useSelector } from 'react-redux'\nimport { walletLayer2Slice } from './reducer';\nimport { WalletLayer2States } from './interface';\n\nexport function useWalletLayer2(): WalletLayer2States & {\n    updateWalletLayer2:()=> void,\n    statusUnset:()=> void,\n    resetLayer2:()=>void,\n} {\n    const walletLayer2:WalletLayer2States = useSelector((state: any) => state.walletLayer2)\n    const dispatch = useDispatch();\n    const updateWalletLayer2 = () => {\n        dispatch(walletLayer2Slice.actions.getWalletLayer2(undefined))\n    }\n    const statusUnset = ()=>{\n        dispatch(walletLayer2Slice.actions.statusUnset(undefined))\n    }\n    const resetLayer2 = ()=>{\n        dispatch(walletLayer2Slice.actions.reset(undefined))\n    }\n    return {\n        ...walletLayer2,\n        resetLayer2,\n        statusUnset,\n        updateWalletLayer2\n    }\n\n}\n","import { createSlice, PayloadAction, Slice } from '@reduxjs/toolkit'\nimport { AmmMapStates } from './interface';\nimport { STATUS } from '../../constant';\nimport { AmmPoolStat, AmmPoolInfoV3, LoopringMap } from 'loopring-sdk';\n\nexport  type GetAmmMapParams = { ammpools: LoopringMap<AmmPoolInfoV3> }\n\n\nconst initialState: Required<AmmMapStates<object, object>> = {\n    ammMap: undefined,\n    __timer__: -1,\n    status: 'UNSET',\n    errorMessage: null,\n}\nconst ammMapSlice: Slice = createSlice({\n    name: 'ammMap',\n    initialState,\n    reducers: {\n        getAmmMap(state, action: PayloadAction<GetAmmMapParams>) {\n            state.status = STATUS.PENDING\n        },\n        getAmmMapStatus(state, action: PayloadAction<AmmMapStates<any, any>>) {\n            // @ts-ignore\n            if (action.error) {\n                state.status = STATUS.ERROR\n                // @ts-ignore\n                state.errorMessage = action.error\n            }\n            const {ammMap, __timer__} = action.payload\n            if (ammMap) {state.ammMap = ammMap;}\n            if (__timer__) {state.__timer__ = __timer__;}\n            state.status = STATUS.DONE\n        },\n        updateRealTimeAmmMap(state, action: PayloadAction<undefined>) {\n            state.status = STATUS.PENDING\n\n\n        },\n        statusUnset: state => {\n            state.status = STATUS.UNSET\n        }\n    },\n});\nexport { ammMapSlice };\nexport const {getAmmMap, getAmmMapStatus, statusUnset, updateRealTimeAmmMap} = ammMapSlice.actions\n","import { Provider } from 'react-redux'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nimport { createWeb3ReactRoot, Web3ReactProvider } from '@web3-react/core'\nimport store from 'stores'\n\nimport { getLibrary } from 'utils/web3_tools'\nimport { NetworkContextName } from 'loopring-sdk'\n\nimport { getTheme, i18n, provider, ProviderComposer } from \"@loopring-web/component-lib/static-resource\"\nimport { ThemeProvider as MuThemeProvider } from '@material-ui/core'\nimport LocalizationProvider from '@material-ui/pickers/LocalizationProvider'\n\nimport MomentUtils from '@material-ui/lab/AdapterMoment'\n\nimport { ThemeProvider } from \"@emotion/react\"\n\nimport { I18nextProvider } from \"react-i18next\"\n\n\n\nconst Web3ProviderNetwork = createWeb3ReactRoot(NetworkContextName)\nconst providers = [\n    provider(LocalizationProvider as any, {dateAdapter: MomentUtils}),\n    provider(I18nextProvider as any, {i18n:i18n}),\n    provider(MuThemeProvider as any, {theme: getTheme('dark')}),\n    provider(ThemeProvider as any, {theme: getTheme('dark')}),\n    provider(Provider as any, {store}),\n]\n\nReactDOM.render(\n// @ts-ignore\n    <ProviderComposer providers={providers}>\n        <Web3ReactProvider getLibrary={getLibrary}>\n            <Web3ProviderNetwork getLibrary={getLibrary}>\n                <App/>\n            </Web3ProviderNetwork>\n        </Web3ReactProvider>\n    </ProviderComposer>,\n    document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\nif (process.env.NODE_ENV !== 'production') {\n    reportWebVitals(console.log)\n}\n","import { createSlice, PayloadAction, Slice } from '@reduxjs/toolkit'\n\nimport { TradingInterval, ChainId, ExchangeInfo, TokenInfo, TickerData, getBaseQuote } from 'loopring-sdk'\n\nexport interface TradingInfo {\n  chainId: number\n  symbol: string\n  symbol_base: string | undefined\n  symbol_quote: string | undefined\n  interval: TradingInterval\n  ammPoolStats: any\n  ammPoolConf: any\n  ammActivityRules: any\n  markets: any\n  marketTrades: any\n  tickerMap: {[key: string]: TickerData}\n  tokens: {[key: string]: [value: TokenInfo]}\n  exchangeInfo?: ExchangeInfo\n}\n\nconst defaultSymbol = process.env.REACT_APP_TEST_SYMBOL ? process.env.REACT_APP_TEST_SYMBOL : 'LRC-ETH'\nconst defaultInterval = process.env.REACT_APP_TEST_INTERVAL ? process.env.REACT_APP_TEST_INTERVAL : TradingInterval.hr1\n\nconst { base, quote } = getBaseQuote(defaultSymbol)\n\nconst initialState = {\n  chainId: ChainId.GORLI,\n  symbol: defaultSymbol,\n  symbol_base: base,\n  symbol_quote: quote,\n  interval: defaultInterval,\n  ammPoolConf: {},\n  ammActivityRules: {},\n  ammPoolStats: {},\n  markets: [],\n  marketTrades: {},\n  tokens: {},\n  tickerMap: {},\n  refreshRate: 1000,\n  refreshRateSlow: 3000,\n} as TradingInfo\n\nconst tradingSlice:Slice = createSlice({\n  name: 'trading',\n  initialState,\n  reducers: {\n    setChainId(state, action: PayloadAction<number>) {\n      state.chainId = action.payload\n    },\n    changeSymbol(state, action: PayloadAction<any>) {\n      state.symbol = action.payload\n      const { base, quote } = getBaseQuote(state.symbol)\n      state.symbol_base = base\n      state.symbol_quote = quote\n    },\n    changeTradingInterval(state, action: PayloadAction<any>) {\n      state.interval = action.payload\n    },\n    setTickerMap(state, action: PayloadAction<any>) {\n      state.tickerMap = action.payload\n    },\n    setAmmPoolStats(state, action: PayloadAction<any>) {\n      state.ammPoolStats = action.payload\n    },\n    setAmmActivityRules(state, action: PayloadAction<any>) {\n      state.ammActivityRules = action.payload\n    },\n    setAmmPoolConf(state, action: PayloadAction<any>) {\n      state.ammPoolConf = action.payload\n    },\n    setMarketTrades(state, action: PayloadAction<any>) {\n      state.marketTrades = action.payload\n    },\n    setMarkets(state, action: PayloadAction<any>) {\n      state.markets = action.payload\n    },\n    setTokens(state, action: PayloadAction<{}>) {\n      state.tokens = action.payload\n    },\n    setExchangeInfo(state, action: PayloadAction<ExchangeInfo>) {\n      state.exchangeInfo = action.payload\n    },\n  },\n})\n\nexport const {\n  setChainId, \n  setAmmPoolStats,\n  setAmmActivityRules,\n  setMarketTrades, \n  setTickerMap, \n  setAmmPoolConf, \n  changeSymbol, \n  changeTradingInterval, \n  setMarkets, \n  setTokens, \n  setExchangeInfo, \n} = tradingSlice.actions\n\nexport default tradingSlice\n","export enum CONSTANTS {\n    Handler = 'handler',\n    AccountId = 'account_id',\n    Account = 'account',\n    Apikey = 'apikey',\n    Eddsakey = 'eddsakey',\n    ActiveTime = 'active_time',\n    AmmOrder = 'amm_order',\n    HardwareAddresses = 'hardware_addresses',\n}\n\nconst SESSION_TIMEOUT_SECONDS = 600\n\nexport class UserStorage {\n\n    public static getHandler() {\n        const rawHandler = sessionStorage.getItem(CONSTANTS.Handler)\n        try {\n            if (rawHandler !== undefined && rawHandler !== null)\n                return parseInt(rawHandler)\n        } catch (err) {\n        }\n        return undefined\n    }\n\n    public static setHandler(handler: any) {\n        sessionStorage.setItem(CONSTANTS.Handler, handler)\n    }\n\n    public static clearHandler() {\n        sessionStorage.removeItem(CONSTANTS.Handler)\n    }\n\n    public static checkTimeout(reset: boolean = false) : boolean {\n        let dateTimeStr = localStorage.getItem(CONSTANTS.ActiveTime)\n        let now = new Date().getTime()\n\n        if (dateTimeStr !== null && !reset) {\n            let tmpDt = new Date(parseInt(dateTimeStr))\n\n            // console.log(`now:${now} dateTimeStr:${dateTimeStr} delta:${now - tmpDt.getTime()}`)\n\n            if(now - tmpDt.getTime() > SESSION_TIMEOUT_SECONDS * 1000) {\n                console.log(`TIMEOUT! now:${now} dateTimeStr:${dateTimeStr} delta:${now - tmpDt.getTime()}`)\n                sessionStorage.clear()\n                localStorage.setItem(CONSTANTS.ActiveTime, now.toString())\n                return true\n            }\n        } else {\n\n            if (reset) {\n                console.log('force reset!!')\n            }\n\n            localStorage.setItem(CONSTANTS.ActiveTime, now.toString())\n        }\n\n        return false\n    }\n\n\n    public static getAccountId() {\n        const rawId = sessionStorage.getItem(CONSTANTS.AccountId)\n        try {\n            if (rawId)\n                return parseInt(rawId)\n        } catch (err) {\n        }\n        return undefined\n    }\n\n    public static setAccountId(accountId: number) {\n        sessionStorage.setItem(CONSTANTS.AccountId, accountId.toString())\n    }\n\n    public static getAccount() {\n        return sessionStorage.getItem(CONSTANTS.Account)\n    }\n\n    public static setAccount(account: string) {\n        sessionStorage.setItem(CONSTANTS.Account, account)\n    }\n\n    public static getApikey() {\n        return sessionStorage.getItem(CONSTANTS.Apikey)\n    }\n\n    public static setApikey(apikey: string) {\n        sessionStorage.setItem(CONSTANTS.Apikey, apikey)\n    }\n\n    public static getEddsakey() {\n        return sessionStorage.getItem(CONSTANTS.Eddsakey)\n    }\n\n    public static setEddsakey(eddsakey: string) {\n        sessionStorage.setItem(CONSTANTS.Eddsakey, eddsakey)\n    }\n\n    public static getAmmOrder(): string {\n        var orderHash = localStorage.getItem(CONSTANTS.AmmOrder)\n        return orderHash ? orderHash : ''\n    }\n\n    public static setAmmOrder(orderHash: string) {\n        localStorage.setItem(CONSTANTS.AmmOrder, orderHash)\n    }\n\n    public static clearAmmOrder() {\n        localStorage.removeItem(CONSTANTS.AmmOrder)\n    }\n\n    public static isHardwareAddress(address: string) {\n        let current = localStorage.getItem(CONSTANTS.HardwareAddresses)\n        if (current) {\n            if (current.includes(address.toLowerCase())) {\n                return true\n            }\n        }\n        return false\n    }\n\n    public static saveHardwareAddress(address: string) {\n        let current = localStorage.getItem(CONSTANTS.HardwareAddresses);\n        if (current) {\n            if (current.includes(address.toLowerCase()) !== true) {\n                let newValue = current + ',' + address.toLowerCase();\n                localStorage.setItem(CONSTANTS.HardwareAddresses, newValue);\n            }\n        } else {\n            localStorage.setItem(CONSTANTS.HardwareAddresses, address.toLowerCase());\n        }\n\n    }\n}\n","import { createSlice, PayloadAction, Slice } from '@reduxjs/toolkit'\nimport {  TickerStates } from './interface';\nimport { STATUS } from '../constant';\nimport { CoinKey } from '@loopring-web/component-lib/src/static-resource';\n\nconst initialState:Required<TickerStates>  = {\n    tickerMap:{},\n    status:'UNSET',\n    errorMessage:null,\n}\nconst tickerMapSlice:Slice = createSlice({\n    name: 'tickerMap',\n    initialState,\n    reducers: {\n        getTicker(state, action:PayloadAction<CoinKey<any>>) {\n            state.status = STATUS.PENDING\n        },\n        getTickers(state, action:PayloadAction<Array<CoinKey<any>>>) {\n            state.status = STATUS.PENDING\n        },\n        getTickerStatus(state, action: PayloadAction<TickerStates>) {\n            // @ts-ignore\n            if (action.error) {\n                state.status =  STATUS.ERROR\n                // @ts-ignore\n                state.errorMessage = action.error\n            }\n            state.tickerMap = {...state.tickerMap,...action.payload.tickerMap};\n            state.status = STATUS.DONE\n        },\n        statusUnset: state => {\n            state.status = STATUS.UNSET\n        }\n\n    },\n});\nexport { tickerMapSlice };\nexport const { getTicker,getTickers, getTickerStatus, statusUnset } = tickerMapSlice.actions;","import { createSlice, PayloadAction, Slice } from '@reduxjs/toolkit'\nimport { ENV, System, SystemStatus } from './interface';\nimport { STATUS } from '../constant';\n\nconst initialState: SystemStatus = {\n    env: ENV.PROD,\n    chainId: 'unknown',\n    // network:'NONETWORK',\n    baseURL: '',\n    faitPrices: undefined,\n    gasPrice: undefined,\n    forex: undefined,\n    __timer__: -1,\n    status: 'UNSET',\n    errorMessage: null,\n\n    topics: [],\n}\nconst systemSlice: Slice<SystemStatus> = createSlice({\n    name: 'system',\n    initialState,\n    reducers: {\n\n        updateSystem(state, action: PayloadAction<System>) {\n            state.chainId = action.payload.chainId\n            state.status = STATUS.PENDING\n        },\n        updateRealTimeObj(state, action: PayloadAction<Partial<{ faitPrices: any, gasPrice: number, forex: number }>>) {\n            const {forex, faitPrices, gasPrice} = action.payload;\n            if (forex) {\n                state.forex = forex\n            }\n            if (faitPrices) {\n                state.faitPrices = faitPrices\n            }\n            if (gasPrice) {\n                state.gasPrice = gasPrice\n            }\n\n\n            // state = {\n            //     ...state.system,\n            //     forex: forex?,\n            //     faitPrices: action.payload.faitPrices ? action.payload.faitPrices : state.system.faitPrices,\n            //     gasPrice: action.payload.gasPrice ? action.payload.gasPrice : state.system.gasPrice,\n            // };\n\n        },\n        getSystemStatus(state, action: PayloadAction<Partial<SystemStatus>>) {\n\n            // @ts-ignore\n            if (action.error) {\n                state.status = STATUS.ERROR\n                // @ts-ignore\n                state.errorMessage = action.error\n            }\n            const {env, baseURL, faitPrices, gasPrice, forex, __timer__} = action.payload;\n            if (env) {\n                state.env = env\n            }\n            if (baseURL) {\n                state.baseURL = baseURL\n            }\n            if (faitPrices) {\n                state.faitPrices = faitPrices\n            }\n            if (gasPrice) {\n                state.gasPrice = gasPrice\n            }\n            if (forex) {\n                state.forex = forex\n            }\n            if (__timer__) {\n                state.__timer__ = __timer__\n            }\n            state.status = STATUS.DONE\n        },\n        statusUnset: state => {\n            state.status = STATUS.UNSET\n        }\n\n    },\n});\nexport { systemSlice };\nexport const {updateSystem, setTopics, getSystemStatus, statusUnset, updateRealTimeObj} = systemSlice.actions;","import { createSlice, PayloadAction, Slice } from '@reduxjs/toolkit'\nimport { WalletLayer1Map, WalletLayer1States } from './interface';\nimport { STATUS } from '../constant';\n\n\nconst initialState:WalletLayer1States  = {\n    walletLayer1:undefined,\n    status:'UNSET',\n    errorMessage:null,\n}\nconst walletLayer1Slice:Slice = createSlice({\n    name: 'walletLayer1S',\n    initialState,\n    reducers: {\n        updateWalletLayer1(state, action:PayloadAction<string | undefined>) {\n            state.status = STATUS.PENDING\n        },\n        reset(state, action:PayloadAction<string | undefined>) {\n            state.walletLayer1 = undefined;\n            state.status = STATUS.UNSET;\n        },\n        getWalletLayer1Status(state, action: PayloadAction<{ walletLayer1:WalletLayer1Map<object> }>) {\n            // @ts-ignore\n            if (action.error) {\n                state.status =  STATUS.ERROR\n                // @ts-ignore\n                state.errorMessage = action.error\n            }\n            state.walletLayer1 = {...action.payload.walletLayer1};\n            state.status = STATUS.DONE\n        },\n        statusUnset: state => {\n            state.status = STATUS.UNSET\n        }\n    },\n});\nexport { walletLayer1Slice };\nexport const { updateWalletLayer1, getWalletLayer1Status,statusUnset,reset } = walletLayer1Slice.actions\n","import { createSlice, PayloadAction, Slice } from '@reduxjs/toolkit'\nimport { WalletLayer2Map, WalletLayer2States } from './interface';\nimport { STATUS } from '../constant';\n\n\nconst initialState:WalletLayer2States  = {\n    walletLayer2:undefined,\n    status:'UNSET',\n    errorMessage:null,\n}\nconst walletLayer2Slice:Slice = createSlice({\n    name: 'walletLayer2S',\n    initialState,\n    reducers: {\n        updateWalletLayer2(state, action:PayloadAction<string | undefined>) {\n            state.status = STATUS.PENDING\n        },\n        reset(state, action:PayloadAction<string | undefined>) {\n            state.walletLayer2 = undefined;\n            state.status = STATUS.UNSET;\n        },\n        getWalletLayer2Status(state, action: PayloadAction<{ walletLayer2:WalletLayer2Map<object> }>) {\n            // @ts-ignore\n            if (action.error) {\n                state.status =  STATUS.ERROR\n                // @ts-ignore\n                state.errorMessage = action.error\n            }\n            state.walletLayer2 = {...action.payload.walletLayer2};\n            state.status = STATUS.DONE\n        },\n        statusUnset: state => {\n            state.status = STATUS.UNSET\n        }\n    },\n});\nexport { walletLayer2Slice };\nexport const {  updateWalletLayer2,getWalletLayer2Status,statusUnset,reset } = walletLayer2Slice.actions\n","import { createSlice, PayloadAction, Slice } from '@reduxjs/toolkit'\nimport { AmmActivityMapStates } from './interface';\nimport { STATUS } from '../../constant';\n\n\nconst initialState:Required<AmmActivityMapStates>  = {\n    ammActivityMap:{},\n    status:'UNSET',\n    errorMessage:null,\n}\nconst ammActivityMapSlice:Slice = createSlice({\n    name: 'ammActivityMap',\n    initialState,\n    reducers: {\n        getAmmActivityMap(state, action:PayloadAction<string | undefined>) {\n            state.status = STATUS.PENDING\n        },\n        getAmmActivityMapStatus(state, action: PayloadAction<AmmActivityMapStates>) {\n            // @ts-ignore\n            if (action.error) {\n                state.status =  STATUS.ERROR\n                // @ts-ignore\n                state.errorMessage = action.error\n            }\n            state.ammActivityMap = {...action.payload.ammActivityMap};\n            state.status = STATUS.DONE\n        },\n        statusUnset: state => {\n            state.status = STATUS.UNSET\n        }\n\n    },\n});\nexport { ammActivityMapSlice };\nexport const { getAmmActivityMap, getAmmActivityMapStatus, statusUnset } = ammActivityMapSlice.actions\n","import { createSlice, PayloadAction, Slice } from '@reduxjs/toolkit'\nimport { GetTokenMapParams, TokenMapStates } from './interface';\nimport { STATUS } from '../constant';\n\nconst initialState: TokenMapStates<object> = {\n    coinMap: {},\n    addressIndex: undefined,\n    tokenMap: undefined,\n    idIndex: undefined,\n    status: 'UNSET',\n    errorMessage: null,\n}\nconst tokenMapSlice: Slice<TokenMapStates<object>> = createSlice({\n    name: 'tokenMap',\n    initialState,\n    reducers: {\n        getTokenMap(state, action: PayloadAction<GetTokenMapParams<any>>) {\n            state.status = STATUS.PENDING\n        },\n        getTokenMapStatus(state, action: PayloadAction<TokenMapStates<object>>) {\n            // @ts-ignore      console.log(action.type)\n            if (action.error) {\n                state.status = STATUS.ERROR\n                // @ts-ignore\n                state.errorMessage = action.error\n            }\n\n            const {tokenMap, addressIndex, idIndex, coinMap, marketArray, marketCoins} = action.payload;\n            if (tokenMap) { state.tokenMap = tokenMap }\n            if (addressIndex) { state.addressIndex = addressIndex }\n            if (idIndex) { state.idIndex = idIndex }\n            if (coinMap) { state.coinMap = coinMap }\n            if (marketArray) { state.marketArray = marketArray }\n            if (marketCoins)  { state.marketCoins = marketCoins }\n            // if (tokenPairsMap) {state.tokenPairsMap = tokenPairsMap }\n            state.status = STATUS.DONE;\n        },\n        // getTokenPairMap(state, action: PayloadAction<{tokenPairs: TokenPairs }>) {\n        //     const {tokenPairs} = action.payload;\n        //     const tokenPairsMap =  Reflect.ownKeys(tokenPairs).reduce((prev,key)=>{\n        //         // @ts-ignore\n        //         return prev[key as string] =  tokenPairs[key as string].tokenList\n        //     }, {} )\n        //     if (tokenPairsMap) {state.tokenPairsMap = tokenPairsMap }\n        //     // state.status = STATUS.PENDING\n        // },\n        statusUnset: state => {\n            state.status = STATUS.UNSET\n        }\n\n    },\n});\nexport { tokenMapSlice };\nexport const {getTokenMap, getTokenMapStatus,getTokenPairMap, statusUnset} = tokenMapSlice.actions;","import { StateBase } from '../interface';\nimport { ChainId } from 'loopring-sdk';\n\nexport enum ENV {\n    DEV='DEV',\n    UAT='UAT',\n    PROD='PROD',\n}\nexport enum NETWORKEXTEND {\n    NONETWORK = 'unknown'\n}\nexport type NETWORK = NETWORKEXTEND | ChainId\n\n\nexport type System = {\n    env:keyof typeof ENV,\n    chainId: 1|5|'unknown'\n    // network: keyof typeof NETWORK,\n    baseURL: string,\n    faitPrices:any | undefined,\n    gasPrice:number | undefined,\n    forex:number | undefined,\n\n\n}\n\nexport type SystemStatus = System & {\n    // system:System | {}\n    __timer__:NodeJS.Timeout | -1\n    topics: any[]\n}  & StateBase\n\n\n\n","import { useDispatch, useSelector } from 'react-redux'\nimport { tickerMapSlice } from './reducer';\nimport { TickerStates } from './interface';\nimport { CoinKey } from '@loopring-web/component-lib/src/static-resource';\n\nexport function useTicker(): TickerStates & {\n    updateTickers:(tickerKeys:Array<CoinKey<any>>)=>void,\n    updateTicker:(tickerKey:CoinKey<any>)=>void,\n    statusUnset:()=>void,\n} {\n    const tickerMap:TickerStates = useSelector((state: any) => state.tickerMap)\n    const dispatch = useDispatch();\n    const updateTicker = (tickerKey:CoinKey<any>) => {\n        dispatch(tickerMapSlice.actions.getTicker({tickerKey}))\n    }\n    const updateTickers = (tickerKeys:Array<CoinKey<any>>) => {\n        dispatch(tickerMapSlice.actions.getTickers({tickerKeys}))\n    }\n    const statusUnset = ()=>{\n        dispatch(tickerMapSlice.actions.statusUnset(undefined))\n    }\n    return {\n        ...tickerMap,\n        statusUnset,\n        updateTickers,\n        updateTicker,\n    }\n\n}\n","import { useDispatch, useSelector } from 'react-redux'\nimport { AmmActivityMapStates } from './interface';\nimport { ammActivityMapSlice } from './reducer';\n\nexport function useAmmActivityMap(): AmmActivityMapStates & {\n    updateAmmActivityMap:()=> void,\n    statusUnset:()=> void,\n} {\n    const ammActivityMap:AmmActivityMapStates = useSelector((state: any) => state.amm.ammActivityMap)\n    const dispatch = useDispatch();\n    const updateAmmActivityMap = () => {\n        dispatch(ammActivityMapSlice.actions.getAmmActivityMap(undefined))\n    }\n    const statusUnset = ()=>{\n        dispatch(ammActivityMapSlice.actions.statusUnset(undefined))\n    }\n    return {\n        ...ammActivityMap,\n        statusUnset,\n        updateAmmActivityMap\n    }\n\n}\n","export enum AccountStatus {\n    UNKNOWN = 'UNKNOWN',\n    UNCONNNECTED = 'UNCONNNECTED',\n    CONNECTED = 'CONNECTED',\n    NOACCOUNT = 'NOACCOUNT',\n    DEPOSITING = 'DEPOSITING',\n    DEPOSIT_TO_CONFIREM = 'DEPOSIT_TO_CONFIREM',\n    UNACTIVATED = 'UNACTIVATED',\n    ARPROVING = 'ARPROVING',\n    APPROV_TO_CONFIRM = 'APPROV_TO_CONFIRM',\n    LOCKED = 'LOCKED',\n    ACTIVATED = 'ACTIVATED',\n}\n\nexport enum StatusChangeEvent {\n    Reset = 'Reset',\n    Connecting = 'Connecting',\n    HasPubkey = 'HasPubkey',\n    HasNoPubkey = 'HasNoPubkey',\n    ErrorResponse = 'ErrorResponse',\n    FinishDeposit = 'FinishDeposit',\n    DepositConfirmed = 'DepositConfirmed',\n    IsSmartWallet = 'IsSmartWallet',\n    ApproveSubmit = 'ApproveSubmit',\n    ApproveConfirmed = 'ApproveConfirmed',\n    Unlock = 'Unlock',\n    Lock = 'Lock',\n}\n\nexport const AccountMachineSpec = (initialState: AccountStatus = AccountStatus.UNCONNNECTED) => \n{\n    return {\n        initialState: initialState,\n        states: {\n            UNCONNNECTED: {\n                Connecting: AccountStatus.CONNECTED,\n                Reset: AccountStatus.UNCONNNECTED,\n            },\n            CONNECTED: {\n                HasPubkey: AccountStatus.LOCKED,\n                HasNoPubkey: AccountStatus.UNACTIVATED,\n                ErrorResponse: AccountStatus.NOACCOUNT,\n                Reset: AccountStatus.UNCONNNECTED,\n            },\n            NOACCOUNT: {\n                ErrorResponse: AccountStatus.NOACCOUNT,\n                Reset: AccountStatus.UNCONNNECTED,\n            },\n            DEPOSITING: {\n                FinishDeposit: AccountStatus.DEPOSIT_TO_CONFIREM,\n                Reset: AccountStatus.UNCONNNECTED,\n            },\n            DEPOSIT_TO_CONFIREM: {\n                HasPubkey: AccountStatus.ACTIVATED,\n                HasNoPubkey: AccountStatus.DEPOSIT_TO_CONFIREM,\n                ErrorResponse: AccountStatus.DEPOSIT_TO_CONFIREM,\n                Reset: AccountStatus.UNCONNNECTED,\n            },\n            UNACTIVATED: {\n                IsSmartWallet: AccountStatus.ARPROVING,\n                Reset: AccountStatus.UNCONNNECTED,\n            },\n            ARPROVING: {\n                ApproveSubmit: AccountStatus.APPROV_TO_CONFIRM,\n                Reset: AccountStatus.UNCONNNECTED,\n            },\n            APPROV_TO_CONFIRM: {\n                ApproveConfirmed: AccountStatus.ACTIVATED,\n                Reset: AccountStatus.UNCONNNECTED,\n            },\n            LOCKED: {\n                Unlock: AccountStatus.ACTIVATED,\n                Reset: AccountStatus.UNCONNNECTED,\n            },\n            ACTIVATED: {\n                Lock: AccountStatus.LOCKED,\n                Reset: AccountStatus.UNCONNNECTED,\n            },\n        },\n    }\n}\n","import { Contract } from '@ethersproject/contracts'\nimport { getAddress } from '@ethersproject/address'\nimport { AddressZero } from '@ethersproject/constants'\nimport { BigNumber } from '@ethersproject/bignumber'\n\nimport { JsonRpcSigner, Web3Provider } from '@ethersproject/providers'\n\nimport { UnsupportedChainIdError } from '@web3-react/core'\n\nimport {\n  NoEthereumProviderError,\n  UserRejectedRequestError as UserRejectedRequestErrorInjected\n} from '@web3-react/injected-connector'\nimport { UserRejectedRequestError as UserRejectedRequestErrorWalletConnect } from '@web3-react/walletconnect-connector'\n\nimport { ChainId } from 'loopring-sdk'\n\nexport function getLibrary(provider: any): Web3Provider {\n  const library = new Web3Provider(provider)\n  library.pollingInterval = 10000\n  return library\n}\n\nexport function getErrorMessage(error: Error) {\n  if (error instanceof NoEthereumProviderError) {\n    return 'No Ethereum browser extension detected, install MetaMask on desktop or visit from a dApp browser on mobile.'\n  } else if (error instanceof UnsupportedChainIdError) {\n    return 'You\\'re connected to an unsupported network.'\n  } else if (\n    error instanceof UserRejectedRequestErrorInjected ||\n    error instanceof UserRejectedRequestErrorWalletConnect\n  ) {\n    return 'Please authorize this website to access your Ethereum account.'\n  } else {\n    console.error(error)\n    return 'An unknown error occurred. Check the console for more details.'\n  }\n}\n\nexport function transactionChecker(web3: any, address: string) {\n  const account = address.toLowerCase()\n\n  const subscription = web3.eth.subscribe('pendingTransactions', (err: any, res: any) => {\n    if (err) {\n      console.error(err)\n    }\n  })\n\n  return function watchTransactions() {\n    console.log('Watch Transactions...')\n    subscription.on('data', (txHash: any) => {\n      setTimeout(async () => {\n        try {\n          let tx = await web3.eth.getTransaction(txHash)\n          if (tx.to && tx.to.toLowerCase() === account) {\n            const value = web3.utils.fromWei(tx.value, 'ether')\n            if (value > 0) {\n              console.log('watchTransactions value:', value)\n            }\n          }\n        } catch (err) {\n          console.error(err)\n        }\n      }, 60 * 1000)\n    })\n  }\n}\n\n// returns the checksummed address if the address is valid, otherwise returns false\nexport function isAddress(value: any): string | false {\n  try {\n    return getAddress(value)\n  } catch {\n    return false\n  }\n}\n\nconst ETHERSCAN_PREFIXES: { [chainId in ChainId]: string } = {\n  1: '',\n  5: 'goerli.',\n}\n\nexport function getEtherscanLink(\n  chainId: ChainId,\n  data: string,\n  type: 'transaction' | 'token' | 'address' | 'block'\n): string {\n  const prefix = `https://${ETHERSCAN_PREFIXES[chainId] || ETHERSCAN_PREFIXES[1]}etherscan.io`\n\n  switch (type) {\n    case 'transaction': {\n      return `${prefix}/tx/${data}`\n    }\n    case 'token': {\n      return `${prefix}/token/${data}`\n    }\n    case 'block': {\n      return `${prefix}/block/${data}`\n    }\n    case 'address':\n    default: {\n      return `${prefix}/address/${data}`\n    }\n  }\n}\n\n// shorten the checksummed version of the input address to have 0x + 4 characters at start and end\nexport function shortenAddress(address: string, chars = 4): string {\n  const parsed = isAddress(address)\n  if (!parsed) {\n    throw Error(`Invalid 'address' parameter '${address}'.`)\n  }\n  return `${parsed.substring(0, chars + 2)}...${parsed.substring(42 - chars)}`\n}\n\n// add 10%\nexport function calculateGasMargin(value: BigNumber): BigNumber {\n  return value.mul(BigNumber.from(10000).add(BigNumber.from(1000))).div(BigNumber.from(10000))\n}\n\n// account is not optional\nexport function getSigner(library: Web3Provider, account: string): JsonRpcSigner {\n  return library.getSigner(account).connectUnchecked()\n}\n\n// account is optional\nexport function getProviderOrSigner(library: Web3Provider, account?: string): Web3Provider | JsonRpcSigner {\n  return account ? getSigner(library, account) : library\n}\n\n// account is optional\nexport function getContract(address: string, ABI: any, library: Web3Provider, account?: string): Contract {\n  if (!isAddress(address) || address === AddressZero) {\n    throw Error(`Invalid 'address' parameter '${address}'.`)\n  }\n\n  return new Contract(address, ABI, getProviderOrSigner(library, account) as any)\n}\n\nexport function escapeRegExp(string: string): string {\n  return string.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&') // $& means the whole matched string\n}\n\nexport async function isContract(web3: any, address: string) {\n  const code = await web3.eth.getCode(address)\n  return code && code.length > 2\n}\n\nexport function getShortAddr(address: string) {\n    if (!address || address === undefined || address === null || address.trim() === '') {\n        console.log('getShortAddr got empty!')\n        return undefined\n    }\n    const convertAddr = address.substr(0, 6) + '...' + address.substr(address.length - 4)\n    return convertAddr\n}\n","import { debounce } from 'lodash'\nimport React, { useEffect } from 'react'\nimport { UserStorage } from 'storage'\n\nimport { useCheckAccStatus, } from 'stores/account/hook'\n\nimport { \n  useUpdateChainId,\n  useUpdateExchangeInfo, \n  useUpdateExchangeMarkets, \n  useUpdateTokens, \n  useUpdateAmmPoolConf,\n  useUpdateAmmActivityRules,\n  useUpdateAmmPoolStats,\n} from 'stores/trading/hook'\n\nenum WindowEvent {\n  Click = 'click',\n  Scroll = 'scroll',\n  Mouseover = 'mouseover',\n}\n\nconst events = [WindowEvent.Click, WindowEvent.Scroll]\n\nconst forceReset = debounce(() => { UserStorage.checkTimeout(true) }, 100)\n\nexport const GlobalProvider = ({ children }: { children: React.ReactNode }) => {\n\n  useUpdateExchangeInfo()\n  useUpdateExchangeMarkets()\n  useUpdateTokens()\n  useUpdateAmmPoolConf()\n  useUpdateAmmActivityRules()\n  useUpdateAmmPoolStats()\n  useUpdateChainId()\n\n  useCheckAccStatus()\n\n  useEffect(() => {\n\n    events.forEach((event: string) => {\n      document.addEventListener(event, forceReset)\n    })\n\n    return () => {\n\n      events.forEach((event: string) => {\n        document.removeEventListener(event, forceReset)\n      })\n    }\n\n  }, [])\n\n  return (\n    <React.Fragment>\n      { children}\n    </React.Fragment>\n  )\n\n}\n","import React, { useState, useEffect } from 'react'\nimport styled from '@emotion/styled/macro'\nimport { useTranslation } from 'react-i18next'\n\nimport { useWeb3React } from '@web3-react/core'\n\nimport { network } from 'networks/web3_connectors'\n\nimport { useEagerConnect, useInactiveListener } from 'hooks/web3/useWeb3'\nimport { reset, setAccountStatus } from 'stores/account/reducer'\n\nimport { ChainId, NetworkContextName } from 'loopring-sdk'\n\n// import Loader from 'components/modals/Loader'\nimport { useDispatch } from 'react-redux'\nimport { AccountStatus } from 'state_machine/account_machine_spec'\n\nconst MessageWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  height: 20rem;\n`\n\nconst Message = styled.h2`\n  color: ${({ theme }) => theme.colorBase.error};\n`\n\nexport function Web3ReactManager({ children }: { children: JSX.Element }) {\n  const { t } = useTranslation()\n  const { active } = useWeb3React()\n  const { active: networkActive, error: networkError, activate: activateNetwork } = useWeb3React(NetworkContextName)\n\n  // try to eagerly connect to an injected provider, if it exists and has granted access already\n  const triedEager = useEagerConnect()\n\n  // after eagerly trying injected, if the network connect ever isn't active or in an error state, activate itd\n  useEffect(() => {\n    if (triedEager && !networkActive && !networkError && !active) {\n      activateNetwork(network)\n    }\n  }, [triedEager, networkActive, networkError, activateNetwork, active])\n\n  // when there's no account connected, react to logins (broadly speaking) on the injected provider, if it exists\n  \n  const dispatch = useDispatch()\n\n  const onReConnectInjected = () => {\n    console.log('onReConnectInjected')\n    dispatch(reset(undefined))\n    dispatch(setAccountStatus(AccountStatus.UNCONNNECTED))\n  }\n  \n  useInactiveListener(onReConnectInjected, !triedEager)\n\n  // handle delayed loader state\n  const [showLoader, setShowLoader] = useState(false)\n  useEffect(() => {\n    const timeout = setTimeout(() => {\n      setShowLoader(true)\n    }, 600)\n\n    return () => {\n      clearTimeout(timeout)\n    }\n  }, [])\n\n  // on page load, do nothing until we've tried to connect to the injected connector\n  if (!triedEager) {\n    return null\n  }\n\n  // if the account context isn't active, and there's an error on the network context, it's an irrecoverable error\n  if (!active && networkError) {\n    return (\n      <MessageWrapper>\n        <Message>{t('unknownError')}</Message>\n      </MessageWrapper>\n    )\n  }\n\n  // if neither context is active, spin\n  if (!active && !networkActive) {\n    return showLoader ? (\n      <MessageWrapper>\n        {/*<Loader />*/}\n      </MessageWrapper>\n    ) : null\n  }\n\n  return children\n}\n","import React from 'react'\n\nexport const DevWrapper = ({ children }: { children: React.ReactNode }) => {\n\n  return (\n    <React.Fragment>\n      {\n        process.env.NODE_ENV !== 'production' ? (\n          <>\n          {children}\n          </>\n        ) : null\n      }\n    </React.Fragment>\n  )\n\n}\n\n","export enum STATUS {\n    UNSET='UNSET',\n    PENDING='PENDING',\n    ERROR='ERROR',   // success failed timeout is Done\n    DONE='DONE',   // success failed timeout is Done\n}\n","import { useDispatch, useSelector } from 'react-redux'\nimport { systemSlice } from './reducer';\nimport { System, SystemStatus } from './interface';\n\nexport function useSystem(): SystemStatus & {\n    updateSystem:(system:Partial<System>)=>void,\n    statusUnset:()=>void,\n} {\n    const system:SystemStatus = useSelector((state: any) => state.system)\n    const dispatch = useDispatch();\n    const updateSystem = (system:Partial<System>) => {\n        dispatch(systemSlice.actions.updateSystem(system))\n    }\n    const statusUnset = ()=>{\n        dispatch(systemSlice.actions.statusUnset(undefined))\n    }\n    return {\n        ...system,\n        statusUnset,\n        updateSystem,\n    }\n\n}\n","import { useTranslation } from 'react-i18next';\nimport { Box, Container, Typography } from '@material-ui/core';\nimport styled from '@emotion/styled';\nimport { ErrorObject } from '@loopring-web/component-lib/src/static-resource';\n\nconst StyleBox = styled(Box)`\n  background-image: url('./static/images/error_bg.png');\n  background-repeat: no-repeat;\n  background-size: contain;\n  background-position: bottom;\n  white-space: pre-wrap;\n  //h2{\n  //  position: relative;\n  //}\n` as typeof Box\n\nexport const ErrorPage= ({messageKey}:ErrorObject) => {\n    // const {messageKey}: { id?:string,messageKey:string } = {messageKey: 'errorMessageTokenMapIsEmpty'};\n    //TODO: checkRouter\n    const {t} = useTranslation('error');\n    const message =  `labelConnectUs`;\n    return <>\n        <Container >\n            {/*style={{height: '100%' }}*/}\n            <StyleBox  flex={1} display={'flex'} alignItems={'flex-start'} justifyContent={'center'}\n                  flexDirection={'column'} marginTop={4} height={680} maxWidth={1200}>\n                {/*<StyleBox>*/}\n                <Box textAlign={'center'} position={'relative'} left={128} top={-64}>\n                    <Typography component={'h2'} variant={'h2'} >\n                        {t(messageKey)}\n                    </Typography>\n                    <Typography marginY={2} component={'p'} variant={'body1'} color={'textSecondary'} >\n\n                        {t(message)}\n                        {/*{t(messageKey)}*/}\n                    </Typography>\n                </Box>\n                {/*</StyleBox>*/}\n            </StyleBox>\n        </Container>\n\n        {/*<Footer></Footer>*/}\n    </>\n}\n","import { WsAPI, ExchangeAPI, AmmpoolAPI, UserAPI, DEFAULT_TIMEOUT, } from 'loopring-sdk'\nimport store, { RootState } from 'stores'\nimport { useSelector } from 'react-redux'\n\nimport { useMemo } from 'react'\n\nfunction useApi(ApiClass: any, timeout = DEFAULT_TIMEOUT) {\n    // const chainId = store.getState().trading.chainId\n    // return new ApiClass(chainId, timeout)\n\n  const { chainId, } = useSelector((state: RootState) => state.trading)\n\n  const genApi = () => {\n      if (!chainId) {\n          return undefined\n      }\n\n      return new ApiClass(chainId, timeout)\n  }\n\n  const api = useMemo(genApi, [ApiClass, chainId, timeout])\n\n  return api\n}\n\nexport function useWsAPI() {\n    return useApi(WsAPI) as WsAPI\n}\n\nexport function useExchangeAPI() {\n    return useApi(ExchangeAPI) as ExchangeAPI\n}\n\nexport function useAmmpoolAPI() {\n    return useApi(AmmpoolAPI) as AmmpoolAPI\n}\n\nexport function useUserAPI() {\n    return useApi(UserAPI) as UserAPI\n}\n","import { useDeepCompareEffect } from \"react-use\"\n\nexport function useCustomDCEffect(action: any, deps: any[] | undefined | null) {\n    useDeepCompareEffect(action, [deps || {}])\n}\n","import React  from 'react';\nimport detectEthereumProvider from '@metamask/detect-provider';\nimport { useCustomDCEffect } from 'hooks/common/useCustomDCEffect';\nimport { useSystem, NETWORK, NETWORKEXTEND } from './stores/system';\nimport { ChainId } from 'loopring-sdk';\nimport { useAmmMap } from './stores/Amm/AmmMap';\nimport { STATUS } from './stores/constant';\nimport { useTokenMap } from './stores/token';\n\n/**\n * @description call it when bootstrap the page or change the network\n */\nexport function useInit(){\n    const [state,setState] = React.useState<keyof typeof STATUS>('PENDING')\n    const systemState = useSystem();\n    const tokenState = useTokenMap();\n    const ammMapState = useAmmMap();\n\n    useCustomDCEffect(async() => {\n\n        const handleChainChanged = (chainId: any) => {\n    \n            // const network = chainId == ChainId.GORLI ? NETWORK.Goerli : NETWORK.MAIN\n             console.log('handleChainChanged chainId: ', chainId)\n             systemState.updateSystem({ chainId })\n             window.location.reload();\n        }\n\n        const provider: any = await detectEthereumProvider()\n        if (provider) {\n            const chainId = Number(await provider.request({ method: 'eth_chainId' }))\n    \n            provider.on('chainChanged', ()=>{handleChainChanged(chainId)} )\n            // @ts-ignore\n            systemState.updateSystem({ chainId  })\n           //handleChainChanged(chainId)\n            \n        } else {\n            systemState.updateSystem({chainId:ChainId.MAINNET})\n            console.log('web3 is not found')\n        }\n\n    }, [])\n\n    React.useEffect(() => {\n        switch (systemState.status) {\n            case \"ERROR\":\n                systemState.statusUnset();\n                setState('ERROR')\n                //TODO show error at button page show error  some retry dispat again\n                break;\n            case \"DONE\":\n                systemState.statusUnset();\n                //TODO do some static information update\n                //tokenState.updateTokenMap();\n                break;\n            default:\n                break;\n\n        }\n    },[\n        systemState.status,\n        systemState.statusUnset,\n        //tokenState.updateTokenMap\n    ]);\n    React.useEffect(() => {\n        if(ammMapState.status ===\"ERROR\" || tokenState.status === \"ERROR\"){\n            //TODO: solve error\n            ammMapState.statusUnset();\n            tokenState.statusUnset();\n            setState('ERROR');\n        }else if(ammMapState.status ===\"DONE\" && tokenState.status === \"DONE\"){\n            ammMapState.statusUnset();\n            tokenState.statusUnset()\n            setState('DONE');\n        }\n    },[ammMapState.status,tokenState.status,tokenState.statusUnset,ammMapState.statusUnset])\n\n    //\n    // React.useEffect(() => {\n    //     switch (tokenState.status) {\n    //         case \"ERROR\":\n    //             tokenState.statusUnset();\n    //             //TODO show error at button page show error  some retry dispat again\n    //             break;\n    //         case \"DONE\":\n    //             tokenState.statusUnset();\n    //             ammMapState.updateAmmMap()\n    //             break;\n    //         default:\n    //             break;\n    //\n    //     }\n    // },[tokenState.status,\n    //        tokenState.statusUnset,\n    //     ammMapState.updateAmmMap]);\n    //\n    // React.useEffect(() => {\n    //     switch (ammMapState.status) {\n    //         case \"ERROR\":\n    //             ammMapState.statusUnset();\n    //             //TODO show error at button page show error  some retry dispat again\n    //             break;\n    //         case \"DONE\":\n    //             ammMapState.statusUnset();\n    //             break;\n    //         default:\n    //             break;\n    //\n    //     }\n    // },[ammMapState.status,\n    //     ammMapState.statusUnset]);\n    return {\n        state,\n    }\n\n}\n","export enum Theme {\n    dark = 'dark',\n    light = 'light',\n}\n\nexport enum LangType {\n    en = 'en_US',\n    cn = 'zh_CN',\n}\n\nexport enum SystemStatus {\n    NORMAL,\n    ERROR,\n    UNKNOWN,\n}\n\nexport enum MODAL_TYPE {\n    UNKNOWN,\n    LOADING,\n    WALLET,\n}\n\nexport const REFRESH_RATE = 1000\n\nexport const REFRESH_RATE_SLOW = 15000\n","import { useCallback } from \"react\";\nimport { useDispatch } from \"react-redux\"\n\nimport {\n    setShowDeposit,\n    setShowResetAccount,\n    setShowTransfer,\n    setShowWithdraw,\n} from '@loopring-web/component-lib'\nimport { useTranslation } from \"react-i18next\";\nimport store from 'stores'\nimport { AccountStatus } from \"state_machine/account_machine_spec\";\n\nexport function useModals() {\n\n    const dispatch = useDispatch()\n\n    const { t } = useTranslation('common')\n\n    const ShowDeposit = useCallback((isShow: boolean)=>{\n        const isNoAccount = store.getState().account.status === AccountStatus.NOACCOUNT\n\n        console.log('isNoAccount: ', isNoAccount, t('depositTitleAndActive'))\n        const action = {\n            isShow,\n            props: {\n                title: isNoAccount ? t('depositTitleAndActive') : t('depositTitle'),\n                description: 'depositAndActiveDescription'\n            }\n        }\n        dispatch(setShowDeposit(action))\n    }, [dispatch, t])\n    const ShowTransfer = useCallback((isShow: boolean)=>dispatch(setShowTransfer({isShow})), [dispatch])\n    const ShowWithdraw = useCallback((isShow: boolean)=>dispatch(setShowWithdraw({isShow})), [dispatch])\n    const ShowResetAccount = useCallback((isShow: boolean)=>dispatch(setShowResetAccount({isShow})), [dispatch])\n\n    return {\n        ShowDeposit,\n        ShowTransfer,\n        ShowWithdraw,\n        ShowResetAccount,\n    }\n}","import { REFRESH_RATE } from \"defs/common_defs\"\n\nexport function PromiseJob(fetchPromise: any, setFunc: any, field?: string, prefix: any = 'PromiseJob') {\n\n    let mounted = true\n\n    const handler = () => {\n        if (fetchPromise()) {\n            fetchPromise().then((data: any) => {\n                if (mounted) {\n                    setFunc(field ? data[field] : data)\n                } else {\n                    console.log(prefix + ' unmounted!')\n                }\n            }).catch((reason: any) => {\n                console.error(reason)\n            })\n        }\n    }\n\n    const cleanUp = () => {\n        mounted = false\n    }\n\n    return {\n        handler,\n        cleanUp,\n    }\n\n}\n\n\nexport function PromiseJobInTimer(fetchPromise: any, setFunc: any, field?: string, prefix: any = 'PromiseJobInTimer', timeout: number = REFRESH_RATE) {\n\n    let mounted = true\n\n    const handler = () => {\n\n        mounted = true\n\n        const fetchFunc = () => {\n            if (fetchPromise()) {\n                fetchPromise().then((data: any) => {\n                    if (mounted) {\n                        setFunc(field ? data[field] : data)\n                    } else {\n                        console.log(prefix + ' unmounted!')\n                    }\n                }).catch((reason: any) => {\n                    console.error(reason)\n                })\n            }\n        }\n\n        fetchFunc()\n\n        const id = setInterval(fetchFunc, timeout)\n\n        return id\n    }\n\n    const cleanUp = (handler: any) => {\n        mounted = false\n        if (handler) clearInterval(handler)\n    }\n\n    return {\n        handler,\n        cleanUp,\n    }\n\n}\n","import { useEffect } from 'react'\nimport { PromiseJob, PromiseJobInTimer } from '../../utils/hook_tools'\nimport { REFRESH_RATE_SLOW } from \"defs/common_defs\"\n\nexport function usePromiseJob(fetchPromise: any, setFunc: any, field? :string, prefix: any = undefined, dependencies: any[] = []) {\n\n  const {\n    handler,\n    cleanUp,\n  } = PromiseJob(fetchPromise, setFunc, field, prefix)\n\n  useEffect(() => {\n    handler()\n    return () => cleanUp()\n  }, [...dependencies])\n\n}\n\nexport function usePromiseJobInTimer(fetchPromise: any, setFunc: any, field? :string, \n  prefix: any = undefined, dependencies: any[] = [], timeout: number= REFRESH_RATE_SLOW) {\n\n  const {\n    handler,\n    cleanUp,\n  } = PromiseJobInTimer(fetchPromise, setFunc, field, prefix, timeout)\n\n  useEffect(() => {\n    const id = handler()\n    return () => cleanUp(id)\n  }, [...dependencies])\n\n}\n","import { useState, } from 'react'\n\nimport { TradesData, TickerData, DepthData, \n  TokensResponse,\n  MarketsResponse, } from 'loopring-sdk'\n\nimport { usePromiseJob } from 'hooks/common/useCommon'\nimport { useExchangeAPI, } from './useApi'\n\nexport function useGetGas() {\n\n  const [gas, setGas] = useState<any>()\n\n  const api = useExchangeAPI()\n\n  const fetchData = () => {\n    if (!api) {\n      return undefined\n    }\n    return api.getGasPrice()\n  }\n\n  usePromiseJob(fetchData, setGas, undefined, 'useGetGas', [api])\n\n  return { gas }\n\n}\n\nexport function useGetMixMarkets() {\n\n  const [markets, setMarkets] = useState<MarketsResponse>()\n    const api = useExchangeAPI()\n\n    const fetchData = () => {\n      if (!api) {\n        return undefined\n      }\n      return api.getMixMarkets()\n    }\n  \n    usePromiseJob(fetchData, setMarkets, undefined, 'useGetMarkets', [api])\n    \n    return { markets }\n\n}\n\nexport function useGetMarkets() {\n\n  const [markets, setMarkets] = useState<MarketsResponse>()\n    const api = useExchangeAPI()\n\n    const fetchData = () => {\n      if (!api) {\n        return undefined\n      }\n      return api.getMarkets()\n    }\n  \n    usePromiseJob(fetchData, setMarkets, undefined, 'useGetMarkets', [api])\n    \n    return { markets }\n\n}\n\nexport function useGetExchangeInfo() {\n\n  const [exchangeInfo, setExchangeInfo] = useState<any>()\n    const api = useExchangeAPI()\n\n    const fetchData = () => {\n      if (!api) {\n        return undefined\n      }\n      return api.getExchangeInfo()\n    }\n  \n    usePromiseJob(fetchData, setExchangeInfo, 'exchangeInfo', 'useGetExchangeInfo', [api])\n    \n    return { exchangeInfo }\n\n}\n\nexport function useGetTokens() {\n\n  const [tokens, setTokens] = useState<TokensResponse>()\n    const api = useExchangeAPI()\n\n    const fetchData = () => {\n      if (!api) {\n        return undefined\n      }\n      return api.getTokens()\n    }\n  \n    usePromiseJob(fetchData, setTokens, undefined, 'useGetTokens', [api])\n    \n    return { tokens }\n\n}\n\n\nexport function useTrades(symbol: string) {\n\n  const [trades, setTrades] = useState<TradesData>()\n\n  const api = useExchangeAPI()\n\n  const fetchData = () => {\n    if (!api) {\n      return undefined\n    }\n    return api.getMarketTrades({\n      market: symbol\n    })\n  }\n\n  usePromiseJob(fetchData, setTrades, undefined, 'useTrades', [api, symbol])\n\n  return { trades, }\n\n}\n\nexport function useTickerMap(market: string) {\n\n  const [tickerMap, setTickerMap] = useState<{[key: string]: TickerData}>()\n\n  const api = useExchangeAPI()\n\n  const fetchData = () => {\n    if (!api) {\n      return undefined\n    }\n    return api.getTicker({\n      market\n    })\n  }\n\n  usePromiseJob(fetchData, setTickerMap, 'tickMap', 'useTickerMap', [api, market])\n\n  return { tickerMap, }\n\n}\n\nexport function useDepth(symbol: string) {\n\n  const api = useExchangeAPI()\n\n  const [depth, setDepth] = useState<DepthData>()\n\n    const fetchData = () => {\n      if (!api) {\n        return undefined\n      }\n      return api.getDepth({\n        market: [symbol]\n      })\n    }\n  \n    usePromiseJob(fetchData, setDepth, 'depth', 'useDepth', [api, symbol])\n\n  return { depth, }\n\n}\n","import { useState, useCallback } from 'react'\n\nimport { useAccount } from 'stores/account/hook'\n\nimport { OrdersData, dumpError400, } from 'loopring-sdk'\n\nimport { REFRESH_RATE } from 'defs/common_defs'\n\nimport { useUserAPI } from './useApi'\n\nimport { getToken, fromWEI } from 'utils/swap_calc_utils'\n\nimport * as fm from 'loopring-sdk'\n\nimport { useCustomDCEffect } from 'hooks/common/useCustomDCEffect'\n\nexport function useOrders() {\n\n  const acc = useAccount().account\n\n  const api = useUserAPI()\n\n  const [orders, setOrders] = useState<OrdersData>()\n\n  useCustomDCEffect(() => {\n\n    if (!acc || !api) {\n      return\n    }\n\n    let mounted = true\n\n    const exit = (id: any) => {\n      mounted = false\n      clearInterval(id)\n    }\n\n    if (acc && acc.accountId > 0) {\n\n      const id: any = setInterval(async () => {\n        try {\n          const { raw_data } = (await api.getOrders({\n            accountId: acc.accountId\n          }, acc.apiKey))\n          if (mounted) {\n            setOrders(raw_data)\n          }\n        } catch (err) {\n          return exit(id)\n        }\n      }, REFRESH_RATE)\n\n      return exit(id)\n\n    }\n  }, [acc, api])\n\n  return {\n    orders,\n  }\n\n}\n\nexport function useGetUserBalancesByToken(token: any) {\n\n  const api = useUserAPI()\n\n  //const [balance, setBalance] = useState<any>({total: '0', locked: '0', availableInWei: '0'})\n\n  const [balance, setBalance] = useState<any>('0')\n\n  const { apiKey, accountId } = useAccount()\n\n  // console.log('enter! useGetUserBalances tokens:', tokens, 'symbol:', symbol, 'apiKey:', apiKey, ' accountId:', accountId )\n\n  useCustomDCEffect(() => {\n    if (!api || !apiKey || !accountId || !token) {\n      return\n    }\n\n    api.getUserBalances({\n      accountId,\n      tokens: token.tokenId\n    }, apiKey).then((data) => {\n      const total = fm.toBig(data.userBalances[token.tokenId].total)\n      const locked = fm.toBig(data.userBalances[token.tokenId].locked)\n      const availableInWei = total.minus(locked)\n      /*\n      setBalance({\n        total: data[0].total, \n        locked: data[0].locked, \n        availableInWei: availableInWei.toString(),\n        available: fromWEI(tokens, symbol, availableInWei)\n      })\n      */\n      setBalance(availableInWei.toString())\n    }).catch((reason: any) => {\n      dumpError400(reason, 'getUserBalances tokenId:' + token.tokenId)\n    })\n\n  }, [api, apiKey, accountId, token,])\n\n  return {\n    balance,\n    setBalance,\n  }\n\n}\n\nexport function useGetUserBalances(tokens: any, toList: boolean = false) {\n\n  const api = useUserAPI()\n\n  //const [balance, setBalance] = useState<any>({total: '0', locked: '0', availableInWei: '0'})\n\n  const [balances, setBalances] = useState<any>(undefined)\n\n  const { apiKey, accountId } = useAccount()\n\n  // console.log('enter! useGetUserBalances tokens:', tokens, 'symbol:', symbol, 'apiKey:', apiKey, ' accountId:', accountId )\n\n  useCustomDCEffect(() => {\n\n    if (!api || !apiKey || !accountId || !tokens) {\n      return\n    }\n\n    let tokenList: any[] = []\n\n    const keys = Reflect.ownKeys(tokens)\n\n    let tokenMap: any = {}\n\n    keys.forEach((item: any) => {\n      const token = tokens[item]\n      tokenList.push(token.tokenId)\n      tokenMap[token.tokenId] = token\n    })\n\n    api.getUserBalances({\n      accountId,\n      tokens: tokenList.join(',')\n    }, apiKey).then((data) => {\n\n      let balances: any = {\n        map: tokenMap,\n        tokenId: {},\n        symbol: {},\n      }\n\n      data.raw_data.forEach((item: any) => {\n        const total = fm.toBig(item.total)\n        const locked = fm.toBig(item.locked)\n        const availableInWei = total.minus(locked)\n\n        console.log('item:', item)\n\n        const token = tokenMap[item.tokenId]\n\n        balances.tokenId[item.tokenId] = availableInWei.toString()\n        balances.symbol[token.symbol] = availableInWei.toString()\n      })\n\n      setBalances(balances)\n\n    }).catch((reason: any) => {\n      dumpError400(reason, 'getUserBalances tokenId:' + tokens.tokenId)\n    })\n\n  }, [api, apiKey, accountId, tokens,])\n\n  return {\n    balances,\n    setBalances,\n  }\n\n}\n\nexport function useGetUserBalance(tokens: any, symbol: any) {\n\n  const api = useUserAPI()\n\n  //const [balance, setBalance] = useState<any>({total: '0', locked: '0', availableInWei: '0'})\n\n  const [balance, setBalance] = useState<any>('0')\n\n  const { apiKey, accountId } = useAccount()\n\n  useCustomDCEffect(() => {\n    if (!api || !apiKey || !accountId || !tokens || !symbol) {\n      return\n    }\n\n    const tokenInfo = getToken(tokens, symbol)\n\n    api.getUserBalances({\n      accountId,\n      tokens: tokenInfo.tokenId\n    }, apiKey).then((data) => {\n      const total = fm.toBig(data.userBalances[tokenInfo.tokenId].total)\n      const locked = fm.toBig(data.userBalances[tokenInfo.tokenId].locked)\n      const availableInWei = total.minus(locked)\n      \n      setBalance(availableInWei.toString())\n\n    }).catch((reason: any) => {\n      dumpError400(reason, 'getUserBalances tokenId:' + tokens.tokenId)\n    })\n\n  }, [api, apiKey, accountId, tokens, symbol,])\n\n  return {\n    balance,\n    setBalance,\n  }\n\n}","import React, { useCallback } from 'react'\n\nimport { useTranslation, WithTranslation, withTranslation } from 'react-i18next'\n\nimport {\n    gatewayList as DefaultGatewayList,\n    headerMenuData, HeaderMenuTabStatus,\n    headerToolBarData, HeadMenuTabKey,\n    ButtonComponentsMap, LanguageKeys,\n    WalletStatus, HideIcon,\n    GatewayItem, ViewIcon, ThemeKeys, LockIcon, UnLockIcon,\n} from '@loopring-web/component-lib/src/static-resource'\n\nimport { useAccount, useUnlock, useConnect, } from 'stores/account/hook'\n\nimport { getShortAddr } from 'utils/web3_tools'\n\nimport { AccountStatus } from 'state_machine/account_machine_spec'\n\nimport { useCustomDCEffect } from 'hooks/common/useCustomDCEffect'\n\nimport { Theme, } from 'defs/common_defs'\n\nimport { Button, SwapProps, useOpenModals, useSettings } from '@loopring-web/component-lib'\n\nimport store from 'stores'\n\nimport { ConnectorNames } from 'loopring-sdk'\nimport { IconButton, Typography } from '@material-ui/core';\nimport { AccountInfoProps } from '@loopring-web/component-lib/components/block';\nimport { useEtherscan } from 'hooks/web3/useWeb3'\n\nimport { useModals } from 'hooks/modal/useModals'\n\nimport {useState } from 'react'\nimport Web3 from 'web3'\n\nimport { AmmData, AmmInData, CoinInfo, CoinMap, IBData, TradeCalcData, WalletCoin, WalletMap, } from '@loopring-web/component-lib/static-resource'\nimport { AmmProps } from '@loopring-web/component-lib'\n\nimport { useExchangeAPI, useUserAPI } from 'hooks/exchange/useApi'\n\nimport { fromWEI, getIcon } from 'utils/swap_calc_utils'\nimport { useWeb3Account } from 'stores/account/hook'\nimport { useGetExchangeInfo, useGetTokens } from 'hooks/exchange/useExchangeAPI'\n\nimport * as contract from 'loopring-sdk'\n\nimport { Lv2Account } from 'defs/account_defs'\n\nimport {\n    ExchangeAPI,\n    dumpError400,\n    GetNextStorageIdRequest,\n    GetOffchainFeeAmtRequest,\n    OffchainFeeReqType,\n    OffChainWithdrawalRequestV3,\n    OriginTransferRequestV3,\n    TokenInfo,\n    VALID_UNTIL,\n} from 'loopring-sdk'\n\nimport { useGetUserBalances } from 'hooks/exchange/useUserAPI'\n\nimport {\n    DepositProps,\n    ResetProps,\n    SwitchData,\n    TradeBtnStatus,\n    TransferProps,\n    WithdrawProps,\n} from '@loopring-web/component-lib'\n\nimport { WithdrawType, WithdrawTypes } from '@loopring-web/component-lib/src/static-resource'\nimport { ButtonProps } from '@loopring-web/component-lib/components/basic-lib/index';\nimport { CoinType } from '@loopring-web/component-lib/static'\nimport { useDispatch } from 'react-redux'\n\nexport const useHeader = () => {\n    const { i18n,t } = useTranslation(['common','layout'])\n    const { setTheme,themeMode,language, setLanguage } = useSettings();\n    const { ShowDeposit } = useModals()\n    const { modals:{isShowAccountInfo,isShowConnect}, setShowConnect, setShowAccountInfo }  = useOpenModals()\n \n    const [openConnect, setOpenConnect] = React.useState(false)\n\n    const forceUpdate = React.useReducer((bool) => !bool, false)[1]\n    const { account } = useAccount()\n\n    const { lock, unlock } = useUnlock()\n\n    const { connect } = useConnect()\n\n    const { etherscanUrl } = useEtherscan()\n\n    const dispatch = useDispatch()\n\n    const gatewayList: GatewayItem[] = [\n        {\n            ...DefaultGatewayList[0],\n            handleSelect: () => {\n                console.log('try to connect to ', ConnectorNames.Injected)\n                connect(ConnectorNames.Injected, true)\n                setShowConnect({isShow: false})\n            }\n        },\n        /*\n        {\n            key: ConnectorNames.WalletConnect,\n            imgSrc: '',\n            handleSelect: () => {\n                connect(ConnectorNames.WalletConnect)\n                setOpen(false)\n            }\n        },\n        {\n            key: ConnectorNames.Ledger,\n            imgSrc: '',\n            handleSelect: () => {\n                connect(ConnectorNames.Ledger)\n                setOpen(false)\n            }\n        },\n        {\n            key: ConnectorNames.Trezor,\n            imgSrc: '',\n            handleSelect: () => {\n                connect(ConnectorNames.Trezor)\n                setOpen(false)\n            }\n        },\n        */\n    ]\n    // const [showAccountInfo, setShowAccountInfo] = React.useState(account?.accAddr ? true : false)\n    const [accountInfoProps, setAccountInfoProps] = React.useState<undefined|AccountInfoProps>(undefined)\n    //const theme: any = useTheme()\n\n    const onNotification = React.useCallback(async () => {\n        console.log('onNotification click')\n    }, [])\n\n    const onWalletBtnConnect = React.useCallback(async () => {\n        const acc = store.getState().account\n        console.log(`onWalletBtnConnect click: ${acc.status}`)\n\n        switch (acc.status) {\n            case AccountStatus.NOACCOUNT:\n                ShowDeposit(true)\n                break\n            case AccountStatus.UNCONNNECTED:\n                setShowConnect({isShow:true})\n                break\n            case AccountStatus.CONNECTED:\n            case AccountStatus.LOCKED:\n            case AccountStatus.ACTIVATED:\n                setShowAccountInfo({isShow:true})\n                break\n            default:\n                // console.log('setOpenConnect(true)')\n                // setOpenConnect(true)\n                break\n        }\n    }, [setShowConnect, lock, unlock, ShowDeposit])\n\n    const onThemeBtnClick = React.useCallback(async (themeMode:ThemeKeys) => {\n        if (themeMode === Theme.dark) {\n            setTheme(Theme.light)\n        } else {\n            setTheme(Theme.dark)\n        }\n    }, [setTheme])\n\n    const onLangBtnClick = (lang: LanguageKeys) => {\n        //i18n.changeLanguage(lang);\n        setLanguage(lang);\n    }\n\n    // const [advanceOpen,setAdvanceOpen] = React.useState(false)\n\n    // const handleViewAccountInfo =  React.useCallback((event: React.MouseEvent) => {\n    //     event.stopPropagation();\n    //     event.preventDefault();\n    //     if (showAccountInfo) {\n    //         // headerMenuData[ NavListIndex.layer2 ].iconBtn.view = false;\n    //         setShowAccountInfo(false);\n    //     } else {\n    //         // headerMenuData[ NavListIndex.layer2 ].iconBtn.view = true;\n    //         setShowAccountInfo(true);\n    //     }\n    // },[setShowAccountInfo, showAccountInfo])\n\n    // useCustomCompareEffect(()=>{\n    //     if(language!==i18n.language)  {\n    //         headerToolBarData[ButtonComponentsMap.Language] = { ...headerToolBarData[ButtonComponentsMap.Language], language: i18n.language}\n    //     }\n    // },[language],(prevDeps,curDeps)=> prevDeps!== curDeps)\n    //init componment\n    useCustomDCEffect(() => {\n\n\n        headerToolBarData[ButtonComponentsMap.WalletConnect] = {\n            ...headerToolBarData[ButtonComponentsMap.WalletConnect],\n            handleClick: onWalletBtnConnect,\n        }\n\n        // headerToolBarData[ButtonComponentsMap.Notification] = { ...headerToolBarData[ButtonComponentsMap.Theme], themeMode: theme.mode, handleClick: onNotification }\n        // headerToolBarData.update(ButtonComponentsMap.WalletConnect,value=>{\n        //   return {...value, handleClick:onWalletBtnConnect}});\n        headerToolBarData[ButtonComponentsMap.Theme] = { ...headerToolBarData[ButtonComponentsMap.Theme], themeMode, handleClick: onThemeBtnClick }\n        // headerToolBarData.update(ButtonComponentsMap.Theme,value=>{\n        //   return {...value, themeMode:theme.mode, handleClick:onThemeBtnClick}});\n\n        headerToolBarData[ButtonComponentsMap.Language] = { ...headerToolBarData[ButtonComponentsMap.Language], handleChange: onLangBtnClick }\n        // headerToolBarData.update(ButtonComponentsMap.Language,value=>{\n        //  return  {...value, language:i18n.language, handleClick:onThemeBtnClick}});\n    }, [themeMode, language, i18n, onWalletBtnConnect, onThemeBtnClick, onLangBtnClick, onNotification, t]);\n\n\n    const UnlockBtn = ({onClick}:{onClick:({...props}:any)=>void})=>{\n        return <Button className={'unlock'}  startIcon={<LockIcon fontSize={'large'}/>}  \n        onClick={(event)=>{unlock(account)}} variant={'outlined'} >\n            <Typography variant={'body2'} marginTop={1/2}>   {t('labelUnLock')} </Typography>\n        </Button>\n    }\n    const LockBtn = ({onClick}:{onClick:({...props}:any)=>void})=>{\n        return  <Button className={'lock'}  startIcon={<UnLockIcon fontSize={'large'}/>} \n        onClick={(event) => { lock(account) } } variant={'outlined'} >\n            <Typography variant={'body2'} marginTop={1/2}>  {t('labelLock')} </Typography>\n        </Button>\n    }\n\n\n    useCustomDCEffect(() => {\n\n        if (!account) {\n            console.log('account'+account+'* exit')\n            setAccountInfoProps(undefined)\n            return\n        }\n\n        const { status } = account\n\n        const addr = getShortAddr(account?.accAddr)\n\n\n\n        // if((addr && accountInfoProps && accountInfoProps.address !== addr) || addr ){\n        //     //TODO getAccount detail info\n        //\n        // }else if(addr) {\n        //     setAccountInfoProps(undefined)\n        // }\n\n        const updateHeaderMenuWhenHasAccountInfo =  ({status}:{status:keyof  typeof AccountStatus})=>{\n            headerMenuData[HeadMenuTabKey.Layer2] = {\n                ...headerMenuData[HeadMenuTabKey.Layer2],\n                status: HeaderMenuTabStatus.default\n            }\n            let props;\n            if(status === AccountStatus.ACTIVATED) {\n                props = {\n                    addressShort: addr?addr:'',\n                    address: account?.accAddr,\n                    level: 'VIP 1',\n                    etherscanLink: etherscanUrl + account?.accAddr,\n                    //TODO: changed by account status\n                    mainBtn: <LockBtn onClick={(event)=>{console.log(event) }}/>,\n                    connectBy:''\n                }\n                setShowAccountInfo({isShow:false})\n            }else if(status === AccountStatus.LOCKED) {\n                props = {\n                    addressShort: addr?addr:'',\n                    address: account?.accAddr,\n                    level: 'VIP 1',\n                    etherscanLink: etherscanUrl + account?.accAddr,\n                    //TODO: changed by account status\n                    mainBtn: <UnlockBtn onClick={(event)=>{console.log(event) }}/>,\n                    connectBy:''\n                }\n                setShowAccountInfo({isShow:true})\n            }else if(status === AccountStatus.UNACTIVATED\n                || status === AccountStatus.NOACCOUNT\n                || status === AccountStatus.DEPOSITING\n                || status === AccountStatus.DEPOSIT_TO_CONFIREM\n                || status === AccountStatus.ARPROVING\n                || status === AccountStatus.APPROV_TO_CONFIRM\n            )  {\n                props = {\n                    addressShort: addr?addr:'',\n                    address: account?.accAddr,\n                    //TODO: level\n                    level: 'VIP 1',\n                    etherscanLink: etherscanUrl + account?.accAddr,\n                    //TODO: changed by account status\n                    connectBy:''\n                }\n                setShowAccountInfo({isShow:false})\n            } else  {\n                setShowAccountInfo({isShow:false})\n            }\n\n\n            setAccountInfoProps(props)\n            // setShowAccountInfo(true);\n        }\n        switch (status) {\n            case AccountStatus.UNCONNNECTED:\n                headerToolBarData[ButtonComponentsMap.WalletConnect] = {\n                    ...headerToolBarData[ButtonComponentsMap.WalletConnect],\n                    label: 'Connect Wallet',\n                    status: WalletStatus.default\n                }\n                headerMenuData[HeadMenuTabKey.Layer2] = {\n                    //TODO:  HeaderMenuTabStatus.hidden\n                    ...headerMenuData[HeadMenuTabKey.Layer2], status: HeaderMenuTabStatus.hidden\n                }\n                setShowAccountInfo({isShow:false})\n                break\n            case AccountStatus.LOCKED:\n                headerToolBarData[ButtonComponentsMap.WalletConnect] = {\n                    ...headerToolBarData[ButtonComponentsMap.WalletConnect],\n                    label: addr,\n                    status: WalletStatus.connect\n                };\n\n                updateHeaderMenuWhenHasAccountInfo({status});\n                break\n            case AccountStatus.ACTIVATED:\n                headerToolBarData[ButtonComponentsMap.WalletConnect] = {\n                    ...headerToolBarData[ButtonComponentsMap.WalletConnect],\n                    label: addr,\n                    status: WalletStatus.unlock\n                }\n\n                updateHeaderMenuWhenHasAccountInfo({status});\n                break\n            case AccountStatus.UNACTIVATED:\n            case AccountStatus.NOACCOUNT:\n                headerToolBarData[ButtonComponentsMap.WalletConnect] = {\n                    ...headerToolBarData[ButtonComponentsMap.WalletConnect],\n                    // TODO got cache address if no show Connect Wallet\n                    label: addr,\n                    status: WalletStatus.noAccount\n                }\n\n                updateHeaderMenuWhenHasAccountInfo({status});\n                break\n            case AccountStatus.DEPOSITING:\n            case AccountStatus.DEPOSIT_TO_CONFIREM:\n            case AccountStatus.ARPROVING:\n            case AccountStatus.APPROV_TO_CONFIRM:\n                headerToolBarData[ButtonComponentsMap.WalletConnect] = {\n                    ...headerToolBarData[ButtonComponentsMap.WalletConnect],\n                    label: addr,\n                    status: WalletStatus.accountPending\n                }\n                updateHeaderMenuWhenHasAccountInfo({status});\n\n                break\n        }\n        forceUpdate()\n    }, [account, etherscanUrl, setAccountInfoProps])\n\n    return {\n        headerToolBarData,\n        headerMenuData,\n        gatewayList,\n        isShowConnect,\n        isShowAccountInfo,\n        setShowAccountInfo,\n        setShowConnect,\n        // open,\n        // setOpen,\n        // openConnect,\n        // setOpenConnect,\n        account,\n        accountInfoProps,\n\n    }\n\n}\n\nexport function useCoinMap(exchangeApi: ExchangeAPI, tokens: any) {\n\n    const [coinMap, setCoinMap] = useState<CoinMap<any, CoinInfo<any>>>({})\n\n    useCustomDCEffect(async () => {\n\n        if (!exchangeApi || !tokens) {\n            return\n        }\n\n        const keys = Reflect.ownKeys(tokens)\n\n        let coinMap: CoinMap<any, CoinInfo<any>> = {}\n\n        keys.forEach((key: any) => {\n\n            if (!(key as string).startsWith('LP-')) {\n                coinMap[ key ] = {\n                    icon: getIcon(key, tokens),\n                    name: key,\n                    simpleName: key,\n                    description: '',\n                    company: '',\n                }\n            }\n\n        })\n\n        setCoinMap(coinMap)\n\n    }, [exchangeApi, tokens])\n\n    return {\n        coinMap,\n    }\n\n}\n\nexport function useLv1WalletMap(exchangeApi: ExchangeAPI, account: Lv2Account, tokens: any) {\n\n    const [walletMap, setWalletMap] = useState<WalletMap<any, WalletCoin<any>>>({})\n\n    useCustomDCEffect(async () => {\n\n        if (!exchangeApi || !account || !account.accAddr || !tokens) {\n            return\n        }\n\n        let walletMap: WalletMap<any, WalletCoin<any>> = {}\n\n        const {tokenBalances} = await exchangeApi.getTokenBalances({\n            owner: account.accAddr, token: ''\n        }, tokens)\n\n        const keys = Reflect.ownKeys(tokenBalances)\n\n        keys.forEach((item: any) => {\n            const balance = tokenBalances[ item ]\n            walletMap[ item ] = {\n                belong: item,\n                count: fromWEI(tokens, item, balance) as number,\n            }\n        })\n\n        setWalletMap(walletMap)\n\n    }, [exchangeApi, account, tokens])\n\n    return {\n        walletMap,\n    }\n\n}\n\nexport function useLv2WalletMap(tokens: any) {\n\n    const {balances} = useGetUserBalances(tokens)\n\n    const [walletMap, setWalletMap] = useState<WalletMap<any, WalletCoin<any>>>({})\n\n    useCustomDCEffect(() => {\n        let walletMap: WalletMap<any, WalletCoin<any>> = {}\n        if (balances && balances.symbol) {\n            const keys = Reflect.ownKeys(balances.symbol)\n\n            keys.forEach((item: any) => {\n                const balance = balances.symbol[ item ]\n                walletMap[ item ] = {\n                    belong: item,\n                    count: fromWEI(tokens, item, balance) as number,\n                }\n            })\n        }\n\n        console.log('lv2:', walletMap)\n\n        setWalletMap(walletMap)\n    }, [balances, tokens])\n\n    return {\n        walletMap,\n    }\n\n}\n\nexport function useChargeFeeList(tokenSymbol: string | undefined, requestType: OffchainFeeReqType) {\n\n    const api = useUserAPI()\n\n    const {accountId, apiKey,} = useAccount()\n\n    const [chargeFeeList, setChargeFeeList] = useState<any>([])\n\n    useCustomDCEffect(async () => {\n\n        console.log('!!!!!!!!!useCustomDCEffect useChargeFeeList:', tokenSymbol, accountId)\n\n        if (!accountId || !tokenSymbol) {\n            return\n        }\n\n        let chargeFeeList: any[] = []\n\n        try {\n\n            const request: GetOffchainFeeAmtRequest = {\n                accountId,\n                tokenSymbol,\n                requestType,\n            }\n\n            const response = await api.getOffchainFeeAmt(request, apiKey)\n\n            if (response) {\n                response.raw_data.fees.forEach((item: any, index: number) => {\n                    chargeFeeList.push({belong: item.token, fee: item.fee})\n                })\n\n                setChargeFeeList(chargeFeeList)\n            }\n            console.log('response:', response)\n\n        } catch (reason) {\n            dumpError400(reason)\n        }\n\n\n        setChargeFeeList(chargeFeeList)\n\n    }, [accountId, apiKey, tokenSymbol])\n\n    return {\n        chargeFeeList,\n    }\n\n}\n\nexport function useModalProps() {\n\n    const {\n        ShowDeposit,\n        ShowTransfer,\n        ShowWithdraw,\n        ShowResetAccount,\n    } = useModals()\n\n    const {chainId, isConnected, connector,} = useWeb3Account()\n\n    const {exchangeInfo} = useGetExchangeInfo()\n\n    const {account, apiKey, accountId, eddsaKey,} = useAccount()\n\n    const {tokens: tokensAll} = useGetTokens()\n\n    const tokens = tokensAll?.tokenSymbolMap\n\n    const userApi = useUserAPI()\n\n    const exchangeApi = useExchangeAPI()\n\n    const {coinMap} = useCoinMap(exchangeApi, tokens)\n\n    const {walletMap: walletMap_Lv1} = useLv1WalletMap(exchangeApi, account, tokens)\n\n    const {walletMap: walletMap_Lv2} = useLv2WalletMap(tokens)\n\n    const deposit = useCallback(async (token: string, amt: any) => {\n\n        if (!tokens || !isConnected || !connector || !exchangeInfo?.exchangeAddress || !exchangeInfo?.depositAddress) {\n            console.log(`exchangeInfo:${exchangeInfo} deposit exit!!!!!`)\n            return\n        }\n\n        try {\n            const tokenInfo: TokenInfo = tokens[ token ]\n\n            const provider = await connector.getProvider()\n            const web3 = new Web3(provider as any)\n\n            let sendByMetaMask = account.connectName === ConnectorNames.Injected\n            sendByMetaMask = true\n\n            const gasPrice = (await exchangeApi.getGasPrice()).gasPrice / 1e+9\n            const gasLimit = 350000\n\n            const nonce = await contract.getNonce(web3, account.accAddr)\n\n            console.log('gasPrice:', gasPrice)\n            console.log('account.connectName:', account.connectName, ' tokenInfo:', tokenInfo)\n\n            const response = await contract.approveMax(web3, account.accAddr, tokenInfo.address,\n                exchangeInfo?.depositAddress, gasPrice, gasLimit, chainId, nonce, sendByMetaMask)\n\n            console.log('response:', response)\n\n            const fee = 0\n\n            const response2 = await contract.deposit(web3, account.accAddr,\n                exchangeInfo?.exchangeAddress, tokenInfo, amt, fee,\n                gasPrice, gasLimit, chainId, nonce + 1, sendByMetaMask)\n\n            console.log('response2:', response2)\n\n\n        } catch (reason) {\n            dumpError400(reason)\n        }\n\n    }, [chainId, isConnected, connector, account, exchangeInfo, tokens, exchangeApi])\n\n    const withdraw = useCallback(async (token: string, amt: any) => {\n\n        console.log('withdraw apiKey:', apiKey, ' exchangeInfo:', exchangeInfo, ' exchangeAddr:', exchangeInfo.exchangeAddress)\n\n        if (!account || !account.accountId || !account.accAddr\n            || !connector || !chainId || !apiKey || !exchangeInfo\n            || !exchangeInfo.exchangeAddress) {\n            console.log('return directly!!!!!', account, connector, chainId, apiKey, exchangeInfo)\n            return\n        }\n\n        amt = '5500000000000000000'\n\n        const fee = '5500000000000000000'\n\n        console.log('exchangeAddress:', exchangeInfo.exchangeAddress)\n\n        try {\n\n            const request: GetNextStorageIdRequest = {\n                accountId: account.accountId,\n                sellTokenId: 1\n            }\n\n            const storageId = await userApi.getNextStorageId(request, apiKey)\n\n            const request2: OffChainWithdrawalRequestV3 = {\n                exchange: exchangeInfo.exchangeAddress,\n                owner: account.accAddr,\n                to: account.accAddr,\n                accountId: account.accountId,\n                storageId: storageId.offchainId,\n                token: {\n                    tokenId: '1',\n                    volume: '100000000000000000000',\n                },\n                maxFee: {\n                    tokenId: '1',\n                    volume: '9400000000000000000',\n                },\n                extraData: '',\n                minGas: 0,\n                validUntil: VALID_UNTIL,\n            }\n\n            const provider = await connector.getProvider()\n            const web3 = new Web3(provider as any)\n\n            const response = await userApi.submitOffchainWithdraw(request2, web3, chainId, ConnectorNames.Injected,\n                account.eddsaKey, apiKey, false)\n\n            console.log(response)\n\n        } catch (reason) {\n            dumpError400(reason)\n        }\n\n    }, [apiKey, account, connector, exchangeInfo, chainId, userApi])\n\n    const transfer = useCallback(async (amt: number, payeeAddr: string = '0xb6AdaC3e924B4985Ad74646FEa3610f14cDFB79c') => {\n\n        if (!connector || !apiKey || !chainId || !accountId || !account?.accAddr) {\n            return\n        }\n\n        const request: GetNextStorageIdRequest = {\n            accountId,\n            sellTokenId: 1\n        }\n        const storageId = await userApi.getNextStorageId(request, apiKey)\n\n        console.log(`amt: ${amt} storageId:${JSON.stringify(storageId)}`)\n\n        try {\n\n            const provider = await connector.getProvider()\n            const web3 = new Web3(provider as any)\n\n            let walletType = account.connectName\n            walletType = ConnectorNames.Injected\n\n            const payeeAcc = await exchangeApi.getAccount({owner: payeeAddr})\n\n            let payeeId = 0\n            if (payeeAcc) {\n                payeeId = payeeAcc.accInfo.accountId\n            }\n\n            const request2: OriginTransferRequestV3 = {\n                exchange: exchangeInfo.exchangeAddress,\n                payerAddr: account.accAddr,\n                payerId: accountId,\n                payeeAddr,\n                payeeId,\n                storageId: storageId.offchainId,\n                token: {\n                    tokenId: '1',\n                    volume: '100000000000000000000',\n                },\n                maxFee: {\n                    tokenId: '1',\n                    volume: '9400000000000000000',\n                },\n                validUntil: VALID_UNTIL,\n            }\n\n            console.log(`request2:${JSON.stringify(request2)}`)\n\n            const response = await userApi.submitInternalTransfer(request2, web3, chainId, walletType,\n                eddsaKey, apiKey, false)\n\n            console.log(response)\n\n        } catch (reason) {\n            dumpError400(reason)\n        }\n\n    }, [apiKey, accountId, account, connector, exchangeInfo, chainId, eddsaKey, userApi, exchangeApi])\n\n    const [depositValue, setDepositValue] = useState<IBData<any>>({\n        belong: undefined,\n        tradeValue: 0,\n        balance: 0\n    } as IBData<unknown>)\n\n    // deposit\n\n    let depositProps: DepositProps<any, any> = {\n        tradeData: {belong: undefined},\n        coinMap: coinMap,\n        walletMap: walletMap_Lv1,\n        depositBtnStatus: TradeBtnStatus.AVAILABLE,\n        onDepositClick: (tradeData: any) => {\n            console.log('1. onDepositClick', depositValue)\n            if (depositValue && depositValue.belong) {\n                deposit(depositValue.belong.toString(), depositValue.tradeValue)\n            }\n            ShowDeposit(false)\n        },\n        handlePanelEvent: async (data: SwitchData<any>, switchType: 'Tomenu' | 'Tobutton') => {\n            return new Promise((res) => {\n                if (data?.tradeData?.belong) {\n                    if (depositValue !== data.tradeData) {\n                        setDepositValue(data.tradeData)\n                    }\n                    setTokenSymbol(data.tradeData.belong)\n                } else {\n                    setDepositValue({belong: undefined, tradeValue: 0, balance: 0} as IBData<unknown>)\n                }\n                res();\n            })\n        },\n    }\n\n    // withdraw\n    const [withdrawValue, setWithdrawValue] = useState<IBData<any>>({\n        belong: undefined,\n        tradeValue: 0,\n        balance: 0\n    } as IBData<unknown>);\n\n    const [tokenSymbol, setTokenSymbol] = useState<string>('')\n    const {chargeFeeList: withdrawalFeeList} = useChargeFeeList(tokenSymbol, OffchainFeeReqType.OFFCHAIN_WITHDRAWAL)\n\n    let withdrawProps: WithdrawProps<any, any> = {\n        tradeData: {belong: undefined},\n        coinMap: coinMap,\n        walletMap: walletMap_Lv2,\n        withdrawBtnStatus: TradeBtnStatus.AVAILABLE,\n        onWithdrawClick: (tradeData: any) => {\n            console.log('Swap button click', withdrawValue)\n            if (withdrawValue && withdrawValue.belong) {\n                withdraw(withdrawValue.belong.toString(), withdrawValue.tradeValue)\n            }\n            ShowWithdraw(false)\n        },\n\n        handlePanelEvent: async (data: SwitchData<any>, switchType: 'Tomenu' | 'Tobutton') => {\n            return new Promise((res: any) => {\n                if (data?.tradeData?.belong) {\n                    if (withdrawValue !== data.tradeData) {\n                        setWithdrawValue(data.tradeData)\n                    }\n                    setTokenSymbol(data.tradeData.belong)\n                } else {\n                    setWithdrawValue({belong: undefined, tradeValue: 0, balance: 0} as IBData<unknown>);\n                }\n                res();\n            })\n        },\n        withdrawType: WithdrawType.Fast,\n        withdrawTypes: WithdrawTypes,\n        chargeFeeToken: 'ETH',\n        chargeFeeTokenList: withdrawalFeeList,\n        handleOnAddressChange: (value: any) => {\n            console.log('handleOnAddressChange', value);\n        },\n        handleAddressError: (_value: any) => {\n            return {error: true, message: 'any error'}\n        }\n    }\n    // console.log(coinMap)\n    // transfer\n    const [transferValue, setTransferValue] = useState<IBData<any>>({\n        belong: undefined,\n        tradeValue: 0,\n        balance: 0\n    } as IBData<unknown>)\n\n    const [transferTokenSymbol, setTransferTokenSymbol] = useState<string>('')\n    const {chargeFeeList: transferFeeList} = useChargeFeeList(transferTokenSymbol, OffchainFeeReqType.TRANSFER)\n\n    let transferProps: TransferProps<any, any> = {\n        tradeData: {belong: undefined},\n        coinMap: coinMap,\n        walletMap: walletMap_Lv2,\n        transferBtnStatus: TradeBtnStatus.AVAILABLE,\n        onTransferClick: (tradeData: any) => {\n            console.log('onTransferClick:', transferValue);\n            if (transferValue && transferValue.belong) {\n                transfer(transferValue.tradeValue)\n            }\n\n            ShowTransfer(false)\n        },\n\n        handlePanelEvent: async (data: SwitchData<any>, switchType: 'Tomenu' | 'Tobutton') => {\n            return new Promise((res: any) => {\n                if (data?.tradeData?.belong) {\n                    if (transferValue !== data.tradeData) {\n                        setTransferValue(data.tradeData)\n                    }\n                    setTransferTokenSymbol(data.tradeData.belong)\n                } else {\n                    setTransferValue({belong: undefined, tradeValue: 0, balance: 0} as IBData<unknown>)\n                }\n                // else{\n                //     setTransferValue({ belong: undefined, amt: 0 })\n                // }\n\n                res();\n            })\n        },\n\n        chargeFeeToken: 'ETH',\n        chargeFeeTokenList: transferFeeList,\n        handleOnAddressChange: (value: any) => {\n            console.log('handleOnAddressChange', value);\n        },\n        handleAddressError: (_value: any) => {\n            return {error: true, message: 'any error'}\n        }\n    }\n\n    // reset\n    const [resetValue, setResetValue] = useState<IBData<any>>({\n        belong: undefined,\n        tradeValue: 0,\n        balance: 0\n    } as IBData<unknown>)\n\n\n    let resetProps: ResetProps<any, any> = {\n        tradeData: {belong: undefined},\n        coinMap: coinMap,\n        walletMap: walletMap_Lv2,\n        resetBtnStatus: TradeBtnStatus.AVAILABLE,\n        onResetClick: (tradeData: any) => {\n            console.log('onResetClick', resetValue)\n            if (resetValue && resetValue.belong) {\n            }\n\n            ShowResetAccount(false)\n        },\n        handlePanelEvent: async (data: SwitchData<any>, switchType: 'Tomenu' | 'Tobutton') => {\n            return new Promise((res) => {\n                if (data?.tradeData?.belong) {\n                    if (resetValue !== data.tradeData) {\n                        setResetValue(data.tradeData)\n                    }\n                } else {\n                    setResetValue({belong: undefined, tradeValue: 0, balance: 0} as IBData<unknown>)\n                }\n\n                res();\n            })\n        },\n        fee: {count: 234, price: 123}\n    }\n\n     const tradeCalcData: TradeCalcData<CoinType> = {\n        coinSell: 'ETH', //name\n        coinBuy: 'LRC',\n        BtoS: 0,\n        StoB: 0,\n        sellCoinInfoMap: coinMap,\n        buyCoinInfoMap: coinMap,\n        walletMap: {},\n        slippage: 0.5,\n        slippageTolerance: [0.1, 0.5, 1, 'slippage:N'],\n        priceImpact: '12',\n        minimumReceived: '1%',\n        fee: '1%'\n    }\n     const ammCalcData: AmmInData<CoinType> = {\n        myCoinA: {belong:'ETH',balance:1000,tradeValue:0},\n        myCoinB: {belong:'LRC',balance:1000,tradeValue:0},\n        AtoB:50,\n        coinInfoMap: coinMap,\n        slippage: 0.5,\n        slippageTolerance: [0.1, 0.5, 1, 'slippage:N'],\n        fee: '1%'\n    }\n\n\n    let swapProps: SwapProps<IBData<string>, string, any> = {\n        tradeData: undefined,\n        tradeCalcData,\n        onSwapClick: (tradeData) => {\n            console.log('Swap button click', tradeData);\n        },\n        handleSwapPanelEvent: async (data: any, switchType: any) => {\n            console.log(data, switchType)\n        },\n    };\n    let ammProps: AmmProps<AmmData<IBData<any>>, any, AmmInData<any>> = {\n        ammDepositData:{coinA: {belong: 'ETH',balance:0.3,tradeValue:0}, coinB:  {belong: 'LRC',balance:1000,tradeValue:0},slippage: '',},\n        ammWithdrawData:{coinA: {belong: 'ETH',balance:0.3,tradeValue:0}, coinB:  {belong: 'LRC',balance:1000,tradeValue:0},slippage: '',},\n        // tradeCalcData,\n        ammCalcData:ammCalcData,\n        handleDepositEvent: (data,type) => {\n            console.log('handleDepositEvent',data,type) ;\n        },\n        handleWithDrawEvent:  (data,type) => {\n            console.log('handleWithDrawEvent',data,type) ;\n        },\n        onAmmWithdrawClick: (data)=>{\n            console.log('onAmmWithdrawClick',data) ;\n        },\n        onAmmDepositClick: (data)=>{\n            console.log('onAmmDepositClick',data) ;\n        }\n    }\n\n    return {\n        depositProps, withdrawProps, transferProps, resetProps, ammProps, swapProps,\n    }\n}\n","export function deepClone(data: any) {\n    if (!data || !(data instanceof Object) || (typeof data == \"function\")) {\n        return data || undefined\n    }\n    let constructor = data.constructor\n    let result = new constructor()\n    for (let key in data) {\n        if (data.hasOwnProperty(key)) {\n            result[key] = deepClone(data[key])\n        }\n    }\n    return result\n}\n\nexport function copyToClipBoard(text: string){ //复制到剪切板\n\n    if(document.execCommand){\n        var textarea =document.createElement('textarea')\n        document.body.appendChild(textarea)\n        textarea.value=text\n        textarea.select()\n        document.execCommand(\"Copy\")\n        document.body.removeChild(textarea)\n\t}\n\n\tif((window as any).clipboardData){\n        (window as any).clipboardData.setData(\"Text\", text)\n        return true\n    }\n\treturn false\n}","import { WithTranslation, withTranslation } from 'react-i18next';\nimport { Box, Modal } from '@material-ui/core';\nimport { ModalCloseButton, ModalContentStyled, ModalQRCode } from '@loopring-web/component-lib';\nimport React from 'react';\nimport { AccountInfo, AccountInfoProps } from '@loopring-web/component-lib';\n\nexport const ModalAccountInfo = withTranslation('common')(({\n                                                               onClose,\n                                                               open,\n                                                               t,\n                                                               ...rest\n                                                           }: { open:boolean, onClose:(e:any)=>void} & AccountInfoProps & WithTranslation) => {\n\n\n    return <Modal\n        open={open}\n        onClose={onClose}\n        aria-labelledby=\"Account information\"\n        aria-describedby=\"show layer2 address, unlock/locked loopring wallet, copy address\"\n    >\n        <ModalContentStyled style={{boxShadow: '24'}}>\n            <Box paddingTop={3} paddingBottom={3} display={'flex'} flexDirection={'column'} minWidth='var(--modal-width)'>\n                <ModalCloseButton onClose={onClose} {...{...rest, t}} />\n                <AccountInfo {...rest}/>\n            </Box>\n\n        </ModalContentStyled>\n    </Modal>\n})","import React, { useCallback, useState, } from 'react'\n\nimport {\n    Header as HeaderUI,\n    HideOnScroll,\n    ModalWalletConnect,\n    AccountInfo,\n    ModalCloseButton,\n} from '@loopring-web/component-lib'\n\nimport { headerRoot } from '@loopring-web/component-lib/src/static-resource'\n\nimport { useLocation } from 'react-router-dom'\n\nimport { Toolbar, Snackbar, Alert, } from '@material-ui/core'\n\nimport { useHeader } from './hook'\n\nimport { useDisconnect, } from 'stores/account/hook'\nimport { ModalPanel, ModalQRCode, } from '@loopring-web/component-lib';\nimport { useGetExchangeInfo } from 'hooks/exchange/useExchangeAPI'\nimport { useModalProps } from './hook'\n\nimport { copyToClipBoard } from 'utils/obj_tools'\nimport { ModalAccountInfo } from '../../pages/AccountPage';\nimport { useTranslation } from 'react-i18next';\n\nconst Header = ({ ...rest }: any) => {\n\n    const {\n        depositProps,\n        withdrawProps,\n        transferProps,\n        resetProps,\n        ammProps,\n        swapProps,\n    } = useModalProps()\n\n    const location = useLocation()\n\n    const {\n        headerToolBarData,\n        headerMenuData,\n        gatewayList,\n        isShowConnect,\n        isShowAccountInfo,\n        setShowAccountInfo,\n        // setShowAccountInfo,\n        setShowConnect,\n        // open,\n        // setOpen,\n        // openConnect,\n        // setOpenConnect,\n        account,\n        accountInfoProps,\n        // showAccountInfo\n    } = useHeader()\n\n    const { exchangeInfo } = useGetExchangeInfo()\n\n    const { disconnect } = useDisconnect()\n\n    const onSwitch = useCallback(() => {\n        setShowAccountInfo({isShow:false})\n        setShowConnect({isShow:true})\n    }, [setShowConnect,setShowAccountInfo])\n\n    const [openQRCode, setOpenQRCode] = useState(false)\n\n    const [copyToastOpen, setCopyToastOpen] = useState(false);\n    const {t} = useTranslation('commom')\n\n    const closeCopyToast = () => { setCopyToastOpen(false) }\n\n    return (<>\n        <Snackbar open={copyToastOpen} autoHideDuration={2500} onClose={closeCopyToast}>\n            <Alert onClose={closeCopyToast} severity=\"success\">\n                {t('Address Copied to Clipboard!')}\n        </Alert>\n        </Snackbar>\n\n        <ModalQRCode open={openQRCode} onClose={() => setOpenQRCode(false)} title={'ETH Address'}\n            description={account.accAddr} url={account.accAddr} />\n\n        <ModalPanel transferProps={transferProps} withDrawProps={withdrawProps} \n        depositProps={depositProps} resetProps={resetProps} ammProps={ammProps} swapProps={swapProps}/>\n\n        <HideOnScroll>\n            {process.env.NODE_ENV !== 'production' && JSON.stringify(account?.status)}\n            {process.env.NODE_ENV !== 'production' && ' exchangeAddress:' + JSON.stringify(exchangeInfo?.exchangeAddress)}\n\n            <HeaderUI {...rest} headerMenuData={headerMenuData} headerToolBarData={headerToolBarData}\n                selected={location.pathname === '/' ? headerRoot : location.pathname}></HeaderUI>\n\n        </HideOnScroll>\n        <Toolbar />\n\n        <ModalWalletConnect {...{ ...rest, gatewayList, open:isShowConnect.isShow, onClose: () => setShowConnect({isShow:false}) }} />\n        {<ModalAccountInfo\n            open={isShowAccountInfo.isShow}\n            onClose={() => {setShowAccountInfo({isShow:false})}}\n            onCopy={() => {\n                copyToClipBoard(account.accAddr);\n                setCopyToastOpen(true)\n            }}\n            onViewQRCode={() => {\n                setOpenQRCode(true)\n            }}\n            onDisconnect={() => {\n                disconnect();\n                setShowAccountInfo({isShow:false});\n            }}\n            onSwitch={onSwitch}\n            {...{...accountInfoProps, ...rest}}></ModalAccountInfo>}\n    </>)\n}\n\n\nexport default Header\n\n\n\n","import styled from '@emotion/styled/macro'\n\nimport { MarketBlock, QuoteTable, TablePaddingX } from '@loopring-web/component-lib'\n\nimport { WithTranslation, withTranslation } from 'react-i18next'\nimport { coinMap } from '@loopring-web/component-lib/static'\nimport { FloatTag } from '@loopring-web/component-lib/src/static-resource'\nimport { Box, Grid } from '@material-ui/core'\nimport { useQuote } from './hook'\n\nconst  RowStyled = styled(Grid)`\n      & .MuiGrid-root:not(:last-of-type) > div{\n        margin-right: ${({theme}) => theme.unit * 3}px;\n      }\n` as typeof Grid\nconst  TableWrapStyled = styled(Grid)`\n  &{\n    background-color: ${({theme}) => theme.colorBase.background().default};\n    ${({theme}) => theme.border.defaultFrame({c_key: 'blur', d_R: 1})};\n    .rdg{\n      height: 100%;\n    }\n  }\n  ${({theme}) => TablePaddingX({pLeft:theme.unit * 3,pRight:theme.unit * 3})}\n` as typeof Grid\n\nconst QuotePage = withTranslation('common')((rest: WithTranslation) => {\n\n    const { tickList, big4 } = useQuote()\n\n    const formattedRawData = tickList.map((o: any) => ({\n        pair: !!o[0].length ? {\n            first: o[0][0],\n            last: o[0][1]\n        }: {\n            first: '--',\n            last: '--'\n        },\n        lastPrice: Number.isFinite(o[2]) ? o[2] : '--',\n        change: Number.isFinite(o[3]) ? o[3] : '--',\n        high: Number.isFinite(o[4]) ? o[4] : '--',\n        low: Number.isFinite(o[5]) ? o[5] : '--',\n        volumn: Number.isFinite(o[6]) ? o[6] : '--'\n    }))\n    \n    let props: any = {\n        ...rest,\n        buyData: coinMap.ETH,\n        sellData: coinMap.LRC,\n        tradeFloat: {priceDollar: +123, priceYuan: 2343232, percent: '+15%', timeUnit: \"24h\",\n            volume: 112312312,\n            floatTag:FloatTag.increase},\n\n    }\n\n    const onVisibleRowsChange=(data: any) => {\n        console.log(data)\n    }\n\n    return <Box display={'flex'} flexDirection={'column'} flex={1}>\n\n        <RowStyled container >\n            <Grid item xs={3} >\n                <MarketBlock {...{...props,tradeFloat: {priceDollar: 123,priceYuan: 2343232, percent: '0%', timeUnit: \"24h\",floatTag:FloatTag.none}}} />\n            </Grid>\n            <Grid item xs={3} >\n                <MarketBlock {...{...props,tradeFloat: {priceDollar: 123,priceYuan: 2343232, percent: '-15%', timeUnit: \"24h\",floatTag:FloatTag.decrease}}} />\n            </Grid>\n            <Grid item xs={3} >\n                <MarketBlock {...{...props}}></MarketBlock>\n            </Grid>\n            <Grid item xs={3} >\n                <MarketBlock {...{...props}}></MarketBlock>\n            </Grid>\n        </RowStyled>\n        <TableWrapStyled container marginY={3} paddingY={2} flex={1}>\n            <Grid item xs={12} display={'flex'}>\n                <QuoteTable onVisibleRowsChange={onVisibleRowsChange} rawData={formattedRawData} {...{ ...rest }} />\n            </Grid>\n        </TableWrapStyled>\n    </Box>\n\n\n})\n\nexport default QuotePage\n","import { QuoteTableRawDataItem } from \"@loopring-web/component-lib\"\nimport { TickerData, toBig } from \"loopring-sdk\"\nimport { useExchangeAPI } from \"hooks/exchange/useApi\"\nimport { useCustomDCEffect } from \"hooks/common/useCustomDCEffect\"\n\nimport { useState } from \"react\"\n\nconst amtCol = 5\n\nexport function useQuote() {\n\n    const [tickList, setTickList] = useState<any>([])\n\n    const [big4, setBig4] = useState<any>([])\n\n    const exchangeApi = useExchangeAPI()\n\n    useCustomDCEffect(async() => {\n\n        if (!exchangeApi) {\n            return\n        }\n\n        let mounted = true\n\n        const refresh = async () => {\n\n            const { tickList } = await exchangeApi.getAllTickers()\n\n            let ticks: any[] = []\n\n            tickList.forEach((item: TickerData) => {\n                const item2: QuoteTableRawDataItem = {\n                    pair: {\n                        first: item.base as string,\n                        last: item.quote as string,\n                    },\n                    lastPrice: toBig(item.quote_token_volume).div(item.base_token_volume).toNumber(),\n                    change: (item.close - item.open) / item.open,\n                    high: item.high,\n                    low: item.low,\n                    volume: toBig(item.base_token_volume).toNumber(),\n                }\n                const rowData: any = [[item.base, item.quote], [item.close, item.close],\n                item.change, item.high, item.low, item.base_token_volume, item.base_token_volume, item.base, item.quote]\n                ticks.push(rowData)\n            })\n            \n            ticks = ticks.sort((a: any, b: any) => {\n                let res = 0\n                if (!isNaN(b[amtCol]) && !isNaN(a[amtCol])) {\n                    res = b[amtCol] - a[amtCol]\n                }\n\n                return res\n            })\n\n            if (mounted) {\n                setBig4(ticks.slice(0, 4))\n                setTickList(ticks)\n            }\n        }\n\n        await refresh()\n\n        /*\n\n        const handler = setInterval(async() => {\n            await refresh()\n        }, 3000)\n        */\n\n        return () => {\n            /*\n            if (handler) {\n                clearInterval(handler)\n            }\n            */\n            mounted = false\n        }\n\n    }, [exchangeApi])\n\n    return {\n        tickList,\n        big4,\n    }\n\n}\n","import { useCallback, useState } from 'react'\n\nimport { useExchangeAPI } from 'hooks/exchange/useApi'\nimport { useCustomDCEffect } from 'hooks/common/useCustomDCEffect'\n\nimport { TradingInterval, Candlestick, GetCandlestickRequest, GetDepthRequest, GetTickerRequest, dumpError400, getExistedMarket } from 'loopring-sdk'\nimport { fromWEI } from 'utils/swap_calc_utils'\n\nimport { ChartUnit, CoinInfo } from '@loopring-web/component-lib/static-resource'\n\nimport { ChartType } from '@loopring-web/component-lib'\n\nimport { TGItemData, TGItemJSXInterface, } from '@loopring-web/component-lib'\n\nimport { IGetDepthDataParams } from '@loopring-web/component-lib/components/charts/scaleAreaChart/data'\n\nconst toggleData: TGItemData[] = [\n  {\n    value: ChartType.Trend,\n    key: ChartType.Trend,\n    label: 'label' + ChartType.Trend\n  },\n  {\n    value: ChartType.Depth,\n    key: ChartType.Depth,\n    label: 'label' + ChartType.Depth\n  },\n]\n\nexport function useBasicInfo(props: any, coinAInfo: any, coinBInfo: any, marketArray: any[], t: any) {\n  const tgItemJSXs: TGItemJSXInterface[] = toggleData.map(({ value, label, key }) => {\n    return { value, tlabel: t(label), key, JSX: <>{t(label)}</> }\n  })\n\n  // const { base, quote, market, tokens } = props\n\n  const { market, amm } = getExistedMarket(marketArray, coinAInfo?.name, coinBInfo?.name)\n\n  const [chartType, setChartType] = useState<ChartType>(ChartType.Trend)\n\n  console.log('---useBasicInfo market:', market, ' amm:', amm, ' chartType:', chartType)\n  //\n  // const [change, setChange] = useState(0)\n  //\n  // const [volume, setVolume] = useState('')\n\n  const [chartUnit, setChartUnit] = useState(ChartUnit.D1)\n\n  const [originData, setOriginData] = useState<any>(undefined)\n\n  const handleChange = useCallback((_e: React.MouseEvent, value: any) => {\n    // Settings.setChartType(value)\n    console.log('useBasicInfo handleChange:', value)\n    setOriginData(undefined)\n    setChartType(value)\n  }, [setOriginData, setChartType])\n\n  const exchangeApi = useExchangeAPI()\n\n  // useCustomDCEffect(async () => {\n  //\n  //   if (!exchangeApi || !market || !tokens || !quote) {\n  //     return\n  //   }\n  //\n  //   let mounted = true\n  //\n  //   try {\n  //\n  //     const request: GetTickerRequest = {\n  //       market: market.market,\n  //     }\n  //\n  //     const ticker = await exchangeApi.getTicker(request)\n  //     if (mounted) {\n  //\n  //       if (ticker.tickList[0].change) {\n  //         setChange(ticker.tickList[0].change)\n  //       }\n  //\n  //       if (ticker.tickList[0].base_token_volume) {\n  //         const baseVol = fromWEI(tokens.tokenSymbolMap, base, ticker.tickList[0].base_token_volume) as string\n  //         setVolume(baseVol)\n  //       }\n  //     }\n  //   }\n  //   catch (reason) {\n  //     dumpError400(reason, 'ChartPanel getCandlestick')\n  //   }\n  //\n  //   return () => {\n  //     mounted = false\n  //   }\n  //\n  // }, [exchangeApi, market, tokens, base,])\n\n  const tgItemJSXsPriceChart: TGItemJSXInterface[] = Object.keys(ChartUnit).reduce((pre, item) => {\n    // @ts-ignore\n    const tGItemData: TGItemData = { value: ChartUnit[item], key: ChartUnit[item], label: 'label' + ChartUnit[item] };\n    pre.push({ value: tGItemData.value, tlabel: t(tGItemData.label ? tGItemData.label : tGItemData.key), key: tGItemData.key, JSX: <>{t(tGItemData.label ? tGItemData.label : tGItemData.key)}</> })\n    return pre\n  }, [] as TGItemJSXInterface[])\n\n  useCustomDCEffect(async () => {\n  \n    let mounted = true\n  \n    if (!exchangeApi || !market || !amm) {\n      return\n    }\n  \n    if (chartType === ChartType.Trend) {\n      const request: GetCandlestickRequest = {\n        market: amm as string,\n        interval: TradingInterval.min15,\n        limit: 96\n      }\n  \n      try {\n        const candlesticks = await exchangeApi.getCandlestick(request)\n  \n        if (mounted) {\n          const originData = candlesticks.candlesticks.map((item: Candlestick) => {\n            return {\n              timeStamp: item.timestamp,\n              low: item.low,\n              high: item.high,\n              open: item.open,\n              close: item.close,\n              volume: item.quoteVol,\n            }\n          })\n          console.log(`useBasicInfo amm: ${amm} candlesticks originData: `, originData)\n          setOriginData(originData)\n        }\n      }\n      catch (reason) {\n        dumpError400(reason, 'ChartPanel getCandlestick')\n      }\n  \n    } else {\n      const request: GetDepthRequest = {\n        market: [market as string],\n      }\n  \n      try {\n  \n        const { depth } = await exchangeApi.getDepth(request)\n        console.log('useBasicInfo depth:', depth)\n        if (mounted) {\n          const originData: IGetDepthDataParams = {\n            bidsPrices: depth.bids_prices,\n            bidsAmtTotals: depth.bids_amtTotals,\n            asksPrices: depth.asks_prices,\n            asksAmtTotals: depth.asks_amtTotals,\n          }\n          setOriginData(originData)\n        }\n  \n      } catch (reason) {\n        dumpError400(reason)\n      }\n  \n    }\n  \n    return () => {\n      mounted = false\n    }\n  \n  }, [exchangeApi, amm, market, chartType])\n\n  return {\n    // change,\n    // volume,\n    chartUnit,\n    chartType,\n    tgItemJSXs,\n    tgItemJSXsPriceChart,\n    handleChange,\n    originData,\n  }\n}","import store from '../../stores';\nimport { AccountStatus } from '../../state_machine/account_machine_spec';\n\nexport enum fnType {\n    UNKNOWN,\n    UNCONNNECTED,\n    CONNECTED,\n    NOACCOUNT,\n    DEPOSITING,\n    DEPOSIT_TO_CONFIREM,\n    UNACTIVATED,\n    ARPROVING,\n    APPROV_TO_CONFIRM,\n    LOCKED,\n    ACTIVATED,\n    DEFAULT\n}\nexport const accountStaticCallBack = (props: { [key: number ]:[ fn: (props: any) => any, args?: object] }) => {\n    const {status} = store.getState().account\n    let fn, args;\n    switch (status) {\n        case AccountStatus.UNKNOWN:\n            [fn, args] = props[ fnType.UNKNOWN ]?props[ fnType.UNKNOWN ]:[];\n            if (typeof fn === 'function') {\n                return fn.call(this, args);\n            }\n            return\n        case AccountStatus.UNCONNNECTED:\n            [fn, args] = props[ fnType.UNCONNNECTED ]?props[ fnType.UNCONNNECTED ]:[];\n            if (typeof fn === 'function') {\n                return fn.call(this, args);\n            }\n            break;\n        case AccountStatus.CONNECTED:\n            [fn, args] = props[ fnType.CONNECTED ]?props[ fnType.CONNECTED ]:[];\n            if (typeof fn === 'function') {\n                return fn.call(this, args);\n            }\n            break;\n        case AccountStatus.NOACCOUNT:\n            [fn, args] = props[ fnType.NOACCOUNT ]?props[ fnType.NOACCOUNT ]:[];\n            if (typeof fn === 'function') {\n                return fn.call(this, args);\n            }\n            break;\n        case AccountStatus.DEPOSITING:\n            [fn, args] = props[ fnType.DEPOSITING ]?props[ fnType.DEPOSITING ]:[];\n            if (typeof fn === 'function') {\n                return fn.call(this, args);\n            }\n            break;\n        case AccountStatus.DEPOSIT_TO_CONFIREM:\n            [fn, args] = props[ fnType.DEPOSIT_TO_CONFIREM ]?props[ fnType.DEPOSIT_TO_CONFIREM ]:[];\n            if (typeof fn === 'function') {\n                return fn.call(this, args);\n            }\n            break;\n        case AccountStatus.UNACTIVATED:\n            [fn, args] = props[ fnType.UNACTIVATED ]?props[ fnType.UNACTIVATED ]:[];\n            if (typeof fn === 'function') {\n                return fn.call(this, args);\n            }\n            break;\n        case AccountStatus.ARPROVING:\n            [fn, args] = props[ fnType.ARPROVING ]?props[ fnType.ARPROVING ]:[];\n            if (typeof fn === 'function') {\n                return fn.call(this, args);\n            }\n            break;\n        case AccountStatus.APPROV_TO_CONFIRM:\n            [fn, args] = props[ fnType.APPROV_TO_CONFIRM ]?props[ fnType.APPROV_TO_CONFIRM ]:[];\n            if (typeof fn === 'function') {\n                return fn.call(this, args);\n            }\n            break;\n        case AccountStatus.LOCKED:\n            [fn, args] = props[ fnType.LOCKED ]?props[ fnType.LOCKED ]:[];\n            if (typeof fn === 'function') {\n                return fn.call(this, args);\n            }\n            break;\n        case AccountStatus.ACTIVATED:\n            [fn, args] = props[ fnType.ACTIVATED ]?props[ fnType.ACTIVATED ]:[];\n            if (typeof fn === 'function') {\n                return fn.call(this, args);\n            }\n            break;\n        default:\n            break;\n\n    }\n    [fn, args] = props[ fnType.DEFAULT ]?props[ fnType.DEFAULT ]:[];\n    if (typeof fn === 'function') {\n        return fn.call(this, args);\n    }\n}","import { ChartUnit } from '@loopring-web/component-lib/static-resource'\n\nimport { ScaleAreaChart, ToggleButtonGroup, useSettings } from '@loopring-web/component-lib'\nimport { Box, Grid } from \"@material-ui/core\"\nimport { WithTranslation } from 'react-i18next'\nimport { TradeTitle } from '@loopring-web/component-lib/components/block'\nimport { UpColor } from '@loopring-web/component-lib/src/static-resource';\nimport { useBasicInfo } from './hook'\n\nconst BasicInfoPanel = ({ props, coinAInfo, coinBInfo, tradeFloat, marketArray, t, ...rest }: any & WithTranslation) => {\n\n    const {\n        // change,\n        chartType,\n        tgItemJSXs,\n        tgItemJSXsPriceChart,\n        handleChange,\n        // originData,\n    } = useBasicInfo(props, coinAInfo, coinBInfo, marketArray, t)\n    const { upColor } = useSettings();\n\n    return <>\n        <Grid item xs={8}>\n            <TradeTitle {...{\n                coinAInfo, coinBInfo,\n                ...rest, t, tradeFloat\n            }}></TradeTitle>\n        </Grid>\n        <Grid item xs={4} display={'flex'} justifyContent={'flex-end'} alignItems={'flex-end'}>\n            <ToggleButtonGroup exclusive {...{ ...rest, t, tgItemJSXs, value: chartType }}\n                handleChange={handleChange} />\n        </Grid>\n\n        <Grid item xs={12}>\n            <Box minHeight={256} maxHeight={256} display={'block'} style={{ height: '100%', width: '100%' }}>\n                <ScaleAreaChart type={chartType} data={marketArray ?? []} riseColor={upColor as keyof typeof UpColor}\n                    handleMove={() => {\n                    }} />\n            </Box>\n        </Grid>\n        <Grid item xs={12} height={24} display={'flex'} justifyContent={'flex-end'}>\n            <ToggleButtonGroup exclusive {...{\n                ...rest, t, tgItemJSXs: tgItemJSXsPriceChart,\n                value: ChartUnit.D1, size: 'small'\n            }}\n                handleChange={() => undefined} />\n        </Grid>\n    </>\n\n};\n\nexport default BasicInfoPanel\n","// import { useState } from 'react'\n//\n// import TradePanelUi from './TradePanel'\n// import { useGetMyTrades, useGetRecentTrades, } from './hooks'\n//\n// const TradePanel = ({tradeArray}: any) => {\n//\n//   // const { market, poolAddress, base, quote } = props\n//\n//   console.log('TradePanel market:', tradeArray)\n//\n//   // const { myTrades } = useGetMyTrades(market)\n//   //\n//   // const { recentTrades } = useGetRecentTrades(poolAddress)\n//\n//\n//\n//   return (\n//     <TradePanelUi trades={tradeArray} isAllTrade={isAllTrade}\n//     setIsAllTrade={setIsAllTrade} />\n//   )\n//\n// }\n//\n// export default TradePanel\n\nimport { RefAttributes, useState } from 'react'\n\nimport Tabs from '@material-ui/core/Tabs'\nimport Tab from '@material-ui/core/Tab'\nimport Checkbox from '@material-ui/core/Checkbox'\nimport styled from '@emotion/styled'\n\nimport { FormControlLabel, TradeTable, } from '@loopring-web/component-lib'\nimport { withTranslation, WithTranslation } from 'react-i18next';\nimport { CheckBoxIcon, CheckedIcon } from '@loopring-web/component-lib/static-resource'\nimport { RouteComponentProps, withRouter } from 'react-router'\nimport { Box } from '@material-ui/core';\nimport { RawDataTradeItem } from '@loopring-web/component-lib/components/tableList/tradeTable/TradeTable';\nimport { BasicHeaderItem, HeadMenuType } from '@loopring-web/component-lib/components/basic-lib/lists/Interface';\n\nconst StylePaper = styled(Box)`\n  width: 100%;\n  height: 100%;\n  flex: 1;\n  background-color: ${({theme}) => theme.colorBase.background().default};\n  border-radius: ${({theme}) => theme.unit}px;\n  padding: 20px;\n\n  .tableWrapper {\n    margin-top: ${({theme}) => theme.unit * 1.5}px;\n    border: 1px solid ${({theme}) => theme.colorBase.borderColor};\n    border-radius: ${({theme}) => theme.unit}px;\n    padding: 26px;\n  }\n` as typeof Box;\n\n\nconst applyProps = (index: number) => {\n    return {\n        id: `simple-tab-${index}`,\n        'aria-controls': `simple-tabpanel-${index}`,\n    }\n}\nconst StyledTabsWrapper = styled.div`\n          position: relative;\n          width: 100%;\n          margin-top: ${({theme}) => theme.unit * 4}px;\n        `\n\nconst StyledFormControlLabel = styled(FormControlLabel)`\n          position: absolute;\n          top: 0;\n          right: ${({theme}) => theme.unit}px;\n          margin: ${({theme}) => theme.unit}px 0 0 0;\n        `\n\n\nconst TradePanel = withTranslation('common')(\n   // withRouter(\n    (\n        {tradeArray,  myTradeArray, t}:\n            { tradeArray: RawDataTradeItem[], myTradeArray: RawDataTradeItem[] } & WithTranslation & RouteComponentProps) => {\n        const [isAllTrade, setIsAllTrade] = useState(false)\n        const [value, setValue] = useState(1)\n        const handleChange = (event: any, newValue: any) => {\n            setValue(newValue)\n        }\n\n        const handleCheckboxChange = () => {\n            setIsAllTrade((flag: boolean) => !flag)\n        }\n\n        return (\n            <StyledTabsWrapper>\n                <StyledFormControlLabel\n                    control={<Checkbox checked={isAllTrade} size={'small'} checkedIcon={<CheckedIcon/>}\n                                       icon={<CheckBoxIcon/>} color={'default'} onChange={handleCheckboxChange}/>}\n                    label={t('labelTradePanelHideOtherPairs')}/>\n\n                <Tabs value={value}\n                      onChange={handleChange}\n                      aria-label=\"tabs switch\">\n                    <Tab label={t('labelMyTrade')} {...applyProps(0)} />\n                    <Tab label={t('labelRecent')}   {...applyProps(1)} />\n                </Tabs>\n\n                <StylePaper marginTop={2}>\n                    {value === 0 ?  <TradeTable rawData={myTradeArray} /> : <TradeTable rawData={tradeArray}/> }\n                </StylePaper>\n\n            </StyledTabsWrapper>\n        )\n    }\n    ) as  (props: { tradeArray: RawDataTradeItem[], myTradeArray: RawDataTradeItem[] }) => JSX.Element;\n//)\n\nexport default TradePanel\n\n","import { toBig } from 'loopring-sdk'\n\nexport enum OrderHandling {\n    processed = 'processed',\n    no_such_order = 'no_such_order',\n    too_many_times = 'too_many_times',\n}\n\nexport const BIG10 = toBig(10)\n\n// export enum PriceChartType {\n//     h24 = '24hrs',\n//     w1 = '1week',\n//     all = 'all',\n// }\n","import store from '../../stores';\nimport { WalletMap } from '@loopring-web/component-lib/static-resource/index';\nimport * as fm from 'loopring-sdk';\nimport { fromWEI } from '../../utils/swap_calc_utils';\n\nexport const updateWallet = <C extends { [ key: string ]: any }>() => {\n    const {walletLayer2} = store.getState().walletLayer2;\n    const {tokenMap} = store.getState().tokenMap;\n    let walletMap: WalletMap<C> | undefined;\n    if (walletLayer2) {\n        walletMap = Reflect.ownKeys(walletLayer2).reduce((prev, item) => {\n            const {total, locked, pending: {withdraw}} = walletLayer2[ item as string ];\n            const countBig = fm.toBig(total).minus(fm.toBig(locked)).minus(fm.toBig(withdraw)).toString()\n            return {\n                ...prev, [ item ]: {\n                    belong: item,\n                    count: fromWEI(tokenMap, item, countBig),\n                }\n            }\n        }, {} as WalletMap<C>)\n    }\n\n    return {walletMap}\n}","export function coinPairInit({coinKey, _tradeCalcData, tokenMap, coinMap}: any) {\n    if (coinKey) {\n        const [_match, sell, buy] = coinKey.match(/(\\w+)-(\\w+)/i);\n        // @ts-ignore\n        if (sell && coinMap && coinMap[ sell ]) {\n            _tradeCalcData.coinSell = sell;\n        }// @ts-ignore\n        if (sell!==buy && buy && -1 !== tokenMap[ sell ].tradePairs.findIndex(ele => ele === buy)) {\n            _tradeCalcData.coinBuy = buy;\n            return _tradeCalcData\n        }\n        // else{\n        //     _tradeCalcData.coinBuy = tokenMap[ sell ].tradePairs[ 0 ];\n        // }\n    }\n    if (!_tradeCalcData.coinSell || _tradeCalcData.coinSell === '') {\n        _tradeCalcData.coinSell = 'LRC';\n        _tradeCalcData.coinBuy = 'ETH';\n        return _tradeCalcData\n    }\n    if (!_tradeCalcData.coinBuy || _tradeCalcData.coinBuy === '' || _tradeCalcData.coinBuy === 'undefined') {\n        // @ts-ignore\n        if (tokenMap && tokenMap[ _tradeCalcData.coinSell ].tradePairs) {\n            _tradeCalcData.coinBuy = tokenMap[ _tradeCalcData.coinSell ].tradePairs[ 0 ]\n        } else {\n            _tradeCalcData.coinSell = 'LRC';\n            _tradeCalcData.coinBuy = 'ETH';\n        }\n    }\n    return _tradeCalcData\n}","import { AmmMap } from '../../stores/Amm/AmmMap';\nimport { AmmPoolSnapshot, getBaseQuote, LoopringMap, TickerData, TokenInfo, TokenVolumeV3 } from 'loopring-sdk';\nimport { ammpoolAPI, exchangeAPI } from '../../stores/apis/api';\nimport * as fm from 'loopring-sdk';\nimport { BIG10 } from '../../defs/swap_defs';\nimport { CoinMap } from '@loopring-web/component-lib/static-resource/index';\nimport { getToken } from 'utils/swap_calc_utils';\n\nexport const pairDetailBlock = <C extends { [ key: string ]: any }, I extends { [ key: string ]: any }>({\n                                                                                                           coinKey,\n                                                                                                           ammKey,\n                                                                                                           ammMap\n                                                                                                       }: { coinKey: string, ammKey: string, ammMap: AmmMap<C, I> }): Promise<{\n    ammpoolsbalance: AmmPoolSnapshot, tickMap: LoopringMap<TickerData>\n}> => {\n    const exchangeApi = exchangeAPI();\n    const ammpoolApi = ammpoolAPI();\n    return new Promise((resolve, reject) => {\n        Promise.all([\n            ammpoolApi.getAmmPoolSnapshot({poolAddress: ammMap[ ammKey ].address}),\n            exchangeApi.getTicker({market: coinKey})])\n            // exchangeApi.getMarketTrades({market:coinKey})])\n            .then(([{raw_data}, {tickMap}]) => {\n                resolve({\n                    ammpoolsbalance: raw_data,\n                    tickMap,\n                })\n            })\n    })\n}\n\nexport const pairDetailDone = <C>({coinKey, market, ammpoolsbalance, tokenMap, _tradeCalcData, coinMap, marketCoins}:any)=>{\n    const {base, quote} = getBaseQuote(coinKey)\n\n    const baseToken: TokenInfo = getToken(tokenMap, base)\n    const quoteToken: TokenInfo = getToken(tokenMap, quote)\n\n    const poolBaseTokenVol: TokenVolumeV3 = ammpoolsbalance.pooled[0]\n    const quoteBaseTokenVol: TokenVolumeV3 = ammpoolsbalance.pooled[1]\n\n    let stob = 0\n\n    if (baseToken.tokenId === poolBaseTokenVol.tokenId && quoteToken.tokenId === quoteBaseTokenVol.tokenId) {\n        const baseVol = (fm.toBig(poolBaseTokenVol.volume).div(BIG10.pow(baseToken.decimals)))\n        const quoteVol = (fm.toBig(quoteBaseTokenVol.volume).div(BIG10.pow(quoteToken.decimals)))\n        stob = quoteVol.div(baseVol).toNumber()\n        console.log('1', base, poolBaseTokenVol, quote, quoteBaseTokenVol)\n    } else if (baseToken.tokenId === quoteBaseTokenVol.tokenId && quoteToken.tokenId === poolBaseTokenVol.tokenId) {\n        const quoteVol = (fm.toBig(quoteBaseTokenVol.volume).div(BIG10.pow(baseToken.decimals)))\n        const baseVol = (fm.toBig(poolBaseTokenVol.volume).div(BIG10.pow(quoteToken.decimals)))\n        stob = baseVol.div(quoteVol).toNumber()\n        console.log('2', base, poolBaseTokenVol, quote, quoteBaseTokenVol)\n    } else {\n        throw Error('no support base/quote pair!')\n    }\n\n    _tradeCalcData.StoB = stob;\n    _tradeCalcData.BtoS = 1 / (stob * 1.0);\n    _tradeCalcData.sellCoinInfoMap = coinMap && marketCoins?.reduce((prev: any, item: string | number) => {\n        return {...prev, [ item ]: coinMap[ item ]}\n    }, {} as CoinMap<C>)\n    _tradeCalcData.buyCoinInfoMap = coinMap && tokenMap && tokenMap[ _tradeCalcData.coinSell as string ].tradePairs?.reduce((prev: any, item: string | number) => {\n        return {...prev, [ item ]: coinMap[ item ]}\n    }, {} as CoinMap<C>);\n\n    return {\n        _tradeCalcData\n    }\n    //setPair();\n}","import { TickerData } from 'loopring-sdk';\nimport store from '../../stores';\nimport { FloatTag,TradeFloat } from '@loopring-web/component-lib/src/static-resource';\n\nexport const makeTickView = (tick: TickerData) => {\n    const {forex} = store.getState().system;\n\n    const price = !isNaN(tick.close) ? tick.close : 0\n\n    const floatTag = (isNaN(tick.close) || isNaN(tick.open))  || tick.open === tick.close ? FloatTag.none : \n        tick.close > tick.open ? FloatTag.increase : FloatTag.decrease\n\n    let _tradeFloat: Partial<TradeFloat> = {\n        percent: (tick.close - tick.open) / tick.open,\n        timeUnit: '24h',\n        priceYuan: price,\n        priceDollar: price,\n        floatTag,\n        reward: 0,\n        APY: 0,\n    }\n\n    return _tradeFloat;\n}\n","import { getBaseQuote, MarketTradeInfo, Side, UserTrade } from 'loopring-sdk';\nimport { RawDataTradeItem } from '@loopring-web/component-lib/components/tableList/tradeTable/TradeTable';\nimport store from '../../stores';\nimport { TradeTypes } from '@loopring-web/component-lib/static-resource/index';\nimport * as fm from 'loopring-sdk';\nimport { BIG10 } from '../../defs/swap_defs';\nimport { userAPI } from '../../stores/apis/api';\n\nexport  const getUserTrades = (marketKey: any) => {\n    const userApi = userAPI();\n    const {accountId,apiKey} = store.getState().account\n    return  userApi.getUserTrades({accountId}, apiKey).then((response: {\n        totalNum: any;\n        userTrades: UserTrade[];\n        raw_data: any;\n    }) => {\n        return  response.userTrades\n    })\n}\nexport const makeMarketArray = (coinKey: any, marketTrades: MarketTradeInfo[]) => {\n\n    const tradeArray: Array<Partial<RawDataTradeItem>> = []\n\n    marketTrades.forEach((item: MarketTradeInfo) => {\n        try {\n            const {base, quote} = getBaseQuote(item.market)\n            const {forex} = store.getState().system\n            const {currency} = store.getState().settings\n            const {tokenMap} = store.getState().tokenMap\n            if (tokenMap) {\n                const baseToken = tokenMap[ base as string ]\n                const quoteToken = tokenMap[ quote as string ]\n\n                tradeArray.push({\n                    side: item.side === Side.Sell ? TradeTypes.Sell : TradeTypes.Buy,\n                    amount: {\n                        from: {\n                            key: base as string,\n                            value: fm.toBig(item.volume).div(BIG10.pow(baseToken.decimals)).toNumber(),\n                        },\n                        to: {\n                            key: quote as string,\n                            value: fm.toBig(item.price).times(item.volume).div(BIG10.pow(quoteToken.decimals)).toNumber(),\n                        },\n                    },\n                    price: {\n                        key: '',\n                        value: fm.toBig(item.price).toNumber(),\n                    },\n                    fee: {\n                        key: '',\n                        value: fm.toBig(item.fee).div(BIG10.pow(quoteToken.decimals)).toNumber(),\n                    },\n                    time: parseInt(item.tradeTime.toString()),\n                })\n            }\n        } catch (error) {\n            //CATCHERROR:\n            console.log(error)\n            // new CustomError()\n        }\n\n    })\n    // console.log('tradeArray:', tradeArray)\n    return tradeArray;\n\n}\n","import { Box, Grid, } from '@material-ui/core'\nimport { WithTranslation, withTranslation } from 'react-i18next'\n// import { useSwapNew, } from './hook'\nimport BasicInfoPanel from './panel/BasicInfoPanel'\nimport TradePanel from './panel/TradePanel'\nimport styled from 'styled-components'\nimport { useSwapPage } from './hook';\nimport { SwapPanel } from '@loopring-web/component-lib'\nimport { useState } from 'react';\n\nconst FixedStyle = styled(Box)`\n  @media only screen and (min-height: 680px ) and (min-width:1024px){\n    position: fixed;\n  }\n`\n\nconst SwapPage = withTranslation('common')(({ ...rest }: WithTranslation) => {\n\n    // const { base, quote, tokens, market, poolAddress, swapProps } = useSwapNew()\n    //\n    // const props = { base, quote, tokens, market }\n    const {tradeCalcData,tradeData,tradeFloat,tradeArray, myTradeArray, marketArray, handleSwapPanelEvent,onSwapClick,pair,swapBtnI18nKey} = useSwapPage();\n\n    return <>\n        <Grid container marginRight={3} alignContent={'flex-start'} >\n            <BasicInfoPanel {...{ ...rest,\n                ...pair, marketArray,\n                tradeFloat, tradeArray }} />\n            <TradePanel tradeArray={tradeArray} myTradeArray={myTradeArray} />\n\n            {/**/}\n        </Grid>\n\n        <Box display={'flex'} style={{ minWidth: 'var(--swap-box-width)' }} >\n            <FixedStyle>\n                <SwapPanel tradeData={tradeData}\n                           tradeCalcData={tradeCalcData}\n                           onSwapClick={onSwapClick}\n                           swapBtnI18nKey={swapBtnI18nKey}\n                           // handleError={}\n                           {...{handleSwapPanelEvent,...rest}}\n                />\n            </FixedStyle>\n\n        </Box>\n\n    </>\n});\n\n\nexport default SwapPage\n","import { useRouteMatch } from 'react-router';\nimport { CoinInfo, IBData, TradeCalcData, TradeTypes } from '@loopring-web/component-lib/static-resource';\nimport React, { useCallback } from 'react';\nimport { exchangeAPI, userAPI } from '../../stores/apis/api';\nimport { useTokenMap } from '../../stores/token';\nimport * as fm from 'loopring-sdk';\nimport { getAccountArg, getBaseQuote, getExistedMarket, getTickerArg, MarketTradeInfo, Side, UserTrade } from 'loopring-sdk';\nimport { useAmmMap } from '../../stores/Amm/AmmMap';\nimport { RawDataTradeItem } from '@loopring-web/component-lib/components/tableList/tradeTable/TradeTable';\nimport { useWalletLayer2 } from '../../stores/walletLayer2';\nimport store from '../../stores';\nimport { CustomError, ErrorMap, TradeFloat } from '@loopring-web/component-lib/src/static-resource';\nimport { SwapTradeData, useOpenModals } from '@loopring-web/component-lib';\nimport { SwapData } from '@loopring-web/component-lib/components/panel/components/panel/SwapWrap/Interface';\nimport { SwapType } from '@loopring-web/component-lib/components/panel/Interface';\nimport { useAccount } from '../../stores/account/hook';\nimport { useCustomDCEffect } from '../../hooks/common/useCustomDCEffect';\nimport { accountStaticCallBack, fnType } from '../../hooks/help/connetStatusCallback';\nimport { useModals } from '../../hooks/modal/useModals';\nimport { updateWallet } from '../../hooks/help/updateWallet';\nimport { coinPairInit } from '../../hooks/help/coinPairInit';\nimport { pairDetailBlock, pairDetailDone } from '../../hooks/help/pairDetail';\nimport { makeTickView } from '../../hooks/help/makeTickView';\nimport { getUserTrades, makeMarketArray } from '../../hooks/help/marketTable';\n\n\n\n\nexport const useSwapPage = <C extends { [ key: string ]: any }>() => {\n    /*** api prepare ***/\n    const exchangeApi = exchangeAPI();\n    const match: any = useRouteMatch(\":symbol\")\n    const {coinMap, tokenMap, marketArray, marketCoins} = useTokenMap()\n    const {ammMap} = useAmmMap();\n    const {setShowConnect, setShowAccountInfo} = useOpenModals();\n    const {ShowDeposit} = useModals()\n    const {account} = useAccount()\n\n    const walletLayer2State = useWalletLayer2();\n\n    const [tradeData, setTradeData] = React.useState<SwapTradeData<IBData<C>> | undefined>(undefined);\n    const [tradeCalcData, setTradeCalcData] = React.useState<TradeCalcData<C> | undefined>(undefined);\n    const [tradeArray, setTradeArray] = React.useState<RawDataTradeItem[]>([]);\n    const [myTradeArray, setMyTradeArray] = React.useState<RawDataTradeItem[]>([]);\n    const [tradeFloat, setTradeFloat] = React.useState<TradeFloat | undefined>(undefined);\n    const [pair, setPair] = React.useState<{ coinAInfo: CoinInfo<C> | undefined, coinBInfo: CoinInfo<C> | undefined }>({\n        coinAInfo: undefined,\n        coinBInfo: undefined,\n    });\n    \n    // const [market, setMarket] = React.useState<string>('')\n    const [swapBtnI18nKey, setSwapBtnI18nKey] = React.useState<string>('swapBtn');\n\n\n\n    // web socket\n    // React.useEffect(() => {\n    //     store.dispatch(setTopics([getAccountArg(), getTickerArg('LRC-ETH')]))\n    // }, [])\n\n    //HIGH: get Router info\n    // const symbol = match?.params.symbol ?? undefined;\n    React.useEffect(() => {\n        const symbol = match?.params.symbol ?? undefined;\n        resetSwap(symbol)\n    }, []);\n    //TODO tickMap\n    React.useEffect(() => {\n    }, [])\n\n    //HIGH: effect by wallet state update\n    React.useEffect(() => {\n        switch (walletLayer2State.status) {\n            case \"ERROR\":\n                walletLayer2State.statusUnset();\n                // setState('ERROR')\n                //TODO: show error at button page show error  some retry dispath again\n                break;\n            case \"DONE\":\n                walletLayer2State.statusUnset();\n                const {walletMap} = updateWallet();\n                if (walletMap && tradeCalcData) {\n                    setTradeCalcData({...tradeCalcData, walletMap} as TradeCalcData<C>);\n                    setTradeData({\n                        sell: {\n                            belong: tradeCalcData.sellCoinInfoMap ? tradeCalcData.sellCoinInfoMap[ tradeCalcData.coinSell ]?.simpleName : undefined,\n                            balance: walletMap ? walletMap[ tradeCalcData.coinSell ]?.count : 0\n                        },\n                        // @ts-ignore\n                        buy: {\n                            belong: tradeCalcData.sellCoinInfoMap ? tradeCalcData.sellCoinInfoMap[ tradeCalcData.coinBuy ]?.simpleName : undefined,\n                            balance: walletMap ? walletMap[ tradeCalcData.coinBuy ]?.count : 0\n                        },\n                    } as SwapTradeData<IBData<C>>)\n\n\n                    let {\n                        amm,\n                        market\n                    } = getExistedMarket(marketArray, tradeCalcData.coinSell as string, tradeCalcData.coinBuy as string);\n                    getUserTrades(market).then((marketTrades)=>{\n                        let _myTradeArray  = makeMarketArray(market, marketTrades) as RawDataTradeItem[]\n                        setMyTradeArray(_myTradeArray?_myTradeArray:[])\n                    })\n                }\n                break;\n            default:\n                break;\n\n        }\n    }, [walletLayer2State.status,setMyTradeArray])\n\n    React.useEffect(() => {\n    }, [])\n\n    const btnArray: { [ key: number ]: [fn: (props: any) => any, args?: object] } = {\n        [ fnType.UNCONNNECTED ]: [\n            function () {\n                setSwapBtnI18nKey('labelConnectWallet')\n            }\n        ]\n        , [ fnType.DEFAULT ]: [\n            function () {\n                setSwapBtnI18nKey('depositTitleAndActive')\n            }\n        ]\n        , [ fnType.ACTIVATED ]: [\n            function () {\n                setSwapBtnI18nKey('swapBtn')\n            }\n        ]\n        , [ fnType.LOCKED ]: [\n            function () {\n                setSwapBtnI18nKey('labelUnLock')\n            }\n        ]\n    };\n    useCustomDCEffect(() => {\n        accountStaticCallBack(btnArray)\n    }, [account.status, btnArray])\n\n\n    const swapBtnClickArray: { [ key: number ]: [fn: (props: any) => any, args?: object] } = {\n        [ fnType.UNCONNNECTED ]: [\n            function () {\n                setShowConnect({isShow: true})\n            }\n        ]\n        , [ fnType.DEFAULT ]: [\n            function () {\n                ShowDeposit(true)\n            }\n        ]\n        , [ fnType.ACTIVATED ]: [\n            function () {\n                setSwapBtnI18nKey('swapBtn')\n            }\n        ]\n        , [ fnType.LOCKED ]: [\n            function () {\n                setShowAccountInfo({isShow: true})\n            }\n        ]\n    };\n    const onSwapClick = ({sell, buy, slippage}: SwapTradeData<IBData<C>>) => {\n        accountStaticCallBack(swapBtnClickArray)\n        // onSwap()\n    }\n    const handleSwapPanelEvent = async (swapData: SwapData<SwapTradeData<IBData<C>>>, switchType: any): Promise<void> => {\n        //TODO setMarket(market);\n\n        const {tradeData} = swapData\n        return new Promise((resolve) => {\n            switch (switchType) {\n                case SwapType.SEll_CLICK:\n                    break\n                case SwapType.BUY_CLICK:\n                    break\n                case SwapType.SELL_SELECTED:\n                    resetSwap(`${tradeData.sell.belong}-${tradeData.buy.belong}`, 'sell', tradeData)\n                    break\n                case SwapType.BUY_SELECTED:\n                    resetSwap(`${tradeData.sell.belong}-${tradeData.buy.belong}`, 'buy', tradeData)\n                    break\n                case SwapType.EXCHANGE_CLICK:\n                    resetSwap(`${tradeData.sell.belong}-${tradeData.buy.belong}`)\n                    break\n                default:\n                    break\n            }\n\n            resolve(undefined)\n        })\n    }\n    const calculateTradeData = (type: 'sell' | 'buy', _tradeData: SwapTradeData<IBData<C>>): { _tradeCalcData: TradeCalcData<C>, _tradeData: SwapTradeData<IBData<C>> } => {\n        //if(`${pair.coinAInfo?.simpleName}-${pair.coinBInfo?.simpleName}` === coinKey)\n        if (_tradeData[ type ].tradeValue && tradeCalcData) {\n            type === 'sell' ? _tradeData[ 'buy' ].tradeValue = fm.toBig(_tradeData[ 'sell' ].tradeValue).times(tradeCalcData.StoB).toNumber()\n                : _tradeData[ 'sell' ].tradeValue = fm.toBig(_tradeData[ 'buy' ].tradeValue).times(tradeCalcData.BtoS).toNumber()\n        }\n        //TODO: renew  tradeCalcData\n        let _tradeCalcData = {...tradeCalcData} as TradeCalcData<C>;\n        return {_tradeData, _tradeCalcData}\n    }\n\n    const resetSwap = async (coinKey: any, type?: 'sell' | 'buy', _tradeData?: SwapTradeData<IBData<C>>) => {\n        if (tradeCalcData\n            && coinKey === `${tradeCalcData.coinSell}-${tradeCalcData.coinBuy}`\n            && _tradeData\n            && type\n            && (!tradeData || (tradeData[ type ].tradeValue !== _tradeData[ type ].tradeValue))) {\n            const {_tradeData: td, _tradeCalcData} = calculateTradeData(type, _tradeData)\n            setTradeData(td)\n            setTradeCalcData(_tradeCalcData)\n\n        } else {\n            let _tradeFloat: Partial<TradeFloat> = {}\n            let _tradeArray: Array<Partial<RawDataTradeItem>> | undefined = undefined;\n            let _tradeCalcData: Partial<TradeCalcData<C>> = coinPairInit({coinKey, _tradeCalcData:{}, tokenMap, coinMap})\n            let {\n                amm,\n                market\n            } = getExistedMarket(marketArray, _tradeCalcData.coinSell as string, _tradeCalcData.coinBuy as string);\n            const [,coinA,coinB] = market.match(/(\\w+)-(\\w+)/i)\n\n            setTradeCalcData({...tradeCalcData, ..._tradeCalcData} as TradeCalcData<C>);\n            if (coinMap) {\n                setPair({\n                    coinAInfo: coinMap[ coinA ],\n                    coinBInfo: coinMap[ coinB ],\n                })\n            }\n            if (walletLayer2State.walletLayer2) {\n                const {walletMap} = updateWallet();\n                _tradeCalcData.walletMap = walletMap;\n                getUserTrades(market).then((marketTrades)=>{\n                    let _myTradeArray = makeMarketArray(market, marketTrades) as RawDataTradeItem[]\n                    setMyTradeArray(_myTradeArray?_myTradeArray:[])\n                })\n            }\n            let apiList = [];\n            //TODO wallet saga done\n            if (marketArray && amm && market && ammMap) {\n                // let pairPromise =  usePairTitleBlock({market})\n                apiList = [\n                    exchangeApi.getMarketTrades({market}),\n                    pairDetailBlock({coinKey: market, ammKey: amm, ammMap})\n                ];\n                //HiGH: this need add websocket to update infr ticker ammpoolsbalace\n                // @ts-ignore\n                Promise.all([...apiList]).then(\n                    ([{marketTrades}, {ammpoolsbalance, tickMap}]: any[]) => {\n                        if (tokenMap) {\n                            let {_tradeCalcData: _td} = pairDetailDone({\n                                coinKey:`${_tradeCalcData.coinSell}-${_tradeCalcData.coinBuy}`,\n                                market,\n                                ammpoolsbalance,\n                                tokenMap,\n                                _tradeCalcData,\n                                coinMap,\n                                marketCoins\n                            })\n                            _tradeCalcData = _td;\n                            _tradeFloat = makeTickView(tickMap[ market ])\n                            _tradeArray = makeMarketArray(market, marketTrades)\n                            // @ts-ignore\n                            setTradeCalcData(_tradeCalcData as TradeCalcData<C>);\n                            // @ts-ignore\n                            setTradeFloat(_tradeFloat);\n                            setTradeArray(_tradeArray as RawDataTradeItem[])\n                            // setPair(_pair)\n                            setTradeData({\n                                sell: {\n                                    belong: _tradeCalcData.sellCoinInfoMap ? _tradeCalcData.sellCoinInfoMap[ _tradeCalcData.coinSell ]?.simpleName : undefined,\n                                    balance: _tradeCalcData.walletMap ? _tradeCalcData.walletMap[ _tradeCalcData.coinSell ]?.count : 0\n                                },\n                                // @ts-ignore\n                                buy: {\n                                    belong: _tradeCalcData.sellCoinInfoMap ? _tradeCalcData.sellCoinInfoMap[ _tradeCalcData.coinBuy ]?.simpleName : undefined,\n                                    balance: _tradeCalcData.walletMap ? _tradeCalcData.walletMap[ _tradeCalcData.coinBuy ]?.count : 0\n                                },\n                            } as SwapTradeData<IBData<C>>)\n                        }\n\n\n                    }).catch((error) => {\n                    throw new CustomError({...ErrorMap.TRADE_LITE_SET_PAIR_ERROR, options: error})\n                    //TODO solve error\n                })\n\n            }\n        }\n\n    }\n    return {\n        tradeCalcData,\n        tradeFloat,\n        tradeArray,\n        myTradeArray,\n        tradeData,\n        pair,\n        marketArray,\n        onSwapClick,\n        swapBtnI18nKey,\n        handleSwapPanelEvent\n    }\n\n}\n","import { useMemo, } from \"react\"\n\nimport { useActiveWeb3React } from \"../web3/useWeb3\"\n\nimport { WsAPI, ExchangeAPI, AmmpoolAPI, UserAPI, DEFAULT_TIMEOUT, } from 'loopring-sdk'\n\nfunction useApi(ApiClass: any, timeout = DEFAULT_TIMEOUT) {\n\n  const { chainId, active, } = useActiveWeb3React()\n\n    const genApi = () => {\n        if (!active || !chainId) {\n            return undefined\n        }\n\n        return new ApiClass(chainId, timeout)\n    }\n\n    const api = useMemo(genApi, [ApiClass, chainId, active, timeout])\n\n    return api\n}\n\nexport function useWsAPI() {\n    return useApi(WsAPI) as WsAPI\n}\n\nexport function useExchangeAPI() {\n    return useApi(ExchangeAPI) as ExchangeAPI\n}\n\nexport function useAmmpoolAPI() {\n    return useApi(AmmpoolAPI) as AmmpoolAPI\n}\n\nexport function useUserAPI() {\n    return useApi(UserAPI) as UserAPI\n}\n","import { useCallback, useMemo, useState, useRef, useEffect } from 'react'\n\nimport { useActiveWeb3React } from '../web3/useWeb3'\nimport { useWsAPI, } from './useApi2'\n\nimport { ChainId, getAccountArg, getCandlestickArg, \n    getAmmpoolArg, getTickerArg, WsProps } from 'loopring-sdk'\n\nconst stateArr = [\n    { key: 0, value: 'Connecting' },\n    { key: 1, value: 'Connected' },\n    { key: 2, value: 'Closing' },\n    { key: 3, value: 'Closed' }\n]\n\nexport const useWebsocket = ({ topics, verify, needApiKey, apiKey, }: { topics: any, needApiKey: boolean, apiKey: string|undefined, verify: boolean, }) => {\n    const ws = useRef<WebSocket | null>(null)\n    const [wsData, setMessage] = useState<any>(undefined)\n    const [readyState, setReadyState] = useState({ key: 0, value: 'Connecting' })\n\n    const { chainId, } = useActiveWeb3React()\n\n    const api = useWsAPI()\n\n    const creatWebSocket = () => {\n\n        if (!api || !chainId) {\n            return\n        }\n\n        api.getWsKey().then((wsApiKey: any) => {\n            let basePath: string = 'wss://ws.'\n            switch (chainId) {\n                case ChainId.MAINNET:\n                    basePath += process.env.REACT_APP_API_URL\n                    break\n                default:\n                    basePath += process.env.REACT_APP_API_URL_UAT\n                    basePath = 'wss://ws.uat2.loopring.io'\n            }\n\n            basePath += '/v3/ws?wsApiKey=' + wsApiKey\n    \n            try {\n                ws.current = new WebSocket(basePath)\n\n                const subTopics = (topics: any) => {\n                    let data: any = {\n                        op: 'sub',\n                        unsubscribeAll: 'true',\n                        topics: topics,\n                    }\n            \n                    if (needApiKey && apiKey) {\n                        data.apiKey = apiKey\n                    }\n            \n                    const flat_txt = JSON.stringify(data)\n                    sendMessage(flat_txt)\n                }\n    \n                ws.current.onopen = (_e) => {\n                    setReadyState(stateArr[ws.current?.readyState ?? 0])\n                    subTopics(topics)\n                }\n                \n                ws.current.onclose = (e) => {\n                    setReadyState(stateArr[ws.current?.readyState ?? 0])\n                }\n                \n                ws.current.onerror = (e) => {\n                    setReadyState(stateArr[ws.current?.readyState ?? 0])\n                }\n    \n                ws.current.onmessage = (e) => {\n                    setMessage(e.data)\n                }\n            } catch (error) {\n                console.log(error)\n            }\n\n        })\n\n        \n    }\n\n    const webSocketInit = () => {\n        if (!ws.current || ws.current.readyState === 3) {\n            creatWebSocket()\n        }\n    }\n\n    const closeWebSocket = () => {\n        ws.current?.close()\n    }\n\n    const sendMessage = (msg: any) => {\n        ws.current?.send(msg)\n    }\n\n    const reconnect = () => {\n        try {\n            closeWebSocket()\n            ws.current = null\n            creatWebSocket()\n        } catch (e) {\n            console.log(e)\n        }\n    }\n\n    useEffect(() => {\n\n        verify && webSocketInit()\n        return () => {\n            ws.current?.close()\n        }\n    }, [ws, verify])\n\n    return {\n        wsData,\n        readyState,\n        sendMessage,\n        closeWebSocket,\n        reconnect,\n    }\n}\n\nexport function useWs(topics: any, needApiKey: boolean, apiKey?: string, verify: boolean = true) {\n    const [socketData, setSocketData] = useState({})\n\n    const [isLocalPage, setIsLocalPage] = useState<boolean>(true)\n\n    useEffect(() => {\n\n        let mounted = true\n\n        const checkIsLocalPage = () => {\n            console.log('enter checkIsLocalPage')\n            document.addEventListener('visibilitychange', function () {\n                // page invisible trigger!\n                let isLocalPage = true\n                if (document.visibilityState === 'hidden') {\n                    isLocalPage = false\n                }\n                if (mounted) {\n                    setIsLocalPage(isLocalPage)\n                } else {\n                    console.log('unmounted! dont setIsLocalPage!')\n                }\n            })\n        }\n\n        checkIsLocalPage()\n\n        return () => {\n            mounted = false\n        }\n\n    }, [])\n\n    const { wsData, readyState, closeWebSocket, reconnect, sendMessage, } = useWebsocket({\n        topics,\n        apiKey,\n        needApiKey,\n        verify,\n    })\n\n    useEffect(() => {\n    \n        if (needApiKey && !apiKey) {\n            return\n        }\n\n        if (!verify) {\n            return\n        }\n\n        if (wsData === 'ping') {\n            try {\n                sendMessage('pong')\n            } catch (err) {\n                console.log(err)\n            }\n        } else {\n            if (wsData) {\n                setSocketData(JSON.parse(wsData))\n            }\n        }\n        \n        // if closed and is currente page then, reconnect.\n        if (readyState.key === 3 && isLocalPage) {\n            reconnect()\n        }\n        // if not current page, close it.\n        if (!isLocalPage) {\n            closeWebSocket()\n        }\n\n    }, [wsData, readyState, isLocalPage, verify, apiKey])\n\n    return {\n        socketData,\n    }\n}\n\nexport function useAmmpoolWs(apiKey: string) {\n\n    let topics: any[] = []\n\n    topics.push(getTickerArg('LRC-ETH'))\n\n    topics.push(getAmmpoolArg('0x18920d6E6Fb7EbE057a4DD9260D6D95845c95036'))\n\n    const needApiKey = false\n\n    const { socketData } = useWs(topics, needApiKey, apiKey)\n\n    return {\n        socketData,\n    }\n\n}\n","import { useRef } from 'react'\n\n// import Qrcode from 'components/qrcodes/Qrcode'\n\n\nimport { useAccount } from 'stores/account/hook'\n\nimport { useGetExchangeInfo, useGetGas, useGetMarkets, useGetTokens } from 'hooks/exchange/useExchangeAPI'\n\nimport { useAmmpoolWs } from 'hooks/common/useWebsocketApi'\n\nconst DebugPage = () => {\n\n  const inputRef = useRef<HTMLInputElement>(null)\n\n  const { account, isNoAccount, apiKey } = useAccount()\n\n  const {socketData} = useAmmpoolWs(apiKey)\n\n  const { markets } = useGetMarkets()\n\n  const { exchangeInfo } = useGetExchangeInfo()\n\n  const { tokens } = useGetTokens()\n\n  const { gas } = useGetGas()\n\n  const gasPrice = gas?.data\n\n  console.log('account:', account)\n  console.log('exchangeInfo:', exchangeInfo)\n  console.log('tokens:', tokens)\n\n  const showAddr = account.accAddr ? account.accAddr : ''\n\n  return (\n    <div>\n      Debug\n      <div>account:{JSON.stringify(account)}</div>\n      <div>eddsaKey:{account.eddsaKey}</div>\n      <div>wsdata: {JSON.stringify(socketData)}</div>\n      <div>----------------------------</div>\n      <div>markets:{JSON.stringify(markets)}</div>\n      <div>----------------------------</div>\n      <div>depositAddress:{exchangeInfo?.depositAddress}</div>\n      <div>exchangeAddress:{exchangeInfo?.exchangeAddress}</div>\n      <div>----------------------------</div>\n      {/*<div>exchangeInfo:{JSON.stringify(exchangeInfo)}</div>\n      <div>----------------------------</div>*/}\n      <div>tokens:{JSON.stringify(tokens)}</div>\n      <div>----------------------------</div>\n\n      {/*{isNoAccount() && <Qrcode value={showAddr} size={300} />}*/}\n      {/*<input type='input' ref={inputRef} width=\"150px\" />*/}\n      {/*<DepositBtn onClick={deposit} />*/}\n    </div>\n  )\n\n}\n\nexport default DebugPage\n","import { useState } from 'react'\n\nimport { useAmmpoolAPI, useUserAPI } from \"hooks/exchange/useApi\"\nimport { useCustomDCEffect } from 'hooks/common/useCustomDCEffect'\nimport { useAccount } from 'stores/account/hook'\nimport { TransactionStatus, RawDataTransactionItem } from '@loopring-web/component-lib'\n\nimport { TxStatus } from 'loopring-sdk'\nimport { TransactionTradeTypes } from '@loopring-web/component-lib/components/tableList/transactionsTable/Interface';\n\nexport function useGetTxs() {\n\n    const { accountId, apiKey } = useAccount()\n\n    const userApi = useUserAPI()\n\n    const [txs, setTxs] = useState<RawDataTransactionItem[]>()\n\n    useCustomDCEffect(async() => {\n\n        if (!userApi || !accountId || !apiKey) {\n            return\n        }\n\n        const txs = await userApi.getUserTranferList({ accountId }, apiKey)\n\n        let tmpTx: RawDataTransactionItem[] = []\n\n        txs.userTransfers.forEach((item: any, index: number) => {\n            tmpTx.push({from: {\n                    address: item.senderAddress,\n                    env: ''\n                },\n                to: {\n                    address: item.receiverAddress,\n                    env: ''\n                },\n                amount: item.amount,\n                fee: {\n                    unit: item.feeTokenSymbol,\n                    value: item.feeAmount\n                },\n                memo: item.symbol,\n                time: item.timestamp,\n                txnHash: item.hash,\n                status: item.status,\n                token:item.token,\n                tradeType:TransactionTradeTypes.allTypes,\n            })\n        })\n\n        setTxs(tmpTx)\n\n    }, [accountId, apiKey, userApi])\n\n    return {\n        txs,\n    }\n}\n","import React from 'react'\nimport { TransactionTable } from '@loopring-web/component-lib'\nimport { WithTranslation, withTranslation } from 'react-i18next'\nimport { Box, Paper } from '@material-ui/core'\nimport styled from '@emotion/styled'\nimport { useGetTxs } from './hooks'\n\nconst StylePaper = styled(Box)`\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  height: 100%;\n  flex: 1;\n  background-color: ${({ theme }) => theme.colorBase.background().default};\n  border-radius: ${({ theme }) => theme.unit}px;\n  padding: 20px;\n\n  .title {\n    font-family: Gilroy-Medium;\n    font-size: ${({ theme }) => theme.unit * 3}px;\n    line-height: 19px;\n  }\n\n  .tableWrapper {\n    display: flex;\n    margin-top: 20px;\n    border: 1px solid ${({ theme }) => theme.colorBase.borderColor};\n    border-radius: ${({ theme }) => theme.unit}px;\n    padding: 26px;\n    flex: 1;\n    \n    .rdg {\n      flex: 1;\n    }\n  }\n` as typeof Paper;\n\nconst TxPanel = withTranslation('common')((rest:WithTranslation<'common'>) => {\n    const container = React.useRef(null);\n    const [pageSize, setPageSize] = React.useState(10);\n    React.useEffect(() => {\n        // @ts-ignore\n        let height = container?.current?.offsetHeight;\n        if (height) {\n            setPageSize(Math.floor((height - 120) / 44) - 2);\n        }\n    }, [container, pageSize]);\n    const { txs } = useGetTxs()\n\n    const txList = txs !== undefined ? txs: []\n    \n    return (\n        <StylePaper ref={container}>\n            <div className=\"title\">Transactions</div>\n            <div className=\"tableWrapper\">\n                <TransactionTable {...{\n                  rawData: txList,\n                  pagination: {\n                    pageSize: pageSize\n                  },\n                  ...rest\n                }} />\n            </div>\n        </StylePaper>\n    )\n})\n\nexport default TxPanel\n","import { useState, useEffect, useRef } from 'react'\nimport { WithTranslation, withTranslation } from 'react-i18next'\nimport { PriceTag } from '@loopring-web/component-lib/static-resource'\nimport { Box, Paper, Typography } from '@material-ui/core'\nimport styled from '@emotion/styled'\nimport { AssetTitleProps, AssetTitle, AssetsTable, DoughnutChart, ScaleAreaChart, ChartType, ToggleButtonGroup } from '@loopring-web/component-lib'\nimport { useModals } from 'hooks/modal/useModals'\nimport { useGetUserBalances } from 'hooks/exchange/useUserAPI'\nimport { useGetTokens } from 'hooks/exchange/useExchangeAPI'\n\nconst StylePaper = styled(Box)`\n    width: 100%;\n    height: 100%;\n    flex: 1;\n    background-color: ${({ theme }) => theme.colorBase.background().default};\n    border-radius: ${({ theme }) => theme.unit}px;\n    padding: 20px;\n\n    .title {\n        font-family: Gilroy-Medium;\n        font-size: ${({ theme }) => theme.unit * 3}px;\n        line-height: 19px;\n    }\n\n    .tableWrapper {\n        margin-top: ${({ theme }) => theme.unit * 1.5}px;\n        border: 1px solid ${({ theme }) => theme.colorBase.borderColor};\n        border-radius: ${({ theme }) => theme.unit}px;\n        padding: 26px;\n    }\n` as typeof Box;\n\nconst StyledChartWrapper = styled(Box)`\n    height: 225px;\n    > div {\n        position: relative;\n        width: calc(50% - 6px);\n        height: 100%;\n        background-color: ${({ theme }) => theme.colorBase.background().default};\n        border: 1px solid ${({ theme }) => theme.colorBase.borderColor};\n        border-radius: ${({ theme }) => theme.unit}px;\n        padding: ${({ theme }) => theme.unit * 2.5}px ${({ theme }) => theme.unit * 3}px;\n    }\n`\n\nconst StyledBtnGroupWrapper = styled(Box)`\n    position: absolute;\n    z-index: 10000;\n    right: ${({ theme }) => theme.unit * 3}px;\n    bottom: ${({ theme }) => theme.unit * 2.5}px;\n`\n\nconst toggleData = [\n    {value: '24 H', key: '24 H'},\n    {value: '1 W', key: '1 W'},\n    {value: 'ALL', key: 'ALL'},\n]\n\nconst DoughnutData = [\n    {\n        name: 'LP Token',\n        value: 12898.0\n    },\n    {\n        name: 'LRC',\n        value: 12898.50\n    },\n    {\n        name: 'ETH',\n        value: 36547.00\n    },\n    {\n        name: 'DOT',\n        value: 23898.09\n    },\n    {\n        name: 'BTC',\n        value: 3489\n    },\n    {\n        name: 'CRV',\n        value: 180.09\n    },\n    {\n        name: 'ALICE',\n        value: 150.7\n    },\n    {\n        name: 'LINA',\n        value: 230.5\n    },\n]\n\nconst testTrendData:any = [\n    {\n        timeStamp: 150,\n        low: Math.random() + 1,\n        high: Math.random() + 6,\n        open: Math.random() + 3,\n        close: Math.random() + 4,\n        volume: (Math.random() + 4) * 1500,\n    },\n    {\n        timeStamp: 160,\n        low: Math.random() + 1,\n        high: Math.random() + 6,\n        open: Math.random() + 3,\n        close: Math.random() + 4,\n        volume: (Math.random() + 4) * 1500,\n    },\n    {\n        timeStamp: 170,\n        low: Math.random() + 1,\n        high: Math.random() + 6,\n        open: Math.random() + 3,\n        close: Math.random() + 4,\n        volume: (Math.random() + 4) * 1500,\n    },\n    {\n        timeStamp: 180,\n        low: Math.random() + 1,\n        high: Math.random() + 6,\n        open: Math.random() + 3,\n        close: Math.random() + 4,\n        volume: (Math.random() + 4) * 1500,\n    },\n    {\n        timeStamp: 190,\n        low: Math.random() + 1,\n        high: Math.random() + 6,\n        open: Math.random() + 3,\n        close: Math.random() + 4,\n        volume: (Math.random() + 4) * 1500,\n    },\n    {\n        timeStamp: 200,\n        low: Math.random() + 1,\n        high: Math.random() + 6,\n        open: Math.random() + 3,\n        close: Math.random() + 4,\n        volume: (Math.random() + 4) * 1500,\n    },\n    {\n        timeStamp: 210,\n        low: Math.random() + 1,\n        high: Math.random() + 6,\n        open: Math.random() + 3,\n        close: Math.random() + 4,\n        volume: (Math.random() + 4) * 1500,\n    },\n    {\n        timeStamp: 220,\n        low: Math.random() + 1,\n        high: Math.random() + 6,\n        open: Math.random() + 3,\n        close: Math.random() + 4,\n        volume: (Math.random() + 4) * 1500,\n    },\n    {\n        timeStamp: 230,\n        low: Math.random() + 1,\n        high: Math.random() + 6,\n        open: Math.random() + 3,\n        close: Math.random() + 4,\n        volume: (Math.random() + 4) * 1500,\n    },\n    {\n        timeStamp: 240,\n        low: Math.random() + 1,\n        high: Math.random() + 6,\n        open: Math.random() + 3,\n        close: Math.random() + 4,\n        volume: (Math.random() + 4) * 1500,\n    },\n]\n\nconst AssetPanel = withTranslation('common')(({t,...rest}: WithTranslation) => {\n    const container = useRef(null);\n    const [pageSize, setPageSize] = useState(10);\n    \n    const [chartPeriod, setChartPeriod] = useState('24 H')\n\n    useEffect(() => {\n        // @ts-ignore\n        let height = container?.current?.offsetHeight;\n        if (height) {\n            setPageSize(Math.floor((height - 120) / 44) - 1);\n        }\n    }, [container, pageSize]);\n\n    const {\n        ShowDeposit,\n        ShowTransfer,\n        ShowWithdraw,\n        ShowResetAccount,\n    } = useModals()\n\n    const onShowDeposit = () => {\n        ShowDeposit(true)\n    }\n\n    const onShowTransfer = () => {\n        ShowTransfer(true)\n    }\n\n    const onShowWithdraw = () => {\n        ShowWithdraw(true)\n    }\n\n    const AssetTitleProps: AssetTitleProps = {\n        assetInfo: {\n            totalAsset: 123456.789,\n            priceTag: PriceTag.Dollar,\n        },\n        onShowDeposit,\n        onShowTransfer,\n        onShowWithdraw,\n    }\n\n    const { tokens: tokensAll } = useGetTokens()\n\n    const tokens = tokensAll?.tokenSymbolMap\n\n    const { balances } = useGetUserBalances(tokens)\n\n    return (\n        <>\n            <Box>\n                <AssetTitle  {...{\n                    t,\n                    ...rest,\n                    ...AssetTitleProps\n                }} />\n            </Box>\n\n            {/*<div className=\"title\">{t('labelAssetsTitle')}</div>*/}\n\n            <StyledChartWrapper display={'flex'} justifyContent={'space-between'} alignItems={'center'} marginTop={2}>\n                <Paper component={'div'}>\n                    <Typography component=\"span\" color=\"textSecondary\" variant=\"body1\">Asset Distribution</Typography>\n                    <DoughnutChart data={DoughnutData} />\n                </Paper>\n                <Paper component={'div'}>\n                    <Typography component=\"span\" color=\"textSecondary\" variant=\"body1\">Total Assets</Typography>\n                    <ScaleAreaChart type={ChartType.Trend} data={testTrendData} />\n                    <StyledBtnGroupWrapper>\n                        <ToggleButtonGroup exclusive size=\"small\" {...{...rest, t, data: toggleData, value: chartPeriod, setValue: setChartPeriod}} />\n                    </StyledBtnGroupWrapper>\n                </Paper>\n            </StyledChartWrapper>\n            <StylePaper marginTop={2}>\n                <div className=\"tableWrapper\" ref={container}>\n                    <AssetsTable {...{\n                        rawData: [],\n                        pagination: {\n                            pageSize: pageSize\n                        }\n                    }} />\n                </div>\n            </StylePaper>\n        </>\n    )\n})\n\nexport default AssetPanel\n","import React from 'react'\nimport { TradeTable, TradeFilterTable, } from '@loopring-web/component-lib'\nimport { WithTranslation, withTranslation } from 'react-i18next'\nimport styled from '@emotion/styled'\nimport { Box, Paper } from '@material-ui/core'\n\nconst StylePaper = styled(Box)`\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  height: 100%;\n  flex: 1;\n  background-color: ${({ theme }) => theme.colorBase.background().default};\n  border-radius: ${({ theme }) => theme.unit}px;\n  padding: 20px;\n\n  .title {\n    font-family: Gilroy-Medium;\n    font-size: ${({ theme }) => theme.unit * 3}px;\n    line-height: 19px;\n  }\n\n  .tableWrapper {\n    display: flex;\n    flex: 1;\n    margin-top: 20px;\n    border: 1px solid ${({ theme }) => theme.colorBase.borderColor};\n    border-radius: ${({ theme }) => theme.unit}px;\n    padding: 26px;\n\n    .rdg {\n      flex: 1;\n    }\n  }\n` as typeof Paper;\n\nconst TradePanel = withTranslation('common')((rest:WithTranslation<'common'>) => {\n    const container = React.useRef(null);\n    const [pageSize, setPageSize] = React.useState(10);\n    React.useEffect(() => {\n        // @ts-ignore\n        let height = container?.current?.offsetHeight;\n        if (height) {\n            setPageSize(Math.floor((height - 120) / 44) - 2);\n        }\n    }, [container, pageSize]);\n\n    const txList: any[] = []\n\n    return (\n        <>\n            <StylePaper ref={container}>\n                <div className=\"title\">Trades</div>\n                <div className=\"tableWrapper\">\n                    <TradeFilterTable {...{\n                      rawData: txList,\n                      pagination: {\n                        pageSize: pageSize\n                      },\n                      ...rest}}/>\n                </div>\n            </StylePaper>\n        </>\n    )\n})\n\nexport default TradePanel\n","\nimport React from 'react'\nimport { OrderHistoryTable } from '@loopring-web/component-lib'\nimport { WithTranslation, withTranslation } from 'react-i18next'\nimport { Box, Paper } from '@material-ui/core'\nimport styled from '@emotion/styled'\nimport { useGetTxs } from '../TxPanel/hooks'\n\nconst StylePaper = styled(Box)`\n    display: flex;\n    flex-direction: column;\n    width: 100%;\n    height: 100%;\n    flex: 1;\n    background-color: ${({ theme }) => theme.colorBase.background().default};\n    border-radius: ${({ theme }) => theme.unit}px;\n    padding: 20px;\n\n    .title {\n        font-family: Gilroy-Medium;\n        font-size: ${({ theme }) => theme.unit * 3}px;\n        line-height: 19px;\n    }\n\n    .tableWrapper {\n        display: flex;\n        flex: 1;\n        margin-top: 20px;\n        border: 1px solid ${({ theme }) => theme.colorBase.borderColor};\n        border-radius: ${({ theme }) => theme.unit}px;\n        padding: 26px;\n\n        .rdg {\n            flex: 1;\n        }\n    }\n` as typeof Paper;\n\nconst OrderPanel = withTranslation('common')((rest: WithTranslation) => {\n    const container = React.useRef(null);\n    const [pageSize, setPageSize] = React.useState(10);\n    React.useEffect(() => {\n        // @ts-ignore\n        let height = container?.current?.offsetHeight;\n        if (height) {\n            setPageSize(Math.floor((height - 120) / 44) - 2);\n        }\n    }, [container, pageSize]);\n\n    const { txs } = useGetTxs()\n\n    return (\n        <>\n            <StylePaper ref={container}>\n                <div className=\"title\">Order History</div>\n                <div className=\"tableWrapper\">\n                    <OrderHistoryTable {...{\n                        pagination: {\n                            pageSize: pageSize\n                        },\n                        rawData: [],\n                        ...rest\n                    }} />\n                </div>\n            </StylePaper>\n        </>\n    )\n})\n\nexport default OrderPanel\n","import styled from '@emotion/styled';\nimport { Box, Button, Divider, Grid, Switch, Typography } from '@material-ui/core';\nimport React from 'react';\nimport { UpColor, Currency, DropDownIcon } from '@loopring-web/component-lib/src/static-resource';\nimport {\n    BtnLanguage,\n    OutlineSelect,\n    OutlineSelectItem, QRCodePanel,\n    TypographyStrong, useSettings\n} from '@loopring-web/component-lib';\nimport { Trans, useTranslation, WithTranslation, withTranslation } from 'react-i18next';\nimport { useTheme } from '@emotion/react';\nimport { LanguageKeys } from '@loopring-web/component-lib/static-resource';\n\n// const MuiModalStyled = styled(MuiModal)`\n//   //background: ${({theme}) => theme.colorBase.background().secondary};\n//   // .MuiBackdrop-root{\n//   //   z-index: -1;\n//   //   background-color: ${({theme}) => theme.colorBase.background().outline};\n//   // }\n//   display: flex;\n//   align-items: center;\n//   justify-content: center;\n// ` as typeof MuiModal;\n// const BlockStyled = styled(Box)`\n//   ${({theme}) => theme.border.defaultFrame({c_key: 'blur', d_R: 1})};\n//   background: ${({theme}) => theme.colorBase.background().secondary};\n//   max-height: var(--panel-setting-height);\n//   max-width: var(--panel-setting-width);\n//   display: flex;\n//   justify-content: space-around;\n//   align-items: center;\n//   overflow: scroll;\n//   padding: ${({theme}) => theme.unit*8}px\n// `;\n\nconst StyledPaper = styled(Grid)`\n  width: 100%;\n  height: 100%;\n  background-color: ${({theme}) => theme.colorBase.background().default};\n  ${({theme}) => theme.border.defaultFrame({c_key: 'blur', d_R: 1})};\n`\n\nconst StyledSwitch = styled(Switch)(({theme}) => ({\n    \"& .Mui-checked\": {\n        color: theme.colorBase.textPrimary,\n        '& + .MuiSwitch-track.MuiSwitch-track': {\n            border: `solid ${theme.colorBase.success}`,\n        },\n        '& .MuiSwitch-thumb': {\n            backgroundColor: theme.colorBase.success,\n        }\n    },\n    '& .MuiSwitch-track': {\n        border: `solid ${theme.colorBase.error}`,\n        opacity: 1\n    },\n    '& .MuiSwitch-thumb': {\n        backgroundColor: theme.colorBase.error,\n    }\n}));\n\nexport const BtnCurrency = ({t, currency, label, handleChange}: any) => {\n    const [state, setState] = React.useState<string>(currency ? currency : Currency.dollar);\n    const _handleChange = React.useCallback((event: React.ChangeEvent<any>) => {\n        setState(event.target.value);\n        if (handleChange) {\n\n            handleChange(event.target.value)\n        }\n    }, [handleChange])\n    return <OutlineSelect aria-label={t(label)} IconComponent={DropDownIcon}\n                          labelId=\"language-selected\"\n                          id=\"language-selected\"\n                          value={state} autoWidth\n                          onChange={_handleChange}>\n        <OutlineSelectItem value={Currency.dollar}>$ {t('labelUSDollar')}</OutlineSelectItem>\n            <OutlineSelectItem value={Currency.yen}>¥ {t('labelCNYYuan')}</OutlineSelectItem>\n    </OutlineSelect>\n}\n\nconst StyledDivider = styled(Divider)`\n  margin: ${({theme}) => theme.unit}px 0 ${({theme}) => theme.unit}px 0px;\n`\nconst DividerBlock = styled(Divider)`\n  margin: 0;\n  flex: 1;\n  width: 1px;\n  height: ${({theme}) => theme.unit * 3}px;\n  background: ${({theme}) => theme.colorBase.focus};\n`\n\n\n\nexport const SettingPanel = withTranslation(['common', 'layout'])(({t,i18n, ...rest}: & WithTranslation) => {\n    const theme = useTheme();\n    const {setUpColor,setLanguage,setCurrency,currency,upColor} = useSettings()\n    const language = i18n.language;\n    const handleOnLanguageChange = (lang: LanguageKeys) => {\n        setLanguage(lang);\n        i18n.changeLanguage(lang);\n    }\n    const handleOnCurrencyChange = (value: any) => {\n        setCurrency(value);\n    }\n    const handleColorChange = (e:any) => {\n        if(e.target.checked){\n            setUpColor(UpColor.green) ;\n        }else{\n            setUpColor(UpColor.red);\n        }\n    }\n    return <Grid container direction={'column'} justifyContent={'space-between'} alignItems={'stretch'} flexWrap={'nowrap'}>\n        <Typography variant={'h4'} component={'h3'} marginY={1} paddingLeft={2}>{t('labelTitleSecurity')}</Typography>\n        <StyledPaper item xs={12} display={'flex'} flexDirection={'column'} marginBottom={2} paddingY={2}>\n            <Box component={'section'} display={'flex'} flexDirection={'column'}>\n                <Typography variant={'h5'} component={'h4'} paddingX={2}>{t('labelTitleResetL2Keypair')}</Typography>\n                <StyledDivider/>\n                <Grid container display={'flex'} flexDirection={'row'} justifyContent={'stretch'}\n                      alignItems={'flex-start'} paddingX={2} marginBottom={2}>\n                    <Grid item xs={8} display={'flex'} flexDirection={'column'}>\n                        <Typography variant={'body1'} component={'p'}>\n                            <Trans i18nKey=\"resetDescription\">\n                                Create a new signing key for layer-2 authentication (no backup needed). This will\n                                <TypographyStrong component={'span'}>cancel all your pending orders</TypographyStrong>.\n                            </Trans>\n                        </Typography>\n                    </Grid>\n                    <Grid item xs={4} display={'flex'} flexDirection={'column'} justifyContent={'space-evenly'}\n                          alignItems={'flex-end'} alignSelf={'stretch'}>\n                        <Button variant={'outlined'} size={'medium'} color={'primary'}>{t('labelBtnReset')}</Button>\n                    </Grid>\n                    <Grid item xs={12} display={'flex'} flexDirection={'row'} justifyContent={'flex-end'}\n                          alignItems={'center'} alignSelf={'stretch'}>\n                        <Typography variant={'body2'} component={'p'}\n                                    paddingTop={1}>{t('labelHadChangPassword', {passDay: '14 hours'})}</Typography>\n                    </Grid>\n\n                </Grid>\n            </Box>\n            <Box component={'section'} display={'flex'} flexDirection={'column'}>\n                <Typography variant={'h5'} component={'h4'} paddingX={2}>{t('labelTitleExportAccount')}</Typography>\n                <StyledDivider/>\n                <Grid container display={'flex'} flexDirection={'row'} justifyContent={'stretch'}\n                      alignItems={'flex-start'} paddingX={2} marginBottom={2}>\n                    <Grid item xs={7} display={'flex'} flexDirection={'column'}>\n                        <Typography variant={'body1'} component={'p'}>{t('descriptionExportAccount')}</Typography>\n                    </Grid>\n                    <Grid item xs={5} display={'flex'} flexDirection={'column'} justifyContent={'space-evenly'}\n                          alignItems={'flex-end'} alignSelf={'stretch'}>\n                        <Grid item> <Button variant={'outlined'} size={'medium'}\n                                            color={'primary'}>{t('labelBtnExportAccount')}</Button></Grid>\n                    </Grid>\n                </Grid>\n            </Box>\n        </StyledPaper>\n\n        <Typography variant={'h4'} component={'h3'} marginY={1} paddingLeft={2}>{t('labelTitlePreferences')}</Typography>\n        <StyledPaper item xs={12} display={'flex'} flexDirection={'column'} marginBottom={2} paddingY={2}>\n            <Box component={'section'} display={'flex'} flexDirection={'column'}>\n                {/*<Typography variant={'h5'} component={'h4'} paddingX={2}>{t('labelTitleLayout')}</Typography>*/}\n                {/*<StyledDivider/>*/}\n                <Grid container display={'flex'} flexDirection={'row'} justifyContent={'stretch'}\n                      alignItems={'flex-start'} paddingX={2} marginBottom={2}>\n                    <Grid item xs={7} display={'flex'} flexDirection={'column'}>\n                        <Typography variant={'body1'} component={'p'}>{t('labelLanguage')}</Typography>\n                    </Grid>\n                    <Grid item xs={5} display={'flex'} flexDirection={'column'} justifyContent={'space-evenly'}\n                          alignItems={'flex-end'} alignSelf={'stretch'}>\n                        <Grid item>\n                            <BtnLanguage {...{\n                                t, ...rest,\n                                language,\n                                label: 'languageSetting',\n                                handleChange: handleOnLanguageChange\n                            }}></BtnLanguage>\n                        </Grid>\n                    </Grid>\n                </Grid>\n                <Grid container display={'flex'} flexDirection={'row'} justifyContent={'stretch'}\n                      alignItems={'flex-start'} paddingX={2} marginBottom={2}>\n                    <Grid item xs={7} display={'flex'} flexDirection={'column'}>\n                        <Typography variant={'body1'} component={'p'}>{t('labelCurrency')}</Typography>\n                    </Grid>\n                    <Grid item xs={5} display={'flex'} flexDirection={'column'} justifyContent={'space-evenly'}\n                          alignItems={'flex-end'} alignSelf={'stretch'}>\n                        <Grid item>\n                            <BtnCurrency {...{\n                                t, ...rest,\n                                currency,\n                                label: 'currencySetting',\n                                handleChange: handleOnCurrencyChange\n                            }}></BtnCurrency>\n\n                        </Grid>\n                    </Grid>\n                </Grid>\n                <Grid container display={'flex'} flexDirection={'row'} justifyContent={'stretch'}\n                      alignItems={'flex-start'} paddingX={2}>\n                    <Grid item xs={7} display={'flex'} flexDirection={'column'}>\n                        <Typography variant={'body1'} component={'p'}>{t('labelColors')}</Typography>\n                    </Grid>\n                    <Grid item xs={5} display={'flex'} flexDirection={'row'} justifyContent={'flex-end'}\n                          alignItems={'center'} alignSelf={'stretch'}>\n                        <Typography variant={'body1'} component={'span'} paddingX={2}>\n                            <Trans i18nKey=\"whichColorIsUp\">\n                                <span style={{\n                                    textTransform: 'capitalize',\n                                    color: upColor === UpColor.green ? theme.colorBase.success : theme.colorBase.error\n                                }}>{{up: upColor === UpColor.green ? t('labelgreen') : t('labelred')}} up</span>\n                                and <span style={{\n                                textTransform: 'capitalize',\n                                color: upColor === UpColor.green ? theme.colorBase.error : theme.colorBase.success\n                            }}>{{down: upColor === UpColor.green ? t('labelred') : t('labelgreen')}} down</span>\n                            </Trans>\n                        </Typography>\n                        <StyledSwitch checked={upColor === UpColor.green} color=\"default\"\n                                      onChange={handleColorChange}/>\n                    </Grid>\n                </Grid>\n            </Box>\n\n        </StyledPaper>\n\n    </Grid>\n})\n\n// export const SettingPage = ({open,onClose}: { open:boolean, onClose:(e:any)=>void})=>{\n//     return  <MuiModalStyled\n//         open={open}\n//         onClose={onClose}\n//         aria-labelledby=\"modal-modal-title\"\n//         aria-describedby=\"modal-modal-description\"\n//     >\n//         <BlockStyled >\n//            <SettingPanel/>\n//         </BlockStyled>\n//     </MuiModalStyled>\n// }\n\n\n","import { useRouteMatch } from 'react-router'\n\nimport { Box, Paper } from '@material-ui/core'\nimport {\n    DepositPanel,\n    SubMenu,\n    SubMenuList as BasicSubMenuList,\n} from '@loopring-web/component-lib'\nimport { useTranslation, withTranslation } from 'react-i18next'\nimport styled from '@emotion/styled'\nimport { subMenuLayer2 } from '@loopring-web/component-lib/src/static-resource'\n\nimport TxPanel from './TxPanel'\nimport AssetPanel from './AssetPanel'\nimport TradePanel from './TradePanel'\nimport OrderPanel from './OrderPanel'\nimport { SettingPanel } from '../SettingPage';\nimport store from '../../stores';\nimport { AccountStatus } from '../../state_machine/account_machine_spec';\nimport { useModalProps } from '../../layouts/header/hook';\n\nexport const subMenu = subMenuLayer2;\nconst BoxStyle = styled(Box)`\n  ${({theme})=>`\n    background-color: ${theme.colorBase.background().default};\n    width: 100%;\n    min-width:auto;\n    ${theme.border.defaultFrame({c_key: 'blur'})};\n    & > div{\n      background-color:initial;\n      border:0;\n      width:auto;\n      min-width: var(--swap-box-width);\n      max-width: 520px;\n    }\n    `\n  }\n   \n` as typeof Box\n\nconst SubMenuList = withTranslation(['layout','common'], { withRef: true })(BasicSubMenuList);\nexport const Layer2Page = () => {\n\n    let match: any = useRouteMatch(\"/layer2/:item\")\n    const {status: accStatus} = store.getState().account;\n    const {t,...rest} = useTranslation()\n    const selected = match?.params.item ?? 'assets';\n    const {depositProps} = useModalProps()\n\n    return <>  { accStatus === AccountStatus.NOACCOUNT\n    || accStatus === AccountStatus.DEPOSITING\n    || accStatus === AccountStatus.DEPOSIT_TO_CONFIREM ?\n        <BoxStyle display={'flex'} flexWrap={'wrap'} alignItems={'center'} justifyContent={'center'} alignContent={'flex-start'}>\n            <DepositPanel  {...{\n                ...rest, ...depositProps,\n                title: t('depositTitleAndActive'),\n                description: 'depositAndActiveDescription'\n            }} > </DepositPanel>\n        </BoxStyle>: <>\n            <Box width={'200px'} display={'flex'} justifyContent={'stretch'} marginRight={3}>\n                <SubMenu>\n                    <SubMenuList selected={selected} subMenu={subMenu as any} />\n                </SubMenu>\n            </Box>\n            <Box minHeight={420} display={'flex'} alignItems={'stretch'} flexDirection={'column'} marginTop={0} flex={1}>\n                {selected === 'assets' && <AssetPanel />}\n                {selected === 'transactions' && <TxPanel />}\n                {selected === 'trades' && <TradePanel />}\n                {selected === 'orders' && <OrderPanel />}\n                {selected === 'setting' && <SettingPanel />}\n            </Box>\n        </>\n    }\n        </>\n\n\n\n}\n","import React from 'react';\nimport { AmmMap, useAmmMap } from '../../../stores/Amm/AmmMap';\nimport { AmmDetail, CustomError, ErrorMap, } from '@loopring-web/component-lib/src/static-resource';\nimport { useTicker } from '../../../stores/ticker';\nimport { PoolsRow } from '@loopring-web/component-lib';\nimport { deepClone } from '../../../utils/obj_tools';\nimport { STATUS } from '../../../stores/constant';\nimport { useTokenMap } from '../../../stores/token';\n\nexport function useAmmMapUI<R extends { [ key: string ]: any }, I extends { [ key: string ]: any }>({pageSize}: { pageSize: number }) {\n    const [rawData, setRawData] = React.useState<Array<AmmDetail<any>> | []>([]);\n    const [page, setPage] = React.useState<number>(1);\n    // const [_ammTradeMap,setAmmTradeMap]  = React.useState<{[key in keyof R]?:PoolsRow<I>}>({});\n    const {coinMap} = useTokenMap();\n    const {\n        ammMap,\n        status: ammMapStatus,\n        errorMessage: errorAmmMap,\n        statusUnset: ammMapStatusUnset,\n        updateAmmMap,\n    } = useAmmMap();\n    const {\n        tickerMap,\n        status: tickerStatus,\n        errorMessage: errorTickerMap,\n        statusUnset: tickerStatusUnset,\n        updateTickers,\n    } = useTicker();\n    const updateRawData = () => {\n        try {\n            const _ammMap = deepClone(ammMap);\n            for (let tickerMapKey in tickerMap) {\n                _ammMap[ tickerMapKey ].tradeFloat = tickerMap[ tickerMapKey ]\n            }\n            setRawData(Object.keys(_ammMap).map((ammKey: string) => {\n                // @ts-ignore\n\n                if (coinMap) {\n                    _ammMap[ ammKey ][ 'coinAInfo' ] = coinMap[ _ammMap[ ammKey ][ 'coinA' ] ];\n                    _ammMap[ ammKey ][ 'coinBInfo' ] = coinMap[ _ammMap[ ammKey ][ 'coinB' ] ];\n\n                }\n                return  _ammMap[ ammKey ];\n            }) )\n        } catch (error) {\n            throw new CustomError({...ErrorMap.NO_TOKEN_MAP, options: error})\n        }\n\n    }\n\n\n    const updateTickersUI = React.useCallback((_page) => {\n        // if(page !== _page)  {\n        setPage(_page);\n        if (ammMap && Object.keys(ammMap).length > 0) {\n            // console.log('page get ticker',Object.keys(ammMap).length,page - 1 , page - 1 * pageSize + pageSize);\n            const keys = []\n            for (let i = (page - 1) * pageSize; i < Object.keys(ammMap).length && i < (page - 1) * pageSize + pageSize; i++) {\n                keys.push(Object.keys(ammMap)[ i ]);\n            }\n            updateTickers(keys);\n        }\n        // }\n        // else{\n        //\n        // }\n    }, [ammMap, page, pageSize, updateTickers])\n    React.useEffect(() => {\n        switch (tickerStatus) {\n            case \"ERROR\":\n                console.log(\"ERROR\", 'get ticker error,ui');\n                tickerStatusUnset()\n                break;\n            case \"PENDING\":\n                break;\n            case \"DONE\":\n                tickerStatusUnset()\n                updateRawData()\n                break;\n            default:\n                break;\n        }\n    }, [tickerStatus, tickerStatusUnset]);\n\n    // init AmmMap at begin\n    React.useEffect(() => {\n        if (!ammMap || Object.keys(ammMap).length === 0) {\n            updateAmmMap();\n        } else {\n            updateTickersUI(page)\n        }\n    }, []);\n\n\n    React.useEffect(() => {\n        switch (ammMapStatus) {\n            case \"ERROR\":\n                console.log(\"ERROR\", 'get ammMap error,ui');\n                ammMapStatusUnset();\n                break;\n            case STATUS.PENDING:\n                console.log(\"PENDING\", 'get ammMap error,ui');\n                // ammMapStatusUnset();\n                break;\n            case STATUS.DONE:\n                ammMapStatusUnset();\n                updateTickersUI(1)\n                break;\n            default :\n                break;\n        }\n    }, [ammMapStatus, ammMapStatusUnset, updateTickersUI]);\n    return {\n        page,\n        rawData,\n        updateTickersUI,\n    }\n}\n\n// export function useTickerUI({pageState:number,pageSize:}) {\n//\n//     React.useEffect(() => {\n//         if (!tickerMap || Object.keys(tickerMap).length === 0) {\n//             updateAmmMap();\n//         }else{\n//\n//         }\n//     }, [ammMap, updateAmmMap]);\n//     React.useEffect(() => {\n//         switch (ammMapStatus) {\n//             case \"ERROR\":\n//                 console.log(\"ERROR\");\n//                 ammMapStatusUnset()\n//                 break;\n//             case \"PENDING\":\n//                 ammMapStatusUnset()\n//                 break;\n//             default:\n//                 break;\n//         }\n//     }, [ammMapStatus, ammMapStatusUnset]);\n//     return {\n//         ammMapObj: {\n//             ammMap,\n//             status: ammMapStatus,\n//             errorMessage: errorAmmMap\n//         }\n//     }\n// }","import { WithTranslation, withTranslation } from 'react-i18next'\nimport { Box, } from '@material-ui/core'\nimport styled from '@emotion/styled'\n\nimport React from 'react';\nimport { useAmmMapUI } from './hook';\n\nimport { PoolsTable } from '@loopring-web/component-lib';\n\nconst StylePaper = styled(Box)`\n  width: 100%;\n  height: 100%;\n  flex: 1;\n  background-color: ${({theme}) => theme.colorBase.background().default};\n  border-radius: ${({theme}) => theme.unit}px;\n\n  .rdg {\n    flex: 1;\n  }\n\n` as typeof Box;\n\n\nexport const PoolsPanel = withTranslation('common')(<R, I>({t, ...rest}: WithTranslation) => {\n    const container = React.useRef(null);\n    const [pageSize, setPageSize] = React.useState(10);\n    const {updateTickersUI,rawData, page} = useAmmMapUI({pageSize});\n\n    React.useEffect(() => {\n        // @ts-ignore\n        let height = container?.current?.offsetHeight;\n        if (height) {\n            setPageSize(Math.floor((height - 120) / 44) - 1);\n        }\n    }, [container, pageSize]);\n\n    const handlePageChange = React.useCallback((page) =>{\n        updateTickersUI(page)\n    },[updateTickersUI]);\n    return (\n        <>\n            <StylePaper display={'flex'} flexDirection={'column'} ref={container}>\n                <PoolsTable {...{\n                    rawData,\n                    handlePageChange,\n                    page,\n                    pagination: {\n                        pageSize\n                    }\n                }} />\n            </StylePaper>\n        </>\n    )\n})\n\n","import { AmmPanelType } from '@loopring-web/component-lib';\nimport { AmmDetailBase } from '@loopring-web/component-lib/src/static-resource';\nimport * as fm from 'loopring-sdk';\nimport { BIG10 } from '../../defs/swap_defs';\n\nexport const ammPairInit = ({pair, _ammCalcData,ammType,tokenMap, coinMap, walletMap,ammMap ,ammpoolsbalance}:any)=>{\n    _ammCalcData.coinInfoMap = coinMap;\n    if(ammpoolsbalance){\n        const baseVol = (fm.toBig(ammpoolsbalance.pooled[0].volume).div(BIG10.pow(tokenMap[pair.coinAInfo.simpleName].decimals)))\n        const quoteVol = (fm.toBig(ammpoolsbalance.pooled[1].volume).div(BIG10.pow(tokenMap[pair.coinBInfo.simpleName].decimals)))\n        _ammCalcData.AtoB =  quoteVol.div(baseVol).toNumber()\n    }\n    if(pair.coinAInfo){\n        if(ammType === AmmPanelType.Deposit ) {\n            _ammCalcData.myCoinA = {\n                belong: pair.coinAInfo.simpleName,\n                balance: walletMap ? walletMap[ pair.coinAInfo.simpleName ]?.count : 0,\n            }\n            _ammCalcData.myCoinB = {\n                belong: pair.coinBInfo.simpleName,\n                balance: walletMap ? walletMap[ pair.coinBInfo.simpleName ]?.count : 0,\n            }\n        }else {\n            const key = `${pair.coinAInfo.simpleName}-${pair.coinBInfo.simpleName}`;\n            let coinACount = 0,coinBCount = 0 ;\n            if(walletMap){\n                const  balance =  walletMap ? walletMap[ 'LP-' + key ]?.count : 0;\n                const {totalLPToken,totalA,totalB}:AmmDetailBase<any> = ammMap[ 'AMM-' + key ];\n                if(totalA && totalLPToken &&totalB) {\n                    coinACount = totalA / totalLPToken * balance;\n                    coinBCount = totalB / totalLPToken * balance;\n                }\n            }\n            _ammCalcData.myCoinA = {\n                belong: pair.coinAInfo.simpleName,\n                balance: coinACount,\n            }\n            _ammCalcData.myCoinB = {\n                belong: pair.coinBInfo.simpleName,\n                balance: coinBCount,\n            }\n        }\n    }\n\n    // myCoinA:IBData<T>,\n    // myCoinB:IBData<T>,\n    // AtoB:number,\n    // coinInfoMap: CoinMap<T, CoinInfo<T>>,\n    // walletMap: WalletMap<T, WalletCoin<T>>,\n    // AmmWalletMap: WalletMap<T, WalletCoin<T>>,\n    //     slippage: number | string\n    // slippageTolerance: Array<number | string>,\n    //     fee: string,\n    return  _ammCalcData\n}\n","import { AmmPanel, AmmPanelType, AmmProps } from '@loopring-web/component-lib';\nimport { AmmData, AmmInData, CoinInfo, IBData } from '@loopring-web/component-lib/static-resource';\nimport { useAmmPanel } from './hooks';\nimport React from 'react';\nimport { Box } from '@material-ui/core';\nimport { AmmPoolSnapshot } from 'loopring-sdk';\nimport { ammPairInit } from '../../../hooks/help/ammPairDetail';\n\nexport const AmmPanelView = <T extends AmmData<C extends IBData<I> ? C : IBData<I>>, I,\n    ACD extends AmmInData<I>,\n    C = IBData<I>>({pair,ammType,ammpoolsbalance,...rest}: { pair:{coinAInfo: CoinInfo<C> | undefined, coinBInfo: CoinInfo<C> | undefined},\n    ammpoolsbalance: AmmPoolSnapshot | undefined,\n    ammType?:keyof typeof AmmPanelType} & any) => {\n    const {ammCalcData,\n        ammDepositData,\n        ammWithdrawData,\n        handleDepositEvent,\n        handleWithDrawEvent,\n        onAmmWithdrawClick,\n        onAmmDepositClick} = useAmmPanel({pair,ammType:ammType?ammType:AmmPanelType.Deposit,ammpoolsbalance})\n\n    // const [index, setIndex] = React.useState(AmmPanelTypeMap[ tabSelected ]);\n\n    return <> { ammpoolsbalance?\n        <AmmPanel {...{...rest}}\n                  ammWithdrawData={ammWithdrawData}\n                  ammDepositData={ammDepositData}\n                  ammCalcData={ammCalcData}\n                  handleDepositEvent={handleDepositEvent}\n                  handleWithDrawEvent={handleWithDrawEvent}\n                  onAmmWithdrawClick={onAmmWithdrawClick}\n                  onAmmDepositClick={onAmmDepositClick}\n                  tabSelected = {ammType?ammType:AmmPanelType.Deposit}\n\n        />: <Box/> }\n    </>\n\n}","import React from \"react\";\nimport { AmmData, AmmInData, CoinInfo, IBData , TradeFloat } from '@loopring-web/component-lib/src/static-resource';\nimport { updateWallet } from '../../../hooks/help/updateWallet';\nimport { AmmPanelType ,RawDataTradeItem } from '@loopring-web/component-lib';\nimport { useWalletLayer2 } from '../../../stores/walletLayer2';\nimport { useTokenMap } from '../../../stores/token';\nimport { useAmmMap } from '../../../stores/Amm/AmmMap';\nimport { ammPairInit } from '../../../hooks/help/ammPairDetail';\nimport { AmmPoolSnapshot } from 'loopring-sdk';\n\nexport const useAmmPanel = <C extends { [ key: string ]: any }>({pair,ammType,ammpoolsbalance}:{pair:{coinAInfo: CoinInfo<C> | undefined, coinBInfo: CoinInfo<C> | undefined},\n    // ammCalcData:AmmInData<C>,\n    ammpoolsbalance: AmmPoolSnapshot | undefined,\n    ammType:keyof typeof AmmPanelType}) => {\n    const walletLayer2State = useWalletLayer2();\n    const {coinMap, tokenMap} = useTokenMap();\n    const {ammMap} = useAmmMap();\n\n    const [ammCalcData, setAmmCalcData] = React.useState<AmmInData<C>|undefined>();\n    const [ammDepositData, setAmmDepositData] = React.useState<AmmData<IBData<C>,C>>({\n        coinA: {belong: undefined} as unknown as IBData<C>,\n        coinB: {belong:undefined} as unknown  as IBData<C>,\n        slippage: .5\n    } as AmmData<IBData<C>,C>) ;\n    const [ammWithdrawData, setAmmWithdrawData] = React.useState({\n        coinA: {belong: undefined} as unknown as IBData<C>,\n        coinB: {belong:undefined} as unknown  as IBData<C>,\n        slippage: .5\n    } as AmmData<IBData<C>,C>);\n    const [ammBtnI18nKey, setAmmBtnI18nKey] = React.useState<string | undefined>(undefined);\n\n    const handleDepositEvent = React.useCallback((data: AmmData<IBData<C>>, type: 'coinA' | 'coinB') => {\n        console.log('handleDepositEvent', data, type);\n    }, []);\n\n    const handleWithDrawEvent = React.useCallback((data: AmmData<IBData<C>>, type: 'coinA' | 'coinB') => {\n        console.log('handleDepositEvent', data, type);\n    }, []);\n\n    const onAmmWithdrawClick = React.useCallback( (data) => {\n        console.log('onAmmWithdrawClick', data);\n    },[]);\n    const onAmmDepositClick  = React.useCallback((data) => {\n        console.log('onAmmDepositClick', data);\n    } ,[]);\n    \n\n    React.useEffect(() => {\n        if(ammpoolsbalance){\n            initAmmData(pair)\n        }\n    }, [ammpoolsbalance]);\n    const initAmmData = async (pair: any)=>{\n\n            let _ammCalcData: Partial<AmmInData<C>> = ammPairInit(\n                {pair,ammType, _ammCalcData:{}, tokenMap, coinMap, walletMap:walletLayer2State.walletLayer2, ammMap,ammpoolsbalance})\n            // let _tradeFloat: Partial<TradeFloat> = {}\n            // let _tradeArray: Array<Partial<RawDataTradeItem>> | undefined = undefined;\n            // const walletMap =  walletLayer2State.walletLayer2? updateWallet().walletMap:undefined;\n            //AtoB\n            setAmmCalcData({...ammCalcData, ..._ammCalcData} as AmmInData<C>);\n            if(_ammCalcData.myCoinA){\n                if(ammType === AmmPanelType.Deposit) {\n                    setAmmDepositData({\n                        coinA: _ammCalcData.myCoinA as IBData<C>,\n                        coinB: _ammCalcData.myCoinB as IBData<C>,\n                        slippage: 0.5\n                    })\n                }else{\n                    setAmmWithdrawData({\n                        coinA: _ammCalcData.myCoinA as IBData<C>,\n                        coinB: _ammCalcData.myCoinB as IBData<C>,\n                        slippage: 0.5\n                    })\n                }\n\n\n            }\n\n\n    }\n\n    React.useEffect(() => {\n        switch (walletLayer2State.status) {\n            case \"ERROR\":\n                walletLayer2State.statusUnset();\n                //TODO: show error at button page show error  some retry dispat again\n                break;\n            case \"DONE\":\n                walletLayer2State.statusUnset();\n                const {walletMap} = updateWallet();\n                initAmmData(pair)\n                break;\n            default:\n                break;\n\n        }\n    }, [walletLayer2State.status])\n\n\nreturn {\n        ammCalcData,\n        ammDepositData,\n        ammWithdrawData,\n        handleDepositEvent,\n        handleWithDrawEvent,\n        onAmmWithdrawClick,\n        onAmmDepositClick,\n        ammBtnI18nKey\n    }\n}","import React from \"react\";\nimport { AmmRecordRow } from '@loopring-web/component-lib';\nimport { AmmActivity, CoinInfo, TradeFloat } from \"@loopring-web/component-lib/static-resource\";\nimport { useTokenMap } from \"stores/token\";\nimport { useRouteMatch } from 'react-router';\nimport { AmmDetailStore, useAmmMap } from '../../../stores/Amm/AmmMap';\nimport { useWalletLayer2 } from '../../../stores/walletLayer2';\nimport { pairDetailBlock } from '../../../hooks/help/pairDetail';\nimport { AmmPoolSnapshot, getExistedMarket } from 'loopring-sdk';\nimport { makeTickView } from '../../../hooks/help/makeTickView';\nimport { useAmmActivityMap } from '../../../stores/Amm/AmmActivityMap';\nimport { deepClone } from '../../../utils/obj_tools';\n\nconst makeAmmDetailExtendsActivityMap = ({ammMap, tokenMap, ammActivityMap, ammKey}: any) => {\n    if (ammMap && tokenMap) {\n        let ammDetail = deepClone(ammMap[ ammKey as string ]);\n        const ammActivity = ammActivityMap [ ammKey as string ];\n        if (ammDetail && ammDetail.coinA) {\n            ammDetail.coinAInfo = tokenMap[ ammDetail.coinA ];\n            ammDetail.coinBInfo = tokenMap[ ammDetail.coinB ];\n            ammDetail[ 'activity' ] = ammActivity ? ammActivity : {};\n        }\n        return ammDetail;\n    }\n}\ntype PgAmmDetail<C extends { [ key: string ]: any }> = AmmDetailStore<C> & {\n    myCoinA: CoinInfo<C>,\n    myCoinB: CoinInfo<C>,\n    activity: AmmActivity<C> | undefined\n}\n\nexport const useCoinPair = <C extends { [ key: string ]: any }>() => {\n    const match: any = useRouteMatch(\"/liquidity/pools/coinPair/:symbol\")\n    const {coinMap, tokenMap, marketArray, marketCoins} = useTokenMap();\n    const ammMapState = useAmmMap();\n    const {ammActivityMap} = useAmmActivityMap()\n    const {ammMap, updateAmmMap} = ammMapState;\n\n    // const {ammMap,updateAmmMap} = useAmmMap();\n    const _walletLayer2 = useWalletLayer2();\n\n    const [ammRecordArray, setAmmRecordArray] = React.useState<AmmRecordRow<C>[]>([]);\n    const [ammpoolsbalance,setAmmpoolsbalance]  =   React.useState<AmmPoolSnapshot|undefined>(undefined);\n    const [coinPairInfo, setCoinPairInfo] = React.useState<PgAmmDetail<C>>({\n        myCoinA: undefined,\n        myCoinB: undefined,\n        activity: undefined,\n        totalRewards: undefined,\n        amountDollar: undefined,\n        amountYuan: undefined,\n        totalLPToken: undefined,\n        totalA: undefined,\n        totalB: undefined,\n        rewardToken: undefined,\n        rewardValue: undefined,\n        feeA: undefined,\n        feeB: undefined,\n        isNew: undefined,\n        isActivity: undefined,\n    } as unknown as PgAmmDetail<C>);\n    const [tradeFloat, setTradeFloat] = React.useState<TradeFloat | undefined>(undefined);\n    const [pair, setPair] = React.useState<{ coinAInfo: CoinInfo<C> | undefined, coinBInfo: CoinInfo<C> | undefined }>({\n        coinAInfo: undefined,\n        coinBInfo: undefined,\n    });\n\n    React.useEffect(() => {\n        const coinKey = match?.params.symbol ?? undefined;\n        let _tradeFloat: Partial<TradeFloat> = {}\n        // let _ammCalcData: Partial<AmmInData<C>> = ammPairInit({pair, ammType, _ammCalcData:{},\n        //     tokenMap, coinMap, walletMap:, ammMap})\n        // let _tradeCalcData: Partial<TradeCalcData<C>> = coinPairInit({coinKey, _tradeCalcData: {}, tokenMap, coinMap})\n        // let _ammCalcData\n        // const [_match, sell, buy] = coinKey.match(/(\\w+)-(\\w+)/i);\n        const [, coinA, coinB] = coinKey.match(/(\\w+)-(\\w+)/i)\n        let {\n            amm,\n            market\n        } = getExistedMarket(marketArray, coinA, coinB);\n\n        const _coinPairInfo = makeAmmDetailExtendsActivityMap({ammMap, tokenMap, ammActivityMap, ammKey: amm})\n        setCoinPairInfo(_coinPairInfo ? _coinPairInfo : {})\n\n        if (coinMap) {\n            setPair({\n                coinAInfo: coinMap[ coinA ],\n                coinBInfo: coinMap[ coinB ]\n            })\n        }\n\n        // if (_walletLayer2 && _walletLayer2.walletLayer2) {\n        //     const {walletMap} = updateWallet();\n        //     _tradeCalcData.walletMap = walletMap;\n        // }\n\n        let apiList = [];\n        if (amm && market && ammMap) {\n            // let pairPromise =  usePairTitleBlock({market})\n            //TODO should add it into websocket\n            updateAmmMap();\n            apiList = [\n                pairDetailBlock({coinKey: market, ammKey: amm, ammMap}),\n            ];\n            Promise.all([...apiList]).then(\n                ([{ammpoolsbalance, tickMap}]: any[]) => {\n                    if (tokenMap) {\n                        // let {_tradeCalcData: _td} = pairDetailDone({\n                        //     coinKey: market,\n                        //     market,\n                        //     ammpoolsbalance,\n                        //     tokenMap,\n                        //     _tradeCalcData,\n                        //     coinMap,\n                        //     marketCoins\n                        // })\n                        // _tradeCalcData = _td;\n                        setAmmpoolsbalance(ammpoolsbalance);\n                        _tradeFloat = makeTickView(tickMap[ market ])\n                        setTradeFloat(_tradeFloat as TradeFloat);\n                        // setPair(_pair)\n                    }\n                })\n        }\n\n    }, []);\n\n    //TODO tickMap\n    React.useEffect(() => {\n    }, [])\n\n    React.useEffect(() => {\n        if (ammMapState.status === \"ERROR\") {\n            //TODO: solve error\n            ammMapState.statusUnset();\n        } else if (ammMapState.status === \"DONE\") {\n            ammMapState.statusUnset();\n            if (ammMapState.ammMap && pair.coinAInfo?.simpleName && pair.coinBInfo?.simpleName) {\n                const _coinPairInfo = makeAmmDetailExtendsActivityMap(\n                    {\n                        ammMap,\n                        tokenMap,\n                        ammActivityMap,\n                        ammKey: 'AMM-' + pair.coinAInfo.simpleName + pair.coinBInfo.simpleName\n                    })\n                setCoinPairInfo(_coinPairInfo ? _coinPairInfo : {})\n            }\n\n            // tokenState.statusUnset()\n            // setState('DONE');\n        }\n    }, [ammMapState.status, ammMapState.ammMap, ammMapState.statusUnset, pair, ammActivityMap, tokenMap, setCoinPairInfo])\n\n    return {\n        // ammCalcData,\n        // ammDepositData,\n        // ammWithdrawData,\n        // ammCalcData,\n        ammpoolsbalance,\n        coinPairInfo,\n        pair,\n        tradeFloat,\n        ammRecordArray,\n        // onSwapClick,\n        // ammBtnI18nKey,\n        // handleSwapPanelEvent\n        // handleDepositEvent,\n        // handleWithDrawEvent,\n        // onAmmWithdrawClick,\n        // onAmmDepositClick\n    }\n}","import React from 'react';\nimport { withTranslation } from 'react-i18next';\nimport { AmmRecordTable, TradeBtnStatus, TradeTitle, useSettings } from '@loopring-web/component-lib';\nimport { Currency, getThousandFormattedNumbers, PriceTag } from '@loopring-web/component-lib/static-resource';\nimport { Box, Breadcrumbs, Grid, Hidden, Link, Typography, } from '@material-ui/core';\nimport { AmmPanelView } from '../AmmPanel';\nimport moment from 'moment';\nimport styled from '@emotion/styled/';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\n\nimport { MyAmmLP } from '@loopring-web/component-lib/src/static-resource';\nimport { useCoinPair } from './hooks';\n\nlet btnShowTradeStatus: keyof typeof TradeBtnStatus = TradeBtnStatus.AVAILABLE;\nconst onShowTrade = () => {\n};\nconst myAmm: MyAmmLP<any> = {\n    feeA: 122,\n    feeB: 21,\n    feeDollar: 0.0012,\n    feeYuan: 0.0312,\n    reward: 123,\n    rewardToken: {\n        icon: 'https://exchange.loopring.io/assets/images/ethereum/assets/0x565aBA393aac4dFbFf4333B06c407458002C6183/logo.png',\n        name: 'USTD',\n        simpleName: 'USTD',\n        description: '',\n        company: 'USTD'\n    },\n    balanceA: 12131,\n    balanceB: 0.0012,\n    balanceYuan: 1232131,\n    balanceDollar: 232,\n}\n// const ammRecordArray: AmmRecordRow<any>[] = [\n//     {\n//         type: AmmTradeType.add,\n//         coinA: coinMap[ 'ETH' ] as CoinInfo<any>,\n//         coinB: coinMap[ 'LRC' ] as CoinInfo<any>,\n//         totalDollar: 12,\n//         totalYuan: 194.89,\n//         amountA: 122,\n//         amountB: 231,\n//         time: moment().add(-1, 'days').toDate().getTime()\n//     },\n//     {\n//         type: AmmTradeType.remove,\n//         coinA: coinMap[ 'ETH' ] as CoinInfo<any>,\n//         coinB: coinMap[ 'LRC' ] as CoinInfo<any>,\n//         totalDollar: 12,\n//         totalYuan: 194.89,\n//         amountA: 122,\n//         amountB: 231,\n//         time: moment().add(-100, 'days').toDate().getTime()\n//     },\n//     {\n//         type: AmmTradeType.swap,\n//         coinA: coinMap[ 'ETH' ] as CoinInfo<any>,\n//         coinB: coinMap[ 'LRC' ] as CoinInfo<any>,\n//         totalDollar: 12,\n//         totalYuan: 194.89,\n//         amountA: 122,\n//         amountB: 231,\n//         time: moment().add(-15, 'days').toDate().getTime()\n//     },\n//     {\n//         type: AmmTradeType.swap,\n//         coinA: coinMap[ 'ETH' ] as CoinInfo<any>,\n//         coinB: coinMap[ 'LRC' ] as CoinInfo<any>,\n//         totalDollar: 12,\n//         totalYuan: 194.89,\n//         amountA: 122,\n//         amountB: 231,\n//         time: moment().add(-3, 'hours').toDate().getTime()\n//     },\n//     {\n//         type: AmmTradeType.swap,\n//         coinA: coinMap[ 'ETH' ] as CoinInfo<any>,\n//         coinB: coinMap[ 'LRC' ] as CoinInfo<any>,\n//         totalDollar: 12,\n//         totalYuan: 194.89,\n//         amountA: 122,\n//         amountB: 231,\n//         time: moment().add(-75, 'second').toDate().getTime()\n//     }\n// ]\n\n\n//******************** page code ************************//\nconst BoxStyled = styled(Box)`\n  ${({theme}) => theme.border.defaultFrame({c_key: 'blur'})};\n  background-color: ${({theme}) => theme.colorBase.background().default};\n`;\nconst StylePaper = styled(Box)`\n  width: 100%;\n  height: 100%;\n  flex: 1;\n  background-color: ${({theme}) => theme.colorBase.background().default};\n  border-radius: ${({theme}) => theme.unit}px;\n\n  .rdg {\n    flex: 1;\n  }\n\n` as typeof Box;\n\nconst applyProps = (index: number) => {\n    return {\n        id: `simple-tab-${index}`,\n        'aria-controls': `tabpanel-${index}`,\n    }\n}\n\nexport const CoinPairPanel = withTranslation('common')(({t, ...rest}: any) => {\n    //TODO: checkRouter\n\n    const {currency} = useSettings();\n    const {tradeFloat, pair, coinPairInfo, ammRecordArray,ammpoolsbalance} = useCoinPair();\n    const [tabIndex, setTabIndex] = React.useState<0 | 1>(0);\n    const [page, setPage] = React.useState(rest?.page ? rest.page : 1);\n    const handleChange = (event: any, newValue: 0 | 1) => {\n        setTabIndex(newValue);\n        setPage(1);\n    }\n    const _handlePageChange = React.useCallback((page: number) => {\n        setPage(page);\n    }, [])\n\n\n    return <>\n\n        <Grid container>\n            <Grid item xs={8}>\n                <Breadcrumbs aria-label=\"breadcrumb\">\n                    <Link color=\"textSecondary\" href=\"/#/liquidity/pools\">\n                        {t('labelAmmList')}\n                    </Link>\n                    <Typography color={'textSecondary'} display={'flex'} alignItems={'center'}\n                                justifyContent={'center'}\n                    >{pair.coinAInfo?.simpleName}-{pair.coinBInfo?.simpleName}</Typography>\n                </Breadcrumbs>\n            </Grid>\n            <Grid item xs={4} alignItems={'center'} justifyContent={'flex-end'} display={'flex'}>\n                <Link href=\"/#/liquidity/pools\" variant={'h5'}>\n                    {t('labelBack')}\n                </Link>\n            </Grid>\n        </Grid>\n        <Grid container marginTop={3}>\n            <Grid item xs={7}>\n                <TradeTitle {...{\n                    ...rest, t,\n                    ...pair,\n                    tradeFloat,\n                    isNew: false\n                }}></TradeTitle>\n            </Grid>\n        </Grid>\n        <Box flex={1} display={'flex'} alignItems={'stretch'} flexDirection=\"row\" marginTop={3}>\n            <Box flex={1} display={'flex'}>\n                <Grid container spacing={2} wrap={'nowrap'}>\n                    <Grid item md={5} xs={12} paddingRight={2} display={'flex'} flexDirection={'column'}\n                          alignItems={'stretch'} justifyContent={'space-between'}>\n                        <BoxStyled paddingY={3} paddingX={1 / 2 * 5} display={'flex'} flexDirection={'column'}>\n                            <Typography component={'p'} color={'textSecondary'} display={'flex'}\n                                        justifyContent={'space-between'}>\n                                <Typography component={'span'}\n                                            style={{textTransform: 'capitalize'}}>{t('labelLiquidity')}</Typography>\n                                <Typography component={'span'}\n                                            style={{textTransform: 'uppercase'}}>{t('labelAPY')}</Typography>\n                            </Typography>\n                            <Typography component={'p'} color={'textPrimary'} display={'flex'}\n                                        justifyContent={'space-between'} marginTop={1}>\n                                <>\n                                    <Typography\n                                        component={'span'}> {typeof coinPairInfo.amountDollar === 'undefined' ? 'N/A' :\n                                        currency === Currency.dollar ? PriceTag.Dollar + getThousandFormattedNumbers(coinPairInfo.amountDollar) : PriceTag.Yuan + getThousandFormattedNumbers(coinPairInfo.amountYuan ? coinPairInfo.amountYuan : 0)}\n                                    </Typography>\n                                    <Typography\n                                        component={'span'}> {coinPairInfo.tradeFloat ? coinPairInfo.tradeFloat.APY : 'N/A'}%\n                                    </Typography>\n                                </>\n\n\n                            </Typography>\n\n                            <Typography component={'p'} color={'textSecondary'} display={'flex'}\n                                        justifyContent={'space-between'} marginTop={2}>\n                                <Typography component={'span'}\n                                            color={'textSecondary'}>\n                                    <Hidden mdDown>{t('labelLPTotal')}</Hidden>{t('labelLPTokens')}</Typography>\n                                <Typography component={'span'}\n                                            color={'textSecondary'}>{coinPairInfo.totalLPToken}</Typography>\n                            </Typography>\n                            <Typography component={'p'} color={'textSecondary'} display={'flex'}\n                                        justifyContent={'space-between'} marginTop={1}>\n\n                                <Typography component={'span'}\n                                            color={'textSecondary'}>\n                                    <Hidden\n                                        mdDown>{t('labelLPTotal')}</Hidden>{coinPairInfo.myCoinA?.simpleName}\n                                </Typography>\n\n                                <Typography component={'span'}\n                                            color={'textSecondary'}>{coinPairInfo.totalA}</Typography>\n                            </Typography>\n                            <Typography component={'p'} color={'textSecondary'} display={'flex'}\n                                        justifyContent={'space-between'} marginTop={1}>\n                                <Typography component={'span'}\n                                            color={'textSecondary'}>\n                                    <Hidden\n                                        mdDown>{t('labelLPTotal')}</Hidden>{coinPairInfo.myCoinB?.simpleName}\n                                </Typography>\n                                <Typography component={'span'}\n                                            color={'textSecondary'}>{coinPairInfo.totalB}</Typography>\n                            </Typography>\n\n                        </BoxStyled>\n                        <BoxStyled paddingY={3} paddingX={1 / 2 * 5} display={'flex'} flexDirection={'column'}>\n                            <Typography component={'p'} color={'textSecondary'} display={'flex'}\n                                        justifyContent={'space-between'} alignItems={'center'}>\n                                <Typography component={'span'} color={'textSecondary'} variant={'body2'}>\n                                    {coinPairInfo.tradeFloat?.timeUnit} {t('labelVolume')}\n                                </Typography>\n                                <Typography component={'span'} color={'textSecondary'}>\n                                    {t('labelFee')} {/* ' : '*/}\n                                </Typography>\n                            </Typography>\n                            <Typography component={'p'} color={'textSecondary'} display={'flex'}\n                                        justifyContent={'space-between'} marginTop={1} alignItems={'center'}>\n                                <Typography component={'span'} variant={'h4'} color={'textPrimary'}>\n                                    {currency === Currency.dollar ? PriceTag.Dollar + getThousandFormattedNumbers(coinPairInfo.tradeFloat && coinPairInfo.tradeFloat.priceDollar ? coinPairInfo.tradeFloat.priceDollar as number : 0)\n                                        : PriceTag.Yuan + getThousandFormattedNumbers(coinPairInfo.tradeFloat && coinPairInfo.tradeFloat.priceYuan ? coinPairInfo.tradeFloat.priceYuan as number : 0)}\n                                </Typography>\n                                <Typography noWrap textAlign={'center'} component={'span'} color={'textSecondary'}\n                                            variant={'body2'} textOverflow={'ellipsis'} display={'flex'}\n                                            alignItems={'center'}>\n                                    <Typography component={'span'} color={'inherit'} variant={'inherit'}\n                                                display={'flex'} flexDirection={'column'}>\n                                        <Typography component={'span'} color={'inherit'} variant={'inherit'}>\n                                            {coinPairInfo.myCoinA?.simpleName}\n                                        </Typography>\n                                        <Typography component={'span'} color={'inherit'} variant={'inherit'}>\n                                            {coinPairInfo.feeA}\n                                        </Typography>\n                                    </Typography>\n                                    <Typography component={'span'} color={'inherit'} variant={'h5'}\n                                                paddingX={1}>{' + '}</Typography>\n                                    <Typography component={'span'} color={'inherit'} variant={'inherit'}\n                                                display={'flex'} flexDirection={'column'}>\n                                        <Typography component={'span'} color={'inherit'} variant={'inherit'}>\n                                            {coinPairInfo.myCoinB?.simpleName}\n                                        </Typography>\n                                        <Typography component={'span'} color={'inherit'} variant={'inherit'}>\n                                            {coinPairInfo.feeB}\n                                        </Typography>\n                                    </Typography>\n                                </Typography>\n                            </Typography>\n                        </BoxStyled>\n                        <BoxStyled paddingY={3} paddingX={1 / 2 * 5} display={'flex'} flexDirection={'column'}>\n                            <Typography component={'p'} color={'textSecondary'} display={'flex'}\n                                        justifyContent={'space-between'}>\n                                <Typography component={'span'}\n                                            color={'textSecondary'}> {t('labelMyPoolShare')}</Typography>\n                            </Typography>\n                            <Typography component={'p'} color={'textSecondary'} display={'flex'}\n                                        justifyContent={'space-between'} marginTop={1}>\n                                <Typography component={'span'}\n                                            color={'textSecondary'}> {myAmm.balanceA ? myAmm.balanceA : 'N/A'} {coinPairInfo.myCoinA?.simpleName} </Typography>\n                                <Typography component={'span'} color={'textSecondary'}\n                                            variant={'h5'}> -- </Typography>\n                            </Typography>\n                            <Typography component={'p'} color={'textSecondary'} display={'flex'}\n                                        justifyContent={'space-between'} marginTop={1}>\n                                <Typography component={'span'}\n                                            color={'textSecondary'}> {myAmm.balanceB ? myAmm.balanceA : 'N/A'} {coinPairInfo.myCoinB?.simpleName}</Typography>\n                                <Typography component={'span'} color={'textSecondary'}\n                                            variant={'h5'}> -- </Typography>\n                            </Typography>\n                        </BoxStyled>\n                        <BoxStyled paddingY={3} paddingX={1 / 2 * 5} display={'flex'}\n                                   flexDirection={'column'}>\n                            <Box display={'flex'} flexDirection={'row'} justifyContent={'space-between'}>\n                                <Typography display={'flex'} flexDirection={'column'} component={'div'}>\n                                    <Typography variant={'body2'} component={'h5'} color={'textSecondary'}>\n                                        {t('labelReward')}\n                                    </Typography>\n                                    <Typography variant={'body1'} component={'span'} color={'textPrimary'}>\n                                        {typeof coinPairInfo.activity === 'undefined' ? 'N/A' : <>\n                                            <Typography\n                                                component={'span'}>{coinPairInfo.activity.totalRewards} </Typography>\n                                            <Typography\n                                                component={'span'}>{coinPairInfo.activity?.rewardToken?.simpleName}</Typography>\n                                        </>}\n                                    </Typography>\n                                </Typography>\n                                <Typography display={'flex'} flexDirection={'column'} alignItems={'flex-end'}\n                                            component={'div'}>\n                                    <Typography variant={'body2'} component={'h5'} color={'textSecondary'}>\n                                        {t('labelMyReward')}\n                                    </Typography>\n                                    <Typography variant={'body1'} component={'span'} color={'textPrimary'}>\n                                        {typeof coinPairInfo.isActivity === 'undefined' ? 'N/A' : <>\n                                            <Typography component={'span'}> {myAmm.reward} </Typography>\n                                            <Typography\n                                                component={'span'}> {coinPairInfo.activity?.rewardToken?.simpleName}</Typography></>}\n\n                                    </Typography>\n                                </Typography>\n                            </Box>\n                            <Typography alignSelf={'flex-start'} variant={'body2'} color={'textSecondary'}\n                                        component=\"span\" marginTop={1}>\n                                {t('labelDate')}:\n                                {typeof coinPairInfo.isActivity === 'undefined' ? 'N/A' : moment(coinPairInfo.activity?.duration.from).format('L') + ' - ' + moment(coinPairInfo.activity?.duration.to).format('L')}\n                            </Typography>\n\n                        </BoxStyled>\n                    </Grid>\n                    <Hidden mdDown>\n                        <Grid item md={7} paddingRight={2}>\n\n\n                        </Grid>\n                    </Hidden>\n                </Grid>\n            </Box>\n            <Box display={'flex'}>\n                {pair.coinAInfo && <AmmPanelView pair={pair} ammpoolsbalance={ammpoolsbalance}/>}\n            </Box>\n        </Box>\n        <Grid container marginTop={3}>\n            <Grid item xs={12}>\n                <Tabs value={tabIndex}\n                      onChange={handleChange}\n                      aria-label=\"tabs switch\">\n                    <Tab label={t('labelAll')} {...applyProps(0)} />\n                    <Tab label={t('labelMe')} {...applyProps(1)} />\n                </Tabs>\n\n                <StylePaper marginTop={2}>\n                    {/*ammRecordArray*/}\n                    <AmmRecordTable rawData={ammRecordArray} handlePageChange={_handlePageChange} page={page}/>\n                </StylePaper>\n            </Grid>\n\n        </Grid>\n\n    </>\n})\n\n\n\n","import { AmmProps } from '@loopring-web/component-lib';\nimport React from 'react';\nimport { AmmData, AmmInData, IBData } from '@loopring-web/component-lib/static-resource';\nimport { AmmCard } from '@loopring-web/component-lib/components/block/AmmCard';\nimport { Grid } from '@material-ui/core';\nimport { AmmDetail, FloatTag } from '@loopring-web/component-lib/src/static-resource';\nimport { useAmmMiningUI } from './hook';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport { withTranslation } from 'react-i18next';\n\nconst AmmCardWrap = React.memo(React.forwardRef((props,ref) => {\n    return <AmmCard ref={ref} {...props} ></AmmCard>\n}))  as React.ComponentType<AmmDetail<IBData<any>>>;\n\nexport const AmmMiningView =  withTranslation('common')(<T extends AmmData<C extends IBData<I> ? C : IBData<I>>, I,\n    ACD extends AmmInData<I>,\n    C = IBData<I>>({ammProps,t,...rest}: { ammProps:AmmProps<T ,I,ACD> } & any) => {\n    const {ammActivities} = useAmmMiningUI();\n    const [value,setValue] = React.useState<0|1>(0);\n    const handleChange = (event: any, newValue: 0|1) => {\n        setValue(newValue);\n    }\n    return <Grid container spacing={2}>\n       <Grid item xs={12}>\n           <Tabs value={value}\n                 onChange={handleChange}\n                 aria-label=\"tabs switch\">\n               <Tab label={t('labelCurrentActivities')}  />\n               <Tab label={t('labelPastActivities')}  />\n           </Tabs>\n       </Grid>\n\n        {ammActivities.map((item,index)=>{\n            return  <Grid item xs={12} sm={6} lg={4}  key={index}>\n                {/*<AmmCardWrap {...item}/>*/}\n            </Grid>\n        }) }\n\n    </Grid>\n})\n\n\n// const ref = React.createRef();\n// const ammInfo: AmmCardProps<any> = {\n//     // ammCalcData,\n//\n//     coinAInfo:  {\n//         icon: 'https://exchange.loopring.io/assets/images/ethereum/assets/0x9A0aBA393aac4dFbFf4333B06c407458002C6183/logo.png',\n//         name: 'ETH',\n//         simpleName: 'ETH',\n//         description: '',\n//         company: 'ETH'\n//     },\n//     coinBInfo: {\n//         icon: 'https://exchange.loopring.io/assets/images/ethereum/assets/0x565aBA393aac4dFbFf4333B06c407458002C6183/logo.png',\n//         name: 'LRC',\n//         simpleName: 'LRC',\n//         description: '',\n//         company: 'LRC'\n//     },\n//     activity:{\n//         totalRewards:241232132,\n//         myRewards:1232.123,\n//         rewardToken: {\n//             icon: 'https://exchange.loopring.io/assets/images/ethereum/assets/0x565aBA393aac4dFbFf4333B06c407458002C6183/logo.png',\n//             name: 'LRC',\n//             simpleName: 'LRC',\n//             description: '',\n//             company: 'LRC'\n//         },\n//         duration: {\n//             from: new Date('2021-1-1'),\n//             to: new Date()\n//         },\n//     },\n//     amountDollar: 197764.89,\n//     amountYuan: 194.89,\n//     tradeFloat:{\n//         APY: 56,\n//         priceDollar: 123,\n//         priceYuan: 2343232,\n//         percent: '0%',\n//         chartUnit: \"24h\",\n//         volume: Number('112312312'),\n//         floatTag: FloatTag.none\n//     },\n//     totalLPToken: 12132131,\n//     totalA: 0.002,\n//     totalB: 12344,\n//     myRewardA: 11,\n//     myRewardB: 13,\n//     PoolSharedA: 10,\n//     PoolSharedB: 12,\n//     isNew:false,\n//     isActivity:true,\n// }","import React from 'react';\nimport { useAmmMap } from '../../../stores/Amm/AmmMap';\nimport {\n    CoinInfo,\n    CustomError,\n    ErrorMap,\n} from '@loopring-web/component-lib/src/static-resource';\nimport {  useTicker } from '../../../stores/ticker';\nimport { PoolsRow } from '@loopring-web/component-lib';\nimport { deepClone } from '../../../utils/obj_tools';\nimport { STATUS } from '../../../stores/constant';\nimport { useAmmActivityMap } from '../../../stores/Amm/AmmActivityMap';\nimport { AmmCardProps } from '@loopring-web/component-lib/static-resource';\nimport { tokenMapSlice, useTokenMap } from '../../../stores/token';\n\nexport function useAmmMiningUI<R extends {[key:string]:any},I>():{ammActivities:Array<AmmCardProps<I>>} {\n    const [data,setData] = React.useState<Array<AmmCardProps<I>>>([]);\n    const {\n        ammMap,\n        status: ammMapStatus,\n        errorMessage: errorAmmMap,\n        statusUnset:ammMapStatusUnset,\n        updateAmmMap,\n    } = useAmmMap();\n    const {coinMap} = useTokenMap();\n    const {\n        ammActivityMap,\n        status:  ammActivityStatus,\n        errorMessage: errorAmmActivityMap,\n        statusUnset:  ammActivityStatusUnset ,\n        updateAmmActivityMap,\n    } = useAmmActivityMap();\n    const {\n        tickerMap,\n        status: tickerStatus,\n        errorMessage: errorTickerMap,\n        statusUnset: tickerStatusUnset ,\n        updateTickers,\n    } = useTicker();\n    const updateRawData = React.useCallback(()=>{\n        try {\n            const _ammActivityMap:PoolsRow<I>  = deepClone(ammActivityMap);\n            let mapArray = [];\n            for (let key in  ammActivityMap) {\n                if (ammMap && coinMap) {\n                    _ammActivityMap[ key ] = {\n                        // @ts-ignore\n                        ...deepClone(ammMap[ key ]),\n                        coinAInfo: coinMap[ ammMap[ key ].coinA as string ],\n                        coinBInfo: coinMap[ ammMap[ key ].coinB as string ],\n                        activity: _ammActivityMap[ key ],\n                        tradeFloat: tickerMap && tickerMap[ key ]\n                    }\n                    mapArray.push(_ammActivityMap[key])\n                }\n\n            }\n            setData(mapArray);\n        }catch (error){\n            throw new CustomError({...ErrorMap.NO_TOKEN_MAP,options:error})\n        }\n    }, [ammActivityMap, tickerMap, ammMap, coinMap])\n\n    const updateTickersUI = React.useCallback(()=>  {\n            if(ammActivityMap && Object.keys(ammActivityMap).length>0){\n                updateTickers(Object.keys(ammActivityMap));\n            }\n    },[ammActivityMap,updateTickers])\n    React.useEffect(() => {\n        switch (tickerStatus) {\n            case \"ERROR\":\n                console.log(\"ERROR\",'get ticker error,ui');\n                tickerStatusUnset()\n                break;\n            case \"PENDING\":\n                break;\n            case \"DONE\":\n                tickerStatusUnset()\n                updateRawData()\n                break;\n            default:\n                break;\n        }\n    }, [tickerStatus, tickerStatusUnset, updateRawData]);\n    React.useEffect(() => {\n        switch (ammActivityStatus) {\n            case \"ERROR\":\n                console.log(\"ERROR\",'get ammMap error,ui');\n                ammActivityStatusUnset();\n                break;\n            case STATUS.PENDING:\n                console.log(\"PENDING\",'get ammMap error,ui');\n                // ammMapStatusUnset();\n                break;\n            case STATUS.DONE:\n                if(ammMapStatus !== STATUS.PENDING) {\n                    ammActivityStatusUnset();\n                    ammMapStatusUnset();\n                    updateTickersUI();\n                }\n                break;\n            default :\n                break;\n        }\n    }, [ammMapStatus, ammActivityStatus, ammActivityStatusUnset, ammMapStatusUnset, updateTickersUI]);\n    // init AmmMap at begin\n    React.useEffect(() => {\n        if (!ammMap || Object.keys(ammMap).length === 0) {\n            updateAmmMap();\n        }\n        if(!ammActivityMap || Object.keys(ammActivityMap).length === 0){\n            updateAmmActivityMap();\n        } else {\n            updateTickersUI();\n        }\n    },[]);\n\n\n\n\n    return {\n        ammActivities:data,\n        // updateTickersUI,\n    }\n}\n\n// export function useTickerUI({pageState:number,pageSize:}) {\n//\n//     React.useEffect(() => {\n//         if (!tickerMap || Object.keys(tickerMap).length === 0) {\n//             updateAmmMap();\n//         }else{\n//\n//         }\n//     }, [ammMap, updateAmmMap]);\n//     React.useEffect(() => {\n//         switch (ammMapStatus) {\n//             case \"ERROR\":\n//                 console.log(\"ERROR\");\n//                 ammMapStatusUnset()\n//                 break;\n//             case \"PENDING\":\n//                 ammMapStatusUnset()\n//                 break;\n//             default:\n//                 break;\n//         }\n//     }, [ammMapStatus, ammMapStatusUnset]);\n//     return {\n//         ammMapObj: {\n//             ammMap,\n//             status: ammMapStatus,\n//             errorMessage: errorAmmMap\n//         }\n//     }\n// }","import React from 'react'\nimport styled from '@emotion/styled'\nimport { Box, Grid, Typography } from '@material-ui/core'\nimport { WithTranslation, withTranslation } from 'react-i18next'\nimport {\n    AmmRecordTable,\n    AmmTradeType,\n    ChartType,\n    ScaleAreaChart,\n    TablePaddingX,\n    ToggleButtonGroup,\n    useSettings\n} from '@loopring-web/component-lib'\nimport { MyPoolRow as Row, MyPoolTable } from '@loopring-web/component-lib/components/tableList/myPoolTable';\nimport {\n    CoinInfo,\n    Currency,\n    getThousandFormattedNumbers,\n    PriceTag\n} from '@loopring-web/component-lib/src/static-resource';\nimport { AmmRecordRow } from '@loopring-web/component-lib/components/tableList/ammRecordTable/Interface';\nimport moment from 'moment';\n\n\n//TODO: FIXED:  demo data\nconst coinMap = {\n    ETH: {\n        icon: 'https://exchange.loopring.io/assets/images/ethereum/assets/0x9A0aBA393aac4dFbFf4333B06c407458002C6183/logo.png',\n        name: 'ETH',\n        simpleName: 'ETH',\n        description: '',\n        company: 'ETH'\n    },\n    LRC: {\n        icon: 'https://exchange.loopring.io/assets/images/ethereum/assets/0x565aBA393aac4dFbFf4333B06c407458002C6183/logo.png',\n        name: 'LRC',\n        simpleName: 'LRC',\n        description: '',\n        company: 'LRC'\n    },\n    USTD: {\n        icon: 'https://exchange.loopring.io/assets/images/ethereum/assets/0x565aBA393aac4dFbFf4333B06c407458002C6183/logo.png',\n        name: 'USTD',\n        simpleName: 'USTD',\n        description: '',\n        company: 'USTD'\n    }\n}\nconst ammRecordArray:AmmRecordRow<any>[] = [\n    {\n        type: AmmTradeType.add,\n        coinA: coinMap[ 'ETH' ] as CoinInfo<any>,\n        coinB: coinMap[ 'LRC' ] as CoinInfo<any>,\n        totalDollar: 12,\n        totalYuan: 194.89,\n        amountA: 122,\n        amountB: 231,\n        time: moment().add(-1, 'days').toDate().getTime()\n    },\n    {\n        type: AmmTradeType.remove,\n        coinA: coinMap[ 'ETH' ] as CoinInfo<any>,\n        coinB: coinMap[ 'LRC' ] as CoinInfo<any>,\n        totalDollar: 12,\n        totalYuan: 194.89,\n        amountA: 122,\n        amountB: 231,\n        time: moment().add(-100, 'days').toDate().getTime()\n    },\n    {\n        type: AmmTradeType.swap,\n        coinA: coinMap[ 'ETH' ] as CoinInfo<any>,\n        coinB: coinMap[ 'LRC' ] as CoinInfo<any>,\n        totalDollar: 12,\n        totalYuan: 194.89,\n        amountA: 122,\n        amountB: 231,\n        time: moment().add(-15, 'days').toDate().getTime()\n    },\n    {\n        type: AmmTradeType.swap,\n        coinA: coinMap[ 'ETH' ] as CoinInfo<any>,\n        coinB: coinMap[ 'LRC' ] as CoinInfo<any>,\n        totalDollar: 12,\n        totalYuan: 194.89,\n        amountA: 122,\n        amountB: 231,\n        time: moment().add(-3, 'hours').toDate().getTime()\n    },\n    {\n        type: AmmTradeType.swap,\n        coinA: coinMap[ 'ETH' ] as CoinInfo<any>,\n        coinB: coinMap[ 'LRC' ] as CoinInfo<any>,\n        totalDollar: 12,\n        totalYuan: 194.89,\n        amountA: 122,\n        amountB: 231,\n        time: moment().add(-75, 'second').toDate().getTime()\n    }\n]\nconst rawData: Row<any>[] = [\n    {\n        feeA:122,\n        feeB:21,\n        feeDollar: 0.0012,\n        feeYuan:  0.0312,\n        reward:123,\n        rewardToken:{\n            icon: 'https://exchange.loopring.io/assets/images/ethereum/assets/0x565aBA393aac4dFbFf4333B06c407458002C6183/logo.png',\n            name: 'USDT',\n            simpleName: 'USDT',\n            description: '',\n            company: 'USDT'\n        },\n        balanceA:12131,\n        balanceB:0.0012,\n        balanceYuan: 1232131,\n        balanceDollar: 232,\n        ammDetail:  {\n            coinAInfo: {\n                icon: 'https://exchange.loopring.io/assets/images/ethereum/assets/0x9A0aBA393aac4dFbFf4333B06c407458002C6183/logo.png',\n                name: 'ETH',\n                simpleName: 'ETH',\n                description: '',\n                company: 'ETH'\n            },\n            coinBInfo: {\n                icon: 'https://exchange.loopring.io/assets/images/ethereum/assets/0x565aBA393aac4dFbFf4333B06c407458002C6183/logo.png',\n                name: 'LRC',\n                simpleName: 'LRC',\n                description: '',\n                company: 'LRC'\n            },\n            amountDollar: 12,\n            amountYuan: 194.89,\n            totalLPToken: 12132131,\n            totalA: 0.002,\n            totalB: 12344,\n            isNew: true,\n            isActivity: false,\n        }\n    },\n    {\n        feeA:122,\n        feeB:21,\n        feeDollar: 0.0012,\n        feeYuan:  0.0312,\n        reward:123,\n        rewardToken:{\n            icon: 'https://exchange.loopring.io/assets/images/ethereum/assets/0x565aBA393aac4dFbFf4333B06c407458002C6183/logo.png',\n            name: 'USDT',\n            simpleName: 'USDT',\n            description: '',\n            company: 'USDT'\n        },\n        balanceA:12131,\n        balanceB:0.0012,\n        balanceYuan: 1232131,\n        balanceDollar: 232,\n        ammDetail:  {\n            coinAInfo: {\n                icon: 'https://exchange.loopring.io/assets/images/ethereum/assets/0x9A0aBA393aac4dFbFf4333B06c407458002C6183/logo.png',\n                name: 'ETH',\n                simpleName: 'ETH',\n                description: '',\n                company: 'ETH'\n            },\n            coinBInfo: {\n                icon: 'https://exchange.loopring.io/assets/images/ethereum/assets/0x565aBA393aac4dFbFf4333B06c407458002C6183/logo.png',\n                name: 'LRC',\n                simpleName: 'LRC',\n                description: '',\n                company: 'LRC'\n            },\n            amountDollar: 12,\n            amountYuan: 194.89,\n            totalLPToken: 12132131,\n            totalA: 0.002,\n            totalB: 12344,\n            isNew: true,\n            isActivity: false,\n        }\n    },\n    {\n        feeA:122,\n        feeB:21,\n        feeDollar: 0.0012,\n        feeYuan:  0.0312,\n        reward:123,\n        rewardToken:{\n            icon: 'https://exchange.loopring.io/assets/images/ethereum/assets/0x565aBA393aac4dFbFf4333B06c407458002C6183/logo.png',\n            name: 'USDT',\n            simpleName: 'USDT',\n            description: '',\n            company: 'USDT'\n        },\n        balanceA:12131,\n        balanceB:0.0012,\n        balanceYuan: 1232131,\n        balanceDollar: 232,\n        ammDetail:  {\n            coinAInfo: {\n                icon: 'https://exchange.loopring.io/assets/images/ethereum/assets/0x9A0aBA393aac4dFbFf4333B06c407458002C6183/logo.png',\n                name: 'ETH',\n                simpleName: 'ETH',\n                description: '',\n                company: 'ETH'\n            },\n            coinBInfo: {\n                icon: 'https://exchange.loopring.io/assets/images/ethereum/assets/0x565aBA393aac4dFbFf4333B06c407458002C6183/logo.png',\n                name: 'LRC',\n                simpleName: 'LRC',\n                description: '',\n                company: 'LRC'\n            },\n            amountDollar: 12,\n            amountYuan: 194.89,\n            totalLPToken: 12132131,\n            totalA: 0.002,\n            totalB: 12344,\n            isNew: true,\n            isActivity: false,\n        }\n    },\n    {\n        feeA:122,\n        feeB:21,\n        feeDollar: 0.0012,\n        feeYuan:  0.0312,\n        reward:123,\n        rewardToken:{\n            icon: 'https://exchange.loopring.io/assets/images/ethereum/assets/0x565aBA393aac4dFbFf4333B06c407458002C6183/logo.png',\n            name: 'USDT',\n            simpleName: 'USDT',\n            description: '',\n            company: 'USDT'\n        },\n        balanceA:12131,\n        balanceB:0.0012,\n        balanceYuan: 1232131,\n        balanceDollar: 232,\n        ammDetail:  {\n            coinAInfo: {\n                icon: 'https://exchange.loopring.io/assets/images/ethereum/assets/0x9A0aBA393aac4dFbFf4333B06c407458002C6183/logo.png',\n                name: 'ETH',\n                simpleName: 'ETH',\n                description: '',\n                company: 'ETH'\n            },\n            coinBInfo: {\n                icon: 'https://exchange.loopring.io/assets/images/ethereum/assets/0x565aBA393aac4dFbFf4333B06c407458002C6183/logo.png',\n                name: 'LRC',\n                simpleName: 'LRC',\n                description: '',\n                company: 'LRC'\n            },\n            amountDollar: 12,\n            amountYuan: 194.89,\n            totalLPToken: 12132131,\n            totalA: 0.002,\n            totalB: 12344,\n            isNew: true,\n            isActivity: false,\n        }\n    },\n    {\n        feeA:122,\n        feeB:21,\n        feeDollar: 0.0012,\n        feeYuan:  0.0312,\n        reward:123,\n        rewardToken:{\n            icon: 'https://exchange.loopring.io/assets/images/ethereum/assets/0x565aBA393aac4dFbFf4333B06c407458002C6183/logo.png',\n            name: 'USDT',\n            simpleName: 'USDT',\n            description: '',\n            company: 'USDT'\n        },\n        balanceA:12131,\n        balanceB:0.0012,\n        balanceYuan: 1232131,\n        balanceDollar: 232,\n        ammDetail:  {\n            coinAInfo: {\n                icon: 'https://exchange.loopring.io/assets/images/ethereum/assets/0x9A0aBA393aac4dFbFf4333B06c407458002C6183/logo.png',\n                name: 'ETH',\n                simpleName: 'ETH',\n                description: '',\n                company: 'ETH'\n            },\n            coinBInfo: {\n                icon: 'https://exchange.loopring.io/assets/images/ethereum/assets/0x565aBA393aac4dFbFf4333B06c407458002C6183/logo.png',\n                name: 'LRC',\n                simpleName: 'LRC',\n                description: '',\n                company: 'LRC'\n            },\n            amountDollar: 12,\n            amountYuan: 194.89,\n            totalLPToken: 12132131,\n            totalA: 0.002,\n            totalB: 12344,\n            isNew: true,\n            isActivity: false,\n        }\n    },\n]\n\n\nconst toggleData = [\n    {value: '24 H', key: '24 H'},\n    {value: '1 W', key: '1 W'},\n    {value: 'ALL', key: 'ALL'},\n]\n\nconst StylePaper = styled(Box)`\n    width: 100%;\n    height: 100%;\n    flex: 1;\n` as typeof Box;\n\nconst StyleWrapper = styled(Grid)`\n  position: relative;\n  width: 100%;\n  background-color: ${({theme}) => theme.colorBase.background().default};\n  border-radius: ${({theme}) => theme.unit}px;\n` as typeof Grid\n\n\n\n// const StyleGrid = styled(Grid)`\n//     display: flex;\n//     flex-direction: column;\n//     justify-content: space-around;\n// ` as typeof Grid\n\n\n\n\nconst StyledBtnGroupWrapper = styled(Box)`\n    position: absolute;\n    z-index: 99;\n    top: ${({ theme }) => theme.unit}px;\n    width: 100%;\n` as typeof Box\n\nconst  TableWrapStyled = styled(Grid)`\n  &{\n    background-color: ${({theme}) => theme.colorBase.background().default};\n    ${({theme}) => theme.border.defaultFrame({c_key: 'blur', d_R: 1})};\n  }\n \n  ${({theme}) => TablePaddingX({pLeft:theme.unit * 3,pRight:theme.unit * 3})}\n` as typeof Grid\n\nexport const LiquidityOverview = withTranslation('common')(({ t, ...rest }: WithTranslation) => {\n    const [chartPeriod, setChartPeriod] = React.useState('ALL');\n    const [page, setPage] = React.useState(  1);\n    const {currency} = useSettings();\n    const {totalDollar,totalYuan,totalFeeDollar,totalFeeYuan, totalMiningDollar, totalMiningYuan} = {\n        totalDollar :1000,\n        totalYuan:33,\n        totalFeeDollar:323,totalFeeYuan:12, totalMiningDollar:232, totalMiningYuan:35}\n\n    const _handlePageChange = React.useCallback((page: number) => {\n        setPage(page);\n        // updateData({actionType: ActionType.page, currPage: page})\n    }, [])\n    return (\n        <>\n            <StyleWrapper container  spacing={1} padding={3} margin={0} >\n                <Grid display={'flex'} flexDirection={'column'} justifyContent={'space-around'} item sm={3}>\n                    <Typography variant={'body1'} component={'h5'} color={'textSecondary'}>{t('labelTotalPositionValue')}</Typography>\n                    <Typography variant={'h4'} marginTop={1}>\n                        {totalDollar === undefined ? 'N/A' : currency === Currency.dollar ?  PriceTag.Dollar + getThousandFormattedNumbers(totalDollar)\n                            :  PriceTag.Yuan + getThousandFormattedNumbers(totalYuan as number)}\n                    </Typography>\n                </Grid>\n                <Grid display={'flex'} flexDirection={'column'} justifyContent={'space-around'} item sm={3}>\n                    <Typography variant={'body1'} component={'h5'} color={'textSecondary'}>{t('labelFeeRewards')}</Typography>\n                    <Typography variant={'h4'} marginTop={1}>\n                        {totalFeeDollar === undefined ? 'N/A' : currency === Currency.dollar ?  PriceTag.Dollar + getThousandFormattedNumbers(totalFeeDollar)\n                            :  PriceTag.Yuan + getThousandFormattedNumbers(totalFeeYuan as number)}\n                    </Typography>\n                </Grid>\n                <Grid display={'flex'} flexDirection={'column'} justifyContent={'space-around'} item sm={3}>\n                    <Typography variant={'body1'} component={'h5'} color={'textSecondary'}>{t('labelMiningRewards')}</Typography>\n                    <Typography variant={'h4'} marginTop={1}>\n                        {totalMiningDollar === undefined ? 'N/A' : currency === Currency.dollar ?  PriceTag.Dollar + getThousandFormattedNumbers(totalMiningDollar)\n                            :  PriceTag.Yuan + getThousandFormattedNumbers(totalMiningYuan as number)}\n                    </Typography>\n                </Grid>\n            </StyleWrapper>\n            <StyleWrapper container marginY={2} height={340} >\n                    <StyledBtnGroupWrapper display={'flex'} padding={3} justifyContent={'space-between'}>\n                        <Typography variant={'body1'} component={'h5'} color={'textSecondary'}>{t('labelLiquidityValue')}</Typography>\n                        <Box marginRight={-1}>\n                            <ToggleButtonGroup  exclusive size=\"small\" {...{ ...rest, t, data: toggleData, value: chartPeriod, setValue: setChartPeriod}} />\n                        </Box>\n                    </StyledBtnGroupWrapper>\n                    <ScaleAreaChart type={ChartType.Trend} data={[]} />\n            </StyleWrapper>\n            <Typography paddingLeft={2} variant={'h4'} >{t('labelMyAmm')}</Typography>\n            <TableWrapStyled container marginY={2} paddingY={2} flex={1} height={568}>\n                <Grid item xs={12} display={'flex'} flexDirection={'column'} >\n                    <MyPoolTable\n\n                        rawData={rawData}\n                        pagination= {{pageSize: 5}}\n                        handleDeposit={(row:any)=>{console.log()}}\n                        handleWithdraw={(row:any)=>{console.log()}}\n                        handlePageChange={()=>{}}\n                    />\n                </Grid>\n            </TableWrapStyled>\n            <Typography paddingLeft={2} variant={'h4'} >{t('labelMyAmmRecord')}</Typography>\n            <TableWrapStyled container marginY={2} paddingY={2} flex={1}>\n                <Grid item xs={12} display={'flex'} flexDirection={'column'}>\n                    <AmmRecordTable rawData={ammRecordArray} handlePageChange={_handlePageChange} page={page} />\n                </Grid>\n            </TableWrapStyled>\n        </>\n    )\n})","import { useRouteMatch } from 'react-router'\n\nimport { Box } from '@material-ui/core'\nimport {\n    SubMenu,\n    SubMenuList as BasicSubMenuList,\n} from '@loopring-web/component-lib'\nimport { withTranslation } from 'react-i18next'\nimport { subMenuLiquidity } from '@loopring-web/component-lib/src/static-resource'\nimport { PoolsPanel } from './PoolsPanel'\nimport { CoinPairPanel } from './CoinPairPanel';\nimport { AmmMiningView } from './AmmMining';\nimport { LiquidityOverview } from './LiquidityOverview'\n// import { useAmmPool } from './hook'\n\nexport const subMenu = subMenuLiquidity\n\nconst SubMenuList = withTranslation(['layout','common'], { withRef: true })(BasicSubMenuList);\nexport const LiquidityPage = () => {\n\n    // const { ammFee } = useAmmPool('LRC', 'ETH')\n    //\n    // console.log('--- > ammFee:', ammFee)\n    //\n    let match: any = useRouteMatch(['/liquidity/:item',':next/']);\n    const selected = match?.params.item ?? 'pools'\n    let matchPair: any = useRouteMatch(['/liquidity/:item/:next/:symbol']);\n    let symbol:any = undefined\n    if (matchPair && matchPair?.params?.next && matchPair.params.item === 'pools') {\n       if(!matchPair.params.symbol){\n           symbol='LRC-ETH';\n       }else{\n           symbol=matchPair.params.symbol;\n       }\n    }\n    \n    return (\n        <>\n            { symbol && <Box display={'flex'} flexDirection={'column'}  flex={1} alignSelf={'flex-start'}>\n              <CoinPairPanel />\n            </Box>\n            }\n            {!symbol && <>  <Box width={'200px'} display={'flex'} justifyContent={'stretch'} marginRight={3}>\n                    <SubMenu>\n                        <SubMenuList selected={selected} subMenu={subMenu as any} />\n                    </SubMenu>\n                </Box>\n                <Box  minHeight={420}  display={'flex'} alignItems={'stretch'} justifyContent={'stretch'} flexDirection=\"column\" marginTop={0} flex={1}>\n                    {(selected === 'pools' && !symbol ) && <PoolsPanel />}\n                    {(selected === 'amm-mining' && !symbol ) && <AmmMiningView />}\n                    {(selected === 'my-liquidity' && !symbol ) && <LiquidityOverview />}\n                    {selected === 'orderBook-Mining' && <AmmMiningView />}\n                    {/*{selected === 'orders' && <OrderPanel />}*/}\n                </Box>\n             </>\n            }\n        </>\n    )\n\n}\n","import { HashRouter as Router, Route, Switch, } from 'react-router-dom'\n\nimport Header from 'layouts/header'\n\nimport QuotePage from 'pages/QuotePage'\nimport SwapPage from 'pages/SwapPage'\n\nimport DebugPage from 'pages/DebugPage'\n\nimport Container from '@material-ui/core/Container'\nimport { Box } from '@material-ui/core'\nimport { DevWrapper } from '../provider/'\nimport { Layer2Page } from '../pages/Layer2Page'\nimport { LiquidityPage } from '../pages/LiquidityPage'\n\nconst RouterView = () => {\n    // const SwapPageWrap = ()=> <SwapPage />\n    // const QuotePageWrap = ()=> <SwapPage />\n    return <Router>\n        <Header/>\n\n        {/*<Box style={{marginTop: `var(--header-height)`}} flex={1} display={'flex'}>*/}\n        <Container maxWidth=\"lg\" style={{minHeight:'calc(100% - 64px - 32px)',display:'flex',flexDirection:'column'}}>\n            {/*style={{height: '100%' }}*/}\n            <Box display={'flex'} flex={1} alignItems={'stretch'} flexDirection={'row'} marginTop={3}  >\n                <Switch>\n                    <Route exact component={SwapPage} path='/'/>\n                    <Route exact component={QuotePage} path='/markets'/>\n                    <Route component={SwapPage} path='/trading/lite'/>\n                    <Route component={SwapPage} path='/trading/lite(/:symbol)'/>\n\n                    <Route exact component={Layer2Page} path='/layer2'/>\n                    <Route exact component={Layer2Page} path='/layer2/assets'/>\n                    <Route exact component={Layer2Page} path='/layer2/transactions'/>\n                    <Route exact component={Layer2Page} path='/layer2/trades'/>\n                    <Route exact component={Layer2Page} path='/layer2/orders'/>\n                    <Route exact component={Layer2Page} path='/layer2/setting'/>\n\n                    <Route exact component={LiquidityPage} path='/liquidity'/>\n                    <Route exact component={LiquidityPage} path='/liquidity/pools/*'/>\n                    <Route exact component={LiquidityPage} path='/liquidity/pools'/>\n                    {/*<Route exact component={LiquidityPage} path='/liquidity/pools/coinPair(/:symbol)'/>*/}\n                    <Route exact component={LiquidityPage} path='/liquidity/amm-mining'/>\n                    <Route exact component={LiquidityPage} path='/liquidity/my-liquidity'/>\n                    <Route exact component={LiquidityPage} path='/liquidity/orderBook-Mining'/>\n                    <Route exact component={LiquidityPage} path='/liquidity/maker-rebates'/>\n\n                    <DevWrapper>\n                        <Route exact path='/debug'>\n                            <DebugPage/>\n                        </Route>\n                    </DevWrapper>\n\n                </Switch>\n            </Box>\n        </Container>\n        {/*</Box>*/}\n\n    </Router>\n}\n\nexport default RouterView\n"],"sourceRoot":""}