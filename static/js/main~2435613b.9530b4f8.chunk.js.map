{"version":3,"sources":["../../../node_modules/bignumber.js/bignumber.js","../../../node_modules/big-integer/BigInteger.js"],"names":["globalObject","BigNumber","isNumeric","mathceil","Math","ceil","mathfloor","floor","bignumberError","tooManyDigits","BASE","LOG_BASE","MAX_SAFE_INTEGER","POWS_TEN","SQRT_BASE","MAX","bitFloor","n","i","coeffToString","a","s","z","j","length","r","charCodeAt","slice","compare","x","y","b","xc","c","yc","k","e","l","intCheck","min","max","name","Error","String","isOdd","toExponential","str","charAt","toFixedPoint","len","zs","clone","configObject","div","convertBase","parseNumeric","P","prototype","constructor","toString","valueOf","ONE","DECIMAL_PLACES","ROUNDING_MODE","TO_EXP_NEG","TO_EXP_POS","MIN_EXP","MAX_EXP","CRYPTO","MODULO_MODE","POW_PRECISION","FORMAT","prefix","groupSize","secondaryGroupSize","groupSeparator","decimalSeparator","fractionGroupSize","fractionGroupSeparator","suffix","ALPHABET","v","alphabet","caseChanged","isNum","this","_isBigNumber","test","indexOf","replace","search","substring","round","DEBUG","toUpperCase","toLowerCase","push","format","rm","id","c0","ne","maxOrMin","args","method","m","call","normalise","pop","sd","d","ni","rd","pows10","out","ROUND_UP","ROUND_DOWN","ROUND_CEIL","ROUND_FLOOR","ROUND_HALF_UP","ROUND_HALF_DOWN","ROUND_HALF_EVEN","ROUND_HALF_CEIL","ROUND_HALF_FLOOR","EUCLID","config","set","obj","p","hasOwnProperty","crypto","getRandomValues","randomBytes","EXPONENTIAL_AT","RANGE","isBigNumber","maximum","arguments","lt","minimum","gt","random","pow2_53","random53bitInt","dp","rand","Uint32Array","copy","splice","sum","plus","decimal","toBaseOut","baseIn","baseOut","arrL","arr","reverse","sign","callerIsToString","pow","concat","multiply","base","temp","xlo","xhi","carry","klo","khi","aL","bL","cmp","subtract","more","prod","prodL","q","qc","rem","remL","rem0","xi","xL","yc0","yL","yz","NaN","basePrefix","dotAfter","dotBefore","isInfinityOrNaN","whitespaceOrPlus","isNaN","p1","p2","absoluteValue","abs","comparedTo","decimalPlaces","dividedBy","dividedToIntegerBy","idiv","exponentiatedBy","half","isModExp","nIsBig","nIsNeg","nIsOdd","isInteger","mod","times","integerValue","isEqualTo","eq","isFinite","isGreaterThan","isGreaterThanOrEqualTo","gte","isLessThan","isLessThanOrEqualTo","lte","isNegative","isPositive","isZero","minus","t","xLTy","xe","ye","modulo","multipliedBy","xcL","ycL","ylo","yhi","zc","sqrtBase","negated","precision","shiftedBy","squareRoot","sqrt","rep","toFixed","toFormat","split","g1","g2","intPart","fractionPart","isNeg","intDigits","substr","RegExp","toFraction","md","d0","d1","d2","exp","n0","n1","toNumber","toPrecision","toJSON","define","bigInt","undefined","MAX_INT","MAX_INT_ARR","smallToArray","DEFAULT_ALPHABET","supportsNativeBigInt","BigInt","Integer","radix","caseSensitive","parseBase","parseValue","BigInteger","value","isSmall","SmallInteger","NativeBigInt","isPrecise","arrayToSmall","trim","compareAbs","createArray","Array","truncate","add","l_a","l_b","addAny","addSmall","difference","a_l","b_l","borrow","subtractSmall","multiplyLong","product","a_i","multiplySmall","shiftLeft","multiplyKaratsuba","ac","bd","abcd","multiplySmallAndArray","square","divModSmall","lambda","remainder","divisor","quotient","divModAny","self","negate","comparison","quotientDigit","shift","result","divisorMostSignificantDigit","divMod1","guess","xlen","highx","highy","check","part","unshift","divMod2","qSign","mSign","isBasicPrime","isUnit","equals","isEven","isDivisibleBy","lesser","millerRabinTest","nPrev","prev","divide","next","modPow","Object","create","subtractAny","small","l1","l2","_multiplyBySmall","divmod","over","_0","_1","_2","modInv","Infinity","compareTo","notEquals","neq","greater","greaterOrEquals","geq","lesserOrEquals","leq","isPrime","strict","bits","bitLength","logN","log","toJSNumber","isProbablePrime","iterations","rng","randBetween","lastT","lastR","zero","newT","one","newR","powersOfTwo","powers2Length","highestPower2","shift_isSmall","bitwise","fn","xSign","ySign","xRem","not","yRem","xDigit","yDigit","xDivMod","yDivMod","shiftRight","remQuo","and","or","xor","LOBMASK_I","roughLOB","integerLogarithm","tmp","gcd","text","absBase","alphabetValues","digits","start","parseBaseFromArray","val","toBase","apply","map","neg","Number","left","digit","toBaseString","stringify","join","parseStringValue","decimalPlace","parseNumberValue","toArray","parseInt","minusOne","lcm","isInstance","usedRNG","low","range","restricted","top","fromArray","module","exports"],"mappings":"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","file":"static/js/main~2435613b.9530b4f8.chunk.js","sourcesContent":[";(function (globalObject) {\r\n  'use strict';\r\n\r\n/*\r\n *      bignumber.js v9.0.1\r\n *      A JavaScript library for arbitrary-precision arithmetic.\r\n *      https://github.com/MikeMcl/bignumber.js\r\n *      Copyright (c) 2020 Michael Mclaughlin <M8ch88l@gmail.com>\r\n *      MIT Licensed.\r\n *\r\n *      BigNumber.prototype methods     |  BigNumber methods\r\n *                                      |\r\n *      absoluteValue            abs    |  clone\r\n *      comparedTo                      |  config               set\r\n *      decimalPlaces            dp     |      DECIMAL_PLACES\r\n *      dividedBy                div    |      ROUNDING_MODE\r\n *      dividedToIntegerBy       idiv   |      EXPONENTIAL_AT\r\n *      exponentiatedBy          pow    |      RANGE\r\n *      integerValue                    |      CRYPTO\r\n *      isEqualTo                eq     |      MODULO_MODE\r\n *      isFinite                        |      POW_PRECISION\r\n *      isGreaterThan            gt     |      FORMAT\r\n *      isGreaterThanOrEqualTo   gte    |      ALPHABET\r\n *      isInteger                       |  isBigNumber\r\n *      isLessThan               lt     |  maximum              max\r\n *      isLessThanOrEqualTo      lte    |  minimum              min\r\n *      isNaN                           |  random\r\n *      isNegative                      |  sum\r\n *      isPositive                      |\r\n *      isZero                          |\r\n *      minus                           |\r\n *      modulo                   mod    |\r\n *      multipliedBy             times  |\r\n *      negated                         |\r\n *      plus                            |\r\n *      precision                sd     |\r\n *      shiftedBy                       |\r\n *      squareRoot               sqrt   |\r\n *      toExponential                   |\r\n *      toFixed                         |\r\n *      toFormat                        |\r\n *      toFraction                      |\r\n *      toJSON                          |\r\n *      toNumber                        |\r\n *      toPrecision                     |\r\n *      toString                        |\r\n *      valueOf                         |\r\n *\r\n */\r\n\r\n\r\n  var BigNumber,\r\n    isNumeric = /^-?(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+-]?\\d+)?$/i,\r\n    mathceil = Math.ceil,\r\n    mathfloor = Math.floor,\r\n\r\n    bignumberError = '[BigNumber Error] ',\r\n    tooManyDigits = bignumberError + 'Number primitive has more than 15 significant digits: ',\r\n\r\n    BASE = 1e14,\r\n    LOG_BASE = 14,\r\n    MAX_SAFE_INTEGER = 0x1fffffffffffff,         // 2^53 - 1\r\n    // MAX_INT32 = 0x7fffffff,                   // 2^31 - 1\r\n    POWS_TEN = [1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13],\r\n    SQRT_BASE = 1e7,\r\n\r\n    // EDITABLE\r\n    // The limit on the value of DECIMAL_PLACES, TO_EXP_NEG, TO_EXP_POS, MIN_EXP, MAX_EXP, and\r\n    // the arguments to toExponential, toFixed, toFormat, and toPrecision.\r\n    MAX = 1E9;                                   // 0 to MAX_INT32\r\n\r\n\r\n  /*\r\n   * Create and return a BigNumber constructor.\r\n   */\r\n  function clone(configObject) {\r\n    var div, convertBase, parseNumeric,\r\n      P = BigNumber.prototype = { constructor: BigNumber, toString: null, valueOf: null },\r\n      ONE = new BigNumber(1),\r\n\r\n\r\n      //----------------------------- EDITABLE CONFIG DEFAULTS -------------------------------\r\n\r\n\r\n      // The default values below must be integers within the inclusive ranges stated.\r\n      // The values can also be changed at run-time using BigNumber.set.\r\n\r\n      // The maximum number of decimal places for operations involving division.\r\n      DECIMAL_PLACES = 20,                     // 0 to MAX\r\n\r\n      // The rounding mode used when rounding to the above decimal places, and when using\r\n      // toExponential, toFixed, toFormat and toPrecision, and round (default value).\r\n      // UP         0 Away from zero.\r\n      // DOWN       1 Towards zero.\r\n      // CEIL       2 Towards +Infinity.\r\n      // FLOOR      3 Towards -Infinity.\r\n      // HALF_UP    4 Towards nearest neighbour. If equidistant, up.\r\n      // HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.\r\n      // HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.\r\n      // HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.\r\n      // HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.\r\n      ROUNDING_MODE = 4,                       // 0 to 8\r\n\r\n      // EXPONENTIAL_AT : [TO_EXP_NEG , TO_EXP_POS]\r\n\r\n      // The exponent value at and beneath which toString returns exponential notation.\r\n      // Number type: -7\r\n      TO_EXP_NEG = -7,                         // 0 to -MAX\r\n\r\n      // The exponent value at and above which toString returns exponential notation.\r\n      // Number type: 21\r\n      TO_EXP_POS = 21,                         // 0 to MAX\r\n\r\n      // RANGE : [MIN_EXP, MAX_EXP]\r\n\r\n      // The minimum exponent value, beneath which underflow to zero occurs.\r\n      // Number type: -324  (5e-324)\r\n      MIN_EXP = -1e7,                          // -1 to -MAX\r\n\r\n      // The maximum exponent value, above which overflow to Infinity occurs.\r\n      // Number type:  308  (1.7976931348623157e+308)\r\n      // For MAX_EXP > 1e7, e.g. new BigNumber('1e100000000').plus(1) may be slow.\r\n      MAX_EXP = 1e7,                           // 1 to MAX\r\n\r\n      // Whether to use cryptographically-secure random number generation, if available.\r\n      CRYPTO = false,                          // true or false\r\n\r\n      // The modulo mode used when calculating the modulus: a mod n.\r\n      // The quotient (q = a / n) is calculated according to the corresponding rounding mode.\r\n      // The remainder (r) is calculated as: r = a - n * q.\r\n      //\r\n      // UP        0 The remainder is positive if the dividend is negative, else is negative.\r\n      // DOWN      1 The remainder has the same sign as the dividend.\r\n      //             This modulo mode is commonly known as 'truncated division' and is\r\n      //             equivalent to (a % n) in JavaScript.\r\n      // FLOOR     3 The remainder has the same sign as the divisor (Python %).\r\n      // HALF_EVEN 6 This modulo mode implements the IEEE 754 remainder function.\r\n      // EUCLID    9 Euclidian division. q = sign(n) * floor(a / abs(n)).\r\n      //             The remainder is always positive.\r\n      //\r\n      // The truncated division, floored division, Euclidian division and IEEE 754 remainder\r\n      // modes are commonly used for the modulus operation.\r\n      // Although the other rounding modes can also be used, they may not give useful results.\r\n      MODULO_MODE = 1,                         // 0 to 9\r\n\r\n      // The maximum number of significant digits of the result of the exponentiatedBy operation.\r\n      // If POW_PRECISION is 0, there will be unlimited significant digits.\r\n      POW_PRECISION = 0,                    // 0 to MAX\r\n\r\n      // The format specification used by the BigNumber.prototype.toFormat method.\r\n      FORMAT = {\r\n        prefix: '',\r\n        groupSize: 3,\r\n        secondaryGroupSize: 0,\r\n        groupSeparator: ',',\r\n        decimalSeparator: '.',\r\n        fractionGroupSize: 0,\r\n        fractionGroupSeparator: '\\xA0',      // non-breaking space\r\n        suffix: ''\r\n      },\r\n\r\n      // The alphabet used for base conversion. It must be at least 2 characters long, with no '+',\r\n      // '-', '.', whitespace, or repeated character.\r\n      // '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_'\r\n      ALPHABET = '0123456789abcdefghijklmnopqrstuvwxyz';\r\n\r\n\r\n    //------------------------------------------------------------------------------------------\r\n\r\n\r\n    // CONSTRUCTOR\r\n\r\n\r\n    /*\r\n     * The BigNumber constructor and exported function.\r\n     * Create and return a new instance of a BigNumber object.\r\n     *\r\n     * v {number|string|BigNumber} A numeric value.\r\n     * [b] {number} The base of v. Integer, 2 to ALPHABET.length inclusive.\r\n     */\r\n    function BigNumber(v, b) {\r\n      var alphabet, c, caseChanged, e, i, isNum, len, str,\r\n        x = this;\r\n\r\n      // Enable constructor call without `new`.\r\n      if (!(x instanceof BigNumber)) return new BigNumber(v, b);\r\n\r\n      if (b == null) {\r\n\r\n        if (v && v._isBigNumber === true) {\r\n          x.s = v.s;\r\n\r\n          if (!v.c || v.e > MAX_EXP) {\r\n            x.c = x.e = null;\r\n          } else if (v.e < MIN_EXP) {\r\n            x.c = [x.e = 0];\r\n          } else {\r\n            x.e = v.e;\r\n            x.c = v.c.slice();\r\n          }\r\n\r\n          return;\r\n        }\r\n\r\n        if ((isNum = typeof v == 'number') && v * 0 == 0) {\r\n\r\n          // Use `1 / n` to handle minus zero also.\r\n          x.s = 1 / v < 0 ? (v = -v, -1) : 1;\r\n\r\n          // Fast path for integers, where n < 2147483648 (2**31).\r\n          if (v === ~~v) {\r\n            for (e = 0, i = v; i >= 10; i /= 10, e++);\r\n\r\n            if (e > MAX_EXP) {\r\n              x.c = x.e = null;\r\n            } else {\r\n              x.e = e;\r\n              x.c = [v];\r\n            }\r\n\r\n            return;\r\n          }\r\n\r\n          str = String(v);\r\n        } else {\r\n\r\n          if (!isNumeric.test(str = String(v))) return parseNumeric(x, str, isNum);\r\n\r\n          x.s = str.charCodeAt(0) == 45 ? (str = str.slice(1), -1) : 1;\r\n        }\r\n\r\n        // Decimal point?\r\n        if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n\r\n        // Exponential form?\r\n        if ((i = str.search(/e/i)) > 0) {\r\n\r\n          // Determine exponent.\r\n          if (e < 0) e = i;\r\n          e += +str.slice(i + 1);\r\n          str = str.substring(0, i);\r\n        } else if (e < 0) {\r\n\r\n          // Integer.\r\n          e = str.length;\r\n        }\r\n\r\n      } else {\r\n\r\n        // '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\r\n        intCheck(b, 2, ALPHABET.length, 'Base');\r\n\r\n        // Allow exponential notation to be used with base 10 argument, while\r\n        // also rounding to DECIMAL_PLACES as with other bases.\r\n        if (b == 10) {\r\n          x = new BigNumber(v);\r\n          return round(x, DECIMAL_PLACES + x.e + 1, ROUNDING_MODE);\r\n        }\r\n\r\n        str = String(v);\r\n\r\n        if (isNum = typeof v == 'number') {\r\n\r\n          // Avoid potential interpretation of Infinity and NaN as base 44+ values.\r\n          if (v * 0 != 0) return parseNumeric(x, str, isNum, b);\r\n\r\n          x.s = 1 / v < 0 ? (str = str.slice(1), -1) : 1;\r\n\r\n          // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\r\n          if (BigNumber.DEBUG && str.replace(/^0\\.0*|\\./, '').length > 15) {\r\n            throw Error\r\n             (tooManyDigits + v);\r\n          }\r\n        } else {\r\n          x.s = str.charCodeAt(0) === 45 ? (str = str.slice(1), -1) : 1;\r\n        }\r\n\r\n        alphabet = ALPHABET.slice(0, b);\r\n        e = i = 0;\r\n\r\n        // Check that str is a valid base b number.\r\n        // Don't use RegExp, so alphabet can contain special characters.\r\n        for (len = str.length; i < len; i++) {\r\n          if (alphabet.indexOf(c = str.charAt(i)) < 0) {\r\n            if (c == '.') {\r\n\r\n              // If '.' is not the first character and it has not be found before.\r\n              if (i > e) {\r\n                e = len;\r\n                continue;\r\n              }\r\n            } else if (!caseChanged) {\r\n\r\n              // Allow e.g. hexadecimal 'FF' as well as 'ff'.\r\n              if (str == str.toUpperCase() && (str = str.toLowerCase()) ||\r\n                  str == str.toLowerCase() && (str = str.toUpperCase())) {\r\n                caseChanged = true;\r\n                i = -1;\r\n                e = 0;\r\n                continue;\r\n              }\r\n            }\r\n\r\n            return parseNumeric(x, String(v), isNum, b);\r\n          }\r\n        }\r\n\r\n        // Prevent later check for length on converted number.\r\n        isNum = false;\r\n        str = convertBase(str, b, 10, x.s);\r\n\r\n        // Decimal point?\r\n        if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n        else e = str.length;\r\n      }\r\n\r\n      // Determine leading zeros.\r\n      for (i = 0; str.charCodeAt(i) === 48; i++);\r\n\r\n      // Determine trailing zeros.\r\n      for (len = str.length; str.charCodeAt(--len) === 48;);\r\n\r\n      if (str = str.slice(i, ++len)) {\r\n        len -= i;\r\n\r\n        // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\r\n        if (isNum && BigNumber.DEBUG &&\r\n          len > 15 && (v > MAX_SAFE_INTEGER || v !== mathfloor(v))) {\r\n            throw Error\r\n             (tooManyDigits + (x.s * v));\r\n        }\r\n\r\n         // Overflow?\r\n        if ((e = e - i - 1) > MAX_EXP) {\r\n\r\n          // Infinity.\r\n          x.c = x.e = null;\r\n\r\n        // Underflow?\r\n        } else if (e < MIN_EXP) {\r\n\r\n          // Zero.\r\n          x.c = [x.e = 0];\r\n        } else {\r\n          x.e = e;\r\n          x.c = [];\r\n\r\n          // Transform base\r\n\r\n          // e is the base 10 exponent.\r\n          // i is where to slice str to get the first element of the coefficient array.\r\n          i = (e + 1) % LOG_BASE;\r\n          if (e < 0) i += LOG_BASE;  // i < 1\r\n\r\n          if (i < len) {\r\n            if (i) x.c.push(+str.slice(0, i));\r\n\r\n            for (len -= LOG_BASE; i < len;) {\r\n              x.c.push(+str.slice(i, i += LOG_BASE));\r\n            }\r\n\r\n            i = LOG_BASE - (str = str.slice(i)).length;\r\n          } else {\r\n            i -= len;\r\n          }\r\n\r\n          for (; i--; str += '0');\r\n          x.c.push(+str);\r\n        }\r\n      } else {\r\n\r\n        // Zero.\r\n        x.c = [x.e = 0];\r\n      }\r\n    }\r\n\r\n\r\n    // CONSTRUCTOR PROPERTIES\r\n\r\n\r\n    BigNumber.clone = clone;\r\n\r\n    BigNumber.ROUND_UP = 0;\r\n    BigNumber.ROUND_DOWN = 1;\r\n    BigNumber.ROUND_CEIL = 2;\r\n    BigNumber.ROUND_FLOOR = 3;\r\n    BigNumber.ROUND_HALF_UP = 4;\r\n    BigNumber.ROUND_HALF_DOWN = 5;\r\n    BigNumber.ROUND_HALF_EVEN = 6;\r\n    BigNumber.ROUND_HALF_CEIL = 7;\r\n    BigNumber.ROUND_HALF_FLOOR = 8;\r\n    BigNumber.EUCLID = 9;\r\n\r\n\r\n    /*\r\n     * Configure infrequently-changing library-wide settings.\r\n     *\r\n     * Accept an object with the following optional properties (if the value of a property is\r\n     * a number, it must be an integer within the inclusive range stated):\r\n     *\r\n     *   DECIMAL_PLACES   {number}           0 to MAX\r\n     *   ROUNDING_MODE    {number}           0 to 8\r\n     *   EXPONENTIAL_AT   {number|number[]}  -MAX to MAX  or  [-MAX to 0, 0 to MAX]\r\n     *   RANGE            {number|number[]}  -MAX to MAX (not zero)  or  [-MAX to -1, 1 to MAX]\r\n     *   CRYPTO           {boolean}          true or false\r\n     *   MODULO_MODE      {number}           0 to 9\r\n     *   POW_PRECISION       {number}           0 to MAX\r\n     *   ALPHABET         {string}           A string of two or more unique characters which does\r\n     *                                       not contain '.'.\r\n     *   FORMAT           {object}           An object with some of the following properties:\r\n     *     prefix                 {string}\r\n     *     groupSize              {number}\r\n     *     secondaryGroupSize     {number}\r\n     *     groupSeparator         {string}\r\n     *     decimalSeparator       {string}\r\n     *     fractionGroupSize      {number}\r\n     *     fractionGroupSeparator {string}\r\n     *     suffix                 {string}\r\n     *\r\n     * (The values assigned to the above FORMAT object properties are not checked for validity.)\r\n     *\r\n     * E.g.\r\n     * BigNumber.config({ DECIMAL_PLACES : 20, ROUNDING_MODE : 4 })\r\n     *\r\n     * Ignore properties/parameters set to null or undefined, except for ALPHABET.\r\n     *\r\n     * Return an object with the properties current values.\r\n     */\r\n    BigNumber.config = BigNumber.set = function (obj) {\r\n      var p, v;\r\n\r\n      if (obj != null) {\r\n\r\n        if (typeof obj == 'object') {\r\n\r\n          // DECIMAL_PLACES {number} Integer, 0 to MAX inclusive.\r\n          // '[BigNumber Error] DECIMAL_PLACES {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'DECIMAL_PLACES')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, MAX, p);\r\n            DECIMAL_PLACES = v;\r\n          }\r\n\r\n          // ROUNDING_MODE {number} Integer, 0 to 8 inclusive.\r\n          // '[BigNumber Error] ROUNDING_MODE {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'ROUNDING_MODE')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, 8, p);\r\n            ROUNDING_MODE = v;\r\n          }\r\n\r\n          // EXPONENTIAL_AT {number|number[]}\r\n          // Integer, -MAX to MAX inclusive or\r\n          // [integer -MAX to 0 inclusive, 0 to MAX inclusive].\r\n          // '[BigNumber Error] EXPONENTIAL_AT {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'EXPONENTIAL_AT')) {\r\n            v = obj[p];\r\n            if (v && v.pop) {\r\n              intCheck(v[0], -MAX, 0, p);\r\n              intCheck(v[1], 0, MAX, p);\r\n              TO_EXP_NEG = v[0];\r\n              TO_EXP_POS = v[1];\r\n            } else {\r\n              intCheck(v, -MAX, MAX, p);\r\n              TO_EXP_NEG = -(TO_EXP_POS = v < 0 ? -v : v);\r\n            }\r\n          }\r\n\r\n          // RANGE {number|number[]} Non-zero integer, -MAX to MAX inclusive or\r\n          // [integer -MAX to -1 inclusive, integer 1 to MAX inclusive].\r\n          // '[BigNumber Error] RANGE {not a primitive number|not an integer|out of range|cannot be zero}: {v}'\r\n          if (obj.hasOwnProperty(p = 'RANGE')) {\r\n            v = obj[p];\r\n            if (v && v.pop) {\r\n              intCheck(v[0], -MAX, -1, p);\r\n              intCheck(v[1], 1, MAX, p);\r\n              MIN_EXP = v[0];\r\n              MAX_EXP = v[1];\r\n            } else {\r\n              intCheck(v, -MAX, MAX, p);\r\n              if (v) {\r\n                MIN_EXP = -(MAX_EXP = v < 0 ? -v : v);\r\n              } else {\r\n                throw Error\r\n                 (bignumberError + p + ' cannot be zero: ' + v);\r\n              }\r\n            }\r\n          }\r\n\r\n          // CRYPTO {boolean} true or false.\r\n          // '[BigNumber Error] CRYPTO not true or false: {v}'\r\n          // '[BigNumber Error] crypto unavailable'\r\n          if (obj.hasOwnProperty(p = 'CRYPTO')) {\r\n            v = obj[p];\r\n            if (v === !!v) {\r\n              if (v) {\r\n                if (typeof crypto != 'undefined' && crypto &&\r\n                 (crypto.getRandomValues || crypto.randomBytes)) {\r\n                  CRYPTO = v;\r\n                } else {\r\n                  CRYPTO = !v;\r\n                  throw Error\r\n                   (bignumberError + 'crypto unavailable');\r\n                }\r\n              } else {\r\n                CRYPTO = v;\r\n              }\r\n            } else {\r\n              throw Error\r\n               (bignumberError + p + ' not true or false: ' + v);\r\n            }\r\n          }\r\n\r\n          // MODULO_MODE {number} Integer, 0 to 9 inclusive.\r\n          // '[BigNumber Error] MODULO_MODE {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'MODULO_MODE')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, 9, p);\r\n            MODULO_MODE = v;\r\n          }\r\n\r\n          // POW_PRECISION {number} Integer, 0 to MAX inclusive.\r\n          // '[BigNumber Error] POW_PRECISION {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'POW_PRECISION')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, MAX, p);\r\n            POW_PRECISION = v;\r\n          }\r\n\r\n          // FORMAT {object}\r\n          // '[BigNumber Error] FORMAT not an object: {v}'\r\n          if (obj.hasOwnProperty(p = 'FORMAT')) {\r\n            v = obj[p];\r\n            if (typeof v == 'object') FORMAT = v;\r\n            else throw Error\r\n             (bignumberError + p + ' not an object: ' + v);\r\n          }\r\n\r\n          // ALPHABET {string}\r\n          // '[BigNumber Error] ALPHABET invalid: {v}'\r\n          if (obj.hasOwnProperty(p = 'ALPHABET')) {\r\n            v = obj[p];\r\n\r\n            // Disallow if less than two characters,\r\n            // or if it contains '+', '-', '.', whitespace, or a repeated character.\r\n            if (typeof v == 'string' && !/^.?$|[+\\-.\\s]|(.).*\\1/.test(v)) {\r\n              ALPHABET = v;\r\n            } else {\r\n              throw Error\r\n               (bignumberError + p + ' invalid: ' + v);\r\n            }\r\n          }\r\n\r\n        } else {\r\n\r\n          // '[BigNumber Error] Object expected: {v}'\r\n          throw Error\r\n           (bignumberError + 'Object expected: ' + obj);\r\n        }\r\n      }\r\n\r\n      return {\r\n        DECIMAL_PLACES: DECIMAL_PLACES,\r\n        ROUNDING_MODE: ROUNDING_MODE,\r\n        EXPONENTIAL_AT: [TO_EXP_NEG, TO_EXP_POS],\r\n        RANGE: [MIN_EXP, MAX_EXP],\r\n        CRYPTO: CRYPTO,\r\n        MODULO_MODE: MODULO_MODE,\r\n        POW_PRECISION: POW_PRECISION,\r\n        FORMAT: FORMAT,\r\n        ALPHABET: ALPHABET\r\n      };\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if v is a BigNumber instance, otherwise return false.\r\n     *\r\n     * If BigNumber.DEBUG is true, throw if a BigNumber instance is not well-formed.\r\n     *\r\n     * v {any}\r\n     *\r\n     * '[BigNumber Error] Invalid BigNumber: {v}'\r\n     */\r\n    BigNumber.isBigNumber = function (v) {\r\n      if (!v || v._isBigNumber !== true) return false;\r\n      if (!BigNumber.DEBUG) return true;\r\n\r\n      var i, n,\r\n        c = v.c,\r\n        e = v.e,\r\n        s = v.s;\r\n\r\n      out: if ({}.toString.call(c) == '[object Array]') {\r\n\r\n        if ((s === 1 || s === -1) && e >= -MAX && e <= MAX && e === mathfloor(e)) {\r\n\r\n          // If the first element is zero, the BigNumber value must be zero.\r\n          if (c[0] === 0) {\r\n            if (e === 0 && c.length === 1) return true;\r\n            break out;\r\n          }\r\n\r\n          // Calculate number of digits that c[0] should have, based on the exponent.\r\n          i = (e + 1) % LOG_BASE;\r\n          if (i < 1) i += LOG_BASE;\r\n\r\n          // Calculate number of digits of c[0].\r\n          //if (Math.ceil(Math.log(c[0] + 1) / Math.LN10) == i) {\r\n          if (String(c[0]).length == i) {\r\n\r\n            for (i = 0; i < c.length; i++) {\r\n              n = c[i];\r\n              if (n < 0 || n >= BASE || n !== mathfloor(n)) break out;\r\n            }\r\n\r\n            // Last element cannot be zero, unless it is the only element.\r\n            if (n !== 0) return true;\r\n          }\r\n        }\r\n\r\n      // Infinity/NaN\r\n      } else if (c === null && e === null && (s === null || s === 1 || s === -1)) {\r\n        return true;\r\n      }\r\n\r\n      throw Error\r\n        (bignumberError + 'Invalid BigNumber: ' + v);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the maximum of the arguments.\r\n     *\r\n     * arguments {number|string|BigNumber}\r\n     */\r\n    BigNumber.maximum = BigNumber.max = function () {\r\n      return maxOrMin(arguments, P.lt);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the minimum of the arguments.\r\n     *\r\n     * arguments {number|string|BigNumber}\r\n     */\r\n    BigNumber.minimum = BigNumber.min = function () {\r\n      return maxOrMin(arguments, P.gt);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber with a random value equal to or greater than 0 and less than 1,\r\n     * and with dp, or DECIMAL_PLACES if dp is omitted, decimal places (or less if trailing\r\n     * zeros are produced).\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp}'\r\n     * '[BigNumber Error] crypto unavailable'\r\n     */\r\n    BigNumber.random = (function () {\r\n      var pow2_53 = 0x20000000000000;\r\n\r\n      // Return a 53 bit integer n, where 0 <= n < 9007199254740992.\r\n      // Check if Math.random() produces more than 32 bits of randomness.\r\n      // If it does, assume at least 53 bits are produced, otherwise assume at least 30 bits.\r\n      // 0x40000000 is 2^30, 0x800000 is 2^23, 0x1fffff is 2^21 - 1.\r\n      var random53bitInt = (Math.random() * pow2_53) & 0x1fffff\r\n       ? function () { return mathfloor(Math.random() * pow2_53); }\r\n       : function () { return ((Math.random() * 0x40000000 | 0) * 0x800000) +\r\n         (Math.random() * 0x800000 | 0); };\r\n\r\n      return function (dp) {\r\n        var a, b, e, k, v,\r\n          i = 0,\r\n          c = [],\r\n          rand = new BigNumber(ONE);\r\n\r\n        if (dp == null) dp = DECIMAL_PLACES;\r\n        else intCheck(dp, 0, MAX);\r\n\r\n        k = mathceil(dp / LOG_BASE);\r\n\r\n        if (CRYPTO) {\r\n\r\n          // Browsers supporting crypto.getRandomValues.\r\n          if (crypto.getRandomValues) {\r\n\r\n            a = crypto.getRandomValues(new Uint32Array(k *= 2));\r\n\r\n            for (; i < k;) {\r\n\r\n              // 53 bits:\r\n              // ((Math.pow(2, 32) - 1) * Math.pow(2, 21)).toString(2)\r\n              // 11111 11111111 11111111 11111111 11100000 00000000 00000000\r\n              // ((Math.pow(2, 32) - 1) >>> 11).toString(2)\r\n              //                                     11111 11111111 11111111\r\n              // 0x20000 is 2^21.\r\n              v = a[i] * 0x20000 + (a[i + 1] >>> 11);\r\n\r\n              // Rejection sampling:\r\n              // 0 <= v < 9007199254740992\r\n              // Probability that v >= 9e15, is\r\n              // 7199254740992 / 9007199254740992 ~= 0.0008, i.e. 1 in 1251\r\n              if (v >= 9e15) {\r\n                b = crypto.getRandomValues(new Uint32Array(2));\r\n                a[i] = b[0];\r\n                a[i + 1] = b[1];\r\n              } else {\r\n\r\n                // 0 <= v <= 8999999999999999\r\n                // 0 <= (v % 1e14) <= 99999999999999\r\n                c.push(v % 1e14);\r\n                i += 2;\r\n              }\r\n            }\r\n            i = k / 2;\r\n\r\n          // Node.js supporting crypto.randomBytes.\r\n          } else if (crypto.randomBytes) {\r\n\r\n            // buffer\r\n            a = crypto.randomBytes(k *= 7);\r\n\r\n            for (; i < k;) {\r\n\r\n              // 0x1000000000000 is 2^48, 0x10000000000 is 2^40\r\n              // 0x100000000 is 2^32, 0x1000000 is 2^24\r\n              // 11111 11111111 11111111 11111111 11111111 11111111 11111111\r\n              // 0 <= v < 9007199254740992\r\n              v = ((a[i] & 31) * 0x1000000000000) + (a[i + 1] * 0x10000000000) +\r\n                 (a[i + 2] * 0x100000000) + (a[i + 3] * 0x1000000) +\r\n                 (a[i + 4] << 16) + (a[i + 5] << 8) + a[i + 6];\r\n\r\n              if (v >= 9e15) {\r\n                crypto.randomBytes(7).copy(a, i);\r\n              } else {\r\n\r\n                // 0 <= (v % 1e14) <= 99999999999999\r\n                c.push(v % 1e14);\r\n                i += 7;\r\n              }\r\n            }\r\n            i = k / 7;\r\n          } else {\r\n            CRYPTO = false;\r\n            throw Error\r\n             (bignumberError + 'crypto unavailable');\r\n          }\r\n        }\r\n\r\n        // Use Math.random.\r\n        if (!CRYPTO) {\r\n\r\n          for (; i < k;) {\r\n            v = random53bitInt();\r\n            if (v < 9e15) c[i++] = v % 1e14;\r\n          }\r\n        }\r\n\r\n        k = c[--i];\r\n        dp %= LOG_BASE;\r\n\r\n        // Convert trailing digits to zeros according to dp.\r\n        if (k && dp) {\r\n          v = POWS_TEN[LOG_BASE - dp];\r\n          c[i] = mathfloor(k / v) * v;\r\n        }\r\n\r\n        // Remove trailing elements which are zero.\r\n        for (; c[i] === 0; c.pop(), i--);\r\n\r\n        // Zero?\r\n        if (i < 0) {\r\n          c = [e = 0];\r\n        } else {\r\n\r\n          // Remove leading elements which are zero and adjust exponent accordingly.\r\n          for (e = -1 ; c[0] === 0; c.splice(0, 1), e -= LOG_BASE);\r\n\r\n          // Count the digits of the first element of c to determine leading zeros, and...\r\n          for (i = 1, v = c[0]; v >= 10; v /= 10, i++);\r\n\r\n          // adjust the exponent accordingly.\r\n          if (i < LOG_BASE) e -= LOG_BASE - i;\r\n        }\r\n\r\n        rand.e = e;\r\n        rand.c = c;\r\n        return rand;\r\n      };\r\n    })();\r\n\r\n\r\n    /*\r\n     * Return a BigNumber whose value is the sum of the arguments.\r\n     *\r\n     * arguments {number|string|BigNumber}\r\n     */\r\n    BigNumber.sum = function () {\r\n      var i = 1,\r\n        args = arguments,\r\n        sum = new BigNumber(args[0]);\r\n      for (; i < args.length;) sum = sum.plus(args[i++]);\r\n      return sum;\r\n    };\r\n\r\n\r\n    // PRIVATE FUNCTIONS\r\n\r\n\r\n    // Called by BigNumber and BigNumber.prototype.toString.\r\n    convertBase = (function () {\r\n      var decimal = '0123456789';\r\n\r\n      /*\r\n       * Convert string of baseIn to an array of numbers of baseOut.\r\n       * Eg. toBaseOut('255', 10, 16) returns [15, 15].\r\n       * Eg. toBaseOut('ff', 16, 10) returns [2, 5, 5].\r\n       */\r\n      function toBaseOut(str, baseIn, baseOut, alphabet) {\r\n        var j,\r\n          arr = [0],\r\n          arrL,\r\n          i = 0,\r\n          len = str.length;\r\n\r\n        for (; i < len;) {\r\n          for (arrL = arr.length; arrL--; arr[arrL] *= baseIn);\r\n\r\n          arr[0] += alphabet.indexOf(str.charAt(i++));\r\n\r\n          for (j = 0; j < arr.length; j++) {\r\n\r\n            if (arr[j] > baseOut - 1) {\r\n              if (arr[j + 1] == null) arr[j + 1] = 0;\r\n              arr[j + 1] += arr[j] / baseOut | 0;\r\n              arr[j] %= baseOut;\r\n            }\r\n          }\r\n        }\r\n\r\n        return arr.reverse();\r\n      }\r\n\r\n      // Convert a numeric string of baseIn to a numeric string of baseOut.\r\n      // If the caller is toString, we are converting from base 10 to baseOut.\r\n      // If the caller is BigNumber, we are converting from baseIn to base 10.\r\n      return function (str, baseIn, baseOut, sign, callerIsToString) {\r\n        var alphabet, d, e, k, r, x, xc, y,\r\n          i = str.indexOf('.'),\r\n          dp = DECIMAL_PLACES,\r\n          rm = ROUNDING_MODE;\r\n\r\n        // Non-integer.\r\n        if (i >= 0) {\r\n          k = POW_PRECISION;\r\n\r\n          // Unlimited precision.\r\n          POW_PRECISION = 0;\r\n          str = str.replace('.', '');\r\n          y = new BigNumber(baseIn);\r\n          x = y.pow(str.length - i);\r\n          POW_PRECISION = k;\r\n\r\n          // Convert str as if an integer, then restore the fraction part by dividing the\r\n          // result by its base raised to a power.\r\n\r\n          y.c = toBaseOut(toFixedPoint(coeffToString(x.c), x.e, '0'),\r\n           10, baseOut, decimal);\r\n          y.e = y.c.length;\r\n        }\r\n\r\n        // Convert the number as integer.\r\n\r\n        xc = toBaseOut(str, baseIn, baseOut, callerIsToString\r\n         ? (alphabet = ALPHABET, decimal)\r\n         : (alphabet = decimal, ALPHABET));\r\n\r\n        // xc now represents str as an integer and converted to baseOut. e is the exponent.\r\n        e = k = xc.length;\r\n\r\n        // Remove trailing zeros.\r\n        for (; xc[--k] == 0; xc.pop());\r\n\r\n        // Zero?\r\n        if (!xc[0]) return alphabet.charAt(0);\r\n\r\n        // Does str represent an integer? If so, no need for the division.\r\n        if (i < 0) {\r\n          --e;\r\n        } else {\r\n          x.c = xc;\r\n          x.e = e;\r\n\r\n          // The sign is needed for correct rounding.\r\n          x.s = sign;\r\n          x = div(x, y, dp, rm, baseOut);\r\n          xc = x.c;\r\n          r = x.r;\r\n          e = x.e;\r\n        }\r\n\r\n        // xc now represents str converted to baseOut.\r\n\r\n        // THe index of the rounding digit.\r\n        d = e + dp + 1;\r\n\r\n        // The rounding digit: the digit to the right of the digit that may be rounded up.\r\n        i = xc[d];\r\n\r\n        // Look at the rounding digits and mode to determine whether to round up.\r\n\r\n        k = baseOut / 2;\r\n        r = r || d < 0 || xc[d + 1] != null;\r\n\r\n        r = rm < 4 ? (i != null || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n              : i > k || i == k &&(rm == 4 || r || rm == 6 && xc[d - 1] & 1 ||\r\n               rm == (x.s < 0 ? 8 : 7));\r\n\r\n        // If the index of the rounding digit is not greater than zero, or xc represents\r\n        // zero, then the result of the base conversion is zero or, if rounding up, a value\r\n        // such as 0.00001.\r\n        if (d < 1 || !xc[0]) {\r\n\r\n          // 1^-dp or 0\r\n          str = r ? toFixedPoint(alphabet.charAt(1), -dp, alphabet.charAt(0)) : alphabet.charAt(0);\r\n        } else {\r\n\r\n          // Truncate xc to the required number of decimal places.\r\n          xc.length = d;\r\n\r\n          // Round up?\r\n          if (r) {\r\n\r\n            // Rounding up may mean the previous digit has to be rounded up and so on.\r\n            for (--baseOut; ++xc[--d] > baseOut;) {\r\n              xc[d] = 0;\r\n\r\n              if (!d) {\r\n                ++e;\r\n                xc = [1].concat(xc);\r\n              }\r\n            }\r\n          }\r\n\r\n          // Determine trailing zeros.\r\n          for (k = xc.length; !xc[--k];);\r\n\r\n          // E.g. [4, 11, 15] becomes 4bf.\r\n          for (i = 0, str = ''; i <= k; str += alphabet.charAt(xc[i++]));\r\n\r\n          // Add leading zeros, decimal point and trailing zeros as required.\r\n          str = toFixedPoint(str, e, alphabet.charAt(0));\r\n        }\r\n\r\n        // The caller will add the sign.\r\n        return str;\r\n      };\r\n    })();\r\n\r\n\r\n    // Perform division in the specified base. Called by div and convertBase.\r\n    div = (function () {\r\n\r\n      // Assume non-zero x and k.\r\n      function multiply(x, k, base) {\r\n        var m, temp, xlo, xhi,\r\n          carry = 0,\r\n          i = x.length,\r\n          klo = k % SQRT_BASE,\r\n          khi = k / SQRT_BASE | 0;\r\n\r\n        for (x = x.slice(); i--;) {\r\n          xlo = x[i] % SQRT_BASE;\r\n          xhi = x[i] / SQRT_BASE | 0;\r\n          m = khi * xlo + xhi * klo;\r\n          temp = klo * xlo + ((m % SQRT_BASE) * SQRT_BASE) + carry;\r\n          carry = (temp / base | 0) + (m / SQRT_BASE | 0) + khi * xhi;\r\n          x[i] = temp % base;\r\n        }\r\n\r\n        if (carry) x = [carry].concat(x);\r\n\r\n        return x;\r\n      }\r\n\r\n      function compare(a, b, aL, bL) {\r\n        var i, cmp;\r\n\r\n        if (aL != bL) {\r\n          cmp = aL > bL ? 1 : -1;\r\n        } else {\r\n\r\n          for (i = cmp = 0; i < aL; i++) {\r\n\r\n            if (a[i] != b[i]) {\r\n              cmp = a[i] > b[i] ? 1 : -1;\r\n              break;\r\n            }\r\n          }\r\n        }\r\n\r\n        return cmp;\r\n      }\r\n\r\n      function subtract(a, b, aL, base) {\r\n        var i = 0;\r\n\r\n        // Subtract b from a.\r\n        for (; aL--;) {\r\n          a[aL] -= i;\r\n          i = a[aL] < b[aL] ? 1 : 0;\r\n          a[aL] = i * base + a[aL] - b[aL];\r\n        }\r\n\r\n        // Remove leading zeros.\r\n        for (; !a[0] && a.length > 1; a.splice(0, 1));\r\n      }\r\n\r\n      // x: dividend, y: divisor.\r\n      return function (x, y, dp, rm, base) {\r\n        var cmp, e, i, more, n, prod, prodL, q, qc, rem, remL, rem0, xi, xL, yc0,\r\n          yL, yz,\r\n          s = x.s == y.s ? 1 : -1,\r\n          xc = x.c,\r\n          yc = y.c;\r\n\r\n        // Either NaN, Infinity or 0?\r\n        if (!xc || !xc[0] || !yc || !yc[0]) {\r\n\r\n          return new BigNumber(\r\n\r\n           // Return NaN if either NaN, or both Infinity or 0.\r\n           !x.s || !y.s || (xc ? yc && xc[0] == yc[0] : !yc) ? NaN :\r\n\r\n            // Return ±0 if x is ±0 or y is ±Infinity, or return ±Infinity as y is ±0.\r\n            xc && xc[0] == 0 || !yc ? s * 0 : s / 0\r\n         );\r\n        }\r\n\r\n        q = new BigNumber(s);\r\n        qc = q.c = [];\r\n        e = x.e - y.e;\r\n        s = dp + e + 1;\r\n\r\n        if (!base) {\r\n          base = BASE;\r\n          e = bitFloor(x.e / LOG_BASE) - bitFloor(y.e / LOG_BASE);\r\n          s = s / LOG_BASE | 0;\r\n        }\r\n\r\n        // Result exponent may be one less then the current value of e.\r\n        // The coefficients of the BigNumbers from convertBase may have trailing zeros.\r\n        for (i = 0; yc[i] == (xc[i] || 0); i++);\r\n\r\n        if (yc[i] > (xc[i] || 0)) e--;\r\n\r\n        if (s < 0) {\r\n          qc.push(1);\r\n          more = true;\r\n        } else {\r\n          xL = xc.length;\r\n          yL = yc.length;\r\n          i = 0;\r\n          s += 2;\r\n\r\n          // Normalise xc and yc so highest order digit of yc is >= base / 2.\r\n\r\n          n = mathfloor(base / (yc[0] + 1));\r\n\r\n          // Not necessary, but to handle odd bases where yc[0] == (base / 2) - 1.\r\n          // if (n > 1 || n++ == 1 && yc[0] < base / 2) {\r\n          if (n > 1) {\r\n            yc = multiply(yc, n, base);\r\n            xc = multiply(xc, n, base);\r\n            yL = yc.length;\r\n            xL = xc.length;\r\n          }\r\n\r\n          xi = yL;\r\n          rem = xc.slice(0, yL);\r\n          remL = rem.length;\r\n\r\n          // Add zeros to make remainder as long as divisor.\r\n          for (; remL < yL; rem[remL++] = 0);\r\n          yz = yc.slice();\r\n          yz = [0].concat(yz);\r\n          yc0 = yc[0];\r\n          if (yc[1] >= base / 2) yc0++;\r\n          // Not necessary, but to prevent trial digit n > base, when using base 3.\r\n          // else if (base == 3 && yc0 == 1) yc0 = 1 + 1e-15;\r\n\r\n          do {\r\n            n = 0;\r\n\r\n            // Compare divisor and remainder.\r\n            cmp = compare(yc, rem, yL, remL);\r\n\r\n            // If divisor < remainder.\r\n            if (cmp < 0) {\r\n\r\n              // Calculate trial digit, n.\r\n\r\n              rem0 = rem[0];\r\n              if (yL != remL) rem0 = rem0 * base + (rem[1] || 0);\r\n\r\n              // n is how many times the divisor goes into the current remainder.\r\n              n = mathfloor(rem0 / yc0);\r\n\r\n              //  Algorithm:\r\n              //  product = divisor multiplied by trial digit (n).\r\n              //  Compare product and remainder.\r\n              //  If product is greater than remainder:\r\n              //    Subtract divisor from product, decrement trial digit.\r\n              //  Subtract product from remainder.\r\n              //  If product was less than remainder at the last compare:\r\n              //    Compare new remainder and divisor.\r\n              //    If remainder is greater than divisor:\r\n              //      Subtract divisor from remainder, increment trial digit.\r\n\r\n              if (n > 1) {\r\n\r\n                // n may be > base only when base is 3.\r\n                if (n >= base) n = base - 1;\r\n\r\n                // product = divisor * trial digit.\r\n                prod = multiply(yc, n, base);\r\n                prodL = prod.length;\r\n                remL = rem.length;\r\n\r\n                // Compare product and remainder.\r\n                // If product > remainder then trial digit n too high.\r\n                // n is 1 too high about 5% of the time, and is not known to have\r\n                // ever been more than 1 too high.\r\n                while (compare(prod, rem, prodL, remL) == 1) {\r\n                  n--;\r\n\r\n                  // Subtract divisor from product.\r\n                  subtract(prod, yL < prodL ? yz : yc, prodL, base);\r\n                  prodL = prod.length;\r\n                  cmp = 1;\r\n                }\r\n              } else {\r\n\r\n                // n is 0 or 1, cmp is -1.\r\n                // If n is 0, there is no need to compare yc and rem again below,\r\n                // so change cmp to 1 to avoid it.\r\n                // If n is 1, leave cmp as -1, so yc and rem are compared again.\r\n                if (n == 0) {\r\n\r\n                  // divisor < remainder, so n must be at least 1.\r\n                  cmp = n = 1;\r\n                }\r\n\r\n                // product = divisor\r\n                prod = yc.slice();\r\n                prodL = prod.length;\r\n              }\r\n\r\n              if (prodL < remL) prod = [0].concat(prod);\r\n\r\n              // Subtract product from remainder.\r\n              subtract(rem, prod, remL, base);\r\n              remL = rem.length;\r\n\r\n               // If product was < remainder.\r\n              if (cmp == -1) {\r\n\r\n                // Compare divisor and new remainder.\r\n                // If divisor < new remainder, subtract divisor from remainder.\r\n                // Trial digit n too low.\r\n                // n is 1 too low about 5% of the time, and very rarely 2 too low.\r\n                while (compare(yc, rem, yL, remL) < 1) {\r\n                  n++;\r\n\r\n                  // Subtract divisor from remainder.\r\n                  subtract(rem, yL < remL ? yz : yc, remL, base);\r\n                  remL = rem.length;\r\n                }\r\n              }\r\n            } else if (cmp === 0) {\r\n              n++;\r\n              rem = [0];\r\n            } // else cmp === 1 and n will be 0\r\n\r\n            // Add the next digit, n, to the result array.\r\n            qc[i++] = n;\r\n\r\n            // Update the remainder.\r\n            if (rem[0]) {\r\n              rem[remL++] = xc[xi] || 0;\r\n            } else {\r\n              rem = [xc[xi]];\r\n              remL = 1;\r\n            }\r\n          } while ((xi++ < xL || rem[0] != null) && s--);\r\n\r\n          more = rem[0] != null;\r\n\r\n          // Leading zero?\r\n          if (!qc[0]) qc.splice(0, 1);\r\n        }\r\n\r\n        if (base == BASE) {\r\n\r\n          // To calculate q.e, first get the number of digits of qc[0].\r\n          for (i = 1, s = qc[0]; s >= 10; s /= 10, i++);\r\n\r\n          round(q, dp + (q.e = i + e * LOG_BASE - 1) + 1, rm, more);\r\n\r\n        // Caller is convertBase.\r\n        } else {\r\n          q.e = e;\r\n          q.r = +more;\r\n        }\r\n\r\n        return q;\r\n      };\r\n    })();\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of BigNumber n in fixed-point or exponential\r\n     * notation rounded to the specified decimal places or significant digits.\r\n     *\r\n     * n: a BigNumber.\r\n     * i: the index of the last digit required (i.e. the digit that may be rounded up).\r\n     * rm: the rounding mode.\r\n     * id: 1 (toExponential) or 2 (toPrecision).\r\n     */\r\n    function format(n, i, rm, id) {\r\n      var c0, e, ne, len, str;\r\n\r\n      if (rm == null) rm = ROUNDING_MODE;\r\n      else intCheck(rm, 0, 8);\r\n\r\n      if (!n.c) return n.toString();\r\n\r\n      c0 = n.c[0];\r\n      ne = n.e;\r\n\r\n      if (i == null) {\r\n        str = coeffToString(n.c);\r\n        str = id == 1 || id == 2 && (ne <= TO_EXP_NEG || ne >= TO_EXP_POS)\r\n         ? toExponential(str, ne)\r\n         : toFixedPoint(str, ne, '0');\r\n      } else {\r\n        n = round(new BigNumber(n), i, rm);\r\n\r\n        // n.e may have changed if the value was rounded up.\r\n        e = n.e;\r\n\r\n        str = coeffToString(n.c);\r\n        len = str.length;\r\n\r\n        // toPrecision returns exponential notation if the number of significant digits\r\n        // specified is less than the number of digits necessary to represent the integer\r\n        // part of the value in fixed-point notation.\r\n\r\n        // Exponential notation.\r\n        if (id == 1 || id == 2 && (i <= e || e <= TO_EXP_NEG)) {\r\n\r\n          // Append zeros?\r\n          for (; len < i; str += '0', len++);\r\n          str = toExponential(str, e);\r\n\r\n        // Fixed-point notation.\r\n        } else {\r\n          i -= ne;\r\n          str = toFixedPoint(str, e, '0');\r\n\r\n          // Append zeros?\r\n          if (e + 1 > len) {\r\n            if (--i > 0) for (str += '.'; i--; str += '0');\r\n          } else {\r\n            i += e - len;\r\n            if (i > 0) {\r\n              if (e + 1 == len) str += '.';\r\n              for (; i--; str += '0');\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      return n.s < 0 && c0 ? '-' + str : str;\r\n    }\r\n\r\n\r\n    // Handle BigNumber.max and BigNumber.min.\r\n    function maxOrMin(args, method) {\r\n      var n,\r\n        i = 1,\r\n        m = new BigNumber(args[0]);\r\n\r\n      for (; i < args.length; i++) {\r\n        n = new BigNumber(args[i]);\r\n\r\n        // If any number is NaN, return NaN.\r\n        if (!n.s) {\r\n          m = n;\r\n          break;\r\n        } else if (method.call(m, n)) {\r\n          m = n;\r\n        }\r\n      }\r\n\r\n      return m;\r\n    }\r\n\r\n\r\n    /*\r\n     * Strip trailing zeros, calculate base 10 exponent and check against MIN_EXP and MAX_EXP.\r\n     * Called by minus, plus and times.\r\n     */\r\n    function normalise(n, c, e) {\r\n      var i = 1,\r\n        j = c.length;\r\n\r\n       // Remove trailing zeros.\r\n      for (; !c[--j]; c.pop());\r\n\r\n      // Calculate the base 10 exponent. First get the number of digits of c[0].\r\n      for (j = c[0]; j >= 10; j /= 10, i++);\r\n\r\n      // Overflow?\r\n      if ((e = i + e * LOG_BASE - 1) > MAX_EXP) {\r\n\r\n        // Infinity.\r\n        n.c = n.e = null;\r\n\r\n      // Underflow?\r\n      } else if (e < MIN_EXP) {\r\n\r\n        // Zero.\r\n        n.c = [n.e = 0];\r\n      } else {\r\n        n.e = e;\r\n        n.c = c;\r\n      }\r\n\r\n      return n;\r\n    }\r\n\r\n\r\n    // Handle values that fail the validity test in BigNumber.\r\n    parseNumeric = (function () {\r\n      var basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i,\r\n        dotAfter = /^([^.]+)\\.$/,\r\n        dotBefore = /^\\.([^.]+)$/,\r\n        isInfinityOrNaN = /^-?(Infinity|NaN)$/,\r\n        whitespaceOrPlus = /^\\s*\\+(?=[\\w.])|^\\s+|\\s+$/g;\r\n\r\n      return function (x, str, isNum, b) {\r\n        var base,\r\n          s = isNum ? str : str.replace(whitespaceOrPlus, '');\r\n\r\n        // No exception on ±Infinity or NaN.\r\n        if (isInfinityOrNaN.test(s)) {\r\n          x.s = isNaN(s) ? null : s < 0 ? -1 : 1;\r\n        } else {\r\n          if (!isNum) {\r\n\r\n            // basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i\r\n            s = s.replace(basePrefix, function (m, p1, p2) {\r\n              base = (p2 = p2.toLowerCase()) == 'x' ? 16 : p2 == 'b' ? 2 : 8;\r\n              return !b || b == base ? p1 : m;\r\n            });\r\n\r\n            if (b) {\r\n              base = b;\r\n\r\n              // E.g. '1.' to '1', '.1' to '0.1'\r\n              s = s.replace(dotAfter, '$1').replace(dotBefore, '0.$1');\r\n            }\r\n\r\n            if (str != s) return new BigNumber(s, base);\r\n          }\r\n\r\n          // '[BigNumber Error] Not a number: {n}'\r\n          // '[BigNumber Error] Not a base {b} number: {n}'\r\n          if (BigNumber.DEBUG) {\r\n            throw Error\r\n              (bignumberError + 'Not a' + (b ? ' base ' + b : '') + ' number: ' + str);\r\n          }\r\n\r\n          // NaN\r\n          x.s = null;\r\n        }\r\n\r\n        x.c = x.e = null;\r\n      }\r\n    })();\r\n\r\n\r\n    /*\r\n     * Round x to sd significant digits using rounding mode rm. Check for over/under-flow.\r\n     * If r is truthy, it is known that there are more digits after the rounding digit.\r\n     */\r\n    function round(x, sd, rm, r) {\r\n      var d, i, j, k, n, ni, rd,\r\n        xc = x.c,\r\n        pows10 = POWS_TEN;\r\n\r\n      // if x is not Infinity or NaN...\r\n      if (xc) {\r\n\r\n        // rd is the rounding digit, i.e. the digit after the digit that may be rounded up.\r\n        // n is a base 1e14 number, the value of the element of array x.c containing rd.\r\n        // ni is the index of n within x.c.\r\n        // d is the number of digits of n.\r\n        // i is the index of rd within n including leading zeros.\r\n        // j is the actual index of rd within n (if < 0, rd is a leading zero).\r\n        out: {\r\n\r\n          // Get the number of digits of the first element of xc.\r\n          for (d = 1, k = xc[0]; k >= 10; k /= 10, d++);\r\n          i = sd - d;\r\n\r\n          // If the rounding digit is in the first element of xc...\r\n          if (i < 0) {\r\n            i += LOG_BASE;\r\n            j = sd;\r\n            n = xc[ni = 0];\r\n\r\n            // Get the rounding digit at index j of n.\r\n            rd = n / pows10[d - j - 1] % 10 | 0;\r\n          } else {\r\n            ni = mathceil((i + 1) / LOG_BASE);\r\n\r\n            if (ni >= xc.length) {\r\n\r\n              if (r) {\r\n\r\n                // Needed by sqrt.\r\n                for (; xc.length <= ni; xc.push(0));\r\n                n = rd = 0;\r\n                d = 1;\r\n                i %= LOG_BASE;\r\n                j = i - LOG_BASE + 1;\r\n              } else {\r\n                break out;\r\n              }\r\n            } else {\r\n              n = k = xc[ni];\r\n\r\n              // Get the number of digits of n.\r\n              for (d = 1; k >= 10; k /= 10, d++);\r\n\r\n              // Get the index of rd within n.\r\n              i %= LOG_BASE;\r\n\r\n              // Get the index of rd within n, adjusted for leading zeros.\r\n              // The number of leading zeros of n is given by LOG_BASE - d.\r\n              j = i - LOG_BASE + d;\r\n\r\n              // Get the rounding digit at index j of n.\r\n              rd = j < 0 ? 0 : n / pows10[d - j - 1] % 10 | 0;\r\n            }\r\n          }\r\n\r\n          r = r || sd < 0 ||\r\n\r\n          // Are there any non-zero digits after the rounding digit?\r\n          // The expression  n % pows10[d - j - 1]  returns all digits of n to the right\r\n          // of the digit at j, e.g. if n is 908714 and j is 2, the expression gives 714.\r\n           xc[ni + 1] != null || (j < 0 ? n : n % pows10[d - j - 1]);\r\n\r\n          r = rm < 4\r\n           ? (rd || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n           : rd > 5 || rd == 5 && (rm == 4 || r || rm == 6 &&\r\n\r\n            // Check whether the digit to the left of the rounding digit is odd.\r\n            ((i > 0 ? j > 0 ? n / pows10[d - j] : 0 : xc[ni - 1]) % 10) & 1 ||\r\n             rm == (x.s < 0 ? 8 : 7));\r\n\r\n          if (sd < 1 || !xc[0]) {\r\n            xc.length = 0;\r\n\r\n            if (r) {\r\n\r\n              // Convert sd to decimal places.\r\n              sd -= x.e + 1;\r\n\r\n              // 1, 0.1, 0.01, 0.001, 0.0001 etc.\r\n              xc[0] = pows10[(LOG_BASE - sd % LOG_BASE) % LOG_BASE];\r\n              x.e = -sd || 0;\r\n            } else {\r\n\r\n              // Zero.\r\n              xc[0] = x.e = 0;\r\n            }\r\n\r\n            return x;\r\n          }\r\n\r\n          // Remove excess digits.\r\n          if (i == 0) {\r\n            xc.length = ni;\r\n            k = 1;\r\n            ni--;\r\n          } else {\r\n            xc.length = ni + 1;\r\n            k = pows10[LOG_BASE - i];\r\n\r\n            // E.g. 56700 becomes 56000 if 7 is the rounding digit.\r\n            // j > 0 means i > number of leading zeros of n.\r\n            xc[ni] = j > 0 ? mathfloor(n / pows10[d - j] % pows10[j]) * k : 0;\r\n          }\r\n\r\n          // Round up?\r\n          if (r) {\r\n\r\n            for (; ;) {\r\n\r\n              // If the digit to be rounded up is in the first element of xc...\r\n              if (ni == 0) {\r\n\r\n                // i will be the length of xc[0] before k is added.\r\n                for (i = 1, j = xc[0]; j >= 10; j /= 10, i++);\r\n                j = xc[0] += k;\r\n                for (k = 1; j >= 10; j /= 10, k++);\r\n\r\n                // if i != k the length has increased.\r\n                if (i != k) {\r\n                  x.e++;\r\n                  if (xc[0] == BASE) xc[0] = 1;\r\n                }\r\n\r\n                break;\r\n              } else {\r\n                xc[ni] += k;\r\n                if (xc[ni] != BASE) break;\r\n                xc[ni--] = 0;\r\n                k = 1;\r\n              }\r\n            }\r\n          }\r\n\r\n          // Remove trailing zeros.\r\n          for (i = xc.length; xc[--i] === 0; xc.pop());\r\n        }\r\n\r\n        // Overflow? Infinity.\r\n        if (x.e > MAX_EXP) {\r\n          x.c = x.e = null;\r\n\r\n        // Underflow? Zero.\r\n        } else if (x.e < MIN_EXP) {\r\n          x.c = [x.e = 0];\r\n        }\r\n      }\r\n\r\n      return x;\r\n    }\r\n\r\n\r\n    function valueOf(n) {\r\n      var str,\r\n        e = n.e;\r\n\r\n      if (e === null) return n.toString();\r\n\r\n      str = coeffToString(n.c);\r\n\r\n      str = e <= TO_EXP_NEG || e >= TO_EXP_POS\r\n        ? toExponential(str, e)\r\n        : toFixedPoint(str, e, '0');\r\n\r\n      return n.s < 0 ? '-' + str : str;\r\n    }\r\n\r\n\r\n    // PROTOTYPE/INSTANCE METHODS\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the absolute value of this BigNumber.\r\n     */\r\n    P.absoluteValue = P.abs = function () {\r\n      var x = new BigNumber(this);\r\n      if (x.s < 0) x.s = 1;\r\n      return x;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return\r\n     *   1 if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n     *   -1 if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n     *   0 if they have the same value,\r\n     *   or null if the value of either is NaN.\r\n     */\r\n    P.comparedTo = function (y, b) {\r\n      return compare(this, new BigNumber(y, b));\r\n    };\r\n\r\n\r\n    /*\r\n     * If dp is undefined or null or true or false, return the number of decimal places of the\r\n     * value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.\r\n     *\r\n     * Otherwise, if dp is a number, return a new BigNumber whose value is the value of this\r\n     * BigNumber rounded to a maximum of dp decimal places using rounding mode rm, or\r\n     * ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * [dp] {number} Decimal places: integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     */\r\n    P.decimalPlaces = P.dp = function (dp, rm) {\r\n      var c, n, v,\r\n        x = this;\r\n\r\n      if (dp != null) {\r\n        intCheck(dp, 0, MAX);\r\n        if (rm == null) rm = ROUNDING_MODE;\r\n        else intCheck(rm, 0, 8);\r\n\r\n        return round(new BigNumber(x), dp + x.e + 1, rm);\r\n      }\r\n\r\n      if (!(c = x.c)) return null;\r\n      n = ((v = c.length - 1) - bitFloor(this.e / LOG_BASE)) * LOG_BASE;\r\n\r\n      // Subtract the number of trailing zeros of the last number.\r\n      if (v = c[v]) for (; v % 10 == 0; v /= 10, n--);\r\n      if (n < 0) n = 0;\r\n\r\n      return n;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n / 0 = I\r\n     *  n / N = N\r\n     *  n / I = 0\r\n     *  0 / n = 0\r\n     *  0 / 0 = N\r\n     *  0 / N = N\r\n     *  0 / I = 0\r\n     *  N / n = N\r\n     *  N / 0 = N\r\n     *  N / N = N\r\n     *  N / I = N\r\n     *  I / n = I\r\n     *  I / 0 = I\r\n     *  I / N = N\r\n     *  I / I = N\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber divided by the value of\r\n     * BigNumber(y, b), rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n     */\r\n    P.dividedBy = P.div = function (y, b) {\r\n      return div(this, new BigNumber(y, b), DECIMAL_PLACES, ROUNDING_MODE);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the integer part of dividing the value of this\r\n     * BigNumber by the value of BigNumber(y, b).\r\n     */\r\n    P.dividedToIntegerBy = P.idiv = function (y, b) {\r\n      return div(this, new BigNumber(y, b), 0, 1);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a BigNumber whose value is the value of this BigNumber exponentiated by n.\r\n     *\r\n     * If m is present, return the result modulo m.\r\n     * If n is negative round according to DECIMAL_PLACES and ROUNDING_MODE.\r\n     * If POW_PRECISION is non-zero and m is not present, round to POW_PRECISION using ROUNDING_MODE.\r\n     *\r\n     * The modular power operation works efficiently when x, n, and m are integers, otherwise it\r\n     * is equivalent to calculating x.exponentiatedBy(n).modulo(m) with a POW_PRECISION of 0.\r\n     *\r\n     * n {number|string|BigNumber} The exponent. An integer.\r\n     * [m] {number|string|BigNumber} The modulus.\r\n     *\r\n     * '[BigNumber Error] Exponent not an integer: {n}'\r\n     */\r\n    P.exponentiatedBy = P.pow = function (n, m) {\r\n      var half, isModExp, i, k, more, nIsBig, nIsNeg, nIsOdd, y,\r\n        x = this;\r\n\r\n      n = new BigNumber(n);\r\n\r\n      // Allow NaN and ±Infinity, but not other non-integers.\r\n      if (n.c && !n.isInteger()) {\r\n        throw Error\r\n          (bignumberError + 'Exponent not an integer: ' + valueOf(n));\r\n      }\r\n\r\n      if (m != null) m = new BigNumber(m);\r\n\r\n      // Exponent of MAX_SAFE_INTEGER is 15.\r\n      nIsBig = n.e > 14;\r\n\r\n      // If x is NaN, ±Infinity, ±0 or ±1, or n is ±Infinity, NaN or ±0.\r\n      if (!x.c || !x.c[0] || x.c[0] == 1 && !x.e && x.c.length == 1 || !n.c || !n.c[0]) {\r\n\r\n        // The sign of the result of pow when x is negative depends on the evenness of n.\r\n        // If +n overflows to ±Infinity, the evenness of n would be not be known.\r\n        y = new BigNumber(Math.pow(+valueOf(x), nIsBig ? 2 - isOdd(n) : +valueOf(n)));\r\n        return m ? y.mod(m) : y;\r\n      }\r\n\r\n      nIsNeg = n.s < 0;\r\n\r\n      if (m) {\r\n\r\n        // x % m returns NaN if abs(m) is zero, or m is NaN.\r\n        if (m.c ? !m.c[0] : !m.s) return new BigNumber(NaN);\r\n\r\n        isModExp = !nIsNeg && x.isInteger() && m.isInteger();\r\n\r\n        if (isModExp) x = x.mod(m);\r\n\r\n      // Overflow to ±Infinity: >=2**1e10 or >=1.0000024**1e15.\r\n      // Underflow to ±0: <=0.79**1e10 or <=0.9999975**1e15.\r\n      } else if (n.e > 9 && (x.e > 0 || x.e < -1 || (x.e == 0\r\n        // [1, 240000000]\r\n        ? x.c[0] > 1 || nIsBig && x.c[1] >= 24e7\r\n        // [80000000000000]  [99999750000000]\r\n        : x.c[0] < 8e13 || nIsBig && x.c[0] <= 9999975e7))) {\r\n\r\n        // If x is negative and n is odd, k = -0, else k = 0.\r\n        k = x.s < 0 && isOdd(n) ? -0 : 0;\r\n\r\n        // If x >= 1, k = ±Infinity.\r\n        if (x.e > -1) k = 1 / k;\r\n\r\n        // If n is negative return ±0, else return ±Infinity.\r\n        return new BigNumber(nIsNeg ? 1 / k : k);\r\n\r\n      } else if (POW_PRECISION) {\r\n\r\n        // Truncating each coefficient array to a length of k after each multiplication\r\n        // equates to truncating significant digits to POW_PRECISION + [28, 41],\r\n        // i.e. there will be a minimum of 28 guard digits retained.\r\n        k = mathceil(POW_PRECISION / LOG_BASE + 2);\r\n      }\r\n\r\n      if (nIsBig) {\r\n        half = new BigNumber(0.5);\r\n        if (nIsNeg) n.s = 1;\r\n        nIsOdd = isOdd(n);\r\n      } else {\r\n        i = Math.abs(+valueOf(n));\r\n        nIsOdd = i % 2;\r\n      }\r\n\r\n      y = new BigNumber(ONE);\r\n\r\n      // Performs 54 loop iterations for n of 9007199254740991.\r\n      for (; ;) {\r\n\r\n        if (nIsOdd) {\r\n          y = y.times(x);\r\n          if (!y.c) break;\r\n\r\n          if (k) {\r\n            if (y.c.length > k) y.c.length = k;\r\n          } else if (isModExp) {\r\n            y = y.mod(m);    //y = y.minus(div(y, m, 0, MODULO_MODE).times(m));\r\n          }\r\n        }\r\n\r\n        if (i) {\r\n          i = mathfloor(i / 2);\r\n          if (i === 0) break;\r\n          nIsOdd = i % 2;\r\n        } else {\r\n          n = n.times(half);\r\n          round(n, n.e + 1, 1);\r\n\r\n          if (n.e > 14) {\r\n            nIsOdd = isOdd(n);\r\n          } else {\r\n            i = +valueOf(n);\r\n            if (i === 0) break;\r\n            nIsOdd = i % 2;\r\n          }\r\n        }\r\n\r\n        x = x.times(x);\r\n\r\n        if (k) {\r\n          if (x.c && x.c.length > k) x.c.length = k;\r\n        } else if (isModExp) {\r\n          x = x.mod(m);    //x = x.minus(div(x, m, 0, MODULO_MODE).times(m));\r\n        }\r\n      }\r\n\r\n      if (isModExp) return y;\r\n      if (nIsNeg) y = ONE.div(y);\r\n\r\n      return m ? y.mod(m) : k ? round(y, POW_PRECISION, ROUNDING_MODE, more) : y;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber rounded to an integer\r\n     * using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {rm}'\r\n     */\r\n    P.integerValue = function (rm) {\r\n      var n = new BigNumber(this);\r\n      if (rm == null) rm = ROUNDING_MODE;\r\n      else intCheck(rm, 0, 8);\r\n      return round(n, n.e + 1, rm);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is equal to the value of BigNumber(y, b),\r\n     * otherwise return false.\r\n     */\r\n    P.isEqualTo = P.eq = function (y, b) {\r\n      return compare(this, new BigNumber(y, b)) === 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is a finite number, otherwise return false.\r\n     */\r\n    P.isFinite = function () {\r\n      return !!this.c;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n     * otherwise return false.\r\n     */\r\n    P.isGreaterThan = P.gt = function (y, b) {\r\n      return compare(this, new BigNumber(y, b)) > 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is greater than or equal to the value of\r\n     * BigNumber(y, b), otherwise return false.\r\n     */\r\n    P.isGreaterThanOrEqualTo = P.gte = function (y, b) {\r\n      return (b = compare(this, new BigNumber(y, b))) === 1 || b === 0;\r\n\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is an integer, otherwise return false.\r\n     */\r\n    P.isInteger = function () {\r\n      return !!this.c && bitFloor(this.e / LOG_BASE) > this.c.length - 2;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n     * otherwise return false.\r\n     */\r\n    P.isLessThan = P.lt = function (y, b) {\r\n      return compare(this, new BigNumber(y, b)) < 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is less than or equal to the value of\r\n     * BigNumber(y, b), otherwise return false.\r\n     */\r\n    P.isLessThanOrEqualTo = P.lte = function (y, b) {\r\n      return (b = compare(this, new BigNumber(y, b))) === -1 || b === 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is NaN, otherwise return false.\r\n     */\r\n    P.isNaN = function () {\r\n      return !this.s;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is negative, otherwise return false.\r\n     */\r\n    P.isNegative = function () {\r\n      return this.s < 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is positive, otherwise return false.\r\n     */\r\n    P.isPositive = function () {\r\n      return this.s > 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is 0 or -0, otherwise return false.\r\n     */\r\n    P.isZero = function () {\r\n      return !!this.c && this.c[0] == 0;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n - 0 = n\r\n     *  n - N = N\r\n     *  n - I = -I\r\n     *  0 - n = -n\r\n     *  0 - 0 = 0\r\n     *  0 - N = N\r\n     *  0 - I = -I\r\n     *  N - n = N\r\n     *  N - 0 = N\r\n     *  N - N = N\r\n     *  N - I = N\r\n     *  I - n = I\r\n     *  I - 0 = I\r\n     *  I - N = N\r\n     *  I - I = N\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber minus the value of\r\n     * BigNumber(y, b).\r\n     */\r\n    P.minus = function (y, b) {\r\n      var i, j, t, xLTy,\r\n        x = this,\r\n        a = x.s;\r\n\r\n      y = new BigNumber(y, b);\r\n      b = y.s;\r\n\r\n      // Either NaN?\r\n      if (!a || !b) return new BigNumber(NaN);\r\n\r\n      // Signs differ?\r\n      if (a != b) {\r\n        y.s = -b;\r\n        return x.plus(y);\r\n      }\r\n\r\n      var xe = x.e / LOG_BASE,\r\n        ye = y.e / LOG_BASE,\r\n        xc = x.c,\r\n        yc = y.c;\r\n\r\n      if (!xe || !ye) {\r\n\r\n        // Either Infinity?\r\n        if (!xc || !yc) return xc ? (y.s = -b, y) : new BigNumber(yc ? x : NaN);\r\n\r\n        // Either zero?\r\n        if (!xc[0] || !yc[0]) {\r\n\r\n          // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\r\n          return yc[0] ? (y.s = -b, y) : new BigNumber(xc[0] ? x :\r\n\r\n           // IEEE 754 (2008) 6.3: n - n = -0 when rounding to -Infinity\r\n           ROUNDING_MODE == 3 ? -0 : 0);\r\n        }\r\n      }\r\n\r\n      xe = bitFloor(xe);\r\n      ye = bitFloor(ye);\r\n      xc = xc.slice();\r\n\r\n      // Determine which is the bigger number.\r\n      if (a = xe - ye) {\r\n\r\n        if (xLTy = a < 0) {\r\n          a = -a;\r\n          t = xc;\r\n        } else {\r\n          ye = xe;\r\n          t = yc;\r\n        }\r\n\r\n        t.reverse();\r\n\r\n        // Prepend zeros to equalise exponents.\r\n        for (b = a; b--; t.push(0));\r\n        t.reverse();\r\n      } else {\r\n\r\n        // Exponents equal. Check digit by digit.\r\n        j = (xLTy = (a = xc.length) < (b = yc.length)) ? a : b;\r\n\r\n        for (a = b = 0; b < j; b++) {\r\n\r\n          if (xc[b] != yc[b]) {\r\n            xLTy = xc[b] < yc[b];\r\n            break;\r\n          }\r\n        }\r\n      }\r\n\r\n      // x < y? Point xc to the array of the bigger number.\r\n      if (xLTy) t = xc, xc = yc, yc = t, y.s = -y.s;\r\n\r\n      b = (j = yc.length) - (i = xc.length);\r\n\r\n      // Append zeros to xc if shorter.\r\n      // No need to add zeros to yc if shorter as subtract only needs to start at yc.length.\r\n      if (b > 0) for (; b--; xc[i++] = 0);\r\n      b = BASE - 1;\r\n\r\n      // Subtract yc from xc.\r\n      for (; j > a;) {\r\n\r\n        if (xc[--j] < yc[j]) {\r\n          for (i = j; i && !xc[--i]; xc[i] = b);\r\n          --xc[i];\r\n          xc[j] += BASE;\r\n        }\r\n\r\n        xc[j] -= yc[j];\r\n      }\r\n\r\n      // Remove leading zeros and adjust exponent accordingly.\r\n      for (; xc[0] == 0; xc.splice(0, 1), --ye);\r\n\r\n      // Zero?\r\n      if (!xc[0]) {\r\n\r\n        // Following IEEE 754 (2008) 6.3,\r\n        // n - n = +0  but  n - n = -0  when rounding towards -Infinity.\r\n        y.s = ROUNDING_MODE == 3 ? -1 : 1;\r\n        y.c = [y.e = 0];\r\n        return y;\r\n      }\r\n\r\n      // No need to check for Infinity as +x - +y != Infinity && -x - -y != Infinity\r\n      // for finite x and y.\r\n      return normalise(y, xc, ye);\r\n    };\r\n\r\n\r\n    /*\r\n     *   n % 0 =  N\r\n     *   n % N =  N\r\n     *   n % I =  n\r\n     *   0 % n =  0\r\n     *  -0 % n = -0\r\n     *   0 % 0 =  N\r\n     *   0 % N =  N\r\n     *   0 % I =  0\r\n     *   N % n =  N\r\n     *   N % 0 =  N\r\n     *   N % N =  N\r\n     *   N % I =  N\r\n     *   I % n =  N\r\n     *   I % 0 =  N\r\n     *   I % N =  N\r\n     *   I % I =  N\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber modulo the value of\r\n     * BigNumber(y, b). The result depends on the value of MODULO_MODE.\r\n     */\r\n    P.modulo = P.mod = function (y, b) {\r\n      var q, s,\r\n        x = this;\r\n\r\n      y = new BigNumber(y, b);\r\n\r\n      // Return NaN if x is Infinity or NaN, or y is NaN or zero.\r\n      if (!x.c || !y.s || y.c && !y.c[0]) {\r\n        return new BigNumber(NaN);\r\n\r\n      // Return x if y is Infinity or x is zero.\r\n      } else if (!y.c || x.c && !x.c[0]) {\r\n        return new BigNumber(x);\r\n      }\r\n\r\n      if (MODULO_MODE == 9) {\r\n\r\n        // Euclidian division: q = sign(y) * floor(x / abs(y))\r\n        // r = x - qy    where  0 <= r < abs(y)\r\n        s = y.s;\r\n        y.s = 1;\r\n        q = div(x, y, 0, 3);\r\n        y.s = s;\r\n        q.s *= s;\r\n      } else {\r\n        q = div(x, y, 0, MODULO_MODE);\r\n      }\r\n\r\n      y = x.minus(q.times(y));\r\n\r\n      // To match JavaScript %, ensure sign of zero is sign of dividend.\r\n      if (!y.c[0] && MODULO_MODE == 1) y.s = x.s;\r\n\r\n      return y;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n * 0 = 0\r\n     *  n * N = N\r\n     *  n * I = I\r\n     *  0 * n = 0\r\n     *  0 * 0 = 0\r\n     *  0 * N = N\r\n     *  0 * I = N\r\n     *  N * n = N\r\n     *  N * 0 = N\r\n     *  N * N = N\r\n     *  N * I = N\r\n     *  I * n = I\r\n     *  I * 0 = N\r\n     *  I * N = N\r\n     *  I * I = I\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber multiplied by the value\r\n     * of BigNumber(y, b).\r\n     */\r\n    P.multipliedBy = P.times = function (y, b) {\r\n      var c, e, i, j, k, m, xcL, xlo, xhi, ycL, ylo, yhi, zc,\r\n        base, sqrtBase,\r\n        x = this,\r\n        xc = x.c,\r\n        yc = (y = new BigNumber(y, b)).c;\r\n\r\n      // Either NaN, ±Infinity or ±0?\r\n      if (!xc || !yc || !xc[0] || !yc[0]) {\r\n\r\n        // Return NaN if either is NaN, or one is 0 and the other is Infinity.\r\n        if (!x.s || !y.s || xc && !xc[0] && !yc || yc && !yc[0] && !xc) {\r\n          y.c = y.e = y.s = null;\r\n        } else {\r\n          y.s *= x.s;\r\n\r\n          // Return ±Infinity if either is ±Infinity.\r\n          if (!xc || !yc) {\r\n            y.c = y.e = null;\r\n\r\n          // Return ±0 if either is ±0.\r\n          } else {\r\n            y.c = [0];\r\n            y.e = 0;\r\n          }\r\n        }\r\n\r\n        return y;\r\n      }\r\n\r\n      e = bitFloor(x.e / LOG_BASE) + bitFloor(y.e / LOG_BASE);\r\n      y.s *= x.s;\r\n      xcL = xc.length;\r\n      ycL = yc.length;\r\n\r\n      // Ensure xc points to longer array and xcL to its length.\r\n      if (xcL < ycL) zc = xc, xc = yc, yc = zc, i = xcL, xcL = ycL, ycL = i;\r\n\r\n      // Initialise the result array with zeros.\r\n      for (i = xcL + ycL, zc = []; i--; zc.push(0));\r\n\r\n      base = BASE;\r\n      sqrtBase = SQRT_BASE;\r\n\r\n      for (i = ycL; --i >= 0;) {\r\n        c = 0;\r\n        ylo = yc[i] % sqrtBase;\r\n        yhi = yc[i] / sqrtBase | 0;\r\n\r\n        for (k = xcL, j = i + k; j > i;) {\r\n          xlo = xc[--k] % sqrtBase;\r\n          xhi = xc[k] / sqrtBase | 0;\r\n          m = yhi * xlo + xhi * ylo;\r\n          xlo = ylo * xlo + ((m % sqrtBase) * sqrtBase) + zc[j] + c;\r\n          c = (xlo / base | 0) + (m / sqrtBase | 0) + yhi * xhi;\r\n          zc[j--] = xlo % base;\r\n        }\r\n\r\n        zc[j] = c;\r\n      }\r\n\r\n      if (c) {\r\n        ++e;\r\n      } else {\r\n        zc.splice(0, 1);\r\n      }\r\n\r\n      return normalise(y, zc, e);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber negated,\r\n     * i.e. multiplied by -1.\r\n     */\r\n    P.negated = function () {\r\n      var x = new BigNumber(this);\r\n      x.s = -x.s || null;\r\n      return x;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n + 0 = n\r\n     *  n + N = N\r\n     *  n + I = I\r\n     *  0 + n = n\r\n     *  0 + 0 = 0\r\n     *  0 + N = N\r\n     *  0 + I = I\r\n     *  N + n = N\r\n     *  N + 0 = N\r\n     *  N + N = N\r\n     *  N + I = N\r\n     *  I + n = I\r\n     *  I + 0 = I\r\n     *  I + N = N\r\n     *  I + I = I\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber plus the value of\r\n     * BigNumber(y, b).\r\n     */\r\n    P.plus = function (y, b) {\r\n      var t,\r\n        x = this,\r\n        a = x.s;\r\n\r\n      y = new BigNumber(y, b);\r\n      b = y.s;\r\n\r\n      // Either NaN?\r\n      if (!a || !b) return new BigNumber(NaN);\r\n\r\n      // Signs differ?\r\n       if (a != b) {\r\n        y.s = -b;\r\n        return x.minus(y);\r\n      }\r\n\r\n      var xe = x.e / LOG_BASE,\r\n        ye = y.e / LOG_BASE,\r\n        xc = x.c,\r\n        yc = y.c;\r\n\r\n      if (!xe || !ye) {\r\n\r\n        // Return ±Infinity if either ±Infinity.\r\n        if (!xc || !yc) return new BigNumber(a / 0);\r\n\r\n        // Either zero?\r\n        // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\r\n        if (!xc[0] || !yc[0]) return yc[0] ? y : new BigNumber(xc[0] ? x : a * 0);\r\n      }\r\n\r\n      xe = bitFloor(xe);\r\n      ye = bitFloor(ye);\r\n      xc = xc.slice();\r\n\r\n      // Prepend zeros to equalise exponents. Faster to use reverse then do unshifts.\r\n      if (a = xe - ye) {\r\n        if (a > 0) {\r\n          ye = xe;\r\n          t = yc;\r\n        } else {\r\n          a = -a;\r\n          t = xc;\r\n        }\r\n\r\n        t.reverse();\r\n        for (; a--; t.push(0));\r\n        t.reverse();\r\n      }\r\n\r\n      a = xc.length;\r\n      b = yc.length;\r\n\r\n      // Point xc to the longer array, and b to the shorter length.\r\n      if (a - b < 0) t = yc, yc = xc, xc = t, b = a;\r\n\r\n      // Only start adding at yc.length - 1 as the further digits of xc can be ignored.\r\n      for (a = 0; b;) {\r\n        a = (xc[--b] = xc[b] + yc[b] + a) / BASE | 0;\r\n        xc[b] = BASE === xc[b] ? 0 : xc[b] % BASE;\r\n      }\r\n\r\n      if (a) {\r\n        xc = [a].concat(xc);\r\n        ++ye;\r\n      }\r\n\r\n      // No need to check for zero, as +x + +y != 0 && -x + -y != 0\r\n      // ye = MAX_EXP + 1 possible\r\n      return normalise(y, xc, ye);\r\n    };\r\n\r\n\r\n    /*\r\n     * If sd is undefined or null or true or false, return the number of significant digits of\r\n     * the value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.\r\n     * If sd is true include integer-part trailing zeros in the count.\r\n     *\r\n     * Otherwise, if sd is a number, return a new BigNumber whose value is the value of this\r\n     * BigNumber rounded to a maximum of sd significant digits using rounding mode rm, or\r\n     * ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * sd {number|boolean} number: significant digits: integer, 1 to MAX inclusive.\r\n     *                     boolean: whether to count integer-part trailing zeros: true or false.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\r\n     */\r\n    P.precision = P.sd = function (sd, rm) {\r\n      var c, n, v,\r\n        x = this;\r\n\r\n      if (sd != null && sd !== !!sd) {\r\n        intCheck(sd, 1, MAX);\r\n        if (rm == null) rm = ROUNDING_MODE;\r\n        else intCheck(rm, 0, 8);\r\n\r\n        return round(new BigNumber(x), sd, rm);\r\n      }\r\n\r\n      if (!(c = x.c)) return null;\r\n      v = c.length - 1;\r\n      n = v * LOG_BASE + 1;\r\n\r\n      if (v = c[v]) {\r\n\r\n        // Subtract the number of trailing zeros of the last element.\r\n        for (; v % 10 == 0; v /= 10, n--);\r\n\r\n        // Add the number of digits of the first element.\r\n        for (v = c[0]; v >= 10; v /= 10, n++);\r\n      }\r\n\r\n      if (sd && x.e + 1 > n) n = x.e + 1;\r\n\r\n      return n;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber shifted by k places\r\n     * (powers of 10). Shift to the right if n > 0, and to the left if n < 0.\r\n     *\r\n     * k {number} Integer, -MAX_SAFE_INTEGER to MAX_SAFE_INTEGER inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {k}'\r\n     */\r\n    P.shiftedBy = function (k) {\r\n      intCheck(k, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER);\r\n      return this.times('1e' + k);\r\n    };\r\n\r\n\r\n    /*\r\n     *  sqrt(-n) =  N\r\n     *  sqrt(N) =  N\r\n     *  sqrt(-I) =  N\r\n     *  sqrt(I) =  I\r\n     *  sqrt(0) =  0\r\n     *  sqrt(-0) = -0\r\n     *\r\n     * Return a new BigNumber whose value is the square root of the value of this BigNumber,\r\n     * rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n     */\r\n    P.squareRoot = P.sqrt = function () {\r\n      var m, n, r, rep, t,\r\n        x = this,\r\n        c = x.c,\r\n        s = x.s,\r\n        e = x.e,\r\n        dp = DECIMAL_PLACES + 4,\r\n        half = new BigNumber('0.5');\r\n\r\n      // Negative/NaN/Infinity/zero?\r\n      if (s !== 1 || !c || !c[0]) {\r\n        return new BigNumber(!s || s < 0 && (!c || c[0]) ? NaN : c ? x : 1 / 0);\r\n      }\r\n\r\n      // Initial estimate.\r\n      s = Math.sqrt(+valueOf(x));\r\n\r\n      // Math.sqrt underflow/overflow?\r\n      // Pass x to Math.sqrt as integer, then adjust the exponent of the result.\r\n      if (s == 0 || s == 1 / 0) {\r\n        n = coeffToString(c);\r\n        if ((n.length + e) % 2 == 0) n += '0';\r\n        s = Math.sqrt(+n);\r\n        e = bitFloor((e + 1) / 2) - (e < 0 || e % 2);\r\n\r\n        if (s == 1 / 0) {\r\n          n = '5e' + e;\r\n        } else {\r\n          n = s.toExponential();\r\n          n = n.slice(0, n.indexOf('e') + 1) + e;\r\n        }\r\n\r\n        r = new BigNumber(n);\r\n      } else {\r\n        r = new BigNumber(s + '');\r\n      }\r\n\r\n      // Check for zero.\r\n      // r could be zero if MIN_EXP is changed after the this value was created.\r\n      // This would cause a division by zero (x/t) and hence Infinity below, which would cause\r\n      // coeffToString to throw.\r\n      if (r.c[0]) {\r\n        e = r.e;\r\n        s = e + dp;\r\n        if (s < 3) s = 0;\r\n\r\n        // Newton-Raphson iteration.\r\n        for (; ;) {\r\n          t = r;\r\n          r = half.times(t.plus(div(x, t, dp, 1)));\r\n\r\n          if (coeffToString(t.c).slice(0, s) === (n = coeffToString(r.c)).slice(0, s)) {\r\n\r\n            // The exponent of r may here be one less than the final result exponent,\r\n            // e.g 0.0009999 (e-4) --> 0.001 (e-3), so adjust s so the rounding digits\r\n            // are indexed correctly.\r\n            if (r.e < e) --s;\r\n            n = n.slice(s - 3, s + 1);\r\n\r\n            // The 4th rounding digit may be in error by -1 so if the 4 rounding digits\r\n            // are 9999 or 4999 (i.e. approaching a rounding boundary) continue the\r\n            // iteration.\r\n            if (n == '9999' || !rep && n == '4999') {\r\n\r\n              // On the first iteration only, check to see if rounding up gives the\r\n              // exact result as the nines may infinitely repeat.\r\n              if (!rep) {\r\n                round(t, t.e + DECIMAL_PLACES + 2, 0);\r\n\r\n                if (t.times(t).eq(x)) {\r\n                  r = t;\r\n                  break;\r\n                }\r\n              }\r\n\r\n              dp += 4;\r\n              s += 4;\r\n              rep = 1;\r\n            } else {\r\n\r\n              // If rounding digits are null, 0{0,4} or 50{0,3}, check for exact\r\n              // result. If not, then there are further digits and m will be truthy.\r\n              if (!+n || !+n.slice(1) && n.charAt(0) == '5') {\r\n\r\n                // Truncate to the first rounding digit.\r\n                round(r, r.e + DECIMAL_PLACES + 2, 1);\r\n                m = !r.times(r).eq(x);\r\n              }\r\n\r\n              break;\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      return round(r, r.e + DECIMAL_PLACES + 1, ROUNDING_MODE, m);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in exponential notation and\r\n     * rounded using ROUNDING_MODE to dp fixed decimal places.\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     */\r\n    P.toExponential = function (dp, rm) {\r\n      if (dp != null) {\r\n        intCheck(dp, 0, MAX);\r\n        dp++;\r\n      }\r\n      return format(this, dp, rm, 1);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in fixed-point notation rounding\r\n     * to dp fixed decimal places using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * Note: as with JavaScript's number type, (-0).toFixed(0) is '0',\r\n     * but e.g. (-0.00001).toFixed(0) is '-0'.\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     */\r\n    P.toFixed = function (dp, rm) {\r\n      if (dp != null) {\r\n        intCheck(dp, 0, MAX);\r\n        dp = dp + this.e + 1;\r\n      }\r\n      return format(this, dp, rm);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in fixed-point notation rounded\r\n     * using rm or ROUNDING_MODE to dp decimal places, and formatted according to the properties\r\n     * of the format or FORMAT object (see BigNumber.set).\r\n     *\r\n     * The formatting object may contain some or all of the properties shown below.\r\n     *\r\n     * FORMAT = {\r\n     *   prefix: '',\r\n     *   groupSize: 3,\r\n     *   secondaryGroupSize: 0,\r\n     *   groupSeparator: ',',\r\n     *   decimalSeparator: '.',\r\n     *   fractionGroupSize: 0,\r\n     *   fractionGroupSeparator: '\\xA0',      // non-breaking space\r\n     *   suffix: ''\r\n     * };\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     * [format] {object} Formatting options. See FORMAT pbject above.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     * '[BigNumber Error] Argument not an object: {format}'\r\n     */\r\n    P.toFormat = function (dp, rm, format) {\r\n      var str,\r\n        x = this;\r\n\r\n      if (format == null) {\r\n        if (dp != null && rm && typeof rm == 'object') {\r\n          format = rm;\r\n          rm = null;\r\n        } else if (dp && typeof dp == 'object') {\r\n          format = dp;\r\n          dp = rm = null;\r\n        } else {\r\n          format = FORMAT;\r\n        }\r\n      } else if (typeof format != 'object') {\r\n        throw Error\r\n          (bignumberError + 'Argument not an object: ' + format);\r\n      }\r\n\r\n      str = x.toFixed(dp, rm);\r\n\r\n      if (x.c) {\r\n        var i,\r\n          arr = str.split('.'),\r\n          g1 = +format.groupSize,\r\n          g2 = +format.secondaryGroupSize,\r\n          groupSeparator = format.groupSeparator || '',\r\n          intPart = arr[0],\r\n          fractionPart = arr[1],\r\n          isNeg = x.s < 0,\r\n          intDigits = isNeg ? intPart.slice(1) : intPart,\r\n          len = intDigits.length;\r\n\r\n        if (g2) i = g1, g1 = g2, g2 = i, len -= i;\r\n\r\n        if (g1 > 0 && len > 0) {\r\n          i = len % g1 || g1;\r\n          intPart = intDigits.substr(0, i);\r\n          for (; i < len; i += g1) intPart += groupSeparator + intDigits.substr(i, g1);\r\n          if (g2 > 0) intPart += groupSeparator + intDigits.slice(i);\r\n          if (isNeg) intPart = '-' + intPart;\r\n        }\r\n\r\n        str = fractionPart\r\n         ? intPart + (format.decimalSeparator || '') + ((g2 = +format.fractionGroupSize)\r\n          ? fractionPart.replace(new RegExp('\\\\d{' + g2 + '}\\\\B', 'g'),\r\n           '$&' + (format.fractionGroupSeparator || ''))\r\n          : fractionPart)\r\n         : intPart;\r\n      }\r\n\r\n      return (format.prefix || '') + str + (format.suffix || '');\r\n    };\r\n\r\n\r\n    /*\r\n     * Return an array of two BigNumbers representing the value of this BigNumber as a simple\r\n     * fraction with an integer numerator and an integer denominator.\r\n     * The denominator will be a positive non-zero value less than or equal to the specified\r\n     * maximum denominator. If a maximum denominator is not specified, the denominator will be\r\n     * the lowest value necessary to represent the number exactly.\r\n     *\r\n     * [md] {number|string|BigNumber} Integer >= 1, or Infinity. The maximum denominator.\r\n     *\r\n     * '[BigNumber Error] Argument {not an integer|out of range} : {md}'\r\n     */\r\n    P.toFraction = function (md) {\r\n      var d, d0, d1, d2, e, exp, n, n0, n1, q, r, s,\r\n        x = this,\r\n        xc = x.c;\r\n\r\n      if (md != null) {\r\n        n = new BigNumber(md);\r\n\r\n        // Throw if md is less than one or is not an integer, unless it is Infinity.\r\n        if (!n.isInteger() && (n.c || n.s !== 1) || n.lt(ONE)) {\r\n          throw Error\r\n            (bignumberError + 'Argument ' +\r\n              (n.isInteger() ? 'out of range: ' : 'not an integer: ') + valueOf(n));\r\n        }\r\n      }\r\n\r\n      if (!xc) return new BigNumber(x);\r\n\r\n      d = new BigNumber(ONE);\r\n      n1 = d0 = new BigNumber(ONE);\r\n      d1 = n0 = new BigNumber(ONE);\r\n      s = coeffToString(xc);\r\n\r\n      // Determine initial denominator.\r\n      // d is a power of 10 and the minimum max denominator that specifies the value exactly.\r\n      e = d.e = s.length - x.e - 1;\r\n      d.c[0] = POWS_TEN[(exp = e % LOG_BASE) < 0 ? LOG_BASE + exp : exp];\r\n      md = !md || n.comparedTo(d) > 0 ? (e > 0 ? d : n1) : n;\r\n\r\n      exp = MAX_EXP;\r\n      MAX_EXP = 1 / 0;\r\n      n = new BigNumber(s);\r\n\r\n      // n0 = d1 = 0\r\n      n0.c[0] = 0;\r\n\r\n      for (; ;)  {\r\n        q = div(n, d, 0, 1);\r\n        d2 = d0.plus(q.times(d1));\r\n        if (d2.comparedTo(md) == 1) break;\r\n        d0 = d1;\r\n        d1 = d2;\r\n        n1 = n0.plus(q.times(d2 = n1));\r\n        n0 = d2;\r\n        d = n.minus(q.times(d2 = d));\r\n        n = d2;\r\n      }\r\n\r\n      d2 = div(md.minus(d0), d1, 0, 1);\r\n      n0 = n0.plus(d2.times(n1));\r\n      d0 = d0.plus(d2.times(d1));\r\n      n0.s = n1.s = x.s;\r\n      e = e * 2;\r\n\r\n      // Determine which fraction is closer to x, n0/d0 or n1/d1\r\n      r = div(n1, d1, e, ROUNDING_MODE).minus(x).abs().comparedTo(\r\n          div(n0, d0, e, ROUNDING_MODE).minus(x).abs()) < 1 ? [n1, d1] : [n0, d0];\r\n\r\n      MAX_EXP = exp;\r\n\r\n      return r;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return the value of this BigNumber converted to a number primitive.\r\n     */\r\n    P.toNumber = function () {\r\n      return +valueOf(this);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber rounded to sd significant digits\r\n     * using rounding mode rm or ROUNDING_MODE. If sd is less than the number of digits\r\n     * necessary to represent the integer part of the value in fixed-point notation, then use\r\n     * exponential notation.\r\n     *\r\n     * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\r\n     */\r\n    P.toPrecision = function (sd, rm) {\r\n      if (sd != null) intCheck(sd, 1, MAX);\r\n      return format(this, sd, rm, 2);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in base b, or base 10 if b is\r\n     * omitted. If a base is specified, including base 10, round according to DECIMAL_PLACES and\r\n     * ROUNDING_MODE. If a base is not specified, and this BigNumber has a positive exponent\r\n     * that is equal to or greater than TO_EXP_POS, or a negative exponent equal to or less than\r\n     * TO_EXP_NEG, return exponential notation.\r\n     *\r\n     * [b] {number} Integer, 2 to ALPHABET.length inclusive.\r\n     *\r\n     * '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\r\n     */\r\n    P.toString = function (b) {\r\n      var str,\r\n        n = this,\r\n        s = n.s,\r\n        e = n.e;\r\n\r\n      // Infinity or NaN?\r\n      if (e === null) {\r\n        if (s) {\r\n          str = 'Infinity';\r\n          if (s < 0) str = '-' + str;\r\n        } else {\r\n          str = 'NaN';\r\n        }\r\n      } else {\r\n        if (b == null) {\r\n          str = e <= TO_EXP_NEG || e >= TO_EXP_POS\r\n           ? toExponential(coeffToString(n.c), e)\r\n           : toFixedPoint(coeffToString(n.c), e, '0');\r\n        } else if (b === 10) {\r\n          n = round(new BigNumber(n), DECIMAL_PLACES + e + 1, ROUNDING_MODE);\r\n          str = toFixedPoint(coeffToString(n.c), n.e, '0');\r\n        } else {\r\n          intCheck(b, 2, ALPHABET.length, 'Base');\r\n          str = convertBase(toFixedPoint(coeffToString(n.c), e, '0'), 10, b, s, true);\r\n        }\r\n\r\n        if (s < 0 && n.c[0]) str = '-' + str;\r\n      }\r\n\r\n      return str;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return as toString, but do not accept a base argument, and include the minus sign for\r\n     * negative zero.\r\n     */\r\n    P.valueOf = P.toJSON = function () {\r\n      return valueOf(this);\r\n    };\r\n\r\n\r\n    P._isBigNumber = true;\r\n\r\n    if (configObject != null) BigNumber.set(configObject);\r\n\r\n    return BigNumber;\r\n  }\r\n\r\n\r\n  // PRIVATE HELPER FUNCTIONS\r\n\r\n  // These functions don't need access to variables,\r\n  // e.g. DECIMAL_PLACES, in the scope of the `clone` function above.\r\n\r\n\r\n  function bitFloor(n) {\r\n    var i = n | 0;\r\n    return n > 0 || n === i ? i : i - 1;\r\n  }\r\n\r\n\r\n  // Return a coefficient array as a string of base 10 digits.\r\n  function coeffToString(a) {\r\n    var s, z,\r\n      i = 1,\r\n      j = a.length,\r\n      r = a[0] + '';\r\n\r\n    for (; i < j;) {\r\n      s = a[i++] + '';\r\n      z = LOG_BASE - s.length;\r\n      for (; z--; s = '0' + s);\r\n      r += s;\r\n    }\r\n\r\n    // Determine trailing zeros.\r\n    for (j = r.length; r.charCodeAt(--j) === 48;);\r\n\r\n    return r.slice(0, j + 1 || 1);\r\n  }\r\n\r\n\r\n  // Compare the value of BigNumbers x and y.\r\n  function compare(x, y) {\r\n    var a, b,\r\n      xc = x.c,\r\n      yc = y.c,\r\n      i = x.s,\r\n      j = y.s,\r\n      k = x.e,\r\n      l = y.e;\r\n\r\n    // Either NaN?\r\n    if (!i || !j) return null;\r\n\r\n    a = xc && !xc[0];\r\n    b = yc && !yc[0];\r\n\r\n    // Either zero?\r\n    if (a || b) return a ? b ? 0 : -j : i;\r\n\r\n    // Signs differ?\r\n    if (i != j) return i;\r\n\r\n    a = i < 0;\r\n    b = k == l;\r\n\r\n    // Either Infinity?\r\n    if (!xc || !yc) return b ? 0 : !xc ^ a ? 1 : -1;\r\n\r\n    // Compare exponents.\r\n    if (!b) return k > l ^ a ? 1 : -1;\r\n\r\n    j = (k = xc.length) < (l = yc.length) ? k : l;\r\n\r\n    // Compare digit by digit.\r\n    for (i = 0; i < j; i++) if (xc[i] != yc[i]) return xc[i] > yc[i] ^ a ? 1 : -1;\r\n\r\n    // Compare lengths.\r\n    return k == l ? 0 : k > l ^ a ? 1 : -1;\r\n  }\r\n\r\n\r\n  /*\r\n   * Check that n is a primitive number, an integer, and in range, otherwise throw.\r\n   */\r\n  function intCheck(n, min, max, name) {\r\n    if (n < min || n > max || n !== mathfloor(n)) {\r\n      throw Error\r\n       (bignumberError + (name || 'Argument') + (typeof n == 'number'\r\n         ? n < min || n > max ? ' out of range: ' : ' not an integer: '\r\n         : ' not a primitive number: ') + String(n));\r\n    }\r\n  }\r\n\r\n\r\n  // Assumes finite n.\r\n  function isOdd(n) {\r\n    var k = n.c.length - 1;\r\n    return bitFloor(n.e / LOG_BASE) == k && n.c[k] % 2 != 0;\r\n  }\r\n\r\n\r\n  function toExponential(str, e) {\r\n    return (str.length > 1 ? str.charAt(0) + '.' + str.slice(1) : str) +\r\n     (e < 0 ? 'e' : 'e+') + e;\r\n  }\r\n\r\n\r\n  function toFixedPoint(str, e, z) {\r\n    var len, zs;\r\n\r\n    // Negative exponent?\r\n    if (e < 0) {\r\n\r\n      // Prepend zeros.\r\n      for (zs = z + '.'; ++e; zs += z);\r\n      str = zs + str;\r\n\r\n    // Positive exponent\r\n    } else {\r\n      len = str.length;\r\n\r\n      // Append zeros.\r\n      if (++e > len) {\r\n        for (zs = z, e -= len; --e; zs += z);\r\n        str += zs;\r\n      } else if (e < len) {\r\n        str = str.slice(0, e) + '.' + str.slice(e);\r\n      }\r\n    }\r\n\r\n    return str;\r\n  }\r\n\r\n\r\n  // EXPORT\r\n\r\n\r\n  BigNumber = clone();\r\n  BigNumber['default'] = BigNumber.BigNumber = BigNumber;\r\n\r\n  // AMD.\r\n  if (typeof define == 'function' && define.amd) {\r\n    define(function () { return BigNumber; });\r\n\r\n  // Node.js and other environments that support module.exports.\r\n  } else if (typeof module != 'undefined' && module.exports) {\r\n    module.exports = BigNumber;\r\n\r\n  // Browser.\r\n  } else {\r\n    if (!globalObject) {\r\n      globalObject = typeof self != 'undefined' && self ? self : window;\r\n    }\r\n\r\n    globalObject.BigNumber = BigNumber;\r\n  }\r\n})(this);\r\n","var bigInt = (function (undefined) {\r\n    \"use strict\";\r\n\r\n    var BASE = 1e7,\r\n        LOG_BASE = 7,\r\n        MAX_INT = 9007199254740992,\r\n        MAX_INT_ARR = smallToArray(MAX_INT),\r\n        DEFAULT_ALPHABET = \"0123456789abcdefghijklmnopqrstuvwxyz\";\r\n\r\n    var supportsNativeBigInt = typeof BigInt === \"function\";\r\n\r\n    function Integer(v, radix, alphabet, caseSensitive) {\r\n        if (typeof v === \"undefined\") return Integer[0];\r\n        if (typeof radix !== \"undefined\") return +radix === 10 && !alphabet ? parseValue(v) : parseBase(v, radix, alphabet, caseSensitive);\r\n        return parseValue(v);\r\n    }\r\n\r\n    function BigInteger(value, sign) {\r\n        this.value = value;\r\n        this.sign = sign;\r\n        this.isSmall = false;\r\n    }\r\n    BigInteger.prototype = Object.create(Integer.prototype);\r\n\r\n    function SmallInteger(value) {\r\n        this.value = value;\r\n        this.sign = value < 0;\r\n        this.isSmall = true;\r\n    }\r\n    SmallInteger.prototype = Object.create(Integer.prototype);\r\n\r\n    function NativeBigInt(value) {\r\n        this.value = value;\r\n    }\r\n    NativeBigInt.prototype = Object.create(Integer.prototype);\r\n\r\n    function isPrecise(n) {\r\n        return -MAX_INT < n && n < MAX_INT;\r\n    }\r\n\r\n    function smallToArray(n) { // For performance reasons doesn't reference BASE, need to change this function if BASE changes\r\n        if (n < 1e7)\r\n            return [n];\r\n        if (n < 1e14)\r\n            return [n % 1e7, Math.floor(n / 1e7)];\r\n        return [n % 1e7, Math.floor(n / 1e7) % 1e7, Math.floor(n / 1e14)];\r\n    }\r\n\r\n    function arrayToSmall(arr) { // If BASE changes this function may need to change\r\n        trim(arr);\r\n        var length = arr.length;\r\n        if (length < 4 && compareAbs(arr, MAX_INT_ARR) < 0) {\r\n            switch (length) {\r\n                case 0: return 0;\r\n                case 1: return arr[0];\r\n                case 2: return arr[0] + arr[1] * BASE;\r\n                default: return arr[0] + (arr[1] + arr[2] * BASE) * BASE;\r\n            }\r\n        }\r\n        return arr;\r\n    }\r\n\r\n    function trim(v) {\r\n        var i = v.length;\r\n        while (v[--i] === 0);\r\n        v.length = i + 1;\r\n    }\r\n\r\n    function createArray(length) { // function shamelessly stolen from Yaffle's library https://github.com/Yaffle/BigInteger\r\n        var x = new Array(length);\r\n        var i = -1;\r\n        while (++i < length) {\r\n            x[i] = 0;\r\n        }\r\n        return x;\r\n    }\r\n\r\n    function truncate(n) {\r\n        if (n > 0) return Math.floor(n);\r\n        return Math.ceil(n);\r\n    }\r\n\r\n    function add(a, b) { // assumes a and b are arrays with a.length >= b.length\r\n        var l_a = a.length,\r\n            l_b = b.length,\r\n            r = new Array(l_a),\r\n            carry = 0,\r\n            base = BASE,\r\n            sum, i;\r\n        for (i = 0; i < l_b; i++) {\r\n            sum = a[i] + b[i] + carry;\r\n            carry = sum >= base ? 1 : 0;\r\n            r[i] = sum - carry * base;\r\n        }\r\n        while (i < l_a) {\r\n            sum = a[i] + carry;\r\n            carry = sum === base ? 1 : 0;\r\n            r[i++] = sum - carry * base;\r\n        }\r\n        if (carry > 0) r.push(carry);\r\n        return r;\r\n    }\r\n\r\n    function addAny(a, b) {\r\n        if (a.length >= b.length) return add(a, b);\r\n        return add(b, a);\r\n    }\r\n\r\n    function addSmall(a, carry) { // assumes a is array, carry is number with 0 <= carry < MAX_INT\r\n        var l = a.length,\r\n            r = new Array(l),\r\n            base = BASE,\r\n            sum, i;\r\n        for (i = 0; i < l; i++) {\r\n            sum = a[i] - base + carry;\r\n            carry = Math.floor(sum / base);\r\n            r[i] = sum - carry * base;\r\n            carry += 1;\r\n        }\r\n        while (carry > 0) {\r\n            r[i++] = carry % base;\r\n            carry = Math.floor(carry / base);\r\n        }\r\n        return r;\r\n    }\r\n\r\n    BigInteger.prototype.add = function (v) {\r\n        var n = parseValue(v);\r\n        if (this.sign !== n.sign) {\r\n            return this.subtract(n.negate());\r\n        }\r\n        var a = this.value, b = n.value;\r\n        if (n.isSmall) {\r\n            return new BigInteger(addSmall(a, Math.abs(b)), this.sign);\r\n        }\r\n        return new BigInteger(addAny(a, b), this.sign);\r\n    };\r\n    BigInteger.prototype.plus = BigInteger.prototype.add;\r\n\r\n    SmallInteger.prototype.add = function (v) {\r\n        var n = parseValue(v);\r\n        var a = this.value;\r\n        if (a < 0 !== n.sign) {\r\n            return this.subtract(n.negate());\r\n        }\r\n        var b = n.value;\r\n        if (n.isSmall) {\r\n            if (isPrecise(a + b)) return new SmallInteger(a + b);\r\n            b = smallToArray(Math.abs(b));\r\n        }\r\n        return new BigInteger(addSmall(b, Math.abs(a)), a < 0);\r\n    };\r\n    SmallInteger.prototype.plus = SmallInteger.prototype.add;\r\n\r\n    NativeBigInt.prototype.add = function (v) {\r\n        return new NativeBigInt(this.value + parseValue(v).value);\r\n    }\r\n    NativeBigInt.prototype.plus = NativeBigInt.prototype.add;\r\n\r\n    function subtract(a, b) { // assumes a and b are arrays with a >= b\r\n        var a_l = a.length,\r\n            b_l = b.length,\r\n            r = new Array(a_l),\r\n            borrow = 0,\r\n            base = BASE,\r\n            i, difference;\r\n        for (i = 0; i < b_l; i++) {\r\n            difference = a[i] - borrow - b[i];\r\n            if (difference < 0) {\r\n                difference += base;\r\n                borrow = 1;\r\n            } else borrow = 0;\r\n            r[i] = difference;\r\n        }\r\n        for (i = b_l; i < a_l; i++) {\r\n            difference = a[i] - borrow;\r\n            if (difference < 0) difference += base;\r\n            else {\r\n                r[i++] = difference;\r\n                break;\r\n            }\r\n            r[i] = difference;\r\n        }\r\n        for (; i < a_l; i++) {\r\n            r[i] = a[i];\r\n        }\r\n        trim(r);\r\n        return r;\r\n    }\r\n\r\n    function subtractAny(a, b, sign) {\r\n        var value;\r\n        if (compareAbs(a, b) >= 0) {\r\n            value = subtract(a, b);\r\n        } else {\r\n            value = subtract(b, a);\r\n            sign = !sign;\r\n        }\r\n        value = arrayToSmall(value);\r\n        if (typeof value === \"number\") {\r\n            if (sign) value = -value;\r\n            return new SmallInteger(value);\r\n        }\r\n        return new BigInteger(value, sign);\r\n    }\r\n\r\n    function subtractSmall(a, b, sign) { // assumes a is array, b is number with 0 <= b < MAX_INT\r\n        var l = a.length,\r\n            r = new Array(l),\r\n            carry = -b,\r\n            base = BASE,\r\n            i, difference;\r\n        for (i = 0; i < l; i++) {\r\n            difference = a[i] + carry;\r\n            carry = Math.floor(difference / base);\r\n            difference %= base;\r\n            r[i] = difference < 0 ? difference + base : difference;\r\n        }\r\n        r = arrayToSmall(r);\r\n        if (typeof r === \"number\") {\r\n            if (sign) r = -r;\r\n            return new SmallInteger(r);\r\n        } return new BigInteger(r, sign);\r\n    }\r\n\r\n    BigInteger.prototype.subtract = function (v) {\r\n        var n = parseValue(v);\r\n        if (this.sign !== n.sign) {\r\n            return this.add(n.negate());\r\n        }\r\n        var a = this.value, b = n.value;\r\n        if (n.isSmall)\r\n            return subtractSmall(a, Math.abs(b), this.sign);\r\n        return subtractAny(a, b, this.sign);\r\n    };\r\n    BigInteger.prototype.minus = BigInteger.prototype.subtract;\r\n\r\n    SmallInteger.prototype.subtract = function (v) {\r\n        var n = parseValue(v);\r\n        var a = this.value;\r\n        if (a < 0 !== n.sign) {\r\n            return this.add(n.negate());\r\n        }\r\n        var b = n.value;\r\n        if (n.isSmall) {\r\n            return new SmallInteger(a - b);\r\n        }\r\n        return subtractSmall(b, Math.abs(a), a >= 0);\r\n    };\r\n    SmallInteger.prototype.minus = SmallInteger.prototype.subtract;\r\n\r\n    NativeBigInt.prototype.subtract = function (v) {\r\n        return new NativeBigInt(this.value - parseValue(v).value);\r\n    }\r\n    NativeBigInt.prototype.minus = NativeBigInt.prototype.subtract;\r\n\r\n    BigInteger.prototype.negate = function () {\r\n        return new BigInteger(this.value, !this.sign);\r\n    };\r\n    SmallInteger.prototype.negate = function () {\r\n        var sign = this.sign;\r\n        var small = new SmallInteger(-this.value);\r\n        small.sign = !sign;\r\n        return small;\r\n    };\r\n    NativeBigInt.prototype.negate = function () {\r\n        return new NativeBigInt(-this.value);\r\n    }\r\n\r\n    BigInteger.prototype.abs = function () {\r\n        return new BigInteger(this.value, false);\r\n    };\r\n    SmallInteger.prototype.abs = function () {\r\n        return new SmallInteger(Math.abs(this.value));\r\n    };\r\n    NativeBigInt.prototype.abs = function () {\r\n        return new NativeBigInt(this.value >= 0 ? this.value : -this.value);\r\n    }\r\n\r\n\r\n    function multiplyLong(a, b) {\r\n        var a_l = a.length,\r\n            b_l = b.length,\r\n            l = a_l + b_l,\r\n            r = createArray(l),\r\n            base = BASE,\r\n            product, carry, i, a_i, b_j;\r\n        for (i = 0; i < a_l; ++i) {\r\n            a_i = a[i];\r\n            for (var j = 0; j < b_l; ++j) {\r\n                b_j = b[j];\r\n                product = a_i * b_j + r[i + j];\r\n                carry = Math.floor(product / base);\r\n                r[i + j] = product - carry * base;\r\n                r[i + j + 1] += carry;\r\n            }\r\n        }\r\n        trim(r);\r\n        return r;\r\n    }\r\n\r\n    function multiplySmall(a, b) { // assumes a is array, b is number with |b| < BASE\r\n        var l = a.length,\r\n            r = new Array(l),\r\n            base = BASE,\r\n            carry = 0,\r\n            product, i;\r\n        for (i = 0; i < l; i++) {\r\n            product = a[i] * b + carry;\r\n            carry = Math.floor(product / base);\r\n            r[i] = product - carry * base;\r\n        }\r\n        while (carry > 0) {\r\n            r[i++] = carry % base;\r\n            carry = Math.floor(carry / base);\r\n        }\r\n        return r;\r\n    }\r\n\r\n    function shiftLeft(x, n) {\r\n        var r = [];\r\n        while (n-- > 0) r.push(0);\r\n        return r.concat(x);\r\n    }\r\n\r\n    function multiplyKaratsuba(x, y) {\r\n        var n = Math.max(x.length, y.length);\r\n\r\n        if (n <= 30) return multiplyLong(x, y);\r\n        n = Math.ceil(n / 2);\r\n\r\n        var b = x.slice(n),\r\n            a = x.slice(0, n),\r\n            d = y.slice(n),\r\n            c = y.slice(0, n);\r\n\r\n        var ac = multiplyKaratsuba(a, c),\r\n            bd = multiplyKaratsuba(b, d),\r\n            abcd = multiplyKaratsuba(addAny(a, b), addAny(c, d));\r\n\r\n        var product = addAny(addAny(ac, shiftLeft(subtract(subtract(abcd, ac), bd), n)), shiftLeft(bd, 2 * n));\r\n        trim(product);\r\n        return product;\r\n    }\r\n\r\n    // The following function is derived from a surface fit of a graph plotting the performance difference\r\n    // between long multiplication and karatsuba multiplication versus the lengths of the two arrays.\r\n    function useKaratsuba(l1, l2) {\r\n        return -0.012 * l1 - 0.012 * l2 + 0.000015 * l1 * l2 > 0;\r\n    }\r\n\r\n    BigInteger.prototype.multiply = function (v) {\r\n        var n = parseValue(v),\r\n            a = this.value, b = n.value,\r\n            sign = this.sign !== n.sign,\r\n            abs;\r\n        if (n.isSmall) {\r\n            if (b === 0) return Integer[0];\r\n            if (b === 1) return this;\r\n            if (b === -1) return this.negate();\r\n            abs = Math.abs(b);\r\n            if (abs < BASE) {\r\n                return new BigInteger(multiplySmall(a, abs), sign);\r\n            }\r\n            b = smallToArray(abs);\r\n        }\r\n        if (useKaratsuba(a.length, b.length)) // Karatsuba is only faster for certain array sizes\r\n            return new BigInteger(multiplyKaratsuba(a, b), sign);\r\n        return new BigInteger(multiplyLong(a, b), sign);\r\n    };\r\n\r\n    BigInteger.prototype.times = BigInteger.prototype.multiply;\r\n\r\n    function multiplySmallAndArray(a, b, sign) { // a >= 0\r\n        if (a < BASE) {\r\n            return new BigInteger(multiplySmall(b, a), sign);\r\n        }\r\n        return new BigInteger(multiplyLong(b, smallToArray(a)), sign);\r\n    }\r\n    SmallInteger.prototype._multiplyBySmall = function (a) {\r\n        if (isPrecise(a.value * this.value)) {\r\n            return new SmallInteger(a.value * this.value);\r\n        }\r\n        return multiplySmallAndArray(Math.abs(a.value), smallToArray(Math.abs(this.value)), this.sign !== a.sign);\r\n    };\r\n    BigInteger.prototype._multiplyBySmall = function (a) {\r\n        if (a.value === 0) return Integer[0];\r\n        if (a.value === 1) return this;\r\n        if (a.value === -1) return this.negate();\r\n        return multiplySmallAndArray(Math.abs(a.value), this.value, this.sign !== a.sign);\r\n    };\r\n    SmallInteger.prototype.multiply = function (v) {\r\n        return parseValue(v)._multiplyBySmall(this);\r\n    };\r\n    SmallInteger.prototype.times = SmallInteger.prototype.multiply;\r\n\r\n    NativeBigInt.prototype.multiply = function (v) {\r\n        return new NativeBigInt(this.value * parseValue(v).value);\r\n    }\r\n    NativeBigInt.prototype.times = NativeBigInt.prototype.multiply;\r\n\r\n    function square(a) {\r\n        //console.assert(2 * BASE * BASE < MAX_INT);\r\n        var l = a.length,\r\n            r = createArray(l + l),\r\n            base = BASE,\r\n            product, carry, i, a_i, a_j;\r\n        for (i = 0; i < l; i++) {\r\n            a_i = a[i];\r\n            carry = 0 - a_i * a_i;\r\n            for (var j = i; j < l; j++) {\r\n                a_j = a[j];\r\n                product = 2 * (a_i * a_j) + r[i + j] + carry;\r\n                carry = Math.floor(product / base);\r\n                r[i + j] = product - carry * base;\r\n            }\r\n            r[i + l] = carry;\r\n        }\r\n        trim(r);\r\n        return r;\r\n    }\r\n\r\n    BigInteger.prototype.square = function () {\r\n        return new BigInteger(square(this.value), false);\r\n    };\r\n\r\n    SmallInteger.prototype.square = function () {\r\n        var value = this.value * this.value;\r\n        if (isPrecise(value)) return new SmallInteger(value);\r\n        return new BigInteger(square(smallToArray(Math.abs(this.value))), false);\r\n    };\r\n\r\n    NativeBigInt.prototype.square = function (v) {\r\n        return new NativeBigInt(this.value * this.value);\r\n    }\r\n\r\n    function divMod1(a, b) { // Left over from previous version. Performs faster than divMod2 on smaller input sizes.\r\n        var a_l = a.length,\r\n            b_l = b.length,\r\n            base = BASE,\r\n            result = createArray(b.length),\r\n            divisorMostSignificantDigit = b[b_l - 1],\r\n            // normalization\r\n            lambda = Math.ceil(base / (2 * divisorMostSignificantDigit)),\r\n            remainder = multiplySmall(a, lambda),\r\n            divisor = multiplySmall(b, lambda),\r\n            quotientDigit, shift, carry, borrow, i, l, q;\r\n        if (remainder.length <= a_l) remainder.push(0);\r\n        divisor.push(0);\r\n        divisorMostSignificantDigit = divisor[b_l - 1];\r\n        for (shift = a_l - b_l; shift >= 0; shift--) {\r\n            quotientDigit = base - 1;\r\n            if (remainder[shift + b_l] !== divisorMostSignificantDigit) {\r\n                quotientDigit = Math.floor((remainder[shift + b_l] * base + remainder[shift + b_l - 1]) / divisorMostSignificantDigit);\r\n            }\r\n            // quotientDigit <= base - 1\r\n            carry = 0;\r\n            borrow = 0;\r\n            l = divisor.length;\r\n            for (i = 0; i < l; i++) {\r\n                carry += quotientDigit * divisor[i];\r\n                q = Math.floor(carry / base);\r\n                borrow += remainder[shift + i] - (carry - q * base);\r\n                carry = q;\r\n                if (borrow < 0) {\r\n                    remainder[shift + i] = borrow + base;\r\n                    borrow = -1;\r\n                } else {\r\n                    remainder[shift + i] = borrow;\r\n                    borrow = 0;\r\n                }\r\n            }\r\n            while (borrow !== 0) {\r\n                quotientDigit -= 1;\r\n                carry = 0;\r\n                for (i = 0; i < l; i++) {\r\n                    carry += remainder[shift + i] - base + divisor[i];\r\n                    if (carry < 0) {\r\n                        remainder[shift + i] = carry + base;\r\n                        carry = 0;\r\n                    } else {\r\n                        remainder[shift + i] = carry;\r\n                        carry = 1;\r\n                    }\r\n                }\r\n                borrow += carry;\r\n            }\r\n            result[shift] = quotientDigit;\r\n        }\r\n        // denormalization\r\n        remainder = divModSmall(remainder, lambda)[0];\r\n        return [arrayToSmall(result), arrayToSmall(remainder)];\r\n    }\r\n\r\n    function divMod2(a, b) { // Implementation idea shamelessly stolen from Silent Matt's library http://silentmatt.com/biginteger/\r\n        // Performs faster than divMod1 on larger input sizes.\r\n        var a_l = a.length,\r\n            b_l = b.length,\r\n            result = [],\r\n            part = [],\r\n            base = BASE,\r\n            guess, xlen, highx, highy, check;\r\n        while (a_l) {\r\n            part.unshift(a[--a_l]);\r\n            trim(part);\r\n            if (compareAbs(part, b) < 0) {\r\n                result.push(0);\r\n                continue;\r\n            }\r\n            xlen = part.length;\r\n            highx = part[xlen - 1] * base + part[xlen - 2];\r\n            highy = b[b_l - 1] * base + b[b_l - 2];\r\n            if (xlen > b_l) {\r\n                highx = (highx + 1) * base;\r\n            }\r\n            guess = Math.ceil(highx / highy);\r\n            do {\r\n                check = multiplySmall(b, guess);\r\n                if (compareAbs(check, part) <= 0) break;\r\n                guess--;\r\n            } while (guess);\r\n            result.push(guess);\r\n            part = subtract(part, check);\r\n        }\r\n        result.reverse();\r\n        return [arrayToSmall(result), arrayToSmall(part)];\r\n    }\r\n\r\n    function divModSmall(value, lambda) {\r\n        var length = value.length,\r\n            quotient = createArray(length),\r\n            base = BASE,\r\n            i, q, remainder, divisor;\r\n        remainder = 0;\r\n        for (i = length - 1; i >= 0; --i) {\r\n            divisor = remainder * base + value[i];\r\n            q = truncate(divisor / lambda);\r\n            remainder = divisor - q * lambda;\r\n            quotient[i] = q | 0;\r\n        }\r\n        return [quotient, remainder | 0];\r\n    }\r\n\r\n    function divModAny(self, v) {\r\n        var value, n = parseValue(v);\r\n        if (supportsNativeBigInt) {\r\n            return [new NativeBigInt(self.value / n.value), new NativeBigInt(self.value % n.value)];\r\n        }\r\n        var a = self.value, b = n.value;\r\n        var quotient;\r\n        if (b === 0) throw new Error(\"Cannot divide by zero\");\r\n        if (self.isSmall) {\r\n            if (n.isSmall) {\r\n                return [new SmallInteger(truncate(a / b)), new SmallInteger(a % b)];\r\n            }\r\n            return [Integer[0], self];\r\n        }\r\n        if (n.isSmall) {\r\n            if (b === 1) return [self, Integer[0]];\r\n            if (b == -1) return [self.negate(), Integer[0]];\r\n            var abs = Math.abs(b);\r\n            if (abs < BASE) {\r\n                value = divModSmall(a, abs);\r\n                quotient = arrayToSmall(value[0]);\r\n                var remainder = value[1];\r\n                if (self.sign) remainder = -remainder;\r\n                if (typeof quotient === \"number\") {\r\n                    if (self.sign !== n.sign) quotient = -quotient;\r\n                    return [new SmallInteger(quotient), new SmallInteger(remainder)];\r\n                }\r\n                return [new BigInteger(quotient, self.sign !== n.sign), new SmallInteger(remainder)];\r\n            }\r\n            b = smallToArray(abs);\r\n        }\r\n        var comparison = compareAbs(a, b);\r\n        if (comparison === -1) return [Integer[0], self];\r\n        if (comparison === 0) return [Integer[self.sign === n.sign ? 1 : -1], Integer[0]];\r\n\r\n        // divMod1 is faster on smaller input sizes\r\n        if (a.length + b.length <= 200)\r\n            value = divMod1(a, b);\r\n        else value = divMod2(a, b);\r\n\r\n        quotient = value[0];\r\n        var qSign = self.sign !== n.sign,\r\n            mod = value[1],\r\n            mSign = self.sign;\r\n        if (typeof quotient === \"number\") {\r\n            if (qSign) quotient = -quotient;\r\n            quotient = new SmallInteger(quotient);\r\n        } else quotient = new BigInteger(quotient, qSign);\r\n        if (typeof mod === \"number\") {\r\n            if (mSign) mod = -mod;\r\n            mod = new SmallInteger(mod);\r\n        } else mod = new BigInteger(mod, mSign);\r\n        return [quotient, mod];\r\n    }\r\n\r\n    BigInteger.prototype.divmod = function (v) {\r\n        var result = divModAny(this, v);\r\n        return {\r\n            quotient: result[0],\r\n            remainder: result[1]\r\n        };\r\n    };\r\n    NativeBigInt.prototype.divmod = SmallInteger.prototype.divmod = BigInteger.prototype.divmod;\r\n\r\n\r\n    BigInteger.prototype.divide = function (v) {\r\n        return divModAny(this, v)[0];\r\n    };\r\n    NativeBigInt.prototype.over = NativeBigInt.prototype.divide = function (v) {\r\n        return new NativeBigInt(this.value / parseValue(v).value);\r\n    };\r\n    SmallInteger.prototype.over = SmallInteger.prototype.divide = BigInteger.prototype.over = BigInteger.prototype.divide;\r\n\r\n    BigInteger.prototype.mod = function (v) {\r\n        return divModAny(this, v)[1];\r\n    };\r\n    NativeBigInt.prototype.mod = NativeBigInt.prototype.remainder = function (v) {\r\n        return new NativeBigInt(this.value % parseValue(v).value);\r\n    };\r\n    SmallInteger.prototype.remainder = SmallInteger.prototype.mod = BigInteger.prototype.remainder = BigInteger.prototype.mod;\r\n\r\n    BigInteger.prototype.pow = function (v) {\r\n        var n = parseValue(v),\r\n            a = this.value,\r\n            b = n.value,\r\n            value, x, y;\r\n        if (b === 0) return Integer[1];\r\n        if (a === 0) return Integer[0];\r\n        if (a === 1) return Integer[1];\r\n        if (a === -1) return n.isEven() ? Integer[1] : Integer[-1];\r\n        if (n.sign) {\r\n            return Integer[0];\r\n        }\r\n        if (!n.isSmall) throw new Error(\"The exponent \" + n.toString() + \" is too large.\");\r\n        if (this.isSmall) {\r\n            if (isPrecise(value = Math.pow(a, b)))\r\n                return new SmallInteger(truncate(value));\r\n        }\r\n        x = this;\r\n        y = Integer[1];\r\n        while (true) {\r\n            if (b & 1 === 1) {\r\n                y = y.times(x);\r\n                --b;\r\n            }\r\n            if (b === 0) break;\r\n            b /= 2;\r\n            x = x.square();\r\n        }\r\n        return y;\r\n    };\r\n    SmallInteger.prototype.pow = BigInteger.prototype.pow;\r\n\r\n    NativeBigInt.prototype.pow = function (v) {\r\n        var n = parseValue(v);\r\n        var a = this.value, b = n.value;\r\n        var _0 = BigInt(0), _1 = BigInt(1), _2 = BigInt(2);\r\n        if (b === _0) return Integer[1];\r\n        if (a === _0) return Integer[0];\r\n        if (a === _1) return Integer[1];\r\n        if (a === BigInt(-1)) return n.isEven() ? Integer[1] : Integer[-1];\r\n        if (n.isNegative()) return new NativeBigInt(_0);\r\n        var x = this;\r\n        var y = Integer[1];\r\n        while (true) {\r\n            if ((b & _1) === _1) {\r\n                y = y.times(x);\r\n                --b;\r\n            }\r\n            if (b === _0) break;\r\n            b /= _2;\r\n            x = x.square();\r\n        }\r\n        return y;\r\n    }\r\n\r\n    BigInteger.prototype.modPow = function (exp, mod) {\r\n        exp = parseValue(exp);\r\n        mod = parseValue(mod);\r\n        if (mod.isZero()) throw new Error(\"Cannot take modPow with modulus 0\");\r\n        var r = Integer[1],\r\n            base = this.mod(mod);\r\n        if (exp.isNegative()) {\r\n            exp = exp.multiply(Integer[-1]);\r\n            base = base.modInv(mod);\r\n        }\r\n        while (exp.isPositive()) {\r\n            if (base.isZero()) return Integer[0];\r\n            if (exp.isOdd()) r = r.multiply(base).mod(mod);\r\n            exp = exp.divide(2);\r\n            base = base.square().mod(mod);\r\n        }\r\n        return r;\r\n    };\r\n    NativeBigInt.prototype.modPow = SmallInteger.prototype.modPow = BigInteger.prototype.modPow;\r\n\r\n    function compareAbs(a, b) {\r\n        if (a.length !== b.length) {\r\n            return a.length > b.length ? 1 : -1;\r\n        }\r\n        for (var i = a.length - 1; i >= 0; i--) {\r\n            if (a[i] !== b[i]) return a[i] > b[i] ? 1 : -1;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    BigInteger.prototype.compareAbs = function (v) {\r\n        var n = parseValue(v),\r\n            a = this.value,\r\n            b = n.value;\r\n        if (n.isSmall) return 1;\r\n        return compareAbs(a, b);\r\n    };\r\n    SmallInteger.prototype.compareAbs = function (v) {\r\n        var n = parseValue(v),\r\n            a = Math.abs(this.value),\r\n            b = n.value;\r\n        if (n.isSmall) {\r\n            b = Math.abs(b);\r\n            return a === b ? 0 : a > b ? 1 : -1;\r\n        }\r\n        return -1;\r\n    };\r\n    NativeBigInt.prototype.compareAbs = function (v) {\r\n        var a = this.value;\r\n        var b = parseValue(v).value;\r\n        a = a >= 0 ? a : -a;\r\n        b = b >= 0 ? b : -b;\r\n        return a === b ? 0 : a > b ? 1 : -1;\r\n    }\r\n\r\n    BigInteger.prototype.compare = function (v) {\r\n        // See discussion about comparison with Infinity:\r\n        // https://github.com/peterolson/BigInteger.js/issues/61\r\n        if (v === Infinity) {\r\n            return -1;\r\n        }\r\n        if (v === -Infinity) {\r\n            return 1;\r\n        }\r\n\r\n        var n = parseValue(v),\r\n            a = this.value,\r\n            b = n.value;\r\n        if (this.sign !== n.sign) {\r\n            return n.sign ? 1 : -1;\r\n        }\r\n        if (n.isSmall) {\r\n            return this.sign ? -1 : 1;\r\n        }\r\n        return compareAbs(a, b) * (this.sign ? -1 : 1);\r\n    };\r\n    BigInteger.prototype.compareTo = BigInteger.prototype.compare;\r\n\r\n    SmallInteger.prototype.compare = function (v) {\r\n        if (v === Infinity) {\r\n            return -1;\r\n        }\r\n        if (v === -Infinity) {\r\n            return 1;\r\n        }\r\n\r\n        var n = parseValue(v),\r\n            a = this.value,\r\n            b = n.value;\r\n        if (n.isSmall) {\r\n            return a == b ? 0 : a > b ? 1 : -1;\r\n        }\r\n        if (a < 0 !== n.sign) {\r\n            return a < 0 ? -1 : 1;\r\n        }\r\n        return a < 0 ? 1 : -1;\r\n    };\r\n    SmallInteger.prototype.compareTo = SmallInteger.prototype.compare;\r\n\r\n    NativeBigInt.prototype.compare = function (v) {\r\n        if (v === Infinity) {\r\n            return -1;\r\n        }\r\n        if (v === -Infinity) {\r\n            return 1;\r\n        }\r\n        var a = this.value;\r\n        var b = parseValue(v).value;\r\n        return a === b ? 0 : a > b ? 1 : -1;\r\n    }\r\n    NativeBigInt.prototype.compareTo = NativeBigInt.prototype.compare;\r\n\r\n    BigInteger.prototype.equals = function (v) {\r\n        return this.compare(v) === 0;\r\n    };\r\n    NativeBigInt.prototype.eq = NativeBigInt.prototype.equals = SmallInteger.prototype.eq = SmallInteger.prototype.equals = BigInteger.prototype.eq = BigInteger.prototype.equals;\r\n\r\n    BigInteger.prototype.notEquals = function (v) {\r\n        return this.compare(v) !== 0;\r\n    };\r\n    NativeBigInt.prototype.neq = NativeBigInt.prototype.notEquals = SmallInteger.prototype.neq = SmallInteger.prototype.notEquals = BigInteger.prototype.neq = BigInteger.prototype.notEquals;\r\n\r\n    BigInteger.prototype.greater = function (v) {\r\n        return this.compare(v) > 0;\r\n    };\r\n    NativeBigInt.prototype.gt = NativeBigInt.prototype.greater = SmallInteger.prototype.gt = SmallInteger.prototype.greater = BigInteger.prototype.gt = BigInteger.prototype.greater;\r\n\r\n    BigInteger.prototype.lesser = function (v) {\r\n        return this.compare(v) < 0;\r\n    };\r\n    NativeBigInt.prototype.lt = NativeBigInt.prototype.lesser = SmallInteger.prototype.lt = SmallInteger.prototype.lesser = BigInteger.prototype.lt = BigInteger.prototype.lesser;\r\n\r\n    BigInteger.prototype.greaterOrEquals = function (v) {\r\n        return this.compare(v) >= 0;\r\n    };\r\n    NativeBigInt.prototype.geq = NativeBigInt.prototype.greaterOrEquals = SmallInteger.prototype.geq = SmallInteger.prototype.greaterOrEquals = BigInteger.prototype.geq = BigInteger.prototype.greaterOrEquals;\r\n\r\n    BigInteger.prototype.lesserOrEquals = function (v) {\r\n        return this.compare(v) <= 0;\r\n    };\r\n    NativeBigInt.prototype.leq = NativeBigInt.prototype.lesserOrEquals = SmallInteger.prototype.leq = SmallInteger.prototype.lesserOrEquals = BigInteger.prototype.leq = BigInteger.prototype.lesserOrEquals;\r\n\r\n    BigInteger.prototype.isEven = function () {\r\n        return (this.value[0] & 1) === 0;\r\n    };\r\n    SmallInteger.prototype.isEven = function () {\r\n        return (this.value & 1) === 0;\r\n    };\r\n    NativeBigInt.prototype.isEven = function () {\r\n        return (this.value & BigInt(1)) === BigInt(0);\r\n    }\r\n\r\n    BigInteger.prototype.isOdd = function () {\r\n        return (this.value[0] & 1) === 1;\r\n    };\r\n    SmallInteger.prototype.isOdd = function () {\r\n        return (this.value & 1) === 1;\r\n    };\r\n    NativeBigInt.prototype.isOdd = function () {\r\n        return (this.value & BigInt(1)) === BigInt(1);\r\n    }\r\n\r\n    BigInteger.prototype.isPositive = function () {\r\n        return !this.sign;\r\n    };\r\n    SmallInteger.prototype.isPositive = function () {\r\n        return this.value > 0;\r\n    };\r\n    NativeBigInt.prototype.isPositive = SmallInteger.prototype.isPositive;\r\n\r\n    BigInteger.prototype.isNegative = function () {\r\n        return this.sign;\r\n    };\r\n    SmallInteger.prototype.isNegative = function () {\r\n        return this.value < 0;\r\n    };\r\n    NativeBigInt.prototype.isNegative = SmallInteger.prototype.isNegative;\r\n\r\n    BigInteger.prototype.isUnit = function () {\r\n        return false;\r\n    };\r\n    SmallInteger.prototype.isUnit = function () {\r\n        return Math.abs(this.value) === 1;\r\n    };\r\n    NativeBigInt.prototype.isUnit = function () {\r\n        return this.abs().value === BigInt(1);\r\n    }\r\n\r\n    BigInteger.prototype.isZero = function () {\r\n        return false;\r\n    };\r\n    SmallInteger.prototype.isZero = function () {\r\n        return this.value === 0;\r\n    };\r\n    NativeBigInt.prototype.isZero = function () {\r\n        return this.value === BigInt(0);\r\n    }\r\n\r\n    BigInteger.prototype.isDivisibleBy = function (v) {\r\n        var n = parseValue(v);\r\n        if (n.isZero()) return false;\r\n        if (n.isUnit()) return true;\r\n        if (n.compareAbs(2) === 0) return this.isEven();\r\n        return this.mod(n).isZero();\r\n    };\r\n    NativeBigInt.prototype.isDivisibleBy = SmallInteger.prototype.isDivisibleBy = BigInteger.prototype.isDivisibleBy;\r\n\r\n    function isBasicPrime(v) {\r\n        var n = v.abs();\r\n        if (n.isUnit()) return false;\r\n        if (n.equals(2) || n.equals(3) || n.equals(5)) return true;\r\n        if (n.isEven() || n.isDivisibleBy(3) || n.isDivisibleBy(5)) return false;\r\n        if (n.lesser(49)) return true;\r\n        // we don't know if it's prime: let the other functions figure it out\r\n    }\r\n\r\n    function millerRabinTest(n, a) {\r\n        var nPrev = n.prev(),\r\n            b = nPrev,\r\n            r = 0,\r\n            d, t, i, x;\r\n        while (b.isEven()) b = b.divide(2), r++;\r\n        next: for (i = 0; i < a.length; i++) {\r\n            if (n.lesser(a[i])) continue;\r\n            x = bigInt(a[i]).modPow(b, n);\r\n            if (x.isUnit() || x.equals(nPrev)) continue;\r\n            for (d = r - 1; d != 0; d--) {\r\n                x = x.square().mod(n);\r\n                if (x.isUnit()) return false;\r\n                if (x.equals(nPrev)) continue next;\r\n            }\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    // Set \"strict\" to true to force GRH-supported lower bound of 2*log(N)^2\r\n    BigInteger.prototype.isPrime = function (strict) {\r\n        var isPrime = isBasicPrime(this);\r\n        if (isPrime !== undefined) return isPrime;\r\n        var n = this.abs();\r\n        var bits = n.bitLength();\r\n        if (bits <= 64)\r\n            return millerRabinTest(n, [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37]);\r\n        var logN = Math.log(2) * bits.toJSNumber();\r\n        var t = Math.ceil((strict === true) ? (2 * Math.pow(logN, 2)) : logN);\r\n        for (var a = [], i = 0; i < t; i++) {\r\n            a.push(bigInt(i + 2));\r\n        }\r\n        return millerRabinTest(n, a);\r\n    };\r\n    NativeBigInt.prototype.isPrime = SmallInteger.prototype.isPrime = BigInteger.prototype.isPrime;\r\n\r\n    BigInteger.prototype.isProbablePrime = function (iterations, rng) {\r\n        var isPrime = isBasicPrime(this);\r\n        if (isPrime !== undefined) return isPrime;\r\n        var n = this.abs();\r\n        var t = iterations === undefined ? 5 : iterations;\r\n        for (var a = [], i = 0; i < t; i++) {\r\n            a.push(bigInt.randBetween(2, n.minus(2), rng));\r\n        }\r\n        return millerRabinTest(n, a);\r\n    };\r\n    NativeBigInt.prototype.isProbablePrime = SmallInteger.prototype.isProbablePrime = BigInteger.prototype.isProbablePrime;\r\n\r\n    BigInteger.prototype.modInv = function (n) {\r\n        var t = bigInt.zero, newT = bigInt.one, r = parseValue(n), newR = this.abs(), q, lastT, lastR;\r\n        while (!newR.isZero()) {\r\n            q = r.divide(newR);\r\n            lastT = t;\r\n            lastR = r;\r\n            t = newT;\r\n            r = newR;\r\n            newT = lastT.subtract(q.multiply(newT));\r\n            newR = lastR.subtract(q.multiply(newR));\r\n        }\r\n        if (!r.isUnit()) throw new Error(this.toString() + \" and \" + n.toString() + \" are not co-prime\");\r\n        if (t.compare(0) === -1) {\r\n            t = t.add(n);\r\n        }\r\n        if (this.isNegative()) {\r\n            return t.negate();\r\n        }\r\n        return t;\r\n    };\r\n\r\n    NativeBigInt.prototype.modInv = SmallInteger.prototype.modInv = BigInteger.prototype.modInv;\r\n\r\n    BigInteger.prototype.next = function () {\r\n        var value = this.value;\r\n        if (this.sign) {\r\n            return subtractSmall(value, 1, this.sign);\r\n        }\r\n        return new BigInteger(addSmall(value, 1), this.sign);\r\n    };\r\n    SmallInteger.prototype.next = function () {\r\n        var value = this.value;\r\n        if (value + 1 < MAX_INT) return new SmallInteger(value + 1);\r\n        return new BigInteger(MAX_INT_ARR, false);\r\n    };\r\n    NativeBigInt.prototype.next = function () {\r\n        return new NativeBigInt(this.value + BigInt(1));\r\n    }\r\n\r\n    BigInteger.prototype.prev = function () {\r\n        var value = this.value;\r\n        if (this.sign) {\r\n            return new BigInteger(addSmall(value, 1), true);\r\n        }\r\n        return subtractSmall(value, 1, this.sign);\r\n    };\r\n    SmallInteger.prototype.prev = function () {\r\n        var value = this.value;\r\n        if (value - 1 > -MAX_INT) return new SmallInteger(value - 1);\r\n        return new BigInteger(MAX_INT_ARR, true);\r\n    };\r\n    NativeBigInt.prototype.prev = function () {\r\n        return new NativeBigInt(this.value - BigInt(1));\r\n    }\r\n\r\n    var powersOfTwo = [1];\r\n    while (2 * powersOfTwo[powersOfTwo.length - 1] <= BASE) powersOfTwo.push(2 * powersOfTwo[powersOfTwo.length - 1]);\r\n    var powers2Length = powersOfTwo.length, highestPower2 = powersOfTwo[powers2Length - 1];\r\n\r\n    function shift_isSmall(n) {\r\n        return Math.abs(n) <= BASE;\r\n    }\r\n\r\n    BigInteger.prototype.shiftLeft = function (v) {\r\n        var n = parseValue(v).toJSNumber();\r\n        if (!shift_isSmall(n)) {\r\n            throw new Error(String(n) + \" is too large for shifting.\");\r\n        }\r\n        if (n < 0) return this.shiftRight(-n);\r\n        var result = this;\r\n        if (result.isZero()) return result;\r\n        while (n >= powers2Length) {\r\n            result = result.multiply(highestPower2);\r\n            n -= powers2Length - 1;\r\n        }\r\n        return result.multiply(powersOfTwo[n]);\r\n    };\r\n    NativeBigInt.prototype.shiftLeft = SmallInteger.prototype.shiftLeft = BigInteger.prototype.shiftLeft;\r\n\r\n    BigInteger.prototype.shiftRight = function (v) {\r\n        var remQuo;\r\n        var n = parseValue(v).toJSNumber();\r\n        if (!shift_isSmall(n)) {\r\n            throw new Error(String(n) + \" is too large for shifting.\");\r\n        }\r\n        if (n < 0) return this.shiftLeft(-n);\r\n        var result = this;\r\n        while (n >= powers2Length) {\r\n            if (result.isZero() || (result.isNegative() && result.isUnit())) return result;\r\n            remQuo = divModAny(result, highestPower2);\r\n            result = remQuo[1].isNegative() ? remQuo[0].prev() : remQuo[0];\r\n            n -= powers2Length - 1;\r\n        }\r\n        remQuo = divModAny(result, powersOfTwo[n]);\r\n        return remQuo[1].isNegative() ? remQuo[0].prev() : remQuo[0];\r\n    };\r\n    NativeBigInt.prototype.shiftRight = SmallInteger.prototype.shiftRight = BigInteger.prototype.shiftRight;\r\n\r\n    function bitwise(x, y, fn) {\r\n        y = parseValue(y);\r\n        var xSign = x.isNegative(), ySign = y.isNegative();\r\n        var xRem = xSign ? x.not() : x,\r\n            yRem = ySign ? y.not() : y;\r\n        var xDigit = 0, yDigit = 0;\r\n        var xDivMod = null, yDivMod = null;\r\n        var result = [];\r\n        while (!xRem.isZero() || !yRem.isZero()) {\r\n            xDivMod = divModAny(xRem, highestPower2);\r\n            xDigit = xDivMod[1].toJSNumber();\r\n            if (xSign) {\r\n                xDigit = highestPower2 - 1 - xDigit; // two's complement for negative numbers\r\n            }\r\n\r\n            yDivMod = divModAny(yRem, highestPower2);\r\n            yDigit = yDivMod[1].toJSNumber();\r\n            if (ySign) {\r\n                yDigit = highestPower2 - 1 - yDigit; // two's complement for negative numbers\r\n            }\r\n\r\n            xRem = xDivMod[0];\r\n            yRem = yDivMod[0];\r\n            result.push(fn(xDigit, yDigit));\r\n        }\r\n        var sum = fn(xSign ? 1 : 0, ySign ? 1 : 0) !== 0 ? bigInt(-1) : bigInt(0);\r\n        for (var i = result.length - 1; i >= 0; i -= 1) {\r\n            sum = sum.multiply(highestPower2).add(bigInt(result[i]));\r\n        }\r\n        return sum;\r\n    }\r\n\r\n    BigInteger.prototype.not = function () {\r\n        return this.negate().prev();\r\n    };\r\n    NativeBigInt.prototype.not = SmallInteger.prototype.not = BigInteger.prototype.not;\r\n\r\n    BigInteger.prototype.and = function (n) {\r\n        return bitwise(this, n, function (a, b) { return a & b; });\r\n    };\r\n    NativeBigInt.prototype.and = SmallInteger.prototype.and = BigInteger.prototype.and;\r\n\r\n    BigInteger.prototype.or = function (n) {\r\n        return bitwise(this, n, function (a, b) { return a | b; });\r\n    };\r\n    NativeBigInt.prototype.or = SmallInteger.prototype.or = BigInteger.prototype.or;\r\n\r\n    BigInteger.prototype.xor = function (n) {\r\n        return bitwise(this, n, function (a, b) { return a ^ b; });\r\n    };\r\n    NativeBigInt.prototype.xor = SmallInteger.prototype.xor = BigInteger.prototype.xor;\r\n\r\n    var LOBMASK_I = 1 << 30, LOBMASK_BI = (BASE & -BASE) * (BASE & -BASE) | LOBMASK_I;\r\n    function roughLOB(n) { // get lowestOneBit (rough)\r\n        // SmallInteger: return Min(lowestOneBit(n), 1 << 30)\r\n        // BigInteger: return Min(lowestOneBit(n), 1 << 14) [BASE=1e7]\r\n        var v = n.value,\r\n            x = typeof v === \"number\" ? v | LOBMASK_I :\r\n                typeof v === \"bigint\" ? v | BigInt(LOBMASK_I) :\r\n                    v[0] + v[1] * BASE | LOBMASK_BI;\r\n        return x & -x;\r\n    }\r\n\r\n    function integerLogarithm(value, base) {\r\n        if (base.compareTo(value) <= 0) {\r\n            var tmp = integerLogarithm(value, base.square(base));\r\n            var p = tmp.p;\r\n            var e = tmp.e;\r\n            var t = p.multiply(base);\r\n            return t.compareTo(value) <= 0 ? { p: t, e: e * 2 + 1 } : { p: p, e: e * 2 };\r\n        }\r\n        return { p: bigInt(1), e: 0 };\r\n    }\r\n\r\n    BigInteger.prototype.bitLength = function () {\r\n        var n = this;\r\n        if (n.compareTo(bigInt(0)) < 0) {\r\n            n = n.negate().subtract(bigInt(1));\r\n        }\r\n        if (n.compareTo(bigInt(0)) === 0) {\r\n            return bigInt(0);\r\n        }\r\n        return bigInt(integerLogarithm(n, bigInt(2)).e).add(bigInt(1));\r\n    }\r\n    NativeBigInt.prototype.bitLength = SmallInteger.prototype.bitLength = BigInteger.prototype.bitLength;\r\n\r\n    function max(a, b) {\r\n        a = parseValue(a);\r\n        b = parseValue(b);\r\n        return a.greater(b) ? a : b;\r\n    }\r\n    function min(a, b) {\r\n        a = parseValue(a);\r\n        b = parseValue(b);\r\n        return a.lesser(b) ? a : b;\r\n    }\r\n    function gcd(a, b) {\r\n        a = parseValue(a).abs();\r\n        b = parseValue(b).abs();\r\n        if (a.equals(b)) return a;\r\n        if (a.isZero()) return b;\r\n        if (b.isZero()) return a;\r\n        var c = Integer[1], d, t;\r\n        while (a.isEven() && b.isEven()) {\r\n            d = min(roughLOB(a), roughLOB(b));\r\n            a = a.divide(d);\r\n            b = b.divide(d);\r\n            c = c.multiply(d);\r\n        }\r\n        while (a.isEven()) {\r\n            a = a.divide(roughLOB(a));\r\n        }\r\n        do {\r\n            while (b.isEven()) {\r\n                b = b.divide(roughLOB(b));\r\n            }\r\n            if (a.greater(b)) {\r\n                t = b; b = a; a = t;\r\n            }\r\n            b = b.subtract(a);\r\n        } while (!b.isZero());\r\n        return c.isUnit() ? a : a.multiply(c);\r\n    }\r\n    function lcm(a, b) {\r\n        a = parseValue(a).abs();\r\n        b = parseValue(b).abs();\r\n        return a.divide(gcd(a, b)).multiply(b);\r\n    }\r\n    function randBetween(a, b, rng) {\r\n        a = parseValue(a);\r\n        b = parseValue(b);\r\n        var usedRNG = rng || Math.random;\r\n        var low = min(a, b), high = max(a, b);\r\n        var range = high.subtract(low).add(1);\r\n        if (range.isSmall) return low.add(Math.floor(usedRNG() * range));\r\n        var digits = toBase(range, BASE).value;\r\n        var result = [], restricted = true;\r\n        for (var i = 0; i < digits.length; i++) {\r\n            var top = restricted ? digits[i] : BASE;\r\n            var digit = truncate(usedRNG() * top);\r\n            result.push(digit);\r\n            if (digit < top) restricted = false;\r\n        }\r\n        return low.add(Integer.fromArray(result, BASE, false));\r\n    }\r\n\r\n    var parseBase = function (text, base, alphabet, caseSensitive) {\r\n        alphabet = alphabet || DEFAULT_ALPHABET;\r\n        text = String(text);\r\n        if (!caseSensitive) {\r\n            text = text.toLowerCase();\r\n            alphabet = alphabet.toLowerCase();\r\n        }\r\n        var length = text.length;\r\n        var i;\r\n        var absBase = Math.abs(base);\r\n        var alphabetValues = {};\r\n        for (i = 0; i < alphabet.length; i++) {\r\n            alphabetValues[alphabet[i]] = i;\r\n        }\r\n        for (i = 0; i < length; i++) {\r\n            var c = text[i];\r\n            if (c === \"-\") continue;\r\n            if (c in alphabetValues) {\r\n                if (alphabetValues[c] >= absBase) {\r\n                    if (c === \"1\" && absBase === 1) continue;\r\n                    throw new Error(c + \" is not a valid digit in base \" + base + \".\");\r\n                }\r\n            }\r\n        }\r\n        base = parseValue(base);\r\n        var digits = [];\r\n        var isNegative = text[0] === \"-\";\r\n        for (i = isNegative ? 1 : 0; i < text.length; i++) {\r\n            var c = text[i];\r\n            if (c in alphabetValues) digits.push(parseValue(alphabetValues[c]));\r\n            else if (c === \"<\") {\r\n                var start = i;\r\n                do { i++; } while (text[i] !== \">\" && i < text.length);\r\n                digits.push(parseValue(text.slice(start + 1, i)));\r\n            }\r\n            else throw new Error(c + \" is not a valid character\");\r\n        }\r\n        return parseBaseFromArray(digits, base, isNegative);\r\n    };\r\n\r\n    function parseBaseFromArray(digits, base, isNegative) {\r\n        var val = Integer[0], pow = Integer[1], i;\r\n        for (i = digits.length - 1; i >= 0; i--) {\r\n            val = val.add(digits[i].times(pow));\r\n            pow = pow.times(base);\r\n        }\r\n        return isNegative ? val.negate() : val;\r\n    }\r\n\r\n    function stringify(digit, alphabet) {\r\n        alphabet = alphabet || DEFAULT_ALPHABET;\r\n        if (digit < alphabet.length) {\r\n            return alphabet[digit];\r\n        }\r\n        return \"<\" + digit + \">\";\r\n    }\r\n\r\n    function toBase(n, base) {\r\n        base = bigInt(base);\r\n        if (base.isZero()) {\r\n            if (n.isZero()) return { value: [0], isNegative: false };\r\n            throw new Error(\"Cannot convert nonzero numbers to base 0.\");\r\n        }\r\n        if (base.equals(-1)) {\r\n            if (n.isZero()) return { value: [0], isNegative: false };\r\n            if (n.isNegative())\r\n                return {\r\n                    value: [].concat.apply([], Array.apply(null, Array(-n.toJSNumber()))\r\n                        .map(Array.prototype.valueOf, [1, 0])\r\n                    ),\r\n                    isNegative: false\r\n                };\r\n\r\n            var arr = Array.apply(null, Array(n.toJSNumber() - 1))\r\n                .map(Array.prototype.valueOf, [0, 1]);\r\n            arr.unshift([1]);\r\n            return {\r\n                value: [].concat.apply([], arr),\r\n                isNegative: false\r\n            };\r\n        }\r\n\r\n        var neg = false;\r\n        if (n.isNegative() && base.isPositive()) {\r\n            neg = true;\r\n            n = n.abs();\r\n        }\r\n        if (base.isUnit()) {\r\n            if (n.isZero()) return { value: [0], isNegative: false };\r\n\r\n            return {\r\n                value: Array.apply(null, Array(n.toJSNumber()))\r\n                    .map(Number.prototype.valueOf, 1),\r\n                isNegative: neg\r\n            };\r\n        }\r\n        var out = [];\r\n        var left = n, divmod;\r\n        while (left.isNegative() || left.compareAbs(base) >= 0) {\r\n            divmod = left.divmod(base);\r\n            left = divmod.quotient;\r\n            var digit = divmod.remainder;\r\n            if (digit.isNegative()) {\r\n                digit = base.minus(digit).abs();\r\n                left = left.next();\r\n            }\r\n            out.push(digit.toJSNumber());\r\n        }\r\n        out.push(left.toJSNumber());\r\n        return { value: out.reverse(), isNegative: neg };\r\n    }\r\n\r\n    function toBaseString(n, base, alphabet) {\r\n        var arr = toBase(n, base);\r\n        return (arr.isNegative ? \"-\" : \"\") + arr.value.map(function (x) {\r\n            return stringify(x, alphabet);\r\n        }).join('');\r\n    }\r\n\r\n    BigInteger.prototype.toArray = function (radix) {\r\n        return toBase(this, radix);\r\n    };\r\n\r\n    SmallInteger.prototype.toArray = function (radix) {\r\n        return toBase(this, radix);\r\n    };\r\n\r\n    NativeBigInt.prototype.toArray = function (radix) {\r\n        return toBase(this, radix);\r\n    };\r\n\r\n    BigInteger.prototype.toString = function (radix, alphabet) {\r\n        if (radix === undefined) radix = 10;\r\n        if (radix !== 10) return toBaseString(this, radix, alphabet);\r\n        var v = this.value, l = v.length, str = String(v[--l]), zeros = \"0000000\", digit;\r\n        while (--l >= 0) {\r\n            digit = String(v[l]);\r\n            str += zeros.slice(digit.length) + digit;\r\n        }\r\n        var sign = this.sign ? \"-\" : \"\";\r\n        return sign + str;\r\n    };\r\n\r\n    SmallInteger.prototype.toString = function (radix, alphabet) {\r\n        if (radix === undefined) radix = 10;\r\n        if (radix != 10) return toBaseString(this, radix, alphabet);\r\n        return String(this.value);\r\n    };\r\n\r\n    NativeBigInt.prototype.toString = SmallInteger.prototype.toString;\r\n\r\n    NativeBigInt.prototype.toJSON = BigInteger.prototype.toJSON = SmallInteger.prototype.toJSON = function () { return this.toString(); }\r\n\r\n    BigInteger.prototype.valueOf = function () {\r\n        return parseInt(this.toString(), 10);\r\n    };\r\n    BigInteger.prototype.toJSNumber = BigInteger.prototype.valueOf;\r\n\r\n    SmallInteger.prototype.valueOf = function () {\r\n        return this.value;\r\n    };\r\n    SmallInteger.prototype.toJSNumber = SmallInteger.prototype.valueOf;\r\n    NativeBigInt.prototype.valueOf = NativeBigInt.prototype.toJSNumber = function () {\r\n        return parseInt(this.toString(), 10);\r\n    }\r\n\r\n    function parseStringValue(v) {\r\n        if (isPrecise(+v)) {\r\n            var x = +v;\r\n            if (x === truncate(x))\r\n                return supportsNativeBigInt ? new NativeBigInt(BigInt(x)) : new SmallInteger(x);\r\n            throw new Error(\"Invalid integer: \" + v);\r\n        }\r\n        var sign = v[0] === \"-\";\r\n        if (sign) v = v.slice(1);\r\n        var split = v.split(/e/i);\r\n        if (split.length > 2) throw new Error(\"Invalid integer: \" + split.join(\"e\"));\r\n        if (split.length === 2) {\r\n            var exp = split[1];\r\n            if (exp[0] === \"+\") exp = exp.slice(1);\r\n            exp = +exp;\r\n            if (exp !== truncate(exp) || !isPrecise(exp)) throw new Error(\"Invalid integer: \" + exp + \" is not a valid exponent.\");\r\n            var text = split[0];\r\n            var decimalPlace = text.indexOf(\".\");\r\n            if (decimalPlace >= 0) {\r\n                exp -= text.length - decimalPlace - 1;\r\n                text = text.slice(0, decimalPlace) + text.slice(decimalPlace + 1);\r\n            }\r\n            if (exp < 0) throw new Error(\"Cannot include negative exponent part for integers\");\r\n            text += (new Array(exp + 1)).join(\"0\");\r\n            v = text;\r\n        }\r\n        var isValid = /^([0-9][0-9]*)$/.test(v);\r\n        if (!isValid) throw new Error(\"Invalid integer: \" + v);\r\n        if (supportsNativeBigInt) {\r\n            return new NativeBigInt(BigInt(sign ? \"-\" + v : v));\r\n        }\r\n        var r = [], max = v.length, l = LOG_BASE, min = max - l;\r\n        while (max > 0) {\r\n            r.push(+v.slice(min, max));\r\n            min -= l;\r\n            if (min < 0) min = 0;\r\n            max -= l;\r\n        }\r\n        trim(r);\r\n        return new BigInteger(r, sign);\r\n    }\r\n\r\n    function parseNumberValue(v) {\r\n        if (supportsNativeBigInt) {\r\n            return new NativeBigInt(BigInt(v));\r\n        }\r\n        if (isPrecise(v)) {\r\n            if (v !== truncate(v)) throw new Error(v + \" is not an integer.\");\r\n            return new SmallInteger(v);\r\n        }\r\n        return parseStringValue(v.toString());\r\n    }\r\n\r\n    function parseValue(v) {\r\n        if (typeof v === \"number\") {\r\n            return parseNumberValue(v);\r\n        }\r\n        if (typeof v === \"string\") {\r\n            return parseStringValue(v);\r\n        }\r\n        if (typeof v === \"bigint\") {\r\n            return new NativeBigInt(v);\r\n        }\r\n        return v;\r\n    }\r\n    // Pre-define numbers in range [-999,999]\r\n    for (var i = 0; i < 1000; i++) {\r\n        Integer[i] = parseValue(i);\r\n        if (i > 0) Integer[-i] = parseValue(-i);\r\n    }\r\n    // Backwards compatibility\r\n    Integer.one = Integer[1];\r\n    Integer.zero = Integer[0];\r\n    Integer.minusOne = Integer[-1];\r\n    Integer.max = max;\r\n    Integer.min = min;\r\n    Integer.gcd = gcd;\r\n    Integer.lcm = lcm;\r\n    Integer.isInstance = function (x) { return x instanceof BigInteger || x instanceof SmallInteger || x instanceof NativeBigInt; };\r\n    Integer.randBetween = randBetween;\r\n\r\n    Integer.fromArray = function (digits, base, isNegative) {\r\n        return parseBaseFromArray(digits.map(parseValue), parseValue(base || 10), isNegative);\r\n    };\r\n\r\n    return Integer;\r\n})();\r\n\r\n// Node.js check\r\nif (typeof module !== \"undefined\" && module.hasOwnProperty(\"exports\")) {\r\n    module.exports = bigInt;\r\n}\r\n\r\n//amd check\r\nif (typeof define === \"function\" && define.amd) {\r\n    define( function () {\r\n        return bigInt;\r\n    });\r\n}\r\n"],"sourceRoot":""}