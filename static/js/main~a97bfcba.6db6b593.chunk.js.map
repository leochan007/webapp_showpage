{"version":3,"sources":["hooks/help/volumeToCount.ts","defs/web3_defs.ts","stores/account/hook.ts","state_machine/machine_builder.ts","defs/swap_defs.ts","stores/account/reducer.ts","stores/trading/hook.ts","stores/token/hook.ts","stores/Amm/AmmMap/hook.ts","hooks/web3/useWeb3.ts","networks/web3_connectors.ts","stores/walletLayer2/hook.ts","stores/Amm/AmmMap/reducer.ts","index.tsx","stores/trading/reducer.ts","utils/swap_calc_utils.ts","storage/index.ts","stores/ticker/reducer.ts","stores/userRewards/hook.ts","stores/system/reducer.ts","stores/system/interface.ts","stores/walletLayer1/reducer.ts","stores/walletLayer2/reducer.ts","stores/userRewards/reducer.ts","stores/Amm/AmmActivityMap/reducer.ts","stores/token/reducer.ts","stores/Amm/AmmActivityMap/hook.ts","stores/system/hook.ts","state_machine/account_machine_spec.ts","utils/web3_tools.ts","provider/global/index.tsx","provider/web3ReactManager/index.tsx","provider/dev-wrapper/index.tsx","stores/constant.ts","stores/ticker/hook.ts","stores/global/actions.ts","stores/transactions/reducer.ts","stores/Amm/AmmRecord/reducer.ts","stores/Amm/AmmTrades/reducer.ts","stores/Amm/AmmActivityMap/saga.ts","stores/Amm/AmmMap/saga.ts","stores/Amm/AmmRecord/saga.ts","stores/Amm/AmmTrades/saga.ts","stores/Amm/index.ts","stores/token/saga.ts","stores/ticker/saga.ts","stores/system/saga.ts","stores/walletLayer1/saga.ts","stores/walletLayer2/saga.ts","stores/userRewards/saga.ts","stores/rootSaga.ts","stores/socket/reducer.ts","stores/index.ts","pages/ErrorPage/index.tsx","utils/dt_tools.ts","stores/apis/api.ts","hooks/exchange/useApi.ts","hooks/common/useCustomDCEffect.ts","hook.ts","defs/common_defs.ts","hooks/modal/useModals.ts","utils/hook_tools.ts","hooks/common/useCommon.ts","hooks/exchange/useExchangeAPI.ts","layouts/header/hook.tsx","hooks/exchange/useUserAPI.ts","utils/obj_tools.ts","pages/AccountPage/index.tsx","layouts/header/index.tsx","pages/QuotePage/index.tsx","pages/QuotePage/hook.ts","pages/SwapPage/panel/BasicInfoPanel/hook.tsx","hooks/help/connetStatusCallback.ts","pages/SwapPage/panel/BasicInfoPanel/index.tsx","pages/SwapPage/panel/TradePanel/index.tsx","hooks/help/updateWallet.ts","hooks/help/coinPairInit.ts","hooks/help/pairDetail.ts","hooks/help/makeTickView.ts","hooks/help/marketTable.ts","hooks/help/makeCache.ts","pages/SwapPage/index.tsx","pages/SwapPage/hook.ts","hooks/common/useApi2.ts","hooks/common/useWebsocketApi.ts","pages/DebugPage/index.tsx","pages/Layer2Page/TxPanel/index.tsx","pages/Layer2Page/AssetPanel/index.tsx","pages/Layer2Page/TradePanel/index.tsx","pages/Layer2Page/OrderPanel/index.tsx","pages/SettingPage/SettingPanel.tsx","pages/Layer2Page/index.tsx","pages/LiquidityPage/PoolsPanel/hook.ts","pages/LiquidityPage/PoolsPanel/index.tsx","hooks/help/ammPairDetail.ts","pages/LiquidityPage/AmmPanel/index.tsx","pages/LiquidityPage/AmmPanel/hooks.ts","hooks/help/makeUIAmmActivityMap.ts","pages/LiquidityPage/CoinPairPanel/hooks.ts","pages/LiquidityPage/CoinPairPanel/index.tsx","pages/LiquidityPage/AmmMining/index.tsx","pages/LiquidityPage/AmmMining/hook.ts","pages/LiquidityPage/LiquidityOverview/hook.ts","pages/LiquidityPage/LiquidityOverview/index.tsx","pages/LiquidityPage/index.tsx","pages/LiquidityPage/hook.ts","routers/index.tsx"],"names":["volumeToCount","symbol","volumn","tokenMap","store","getState","result","volumeToCountAsBigNumber","toNumber","undefined","toBig","div","BIG10","pow","decimals","error","connectorsByName","ConnectorNames","Unknown","Injected","injected","Network","network","WalletConnect","walletconnect","WalletLink","walletlink","Ledger","ledger","Trezor","trezor","Authereum","authereum","useWeb3Account","useActiveWeb3React","connector","library","account","chainId","active","isConnected","voca","isBlank","useAccount","useSelector","state","isNoAccount","status","AccountStatus","NOACCOUNT","isActivated","ACTIVATED","apiKey","eddsaKey","accountId","useStateMachine","spec","dispatch","useDispatch","machine","AccountMachineSpec","currentState","event","stateTransitions","states","Error","nextState","sendEvent","useCallback","setAccountStatus","useConnect","activate","useState","activatingConnector","setActivatingConnector","connect","item_name","isSwitch","newConnector","setConnectNameTemp","StatusChangeEvent","Reset","Connecting","console","log","useDisconnect","deactivate","disconnect","reset","useUnlock","exchangeApi","useExchangeAPI","userApi","useUserAPI","tradingInfo","useGetTradingInfo","lock","a","Lock","unlock","exchangeInfo","exchangeAddress","LOCKED","sk","apikey","getProvider","provider","web3","Web3","sign_tools","accAddr","nonce","connectName","eddsakey","toHex","keyPair","secretKey","getUserApiKey","Unlock","setEddsaKey","setApikey","useCheckAccStatus","web3Account","lv1Acc","prevChainId","usePrevious","prevWeb3Account","useCustomDCEffect","UNCONNNECTED","cleanUp","CONNECTED","DEPOSITING","DEPOSIT_TO_CONFIREM","UNACTIVATED","ARPROVING","APPROV_TO_CONFIRM","resetLayer1","resetLayer2","getAccount","owner","acc","accInfo","setAccountInfo","updateWalletLayer1","connectNameTemp","setConnectName","HasPubkey","dumpError400","setAccAddr","response","data","resultInfo","code","ErrorResponse","FinishDeposit","UserStorage","checkTimeout","handler","setInterval","isTimeOut","clearInterval","setHandler","updateWalletLayer2","getHandler","checkStatus","OrderHandling","BIG0","BIG1","BIG10K","MULTI_FACTOR","initialState","defaultAccId","process","REACT_APP_TEST_ACCOUND_ID","getAccountId","defaultApiKey","REACT_APP_TEST_API_KEY","getApikey","defaultOwner","REACT_APP_TEST_OWNER","defaultEddsaKey","REACT_APP_TEST_EDDSA_KEY","getEddsakey","JSON","stringify","publicKey","isContractAddress","accountSlice","createSlice","name","reducers","initState","Object","assign","action","payload","setIsContractAddress","actions","getChainId","system","trading","useUpdateChainId","useEffect","setChainId","ChainId","GORLI","useUpdateExchangeMarkets","api","getMixMarkets","setMarkets","useUpdateExchangeInfo","getExchangeInfo","setExchangeInfo","useUpdateAmmPoolConf","useAmmpoolAPI","getAmmPoolConf","ammPoolConf","setAmmPoolConf","useUpdateAmmPoolStats","getAmmPoolStats","ammPoolStats","setAmmPoolStats","useUpdateAmmActivityRules","getAmmPoolActivityRules","ammActivityRules","setAmmActivityRules","activityRules","useUpdateTokens","getTokens","tokens","setTokens","useTokenMap","statusUnset","tokenMapSlice","updateTokenMap","getTokenMap","useAmmMap","ammMap","amm","ammMapSlice","updateAmmMap","getAmmMap","context","useWeb3React","contextNetwork","NetworkContextName","useEtherscan","etherscanUrl","setEtherscanUrl","MAINNET","useEagerConnect","tried","setTried","isAuthorized","then","catch","useInactiveListener","onReConnectInjected","ethereum","window","reConnectInjected","on","handleChainChanged","handleAccountsChanged","accounts","length","removeListener","POLLING_INTERVAL","RPC_URLS","InjectedConnector","supportedChainIds","NetworkConnector","urls","1","5","defaultChainId","WalletConnectConnector","rpc","bridge","qrcode","pollingInterval","WalletLinkConnector","url","appName","LedgerConnector","TrezorConnector","manifestEmail","manifestAppUrl","AuthereumConnector","useWalletLayer2","walletLayer2","walletLayer2Slice","getWalletLayer2","__timer__","errorMessage","STATUS","PENDING","getAmmMapStatus","ERROR","DONE","updateRealTimeAmmMap","UNSET","Web3ProviderNetwork","createWeb3ReactRoot","providers","LocalizationProvider","dateAdapter","MomentUtils","I18nextProvider","i18n","MuThemeProvider","theme","getTheme","ThemeProvider","Provider","ReactDOM","render","getLibrary","App","document","getElementById","defaultSymbol","getBaseQuote","base","quote","symbol_base","symbol_quote","interval","markets","marketTrades","tickerMap","refreshRate","refreshRateSlow","tradingSlice","changeSymbol","changeTradingInterval","setTickerMap","setMarketTrades","getIcon","getIconByTokenInfo","token","addr","utils","getAddress","address","getToken","fromWEI","valueInWEI","precision","ceil","tokenInfo","precisionToFixed","value","fm","CONSTANTS","rawHandler","sessionStorage","getItem","Handler","parseInt","err","setItem","removeItem","dateTimeStr","localStorage","ActiveTime","now","Date","getTime","toString","tmpDt","SESSION_TIMEOUT_SECONDS","clear","rawId","AccountId","Account","Apikey","Eddsakey","orderHash","AmmOrder","current","HardwareAddresses","includes","toLowerCase","newValue","tickerMapSlice","getTicker","getTickers","getTickerStatus","useUserRewards","userRewardsMap","userRewardsMapSlice","updateUserRewards","getUserRewards","env","ENV","PROD","baseURL","faitPrices","gasPrice","forex","topics","systemSlice","updateSystem","updateRealTimeObj","getSystemStatus","setTopics","NETWORKEXTEND","walletLayer1","walletLayer1Slice","getWalletLayer1Status","getWalletLayer2Status","getUserRewardsStatus","ammActivityMapSlice","ammActivityMap","getAmmActivityMap","getAmmActivityMapStatus","coinMap","addressIndex","marketMap","idIndex","getTokenMapStatus","marketArray","marketCoins","getTokenPairMap","useAmmActivityMap","updateAmmActivityMap","useSystem","HasNoPubkey","IsSmartWallet","ApproveSubmit","ApproveConfirmed","Web3Provider","getShortAddr","trim","substr","WindowEvent","events","Click","Scroll","forceReset","debounce","GlobalProvider","children","forEach","addEventListener","removeEventListener","Fragment","MessageWrapper","Message","colorBase","Web3ReactManager","t","useTranslation","networkActive","networkError","activateNetwork","triedEager","showLoader","setShowLoader","timeout","setTimeout","clearTimeout","DevWrapper","useTicker","updateTickers","tickerKeys","updateTicker","tickerKey","updateVersion","createAction","transactionsSlice","addTransaction","from","hash","approval","summary","claim","addedTime","clearAllTransactions","checkedTransaction","blockNumber","tx","lastCheckedBlockNumber","Math","max","finalizeTransaction","receipt","confirmedTime","ammRecordSlice","ammRecords","getAmmRecord","getAmmRecordStatus","ammTradesSlice","ammTrades","getAmmTrades","getAmmTradesStatus","getPostsSaga","ammActivityMapSaga","getAmmActivityMapApi","LoopringAPI","ammpoolAPI","groupByRuleTypeAndStatus","call","put","all","takeLatest","updateRealTimeSaga","ammMapInitSaga","ammMapRealTimeSaga","setAmmState","ammPoolState","match","coinA","coinB","amountDollar","parseFloat","liquidityUSD","amountYuan","totalLPToken","lpLiquidity","totalA","liquidity","totalB","rewardValue","rewards","tokenId","volume","rewardToken","rewardValue2","rewardToken2","feeA","fees","feeB","tradeFloat","percent","timeUnit","APY","apyBips","getAmmMapApi","ammpools","Reflect","ownKeys","key","item","market","pooled","dataItem","feeDollar","feeYuan","isNew","Number","createdAt","isActivity","map","replace","ammMapSaga","fork","ammRecordSaga","getAmmRecordApi","Promise","resolve","side","amount","sell","belong","tradeValue","buy","time","fee","amountLP","ammTradesSaga","getAmmTradesApi","priceValue","priceToken","posts","ammReducer","combineReducers","ammRecord","reducer","ammForks","tokenInitSaga","getTokenMapApi","tokensMap","pairs","marketArr","tokenArr","startsWith","icon","simpleName","description","company","tokenList","tradePairs","tokenSaga","tickerSaga","tickersSaga","getTickersApi","list","exchangeAPI","join","tickers","tickMap","base_token_volume","priceDollar","priceYuan","floatTag","close","open","reward","CustomError","ErrorMap","NO_TOKEN_KEY_LIST","tickerForks","getUpdateSystem","systemSaga","initConfig","tokenSymbolMap","take","getSystemsApi","location","hostname","DEV","UAT","NONETWORK","NO_NETWORK_ERROR","InitApi","getFiatPrice","legal","fiatPrices","getGasPrice","price","systemForks","walletLayer1Saga","getWalletLayer1Balance","getTokenBalances","tokenBalances","reduce","prev","count","walletLayer1Fork","walletLayer2Saga","getWalletLayer2Balance","userAPI","getUserBalances","userBalances","walletLayer2Fork","userRewardsSaga","getUserRewardsApi","getAmmPoolUserRewards","ammUserRewardMap","reject","userRewardsForks","mySaga","socketSlice","socket","socketStart","getSocketStatus","sagaMiddleware","createSagaMiddleware","settings","settingsSlice","transactions","transactionlice","modals","modalsSlice","PERSISTED_KEYS","configureStore","middleware","getDefaultMiddleware","thunk","serializableCheck","save","devTools","enhancers","reduxBatch","preloadedState","load","setLanguage","language","run","StyleBox","styled","Box","ErrorPage","messageKey","Container","flex","display","alignItems","justifyContent","flexDirection","marginTop","height","maxWidth","textAlign","position","left","top","Typography","component","variant","marginY","color","Trans","i18nKey","Link","onClick","e","href","subject","body","email","CONTACT_US_EMAIL","getContactInfo","preventDefault","UserAPI","ExchangeAPI","AmmpoolAPI","walletAPI","wsAPI","WalletAPI","WsAPI","useApi","ApiClass","DEFAULT_TIMEOUT","genApi","useMemo","deps","useDeepCompareEffect","useInit","React","setState","systemState","tokenState","ammMapState","reload","detectEthereumProvider","request","method","Theme","LangType","SystemStatus","MODAL_TYPE","useModals","ShowDeposit","isShow","props","title","setShowDeposit","ShowTransfer","setShowTransfer","ShowWithdraw","setShowWithdraw","ShowResetAccount","setShowResetAccount","PromiseJob","fetchPromise","setFunc","field","prefix","mounted","reason","usePromiseJob","dependencies","useGetExchangeInfo","useGetTokens","useLv2WalletMap","balances","setBalances","keys","push","raw_data","total","locked","availableInWei","minus","useGetUserBalances","walletMap","setWalletMap","balance","useChargeFeeList","tokenSymbol","requestType","chargeFeeList","setChargeFeeList","getOffchainFeeAmt","index","useModalProps","tokensAll","setCoinMap","useCoinMap","walletMap_Lv1","useLv1WalletMap","walletMap_Lv2","deposit","amt","depositAddress","sendByMetaMask","gasLimit","contract","response2","withdraw","sellTokenId","getNextStorageId","storageId","request2","exchange","to","offchainId","maxFee","extraData","minGas","validUntil","VALID_UNTIL","submitOffchainWithdraw","transfer","payeeAddr","walletType","payeeAcc","payeeId","payerAddr","payerId","submitInternalTransfer","depositValue","setDepositValue","depositProps","tradeData","depositBtnStatus","TradeBtnStatus","AVAILABLE","onDepositClick","handlePanelEvent","switchType","res","setTokenSymbol","withdrawValue","setWithdrawValue","withdrawalFeeList","OffchainFeeReqType","OFFCHAIN_WITHDRAWAL","withdrawProps","withdrawBtnStatus","onWithdrawClick","withdrawType","WithdrawType","Fast","withdrawTypes","WithdrawTypes","chargeFeeToken","chargeFeeTokenList","handleOnAddressChange","handleAddressError","_value","message","transferValue","setTransferValue","transferTokenSymbol","setTransferTokenSymbol","transferFeeList","TRANSFER","transferProps","transferBtnStatus","onTransferClick","resetValue","setResetValue","resetProps","resetBtnStatus","onResetClick","ammProps","ammDepositData","slippage","ammWithdrawData","ammCalcData","myCoinA","myCoinB","AtoB","coinInfoMap","handleDepositEvent","type","handleWithDrawEvent","onAmmWithdrawClick","onAmmDepositClick","swapProps","tradeCalcData","coinSell","coinBuy","BtoS","StoB","sellCoinInfoMap","buyCoinInfoMap","priceImpact","minimumReceived","onSwapClick","handleSwapPanelEvent","deepClone","constructor","hasOwnProperty","ModalAccountInfo","withTranslation","onClose","rest","Modal","aria-labelledby","aria-describedby","style","boxShadow","paddingTop","paddingBottom","minWidth","Header","useLocation","useSettings","setTheme","themeMode","useOpenModals","isShowAccountInfo","isShowConnect","setShowConnect","setShowAccountInfo","forceUpdate","useReducer","bool","gatewayList","DefaultGatewayList","handleSelect","accountInfoProps","setAccountInfoProps","onNotification","onWalletBtnConnect","onThemeBtnClick","dark","light","onLangBtnClick","lang","headerToolBarData","ButtonComponentsMap","handleClick","Language","handleChange","UnlockBtn","className","startIcon","fontSize","lockCallback","unLockCallback","LockBtn","updateHeaderMenuWhenHasAccountInfo","headerMenuData","HeadMenuTabKey","Layer2","HeaderMenuTabStatus","default","addressShort","level","etherscanLink","mainBtn","_event","connectBy","label","WalletStatus","hidden","noAccount","accountPending","useHeader","onSwitch","openQRCode","setOpenQRCode","copyToastOpen","setCopyToastOpen","closeCopyToast","Snackbar","autoHideDuration","Alert","severity","withDrawProps","selected","pathname","headerRoot","Toolbar","onCopy","text","execCommand","textarea","createElement","appendChild","select","removeChild","clipboardData","setData","copyToClipBoard","onViewQRCode","onDisconnect","RowStyled","Grid","unit","TableWrapStyled","background","border","defaultFrame","c_key","d_R","TablePaddingX","pLeft","pRight","QuotePage","tickList","setTickList","big4","setBig4","refresh","getAllTickers","ticks","quote_token_volume","change","high","low","rowData","sort","b","isNaN","slice","useQuote","formattedRawData","o","pair","first","last","lastPrice","isFinite","buyData","ETH","sellData","LRC","FloatTag","increase","container","xs","none","decrease","paddingY","onVisibleRowsChange","rawData","toggleData","ChartType","Trend","Depth","fnType","BasicInfoPanel","coinAInfo","coinBInfo","tgItemJSXs","tlabel","JSX","getExistedMarket","chartType","setChartType","ChartUnit","D1","chartUnit","originData","setOriginData","_e","tgItemJSXsPriceChart","pre","tGItemData","TradingInterval","min15","limit","getCandlestick","candlesticks","timeStamp","timestamp","quoteVol","getMixDepth","depth","bidsPrices","bids_prices","bidsAmtTotals","bids_amtTotals","asksPrices","asks_prices","asksAmtTotals","asks_amtTotals","useBasicInfo","upColor","exclusive","minHeight","maxHeight","width","riseColor","handleMove","size","StylePaper","borderColor","applyProps","id","StyledTabsWrapper","StyledFormControlLabel","FormControlLabel","TradePanel","tradeArray","myTradeArray","isAllTrade","setIsAllTrade","setValue","control","Checkbox","checked","checkedIcon","onChange","flag","Tabs","aria-label","Tab","accountStaticCallBack","fn","args","UNKNOWN","DEFAULT","bntLabel","btnClickArray","updateWallet","pending","countBig","detail","coinPairInit","coinKey","_tradeCalcData","findIndex","ele","pairDetailBlock","ammKey","getAmmPoolSnapshot","poolAddress","getMixTicker","ammPoolsBalanc","NO_SDK","pairDetailDone","stob","tickerData","poolVolumn","poolBaseTokenVol","quoteBaseTokenVol","NO_SUPPORT_PAIR","baseVol","makeTickView","tick","getUserTrades","marketKey","userTrades","makeMarketArray","currency","Side","Sell","TradeTypes","Buy","times","tradeTime","getUserAmmTransaction","getUserAmmPoolTxs","userAmmPoolTxs","makeMyAmmMarketArray","marketTransaction","lpToken","txType","AmmTxType","JOIN","AmmTradeType","add","remove","totalDollar","totalYuan","amountA","poolTokens","actualAmount","amountB","updatedAt","txStatus","makeCache","__cache__","customSlippage","setSlippage","FixedStyle","SwapPage","useRouteMatch","walletLayer2State","setTradeData","setTradeCalcData","setTradeArray","setMyTradeArray","setTradeFloat","setPair","swapBtnI18nKey","setSwapBtnI18nKey","params","resetSwap","_myTradeArray","swapData","SwapType","SEll_CLICK","BUY_CLICK","SELL_SELECTED","BUY_SELECTED","EXCHANGE_CLICK","calculateTradeData","_tradeData","td","_tradeFloat","_tradeArray","apiList","getMarketTrades","_td","TRADE_LITE_SET_PAIR_ERROR","options","swapBtnClickArray","useSwapPage","marginRight","alignContent","stateArr","useWebsocket","verify","needApiKey","ws","useRef","wsData","setMessage","readyState","setReadyState","creatWebSocket","getWsKey","wsApiKey","basePath","WebSocket","onopen","op","unsubscribeAll","flat_txt","sendMessage","subTopics","onclose","onerror","onmessage","closeWebSocket","msg","send","reconnect","useAmmpoolWs","getTickerArg","getAmmpoolArg","socketData","setSocketData","isLocalPage","setIsLocalPage","visibilityState","parse","useWs","DebugPage","getMarkets","useGetMarkets","gas","setGas","useGetGas","TxPanel","pageSize","setPageSize","txTableData","setTxTableData","getUserTranferList","userTxns","mappingList","userTransfers","senderAddress","receiverAddress","feeTokenSymbol","feeAmount","memo","moment","diff","txnHash","TransactionStatus","processed","processing","received","failed","tradeType","TransactionTradeTypes","offsetHeight","floor","ref","pagination","StyledChartWrapper","StyledBtnGroupWrapper","testTrendData","random","AssetPanel","chartPeriod","setChartPeriod","AssetTitleProps","assetInfo","totalAsset","priceTag","PriceTag","Dollar","onShowDeposit","onShowTransfer","onShowWithdraw","tokenPriceList","entries","tokenDetail","coinList","coinDetailList","values","doughnutData","coin","assetsRawData","tokenPriceUSDT","find","isLpToken","TokenType","lp","single","available","smallBalance","Paper","showFiliter","originalData","setOriginalData","OrderPanel","getOrders","userOrders","StyledPaper","StyledSwitch","Switch","textPrimary","success","backgroundColor","opacity","BtnCurrency","Currency","dollar","_handleChange","target","IconComponent","DropDownIcon","labelId","autoWidth","yen","StyledDivider","Divider","SettingPanel","focus","useTheme","setUpColor","setCurrency","direction","flexWrap","paddingLeft","marginBottom","paddingX","alignSelf","Button","passDay","changeLanguage","textTransform","UpColor","green","up","down","red","subMenu","subMenuLayer2","BoxStyle","SubMenuList","withRef","BasicSubMenuList","Layer2Page","accStatus","useAmmMapUI","setRawData","page","setPage","ammMapStatus","ammMapStatusUnset","tickerStatus","tickerStatusUnset","updateTickersUI","_page","i","_ammMap","tickerMapKey","NO_TOKEN_MAP","updateRawData","PoolsPanel","handlePageChange","ammPairInit","_ammCalcData","ammType","AmmPanelType","Deposit","coinACount","coinBCount","AmmPanelView","snapShotData","setAmmCalcData","setAmmDepositData","setAmmWithdrawData","ammDepositBtnI18nKey","setAmmDepositBtnI18nKey","ammWithdrawBtnI18nKey","setAmmWithdrawBtnI18nKey","initAmmData","onAmmWithdrawClickArray","onAmmDepositClickArray","useAmmPanel","isLoading","tabSelected","ammDepositBtnStatus","LOADING","ammWithdrawBtnStatus","makeUIAmmActivityMap","myReward","ammPoolActivityStatus","ammActivityViewMap","ammPoolActivityRule","awardRules","myRewards","AmmPoolActivityStatus","InProgress","currentRewards","duration","rangeFrom","rangeTo","isPass","EndOfGame","makeAsCard","_ammInfo","itemArray","activity","getOneRewardInfo","reward2","rewardDollar","rewardYuan","balanceA","balanceB","balanceDollar","balanceYuan","ammUserReward","feeRewards","plus","ratio","BigNumber","_walletMap","ammDetail","makeMyAmm","makeAmmDetailExtendsActivityMap","ammActivity","BoxStyled","CoinPairPanel","useUserRewardsState","ammMarketArray","myAmmMarketArray","setMyAmmMarketArray","setAmmUserRewardMap","setSnapShotData","myAmm","setMyAmm","totalRewards","coinPairInfo","setCoinPairInfo","walletLayer2DoIt","_coinPairInfo","_snapShotData","_myAmm","useCoinPair","tabIndex","setTabIndex","_handlePageChange","Breadcrumbs","spacing","wrap","md","paddingRight","getThousandFormattedNumbers","Yuan","Hidden","mdDown","noWrap","textOverflow","format","AmmCardWrap","forwardRef","AmmCard","AmmList","sm","lg","AmmMiningView","userRewardsMapState","setAmmActivityViewMap","ammActivityPastViewMap","setAmmActivityPastViewMap","NotStarted","useAmmMiningUI","useOverview","summaryReward","setSummaryReward","myPoolRow","test","makeSummaryMyAmm","StyleWrapper","LiquidityOverview","padding","margin","handleDeposit","row","handleWithdraw","subMenuLiquidity","LiquidityPage","AmmActivityMapState","setAmmActivityMap","useAmmPool","matchPair","next","RouterView","exact","path"],"mappings":"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","file":"static/js/main~a97bfcba.6db6b593.chunk.js","sourcesContent":["import store from '../../stores';\nimport { toBig } from 'loopring-sdk';\nimport { BIG10 } from '../../defs/swap_defs';\nimport BigNumber from 'bignumber.js';\n\nexport const volumeToCount = (symbol:string,volumn:string|number|BigNumber,tokenMap= store.getState().tokenMap.tokenMap):number|undefined =>{\n   const result =  volumeToCountAsBigNumber(symbol,volumn,tokenMap);\n   return result? result.toNumber():undefined;\n}\nexport const volumeToCountAsBigNumber = (symbol:string,volumn:string|number|BigNumber,tokenMap= store.getState().tokenMap.tokenMap):BigNumber|undefined =>{\n    if(tokenMap && tokenMap[symbol] && typeof volumn !== 'undefined'){\n        try{\n            return toBig(volumn).div( BIG10.pow(tokenMap[symbol].decimals))\n        }catch (error){\n            throw error;\n        }\n    }else{\n        return undefined;\n    }\n}","import { ConnectorNames } from 'loopring-sdk'\n\nimport {\n    injected,\n    network,\n    walletconnect,\n    walletlink,\n    ledger,\n    trezor,\n    authereum,\n} from 'networks/web3_connectors'\n\nexport const connectorsByName: { [connectorName in ConnectorNames]: any } = {\n    [ConnectorNames.Unknown]: undefined,\n    [ConnectorNames.Injected]: injected,\n    [ConnectorNames.Network]: network,\n    [ConnectorNames.WalletConnect]: walletconnect,\n    [ConnectorNames.WalletLink]: walletlink,\n    [ConnectorNames.Ledger]: ledger,\n    [ConnectorNames.Trezor]: trezor,\n    [ConnectorNames.Authereum]: authereum,\n}\n","import { useState, useCallback, useMemo, useRef, useEffect, } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\n\nimport { useCustomDCEffect } from 'hooks/common/useCustomDCEffect'\n\nimport { useGetTradingInfo } from 'stores/trading/hook'\nimport { useActiveWeb3React, } from 'hooks/web3/useWeb3'\n\nimport { Lv2Account, } from 'defs/account_defs'\n\nimport { AccountStatus, StatusChangeEvent } from 'state_machine/account_machine_spec'\n\nimport * as sign_tools from 'loopring-sdk'\n\nimport { connectorsByName } from 'defs/web3_defs'\n\nimport { ChainId, ConnectorNames, dumpError400, ExchangeAPI, UserAPI, } from 'loopring-sdk'\n\nimport { toHex, toBig, } from 'loopring-sdk'\n\nimport { RootState } from 'stores'\n\nimport {\n    reset, setAccountStatus, setConnectName,\n    setConnectNameTemp, setAccountInfo, setEddsaKey, setApikey, setAccAddr,\n} from 'stores/account/reducer'\n\nimport { AccountMachineSpec, } from 'state_machine/account_machine_spec'\n\nimport { buildMachine } from 'state_machine/machine_builder'\n\nimport voca from 'voca'\nimport { usePrevious } from 'react-use'\n\nimport Web3 from 'web3'\n\nimport { useExchangeAPI, useUserAPI } from 'hooks/exchange/useApi'\n\nimport { UserStorage } from 'storage'\n\nimport store from 'stores'\nimport { updateWalletLayer1, reset as resetLayer1 } from '../walletLayer1';\nimport { updateWalletLayer2,reset as resetLayer2 } from '../walletLayer2';\n\n\nexport function useWeb3Account() {\n\n    const {\n        connector,\n        library,\n        account,\n        chainId,\n        active,\n        error,\n    } = useActiveWeb3React()\n\n    const isConnected: boolean = active && !voca.isBlank(account as string)\n\n    return {\n        account,\n        connector,\n        library,\n        chainId,\n        active,\n        isConnected,\n        error,\n    }\n\n}\n\nexport function useAccount() {\n\n    const account: Lv2Account = useSelector((state: RootState) => state.account)\n\n    const isNoAccount = () => {\n        return account.status === AccountStatus.NOACCOUNT\n    }\n\n    const isActivated = () => {\n        return account.status === AccountStatus.ACTIVATED\n    }\n\n    return {\n        account,\n        isNoAccount,\n        isActivated,\n        apiKey: account.apiKey,\n        eddsaKey: account.eddsaKey,\n        accountId: account.accountId,\n    }\n}\n\nexport function useStateMachine() {\n    const dispatch = useDispatch()\n\n    const machine = buildMachine(AccountMachineSpec())\n\n    const sendEvent = useCallback((account: Lv2Account, event: StatusChangeEvent) => {\n        const nextState = machine(account.status, event)\n        if (nextState) {\n            dispatch(setAccountStatus(nextState))\n        }\n    }, [machine, dispatch])\n\n    return {\n        sendEvent,\n    }\n}\n\nexport function useConnect() {\n\n    const {\n        activate,\n    } = useActiveWeb3React()\n\n    const { sendEvent } = useStateMachine()\n\n    const dispatch = useDispatch()\n\n    const [activatingConnector, setActivatingConnector] = useState<any>()\n\n    const connect = useCallback((item_name: ConnectorNames, isSwitch: boolean = false) => {\n        const newConnector: any = connectorsByName[item_name]\n        setActivatingConnector(newConnector)\n        activate(newConnector)\n        dispatch(setConnectNameTemp(item_name))\n\n        if (isSwitch) {\n          //  console.log('try Connecting... isSwitch Reset')\n            sendEvent(store.getState().account, StatusChangeEvent.Reset)\n        }\n\n        sendEvent(store.getState().account, StatusChangeEvent.Connecting)\n\n        console.log('try Connecting...')\n    }, [activate, dispatch, sendEvent])\n\n    return {\n        connect,\n        activatingConnector,\n    }\n\n}\n\nexport function useDisconnect() {\n\n    const {\n        deactivate,\n    } = useActiveWeb3React()\n\n    const dispatch = useDispatch()\n\n    const disconnect = useCallback(() => {\n        deactivate()\n        dispatch(reset(undefined))\n        //TODO dispatch wallet info \n    }, [deactivate, dispatch])\n\n    return {\n        disconnect,\n    }\n\n}\n\nexport function useUnlock() {\n\n    const dispatch = useDispatch()\n\n    const exchangeApi: any = useExchangeAPI()\n\n    const userApi: any = useUserAPI()\n\n    const { tradingInfo } = useGetTradingInfo()\n\n    const { connector, } = useWeb3Account()\n\n    const { sendEvent } = useStateMachine()\n\n    const lock = useCallback(async (account: Lv2Account) => {\n        console.log('useCallback lock:', account.status)\n        sendEvent(account, StatusChangeEvent.Lock)\n    }, [sendEvent])\n\n    const unlock = useCallback(async (account: Lv2Account) => {\n\n        if (!userApi || !exchangeApi || !connector || !account.accountId || !tradingInfo.exchangeInfo?.exchangeAddress\n            || account.status !== AccountStatus.LOCKED) {\n            console.log('accountId:', account.accountId)\n            console.log('exchangeAddress:', tradingInfo.exchangeInfo)\n            console.log('enter !! account.status:', account.status)\n            return\n        }\n\n        console.log('useUnlock useCallback:', account.status)\n\n        if (account.status !== AccountStatus.LOCKED) {\n            throw Error('unexpected status:' + account.status)\n        }\n\n        let event = undefined\n        let sk = undefined\n        let apikey: any = undefined\n\n        try {\n            const provider = await connector.getProvider()\n            const web3 = new Web3(provider as any)\n            console.log('useUnlock eddsaKey:', account.eddsaKey)\n\n            if (!account.eddsaKey) {\n                const eddsakey = await sign_tools\n                    .generateKeyPair(\n                        web3,\n                        account.accAddr,\n                        tradingInfo.exchangeInfo?.exchangeAddress as string,\n                        account.nonce - 1,\n                        account.connectName,\n                    )\n                sk = toHex(toBig(eddsakey.keyPair.secretKey))\n\n            } else {\n                sk = account.eddsaKey\n            }\n\n            apikey = await userApi.getUserApiKey({\n                accountId: account.accountId\n            }, sk)\n\n            console.log('useUnlock apikey:', apikey)\n\n            event = StatusChangeEvent.Unlock\n\n        } catch (reason) {\n            console.log(reason)\n            event = StatusChangeEvent.Reset\n        }\n\n        if (sk) {\n            dispatch(setEddsaKey(sk))\n        }\n\n        if (apikey?.apiKey) {\n            dispatch(setApikey(apikey.apiKey))\n        }\n\n        console.log('next event:', event)\n        if (event) {\n            sendEvent(account, event)\n        }\n\n    }\n        , [dispatch, sendEvent, exchangeApi, userApi, connector, tradingInfo.exchangeInfo])\n\n    return {\n        lock,\n        unlock,\n    }\n}\n\nasync function checkAccountAvailableAsync(exchangeApi: ExchangeAPI, userApi: UserAPI, account: Lv2Account, dispatch: any, sendEvent: any, connector: any, exchangeAddress: string) {\n\n    let accInfo = undefined\n    let event = undefined\n    let sk = undefined\n    let code = undefined\n    let apikey: any = undefined\n\n    try {\n        accInfo = (await exchangeApi.getAccount({\n            owner: account.accAddr\n        })).accInfo\n        if (accInfo.publicKey && accInfo.publicKey.x && accInfo.publicKey.y) {\n            if (account.accountId !== accInfo.accountId) {\n                const provider = await connector.getProvider()\n                const web3 = new Web3(provider as any)\n                try {\n                    code = await web3.eth.getCode(account.accAddr)\n                    // console.log('!!!!!! about to generateKeyPair!!!!!!!!!!!')\n                    try {\n                        const eddsakey = await sign_tools\n                            .generateKeyPair(\n                                web3,\n                                account.accAddr,\n                                exchangeAddress,\n                                accInfo.nonce - 1,\n                                account.connectName,\n                            )\n                        sk = toHex(toBig(eddsakey.keyPair.secretKey))\n                        const px = toHex(toBig(eddsakey.keyPair.publicKeyX))\n                        const py = toHex(toBig(eddsakey.keyPair.publicKeyY))\n\n                        try {\n                            apikey = await userApi.getUserApiKey({\n                                accountId: accInfo.accountId\n                            }, sk)\n                            event = (StatusChangeEvent.HasPubkey)\n                        } catch (reason) {\n                            dumpError400(reason)\n                            event = (StatusChangeEvent.ErrorResponse)\n                        }\n                    } catch (reason) {\n                        dumpError400(reason)\n                        event = (StatusChangeEvent.ErrorResponse)\n                    }\n\n                } catch (reason) {\n                    dumpError400(reason)\n                    event = (StatusChangeEvent.ErrorResponse)\n                }\n\n            } else {\n                console.log('already has accountId!')\n            }\n        } else {\n            console.log('2 has id but no pubkey currStatus:', account.status)\n            event = (StatusChangeEvent.HasNoPubkey)\n        }\n    } catch (reason) {\n        // 3 has none of above\n        console.log('2 has id but no pubkey currStatus:', account.status)\n        dumpError400(reason)\n        // check deposit tx (local and ethereum)\n        event = (StatusChangeEvent.ErrorResponse)\n    }\n\n    if (accInfo && accInfo.owner !== account.accAddr) {\n        dispatch(setAccountInfo(accInfo))\n    }\n\n    if (sk) {\n        dispatch(setEddsaKey(sk))\n    }\n\n    if (apikey) {\n        console.log('---------> apikey:', apikey)\n        dispatch(setApikey(apikey.apiKey))\n    }\n\n    if (event) {\n        sendEvent(event)\n    }\n\n}\n\nexport function useCheckAccStatus() {\n\n    const dispatch = useDispatch()\n\n    const { account } = useAccount()\n\n    const { sendEvent } = useStateMachine()\n\n    const exchangeApi: ExchangeAPI = useExchangeAPI()\n\n    const userApi: UserAPI = useUserAPI()\n\n    const { account: web3Account, active, isConnected, chainId, connector, } = useWeb3Account()\n\n    const lv1Acc = web3Account as string\n\n    const prevChainId = usePrevious(chainId)\n    const prevWeb3Account = usePrevious(web3Account)\n\n    // const { updateWalletLayer1,resetLayer1} = useWalletLayer1();\n    // const { updateWalletLayer2, resetLayer2} = useWalletLayer2()\n\n\n    // console.log('prevChainId:', prevChainId, ' chainId:', chainId)\n    // console.log('prevWeb3Account:', prevWeb3Account, ' web3Account:', web3Account)\n\n    // console.log(exchangeApi, userApi, account, 'prevChainId:', prevChainId, 'chainId:', chainId, 'web3Account:', web3Account)\n\n    const { tradingInfo } = useGetTradingInfo()\n\n    useCustomDCEffect(async () => {\n\n        const cleanUp = () => {\n            let handler = UserStorage.getHandler()\n            if (account.status !== AccountStatus.ACTIVATED && handler) {\n                clearInterval(handler)\n            }\n        }\n\n        async function checkStatus() {\n\n            if (!account || !lv1Acc || !exchangeApi || !userApi || !connector || !tradingInfo.exchangeInfo?.exchangeAddress) {\n                //console.log('checkStatus return!!!!!!')\n                return\n            }\n\n            if (((prevChainId && chainId && prevChainId !== chainId)\n                || (prevWeb3Account && web3Account && prevWeb3Account !== web3Account))\n                && account.status !== AccountStatus.UNCONNNECTED) {\n\n                console.log('checkStatus try to resetFunc')\n                dispatch(reset(undefined))\n                sendEvent(account, StatusChangeEvent.Reset)\n                return\n            }\n\n            cleanUp()\n\n            switch (account.status) {\n                case AccountStatus.UNCONNNECTED:\n                   // console.log('---> render UNCONNNECTED active:', active, ' isConnected:', isConnected)\n\n                    if (isConnected) {\n                        dispatch(setConnectNameTemp(ConnectorNames.Injected))\n                        sendEvent(account, StatusChangeEvent.Connecting)\n                    }\n\n                    //HIGH:\n                    dispatch(resetLayer1(undefined));\n                    dispatch(resetLayer2(undefined));\n                    break\n\n                case AccountStatus.CONNECTED:\n                    //check session or local storage\n\n                  //  console.log('---> render CONNECTED account:', account)\n\n                    try {\n\n                        const acc = (await exchangeApi.getAccount({ owner: lv1Acc })).accInfo\n\n                        // current acc is local acc info\n                        if (account.accAddr && account.eddsaKey && acc.owner === account.accAddr) {\n                            // console.log('cur Eddsakey:', account.eddsaKey)\n                        } else {\n                            // console.log('got a new address:', acc)\n                            // got a new address\n                            dispatch(setAccountInfo(acc))\n                            // dispatch(setEddsaKey(''))\n                            //HIGH:\n                            dispatch(updateWalletLayer1(undefined))\n                            //updateWalletLayer1();\n                           // dispatch(updateWalletLayer1(undefined));\n                        }\n\n                        if (account?.connectName !== account?.connectNameTemp) {\n                            dispatch(setConnectName(account.connectNameTemp))\n                        }\n\n                        sendEvent(account, StatusChangeEvent.HasPubkey)\n\n                    } catch (reason) {\n                        dumpError400(reason)\n\n                        if (lv1Acc) {\n                            dispatch(setAccAddr(lv1Acc))\n                        }\n\n                        if (reason.response && reason.response.data && reason.response.data.resultInfo\n                             && reason.response.data.resultInfo.code === 101002) {\n                            sendEvent(account, StatusChangeEvent.ErrorResponse)\n                        }\n                    }\n\n                    break\n\n                case AccountStatus.NOACCOUNT:\n                    break\n\n                case AccountStatus.DEPOSITING:\n                    // TODO sub contract event, check deposit.\n                    const depositFinished = true // TODO\n                    if (depositFinished) {\n                     //   console.log('depositFinished currStatus:', account.status)\n                        sendEvent(account, StatusChangeEvent.FinishDeposit)\n                    }\n                    break\n\n                case AccountStatus.DEPOSIT_TO_CONFIREM:\n                    // getAccount every 10s to check\n                    break\n\n                case AccountStatus.UNACTIVATED:\n                    const isSmartWallet = false // TODO\n                    if (isSmartWallet) {\n                        // TODO approve hash,\n                      //  console.log('approve hash, currStatus:', account.status)\n                        sendEvent(account, StatusChangeEvent.IsSmartWallet)\n                    } else {\n                       // console.log('approve hash no smartwallet, account.status:', account.status)\n                    }\n                    break\n\n                case AccountStatus.ARPROVING:\n                    // TODO sub contract event, check approving.\n                    const approved = false // TODO\n                    if (approved) {\n                      //  console.log('sub contract event, check approving. approved! status:', account.status)\n                        sendEvent(account, StatusChangeEvent.ApproveSubmit)\n                    }\n                    break\n\n                case AccountStatus.APPROV_TO_CONFIRM:\n                    const approveConfirmed = false // TODO\n                    if (approveConfirmed) {\n                     //   console.log('approveConfirmed status:', account.status)\n                        sendEvent(account, StatusChangeEvent.ApproveConfirmed)\n                    }\n                    break\n\n                case AccountStatus.LOCKED:\n                    //HIGH:\n                    dispatch(resetLayer1(undefined))\n                    break\n\n                case AccountStatus.ACTIVATED:\n                    UserStorage.checkTimeout(true)\n                    const handler = setInterval(() => {\n                        const isTimeOut = UserStorage.checkTimeout()\n                        if (account.status === AccountStatus.ACTIVATED && isTimeOut) {\n                            clearInterval(handler)\n                            sendEvent(account, StatusChangeEvent.Lock)\n                        }\n                    }, 1000)\n                    UserStorage.setHandler(handler);\n                    //HIGH:\n                    dispatch(updateWalletLayer2(undefined))\n                        //useWalletLayer2().updateWalletLayer2();\n                    //dispatch((undefined));\n                    break\n\n                default:\n                    break\n            }\n\n\n\n        }\n\n        checkStatus()\n\n        return () => {\n            cleanUp()\n        }\n\n    }, [    updateWalletLayer1, updateWalletLayer2, resetLayer1,resetLayer2,\n        //updateWalletLayer2, updateWalletLayer1,resetLayer1,resetLayer2,\n\n        exchangeApi, userApi, account, prevChainId, chainId, lv1Acc, dispatch, connector, tradingInfo.exchangeInfo?.exchangeAddress,])\n\n}\n\n","export const buildMachine = <S, E>(spec: any) => (currentState: S, event: E) => {\n    // We get all possible transitions for the current State\n    const stateTransitions = spec.states[currentState]\n\n    // No transitions? Error!\n    if (stateTransitions === undefined) {\n        throw new Error(`No transitions defined for ${currentState}`)\n    }\n\n    // We try to transition to the next state\n    const nextState = stateTransitions[event]\n\n    // No next state? Error!\n    if (nextState === undefined) {\n        throw new Error(\n            `Unknown transition for event ${event} in state ${currentState}`\n        )\n    }\n\n   // console.log('got nextState:', nextState)\n\n    // We return the new state\n    return nextState\n}\n","import { toBig } from 'loopring-sdk'\n\nexport enum OrderHandling {\n    processed = 'processed',\n    no_such_order = 'no_such_order',\n    too_many_times = 'too_many_times',\n}\n\nexport const BIG0 = toBig(0)\n\nexport const BIG1 = toBig(1)\n\nexport const BIG10 = toBig(10)\n\nexport const BIG10K = toBig(10000)\n\nexport const MULTI_FACTOR = 10000\n","import { createSlice, PayloadAction, Slice } from '@reduxjs/toolkit'\n\nimport { AccountInfo, ConnectorNames, } from 'loopring-sdk'\n\nimport { Lv2Account, } from 'defs/account_defs'\nimport { AccountStatus } from 'state_machine/account_machine_spec'\nimport { UserStorage } from 'storage'\n\n\nconst initialState = () => {\n  const defaultAccId = process.env.REACT_APP_TEST_ACCOUND_ID ? process.env.REACT_APP_TEST_ACCOUND_ID : UserStorage.getAccountId()\n  const defaultApiKey = process.env.REACT_APP_TEST_API_KEY ? process.env.REACT_APP_TEST_API_KEY : UserStorage.getApikey()\n  const defaultOwner = process.env.REACT_APP_TEST_OWNER ? process.env.REACT_APP_TEST_OWNER : UserStorage.getAccount()\n  const defaultEddsaKey = process.env.REACT_APP_TEST_EDDSA_KEY ? process.env.REACT_APP_TEST_EDDSA_KEY : UserStorage.getEddsakey()\n\n  console.log('defaultApiKey:', JSON.stringify(defaultApiKey))\n  const defaultStatus = AccountStatus.UNCONNNECTED\n  return {\n    accAddr: defaultOwner,\n    status: defaultStatus,\n    accountId: defaultAccId,\n    publicKey: {},\n    nonce: 0,\n    isContractAddress: false,\n    apiKey: defaultApiKey,\n    eddsaKey: defaultEddsaKey,\n    connectName: ConnectorNames.Unknown,\n    connectNameTemp: ConnectorNames.Unknown,\n  } as Lv2Account\n}\n\nconst accountSlice:Slice = createSlice({\n  name: 'account',\n  initialState: initialState(),\n  reducers: {\n    reset(state) {\n      const initState = initialState()\n      console.log('!!! reset account!', initState)\n      Object.assign(state, initState)\n    },\n    setAccAddr(state, action: PayloadAction<string>) {\n      state.accAddr = action.payload\n      // UserStorage.setAccount(action.payload)\n    },\n    setAccountInfo(state, action: PayloadAction<AccountInfo>) {\n      state.accAddr = action.payload.owner\n      state.accountId = action.payload.accountId\n      state.nonce = action.payload.nonce\n      state.publicKey = action.payload.publicKey\n\n      // UserStorage.setAccount(state.accAddr)\n      // UserStorage.setAccountId(state.accountId)\n      \n    },\n    setApikey(state, action: PayloadAction<string>) {\n      state.apiKey = action.payload\n      // UserStorage.setApikey(action.payload)\n    },\n    setAccountStatus(state, action: PayloadAction<AccountStatus>) {\n      state.status = action.payload\n    },\n    setEddsaKey(state, action: PayloadAction<any>) {\n      state.eddsaKey = action.payload\n      // UserStorage.setEddsakey(action.payload)\n    },\n    setConnectName(state, action: PayloadAction<ConnectorNames>) {\n      state.connectName = action.payload\n    },\n    setConnectNameTemp(state, action: PayloadAction<ConnectorNames>) {\n      state.connectNameTemp = action.payload\n    },\n    setIsContractAddress(state, action: PayloadAction<boolean>) {\n      state.isContractAddress = action.payload\n    },\n  },\n})\n\nexport const { reset, setAccAddr, setApikey, setConnectName, setConnectNameTemp, setAccountInfo, setAccountStatus, setEddsaKey, setIsContractAddress, } = accountSlice.actions\nexport default accountSlice\n","import { useAmmpoolAPI, useExchangeAPI } from 'hooks/exchange/useApi'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { useCustomDCEffect } from 'hooks/common/useCustomDCEffect'\n\nimport store, { RootState } from 'stores'\n\nimport { \n    setMarkets, \n    setExchangeInfo, \n    setTokens, \n    setTickerMap, \n    setAmmPoolStats,\n    setAmmPoolConf, \n    setMarketTrades,\n    setAmmActivityRules,\n    setChainId, \n} from 'stores/trading/reducer'\n\nimport { dumpError400, ChainId, AmmPoolStat, Currency, } from 'loopring-sdk'\nimport { useActiveWeb3React } from 'hooks/web3/useWeb3'\nimport { useEffect } from 'react'\n\nimport { ammpoolAPI, exchangeAPI } from \"stores/apis/api\"\n\nexport function getTradingInfo() {\n    const tradingInfo = store.getState().trading\n    return {\n        tradingInfo,\n        chainId: tradingInfo.chainId,\n    }\n}\n\nexport function getAccount() {\n    return  store.getState().account\n\n}\n\nexport function getChainId(){\n    const chainId = store.getState().system.chainId;\n    return chainId\n\n}\n\nexport function useGetTradingInfo() {\n    const tradingInfo = useSelector((state: RootState) => state.trading)\n    return {\n        tradingInfo,\n        chainId: tradingInfo.chainId,\n    }\n}\n\nexport function useUpdateChainId() {\n    const { chainId } = useActiveWeb3React()\n    const dispatch = useDispatch()\n    useEffect(() => {\n        dispatch(setChainId(chainId ?? ChainId.GORLI))\n    }, [chainId, dispatch])\n}\n\nexport function useUpdateExchangeMarkets() {\n    const dispatch = useDispatch()\n    const api = useExchangeAPI()\n\n    useCustomDCEffect(async() => {\n\n        if (!api) {\n            return\n        }\n\n        try {\n            const response = await api.getMixMarkets()\n            dispatch(setMarkets(response))\n        } catch (reason) {\n            dumpError400(reason)\n        }\n\n    }, [api])\n\n}\n\nexport function useUpdateExchangeInfo() {\n\n    const dispatch = useDispatch()\n    const api = useExchangeAPI()\n\n    useCustomDCEffect(async() => {\n\n        if (!api) {\n            return\n        }\n\n        try {\n            const response = await api.getExchangeInfo()\n            dispatch(setExchangeInfo(response.exchangeInfo))\n        } catch (reason) {\n            dumpError400(reason)\n        }\n\n    }, [api])\n\n}\n\nexport function useUpdateAmmPoolConf() {\n\n    const dispatch = useDispatch()\n    const api = useAmmpoolAPI()\n\n    useCustomDCEffect(async() => {\n\n        if (!api) {\n            return\n        }\n\n        try {\n            const ammPoolConf = await api.getAmmPoolConf()\n            dispatch(setAmmPoolConf(ammPoolConf))\n        } catch (reason) {\n            dumpError400(reason)\n        }\n\n    }, [api])\n\n}\n\nexport function useUpdateAmmPoolStats() {\n\n    const dispatch = useDispatch()\n    const api = useAmmpoolAPI()\n\n    useCustomDCEffect(async() => {\n\n        if (!api) {\n            return\n        }\n\n        try {\n            const ammPoolStats = await api.getAmmPoolStats()\n            dispatch(setAmmPoolStats(ammPoolStats))\n        } catch (reason) {\n            dumpError400(reason)\n        }\n\n    }, [api])\n\n}\n\nexport function useUpdateAmmActivityRules() {\n\n    const dispatch = useDispatch()\n    const api = useAmmpoolAPI()\n\n    useCustomDCEffect(async() => {\n\n        if (!api) {\n            return\n        }\n\n        try {\n            const ammActivityRules = await api.getAmmPoolActivityRules()\n            dispatch(setAmmActivityRules(ammActivityRules.activityRules))\n        } catch (reason) {\n            dumpError400(reason)\n        }\n\n    }, [api])\n\n}\n\nexport function useUpdateTokens() {\n\n    const dispatch = useDispatch()\n    const api = useExchangeAPI()\n\n    useCustomDCEffect(async() => {\n\n        if (!api) {\n            return\n        }\n\n        try {\n            const tokens = await api.getTokens()\n            dispatch(setTokens(tokens))\n        } catch (reason) {\n            dumpError400(reason)\n        }\n\n    }, [api])\n\n}\n\nexport function useUpdateTickerMap(market: string) {\n\n    const dispatch = useDispatch()\n    const api = useExchangeAPI()\n\n    useCustomDCEffect(async() => {\n\n        if (!api) {\n            return\n        }\n\n        try {\n            const tickMap = await api.getTicker({\n                market\n              })\n            dispatch(setTickerMap(tickMap))\n        } catch (reason) {\n            dumpError400(reason)\n        }\n\n    }, [api])\n\n}\n\nexport function useMarketTrades(market: string) {\n  \n    const dispatch = useDispatch()\n    const api = useExchangeAPI()\n\n    useCustomDCEffect(async() => {\n\n        if (!api) {\n            return\n        }\n\n        try {\n            const marketTrades = await api.getMarketTrades({\n                market\n              })\n            dispatch(setMarketTrades(marketTrades))\n        } catch (reason) {\n            dumpError400(reason)\n        }\n\n    }, [api, dispatch])\n\n}\n\nexport function useUpdateFiatPrice() {\n  \n    const dispatch = useDispatch()\n    const api = useExchangeAPI()\n\n    useCustomDCEffect(async() => {\n\n        if (!api) {\n            return\n        }\n\n        try {\n            const usdFiatPrices = await api.getFiatPrice({\n                legal: Currency.USD\n            })\n            const cnyFiatPrices = await api.getFiatPrice({\n                legal: Currency.CNY\n            })\n            dispatch(setMarketTrades({}))\n        } catch (reason) {\n            dumpError400(reason)\n        }\n\n    }, [api, dispatch])\n\n}\n\n// export const asyncGetTradingInfo = async() => {\n//\n//     const { tradingInfo } = getTradingInfo()\n//     console.log('--- tradingInfo', tradingInfo)\n//\n//     let tokens: any = undefined\n//\n//     if (tradingInfo.tokens?.tokenIdMap) {\n//         tokens = tradingInfo.tokens\n//     } else {\n//         tokens = (await exchangeAPI().getTokens())\n//     }\n//\n//     let ammpools: any = undefined\n//\n//     if (tradingInfo.ammPoolConf?.ammpools) {\n//         ammpools = tradingInfo.ammPoolConf.ammpools\n//     } else {\n//         ammpools = (await ammpoolAPI().getAmmPoolConf()).ammpools\n//     }\n//\n//     let ammPoolStats: { [key: string] : AmmPoolStat } = {}\n//\n//     if (tradingInfo.ammPoolStats.ammPoolStats) {\n//         ammPoolStats = tradingInfo.ammPoolStats.ammPoolStats\n//     } else {\n//         ammPoolStats = (await ammpoolAPI().getAmmPoolStats()).ammPoolStats\n//     }\n//\n//     return {\n//         tokens,\n//         ammpools,\n//         ammPoolStats,\n//     }\n// }","import { useDispatch, useSelector } from 'react-redux'\nimport { tokenMapSlice } from './reducer';\nimport { TokenMapStates } from './interface';\n\nexport function useTokenMap<R extends {[key:string]:any}>(): TokenMapStates<R> & {\n    updateTokenMap:()=>void,\n    statusUnset:()=>void,\n} {\n    const tokenMap:TokenMapStates<R> = useSelector((state: any) => state.tokenMap)\n    const dispatch = useDispatch();\n    const updateTokenMap = () => {\n        dispatch(tokenMapSlice.actions.getTokenMap(undefined))\n    }\n    const statusUnset = ()=>{\n        dispatch(tokenMapSlice.actions.statusUnset(undefined))\n    }\n    return {\n        ...tokenMap,\n        statusUnset,\n        updateTokenMap,\n    }\n\n}\n","import { useDispatch, useSelector } from 'react-redux'\nimport { AmmMapStates } from './interface';\nimport { ammMapSlice } from './reducer';\n\nexport const useAmmMap = <R extends {[key:string]:any},I extends {[key:string]:any}>(): AmmMapStates<R,I> & {\n    updateAmmMap:()=> void,\n    statusUnset:()=> void,\n} => {\n    const ammMap:AmmMapStates<R,I>= useSelector((state: any) => state.amm.ammMap)\n    const dispatch = useDispatch();\n    const updateAmmMap = () => {\n        dispatch(ammMapSlice.actions.getAmmMap(undefined))\n    }\n    const statusUnset = ()=>{\n        dispatch(ammMapSlice.actions.statusUnset(undefined))\n    }\n    return {\n        ...ammMap,\n        statusUnset,\n        updateAmmMap\n    }\n}\n","import { useMemo, useState, useEffect } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\n\nimport { Web3Provider } from '@ethersproject/providers'\nimport { Web3ReactContextInterface } from '@web3-react/core/dist/types'\n\nimport { useWeb3React } from '@web3-react/core'\n\nimport { injected } from 'networks/web3_connectors'\n\nimport { ChainId, NetworkContextName } from 'loopring-sdk'\n\n/*\nimport EXCHANGE_ABI from 'config/abis/exchange_3_6.json'\nimport ERC20_ABI from 'config/abis/erc20.json'\nimport DEPOSIT_ABI from 'config/abis/deposit.json'\n\nimport Web3 from 'web3'\n*/\n\nexport function useActiveWeb3React(): Web3ReactContextInterface<Web3Provider> & { chainId?: ChainId } {\n  const context = useWeb3React<Web3Provider>()\n  const contextNetwork = useWeb3React<Web3Provider>(NetworkContextName)\n  return context.active ? context : contextNetwork\n}\n\nexport function useEtherscan() {\n  const { chainId } = useActiveWeb3React()\n\n  const [etherscanUrl, setEtherscanUrl] = useState<string>('')\n\n  useEffect(() => {\n    switch(chainId) {\n      case ChainId.MAINNET:\n        setEtherscanUrl('https://etherscan.io/address/')\n        break\n      default:\n        setEtherscanUrl('https://goerli.etherscan.io/address/')\n    }\n  }, [chainId])\n\n  return {\n    etherscanUrl,\n  }\n}\n\nexport function useEagerConnect() {\n\n  const { activate, active } = useWeb3React()\n\n  const [tried, setTried] = useState(false)\n\n  useEffect(() => {\n    injected.isAuthorized().then((isAuthorized: boolean) => {\n      if (isAuthorized) {\n        console.log('useEagerConnect isAuthorized')\n        activate(injected, undefined, true).catch(() => {\n          setTried(true)\n        })\n      } else {\n        console.log('useEagerConnect NOT isAuthorized')\n        setTried(true)\n      }\n    })\n  }, []) // intentionally only running on mount (make sure it's only mounted once :))\n\n  // if the connection worked, wait until we get confirmation of that to flip the flag\n  useEffect(() => {\n    if (!tried && active) {\n      setTried(true)\n    }\n  }, [tried, active])\n\n  return tried\n}\n\nexport function useInactiveListener(onReConnectInjected: any = undefined, suppress: boolean = false) {\n  const { active, error, activate, chainId, } = useWeb3React()\n  const dispatch = useDispatch()\n\n  useEffect((): any => {\n    const { ethereum } = window as any\n\n    const reConnectInjected = () => {\n      console.log('--------------------------> reConnectInjected')\n      activate(injected)\n      if (onReConnectInjected) {\n        onReConnectInjected()\n      }\n    }\n\n    if (ethereum && ethereum.on && !active && !error) {\n\n      const handleChainChanged = (chainId: string | number) => {\n        console.log('Handling \\'chainChanged\\' event with payload', chainId)\n        reConnectInjected()\n      }\n      const handleAccountsChanged = (accounts: string[]) => {\n        console.log('---------------------------------------------')\n        console.log('Handling \\'accountsChanged\\' event with payload', accounts)\n        console.log('before reset accounts.length=', accounts.length)\n        if (accounts.length > 0) {\n          console.log('before reset!!!!!!!!!!!!!!!!1')\n          reConnectInjected()\n        }\n      }\n\n      ethereum.on('chainChanged', handleChainChanged)\n      ethereum.on('accountsChanged', handleAccountsChanged)\n\n      return () => {\n        if (ethereum.removeListener) {\n          ethereum.removeListener('chainChanged', handleChainChanged)\n          ethereum.removeListener('accountsChanged', handleAccountsChanged)\n        }\n      }\n    }\n  }, [active, error, chainId, activate, dispatch])\n}\n\nexport function useBlockNumber() {\n  const { library, chainId } = useActiveWeb3React()\n\n  const [blockNumber, setBlockNumber] = useState<number>()\n\n  useEffect((): any => {\n      if (!!library) {\n          let stale = false\n\n          library\n              .getBlockNumber()\n              .then((blockNumber: number) => {\n                  if (!stale) {\n                      setBlockNumber(blockNumber)\n                  }\n              })\n              .catch(() => {\n                  if (!stale) {\n                      setBlockNumber(-1)\n                  }\n              })\n\n          const updateBlockNumber = (blockNumber: number) => {\n              setBlockNumber(blockNumber)\n          }\n          library.on('block', updateBlockNumber)\n\n          return () => {\n              stale = true\n              library.removeListener('block', updateBlockNumber)\n              setBlockNumber(undefined)\n          }\n      }\n  }, [library, chainId])\n\n  return {\n      blockNumber,\n  }\n}\n\nexport function useBalance() {\n  const { account, library, chainId } = useActiveWeb3React()\n\n  const [balance, setBalance] = useState<number>()\n  useEffect((): any => {\n      if (!!account && !!library) {\n          let stale = false\n\n          library\n              .getBalance(account)\n              .then((balance: any) => {\n                  if (!stale) {\n                      setBalance(balance)\n                  }\n              })\n              .catch(() => {\n                  if (!stale) {\n                      setBalance(0)\n                  }\n              })\n\n          return () => {\n              stale = true\n              setBalance(0)\n          }\n      }\n  }, [account, library, chainId]) // ensures refresh if referential identity of library doesn't change across chainIds\n\n  return {\n      balance,\n  }\n}\n","import { InjectedConnector } from '@web3-react/injected-connector'\nimport { NetworkConnector } from '@web3-react/network-connector'\nimport { WalletConnectConnector } from '@web3-react/walletconnect-connector'\nimport { WalletLinkConnector } from '@web3-react/walletlink-connector'\nimport { LedgerConnector } from '@web3-react/ledger-connector'\nimport { TrezorConnector } from '@web3-react/trezor-connector'\nimport { AuthereumConnector } from '@web3-react/authereum-connector'\n\nconst POLLING_INTERVAL = 12000\n\nconst RPC_URLS: { [chainId: number]: string } = {\n  1: process.env.REACT_APP_RPC_URL_1 as string,\n  5: process.env.REACT_APP_RPC_URL_5 as string\n}\n\nconsole.log('RPC_URLS 1:', RPC_URLS[1])\nconsole.log('RPC_URLS 5:', RPC_URLS[5])\n\nexport const injected = new InjectedConnector({ supportedChainIds: [1, 5,] })\n\nexport const network = new NetworkConnector({\n  urls: { \n    1: RPC_URLS[1], \n    5: RPC_URLS[5] \n  },\n  defaultChainId: 1\n})\n\nexport const walletconnect = new WalletConnectConnector({\n  rpc: { 1: RPC_URLS[1] },\n  bridge: 'https://bridge.walletconnect.org',\n  qrcode: true,\n  pollingInterval: POLLING_INTERVAL\n})\n\nexport const walletlink = new WalletLinkConnector({\n  url: RPC_URLS[1],\n  appName: 'Loopring DEX'\n})\n\nexport const ledger = new LedgerConnector({ chainId: 1, url: RPC_URLS[1], pollingInterval: POLLING_INTERVAL })\n\nexport const trezor = new TrezorConnector({\n  chainId: 1,\n  url: RPC_URLS[1],\n  pollingInterval: POLLING_INTERVAL,\n  manifestEmail: 'dummy@abc.xyz',\n  manifestAppUrl: 'http://localhost:1234'\n})\n\nexport const authereum = new AuthereumConnector({ chainId: 42 })\n","import { useDispatch, useSelector } from 'react-redux'\nimport { walletLayer2Slice } from './reducer';\nimport { WalletLayer2States } from './interface';\n\nexport function useWalletLayer2(): WalletLayer2States & {\n    updateWalletLayer2:()=> void,\n    statusUnset:()=> void,\n    resetLayer2:()=>void,\n} {\n    const walletLayer2:WalletLayer2States = useSelector((state: any) => state.walletLayer2)\n    const dispatch = useDispatch();\n    const updateWalletLayer2 = () => {\n        dispatch(walletLayer2Slice.actions.getWalletLayer2(undefined))\n    }\n    const statusUnset = ()=>{\n        dispatch(walletLayer2Slice.actions.statusUnset(undefined))\n    }\n    const resetLayer2 = ()=>{\n        dispatch(walletLayer2Slice.actions.reset(undefined))\n    }\n    return {\n        ...walletLayer2,\n        resetLayer2,\n        statusUnset,\n        updateWalletLayer2\n    }\n\n}\n","import { createSlice, PayloadAction, Slice } from '@reduxjs/toolkit'\nimport { AmmMapStates } from './interface';\nimport { STATUS } from '../../constant';\nimport { AmmPoolStat, AmmPoolInfoV3, LoopringMap } from 'loopring-sdk';\n\nexport  type GetAmmMapParams = { ammpools: LoopringMap<AmmPoolInfoV3> }\n\n\nconst initialState: Required<AmmMapStates<object, object>> = {\n    ammMap: undefined,\n    __timer__: -1,\n    status: 'UNSET',\n    errorMessage: null,\n}\nconst ammMapSlice: Slice = createSlice({\n    name: 'ammMap',\n    initialState,\n    reducers: {\n        getAmmMap(state, action: PayloadAction<GetAmmMapParams>) {\n            state.status = STATUS.PENDING\n        },\n        getAmmMapStatus(state, action: PayloadAction<AmmMapStates<any, any>>) {\n            // @ts-ignore\n            if (action.error) {\n                state.status = STATUS.ERROR\n                // @ts-ignore\n                state.errorMessage = action.error\n            }\n            const {ammMap, __timer__} = action.payload\n            if (ammMap) {state.ammMap = ammMap;}\n            if (__timer__) {state.__timer__ = __timer__;}\n            state.status = STATUS.DONE\n        },\n        updateRealTimeAmmMap(state, action: PayloadAction<undefined>) {\n            state.status = STATUS.PENDING\n\n\n        },\n        statusUnset: state => {\n            state.status = STATUS.UNSET\n        }\n    },\n});\nexport { ammMapSlice };\nexport const {getAmmMap, getAmmMapStatus, statusUnset, updateRealTimeAmmMap} = ammMapSlice.actions\n","import { Provider } from 'react-redux'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nimport { createWeb3ReactRoot, Web3ReactProvider } from '@web3-react/core'\nimport store from 'stores'\n\nimport { getLibrary } from 'utils/web3_tools'\nimport { NetworkContextName } from 'loopring-sdk'\n\nimport { getTheme, i18n, provider, ProviderComposer } from \"@loopring-web/component-lib/static-resource\"\nimport { ThemeProvider as MuThemeProvider } from '@material-ui/core'\nimport LocalizationProvider from '@material-ui/pickers/LocalizationProvider'\n\nimport MomentUtils from '@material-ui/lab/AdapterMoment'\n\nimport { ThemeProvider } from \"@emotion/react\"\n\nimport { I18nextProvider } from \"react-i18next\"\n\n\n\nconst Web3ProviderNetwork = createWeb3ReactRoot(NetworkContextName)\nconst providers = [\n    provider(LocalizationProvider as any, {dateAdapter: MomentUtils}),\n    provider(I18nextProvider as any, {i18n:i18n}),\n    provider(MuThemeProvider as any, {theme: getTheme('dark')}),\n    provider(ThemeProvider as any, {theme: getTheme('dark')}),\n    provider(Provider as any, {store}),\n]\n\nReactDOM.render(\n// @ts-ignore\n    <ProviderComposer providers={providers}>\n        <Web3ReactProvider getLibrary={getLibrary}>\n            <Web3ProviderNetwork getLibrary={getLibrary}>\n                <App/>\n            </Web3ProviderNetwork>\n        </Web3ReactProvider>\n    </ProviderComposer>,\n    document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\nif (process.env.NODE_ENV !== 'production') {\n    reportWebVitals(console.log)\n}\n","import { createSlice, PayloadAction, Slice } from '@reduxjs/toolkit'\n\nimport { TradingInterval, ChainId, ExchangeInfo, TokenInfo, TickerData, getBaseQuote } from 'loopring-sdk'\n\nexport interface TradingInfo {\n  chainId: number\n  symbol: string\n  symbol_base: string | undefined\n  symbol_quote: string | undefined\n  interval: TradingInterval\n  ammPoolStats: any\n  ammPoolConf: any\n  ammActivityRules: any\n  markets: any\n  marketTrades: any\n  tickerMap: {[key: string]: TickerData}\n  tokens: {[key: string]: [value: TokenInfo]}\n  exchangeInfo?: ExchangeInfo\n}\n\nconst defaultSymbol = process.env.REACT_APP_TEST_SYMBOL ? process.env.REACT_APP_TEST_SYMBOL : 'LRC-ETH'\nconst defaultInterval = process.env.REACT_APP_TEST_INTERVAL ? process.env.REACT_APP_TEST_INTERVAL : TradingInterval.hr1\n\nconst { base, quote } = getBaseQuote(defaultSymbol)\n\nconst initialState = {\n  chainId: ChainId.GORLI,\n  symbol: defaultSymbol,\n  symbol_base: base,\n  symbol_quote: quote,\n  interval: defaultInterval,\n  ammPoolConf: {},\n  ammActivityRules: {},\n  ammPoolStats: {},\n  markets: [],\n  marketTrades: {},\n  tokens: {},\n  tickerMap: {},\n  refreshRate: 1000,\n  refreshRateSlow: 3000,\n} as TradingInfo\n\nconst tradingSlice:Slice = createSlice({\n  name: 'trading',\n  initialState,\n  reducers: {\n    setChainId(state, action: PayloadAction<number>) {\n      state.chainId = action.payload\n    },\n    changeSymbol(state, action: PayloadAction<any>) {\n      state.symbol = action.payload\n      const { base, quote } = getBaseQuote(state.symbol)\n      state.symbol_base = base\n      state.symbol_quote = quote\n    },\n    changeTradingInterval(state, action: PayloadAction<any>) {\n      state.interval = action.payload\n    },\n    setTickerMap(state, action: PayloadAction<any>) {\n      state.tickerMap = action.payload\n    },\n    setAmmPoolStats(state, action: PayloadAction<any>) {\n      state.ammPoolStats = action.payload\n    },\n    setAmmActivityRules(state, action: PayloadAction<any>) {\n      state.ammActivityRules = action.payload\n    },\n    setAmmPoolConf(state, action: PayloadAction<any>) {\n      state.ammPoolConf = action.payload\n    },\n    setMarketTrades(state, action: PayloadAction<any>) {\n      state.marketTrades = action.payload\n    },\n    setMarkets(state, action: PayloadAction<any>) {\n      state.markets = action.payload\n    },\n    setTokens(state, action: PayloadAction<{}>) {\n      state.tokens = action.payload\n    },\n    setExchangeInfo(state, action: PayloadAction<ExchangeInfo>) {\n      state.exchangeInfo = action.payload\n    },\n  },\n})\n\nexport const {\n  setChainId, \n  setAmmPoolStats,\n  setAmmActivityRules,\n  setMarketTrades, \n  setTickerMap, \n  setAmmPoolConf, \n  changeSymbol, \n  changeTradingInterval, \n  setMarkets, \n  setTokens, \n  setExchangeInfo, \n} = tradingSlice.actions\n\nexport default tradingSlice\n","import { utils } from 'ethers'\n\nimport * as fm from 'loopring-sdk'\n\nimport BigNumber from 'bignumber.js'\n\nimport { CoinInfo, CoinMap, } from '@loopring-web/component-lib/static-resource'\nimport { DepthData, getBaseQuote, LoopringMap, MarketInfo, MarketStatus, TokenInfo, } from 'loopring-sdk'\nimport { BIG0, BIG1, BIG10, BIG10K, MULTI_FACTOR, } from '../defs/swap_defs'\n\nexport function getIcon(symbol: string, tokens: any) {\n    const token: any = tokens[symbol]\n    return getIconByTokenInfo(token)\n}\n\nexport function getIconByTokenInfo(token: TokenInfo) {\n    if (token) {\n        const addr = utils.getAddress(token.address)\n        const path = `https://exchange.loopring.io/assets/images/ethereum/assets/${addr}/logo.png`\n        return path\n    }\n    return ''\n}\n\nexport function makeCoinInfo(token: TokenInfo) {\n    if (token) {\n        const info: CoinInfo<any> = {\n            icon: getIconByTokenInfo(token),\n            name: token.symbol,\n            simpleName: token.symbol,\n            description: token.name,\n            company: token.name,\n        }\n        return info\n    }\n    return undefined\n}\n\nexport const getLeft = (pairs: any, tokens: any) => {\n    if (pairs) {\n\n        const left = Reflect.ownKeys(pairs)\n\n        let coinMapLeft: CoinMap<any, CoinInfo<any>> = {}\n\n        left.forEach((key: any) => {\n            coinMapLeft[key] = {\n                icon: getIcon(key, tokens),\n                name: key,\n                simpleName: key,\n                description: '',\n                company: ''\n            }\n        })\n\n        return {\n            left,\n            coinMapLeft,\n        }\n    }\n\n    return undefined\n}\n\nexport const getRight = (pairs: any, left: any, tokens: any) => {\n    if (pairs) {\n        const right = pairs[left].tokenList\n\n        let coinMapRight: CoinMap<any, CoinInfo<any>> = {}\n\n        if (right) {\n            right.forEach((key: any) => {\n                coinMapRight[key] = {\n                    icon: getIcon(key, tokens),\n                    name: key,\n                    simpleName: key,\n                    description: '',\n                    company: ''\n                }\n            })\n\n            return {\n                right,\n                coinMapRight,\n            }\n        }\n    }\n    return undefined\n}\n\nexport const getToken = (tokens: any, token: any) => {\n    if (!tokens) {\n        throw Error('no tokens list!')\n    }\n    return tokens[token]\n}\n\nexport const getTokenInfoByToken = (ammBalance: any, tokens: any, token: any) => {\n\n    const tokenInfo = getToken(tokens, token)\n\n    const tokenVol = ammBalance.pooledMap[tokenInfo.tokenId].volume\n    const reserve = fm.toBig(tokenVol)\n\n    return {\n        tokenInfo, tokenVol, reserve,\n    }\n}\n\nconst getKey = (base: any, quote: any) => {\n\n    if (!base || !quote) {\n        return {\n            key: undefined,\n            key_bak: undefined,\n            isOK: false,\n        }\n    }\n\n    const isLRCETH = false\n    const key = isLRCETH ? 'LRCETH-Pool' : ('AMM-' + base + '-' + quote)\n    const key_bak = isLRCETH ? 'LRCETH-Pool' : ('AMM-' + quote + '-' + base)\n    return {\n        key,\n        key_bak,\n        isOK: true,\n    }\n}\n\nconst getInfoByKey = (raw_data: any, keyPair: any) => {\n    const {\n        key,\n        key_bak,\n    } = keyPair\n\n    if (raw_data[key]) return raw_data[key]\n    return raw_data[key_bak]\n}\n\nexport const getBalances = (ammpools: any, ammPoolsBalances: any, base: any, quote: any, tokens: any) => {\n\n    const { ammInfo,\n        ammBalance,\n    } = getAmmInfo(ammpools, ammPoolsBalances, base, quote)\n\n    const baseToken = getToken(tokens, base)\n    const quoteToken = getToken(tokens, quote)\n\n    const baseBalance = ammBalance.pooledMap[baseToken.tokenId]\n    const quoteBalance = ammBalance.pooledMap[quoteToken.tokenId]\n\n    return {\n        ammInfo,\n        ammBalance,\n        baseBalance,\n        quoteBalance,\n    }\n\n}\n\nexport const getAmmInfoOnly = (ammpools: any, base: any, quote: any) => {\n\n    const keyPair = getKey(base, quote)\n\n    const ammInfo = getInfoByKey(ammpools, keyPair)\n\n    if (!ammInfo) {\n        throw Error('no ammInfo!')\n    }\n\n    return {\n        ammInfo,\n    }\n\n}\n\nexport const getAmmInfo = (ammpools: any, ammPoolsBalances: any, base: any, quote: any) => {\n\n    const keyPair = getKey(base, quote)\n\n    const ammInfo = getInfoByKey(ammpools, keyPair)\n    const ammBalance = getInfoByKey(ammPoolsBalances, keyPair)\n\n    if (!ammInfo || !ammBalance) {\n        throw Error('no ammInfo! no ammBalance!')\n    }\n\n    const feeBips = parseInt(ammInfo.feeBips)\n\n    return {\n        ammInfo,\n        ammBalance,\n        feeBips,\n    }\n\n}\n\nconst getAmt = (rawAmt: any, tokenInfo: any) => {\n    if (rawAmt === undefined) {\n        rawAmt = 0\n    }\n\n    return fm.toBig(rawAmt).times('1e' + tokenInfo.decimals)\n}\n\nexport const applySlippageTolerance = (\n    tokens: any,\n    token: any,\n    value: any,\n    slippageTolerance: number = 0.01\n) => {\n    const tokenInfo = getToken(tokens, token)\n    const f = 1e7\n    const feeFactor = fm.toBig(f * (1 - slippageTolerance))\n    const amount = fm.toBig(value).times('1e' + tokenInfo.decimals)\n    const outInWei = amount.times(feeFactor).dividedBy(f)\n    const out = fromWEI(tokens, token, outInWei)\n\n    return {\n        outInWei,\n        out,\n    }\n}\n\nexport const applyOrderFee = (tokens: any, token: any, value: any, feeBip: any) => {\n    const tokenInfo = getToken(tokens, token)\n    const feeFactor = fm.toBig(MULTI_FACTOR - feeBip)\n    const amount = fm.toBig(value).times('1e' + tokenInfo.decimals)\n    const appliedAmount = amount.times(feeFactor).dividedBy(MULTI_FACTOR)\n    return appliedAmount\n}\n\nexport function fromWEI(tokens: any, symbol: any, valueInWEI: any, precision?: any, ceil?: any) {\n    try {\n        const tokenInfo = getToken(tokens, symbol)\n        const precisionToFixed = precision ? precision : tokenInfo.precision\n        const value = fm.toBig(valueInWEI).div('1e' + tokenInfo.decimals)\n        return fm.toFixed(value, precisionToFixed, ceil)\n    } catch (error) {\n    }\n    return '0'\n}\n\n\nexport function toWEI(tokens: any, symbol: any, value: any, rm: any = 3) {\n    const tokenInfo = getToken(tokens, symbol)\n    if (typeof tokenInfo === 'undefined') {\n        return '0'\n    }\n\n    return fm.toBig(value)\n        .times('1e' + tokenInfo.decimals)\n        .toFixed(0, rm)\n}\n\nexport const getAmountOut = (amt: any, ammpools: any, ammPoolsBalances: any, tokens: any,\n    base: any, quote: any, takerRate: number, currentPrice: number) => {\n\n    if (amt === undefined) {\n        amt = 0\n    }\n\n    const { ammBalance, feeBips, } = getAmmInfo(ammpools, ammPoolsBalances, base, quote)\n\n    const { tokenInfo: baseTokenInfo, reserve: reserveIn } = getTokenInfoByToken(ammBalance, tokens, base)\n    const { tokenInfo: quoteTokenInfo, reserve: reserveOut } = getTokenInfoByToken(ammBalance, tokens, quote)\n\n    const amountIn = getAmt(amt, baseTokenInfo)\n    const feeBipsFactor = fm.toBig(MULTI_FACTOR - feeBips)\n    const amountInWithFee = amountIn.times(feeBipsFactor)\n    const numerator = amountInWithFee.times(reserveOut)\n    const denominator = reserveIn.times(MULTI_FACTOR).plus(amountInWithFee)\n    const amountOutInWei: any = numerator.dividedBy(denominator)\n\n    let quoteAmt: any = fromWEI(tokens, quote, amountOutInWei)\n\n    const _amount1ApplyOrderFeeInWei = applyOrderFee(tokens, quote, quoteAmt, takerRate + feeBips)\n\n    let _amount1ApplyOrderFee = Number(fromWEI(tokens, quote, _amount1ApplyOrderFeeInWei))\n\n    let priceImpact = 0\n    if (_amount1ApplyOrderFee < 0) {\n        _amount1ApplyOrderFee = 0\n        quoteAmt = null\n    } else {\n        const newPrice = Number(quoteAmt) / Number(amt)\n        priceImpact = (newPrice - currentPrice) / currentPrice\n    }\n\n    return {\n        quoteAmt,\n        _amount1ApplyOrderFeeInWei,\n        _amount1ApplyOrderFee,\n        priceImpact,\n    }\n\n}\n\nexport const getAmountOut_Reverse = (amt: any, ammpools: any, ammPoolsBalances: any, tokens: any,\n    base: any, quote: any, takerRate: number, currentPrice: number) => {\n\n    if (amt === undefined) {\n        amt = 0\n    }\n    \n    const { ammBalance, feeBips, } = getAmmInfo(ammpools, ammPoolsBalances, base, quote)\n\n    const { tokenInfo: baseTokenInfo, reserve: reserveIn } = getTokenInfoByToken(ammBalance, tokens, base)\n    const { tokenInfo: quoteTokenInfo, reserve: reserveOut } = getTokenInfoByToken(ammBalance, tokens, quote)\n\n    const amountOut = getAmt(amt, quoteTokenInfo)\n\n    if (amountOut.gt(reserveOut)) {\n        return {\n            baseAmt: 0,\n            _amount1ApplyOrderFeeInWei: 0,\n            _amount1ApplyOrderFee: 0,\n            priceImpact: 0,\n            hasError: false,\n        }\n    }\n\n    const numerator = amountOut.times(reserveIn).times(MULTI_FACTOR)\n    const feeBipsFactor = fm.toBig(MULTI_FACTOR - feeBips)\n\n    // If amountOut is larger than reserveOut?\n    // It's handled before getAmountOut_reserve\n    const reserveOutSubAmountOut = reserveOut.minus(amountOut)\n\n    const denominator = feeBipsFactor.times(reserveOutSubAmountOut)\n    const amountInInWei = numerator.dividedBy(denominator)\n\n    let baseAmt: any = fromWEI(tokens, quote, amountInInWei)\n\n    const _amount1ApplyOrderFeeInWei = applyOrderFee(tokens, quote, amt, takerRate + feeBips)\n\n    let _amount1ApplyOrderFee = Number(fromWEI(tokens, quote, _amount1ApplyOrderFeeInWei))\n\n    let priceImpact = 0\n    if (_amount1ApplyOrderFee < 0) {\n        _amount1ApplyOrderFee = 0\n        baseAmt = null\n    } else {\n        const newPrice = Number(amt) / Number(baseAmt)\n        priceImpact = (newPrice - currentPrice) / currentPrice\n    }\n\n    return {\n        baseAmt,\n        _amount1ApplyOrderFeeInWei,\n        _amount1ApplyOrderFee,\n        priceImpact,\n        hasError: false,\n    }\n\n}\n\nexport function isEmpty(input: any) {\n    if (!input || input.trim() === '') {\n        return true\n    }\n\n    return false\n}\n\nfunction getAmountOutWithFeeBips(amountIn: string, feeBips: string, reserveIn: string, reserveOut: string ) {\n    const amountInBig = fm.toBig(amountIn)\n    const reserveInBig = fm.toBig(reserveIn)\n    const reserveOutBig = fm.toBig(reserveOut)\n    \n    if (amountInBig.lt(BIG0) || reserveInBig.lt(BIG0) || reserveOutBig.lt(BIG0)) {\n        return BIG0\n    }\n    const feeBipsBig = fm.toBig(feeBips)\n\n    const amountInWithFee = amountInBig.times(BIG10K.minus(feeBipsBig))\n    const numerator = amountInWithFee.times(reserveOutBig)\n    const denominator = reserveInBig.times(BIG10K).plus(amountInWithFee)\n\n    return numerator.div(denominator)\n}\n\nfunction getAmountInWithFeeBips(amountOut: string, feeBips: string, reserveIn: string, reserveOut: string ) {\n    const amountOutBig = fm.toBig(amountOut)\n    const reserveInBig = fm.toBig(reserveIn)\n    const reserveOutBig = fm.toBig(reserveOut)\n    \n    if (amountOutBig.lt(BIG0) || reserveInBig.lt(BIG0) || reserveOutBig.lt(BIG0)) {\n        return BIG0\n    }\n    const feeBipsBig = fm.toBig(feeBips)\n\n    const numerator = reserveInBig.times(amountOutBig).times(BIG10K)\n    const denominator = reserveOutBig.times(amountOutBig).times(BIG10K.minus(feeBipsBig))\n\n    return numerator.div(denominator).plus(BIG1)\n}\n\nfunction getOutputOrderbook(input: string, feeBips: string, isAtoB: boolean) {\n    let output: string  = \"0\"\n    let remain: string  = input\n}\n\nexport function getOutputAmount(base: string, quote: string, market: string, \n    input: string, isAtoB: boolean, feeBips: string, \n    tokenMap: LoopringMap<TokenInfo>, marketMap: LoopringMap<MarketInfo>, depth: DepthData) {\n\n    if (isEmpty(input) || isEmpty(feeBips) || !(market in Object.keys(marketMap))) {\n        return undefined\n    }\n\n    const { base: baseRaw, quote: quoteRaw } = getBaseQuote(market)\n\n    const marketInfo: MarketInfo = marketMap[market]\n\n    const isSwapEnabled = marketInfo.status === MarketStatus.ALL || marketInfo.status === MarketStatus.AMM\n\n    input = input.trim()\n\n    let exceedDepth = false\n\n    const reserveIn = ''\n    const reserveOut = ''\n\n    if (isAtoB) {\n\n        // bids_amtTotal -> bidsSizeShown\n        // asks_volTotal -> asksQuoteSizeShown\n        const amountInWei = toWEI(tokenMap, base, input)\n\n        if (isEmpty(depth.bids_amtTotal) || isEmpty(depth.asks_volTotal)) {\n            exceedDepth = true\n        } else {\n\n            if (base === baseRaw) {\n                exceedDepth = fm.toBig(amountInWei).lt(fm.toBig(depth.bids_amtTotal))\n            } else {\n                exceedDepth = fm.toBig(amountInWei).lt(fm.toBig(depth.asks_volTotal))\n            }\n\n        }\n\n        let amountB = new BigNumber(0)\n\n        if (exceedDepth) {\n            if (isSwapEnabled) {\n                amountB = getAmountOutWithFeeBips(amountInWei, feeBips, reserveIn, reserveOut)\n            }\n        } else {\n            amountB = fm.toBig(toWEI(tokenMap, base, getOutputOrderbook(input, feeBips, isAtoB)))\n        }\n\n        return fromWEI(tokenMap, quote, amountB)\n\n    } else {\n\n        // asks_amtTotal -> asksSizeShown\n        // bids_volTotal -> bidsQuoteSizeShown\n\n        if (isEmpty(depth.bids_volTotal) || isEmpty(depth.asks_amtTotal)) {\n            exceedDepth = true\n        } else {\n            const amountInWei = toWEI(tokenMap, quote, input)\n\n            if (base === baseRaw) {\n                exceedDepth = fm.toBig(amountInWei).gt(fm.toBig(depth.bids_volTotal))\n            } else {\n                exceedDepth = fm.toBig(amountInWei).gt(fm.toBig(depth.asks_amtTotal))\n            }\n\n        }\n\n        let amountSBint = BIG0\n\n        const amountB: string = toWEI(tokenMap, quote, input)\n\n        if (exceedDepth) {\n            if (isSwapEnabled) {\n                amountSBint = getAmountInWithFeeBips(amountB, feeBips, reserveIn, reserveOut)\n            }\n        } else {\n            amountSBint = fm.toBig(toWEI(tokenMap, base, getOutputOrderbook(input, feeBips, isAtoB)))\n        }\n\n        if (amountSBint.gt(BIG0)) {\n            return fromWEI(tokenMap, base, amountSBint)\n        }\n\n        return '0'\n\n    }\n\n}\n","export enum CONSTANTS {\n    Handler = 'handler',\n    AccountId = 'account_id',\n    Account = 'account',\n    Apikey = 'apikey',\n    Eddsakey = 'eddsakey',\n    ActiveTime = 'active_time',\n    AmmOrder = 'amm_order',\n    HardwareAddresses = 'hardware_addresses',\n}\n\nconst SESSION_TIMEOUT_SECONDS = 600\n\nexport class UserStorage {\n\n    public static getHandler() {\n        const rawHandler = sessionStorage.getItem(CONSTANTS.Handler)\n        try {\n            if (rawHandler !== undefined && rawHandler !== null)\n                return parseInt(rawHandler)\n        } catch (err) {\n        }\n        return undefined\n    }\n\n    public static setHandler(handler: any) {\n        sessionStorage.setItem(CONSTANTS.Handler, handler)\n    }\n\n    public static clearHandler() {\n        sessionStorage.removeItem(CONSTANTS.Handler)\n    }\n\n    public static checkTimeout(reset: boolean = false) : boolean {\n        let dateTimeStr = localStorage.getItem(CONSTANTS.ActiveTime)\n        let now = new Date().getTime()\n\n        if (dateTimeStr !== null && !reset) {\n            let tmpDt = new Date(parseInt(dateTimeStr))\n\n            // console.log(`now:${now} dateTimeStr:${dateTimeStr} delta:${now - tmpDt.getTime()}`)\n\n            if(now - tmpDt.getTime() > SESSION_TIMEOUT_SECONDS * 1000) {\n                console.log(`TIMEOUT! now:${now} dateTimeStr:${dateTimeStr} delta:${now - tmpDt.getTime()}`)\n                sessionStorage.clear()\n                localStorage.setItem(CONSTANTS.ActiveTime, now.toString())\n                return true\n            }\n        } else {\n\n            if (reset) {\n                console.log('force reset!!')\n            }\n\n            localStorage.setItem(CONSTANTS.ActiveTime, now.toString())\n        }\n\n        return false\n    }\n\n\n    public static getAccountId() {\n        const rawId = sessionStorage.getItem(CONSTANTS.AccountId)\n        try {\n            if (rawId)\n                return parseInt(rawId)\n        } catch (err) {\n        }\n        return undefined\n    }\n\n    public static setAccountId(accountId: number) {\n        sessionStorage.setItem(CONSTANTS.AccountId, accountId.toString())\n    }\n\n    public static getAccount() {\n        return sessionStorage.getItem(CONSTANTS.Account)\n    }\n\n    public static setAccount(account: string) {\n        sessionStorage.setItem(CONSTANTS.Account, account)\n    }\n\n    public static getApikey() {\n        return sessionStorage.getItem(CONSTANTS.Apikey)\n    }\n\n    public static setApikey(apikey: string) {\n        sessionStorage.setItem(CONSTANTS.Apikey, apikey)\n    }\n\n    public static getEddsakey() {\n        return sessionStorage.getItem(CONSTANTS.Eddsakey)\n    }\n\n    public static setEddsakey(eddsakey: string) {\n        sessionStorage.setItem(CONSTANTS.Eddsakey, eddsakey)\n    }\n\n    public static getAmmOrder(): string {\n        var orderHash = localStorage.getItem(CONSTANTS.AmmOrder)\n        return orderHash ? orderHash : ''\n    }\n\n    public static setAmmOrder(orderHash: string) {\n        localStorage.setItem(CONSTANTS.AmmOrder, orderHash)\n    }\n\n    public static clearAmmOrder() {\n        localStorage.removeItem(CONSTANTS.AmmOrder)\n    }\n\n    public static isHardwareAddress(address: string) {\n        let current = localStorage.getItem(CONSTANTS.HardwareAddresses)\n        if (current) {\n            if (current.includes(address.toLowerCase())) {\n                return true\n            }\n        }\n        return false\n    }\n\n    public static saveHardwareAddress(address: string) {\n        let current = localStorage.getItem(CONSTANTS.HardwareAddresses);\n        if (current) {\n            if (current.includes(address.toLowerCase()) !== true) {\n                let newValue = current + ',' + address.toLowerCase();\n                localStorage.setItem(CONSTANTS.HardwareAddresses, newValue);\n            }\n        } else {\n            localStorage.setItem(CONSTANTS.HardwareAddresses, address.toLowerCase());\n        }\n\n    }\n}\n","import { createSlice, PayloadAction, Slice } from '@reduxjs/toolkit'\nimport {  TickerStates } from './interface';\nimport { STATUS } from '../constant';\nimport { CoinKey } from '@loopring-web/component-lib/src/static-resource';\n\nconst initialState:Required<TickerStates>  = {\n    tickerMap:{},\n    status:'UNSET',\n    errorMessage:null,\n}\nconst tickerMapSlice:Slice = createSlice({\n    name: 'tickerMap',\n    initialState,\n    reducers: {\n        getTicker(state, action:PayloadAction<CoinKey<any>>) {\n            state.status = STATUS.PENDING\n        },\n        getTickers(state, action:PayloadAction<Array<CoinKey<any>>>) {\n            state.status = STATUS.PENDING\n        },\n        getTickerStatus(state, action: PayloadAction<TickerStates>) {\n            // @ts-ignore\n            if (action.error) {\n                state.status =  STATUS.ERROR\n                // @ts-ignore\n                state.errorMessage = action.error\n            }\n            state.tickerMap = {...state.tickerMap,...action.payload.tickerMap};\n            state.status = STATUS.DONE\n        },\n        statusUnset: state => {\n            state.status = STATUS.UNSET\n        }\n\n    },\n});\nexport { tickerMapSlice };\nexport const { getTicker,getTickers, getTickerStatus, statusUnset } = tickerMapSlice.actions;","import { useDispatch, useSelector } from 'react-redux'\nimport { userRewardsMapSlice } from './reducer';\nimport { UserRewardsStates } from './interface';\n\nexport function useUserRewards(): UserRewardsStates & {\n    updateUserRewards:()=>void,\n    statusUnset:()=>void,\n} {\n    const userRewardsMap:UserRewardsStates = useSelector((state: any) => state.userRewardsMap)\n    const dispatch = useDispatch();\n\n    const updateUserRewards = () => {\n        dispatch(userRewardsMapSlice.actions.getUserRewards(undefined))\n    }\n    const statusUnset = ()=>{\n        dispatch(userRewardsMapSlice.actions.statusUnset(undefined))\n    }\n    return {\n        ...userRewardsMap,\n        statusUnset,\n        updateUserRewards,\n    }\n\n}\n","import { createSlice, PayloadAction, Slice } from '@reduxjs/toolkit'\nimport { ENV, System, SystemStatus } from './interface';\nimport { STATUS } from '../constant';\n\nconst initialState: SystemStatus = {\n    env: ENV.PROD,\n    chainId: 'unknown',\n    // network:'NONETWORK',\n    baseURL: '',\n    faitPrices: undefined,\n    gasPrice: undefined,\n    forex: undefined,\n    __timer__: -1,\n    status: 'UNSET',\n    errorMessage: null,\n\n    topics: [],\n}\nconst systemSlice: Slice<SystemStatus> = createSlice({\n    name: 'system',\n    initialState,\n    reducers: {\n\n        updateSystem(state, action: PayloadAction<System<{[key:string]:any}>>) {\n            state.chainId = action.payload.chainId\n            state.status = STATUS.PENDING\n        },\n        updateRealTimeObj(state, action: PayloadAction<Partial<{ faitPrices: any, gasPrice: number, forex: number }>>) {\n            const {forex, faitPrices, gasPrice} = action.payload;\n            if (forex) {\n                state.forex = forex\n            }\n            if (faitPrices) {\n                state.faitPrices = faitPrices\n            }\n            if (gasPrice) {\n                state.gasPrice = gasPrice\n            }\n\n\n            // state = {\n            //     ...state.system,\n            //     forex: forex?,\n            //     faitPrices: action.payload.faitPrices ? action.payload.faitPrices : state.system.faitPrices,\n            //     gasPrice: action.payload.gasPrice ? action.payload.gasPrice : state.system.gasPrice,\n            // };\n\n        },\n        getSystemStatus(state, action: PayloadAction<Partial<SystemStatus>>) {\n\n            // @ts-ignore\n            if (action.error) {\n                state.status = STATUS.ERROR\n                // @ts-ignore\n                state.errorMessage = action.error\n            }\n            const {env, baseURL, faitPrices, gasPrice, forex, __timer__} = action.payload;\n            if (env) {\n                state.env = env\n            }\n            if (baseURL) {\n                state.baseURL = baseURL\n            }\n            if (faitPrices) {\n                state.faitPrices = faitPrices\n            }\n            if (gasPrice) {\n                state.gasPrice = gasPrice\n            }\n            if (forex) {\n                state.forex = forex\n            }\n            if (__timer__) {\n                state.__timer__ = __timer__\n            }\n            state.status = STATUS.DONE\n        },\n        statusUnset: state => {\n            state.status = STATUS.UNSET\n        }\n\n    },\n});\nexport { systemSlice };\nexport const {updateSystem, setTopics, getSystemStatus, statusUnset, updateRealTimeObj} = systemSlice.actions;","import { StateBase } from '../interface';\nimport { ChainId } from 'loopring-sdk';\n\nexport enum ENV {\n    DEV='DEV',\n    UAT='UAT',\n    PROD='PROD',\n}\nexport enum NETWORKEXTEND {\n    NONETWORK = 'unknown'\n}\nexport type NETWORK = NETWORKEXTEND | ChainId\n\n\nexport type System<C extends {[key:string]:any}> = {\n    env:keyof typeof ENV,\n    chainId: 1|5|'unknown'\n    // network: keyof typeof NETWORK,\n    baseURL: string,\n    faitPrices:{ [k in keyof C]:{price:any,[key:string]:any}} | undefined,\n    gasPrice:number | undefined,\n    forex:number | undefined,\n\n\n}\n\nexport type SystemStatus = System<{[key:string]:any}> & {\n    // system:System | {}\n    __timer__:NodeJS.Timeout | -1\n    topics: any[]\n}  & StateBase\n\n\n\n","import { createSlice, PayloadAction, Slice } from '@reduxjs/toolkit'\nimport { WalletLayer1Map, WalletLayer1States } from './interface';\nimport { STATUS } from '../constant';\n\n\nconst initialState:WalletLayer1States  = {\n    walletLayer1:undefined,\n    status:'UNSET',\n    errorMessage:null,\n}\nconst walletLayer1Slice:Slice = createSlice({\n    name: 'walletLayer1S',\n    initialState,\n    reducers: {\n        updateWalletLayer1(state, action:PayloadAction<string | undefined>) {\n            state.status = STATUS.PENDING\n        },\n        reset(state, action:PayloadAction<string | undefined>) {\n            state.walletLayer1 = undefined;\n            state.status = STATUS.UNSET;\n        },\n        getWalletLayer1Status(state, action: PayloadAction<{ walletLayer1:WalletLayer1Map<object> }>) {\n            // @ts-ignore\n            if (action.error) {\n                state.status =  STATUS.ERROR\n                // @ts-ignore\n                state.errorMessage = action.error\n            }\n            state.walletLayer1 = {...action.payload.walletLayer1};\n            state.status = STATUS.DONE\n        },\n        statusUnset: state => {\n            state.status = STATUS.UNSET\n        }\n    },\n});\nexport { walletLayer1Slice };\nexport const { updateWalletLayer1, getWalletLayer1Status,statusUnset,reset } = walletLayer1Slice.actions\n","import { createSlice, PayloadAction, Slice } from '@reduxjs/toolkit'\nimport { WalletLayer2Map, WalletLayer2States } from './interface';\nimport { STATUS } from '../constant';\n\n\nconst initialState:WalletLayer2States  = {\n    walletLayer2:undefined,\n    status:'UNSET',\n    errorMessage:null,\n}\nconst walletLayer2Slice:Slice = createSlice({\n    name: 'walletLayer2S',\n    initialState,\n    reducers: {\n        updateWalletLayer2(state, action:PayloadAction<string | undefined>) {\n            state.status = STATUS.PENDING\n        },\n        reset(state, action:PayloadAction<string | undefined>) {\n            state.walletLayer2 = undefined;\n            state.status = STATUS.UNSET;\n        },\n        getWalletLayer2Status(state, action: PayloadAction<{ walletLayer2:WalletLayer2Map<object> }>) {\n            // @ts-ignore\n            if (action.error) {\n                state.status =  STATUS.ERROR\n                // @ts-ignore\n                state.errorMessage = action.error\n            }\n            state.walletLayer2 = {...action.payload.walletLayer2};\n            state.status = STATUS.DONE\n        },\n        statusUnset: state => {\n            state.status = STATUS.UNSET\n        }\n    },\n});\nexport { walletLayer2Slice };\nexport const {  updateWalletLayer2,getWalletLayer2Status,statusUnset,reset } = walletLayer2Slice.actions\n","import { createSlice, PayloadAction, Slice } from '@reduxjs/toolkit'\nimport {  UserRewardsStates } from './interface';\nimport { STATUS } from '../constant';\n\nconst initialState:UserRewardsStates = {\n    userRewardsMap:undefined,\n    status:'UNSET',\n    errorMessage:null,\n    __timer__:-1,\n}\nconst userRewardsMapSlice:Slice<UserRewardsStates> = createSlice({\n    name: 'userRewardsMap',\n    initialState,\n    reducers: {\n        getUserRewards(state, action:PayloadAction<undefined>) {\n            state.status = STATUS.PENDING\n        },\n        getUserRewardsStatus(state, action: PayloadAction<UserRewardsStates>) {\n            // @ts-ignore\n            if (action.error) {\n                state.status =  STATUS.ERROR\n                // @ts-ignore\n                state.errorMessage = action.error\n            }\n            state.userRewardsMap = {...state.userRewardsMap,...action.payload.userRewardsMap};\n            if(action.payload.__timer__){\n                state.__timer__  =  action.payload.__timer__\n            }\n            state.status = STATUS.DONE\n        },\n        statusUnset: state => {\n            state.status = STATUS.UNSET\n        }\n\n    },\n});\nexport { userRewardsMapSlice };\nexport const { getUserRewards, getUserRewardsStatus, statusUnset } = userRewardsMapSlice.actions;","import { createSlice, PayloadAction, Slice } from '@reduxjs/toolkit'\nimport { AmmActivityMapStates } from './interface';\nimport { STATUS } from '../../constant';\n\n\nconst initialState:Required<AmmActivityMapStates>  = {\n    ammActivityMap:{},\n    status:'UNSET',\n    errorMessage:null,\n}\nconst ammActivityMapSlice:Slice = createSlice({\n    name: 'ammActivityMap',\n    initialState,\n    reducers: {\n        getAmmActivityMap(state, action:PayloadAction<string | undefined>) {\n            state.status = STATUS.PENDING\n        },\n        getAmmActivityMapStatus(state, action: PayloadAction<AmmActivityMapStates>) {\n            // @ts-ignore\n            if (action.error) {\n                state.status =  STATUS.ERROR\n                // @ts-ignore\n                state.errorMessage = action.error\n            }\n            state.ammActivityMap = {...action.payload.ammActivityMap};\n            state.status = STATUS.DONE\n        },\n        statusUnset: state => {\n            state.status = STATUS.UNSET\n        }\n\n    },\n});\nexport { ammActivityMapSlice };\nexport const { getAmmActivityMap, getAmmActivityMapStatus, statusUnset } = ammActivityMapSlice.actions\n","import { createSlice, PayloadAction, Slice } from '@reduxjs/toolkit'\nimport { GetTokenMapParams, TokenMapStates } from './interface';\nimport { STATUS } from '../constant';\n\nconst initialState: TokenMapStates<object> = {\n    coinMap: {},\n    addressIndex: undefined,\n    tokenMap: undefined,\n    marketMap: undefined,\n    idIndex: undefined,\n    status: 'UNSET',\n    errorMessage: null,\n}\nconst tokenMapSlice: Slice<TokenMapStates<object>> = createSlice({\n    name: 'tokenMap',\n    initialState,\n    reducers: {\n        getTokenMap(state, action: PayloadAction<GetTokenMapParams<any>>) {\n            state.status = STATUS.PENDING\n        },\n        getTokenMapStatus(state, action: PayloadAction<TokenMapStates<object>>) {\n            // @ts-ignore      console.log(action.type)\n            if (action.error) {\n                state.status = STATUS.ERROR\n                // @ts-ignore\n                state.errorMessage = action.error\n            }\n\n            const {tokenMap, marketMap, addressIndex, idIndex, coinMap, marketArray, marketCoins} = action.payload;\n            if (tokenMap) { state.tokenMap = tokenMap }\n            if (marketMap) { state.marketMap = marketMap }\n            if (addressIndex) { state.addressIndex = addressIndex }\n            if (idIndex) { state.idIndex = idIndex }\n            if (coinMap) { state.coinMap = coinMap }\n            if (marketArray) { state.marketArray = marketArray }\n            if (marketCoins)  { state.marketCoins = marketCoins }\n            // if (tokenPairsMap) {state.tokenPairsMap = tokenPairsMap }\n            state.status = STATUS.DONE;\n        },\n        // getTokenPairMap(state, action: PayloadAction<{tokenPairs: TokenPairs }>) {\n        //     const {tokenPairs} = action.payload;\n        //     const tokenPairsMap =  Reflect.ownKeys(tokenPairs).reduce((prev,key)=>{\n        //         // @ts-ignore\n        //         return prev[key as string] =  tokenPairs[key as string].tokenList\n        //     }, {} )\n        //     if (tokenPairsMap) {state.tokenPairsMap = tokenPairsMap }\n        //     // state.status = STATUS.PENDING\n        // },\n        statusUnset: state => {\n            state.status = STATUS.UNSET\n        }\n\n    },\n});\nexport { tokenMapSlice };\nexport const {getTokenMap, getTokenMapStatus,getTokenPairMap, statusUnset} = tokenMapSlice.actions;","import { useDispatch, useSelector } from 'react-redux'\nimport { AmmActivityMapStates } from './interface';\nimport { ammActivityMapSlice } from './reducer';\n\nexport function useAmmActivityMap(): AmmActivityMapStates & {\n    updateAmmActivityMap:()=> void,\n    statusUnset:()=> void,\n} {\n    const ammActivityMap:AmmActivityMapStates = useSelector((state: any) => state.amm.ammActivityMap)\n    const dispatch = useDispatch();\n    const updateAmmActivityMap = () => {\n        dispatch(ammActivityMapSlice.actions.getAmmActivityMap(undefined))\n    }\n    const statusUnset = ()=>{\n        dispatch(ammActivityMapSlice.actions.statusUnset(undefined))\n    }\n    return {\n        ...ammActivityMap,\n        statusUnset,\n        updateAmmActivityMap\n    }\n\n}\n","import { useDispatch, useSelector } from 'react-redux'\nimport { systemSlice } from './reducer';\nimport { System, SystemStatus } from './interface';\n\nexport function useSystem(): SystemStatus & {\n    updateSystem:(system:Partial<System< {[key:string]:any}>>)=>void,\n    statusUnset:()=>void,\n} {\n    const system:SystemStatus = useSelector((state: any) => state.system)\n    const dispatch = useDispatch();\n    const updateSystem = (system:Partial<System<{[key:string]:any}>>) => {\n        dispatch(systemSlice.actions.updateSystem(system))\n    }\n    const statusUnset = ()=>{\n        dispatch(systemSlice.actions.statusUnset(undefined))\n    }\n    return {\n        ...system,\n        statusUnset,\n        updateSystem,\n    }\n\n}\n","export enum AccountStatus {\n    UNKNOWN = 'UNKNOWN',\n    UNCONNNECTED = 'UNCONNNECTED',\n    CONNECTED = 'CONNECTED',\n    NOACCOUNT = 'NOACCOUNT',\n    DEPOSITING = 'DEPOSITING',\n    DEPOSIT_TO_CONFIREM = 'DEPOSIT_TO_CONFIREM',\n    UNACTIVATED = 'UNACTIVATED',\n    ARPROVING = 'ARPROVING',\n    APPROV_TO_CONFIRM = 'APPROV_TO_CONFIRM',\n    LOCKED = 'LOCKED',\n    ACTIVATED = 'ACTIVATED',\n}\n\nexport enum StatusChangeEvent {\n    Reset = 'Reset',\n    Connecting = 'Connecting',\n    HasPubkey = 'HasPubkey',\n    HasNoPubkey = 'HasNoPubkey',\n    ErrorResponse = 'ErrorResponse',\n    FinishDeposit = 'FinishDeposit',\n    DepositConfirmed = 'DepositConfirmed',\n    IsSmartWallet = 'IsSmartWallet',\n    ApproveSubmit = 'ApproveSubmit',\n    ApproveConfirmed = 'ApproveConfirmed',\n    Unlock = 'Unlock',\n    Lock = 'Lock',\n}\n\nexport const AccountMachineSpec = (initialState: AccountStatus = AccountStatus.UNCONNNECTED) => \n{\n    return {\n        initialState: initialState,\n        states: {\n            UNCONNNECTED: {\n                Connecting: AccountStatus.CONNECTED,\n                Reset: AccountStatus.UNCONNNECTED,\n            },\n            CONNECTED: {\n                HasPubkey: AccountStatus.LOCKED,\n                HasNoPubkey: AccountStatus.UNACTIVATED,\n                ErrorResponse: AccountStatus.NOACCOUNT,\n                Reset: AccountStatus.UNCONNNECTED,\n            },\n            NOACCOUNT: {\n                ErrorResponse: AccountStatus.NOACCOUNT,\n                Reset: AccountStatus.UNCONNNECTED,\n            },\n            DEPOSITING: {\n                FinishDeposit: AccountStatus.DEPOSIT_TO_CONFIREM,\n                Reset: AccountStatus.UNCONNNECTED,\n            },\n            DEPOSIT_TO_CONFIREM: {\n                HasPubkey: AccountStatus.ACTIVATED,\n                HasNoPubkey: AccountStatus.DEPOSIT_TO_CONFIREM,\n                ErrorResponse: AccountStatus.DEPOSIT_TO_CONFIREM,\n                Reset: AccountStatus.UNCONNNECTED,\n            },\n            UNACTIVATED: {\n                IsSmartWallet: AccountStatus.ARPROVING,\n                Reset: AccountStatus.UNCONNNECTED,\n            },\n            ARPROVING: {\n                ApproveSubmit: AccountStatus.APPROV_TO_CONFIRM,\n                Reset: AccountStatus.UNCONNNECTED,\n            },\n            APPROV_TO_CONFIRM: {\n                ApproveConfirmed: AccountStatus.ACTIVATED,\n                Reset: AccountStatus.UNCONNNECTED,\n            },\n            LOCKED: {\n                Unlock: AccountStatus.ACTIVATED,\n                Reset: AccountStatus.UNCONNNECTED,\n            },\n            ACTIVATED: {\n                Lock: AccountStatus.LOCKED,\n                Reset: AccountStatus.UNCONNNECTED,\n            },\n        },\n    }\n}\n","import { Contract } from '@ethersproject/contracts'\nimport { getAddress } from '@ethersproject/address'\nimport { AddressZero } from '@ethersproject/constants'\nimport { BigNumber } from '@ethersproject/bignumber'\n\nimport { JsonRpcSigner, Web3Provider } from '@ethersproject/providers'\n\nimport { UnsupportedChainIdError } from '@web3-react/core'\n\nimport {\n  NoEthereumProviderError,\n  UserRejectedRequestError as UserRejectedRequestErrorInjected\n} from '@web3-react/injected-connector'\nimport { UserRejectedRequestError as UserRejectedRequestErrorWalletConnect } from '@web3-react/walletconnect-connector'\n\nimport { ChainId } from 'loopring-sdk'\n\nexport function getLibrary(provider: any): Web3Provider {\n  const library = new Web3Provider(provider)\n  library.pollingInterval = 10000\n  return library\n}\n\nexport function getErrorMessage(error: Error) {\n  if (error instanceof NoEthereumProviderError) {\n    return 'No Ethereum browser extension detected, install MetaMask on desktop or visit from a dApp browser on mobile.'\n  } else if (error instanceof UnsupportedChainIdError) {\n    return 'You\\'re connected to an unsupported network.'\n  } else if (\n    error instanceof UserRejectedRequestErrorInjected ||\n    error instanceof UserRejectedRequestErrorWalletConnect\n  ) {\n    return 'Please authorize this website to access your Ethereum account.'\n  } else {\n    console.error(error)\n    return 'An unknown error occurred. Check the console for more details.'\n  }\n}\n\nexport function transactionChecker(web3: any, address: string) {\n  const account = address.toLowerCase()\n\n  const subscription = web3.eth.subscribe('pendingTransactions', (err: any, res: any) => {\n    if (err) {\n      console.error(err)\n    }\n  })\n\n  return function watchTransactions() {\n    console.log('Watch Transactions...')\n    subscription.on('data', (txHash: any) => {\n      setTimeout(async () => {\n        try {\n          let tx = await web3.eth.getTransaction(txHash)\n          if (tx.to && tx.to.toLowerCase() === account) {\n            const value = web3.utils.fromWei(tx.value, 'ether')\n            if (value > 0) {\n              console.log('watchTransactions value:', value)\n            }\n          }\n        } catch (err) {\n          console.error(err)\n        }\n      }, 60 * 1000)\n    })\n  }\n}\n\n// returns the checksummed address if the address is valid, otherwise returns false\nexport function isAddress(value: any): string | false {\n  try {\n    return getAddress(value)\n  } catch {\n    return false\n  }\n}\n\nconst ETHERSCAN_PREFIXES: { [chainId in ChainId]: string } = {\n  1: '',\n  5: 'goerli.',\n}\n\nexport function getEtherscanLink(\n  chainId: ChainId,\n  data: string,\n  type: 'transaction' | 'token' | 'address' | 'block'\n): string {\n  const prefix = `https://${ETHERSCAN_PREFIXES[chainId] || ETHERSCAN_PREFIXES[1]}etherscan.io`\n\n  switch (type) {\n    case 'transaction': {\n      return `${prefix}/tx/${data}`\n    }\n    case 'token': {\n      return `${prefix}/token/${data}`\n    }\n    case 'block': {\n      return `${prefix}/block/${data}`\n    }\n    case 'address':\n    default: {\n      return `${prefix}/address/${data}`\n    }\n  }\n}\n\n// shorten the checksummed version of the input address to have 0x + 4 characters at start and end\nexport function shortenAddress(address: string, chars = 4): string {\n  const parsed = isAddress(address)\n  if (!parsed) {\n    throw Error(`Invalid 'address' parameter '${address}'.`)\n  }\n  return `${parsed.substring(0, chars + 2)}...${parsed.substring(42 - chars)}`\n}\n\n// add 10%\nexport function calculateGasMargin(value: BigNumber): BigNumber {\n  return value.mul(BigNumber.from(10000).add(BigNumber.from(1000))).div(BigNumber.from(10000))\n}\n\n// account is not optional\nexport function getSigner(library: Web3Provider, account: string): JsonRpcSigner {\n  return library.getSigner(account).connectUnchecked()\n}\n\n// account is optional\nexport function getProviderOrSigner(library: Web3Provider, account?: string): Web3Provider | JsonRpcSigner {\n  return account ? getSigner(library, account) : library\n}\n\n// account is optional\nexport function getContract(address: string, ABI: any, library: Web3Provider, account?: string): Contract {\n  if (!isAddress(address) || address === AddressZero) {\n    throw Error(`Invalid 'address' parameter '${address}'.`)\n  }\n\n  return new Contract(address, ABI, getProviderOrSigner(library, account) as any)\n}\n\nexport function escapeRegExp(string: string): string {\n  return string.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&') // $& means the whole matched string\n}\n\nexport async function isContract(web3: any, address: string) {\n  const code = await web3.eth.getCode(address)\n  return code && code.length > 2\n}\n\nexport function getShortAddr(address: string) {\n    if (!address || address === undefined || address === null || address.trim() === '') {\n        console.log('getShortAddr got empty!')\n        return undefined\n    }\n    const convertAddr = address.substr(0, 6) + '...' + address.substr(address.length - 4)\n    return convertAddr\n}\n","import { debounce } from 'lodash'\nimport React, { useEffect } from 'react'\nimport { UserStorage } from 'storage'\n\nimport { useCheckAccStatus, } from 'stores/account/hook'\n\nimport { \n  useUpdateChainId,\n  useUpdateExchangeInfo, \n  useUpdateExchangeMarkets, \n  useUpdateTokens, \n  useUpdateAmmPoolConf,\n  useUpdateAmmActivityRules,\n  useUpdateAmmPoolStats,\n} from 'stores/trading/hook'\n\nenum WindowEvent {\n  Click = 'click',\n  Scroll = 'scroll',\n  Mouseover = 'mouseover',\n}\n\nconst events = [WindowEvent.Click, WindowEvent.Scroll]\n\nconst forceReset = debounce(() => { UserStorage.checkTimeout(true) }, 100)\n\nexport const GlobalProvider = ({ children }: { children: React.ReactNode }) => {\n\n  useUpdateExchangeInfo()\n  useUpdateExchangeMarkets()\n  useUpdateTokens()\n  useUpdateAmmPoolConf()\n  useUpdateAmmActivityRules()\n  useUpdateAmmPoolStats()\n  useUpdateChainId()\n\n  useCheckAccStatus()\n\n  useEffect(() => {\n\n    events.forEach((event: string) => {\n      document.addEventListener(event, forceReset)\n    })\n\n    return () => {\n\n      events.forEach((event: string) => {\n        document.removeEventListener(event, forceReset)\n      })\n    }\n\n  }, [])\n\n  return (\n    <React.Fragment>\n      { children}\n    </React.Fragment>\n  )\n\n}\n","import React, { useState, useEffect } from 'react'\nimport styled from '@emotion/styled/macro'\nimport { useTranslation } from 'react-i18next'\n\nimport { useWeb3React } from '@web3-react/core'\n\nimport { network } from 'networks/web3_connectors'\n\nimport { useEagerConnect, useInactiveListener } from 'hooks/web3/useWeb3'\nimport { reset, setAccountStatus } from 'stores/account/reducer'\n\nimport { ChainId, NetworkContextName } from 'loopring-sdk'\n\n// import Loader from 'components/modals/Loader'\nimport { useDispatch } from 'react-redux'\nimport { AccountStatus } from 'state_machine/account_machine_spec'\n\nconst MessageWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  height: 20rem;\n`\n\nconst Message = styled.h2`\n  color: ${({ theme }) => theme.colorBase.error};\n`\n\nexport function Web3ReactManager({ children }: { children: JSX.Element }) {\n  const { t } = useTranslation()\n  const { active } = useWeb3React()\n  const { active: networkActive, error: networkError, activate: activateNetwork } = useWeb3React(NetworkContextName)\n\n  // try to eagerly connect to an injected provider, if it exists and has granted access already\n  const triedEager = useEagerConnect()\n\n  // after eagerly trying injected, if the network connect ever isn't active or in an error state, activate itd\n  useEffect(() => {\n    if (triedEager && !networkActive && !networkError && !active) {\n      activateNetwork(network)\n    }\n  }, [triedEager, networkActive, networkError, activateNetwork, active])\n\n  // when there's no account connected, react to logins (broadly speaking) on the injected provider, if it exists\n  \n  const dispatch = useDispatch()\n\n  const onReConnectInjected = () => {\n    console.log('onReConnectInjected')\n    dispatch(reset(undefined))\n    dispatch(setAccountStatus(AccountStatus.UNCONNNECTED))\n  }\n  \n  useInactiveListener(onReConnectInjected, !triedEager)\n\n  // handle delayed loader state\n  const [showLoader, setShowLoader] = useState(false)\n  useEffect(() => {\n    const timeout = setTimeout(() => {\n      setShowLoader(true)\n    }, 600)\n\n    return () => {\n      clearTimeout(timeout)\n    }\n  }, [])\n\n  // on page load, do nothing until we've tried to connect to the injected connector\n  if (!triedEager) {\n    return null\n  }\n\n  // if the account context isn't active, and there's an error on the network context, it's an irrecoverable error\n  if (!active && networkError) {\n    return (\n      <MessageWrapper>\n        <Message>{t('unknownError')}</Message>\n      </MessageWrapper>\n    )\n  }\n\n  // if neither context is active, spin\n  if (!active && !networkActive) {\n    return showLoader ? (\n      <MessageWrapper>\n        {/*<Loader />*/}\n      </MessageWrapper>\n    ) : null\n  }\n\n  return children\n}\n","import React from 'react'\n\nexport const DevWrapper = ({ children }: { children: React.ReactNode }) => {\n\n  return (\n    <React.Fragment>\n      {\n        process.env.NODE_ENV !== 'production' ? (\n          <>\n          {children}\n          </>\n        ) : null\n      }\n    </React.Fragment>\n  )\n\n}\n\n","export enum STATUS {\n    UNSET='UNSET',\n    PENDING='PENDING',\n    ERROR='ERROR',   // success failed timeout is Done\n    DONE='DONE',   // success failed timeout is Done\n}\n","import { useDispatch, useSelector } from 'react-redux'\nimport { tickerMapSlice } from './reducer';\nimport { TickerStates } from './interface';\nimport { CoinKey } from '@loopring-web/component-lib/src/static-resource';\n\nexport function useTicker(): TickerStates & {\n    updateTickers:(tickerKeys:Array<CoinKey<any>>)=>void,\n    updateTicker:(tickerKey:CoinKey<any>)=>void,\n    statusUnset:()=>void,\n} {\n    const tickerMap:TickerStates = useSelector((state: any) => state.tickerMap)\n    const dispatch = useDispatch();\n    const updateTicker = (tickerKey:CoinKey<any>) => {\n        dispatch(tickerMapSlice.actions.getTicker({tickerKey}))\n    }\n    const updateTickers = (tickerKeys:Array<CoinKey<any>>) => {\n        dispatch(tickerMapSlice.actions.getTickers({tickerKeys}))\n    }\n    const statusUnset = ()=>{\n        dispatch(tickerMapSlice.actions.statusUnset(undefined))\n    }\n    return {\n        ...tickerMap,\n        statusUnset,\n        updateTickers,\n        updateTicker,\n    }\n\n}\n","import { createAction } from '@reduxjs/toolkit'\n\n// fired once when the app reloads but before the app renders\n// allows any updates to be applied to store data loaded from localStorage\nexport const updateVersion = createAction<void>('global/updateVersion')\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit'\n\nconst now = () => new Date().getTime()\n\nexport interface SerializableTransactionReceipt {\n  to: string\n  from: string\n  contractAddress: string\n  transactionIndex: number\n  blockHash: string\n  transactionHash: string\n  blockNumber: number\n  status?: number\n}\n\nexport interface TransactionDetails {\n  hash: string\n  approval?: { tokenAddress: string; spender: string }\n  summary?: string\n  claim?: { recipient: string }\n  receipt?: SerializableTransactionReceipt\n  lastCheckedBlockNumber?: number\n  addedTime: number\n  confirmedTime?: number\n  from: string\n}\n\nexport interface TransactionState {\n  [chainId: number]: {\n    [txHash: string]: TransactionDetails\n  }\n}\n\nexport const initialState: TransactionState = {}\n\nconst transactionsSlice = createSlice({\n  name: 'transactions',\n  initialState,\n  reducers: {\n    reset(state) {\n      Object.assign(state, initialState)\n    },\n    addTransaction(state: TransactionState, action: PayloadAction<{\n      chainId: number, from: string,\n      hash: string, approval: any, summary: string, claim: any\n    }>) {\n      const { chainId, from, hash, approval, summary, claim} = action.payload\n      if (state[chainId]?.[hash]) {\n        throw Error('the existing TX can\\'t be added again')\n      }\n\n      const txs = state[chainId] ?? {}\n      txs[hash] = {\n        hash, \n        approval, \n        summary, \n        claim, \n        from,\n        addedTime: now(), \n      }\n      // state[chainId] = txs\n    },\n    clearAllTransactions(state: TransactionState, action: PayloadAction<number>) {\n      const chainId = action.payload\n      if (!state[chainId]) return\n      state[chainId] = {}\n    },\n    checkedTransaction(state: TransactionState, action: PayloadAction<{chainId: number,\n    hash: string, blockNumber: number}>) {\n      const { chainId, hash, blockNumber} = action.payload\n      const tx = state[chainId]?.[hash]\n      if (!tx) {\n        return\n      }\n      if (!tx.lastCheckedBlockNumber) {\n        tx.lastCheckedBlockNumber = blockNumber\n      } else {\n        tx.lastCheckedBlockNumber = Math.max(blockNumber, tx.lastCheckedBlockNumber)\n      }\n      // state[chainId][hash] = tx\n    },\n    finalizeTransaction(state: TransactionState, action: PayloadAction<{\n      hash: string, chainId: number, receipt: any\n    }>) {\n      const { chainId, hash, receipt } = action.payload\n      \n      const tx = state[chainId]?.[hash]\n      if (!tx) {\n        return\n      }\n      tx.receipt = receipt\n      tx.confirmedTime = now()\n    }\n  }\n}\n)\n\nexport const { reset, addTransaction, clearAllTransactions, checkedTransaction, finalizeTransaction, } = transactionsSlice.actions\nexport default transactionsSlice\n","import { createSlice, PayloadAction, Slice } from '@reduxjs/toolkit'\nimport {  AmmRecordStates } from './interface';\nimport { STATUS } from '../../constant';\n\nconst initialState:Required<AmmRecordStates>  = {\n    ammRecords:[],\n    status:'UNSET',\n    errorMessage:null,\n}\nconst ammRecordSlice:Slice = createSlice({\n    name: 'ammRecord',\n    initialState,\n    reducers: {\n        getAmmRecord(state, action:PayloadAction<string | undefined>) {\n            state.status = STATUS.PENDING\n        },\n        getAmmRecordStatus(state, action: PayloadAction<AmmRecordStates>) {\n            // @ts-ignore\n            if (action.error) {\n                state.status =  STATUS.ERROR\n                // @ts-ignore\n                state.errorMessage = action.error\n            }\n            state.ammRecords = {...action.payload.ammRecords};\n            state.status = STATUS.DONE\n        },\n        statusUnset: state => {\n            state.status = STATUS.UNSET\n        }\n    },\n});\nexport { ammRecordSlice };\nexport const { getAmmRecord, getAmmRecordStatus,statusUnset } = ammRecordSlice.actions\n","import { createSlice, PayloadAction, Slice } from '@reduxjs/toolkit'\nimport {  AmmTradesStates } from './interface';\nimport { STATUS } from '../../constant';\n\n\nconst initialState:Required<AmmTradesStates>  = {\n    ammTrades:[],\n    status:'UNSET',\n    errorMessage:null,\n}\nconst ammTradesSlice:Slice = createSlice({\n    name: 'ammTrades',\n    initialState,\n    reducers: {\n        getAmmTrades(state, action:PayloadAction<string | undefined>) {\n            state.status = STATUS.PENDING\n        },\n        getAmmTradesStatus(state, action: PayloadAction<AmmTradesStates>) {\n            // @ts-ignore\n            if (action.error) {\n                state.status =  STATUS.ERROR\n                // @ts-ignore\n                state.errorMessage = action.error\n            }\n            state.ammTrades = {...action.payload.ammTrades};\n            state.status = STATUS.DONE\n        },\n        statusUnset: state => {\n            state.status = STATUS.UNSET\n        }\n    },\n});\nexport { ammTradesSlice };\nexport const { getAmmTrades, getAmmTradesStatus, statusUnset } = ammTradesSlice.actions\n","import { all, takeLatest, call, put } from \"redux-saga/effects\"\nimport { getAmmActivityMap, getAmmActivityMapStatus } from './reducer'\nimport { LoopringAPI } from '../../apis/api';\nconst getAmmActivityMapApi = async () => {\n\n    if(LoopringAPI.ammpoolAPI){\n        const { groupByRuleTypeAndStatus } =  await LoopringAPI.ammpoolAPI.getAmmPoolActivityRules();\n        return  {data:groupByRuleTypeAndStatus}\n    }else{\n        return {data:undefined}\n    }\n\n}\n\nexport function* getPostsSaga() {\n    try {\n        //\n        const { data } = yield call(getAmmActivityMapApi);\n        yield put(getAmmActivityMapStatus({ammActivityMap:data}));\n    } catch (err) {\n        yield put(getAmmActivityMapStatus(err));\n    }\n}\n\nexport default function* ammActivityMapSaga() {\n    yield all([takeLatest(getAmmActivityMap, getPostsSaga)]);\n}\n","import { all, call, fork, put, takeLatest } from \"redux-saga/effects\";\nimport { getAmmMap, GetAmmMapParams, getAmmMapStatus, updateRealTimeAmmMap } from './reducer';\nimport { AmmDetail } from '@loopring-web/component-lib/src/static-resource';\nimport store from '../../index';\nimport { AmmPoolInfoV3, AmmPoolStat, TokenVolumeV3, } from \"loopring-sdk\";\nimport { ammpoolAPI } from \"stores/apis/api\";\nimport { PayloadAction } from '@reduxjs/toolkit';\nimport { AmmDetailStore } from './interface';\nimport { volumeToCount } from '../../../hooks/help/volumeToCount';\n\ntype AmmMap<R extends { [ key: string ]: any }> = { [ key: string ]: AmmDetail<R> } | {}  //key is AMM-XXX-XXX\nexport const setAmmState = ({ammPoolState, keyPair}: { ammPoolState: AmmPoolStat, keyPair: string }) => {\n    const {idIndex} = store.getState().tokenMap\n    // @ts-ignore\n    const [, coinA, coinB] = keyPair.match(/(\\w+)-(\\w+)/i);\n    const {forex} = store.getState().system;\n    if (idIndex && coinA && coinB) {\n\n        return {\n            amountDollar: parseFloat(ammPoolState.liquidityUSD),\n            amountYuan: (parseFloat(ammPoolState.liquidityUSD) / (forex ? forex : 6.5)),\n            totalLPToken: volumeToCount('LP-' + keyPair, ammPoolState.lpLiquidity),\n            totalA: volumeToCount(coinA, ammPoolState.liquidity[ 0 ]),//parseInt(ammPoolState.liquidity[ 0 ]),\n            totalB: volumeToCount(coinB, ammPoolState.liquidity[ 1 ]),//parseInt(ammPoolState.liquidity[ 1 ]),\n            rewardValue: ammPoolState.rewards[ 0 ] ? volumeToCount(idIndex[ ammPoolState.rewards[ 0 ].tokenId as number ], ammPoolState.rewards[ 0 ].volume) : undefined,\n            rewardToken: ammPoolState.rewards[ 0 ] ? idIndex[ ammPoolState.rewards[ 0 ].tokenId as number ] : undefined,\n            rewardValue2: ammPoolState.rewards[ 1 ] ? volumeToCount(idIndex[ ammPoolState.rewards[ 1 ].tokenId as number ], ammPoolState.rewards[ 1 ].volume) : undefined,\n            rewardToken2: ammPoolState.rewards[ 1 ] ? idIndex[ ammPoolState.rewards[ 1 ].tokenId as number ] : undefined,\n            feeA: volumeToCount(coinA, ammPoolState.fees[ 0 ]),//parseInt(ammPoolState.fees[ 0 ]),\n            feeB: volumeToCount(coinB, ammPoolState.fees[ 1 ]),//parseInt(ammPoolState.fees[ 1 ]),\n            tradeFloat: {\n                percent: '',\n                timeUnit: '24h',\n                // priceYuan: 100,\n                // priceDollar: 1.23123,\n                // floatTag: FloatTag.increase,\n                // reward: 12312,\n                APY: (parseInt(ammPoolState.apyBips) * 1.0 / 100)\n            },\n            APY: (parseInt(ammPoolState.apyBips) * 1.0 / 100)\n        }\n\n\n    }\n}\nconst getAmmMapApi = async <R extends { [ key: string ]: any }>({ammpools}: GetAmmMapParams) => {\n\n    let ammMap: AmmMap<R> = {}\n    const {ammPoolStats} = (await ammpoolAPI().getAmmPoolStats());\n\n    let {__timer__} = store.getState().amm.ammMap\n    __timer__ = (() => {\n        if (__timer__ && __timer__ !== -1) {\n            clearInterval(__timer__)\n        }\n        return setInterval(async () => {\n            let ammPoolStats: { [key in keyof R]: AmmPoolStat } = (await ammpoolAPI().getAmmPoolStats()).ammPoolStats as { [key in keyof R]: AmmPoolStat }\n            store.dispatch(updateRealTimeAmmMap({ammPoolStats}))\n        }, 900000)    //15*60*1000 //900000\n    })()\n    const {tokenMap: {coinMap, idIndex}} = store.getState();\n\n    // const forex = faitPrices.prices['USDC']\n\n\n    Reflect.ownKeys(ammpools).forEach(async (key) => {\n        const item: AmmPoolInfoV3 = ammpools[ key as string ]\n        if (item.market === key && item.tokens.pooled && idIndex) {\n\n            // const tokenA =  ; //getTokenInfoById(tokens.tokenIdMap, parseInt(item.tokens.pooled[0]))\n            // const tokenB =  ; // getTokenInfoById(tokens.tokenIdMap, parseInt(item.tokens.pooled[1]))\n            const coinA = idIndex[ item.tokens.pooled[ 0 ] as any ];\n            const coinB = idIndex[ item.tokens.pooled[ 1 ] as any ];\n            const dataItem: AmmDetailStore<R> = {\n                coinA: coinA,\n                coinB: coinB,\n                feeDollar: 100,  //TODO coinA price * feeA + price * feeB\n                feeYuan: 100, //TODO coinA price * feeA + price * feeB  /forex\n                isNew: Date.now() - (Number(item.createdAt)) > 14 * 86400 * 1000 ? false : true,//14*24*60*60*1000,\n                isActivity: item.status === 7 ? true : false,\n                address: item.address,\n                ...setAmmState({ammPoolState: ammPoolStats[ key ], keyPair: `${coinA}-${coinB}`})\n            } as AmmDetailStore<R>\n            // @ts-ignore\n            ammMap[ item.market ] = dataItem\n\n\n        }\n\n\n    })\n    return {ammMap, __timer__}\n}\n\n\nexport function* getPostsSaga({payload}: PayloadAction<GetAmmMapParams>) {\n    try {\n        const {ammpools} = payload;\n        const {ammMap, __timer__} = yield call(getAmmMapApi, {ammpools});\n        console.log('--- getPostsSaga:', ammMap)\n        yield put(getAmmMapStatus({ammMap, __timer__}));\n    } catch (err) {\n        yield put(getAmmMapStatus(err));\n    }\n}\n\nexport function* updateRealTimeSaga({payload}: any) {\n    try {\n        const {ammPoolStats} = payload;\n        let {ammMap}: { ammMap: AmmMap<object> } = store.getState().amm.ammMap;\n        if (ammPoolStats) {\n            //{ ammPoolStats?: { [ key: string ]: AmmPoolStat } }\n            Reflect.ownKeys(ammPoolStats).map((key) => {\n                const keyPair = (key as string).replace('AMM-', '')\n                // debugger\n                // @ts-ignore\n                ammMap[ key ] = {\n                    // @ts-ignore\n                    ...ammMap[ key ],\n                    ...setAmmState({ammPoolState: ammPoolStats[ key as string ], keyPair, })\n                }\n                return ammMap\n            })\n        }\n        yield put(getAmmMapStatus({ammMap}));\n    } catch (err) {\n        yield put(getAmmMapStatus(err));\n    }\n}\n\n\nexport function* ammMapInitSaga() {\n    yield all([takeLatest(getAmmMap, getPostsSaga)]);\n}\n\nexport function* ammMapRealTimeSaga() {\n    yield all([takeLatest(updateRealTimeAmmMap, updateRealTimeSaga)]);\n}\n\nexport const ammMapSaga = [\n    fork(ammMapInitSaga),\n    fork(ammMapRealTimeSaga),\n]\n\n","import { all, takeLatest, call, put } from \"redux-saga/effects\";\nimport { getAmmRecord, getAmmRecordStatus } from './reducer';\n\nconst getAmmRecordApi= ()=>new Promise((resolve)=>{ resolve({data:[\n        {side: 'Buy',\n            amount: {\n                sell:{ belong:'ETH', tradeValue: 0.1 },\n                buy:{ belong:'LRC', tradeValue: 123 }\n            },\n            time: Date.now(),\n            fee: 0.02,\n            amountLP:{\n                sell:{ belong:'ETH', tradeValue: 0.1 },\n                buy:{ belong:'LRC', tradeValue: 123 }\n            }\n        },{side: 'Buy',\n            amount: {\n                sell:{ belong:'ETH', tradeValue: 0.1 },\n                buy:{ belong:'LRC', tradeValue: 123 }\n            },\n            time: Date.now(),\n            fee: 0.02,\n            amountLP:{\n                sell:{ belong:'ETH', tradeValue: 0.1 },\n                buy:{ belong:'LRC', tradeValue: 123 }\n            }\n        }\n    ]})});\nexport function* getPostsSaga() {\n    try {\n        //\n        const { data } = yield call(getAmmRecordApi);\n        yield put(getAmmRecordStatus({ammRecords: data}));\n    } catch (err) {\n        yield put(getAmmRecordStatus(err));\n    }\n}\n\nexport default function* ammRecordSaga() {\n    yield all([takeLatest(getAmmRecord, getPostsSaga)]);\n}\n\n\n\n\n","import { all, takeLatest, call, put } from \"redux-saga/effects\";\nimport { getAmmTrades, getAmmTradesStatus } from './reducer';\n\nconst getAmmTradesApi = ()=>new Promise((resolve)=>{\n    //TODO: check is connect and active and assign wallet\n    //TODO: if not reject directory, any error happen will clean the\n    resolve([\n    {side: 'Buy',\n        amount: {\n            sell:{ belong:'ETH', tradeValue: 0.1 },\n            buy:{ belong:'LRC', tradeValue: 123 }\n        },\n        time: Date.now(),\n        fee: 0.02,\n        priceValue: 0.123,\n        priceToken: 'LRC'}\n    ,{side: 'Buy',\n        amount: {\n            sell:{ belong:'ETH', tradeValue: 0.1 },\n            buy:{ belong:'LRC', tradeValue: 123 }\n        },\n        time: Date.now(),\n        fee: 0.02,\n        priceValue: 0.123,\n        priceToken: 'LRC'}\n])});\nexport function* getPostsSaga() {\n    try {\n        //\n        const { data } = yield call(getAmmTradesApi);\n        const posts = data;\n        yield put(getAmmTradesStatus(posts));\n    } catch (err) {\n        yield put(getAmmTradesStatus(err));\n    }\n}\n\nexport default function* ammTradesSaga() {\n    yield all([takeLatest(getAmmTrades, getPostsSaga)]);\n}\n","import { combineReducers } from '@reduxjs/toolkit';\nimport { ammRecordSlice } from './AmmRecord';\nimport { ammTradesSlice, getAmmTrades } from './AmmTrades';\nimport { ammMapSlice } from './AmmMap';\nimport { ammActivityMapSlice } from './AmmActivityMap';\nimport ammActivityMapSaga from './AmmActivityMap/saga';\nimport { ammMapSaga } from './AmmMap/saga';\nimport ammRecordSaga from './AmmRecord/saga';\nimport ammTradesSaga from './AmmTrades/saga';\nimport { all, fork } from 'redux-saga/effects';\n// import tokenSaga from '../token/saga';\n// import walletSaga from '../wallet/saga';\n// export * from './AmmRecord';\n// export * from './AmmTrades';\n// export * from './AmmMap';\n// export * from './AmmActivityMap';\n\nexport const  ammReducer = combineReducers({\n    ammRecord: ammRecordSlice.reducer,\n    ammTrades: ammTradesSlice.reducer,\n    ammMap: ammMapSlice.reducer,\n    ammActivityMap:ammActivityMapSlice.reducer\n})\nexport const ammForks =  [\n    fork(ammActivityMapSaga),\n    ...ammMapSaga,\n    fork(ammRecordSaga),\n    fork(ammTradesSaga)\n]\n\n// export * from './interface'\n","import { all, call, fork, put, takeLatest } from \"redux-saga/effects\";\nimport { getTokenMap, getTokenMapStatus } from './reducer';\nimport { getIcon } from '../../utils/swap_calc_utils';\nimport { CoinInfo, CoinMap } from '@loopring-web/component-lib/static-resource';\nimport { AddressMap, GetTokenMapParams, IdMap } from './interface';\nimport { PayloadAction } from '@reduxjs/toolkit';\n\nconst getTokenMapApi = async <R extends { [ key: string ]: any }>({\n                                                                      tokensMap,\n                                                                      pairs,\n                                                                      marketArr,\n                                                                      tokenArr\n                                                                  }: GetTokenMapParams<R>) => {\n    let coinMap: CoinMap<any, CoinInfo<any>> = {};\n    let tokenMap:any = tokensMap;\n    let addressIndex: AddressMap = {};\n    let idIndex: IdMap = {};\n    Reflect.ownKeys(tokensMap).forEach((key) => {\n        if (!(key as string).startsWith('LP-')) {\n            coinMap[ key as string ] = {\n                icon: getIcon(key as string, tokensMap),\n                name: key as string,\n                simpleName: key,\n                description: '',\n                company: '',\n            }\n        }\n\n        if (pairs[ key as string ] && pairs[ key as string ].tokenList) {\n            // @ts-ignore\n            tokensMap[ key ].tradePairs = pairs[ key as string ].tokenList;\n        }\n        addressIndex = {\n            ...addressIndex,\n            // @ts-ignore\n            [ tokensMap[ key ].address ]: key as string\n        }\n        idIndex = {\n            ...idIndex,\n            // @ts-ignore\n            [ tokensMap[ key ].tokenId ]: key as string\n        }\n    })\n    return {data: {coinMap, addressIndex, idIndex, tokenMap, marketArray: marketArr, marketCoins: tokenArr}}\n};\n\nexport function* getPostsSaga<R extends { [ key: string ]: any }>({payload}: PayloadAction<GetTokenMapParams<R>>) {\n    try {\n        const {tokensMap, marketMap, pairs, marketArr,tokenArr} = payload\n        // @ts-ignore\n        const {data} = yield call(getTokenMapApi, {tokensMap, pairs, marketArr, tokenArr});\n\n        yield put(getTokenMapStatus({...data, marketMap}));\n    } catch (err) {\n        yield put(getTokenMapStatus(err));\n    }\n}\n\n\nexport function* tokenInitSaga() {\n    yield all([takeLatest(getTokenMap, getPostsSaga)]);\n}\n\n\nexport const tokenSaga = [\n    fork(tokenInitSaga),\n    // fork(tokenPairsSaga),\n]\n\n// export function* getPairsSaga({payload}:PayloadAction<{tokenPairs: TokenPairs }>) {\n//     try {\n//         const {tokenPairs} = payload;\n//         const tokenPairsMap =  Reflect.ownKeys(tokenPairs).reduce((prev,key)=>{\n//            // @ts-ignore\n//             return prev[key as string] =  tokenPairs[key as string].tokenList\n//         }, {} )\n//\n//         yield put(getTokenMapStatus({tokenPairsMap}));\n//     } catch (err) {\n//         yield put(getAmmMapStatus(err));\n//     }\n// }\n// export function* tokenPairsSaga() {\n//     yield all([takeLatest(getTokenPairMap, getPairsSaga)]);\n// }\n\n\n","import { all, call, fork, put, takeLatest } from \"redux-saga/effects\"\nimport { getTicker, getTickers, getTickerStatus } from './reducer'\nimport {\n    CoinKey,\n    CustomError,\n    ErrorMap,\n    FloatTag,\n    PairKey,\n    TradeFloat\n} from '@loopring-web/component-lib/src/static-resource'\n\n// import { asyncGetTradingInfo, getTradingInfo } from \"stores/trading/hook\"\nimport { TickerData, getTokenInfoById, toBig } from \"loopring-sdk\"\n\n// import { makeCoinInfo } from 'utils/swap_calc_utils'\nimport { exchangeAPI } from \"stores/apis/api\"\n\ntype TickerMap<R extends {[key:string]:any}> = {\n    [key in CoinKey<R>|PairKey<R>]?:TradeFloat & {\n    reward?:number,rewardToken?:string\n    }\n\n}\n\nconst demoTicker = [\n    ['ETH','2.4','24h','1234','3423525222','up'],\n    ['LRC','2.4','24h','1234','3423525222','up'],\n    ['DPR','2.4','24h','1234','3423525222','up'],\n    ['USDC','2.4','24h','1234','3423525222'],\n    ['USDT','2.4','24h','1234','3423525222','down'],\n    ['AMM-LRC-ETH','2.4','24h','1234','3423525222','up','23','1231','LRC'],\n    ['AMM-USDT-USDC','2.4','24h','1234','3423525222','up','23','1231','USDT'],\n    ['AMM-USDT-LRC','2.4','24h','1234','3423525222','up','23','1231'],\n    ['AMM-USDT-ETH','2.4','24h','1234','3423525222','up','23','1331'],\n    ['AMM-ETH-USDC','2.4','24h','1234','3423525222','up','12','233'],\n    ['AMM-ETH-USDT','2.4','24h','1234','3423525222','up','56','233'],\n\n]\n/*\nconst getTickersApi = async <R extends {[key:string]:any}>(list:Array<keyof R>)=>new Promise((resolve,reject)=>{\n\n    if(list.length>0){\n        const data:TickerMap<R> = {}; //= // {\n        list.map((tokenKey: keyof R) => {\n                const index = demoTicker.findIndex((item) => {\n                  return  item[ 0 ] === tokenKey\n                })\n                if (index > -1) {\n                    const ticker = demoTicker[index]\n                    data[tokenKey] = {\n                        percent: ticker[1],\n                        timeUnit: ticker[2].toString(),\n                        priceDollar: Number(ticker[3]),\n                        priceYuan:  Number(ticker[3]) * 6.3, //TODO get usdt to rmb price\n                        volume: Number(ticker[4]),\n                        floatTag: ticker[5].toString() === 'up'? FloatTag.increase:ticker[5].toString() === 'down'?FloatTag.decrease:FloatTag.none ,\n                        APY: 0,\n                        reward: ticker[7] ?  Number(ticker[7]) :undefined,\n                        rewardToken: ticker[8] ?  Number(ticker[8]) :undefined,\n                    } as TradeFloat\n                } else {\n                    throw new CustomError({...ErrorMap.GET_X_TOKEN_TICKER_ERROR, options: {token: tokenKey}});\n                    //reject(ErrorMap.GET_X_TOKEN_TICKER_ERROR)\n                }\n        })\n        resolve({data});\n    }else{\n       reject(ErrorMap.NO_TOKEN_KEY_LIST)\n    }\n\n});\n*/\nconst getTickersApi = async <R extends {[key:string]:any}>(list:Array<keyof R>)=> {\n\n    const data:TickerMap<R> = {}\n\n    const tickers = await exchangeAPI().getTicker({market: list.join(',')})\n\n    console.log('>>>tickMap:', tickers.tickMap)\n\n    //@ts-ignore\n    tickers.tickMap.forEach((item: TickerData, key: keyof R) => {\n        console.log('>>>base_token_volume:', item.base_token_volume)\n        data[key] = {\n            timeUnit: '24h',\n            priceDollar: 0,\n            priceYuan:  0,\n            volume: toBig(item.base_token_volume).toNumber(),\n            floatTag: item.close > item.open ? 'increase' : 'decrease' ,\n            APY: 0,\n            reward: 0,\n            rewardToken: '',\n        } as TradeFloat\n    })\n\n    return { data }\n}\n\nexport function* getPostsSaga({payload}:any) {\n    try {\n        // @ts-ignore\n        const { tickerKey,tickerKeys } = payload;\n        console.log('getPostsSaga tickerKey',tickerKey, tickerKeys)\n        if(tickerKey || (tickerKeys && tickerKeys.length)) {\n            const {data}  = yield call(getTickersApi,tickerKey?[tickerKey]:tickerKeys);\n            yield put(getTickerStatus({tickerMap:data}));\n\n        }else{\n            throw new CustomError(ErrorMap.NO_TOKEN_KEY_LIST);\n        }\n    } catch (err) {\n        yield put(getTickerStatus(err));\n    }\n}\n\nfunction* tickerSaga() {\n    yield all([takeLatest(getTicker, getPostsSaga)]);\n}\nfunction* tickersSaga() {\n    yield all([takeLatest(getTickers, getPostsSaga)]);\n}\n\nexport const tickerForks = [\n    fork(tickerSaga),\n    fork(tickersSaga),\n]\n ","import { all, call, fork, put, take, takeLatest } from \"redux-saga/effects\"\nimport { getSystemStatus, updateRealTimeObj, updateSystem } from './reducer'\nimport { ENV, NETWORKEXTEND } from \"./interface\"\nimport store from '../index';\nimport { reset } from '../account/reducer';\nimport { ChainId } from 'loopring-sdk';\nimport { exchangeAPI, LoopringAPI } from '../apis/api';\nimport { getAmmMap, updateRealTimeAmmMap } from '../Amm/AmmMap';\nimport { getTokenMap } from '../token';\nimport { CustomError, ErrorMap } from '@loopring-web/component-lib/src/static-resource';\nimport { getAmmActivityMap } from '../Amm/AmmActivityMap';\n\n\nconst initConfig = function* <R extends { [ key: string ]: any }>() {\n    store.dispatch(reset(undefined));\n    // const exchangeApi = exchangeAPI();\n    // const ammpoolApi = ammpoolAPI();\n    // if (LoopringAPI.exchangeAPI && LoopringAPI.ammpoolAPI ) {\n        const {tokenSymbolMap: tokensMap} = yield call(async ()=> await LoopringAPI.exchangeAPI?.getTokens())\n        const {ammpools} = yield call(async ()=>await LoopringAPI.ammpoolAPI?.getAmmPoolConf());\n        const {pairs,marketArr,tokenArr, markets}  = yield call(async ()=> LoopringAPI.exchangeAPI?.getMixMarkets());\n        store.dispatch(getTokenMap({tokensMap, marketMap: markets, pairs,marketArr,tokenArr}))\n        yield take('tokenMap/getTokenMapStatus');\n        store.dispatch(getAmmMap({ammpools}))\n        store.dispatch(getAmmActivityMap({ammpools}))\n       if(store.getState().tokenMap.status === 'ERROR'){\n\n    }\n    // }\n\n    // yield take('tokenMap/getTokenMapStatus');\n\n}\n\nconst getSystemsApi = async <R extends { [ key: string ]: any }>(chainId: any) => {\n    //TODO get some other reuqired id...... put into system\n    // const { chainId } = system\n    const env = window.location.hostname === 'localhost' ? ENV.DEV : ChainId.GORLI === chainId ? ENV.UAT : ENV.PROD\n    chainId = ChainId.GORLI === chainId ? ChainId.GORLI : ChainId.MAINNET === chainId ? ChainId.MAINNET : NETWORKEXTEND.NONETWORK\n    if (chainId === NETWORKEXTEND.NONETWORK) {\n        throw new CustomError(ErrorMap.NO_NETWORK_ERROR)\n    } else {\n        LoopringAPI.InitApi(chainId as ChainId);\n        if (LoopringAPI.exchangeAPI) {\n            const faitPrices = (await LoopringAPI.exchangeAPI.getFiatPrice({legal: 'CNY'})).fiatPrices\n            const gasPrice = (await exchangeAPI().getGasPrice()).gasPrice / 1e+9\n            const baseURL = ChainId.MAINNET === chainId ? 'https://api3.loopring.io' : 'https://uat2.loopring.io'\n            const forex = faitPrices[ 'USDT' ].price;\n            let {__timer__} = store.getState().system;\n            __timer__ = ((__timer__) => {\n                if (__timer__ && __timer__ !== -1) {\n                    clearInterval(__timer__);\n                }\n                return setInterval(async () => {\n                    const faitPrices = (await exchangeAPI().getFiatPrice({legal: 'CNY'})).fiatPrices\n                    const gasPrice = (await exchangeAPI().getGasPrice()).gasPrice / 1e+9\n                    const forex = faitPrices[ 'USDT' ]\n                    store.dispatch(updateRealTimeAmmMap(undefined))\n                    store.dispatch(updateRealTimeObj({faitPrices, gasPrice, forex}))\n                }, 300000)   //\n\n            })(__timer__);\n            return {chainId, env, baseURL, faitPrices, gasPrice, forex, __timer__}\n        }\n    }\n}\n\nexport function* getUpdateSystem({payload}: any) {\n    try {\n        // @ts-ignore\n        const {chainId} = payload;\n        const {env, baseURL, faitPrices, gasPrice, forex, __timer__} = yield call(getSystemsApi, chainId);\n\n        yield put(getSystemStatus({env, baseURL, faitPrices, gasPrice, forex, __timer__}));\n        yield call(initConfig)\n        //TODO check wallect store\n    } catch (err) {\n        yield put(getSystemStatus(err));\n    }\n}\n\nfunction* systemSaga() {\n    yield all([takeLatest(updateSystem, getUpdateSystem)]);\n}\n\nfunction* initConfigSaga() {\n    //yield all([takeLatest(initConfig, getUpdateSystem)]);\n}\n\n\nexport const systemForks = [\n    fork(systemSaga),\n    //   fork(initConfig),\n]\n","import { all, call, fork, put, takeLatest } from \"redux-saga/effects\";\nimport {  getWalletLayer1Status, updateWalletLayer1 } from './reducer';\nimport { CoinKey, PairKey, WalletCoin } from '@loopring-web/component-lib/src/static-resource';\nimport { exchangeAPI } from '../apis/api';\nimport store from '../index';\nimport { fromWEI } from '../../utils/swap_calc_utils';\n\ntype WalletLayer1Map<R extends {[key:string]:any}> = {\n    [key in CoinKey<R>|PairKey<R>]?:WalletCoin<R>\n}\n\nconst getWalletLayer1Balance = async <R extends {[key:string]:any}>()=> {\n    //TODO: check is connect and active and assign walletLayer1\n    //TODO: if not reject directory, any error happen will clean the\n    // await sdk\n    const exchangeApi = exchangeAPI();\n    const {accAddr,accountId} = store.getState().account;\n    const {tokenMap,marketCoins} = store.getState().tokenMap;\n    // @ts-ignore\n    const {tokenBalances} =  await exchangeApi.getTokenBalances({owner:accAddr,token: marketCoins.join()},tokenMap)\n    let walletLayer1;\n\n    if(tokenBalances) {\n        walletLayer1 = Reflect.ownKeys(tokenBalances).reduce((prev,item)=>{\n            return   {...prev, [ item ]:{\n                    belong: item,\n                    count: fromWEI(tokenMap, item, tokenBalances[item as string]),\n                }\n            }\n        },{} as WalletLayer1Map<R>)\n    }\n    return {walletLayer1}\n};\n\nexport function* getPostsSaga() {\n    try {\n        //\n        const {walletLayer1} = yield call(getWalletLayer1Balance);\n        yield put(getWalletLayer1Status({walletLayer1}));\n    } catch (err) {\n        yield put(getWalletLayer1Status(err));\n    }\n}\n\nexport function* walletLayer1Saga() {\n    yield all([takeLatest(updateWalletLayer1, getPostsSaga)]);\n}\n\nexport const walletLayer1Fork = [\n    fork(walletLayer1Saga),\n    // fork(tokenPairsSaga),\n]\n\n","import { all, call, fork, put, takeLatest } from \"redux-saga/effects\";\nimport { getWalletLayer2Status, updateWalletLayer2 } from './reducer';\nimport { CoinKey, PairKey, WalletCoin } from '@loopring-web/component-lib/src/static-resource';\nimport {  userAPI } from '../apis/api';\nimport store from '../index';\n\ntype WalletLayer2Map<R extends {[key:string]:any}> = {\n    [key in CoinKey<R>|PairKey<R>]?:WalletCoin<R>\n}\n\nconst getWalletLayer2Balance = async <R extends {[key:string]:any}>()=> {\n    //TODO: check is connect and active and assign walletLayer1\n    //TODO: if not reject directory, any error happen will clean the\n    // await sdk\n    // const exchangeApi = exchangeAPI();\n    const userApi = userAPI();\n    const {accountId,apiKey} = store.getState().account;\n    const {tokenMap,idIndex,marketCoins} = store.getState().tokenMap;\n    let walletLayer2;\n    if(apiKey && accountId){\n        // @ts-ignore\n        const {userBalances} =  await userApi.getUserBalances({accountId:accountId,tokens:''},apiKey)\n        if(userBalances) {\n            // tokenId: number;\n            // total: string;\n            // locked: string;\n            // pending: {\n            //     withdraw: string;\n            //     deposit: string;\n            // };\n            walletLayer2 = Reflect.ownKeys(userBalances).reduce((prev,item)=>{\n                // @ts-ignore\n                return   {...prev, [ idIndex[item] ]:userBalances[Number(item)]}\n            },{} as WalletLayer2Map<R>)\n        }\n    }\n\n    return {walletLayer2}\n};\nexport function* getPostsSaga() {\n    try {\n        //\n        const {walletLayer2} = yield call(getWalletLayer2Balance);\n        yield put(getWalletLayer2Status({walletLayer2}));\n    } catch (err) {\n        yield put(getWalletLayer2Status(err));\n    }\n}\n\nexport function* walletLayer2Saga() {\n    yield all([takeLatest(updateWalletLayer2, getPostsSaga)]);\n}\n\n\nexport const walletLayer2Fork = [\n    fork(walletLayer2Saga),\n    // fork(tokenPairsSaga),\n]\n\n","import { all, call, fork, put, takeLatest } from \"redux-saga/effects\"\nimport { getUserRewards, getUserRewardsStatus } from './reducer'\n\nimport store from '../index';\nimport { exchangeAPI, LoopringAPI } from '../apis/api';\nimport { updateRealTimeAmmMap } from '../Amm/AmmMap';\nimport { updateRealTimeObj } from '../system';\n\nconst getUserRewardsApi = async <R extends {[key:string]:any}>(list:Array<keyof R>)=> {\n\n    // const data:UserRewardsMap<R> = {}\n\n    // const userRewardss = await exchangeAPI().getUserRewards({market: list.join(',')})\n    const {accountId} = store.getState().account\n    let {__timer__} = store.getState().userRewardsMap;\n    // debugger\n    if(LoopringAPI.ammpoolAPI) {\n        __timer__ = ((__timer__) => {\n            if (__timer__ && __timer__ !== -1) {\n                clearInterval(__timer__);\n            }\n            return setTimeout(async () => {\n                store.dispatch(getUserRewards(undefined))\n            }, 300000 * 4)   //\n\n        })(__timer__);\n        return  LoopringAPI.ammpoolAPI.getAmmPoolUserRewards({owner:accountId}).then(({ammUserRewardMap}) => {\n            return {data:ammUserRewardMap,__timer__}\n        })\n\n\n    }else{\n        return  Promise.reject({data:undefined,__timer__})\n    }\n\n}\n\nexport function* getPostsSaga({payload}:any) {\n    try {\n        // @ts-ignore\n        // const { userRewardsKey,userRewardsKeys } = payload;\n        // console.log('getPostsSaga userRewardsKey',userRewardsKey, userRewardsKeys)\n        // if(userRewardsKey || (userRewardsKeys && userRewardsKeys.length)) {\n        const {data,__timer__}  = yield call(getUserRewardsApi);\n        yield put(getUserRewardsStatus({userRewardsMap:data,__timer__}));\n\n        // }else{\n        //     throw new CustomError(ErrorMap.NO_SDK);\n        // }\n    } catch (err) {\n        yield put(getUserRewardsStatus(err));\n    }\n}\n\nfunction* userRewardsSaga() {\n    yield all([takeLatest(getUserRewards, getPostsSaga)]);\n}\n\nexport const userRewardsForks = [\n    fork(userRewardsSaga),\n    // fork(userRewardssSaga),\n]\n ","import { all } from \"redux-saga/effects\"\n// import machine from \"../state_machine/fsm/machine\"\n// import { TRANSITION } from \"../state_machine/fsm/actionTypes\"\n// import { helloSaga } from \"./sagas\"\nimport { tokenSaga } from './token/saga';\nimport { ammForks } from './Amm';\nimport { tickerForks } from './ticker/saga';\nimport { systemForks } from './system/saga';\nimport { walletLayer1Fork } from './walletLayer1/saga';\nimport { walletLayer2Fork } from './walletLayer2/saga';\nimport { userRewardsForks } from './userRewards/saga';\n\n\n// https://css-tricks.com/finite-state-machines-with-react/\n// https://musing-rosalind-2ce8e7.netlify.com/?machine=%7B%22initial%22%3A%22initial%22%2C%22states%22%3A%7B%22initial%22%3A%7B%22on%22%3A%7B%22LOGIN%22%3A%22loggedIn%22%2C%22LOGOUT%22%3A%22loggedOut%22%7D%7D%2C%22loggedOut%22%3A%7B%22on%22%3A%7B%22SUBMIT%22%3A%22loading%22%7D%7D%2C%22loading%22%3A%7B%22on%22%3A%7B%22SUCCESS%22%3A%22loggedIn%22%2C%22FAIL%22%3A%22loggedOut%22%7D%7D%2C%22loggedIn%22%3A%7B%22onEntry%22%3A%5B%22SET_TOKEN%22%5D%2C%22onExit%22%3A%5B%22CLEAR_TOKEN%22%5D%2C%22on%22%3A%7B%22LOGOUT%22%3A%22loggedOut%22%7D%7D%7D%7D\n\n// function* machineHandler(event: any, action: any) {\n//\n//   // @ts-ignore\n//   const currentAppState = yield select((state) => { state.account.status })\n//   const nextAppState = machine.transition(currentAppState, event)\n//\n//   yield put({\n//     type: \"APP_STATE/\" + nextAppState.value,\n//     payload: {\n//       value: nextAppState.value\n//     }\n//   });\n//\n//   console.debug(\"-> from \" + currentAppState + \" to \" + nextAppState);\n//\n//   for (let i = 0; i < nextAppState.actions.length; i++) {\n//     yield put({\n//       type: nextAppState.actions[i],\n//       payload: action\n//     });\n//   }\n// }\n\n// function* watchTransition() {\n//   yield takeEvery(TRANSITION, function*(action: any) {\n//     yield machineHandler(action.event, action.payload);\n//   });\n// }\n\nfunction* mySaga() {\n    yield all([\n        // fork(helloSaga),\n        // fork(watchTransition),\n        ...tokenSaga,\n        ...walletLayer1Fork,\n        ...walletLayer2Fork,\n        ...systemForks,\n        ...ammForks,\n        ...tickerForks,\n        ...userRewardsForks,\n\n    ]);\n}\n\nexport default mySaga;\n","import { createSlice, PayloadAction, Slice } from '@reduxjs/toolkit'\nimport { STATUS } from '../constant';\nimport { StateBase } from '../interface';\nimport { SystemStatus } from '../system';\n\nconst initialState: StateBase & {socket: { [ key: string]:string }} = {\n  socket: {},\n  status: 'UNSET',\n  errorMessage: null,\n}\nconst socketSlice: Slice<StateBase & {socket: { [ key: string]:string }}> = createSlice({\n  name: 'socket',\n  initialState,\n  reducers: {\n    socketStart(state, action: PayloadAction<{socket: { [ key: string]:string }}>) {\n      state.status = STATUS.PENDING\n      state.socket =    action.payload.socket\n    },\n    getSystemStatus(state, action: PayloadAction<{socket: { [ key: string]:string }}>) {\n\n      // @ts-ignore\n      if (action.error) {\n        state.status = STATUS.ERROR\n        // @ts-ignore\n        state.errorMessage = action.error\n      }\n      // state.socket = action.payload.socket\n      state.status = STATUS.DONE\n    },\n\n    statusUnset: state => {\n      state.status = STATUS.UNSET\n    }\n\n  },\n});\nexport { socketSlice };\nexport const {socketStart, getSocketStatus , statusUnset} = socketSlice.actions;\n","import { configureStore, combineReducers, getDefaultMiddleware } from '@reduxjs/toolkit'\n\nimport { useDispatch } from 'react-redux'\nimport { save, load } from 'redux-localstorage-simple'\n\nimport createSagaMiddleware from 'redux-saga'\n\n// We'll use redux-logger just as an example of adding another middleware\nimport logger from 'redux-logger'\n\n// And use redux-batch as an example of adding enhancers\nimport { reduxBatch } from '@manaflair/redux-batch'\nimport { updateVersion } from './global/actions'\n\nimport accountSlice from './account/reducer'\nimport tradingSlice from './trading/reducer'\nimport transactionlice from './transactions/reducer'\n\n\nimport { modalsSlice, setLanguage, settingsSlice } from '@loopring-web/component-lib';\nimport { ammReducer } from './Amm';\nimport { tokenMapSlice } from './token';\nimport mySaga from './rootSaga';\nimport { tickerMapSlice } from './ticker';\nimport { systemSlice } from './system';\nimport { walletLayer1Slice } from './walletLayer1';\nimport { walletLayer2Slice } from './walletLayer2';\nimport { socketSlice } from './socket';\nimport { userRewardsMapSlice } from './userRewards';\n\nconst sagaMiddleware = createSagaMiddleware()\n\nconst reducer = combineReducers({\n  account: accountSlice.reducer,\n  socket: socketSlice.reducer,\n  settings: settingsSlice.reducer,\n  system: systemSlice.reducer,\n  trading: tradingSlice.reducer,\n  transactions: transactionlice.reducer,\n  modals: modalsSlice.reducer,\n  userRewardsMap: userRewardsMapSlice.reducer,\n  amm:ammReducer,\n  tokenMap: tokenMapSlice.reducer,\n  walletLayer2: walletLayer2Slice.reducer,\n  walletLayer1: walletLayer1Slice.reducer,\n  tickerMap: tickerMapSlice.reducer\n})\n\n//\n\nconst PERSISTED_KEYS: string[] = ['settings']\n\nconst store = configureStore({\n  reducer,\n  // middleware: (getDefaultMiddleware) => getDefaultMiddleware().concat(logger),\n  middleware: [...getDefaultMiddleware({ thunk: false,serializableCheck:false, }), save({ states: PERSISTED_KEYS }), sagaMiddleware, ],\n  // middleware: [...getDefaultMiddleware({ thunk: true }), ],\n  devTools: process.env.NODE_ENV !== 'production',\n  enhancers: [reduxBatch],\n  preloadedState: load({ states: PERSISTED_KEYS })\n})\nstore.dispatch(updateVersion())\nstore.dispatch(setLanguage(store.getState().settings.language))\n// @ts-ignore\nsagaMiddleware.run(mySaga, store.dispatch);\n\n// The store has been created with these options:\n// - The slice reducers were automatically passed to combineReducers()\n// - redux-thunk and redux-logger were added as middleware\n// - The Redux DevTools Extension is disabled for production\n// - The middleware, batch, and devtools enhancers were composed together\n\nexport type AppDispatch = typeof store.dispatch\nexport const useAppDispatch = () => useDispatch<AppDispatch>()\n\nexport type RootState = ReturnType<typeof reducer>\n\nexport default store\n","import { Trans, useTranslation } from 'react-i18next';\nimport { Box, Container, Link, Typography } from '@material-ui/core';\nimport styled from '@emotion/styled';\nimport { ErrorObject } from '@loopring-web/component-lib/src/static-resource';\nimport { getContactInfo } from '../../utils/dt_tools';\n\nconst StyleBox = styled(Box)`\n  background-image: url('./static/images/error_bg.png');\n  background-repeat: no-repeat;\n  background-size: contain;\n  background-position: bottom;\n  white-space: pre-wrap;\n  //h2{\n  //  position: relative;\n  //}\n` as typeof Box\n\nexport const ErrorPage = ({messageKey}: ErrorObject) => {\n    // const {messageKey}: { id?:string,messageKey:string } = {messageKey: 'errorMessageTokenMapIsEmpty'};\n    //TODO: checkRouter\n    const {t} = useTranslation('error');\n    const message = `labelConnectUs`;\n    return <>\n        <Container>\n            {/*style={{height: '100%' }}*/}\n            <StyleBox flex={1} display={'flex'} alignItems={'flex-start'} justifyContent={'center'}\n                      flexDirection={'column'} marginTop={4} height={680} maxWidth={1200}>\n                {/*<StyleBox>*/}\n                <Box textAlign={'center'} position={'relative'} left={128} top={-64}>\n                    <Typography component={'h2'} variant={'h2'}>\n                        {t(messageKey)}\n                    </Typography>\n                    <Typography marginY={2} component={'p'} variant={'body1'} color={'textSecondary'}>\n                        <Trans i18nKey={message}>\n                            If you believe this is indeed a bug, please <Link\n                            component={'a'}\n                            onClick={(e) => {\n                                window.location.href = getContactInfo();\n                                e.preventDefault();\n                            }}\n                        >contact us</Link> <br/> We would appreciate your feedback\n\n                        </Trans>\n                        {/*{t(message)}*/}\n                        {/*{t(messageKey)}*/}\n                    </Typography>\n                </Box>\n                {/*</StyleBox>*/}\n            </StyleBox>\n        </Container>\n\n        {/*<Footer></Footer>*/}\n    </>\n}\n","// import { i18nInstance as i18n  } from \"@loopring-web/component-lib/static-resource\"\nimport i18n from 'i18next';\n\nconst covertLocale = (rawLocale: string = i18n.language) => {\n    return rawLocale.replace('_', '-')\n}\n\nexport function getLocaleDtFromTs(ts: number | string, locale: string = i18n.language) {\n    if (typeof(ts) === 'string') {\n        ts = parseInt(ts)\n    }\n    const dt = new Date(ts).toLocaleString(covertLocale(locale))\n    return dt\n}\n\nexport function getLocaleDt(dt?: Date, locale: string = i18n.language) {\n    if (dt) {\n        return dt.toLocaleString(covertLocale(locale))\n    }\n    return ''\n}\n\nexport function getContactInfo(subject: string = 'report to loopring website', body: string ='Body Content') {\n    const email = process.env.CONTACT_US_EMAIL ?? 'contact@loopring.io'\n    return `mailto:${email}?subject=${subject}&body=${body}`\n}\n","import { AmmpoolAPI, ChainId, ExchangeAPI, UserAPI, WalletAPI, WsAPI } from \"loopring-sdk\"\nimport { getChainId } from 'stores/trading/hook'\n\nexport const walletAPI = () => {\n    const walletApi = new WalletAPI(getChainId() as ChainId)\n    return walletApi\n}\n\nexport const userAPI = () => {\n    const userApi = new UserAPI(getChainId() as ChainId)\n    return userApi\n}\n\nexport const exchangeAPI = () => {\n    const exchangeApi = new ExchangeAPI(getChainId() as ChainId)\n    return exchangeApi\n}\n\nexport const ammpoolAPI = () => {\n    const ammpoolApi = new AmmpoolAPI(getChainId() as ChainId)\n    return  ammpoolApi\n}\n\nexport const wsAPI = () => {\n    const wsApi = new WsAPI(getChainId() as ChainId)\n    return wsApi\n}\n\nexport class LoopringAPI {\n    \n    public static userApi: UserAPI | undefined = undefined\n    public static exchangeAPI: ExchangeAPI | undefined = undefined\n    public static ammpoolAPI: AmmpoolAPI | undefined = undefined\n    public static walletAPI: WalletAPI | undefined = undefined\n    public static wsAPI: WsAPI | undefined = undefined\n\n    public static InitApi = (chainId: ChainId) => {\n        LoopringAPI.userApi = new UserAPI(chainId) \n        LoopringAPI.exchangeAPI = new ExchangeAPI(chainId) \n        LoopringAPI.ammpoolAPI = new AmmpoolAPI(chainId) \n        LoopringAPI.walletAPI = new WalletAPI(chainId) \n        LoopringAPI.wsAPI = new WsAPI(chainId) \n    }\n\n}\n","import { WsAPI, ExchangeAPI, AmmpoolAPI, UserAPI, DEFAULT_TIMEOUT, } from 'loopring-sdk'\nimport store, { RootState } from 'stores'\nimport { useSelector } from 'react-redux'\n\nimport { useMemo } from 'react'\n\nfunction useApi(ApiClass: any, timeout = DEFAULT_TIMEOUT) {\n    // const chainId = store.getState().trading.chainId\n    // return new ApiClass(chainId, timeout)\n\n  const { chainId, } = useSelector((state: RootState) => state.trading)\n\n  const genApi = () => {\n      if (!chainId) {\n          return undefined\n      }\n\n      return new ApiClass(chainId, timeout)\n  }\n\n  const api = useMemo(genApi, [ApiClass, chainId, timeout])\n\n  return api\n}\n\nexport function useWsAPI() {\n    return useApi(WsAPI) as WsAPI\n}\n\nexport function useExchangeAPI() {\n    return useApi(ExchangeAPI) as ExchangeAPI\n}\n\nexport function useAmmpoolAPI() {\n    return useApi(AmmpoolAPI) as AmmpoolAPI\n}\n\nexport function useUserAPI() {\n    return useApi(UserAPI) as UserAPI\n}\n","import { useDeepCompareEffect } from \"react-use\"\n\nexport function useCustomDCEffect(action: any, deps: any[] | undefined | null) {\n    useDeepCompareEffect(action, [deps || {}])\n}\n","import React  from 'react';\nimport detectEthereumProvider from '@metamask/detect-provider';\nimport { useCustomDCEffect } from 'hooks/common/useCustomDCEffect';\nimport { useSystem } from './stores/system';\nimport { ChainId } from 'loopring-sdk';\nimport { useAmmMap } from './stores/Amm/AmmMap';\nimport { STATUS } from './stores/constant';\nimport { useTokenMap } from './stores/token';\n\n\n/**\n * @description call it when bootstrap the page or change the network\n */\nexport function useInit(){\n    const [state,setState] = React.useState<keyof typeof STATUS>('PENDING')\n    const systemState = useSystem();\n    const tokenState = useTokenMap();\n    const ammMapState = useAmmMap();\n\n    useCustomDCEffect(async() => {\n\n        const handleChainChanged = (chainId: any) => {\n    \n            // const network = chainId == ChainId.GORLI ? NETWORK.Goerli : NETWORK.MAIN\n             console.log('handleChainChanged chainId: ', chainId)\n             systemState.updateSystem({ chainId })\n             window.location.reload();\n        }\n\n        const provider: any = await detectEthereumProvider()\n        if (provider) {\n            const chainId = Number(await provider.request({ method: 'eth_chainId' }))\n    \n            provider.on('chainChanged', ()=>{handleChainChanged(chainId)} )\n            // @ts-ignore\n            systemState.updateSystem({ chainId  })\n           //handleChainChanged(chainId)\n            \n        } else {\n            systemState.updateSystem({chainId:ChainId.MAINNET})\n            console.log('web3 is not found')\n        }\n\n    }, [])\n\n    React.useEffect(() => {\n        switch (systemState.status) {\n            case \"ERROR\":\n                systemState.statusUnset();\n                setState('ERROR')\n                //TODO show error at button page show error  some retry dispat again\n                break;\n            case \"DONE\":\n                systemState.statusUnset();\n                //TODO do some static information update\n                //tokenState.updateTokenMap();\n                break;\n            default:\n                break;\n\n        }\n    },[\n        systemState,\n        // systemState.status,\n        // systemState.statusUnset,\n        //tokenState.updateTokenMap\n    ]);\n    React.useEffect(() => {\n        if(ammMapState.status ===\"ERROR\" || tokenState.status === \"ERROR\"){\n            //TODO: solve error\n            ammMapState.statusUnset();\n            tokenState.statusUnset();\n            setState('ERROR');\n        }else if(ammMapState.status ===\"DONE\" && tokenState.status === \"DONE\"){\n            ammMapState.statusUnset();\n            tokenState.statusUnset()\n            setState('DONE');\n        }\n    },[ammMapState,tokenState])\n\n    // React.useEffect(()=>{\n    //\n    // },[])\n\n\n\n    return {\n        state,\n    }\n\n}\n","export enum Theme {\n    dark = 'dark',\n    light = 'light',\n}\n\nexport enum LangType {\n    en = 'en_US',\n    cn = 'zh_CN',\n}\n\nexport enum SystemStatus {\n    NORMAL,\n    ERROR,\n    UNKNOWN,\n}\n\nexport enum MODAL_TYPE {\n    UNKNOWN,\n    LOADING,\n    WALLET,\n}\n\nexport const REFRESH_RATE = 1000\n\nexport const REFRESH_RATE_SLOW = 15000\n","import { useCallback } from \"react\";\nimport { useDispatch } from \"react-redux\"\n\nimport {\n    setShowDeposit,\n    setShowResetAccount,\n    setShowTransfer,\n    setShowWithdraw,\n} from '@loopring-web/component-lib'\nimport { useTranslation } from \"react-i18next\";\nimport store from 'stores'\nimport { AccountStatus } from \"state_machine/account_machine_spec\";\n\nexport function useModals() {\n\n    const dispatch = useDispatch()\n\n    const { t } = useTranslation('common')\n\n    const ShowDeposit = useCallback((isShow: boolean)=>{\n        const isNoAccount = store.getState().account.status === AccountStatus.NOACCOUNT\n\n        console.log('isNoAccount: ', isNoAccount, t('depositTitleAndActive'))\n        const action = {\n            isShow,\n            props: {\n                title: isNoAccount ? t('depositTitleAndActive') : t('depositTitle'),\n                description: 'depositAndActiveDescription'\n            }\n        }\n        dispatch(setShowDeposit(action))\n    }, [dispatch, t])\n    const ShowTransfer = useCallback((isShow: boolean)=>dispatch(setShowTransfer({isShow})), [dispatch])\n    const ShowWithdraw = useCallback((isShow: boolean)=>dispatch(setShowWithdraw({isShow})), [dispatch])\n    const ShowResetAccount = useCallback((isShow: boolean)=>dispatch(setShowResetAccount({isShow})), [dispatch])\n\n    return {\n        ShowDeposit,\n        ShowTransfer,\n        ShowWithdraw,\n        ShowResetAccount,\n    }\n}","import { REFRESH_RATE } from \"defs/common_defs\"\n\nexport function PromiseJob(fetchPromise: any, setFunc: any, field?: string, prefix: any = 'PromiseJob') {\n\n    let mounted = true\n\n    const handler = () => {\n        if (fetchPromise()) {\n            fetchPromise().then((data: any) => {\n                if (mounted) {\n                    setFunc(field ? data[field] : data)\n                } else {\n                    console.log(prefix + ' unmounted!')\n                }\n            }).catch((reason: any) => {\n                console.error(reason)\n            })\n        }\n    }\n\n    const cleanUp = () => {\n        mounted = false\n    }\n\n    return {\n        handler,\n        cleanUp,\n    }\n\n}\n\n\nexport function PromiseJobInTimer(fetchPromise: any, setFunc: any, field?: string, prefix: any = 'PromiseJobInTimer', timeout: number = REFRESH_RATE) {\n\n    let mounted = true\n\n    const handler = () => {\n\n        mounted = true\n\n        const fetchFunc = () => {\n            if (fetchPromise()) {\n                fetchPromise().then((data: any) => {\n                    if (mounted) {\n                        setFunc(field ? data[field] : data)\n                    } else {\n                        console.log(prefix + ' unmounted!')\n                    }\n                }).catch((reason: any) => {\n                    console.error(reason)\n                })\n            }\n        }\n\n        fetchFunc()\n\n        const id = setInterval(fetchFunc, timeout)\n\n        return id\n    }\n\n    const cleanUp = (handler: any) => {\n        mounted = false\n        if (handler) clearInterval(handler)\n    }\n\n    return {\n        handler,\n        cleanUp,\n    }\n\n}\n","import { useEffect } from 'react'\nimport { PromiseJob, PromiseJobInTimer } from '../../utils/hook_tools'\nimport { REFRESH_RATE_SLOW } from \"defs/common_defs\"\n\nexport function usePromiseJob(fetchPromise: any, setFunc: any, field? :string, prefix: any = undefined, dependencies: any[] = []) {\n\n  const {\n    handler,\n    cleanUp,\n  } = PromiseJob(fetchPromise, setFunc, field, prefix)\n\n  useEffect(() => {\n    handler()\n    return () => cleanUp()\n  }, dependencies)\n\n}\n\nexport function usePromiseJobInTimer(fetchPromise: any, setFunc: any, field? :string, \n  prefix: any = undefined, dependencies: any[] = [], timeout: number= REFRESH_RATE_SLOW) {\n  const {\n    handler,\n    cleanUp,\n  } = PromiseJobInTimer(fetchPromise, setFunc, field, prefix, timeout)\n\n  useEffect(() => {\n\n    const id = handler()\n    return () => cleanUp(id)\n  }, dependencies)\n\n}\n","import { useState, } from 'react'\n\nimport { TradesData, TickerData, DepthData, \n  TokensResponse,\n  MarketsResponse, } from 'loopring-sdk'\n\nimport { usePromiseJob } from 'hooks/common/useCommon'\nimport { useExchangeAPI, } from './useApi'\n\nexport function useGetGas() {\n\n  const [gas, setGas] = useState<any>()\n\n  const api = useExchangeAPI()\n\n  const fetchData = () => {\n    if (!api) {\n      return undefined\n    }\n    return api.getGasPrice()\n  }\n\n  usePromiseJob(fetchData, setGas, undefined, 'useGetGas', [api])\n\n  return { gas }\n\n}\n\nexport function useGetMixMarkets() {\n\n  const [markets, setMarkets] = useState<MarketsResponse>()\n    const api = useExchangeAPI()\n\n    const fetchData = () => {\n      if (!api) {\n        return undefined\n      }\n      return api.getMixMarkets()\n    }\n  \n    usePromiseJob(fetchData, setMarkets, undefined, 'useGetMarkets', [api])\n    \n    return { markets }\n\n}\n\nexport function useGetMarkets() {\n\n  const [markets, setMarkets] = useState<MarketsResponse>()\n    const api = useExchangeAPI()\n\n    const fetchData = () => {\n      if (!api) {\n        return undefined\n      }\n      return api.getMarkets()\n    }\n  \n    usePromiseJob(fetchData, setMarkets, undefined, 'useGetMarkets', [api])\n    \n    return { markets }\n\n}\n\nexport function useGetExchangeInfo() {\n\n  const [exchangeInfo, setExchangeInfo] = useState<any>()\n    const api = useExchangeAPI()\n\n    const fetchData = () => {\n      if (!api) {\n        return undefined\n      }\n      return api.getExchangeInfo()\n    }\n  \n    usePromiseJob(fetchData, setExchangeInfo, 'exchangeInfo', 'useGetExchangeInfo', [api])\n    \n    return { exchangeInfo }\n\n}\n\nexport function useGetTokens() {\n\n  const [tokens, setTokens] = useState<TokensResponse>()\n    const api = useExchangeAPI()\n\n    const fetchData = () => {\n      if (!api) {\n        return undefined\n      }\n      return api.getTokens()\n    }\n  \n    usePromiseJob(fetchData, setTokens, undefined, 'useGetTokens', [api])\n    \n    return { tokens }\n\n}\n\n\nexport function useTrades(symbol: string) {\n\n  const [trades, setTrades] = useState<TradesData>()\n\n  const api = useExchangeAPI()\n\n  const fetchData = () => {\n    if (!api) {\n      return undefined\n    }\n    return api.getMarketTrades({\n      market: symbol\n    })\n  }\n\n  usePromiseJob(fetchData, setTrades, undefined, 'useTrades', [api, symbol])\n\n  return { trades, }\n\n}\n\nexport function useTickerMap(market: string) {\n\n  const [tickerMap, setTickerMap] = useState<{[key: string]: TickerData}>()\n\n  const api = useExchangeAPI()\n\n  const fetchData = () => {\n    if (!api) {\n      return undefined\n    }\n    return api.getTicker({\n      market\n    })\n  }\n\n  usePromiseJob(fetchData, setTickerMap, 'tickMap', 'useTickerMap', [api, market])\n\n  return { tickerMap, }\n\n}\n\nexport function useDepth(symbol: string) {\n\n  const api = useExchangeAPI()\n\n  const [depth, setDepth] = useState<DepthData>()\n\n    const fetchData = () => {\n      if (!api) {\n        return undefined\n      }\n      return api.getMixDepth({\n        market: symbol\n      })\n    }\n  \n    usePromiseJob(fetchData, setDepth, 'depth', 'useDepth', [api, symbol])\n\n  return { depth, }\n\n}\n","import React, { useCallback } from 'react'\n\nimport { useTranslation, WithTranslation, withTranslation } from 'react-i18next'\n\nimport {\n    gatewayList as DefaultGatewayList,\n    headerMenuData, HeaderMenuTabStatus,\n    headerToolBarData, HeadMenuTabKey,\n    ButtonComponentsMap, LanguageKeys,\n    WalletStatus, HideIcon,\n    GatewayItem, ViewIcon, ThemeKeys, LockIcon, UnLockIcon,\n} from '@loopring-web/component-lib/src/static-resource'\n\nimport { useAccount, useUnlock, useConnect, } from 'stores/account/hook'\n\nimport { getShortAddr } from 'utils/web3_tools'\n\nimport { AccountStatus } from 'state_machine/account_machine_spec'\n\nimport { useCustomDCEffect } from 'hooks/common/useCustomDCEffect'\n\nimport { Theme, } from 'defs/common_defs'\n\nimport { Button, SwapProps, useOpenModals, useSettings } from '@loopring-web/component-lib'\n\nimport store from 'stores'\n\nimport { ConnectorNames } from 'loopring-sdk'\nimport { IconButton, Typography } from '@material-ui/core';\nimport { AccountInfoProps } from '@loopring-web/component-lib/components/block';\nimport { useEtherscan } from 'hooks/web3/useWeb3'\n\nimport { useModals } from 'hooks/modal/useModals'\n\nimport {useState } from 'react'\nimport Web3 from 'web3'\n\nimport { AmmData, AmmInData, CoinInfo, CoinMap, IBData, TradeCalcData, WalletCoin, WalletMap, } from '@loopring-web/component-lib/static-resource'\nimport { AmmProps } from '@loopring-web/component-lib'\n\nimport { useExchangeAPI, useUserAPI } from 'hooks/exchange/useApi'\n\nimport { fromWEI, getIcon } from 'utils/swap_calc_utils'\nimport { useWeb3Account } from 'stores/account/hook'\nimport { useGetExchangeInfo, useGetTokens } from 'hooks/exchange/useExchangeAPI'\n\nimport * as contract from 'loopring-sdk'\n\nimport { Lv2Account } from 'defs/account_defs'\n\nimport {\n    ExchangeAPI,\n    dumpError400,\n    GetNextStorageIdRequest,\n    GetOffchainFeeAmtRequest,\n    OffchainFeeReqType,\n    OffChainWithdrawalRequestV3,\n    OriginTransferRequestV3,\n    TokenInfo,\n    VALID_UNTIL,\n} from 'loopring-sdk'\n\nimport { useGetUserBalances } from 'hooks/exchange/useUserAPI'\n\nimport {\n    DepositProps,\n    ResetProps,\n    SwitchData,\n    TradeBtnStatus,\n    TransferProps,\n    WithdrawProps,\n} from '@loopring-web/component-lib'\n\nimport { WithdrawType, WithdrawTypes } from '@loopring-web/component-lib/src/static-resource'\nimport { ButtonProps } from '@loopring-web/component-lib/components/basic-lib/index';\nimport { CoinType } from '@loopring-web/component-lib/static'\nimport { useDispatch } from 'react-redux'\n\nexport const useHeader = () => {\n    const { i18n,t } = useTranslation(['common','layout'])\n    const { setTheme,themeMode,language, setLanguage } = useSettings();\n    const { ShowDeposit } = useModals()\n    const { modals:{isShowAccountInfo,isShowConnect}, setShowConnect, setShowAccountInfo }  = useOpenModals()\n \n    const [openConnect, setOpenConnect] = React.useState(false)\n\n    const forceUpdate = React.useReducer((bool) => !bool, false)[1]\n    const { account } = useAccount()\n\n    const { lock, unlock } = useUnlock()\n\n    const { connect } = useConnect()\n\n    const { etherscanUrl } = useEtherscan()\n\n    const dispatch = useDispatch()\n\n    const gatewayList: GatewayItem[] = [\n        {\n            ...DefaultGatewayList[0],\n            handleSelect: () => {\n                console.log('try to connect to ', ConnectorNames.Injected)\n                connect(ConnectorNames.Injected, true)\n                setShowConnect({isShow: false})\n            }\n        },\n        /*\n        {\n            key: ConnectorNames.WalletConnect,\n            imgSrc: '',\n            handleSelect: () => {\n                connect(ConnectorNames.WalletConnect)\n                setOpen(false)\n            }\n        },\n        {\n            key: ConnectorNames.Ledger,\n            imgSrc: '',\n            handleSelect: () => {\n                connect(ConnectorNames.Ledger)\n                setOpen(false)\n            }\n        },\n        {\n            key: ConnectorNames.Trezor,\n            imgSrc: '',\n            handleSelect: () => {\n                connect(ConnectorNames.Trezor)\n                setOpen(false)\n            }\n        },\n        */\n    ]\n    // const [showAccountInfo, setShowAccountInfo] = React.useState(account?.accAddr ? true : false)\n    const [accountInfoProps, setAccountInfoProps] = React.useState<undefined|AccountInfoProps>(undefined)\n    //const theme: any = useTheme()\n\n    const onNotification = React.useCallback(async () => {\n        console.log('onNotification click')\n    }, [])\n\n    const onWalletBtnConnect = React.useCallback(async () => {\n        const acc = store.getState().account\n        console.log(`onWalletBtnConnect click: ${acc.status}`)\n\n        switch (acc.status) {\n            case AccountStatus.NOACCOUNT:\n                ShowDeposit(true)\n                break\n            case AccountStatus.UNCONNNECTED:\n                setShowConnect({isShow:true})\n                break\n            case AccountStatus.CONNECTED:\n            case AccountStatus.LOCKED:\n            case AccountStatus.ACTIVATED:\n                setShowAccountInfo({isShow:true})\n                break\n            default:\n                // console.log('setOpenConnect(true)')\n                // setOpenConnect(true)\n                break\n        }\n    }, [setShowConnect, lock, unlock, ShowDeposit, setShowAccountInfo])\n\n    const onThemeBtnClick = React.useCallback(async (themeMode:ThemeKeys) => {\n        if (themeMode === Theme.dark) {\n            setTheme(Theme.light)\n        } else {\n            setTheme(Theme.dark)\n        }\n    }, [setTheme])\n\n    const onLangBtnClick = (lang: LanguageKeys) => {\n        //i18n.changeLanguage(lang);\n        setLanguage(lang);\n    }\n\n\n    useCustomDCEffect(() => {\n\n\n        headerToolBarData[ButtonComponentsMap.WalletConnect] = {\n            ...headerToolBarData[ButtonComponentsMap.WalletConnect],\n            handleClick: onWalletBtnConnect,\n        }\n\n        // headerToolBarData[ButtonComponentsMap.Notification] = { ...headerToolBarData[ButtonComponentsMap.Theme], themeMode: theme.mode, handleClick: onNotification }\n        // headerToolBarData.update(ButtonComponentsMap.WalletConnect,value=>{\n        //   return {...value, handleClick:onWalletBtnConnect}});\n        headerToolBarData[ButtonComponentsMap.Theme] = { ...headerToolBarData[ButtonComponentsMap.Theme], themeMode, handleClick: onThemeBtnClick }\n        // headerToolBarData.update(ButtonComponentsMap.Theme,value=>{\n        //   return {...value, themeMode:theme.mode, handleClick:onThemeBtnClick}});\n\n        headerToolBarData[ButtonComponentsMap.Language] = { ...headerToolBarData[ButtonComponentsMap.Language], handleChange: onLangBtnClick }\n        // headerToolBarData.update(ButtonComponentsMap.Language,value=>{\n        //  return  {...value, language:i18n.language, handleClick:onThemeBtnClick}});\n    }, [themeMode, language, i18n, onWalletBtnConnect, onThemeBtnClick, onLangBtnClick, onNotification, t]);\n\n\n    const UnlockBtn = ({onClick}:{onClick:({...props}:any)=>void})=>{\n        return <Button className={'unlock'}  startIcon={<LockIcon fontSize={'large'}/>}\n                       onClick={(event)=>{\n                           onClick(event)\n                       }} variant={'outlined'} >\n            <Typography variant={'body2'} marginTop={1/2}>   {t('labelUnLock')} </Typography>\n        </Button>\n    }\n    const lockCallback = React.useCallback((event)=>{\n        lock(account)\n    } ,[account])\n    const unLockCallback = React.useCallback((event)=>{\n        unlock(account)\n    } ,[account])\n    const LockBtn = ({onClick}:{onClick:({...props}:any)=>void})=>{\n        return  <Button className={'lock'}  startIcon={<UnLockIcon fontSize={'large'}/>} \n        onClick={(event) => {\n            onClick(event)\n        } } variant={'outlined'} >\n            <Typography variant={'body2'} marginTop={1/2}>  {t('labelLock')} </Typography>\n        </Button>\n    }\n\n\n    useCustomDCEffect(() => {\n\n        if (!account) {\n            console.log('account'+account+'* exit')\n            setAccountInfoProps(undefined)\n            return\n        }\n\n        const { status } = account\n\n        const addr = getShortAddr(account?.accAddr)\n\n\n\n        // if((addr && accountInfoProps && accountInfoProps.address !== addr) || addr ){\n        //     //TODO getAccount detail info\n        //\n        // }else if(addr) {\n        //     setAccountInfoProps(undefined)\n        // }\n\n        const updateHeaderMenuWhenHasAccountInfo =  ({status}:{status:keyof  typeof AccountStatus})=>{\n            headerMenuData[HeadMenuTabKey.Layer2] = {\n                ...headerMenuData[HeadMenuTabKey.Layer2],\n                status: HeaderMenuTabStatus.default\n            }\n            let props;\n            if(status === AccountStatus.ACTIVATED) {\n                props = {\n                    addressShort: addr?addr:'',\n                    address: account?.accAddr,\n                    level: 'VIP 1',\n                    etherscanLink: etherscanUrl + account?.accAddr,\n                    //TODO: changed by account status\n                    mainBtn: <LockBtn onClick={(_event)=>{lockCallback(_event)}}/>,\n                    connectBy:''\n                }\n                setShowAccountInfo({isShow:false})\n            }else if(status === AccountStatus.LOCKED) {\n                props = {\n                    addressShort: addr?addr:'',\n                    address: account?.accAddr,\n                    level: 'VIP 1',\n                    etherscanLink: etherscanUrl + account?.accAddr,\n                    //TODO: changed by account status\n                    mainBtn: <UnlockBtn onClick={(_event)=>{unLockCallback(_event)}}/>,\n                    connectBy:''\n                }\n                setShowAccountInfo({isShow:true})\n            }else if(status === AccountStatus.UNACTIVATED\n                || status === AccountStatus.NOACCOUNT\n                || status === AccountStatus.DEPOSITING\n                || status === AccountStatus.DEPOSIT_TO_CONFIREM\n                || status === AccountStatus.ARPROVING\n                || status === AccountStatus.APPROV_TO_CONFIRM\n            )  {\n                props = {\n                    addressShort: addr?addr:'',\n                    address: account?.accAddr,\n                    //TODO: level\n                    level: 'VIP 1',\n                    etherscanLink: etherscanUrl + account?.accAddr,\n                    //TODO: changed by account status\n                    connectBy:''\n                }\n                setShowAccountInfo({isShow:false})\n            } else  {\n                setShowAccountInfo({isShow:false})\n            }\n\n\n            setAccountInfoProps(props)\n            // setShowAccountInfo(true);\n        }\n        switch (status) {\n            case AccountStatus.UNCONNNECTED:\n                headerToolBarData[ButtonComponentsMap.WalletConnect] = {\n                    ...headerToolBarData[ButtonComponentsMap.WalletConnect],\n                    label: 'Connect Wallet',\n                    status: WalletStatus.default\n                }\n                headerMenuData[HeadMenuTabKey.Layer2] = {\n                    //TODO:  HeaderMenuTabStatus.hidden\n                    ...headerMenuData[HeadMenuTabKey.Layer2], status: HeaderMenuTabStatus.hidden\n                }\n                setShowAccountInfo({isShow:false})\n                break\n            case AccountStatus.LOCKED:\n                headerToolBarData[ButtonComponentsMap.WalletConnect] = {\n                    ...headerToolBarData[ButtonComponentsMap.WalletConnect],\n                    label: addr,\n                    status: WalletStatus.connect\n                };\n\n                updateHeaderMenuWhenHasAccountInfo({status});\n                break\n            case AccountStatus.ACTIVATED:\n                headerToolBarData[ButtonComponentsMap.WalletConnect] = {\n                    ...headerToolBarData[ButtonComponentsMap.WalletConnect],\n                    label: addr,\n                    status: WalletStatus.unlock\n                }\n\n                updateHeaderMenuWhenHasAccountInfo({status});\n                break\n            case AccountStatus.UNACTIVATED:\n            case AccountStatus.NOACCOUNT:\n                headerToolBarData[ButtonComponentsMap.WalletConnect] = {\n                    ...headerToolBarData[ButtonComponentsMap.WalletConnect],\n                    // TODO got cache address if no show Connect Wallet\n                    label: addr,\n                    status: WalletStatus.noAccount\n                }\n\n                updateHeaderMenuWhenHasAccountInfo({status});\n                break\n            case AccountStatus.DEPOSITING:\n            case AccountStatus.DEPOSIT_TO_CONFIREM:\n            case AccountStatus.ARPROVING:\n            case AccountStatus.APPROV_TO_CONFIRM:\n                headerToolBarData[ButtonComponentsMap.WalletConnect] = {\n                    ...headerToolBarData[ButtonComponentsMap.WalletConnect],\n                    label: addr,\n                    status: WalletStatus.accountPending\n                }\n                updateHeaderMenuWhenHasAccountInfo({status});\n\n                break\n        }\n        forceUpdate()\n    }, [account, etherscanUrl, setAccountInfoProps])\n\n    return {\n        headerToolBarData,\n        headerMenuData,\n        gatewayList,\n        isShowConnect,\n        isShowAccountInfo,\n        setShowAccountInfo,\n        setShowConnect,\n        // open,\n        // setOpen,\n        // openConnect,\n        // setOpenConnect,\n        account,\n        accountInfoProps,\n\n    }\n\n}\n\nexport function useCoinMap(exchangeApi: ExchangeAPI, tokens: any) {\n\n    const [coinMap, setCoinMap] = useState<CoinMap<any, CoinInfo<any>>>({})\n\n    useCustomDCEffect(async () => {\n\n        if (!exchangeApi || !tokens) {\n            return\n        }\n\n        const keys = Reflect.ownKeys(tokens)\n\n        let coinMap: CoinMap<any, CoinInfo<any>> = {}\n\n        keys.forEach((key: any) => {\n\n            if (!(key as string).startsWith('LP-')) {\n                coinMap[ key ] = {\n                    icon: getIcon(key, tokens),\n                    name: key,\n                    simpleName: key,\n                    description: '',\n                    company: '',\n                }\n            }\n\n        })\n\n        setCoinMap(coinMap)\n\n    }, [exchangeApi, tokens])\n\n    return {\n        coinMap,\n    }\n\n}\n\nexport function useLv1WalletMap(exchangeApi: ExchangeAPI, account: Lv2Account, tokens: any) {\n\n    const [walletMap, setWalletMap] = useState<WalletMap<any, WalletCoin<any>>>({})\n\n    useCustomDCEffect(async () => {\n\n        if (!exchangeApi || !account || !account.accAddr || !tokens) {\n            return\n        }\n\n        let walletMap: WalletMap<any, WalletCoin<any>> = {}\n\n        const {tokenBalances} = await exchangeApi.getTokenBalances({\n            owner: account.accAddr, token: ''\n        }, tokens)\n\n        const keys = Reflect.ownKeys(tokenBalances)\n\n        keys.forEach((item: any) => {\n            const balance = tokenBalances[ item ]\n            walletMap[ item ] = {\n                belong: item,\n                count: fromWEI(tokens, item, balance) as any,\n            }\n        })\n\n        setWalletMap(walletMap)\n\n    }, [exchangeApi, account, tokens])\n\n    return {\n        walletMap,\n    }\n\n}\n\nexport function useLv2WalletMap(tokens: any) {\n\n    const {balances} = useGetUserBalances(tokens)\n\n    const [walletMap, setWalletMap] = useState<WalletMap<any, WalletCoin<any>>>({})\n\n    useCustomDCEffect(() => {\n        let walletMap: WalletMap<any, WalletCoin<any>> = {}\n        if (balances && balances.symbol) {\n            const keys = Reflect.ownKeys(balances.symbol)\n\n            keys.forEach((item: any) => {\n                const balance = balances.symbol[ item ]\n                walletMap[ item ] = {\n                    belong: item,\n                    count: fromWEI(tokens, item, balance) as any,\n                }\n            })\n        }\n\n        console.log('lv2:', walletMap)\n\n        setWalletMap(walletMap)\n    }, [balances, tokens])\n\n    return {\n        walletMap,\n    }\n\n}\n\nexport function useChargeFeeList(tokenSymbol: string | undefined, requestType: OffchainFeeReqType) {\n\n    const api = useUserAPI()\n\n    const {accountId, apiKey,} = useAccount()\n\n    const [chargeFeeList, setChargeFeeList] = useState<any>([])\n\n    useCustomDCEffect(async () => {\n\n        console.log('!!!!!!!!!useCustomDCEffect useChargeFeeList:', tokenSymbol, accountId)\n\n        if (!accountId || !tokenSymbol) {\n            return\n        }\n\n        let chargeFeeList: any[] = []\n\n        try {\n\n            const request: GetOffchainFeeAmtRequest = {\n                accountId,\n                tokenSymbol,\n                requestType,\n            }\n\n            const response = await api.getOffchainFeeAmt(request, apiKey)\n\n            if (response) {\n                response.raw_data.fees.forEach((item: any, index: number) => {\n                    chargeFeeList.push({belong: item.token, fee: item.fee})\n                })\n\n                setChargeFeeList(chargeFeeList)\n            }\n            console.log('response:', response)\n\n        } catch (reason) {\n            dumpError400(reason)\n        }\n\n\n        setChargeFeeList(chargeFeeList)\n\n    }, [accountId, apiKey, tokenSymbol])\n\n    return {\n        chargeFeeList,\n    }\n\n}\n\nexport function useModalProps() {\n\n    const {\n        ShowDeposit,\n        ShowTransfer,\n        ShowWithdraw,\n        ShowResetAccount,\n    } = useModals()\n\n    const {chainId, isConnected, connector,} = useWeb3Account()\n\n    const {exchangeInfo} = useGetExchangeInfo()\n\n    const {account, apiKey, accountId, eddsaKey,} = useAccount()\n\n    const {tokens: tokensAll} = useGetTokens()\n\n    const tokens = tokensAll?.tokenSymbolMap\n\n    const userApi = useUserAPI()\n\n    const exchangeApi = useExchangeAPI()\n\n    const {coinMap} = useCoinMap(exchangeApi, tokens)\n\n    const {walletMap: walletMap_Lv1} = useLv1WalletMap(exchangeApi, account, tokens)\n\n    const {walletMap: walletMap_Lv2} = useLv2WalletMap(tokens)\n\n    const deposit = useCallback(async (token: string, amt: any) => {\n\n        if (!tokens || !isConnected || !connector || !exchangeInfo?.exchangeAddress || !exchangeInfo?.depositAddress) {\n            console.log(`exchangeInfo:${exchangeInfo} deposit exit!!!!!`)\n            return\n        }\n\n        try {\n            const tokenInfo: TokenInfo = tokens[ token ]\n\n            const provider = await connector.getProvider()\n            const web3 = new Web3(provider as any)\n\n            let sendByMetaMask = account.connectName === ConnectorNames.Injected\n            sendByMetaMask = true\n\n            const gasPrice = (await exchangeApi.getGasPrice()).gasPrice / 1e+9\n            const gasLimit = 350000\n\n            const nonce = await contract.getNonce(web3, account.accAddr)\n\n            console.log('gasPrice:', gasPrice)\n            console.log('account.connectName:', account.connectName, ' tokenInfo:', tokenInfo)\n\n            const response = await contract.approveMax(web3, account.accAddr, tokenInfo.address,\n                exchangeInfo?.depositAddress, gasPrice, gasLimit, chainId, nonce, sendByMetaMask)\n\n            console.log('response:', response)\n\n            const fee = 0\n\n            const response2 = await contract.deposit(web3, account.accAddr,\n                exchangeInfo?.exchangeAddress, tokenInfo, amt, fee,\n                gasPrice, gasLimit, chainId, nonce + 1, sendByMetaMask)\n\n            console.log('response2:', response2)\n\n\n        } catch (reason) {\n            dumpError400(reason)\n        }\n\n    }, [chainId, isConnected, connector, account, exchangeInfo, tokens, exchangeApi])\n\n    const withdraw = useCallback(async (token: string, amt: any) => {\n\n        console.log('withdraw apiKey:', apiKey, ' exchangeInfo:', exchangeInfo, ' exchangeAddr:', exchangeInfo.exchangeAddress)\n\n        if (!account || !account.accountId || !account.accAddr\n            || !connector || !chainId || !apiKey || !exchangeInfo\n            || !exchangeInfo.exchangeAddress) {\n            console.log('return directly!!!!!', account, connector, chainId, apiKey, exchangeInfo)\n            return\n        }\n\n        amt = '5500000000000000000'\n\n        const fee = '5500000000000000000'\n\n        console.log('exchangeAddress:', exchangeInfo.exchangeAddress)\n\n        try {\n\n            const request: GetNextStorageIdRequest = {\n                accountId: account.accountId,\n                sellTokenId: 1\n            }\n\n            const storageId = await userApi.getNextStorageId(request, apiKey)\n\n            const request2: OffChainWithdrawalRequestV3 = {\n                exchange: exchangeInfo.exchangeAddress,\n                owner: account.accAddr,\n                to: account.accAddr,\n                accountId: account.accountId,\n                storageId: storageId.offchainId,\n                token: {\n                    tokenId: '1',\n                    volume: '100000000000000000000',\n                },\n                maxFee: {\n                    tokenId: '1',\n                    volume: '9400000000000000000',\n                },\n                extraData: '',\n                minGas: 0,\n                validUntil: VALID_UNTIL,\n            }\n\n            const provider = await connector.getProvider()\n            const web3 = new Web3(provider as any)\n\n            const response = await userApi.submitOffchainWithdraw(request2, web3, chainId, ConnectorNames.Injected,\n                account.eddsaKey, apiKey, false)\n\n            console.log(response)\n\n        } catch (reason) {\n            dumpError400(reason)\n        }\n\n    }, [apiKey, account, connector, exchangeInfo, chainId, userApi])\n\n    const transfer = useCallback(async (amt: number, payeeAddr: string = '0xb6AdaC3e924B4985Ad74646FEa3610f14cDFB79c') => {\n\n        if (!connector || !apiKey || !chainId || !accountId || !account?.accAddr) {\n            return\n        }\n\n        const request: GetNextStorageIdRequest = {\n            accountId,\n            sellTokenId: 1\n        }\n        const storageId = await userApi.getNextStorageId(request, apiKey)\n\n        console.log(`amt: ${amt} storageId:${JSON.stringify(storageId)}`)\n\n        try {\n\n            const provider = await connector.getProvider()\n            const web3 = new Web3(provider as any)\n\n            let walletType = account.connectName\n            walletType = ConnectorNames.Injected\n\n            const payeeAcc = await exchangeApi.getAccount({owner: payeeAddr})\n\n            let payeeId = 0\n            if (payeeAcc) {\n                payeeId = payeeAcc.accInfo.accountId\n            }\n\n            const request2: OriginTransferRequestV3 = {\n                exchange: exchangeInfo.exchangeAddress,\n                payerAddr: account.accAddr,\n                payerId: accountId,\n                payeeAddr,\n                payeeId,\n                storageId: storageId.offchainId,\n                token: {\n                    tokenId: '1',\n                    volume: '100000000000000000000',\n                },\n                maxFee: {\n                    tokenId: '1',\n                    volume: '9400000000000000000',\n                },\n                validUntil: VALID_UNTIL,\n            }\n\n            console.log(`request2:${JSON.stringify(request2)}`)\n\n            const response = await userApi.submitInternalTransfer(request2, web3, chainId, walletType,\n                eddsaKey, apiKey, false)\n\n            console.log(response)\n\n        } catch (reason) {\n            dumpError400(reason)\n        }\n\n    }, [apiKey, accountId, account, connector, exchangeInfo, chainId, eddsaKey, userApi, exchangeApi])\n\n    const [depositValue, setDepositValue] = useState<IBData<any>>({\n        belong: undefined,\n        tradeValue: 0,\n        balance: 0\n    } as IBData<unknown>)\n\n    // deposit\n\n    let depositProps: DepositProps<any, any> = {\n        tradeData: {belong: undefined},\n        coinMap: coinMap,\n        walletMap: walletMap_Lv1,\n        depositBtnStatus: TradeBtnStatus.AVAILABLE,\n        onDepositClick: (tradeData: any) => {\n            console.log('1. onDepositClick', depositValue)\n            if (depositValue && depositValue.belong) {\n                deposit(depositValue.belong.toString(), depositValue.tradeValue)\n            }\n            ShowDeposit(false)\n        },\n        handlePanelEvent: async (data: SwitchData<any>, switchType: 'Tomenu' | 'Tobutton') => {\n            return new Promise((res) => {\n                if (data?.tradeData?.belong) {\n                    if (depositValue !== data.tradeData) {\n                        setDepositValue(data.tradeData)\n                    }\n                    setTokenSymbol(data.tradeData.belong)\n                } else {\n                    setDepositValue({belong: undefined, tradeValue: 0, balance: 0} as IBData<unknown>)\n                }\n                res();\n            })\n        },\n    }\n\n    // withdraw\n    const [withdrawValue, setWithdrawValue] = useState<IBData<any>>({\n        belong: undefined,\n        tradeValue: 0,\n        balance: 0\n    } as IBData<unknown>);\n\n    const [tokenSymbol, setTokenSymbol] = useState<string>('')\n    const {chargeFeeList: withdrawalFeeList} = useChargeFeeList(tokenSymbol, OffchainFeeReqType.OFFCHAIN_WITHDRAWAL)\n\n    let withdrawProps: WithdrawProps<any, any> = {\n        tradeData: {belong: undefined},\n        coinMap: coinMap,\n        walletMap: walletMap_Lv2,\n        withdrawBtnStatus: TradeBtnStatus.AVAILABLE,\n        onWithdrawClick: (tradeData: any) => {\n            console.log('Swap button click', withdrawValue)\n            if (withdrawValue && withdrawValue.belong) {\n                withdraw(withdrawValue.belong.toString(), withdrawValue.tradeValue)\n            }\n            ShowWithdraw(false)\n        },\n\n        handlePanelEvent: async (data: SwitchData<any>, switchType: 'Tomenu' | 'Tobutton') => {\n            return new Promise((res: any) => {\n                if (data?.tradeData?.belong) {\n                    if (withdrawValue !== data.tradeData) {\n                        setWithdrawValue(data.tradeData)\n                    }\n                    setTokenSymbol(data.tradeData.belong)\n                } else {\n                    setWithdrawValue({belong: undefined, tradeValue: 0, balance: 0} as IBData<unknown>);\n                }\n                res();\n            })\n        },\n        withdrawType: WithdrawType.Fast,\n        withdrawTypes: WithdrawTypes,\n        chargeFeeToken: 'ETH',\n        chargeFeeTokenList: withdrawalFeeList,\n        handleOnAddressChange: (value: any) => {\n            console.log('handleOnAddressChange', value);\n        },\n        handleAddressError: (_value: any) => {\n            return {error: true, message: 'any error'}\n        }\n    }\n    // console.log(coinMap)\n    // transfer\n    const [transferValue, setTransferValue] = useState<IBData<any>>({\n        belong: undefined,\n        tradeValue: 0,\n        balance: 0\n    } as IBData<unknown>)\n\n    const [transferTokenSymbol, setTransferTokenSymbol] = useState<string>('')\n    const {chargeFeeList: transferFeeList} = useChargeFeeList(transferTokenSymbol, OffchainFeeReqType.TRANSFER)\n\n    let transferProps: TransferProps<any, any> = {\n        tradeData: {belong: undefined},\n        coinMap: coinMap,\n        walletMap: walletMap_Lv2,\n        transferBtnStatus: TradeBtnStatus.AVAILABLE,\n        onTransferClick: (tradeData: any) => {\n            console.log('onTransferClick:', transferValue);\n            if (transferValue && transferValue.belong) {\n                transfer(transferValue.tradeValue)\n            }\n\n            ShowTransfer(false)\n        },\n\n        handlePanelEvent: async (data: SwitchData<any>, switchType: 'Tomenu' | 'Tobutton') => {\n            return new Promise((res: any) => {\n                if (data?.tradeData?.belong) {\n                    if (transferValue !== data.tradeData) {\n                        setTransferValue(data.tradeData)\n                    }\n                    setTransferTokenSymbol(data.tradeData.belong)\n                } else {\n                    setTransferValue({belong: undefined, tradeValue: 0, balance: 0} as IBData<unknown>)\n                }\n                // else{\n                //     setTransferValue({ belong: undefined, amt: 0 })\n                // }\n\n                res();\n            })\n        },\n\n        chargeFeeToken: 'ETH',\n        chargeFeeTokenList: transferFeeList,\n        handleOnAddressChange: (value: any) => {\n            console.log('handleOnAddressChange', value);\n        },\n        handleAddressError: (_value: any) => {\n            return {error: true, message: 'any error'}\n        }\n    }\n\n    // reset\n    const [resetValue, setResetValue] = useState<IBData<any>>({\n        belong: undefined,\n        tradeValue: 0,\n        balance: 0\n    } as IBData<unknown>)\n\n\n    let resetProps: ResetProps<any, any> = {\n        tradeData: {belong: undefined},\n        coinMap: coinMap,\n        walletMap: walletMap_Lv2,\n        resetBtnStatus: TradeBtnStatus.AVAILABLE,\n        onResetClick: (tradeData: any) => {\n            console.log('onResetClick', resetValue)\n            if (resetValue && resetValue.belong) {\n            }\n\n            ShowResetAccount(false)\n        },\n        handlePanelEvent: async (data: SwitchData<any>, switchType: 'Tomenu' | 'Tobutton') => {\n            return new Promise((res) => {\n                if (data?.tradeData?.belong) {\n                    if (resetValue !== data.tradeData) {\n                        setResetValue(data.tradeData)\n                    }\n                } else {\n                    setResetValue({belong: undefined, tradeValue: 0, balance: 0} as IBData<unknown>)\n                }\n\n                res();\n            })\n        },\n        fee: {count: 234, price: 123}\n    }\n\n     const tradeCalcData: TradeCalcData<CoinType> = {\n        coinSell: 'ETH', //name\n        coinBuy: 'LRC',\n        BtoS: 0,\n        StoB: 0,\n        sellCoinInfoMap: coinMap,\n        buyCoinInfoMap: coinMap,\n        walletMap: {},\n        slippage: 0.5,\n        // slippageTolerance: [0.1, 0.5, 1, 'slippage:N'],\n        priceImpact: '12',\n        minimumReceived: '1%',\n        fee: '1%'\n    }\n     const ammCalcData: AmmInData<CoinType> = {\n        myCoinA: {belong:'ETH',balance:1000,tradeValue:0},\n        myCoinB: {belong:'LRC',balance:1000,tradeValue:0},\n        AtoB:50,\n        coinInfoMap: coinMap,\n        slippage: 0.5,\n        // slippageTolerance: [0.1, 0.5, 1, 'slippage:N'],\n        fee: '1%'\n    }\n\n\n    let swapProps: SwapProps<IBData<string>, string, any> = {\n        tradeData: undefined,\n        tradeCalcData,\n        onSwapClick: (tradeData) => {\n            console.log('Swap button click', tradeData);\n        },\n        handleSwapPanelEvent: async (data: any, switchType: any) => {\n            console.log(data, switchType)\n        },\n    };\n    let ammProps: AmmProps<AmmData<IBData<any>>, any, AmmInData<any>> = {\n        ammDepositData:{coinA: {belong: 'ETH',balance:0.3,tradeValue:0}, coinB:  {belong: 'LRC',balance:1000,tradeValue:0},slippage: '',},\n        ammWithdrawData:{coinA: {belong: 'ETH',balance:0.3,tradeValue:0}, coinB:  {belong: 'LRC',balance:1000,tradeValue:0},slippage: '',},\n        // tradeCalcData,\n        ammCalcData:ammCalcData,\n        handleDepositEvent: (data,type) => {\n            console.log('handleDepositEvent',data,type) ;\n        },\n        handleWithDrawEvent:  (data,type) => {\n            console.log('handleWithDrawEvent',data,type) ;\n        },\n        onAmmWithdrawClick: (data)=>{\n            console.log('onAmmWithdrawClick',data) ;\n        },\n        onAmmDepositClick: (data)=>{\n            console.log('onAmmDepositClick',data) ;\n        }\n    }\n\n    return {\n        depositProps, withdrawProps, transferProps, resetProps, ammProps, swapProps,\n    }\n}\n","import { useState, useCallback } from 'react'\n\nimport { useAccount } from 'stores/account/hook'\n\nimport { OrdersData, dumpError400, } from 'loopring-sdk'\n\nimport { REFRESH_RATE } from 'defs/common_defs'\n\nimport { useUserAPI } from './useApi'\n\nimport { getToken, fromWEI } from 'utils/swap_calc_utils'\n\nimport * as fm from 'loopring-sdk'\n\nimport { useCustomDCEffect } from 'hooks/common/useCustomDCEffect'\n\nexport function useOrders() {\n\n  const acc = useAccount().account\n\n  const api = useUserAPI()\n\n  const [orders, setOrders] = useState<OrdersData>()\n\n  useCustomDCEffect(() => {\n\n    if (!acc || !api) {\n      return\n    }\n\n    let mounted = true\n\n    const exit = (id: any) => {\n      mounted = false\n      clearInterval(id)\n    }\n\n    if (acc && acc.accountId > 0) {\n\n      const id: any = setInterval(async () => {\n        try {\n          const { raw_data } = (await api.getOrders({\n            accountId: acc.accountId\n          }, acc.apiKey))\n          if (mounted) {\n            setOrders(raw_data)\n          }\n        } catch (err) {\n          return exit(id)\n        }\n      }, REFRESH_RATE)\n\n      return exit(id)\n\n    }\n  }, [acc, api])\n\n  return {\n    orders,\n  }\n\n}\n\nexport function useGetUserBalancesByToken(token: any) {\n\n  const api = useUserAPI()\n\n  //const [balance, setBalance] = useState<any>({total: '0', locked: '0', availableInWei: '0'})\n\n  const [balance, setBalance] = useState<any>('0')\n\n  const { apiKey, accountId } = useAccount()\n\n  // console.log('enter! useGetUserBalances tokens:', tokens, 'symbol:', symbol, 'apiKey:', apiKey, ' accountId:', accountId )\n\n  useCustomDCEffect(() => {\n    if (!api || !apiKey || !accountId || !token) {\n      return\n    }\n\n    api.getUserBalances({\n      accountId,\n      tokens: token.tokenId\n    }, apiKey).then((data) => {\n      const total = fm.toBig(data.userBalances[token.tokenId].total)\n      const locked = fm.toBig(data.userBalances[token.tokenId].locked)\n      const availableInWei = total.minus(locked)\n      /*\n      setBalance({\n        total: data[0].total, \n        locked: data[0].locked, \n        availableInWei: availableInWei.toString(),\n        available: fromWEI(tokens, symbol, availableInWei)\n      })\n      */\n      setBalance(availableInWei.toString())\n    }).catch((reason: any) => {\n      dumpError400(reason, 'getUserBalances tokenId:' + token.tokenId)\n    })\n\n  }, [api, apiKey, accountId, token,])\n\n  return {\n    balance,\n    setBalance,\n  }\n\n}\n\nexport function useGetUserBalances(tokens: any, toList: boolean = false) {\n\n  const api = useUserAPI()\n\n  //const [balance, setBalance] = useState<any>({total: '0', locked: '0', availableInWei: '0'})\n\n  const [balances, setBalances] = useState<any>(undefined)\n\n  const { apiKey, accountId } = useAccount()\n\n  // console.log('enter! useGetUserBalances tokens:', tokens, 'symbol:', symbol, 'apiKey:', apiKey, ' accountId:', accountId )\n\n  useCustomDCEffect(() => {\n\n    if (!api || !apiKey || !accountId || !tokens) {\n      return\n    }\n\n    let tokenList: any[] = []\n\n    const keys = Reflect.ownKeys(tokens)\n\n    let tokenMap: any = {}\n\n    keys.forEach((item: any) => {\n      const token = tokens[item]\n      tokenList.push(token.tokenId)\n      tokenMap[token.tokenId] = token\n    })\n\n    api.getUserBalances({\n      accountId,\n      tokens: tokenList.join(',')\n    }, apiKey).then((data) => {\n\n      let balances: any = {\n        map: tokenMap,\n        tokenId: {},\n        symbol: {},\n      }\n\n      data.raw_data.forEach((item: any) => {\n        const total = fm.toBig(item.total)\n        const locked = fm.toBig(item.locked)\n        const availableInWei = total.minus(locked)\n\n        console.log('item:', item)\n\n        const token = tokenMap[item.tokenId]\n\n        balances.tokenId[item.tokenId] = availableInWei.toString()\n        balances.symbol[token.symbol] = availableInWei.toString()\n      })\n\n      setBalances(balances)\n\n    }).catch((reason: any) => {\n      dumpError400(reason, 'getUserBalances tokenId:' + tokens.tokenId)\n    })\n\n  }, [api, apiKey, accountId, tokens,])\n\n  return {\n    balances,\n    setBalances,\n  }\n\n}\n\nexport function useGetUserBalance(tokens: any, symbol: any) {\n\n  const api = useUserAPI()\n\n  //const [balance, setBalance] = useState<any>({total: '0', locked: '0', availableInWei: '0'})\n\n  const [balance, setBalance] = useState<any>('0')\n\n  const { apiKey, accountId } = useAccount()\n\n  useCustomDCEffect(() => {\n    if (!api || !apiKey || !accountId || !tokens || !symbol) {\n      return\n    }\n\n    const tokenInfo = getToken(tokens, symbol)\n\n    api.getUserBalances({\n      accountId,\n      tokens: tokenInfo.tokenId\n    }, apiKey).then((data) => {\n      const total = fm.toBig(data.userBalances[tokenInfo.tokenId].total)\n      const locked = fm.toBig(data.userBalances[tokenInfo.tokenId].locked)\n      const availableInWei = total.minus(locked)\n      \n      setBalance(availableInWei.toString())\n\n    }).catch((reason: any) => {\n      dumpError400(reason, 'getUserBalances tokenId:' + tokens.tokenId)\n    })\n\n  }, [api, apiKey, accountId, tokens, symbol,])\n\n  return {\n    balance,\n    setBalance,\n  }\n\n}","export function deepClone(data: any) {\n    if (!data || !(data instanceof Object) || (typeof data == \"function\")) {\n        return data || undefined\n    }\n    let constructor = data.constructor\n    let result = new constructor()\n    for (let key in data) {\n        if (data.hasOwnProperty(key)) {\n            result[key] = deepClone(data[key])\n        }\n    }\n    return result\n}\n\nexport function copyToClipBoard(text: string){ //复制到剪切板\n\n    if(document.execCommand){\n        var textarea =document.createElement('textarea')\n        document.body.appendChild(textarea)\n        textarea.value=text\n        textarea.select()\n        document.execCommand(\"Copy\")\n        document.body.removeChild(textarea)\n\t}\n\n\tif((window as any).clipboardData){\n        (window as any).clipboardData.setData(\"Text\", text)\n        return true\n    }\n\treturn false\n}","import { WithTranslation, withTranslation } from 'react-i18next';\nimport { Box, Modal } from '@material-ui/core';\nimport { ModalCloseButton, ModalContentStyled, ModalQRCode } from '@loopring-web/component-lib';\nimport React from 'react';\nimport { AccountInfo, AccountInfoProps } from '@loopring-web/component-lib';\n\nexport const ModalAccountInfo = withTranslation('common')(({\n                                                               onClose,\n                                                               open,\n                                                               t,\n                                                               ...rest\n                                                           }: { open:boolean, onClose:(e:any)=>void} & AccountInfoProps & WithTranslation) => {\n\n\n    return <Modal\n        open={open}\n        onClose={onClose}\n        aria-labelledby=\"Account information\"\n        aria-describedby=\"show layer2 address, unlock/locked loopring wallet, copy address\"\n    >\n        <ModalContentStyled style={{boxShadow: '24'}}>\n            <Box paddingTop={3} paddingBottom={3} display={'flex'} flexDirection={'column'} minWidth='var(--modal-width)'>\n                <ModalCloseButton onClose={onClose} {...{...rest, t}} />\n                <AccountInfo {...rest}/>\n            </Box>\n\n        </ModalContentStyled>\n    </Modal>\n})","import React, { useCallback, useState, } from 'react'\n\nimport {\n    Header as HeaderUI,\n    HideOnScroll,\n    ModalWalletConnect,\n    AccountInfo,\n    ModalCloseButton,\n} from '@loopring-web/component-lib'\n\nimport { headerRoot } from '@loopring-web/component-lib/src/static-resource'\n\nimport { useLocation } from 'react-router-dom'\n\nimport { Toolbar, Snackbar, Alert, } from '@material-ui/core'\n\nimport { useHeader } from './hook'\n\nimport { useDisconnect, } from 'stores/account/hook'\nimport { ModalPanel, ModalQRCode, } from '@loopring-web/component-lib';\nimport { useGetExchangeInfo } from 'hooks/exchange/useExchangeAPI'\nimport { useModalProps } from './hook'\n\nimport { copyToClipBoard } from 'utils/obj_tools'\nimport { ModalAccountInfo } from '../../pages/AccountPage';\nimport { useTranslation } from 'react-i18next';\n\nconst Header = ({ ...rest }: any) => {\n\n    const {\n        depositProps,\n        withdrawProps,\n        transferProps,\n        resetProps,\n        ammProps,\n        swapProps,\n    } = useModalProps()\n\n    const location = useLocation()\n\n    const {\n        headerToolBarData,\n        headerMenuData,\n        gatewayList,\n        isShowConnect,\n        isShowAccountInfo,\n        setShowAccountInfo,\n        // setShowAccountInfo,\n        setShowConnect,\n        // open,\n        // setOpen,\n        // openConnect,\n        // setOpenConnect,\n        account,\n        accountInfoProps,\n        // showAccountInfo\n    } = useHeader()\n\n    const { exchangeInfo } = useGetExchangeInfo()\n\n    const { disconnect } = useDisconnect()\n\n    const onSwitch = useCallback(() => {\n        setShowAccountInfo({isShow:false})\n        setShowConnect({isShow:true})\n    }, [setShowConnect,setShowAccountInfo])\n\n    const [openQRCode, setOpenQRCode] = useState(false)\n\n    const [copyToastOpen, setCopyToastOpen] = useState(false);\n    const {t} = useTranslation('commom')\n\n    const closeCopyToast = () => { setCopyToastOpen(false) }\n\n    return (<>\n        <Snackbar open={copyToastOpen} autoHideDuration={2500} onClose={closeCopyToast}>\n            <Alert onClose={closeCopyToast} severity=\"success\">\n                {t('Address Copied to Clipboard!')}\n        </Alert>\n        </Snackbar>\n\n        <ModalQRCode open={openQRCode} onClose={() => setOpenQRCode(false)} title={'ETH Address'}\n            description={account.accAddr} url={account.accAddr} />\n\n        <ModalPanel transferProps={transferProps} withDrawProps={withdrawProps} \n        depositProps={depositProps} resetProps={resetProps} ammProps={ammProps} swapProps={swapProps}/>\n\n        <HideOnScroll>\n            {process.env.NODE_ENV !== 'production' && JSON.stringify(account?.status)}\n            {process.env.NODE_ENV !== 'production' && ' exchangeAddress:' + JSON.stringify(exchangeInfo?.exchangeAddress)}\n\n            <HeaderUI {...rest} headerMenuData={headerMenuData} headerToolBarData={headerToolBarData}\n                selected={location.pathname === '/' ? headerRoot : location.pathname}></HeaderUI>\n\n        </HideOnScroll>\n        <Toolbar />\n\n        <ModalWalletConnect {...{ ...rest, gatewayList, open:isShowConnect.isShow, onClose: () => setShowConnect({isShow:false}) }} />\n        {<ModalAccountInfo\n            open={isShowAccountInfo.isShow}\n            onClose={() => {setShowAccountInfo({isShow:false})}}\n            onCopy={() => {\n                copyToClipBoard(account.accAddr);\n                setCopyToastOpen(true)\n            }}\n            onViewQRCode={() => {\n                setOpenQRCode(true)\n            }}\n            onDisconnect={() => {\n                disconnect();\n                setShowAccountInfo({isShow:false});\n            }}\n            onSwitch={onSwitch}\n            {...{...accountInfoProps, ...rest}}></ModalAccountInfo>}\n    </>)\n}\n\n\nexport default Header\n\n\n\n","import styled from '@emotion/styled/macro'\n\nimport { MarketBlock, QuoteTable, TablePaddingX } from '@loopring-web/component-lib'\n\nimport { WithTranslation, withTranslation } from 'react-i18next'\nimport { coinMap } from '@loopring-web/component-lib/static'\nimport { FloatTag } from '@loopring-web/component-lib/src/static-resource'\nimport { Box, Grid } from '@material-ui/core'\nimport { useQuote } from './hook'\n\nconst  RowStyled = styled(Grid)`\n      & .MuiGrid-root:not(:last-of-type) > div{\n        margin-right: ${({theme}) => theme.unit * 3}px;\n      }\n` as typeof Grid\nconst  TableWrapStyled = styled(Grid)`\n  &{\n    background-color: ${({theme}) => theme.colorBase.background().default};\n    ${({theme}) => theme.border.defaultFrame({c_key: 'blur', d_R: 1})};\n    .rdg{\n      height: 100%;\n    }\n  }\n  ${({theme}) => TablePaddingX({pLeft:theme.unit * 3,pRight:theme.unit * 3})}\n` as typeof Grid\n\nconst QuotePage = withTranslation('common')((rest: WithTranslation) => {\n\n    const { tickList, big4 } = useQuote()\n\n    const formattedRawData = tickList.map((o: any) => ({\n        pair: !!o[0].length ? {\n            first: o[0][0],\n            last: o[0][1]\n        }: {\n            first: '--',\n            last: '--'\n        },\n        lastPrice: Number.isFinite(o[2]) ? o[2] : '--',\n        change: Number.isFinite(o[3]) ? o[3] : '--',\n        high: Number.isFinite(o[4]) ? o[4] : '--',\n        low: Number.isFinite(o[5]) ? o[5] : '--',\n        volumn: Number.isFinite(o[6]) ? o[6] : '--'\n    }))\n    \n    let props: any = {\n        ...rest,\n        buyData: coinMap.ETH,\n        sellData: coinMap.LRC,\n        tradeFloat: {priceDollar: +123, priceYuan: 2343232, percent: '+15%', timeUnit: \"24h\",\n            volume: 112312312,\n            floatTag:FloatTag.increase},\n\n    }\n\n    const onVisibleRowsChange=(data: any) => {\n        console.log(data)\n    }\n\n    return <Box display={'flex'} flexDirection={'column'} flex={1}>\n\n        <RowStyled container >\n            <Grid item xs={3} >\n                <MarketBlock {...{...props,tradeFloat: {priceDollar: 123,priceYuan: 2343232, percent: '0%', timeUnit: \"24h\",floatTag:FloatTag.none}}} />\n            </Grid>\n            <Grid item xs={3} >\n                <MarketBlock {...{...props,tradeFloat: {priceDollar: 123,priceYuan: 2343232, percent: '-15%', timeUnit: \"24h\",floatTag:FloatTag.decrease}}} />\n            </Grid>\n            <Grid item xs={3} >\n                <MarketBlock {...{...props}}></MarketBlock>\n            </Grid>\n            <Grid item xs={3} >\n                <MarketBlock {...{...props}}></MarketBlock>\n            </Grid>\n        </RowStyled>\n        <TableWrapStyled container marginY={3} paddingY={2} flex={1}>\n            <Grid item xs={12} display={'flex'}>\n                <QuoteTable onVisibleRowsChange={onVisibleRowsChange} rawData={formattedRawData} {...{ ...rest }} />\n            </Grid>\n        </TableWrapStyled>\n    </Box>\n\n\n})\n\nexport default QuotePage\n","import { QuoteTableRawDataItem } from \"@loopring-web/component-lib\"\nimport { TickerData, toBig } from \"loopring-sdk\"\nimport { useExchangeAPI } from \"hooks/exchange/useApi\"\nimport { useCustomDCEffect } from \"hooks/common/useCustomDCEffect\"\n\nimport { useState } from \"react\"\n\nconst amtCol = 5\n\nexport function useQuote() {\n\n    const [tickList, setTickList] = useState<any>([])\n\n    const [big4, setBig4] = useState<any>([])\n\n    const exchangeApi = useExchangeAPI()\n\n    useCustomDCEffect(async() => {\n\n        if (!exchangeApi) {\n            return\n        }\n\n        let mounted = true\n\n        const refresh = async () => {\n\n            const { tickList } = await exchangeApi.getAllTickers()\n\n            let ticks: any[] = []\n\n            tickList.forEach((item: TickerData) => {\n                const item2: QuoteTableRawDataItem = {\n                    pair: {\n                        first: item.base as string,\n                        last: item.quote as string,\n                    },\n                    lastPrice: toBig(item.quote_token_volume).div(item.base_token_volume).toNumber(),\n                    change: item?.change ?? 0,\n                    high: item.high,\n                    low: item.low,\n                    volume: toBig(item.base_token_volume).toNumber(),\n                }\n                const rowData: any = [[item.base, item.quote], [item.close, item.close],\n                item.change, item.high, item.low, item.base_token_volume, item.base_token_volume, item.base, item.quote]\n                ticks.push(rowData)\n            })\n            \n            ticks = ticks.sort((a: any, b: any) => {\n                let res = 0\n                if (!isNaN(b[amtCol]) && !isNaN(a[amtCol])) {\n                    res = b[amtCol] - a[amtCol]\n                }\n\n                return res\n            })\n\n            if (mounted) {\n                setBig4(ticks.slice(0, 4))\n                setTickList(ticks)\n            }\n        }\n\n        await refresh()\n\n        /*\n\n        const handler = setInterval(async() => {\n            await refresh()\n        }, 3000)\n        */\n\n        return () => {\n            /*\n            if (handler) {\n                clearInterval(handler)\n            }\n            */\n            mounted = false\n        }\n\n    }, [exchangeApi])\n\n    return {\n        tickList,\n        big4,\n    }\n\n}\n","import { useCallback, useState } from 'react'\n\nimport { useExchangeAPI } from 'hooks/exchange/useApi'\nimport { useCustomDCEffect } from 'hooks/common/useCustomDCEffect'\n\nimport { TradingInterval, Candlestick, GetCandlestickRequest, GetDepthRequest, GetTickerRequest, dumpError400, getExistedMarket } from 'loopring-sdk'\nimport { fromWEI } from 'utils/swap_calc_utils'\n\nimport { ChartUnit, CoinInfo } from '@loopring-web/component-lib/static-resource'\n\nimport { ChartType } from '@loopring-web/component-lib'\n\nimport { TGItemData, TGItemJSXInterface, } from '@loopring-web/component-lib'\n\nimport { IGetDepthDataParams } from '@loopring-web/component-lib/components/charts/scaleAreaChart/data'\n\nconst toggleData: TGItemData[] = [\n  {\n    value: ChartType.Trend,\n    key: ChartType.Trend,\n    label: 'label' + ChartType.Trend\n  },\n  {\n    value: ChartType.Depth,\n    key: ChartType.Depth,\n    label: 'label' + ChartType.Depth\n  },\n]\n\nexport function useBasicInfo(props: any, coinAInfo: any, coinBInfo: any, marketArray: any[], t: any) {\n  const tgItemJSXs: TGItemJSXInterface[] = toggleData.map(({ value, label, key }) => {\n    return { value, tlabel: t(label), key, JSX: <>{t(label)}</> }\n  })\n\n  // const { base, quote, market, tokens } = props\n\n  const { market, amm } = getExistedMarket(marketArray, coinAInfo?.name, coinBInfo?.name)\n\n  const [chartType, setChartType] = useState<ChartType>(ChartType.Trend)\n\n  console.log('---useBasicInfo market:', market, ' amm:', amm, ' chartType:', chartType)\n  //\n  // const [change, setChange] = useState(0)\n  //\n  // const [volume, setVolume] = useState('')\n\n  const [chartUnit, setChartUnit] = useState(ChartUnit.D1)\n\n  const [originData, setOriginData] = useState<any>(undefined)\n\n  const handleChange = useCallback((_e: React.MouseEvent, value: any) => {\n    // Settings.setChartType(value)\n    console.log('useBasicInfo handleChange:', value)\n    setOriginData(undefined)\n    setChartType(value)\n  }, [setOriginData, setChartType])\n\n  const exchangeApi = useExchangeAPI()\n\n  // useCustomDCEffect(async () => {\n  //\n  //   if (!exchangeApi || !market || !tokens || !quote) {\n  //     return\n  //   }\n  //\n  //   let mounted = true\n  //\n  //   try {\n  //\n  //     const request: GetTickerRequest = {\n  //       market: market.market,\n  //     }\n  //\n  //     const ticker = await exchangeApi.getTicker(request)\n  //     if (mounted) {\n  //\n  //       if (ticker.tickList[0].change) {\n  //         setChange(ticker.tickList[0].change)\n  //       }\n  //\n  //       if (ticker.tickList[0].base_token_volume) {\n  //         const baseVol = fromWEI(tokens.tokenSymbolMap, base, ticker.tickList[0].base_token_volume) as string\n  //         setVolume(baseVol)\n  //       }\n  //     }\n  //   }\n  //   catch (reason) {\n  //     dumpError400(reason, 'ChartPanel getCandlestick')\n  //   }\n  //\n  //   return () => {\n  //     mounted = false\n  //   }\n  //\n  // }, [exchangeApi, market, tokens, base,])\n\n  const tgItemJSXsPriceChart: TGItemJSXInterface[] = Object.keys(ChartUnit).reduce((pre, item) => {\n    // @ts-ignore\n    const tGItemData: TGItemData = { value: ChartUnit[item], key: ChartUnit[item], label: 'label' + ChartUnit[item] };\n    pre.push({ value: tGItemData.value, tlabel: t(tGItemData.label ? tGItemData.label : tGItemData.key), key: tGItemData.key, JSX: <>{t(tGItemData.label ? tGItemData.label : tGItemData.key)}</> })\n    return pre\n  }, [] as TGItemJSXInterface[])\n\n  useCustomDCEffect(async () => {\n  \n    let mounted = true\n  \n    if (!exchangeApi || !market || !amm) {\n      return\n    }\n  \n    if (chartType === ChartType.Trend) {\n      const request: GetCandlestickRequest = {\n        market: amm as string,\n        interval: TradingInterval.min15,\n        limit: 96\n      }\n  \n      try {\n        const candlesticks = await exchangeApi.getCandlestick(request)\n  \n        if (mounted) {\n          const originData = candlesticks.candlesticks.map((item: Candlestick) => {\n            return {\n              timeStamp: item.timestamp,\n              low: item.low,\n              high: item.high,\n              open: item.open,\n              close: item.close,\n              volume: item.quoteVol,\n            }\n          })\n          console.log(`useBasicInfo amm: ${amm} candlesticks originData: `, originData)\n          setOriginData(originData)\n        }\n      }\n      catch (reason) {\n        dumpError400(reason, 'ChartPanel getCandlestick')\n      }\n  \n    } else {\n      const request: GetDepthRequest = {\n        market,\n      }\n  \n      try {\n  \n        const { depth } = await exchangeApi.getMixDepth(request)\n        console.log('useBasicInfo depth:', depth)\n        if (mounted) {\n          const originData: IGetDepthDataParams = {\n            bidsPrices: depth.bids_prices,\n            bidsAmtTotals: depth.bids_amtTotals as any,\n            asksPrices: depth.asks_prices,\n            asksAmtTotals: depth.asks_amtTotals as any,\n          }\n          setOriginData(originData)\n        }\n  \n      } catch (reason) {\n        dumpError400(reason)\n      }\n  \n    }\n  \n    return () => {\n      mounted = false\n    }\n  \n  }, [exchangeApi, amm, market, chartType])\n\n  return {\n    // change,\n    // volume,\n    chartUnit,\n    chartType,\n    tgItemJSXs,\n    tgItemJSXsPriceChart,\n    handleChange,\n    originData,\n  }\n}","import store from '../../stores';\nimport { AccountStatus } from '../../state_machine/account_machine_spec';\nimport { setShowAccountInfo, setShowConnect, setShowDeposit } from '@loopring-web/component-lib';\nimport React from 'react';\n\nexport enum fnType {\n    UNKNOWN,\n    UNCONNNECTED,\n    CONNECTED,\n    NOACCOUNT,\n    DEPOSITING,\n    DEPOSIT_TO_CONFIREM,\n    UNACTIVATED,\n    ARPROVING,\n    APPROV_TO_CONFIRM,\n    LOCKED,\n    ACTIVATED,\n    DEFAULT\n}\nexport const accountStaticCallBack = (props: { [key: number ]:[ fn: (props: any) => any, args?: object] }) => {\n    const {status} = store.getState().account\n    let fn, args;\n    switch (status) {\n        case AccountStatus.UNKNOWN:\n            [fn, args] = props[ fnType.UNKNOWN ]?props[ fnType.UNKNOWN ]:[];\n            if (typeof fn === 'function') {\n                return fn.call(this, args);\n            }\n            return\n        case AccountStatus.UNCONNNECTED:\n            [fn, args] = props[ fnType.UNCONNNECTED ]?props[ fnType.UNCONNNECTED ]:[];\n            if (typeof fn === 'function') {\n                return fn.call(this, args);\n            }\n            break;\n        case AccountStatus.CONNECTED:\n            [fn, args] = props[ fnType.CONNECTED ]?props[ fnType.CONNECTED ]:[];\n            if (typeof fn === 'function') {\n                return fn.call(this, args);\n            }\n            break;\n        case AccountStatus.NOACCOUNT:\n            [fn, args] = props[ fnType.NOACCOUNT ]?props[ fnType.NOACCOUNT ]:[];\n            if (typeof fn === 'function') {\n                return fn.call(this, args);\n            }\n            break;\n        case AccountStatus.DEPOSITING:\n            [fn, args] = props[ fnType.DEPOSITING ]?props[ fnType.DEPOSITING ]:[];\n            if (typeof fn === 'function') {\n                return fn.call(this, args);\n            }\n            break;\n        case AccountStatus.DEPOSIT_TO_CONFIREM:\n            [fn, args] = props[ fnType.DEPOSIT_TO_CONFIREM ]?props[ fnType.DEPOSIT_TO_CONFIREM ]:[];\n            if (typeof fn === 'function') {\n                return fn.call(this, args);\n            }\n            break;\n        case AccountStatus.UNACTIVATED:\n            [fn, args] = props[ fnType.UNACTIVATED ]?props[ fnType.UNACTIVATED ]:[];\n            if (typeof fn === 'function') {\n                return fn.call(this, args);\n            }\n            break;\n        case AccountStatus.ARPROVING:\n            [fn, args] = props[ fnType.ARPROVING ]?props[ fnType.ARPROVING ]:[];\n            if (typeof fn === 'function') {\n                return fn.call(this, args);\n            }\n            break;\n        case AccountStatus.APPROV_TO_CONFIRM:\n            [fn, args] = props[ fnType.APPROV_TO_CONFIRM ]?props[ fnType.APPROV_TO_CONFIRM ]:[];\n            if (typeof fn === 'function') {\n                return fn.call(this, args);\n            }\n            break;\n        case AccountStatus.LOCKED:\n            [fn, args] = props[ fnType.LOCKED ]?props[ fnType.LOCKED ]:[];\n            if (typeof fn === 'function') {\n                return fn.call(this, args);\n            }\n            break;\n        case AccountStatus.ACTIVATED:\n            [fn, args] = props[ fnType.ACTIVATED ]?props[ fnType.ACTIVATED ]:[];\n            if (typeof fn === 'function') {\n                return fn.call(this, args);\n            }\n            break;\n        default:\n            break;\n\n    }\n    [fn, args] = props[ fnType.DEFAULT ]?props[ fnType.DEFAULT ]:[];\n    if (typeof fn === 'function') {\n        return fn.call(this, args);\n    }\n}\n\n\nexport const bntLabel: { [ key: number ]: [fn: (props: any) => any, args?: object] } = {\n    [ fnType.UNCONNNECTED ]: [\n        function () {\n            return `labelConnectWallet`\n        }\n    ]\n    , [ fnType.DEFAULT ]: [\n        function () {\n            return `depositTitleAndActive`\n        }\n    ]\n    , [ fnType.ACTIVATED ]: [\n        function () {\n            return undefined\n        }\n    ]\n    , [ fnType.LOCKED ]: [\n        function () {\n            return `labelUnLock`\n        }\n    ]\n};\n\n\nexport const btnClickArray: { [ key: number ]: [fn: (props: any) => any, args?: object] } = {\n    [ fnType.UNCONNNECTED ]: [\n        function () {\n            // setShowConnect({isShow: true})\n            store.dispatch(setShowConnect({isShow: true}))\n        }\n    ]\n    , [ fnType.DEFAULT ]: [\n        function () {\n            store.dispatch(setShowDeposit({isShow: true}))\n            // ShowDeposit(true)\n        }\n    ]\n\n    , [ fnType.LOCKED ]: [\n        function () {\n            store.dispatch(setShowAccountInfo({isShow: true}))\n        }\n    ]\n};\n\n\n","import { ChartUnit } from '@loopring-web/component-lib/static-resource'\n\nimport { ScaleAreaChart, ToggleButtonGroup, useSettings } from '@loopring-web/component-lib'\nimport { Box, Grid } from \"@material-ui/core\"\nimport { WithTranslation } from 'react-i18next'\nimport { TradeTitle } from '@loopring-web/component-lib/components/block'\nimport { UpColor } from '@loopring-web/component-lib/src/static-resource';\nimport { useBasicInfo } from './hook'\n\nconst BasicInfoPanel = ({ props, coinAInfo, coinBInfo, tradeFloat, marketArray, t, ...rest }: any & WithTranslation) => {\n\n    const {\n        // change,\n        chartType,\n        tgItemJSXs,\n        tgItemJSXsPriceChart,\n        handleChange,\n        originData,\n    } = useBasicInfo(props, coinAInfo, coinBInfo, marketArray, t)\n    const { upColor } = useSettings();\n\n    return <>\n        <Grid item xs={8}>\n            <TradeTitle {...{\n                coinAInfo, coinBInfo,\n                ...rest, t, tradeFloat\n            }}></TradeTitle>\n        </Grid>\n        <Grid item xs={4} display={'flex'} justifyContent={'flex-end'} alignItems={'flex-end'}>\n            <ToggleButtonGroup exclusive {...{ ...rest, t, tgItemJSXs, value: chartType }}\n                handleChange={handleChange} />\n        </Grid>\n\n        <Grid item xs={12}>\n            <Box minHeight={256} maxHeight={256} display={'block'} style={{ height: '100%', width: '100%' }}>\n                <ScaleAreaChart type={chartType} data={originData ?? []} riseColor={upColor as keyof typeof UpColor}\n                    handleMove={() => {\n                    }} />\n            </Box>\n        </Grid>\n        <Grid item xs={12} height={24} display={'flex'} justifyContent={'flex-end'}>\n            <ToggleButtonGroup exclusive {...{\n                ...rest, t, tgItemJSXs: tgItemJSXsPriceChart,\n                value: ChartUnit.D1, size: 'small'\n            }}\n                handleChange={() => undefined} />\n        </Grid>\n    </>\n\n};\n\nexport default BasicInfoPanel\n","// import { useState } from 'react'\n//\n// import TradePanelUi from './TradePanel'\n// import { useGetMyTrades, useGetRecentTrades, } from './hooks'\n//\n// const TradePanel = ({tradeArray}: any) => {\n//\n//   // const { market, poolAddress, base, quote } = props\n//\n//   console.log('TradePanel market:', tradeArray)\n//\n//   // const { myTrades } = useGetMyTrades(market)\n//   //\n//   // const { recentTrades } = useGetRecentTrades(poolAddress)\n//\n//\n//\n//   return (\n//     <TradePanelUi trades={tradeArray} isAllTrade={isAllTrade}\n//     setIsAllTrade={setIsAllTrade} />\n//   )\n//\n// }\n//\n// export default TradePanel\n\nimport { RefAttributes, useState } from 'react'\n\nimport Tabs from '@material-ui/core/Tabs'\nimport Tab from '@material-ui/core/Tab'\nimport Checkbox from '@material-ui/core/Checkbox'\nimport styled from '@emotion/styled'\n\nimport { FormControlLabel, TradeTable, } from '@loopring-web/component-lib'\nimport { withTranslation, WithTranslation } from 'react-i18next';\nimport { CheckBoxIcon, CheckedIcon } from '@loopring-web/component-lib/static-resource'\nimport { RouteComponentProps, withRouter } from 'react-router'\nimport { Box } from '@material-ui/core';\nimport { RawDataTradeItem } from '@loopring-web/component-lib/components/tableList/tradeTable/TradeTable';\nimport { BasicHeaderItem, HeadMenuType } from '@loopring-web/component-lib/components/basic-lib/lists/Interface';\n\nconst StylePaper = styled(Box)`\n  width: 100%;\n  height: 100%;\n  flex: 1;\n  background-color: ${({theme}) => theme.colorBase.background().default};\n  border-radius: ${({theme}) => theme.unit}px;\n  padding: 20px;\n\n  .tableWrapper {\n    margin-top: ${({theme}) => theme.unit * 1.5}px;\n    border: 1px solid ${({theme}) => theme.colorBase.borderColor};\n    border-radius: ${({theme}) => theme.unit}px;\n    padding: 26px;\n  }\n` as typeof Box;\n\n\nconst applyProps = (index: number) => {\n    return {\n        id: `simple-tab-${index}`,\n        'aria-controls': `simple-tabpanel-${index}`,\n    }\n}\nconst StyledTabsWrapper = styled.div`\n          position: relative;\n          width: 100%;\n          margin-top: ${({theme}) => theme.unit * 4}px;\n        `\n\nconst StyledFormControlLabel = styled(FormControlLabel)`\n          position: absolute;\n          top: 0;\n          right: ${({theme}) => theme.unit}px;\n          margin: ${({theme}) => theme.unit}px 0 0 0;\n        `\n\n\nconst TradePanel = withTranslation('common')(\n   // withRouter(\n    (\n        {tradeArray,  myTradeArray, t}:\n            { tradeArray: RawDataTradeItem[], myTradeArray: RawDataTradeItem[] } & WithTranslation & RouteComponentProps) => {\n        const [isAllTrade, setIsAllTrade] = useState(false)\n        const [value, setValue] = useState(1)\n        const handleChange = (event: any, newValue: any) => {\n            setValue(newValue)\n        }\n\n        const handleCheckboxChange = () => {\n            setIsAllTrade((flag: boolean) => !flag)\n        }\n\n        return (\n            <StyledTabsWrapper>\n                <StyledFormControlLabel\n                    control={<Checkbox checked={isAllTrade} size={'small'} checkedIcon={<CheckedIcon/>}\n                                       icon={<CheckBoxIcon/>} color={'default'} onChange={handleCheckboxChange}/>}\n                    label={t('labelTradePanelHideOtherPairs')}/>\n\n                <Tabs value={value}\n                      onChange={handleChange}\n                      aria-label=\"tabs switch\">\n                    <Tab label={t('labelMyTrade')} {...applyProps(0)} />\n                    <Tab label={t('labelRecent')}   {...applyProps(1)} />\n                </Tabs>\n\n                <StylePaper marginTop={2}>\n                    {value === 0 ?  <TradeTable rawData={myTradeArray} /> : <TradeTable rawData={tradeArray}/> }\n                </StylePaper>\n\n            </StyledTabsWrapper>\n        )\n    }\n    ) as  (props: { tradeArray: RawDataTradeItem[], myTradeArray: RawDataTradeItem[] }) => JSX.Element;\n//)\n\nexport default TradePanel\n\n","import store from '../../stores';\nimport { WalletMap,WalletCoin,CoinKey } from '@loopring-web/component-lib/static-resource';\nimport * as fm from 'loopring-sdk';\nimport { fromWEI } from '../../utils/swap_calc_utils';\nimport { UserBalanceInfo } from 'loopring-sdk';\nexport type WalletMapExtend<C> =    {\n    [K in CoinKey<C>]?: WalletCoin<C> & {\n    detail:UserBalanceInfo\n}\n}\n\n\nexport const updateWallet = <C extends { [ key: string ]: any }>():{ walletMap: WalletMapExtend<C> | undefined } => {\n    const {walletLayer2} = store.getState().walletLayer2;\n    const {tokenMap} = store.getState().tokenMap;\n    let walletMap: WalletMapExtend<C> | undefined;\n    if (walletLayer2) {\n        walletMap = Reflect.ownKeys(walletLayer2).reduce((prev, item) => {\n            const {total, locked, pending: {withdraw}} = walletLayer2[ item as string ];\n            const countBig = fm.toBig(total).minus(fm.toBig(locked)).minus(fm.toBig(withdraw)).toString()\n            return {\n                ...prev, [ item ]: {\n                    belong: item,\n                    count: fromWEI(tokenMap, item, countBig),\n                    detail: walletLayer2[ item as string ]\n                }\n            }\n        }, {} as  WalletMapExtend<C> )\n    }\n\n    return {walletMap}\n}","export function coinPairInit({coinKey, _tradeCalcData, tokenMap, coinMap}: any) {\n    if (coinKey) {\n        const [_match, sell, buy] = coinKey.match(/(\\w+)-(\\w+)/i);\n        // @ts-ignore\n        if (sell && coinMap && coinMap[ sell ]) {\n            _tradeCalcData.coinSell = sell;\n        }// @ts-ignore\n        if (sell!==buy && buy && -1 !== tokenMap[ sell ].tradePairs.findIndex(ele => ele === buy)) {\n            _tradeCalcData.coinBuy = buy;\n            return _tradeCalcData\n        }\n        // else{\n        //     _tradeCalcData.coinBuy = tokenMap[ sell ].tradePairs[ 0 ];\n        // }\n    }\n    if (!_tradeCalcData.coinSell || _tradeCalcData.coinSell === '') {\n        _tradeCalcData.coinSell = 'LRC';\n        _tradeCalcData.coinBuy = 'ETH';\n        return _tradeCalcData\n    }\n    if (!_tradeCalcData.coinBuy || _tradeCalcData.coinBuy === '' || _tradeCalcData.coinBuy === 'undefined') {\n        // @ts-ignore\n        if (tokenMap && tokenMap[ _tradeCalcData.coinSell ].tradePairs) {\n            _tradeCalcData.coinBuy = tokenMap[ _tradeCalcData.coinSell ].tradePairs[ 0 ]\n        } else {\n            _tradeCalcData.coinSell = 'LRC';\n            _tradeCalcData.coinBuy = 'ETH';\n        }\n    }\n    return _tradeCalcData\n}","import { AmmMap } from '../../stores/Amm/AmmMap';\nimport { AmmPoolSnapshot, getBaseQuote, LoopringMap, TickerData, TokenInfo, TokenVolumeV3 } from 'loopring-sdk';\nimport { LoopringAPI } from '../../stores/apis/api';\nimport * as fm from 'loopring-sdk';\nimport { BIG10 } from '../../defs/swap_defs';\nimport { getToken } from 'utils/swap_calc_utils';\nimport { CoinMap, CustomError, ErrorMap } from '@loopring-web/component-lib/src/static-resource';\nimport { volumeToCountAsBigNumber } from './volumeToCount';\n\nexport const pairDetailBlock = <C extends { [ key: string ]: any }, I extends { [ key: string ]: any }>({\n                                                                                                           coinKey,\n                                                                                                           ammKey,\n                                                                                                           ammMap\n                                                                                                       }: { coinKey: string, ammKey: string, ammMap: AmmMap<C, I> }):\n    Promise<{\n        ammPoolsBalanc: AmmPoolSnapshot,\n        tickMap:  LoopringMap<TickerData>\n}> => {\n    // const exchangeApi = exchangeAPI();\n    // const ammpoolApi = ammpoolAPI();\n    return new Promise((resolve, reject) => {\n        if(LoopringAPI.ammpoolAPI && LoopringAPI.exchangeAPI ) {\n            Promise.all([\n                LoopringAPI.ammpoolAPI.getAmmPoolSnapshot({poolAddress: ammMap[ ammKey ].address}),\n                LoopringAPI.exchangeAPI.getMixTicker({market: coinKey})])\n                // exchangeApi.getMarketTrades({market:coinKey})])\n                //{raw_data},\n                .then(([{raw_data}, {tickMap}]) => {\n                    resolve({\n                        ammPoolsBalanc: raw_data,\n                        tickMap,\n                    })\n                })\n\n        }else{\n            reject(new CustomError(ErrorMap.NO_SDK))\n        }\n       \n    })\n}\n\nexport const pairDetailDone = <C>({coinKey, market,ammPoolsBalanc, tokenMap,tickerData, _tradeCalcData, coinMap, marketCoins}:any)=>{\n\n    const [, coinSell, coinbuy] = coinKey.match(/(\\w+)-(\\w+)/i)\n    let stob:number|undefined;\n    if (tickerData.base === coinSell) {\n        // const ticker: TickerData = tickMap[market]\n        stob = Number(tickerData.close)\n\n    } else{\n        // const ticker: TickerData = tickMap[market]\n        stob = Number(tickerData.close)!==0? 1/Number(tickerData.close): 0\n    }\n    if(isNaN(stob) && ammPoolsBalanc){\n        const {base, quote} = getBaseQuote(coinKey)\n\n        // const baseToken: TokenInfo = getToken(tokenMap, base)\n        // const quoteToken: TokenInfo = getToken(tokenMap, quote)\n        // const baseVol = (fm.toBig(poolBaseTokenVol.volume).div(BIG10.pow(baseToken.decimals)))\n        // const quoteVol = (fm.toBig(quoteBaseTokenVol.volume).div(BIG10.pow(quoteToken.decimals)))\n        //\n        // stob = volumeToCountAsBigNumber(base,poolBaseTokenVol.volume)?.div(\n        //     volumeToCountAsBigNumber(quote,quoteBaseTokenVol.volume) || 1\n        // ) .toNumber()\n        // console.log('1', base, poolBaseTokenVol, quote, quoteBaseTokenVol)\n        //baseToken.tokenId === quoteBaseTokenVol.tokenId && quoteToken.tokenId === poolBaseTokenVol.tokenId) {\n        // const quoteVol = (fm.toBig(quoteBaseTokenVol.volume).div(BIG10.pow(baseToken.decimals)))\n        // const baseVol = (fm.toBig(poolBaseTokenVol.volume).div(BIG10.pow(quoteToken.decimals)))\n        //baseVol.div(quoteVol).toNumber()\n        // console.log('2', base, poolBaseTokenVol, quote, quoteBaseTokenVol)\n        //ErrorMap.NOTS\n        const poolBaseTokenVol: TokenVolumeV3 = ammPoolsBalanc.pooled[0];\n        const quoteBaseTokenVol: TokenVolumeV3 = ammPoolsBalanc.pooled[1];\n        let poolVolumn:[baseVol:any, quoteVol:any];\n        if ( base && quote && tokenMap[base].tokenId === poolBaseTokenVol.tokenId ) {\n            poolVolumn =  [[base,poolBaseTokenVol.volume],[quote,quoteBaseTokenVol.volume]]\n        } else if (base && quote && tokenMap[base].tokenId === quoteBaseTokenVol.tokenId){\n            poolVolumn =  [[quote,quoteBaseTokenVol.volume],[base,poolBaseTokenVol.volume]]\n        } else {\n            throw new CustomError(ErrorMap.NO_SUPPORT_PAIR)\n        }\n        let [baseVol,quoteVol]  = poolVolumn\n        if(baseVol && quoteVol){\n            stob = volumeToCountAsBigNumber(baseVol[0],baseVol[1])?.div(\n                volumeToCountAsBigNumber(quoteVol[0],quoteVol[1]) || 1\n            ) .toNumber()\n        }\n    }\n\n    _tradeCalcData.StoB = stob;\n    _tradeCalcData.BtoS = stob !== 0 && stob !== undefined? 1 / (stob * 1.0): 0;\n    _tradeCalcData.sellCoinInfoMap = coinMap && marketCoins?.reduce((prev: any, item: string | number) => {\n        return {...prev, [ item ]: coinMap[ item ]}\n    }, {} as CoinMap<C>)\n    _tradeCalcData.buyCoinInfoMap = coinMap && tokenMap && tokenMap[ _tradeCalcData.coinSell as string ].tradePairs?.reduce((prev: any, item: string | number) => {\n        return {...prev, [ item ]: coinMap[ item ]}\n    }, {} as CoinMap<C>);\n\n    return {\n        _tradeCalcData\n    }\n    //setPair();\n}","import { TickerData } from 'loopring-sdk';\nimport store from '../../stores';\nimport { FloatTag,TradeFloat } from '@loopring-web/component-lib/src/static-resource';\n\nexport const makeTickView = (tick: TickerData) => {\n    // const {forex} = store.getState().system;\n\n    const price = !isNaN(tick.close) ? tick.close : 0\n\n    const floatTag = (isNaN(tick.close) || isNaN(tick.open))  || tick.open === tick.close ? FloatTag.none : \n        tick.close > tick.open ? FloatTag.increase : FloatTag.decrease\n\n    let _tradeFloat: Partial<TradeFloat> = {\n        percent: (tick.close - tick.open) / tick.open,\n        timeUnit: '24h',\n        priceYuan: price,\n        priceDollar: price,\n        floatTag,\n        reward: 0,\n        APY: 0,\n    }\n\n    return _tradeFloat;\n}\n","import * as fm from 'loopring-sdk';\nimport store from '../../stores';\nimport { TradeTypes,CoinMap } from '@loopring-web/component-lib/static-resource';\nimport { ammpoolAPI, LoopringAPI, userAPI } from '../../stores/apis/api';\nimport { AmmRecordRow, AmmTradeType,RawDataTradeItem } from '@loopring-web/component-lib';\nimport { AmmPoolTx, BillType, AmmTxType, UserAmmPoolTx,getBaseQuote, MarketTradeInfo, Side, UserTrade } from 'loopring-sdk';\nimport { volumeToCount, volumeToCountAsBigNumber } from './volumeToCount';\n\nexport const getUserTrades = (marketKey: any) => {\n    const userApi = userAPI();\n    const {accountId, apiKey} = store.getState().account\n    return userApi.getUserTrades({accountId}, apiKey).then((response: {\n        totalNum: any;\n        userTrades: UserTrade[];\n        raw_data: any;\n    }) => {\n        return response.userTrades\n    })\n}\nexport const makeMarketArray = (coinKey: any, marketTrades: MarketTradeInfo[]): RawDataTradeItem[] => {\n\n    let tradeArray: Array<Partial<RawDataTradeItem>> = []\n\n    marketTrades.forEach((item: MarketTradeInfo) => {\n        try {\n            const {base, quote} = getBaseQuote(item.market)\n            const {forex} = store.getState().system\n            const {currency} = store.getState().settings\n            const {tokenMap} = store.getState().tokenMap\n            if (tokenMap) {\n               // const baseToken = tokenMap[ base as string ]\n               // const quoteToken = tokenMap[ quote as string ]\n\n                // @ts-ignore\n                tradeArray.push({\n                    side: item.side === Side.Sell ? TradeTypes.Sell : TradeTypes.Buy,\n                    amount: {\n                        from: {\n                            key: base as string,\n                            value: base ? volumeToCount(base, item.volume) : undefined\n                        },\n                        to: {\n                            key: quote as string,\n                            value: base ? volumeToCountAsBigNumber(base, item.volume)?.times(item.price).toNumber():undefined\n                        },\n\n                    },\n                    price: {\n                        key: '',\n                        value: fm.toBig(item.price).toNumber(),\n                    },\n                    fee: {\n                        key: '',\n                        value: quote? volumeToCount(quote, item.fee):undefined, //fm.toBig(item.fee).div(BIG10.pow(quoteToken.decimals)).toNumber(),\n                    },\n                    time: parseInt(item.tradeTime.toString()),\n                })\n            }\n        } catch (error) {\n            //CATCHERROR:\n            console.log(error)\n            // new CustomError()\n        }\n\n    })\n    // console.log('tradeArray:', tradeArray)\n    return tradeArray as RawDataTradeItem[];\n\n}\n\nexport const getUserAmmTransaction = () => {\n    const {accountId, apiKey} = store.getState().account\n    return LoopringAPI.ammpoolAPI?.getUserAmmPoolTxs({accountId}, apiKey).then(({userAmmPoolTxs}) => {\n        return userAmmPoolTxs\n    })\n    // }\n\n}\n\n\nexport const makeMyAmmMarketArray = <C extends { [ key: string ]:any }>(coinKey: string|undefined, marketTransaction: UserAmmPoolTx[]): AmmRecordRow<C>[] => {\n\n    let tradeArray: Array<Partial<AmmRecordRow<C>>> = [];\n    let {tokenMap, coinMap, idIndex} = store.getState().tokenMap;\n    marketTransaction.forEach((item: UserAmmPoolTx) => {\n        try {\n           // const {base, quote} = getBaseQuote(coinKey)\n            const {forex} = store.getState().system\n            // const {currency} = store.getState().settings\n            if (coinMap && tokenMap && idIndex\n                && !(coinKey && tokenMap['LP-'+coinKey].tokenId !== item.lpToken.tokenId) ) {\n                // @ts-ignore\n                const [, coinA, coinB] = idIndex[item.lpToken.tokenId].match(/LP-(\\w+)-(\\w+)/i);\n                 \n                tradeArray.push({\n                        type: item.txType === AmmTxType.JOIN ? AmmTradeType.add : AmmTradeType.remove,\n                        //TODO:\n                        totalDollar: 1000,\n                        totalYuan: 1000 / Number(forex),\n                        amountA: volumeToCount(coinA,item.poolTokens[ 0 ]?.actualAmount),\n                        amountB: volumeToCount(coinA,item.poolTokens[ 1 ]?.actualAmount),\n                        time: Number(item.updatedAt),\n                        // @ts-ignore\n                        coinA: coinMap[ coinA ],\n                        // @ts-ignore\n                        coinB: coinMap[ coinB ],\n                        status: item.txStatus\n                    })\n                }\n                return tradeArray\n            }\n         catch (error) {\n            //CATCHERROR:\n            console.log(error)\n            // new CustomError()\n        }\n\n    })\n    // console.log('tradeArray:', tradeArray)\n    return tradeArray as AmmRecordRow<C>[];\n\n}\n\n\nexport const makeMarketAmmArray = <C extends object>(coinKey: any, marketTransaction: AmmPoolTx[]): AmmRecordRow<C>[] => {\n\n    let tradeArray: Array<Partial<AmmRecordRow<C>>> = [];\n\n    // marketTransaction.forEach((item: AmmPoolTx) => {\n    //     try {\n    //         const {base, quote} = getBaseQuote(coinKey)\n    //         const {forex} = store.getState().system\n    //         // const {currency} = store.getState().settings\n    //         const coinMap = store.getState().tokenMap.coinMap as CoinMap<C>\n    //         if (coinMap) {\n    //\n    //             // id: number;\n    //             // from: string;\n    //             // to: string;\n    //             // token: string;\n    //             // amount: string;\n    //             // tokenF: string;\n    //             // amountF: string;\n    //             // status: TxStatus;\n    //             // txHash: string;\n    //             // billType: BillType;\n    //             // income: boolean;\n    //             // timestamp: number;\n    //             // memo: string;\n    //             // price: string;\n    //             // transferType: TransferType;\n    //             // label: string;\n    //             tradeArray.push({\n    //                 // type: item.billType === BillType.ORDER ?\n    //                 //     AmmTradeType.swap : item.billType === BillType.TRANSFER && item.income ?\n    //                 //         AmmTradeType.add : AmmTradeType.remove,\n    //                 // // //TODO:\n    //                 // totalDollar: 1000,\n    //                 // totalYuan: 1000 / Number(forex),\n    //                 // amountA: Number(item.poolTokens[ 0 ].amount),\n    //                 // amountB: Number(item.poolTokens[ 1 ].amount),\n    //                 // time: Number(item.updatedAt),\n    //                 // coinA: coinMap[ base as keyof C],\n    //                 // coinB: coinMap[ quote as keyof C ],\n    //             })\n    //         }\n    //     } catch (error) {\n    //         //CATCHERROR:\n    //         console.log(error)\n    //         // new CustomError()\n    //     }\n    //\n    // })\n    // console.log('tradeArray:', tradeArray)\n    return tradeArray as AmmRecordRow<C>[];\n\n}\n","import store from '../../stores';\nimport { setSlippage } from '@loopring-web/component-lib';\n\ntype Cache = {\n    customSlippage?:number\n}\nexport  const makeCache  = (__cache__:Cache)=>{\n   if(typeof  __cache__.customSlippage !== undefined){\n       store.dispatch(setSlippage(__cache__.customSlippage as number))\n      // store.getState().settings\n   }\n}","import { Box, Grid, } from '@material-ui/core'\nimport { WithTranslation, withTranslation } from 'react-i18next'\nimport BasicInfoPanel from './panel/BasicInfoPanel'\nimport TradePanel from './panel/TradePanel'\nimport styled from 'styled-components'\nimport { useSwapPage } from './hook';\nimport { SwapPanel } from '@loopring-web/component-lib'\n\nconst FixedStyle = styled(Box)`\n  @media only screen and (min-height: 680px ) and (min-width:1024px){\n    position: fixed;\n  }\n`\n\nexport const SwapPage = withTranslation('common')(({ ...rest }: WithTranslation) => {\n\n    const {tradeCalcData,tradeData,tradeFloat,tradeArray, myTradeArray, marketArray, handleSwapPanelEvent,onSwapClick,pair,swapBtnI18nKey} = useSwapPage();\n\n    return <>\n        <Grid container marginRight={3} alignContent={'flex-start'} >\n            <BasicInfoPanel {...{ ...rest,\n                ...pair, marketArray,\n                tradeFloat, tradeArray }} />\n            <TradePanel tradeArray={tradeArray} myTradeArray={myTradeArray} />\n\n            {/**/}\n        </Grid>\n\n        <Box display={'flex'} style={{ minWidth: 'var(--swap-box-width)' }} >\n            <FixedStyle>\n                <SwapPanel tradeData={tradeData}\n                           tradeCalcData={tradeCalcData}\n                           onSwapClick={onSwapClick}\n                           swapBtnI18nKey={swapBtnI18nKey}\n                           // handleError={}\n                           {...{handleSwapPanelEvent,...rest}}\n                />\n            </FixedStyle>\n\n        </Box>\n\n    </>\n});\n\n\n // SwapPage\n","import { useRouteMatch } from 'react-router';\nimport { CoinInfo, IBData, TradeCalcData, TradeTypes } from '@loopring-web/component-lib/static-resource';\nimport React, { useCallback } from 'react';\nimport { exchangeAPI, LoopringAPI, userAPI } from '../../stores/apis/api';\nimport { useTokenMap } from '../../stores/token';\nimport * as fm from 'loopring-sdk';\nimport { getAccountArg, getBaseQuote, getExistedMarket, getTickerArg, MarketTradeInfo, Side, UserTrade } from 'loopring-sdk';\nimport { useAmmMap } from '../../stores/Amm/AmmMap';\nimport { RawDataTradeItem } from '@loopring-web/component-lib/components/tableList/tradeTable/TradeTable';\nimport { useWalletLayer2 } from '../../stores/walletLayer2';\nimport store from '../../stores';\nimport { CustomError, ErrorMap, TradeFloat } from '@loopring-web/component-lib/src/static-resource';\nimport { SwapTradeData, useOpenModals } from '@loopring-web/component-lib';\nimport { SwapData } from '@loopring-web/component-lib/components/panel/components/panel/SwapWrap/Interface';\nimport { SwapType } from '@loopring-web/component-lib/components/panel/Interface';\nimport { useAccount } from '../../stores/account/hook';\nimport { useCustomDCEffect } from '../../hooks/common/useCustomDCEffect';\nimport { accountStaticCallBack, bntLabel, btnClickArray, fnType } from '../../hooks/help/connetStatusCallback';\nimport { useModals } from '../../hooks/modal/useModals';\nimport { updateWallet } from '../../hooks/help/updateWallet';\nimport { coinPairInit } from '../../hooks/help/coinPairInit';\nimport { pairDetailBlock, pairDetailDone } from '../../hooks/help/pairDetail';\nimport { makeTickView } from '../../hooks/help/makeTickView';\nimport { getUserTrades, makeMarketArray } from '../../hooks/help/marketTable';\nimport { makeCache } from '../../hooks/help/makeCache';\n\n\n\n\nexport const useSwapPage = <C extends { [ key: string ]: any }>() => {\n    /*** api prepare ***/\n    // const exchangeApi = exchangeAPI();\n    const match: any = useRouteMatch(\":symbol\")\n    const {coinMap, tokenMap, marketArray, marketCoins} = useTokenMap()\n    const {ammMap} = useAmmMap();\n    const {setShowConnect, setShowAccountInfo} = useOpenModals();\n    const {ShowDeposit} = useModals()\n    const {account} = useAccount()\n\n    const walletLayer2State = useWalletLayer2();\n\n    const [tradeData, setTradeData] = React.useState<SwapTradeData<IBData<C>> | undefined>(undefined);\n    const [tradeCalcData, setTradeCalcData] = React.useState<TradeCalcData<C> | undefined>(undefined);\n    const [tradeArray, setTradeArray] = React.useState<RawDataTradeItem[]>([]);\n    const [myTradeArray, setMyTradeArray] = React.useState<RawDataTradeItem[]>([]);\n    const [tradeFloat, setTradeFloat] = React.useState<TradeFloat | undefined>(undefined);\n    const [pair, setPair] = React.useState<{ coinAInfo: CoinInfo<C> | undefined, coinBInfo: CoinInfo<C> | undefined }>({\n        coinAInfo: undefined,\n        coinBInfo: undefined,\n    });\n    \n    const [swapBtnI18nKey, setSwapBtnI18nKey] = React.useState<string|undefined>(undefined);\n\n    //HIGH: get Router info\n    // const symbol = match?.params.symbol ?? undefined;\n    React.useEffect(() => {\n        const symbol = match?.params.symbol ?? undefined;\n        resetSwap(symbol)\n    }, []);\n    //TODO tickMap\n    React.useEffect(() => {\n    }, [])\n\n    //HIGH: effect by wallet state update\n    React.useEffect(() => {\n        switch (walletLayer2State.status) {\n            case \"ERROR\":\n                walletLayer2State.statusUnset();\n                // setState('ERROR')\n                //TODO: show error at button page show error  some retry dispath again\n                break;\n            case \"DONE\":\n                walletLayer2State.statusUnset();\n                const {walletMap} = updateWallet();\n                if (tradeCalcData) {\n                    setTradeCalcData({...tradeCalcData, walletMap} as TradeCalcData<C>);\n                    setTradeData({\n                        sell: {\n                            belong: tradeCalcData.sellCoinInfoMap ? tradeCalcData.sellCoinInfoMap[ tradeCalcData.coinSell ]?.simpleName : undefined,\n                            balance: walletMap ? walletMap[ tradeCalcData.coinSell ]?.count : 0\n                        },\n                        // @ts-ignore\n                        buy: {\n                            belong: tradeCalcData.sellCoinInfoMap ? tradeCalcData.sellCoinInfoMap[ tradeCalcData.coinBuy ]?.simpleName : undefined,\n                            balance: walletMap ? walletMap[ tradeCalcData.coinBuy ]?.count : 0\n                        },\n                    } as SwapTradeData<IBData<C>>)\n                    let {\n                        amm,\n                        market\n                    } = getExistedMarket(marketArray, tradeCalcData.coinSell as string, tradeCalcData.coinBuy as string);\n                    getUserTrades(market).then((marketTrades)=>{\n                        let _myTradeArray  = makeMarketArray(market, marketTrades) as RawDataTradeItem[]\n                        setMyTradeArray(_myTradeArray?_myTradeArray:[])\n                    })\n                }\n                break;\n            default:\n                break;\n\n        }\n    }, [walletLayer2State.status,setMyTradeArray])\n\n    React.useEffect(() => {\n    }, [])\n\n\n    useCustomDCEffect(() => {\n        const label:string|undefined = accountStaticCallBack(bntLabel)\n        setSwapBtnI18nKey(label);\n    }, [account.status, bntLabel])\n\n    const onSwapClick = ({sell, buy, slippage,...rest}: SwapTradeData<IBData<C>>) => {\n        const  swapBtnClickArray: typeof  btnClickArray =  Object.assign(btnClickArray,{\n            [ fnType.ACTIVATED ]: [  function () {\n                //TODO: swap onClick\n                console.log('onSwap',sell, buy, slippage)\n                if(rest.__cache__){\n                    makeCache(rest.__cache__)\n                }\n            },{sell, buy, slippage}]\n        })\n        accountStaticCallBack(swapBtnClickArray)\n    }\n    const handleSwapPanelEvent = async (swapData: SwapData<SwapTradeData<IBData<C>>>, switchType: any): Promise<void> => {\n        //TODO setMarket(market);\n\n        const {tradeData} = swapData\n        return new Promise((resolve) => {\n            switch (switchType) {\n                case SwapType.SEll_CLICK:\n                    break\n                case SwapType.BUY_CLICK:\n                    break\n                case SwapType.SELL_SELECTED:\n                    resetSwap(`${tradeData.sell.belong}-${tradeData.buy.belong}`, 'sell', tradeData)\n                    break\n                case SwapType.BUY_SELECTED:\n                    resetSwap(`${tradeData.sell.belong}-${tradeData.buy.belong}`, 'buy', tradeData)\n                    break\n                case SwapType.EXCHANGE_CLICK:\n                    resetSwap(`${tradeData.sell.belong}-${tradeData.buy.belong}`)\n                    break\n                default:\n                    break\n            }\n\n            resolve(undefined)\n        })\n    }\n    const calculateTradeData = (type: 'sell' | 'buy', _tradeData: SwapTradeData<IBData<C>>): { _tradeCalcData: TradeCalcData<C>, _tradeData: SwapTradeData<IBData<C>> } => {\n        //if(`${pair.coinAInfo?.simpleName}-${pair.coinBInfo?.simpleName}` === coinKey)\n        if (_tradeData[ type ].tradeValue && tradeCalcData) {\n            type === 'sell' ? _tradeData[ 'buy' ].tradeValue = fm.toBig(_tradeData[ 'sell' ].tradeValue).times(tradeCalcData.StoB).toNumber()\n                : _tradeData[ 'sell' ].tradeValue = fm.toBig(_tradeData[ 'buy' ].tradeValue).times(tradeCalcData.BtoS).toNumber()\n        }\n        //TODO: renew  tradeCalcData\n        let _tradeCalcData = {...tradeCalcData} as TradeCalcData<C>;\n        return {_tradeData, _tradeCalcData}\n    }\n\n    const resetSwap = async (coinKey: any, type?: 'sell' | 'buy', _tradeData?: SwapTradeData<IBData<C>>) => {\n        if (tradeCalcData\n            && coinKey === `${tradeCalcData.coinSell}-${tradeCalcData.coinBuy}`\n            && _tradeData\n            && type\n            && (!tradeData || (tradeData[ type ].tradeValue !== _tradeData[ type ].tradeValue))) {\n            const {_tradeData: td, _tradeCalcData} = calculateTradeData(type, _tradeData)\n            setTradeData(td)\n            setTradeCalcData(_tradeCalcData)\n\n        } else {\n            let _tradeFloat: Partial<TradeFloat> = {}\n            let _tradeArray: Array<Partial<RawDataTradeItem>> | undefined = undefined;\n            let _tradeCalcData: Partial<TradeCalcData<C>> = coinPairInit({coinKey, _tradeCalcData:{}, tokenMap, coinMap})\n            let {\n                amm,\n                market\n            } = getExistedMarket(marketArray, _tradeCalcData.coinSell as string, _tradeCalcData.coinBuy as string);\n            const [,coinA,coinB] = market.match(/(\\w+)-(\\w+)/i)\n\n            setTradeCalcData({...tradeCalcData, ..._tradeCalcData} as TradeCalcData<C>);\n            if (coinMap) {\n                setPair({\n                    coinAInfo: coinMap[ coinA ],\n                    coinBInfo: coinMap[ coinB ],\n                })\n            }\n            if (walletLayer2State.walletLayer2) {\n                const {walletMap} = updateWallet();\n                _tradeCalcData.walletMap = walletMap;\n                getUserTrades(market).then((marketTrades)=>{\n                    let _myTradeArray = makeMarketArray(market, marketTrades) as RawDataTradeItem[]\n                    setMyTradeArray(_myTradeArray?_myTradeArray:[])\n                })\n            }\n            let apiList = [];\n            //TODO wallet saga done\n            if (marketArray && amm && market && ammMap) {\n                // let pairPromise =  usePairTitleBlock({market})\n                apiList = [\n                    LoopringAPI.exchangeAPI?.getMarketTrades({market}),\n                    pairDetailBlock({coinKey: market, ammKey: amm, ammMap})\n                ];\n                //HiGH: this need add websocket to update infr ticker ammpoolsbalace\n                // @ts-ignore\n                Promise.all([...apiList]).then(\n                    ([{marketTrades}, {ammPoolsBalanc,tickMap}]: any[]) => {\n\n                        if (tokenMap) {\n                            let {_tradeCalcData: _td} = pairDetailDone({\n                                coinKey:`${_tradeCalcData.coinSell}-${_tradeCalcData.coinBuy}`,\n                                market,\n                                ammPoolsBalanc,\n                                tickerData: tickMap[ market ] ? tickMap[ market ]: {},\n                                tokenMap,\n                                _tradeCalcData,\n                                coinMap,\n                                marketCoins\n                            })\n                            _tradeCalcData = _td;\n                            _tradeFloat = makeTickView(tickMap[ market ] ?tickMap[ market ]: {})\n                            _tradeArray = makeMarketArray(market, marketTrades)\n                            // @ts-ignore\n                            setTradeCalcData(_tradeCalcData as TradeCalcData<C>);\n                            // @ts-ignore\n                            setTradeFloat(_tradeFloat);\n                            setTradeArray(_tradeArray as RawDataTradeItem[])\n                            // setPair(_pair)\n                            setTradeData({\n                                sell: {\n                                    belong: _tradeCalcData.sellCoinInfoMap ? _tradeCalcData.sellCoinInfoMap[ _tradeCalcData.coinSell ]?.simpleName : undefined,\n                                    balance: _tradeCalcData.walletMap ? _tradeCalcData.walletMap[ _tradeCalcData.coinSell ]?.count : 0\n                                },\n                                // @ts-ignore\n                                buy: {\n                                    belong: _tradeCalcData.sellCoinInfoMap ? _tradeCalcData.sellCoinInfoMap[ _tradeCalcData.coinBuy ]?.simpleName : undefined,\n                                    balance: _tradeCalcData.walletMap ? _tradeCalcData.walletMap[ _tradeCalcData.coinBuy ]?.count : 0\n                                },\n                            } as SwapTradeData<IBData<C>>)\n                        }\n                    }).catch((error) => {\n                        throw new CustomError({...ErrorMap.TRADE_LITE_SET_PAIR_ERROR, options: error})\n                        //TODO solve error\n                    })\n\n            }\n        }\n\n    }\n    return {\n        tradeCalcData,\n        tradeFloat,\n        tradeArray,\n        myTradeArray,\n        tradeData,\n        pair,\n        marketArray,\n        onSwapClick,\n        swapBtnI18nKey,\n        handleSwapPanelEvent\n    }\n\n}","import { useMemo, } from \"react\"\n\nimport { useActiveWeb3React } from \"../web3/useWeb3\"\n\nimport { WsAPI, ExchangeAPI, AmmpoolAPI, UserAPI, DEFAULT_TIMEOUT, } from 'loopring-sdk'\n\nfunction useApi(ApiClass: any, timeout = DEFAULT_TIMEOUT) {\n\n  const { chainId, active, } = useActiveWeb3React()\n\n    const genApi = () => {\n        if (!active || !chainId) {\n            return undefined\n        }\n\n        return new ApiClass(chainId, timeout)\n    }\n\n    const api = useMemo(genApi, [ApiClass, chainId, active, timeout])\n\n    return api\n}\n\nexport function useWsAPI() {\n    return useApi(WsAPI) as WsAPI\n}\n\nexport function useExchangeAPI() {\n    return useApi(ExchangeAPI) as ExchangeAPI\n}\n\nexport function useAmmpoolAPI() {\n    return useApi(AmmpoolAPI) as AmmpoolAPI\n}\n\nexport function useUserAPI() {\n    return useApi(UserAPI) as UserAPI\n}\n","import { useCallback, useMemo, useState, useRef, useEffect } from 'react'\n\nimport { useActiveWeb3React } from '../web3/useWeb3'\nimport { useWsAPI, } from './useApi2'\n\nimport { ChainId, getAccountArg, getCandlestickArg, \n    getAmmpoolArg, getTickerArg, WsProps } from 'loopring-sdk'\n\nconst stateArr = [\n    { key: 0, value: 'Connecting' },\n    { key: 1, value: 'Connected' },\n    { key: 2, value: 'Closing' },\n    { key: 3, value: 'Closed' }\n]\n\nexport const useWebsocket = ({ topics, verify, needApiKey, apiKey, }: { topics: any, needApiKey: boolean, apiKey: string|undefined, verify: boolean, }) => {\n    const ws = useRef<WebSocket | null>(null)\n    const [wsData, setMessage] = useState<any>(undefined)\n    const [readyState, setReadyState] = useState({ key: 0, value: 'Connecting' })\n\n    const { chainId, } = useActiveWeb3React()\n\n    const api = useWsAPI()\n\n    const creatWebSocket = () => {\n\n        if (!api || !chainId) {\n            return\n        }\n\n        api.getWsKey().then((wsApiKey: any) => {\n            let basePath: string = 'wss://ws.'\n            switch (chainId) {\n                case ChainId.MAINNET:\n                    basePath += process.env.REACT_APP_API_URL\n                    break\n                default:\n                    basePath += process.env.REACT_APP_API_URL_UAT\n                    basePath = 'wss://ws.uat2.loopring.io'\n            }\n\n            basePath += '/v3/ws?wsApiKey=' + wsApiKey\n    \n            try {\n                ws.current = new WebSocket(basePath)\n\n                const subTopics = (topics: any) => {\n                    let data: any = {\n                        op: 'sub',\n                        unsubscribeAll: 'true',\n                        topics: topics,\n                    }\n            \n                    if (needApiKey && apiKey) {\n                        data.apiKey = apiKey\n                    }\n            \n                    const flat_txt = JSON.stringify(data)\n                    sendMessage(flat_txt)\n                }\n    \n                ws.current.onopen = (_e) => {\n                    setReadyState(stateArr[ws.current?.readyState ?? 0])\n                    subTopics(topics)\n                }\n                \n                ws.current.onclose = (e) => {\n                    setReadyState(stateArr[ws.current?.readyState ?? 0])\n                }\n                \n                ws.current.onerror = (e) => {\n                    setReadyState(stateArr[ws.current?.readyState ?? 0])\n                }\n    \n                ws.current.onmessage = (e) => {\n                    setMessage(e.data)\n                }\n            } catch (error) {\n                console.log(error)\n            }\n\n        })\n\n        \n    }\n\n    const webSocketInit = () => {\n        if (!ws.current || ws.current.readyState === 3) {\n            creatWebSocket()\n        }\n    }\n\n    const closeWebSocket = () => {\n        ws.current?.close()\n    }\n\n    const sendMessage = (msg: any) => {\n        ws.current?.send(msg)\n    }\n\n    const reconnect = () => {\n        try {\n            closeWebSocket()\n            ws.current = null\n            creatWebSocket()\n        } catch (e) {\n            console.log(e)\n        }\n    }\n\n    useEffect(() => {\n\n        verify && webSocketInit()\n        return () => {\n            ws.current?.close()\n        }\n    }, [ws, verify])\n\n    return {\n        wsData,\n        readyState,\n        sendMessage,\n        closeWebSocket,\n        reconnect,\n    }\n}\n\nexport function useWs(topics: any, needApiKey: boolean, apiKey?: string, verify: boolean = true) {\n    const [socketData, setSocketData] = useState({})\n\n    const [isLocalPage, setIsLocalPage] = useState<boolean>(true)\n\n    useEffect(() => {\n\n        let mounted = true\n\n        const checkIsLocalPage = () => {\n            console.log('enter checkIsLocalPage')\n            document.addEventListener('visibilitychange', function () {\n                // page invisible trigger!\n                let isLocalPage = true\n                if (document.visibilityState === 'hidden') {\n                    isLocalPage = false\n                }\n                if (mounted) {\n                    setIsLocalPage(isLocalPage)\n                } else {\n                    console.log('unmounted! dont setIsLocalPage!')\n                }\n            })\n        }\n\n        checkIsLocalPage()\n\n        return () => {\n            mounted = false\n        }\n\n    }, [])\n\n    const { wsData, readyState, closeWebSocket, reconnect, sendMessage, } = useWebsocket({\n        topics,\n        apiKey,\n        needApiKey,\n        verify,\n    })\n\n    useEffect(() => {\n    \n        if (needApiKey && !apiKey) {\n            return\n        }\n\n        if (!verify) {\n            return\n        }\n\n        if (wsData === 'ping') {\n            try {\n                sendMessage('pong')\n            } catch (err) {\n                console.log(err)\n            }\n        } else {\n            if (wsData) {\n                setSocketData(JSON.parse(wsData))\n            }\n        }\n        \n        // if closed and is currente page then, reconnect.\n        if (readyState.key === 3 && isLocalPage) {\n            reconnect()\n        }\n        // if not current page, close it.\n        if (!isLocalPage) {\n            closeWebSocket()\n        }\n\n    }, [wsData, readyState, isLocalPage, verify, apiKey])\n\n    return {\n        socketData,\n    }\n}\n\nexport function useAmmpoolWs(apiKey: string) {\n\n    let topics: any[] = []\n\n    topics.push(getTickerArg('LRC-ETH'))\n\n    topics.push(getAmmpoolArg('0x18920d6E6Fb7EbE057a4DD9260D6D95845c95036'))\n\n    const needApiKey = false\n\n    const { socketData } = useWs(topics, needApiKey, apiKey)\n\n    return {\n        socketData,\n    }\n\n}\n","import { useRef } from 'react'\n\n// import Qrcode from 'components/qrcodes/Qrcode'\n\n\nimport { useAccount } from 'stores/account/hook'\n\nimport { useGetExchangeInfo, useGetGas, useGetMarkets, useGetTokens } from 'hooks/exchange/useExchangeAPI'\n\nimport { useAmmpoolWs } from 'hooks/common/useWebsocketApi'\n\nconst DebugPage = () => {\n\n  const inputRef = useRef<HTMLInputElement>(null)\n\n  const { account, isNoAccount, apiKey } = useAccount()\n\n  const {socketData} = useAmmpoolWs(apiKey)\n\n  const { markets } = useGetMarkets()\n\n  const { exchangeInfo } = useGetExchangeInfo()\n\n  const { tokens } = useGetTokens()\n\n  const { gas } = useGetGas()\n\n  const gasPrice = gas?.data\n\n  console.log('account:', account)\n  console.log('exchangeInfo:', exchangeInfo)\n  console.log('tokens:', tokens)\n\n  const showAddr = account.accAddr ? account.accAddr : ''\n\n  return (\n    <div>\n      Debug\n      <div>account:{JSON.stringify(account)}</div>\n      <div>eddsaKey:{account.eddsaKey}</div>\n      <div>wsdata: {JSON.stringify(socketData)}</div>\n      <div>----------------------------</div>\n      <div>markets:{JSON.stringify(markets)}</div>\n      <div>----------------------------</div>\n      <div>depositAddress:{exchangeInfo?.depositAddress}</div>\n      <div>exchangeAddress:{exchangeInfo?.exchangeAddress}</div>\n      <div>----------------------------</div>\n      {/*<div>exchangeInfo:{JSON.stringify(exchangeInfo)}</div>\n      <div>----------------------------</div>*/}\n      <div>tokens:{JSON.stringify(tokens)}</div>\n      <div>----------------------------</div>\n\n      {/*{isNoAccount() && <Qrcode value={showAddr} size={300} />}*/}\n      {/*<input type='input' ref={inputRef} width=\"150px\" />*/}\n      {/*<DepositBtn onClick={deposit} />*/}\n    </div>\n  )\n\n}\n\nexport default DebugPage\n","import React, { useEffect } from 'react'\nimport { TransactionTable, RawDataTransactionItem, TransactionTradeTypes, TransactionSide, TransactionStatus } from '@loopring-web/component-lib'\nimport { WithTranslation, withTranslation } from 'react-i18next'\nimport { Box, Paper } from '@material-ui/core'\nimport styled from '@emotion/styled'\nimport moment from 'moment'\nimport store from 'stores'\nimport { LoopringAPI } from 'stores/apis/api'\n// import { useGetTxs } from './hooks'\n\nconst StylePaper = styled(Box)`\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  height: 100%;\n  flex: 1;\n  background-color: ${({ theme }) => theme.colorBase.background().default};\n  border-radius: ${({ theme }) => theme.unit}px;\n  padding: 20px;\n\n  .title {\n    font-family: Gilroy-Medium;\n    font-size: ${({ theme }) => theme.unit * 3}px;\n    line-height: 19px;\n  }\n\n  .tableWrapper {\n    display: flex;\n    margin-top: 20px;\n    border: 1px solid ${({ theme }) => theme.colorBase.borderColor};\n    border-radius: ${({ theme }) => theme.unit}px;\n    padding: 26px;\n    flex: 1;\n    \n    .rdg {\n      flex: 1;\n    }\n  }\n` as typeof Paper;\n\n// export type RawDataTransactionItem2 = {\n//   token?: string,\n//   tradeType: TransactionTradeTypes,\n//   from: string | TransactionSide;\n//   to: string | TransactionSide;\n//   amount: number;\n//   fee: {\n//       unit: string;\n//       value: number;\n//   };\n//   memo?: string;\n//   time: number;\n//   txnHash: string;\n//   status: TransactionStatus;\n//   path?: string;\n// }\n\nconst TxPanel = withTranslation('common')((rest:WithTranslation<'common'>) => {\n    const container = React.useRef(null);\n    const [pageSize, setPageSize] = React.useState(10);\n    const [txTableData, setTxTableData] = React.useState<RawDataTransactionItem[]>([]);\n\n    const { accountId,apiKey } = store.getState().account;\n\n    useEffect(() => {\n        (async function getUserApi () {\n            if (LoopringAPI && LoopringAPI.userApi && accountId && apiKey) {\n                const userTxns = await LoopringAPI.userApi.getUserTranferList({\n                    accountId,\n                }, apiKey)\n                const mappingList = userTxns.userTransfers.map(o => ({\n                  token: o.symbol,\n                  from: o.senderAddress,\n                  to: o.receiverAddress,\n                  amount: Number(o.amount),\n                  fee: {\n                    unit: o.feeTokenSymbol || '',\n                    value: Number(o.feeAmount || 0)\n                  },\n                  memo: o.memo || '',\n                  time: moment().diff(moment(o.timestamp), 'days'),\n                  txnHash: o.hash,\n                  status: o.status === 'processed' ? TransactionStatus.processed : o.status === 'processing' ? TransactionStatus.processing : o.status === 'received' ? TransactionStatus.received : TransactionStatus.failed,\n                  tradeType: o.txType === 'TRANSFER' ? TransactionTradeTypes.transfer : o.txType === 'DEPOSIT' ? TransactionTradeTypes.deposit : TransactionTradeTypes.withdraw,\n                }))\n                console.log(mappingList)\n                setTxTableData(mappingList)\n            }\n        })()\n    }, [accountId, apiKey])\n\n    React.useEffect(() => {\n        // @ts-ignore\n        let height = container?.current?.offsetHeight;\n        if (height) {\n            setPageSize(Math.floor((height - 120) / 44) - 2);\n        }\n    }, [container, pageSize]);\n\n    return (\n        <StylePaper ref={container}>\n            <div className=\"title\">Transactions</div>\n            <div className=\"tableWrapper\">\n                <TransactionTable {...{\n                  // rawData: txList,\n                  rawData: txTableData,\n                  pagination: {\n                    pageSize: pageSize\n                  },\n                  ...rest\n                }} />\n            </div>\n        </StylePaper>\n    )\n})\n\nexport default TxPanel\n","import { useEffect, useRef, useState } from 'react'\nimport { WithTranslation, withTranslation } from 'react-i18next'\nimport { PriceTag } from '@loopring-web/component-lib/static-resource'\nimport { Box, Paper, Typography } from '@material-ui/core'\nimport styled from '@emotion/styled'\nimport {\n    AssetsTable,\n    AssetTitle,\n    AssetTitleProps,\n    ChartType,\n    DoughnutChart,\n    ScaleAreaChart,\n    ToggleButtonGroup,\n    TokenType\n} from '@loopring-web/component-lib'\nimport { useModals } from 'hooks/modal/useModals'\n// import { useGetUserBalances } from 'hooks/exchange/useUserAPI'\nimport { useGetTokens } from 'hooks/exchange/useExchangeAPI'\n// import { LoopringAPI } from 'stores/apis/api'\nimport store from 'stores'\n\nconst StylePaper = styled(Box)`\n  width: 100%;\n  height: 100%;\n  flex: 1;\n  background-color: ${({theme}) => theme.colorBase.background().default};\n  border-radius: ${({theme}) => theme.unit}px;\n  padding: 20px;\n\n  .title {\n    font-family: Gilroy-Medium;\n    font-size: ${({theme}) => theme.unit * 3}px;\n    line-height: 19px;\n  }\n\n  .tableWrapper {\n    margin-top: ${({theme}) => theme.unit * 1.5}px;\n    border: 1px solid ${({theme}) => theme.colorBase.borderColor};\n    border-radius: ${({theme}) => theme.unit}px;\n    padding: 26px;\n  }\n` as typeof Box;\n\nconst StyledChartWrapper = styled(Box)`\n  height: 225px;\n\n  > div {\n    position: relative;\n    width: calc(50% - 6px);\n    height: 100%;\n    background-color: ${({theme}) => theme.colorBase.background().default};\n    border: 1px solid ${({theme}) => theme.colorBase.borderColor};\n    border-radius: ${({theme}) => theme.unit}px;\n    padding: ${({theme}) => theme.unit * 2.5}px ${({theme}) => theme.unit * 3}px;\n  }\n`\n\nconst StyledBtnGroupWrapper = styled(Box)`\n  position: absolute;\n  z-index: 10000;\n  right: ${({theme}) => theme.unit * 3}px;\n  bottom: ${({theme}) => theme.unit * 2.5}px;\n`\n\nconst toggleData = [\n    {value: '24 H', key: '24 H'},\n    {value: '1 W', key: '1 W'},\n    {value: 'ALL', key: 'ALL'},\n]\n\n// const DoughnutData = [\n//     {\n//         name: 'LP Token',\n//         value: 12898.0\n//     },\n//     {\n//         name: 'LRC',\n//         value: 12898.50\n//     },\n//     {\n//         name: 'ETH',\n//         value: 36547.00\n//     },\n//     {\n//         name: 'DOT',\n//         value: 23898.09\n//     },\n//     {\n//         name: 'BTC',\n//         value: 3489\n//     },\n//     {\n//         name: 'CRV',\n//         value: 180.09\n//     },\n//     {\n//         name: 'ALICE',\n//         value: 150.7\n//     },\n//     {\n//         name: 'LINA',\n//         value: 230.5\n//     },\n// ]\n\nconst testTrendData: any = [\n    {\n        timeStamp: 150,\n        low: Math.random() + 1,\n        high: Math.random() + 6,\n        open: Math.random() + 3,\n        close: Math.random() + 4,\n        volume: (Math.random() + 4) * 1500,\n    },\n    {\n        timeStamp: 160,\n        low: Math.random() + 1,\n        high: Math.random() + 6,\n        open: Math.random() + 3,\n        close: Math.random() + 4,\n        volume: (Math.random() + 4) * 1500,\n    },\n    {\n        timeStamp: 170,\n        low: Math.random() + 1,\n        high: Math.random() + 6,\n        open: Math.random() + 3,\n        close: Math.random() + 4,\n        volume: (Math.random() + 4) * 1500,\n    },\n    {\n        timeStamp: 180,\n        low: Math.random() + 1,\n        high: Math.random() + 6,\n        open: Math.random() + 3,\n        close: Math.random() + 4,\n        volume: (Math.random() + 4) * 1500,\n    },\n    {\n        timeStamp: 190,\n        low: Math.random() + 1,\n        high: Math.random() + 6,\n        open: Math.random() + 3,\n        close: Math.random() + 4,\n        volume: (Math.random() + 4) * 1500,\n    },\n    {\n        timeStamp: 200,\n        low: Math.random() + 1,\n        high: Math.random() + 6,\n        open: Math.random() + 3,\n        close: Math.random() + 4,\n        volume: (Math.random() + 4) * 1500,\n    },\n    {\n        timeStamp: 210,\n        low: Math.random() + 1,\n        high: Math.random() + 6,\n        open: Math.random() + 3,\n        close: Math.random() + 4,\n        volume: (Math.random() + 4) * 1500,\n    },\n    {\n        timeStamp: 220,\n        low: Math.random() + 1,\n        high: Math.random() + 6,\n        open: Math.random() + 3,\n        close: Math.random() + 4,\n        volume: (Math.random() + 4) * 1500,\n    },\n    {\n        timeStamp: 230,\n        low: Math.random() + 1,\n        high: Math.random() + 6,\n        open: Math.random() + 3,\n        close: Math.random() + 4,\n        volume: (Math.random() + 4) * 1500,\n    },\n    {\n        timeStamp: 240,\n        low: Math.random() + 1,\n        high: Math.random() + 6,\n        open: Math.random() + 3,\n        close: Math.random() + 4,\n        volume: (Math.random() + 4) * 1500,\n    },\n]\n\nexport type ITokenInfoItem = {\n    token: string,\n    detail: {\n        price: string,\n        symbol: string,\n        updatedAt: number\n    }\n}\n\nconst AssetPanel = withTranslation('common')(({t, ...rest}: WithTranslation) => {\n    const container = useRef(null);\n    const [pageSize, setPageSize] = useState(10);\n\n    const [chartPeriod, setChartPeriod] = useState('24 H')\n\n    // const { accountId,apiKey } = store.getState().account;\n\n    // useEffect(() => {\n    //     (async function getUserApi () {\n    //         if (LoopringAPI && LoopringAPI.userApi && accountId && apiKey) {\n    //             const { userBalances } = await LoopringAPI.userApi.getUserBalances({\n    //                 accountId,\n    //                 tokens: '' // get all the tokens\n    //             }, apiKey)\n    //             console.log(userBalances)\n    //             // const { userBalances } = userBalances\n    //         }\n    //     })()\n    // }, [accountId, apiKey])\n\n    useEffect(() => {\n        // @ts-ignore\n        let height = container?.current?.offsetHeight;\n        if (height) {\n            setPageSize(Math.floor((height - 120) / 44) - 1);\n        }\n    }, [container, pageSize]);\n\n    const {\n        ShowDeposit,\n        ShowTransfer,\n        ShowWithdraw,\n        ShowResetAccount,\n    } = useModals()\n\n    const onShowDeposit = () => {\n        ShowDeposit(true)\n    }\n\n    const onShowTransfer = () => {\n        ShowTransfer(true)\n    }\n\n    const onShowWithdraw = () => {\n        ShowWithdraw(true)\n    }\n\n    const AssetTitleProps: AssetTitleProps = {\n        assetInfo: {\n            totalAsset: 123456.789,\n            priceTag: PriceTag.Dollar,\n        },\n        onShowDeposit,\n        onShowTransfer,\n        onShowWithdraw,\n    }\n\n    const {tokens: tokensAll} = useGetTokens()\n\n    const tokens = tokensAll?.tokenSymbolMap\n\n    // const { balances } = useGetUserBalances(tokens)\n\n    const {walletLayer2} = store.getState().walletLayer2;\n    const {faitPrices} = store.getState().system\n\n    const tokenPriceList = faitPrices ? Object.entries(faitPrices).map(o => ({\n        token: o[ 0 ],\n        detail: o[ 1 ]\n    })) as ITokenInfoItem[] : []\n\n\n    const tokenMap = Object.entries(store.getState().tokenMap.tokenMap || {}).map(o => ({\n        token: o[ 0 ],\n        tokenDetail: o[ 1 ]\n    }))\n    const coinList = walletLayer2 ? Object.keys(walletLayer2) : []\n    const coinDetailList = walletLayer2 ? Object.values(walletLayer2) as any : []\n\n    const doughnutData = coinList.map((coin, index) => ({\n        name: coin,\n        value: Number(coinDetailList[ index ].total)\n    }))\n\n    // TODO: cannot get lp token or smallbalances for now\n    const assetsRawData = coinList.map((coin, index) => {\n        const tokenInfo = coinDetailList[ index ]\n        const tokenPriceUSDT = (Number(tokenPriceList.find(o => o.token === coin)?.detail.price) / Number(tokenPriceList.find(o => o.token === 'USDT')?.detail.price))\n\n        return ({\n            token: {\n                type: tokenMap.find(o => o.token === coin)?.tokenDetail.isLpToken ? TokenType.lp : TokenType.single,\n                value: coin\n            },\n            amount: tokenInfo.total,\n            available: Number(tokenInfo.total) - Number(tokenInfo.locked),\n            locked: Number(tokenInfo.locked),\n            smallBalance: tokenPriceUSDT * tokenInfo.total < 1,\n        })\n    })\n\n    return (\n        <>\n            <Box>\n                <AssetTitle  {...{\n                    t,\n                    ...rest,\n                    ...AssetTitleProps\n                }} />\n            </Box>\n\n            {/*<div className=\"title\">{t('labelAssetsTitle')}</div>*/}\n\n            <StyledChartWrapper display={'flex'} justifyContent={'space-between'} alignItems={'center'} marginTop={2}>\n                <Paper component={'div'}>\n                    <Typography component=\"span\" color=\"textSecondary\" variant=\"body1\">Asset Distribution</Typography>\n                    <DoughnutChart data={doughnutData}/>\n                </Paper>\n                <Paper component={'div'}>\n                    <Typography component=\"span\" color=\"textSecondary\" variant=\"body1\">Total Assets</Typography>\n                    <ScaleAreaChart type={ChartType.Trend} data={testTrendData}/>\n                    <StyledBtnGroupWrapper>\n                        <ToggleButtonGroup exclusive size=\"small\" {...{\n                            ...rest,\n                            t,\n                            data: toggleData,\n                            value: chartPeriod,\n                            setValue: setChartPeriod\n                        }} />\n                    </StyledBtnGroupWrapper>\n                </Paper>\n            </StyledChartWrapper>\n            <StylePaper marginTop={2}>\n                <div className=\"tableWrapper\" ref={container}>\n                    <AssetsTable {...{\n                        rawData: assetsRawData,\n                        pagination: {\n                            pageSize: pageSize\n                        },\n                        showFiliter: true\n                    }} />\n                </div>\n            </StylePaper>\n        </>\n    )\n})\n\nexport default AssetPanel\n","import React, { useEffect } from 'react'\nimport { TradeTable, TradeFilterTable, RawDataTradeItem } from '@loopring-web/component-lib'\nimport { WithTranslation, withTranslation } from 'react-i18next'\nimport styled from '@emotion/styled'\nimport { Box, Paper } from '@material-ui/core'\nimport store from 'stores'\nimport { LoopringAPI } from 'stores/apis/api'\n\nconst StylePaper = styled(Box)`\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  height: 100%;\n  flex: 1;\n  background-color: ${({ theme }) => theme.colorBase.background().default};\n  border-radius: ${({ theme }) => theme.unit}px;\n  padding: 20px;\n\n  .title {\n    font-family: Gilroy-Medium;\n    font-size: ${({ theme }) => theme.unit * 3}px;\n    line-height: 19px;\n  }\n\n  .tableWrapper {\n    display: flex;\n    flex: 1;\n    margin-top: 20px;\n    border: 1px solid ${({ theme }) => theme.colorBase.borderColor};\n    border-radius: ${({ theme }) => theme.unit}px;\n    padding: 26px;\n\n    .rdg {\n      flex: 1;\n    }\n  }\n` as typeof Paper;\n\n// side: keyof typeof TradeTypes;\n//     amount: {\n//         from: {\n//             key: string;\n//             value: number|undefined;\n//         },\n//         to: {\n//             key: string;\n//             value: number|undefined;\n//         }\n//     };\n//     price:{\n//         key:string\n//         value:number|undefined,\n//     }\n//     // priceDollar: number;\n//     // priceYuan: number;\n//     fee: {\n//         key: string;\n//         value: number|undefined;\n//     };\n//     time: number;\n\nconst TradePanel = withTranslation('common')((rest:WithTranslation<'common'>) => {\n    const container = React.useRef(null);\n    const [pageSize, setPageSize] = React.useState(10);\n    const [originalData, setOriginalData] = React.useState<RawDataTradeItem[]>([])\n\n    const { accountId,apiKey } = store.getState().account;\n\n    useEffect(() => {\n        (async function getUserApi () {\n            if (LoopringAPI && LoopringAPI.userApi && accountId && apiKey) {\n                const userTrades = await LoopringAPI.userApi.getUserTrades({\n                    accountId,\n                }, apiKey)\n                if (userTrades && userTrades.userTrades) {\n                  setOriginalData(userTrades.userTrades.map(o => ({\n                    side: o.side,\n                    price: {\n                      key: 'LRC',\n                      value: Number(o.price)\n                    },\n                    fee: {\n                      key: 'LRC',\n                      value: Number(o.fee)\n                    },\n                    time: Number(o.tradeTime),\n                    amount: {\n                      from: {\n                        key: 'LRC',\n                        value: 13000\n                      },\n                      to: {\n                        key: 'USDT',\n                        value: 2300\n                      }\n                    }\n                  })))\n                }\n            }\n        })()\n    }, [accountId, apiKey])\n\n    React.useEffect(() => {\n        // @ts-ignore\n        let height = container?.current?.offsetHeight;\n        if (height) {\n            setPageSize(Math.floor((height - 120) / 44) - 2);\n        }\n    }, [container, pageSize]);\n\n    // const txList: any[] = []\n\n    return (\n        <>\n            <StylePaper ref={container}>\n                <div className=\"title\">Trades</div>\n                <div className=\"tableWrapper\">\n                    <TradeTable {...{\n                      rawData: originalData,\n                      pagination: {\n                        pageSize: pageSize\n                      },\n                      ...rest}}/>\n                </div>\n            </StylePaper>\n        </>\n    )\n})\n\nexport default TradePanel\n","\nimport React, { useEffect } from 'react'\nimport { OrderHistoryTable } from '@loopring-web/component-lib'\nimport { WithTranslation, withTranslation } from 'react-i18next'\nimport { Box, Paper } from '@material-ui/core'\nimport styled from '@emotion/styled'\nimport store from 'stores'\nimport { LoopringAPI } from 'stores/apis/api'\n\nconst StylePaper = styled(Box)`\n    display: flex;\n    flex-direction: column;\n    width: 100%;\n    height: 100%;\n    flex: 1;\n    background-color: ${({ theme }) => theme.colorBase.background().default};\n    border-radius: ${({ theme }) => theme.unit}px;\n    padding: 20px;\n\n    .title {\n        font-family: Gilroy-Medium;\n        font-size: ${({ theme }) => theme.unit * 3}px;\n        line-height: 19px;\n    }\n\n    .tableWrapper {\n        display: flex;\n        flex: 1;\n        margin-top: 20px;\n        border: 1px solid ${({ theme }) => theme.colorBase.borderColor};\n        border-radius: ${({ theme }) => theme.unit}px;\n        padding: 26px;\n\n        .rdg {\n            flex: 1;\n        }\n    }\n` as typeof Paper;\n\nconst OrderPanel = withTranslation('common')((rest: WithTranslation) => {\n    const container = React.useRef(null);\n    const [pageSize, setPageSize] = React.useState(10);\n\n    const { accountId,apiKey } = store.getState().account;\n\n    useEffect(() => {\n        (async function getUserApi () {\n            if (LoopringAPI && LoopringAPI.userApi && accountId && apiKey) {\n                const userOrders = await LoopringAPI.userApi.getOrders({\n                    accountId,\n                }, apiKey)\n                console.log(userOrders)\n            }\n        })()\n    }, [accountId, apiKey])\n\n    React.useEffect(() => {\n        // @ts-ignore\n        let height = container?.current?.offsetHeight;\n        if (height) {\n            setPageSize(Math.floor((height - 120) / 44) - 2);\n        }\n    }, [container, pageSize]);\n\n    return (\n        <>\n            <StylePaper ref={container}>\n                <div className=\"title\">Order History</div>\n                <div className=\"tableWrapper\">\n                    <OrderHistoryTable {...{\n                        pagination: {\n                            pageSize: pageSize\n                        },\n                        rawData: [],\n                        ...rest\n                    }} />\n                </div>\n            </StylePaper>\n        </>\n    )\n})\n\nexport default OrderPanel\n","import styled from '@emotion/styled';\nimport { Box, Button, Divider, Grid, Switch, Typography } from '@material-ui/core';\nimport React from 'react';\nimport { UpColor, Currency, DropDownIcon } from '@loopring-web/component-lib/src/static-resource';\nimport {\n    BtnLanguage,\n    OutlineSelect,\n    OutlineSelectItem, QRCodePanel,\n    TypographyStrong, useSettings\n} from '@loopring-web/component-lib';\nimport { Trans, useTranslation, WithTranslation, withTranslation } from 'react-i18next';\nimport { useTheme } from '@emotion/react';\nimport { LanguageKeys } from '@loopring-web/component-lib/static-resource';\n\n// const MuiModalStyled = styled(MuiModal)`\n//   //background: ${({theme}) => theme.colorBase.background().secondary};\n//   // .MuiBackdrop-root{\n//   //   z-index: -1;\n//   //   background-color: ${({theme}) => theme.colorBase.background().outline};\n//   // }\n//   display: flex;\n//   align-items: center;\n//   justify-content: center;\n// ` as typeof MuiModal;\n// const BlockStyled = styled(Box)`\n//   ${({theme}) => theme.border.defaultFrame({c_key: 'blur', d_R: 1})};\n//   background: ${({theme}) => theme.colorBase.background().secondary};\n//   max-height: var(--panel-setting-height);\n//   max-width: var(--panel-setting-width);\n//   display: flex;\n//   justify-content: space-around;\n//   align-items: center;\n//   overflow: scroll;\n//   padding: ${({theme}) => theme.unit*8}px\n// `;\n\nconst StyledPaper = styled(Grid)`\n  width: 100%;\n  height: 100%;\n  background-color: ${({theme}) => theme.colorBase.background().default};\n  ${({theme}) => theme.border.defaultFrame({c_key: 'blur', d_R: 1})};\n`\n\nconst StyledSwitch = styled(Switch)(({theme}) => ({\n    \"& .Mui-checked\": {\n        color: theme.colorBase.textPrimary,\n        '& + .MuiSwitch-track.MuiSwitch-track': {\n            border: `solid ${theme.colorBase.success}`,\n        },\n        '& .MuiSwitch-thumb': {\n            backgroundColor: theme.colorBase.success,\n        }\n    },\n    '& .MuiSwitch-track': {\n        border: `solid ${theme.colorBase.error}`,\n        opacity: 1\n    },\n    '& .MuiSwitch-thumb': {\n        backgroundColor: theme.colorBase.error,\n    }\n}));\n\nexport const BtnCurrency = ({t, currency, label, handleChange}: any) => {\n    const [state, setState] = React.useState<string>(currency ? currency : Currency.dollar);\n    const _handleChange = React.useCallback((event: React.ChangeEvent<any>) => {\n        setState(event.target.value);\n        if (handleChange) {\n\n            handleChange(event.target.value)\n        }\n    }, [handleChange])\n    return <OutlineSelect aria-label={t(label)} IconComponent={DropDownIcon}\n                          labelId=\"language-selected\"\n                          id=\"language-selected\"\n                          value={state} autoWidth\n                          onChange={_handleChange}>\n        <OutlineSelectItem value={Currency.dollar}>$ {t('labelUSDollar')}</OutlineSelectItem>\n            <OutlineSelectItem value={Currency.yen}>¥ {t('labelCNYYuan')}</OutlineSelectItem>\n    </OutlineSelect>\n}\n\nconst StyledDivider = styled(Divider)`\n  margin: ${({theme}) => theme.unit}px 0 ${({theme}) => theme.unit}px 0px;\n`\nconst DividerBlock = styled(Divider)`\n  margin: 0;\n  flex: 1;\n  width: 1px;\n  height: ${({theme}) => theme.unit * 3}px;\n  background: ${({theme}) => theme.colorBase.focus};\n`\n\n\n\nexport const SettingPanel = withTranslation(['common', 'layout'])(({t,i18n, ...rest}: & WithTranslation) => {\n    const theme = useTheme();\n    const {setUpColor,setLanguage,setCurrency,currency,upColor} = useSettings()\n    const language = i18n.language;\n    const handleOnLanguageChange = (lang: LanguageKeys) => {\n        setLanguage(lang);\n        i18n.changeLanguage(lang);\n    }\n    const handleOnCurrencyChange = (value: any) => {\n        setCurrency(value);\n    }\n    const handleColorChange = (e:any) => {\n        if(e.target.checked){\n            setUpColor(UpColor.green) ;\n        }else{\n            setUpColor(UpColor.red);\n        }\n    }\n    return <Grid container direction={'column'} justifyContent={'space-between'} alignItems={'stretch'} flexWrap={'nowrap'}>\n        <Typography variant={'h4'} component={'h3'} marginY={1} paddingLeft={2}>{t('labelTitleSecurity')}</Typography>\n        <StyledPaper item xs={12} display={'flex'} flexDirection={'column'} marginBottom={2} paddingY={2}>\n            <Box component={'section'} display={'flex'} flexDirection={'column'}>\n                <Typography variant={'h5'} component={'h4'} paddingX={2}>{t('labelTitleResetL2Keypair')}</Typography>\n                <StyledDivider/>\n                <Grid container display={'flex'} flexDirection={'row'} justifyContent={'stretch'}\n                      alignItems={'flex-start'} paddingX={2} marginBottom={2}>\n                    <Grid item xs={8} display={'flex'} flexDirection={'column'}>\n                        <Typography variant={'body1'} component={'p'}>\n                            <Trans i18nKey=\"resetDescription\">\n                                Create a new signing key for layer-2 authentication (no backup needed). This will\n                                <TypographyStrong component={'span'}>cancel all your pending orders</TypographyStrong>.\n                            </Trans>\n                        </Typography>\n                    </Grid>\n                    <Grid item xs={4} display={'flex'} flexDirection={'column'} justifyContent={'space-evenly'}\n                          alignItems={'flex-end'} alignSelf={'stretch'}>\n                        <Button variant={'outlined'} size={'medium'} color={'primary'}>{t('labelBtnReset')}</Button>\n                    </Grid>\n                    <Grid item xs={12} display={'flex'} flexDirection={'row'} justifyContent={'flex-end'}\n                          alignItems={'center'} alignSelf={'stretch'}>\n                        <Typography variant={'body2'} component={'p'}\n                                    paddingTop={1}>{t('labelHadChangPassword', {passDay: '14 hours'})}</Typography>\n                    </Grid>\n\n                </Grid>\n            </Box>\n            <Box component={'section'} display={'flex'} flexDirection={'column'}>\n                <Typography variant={'h5'} component={'h4'} paddingX={2}>{t('labelTitleExportAccount')}</Typography>\n                <StyledDivider/>\n                <Grid container display={'flex'} flexDirection={'row'} justifyContent={'stretch'}\n                      alignItems={'flex-start'} paddingX={2} marginBottom={2}>\n                    <Grid item xs={7} display={'flex'} flexDirection={'column'}>\n                        <Typography variant={'body1'} component={'p'}>{t('descriptionExportAccount')}</Typography>\n                    </Grid>\n                    <Grid item xs={5} display={'flex'} flexDirection={'column'} justifyContent={'space-evenly'}\n                          alignItems={'flex-end'} alignSelf={'stretch'}>\n                        <Grid item> <Button variant={'outlined'} size={'medium'}\n                                            color={'primary'}>{t('labelBtnExportAccount')}</Button></Grid>\n                    </Grid>\n                </Grid>\n            </Box>\n        </StyledPaper>\n\n        <Typography variant={'h4'} component={'h3'} marginY={1} paddingLeft={2}>{t('labelTitlePreferences')}</Typography>\n        <StyledPaper item xs={12} display={'flex'} flexDirection={'column'} marginBottom={2} paddingY={2}>\n            <Box component={'section'} display={'flex'} flexDirection={'column'}>\n                {/*<Typography variant={'h5'} component={'h4'} paddingX={2}>{t('labelTitleLayout')}</Typography>*/}\n                {/*<StyledDivider/>*/}\n                <Grid container display={'flex'} flexDirection={'row'} justifyContent={'stretch'}\n                      alignItems={'flex-start'} paddingX={2} marginBottom={2}>\n                    <Grid item xs={7} display={'flex'} flexDirection={'column'}>\n                        <Typography variant={'body1'} component={'p'}>{t('labelLanguage')}</Typography>\n                    </Grid>\n                    <Grid item xs={5} display={'flex'} flexDirection={'column'} justifyContent={'space-evenly'}\n                          alignItems={'flex-end'} alignSelf={'stretch'}>\n                        <Grid item>\n                            <BtnLanguage {...{\n                                t, ...rest,\n                                language,\n                                label: 'languageSetting',\n                                handleChange: handleOnLanguageChange\n                            }}></BtnLanguage>\n                        </Grid>\n                    </Grid>\n                </Grid>\n                <Grid container display={'flex'} flexDirection={'row'} justifyContent={'stretch'}\n                      alignItems={'flex-start'} paddingX={2} marginBottom={2}>\n                    <Grid item xs={7} display={'flex'} flexDirection={'column'}>\n                        <Typography variant={'body1'} component={'p'}>{t('labelCurrency')}</Typography>\n                    </Grid>\n                    <Grid item xs={5} display={'flex'} flexDirection={'column'} justifyContent={'space-evenly'}\n                          alignItems={'flex-end'} alignSelf={'stretch'}>\n                        <Grid item>\n                            <BtnCurrency {...{\n                                t, ...rest,\n                                currency,\n                                label: 'currencySetting',\n                                handleChange: handleOnCurrencyChange\n                            }}></BtnCurrency>\n\n                        </Grid>\n                    </Grid>\n                </Grid>\n                <Grid container display={'flex'} flexDirection={'row'} justifyContent={'stretch'}\n                      alignItems={'flex-start'} paddingX={2}>\n                    <Grid item xs={7} display={'flex'} flexDirection={'column'}>\n                        <Typography variant={'body1'} component={'p'}>{t('labelColors')}</Typography>\n                    </Grid>\n                    <Grid item xs={5} display={'flex'} flexDirection={'row'} justifyContent={'flex-end'}\n                          alignItems={'center'} alignSelf={'stretch'}>\n                        <Typography variant={'body1'} component={'span'} paddingX={2}>\n                            <Trans i18nKey=\"whichColorIsUp\">\n                                <span style={{\n                                    textTransform: 'capitalize',\n                                    color: upColor === UpColor.green ? theme.colorBase.success : theme.colorBase.error\n                                }}>{{up: upColor === UpColor.green ? t('labelgreen') : t('labelred')}} up</span>\n                                and <span style={{\n                                textTransform: 'capitalize',\n                                color: upColor === UpColor.green ? theme.colorBase.error : theme.colorBase.success\n                            }}>{{down: upColor === UpColor.green ? t('labelred') : t('labelgreen')}} down</span>\n                            </Trans>\n                        </Typography>\n                        <StyledSwitch checked={upColor === UpColor.green} color=\"default\"\n                                      onChange={handleColorChange}/>\n                    </Grid>\n                </Grid>\n            </Box>\n\n        </StyledPaper>\n\n    </Grid>\n})\n\n// export const SettingPage = ({open,onClose}: { open:boolean, onClose:(e:any)=>void})=>{\n//     return  <MuiModalStyled\n//         open={open}\n//         onClose={onClose}\n//         aria-labelledby=\"modal-modal-title\"\n//         aria-describedby=\"modal-modal-description\"\n//     >\n//         <BlockStyled >\n//            <SettingPanel/>\n//         </BlockStyled>\n//     </MuiModalStyled>\n// }\n\n\n","import { useRouteMatch } from 'react-router'\n\nimport { Box, Paper } from '@material-ui/core'\nimport {\n    DepositPanel,\n    SubMenu,\n    SubMenuList as BasicSubMenuList,\n} from '@loopring-web/component-lib'\nimport { useTranslation, withTranslation } from 'react-i18next'\nimport styled from '@emotion/styled'\nimport { subMenuLayer2 } from '@loopring-web/component-lib/src/static-resource'\n\nimport TxPanel from './TxPanel'\nimport AssetPanel from './AssetPanel'\nimport TradePanel from './TradePanel'\nimport OrderPanel from './OrderPanel'\nimport { SettingPanel } from '../SettingPage';\nimport store from '../../stores';\nimport { AccountStatus } from '../../state_machine/account_machine_spec';\nimport { useModalProps } from '../../layouts/header/hook';\n\nexport const subMenu = subMenuLayer2;\nconst BoxStyle = styled(Box)`\n  ${({theme})=>`\n    background-color: ${theme.colorBase.background().default};\n    width: 100%;\n    min-width:auto;\n    ${theme.border.defaultFrame({c_key: 'blur'})};\n    & > div{\n      background-color:initial;\n      border:0;\n      width:auto;\n      min-width: var(--swap-box-width);\n      max-width: 520px;\n    }\n    `\n  }\n   \n` as typeof Box\n\nconst SubMenuList = withTranslation(['layout','common'], { withRef: true })(BasicSubMenuList);\nexport const Layer2Page = () => {\n\n    let match: any = useRouteMatch(\"/layer2/:item\")\n    const {status: accStatus} = store.getState().account;\n    const {t,...rest} = useTranslation()\n    const selected = match?.params.item ?? 'assets';\n    const {depositProps} = useModalProps()\n\n    return <>  { accStatus === AccountStatus.NOACCOUNT\n    || accStatus === AccountStatus.DEPOSITING\n    || accStatus === AccountStatus.DEPOSIT_TO_CONFIREM ?\n        <BoxStyle display={'flex'} flexWrap={'wrap'} alignItems={'center'} justifyContent={'center'} alignContent={'flex-start'}>\n            <DepositPanel  {...{\n                ...rest, ...depositProps,\n                title: t('depositTitleAndActive'),\n                description: 'depositAndActiveDescription'\n            }} > </DepositPanel>\n        </BoxStyle>: <>\n            <Box width={'200px'} display={'flex'} justifyContent={'stretch'} marginRight={3}>\n                <SubMenu>\n                    <SubMenuList selected={selected} subMenu={subMenu as any} />\n                </SubMenu>\n            </Box>\n            <Box minHeight={420} display={'flex'} alignItems={'stretch'} flexDirection={'column'} marginTop={0} flex={1}>\n                {selected === 'assets' && <AssetPanel />}\n                {selected === 'transactions' && <TxPanel />}\n                {selected === 'trades' && <TradePanel />}\n                {selected === 'orders' && <OrderPanel />}\n                {selected === 'setting' && <SettingPanel />}\n            </Box>\n        </>\n    }\n        </>\n\n\n\n}\n","import React from 'react';\nimport { useAmmMap } from '../../../stores/Amm/AmmMap';\nimport { AmmDetail, CustomError, ErrorMap, } from '@loopring-web/component-lib/src/static-resource';\nimport { useTicker } from '../../../stores/ticker';\nimport { deepClone } from '../../../utils/obj_tools';\nimport { STATUS } from '../../../stores/constant';\nimport { useTokenMap } from '../../../stores/token';\n\nexport function useAmmMapUI<R extends { [ key: string ]: any }, I extends { [ key: string ]: any }>({pageSize}: { pageSize: number }) {\n    const [rawData, setRawData] = React.useState<Array<AmmDetail<any>> | []>([]);\n    const [page, setPage] = React.useState<number>(1);\n    const {coinMap} = useTokenMap();\n    const {\n        ammMap,\n        status: ammMapStatus,\n        errorMessage: errorAmmMap,\n        statusUnset: ammMapStatusUnset,\n        updateAmmMap,\n    } = useAmmMap();\n    const {\n        tickerMap,\n        status: tickerStatus,\n        errorMessage: errorTickerMap,\n        statusUnset: tickerStatusUnset,\n        updateTickers,\n    } = useTicker();\n    const updateRawData = () => {\n        try {\n            const _ammMap = deepClone(ammMap);\n            for (let tickerMapKey in tickerMap) {\n                _ammMap[ tickerMapKey ].tradeFloat = tickerMap[ tickerMapKey ]\n            }\n            setRawData(Object.keys(_ammMap).map((ammKey: string) => {\n                if (coinMap) {\n                    _ammMap[ ammKey ][ 'coinAInfo' ] = coinMap[ _ammMap[ ammKey ][ 'coinA' ] ];\n                    _ammMap[ ammKey ][ 'coinBInfo' ] = coinMap[ _ammMap[ ammKey ][ 'coinB' ] ];\n                }\n                return  _ammMap[ ammKey ];\n            }) )\n        } catch (error) {\n            throw new CustomError({...ErrorMap.NO_TOKEN_MAP, options: error})\n        }\n\n    }\n\n\n    const updateTickersUI = React.useCallback((_page) => {\n        setPage(_page);\n        if (ammMap && Object.keys(ammMap).length > 0) {\n            const keys = []\n            for (let i = (page - 1) * pageSize; i < Object.keys(ammMap).length && i < (page - 1) * pageSize + pageSize; i++) {\n                keys.push(Object.keys(ammMap)[ i ]);\n            }\n            updateTickers(keys);\n        }\n    }, [ammMap, page, pageSize, updateTickers])\n    React.useEffect(() => {\n        switch (tickerStatus) {\n            case \"ERROR\":\n                console.log(\"ERROR\", 'get ticker error,ui');\n                tickerStatusUnset()\n                break;\n            case \"PENDING\":\n                break;\n            case \"DONE\":\n                tickerStatusUnset()\n                updateRawData()\n                break;\n            default:\n                break;\n        }\n    }, [tickerStatus, tickerStatusUnset]);\n\n    // init AmmMap at begin\n    React.useEffect(() => {\n        if (!ammMap || Object.keys(ammMap).length === 0) {\n            updateAmmMap();\n        } else {\n            updateTickersUI(page)\n        }\n    }, []);\n\n\n    React.useEffect(() => {\n        switch (ammMapStatus) {\n            case \"ERROR\":\n                console.log(\"ERROR\", 'get ammMap error,ui');\n                ammMapStatusUnset();\n                break;\n            case STATUS.PENDING:\n                console.log(\"PENDING\", 'get ammMap error,ui');\n                break;\n            case STATUS.DONE:\n                ammMapStatusUnset();\n                updateTickersUI(1)\n                break;\n            default :\n                break;\n        }\n    }, [ammMapStatus, ammMapStatusUnset, updateTickersUI]);\n    return {\n        page,\n        rawData,\n        updateTickersUI,\n    }\n}\n\n","import { WithTranslation, withTranslation } from 'react-i18next'\nimport { Box, } from '@material-ui/core'\nimport styled from '@emotion/styled'\n\nimport React from 'react';\nimport { useAmmMapUI } from './hook';\n\nimport { PoolsTable } from '@loopring-web/component-lib';\nimport { AmmPoolActivityRule, LoopringMap } from 'loopring-sdk/dist/defs/loopring_defs';\n\nconst StylePaper = styled(Box)`\n  width: 100%;\n  height: 100%;\n  flex: 1;\n  background-color: ${({theme}) => theme.colorBase.background().default};\n  border-radius: ${({theme}) => theme.unit}px;\n\n  .rdg {\n    flex: 1;\n  }\n\n` as typeof Box;\n\n\nexport const PoolsPanel = withTranslation('common')(<R extends { [ key: string ]: any }, I extends { [ key: string ]: any }>\n({t, ammActivityMap, ...rest}: WithTranslation\n    & {\n    ammActivityMap: LoopringMap<LoopringMap<AmmPoolActivityRule[]>> | undefined }) => {\n    const container = React.useRef(null);\n    const [pageSize, setPageSize] = React.useState(10);\n    const {updateTickersUI, rawData, page} = useAmmMapUI({pageSize});\n\n    React.useEffect(() => {\n        // @ts-ignore\n        let height = container?.current?.offsetHeight;\n        if (height) {\n            setPageSize(Math.floor((height - 120) / 44) - 1);\n        }\n    }, [container, pageSize]);\n\n    const handlePageChange = React.useCallback((page) => {\n        updateTickersUI(page)\n    }, [updateTickersUI]);\n    return (\n        <>\n            <StylePaper display={'flex'} flexDirection={'column'} ref={container}>\n                <PoolsTable {...{\n                    rawData,\n                    handlePageChange,\n                    page,\n                    pagination: {\n                        pageSize\n                    }\n                }} />\n            </StylePaper>\n        </>\n    )\n})\n\n","import { AmmPanelType } from '@loopring-web/component-lib';\nimport { AmmDetailBase } from '@loopring-web/component-lib/src/static-resource';\nimport * as fm from 'loopring-sdk';\nimport { BIG10 } from '../../defs/swap_defs';\nimport { getBaseQuote, TokenInfo, TokenVolumeV3 } from 'loopring-sdk';\nimport { getToken } from '../../utils/swap_calc_utils';\nimport { volumeToCount, volumeToCountAsBigNumber } from './volumeToCount';\n\nexport const ammPairInit = ({pair, _ammCalcData,ammType,tokenMap, coinMap, walletMap,ammMap ,tickerData,ammPoolsBalanc}:any)=>{\n    _ammCalcData.coinInfoMap = coinMap;\n    if(tickerData){\n        // debugger\n        _ammCalcData.AtoB =  Number(tickerData.close)\n    }\n    if(isNaN(_ammCalcData.AtoB) && ammPoolsBalanc){\n        const baseVol = volumeToCountAsBigNumber(pair.coinAInfo.simpleName,ammPoolsBalanc.pooled[0].volume);\n        const quoteVol = volumeToCountAsBigNumber(pair.coinBInfo.simpleName,ammPoolsBalanc.pooled[1].volume);\n        _ammCalcData.AtoB = quoteVol && baseVol && quoteVol.div(baseVol).toNumber();\n\n    }\n    if(pair.coinAInfo){\n        if(ammType === AmmPanelType.Deposit ) {\n            _ammCalcData.myCoinA = {\n                belong: pair.coinAInfo.simpleName,\n                balance: walletMap ? walletMap[ pair.coinAInfo.simpleName ]?.count : 0,\n            }\n            _ammCalcData.myCoinB = {\n                belong: pair.coinBInfo.simpleName,\n                balance: walletMap ? walletMap[ pair.coinBInfo.simpleName ]?.count : 0,\n            }\n        }else {\n            const key = `${pair.coinAInfo.simpleName}-${pair.coinBInfo.simpleName}`;\n            let coinACount = 0,coinBCount = 0 ;\n            if(walletMap){\n                const  balance =  walletMap ? walletMap[ 'LP-' + key ]?.count : 0;\n                const {totalLPToken,totalA,totalB}:AmmDetailBase<any> = ammMap[ 'AMM-' + key ];\n                if(totalA && totalLPToken &&totalB) {\n                    coinACount = totalA / totalLPToken * balance;\n                    coinBCount = totalB / totalLPToken * balance;\n                }\n            }\n            _ammCalcData.myCoinA = {\n                belong: pair.coinAInfo.simpleName,\n                balance: coinACount,\n            }\n            _ammCalcData.myCoinB = {\n                belong: pair.coinBInfo.simpleName,\n                balance: coinBCount,\n            }\n        }\n    }\n\n\n    return  _ammCalcData\n}\n","import { AmmPanel, AmmPanelType } from '@loopring-web/component-lib';\nimport { AmmData, AmmInData, CoinInfo, IBData, WalletMap } from '@loopring-web/component-lib/static-resource';\nimport { useAmmPanel } from './hooks';\nimport React from 'react';\nimport { Box } from '@material-ui/core';\nimport { AmmPoolSnapshot, TickerData } from 'loopring-sdk';\nimport { TradeBtnStatus } from '@loopring-web/component-lib/components/panel/index';\n\nexport const AmmPanelView = <T extends AmmData<C extends IBData<I> ? C : IBData<I>>, I,\n    ACD extends AmmInData<I>,\n    C = IBData<I>>({\n                       pair,\n                       walletMap,\n                       ammType, snapShotData,\n                       ...rest\n                   }: {\n    pair: { coinAInfo: CoinInfo<C> | undefined, coinBInfo: CoinInfo<C> | undefined },\n    snapShotData: { tickerData: TickerData | undefined, ammPoolsBalanc: AmmPoolSnapshot | undefined } | undefined\n    walletMap: WalletMap<C>\n    ammType?: keyof typeof AmmPanelType\n} & any) => {\n    const {\n        ammCalcData,\n        ammDepositData,\n        ammWithdrawData,\n        handleDepositEvent,\n        handleWithDrawEvent,\n        onAmmWithdrawClick,\n        onAmmDepositClick,\n        ammDepositBtnI18nKey,\n        ammWithdrawBtnI18nKey,\n    } = useAmmPanel({\n        pair,\n        snapShotData, walletMap, ammType: ammType ? ammType : AmmPanelType.Deposit\n    })\n\n    // const [index, setIndex] = React.useState(AmmPanelTypeMap[ tabSelected ]);\n    const isLoading = React.useCallback(()=>{\n        if((!snapShotData || !snapShotData.tradeData || !snapShotData.ammPoolsBalanc)\n            &&  ammDepositBtnI18nKey === undefined\n            &&  ammWithdrawBtnI18nKey === undefined\n        ) {\n          return true\n        }\n    },[snapShotData,ammWithdrawBtnI18nKey,ammWithdrawBtnI18nKey])\n\n    return <> {pair ?\n        <AmmPanel {...{...rest}}\n                  ammWithdrawData={ammWithdrawData}\n                  ammDepositData={ammDepositData}\n                  ammCalcData={ammCalcData}\n                  handleDepositEvent={handleDepositEvent}\n                  handleWithDrawEvent={handleWithDrawEvent}\n                  onAmmWithdrawClick={onAmmWithdrawClick}\n                  onAmmDepositClick={onAmmDepositClick}\n                  tabSelected={ammType ? ammType : AmmPanelType.Deposit}\n                  ammDepositBtnI18nKey={ammDepositBtnI18nKey}\n                  ammWithdrawBtnI18nKey={ammWithdrawBtnI18nKey}\n                  ammDepositBtnStatus={isLoading()?TradeBtnStatus.LOADING:TradeBtnStatus.AVAILABLE}\n                  ammWithdrawBtnStatus={isLoading()?TradeBtnStatus.LOADING:TradeBtnStatus.AVAILABLE}\n\n        /> : <Box width={'var(--swap-box-width)'}/>}\n    </>\n\n}","import React from \"react\";\nimport { AmmData, AmmInData, CoinInfo, IBData } from '@loopring-web/component-lib/src/static-resource';\nimport { AmmPanelType } from '@loopring-web/component-lib';\nimport { useTokenMap } from '../../../stores/token';\nimport { useAmmMap } from '../../../stores/Amm/AmmMap';\nimport { ammPairInit } from '../../../hooks/help/ammPairDetail';\nimport {  WalletMap } from '@loopring-web/component-lib/static-resource';\nimport { AmmPoolSnapshot, getExistedMarket, TickerData } from 'loopring-sdk';\nimport { useCustomDCEffect } from '../../../hooks/common/useCustomDCEffect';\nimport { accountStaticCallBack, bntLabel, btnClickArray, fnType } from '../../../hooks/help/connetStatusCallback';\nimport { useAccount } from '../../../stores/account/hook';\nimport { updateWallet } from '../../../hooks/help/updateWallet';\nimport { getUserAmmTransaction, makeMyAmmMarketArray } from '../../../hooks/help/marketTable';\nimport { makeCache } from '../../../hooks/help/makeCache';\n\n\n\nexport const useAmmPanel = <C extends { [ key: string ]: any }>({\n                                                                    pair,\n                                                                    walletMap,\n                                                                    ammType,\n                                                                    snapShotData,\n                                                                }\n                                                                    : {\n    pair: { coinAInfo: CoinInfo<C> | undefined, coinBInfo: CoinInfo<C> | undefined },\n    snapShotData:{ tickerData: TickerData|undefined,ammPoolsBalanc: AmmPoolSnapshot|undefined }|undefined\n    walletMap: WalletMap<C>\n    ammType: keyof typeof AmmPanelType\n}) => {\n    // const walletLayer2State = useWalletLayer2();\n    const {coinMap, tokenMap} = useTokenMap();\n    const {ammMap} = useAmmMap();\n    const {account} = useAccount();\n\n    const [ammCalcData, setAmmCalcData] = React.useState<AmmInData<C> | undefined>();\n    const [ammDepositData, setAmmDepositData] = React.useState<AmmData<IBData<C>, C>>({\n        coinA: {belong: undefined} as unknown as IBData<C>,\n        coinB: {belong: undefined} as unknown as IBData<C>,\n        slippage: .5\n    } as AmmData<IBData<C>, C>);\n    const [ammWithdrawData, setAmmWithdrawData] = React.useState({\n        coinA: {belong: undefined} as unknown as IBData<C>,\n        coinB: {belong: undefined} as unknown as IBData<C>,\n        slippage: .5\n    } as AmmData<IBData<C>, C>);\n    const [ammDepositBtnI18nKey, setAmmDepositBtnI18nKey] = React.useState<string | undefined>(undefined);\n    const [ammWithdrawBtnI18nKey, setAmmWithdrawBtnI18nKey] = React.useState<string | undefined>(undefined);\n\n    const initAmmData = React.useCallback(async (pair: any) => {\n        let _ammCalcData: Partial<AmmInData<C>> = ammPairInit(\n            {\n                pair,\n                ammType,\n                _ammCalcData: {},\n                tokenMap,\n                coinMap,\n                walletMap: walletMap, //walletLayer2State.walletLayer2,\n                ammMap,\n                tickerData:snapShotData?.tickerData,\n                ammPoolsBalanc: snapShotData?.ammPoolsBalanc\n            })\n        setAmmCalcData({...ammCalcData, ..._ammCalcData} as AmmInData<C>);\n        if (_ammCalcData.myCoinA) {\n            if (ammType === AmmPanelType.Deposit) {\n                setAmmDepositData({\n                    coinA: _ammCalcData.myCoinA as IBData<C>,\n                    coinB: _ammCalcData.myCoinB as IBData<C>,\n                    slippage: 0.5\n                })\n            } else {\n                setAmmWithdrawData({\n                    coinA: _ammCalcData.myCoinA as IBData<C>,\n                    coinB: _ammCalcData.myCoinB as IBData<C>,\n                    slippage: 0.5\n                })\n            }\n        }\n    },[snapShotData,walletMap])\n\n    const handleDepositEvent = React.useCallback((data: AmmData<IBData<C>>, type: 'coinA' | 'coinB') => {\n        console.log('handleDepositEvent', data, type);\n    }, []);\n\n    const handleWithDrawEvent = React.useCallback((data: AmmData<IBData<C>>, type: 'coinA' | 'coinB') => {\n        console.log('handleDepositEvent', data, type);\n    }, []);\n\n\n    React.useEffect(() => {\n        if (snapShotData) {\n            initAmmData(pair)\n        }\n    }, [snapShotData,pair,initAmmData,walletMap]);\n\n\n\n    useCustomDCEffect(() => {\n        const label:string|undefined = accountStaticCallBack(bntLabel)\n        setAmmDepositBtnI18nKey(label);\n        setAmmWithdrawBtnI18nKey(label)\n    }, [account.status, bntLabel])\n\n\n    const onAmmWithdrawClick = React.useCallback((props:AmmData<IBData<C>>) => {\n        const  onAmmWithdrawClickArray: typeof  btnClickArray =  Object.assign(btnClickArray,{\n            [ fnType.ACTIVATED ]: [  function (props:AmmData<IBData<C>>) {\n                //TODO: onWithdraw\n                console.log('onAmmWithdraw',props)\n\n                if(props.__cache__){\n                    makeCache(props.__cache__)\n                }\n            },props]\n        })\n        accountStaticCallBack(onAmmWithdrawClickArray)\n    }, []);\n\n    const onAmmDepositClick = React.useCallback((props:AmmData<IBData<C>>) => {\n        const  onAmmDepositClickArray: typeof  btnClickArray =  Object.assign(btnClickArray,{\n            [ fnType.ACTIVATED ]: [  function () {\n                //TODO: onDeposit\n                console.log(' onAmmDeposit',props)\n                if(props.__cache__){\n                    makeCache(props.__cache__)\n                }\n            },props]\n        })\n        accountStaticCallBack(onAmmDepositClickArray)\n    }, []);\n\n\n    return {\n        ammCalcData,\n        ammDepositData,\n        ammWithdrawData,\n        handleDepositEvent,\n        handleWithDrawEvent,\n        onAmmWithdrawClick,\n        onAmmDepositClick,\n        ammDepositBtnI18nKey,\n        ammWithdrawBtnI18nKey,\n    }\n}","import {\n    AmmPoolActivityRule,\n    AmmPoolActivityStatus,\n    AmmPoolSnapshot,\n    LoopringMap,\n    TickerData,\n    toBig,\n} from 'loopring-sdk';\nimport { AmmActivity, AmmCardProps } from '@loopring-web/component-lib/static-resource';\nimport store from '../../stores';\nimport { deepClone } from '../../utils/obj_tools';\nimport { AmmUserReward, AmmUserRewardMap } from 'loopring-sdk/dist/defs/loopring_defs';\nimport BigNumber from 'bignumber.js';\nimport { MyAmmLP } from '@loopring-web/component-lib/src/static-resource';\nimport { WalletMapExtend } from './updateWallet';\nimport { volumeToCount, volumeToCountAsBigNumber } from './volumeToCount';\nimport { coinMap } from '@loopring-web/component-lib/static';\n\nexport type AmmActivityViewMap<R, I> = {\n    [key in keyof R]?: AmmActivity<I>[] | undefined\n}\nexport const makeUIAmmActivityMap = <R extends { [ key: string ]: any }, I extends { [ key: string ]: any }>\n({ammActivityMap, type, ammPoolActivityStatus}: {\n    ammActivityMap: LoopringMap<LoopringMap<AmmPoolActivityRule[ ]>> | undefined,\n    type: 'AMM_MINING' | 'SWAP_VOLUME_RANKING',\n    ammPoolActivityStatus: AmmPoolActivityStatus[]\n}, myReward: AmmUserRewardMap | undefined):\n    Array<AmmCardProps<I>> => {\n    const {coinMap, tokenMap, idIndex} = store.getState().tokenMap\n    let ammActivityViewMap: AmmActivityViewMap<R, I> = {}\n    if (ammActivityMap && ammActivityMap[ type ]) {\n        // debugger\n\n        // @ts-ignore\n        ammPoolActivityStatus.forEach((status: AmmPoolActivityStatus) => {\n\n            if (ammActivityMap[ type ][ status ]) {\n                // @ts-ignore\n                ammActivityMap[ type ][ status ].reduce((prev: AmmActivityViewMap<R, I>, ammPoolActivityRule: AmmPoolActivityRule) => {\n\n                    if (coinMap && ammPoolActivityRule.awardRules[ 0 ] && idIndex && tokenMap) {\n\n                        const symbol = idIndex[ ammPoolActivityRule.awardRules[ 0 ].tokenId as any ]\n\n                        // @ts-ignore\n                        const item = {\n                            // @ts-ignore\n                            rewardToken: coinMap[ symbol ],\n                            myRewards: status === AmmPoolActivityStatus.InProgress && myReward && myReward[ ammPoolActivityRule.market ] ?\n                                volumeToCount(symbol, myReward[ ammPoolActivityRule.market ]?.currentRewards[ 0 ].volume) : 0,\n                            duration: {\n                                from: new Date(ammPoolActivityRule?.rangeFrom),\n                                to: new Date(ammPoolActivityRule?.rangeTo),\n                            },\n                            isPass: AmmPoolActivityStatus.EndOfGame === status,\n                        }\n                        if (prev[ ammPoolActivityRule.market ]) {\n                            // @ts-ignore\n                            prev[ ammPoolActivityRule.market ].push(item);\n                        } else {\n                            // @ts-ignore\n                            prev[ ammPoolActivityRule.market ] = [item];\n                        }\n\n                        // debugger\n                        // return prev;\n                    }\n                    return prev;\n                }, ammActivityViewMap)\n\n            }\n        })\n    }\n    const resultArray = makeAsCard(ammActivityViewMap)\n    // console.log(resultArray)\n    return resultArray;\n\n\n}\nconst makeAsCard = <R extends { [ key: string ]: any }, I extends { [ key: string ]: any }>\n(ammActivityViewMap: AmmActivityViewMap<R, I> | undefined, myReward?: any): Array<AmmCardProps<I>> => {\n    const {coinMap} = store.getState().tokenMap\n    const {ammMap} = store.getState().amm.ammMap\n    try {\n        if (ammActivityViewMap && coinMap) {\n            // @ts-ignore\n            return Reflect.ownKeys(ammActivityViewMap).reduce((prev: Array<AmmCardProps<I>>, key: string) => {\n                const _ammInfo = ammMap[ key as string ]\n                if (_ammInfo && _ammInfo.coinA && coinMap && ammActivityViewMap[ key ]) {\n                    // debugger\n                    // @ts-ignore\n                    const itemArray = ammActivityViewMap[ key ].map((item) => {\n                        return {\n                            ...deepClone(_ammInfo),\n                            // @ts-ignore\n                            coinAInfo: coinMap[ _ammInfo.coinA ],\n                            // @ts-ignore\n                            coinBInfo: coinMap[ _ammInfo.coinB ],\n                            activity: item,\n                        }\n                    })\n                    prev = [...prev, ...itemArray]\n                }\n                return prev;\n            }, [] as Array<AmmCardProps<I>>) as Array<AmmCardProps<I>>\n        } else {\n            return [] as Array<AmmCardProps<I>>\n        }\n    } catch (error) {\n        console.log(error)\n        return []\n    }\n}\ntype Value = undefined | number;\nexport type SummaryMyAmm = {\n    rewardDollar: Value,\n    rewardYuan: Value,\n    feeDollar: Value,\n    feeYuan: Value,\n}\nexport const makeSummaryMyAmm = <C extends { [ key: string ]: any }>({\n                                                                         userRewardsMap\n                                                                     }: {\n    userRewardsMap: LoopringMap<AmmUserReward> | undefined\n}):\n    SummaryMyAmm | undefined => {\n    const {coinMap, idIndex, tokenMap} = store.getState().tokenMap;\n    const {faitPrices, forex} = store.getState().system;\n    if (userRewardsMap && idIndex && coinMap && tokenMap && faitPrices && forex) {\n        let summaryMyAmm = Object.keys(userRewardsMap).reduce((prev, key) => {\n            if (/AMM-/i.test(key)) {\n                // @ts-ignore\n                const [, coinA, coinB] = key.match(/AMM-(\\w+)-(\\w+)/i);\n                const ammUserReward = userRewardsMap[ key ]\n                const {\n                    rewardDollar,\n                    rewardYuan,\n                    feeDollar,\n                    feeYuan\n                } = getOneRewardInfo({coinB, coinA, ammUserReward, idIndex, faitPrices, forex})\n                prev.rewardDollar = rewardDollar ? toBig(rewardDollar).plus(prev.rewardDollar).toNumber() : 0;\n                prev.rewardYuan = rewardYuan ? toBig(rewardYuan).plus(prev.rewardYuan).toNumber() : 0;\n                prev.feeDollar = feeDollar ? toBig(feeDollar).plus(prev.feeDollar).toNumber() : 0;\n                prev.feeYuan = feeYuan ? toBig(feeYuan).plus(prev.feeYuan).toNumber() : 0;\n            }\n            return prev\n        }, {\n            rewardDollar: 0,\n            rewardYuan: 0,\n            feeDollar: 0,\n            feeYuan: 0\n        })\n\n        return summaryMyAmm\n    }\n    return undefined\n}\nconst getOneRewardInfo = <C>({coinA, coinB, ammUserReward, idIndex, faitPrices, forex, walletMap, snapShotData}: any) => {\n    let rewardToken, rewardToken2, feeA, feeB, feeDollar, feeYuan, reward, reward2, rewardDollar, rewardYuan;\n    if (ammUserReward) {\n        rewardToken = ammUserReward.currentRewards[ 0 ] ? idIndex[ ammUserReward.currentRewards[ 0 ].tokenId as number ] : undefined\n        rewardToken2 = ammUserReward.currentRewards[ 1 ] ? idIndex[ ammUserReward.currentRewards[ 1 ].tokenId as number ] : undefined\n        feeA = ammUserReward ? volumeToCountAsBigNumber(coinA, ammUserReward.feeRewards[ 0 ]) : toBig(0);\n        feeB = ammUserReward ? volumeToCountAsBigNumber(coinB, ammUserReward.feeRewards[ 1 ]) : toBig(0);\n        feeA = feeA ? feeA : toBig(0);\n        feeB = feeB ? feeB : toBig(0);\n        feeDollar = feeA.times(faitPrices[ coinA ].price).plus(feeB.times(faitPrices[ coinB ].price))\n        feeYuan = feeDollar.times(forex);\n        reward = rewardToken ? volumeToCountAsBigNumber(rewardToken, ammUserReward.currentRewards[ 0 ].volume) as BigNumber : toBig(0);\n        reward2 = rewardToken2 ? volumeToCountAsBigNumber(rewardToken2, ammUserReward.currentRewards[ 1 ].volume) as BigNumber : toBig(0);\n        reward = reward ? reward : toBig(0);\n        reward2 = reward2 ? reward2 : toBig(0);\n        rewardDollar = reward.times(rewardToken ? faitPrices[ rewardToken ].price : 1).plus(reward2.times(rewardToken2 ? faitPrices[ rewardToken2 ].price : 1));\n        rewardYuan = rewardDollar.times(forex);\n\n    }\n    let balanceA, balanceB, balanceDollar, balanceYuan;\n    if (walletMap && walletMap[ 'LP-' + coinA + '-' + coinB ] && snapShotData) {\n        // @ts-ignore\n        const ratio = new BigNumber(_walletMap[ 'LP-' + coinA + '-' + coinB ].detail.total).div(snapShotData.ammPoolsBalanc.lp.volume);\n        balanceA = ratio.times(volumeToCountAsBigNumber(coinA, snapShotData.ammPoolsBalanc.pooled[ 0 ].volume) || 1);\n        balanceB = ratio.times(volumeToCountAsBigNumber(coinB, snapShotData.ammPoolsBalanc.pooled[ 1 ].volume) || 1);\n        // @ts-ignore\n        balanceDollar = balanceA.times(faitPrices[ coinA ].price).plus(balanceB .times( faitPrices[ coinB ].price))\n        balanceYuan = balanceDollar.times(forex)\n    }\n\n    return {\n        feeA:feeA? feeA.toNumber():undefined,\n        feeB:feeB? feeB.toNumber():undefined,\n        reward:reward? reward.toNumber():undefined,\n        rewardToken: coinMap[ rewardToken ],\n        reward2:reward2? reward2.toNumber(): undefined,\n        rewardToken2: coinMap[ rewardToken2 ],\n        rewardDollar: rewardDollar?rewardDollar.toNumber():undefined,\n        rewardYuan: rewardYuan? rewardYuan.toNumber():undefined,\n        feeDollar: feeDollar? feeDollar.toNumber():undefined,\n        feeYuan: feeYuan? feeYuan.toNumber():undefined,\n        ammDetail: {\n            coinAInfo: coinMap[ coinA ],\n            coinBInfo: coinMap[ coinB ]\n        },\n        balanceA: balanceA? balanceA.toNumber():undefined,\n        balanceB: balanceB? balanceB.toNumber():undefined ,\n        balanceDollar: balanceDollar?balanceDollar.toNumber():undefined,\n        balanceYuan: balanceYuan? balanceYuan.toNumber():undefined,\n    } as MyAmmLP<C>\n}\n\nexport const makeMyAmm = <C extends { [ key: string ]: any }>(market: any, _walletMap: WalletMapExtend<C> | undefined, ammUserRewardMap: LoopringMap<AmmUserReward> | undefined, snapShotData: {\n    tickerData: TickerData | undefined\n    ammPoolsBalanc: AmmPoolSnapshot | undefined\n} | undefined) => {\n    const {coinMap, idIndex, tokenMap} = store.getState().tokenMap;\n    const {faitPrices, forex} = store.getState().system;\n    const [, coinA, coinB] = market.match(/(\\w+)-(\\w+)/i);\n    let _myAmm: Partial<MyAmmLP<C>> = {};\n    if (ammUserRewardMap && ammUserRewardMap[ 'AMM-' + market ]\n        && snapShotData && snapShotData.ammPoolsBalanc) {\n        const ammUserReward: AmmUserReward = ammUserRewardMap[ 'AMM-' + market ];\n\n        // @ts-ignore\n        if (coinMap && tokenMap && idIndex && forex && faitPrices) {\n             _myAmm = getOneRewardInfo({coinA, coinB, ammUserReward,\n                idIndex, faitPrices, forex, walletMap:_walletMap, snapShotData})\n\n            return _myAmm as MyAmmLP<C>\n        }\n    }\n    return {\n        feeA: 0,\n        feeB: 0,\n        feeDollar: 0,\n        feeYuan: 0,\n        reward: 0,\n        rewardToken: undefined as any,\n        balanceA: 0,\n        balanceB: 0,\n        balanceYuan: 0,\n        balanceDollar: 0,\n    }\n}\n\n// if (ammUserReward) {\n//     const symbol = ammUserReward.currentRewards[ 0 ] ? idIndex[ ammUserReward.currentRewards[ 0 ].tokenId as number ] : undefined\n//     const symbol2 = ammUserReward.currentRewards[ 1 ] ? idIndex[ ammUserReward.currentRewards[ 1 ].tokenId as number ] : undefined\n//\n//     _myAmm = {\n//         ..._myAmm,\n//         feeA: ammUserReward ? volumeToCount(coinA, ammUserReward.feeRewards[ 0 ]) : 0,//Number(ammUserReward.feeRewards[ 0 ]) : 0,\n//         feeB: ammUserReward ? volumeToCount(coinB, ammUserReward.feeRewards[ 1 ]) : 0,//Number(ammUserReward.feeRewards[ 1 ]) : 0,\n//         reward: symbol ? volumeToCount(symbol, ammUserReward.currentRewards[ 0 ].volume) : 0,\n//         // @ts-ignore\n//         rewardToken: symbol ? coinMap[ symbol ] : undefined,\n//         reward2: symbol2 ? volumeToCount(symbol2, ammUserReward.currentRewards[ 1 ].volume) : 0,\n//         // @ts-ignore\n//         rewardToken2: symbol2 ? coinMap[ symbol2 ] : undefined,\n//\n//\n//     }\n//     _myAmm.feeDollar = _myAmm.feeA && _myAmm.feeA * faitPrices[ coinA ].price;\n//     _myAmm.feeDollar = _myAmm.feeB && _myAmm.feeB * faitPrices[ coinB ].price;\n// }\n//\n//\n// if (_walletMap && _walletMap[ 'LP-' + market ]) {\n//     // @ts-ignore\n//     const ratio = new BigNumber(_walletMap[ 'LP-' + market ].detail.total).div(snapShotData.ammPoolsBalanc.lp.volume);\n//     _myAmm = {\n//         ..._myAmm,  //snapShotData.ammPoolsBalanc.pooled[ 0 ].volume).div(BIG10.pow(tokenMap[coinA].decimals)\n//         balanceA: ratio.times(volumeToCountAsBigNumber(coinA, snapShotData.ammPoolsBalanc.pooled[ 0 ].volume) || 1).toNumber(),\n//         balanceB: ratio.times(volumeToCountAsBigNumber(coinB, snapShotData.ammPoolsBalanc.pooled[ 1 ].volume) || 1).toNumber(),\n//     }\n//     // @ts-ignore\n//     _myAmm.balanceDollar = _myAmm.balanceA * faitPrices[ coinA ].price + _myAmm.balanceB * faitPrices[ coinB ].price\n//     _myAmm.balanceYuan = _myAmm.balanceDollar * forex\n// }\n\n// export const getAmmPoolGameUserRanks = ():Promise<AmmUserRewardMap> => {\n//     const {accountId} = store.getState().account\n//     //https://api3.loopring.io/api/v2/amm/user/rewards?owner=10917\n//     if(LoopringAPI.ammpoolAPI){\n//         return LoopringAPI.ammpoolAPI.getAmmPoolUserRewards({owner:accountId}).then(({ammUserRewardMap}:any)=>{\n//               return ammUserRewardMap  as AmmUserRewardMap\n//         })\n//     }else{\n//         return  Promise.resolve({} as AmmUserRewardMap);\n//     }\n//\n//     // return LoopringAPI.ammpoolAPI?.getUserAmmPoolTxs({accountId}, apiKey).then(({userAmmPoolTxs}) => {\n//     //     return userAmmPoolTxs\n//     // })\n//     // if(LoopringAPI.ammpoolAPI)   {\n//     //    let promiseList =  marketKeys.map((key)=>{\n//     //         // @ts-ignore\n//     //         return LoopringAPI.ammpoolAPI.getAmmPoolGameUserRank({owner:accAddr,ammPoolMarket:'key'},apiKey)\n//     //     })\n//     //     return Promise.all(promiseList).then(\n//     //         (array:any[])=>{\n//     //\n//     //           return  array.reduce((prev,item:{userRankList:GameRankInfo[]},index)=>{\n//     //                 const market = marketKeys[index]\n//     //                 prev[ market] = item.userRankList[0]\n//     //                 return item.userRankList[0]\n//     //             },{})\n//     //\n//     //         }\n//     //     )\n//     // }else{\n//     //   return  Promise.resolve({});\n//     // }\n//\n//\n//\n//\n// }\n//\n\n// {\n//     userRankList: GameRankInfo[];\n//     raw_data: any;\n// }\n","import React from \"react\";\nimport {\n    AmmActivity,\n    CoinInfo,\n    TradeFloat,\n    WalletMap\n} from \"@loopring-web/component-lib/static-resource\";\nimport { useTokenMap } from \"stores/token\";\nimport { useRouteMatch } from 'react-router';\nimport { AmmDetailStore, useAmmMap } from '../../../stores/Amm/AmmMap';\nimport { useWalletLayer2 } from '../../../stores/walletLayer2';\nimport { pairDetailBlock } from '../../../hooks/help/pairDetail';\nimport { AmmPoolSnapshot, AmmUserRewardMap, getExistedMarket, TickerData } from 'loopring-sdk';\nimport { makeTickView } from '../../../hooks/help/makeTickView';\nimport { useAmmActivityMap } from '../../../stores/Amm/AmmActivityMap';\nimport { deepClone } from '../../../utils/obj_tools';\nimport { updateWallet, WalletMapExtend } from '../../../hooks/help/updateWallet';\nimport {\n    getUserAmmTransaction, makeMyAmmMarketArray\n} from '../../../hooks/help/marketTable';\nimport { AmmRecordRow } from '@loopring-web/component-lib/components/tableList/ammRecordTable/Interface';\nimport { AmmPoolActivityRule, LoopringMap } from 'loopring-sdk/dist/defs/loopring_defs';\nimport { MyAmmLP } from '@loopring-web/component-lib/src/static-resource';\nimport { useSystem } from '../../../stores/system';\nimport {\n     makeMyAmm\n} from '../../../hooks/help/makeUIAmmActivityMap';\nimport { useAccount, useWeb3Account } from '../../../stores/account/hook';\nimport { usePrevious } from 'react-use';\nimport store from '../../../stores';\nimport { useUserRewards } from '../../../stores/userRewards';\n\nconst makeAmmDetailExtendsActivityMap = ({ammMap, coinMap, ammActivityMap, ammKey}: any) => {\n    // debugger\n    if (ammMap && coinMap) {\n        let ammDetail = deepClone(ammMap[ ammKey as string ]);\n        const ammActivity = ammActivityMap [ ammKey as string ];\n        \n        if (ammDetail && ammDetail.coinA) {\n            ammDetail.myCoinA = coinMap[ ammDetail.coinA ];\n            ammDetail.myCoinB = coinMap[ ammDetail.coinB ];\n            ammDetail[ 'activity' ] = ammActivity ? ammActivity : {};\n        }\n        return ammDetail;\n    }\n}\ntype PgAmmDetail<C extends { [ key: string ]: any }> = AmmDetailStore<C> & {\n    myCoinA: CoinInfo<C>,\n    myCoinB: CoinInfo<C>,\n    activity: AmmActivity<C> | undefined\n}\n\nexport const useCoinPair = <C extends { [ key: string ]: any }>(ammActivityMap:LoopringMap<LoopringMap<AmmPoolActivityRule[]>>) => {\n    const match: any = useRouteMatch(\"/liquidity/pools/coinPair/:symbol\")\n    const {coinMap, tokenMap, marketArray} = useTokenMap();\n    const {faitPrices} = useSystem();\n    const ammMapState = useAmmMap();\n    const useUserRewardsState  = useUserRewards()\n\n    // const {account} = useAccount();\n\n\n    const {ammMap, updateAmmMap} = ammMapState;\n\n    // const {ammMap,updateAmmMap} = useAmmMap();\n    const walletLayer2State = useWalletLayer2();\n    const [walletMap, setWalletMap] =  React.useState<WalletMapExtend<C>|undefined>(undefined);\n    // const [ammRecordArray, setAmmRecordArray] = React.useState<AmmRecordRow<C>[]>([]);\n    const [ammMarketArray, setAmmMarketArray] = React.useState<AmmRecordRow<C>[]>([]);\n\n    \n    const [myAmmMarketArray, setMyAmmMarketArray] = React.useState<AmmRecordRow<C>[]>([]);\n    const [ammUserRewardMap, setAmmUserRewardMap] = React.useState<AmmUserRewardMap|undefined>(undefined);\n    const [snapShotData,setSnapShotData] = React.useState<{\n        tickerData: TickerData|undefined\n        ammPoolsBalanc: AmmPoolSnapshot|undefined\n    }|undefined>(undefined);\n\n    const [myAmm, setMyAmm] = React.useState<MyAmmLP<C>>(\n        {\n            feeA: 0,\n            feeB: 0,\n            feeDollar: 0,\n            feeYuan: 0,\n            reward: 0,\n            rewardToken: undefined as any,\n            balanceA: 0,\n            balanceB: 0,\n            balanceYuan: 0,\n            balanceDollar: 0,\n        })\n    // const [ammPoolsBalanc, setAmmpoolsbalance] = React.useState<AmmPoolSnapshot|undefined>(undefined);\n    const [coinPairInfo, setCoinPairInfo] = React.useState<PgAmmDetail<C>>({\n        myCoinA: undefined,\n        myCoinB: undefined,\n        activity: undefined,\n        totalRewards: undefined,\n        amountDollar: undefined,\n        amountYuan: undefined,\n        totalLPToken: undefined,\n        totalA: undefined,\n        totalB: undefined,\n        rewardToken: undefined,\n        rewardValue: undefined,\n        feeA: undefined,\n        feeB: undefined,\n        isNew: undefined,\n        isActivity: undefined,\n    } as unknown as PgAmmDetail<C>);\n    const [tradeFloat, setTradeFloat] = React.useState<TradeFloat | undefined>(undefined);\n    const [pair, setPair] = React.useState<{ coinAInfo: CoinInfo<C> | undefined, coinBInfo: CoinInfo<C> | undefined }>({\n        coinAInfo: undefined,\n        coinBInfo: undefined,\n    });\n\n    const walletLayer2DoIt =React.useCallback((market)=>{\n        // let {market} = getExistedMarket(marketArray, pair.coinAInfo?.simpleName as string, pair.coinBInfo?.simpleName as string);\n\n        const {walletMap : _walletMap} = updateWallet();\n        setWalletMap(_walletMap)\n        if (_walletMap) {\n            getUserAmmTransaction()?.then((marketTrades)=>{\n                let _myTradeArray  = makeMyAmmMarketArray(market, marketTrades)\n                setMyAmmMarketArray(_myTradeArray?_myTradeArray:[])\n            })\n        }\n        return _walletMap\n    } ,[updateWallet,getUserAmmTransaction,makeMyAmmMarketArray,marketArray,pair])\n\n    React.useEffect(() => {\n        const coinKey = match?.params.symbol ?? undefined;\n        let _tradeFloat: Partial<TradeFloat> = {}\n        const [, coinA, coinB] = coinKey.match(/(\\w+)-(\\w+)/i)\n        let {\n            amm,\n            market\n        } = getExistedMarket(marketArray, coinA, coinB);\n\n        const _coinPairInfo = makeAmmDetailExtendsActivityMap({ammMap, coinMap, ammActivityMap, ammKey: amm})\n        setCoinPairInfo(_coinPairInfo ? _coinPairInfo : {})\n\n        if (coinMap) {\n            setPair({\n                coinAInfo: coinMap[ coinA ],\n                coinBInfo: coinMap[ coinB ]\n            })\n        }\n\n        // let _walletMap: WalletMapExtend<C>|undefined = undefined\n        if (walletLayer2State.walletLayer2) {\n            walletLayer2DoIt(market);\n        }\n\n        if (amm && market && ammMap) {\n            //TODO should add it into websocket\n            updateAmmMap();\n            let apiList  = [\n                pairDetailBlock({coinKey: market, ammKey: amm, ammMap}),\n            ];\n            // @ts-ignore\n            Promise.all([...apiList]).then(\n                ([{ammPoolsBalanc,tickMap}\n                   //  ,ammUserRewardMap\n                 ]: any[]) => {\n                    if (tokenMap) {\n                        const _snapShotData =  {\n                            tickerData: tickMap[ market ],\n                            ammPoolsBalanc: ammPoolsBalanc,\n                        }\n                        _tradeFloat = makeTickView(tickMap[ market ]?tickMap[ market ]: {})\n                        setTradeFloat(_tradeFloat as TradeFloat);\n                        setCoinPairInfo({..._coinPairInfo,tradeFloat: {..._tradeFloat,\n                              APY:  _coinPairInfo.APY,\n                        }})\n                        setSnapShotData(_snapShotData)\n\n                    }\n                }).catch((error)=>{\n                console.log(error);\n                throw  Error\n            })\n        }\n\n    }, []);\n\n    React.useEffect(() => {\n        const {market} = getExistedMarket(marketArray, pair.coinAInfo?.simpleName as string, pair.coinBInfo?.simpleName as string);\n        if(market) {\n            switch (walletLayer2State.status ) {\n                case \"ERROR\":\n                    walletLayer2State.statusUnset();\n                    // setState('ERROR')\n                    //TODO: show error at button page show error  some retry dispath again\n                    break;\n                case \"DONE\":\n                    walletLayer2State.statusUnset();\n                    const _walletMap = walletLayer2DoIt(market);\n                    const _myAmm:MyAmmLP<C> = makeMyAmm(market,_walletMap,ammUserRewardMap,snapShotData);\n                    setMyAmm(_myAmm)\n                    break;\n                default:\n                    break;\n\n            }\n        }\n\n\n    }, [walletLayer2State.status,ammUserRewardMap,snapShotData])\n\n    //TODO tickMap\n    React.useEffect(() => {\n       const {market} = getExistedMarket(marketArray, pair.coinAInfo?.simpleName as string, pair.coinBInfo?.simpleName as string);\n       if(market){\n           switch (useUserRewardsState.status) {\n               case \"ERROR\":\n                   useUserRewardsState.statusUnset();\n                   // setState('ERROR')\n                   //TODO: show error at button page show error  some retry dispath again\n                   break;\n               case \"DONE\":\n                   // getAmmPoolUserRewards().then((ammUserRewardMap)=>{\n                   const {userRewardsMap} = store.getState().userRewardsMap\n                   setAmmUserRewardMap(userRewardsMap)\n                   const _myAmm:MyAmmLP<C> = makeMyAmm(market,walletMap,ammUserRewardMap,snapShotData);\n                   setMyAmm(_myAmm);\n                   break;\n               default:\n                   break;\n\n           }\n       }\n\n    }, [useUserRewardsState.status,useUserRewardsState.statusUnset])\n\n    React.useEffect(() => {\n        if (ammMapState.status === \"ERROR\") {\n            //TODO: solve error\n            ammMapState.statusUnset();\n        } else if (ammMapState.status === \"DONE\") {\n            ammMapState.statusUnset();\n            if (ammMapState.ammMap && pair.coinAInfo?.simpleName && pair.coinBInfo?.simpleName) {\n                const _coinPairInfo = makeAmmDetailExtendsActivityMap(\n                    {\n                        ammMap,\n                        coinMap,\n                        ammActivityMap,\n                        ammKey: 'AMM-' + pair.coinAInfo.simpleName + pair.coinBInfo.simpleName\n                    })\n                setCoinPairInfo({...coinPairInfo,..._coinPairInfo,\n                    tradeFloat:coinPairInfo.tradeFloat\n                })\n\n            }\n\n            // tokenState.statusUnset()\n            // setState('DONE');\n        }\n    }, [ammMapState.status, ammMapState.ammMap, ammMapState.statusUnset, pair, ammActivityMap, tokenMap])\n\n\n\n    return {\n        walletMap,\n        myAmm,\n        // tickerData,\n        coinPairInfo,\n        snapShotData,\n        // ammPoolsBalanc,\n        pair,\n        tradeFloat,\n        ammMarketArray,\n        myAmmMarketArray,\n    }\n}","import React from 'react';\nimport { WithTranslation, withTranslation } from 'react-i18next';\nimport { AmmRecordTable, TradeBtnStatus, TradeTable, TradeTitle, useSettings } from '@loopring-web/component-lib';\nimport { Currency, getThousandFormattedNumbers, PriceTag } from '@loopring-web/component-lib/static-resource';\nimport { Box, Breadcrumbs, Grid, Hidden, Link, Typography, } from '@material-ui/core';\nimport { AmmPanelView } from '../AmmPanel';\nimport moment from 'moment';\nimport styled from '@emotion/styled/';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\n\nimport { useCoinPair } from './hooks';\nimport { ActivityMap } from '../../../stores/Amm/AmmActivityMap';\nimport { AmmPoolActivityRule, LoopringMap } from 'loopring-sdk/dist/defs/loopring_defs';\n\n\n//******************** page code ************************//\nconst BoxStyled = styled(Box)`\n  ${({theme}) => theme.border.defaultFrame({c_key: 'blur'})};\n  background-color: ${({theme}) => theme.colorBase.background().default};\n`;\nconst StylePaper = styled(Box)`\n  width: 100%;\n  height: calc(100% - 64px);\n  \n  //height: 100%;\n  flex: 1;\n  background-color: ${({theme}) => theme.colorBase.background().default};\n  border-radius: ${({theme}) => theme.unit}px;\n  padding: ${({theme}) => theme.unit}px 0 ;\n  .rdg {\n    \n    flex: 1;\n  }\n\n` as typeof Box;\n\nconst applyProps = (index: number) => {\n    return {\n        id: `simple-tab-${index}`,\n        'aria-controls': `tabpanel-${index}`,\n    }\n}\n\nexport const CoinPairPanel = withTranslation('common')(<R extends {[key:string]:any},I extends {[key:string]:any}>\n({t,  ammActivityMap, ...rest}:\n     WithTranslation & { ammActivityMap: LoopringMap<LoopringMap<AmmPoolActivityRule[]>>|undefined } & any) => {    //ActivityMap<I, I>\n    //TODO: checkRouter\n\n    const {currency} = useSettings();\n    const {tradeFloat,snapShotData, pair, coinPairInfo, walletMap,ammMarketArray,myAmmMarketArray,myAmm} = useCoinPair({ammActivityMap});\n    const [tabIndex, setTabIndex] = React.useState<0 | 1>(0);\n    const [page, setPage] = React.useState(rest?.page ? rest.page : 1);\n    const handleChange = (event: any, newValue: 0 | 1) => {\n        setTabIndex(newValue);\n        setPage(1);\n    }\n    const _handlePageChange = React.useCallback((page: number) => {\n        setPage(page);\n    }, [])\n\n\n    return <>\n\n        <Grid container>\n            <Grid item xs={8}>\n                <Breadcrumbs aria-label=\"breadcrumb\">\n                    <Link color=\"textSecondary\" href=\"/#/liquidity/pools\">\n                        {t('labelAmmList')}\n                    </Link>\n                    <Typography color={'textSecondary'} display={'flex'} alignItems={'center'}\n                                justifyContent={'center'}\n                    >{pair.coinAInfo?.simpleName}-{pair.coinBInfo?.simpleName}</Typography>\n                </Breadcrumbs>\n            </Grid>\n            <Grid item xs={4} alignItems={'center'} justifyContent={'flex-end'} display={'flex'}>\n                <Link href=\"/#/liquidity/pools\" variant={'h5'}>\n                    {t('labelBack')}\n                </Link>\n            </Grid>\n        </Grid>\n        <Grid container marginTop={3}>\n            <Grid item xs={7}>\n                <TradeTitle {...{\n                    ...rest, t,\n                    ...pair,\n                    tradeFloat,\n                    isNew: false\n                }}></TradeTitle>\n            </Grid>\n        </Grid>\n        <Box flex={1} display={'flex'} alignItems={'stretch'} flexDirection=\"row\" marginTop={3}>\n            <Box flex={1} display={'flex'}>\n                <Grid container spacing={2} wrap={'nowrap'}>\n                    <Grid item md={5} xs={12} paddingRight={2} display={'flex'} flexDirection={'column'}\n                          alignItems={'stretch'} justifyContent={'flex-start'}>\n                        <BoxStyled paddingY={3} marginBottom={2} paddingX={1 / 2 * 5} display={'flex'} flexDirection={'column'}>\n                            <Typography component={'p'} color={'textSecondary'} display={'flex'}\n                                        justifyContent={'space-between'}>\n                                <Typography component={'span'}\n                                            style={{textTransform: 'capitalize'}}>{t('labelLiquidity')}</Typography>\n                                <Typography component={'span'}\n                                            style={{textTransform: 'uppercase'}}>{t('labelAPY')}</Typography>\n                            </Typography>\n                            <Typography component={'p'} color={'textPrimary'} display={'flex'}\n                                        justifyContent={'space-between'} marginTop={1}>\n                                <>\n                                    <Typography\n                                        component={'span'}> {typeof coinPairInfo.amountDollar === 'undefined' ? 'N/A' :\n                                        currency === Currency.dollar ? PriceTag.Dollar + getThousandFormattedNumbers(coinPairInfo.amountDollar) : PriceTag.Yuan + getThousandFormattedNumbers(coinPairInfo.amountYuan ? coinPairInfo.amountYuan : 0)}\n                                    </Typography>\n                                    <Typography\n                                        component={'span'}> {coinPairInfo.tradeFloat ? coinPairInfo.tradeFloat.APY : 'N/A'}%\n                                    </Typography>\n                                </>\n\n\n                            </Typography>\n\n                            <Typography component={'p'} color={'textSecondary'} display={'flex'}\n                                        justifyContent={'space-between'} marginTop={2}>\n                                <Typography component={'span'}\n                                            color={'textSecondary'}>\n                                    <Hidden mdDown>{t('labelLPTotal')}</Hidden>{t('labelLPTokens')}</Typography>\n                                <Typography component={'span'}\n                                            color={'textSecondary'}>{coinPairInfo.totalLPToken}</Typography>\n                            </Typography>\n                            <Typography component={'p'} color={'textSecondary'} display={'flex'}\n                                        justifyContent={'space-between'} marginTop={1}>\n\n                                <Typography component={'span'}\n                                            color={'textSecondary'}>\n                                    <Hidden\n                                        mdDown>{t('labelLPTotal')}</Hidden>{coinPairInfo.myCoinA?.simpleName}\n                                </Typography>\n\n                                <Typography component={'span'}\n                                            color={'textSecondary'}>{coinPairInfo.totalA}</Typography>\n                            </Typography>\n                            <Typography component={'p'} color={'textSecondary'} display={'flex'}\n                                        justifyContent={'space-between'} marginTop={1}>\n                                <Typography component={'span'}\n                                            color={'textSecondary'}>\n                                    <Hidden\n                                        mdDown>{t('labelLPTotal')}</Hidden>{coinPairInfo.myCoinB?.simpleName}\n                                </Typography>\n                                <Typography component={'span'}\n                                            color={'textSecondary'}>{coinPairInfo.totalB}</Typography>\n                            </Typography>\n\n                        </BoxStyled>\n                        <BoxStyled paddingY={3} marginBottom={2} paddingX={1 / 2 * 5} display={'flex'} flexDirection={'column'}>\n                            <Typography component={'p'} color={'textSecondary'} display={'flex'}\n                                        justifyContent={'space-between'} alignItems={'center'}>\n                                <Typography component={'span'} color={'textSecondary'} variant={'body2'} style={{textTransform: 'capitalize'}}>\n                                    {coinPairInfo.tradeFloat?.timeUnit} {t('labelVolume')}\n                                </Typography>\n                                <Typography component={'span'} color={'textSecondary'}>\n                                    {t('labelFee')} {/* ' : '*/}\n                                </Typography>\n                            </Typography>\n                            <Typography component={'p'} color={'textSecondary'} display={'flex'}\n                                        justifyContent={'space-between'} marginTop={1} alignItems={'center'}>\n                                <Typography component={'span'} variant={'h4'} color={'textPrimary'}>\n                                    {currency === Currency.dollar ? PriceTag.Dollar + getThousandFormattedNumbers(coinPairInfo.tradeFloat && coinPairInfo.tradeFloat.priceDollar ? coinPairInfo.tradeFloat.priceDollar as number : 0)\n                                        : PriceTag.Yuan + getThousandFormattedNumbers(coinPairInfo.tradeFloat && coinPairInfo.tradeFloat.priceYuan ? coinPairInfo.tradeFloat.priceYuan as number : 0)}\n                                </Typography>\n                                <Typography noWrap textAlign={'center'} component={'span'} color={'textSecondary'}\n                                            variant={'body2'} textOverflow={'ellipsis'} display={'flex'}\n                                            alignItems={'center'}>\n                                    <Typography component={'span'} color={'inherit'} variant={'inherit'}\n                                                display={'flex'} flexDirection={'column'}>\n                                        <Typography component={'span'} color={'inherit'} variant={'inherit'}>\n                                            {coinPairInfo.myCoinA?.simpleName}\n                                        </Typography>\n                                        <Typography component={'span'} color={'inherit'} variant={'inherit'}>\n                                            {coinPairInfo.feeA?getThousandFormattedNumbers(coinPairInfo.feeA):'N/A'}\n                                        </Typography>\n                                    </Typography>\n                                    <Typography component={'span'} color={'inherit'} variant={'h5'}\n                                                paddingX={1}>{' + '}</Typography>\n                                    <Typography component={'span'} color={'inherit'} variant={'inherit'}\n                                                display={'flex'} flexDirection={'column'}>\n                                        <Typography component={'span'} color={'inherit'} variant={'inherit'}>\n                                            {coinPairInfo.myCoinB?.simpleName}\n                                        </Typography>\n                                        <Typography component={'span'} color={'inherit'} variant={'inherit'}>\n                                            {coinPairInfo.feeB?getThousandFormattedNumbers(coinPairInfo.feeB):'N/A'}\n                                        </Typography>\n                                    </Typography>\n                                </Typography>\n                            </Typography>\n                        </BoxStyled>\n                        <BoxStyled paddingY={3} marginBottom={2} paddingX={1 / 2 * 5} display={'flex'} flexDirection={'column'}>\n                            <Typography component={'p'} color={'textSecondary'} display={'flex'}\n                                        justifyContent={'space-between'}>\n                                <Typography component={'span'}\n                                            color={'textSecondary'}> {t('labelMyPoolShare')}</Typography>\n                            </Typography>\n                            <Typography component={'p'} color={'textSecondary'} display={'flex'}\n                                        justifyContent={'space-between'} marginTop={1}>\n                                <Typography component={'span'}\n                                            color={'textSecondary'}>\n                                    <>{myAmm.balanceA ? getThousandFormattedNumbers(myAmm.balanceA,2)  : 'N/A'}</>\n                                    <> { coinPairInfo.myCoinA?.simpleName}</>\n                                </Typography>\n                                <Typography component={'span'} color={'textecondary'}\n                                            variant={'h5'}> {myAmm.feeA?getThousandFormattedNumbers(myAmm.feeA):'N/A'} {coinPairInfo.myCoinA?.simpleName}  </Typography>\n                            </Typography>\n                            <Typography component={'p'} color={'textSecondary'} display={'flex'}\n                                        justifyContent={'space-between'} marginTop={1}>\n                                <Typography component={'span'}\n                                            color={'textSecondary'}>\n                                    <>{myAmm.balanceB ? getThousandFormattedNumbers(myAmm.balanceB,2) : 'N/A'}</>\n                                    <> {coinPairInfo.myCoinB?.simpleName}</>\n                                </Typography>\n                                <Typography component={'span'} color={'textSecondary'}\n                                            variant={'h5'}> {myAmm.feeB?getThousandFormattedNumbers(myAmm.feeB):'N/A'} {coinPairInfo.myCoinB?.simpleName}</Typography>\n                            </Typography>\n                        </BoxStyled>\n                        <BoxStyled paddingY={3} paddingX={1 / 2 * 5} display={'flex'}\n                                   flexDirection={'column'}>\n                            <Box display={'flex'} flexDirection={'row'} justifyContent={'space-between'}>\n                                <Typography display={'flex'} flexDirection={'column'} component={'div'}>\n                                    <Typography variant={'body2'} component={'h5'} color={'textSecondary'}>\n                                        {t('labelReward')}\n                                    </Typography>\n                                    <Typography variant={'body1'} component={'span'} color={'textPrimary'}>\n                                        {typeof coinPairInfo.isActivity === 'undefined' ? 'N/A' : <>\n                                            <Typography\n                                                component={'span'}>{coinPairInfo.activity?getThousandFormattedNumbers(coinPairInfo.activity.totalRewards):'N/A'} </Typography>\n                                            <Typography\n                                                component={'span'}>{coinPairInfo.activity?.rewardToken?.simpleName}</Typography>\n                                        </>}\n                                    </Typography>\n                                </Typography>\n                                <Typography display={'flex'} flexDirection={'column'} alignItems={'flex-end'}\n                                            component={'div'}>\n                                    <Typography variant={'body2'} component={'h5'} color={'textSecondary'}>\n                                        {t('labelMyReward')}\n                                    </Typography>\n                                    <Typography variant={'body1'} component={'span'} color={'textPrimary'}>\n                                        {/*{typeof coinPairInfo.isActivity === 'undefined' ? 'N/A' : <>*/}\n                                        {typeof myAmm.reward === 'undefined' ? 'N/A' : <>\n\n                                        <Typography component={'span'}> {getThousandFormattedNumbers(myAmm.reward)} </Typography>\n                                            <Typography\n                                                component={'span'}> {coinPairInfo.activity?.rewardToken?.simpleName}</Typography></>}\n\n                                    </Typography>\n                                </Typography>\n                            </Box>\n                            <Typography alignSelf={'flex-start'} variant={'body2'} color={'textSecondary'}\n                                        component=\"span\" marginTop={1}>\n                                {typeof coinPairInfo.isActivity === 'undefined' ? t('labelNoActiveEvent')\n                                    : <>\n                                        {t('labelDate')} :\n                                       <> {moment(coinPairInfo.activity?.duration.from).format('L') + ' - ' + moment(coinPairInfo.activity?.duration.to).format('L')}</>\n                                    </>\n                                }\n                            </Typography>\n                        </BoxStyled>\n                    </Grid>\n                    <Hidden mdDown>\n                        <Grid item md={7} paddingRight={2}>\n\n\n                        </Grid>\n                    </Hidden>\n                </Grid>\n            </Box>\n            <Box display={'flex'}>\n                <AmmPanelView pair={pair} walletMap={walletMap} snapShotData={snapShotData}/>\n            </Box>\n        </Box>\n        <Grid container marginY={3}>\n            <Grid item xs={12}>\n                <Tabs value={tabIndex}\n                      onChange={handleChange}\n                      aria-label=\"tabs switch\">\n                    <Tab label={t('labelAll')} {...applyProps(0)} />\n                    <Tab label={t('labelMe')} {...applyProps(1)} />\n                </Tabs>\n                <StylePaper marginTop={2} >\n                    {/*ammRecordArray*/}\n                    {tabIndex === 0 ?  <AmmRecordTable\n                        rawData={ammMarketArray}\n                        handlePageChange={_handlePageChange} page={page}\n                    /> : <AmmRecordTable rawData={myAmmMarketArray}  handlePageChange={_handlePageChange} page={page} /> }\n                </StylePaper>\n            </Grid>\n\n        </Grid>\n\n    </>\n})\n\n\n\n","import { AmmProps } from '@loopring-web/component-lib';\nimport React from 'react';\nimport { AmmCardProps, AmmData, AmmInData, IBData } from '@loopring-web/component-lib/static-resource';\nimport { AmmCard } from '@loopring-web/component-lib/components/block/AmmCard';\nimport { Grid } from '@material-ui/core';\nimport { useAmmMiningUI } from './hook';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport { withTranslation } from 'react-i18next';\nimport { AmmPoolActivityRule, LoopringMap } from 'loopring-sdk/dist/defs/loopring_defs';\n\nconst AmmCardWrap = React.memo(React.forwardRef((props:AmmCardProps<{[key:string]:any}>,ref) => {\n    return props? <AmmCard ref={ref} {...props} /> :<></>\n}));\nconst AmmList = <I extends {[key:string]:any}>({ammActivityViewMap}: {ammActivityViewMap: Array<AmmCardProps<I>> })=>{\n    return  <>{ammActivityViewMap.map((item:AmmCardProps<I>,index)=>\n        <Grid item xs={12} sm={6} lg={4}  key={index}>\n            <AmmCardWrap {...item as any} />\n        </Grid>\n    ) }</>\n}\n\nexport const AmmMiningView =  withTranslation('common')(<T extends AmmData<C extends IBData<I> ? C : IBData<I>>, I,\n    ACD extends AmmInData<I>,\n    C = IBData<I>>({ammProps,t,ammActivityMap,...rest}: { ammProps:AmmProps<T ,I,ACD>,\n    ammActivityMap: LoopringMap<LoopringMap<AmmPoolActivityRule[]>>|undefined,   \n} & any) => {\n    const { ammActivityViewMap,\n        ammActivityPastViewMap} = useAmmMiningUI({ammActivityMap});\n    const [tabIndex,setTabIndex] = React.useState<0|1>(0);\n    const handleChange = (event: any, newValue: 0|1) => {\n        setTabIndex(newValue);\n    }\n\n    return <Grid container spacing={2}>\n        <Grid item xs={12}>\n            <Tabs value={tabIndex}\n                  onChange={handleChange}\n                  aria-label=\"tabs switch\">\n                <Tab label={t('labelCurrentActivities')}  />\n                <Tab label={t('labelPastActivities')}  />\n            </Tabs>\n        </Grid>\n        <AmmList ammActivityViewMap={tabIndex === 0 ? ammActivityViewMap : ammActivityPastViewMap}/>\n    </Grid>\n})\n","import { AmmCardProps } from '@loopring-web/component-lib/static-resource';\nimport { AmmPoolActivityRule, AmmPoolActivityStatus,LoopringMap } from 'loopring-sdk';\nimport React from 'react';\nimport {\n    makeUIAmmActivityMap\n} from '../../../hooks/help/makeUIAmmActivityMap';\n\nimport { useUserRewards } from '../../../stores/userRewards';\n\nexport const useAmmMiningUI = <R extends { [ key: string ]: any }, I extends { [ key: string ]: any }>(\n    {\n        ammActivityMap\n    }: { ammActivityMap: LoopringMap<LoopringMap<AmmPoolActivityRule[]>> | undefined }\n): {\n    ammActivityViewMap: Array<AmmCardProps<I>>,\n    ammActivityPastViewMap: Array<AmmCardProps<I>>\n} => {\n    const  userRewardsMapState =  useUserRewards();// store.getState().userRewardsMap\n    // const {coinMap} = useTokenMap();\n    // const ammMapState = useAmmMap();\n    // const walletLayer2State = useWalletLayer2();\n    const [ammActivityViewMap, setAmmActivityViewMap] = React.useState<Array<AmmCardProps<I>>>([]);\n\n\n    const [ammActivityPastViewMap, setAmmActivityPastViewMap] = React.useState<Array<AmmCardProps<I>>>(\n        []);\n    // const [ammUserRewardMap, setAmmUserRewardMap] = React.useState<AmmUserRewardMap>(\n    //     {});\n\n\n    // );\n    React.useEffect(() => {\n        if(ammActivityMap && Object.keys(ammActivityMap).length>0 ){\n\n           // getAmmPoolUserRewards().then((ammUserRewardMap)=>{\n                // setAmmUserRewardMap(ammUserRewardMap as AmmUserRewardMap);\n                setAmmActivityViewMap(makeUIAmmActivityMap(\n                    {\n                        ammActivityMap,\n                        type: 'AMM_MINING',\n                        ammPoolActivityStatus: [AmmPoolActivityStatus.NotStarted, AmmPoolActivityStatus.InProgress]\n                    }, userRewardsMapState.userRewardsMap\n                ));\n                setAmmActivityPastViewMap(\n                    makeUIAmmActivityMap(\n                        {\n                            ammActivityMap,\n                            type: 'AMM_MINING',\n                            ammPoolActivityStatus: [AmmPoolActivityStatus.EndOfGame]\n                        }, userRewardsMapState.userRewardsMap\n                    ))\n          //  })\n        }\n\n    },[ammActivityMap])\n    React.useEffect(() => {\n            if (userRewardsMapState.status === \"ERROR\") {\n                //TODO: solve error\n                userRewardsMapState.statusUnset();\n            } else if (userRewardsMapState.status === \"DONE\") {\n                userRewardsMapState.statusUnset();\n                setAmmActivityViewMap(\n                    makeUIAmmActivityMap(\n                    {\n                        ammActivityMap,\n                        type: 'AMM_MINING',\n                        ammPoolActivityStatus: [AmmPoolActivityStatus.NotStarted, AmmPoolActivityStatus.InProgress]\n                    }, userRewardsMapState.userRewardsMap\n                ));\n                setAmmActivityPastViewMap(\n                    makeUIAmmActivityMap(\n                        {\n                            ammActivityMap,\n                            type: 'AMM_MINING',\n                            ammPoolActivityStatus: [AmmPoolActivityStatus.EndOfGame]\n                        }, userRewardsMapState.userRewardsMap\n                    ))\n                // if (userRewardsMapState.ammMap) {\n                //     setAmmActivityViewMap(\n                //         makeUIAmmActivityMap(\n                //             {\n                //                 ammActivityMap,\n                //                 type: 'AMM_MINING',\n                //                 ammPoolActivityStatus: [AmmPoolActivityStatus.NotStarted, AmmPoolActivityStatus.InProgress]\n                //             }, ammUserRewardMap\n                //         ))\n                //     setAmmActivityPastViewMap(\n                //         makeUIAmmActivityMap(\n                //             {\n                //                 ammActivityMap,\n                //                 type: 'AMM_MINING',\n                //                 ammPoolActivityStatus: [AmmPoolActivityStatus.EndOfGame]\n                //             }, ammUserRewardMap\n                //         ))\n                //\n                // }\n\n            }\n        },\n        [userRewardsMapState.status]\n    )\n\n\n    return {\n        ammActivityViewMap,\n        ammActivityPastViewMap\n    }\n\n}\n","import {\n    AmmPoolActivityRule,\n    AmmPoolSnapshot,\n    LoopringMap,\n    TickerData\n} from 'loopring-sdk';\nimport React from 'react';\nimport { AmmRecordRow, MyPoolRow} from '@loopring-web/component-lib';\nimport { updateWallet, WalletMapExtend } from '../../../hooks/help/updateWallet';\nimport { getUserAmmTransaction, makeMyAmmMarketArray } from '../../../hooks/help/marketTable';\nimport { useTokenMap } from '../../../stores/token';\nimport { useWalletLayer2 } from '../../../stores/walletLayer2';\nimport { makeSummaryMyAmm, SummaryMyAmm } from '../../../hooks/help/makeUIAmmActivityMap';\nimport { useUserRewards } from '../../../stores/userRewards';\n\n\nexport const useOverview = <R extends { [ key: string ]: any }, I extends { [ key: string ]: any }>(\n    {\n        ammActivityMap\n    }: { ammActivityMap: LoopringMap<LoopringMap<AmmPoolActivityRule[]>> | undefined }\n): {\n    myAmmMarketArray: AmmRecordRow<R>[],\n    summaryReward: SummaryMyAmm | undefined,\n    myPoolRow: AmmRecordRow<R>[]\n    // ammActivityViewMap: Array<AmmCardProps<I>>,\n    // ammActivityPastViewMap: Array<AmmCardProps<I>>\n} => {\n    const walletLayer2State = useWalletLayer2();\n    const userRewardsMapState = useUserRewards();\n    const {coinMap, tokenMap, marketArray} = useTokenMap();\n\n    const [walletMap, setWalletMap] = React.useState<WalletMapExtend<R> | undefined>(undefined);\n    const [summaryReward, setSummaryReward] = React.useState<SummaryMyAmm | undefined>(undefined);\n    const [myPoolRow,setMyPoolRow] = React.useState<MyPoolRow<R>[]>([])\n    const [myAmmMarketArray, setMyAmmMarketArray] = React.useState<AmmRecordRow<R>[]>([]);\n    // const [ammUserRewardMap, setAmmUserRewardMap] = React.useState<AmmUserRewardMap|undefined>(undefined);\n    const [snapShotData,setSnapShotData] = React.useState<{\n        tickerData: TickerData|undefined\n        ammPoolsBalanc: AmmPoolSnapshot|undefined\n    }|undefined>(undefined);\n    const walletLayer2DoIt = React.useCallback(() => {\n        //let {market} = getExistedMarket(marketArray, pair.coinAInfo?.simpleName as string, pair.coinBInfo?.simpleName as string);\n\n        const {walletMap: _walletMap} = updateWallet();\n        setWalletMap(_walletMap)\n        if (_walletMap) {\n            getUserAmmTransaction()?.then((marketTrades) => {\n                let _myTradeArray = makeMyAmmMarketArray(undefined, marketTrades)\n                setMyAmmMarketArray(_myTradeArray ? _myTradeArray : [])\n            })\n        }\n        return _walletMap\n    }, [updateWallet, getUserAmmTransaction, makeMyAmmMarketArray, marketArray])\n\n    React.useEffect(() => {\n       if(userRewardsMapState.userRewardsMap){\n           switch (walletLayer2State.status ) {\n               case \"ERROR\":\n                   walletLayer2State.statusUnset();\n                   // setState('ERROR')\n                   //TODO: show error at button page show error  some retry dispath again\n                   break;\n               case \"DONE\":\n                   walletLayer2State.statusUnset();\n                   const _walletMap = walletLayer2DoIt();\n                   //   const _myAmm:MyAmmLP<C> = makeMyAmm(undefined,_walletMap,userRewardsMapState.userRewardsMap,snapShotData);\n                   //  setMyAmm(_myAmm)\n                   break;\n               default:\n                   break;\n\n           }\n       }\n\n    }, [walletLayer2State.status,snapShotData])\n\n    React.useEffect(() => {\n        if (walletLayer2State.walletLayer2) {\n            walletLayer2DoIt();\n        }\n        // @ts-ignore\n        // Promise.all([...apiList]).then(\n        //     ([{ammPoolsBalanc,tickMap}\n        //          //  ,ammUserRewardMap\n        //      ]: any[]) => {\n        //         if (tokenMap) {\n        //\n        //\n        //         }\n        //     }).catch((error)=>{\n        //     console.log(error);\n        //     throw  Error\n        // })\n\n    }, []);\n    // const rawData: Row<any>[] = [\n    //     {\n    //         feeA: 122,\n    //         feeB: 21,\n    //         feeDollar: 0.0012,\n    //         feeYuan: 0.0312,\n    //         reward: 123,\n    //         rewardToken: {\n    //             icon: 'https://exchange.loopring.io/assets/images/ethereum/assets/0x565aBA393aac4dFbFf4333B06c407458002C6183/logo.png',\n    //             name: 'USDT',\n    //             simpleName: 'USDT',\n    //             description: '',\n    //             company: 'USDT'\n    //         },\n    //         balanceA: 12131,\n    //         balanceB: 0.0012,\n    //         balanceYuan: 1232131,\n    //         balanceDollar: 232,\n    //         ammDetail: {\n    //             coinAInfo: {\n    //                 icon: 'https://exchange.loopring.io/assets/images/ethereum/assets/0x9A0aBA393aac4dFbFf4333B06c407458002C6183/logo.png',\n    //                 name: 'ETH',\n    //                 simpleName: 'ETH',\n    //                 description: '',\n    //                 company: 'ETH'\n    //             },\n    //             coinBInfo: {\n    //                 icon: 'https://exchange.loopring.io/assets/images/ethereum/assets/0x565aBA393aac4dFbFf4333B06c407458002C6183/logo.png',\n    //                 name: 'LRC',\n    //                 simpleName: 'LRC',\n    //                 description: '',\n    //                 company: 'LRC'\n    //             },\n    //             amountDollar: 12,\n    //             amountYuan: 194.89,\n    //             totalLPToken: 12132131,\n    //             totalA: 0.002,\n    //             totalB: 12344,\n    //             isNew: true,\n    //             isActivity: false,\n    //         }\n    //     },\n    //     {\n    //         feeA: 122,\n    //         feeB: 21,\n    //         feeDollar: 0.0012,\n    //         feeYuan: 0.0312,\n    //         reward: 123,\n    //         rewardToken: {\n    //             icon: 'https://exchange.loopring.io/assets/images/ethereum/assets/0x565aBA393aac4dFbFf4333B06c407458002C6183/logo.png',\n    //             name: 'USDT',\n    //             simpleName: 'USDT',\n    //             description: '',\n    //             company: 'USDT'\n    //         },\n    //         balanceA: 12131,\n    //         balanceB: 0.0012,\n    //         balanceYuan: 1232131,\n    //         balanceDollar: 232,\n    //         ammDetail: {\n    //             coinAInfo: {\n    //                 icon: 'https://exchange.loopring.io/assets/images/ethereum/assets/0x9A0aBA393aac4dFbFf4333B06c407458002C6183/logo.png',\n    //                 name: 'ETH',\n    //                 simpleName: 'ETH',\n    //                 description: '',\n    //                 company: 'ETH'\n    //             },\n    //             coinBInfo: {\n    //                 icon: 'https://exchange.loopring.io/assets/images/ethereum/assets/0x565aBA393aac4dFbFf4333B06c407458002C6183/logo.png',\n    //                 name: 'LRC',\n    //                 simpleName: 'LRC',\n    //                 description: '',\n    //                 company: 'LRC'\n    //             },\n    //             amountDollar: 12,\n    //             amountYuan: 194.89,\n    //             totalLPToken: 12132131,\n    //             totalA: 0.002,\n    //             totalB: 12344,\n    //             isNew: true,\n    //             isActivity: false,\n    //         }\n    //     },\n    //     {\n    //         feeA: 122,\n    //         feeB: 21,\n    //         feeDollar: 0.0012,\n    //         feeYuan: 0.0312,\n    //         reward: 123,\n    //         rewardToken: {\n    //             icon: 'https://exchange.loopring.io/assets/images/ethereum/assets/0x565aBA393aac4dFbFf4333B06c407458002C6183/logo.png',\n    //             name: 'USDT',\n    //             simpleName: 'USDT',\n    //             description: '',\n    //             company: 'USDT'\n    //         },\n    //         balanceA: 12131,\n    //         balanceB: 0.0012,\n    //         balanceYuan: 1232131,\n    //         balanceDollar: 232,\n    //         ammDetail: {\n    //             coinAInfo: {\n    //                 icon: 'https://exchange.loopring.io/assets/images/ethereum/assets/0x9A0aBA393aac4dFbFf4333B06c407458002C6183/logo.png',\n    //                 name: 'ETH',\n    //                 simpleName: 'ETH',\n    //                 description: '',\n    //                 company: 'ETH'\n    //             },\n    //             coinBInfo: {\n    //                 icon: 'https://exchange.loopring.io/assets/images/ethereum/assets/0x565aBA393aac4dFbFf4333B06c407458002C6183/logo.png',\n    //                 name: 'LRC',\n    //                 simpleName: 'LRC',\n    //                 description: '',\n    //                 company: 'LRC'\n    //             },\n    //             amountDollar: 12,\n    //             amountYuan: 194.89,\n    //             totalLPToken: 12132131,\n    //             totalA: 0.002,\n    //             totalB: 12344,\n    //             isNew: true,\n    //             isActivity: false,\n    //         }\n    //     },\n    //     {\n    //         feeA: 122,\n    //         feeB: 21,\n    //         feeDollar: 0.0012,\n    //         feeYuan: 0.0312,\n    //         reward: 123,\n    //         rewardToken: {\n    //             icon: 'https://exchange.loopring.io/assets/images/ethereum/assets/0x565aBA393aac4dFbFf4333B06c407458002C6183/logo.png',\n    //             name: 'USDT',\n    //             simpleName: 'USDT',\n    //             description: '',\n    //             company: 'USDT'\n    //         },\n    //         balanceA: 12131,\n    //         balanceB: 0.0012,\n    //         balanceYuan: 1232131,\n    //         balanceDollar: 232,\n    //         ammDetail: {\n    //             coinAInfo: {\n    //                 icon: 'https://exchange.loopring.io/assets/images/ethereum/assets/0x9A0aBA393aac4dFbFf4333B06c407458002C6183/logo.png',\n    //                 name: 'ETH',\n    //                 simpleName: 'ETH',\n    //                 description: '',\n    //                 company: 'ETH'\n    //             },\n    //             coinBInfo: {\n    //                 icon: 'https://exchange.loopring.io/assets/images/ethereum/assets/0x565aBA393aac4dFbFf4333B06c407458002C6183/logo.png',\n    //                 name: 'LRC',\n    //                 simpleName: 'LRC',\n    //                 description: '',\n    //                 company: 'LRC'\n    //             },\n    //             amountDollar: 12,\n    //             amountYuan: 194.89,\n    //             totalLPToken: 12132131,\n    //             totalA: 0.002,\n    //             totalB: 12344,\n    //             isNew: true,\n    //             isActivity: false,\n    //         }\n    //     },\n    //     {\n    //         feeA: 122,\n    //         feeB: 21,\n    //         feeDollar: 0.0012,\n    //         feeYuan: 0.0312,\n    //         reward: 123,\n    //         rewardToken: {\n    //             icon: 'https://exchange.loopring.io/assets/images/ethereum/assets/0x565aBA393aac4dFbFf4333B06c407458002C6183/logo.png',\n    //             name: 'USDT',\n    //             simpleName: 'USDT',\n    //             description: '',\n    //             company: 'USDT'\n    //         },\n    //         balanceA: 12131,\n    //         balanceB: 0.0012,\n    //         balanceYuan: 1232131,\n    //         balanceDollar: 232,\n    //         ammDetail: {\n    //             coinAInfo: {\n    //                 icon: 'https://exchange.loopring.io/assets/images/ethereum/assets/0x9A0aBA393aac4dFbFf4333B06c407458002C6183/logo.png',\n    //                 name: 'ETH',\n    //                 simpleName: 'ETH',\n    //                 description: '',\n    //                 company: 'ETH'\n    //             },\n    //             coinBInfo: {\n    //                 icon: 'https://exchange.loopring.io/assets/images/ethereum/assets/0x565aBA393aac4dFbFf4333B06c407458002C6183/logo.png',\n    //                 name: 'LRC',\n    //                 simpleName: 'LRC',\n    //                 description: '',\n    //                 company: 'LRC'\n    //             },\n    //             amountDollar: 12,\n    //             amountYuan: 194.89,\n    //             totalLPToken: 12132131,\n    //             totalA: 0.002,\n    //             totalB: 12344,\n    //             isNew: true,\n    //             isActivity: false,\n    //         }\n    //     },\n    // ]\n\n\n    // React.useEffect(() => {\n    //     if (ammActivityMap && Object.keys(ammActivityMap).length > 0) {\n    //         // getAmmPoolUserRewards().then((ammUserRewardMap)=>{\n    //         // setAmmUserRewardMap(ammUserRewardMap as AmmUserRewardMap);\n    //         const {userRewardsMap} = store.getState().userRewardsMap\n    //\n    //         // setAmmActivityViewMap(makeUIAmmActivityMap(\n    //         //         {\n    //         //             ammActivityMap,\n    //         //             type: 'AMM_MINING',\n    //         //             ammPoolActivityStatus: [AmmPoolActivityStatus.NotStarted, AmmPoolActivityStatus.InProgress]\n    //         //         }, userRewardsMap\n    //         //     ));\n    //         //     setAmmActivityPastViewMap(\n    //         //         makeUIAmmActivityMap(\n    //         //             {\n    //         //                 ammActivityMap,\n    //         //                 type: 'AMM_MINING',\n    //         //                 ammPoolActivityStatus: [AmmPoolActivityStatus.EndOfGame]\n    //         //             }, userRewardsMap\n    //         //         ))\n    //         //     // })\n    //     }\n    //\n    // }, [ammActivityMap])\n    React.useEffect(() => {\n            if (userRewardsMapState.status === \"ERROR\") {\n                //TODO: solve error\n                userRewardsMapState.statusUnset();\n            } else if (userRewardsMapState.status === \"DONE\") {\n                userRewardsMapState.statusUnset();\n                // setAmmUserRewardMap()\n                const summaryReward = makeSummaryMyAmm({userRewardsMap:userRewardsMapState.userRewardsMap});\n                setSummaryReward(summaryReward)\n\n            }\n        },\n        [userRewardsMapState.status]\n    )\n    return {\n        myAmmMarketArray,\n        summaryReward,\n        myPoolRow,\n        // ammActivityViewMap,\n        // ammActivityPastViewMap\n    }\n\n}\n","import React from 'react'\nimport styled from '@emotion/styled'\nimport { Box, Grid, Typography } from '@material-ui/core'\nimport { WithTranslation, withTranslation } from 'react-i18next'\nimport {\n    AmmRecordTable,\n    AmmTradeType,\n    ChartType,\n    ScaleAreaChart,\n    TablePaddingX,\n    ToggleButtonGroup,\n    useSettings\n} from '@loopring-web/component-lib'\nimport { MyPoolRow as Row, MyPoolTable } from '@loopring-web/component-lib/components/tableList/myPoolTable';\nimport {\n    CoinInfo,\n    Currency,\n    getThousandFormattedNumbers,\n    PriceTag\n} from '@loopring-web/component-lib/src/static-resource';\n\nimport { AmmPoolActivityRule, LoopringMap } from 'loopring-sdk/dist/defs/loopring_defs';\nimport { useOverview } from './hook';\n\n\n//TODO: FIXED:  demo data\n\n\nconst toggleData = [\n    {value: '24 H', key: '24 H'},\n    {value: '1 W', key: '1 W'},\n    {value: 'ALL', key: 'ALL'},\n]\n\nconst StylePaper = styled(Box)`\n  width: 100%;\n  height: 100%;\n  flex: 1;\n` as typeof Box;\n\nconst StyleWrapper = styled(Grid)`\n  position: relative;\n  width: 100%;\n  background-color: ${({theme}) => theme.colorBase.background().default};\n  border-radius: ${({theme}) => theme.unit}px;\n` as typeof Grid\n\n\n\nconst StyledBtnGroupWrapper = styled(Box)`\n  position: absolute;\n  z-index: 99;\n  top: ${({theme}) => theme.unit}px;\n  width: 100%;\n` as typeof Box\n\nconst TableWrapStyled = styled(Grid)`\n  & {\n    background-color: ${({theme}) => theme.colorBase.background().default};\n    ${({theme}) => theme.border.defaultFrame({c_key: 'blur', d_R: 1})};\n  }\n\n  ${({theme}) => TablePaddingX({pLeft: theme.unit * 3, pRight: theme.unit * 3})}\n` as typeof Grid\n\nexport const LiquidityOverview = withTranslation('common')(\n    <R extends { [ key: string ]: any }, I extends { [ key: string ]: any }>\n    ({t, ammActivityMap, ...rest}:\n         WithTranslation &\n         { ammActivityMap: LoopringMap<LoopringMap<AmmPoolActivityRule[]>> | undefined }\n    ) => {\n        const [chartPeriod, setChartPeriod] = React.useState('ALL');\n        const [page, setPage] = React.useState(1);\n        const {currency} = useSettings();\n\n        const _handlePageChange = React.useCallback((page: number) => {\n            setPage(page);\n        }, [])\n\n        const {myAmmMarketArray, summaryReward, myPoolRow} = useOverview({ammActivityMap});\n        return (\n            <>\n                <StyleWrapper container spacing={1} padding={3} margin={0}>\n                    <Grid display={'flex'} flexDirection={'column'} justifyContent={'space-around'} item sm={3}>\n                        <Typography variant={'body1'} component={'h5'}\n                                    color={'textSecondary'}>{t('labelTotalPositionValue')}</Typography>\n                        <Typography variant={'h4'} marginTop={1}>\n                            {summaryReward === undefined ? 'N/A' : currency === Currency.dollar ? PriceTag.Dollar\n                                + getThousandFormattedNumbers(summaryReward.rewardDollar !== undefined? summaryReward.rewardDollar : 0)\n                                + getThousandFormattedNumbers( summaryReward.feeDollar !== undefined?summaryReward.feeDollar : 0)\n                                : PriceTag.Yuan + getThousandFormattedNumbers(summaryReward.rewardYuan ? summaryReward.rewardYuan : 0)\n                                    +  getThousandFormattedNumbers(summaryReward.feeYuan ? summaryReward.feeYuan : 0)}\n                        </Typography>\n                    </Grid>\n                    <Grid display={'flex'} flexDirection={'column'} justifyContent={'space-around'} item sm={3}>\n                        <Typography variant={'body1'} component={'h5'}\n                                    color={'textSecondary'}>{t('labelFeeRewards')}</Typography>\n                        <Typography variant={'h4'} marginTop={1}>\n                            {summaryReward === undefined ? 'N/A' : currency === Currency.dollar ? PriceTag.Dollar\n                                + getThousandFormattedNumbers(summaryReward.feeDollar ? summaryReward.feeDollar : 0)\n                                : PriceTag.Yuan\n                                + getThousandFormattedNumbers(summaryReward.feeYuan ? summaryReward.feeYuan : 0)}\n                        </Typography>\n                    </Grid>\n                    <Grid display={'flex'} flexDirection={'column'} justifyContent={'space-around'} item sm={3}>\n                        <Typography variant={'body1'} component={'h5'}\n                                    color={'textSecondary'}>{t('labelMiningRewards')}</Typography>\n                        <Typography variant={'h4'} marginTop={1}>\n                            {summaryReward === undefined ? 'N/A' : currency === Currency.dollar ? PriceTag.Dollar\n                                + getThousandFormattedNumbers(summaryReward.rewardDollar ? summaryReward.rewardDollar : 0)\n                                : PriceTag.Yuan\n                                + getThousandFormattedNumbers(summaryReward.rewardYuan ? summaryReward.rewardYuan : 0)}\n                        </Typography>\n                    </Grid>\n                </StyleWrapper>\n                <StyleWrapper container marginY={2} height={340}>\n                    <StyledBtnGroupWrapper display={'flex'} padding={3} justifyContent={'space-between'}>\n                        <Typography variant={'body1'} component={'h5'}\n                                    color={'textSecondary'}>{t('labelLiquidityValue')}</Typography>\n                        <Box marginRight={-1}>\n                            <ToggleButtonGroup exclusive size=\"small\" {...{\n                                ...rest,\n                                t,\n                                data: toggleData,\n                                value: chartPeriod,\n                                setValue: setChartPeriod\n                            }} />\n                        </Box>\n                    </StyledBtnGroupWrapper>\n                    <ScaleAreaChart type={ChartType.Trend} data={[]}/>\n                </StyleWrapper>\n                <Typography paddingLeft={2} variant={'h4'}>{t('labelMyAmm')}</Typography>\n                <TableWrapStyled container marginY={2} paddingY={2} flex={1} height={568}>\n                    <Grid item xs={12} display={'flex'} flexDirection={'column'}>\n                        <MyPoolTable\n                            rawData={myPoolRow}\n                            pagination={{pageSize: 5}}\n                            handleDeposit={(row: any) => {\n                                console.log()\n                            }}\n                            handleWithdraw={(row: any) => {\n                                console.log()\n                            }}\n                            handlePageChange={() => {\n                            }}\n                        />\n                    </Grid>\n                </TableWrapStyled>\n                <Typography paddingLeft={2} variant={'h4'}>{t('labelMyAmmRecord')}</Typography>\n                <TableWrapStyled container marginTop={2} paddingY={2} flex={1}>\n                    <Grid item xs={12} display={'flex'} flexDirection={'column'}>\n                        <AmmRecordTable rawData={myAmmMarketArray} handlePageChange={_handlePageChange} page={page}/>\n                    </Grid>\n                </TableWrapStyled>\n            </>\n        )\n    })","import { useRouteMatch } from 'react-router'\n\nimport { Box } from '@material-ui/core'\nimport {\n    SubMenu,\n    SubMenuList as BasicSubMenuList,\n} from '@loopring-web/component-lib'\nimport { withTranslation } from 'react-i18next'\nimport { subMenuLiquidity } from '@loopring-web/component-lib/src/static-resource'\nimport { PoolsPanel } from './PoolsPanel'\nimport { CoinPairPanel } from './CoinPairPanel';\nimport { AmmMiningView } from './AmmMining';\nimport { LiquidityOverview } from './LiquidityOverview'\nimport { useAmmPool } from './hook';\n\nexport const subMenu = subMenuLiquidity\n\nconst SubMenuList = withTranslation(['layout','common'], { withRef: true })(BasicSubMenuList);\nexport const LiquidityPage = () => {\n\n    // const { ammFee } = useAmmPool('LRC', 'ETH')\n    //\n    // console.log('--- > ammFee:', ammFee)\n    //\n    const {ammActivityMap} = useAmmPool();\n    let match: any = useRouteMatch(['/liquidity/:item',':next/']);\n    const selected = match?.params.item ?? 'pools'\n    let matchPair: any = useRouteMatch(['/liquidity/:item/:next/:symbol']);\n    let symbol:any = undefined\n    if (matchPair && matchPair?.params?.next && matchPair.params.item === 'pools') {\n       if(!matchPair.params.symbol){\n           symbol='LRC-ETH';\n       }else{\n           symbol=matchPair.params.symbol;\n       }\n    }\n    \n    return (\n        <>\n            { symbol && <Box display={'flex'} flexDirection={'column'}  flex={1} alignSelf={'flex-start'}>\n              <CoinPairPanel ammActivityMap={ammActivityMap}/>\n            </Box>\n            }\n            {!symbol && <>  <Box width={'200px'} display={'flex'} justifyContent={'stretch'} marginRight={3} marginBottom={3}>\n                    <SubMenu>\n                        <SubMenuList selected={selected} subMenu={subMenu as any} />\n                    </SubMenu>\n                </Box>\n                <Box  minHeight={420}  display={'flex'} alignItems={'stretch'} justifyContent={'stretch'} flexDirection=\"column\" marginTop={0} flex={1} marginBottom={3}>\n                    {(selected === 'pools' && !symbol ) && <PoolsPanel ammActivityMap={ammActivityMap}/>}\n                    {(selected === 'amm-mining' && !symbol ) && <AmmMiningView ammActivityMap={ammActivityMap}/>}\n                    {(selected === 'my-liquidity' && !symbol ) && <LiquidityOverview ammActivityMap={ammActivityMap}/>}\n                    {selected === 'orderBook-Mining' && <AmmMiningView ammActivityMap={ammActivityMap}/>}\n                    {/*{selected === 'orders' && <OrderPanel />}*/}\n                </Box>\n             </>\n            }\n        </>\n    )\n\n}\n","import React from 'react';\nimport { useAmmActivityMap } from '../../stores/Amm/AmmActivityMap';\n\nimport { AmmPoolActivityRule, LoopringMap } from 'loopring-sdk';\nimport { useAccount } from '../../stores/account/hook';\nimport { useUserRewards } from '../../stores/userRewards';\n\nexport const useAmmPool = <R extends {[key:string]:any},I extends {[key:string]:any}>()=>{\n  //  const ammActivityRules = await api.getAmmPoolActivityRules()\n  //   useAmmActivityMap\n    //{statusUnset: AmmStatusUnset,ammActivityMap,}\n    const AmmActivityMapState  = useAmmActivityMap()\n    const {updateUserRewards}  = useUserRewards()\n    const {account} = useAccount();\n    const [ammActivityMap,setAmmActivityMap] = React.useState<LoopringMap<LoopringMap<AmmPoolActivityRule[]>>|undefined>(AmmActivityMapState.ammActivityMap)\n    React.useEffect(() => {\n        switch (AmmActivityMapState.status) {\n            case \"ERROR\":\n                AmmActivityMapState.statusUnset();\n                // setState('ERROR')\n                //TODO: show error at button page show error  some retry dispath again\n                break;\n            case \"DONE\":\n                AmmActivityMapState.statusUnset();\n                setAmmActivityMap(AmmActivityMapState.ammActivityMap)\n                break;\n            default:\n                break;\n\n        }\n    }, [AmmActivityMapState.status])\n\n    //TODO tickMap\n    React.useEffect(() => {\n        if(account.accountId){\n            updateUserRewards()\n        }\n    }, [account.accountId])\n\n    return {\n        ammActivityMap\n    }\n\n}\n\n","import { HashRouter as Router, Route, Switch, } from 'react-router-dom'\n\nimport Header from 'layouts/header'\n\nimport QuotePage from 'pages/QuotePage'\nimport { SwapPage } from 'pages/SwapPage'\n\nimport DebugPage from 'pages/DebugPage'\n\nimport Container from '@material-ui/core/Container'\nimport { Box } from '@material-ui/core'\nimport { DevWrapper } from '../provider/'\nimport { Layer2Page } from '../pages/Layer2Page'\nimport { LiquidityPage } from '../pages/LiquidityPage'\n\nconst RouterView = () => {\n    \n    return <Router>\n        <Header />\n\n        {/*<Box style={{marginTop: `var(--header-height)`}} flex={1} display={'flex'}>*/}\n        <Container maxWidth=\"lg\" style={{minHeight:'calc(100% - 64px - 32px)',display:'flex',flexDirection:'column'}}>\n            {/*style={{height: '100%' }}*/}\n            <Box display={'flex'} flex={1} alignItems={'stretch'} flexDirection={'row'} marginTop={3}  >\n                <Switch>\n                    <Route exact component={SwapPage} path='/'/>\n                    <Route exact component={QuotePage} path='/markets'/>\n                    <Route component={SwapPage} path='/trading/lite'/>\n                    <Route component={SwapPage} path='/trading/lite(/:symbol)'/>\n\n                    <Route exact component={Layer2Page} path='/layer2'/>\n                    <Route exact component={Layer2Page} path='/layer2/assets'/>\n                    <Route exact component={Layer2Page} path='/layer2/transactions'/>\n                    <Route exact component={Layer2Page} path='/layer2/trades'/>\n                    <Route exact component={Layer2Page} path='/layer2/orders'/>\n                    <Route exact component={Layer2Page} path='/layer2/setting'/>\n\n                    <Route exact component={LiquidityPage} path='/liquidity'/>\n                    <Route exact component={LiquidityPage} path='/liquidity/pools/*'/>\n                    <Route exact component={LiquidityPage} path='/liquidity/pools'/>\n                    {/*<Route exact component={LiquidityPage} path='/liquidity/pools/coinPair(/:symbol)'/>*/}\n                    <Route exact component={LiquidityPage} path='/liquidity/amm-mining'/>\n                    <Route exact component={LiquidityPage} path='/liquidity/my-liquidity'/>\n                    <Route exact component={LiquidityPage} path='/liquidity/orderBook-Mining'/>\n                    <Route exact component={LiquidityPage} path='/liquidity/maker-rebates'/>\n\n                    <DevWrapper>\n                        <Route exact path='/debug'>\n                            <DebugPage/>\n                        </Route>\n                    </DevWrapper>\n\n                </Switch>\n            </Box>\n        </Container>\n        {/*</Box>*/}\n\n    </Router>\n}\n\nexport default RouterView\n"],"sourceRoot":""}