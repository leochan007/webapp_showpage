{"version":3,"sources":["defs/common_defs.ts","hooks/modal/useModals.ts","layouts/header/hook.tsx","utils/hook_tools.ts","hooks/common/useCommon.ts","pages/AccountPage/index.tsx","layouts/header/index.tsx","hooks/exchange/useExchangeAPI.ts","pages/QuotePage/hook.ts","pages/styled.ts","pages/QuotePage/index.tsx","pages/SwapPage/panel/BasicInfoPanel/hook.tsx","pages/SwapPage/panel/BasicInfoPanel/index.tsx","pages/SwapPage/panel/TradePanel/index.tsx","pages/SwapPage/index.tsx","pages/SwapPage/hook.ts","hooks/exchange/useWebsocketApi.ts","hooks/exchange/useWsAPI.ts","pages/DebugPage/index.tsx","pages/Layer2Page/TxPanel/index.tsx","pages/Layer2Page/AssetPanel/index.tsx","utils/formatter_tool.ts","pages/Layer2Page/TradePanel/index.tsx","pages/Layer2Page/AmmPanel/index.tsx","pages/Layer2Page/OrderPanel/index.tsx","pages/SettingPage/SettingPanel.tsx","pages/Layer2Page/index.tsx","pages/LiquidityPage/PoolsPanel/index.tsx","pages/LiquidityPage/AmmPanel/index.tsx","pages/LiquidityPage/AmmPanel/hooks.ts","pages/LiquidityPage/CoinPairPanel/hooks.ts","pages/LiquidityPage/CoinPairPanel/index.tsx","pages/LiquidityPage/AmmMining/index.tsx","pages/LiquidityPage/AmmMining/hook.ts","pages/LiquidityPage/MyLiquidity/index.tsx","pages/LiquidityPage/MyLiquidity/hook.ts","pages/LiquidityPage/index.tsx","pages/LiquidityPage/hook.ts","routers/index.tsx","hooks/common/useCustomDCEffect.ts","defs/swap_defs.ts","stores/account/reducer.ts","stores/token/hook.ts","defs/web3_defs.ts","stores/account/hook.ts","state_machine/machine_builder.ts","stores/Amm/AmmMap/hook.ts","stores/trading/hook.ts","utils/obj_tools.ts","stores/walletLayer1/hook.ts","stores/walletLayer2/hook.ts","networks/web3_connectors.ts","index.tsx","stores/Amm/AmmMap/reducer.ts","stores/socket/reducer.ts","stores/trading/reducer.ts","storage/index.ts","stores/ticker/reducer.ts","hooks/web3/useWeb3.ts","stores/userRewards/hook.ts","stores/system/reducer.ts","stores/system/interface.ts","stores/walletLayer1/reducer.ts","stores/walletLayer2/reducer.ts","stores/userRewards/reducer.ts","stores/Amm/AmmActivityMap/reducer.ts","stores/token/reducer.ts","hooks/help/makeUIAmmActivityMap.ts","stores/system/hook.ts","hooks/help/marketTable.ts","stores/apis/api.ts","utils/swap_calc_utils.ts","stores/ticker/hook.ts","stores/Amm/AmmActivityMap/hook.ts","stores/socket/hook.ts","state_machine/account_machine_spec.ts","stores/global/actions.ts","stores/transactions/reducer.ts","stores/Amm/AmmTrades/reducer.ts","stores/Amm/AmmActivityMap/saga.ts","stores/Amm/AmmMap/saga.ts","stores/Amm/AmmTrades/saga.ts","stores/Amm/index.ts","stores/token/saga.ts","stores/ticker/saga.ts","stores/system/saga.ts","stores/walletLayer1/saga.ts","stores/walletLayer2/saga.ts","stores/userRewards/saga.ts","stores/socket/saga.ts","stores/rootSaga.ts","stores/index.ts","hooks/help/ammPairDetail.ts","hooks/help/coinPairInit.ts","hooks/help/connectStatusCallback.ts","hooks/help/makeCache.ts","hooks/help/makeMyPoolDetail.ts","hooks/help/makeTickView.ts","hooks/help/pairDetail.ts","hooks/help/makeWallet.ts","utils/log_tools.ts","utils/web3_tools.ts","provider/global/index.tsx","provider/web3ReactManager/index.tsx","provider/dev-wrapper/index.tsx","services/tickerService.ts","stores/constant.ts","services/socketUtil.ts","pages/ErrorPage/index.tsx","utils/dt_tools.ts","hooks/help/volumeToCount.ts","services/ammPoolService.ts","hooks/exchange/useApi.ts","pages/LiquidityPage/PoolsPanel/hook.ts","hook.ts"],"names":["Theme","LangType","SystemStatus","MODAL_TYPE","useModals","dispatch","useDispatch","t","useTranslation","ShowDeposit","useCallback","isShow","isNoAccount","store","getState","account","status","AccountStatus","NOACCOUNT","console","log","action","props","title","description","setShowDeposit","ShowTransfer","setShowTransfer","ShowWithdraw","setShowWithdraw","ShowResetAccount","setShowResetAccount","useChargeFeeList","tokenSymbol","requestType","tokenMap","amount","api","useUserAPI","useAccount","accountId","apiKey","useState","chargeFeeList","setChargeFeeList","useCustomDCEffect","a","tokenInfo","request","toBig","times","decimals","toFixed","undefined","getOffchainFeeAmt","response","raw_data","fees","forEach","item","index","feeRaw","fee","token","sdk","div","BIG10","pow","toNumber","push","belong","__raw__","dumpError400","useModalProps","useWeb3Account","chainId","isConnected","connector","eddsaKey","useTokenMap","coinMap","walletLayer2State","marketArray","marketCoins","marketMap","useWalletLayer2","walletLayer1State","useWalletLayer1","walletMap1","setWalletMap1","walletMap2","setWalletMap2","React","useEffect","walletLayer2","walletMap","makeWallet","walletLayer1","statusUnset","tradeValue","balance","depositValue","setDepositValue","deposit","amt","exchangeInfo","system","LoopringAPI","exchangeAPI","exchangeAddress","depositAddress","getProvider","provider","web3","Web3","sendByMetaMask","connectName","ConnectorNames","Injected","gasPrice","gasLimit","parseInt","gasAmounts","accAddr","nonce","address","response2","depositProps","tradeData","depositBtnStatus","TradeBtnStatus","AVAILABLE","onDepositClick","toString","handlePanelEvent","data","switchType","Promise","res","setTokenSymbol","transferValue","setTransferValue","transferTokenSymbol","setTransferTokenSymbol","transferFeeList","OffchainFeeReqType","TRANSFER","feeInfo","setFeeInfo","length","transfer","userAPI","error","sellToken","feeToken","transferVol","sellTokenId","tokenId","getNextStorageId","storageId","walletType","request2","exchange","payerAddr","payerId","payeeAddr","payeeId","offchainId","volume","maxFee","validUntil","VALID_UNTIL","submitInternalTransfer","transferProps","transferBtnStatus","onTransferClick","handleFeeChange","value","chargeFeeToken","chargeFeeTokenList","handleOnAddressChange","handleAddressError","_value","message","withdrawValue","setWithdrawValue","OFFCHAIN_WITHDRAWAL","withdrawType","setWithdrawType","withdrawalFeeList","withdrawFeeInfo","setWithdrawFeeInfo","withdraw","symbol","withdrawToken","owner","to","extraData","minGas","submitOffchainWithdraw","withdrawProps","withdrawBtnStatus","onWithdrawClick","withdrawTypes","WithdrawTypes","handleWithdrawTypeChange","offchainType","WithdrawType","Fast","FAST_OFFCHAIN_WITHDRAWAL","resetValue","setResetValue","resetProps","resetBtnStatus","onResetClick","count","price","ammProps","ammDepositData","coinA","coinB","slippage","ammWithdrawData","ammCalcData","myCoinA","myCoinB","AtoB","coinInfoMap","handleAmmAddChangeEvent","type","handleAmmRemoveChangeEvent","onAmmRemoveClick","onAmmAddClick","swapProps","tradeCalcData","coinSell","coinBuy","BtoS","StoB","sellCoinInfoMap","buyCoinInfoMap","priceImpact","minimumReceived","onSwapClick","handleSwapPanelEvent","PromiseJob","fetchPromise","setFunc","field","prefix","mounted","handler","then","catch","reason","cleanUp","usePromiseJob","dependencies","ModalAccountInfo","withTranslation","onClose","open","rest","Modal","aria-labelledby","aria-describedby","style","boxShadow","Box","paddingTop","paddingBottom","display","flexDirection","minWidth","Header","location","useLocation","i18n","useSettings","setTheme","themeMode","language","setLanguage","useOpenModals","modals","isShowAccountInfo","isShowConnect","setShowConnect","setShowAccountInfo","forceUpdate","useReducer","bool","useUnlock","lock","unlock","connect","useConnect","etherscanUrl","useEtherscan","gatewayList","DefaultGatewayList","handleSelect","WalletConnect","Ledger","Trezor","accountInfoProps","setAccountInfoProps","onNotification","onWalletBtnConnect","acc","UNCONNNECTED","CONNECTED","LOCKED","ACTIVATED","onThemeBtnClick","dark","light","onLangBtnClick","lang","headerToolBarData","ButtonComponentsMap","handleClick","Language","handleChange","UnlockBtn","onClick","className","startIcon","fontSize","event","variant","Typography","marginTop","lockCallback","unLockCallback","LockBtn","addr","getShortAddr","updateHeaderMenuWhenHasAccountInfo","headerMenuData","HeadMenuTabKey","Layer2","HeaderMenuTabStatus","default","addressShort","level","etherscanLink","mainBtn","_event","connectBy","UNACTIVATED","DEPOSITING","DEPOSIT_TO_CONFIREM","ARPROVING","APPROV_TO_CONFIRM","onLock","label","WalletStatus","hidden","noAccount","accountPending","useHeader","disconnect","setExchangeInfo","useExchangeAPI","getExchangeInfo","useGetExchangeInfo","useDisconnect","onSwitch","openQRCode","setOpenQRCode","copyToastOpen","setCopyToastOpen","closeCopyToast","Snackbar","autoHideDuration","Alert","severity","url","withDrawProps","process","selected","pathname","headerRoot","Toolbar","onCopy","copyToClipBoard","onViewQRCode","onDisconnect","OnePageSize","isNeedCallMore","currentStartIndex","marketArrayLength","currentListLength","pageSize","pageCurrent","StylePaper","styled","theme","colorBase","background","unit","TableWrapStyled","Grid","TablePaddingX","pLeft","pRight","RowStyled","QuotePage","candlestickList","setCandlestickList","getCandlestick","market","getMixCandlestick","interval","TradingInterval","d1","limit","candlesticks","map","o","close","timeStamp","timestamp","prev","useTicker","tickerMap","tickerStatus","tickerStatusUnset","updateTickers","useSocket","sendSocketTopic","socketEnd","recommendMarkets","slice","_marketArrayWithOutRecommend","filter","findIndex","m","tickList","setTickList","recommendations","setRecommendations","setTickerKeys","focusRowFrom","setFocusRowFrom","startIndex","setStartIndex","subject","useMemo","tickerService","onSocket","updateRecommendation","recommendationIndex","ticker","tradeFloat","subscription","subscribe","Reflect","ownKeys","key","ele","unsubscribe","from","getTicker","socketSendTicker","updateRawData","array","concat","_recommendationsFloat","_tickList","reduce","match","_item","pair","deepClone","_recommendations","coinAInfo","coinBInfo","debounceGetTicker","debounce","globalSetup","wait","_startIndex","WsTopicType","onVisibleRowsChange","useQuote","list","simpleName","flex","container","chartData","find","xs","marginY","rawData","toggleData","ChartType","Trend","Depth","BasicInfoPanel","tgItemJSXs","tlabel","JSX","getExistedMarket","name","amm","chartType","setChartType","ChartUnit","D1","chartUnit","setChartUnit","originData","setOriginData","_e","exchangeApi","tgItemJSXsPriceChart","Object","keys","pre","tGItemData","min15","low","high","quoteVol","getMixDepth","depth","bidsPrices","bids_prices","bidsAmtTotals","bids_amtTotals","asksPrices","asks_prices","asksAmtTotals","asks_amtTotals","handleChartUnitChange","newValue","mappedValue","H1","W1","useBasicInfo","upColor","justifyContent","alignItems","exclusive","position","minHeight","maxHeight","height","width","riseColor","handleMove","right","bottom","size","applyProps","id","StyledTabsWrapper","StyledFormControlLabel","FormControlLabel","TradePanel","tradeArray","myTradeArray","isAllTrade","setIsAllTrade","setValue","control","Checkbox","checked","checkedIcon","icon","color","onChange","flag","Tabs","aria-label","Tab","FixedStyle","SwapPage","useRouteMatch","ammMap","useAmmMap","setTradeData","setTradeCalcData","setTradeArray","setMyTradeArray","setTradeFloat","setPair","ammPoolSnapshot","setAmmPoolSnapshot","swapBtnI18nKey","setSwapBtnI18nKey","output","setOutput","params","resetSwap","sell","buy","getUserTrades","marketTrades","_myTradeArray","makeMarketArray","accountStaticCallBack","bntLabel","swapBtnClickArray","assign","btnClickMap","fnType","baseToken","quoteToken","orderId","amountS","buyToken","amountBOutSlip","allOrNone","maxFeeBips","fillAmountBOrS","orderType","OrderType","ClassAmm","eddsaSignature","submitOrder","__cache__","makeCache","swapData","resolve","SwapType","SEll_CLICK","BUY_CLICK","SELL_SELECTED","BUY_SELECTED","EXCHANGE_CLICK","calculateTradeData","_tradeData","fm","_tradeCalcData","input","isAtoB","base","quote","__rawConfig__","parseFloat","throttleSetValue","_","_ammPoolSnapshot","td","coinKey","_tradeFloat","_tradeArray","coinPairInit","apiList","getMarketTrades","pairDetailBlock","ammKey","all","ammPoolsBalance","tickMap","_td","pairDetailDone","tickerData","makeTickView","CustomError","ErrorMap","TRADE_LITE_SET_PAIR_ERROR","options","useSwapPage","marginRight","alignContent","stateArr","useWebsocket","topics","verify","ws","needApiKey","useRef","wsData","setMessage","readyState","setReadyState","trading","useWsAPI","webSocketInit","current","getWsKey","wsApiKey","basePath","ChainId","MAINNET","wsKey","WebSocket","onopen","onclose","e","onerror","onmessage","closeWebSocket","sendMessage","msg","send","reconnect","useWs","socketData","setSocketData","isLocalPage","setIsLocalPage","document","addEventListener","visibilityState","err","JSON","parse","useHandleSocketData","setAccount","ammPool","setAmmPool","order","setOrder","setTicker","op","topic","ammpool","baseAmt","quoteAmt","candlestick","orderBook","trade","Error","useQuotePageWs","markets","setMarkets","getMarkets","useGetMarkets","c","every","getTickerArg","DebugPage","stringify","TxPanel","setPageSize","txTableData","setTxTableData","getTxnStatus","TransactionStatus","processing","processed","received","failed","getUserTxnList","getUserTranferList","getUserDepositHistory","getUserOnchainWithdrawalHistory","userTxnList","userTransferMapped","userTransfers","senderAddress","receiverAddress","Number","volumeToCount","feeTokenSymbol","feeAmount","memo","time","txnHash","hash","tradeType","TransactionTradeTypes","userDepositMapped","userDepositHistory","txHash","clonedWithdrawList","cloneDeep","userOnchainWithdrawalHistory","userWithdrawMapped","distributeHash","mappingList","sortedMappingList","sort","b","offsetHeight","Math","floor","ref","pagination","showFilter","StyledChartWrapper","StyledBtnGroupWrapper","AssetPanel","chartPeriod","setChartPeriod","setChartData","assetsKeyList","assetsDetailList","values","assetsList","detail","getUserTotalAssets","walletAPI","getUserAssets","wallet","assetType","AssetType","DEX","userAssets","createdAt","updateWalletLayer1","onShowDeposit","handleChartPeriodChange","faitPrices","tokenPriceList","entries","jointLPTokenValue","split","result","splice","ammToken","join","tokenValue","includes","amountDollar","doughnutData","tokenPriceUSDT","total","formattedDoughnutData","AssetTitleProps","assetInfo","totalAsset","next","priceTag","PriceTag","Dollar","onShowTransfer","onShowWithdraw","assetsRawData","TokenType","lp","single","String","EmptyValueTag","available","locked","smallBalance","Paper","component","showFiliter","getTokenInfo","StringToNumberWithPrecision","rawVal","trim","precision","VolToNumberWithPrecision","originalData","setOriginalData","userTrades","marketList","side","tradeTime","AmmPanel","getTokenName","getAmmpoolList","ammpoolAPI","getUserAmmPoolTxs","userAmmPoolTxs","txType","AmmTxType","JOIN","AmmSideTypes","Join","Exit","poolTokens","actualAmount","lpTokenAmount","lpToken","updatedAt","OrderPanel","orderOriginalData","setOrderOriginalData","getOrders","userOrders","Array","isArray","orders","volumes","baseAmount","quoteAmount","baseFilled","quoteFilled","TradeTypes","Buy","Sell","average","filledAmount","filledPrice","validity","start","detailTable","StyledPaper","StyledSwitch","Switch","textPrimary","border","success","backgroundColor","opacity","BtnCurrency","currency","Currency","dollar","state","setState","_handleChange","target","IconComponent","DropDownIcon","labelId","autoWidth","yen","StyledDivider","Divider","SettingPanel","focus","useTheme","setUpColor","setCurrency","direction","flexWrap","paddingLeft","marginBottom","paddingY","paddingX","Trans","i18nKey","alignSelf","Button","passDay","changeLanguage","textTransform","UpColor","green","up","down","red","subMenu","subMenuLayer2","BoxStyle","defaultFrame","c_key","SubMenuList","withRef","BasicSubMenuList","Layer2Page","accStatus","PoolsPanel","ammActivityMap","useAmmMapUI","updateTickersUI","page","handlePageChange","AmmPanelView","ammType","snapShotData","setAmmCalcData","setAmmDepositData","setAmmWithdrawData","joinRequest","setJoinRequest","ammDepositBtnI18nKey","setAmmDepositBtnI18nKey","ammWithdrawBtnI18nKey","setAmmWithdrawBtnI18nKey","initAmmData","_ammCalcData","ammPairInit","AmmPanelType","Deposit","joinFees","setJoinfees","AMM_JOIN","handlerInDebounce","idIndex","marketInfo","ammInfo","request1","poolAddress","getAmmPoolSnapshot","coinA_TV","pooled","coinB_TV","covertVal","ratio","makeJoinAmmPoolRequest","joinTokens","precisionForPrice","handleJoinAmmPoolEvent","handleExitAmmPoolEvent","addToAmmCalculator","patch","ammName","storageId0","request_1","storageId1","storageIds","joinAmmPool","onAmmDepositClickMap","removeAmmCalculator","removeAmmClickMap","useAmmPanel","isLoading","tabSelected","ammDepositBtnStatus","LOADING","ammWithdrawBtnStatus","makeAmmDetailExtendsActivityMap","ammDetail","ammActivity","BoxStyled","fontDefault","h4","BoxTopStyled","CoinPairPanel","ammMapState","useSystem","useUserRewardsState","useUserRewards","updateAmmMap","setWalletMap","ammMarketArray","myAmmMarketArray","setMyAmmMarketArray","ammUserRewardMap","setAmmUserRewardMap","setSnapShotData","feeA","feeB","feeDollar","feeYuan","reward","rewardToken","balanceA","balanceB","balanceYuan","balanceDollar","myAmm","setMyAmm","activity","totalRewards","amountYuan","totalLPToken","totalA","totalB","rewardValue","isNew","isActivity","APY","coinPairInfo","setCoinPairInfo","pairHistory","setPairHistory","walletLayer2DoIt","_walletMap","getUserAmmTransaction","makeMyAmmMarketArray","getPairList","ammList","formattedPairHistory","reverse","_coinPairInfo","_snapShotData","_myAmm","makeMyAmmWithSnapshot","userRewardsMap","useCoinPair","tabIndex","setTabIndex","setPage","_handlePageChange","sellIconHasLoaded","useImage","hasLoaded","buyIconHasLoaded","Breadcrumbs","Link","href","getThousandFormattedNumbers","moment","duration","format","Avatar","sizes","alt","src","Yuan","priceDollar","priceYuan","AmmCardWrap","forwardRef","AmmCard","AmmList","ammActivityViewMap","sm","lg","AmmMiningView","userRewardsMapState","setAmmActivityViewMap","ammActivityPastViewMap","setAmmActivityPastViewMap","makeUIAmmActivityMap","ammPoolActivityStatus","AmmPoolActivityStatus","NotStarted","InProgress","EndOfGame","useAmmMiningUI","spacing","StyleWrapper","MyLiquidity","summaryReward","setSummaryReward","myPoolRow","setMyPoolRow","makeMyPoolRow","walletKey","test","rowData","replace","marketKey","makeMyPoolRowWithPoolState","_myPoolRow","makeSummaryMyAmm","useOverview","padding","margin","rewardDollar","rewardYuan","handleDeposit","row","handleWithdraw","subMenuLiquidity","LiquidityPage","AmmActivityMapState","useAmmActivityMap","updateUserRewards","setAmmActivityMap","useAmmPool","matchPair","RouterView","Container","maxWidth","exact","path","deps","useDeepCompareEffect","OrderHandling","BIG0","BIG1","BIG10K","MULTI_FACTOR","initialState","defaultAccId","REACT_APP_TEST_ACCOUND_ID","UserStorage","getAccountId","defaultApiKey","REACT_APP_TEST_API_KEY","getApikey","defaultOwner","REACT_APP_TEST_OWNER","getAccount","defaultEddsaKey","REACT_APP_TEST_EDDSA_KEY","getEddsakey","publicKey","isContractAddress","Unknown","connectNameTemp","accountSlice","createSlice","reducers","reset","initState","setAccAddr","payload","setAccountInfo","setApikey","setAccountStatus","setEddsaKey","setConnectName","setConnectNameTemp","setIsContractAddress","actions","useSelector","tokenMapSlice","updateTokenMap","getTokenMap","connectorsByName","injected","Network","network","walletconnect","WalletLink","walletlink","ledger","trezor","Authereum","authereum","useActiveWeb3React","library","active","voca","isBlank","isActivated","useStateMachine","spec","machine","AccountMachineSpec","currentState","stateTransitions","states","nextState","sendEvent","activate","activatingConnector","setActivatingConnector","item_name","isSwitch","newConnector","StatusChangeEvent","Reset","Connecting","deactivate","userApi","tradingInfo","useGetTradingInfo","resetLayer2","Lock","sk","apikey","sign_tools","getUserApiKey","Unlock","resultInfo","code","feeMap","x","formatedPx","y","formatedPy","updateAccount","updateAccountResponse","sleep","useCheckAccStatus","web3Account","lv1Acc","prevChainId","usePrevious","prevWeb3Account","resetLayer1","accInfo","HasPubkey","ErrorResponse","FinishDeposit","checkTimeout","setInterval","isTimeOut","clearInterval","setHandler","updateWalletLayer2","getHandler","checkStatus","ammMapSlice","getAmmMap","getChainId","useUpdateChainId","setChainId","GORLI","useUpdateExchangeMarkets","getMixMarkets","useUpdateExchangeInfo","useUpdateAmmPoolConf","useAmmpoolAPI","getAmmPoolConf","ammPoolConf","setAmmPoolConf","useUpdateAmmPoolStats","getAmmPoolStats","ammPoolStats","setAmmPoolStats","useUpdateAmmActivityRules","getAmmPoolActivityRules","ammActivityRules","setAmmActivityRules","activityRules","useUpdateTokens","getTokens","tokens","setTokens","constructor","hasOwnProperty","text","execCommand","textarea","createElement","body","appendChild","select","removeChild","navigator","clipboard","writeText","window","clipboardData","setData","walletLayer1Slice","walletLayer2Slice","getWalletLayer2","POLLING_INTERVAL","RPC_URLS","myLog","InjectedConnector","supportedChainIds","NetworkConnector","urls","1","5","defaultChainId","WalletConnectConnector","rpc","bridge","qrcode","pollingInterval","WalletLinkConnector","appName","LedgerConnector","TrezorConnector","manifestEmail","manifestAppUrl","AuthereumConnector","Web3ProviderNetwork","createWeb3ReactRoot","NetworkContextName","providers","LocalizationProvider","dateAdapter","MomentUtils","I18nextProvider","MuThemeProvider","getTheme","ThemeProvider","Provider","ReactDOM","render","getLibrary","App","getElementById","__timer__","errorMessage","STATUS","PENDING","getAmmMapStatus","ERROR","DONE","updateRealTimeAmmMap","UNSET","socketSlice","socket","getSocketStatus","refreshRate","refreshRateSlow","tradingSlice","changeTradingInterval","setTickerMap","setMarketTrades","CONSTANTS","rawHandler","sessionStorage","getItem","Handler","setItem","removeItem","dateTimeStr","localStorage","ActiveTime","now","Date","getTime","tmpDt","SESSION_TIMEOUT_SECONDS","clear","rawId","AccountId","Account","Apikey","Eddsakey","eddsakey","orderHash","AmmOrder","HardwareAddresses","toLowerCase","tickerMapSlice","getTickers","getTickerStatus","context","useWeb3React","contextNetwork","setEtherscanUrl","useEagerConnect","tried","setTried","isAuthorized","useInactiveListener","onReConnectInjected","ethereum","reConnectInjected","on","handleChainChanged","handleAccountsChanged","accounts","removeListener","userRewardsMapSlice","getUserRewards","env","ENV","PROD","baseURL","socketURL","forex","systemSlice","updateSystem","updateSocketURL","updateRealTimeObj","getSystemStatus","setTopics","NETWORKEXTEND","getWalletLayer1Status","getWalletLayer2Status","getUserRewardsStatus","ammActivityMapSlice","getAmmActivityMap","getAmmActivityMapStatus","addressIndex","getTokenMapStatus","getTokenPairMap","myReward","ammPoolActivityRule","awardRules","myRewards","currentRewards","rangeFrom","rangeTo","isPass","makeAsCard","_ammInfo","itemArray","ammUserReward","getOneRewardInfo","plus","rewardToken2","reward2","volumeToCountAsBigNumber","feeRewards","BigNumber","makeMyAmmWithStat","getBaseQuote","settings","Side","marketTransaction","AmmTradeType","add","remove","totalDollar","totalYuan","amountA","amountB","txStatus","UserAPI","ExchangeAPI","AmmpoolAPI","wsAPI","InitApi","WalletAPI","WsAPI","getIcon","getIconByTokenInfo","utils","getAddress","getToken","fromWEI","valueInWEI","ceil","precisionToFixed","tickerKeys","updateTicker","tickerKey","updateAmmActivityMap","HasNoPubkey","IsSmartWallet","ApproveSubmit","ApproveConfirmed","updateVersion","createAction","transactionsSlice","addTransaction","approval","summary","claim","addedTime","clearAllTransactions","checkedTransaction","blockNumber","tx","lastCheckedBlockNumber","max","finalizeTransaction","receipt","confirmedTime","ammTradesSlice","ammTrades","getAmmTrades","getAmmTradesStatus","getPostsSaga","ammActivityMapSaga","getAmmActivityMapApi","groupByRuleTypeAndStatus","call","put","takeLatest","updateRealTimeSaga","ammMapInitSaga","ammMapRealTimeSaga","setAmmState","ammPoolState","keyPair","liquidityUSD","lpLiquidity","liquidity","rewards","rewardValue2","change","timeUnit","apyBips","getAmmMapApi","ammpools","dataItem","ammMapSaga","fork","ammTradesSaga","getAmmTradesApi","priceValue","priceToken","posts","ammReducer","combineReducers","reducer","ammForks","tokenInitSaga","getTokenMapApi","tokensMap","pairs","marketArr","tokenArr","startsWith","company","tokenList","tradePairs","tokenSaga","tickerSaga","tickersSaga","getTickersApi","getMixTicker","tickers","makeTickerMap","NO_TOKEN_KEY_LIST","tickerForks","getUpdateSystem","systemSaga","initConfig","tokenSymbolMap","take","delay","getSystemsApi","hostname","DEV","UAT","NONETWORK","NO_NETWORK_ERROR","getFiatPrice","legal","fiatPrices","getGasPrice","systemForks","walletLayer1Saga","getWalletLayer1Balance","getEthBalances","ethBalance","getTokenBalances","tokenBalances","walletLayer1Fork","walletLayer2Saga","getWalletLayer2Balance","getUserBalances","userBalances","walletLayer2Fork","userRewardsSaga","getUserRewardsApi","setTimeout","getAmmPoolUserRewards","reject","userRewardsForks","closeSocket","socketEndSaga","socketSendMessageSaga","socketClose","socketSendMessage","socketForks","mySaga","sagaMiddleware","createSagaMiddleware","settingsSlice","transactions","transactionlice","modalsSlice","PERSISTED_KEYS","configureStore","middleware","getDefaultMiddleware","thunk","serializableCheck","save","devTools","enhancers","reduxBatch","preloadedState","load","run","isNaN","baseVol","coinACount","coinBCount","onclickMap","fn","args","UNKNOWN","apply","DEFAULT","customSlippage","setSlippage","tick","floatTag","FloatTag","none","increase","decrease","base_token_volume","__rawTicker__","NO_SDK","stob","poolVolumn","poolBaseTokenVol","quoteBaseTokenVol","NO_SUPPORT_PAIR","pending","countBig","minus","Web3Provider","substr","WindowEvent","events","Click","Scroll","forceReset","GlobalProvider","children","removeEventListener","Fragment","MessageWrapper","Message","Web3ReactManager","networkActive","networkError","activateNetwork","triedEager","showLoader","setShowLoader","timeout","clearTimeout","DevWrapper","Subject","sendTicker","_tickerMap","asObservable","SocketEventType","pingPong","global","looperingSocket","socketEventMap","pingpong","isConnectSocket","globalThis","loopringSocket","reolve","makeTopics","unsubscribeAll","clearInitTimer","init","__wsTimer__","timer","socketConnect","baseSocket","warn","makeMessageArray","SOCKET_ERROR","eventType","makeReceiveMessageCallback","getAccountArg","getOrderArg","orderbook","getOrderBookArg","getTradeArg","getCandlestickArg","getAmmpoolArg","SocketEventMap","bid","ask","quote_token_volume","base_fee_amt","quote_fee_amt","poolName","risky","ammPoolService","sendAmmPool","StyleBox","ErrorPage","messageKey","textAlign","left","top","email","CONTACT_US_EMAIL","getContactInfo","preventDefault","volumn","ammPoolMap","useApi","ApiClass","DEFAULT_TIMEOUT","genApi","setRawData","setTimestamp","ammMapStatus","ammMapStatusUnset","_ammMap","tickerMapKey","NO_TOKEN_MAP","updateTickerLoop","_keys","setImmediate","_page","i","useInit","systemState","tokenState","accountState","reload","handleAccountChanged","detectEthereumProvider","method"],"mappings":"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","file":"static/js/main~a97bfcba.78194b3f.chunk.js","sourcesContent":["export enum Theme {\n    dark = 'dark',\n    light = 'light',\n}\n\nexport enum LangType {\n    en = 'en_US',\n    cn = 'zh_CN',\n}\n\nexport enum SystemStatus {\n    NORMAL,\n    ERROR,\n    UNKNOWN,\n}\n\nexport enum MODAL_TYPE {\n    UNKNOWN,\n    LOADING,\n    WALLET,\n}\n\nexport const REFRESH_RATE = 1000\n\nexport const REFRESH_RATE_SLOW = 15000\n","import { useCallback } from \"react\";\nimport { useDispatch } from \"react-redux\"\n\nimport {\n    setShowDeposit,\n    setShowResetAccount,\n    setShowTransfer,\n    setShowWithdraw,\n} from '@loopring-web/component-lib'\nimport { useTranslation } from \"react-i18next\";\nimport store from 'stores'\nimport { AccountStatus } from \"state_machine/account_machine_spec\";\n\nexport function useModals() {\n\n    const dispatch = useDispatch()\n\n    const { t } = useTranslation('common')\n\n    const ShowDeposit = useCallback((isShow: boolean)=>{\n        const isNoAccount = store.getState().account.status === AccountStatus.NOACCOUNT\n\n        console.log('isNoAccount: ', isNoAccount, t('depositTitleAndActive'))\n        const action = {\n            isShow,\n            props: {\n                title: isNoAccount ? t('depositTitleAndActive') : t('depositTitle'),\n                description: 'depositAndActiveDescription'\n            }\n        }\n        dispatch(setShowDeposit(action))\n    }, [dispatch, t])\n    const ShowTransfer = useCallback((isShow: boolean)=>dispatch(setShowTransfer({isShow})), [dispatch])\n    const ShowWithdraw = useCallback((isShow: boolean)=>dispatch(setShowWithdraw({isShow})), [dispatch])\n    const ShowResetAccount = useCallback((isShow: boolean)=>dispatch(setShowResetAccount({isShow})), [dispatch])\n\n    return {\n        ShowDeposit,\n        ShowTransfer,\n        ShowWithdraw,\n        ShowResetAccount,\n    }\n}","import React, { useCallback } from 'react'\n\nimport { useTranslation } from 'react-i18next'\n\nimport {\n    gatewayList as DefaultGatewayList,\n    headerMenuData, HeaderMenuTabStatus,\n    headerToolBarData, HeadMenuTabKey,\n    ButtonComponentsMap, LanguageKeys,\n    WalletStatus, HideIcon,\n    GatewayItem, ViewIcon, ThemeKeys, LockIcon, UnLockIcon,\n} from '@loopring-web/component-lib/src/static-resource'\n\nimport { useAccount, useUnlock, useConnect, } from 'stores/account/hook'\n\nimport { getShortAddr } from 'utils/web3_tools'\n\nimport { AccountStatus } from 'state_machine/account_machine_spec'\n\nimport { useCustomDCEffect } from 'hooks/common/useCustomDCEffect'\n\nimport { Theme, } from 'defs/common_defs'\n\nimport { Button, setShowDeposit, SwapProps, useOpenModals, useSettings } from '@loopring-web/component-lib'\n\nimport store from 'stores'\n\nimport { ConnectorNames, LoopringMap } from 'loopring-sdk'\nimport { Typography } from '@material-ui/core';\nimport { AccountInfoProps } from '@loopring-web/component-lib/components/block';\nimport { useEtherscan } from 'hooks/web3/useWeb3'\n\nimport { useModals } from 'hooks/modal/useModals'\n\nimport {useState } from 'react'\nimport Web3 from 'web3'\n\nimport { AmmData, AmmInData, IBData, TradeCalcData, WalletMap } from '@loopring-web/component-lib/static-resource'\nimport { AmmProps } from '@loopring-web/component-lib'\n\nimport {  useUserAPI } from 'hooks/exchange/useApi'\n\nimport { useWeb3Account } from 'stores/account/hook'\nimport { useGetExchangeInfo, useGetTokens } from 'hooks/exchange/useExchangeAPI'\n\nimport * as sdk from 'loopring-sdk'\n\n\nimport {\n    ExchangeAPI,\n    dumpError400,\n    GetNextStorageIdRequest,\n    GetOffchainFeeAmtRequest,\n    OffchainFeeReqType,\n    OffChainWithdrawalRequestV3,\n    OriginTransferRequestV3,\n    TokenInfo,\n    VALID_UNTIL,\n    toBig,\n} from 'loopring-sdk'\n\nimport { useGetUserBalances } from 'hooks/exchange/useUserAPI'\n\nimport {\n    DepositProps,\n    ResetProps,\n    SwitchData,\n    TradeBtnStatus,\n    TransferProps,\n    WithdrawProps,\n} from '@loopring-web/component-lib'\n\nimport { WithdrawType, WithdrawTypes } from '@loopring-web/component-lib/src/static-resource'\nimport { CoinType } from '@loopring-web/component-lib/static'\nimport { useDispatch  } from 'react-redux'\nimport { makeWallet } from 'hooks/help'\nimport { useWalletLayer2 } from 'stores/walletLayer2'\nimport { useTokenMap } from 'stores/token'\nimport { LoopringAPI } from 'stores/apis/api'\nimport { BIG10 } from 'defs/swap_defs'\nimport { useWalletLayer1 } from '../../stores/walletLayer1';\n\nexport const useHeader = () => {\n    const { i18n,t } = useTranslation(['common','layout'])\n    const { setTheme,themeMode,language, setLanguage } = useSettings();\n    const { ShowDeposit } = useModals()\n    const { modals:{isShowAccountInfo,isShowConnect}, setShowConnect, setShowAccountInfo }  = useOpenModals()\n \n    const [openConnect, setOpenConnect] = React.useState(false)\n\n    const forceUpdate = React.useReducer((bool) => !bool, false)[1]\n    const { account } = useAccount()\n\n    const { lock, unlock } = useUnlock()\n\n    const { connect } = useConnect()\n\n    const { etherscanUrl } = useEtherscan()\n\n    const gatewayList: GatewayItem[] = [\n        {\n            ...DefaultGatewayList[0],\n            handleSelect: () => {\n                console.log('try to connect to ', ConnectorNames.Injected)\n                connect(ConnectorNames.Injected, true)\n                setShowConnect({isShow: false})\n            }\n        },\n        {\n            ...DefaultGatewayList[1],\n            handleSelect: () => {\n                connect(ConnectorNames.WalletConnect, true)\n                setShowConnect({isShow: false})\n            }\n        },\n        {\n            ...DefaultGatewayList[2],\n            handleSelect: () => {\n                connect(ConnectorNames.Ledger, true)\n                setShowConnect({isShow: false})\n            }\n        },\n        {\n            ...DefaultGatewayList[3],\n            handleSelect: () => {\n                connect(ConnectorNames.Trezor, true)\n                setShowConnect({isShow: false})\n            }\n        },\n    ]\n    // const [showAccountInfo, setShowAccountInfo] = React.useState(account?.accAddr ? true : false)\n    const [accountInfoProps, setAccountInfoProps] = React.useState<undefined|AccountInfoProps>(undefined)\n    //const theme: any = useTheme()\n\n    const onNotification = React.useCallback(async () => {\n        console.log('onNotification click')\n    }, [])\n\n    const onWalletBtnConnect = React.useCallback(async () => {\n        const acc = store.getState().account\n        console.log(`onWalletBtnConnect click: ${acc.status}`)\n\n        switch (acc.status) {\n            case AccountStatus.UNCONNNECTED:\n                setShowConnect({isShow: true})\n                break\n                case AccountStatus.NOACCOUNT:\n            case AccountStatus.CONNECTED:\n            case AccountStatus.LOCKED:\n            case AccountStatus.ACTIVATED:\n                setShowAccountInfo({isShow: true})\n                break\n            default:\n                break\n        }\n    }, [setShowConnect, lock, unlock, ShowDeposit, setShowAccountInfo])\n\n    const onThemeBtnClick = React.useCallback(async (themeMode:ThemeKeys) => {\n        if (themeMode === Theme.dark) {\n            setTheme(Theme.light)\n        } else {\n            setTheme(Theme.dark)\n        }\n    }, [setTheme])\n\n    const onLangBtnClick = (lang: LanguageKeys) => {\n        setLanguage(lang);\n    }\n\n\n    useCustomDCEffect(() => {\n\n\n        headerToolBarData[ButtonComponentsMap.WalletConnect] = {\n            ...headerToolBarData[ButtonComponentsMap.WalletConnect],\n            handleClick: onWalletBtnConnect,\n        }\n\n        // headerToolBarData[ButtonComponentsMap.Notification] = { ...headerToolBarData[ButtonComponentsMap.Theme], themeMode: theme.mode, handleClick: onNotification }\n        // headerToolBarData.update(ButtonComponentsMap.WalletConnect,value=>{\n        //   return {...value, handleClick:onWalletBtnConnect}});\n        headerToolBarData[ButtonComponentsMap.Theme] = { ...headerToolBarData[ButtonComponentsMap.Theme], themeMode, handleClick: onThemeBtnClick }\n        // headerToolBarData.update(ButtonComponentsMap.Theme,value=>{\n        //   return {...value, themeMode:theme.mode, handleClick:onThemeBtnClick}});\n\n        headerToolBarData[ButtonComponentsMap.Language] = { ...headerToolBarData[ButtonComponentsMap.Language], handleChange: onLangBtnClick }\n        // headerToolBarData.update(ButtonComponentsMap.Language,value=>{\n        //  return  {...value, language:i18n.language, handleClick:onThemeBtnClick}});\n    }, [themeMode, language, i18n, onWalletBtnConnect, onThemeBtnClick, onLangBtnClick, onNotification, t]);\n\n    const UnlockBtn = ({onClick}:{onClick:({...props}:any)=>void})=>{\n        return <Button className={'unlock'}  startIcon={<LockIcon fontSize={'large'}/>}\n                       onClick={(event)=>{\n                           onClick(event)\n                       }} variant={'outlined'} >\n            <Typography variant={'body2'} marginTop={1/2}>   {t('labelUnLockLayer2')} </Typography>\n        </Button>\n    }\n\n    const lockCallback = React.useCallback((event)=>{\n        lock(account)\n    } ,[account])\n    const unLockCallback = React.useCallback((event)=>{\n        unlock(account)\n    } ,[account])\n\n    const LockBtn = ({onClick}:{onClick:({...props}:any)=>void})=>{\n        return  <Button className={'lock'}  startIcon={<UnLockIcon fontSize={'large'}/>} \n        onClick={(event) => {\n            onClick(event)\n        } } variant={'outlined'} >\n            <Typography variant={'body2'} marginTop={1/2}>  {t('labelLockLayer2')} </Typography>\n        </Button>\n    }\n\n    useCustomDCEffect(() => {\n\n        if (!account) {\n            console.log('account'+account+'* exit')\n            setAccountInfoProps(undefined)\n            return\n        }\n\n        const { status } = account\n\n        const addr = getShortAddr(account?.accAddr)\n\n        const updateHeaderMenuWhenHasAccountInfo =  ({status}:{status:keyof  typeof AccountStatus})=>{\n            headerMenuData[HeadMenuTabKey.Layer2] = {\n                ...headerMenuData[HeadMenuTabKey.Layer2],\n                status: HeaderMenuTabStatus.default\n            }\n            let props;\n            if(status === AccountStatus.ACTIVATED) {\n                props = {\n                    addressShort: addr?addr:'',\n                    address: account?.accAddr,\n                    level: 'VIP 1',\n                    etherscanLink: etherscanUrl + account?.accAddr,\n                    //TODO: changed by account status\n                    mainBtn: <LockBtn onClick={(_event)=>{lockCallback(_event)}}/>,\n                    connectBy:''\n                }\n                setShowAccountInfo({isShow:false})\n            }else if(status === AccountStatus.LOCKED) {\n                props = {\n                    addressShort: addr?addr:'',\n                    address: account?.accAddr,\n                    level: 'VIP 1',\n                    etherscanLink: etherscanUrl + account?.accAddr,\n                    //TODO: changed by account status\n                    mainBtn: <UnlockBtn onClick={(_event)=>{unLockCallback(_event)}}/>,\n                    connectBy:''\n                }\n                setShowAccountInfo({isShow:true})\n            }else if(status === AccountStatus.UNACTIVATED\n                || status === AccountStatus.NOACCOUNT\n                || status === AccountStatus.DEPOSITING\n                || status === AccountStatus.DEPOSIT_TO_CONFIREM\n                || status === AccountStatus.ARPROVING\n                || status === AccountStatus.APPROV_TO_CONFIRM\n            )  {\n                props = {\n                    addressShort: addr?addr:'',\n                    address: account?.accAddr,\n                    //TODO: level\n                    level: 'VIP 1',\n                    etherscanLink: etherscanUrl + account?.accAddr,\n                    //TODO: changed by account status\n                    connectBy:''\n                }\n                setShowAccountInfo({isShow:false});\n\n            } else  {\n                setShowAccountInfo({isShow:false})\n            }\n            \n            if(status === AccountStatus.NOACCOUNT)  {\n                (props as any).onLock = () => {\n                    setShowAccountInfo({isShow:false})\n                    ShowDeposit(true)\n                }\n            } \n\n            setAccountInfoProps(props)\n        }\n        switch (status) {\n            case AccountStatus.UNCONNNECTED:\n                headerToolBarData[ButtonComponentsMap.WalletConnect] = {\n                    ...headerToolBarData[ButtonComponentsMap.WalletConnect],\n                    label: t('labelConnectWallet'),\n                    status: WalletStatus.default\n                }\n                headerMenuData[HeadMenuTabKey.Layer2] = {\n                    //TODO:  HeaderMenuTabStatus.hidden\n                    ...headerMenuData[HeadMenuTabKey.Layer2], status: HeaderMenuTabStatus.hidden\n                }\n                setShowAccountInfo({isShow:false})\n                break\n            case AccountStatus.LOCKED:\n                headerToolBarData[ButtonComponentsMap.WalletConnect] = {\n                    ...headerToolBarData[ButtonComponentsMap.WalletConnect],\n                    label: addr,\n                    status: WalletStatus.connect\n                };\n\n                updateHeaderMenuWhenHasAccountInfo({status});\n                break\n            case AccountStatus.ACTIVATED:\n                headerToolBarData[ButtonComponentsMap.WalletConnect] = {\n                    ...headerToolBarData[ButtonComponentsMap.WalletConnect],\n                    label: addr,\n                    status: WalletStatus.unlock\n                }\n\n                updateHeaderMenuWhenHasAccountInfo({status});\n                break\n            case AccountStatus.UNACTIVATED:\n            case AccountStatus.NOACCOUNT:\n                headerToolBarData[ButtonComponentsMap.WalletConnect] = {\n                    ...headerToolBarData[ButtonComponentsMap.WalletConnect],\n                    // TODO got cache address if no show Connect Wallet\n                    label: addr,\n                    status: WalletStatus.noAccount\n                }\n\n                updateHeaderMenuWhenHasAccountInfo({status});\n                break\n            case AccountStatus.DEPOSITING:\n            case AccountStatus.DEPOSIT_TO_CONFIREM:\n            case AccountStatus.ARPROVING:\n            case AccountStatus.APPROV_TO_CONFIRM:\n                headerToolBarData[ButtonComponentsMap.WalletConnect] = {\n                    ...headerToolBarData[ButtonComponentsMap.WalletConnect],\n                    label: addr,\n                    status: WalletStatus.accountPending\n                }\n                updateHeaderMenuWhenHasAccountInfo({status});\n\n                break\n        }\n        forceUpdate()\n    }, [account, etherscanUrl, setAccountInfoProps])\n\n    return {\n        headerToolBarData,\n        headerMenuData,\n        gatewayList,\n        isShowConnect,\n        isShowAccountInfo,\n        setShowAccountInfo,\n        setShowConnect,\n        // open,\n        // setOpen,\n        // openConnect,\n        // setOpenConnect,\n        account,\n        accountInfoProps,\n\n    }\n\n}\n\nexport function useChargeFeeList(tokenSymbol: string | undefined, requestType: OffchainFeeReqType, \n    tokenMap: LoopringMap<TokenInfo> | undefined, amount?: number) {\n\n    const api = useUserAPI()\n\n    const {accountId, apiKey,} = useAccount()\n\n    const [chargeFeeList, setChargeFeeList] = useState<any[]>([])\n\n    useCustomDCEffect(async () => {\n\n        if (!accountId || !tokenSymbol || !tokenMap) {\n            return\n        }\n\n        let chargeFeeList: any[] = []\n\n        try {\n            const tokenInfo = tokenMap[tokenSymbol]\n\n            const request: GetOffchainFeeAmtRequest = {\n                accountId,\n                tokenSymbol,\n                requestType,\n                amount: amount ? toBig(amount).times('1e' + tokenInfo.decimals).toFixed(0, 0) : undefined\n            }\n\n            const response = await api.getOffchainFeeAmt(request, apiKey)\n\n            if (response) {\n                response.raw_data.fees.forEach((item: any, index: number) => {\n                    const feeRaw = item.fee\n                    const tokenInfo = tokenMap[item.token]\n                    const fee = sdk.toBig(item.fee).div(BIG10.pow(sdk.toBig(tokenInfo.decimals))).toNumber() \n                    chargeFeeList.push({belong: item.token, fee, __raw__: feeRaw })\n                })\n\n                setChargeFeeList(chargeFeeList)\n            }\n            console.log('response:', response)\n\n        } catch (reason) {\n            dumpError400(reason)\n        }\n\n\n        setChargeFeeList(chargeFeeList)\n\n    }, [accountId, apiKey, requestType, tokenSymbol, tokenMap])\n\n    return {\n        chargeFeeList,\n    }\n\n}\n\nexport function useModalProps() {\n\n    const {\n        ShowDeposit,\n        ShowTransfer,\n        ShowWithdraw,\n        ShowResetAccount,\n    } = useModals()\n\n    const {chainId, isConnected, connector,} = useWeb3Account()\n\n    const {account, apiKey, accountId, eddsaKey,} = useAccount()\n    \n    const {coinMap, tokenMap, marketArray, marketCoins, marketMap, } = useTokenMap()\n\n    const walletLayer2State = useWalletLayer2();\n    const walletLayer1State = useWalletLayer1();\n    const [walletMap1, setWalletMap1] = useState<WalletMap<any>|undefined>(undefined);\n    const [walletMap2, setWalletMap2] = useState<WalletMap<any>|undefined>(undefined);\n    //HIGH: effect by wallet state update\n    React.useEffect(() => {\n        if(walletLayer2State.walletLayer2){\n            let {walletMap} =  makeWallet();\n            setWalletMap1(walletMap)\n        }\n        if(walletLayer1State.walletLayer1){\n            // let {walletMap} =  makeWalletLayer1();\n            setWalletMap1(walletLayer1State.walletLayer1)\n        }\n    }, [])\n    React.useEffect(() => {\n        switch (walletLayer2State.status) {\n            case \"ERROR\":\n                walletLayer2State.statusUnset();\n                // setState('ERROR')\n                //TODO: show error at button page show error  some retry dispath again\n                break;\n            case \"DONE\":\n                walletLayer2State.statusUnset();\n                let {walletMap} =  makeWallet();\n                setWalletMap2(walletMap)\n                break;\n            default:\n                break;\n\n        }\n    }, [walletLayer2State.status])\n    React.useEffect(() => {\n        switch (walletLayer1State.status) {\n            case \"ERROR\":\n                walletLayer1State.statusUnset();\n                // setState('ERROR')\n                //TODO: show error at button page show error  some retry dispath again\n                break;\n            case \"DONE\":\n                walletLayer1State.statusUnset();\n                setWalletMap1(walletLayer1State.walletLayer1);\n                break;\n            default:\n                break;\n\n        }\n    }, [walletLayer1State.status])\n\n    // deposit\n    const [depositValue, setDepositValue] = useState<IBData<any>>({\n        belong: undefined,\n        tradeValue: 0,\n        balance: 0\n    } as IBData<unknown>)\n\n    const deposit = useCallback(async (token: string, amt: any) => {\n\n        const exchangeInfo = store.getState().system.exchangeInfo\n\n        if (!LoopringAPI.exchangeAPI || !tokenMap || !isConnected || !connector || !exchangeInfo?.exchangeAddress || !exchangeInfo?.depositAddress) {\n            return\n        }\n\n        try {\n            const tokenInfo: TokenInfo = tokenMap[token]\n\n            const provider = await connector.getProvider()\n            const web3 = new Web3(provider as any)\n\n            let sendByMetaMask = account.connectName === ConnectorNames.Injected\n            sendByMetaMask = true\n\n            const gasPrice = store.getState().system.gasPrice ?? 30\n            const gasLimit = parseInt(tokenInfo.gasAmounts.deposit)\n\n            const nonce = await sdk.getNonce(web3, account.accAddr)\n\n            const response = await sdk.approveMax(web3, account.accAddr, tokenInfo.address,\n                exchangeInfo?.depositAddress, gasPrice, gasLimit, chainId, nonce, sendByMetaMask)\n\n            const fee = 0\n\n            const response2 = await sdk.deposit(web3, account.accAddr,\n                exchangeInfo?.exchangeAddress, tokenInfo, amt, fee,\n                gasPrice, gasLimit, chainId, nonce + 1, sendByMetaMask)\n\n            console.log('!!!!deposit r:', response2)\n\n        } catch (reason) {\n            dumpError400(reason)\n        }\n\n    }, [chainId, isConnected, connector, account, tokenMap, LoopringAPI.exchangeAPI])\n\n    let depositProps: DepositProps<any, any> = {\n        tradeData: {belong: undefined},\n        coinMap: coinMap,\n        walletMap: walletMap1,\n        depositBtnStatus: TradeBtnStatus.AVAILABLE,\n        onDepositClick: (tradeData: any) => {\n            if (depositValue && depositValue.belong) {\n                deposit(depositValue.belong.toString(), depositValue.tradeValue)\n            }\n            ShowDeposit(false)\n        },\n        handlePanelEvent: async (data: SwitchData<any>, switchType: 'Tomenu' | 'Tobutton') => {\n            return new Promise((res) => {\n                if (data?.tradeData?.belong) {\n                    if (depositValue !== data.tradeData) {\n                        setDepositValue(data.tradeData)\n                    }\n                    setTokenSymbol(data.tradeData.belong)\n                } else {\n                    setDepositValue({belong: undefined, tradeValue: 0, balance: 0} as IBData<unknown>)\n                }\n                res();\n            })\n        },\n    }\n\n    // transfer\n    const [transferValue, setTransferValue] = useState<IBData<any>>({\n        belong: undefined,\n        tradeValue: 0,\n        balance: 0\n    } as IBData<unknown>)\n\n    const [transferTokenSymbol, setTransferTokenSymbol] = useState<string>('')\n\n    const {chargeFeeList: transferFeeList} = useChargeFeeList(transferTokenSymbol, OffchainFeeReqType.TRANSFER, tokenMap)\n\n    const [feeInfo, setFeeInfo] = useState<any>()\n\n    useCustomDCEffect(() => {\n\n        if (transferFeeList.length > 0) {\n            setFeeInfo(transferFeeList[0])\n        }\n\n    }, [transferFeeList])\n\n    const transfer = useCallback(async (transferValue: any) => {\n\n        const exchangeInfo = store.getState().system.exchangeInfo\n\n        if (!LoopringAPI.userAPI || !LoopringAPI.exchangeAPI || !exchangeInfo\n            || !connector || !apiKey || !chainId || !accountId || !account?.accAddr) {\n            return\n        }\n\n        if (!tokenMap || !feeInfo) {\n            console.error(feeInfo)\n            return\n        }\n\n        try {\n\n            const sellToken = tokenMap[transferValue.belong]\n    \n            const feeToken = tokenMap[feeInfo.belong]\n    \n            const transferVol = toBig(transferValue.tradeValue).times('1e' + sellToken.decimals).toFixed(0, 0)\n    \n            const request: GetNextStorageIdRequest = {\n                accountId,\n                sellTokenId: sellToken.tokenId\n            }\n            const storageId = await LoopringAPI.userAPI.getNextStorageId(request, apiKey)\n\n            const provider = await connector.getProvider()\n            const web3 = new Web3(provider as any)\n\n            let walletType = account.connectName\n            walletType = ConnectorNames.Injected\n\n            const request2: OriginTransferRequestV3 = {\n                exchange: exchangeInfo.exchangeAddress,\n                payerAddr: account.accAddr,\n                payerId: accountId,\n                payeeAddr: '0x8cdc4B6C1FA234AE54c53e56376359bFC497f2e6',\n                payeeId: 0,\n                storageId: storageId.offchainId,\n                token: {\n                    tokenId: sellToken.tokenId,\n                    volume: transferVol,\n                },\n                maxFee: {\n                    tokenId: feeToken.tokenId,\n                    volume: feeInfo.__raw__,\n                },\n                validUntil: VALID_UNTIL,\n            }\n\n            const response = await LoopringAPI.userAPI.submitInternalTransfer(request2, web3, chainId, walletType,\n                eddsaKey, apiKey, false)\n\n            console.log('transfer r:', response)\n\n        } catch (reason) {\n            dumpError400(reason)\n        }\n\n    }, [apiKey, accountId, account, connector, chainId, eddsaKey, feeInfo, LoopringAPI.userAPI, LoopringAPI.exchangeAPI])\n\n    let transferProps: TransferProps<any, any> = {\n        tradeData: {belong: undefined},\n        coinMap: coinMap,\n        walletMap: walletMap2,\n        transferBtnStatus: TradeBtnStatus.AVAILABLE,\n        onTransferClick: (tradeData: any) => {\n            if (transferValue && transferValue.belong) {\n                transfer(transferValue)\n            }\n\n            ShowTransfer(false)\n        },\n        handleFeeChange(value: { belong: string; fee: number | string; __raw__?: any }): void {\n            setFeeInfo(value)\n        },\n        handlePanelEvent: async (data: SwitchData<any>, switchType: 'Tomenu' | 'Tobutton') => {\n            return new Promise((res: any) => {\n                if (data?.tradeData?.belong) {\n                    if (transferValue !== data.tradeData) {\n                        setTransferValue(data.tradeData)\n                    }\n                    setTransferTokenSymbol(data.tradeData.belong)\n                } else {\n                    setTransferValue({belong: undefined, tradeValue: 0, balance: 0} as IBData<unknown>)\n                }\n                // else{\n                //     setTransferValue({ belong: undefined, amt: 0 })\n                // }\n\n                res();\n            })\n        },\n\n        chargeFeeToken: 'ETH',\n        chargeFeeTokenList: transferFeeList,\n        handleOnAddressChange: (value: any) => {\n            console.log('transfer handleOnAddressChange', value);\n        },\n        handleAddressError: (_value: any) => {\n            return {error: false, message: ''}\n        }\n    }\n\n    // withdraw\n    const [withdrawValue, setWithdrawValue] = useState<IBData<any>>({\n        belong: undefined,\n        tradeValue: 0,\n        balance: 0\n    } as IBData<unknown>);\n\n    const [tokenSymbol, setTokenSymbol] = useState<string>('')\n    const [withdrawType, setWithdrawType] = useState<OffchainFeeReqType>(OffchainFeeReqType.OFFCHAIN_WITHDRAWAL)\n    const {chargeFeeList: withdrawalFeeList} = useChargeFeeList(tokenSymbol, withdrawType, tokenMap, withdrawValue.tradeValue)\n\n    const [withdrawFeeInfo, setWithdrawFeeInfo] = useState<any>()\n\n    useCustomDCEffect(() => {\n\n        if (withdrawalFeeList.length > 0) {\n            setWithdrawFeeInfo(withdrawalFeeList[0])\n        }\n\n    }, [withdrawalFeeList])\n\n    const withdraw = useCallback(async (withdrawValue: any) => {\n\n        const exchangeInfo = store.getState().system.exchangeInfo\n\n        if (!LoopringAPI.userAPI || !account || !account.accountId || !account.accAddr\n            || !connector || !chainId || !apiKey || !exchangeInfo\n            || !exchangeInfo.exchangeAddress || !withdrawFeeInfo\n            || !withdrawValue || !tokenMap) {\n            console.error('withdraw return directly!', account, connector, chainId, apiKey, exchangeInfo)\n            console.error('withdraw return directly!', withdrawValue, withdrawFeeInfo, tokenMap)\n            return\n        }\n\n        const symbol = withdrawValue.belong as string\n\n        const withdrawToken = tokenMap[symbol]\n\n        const feeToken = tokenMap[withdrawFeeInfo.belong]\n\n        const amt = toBig(withdrawValue.tradeValue).times('1e' + withdrawToken.decimals).toFixed(0, 0)\n\n        try {\n\n            const request: GetNextStorageIdRequest = {\n                accountId: account.accountId,\n                sellTokenId: withdrawToken.tokenId\n            }\n\n            const storageId = await LoopringAPI.userAPI.getNextStorageId(request, apiKey)\n\n            const request2: OffChainWithdrawalRequestV3 = {\n                exchange: exchangeInfo.exchangeAddress,\n                owner: account.accAddr,\n                to: account.accAddr,\n                accountId: account.accountId,\n                storageId: storageId.offchainId,\n                token: {\n                    tokenId: withdrawToken.tokenId,\n                    volume: amt,\n                },\n                maxFee: {\n                    tokenId: feeToken.tokenId,\n                    volume: withdrawFeeInfo.__raw__,\n                },\n                extraData: '',\n                minGas: 0,\n                validUntil: VALID_UNTIL,\n            }\n\n            const provider = await connector.getProvider()\n            const web3 = new Web3(provider as any)\n\n            const response = await LoopringAPI.userAPI.submitOffchainWithdraw(request2, web3, chainId, ConnectorNames.Injected,\n                account.eddsaKey, apiKey, false)\n\n            console.log(response)\n\n        } catch (reason) {\n            dumpError400(reason)\n        }\n\n    }, [apiKey, account, connector, chainId, withdrawFeeInfo, LoopringAPI.userAPI])\n     \n    let withdrawProps: WithdrawProps<any, any> = {\n        tradeData: {belong: undefined},\n        coinMap: coinMap,\n        walletMap: walletMap2,\n        withdrawBtnStatus: TradeBtnStatus.AVAILABLE,\n        onWithdrawClick: (tradeData: any) => {\n            if (withdrawValue && withdrawValue.belong) {\n                withdraw(withdrawValue)\n            }\n            ShowWithdraw(false)\n        },\n\n        handlePanelEvent: async (data: SwitchData<any>, switchType: 'Tomenu' | 'Tobutton') => {\n            return new Promise((res: any) => {\n                if (data?.tradeData?.belong) {\n                    if (withdrawValue !== data.tradeData) {\n                        setWithdrawValue(data.tradeData)\n                    }\n                    setTokenSymbol(data.tradeData.belong)\n                } else {\n                    setWithdrawValue({belong: undefined, tradeValue: 0, balance: 0} as IBData<unknown>);\n                }\n                res();\n            })\n        },\n        withdrawType,\n        withdrawTypes: WithdrawTypes,\n        chargeFeeToken: 'ETH',\n        chargeFeeTokenList: withdrawalFeeList,\n        handleFeeChange(value: { belong: string; fee: number | string; __raw__?: any }): void {\n            console.log('handleWithdrawFee', value);\n            setWithdrawFeeInfo(value)\n        },\n        handleWithdrawTypeChange: (value: any) => {\n            console.log('handleWithdrawTypeChange',value)\n            const offchainType = value === WithdrawType.Fast ? OffchainFeeReqType.FAST_OFFCHAIN_WITHDRAWAL : OffchainFeeReqType.OFFCHAIN_WITHDRAWAL\n            setWithdrawType(offchainType)\n        },\n        handleOnAddressChange: (value: any) => {\n            console.log('handleOnAddressChange', value);\n        },\n        handleAddressError: (_value: any) => {\n            return {error: false, message: ''}\n        }\n    }\n    \n\n    // reset\n    const [resetValue, setResetValue] = useState<IBData<any>>({\n        belong: undefined,\n        tradeValue: 0,\n        balance: 0\n    } as IBData<unknown>)\n\n\n    let resetProps: ResetProps<any, any> = {\n        tradeData: {belong: undefined},\n        coinMap: coinMap,\n        walletMap: walletMap2,\n        resetBtnStatus: TradeBtnStatus.AVAILABLE,\n        onResetClick: (tradeData: any) => {\n            if (resetValue && resetValue.belong) {\n            }\n\n            ShowResetAccount(false)\n        },\n        handlePanelEvent: async (data: SwitchData<any>, switchType: 'Tomenu' | 'Tobutton') => {\n            return new Promise((res) => {\n                if (data?.tradeData?.belong) {\n                    if (resetValue !== data.tradeData) {\n                        setResetValue(data.tradeData)\n                    }\n                } else {\n                    setResetValue({belong: undefined, tradeValue: 0, balance: 0} as IBData<unknown>)\n                }\n\n                res();\n            })\n        },\n        fee: {count: 234, price: 123}\n    }\n\n     const tradeCalcData: TradeCalcData<CoinType> = {\n        coinSell: 'ETH', //name\n        coinBuy: 'LRC',\n        BtoS: 0,\n        StoB: 0,\n        sellCoinInfoMap: coinMap,\n        buyCoinInfoMap: coinMap,\n        walletMap: {},\n        slippage: 0.5,\n        // slippageTolerance: [0.1, 0.5, 1, 'slippage:N'],\n        priceImpact: '12',\n        minimumReceived: '1%',\n        fee: '1%'\n    }\n     const ammCalcData: AmmInData<{[key: string]: any}> = {\n        myCoinA: {belong:'ETH',balance:1000,tradeValue:0},\n        myCoinB: {belong:'LRC',balance:1000,tradeValue:0},\n        AtoB:50,\n        coinInfoMap: coinMap as any,\n        slippage: 0.5,\n        // slippageTolerance: [0.1, 0.5, 1, 'slippage:N'],\n        fee: '1%'\n    }\n\n\n    let swapProps: SwapProps<IBData<string>, string, any> = {\n        tradeData: undefined,\n        tradeCalcData,\n        onSwapClick: (tradeData) => {\n            console.log('Swap button click', tradeData);\n        },\n        handleSwapPanelEvent: async (data: any, switchType: any) => {\n            console.log(data, switchType)\n        },\n    };\n    let ammProps: AmmProps<AmmData<IBData<any>>, any, AmmInData<any>> = {\n        ammDepositData:{coinA: {belong: 'ETH',balance:0.3,tradeValue:0}, coinB:  {belong: 'LRC',balance:1000,tradeValue:0},slippage: '',},\n        ammWithdrawData:{coinA: {belong: 'ETH',balance:0.3,tradeValue:0}, coinB:  {belong: 'LRC',balance:1000,tradeValue:0},slippage: '',},\n        // tradeCalcData,\n        ammCalcData:ammCalcData,\n        handleAmmAddChangeEvent: (data,type) => {\n            console.log('handleAmmAddChangeEvent',data,type) ;\n        },\n        handleAmmRemoveChangeEvent:  (data,type) => {\n            console.log('handleAmmRemoveChangeEvent',data,type) ;\n        },\n        onAmmRemoveClick: (data)=>{\n            console.log('onAmmRemoveClick',data) ;\n        },\n        onAmmAddClick: (data)=>{\n            console.log('onAmmAddClick',data) ;\n        }\n    }\n\n    return {\n        depositProps, withdrawProps, transferProps, resetProps, ammProps, swapProps,\n    }\n}\n","import { REFRESH_RATE } from \"defs/common_defs\"\n\nexport function PromiseJob(fetchPromise: any, setFunc: any, field?: string, prefix: any = 'PromiseJob') {\n\n    let mounted = true\n\n    const handler = () => {\n        if (fetchPromise()) {\n            fetchPromise().then((data: any) => {\n                if (mounted) {\n                    setFunc(field ? data[field] : data)\n                } else {\n                    console.log(prefix + ' unmounted!')\n                }\n            }).catch((reason: any) => {\n                console.error(reason)\n            })\n        }\n    }\n\n    const cleanUp = () => {\n        mounted = false\n    }\n\n    return {\n        handler,\n        cleanUp,\n    }\n\n}\n\n\nexport function PromiseJobInTimer(fetchPromise: any, setFunc: any, field?: string, prefix: any = 'PromiseJobInTimer', timeout: number = REFRESH_RATE) {\n\n    let mounted = true\n\n    const handler = () => {\n\n        mounted = true\n\n        const fetchFunc = () => {\n            if (fetchPromise()) {\n                fetchPromise().then((data: any) => {\n                    if (mounted) {\n                        setFunc(field ? data[field] : data)\n                    } else {\n                        console.log(prefix + ' unmounted!')\n                    }\n                }).catch((reason: any) => {\n                    console.error(reason)\n                })\n            }\n        }\n\n        fetchFunc()\n\n        const id = setInterval(fetchFunc, timeout)\n\n        return id\n    }\n\n    const cleanUp = (handler: any) => {\n        mounted = false\n        if (handler) clearInterval(handler)\n    }\n\n    return {\n        handler,\n        cleanUp,\n    }\n\n}\n","import { useEffect } from 'react'\nimport { PromiseJob, PromiseJobInTimer } from '../../utils/hook_tools'\nimport { REFRESH_RATE_SLOW } from \"defs/common_defs\"\n\nexport function usePromiseJob(fetchPromise: any, setFunc: any, field? :string, prefix: any = undefined, dependencies: any[] = []) {\n\n  const {\n    handler,\n    cleanUp,\n  } = PromiseJob(fetchPromise, setFunc, field, prefix)\n\n  useEffect(() => {\n    handler()\n    return () => cleanUp()\n  }, dependencies)\n\n}\n\nexport function usePromiseJobInTimer(fetchPromise: any, setFunc: any, field? :string, \n  prefix: any = undefined, dependencies: any[] = [], timeout: number= REFRESH_RATE_SLOW) {\n  const {\n    handler,\n    cleanUp,\n  } = PromiseJobInTimer(fetchPromise, setFunc, field, prefix, timeout)\n\n  useEffect(() => {\n\n    const id = handler()\n    return () => cleanUp(id)\n  }, dependencies)\n\n}\n","import { WithTranslation, withTranslation } from 'react-i18next';\nimport { Box, Modal } from '@material-ui/core';\nimport { ModalCloseButton, ModalContentStyled, ModalQRCode } from '@loopring-web/component-lib';\nimport React from 'react';\nimport { AccountInfo, AccountInfoProps } from '@loopring-web/component-lib';\n\nexport const ModalAccountInfo = withTranslation('common')(({\n                                                               onClose,\n                                                               open,\n                                                               t,\n                                                               ...rest\n                                                           }: { open:boolean, onClose:(e:any)=>void} & AccountInfoProps & WithTranslation) => {\n\n\n    return <Modal\n        open={open}\n        onClose={onClose}\n        aria-labelledby=\"Account information\"\n        aria-describedby=\"show layer2 address, unlock/locked loopring wallet, copy address\"\n    >\n        <ModalContentStyled style={{boxShadow: '24'}}>\n            <Box paddingTop={3} paddingBottom={3} display={'flex'} flexDirection={'column'} minWidth='var(--modal-width)'>\n                <ModalCloseButton onClose={onClose} {...{...rest, t}} />\n                <AccountInfo {...rest}/>\n            </Box>\n\n        </ModalContentStyled>\n    </Modal>\n})","import React, { useCallback, useState, } from 'react'\n\nimport {\n    Header as HeaderUI,\n    HideOnScroll,\n    ModalWalletConnect,\n    AccountInfo,\n    ModalCloseButton,\n} from '@loopring-web/component-lib'\n\nimport { headerRoot } from '@loopring-web/component-lib/src/static-resource'\n\nimport { useLocation } from 'react-router-dom'\n\nimport { Toolbar, Snackbar, Alert, } from '@material-ui/core'\n\nimport { useHeader } from './hook'\n\nimport { useDisconnect, } from 'stores/account/hook'\nimport { ModalPanel, ModalQRCode, } from '@loopring-web/component-lib';\nimport { useGetExchangeInfo } from 'hooks/exchange/useExchangeAPI'\nimport { useModalProps } from './hook'\n\nimport { copyToClipBoard } from 'utils/obj_tools'\nimport { ModalAccountInfo } from '../../pages/AccountPage';\nimport { useTranslation } from 'react-i18next';\n\nconst Header = ({ ...rest }: any) => {\n\n    const {\n        depositProps,\n        withdrawProps,\n        transferProps,\n        resetProps,\n        ammProps,\n        swapProps,\n    } = useModalProps()\n\n    const location = useLocation()\n\n    const {\n        headerToolBarData,\n        headerMenuData,\n        gatewayList,\n        isShowConnect,\n        isShowAccountInfo,\n        setShowAccountInfo,\n        // setShowAccountInfo,\n        setShowConnect,\n        // open,\n        // setOpen,\n        // openConnect,\n        // setOpenConnect,\n        account,\n        accountInfoProps,\n        // showAccountInfo\n    } = useHeader()\n\n    const { exchangeInfo } = useGetExchangeInfo()\n\n    const { disconnect } = useDisconnect()\n\n    const onSwitch = useCallback(() => {\n        setShowAccountInfo({isShow:false})\n        setShowConnect({isShow:true})\n    }, [setShowConnect,setShowAccountInfo])\n\n    const [openQRCode, setOpenQRCode] = useState(false)\n\n    const [copyToastOpen, setCopyToastOpen] = useState(false);\n    const {t} = useTranslation('commom')\n\n    const closeCopyToast = () => { setCopyToastOpen(false) }\n\n    return (<>\n        <Snackbar open={copyToastOpen} autoHideDuration={2500} onClose={closeCopyToast}>\n            <Alert onClose={closeCopyToast} severity=\"success\">\n                {t('Address Copied to Clipboard!')}\n        </Alert>\n        </Snackbar>\n\n        <ModalQRCode open={openQRCode} onClose={() => setOpenQRCode(false)} title={'ETH Address'}\n            description={account.accAddr} url={account.accAddr} />\n\n        <ModalPanel transferProps={transferProps} withDrawProps={withdrawProps} \n        depositProps={depositProps} resetProps={resetProps} ammProps={ammProps} swapProps={swapProps}/>\n\n        <HideOnScroll>\n            {process.env.NODE_ENV !== 'production' && JSON.stringify(account?.status)}\n            {process.env.NODE_ENV !== 'production' && ' exchangeAddress:' + JSON.stringify(exchangeInfo?.exchangeAddress)}\n\n            <HeaderUI {...rest} headerMenuData={headerMenuData} headerToolBarData={headerToolBarData}\n                selected={location.pathname === '/' ? headerRoot : location.pathname}></HeaderUI>\n\n        </HideOnScroll>\n        <Toolbar />\n\n        <ModalWalletConnect {...{ ...rest, gatewayList, open:isShowConnect.isShow, onClose: () => setShowConnect({isShow:false}) }} />\n        {<ModalAccountInfo\n            open={isShowAccountInfo.isShow}\n            onClose={() => {setShowAccountInfo({isShow:false})}}\n            onCopy={() => {\n                copyToClipBoard(account.accAddr);\n                setCopyToastOpen(true)\n            }}\n            onViewQRCode={() => {\n                setOpenQRCode(true)\n            }}\n            onDisconnect={() => {\n                disconnect();\n                setShowAccountInfo({isShow:false});\n            }}\n            onSwitch={onSwitch}\n            {...{...accountInfoProps, ...rest}}></ModalAccountInfo>}\n    </>)\n}\n\n\nexport default Header\n\n\n\n","import { useState, } from 'react'\n\nimport { TradesData, TickerData, DepthData, \n  TokensResponse,\n  MarketsResponse, } from 'loopring-sdk'\n\nimport { usePromiseJob } from 'hooks/common/useCommon'\nimport { useExchangeAPI, } from './useApi'\n\nexport function useGetGas() {\n\n  const [gas, setGas] = useState<any>()\n\n  const api = useExchangeAPI()\n\n  const fetchData = () => {\n    if (!api) {\n      return undefined\n    }\n    return api.getGasPrice()\n  }\n\n  usePromiseJob(fetchData, setGas, undefined, 'useGetGas', [api])\n\n  return { gas }\n\n}\n\nexport function useGetMixMarkets() {\n\n  const [markets, setMarkets] = useState<MarketsResponse>()\n    const api = useExchangeAPI()\n\n    const fetchData = () => {\n      if (!api) {\n        return undefined\n      }\n      return api.getMixMarkets()\n    }\n  \n    usePromiseJob(fetchData, setMarkets, undefined, 'useGetMarkets', [api])\n    \n    return { markets }\n\n}\n\nexport function useGetMarkets() {\n\n  const [markets, setMarkets] = useState<MarketsResponse>()\n    const api = useExchangeAPI()\n\n    const fetchData = () => {\n      if (!api) {\n        return undefined\n      }\n      return api.getMarkets()\n    }\n  \n    usePromiseJob(fetchData, setMarkets, undefined, 'useGetMarkets', [api])\n    \n    return { markets }\n\n}\n\nexport function useGetExchangeInfo() {\n\n  const [exchangeInfo, setExchangeInfo] = useState<any>()\n    const api = useExchangeAPI()\n\n    const fetchData = () => {\n      if (!api) {\n        return undefined\n      }\n      return api.getExchangeInfo()\n    }\n  \n    usePromiseJob(fetchData, setExchangeInfo, 'exchangeInfo', 'useGetExchangeInfo', [api])\n    \n    return { exchangeInfo }\n\n}\n\nexport function useGetTokens() {\n\n  const [tokens, setTokens] = useState<TokensResponse>()\n    const api = useExchangeAPI()\n\n    const fetchData = () => {\n      if (!api) {\n        return undefined\n      }\n      return api.getTokens()\n    }\n  \n    usePromiseJob(fetchData, setTokens, undefined, 'useGetTokens', [api])\n    \n    return { tokens }\n\n}\n\n\nexport function useTrades(symbol: string) {\n\n  const [trades, setTrades] = useState<TradesData>()\n\n  const api = useExchangeAPI()\n\n  const fetchData = () => {\n    if (!api) {\n      return undefined\n    }\n    return api.getMarketTrades({\n      market: symbol\n    })\n  }\n\n  usePromiseJob(fetchData, setTrades, undefined, 'useTrades', [api, symbol])\n\n  return { trades, }\n\n}\n\nexport function useTickerMap(market: string) {\n\n  const [tickerMap, setTickerMap] = useState<{[key: string]: TickerData}>()\n\n  const api = useExchangeAPI()\n\n  const fetchData = () => {\n    if (!api) {\n      return undefined\n    }\n    return api.getTicker({\n      market\n    })\n  }\n\n  usePromiseJob(fetchData, setTickerMap, 'tickMap', 'useTickerMap', [api, market])\n\n  return { tickerMap, }\n\n}\n\nexport function useDepth(symbol: string) {\n\n  const api = useExchangeAPI()\n\n  const [depth, setDepth] = useState<DepthData>()\n\n    const fetchData = () => {\n      if (!api) {\n        return undefined\n      }\n      return api.getMixDepth({\n        market: symbol\n      })\n    }\n  \n    usePromiseJob(fetchData, setDepth, 'depth', 'useDepth', [api, symbol])\n\n  return { depth, }\n\n}\n","import React from \"react\"\nimport store from '../../stores';\nimport { TickerMap, useTicker } from '../../stores/ticker';\nimport { globalSetup, MarketBlockProps, QuoteTableRawDataItem, } from '@loopring-web/component-lib';\nimport { deepClone } from '../../utils/obj_tools';\nimport { useSocket } from '../../stores/socket';\nimport { TradingInterval, WsTopicType } from 'loopring-sdk';\nimport { LoopringAPI } from 'stores/apis/api'\nimport { tickerService } from '../../services/tickerService';\nimport { debounce } from \"lodash\"\n\nconst amtCol = 5\nconst OnePageSize = 16;\nconst rowHeight = 44;\n\n// 0\nfunction isNeedCallMore(currentStartIndex: number, to: number, marketArrayLength: number, currentListLength: number, pageSize: number = OnePageSize): boolean {\n    const pageCurrent = currentStartIndex / OnePageSize\n    if (to - pageCurrent > 1) {\n        return false\n    } else if (pageSize * to < marketArrayLength && currentListLength - 4 < pageSize * (to + 1)) {\n        return true\n    } else {\n        return false\n    }\n    // const target = event.target as HTMLDivElement;\n    //TODO 2 times height for scrollHeight  to - 16 - 4  calculator scroll  超过 20 个刷第二屏幕 。。。。超过 36 个刷下个一个屏幕 第一屏幕是 16+4+16\n    // if( target.clientHeight + target.scrollTop === target.scrollHeight &&  to*pageSize >= marketArrayLength) {\n    //     return  true\n    // }else{\n    //     return false;\n    // }\n}\n\nexport function useQuote<C extends { [ key: string ]: string }>() {\n\n\n    const {\n        tickerMap,\n        status: tickerStatus,\n        // errorMessage: errorTickerMap,\n        statusUnset: tickerStatusUnset,\n        updateTickers,\n    } = useTicker();\n    const {sendSocketTopic, socketEnd} = useSocket();\n    const {marketArray, coinMap} = store.getState().tokenMap;\n    const recommendMarkets: string[] = marketArray ? marketArray.slice(0, 4) : ['LRC-ETH', 'LRC-ETH', 'LRC-ETH', 'LRC-ETH']\n    const _marketArrayWithOutRecommend = marketArray ? marketArray.filter(item => recommendMarkets.findIndex(m => m === item) === -1) : [];\n    const [tickList, setTickList] = React.useState<any>([]);\n    const [recommendations, setRecommendations] = React.useState<MarketBlockProps<C>[]>([]);\n    const [, setTickerKeys] = React.useState<string[]>([]);\n    const [focusRowFrom, setFocusRowFrom] = React.useState<[start: number, end: number]>([0, 2]);\n    const [startIndex, setStartIndex] = React.useState<number>(-1);\n\n    const subject = React.useMemo(() => tickerService.onSocket(), []);\n\n    const updateRecommendation = React.useCallback((recommendationIndex, ticker) => {\n        if (recommendations.length) {\n          //  let _recommendations = deepClone(recommendations)\n            recommendations[ recommendationIndex ].tradeFloat = ticker\n            setRecommendations(recommendations)\n        }\n    }, [recommendations]);\n    React.useEffect(() => {\n        const subscription = subject.subscribe(({tickerMap}) => {\n            if (tickerMap) {\n                Reflect.ownKeys(tickerMap).forEach((key) => {\n                    let recommendationIndex = recommendMarkets.findIndex(ele => ele === key)\n                    if (recommendationIndex !== -1) {\n                        // setRecommendations\n                        updateRecommendation(recommendationIndex, tickerMap[ key as string ])\n                    }\n                    //todo update related row. use socket return\n                })\n            }\n        });\n        return () => subscription.unsubscribe();\n    }, [subject,recommendations]);\n\n\n    //TODO if socket is error throw use recall will pending on it\n    // React.useEffect(() => {\n    //     switch (socketStatus) {\n    //         case \"ERROR\":\n    //             console.log(\"ERROR\", 'open websocket error get moment value from api ');\n    //             socketStatusUnset();\n    //             updateTickers(tickerKeys);\n    //             break;\n    //         default:\n    //             break;\n    //     }\n    // }, [socketStatus, socketStatusUnset]);\n    React.useEffect(() => {\n        const [from, to] = focusRowFrom\n        getTicker(from, to);\n        socketSendTicker(from*OnePageSize);\n        return () => {\n            socketEnd()\n        }\n    }, []);\n    React.useEffect(() => {\n        switch (tickerStatus) {\n            case \"ERROR\":\n                console.log(\"ERROR\", 'get ticker error,ui');\n                tickerStatusUnset()\n                break;\n            case \"PENDING\":\n                break;\n            case \"DONE\":\n                tickerStatusUnset();\n                updateRawData(tickerMap as TickerMap<C>)\n                break;\n            default:\n                break;\n        }\n    }, [tickerStatus, tickerStatusUnset]);\n    const getTicker = React.useCallback((from: number, to: number) => {\n        if (_marketArrayWithOutRecommend) {\n            let array = _marketArrayWithOutRecommend.slice(from * OnePageSize, to * OnePageSize);\n            //High: add recommendations market first time is 36个数据\n            if (from === 0) {\n                array = recommendMarkets.concat(array)\n            }\n            updateTickers(array);\n        }\n\n\n    }, [marketArray, OnePageSize, recommendMarkets])\n\n    const updateRawData = React.useCallback((tickerMap: TickerMap<C>) => {\n        let _recommendationsFloat: QuoteTableRawDataItem[] = [];\n        const _tickList = Reflect.ownKeys(tickerMap).reduce((prev, key) => {\n            // @ts-ignore\n            const [, coinA, coinB] = key.match(/(\\w+)-(\\w+)/i);\n            let _item = {\n                ...tickerMap[ key as string ],\n                pair: {\n                    coinA,\n                    coinB,\n                },\n            } as QuoteTableRawDataItem;\n\n            if (recommendMarkets.findIndex(m => m === key) !== -1) {\n                _recommendationsFloat.push(deepClone(_item))\n            }\n            prev.push(_item);\n            return prev\n        }, [] as QuoteTableRawDataItem[])\n        setTickList([...tickList, ..._tickList])\n        //setTickList\n        if (focusRowFrom[ 0 ] === 0 && _recommendationsFloat.length > 0) {\n            //TODO : fix in uat env not enough pair_recommendations\n            while (_recommendationsFloat.length < 4) {\n                _recommendationsFloat.push(deepClone(_recommendationsFloat[ 0 ]));\n            }\n\n            const _recommendations = _recommendationsFloat.reduce((prev, item) => {\n                if (coinMap) {\n                    const {coinA, coinB} = item.pair;\n                    const _item: MarketBlockProps<C> = {\n                        tradeFloat: item,\n                        // @ts-ignore\n                        coinAInfo: coinMap[ coinA ],\n                        // @ts-ignore\n                        coinBInfo: coinMap[ coinB ]\n                    } as MarketBlockProps<C>\n                    prev.push(_item)\n                }\n                return prev\n            }, [] as MarketBlockProps<C>[])\n\n            setRecommendations(_recommendations)\n        }\n    }, [tickList, focusRowFrom])\n\n\n    // const  = (startIndex: number) => {\n    //     console.log(startIndex)\n    // }\n    const debounceGetTicker = React.useCallback(debounce((from, to) => {\n        getTicker(from, to)\n    }, globalSetup.wait), [])\n    const socketSendTicker = React.useCallback(debounce((_startIndex: number, pageSize = OnePageSize) => {\n        if(_startIndex !== startIndex)  {\n            let marketArray: string[] = _marketArrayWithOutRecommend.slice(_startIndex, _startIndex + pageSize);\n            marketArray = [...recommendMarkets, ...marketArray];\n            setTickerKeys(marketArray);\n            //High:\n            sendSocketTopic({[ WsTopicType.ticker ]: marketArray});\n        }\n    }, globalSetup.wait * 2), [startIndex])\n    const onVisibleRowsChange = React.useCallback(async (startIndex: number) => {\n        //TODO isBottom and is On prev tickerCall\n        // if (!isAtBottom(startIndex,focusRowFrom[1],_marketArrayWithOutRecommend.length,OnePageSize)\n        //     && tickerStatus !== 'PENDING'){\n        // }\n        //TODO load more\n        const [, to] = focusRowFrom\n        if (isNeedCallMore(startIndex, to, _marketArrayWithOutRecommend.length, tickList.length, OnePageSize)) {\n            console.log('getNextPage.......')\n            setFocusRowFrom([to, to + 1]);\n            debounceGetTicker(to, to + 1);\n        }\n        setStartIndex(startIndex);\n        socketSendTicker(startIndex, OnePageSize)\n    }, [focusRowFrom, OnePageSize, tickerStatus, marketArray, tickList])\n\n    return {\n        tickList,\n        recommendations,\n        // handleScroll,\n        onVisibleRowsChange\n    }\n\n}\n\nexport type CandlestickItem = {\n    close: number;\n    timeStamp: number;\n}\n\nexport const useCandlestickList = (market: string) => {\n    const [candlestickList, setCandlestickList] = React.useState<CandlestickItem[]>([])\n    const getCandlestick = React.useCallback(async (market: string) => {\n        if (LoopringAPI.exchangeAPI) {\n            const res = await LoopringAPI.exchangeAPI.getMixCandlestick({\n                market: market,\n                interval: TradingInterval.d1,\n                // start?: number;\n                // end?: number;\n                limit: 7\n            })\n            if (res && res.candlesticks && !!res.candlesticks.length) {\n                const data = res.candlesticks.map(o => ({\n                    close: o.close,\n                    timeStamp: o.timestamp\n                }))\n                setCandlestickList(data)\n            }\n            setCandlestickList([])\n        }\n        setCandlestickList([])\n    }, [])\n\n    React.useEffect(() => {\n        getCandlestick(market)\n    }, [getCandlestick, market])\n\n    return candlestickList\n}\n","import styled from '@emotion/styled';\nimport { Box, Grid, Paper } from '@material-ui/core';\nimport { TablePaddingX } from '@loopring-web/component-lib';\n\nexport const StylePaper = styled(Box)`\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  //height: 100%;\n  flex: 1;\n  background-color: ${({ theme }) => theme.colorBase.background().default};\n  border-radius: ${({ theme }) => theme.unit}px;\n  // padding: ${({ theme }) => 3 * theme.unit}px  0;\n  margin-bottom: ${({ theme }) => 2* theme.unit}px;\n  .title {\n    font-family: Gilroy-Medium;\n    font-size: ${({ theme }) => theme.unit * 3}px;\n    line-height: 19px;\n    margin-left: ${({ theme }) => 3 * theme.unit}px;\n    margin-top: ${({ theme }) => 3 * theme.unit}px;\n    margin-bottom: ${({ theme }) => 2 * theme.unit}px;\n  }\n\n  .tableWrapper {\n    display: flex;\n    margin-top: ${({ theme }) => 2 * theme.unit}px;\n    flex: 1;\n    .rdg {\n      flex: 1;\n    }\n  }\n` as typeof Paper;\n\n\nexport const  TableWrapStyled = styled(Grid)`\n  &{\n    background-color: ${({theme}) => theme.colorBase.background().default};\n    border-radius: ${({ theme }) => theme.unit}px;\n    .rdg{\n      .rdg-header-row {\n        border-radius: ${({theme}) => theme.unit}px ${({theme}) => theme.unit}px 0 0;\n      }\n    }\n  }\n  ${({theme}) => TablePaddingX({pLeft:theme.unit * 3,pRight:theme.unit * 3})}\n` as typeof Grid\n\n//    ${({theme}) => theme.border.defaultFrame({c_key: 'blur', d_R: 1})};\n","import React from 'react'\nimport styled from '@emotion/styled/macro'\n\nimport { MarketBlock, QuoteTable, TablePaddingX } from '@loopring-web/component-lib'\n\nimport { WithTranslation, withTranslation } from 'react-i18next'\n// import { FloatTag } from '@loopring-web/component-lib/src/static-resource'\nimport { Box, Grid } from '@material-ui/core'\nimport { useQuote, useCandlestickList } from './hook'\nimport { LoopringAPI } from 'stores/apis/api'\nimport { TradingInterval } from 'loopring-sdk/dist'\nimport { TableWrapStyled } from 'pages/styled'\n\nconst  RowStyled = styled(Grid)`\n      & .MuiGrid-root:not(:last-of-type) > div{\n        margin-right: ${({theme}) => theme.unit * 3}px;\n      }\n` as typeof Grid\n\n\nexport type CandlestickItem = {\n  market: string;\n  data: {\n    close: number;\n    timeStamp: number;\n  }[]\n}\n\nconst QuotePage = withTranslation('common')((rest: WithTranslation) => {\n    const [candlestickList, setCandlestickList] = React.useState<CandlestickItem[]>([])\n    const getCandlestick = React.useCallback(async (market: string) => {\n      if (LoopringAPI.exchangeAPI) {\n        const res = await LoopringAPI.exchangeAPI.getMixCandlestick({\n          market: market,\n          interval: TradingInterval.d1,\n          // start?: number;\n          // end?: number;\n          limit: 30\n        })\n        if (res && res.candlesticks && !!res.candlesticks.length) {\n          const data = res.candlesticks.map(o => ({\n            close: o.close,\n            timeStamp: o.timestamp\n          }))\n          setCandlestickList(prev => [...prev, {\n            market: market,\n            data: data\n          }])\n        }\n      }\n    }, [])\n\n    const { recommendations, tickList, onVisibleRowsChange } = useQuote()\n    React.useEffect(() => {\n      const list = recommendations.map(item => {\n        const market = `${item.coinAInfo.simpleName}-${item.coinBInfo.simpleName}`\n        return market\n      })\n      if (!!list.length) {\n        getCandlestick(list[0])\n        getCandlestick(list[1])\n        getCandlestick(list[2])\n        getCandlestick(list[3])\n      }\n    }, [recommendations, getCandlestick])\n\n\n\n    return <Box display={'flex'} flexDirection={'column'} flex={1} >\n\n        <RowStyled container >\n\n            {/* {recommendations.map((item,index)=> <Grid key={item.coinAInfo+item.coinBInfo+index} item xs={3} >\n                    <MarketBlock {...{...item, ...rest}}></MarketBlock>\n                </Grid>\n            )} */}\n            {recommendations.map((item,index)=> {\n              const market = `${item.coinAInfo.simpleName}-${item.coinBInfo.simpleName}`\n              const chartData = candlestickList.find(o => o.market === market)?.data\n              return (\n                <Grid key={item.coinAInfo+item.coinBInfo+index} item xs={3} >\n                    <MarketBlock {...{...item, chartData: chartData ? chartData : [], ...rest}}></MarketBlock>\n                </Grid>\n              )\n            } \n            )}\n\n\n\n        </RowStyled>\n        <TableWrapStyled container marginY={3}  paddingBottom={2} flex={1}>\n            <Grid item xs={12} display={'flex'}>\n                <QuoteTable onVisibleRowsChange={onVisibleRowsChange}  rawData={tickList} {...{ ...rest }} />\n            </Grid>\n        </TableWrapStyled>\n    </Box>\n\n\n})\n\nexport default QuotePage\n","import { useCallback, useState } from 'react'\n\nimport { useExchangeAPI } from 'hooks/exchange/useApi'\nimport { useCustomDCEffect } from 'hooks/common/useCustomDCEffect'\n\nimport { TradingInterval, Candlestick, GetCandlestickRequest, GetDepthRequest, GetTickerRequest, dumpError400, getExistedMarket } from 'loopring-sdk'\nimport { fromWEI } from 'utils/swap_calc_utils'\n\nimport { ChartUnit, CoinInfo } from '@loopring-web/component-lib/static-resource'\n\nimport { ChartType } from '@loopring-web/component-lib'\n\nimport { TGItemData, TGItemJSXInterface, } from '@loopring-web/component-lib'\n\nimport { IGetDepthDataParams } from '@loopring-web/component-lib/components/charts/scaleAreaChart/data'\n\nconst toggleData: TGItemData[] = [\n  {\n    value: ChartType.Trend,\n    key: ChartType.Trend,\n    label: 'label' + ChartType.Trend\n  },\n  {\n    value: ChartType.Depth,\n    key: ChartType.Depth,\n    label: 'label' + ChartType.Depth\n  },\n]\n\nexport function useBasicInfo(props: any, coinAInfo: any, coinBInfo: any, marketArray: any[], t: any) {\n  const tgItemJSXs: TGItemJSXInterface[] = toggleData.map(({ value, label, key }) => {\n    return { value, tlabel: t(label), key, JSX: <>{t(label)}</> }\n  })\n\n  // const { base, quote, market, tokens } = props\n\n  const { market, amm } = getExistedMarket(marketArray, coinAInfo?.name, coinBInfo?.name)\n\n  const [chartType, setChartType] = useState<ChartType>(ChartType.Trend)\n\n  // console.log('---useBasicInfo market:', market, ' amm:', amm, ' chartType:', chartType)\n  //\n  // const [change, setChange] = useState(0)\n  //\n  // const [volume, setVolume] = useState('')\n\n  const [chartUnit, setChartUnit] = useState(ChartUnit.D1)\n\n  const [originData, setOriginData] = useState<any>(undefined)\n\n  const handleChange = useCallback((_e: React.MouseEvent, value: any) => {\n    // Settings.setChartType(value)\n    // console.log('useBasicInfo handleChange:', value)\n    setOriginData(undefined)\n    setChartType(value)\n  }, [setOriginData, setChartType])\n\n  const handleChartUnitChange = (event: React.MouseEvent<HTMLElement, MouseEvent>, newValue: string) => {\n      const mappedValue = newValue === '1H' ? ChartUnit.H1 : newValue === '1W' ? ChartUnit.W1 : ChartUnit.D1\n      setChartUnit(mappedValue)\n  }\n\n  const exchangeApi = useExchangeAPI()\n\n  // useCustomDCEffect(async () => {\n  //\n  //   if (!exchangeApi || !market || !tokens || !quote) {\n  //     return\n  //   }\n  //\n  //   let mounted = true\n  //\n  //   try {\n  //\n  //     const request: GetTickerRequest = {\n  //       market: market.market,\n  //     }\n  //\n  //     const ticker = await exchangeApi.getTicker(request)\n  //     if (mounted) {\n  //\n  //       if (ticker.tickList[0].change) {\n  //         setChange(ticker.tickList[0].change)\n  //       }\n  //\n  //       if (ticker.tickList[0].base_token_volume) {\n  //         const baseVol = fromWEI(tokens.tokenSymbolMap, base, ticker.tickList[0].base_token_volume) as string\n  //         setVolume(baseVol)\n  //       }\n  //     }\n  //   }\n  //   catch (reason) {\n  //     dumpError400(reason, 'ChartPanel getCandlestick')\n  //   }\n  //\n  //   return () => {\n  //     mounted = false\n  //   }\n  //\n  // }, [exchangeApi, market, tokens, base,])\n\n  const tgItemJSXsPriceChart: TGItemJSXInterface[] = Object.keys(ChartUnit).reduce((pre, item) => {\n    // @ts-ignore\n    const tGItemData: TGItemData = { value: ChartUnit[item], key: ChartUnit[item], label: 'label' + ChartUnit[item] };\n    pre.push({ value: tGItemData.value, tlabel: t(tGItemData.label ? tGItemData.label : tGItemData.key), key: tGItemData.key, JSX: <>{t(tGItemData.label ? tGItemData.label : tGItemData.key)}</> })\n    return pre\n  }, [] as TGItemJSXInterface[])\n\n  useCustomDCEffect(async () => {\n  \n    let mounted = true\n  \n    if (!exchangeApi || !market || !amm) {\n      return\n    }\n  \n    if (chartType === ChartType.Trend) {\n      const request: GetCandlestickRequest = {\n        market: amm as string,\n        interval: TradingInterval.min15,\n        limit: 96\n      }\n  \n      try {\n        const candlesticks = await exchangeApi.getCandlestick(request)\n  \n        if (mounted) {\n          const originData = candlesticks.candlesticks.map((item: Candlestick) => {\n            return {\n              timeStamp: item.timestamp,\n              low: item.low,\n              high: item.high,\n              open: item.open,\n              close: item.close,\n              volume: item.quoteVol,\n            }\n          })\n          setOriginData(originData)\n        }\n      }\n      catch (reason) {\n        dumpError400(reason, 'ChartPanel getCandlestick')\n      }\n  \n    } else {\n      const request: GetDepthRequest = {\n        market,\n      }\n  \n      try {\n  \n        const { depth } = await exchangeApi.getMixDepth(request)\n        console.log('useBasicInfo depth:', depth)\n        if (mounted) {\n          const originData: IGetDepthDataParams = {\n            bidsPrices: depth.bids_prices,\n            bidsAmtTotals: depth.bids_amtTotals as any,\n            asksPrices: depth.asks_prices,\n            asksAmtTotals: depth.asks_amtTotals as any,\n          }\n          setOriginData(originData)\n        }\n  \n      } catch (reason) {\n        dumpError400(reason)\n      }\n  \n    }\n  \n    return () => {\n      mounted = false\n    }\n  \n  }, [exchangeApi, amm, market, chartType])\n\n  return {\n    // change,\n    // volume,\n    chartUnit,\n    chartType,\n    tgItemJSXs,\n    tgItemJSXsPriceChart,\n    handleChange,\n    originData,\n    handleChartUnitChange,\n  }\n}","import { ChartUnit,UpColor } from '@loopring-web/component-lib/static-resource'\nimport { ScaleAreaChart, ToggleButtonGroup, useSettings, TradeTitle, ChartType } from '@loopring-web/component-lib'\nimport { Box, Grid } from \"@material-ui/core\"\nimport { WithTranslation } from 'react-i18next'\nimport { useBasicInfo } from './hook'\n\nconst BasicInfoPanel = ({ props, coinAInfo, coinBInfo, tradeFloat, marketArray, t, ...rest }: any & WithTranslation) => {\n\n    const {\n        // change,\n        chartType,\n        tgItemJSXs,\n        tgItemJSXsPriceChart,\n        handleChange,\n        originData,\n        chartUnit,\n        handleChartUnitChange,\n    } = useBasicInfo(props, coinAInfo, coinBInfo, marketArray, t)\n    const { upColor } = useSettings();\n\n    return <>\n        <Grid item xs={8}>\n            <TradeTitle {...{\n                coinAInfo, coinBInfo,\n                ...rest, t, tradeFloat\n            }}></TradeTitle>\n        </Grid>\n        <Grid item xs={4} display={'flex'} justifyContent={'flex-end'} alignItems={'flex-end'}>\n            <ToggleButtonGroup exclusive {...{ ...rest, t, tgItemJSXs, value: chartType }}\n                handleChange={handleChange} />\n        </Grid>\n\n        <Grid item xs={12} position={'relative'}>\n            <Box minHeight={256} maxHeight={256} display={'block'} style={{ height: '100%', width: '100%' }}>\n                <ScaleAreaChart type={chartType} data={originData ?? []} riseColor={upColor as keyof typeof UpColor}\n                    handleMove={() => {\n                    }} />\n            </Box>\n            {chartType === ChartType.Trend && (\n                <Box height={24} display={'flex'} justifyContent={'flex-end'} position={'absolute'} right={0} bottom={0}>\n                    <ToggleButtonGroup exclusive {...{\n                        ...rest, t, tgItemJSXs: tgItemJSXsPriceChart,\n                        value: chartUnit, size: 'small'\n                    }}\n                        handleChange={handleChartUnitChange} />\n                </Box>\n            )}\n        </Grid> \n        {/* <Grid item xs={12} height={24} display={'flex'} justifyContent={'flex-end'}>\n            <ToggleButtonGroup exclusive {...{\n                ...rest, t, tgItemJSXs: tgItemJSXsPriceChart,\n                value: chartUnit, size: 'small'\n            }}\n                handleChange={handleChartUnitChange} />\n        </Grid> */}\n    </>\n\n};\n\nexport default BasicInfoPanel\n","\n\nimport { RefAttributes, useState } from 'react'\n\nimport Tabs from '@material-ui/core/Tabs'\nimport Tab from '@material-ui/core/Tab'\nimport Checkbox from '@material-ui/core/Checkbox'\nimport styled from '@emotion/styled'\n\nimport { FormControlLabel, TradeTable, } from '@loopring-web/component-lib'\nimport { withTranslation, WithTranslation } from 'react-i18next';\nimport { CheckBoxIcon, CheckedIcon } from '@loopring-web/component-lib/static-resource'\nimport { RouteComponentProps, withRouter } from 'react-router'\nimport { Box } from '@material-ui/core';\nimport { RawDataTradeItem } from '@loopring-web/component-lib/components/tableList/tradeTable/TradeTable';\nimport { BasicHeaderItem, HeadMenuType } from '@loopring-web/component-lib/components/basic-lib/lists/Interface';\nimport { TableWrapStyled } from '../../../styled';\n\n// const StylePaper = styled(Box)`\n//\n//\n//   background-color: ${({theme}) => theme.colorBase.background().default};\n//   border-radius: ${({theme}) => theme.unit}px;\n//\n//   //padding: 20px;\n//\n//   // .tableWrapper {\n//   //   margin-top: ${({theme}) => theme.unit * 1.5}px;\n//   //   border: 1px solid ${({theme}) => theme.colorBase.borderColor};\n//   //   border-radius: ${({theme}) => theme.unit}px;\n//   //   padding: 26px;\n//   // }\n// ` as typeof Box;\n\n\nconst applyProps = (index: number) => {\n    return {\n        id: `simple-tab-${index}`,\n        'aria-controls': `simple-tabpanel-${index}`,\n    }\n}\nconst StyledTabsWrapper = styled.div`\n          position: relative;\n          width: 100%;\n          margin-top: ${({theme}) => theme.unit * 4}px;\n        `\n\nconst StyledFormControlLabel = styled(FormControlLabel)`\n          position: absolute;\n          top: 0;\n          right: ${({theme}) => theme.unit}px;\n          margin: ${({theme}) => theme.unit}px 0 0 0;\n        `\n\n\nconst TradePanel = withTranslation('common')(\n   // withRouter(\n    (\n        {tradeArray,  myTradeArray, t}:\n            { tradeArray: RawDataTradeItem[], myTradeArray: RawDataTradeItem[] } & WithTranslation & RouteComponentProps) => {\n        const [isAllTrade, setIsAllTrade] = useState(false)\n        const [value, setValue] = useState(1)\n        const handleChange = (event: any, newValue: any) => {\n            setValue(newValue)\n        }\n\n        const handleCheckboxChange = () => {\n            setIsAllTrade((flag: boolean) => !flag)\n        }\n\n        return (\n            <StyledTabsWrapper>\n                <StyledFormControlLabel\n                    control={<Checkbox checked={isAllTrade} size={'small'} checkedIcon={<CheckedIcon/>}\n                                       icon={<CheckBoxIcon/>} color={'default'} onChange={handleCheckboxChange}/>}\n                    label={t('labelTradePanelHideOtherPairs')}/>\n\n                <Tabs value={value}\n                      onChange={handleChange}\n                      aria-label=\"tabs switch\">\n                    <Tab label={t('labelMyTrade')} {...applyProps(0)} />\n                    <Tab label={t('labelRecent')}   {...applyProps(1)} />\n                </Tabs>\n\n                <TableWrapStyled marginY={2}  paddingBottom={2} flex={1}>\n                    {value === 0 ?  <TradeTable rawData={myTradeArray} /> : <TradeTable rawData={tradeArray}/> }\n                </TableWrapStyled>\n\n            </StyledTabsWrapper>\n        )\n    }\n    ) as  (props: { tradeArray: RawDataTradeItem[], myTradeArray: RawDataTradeItem[] }) => JSX.Element;\n//)\n\nexport default TradePanel\n\n","import { Box, Grid, } from '@material-ui/core'\nimport { WithTranslation, withTranslation } from 'react-i18next'\nimport BasicInfoPanel from './panel/BasicInfoPanel'\nimport TradePanel from './panel/TradePanel'\nimport styled from 'styled-components'\nimport { useSwapPage } from './hook';\nimport { SwapPanel } from '@loopring-web/component-lib'\n\nconst FixedStyle = styled(Box)`\n  @media only screen and (min-height: 680px ) and (min-width:1024px){\n    position: fixed;\n  }\n`\n\nexport const SwapPage = withTranslation('common')(({ ...rest }: WithTranslation) => {\n\n    const {tradeCalcData,tradeData,tradeFloat,tradeArray, myTradeArray, marketArray, handleSwapPanelEvent, onSwapClick,pair,swapBtnI18nKey} = useSwapPage();\n\n    return <>\n        <Grid container marginRight={3} alignContent={'flex-start'} >\n            <BasicInfoPanel {...{ ...rest,\n                ...pair, marketArray,\n                tradeFloat, tradeArray }} />\n            <TradePanel tradeArray={tradeArray} myTradeArray={myTradeArray} />\n\n            {/**/}\n        </Grid>\n\n        <Box display={'flex'} style={{ minWidth: 'var(--swap-box-width)' }} >\n            <FixedStyle>\n                <SwapPanel tradeData={tradeData}\n                           tradeCalcData={tradeCalcData}\n                           onSwapClick={onSwapClick}\n                           swapBtnI18nKey={swapBtnI18nKey}\n                           // handleError={}\n                           {...{handleSwapPanelEvent,...rest}}\n                />\n            </FixedStyle>\n\n        </Box>\n\n    </>\n});\n\n\n // SwapPage\n","import { useRouteMatch } from 'react-router';\nimport {\n    CoinInfo,\n    CustomError,\n    ErrorMap,\n    globalSetup,\n    IBData,\n    TradeCalcData,\n    TradeFloat\n} from '@loopring-web/component-lib/static-resource';\nimport React, { useState } from 'react';\nimport { LoopringAPI } from '../../stores/apis/api';\nimport { useTokenMap } from '../../stores/token';\nimport * as fm from 'loopring-sdk';\nimport {\n    AmmPoolInfoV3,\n    AmmPoolSnapshot,\n    dumpError400,\n    getExistedMarket,\n    GetNextStorageIdRequest,\n    LoopringMap,\n    OrderType,\n    SubmitOrderRequestV3,\n    VALID_UNTIL\n} from 'loopring-sdk';\nimport { useAmmMap } from '../../stores/Amm/AmmMap';\nimport { useWalletLayer2 } from '../../stores/walletLayer2';\nimport { RawDataTradeItem, SwapTradeData, SwapType } from '@loopring-web/component-lib';\nimport { useAccount } from '../../stores/account/hook';\nimport { useCustomDCEffect } from '../../hooks/common/useCustomDCEffect';\nimport {\n    accountStaticCallBack,\n    bntLabel,\n    btnClickMap,\n    coinPairInit,\n    fnType,\n    getUserTrades,\n    makeCache,\n    makeMarketArray,\n    makeTickView,\n    makeWallet,\n    pairDetailBlock,\n    pairDetailDone\n} from '../../hooks/help';\nimport * as _ from 'lodash'\nimport store from 'stores';\nimport { AccountStatus } from 'state_machine/account_machine_spec';\nimport { SwapData } from '@loopring-web/component-lib/components/panel/components';\nimport { deepClone } from '../../utils/obj_tools';\n\nexport const useSwapPage = <C extends { [ key: string ]: any }>() => {\n    /*** api prepare ***/\n        // const exchangeApi = exchangeAPI();\n    const wait = globalSetup.wait;\n    const match: any = useRouteMatch(\":symbol\")\n    const {coinMap, tokenMap, marketArray, marketCoins, marketMap,} = useTokenMap()\n    const {ammMap} = useAmmMap();\n    // const {setShowConnect, setShowAccountInfo} = useOpenModals();\n    // const {ShowDeposit} = useModals()\n    const {account} = useAccount()\n\n    const walletLayer2State = useWalletLayer2();\n\n    const [tradeData, setTradeData] = React.useState<SwapTradeData<IBData<C>> | undefined>(undefined);\n    const [tradeCalcData, setTradeCalcData] = React.useState<TradeCalcData<C> | undefined>(undefined);\n    const [tradeArray, setTradeArray] = React.useState<RawDataTradeItem[]>([]);\n    const [myTradeArray, setMyTradeArray] = React.useState<RawDataTradeItem[]>([]);\n    const [tradeFloat, setTradeFloat] = React.useState<TradeFloat | undefined>(undefined);\n    const [pair, setPair] = React.useState<{ coinAInfo: CoinInfo<C> | undefined, coinBInfo: CoinInfo<C> | undefined }>({\n        coinAInfo: undefined,\n        coinBInfo: undefined,\n    });\n\n\n    const [ammPoolSnapshot, setAmmPoolSnapshot] = React.useState<AmmPoolSnapshot | undefined>(undefined);\n\n    const [swapBtnI18nKey, setSwapBtnI18nKey] = React.useState<string | undefined>(undefined);\n\n    const [output, setOutput] = useState<any>()\n\n    //HIGH: get Router info\n    // const symbol = match?.params.symbol ?? undefined;\n    React.useEffect(() => {\n        const symbol = match?.params.symbol ?? undefined;\n        resetSwap(symbol, undefined, undefined, undefined)\n    }, []);\n    //TODO tickMap\n    React.useEffect(() => {\n    }, [])\n\n    //HIGH: effect by wallet state update\n    React.useEffect(() => {\n        switch (walletLayer2State.status) {\n            case \"ERROR\":\n                walletLayer2State.statusUnset();\n                // setState('ERROR')\n                //TODO: show error at button page show error  some retry dispath again\n                break;\n            case \"DONE\":\n                walletLayer2State.statusUnset();\n                const {walletMap} = makeWallet();\n                if (tradeCalcData) {\n                    setTradeCalcData({...tradeCalcData, walletMap} as TradeCalcData<C>);\n                    setTradeData({\n                        sell: {\n                            belong: tradeCalcData.sellCoinInfoMap ? tradeCalcData.sellCoinInfoMap[ tradeCalcData.coinSell ]?.simpleName : undefined,\n                            balance: walletMap ? walletMap[ tradeCalcData.coinSell ]?.count : 0\n                        },\n                        // @ts-ignore\n                        buy: {\n                            belong: tradeCalcData.sellCoinInfoMap ? tradeCalcData.sellCoinInfoMap[ tradeCalcData.coinBuy ]?.simpleName : undefined,\n                            balance: walletMap ? walletMap[ tradeCalcData.coinBuy ]?.count : 0\n                        },\n                    } as SwapTradeData<IBData<C>>)\n                    let {\n                        amm,\n                        market\n                    } = getExistedMarket(marketArray, tradeCalcData.coinSell as string, tradeCalcData.coinBuy as string);\n                    getUserTrades(market).then((marketTrades) => {\n                        let _myTradeArray = makeMarketArray(market, marketTrades) as RawDataTradeItem[]\n                        setMyTradeArray(_myTradeArray ? _myTradeArray : [])\n                    })\n                }\n                break;\n            default:\n                break;\n\n        }\n    }, [walletLayer2State.status, setMyTradeArray])\n\n    React.useEffect(() => {\n    }, [])\n\n\n    useCustomDCEffect(() => {\n        const label: string | undefined = accountStaticCallBack(bntLabel)\n        setSwapBtnI18nKey(label);\n    }, [account.status, bntLabel])\n    const swapBtnClickArray: typeof btnClickMap = Object.assign(deepClone(btnClickMap), {\n        [ fnType.ACTIVATED ]: [async function ({sell, buy, slippage, ...rest}:any) {\n            //TODO: swap onClick\n\n            const {exchangeInfo} = store.getState().system\n\n            if (!LoopringAPI.userAPI || !tokenMap || !exchangeInfo\n                || account.status !== AccountStatus.ACTIVATED) {\n                return\n            }\n\n            const baseToken = tokenMap[ sell.belong as string ]\n            const quoteToken = tokenMap[ buy.belong as string ]\n\n            const request: GetNextStorageIdRequest = {\n                accountId: account.accountId,\n                sellTokenId: baseToken.tokenId\n            }\n\n            const storageId = await LoopringAPI.userAPI.getNextStorageId(request, account.apiKey)\n\n            try {\n\n                const request: SubmitOrderRequestV3 = {\n                    exchange: exchangeInfo.exchangeAddress,\n                    accountId: account.accountId,\n                    storageId: storageId.orderId,\n                    sellToken: {\n                        tokenId: baseToken.tokenId,\n                        volume: output.amountS\n                    },\n                    buyToken: {\n                        tokenId: quoteToken.tokenId,\n                        volume: output.amountBOutSlip\n                    },\n                    allOrNone: false,\n                    validUntil: VALID_UNTIL,\n                    maxFeeBips: 60,\n                    fillAmountBOrS: false, // amm only false\n                    orderType: OrderType.ClassAmm,\n                    eddsaSignature: '',\n                }\n\n                const response = await LoopringAPI.userAPI.submitOrder(request, account.eddsaKey, account.apiKey)\n\n                console.log(response)\n\n            } catch (reason) {\n                dumpError400(reason)\n            }\n\n            if (rest.__cache__) {\n                makeCache(rest.__cache__)\n            }\n        }]\n    })\n    const onSwapClick = React.useCallback(({sell, buy, slippage, ...rest}: SwapTradeData<IBData<C>>) => {\n        accountStaticCallBack(swapBtnClickArray,[{sell, buy, slippage, ...rest}])\n    },[swapBtnClickArray])\n    const handleSwapPanelEvent = async (swapData: SwapData<SwapTradeData<IBData<C>>>, switchType: any): Promise<void> => {\n        //TODO setMarket(market);\n        // _.throttle(()=>{\n        const {tradeData} = swapData\n        return new Promise((resolve) => {\n            switch (switchType) {\n                case SwapType.SEll_CLICK:\n                    break\n                case SwapType.BUY_CLICK:\n                    break\n                case SwapType.SELL_SELECTED:\n                    resetSwap(`${tradeData.sell.belong}-${tradeData.buy.belong}`, 'sell', tradeData, ammPoolSnapshot)\n                    break\n                case SwapType.BUY_SELECTED:\n                    resetSwap(`${tradeData.sell.belong}-${tradeData.buy.belong}`, 'buy', tradeData, ammPoolSnapshot)\n                    break\n                case SwapType.EXCHANGE_CLICK:\n                    resetSwap(`${tradeData.sell.belong}-${tradeData.buy.belong}`, undefined, undefined, ammPoolSnapshot)\n                    break\n                default:\n                    break\n            }\n\n            resolve(undefined)\n        })\n        // },wait)\n\n    }\n\n    const calculateTradeData = async (type: 'sell' | 'buy', _tradeData: SwapTradeData<IBData<C>>, ammPoolSnapshot: AmmPoolSnapshot | undefined): Promise<{ _tradeCalcData: TradeCalcData<C>, _tradeData: SwapTradeData<IBData<C>> }> => {\n        //if(`${pair.coinAInfo?.simpleName}-${pair.coinBInfo?.simpleName}` === coinKey)\n        if (_tradeData[ type ].tradeValue && tradeCalcData) {\n            type === 'sell' ? _tradeData[ 'buy' ].tradeValue = fm.toBig(_tradeData[ 'sell' ].tradeValue).times(tradeCalcData.StoB).toNumber()\n                : _tradeData[ 'sell' ].tradeValue = fm.toBig(_tradeData[ 'buy' ].tradeValue).times(tradeCalcData.BtoS).toNumber()\n        }\n        const market = `${pair.coinAInfo?.simpleName}-${pair.coinBInfo?.simpleName}`\n        const depth = await LoopringAPI.exchangeAPI?.getMixDepth({market})\n        if (!marketArray || !tokenMap || !marketMap || !depth || !ammMap || !tradeCalcData) {\n            let _tradeCalcData = {...tradeCalcData} as TradeCalcData<C>;\n            return {_tradeData, _tradeCalcData}\n        }\n\n        const isAtoB = type === 'sell'\n        let input: any = (isAtoB ? _tradeData.sell.tradeValue : _tradeData.buy.tradeValue)\n\n        if (input) {\n            input = input.toString()\n        } else {\n            input = '0'\n        }\n\n        const base = _tradeData.sell.belong as string\n        const quote = _tradeData.buy.belong as string\n\n        const output = fm.getOutputAmount(input, base, quote, isAtoB, marketArray, tokenMap,\n            marketMap, depth?.depth, {[ 'AMM-' + market ]: ammMap[ 'AMM-' + market ].__rawConfig__} as LoopringMap<AmmPoolInfoV3>,\n            ammPoolSnapshot, '6', '200')\n\n        setOutput(output)\n\n        tradeCalcData.priceImpact = output?.priceImpact as string\n\n        if (isAtoB) {\n            _tradeData.buy.tradeValue = output?.output ? parseFloat(output?.output) : 0\n        } else {\n            _tradeData.sell.tradeValue = output?.output ? parseFloat(output?.output) : 0\n        }\n        //TODO: renew  tradeCalcData\n        let _tradeCalcData = {...tradeCalcData} as TradeCalcData<C>;\n        return {_tradeData, _tradeCalcData}\n    }\n\n    const throttleSetValue = React.useCallback(_.debounce(async (type, _tradeData, _ammPoolSnapshot) => {\n        const {_tradeData: td, _tradeCalcData} = await calculateTradeData(type, _tradeData, _ammPoolSnapshot)//.then(()=>{\n        setTradeData(td)\n        setTradeCalcData(_tradeCalcData)\n\n    }, wait * 2), [setTradeData, setTradeCalcData, calculateTradeData]);\n\n    const resetSwap = async (coinKey: any, type: 'sell' | 'buy' | undefined, _tradeData: SwapTradeData<IBData<C>> | undefined, _ammPoolSnapshot: AmmPoolSnapshot | undefined) => {\n        if (tradeCalcData\n            && coinKey === `${tradeCalcData.coinSell}-${tradeCalcData.coinBuy}`\n            && _tradeData\n            && type\n            && (!tradeData || (tradeData[ type ].tradeValue !== _tradeData[ type ].tradeValue))) {\n            // calculateTradeData(type,_tradeData,_ammPoolSnapshot)\n            throttleSetValue(type, _tradeData, _ammPoolSnapshot)\n            //throttleSetValue(td,_tradeCalcData);\n\n        } else {\n            let _tradeFloat: Partial<TradeFloat> = {}\n            let _tradeArray: Array<Partial<RawDataTradeItem>> | undefined = undefined;\n            let _tradeCalcData: Partial<TradeCalcData<C>> = coinPairInit({\n                coinKey,\n                _tradeCalcData: {},\n                tokenMap,\n                coinMap\n            })\n            let {\n                amm,\n                market\n            } = getExistedMarket(marketArray, _tradeCalcData.coinSell as string, _tradeCalcData.coinBuy as string);\n            const [, coinA, coinB] = market.match(/(\\w+)-(\\w+)/i)\n\n            setTradeCalcData({...tradeCalcData, ..._tradeCalcData} as TradeCalcData<C>);\n            if (coinMap) {\n                setPair({\n                    coinAInfo: coinMap[ coinA ],\n                    coinBInfo: coinMap[ coinB ],\n                })\n            }\n            if (walletLayer2State.walletLayer2) {\n                const {walletMap} = makeWallet();\n                _tradeCalcData.walletMap = walletMap;\n                getUserTrades(market).then((marketTrades) => {\n                    let _myTradeArray = makeMarketArray(market, marketTrades) as RawDataTradeItem[]\n                    setMyTradeArray(_myTradeArray ? _myTradeArray : [])\n                })\n\n\n            }\n            let apiList = [];\n            //TODO wallet saga done\n            if (marketArray && amm && market && ammMap) {\n                // let pairPromise =  usePairTitleBlock({market})\n                apiList = [\n                    LoopringAPI.exchangeAPI?.getMarketTrades({market}),\n                    pairDetailBlock({coinKey: market, ammKey: amm, ammMap})\n                ];\n                //HiGH: this need add websocket to update infr ticker ammpoolsbalace\n                // @ts-ignore\n                Promise.all([...apiList]).then(\n                    ([{marketTrades}, {ammPoolsBalance, tickMap}]: any[]) => {\n                        setAmmPoolSnapshot(ammPoolsBalance)\n                        if (tokenMap) {\n                            let {_tradeCalcData: _td} = pairDetailDone({\n                                coinKey: `${_tradeCalcData.coinSell}-${_tradeCalcData.coinBuy}`,\n                                market,\n                                ammPoolsBalance,\n                                tickerData: tickMap[ market ] ? tickMap[ market ] : {},\n                                tokenMap,\n                                _tradeCalcData,\n                                coinMap,\n                                marketCoins\n                            })\n                            _tradeCalcData = _td;\n                            _tradeFloat = makeTickView(tickMap[ market ] ? tickMap[ market ] : {})\n                            _tradeArray = makeMarketArray(market, marketTrades)\n                            // @ts-ignore\n                            setTradeCalcData(_tradeCalcData as TradeCalcData<C>);\n                            // @ts-ignore\n                            setTradeFloat(_tradeFloat);\n                            setTradeArray(_tradeArray as RawDataTradeItem[])\n                            // setPair(_pair)\n                            setTradeData({\n                                sell: {\n                                    belong: _tradeCalcData.sellCoinInfoMap ? _tradeCalcData.sellCoinInfoMap[ _tradeCalcData.coinSell ]?.simpleName : undefined,\n                                    balance: _tradeCalcData.walletMap ? _tradeCalcData.walletMap[ _tradeCalcData.coinSell ]?.count : 0\n                                },\n                                // @ts-ignore\n                                buy: {\n                                    belong: _tradeCalcData.sellCoinInfoMap ? _tradeCalcData.sellCoinInfoMap[ _tradeCalcData.coinBuy ]?.simpleName : undefined,\n                                    balance: _tradeCalcData.walletMap ? _tradeCalcData.walletMap[ _tradeCalcData.coinBuy ]?.count : 0\n                                },\n                            } as SwapTradeData<IBData<C>>)\n                        }\n                    }).catch((error) => {\n                    throw new CustomError({...ErrorMap.TRADE_LITE_SET_PAIR_ERROR, options: error})\n                    //TODO solve error\n                })\n\n            }\n        }\n\n    }\n    return {\n        tradeCalcData,\n        tradeFloat,\n        tradeArray,\n        myTradeArray,\n        tradeData,\n        pair,\n        marketArray,\n        onSwapClick,\n        swapBtnI18nKey,\n        handleSwapPanelEvent\n    }\n\n}","import { useCallback, useMemo, useState, useRef, useEffect } from 'react'\n\nimport { useWsAPI, } from './useApi'\n\nimport { ChainId, getAccountArg, getCandlestickArg, getAmmpoolArg, \n    getTickerArg, WsProps } from 'loopring-sdk'\nimport store from 'stores'\n\nconst stateArr = [\n    { key: 0, value: 'Connecting' },\n    { key: 1, value: 'Connected' },\n    { key: 2, value: 'Closing' },\n    { key: 3, value: 'Closed' }\n]\n\nexport const useWebsocket = ({ topics, verify, needApiKey, apiKey, }: { topics: any, needApiKey: boolean, apiKey: string|undefined, verify: boolean, }) => {\n    const ws = useRef<WebSocket | null>(null)\n    const [wsData, setMessage] = useState<any>(undefined)\n    const [readyState, setReadyState] = useState({ key: 0, value: 'Connecting' })\n\n    const chainId = store.getState().trading.chainId\n\n    const api = useWsAPI()\n\n    const creatWebSocket = () => {\n\n        if (!api || !chainId) {\n            return\n        }\n\n        api.getWsKey().then((wsApiKey: any) => {\n            let basePath: string = 'wss://ws.'\n            switch (chainId) {\n                case ChainId.MAINNET:\n                    basePath += process.env.REACT_APP_API_URL\n                    break\n                default:\n                    basePath += process.env.REACT_APP_API_URL_UAT\n                    basePath = 'wss://ws.uat2.loopring.io'\n            }\n\n            basePath += '/v3/ws?wsApiKey=' + wsApiKey.wsKey\n    \n            try {\n                ws.current = new WebSocket(basePath)\n\n                const subTopics = (topics: any) => {\n                    let data: any = {\n                        op: 'sub',\n                        unsubscribeAll: 'true',\n                        topics: topics,\n                    }\n            \n                    if (needApiKey && apiKey) {\n                        data.apiKey = apiKey\n                    }\n            \n                    const flat_txt = JSON.stringify(data)\n                    sendMessage(flat_txt)\n                }\n    \n                ws.current.onopen = (_e) => {\n                    setReadyState(stateArr[ws.current?.readyState ?? 0])\n                    // subTopics(topics)\n                }\n                \n                ws.current.onclose = (e) => {\n                    setReadyState(stateArr[ws.current?.readyState ?? 0])\n                }\n                \n                ws.current.onerror = (e) => {\n                    setReadyState(stateArr[ws.current?.readyState ?? 0])\n                }\n    \n                ws.current.onmessage = (e) => {\n                    setMessage(e.data)\n                }\n            } catch (error) {\n                console.error(error)\n            }\n\n        })\n\n    }\n\n    const webSocketInit = () => {\n        if (!ws.current || ws.current.readyState === 3) {\n            creatWebSocket()\n        }\n    }\n\n    const closeWebSocket = () => {\n        ws.current?.close()\n    }\n\n    const sendMessage = (msg: any) => {\n        ws.current?.send(msg)\n    }\n\n    const reconnect = () => {\n        try {\n            closeWebSocket()\n            ws.current = null\n            // creatWebSocket()\n        } catch (e) {\n            console.error(e)\n        }\n    }\n\n    useEffect(() => {\n\n        verify && webSocketInit()\n        return () => {\n            ws.current?.close()\n        }\n    }, [ws, verify, webSocketInit])\n\n    return {\n        wsData,\n        readyState,\n        sendMessage,\n        closeWebSocket,\n        reconnect,\n    }\n}\n\nexport function useWs(topics: any, needApiKey: boolean, apiKey?: string, verify: boolean = true) {\n    const [socketData, setSocketData] = useState({})\n\n    const [isLocalPage, setIsLocalPage] = useState<boolean>(true)\n\n    useEffect(() => {\n\n        let mounted = true\n\n        const checkIsLocalPage = () => {\n            document.addEventListener('visibilitychange', function () {\n                // page invisible trigger!\n                let isLocalPage = true\n                if (document.visibilityState === 'hidden') {\n                    isLocalPage = false\n                }\n                if (mounted) {\n                    setIsLocalPage(isLocalPage)\n                }\n            })\n        }\n\n        checkIsLocalPage()\n\n        return () => {\n            mounted = false\n        }\n\n    }, [])\n\n    const { wsData, readyState, closeWebSocket, reconnect, sendMessage, } = useWebsocket({\n        topics,\n        apiKey,\n        needApiKey,\n        verify,\n    })\n\n    useEffect(() => {\n    \n        if (needApiKey && !apiKey) {\n            return\n        }\n\n        if (!verify) {\n            return\n        }\n\n        if (wsData === 'ping') {\n            try {\n                sendMessage('pong')\n            } catch (err) {\n                console.log(err)\n            }\n        } else {\n            if (wsData) {\n                setSocketData(JSON.parse(wsData))\n            }\n        }\n        \n        // if closed and is currente page then, reconnect.\n        if (readyState.key === 3 && isLocalPage) {\n            // reconnect()\n        }\n        // if not current page, close it.\n        if (!isLocalPage) {\n            closeWebSocket()\n        }\n\n    }, [wsData, readyState, isLocalPage, verify, apiKey])\n\n    return {\n        socketData,\n    }\n}\n\nexport function useAmmpoolWs(apiKey: string) {\n\n    let topics: any[] = []\n\n    topics.push(getTickerArg('LRC-ETH'))\n\n    topics.push(getAmmpoolArg('0x18920d6E6Fb7EbE057a4DD9260D6D95845c95036'))\n\n    const needApiKey = false\n\n    const { socketData } = useWs(topics, needApiKey, apiKey)\n\n    return {\n        socketData,\n    }\n\n}\n","import { useState, } from 'react'\n\nimport { getAccountArg, getCandlestickArg, \n  getAmmpoolArg, getTickerArg, getOrderArg, WsTopicType, } from 'loopring-sdk'\n\nimport { useWs } from './useWebsocketApi'\nimport { useCustomDCEffect } from 'hooks/common/useCustomDCEffect'\n\nimport { useGetMarkets } from \"hooks/exchange/useExchangeAPI\"\n\nfunction useHandleSocketData(data: any) {\n  const [account, setAccount] = useState<any>()\n  const [ammPool, setAmmPool] = useState<any>()\n  const [order, setOrder] = useState<any>()\n  const [ticker, setTicker] = useState<any>()\n\n  useCustomDCEffect(() => {\n\n      if (!data) {\n        return\n      }\n\n      if (data.op) {\n        return\n      }\n\n      if (!data.topic || !data.topic.topic) {\n        return\n      }\n\n      switch(data.topic.topic) {\n        case WsTopicType.account:\n          setAccount(data.data)\n          break\n        case WsTopicType.ammpool:\n          let ammPool = {\n            baseAmt: data.data[0][0],\n            quoteAmt: data.data[0][1],\n            timestamp: data.data[1],\n          }\n          setAmmPool(ammPool)\n          break\n        case WsTopicType.candlestick:\n          break\n        case WsTopicType.order:\n          setOrder(data.data)\n          break\n        case WsTopicType.orderBook:\n          break\n        case WsTopicType.ticker:\n          setTicker(data.data)\n          break\n        case WsTopicType.trade:\n          break\n        default:\n          throw Error('Unknown WsTopicType:' + data.topic.topic)\n      }\n  }, [data])\n\n  return {\n    account,\n    ammPool,\n    order,\n    ticker,\n  }\n}\n\nexport function useSwapPageWs(poolAddress: string, market: string, apiKey: string) {\n\n  let topics: any[] = []\n\n  topics.push(getAccountArg())\n  topics.push(getOrderArg(market))\n  topics.push(getAmmpoolArg(poolAddress))\n\n  const { socketData } = useWs(topics, true, apiKey, !!poolAddress && !!market && !!apiKey)\n\n  return useHandleSocketData(socketData)\n\n}\n\nexport function useQuotePageWs() {\n\n  const { markets } = useGetMarkets()\n\n  let topics: any[] = []\n\n  if (markets) {\n\n    const keys = Reflect.ownKeys(markets.markets)\n\n    let c = 0\n  \n    keys.every((item: any) => {\n      c += 1\n      topics.push(getTickerArg(item))\n      if (c >= 20) {\n        return false\n      }\n\n      return true\n    })\n\n  }\n\n  const { socketData } = useWs(topics, false)\n\n  return useHandleSocketData(socketData)\n\n}\n","import { useRef } from 'react'\n\n// import Qrcode from 'components/qrcodes/Qrcode'\n\n\nimport { useAccount } from 'stores/account/hook'\n\nimport { useGetExchangeInfo, useGetGas, useGetMarkets, useGetTokens } from 'hooks/exchange/useExchangeAPI'\n\nimport { useAmmpoolWs } from 'hooks/common/useWebsocketApi'\nimport { useQuotePageWs } from 'hooks/exchange/useWsAPI'\n\nconst DebugPage = () => {\n\n  const {ticker} = useQuotePageWs()\n\n  return (\n    <div>\n      Debug\n      <div>wsdata: {JSON.stringify(ticker)}</div>\n    </div>\n  )\n\n}\n\nexport default DebugPage\n","import React, { useEffect } from 'react'\nimport { TransactionTable, RawDataTransactionItem, TransactionTradeTypes, TransactionSide, TransactionStatus } from '@loopring-web/component-lib'\nimport { WithTranslation, withTranslation } from 'react-i18next'\nimport { cloneDeep } from 'lodash'\nimport store from 'stores'\nimport { LoopringAPI } from 'stores/apis/api'\nimport { volumeToCount } from 'hooks/help'\nimport { StylePaper } from '../../styled'\n\nconst TxPanel = withTranslation('common')((rest:WithTranslation<'common'>) => {\n    const container = React.useRef(null);\n    const [pageSize, setPageSize] = React.useState(10);\n    const [txTableData, setTxTableData] = React.useState<RawDataTransactionItem[]>([]);\n\n    const { accountId,apiKey } = store.getState().account;\n\n    const getTxnStatus = (status: string) => \n        status === ''\n        ? TransactionStatus.processing :\n        status === 'processed'\n            ? TransactionStatus.processed\n            : status === 'processing'\n                ? TransactionStatus.processing \n                : status === 'received' \n                    ? TransactionStatus.received \n                    : TransactionStatus.failed\n\n    const getUserTxnList = React.useCallback(async () => {\n        if (LoopringAPI && LoopringAPI.userAPI && accountId && apiKey) {\n            const userTxnList = await Promise.all([\n                LoopringAPI.userAPI.getUserTranferList({\n                    accountId,\n                }, apiKey),\n                LoopringAPI.userAPI.getUserDepositHistory({\n                    accountId,\n                }, apiKey),\n                LoopringAPI.userAPI.getUserOnchainWithdrawalHistory({\n                    accountId,\n                }, apiKey)\n            ])\n            // const userTxns = await LoopringAPI.userAPI.getUserTranferList({\n            //     accountId,\n            // // }, apiKey)\n            // const userDepositList = await LoopringAPI.userAPI.getUserDepositHistory()\n            // const userWithdrawList = await LoopringAPI.userAPI.getUserOnchainWithdrawalHistory()\n            \n            const userTransferMapped = userTxnList[0].userTransfers.map(o => ({\n                token: o.symbol,\n                from: o.senderAddress,\n                to: o.receiverAddress,\n                amount: Number(volumeToCount(o.symbol, o.amount)),\n                fee: {\n                    unit: o.feeTokenSymbol || '',\n                    value: Number(volumeToCount(o.symbol, o.feeAmount || 0))\n                },\n                memo: o.memo || '',\n                time: o.timestamp,\n                txnHash: o.hash,\n                status: getTxnStatus(o.status),\n                tradeType: TransactionTradeTypes.transfer\n            }))\n\n            const userDepositMapped = userTxnList[1].userDepositHistory.map(o => ({\n                token: o.symbol,\n                from: o.hash,\n                to: 'My Loopring',\n                amount: Number(volumeToCount(o.symbol, o.amount)),\n                fee: {\n                    unit: '',\n                    value: 0\n                },\n                memo: '',\n                time: o.timestamp,\n                txnHash: o.txHash,\n                status: getTxnStatus(o.status),\n                tradeType: TransactionTradeTypes.deposit\n            }))\n            // temporary usage for incorrect type def\n            const clonedWithdrawList: any = cloneDeep(userTxnList[2].userOnchainWithdrawalHistory)\n            const userWithdrawMapped = clonedWithdrawList.map((o: any) => ({\n                token: o.symbol,\n                from: 'My Loopring',\n                to: o.distributeHash,\n                amount: Number(volumeToCount(o.symbol, o.amount)),\n                fee: {\n                    unit: o.feeTokenSymbol,\n                    value: Number(volumeToCount(o.feeTokenSymbol, o.feeAmount))\n                },\n                memo: '',\n                time: o.timestamp,\n                txnHash: o.txHash,\n                status: getTxnStatus(o.status),\n                tradeType: TransactionTradeTypes.withdraw\n            }))\n\n            const mappingList = [...userTransferMapped, ...userDepositMapped, ...userWithdrawMapped]\n            const sortedMappingList = mappingList.sort((a, b) => b.time - a.time)\n\n            // const mappingList = userTxns.userTransfers.map(o => ({\n            //     token: o.symbol,\n            //     from: o.senderAddress,\n            //     to: o.receiverAddress,\n            //     // amount: Number(o.amount),\n            //     amount: Number(volumeToCount(o.symbol, o.amount)),\n            //     fee: {\n            //         unit: o.feeTokenSymbol || '',\n            //         value: Number(volumeToCount(o.symbol, o.feeAmount || 0))\n            //     },\n            //     memo: o.memo || '',\n            //     time: o.timestamp,\n            //     txnHash: o.hash,\n            //     status: o.status === 'processed' ? TransactionStatus.processed : o.status === 'processing' ? TransactionStatus.processing : o.status === 'received' ? TransactionStatus.received : TransactionStatus.failed,\n            //     tradeType: o.txType === 'TRANSFER' ? TransactionTradeTypes.transfer : o.txType === 'DEPOSIT' ? TransactionTradeTypes.deposit : TransactionTradeTypes.withdraw,\n            // }))\n            setTxTableData(sortedMappingList)\n        }\n    }, [accountId, apiKey])\n\n    useEffect(() => {\n        getUserTxnList()\n    }, [getUserTxnList])\n\n    React.useEffect(() => {\n        // @ts-ignore\n        let height = container?.current?.offsetHeight;\n        if (height) {\n            setPageSize(Math.floor((height - 120) / 44) - 2);\n        }\n    }, [container, pageSize]);\n\n    return (\n        <StylePaper ref={container}>\n            <div className=\"title\">Transactions</div>\n            <div className=\"tableWrapper\">\n                <TransactionTable {...{\n                    // rawData: txList,\n                    rawData: txTableData,\n                    pagination: {\n                        pageSize: pageSize\n                    },\n                    showFilter: true,\n                    ...rest\n                }} />\n            </div>\n        </StylePaper>\n    )\n})\n\nexport default TxPanel\n","import { useCallback, useEffect, useRef, useState } from 'react'\nimport { WithTranslation, withTranslation } from 'react-i18next'\nimport { PriceTag } from '@loopring-web/component-lib/static-resource'\nimport { Box, Paper, Typography } from '@material-ui/core'\nimport styled from '@emotion/styled'\nimport {\n    AssetsTable,\n    AssetTitle,\n    AssetTitleProps,\n    ChartType,\n    DoughnutChart,\n    ScaleAreaChart,\n    ToggleButtonGroup,\n    TokenType,\n} from '@loopring-web/component-lib'\nimport { useModals } from 'hooks/modal/useModals'\n// import { useGetUserBalances } from 'hooks/exchange/useUserAPI'\nimport { useGetTokens } from 'hooks/exchange/useExchangeAPI'\nimport { volumeToCount } from 'hooks/help'\nimport { LoopringAPI } from 'stores/apis/api'\nimport { AssetType } from 'loopring-sdk'\nimport store from 'stores'\nimport { useWalletLayer1 } from 'stores/walletLayer1'\nimport { makeWallet } from 'hooks/help'\nimport { EmptyValueTag,unit } from '@loopring-web/component-lib/src/static-resource'\nimport { StylePaper } from '../../styled'\n\n// const StylePaper = styled(Box)`\n//   width: 100%;\n//   height: 100%;\n//   flex: 1;\n//   background-color: ${({theme}) => theme.colorBase.background().default};\n//   border-radius: ${({theme}) => theme.unit}px;\n// //   padding: 20px;\n//\n//   .title {\n//     font-family: Gilroy-Medium;\n//     font-size: ${({theme}) => theme.unit * 3}px;\n//     line-height: 19px;\n//   }\n//\n//   .tableWrapper {\n//     display: flex;\n//     flex: 1;\n//     height: 100%;\n//     border: 1px solid ${({theme}) => theme.colorBase.borderColor};\n//     border-radius: ${({theme}) => theme.unit}px;\n//     padding: 26px 0;\n//   }\n// ` as typeof Box;\n\nconst StyledChartWrapper = styled(Box)`\n  height: 225px;\n\n  > div {\n    position: relative;\n    width: calc(50% - 6px);\n    height: 100%;\n    background-color: ${({theme}) => theme.colorBase.background().default};\n    border-radius: ${({theme}) => theme.unit}px;\n    padding: ${({theme}) => theme.unit * 2.5}px ${({theme}) => theme.unit * 3}px;\n  }\n`\n\nconst StyledBtnGroupWrapper = styled(Box)`\n  position: absolute;\n  z-index: 10;\n  right: ${({theme}) => theme.unit * 3}px;\n  bottom: ${({theme}) => theme.unit * 2.5}px;\n`\n\nconst toggleData = [\n    // {value: '24 H', key: '24 H'},\n    {value: 'week', key: '1 W'},\n    {value: 'all', key: 'ALL'},\n]\n\n// const testTrendData: any = [\n//     {\n//         timeStamp: 150,\n//         close: Math.random() + 4,\n//     },\n//     {\n//         timeStamp: 160,\n//         close: Math.random() + 4,\n//     },\n//     {\n//         timeStamp: 170,\n//         close: Math.random() + 4,\n//     },\n//     {\n//         timeStamp: 180,\n//         close: Math.random() + 4,\n//     },\n//     {\n//         timeStamp: 190,\n//         close: Math.random() + 4,\n//     },\n//     {\n//         timeStamp: 200,\n//         close: Math.random() + 4,\n//     },\n//     {\n//         timeStamp: 210,\n//         close: Math.random() + 4,\n//     },\n//     {\n//         timeStamp: 220,\n//         close: Math.random() + 4,\n//     },\n//     {\n//         timeStamp: 230,\n//         close: Math.random() + 4,\n//     },\n//     {\n//         timeStamp: 240,\n//         close: Math.random() + 4,\n//     },\n// ]\n\nexport type ITokenInfoItem = {\n    token: string,\n    detail: {\n        price: string,\n        symbol: string,\n        updatedAt: number\n    }\n}\n\nexport type TrendDataItem = {\n    timeStamp: number;\n    close: number;\n}\n\nconst AssetPanel = withTranslation('common')(({t, ...rest}: WithTranslation) => {\n    const container = useRef(null);\n    const [pageSize, setPageSize] = useState(10);\n    const [chartPeriod, setChartPeriod] = useState('week')\n    const [chartData, setChartData] = useState<TrendDataItem[]>([])\n    \n    const { accAddr } = store.getState().account\n    const { walletLayer2 } = store.getState().walletLayer2;\n    const { ammMap } = store.getState().amm.ammMap\n    const walletMap = makeWallet()\n    const assetsKeyList = walletMap && walletMap.walletMap ? Object.keys(walletMap.walletMap) : []\n    const assetsDetailList = walletMap && walletMap.walletMap ? Object.values(walletMap.walletMap) : []\n    const assetsList = assetsKeyList.map((key, index) => ({\n        token: key,\n        detail: assetsDetailList[index]\n    }))\n\n    const getUserTotalAssets = useCallback(async (limit: number = 7) => {\n        const userAssets = await LoopringAPI.walletAPI?.getUserAssets({\n            wallet: accAddr,\n            assetType: AssetType.DEX,\n            limit: limit // TODO: minium unit is day, discuss with pm later\n        })\n        if (userAssets && userAssets.userAssets.length && !!userAssets.userAssets.length) {\n            setChartData(userAssets.userAssets.map(o => ({\n                timeStamp: Number(o.createdAt),\n                close: Number(o.amount)\n            })))\n        }\n    }, [accAddr])\n\n    useEffect(() => {\n        if (LoopringAPI && LoopringAPI.walletAPI && walletLayer2) {\n            getUserTotalAssets()\n        }\n    }, [walletLayer2, getUserTotalAssets])\n\n    useEffect(() => {\n        // @ts-ignore\n        let height = container?.current?.offsetHeight;\n        if (height) {\n            setPageSize(Math.floor((height - 120) / 44) - 1);\n        }\n    }, [container, pageSize]);\n\n    const {\n        ShowDeposit,\n        ShowTransfer,\n        ShowWithdraw,\n        ShowResetAccount,\n    } = useModals()\n\n    const { updateWalletLayer1 } = useWalletLayer1()\n\n    const onShowDeposit = useCallback(() => {\n        updateWalletLayer1()\n        ShowDeposit(true)\n    }, [ShowDeposit, updateWalletLayer1])\n\n    const onShowTransfer = () => {\n        ShowTransfer(true)\n    }\n\n    const onShowWithdraw = () => {\n        ShowWithdraw(true)\n    }\n\n    const handleChartPeriodChange = useCallback((event: React.MouseEvent<HTMLElement, MouseEvent>, newValue: string) => {\n        const limit = newValue === 'week' ? 7 : 9999\n        getUserTotalAssets(limit)\n    }, [getUserTotalAssets])\n\n    // const { tokens: tokensAll } = useGetTokens()\n\n    // const tokens = tokensAll?.tokenSymbolMap\n\n    // const { balances } = useGetUserBalances(tokens)\n\n    // const { walletLayer2 } = store.getState().walletLayer2;\n    const { faitPrices } = store.getState().system\n\n    const tokenPriceList = faitPrices ? Object.entries(faitPrices).map(o => ({\n        token: o[ 0 ],\n        detail: o[ 1 ]\n    })) as ITokenInfoItem[] : []\n\n    let jointLPTokenValue = 0\n    assetsList.filter(o => o.token.split('-')[0] === 'LP').forEach(o => {\n        const result = o.token.split('-')\n        result.splice(0, 1, 'AMM')\n        const ammToken = result.join('-')\n        const ammTokenList = Object.keys(ammMap)\n        const tokenValue = ammTokenList.includes(ammToken) && ammMap[ammToken] ? Number(ammMap[ammToken].amountDollar) : 0\n        jointLPTokenValue += tokenValue\n    });\n\n    const doughnutData = assetsList.filter(o => o.token.split('-')[0] !== 'LP').map((tokenInfo) => {\n        const tokenPriceUSDT = tokenInfo.token === 'DAI' ? 1 : Number(tokenPriceList.find(o => o.token === tokenInfo.token)?.detail.price) / Number(tokenPriceList.find(o => o.token === 'USDT')?.detail.price)\n        return ({\n            name: tokenInfo.token,\n            value: Number(volumeToCount(tokenInfo.token, tokenInfo.detail?.detail?.total as string)) * tokenPriceUSDT\n        })\n    })\n    const formattedDoughnutData = [...doughnutData, {\n            name: 'LP-Token',\n            value: jointLPTokenValue\n        }]\n    const AssetTitleProps: AssetTitleProps = {\n        assetInfo: {\n            totalAsset: formattedDoughnutData.map(o => o.value).reduce((prev, next) => {\n                return prev + next\n            }, 0),\n            priceTag: PriceTag.Dollar,\n        },\n        onShowDeposit,\n        onShowTransfer,\n        onShowWithdraw,\n    }\n\n    const assetsRawData = assetsList.map((tokenInfo) => {\n        const tokenPriceUSDT = Number(tokenPriceList.find(o => o.token === tokenInfo.token)?.detail.price) / Number(tokenPriceList.find(o => o.token === 'USDT')?.detail.price)\n        return ({\n            token: {\n                type: tokenInfo.token.split('-')[0] === 'LP' ? TokenType.lp : TokenType.single,\n                value: tokenInfo.token\n            },\n            amount: String(Number(volumeToCount(tokenInfo.token, tokenInfo.detail?.detail.total as string)).toFixed(6)) || EmptyValueTag,\n            available: String(tokenInfo.detail?.count) || EmptyValueTag,\n            locked: String(tokenInfo.detail?.detail.locked) || EmptyValueTag,\n            smallBalance: tokenPriceUSDT * Number(volumeToCount(tokenInfo.token, tokenInfo.detail?.detail.total as string)) < 1,\n        })\n    })\n\n    return (\n        <>\n            <Box>\n                <AssetTitle  {...{\n                    t,\n                    ...rest,\n                    ...AssetTitleProps\n                }} />\n            </Box>\n\n            {/*<div className=\"title\">{t('labelAssetsTitle')}</div>*/}\n\n            <StyledChartWrapper display={'flex'} justifyContent={'space-between'} alignItems={'center'} marginTop={2}>\n                <Paper component={'div'}>\n                    <Typography component=\"span\" color=\"textSecondary\" variant=\"body1\">Asset Distribution</Typography>\n                    <DoughnutChart data={walletLayer2 ? formattedDoughnutData : []}/>\n                </Paper>\n                <Paper component={'div'}>\n                    <Typography component=\"span\" color=\"textSecondary\" variant=\"body1\">Total Assets</Typography>\n                    <ScaleAreaChart type={ChartType.Trend} data={chartData}/>\n                    <StyledBtnGroupWrapper>\n                        <ToggleButtonGroup exclusive size=\"small\" {...{\n                            ...rest,\n                            t,\n                            data: toggleData,\n                            value: chartPeriod,\n                            setValue: setChartPeriod,\n                            onChange: handleChartPeriodChange\n                        }} />\n                    </StyledBtnGroupWrapper>\n                </Paper>\n            </StyledChartWrapper>\n            <StylePaper style={{marginTop: `${unit*2}px`}}>\n                <div className=\"tableWrapper\" ref={container}>\n                    <AssetsTable {...{\n                        rawData: assetsRawData,\n                        pagination: {\n                            pageSize: pageSize\n                        },\n                        showFiliter: true,\n                        ...rest\n                    }} />\n                </div>\n            </StylePaper>\n        </>\n    )\n})\n\nexport default AssetPanel\n","import { BIG10 } from 'defs/swap_defs'\nimport { toBig } from 'loopring-sdk'\n\nimport store from 'stores'\n\nconst getTokenInfo = (symbol: string) => {\n    const tokenMap = store.getState().tokenMap.tokenMap\n\n    if (!tokenMap || !tokenMap[symbol]) {\n        return undefined\n    }\n\n    return tokenMap[symbol]\n}\n\nexport function StringToNumberWithPrecision(rawVal: string, symbol: string) {\n    \n    if (rawVal === undefined || rawVal === null || rawVal.trim() === '')\n        return 0\n\n    const tokenInfo = getTokenInfo(symbol)\n\n    if (!tokenInfo) {\n        return undefined\n    }\n\n    return parseFloat(toBig(rawVal).toFixed(tokenInfo.precision, 0))\n}\n\nexport function VolToNumberWithPrecision(rawVal: string, symbol: string) {\n\n    const tokenInfo = getTokenInfo(symbol)\n\n    if (!tokenInfo) {\n        return undefined\n    }\n\n    if (rawVal === undefined || rawVal === null || rawVal.trim() === '')\n        return 0\n\n    return parseFloat(toBig(rawVal).div('1e' + tokenInfo.decimals).toFixed(tokenInfo.precision, 0))\n}\n","import React, { useEffect } from 'react'\nimport { TradeTable, TradeFilterTable, RawDataTradeItem } from '@loopring-web/component-lib'\nimport { WithTranslation, withTranslation } from 'react-i18next'\nimport styled from '@emotion/styled'\nimport { Box, Paper } from '@material-ui/core'\nimport store from 'stores'\nimport { LoopringAPI } from 'stores/apis/api'\nimport { volumeToCount } from 'hooks/help'\nimport { StylePaper } from '../../styled'\nimport { toBig } from 'loopring-sdk'\nimport { StringToNumberWithPrecision, VolToNumberWithPrecision, } from 'utils/formatter_tool'\n\n// const StylePaper = styled(Box)`\n//   display: flex;\n//   flex-direction: column;\n//   width: 100%;\n//   height: 100%;\n//   flex: 1;\n//   background-color: ${({ theme }) => theme.colorBase.background().default};\n//   border-radius: ${({ theme }) => theme.unit}px;\n//   padding: 20px;\n//   margin-bottom: ${({ theme }) => 2* theme.unit}px;\n//   .title {\n//     font-family: Gilroy-Medium;\n//     font-size: ${({ theme }) => theme.unit * 3}px;\n//     line-height: 19px;\n//   }\n//\n//   .tableWrapper {\n//     display: flex;\n//     flex: 1;\n//     margin-top: 20px;\n//     border: 1px solid ${({ theme }) => theme.colorBase.borderColor};\n//     border-radius: ${({ theme }) => theme.unit}px;\n//     padding: 26px 0;\n//\n//     .rdg {\n//       flex: 1;\n//     }\n//   }\n// ` as typeof Paper;\n//\n// // side: keyof typeof TradeTypes;\n// //     amount: {\n// //         from: {\n// //             key: string;\n// //             value: number|undefined;\n// //         },\n// //         to: {\n// //             key: string;\n// //             value: number|undefined;\n// //         }\n// //     };\n// //     price:{\n// //         key:string\n// //         value:number|undefined,\n// //     }\n// //     // priceDollar: number;\n// //     // priceYuan: number;\n// //     fee: {\n// //         key: string;\n// //         value: number|undefined;\n// //     };\n// //     time: number;\n\nconst TradePanel = withTranslation('common')((rest:WithTranslation<'common'>) => {\n    const container = React.useRef(null);\n    const [pageSize, setPageSize] = React.useState(10);\n    const [originalData, setOriginalData] = React.useState<RawDataTradeItem[]>([])\n\n    const { accountId, apiKey } = store.getState().account;\n    const tokenMap = store.getState().tokenMap.tokenMap\n\n    useEffect(() => {\n        (async function getUserApi () {\n            if (LoopringAPI && LoopringAPI.userAPI && accountId && apiKey && tokenMap) {\n                const userTrades = await LoopringAPI.userAPI.getUserTrades({\n                    accountId,\n                }, apiKey)\n\n                if (userTrades && userTrades.userTrades) {\n                  setOriginalData(userTrades.userTrades.map(o => {\n                    const marketList = o.market.split('-')\n                    // due to AMM case, we cannot use first index\n                    const baseToken = marketList[marketList.length - 2]\n                    const quoteToken = marketList[marketList.length - 1]\n\n                    const amt = toBig(o.volume).times(o.price).toString()\n\n                    return ({\n                      side: o.side,\n                      price: {\n                        key: baseToken,\n                        value: StringToNumberWithPrecision(o.price, baseToken)\n                      },\n                      fee: {\n                        key: quoteToken,\n                        value: VolToNumberWithPrecision(o.fee, quoteToken)\n                      },\n                      time: Number(o.tradeTime),\n                      amount: {\n                        from: {\n                          key: baseToken,\n                          value: VolToNumberWithPrecision(o.volume, baseToken)\n                        },\n                        to: {\n                          key: quoteToken,\n                          value: VolToNumberWithPrecision(amt, quoteToken)\n                        }\n                      }\n                    })\n                  }))\n                }\n            }\n        })()\n    }, [accountId, apiKey])\n\n    React.useEffect(() => {\n        // @ts-ignore\n        let height = container?.current?.offsetHeight;\n        if (height) {\n            setPageSize(Math.floor((height - 120) / 44) - 2);\n        }\n    }, [container, pageSize]);\n\n    // const txList: any[] = []\n\n    return (\n        <>\n            <StylePaper ref={container}>\n                <div className=\"title\">Trades</div>\n                <div className=\"tableWrapper\">\n                    <TradeTable {...{\n                      rawData: originalData,\n                      pagination: {\n                        pageSize: pageSize\n                      },\n                      showFilter: true,\n                      ...rest}}/>\n                </div>\n            </StylePaper>\n        </>\n    )\n})\n\nexport default TradePanel\n","import React, { useEffect } from 'react'\nimport { RawDataAmmItem, AmmTable, AmmSideTypes } from '@loopring-web/component-lib'\nimport { WithTranslation, withTranslation } from 'react-i18next'\nimport store from 'stores'\nimport { LoopringAPI } from 'stores/apis/api'\nimport { AmmTxType } from 'loopring-sdk'\nimport { StylePaper } from '../../styled'\nimport { volumeToCount } from '../../../hooks/help';\n\nconst AmmPanel = withTranslation('common')((rest:WithTranslation<'common'>) => {\n    const container = React.useRef(null);\n    const [pageSize, setPageSize] = React.useState(10);\n    const [originalData, setOriginalData] = React.useState<RawDataAmmItem[]>([])\n\n    const { accountId,apiKey } = store.getState().account;\n    const { tokenMap } = store.getState().tokenMap\n    \n    const getTokenName = React.useCallback((tokenId?: number) => {\n        if (tokenMap) {\n            const keys = Object.keys(tokenMap)\n            const values = Object.values(tokenMap)\n            const index = values.findIndex(o => o.tokenId === tokenId)\n            if (index > -1) {\n                return keys[index]\n            }\n            return ''\n        }\n        return ''\n    }, [tokenMap])\n\n    const getAmmpoolList = React.useCallback(async () => {\n        if (LoopringAPI.ammpoolAPI && accountId && apiKey) {\n            const ammpool = await LoopringAPI.ammpoolAPI.getUserAmmPoolTxs({\n                accountId,\n            }, apiKey)\n            if (ammpool && ammpool.userAmmPoolTxs) {\n                const result = ammpool.userAmmPoolTxs.map(o => ({\n                    side: o.txType === AmmTxType.JOIN ? AmmSideTypes.Join : AmmSideTypes.Exit,\n                    amount: {\n                        from: {\n                            key: getTokenName(o.poolTokens[0]?.tokenId),\n                            value: String(volumeToCount(getTokenName(o.poolTokens[0]?.tokenId), o.poolTokens[0]?.actualAmount))\n                        },\n                        to: {\n                            key: getTokenName(o.poolTokens[1]?.tokenId),\n                            value: String(volumeToCount(getTokenName(o.poolTokens[1]?.tokenId), o.poolTokens[1]?.actualAmount))\n                        }\n                    },\n                    lpTokenAmount: String(volumeToCount(getTokenName(o.lpToken?.tokenId), o.lpToken?.actualAmount)),\n                    fee: {\n                        key: getTokenName(o.poolTokens[1]?.tokenId),\n                        value: String(volumeToCount(getTokenName(o.poolTokens[1]?.tokenId), o.poolTokens[1]?.feeAmount))\n                    },\n                    time: o.updatedAt\n                }))\n                setOriginalData(result)\n            }\n        }\n    }, [accountId, apiKey, getTokenName])\n\n    useEffect(() => {\n        getAmmpoolList()\n    }, [getAmmpoolList])\n\n    React.useEffect(() => {\n        // @ts-ignore\n        let height = container?.current?.offsetHeight;\n        if (height) {\n            setPageSize(Math.floor((height - 120) / 44) - 2);\n        }\n    }, [container, pageSize]);\n\n    return (\n        <>\n            <StylePaper ref={container}>\n                <div className=\"title\">AMM Records</div>\n                <div className=\"tableWrapper\">\n                    <AmmTable {...{\n                        rawData: originalData,\n                        pagination: {\n                            pageSize: pageSize\n                        },\n                        showFilter: true,\n                        ...rest}}/>\n                </div>\n            </StylePaper>\n        </>\n    )\n})\n\nexport default AmmPanel\n","\nimport React, { useEffect } from 'react'\nimport { OrderHistoryTable, OrderHistoryRawDataItem } from '@loopring-web/component-lib'\nimport { TradeTypes } from '@loopring-web/component-lib/static-resource'\nimport { WithTranslation, withTranslation } from 'react-i18next'\nimport store from 'stores'\nimport { LoopringAPI } from 'stores/apis/api'\nimport { volumeToCount } from 'hooks/help'\nimport { StylePaper } from '../../styled'\n\n\n\nconst OrderPanel = withTranslation('common')((rest: WithTranslation) => {\n    const container = React.useRef(null);\n    const [pageSize, setPageSize] = React.useState(10);\n    const [orderOriginalData, setOrderOriginalData] = React.useState<OrderHistoryRawDataItem[]>([])\n\n    const { accountId,apiKey } = store.getState().account;\n\n    useEffect(() => {\n        (async function getUserApi () {\n            if (LoopringAPI && LoopringAPI.userAPI && accountId && apiKey) {\n                const userOrders = await LoopringAPI.userAPI.getOrders({\n                    accountId,\n                }, apiKey)\n                if (userOrders && Array.isArray(userOrders.orders) && !!userOrders.orders.length) {\n                    setOrderOriginalData(userOrders.orders.map(o => {\n                        const marketList = o.market.split('-')\n                        // due to AMM case, we cannot use first index\n                        const baseToken = marketList[marketList.length - 2]\n                        const quoteToken = marketList[marketList.length - 1]\n                        const { baseAmount, quoteAmount, baseFilled, quoteFilled } = o.volumes\n\n                        return ({\n                            side: o.side === 'BUY' ? TradeTypes.Buy : TradeTypes.Sell,\n                            amount: {\n                                from: {\n                                    key: baseToken,\n                                    // value: Number(baseAmount)\n                                    value: Number(volumeToCount(baseToken, baseAmount))\n                                },\n                                to: {\n                                    key: quoteToken,\n                                    value: Number(volumeToCount(quoteToken, quoteAmount))\n                                }\n                            },\n                            // average: Number(o.price),\n                            average: Number(volumeToCount(quoteToken, quoteFilled)) / Number(volumeToCount(baseToken, baseFilled)),\n                            filledAmount: {\n                                from: {\n                                    key: baseToken,\n                                    // value: Number(baseFilled)\n                                    value: Number(volumeToCount(baseToken, baseFilled))\n                                },\n                                to: {\n                                    key: quoteToken,\n                                    value: Number(volumeToCount(quoteToken, quoteFilled))\n                                }\n                            },\n                            filledPrice: {\n                                key: quoteToken,\n                                value: Number(o.price)\n                            },\n                            time: o.validity.start * 1000,\n                            status: o.status,\n                            detailTable: []\n                        })\n                    }))\n                }\n            }\n        })()\n    }, [accountId, apiKey])\n\n    React.useEffect(() => {\n        // @ts-ignore\n        let height = container?.current?.offsetHeight;\n        if (height) {\n            setPageSize(Math.floor((height - 120) / 44) - 2);\n        }\n    }, [container, pageSize]);\n\n    return (\n        <>\n            <StylePaper ref={container}>\n                <div className=\"title\">Order History</div>\n                <div className=\"tableWrapper\">\n                    <OrderHistoryTable {...{\n                        pagination: {\n                            pageSize: pageSize\n                        },\n                        rawData: orderOriginalData,\n                        showFilter: true,\n                        ...rest\n                    }} />\n                </div>\n            </StylePaper>\n        </>\n    )\n})\n\nexport default OrderPanel\n","import styled from '@emotion/styled';\nimport { Box, Button, Divider, Grid, Switch, Typography } from '@material-ui/core';\nimport React from 'react';\nimport { UpColor, Currency, DropDownIcon } from '@loopring-web/component-lib/src/static-resource';\nimport {\n    BtnLanguage,\n    OutlineSelect,\n    OutlineSelectItem, QRCodePanel,\n    TypographyStrong, useSettings\n} from '@loopring-web/component-lib';\nimport { Trans, useTranslation, WithTranslation, withTranslation } from 'react-i18next';\nimport { useTheme } from '@emotion/react';\nimport { LanguageKeys } from '@loopring-web/component-lib/static-resource';\n\n// const MuiModalStyled = styled(MuiModal)`\n//   //background: ${({theme}) => theme.colorBase.background().secondary};\n//   // .MuiBackdrop-root{\n//   //   z-index: -1;\n//   //   background-color: ${({theme}) => theme.colorBase.background().outline};\n//   // }\n//   display: flex;\n//   align-items: center;\n//   justify-content: center;\n// ` as typeof MuiModal;\n// const BlockStyled = styled(Box)`\n//   ${({theme}) => theme.border.defaultFrame({c_key: 'blur', d_R: 1})};\n//   background: ${({theme}) => theme.colorBase.background().secondary};\n//   max-height: var(--panel-setting-height);\n//   max-width: var(--panel-setting-width);\n//   display: flex;\n//   justify-content: space-around;\n//   align-items: center;\n//   overflow: scroll;\n//   padding: ${({theme}) => theme.unit*8}px\n// `;\n\nconst StyledPaper = styled(Grid)`\n  width: 100%;\n  height: 100%;\n  background-color: ${({theme}) => theme.colorBase.background().default};\n  border-radius: ${({ theme }) => theme.unit}px;\n`\n//${({theme}) => theme.border.defaultFrame({c_key: 'blur', d_R: 1})};\n\nconst StyledSwitch = styled(Switch)(({theme}) => ({\n    \"& .Mui-checked\": {\n        color: theme.colorBase.textPrimary,\n        '& + .MuiSwitch-track.MuiSwitch-track': {\n            border: `solid ${theme.colorBase.success}`,\n        },\n        '& .MuiSwitch-thumb': {\n            backgroundColor: theme.colorBase.success,\n        }\n    },\n    '& .MuiSwitch-track': {\n        border: `solid ${theme.colorBase.error}`,\n        opacity: 1\n    },\n    '& .MuiSwitch-thumb': {\n        backgroundColor: theme.colorBase.error,\n    }\n}));\n\nexport const BtnCurrency = ({t, currency, label, handleChange}: any) => {\n    const [state, setState] = React.useState<string>(currency ? currency : Currency.dollar);\n    const _handleChange = React.useCallback((event: React.ChangeEvent<any>) => {\n        setState(event.target.value);\n        if (handleChange) {\n\n            handleChange(event.target.value)\n        }\n    }, [handleChange])\n    return <OutlineSelect aria-label={t(label)} IconComponent={DropDownIcon}\n                          labelId=\"language-selected\"\n                          id=\"language-selected\"\n                          value={state} autoWidth\n                          onChange={_handleChange}>\n        <OutlineSelectItem value={Currency.dollar}>$ {t('labelUSDollar')}</OutlineSelectItem>\n            <OutlineSelectItem value={Currency.yen}>¥ {t('labelCNYYuan')}</OutlineSelectItem>\n    </OutlineSelect>\n}\n\nconst StyledDivider = styled(Divider)`\n  margin: ${({theme}) => theme.unit}px 0 ${({theme}) => theme.unit}px 0px;\n`\nconst DividerBlock = styled(Divider)`\n  margin: 0;\n  flex: 1;\n  width: 1px;\n  height: ${({theme}) => theme.unit * 3}px;\n  background: ${({theme}) => theme.colorBase.focus};\n`\n\n\n\nexport const SettingPanel = withTranslation(['common', 'layout'])(({t,i18n, ...rest}: & WithTranslation) => {\n    const theme = useTheme();\n    const {setUpColor,setLanguage,setCurrency,currency,upColor} = useSettings()\n    const language = i18n.language;\n    const handleOnLanguageChange = (lang: LanguageKeys) => {\n        setLanguage(lang);\n        i18n.changeLanguage(lang);\n    }\n    const handleOnCurrencyChange = (value: any) => {\n        setCurrency(value);\n    }\n    const handleColorChange = (e:any) => {\n        if(e.target.checked){\n            setUpColor(UpColor.green) ;\n        }else{\n            setUpColor(UpColor.red);\n        }\n    }\n    return <Grid container direction={'column'} justifyContent={'space-between'} alignItems={'stretch'} flexWrap={'nowrap'}>\n        <Typography variant={'h4'} component={'h3'} marginY={1} paddingLeft={2}>{t('labelTitleSecurity')}</Typography>\n        <StyledPaper item xs={12} display={'flex'} flexDirection={'column'} marginBottom={2} paddingY={2}>\n            <Box component={'section'} display={'flex'} flexDirection={'column'}>\n                <Typography variant={'h5'} component={'h4'} paddingX={2}>{t('labelTitleResetL2Keypair')}</Typography>\n                <StyledDivider/>\n                <Grid container display={'flex'} flexDirection={'row'} justifyContent={'stretch'}\n                      alignItems={'flex-start'} paddingX={2} marginBottom={2}>\n                    <Grid item xs={8} display={'flex'} flexDirection={'column'}>\n                        <Typography variant={'body1'} component={'p'}>\n                            <Trans i18nKey=\"resetDescription\">\n                                Create a new signing key for layer-2 authentication (no backup needed). This will\n                                <TypographyStrong component={'span'}>cancel all your pending orders</TypographyStrong>.\n                            </Trans>\n                        </Typography>\n                    </Grid>\n                    <Grid item xs={4} display={'flex'} flexDirection={'column'} justifyContent={'space-evenly'}\n                          alignItems={'flex-end'} alignSelf={'stretch'}>\n                        <Button variant={'outlined'} size={'medium'} color={'primary'}>{t('labelBtnReset')}</Button>\n                    </Grid>\n                    <Grid item xs={12} display={'flex'} flexDirection={'row'} justifyContent={'flex-end'}\n                          alignItems={'center'} alignSelf={'stretch'}>\n                        <Typography variant={'body2'} component={'p'}\n                                    paddingTop={1}>{t('labelHadChangPassword', {passDay: '14 hours'})}</Typography>\n                    </Grid>\n\n                </Grid>\n            </Box>\n            <Box component={'section'} display={'flex'} flexDirection={'column'}>\n                <Typography variant={'h5'} component={'h4'} paddingX={2}>{t('labelTitleExportAccount')}</Typography>\n                <StyledDivider/>\n                <Grid container display={'flex'} flexDirection={'row'} justifyContent={'stretch'}\n                      alignItems={'flex-start'} paddingX={2} marginBottom={2}>\n                    <Grid item xs={7} display={'flex'} flexDirection={'column'}>\n                        <Typography variant={'body1'} component={'p'}>{t('descriptionExportAccount')}</Typography>\n                    </Grid>\n                    <Grid item xs={5} display={'flex'} flexDirection={'column'} justifyContent={'space-evenly'}\n                          alignItems={'flex-end'} alignSelf={'stretch'}>\n                        <Grid item> <Button variant={'outlined'} size={'medium'}\n                                            color={'primary'}>{t('labelBtnExportAccount')}</Button></Grid>\n                    </Grid>\n                </Grid>\n            </Box>\n        </StyledPaper>\n\n        <Typography variant={'h4'} component={'h3'} marginY={1} paddingLeft={2}>{t('labelTitlePreferences')}</Typography>\n        <StyledPaper item xs={12} display={'flex'} flexDirection={'column'} marginBottom={2} paddingY={2}>\n            <Box component={'section'} display={'flex'} flexDirection={'column'}>\n                {/*<Typography variant={'h5'} component={'h4'} paddingX={2}>{t('labelTitleLayout')}</Typography>*/}\n                {/*<StyledDivider/>*/}\n                <Grid container display={'flex'} flexDirection={'row'} justifyContent={'stretch'}\n                      alignItems={'flex-start'} paddingX={2} marginBottom={2}>\n                    <Grid item xs={7} display={'flex'} flexDirection={'column'}>\n                        <Typography variant={'body1'} component={'p'}>{t('labelLanguage')}</Typography>\n                    </Grid>\n                    <Grid item xs={5} display={'flex'} flexDirection={'column'} justifyContent={'space-evenly'}\n                          alignItems={'flex-end'} alignSelf={'stretch'}>\n                        <Grid item>\n                            <BtnLanguage {...{\n                                t, ...rest,\n                                language,\n                                label: 'languageSetting',\n                                handleChange: handleOnLanguageChange\n                            }}></BtnLanguage>\n                        </Grid>\n                    </Grid>\n                </Grid>\n                <Grid container display={'flex'} flexDirection={'row'} justifyContent={'stretch'}\n                      alignItems={'flex-start'} paddingX={2} marginBottom={2}>\n                    <Grid item xs={7} display={'flex'} flexDirection={'column'}>\n                        <Typography variant={'body1'} component={'p'}>{t('labelCurrency')}</Typography>\n                    </Grid>\n                    <Grid item xs={5} display={'flex'} flexDirection={'column'} justifyContent={'space-evenly'}\n                          alignItems={'flex-end'} alignSelf={'stretch'}>\n                        <Grid item>\n                            <BtnCurrency {...{\n                                t, ...rest,\n                                currency,\n                                label: 'currencySetting',\n                                handleChange: handleOnCurrencyChange\n                            }}></BtnCurrency>\n\n                        </Grid>\n                    </Grid>\n                </Grid>\n                <Grid container display={'flex'} flexDirection={'row'} justifyContent={'stretch'}\n                      alignItems={'flex-start'} paddingX={2}>\n                    <Grid item xs={7} display={'flex'} flexDirection={'column'}>\n                        <Typography variant={'body1'} component={'p'}>{t('labelColors')}</Typography>\n                    </Grid>\n                    <Grid item xs={5} display={'flex'} flexDirection={'row'} justifyContent={'flex-end'}\n                          alignItems={'center'} alignSelf={'stretch'}>\n                        <Typography variant={'body1'} component={'span'} paddingX={2}>\n                            <Trans i18nKey=\"whichColorIsUp\">\n                                <span style={{\n                                    textTransform: 'capitalize',\n                                    color: upColor === UpColor.green ? theme.colorBase.success : theme.colorBase.error\n                                }}>{{up: upColor === UpColor.green ? t('labelgreen') : t('labelred')}} up</span>\n                                and <span style={{\n                                textTransform: 'capitalize',\n                                color: upColor === UpColor.green ? theme.colorBase.error : theme.colorBase.success\n                            }}>{{down: upColor === UpColor.green ? t('labelred') : t('labelgreen')}} down</span>\n                            </Trans>\n                        </Typography>\n                        <StyledSwitch checked={upColor === UpColor.green} color=\"default\"\n                                      onChange={handleColorChange}/>\n                    </Grid>\n                </Grid>\n            </Box>\n\n        </StyledPaper>\n\n    </Grid>\n})\n\n// export const SettingPage = ({open,onClose}: { open:boolean, onClose:(e:any)=>void})=>{\n//     return  <MuiModalStyled\n//         open={open}\n//         onClose={onClose}\n//         aria-labelledby=\"modal-modal-title\"\n//         aria-describedby=\"modal-modal-description\"\n//     >\n//         <BlockStyled >\n//            <SettingPanel/>\n//         </BlockStyled>\n//     </MuiModalStyled>\n// }\n\n\n","import { useRouteMatch } from 'react-router'\n\nimport { Box, Paper } from '@material-ui/core'\nimport {\n    DepositPanel,\n    SubMenu,\n    SubMenuList as BasicSubMenuList,\n} from '@loopring-web/component-lib'\nimport { useTranslation, withTranslation } from 'react-i18next'\nimport styled from '@emotion/styled'\nimport { subMenuLayer2 } from '@loopring-web/component-lib/src/static-resource'\n\nimport TxPanel from './TxPanel'\nimport AssetPanel from './AssetPanel'\nimport TradePanel from './TradePanel'\nimport AmmPanel from './AmmPanel'\nimport OrderPanel from './OrderPanel'\nimport { SettingPanel } from '../SettingPage';\nimport store from '../../stores';\nimport { AccountStatus } from '../../state_machine/account_machine_spec';\nimport { useModalProps } from '../../layouts/header/hook';\nimport { Redirect } from 'react-router-dom'\n\nexport const subMenu = subMenuLayer2;\nconst BoxStyle = styled(Box)`\n  ${({theme})=>`\n    background-color: ${theme.colorBase.background().default};\n    width: 100%;\n    min-width:auto;\n    ${theme.border.defaultFrame({c_key: 'blur'})};\n    & > div{\n      background-color:initial;\n      border:0;\n      width:auto;\n      min-width: var(--swap-box-width);\n      max-width: 520px;\n    }\n    `\n  }\n   \n` as typeof Box\n\nconst SubMenuList = withTranslation(['layout','common'], { withRef: true })(BasicSubMenuList);\nexport const Layer2Page = () => {\n\n    let match: any = useRouteMatch(\"/layer2/:item\")\n    const {status: accStatus} = store.getState().account;\n    const {t,...rest} = useTranslation()\n    const selected = match?.params.item ?? 'assets';\n    const {depositProps} = useModalProps()\n\n    return <>  {\n        accStatus === AccountStatus.UNCONNNECTED \n            ? <Redirect to=\"/\" />\n            :\n        accStatus === AccountStatus.NOACCOUNT\n    || accStatus === AccountStatus.DEPOSITING\n    || accStatus === AccountStatus.DEPOSIT_TO_CONFIREM ?\n        <BoxStyle display={'flex'} flexWrap={'wrap'} alignItems={'center'} justifyContent={'center'} alignContent={'flex-start'}>\n            <DepositPanel  {...{\n                ...rest, ...depositProps,\n                title: t('depositTitleAndActive'),\n                description: 'depositAndActiveDescription'\n            }} > </DepositPanel>\n        </BoxStyle>: <>\n            <Box width={'200px'} display={'flex'} justifyContent={'stretch'} marginRight={3} marginBottom={2}>\n                <SubMenu>\n                    <SubMenuList selected={selected} subMenu={subMenu as any} />\n                </SubMenu>\n            </Box>\n            <Box minHeight={420} display={'flex'} alignItems={'stretch'} flexDirection={'column'} marginTop={0} flex={1}>\n                {selected === 'assets' && <AssetPanel />}\n                {selected === 'transactions' && <TxPanel />}\n                {selected === 'trades' && <TradePanel />}\n                {selected === 'ammRecords' && <AmmPanel />}\n                {selected === 'orders' && <OrderPanel />}\n                {selected === 'setting' && <SettingPanel />}\n            </Box>\n        </>\n    }\n        </>\n\n\n\n}\n","import { WithTranslation, withTranslation } from 'react-i18next'\nimport { Box, } from '@material-ui/core'\nimport styled from '@emotion/styled'\n\nimport React from 'react';\nimport { useAmmMapUI } from './hook';\n\nimport { PoolsTable } from '@loopring-web/component-lib';\nimport { AmmPoolActivityRule, LoopringMap } from 'loopring-sdk/dist/defs/loopring_defs';\n\nconst StylePaper = styled(Box)`\n  width: 100%;\n  height: 100%;\n  flex: 1;\n  background-color: ${({theme}) => theme.colorBase.background().default};\n  border-radius: ${({theme}) => theme.unit}px;\n\n  .rdg {\n    flex: 1;\n  }\n\n` as typeof Box;\n\n\nexport const PoolsPanel = withTranslation('common')(<R extends { [ key: string ]: any }, I extends { [ key: string ]: any }>\n({t, ammActivityMap, ...rest}: WithTranslation\n    & {\n    ammActivityMap: LoopringMap<LoopringMap<AmmPoolActivityRule[]>> | undefined }) => {\n    const container = React.useRef(null);\n    const [pageSize, setPageSize] = React.useState(10);\n    const {updateTickersUI, rawData, page} = useAmmMapUI({pageSize});\n\n    React.useEffect(() => {\n        // @ts-ignore\n        let height = container?.current?.offsetHeight;\n        if (height) {\n            setPageSize(Math.floor((height - 120) / 44) - 1);\n        }\n    }, [container, pageSize]);\n\n    const handlePageChange = React.useCallback((page) => {\n        updateTickersUI(page)\n    }, [updateTickersUI]);\n    return (\n        <>\n            <StylePaper display={'flex'} flexDirection={'column'} ref={container}>\n                <PoolsTable {...{\n                    rawData,\n                    handlePageChange,\n                    page,\n                    pagination: {\n                        pageSize\n                    }\n                }} />\n            </StylePaper>\n        </>\n    )\n})\n\n","import { AmmPanel, AmmPanelType } from '@loopring-web/component-lib';\nimport { AmmData, AmmInData, CoinInfo, IBData, WalletMap } from '@loopring-web/component-lib/static-resource';\nimport { useAmmPanel } from './hooks';\nimport React from 'react';\nimport { Box } from '@material-ui/core';\nimport { AmmPoolSnapshot, TickerData } from 'loopring-sdk';\nimport { TradeBtnStatus } from '@loopring-web/component-lib/components/panel/index';\n\nexport const AmmPanelView = <T extends AmmData<C extends IBData<I> ? C : IBData<I>>, I,\n    ACD extends AmmInData<I>,\n    C = IBData<I>>({\n                       pair,\n                       walletMap,\n                       ammType, snapShotData,\n                       ...rest\n                   }: {\n    pair: { coinAInfo: CoinInfo<C> | undefined, coinBInfo: CoinInfo<C> | undefined },\n    snapShotData: { tickerData: TickerData | undefined, ammPoolsBalance: AmmPoolSnapshot | undefined } | undefined\n    walletMap: WalletMap<C>\n    ammType?: keyof typeof AmmPanelType\n} & any) => {\n    const {\n        ammCalcData,\n        ammDepositData,\n        ammWithdrawData,\n        handleJoinAmmPoolEvent,\n        handleExitAmmPoolEvent,\n        onAmmRemoveClick,\n        onAmmAddClick,\n        ammDepositBtnI18nKey,\n        ammWithdrawBtnI18nKey,\n    } = useAmmPanel({\n        pair,\n        snapShotData, walletMap, ammType: ammType ? ammType : AmmPanelType.Deposit\n    })\n\n    // const [index, setIndex] = React.useState(AmmPanelTypeMap[ tabSelected ]);\n    const isLoading = React.useCallback(()=>{\n        if((!snapShotData || !snapShotData.tradeData || !snapShotData.ammPoolsBalance)\n            &&  ammDepositBtnI18nKey === undefined\n            &&  ammWithdrawBtnI18nKey === undefined\n        ) {\n          return true\n        }\n    },[snapShotData,ammWithdrawBtnI18nKey,ammWithdrawBtnI18nKey])\n\n    return <> {pair ?\n        <AmmPanel {...{...rest}}\n                  ammWithdrawData={ammWithdrawData}\n                  ammDepositData={ammDepositData}\n                  ammCalcData={ammCalcData}\n                  handleAmmAddChangeEvent={handleJoinAmmPoolEvent}\n                  handleAmmRemoveChangeEvent={handleExitAmmPoolEvent}\n                  onAmmRemoveClick={onAmmRemoveClick}\n                  onAmmAddClick={onAmmAddClick}\n                  tabSelected={ammType ? ammType : AmmPanelType.Deposit}\n                  ammDepositBtnI18nKey={ammDepositBtnI18nKey}\n                  ammWithdrawBtnI18nKey={ammWithdrawBtnI18nKey}\n                  ammDepositBtnStatus={isLoading()?TradeBtnStatus.LOADING:TradeBtnStatus.AVAILABLE}\n                  ammWithdrawBtnStatus={isLoading()?TradeBtnStatus.LOADING:TradeBtnStatus.AVAILABLE}\n\n        /> : <Box width={'var(--swap-box-width)'}/>}\n    </>\n\n}","import React, { useState } from \"react\";\nimport { AmmData, AmmInData, CoinInfo, IBData } from '@loopring-web/component-lib/src/static-resource';\nimport { AmmPanelType, globalSetup } from '@loopring-web/component-lib';\nimport { IdMap, useTokenMap } from '../../../stores/token';\nimport { useAmmMap } from '../../../stores/Amm/AmmMap';\nimport { accountStaticCallBack, ammPairInit, bntLabel, btnClickMap, fnType, makeCache } from '../../../hooks/help';\nimport { WalletMap } from '@loopring-web/component-lib/static-resource';\nimport { AmmPoolSnapshot, TickerData, ammPoolCalc, makeJoinAmmPoolRequest, makeExitAmmPoolRequest, TokenInfo, TokenVolumeV3, GetOffchainFeeAmtRequest, OffchainFeeReqType, LoopringMap, OffchainFeeInfo, GetAmmPoolSnapshotRequest, getExistedMarket, JoinAmmPoolRequest, AmmPoolInfoV3, AmmPoolRequestPatch, ChainId, GetNextStorageIdRequest, dumpError400, toBig, MarketInfo, } from 'loopring-sdk';\nimport { useCustomDCEffect } from '../../../hooks/common/useCustomDCEffect';\nimport { useAccount } from '../../../stores/account/hook';\nimport store from \"stores\";\n\nimport * as sdk from 'loopring-sdk'\nimport { LoopringAPI } from \"stores/apis/api\";\nimport { debounce } from \"lodash\";\nimport { AccountStatus } from \"state_machine/account_machine_spec\";\nimport { Lv2Account } from \"defs/account_defs\";\nimport { deepClone } from '../../../utils/obj_tools';\n\nexport const useAmmPanel = <C extends { [key: string]: any }>({\n    pair,\n    walletMap,\n    ammType,\n    snapShotData,\n}\n    : {\n        pair: { coinAInfo: CoinInfo<C> | undefined, coinBInfo: CoinInfo<C> | undefined },\n        snapShotData: { tickerData: TickerData | undefined, ammPoolsBalance: AmmPoolSnapshot | undefined } | undefined\n        walletMap: WalletMap<C>\n        ammType: keyof typeof AmmPanelType\n    }) => {\n    // const walletLayer2State = useWalletLayer2();\n    const { coinMap, tokenMap } = useTokenMap();\n    const { ammMap } = useAmmMap();\n    const { account } = useAccount();\n\n    const [ammCalcData, setAmmCalcData] = React.useState<AmmInData<C> | undefined>();\n\n    const [ammDepositData, setAmmDepositData] = React.useState<AmmData<IBData<C>, C>>({\n        coinA: { belong: undefined } as unknown as IBData<C>,\n        coinB: { belong: undefined } as unknown as IBData<C>,\n        slippage: .5\n    } as AmmData<IBData<C>, C>);\n\n    const [ammWithdrawData, setAmmWithdrawData] = React.useState({\n        coinA: { belong: undefined } as unknown as IBData<C>,\n        coinB: { belong: undefined } as unknown as IBData<C>,\n        slippage: .5\n    } as AmmData<IBData<C>, C>);\n\n    const [joinRequest, setJoinRequest] = useState<{ ammInfo: any, request: JoinAmmPoolRequest }>()\n\n    const [ammDepositBtnI18nKey, setAmmDepositBtnI18nKey] = React.useState<string | undefined>(undefined);\n    const [ammWithdrawBtnI18nKey, setAmmWithdrawBtnI18nKey] = React.useState<string | undefined>(undefined);\n\n    const initAmmData = React.useCallback(async (pair: any) => {\n        let _ammCalcData: Partial<AmmInData<C>> = ammPairInit(\n            {\n                pair,\n                ammType,\n                _ammCalcData: {},\n                tokenMap,\n                coinMap,\n                walletMap: walletMap, //walletLayer2State.walletLayer2,\n                ammMap,\n                tickerData: snapShotData?.tickerData,\n                ammPoolsBalance: snapShotData?.ammPoolsBalance\n            })\n        setAmmCalcData({ ...ammCalcData, ..._ammCalcData } as AmmInData<C>);\n        if (_ammCalcData.myCoinA) {\n            if (ammType === AmmPanelType.Deposit) {\n                setAmmDepositData({\n                    coinA: _ammCalcData.myCoinA as IBData<C>,\n                    coinB: _ammCalcData.myCoinB as IBData<C>,\n                    slippage: 0.001\n                })\n            } else {\n                setAmmWithdrawData({\n                    coinA: _ammCalcData.myCoinA as IBData<C>,\n                    coinB: _ammCalcData.myCoinB as IBData<C>,\n                    slippage: 0.001\n                })\n            }\n        }\n    }, [snapShotData, walletMap])\n\n    // const [snapShot, setSnapShot] = useState<AmmPoolSnapshot>()\n\n    const [joinFees, setJoinfees] = useState<LoopringMap<OffchainFeeInfo>>()\n\n    useCustomDCEffect(async () => {\n        if (!LoopringAPI.userAPI || !pair.coinBInfo?.simpleName\n            || store.getState().account.status !== AccountStatus.ACTIVATED) {\n            return\n        }\n\n        const acc = store.getState().account\n\n        const request2: GetOffchainFeeAmtRequest = {\n            accountId: acc.accountId,\n            requestType: OffchainFeeReqType.AMM_JOIN,\n            tokenSymbol: pair.coinBInfo.simpleName as string,\n        }\n\n        const { fees } = await LoopringAPI.userAPI.getOffchainFeeAmt(request2, acc.apiKey)\n        setJoinfees(fees)\n\n        console.log('joinFees:', fees)\n\n    }, [LoopringAPI.userAPI, pair.coinBInfo?.simpleName, store.getState().account.status])\n\n    /*\n    const [exitFees, setExitfees] = useState<LoopringMap<OffchainFeeInfo>>()\n\n    useCustomDCEffect(async() => {\n        if (!LoopringAPI.userAPI || !pair.coinBInfo?.simpleName) {\n            return\n        }\n\n        const acc = store.getState().account\n\n        const request2: GetOffchainFeeAmtRequest = {\n            accountId: acc.accountId,\n            requestType: OffchainFeeReqType.AMM_EXIT,\n            tokenSymbol: pair.coinBInfo.simpleName as string,\n        }\n\n        const { fees } = await LoopringAPI.userAPI.getOffchainFeeAmt(request2, acc.apiKey)\n        setExitfees(fees)\n\n    }, [LoopringAPI.userAPI, pair.coinBInfo?.simpleName])\n    */\n    // const handler = React.useCallback(async () =>,[])\n    const handlerInDebounce = React.useCallback( debounce(async(data,type,joinFees) => {\n\n        // {\n            console.log('handleAmmAddChangeEvent', data, type);\n\n            if (!tokenMap || !data.coinA.belong || !data.coinB.belong) {\n                console.log('return!')\n                return\n            }\n\n            const isAtoB = type === 'coinA'\n\n            const acc: Lv2Account = store.getState().account\n\n            const { idIndex, marketArray, marketMap, } = store.getState().tokenMap\n\n            const { ammMap } = store.getState().amm.ammMap\n\n            const { market, amm } = getExistedMarket(marketArray, data.coinA.belong as string,\n                data.coinB.belong as string)\n\n            if (!market || !amm || !marketMap) {\n                return\n            }\n\n            const marketInfo: MarketInfo = marketMap[market]\n\n            const ammInfo: any = ammMap[amm as string]\n\n            const request1: GetAmmPoolSnapshotRequest = {\n                poolAddress: ammInfo.address\n            }\n\n            const response = await LoopringAPI.ammpoolAPI?.getAmmPoolSnapshot(request1)\n\n            if (!response) {\n                return\n            }\n\n            const { ammPoolSnapshot } = response\n\n            const coinA = tokenMap[data.coinA.belong as string]\n            const coinB = tokenMap[data.coinB.belong as string]\n\n            const coinA_TV = ammPoolSnapshot.pooled[0]\n            const coinB_TV = ammPoolSnapshot.pooled[1]\n\n            const covertVal = data.coinA.tradeValue ? sdk.toBig(data.coinA.tradeValue)\n                .times('1e' + isAtoB ? coinA.decimals : coinB.decimals).toFixed(0, 0) : '0'\n            const { output, ratio } = sdk.ammPoolCalc(covertVal, isAtoB, coinA_TV, coinB_TV)\n\n            const rawVal = isAtoB ? data.coinA.tradeValue.toString() : data.coinB.tradeValue.toString()\n\n            const { request } = makeJoinAmmPoolRequest(rawVal,\n                isAtoB, '0.001', acc.accAddr, joinFees as LoopringMap<OffchainFeeInfo>,\n                ammMap[amm], response.ammPoolSnapshot, tokenMap as any, idIndex as IdMap, 0, 0)\n\n            if (isAtoB) {\n                data.coinB.tradeValue = parseFloat(toBig(request.joinTokens.pooled[1].volume)\n                    .div('1e' + coinB.decimals).toFixed(marketInfo.precisionForPrice))\n            } else {\n                data.coinA.tradeValue = parseFloat(toBig(request.joinTokens.pooled[0].volume)\n                    .div('1e' + coinA.decimals).toFixed(marketInfo.precisionForPrice))\n            }\n\n            setAmmDepositData({\n                coinA: data.coinA as IBData<C>,\n                coinB: data.coinB as IBData<C>,\n                slippage: 0.001\n            })\n\n            setJoinRequest({\n                ammInfo,\n                request\n            })\n        // }\n\n    }, globalSetup.wait),[])\n    const handleJoinAmmPoolEvent = React.useCallback(async (data: AmmData<IBData<C>>, type: 'coinA' | 'coinB') => {\n        await handlerInDebounce(data,type,joinFees)\n    }, [snapShotData,joinFees]);\n\n    const handleExitAmmPoolEvent = React.useCallback((data: AmmData<IBData<C>>, type: 'coinA' | 'coinB') => {\n        console.log('handleExitAmmPoolEvent', data, type);\n    }, []);\n\n\n    useCustomDCEffect(() => {\n        const label: string | undefined = accountStaticCallBack(bntLabel)\n        setAmmDepositBtnI18nKey(label);\n        setAmmWithdrawBtnI18nKey(label)\n    }, [account.status, bntLabel])\n\n\n    const addToAmmCalculator = React.useCallback(async function ( props\n    ) {\n        //TODO: onDeposit\n\n        if (!LoopringAPI.ammpoolAPI || !LoopringAPI.userAPI || !joinRequest) {\n            console.log(' onAmmDeposit ammpoolAPI:', LoopringAPI.ammpoolAPI,\n                'joinRequest:', joinRequest)\n            return\n        }\n\n        const acc: Lv2Account = store.getState().account\n\n        const { ammInfo, request } = joinRequest\n\n        const patch: AmmPoolRequestPatch = {\n            chainId: store.getState().system.chainId as ChainId,\n            ammName: ammInfo.__rawConfig__.name,\n            poolAddress: ammInfo.address,\n            eddsaKey: acc.eddsaKey\n        }\n\n        const request2: GetNextStorageIdRequest = {\n            accountId: acc.accountId,\n            sellTokenId: request.joinTokens.pooled[0].tokenId as number\n        }\n        const storageId0 = await LoopringAPI.userAPI.getNextStorageId(request2, acc.apiKey)\n\n        const request_1: GetNextStorageIdRequest = {\n            accountId: acc.accountId,\n            sellTokenId: request.joinTokens.pooled[1].tokenId as number\n        }\n        const storageId1 = await LoopringAPI.userAPI.getNextStorageId(request_1, acc.apiKey)\n\n        request.storageIds = [storageId0.offchainId, storageId1.offchainId]\n\n        try {\n\n            const response = await LoopringAPI.ammpoolAPI?.joinAmmPool(request, patch, acc.apiKey)\n\n            console.log('join ammpool response:', response)\n\n        } catch (reason) {\n            dumpError400(reason)\n        }\n        if (props.__cache__) {\n            makeCache(props.__cache__)\n        }\n    },[joinRequest])\n    const onAmmDepositClickMap: typeof btnClickMap = Object.assign(deepClone(btnClickMap), {\n        [fnType.ACTIVATED]: [addToAmmCalculator]\n    })\n    const onAmmAddClick = React.useCallback((props: AmmData<IBData<C>>) => {\n        accountStaticCallBack(onAmmDepositClickMap,[props])\n    }, [onAmmDepositClickMap]);\n\n    const removeAmmCalculator = React.useCallback(async function ( props\n    ) {\n        //TODO: onWithdraw\n        if (props.__cache__) {\n            makeCache(props.__cache__)\n        }\n    },[joinRequest])\n    const  removeAmmClickMap: typeof btnClickMap = Object.assign(deepClone(btnClickMap), {\n        [fnType.ACTIVATED]: [removeAmmCalculator]\n    })\n    const onAmmRemoveClick = React.useCallback((props: AmmData<IBData<C>>) => {\n        accountStaticCallBack(removeAmmClickMap)\n    }, []);\n\n    React.useEffect(() => {\n        if (snapShotData) {\n            initAmmData(pair)\n        }\n    }, [snapShotData, pair, walletMap]);\n\n\n    return {\n        ammCalcData,\n        ammDepositData,\n        ammWithdrawData,\n        handleJoinAmmPoolEvent,\n        handleExitAmmPoolEvent,\n        onAmmRemoveClick,\n        onAmmAddClick,\n        ammDepositBtnI18nKey,\n        ammWithdrawBtnI18nKey,\n    }\n}","import React from \"react\";\nimport { AmmActivity, CoinInfo, TradeFloat } from \"@loopring-web/component-lib/static-resource\";\nimport { useTokenMap } from \"stores/token\";\nimport { useRouteMatch } from 'react-router';\nimport { AmmDetailStore, useAmmMap } from '../../../stores/Amm/AmmMap';\nimport { useWalletLayer2 } from '../../../stores/walletLayer2';\nimport { makeTickView, makeWallet, pairDetailBlock, WalletMapExtend } from '../../../hooks/help';\nimport { AmmPoolSnapshot, AmmUserRewardMap, getExistedMarket, TickerData } from 'loopring-sdk';\nimport { deepClone } from '../../../utils/obj_tools';\nimport { getUserAmmTransaction, makeMyAmmMarketArray } from '../../../hooks/help/marketTable';\nimport { AmmRecordRow } from '@loopring-web/component-lib/components/tableList/ammRecordTable/Interface';\nimport { AmmPoolActivityRule, LoopringMap } from 'loopring-sdk/dist/defs/loopring_defs';\nimport { MyAmmLP } from '@loopring-web/component-lib/src/static-resource';\nimport { useSystem } from '../../../stores/system';\nimport { makeMyAmmWithSnapshot } from '../../../hooks/help/makeUIAmmActivityMap';\nimport store from '../../../stores';\nimport { useUserRewards } from '../../../stores/userRewards';\nimport { LoopringAPI } from 'stores/apis/api';\nimport { TradingInterval } from 'loopring-sdk'\n\nconst makeAmmDetailExtendsActivityMap = ({ammMap, coinMap, ammActivityMap, ammKey}: any) => {\n\n    if (ammMap && coinMap) {\n        let ammDetail = deepClone(ammMap[ ammKey as string ]);\n        const ammActivity = ammActivityMap [ ammKey as string ];\n\n        if (ammDetail && ammDetail.coinA) {\n            ammDetail.myCoinA = coinMap[ ammDetail.coinA ];\n            ammDetail.myCoinB = coinMap[ ammDetail.coinB ];\n            ammDetail[ 'activity' ] = ammActivity ? ammActivity : {};\n        }\n        return ammDetail;\n    }\n}\ntype PgAmmDetail<C extends { [ key: string ]: any }> = AmmDetailStore<C> & {\n    myCoinA: CoinInfo<C>,\n    myCoinB: CoinInfo<C>,\n    activity: AmmActivity<C> | undefined\n}\n\nexport type ammHistoryItem = {\n    close: number;\n    timeStamp: number;\n}\n\nexport const useCoinPair = <C extends { [ key: string ]: any }>(ammActivityMap: LoopringMap<LoopringMap<AmmPoolActivityRule[]>>) => {\n    const match: any = useRouteMatch(\"/liquidity/pools/coinPair/:symbol\")\n    const {coinMap, tokenMap, marketArray} = useTokenMap();\n    const {faitPrices} = useSystem();\n    const ammMapState = useAmmMap();\n    const useUserRewardsState = useUserRewards()\n\n    // const {account} = useAccount();\n\n\n    const {ammMap, updateAmmMap} = ammMapState;\n\n    // const {ammMap,updateAmmMap} = useAmmMap();\n    const walletLayer2State = useWalletLayer2();\n    const [walletMap, setWalletMap] = React.useState<WalletMapExtend<C> | undefined>(undefined);\n    // const [ammRecordArray, setAmmRecordArray] = React.useState<AmmRecordRow<C>[]>([]);\n    const [ammMarketArray, setAmmMarketArray] = React.useState<AmmRecordRow<C>[]>([]);\n\n\n    const [myAmmMarketArray, setMyAmmMarketArray] = React.useState<AmmRecordRow<C>[]>([]);\n    const [ammUserRewardMap, setAmmUserRewardMap] = React.useState<AmmUserRewardMap | undefined>(undefined);\n    const [snapShotData, setSnapShotData] = React.useState<{\n        tickerData: TickerData | undefined\n        ammPoolsBalance: AmmPoolSnapshot | undefined\n    } | undefined>(undefined);\n\n    const [myAmm, setMyAmm] = React.useState<MyAmmLP<C>>(\n        {\n            feeA: 0,\n            feeB: 0,\n            feeDollar: 0,\n            feeYuan: 0,\n            reward: 0,\n            rewardToken: undefined as any,\n            balanceA: 0,\n            balanceB: 0,\n            balanceYuan: 0,\n            balanceDollar: 0,\n        })\n    // const [ammPoolsBalance, setAmmpoolsbalance] = React.useState<AmmPoolSnapshot|undefined>(undefined);\n    const [coinPairInfo, setCoinPairInfo] = React.useState<PgAmmDetail<C>>({\n        myCoinA: undefined,\n        myCoinB: undefined,\n        activity: undefined,\n        totalRewards: undefined,\n        amountDollar: undefined,\n        amountYuan: undefined,\n        totalLPToken: undefined,\n        totalA: undefined,\n        totalB: undefined,\n        rewardToken: undefined,\n        rewardValue: undefined,\n        feeA: undefined,\n        feeB: undefined,\n        isNew: undefined,\n        isActivity: undefined,\n        APY: undefined\n    } as unknown as PgAmmDetail<C>);\n    const [tradeFloat, setTradeFloat] = React.useState<TradeFloat | undefined>(undefined);\n    const [pair, setPair] = React.useState<{ coinAInfo: CoinInfo<C> | undefined, coinBInfo: CoinInfo<C> | undefined }>({\n        coinAInfo: undefined,\n        coinBInfo: undefined,\n    });\n    const [pairHistory, setPairHistory] = React.useState<ammHistoryItem[]>([])\n\n    const walletLayer2DoIt = React.useCallback((market) => {\n        const {walletMap: _walletMap} = makeWallet();\n        setWalletMap(_walletMap)\n        if (_walletMap) {\n            getUserAmmTransaction()?.then((marketTrades) => {\n                let _myTradeArray = makeMyAmmMarketArray(market, marketTrades)\n                setMyAmmMarketArray(_myTradeArray ? _myTradeArray : [])\n            })\n        }\n        return _walletMap\n    }, [makeWallet, getUserAmmTransaction, makeMyAmmMarketArray, marketArray, pair])\n\n    const getPairList = React.useCallback(async () => {\n        if (LoopringAPI.exchangeAPI && coinPairInfo.coinA && coinPairInfo.coinB) {\n            const { myCoinA, myCoinB } = coinPairInfo\n            const market = `${myCoinA?.name}-${myCoinB?.name}`\n            const ammList = await LoopringAPI.exchangeAPI.getMixCandlestick({\n                market: market,\n                interval: TradingInterval.d1,\n                limit: 30\n            })\n            const formattedPairHistory = ammList.candlesticks.map(o => ({\n                close: o.close,\n                timeStamp: o.timestamp\n            })).reverse()\n            setPairHistory(formattedPairHistory)\n        }\n    }, [coinPairInfo])\n\n    React.useEffect(() => {\n        getPairList()\n    }, [getPairList])\n\n    React.useEffect(() => {\n        const coinKey = match?.params.symbol ?? undefined;\n        let _tradeFloat: Partial<TradeFloat> = {}\n        const [, coinA, coinB] = coinKey.match(/(\\w+)-(\\w+)/i)\n        let {\n            amm,\n            market\n        } = getExistedMarket(marketArray, coinA, coinB);\n\n        const _coinPairInfo = makeAmmDetailExtendsActivityMap({ammMap, coinMap, ammActivityMap, ammKey: amm})\n        setCoinPairInfo(_coinPairInfo ? _coinPairInfo : {})\n\n        if (coinMap) {\n            setPair({\n                coinAInfo: coinMap[ coinA ],\n                coinBInfo: coinMap[ coinB ]\n            })\n        }\n\n        // let _walletMap: WalletMapExtend<C>|undefined = undefined\n        if (walletLayer2State.walletLayer2) {\n            walletLayer2DoIt(market);\n        }\n\n        if (amm && market && ammMap) {\n            //TODO should add it into websocket\n            updateAmmMap();\n            let apiList = [\n                pairDetailBlock({coinKey: market, ammKey: amm, ammMap}),\n                // LoopringAPI.ammpoolAPI.getAmmPoolSnapshot({poolAddress: ammMap[ ammKey ].address}),\n                // LoopringAPI.exchangeAPI.getMixTicker({market: coinKey})])\n            ];\n            // @ts-ignore\n            Promise.all([...apiList]).then(\n                ([{ammPoolsBalance, tickMap}\n                     //  ,ammUserRewardMap\n                 ]: any[]) => {\n                    if (tokenMap) {\n                        const _snapShotData = {\n                            tickerData: tickMap[ market ],\n                            ammPoolsBalance: ammPoolsBalance,\n                        }\n                        _tradeFloat = makeTickView(tickMap[ market ] ? tickMap[ market ] : {})\n                        setTradeFloat(_tradeFloat as TradeFloat);\n                        setCoinPairInfo({..._coinPairInfo})\n                        setSnapShotData(_snapShotData)\n\n                    }\n                }).catch((error) => {\n                console.log(error);\n                throw  Error\n            })\n        }\n\n    }, []);\n\n    React.useEffect(() => {\n        const {market} = getExistedMarket(marketArray, pair.coinAInfo?.simpleName as string, pair.coinBInfo?.simpleName as string);\n        if (market && snapShotData && snapShotData.ammPoolsBalance) {\n            switch (walletLayer2State.status) {\n                case \"ERROR\":\n                    walletLayer2State.statusUnset();\n                    // setState('ERROR')\n                    //TODO: show error at button page show error  some retry dispath again\n                    break;\n                case \"DONE\":\n                    walletLayer2State.statusUnset();\n                    const _walletMap = walletLayer2DoIt(market);\n                    const _myAmm: MyAmmLP<C> = makeMyAmmWithSnapshot(market, _walletMap, ammUserRewardMap, snapShotData);\n                    setMyAmm(_myAmm)\n                    break;\n                default:\n                    break;\n\n            }\n        }\n\n    }, [walletLayer2State.status, ammUserRewardMap])\n\n    //TODO tickMap\n    React.useEffect(() => {\n        const {market} = getExistedMarket(marketArray, pair.coinAInfo?.simpleName as string, pair.coinBInfo?.simpleName as string);\n        if (market) {\n            switch (useUserRewardsState.status) {\n                case \"ERROR\":\n                    useUserRewardsState.statusUnset();\n                    // setState('ERROR')\n                    //TODO: show error at button page show error  some retry dispath again\n                    break;\n                case \"DONE\":\n                    // getAmmPoolUserRewards().then((ammUserRewardMap)=>{\n                    const {userRewardsMap} = store.getState().userRewardsMap\n                    setAmmUserRewardMap(userRewardsMap)\n                    const _myAmm: MyAmmLP<C> = makeMyAmmWithSnapshot(market, walletMap, ammUserRewardMap, snapShotData);\n                    setMyAmm(_myAmm);\n                    break;\n                default:\n                    break;\n\n            }\n        }\n\n    }, [useUserRewardsState.status])\n\n    React.useEffect(() => {\n        if (ammMapState.status === \"ERROR\") {\n            //TODO: solve error\n            ammMapState.statusUnset();\n        } else if (ammMapState.status === \"DONE\") {\n            ammMapState.statusUnset();\n            if (ammMapState.ammMap && pair.coinAInfo?.simpleName && pair.coinBInfo?.simpleName) {\n                const _coinPairInfo = makeAmmDetailExtendsActivityMap(\n                    {\n                        ammMap,\n                        coinMap,\n                        ammActivityMap,\n                        ammKey: 'AMM-' + pair.coinAInfo.simpleName + pair.coinBInfo.simpleName\n                    })\n                setCoinPairInfo({\n                    ...coinPairInfo, ..._coinPairInfo,\n                    tradeFloat: coinPairInfo.tradeFloat\n                })\n\n            }\n\n            // tokenState.statusUnset()\n            // setState('DONE');\n        }\n    }, [ammMapState.status, ammMapState.ammMap, pair, ammActivityMap, tokenMap])\n\n\n    return {\n        walletMap,\n        myAmm,\n        // tickerData,\n        coinPairInfo,\n        snapShotData,\n        // ammPoolsBalance,\n        pair,\n        tradeFloat,\n        ammMarketArray,\n        myAmmMarketArray,\n        pairHistory,\n    }\n}","import React from 'react';\nimport { WithTranslation, withTranslation } from 'react-i18next';\nimport { AmmRecordTable, TradeTitle, useImage, useSettings, ScaleAreaChart, ChartType } from '@loopring-web/component-lib';\nimport {\n    Currency,\n    EmptyValueTag,\n    getThousandFormattedNumbers,\n    PriceTag,\n    unit\n} from '@loopring-web/component-lib/static-resource';\nimport { Avatar, Box, Breadcrumbs, Grid, Link, Typography } from '@material-ui/core';\nimport { AmmPanelView } from '../AmmPanel';\nimport moment from 'moment';\nimport styled from '@emotion/styled/';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\n\nimport { useCoinPair } from './hooks';\nimport { AmmPoolActivityRule, LoopringMap } from 'loopring-sdk/dist/defs/loopring_defs';\nimport { StylePaper } from 'pages/styled';\n\n\n//******************** page code ************************//\n//  ${({theme}) => theme.border.defaultFrame({c_key: 'blur'})};\nconst BoxStyled = styled(Box)`\n    flex: 1;\n    background-color: ${({theme}) => theme.colorBase.background().default};\n    border-radius: ${({theme}) => theme.unit}px;\n    padding: ${({theme}) => theme.unit*2}px;\n    height: 120px;\n    // min-width: 160px;\n    max-width: 210px;\n    & .MuiAvatar-root {\n        height: ${({theme}) => theme.fontDefault.h4};\n        width: ${({theme}) => theme.fontDefault.h4};\n    }\n`;\n\nconst BoxTopStyled = styled(Box)`\n  background-color: ${({theme}) => theme.colorBase.background().default};\n  border-radius: ${({theme}) => theme.unit}px;\n  padding: ${({theme}) => theme.unit*2}px;\n  width: var(--swap-box-width);\n  box-sizing: border-box;\n  //height: 120px;\n  //min-width: 160px;\n  // & .MuiAvatar-root {\n  //   height: ${({theme}) => theme.fontDefault.h4};\n  //   width: ${({theme}) => theme.fontDefault.h4};\n  // }\n`;\n// const StyleWrapper = styled(Box)`\n//   //position: relative;\n//   //width: 100%;\n//   background-color: ${({theme}) => theme.colorBase.background().default};\n//   border-radius: ${({theme}) => theme.unit}px;\n// ` as typeof Grid\n\n\nconst applyProps = (index: number) => {\n    return {\n        id: `simple-tab-${index}`,\n        'aria-controls': `tabpanel-${index}`,\n    }\n}\n\nexport const CoinPairPanel = withTranslation('common')(<R extends { [ key: string ]: any }, I extends { [ key: string ]: any }>\n({t, ammActivityMap, ...rest}:\n     WithTranslation & { ammActivityMap: LoopringMap<LoopringMap<AmmPoolActivityRule[]>> | undefined } & any) => {    //ActivityMap<I, I>\n    //TODO: checkRouter\n\n    const {currency} = useSettings();\n    const {\n        tradeFloat,\n        snapShotData,\n        pair,\n        coinPairInfo,\n        walletMap,\n        ammMarketArray,\n        myAmmMarketArray,\n        myAmm,\n        pairHistory,\n    } = useCoinPair({ammActivityMap});\n    const [tabIndex, setTabIndex] = React.useState<0 | 1>(0);\n    const [page, setPage] = React.useState(rest?.page ? rest.page : 1);\n    const handleChange = (event: any, newValue: 0 | 1) => {\n        setTabIndex(newValue);\n        setPage(1);\n    }\n    const _handlePageChange = React.useCallback((page: number) => {\n        setPage(page);\n    }, [])\n    const sellIconHasLoaded = useImage(coinPairInfo.myCoinA?.icon ? coinPairInfo.myCoinA?.icon : '').hasLoaded;\n    const buyIconHasLoaded = useImage(coinPairInfo.myCoinB?.icon ? coinPairInfo.myCoinB?.icon : '').hasLoaded;\n\n    return <>\n\n        <Grid container>\n            <Grid item xs={8}>\n                <Breadcrumbs aria-label=\"breadcrumb\">\n                    <Link color=\"textSecondary\" href=\"/#/liquidity/pools\">\n                        {t('labelAmmList')}\n                    </Link>\n                    <Typography color={'textSecondary'} display={'flex'} alignItems={'center'}\n                                justifyContent={'center'}\n                    >{pair.coinAInfo?.simpleName}-{pair.coinBInfo?.simpleName}</Typography>\n                </Breadcrumbs>\n                <Grid item xs={7} marginTop={2}>\n                    <TradeTitle {...{\n                        ...rest, t,\n                        ...pair,\n                        tradeFloat,\n                        isNew: false\n                    }}></TradeTitle>\n                </Grid>\n            </Grid>\n            <Grid item xs={4} alignItems={'center'} justifyContent={'flex-end'} display={'flex'}>\n                {/*{typeof coinPairInfo.isActivity === 'undefined'? '':*/}\n                        <BoxTopStyled paddingY={3} paddingX={1 / 2 * 5} display={'flex'}\n                                      flexDirection={'column'}>\n                            <Box display={'flex'} flexDirection={'row'} justifyContent={'space-between'}>\n                                <Typography display={'flex'} flexDirection={'column'} component={'div'}>\n                                    <Typography variant={'body2'} component={'h5'} color={'textSecondary'}>\n                                        {t('labelReward')}\n                                    </Typography>\n                                    <Typography variant={'body1'} component={'span'} color={'textPrimary'}>\n                                        {typeof coinPairInfo.isActivity === 'undefined' ? EmptyValueTag : <>\n                                            <Typography\n                                                component={'span'}>{coinPairInfo.activity ? getThousandFormattedNumbers(coinPairInfo.activity.totalRewards) : EmptyValueTag} </Typography>\n                                            <Typography\n                                                component={'span'}>{coinPairInfo.activity?.rewardToken?.simpleName}</Typography>\n                                        </>}\n                                    </Typography>\n                                </Typography>\n                                <Typography display={'flex'} flexDirection={'column'} alignItems={'flex-end'}\n                                            component={'div'}>\n                                    <Typography variant={'body2'} component={'h5'} color={'textSecondary'}>\n                                        {t('labelMyReward')}\n                                    </Typography>\n                                    <Typography variant={'body1'} component={'span'} color={'textPrimary'}>\n                                        {/*{typeof coinPairInfo.isActivity === 'undefined' ? EmptyValueTag : <>*/}\n                                        {typeof myAmm.reward === 'undefined' ? EmptyValueTag : <>\n\n                                            <Typography\n                                                component={'span'}> {getThousandFormattedNumbers(myAmm.reward)} </Typography>\n                                            <Typography\n                                                component={'span'}> {coinPairInfo.activity?.rewardToken?.simpleName}</Typography></>}\n\n                                    </Typography>\n                                </Typography>\n                            </Box>\n                            <Typography alignSelf={'flex-start'} variant={'body2'} color={'textSecondary'}\n                                        component=\"span\" marginTop={1}>\n                                {typeof coinPairInfo.isActivity === 'undefined' ? t('labelNoActiveEvent')\n                                    : <>\n                                        {t('labelDate')} :\n                                        <> {moment(coinPairInfo.activity?.duration.from).format('L') + ' - ' + moment(coinPairInfo.activity?.duration.to).format('L')}</>\n                                    </>\n                                }\n                            </Typography>\n                        </BoxTopStyled>\n                {/*}*/}\n\n\n            </Grid>\n            {/*<Grid item xs={4} alignItems={'center'} justifyContent={'flex-end'} display={'flex'}>*/}\n            {/*    <Link href=\"/#/liquidity/pools\" variant={'h5'}>*/}\n            {/*        {t('labelBack')}*/}\n            {/*    </Link>*/}\n            {/*</Grid>*/}\n        </Grid>\n        {/*<Grid container marginTop={3}>*/}\n        {/*   */}\n        {/*</Grid>*/}\n        <Box flex={1} display={'flex'} alignItems={'stretch'} flexDirection=\"row\" marginTop={3}>\n            <Box flex={1} display={'flex'} flexDirection={'column'} marginRight={3} justifyContent={'space-between'}>\n                <Box flex={1} width={'101%'} >\n                    <ScaleAreaChart type={ChartType.Trend} data={pairHistory} />\n                </Box>\n                <Box display={'flex'} flexDirection={'row'} justifyContent={'space-between'}>\n                    <BoxStyled paddingX={2} display={'flex'} flexDirection={'column'}>\n                        <Typography component={'p'} color={'textSecondary'} display={'flex'} marginBottom={1/2*3}\n                        >\n                            {t('labelAmmTotalToken')}\n                        </Typography>\n                        <Typography component={'span'} display={'flex'} flexDirection={'row'} alignItems={'center'}\n                                    style={{textTransform: 'capitalize'}} color={'textPrimary'}>\n                            <Typography component={'span'} marginRight={1 / 2}\n                            >\n                                <Avatar variant=\"square\" sizes={'small'} alt={'coinLogo'}\n                                    // src={coinAInfo?.icon}\n                                        src={sellIconHasLoaded ? coinPairInfo?.myCoinA?.icon : 'static/images/icon-default.png'}/>\n                            </Typography>\n                            <Typography component={'span'}>{getThousandFormattedNumbers(coinPairInfo.totalA,6)}</Typography>\n                            <Typography component={'span'}>\n                                {/*<HiddenHidden>{t('labelLPTotal')}</Hidden>*/}\n                                {coinPairInfo.myCoinA?.simpleName}\n                            </Typography>\n\n                        </Typography>\n                        <Typography component={'span'} display={'flex'} flexDirection={'row'} alignItems={'center'}  marginTop={1}\n                                    style={{textTransform: 'capitalize'}}>\n                            <Typography component={'span'} marginRight={1 / 2}\n                                        color={'textSecondary'}>\n                                <Avatar variant=\"square\" sizes={'small'} alt={'coinLogo'}\n                                    // src={coinBInfo?.icon}\n                                        src={buyIconHasLoaded ? coinPairInfo?.myCoinB?.icon : 'static/images/icon-default.png'}/>\n                            </Typography>\n                            <Typography component={'span'}>{getThousandFormattedNumbers(coinPairInfo.totalB,6)}</Typography>\n                            <Typography component={'span'}>\n                                {/*<Hidden>{t('labelLPTotal')}</Hidden>*/}\n                                {coinPairInfo.myCoinB?.simpleName}\n                            </Typography>\n\n                        </Typography>\n\n                    </BoxStyled>\n                    <BoxStyled paddingX={2} display={'flex'} flexDirection={'column'}>\n                        <Typography component={'p'} color={'textSecondary'} display={'flex'}\n                        >\n                            {t('label24Volume')}\n                        </Typography>\n                        <Typography  variant={'h4'} marginTop={4}\n                            component={'span'}> {typeof coinPairInfo.amountDollar === 'undefined' ? EmptyValueTag :\n                            currency === Currency.dollar ? PriceTag.Dollar + getThousandFormattedNumbers(coinPairInfo.amountDollar,4) : PriceTag.Yuan + getThousandFormattedNumbers(coinPairInfo.amountYuan ? coinPairInfo.amountYuan : 0,4)}\n                        </Typography>\n\n                    </BoxStyled>\n                    <BoxStyled paddingX={2} display={'flex'} flexDirection={'column'}>\n                        <Typography component={'p'} color={'textSecondary'} display={'flex'}\n                        >\n                            {t('labelTVL')}\n                        </Typography>\n\n\n                        <Typography variant={'h4'} marginTop={4}\n                                    component={'span'}>\n                            {currency === Currency.dollar ? PriceTag.Dollar + getThousandFormattedNumbers(coinPairInfo.tradeFloat && coinPairInfo.tradeFloat.priceDollar ? coinPairInfo.tradeFloat.priceDollar as number : 0,4)\n                                : PriceTag.Yuan + getThousandFormattedNumbers(coinPairInfo.tradeFloat && coinPairInfo.tradeFloat.priceYuan ? coinPairInfo.tradeFloat.priceYuan as number : 0,4)}\n                        </Typography>\n\n                    </BoxStyled>\n                    <BoxStyled paddingX={2} display={'flex'} flexDirection={'column'}>\n                        <Typography component={'p'} color={'textSecondary'} display={'flex'}\n                        >\n                            {t('labelAPY')}\n                        </Typography>\n                        <Typography  variant={'h4'} marginTop={4}\n                                      component={'span'}> {coinPairInfo.APY ? coinPairInfo.APY : EmptyValueTag}%\n                        </Typography>\n                    </BoxStyled>\n                </Box>\n            </Box>\n            <Box display={'flex'}>\n                <AmmPanelView pair={pair} walletMap={walletMap} snapShotData={snapShotData}/>\n            </Box>\n        </Box>\n\n        <Grid container marginY={3}>\n            <Grid item xs={12}>\n                <Tabs value={tabIndex}\n                      onChange={handleChange}\n                      aria-label=\"tabs switch\">\n                    <Tab label={t('labelAll')} {...applyProps(0)} />\n                    <Tab label={t('labelMe')} {...applyProps(1)} />\n                </Tabs>\n                <StylePaper style={{marginTop: `${unit * 2}px`}}>\n                    {/*ammRecordArray*/}\n                    {tabIndex === 0 ? <AmmRecordTable\n                        rawData={ammMarketArray}\n                        handlePageChange={_handlePageChange} page={page}\n                    /> : <AmmRecordTable rawData={myAmmMarketArray} handlePageChange={_handlePageChange}\n                                         page={page}/>}\n                </StylePaper>\n            </Grid>\n\n        </Grid>\n\n    </>\n\n})\n\n\n\n\n\n\n\n","import { AmmProps } from '@loopring-web/component-lib';\nimport React from 'react';\nimport { AmmCardProps, AmmData, AmmInData, IBData } from '@loopring-web/component-lib/static-resource';\nimport { AmmCard } from '@loopring-web/component-lib/components/block/AmmCard';\nimport { Grid } from '@material-ui/core';\nimport { useAmmMiningUI } from './hook';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport { withTranslation } from 'react-i18next';\nimport { AmmPoolActivityRule, LoopringMap } from 'loopring-sdk/dist/defs/loopring_defs';\n\nconst AmmCardWrap = React.memo(React.forwardRef((props:AmmCardProps<{[key:string]:any}>,ref) => {\n    return props? <AmmCard ref={ref} {...props} /> :<></>\n}));\nconst AmmList = <I extends {[key:string]:any}>({ammActivityViewMap}: {ammActivityViewMap: Array<AmmCardProps<I>> })=>{\n    return  <>{ammActivityViewMap.map((item:AmmCardProps<I>,index)=>\n        <Grid item xs={12} sm={6} lg={4}  key={index}>\n            <AmmCardWrap {...item as any} />\n        </Grid>\n    ) }</>\n}\n\nexport const AmmMiningView =  withTranslation('common')(<T extends AmmData<C extends IBData<I> ? C : IBData<I>>, I,\n    ACD extends AmmInData<I>,\n    C = IBData<I>>({ammProps,t,ammActivityMap,...rest}: { ammProps:AmmProps<T ,I,ACD>,\n    ammActivityMap: LoopringMap<LoopringMap<AmmPoolActivityRule[]>>|undefined,   \n} & any) => {\n    const { ammActivityViewMap,\n        ammActivityPastViewMap} = useAmmMiningUI({ammActivityMap});\n    const [tabIndex,setTabIndex] = React.useState<0|1>(0);\n    const handleChange = (event: any, newValue: 0|1) => {\n        setTabIndex(newValue);\n    }\n\n    return <Grid container spacing={2}>\n        <Grid item xs={12}>\n            <Tabs value={tabIndex}\n                  onChange={handleChange}\n                  aria-label=\"tabs switch\">\n                <Tab label={t('labelCurrentActivities')}  />\n                <Tab label={t('labelPastActivities')}  />\n            </Tabs>\n        </Grid>\n        <AmmList ammActivityViewMap={tabIndex === 0 ? ammActivityViewMap : ammActivityPastViewMap}/>\n    </Grid>\n})\n","import { AmmCardProps } from '@loopring-web/component-lib/static-resource';\nimport { AmmPoolActivityRule, AmmPoolActivityStatus,LoopringMap } from 'loopring-sdk';\nimport React from 'react';\nimport {\n    makeUIAmmActivityMap\n} from '../../../hooks/help';\n\nimport { useUserRewards } from '../../../stores/userRewards';\n\nexport const useAmmMiningUI = <R extends { [ key: string ]: any }, I extends { [ key: string ]: any }>(\n    {\n        ammActivityMap\n    }: { ammActivityMap: LoopringMap<LoopringMap<AmmPoolActivityRule[]>> | undefined }\n): {\n    ammActivityViewMap: Array<AmmCardProps<I>>,\n    ammActivityPastViewMap: Array<AmmCardProps<I>>\n} => {\n    const  userRewardsMapState =  useUserRewards();// store.getState().userRewardsMap\n    // const {coinMap} = useTokenMap();\n    // const ammMapState = useAmmMap();\n    // const walletLayer2State = useWalletLayer2();\n    const [ammActivityViewMap, setAmmActivityViewMap] = React.useState<Array<AmmCardProps<I>>>([]);\n\n\n    const [ammActivityPastViewMap, setAmmActivityPastViewMap] = React.useState<Array<AmmCardProps<I>>>(\n        []);\n    // const [ammUserRewardMap, setAmmUserRewardMap] = React.useState<AmmUserRewardMap>(\n    //     {});\n\n\n    // );\n    React.useEffect(() => {\n        if(ammActivityMap && Object.keys(ammActivityMap).length>0 ){\n\n           // getAmmPoolUserRewards().then((ammUserRewardMap)=>{\n                // setAmmUserRewardMap(ammUserRewardMap as AmmUserRewardMap);\n                setAmmActivityViewMap(makeUIAmmActivityMap(\n                    {\n                        ammActivityMap,\n                        type: 'AMM_MINING',\n                        ammPoolActivityStatus: [AmmPoolActivityStatus.NotStarted, AmmPoolActivityStatus.InProgress]\n                    }, userRewardsMapState.userRewardsMap\n                ));\n                setAmmActivityPastViewMap(\n                    makeUIAmmActivityMap(\n                        {\n                            ammActivityMap,\n                            type: 'AMM_MINING',\n                            ammPoolActivityStatus: [AmmPoolActivityStatus.EndOfGame]\n                        }, userRewardsMapState.userRewardsMap\n                    ))\n          //  })\n        }\n\n    },[ammActivityMap])\n    React.useEffect(() => {\n            if (userRewardsMapState.status === \"ERROR\") {\n                //TODO: solve error\n                userRewardsMapState.statusUnset();\n            } else if (userRewardsMapState.status === \"DONE\") {\n                userRewardsMapState.statusUnset();\n                setAmmActivityViewMap(\n                    makeUIAmmActivityMap(\n                    {\n                        ammActivityMap,\n                        type: 'AMM_MINING',\n                        ammPoolActivityStatus: [AmmPoolActivityStatus.NotStarted, AmmPoolActivityStatus.InProgress]\n                    }, userRewardsMapState.userRewardsMap\n                ));\n                setAmmActivityPastViewMap(\n                    makeUIAmmActivityMap(\n                        {\n                            ammActivityMap,\n                            type: 'AMM_MINING',\n                            ammPoolActivityStatus: [AmmPoolActivityStatus.EndOfGame]\n                        }, userRewardsMapState.userRewardsMap\n                    ))\n                // if (userRewardsMapState.ammMap) {\n                //     setAmmActivityViewMap(\n                //         makeUIAmmActivityMap(\n                //             {\n                //                 ammActivityMap,\n                //                 type: 'AMM_MINING',\n                //                 ammPoolActivityStatus: [AmmPoolActivityStatus.NotStarted, AmmPoolActivityStatus.InProgress]\n                //             }, ammUserRewardMap\n                //         ))\n                //     setAmmActivityPastViewMap(\n                //         makeUIAmmActivityMap(\n                //             {\n                //                 ammActivityMap,\n                //                 type: 'AMM_MINING',\n                //                 ammPoolActivityStatus: [AmmPoolActivityStatus.EndOfGame]\n                //             }, ammUserRewardMap\n                //         ))\n                //\n                // }\n\n            }\n        },\n        [userRewardsMapState.status]\n    )\n\n\n    return {\n        ammActivityViewMap,\n        ammActivityPastViewMap\n    }\n\n}\n","import React from 'react'\nimport styled from '@emotion/styled'\nimport { Box, Grid, Typography } from '@material-ui/core'\nimport { WithTranslation, withTranslation } from 'react-i18next'\nimport {\n    AmmRecordTable,\n    AmmTradeType,\n    ChartType,\n    ScaleAreaChart,\n    TablePaddingX,\n    ToggleButtonGroup,\n    useSettings ,\n    MyPoolTable\n} from '@loopring-web/component-lib'\nimport {\n    Currency, EmptyValueTag,\n    getThousandFormattedNumbers,\n    PriceTag\n} from '@loopring-web/component-lib/src/static-resource';\n\nimport { AmmPoolActivityRule, LoopringMap } from 'loopring-sdk/dist/defs/loopring_defs';\nimport { useOverview } from './hook';\nimport { TableWrapStyled } from 'pages/styled'\n\n\n//TODO: FIXED:  demo data\n\n\nconst toggleData = [\n    {value: '24 H', key: '24 H'},\n    {value: '1 W', key: '1 W'},\n    {value: 'ALL', key: 'ALL'},\n]\n\nconst StylePaper = styled(Box)`\n  width: 100%;\n  height: 100%;\n  flex: 1;\n` as typeof Box;\n\nconst StyleWrapper = styled(Grid)`\n  position: relative;\n  width: 100%;\n  background-color: ${({theme}) => theme.colorBase.background().default};\n  border-radius: ${({theme}) => theme.unit}px;\n` as typeof Grid\n\n\n\nconst StyledBtnGroupWrapper = styled(Box)`\n  position: absolute;\n  z-index: 99;\n  top: ${({theme}) => theme.unit}px;\n  width: 100%;\n` as typeof Box\n\n\nexport const MyLiquidity = withTranslation('common')(\n    <R extends { [ key: string ]: any }, I extends { [ key: string ]: any }>\n    ({t, ammActivityMap, ...rest}:\n         WithTranslation &\n         { ammActivityMap: LoopringMap<LoopringMap<AmmPoolActivityRule[]>> | undefined }\n    ) => {\n        const [chartPeriod, setChartPeriod] = React.useState('ALL');\n        const [page, setPage] = React.useState(1);\n        const {currency} = useSettings();\n\n        const _handlePageChange = React.useCallback((page: number) => {\n            setPage(page);\n        }, [])\n\n        const {myAmmMarketArray, summaryReward, myPoolRow} = useOverview({ammActivityMap});\n        return (\n            <>\n                <StyleWrapper container spacing={1} padding={3} margin={0}>\n                    <Grid display={'flex'} flexDirection={'column'} justifyContent={'space-around'} item sm={3}>\n                        <Typography variant={'body1'} component={'h5'}\n                                    color={'textSecondary'}>{t('labelTotalPositionValue')}</Typography>\n                        <Typography variant={'h4'} marginTop={1}>\n                            {summaryReward === undefined ? EmptyValueTag : currency === Currency.dollar ? PriceTag.Dollar\n                                + getThousandFormattedNumbers(summaryReward.rewardDollar !== undefined? summaryReward.rewardDollar : 0)\n                                + getThousandFormattedNumbers( summaryReward.feeDollar !== undefined?summaryReward.feeDollar : 0)\n                                : PriceTag.Yuan + getThousandFormattedNumbers(summaryReward.rewardYuan ? summaryReward.rewardYuan : 0)\n                                    +  getThousandFormattedNumbers(summaryReward.feeYuan ? summaryReward.feeYuan : 0)}\n                        </Typography>\n                    </Grid>\n                    <Grid display={'flex'} flexDirection={'column'} justifyContent={'space-around'} item sm={3}>\n                        <Typography variant={'body1'} component={'h5'}\n                                    color={'textSecondary'}>{t('labelFeeRewards')}</Typography>\n                        <Typography variant={'h4'} marginTop={1}>\n                            {summaryReward === undefined ? EmptyValueTag : currency === Currency.dollar ? PriceTag.Dollar\n                                + getThousandFormattedNumbers(summaryReward.feeDollar ? summaryReward.feeDollar : 0)\n                                : PriceTag.Yuan\n                                + getThousandFormattedNumbers(summaryReward.feeYuan ? summaryReward.feeYuan : 0)}\n                        </Typography>\n                    </Grid>\n                    <Grid display={'flex'} flexDirection={'column'} justifyContent={'space-around'} item sm={3}>\n                        <Typography variant={'body1'} component={'h5'}\n                                    color={'textSecondary'}>{t('labelMiningRewards')}</Typography>\n                        <Typography variant={'h4'} marginTop={1}>\n                            {summaryReward === undefined ? EmptyValueTag : currency === Currency.dollar ? PriceTag.Dollar\n                                + getThousandFormattedNumbers(summaryReward.rewardDollar ? summaryReward.rewardDollar : 0)\n                                : PriceTag.Yuan\n                                + getThousandFormattedNumbers(summaryReward.rewardYuan ? summaryReward.rewardYuan : 0)}\n                        </Typography>\n                    </Grid>\n                </StyleWrapper>\n                {/*<StyleWrapper container marginY={2} height={340}>*/}\n                {/*    <StyledBtnGroupWrapper display={'flex'} padding={3} justifyContent={'space-between'}>*/}\n                {/*        <Typography variant={'body1'} component={'h5'}*/}\n                {/*                    color={'textSecondary'}>{t('labelLiquidityValue')}</Typography>*/}\n                {/*        <Box marginRight={-1}>*/}\n                {/*            <ToggleButtonGroup exclusive size=\"small\" {...{*/}\n                {/*                ...rest,*/}\n                {/*                t,*/}\n                {/*                data: toggleData,*/}\n                {/*                value: chartPeriod,*/}\n                {/*                setValue: setChartPeriod*/}\n                {/*            }} />*/}\n                {/*        </Box>*/}\n                {/*    </StyledBtnGroupWrapper>*/}\n                {/*    <ScaleAreaChart type={ChartType.Trend} data={[]}/>*/}\n                {/*</StyleWrapper>*/}\n                <Typography paddingLeft={2} marginTop={2} variant={'h4'}>{t('labelMyAmm')}</Typography>\n                <TableWrapStyled container marginY={2} paddingBottom={2} flex={1} height={568}>\n                    <Grid item xs={12} display={'flex'} flexDirection={'column'}>\n                        <MyPoolTable\n                            rawData={myPoolRow}\n                            pagination={{pageSize: 5}}\n                            handleDeposit={(row: any) => {\n                                console.log()\n                            }}\n                            handleWithdraw={(row: any) => {\n                                console.log()\n                            }}\n                            handlePageChange={() => {\n                            }}\n                        />\n                    </Grid>\n                </TableWrapStyled>\n                <Typography paddingLeft={2} variant={'h4'}>{t('labelMyAmmRecord')}</Typography>\n                <TableWrapStyled container marginTop={2}  paddingBottom={2} flex={1}>\n                    <Grid item xs={12} display={'flex'} flexDirection={'column'}>\n                        <AmmRecordTable rawData={myAmmMarketArray} handlePageChange={_handlePageChange} page={page}/>\n                    </Grid>\n                </TableWrapStyled>\n            </>\n        )\n    })","import { AmmPoolActivityRule, LoopringMap } from 'loopring-sdk';\nimport React from 'react';\nimport { AmmRecordRow, MyPoolRow } from '@loopring-web/component-lib';\nimport { makeWallet, WalletMapExtend } from '../../../hooks/help/makeWallet';\nimport {\n    getUserAmmTransaction,\n    makeMyAmmMarketArray,\n    makeMyPoolRowWithPoolState,\n    makeSummaryMyAmm,\n    SummaryMyAmm\n} from '../../../hooks/help';\nimport { useTokenMap } from '../../../stores/token';\nimport { useWalletLayer2 } from '../../../stores/walletLayer2';\nimport { useUserRewards } from '../../../stores/userRewards';\nimport { useAmmMap } from '../../../stores/Amm/AmmMap';\n\n\nexport const useOverview = <R extends { [ key: string ]: any }, I extends { [ key: string ]: any }>(\n    {\n        ammActivityMap\n    }: { ammActivityMap: LoopringMap<LoopringMap<AmmPoolActivityRule[]>> | undefined }\n): {\n    myAmmMarketArray: AmmRecordRow<R>[],\n    summaryReward: SummaryMyAmm | undefined,\n    myPoolRow: AmmRecordRow<R>[]\n    // ammActivityViewMap: Array<AmmCardProps<I>>,\n    // ammActivityPastViewMap: Array<AmmCardProps<I>>\n} => {\n    const walletLayer2State = useWalletLayer2();\n    const userRewardsMapState = useUserRewards();\n    const {marketArray} = useTokenMap();\n    const ammMapState = useAmmMap();\n    const {ammMap} = ammMapState;\n\n    const [walletMap, setWalletMap] = React.useState<WalletMapExtend<R> | undefined>(undefined);\n    const [summaryReward, setSummaryReward] = React.useState<SummaryMyAmm | undefined>(undefined);\n    const [myPoolRow, setMyPoolRow] = React.useState<MyPoolRow<R>[]>([])\n    const [myAmmMarketArray, setMyAmmMarketArray] = React.useState<AmmRecordRow<R>[]>([]);\n    // const [ammUserRewardMap, setAmmUserRewardMap] = React.useState<AmmUserRewardMap|undefined>(undefined);\n    // const [snapShotData,setSnapShotData] = React.useState<{\n    //     tickerData: TickerData|undefined\n    //     ammPoolsBalance: AmmPoolSnapshot|undefined\n    // }|undefined>(undefined);\n    const walletLayer2DoIt = React.useCallback(() => {\n        const {walletMap: _walletMap} = makeWallet();\n        setWalletMap(_walletMap)\n        if (_walletMap) {\n            getUserAmmTransaction()?.then((marketTrades) => {\n                let _myTradeArray = makeMyAmmMarketArray(undefined, marketTrades)\n                setMyAmmMarketArray(_myTradeArray ? _myTradeArray : [])\n            })\n        }\n        return _walletMap\n    }, [makeWallet, getUserAmmTransaction, makeMyAmmMarketArray, marketArray])\n    const makeMyPoolRow = React.useCallback((_walletMap): MyPoolRow<R>[] => {\n        if (_walletMap && ammMap) {\n            // @ts-ignore\n            const _myPoolRow: MyPoolRow<R>[] = Reflect.ownKeys(_walletMap).reduce((prev: MyPoolRow<R>[], walletKey: string) => {\n                if (/LP-/i.test(walletKey)) {\n                    const ammKey = walletKey.replace('LP-', 'AMM-');\n                    const marketKey = walletKey.replace('LP-', '');\n                    let rowData: MyPoolRow<R> | undefined;\n                    //TODO：websocket open\n                    //  if(ammPoolSnapShots)\n                    // makeData by snapshot else\n                    // else\n                    rowData = makeMyPoolRowWithPoolState(\n                        {\n                            ammDetail: ammMap[ ammKey ],\n                            walletMap: _walletMap,\n                            market: marketKey,\n                            ammUserRewardMap: userRewardsMapState.userRewardsMap\n                        }\n                    )\n                    if (rowData !== undefined) {\n                        prev.push(rowData);\n                    }\n                }\n                return prev\n            }, [] as MyPoolRow<R>[])\n            // console.log('rowData',_myPoolRow);\n            return _myPoolRow;\n        }\n        return [];\n    }, [ammMap, userRewardsMapState.userRewardsMap])\n\n    React.useEffect(() => {\n        if (walletLayer2State.walletLayer2) {\n            const _walletMap = walletLayer2DoIt();\n            if (ammMap) {\n                const _myPoolRow = makeMyPoolRow(_walletMap)\n                setMyPoolRow(_myPoolRow)\n            }\n        }\n    }, []);\n\n    React.useEffect(() => {\n        //ammMapState.ammMap or\n\n        switch (walletLayer2State.status) {\n            case \"ERROR\":\n                walletLayer2State.statusUnset();\n                break;\n            case \"DONE\":\n                walletLayer2State.statusUnset();\n               // const _walletMap = walletLayer2DoIt()\n                const _walletMap = walletLayer2DoIt();\n                //TODO check AmmMap state or ammSnapshot sockets\n                //userRewardsMapState is an option but  walletLayer2 amd ammMapState.ammMap is required\n                if (ammMapState.ammMap) {\n                    const _myPoolRow = makeMyPoolRow(_walletMap);\n                    setMyPoolRow(_myPoolRow)\n                }\n                break;\n            default:\n                break;\n\n        }\n        // }\n    }, [walletLayer2State.status])\n\n    React.useEffect(() => {\n        if (ammMapState.status === \"ERROR\") {\n            //TODO: solve error\n            ammMapState.statusUnset();\n        } else if (ammMapState.status === \"DONE\") {\n            ammMapState.statusUnset();\n            //TODO check AmmMap state or ammSnapshot sockets when websocket open  ammMapState done should not effect myPoolRow\n            if (walletLayer2State.walletLayer2) {\n                const _walletMap = walletLayer2DoIt();\n                //userRewardsMapState is an option and walletLayer2 is required\n                const _myPoolRow = makeMyPoolRow(_walletMap);\n                setMyPoolRow(_myPoolRow);\n            }\n        }\n    }, [ammMapState.status])\n\n    React.useEffect(() => {\n        if (userRewardsMapState.status === \"ERROR\") {\n            //TODO: solve error\n            userRewardsMapState.statusUnset();\n        } else if (userRewardsMapState.status === \"DONE\") {\n            userRewardsMapState.statusUnset();\n            // setAmmUserRewardMap()\n            const summaryReward = makeSummaryMyAmm({userRewardsMap: userRewardsMapState.userRewardsMap});\n            setSummaryReward(summaryReward);\n\n            //TODO check AmmMap state or ammSnapshot sockets\n            if (walletLayer2State.walletLayer2 && ammMapState.ammMap) {  //  ammMapState.ammMap or websocket\n                //userRewardsMapState is an option and walletLayer2 is required\n                const _myPoolRow = makeMyPoolRow(walletLayer2State.walletLayer2);\n                setMyPoolRow(_myPoolRow);\n            }\n\n        }\n    }, [userRewardsMapState.status])\n    return {\n        myAmmMarketArray,\n        summaryReward,\n        myPoolRow,\n        // ammActivityViewMap,\n        // ammActivityPastViewMap\n    }\n\n}\n","import { useRouteMatch } from 'react-router'\n\nimport { Box } from '@material-ui/core'\nimport {\n    SubMenu,\n    SubMenuList as BasicSubMenuList,\n} from '@loopring-web/component-lib'\nimport { withTranslation } from 'react-i18next'\nimport { subMenuLiquidity } from '@loopring-web/component-lib/src/static-resource'\nimport { PoolsPanel } from './PoolsPanel'\nimport { CoinPairPanel } from './CoinPairPanel';\nimport { AmmMiningView } from './AmmMining';\nimport { MyLiquidity } from './MyLiquidity'\nimport { useAmmPool } from './hook';\n\nexport const subMenu = subMenuLiquidity\n\nconst SubMenuList = withTranslation(['layout','common'], { withRef: true })(BasicSubMenuList);\nexport const LiquidityPage = () => {\n\n    // const { ammFee } = useAmmPool('LRC', 'ETH')\n    //\n    // console.log('--- > ammFee:', ammFee)\n    //\n    const {ammActivityMap} = useAmmPool();\n    let match: any = useRouteMatch(['/liquidity/:item',':next/']);\n    const selected = match?.params.item ?? 'pools'\n    let matchPair: any = useRouteMatch(['/liquidity/:item/:next/:symbol']);\n    let symbol:any = undefined\n    if (matchPair && matchPair?.params?.next && matchPair.params.item === 'pools') {\n       if(!matchPair.params.symbol){\n           symbol='LRC-ETH';\n       }else{\n           symbol=matchPair.params.symbol;\n       }\n    }\n    \n    return (\n        <>\n            { symbol && <Box display={'flex'} flexDirection={'column'}  flex={1} alignSelf={'flex-start'}>\n              <CoinPairPanel ammActivityMap={ammActivityMap}/>\n            </Box>\n            }\n            {!symbol && <>  <Box width={'200px'} display={'flex'} justifyContent={'stretch'} marginRight={3} marginBottom={3}>\n                    <SubMenu>\n                        <SubMenuList selected={selected} subMenu={subMenu as any} />\n                    </SubMenu>\n                </Box>\n                <Box  minHeight={420}  display={'flex'} alignItems={'stretch'} justifyContent={'stretch'} flexDirection=\"column\" marginTop={0} flex={1} marginBottom={3}>\n                    {(selected === 'pools' && !symbol ) && <PoolsPanel ammActivityMap={ammActivityMap}/>}\n                    {(selected === 'amm-mining' && !symbol ) && <AmmMiningView ammActivityMap={ammActivityMap}/>}\n                    {(selected === 'my-liquidity' && !symbol ) && <MyLiquidity ammActivityMap={ammActivityMap}/>}\n                    {selected === 'orderBook-Mining' && <AmmMiningView ammActivityMap={ammActivityMap}/>}\n                    {/*{selected === 'orders' && <OrderPanel />}*/}\n                </Box>\n             </>\n            }\n        </>\n    )\n\n}\n","import React from 'react';\nimport { useAmmActivityMap } from '../../stores/Amm/AmmActivityMap';\n\nimport { AmmPoolActivityRule, LoopringMap } from 'loopring-sdk';\nimport { useAccount } from '../../stores/account/hook';\nimport { useUserRewards } from '../../stores/userRewards';\nimport { useAmmMap } from '../../stores/Amm/AmmMap';\n\nexport const useAmmPool = <R extends {[key:string]:any},I extends {[key:string]:any}>()=>{\n    const AmmActivityMapState  = useAmmActivityMap()\n    const {updateUserRewards}  = useUserRewards()\n    const {account} = useAccount();\n    const {ammMap,updateAmmMap} = useAmmMap();\n    const [ammActivityMap,setAmmActivityMap] = React.useState<LoopringMap<LoopringMap<AmmPoolActivityRule[]>>|undefined>(AmmActivityMapState.ammActivityMap)\n    // init AmmMap at begin\n    React.useEffect(() => {\n        if (!ammMap || Object.keys(ammMap).length === 0) {\n            updateAmmMap();\n        }\n    }, []);\n    React.useEffect(() => {\n        switch (AmmActivityMapState.status) {\n            case \"ERROR\":\n                AmmActivityMapState.statusUnset();\n                // setState('ERROR')\n                //TODO: show error at button page show error  some retry dispath again\n                break;\n            case \"DONE\":\n                AmmActivityMapState.statusUnset();\n                setAmmActivityMap(AmmActivityMapState.ammActivityMap)\n                break;\n            default:\n                break;\n\n        }\n    }, [AmmActivityMapState.status])\n    React.useEffect(() => {\n        if(account.accountId){\n            updateUserRewards()\n        }\n    }, [account.accountId])\n\n    return {\n        ammActivityMap\n    }\n\n}\n\n","import { HashRouter as Router, Route, Switch, } from 'react-router-dom'\n\nimport Header from 'layouts/header'\n\nimport QuotePage from 'pages/QuotePage'\nimport { SwapPage } from 'pages/SwapPage'\n\nimport DebugPage from 'pages/DebugPage'\n\nimport Container from '@material-ui/core/Container'\nimport { Box } from '@material-ui/core'\nimport { DevWrapper } from '../provider/'\nimport { Layer2Page } from '../pages/Layer2Page'\nimport { LiquidityPage } from '../pages/LiquidityPage'\n\nconst RouterView = () => {\n    \n    return <Router>\n        <Header />\n\n        {/*<Box style={{marginTop: `var(--header-height)`}} flex={1} display={'flex'}>*/}\n        <Container maxWidth=\"lg\" style={{minHeight:'calc(100% - 64px - 32px)',display:'flex',flexDirection:'column'}}>\n            {/*style={{height: '100%' }}*/}\n            <Box display={'flex'} flex={1} alignItems={'stretch'} flexDirection={'row'} marginTop={3}  >\n                <Switch>\n                    <Route exact component={SwapPage} path='/'/>\n                    <Route exact component={QuotePage} path='/markets'/>\n                    <Route component={SwapPage} path='/trading/lite'/>\n                    <Route component={SwapPage} path='/trading/lite(/:symbol)'/>\n\n                    <Route exact component={Layer2Page} path='/layer2'/>\n                    <Route exact component={Layer2Page} path='/layer2/assets'/>\n                    <Route exact component={Layer2Page} path='/layer2/transactions'/>\n                    <Route exact component={Layer2Page} path='/layer2/trades'/>\n                    <Route exact component={Layer2Page} path='/layer2/ammRecords'/>\n                    <Route exact component={Layer2Page} path='/layer2/orders'/>\n                    <Route exact component={Layer2Page} path='/layer2/setting'/>\n\n                    <Route exact component={LiquidityPage} path='/liquidity'/>\n                    <Route exact component={LiquidityPage} path='/liquidity/pools/*'/>\n                    <Route exact component={LiquidityPage} path='/liquidity/pools'/>\n                    {/*<Route exact component={LiquidityPage} path='/liquidity/pools/coinPair(/:symbol)'/>*/}\n                    <Route exact component={LiquidityPage} path='/liquidity/amm-mining'/>\n                    <Route exact component={LiquidityPage} path='/liquidity/my-liquidity'/>\n                    <Route exact component={LiquidityPage} path='/liquidity/orderBook-Mining'/>\n                    <Route exact component={LiquidityPage} path='/liquidity/maker-rebates'/>\n\n                    <DevWrapper>\n                        <Route exact path='/debug'>\n                            <DebugPage/>\n                        </Route>\n                    </DevWrapper>\n\n                </Switch>\n            </Box>\n        </Container>\n        {/*</Box>*/}\n\n    </Router>\n}\n\nexport default RouterView\n","import { useDeepCompareEffect } from \"react-use\"\n\nexport function useCustomDCEffect(action: any, deps: any[] | undefined | null) {\n    useDeepCompareEffect(action, [deps || {}])\n}\n","import { toBig } from 'loopring-sdk'\n\nexport enum OrderHandling {\n    processed = 'processed',\n    no_such_order = 'no_such_order',\n    too_many_times = 'too_many_times',\n}\n\nexport const BIG0 = toBig(0)\n\nexport const BIG1 = toBig(1)\n\nexport const BIG10 = toBig(10)\n\nexport const BIG10K = toBig(10000)\n\nexport const MULTI_FACTOR = 10000\n","import { createSlice, PayloadAction, Slice } from '@reduxjs/toolkit'\n\nimport { AccountInfo, ConnectorNames, } from 'loopring-sdk'\n\nimport { Lv2Account, } from 'defs/account_defs'\nimport { AccountStatus } from 'state_machine/account_machine_spec'\nimport { UserStorage } from 'storage'\n\n\nconst initialState = () => {\n  const defaultAccId = process.env.REACT_APP_TEST_ACCOUND_ID ? process.env.REACT_APP_TEST_ACCOUND_ID : UserStorage.getAccountId()\n  const defaultApiKey = process.env.REACT_APP_TEST_API_KEY ? process.env.REACT_APP_TEST_API_KEY : UserStorage.getApikey()\n  const defaultOwner = process.env.REACT_APP_TEST_OWNER ? process.env.REACT_APP_TEST_OWNER : UserStorage.getAccount()\n  const defaultEddsaKey = process.env.REACT_APP_TEST_EDDSA_KEY ? process.env.REACT_APP_TEST_EDDSA_KEY : UserStorage.getEddsakey()\n\n  const defaultStatus = AccountStatus.UNCONNNECTED\n  return {\n    accAddr: defaultOwner,\n    status: defaultStatus,\n    accountId: defaultAccId,\n    publicKey: {},\n    nonce: 0,\n    isContractAddress: false,\n    apiKey: defaultApiKey,\n    eddsaKey: defaultEddsaKey,\n    connectName: ConnectorNames.Unknown,\n    connectNameTemp: ConnectorNames.Unknown,\n  } as Lv2Account\n}\n\nconst accountSlice:Slice = createSlice({\n  name: 'account',\n  initialState: initialState(),\n  reducers: {\n    reset(state) {\n      const initState = initialState()\n      Object.assign(state, initState)\n    },\n    setAccAddr(state, action: PayloadAction<string>) {\n      state.accAddr = action.payload\n      // UserStorage.setAccount(action.payload)\n    },\n    setAccountInfo(state, action: PayloadAction<AccountInfo>) {\n      state.accAddr = action.payload.owner\n      state.accountId = action.payload.accountId\n      state.nonce = action.payload.nonce\n      state.publicKey = action.payload.publicKey\n\n      // UserStorage.setAccount(state.accAddr)\n      // UserStorage.setAccountId(state.accountId)\n      \n    },\n    setApikey(state, action: PayloadAction<string>) {\n      state.apiKey = action.payload\n      // UserStorage.setApikey(action.payload)\n    },\n    setAccountStatus(state, action: PayloadAction<AccountStatus>) {\n      state.status = action.payload\n    },\n    setEddsaKey(state, action: PayloadAction<any>) {\n      state.eddsaKey = action.payload\n      // UserStorage.setEddsakey(action.payload)\n    },\n    setConnectName(state, action: PayloadAction<ConnectorNames>) {\n      state.connectName = action.payload\n    },\n    setConnectNameTemp(state, action: PayloadAction<ConnectorNames>) {\n      state.connectNameTemp = action.payload\n    },\n    setIsContractAddress(state, action: PayloadAction<boolean>) {\n      state.isContractAddress = action.payload\n    },\n  },\n})\n\nexport const { reset, setAccAddr, setApikey, setConnectName, setConnectNameTemp, setAccountInfo, setAccountStatus, setEddsaKey, setIsContractAddress, } = accountSlice.actions\nexport default accountSlice\n","import { useDispatch, useSelector } from 'react-redux'\nimport { tokenMapSlice } from './reducer';\nimport { TokenMapStates } from './interface';\n\nexport function useTokenMap<R extends {[key:string]:any}>(): TokenMapStates<R> & {\n    updateTokenMap:()=>void,\n    statusUnset:()=>void,\n} {\n    const tokenMap:TokenMapStates<R> = useSelector((state: any) => state.tokenMap)\n    const dispatch = useDispatch();\n    const updateTokenMap = () => {\n        dispatch(tokenMapSlice.actions.getTokenMap(undefined))\n    }\n    const statusUnset = ()=>{\n        dispatch(tokenMapSlice.actions.statusUnset(undefined))\n    }\n    return {\n        ...tokenMap,\n        statusUnset,\n        updateTokenMap,\n    }\n\n}\n","import { ConnectorNames } from 'loopring-sdk'\n\nimport {\n    injected,\n    network,\n    walletconnect,\n    walletlink,\n    ledger,\n    trezor,\n    authereum,\n} from 'networks/web3_connectors'\n\nexport const connectorsByName: { [connectorName in ConnectorNames]: any } = {\n    [ConnectorNames.Unknown]: undefined,\n    [ConnectorNames.Injected]: injected,\n    [ConnectorNames.Network]: network,\n    [ConnectorNames.WalletConnect]: walletconnect,\n    [ConnectorNames.WalletLink]: walletlink,\n    [ConnectorNames.Ledger]: ledger,\n    [ConnectorNames.Trezor]: trezor,\n    [ConnectorNames.Authereum]: authereum,\n}\n","import React from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\n\nimport { useCustomDCEffect } from 'hooks/common/useCustomDCEffect'\n\nimport { useGetTradingInfo } from 'stores/trading/hook'\nimport { useActiveWeb3React, } from 'hooks/web3/useWeb3'\n\nimport { Lv2Account, } from 'defs/account_defs'\n\nimport { AccountStatus, StatusChangeEvent } from 'state_machine/account_machine_spec'\n\nimport * as sign_tools from 'loopring-sdk'\n\nimport { connectorsByName } from 'defs/web3_defs'\n\nimport { ChainId, ConnectorNames, dumpError400, ExchangeAPI, GetOffchainFeeAmtRequest, OffchainFeeReqType, sleep, UpdateAccountRequestV3, UserAPI, VALID_UNTIL, } from 'loopring-sdk'\n\nimport { toHex, toBig, } from 'loopring-sdk'\n\nimport { RootState } from 'stores'\n\nimport {\n    reset, setAccountStatus, setConnectName,\n    setConnectNameTemp, setAccountInfo, setEddsaKey, setApikey, setAccAddr,\n} from 'stores/account/reducer'\n\nimport { AccountMachineSpec, } from 'state_machine/account_machine_spec'\n\nimport { buildMachine } from 'state_machine/machine_builder'\n\nimport voca from 'voca'\nimport { usePrevious } from 'react-use'\n\nimport Web3 from 'web3'\n\nimport { useExchangeAPI, useUserAPI } from 'hooks/exchange/useApi'\n\nimport { UserStorage } from 'storage'\n\nimport store from 'stores'\nimport { updateWalletLayer1, reset as resetLayer1 } from '../walletLayer1';\nimport { updateWalletLayer2, reset as resetLayer2, useWalletLayer2 } from '../walletLayer2';\nimport { useTokenMap } from '../token';\nimport { LoopringAPI } from 'stores/apis/api'\n\n\nexport function useWeb3Account() {\n\n    const {\n        connector,\n        library,\n        account,\n        chainId,\n        active,\n        error,\n    } = useActiveWeb3React()\n\n    const isConnected: boolean = active && !voca.isBlank(account as string)\n\n    return {\n        account,\n        connector,\n        library,\n        chainId,\n        active,\n        isConnected,\n        error,\n    }\n\n}\n\nexport function useAccount() {\n\n    const account: Lv2Account = useSelector((state: RootState) => state.account)\n\n    const isNoAccount = () => {\n        return account.status === AccountStatus.NOACCOUNT\n    }\n\n    const isActivated = () => {\n        return account.status === AccountStatus.ACTIVATED\n    }\n\n    return {\n        account,\n        isNoAccount,\n        isActivated,\n        apiKey: account.apiKey,\n        eddsaKey: account.eddsaKey,\n        accountId: account.accountId,\n    }\n}\n\nexport function useStateMachine() {\n    const dispatch = useDispatch()\n\n    const machine = buildMachine(AccountMachineSpec())\n\n    const sendEvent = React.useCallback((account: Lv2Account, event: StatusChangeEvent) => {\n        const nextState = machine(account.status, event)\n        if (nextState) {\n            dispatch(setAccountStatus(nextState))\n        }\n    }, [machine, dispatch])\n\n    return {\n        sendEvent,\n    }\n}\n\nexport function useConnect() {\n\n    const {\n        activate,\n    } = useActiveWeb3React()\n\n    const { sendEvent } = useStateMachine()\n\n    const dispatch = useDispatch()\n\n    const [activatingConnector, setActivatingConnector] = React.useState<any>()\n\n    const connect = React.useCallback((item_name: ConnectorNames, isSwitch: boolean = false) => {\n        const newConnector: any = connectorsByName[item_name]\n        setActivatingConnector(newConnector)\n        activate(newConnector)\n        dispatch(setConnectNameTemp(item_name))\n\n        if (isSwitch) {\n            //  console.log('try Connecting... isSwitch Reset')\n            sendEvent(store.getState().account, StatusChangeEvent.Reset)\n        }\n\n        sendEvent(store.getState().account, StatusChangeEvent.Connecting)\n\n    }, [activate, dispatch, sendEvent])\n\n    return {\n        connect,\n        activatingConnector,\n    }\n\n}\n\nexport function useDisconnect() {\n\n    const {\n        deactivate,\n    } = useActiveWeb3React()\n\n    const dispatch = useDispatch()\n\n    const disconnect = React.useCallback(() => {\n        deactivate()\n        dispatch(reset(undefined))\n        //TODO dispatch wallet info \n    }, [deactivate, dispatch])\n\n    return {\n        disconnect,\n    }\n\n}\n\nexport function useUnlock() {\n\n    const dispatch = useDispatch()\n\n    const { chainId } = useWeb3Account()\n\n    const exchangeApi: ExchangeAPI = useExchangeAPI()\n\n    const userApi: UserAPI = useUserAPI()\n\n    const { tradingInfo } = useGetTradingInfo()\n\n    const { connector, } = useWeb3Account()\n\n    const { sendEvent } = useStateMachine()\n\n    const { resetLayer2 } = useWalletLayer2()\n\n    const lock = React.useCallback(async (account: Lv2Account) => {\n        resetLayer2()\n        sendEvent(account, StatusChangeEvent.Lock)\n    }, [sendEvent])\n\n    const unlock = React.useCallback(async (account: Lv2Account) => {\n\n        const exchangeInfo = store.getState().system.exchangeInfo?.exchangeAddress\n\n        if (!userApi || !exchangeApi || !connector\n            || !account.accountId || !exchangeInfo\n            || !chainId\n            || account.status !== AccountStatus.LOCKED) {\n            return\n        }\n\n        if (account.status !== AccountStatus.LOCKED) {\n            throw Error('unexpected status:' + account.status)\n        }\n\n        let event = undefined\n        let sk = undefined\n        let apikey: any = undefined\n\n        const provider = await connector.getProvider()\n        const web3 = new Web3(provider as any)\n\n        try {\n\n            const nonce = account.nonce - 1 < 0 ? 0 : account.nonce - 1\n\n            if (!account.eddsaKey) {\n                const eddsaKey = await sign_tools\n                    .generateKeyPair(\n                        web3,\n                        account.accAddr,\n                        exchangeInfo,\n                        nonce,\n                        account.connectName,\n                    )\n                sk = eddsaKey.sk\n\n            } else {\n                sk = account.eddsaKey\n            }\n\n            // console.log('useUnlock account:', account, ' sk:', sk)\n\n            apikey = await userApi.getUserApiKey({\n                accountId: account.accountId\n            }, sk)\n\n            event = StatusChangeEvent.Unlock\n\n        } catch (reason) {\n            if (reason?.response?.data?.resultInfo?.code === 100001) {\n\n                try {\n\n                    // const req: GetOffchainFeeAmtRequest = {\n                    //     accountId: account.accountId,\n                    //     requestType: OffchainFeeReqType.UPDATE_ACCOUNT,\n                    // }\n    \n                    // const response = await userApi.getOffchainFeeAmt(req, account.apiKey)\n\n                    const feeMap = {\n                        'ETH': '529000000000000',\n                        'LRC': '34000000000000000000',\n                        'USDT': '7850000',\n                        'DAI': '98100000000000000000',\n                    }\n                    \n                    const eddsaKey = await sign_tools\n                        .generateKeyPair(\n                            web3,\n                            account.accAddr,\n                            tradingInfo.exchangeInfo?.exchangeAddress as string,\n                            account.nonce,\n                            account.connectName,\n                        )\n                    \n                    const request: UpdateAccountRequestV3 = {\n                        exchange: tradingInfo.exchangeInfo?.exchangeAddress,\n                        owner: account.accAddr,\n                        accountId: account.accountId,\n                        publicKey: { x: eddsaKey.formatedPx, y: eddsaKey.formatedPy },\n                        maxFee: { tokenId: 0, volume: feeMap['ETH'] },\n                        validUntil: VALID_UNTIL,\n                        nonce: account.nonce,\n                    }\n\n                    const updateAccountResponse = await userApi.updateAccount(request, web3,\n                        chainId, account.connectName, false)\n\n                    console.log('updateAccountResponse:', updateAccountResponse)\n\n                    await sleep(1000)\n\n                } catch (reason2) {\n\n                    dumpError400(reason2)\n\n                }\n            }\n            dumpError400(reason)\n            event = StatusChangeEvent.Reset\n        }\n\n        if (sk) {\n            dispatch(setEddsaKey(sk))\n        }\n\n        if (apikey?.apiKey) {\n            dispatch(setApikey(apikey.apiKey))\n        }\n\n        if (event) {\n            sendEvent(account, event)\n        }\n\n    }\n        , [dispatch, sendEvent, exchangeApi, userApi, connector, chainId, tradingInfo.exchangeInfo])\n\n    return {\n        lock,\n        unlock,\n    }\n}\n\nasync function checkAccountAvailableAsync(exchangeApi: ExchangeAPI, userApi: UserAPI, account: Lv2Account, dispatch: any, sendEvent: any, connector: any, exchangeAddress: string) {\n\n    let accInfo = undefined\n    let event = undefined\n    let sk = undefined\n    let code = undefined\n    let apikey: any = undefined\n\n    try {\n        accInfo = (await exchangeApi.getAccount({\n            owner: account.accAddr\n        })).accInfo\n        if (accInfo.publicKey && accInfo.publicKey.x && accInfo.publicKey.y) {\n            if (account.accountId !== accInfo.accountId) {\n                const provider = await connector.getProvider()\n                const web3 = new Web3(provider as any)\n                try {\n                    code = await web3.eth.getCode(account.accAddr)\n                    try {\n                        const eddsakey = await sign_tools\n                            .generateKeyPair(\n                                web3,\n                                account.accAddr,\n                                exchangeAddress,\n                                accInfo.nonce - 1,\n                                account.connectName,\n                            )\n                        sk = toHex(toBig(eddsakey.keyPair.secretKey))\n                        const px = toHex(toBig(eddsakey.keyPair.publicKeyX))\n                        const py = toHex(toBig(eddsakey.keyPair.publicKeyY))\n\n                        try {\n                            apikey = await userApi.getUserApiKey({\n                                accountId: accInfo.accountId\n                            }, sk)\n                            event = (StatusChangeEvent.HasPubkey)\n                        } catch (reason) {\n                            dumpError400(reason)\n                            event = (StatusChangeEvent.ErrorResponse)\n                        }\n                    } catch (reason) {\n                        dumpError400(reason)\n                        event = (StatusChangeEvent.ErrorResponse)\n                    }\n\n                } catch (reason) {\n                    dumpError400(reason)\n                    event = (StatusChangeEvent.ErrorResponse)\n                }\n\n            } else {\n                console.log('already has accountId!')\n            }\n        } else {\n            event = (StatusChangeEvent.HasNoPubkey)\n        }\n    } catch (reason) {\n        // 3 has none of above\n        dumpError400(reason)\n        // check deposit tx (local and ethereum)\n        event = (StatusChangeEvent.ErrorResponse)\n    }\n\n    if (accInfo && accInfo.owner !== account.accAddr) {\n        dispatch(setAccountInfo(accInfo))\n    }\n\n    if (sk) {\n        dispatch(setEddsaKey(sk))\n    }\n\n    if (apikey) {\n        dispatch(setApikey(apikey.apiKey))\n    }\n\n    if (event) {\n        sendEvent(event)\n    }\n\n}\n\nexport function useCheckAccStatus() {\n\n    const dispatch = useDispatch()\n\n    const { account } = useAccount()\n\n    const { sendEvent } = useStateMachine()\n\n    const exchangeApi: ExchangeAPI = useExchangeAPI()\n\n    const userApi: UserAPI = useUserAPI()\n\n    const { account: web3Account, active, isConnected, chainId, connector, } = useWeb3Account()\n    const { marketArray } = useTokenMap()\n\n    const lv1Acc = web3Account as string\n\n    const prevChainId = usePrevious(chainId)\n    const prevWeb3Account = usePrevious(web3Account)\n\n    // const { updateWalletLayer1,resetLayer1} = useWalletLayer1();\n    // const { updateWalletLayer2, resetLayer2} = useWalletLayer2()\n\n\n    // console.log('prevChainId:', prevChainId, ' chainId:', chainId)\n    // console.log('prevWeb3Account:', prevWeb3Account, ' web3Account:', web3Account)\n\n    // console.log(exchangeApi, userApi, account, 'prevChainId:', prevChainId, 'chainId:', chainId, 'web3Account:', web3Account)\n\n    const { tradingInfo } = useGetTradingInfo()\n\n    useCustomDCEffect(async () => {\n\n        const cleanUp = () => {\n            let handler = UserStorage.getHandler()\n            if (account.status !== AccountStatus.ACTIVATED && handler) {\n                clearInterval(handler)\n            }\n        }\n\n        async function checkStatus() {\n\n            if (!account || !lv1Acc || !exchangeApi || !userApi || !connector || !tradingInfo.exchangeInfo?.exchangeAddress) {\n                //console.log('checkStatus return!!!!!!')\n                return\n            }\n\n            if (((prevChainId && chainId && prevChainId !== chainId)\n                || (prevWeb3Account && web3Account && prevWeb3Account !== web3Account))\n                && account.status !== AccountStatus.UNCONNNECTED) {\n                dispatch(reset(undefined))\n                sendEvent(account, StatusChangeEvent.Reset)\n                return\n            }\n\n            cleanUp()\n\n            switch (account.status) {\n                case AccountStatus.UNCONNNECTED:\n                    // console.log('---> render UNCONNNECTED active:', active, ' isConnected:', isConnected)\n\n                    if (isConnected) {\n                        dispatch(setConnectNameTemp(ConnectorNames.Injected))\n                        sendEvent(account, StatusChangeEvent.Connecting)\n                    }\n\n                    //HIGH:\n                    dispatch(resetLayer1(undefined));\n                    dispatch(resetLayer2(undefined));\n                    break\n\n                case AccountStatus.CONNECTED:\n                    //check session or local storage\n\n                    //  console.log('---> render CONNECTED account:', account)\n\n                    try {\n\n                        const acc = (await exchangeApi.getAccount({ owner: lv1Acc })).accInfo\n\n                        // current acc is local acc info\n                        if (account.accAddr && account.eddsaKey && acc.owner === account.accAddr) {\n                            // console.log('cur Eddsakey:', account.eddsaKey)\n                        } else {\n                            // console.log('got a new address:', acc)\n                            // got a new address\n                            dispatch(setAccountInfo(acc))\n                            // dispatch(setEddsaKey(''))\n\n                            //updateWalletLayer1();\n                            if (marketArray?.length) {\n                                dispatch(updateWalletLayer1(undefined));\n                            }\n                        }\n\n                        if (account?.connectName !== account?.connectNameTemp) {\n                            dispatch(setConnectName(account.connectNameTemp))\n                        }\n\n                        sendEvent(account, StatusChangeEvent.HasPubkey)\n\n                    } catch (reason) {\n                        dumpError400(reason)\n\n                        if (lv1Acc) {\n                            dispatch(setAccAddr(lv1Acc))\n                        }\n\n                        if (reason.response && reason.response.data && reason.response.data.resultInfo\n                            && reason.response.data.resultInfo.code === 101002) {\n                            sendEvent(account, StatusChangeEvent.ErrorResponse)\n                        }\n                    }\n\n                    break\n\n                case AccountStatus.NOACCOUNT:\n                    break\n\n                case AccountStatus.DEPOSITING:\n                    // TODO sub contract event, check deposit.\n                    const depositFinished = true // TODO\n                    if (depositFinished) {\n                        //   console.log('depositFinished currStatus:', account.status)\n                        sendEvent(account, StatusChangeEvent.FinishDeposit)\n                    }\n                    break\n\n                case AccountStatus.DEPOSIT_TO_CONFIREM:\n                    // getAccount every 10s to check\n                    break\n\n                case AccountStatus.UNACTIVATED:\n                    const isSmartWallet = false // TODO\n                    if (isSmartWallet) {\n                        // TODO approve hash,\n                        //  console.log('approve hash, currStatus:', account.status)\n                        sendEvent(account, StatusChangeEvent.IsSmartWallet)\n                    } else {\n                        // console.log('approve hash no smartwallet, account.status:', account.status)\n                    }\n                    break\n\n                case AccountStatus.ARPROVING:\n                    // TODO sub contract event, check approving.\n                    const approved = false // TODO\n                    if (approved) {\n                        //  console.log('sub contract event, check approving. approved! status:', account.status)\n                        sendEvent(account, StatusChangeEvent.ApproveSubmit)\n                    }\n                    break\n\n                case AccountStatus.APPROV_TO_CONFIRM:\n                    const approveConfirmed = false // TODO\n                    if (approveConfirmed) {\n                        //   console.log('approveConfirmed status:', account.status)\n                        sendEvent(account, StatusChangeEvent.ApproveConfirmed)\n                    }\n                    break\n\n                case AccountStatus.LOCKED:\n                    //HIGH:\n                    dispatch(resetLayer1(undefined))\n                    break\n\n                case AccountStatus.ACTIVATED:\n                    UserStorage.checkTimeout(true)\n                    const handler = setInterval(() => {\n                        const isTimeOut = UserStorage.checkTimeout()\n                        if (account.status === AccountStatus.ACTIVATED && isTimeOut) {\n                            clearInterval(handler)\n                            sendEvent(account, StatusChangeEvent.Lock)\n                        }\n                    }, 1000)\n                    UserStorage.setHandler(handler);\n                    //HIGH:\n                    dispatch(updateWalletLayer2(undefined))\n                    //useWalletLayer2().updateWalletLayer2();\n                    //dispatch((undefined));\n                    break\n\n                default:\n                    break\n            }\n\n\n\n        }\n\n        checkStatus()\n\n        return () => {\n            cleanUp()\n        }\n\n    }, [updateWalletLayer1, updateWalletLayer2, resetLayer1, resetLayer2,\n        //updateWalletLayer2, updateWalletLayer1,resetLayer1,resetLayer2,\n\n        exchangeApi, userApi, account, prevChainId, chainId, lv1Acc, dispatch, connector, tradingInfo.exchangeInfo?.exchangeAddress,])\n\n}\n\n","export const buildMachine = <S, E>(spec: any) => (currentState: S, event: E) => {\n    // We get all possible transitions for the current State\n    const stateTransitions = spec.states[currentState]\n\n    // No transitions? Error!\n    if (stateTransitions === undefined) {\n        throw new Error(`No transitions defined for ${currentState}`)\n    }\n\n    // We try to transition to the next state\n    const nextState = stateTransitions[event]\n\n    // No next state? Error!\n    if (nextState === undefined) {\n        throw new Error(\n            `Unknown transition for event ${event} in state ${currentState}`\n        )\n    }\n\n   // console.log('got nextState:', nextState)\n\n    // We return the new state\n    return nextState\n}\n","import { useDispatch, useSelector } from 'react-redux'\nimport { AmmMapStates } from './interface';\nimport { ammMapSlice } from './reducer';\n\nexport const useAmmMap = <R extends {[key:string]:any},I extends {[key:string]:any}>(): AmmMapStates<R,I> & {\n    updateAmmMap:()=> void,\n    statusUnset:()=> void,\n} => {\n    const ammMap:AmmMapStates<R,I>= useSelector((state: any) => state.amm.ammMap)\n    const dispatch = useDispatch();\n    const updateAmmMap = () => {\n        dispatch(ammMapSlice.actions.getAmmMap(undefined))\n    }\n    const statusUnset = ()=>{\n        dispatch(ammMapSlice.actions.statusUnset(undefined))\n    }\n    return {\n        ...ammMap,\n        statusUnset,\n        updateAmmMap\n    }\n}\n","import { useAmmpoolAPI, useExchangeAPI } from 'hooks/exchange/useApi'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { useCustomDCEffect } from 'hooks/common/useCustomDCEffect'\n\nimport store, { RootState } from 'stores'\n\nimport { \n    setMarkets, \n    setExchangeInfo, \n    setTokens, \n    setTickerMap, \n    setAmmPoolStats,\n    setAmmPoolConf, \n    setMarketTrades,\n    setAmmActivityRules,\n    setChainId, \n} from 'stores/trading/reducer'\n\nimport { dumpError400, ChainId, AmmPoolStat, Currency, } from 'loopring-sdk'\nimport { useActiveWeb3React } from 'hooks/web3/useWeb3'\nimport { useEffect } from 'react'\n\nimport { ammpoolAPI, exchangeAPI } from \"stores/apis/api\"\n\nexport function getTradingInfo() {\n    const tradingInfo = store.getState().trading\n    return {\n        tradingInfo,\n        chainId: tradingInfo.chainId,\n    }\n}\n\nexport function getAccount() {\n    return  store.getState().account\n\n}\n\nexport function getChainId(){\n    const chainId = store.getState().system.chainId;\n    return chainId\n\n}\n\nexport function useGetTradingInfo() {\n    const tradingInfo = useSelector((state: RootState) => state.trading)\n    return {\n        tradingInfo,\n        chainId: tradingInfo.chainId,\n    }\n}\n\nexport function useUpdateChainId() {\n    const { chainId } = useActiveWeb3React()\n    const dispatch = useDispatch()\n    useEffect(() => {\n        dispatch(setChainId(chainId ?? ChainId.GORLI))\n    }, [chainId, dispatch])\n}\n\nexport function useUpdateExchangeMarkets() {\n    const dispatch = useDispatch()\n    const api = useExchangeAPI()\n\n    useCustomDCEffect(async() => {\n\n        if (!api) {\n            return\n        }\n\n        try {\n            const response = await api.getMixMarkets()\n            dispatch(setMarkets(response))\n        } catch (reason) {\n            dumpError400(reason)\n        }\n\n    }, [api])\n\n}\n\nexport function useUpdateExchangeInfo() {\n\n    const dispatch = useDispatch()\n    const api = useExchangeAPI()\n\n    useCustomDCEffect(async() => {\n\n        if (!api) {\n            return\n        }\n\n        try {\n            const response = await api.getExchangeInfo()\n            dispatch(setExchangeInfo(response.exchangeInfo))\n        } catch (reason) {\n            dumpError400(reason)\n        }\n\n    }, [api])\n\n}\n\nexport function useUpdateAmmPoolConf() {\n\n    const dispatch = useDispatch()\n    const api = useAmmpoolAPI()\n\n    useCustomDCEffect(async() => {\n\n        if (!api) {\n            return\n        }\n\n        try {\n            const ammPoolConf = await api.getAmmPoolConf()\n            dispatch(setAmmPoolConf(ammPoolConf))\n        } catch (reason) {\n            dumpError400(reason)\n        }\n\n    }, [api])\n\n}\n\nexport function useUpdateAmmPoolStats() {\n\n    const dispatch = useDispatch()\n    const api = useAmmpoolAPI()\n\n    useCustomDCEffect(async() => {\n\n        if (!api) {\n            return\n        }\n\n        try {\n            const ammPoolStats = await api.getAmmPoolStats()\n            dispatch(setAmmPoolStats(ammPoolStats))\n        } catch (reason) {\n            dumpError400(reason)\n        }\n\n    }, [api])\n\n}\n\nexport function useUpdateAmmActivityRules() {\n\n    const dispatch = useDispatch()\n    const api = useAmmpoolAPI()\n\n    useCustomDCEffect(async() => {\n\n        if (!api) {\n            return\n        }\n\n        try {\n            const ammActivityRules = await api.getAmmPoolActivityRules()\n            dispatch(setAmmActivityRules(ammActivityRules.activityRules))\n        } catch (reason) {\n            dumpError400(reason)\n        }\n\n    }, [api])\n\n}\n\nexport function useUpdateTokens() {\n\n    const dispatch = useDispatch()\n    const api = useExchangeAPI()\n\n    useCustomDCEffect(async() => {\n\n        if (!api) {\n            return\n        }\n\n        try {\n            const tokens = await api.getTokens()\n            dispatch(setTokens(tokens))\n        } catch (reason) {\n            dumpError400(reason)\n        }\n\n    }, [api])\n\n}\n\nexport function useUpdateTickerMap(market: string) {\n\n    const dispatch = useDispatch()\n    const api = useExchangeAPI()\n\n    useCustomDCEffect(async() => {\n\n        if (!api) {\n            return\n        }\n\n        try {\n            const tickMap = await api.getTicker({\n                market\n              })\n            dispatch(setTickerMap(tickMap))\n        } catch (reason) {\n            dumpError400(reason)\n        }\n\n    }, [api])\n\n}\n\nexport function useMarketTrades(market: string) {\n  \n    const dispatch = useDispatch()\n    const api = useExchangeAPI()\n\n    useCustomDCEffect(async() => {\n\n        if (!api) {\n            return\n        }\n\n        try {\n            const marketTrades = await api.getMarketTrades({\n                market\n              })\n            dispatch(setMarketTrades(marketTrades))\n        } catch (reason) {\n            dumpError400(reason)\n        }\n\n    }, [api, dispatch])\n\n}\n\nexport function useUpdateFiatPrice() {\n  \n    const dispatch = useDispatch()\n    const api = useExchangeAPI()\n\n    useCustomDCEffect(async() => {\n\n        if (!api) {\n            return\n        }\n\n        try {\n            const usdFiatPrices = await api.getFiatPrice({\n                legal: Currency.USD\n            })\n            const cnyFiatPrices = await api.getFiatPrice({\n                legal: Currency.CNY\n            })\n            dispatch(setMarketTrades({}))\n        } catch (reason) {\n            dumpError400(reason)\n        }\n\n    }, [api, dispatch])\n\n}\n\n// export const asyncGetTradingInfo = async() => {\n//\n//     const { tradingInfo } = getTradingInfo()\n//     console.log('--- tradingInfo', tradingInfo)\n//\n//     let tokens: any = undefined\n//\n//     if (tradingInfo.tokens?.tokenIdMap) {\n//         tokens = tradingInfo.tokens\n//     } else {\n//         tokens = (await exchangeAPI().getTokens())\n//     }\n//\n//     let ammpools: any = undefined\n//\n//     if (tradingInfo.ammPoolConf?.ammpools) {\n//         ammpools = tradingInfo.ammPoolConf.ammpools\n//     } else {\n//         ammpools = (await ammpoolAPI().getAmmPoolConf()).ammpools\n//     }\n//\n//     let ammPoolStats: { [key: string] : AmmPoolStat } = {}\n//\n//     if (tradingInfo.ammPoolStats.ammPoolStats) {\n//         ammPoolStats = tradingInfo.ammPoolStats.ammPoolStats\n//     } else {\n//         ammPoolStats = (await ammpoolAPI().getAmmPoolStats()).ammPoolStats\n//     }\n//\n//     return {\n//         tokens,\n//         ammpools,\n//         ammPoolStats,\n//     }\n// }","import { debug } from \"console\"\n\nexport function deepClone(data: any) {\n    if (!data || !(data instanceof Object) || (typeof data == \"function\")) {\n        return data || undefined\n    }\n    let constructor = data.constructor\n    let result = new constructor()\n    for (let key in data) {\n        if (data.hasOwnProperty(key)) {\n            result[key] = deepClone(data[key])\n        }\n    }\n    return result\n}\n\nexport async function copyToClipBoard(text: string){ //复制到剪切板\n\n    if(document.execCommand){\n        var textarea =document.createElement('textarea')\n        document.body.appendChild(textarea)\n        textarea.value=text\n        textarea.select()\n        document.execCommand(\"copy\")\n        document.body.removeChild(textarea)\n\t}\n\n    if (navigator.clipboard) {\n        await navigator.clipboard.writeText(text)\n    }\n\n\tif((window as any).clipboardData) {\n        (window as any).clipboardData.setData(\"Text\", text)\n\n        console.log('clipboardData:', text)\n        return true\n    }\n\treturn false\n}","import { useDispatch, useSelector } from 'react-redux'\nimport { walletLayer1Slice } from './reducer';\nimport { WalletLayer1States } from './interface';\n\nexport function useWalletLayer1(): WalletLayer1States & {\n    updateWalletLayer1:()=> void,\n    statusUnset:()=> void,\n    resetLayer1:()=>void,\n} {\n    const walletLayer1:WalletLayer1States = useSelector((state: any) => state.walletLayer1)\n    const dispatch = useDispatch();\n    const updateWalletLayer1 = () => {\n        dispatch(walletLayer1Slice.actions.updateWalletLayer1(undefined))\n    }\n    const statusUnset = ()=>{\n        dispatch(walletLayer1Slice.actions.statusUnset(undefined))\n    }\n    const resetLayer1 = ()=>{\n        dispatch(walletLayer1Slice.actions.reset(undefined))\n    }\n    return {\n        ...walletLayer1,\n        resetLayer1,\n        statusUnset,\n        updateWalletLayer1\n    }\n\n}\n","import { useDispatch, useSelector } from 'react-redux'\nimport { walletLayer2Slice } from './reducer';\nimport { WalletLayer2States } from './interface';\n\nexport function useWalletLayer2(): WalletLayer2States & {\n    updateWalletLayer2:()=> void,\n    statusUnset:()=> void,\n    resetLayer2:()=>void,\n} {\n    const walletLayer2:WalletLayer2States = useSelector((state: any) => state.walletLayer2)\n    const dispatch = useDispatch();\n    const updateWalletLayer2 = () => {\n        dispatch(walletLayer2Slice.actions.getWalletLayer2(undefined))\n    }\n    const statusUnset = ()=>{\n        dispatch(walletLayer2Slice.actions.statusUnset(undefined))\n    }\n    const resetLayer2 = ()=>{\n        dispatch(walletLayer2Slice.actions.reset(undefined))\n    }\n    return {\n        ...walletLayer2,\n        resetLayer2,\n        statusUnset,\n        updateWalletLayer2\n    }\n\n}\n","import { InjectedConnector } from '@web3-react/injected-connector'\nimport { NetworkConnector } from '@web3-react/network-connector'\nimport { WalletConnectConnector } from '@web3-react/walletconnect-connector'\nimport { WalletLinkConnector } from '@web3-react/walletlink-connector'\nimport { LedgerConnector } from '@web3-react/ledger-connector'\nimport { TrezorConnector } from '@web3-react/trezor-connector'\nimport { AuthereumConnector } from '@web3-react/authereum-connector'\nimport { myLog } from 'utils/log_tools'\n\nconst POLLING_INTERVAL = 12000\n\nconst RPC_URLS: { [chainId: number]: string } = {\n  1: process.env.REACT_APP_RPC_URL_1 as string,\n  5: process.env.REACT_APP_RPC_URL_5 as string\n}\n\nmyLog('RPC_URLS 1:', RPC_URLS[1])\nmyLog('RPC_URLS 5:', RPC_URLS[5])\n\nexport const injected = new InjectedConnector({ supportedChainIds: [1, 5,] })\n\nexport const network = new NetworkConnector({\n  urls: { \n    1: RPC_URLS[1], \n    5: RPC_URLS[5] \n  },\n  defaultChainId: 1\n})\n\nexport const walletconnect = new WalletConnectConnector({\n  rpc: { 1: RPC_URLS[1] },\n  bridge: 'https://bridge.walletconnect.org',\n  qrcode: true,\n  pollingInterval: POLLING_INTERVAL\n})\n\nexport const walletlink = new WalletLinkConnector({\n  url: RPC_URLS[1],\n  appName: 'Loopring DEX'\n})\n\nexport const ledger = new LedgerConnector({ chainId: 1, url: RPC_URLS[1], pollingInterval: POLLING_INTERVAL })\n\nexport const trezor = new TrezorConnector({\n  chainId: 1,\n  url: RPC_URLS[1],\n  pollingInterval: POLLING_INTERVAL,\n  manifestEmail: 'dummy@abc.xyz',\n  manifestAppUrl: 'http://localhost:1234'\n})\n\nexport const authereum = new AuthereumConnector({ chainId: 42 })\n","import { Provider } from 'react-redux'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nimport { createWeb3ReactRoot, Web3ReactProvider } from '@web3-react/core'\nimport store from 'stores'\n\nimport { getLibrary } from 'utils/web3_tools'\nimport { NetworkContextName } from 'loopring-sdk'\n\nimport { getTheme, i18n, provider, ProviderComposer } from \"@loopring-web/component-lib/static-resource\"\nimport { ThemeProvider as MuThemeProvider } from '@material-ui/core'\nimport LocalizationProvider from '@material-ui/pickers/LocalizationProvider'\n\nimport MomentUtils from '@material-ui/lab/AdapterMoment'\n\nimport { ThemeProvider } from \"@emotion/react\"\n\nimport { I18nextProvider } from \"react-i18next\"\n\n\n\nconst Web3ProviderNetwork = createWeb3ReactRoot(NetworkContextName)\nconst providers = [\n    provider(LocalizationProvider as any, {dateAdapter: MomentUtils}),\n    provider(I18nextProvider as any, {i18n:i18n}),\n    provider(MuThemeProvider as any, {theme: getTheme('dark')}),\n    provider(ThemeProvider as any, {theme: getTheme('dark')}),\n    provider(Provider as any, {store}),\n]\n\nReactDOM.render(\n// @ts-ignore\n    <ProviderComposer providers={providers}>\n        <Web3ReactProvider getLibrary={getLibrary}>\n            <Web3ProviderNetwork getLibrary={getLibrary}>\n                <App/>\n            </Web3ProviderNetwork>\n        </Web3ReactProvider>\n    </ProviderComposer>,\n    document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\nif (process.env.NODE_ENV !== 'production') {\n    reportWebVitals(console.log)\n}\n","import { createSlice, PayloadAction, Slice } from '@reduxjs/toolkit'\nimport { AmmMapStates, GetAmmMapParams } from './interface';\nimport { STATUS } from '../../constant';\n\n\n\nconst initialState: Required<AmmMapStates<object, object>> = {\n    ammMap: undefined,\n    __timer__: -1,\n    status: 'UNSET',\n    errorMessage: null,\n}\nconst ammMapSlice: Slice = createSlice({\n    name: 'ammMap',\n    initialState,\n    reducers: {\n        getAmmMap(state, action: PayloadAction<GetAmmMapParams>) {\n            state.status = STATUS.PENDING\n        },\n        getAmmMapStatus(state, action: PayloadAction<AmmMapStates<any, any>>) {\n            // @ts-ignore\n            if (action.error) {\n                state.status = STATUS.ERROR\n                // @ts-ignore\n                state.errorMessage = action.error\n            }\n            const {ammMap, __timer__} = action.payload\n            if (ammMap) {state.ammMap = ammMap;}\n            if (__timer__) {state.__timer__ = __timer__;}\n            state.status = STATUS.DONE\n        },\n        updateRealTimeAmmMap(state, action: PayloadAction<undefined>) {\n            state.status = STATUS.PENDING\n\n\n        },\n        statusUnset: state => {\n            state.status = STATUS.UNSET\n        }\n    },\n});\nexport { ammMapSlice };\nexport const {getAmmMap, getAmmMapStatus, statusUnset, updateRealTimeAmmMap} = ammMapSlice.actions\n","import { createSlice, PayloadAction, Slice } from '@reduxjs/toolkit'\nimport { STATUS } from '../constant';\nimport { StateBase } from '../interface';\nimport { SocketMap } from './interface';\n\nconst initialState: StateBase & {socket: SocketMap} = {\n  socket: {},\n  status: 'UNSET',\n  errorMessage: null,\n}\nconst socketSlice: Slice<StateBase & {socket: SocketMap}> = createSlice({\n  name: 'socket',\n  initialState,\n  reducers: {\n    socketEnd(state,action:PayloadAction<undefined>){\n      state.status = STATUS.PENDING\n    },\n    sendSocketTopic(state, action: PayloadAction<{socket: SocketMap}>) {\n      state.socket = action.payload.socket\n    },\n    getSocketStatus(state, action: PayloadAction<undefined>) {\n\n      // @ts-ignore\n      if (action.error) {\n        state.status = STATUS.ERROR\n        // @ts-ignore\n        state.errorMessage = action.error\n      }\n      // state.socket = action.payload.socket\n      state.status = STATUS.DONE\n    },\n\n    statusUnset: state => {\n      state.status = STATUS.UNSET\n    }\n\n  },\n});\nexport { socketSlice };\nexport const { getSocketStatus, sendSocketTopic, socketEnd, statusUnset} = socketSlice.actions;\n","import { createSlice, PayloadAction, Slice } from '@reduxjs/toolkit'\n\nimport { TradingInterval, ChainId, ExchangeInfo, TokenInfo, TickerData, } from 'loopring-sdk'\n\nexport interface TradingInfo {\n  chainId: number\n  interval: TradingInterval\n  ammPoolStats: any\n  ammPoolConf: any\n  ammActivityRules: any\n  markets: any\n  marketTrades: any\n  tickerMap: {[key: string]: TickerData}\n  tokens: {[key: string]: [value: TokenInfo]}\n  exchangeInfo?: ExchangeInfo\n}\n\nconst defaultInterval = process.env.REACT_APP_TEST_INTERVAL ? process.env.REACT_APP_TEST_INTERVAL : TradingInterval.hr1\n\nconst initialState = {\n  chainId: ChainId.GORLI,\n  interval: defaultInterval,\n  ammPoolConf: {},\n  ammActivityRules: {},\n  ammPoolStats: {},\n  markets: [],\n  marketTrades: {},\n  tokens: {},\n  tickerMap: {},\n  refreshRate: 1000,\n  refreshRateSlow: 3000,\n} as TradingInfo\n\nconst tradingSlice:Slice = createSlice({\n  name: 'trading',\n  initialState,\n  reducers: {\n    setChainId(state, action: PayloadAction<number>) {\n      state.chainId = action.payload\n    },\n    changeTradingInterval(state, action: PayloadAction<any>) {\n      state.interval = action.payload\n    },\n    setTickerMap(state, action: PayloadAction<any>) {\n      state.tickerMap = action.payload\n    },\n    setAmmPoolStats(state, action: PayloadAction<any>) {\n      state.ammPoolStats = action.payload\n    },\n    setAmmActivityRules(state, action: PayloadAction<any>) {\n      state.ammActivityRules = action.payload\n    },\n    setAmmPoolConf(state, action: PayloadAction<any>) {\n      state.ammPoolConf = action.payload\n    },\n    setMarketTrades(state, action: PayloadAction<any>) {\n      state.marketTrades = action.payload\n    },\n    setMarkets(state, action: PayloadAction<any>) {\n      state.markets = action.payload\n    },\n    setTokens(state, action: PayloadAction<{}>) {\n      state.tokens = action.payload\n    },\n    setExchangeInfo(state, action: PayloadAction<ExchangeInfo>) {\n      state.exchangeInfo = action.payload\n    },\n  },\n})\n\nexport const {\n  setChainId, \n  setAmmPoolStats,\n  setAmmActivityRules,\n  setMarketTrades, \n  setTickerMap, \n  setAmmPoolConf, \n  changeTradingInterval, \n  setMarkets, \n  setTokens, \n  setExchangeInfo, \n} = tradingSlice.actions\n\nexport default tradingSlice\n","import { myLog } from \"utils/log_tools\"\n\nexport enum CONSTANTS {\n    Handler = 'handler',\n    AccountId = 'account_id',\n    Account = 'account',\n    Apikey = 'apikey',\n    Eddsakey = 'eddsakey',\n    ActiveTime = 'active_time',\n    AmmOrder = 'amm_order',\n    HardwareAddresses = 'hardware_addresses',\n}\n\nconst SESSION_TIMEOUT_SECONDS = 600\n\nexport class UserStorage {\n\n    public static getHandler() {\n        const rawHandler = sessionStorage.getItem(CONSTANTS.Handler)\n        try {\n            if (rawHandler !== undefined && rawHandler !== null)\n                return parseInt(rawHandler)\n        } catch (err) {\n        }\n        return undefined\n    }\n\n    public static setHandler(handler: any) {\n        sessionStorage.setItem(CONSTANTS.Handler, handler)\n    }\n\n    public static clearHandler() {\n        sessionStorage.removeItem(CONSTANTS.Handler)\n    }\n\n    public static checkTimeout(reset: boolean = false) : boolean {\n        let dateTimeStr = localStorage.getItem(CONSTANTS.ActiveTime)\n        let now = new Date().getTime()\n\n        if (dateTimeStr !== null && !reset) {\n            let tmpDt = new Date(parseInt(dateTimeStr))\n\n            if(now - tmpDt.getTime() > SESSION_TIMEOUT_SECONDS * 1000) {\n                myLog(`TIMEOUT! now:${now} dateTimeStr:${dateTimeStr} delta:${now - tmpDt.getTime()}`)\n                sessionStorage.clear()\n                localStorage.setItem(CONSTANTS.ActiveTime, now.toString())\n                return true\n            }\n        } else {\n            localStorage.setItem(CONSTANTS.ActiveTime, now.toString())\n        }\n\n        return false\n    }\n\n\n    public static getAccountId() {\n        const rawId = sessionStorage.getItem(CONSTANTS.AccountId)\n        try {\n            if (rawId)\n                return parseInt(rawId)\n        } catch (err) {\n        }\n        return undefined\n    }\n\n    public static setAccountId(accountId: number) {\n        sessionStorage.setItem(CONSTANTS.AccountId, accountId.toString())\n    }\n\n    public static getAccount() {\n        return sessionStorage.getItem(CONSTANTS.Account)\n    }\n\n    public static setAccount(account: string) {\n        sessionStorage.setItem(CONSTANTS.Account, account)\n    }\n\n    public static getApikey() {\n        return sessionStorage.getItem(CONSTANTS.Apikey)\n    }\n\n    public static setApikey(apikey: string) {\n        sessionStorage.setItem(CONSTANTS.Apikey, apikey)\n    }\n\n    public static getEddsakey() {\n        return sessionStorage.getItem(CONSTANTS.Eddsakey)\n    }\n\n    public static setEddsakey(eddsakey: string) {\n        sessionStorage.setItem(CONSTANTS.Eddsakey, eddsakey)\n    }\n\n    public static getAmmOrder(): string {\n        var orderHash = localStorage.getItem(CONSTANTS.AmmOrder)\n        return orderHash ? orderHash : ''\n    }\n\n    public static setAmmOrder(orderHash: string) {\n        localStorage.setItem(CONSTANTS.AmmOrder, orderHash)\n    }\n\n    public static clearAmmOrder() {\n        localStorage.removeItem(CONSTANTS.AmmOrder)\n    }\n\n    public static isHardwareAddress(address: string) {\n        let current = localStorage.getItem(CONSTANTS.HardwareAddresses)\n        if (current) {\n            if (current.includes(address.toLowerCase())) {\n                return true\n            }\n        }\n        return false\n    }\n\n    public static saveHardwareAddress(address: string) {\n        let current = localStorage.getItem(CONSTANTS.HardwareAddresses);\n        if (current) {\n            if (current.includes(address.toLowerCase()) !== true) {\n                let newValue = current + ',' + address.toLowerCase();\n                localStorage.setItem(CONSTANTS.HardwareAddresses, newValue);\n            }\n        } else {\n            localStorage.setItem(CONSTANTS.HardwareAddresses, address.toLowerCase());\n        }\n\n    }\n}\n","import { createSlice, PayloadAction, Slice } from '@reduxjs/toolkit'\nimport {  TickerStates } from './interface';\nimport { STATUS } from '../constant';\nimport { CoinKey } from '@loopring-web/component-lib/src/static-resource';\n\nconst initialState:Required<TickerStates>  = {\n    tickerMap:{},\n    status:'UNSET',\n    errorMessage:null,\n}\nconst tickerMapSlice:Slice = createSlice({\n    name: 'tickerMap',\n    initialState,\n    reducers: {\n        getTicker(state, action:PayloadAction<CoinKey<any>>) {\n            state.status = STATUS.PENDING\n        },\n        getTickers(state, action:PayloadAction<Array<CoinKey<any>>>) {\n            state.status = STATUS.PENDING\n        },\n        getTickerStatus(state, action: PayloadAction<TickerStates>) {\n            // @ts-ignore\n            if (action.error) {\n                state.status =  STATUS.ERROR\n                // @ts-ignore\n                state.errorMessage = action.error\n            }\n            state.tickerMap = action.payload.tickerMap;//{...state.tickerMap,...};\n            state.status = STATUS.DONE\n        },\n        statusUnset: state => {\n            state.status = STATUS.UNSET\n        }\n\n    },\n});\nexport { tickerMapSlice };\nexport const { getTicker,getTickers, getTickerStatus, statusUnset } = tickerMapSlice.actions;","import { useMemo, useState, useEffect } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\n\nimport { Web3Provider } from '@ethersproject/providers'\nimport { Web3ReactContextInterface } from '@web3-react/core/dist/types'\n\nimport { useWeb3React } from '@web3-react/core'\n\nimport { injected } from 'networks/web3_connectors'\n\nimport { ChainId, NetworkContextName } from 'loopring-sdk'\n\n/*\nimport EXCHANGE_ABI from 'config/abis/exchange_3_6.json'\nimport ERC20_ABI from 'config/abis/erc20.json'\nimport DEPOSIT_ABI from 'config/abis/deposit.json'\n\nimport Web3 from 'web3'\n*/\n\nexport function useActiveWeb3React(): Web3ReactContextInterface<Web3Provider> & { chainId?: ChainId } {\n  const context = useWeb3React<Web3Provider>()\n  const contextNetwork = useWeb3React<Web3Provider>(NetworkContextName)\n  return context.active ? context : contextNetwork\n}\n\nexport function useEtherscan() {\n  const { chainId } = useActiveWeb3React()\n\n  const [etherscanUrl, setEtherscanUrl] = useState<string>('')\n\n  useEffect(() => {\n    switch(chainId) {\n      case ChainId.MAINNET:\n        setEtherscanUrl('https://etherscan.io/address/')\n        break\n      default:\n        setEtherscanUrl('https://goerli.etherscan.io/address/')\n    }\n  }, [chainId])\n\n  return {\n    etherscanUrl,\n  }\n}\n\nexport function useEagerConnect() {\n\n  const { activate, active } = useWeb3React()\n\n  const [tried, setTried] = useState(false)\n\n  useEffect(() => {\n    injected.isAuthorized().then((isAuthorized: boolean) => {\n      if (isAuthorized) {\n        console.log('useEagerConnect isAuthorized')\n        activate(injected, undefined, true).catch(() => {\n          setTried(true)\n        })\n      } else {\n        console.log('useEagerConnect NOT isAuthorized')\n        setTried(true)\n      }\n    })\n  }, []) // intentionally only running on mount (make sure it's only mounted once :))\n\n  // if the connection worked, wait until we get confirmation of that to flip the flag\n  useEffect(() => {\n    if (!tried && active) {\n      setTried(true)\n    }\n  }, [tried, active])\n\n  return tried\n}\n\nexport function useInactiveListener(onReConnectInjected: any = undefined, suppress: boolean = false) {\n  const { active, error, activate, chainId, } = useWeb3React()\n  const dispatch = useDispatch()\n\n  useEffect((): any => {\n    const { ethereum } = window as any\n\n    const reConnectInjected = () => {\n      console.log('--------------------------> reConnectInjected')\n      activate(injected)\n      if (onReConnectInjected) {\n        onReConnectInjected()\n      }\n    }\n\n    if (ethereum && ethereum.on && !active && !error) {\n\n      const handleChainChanged = (chainId: string | number) => {\n        console.log('Handling \\'chainChanged\\' event with payload', chainId)\n        reConnectInjected()\n      }\n      const handleAccountsChanged = (accounts: string[]) => {\n        console.log('---------------------------------------------')\n        console.log('Handling \\'accountsChanged\\' event with payload', accounts)\n        console.log('before reset accounts.length=', accounts.length)\n        if (accounts.length > 0) {\n          console.log('before reset!!!!!!!!!!!!!!!!1')\n          reConnectInjected()\n        }\n      }\n\n      ethereum.on('chainChanged', handleChainChanged)\n      ethereum.on('accountsChanged', handleAccountsChanged)\n\n      return () => {\n        if (ethereum.removeListener) {\n          ethereum.removeListener('chainChanged', handleChainChanged)\n          ethereum.removeListener('accountsChanged', handleAccountsChanged)\n        }\n      }\n    }\n  }, [active, error, chainId, activate, dispatch])\n}\n\nexport function useBlockNumber() {\n  const { library, chainId } = useActiveWeb3React()\n\n  const [blockNumber, setBlockNumber] = useState<number>()\n\n  useEffect((): any => {\n      if (!!library) {\n          let stale = false\n\n          library\n              .getBlockNumber()\n              .then((blockNumber: number) => {\n                  if (!stale) {\n                      setBlockNumber(blockNumber)\n                  }\n              })\n              .catch(() => {\n                  if (!stale) {\n                      setBlockNumber(-1)\n                  }\n              })\n\n          const updateBlockNumber = (blockNumber: number) => {\n              setBlockNumber(blockNumber)\n          }\n          library.on('block', updateBlockNumber)\n\n          return () => {\n              stale = true\n              library.removeListener('block', updateBlockNumber)\n              setBlockNumber(undefined)\n          }\n      }\n  }, [library, chainId])\n\n  return {\n      blockNumber,\n  }\n}\n\nexport function useBalance() {\n  const { account, library, chainId } = useActiveWeb3React()\n\n  const [balance, setBalance] = useState<number>()\n  useEffect((): any => {\n      if (!!account && !!library) {\n          let stale = false\n\n          library\n              .getBalance(account)\n              .then((balance: any) => {\n                  if (!stale) {\n                      setBalance(balance)\n                  }\n              })\n              .catch(() => {\n                  if (!stale) {\n                      setBalance(0)\n                  }\n              })\n\n          return () => {\n              stale = true\n              setBalance(0)\n          }\n      }\n  }, [account, library, chainId]) // ensures refresh if referential identity of library doesn't change across chainIds\n\n  return {\n      balance,\n  }\n}\n","import { useDispatch, useSelector } from 'react-redux'\nimport { userRewardsMapSlice } from './reducer';\nimport { UserRewardsStates } from './interface';\n\nexport function useUserRewards(): UserRewardsStates & {\n    updateUserRewards:()=>void,\n    statusUnset:()=>void,\n} {\n    const userRewardsMap:UserRewardsStates = useSelector((state: any) => state.userRewardsMap)\n    const dispatch = useDispatch();\n\n    const updateUserRewards = () => {\n        dispatch(userRewardsMapSlice.actions.getUserRewards(undefined))\n    }\n    const statusUnset = ()=>{\n        dispatch(userRewardsMapSlice.actions.statusUnset(undefined))\n    }\n    return {\n        ...userRewardsMap,\n        statusUnset,\n        updateUserRewards,\n    }\n\n}\n","import { createSlice, PayloadAction, Slice } from '@reduxjs/toolkit'\nimport { ENV, System, SystemStatus } from './interface';\nimport { STATUS } from '../constant';\n\nconst initialState: SystemStatus = {\n    env: ENV.PROD,\n    chainId: 'unknown',\n    // network:'NONETWORK',\n    baseURL: '',\n    socketURL: '',\n    faitPrices: undefined,\n    gasPrice: undefined,\n    forex: undefined,\n    __timer__: -1,\n    status: 'UNSET',\n    errorMessage: null,\n\n    exchangeInfo: undefined,\n\n    topics: [],\n}\nconst systemSlice: Slice<SystemStatus> = createSlice({\n    name: 'system',\n    initialState,\n    reducers: {\n\n        updateSystem(state, action: PayloadAction<System<{[key:string]:any}>>) {\n            state.chainId = action.payload.chainId\n            state.status = STATUS.PENDING\n        },\n        updateSocketURL(state, action:PayloadAction<{socketURL:string}>) {\n            state.socketURL =  action.payload.socketURL;\n        },\n        updateRealTimeObj(state, action: PayloadAction<Partial<{ faitPrices: any, gasPrice: number, forex: number }>>) {\n            const {forex, faitPrices, gasPrice} = action.payload;\n            if (forex) {\n                state.forex = forex\n            }\n            if (faitPrices) {\n                state.faitPrices = faitPrices\n            }\n            if (gasPrice) {\n                state.gasPrice = gasPrice\n            }\n\n\n            // state = {\n            //     ...state.system,\n            //     forex: forex?,\n            //     faitPrices: action.payload.faitPrices ? action.payload.faitPrices : state.system.faitPrices,\n            //     gasPrice: action.payload.gasPrice ? action.payload.gasPrice : state.system.gasPrice,\n            // };\n\n        },\n        getSystemStatus(state, action: PayloadAction<Partial<SystemStatus>>) {\n\n            // @ts-ignore\n            if (action.error) {\n                state.status = STATUS.ERROR\n                // @ts-ignore\n                state.errorMessage = action.error\n            }\n            const {env, baseURL, faitPrices, gasPrice, forex, exchangeInfo, __timer__} = action.payload;\n            if (env) {\n                state.env = env\n            }\n            if (baseURL) {\n                state.baseURL = baseURL\n            }\n            if (faitPrices) {\n                state.faitPrices = faitPrices\n            }\n            if (gasPrice) {\n                state.gasPrice = gasPrice\n            }\n            if (forex) {\n                state.forex = forex\n            }\n            \n            if (exchangeInfo) {\n                state.exchangeInfo = exchangeInfo\n            }\n\n            if (__timer__) {\n                state.__timer__ = __timer__\n            }\n            state.status = STATUS.DONE\n        },\n        statusUnset: state => {\n            state.status = STATUS.UNSET\n        }\n\n    },\n});\nexport { systemSlice };\nexport const {updateSystem, setTopics, getSystemStatus, statusUnset, updateRealTimeObj, updateSocketURL} = systemSlice.actions;","import { StateBase } from '../interface';\nimport { ChainId, ExchangeInfo } from 'loopring-sdk';\n\nexport enum ENV {\n    DEV='DEV',\n    UAT='UAT',\n    PROD='PROD',\n}\nexport enum NETWORKEXTEND {\n    NONETWORK = 'unknown'\n}\nexport type NETWORK = NETWORKEXTEND | ChainId\n\n\nexport type System<C extends {[key:string]:any}> = {\n    env:keyof typeof ENV,\n    chainId: 1|5|'unknown'\n    // network: keyof typeof NETWORK,\n    socketURL:string,\n    baseURL: string,\n    faitPrices:{ [k in keyof C]:{price:any,[key:string]:any}} | undefined,\n    gasPrice:number | undefined,\n    forex:number | undefined,\n    exchangeInfo: ExchangeInfo | undefined,\n\n}\n\nexport type SystemStatus = System<{[key:string]:any}> & {\n    // system:System | {}\n    __timer__:NodeJS.Timeout | -1\n    topics: any[]\n}  & StateBase\n\n\n\n","import { createSlice, PayloadAction, Slice } from '@reduxjs/toolkit'\nimport { WalletLayer1Map, WalletLayer1States } from './interface';\nimport { STATUS } from '../constant';\n\n\nconst initialState:WalletLayer1States  = {\n    walletLayer1:undefined,\n    status:'UNSET',\n    errorMessage:null,\n}\nconst walletLayer1Slice:Slice = createSlice({\n    name: 'walletLayer1',\n    initialState,\n    reducers: {\n        updateWalletLayer1(state, action:PayloadAction<string | undefined>) {\n            state.status = STATUS.PENDING\n        },\n        reset(state, action:PayloadAction<string | undefined>) {\n            state.walletLayer1 = undefined;\n            state.status = STATUS.UNSET;\n        },\n        getWalletLayer1Status(state, action: PayloadAction<{ walletLayer1:WalletLayer1Map<object> }>) {\n            // @ts-ignore\n            if (action.error) {\n                state.status =  STATUS.ERROR\n                // @ts-ignore\n                state.errorMessage = action.error\n            }\n            state.walletLayer1 = {...action.payload.walletLayer1};\n            state.status = STATUS.DONE\n        },\n        statusUnset: state => {\n            state.status = STATUS.UNSET\n        }\n    },\n});\nexport { walletLayer1Slice };\nexport const { updateWalletLayer1, getWalletLayer1Status,statusUnset,reset } = walletLayer1Slice.actions\n","import { createSlice, PayloadAction, Slice } from '@reduxjs/toolkit'\nimport { WalletLayer2Map, WalletLayer2States } from './interface';\nimport { STATUS } from '../constant';\n\n\nconst initialState:WalletLayer2States  = {\n    walletLayer2:undefined,\n    status:'UNSET',\n    errorMessage:null,\n}\nconst walletLayer2Slice:Slice = createSlice({\n    name: 'walletLayer2S',\n    initialState,\n    reducers: {\n        updateWalletLayer2(state, action:PayloadAction<string | undefined>) {\n            state.status = STATUS.PENDING\n        },\n        reset(state, action:PayloadAction<string | undefined>) {\n            state.walletLayer2 = undefined;\n            state.status = STATUS.UNSET;\n        },\n        getWalletLayer2Status(state, action: PayloadAction<{ walletLayer2:WalletLayer2Map<object> }>) {\n            // @ts-ignore\n            if (action.error) {\n                state.status =  STATUS.ERROR\n                // @ts-ignore\n                state.errorMessage = action.error\n            }\n            state.walletLayer2 = {...action.payload.walletLayer2};\n            state.status = STATUS.DONE\n        },\n        statusUnset: state => {\n            state.status = STATUS.UNSET\n        }\n    },\n});\nexport { walletLayer2Slice };\nexport const {  updateWalletLayer2,getWalletLayer2Status,statusUnset,reset } = walletLayer2Slice.actions\n","import { createSlice, PayloadAction, Slice } from '@reduxjs/toolkit'\nimport {  UserRewardsStates } from './interface';\nimport { STATUS } from '../constant';\n\nconst initialState:UserRewardsStates = {\n    userRewardsMap:undefined,\n    status:'UNSET',\n    errorMessage:null,\n    __timer__:-1,\n}\nconst userRewardsMapSlice:Slice<UserRewardsStates> = createSlice({\n    name: 'userRewardsMap',\n    initialState,\n    reducers: {\n        getUserRewards(state, action:PayloadAction<undefined>) {\n            state.status = STATUS.PENDING\n        },\n        getUserRewardsStatus(state, action: PayloadAction<UserRewardsStates>) {\n            // @ts-ignore\n            if (action.error) {\n                state.status =  STATUS.ERROR\n                // @ts-ignore\n                state.errorMessage = action.error\n            }\n            state.userRewardsMap = {...state.userRewardsMap,...action.payload.userRewardsMap};\n            if(action.payload.__timer__){\n                state.__timer__  =  action.payload.__timer__\n            }\n            state.status = STATUS.DONE\n        },\n        statusUnset: state => {\n            state.status = STATUS.UNSET\n        }\n\n    },\n});\nexport { userRewardsMapSlice };\nexport const { getUserRewards, getUserRewardsStatus, statusUnset } = userRewardsMapSlice.actions;","import { createSlice, PayloadAction, Slice } from '@reduxjs/toolkit'\nimport { AmmActivityMapStates } from './interface';\nimport { STATUS } from '../../constant';\n\n\nconst initialState:Required<AmmActivityMapStates>  = {\n    ammActivityMap:{},\n    status:'UNSET',\n    errorMessage:null,\n}\nconst ammActivityMapSlice:Slice = createSlice({\n    name: 'ammActivityMap',\n    initialState,\n    reducers: {\n        getAmmActivityMap(state, action:PayloadAction<string | undefined>) {\n            state.status = STATUS.PENDING\n        },\n        getAmmActivityMapStatus(state, action: PayloadAction<AmmActivityMapStates>) {\n            // @ts-ignore\n            if (action.error) {\n                state.status =  STATUS.ERROR\n                // @ts-ignore\n                state.errorMessage = action.error\n            }\n            state.ammActivityMap = {...action.payload.ammActivityMap};\n            state.status = STATUS.DONE\n        },\n        statusUnset: state => {\n            state.status = STATUS.UNSET\n        }\n\n    },\n});\nexport { ammActivityMapSlice };\nexport const { getAmmActivityMap, getAmmActivityMapStatus, statusUnset } = ammActivityMapSlice.actions\n","import { createSlice, PayloadAction, Slice } from '@reduxjs/toolkit'\nimport { GetTokenMapParams, TokenMapStates } from './interface';\nimport { STATUS } from '../constant';\n\nconst initialState: TokenMapStates<object> = {\n    coinMap: {},\n    addressIndex: undefined,\n    tokenMap: undefined,\n    marketMap: undefined,\n    idIndex: undefined,\n    status: 'UNSET',\n    errorMessage: null,\n}\nconst tokenMapSlice: Slice<TokenMapStates<object>> = createSlice({\n    name: 'tokenMap',\n    initialState,\n    reducers: {\n        getTokenMap(state, action: PayloadAction<GetTokenMapParams<any>>) {\n            state.status = STATUS.PENDING\n        },\n        getTokenMapStatus(state, action: PayloadAction<TokenMapStates<object>>) {\n            // @ts-ignore      console.log(action.type)\n            if (action.error) {\n                state.status = STATUS.ERROR\n                // @ts-ignore\n                state.errorMessage = action.error\n            }\n\n            const {tokenMap, marketMap, addressIndex, idIndex, coinMap, marketArray, marketCoins} = action.payload;\n            if (tokenMap) { state.tokenMap = tokenMap }\n            if (marketMap) { state.marketMap = marketMap }\n            if (addressIndex) { state.addressIndex = addressIndex }\n            if (idIndex) { state.idIndex = idIndex }\n            if (coinMap) { state.coinMap = coinMap }\n            if (marketArray) { state.marketArray = marketArray }\n            if (marketCoins)  { state.marketCoins = marketCoins }\n            // if (tokenPairsMap) {state.tokenPairsMap = tokenPairsMap }\n            state.status = STATUS.DONE;\n        },\n        // getTokenPairMap(state, action: PayloadAction<{tokenPairs: TokenPairs }>) {\n        //     const {tokenPairs} = action.payload;\n        //     const tokenPairsMap =  Reflect.ownKeys(tokenPairs).reduce((prev,key)=>{\n        //         // @ts-ignore\n        //         return prev[key as string] =  tokenPairs[key as string].tokenList\n        //     }, {} )\n        //     if (tokenPairsMap) {state.tokenPairsMap = tokenPairsMap }\n        //     // state.status = STATUS.PENDING\n        // },\n        statusUnset: state => {\n            state.status = STATUS.UNSET\n        }\n\n    },\n});\nexport { tokenMapSlice };\nexport const {getTokenMap, getTokenMapStatus,getTokenPairMap, statusUnset} = tokenMapSlice.actions;","import {\n    AmmPoolActivityRule,\n    AmmPoolActivityStatus,\n    AmmPoolSnapshot,\n    LoopringMap,\n    TickerData,\n    toBig,\n} from 'loopring-sdk';\nimport { AmmActivity, AmmCardProps } from '@loopring-web/component-lib/static-resource';\nimport store from '../../stores';\nimport { deepClone } from '../../utils/obj_tools';\nimport { AmmUserReward, AmmUserRewardMap } from 'loopring-sdk/dist/defs/loopring_defs';\nimport BigNumber from 'bignumber.js';\nimport { MyAmmLP } from '@loopring-web/component-lib/src/static-resource';\nimport { volumeToCount, volumeToCountAsBigNumber } from './volumeToCount';\nimport { coinMap } from '@loopring-web/component-lib/static';\nimport { AmmDetailStore } from '../../stores/Amm/AmmMap';\nimport { WalletMapExtend } from './makeWallet';\n\nexport type AmmActivityViewMap<R, I> = {\n    [key in keyof R]?: AmmActivity<I>[] | undefined\n}\nexport const makeUIAmmActivityMap = <R extends { [ key: string ]: any }, I extends { [ key: string ]: any }>\n({ammActivityMap, type, ammPoolActivityStatus}: {\n    ammActivityMap: LoopringMap<LoopringMap<AmmPoolActivityRule[ ]>> | undefined,\n    type: 'AMM_MINING' | 'SWAP_VOLUME_RANKING',\n    ammPoolActivityStatus: AmmPoolActivityStatus[]\n}, myReward: AmmUserRewardMap | undefined):\n    Array<AmmCardProps<I>> => {\n    const {coinMap, tokenMap, idIndex} = store.getState().tokenMap\n    let ammActivityViewMap: AmmActivityViewMap<R, I> = {}\n    if (ammActivityMap && ammActivityMap[ type ]) {\n\n\n        // @ts-ignore\n        ammPoolActivityStatus.forEach((status: AmmPoolActivityStatus) => {\n\n            if (ammActivityMap[ type ][ status ]) {\n                // @ts-ignore\n                ammActivityMap[ type ][ status ].reduce((prev: AmmActivityViewMap<R, I>, ammPoolActivityRule: AmmPoolActivityRule) => {\n\n                    if (coinMap && ammPoolActivityRule.awardRules[ 0 ] && idIndex && tokenMap) {\n\n                        const symbol = idIndex[ ammPoolActivityRule.awardRules[ 0 ].tokenId as any ]\n\n                        // @ts-ignore\n                        const item = {\n                            // @ts-ignore\n                            rewardToken: coinMap[ symbol ],\n                            myRewards: status === AmmPoolActivityStatus.InProgress && myReward && myReward[ ammPoolActivityRule.market ] ?\n                                volumeToCount(symbol, myReward[ ammPoolActivityRule.market ]?.currentRewards[ 0 ].volume) : 0,\n                            duration: {\n                                from: new Date(ammPoolActivityRule?.rangeFrom),\n                                to: new Date(ammPoolActivityRule?.rangeTo),\n                            },\n                            isPass: AmmPoolActivityStatus.EndOfGame === status,\n                        }\n                        if (prev[ ammPoolActivityRule.market ]) {\n                            // @ts-ignore\n                            prev[ ammPoolActivityRule.market ].push(item);\n                        } else {\n                            // @ts-ignore\n                            prev[ ammPoolActivityRule.market ] = [item];\n                        }\n\n\n                        // return prev;\n                    }\n                    return prev;\n                }, ammActivityViewMap)\n\n            }\n        })\n    }\n    const resultArray = makeAsCard(ammActivityViewMap)\n    // console.log(resultArray)\n    return resultArray;\n\n\n}\nconst makeAsCard = <R extends { [ key: string ]: any }, I extends { [ key: string ]: any }>\n(ammActivityViewMap: AmmActivityViewMap<R, I> | undefined, myReward?: any): Array<AmmCardProps<I>> => {\n    const {coinMap} = store.getState().tokenMap\n    const {ammMap} = store.getState().amm.ammMap\n    try {\n        if (ammActivityViewMap && coinMap) {\n            // @ts-ignore\n            return Reflect.ownKeys(ammActivityViewMap).reduce((prev: Array<AmmCardProps<I>>, key: string) => {\n                const _ammInfo = ammMap[ key as string ]\n                if (_ammInfo && _ammInfo.coinA && coinMap && ammActivityViewMap[ key ]) {\n\n                    // @ts-ignore\n                    const itemArray = ammActivityViewMap[ key ].map((item) => {\n                        return {\n                            ...deepClone(_ammInfo),\n                            // @ts-ignore\n                            coinAInfo: coinMap[ _ammInfo.coinA ],\n                            // @ts-ignore\n                            coinBInfo: coinMap[ _ammInfo.coinB ],\n                            activity: item,\n                        }\n                    })\n                    prev = [...prev, ...itemArray]\n                }\n                return prev;\n            }, [] as Array<AmmCardProps<I>>) as Array<AmmCardProps<I>>\n        } else {\n            return [] as Array<AmmCardProps<I>>\n        }\n    } catch (error) {\n        console.log(error)\n        return []\n    }\n}\ntype Value = undefined | number;\nexport type SummaryMyAmm = {\n    rewardDollar: Value,\n    rewardYuan: Value,\n    feeDollar: Value,\n    feeYuan: Value,\n}\nexport const makeSummaryMyAmm = <C extends { [ key: string ]: any }>({\n                                                                         userRewardsMap\n                                                                     }: {\n    userRewardsMap: LoopringMap<AmmUserReward> | undefined\n}):\n    SummaryMyAmm | undefined => {\n    const {coinMap, idIndex, tokenMap} = store.getState().tokenMap;\n    const {faitPrices, forex} = store.getState().system;\n    if (userRewardsMap && idIndex && coinMap && tokenMap && faitPrices && forex) {\n        let summaryMyAmm = Object.keys(userRewardsMap).reduce((prev, key) => {\n            if (/AMM-/i.test(key)) {\n                // @ts-ignore\n                const [, coinA, coinB] = key.match(/AMM-(\\w+)-(\\w+)/i);\n                const ammUserReward = userRewardsMap[ key ]\n                const {\n                    rewardDollar,\n                    rewardYuan,\n                    feeDollar,\n                    feeYuan\n                } = getOneRewardInfo({coinB, coinA, ammUserReward, idIndex, faitPrices, forex})\n                prev.rewardDollar = rewardDollar ? toBig(rewardDollar).plus(prev.rewardDollar).toNumber() : 0;\n                prev.rewardYuan = rewardYuan ? toBig(rewardYuan).plus(prev.rewardYuan).toNumber() : 0;\n                prev.feeDollar = feeDollar ? toBig(feeDollar).plus(prev.feeDollar).toNumber() : 0;\n                prev.feeYuan = feeYuan ? toBig(feeYuan).plus(prev.feeYuan).toNumber() : 0;\n            }\n            return prev\n        }, {\n            rewardDollar: 0,\n            rewardYuan: 0,\n            feeDollar: 0,\n            feeYuan: 0\n        })\n\n        return summaryMyAmm\n    }\n    return undefined\n}\nconst getOneRewardInfo = <C>({\n                                 coinA,\n                                 coinB,\n                                 ammUserReward,\n                                 idIndex,\n                                 faitPrices,\n                                 forex,\n                                 walletMap,\n                                 snapShotData\n                             }: any) => {\n    let rewardToken, rewardToken2, feeA, feeB, feeDollar, feeYuan, reward, reward2, rewardDollar, rewardYuan;\n    if (ammUserReward) {\n        rewardToken = ammUserReward.currentRewards[ 0 ] ? idIndex[ ammUserReward.currentRewards[ 0 ].tokenId as number ] : undefined\n        rewardToken2 = ammUserReward.currentRewards[ 1 ] ? idIndex[ ammUserReward.currentRewards[ 1 ].tokenId as number ] : undefined\n        feeA = ammUserReward ? volumeToCountAsBigNumber(coinA, ammUserReward.feeRewards[ 0 ]) : toBig(0);\n        feeB = ammUserReward ? volumeToCountAsBigNumber(coinB, ammUserReward.feeRewards[ 1 ]) : toBig(0);\n        feeA = feeA ? feeA : toBig(0);\n        feeB = feeB ? feeB : toBig(0);\n        feeDollar = feeA.times(faitPrices[ coinA ].price).plus(feeB.times(faitPrices[ coinB ].price))\n        feeYuan = feeDollar.times(forex);\n        reward = rewardToken ? volumeToCountAsBigNumber(rewardToken, ammUserReward.currentRewards[ 0 ].volume) as BigNumber : toBig(0);\n        reward2 = rewardToken2 ? volumeToCountAsBigNumber(rewardToken2, ammUserReward.currentRewards[ 1 ].volume) as BigNumber : toBig(0);\n        reward = reward ? reward : toBig(0);\n        reward2 = reward2 ? reward2 : toBig(0);\n        rewardDollar = reward.times(rewardToken ? faitPrices[ rewardToken ].price : 1).plus(reward2.times(rewardToken2 ? faitPrices[ rewardToken2 ].price : 1));\n        rewardYuan = rewardDollar.times(forex);\n    }\n    let balanceA, balanceB, balanceDollar, balanceYuan;\n    if (walletMap && walletMap[ 'LP-' + coinA + '-' + coinB ] && snapShotData) {\n        // @ts-ignore\n        const ratio = new BigNumber(walletMap[ 'LP-' + coinA + '-' + coinB ].count).div(snapShotData.ammPoolsBalance.lp.volume);\n        balanceA = ratio.times(volumeToCountAsBigNumber(coinA, snapShotData.ammPoolsBalance.pooled[ 0 ].volume) || 1);\n        balanceB = ratio.times(volumeToCountAsBigNumber(coinB, snapShotData.ammPoolsBalance.pooled[ 1 ].volume) || 1);\n        // @ts-ignore\n        balanceDollar = balanceA.times(faitPrices[ coinA ].price).plus(balanceB.times(faitPrices[ coinB ].price))\n        balanceYuan = balanceDollar.times(forex)\n    }\n\n    return {\n        feeA: feeA ? feeA.toNumber() : undefined,\n        feeB: feeB ? feeB.toNumber() : undefined,\n        reward: reward ? reward.toNumber() : undefined,\n        rewardToken: rewardToken ? coinMap[ rewardToken ] : undefined,\n        reward2: reward2 ? reward2.toNumber() : undefined,\n        rewardToken2: rewardToken2 ? coinMap[ rewardToken2 ] : undefined,\n        rewardDollar: rewardDollar ? rewardDollar.toNumber() : undefined,\n        rewardYuan: rewardYuan ? rewardYuan.toNumber() : undefined,\n        feeDollar: feeDollar ? feeDollar.toNumber() : undefined,\n        feeYuan: feeYuan ? feeYuan.toNumber() : undefined,\n        ammDetail: {\n            coinAInfo: coinMap[ coinA ],\n            coinBInfo: coinMap[ coinB ]\n        },\n        balanceA: balanceA ? balanceA.toNumber() : undefined,\n        balanceB: balanceB ? balanceB.toNumber() : undefined,\n        balanceDollar: balanceDollar ? balanceDollar.toNumber() : undefined,\n        balanceYuan: balanceYuan ? balanceYuan.toNumber() : undefined,\n    } as MyAmmLP<C>\n}\n\nexport const makeMyAmmWithSnapshot = <C extends { [ key: string ]: any }>(market: any, _walletMap: WalletMapExtend<C> | undefined, ammUserRewardMap: LoopringMap<AmmUserReward> | undefined, snapShotData?: {\n    tickerData?: TickerData | undefined\n    ammPoolsBalance: AmmPoolSnapshot | undefined\n} | undefined) => {\n    const {coinMap, idIndex, tokenMap} = store.getState().tokenMap;\n    const {faitPrices, forex} = store.getState().system;\n    const [, coinA, coinB] = market.match(/(\\w+)-(\\w+)/i);\n    let _myAmm: Partial<MyAmmLP<C>> = {};\n    if (ammUserRewardMap && ammUserRewardMap[ 'AMM-' + market ]\n        && snapShotData && snapShotData.ammPoolsBalance) {\n        const ammUserReward: AmmUserReward = ammUserRewardMap[ 'AMM-' + market ];\n        // @ts-ignore\n        if (coinMap && tokenMap && idIndex && forex && faitPrices) {\n            _myAmm = getOneRewardInfo({\n                coinA, coinB, ammUserReward,\n                idIndex, faitPrices, forex, walletMap: _walletMap, snapShotData\n            })\n\n            return _myAmm as MyAmmLP<C>\n        }\n    }\n    return {\n        feeA: undefined,\n        feeB: undefined,\n        feeDollar: undefined,\n        feeYuan: undefined,\n        reward: undefined,\n        rewardToken: undefined as any,\n        balanceA: undefined,\n        balanceB: undefined,\n        balanceYuan: undefined,\n        balanceDollar: undefined,\n    }\n}\n\nexport const makeMyAmmWithStat = <C extends { [ key: string ]: any }>\n(market: any,\n _walletMap: WalletMapExtend<C> | undefined,\n ammUserRewardMap: LoopringMap<AmmUserReward> | undefined,\n ammDetail: AmmDetailStore<C>) => {\n    const {coinMap, idIndex, tokenMap} = store.getState().tokenMap;\n    const {faitPrices, forex} = store.getState().system;\n    const [, coinA, coinB] = market.match(/(\\w+)-(\\w+)/i);\n    let _myAmm = {};\n    let balanceA, balanceB, balanceDollar, balanceYuan;\n    if (_walletMap && _walletMap[ 'LP-' + coinA + '-' + coinB ] && forex) {\n        // @ts-ignore\n        const ratio = new BigNumber(_walletMap[ 'LP-' + coinA + '-' + coinB ].count).div(ammDetail.totalLPToken);\n        balanceA = ratio.times(volumeToCountAsBigNumber(coinA, ammDetail.totalA ? ammDetail.totalA : 0) || 1);\n        balanceB = ratio.times(volumeToCountAsBigNumber(coinB, ammDetail.totalB ? ammDetail.totalB : 0) || 1);\n        // @ts-ignore\n        balanceDollar = balanceA.times(faitPrices[ coinA ].price).plus(balanceB.times(faitPrices[ coinB ].price))\n        balanceYuan = balanceDollar.times(forex);\n        _myAmm = {\n            // ...ammDetail,\n            balanceA: balanceA.toNumber(),\n            balanceB: balanceB.toNumber(),\n            balanceYuan: balanceYuan.toNumber(),\n            balanceDollar: balanceDollar.toNumber(),\n        }\n    }\n    if (ammUserRewardMap && ammUserRewardMap[ 'AMM-' + market ]\n        && ammDetail && forex) {\n        const ammUserReward: AmmUserReward = ammUserRewardMap[ 'AMM-' + market ];\n        let rewardToken, rewardToken2, feeA, feeB, feeDollar, feeYuan, reward, reward2, rewardDollar, rewardYuan;\n\n        if (coinMap && tokenMap && idIndex && forex && faitPrices && ammUserReward) {\n            rewardToken = ammUserReward.currentRewards[ 0 ] ? idIndex[ ammUserReward.currentRewards[ 0 ].tokenId as number ] : undefined\n            rewardToken2 = ammUserReward.currentRewards[ 1 ] ? idIndex[ ammUserReward.currentRewards[ 1 ].tokenId as number ] : undefined\n            feeA = ammUserReward ? volumeToCountAsBigNumber(coinA, ammUserReward.feeRewards[ 0 ]) : toBig(0);\n            feeB = ammUserReward ? volumeToCountAsBigNumber(coinB, ammUserReward.feeRewards[ 1 ]) : toBig(0);\n            feeA = feeA ? feeA : toBig(0);\n            feeB = feeB ? feeB : toBig(0);\n            feeDollar = feeA.times(faitPrices[ coinA ].price).plus(feeB.times(faitPrices[ coinB ].price))\n            feeYuan = feeDollar.times(forex);\n            reward = rewardToken ? volumeToCountAsBigNumber(rewardToken, ammUserReward.currentRewards[ 0 ].volume) as BigNumber : toBig(0);\n            reward2 = rewardToken2 ? volumeToCountAsBigNumber(rewardToken2, ammUserReward.currentRewards[ 1 ].volume) as BigNumber : toBig(0);\n            reward = reward ? reward : toBig(0);\n            reward2 = reward2 ? reward2 : toBig(0);\n            rewardDollar = reward.times(rewardToken ? faitPrices[ rewardToken ].price : 1).plus(reward2.times(rewardToken2 ? faitPrices[ rewardToken2 ].price : 1));\n            rewardYuan = rewardDollar.times(forex);\n            _myAmm = {\n                ..._myAmm,\n                feeA: feeA ? feeA.toNumber() : undefined,\n                feeB: feeB ? feeB.toNumber() : undefined,\n                reward: reward ? reward.toNumber() : undefined,\n                // @ts-ignore\n                rewardToken: rewardToken ? coinMap[ rewardToken ] : undefined,\n                reward2: reward2 ? reward2.toNumber() : undefined,\n                // @ts-ignore\n                rewardToken2: rewardToken2 ? coinMap[ rewardToken2 ] : undefined,\n                rewardDollar: rewardDollar ? rewardDollar.toNumber() : undefined,\n                rewardYuan: rewardYuan ? rewardYuan.toNumber() : undefined,\n                feeDollar: feeDollar ? feeDollar.toNumber() : undefined,\n                feeYuan: feeYuan ? feeYuan.toNumber() : undefined,\n                ammDetail: {\n                    // @ts-ignore\n                    coinAInfo: coinA ? coinMap[ coinA ] : undefined,\n                    // @ts-ignore\n                    coinBInfo: coinB ? coinMap[ coinB ] : undefined,\n                },\n            }\n\n        }\n        return _myAmm as MyAmmLP<C>\n    }\n    return {\n        feeA: undefined,\n        feeB: undefined,\n        feeDollar: undefined,\n        feeYuan: undefined,\n        reward: undefined,\n        rewardToken: undefined as any,\n        balanceA: undefined,\n        balanceB: undefined,\n        balanceYuan: undefined,\n        balanceDollar: undefined,\n    }\n}\n\n// if (ammUserReward) {\n//     const symbol = ammUserReward.currentRewards[ 0 ] ? idIndex[ ammUserReward.currentRewards[ 0 ].tokenId as number ] : undefined\n//     const symbol2 = ammUserReward.currentRewards[ 1 ] ? idIndex[ ammUserReward.currentRewards[ 1 ].tokenId as number ] : undefined\n//\n//     _myAmm = {\n//         ..._myAmm,\n//         feeA: ammUserReward ? volumeToCount(coinA, ammUserReward.feeRewards[ 0 ]) : 0,//Number(ammUserReward.feeRewards[ 0 ]) : 0,\n//         feeB: ammUserReward ? volumeToCount(coinB, ammUserReward.feeRewards[ 1 ]) : 0,//Number(ammUserReward.feeRewards[ 1 ]) : 0,\n//         reward: symbol ? volumeToCount(symbol, ammUserReward.currentRewards[ 0 ].volume) : 0,\n//         // @ts-ignore\n//         rewardToken: symbol ? coinMap[ symbol ] : undefined,\n//         reward2: symbol2 ? volumeToCount(symbol2, ammUserReward.currentRewards[ 1 ].volume) : 0,\n//         // @ts-ignore\n//         rewardToken2: symbol2 ? coinMap[ symbol2 ] : undefined,\n//\n//\n//     }\n//     _myAmm.feeDollar = _myAmm.feeA && _myAmm.feeA * faitPrices[ coinA ].price;\n//     _myAmm.feeDollar = _myAmm.feeB && _myAmm.feeB * faitPrices[ coinB ].price;\n// }\n//\n//\n// if (_walletMap && _walletMap[ 'LP-' + market ]) {\n//     // @ts-ignore\n//     const ratio = new BigNumber(_walletMap[ 'LP-' + market ].detail.total).div(snapShotData.ammPoolsBalance.lp.volume);\n//     _myAmm = {\n//         ..._myAmm,  //snapShotData.ammPoolsBalance.pooled[ 0 ].volume).div(BIG10.pow(tokenMap[coinA].decimals)\n//         balanceA: ratio.times(volumeToCountAsBigNumber(coinA, snapShotData.ammPoolsBalance.pooled[ 0 ].volume) || 1).toNumber(),\n//         balanceB: ratio.times(volumeToCountAsBigNumber(coinB, snapShotData.ammPoolsBalance.pooled[ 1 ].volume) || 1).toNumber(),\n//     }\n//     // @ts-ignore\n//     _myAmm.balanceDollar = _myAmm.balanceA * faitPrices[ coinA ].price + _myAmm.balanceB * faitPrices[ coinB ].price\n//     _myAmm.balanceYuan = _myAmm.balanceDollar * forex\n// }\n// export const getAmmPoolGameUserRanks = ():Promise<AmmUserRewardMap> => {\n//     const {accountId} = store.getState().account\n//     //https://api3.loopring.io/api/v2/amm/user/rewards?owner=10917\n//     if(LoopringAPI.ammpoolAPI){\n//         return LoopringAPI.ammpoolAPI.getAmmPoolUserRewards({owner:accountId}).then(({ammUserRewardMap}:any)=>{\n//               return ammUserRewardMap  as AmmUserRewardMap\n//         })\n//     }else{\n//         return  Promise.resolve({} as AmmUserRewardMap);\n//     }\n//\n//     // return LoopringAPI.ammpoolAPI?.getUserAmmPoolTxs({accountId}, apiKey).then(({userAmmPoolTxs}) => {\n//     //     return userAmmPoolTxs\n//     // })\n//     // if(LoopringAPI.ammpoolAPI)   {\n//     //    let promiseList =  marketKeys.map((key)=>{\n//     //         // @ts-ignore\n//     //         return LoopringAPI.ammpoolAPI.getAmmPoolGameUserRank({owner:accAddr,ammPoolMarket:'key'},apiKey)\n//     //     })\n//     //     return Promise.all(promiseList).then(\n//     //         (array:any[])=>{\n//     //\n//     //           return  array.reduce((prev,item:{userRankList:GameRankInfo[]},index)=>{\n//     //                 const market = marketKeys[index]\n//     //                 prev[ market] = item.userRankList[0]\n//     //                 return item.userRankList[0]\n//     //             },{})\n//     //\n//     //         }\n//     //     )\n//     // }else{\n//     //   return  Promise.resolve({});\n//     // }\n//\n//\n//\n//\n// }\n//\n// {\n//     userRankList: GameRankInfo[];\n//     raw_data: any;\n// }\n","import { useDispatch, useSelector } from 'react-redux'\nimport { systemSlice } from './reducer';\nimport { System, SystemStatus } from './interface';\n\nexport function useSystem(): SystemStatus & {\n    updateSystem:(system:Partial<System< {[key:string]:any}>>)=>void,\n    statusUnset:()=>void,\n} {\n    const system:SystemStatus = useSelector((state: any) => state.system)\n    const dispatch = useDispatch();\n    const updateSystem = (system:Partial<System<{[key:string]:any}>>) => {\n        dispatch(systemSlice.actions.updateSystem(system))\n    }\n    const statusUnset = ()=>{\n        dispatch(systemSlice.actions.statusUnset(undefined))\n    }\n    return {\n        ...system,\n        statusUnset,\n        updateSystem,\n    }\n\n}\n","import * as fm from 'loopring-sdk';\nimport store from '../../stores';\nimport { TradeTypes,CoinMap } from '@loopring-web/component-lib/static-resource';\nimport { ammpoolAPI, LoopringAPI, userAPI } from '../../stores/apis/api';\nimport { AmmRecordRow, AmmTradeType,RawDataTradeItem } from '@loopring-web/component-lib';\nimport { AmmPoolTx, BillType, AmmTxType, UserAmmPoolTx,getBaseQuote, MarketTradeInfo, Side, UserTrade } from 'loopring-sdk';\nimport { volumeToCount, volumeToCountAsBigNumber } from './volumeToCount';\n\nexport const getUserTrades = (marketKey: any) => {\n    const userApi = userAPI();\n    const {accountId, apiKey} = store.getState().account\n    return userApi.getUserTrades({accountId}, apiKey).then((response: {\n        totalNum: any;\n        userTrades: UserTrade[];\n        raw_data: any;\n    }) => {\n        return response.userTrades\n    })\n}\nexport const makeMarketArray = (coinKey: any, marketTrades: MarketTradeInfo[]): RawDataTradeItem[] => {\n\n    let tradeArray: Array<Partial<RawDataTradeItem>> = []\n\n    marketTrades.forEach((item: MarketTradeInfo) => {\n        try {\n            const {base, quote} = getBaseQuote(item.market)\n            const {forex} = store.getState().system\n            const {currency} = store.getState().settings\n            const {tokenMap} = store.getState().tokenMap\n            if (tokenMap) {\n               // const baseToken = tokenMap[ base as string ]\n               // const quoteToken = tokenMap[ quote as string ]\n\n                // @ts-ignore\n                tradeArray.push({\n                    side: item.side === Side.Sell ? TradeTypes.Sell : TradeTypes.Buy,\n                    amount: {\n                        from: {\n                            key: base as string,\n                            value: base ? volumeToCount(base, item.volume) : undefined\n                        },\n                        to: {\n                            key: quote as string,\n                            value: base ? volumeToCountAsBigNumber(base, item.volume)?.times(item.price).toNumber():undefined\n                        },\n\n                    },\n                    price: {\n                        key: '',\n                        value: fm.toBig(item.price).toNumber(),\n                    },\n                    fee: {\n                        key: '',\n                        value: quote? volumeToCount(quote, item.fee):undefined, //fm.toBig(item.fee).div(BIG10.pow(quoteToken.decimals)).toNumber(),\n                    },\n                    time: parseInt(item.tradeTime.toString()),\n                })\n            }\n        } catch (error) {\n            //CATCHERROR:\n            console.log(error)\n            // new CustomError()\n        }\n\n    })\n    // console.log('tradeArray:', tradeArray)\n    return tradeArray as RawDataTradeItem[];\n\n}\n\nexport const getUserAmmTransaction = () => {\n    const {accountId, apiKey} = store.getState().account\n    return LoopringAPI.ammpoolAPI?.getUserAmmPoolTxs({accountId}, apiKey).then(({userAmmPoolTxs}) => {\n        return userAmmPoolTxs\n    })\n    // }\n\n}\n\n\nexport const makeMyAmmMarketArray = <C extends { [ key: string ]:any }>(coinKey: string|undefined, marketTransaction: UserAmmPoolTx[]): AmmRecordRow<C>[] => {\n\n    let tradeArray: Array<Partial<AmmRecordRow<C>>> = [];\n    let {tokenMap, coinMap, idIndex} = store.getState().tokenMap;\n    marketTransaction.forEach((item: UserAmmPoolTx) => {\n        try {\n           // const {base, quote} = getBaseQuote(coinKey)\n            const {forex} = store.getState().system\n            // const {currency} = store.getState().settings\n            if (coinMap && tokenMap && idIndex\n                && !(coinKey && tokenMap['LP-'+coinKey].tokenId !== item.lpToken.tokenId) ) {\n                // @ts-ignore\n                const [, coinA, coinB] = idIndex[item.lpToken.tokenId].match(/LP-(\\w+)-(\\w+)/i);\n                 \n                tradeArray.push({\n                        type: item.txType === AmmTxType.JOIN ? AmmTradeType.add : AmmTradeType.remove,\n                        //TODO:\n                        totalDollar: 1000,\n                        totalYuan: 1000 / Number(forex),\n                        amountA: volumeToCount(coinA,item.poolTokens[ 0 ]?.actualAmount),\n                        amountB: volumeToCount(coinA,item.poolTokens[ 1 ]?.actualAmount),\n                        time: Number(item.updatedAt),\n                        // @ts-ignore\n                        coinA: coinMap[ coinA ],\n                        // @ts-ignore\n                        coinB: coinMap[ coinB ],\n                        status: item.txStatus\n                    })\n                }\n                return tradeArray\n            }\n         catch (error) {\n            //CATCHERROR:\n            console.log(error)\n            // new CustomError()\n        }\n\n    })\n    // console.log('tradeArray:', tradeArray)\n    return tradeArray as AmmRecordRow<C>[];\n\n}\n\n\nexport const makeMarketAmmArray = <C extends object>(coinKey: any, marketTransaction: AmmPoolTx[]): AmmRecordRow<C>[] => {\n\n    let tradeArray: Array<Partial<AmmRecordRow<C>>> = [];\n\n    // marketTransaction.forEach((item: AmmPoolTx) => {\n    //     try {\n    //         const {base, quote} = getBaseQuote(coinKey)\n    //         const {forex} = store.getState().system\n    //         // const {currency} = store.getState().settings\n    //         const coinMap = store.getState().tokenMap.coinMap as CoinMap<C>\n    //         if (coinMap) {\n    //\n    //             // id: number;\n    //             // from: string;\n    //             // to: string;\n    //             // token: string;\n    //             // amount: string;\n    //             // tokenF: string;\n    //             // amountF: string;\n    //             // status: TxStatus;\n    //             // txHash: string;\n    //             // billType: BillType;\n    //             // income: boolean;\n    //             // timestamp: number;\n    //             // memo: string;\n    //             // price: string;\n    //             // transferType: TransferType;\n    //             // label: string;\n    //             tradeArray.push({\n    //                 // type: item.billType === BillType.ORDER ?\n    //                 //     AmmTradeType.swap : item.billType === BillType.TRANSFER && item.income ?\n    //                 //         AmmTradeType.add : AmmTradeType.remove,\n    //                 // // //TODO:\n    //                 // totalDollar: 1000,\n    //                 // totalYuan: 1000 / Number(forex),\n    //                 // amountA: Number(item.poolTokens[ 0 ].amount),\n    //                 // amountB: Number(item.poolTokens[ 1 ].amount),\n    //                 // time: Number(item.updatedAt),\n    //                 // coinA: coinMap[ base as keyof C],\n    //                 // coinB: coinMap[ quote as keyof C ],\n    //             })\n    //         }\n    //     } catch (error) {\n    //         //CATCHERROR:\n    //         console.log(error)\n    //         // new CustomError()\n    //     }\n    //\n    // })\n    // console.log('tradeArray:', tradeArray)\n    return tradeArray as AmmRecordRow<C>[];\n\n}\n","import { AmmpoolAPI, ChainId, ExchangeAPI, UserAPI, WalletAPI, WsAPI } from \"loopring-sdk\"\nimport { getChainId } from 'stores/trading/hook'\n\nexport const walletAPI = () => {\n    const walletApi = new WalletAPI(getChainId() as ChainId)\n    return walletApi\n}\n\nexport const userAPI = () => {\n    const userApi = new UserAPI(getChainId() as ChainId)\n    return userApi\n}\n\nexport const exchangeAPI = () => {\n    const exchangeApi = new ExchangeAPI(getChainId() as ChainId)\n    return exchangeApi\n}\n\nexport const ammpoolAPI = () => {\n    const ammpoolApi = new AmmpoolAPI(getChainId() as ChainId)\n    return  ammpoolApi\n}\n\nexport const wsAPI = () => {\n    const wsApi = new WsAPI(getChainId() as ChainId)\n    return wsApi\n}\n\nexport class LoopringAPI {\n    \n    public static userAPI: UserAPI | undefined = undefined\n    public static exchangeAPI: ExchangeAPI | undefined = undefined\n    public static ammpoolAPI: AmmpoolAPI | undefined = undefined\n    public static walletAPI: WalletAPI | undefined = undefined\n    public static wsAPI: WsAPI | undefined = undefined\n\n    public static InitApi = (chainId: ChainId) => {\n        LoopringAPI.userAPI = new UserAPI(chainId) \n        LoopringAPI.exchangeAPI = new ExchangeAPI(chainId) \n        LoopringAPI.ammpoolAPI = new AmmpoolAPI(chainId) \n        LoopringAPI.walletAPI = new WalletAPI(chainId) \n        LoopringAPI.wsAPI = new WsAPI(chainId) \n    }\n\n}\n","import { utils } from 'ethers'\n\nimport * as fm from 'loopring-sdk'\n\nimport BigNumber from 'bignumber.js'\n\nimport { CoinInfo, CoinMap, } from '@loopring-web/component-lib/static-resource'\nimport { DepthData, getBaseQuote, LoopringMap, MarketInfo, MarketStatus, TokenInfo, } from 'loopring-sdk'\nimport { BIG0, BIG1, BIG10, BIG10K, MULTI_FACTOR, } from '../defs/swap_defs'\n\nexport function getIcon(symbol: string, tokens: any) {\n    const token: any = tokens[symbol]\n    return getIconByTokenInfo(token)\n}\n\nexport function getIconByTokenInfo(token: TokenInfo) {\n    if (token) {\n        const addr = utils.getAddress(token.address)\n        const path = `https://exchange.loopring.io/assets/images/ethereum/assets/${addr}/logo.png`\n        return path\n    }\n    return ''\n}\n\nexport function makeCoinInfo(token: TokenInfo) {\n    if (token) {\n        const info: CoinInfo<any> = {\n            icon: getIconByTokenInfo(token),\n            name: token.symbol,\n            simpleName: token.symbol,\n            description: token.name,\n            company: token.name,\n        }\n        return info\n    }\n    return undefined\n}\n\nexport const getLeft = (pairs: any, tokens: any) => {\n    if (pairs) {\n\n        const left = Reflect.ownKeys(pairs)\n\n        let coinMapLeft: CoinMap<any, CoinInfo<any>> = {}\n\n        left.forEach((key: any) => {\n            coinMapLeft[key] = {\n                icon: getIcon(key, tokens),\n                name: key,\n                simpleName: key,\n                description: '',\n                company: ''\n            }\n        })\n\n        return {\n            left,\n            coinMapLeft,\n        }\n    }\n\n    return undefined\n}\n\nexport const getRight = (pairs: any, left: any, tokens: any) => {\n    if (pairs) {\n        const right = pairs[left].tokenList\n\n        let coinMapRight: CoinMap<any, CoinInfo<any>> = {}\n\n        if (right) {\n            right.forEach((key: any) => {\n                coinMapRight[key] = {\n                    icon: getIcon(key, tokens),\n                    name: key,\n                    simpleName: key,\n                    description: '',\n                    company: ''\n                }\n            })\n\n            return {\n                right,\n                coinMapRight,\n            }\n        }\n    }\n    return undefined\n}\n\nexport const getToken = (tokens: any, token: any) => {\n    if (!tokens) {\n        throw Error('no tokens list!')\n    }\n    return tokens[token]\n}\n\nexport const getTokenInfoByToken = (ammBalance: any, tokens: any, token: any) => {\n\n    const tokenInfo = getToken(tokens, token)\n\n    const tokenVol = ammBalance.pooledMap[tokenInfo.tokenId].volume\n    const reserve = fm.toBig(tokenVol)\n\n    return {\n        tokenInfo, tokenVol, reserve,\n    }\n}\n\nconst getKey = (base: any, quote: any) => {\n\n    if (!base || !quote) {\n        return {\n            key: undefined,\n            key_bak: undefined,\n            isOK: false,\n        }\n    }\n\n    const isLRCETH = false\n    const key = isLRCETH ? 'LRCETH-Pool' : ('AMM-' + base + '-' + quote)\n    const key_bak = isLRCETH ? 'LRCETH-Pool' : ('AMM-' + quote + '-' + base)\n    return {\n        key,\n        key_bak,\n        isOK: true,\n    }\n}\n\nconst getInfoByKey = (raw_data: any, keyPair: any) => {\n    const {\n        key,\n        key_bak,\n    } = keyPair\n\n    if (raw_data[key]) return raw_data[key]\n    return raw_data[key_bak]\n}\n\nexport const getBalances = (ammpools: any, ammPoolsBalances: any, base: any, quote: any, tokens: any) => {\n\n    const { ammInfo,\n        ammBalance,\n    } = getAmmInfo(ammpools, ammPoolsBalances, base, quote)\n\n    const baseToken = getToken(tokens, base)\n    const quoteToken = getToken(tokens, quote)\n\n    const baseBalance = ammBalance.pooledMap[baseToken.tokenId]\n    const quoteBalance = ammBalance.pooledMap[quoteToken.tokenId]\n\n    return {\n        ammInfo,\n        ammBalance,\n        baseBalance,\n        quoteBalance,\n    }\n\n}\n\nexport const getAmmInfoOnly = (ammpools: any, base: any, quote: any) => {\n\n    const keyPair = getKey(base, quote)\n\n    const ammInfo = getInfoByKey(ammpools, keyPair)\n\n    if (!ammInfo) {\n        throw Error('no ammInfo!')\n    }\n\n    return {\n        ammInfo,\n    }\n\n}\n\nexport const getAmmInfo = (ammpools: any, ammPoolsBalances: any, base: any, quote: any) => {\n\n    const keyPair = getKey(base, quote)\n\n    const ammInfo = getInfoByKey(ammpools, keyPair)\n    const ammBalance = getInfoByKey(ammPoolsBalances, keyPair)\n\n    if (!ammInfo || !ammBalance) {\n        throw Error('no ammInfo! no ammBalance!')\n    }\n\n    const feeBips = parseInt(ammInfo.feeBips)\n\n    return {\n        ammInfo,\n        ammBalance,\n        feeBips,\n    }\n\n}\n\nconst getAmt = (rawAmt: any, tokenInfo: any) => {\n    if (rawAmt === undefined) {\n        rawAmt = 0\n    }\n\n    return fm.toBig(rawAmt).times('1e' + tokenInfo.decimals)\n}\n\nexport const applySlippageTolerance = (\n    tokens: any,\n    token: any,\n    value: any,\n    slippageTolerance: number = 0.01\n) => {\n    const tokenInfo = getToken(tokens, token)\n    const f = 1e7\n    const feeFactor = fm.toBig(f * (1 - slippageTolerance))\n    const amount = fm.toBig(value).times('1e' + tokenInfo.decimals)\n    const outInWei = amount.times(feeFactor).dividedBy(f)\n    const out = fromWEI(tokens, token, outInWei)\n\n    return {\n        outInWei,\n        out,\n    }\n}\n\nexport const applyOrderFee = (tokens: any, token: any, value: any, feeBip: any) => {\n    const tokenInfo = getToken(tokens, token)\n    const feeFactor = fm.toBig(MULTI_FACTOR - feeBip)\n    const amount = fm.toBig(value).times('1e' + tokenInfo.decimals)\n    const appliedAmount = amount.times(feeFactor).dividedBy(MULTI_FACTOR)\n    return appliedAmount\n}\n\nexport function fromWEI(tokens: any, symbol: any, valueInWEI: any, precision?: any, ceil?: any) {\n    try {\n        const tokenInfo = getToken(tokens, symbol)\n        const precisionToFixed = precision ? precision : tokenInfo.precision\n        const value = fm.toBig(valueInWEI).div('1e' + tokenInfo.decimals)\n        return fm.toFixed(value, precisionToFixed, ceil)\n    } catch (error) {\n    }\n    return '0'\n}\n\n\nexport function toWEI(tokens: any, symbol: any, value: any, rm: any = 3) {\n    const tokenInfo = getToken(tokens, symbol)\n    if (typeof tokenInfo === 'undefined') {\n        return '0'\n    }\n\n    return fm.toBig(value)\n        .times('1e' + tokenInfo.decimals)\n        .toFixed(0, rm)\n}\n\nexport const getAmountOut = (amt: any, ammpools: any, ammPoolsBalances: any, tokens: any,\n    base: any, quote: any, takerRate: number, currentPrice: number) => {\n\n    if (amt === undefined) {\n        amt = 0\n    }\n\n    const { ammBalance, feeBips, } = getAmmInfo(ammpools, ammPoolsBalances, base, quote)\n\n    const { tokenInfo: baseTokenInfo, reserve: reserveIn } = getTokenInfoByToken(ammBalance, tokens, base)\n    const { tokenInfo: quoteTokenInfo, reserve: reserveOut } = getTokenInfoByToken(ammBalance, tokens, quote)\n\n    const amountIn = getAmt(amt, baseTokenInfo)\n    const feeBipsFactor = fm.toBig(MULTI_FACTOR - feeBips)\n    const amountInWithFee = amountIn.times(feeBipsFactor)\n    const numerator = amountInWithFee.times(reserveOut)\n    const denominator = reserveIn.times(MULTI_FACTOR).plus(amountInWithFee)\n    const amountOutInWei: any = numerator.dividedBy(denominator)\n\n    let quoteAmt: any = fromWEI(tokens, quote, amountOutInWei)\n\n    const _amount1ApplyOrderFeeInWei = applyOrderFee(tokens, quote, quoteAmt, takerRate + feeBips)\n\n    let _amount1ApplyOrderFee = Number(fromWEI(tokens, quote, _amount1ApplyOrderFeeInWei))\n\n    let priceImpact = 0\n    if (_amount1ApplyOrderFee < 0) {\n        _amount1ApplyOrderFee = 0\n        quoteAmt = null\n    } else {\n        const newPrice = Number(quoteAmt) / Number(amt)\n        priceImpact = (newPrice - currentPrice) / currentPrice\n    }\n\n    return {\n        quoteAmt,\n        _amount1ApplyOrderFeeInWei,\n        _amount1ApplyOrderFee,\n        priceImpact,\n    }\n\n}\n\nexport const getAmountOut_Reverse = (amt: any, ammpools: any, ammPoolsBalances: any, tokens: any,\n    base: any, quote: any, takerRate: number, currentPrice: number) => {\n\n    if (amt === undefined) {\n        amt = 0\n    }\n    \n    const { ammBalance, feeBips, } = getAmmInfo(ammpools, ammPoolsBalances, base, quote)\n\n    const { tokenInfo: baseTokenInfo, reserve: reserveIn } = getTokenInfoByToken(ammBalance, tokens, base)\n    const { tokenInfo: quoteTokenInfo, reserve: reserveOut } = getTokenInfoByToken(ammBalance, tokens, quote)\n\n    const amountOut = getAmt(amt, quoteTokenInfo)\n\n    if (amountOut.gt(reserveOut)) {\n        return {\n            baseAmt: 0,\n            _amount1ApplyOrderFeeInWei: 0,\n            _amount1ApplyOrderFee: 0,\n            priceImpact: 0,\n            hasError: false,\n        }\n    }\n\n    const numerator = amountOut.times(reserveIn).times(MULTI_FACTOR)\n    const feeBipsFactor = fm.toBig(MULTI_FACTOR - feeBips)\n\n    // If amountOut is larger than reserveOut?\n    // It's handled before getAmountOut_reserve\n    const reserveOutSubAmountOut = reserveOut.minus(amountOut)\n\n    const denominator = feeBipsFactor.times(reserveOutSubAmountOut)\n    const amountInInWei = numerator.dividedBy(denominator)\n\n    let baseAmt: any = fromWEI(tokens, quote, amountInInWei)\n\n    const _amount1ApplyOrderFeeInWei = applyOrderFee(tokens, quote, amt, takerRate + feeBips)\n\n    let _amount1ApplyOrderFee = Number(fromWEI(tokens, quote, _amount1ApplyOrderFeeInWei))\n\n    let priceImpact = 0\n    if (_amount1ApplyOrderFee < 0) {\n        _amount1ApplyOrderFee = 0\n        baseAmt = null\n    } else {\n        const newPrice = Number(amt) / Number(baseAmt)\n        priceImpact = (newPrice - currentPrice) / currentPrice\n    }\n\n    return {\n        baseAmt,\n        _amount1ApplyOrderFeeInWei,\n        _amount1ApplyOrderFee,\n        priceImpact,\n        hasError: false,\n    }\n\n}\n\nexport function isEmpty(input: any) {\n    if (!input || input.trim() === '') {\n        return true\n    }\n\n    return false\n}\n\nfunction getAmountOutWithFeeBips(amountIn: string, feeBips: string, reserveIn: string, reserveOut: string ) {\n    const amountInBig = fm.toBig(amountIn)\n    const reserveInBig = fm.toBig(reserveIn)\n    const reserveOutBig = fm.toBig(reserveOut)\n    \n    if (amountInBig.lt(BIG0) || reserveInBig.lt(BIG0) || reserveOutBig.lt(BIG0)) {\n        return BIG0\n    }\n    const feeBipsBig = fm.toBig(feeBips)\n\n    const amountInWithFee = amountInBig.times(BIG10K.minus(feeBipsBig))\n    const numerator = amountInWithFee.times(reserveOutBig)\n    const denominator = reserveInBig.times(BIG10K).plus(amountInWithFee)\n\n    return numerator.div(denominator)\n}\n\nfunction getAmountInWithFeeBips(amountOut: string, feeBips: string, reserveIn: string, reserveOut: string ) {\n    const amountOutBig = fm.toBig(amountOut)\n    const reserveInBig = fm.toBig(reserveIn)\n    const reserveOutBig = fm.toBig(reserveOut)\n    \n    if (amountOutBig.lt(BIG0) || reserveInBig.lt(BIG0) || reserveOutBig.lt(BIG0)) {\n        return BIG0\n    }\n    const feeBipsBig = fm.toBig(feeBips)\n\n    const numerator = reserveInBig.times(amountOutBig).times(BIG10K)\n    const denominator = reserveOutBig.times(amountOutBig).times(BIG10K.minus(feeBipsBig))\n\n    return numerator.div(denominator).plus(BIG1)\n}\n\nfunction getOutputOrderbook(input: string, feeBips: string, isAtoB: boolean) {\n    let output: string  = \"0\"\n    let remain: string  = input\n}\n\nexport function getOutputAmount(base: string, quote: string, market: string, \n    input: string, isAtoB: boolean, feeBips: string, \n    tokenMap: LoopringMap<TokenInfo>, marketMap: LoopringMap<MarketInfo>, depth: DepthData) {\n\n    if (isEmpty(input) || isEmpty(feeBips) || !(market in Object.keys(marketMap))) {\n        return undefined\n    }\n\n    const { base: baseRaw, quote: quoteRaw } = getBaseQuote(market)\n\n    const marketInfo: MarketInfo = marketMap[market]\n\n    const isSwapEnabled = marketInfo.status === MarketStatus.ALL || marketInfo.status === MarketStatus.AMM\n\n    input = input.trim()\n\n    let exceedDepth = false\n\n    const reserveIn = ''\n    const reserveOut = ''\n\n    if (isAtoB) {\n\n        // bids_amtTotal -> bidsSizeShown\n        // asks_volTotal -> asksQuoteSizeShown\n        const amountInWei = toWEI(tokenMap, base, input)\n\n        if (isEmpty(depth.bids_amtTotal) || isEmpty(depth.asks_volTotal)) {\n            exceedDepth = true\n        } else {\n\n            if (base === baseRaw) {\n                exceedDepth = fm.toBig(amountInWei).lt(fm.toBig(depth.bids_amtTotal))\n            } else {\n                exceedDepth = fm.toBig(amountInWei).lt(fm.toBig(depth.asks_volTotal))\n            }\n\n        }\n\n        let amountB = new BigNumber(0)\n\n        if (exceedDepth) {\n            if (isSwapEnabled) {\n                amountB = getAmountOutWithFeeBips(amountInWei, feeBips, reserveIn, reserveOut)\n            }\n        } else {\n            amountB = fm.toBig(toWEI(tokenMap, base, getOutputOrderbook(input, feeBips, isAtoB)))\n        }\n\n        return fromWEI(tokenMap, quote, amountB)\n\n    } else {\n\n        // asks_amtTotal -> asksSizeShown\n        // bids_volTotal -> bidsQuoteSizeShown\n\n        if (isEmpty(depth.bids_volTotal) || isEmpty(depth.asks_amtTotal)) {\n            exceedDepth = true\n        } else {\n            const amountInWei = toWEI(tokenMap, quote, input)\n\n            if (base === baseRaw) {\n                exceedDepth = fm.toBig(amountInWei).gt(fm.toBig(depth.bids_volTotal))\n            } else {\n                exceedDepth = fm.toBig(amountInWei).gt(fm.toBig(depth.asks_amtTotal))\n            }\n\n        }\n\n        let amountSBint = BIG0\n\n        const amountB: string = toWEI(tokenMap, quote, input)\n\n        if (exceedDepth) {\n            if (isSwapEnabled) {\n                amountSBint = getAmountInWithFeeBips(amountB, feeBips, reserveIn, reserveOut)\n            }\n        } else {\n            amountSBint = fm.toBig(toWEI(tokenMap, base, getOutputOrderbook(input, feeBips, isAtoB)))\n        }\n\n        if (amountSBint.gt(BIG0)) {\n            return fromWEI(tokenMap, base, amountSBint)\n        }\n\n        return '0'\n\n    }\n\n}\n","import { useDispatch, useSelector } from 'react-redux'\nimport { tickerMapSlice } from './reducer';\nimport { TickerStates } from './interface';\nimport { CoinKey } from '@loopring-web/component-lib/src/static-resource';\n\nexport function useTicker(): TickerStates & {\n    updateTickers:(tickerKeys:Array<CoinKey<any>>)=>void,\n    updateTicker:(tickerKey:CoinKey<any>)=>void,\n    statusUnset:()=>void,\n} {\n    const tickerMap:TickerStates = useSelector((state: any) => state.tickerMap)\n    const dispatch = useDispatch();\n    const updateTicker = (tickerKey:CoinKey<any>) => {\n        dispatch(tickerMapSlice.actions.getTicker({tickerKey}))\n    }\n    const updateTickers = (tickerKeys:Array<CoinKey<any>>) => {\n        dispatch(tickerMapSlice.actions.getTickers({tickerKeys}))\n    }\n    const statusUnset = ()=>{\n        dispatch(tickerMapSlice.actions.statusUnset(undefined))\n    }\n    return {\n        ...tickerMap,\n        statusUnset,\n        updateTickers,\n        updateTicker,\n    }\n\n}\n","import { useDispatch, useSelector } from 'react-redux'\nimport { AmmActivityMapStates } from './interface';\nimport { ammActivityMapSlice } from './reducer';\n\nexport function useAmmActivityMap(): AmmActivityMapStates & {\n    updateAmmActivityMap:()=> void,\n    statusUnset:()=> void,\n} {\n    const ammActivityMap:AmmActivityMapStates = useSelector((state: any) => state.amm.ammActivityMap)\n    const dispatch = useDispatch();\n    const updateAmmActivityMap = () => {\n        dispatch(ammActivityMapSlice.actions.getAmmActivityMap(undefined))\n    }\n    const statusUnset = ()=>{\n        dispatch(ammActivityMapSlice.actions.statusUnset(undefined))\n    }\n    return {\n        ...ammActivityMap,\n        statusUnset,\n        updateAmmActivityMap\n    }\n\n}\n","import { useDispatch, useSelector } from 'react-redux'\nimport { StateBase } from '../interface';\nimport { socketSlice } from './reducer';\nimport { SocketMap } from './interface';\n\nexport function useSocket(): StateBase & {\n    // socketStart:()=>void,\n    statusUnset: () => void,\n    sendSocketTopic: (socket: SocketMap) => void,\n    socketEnd: () => void\n} {\n    const socket: StateBase & { socket: SocketMap } = useSelector((state: any) => state.socket)\n    const dispatch = useDispatch();\n    // const socketStart = () => {\n    //     dispatch(socketSlice.actions.socketStart(undefined))\n    // }\n    const sendSocketTopic = (socket: SocketMap) => {\n        dispatch(socketSlice.actions.sendSocketTopic({socket}))\n    }\n    const socketEnd = () => {\n        dispatch(socketSlice.actions.socketEnd(undefined))\n    }\n    const statusUnset = () => {\n        dispatch(socketSlice.actions.statusUnset(undefined))\n    }\n    return {\n        ...socket,\n        statusUnset,\n        // socketStart,\n        sendSocketTopic,\n        socketEnd,\n    }\n\n}\n","export enum AccountStatus {\n    UNKNOWN = 'UNKNOWN',\n    UNCONNNECTED = 'UNCONNNECTED',\n    CONNECTED = 'CONNECTED',\n    NOACCOUNT = 'NOACCOUNT',\n    DEPOSITING = 'DEPOSITING',\n    DEPOSIT_TO_CONFIREM = 'DEPOSIT_TO_CONFIREM',\n    UNACTIVATED = 'UNACTIVATED',\n    ARPROVING = 'ARPROVING',\n    APPROV_TO_CONFIRM = 'APPROV_TO_CONFIRM',\n    LOCKED = 'LOCKED',\n    ACTIVATED = 'ACTIVATED',\n}\n\nexport enum StatusChangeEvent {\n    Reset = 'Reset',\n    Connecting = 'Connecting',\n    HasPubkey = 'HasPubkey',\n    HasNoPubkey = 'HasNoPubkey',\n    ErrorResponse = 'ErrorResponse',\n    FinishDeposit = 'FinishDeposit',\n    DepositConfirmed = 'DepositConfirmed',\n    IsSmartWallet = 'IsSmartWallet',\n    ApproveSubmit = 'ApproveSubmit',\n    ApproveConfirmed = 'ApproveConfirmed',\n    Unlock = 'Unlock',\n    Lock = 'Lock',\n}\n\nexport const AccountMachineSpec = (initialState: AccountStatus = AccountStatus.UNCONNNECTED) => \n{\n    return {\n        initialState: initialState,\n        states: {\n            UNCONNNECTED: {\n                Connecting: AccountStatus.CONNECTED,\n                Reset: AccountStatus.UNCONNNECTED,\n            },\n            CONNECTED: {\n                HasPubkey: AccountStatus.LOCKED,\n                HasNoPubkey: AccountStatus.UNACTIVATED,\n                ErrorResponse: AccountStatus.NOACCOUNT,\n                Reset: AccountStatus.UNCONNNECTED,\n            },\n            NOACCOUNT: {\n                ErrorResponse: AccountStatus.NOACCOUNT,\n                Reset: AccountStatus.UNCONNNECTED,\n            },\n            DEPOSITING: {\n                FinishDeposit: AccountStatus.DEPOSIT_TO_CONFIREM,\n                Reset: AccountStatus.UNCONNNECTED,\n            },\n            DEPOSIT_TO_CONFIREM: {\n                HasPubkey: AccountStatus.ACTIVATED,\n                HasNoPubkey: AccountStatus.DEPOSIT_TO_CONFIREM,\n                ErrorResponse: AccountStatus.DEPOSIT_TO_CONFIREM,\n                Reset: AccountStatus.UNCONNNECTED,\n            },\n            UNACTIVATED: {\n                IsSmartWallet: AccountStatus.ARPROVING,\n                Reset: AccountStatus.UNCONNNECTED,\n            },\n            ARPROVING: {\n                ApproveSubmit: AccountStatus.APPROV_TO_CONFIRM,\n                Reset: AccountStatus.UNCONNNECTED,\n            },\n            APPROV_TO_CONFIRM: {\n                ApproveConfirmed: AccountStatus.ACTIVATED,\n                Reset: AccountStatus.UNCONNNECTED,\n            },\n            LOCKED: {\n                Unlock: AccountStatus.ACTIVATED,\n                Reset: AccountStatus.UNCONNNECTED,\n            },\n            ACTIVATED: {\n                Lock: AccountStatus.LOCKED,\n                Reset: AccountStatus.UNCONNNECTED,\n            },\n        },\n    }\n}\n","import { createAction } from '@reduxjs/toolkit'\n\n// fired once when the app reloads but before the app renders\n// allows any updates to be applied to store data loaded from localStorage\nexport const updateVersion = createAction<void>('global/updateVersion')\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit'\n\nconst now = () => new Date().getTime()\n\nexport interface SerializableTransactionReceipt {\n  to: string\n  from: string\n  contractAddress: string\n  transactionIndex: number\n  blockHash: string\n  transactionHash: string\n  blockNumber: number\n  status?: number\n}\n\nexport interface TransactionDetails {\n  hash: string\n  approval?: { tokenAddress: string; spender: string }\n  summary?: string\n  claim?: { recipient: string }\n  receipt?: SerializableTransactionReceipt\n  lastCheckedBlockNumber?: number\n  addedTime: number\n  confirmedTime?: number\n  from: string\n}\n\nexport interface TransactionState {\n  [chainId: number]: {\n    [txHash: string]: TransactionDetails\n  }\n}\n\nexport const initialState: TransactionState = {}\n\nconst transactionsSlice = createSlice({\n  name: 'transactions',\n  initialState,\n  reducers: {\n    reset(state) {\n      Object.assign(state, initialState)\n    },\n    addTransaction(state: TransactionState, action: PayloadAction<{\n      chainId: number, from: string,\n      hash: string, approval: any, summary: string, claim: any\n    }>) {\n      const { chainId, from, hash, approval, summary, claim} = action.payload\n      if (state[chainId]?.[hash]) {\n        throw Error('the existing TX can\\'t be added again')\n      }\n\n      const txs = state[chainId] ?? {}\n      txs[hash] = {\n        hash, \n        approval, \n        summary, \n        claim, \n        from,\n        addedTime: now(), \n      }\n      // state[chainId] = txs\n    },\n    clearAllTransactions(state: TransactionState, action: PayloadAction<number>) {\n      const chainId = action.payload\n      if (!state[chainId]) return\n      state[chainId] = {}\n    },\n    checkedTransaction(state: TransactionState, action: PayloadAction<{chainId: number,\n    hash: string, blockNumber: number}>) {\n      const { chainId, hash, blockNumber} = action.payload\n      const tx = state[chainId]?.[hash]\n      if (!tx) {\n        return\n      }\n      if (!tx.lastCheckedBlockNumber) {\n        tx.lastCheckedBlockNumber = blockNumber\n      } else {\n        tx.lastCheckedBlockNumber = Math.max(blockNumber, tx.lastCheckedBlockNumber)\n      }\n      // state[chainId][hash] = tx\n    },\n    finalizeTransaction(state: TransactionState, action: PayloadAction<{\n      hash: string, chainId: number, receipt: any\n    }>) {\n      const { chainId, hash, receipt } = action.payload\n      \n      const tx = state[chainId]?.[hash]\n      if (!tx) {\n        return\n      }\n      tx.receipt = receipt\n      tx.confirmedTime = now()\n    }\n  }\n}\n)\n\nexport const { reset, addTransaction, clearAllTransactions, checkedTransaction, finalizeTransaction, } = transactionsSlice.actions\nexport default transactionsSlice\n","import { createSlice, PayloadAction, Slice } from '@reduxjs/toolkit'\nimport {  AmmTradesStates } from './interface';\nimport { STATUS } from '../../constant';\n\n\nconst initialState:Required<AmmTradesStates>  = {\n    ammTrades:[],\n    status:'UNSET',\n    errorMessage:null,\n}\nconst ammTradesSlice:Slice = createSlice({\n    name: 'ammTrades',\n    initialState,\n    reducers: {\n        getAmmTrades(state, action:PayloadAction<string | undefined>) {\n            state.status = STATUS.PENDING\n        },\n        getAmmTradesStatus(state, action: PayloadAction<AmmTradesStates>) {\n            // @ts-ignore\n            if (action.error) {\n                state.status =  STATUS.ERROR\n                // @ts-ignore\n                state.errorMessage = action.error\n            }\n            state.ammTrades = {...action.payload.ammTrades};\n            state.status = STATUS.DONE\n        },\n        statusUnset: state => {\n            state.status = STATUS.UNSET\n        }\n    },\n});\nexport { ammTradesSlice };\nexport const { getAmmTrades, getAmmTradesStatus, statusUnset } = ammTradesSlice.actions\n","import { all, takeLatest, call, put } from \"redux-saga/effects\"\nimport { getAmmActivityMap, getAmmActivityMapStatus } from './reducer'\nimport { LoopringAPI } from '../../apis/api';\nconst getAmmActivityMapApi = async () => {\n\n    if(LoopringAPI.ammpoolAPI){\n        const { groupByRuleTypeAndStatus } =  await LoopringAPI.ammpoolAPI.getAmmPoolActivityRules();\n        return  {data:groupByRuleTypeAndStatus}\n    }else{\n        return {data:undefined}\n    }\n\n}\n\nexport function* getPostsSaga() {\n    try {\n        //\n        const { data } = yield call(getAmmActivityMapApi);\n        yield put(getAmmActivityMapStatus({ammActivityMap:data}));\n    } catch (err) {\n        yield put(getAmmActivityMapStatus(err));\n    }\n}\n\nexport default function* ammActivityMapSaga() {\n    yield all([takeLatest(getAmmActivityMap, getPostsSaga)]);\n}\n","import { all, call, fork, put, takeLatest } from \"redux-saga/effects\";\nimport { getAmmMap, getAmmMapStatus, updateRealTimeAmmMap } from './reducer';\nimport { AmmDetail } from '@loopring-web/component-lib/src/static-resource';\nimport store from '../../index';\nimport { AmmPoolInfoV3, AmmPoolStat, toBig, TokenVolumeV3, } from \"loopring-sdk\";\nimport { ammpoolAPI } from \"stores/apis/api\";\nimport { PayloadAction } from '@reduxjs/toolkit';\nimport { AmmDetailStore, GetAmmMapParams } from './interface';\nimport { volumeToCount, volumeToCountAsBigNumber } from '../../../hooks/help';\n\ntype AmmMap<R extends { [ key: string ]: any }> = { [ key: string ]: AmmDetail<R> } | {}  //key is AMM-XXX-XXX\nexport const setAmmState = ({ammPoolState, keyPair}: { ammPoolState: AmmPoolStat, keyPair: string }) => {\n    const {idIndex} = store.getState().tokenMap\n    // @ts-ignore\n    const [, coinA, coinB] = keyPair.match(/(\\w+)-(\\w+)/i);\n    const {forex,faitPrices} = store.getState().system;\n    if (idIndex && coinA && coinB && faitPrices && forex) {\n        let result =  {\n            amountDollar: parseFloat(ammPoolState.liquidityUSD),\n            amountYuan: (parseFloat(ammPoolState.liquidityUSD) / (forex ? forex : 6.5)),\n            totalLPToken: volumeToCount('LP-' + keyPair, ammPoolState.lpLiquidity),\n            totalA: volumeToCount(coinA, ammPoolState.liquidity[ 0 ]),//parseInt(ammPoolState.liquidity[ 0 ]),\n            totalB: volumeToCount(coinB, ammPoolState.liquidity[ 1 ]),//parseInt(ammPoolState.liquidity[ 1 ]),\n            rewardValue: ammPoolState.rewards[ 0 ] ? volumeToCount(idIndex[ ammPoolState.rewards[ 0 ].tokenId as number ], ammPoolState.rewards[ 0 ].volume) : undefined,\n            rewardToken: ammPoolState.rewards[ 0 ] ? idIndex[ ammPoolState.rewards[ 0 ].tokenId as number ] : undefined,\n            rewardValue2: ammPoolState.rewards[ 1 ] ? volumeToCount(idIndex[ ammPoolState.rewards[ 1 ].tokenId as number ], ammPoolState.rewards[ 1 ].volume) : undefined,\n            rewardToken2: ammPoolState.rewards[ 1 ] ? idIndex[ ammPoolState.rewards[ 1 ].tokenId as number ] : undefined,\n        }\n\n        const feeA =  volumeToCountAsBigNumber(coinA, ammPoolState.fees[ 0 ]);//parseInt(ammPoolState.fees[ 0 ]),\n        const feeB = volumeToCountAsBigNumber(coinB, ammPoolState.fees[ 1 ]);//parseInt(ammPoolState.fees[ 1 ]),\n        const feeDollar =  faitPrices[coinA] && faitPrices[coinB]  ?\n            toBig(feeA||0).times(faitPrices[coinA].price).plus(toBig(feeB||0).times(faitPrices[coinB].price)):undefined\n        const feeYuan = feeDollar ? feeDollar.times(forex) : undefined;\n\n        return {\n             ...result,\n            feeA:feeA?.toNumber(),\n            feeB:feeB?.toNumber(),\n            feeDollar:feeDollar? feeDollar.toNumber(): undefined,\n            feeYuan:feeYuan? feeYuan.toNumber(): undefined,\n            tradeFloat: {\n                change: undefined,\n                timeUnit: '24h',\n                // priceYuan: 100,\n                // priceDollar: 1.23123,\n                // floatTag: FloatTag.increase,\n                // reward: 12312,\n                // APY: (parseInt(ammPoolState.apyBips) * 1.0 / 100)\n            },\n            APY: (parseInt(ammPoolState.apyBips) * 1.0 / 100)\n        }\n\n\n    }\n}\nconst getAmmMapApi = async <R extends { [ key: string ]: any }>({ammpools}: GetAmmMapParams) => {\n\n    let ammMap: AmmMap<R> = {}\n    const {ammPoolStats} = (await ammpoolAPI().getAmmPoolStats());\n\n    let {__timer__} = store.getState().amm.ammMap\n    __timer__ = (() => {\n        if (__timer__ && __timer__ !== -1) {\n            clearInterval(__timer__)\n        }\n        return setInterval(async () => {\n            let ammPoolStats: { [key in keyof R]: AmmPoolStat } = (await ammpoolAPI().getAmmPoolStats()).ammPoolStats as { [key in keyof R]: AmmPoolStat }\n            store.dispatch(updateRealTimeAmmMap({ammPoolStats}))\n        }, 900000)    //15*60*1000 //900000\n    })()\n    const {tokenMap: {coinMap, idIndex}} = store.getState();\n\n    // const forex = faitPrices.prices['USDC']\n\n\n    Reflect.ownKeys(ammpools).forEach(async (key) => {\n        const item: AmmPoolInfoV3 = ammpools[ key as string ]\n        if (item.market === key && item.tokens.pooled && idIndex) {\n\n            // const tokenA =  ; //getTokenInfoById(tokens.tokenIdMap, parseInt(item.tokens.pooled[0]))\n            // const tokenB =  ; // getTokenInfoById(tokens.tokenIdMap, parseInt(item.tokens.pooled[1]))\n            const coinA = idIndex[ item.tokens.pooled[ 0 ] as any ];\n            const coinB = idIndex[ item.tokens.pooled[ 1 ] as any ];\n            const dataItem: AmmDetailStore<R> = {\n                coinA: coinA,\n                coinB: coinB,\n                isNew: Date.now() - (Number(item.createdAt)) > 3 * 86400 * 1000 ? false : true,//3*24*60*60*1000,\n                isActivity: item.status === 7 ? true : false,\n                address: item.address,\n                ...setAmmState({ammPoolState: ammPoolStats[ key ], keyPair: `${coinA}-${coinB}`}),\n                __rawConfig__: item\n            } as AmmDetailStore<R>\n            // @ts-ignore\n            ammMap[ item.market ] = dataItem\n\n\n        }\n\n\n    })\n    return {ammMap, __timer__}\n}\n\n\nexport function* getPostsSaga({payload}: PayloadAction<GetAmmMapParams>) {\n    try {\n        const {ammpools} = payload;\n        const {ammMap, __timer__} = yield call(getAmmMapApi, {ammpools});\n        yield put(getAmmMapStatus({ammMap, __timer__}));\n    } catch (err) {\n        yield put(getAmmMapStatus(err));\n    }\n}\n\nexport function* updateRealTimeSaga({payload}: any) {\n    try {\n        const {ammPoolStats} = payload;\n        let {ammMap}: { ammMap: AmmMap<object> } = store.getState().amm.ammMap;\n        if (ammPoolStats) {\n            //{ ammPoolStats?: { [ key: string ]: AmmPoolStat } }\n            Reflect.ownKeys(ammPoolStats).map((key) => {\n                const keyPair = (key as string).replace('AMM-', '')\n                \n                // @ts-ignore\n                ammMap[ key ] = {\n                    // @ts-ignore\n                    ...ammMap[ key ],\n                    ...setAmmState({ammPoolState: ammPoolStats[ key as string ], keyPair, })\n                }\n                return ammMap\n            })\n        }\n        yield put(getAmmMapStatus({ammMap}));\n    } catch (err) {\n        yield put(getAmmMapStatus(err));\n    }\n}\n\n\nexport function* ammMapInitSaga() {\n    yield all([takeLatest(getAmmMap, getPostsSaga)]);\n}\n\nexport function* ammMapRealTimeSaga() {\n    yield all([takeLatest(updateRealTimeAmmMap, updateRealTimeSaga)]);\n}\n\nexport const ammMapSaga = [\n    fork(ammMapInitSaga),\n    fork(ammMapRealTimeSaga),\n]\n\n","import { all, takeLatest, call, put } from \"redux-saga/effects\";\nimport { getAmmTrades, getAmmTradesStatus } from './reducer';\n\nconst getAmmTradesApi = ()=>new Promise((resolve)=>{\n    //TODO: check is connect and active and assign wallet\n    //TODO: if not reject directory, any error happen will clean the\n    resolve([\n    {side: 'Buy',\n        amount: {\n            sell:{ belong:'ETH', tradeValue: 0.1 },\n            buy:{ belong:'LRC', tradeValue: 123 }\n        },\n        time: Date.now(),\n        fee: 0.02,\n        priceValue: 0.123,\n        priceToken: 'LRC'}\n    ,{side: 'Buy',\n        amount: {\n            sell:{ belong:'ETH', tradeValue: 0.1 },\n            buy:{ belong:'LRC', tradeValue: 123 }\n        },\n        time: Date.now(),\n        fee: 0.02,\n        priceValue: 0.123,\n        priceToken: 'LRC'}\n])});\nexport function* getPostsSaga() {\n    try {\n        //\n        const { data } = yield call(getAmmTradesApi);\n        const posts = data;\n        yield put(getAmmTradesStatus(posts));\n    } catch (err) {\n        yield put(getAmmTradesStatus(err));\n    }\n}\n\nexport default function* ammTradesSaga() {\n    yield all([takeLatest(getAmmTrades, getPostsSaga)]);\n}\n","import { combineReducers } from '@reduxjs/toolkit';\n// import { ammRecordSlice } from './AmmConfig';\nimport { ammTradesSlice } from './AmmTrades';\nimport { ammMapSlice } from './AmmMap';\nimport { ammActivityMapSlice } from './AmmActivityMap';\nimport ammActivityMapSaga from './AmmActivityMap/saga';\nimport { ammMapSaga } from './AmmMap/saga';\nimport ammTradesSaga from './AmmTrades/saga';\nimport {  fork } from 'redux-saga/effects';\n\nexport const  ammReducer = combineReducers({\n    // ammRecord: ammRecordSlice.reducer,\n    ammTrades: ammTradesSlice.reducer,\n    ammMap: ammMapSlice.reducer,\n    ammActivityMap:ammActivityMapSlice.reducer\n})\nexport const ammForks =  [\n    fork(ammActivityMapSaga),\n    ...ammMapSaga,\n    // fork(ammRecordSaga),\n    fork(ammTradesSaga)\n]\n\n// export * from './interface'\n","import { all, call, fork, put, takeLatest } from \"redux-saga/effects\";\nimport { getTokenMap, getTokenMapStatus } from './reducer';\nimport { getIcon } from '../../utils/swap_calc_utils';\nimport { CoinInfo, CoinMap } from '@loopring-web/component-lib/static-resource';\nimport { AddressMap, GetTokenMapParams, IdMap } from './interface';\nimport { PayloadAction } from '@reduxjs/toolkit';\n\nconst getTokenMapApi = async <R extends { [ key: string ]: any }>({\n                                                                      tokensMap,\n                                                                      pairs,\n                                                                      marketArr,\n                                                                      tokenArr\n                                                                  }: GetTokenMapParams<R>) => {\n    let coinMap: CoinMap<any, CoinInfo<any>> = {};\n    let tokenMap:any = tokensMap;\n    let addressIndex: AddressMap = {};\n    let idIndex: IdMap = {};\n    Reflect.ownKeys(tokensMap).forEach((key) => {\n        if (!(key as string).startsWith('LP-')) {\n            coinMap[ key as string ] = {\n                icon: getIcon(key as string, tokensMap),\n                name: key as string,\n                simpleName: key,\n                description: '',\n                company: '',\n            }\n        }\n\n        if (pairs[ key as string ] && pairs[ key as string ].tokenList) {\n            // @ts-ignore\n            tokensMap[ key ].tradePairs = pairs[ key as string ].tokenList;\n        }\n        addressIndex = {\n            ...addressIndex,\n            // @ts-ignore\n            [ tokensMap[ key ].address ]: key as string\n        }\n        idIndex = {\n            ...idIndex,\n            // @ts-ignore\n            [ tokensMap[ key ].tokenId ]: key as string\n        }\n    })\n    return {data: {coinMap, addressIndex, idIndex, tokenMap, marketArray: marketArr, marketCoins: tokenArr}}\n};\n\nexport function* getPostsSaga<R extends { [ key: string ]: any }>({payload}: PayloadAction<GetTokenMapParams<R>>) {\n    try {\n        const {tokensMap, marketMap, pairs, marketArr,tokenArr} = payload\n        // @ts-ignore\n        const {data} = yield call(getTokenMapApi, {tokensMap, pairs, marketArr, tokenArr});\n\n        yield put(getTokenMapStatus({...data, marketMap}));\n    } catch (err) {\n        yield put(getTokenMapStatus(err));\n    }\n}\n\n\nexport function* tokenInitSaga() {\n    yield all([takeLatest(getTokenMap, getPostsSaga)]);\n}\n\n\nexport const tokenSaga = [\n    fork(tokenInitSaga),\n    // fork(tokenPairsSaga),\n]\n\n// export function* getPairsSaga({payload}:PayloadAction<{tokenPairs: TokenPairs }>) {\n//     try {\n//         const {tokenPairs} = payload;\n//         const tokenPairsMap =  Reflect.ownKeys(tokenPairs).reduce((prev,key)=>{\n//            // @ts-ignore\n//             return prev[key as string] =  tokenPairs[key as string].tokenList\n//         }, {} )\n//\n//         yield put(getTokenMapStatus({tokenPairsMap}));\n//     } catch (err) {\n//         yield put(getAmmMapStatus(err));\n//     }\n// }\n// export function* tokenPairsSaga() {\n//     yield all([takeLatest(getTokenPairMap, getPairsSaga)]);\n// }\n\n\n","import { all, call, fork, put, takeLatest } from \"redux-saga/effects\"\nimport { getTicker, getTickers, getTickerStatus } from './reducer'\nimport { CoinKey, CustomError, ErrorMap, PairKey, TradeFloat } from '@loopring-web/component-lib/src/static-resource'\n\n\nimport { exchangeAPI } from \"stores/apis/api\"\nimport { makeTickerMap } from '../../hooks/help';\n\n\ntype TickerMap<R extends { [ key: string ]: any }> = {\n    [key in CoinKey<R> | PairKey<R>]?: TradeFloat & {\n    reward?: number, rewardToken?: string\n}\n\n}\n\n\nconst getTickersApi = async <R extends { [ key: string ]: any }>(list: Array<keyof R>) => {\n\n    const tickers = await exchangeAPI().getMixTicker({market: list.join(',')})\n    const data = makeTickerMap({tickerMap: tickers.tickMap})\n    return {data}\n}\n\nexport function* getPostsSaga({payload}: any) {\n    try {\n        // @ts-ignore\n        const {tickerKey, tickerKeys} = payload;\n        if (tickerKey || (tickerKeys && tickerKeys.length)) {\n            const {data} = yield call(getTickersApi, tickerKey ? [tickerKey] : tickerKeys);\n            yield put(getTickerStatus({tickerMap: data}));\n\n        } else {\n            throw new CustomError(ErrorMap.NO_TOKEN_KEY_LIST);\n        }\n    } catch (err) {\n        yield put(getTickerStatus(err));\n    }\n}\n\nfunction* tickerSaga() {\n    yield all([takeLatest(getTicker, getPostsSaga)]);\n}\n\nfunction* tickersSaga() {\n    yield all([takeLatest(getTickers, getPostsSaga)]);\n}\n\nexport const tickerForks = [\n    fork(tickerSaga),\n    fork(tickersSaga),\n]\n ","import { all, call, fork, put, take, takeLatest } from \"redux-saga/effects\"\nimport { getSystemStatus, updateRealTimeObj, updateSystem } from './reducer'\nimport { ENV, NETWORKEXTEND } from \"./interface\"\nimport store from '../index';\nimport { reset } from '../account/reducer';\nimport { ChainId } from 'loopring-sdk';\nimport { exchangeAPI, LoopringAPI } from '../apis/api';\nimport { getAmmMap, updateRealTimeAmmMap } from '../Amm/AmmMap';\nimport { getTokenMap } from '../token';\nimport { CustomError, ErrorMap } from '@loopring-web/component-lib/src/static-resource';\nimport { getAmmActivityMap } from '../Amm/AmmActivityMap';\nimport { updateWalletLayer1 } from '../walletLayer1';\nimport { delay } from 'rxjs/operators';\n\n\nconst initConfig = function* <R extends { [ key: string ]: any }>(chainId: ChainId | 'unknown') {\n    store.dispatch(reset(undefined));\n    const {tokenSymbolMap: tokensMap} = yield call(async ()=> await LoopringAPI.exchangeAPI?.getTokens())\n    const {ammpools} = yield call(async ()=>await LoopringAPI.ammpoolAPI?.getAmmPoolConf());\n    const {pairs, marketArr, tokenArr, markets}  = yield call(async ()=> LoopringAPI.exchangeAPI?.getMixMarkets());\n    store.dispatch(getTokenMap({tokensMap, marketMap: markets, pairs,marketArr,tokenArr}))\n    yield take('tokenMap/getTokenMapStatus');\n    // let basePath: string = `wss://ws.${baseURL}/v3/ws?wsApiKey=${wsKey}`\n    store.dispatch(getAmmMap({ammpools}))\n    store.dispatch(getAmmActivityMap({ammpools}))\n    if(store.getState().tokenMap.status === 'ERROR'){\n\n    }\n    yield delay(10);\n    //IF already connect has address, getInfo walletLayer 1\n    const {account,walletLayer1} = store.getState() //.account.accAddr && !store.getState().walletLayer1.walletLayer1\n    if(account.accAddr && walletLayer1.walletLayer1 === undefined){\n        store.dispatch(updateWalletLayer1(undefined));\n    }\n\n}\n\nconst getSystemsApi = async <R extends { [ key: string ]: any }>(chainId: any) => {\n    //TODO get some other reuqired id...... put into system\n    // const { chainId } = system\n    const env = window.location.hostname === 'localhost' ? ENV.DEV : ChainId.GORLI === chainId ? ENV.UAT : ENV.PROD\n    chainId = ChainId.GORLI === chainId ? ChainId.GORLI : ChainId.MAINNET === chainId ? ChainId.MAINNET : NETWORKEXTEND.NONETWORK\n    if (chainId === NETWORKEXTEND.NONETWORK) {\n        throw new CustomError(ErrorMap.NO_NETWORK_ERROR)\n    } else {\n        LoopringAPI.InitApi(chainId as ChainId);\n        if (LoopringAPI.exchangeAPI) {\n            const { exchangeInfo } = (await LoopringAPI.exchangeAPI.getExchangeInfo())\n            const faitPrices = (await LoopringAPI.exchangeAPI.getFiatPrice({legal: 'CNY'})).fiatPrices\n            const gasPrice = (await exchangeAPI().getGasPrice()).gasPrice / 1e+9;\n            // : process.env.REACT_APP_API_URL_UAT;\n            const baseURL = ChainId.MAINNET === chainId ? `https://${process.env.REACT_APP_API_URL}` : `https:/${process.env.REACT_APP_API_URL_UAT}`\n            const forex = faitPrices[ 'USDT' ].price;\n            let {__timer__} = store.getState().system;\n            __timer__ = ((__timer__) => {\n                if (__timer__ && __timer__ !== -1) {\n                    clearInterval(__timer__);\n                }\n                return setInterval(async () => {\n                    const faitPrices = (await exchangeAPI().getFiatPrice({legal: 'CNY'})).fiatPrices\n                    const gasPrice = (await exchangeAPI().getGasPrice()).gasPrice / 1e+9\n                    const forex = faitPrices[ 'USDT' ]?.price\n                    store.dispatch(updateRealTimeAmmMap(undefined))\n                    store.dispatch(updateRealTimeObj({faitPrices, gasPrice, forex}))\n                }, 300000)   //\n\n            })(__timer__);\n            return {chainId, env, baseURL, faitPrices, gasPrice, forex, exchangeInfo, __timer__}\n        }\n    }\n}\n\nexport function* getUpdateSystem({payload}: any) {\n    try {\n        // @ts-ignore\n        const {chainId} = payload;\n        const {env, baseURL, faitPrices, gasPrice, forex, exchangeInfo, __timer__} = yield call(getSystemsApi, chainId);\n\n        yield put(getSystemStatus({env, baseURL, faitPrices, gasPrice, forex, exchangeInfo, __timer__}));\n        yield call(initConfig,chainId)\n        //TODO check wallect store\n    } catch (err) {\n        yield put(getSystemStatus(err));\n    }\n}\n\nfunction* systemSaga() {\n    yield all([takeLatest(updateSystem, getUpdateSystem)]);\n}\n\nexport const systemForks = [\n    fork(systemSaga),\n]\n","import { all, call, fork, put, takeLatest } from \"redux-saga/effects\";\nimport { getWalletLayer1Status, updateWalletLayer1 } from './reducer';\nimport { CoinKey, PairKey, WalletCoin } from '@loopring-web/component-lib/src/static-resource';\nimport { exchangeAPI } from '../apis/api';\nimport store from '../index';\nimport { fromWEI } from '../../utils/swap_calc_utils';\n\ntype WalletLayer1Map<R extends {[key:string]:any}> = {\n    [key in CoinKey<R>|PairKey<R>]?:WalletCoin<R>\n}\n\nconst getWalletLayer1Balance = async <R extends {[key:string]:any}>()=> {\n    //TODO: check is connect and active and assign walletLayer1\n    //TODO: if not reject directory, any error happen will clean the\n    // await sdk\n    const exchangeApi = exchangeAPI();\n    const {accAddr,accountId} = store.getState().account;\n    const {tokenMap,marketCoins} = store.getState().tokenMap;\n    const {ethBalance} =  await exchangeApi.getEthBalances({owner:accAddr});\n    // @ts-ignore\n    const {tokenBalances} =  await exchangeApi.getTokenBalances({owner:accAddr,token: marketCoins.join()},tokenMap);\n    tokenBalances['ETH'] = ethBalance;\n    let walletLayer1;\n    if(tokenBalances) {\n        walletLayer1 = Reflect.ownKeys(tokenBalances).reduce((prev,item)=>{\n            return   {...prev, [ item ]:{\n                    belong: item,\n                    count: fromWEI(tokenMap, item, tokenBalances[item as string]),\n                }\n            }\n        },{} as WalletLayer1Map<R>)\n    }\n    return {walletLayer1}\n};\n\nexport function* getPostsSaga() {\n    try {\n        //\n        const {walletLayer1} = yield call(getWalletLayer1Balance);\n        yield put(getWalletLayer1Status({walletLayer1}));\n    } catch (err) {\n        yield put(getWalletLayer1Status(err));\n    }\n}\n\nexport function* walletLayer1Saga() {\n    yield all([takeLatest(updateWalletLayer1, getPostsSaga)]);\n}\n\nexport const walletLayer1Fork = [\n    fork(walletLayer1Saga),\n    // fork(tokenPairsSaga),\n]\n\n","import { all, call, fork, put, takeLatest } from \"redux-saga/effects\";\nimport { getWalletLayer2Status, updateWalletLayer2 } from './reducer';\nimport { CoinKey, PairKey, WalletCoin } from '@loopring-web/component-lib/src/static-resource';\nimport {  userAPI } from '../apis/api';\nimport store from '../index';\n\ntype WalletLayer2Map<R extends {[key:string]:any}> = {\n    [key in CoinKey<R>|PairKey<R>]?:WalletCoin<R>\n}\n\nconst getWalletLayer2Balance = async <R extends {[key:string]:any}>()=> {\n    //TODO: check is connect and active and assign walletLayer1\n    //TODO: if not reject directory, any error happen will clean the\n    // await sdk\n    // const exchangeApi = exchangeAPI();\n    const userApi = userAPI();\n    const {accountId,apiKey} = store.getState().account;\n    const {tokenMap,idIndex,marketCoins} = store.getState().tokenMap;\n    let walletLayer2;\n    if(apiKey && accountId){\n        // @ts-ignore\n        const {userBalances} =  await userApi.getUserBalances({accountId:accountId,tokens:''},apiKey)\n        if(userBalances) {\n            // tokenId: number;\n            // total: string;\n            // locked: string;\n            // pending: {\n            //     withdraw: string;\n            //     deposit: string;\n            // };\n            walletLayer2 = Reflect.ownKeys(userBalances).reduce((prev,item)=>{\n                // @ts-ignore\n                return   {...prev, [ idIndex[item] ]:userBalances[Number(item)]}\n            },{} as WalletLayer2Map<R>)\n        }\n    }\n\n    return {walletLayer2}\n};\nexport function* getPostsSaga() {\n    try {\n        //\n        const {walletLayer2} = yield call(getWalletLayer2Balance);\n        yield put(getWalletLayer2Status({walletLayer2}));\n    } catch (err) {\n        yield put(getWalletLayer2Status(err));\n    }\n}\n\nexport function* walletLayer2Saga() {\n    yield all([takeLatest(updateWalletLayer2, getPostsSaga)]);\n}\n// export function* walletLayer2Saga() {\n//     yield all([takeLatest(updateWalletLayer2, getPostsSaga)]);\n// }\n\n\nexport const walletLayer2Fork = [\n    fork(walletLayer2Saga),\n    // fork(tokenPairsSaga),\n]\n\n","import { all, call, fork, put, takeLatest } from \"redux-saga/effects\"\nimport { getUserRewards, getUserRewardsStatus } from './reducer'\n\nimport store from '../index';\nimport { exchangeAPI, LoopringAPI } from '../apis/api';\nimport { updateRealTimeAmmMap } from '../Amm/AmmMap';\nimport { updateRealTimeObj } from '../system';\n\nconst getUserRewardsApi = async <R extends {[key:string]:any}>(list:Array<keyof R>)=> {\n\n    // const data:UserRewardsMap<R> = {}\n\n    // const userRewardss = await exchangeAPI().getUserRewards({market: list.join(',')})\n    const {accountId} = store.getState().account\n    let {__timer__} = store.getState().userRewardsMap;\n    \n    if(LoopringAPI.ammpoolAPI) {\n        __timer__ = ((__timer__) => {\n            if (__timer__ && __timer__ !== -1) {\n                clearInterval(__timer__);\n            }\n            return setTimeout(async () => {\n                store.dispatch(getUserRewards(undefined))\n            }, 300000 * 4)   //\n\n        })(__timer__);\n        return  LoopringAPI.ammpoolAPI.getAmmPoolUserRewards({owner:accountId}).then(({ammUserRewardMap}) => {\n            return {data:ammUserRewardMap,__timer__}\n        })\n\n\n    }else{\n        return  Promise.reject({data:undefined,__timer__})\n    }\n\n}\n\nexport function* getPostsSaga({payload}:any) {\n    try {\n        // @ts-ignore\n        // const { userRewardsKey,userRewardsKeys } = payload;\n        // console.log('getPostsSaga userRewardsKey',userRewardsKey, userRewardsKeys)\n        // if(userRewardsKey || (userRewardsKeys && userRewardsKeys.length)) {\n        const {data,__timer__}  = yield call(getUserRewardsApi);\n        yield put(getUserRewardsStatus({userRewardsMap:data,__timer__}));\n\n        // }else{\n        //     throw new CustomError(ErrorMap.NO_SDK);\n        // }\n    } catch (err) {\n        yield put(getUserRewardsStatus(err));\n    }\n}\n\nfunction* userRewardsSaga() {\n    yield all([takeLatest(getUserRewards, getPostsSaga)]);\n}\n\nexport const userRewardsForks = [\n    fork(userRewardsSaga),\n    // fork(userRewardssSaga),\n]\n ","import { all, call, fork, put, takeLatest } from 'redux-saga/effects';\nimport { getSocketStatus, sendSocketTopic, socketEnd } from './reducer'\nimport {\n    socketClose, socketSendMessage,\n} from '../../services/socketUtil';\nimport store from '../index';\nexport function* closeSocket(){\n    try {\n        yield call(socketClose)\n        yield put(getSocketStatus(undefined));\n        //TODO check wallect store\n    } catch (err) {\n        yield put(getSocketStatus(err));\n    }\n}\nexport function* sendMessage({payload}: any){\n    try {\n        const { chainId } = store.getState().system;\n        const { apiKey } = store.getState().account;\n        const { socket } = payload;\n        // @ts-ignore\n        yield call(socketSendMessage, { chainId, socket, apiKey })\n        yield put(getSocketStatus(undefined));\n    } catch (err) {\n        yield put(getSocketStatus(err));\n    }\n}\n\nfunction* socketEndSaga(){\n    yield all([takeLatest(socketEnd, closeSocket)]);\n}\n// function* socketSaga() {\n//     yield all([takeLatest(socketStart, startSocket)]);\n// }\nfunction* socketSendMessageSaga() {\n    yield all([takeLatest(sendSocketTopic, sendMessage)]);\n}\n\n\n\nexport const socketForks = [\n    // fork(socketSaga),\n    fork(socketEndSaga),\n    fork(socketSendMessageSaga),\n //   fork(initConfig),\n]\n\n\n\n","import { all } from \"redux-saga/effects\"\n// import machine from \"../state_machine/fsm/machine\"\n// import { TRANSITION } from \"../state_machine/fsm/actionTypes\"\n// import { helloSaga } from \"./sagas\"\nimport { tokenSaga } from './token/saga';\nimport { ammForks } from './Amm';\nimport { tickerForks } from './ticker/saga';\nimport { systemForks } from './system/saga';\nimport { walletLayer1Fork } from './walletLayer1/saga';\nimport { walletLayer2Fork } from './walletLayer2/saga';\nimport { userRewardsForks } from './userRewards/saga';\nimport { socketForks } from './socket/saga';\n\n\n// https://css-tricks.com/finite-state-machines-with-react/\n// https://musing-rosalind-2ce8e7.netlify.com/?machine=%7B%22initial%22%3A%22initial%22%2C%22states%22%3A%7B%22initial%22%3A%7B%22on%22%3A%7B%22LOGIN%22%3A%22loggedIn%22%2C%22LOGOUT%22%3A%22loggedOut%22%7D%7D%2C%22loggedOut%22%3A%7B%22on%22%3A%7B%22SUBMIT%22%3A%22loading%22%7D%7D%2C%22loading%22%3A%7B%22on%22%3A%7B%22SUCCESS%22%3A%22loggedIn%22%2C%22FAIL%22%3A%22loggedOut%22%7D%7D%2C%22loggedIn%22%3A%7B%22onEntry%22%3A%5B%22SET_TOKEN%22%5D%2C%22onExit%22%3A%5B%22CLEAR_TOKEN%22%5D%2C%22on%22%3A%7B%22LOGOUT%22%3A%22loggedOut%22%7D%7D%7D%7D\n\n// function* machineHandler(event: any, action: any) {\n//\n//   // @ts-ignore\n//   const currentAppState = yield select((state) => { state.account.status })\n//   const nextAppState = machine.transition(currentAppState, event)\n//\n//   yield put({\n//     type: \"APP_STATE/\" + nextAppState.value,\n//     payload: {\n//       value: nextAppState.value\n//     }\n//   });\n//\n//   console.debug(\"-> from \" + currentAppState + \" to \" + nextAppState);\n//\n//   for (let i = 0; i < nextAppState.actions.length; i++) {\n//     yield put({\n//       type: nextAppState.actions[i],\n//       payload: action\n//     });\n//   }\n// }\n\n// function* watchTransition() {\n//   yield takeEvery(TRANSITION, function*(action: any) {\n//     yield machineHandler(action.event, action.payload);\n//   });\n// }\n\nfunction* mySaga() {\n    yield all([\n        // fork(helloSaga),\n        // fork(watchTransition),\n        ...tokenSaga,\n        ...walletLayer1Fork,\n        ...walletLayer2Fork,\n        ...systemForks,\n        ...ammForks,\n        ...tickerForks,\n        ...userRewardsForks,\n        ...socketForks,\n\n    ]);\n}\n\nexport default mySaga;\n","import { configureStore, combineReducers, getDefaultMiddleware } from '@reduxjs/toolkit'\n\nimport { useDispatch } from 'react-redux'\nimport { save, load } from 'redux-localstorage-simple'\n\nimport createSagaMiddleware from 'redux-saga'\n\n// We'll use redux-logger just as an example of adding another middleware\nimport logger from 'redux-logger'\n\n// And use redux-batch as an example of adding enhancers\nimport { reduxBatch } from '@manaflair/redux-batch'\nimport { updateVersion } from './global/actions'\n\nimport accountSlice from './account/reducer'\nimport tradingSlice from './trading/reducer'\nimport transactionlice from './transactions/reducer'\n\n\nimport { modalsSlice, setLanguage, settingsSlice } from '@loopring-web/component-lib';\nimport { ammReducer } from './Amm';\nimport { tokenMapSlice } from './token';\nimport mySaga from './rootSaga';\nimport { tickerMapSlice } from './ticker';\nimport { systemSlice } from './system';\nimport { walletLayer1Slice } from './walletLayer1';\nimport { walletLayer2Slice } from './walletLayer2';\nimport { socketSlice } from './socket';\nimport { userRewardsMapSlice } from './userRewards';\n\nconst sagaMiddleware = createSagaMiddleware()\n\nconst reducer = combineReducers({\n  account: accountSlice.reducer,\n  socket: socketSlice.reducer,\n  settings: settingsSlice.reducer,\n  system: systemSlice.reducer,\n  trading: tradingSlice.reducer,\n  transactions: transactionlice.reducer,\n  modals: modalsSlice.reducer,\n  userRewardsMap: userRewardsMapSlice.reducer,\n  amm:ammReducer,\n  tokenMap: tokenMapSlice.reducer,\n  walletLayer2: walletLayer2Slice.reducer,\n  walletLayer1: walletLayer1Slice.reducer,\n  tickerMap: tickerMapSlice.reducer\n})\n\n//\n\nconst PERSISTED_KEYS: string[] = ['settings']\n\nconst store = configureStore({\n  reducer,\n  // middleware: (getDefaultMiddleware) => getDefaultMiddleware().concat(logger),\n  middleware: [...getDefaultMiddleware({ thunk: false,serializableCheck:false, }), save({ states: PERSISTED_KEYS }), sagaMiddleware, ],\n  // middleware: [...getDefaultMiddleware({ thunk: true }), ],\n  devTools: process.env.NODE_ENV !== 'production',\n  enhancers: [reduxBatch],\n  preloadedState: load({ states: PERSISTED_KEYS })\n})\nstore.dispatch(updateVersion())\nstore.dispatch(setLanguage(store.getState().settings.language))\n// @ts-ignore\nsagaMiddleware.run(mySaga, store.dispatch);\n\n// The store has been created with these options:\n// - The slice reducers were automatically passed to combineReducers()\n// - redux-thunk and redux-logger were added as middleware\n// - The Redux DevTools Extension is disabled for production\n// - The middleware, batch, and devtools enhancers were composed together\n\nexport type AppDispatch = typeof store.dispatch\nexport const useAppDispatch = () => useDispatch<AppDispatch>()\n\nexport type RootState = ReturnType<typeof reducer>\n\nexport default store\n","import { AmmPanelType } from '@loopring-web/component-lib';\nimport { AmmDetailBase } from '@loopring-web/component-lib/src/static-resource';\nimport {  volumeToCountAsBigNumber } from './volumeToCount';\n\nexport const ammPairInit = ({pair, _ammCalcData,ammType,tokenMap, coinMap, walletMap,ammMap ,tickerData,ammPoolsBalance}:any)=>{\n    _ammCalcData.coinInfoMap = coinMap;\n    if(tickerData){\n        \n        _ammCalcData.AtoB =  Number(tickerData.close)\n    }\n    if(isNaN(_ammCalcData.AtoB) && ammPoolsBalance){\n        const baseVol = volumeToCountAsBigNumber(pair.coinAInfo.simpleName,ammPoolsBalance.pooled[0].volume);\n        const quoteVol = volumeToCountAsBigNumber(pair.coinBInfo.simpleName,ammPoolsBalance.pooled[1].volume);\n        _ammCalcData.AtoB = quoteVol && baseVol && quoteVol.div(baseVol).toNumber();\n\n    }\n    if(pair.coinAInfo){\n        if(ammType === AmmPanelType.Deposit ) {\n            _ammCalcData.myCoinA = {\n                belong: pair.coinAInfo.simpleName,\n                balance: walletMap ? walletMap[ pair.coinAInfo.simpleName ]?.count : 0,\n            }\n            _ammCalcData.myCoinB = {\n                belong: pair.coinBInfo.simpleName,\n                balance: walletMap ? walletMap[ pair.coinBInfo.simpleName ]?.count : 0,\n            }\n        }else {\n            const key = `${pair.coinAInfo.simpleName}-${pair.coinBInfo.simpleName}`;\n            let coinACount = 0,coinBCount = 0 ;\n            if(walletMap){\n                const  balance =  walletMap ? walletMap[ 'LP-' + key ]?.count : 0;\n                const {totalLPToken,totalA,totalB}:AmmDetailBase<any> = ammMap[ 'AMM-' + key ];\n                if(totalA && totalLPToken &&totalB) {\n                    coinACount = totalA / totalLPToken * balance;\n                    coinBCount = totalB / totalLPToken * balance;\n                }\n            }\n            _ammCalcData.myCoinA = {\n                belong: pair.coinAInfo.simpleName,\n                balance: coinACount,\n            }\n            _ammCalcData.myCoinB = {\n                belong: pair.coinBInfo.simpleName,\n                balance: coinBCount,\n            }\n        }\n    }\n\n\n    return  _ammCalcData\n}\n","export function coinPairInit({coinKey, _tradeCalcData, tokenMap, coinMap}: any) {\n    if (coinKey) {\n        const [_match, sell, buy] = coinKey.match(/(\\w+)-(\\w+)/i);\n        // @ts-ignore\n        if (sell && coinMap && coinMap[ sell ]) {\n            _tradeCalcData.coinSell = sell;\n        }// @ts-ignore\n        if (sell!==buy && buy && -1 !== tokenMap[ sell ].tradePairs.findIndex(ele => ele === buy)) {\n            _tradeCalcData.coinBuy = buy;\n            return _tradeCalcData\n        }\n        // else{\n        //     _tradeCalcData.coinBuy = tokenMap[ sell ].tradePairs[ 0 ];\n        // }\n    }\n    if (!_tradeCalcData.coinSell || _tradeCalcData.coinSell === '') {\n        _tradeCalcData.coinSell = 'LRC';\n        _tradeCalcData.coinBuy = 'ETH';\n        return _tradeCalcData\n    }\n    if (!_tradeCalcData.coinBuy || _tradeCalcData.coinBuy === '' || _tradeCalcData.coinBuy === 'undefined') {\n        // @ts-ignore\n        if (tokenMap && tokenMap[ _tradeCalcData.coinSell ].tradePairs) {\n            _tradeCalcData.coinBuy = tokenMap[ _tradeCalcData.coinSell ].tradePairs[ 0 ]\n        } else {\n            _tradeCalcData.coinSell = 'LRC';\n            _tradeCalcData.coinBuy = 'ETH';\n        }\n    }\n    return _tradeCalcData\n}","import store from '../../stores';\nimport { AccountStatus } from '../../state_machine/account_machine_spec';\nimport { setShowAccountInfo, setShowConnect, setShowDeposit } from '@loopring-web/component-lib';\n\nexport enum fnType {\n    UNKNOWN,\n    UNCONNNECTED,\n    CONNECTED,\n    NOACCOUNT,\n    DEPOSITING,\n    DEPOSIT_TO_CONFIREM,\n    UNACTIVATED,\n    ARPROVING,\n    APPROV_TO_CONFIRM,\n    LOCKED,\n    ACTIVATED,\n    DEFAULT\n}\nexport const accountStaticCallBack = (onclickMap: { [key: number ]:[ fn: (props: any) => any, args?: any[]] }, deps?:any[]) => {\n    const {status} = store.getState().account\n    let fn,args;\n    switch (status) {\n        case AccountStatus.UNKNOWN:\n            [fn, args] = onclickMap[ fnType.UNKNOWN ] ? onclickMap[ fnType.UNKNOWN ] : [];\n            break\n        case AccountStatus.UNCONNNECTED:\n            [fn, args] = onclickMap[ fnType.UNCONNNECTED ] ? onclickMap[ fnType.UNCONNNECTED ] : [];\n            break\n        case AccountStatus.CONNECTED:\n            [fn, args] = onclickMap[ fnType.CONNECTED ] ? onclickMap[ fnType.CONNECTED ] : [];\n            break\n        case AccountStatus.NOACCOUNT:\n            [fn, args] = onclickMap[ fnType.NOACCOUNT ] ? onclickMap[ fnType.NOACCOUNT ] : [];\n            break;\n        case AccountStatus.DEPOSITING:\n            [fn, args] = onclickMap[ fnType.DEPOSITING ] ? onclickMap[ fnType.DEPOSITING ] : [];\n            break;\n        case AccountStatus.DEPOSIT_TO_CONFIREM:\n            [fn, args] = onclickMap[ fnType.DEPOSIT_TO_CONFIREM ] ? onclickMap[ fnType.DEPOSIT_TO_CONFIREM ] : [];\n            break;\n        case AccountStatus.UNACTIVATED:\n            [fn, args] = onclickMap[ fnType.UNACTIVATED ] ? onclickMap[ fnType.UNACTIVATED ] : [];\n            break;\n        case AccountStatus.ARPROVING:\n            [fn, args] = onclickMap[ fnType.ARPROVING ] ? onclickMap[ fnType.ARPROVING ] : [];\n            break;\n        case AccountStatus.APPROV_TO_CONFIRM:\n            [fn, args] = onclickMap[ fnType.APPROV_TO_CONFIRM ] ? onclickMap[ fnType.APPROV_TO_CONFIRM ] : [];\n            break;\n        case AccountStatus.LOCKED:\n            [fn, args] = onclickMap[ fnType.LOCKED ] ? onclickMap[ fnType.LOCKED ] : [];\n            break;\n        case AccountStatus.ACTIVATED:\n            [fn, args] = onclickMap[ fnType.ACTIVATED ] ? onclickMap[ fnType.ACTIVATED ] : [];\n            break;\n        default:\n            break;\n    }\n    \n    args = [...(args??[]),...(deps??[])] as [props: any]\n    if (typeof fn === 'function') {\n        return fn.apply(this, args);\n    }\n    // break;\n    // [fn, args] = props[ fnType.DEFAULT ]?props[ fnType.DEFAULT ]:[];\n    // if (typeof fn === 'function') {\n    //     return fn.call(this, args);\n    // }\n}\n\n\nexport const bntLabel: typeof btnClickMap = {\n    [ fnType.UNCONNNECTED ]: [\n        function () {\n            return `labelConnectWallet`\n        }\n    ]\n    , [ fnType.DEFAULT ]: [\n        function () {\n            return `depositTitleAndActive`\n        }\n    ]\n    , [ fnType.ACTIVATED ]: [\n        function () {\n            return undefined\n        }\n    ]\n    , [ fnType.LOCKED ]: [\n        function () {\n            return `labelUnLockLayer2`\n        }\n    ]\n};\n\n\nexport const btnClickMap: { [ key: number ]: [fn: (props: any) => any,  args?: any[]] } = {\n    [ fnType.UNCONNNECTED ]: [\n        function () {\n            // setShowConnect({isShow: true})\n            store.dispatch(setShowConnect({isShow: true}))\n        }\n    ]\n    , [ fnType.DEFAULT ]: [\n        function () {\n            store.dispatch(setShowDeposit({isShow: true}))\n            // ShowDeposit(true)\n        }\n    ]\n\n    , [ fnType.LOCKED ]: [\n        function () {\n            store.dispatch(setShowAccountInfo({isShow: true}))\n        }\n    ]\n};\n\n\n","import store from '../../stores';\nimport { setSlippage } from '@loopring-web/component-lib';\n\ntype Cache = {\n    customSlippage?:number\n}\nexport  const makeCache  = (__cache__:Cache)=>{\n   if(typeof  __cache__.customSlippage !== undefined){\n       store.dispatch(setSlippage(__cache__.customSlippage as number))\n      // store.getState().settings\n   }\n}","import { AmmDetailStore } from '../../stores/Amm/AmmMap';\nimport { AmmPoolSnapshot } from 'loopring-sdk';\nimport { makeMyAmmWithSnapshot, makeMyAmmWithStat } from './makeUIAmmActivityMap';\nimport { AmmUserRewardMap } from 'loopring-sdk/dist/defs/loopring_defs';\nimport { WalletMapExtend } from './makeWallet';\n\nexport const makeMyPoolRowWithSnapShot = <T extends { [ key: string ]: any }>({market,ammSnapShot,walletMap,ammUserRewardMap}: {\n    market:string\n    ammSnapShot: AmmPoolSnapshot,\n    walletMap: WalletMapExtend<T>\n    ammUserRewardMap:AmmUserRewardMap|undefined\n}) => {\n\n    return makeMyAmmWithSnapshot(market,walletMap, ammUserRewardMap, {\n        ammPoolsBalance: ammSnapShot\n    })\n}\n\n                                                                        \nexport const makeMyPoolRowWithPoolState = <T extends { [ key: string ]: any }>({market,ammDetail,walletMap,ammUserRewardMap}: {\n    market:string\n    ammDetail: AmmDetailStore<T>,\n    walletMap: WalletMapExtend<T>\n    ammUserRewardMap:AmmUserRewardMap|undefined\n}) => {\n    if(walletMap && ammDetail){\n        return makeMyAmmWithStat (market,walletMap, ammUserRewardMap, ammDetail)\n    }\n    return undefined\n}","import { TickerData } from 'loopring-sdk';\nimport store from '../../stores';\nimport { FloatTag,TradeFloat } from '@loopring-web/component-lib/src/static-resource';\nimport { volumeToCountAsBigNumber } from './volumeToCount';\nimport { Ticker, TickerMap } from '../../stores/ticker';\nimport { LoopringMap } from 'loopring-sdk/dist/defs/loopring_defs';\n\nexport const makeTickView = (tick: TickerData) => {\n    // const {forex} = store.getState().system;\n\n    const price = !isNaN(tick.close) ? tick.close : 0\n\n    const floatTag = (isNaN(tick.close) || isNaN(tick.open))  || tick.open === tick.close ? FloatTag.none : \n        tick.close > tick.open ? FloatTag.increase : FloatTag.decrease\n\n    let _tradeFloat: Partial<TradeFloat> = {\n        change: (tick.close - tick.open) / tick.open,\n        timeUnit: '24h',\n        priceYuan: price,\n        priceDollar: price,\n        floatTag,\n        reward: 0,\n        // APY: 0,\n    }\n\n    return _tradeFloat;\n}\nexport  const makeTickerMap =  <R extends {[key:string]:any}>({tickerMap}:{tickerMap:LoopringMap<TickerData>}):TickerMap<{[key:string]:any}>=>{\n    const {faitPrices, forex} = store.getState().system;\n    return Reflect.ownKeys(tickerMap).reduce((prev, key) => {\n        const item: TickerData = tickerMap[ key as any ];\n        if (item && item.base && forex && faitPrices && (faitPrices[ item.base ] || faitPrices[ 'USDT' ])) {\n            const volume = volumeToCountAsBigNumber(item.base, item.base_token_volume);\n            //FIX: DIE is not in faitPrices\n            const priceDollar = volume?.times(faitPrices[ item.base ] ? faitPrices[ item.base ].price : faitPrices[ 'USDT' ].price);\n            const priceYuan = priceDollar?.times(forex);\n            const change = item.change && item.change !== 0 ? item.change * 100 : undefined;\n\n            prev[ key as keyof R] = {\n                // ...item,\n                timeUnit: '24h',\n                priceDollar: priceDollar?.toNumber() === 0 ? undefined : priceDollar?.toNumber(),\n                priceYuan: priceYuan?.toNumber() === 0 ? undefined : priceYuan?.toNumber(),\n                volume: volume?.toNumber() === 0 ? undefined : volume?.toNumber(),\n                floatTag: item.close > item.open ? 'increase' : 'decrease',\n                change: change,\n                close: isNaN(item.close) ? undefined : item.close,\n                high: item.high === 0 ? undefined : item.high,\n                low: item.low === 0 ? undefined : item.high,\n                // APY: 0,\n                reward: 0,\n                rewardToken: '',\n                __rawTicker__: item,\n            } as Ticker;\n        }\n        return prev\n    }, {} as TickerMap<R>)\n}\n","import { AmmMap } from '../../stores/Amm/AmmMap';\nimport { AmmPoolSnapshot, getBaseQuote, LoopringMap, TickerData, TokenInfo, TokenVolumeV3 } from 'loopring-sdk';\nimport { LoopringAPI } from '../../stores/apis/api';\nimport * as fm from 'loopring-sdk';\nimport { BIG10 } from '../../defs/swap_defs';\nimport { getToken } from 'utils/swap_calc_utils';\nimport { CoinMap, CustomError, ErrorMap } from '@loopring-web/component-lib/src/static-resource';\nimport { volumeToCountAsBigNumber } from './volumeToCount';\n\nexport const pairDetailBlock = <C extends { [ key: string ]: any }, I extends { [ key: string ]: any }>({\n                                                                                                           coinKey,\n                                                                                                           ammKey,\n                                                                                                           ammMap\n                                                                                                       }: { coinKey: string, ammKey: string, ammMap: AmmMap<C, I> }):\n    Promise<{\n        ammPoolsBalance: AmmPoolSnapshot,\n        tickMap:  LoopringMap<TickerData>\n}> => {\n    // const exchangeApi = exchangeAPI();\n    // const ammpoolApi = ammpoolAPI();\n    return new Promise((resolve, reject) => {\n        if(LoopringAPI.ammpoolAPI && LoopringAPI.exchangeAPI ) {\n            Promise.all([\n                LoopringAPI.ammpoolAPI.getAmmPoolSnapshot({poolAddress: ammMap[ ammKey ].address}),\n                LoopringAPI.exchangeAPI.getMixTicker({market: coinKey})])\n                // exchangeApi.getMarketTrades({market:coinKey})])\n                //{raw_data},\n                .then(([{ammPoolSnapshot}, {tickMap}]) => {\n                    resolve({\n                        ammPoolsBalance: ammPoolSnapshot,\n                        tickMap,\n                    })\n                })\n\n        }else{\n            reject(new CustomError(ErrorMap.NO_SDK))\n        }\n       \n    })\n}\n\nexport const pairDetailDone = <C>({coinKey, market,ammPoolsBalance, tokenMap,tickerData, _tradeCalcData, coinMap, marketCoins}:any)=>{\n\n    const [, coinSell, coinbuy] = coinKey.match(/(\\w+)-(\\w+)/i)\n    let stob:number|undefined;\n    if (tickerData.base === coinSell) {\n        // const ticker: TickerData = tickMap[market]\n        stob = Number(tickerData.close)\n\n    } else{\n        // const ticker: TickerData = tickMap[market]\n        stob = Number(tickerData.close)!==0? 1/Number(tickerData.close): 0\n    }\n    if(isNaN(stob) && ammPoolsBalance){\n        const {base, quote} = getBaseQuote(coinKey)\n\n        // const baseToken: TokenInfo = getToken(tokenMap, base)\n        // const quoteToken: TokenInfo = getToken(tokenMap, quote)\n        // const baseVol = (fm.toBig(poolBaseTokenVol.volume).div(BIG10.pow(baseToken.decimals)))\n        // const quoteVol = (fm.toBig(quoteBaseTokenVol.volume).div(BIG10.pow(quoteToken.decimals)))\n        //\n        // stob = volumeToCountAsBigNumber(base,poolBaseTokenVol.volume)?.div(\n        //     volumeToCountAsBigNumber(quote,quoteBaseTokenVol.volume) || 1\n        // ) .toNumber()\n        // console.log('1', base, poolBaseTokenVol, quote, quoteBaseTokenVol)\n        //baseToken.tokenId === quoteBaseTokenVol.tokenId && quoteToken.tokenId === poolBaseTokenVol.tokenId) {\n        // const quoteVol = (fm.toBig(quoteBaseTokenVol.volume).div(BIG10.pow(baseToken.decimals)))\n        // const baseVol = (fm.toBig(poolBaseTokenVol.volume).div(BIG10.pow(quoteToken.decimals)))\n        //baseVol.div(quoteVol).toNumber()\n        // console.log('2', base, poolBaseTokenVol, quote, quoteBaseTokenVol)\n        //ErrorMap.NOTS\n        const poolBaseTokenVol: TokenVolumeV3 = ammPoolsBalance.pooled[0];\n        const quoteBaseTokenVol: TokenVolumeV3 = ammPoolsBalance.pooled[1];\n        let poolVolumn:[baseVol:any, quoteVol:any];\n        if ( base && quote && tokenMap[base].tokenId === poolBaseTokenVol.tokenId ) {\n            poolVolumn =  [[base,poolBaseTokenVol.volume],[quote,quoteBaseTokenVol.volume]]\n        } else if (base && quote && tokenMap[base].tokenId === quoteBaseTokenVol.tokenId){\n            poolVolumn =  [[quote,quoteBaseTokenVol.volume],[base,poolBaseTokenVol.volume]]\n        } else {\n            throw new CustomError(ErrorMap.NO_SUPPORT_PAIR)\n        }\n        let [baseVol,quoteVol]  = poolVolumn\n        if(baseVol && quoteVol){\n            // stob = volumeToCountAsBigNumber(baseVol[0],baseVol[1])?.div(\n            //     volumeToCountAsBigNumber(quoteVol[0],quoteVol[1]) || 1\n            // ) .toNumber()\n            stob = volumeToCountAsBigNumber(quoteVol[0],quoteVol[1])?.div(\n                volumeToCountAsBigNumber(baseVol[0],baseVol[1]) || 1).toNumber()\n        }\n    }\n\n    _tradeCalcData.StoB = stob;\n    _tradeCalcData.BtoS = stob !== 0 && stob !== undefined? 1 / (stob * 1.0): 0;\n    _tradeCalcData.sellCoinInfoMap = coinMap && marketCoins?.reduce((prev: any, item: string | number) => {\n        return {...prev, [ item ]: coinMap[ item ]}\n    }, {} as CoinMap<C>)\n    _tradeCalcData.buyCoinInfoMap = coinMap && tokenMap && tokenMap[ _tradeCalcData.coinSell as string ].tradePairs?.reduce((prev: any, item: string | number) => {\n        return {...prev, [ item ]: coinMap[ item ]}\n    }, {} as CoinMap<C>);\n\n    return {\n        _tradeCalcData\n    }\n    //setPair();\n}","import store from '../../stores';\nimport { WalletMap,WalletCoin,CoinKey } from '@loopring-web/component-lib/static-resource';\nimport * as fm from 'loopring-sdk';\nimport { fromWEI } from '../../utils/swap_calc_utils';\nimport { UserBalanceInfo } from 'loopring-sdk';\nexport type WalletMapExtend<C> =    {\n    [K in CoinKey<C>]?: WalletCoin<C> & {\n    detail:UserBalanceInfo\n}\n}\n\n\n// export const makeWalletLayer1 = <C extends { [ key: string ]: any }>():{ walletMap: WalletMapExtend<C> | undefined } => {\n//     const {walletLayer1} = store.getState().walletLayer1;\n//     const {tokenMap} = store.getState().tokenMap;\n//     let walletMap: WalletMapExtend<C> | undefined;\n//     if (walletLayer1) {\n//         walletMap = Reflect.ownKeys(walletLayer1).reduce((prev, item) => {\n//             const {total, locked, pending: {withdraw}} = walletLayer1[ item as string ];\n//             const countBig = fm.toBig(total).minus(fm.toBig(locked)).minus(fm.toBig(withdraw)).toString()\n//             return {\n//                 ...prev, [ item ]: {\n//                     belong: item,\n//                     count: fromWEI(tokenMap, item, countBig),\n//                     detail: walletLayer1[ item as string ]\n//                 }\n//             }\n//         }, {} as  WalletMapExtend<C> )\n//     }\n//\n//     return {walletMap}\n// }\n\nexport const makeWallet = <C extends { [ key: string ]: any }>():{ walletMap: WalletMapExtend<C> | undefined } => {\n    const {walletLayer2} = store.getState().walletLayer2;\n    const {tokenMap} = store.getState().tokenMap;\n    let walletMap: WalletMapExtend<C> | undefined;\n    if (walletLayer2) {\n        walletMap = Reflect.ownKeys(walletLayer2).reduce((prev, item) => {\n            const {total, locked, pending: {withdraw}} = walletLayer2[ item as string ];\n            const countBig = fm.toBig(total).minus(fm.toBig(locked)).minus(fm.toBig(withdraw)).toString()\n            return {\n                ...prev, [ item ]: {\n                    belong: item,\n                    count: fromWEI(tokenMap, item, countBig),\n                    detail: walletLayer2[ item as string ]\n                }\n            }\n        }, {} as  WalletMapExtend<C> )\n    }\n\n    return {walletMap}\n}","export function myLog(message?: any, ...optionalParams: any[]) {\n    if (process.env.NODE_ENV !== 'production') {\n        console.log(message, ...optionalParams)\n    }\n}\n","import { Contract } from '@ethersproject/contracts'\nimport { getAddress } from '@ethersproject/address'\nimport { AddressZero } from '@ethersproject/constants'\nimport { BigNumber } from '@ethersproject/bignumber'\n\nimport { JsonRpcSigner, Web3Provider } from '@ethersproject/providers'\n\nimport { UnsupportedChainIdError } from '@web3-react/core'\n\nimport {\n  NoEthereumProviderError,\n  UserRejectedRequestError as UserRejectedRequestErrorInjected\n} from '@web3-react/injected-connector'\nimport { UserRejectedRequestError as UserRejectedRequestErrorWalletConnect } from '@web3-react/walletconnect-connector'\n\nimport { ChainId } from 'loopring-sdk'\n\nexport function getLibrary(provider: any): Web3Provider {\n  const library = new Web3Provider(provider)\n  library.pollingInterval = 10000\n  return library\n}\n\nexport function getErrorMessage(error: Error) {\n  if (error instanceof NoEthereumProviderError) {\n    return 'No Ethereum browser extension detected, install MetaMask on desktop or visit from a dApp browser on mobile.'\n  } else if (error instanceof UnsupportedChainIdError) {\n    return 'You\\'re connected to an unsupported network.'\n  } else if (\n    error instanceof UserRejectedRequestErrorInjected ||\n    error instanceof UserRejectedRequestErrorWalletConnect\n  ) {\n    return 'Please authorize this website to access your Ethereum account.'\n  } else {\n    console.error(error)\n    return 'An unknown error occurred. Check the console for more details.'\n  }\n}\n\nexport function transactionChecker(web3: any, address: string) {\n  const account = address.toLowerCase()\n\n  const subscription = web3.eth.subscribe('pendingTransactions', (err: any, res: any) => {\n    if (err) {\n      console.error(err)\n    }\n  })\n\n  return function watchTransactions() {\n    console.log('Watch Transactions...')\n    subscription.on('data', (txHash: any) => {\n      setTimeout(async () => {\n        try {\n          let tx = await web3.eth.getTransaction(txHash)\n          if (tx.to && tx.to.toLowerCase() === account) {\n            const value = web3.utils.fromWei(tx.value, 'ether')\n            if (value > 0) {\n              console.log('watchTransactions value:', value)\n            }\n          }\n        } catch (err) {\n          console.error(err)\n        }\n      }, 60 * 1000)\n    })\n  }\n}\n\n// returns the checksummed address if the address is valid, otherwise returns false\nexport function isAddress(value: any): string | false {\n  try {\n    return getAddress(value)\n  } catch {\n    return false\n  }\n}\n\nconst ETHERSCAN_PREFIXES: { [chainId in ChainId]: string } = {\n  1: '',\n  5: 'goerli.',\n}\n\nexport function getEtherscanLink(\n  chainId: ChainId,\n  data: string,\n  type: 'transaction' | 'token' | 'address' | 'block'\n): string {\n  const prefix = `https://${ETHERSCAN_PREFIXES[chainId] || ETHERSCAN_PREFIXES[1]}etherscan.io`\n\n  switch (type) {\n    case 'transaction': {\n      return `${prefix}/tx/${data}`\n    }\n    case 'token': {\n      return `${prefix}/token/${data}`\n    }\n    case 'block': {\n      return `${prefix}/block/${data}`\n    }\n    case 'address':\n    default: {\n      return `${prefix}/address/${data}`\n    }\n  }\n}\n\n// shorten the checksummed version of the input address to have 0x + 4 characters at start and end\nexport function shortenAddress(address: string, chars = 4): string {\n  const parsed = isAddress(address)\n  if (!parsed) {\n    throw Error(`Invalid 'address' parameter '${address}'.`)\n  }\n  return `${parsed.substring(0, chars + 2)}...${parsed.substring(42 - chars)}`\n}\n\n// add 10%\nexport function calculateGasMargin(value: BigNumber): BigNumber {\n  return value.mul(BigNumber.from(10000).add(BigNumber.from(1000))).div(BigNumber.from(10000))\n}\n\n// account is not optional\nexport function getSigner(library: Web3Provider, account: string): JsonRpcSigner {\n  return library.getSigner(account).connectUnchecked()\n}\n\n// account is optional\nexport function getProviderOrSigner(library: Web3Provider, account?: string): Web3Provider | JsonRpcSigner {\n  return account ? getSigner(library, account) : library\n}\n\n// account is optional\nexport function getContract(address: string, ABI: any, library: Web3Provider, account?: string): Contract {\n  if (!isAddress(address) || address === AddressZero) {\n    throw Error(`Invalid 'address' parameter '${address}'.`)\n  }\n\n  return new Contract(address, ABI, getProviderOrSigner(library, account) as any)\n}\n\nexport function escapeRegExp(string: string): string {\n  return string.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&') // $& means the whole matched string\n}\n\nexport async function isContract(web3: any, address: string) {\n  const code = await web3.eth.getCode(address)\n  return code && code.length > 2\n}\n\nexport function getShortAddr(address: string) {\n    if (!address || address === undefined || address === null || address.trim() === '') {\n        console.log('getShortAddr got empty!')\n        return undefined\n    }\n    const convertAddr = address.substr(0, 6) + '...' + address.substr(address.length - 4)\n    return convertAddr\n}\n","import { debounce } from 'lodash'\nimport React, { useEffect } from 'react'\nimport { UserStorage } from 'storage'\n\nimport { useCheckAccStatus, } from 'stores/account/hook'\n\nimport { \n  useUpdateChainId,\n  useUpdateExchangeInfo, \n  useUpdateExchangeMarkets, \n  useUpdateTokens, \n  useUpdateAmmPoolConf,\n  useUpdateAmmActivityRules,\n  useUpdateAmmPoolStats,\n} from 'stores/trading/hook'\n\nenum WindowEvent {\n  Click = 'click',\n  Scroll = 'scroll',\n  Mouseover = 'mouseover',\n}\n\nconst events = [WindowEvent.Click, WindowEvent.Scroll]\n\nconst forceReset = debounce(() => { UserStorage.checkTimeout(true) }, 100)\n\nexport const GlobalProvider = ({ children }: { children: React.ReactNode }) => {\n\n  useUpdateExchangeInfo()\n  useUpdateExchangeMarkets()\n  useUpdateTokens()\n  useUpdateAmmPoolConf()\n  useUpdateAmmActivityRules()\n  useUpdateAmmPoolStats()\n  useUpdateChainId()\n\n  useCheckAccStatus()\n\n  useEffect(() => {\n\n    events.forEach((event: string) => {\n      document.addEventListener(event, forceReset)\n    })\n\n    return () => {\n\n      events.forEach((event: string) => {\n        document.removeEventListener(event, forceReset)\n      })\n    }\n\n  }, [])\n\n  return (\n    <React.Fragment>\n      { children}\n    </React.Fragment>\n  )\n\n}\n","import React, { useState, useEffect } from 'react'\nimport styled from '@emotion/styled/macro'\nimport { useTranslation } from 'react-i18next'\n\nimport { useWeb3React } from '@web3-react/core'\n\nimport { network } from 'networks/web3_connectors'\n\nimport { useEagerConnect, useInactiveListener } from 'hooks/web3/useWeb3'\nimport { reset, setAccountStatus } from 'stores/account/reducer'\n\nimport { ChainId, NetworkContextName } from 'loopring-sdk'\n\n// import Loader from 'components/modals/Loader'\nimport { useDispatch } from 'react-redux'\nimport { AccountStatus } from 'state_machine/account_machine_spec'\n\nconst MessageWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  height: 20rem;\n`\n\nconst Message = styled.h2`\n  color: ${({ theme }) => theme.colorBase.error};\n`\n\nexport function Web3ReactManager({ children }: { children: JSX.Element }) {\n  const { t } = useTranslation()\n  const { active } = useWeb3React()\n  const { active: networkActive, error: networkError, activate: activateNetwork } = useWeb3React(NetworkContextName)\n\n  // try to eagerly connect to an injected provider, if it exists and has granted access already\n  const triedEager = useEagerConnect()\n\n  // after eagerly trying injected, if the network connect ever isn't active or in an error state, activate itd\n  useEffect(() => {\n    if (triedEager && !networkActive && !networkError && !active) {\n      activateNetwork(network)\n    }\n  }, [triedEager, networkActive, networkError, activateNetwork, active])\n\n  // when there's no account connected, react to logins (broadly speaking) on the injected provider, if it exists\n  \n  const dispatch = useDispatch()\n\n  const onReConnectInjected = () => {\n    console.log('onReConnectInjected')\n    dispatch(reset(undefined))\n    dispatch(setAccountStatus(AccountStatus.UNCONNNECTED))\n  }\n  \n  useInactiveListener(onReConnectInjected, !triedEager)\n\n  // handle delayed loader state\n  const [showLoader, setShowLoader] = useState(false)\n  useEffect(() => {\n    const timeout = setTimeout(() => {\n      setShowLoader(true)\n    }, 600)\n\n    return () => {\n      clearTimeout(timeout)\n    }\n  }, [])\n\n  // on page load, do nothing until we've tried to connect to the injected connector\n  if (!triedEager) {\n    return null\n  }\n\n  // if the account context isn't active, and there's an error on the network context, it's an irrecoverable error\n  if (!active && networkError) {\n    return (\n      <MessageWrapper>\n        <Message>{t('unknownError')}</Message>\n      </MessageWrapper>\n    )\n  }\n\n  // if neither context is active, spin\n  if (!active && !networkActive) {\n    return showLoader ? (\n      <MessageWrapper>\n        {/*<Loader />*/}\n      </MessageWrapper>\n    ) : null\n  }\n\n  return children\n}\n","import React from 'react'\n\nexport const DevWrapper = ({ children }: { children: React.ReactNode }) => {\n\n  return (\n    <React.Fragment>\n      {\n        process.env.NODE_ENV !== 'production' ? (\n          <>\n          {children}\n          </>\n        ) : null\n      }\n    </React.Fragment>\n  )\n\n}\n\n","import { Subject } from 'rxjs';\n// import { TradeFloat } from '@loopring-web/component-lib/src/static-resource';\nimport { LoopringMap } from 'loopring-sdk/dist/defs/loopring_defs';\nimport { TickerData } from 'loopring-sdk';\nimport { makeTickerMap } from '../hooks/help';\nimport { TickerMap } from '../stores/ticker';\n\nconst subject = new Subject<{ tickerMap: TickerMap<{ [ key: string ]: any }> }>();\n\n// export type TickerMap<R> = {\n//     [key in keyof R]:TradeFloat\n// }\n// <R extends {[key:string]:any}>\n  //<R>\nexport const tickerService = {\n    sendTicker: (_tickerMap:LoopringMap<TickerData>) => {\n       const tickerMap:TickerMap<{[key:string]:any}> = makeTickerMap({tickerMap:_tickerMap})\n       subject.next({ tickerMap })\n    },\n    // clearMessages: () => subject.next(),\n    onSocket: () => subject.asObservable()\n};","export enum STATUS {\n    UNSET='UNSET',\n    PENDING='PENDING',\n    ERROR='ERROR',   // success failed timeout is Done\n    DONE='DONE',   // success failed timeout is Done\n}\n","import {\n    ChainId,\n    getAccountArg,\n    getAmmpoolArg,\n    getCandlestickArg,\n    getOrderArg,\n    getOrderBookArg,\n    getTickerArg,\n    getTradeArg,\n    toBig,\n    WsTopicType\n} from 'loopring-sdk';\nimport { LoopringAPI } from '../stores/apis/api';\nimport store from '../stores';\nimport { updateSocketURL } from '../stores/system';\nimport { tickerService } from './tickerService';\nimport { ammPoolService } from './ammPoolService';\nimport { CustomError, ErrorMap } from '@loopring-web/component-lib/static-resource';\n\nexport type socketEventMap = { fn: (e: MessageEvent, props?: { [ key: string ]: any }) => any, deps?: any[] }\n\nexport enum SocketEventType {\n    pingpong = 'pingpong',\n    account = \"account\",\n    order = \"order\",\n    orderbook = \"orderbook\",\n    trade = \"trade\",\n    ticker = \"ticker\",\n    candlestick = \"candlestick\",\n    ammpool = \"ammpool\"\n}\n\n\nexport type SocketEventMap = {\n    [key in WsTopicType]: socketEventMap\n}\n\nconst pingPong = {\n    fn: (e: MessageEvent) => {\n        if (e.data === 'ping') {\n            // @ts-ignore\n            global.looperingSocket.send('pong')\n        }\n    }\n}\n\n//@ts-ignore\nwindow.socketEventMap = {\n    [ SocketEventType.pingpong ]: pingPong\n} as SocketEventMap;\n\nexport const addSocketEvents = (key: string, event: socketEventMap) => {\n    // @ts-ignore\n    window.socketEventMap = {\n        // @ts-ignore\n        ...window.socketEventMap,\n        [ key ]: event\n    }\n}\nexport const removeSocketEvents = (key: string) => {\n    // @ts-ignore\n    if (window.socketEventMap && window.socketEventMap[ key ]) {\n        // @ts-ignore\n        delete window.socketEventMap[ key ]\n    }\n}\nexport const resetSocketEvents = () => {\n    // @ts-ignore\n    window.socketEventMap = {\n        [ SocketEventType.pingpong ]: pingPong\n    }\n}\n\nexport const isConnectSocket = () => {\n    const global: Window = window || globalThis;\n    // @ts-ignore\n    if (global.looperingSocket && global.looperingSocket.send) {\n        return true;\n    } else {\n        return false\n    }\n}\nexport const socketClose = async () => {\n    const global = window || globalThis;\n    // @ts-ignore\n    let ws: WebSocket | undefined = global.loopringSocket;\n\n    return new Promise((reolve, reject) => {\n        if (ws) {\n            ws.onclose = function (e) {\n                reolve(`Socket is closed, ${e.reason}`)\n            };\n            ws.close();\n        } else {\n            Promise.resolve('no websocket')\n        }\n    })\n}\nconst makeTopics = (topics: any, apiKey?: string) => {\n    let data: any = {\n        op: 'sub',\n        unsubscribeAll: 'true',\n        topics: topics,\n    }\n\n    if (apiKey) {\n        data.apiKey = apiKey\n    }\n    // console.log('Socket>>Socket',JSON.stringify(data));\n    return JSON.stringify(data)\n    // sendMessage(flat_txt)\n}\nexport const clearInitTimer = (init?: boolean) => {\n    const global: any = window || globalThis;\n\n    if (global.__wsTimer__) {\n        if (global.__wsTimer__.timer && global.__wsTimer__.timer !== -1) {\n            clearTimeout(global.__wsTimer__.timer)\n        }\n        global.__wsTimer__.timer = -1\n        global.__wsTimer__.count++;\n    }\n    if (init) {\n        global.__wsTimer__ = {\n            //...global.__wsTimer__,\n            timer: -1,\n            count: 0\n        }\n    }\n}\nexport const socketConnect = async ({chainId, topics, apiKey}: {\n    chainId: ChainId | 'unknown',\n    topics: any[],\n    apiKey?: string\n}) => {\n    try {\n        if (chainId !== 'unknown' && LoopringAPI.wsAPI && topics) {\n            const url = ChainId.MAINNET === chainId ? process.env.REACT_APP_API_URL : process.env.REACT_APP_API_URL_UAT;\n            const {wsKey} = await LoopringAPI.wsAPI.getWsKey();\n            let baseSocket: string = `wss://ws.${url}/v3/ws?wsApiKey=${wsKey}`;\n            store.dispatch(updateSocketURL({socketURL: baseSocket}));\n            const global: any = window || globalThis;\n\n            let ws: WebSocket;\n            ws = new WebSocket(baseSocket);\n            // @ts-ignore\n            global.looperingSocket = ws;\n            ws.onopen = function () {\n                console.warn('Socket>>Socket', \"WebSocket is open now.\");\n                // @ts-ignore\n                ws.send(makeTopics(topics))\n            };\n            ws.onmessage = function (e) {\n                const {data} = e;\n                // data.topic.topic;\n                if (data === 'ping') {\n                    // console.log('Socket>>Socket ping:', e);\n                    global.socketEventMap.pingpong.fn.call(global.socketEventMap.pingpong.deps, e);\n                } else {\n                    const result = JSON.parse(data);\n                    const {topics, topic} = result;\n                    if (topics) {\n                        // console.log('Socket>>Socket topics first return', topics);\n                    }\n                    if (topic && topic.topic) {\n                        const {topic: {topic: _topic}, data} = result\n                        // {\n                        //     \"topic\" : {\n                        //         \"topic\" : \"ticker\",\n                        //             \"market\" : \"LRC-USDT\"\n                        //     },\n                        //     \"ts\" : 1626062177522,\n                        //         \"data\" : [ \"LRC-USDT\", \"1626062177173\", \"1614688563700000000000000\", \"381151436640\", \"0.2315\", \"0.2408\", \"0.2309\", \"0.2408\", \"869\", \"0.2406\", \"0.2413\" ]\n                        // }\n                        // console.log('Socket>>Socket topic', _topic, data);\n                        global.socketEventMap[ topic.topic ].fn.call(global.socketEventMap[ topic.topic ].deps, data)\n\n                    }\n\n                }\n                return false;\n            };\n            ws.onclose = async function (e) {\n                // @ts-ignore\n                console.error('Socket>>Socket', e);\n                if (global.looperingSocket) {\n                    global.looperingSocket = undefined;\n                }\n                console.log('Socket>>Socket', 'Socket is closed. Reconnect will be attempted in 1 second.', e.reason);\n                clearInitTimer()\n                if (global.__wsTimer__.count < 5) {\n                    global.__wsTimer__.timer = setTimeout(function () {\n                        socketConnect.call(global, {chainId, topics, apiKey});\n                    }, 1000 * global.__wsTimer__.count);\n                }\n            };\n            ws.onerror = function (err: Event) {\n                console.error('Socket>>Socket', 'Socket encountered error:', 'Closing socket');\n            };\n\n        }\n    } catch (error) {\n        console.error('Socket>>Socket', 'connect error, not from reconnect')\n\n        // @ts-ignore\n        if (global.looperingSocket) {\n            // @ts-ignore\n            global.looperingSocket.close()\n        }\n\n\n    }\n}\n\nexport const socketSendMessage = async ({socket, chainId, apiKey}: {\n    chainId: ChainId | 'unknown',\n    socket: { [ key: string ]: string[] }\n    apiKey?: string\n}): Promise<boolean> => {\n    try {\n        if (socket && Reflect.ownKeys(socket).length) {\n            //register ping pong event\n            clearInitTimer(true);\n            resetSocketEvents();\n            const {topics} = makeMessageArray({socket});\n            if (!isConnectSocket()) {\n                await socketConnect({chainId, topics, apiKey})\n            } else {\n                const global: Window = window || globalThis;\n                // @ts-ignore\n                global.looperingSocket.send(makeTopics(topics))\n\n            }\n            return true\n        } else {\n            if (!isConnectSocket()) {\n                socketClose();\n            }\n            return false\n        }\n    } catch (error) {\n        throw  new CustomError(ErrorMap.SOCKET_ERROR)\n    }\n\n}\n\n\nexport const makeMessageArray = ({socket}: { socket: { [ key: string ]: string[] } }): {\n    topics: any[]\n} => {\n    let topics: any[] = [], list: any[] = []; // let registerDispatch = [];\n    Reflect.ownKeys(socket).forEach((eventType) => {\n        switch (eventType) {\n            case  SocketEventType.ticker:\n                list = socket[ SocketEventType.ticker ].map(key => getTickerArg(key))\n                if (list && list.length) {\n                    makeReceiveMessageCallback(SocketEventType.ticker)\n                    topics = [...topics, ...list];\n                }\n                break\n            case  SocketEventType.account:\n                if(socket[ SocketEventType.account ]){\n                    list = [getAccountArg()]\n                }\n                if (list && list.length) {\n                    makeReceiveMessageCallback(SocketEventType.account)\n                    topics = [...topics, ...list];\n                }\n                break;\n            case  SocketEventType.order:\n                //FIX:  make order Topic\n                list = socket[ SocketEventType.order ].map(key => getOrderArg(key))\n                if (list && list.length) {\n                    makeReceiveMessageCallback(SocketEventType.order)\n                    topics = [...topics, ...list];\n                }\n                break\n            case  SocketEventType.orderbook:\n                //FIX:  make orderbook Topic\n                list = socket[ SocketEventType.orderbook ].map(key => getOrderBookArg(key, 0))\n                if (list && list.length) {\n                    makeReceiveMessageCallback(SocketEventType.orderbook)\n                    topics = [...topics, ...list];\n                }\n                break\n            case  SocketEventType.trade:\n                list = socket[ SocketEventType.trade ].map(key => getTradeArg(key))\n                if (list && list.length) {\n                    makeReceiveMessageCallback(SocketEventType.trade)\n                    topics = [...topics, ...list];\n                }\n                break\n            case  SocketEventType.candlestick:\n                list = socket[ SocketEventType.candlestick ].map(key => getCandlestickArg(key))\n                if (list && list.length) {\n                    makeReceiveMessageCallback(SocketEventType.candlestick)\n                    topics = [...topics, ...list];\n                }\n                break\n            case  SocketEventType.ammpool:\n                list = socket[ SocketEventType.ammpool ].map(key => getAmmpoolArg(key))\n                if (list && list.length) {\n                    makeReceiveMessageCallback(SocketEventType.ammpool)\n                    topics = [...topics, ...list];\n                }\n                break\n        }\n    })\n    return {topics}\n}\nconst SocketEventMap = {\n    // PING_PONG : (e)=>{\n    //\n    // },\n    [ SocketEventType.account ]: (_e: any) => {\n\n    },\n    [ SocketEventType.order ]: (_e: any) => {\n\n    },\n    [ SocketEventType.orderbook ]: (_e: any) => {\n\n    },\n    [ SocketEventType.trade ]: (_e: any) => {\n\n    },\n    [ SocketEventType.ticker ]: (data: string[]) => {\n        const [symbol, timestamp, size, volume, open, high, low, close, count, bid, ask] = data;\n        // @ts-ignore\n        const [, base, quote] = symbol.match(/(\\w+)-(\\w+)/i);\n        const base_token_volume = size;\n        const quote_token_volume = volume;\n        const change = open === undefined || Number(open) === 0 ? undefined : (toBig(close).minus(open)).div(open)\n        // @ts-ignore\n        tickerService.sendTicker({\n            [ symbol ]: {\n                symbol, base, quote,\n                base_token_volume,\n                quote_token_volume,\n                timestamp: Number(timestamp),\n                change,\n                base_fee_amt: undefined,\n                quote_fee_amt: undefined,\n                open, high, low, close, count, bid, ask\n            }\n        })\n    },\n    [ SocketEventType.candlestick ]: (_e: any) => {\n\n    },\n    [ SocketEventType.ammpool ]: (data: string[]) => {\n        // const [market,timestamp,size,volume,open,high,low,close,count,bid,ask] = data;\n        // @ts-ignore\n        const [poolName, poolAddress, pooled, [tokenId, volume], risky] = data;\n        // @ts-ignore\n        ammPoolService.sendAmmPool({poolName, poolAddress, pooled, lp: {tokenId, volume}, risky})\n    },\n}\n\n\nexport const makeReceiveMessageCallback = (type: keyof typeof SocketEventType) => {\n\n\n    addSocketEvents(type, {\n        // @ts-ignore\n        fn: SocketEventMap [ type ]\n    })\n}\n\n\n\n\n\n","import { Trans, useTranslation } from 'react-i18next';\nimport { Box, Container, Link, Typography } from '@material-ui/core';\nimport styled from '@emotion/styled';\nimport { ErrorObject } from '@loopring-web/component-lib/src/static-resource';\nimport { getContactInfo } from '../../utils/dt_tools';\n\nconst StyleBox = styled(Box)`\n  background-image: url('./static/images/error_bg.png');\n  background-repeat: no-repeat;\n  background-size: contain;\n  background-position: bottom;\n  white-space: pre-wrap;\n  //h2{\n  //  position: relative;\n  //}\n` as typeof Box\n\nexport const ErrorPage = ({messageKey}: ErrorObject) => {\n    // const {messageKey}: { id?:string,messageKey:string } = {messageKey: 'errorMessageTokenMapIsEmpty'};\n    //TODO: checkRouter\n    const {t} = useTranslation('error');\n    const message = `labelConnectUs`;\n    return <>\n        <Container>\n            {/*style={{height: '100%' }}*/}\n            <StyleBox flex={1} display={'flex'} alignItems={'flex-start'} justifyContent={'center'}\n                      flexDirection={'column'} marginTop={4} height={680} maxWidth={1200}>\n                {/*<StyleBox>*/}\n                <Box textAlign={'center'} position={'relative'} left={128} top={-64}>\n                    <Typography component={'h2'} variant={'h2'}>\n                        {t(messageKey)}\n                    </Typography>\n                    <Typography marginY={2} component={'p'} variant={'body1'} color={'textSecondary'}>\n                        <Trans i18nKey={message}>\n                            If you believe this is indeed a bug, please <Link\n                            component={'a'}\n                            onClick={(e) => {\n                                window.location.href = getContactInfo();\n                                e.preventDefault();\n                            }}\n                        >contact us</Link> <br/> We would appreciate your feedback\n\n                        </Trans>\n                        {/*{t(message)}*/}\n                        {/*{t(messageKey)}*/}\n                    </Typography>\n                </Box>\n                {/*</StyleBox>*/}\n            </StyleBox>\n        </Container>\n\n        {/*<Footer></Footer>*/}\n    </>\n}\n","// import { i18nInstance as i18n  } from \"@loopring-web/component-lib/static-resource\"\nimport i18n from 'i18next';\n\nconst covertLocale = (rawLocale: string = i18n.language) => {\n    return rawLocale.replace('_', '-')\n}\n\nexport function getLocaleDtFromTs(ts: number | string, locale: string = i18n.language) {\n    if (typeof(ts) === 'string') {\n        ts = parseInt(ts)\n    }\n    const dt = new Date(ts).toLocaleString(covertLocale(locale))\n    return dt\n}\n\nexport function getLocaleDt(dt?: Date, locale: string = i18n.language) {\n    if (dt) {\n        return dt.toLocaleString(covertLocale(locale))\n    }\n    return ''\n}\n\nexport function getContactInfo(subject: string = 'report to loopring website', body: string ='Body Content') {\n    const email = process.env.CONTACT_US_EMAIL ?? 'contact@loopring.io'\n    return `mailto:${email}?subject=${subject}&body=${body}`\n}\n","import store from '../../stores';\nimport { toBig } from 'loopring-sdk';\nimport { BIG10 } from '../../defs/swap_defs';\nimport BigNumber from 'bignumber.js';\n\nexport const volumeToCount = (symbol:string,volumn:string|number|BigNumber,tokenMap= store.getState().tokenMap.tokenMap):number|undefined =>{\n   const result =  volumeToCountAsBigNumber(symbol,volumn,tokenMap);\n   return result? result.toNumber():undefined;\n}\nexport const volumeToCountAsBigNumber = (symbol:string,volumn:string|number|BigNumber,tokenMap= store.getState().tokenMap.tokenMap):BigNumber|undefined =>{\n    if(tokenMap && tokenMap[symbol] && typeof volumn !== 'undefined'){\n        try{\n            return toBig(volumn).div( BIG10.pow(tokenMap[symbol].decimals))\n        }catch (error){\n            throw error;\n        }\n    }else{\n        return undefined;\n    }\n}","import { Subject } from 'rxjs';\nimport { TradeFloat } from '@loopring-web/component-lib/src/static-resource';\n\nconst subject = new Subject();\n\nexport type AmmPoolMap<R> = {\n    [key in keyof R]:TradeFloat\n}\n// <R extends {[key:string]:any}>\n\nexport const ammPoolService = {\n    sendAmmPool: (ammPoolMap:AmmPoolMap<{[key:string]:any}>) => subject.next({ ammPoolMap: ammPoolMap }),\n    // clearMessages: () => subject.next(),\n    onSocket: () => subject.asObservable()\n};","import { WsAPI, ExchangeAPI, AmmpoolAPI, UserAPI, DEFAULT_TIMEOUT, } from 'loopring-sdk'\nimport store, { RootState } from 'stores'\nimport { useSelector } from 'react-redux'\n\nimport { useMemo } from 'react'\n\nfunction useApi(ApiClass: any, timeout = DEFAULT_TIMEOUT) {\n    // const chainId = store.getState().trading.chainId\n    // return new ApiClass(chainId, timeout)\n\n  const { chainId, } = useSelector((state: RootState) => state.trading)\n\n  const genApi = () => {\n      if (!chainId) {\n          return undefined\n      }\n\n      return new ApiClass(chainId, timeout)\n  }\n\n  const api = useMemo(genApi, [ApiClass, chainId, timeout])\n\n  return api\n}\n\nexport function useWsAPI() {\n    return useApi(WsAPI) as WsAPI\n}\n\nexport function useExchangeAPI() {\n    return useApi(ExchangeAPI) as ExchangeAPI\n}\n\nexport function useAmmpoolAPI() {\n    return useApi(AmmpoolAPI) as AmmpoolAPI\n}\n\nexport function useUserAPI() {\n    return useApi(UserAPI) as UserAPI\n}\n","import React from 'react';\nimport { useAmmMap } from '../../../stores/Amm/AmmMap';\nimport { AmmDetail, CustomError, ErrorMap, } from '@loopring-web/component-lib/src/static-resource';\nimport { deepClone } from '../../../utils/obj_tools';\nimport { STATUS } from '../../../stores/constant';\nimport { useTokenMap } from '../../../stores/token';\nimport { useSocket } from '../../../stores/socket';\nimport { useTicker } from '../../../stores/ticker';\n// import { tickerService } from '../../../services/tickerService';\n\nexport function useAmmMapUI<R extends { [ key: string ]: any }, I extends { [ key: string ]: any }>({pageSize}: { pageSize: number }) {\n    const [rawData, setRawData] = React.useState<Array<AmmDetail<any>> | []>([]);\n    const [page, setPage] = React.useState<number>(1);\n    // const [keys, setKeys] = React.useState<string[]>([]);\n    const [timestamp, setTimestamp ] = React.useState<NodeJS.Timer|-1>(-1)\n    const {coinMap} = useTokenMap();\n    const {\n        ammMap,\n        status: ammMapStatus,\n        // errorMessage: errorAmmMap,\n        statusUnset: ammMapStatusUnset,\n        // updateAmmMap,\n    } = useAmmMap();\n    const {\n        tickerMap,\n        status: tickerStatus,\n        // errorMessage: errorTickerMap,\n        statusUnset: tickerStatusUnset,\n        updateTickers,\n    } = useTicker();\n    const {\n        status:socketStatus,\n        // errorMessage: errorTickerMap,\n        statusUnset: socketStatusUnset,\n    } = useSocket();\n    const updateRawData = React.useCallback( (tickerMap) => {\n        try {\n            const _ammMap = deepClone(ammMap);\n            for (let tickerMapKey in tickerMap) {\n                if(_ammMap['AMM-' + tickerMapKey ]){\n                    _ammMap['AMM-' + tickerMapKey ].tradeFloat =  {\n                        ..._ammMap['AMM-' + tickerMapKey ].tradeFloat,\n                        ...tickerMap[ tickerMapKey ],\n                        // APY: _ammMap['AMM-' + tickerMapKey ].APY\n                    }\n\n                }\n            }\n            setRawData(Object.keys(_ammMap).map((ammKey: string) => {\n                if (coinMap) {\n                    _ammMap[ ammKey ][ 'coinAInfo' ] = coinMap[ _ammMap[ ammKey ][ 'coinA' ] ];\n                    _ammMap[ ammKey ][ 'coinBInfo' ] = coinMap[ _ammMap[ ammKey ][ 'coinB' ] ];\n                }\n                return  _ammMap[ ammKey ];\n            }) )\n        } catch (error) {\n            throw new CustomError({...ErrorMap.NO_TOKEN_MAP, options: error})\n        }\n\n    } ,[ammMap]);\n    const updateTickerLoop =  React.useCallback((_keys?:string[])=>{\n\n        if(timestamp !== -1){\n            clearTimeout(timestamp)\n        }\n\n        setTimestamp(setTimeout(()=>{\n            updateTickerLoop(_keys);\n        },60000))\n        \n        //console.log(_keys)\n        setImmediate(updateTickers,_keys)\n    },[])\n\n    const updateTickersUI = React.useCallback((_page) => {\n        setPage(_page);\n        if (ammMap && Object.keys(ammMap).length > 0) {\n            const _keys = []\n            for (let i = (page - 1) * pageSize; i < Object.keys(ammMap).length && i < (page - 1) * pageSize + pageSize; i++) {\n                _keys.push(Object.keys(ammMap)[ i ]);\n            }\n            \n            // setKeys(_keys);\n            updateTickerLoop(_keys);\n            // try{\n            //    // socketStart({})\n            // }catch (error){\n            //\n            // }\n\n\n        }\n    }, [ammMap, pageSize]);\n    React.useEffect(() => {\n        if(ammMap && Object.keys(ammMap).length !== 0) {\n            updateTickersUI(page)\n        }\n    }, []);\n\n    React.useEffect(() => {\n        switch (tickerStatus) {\n            case \"ERROR\":\n                console.log(\"ERROR\", 'get ticker error,ui');\n                tickerStatusUnset()\n                break;\n            case \"PENDING\":\n                break;\n            case \"DONE\":\n                tickerStatusUnset();\n                \n                updateRawData(tickerMap)\n                break;\n            default:\n                break;\n        }\n    }, [tickerStatus, tickerStatusUnset]);\n\n    React.useEffect(() => {\n        switch (ammMapStatus) {\n            case \"ERROR\":\n                console.log(\"ERROR\", 'get ammMap error,ui');\n                ammMapStatusUnset();\n                break;\n            case STATUS.PENDING:\n                console.log(\"PENDING\", 'get ammMap error,ui');\n                break;\n            case STATUS.DONE:\n                ammMapStatusUnset();\n                updateTickersUI(1)\n                break;\n            default :\n                break;\n        }\n    }, [ammMapStatus, ammMapStatusUnset, updateTickersUI]);\n\n\n\n    return {\n        page,\n        rawData,\n        updateTickersUI,\n    }\n}\n\n","import React  from 'react';\nimport detectEthereumProvider from '@metamask/detect-provider';\nimport { useCustomDCEffect } from 'hooks/common/useCustomDCEffect';\nimport { useSystem } from './stores/system';\nimport { ChainId } from 'loopring-sdk';\nimport { useAmmMap } from './stores/Amm/AmmMap';\nimport { STATUS } from './stores/constant';\nimport { useTokenMap } from './stores/token';\nimport { useWalletLayer1 } from './stores/walletLayer1';\nimport { useAccount } from './stores/account/hook';\n\n\n/**\n * @description call it when bootstrap the page or change the network\n */\nexport function useInit(){\n    const [state,setState] = React.useState<keyof typeof STATUS>('PENDING')\n    const systemState = useSystem();\n    const tokenState = useTokenMap();\n    const ammMapState = useAmmMap();\n    const accountState  = useAccount();\n    const walletLayer1State  =  useWalletLayer1()\n    //store.getState().account\n    // const socketState =   useSocket();\n\n    useCustomDCEffect(async() => {\n\n        const handleChainChanged = (chainId: any) => {\n    \n            // const network = chainId == ChainId.GORLI ? NETWORK.Goerli : NETWORK.MAIN\n             systemState.updateSystem({ chainId })\n             window.location.reload();\n        }\n\n        const handleAccountChanged = (accounts: Array<string>) => {\n            window.location.reload()\n        }\n\n        const provider: any = await detectEthereumProvider()\n        if (provider) {\n            const chainId = Number(await provider.request({ method: 'eth_chainId' }))\n            const accounts = await provider.request({ method: 'eth_requestAccounts' })\n\n            provider.on('accountsChanged', handleAccountChanged)\n            provider.on('chainChanged', ()=>{handleChainChanged(chainId)} )\n            // @ts-ignore\n            systemState.updateSystem({ chainId  })\n           //handleChainChanged(chainId)\n            \n        } else {\n            systemState.updateSystem({chainId:ChainId.MAINNET})\n        }\n\n    }, [])\n\n    React.useEffect(() => {\n        switch (systemState.status) {\n            case \"ERROR\":\n                systemState.statusUnset();\n                setState('ERROR')\n                //TODO show error at button page show error  some retry dispat again\n                break;\n            case \"DONE\":\n                systemState.statusUnset();\n                //TODO do some static information update\n                //tokenState.updateTokenMap();\n                break;\n            default:\n                break;\n\n        }\n    },[\n        systemState,\n        // systemState.status,\n        // systemState.statusUnset,\n        //tokenState.updateTokenMap\n    ]);\n    React.useEffect(() => {\n        if(ammMapState.status ===\"ERROR\" || tokenState.status === \"ERROR\"){\n            //TODO: solve error\n            ammMapState.statusUnset();\n            tokenState.statusUnset();\n            setState('ERROR');\n        }else if(ammMapState.status ===\"DONE\" && tokenState.status === \"DONE\"){\n            ammMapState.statusUnset();\n            tokenState.statusUnset();\n            setState('DONE');\n        }\n    },[ammMapState,tokenState,accountState.accountId,walletLayer1State])\n\n    // React.useEffect(()=>{\n    //\n    // },[])\n\n\n\n    return {\n        state,\n    }\n\n}\n"],"sourceRoot":""}