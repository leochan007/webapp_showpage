{"version":3,"sources":["defs/common_defs.ts","stores/account/reducer.ts","stores/account/hook.ts","stores/global/actions.ts","stores/Amm/AmmMap/reducer.ts","stores/Amm/AmmMap/hook.ts","stores/Amm/AmmActivityMap/reducer.ts","stores/Amm/AmmActivityMap/hook.ts","stores/apis/api.ts","stores/Amm/AmmActivityMap/saga.ts","stores/Amm/AmmMap/saga.ts","stores/Amm/index.ts","stores/token/reducer.ts","stores/token/hook.ts","utils/swap_utils.ts","stores/token/saga.ts","stores/ticker/reducer.ts","stores/ticker/saga.ts","stores/system/interface.ts","stores/system/reducer.ts","stores/walletLayer1/reducer.ts","stores/walletLayer1/hook.ts","services/socketUtil.ts","services/tickerService.ts","services/ammPoolService.ts","stores/system/saga.ts","stores/walletLayer1/saga.ts","stores/walletLayer2/reducer.ts","stores/walletLayer2/saga.ts","stores/userRewards/reducer.ts","stores/userRewards/saga.ts","stores/socket/reducer.ts","stores/socket/saga.ts","stores/account/saga.ts","stores/rootSaga.ts","stores/ticker/hook.ts","stores/system/hook.ts","utils/log_tools.ts","stores/walletLayer2/hook.ts","stores/socket/hook.ts","stores/userRewards/hook.ts","stores/localStore/confirmation/reducer.ts","stores/localStore/favoriteMarket/reducer.ts","stores/localStore/onchainHashInfo/reducer.ts","stores/localStore/index.ts","stores/index.ts","services/account/command.ts","hooks/help/volumeToCount.ts","hooks/help/ammPairDetail.ts","services/account/unlockAccount.ts","services/account/walletLayer2Services.ts","layouts/connectStatusCallback.tsx","hooks/help/makeCache.ts","utils/obj_tools.ts","utils/formatter_tool.ts","hooks/help/makeUIAmmActivityMap.ts","hooks/help/makeMyPoolDetail.ts","hooks/help/makeTickView.ts","hooks/help/makeWallet.ts","hooks/help/marketTable.ts","hooks/help/pairDetail.ts","layouts/header/index.tsx","layouts/header/hook.tsx","stores/localStore/confirmation/hook.ts","pages/QuotePage/hook.ts","pages/styled.ts","pages/QuotePage/index.tsx","stores/localStore/favoriteMarket/hook.ts","hooks/common/useCustomDCEffect.ts","pages/SwapPage/panel/BasicInfoPanel/hook.tsx","pages/SwapPage/panel/BasicInfoPanel/index.tsx","pages/SwapPage/panel/TradePanel/index.tsx","storage/index.ts","pages/SwapPage/hook.ts","hooks/usePairMatch.ts","hooks/help/coinPairInit.ts","pages/SwapPage/index.tsx","provider/dev-wrapper/index.tsx","provider/global/index.tsx","pages/Layer2Page/TxPanel/index.tsx","pages/Layer2Page/TxPanel/hooks.ts","pages/Layer2Page/AssetPanel/index.tsx","modal/useModals.ts","pages/Layer2Page/TradePanel/index.tsx","pages/Layer2Page/TradePanel/hooks.ts","pages/Layer2Page/AmmPanel/index.tsx","pages/Layer2Page/AmmPanel/hook.ts","pages/Layer2Page/MyLiquidityPanel/hook.ts","pages/Layer2Page/MyLiquidityPanel/index.tsx","pages/SettingPage/index.tsx","pages/SettingPage/hook.ts","pages/Layer2Page/index.tsx","pages/LiquidityPage/PoolsPanel/index.tsx","pages/LiquidityPage/PoolsPanel/hook.ts","pages/LiquidityPage/AmmPanel/index.tsx","pages/LiquidityPage/AmmPanel/hooks.ts","pages/LiquidityPage/CoinPairPanel/hooks.ts","pages/LiquidityPage/CoinPairPanel/index.tsx","pages/LiquidityPage/hook.ts","pages/LiquidityPage/index.tsx","pages/MiningPage/index.tsx","pages/MiningPage/hook.ts","modal/WalletModal/index.tsx","services/account/activeAccount.ts","services/account/lockAccount.ts","modal/useDeposit.ts","modal/AccountModal/index.tsx","modal/useChargeFees.ts","modal/useAccountModal.tsx","services/account/useAccountHook.ts","modal/index.tsx","modal/useTransfer.ts","modal/useWithdraw.ts","routers/index.tsx","services/account/networkUpdate.ts","services/account/checkAccount.ts","hookAccountInit.ts","hookConnect.tsx","pages/ErrorPage/index.tsx","utils/dt_tools.ts","pages/LoadingPage/index.tsx","App.tsx","hook.ts","index.tsx"],"names":["Theme","LangType","SystemStatus","MODAL_TYPE","ActionResultCode","initialState","accAddress","readyState","AccountStatus","UN_CONNECT","accountId","apiKey","eddsaKey","publicKey","level","nonce","undefined","keyNonce","connectName","ConnectProviders","unknown","_chainId","status","errorMessage","accountSlice","createSlice","name","reducers","updateAccountStatus","state","action","SagaStatus","PENDING","changeShowModel","_userOnModel","payload","nextAccountStatus","error","ERROR","wrongChain","DONE","cleanAccountStatus","statusUnset","UNSET","actions","useAccount","useSelector","account","dispatch","useDispatch","resetAccount","React","useCallback","props","updateAccount","shouldShow","useMemo","setShouldShow","flag","REFRESH_RATE","TOAST_TIME","updateVersion","createAction","ammMap","__timer__","ammMapSlice","getAmmMap","getAmmMapStatus","updateRealTimeAmmMap","useAmmMap","amm","ammActivityMapSlice","ammActivityMap","getAmmActivityMap","getAmmActivityMapStatus","useAmmActivityMap","getChainId","chainId","store","getState","system","userAPI","UserAPI","exchangeAPI","ExchangeAPI","ammpoolAPI","AmmpoolAPI","LoopringAPI","walletAPI","wsAPI","InitApi","WalletAPI","WsAPI","getPostsSaga","ammActivityMapSaga","getAmmActivityMapApi","a","getAmmPoolActivityRules","groupByRuleTypeAndStatus","data","call","put","all","takeLatest","updateRealTimeSaga","ammMapInitSaga","ammMapRealTimeSaga","setAmmState","ammPoolState","keyPair","idIndex","tokenMap","match","coinA","coinB","forex","faitPrices","result","amountDollar","parseFloat","liquidityUSD","amountYuan","totalLPToken","volumeToCount","lpLiquidity","totalA","liquidity","totalB","rewardValue","rewards","tokenId","volume","rewardToken","rewardValue2","rewardToken2","feeA","volumeToCountAsBigNumber","fees","feeB","feeDollar","toBig","times","price","plus","feeYuan","toNumber","tradeFloat","change","timeUnit","APY","parseInt","apyBips","getAmmMapApi","ammpools","getAmmPoolStats","ammPoolStats","clearInterval","setInterval","coinMap","Reflect","ownKeys","forEach","key","item","market","tokens","pooled","dataItem","isNew","Date","now","Number","createdAt","isActivity","address","__rawConfig__","map","replace","ammMapSaga","fork","ammReducer","combineReducers","reducer","ammForks","totalCoinMap","addressIndex","marketMap","tokenMapSlice","getTokenMap","getTokenMapStatus","marketArray","marketCoins","useTokenMap","getIconByTokenInfo","token","addr","utils","getAddress","tokenInitSaga","getTokenMapApi","tokensMap","pairs","marketArr","tokenArr","symbol","coinInfo","icon","simpleName","description","company","startsWith","tokenList","tradePairs","tokenSaga","tickerMapSlice","tickerMap","getTicker","getTickers","getTickerStatus","tickerSaga","tickersSaga","getTickersApi","list","getMixTicker","join","tickers","makeTickerMap","tickMap","tickerKey","tickerKeys","length","CustomError","ErrorMap","NO_TOKEN_KEY_LIST","ENV","NETWORKEXTEND","tickerForks","env","PROD","baseURL","socketURL","etherscanUrl","gasPrice","exchangeInfo","topics","systemSlice","updateSystem","updateRealTimeObj","getSystemStatus","setTopics","walletLayer1","walletLayer1Slice","updateWalletLayer1","reset","getWalletLayer1Status","useWalletLayer1","resetLayer1","SocketEventType","subject","Subject","tickerService","_tickerMap","next","asObservable","ammPoolService","ammPoolMap","LoopringSocket","url","_socketCallbackMap","_loopringSocket","__wsTimer__","timer","count","_baseUrl","socketSendMessage","socket","clearInitTimer","resetSocketEvents","makeMessageArray","isConnectSocket","socketConnect","send","makeTopics","socketClose","SOCKET_ERROR","ws","Promise","reolve","onclose","e","reason","close","resolve","removeSocketEvents","eventType","ticker","getTickerArg","addSocketEvents","getAccountArg","order","getOrderArg","orderbook","getOrderBookArg","trade","getTradeArg","candlestick","getCandlestickArg","ammpool","getAmmpoolArg","op","unsubscribeAll","JSON","stringify","type","deps","fn","SocketEventMap","self","getWsKey","wsKey","WebSocket","onopen","console","warn","OPEN","onmessage","pingpong","parse","topic","log","setTimeout","this","onerror","err","init","clearTimeout","_e","timestamp","size","open","high","low","bid","ask","base","quote","base_token_volume","quote_token_volume","minus","div","base_fee_amt","quote_fee_amt","poolName","poolAddress","risky","lp","instance","loopringSocket","getUpdateSystem","systemSaga","initConfig","getTokens","tokenSymbolMap","getAmmPoolConf","getMixMarkets","markets","take","delay","accountStatusUnset","getSystemsApi","window","location","hostname","DEV","ChainId","GOERLI","UAT","MAINNET","NONETWORK","NO_NETWORK_ERROR","getExchangeInfo","getFiatPrice","legal","fiatPrices","faitPricesY","getGasPrice","process","systemForks","walletLayer1Saga","getWalletLayer1Balance","exchangeApi","getEthBalances","owner","ethBalance","getTokenBalances","tokenBalances","reduce","prev","belong","fromWEI","walletLayer1Fork","walletLayer2","walletLayer2Slice","updateWalletLayer2","getWalletLayer2Status","walletLayer2Saga","getWalletLayer2Balance","userApi","getUserBalances","userBalances","walletLayer2Fork","userRewardsMap","userRewardsMapSlice","getUserRewards","getUserRewardsStatus","userRewardsSaga","getUserRewardsApi","getAmmPoolUserRewards","then","ammUserRewardMap","reject","userRewardsForks","socketSlice","socketEnd","sendSocketTopic","getSocketStatus","closeSocket","sendMessage","socketEndSaga","socketSendMessageSaga","socketForks","accountUpdateSaga","cleanAccountSaga","accountSage","accountRestSage","shouldUpdateProvider","connectProvides","clear","accountFork","mySaga","useTicker","updateTickers","updateTicker","useSystem","myLog","message","myError","useWalletLayer2","resetLayer2","delayAndUpdateWalletLayer2","getTime","_","useSocket","useUserRewards","confirmationSlice","confirmed","confirm","favoriteMarketSlice","clearAll","removeMarket","pair","includes","index","findIndex","_pair","splice","addMarket","push","addMarkets","depositHash","withdrawHash","onchainHashInfoSlice","clearDepositHash","updateDepositHash","localStoreReducer","favoriteMarket","onchainHashInfo","confirmation","sagaMiddleware","createSagaMiddleware","DEFAULT_TIMEOUT","persistAccConfig","storage","storageSession","timeout","persistSettingConfig","persistLocalStoreConfig","persistedAccountReducer","persistReducer","persistedSettingReducer","settingsSlice","persistedLocalStoreReducer","settings","modals","modalsSlice","localStore","configureStore","middleware","getDefaultMiddleware","thunk","serializableCheck","devTools","enhancers","reduxBatch","setLanguage","language","setCoinJson","imgConfig","run","Commands","ErrorType","ProcessingType","persistor","persistStore","volumn","decimals","ammPairInit","_ammCalcData","ammType","walletMap","tickerData","ammPoolsBalance","coinInfoMap","AtoB","isNaN","baseVol","coinAInfo","quoteVol","coinBInfo","toFixed","myCoinA","balance","myCoinB","coinACount","coinBCount","lpCoin","lpCoinA","lpCoinB","unlockAccount","walletLayer2Services","sendSign","generateKeyPair","usedWeb3","exchangeAddress","sk","toHex","secretKey","getUserApiKey","sendAccountSigned","sendErrorUnlock","ProcessSign","ErrorSign","sendUpdateAccStatusAndReset","ERROR_NETWORK","ErrorNetwork","sendCheckAccount","sendAccountLock","accInfo","updateInfo","LOCKED","tags","LockAccount","sendActiveAccountDeposit","x","sdk","publicKeyX","y","publicKeyY","ACTIVATED","AccountUnlocked","sendNoAccount","NO_ACCOUNT","NoAccount","sendNeedUpdateAccount","DEPOSITING","SignAccount","sendCheckAcc","getAccount","Error","ethAddress","ProcessAccountCheck","onSocket","accountStaticCallBack","onclickMap","args","apply","btnLabel","fnType","DEFAULT","btnClickMap","setShowConnect","isShow","step","WalletConnectStep","Provider","setShowAccount","AccountStep","HadAccount","makeCache","__cache__","customSlippage","setSlippage","deepClone","Object","constructor","hasOwnProperty","copyToClipBoard","text","document","execCommand","textarea","createElement","body","appendChild","value","select","removeChild","navigator","clipboard","writeText","clipboardData","setData","getTokenInfo","VolToNumberWithPrecision","rawVal","tokenInfo","trim","precision","makeUIAmmActivityMap","myReward","ammPoolActivityStatus","ammActivityViewMap","ammPoolActivityRule","awardRules","totalRewards","myRewards","AmmPoolActivityStatus","InProgress","currentRewards","duration","from","rangeFrom","to","rangeTo","isPass","EndOfGame","makeAsCard","_ammInfo","itemArray","activity","getOneRewardInfo","reward","reward2","rewardDollar","rewardYuan","balanceA","balanceB","balanceDollar","balanceYuan","ammUserReward","snapShotData","feeRewards","ratio","BigNumber","ammDetail","makeMyAmmWithSnapshot","_walletMap","makeMyPoolRowWithPoolState","_myAmm","makeMyAmmWithStat","makeTickView","tick","floatTag","FloatTag","none","increase","decrease","_tradeFloat","priceYuan","priceDollar","closeDollar","closeYuan","qPrice","changeDollar","changeYuan","__rawTicker__","makeWalletLayer2","total","locked","countBig","pending","withdraw","toString","detail","getUserTrades","marketKey","response","userTrades","makeMarketArray","coinKey","marketTrades","tradeArray","currency","feeKey","side","Buy","Sell","TradeTypes","amount","fee","time","tradeTime","getUserAmmTransaction","getUserAmmPoolTxs","userAmmPoolTxs","makeMyAmmMarketArray","marketTransaction","lpToken","txType","JOIN","AmmTradeType","add","remove","totalDollar","totalYuan","amountA","poolTokens","actualAmount","amountB","updatedAt","txStatus","pairDetailBlock","ammKey","getAmmPoolSnapshot","ammPoolSnapshot","NO_SDK","Header","withTranslation","t","rest","useLocation","useSettings","setTheme","themeMode","accountState","accountStatus","useOpenModals","_btnClickMap","assign","onWalletBtnConnect","onThemeBtnClick","dark","light","onLangBtnClick","lang","useEffect","headerToolBarData","ButtonComponentsMap","WalletConnect","handleClick","Language","handleChange","updateWallet","headerMenuData","useHeader","confirmWrapper","useConfirmation","selected","pathname","headerRoot","Toolbar","content","btnTxt","clickToConfirm","OnePageSize","StylePaper","styled","Box","theme","unit","TableWrapStyled","Grid","TablePaddingX","pLeft","pRight","TableFilterParams","RowStyled","SearchWrapperStyled","TabsWrapperStyled","QuotePage","useState","candlestickList","setCandlestickList","ammPoolBalances","setAmmPoolBalances","tableTabValue","setTableTabValue","filteredData","setFilteredData","searchValue","setSearchValue","swapRankingList","setSwapRankingList","tableHeight","setTableHeight","useFavoriteMarket","getSwapRankingList","res","groupByRuleType","SWAP_VOLUME_RANKING","getCandlestick","getMixCandlestick","interval","TradingInterval","d1","limit","candlesticks","o","timeStamp","sign","tickerStatus","tickerStatusUnset","recommendedPairs","setRecommendedPairs","tickList","setTickList","recommendations","setRecommendations","focusRowFrom","startIndex","updateRecommendation","recommendationIndex","subscription","subscribe","ele","unsubscribe","getRecommandPairs","getRecommendedMarkets","recommended","socketSendTicker","updateRawData","marketPairs","_recommendationsFloat","defaultRecommendationsFloat","_tickList","keys","_item","m","filter","filteredFloat","concat","slice","_recommendations","debounce","_startIndex","WsTopicType","globalSetup","wait","useQuote","getCurrentHeight","height","innerHeight","addEventListener","removeEventListener","getAmmPoolBalances","ammRes","fomattedRes","raw_data","history","useHistory","getFilteredTickList","find","handleTableFilterChange","keyword","cloneDeep","favourite","ranking","formattedKeyword","toLocaleLowerCase","toLowerCase","handleRowClick","row","tradePair","handleTabChange","_event","newValue","handleSearchChange","display","flexDirection","flex","container","chartData","sort","b","xs","onClick","marginY","paddingBottom","Tabs","onChange","Tab","label","Divider","onRowClick","col","rawData","addFavoriteMarket","removeFavoriteMarket","currentHeight","showLoading","useCustomDCEffect","useDeepCompareEffect","toggleData","ChartType","Trend","Depth","BasicInfoPanel","tgItemJSXs","tlabel","JSX","getExistedMarket","chartType","setChartType","ChartUnit","D1","chartUnit","setChartUnit","originData","setOriginData","tgItemJSXsPriceChart","pre","tGItemData","mounted","request","date","moment","format","dumpError400","getMixDepth","depth","bidsPrices","bids_prices","bidsAmtTotals","bids_amtTotals","asksPrices","asks_prices","asksAmtTotals","asks_amtTotals","handleChartUnitChange","event","mappedValue","H1","W1","useBasicInfo","upColor","baseToken","quoteToken","trendChartData","depthChartData","amt","justifyContent","exclusive","position","minHeight","maxHeight","style","width","riseColor","extraInfo","handleMove","showXAxis","applyProps","id","TabsStyled","TradePanel","myTradeArray","setValue","alignSelf","CONSTANTS","useSwapPage","useTranslation","swapToastOpen","setSwapToastOpen","swapAlertText","setSwapAlertText","walletLayer2Status","tradeData","setTradeData","tradeCalcData","setTradeCalcData","setTradeArray","setMyTradeArray","setTradeFloat","path","useRouteMatch","setPair","setMarket","params","usePairMatch","resetSwap","setAmmPoolSnapshot","swapBtnI18nKey","setSwapBtnI18nKey","output","setOutput","takerRate","setTakerRate","feeBips","setFeeBips","setBaseMinAmt","quoteMinAmt","setQuoteMinAmt","TradeBtnStatus","DISABLED","btnStatus","setBtnStatus","isSwapLoading","setIsSwapLoading","isValidAmt","setIsValidAmt","LOADING","AVAILABLE","useSwapBtnStatusCheck","sell","buy","ammInfo","req","getMinimumTokenAmt","amountMap","baseMinAmtInfo","quoteMinAmtInfo","userOrderInfo","totalFee","minAmount","sellCoinInfoMap","coinSell","coinBuy","_myTradeArray","swapCalculatorCallback","slippage","sellTokenId","getNextStorageId","storageId","exchange","orderId","sellToken","amountS","buyToken","amountBOutSlip","minReceived","allOrNone","validUntil","VALID_UNTIL","maxFeeBips","fillAmountBOrS","orderType","OrderType","ClassAmm","eddsaSignature","submitOrder","tradeValue","swapBtnClickArray","onSwapClick","handleSwapPanelEvent","swapData","switchType","SwapType","SEll_CLICK","BUY_CLICK","SELL_SELECTED","BUY_SELECTED","EXCHANGE_CLICK","setDepth","updateDepth","handler","calculateTradeData","_tradeData","_tradeCalcData","input","isAtoB","ammMapRaw","priceImpact","minimumReceived","minReceivedVal","validAmt","amountBOut","gte","throttleSetValue","_ammPoolSnapshot","td","_tradeArray","coinPairInit","apiList","getMarketTrades","_td","stob","poolVolumn","getBaseQuote","poolBaseTokenVol","quoteBaseTokenVol","NO_SUPPORT_PAIR","StoB","BtoS","buyCoinInfoMap","pairDetailDone","catch","FixedStyle","SwapPage","pairNameList","split","Array","isArray","customPair","renderPair","alertText","autoHideDuration","setOpen","marginRight","alignContent","direction","flexWrap","minWidth","swapBtnStatus","DevWrapper","children","Fragment","WindowEvent","UserStorage","depositsHash","localStorage","getItem","DepositHash","removeItem","connectionName","setItem","ConnectorName","rawHandler","sessionStorage","Handler","dateTimeStr","ActiveTime","tmpDt","SESSION_TIMEOUT_SECONDS","rawId","AccountId","Account","Apikey","apikey","Eddsakey","eddsakey","orderHash","AmmOrder","current","HardwareAddresses","events","Click","Scroll","forceReset","checkTimeout","GlobalProvider","TxPanel","useRef","pageSize","setPageSize","txs","setTxs","isLoading","setIsLoading","getTxnStatus","TransactionStatus","processing","processed","received","failed","getUserTxnList","getUserTranferList","getUserDepositHistory","getUserOnchainWithdrawalHistory","userTxnList","userTransferMapped","userTransfers","TransactionTradeTypes","transfer","feeTokenSymbol","feeAmount","memo","txnHash","hash","userDepositMapped","userDepositHistory","deposit","txHash","userWithdrawMapped","userOnchainWithdrawalHistory","mappingList","sortedMappingList","useGetTxs","txTableData","offsetHeight","Math","floor","ref","className","pagination","showFilter","StyledChartWrapper","StyledBtnGroupWrapper","AssetPanel","chartPeriod","setChartPeriod","setChartData","assetsList","setAssetsList","getUserTotalAssets","getUserAssets","wallet","assetType","AssetType","DEX","userAssets","assetsKeyList","assetsDetailList","values","showDeposit","defaultProps","isNoAccount","title","setShowDeposit","showTransfer","setShowTransfer","showWithdraw","setShowWithdraw","setShowResetAccount","useModals","onShowDeposit","onShowTransfer","onShowWithdraw","lpTokenJump","handleChartPeriodChange","tokenPriceList","entries","formattedData","tokenPriceUSDT","ammToken","tokenValue","totalLpToken","lpTotalData","formattedDoughnutData","AssetTitleProps","assetInfo","totalAsset","priceTag","PriceTag","Dollar","assetsRawData","TokenType","single","String","EmptyValueTag","available","smallBalance","alignItems","marginTop","Paper","component","Typography","color","variant","showFiliter","onLpDeposit","onLpWithdraw","setUserTrades","setShowLoading","getUserTradeList","marketList","Side","useGetTrades","AmmPanel","ammRecordList","setAmmRecordList","getTokenName","getAmmpoolList","AmmTxType","AmmSideTypes","Join","Exit","lpTokenAmount","useGetAmmRecord","useOverview","userRewardsMapState","ammMapState","summaryReward","setSummaryReward","myPoolRow","setMyPoolRow","myAmmMarketArray","setMyAmmMarketArray","walletLayer2DoIt","makeMyPoolRow","walletKey","test","rowData","_myPoolRow","makeSummaryMyAmm","StyleWrapper","MyLiquidity","setPage","JumpToLiqudity","page","spacing","sm","paddingY","paddingX","margin","fontFamily","Currency","dollar","getThousandFormattedNumbers","Yuan","marginBottom","handleDeposit","handleWithdraw","handlePageChange","StyledPaper","StyledSwitch","Switch","colorBase","textPrimary","border","success","backgroundColor","opacity","BtnCurrency","setState","_handleChange","target","IconComponent","DropDownIcon","labelId","autoWidth","yen","StyledDivider","SettingPanel","i18n","useTheme","setUpColor","setCurrency","exportAccInfo","publicX","publicY","privateKey","exportFromJSON","fileName","exportType","useExportAccoutInfo","paddingLeft","changeLanguage","Trans","i18nKey","textTransform","UpColor","green","up","down","checked","red","subMenu","subMenuLayer2","BtnConnect","defaultFrame","c_key","withRef","setLabel","_btnLabel","fullWidth","maxWidth","SubMenuList","BasicSubMenuList","Layer2Page","viewTemplate","WrapperStyled","PoolsPanel","filterValue","setFilterValue","setRawData","nodeTimer","ammMapStatus","_ammMap","tickerMapKey","NO_TOKEN_MAP","options","updateTickerLoop","_keys","updateTickersUI","_page","i","useAmmMapUI","getFilteredData","formattedValue","OutlinedInput","placeholder","currentTarget","startAdornment","InputAdornment","AmmPanelView","ammToastOpen","setAmmToastOpen","ammAlertText","setAmmAlertText","ammCalcData","setAmmCalcData","ammJoinData","setAmmJoinData","ammExitData","setAmmExitData","ammDepositBtnI18nKey","setAmmDepositBtnI18nKey","ammWithdrawBtnI18nKey","setAmmWithdrawBtnI18nKey","initAmmData","setAmmPoolSnapShot","updateAmmPoolSnapshot","request1","joinFees","setJoinFees","exitFees","setExitfees","feeToken","requestJoin","requestType","OffchainFeeReqType","AMM_JOIN","tokenSymbol","getOffchainFeeAmt","feesJoin","feeJoin","requestExit","AMM_EXIT","feesExit","feeExit","joinRequest","setJoinRequest","handlerJoinInDebounce","slippageReal","marketInfo","coinA_TV","coinB_TV","covertVal","rawA","rawB","makeJoinAmmPoolRequest","joinTokens","precisionForPrice","handleJoinAmmPoolEvent","addToAmmCalculator","setJoinLoading","patch","ammName","request2","storageId0","request_1","storageId1","storageIds","offchainId","joinAmmPool","joinAmmPoolResult","resultInfo","onAmmDepositClickMap","onAmmAddClick","exitRequest","setExitRequest","handleExitInDebounce","makeExitAmmPoolRequest","exitTokens","unPooled","handleExitAmmPoolEvent","isJoinLoading","isExitLoading","setExitLoading","removeAmmCalculator","burnedReq","burned","exitAmmPool","exitAmmPoolResult","removeAmmClickMap","onAmmRemoveClick","useAmmPanel","AmmPanelType","Deposit","ammDepositData","ammWithdrawData","handleAmmAddChangeEvent","handleAmmRemoveChangeEvent","tabSelected","ammDepositBtnStatus","ammWithdrawBtnStatus","makeAmmDetailExtendsActivityMap","ammActivity","BoxStyled","fontDefault","h4","BoxTopStyled","CoinPairPanel","useUserRewardsStatus","setWalletMap","ammMarketArray","setAmmUserRewardMap","setSnapShotData","myAmm","setMyAmm","coinPairInfo","setCoinPairInfo","pairHistory","setPairHistory","getPairList","ammList","formattedPairHistory","_coinPairInfo","_snapShotData","useCoinPair","tabIndex","_handlePageChange","coinJson","coinAIcon","coinBIcon","Breadcrumbs","Link","href","imgx","imgy","imgheight","imgwidth","alt","src","Avatar","lineHeight","marginLeft","useAmmPool","ammActivityMapStatus","_ammActivityMap","setAmmActivityMap","TableWrapperStyled","LiquidityPage","subMenuLiquidity","matchPair","AmmCardWrap","forwardRef","AmmList","jumpTo","lg","MiningPage","ammProps","setAmmActivityViewMap","ammActivityPastViewMap","setAmmActivityPastViewMap","NotStarted","useAmmMiningUI","jointAmmViewMap","ModalWalletConnectPanel","onClose","isShowConnect","qrCodeUrl","setQrCodeUrl","stateCheck","setStateCheck","metaMaskCallback","MetaMask","usedProvide","eth","walletConnectCallback","processingCallback","setProcessingCallback","callback","gatewayList","DefaultGatewayList","handleSelect","walletServices","sendDisconnect","MetaMaskProcessing","WalletConnectProcessing","handleProcessing","opts","WalletConnectQRCode","copyToastOpen","setCopyToastOpen","useConnectHook","providerBack","Depositing","walletList","view","providerName","onBack","onCopy","SuccessConnect","FailedConnect","onRetry","panelList","severity","updateAccountFromServer","code","NoError","feeMap","formatedPx","formatedPy","maxFee","updateAccountResponse","UpdateAccoutError","GenEddsaKeyError","GetAccError","lockAccount","useDeposit","isNewAccount","depositValue","setDepositValue","inputValue","gasLimit","gasAmounts","isMetaMask","realGasPrice","toUpperCase","getAllowances","tokenAllowances","allowance","curValInWei","gt","TokenAccessProcess","depositAddress","ApproveFailed","FailedTokenAccess","DepositingProcess","realChainId","response2","DepositFailed","FailedDeposit","DataNotReady","onDepositClick","depositProps","depositBtnStatus","ModalAccountInfo","isShowAccount","openQRCode","setOpenQRCode","addressShort","getShortAddr","onSwitch","onViewQRCode","onDisconnect","goDeposit","goUpdateAccount","ActiveAccountProcess","SuccessUnlock","sleep","unlockBtn","lockBtn","accountList","_height","_width","etherscanLink","ProcessUnlock","FailedUnlock","mainBtn","DepositApproveProcess","ActiveAccountFailed","useChargeFees","chargeFeeList","setChargeFeeList","feeRaw","__raw__","useAccountModal","statusAccountUnset","handleErrorAccount","handleLockAccount","handleNoAccount","handleDepositingAccount","handleErrorApproveToken","handleErrorDepositSign","handleProcessDeposit","handleSignAccount","handleSignError","handleProcessSign","handleProcessAccountCheck","handleAccountActive","useAccountHook","ModalGroup","transferProps","transferValue","setTransferValue","TRANSFER","tranferFeeInfo","setTransferFeeInfo","payeeAddr","setPayeeAddr","onTransferClick","transferVol","payerAddr","payerId","payeeId","submitInternalTransfer","handlePanelEvent","handleFeeChange","transferBtnStatus","chargeFeeToken","chargeFeeTokenList","handleOnAddressChange","handleAddressError","_value","useTransfer","withdrawProps","withdrawValue","setWithdrawValue","walletMap2","setWalletMap2","OFFCHAIN_WITHDRAWAL","withdrawAddr","setWithdrawAddr","withdrawFeeInfo","setWithdrawFeeInfo","withdrawType","setWithdrawType","withdrawToken","withdrawVol","submitOffchainWithdraw","extraData","minGas","withdrawType2","FAST_OFFCHAIN_WITHDRAWAL","withdrawBtnStatus","withdrawTypes","WithdrawTypes","onWithdrawClick","handleWithdrawTypeChange","offchainType","WithdrawType","Fast","useWithdraw","withDrawProps","resetProps","swapProps","RouterView","Container","exact","networkUpdate","checkAccount","newAccAddress","useAccountInit","stateAccount","setStateAccount","handleConnect","accounts","networkFlag","handleAccountDisconnect","handleError","errorObj","useConnect","walletLayer1Status","wallet1statusUnset","wallet2statusUnset","StyleBox","ErrorPage","messageKey","textAlign","left","top","email","CONTACT_US_EMAIL","getContactInfo","preventDefault","boxLiner","LoadingPage","version","xmlns","xmlnsXlink","viewBox","enableBackground","xmlSpace","fill","d","attributeType","attributeName","dur","repeatCount","App","tokenMapStatus","tokenMapStatusUnset","ammMapStatusUnset","systemStatus","systemStatusUnset","ammActivityMapStatusUnset","connector","useInit","GlobalStyles","styles","css","globalCss","mode","providers","provider","LocalizationProvider","dateAdapter","MomentUtils","I18nextProvider","MuThemeProvider","getTheme","ThemeProvider","PersistGate","loading","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main~06837ae4.c4875174.chunk.js","sourcesContent":["export enum Theme {\n    dark = 'dark',\n    light = 'light',\n}\n\nexport enum LangType {\n    en = 'en_US',\n    cn = 'zh_CN',\n}\n\nexport enum SystemStatus {\n    NORMAL,\n    ERROR,\n    UNKNOWN,\n}\n\nexport enum MODAL_TYPE {\n    UNKNOWN,\n    LOADING,\n    WALLET,\n}\n\n\nexport enum ActionResultCode {\n    NoError,\n    DataNotReady,\n    GetAccError,\n    GenEddsaKeyError,\n    UpdateAccoutError,\n    ApproveFailed,\n    DepositFailed,\n}\n\nexport interface ActionResult {\n    code: ActionResultCode\n    data?: any\n}\n\nexport const REFRESH_RATE = 1000\n\nexport const REFRESH_RATE_SLOW = 10000\n\nexport const UPDATE_ACC_DELAY = 2500\n\nexport const TOAST_TIME = 3000\n\nexport const SHORT_INTERVAL = 200\n","import { createSlice, PayloadAction, Slice } from '@reduxjs/toolkit'\nimport { SliceCaseReducers } from '@reduxjs/toolkit/src/createSlice';\nimport { Account, AccountState, AccountStatus, ConnectProviders, SagaStatus } from '@loopring-web/common-resources';\n\n// import { Lv2Account, } from 'defs/account_defs'\n// import { AccountStatus } from 'state_machine/account_machine_spec'\n// import { UserStorage } from 'storage'\n// const initialState = (initState:Partial<AccountState>) => {\n//   // const defaultAccId = process.env.REACT_APP_TEST_ACCOUND_ID ? process.env.REACT_APP_TEST_ACCOUND_ID : UserStorage.getAccountId()\n//   // const defaultApiKey = process.env.REACT_APP_TEST_API_KEY ? process.env.REACT_APP_TEST_API_KEY : UserStorage.getApikey()\n//   // const defaultOwner = process.env.REACT_APP_TEST_OWNER ? process.env.REACT_APP_TEST_OWNER : UserStorage.getAccount()\n//   // const defaultEddsaKey = process.env.REACT_APP_TEST_EDDSA_KEY ? process.env.REACT_APP_TEST_EDDSA_KEY : UserStorage.getEddsakey()\n//\n//   // const defaultStatus = AccountStatus.UNCONNNECTED\n//   // return {\n//   //   accAddr: defaultOwner,\n//   //   status: defaultStatus,\n//   //   accountId: defaultAccId,\n//   //   publicKey: {},\n//   //   nonce: 0,\n//   //   isContractAddress: false,\n//   //   apiKey: defaultApiKey,\n//   //   eddsaKey: defaultEddsaKey,\n//   //   connectName: ConnectorNames.unknown,\n//   //   connectNameTemp: ConnectorNames.unknown,\n//   // } as Lv2Account\n//   return {\n//     accAddress: '',\n//     status: AccountStatus.UN_CONNECT,\n//     accountId: '',\n//     apiKey: '',\n//     eddsaKey: '',\n//     connectName: ConnectProviders.UnKnow,\n//     // ...initState,\n//   }\n// }\nconst initialState: AccountState = {\n    accAddress: '',\n    readyState: AccountStatus.UN_CONNECT,\n    accountId: -1,\n    apiKey: '',\n    eddsaKey: '',\n    publicKey: {},\n    level: '',\n    nonce: undefined,\n    keyNonce: undefined,\n    connectName: ConnectProviders.unknown,\n    _chainId: 1,\n    status: 'PENDING',\n    errorMessage: null,\n\n}\n\nconst accountSlice: Slice<AccountState> = createSlice<AccountState, SliceCaseReducers<AccountState>>({\n    name: 'account',\n    initialState: initialState,\n    reducers: {\n        updateAccountStatus(state: AccountState, action: PayloadAction<Partial<Account>>) {\n            state.status = SagaStatus.PENDING\n        },\n        changeShowModel(state: AccountState, action: PayloadAction<{_userOnModel:boolean|undefined}>) {\n            const {\n                _userOnModel\n            } = action.payload;\n            state._userOnModel = _userOnModel;\n        },\n        nextAccountStatus(state: AccountState, action: PayloadAction<Partial<Account>>) {\n            // @ts-ignore\n            if (action.error) {\n                state.status = SagaStatus.ERROR\n                // @ts-ignore\n                state.errorMessage = action.error\n            } else {\n                const {\n                    accAddress,\n                    readyState,\n                    accountId,\n                    wrongChain,\n                    level,\n                    apiKey,\n                    eddsaKey,\n                    _chainId,\n                    nonce,\n                    connectName,\n                    // _userOnModel\n                } = action.payload;\n                \n                if (accAddress !== undefined) {\n                    state.accAddress = accAddress;\n                }\n                if(wrongChain !== undefined){\n                    state.wrongChain = wrongChain\n                }\n                if (readyState) {\n                    state.readyState = readyState;\n                }\n                if (accountId !== undefined) {\n                    state.accountId = accountId;\n                }\n                if (level !== undefined) {\n                    state.level = level;\n                }\n                if (apiKey !== undefined) {\n                    state.apiKey = apiKey;\n                }\n                if (eddsaKey !== undefined) {\n                    state.eddsaKey = eddsaKey;\n                }\n                if (connectName !== undefined) {\n                    state.connectName = connectName;\n                }\n                if (_chainId !== undefined) {\n                    state._chainId = _chainId;\n                }\n                if (nonce !== undefined) {\n                    state.nonce = nonce;\n                }\n                state.status = SagaStatus.DONE;\n            }\n        },\n        cleanAccountStatus(state: AccountState, action: PayloadAction<{shouldUpdateProvider?:boolean|undefined}>) {\n            state.status = SagaStatus.PENDING\n        },\n        statusUnset: (state: AccountState) => {\n            state.status = SagaStatus.UNSET\n        }\n    },\n})\nexport default accountSlice\nexport const {\n    updateAccountStatus,\n    // restAccountStatus,\n    changeShowModel,\n    cleanAccountStatus,\n    nextAccountStatus,\n    statusUnset\n} = accountSlice.actions\n\n","import { useDispatch, useSelector } from 'react-redux'\nimport {\n    changeShowModel,\n    cleanAccountStatus,\n    // restAccountStatus,\n    statusUnset, updateAccountStatus\n} from './reducer';\nimport React from 'react';\nimport { Account, AccountState } from '@loopring-web/common-resources';\nimport { RootState } from 'stores';\n\nexport function useAccount() {\n    const {status, errorMessage, ...account}: AccountState = useSelector((state: RootState) => state.account);\n    // const [shouldShow,setShouldShow] = React.useState(account._userOnModel)\n    const dispatch = useDispatch();\n    \n    const resetAccount = React.useCallback( (props?:{shouldUpdateProvider?:boolean|undefined}) => {\n        dispatch(cleanAccountStatus(props));\n    }, [dispatch])\n\n    const updateAccount = React.useCallback((account: Partial<Account>) => {\n        dispatch(updateAccountStatus(account))\n    }, [dispatch]);\n\n    const shouldShow = React.useMemo(()=>{\n        return  account._userOnModel\n    }, [account]);\n\n    const setShouldShow = React.useCallback((flag:boolean)=>{\n        dispatch(changeShowModel({_userOnModel: flag}));\n    },[dispatch]);\n\n\n    return {\n        account,\n        resetAccount,\n        shouldShow,\n        setShouldShow,\n        updateAccount,\n        statusUnset: React.useCallback(() => {dispatch(statusUnset(undefined))}, [dispatch]),\n        status,\n        errorMessage,\n    }\n\n}\n\n\n// import { useCallback, useState } from 'react'\n// import { useDispatch, useSelector } from 'react-redux'\n//\n// import { useCustomDCEffect } from 'hooks/common/useCustomDCEffect'\n//\n// import { useActiveWeb3React, } from 'hooks/web3/useWeb3'\n//\n// import { Lv2Account, } from 'defs/account_defs'\n//\n// import { AccountStatus, StatusChangeEvent } from 'state_machine/account_machine_spec'\n//\n// import * as sign_tools from 'loopring-sdk'\n//\n// import { connectorsByName } from 'defs/web3_defs'\n//\n// import { ConnectorNames, dumpError400, ExchangeAPI, sleep, UpdateAccountRequestV3, UserAPI, VALID_UNTIL, } from 'loopring-sdk'\n//\n// import { toHex, toBig, } from 'loopring-sdk'\n//\n// import { RootState } from 'reducer'\n//\n// import {\n//     reset, setAccountStatus, setConnectName,\n//     setConnectNameTemp, setAccountInfo, setEddsaKey, setApikey, setAccAddr,\n// } from 'reducer/account/reducer'\n//\n// import { AccountMachineSpec, } from 'state_machine/account_machine_spec'\n//\n// import { buildMachine } from 'state_machine/machine_builder'\n//\n// import voca from 'voca'\n// import { usePrevious } from 'react-use'\n//\n// import Web3 from 'web3'\n//\n// import { UserStorage } from 'storage'\n//\n// import store from 'reducer'\n// import { useWalletLayer1 } from '../walletLayer1';\n// import { useWalletLayer2 } from '../walletLayer2';\n// import { useTokenMap } from '../token';\n// import _ from 'lodash'\n// import { myLog } from 'utils/log_tools'\n// import { LoopringAPI } from 'reducer/apis/api'\n//\n// export function useWeb3Account() {\n//\n//     const {\n//         connector,\n//         library,\n//         account,\n//         chainId,\n//         active,\n//         error,\n//     } = useActiveWeb3React()\n//\n//     const isConnected: boolean = active && !voca.isBlank(account as string)\n//\n//     return {\n//         account,\n//         connector,\n//         library,\n//         chainId,\n//         active,\n//         isConnected,\n//         error,\n//     }\n//\n// }\n//\n// export function useAccount() {\n//\n//     const account: Lv2Account = useSelector((state: RootState) => state.account)\n//\n//     const isNoAccount = useCallback(() => {\n//         return account.status === AccountStatus.NOACCOUNT\n//     }, [account.status])\n//\n//     const isActivated = useCallback(() => {\n//         return account.status === AccountStatus.ACTIVATED\n//     }, [account.status])\n//\n//     return {\n//         account,\n//         isNoAccount,\n//         isActivated,\n//         apiKey: account.apiKey,\n//         eddsaKey: account.eddsaKey,\n//         accountId: account.accountId,\n//     }\n// }\n//\n// export function useStateMachine() {\n//     const dispatch = useDispatch()\n//\n//     const machine = buildMachine(AccountMachineSpec())\n//\n//     const sendEvent = useCallback((account: Lv2Account, event: StatusChangeEvent) => {\n//         const nextState = machine(account.status, event)\n//         if (nextState) {\n//             dispatch(setAccountStatus(nextState))\n//         }\n//     }, [machine, dispatch])\n//\n//     return {\n//         sendEvent,\n//     }\n// }\n//\n// export function useConnect() {\n//\n//     const {\n//         activate,\n//     } = useActiveWeb3React()\n//\n//     const { sendEvent } = useStateMachine()\n//\n//     const dispatch = useDispatch()\n//\n//     const [activatingConnector, setActivatingConnector] = useState<any>()\n//\n//     const connect = useCallback((item_name: ConnectorNames, isSwitch: boolean = false) => {\n//\n//         if (isSwitch) {\n//             myLog('try Connecting... isSwitch Reset')\n//             sendEvent(store.getState().account, StatusChangeEvent.Reset)\n//         }\n//\n//         const newConnector: any = connectorsByName[item_name]\n//         myLog('newConnector:', newConnector)\n//         setActivatingConnector(newConnector)\n//         activate(newConnector)\n//         dispatch(setConnectNameTemp(item_name))\n//\n//         //sendEvent(store.getState().account, StatusChangeEvent.Connecting)\n//\n//         myLog('store.getState().account.status:', store.getState().account.status)\n//\n//     }, [activate, dispatch, sendEvent])\n//\n//     return {\n//         connect,\n//         activatingConnector,\n//     }\n//\n// }\n//\n// export function useDisconnect() {\n//\n//     const {\n//         deactivate,\n//     } = useActiveWeb3React()\n//\n//     const dispatch = useDispatch()\n//\n//     const disconnect = useCallback(() => {\n//         deactivate()\n//         dispatch(reset(undefined))\n//     }, [deactivate, dispatch])\n//\n//     return {\n//         disconnect,\n//     }\n//\n// }\n//\n// export function useUnlock() {\n//\n//     const dispatch = useDispatch()\n//\n//     const { chainId } = useWeb3Account()\n//\n//     const { connector, } = useWeb3Account()\n//\n//     const { sendEvent } = useStateMachine()\n//\n//     const { resetLayer2 } = useWalletLayer2()\n//\n//     const lock = useCallback(async (account: Lv2Account) => {\n//         resetLayer2()\n//         sendEvent(account, StatusChangeEvent.Lock)\n//     }, [sendEvent, resetLayer2])\n//\n//     const exchangeInfo = useSelector((state: RootState) => state.system.exchangeInfo)\n//\n//     const unlock = useCallback(async (account: Lv2Account) => {\n//\n//         if (!LoopringAPI.userAPI || !LoopringAPI.exchangeAPI || !connector\n//             || !account.accountId || !exchangeInfo?.exchangeAddress\n//             || !chainId\n//             || account.status !== AccountStatus.LOCKED) {\n//             return\n//         }\n//\n//         if (account.status !== AccountStatus.LOCKED) {\n//             throw Error('unexpected status:' + account.status)\n//         }\n//\n//         myLog('try to unlock!', account)\n//\n//         let event = undefined\n//         let sk = undefined\n//         let apikey: any = undefined\n//\n//         const provider = await connector.getProvider()\n//         const web3 = new Web3(provider as any)\n//\n//         try {\n//\n//             const nonce = account.nonce - 1 < 0 ? 0 : account.nonce - 1\n//             myLog('try to unlock! nonce:', nonce)\n//\n//             if (!account.eddsaKey) {\n//                 const eddsaKey = await sign_tools\n//                     .generateKeyPair(\n//                         web3,\n//                         account.accAddr,\n//                         exchangeInfo?.exchangeAddress,\n//                         nonce,\n//                         account.connectName,\n//                     )\n//                 sk = eddsaKey.sk\n//             } else {\n//                 sk = account.eddsaKey\n//             }\n//\n//             myLog('useUnlock account:', account, ' sk:', sk)\n//\n//             apikey = await LoopringAPI.userAPI.getUserApiKey({\n//                 accountId: account.accountId\n//             }, sk)\n//\n//             event = StatusChangeEvent.Unlock\n//\n//         } catch (reason) {\n//             myLog('got :', reason)\n//             dumpError400(reason)\n//             if (reason?.response?.data?.resultInfo?.code === 100001) {\n//\n//                 try {\n//\n//                     // const req: GetOffchainFeeAmtRequest = {\n//                     //     accountId: account.accountId,\n//                     //     requestType: OffchainFeeReqType.UPDATE_ACCOUNT,\n//                     // }\n//\n//                     // const response = await userApi.getOffchainFeeAmt(req, account.apiKey)\n//\n//                     const feeMap = {\n//                         'ETH': '529000000000000',\n//                         'LRC': '34000000000000000000',\n//                         'USDT': '7850000',\n//                         'DAI': '98100000000000000000',\n//                     }\n//\n//                     const eddsaKey = await sign_tools\n//                         .generateKeyPair(\n//                             web3,\n//                             account.accAddr,\n//                             exchangeInfo?.exchangeAddress,\n//                             account.nonce,\n//                             account.connectName,\n//                         )\n//\n//                     const request: UpdateAccountRequestV3 = {\n//                         exchange: exchangeInfo?.exchangeAddress,\n//                         owner: account.accAddr,\n//                         accountId: account.accountId,\n//                         publicKey: { x: eddsaKey.formatedPx, y: eddsaKey.formatedPy },\n//                         maxFee: { tokenId: 0, volume: feeMap['ETH'] },\n//                         validUntil: VALID_UNTIL,\n//                         nonce: account.nonce,\n//                     }\n//\n//                     const updateAccountResponse = await LoopringAPI.userAPI.updateAccount(request, web3,\n//                         chainId, account.connectName, false)\n//\n//                     myLog('updateAccountResponse:', updateAccountResponse)\n//\n//                     await sleep(1000)\n//\n//                 } catch (reason2) {\n//                     dumpError400(reason2)\n//                 }\n//             }\n//             event = StatusChangeEvent.Reset\n//         }\n//\n//         if (sk) {\n//             dispatch(setEddsaKey(sk))\n//         }\n//\n//         if (apikey?.apiKey) {\n//             dispatch(setApikey(apikey.apiKey))\n//         }\n//\n//         if (event) {\n//             sendEvent(account, event)\n//         }\n//\n//     }\n//         , [dispatch, sendEvent, connector, chainId, exchangeInfo?.exchangeAddress])\n//\n//     return {\n//         lock,\n//         unlock,\n//     }\n// }\n//\n// async function checkAccountAvailableAsync(exchangeApi: ExchangeAPI, userApi: UserAPI, account: Lv2Account, dispatch: any, sendEvent: any, connector: any, exchangeAddress: string) {\n//\n//     let accInfo = undefined\n//     let event = undefined\n//     let sk = undefined\n//     let code = undefined\n//     let apikey: any = undefined\n//\n//     try {\n//         accInfo = (await exchangeApi.getAccount({\n//             owner: account.accAddr\n//         })).accInfo\n//         if (accInfo.publicKey && accInfo.publicKey.x && accInfo.publicKey.y) {\n//             if (account.accountId !== accInfo.accountId) {\n//                 const provider = await connector.getProvider()\n//                 const web3 = new Web3(provider as any)\n//                 try {\n//                     code = await web3.eth.getCode(account.accAddr)\n//                     try {\n//                         const eddsakey = await sign_tools\n//                             .generateKeyPair(\n//                                 web3,\n//                                 account.accAddr,\n//                                 exchangeAddress,\n//                                 accInfo.nonce - 1,\n//                                 account.connectName,\n//                             )\n//                         sk = toHex(toBig(eddsakey.keyPair.secretKey))\n//                         const px = toHex(toBig(eddsakey.keyPair.publicKeyX))\n//                         const py = toHex(toBig(eddsakey.keyPair.publicKeyY))\n//\n//                         try {\n//                             apikey = await userApi.getUserApiKey({\n//                                 accountId: accInfo.accountId\n//                             }, sk)\n//                             event = (StatusChangeEvent.HasPubkey)\n//                         } catch (reason) {\n//                             dumpError400(reason)\n//                             event = (StatusChangeEvent.ErrorResponse)\n//                         }\n//                     } catch (reason) {\n//                         dumpError400(reason)\n//                         event = (StatusChangeEvent.ErrorResponse)\n//                     }\n//\n//                 } catch (reason) {\n//                     dumpError400(reason)\n//                     event = (StatusChangeEvent.ErrorResponse)\n//                 }\n//\n//             } else {\n//                 myLog('already has accountId!')\n//             }\n//         } else {\n//             event = (StatusChangeEvent.HasNoPubkey)\n//         }\n//     } catch (reason) {\n//         // 3 has none of above\n//         dumpError400(reason)\n//         // check deposit tx (local and ethereum)\n//         event = (StatusChangeEvent.ErrorResponse)\n//     }\n//\n//     if (accInfo && accInfo.owner !== account.accAddr) {\n//         dispatch(setAccountInfo(accInfo))\n//     }\n//\n//     if (sk) {\n//         dispatch(setEddsaKey(sk))\n//     }\n//\n//     if (apikey) {\n//         dispatch(setApikey(apikey.apiKey))\n//     }\n//\n//     if (event) {\n//         sendEvent(event)\n//     }\n//\n// }\n//\n// export function useCheckAccStatus() {\n//\n//     const dispatch = useDispatch()\n//\n//     const { sendEvent } = useStateMachine()\n//\n//     const { account: web3Account, active, isConnected, chainId, connector, } = useWeb3Account()\n//     const { marketArray } = useTokenMap()\n//\n//     const lv1Acc = web3Account as string\n//\n//     const prevChainId = usePrevious(chainId)\n//     const prevWeb3Account = usePrevious(web3Account)\n//\n//     const {updateWalletLayer1, resetLayer1,} = useWalletLayer1()\n//     const {updateWalletLayer2, resetLayer2, } = useWalletLayer2();\n//\n//     // const { updateWalletLayer1,resetLayer1} = useWalletLayer1();\n//     // const { updateWalletLayer2, resetLayer2} = useWalletLayer2()\n//     // console.log('prevChainId:', prevChainId, ' chainId:', chainId)\n//     // console.log('prevWeb3Account:', prevWeb3Account, ' web3Account:', web3Account)\n//     // console.log(exchangeApi, userApi, account, 'prevChainId:', prevChainId, 'chainId:', chainId, 'web3Account:', web3Account)\n//\n//     useCustomDCEffect(async() => {\n//\n//         const account = store.getState().account as Lv2Account\n//\n//         const exchangeAddress = store.getState().system.exchangeInfo?.exchangeAddress\n//\n//         const cleanUp = () => {\n//             let handler = UserStorage.getHandler()\n//             if (account.status !== AccountStatus.ACTIVATED && handler) {\n//                 clearInterval(handler)\n//             }\n//         }\n//\n//         async function checkStatus() {\n//\n//             if (!account || !lv1Acc || !LoopringAPI.userAPI || !LoopringAPI.exchangeAPI || !chainId\n//                 || !connector || !exchangeAddress) {\n//                 return\n//             }\n//\n//             if (((prevChainId && chainId && prevChainId !== chainId)\n//                 || (prevWeb3Account && web3Account && prevWeb3Account !== web3Account))\n//                 && account.status !== AccountStatus.UNCONNNECTED) {\n//                 dispatch(reset(undefined))\n//                 sendEvent(account, StatusChangeEvent.Reset)\n//                 return\n//             }\n//\n//             cleanUp()\n//\n//             switch (account.status) {\n//                 case AccountStatus.UNCONNNECTED:\n//                     myLog('---> render UNCONNNECTED active:', active, ' isConnected:', isConnected)\n//\n//                     if (isConnected) {\n//                         dispatch(setConnectNameTemp(ConnectorNames.Injected))\n//                         sendEvent(account, StatusChangeEvent.Connecting)\n//                     }\n//\n//                     //HIGH:\n//                     resetLayer1()\n//                     resetLayer2()\n//                     break\n//\n//                 case AccountStatus.CONNECTED:\n//                     //check session or local storage\n//\n//                     myLog('---> render CONNECTED account:', account)\n//\n//                     try {\n//\n//                         const { accInfo } = (await LoopringAPI.exchangeAPI.getAccount({ owner: lv1Acc }))\n//\n//                         // current acc is local acc info\n//                         if (account.accAddr && account.eddsaKey && accInfo.owner === account.accAddr) {\n//                             // console.log('cur Eddsakey:', account.eddsaKey)\n//                         } else {\n//                             // console.log('got a new address:', acc)\n//                             // got a new address\n//                             dispatch(setAccountInfo(accInfo))\n//                             // dispatch(setEddsaKey(''))\n//\n//                             //updateWalletLayer1();\n//                             if (marketArray?.length) {\n//                                 updateWalletLayer1()\n//                             }\n//                         }\n//\n//                         if (account?.connectName !== account?.connectNameTemp) {\n//                             dispatch(setConnectName(account.connectNameTemp))\n//                         }\n//\n//                         sendEvent(account, StatusChangeEvent.HasPubkey)\n//\n//                     } catch (reason) {\n//                         dumpError400(reason)\n//\n//                         if (lv1Acc) {\n//                             dispatch(setAccAddr(lv1Acc))\n//                         }\n//\n//                         if (reason.response && reason.response.data && reason.response.data.resultInfo\n//                             && reason.response.data.resultInfo.code === 101002) {\n//                             sendEvent(account, StatusChangeEvent.ErrorResponse)\n//                         }\n//                     }\n//\n//                     break\n//\n//                 case AccountStatus.NOACCOUNT:\n//\n//                     myLog('NOACCOUNT before wait 30s!')\n//\n//                     _.delay(() => {\n//                         sendEvent(account, StatusChangeEvent.Reconnect)\n//                         myLog('NOACCOUNT wait 15s to reconnect again!')\n//                     }, 30000)\n//\n//                     break\n//\n//                 case AccountStatus.DEPOSITING:\n//                     const depositFinished = true // TODO\n//                     if (depositFinished) {\n//                         //   console.log('depositFinished currStatus:', account.status)\n//                         sendEvent(account, StatusChangeEvent.FinishDeposit)\n//                     }\n//                     break\n//\n//                 case AccountStatus.DEPOSIT_TO_CONFIREM:\n//                     // getAccount every 10s to check\n//                     break\n//\n//                 case AccountStatus.UNACTIVATED:\n//                     const isSmartWallet = false // TODO\n//                     if (isSmartWallet) {\n//                         sendEvent(account, StatusChangeEvent.IsSmartWallet)\n//                     } else {\n//                         // console.log('approve hash no smartwallet, account.status:', account.status)\n//                     }\n//                     break\n//\n//                 case AccountStatus.ARPROVING:\n//                     const approved = false // TODO\n//                     if (approved) {\n//                         //  console.log('sub contract event, check approving. approved! status:', account.status)\n//                         sendEvent(account, StatusChangeEvent.ApproveSubmit)\n//                     }\n//                     break\n//\n//                 case AccountStatus.APPROV_TO_CONFIRM:\n//                     const approveConfirmed = false // TODO\n//                     if (approveConfirmed) {\n//                         //   console.log('approveConfirmed status:', account.status)\n//                         sendEvent(account, StatusChangeEvent.ApproveConfirmed)\n//                     }\n//                     break\n//\n//                 case AccountStatus.LOCKED:\n//                     //HIGH:\n//                     resetLayer1()\n//                     break\n//\n//                 case AccountStatus.ACTIVATED:\n//                     UserStorage.checkTimeout(true)\n//                     const handler = setInterval(() => {\n//                         const isTimeOut = UserStorage.checkTimeout()\n//                         if (account.status === AccountStatus.ACTIVATED && isTimeOut) {\n//                             clearInterval(handler)\n//                             sendEvent(account, StatusChangeEvent.Lock)\n//                         }\n//                     }, 1000)\n//                     UserStorage.setHandler(handler)\n//                     updateWalletLayer2()\n//                     break\n//\n//                 default:\n//                     break\n//             }\n//\n//\n//\n//         }\n//\n//         checkStatus()\n//\n//         return () => {\n//             cleanUp()\n//         }\n//\n//     }, [updateWalletLayer1, updateWalletLayer2, resetLayer1, resetLayer2,\n//         LoopringAPI.userAPI, LoopringAPI.exchangeAPI, store.getState().account.status, prevChainId, chainId, lv1Acc,\n//         dispatch, connector, store.getState().system.exchangeInfo?.exchangeAddress])\n//\n// }\n//\n","import { createAction } from '@reduxjs/toolkit'\n\n// fired once when the app reloads but before the app renders\n// allows any updates to be applied to store data loaded from localStorage\nexport const updateVersion = createAction<void>('global/updateVersion')\n","import { createSlice, PayloadAction, Slice } from '@reduxjs/toolkit'\nimport { AmmMapStates, GetAmmMapParams } from './interface';\nimport { SagaStatus } from '@loopring-web/common-resources';\n\n\nconst initialState: Required<AmmMapStates<object, object>> = {\n    ammMap: undefined,\n    __timer__: -1,\n    status: 'PENDING',\n    errorMessage: null,\n}\nconst ammMapSlice: Slice = createSlice({\n    name: 'ammMap',\n    initialState,\n    reducers: {\n        getAmmMap(state, action: PayloadAction<GetAmmMapParams>) {\n            state.status = SagaStatus.PENDING\n        },\n        getAmmMapStatus(state, action: PayloadAction<AmmMapStates<any, any>>) {\n            // @ts-ignore\n            if (action.error) {\n                state.status = SagaStatus.ERROR\n                // @ts-ignore\n                state.errorMessage = action.error\n            }\n            const {ammMap, __timer__} = action.payload\n            if (ammMap) {\n                state.ammMap = ammMap;\n            }\n            if (__timer__) {\n                state.__timer__ = __timer__;\n            }\n            state.status = SagaStatus.DONE\n        },\n        updateRealTimeAmmMap(state, action: PayloadAction<undefined>) {\n            state.status = SagaStatus.PENDING\n        },\n        statusUnset: state => {\n            state.status = SagaStatus.UNSET\n        }\n    },\n});\nexport { ammMapSlice };\nexport const {getAmmMap, getAmmMapStatus, statusUnset, updateRealTimeAmmMap} = ammMapSlice.actions\n","import { useDispatch, useSelector } from 'react-redux'\nimport { AmmMapStates } from './interface';\nimport React from 'react';\nimport { getAmmMap, statusUnset } from './reducer';\n\nexport const useAmmMap = <R extends {[key:string]:any},I extends {[key:string]:any}>(): AmmMapStates<R,I> & {\n    getAmmMap:()=> void,\n    statusUnset:()=> void,\n} => {\n    const ammMap:AmmMapStates<R,I>= useSelector((state: any) => state.amm.ammMap)\n    const dispatch = useDispatch();\n    return {\n        ...ammMap,\n        statusUnset:React.useCallback(()=>dispatch(statusUnset(undefined)),[dispatch]),\n        getAmmMap:React.useCallback(()=>dispatch(getAmmMap(undefined)),[dispatch]),\n    }\n}\n","import { createSlice, PayloadAction, Slice } from '@reduxjs/toolkit'\nimport { AmmActivityMapStates } from './interface';\nimport { SagaStatus } from '@loopring-web/common-resources';\n\n\nconst initialState: Required<AmmActivityMapStates> = {\n    ammActivityMap: {},\n    status: 'PENDING',\n    errorMessage: null,\n}\nconst ammActivityMapSlice: Slice = createSlice({\n    name: 'ammActivityMap',\n    initialState,\n    reducers: {\n        getAmmActivityMap(state, action: PayloadAction<string | undefined>) {\n            state.status = SagaStatus.PENDING\n        },\n        getAmmActivityMapStatus(state, action: PayloadAction<AmmActivityMapStates>) {\n            // @ts-ignore\n            if (action.error) {\n                state.status = SagaStatus.ERROR\n                // @ts-ignore\n                state.errorMessage = action.error\n            }\n            state.ammActivityMap = {...action.payload.ammActivityMap};\n            state.status = SagaStatus.DONE\n        },\n        statusUnset: state => {\n            state.status = SagaStatus.UNSET\n        }\n\n    },\n});\nexport { ammActivityMapSlice };\nexport const {getAmmActivityMap, getAmmActivityMapStatus, statusUnset} = ammActivityMapSlice.actions\n","import { useDispatch, useSelector } from 'react-redux'\nimport { AmmActivityMapStates } from './interface';\nimport { ammActivityMapSlice, getAmmActivityMap, statusUnset } from './reducer';\nimport React from 'react';\n\nexport function useAmmActivityMap(): AmmActivityMapStates & {\n    getAmmActivityMap:()=> void,\n    statusUnset:()=> void,\n} {\n    const ammActivityMap:AmmActivityMapStates = useSelector((state: any) => state.amm.ammActivityMap)\n    const dispatch = useDispatch();\n    return {\n        ...ammActivityMap,\n        statusUnset: React.useCallback(()=>dispatch(statusUnset(undefined)),[dispatch]),\n        getAmmActivityMap: React.useCallback(()=>dispatch(getAmmActivityMap(undefined)),[dispatch])\n    }\n\n}\n","import { AmmpoolAPI, ChainId, ExchangeAPI, UserAPI, WalletAPI, WsAPI } from \"loopring-sdk\"\nimport store from 'stores'\nimport { Chain } from \"voca\"\n\nexport function getChainId(){\n    const chainId = store.getState().system.chainId\n    return { chainId: chainId as ChainId }\n}\n\nexport const walletAPI = () => {\n    const walletApi = new WalletAPI(getChainId())\n    return walletApi\n}\n\nexport const userAPI = () => {\n    const userApi = new UserAPI(getChainId())\n    return userApi\n}\n\nexport const exchangeAPI = () => {\n    const exchangeApi = new ExchangeAPI(getChainId())\n    return exchangeApi\n}\n\nexport const ammpoolAPI = () => {\n    const ammpoolApi = new AmmpoolAPI(getChainId())\n    return  ammpoolApi\n}\n\nexport const wsAPI = () => {\n    const wsApi = new WsAPI(getChainId())\n    return wsApi\n}\n\nexport class LoopringAPI {\n    \n    public static userAPI: UserAPI | undefined = undefined\n    public static exchangeAPI: ExchangeAPI | undefined = undefined\n    public static ammpoolAPI: AmmpoolAPI | undefined = undefined\n    public static walletAPI: WalletAPI | undefined = undefined\n    public static wsAPI: WsAPI | undefined = undefined\n\n    public static InitApi = (chainId: ChainId) => {\n        LoopringAPI.userAPI = new UserAPI({ chainId }) \n        LoopringAPI.exchangeAPI = new ExchangeAPI({ chainId }) \n        LoopringAPI.ammpoolAPI = new AmmpoolAPI({ chainId }) \n        LoopringAPI.walletAPI = new WalletAPI({ chainId }) \n        LoopringAPI.wsAPI = new WsAPI({ chainId }) \n    }\n\n}\n","import { all, takeLatest, call, put } from \"redux-saga/effects\"\nimport { getAmmActivityMap, getAmmActivityMapStatus } from './reducer'\nimport { LoopringAPI } from '../../apis/api';\nconst getAmmActivityMapApi = async () => {\n\n    if(LoopringAPI.ammpoolAPI){\n        const { groupByRuleTypeAndStatus } =  await LoopringAPI.ammpoolAPI.getAmmPoolActivityRules();\n        return  {data:groupByRuleTypeAndStatus}\n    }else{\n        return {data:undefined}\n    }\n\n}\n\nexport function* getPostsSaga() {\n    try {\n        //\n        const { data } = yield call(getAmmActivityMapApi);\n        yield put(getAmmActivityMapStatus({ammActivityMap:data}));\n    } catch (err) {\n        yield put(getAmmActivityMapStatus(err));\n    }\n}\n\nexport default function* ammActivityMapSaga() {\n    yield all([takeLatest(getAmmActivityMap, getPostsSaga)]);\n}\n","import { all, call, fork, put, takeLatest } from \"redux-saga/effects\";\nimport { getAmmMap, getAmmMapStatus, updateRealTimeAmmMap } from './reducer';\nimport { AmmDetail } from '@loopring-web/common-resources';\nimport store from '../../index';\nimport { AmmPoolInfoV3, AmmPoolStat, toBig, TokenVolumeV3, } from \"loopring-sdk\";\nimport { ammpoolAPI } from \"stores/apis/api\";\nimport { PayloadAction } from '@reduxjs/toolkit';\nimport { AmmDetailStore, GetAmmMapParams } from './interface';\nimport { volumeToCount, volumeToCountAsBigNumber } from '../../../hooks/help';\n\ntype AmmMap<R extends { [ key: string ]: any }> = { [ key: string ]: AmmDetail<R> } | {}  //key is AMM-XXX-XXX\nexport const setAmmState = ({ammPoolState, keyPair}: { ammPoolState: AmmPoolStat, keyPair: string }) => {\n    const {idIndex} = store.getState().tokenMap\n    // @ts-ignore\n    const [, coinA, coinB] = keyPair.match(/(\\w+)-(\\w+)/i);\n    const {forex,faitPrices} = store.getState().system;\n    if (idIndex && coinA && coinB && faitPrices && forex) {\n        let result =  {\n            amountDollar: parseFloat(ammPoolState.liquidityUSD),\n            amountYuan: (parseFloat(ammPoolState.liquidityUSD) / (forex ? forex : 6.5)),\n            totalLPToken: volumeToCount('LP-' + keyPair, ammPoolState.lpLiquidity),\n            totalA: volumeToCount(coinA, ammPoolState.liquidity[ 0 ]),//parseInt(ammPoolState.liquidity[ 0 ]),\n            totalB: volumeToCount(coinB, ammPoolState.liquidity[ 1 ]),//parseInt(ammPoolState.liquidity[ 1 ]),\n            rewardValue: ammPoolState.rewards[ 0 ] ? volumeToCount(idIndex[ ammPoolState.rewards[ 0 ].tokenId as number ], ammPoolState.rewards[ 0 ].volume) : undefined,\n            rewardToken: ammPoolState.rewards[ 0 ] ? idIndex[ ammPoolState.rewards[ 0 ].tokenId as number ] : undefined,\n            rewardValue2: ammPoolState.rewards[ 1 ] ? volumeToCount(idIndex[ ammPoolState.rewards[ 1 ].tokenId as number ], ammPoolState.rewards[ 1 ].volume) : undefined,\n            rewardToken2: ammPoolState.rewards[ 1 ] ? idIndex[ ammPoolState.rewards[ 1 ].tokenId as number ] : undefined,\n        }\n\n        const feeA =  volumeToCountAsBigNumber(coinA, ammPoolState.fees[ 0 ]);//parseInt(ammPoolState.fees[ 0 ]),\n        const feeB = volumeToCountAsBigNumber(coinB, ammPoolState.fees[ 1 ]);//parseInt(ammPoolState.fees[ 1 ]),\n        const feeDollar =  faitPrices[coinA] && faitPrices[coinB]  ?\n            toBig(feeA||0).times(faitPrices[coinA].price).plus(toBig(feeB||0).times(faitPrices[coinB].price)):undefined\n        const feeYuan = feeDollar ? feeDollar.times(forex) : undefined;\n\n        return {\n             ...result,\n            feeA:feeA?.toNumber(),\n            feeB:feeB?.toNumber(),\n            feeDollar:feeDollar? feeDollar.toNumber(): undefined,\n            feeYuan:feeYuan? feeYuan.toNumber(): undefined,\n            tradeFloat: {\n                change: undefined,\n                timeUnit: '24h',\n                // priceYuan: 100,\n                // priceDollar: 1.23123,\n                // floatTag: FloatTag.increase,\n                // reward: 12312,\n                // APY: (parseInt(ammPoolState.apyBips) * 1.0 / 100)\n            },\n            APY: (parseInt(ammPoolState.apyBips) * 1.0 / 100)\n        }\n\n\n    }\n}\nconst getAmmMapApi = async <R extends { [ key: string ]: any }>({ammpools}: GetAmmMapParams) => {\n\n    let ammMap: AmmMap<R> = {}\n    const {ammPoolStats} = (await ammpoolAPI().getAmmPoolStats());\n\n    let {__timer__} = store.getState().amm.ammMap\n    __timer__ = (() => {\n        if (__timer__ && __timer__ !== -1) {\n            clearInterval(__timer__)\n        }\n        return setInterval(async () => {\n            let ammPoolStats: { [key in keyof R]: AmmPoolStat } = (await ammpoolAPI().getAmmPoolStats()).ammPoolStats as { [key in keyof R]: AmmPoolStat }\n            store.dispatch(updateRealTimeAmmMap({ammPoolStats}))\n        }, 900000)    //15*60*1000 //900000\n    })()\n    const {tokenMap: {coinMap, idIndex}} = store.getState();\n\n    // const forex = faitPrices.prices['USDC']\n\n\n    Reflect.ownKeys(ammpools).forEach(async (key) => {\n        const item: AmmPoolInfoV3 = ammpools[ key as string ]\n        if (item.market === key && item.tokens.pooled && idIndex) {\n\n            // const tokenA =  ; //getTokenInfoById(tokens.tokenIdMap, parseInt(item.tokens.pooled[0]))\n            // const tokenB =  ; // getTokenInfoById(tokens.tokenIdMap, parseInt(item.tokens.pooled[1]))\n            const coinA = idIndex[ item.tokens.pooled[ 0 ] as any ];\n            const coinB = idIndex[ item.tokens.pooled[ 1 ] as any ];\n            const dataItem: AmmDetailStore<R> = {\n                coinA: coinA,\n                coinB: coinB,\n                isNew: Date.now() - (Number(item.createdAt)) > 3 * 86400 * 1000 ? false : true,//3*24*60*60*1000,\n                isActivity: item.status === 7 ? true : false,\n                address: item.address,\n                ...setAmmState({ammPoolState: ammPoolStats[ key ], keyPair: `${coinA}-${coinB}`}),\n                __rawConfig__: item\n            } as AmmDetailStore<R>\n            // @ts-ignore\n            ammMap[ item.market ] = dataItem\n\n\n        }\n\n\n    })\n    return {ammMap, __timer__}\n}\n\n\nexport function* getPostsSaga({payload}: PayloadAction<GetAmmMapParams>) {\n    try {\n        const {ammpools} = payload;\n        const {ammMap, __timer__} = yield call(getAmmMapApi, {ammpools});\n        yield put(getAmmMapStatus({ammMap, __timer__}));\n    } catch (err) {\n        yield put(getAmmMapStatus(err));\n    }\n}\n\nexport function* updateRealTimeSaga({payload}: any) {\n    try {\n        const {ammPoolStats} = payload;\n        let {ammMap}: { ammMap: AmmMap<object> } = store.getState().amm.ammMap;\n        if (ammPoolStats) {\n            //{ ammPoolStats?: { [ key: string ]: AmmPoolStat } }\n            Reflect.ownKeys(ammPoolStats).map((key) => {\n                const keyPair = (key as string).replace('AMM-', '')\n                \n                // @ts-ignore\n                ammMap[ key ] = {\n                    // @ts-ignore\n                    ...ammMap[ key ],\n                    ...setAmmState({ammPoolState: ammPoolStats[ key as string ], keyPair, })\n                }\n                return ammMap\n            })\n        }\n        yield put(getAmmMapStatus({ammMap}));\n    } catch (err) {\n        yield put(getAmmMapStatus(err));\n    }\n}\n\n\nexport function* ammMapInitSaga() {\n    yield all([takeLatest(getAmmMap, getPostsSaga)]);\n}\n\nexport function* ammMapRealTimeSaga() {\n    yield all([takeLatest(updateRealTimeAmmMap, updateRealTimeSaga)]);\n}\n\nexport const ammMapSaga = [\n        fork(ammMapInitSaga),\n        fork(ammMapRealTimeSaga),\n]\n\n","import { combineReducers } from '@reduxjs/toolkit';\n// import { ammRecordSlice } from './AmmConfig';\n// import { ammTradesSlice } from './AmmTrades';\nimport { ammMapSlice } from './AmmMap';\nimport { ammActivityMapSlice } from './AmmActivityMap';\nimport ammActivityMapSaga from './AmmActivityMap/saga';\nimport { ammMapSaga } from './AmmMap/saga';\n// import ammTradesSaga from './AmmTrades/saga';\nimport {  fork } from 'redux-saga/effects';\n\nexport const  ammReducer = combineReducers({\n    // ammRecord: ammRecordSlice.reducer,\n    // ammTrades: ammTradesSlice.reducer,\n    ammMap: ammMapSlice.reducer,\n    ammActivityMap:ammActivityMapSlice.reducer\n})\nexport const ammForks =  [\n    fork(ammActivityMapSaga),\n    ...ammMapSaga,\n    // fork(ammRecordSaga),\n    // fork(ammTradesSaga)\n]\n\n// export * from './interface'\n","import { createSlice, PayloadAction, Slice } from '@reduxjs/toolkit'\nimport { GetTokenMapParams, TokenMapStates } from './interface';\nimport { SagaStatus } from '@loopring-web/common-resources';\n\nconst initialState: TokenMapStates<object> = {\n    coinMap: {},\n    totalCoinMap: {},\n    addressIndex: undefined,\n    tokenMap: undefined,\n    marketMap: undefined,\n    idIndex: undefined,\n    status: 'PENDING',\n    errorMessage: null,\n}\nconst tokenMapSlice: Slice<TokenMapStates<object>> = createSlice({\n    name: 'tokenMap',\n    initialState,\n    reducers: {\n        getTokenMap(state, action: PayloadAction<GetTokenMapParams<any>>) {\n            state.status = SagaStatus.PENDING\n        },\n        getTokenMapStatus(state, action: PayloadAction<TokenMapStates<object>>) {\n            // @ts-ignore      console.log(action.type)\n            if (action.error) {\n                state.status = SagaStatus.ERROR\n                // @ts-ignore\n                state.errorMessage = action.error\n            }\n\n            const {\n                tokenMap,\n                totalCoinMap,\n                marketMap,\n                addressIndex,\n                idIndex,\n                coinMap,\n                marketArray,\n                marketCoins\n            } = action.payload;\n            if (tokenMap) {\n                state.tokenMap = tokenMap\n            }\n            if (marketMap) {\n                state.marketMap = marketMap\n            }\n            if (addressIndex) {\n                state.addressIndex = addressIndex\n            }\n            if (idIndex) {\n                state.idIndex = idIndex\n            }\n            if (coinMap) {\n                state.coinMap = coinMap\n            }\n            if (totalCoinMap) {\n                state.totalCoinMap = totalCoinMap\n            }\n            if (marketArray) {\n                state.marketArray = marketArray\n            }\n            if (marketCoins) {\n                state.marketCoins = marketCoins\n            }\n            // if (tokenPairsMap) {state.tokenPairsMap = tokenPairsMap }\n            state.status = SagaStatus.DONE;\n        },\n\n        // getTokenPairMap(state, action: PayloadAction<{tokenPairs: TokenPairs }>) {\n        //     const {tokenPairs} = action.payload;\n        //     const tokenPairsMap =  Reflect.ownKeys(tokenPairs).reduce((prev,key)=>{\n        //         // @ts-ignore\n        //         return prev[key as string] =  tokenPairs[key as string].tokenList\n        //     }, {} )\n        //     if (tokenPairsMap) {state.tokenPairsMap = tokenPairsMap }\n        //     // state.status = SagaStatus.PENDING\n        // },\n        statusUnset: state => {\n            state.status = SagaStatus.UNSET\n        }\n\n    },\n});\nexport { tokenMapSlice };\nexport const {getTokenMap, getTokenMapStatus, statusUnset} = tokenMapSlice.actions;","import { useDispatch, useSelector } from 'react-redux'\nimport { getTokenMap, statusUnset} from './reducer';\nimport { GetTokenMapParams, TokenMapStates } from './interface';\nimport React from 'react';\nimport { PayloadAction } from '@reduxjs/toolkit';\n\nexport function useTokenMap<R extends {[key:string]:any}>(): TokenMapStates<R> & {\n    getTokenMap:(props:PayloadAction<GetTokenMapParams<any>>)=>void,\n    statusUnset:()=>void,\n} {\n    const tokenMap:TokenMapStates<R> = useSelector((state: any) => state.tokenMap)\n    const dispatch = useDispatch();\n\n    return {\n        ...tokenMap,\n        statusUnset:React.useCallback(()=>dispatch(statusUnset(undefined)),[dispatch]),\n        getTokenMap:React.useCallback((props:PayloadAction<GetTokenMapParams<R>>)=>dispatch(getTokenMap(props)),[dispatch]),\n    }\n\n}\n","import { utils } from 'ethers'\n\nimport { TokenInfo, } from 'loopring-sdk'\n\nimport { CoinInfo, } from '@loopring-web/common-resources'\n\nexport function getIcon(symbol: string, tokens: any) {\n    const token: any = tokens[symbol]\n    return getIconByTokenInfo(token)\n}\n\nexport function getIconByTokenInfo(token: TokenInfo) {\n    if (token) {\n        const addr = utils.getAddress(token.address)\n        const path = `https://exchange.loopring.io/assets/images/ethereum/assets/${addr}/logo.png`\n        return path\n    }\n    return ''\n}\n\nexport function makeCoinInfo(token: TokenInfo) {\n    if (token) {\n        const info: CoinInfo<any> = {\n            icon: getIconByTokenInfo(token),\n            name: token.symbol,\n            simpleName: token.symbol,\n            description: token.name,\n            company: token.name,\n        }\n        return info\n    }\n    return undefined\n}","import { all, call, fork, put, takeLatest } from \"redux-saga/effects\";\nimport { getTokenMap, getTokenMapStatus } from './reducer';\nimport { getIcon } from '../../utils/swap_utils';\nimport { CoinInfo, CoinMap } from '@loopring-web/common-resources';\nimport { AddressMap, GetTokenMapParams, IdMap } from './interface';\nimport { PayloadAction } from '@reduxjs/toolkit';\n\nconst getTokenMapApi = async <R extends { [ key: string ]: any }>({\n                                                                      tokensMap,\n                                                                      pairs,\n                                                                      marketArr,\n                                                                      tokenArr\n                                                                  }: GetTokenMapParams<R>) => {\n    let coinMap: CoinMap<any, CoinInfo<any>> = {};\n    let totalCoinMap: CoinMap<any, CoinInfo<any>> = {};\n    let tokenMap:any = tokensMap;\n    let addressIndex: AddressMap = {};\n    let idIndex: IdMap = {};\n    Reflect.ownKeys(tokensMap).forEach((key) => {\n        const coinInfo = {\n            icon: getIcon(key as string, tokensMap),\n            name: key as string,\n            simpleName: key as string,\n            description: '',\n            company: '',\n        }\n        if (!(key as string).startsWith('LP-')) {\n            coinMap[ key as string ] = coinInfo\n        }\n        totalCoinMap[ key as string ] = coinInfo\n\n        if (pairs[ key as string ] && pairs[ key as string ].tokenList) {\n            // @ts-ignore\n            tokensMap[ key ].tradePairs = pairs[ key as string ].tokenList;\n        }\n        addressIndex = {\n            ...addressIndex,\n            // @ts-ignore\n            [ tokensMap[ key ].address ]: key as string\n        }\n        idIndex = {\n            ...idIndex,\n            // @ts-ignore\n            [ tokensMap[ key ].tokenId ]: key as string\n        }\n    })\n    return {data: {coinMap, totalCoinMap, addressIndex, idIndex, tokenMap, marketArray: marketArr, marketCoins: tokenArr}}\n};\n\nexport function* getPostsSaga<R extends { [ key: string ]: any }>({payload}: PayloadAction<GetTokenMapParams<R>>) {\n    try {\n        const {tokensMap, marketMap, pairs, marketArr,tokenArr} = payload\n        // @ts-ignore\n        const {data} = yield call(getTokenMapApi, {tokensMap, pairs, marketArr, tokenArr});\n\n        yield put(getTokenMapStatus({...data, marketMap}));\n    } catch (err) {\n        yield put(getTokenMapStatus(err));\n    }\n}\n\nexport function* tokenInitSaga() {\n    yield all([takeLatest(getTokenMap, getPostsSaga)]);\n}\n\n\nexport const tokenSaga = [\n    fork(tokenInitSaga),\n    // fork(tokenPairsSaga),\n]\n\n// export function* getPairsSaga({payload}:PayloadAction<{tokenPairs: TokenPairs }>) {\n//     try {\n//         const {tokenPairs} = payload;\n//         const tokenPairsMap =  Reflect.ownKeys(tokenPairs).reduce((prev,key)=>{\n//            // @ts-ignore\n//             return prev[key as string] =  tokenPairs[key as string].tokenList\n//         }, {} )\n//\n//         yield put(getTokenMapStatus({tokenPairsMap}));\n//     } catch (err) {\n//         yield put(getAmmMapStatus(err));\n//     }\n// }\n// export function* tokenPairsSaga() {\n//     yield all([takeLatest(getTokenPairMap, getPairsSaga)]);\n// }\n\n\n","import { createSlice, PayloadAction, Slice } from '@reduxjs/toolkit'\nimport { TickerStates } from './interface';\nimport { CoinKey, SagaStatus } from '@loopring-web/common-resources';\n\nconst initialState: Required<TickerStates> = {\n    tickerMap: {},\n    status: 'PENDING',\n    errorMessage: null,\n}\nconst tickerMapSlice: Slice = createSlice({\n    name: 'tickerMap',\n    initialState,\n    reducers: {\n        getTicker(state, action: PayloadAction<CoinKey<any>>) {\n            state.status = SagaStatus.PENDING\n        },\n        getTickers(state, action: PayloadAction<Array<CoinKey<any>>>) {\n            state.status = SagaStatus.PENDING\n        },\n        getTickerStatus(state, action: PayloadAction<TickerStates>) {\n            // @ts-ignore\n            if (action.error) {\n                state.status = SagaStatus.ERROR\n                // @ts-ignore\n                state.errorMessage = action.error\n            }\n            state.tickerMap = action.payload.tickerMap;//{...state.tickerMap,...};\n            state.status = SagaStatus.DONE\n        },\n        statusUnset: state => {\n            state.status = SagaStatus.UNSET\n        }\n\n    },\n});\nexport { tickerMapSlice };\nexport const {getTicker, getTickers, getTickerStatus, statusUnset} = tickerMapSlice.actions;","import { all, call, fork, put, takeLatest } from \"redux-saga/effects\"\nimport { getTicker, getTickers, getTickerStatus } from './reducer'\nimport { CoinKey, CustomError, ErrorMap, PairKey, TradeFloat } from '@loopring-web/common-resources'\n\n\nimport { exchangeAPI } from \"stores/apis/api\"\nimport { makeTickerMap } from '../../hooks/help';\n\n\ntype TickerMap<R extends { [ key: string ]: any }> = {\n    [key in CoinKey<R> | PairKey<R>]?: TradeFloat & {\n    reward?: number, rewardToken?: string\n}\n\n}\n\n\nconst getTickersApi = async <R extends { [ key: string ]: any }>(list: Array<keyof R>) => {\n\n    const tickers = await exchangeAPI().getMixTicker({market: list.join(',')})\n    const data = makeTickerMap({tickerMap: tickers.tickMap})\n    return {data}\n}\n\nexport function* getPostsSaga({payload}: any) {\n    try {\n        // @ts-ignore\n        const {tickerKey, tickerKeys} = payload;\n        if (tickerKey || (tickerKeys && tickerKeys.length)) {\n            const {data} = yield call(getTickersApi, tickerKey ? [tickerKey] : tickerKeys);\n            yield put(getTickerStatus({tickerMap: data}));\n\n        } else {\n            throw new CustomError(ErrorMap.NO_TOKEN_KEY_LIST);\n        }\n    } catch (err) {\n        yield put(getTickerStatus(err));\n    }\n}\n\nfunction* tickerSaga() {\n    yield all([takeLatest(getTicker, getPostsSaga)]);\n}\n\nfunction* tickersSaga() {\n    yield all([takeLatest(getTickers, getPostsSaga)]);\n}\n\nexport const tickerForks = [\n    fork(tickerSaga),\n    fork(tickersSaga),\n]\n ","import { StateBase } from '@loopring-web/common-resources';\nimport { ChainId, ExchangeInfo } from 'loopring-sdk';\n\nexport enum ENV {\n    DEV = 'DEV',\n    UAT = 'UAT',\n    PROD = 'PROD',\n}\n\nexport enum NETWORKEXTEND {\n    NONETWORK = 'unknown'\n}\n\nexport type NETWORK = NETWORKEXTEND | ChainId\n\n\nexport type System<C extends { [ key: string ]: any }> = {\n    env: keyof typeof ENV,\n    chainId: 1 | 5 | 'unknown'\n    // network: keyof typeof NETWORK,\n    etherscanUrl: string,\n    socketURL: string,\n    baseURL: string,\n    faitPrices: { [k in keyof C]: { price: any, [ key: string ]: any } } | undefined,\n    gasPrice: number | undefined,\n    forex: number | undefined,\n    exchangeInfo: ExchangeInfo | undefined,\n\n}\n\nexport type SystemStatus = System<{ [ key: string ]: any }> & {\n    // system:System | {}\n    __timer__: NodeJS.Timeout | -1\n    topics: any[]\n} & StateBase\n\n\n\n\n\n\n","import { createSlice, PayloadAction, Slice } from '@reduxjs/toolkit'\nimport { ENV, System, SystemStatus } from './interface';\nimport { SagaStatus } from '@loopring-web/common-resources';\n\nconst initialState: SystemStatus = {\n    env: ENV.PROD,\n    chainId: 'unknown',\n    // network:'NONETWORK',\n    baseURL: '',\n    socketURL: '',\n    etherscanUrl: '',\n    faitPrices: undefined,\n    gasPrice: undefined,\n    forex: undefined,\n    __timer__: -1,\n    status: 'PENDING',\n    errorMessage: null,\n\n    exchangeInfo: undefined,\n\n    topics: [],\n}\nconst systemSlice: Slice<SystemStatus> = createSlice({\n    name: 'system',\n    initialState,\n    reducers: {\n\n        updateSystem(state, action: PayloadAction<System<{ [ key: string ]: any }>>) {\n            state.chainId = action.payload.chainId\n            state.status = SagaStatus.PENDING\n        },\n        // updateSocketURL(state, action:PayloadAction<{socketURL:string}>) {\n        //     state.socketURL =  action.payload.socketURL;\n        // },\n        updateRealTimeObj(state, action: PayloadAction<Partial<{ faitPrices: any, gasPrice: number, forex: number }>>) {\n            const {forex, faitPrices, gasPrice} = action.payload;\n            if (forex) {\n                state.forex = forex\n            }\n            if (faitPrices) {\n                state.faitPrices = faitPrices\n            }\n            if (gasPrice) {\n                state.gasPrice = gasPrice\n            }\n\n\n            // state = {\n            //     ...state.system,\n            //     forex: forex?,\n            //     faitPrices: action.payload.faitPrices ? action.payload.faitPrices : state.system.faitPrices,\n            //     gasPrice: action.payload.gasPrice ? action.payload.gasPrice : state.system.gasPrice,\n            // };\n\n        },\n        getSystemStatus(state, action: PayloadAction<Partial<SystemStatus>>) {\n\n            // @ts-ignore\n            if (action.error) {\n                state.status = SagaStatus.ERROR\n                // @ts-ignore\n                state.errorMessage = action.error\n            }\n            const {\n                env,\n                baseURL,\n                socketURL,\n                faitPrices,\n                gasPrice,\n                forex,\n                exchangeInfo,\n                __timer__,\n                etherscanUrl\n            } = action.payload;\n            if (env) {\n                state.env = env\n            }\n            if (socketURL) {\n                state.socketURL = socketURL;\n            }\n            if (baseURL) {\n                state.baseURL = baseURL\n            }\n            if (faitPrices) {\n                state.faitPrices = faitPrices\n            }\n            if (gasPrice) {\n                state.gasPrice = gasPrice\n            }\n            if (forex) {\n                state.forex = forex\n            }\n\n            if (exchangeInfo) {\n                state.exchangeInfo = exchangeInfo\n            }\n            if (etherscanUrl) {\n                state.etherscanUrl = etherscanUrl\n            }\n\n            if (__timer__) {\n                state.__timer__ = __timer__\n            }\n            state.status = SagaStatus.DONE\n        },\n        statusUnset: state => {\n            state.status = SagaStatus.UNSET\n        }\n\n    },\n});\nexport { systemSlice };\nexport const {updateSystem, setTopics, getSystemStatus, statusUnset, updateRealTimeObj} = systemSlice.actions;","import { createSlice, PayloadAction, Slice } from '@reduxjs/toolkit'\nimport { WalletLayer1Map, WalletLayer1States } from './interface';\nimport { SagaStatus } from '@loopring-web/common-resources';\n\n\nconst initialState: WalletLayer1States = {\n    walletLayer1: undefined,\n    status: 'DONE',\n    errorMessage: null,\n}\nconst walletLayer1Slice: Slice = createSlice({\n    name: 'walletLayer1',\n    initialState,\n    reducers: {\n        updateWalletLayer1(state, action: PayloadAction<string | undefined>) {\n            state.status = SagaStatus.PENDING\n        },\n        reset(state, action: PayloadAction<string | undefined>) {\n            state.walletLayer1 = undefined;\n            state.status = SagaStatus.UNSET;\n        },\n        getWalletLayer1Status(state, action: PayloadAction<{ walletLayer1: WalletLayer1Map<object> }>) {\n            // @ts-ignore\n            if (action.error) {\n                state.status = SagaStatus.ERROR\n                // @ts-ignore\n                state.errorMessage = action.error\n            }\n            state.walletLayer1 = {...action.payload.walletLayer1};\n            state.status = SagaStatus.DONE\n        },\n        statusUnset: state => {\n            state.status = SagaStatus.UNSET\n        }\n    },\n});\nexport { walletLayer1Slice };\nexport const {updateWalletLayer1, getWalletLayer1Status, statusUnset, reset} = walletLayer1Slice.actions\n","import { useDispatch, useSelector } from 'react-redux'\nimport { updateWalletLayer1, reset,statusUnset } from './reducer';\nimport { WalletLayer1States } from './interface';\nimport React from 'react';\n\nexport function useWalletLayer1(): WalletLayer1States & {\n    updateWalletLayer1:()=> void,\n    statusUnset:()=> void,\n    resetLayer1:()=>void,\n} {\n    const walletLayer1:WalletLayer1States = useSelector((state: any) => state.walletLayer1)\n    const dispatch = useDispatch();\n\n    return {\n        ...walletLayer1,\n        resetLayer1:React.useCallback(()=>{\n            dispatch(reset(undefined))\n        },[dispatch]),\n        statusUnset:React.useCallback(()=>dispatch(statusUnset(undefined)),[dispatch]),\n        updateWalletLayer1:React.useCallback(()=>dispatch(updateWalletLayer1(undefined)),[dispatch]),\n    }\n\n}\n","import {\n    ChainId,\n    getAccountArg,\n    getAmmpoolArg,\n    getCandlestickArg,\n    getOrderArg,\n    getOrderBookArg,\n    getTickerArg,\n    getTradeArg,\n    toBig,\n} from 'loopring-sdk';\nimport { tickerService } from './tickerService';\nimport { ammPoolService } from './ammPoolService';\nimport { CustomError, ErrorMap } from '@loopring-web/common-resources';\nimport { LoopringAPI } from '../stores/apis/api';\n// import store from '../stores';\n// import { updateSocketURL } from '../stores/system';\n\n\nexport type SocketEvent = (e: any, ...props: any[]) => any\n\nexport enum SocketEventType {\n    pingpong = 'pingpong',\n    account = \"account\",\n    order = \"order\",\n    orderbook = \"orderbook\",\n    trade = \"trade\",\n    ticker = \"ticker\",\n    candlestick = \"candlestick\",\n    ammpool = \"ammpool\"\n}\n\nexport type SocketCallbackMap = {\n    // [SocketEventType.pingpong]:  { fn: SocketEvent, deps?: any[] },\n    [key in SocketEventType]?: { fn: SocketEvent, deps: any[] }\n}\n//\nexport type SocketEventMap = {\n    [key in SocketEventType]: SocketEvent\n}\n\nexport class LoopringSocket {\n    private static SocketEventMap: SocketEventMap = {\n        [ SocketEventType.account ]: (_e: any) => {\n\n        },\n        [ SocketEventType.order ]: (_e: any) => {\n\n        },\n        [ SocketEventType.orderbook ]: (_e: any) => {\n\n        },\n        [ SocketEventType.trade ]: (_e: any) => {\n\n        },\n        [ SocketEventType.ticker ]: (data: string[]) => {\n            const [symbol, timestamp, size, volume, open, high, low, close, count, bid, ask] = data;\n            // @ts-ignore\n            const [, base, quote] = symbol.match(/(\\w+)-(\\w+)/i);\n            const base_token_volume = size;\n            const quote_token_volume = volume;\n            const change = open === undefined || Number(open) === 0 ? undefined : (toBig(close).minus(open)).div(open)\n            tickerService.sendTicker({\n                [ symbol ]: {\n                    symbol, base, quote,\n                    base_token_volume,\n                    quote_token_volume,\n                    timestamp: Number(timestamp),\n                    change,\n                    base_fee_amt: undefined,\n                    quote_fee_amt: undefined,\n                    open, high, low, close, count, bid, ask\n                } as any\n            })\n        },\n        [ SocketEventType.candlestick ]: (_e: any) => {\n\n        },\n        [ SocketEventType.candlestick ]: (data: string) => {\n\n        },\n        [ SocketEventType.ammpool ]: (data: string[]) => {\n            // const [market,timestamp,size,volume,open,high,low,close,count,bid,ask] = data;\n            // @ts-ignore\n            const [poolName, poolAddress, pooled, [tokenId, volume], risky] = data;\n            // @ts-ignore\n            ammPoolService.sendAmmPool({poolName, poolAddress, pooled, lp: {tokenId, volume}, risky})\n        },\n        // @ts-ignore\n        [ SocketEventType.pingpong ]: (data: string, instance:InstanceType<LoopringSocket>) => {\n\n            if (data === 'ping') {\n                instance.loopringSocket.send('pong')\n            }\n        },\n    }\n    get loopringSocket(): WebSocket | undefined {\n        return this._loopringSocket;\n    }\n    get socketCallbackMap(): SocketCallbackMap | undefined {\n        return this._socketCallbackMap;\n    }\n    //TODO fill the socket receiver format callback\n\n    private _socketCallbackMap: SocketCallbackMap|undefined;\n    private _loopringSocket:WebSocket|undefined;\n    private __wsTimer__:{timer:NodeJS.Timer|-1,count:number} = {\n        timer:-1,\n        count:0\n    };\n    private _baseUrl:string;\n    constructor(url:string) {\n        // const url = ChainId.MAINNET === chainId ? process.env.REACT_APP_API_URL : process.env.REACT_APP_API_URL_UAT;\n        this._baseUrl = url; // baseSocket: string = `wss://ws.${url}/v3/ws?wsApiKey=${wsKey}`;\n    }\n\n    // private static PingPong = {\n    //     fn:\n    // }\n\n    public socketSendMessage = async ({socket, apiKey}: {\n        chainId: ChainId | 'unknown',\n        socket: { [ key: string ]: string[] }\n        apiKey?: string\n    }): Promise<boolean> => {\n        try {\n            if (socket && Reflect.ownKeys(socket).length) {\n                //register ping pong event\n                this.clearInitTimer(true);\n                this.resetSocketEvents();\n                const {topics} = this.makeMessageArray({socket});\n                if (!this.isConnectSocket() ) {\n                    await this.socketConnect({ topics, apiKey})\n                } else {\n\n                    this._loopringSocket?.send(this.makeTopics(topics))\n\n                }\n                return true\n            } else {\n                if (!this.isConnectSocket()) {\n                    this.socketClose();\n                }\n                return false\n            }\n        } catch (error) {\n            throw  new CustomError(ErrorMap.SOCKET_ERROR)\n        }\n\n    }\n    public socketClose = async () => {\n        let ws: WebSocket | undefined = this._loopringSocket;\n\n        return new Promise((reolve) => {\n            if (ws) {\n                ws.onclose = function (e) {\n                    reolve(`Socket is closed, ${e.reason}`)\n                };\n                ws.close();\n            } else {\n                Promise.resolve('no websocket')\n            }\n        })\n    }\n\n    public removeSocketEvents = (key: string) => {\n        // @ts-ignore\n        if (this._socketCallbackMap && this._socketCallbackMap[ key ]) {\n            // @ts-ignore\n            delete this._socketCallbackMap[ key ]\n        }\n    }\n\n    private makeMessageArray = ({socket}: { socket: { [ key: string ]: string[] } }): {\n        topics: any[]\n    } => {\n        let topics: any[] = [], list: any[] = []; // let registerDispatch = [];\n        Reflect.ownKeys(socket).forEach((eventType) => {\n            switch (eventType) {\n                case  SocketEventType.ticker:\n                    list = socket[ SocketEventType.ticker ].map(key => getTickerArg(key))\n                    if (list && list.length) {\n                        this.addSocketEvents(SocketEventType.ticker)\n                        topics = [...topics, ...list];\n                    }\n                    break\n                case  SocketEventType.account:\n                    if (socket[ SocketEventType.account ]) {\n                        list = [getAccountArg()]\n                    }\n                    if (list && list.length) {\n                        this.addSocketEvents(SocketEventType.account)\n                        topics = [...topics, ...list];\n                    }\n                    break;\n                case  SocketEventType.order:\n                    //FIX:  make order Topic\n                    list = socket[ SocketEventType.order ].map(key => getOrderArg(key))\n                    if (list && list.length) {\n                        this.addSocketEvents(SocketEventType.order)\n                        topics = [...topics, ...list];\n                    }\n                    break\n                case  SocketEventType.orderbook:\n                    //FIX:  make orderbook Topic\n                    list = socket[ SocketEventType.orderbook ].map(key => getOrderBookArg(key, 0))\n                    if (list && list.length) {\n                        this.addSocketEvents(SocketEventType.orderbook)\n                        topics = [...topics, ...list];\n                    }\n                    break\n                case  SocketEventType.trade:\n                    list = socket[ SocketEventType.trade ].map(key => getTradeArg(key))\n                    if (list && list.length) {\n                        this.addSocketEvents(SocketEventType.trade)\n                        topics = [...topics, ...list];\n                    }\n                    break\n                case  SocketEventType.candlestick:\n                    list = socket[ SocketEventType.candlestick ].map(key => getCandlestickArg(key))\n                    if (list && list.length) {\n                        this.addSocketEvents(SocketEventType.candlestick)\n                        topics = [...topics, ...list];\n                    }\n                    break\n                case  SocketEventType.ammpool:\n                    list = socket[ SocketEventType.ammpool ].map(key => getAmmpoolArg(key))\n                    if (list && list.length) {\n                        this.addSocketEvents(SocketEventType.ammpool)\n                        topics = [...topics, ...list];\n                    }\n                    break\n            }\n        })\n        return {topics}\n    }\n\n    private isConnectSocket = () => {\n        return !!(this._loopringSocket && this._loopringSocket.send);\n    }\n\n    private makeTopics = (topics: any, apiKey?: string) => {\n        let data: any = {\n            op: 'sub',\n            unsubscribeAll: 'true',\n            topics: topics,\n        }\n\n        if (apiKey) {\n            data.apiKey = apiKey\n        }\n        // console.log('Socket>>Socket',JSON.stringify(data));\n        return JSON.stringify(data)\n        // sendMessage(flat_txt)\n    }\n\n    private addSocketEvents = (type: keyof typeof SocketEventType,deps?:any[]) => {\n\n        this._socketCallbackMap = {\n            ...this._socketCallbackMap,\n            [ type ]: {\n                fn: LoopringSocket.SocketEventMap[type],\n                deps:deps?deps:[]\n            }\n        }\n    }\n\n    private socketConnect = async ({ topics, apiKey}: {\n       // chainId: ChainId | 'unknown',\n        topics: any[],\n        apiKey?: string\n    }) => {\n        try {\n            const self = this;\n            if (LoopringAPI.wsAPI && topics) {\n                const {wsKey} = await LoopringAPI.wsAPI.getWsKey();\n                this._loopringSocket = new WebSocket(`${this._baseUrl}?wsApiKey=${wsKey}`);\n\n                this._loopringSocket.onopen = function () {\n                    console.warn('Socket>>Socket', \"WebSocket is open now.\");\n                    if(self._loopringSocket && self._loopringSocket.readyState === WebSocket.OPEN){\n                        self._loopringSocket.send(self.makeTopics(topics))\n                    }\n\n                };\n                this._loopringSocket.onmessage = function (e) {\n                    const {data} = e;\n                    // data.topic.topic;\n                    if (data === 'ping' && self._socketCallbackMap) {\n                        // console.log('Socket>>Socket ping:', e);\n                        self._socketCallbackMap?.pingpong?.fn.call( self, data, ...self._socketCallbackMap.pingpong.deps);\n                    } else {\n                        const result = JSON.parse(data);\n                        const {topics, topic} = result;\n                        if (topics) {\n                            // console.log('Socket>>Socket topics first return', topics);\n                        }\n                        if (topic && topic.topic && self._socketCallbackMap) {\n                            const {topic: {topic}, data} = result\n                             self._socketCallbackMap[ topic.topic ]?.fn.call( self, data, ...self._socketCallbackMap[ topic.topic ].deps);\n\n                        }\n\n                    }\n                    return false;\n                };\n                this._loopringSocket.onclose = async function (e) {\n                    // console.error('Socket>>Socket', e);\n                    if (self._loopringSocket) {\n                        self._loopringSocket = undefined;\n                    }\n                    console.log('Socket>>Socket', 'Socket is closed. Reconnect will be attempted in 1 second.', e.reason);\n                    self.clearInitTimer()\n                    if (self.__wsTimer__.count < 5) {\n                        self.__wsTimer__.timer = setTimeout(function () {\n                            self.socketConnect.call(self, { topics, apiKey});\n                        }, 1000 * self.__wsTimer__.count);\n                    }\n                };\n                this._loopringSocket.onerror = function (err: Event) {\n                    console.error('Socket>>Socket', 'Socket encountered error:', 'Closing socket', err);\n                };\n\n            }\n        } catch (error) {\n            console.error('Socket>>Socket', 'connect error, not from reconnect')\n            // @ts-ignore\n            if (this._loopringSocket) {\n                // @ts-ignore\n                this._loopringSocket.close()\n            }\n        }\n    }\n    private clearInitTimer = (init?: boolean) => {\n\n        if (this.__wsTimer__) {\n            if (this.__wsTimer__.timer !== -1) {\n                clearTimeout(this.__wsTimer__.timer)\n            }\n            this.__wsTimer__.timer = -1\n            this.__wsTimer__.count++;\n        }\n        if (init) {\n            this.__wsTimer__ = {\n                //...self.__wsTimer__,\n                timer: -1,\n                count: 0\n            }\n        }\n    }\n    private resetSocketEvents = () => {\n        this._socketCallbackMap = undefined;\n        this.addSocketEvents(SocketEventType.pingpong,[this])\n    }\n}\n// const socketInstance = new LoopringSocket();\n// // @ts-ignore\n// window.loopringSocket = socketInstance;\n//\n// export default socketInstance;\n\n\n\n","import { Subject } from 'rxjs';\n// import { TradeFloat } from '@loopring-web/common-resources';\nimport { LoopringMap } from 'loopring-sdk/dist/defs/loopring_defs';\nimport { TickerData } from 'loopring-sdk';\nimport { makeTickerMap } from '../hooks/help';\nimport { TickerMap } from '../stores/ticker';\n\nconst subject = new Subject<{ tickerMap: TickerMap<{ [ key: string ]: any }> }>();\n\n// export type TickerMap<R> = {\n//     [key in keyof R]:TradeFloat\n// }\n// <R extends {[key:string]:any}>\n  //<R>\nexport const tickerService = {\n    sendTicker: (_tickerMap:LoopringMap<TickerData>) => {\n       const tickerMap:TickerMap<{[key:string]:any}> = makeTickerMap({tickerMap:_tickerMap})\n       subject.next({ tickerMap })\n    },\n    // clearMessages: () => subject.next(),\n    onSocket: () => subject.asObservable()\n};","import { Subject } from 'rxjs';\nimport { TradeFloat } from '@loopring-web/common-resources';\n\nconst subject = new Subject();\n\nexport type AmmPoolMap<R> = {\n    [key in keyof R]:TradeFloat\n}\n// <R extends {[key:string]:any}>\n\nexport const ammPoolService = {\n    sendAmmPool: (ammPoolMap:AmmPoolMap<{[key:string]:any}>) => subject.next({ ammPoolMap: ammPoolMap }),\n    // clearMessages: () => subject.next(),\n    onSocket: () => subject.asObservable()\n};","import { all, call, fork, put, take, takeLatest } from \"redux-saga/effects\"\nimport { getSystemStatus, updateRealTimeObj, updateSystem } from './reducer'\nimport { ENV, NETWORKEXTEND } from \"./interface\"\nimport store from '../index';\n// import { reset } from '../account/reducer';\nimport { exchangeAPI, LoopringAPI } from '../apis/api';\nimport { getAmmMap, updateRealTimeAmmMap } from '../Amm/AmmMap';\nimport { getTokenMap } from '../token';\nimport { CustomError, ErrorMap } from '@loopring-web/common-resources';\nimport { getAmmActivityMap } from '../Amm/AmmActivityMap';\nimport { updateWalletLayer1 } from '../walletLayer1';\nimport { delay } from 'rxjs/operators';\nimport { LoopringSocket } from '../../services/socketUtil';\nimport { statusUnset as accountStatusUnset } from '../account';\nimport { ChainId } from 'loopring-sdk';\n\nconst initConfig = function* <R extends { [ key: string ]: any }>(chainId: ChainId | 'unknown') {\n    // store.dispatch(updateAccountStatus());\n    const {tokenSymbolMap: tokensMap} = yield call(async () => await LoopringAPI.exchangeAPI?.getTokens())\n    const {ammpools} = yield call(async () => await LoopringAPI.ammpoolAPI?.getAmmPoolConf());\n    const {pairs, marketArr, tokenArr, markets} = yield call(async () => LoopringAPI.exchangeAPI?.getMixMarkets());\n    store.dispatch(getTokenMap({tokensMap, marketMap: markets, pairs, marketArr, tokenArr}))\n    yield take('tokenMap/getTokenMapStatus');\n    // let basePath: string = `wss://ws.${baseURL}/v3/ws?wsApiKey=${wsKey}`\n    store.dispatch(getAmmMap({ammpools}))\n    store.dispatch(getAmmActivityMap({ammpools}))\n    if (store.getState().tokenMap.status === 'ERROR') {\n\n    }\n\n    yield delay(10);\n    //IF already connect has address, getInfo walletLayer 1\n    const {account, walletLayer1} = store.getState() //.account.accAddr && !store.getState().walletLayer1.walletLayer1\n    if (account.accAddress && walletLayer1.walletLayer1 === undefined) {\n        store.dispatch(updateWalletLayer1(undefined));\n    }\n    store.dispatch(accountStatusUnset(undefined));\n}\n\nconst getSystemsApi = async <R extends { [ key: string ]: any }>(chainId: any) => {\n    //TODO get some other reuqired id...... put into system\n    // const { chainId } = system\n    const env = window.location.hostname === 'localhost' ? ENV.DEV : ChainId.GOERLI === chainId ? ENV.UAT : ENV.PROD\n    chainId = ChainId.GOERLI === chainId ? ChainId.GOERLI : ChainId.MAINNET === chainId ? ChainId.MAINNET : NETWORKEXTEND.NONETWORK\n\n    if (chainId === NETWORKEXTEND.NONETWORK) {\n        throw new CustomError(ErrorMap.NO_NETWORK_ERROR)\n    } else {\n\n        LoopringAPI.InitApi(chainId as ChainId);\n        if (LoopringAPI.exchangeAPI) {\n            const {exchangeInfo} = (await LoopringAPI.exchangeAPI.getExchangeInfo())\n            const faitPrices = (await LoopringAPI.exchangeAPI.getFiatPrice({legal: 'USD'})).fiatPrices\n            const faitPricesY = (await LoopringAPI.exchangeAPI.getFiatPrice({legal: 'CNY'})).fiatPrices\n            const gasPrice = (await exchangeAPI().getGasPrice()).gasPrice / 1e+9;\n            // : process.env.REACT_APP_API_URL_UAT;\n            const baseURL = ChainId.MAINNET === chainId ? `https://${process.env.REACT_APP_API_URL}` : `https:/${process.env.REACT_APP_API_URL_UAT}`\n            const socketURL = ChainId.MAINNET === chainId ? `wss://ws.${process.env.REACT_APP_API_URL}/v3/ws` : `wss://ws.${process.env.REACT_APP_API_URL_UAT}/v3/ws`;\n            const etherscanUrl = ChainId.MAINNET === chainId ? `https://etherscan.io/address/` : `https://goerli.etherscan.io/address/`\n\n            window.loopringSocket = new LoopringSocket(socketURL);\n\n            const forex = faitPricesY[ 'USDT' ].price;\n            let {__timer__} = store.getState().system;\n            __timer__ = ((__timer__) => {\n                if (__timer__ && __timer__ !== -1) {\n                    clearInterval(__timer__);\n                }\n                return setInterval(async () => {\n                    const faitPrices = (await exchangeAPI().getFiatPrice({legal: 'CNY'})).fiatPrices\n                    const gasPrice = (await exchangeAPI().getGasPrice()).gasPrice / 1e+9\n                    const forex = faitPrices[ 'USDT' ]?.price\n                    store.dispatch(updateRealTimeAmmMap(undefined))\n                    store.dispatch(updateRealTimeObj({faitPrices, gasPrice, forex}))\n                }, 300000)   //\n\n            })(__timer__);\n            return {\n                chainId,\n                etherscanUrl,\n                env,\n                baseURL,\n                socketURL,\n                faitPrices,\n                gasPrice,\n                forex,\n                exchangeInfo,\n                __timer__\n            }\n        }\n    }\n}\n\nexport function* getUpdateSystem({payload}: any) {\n    try {\n        // @ts-ignore\n        const {chainId} = payload;\n        const {\n            env,\n            baseURL,\n            faitPrices,\n            gasPrice,\n            forex,\n            exchangeInfo,\n            etherscanUrl,\n            __timer__\n        } = yield call(getSystemsApi, chainId);\n\n        yield put(getSystemStatus({env, baseURL, faitPrices, gasPrice, forex, exchangeInfo, etherscanUrl, __timer__}));\n        yield call(initConfig, chainId)\n        //TODO check wallect store\n    } catch (err) {\n        yield put(getSystemStatus(err));\n    }\n}\n\nfunction* systemSaga() {\n    yield all([takeLatest(updateSystem, getUpdateSystem)]);\n}\n\nexport const systemForks = [\n    fork(systemSaga),\n]\n","import { all, call, fork, put, takeLatest } from \"redux-saga/effects\";\nimport { getWalletLayer1Status, updateWalletLayer1 } from './reducer';\nimport { CoinKey, PairKey, WalletCoin } from '@loopring-web/common-resources';\nimport { exchangeAPI } from '../apis/api';\nimport store from '../index';\nimport { fromWEI } from 'loopring-sdk';\nimport { useAccount } from '../account';\nimport { myLog } from \"utils/log_tools\";\n\ntype WalletLayer1Map<R extends {[key:string]:any}> = {\n    [key in CoinKey<R>|PairKey<R>]?:WalletCoin<R>\n}\n\nconst getWalletLayer1Balance = async <R extends {[key:string]:any}>()=> {\n    //TODO: check is connect and active and assign walletLayer1\n    //TODO: if not reject directory, any error happen will clean the\n    // await sdk\n    const exchangeApi = exchangeAPI();\n    const {accAddress} = store.getState().account;\n    const {tokenMap,marketCoins} = store.getState().tokenMap;\n    if(marketCoins && tokenMap) {\n        \n        const {ethBalance} =  await exchangeApi.getEthBalances({owner:accAddress});\n        const {tokenBalances} =  await exchangeApi.getTokenBalances({owner:accAddress, token: marketCoins.join()},tokenMap);\n        tokenBalances['ETH'] = ethBalance;\n        let walletLayer1;\n        if(tokenBalances) {\n            walletLayer1 = Reflect.ownKeys(tokenBalances).reduce((prev,item)=>{\n                return   {...prev, [ item ]:{\n                        belong: item,\n                        count: fromWEI(tokenMap, item, tokenBalances[item as string]),\n                    }\n                }\n            },{} as WalletLayer1Map<R>)\n        }\n        return {walletLayer1}\n    }\n\n};\n\nexport function* getPostsSaga() {\n    try {\n        //\n        const {walletLayer1} = yield call(getWalletLayer1Balance);\n        yield put(getWalletLayer1Status({walletLayer1}));\n    } catch (err) {\n        yield put(getWalletLayer1Status(err));\n    }\n}\n\nexport function* walletLayer1Saga() {\n    yield all([takeLatest(updateWalletLayer1, getPostsSaga)]);\n}\n\nexport const walletLayer1Fork = [\n    fork(walletLayer1Saga),\n    // fork(tokenPairsSaga),\n]\n\n","import { createSlice, PayloadAction, Slice } from '@reduxjs/toolkit'\nimport { WalletLayer2Map, WalletLayer2States } from './interface';\nimport { SagaStatus } from '@loopring-web/common-resources';\n\n\nconst initialState: WalletLayer2States = {\n    walletLayer2: undefined,\n    status: 'DONE',\n    errorMessage: null,\n}\nconst walletLayer2Slice: Slice = createSlice({\n    name: 'walletLayer2',\n    initialState,\n    reducers: {\n        updateWalletLayer2(state, action: PayloadAction<string | undefined>) {\n            state.status = SagaStatus.PENDING\n        },\n        reset(state, action: PayloadAction<string | undefined>) {\n            state.walletLayer2 = undefined;\n            state.status = SagaStatus.UNSET;\n        },\n        getWalletLayer2Status(state, action: PayloadAction<{ walletLayer2: WalletLayer2Map<object> }>) {\n            // @ts-ignore\n            if (action.error) {\n                state.status = SagaStatus.ERROR\n                // @ts-ignore\n                state.errorMessage = action.error\n            }\n            state.walletLayer2 = {...action.payload.walletLayer2};\n            state.status = SagaStatus.DONE\n        },\n        statusUnset: state => {\n            state.status = SagaStatus.UNSET\n        }\n    },\n});\nexport { walletLayer2Slice };\nexport const {updateWalletLayer2, getWalletLayer2Status, statusUnset, reset} = walletLayer2Slice.actions\n","import { all, call, fork, put, takeLatest } from \"redux-saga/effects\";\nimport { getWalletLayer2Status, updateWalletLayer2 } from './reducer';\nimport { CoinKey, PairKey, WalletCoin } from '@loopring-web/common-resources';\nimport { userAPI } from '../apis/api';\nimport store from '../index';\n\ntype WalletLayer2Map<R extends { [ key: string ]: any }> = {\n    [key in CoinKey<R> | PairKey<R>]?: WalletCoin<R>\n}\n\nconst getWalletLayer2Balance = async <R extends { [ key: string ]: any }>() => {\n    //TODO: check is connect and active and assign walletLayer1\n    //TODO: if not reject directory, any error happen will clean the\n    // await sdk\n    // const exchangeApi = exchangeAPI();\n    const userApi = userAPI();\n    const {accountId, apiKey} = store.getState().account;\n    const {tokenMap, idIndex, marketCoins} = store.getState().tokenMap;\n    let walletLayer2;\n    if (apiKey && accountId) {\n        // @ts-ignore\n        const {userBalances} = await userApi.getUserBalances({accountId: accountId, tokens: ''}, apiKey)\n        if (userBalances) {\n            // tokenId: number;\n            // total: string;\n            // locked: string;\n            // pending: {\n            //     withdraw: string;\n            //     deposit: string;\n            // };\n            walletLayer2 = Reflect.ownKeys(userBalances).reduce((prev, item) => {\n                // @ts-ignore\n                return {...prev, [ idIndex[ item ] ]: userBalances[ Number(item) ]}\n            }, {} as WalletLayer2Map<R>)\n        }\n    }\n\n    return {walletLayer2}\n};\n\nexport function* getPostsSaga() {\n    try {\n        //\n        const {walletLayer2} = yield call(getWalletLayer2Balance);\n        yield put(getWalletLayer2Status({walletLayer2}));\n    } catch (err) {\n        yield put(getWalletLayer2Status(err));\n    }\n}\n\nexport function* walletLayer2Saga() {\n    yield all([takeLatest(updateWalletLayer2, getPostsSaga)]);\n}\n\n// export function* walletLayer2Saga() {\n//     yield all([takeLatest(updateWalletLayer2, getPostsSaga)]);\n// }\n\n\nexport const walletLayer2Fork = [\n    fork(walletLayer2Saga),\n    // fork(tokenPairsSaga),\n]\n\n","import { createSlice, PayloadAction, Slice } from '@reduxjs/toolkit'\nimport { UserRewardsStates } from './interface';\nimport { SagaStatus } from '@loopring-web/common-resources';\n\nconst initialState: UserRewardsStates = {\n    userRewardsMap: undefined,\n    status: 'PENDING',\n    errorMessage: null,\n    __timer__: -1,\n}\nconst userRewardsMapSlice: Slice<UserRewardsStates> = createSlice({\n    name: 'userRewardsMap',\n    initialState,\n    reducers: {\n        getUserRewards(state, action: PayloadAction<undefined>) {\n            state.status = SagaStatus.PENDING\n        },\n        getUserRewardsStatus(state, action: PayloadAction<UserRewardsStates>) {\n            // @ts-ignore\n            if (action.error) {\n                state.status = SagaStatus.ERROR\n                // @ts-ignore\n                state.errorMessage = action.error\n            }\n            state.userRewardsMap = {...state.userRewardsMap, ...action.payload.userRewardsMap};\n            if (action.payload.__timer__) {\n                state.__timer__ = action.payload.__timer__\n            }\n            state.status = SagaStatus.DONE\n        },\n        statusUnset: state => {\n            state.status = SagaStatus.UNSET\n        }\n\n    },\n});\nexport { userRewardsMapSlice };\nexport const {getUserRewards, getUserRewardsStatus, statusUnset} = userRewardsMapSlice.actions;","import { all, call, fork, put, takeLatest } from \"redux-saga/effects\"\nimport { getUserRewards, getUserRewardsStatus } from './reducer'\n\nimport store from '../index';\nimport { exchangeAPI, LoopringAPI } from '../apis/api';\nimport { updateRealTimeAmmMap } from '../Amm/AmmMap';\nimport { updateRealTimeObj } from '../system';\n\nconst getUserRewardsApi = async <R extends {[key:string]:any}>(list:Array<keyof R>)=> {\n\n    // const data:UserRewardsMap<R> = {}\n\n    // const userRewardss = await exchangeAPI().getUserRewards({market: list.join(',')})\n    const {accountId} = store.getState().account\n    let {__timer__} = store.getState().userRewardsMap;\n    \n    if(LoopringAPI.ammpoolAPI && accountId ) {\n        __timer__ = ((__timer__) => {\n            if (__timer__ && __timer__ !== -1) {\n                clearInterval(__timer__);\n            }\n            return setTimeout(async () => {\n                store.dispatch(getUserRewards(undefined))\n            }, 300000 * 4)   //\n\n        })(__timer__);\n        return  LoopringAPI.ammpoolAPI.getAmmPoolUserRewards({owner:accountId}).then(({ammUserRewardMap}) => {\n            return {data:ammUserRewardMap,__timer__}\n        })\n    }else{\n        if (__timer__ && __timer__ !== -1) {\n            clearInterval(__timer__);\n        }\n        if(accountId) {\n            return  Promise.reject({data:undefined,__timer__:-1})\n        }else{\n            return Promise.resolve({data:undefined,__timer__:-1})\n        }\n\n    }\n\n}\n\nexport function* getPostsSaga({payload}:any) {\n    try {\n        // @ts-ignore\n        // const { userRewardsKey,userRewardsKeys } = payload;\n        // console.log('getPostsSaga userRewardsKey',userRewardsKey, userRewardsKeys)\n        // if(userRewardsKey || (userRewardsKeys && userRewardsKeys.length)) {\n        const {data,__timer__}  = yield call(getUserRewardsApi);\n        yield put(getUserRewardsStatus({userRewardsMap:data,__timer__}));\n\n        // }else{\n        //     throw new CustomError(ErrorMap.NO_SDK);\n        // }\n    } catch (err) {\n        yield put(getUserRewardsStatus(err));\n    }\n}\n\nfunction* userRewardsSaga() {\n    yield all([takeLatest(getUserRewards, getPostsSaga)]);\n}\n\nexport const userRewardsForks = [\n    fork(userRewardsSaga),\n    // fork(userRewardssSaga),\n]\n ","import { createSlice, PayloadAction, Slice } from '@reduxjs/toolkit'\nimport { SagaStatus, StateBase } from '@loopring-web/common-resources';\nimport { SocketMap } from './interface';\n\nconst initialState: StateBase & { socket: SocketMap } = {\n    socket: {},\n    status: 'PENDING',\n    errorMessage: null,\n}\nconst socketSlice: Slice<StateBase & { socket: SocketMap }> = createSlice({\n    name: 'socket',\n    initialState,\n    reducers: {\n        socketEnd(state, action: PayloadAction<undefined>) {\n            state.socket = {};\n            state.status = SagaStatus.PENDING;\n        },\n        sendSocketTopic(state, action: PayloadAction<{ socket: SocketMap }>) {\n            state.socket = action.payload.socket\n        },\n        getSocketStatus(state, action: PayloadAction<undefined>) {\n\n            // @ts-ignore\n            if (action.error) {\n                state.status = SagaStatus.ERROR\n                // @ts-ignore\n                state.errorMessage = action.error\n            }\n            // state.socket = action.payload.socket\n            state.status = SagaStatus.DONE\n        },\n\n        statusUnset: state => {\n            state.status = SagaStatus.UNSET\n        }\n\n    },\n});\nexport { socketSlice };\nexport const {getSocketStatus, sendSocketTopic, socketEnd, statusUnset} = socketSlice.actions;\n","import { all, call, fork, put, takeLatest } from 'redux-saga/effects';\nimport { getSocketStatus, sendSocketTopic, socketEnd } from './reducer'\nimport store from '../index';\nexport function* closeSocket(){\n    try {\n        if (window.loopringSocket){\n            yield call(window.loopringSocket.socketClose)\n        }\n        yield put(getSocketStatus(undefined));\n        //TODO check wallect store\n    } catch (err) {\n        yield put(getSocketStatus(err));\n    }\n}\nexport function* sendMessage({payload}: any){\n    try {\n        const { apiKey } = store.getState().account;\n        const { socket } = payload;\n        if (window.loopringSocket){\n            yield call(window.loopringSocket.socketSendMessage, { socket, apiKey })\n        }\n        yield put(getSocketStatus(undefined));\n    } catch (err) {\n        yield put(getSocketStatus(err));\n    }\n}\n\nfunction* socketEndSaga(){\n    yield all([takeLatest(socketEnd, closeSocket)]);\n}\n\nfunction* socketSendMessageSaga() {\n    yield all([takeLatest(sendSocketTopic, sendMessage)]);\n}\n\n\n\nexport const socketForks = [\n    // fork(socketSaga),\n    fork(socketEndSaga),\n    fork(socketSendMessageSaga),\n //   fork(initConfig),\n]\n\n\n\n","import { all, fork, put, takeLatest, call } from \"redux-saga/effects\"\nimport {\n    cleanAccountStatus,\n    // cleanAccountStatus,\n    nextAccountStatus,\n    // restAccountStatus,\n    updateAccountStatus\n} from './reducer';\nimport { PayloadAction } from '@reduxjs/toolkit';\nimport { Account, AccountStatus, ConnectProviders, SagaStatus } from '@loopring-web/common-resources';\nimport { connectProvides } from '@loopring-web/web3-provider';\n\n\nexport function* accountUpdateSaga({payload}: PayloadAction<Partial<Account>>) {\n    try {\n        // let data: { accountState: Partial<AccountState> };\n        // const {currentState} = yield select();\n        const account = payload;\n        yield put(nextAccountStatus({\n            // ...currentState,\n            ...account\n        }));\n\n    } catch (err) {\n        yield put(nextAccountStatus(err));\n    }\n}\nexport function* cleanAccountSaga({payload}: PayloadAction<{shouldUpdateProvider?:boolean|undefined}>) {\n    try {\n        let account:Partial<Account> = {\n            accAddress : '',\n            readyState : AccountStatus.UN_CONNECT,\n            accountId : -1,\n            apiKey : '',\n            eddsaKey : '',\n            publicKey : {},\n            level : '',\n            nonce : -1,\n        }\n\n        if(payload && payload.shouldUpdateProvider) {\n            yield call(async ()=> await connectProvides.clear())\n            account = {\n                ...account,\n                connectName:ConnectProviders.unknown\n            }\n        }\n        yield put(nextAccountStatus({\n            ...account\n        }));\n\n    } catch (err) {\n        yield put(nextAccountStatus(err));\n    }\n}\n\nfunction* accountSage() {\n    yield all([takeLatest(updateAccountStatus, accountUpdateSaga)]);\n}\n\n// function* goCleanAccount({payload}: PayloadAction<undefined>) {\n//     yield put(cleanAccountStatus(undefined));\n// }\n\nfunction* accountRestSage() {\n    yield all([takeLatest(cleanAccountStatus, cleanAccountSaga)]);\n}\n\nexport const accountFork = [\n    fork(accountSage),\n    fork(accountRestSage)\n]\n\n// const subject = new Subject<{ command: keyof typeof StorageCommands, data?: any }>();\n// const goNextAccountStatus = async (currentState: Partial<AccountState>,\n//                                    nextState: Partial<AccountState>): Promise<{ accountState: Partial<AccountState> }> => {\n//     // let newAccountState: Partial<AccountState>\n//     switch (nextState) {\n//         case AccountStatus.RESET:\n//             connectProvides.clear()\n//             //TODO sessionStorage clear\n//             break;\n//         case AccountStatus.UN_CONNECT:\n//             console.log('connectName:', nextState.connectName, 'readyState:', currentState.readyState)\n//             // if(nextState.readyState !== currentState.readyState )  {\n//             //     await connect({...currentState,...nextState})\n//             // }\n//             // if (success) {\n//             //     nextState\n//             // } else {\n//             //     return {accountState:currentAccountState}\n//             // }\n//             break;\n//         // case AccountStatus.CONNECT:\n//         case AccountStatus.DEPOSITING:\n//             break;\n//         case AccountStatus.NO_ACCOUNT:\n//             // if (success) {\n//             //\n//             // } else {\n//             //   return {accountState:currentAccountState}\n//             // }\n//             break;\n//         case AccountStatus.LOCKED:\n//         // if (success) {\n//         //\n//         //   return await goNextAccountStatus({...currentAccountState, readyState: AccountStatus.ACTIVATED})\n//         //\n//         // } else {\n//         //   return {accountState:currentAccountState}\n//         // }\n//\n//         case AccountStatus.ACTIVATED:\n//\n//         // goNextAccountStatus({\n//         //   ...newAccountState\n//         //   readyState: AccountStatus.LOCKED\n//         // })\n//         // return {accountState: nextState}\n//\n//     }\n//     return {accountState: nextState}\n// }\n//\n// const goAccountLocked = async (accountState: AccountState): Promise<{ accountState: Partial<AccountState> }> => {\n//     if (accountState.readyState === AccountStatus.ACTIVATED) {\n//         //TODO GOBACK TO LOCKED STATE\n//         return {\n//             accountState: {\n//                 ...accountState,\n//                 readyState: AccountStatus.LOCKED\n//             }\n//         }\n//     } else {\n//     }\n//     return {\n//         accountState: {}\n//     }\n// }\n// const goCleanAccount = async (): Promise<{ accountState: Partial<AccountState> }> => {\n//\n//     subject.next({command: StorageCommands.CLEAN})\n//     return {\n//         accountState: {\n//             accAddress: '',\n//             readyState: AccountStatus.RESET,\n//             accountId: -1,\n//             apiKey: '',\n//             eddsaKey: '',\n//             connectName: ConnectProviders.UnKnow,\n//             status: 'UNSET',\n//             errorMessage: null,\n//         }\n//     }\n// }\n//\n//\n//\n\n","import { all } from \"redux-saga/effects\"\n// import machine from \"../state_machine/fsm/machine\"\n// import { TRANSITION } from \"../state_machine/fsm/actionTypes\"\n// import { helloSaga } from \"./sagas\"\nimport { tokenSaga } from './token/saga';\nimport { ammForks } from './Amm';\nimport { tickerForks } from './ticker/saga';\nimport { systemForks } from './system/saga';\nimport { walletLayer1Fork } from './walletLayer1/saga';\nimport { walletLayer2Fork } from './walletLayer2/saga';\nimport { userRewardsForks } from './userRewards/saga';\nimport { socketForks } from './socket/saga';\nimport { accountFork } from './account/saga';\n\n\n// https://css-tricks.com/finite-state-machines-with-react/\n// https://musing-rosalind-2ce8e7.netlify.com/?machine=%7B%22initial%22%3A%22initial%22%2C%22states%22%3A%7B%22initial%22%3A%7B%22on%22%3A%7B%22LOGIN%22%3A%22loggedIn%22%2C%22LOGOUT%22%3A%22loggedOut%22%7D%7D%2C%22loggedOut%22%3A%7B%22on%22%3A%7B%22SUBMIT%22%3A%22loading%22%7D%7D%2C%22loading%22%3A%7B%22on%22%3A%7B%22SUCCESS%22%3A%22loggedIn%22%2C%22FAIL%22%3A%22loggedOut%22%7D%7D%2C%22loggedIn%22%3A%7B%22onEntry%22%3A%5B%22SET_TOKEN%22%5D%2C%22onExit%22%3A%5B%22CLEAR_TOKEN%22%5D%2C%22on%22%3A%7B%22LOGOUT%22%3A%22loggedOut%22%7D%7D%7D%7D\n\n// function* machineHandler(event: any, action: any) {\n//\n//   // @ts-ignore\n//   const currentAppState = yield select((state) => { state.account.status })\n//   const nextAppState = machine.transition(currentAppState, event)\n//\n//   yield put({\n//     type: \"APP_STATE/\" + nextAppState.value,\n//     payload: {\n//       value: nextAppState.value\n//     }\n//   });\n//\n//   console.debug(\"-> from \" + currentAppState + \" to \" + nextAppState);\n//\n//   for (let i = 0; i < nextAppState.actions.length; i++) {\n//     yield put({\n//       type: nextAppState.actions[i],\n//       payload: action\n//     });\n//   }\n// }\n\n// function* watchTransition() {\n//   yield takeEvery(TRANSITION, function*(action: any) {\n//     yield machineHandler(action.event, action.payload);\n//   });\n// }\n\nfunction* mySaga() {\n    yield all([\n        // fork(helloSaga),\n        // fork(watchTransition),\n        ...tokenSaga,\n        ...walletLayer1Fork,\n        ...walletLayer2Fork,\n        ...systemForks,\n        ...ammForks,\n        ...tickerForks,\n        ...userRewardsForks,\n        ...socketForks,\n        ...accountFork\n\n    ]);\n}\n\nexport default mySaga;\n","import { useDispatch, useSelector } from 'react-redux'\nimport { getTicker, getTickers, statusUnset } from './reducer';\nimport { TickerStates } from './interface';\nimport { CoinKey } from '@loopring-web/common-resources';\nimport React from 'react';\n\nexport function useTicker(): TickerStates & {\n    updateTickers: (tickerKeys: Array<CoinKey<any>>) => void,\n    updateTicker: (tickerKey: CoinKey<any>) => void,\n    statusUnset: () => void,\n} {\n    const tickerMap: TickerStates = useSelector((state: any) => state.tickerMap)\n    const dispatch = useDispatch();\n    return {\n        ...tickerMap,\n        statusUnset: React.useCallback(() => dispatch(statusUnset(undefined)), [dispatch]),\n        updateTickers: React.useCallback((tickerKeys: Array<CoinKey<any>>) => dispatch(getTickers({tickerKeys})), [dispatch]),\n        updateTicker: React.useCallback((tickerKey: CoinKey<any>) => dispatch(getTicker({tickerKey})), [dispatch]),\n    }\n\n}\n","import { useDispatch, useSelector } from 'react-redux'\nimport { updateSystem } from './reducer';\nimport { System, SystemStatus } from './interface';\nimport React from 'react';\nimport { statusUnset } from '../Amm/AmmMap';\n\nexport function useSystem(): SystemStatus & {\n    updateSystem:(system:Partial<System< {[key:string]:any}>>)=>void,\n    statusUnset:()=>void,\n} {\n    const system:SystemStatus = useSelector((state: any) => state.system)\n    const dispatch = useDispatch();\n    return {\n        ...system,\n        statusUnset:React.useCallback(()=>dispatch(statusUnset(undefined)),[dispatch]),\n        updateSystem:React.useCallback((system:Partial<System<{[key:string]:any}>>)=>dispatch(updateSystem(system)),[dispatch]),\n    }\n\n}\n","let _myLog;\nif (process.env.NODE_ENV !== 'production') {\n    _myLog = console.log;\n}else{\n    _myLog = function(message?: any, ...optionalParams: any[]){};\n}\nlet _myError;\nif (process.env.NODE_ENV !== 'production') {\n    _myError =  console.error;\n}else{\n    _myError = function(message?: any, ...optionalParams: any[]){};\n}\nexport const myLog = _myLog;\nexport const myError = _myError;","import { useDispatch, useSelector } from 'react-redux'\nimport { reset, statusUnset, updateWalletLayer2 } from './reducer';\nimport { WalletLayer2States } from './interface';\nimport { myLog } from 'utils/log_tools';\nimport _ from 'lodash'\nimport React from 'react';\nimport { TOAST_TIME, UPDATE_ACC_DELAY } from 'defs/common_defs';\n\nexport function useWalletLayer2(): WalletLayer2States & {\n    delayAndUpdateWalletLayer2: () => Promise<void>,\n    updateWalletLayer2: () => void,\n    statusUnset: () => void,\n    resetLayer2: () => void,\n} {\n    const walletLayer2: WalletLayer2States = useSelector((state: any) => state.walletLayer2)\n    const dispatch = useDispatch();\n\n    return {\n        ...walletLayer2,\n        resetLayer2: React.useCallback(() => {\n            dispatch(reset(undefined))\n        }, [dispatch]),\n        statusUnset: React.useCallback(() => dispatch(statusUnset(undefined)), [dispatch]),\n        updateWalletLayer2: React.useCallback(() => dispatch(updateWalletLayer2(undefined)), [dispatch]),\n        delayAndUpdateWalletLayer2: React.useCallback(async () => {\n            myLog('try to delayAndUpdateWalletLayer2!' + new Date().getTime())\n            _.delay(() => {\n                dispatch(updateWalletLayer2(undefined))\n                myLog('try to delayAndUpdateWalletLayer2 updated!' + new Date().getTime())\n                return Promise.resolve()\n            }, UPDATE_ACC_DELAY);\n        }, [dispatch]),\n    }\n\n}\n","import { useDispatch, useSelector } from 'react-redux'\nimport { sendSocketTopic, socketEnd } from './reducer';\nimport { SocketMap } from './interface';\nimport React from 'react';\nimport { statusUnset } from '../Amm/AmmMap';\nimport { StateBase } from '@loopring-web/common-resources';\n\nexport function useSocket(): StateBase & {\n    // socketStart:()=>void,\n    statusUnset: () => void,\n    sendSocketTopic: (socket: SocketMap) => void,\n    socketEnd: () => void\n} {\n    const socket: StateBase & { socket: SocketMap } = useSelector((state: any) => state.socket)\n    const dispatch = useDispatch();\n    // const socketStart = () => {\n    //     dispatch(socketSlice.actions.socketStart(undefined))\n    // }\n    // const sendSocketTopic = (socket: SocketMap) => {\n    //     dispatch(socketSlice.actions.sendSocketTopic({socket}))\n    // }\n    // const socketEnd = () => {\n    //     dispatch(socketSlice.actions.socketEnd(undefined))\n    // }\n    // const statusUnset = () => {\n    //     dispatch(socketSlice.actions.statusUnset(undefined))\n    // }\n    return {\n        ...socket,\n        statusUnset: React.useCallback(() => dispatch(statusUnset(undefined)), [dispatch]),\n        sendSocketTopic: React.useCallback((socket: SocketMap) => dispatch(sendSocketTopic({socket})), [dispatch]),\n        socketEnd: React.useCallback(() => dispatch(socketEnd(undefined)), [dispatch]),\n    }\n\n}\n","import { useDispatch, useSelector } from 'react-redux'\nimport { getUserRewards, statusUnset } from './reducer';\nimport { UserRewardsStates } from './interface';\nimport React from 'react';\n\nexport function useUserRewards(): UserRewardsStates & {\n    getUserRewards:()=>void,\n    statusUnset:()=>void,\n} {\n    const userRewardsMap:UserRewardsStates = useSelector((state: any) => state.userRewardsMap)\n    const dispatch = useDispatch();\n    return {\n        ...userRewardsMap,\n        statusUnset:React.useCallback(()=>dispatch(statusUnset(undefined)),[dispatch]),\n        getUserRewards: React.useCallback(()=>dispatch(getUserRewards(undefined)),[dispatch]),\n    }\n\n}\n","import { createSlice, PayloadAction, Slice } from '@reduxjs/toolkit'\nimport { SliceCaseReducers } from '@reduxjs/toolkit/src/createSlice'\n\nexport interface Confirmation {\n    confirmed: boolean\n}\n\nconst initialState: Confirmation = {\n    confirmed: false,\n}\n\nconst confirmationSlice: Slice<Confirmation> = createSlice<Confirmation, SliceCaseReducers<Confirmation>, 'confirmation'>({\n    name: 'confirmation',\n    initialState,\n    reducers: {\n        confirm(state: Confirmation, action: PayloadAction<string>) {\n            state.confirmed = true\n        },\n    },\n});\n\nexport { confirmationSlice }\nexport const { confirm } = confirmationSlice.actions\n","import { createSlice, PayloadAction, Slice } from '@reduxjs/toolkit'\nimport { FavoriteMarketStates } from './interface';\nimport { SliceCaseReducers } from '@reduxjs/toolkit/src/createSlice';\n\nconst favoriteMarketSlice: Slice<FavoriteMarketStates> = createSlice<FavoriteMarketStates,SliceCaseReducers<FavoriteMarketStates>,'favoriteMarket'>({\n    name: 'favoriteMarket',\n    initialState: [],\n    reducers: {\n        clearAll(state:FavoriteMarketStates, action: PayloadAction<undefined>) {\n            state.length = 0;\n        },\n        removeMarket(state:FavoriteMarketStates, action: PayloadAction<string>) {\n            const pair = action.payload\n            if (pair && state.includes(pair)) {\n                const index = state.findIndex(_pair => _pair === pair)\n                state.splice(index, 1)\n            }\n        },\n        addMarket(state:FavoriteMarketStates, action: PayloadAction<string>) {\n            const pair = action.payload\n            if (pair && state.findIndex((_pair: string) => _pair === pair) === -1) {\n                state.push(pair)\n            }\n        },\n        addMarkets(state:FavoriteMarketStates, action: PayloadAction<string[]>) {\n            const pairs = action.payload\n            if (pairs.length) {\n                pairs.forEach(pair => {\n                    if (pair && state.findIndex((_pair: string) => _pair === pair) === -1) {\n                        state.push(pair)\n                    }\n                })\n            }\n        },\n\n    },\n});\nexport { favoriteMarketSlice };\nexport const {clearAll, removeMarket, addMarket, addMarkets} = favoriteMarketSlice.actions\n","import { createSlice, PayloadAction, Slice } from '@reduxjs/toolkit'\nimport { SliceCaseReducers } from '@reduxjs/toolkit/src/createSlice'\n\nexport interface OnchainHashInfo {\n    depositHash: string | undefined\n    withdrawHash: string[]\n}\n\nconst initialState: OnchainHashInfo = {\n    depositHash: undefined,\n    withdrawHash: [],\n}\n\nconst onchainHashInfoSlice: Slice<OnchainHashInfo> = createSlice<OnchainHashInfo, SliceCaseReducers<OnchainHashInfo>, 'onchainHashInfo'>({\n    name: 'onchainHashInfo',\n    initialState,\n    reducers: {\n        clearAll(state: OnchainHashInfo, action: PayloadAction<undefined>) {\n            state = initialState\n        },\n        clearDepositHash(state: OnchainHashInfo, action: PayloadAction<string>) {\n            state.depositHash = undefined\n        },\n        updateDepositHash(state: OnchainHashInfo, action: PayloadAction<string>) {\n            state.depositHash = action.payload\n        }\n    },\n});\n\nexport { onchainHashInfoSlice }\nexport const {clearAll, clearDepositHash, updateDepositHash} = onchainHashInfoSlice.actions\n","import { combineReducers } from '@reduxjs/toolkit';\nimport { confirmationSlice } from './confirmation';\nimport { favoriteMarketSlice } from './favoriteMarket';\nimport { onchainHashInfoSlice } from './onchainHashInfo';\n\nexport const  localStoreReducer = combineReducers({\n    // ammRecord: ammRecordSlice.reducer,\n    // ammTrades: ammTradesSlice.reducer,\n    favoriteMarket: favoriteMarketSlice.reducer,\n    onchainHashInfo: onchainHashInfoSlice.reducer,\n    confirmation: confirmationSlice.reducer,\n})\n","import { combineReducers, configureStore, getDefaultMiddleware } from '@reduxjs/toolkit'\n\nimport { useDispatch } from 'react-redux'\nimport { persistReducer } from 'redux-persist'\nimport storageSession from 'redux-persist/lib/storage/session'\nimport storage from 'redux-persist/lib/storage'\nimport createSagaMiddleware from 'redux-saga'\nimport * as imgConfig from '@loopring-web/common-resources/assets/images/coin/loopring.json'\nimport { reduxBatch } from '@manaflair/redux-batch'\nimport { updateVersion } from './global/actions'\nimport accountSlice from './account/reducer'\nimport { modalsSlice, setCoinJson, setLanguage, settingsSlice } from '@loopring-web/component-lib';\nimport { ammReducer } from './Amm';\nimport { tokenMapSlice } from './token';\nimport mySaga from './rootSaga';\nimport { tickerMapSlice } from './ticker';\nimport { systemSlice } from './system';\nimport { walletLayer1Slice } from './walletLayer1';\nimport { walletLayer2Slice } from './walletLayer2';\nimport { socketSlice } from './socket';\nimport { userRewardsMapSlice } from './userRewards';\nimport { localStoreReducer } from './localStore';\nimport persistStore from 'redux-persist/es/persistStore';\n\nconst sagaMiddleware = createSagaMiddleware()\n\nconst DEFAULT_TIMEOUT = 1000 * 60 * 15\n//\nconst persistAccConfig = {\n    key: 'account',\n    storage: storageSession,\n    timeout:DEFAULT_TIMEOUT,\n};\n\nconst persistSettingConfig = {\n    key: 'settings',\n    storage: storage,\n    timeout:DEFAULT_TIMEOUT,\n};\n\nconst persistLocalStoreConfig = {\n    key: 'localStore',\n    storage: storage,\n    timeout:DEFAULT_TIMEOUT,\n};\nconst persistedAccountReducer = persistReducer(persistAccConfig ,accountSlice.reducer)\nconst persistedSettingReducer = persistReducer(persistSettingConfig ,settingsSlice.reducer)\nconst persistedLocalStoreReducer = persistReducer(persistLocalStoreConfig ,localStoreReducer)\n\nconst reducer = combineReducers({\n    account: persistedAccountReducer,\n    socket: socketSlice.reducer,\n    settings: persistedSettingReducer,\n    system: systemSlice.reducer,\n    modals: modalsSlice.reducer,\n    userRewardsMap: userRewardsMapSlice.reducer,\n    amm: ammReducer,\n    tokenMap: tokenMapSlice.reducer,\n    walletLayer2: walletLayer2Slice.reducer,\n    walletLayer1: walletLayer1Slice.reducer,\n    tickerMap: tickerMapSlice.reducer,\n    localStore: persistedLocalStoreReducer,\n})\n\n//const persistedReducer = persistReducer(persistConfig ,reducer)\n\n\nconst store = configureStore({\n    reducer,\n    // middleware: (getDefaultMiddleware) => getDefaultMiddleware().concat(logger),\n    middleware: [...getDefaultMiddleware({\n        thunk: false,\n        serializableCheck: false,\n    }), sagaMiddleware],\n    //middleware: [...getDefaultMiddleware({ thunk: true }), ],\n    devTools: process.env.NODE_ENV !== 'production',\n    enhancers: [reduxBatch],\n})\nstore.dispatch(updateVersion())\nstore.dispatch(setLanguage(store.getState().settings.language))\nstore.dispatch(setCoinJson(imgConfig.frames))\n\n// @ts-ignore\nsagaMiddleware.run(mySaga, store.dispatch);\n\n// The store has been created with these options:\n// - The slice reducers were automatically passed to combineReducers()\n// - redux-thunk and redux-logger were added as middleware\n// - The Redux DevTools Extension is disabled for production\n// - The middleware, batch, and devtools enhancers were composed together\n\nexport type AppDispatch = typeof store.dispatch\nexport const useAppDispatch = () => useDispatch<AppDispatch>()\n\nexport type RootState = ReturnType<typeof reducer>\nexport const persistor = persistStore(store)\n\n// persistor.persist()\n\nexport default store\n","export enum Commands {\n    ErrorNetwork='ErrorNetwork',\n    LockAccount='LockAccount',// clear private data\n    NoAccount='NoAccount',//\n    DepositingAccount='DepositingAccount',\n    ErrorApproveToken='ErrorApproveToken',\n    ErrorDepositSign='ErrorDepositSign',\n    ProcessDeposit='ProcessDeposit',// two or one step\n    SignAccount='SignAccount', //unlock or update account  assgin\n    ErrorSign='ErrorSign',\n    ProcessSign='ProcessSign',\n    ProcessAccountCheck='ProcessAccountCheck',\n    AccountUnlocked = 'AccountUnlocked'\n}\nexport enum ErrorType {\n    FailedConnect = 'FailedConnect'\n}\n// 'ConnectWallet',\n// 'UnLockWallet',\n// 'SignatureTransfer',\n// 'SignatureApprove'\n\n\nexport enum ProcessingType{\n    waiting = 'waiting',\n    nextStep = 'nextStep'\n}\n","import store from '../../stores';\nimport { toBig } from 'loopring-sdk';\nimport { BIG10 } from '../../defs/swap_defs';\nimport BigNumber from 'bignumber.js';\n\nexport const volumeToCount = (symbol:string,volumn:string|number|BigNumber,tokenMap= store.getState().tokenMap.tokenMap):number|undefined =>{\n   const result =  volumeToCountAsBigNumber(symbol,volumn,tokenMap);\n   return result? result.toNumber():undefined;\n}\nexport const volumeToCountAsBigNumber = (symbol:string,volumn:string|number|BigNumber,tokenMap= store.getState().tokenMap.tokenMap):BigNumber|undefined =>{\n    if(tokenMap && tokenMap[symbol] && typeof volumn !== 'undefined'){\n        try{\n            return toBig(volumn).div('1e' + tokenMap[symbol].decimals)\n        }catch (error){\n            throw error;\n        }\n    }else{\n        return undefined;\n    }\n}","import { AmmDetailBase } from '@loopring-web/common-resources';\nimport { volumeToCountAsBigNumber } from './volumeToCount';\n\nexport const ammPairInit = ({\n                                   pair,\n                                   _ammCalcData,\n                                   ammType,\n                                   tokenMap,\n                                   coinMap,\n                                   walletMap,\n                                   ammMap,\n                                   tickerData,\n                                   ammPoolsBalance\n                               }: any) => {\n    _ammCalcData.coinInfoMap = coinMap;\n    if (tickerData) {\n        _ammCalcData.AtoB = Number(tickerData.close)\n    }\n    if (isNaN(_ammCalcData.AtoB) && ammPoolsBalance) {\n        const baseVol = volumeToCountAsBigNumber(pair.coinAInfo.simpleName, ammPoolsBalance.pooled[ 0 ].volume);\n        const quoteVol = volumeToCountAsBigNumber(pair.coinBInfo.simpleName, ammPoolsBalance.pooled[ 1 ].volume);\n        _ammCalcData.AtoB = quoteVol && baseVol && parseFloat(quoteVol.div(baseVol).toFixed(7, 0) as string)\n    }\n    if (pair.coinAInfo) {\n        // if(ammType === AmmPanelType.Deposit ) {\n        _ammCalcData.myCoinA = {\n            belong: pair.coinAInfo.simpleName,\n            balance: walletMap ? walletMap[ pair.coinAInfo.simpleName ]?.count : 0,\n        }\n        _ammCalcData.myCoinB = {\n            belong: pair.coinBInfo.simpleName,\n            balance: walletMap ? walletMap[ pair.coinBInfo.simpleName ]?.count : 0,\n        }\n        // }else {\n        const key = `${pair.coinAInfo.simpleName}-${pair.coinBInfo.simpleName}`;\n        let coinACount = 0, coinBCount = 0;\n        if (walletMap) {\n            const balance = walletMap ? walletMap[ 'LP-' + key ]?.count : 0;\n            const {totalLPToken, totalA, totalB}: AmmDetailBase<any> = ammMap[ 'AMM-' + key ];\n            if (totalA && totalLPToken && totalB) {\n                coinACount = totalA / totalLPToken * balance;\n                coinBCount = totalB / totalLPToken * balance;\n            }\n            _ammCalcData.lpCoin = balance;\n        }\n        _ammCalcData.lpCoinA = {\n            belong: pair.coinAInfo.simpleName,\n            balance: coinACount,\n        }\n        _ammCalcData.lpCoinB = {\n            belong: pair.coinBInfo.simpleName,\n            balance: coinBCount,\n        }\n        // }\n    }\n\n\n    return _ammCalcData\n}\n\n\n","import { generateKeyPair, sleep, toBig, toHex } from 'loopring-sdk';\nimport { connectProvides } from '@loopring-web/web3-provider';\nimport { LoopringAPI } from '../../stores/apis/api';\nimport store from '../../stores';\nimport { walletLayer2Services } from './walletLayer2Services';\nimport { myLog } from '../../utils/log_tools';\n\nexport async function unlockAccount() {\n    const account = store.getState().account;\n    const {exchangeInfo} = store.getState().system;\n    walletLayer2Services.sendSign()\n    if (exchangeInfo && LoopringAPI.userAPI && account.nonce !== undefined) {\n        try{\n            const eddsaKey = await generateKeyPair(\n                connectProvides.usedWeb3,\n                account.accAddress,\n                exchangeInfo.exchangeAddress,\n                account.nonce - 1,\n                account.connectName as any,\n            )\n            const sk = toHex(toBig(eddsaKey.keyPair.secretKey))\n            const {apiKey} = (await LoopringAPI.userAPI.getUserApiKey({\n                accountId: account.accountId\n            }, sk))\n            myLog('After connect >>,unlockAccount: step2 apiKey',apiKey)\n\n            walletLayer2Services.sendAccountSigned(apiKey, eddsaKey)\n        }catch (e){\n            walletLayer2Services.sendErrorUnlock()\n\n        }\n\n\n\n    }\n}","import { AccountStatus, } from '@loopring-web/common-resources';\nimport { Subject } from 'rxjs';\nimport { Commands } from './command';\nimport { LoopringAPI } from '../../stores/apis/api';\nimport { myLog } from '../../utils/log_tools';\nimport store from 'stores';\nimport { updateAccountStatus } from 'stores/account';\nimport * as sdk from 'loopring-sdk'\nimport { unlockAccount } from './unlockAccount';\n\nconst subject = new Subject<{ status: keyof typeof Commands, data: any, }>();\n\nexport const walletLayer2Services = {\n    //INFO: for update Account and unlock account\n    sendSign: async () => {\n        // const account = store.getState().account;\n        // const {exchangeInfo} = store.getState().system;\n        subject.next({\n            status: Commands.ProcessSign,\n            data: undefined,\n        })\n        // if (exchangeInfo && LoopringAPI.userAPI && account.nonce !== undefined) {\n        //     const eddsaKey = await generateKeyPair(\n        //         connectProvides.usedWeb3,\n        //         account.accAddress,\n        //         exchangeInfo.exchangeAddress,\n        //         account.nonce - 1,\n        //         account.connectName as any,\n        //     )\n        //     const sk = toHex(toBig(eddsaKey.keyPair.secretKey))\n        //     const {apiKey} = (await LoopringAPI.userAPI.getUserApiKey({\n        //         accountId: account.accountId\n        //     }, sk))\n        //\n        //     walletLayer2Services.sendAccountSigned(apiKey, eddsaKey)\n        //\n        // }\n    },\n    sendErrorUnlock: () => {\n        subject.next({\n            status: Commands.ErrorSign,\n            data: undefined,\n        })\n    },\n\n    sendUpdateAccStatusAndReset: (readyState: AccountStatus, accountId: number = -1) => {\n        store.dispatch(updateAccountStatus({\n            accountId,\n            readyState,\n            apiKey: '',\n            eddsaKey: '',\n            publicKey: '',\n            nonce: undefined,\n        }))\n\n        if (readyState === AccountStatus.ERROR_NETWORK) {\n            subject.next({\n                status: Commands.ErrorNetwork,\n                data: undefined,\n            })\n        } else {\n            const { accAddress } = store.getState().account\n            walletLayer2Services.sendCheckAccount(accAddress);\n        }\n\n    },\n\n    //INFO: for lock account todo clear the private info, user click or provider on wrong network\n    sendAccountLock: (accInfo?: sdk.AccountInfo) => {\n        const updateInfo = accInfo ? {\n            readyState: AccountStatus.LOCKED,\n            accountId: accInfo.accountId,\n            nonce: accInfo.nonce,\n            level: accInfo.tags,\n        } : {\n            readyState: AccountStatus.LOCKED,\n            apiKey: '',\n            eddsaKey: '',\n            publicKey: '',\n            nonce: undefined,\n        }\n        store.dispatch(updateAccountStatus(updateInfo))\n        subject.next({\n            status: Commands.LockAccount,\n            data: undefined,\n        })\n    },\n    sendActiveAccountDeposit: () => {\n\n    },\n    sendAccountSigned: (apiKey?: any, eddsaKey?: any) => {\n        const updateInfo = apiKey && eddsaKey ? {\n            apiKey,\n            eddsaKey,\n            publicKey: {\n                x: sdk.toHex(sdk.toBig(eddsaKey.keyPair.publicKeyX)),\n                y: sdk.toHex(sdk.toBig(eddsaKey.keyPair.publicKeyY)),\n            },\n            readyState: AccountStatus.ACTIVATED\n        } : { readyState: AccountStatus.ACTIVATED }\n        store.dispatch(updateAccountStatus(updateInfo));\n        subject.next({\n            status: Commands.AccountUnlocked,\n            data: undefined\n        })\n    },\n    sendNoAccount: () => {\n        store.dispatch(updateAccountStatus({ readyState: AccountStatus.NO_ACCOUNT, }))\n        subject.next({\n            status: Commands.NoAccount,\n            data: undefined\n        })\n    },\n    sendNeedUpdateAccount: async (accInfo: sdk.AccountInfo) => {\n        myLog('sendNeedUpdateAccount accInfo:', accInfo)\n        store.dispatch(updateAccountStatus({ readyState: AccountStatus.DEPOSITING, }))\n        subject.next({\n            status: Commands.SignAccount,\n            data: accInfo\n        })\n    },\n\n    sendCheckAcc: async () => {\n        const self = this;\n        if (store) {\n            const account = store.getState().account\n            if (LoopringAPI.exchangeAPI) {\n                const { accInfo } = (await LoopringAPI.exchangeAPI.getAccount({\n                    owner: account.accAddress\n                }))\n\n                if (accInfo === undefined) {\n                    walletLayer2Services.sendNoAccount()\n                } else {\n                    if (account.accountId) {\n                        if (!account.publicKey.x || !account.publicKey.y) {\n                            myLog('-------need update account!')\n                            walletLayer2Services.sendNeedUpdateAccount(accInfo)\n                        } else {\n                            myLog('-------need unlockAccount!')\n                            unlockAccount()\n                        }\n                    } else {\n                        myLog('unexpected accInfo:', accInfo)\n                        throw Error('unexpected accinfo:' + accInfo)\n                    }\n                }\n            }\n        }\n\n\n    },\n    sendCheckAccount: async (ethAddress: string) => {\n        const self = this;\n        myLog('After connect >>,checkAccount: step3 processAccountCheck', ethAddress)\n        store.dispatch(updateAccountStatus({ accAddress: ethAddress, readyState: AccountStatus.UN_CONNECT }))\n        subject.next({\n            status: Commands.ProcessAccountCheck,\n            data: undefined\n        })\n        if (LoopringAPI.exchangeAPI) {\n            const { accInfo } = (await LoopringAPI.exchangeAPI.getAccount({\n                owner: ethAddress\n            }))\n            myLog('After connect >>,checkAccount: step3', accInfo)\n\n            //TODO code is notaccount\n            if (accInfo === undefined) {\n                walletLayer2Services.sendNoAccount()\n            } else {\n                if (accInfo.accountId) {\n                    if (!accInfo.publicKey.x || !accInfo.publicKey.y) {\n                        myLog('-------need update account!')\n                        walletLayer2Services.sendNeedUpdateAccount(accInfo)\n                    } else {\n                        walletLayer2Services.sendAccountLock(accInfo)\n                    }\n                } else {\n                    myLog('unexpected accInfo:', accInfo)\n                    throw Error('unexpected accinfo:' + accInfo)\n                }\n            }\n        }\n\n        // try {\n        //\n        //\n        //     if (accInfo && accInfo.accountId) {\n        //         await unlockAccount({accInfo, shouldShow: shouldShow ?? false})\n        //     }\n        //     statusAccountUnset();\n        // } catch (reason) {\n        //     dumpError400(reason)\n        //     await activeAccount({reason, shouldShow: shouldShow ?? false});\n        //     statusAccountUnset();\n        // }\n\n\n    },\n\n    onSocket: () => subject.asObservable()\n    // clearMessages: () => subject.next(),\n    // onSocket: () => subject.asObservable()\n};","import store from '../stores';\nimport { AccountStep, setShowAccount, setShowConnect, Toast, WalletConnectStep } from '@loopring-web/component-lib';\nimport { fnType } from '@loopring-web/common-resources';\nimport { changeShowModel } from 'stores/account';\nimport { walletLayer2Services } from 'services/account/walletLayer2Services'\nimport { myLog } from 'utils/log_tools';\n\nexport const accountStaticCallBack = (onclickMap: { [key: number]: [fn: (props: any) => any, args?: any[]] }, deps?: any[]) => {\n    const { readyState } = store.getState().account;\n    // fnType[readyState]\n    let fn, args;\n    [fn, args] = onclickMap[readyState] ? onclickMap[readyState] : [];\n    myLog('accountStaticCallBack:', readyState)\n    if (typeof fn === 'function') {\n        args = [...(args ?? []), ...(deps ?? [])] as [props: any]\n        return fn.apply(this, args);\n    }\n\n}\n\nexport const btnLabel: typeof btnClickMap = {\n\n    [fnType.UN_CONNECT]: [\n        function () {\n            return `labelConnectWallet`\n        }\n    ],\n    [fnType.ERROR_NETWORK]: [\n        function () {\n            return `labelWrongNetwork`\n        }\n    ],\n\n    [fnType.DEFAULT]: [\n        function () {\n            return `depositTitleAndActive`\n        }\n    ], [fnType.ACTIVATED]: [\n        function () {\n            return undefined\n        }\n    ]\n    , [fnType.LOCKED]: [\n        function () {\n            return `labelUnLockLayer2`\n        }\n    ]\n};\n\n\nexport const btnClickMap: { [key: string]: [fn: (props: any) => any, args?: any[]] } = {\n    [fnType.ERROR_NETWORK]: [\n        function () {\n            //TODO toast\n            myLog('get error network!')\n        }\n    ],\n    [fnType.UN_CONNECT]: [\n        function () {\n            // setShowConnect({isShow: true})\n            store.dispatch(changeShowModel({ _userOnModel: true }));\n            store.dispatch(setShowConnect({ isShow: true, step: WalletConnectStep.Provider }))\n        }\n    ]\n    , [fnType.NO_ACCOUNT]: [\n        function () {\n            myLog('NO_ACCOUNT! sendCheckAcc', )\n            walletLayer2Services.sendCheckAcc()\n            // store.dispatch(changeShowModel({ _userOnModel: true }));\n            // store.dispatch(setShowAccount({ isShow: true, step: AccountStep.NoAccount }))\n            // ShowDeposit(true)\n        }\n    ]\n    , [fnType.DEPOSITING]: [\n        function () {\n            myLog('DEPOSITING! sendCheckAcc', )\n            walletLayer2Services.sendCheckAcc()\n            // store.dispatch(setShowAccount({isShow: true, step: AccountStep.Depositing}))\n            // ShowDeposit(true)\n        }\n    ]\n    , [fnType.LOCKED]: [\n        function () {\n            store.dispatch(changeShowModel({ _userOnModel: true }));\n            store.dispatch(setShowAccount({ isShow: true, step: AccountStep.HadAccount }))\n        }\n    ]\n};\n\n","import store from '../../stores';\nimport { setSlippage } from '@loopring-web/component-lib';\n\ntype Cache = {\n    customSlippage?:number\n}\nexport  const makeCache  = (__cache__:Cache)=>{\n   if(typeof  __cache__.customSlippage !== undefined){\n       store.dispatch(setSlippage(__cache__.customSlippage as number))\n      // store.getState().settings\n   }\n}","import { debug } from \"console\"\n\nexport function deepClone(data: any) {\n    if (!data || !(data instanceof Object) || (typeof data == \"function\")) {\n        return data || undefined\n    }\n    let constructor = data.constructor\n    let result = new constructor()\n    for (let key in data) {\n        if (data.hasOwnProperty(key)) {\n            result[key] = deepClone(data[key])\n        }\n    }\n    return result\n}\n\nexport async function copyToClipBoard(text: string){ //复制到剪切板\n\n    if(document.execCommand){\n        var textarea =document.createElement('textarea')\n        document.body.appendChild(textarea)\n        textarea.value=text\n        textarea.select()\n        document.execCommand(\"copy\")\n        document.body.removeChild(textarea)\n\t}\n\n    if (navigator.clipboard) {\n        await navigator.clipboard.writeText(text)\n    }\n\n\tif((window as any).clipboardData) {\n        (window as any).clipboardData.setData(\"Text\", text)\n\n        console.log('clipboardData:', text)\n        return true\n    }\n\treturn false\n}","import store from 'stores'\n\nimport * as sdk from 'loopring-sdk'\n\nconst getTokenInfo = (symbol: string) => {\n    const tokenMap = store.getState().tokenMap.tokenMap\n\n    if (!tokenMap || !tokenMap[symbol]) {\n        return undefined\n    }\n\n    return tokenMap[symbol]\n}\n\nconst getMarketInfo = (symbol: string) => {\n    const marketMap = store.getState().tokenMap.marketMap\n\n    if (!marketMap || !marketMap[symbol]) {\n        return undefined\n    }\n\n    return marketMap[symbol]\n}\n\nexport function StringToNumberWithPrecision(rawVal: string, symbol: string) {\n    \n    if (rawVal === undefined || rawVal === null || rawVal.trim() === '')\n        return 0\n\n    const tokenInfo = getTokenInfo(symbol)\n\n    if (!tokenInfo) {\n        return undefined\n    }\n\n    return parseFloat(sdk.toBig(rawVal).toFixed(tokenInfo.precision, 0))\n}\n\n/*\n* format volume to real number\n*/\nexport function VolToNumberWithPrecision(rawVal: string, symbol: string) {\n\n    const tokenInfo = getTokenInfo(symbol)\n\n    if (!tokenInfo) {\n        return undefined\n    }\n\n    if (rawVal === undefined || rawVal === null || rawVal.trim() === '')\n        return 0\n\n    return sdk.toBig(rawVal).div('1e' + tokenInfo.decimals).toFixed(tokenInfo.precision, 0)\n}\n\n/*\n* format raw val with precision\n*/\nexport function FormatValWithPrecision(rawVal: string, symbol: string) {\n\n    const tokenInfo = getTokenInfo(symbol)\n\n    if (!tokenInfo) {\n        return undefined\n    }\n\n    if (rawVal === undefined || rawVal === null || rawVal.trim() === '')\n        return 0\n\n    return sdk.toBig(rawVal).toFixed(tokenInfo.precision, 0)\n}\n\n/*\n* format order price with precision\n*/\nexport function formatPriceWithPrecision(rawVal: string, \n    symbol: string) {\n    const marketInfo = getMarketInfo(symbol)\n    if (!rawVal || !marketInfo || !symbol) {\n        return '0'\n    }\n\n    return sdk.toBig(rawVal).toFixed(marketInfo.precisionForPrice)\n\n}","import {\n    AmmPoolActivityRule,\n    AmmPoolActivityStatus,\n    AmmPoolSnapshot,\n    LoopringMap,\n    TickerData,\n    toBig,\n} from 'loopring-sdk';\nimport { AmmActivity, AmmCardProps, MyAmmLP } from '@loopring-web/common-resources';\nimport store from '../../stores';\nimport { deepClone } from '../../utils/obj_tools';\nimport { AmmUserReward, AmmUserRewardMap } from 'loopring-sdk/dist/defs/loopring_defs';\nimport BigNumber from 'bignumber.js';\nimport { volumeToCount, volumeToCountAsBigNumber } from './volumeToCount';\nimport { coinMap } from '@loopring-web/component-lib';\nimport { AmmDetailStore } from '../../stores/Amm/AmmMap';\nimport { WalletMapExtend } from './makeWallet';\nimport { VolToNumberWithPrecision } from '../../utils/formatter_tool';\n\nexport type AmmActivityViewMap<R, I> = {\n    [key in keyof R]?: AmmActivity<I>[] | undefined\n}\nexport const makeUIAmmActivityMap = <R extends { [ key: string ]: any }, I extends { [ key: string ]: any }>\n({ammActivityMap, type, ammPoolActivityStatus}: {\n    ammActivityMap: LoopringMap<LoopringMap<AmmPoolActivityRule[ ]>> | undefined,\n    type: 'AMM_MINING' | 'SWAP_VOLUME_RANKING',\n    ammPoolActivityStatus: AmmPoolActivityStatus[]\n}, myReward: AmmUserRewardMap | undefined):\n    Array<AmmCardProps<I>> => {\n    const {coinMap, tokenMap, idIndex} = store.getState().tokenMap\n    let ammActivityViewMap: AmmActivityViewMap<R, I> = {}\n    if (ammActivityMap && ammActivityMap[ type ]) {\n\n\n        // @ts-ignore\n        ammPoolActivityStatus.forEach((status: AmmPoolActivityStatus) => {\n\n            if (ammActivityMap[ type ][ status ]) {\n                // @ts-ignore\n                ammActivityMap[ type ][ status ].reduce((prev: AmmActivityViewMap<R, I>, ammPoolActivityRule: AmmPoolActivityRule) => {\n\n                    if (coinMap && ammPoolActivityRule.awardRules[ 0 ] && idIndex && tokenMap) {\n\n                        const symbol = idIndex[ ammPoolActivityRule.awardRules[ 0 ].tokenId as any ]\n                        const totalRewards = VolToNumberWithPrecision(ammPoolActivityRule.awardRules[ 0 ].volume ,symbol)\n                        // @ts-ignore\n                        const item = {\n                            // @ts-ignore\n                            rewardToken: coinMap[ symbol ],\n                            totalRewards: Number(totalRewards),\n                            myRewards: status === AmmPoolActivityStatus.InProgress && myReward && myReward[ ammPoolActivityRule.market ] ?\n                                volumeToCount(symbol, myReward[ ammPoolActivityRule.market ]?.currentRewards[ 0 ].volume) : 0,\n                            duration: {\n                                from: new Date(ammPoolActivityRule?.rangeFrom),\n                                to: new Date(ammPoolActivityRule?.rangeTo),\n                            },\n                            isPass: AmmPoolActivityStatus.EndOfGame === status,\n                        }\n                        if (prev[ ammPoolActivityRule.market ]) {\n                            // @ts-ignore\n                            prev[ ammPoolActivityRule.market ].push(item);\n                        } else {\n                            // @ts-ignore\n                            prev[ ammPoolActivityRule.market ] = [item];\n                        }\n\n\n                        // return prev;\n                    }\n                    return prev;\n                }, ammActivityViewMap)\n\n            }\n        })\n    }\n    const resultArray = makeAsCard(ammActivityViewMap)\n    // console.log(resultArray)\n    return resultArray;\n\n\n}\nconst makeAsCard = <R extends { [ key: string ]: any }, I extends { [ key: string ]: any }>\n(ammActivityViewMap: AmmActivityViewMap<R, I> | undefined, myReward?: any): Array<AmmCardProps<I>> => {\n    const {coinMap} = store.getState().tokenMap\n    const {ammMap} = store.getState().amm.ammMap\n    try {\n        if (ammActivityViewMap && coinMap) {\n            // @ts-ignore\n            return Reflect.ownKeys(ammActivityViewMap).reduce((prev: Array<AmmCardProps<I>>, key: string) => {\n                const _ammInfo = ammMap[ key as string ]\n                if (_ammInfo && _ammInfo.coinA && coinMap && ammActivityViewMap[ key ]) {\n\n                    // @ts-ignore\n                    const itemArray = ammActivityViewMap[ key ].map((item) => {\n                        return {\n                            ...deepClone(_ammInfo),\n                            // @ts-ignore\n                            coinAInfo: coinMap[ _ammInfo.coinA ],\n                            // @ts-ignore\n                            coinBInfo: coinMap[ _ammInfo.coinB ],\n                            activity: item,\n                        }\n                    })\n                    prev = [...prev, ...itemArray]\n                }\n                return prev;\n            }, [] as Array<AmmCardProps<I>>) as Array<AmmCardProps<I>>\n        } else {\n            return [] as Array<AmmCardProps<I>>\n        }\n    } catch (error) {\n        console.log(error)\n        return []\n    }\n}\ntype Value = undefined | number;\nexport type SummaryMyAmm = {\n    rewardDollar: Value,\n    rewardYuan: Value,\n    feeDollar: Value,\n    feeYuan: Value,\n}\nexport const makeSummaryMyAmm = <C extends { [ key: string ]: any }>({\n                                                                         userRewardsMap\n                                                                     }: {\n    userRewardsMap: LoopringMap<AmmUserReward> | undefined\n}):\n    SummaryMyAmm | undefined => {\n    const {coinMap, idIndex, tokenMap} = store.getState().tokenMap;\n    const {faitPrices, forex} = store.getState().system;\n    if (userRewardsMap && idIndex && coinMap && tokenMap && faitPrices && forex) {\n        let summaryMyAmm = Object.keys(userRewardsMap).reduce((prev, key) => {\n            if (/AMM-/i.test(key)) {\n                // @ts-ignore\n                const [, coinA, coinB] = key.match(/AMM-(\\w+)-(\\w+)/i);\n                const ammUserReward = userRewardsMap[ key ]\n                const {\n                    rewardDollar,\n                    rewardYuan,\n                    feeDollar,\n                    feeYuan\n                } = getOneRewardInfo({coinB, coinA, ammUserReward, idIndex, faitPrices, forex})\n                prev.rewardDollar = rewardDollar ? toBig(rewardDollar).plus(prev.rewardDollar).toNumber() : 0;\n                prev.rewardYuan = rewardYuan ? toBig(rewardYuan).plus(prev.rewardYuan).toNumber() : 0;\n                prev.feeDollar = feeDollar ? toBig(feeDollar).plus(prev.feeDollar).toNumber() : 0;\n                prev.feeYuan = feeYuan ? toBig(feeYuan).plus(prev.feeYuan).toNumber() : 0;\n            }\n            return prev\n        }, {\n            rewardDollar: 0,\n            rewardYuan: 0,\n            feeDollar: 0,\n            feeYuan: 0\n        })\n\n        return summaryMyAmm\n    }\n    return undefined\n}\nconst getOneRewardInfo = <C>({\n                                 coinA,\n                                 coinB,\n                                 ammUserReward,\n                                 idIndex,\n                                 faitPrices,\n                                 forex,\n                                 walletMap,\n                                 snapShotData\n                             }: any) => {\n    let rewardToken, rewardToken2, feeA, feeB, feeDollar, feeYuan, reward, reward2, rewardDollar, rewardYuan;\n    if (ammUserReward) {\n        rewardToken = ammUserReward.currentRewards[ 0 ] ? idIndex[ ammUserReward.currentRewards[ 0 ].tokenId as number ] : undefined\n        rewardToken2 = ammUserReward.currentRewards[ 1 ] ? idIndex[ ammUserReward.currentRewards[ 1 ].tokenId as number ] : undefined\n        feeA = ammUserReward ? volumeToCountAsBigNumber(coinA, ammUserReward.feeRewards[ 0 ]) : toBig(0);\n        feeB = ammUserReward ? volumeToCountAsBigNumber(coinB, ammUserReward.feeRewards[ 1 ]) : toBig(0);\n        feeA = feeA ? feeA : toBig(0);\n        feeB = feeB ? feeB : toBig(0);\n        feeDollar = feeA.times(faitPrices[ coinA ]?faitPrices[ coinA ].price:0).plus(feeB.times(faitPrices[ coinB ]?faitPrices[ coinB ].price:0))\n        feeYuan = feeDollar.times(forex);\n        reward = rewardToken ? volumeToCountAsBigNumber(rewardToken, ammUserReward.currentRewards[ 0 ].volume) as BigNumber : toBig(0);\n        reward2 = rewardToken2 ? volumeToCountAsBigNumber(rewardToken2, ammUserReward.currentRewards[ 1 ].volume) as BigNumber : toBig(0);\n        reward = reward ? reward : toBig(0);\n        reward2 = reward2 ? reward2 : toBig(0);\n        rewardDollar = reward.times(rewardToken ? faitPrices[ rewardToken ].price : 1).plus(reward2.times(rewardToken2 ? faitPrices[ rewardToken2 ].price : 1));\n        rewardYuan = rewardDollar.times(forex);\n    }\n    let balanceA, balanceB, balanceDollar, balanceYuan;\n    if (walletMap && walletMap[ 'LP-' + coinA + '-' + coinB ] && snapShotData) {\n        // @ts-ignore\n        const ratio = new BigNumber(walletMap[ 'LP-' + coinA + '-' + coinB ].count).div(snapShotData.ammPoolsBalance.lp.volume);\n        balanceA = ratio.times(volumeToCountAsBigNumber(coinA, snapShotData.ammPoolsBalance.pooled[ 0 ].volume) || 1);\n        balanceB = ratio.times(volumeToCountAsBigNumber(coinB, snapShotData.ammPoolsBalance.pooled[ 1 ].volume) || 1);\n        // @ts-ignore\n        balanceDollar = balanceA.times(faitPrices[ coinA ].price).plus(balanceB.times(faitPrices[ coinB ].price))\n        balanceYuan = balanceDollar.times(forex)\n    }\n\n    return {\n        feeA: feeA ? feeA.toNumber() : undefined,\n        feeB: feeB ? feeB.toNumber() : undefined,\n        reward: reward ? reward.toNumber() : undefined,\n        rewardToken: rewardToken ? coinMap[ rewardToken ] : undefined,\n        reward2: reward2 ? reward2.toNumber() : undefined,\n        rewardToken2: rewardToken2 ? coinMap[ rewardToken2 ] : undefined,\n        rewardDollar: rewardDollar ? rewardDollar.toNumber() : undefined,\n        rewardYuan: rewardYuan ? rewardYuan.toNumber() : undefined,\n        feeDollar: feeDollar ? feeDollar.toNumber() : undefined,\n        feeYuan: feeYuan ? feeYuan.toNumber() : undefined,\n        ammDetail: {\n            coinAInfo: coinMap[ coinA ],\n            coinBInfo: coinMap[ coinB ]\n        },\n        balanceA: balanceA ? balanceA.toNumber() : undefined,\n        balanceB: balanceB ? balanceB.toNumber() : undefined,\n        balanceDollar: balanceDollar ? balanceDollar.toNumber() : undefined,\n        balanceYuan: balanceYuan ? balanceYuan.toNumber() : undefined,\n    } as MyAmmLP<C>\n}\n\nexport const makeMyAmmWithSnapshot = <C extends { [ key: string ]: any }>(market: any, _walletMap: WalletMapExtend<C> | undefined, ammUserRewardMap: LoopringMap<AmmUserReward> | undefined, snapShotData?: {\n    tickerData?: TickerData | undefined\n    ammPoolsBalance: AmmPoolSnapshot | undefined\n} | undefined) => {\n    const {coinMap, idIndex, tokenMap} = store.getState().tokenMap;\n    const {faitPrices, forex} = store.getState().system;\n    const [, coinA, coinB] = market.match(/(\\w+)-(\\w+)/i);\n    let _myAmm: Partial<MyAmmLP<C>> = {};\n    if (ammUserRewardMap && ammUserRewardMap[ 'AMM-' + market ]\n        && snapShotData && snapShotData.ammPoolsBalance) {\n        const ammUserReward: AmmUserReward = ammUserRewardMap[ 'AMM-' + market ];\n        // @ts-ignore\n        if (coinMap && tokenMap && idIndex && forex && faitPrices) {\n            _myAmm = getOneRewardInfo({\n                coinA, coinB, ammUserReward,\n                idIndex, faitPrices, forex, walletMap: _walletMap, snapShotData\n            })\n\n            return _myAmm as MyAmmLP<C>\n        }\n    }\n    return {\n        feeA: undefined,\n        feeB: undefined,\n        feeDollar: undefined,\n        feeYuan: undefined,\n        reward: undefined,\n        rewardToken: undefined as any,\n        balanceA: undefined,\n        balanceB: undefined,\n        balanceYuan: undefined,\n        balanceDollar: undefined,\n    }\n}\n\nexport const makeMyAmmWithStat = <C extends { [ key: string ]: any }>\n(market: any,\n _walletMap: WalletMapExtend<C> | undefined,\n ammUserRewardMap: LoopringMap<AmmUserReward> | undefined,\n ammDetail: AmmDetailStore<C>) => {\n    const {coinMap, idIndex, tokenMap} = store.getState().tokenMap;\n    const {faitPrices, forex} = store.getState().system;\n    const [, coinA, coinB] = market.match(/(\\w+)-(\\w+)/i);\n    let _myAmm = {};\n    let balanceA, balanceB, balanceDollar, balanceYuan;\n    if (_walletMap && _walletMap[ 'LP-' + coinA + '-' + coinB ] && forex) {\n        // @ts-ignore\n        const ratio = new BigNumber(_walletMap[ 'LP-' + coinA + '-' + coinB ].count).div(ammDetail.totalLPToken);\n        balanceA = ratio.times(volumeToCountAsBigNumber(coinA, ammDetail.totalA ? ammDetail.totalA : 0) || 1);\n        balanceB = ratio.times(volumeToCountAsBigNumber(coinB, ammDetail.totalB ? ammDetail.totalB : 0) || 1);\n        // @ts-ignore\n        balanceDollar = balanceA.times(faitPrices[ coinA ]?faitPrices[ coinA ].price:0).plus(balanceB.times(faitPrices[ coinB ]?faitPrices[ coinB ].price:0))\n        balanceYuan = balanceDollar.times(forex);\n        _myAmm = {\n            // ...ammDetail,\n            balanceA: balanceA.toNumber(),\n            balanceB: balanceB.toNumber(),\n            balanceYuan: balanceYuan.toNumber(),\n            balanceDollar: balanceDollar.toNumber(),\n        }\n    }\n    if (ammUserRewardMap && ammUserRewardMap[ 'AMM-' + market ]\n        && ammDetail && forex) {\n        const ammUserReward: AmmUserReward = ammUserRewardMap[ 'AMM-' + market ];\n        let rewardToken, rewardToken2, feeA, feeB, feeDollar, feeYuan, reward, reward2, rewardDollar, rewardYuan;\n\n        if (coinMap && tokenMap && idIndex && forex && faitPrices && ammUserReward) {\n            rewardToken = ammUserReward.currentRewards[ 0 ] ? idIndex[ ammUserReward.currentRewards[ 0 ].tokenId as number ] : undefined\n            rewardToken2 = ammUserReward.currentRewards[ 1 ] ? idIndex[ ammUserReward.currentRewards[ 1 ].tokenId as number ] : undefined\n            feeA = ammUserReward ? volumeToCountAsBigNumber(coinA, ammUserReward.feeRewards[ 0 ]) : toBig(0);\n            feeB = ammUserReward ? volumeToCountAsBigNumber(coinB, ammUserReward.feeRewards[ 1 ]) : toBig(0);\n            feeA = feeA ? feeA : toBig(0);\n            feeB = feeB ? feeB : toBig(0);\n            feeDollar = feeA.times(faitPrices[ coinA ]?faitPrices[ coinA ].price:0).plus(feeB.times(faitPrices[ coinB ]?faitPrices[ coinB ].price:0))\n            feeYuan = feeDollar.times(forex);\n            reward = rewardToken ? volumeToCountAsBigNumber(rewardToken, ammUserReward.currentRewards[ 0 ].volume) as BigNumber : toBig(0);\n            reward2 = rewardToken2 ? volumeToCountAsBigNumber(rewardToken2, ammUserReward.currentRewards[ 1 ].volume) as BigNumber : toBig(0);\n            reward = reward ? reward : toBig(0);\n            reward2 = reward2 ? reward2 : toBig(0);\n            rewardDollar = reward.times(rewardToken ? faitPrices[ rewardToken ].price : 1).plus(reward2.times(rewardToken2 ? faitPrices[ rewardToken2 ].price : 1));\n            rewardYuan = rewardDollar.times(forex);\n            _myAmm = {\n                ..._myAmm,\n                feeA: feeA ? feeA.toNumber() : undefined,\n                feeB: feeB ? feeB.toNumber() : undefined,\n                reward: reward ? reward.toNumber() : undefined,\n                // @ts-ignore\n                rewardToken: rewardToken ? coinMap[ rewardToken ] : undefined,\n                reward2: reward2 ? reward2.toNumber() : undefined,\n                // @ts-ignore\n                rewardToken2: rewardToken2 ? coinMap[ rewardToken2 ] : undefined,\n                rewardDollar: rewardDollar ? rewardDollar.toNumber() : undefined,\n                rewardYuan: rewardYuan ? rewardYuan.toNumber() : undefined,\n                feeDollar: feeDollar ? feeDollar.toNumber() : undefined,\n                feeYuan: feeYuan ? feeYuan.toNumber() : undefined,\n                ammDetail: {\n                    // @ts-ignore\n                    coinAInfo: coinA ? coinMap[ coinA ] : undefined,\n                    // @ts-ignore\n                    coinBInfo: coinB ? coinMap[ coinB ] : undefined,\n                },\n            }\n\n        }\n        return _myAmm as MyAmmLP<C>\n    }\n    return {\n        feeA: undefined,\n        feeB: undefined,\n        feeDollar: undefined,\n        feeYuan: undefined,\n        reward: undefined,\n        rewardToken: undefined as any,\n        balanceA: undefined,\n        balanceB: undefined,\n        balanceYuan: undefined,\n        balanceDollar: undefined,\n    }\n}\n\n// if (ammUserReward) {\n//     const symbol = ammUserReward.currentRewards[ 0 ] ? idIndex[ ammUserReward.currentRewards[ 0 ].tokenId as number ] : undefined\n//     const symbol2 = ammUserReward.currentRewards[ 1 ] ? idIndex[ ammUserReward.currentRewards[ 1 ].tokenId as number ] : undefined\n//\n//     _myAmm = {\n//         ..._myAmm,\n//         feeA: ammUserReward ? volumeToCount(coinA, ammUserReward.feeRewards[ 0 ]) : 0,//Number(ammUserReward.feeRewards[ 0 ]) : 0,\n//         feeB: ammUserReward ? volumeToCount(coinB, ammUserReward.feeRewards[ 1 ]) : 0,//Number(ammUserReward.feeRewards[ 1 ]) : 0,\n//         reward: symbol ? volumeToCount(symbol, ammUserReward.currentRewards[ 0 ].volume) : 0,\n//         // @ts-ignore\n//         rewardToken: symbol ? coinMap[ symbol ] : undefined,\n//         reward2: symbol2 ? volumeToCount(symbol2, ammUserReward.currentRewards[ 1 ].volume) : 0,\n//         // @ts-ignore\n//         rewardToken2: symbol2 ? coinMap[ symbol2 ] : undefined,\n//\n//\n//     }\n//     _myAmm.feeDollar = _myAmm.feeA && _myAmm.feeA * faitPrices[ coinA ].price;\n//     _myAmm.feeDollar = _myAmm.feeB && _myAmm.feeB * faitPrices[ coinB ].price;\n// }\n//\n//\n// if (_walletMap && _walletMap[ 'LP-' + market ]) {\n//     // @ts-ignore\n//     const ratio = new BigNumber(_walletMap[ 'LP-' + market ].detail.total).div(snapShotData.ammPoolsBalance.lp.volume);\n//     _myAmm = {\n//         ..._myAmm,  //snapShotData.ammPoolsBalance.pooled[ 0 ].volume).div(BIG10.pow(tokenMap[coinA].decimals)\n//         balanceA: ratio.times(volumeToCountAsBigNumber(coinA, snapShotData.ammPoolsBalance.pooled[ 0 ].volume) || 1).toNumber(),\n//         balanceB: ratio.times(volumeToCountAsBigNumber(coinB, snapShotData.ammPoolsBalance.pooled[ 1 ].volume) || 1).toNumber(),\n//     }\n//     // @ts-ignore\n//     _myAmm.balanceDollar = _myAmm.balanceA * faitPrices[ coinA ].price + _myAmm.balanceB * faitPrices[ coinB ].price\n//     _myAmm.balanceYuan = _myAmm.balanceDollar * forex\n// }\n// export const getAmmPoolGameUserRanks = ():Promise<AmmUserRewardMap> => {\n//     const {accountId} = store.getState().account\n//     //https://api3.loopring.io/api/v2/amm/user/rewards?owner=10917\n//     if(LoopringAPI.ammpoolAPI){\n//         return LoopringAPI.ammpoolAPI.getAmmPoolUserRewards({owner:accountId}).then(({ammUserRewardMap}:any)=>{\n//               return ammUserRewardMap  as AmmUserRewardMap\n//         })\n//     }else{\n//         return  Promise.resolve({} as AmmUserRewardMap);\n//     }\n//\n//     // return LoopringAPI.ammpoolAPI?.getUserAmmPoolTxs({accountId}, apiKey).then(({userAmmPoolTxs}) => {\n//     //     return userAmmPoolTxs\n//     // })\n//     // if(LoopringAPI.ammpoolAPI)   {\n//     //    let promiseList =  marketKeys.map((key)=>{\n//     //         // @ts-ignore\n//     //         return LoopringAPI.ammpoolAPI.getAmmPoolGameUserRank({owner:accAddr,ammPoolMarket:'key'},apiKey)\n//     //     })\n//     //     return Promise.all(promiseList).then(\n//     //         (array:any[])=>{\n//     //\n//     //           return  array.reduce((prev,item:{userRankList:GameRankInfo[]},index)=>{\n//     //                 const market = marketKeys[index]\n//     //                 prev[ market] = item.userRankList[0]\n//     //                 return item.userRankList[0]\n//     //             },{})\n//     //\n//     //         }\n//     //     )\n//     // }else{\n//     //   return  Promise.resolve({});\n//     // }\n//\n//\n//\n//\n// }\n//\n// {\n//     userRankList: GameRankInfo[];\n//     raw_data: any;\n// }\n","import { AmmDetailStore } from '../../stores/Amm/AmmMap';\nimport { AmmPoolSnapshot } from 'loopring-sdk';\nimport { makeMyAmmWithSnapshot, makeMyAmmWithStat } from './makeUIAmmActivityMap';\nimport { AmmUserRewardMap } from 'loopring-sdk/dist/defs/loopring_defs';\nimport { WalletMapExtend } from './makeWallet';\n\nexport const makeMyPoolRowWithSnapShot = <T extends { [ key: string ]: any }>({market,ammSnapShot,walletMap,ammUserRewardMap}: {\n    market:string\n    ammSnapShot: AmmPoolSnapshot,\n    walletMap: WalletMapExtend<T>\n    ammUserRewardMap:AmmUserRewardMap|undefined\n}) => {\n\n    return makeMyAmmWithSnapshot(market,walletMap, ammUserRewardMap, {\n        ammPoolsBalance: ammSnapShot\n    })\n}\n\n                                                                        \nexport const makeMyPoolRowWithPoolState = <T extends { [ key: string ]: any }>({market,ammDetail,walletMap,ammUserRewardMap}: {\n    market:string\n    ammDetail: AmmDetailStore<T>,\n    walletMap: WalletMapExtend<T>\n    ammUserRewardMap:AmmUserRewardMap|undefined\n}) => {\n    if(walletMap && ammDetail){\n        return makeMyAmmWithStat (market,walletMap, ammUserRewardMap, ammDetail)\n    }\n    return undefined\n}","import { TickerData, toBig } from 'loopring-sdk';\nimport store from '../../stores';\nimport { FloatTag,TradeFloat } from '@loopring-web/common-resources';\nimport { volumeToCountAsBigNumber } from './volumeToCount';\nimport { Ticker, TickerMap } from '../../stores/ticker';\nimport { LoopringMap } from 'loopring-sdk/dist/defs/loopring_defs';\nimport { VolToNumberWithPrecision } from '../../utils/formatter_tool';\n\nexport const makeTickView = (tick: TickerData) => {\n    // const {forex} = store.getState().system;\n\n    const {faitPrices, forex} = store.getState().system;\n    const floatTag = (isNaN(tick.close) || isNaN(tick.open))  || tick.open === tick.close ? FloatTag.none :\n        tick.close > tick.open ? FloatTag.increase : FloatTag.decrease\n    let _tradeFloat: Partial<TradeFloat> = {\n        change: (tick.close - tick.open) / tick.open,\n        timeUnit: '24h',\n        priceYuan:  0,\n        priceDollar: 0,\n        floatTag,\n        reward: 0,\n        close: isNaN(tick.close) ? undefined : tick.close,\n        high: tick.high === 0 ? undefined : tick.high,\n        low: tick.low === 0 ? undefined : tick.low,\n\n        // APY: 0,\n    }\n    if (faitPrices && forex) {\n        const volume = VolToNumberWithPrecision(tick.base_token_volume, tick.base as string)\n        // const priceDollar = toBig(tiem).times(faitPrices[ tick.base as string ] ? faitPrices[ tick.base as string ].price : 0);\n        // const priceYuan = priceDollar.times(forex);\n        const closeDollar = toBig(tick.close).times(faitPrices[ tick.quote as string ] ? faitPrices[ tick.quote as string ].price : 0);\n        const closeYuan = closeDollar.times(forex);\n        const qPrice = faitPrices[tick.quote as string].price?    faitPrices[tick.quote as string].price:0;\n        _tradeFloat = {\n            ..._tradeFloat,\n            changeDollar: toBig(tick.close - tick.open).times( qPrice ).toNumber(),\n            changeYuan: toBig(tick.close - tick.open).times( qPrice ).times(forex).toNumber(),\n            volume: volume?Number(volume):undefined,\n            closeDollar:closeDollar.toNumber(),\n            closeYuan:closeYuan.toNumber(),\n        }\n    }\n    return _tradeFloat;\n}\nexport  const makeTickerMap =  <R extends {[key:string]:any}>({tickerMap}:{tickerMap:LoopringMap<TickerData>}):TickerMap<{[key:string]:any}>=>{\n    const {faitPrices, forex} = store.getState().system;\n    return Reflect.ownKeys(tickerMap).reduce((prev, key) => {\n        const item: TickerData = tickerMap[ key as any ];\n        if (item && item.base && forex && faitPrices && (faitPrices[ item.base ] || faitPrices[ 'USDT' ])) {\n            const volume = VolToNumberWithPrecision(item.base_token_volume, item.base as string)\n            //FIX: DIE is not in faitPrices\n            const priceDollar = toBig(volume?volume:0).times(faitPrices[ item.base ] ? faitPrices[ item.base ].price : faitPrices[ 'USDT' ].price);\n            const priceYuan = priceDollar?.times(forex);\n            const change = item.change && item.change !== 0 ? item.change * 100 : undefined;\n\n            prev[ key as keyof R] = {\n                // ...item,\n                timeUnit: '24h',\n                priceDollar: priceDollar?.toNumber() === 0 ? undefined : priceDollar?.toNumber(),\n                priceYuan: priceYuan?.toNumber() === 0 ? undefined : priceYuan?.toNumber(),\n                volume: volume?Number(volume):undefined,\n                floatTag: item.close > item.open ? 'increase' : 'decrease',\n                change: change,\n                close: isNaN(item.close) ? undefined : item.close,\n                high: item.high === 0 ? undefined : item.high,\n                low: item.low === 0 ? undefined : item.low,\n                // APY: 0,\n                reward: 0,\n                rewardToken: '',\n                __rawTicker__: item,\n            } as Ticker;\n        }\n        return prev\n    }, {} as TickerMap<R>)\n}\n","import store from '../../stores';\nimport { WalletCoin,CoinKey } from '@loopring-web/common-resources';\nimport * as sdk from 'loopring-sdk';\nexport type WalletMapExtend<C> =    {\n    [K in CoinKey<C>]?: WalletCoin<C> & {\n    detail: sdk.UserBalanceInfo\n}\n}\n\nexport const makeWalletLayer2 = <C extends { [ key: string ]: any }>():{ walletMap: WalletMapExtend<C> | undefined } => {\n    const {walletLayer2} = store.getState().walletLayer2;\n    const {tokenMap} = store.getState().tokenMap;\n    let walletMap: WalletMapExtend<C> | undefined;\n\n\n    if (walletLayer2) {\n        walletMap = Reflect.ownKeys(walletLayer2).reduce((prev, item) => {\n            const {total, locked, pending: { withdraw }} = walletLayer2[ item as string ];\n            const countBig = sdk.toBig(total).minus(sdk.toBig(locked)).toString()\n            return {\n                ...prev, [ item ]: {\n                    belong: item,\n                    count: sdk.fromWEI(tokenMap, item, countBig),\n                    detail: walletLayer2[ item as string ]\n                }\n            }\n        }, {} as  WalletMapExtend<C> )\n    }\n\n    return {walletMap}\n}","import * as sdk from 'loopring-sdk';\nimport store from '../../stores';\nimport { TradeTypes } from '@loopring-web/common-resources';\nimport { LoopringAPI, userAPI } from '../../stores/apis/api';\nimport { AmmRecordRow, AmmTradeType,RawDataTradeItem } from '@loopring-web/component-lib';\nimport { volumeToCount, volumeToCountAsBigNumber } from './volumeToCount';\n\nexport const getUserTrades = (marketKey: any) => {\n    const userApi = userAPI();\n    const {accountId, apiKey} = store.getState().account\n    return userApi.getUserTrades({accountId}, apiKey).then((response: {\n        totalNum: any;\n        userTrades: sdk.UserTrade[];\n        raw_data: any;\n    }) => {\n        return response.userTrades\n    })\n}\nexport const makeMarketArray = (coinKey: any, marketTrades: sdk.MarketTradeInfo[]): RawDataTradeItem[] => {\n\n    let tradeArray: Array<Partial<RawDataTradeItem>> = []\n\n    marketTrades.forEach((item: sdk.MarketTradeInfo) => {\n        try {\n            const {base, quote} = sdk.getBaseQuote(item.market)\n            const {forex} = store.getState().system\n            const {currency} = store.getState().settings\n            const {tokenMap} = store.getState().tokenMap\n            if (tokenMap) {\n                // const baseToken = tokenMap[ base as string ]\n                // const quoteToken = tokenMap[ quote as string ]\n                const feeKey = item.side === sdk.Side.Buy ? base : quote\n                // @ts-ignore\n                tradeArray.push({\n                    side: item.side === sdk.Side.Sell ? TradeTypes.Sell : TradeTypes.Buy,\n                    amount: {\n                        from: {\n                            key: base as string,\n                            value: base ? volumeToCount(base, item.volume) : undefined\n                        },\n                        to: {\n                            key: quote as string,\n                            value: base ? volumeToCountAsBigNumber(base, item.volume)?.times(item.price).toNumber():undefined\n                        },\n\n                    },\n                    price: {\n                        key: '',\n                        value: sdk.toBig(item.price).toNumber(),\n                    },\n                    fee: {\n                        key: feeKey || '--',\n                        value: feeKey ? volumeToCountAsBigNumber(feeKey, item.fee)?.toNumber() : undefined, \n                    },\n                    time: parseInt(item.tradeTime.toString()),\n                })\n            }\n        } catch (error) {\n            //CATCHERROR:\n            console.log(error)\n            // new CustomError()\n        }\n\n    })\n    // console.log('tradeArray:', tradeArray)\n    return tradeArray as RawDataTradeItem[];\n\n}\n\nexport const getUserAmmTransaction = () => {\n    const {accountId, apiKey} = store.getState().account\n    return LoopringAPI.ammpoolAPI?.getUserAmmPoolTxs({accountId}, apiKey).then(({userAmmPoolTxs}) => {\n        return userAmmPoolTxs\n    })\n    // }\n\n}\n\n\nexport const makeMyAmmMarketArray = <C extends { [ key: string ]:any }>(coinKey: string|undefined, marketTransaction: sdk.UserAmmPoolTx[]): AmmRecordRow<C>[] => {\n\n    let tradeArray: Array<Partial<AmmRecordRow<C>>> = [];\n    let {tokenMap, coinMap, idIndex} = store.getState().tokenMap;\n    marketTransaction.forEach((item: sdk.UserAmmPoolTx) => {\n        try {\n           // const {base, quote} = getBaseQuote(coinKey)\n            const {forex} = store.getState().system\n            // const {currency} = store.getState().settings\n            if (coinMap && tokenMap && idIndex\n                && !(coinKey && tokenMap['LP-'+coinKey].tokenId !== item.lpToken.tokenId) ) {\n                // @ts-ignore\n                const [, coinA, coinB] = idIndex[item.lpToken.tokenId].match(/LP-(\\w+)-(\\w+)/i);\n                 \n                tradeArray.push({\n                        type: item.txType === sdk.AmmTxType.JOIN ? AmmTradeType.add : AmmTradeType.remove,\n                        //TODO:\n                        totalDollar: 1000,\n                        totalYuan: 1000 / Number(forex),\n                        amountA: volumeToCount(coinA,item.poolTokens[ 0 ]?.actualAmount),\n                        amountB: volumeToCount(coinA,item.poolTokens[ 1 ]?.actualAmount),\n                        time: Number(item.updatedAt),\n                        // @ts-ignore\n                        coinA: coinMap[ coinA ],\n                        // @ts-ignore\n                        coinB: coinMap[ coinB ],\n                        status: item.txStatus\n                    })\n                }\n                return tradeArray\n            }\n         catch (error) {\n            //CATCHERROR:\n            console.log(error)\n            // new CustomError()\n        }\n\n    })\n    // console.log('tradeArray:', tradeArray)\n    return tradeArray as AmmRecordRow<C>[];\n\n}\n\n\nexport const makeMarketAmmArray = <C extends object>(coinKey: any, marketTransaction: sdk.AmmPoolTx[]): AmmRecordRow<C>[] => {\n\n    let tradeArray: Array<Partial<AmmRecordRow<C>>> = [];\n\n    // marketTransaction.forEach((item: AmmPoolTx) => {\n    //     try {\n    //         const {base, quote} = getBaseQuote(coinKey)\n    //         const {forex} = store.getState().system\n    //         // const {currency} = store.getState().settings\n    //         const coinMap = store.getState().tokenMap.coinMap as CoinMap<C>\n    //         if (coinMap) {\n    //\n    //             // id: number;\n    //             // from: string;\n    //             // to: string;\n    //             // token: string;\n    //             // amount: string;\n    //             // tokenF: string;\n    //             // amountF: string;\n    //             // status: TxStatus;\n    //             // txHash: string;\n    //             // billType: BillType;\n    //             // income: boolean;\n    //             // timestamp: number;\n    //             // memo: string;\n    //             // price: string;\n    //             // transferType: TransferType;\n    //             // label: string;\n    //             tradeArray.push({\n    //                 // type: item.billType === BillType.ORDER ?\n    //                 //     AmmTradeType.swap : item.billType === BillType.TRANSFER && item.income ?\n    //                 //         AmmTradeType.add : AmmTradeType.remove,\n    //                 // // //TODO:\n    //                 // totalDollar: 1000,\n    //                 // totalYuan: 1000 / Number(forex),\n    //                 // amountA: Number(item.poolTokens[ 0 ].amount),\n    //                 // amountB: Number(item.poolTokens[ 1 ].amount),\n    //                 // time: Number(item.updatedAt),\n    //                 // coinA: coinMap[ base as keyof C],\n    //                 // coinB: coinMap[ quote as keyof C ],\n    //             })\n    //         }\n    //     } catch (error) {\n    //         //CATCHERROR:\n    //         console.log(error)\n    //         // new CustomError()\n    //     }\n    //\n    // })\n    // console.log('tradeArray:', tradeArray)\n    return tradeArray as AmmRecordRow<C>[];\n\n}\n","import { AmmMap } from '../../stores/Amm/AmmMap';\nimport { AmmPoolSnapshot, getBaseQuote, LoopringMap, TickerData, TokenInfo, TokenVolumeV3 } from 'loopring-sdk';\nimport { LoopringAPI } from '../../stores/apis/api';\nimport { CoinMap, CustomError, ErrorMap } from '@loopring-web/common-resources';\nimport { volumeToCountAsBigNumber } from './volumeToCount';\n\nexport const pairDetailBlock = <C extends { [ key: string ]: any }, I extends { [ key: string ]: any }>({\n                                                                                                           coinKey,\n                                                                                                           ammKey,\n                                                                                                           ammMap\n                                                                                                       }: { coinKey: string, ammKey: string, ammMap: AmmMap<C, I> }):\n    Promise<{\n        ammPoolsBalance: AmmPoolSnapshot,\n        tickMap:  LoopringMap<TickerData>\n}> => {\n    // const exchangeApi = exchangeAPI();\n    // const ammpoolApi = ammpoolAPI();\n    return new Promise((resolve, reject) => {\n        if(LoopringAPI.ammpoolAPI && LoopringAPI.exchangeAPI ) {\n            Promise.all([\n                LoopringAPI.ammpoolAPI.getAmmPoolSnapshot({poolAddress: ammMap[ ammKey ].address}),\n                LoopringAPI.exchangeAPI.getMixTicker({market: coinKey})])\n                // exchangeApi.getMarketTrades({market:coinKey})])\n                //{raw_data},\n                .then(([{ammPoolSnapshot}, {tickMap}]) => {\n                    resolve({\n                        ammPoolsBalance: ammPoolSnapshot as AmmPoolSnapshot,\n                        tickMap,\n                    })\n                })\n\n        }else{\n            reject(new CustomError(ErrorMap.NO_SDK))\n        }\n       \n    })\n}\n\nexport const pairDetailDone = <C>({coinKey, market,ammPoolsBalance, fee, tokenMap,tickerData, _tradeCalcData, coinMap, marketCoins}:any)=>{\n\n    const [, coinSell, coinbuy] = coinKey.match(/(\\w+)-(\\w+)/i)\n    let stob:number|undefined;\n    if (tickerData.base === coinSell) {\n        // const ticker: TickerData = tickMap[market]\n        stob = Number(tickerData.close)\n\n    } else{\n        // const ticker: TickerData = tickMap[market]\n        stob = Number(tickerData.close)!==0? 1/Number(tickerData.close): 0\n    }\n    if(isNaN(stob) && ammPoolsBalance){\n        const {base, quote} = getBaseQuote(coinKey)\n        \n        const poolBaseTokenVol: TokenVolumeV3 = ammPoolsBalance.pooled[0];\n        const quoteBaseTokenVol: TokenVolumeV3 = ammPoolsBalance.pooled[1];\n        let poolVolumn:[baseVol:any, quoteVol:any];\n        if ( base && quote && tokenMap[base].tokenId === poolBaseTokenVol.tokenId ) {\n            poolVolumn =  [[base,poolBaseTokenVol.volume],[quote,quoteBaseTokenVol.volume]]\n        } else if (base && quote && tokenMap[base].tokenId === quoteBaseTokenVol.tokenId){\n            poolVolumn =  [[quote,quoteBaseTokenVol.volume],[base,poolBaseTokenVol.volume]]\n        } else {\n            throw new CustomError(ErrorMap.NO_SUPPORT_PAIR)\n        }\n        let [baseVol,quoteVol]  = poolVolumn\n        if(baseVol && quoteVol){\n            // stob = volumeToCountAsBigNumber(baseVol[0],baseVol[1])?.div(\n            //     volumeToCountAsBigNumber(quoteVol[0],quoteVol[1]) || 1\n            // ) .toNumber()\n            stob = parseFloat(volumeToCountAsBigNumber(quoteVol[0],quoteVol[1])?.div(\n                volumeToCountAsBigNumber(baseVol[0],baseVol[1]) || 1).toFixed(7, 0) as string)\n        }\n    }\n\n    _tradeCalcData.StoB = stob;\n    _tradeCalcData.BtoS = stob !== 0 && stob !== undefined? 1 / (stob * 1.0): 0;\n    _tradeCalcData.sellCoinInfoMap = coinMap && marketCoins?.reduce((prev: any, item: string | number) => {\n        return {...prev, [ item ]: coinMap[ item ]}\n    }, {} as CoinMap<C>)\n    _tradeCalcData.buyCoinInfoMap = coinMap && tokenMap && tokenMap[ _tradeCalcData.coinSell as string ].tradePairs?.reduce((prev: any, item: string | number) => {\n        return {...prev, [ item ]: coinMap[ item ]}\n    }, {} as CoinMap<C>);\n\n    _tradeCalcData.fee = fee\n\n    return {\n        _tradeCalcData\n    }\n    //setPair();\n}","import { headerRoot } from '@loopring-web/common-resources'\n\nimport { useLocation } from 'react-router-dom'\n\nimport { Toolbar, } from '@material-ui/core'\n\nimport { useHeader } from './hook'\nimport { useConfirmation } from 'stores/localStore/confirmation'\nimport { withTranslation } from 'react-i18next'\n\nimport { BottomRule, Header as HeaderUI, HideOnScroll, } from '@loopring-web/component-lib'\n\nconst Header = withTranslation('common')(({t, ...rest}: any) => {\n    const location = useLocation()\n\n    const {\n        headerToolBarData,\n        headerMenuData,\n    } = useHeader()\n\n    const { confirmWrapper, confirmation } = useConfirmation()\n\n    return (<>\n        <HideOnScroll>\n            <HeaderUI {...rest} headerMenuData={headerMenuData} headerToolBarData={headerToolBarData}\n                      selected={location.pathname === '/' ? headerRoot : location.pathname}></HeaderUI>\n        </HideOnScroll>\n        <Toolbar/>\n        <BottomRule isShow={!confirmation?.confirmed} \n            content={t('agreeLoopringTxt')} btnTxt={t('labelCookiesAgree')} \n            clickToConfirm={() => confirmWrapper() } />\n\n    </>)\n})\n\nexport default Header\n\n\n\n","import React from 'react'\n\nimport {\n    ButtonComponentsMap,\n    fnType,\n    headerMenuData,\n    headerToolBarData,\n    LanguageKeys,\n    ThemeKeys,\n} from '@loopring-web/common-resources'\n\nimport { useAccount, } from 'stores/account'\n\nimport { Theme, } from 'defs/common_defs'\n\nimport { AccountStep, useOpenModals, useSettings, } from '@loopring-web/component-lib'\n\nimport { accountStaticCallBack, btnClickMap } from 'hooks/help'\nimport { myLog } from 'utils/log_tools'\nimport { deepClone } from '../../utils/obj_tools';\n\nexport const useHeader = () => {\n    const {setTheme, themeMode, setLanguage} = useSettings();\n    const accountState = useAccount();\n    const {account, setShouldShow, status: accountStatus} =  useAccount();\n    const {setShowAccount} = useOpenModals();\n    const _btnClickMap: typeof btnClickMap = Object.assign(deepClone(btnClickMap), {\n        [ fnType.ACTIVATED ]: [\n            function () {\n                setShouldShow(true);\n                setShowAccount({isShow: true, step: AccountStep.HadAccount})\n            }\n        ],\n        // [ fnType.CONNECT ]: [\n        //     function () {\n        //         setShouldShow(true);\n        //         setShowAccount({isShow: true, step: AccountStep.HadAccount})\n        //     }\n        // ]\n\n    });\n\n    const onWalletBtnConnect = React.useCallback(async () => {\n        myLog(`onWalletBtnConnect click: ${account.readyState}`);\n        setShouldShow(true);\n        accountStaticCallBack(_btnClickMap, []);\n    }, [account, setShouldShow,_btnClickMap])\n\n    const onThemeBtnClick = React.useCallback((themeMode: ThemeKeys) => {\n        if (themeMode === Theme.dark) {\n            setTheme(Theme.light)\n        } else {\n            setTheme(Theme.dark)\n        }\n    }, [setTheme])\n\n    const onLangBtnClick = (lang: LanguageKeys) => {\n        setLanguage(lang);\n    }\n\n    React.useEffect(() => {\n        headerToolBarData[ ButtonComponentsMap.WalletConnect ] = {\n            ...headerToolBarData[ ButtonComponentsMap.WalletConnect ],\n            accountState,\n            handleClick: onWalletBtnConnect,\n        }\n        headerToolBarData[ ButtonComponentsMap.Theme ] = {\n            ...headerToolBarData[ ButtonComponentsMap.Theme ],\n            themeMode,\n            handleClick: onThemeBtnClick\n        }\n        headerToolBarData[ ButtonComponentsMap.Language ] = {\n            ...headerToolBarData[ ButtonComponentsMap.Language ],\n            handleChange: onLangBtnClick\n        }\n    });\n\n    // const forceUpdate = React.useReducer(() => ({}), {})[ 1 ] as () => void\n    const updateWallet = React.useCallback(()=>{\n        headerToolBarData[ ButtonComponentsMap.WalletConnect ] = {\n            ...headerToolBarData[ ButtonComponentsMap.WalletConnect ],\n            accountState,\n        }\n    },[headerToolBarData,accountState])\n    React.useEffect(() => {\n        if (accountStatus && accountStatus === 'UNSET') {\n            updateWallet()\n        }\n        // forceUpdate()\n    }, [accountStatus]);\n\n    return {\n        headerToolBarData,\n        headerMenuData,\n        account,\n    }\n}\n\n","import React from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { RootState } from 'stores'\nimport { confirm, Confirmation } from './reducer'\n\nexport const useConfirmation = ():  {\n    confirmation: Confirmation,\n    confirmWrapper: () => void,\n} => {\n    const confirmation: Confirmation = useSelector((state: RootState) => state.localStore.confirmation)\n    const dispatch = useDispatch()\n\n    const confirmWrapper = React.useCallback(() => {\n        dispatch(confirm(undefined))\n    }, [dispatch])\n\n    return {\n        confirmation,\n        confirmWrapper,\n    }\n}\n","import React, { useCallback, useEffect } from \"react\"\nimport store from '../../stores';\nimport { TickerMap, useTicker } from '../../stores/ticker';\nimport { MarketBlockProps, QuoteTableRawDataItem, } from '@loopring-web/component-lib';\nimport { deepClone } from '../../utils/obj_tools';\nimport { useSocket } from '../../stores/socket';\nimport { TradingInterval, WsTopicType } from 'loopring-sdk';\nimport { LoopringAPI } from 'stores/apis/api'\nimport { tickerService } from '../../services/tickerService';\nimport { debounce } from \"lodash\"\nimport { globalSetup } from '@loopring-web/common-resources';\nimport { myError } from \"utils/log_tools\";\n\nconst amtCol = 5\nconst OnePageSize = 16;\nconst rowHeight = 44;\n\n// 0\nfunction isNeedCallMore(currentStartIndex: number, to: number, marketArrayLength: number, currentListLength: number, pageSize: number = OnePageSize): boolean {\n    const pageCurrent = currentStartIndex / OnePageSize\n    if (to - pageCurrent > 1) {\n        return false\n    } else if (pageSize * to < marketArrayLength && currentListLength - 4 < pageSize * (to + 1)) {\n        return true\n    } else {\n        return false\n    }\n}\n\nexport function useQuote<C extends { [ key: string ]: string }>() {\n\n\n    const {\n        tickerMap,\n        status: tickerStatus,\n        // errorMessage: errorTickerMap,\n        statusUnset: tickerStatusUnset,\n        updateTickers,\n    } = useTicker();\n    const {sendSocketTopic, socketEnd} = useSocket();\n    const [recommendedPairs, setRecommendedPairs] = React.useState<string[]>([])\n    const {marketArray, coinMap} = store.getState().tokenMap;\n    // const recommendMarkets: string[] = marketArray && recommendedPairs.length === 4 ? recommendedPairs : []\n    // const recommendMarkets: string[] = ['LRC-USDC', 'LRC-ETH', 'ETH-USDC', 'USDC-USDT']\n    // const _marketArrayWithOutRecommend = marketArray ? marketArray.filter(item => recommendMarkets.findIndex(m => m === item) === -1) : [];\n    // const _marketArrayWithOutRecommend = marketArray ? marketArray.filter(item => recommendedPairs.findIndex(m => m === item) === -1) : [];\n    const [tickList, setTickList] = React.useState<any>([]);\n    const [recommendations, setRecommendations] = React.useState<MarketBlockProps<C>[]>([]);\n    const [, setTickerKeys] = React.useState<string[]>([]);\n    const [focusRowFrom, setFocusRowFrom] = React.useState<[start: number, end: number]>([0, 2]);\n    const [startIndex, setStartIndex] = React.useState<number>(-1);\n    // const recommendMarkets: string[] = marketArray ? marketArray.slice(0, 4) : ['LRC-ETH', 'LRC-ETH', 'LRC-ETH', 'LRC-ETH']\n    \n    const subject = React.useMemo(() => tickerService.onSocket(), []);\n\n    const updateRecommendation = React.useCallback((recommendationIndex, ticker) => {\n        if (recommendations.length) {\n          //  let _recommendations = deepClone(recommendations)\n            recommendations[ recommendationIndex ].tradeFloat = ticker\n            setRecommendations(recommendations)\n        }\n    }, [recommendations]);\n    \n    React.useEffect(() => {\n        const subscription = subject.subscribe(({tickerMap}) => {\n            if (tickerMap) {\n                Reflect.ownKeys(tickerMap).forEach((key) => {\n                    let recommendationIndex = recommendedPairs.findIndex(ele => ele === key)\n                    if (recommendationIndex !== -1) {\n                        // setRecommendations\n                        updateRecommendation(recommendationIndex, tickerMap[ key as string ])\n                    }\n                    //TODO update related row. use socket return\n                })\n            }\n        });\n        return () => subscription.unsubscribe();\n    }, [subject, recommendedPairs]);\n\n    const getRecommandPairs = useCallback(async() => {\n        if (LoopringAPI.exchangeAPI) {\n            try {\n                const { recommended } = await LoopringAPI.exchangeAPI.getRecommendedMarkets()\n                setRecommendedPairs(recommended)\n                return recommended || []\n            } catch (e) {\n                myError(e)\n            }\n            return []\n            // const { recommended } = await LoopringAPI.exchangeAPI.getRecommendedMarkets()\n            // console.log(recommended)\n            // setRecommendedPairs(recommended)\n            // return recommended\n        }\n    }, [])\n\n    React.useEffect(() => {\n        getRecommandPairs()\n    }, [getRecommandPairs])\n\n\n    //TODO if socket is error throw use recall will pending on it\n    // React.useEffect(() => {\n    //     switch (socketStatus) {\n    //         case \"ERROR\":\n    //             console.log(\"ERROR\", 'open websocket error get moment value from api ');\n    //             socketStatusUnset();\n    //             updateTickers(tickerKeys);\n    //             break;\n    //         default:\n    //             break;\n    //     }\n    // }, [socketStatus, socketStatusUnset]);\n    React.useEffect(() => {\n        const [from, to] = focusRowFrom\n        getTicker(from, to);\n        socketSendTicker(from * OnePageSize);\n        return () => {\n            socketEnd()\n        }\n    }, []);\n    React.useEffect(() => {\n        switch (tickerStatus) {\n            case \"ERROR\":\n                console.log(\"ERROR\", 'get ticker error,ui');\n                tickerStatusUnset()\n                break;\n            case \"PENDING\":\n                break;\n            case \"DONE\":\n                tickerStatusUnset();\n                updateRawData(tickerMap as TickerMap<C>);\n                break;\n            default:\n                break;\n        }\n    }, [tickerStatus, tickerStatusUnset]);\n\n    const getTicker = React.useCallback((from: number, to: number) => {\n        // if (_marketArrayWithOutRecommend) {\n            // let array = _marketArrayWithOutRecommend.slice(from * OnePageSize, to * OnePageSize);\n            // let array = _marketArrayWithOutRecommend; // 暂时获取全量数据\n            //High: add recommendations market first time is 36个数据\n            // if (from === 0) {\n            //     array = recommendMarkets.concat(array)\n            // }\n            // updateTickers(array);\n        // }\n        updateTickers(marketArray || []);\n\n    }, [marketArray, OnePageSize])\n\n    const updateRawData = React.useCallback(async (tickerMap: TickerMap<C>) => {\n        const marketPairs: string[] = await getRecommandPairs()\n        let _recommendationsFloat: QuoteTableRawDataItem[] = [];\n        let defaultRecommendationsFloat: QuoteTableRawDataItem[] = []\n        const _tickList = tickerMap && Object.keys(tickerMap) ? Reflect.ownKeys(tickerMap).reduce((prev, key) => {\n            // @ts-ignore\n            const [, coinA, coinB] = key.match(/(\\w+)-(\\w+)/i);\n            let _item = {\n                ...tickerMap[ key as string ],\n                pair: {\n                    coinA,\n                    coinB,\n                },\n            } as QuoteTableRawDataItem;\n\n            if (marketPairs.findIndex(m => m === key) !== -1) {\n                _recommendationsFloat.push(deepClone(_item))\n            }\n            if (marketArray && marketArray.findIndex(m => m === key) !== -1) {\n                defaultRecommendationsFloat.push(deepClone(_item))\n            }\n            prev.push(_item);\n            return prev\n        }, [] as QuoteTableRawDataItem[]) : []\n        \n        setTickList([...tickList, ..._tickList])\n        //setTickList\n        // if (focusRowFrom[ 0 ] === 0 && _recommendationsFloat.length > 0) {\n        if (focusRowFrom[ 0 ] === 0) {\n            _recommendationsFloat = _recommendationsFloat.filter(o => {\n                const { coinA, coinB } = o.pair\n                return (coinMap && coinMap[coinA] && coinMap[coinB])\n            })\n\n            //FIX: fix in uat env not enough pair_recommendations\n            if (_recommendationsFloat.length < 4) {\n                const filteredFloat = defaultRecommendationsFloat.filter(o => {\n                    const pair = `${o.pair.coinA}-${o.pair.coinB}`\n                    return !marketPairs.includes(pair)\n                })\n                _recommendationsFloat = _recommendationsFloat.concat(filteredFloat.slice(0, 4 - _recommendationsFloat.length));\n            }\n\n            // case uat only\n            while(_recommendationsFloat.length < 4) {\n                _recommendationsFloat.push(deepClone(_recommendationsFloat[0]))\n            }\n            \n            const _recommendations = _recommendationsFloat.reduce((prev, item) => {\n                if (coinMap && item) {\n                    const {coinA, coinB} = item.pair;\n                    const _item: MarketBlockProps<C> = {\n                        tradeFloat: item as any,\n                        // @ts-ignore\n                        coinAInfo: coinMap[ coinA ],\n                        // @ts-ignore\n                        coinBInfo: coinMap[ coinB ]\n                    } as MarketBlockProps<C>\n                    prev.push(_item)\n                }\n                return prev\n            }, [] as MarketBlockProps<C>[])\n\n            setRecommendations(_recommendations)\n        }\n    }, [tickList, focusRowFrom])\n\n\n    // const  = (startIndex: number) => {\n    //     console.log(startIndex)\n    // }\n\n    // const debounceGetTicker = React.useCallback(debounce((from, to) => {\n    //     getTicker(from, to)\n    // }, globalSetup.wait), [])\n\n    const socketSendTicker = React.useCallback(debounce((_startIndex: number, pageSize = OnePageSize) => {\n        if(_startIndex !== startIndex)  {\n            // let marketArray: string[] = _marketArrayWithOutRecommend.slice(_startIndex, _startIndex + pageSize);\n            // marketArray = [...recommendMarkets, ...marketArray];\n            // setTickerKeys(marketArray || []);\n            //High:\n            sendSocketTopic({[ WsTopicType.ticker ]: marketArray});\n        }\n    }, globalSetup.wait * 2), [startIndex])\n\n    // const onVisibleRowsChange = React.useCallback(async (startIndex: number) => {\n    //     //TODO isBottom and is On prev tickerCall\n    //     // if (!isAtBottom(startIndex,focusRowFrom[1],_marketArrayWithOutRecommend.length,OnePageSize)\n    //     //     && tickerStatus !== 'PENDING'){\n    //     // }\n    //     //TODO load more\n    //     const [, to] = focusRowFrom\n    //     if (isNeedCallMore(startIndex, to, _marketArrayWithOutRecommend.length, tickList.length, OnePageSize)) {\n    //         console.log('getNextPage.......')\n    //         setFocusRowFrom([to, to + 1]);\n    //         debounceGetTicker(to, to + 1);\n    //     }\n    //     setStartIndex(startIndex);\n    //     socketSendTicker(startIndex, OnePageSize)\n    // }, [focusRowFrom, OnePageSize, tickerStatus, marketArray, tickList])\n\n    return {\n        tickList,\n        recommendations,\n        // handleScroll,\n        // onVisibleRowsChange\n    }\n\n}\n\nexport type CandlestickItem = {\n    close: number;\n    timeStamp: number;\n}\n\nexport const useCandlestickList = (market: string) => {\n    const [candlestickList, setCandlestickList] = React.useState<CandlestickItem[]>([])\n    const getCandlestick = React.useCallback(async (market: string) => {\n        if (LoopringAPI.exchangeAPI) {\n            const res = await LoopringAPI.exchangeAPI.getMixCandlestick({\n                market: market,\n                interval: TradingInterval.d1,\n                // start?: number;\n                // end?: number;\n                limit: 7\n            })\n            if (res && res.candlesticks && !!res.candlesticks.length) {\n                const data = res.candlesticks.map(o => ({\n                    close: o.close,\n                    timeStamp: o.timestamp\n                }))\n                setCandlestickList(data)\n            }\n            setCandlestickList([])\n        }\n        setCandlestickList([])\n    }, [])\n\n    React.useEffect(() => {\n        getCandlestick(market)\n    }, [getCandlestick, market])\n\n    return candlestickList\n}\n","import styled from '@emotion/styled';\nimport { Box, Grid, Paper } from '@material-ui/core';\nimport { TablePaddingX } from '@loopring-web/component-lib';\n\nexport const StylePaper = styled(Box)`\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  //height: 100%;\n  flex: 1;\n  background: var(--color-box);\n  border-radius: ${({ theme }) => theme.unit}px;\n  // padding: ${({ theme }) => 3 * theme.unit}px  0;\n  margin-bottom: ${({ theme }) => 2* theme.unit}px;\n  .title {\n    font-size: ${({ theme }) => theme.unit * 3}px;\n    //line-height: 19px;\n    margin-left: ${({ theme }) => 3 * theme.unit}px;\n    margin-top: ${({ theme }) => 3 * theme.unit}px;\n    // margin-bottom: ${({ theme }) => 2 * theme.unit}px;\n  }\n\n  .tableWrapper {\n    display: flex;\n    margin-top: ${({ theme }) => 3 * theme.unit}px;\n    flex: 1;\n    .rdg {\n      flex: 1;\n    }\n  }\n\n  .extraTradeClass {\n    .rdg-header-row {\n      background-color: inherit !important;\n    }\n  }\n` as typeof Paper;\n\n\nexport const  TableWrapStyled = styled(Grid)`\n \n  &{\n    background: var(--color-box);\n    border-radius: ${({ theme }) => theme.unit}px;\n    .rdg{\n      .rdg-header-row {\n        border-radius: ${({theme}) => theme.unit}px ${({theme}) => theme.unit}px 0 0;\n      }\n    }\n  }\n  ${({theme}) => TablePaddingX({pLeft:theme.unit * 3,pRight:theme.unit * 3})}\n` as typeof Grid\n\n//    ${({theme}) => theme.border.defaultFrame({c_key: 'blur', d_R: 1})};\n","import React, { useCallback, useEffect } from 'react'\nimport styled from '@emotion/styled/macro'\n\nimport { MarketBlock, QuoteTable, TablePaddingX, QuoteTableRawDataItem, InputSearch } from '@loopring-web/component-lib'\nimport { OutlinedInputProps } from '@material-ui/core/OutlinedInput/OutlinedInput';\nimport { WithTranslation, withTranslation } from 'react-i18next'\nimport { useHistory } from 'react-router-dom'\nimport { cloneDeep } from 'lodash';\n// import { FloatTag } from '@loopring-web/common-resources'\nimport { Box, Grid, Tabs, Tab, Divider, OutlinedInput, InputAdornment } from '@material-ui/core'\nimport { SearchIcon } from '@loopring-web/common-resources'\nimport { useQuote, useCandlestickList } from './hook'\nimport { LoopringAPI } from 'stores/apis/api'\nimport { TradingInterval } from 'loopring-sdk/dist'\nimport { TableWrapStyled } from 'pages/styled'\nimport { useFavoriteMarket } from 'stores/localStore/favoriteMarket'\nimport { AmmPoolActivityRule } from 'loopring-sdk'\n\nconst RowStyled = styled(Grid)`\n      & .MuiGrid-root:not(:last-of-type) > div{\n        margin-right: ${({theme}) => theme.unit * 2}px;\n      }\n` as typeof Grid\n\nconst SearchWrapperStyled = styled(Box)`\n      position: absolute;\n      top: 0.9rem;\n      right: ${({theme}) => theme.unit * 2}px;\n    `\n\nconst TabsWrapperStyled = styled(Box)`\n      position: relative;\n      padding: 0.8rem 0.8rem 0 1rem;\n`\n\nexport type CandlestickItem = {\n  market: string;\n  data: {\n    close: number;\n    timeStamp: number;\n  }[]\n}\n\nexport enum TableFilterParams {\n  all = 'all',\n  favourite = 'favourite',\n  ranking = 'ranking'\n}\n\nconst QuotePage = withTranslation('common')((rest: WithTranslation) => {\n    const [candlestickList, setCandlestickList] = React.useState<any[]>([])\n    const [ammPoolBalances, setAmmPoolBalances] = React.useState<any[]>([])\n    const [tableTabValue, setTableTabValue] = React.useState('all')\n    const [filteredData, setFilteredData] = React.useState<QuoteTableRawDataItem[]>([])\n    const [searchValue, setSearchValue] = React.useState<string>('')\n    const [swapRankingList, setSwapRankingList] = React.useState<AmmPoolActivityRule[]>([])\n    const [tableHeight, setTableHeight] = React.useState(0);\n\n    const { favoriteMarket, removeMarket, addMarket } = useFavoriteMarket()\n    const { t } = rest\n\n    const getSwapRankingList = React.useCallback(async () => {\n      if (LoopringAPI.ammpoolAPI) {\n        const res = await LoopringAPI.ammpoolAPI.getAmmPoolActivityRules()\n        if (res && res.groupByRuleType && res.groupByRuleType.SWAP_VOLUME_RANKING && !!res.groupByRuleType.SWAP_VOLUME_RANKING.length) {\n          setSwapRankingList(res.groupByRuleType.SWAP_VOLUME_RANKING)\n        }\n      }\n    }, [])\n\n    const getCandlestick = React.useCallback(async (market: string) => {\n      if (LoopringAPI.exchangeAPI) {\n        const res = await LoopringAPI.exchangeAPI.getMixCandlestick({\n          market: market,\n          interval: TradingInterval.d1,\n          // start?: number;\n          // end?: number;\n          limit: 30,\n        })\n        if (res && res.candlesticks && !!res.candlesticks.length) {\n          // const data = res.candlesticks.map(o => ({\n          //   close: o.close,\n          //   timeStamp: o.timestamp\n          // }))\n          // setCandlestickList(prev => [...prev, {\n          //   market: market,\n          //   data: data\n          // }])\n          const data = res.candlesticks.map(o => ({\n            timeStamp: o.timestamp,\n            low: o.low,\n            high: o.high,\n            open: o.open,\n            close: o.close,\n            volume: o.baseVol,\n            sign: o.close < o.open ? -1 : 1,\n          }))\n          setCandlestickList(prev => [...prev, {\n            market: market,\n            data: data\n          }])\n        }\n      }\n    }, [])\n\n    const { recommendations, tickList /* onVisibleRowsChange */ } = useQuote()\n\n    const getCurrentHeight = React.useCallback(() => {\n      const height = window.innerHeight\n      const tableHeight = height - 64 - 117 - 56 - 120 - 20\n      setTableHeight(tableHeight)\n    }, [])\n\n    React.useEffect(() => {\n      getCurrentHeight()\n      window.addEventListener('resize', getCurrentHeight)\n      return () => {\n        window.removeEventListener('resize', getCurrentHeight)\n      }\n    }, [getCurrentHeight]);\n\n    React.useEffect(() => {\n      const list = recommendations.map(item => {\n        const market = `${item.coinAInfo.simpleName}-${item.coinBInfo.simpleName}`\n        return market\n      })\n      if (!!list.length) {\n        getCandlestick(list[0])\n        getCandlestick(list[1])\n        getCandlestick(list[2])\n        getCandlestick(list[3])\n      }\n    }, [recommendations, getCandlestick])\n\n    const getAmmPoolBalances = useCallback(async () => {\n      if (LoopringAPI.ammpoolAPI) {\n        const ammRes = await LoopringAPI.ammpoolAPI?.getAmmPoolBalances()\n        const fomattedRes = ammRes.raw_data.map((o: any) => ({\n          ...o,\n          poolName: o.poolName.replace('AMM-', '')\n        }))\n        setAmmPoolBalances(fomattedRes)\n      }\n    }, [])\n\n    React.useEffect(() => {\n      getAmmPoolBalances()\n    }, [getAmmPoolBalances])\n\n    React.useEffect(() => {\n      getSwapRankingList()\n    }, [getSwapRankingList])\n\n    let history = useHistory()\n\n    // prevent amm risky pair\n    const getFilteredTickList = useCallback(() => {\n      if (!!ammPoolBalances.length && tickList && !!tickList.length) {\n        return tickList.filter((o: any) => {\n          const pair = `${o.pair.coinA}-${o.pair.coinB}`\n          if (ammPoolBalances.find(o => o.poolName === pair)) {\n            return !ammPoolBalances.find(o => o.poolName === pair).risky\n          }\n          return true\n        })\n      }\n      return []\n    }, [tickList, ammPoolBalances])\n\n    useEffect(() => {\n      const data = getFilteredTickList()\n      setFilteredData(data)\n    }, [getFilteredTickList])\n\n    const handleTableFilterChange = useCallback(({type = TableFilterParams.all, keyword = '' }: {\n      type?: TableFilterParams;\n      keyword?: string;\n    }) => {\n      let data = cloneDeep(tickList)\n      if (type === TableFilterParams.favourite) {\n        data = data.filter((o: any) => {\n          const pair = `${o.pair.coinA}-${o.pair.coinB}`\n          return favoriteMarket?.includes(pair)\n        })\n      }\n      if (type === TableFilterParams.ranking) {\n        data = data.filter((o: any) => {\n          const pair = `${o.pair.coinA}-${o.pair.coinB}`\n          return swapRankingList.find(o => o.market === pair)\n        })\n      }\n      data = data.filter((o: any) => {\n        const formattedKeyword = keyword?.toLocaleLowerCase()\n        const coinA = o.pair.coinA.toLowerCase()\n        const coinB = o.pair.coinB.toLowerCase()\n        if (keyword === '') {\n          return true\n        }\n        return coinA?.includes(formattedKeyword) || coinB?.includes(formattedKeyword)\n      })\n      if (type === TableFilterParams.all && !keyword) {\n        data = getFilteredTickList()\n      }\n      setFilteredData(data)\n    }, [getFilteredTickList, favoriteMarket, swapRankingList, tickList])\n\n    const handleRowClick = useCallback((row: QuoteTableRawDataItem) => {\n      const { coinA, coinB } = row.pair\n      const tradePair = `${coinA}-${coinB}`\n      history && history.push({\n        pathname: `/trading/lite/${tradePair}`\n      })\n    }, [history])\n\n    const handleTabChange = useCallback((_event: any, newValue: string) => {\n      setTableTabValue(newValue)\n      handleTableFilterChange({\n        type: newValue === 'favourite' ? TableFilterParams.favourite : newValue === 'tradeRanking' ? TableFilterParams.ranking : TableFilterParams.all,\n        keyword: searchValue\n      })\n    }, [handleTableFilterChange, searchValue])\n    \n    const handleSearchChange = React.useCallback((value) => {\n      setSearchValue(value)\n      const type = tableTabValue === 'favourite' ? TableFilterParams.favourite : tableTabValue === 'tradeRanking' ? TableFilterParams.ranking : TableFilterParams.all\n      handleTableFilterChange({keyword: value, type: type})\n    }, [handleTableFilterChange, tableTabValue])\n\n    return <Box display={'flex'} flexDirection={'column'} flex={1} >\n\n        <RowStyled container >\n\n            {/* {recommendations.map((item,index)=> <Grid key={item.coinAInfo+item.coinBInfo+index} item xs={3} >\n                    <MarketBlock {...{...item, ...rest}}></MarketBlock>\n                </Grid>\n            )} */}\n            {recommendations.map((item,index)=> {\n              const market = `${item.coinAInfo.simpleName}-${item.coinBInfo.simpleName}`\n              const chartData = candlestickList.find(o => o.market === market)?.data.sort((a: any, b: any) => a.timeStamp - b.timeStamp)\n              return (\n                <Grid key={index} item xs={3} onClick={() => {\n                  history && history.push({\n                    pathname: `/trading/lite/${market}`\n                  })\n                }}>\n                    <MarketBlock {...{...item, chartData: chartData ? chartData : [], ...rest}}></MarketBlock>\n                </Grid>\n              )\n            } \n            )}\n\n        </RowStyled>\n        <TableWrapStyled container marginY={3}  paddingBottom={2} flex={1}> \n            <Grid item xs={12}>\n                <TabsWrapperStyled>\n                  <Tabs\n                      value={tableTabValue}\n                      onChange={handleTabChange}\n                      aria-label=\"disabled tabs example\"\n                  >\n                      <Tab label={t('labelQuotePageFavourite')} value=\"favourite\"/>\n                      <Tab label={t('labelAll')} value=\"all\"/>\n                      <Tab label={t('labelQuotePageTradeRanking')} value=\"tradeRanking\"/>\n                  </Tabs>\n                  <SearchWrapperStyled>\n                    <InputSearch value={searchValue} onChange={handleSearchChange} />\n                  </SearchWrapperStyled>\n                </TabsWrapperStyled>\n                <Divider />\n                <QuoteTable /* onVisibleRowsChange={onVisibleRowsChange} */ \n                  onRowClick={(index, row, col) => handleRowClick(row)} \n                  rawData={filteredData}\n                  favoriteMarket={favoriteMarket}\n                  addFavoriteMarket={addMarket}\n                  removeFavoriteMarket={removeMarket}\n                  currentHeight={tableHeight}\n                  {...{ showLoading: tickList && !tickList.length, ...rest }} />\n            </Grid>\n        </TableWrapStyled>\n    </Box>\n\n\n})\n\nexport default QuotePage\n","import { useDispatch, useSelector } from 'react-redux'\nimport { FavoriteMarketStates } from './interface';\nimport { clearAll, removeMarket, addMarket, addMarkets } from './reducer';\nimport React from 'react';\n\n\nexport const useFavoriteMarket = ():  {\n    favoriteMarket: FavoriteMarketStates\n    clearAll:()=>void,\n    removeMarket:(pair:string)=>void,\n    addMarket:(pair:string)=>void,\n    addMarkets:(pair:string[])=>void,\n} => {\n    const favoriteMarket: FavoriteMarketStates = useSelector((state: any) => state.localStore.favoriteMarket)\n    const dispatch = useDispatch();\n    return {\n        favoriteMarket: favoriteMarket ,\n        clearAll: React.useCallback(() => dispatch(clearAll(undefined)), [dispatch]),\n        removeMarket: React.useCallback((pair) => dispatch(removeMarket(pair)), [dispatch]),\n        addMarket: React.useCallback((pair) => dispatch(addMarket(pair)), [dispatch]),\n        addMarkets: React.useCallback((pairs) => dispatch(addMarkets(pairs)), [dispatch]),\n    }\n}\n","import { useDeepCompareEffect } from \"react-use\"\n\nexport function useCustomDCEffect(action: any, deps: any[] | undefined | null) {\n    useDeepCompareEffect(action, [deps || {}])\n}\n","import { useCallback, useState } from 'react'\nimport moment from 'moment'\nimport { useCustomDCEffect } from 'hooks/common/useCustomDCEffect'\n\nimport { TradingInterval, Candlestick, GetCandlestickRequest, GetDepthRequest, GetTickerRequest, dumpError400, getExistedMarket } from 'loopring-sdk'\n\nimport { ChartUnit, CoinInfo } from '@loopring-web/common-resources'\n\nimport { ChartType } from '@loopring-web/component-lib'\n\nimport { TGItemData, TGItemJSXInterface, } from '@loopring-web/component-lib'\n\nimport { IGetDepthDataParams } from '@loopring-web/component-lib'\nimport { LoopringAPI } from 'stores/apis/api'\n\nconst toggleData: TGItemData[] = [\n  {\n    value: ChartType.Trend,\n    key: ChartType.Trend,\n    label: 'label' + ChartType.Trend\n  },\n  {\n    value: ChartType.Depth,\n    key: ChartType.Depth,\n    label: 'label' + ChartType.Depth\n  },\n]\n\nexport function useBasicInfo(props: any, coinAInfo: any, coinBInfo: any, marketArray: any[], t: any) {\n  const tgItemJSXs: TGItemJSXInterface[] = toggleData.map(({ value, label, key }) => {\n    return { value, tlabel: t(label), key, JSX: <>{t(label)}</> }\n  })\n\n  // const { base, quote, market, tokens } = props\n\n  const { market, amm } = getExistedMarket(marketArray, coinAInfo?.name, coinBInfo?.name)\n\n  const [chartType, setChartType] = useState<ChartType>(ChartType.Trend)\n\n  // console.log('---useBasicInfo market:', market, ' amm:', amm, ' chartType:', chartType)\n  //\n  // const [change, setChange] = useState(0)\n  //\n  // const [volume, setVolume] = useState('')\n\n  const [chartUnit, setChartUnit] = useState(ChartUnit.D1)\n\n  const [originData, setOriginData] = useState<any>(undefined)\n\n  const handleChange = useCallback((_e: React.MouseEvent, value: any) => {\n    // Settings.setChartType(value)\n    // console.log('useBasicInfo handleChange:', value)\n    setOriginData(undefined)\n    setChartType(value === 'Trend' ? ChartType.Trend : ChartType.Depth)\n  }, [setOriginData, setChartType])\n\n  const handleChartUnitChange = (event: React.MouseEvent<HTMLElement, MouseEvent>, newValue: string) => {\n      const mappedValue = newValue === '1H' ? ChartUnit.H1 : newValue === '1W' ? ChartUnit.W1 : ChartUnit.D1\n      setChartUnit(mappedValue)\n  }\n\n  // useCustomDCEffect(async () => {\n  //\n  //   if (!exchangeApi || !market || !tokens || !quote) {\n  //     return\n  //   }\n  //\n  //   let mounted = true\n  //\n  //   try {\n  //\n  //     const request: GetTickerRequest = {\n  //       market: market.market,\n  //     }\n  //\n  //     const ticker = await exchangeApi.getTicker(request)\n  //     if (mounted) {\n  //\n  //       if (ticker.tickList[0].change) {\n  //         setChange(ticker.tickList[0].change)\n  //       }\n  //\n  //       if (ticker.tickList[0].base_token_volume) {\n  //         const baseVol = fromWEI(tokens.tokenSymbolMap, base, ticker.tickList[0].base_token_volume) as string\n  //         setVolume(baseVol)\n  //       }\n  //     }\n  //   }\n  //   catch (reason) {\n  //     dumpError400(reason, 'ChartPanel getCandlestick')\n  //   }\n  //\n  //   return () => {\n  //     mounted = false\n  //   }\n  //\n  // }, [exchangeApi, market, tokens, base,])\n\n  const tgItemJSXsPriceChart: TGItemJSXInterface[] = Object.keys(ChartUnit).reduce((pre, item) => {\n    // @ts-ignore\n    const tGItemData: TGItemData = { value: ChartUnit[item], key: ChartUnit[item], label: 'label' + ChartUnit[item] };\n    pre.push({ value: tGItemData.value, tlabel: t(tGItemData.label ? tGItemData.label : tGItemData.key), key: tGItemData.key, JSX: <>{t(tGItemData.label ? tGItemData.label : tGItemData.key)}</> })\n    return pre\n  }, [] as TGItemJSXInterface[])\n\n  useCustomDCEffect(async () => {\n  \n    let mounted = true\n  \n    if (!LoopringAPI.exchangeAPI || !market || !amm) {\n      return\n    }\n  \n    if (chartType === ChartType.Trend) {\n      const request: GetCandlestickRequest = {\n        market: amm as string,\n        interval: TradingInterval.d1,\n        limit: 30\n      }\n  \n      try {\n        const candlesticks = await LoopringAPI.exchangeAPI.getCandlestick(request)\n  \n        if (mounted) {\n          const originData = candlesticks.candlesticks.map((item: Candlestick) => {\n            return {\n              timeStamp: item.timestamp,\n              low: item.low,\n              high: item.high,\n              open: item.open,\n              close: item.close,\n              volume: item.quoteVol,\n              change: (item.close - item.open) / item.open,\n              date: moment(item.timestamp).format('MMM DD')\n            }\n          })\n          setOriginData(originData)\n        }\n      }\n      catch (reason) {\n        dumpError400(reason, 'ChartPanel getCandlestick')\n      }\n  \n    } else {\n      const request: GetDepthRequest = {\n        market,\n      }\n  \n      try {\n  \n        const { depth } = await LoopringAPI.exchangeAPI.getMixDepth(request)\n        \n        if (mounted) {\n          const originData: IGetDepthDataParams = {\n            bidsPrices: depth.bids_prices,\n            bidsAmtTotals: depth.bids_amtTotals as any,\n            asksPrices: depth.asks_prices,\n            asksAmtTotals: depth.asks_amtTotals as any,\n          }\n          setOriginData(originData)\n        }\n  \n      } catch (reason) {\n        dumpError400(reason)\n      }\n  \n    }\n  \n    return () => {\n      mounted = false\n    }\n  \n  }, [LoopringAPI.exchangeAPI, amm, market, chartType])\n\n  return {\n    // change,\n    // volume,\n    chartUnit,\n    chartType,\n    tgItemJSXs,\n    tgItemJSXsPriceChart,\n    handleChange,\n    originData,\n    handleChartUnitChange,\n  }\n}","import { ChartUnit,UpColor } from '@loopring-web/common-resources'\nimport { ScaleAreaChart, ToggleButtonGroup, useSettings, TradeTitle, ChartType } from '@loopring-web/component-lib'\nimport { Box, Grid } from \"@material-ui/core\"\nimport { WithTranslation } from 'react-i18next'\nimport { useBasicInfo } from './hook'\nimport { VolToNumberWithPrecision } from 'utils/formatter_tool'\n\nconst BasicInfoPanel = ({ props, coinAInfo, coinBInfo, tradeFloat, marketArray, t, ...rest }: any & WithTranslation) => {\n\n    const {\n        // change,\n        chartType,\n        tgItemJSXs,\n        tgItemJSXsPriceChart,\n        handleChange,\n        originData,\n        chartUnit,\n        handleChartUnitChange,\n    } = useBasicInfo(props, coinAInfo, coinBInfo, marketArray, t)\n    const { upColor } = useSettings();\n    const baseToken = coinAInfo?.name\n    const quoteToken = coinBInfo?.name\n    const trendChartData = originData && !!originData.length ? originData.sort((a: any, b: any) => a.timeStamp - b.timeStamp) : []\n    const depthChartData = originData && coinAInfo && originData.asksAmtTotals ? { \n        ...originData,\n        asksAmtTotals: originData.asksAmtTotals.map((amt: string) => Number(VolToNumberWithPrecision(amt, baseToken))),\n        bidsAmtTotals: originData.bidsAmtTotals.map((amt: string) => Number(VolToNumberWithPrecision(amt, baseToken))),\n    } : []\n    return  <>\n        <Grid item >\n           <Box display={'flex'} flexDirection={'row'} justifyContent={'space-between'} >\n               <TradeTitle {...{\n                   coinAInfo, coinBInfo,\n                   ...rest, t, tradeFloat\n               }}></TradeTitle>\n               <ToggleButtonGroup exclusive {...{ ...rest, t, tgItemJSXs, value: chartType }}\n                                  handleChange={handleChange} />\n           </Box>  \n        </Grid>\n        <Grid item  position={'relative'}>\n            <Box minHeight={256} maxHeight={256} display={'block'} style={{ height: '100%', width: '100%' }}>\n                <ScaleAreaChart \n                    type={chartType} \n                    data={chartType === ChartType.Trend ? trendChartData : depthChartData} \n                    riseColor={upColor as keyof typeof UpColor}\n                    extraInfo={quoteToken}\n                    handleMove={() => {}}\n                    showXAxis\n                />\n            </Box>\n            {/* {chartType === ChartType.Trend && (\n                <Box height={24} display={'flex'} justifyContent={'flex-end'} position={'absolute'} right={0} bottom={0}>\n                    <ToggleButtonGroup exclusive {...{\n                        ...rest, t, tgItemJSXs: tgItemJSXsPriceChart,\n                        value: chartUnit, size: 'small'\n                    }}\n                        handleChange={handleChartUnitChange} />\n                </Box>\n            )} */}\n        </Grid> \n        {/* <Grid item xs={12} height={24} display={'flex'} justifyContent={'flex-end'}>\n            <ToggleButtonGroup exclusive {...{\n                ...rest, t, tgItemJSXs: tgItemJSXsPriceChart,\n                value: chartUnit, size: 'small'\n            }}\n                handleChange={handleChartUnitChange} />\n        </Grid> */}\n    </>\n\n};\n\nexport default BasicInfoPanel\n","\n\nimport { RefAttributes, useState, useCallback, useEffect } from 'react'\n\nimport Tabs from '@material-ui/core/Tabs'\nimport Tab from '@material-ui/core/Tab'\nimport Checkbox from '@material-ui/core/Checkbox'\nimport styled from '@emotion/styled'\n\nimport { FormControlLabel, TradeTable, } from '@loopring-web/component-lib'\nimport { withTranslation, WithTranslation } from 'react-i18next';\nimport { CheckBoxIcon, CheckedIcon } from '@loopring-web/common-resources'\nimport { RouteComponentProps, withRouter } from 'react-router'\nimport { RawDataTradeItem, BasicHeaderItem, HeadMenuType } from '@loopring-web/component-lib'\nimport { TableWrapStyled } from '../../../styled';\nimport { Divider } from '@material-ui/core'\n\n\nconst applyProps = (index: number) => {\n    return {\n        id: `simple-tab-${index}`,\n        'aria-controls': `simple-tabpanel-${index}`,\n    }\n}\nconst WrapperStyled = styled.div`\n            position: relative;\n            width: 100%;\n            margin-top: ${({theme}) => theme.unit * 4}px;\n            background-color: var(--color-box);\n            box-shadow: var(--shadow);\n            border-radius: ${({theme}) => theme.unit}px;\n        `\n\nconst TabsStyled = styled(Tabs)`\n    margin-left: ${({theme}) => theme.unit}px;\n`\n\n// const StyledFormControlLabel = styled(FormControlLabel)`\n//             position: absolute;\n//             top: 0;\n//             right: ${({theme}) => theme.unit}px;\n//             margin: ${({theme}) => theme.unit}px 0 0 0;\n//         `\n\nconst TradePanel = withTranslation('common')(\n   // withRouter(\n    (\n        {tradeArray,  myTradeArray, t}:\n            { tradeArray: RawDataTradeItem[], myTradeArray: RawDataTradeItem[] } & WithTranslation & RouteComponentProps) => {\n        // const [isAllTrade, setIsAllTrade] = useState(false)\n        const [value, setValue] = useState(1)\n        const [tableHeight, setTableHeight] = useState(0);\n        const handleChange = (event: any, newValue: any) => {\n            setValue(newValue)\n        }\n\n        const getCurrentHeight = useCallback(() => {\n            const height = window.innerHeight\n            const tableHeight = height - 64 - 117 - 56 - 120 - 20 - 100 - 50 - 15;\n            setTableHeight(tableHeight)\n        }, [])\n        \n        useEffect(() => {\n            getCurrentHeight()\n            window.addEventListener('resize', getCurrentHeight)\n            return () => {\n                window.removeEventListener('resize', getCurrentHeight)\n            }\n        }, [getCurrentHeight]);\n\n        return (   <TableWrapStyled item alignSelf={'stretch'} xs={12} marginY={2}  paddingBottom={2}/* paddingBottom={2} */ flex={1}>\n                <TabsStyled value={value}\n                            onChange={handleChange}\n                            aria-label=\"tabs switch\">\n                    <Tab label={t('labelMyTrade')} {...applyProps(0)} />\n                    <Tab label={t('labelRecent')}   {...applyProps(1)} />\n                </TabsStyled>\n                <Divider />\n                <TradeTable rawData={value === 0 ? myTradeArray : tradeArray} currentHeight={tableHeight} />\n            </TableWrapStyled>\n        )\n    }\n    ) as  (props: { tradeArray: RawDataTradeItem[], myTradeArray: RawDataTradeItem[] }) => JSX.Element;\n//)\n\nexport default TradePanel\n\n","import { TxStatus } from \"loopring-sdk\";\nimport { myLog } from \"utils/log_tools\"\nimport { Account } from \"@loopring-web/common-resources\";\n\nexport enum CONSTANTS {\n    Handler = 'handler',\n    AccountId = 'account_id',\n    Account = 'account',\n    Apikey = 'apikey',\n    Eddsakey = 'eddsakey',\n    ActiveTime = 'active_time',\n    AmmOrder = 'amm_order',\n    HardwareAddresses = 'hardware_addresses',\n    ConnectorName = 'connector_name',\n\n    DepositHash = '__loopring__.depositsHash',\n\n    WalletConnect = 'walletconnect',\n}\n\nconst SESSION_TIMEOUT_SECONDS = 600\n\nexport class UserStorage {\n\n    public static getLocalDepositHash(account: Account): { [key: string]: any } | undefined {\n        let depositsHash = window.localStorage.getItem(CONSTANTS.DepositHash);\n        if (depositsHash) {\n            depositsHash = JSON.parse(depositsHash);\n            if (depositsHash && account.accAddress && depositsHash[account.accAddress]) {\n                return depositsHash[account.accAddress]\n            }\n        }\n        return undefined\n    }\n\n    public static clearDepositHash(account: Account, value: string) {\n        // @ts-ignore\n        let depositsHash: { [key: string]: object } = window.localStorage.getItem(CONSTANTS.DepositHash);\n        depositsHash = depositsHash ? JSON.parse(depositsHash as any) : {};\n        if (depositsHash[account.accAddress] && depositsHash[account.accAddress][value]) {\n            delete depositsHash[account.accAddress][value];\n        }\n    }\n\n    public static setLocalDepositHash(account: Account, value: string, status: TxStatus): void {\n        // @ts-ignore\n        let depositsHash: { [key: string]: object } = window.localStorage.getItem(CONSTANTS.DepositHash);\n        depositsHash = depositsHash ? JSON.parse(depositsHash as any) : {};\n        depositsHash[account.accAddress] = {\n            ...depositsHash[account.accAddress],\n            [value]: status,\n        }\n    }\n\n    public static clearWalletConnect() {\n        myLog('try to clearWalletConnect....')\n        localStorage.removeItem(CONSTANTS.WalletConnect)\n    }\n\n    public static setConnectorName(connectionName: string) {\n        localStorage.setItem(CONSTANTS.ConnectorName, connectionName)\n    }\n\n    public static getConnectorName() {\n        return localStorage.getItem(CONSTANTS.ConnectorName)\n    }\n\n    public static clearConnectorName() {\n        myLog('try to clearConnectorName')\n        localStorage.removeItem(CONSTANTS.ConnectorName)\n    }\n\n    public static getHandler() {\n        const rawHandler = sessionStorage.getItem(CONSTANTS.Handler)\n        try {\n            if (rawHandler !== undefined && rawHandler !== null)\n                return parseInt(rawHandler)\n        } catch (err) {\n        }\n        return undefined\n    }\n\n    public static setHandler(handler: any) {\n        sessionStorage.setItem(CONSTANTS.Handler, handler)\n    }\n\n    public static clearHandler() {\n        sessionStorage.removeItem(CONSTANTS.Handler)\n    }\n\n    public static checkTimeout(reset: boolean = false): boolean {\n        let dateTimeStr = localStorage.getItem(CONSTANTS.ActiveTime)\n        let now = new Date().getTime()\n\n        if (dateTimeStr !== null && !reset) {\n            let tmpDt = new Date(parseInt(dateTimeStr))\n\n            if (now - tmpDt.getTime() > SESSION_TIMEOUT_SECONDS * 1000) {\n                myLog(`TIMEOUT! now:${now} dateTimeStr:${dateTimeStr} delta:${now - tmpDt.getTime()}`)\n                sessionStorage.clear()\n                localStorage.setItem(CONSTANTS.ActiveTime, now.toString())\n                return true\n            }\n        } else {\n            localStorage.setItem(CONSTANTS.ActiveTime, now.toString())\n        }\n\n        return false\n    }\n\n\n    public static getAccountId() {\n        const rawId = sessionStorage.getItem(CONSTANTS.AccountId)\n        try {\n            if (rawId)\n                return parseInt(rawId)\n        } catch (err) {\n        }\n        return undefined\n    }\n\n    public static setAccountId(accountId: number) {\n        sessionStorage.setItem(CONSTANTS.AccountId, accountId.toString())\n    }\n\n    public static getAccount() {\n        return sessionStorage.getItem(CONSTANTS.Account)\n    }\n\n    public static setAccount(account: string) {\n        sessionStorage.setItem(CONSTANTS.Account, account)\n    }\n\n    public static getApikey() {\n        return sessionStorage.getItem(CONSTANTS.Apikey)\n    }\n\n    public static setApikey(apikey: string) {\n        sessionStorage.setItem(CONSTANTS.Apikey, apikey)\n    }\n\n    public static getEddsakey() {\n        return sessionStorage.getItem(CONSTANTS.Eddsakey)\n    }\n\n    public static setEddsakey(eddsakey: string) {\n        sessionStorage.setItem(CONSTANTS.Eddsakey, eddsakey)\n    }\n\n    public static getAmmOrder(): string {\n        var orderHash = localStorage.getItem(CONSTANTS.AmmOrder)\n        return orderHash ? orderHash : ''\n    }\n\n    public static setAmmOrder(orderHash: string) {\n        localStorage.setItem(CONSTANTS.AmmOrder, orderHash)\n    }\n\n    public static clearAmmOrder() {\n        localStorage.removeItem(CONSTANTS.AmmOrder)\n    }\n\n    public static isHardwareAddress(address: string) {\n        let current = localStorage.getItem(CONSTANTS.HardwareAddresses)\n        if (current) {\n            if (current.includes(address.toLowerCase())) {\n                return true\n            }\n        }\n        return false\n    }\n\n    public static saveHardwareAddress(address: string) {\n        let current = localStorage.getItem(CONSTANTS.HardwareAddresses);\n        if (current) {\n            if (current.includes(address.toLowerCase()) !== true) {\n                let newValue = current + ',' + address.toLowerCase();\n                localStorage.setItem(CONSTANTS.HardwareAddresses, newValue);\n            }\n        } else {\n            localStorage.setItem(CONSTANTS.HardwareAddresses, address.toLowerCase());\n        }\n\n    }\n}\n","import {\n    AccountStatus,\n    CustomError,\n    ErrorMap,\n    fnType,\n    globalSetup,\n    IBData,\n    SagaStatus,\n    TradeCalcData,\n    TradeFloat,\n    WalletMap\n} from '@loopring-web/common-resources';\nimport React, { useCallback, useEffect, useState } from 'react';\nimport { LoopringAPI } from '../../stores/apis/api';\nimport { useTokenMap } from '../../stores/token';\nimport * as sdk from 'loopring-sdk';\nimport {\n    AmmPoolInfoV3,\n    AmmPoolSnapshot,\n    DepthData,\n    dumpError400,\n    getExistedMarket,\n    GetMinimumTokenAmtRequest,\n    GetNextStorageIdRequest,\n    LoopringMap,\n    OrderType,\n    SubmitOrderRequestV3,\n    VALID_UNTIL\n} from 'loopring-sdk';\nimport { useAmmMap } from '../../stores/Amm/AmmMap';\nimport { useWalletLayer2 } from '../../stores/walletLayer2';\nimport { RawDataTradeItem, SwapData, SwapTradeData, SwapType, TradeBtnStatus } from '@loopring-web/component-lib';\nimport { useAccount } from '../../stores/account/hook';\nimport { useCustomDCEffect } from '../../hooks/common/useCustomDCEffect';\nimport {\n    accountStaticCallBack,\n    btnLabel,\n    btnClickMap,\n    coinPairInit,\n    getUserTrades,\n    makeCache,\n    makeMarketArray,\n    makeTickView,\n    makeWalletLayer2,\n    pairDetailBlock,\n    pairDetailDone\n} from '../../hooks/help';\nimport * as _ from 'lodash'\nimport store from 'stores';\nimport { deepClone } from '../../utils/obj_tools';\nimport { myLog } from 'utils/log_tools';\nimport { useTranslation } from 'react-i18next';\nimport { REFRESH_RATE_SLOW } from 'defs/common_defs';\nimport { usePairMatch } from 'hooks/usePairMatch';\n\nexport const useSwapBtnStatusCheck = () => {\n\n    const [btnStatus, setBtnStatus] = useState(TradeBtnStatus.DISABLED)\n\n    const [isSwapLoading, setIsSwapLoading] = useState(false)\n\n    const [isValidAmt, setIsValidAmt] = useState<boolean>(false)\n\n    const { account } = useAccount()\n\n    useEffect(() => {\n\n        if (account.readyState !== AccountStatus.ACTIVATED) {\n            setBtnStatus(TradeBtnStatus.DISABLED)\n        } else {\n\n            if (isSwapLoading) {\n                setBtnStatus(TradeBtnStatus.LOADING)\n            } else {\n                if (isValidAmt) {\n                    setBtnStatus(TradeBtnStatus.AVAILABLE)\n                } else {\n                    setBtnStatus(TradeBtnStatus.DISABLED)\n                }\n            }\n\n        }\n\n    }, [isSwapLoading, isValidAmt, account.readyState])\n\n    return {\n        btnStatus,\n        setIsSwapLoading,\n        setIsValidAmt,\n    }\n\n}\n\nexport const useSwapPage = <C extends { [key: string]: any }>() => {\n    /*** api prepare ***/\n    const { t } = useTranslation('common')\n\n    const [swapToastOpen, setSwapToastOpen] = useState<boolean>(false)\n\n    const [swapAlertText, setSwapAlertText] = useState<string>()\n    const wait = globalSetup.wait;\n    const { coinMap, tokenMap, marketArray, marketCoins, marketMap, } = useTokenMap()\n    const { ammMap } = useAmmMap();\n\n    const { account, status: accountStatus } = useAccount()\n    const { delayAndUpdateWalletLayer2, walletLayer2, status: walletLayer2Status } = useWalletLayer2();\n\n    // const walletLayer2State = useWalletLayer2()\n    const [tradeData, setTradeData] = React.useState<SwapTradeData<IBData<C>> | undefined>(undefined);\n    const [tradeCalcData, setTradeCalcData] = React.useState<Partial<TradeCalcData<C>>>({});\n    const [tradeArray, setTradeArray] = React.useState<RawDataTradeItem[]>([]);\n    const [myTradeArray, setMyTradeArray] = React.useState<RawDataTradeItem[]>([]);\n    const [tradeFloat, setTradeFloat] = React.useState<TradeFloat | undefined>(undefined);\n    \n    \n    const { pair, setPair, market, } = usePairMatch('/trading/lite')\n\n    //HIGH: get Router info\n    // const symbol = match?.params.symbol ?? undefined;\n    useCustomDCEffect(() => {\n        if (!market) {\n            return\n        }\n        resetSwap(market, undefined, undefined, undefined);\n        // resetSwap(`${pair.coinAInfo}-${pair.coinBInfo}`, undefined, undefined, undefined);\n    }, [market]);\n\n    const [ammPoolSnapshot, setAmmPoolSnapshot] = React.useState<AmmPoolSnapshot | undefined>(undefined);\n\n    const [swapBtnI18nKey, setSwapBtnI18nKey] = React.useState<string | undefined>(undefined);\n\n    const [output, setOutput] = useState<any>()\n\n    const [takerRate, setTakerRate] = useState<string>('0')\n\n    const [feeBips, setFeeBips] = useState<string>('0')\n\n    const [baseMinAmt, setBaseMinAmt] = useState<string>()\n\n    const [quoteMinAmt, setQuoteMinAmt] = useState<string>()\n\n    // --- btn status check\n    const {\n        btnStatus,\n        setIsSwapLoading,\n        setIsValidAmt,\n    } = useSwapBtnStatusCheck()\n    // --- end of btn status check.\n\n    useCustomDCEffect(async () => {\n\n        const base = tradeData?.sell.belong\n        const quote = tradeData?.buy.belong\n\n        if (!LoopringAPI.userAPI || !base || !quote || !ammMap || !marketArray\n            || account.readyState !== AccountStatus.ACTIVATED || !account.accountId || !account.apiKey) {\n            return\n        }\n\n        const {\n            amm\n        } = getExistedMarket(marketArray, base, quote)\n\n        if (!amm) {\n            return\n        }\n\n        const ammInfo = ammMap[amm]\n\n        if (!ammInfo) {\n            return\n        }\n\n        const feeBips = ammInfo.__rawConfig__.feeBips\n\n        const req: GetMinimumTokenAmtRequest = {\n            accountId: account?.accountId,\n            market: amm,\n        }\n\n        const { amountMap } = await LoopringAPI.userAPI.getMinimumTokenAmt(req, account.apiKey)\n\n        const baseMinAmtInfo = amountMap[base]\n        const quoteMinAmtInfo = amountMap[quote]\n\n        if (!baseMinAmtInfo || !quoteMinAmtInfo) {\n            return\n        }\n\n        const takerRate = quoteMinAmtInfo.userOrderInfo.takerRate\n\n        const totalFee = sdk.toBig(feeBips).plus(sdk.toBig(takerRate)).toString()\n\n        setBaseMinAmt(baseMinAmtInfo.userOrderInfo.minAmount)\n        setQuoteMinAmt(quoteMinAmtInfo.userOrderInfo.minAmount)\n\n        myLog('---------------------------- amountMap:', amountMap)\n\n        myLog('totalFee:', totalFee)\n        myLog('takerRate:', takerRate)\n\n        setFeeBips(totalFee)\n        setTakerRate(takerRate.toString())\n\n        setTradeCalcData({ ...tradeCalcData, fee: totalFee } as TradeCalcData<C>)\n\n    }, [tradeData?.sell.belong, tradeData?.buy.belong, marketArray, ammMap,\n    account.readyState, account.apiKey, account.accountId])\n\n    //HIGH: effect by wallet state update\n    React.useEffect(() => {\n        if (walletLayer2Status === SagaStatus.UNSET) {\n            const { walletMap } = makeWalletLayer2();\n            // if (tradeCalcData) {\n            setTradeCalcData({ ...tradeCalcData, fee: feeBips, walletMap } as TradeCalcData<C>);\n            setTradeData({\n                sell: {\n                    belong: tradeCalcData.sellCoinInfoMap ? tradeCalcData.sellCoinInfoMap[tradeCalcData.coinSell]?.simpleName : undefined,\n                    balance: walletMap ? walletMap[tradeCalcData.coinSell as string]?.count : 0\n                },\n                // @ts-ignore\n                buy: {\n                    belong: tradeCalcData.sellCoinInfoMap ? tradeCalcData.sellCoinInfoMap[tradeCalcData.coinBuy]?.simpleName : undefined,\n                    balance: walletMap ? walletMap[tradeCalcData.coinBuy as string]?.count : 0\n                },\n            } as SwapTradeData<IBData<C>>)\n            const {\n                market\n            } = getExistedMarket(marketArray, tradeCalcData.coinSell as string, tradeCalcData.coinBuy as string);\n            getUserTrades(market).then((marketTrades) => {\n                let _myTradeArray = makeMarketArray(market, marketTrades) as RawDataTradeItem[]\n                setMyTradeArray(_myTradeArray ? _myTradeArray : [])\n            })\n            // }\n        }\n    }, [walletLayer2Status])\n\n    React.useEffect(() => {\n        const label: string | undefined = accountStaticCallBack(btnLabel)\n        setSwapBtnI18nKey(label);\n    }, [accountStatus]);\n\n    const swapCalculatorCallback = useCallback(async ({ sell, buy, slippage, ...rest }: any) => {\n\n        const { exchangeInfo } = store.getState().system\n        setIsSwapLoading(true);\n        if (!LoopringAPI.userAPI || !tokenMap || !exchangeInfo || !output\n            || account.readyState !== AccountStatus.ACTIVATED) {\n\n            setSwapAlertText(t('labelSwapFailed'))\n            setSwapToastOpen(true)\n            setIsSwapLoading(false)\n\n            return\n        }\n\n        const baseToken = tokenMap[sell.belong as string]\n        const quoteToken = tokenMap[buy.belong as string]\n\n        const request: GetNextStorageIdRequest = {\n            accountId: account.accountId,\n            sellTokenId: baseToken.tokenId\n        }\n\n        const storageId = await LoopringAPI.userAPI.getNextStorageId(request, account.apiKey)\n\n        try {\n\n            const request: SubmitOrderRequestV3 = {\n                exchange: exchangeInfo.exchangeAddress,\n                accountId: account.accountId,\n                storageId: storageId.orderId,\n                sellToken: {\n                    tokenId: baseToken.tokenId,\n                    volume: output.amountS\n                },\n                buyToken: {\n                    tokenId: quoteToken.tokenId,\n                    volume: output.amountBOutSlip.minReceived\n                },\n                allOrNone: false,\n                validUntil: VALID_UNTIL,\n                maxFeeBips: parseInt(feeBips),\n                fillAmountBOrS: false, // amm only false\n                orderType: OrderType.ClassAmm,\n                eddsaSignature: '',\n            }\n\n            myLog(request)\n\n            const response = await LoopringAPI.userAPI.submitOrder(request, account.eddsaKey.sk, account.apiKey)\n\n            myLog(response)\n\n            await delayAndUpdateWalletLayer2()\n\n            setTradeData({\n                ...tradeData,\n                ...{\n                    sell: { ...tradeData?.sell, tradeValue: 0 },\n                    buy: { ...tradeData?.buy, tradeValue: 0 },\n                }\n            } as SwapTradeData<IBData<C>>)\n\n            setSwapAlertText(t('labelSwapSuccess'))\n            setSwapToastOpen(true)\n\n            setIsSwapLoading(false)\n\n        } catch (reason) {\n            setIsSwapLoading(false);\n            dumpError400(reason)\n\n            setSwapAlertText(t('labelSwapFailed'))\n            setSwapToastOpen(true)\n\n            setIsSwapLoading(false)\n        }\n\n        setOutput(undefined)\n\n        if (rest.__cache__) {\n            makeCache(rest.__cache__)\n        }\n\n    }, [tradeData, output, tokenMap])\n\n    const swapBtnClickArray: typeof btnClickMap = Object.assign(deepClone(btnClickMap), {\n        [fnType.ACTIVATED]: [swapCalculatorCallback]\n    })\n\n    const onSwapClick = React.useCallback(({ sell, buy, slippage, ...rest }: SwapTradeData<IBData<C>>) => {\n        accountStaticCallBack(swapBtnClickArray, [{ sell, buy, slippage, ...rest }])\n    }, [swapBtnClickArray])\n\n    const handleSwapPanelEvent = async (swapData: SwapData<SwapTradeData<IBData<C>>>, switchType: any): Promise<void> => {\n\n        const { tradeData } = swapData\n        return new Promise((resolve) => {\n            switch (switchType) {\n                case SwapType.SEll_CLICK:\n                    break\n                case SwapType.BUY_CLICK:\n                    break\n                case SwapType.SELL_SELECTED:\n                    resetSwap(`${tradeData.sell.belong}-${tradeData.buy.belong}`, 'sell', tradeData, ammPoolSnapshot)\n                    break\n                case SwapType.BUY_SELECTED:\n                    resetSwap(`${tradeData.sell.belong}-${tradeData.buy.belong}`, 'buy', tradeData, ammPoolSnapshot)\n                    break\n                case SwapType.EXCHANGE_CLICK:\n                    resetSwap(`${tradeData.sell.belong}-${tradeData.buy.belong}`, undefined, undefined, ammPoolSnapshot)\n                    break\n                default:\n                    break\n            }\n\n            resolve(undefined)\n        })\n\n    }\n\n    const [depth, setDepth] = useState<DepthData>()\n\n    useEffect(() => {\n\n        const updateDepth = async () => {\n            if (!pair || !LoopringAPI.exchangeAPI || !pair.coinAInfo) {\n                return\n            }\n            const market = `${pair.coinAInfo?.simpleName}-${pair.coinBInfo?.simpleName}`\n            const { depth } = await LoopringAPI.exchangeAPI?.getMixDepth({ market })\n            setDepth(depth)\n        }\n\n        updateDepth()\n\n        const handler = setInterval(() => {\n            updateDepth()\n        }, REFRESH_RATE_SLOW)\n\n        return () => {\n            if (handler) {\n                clearInterval(handler)\n            }\n        }\n    }, [pair])\n\n    const calculateTradeData = async (type: 'sell' | 'buy', _tradeData: SwapTradeData<IBData<C>>, ammPoolSnapshot: AmmPoolSnapshot | undefined)\n        : Promise<{ _tradeCalcData: TradeCalcData<C>, _tradeData: SwapTradeData<IBData<C>> }> => {\n\n        const market = `${pair.coinAInfo?.simpleName}-${pair.coinBInfo?.simpleName}`\n        if (!marketArray || !tokenMap || !marketMap || !depth || !ammMap || !tradeCalcData) {\n            let _tradeCalcData = { ...tradeCalcData } as TradeCalcData<C>\n            return { _tradeData, _tradeCalcData }\n        }\n\n        const isAtoB = type === 'sell'\n        let input: any = (isAtoB ? _tradeData.sell.tradeValue : _tradeData.buy.tradeValue)\n\n        if (input) {\n            input = (input.toString() as string).trim()\n            if (input === '0.') {\n                input = '0'\n            }\n        } else {\n            input = '0'\n        }\n\n        const base = _tradeData.sell.belong as string\n        const quote = _tradeData.buy.belong as string\n\n        let slippage = _tradeData.slippage\n\n        if (slippage === undefined) {\n            slippage = 0.5\n        }\n\n        slippage = sdk.toBig(slippage).times(100).toString()\n\n        const ammMapRaw = { ['AMM-' + market]: ammMap['AMM-' + market].__rawConfig__ } as LoopringMap<AmmPoolInfoV3>\n\n        myLog(input)\n\n        const output = sdk.getOutputAmount(input, base, quote, isAtoB, marketArray, tokenMap,\n            marketMap, depth, ammMapRaw, ammPoolSnapshot, takerRate, slippage)\n\n        setOutput(output)\n\n        tradeCalcData.priceImpact = output?.priceImpact as string\n        tradeCalcData.minimumReceived = output?.amountBOutSlip.minReceivedVal as string\n\n        if (isAtoB) {\n            _tradeData.buy.tradeValue = output?.output ? parseFloat(output?.output) : 0\n        } else {\n            _tradeData.sell.tradeValue = output?.output ? parseFloat(output?.output) : 0\n        }\n\n        //TODO: renew  tradeCalcData\n        let _tradeCalcData = { ...tradeCalcData } as TradeCalcData<C>;\n\n        return { _tradeData, _tradeCalcData }\n\n    }\n\n    // check output and min order amt\n    useCustomDCEffect(() => {\n\n        const validAmt = (output?.amountBOut && quoteMinAmt\n            && sdk.toBig(output?.amountBOut).gte(sdk.toBig(quoteMinAmt))) ? true : false\n\n        setIsValidAmt(validAmt)\n\n        myLog(output, quoteMinAmt)\n\n        myLog('.........validAmt:', validAmt)\n\n    }, [output, quoteMinAmt])\n\n    const throttleSetValue = React.useCallback(_.debounce(async (type, _tradeData, _ammPoolSnapshot) => {\n\n        const { _tradeData: td, _tradeCalcData } = await calculateTradeData(type, _tradeData, _ammPoolSnapshot)//.then(()=>{\n        setTradeData(td)\n        setTradeCalcData({ ..._tradeCalcData, fee: feeBips })\n\n    }, wait * 2), [setTradeData, setTradeCalcData, calculateTradeData, takerRate]);\n\n    const resetSwap = (coinKey: any, type: 'sell' | 'buy' | undefined, _tradeData: SwapTradeData<IBData<C>> | undefined, _ammPoolSnapshot: AmmPoolSnapshot | undefined) => {\n        \n        if (tradeCalcData\n            && coinKey === `${tradeCalcData.coinSell}-${tradeCalcData.coinBuy}`\n            && _tradeData\n            && type\n            && (!tradeData || (tradeData[type].tradeValue !== _tradeData[type].tradeValue))) {\n\n            throttleSetValue(type, _tradeData, _ammPoolSnapshot)\n\n        } else {\n            let _tradeFloat: Partial<TradeFloat> = {}\n            let _tradeArray: Array<Partial<RawDataTradeItem>> | undefined = undefined;\n            let _tradeCalcData: Partial<TradeCalcData<C>> = coinPairInit({\n                coinKey,\n                _tradeCalcData: {coinSell: pair?.coinAInfo, coinBuy: pair?.coinBInfo },\n                tokenMap,\n                coinMap\n            })\n            let {\n                amm,\n                market\n            } = getExistedMarket(marketArray, _tradeCalcData.coinSell as string, _tradeCalcData.coinBuy as string);\n            const [, coinA, coinB] = market.match(/(\\w+)-(\\w+)/i)\n\n            setTradeCalcData({ ...tradeCalcData, fee: feeBips, ..._tradeCalcData } as TradeCalcData<C>);\n            if (coinMap) {\n                setPair({\n                    coinAInfo: coinMap[coinA],\n                    coinBInfo: coinMap[coinB],\n                })\n            }\n\n            if (walletLayer2) {\n                const { walletMap } = makeWalletLayer2();\n                _tradeCalcData.walletMap = walletMap as WalletMap<any>;\n                getUserTrades(market).then((marketTrades) => {\n                    let _myTradeArray = makeMarketArray(market, marketTrades) as RawDataTradeItem[]\n                    setMyTradeArray(_myTradeArray ? _myTradeArray : [])\n                })\n            }\n            let apiList = [];\n            //TODO wallet saga done\n            if (marketArray && amm && market && ammMap) {\n                // let pairPromise =  usePairTitleBlock({market})\n                apiList = [\n                    LoopringAPI.exchangeAPI?.getMarketTrades({ market }),\n                    pairDetailBlock({ coinKey: market, ammKey: amm, ammMap })\n                ];\n                //HiGH: this need add websocket to update infr ticker ammpoolsbalace\n                // @ts-ignore\n                Promise.all([...apiList]).then(\n                    ([{ marketTrades }, { ammPoolsBalance, tickMap }]: any[]) => {\n                        setAmmPoolSnapshot(ammPoolsBalance)\n                        if (tokenMap) {\n                            let { _tradeCalcData: _td } = pairDetailDone({\n                                coinKey: `${_tradeCalcData.coinSell}-${_tradeCalcData.coinBuy}`,\n                                market,\n                                ammPoolsBalance,\n                                tickerData: tickMap[market] ? tickMap[market] : {},\n                                tokenMap,\n                                _tradeCalcData,\n                                coinMap,\n                                marketCoins,\n                                fee: feeBips,\n                            })\n                            _tradeCalcData = _td;\n                            _tradeFloat = makeTickView(tickMap[market] ? tickMap[market] : {})\n                            _tradeArray = makeMarketArray(market, marketTrades)\n                            // @ts-ignore\n                            setTradeCalcData(_tradeCalcData as TradeCalcData<C>);\n                            // @ts-ignore\n                            setTradeFloat(_tradeFloat);\n                            setTradeArray(_tradeArray as RawDataTradeItem[])\n                            setTradeData({\n                                sell: {\n                                    belong: _tradeCalcData.sellCoinInfoMap ? _tradeCalcData.sellCoinInfoMap[_tradeCalcData.coinSell]?.simpleName : undefined,\n                                    balance: _tradeCalcData.walletMap ? _tradeCalcData.walletMap[_tradeCalcData.coinSell]?.count : 0\n                                },\n                                // @ts-ignore\n                                buy: {\n                                    belong: _tradeCalcData.sellCoinInfoMap ? _tradeCalcData.sellCoinInfoMap[_tradeCalcData.coinBuy]?.simpleName : undefined,\n                                    balance: _tradeCalcData.walletMap ? _tradeCalcData.walletMap[_tradeCalcData.coinBuy]?.count : 0\n                                },\n                            } as SwapTradeData<IBData<C>>)\n                        }\n                    }).catch((error) => {\n                        // throw new CustomError({ ...ErrorMap.TRADE_LITE_SET_PAIR_ERROR, options: error })\n                        //TODO solve error\n                    })\n\n            }\n        }\n\n    }\n\n    return {\n        swapToastOpen,\n        setSwapToastOpen,\n        swapAlertText,\n\n        tradeCalcData,\n        tradeFloat,\n        tradeArray,\n        myTradeArray,\n        btnStatus,\n        tradeData,\n        pair,\n        marketArray,\n        onSwapClick,\n        swapBtnI18nKey,\n        handleSwapPanelEvent\n    }\n\n}","import { useEffect, useState } from \"react\"\nimport { useRouteMatch } from \"react-router-dom\"\nimport { useTokenMap } from \"stores/token\"\nimport { CoinInfo } from \"@loopring-web/common-resources\"\n\nexport function usePairMatch<C extends { [key: string]: any }>(path: string) {\n    const { coinMap } = useTokenMap()\n    const match: any = useRouteMatch(`${path}/:market`)\n\n    const [pair, setPair] = useState<{ coinAInfo: CoinInfo<C> | undefined, coinBInfo: CoinInfo<C> | undefined }>({ coinAInfo: undefined, coinBInfo: undefined})\n    const [market, setMarket] = useState('')\n    \n    useEffect(() => {\n\n        if (!coinMap) {\n            return\n        }\n\n        let market = match?.params?.market ?? 'LRC-ETH'\n\n        const [, coinA, coinB] = market.match(/(\\w+)-(\\w+)/i)\n\n        const coinAInfo = coinMap[coinA]\n        const coinBInfo = coinMap[coinB]\n\n        setPair({ coinAInfo, coinBInfo, })\n        setMarket(market)\n    }, [])\n\n    return {\n        market,\n        pair,\n        setPair,\n    }\n}\n","export function coinPairInit({coinKey, _tradeCalcData, tokenMap, coinMap}: any) {\n    if (coinKey) {\n        const [_match, sell, buy] = coinKey.match(/(\\w+)-(\\w+)/i);\n        // @ts-ignore\n        if (sell && coinMap && coinMap[ sell ]) {\n            _tradeCalcData.coinSell = sell;\n        }// @ts-ignore\n        if (sell!==buy && buy && -1 !== tokenMap[ sell ].tradePairs.findIndex(ele => ele === buy)) {\n            _tradeCalcData.coinBuy = buy;\n            return _tradeCalcData\n        }\n        // else{\n        //     _tradeCalcData.coinBuy = tokenMap[ sell ].tradePairs[ 0 ];\n        // }\n    }\n    if (!_tradeCalcData.coinSell || _tradeCalcData.coinSell === '') {\n        _tradeCalcData.coinSell = 'LRC';\n        _tradeCalcData.coinBuy = 'ETH';\n        return _tradeCalcData\n    }\n    if (!_tradeCalcData.coinBuy || _tradeCalcData.coinBuy === '' || _tradeCalcData.coinBuy === 'undefined') {\n        // @ts-ignore\n        if (tokenMap && tokenMap[ _tradeCalcData.coinSell ].tradePairs) {\n            _tradeCalcData.coinBuy = tokenMap[ _tradeCalcData.coinSell ].tradePairs[ 0 ]\n        } else {\n            _tradeCalcData.coinSell = 'LRC';\n            _tradeCalcData.coinBuy = 'ETH';\n        }\n    }\n    return _tradeCalcData\n}","import { Box, Grid, } from '@material-ui/core'\nimport { WithTranslation, withTranslation } from 'react-i18next'\nimport { useLocation } from 'react-router-dom'\nimport BasicInfoPanel from './panel/BasicInfoPanel'\nimport TradePanel from './panel/TradePanel'\nimport styled from 'styled-components'\nimport { useSwapPage } from './hook';\nimport { SwapPanel, Toast } from '@loopring-web/component-lib'\nimport { TradeBtnStatus } from '@loopring-web/component-lib'\nimport { useTokenMap } from '../../stores/token';\nimport { TOAST_TIME } from 'defs/common_defs'\n\nconst FixedStyle = styled(Box)`\n  @media only screen and (min-height: 780px ) and (min-width: 1024px) {\n    position: fixed;\n  }\n`\n\nexport const SwapPage = withTranslation('common')(({...rest}: WithTranslation) => {\n\n    const {\n        tradeCalcData,\n        tradeData,\n        tradeFloat,\n        tradeArray,\n        myTradeArray,\n        marketArray,\n        handleSwapPanelEvent,\n        onSwapClick,\n        pair,\n        swapBtnI18nKey,\n        btnStatus,\n        swapToastOpen,\n        setSwapToastOpen,\n        swapAlertText,\n\n    } = useSwapPage();\n\n    const { coinMap } = useTokenMap()\n    const { pathname } = useLocation()\n    const pairNameList = pathname ? pathname.split('/')[pathname.split('/').length - 1].split('-') : ''\n    const coinA = Array.isArray(pairNameList) ? pairNameList[0] : ''\n    const coinB = Array.isArray(pairNameList) ? pairNameList[1] : ''\n    const customPair = {\n        coinAInfo: coinMap ? coinMap[coinA] : '',\n        coinBInfo: coinMap ? coinMap[coinB] : '',\n    }\n    const renderPair = customPair.coinAInfo ? customPair : pair\n\n    return <>\n\n        <Toast alertText={swapAlertText as string} open={swapToastOpen} \n            autoHideDuration={TOAST_TIME} setOpen={setSwapToastOpen}/>\n\n        <Grid container marginRight={3} alignContent={'stretch'} direction={'column'} flexWrap={'nowrap'}>\n            <BasicInfoPanel {...{\n                ...rest,\n                ...renderPair, marketArray,\n                tradeFloat, tradeArray\n            }} />\n            <TradePanel tradeArray={tradeArray} myTradeArray={myTradeArray}/>\n        </Grid>\n\n        <Box display={'flex'} style={{minWidth: 'var(--swap-box-width)'}}>\n            <FixedStyle>\n                <SwapPanel tradeData={tradeData as any}\n                           tradeCalcData={tradeCalcData as any}\n                           onSwapClick={onSwapClick}\n                           swapBtnI18nKey={swapBtnI18nKey}\n                           swapBtnStatus={btnStatus}\n                    // handleError={}\n                           {...{handleSwapPanelEvent, ...rest}}\n                />\n            </FixedStyle>\n\n        </Box>\n\n    </>\n});\n\n\n// SwapPage\n","import React from 'react'\n\nexport const DevWrapper = ({ children }: { children: React.ReactNode }) => {\n\n  return (\n    <React.Fragment>\n      {\n        process.env.NODE_ENV !== 'production' ? (\n          <>\n          {children}\n          </>\n        ) : null\n      }\n    </React.Fragment>\n  )\n\n}\n\n","import { SHORT_INTERVAL } from 'defs/common_defs'\nimport { debounce } from 'lodash'\nimport React, { useEffect } from 'react'\nimport { UserStorage } from 'storage'\n\nenum WindowEvent {\n  Click = 'click',\n  Scroll = 'scroll',\n  Mouseover = 'mouseover',\n}\n\nconst events = [WindowEvent.Click, WindowEvent.Scroll]\n\nconst forceReset = debounce(() => { UserStorage.checkTimeout(true) }, SHORT_INTERVAL)\n\nexport const GlobalProvider = ({ children }: { children: React.ReactNode }) => {\n\n  useEffect(() => {\n\n    events.forEach((event: string) => {\n      document.addEventListener(event, forceReset)\n    })\n\n    return () => {\n\n      events.forEach((event: string) => {\n        document.removeEventListener(event, forceReset)\n      })\n    }\n\n  }, [])\n\n  return (\n    <React.Fragment>\n      { children}\n    </React.Fragment>\n  )\n\n}\n","import React from 'react'\nimport { TransactionTable } from '@loopring-web/component-lib'\nimport { WithTranslation, withTranslation } from 'react-i18next'\nimport { StylePaper } from '../../styled'\nimport { useGetTxs } from './hooks';\n\nconst TxPanel = withTranslation('common')((rest:WithTranslation<'common'>) => {\n    const { t } = rest\n    const container = React.useRef(null);\n    const [pageSize, setPageSize] = React.useState(10);\n\n    const { txs: txTableData, isLoading } = useGetTxs()\n\n    React.useEffect(() => {\n        // @ts-ignore\n        let height = container?.current?.offsetHeight;\n        if (height) {\n            setPageSize(Math.floor((height - 120) / 44) - 2);\n        }\n    }, [container, pageSize]);\n\n    return (\n        <StylePaper ref={container}>\n            <div className=\"title\">{t('labelTxnPageTitle')}</div>\n            <div className=\"tableWrapper\">\n                <TransactionTable {...{\n                    rawData: txTableData,\n                    pagination: {\n                        pageSize: pageSize\n                    },\n                    showFilter: true,\n                    showLoading: isLoading,\n                    ...rest\n                }} />\n            </div>\n        </StylePaper>\n    )\n})\n\nexport default TxPanel\n","import { useState, useCallback } from 'react'\n// import { useAmmpoolAPI, useUserAPI } from \"hooks/exchange/useApi\"\nimport { useCustomDCEffect } from 'hooks/common/useCustomDCEffect'\nimport { useAccount } from 'stores/account/hook'\nimport { TransactionStatus, RawDataTransactionItem } from '@loopring-web/component-lib'\nimport { volumeToCount, volumeToCountAsBigNumber } from 'hooks/help'\nimport { LoopringAPI } from 'stores/apis/api'\n\nimport { TransactionTradeTypes } from '@loopring-web/component-lib';\n\nexport function useGetTxs() {\n\n    const { account: {accountId, apiKey} } = useAccount()\n\n    // const userApi = useUserAPI()\n\n    const [txs, setTxs] = useState<RawDataTransactionItem[]>([])\n    const [isLoading, setIsLoading] = useState(true)\n\n    const getTxnStatus = (status: string) => \n        status === ''\n        ? TransactionStatus.processing :\n        status === 'processed'\n            ? TransactionStatus.processed\n            : status === 'processing'\n                ? TransactionStatus.processing \n                : status === 'received' \n                    ? TransactionStatus.received \n                    : TransactionStatus.failed\n\n    const getUserTxnList = useCallback(async () => {\n        if (LoopringAPI && LoopringAPI.userAPI && accountId && apiKey) {\n            const userTxnList = await Promise.all([\n                LoopringAPI.userAPI.getUserTranferList({\n                    accountId,\n                }, apiKey),\n                LoopringAPI.userAPI.getUserDepositHistory({\n                    accountId,\n                }, apiKey),\n                LoopringAPI.userAPI.getUserOnchainWithdrawalHistory({\n                    accountId,\n                }, apiKey)\n            ])\n            const userTransferMapped = userTxnList[0].userTransfers?.map(o => ({\n                side: TransactionTradeTypes.transfer,\n                // token: o.symbol,\n                // from: o.senderAddress,\n                // to: o.receiverAddress,\n                amount: {\n                    unit: o.symbol || '',\n                    value: Number(volumeToCount(o.symbol, o.amount))\n                },\n                fee: {\n                    unit: o.feeTokenSymbol || '',\n                    value: Number(volumeToCountAsBigNumber(o.feeTokenSymbol, o.feeAmount || 0))\n                },\n                memo: o.memo || '',\n                time: o.timestamp,\n                txnHash: o.hash,\n                status: getTxnStatus(o.status),\n                // tradeType: TransactionTradeTypes.transfer\n            }))\n            const userDepositMapped = userTxnList[1].userDepositHistory?.map(o => ({\n                side: TransactionTradeTypes.deposit,\n                symbol: o.symbol,\n                // token: o.symbol,\n                // from: o.hash,\n                // to: 'My Loopring',\n                // amount: Number(volumeToCount(o.symbol, o.amount)),\n                amount: {\n                    unit: o.symbol || '',\n                    value: Number(volumeToCount(o.symbol, o.amount))\n                },\n                fee: {\n                    unit: '',\n                    value: 0\n                },\n                memo: '',\n                time: o.timestamp,\n                txnHash: o.txHash,\n                status: getTxnStatus(o.status),\n                // tradeType: TransactionTradeTypes.deposit\n            }))\n            const userWithdrawMapped = userTxnList[2].userOnchainWithdrawalHistory?.map((o => ({\n                side: TransactionTradeTypes.withdraw,\n                // token: o.symbol,\n                // from: 'My Loopring',\n                // to: o.distributeHash,\n                amount: {\n                    unit: o.symbol || '',\n                    value: Number(volumeToCount(o.symbol, o.amount))\n                },\n                fee: {\n                    unit: o.feeTokenSymbol || '',\n                    value: Number(volumeToCount(o.feeTokenSymbol, o.feeAmount || 0)?.toFixed(6))\n                },\n                memo: '',\n                time: o.timestamp,\n                txnHash: o.txHash,\n                status: getTxnStatus(o.status),\n                // tradeType: TransactionTradeTypes.withdraw\n            })))\n            const mappingList = [...userTransferMapped??[], ...userDepositMapped??[], ...userWithdrawMapped??[]]\n            const sortedMappingList = mappingList.sort((a, b) => b.time - a.time)\n            setTxs(sortedMappingList)\n            setIsLoading(false)\n        }\n    }, [accountId, apiKey])\n\n    useCustomDCEffect(() => {\n        getUserTxnList()\n    }, [getUserTxnList])\n\n    return {\n        txs,\n        isLoading\n    }\n}\n","import { useCallback, useEffect, useRef, useState } from 'react'\nimport { WithTranslation, withTranslation } from 'react-i18next'\nimport { PriceTag } from '@loopring-web/common-resources'\nimport { Box, Paper, Typography } from '@material-ui/core'\nimport styled from '@emotion/styled'\nimport { useHistory } from 'react-router-dom'\nimport {\n    AssetsTable,\n    AssetTitle,\n    AssetTitleProps,\n    ChartType,\n    DoughnutChart,\n    ScaleAreaChart,\n    ToggleButtonGroup,\n    TokenType,\n    LpTokenAction,\n} from '@loopring-web/component-lib'\nimport { useModals } from 'modal/useModals'\n\nimport { volumeToCount } from 'hooks/help'\nimport { LoopringAPI } from 'stores/apis/api'\nimport { AssetType } from 'loopring-sdk'\nimport store from 'stores'\nimport { useWalletLayer1 } from 'stores/walletLayer1'\nimport { makeWalletLayer2 } from 'hooks/help'\nimport { useWalletLayer2 } from '../../../stores/walletLayer2'\nimport { EmptyValueTag,unit } from '@loopring-web/common-resources'\nimport { StylePaper } from '../../styled'\nimport { useAccount } from '../../../stores/account';\n\n// const StylePaper = styled(Box)`\n//   width: 100%;\n//   height: 100%;\n//   flex: 1;\n//   background: var(--color-box);\n//   border-radius: ${({theme}) => theme.unit}px;\n// //   padding: 20px;\n//\n//   .title {\n//     font-family: Gilroy-Medium;\n//     font-size: ${({theme}) => theme.unit * 3}px;\n//     line-height: 19px;\n//   }\n//\n//   .tableWrapper {\n//     display: flex;\n//     flex: 1;\n//     height: 100%;\n//     border: 1px solid var(--color-border);\n//     border-radius: ${({theme}) => theme.unit}px;\n//     padding: 26px 0;\n//   }\n// ` as typeof Box;\n\nconst StyledChartWrapper = styled(Box)`\n    height: 225px;\n\n    > div {\n        position: relative;\n        width: calc(50% - 6px);\n        height: 100%;\n        background: var(--color-box);\n        border-radius: ${({theme}) => theme.unit}px;\n        padding: ${({theme}) => theme.unit * 2.5}px ${({theme}) => theme.unit * 3}px;\n    }\n`\n\nconst StyledBtnGroupWrapper = styled(Box)`\n    position: absolute;\n    z-index: 10;\n    right: ${({theme}) => theme.unit * 3}px;\n    bottom: ${({theme}) => theme.unit * 2.5}px;\n`\n\nconst toggleData = [\n    // {value: '24 H', key: '24 H'},\n    {value: 'week', key: '1 W'},\n    {value: 'all', key: 'ALL'},\n]\n\nexport type ITokenInfoItem = {\n    token: string,\n    detail: {\n        price: string,\n        symbol: string,\n        updatedAt: number\n    }\n}\n\nexport type TrendDataItem = {\n    timeStamp: number;\n    close: number;\n}\n\nconst AssetPanel = withTranslation('common')(({t, ...rest}: WithTranslation) => {\n    const container = useRef(null);\n    const [pageSize, setPageSize] = useState(10);\n    const [chartPeriod, setChartPeriod] = useState('week')\n    const [chartData, setChartData] = useState<TrendDataItem[]>([])\n    const [assetsList, setAssetsList] = useState<any[]>([])\n    \n    const { account:{accAddress} } = useAccount()\n    const { walletLayer2 } = store.getState().walletLayer2;\n    const { ammMap } = store.getState().amm.ammMap\n    const { status: walletLayer2Status } = useWalletLayer2();\n\n    const getUserTotalAssets = useCallback(async (limit: number = 7) => {\n        const userAssets = await LoopringAPI.walletAPI?.getUserAssets({\n            wallet: accAddress,\n            assetType: AssetType.DEX,\n            limit: limit // TODO: minium unit is day, discuss with pm later\n        })\n        if (userAssets && userAssets.userAssets.length && !!userAssets.userAssets.length) {\n            // console.log(userAssets.userAssets)\n            setChartData(userAssets.userAssets.map(o => ({\n                timeStamp: Number(o.createdAt),\n                // close: o.amount && o.amount !== NaN ? Number(o.amount) : 0\n                close: Number(o.amount)\n            })))\n        }\n    }, [accAddress])\n\n    useEffect(() => {\n        if (walletLayer2Status === 'UNSET') {\n            const walletMap = makeWalletLayer2()\n            const assetsKeyList = walletMap && walletMap.walletMap ? Object.keys(walletMap.walletMap) : []\n            const assetsDetailList = walletMap && walletMap.walletMap ? Object.values(walletMap.walletMap) : []\n            const list = assetsKeyList.map((key, index) => ({\n                token: key,\n                detail: assetsDetailList[index]\n            }))\n            setAssetsList(list)\n        }\n    }, [walletLayer2Status])\n\n    useEffect(() => {\n        if (LoopringAPI && LoopringAPI.walletAPI && walletLayer2) {\n            getUserTotalAssets()\n        }\n    }, [walletLayer2, getUserTotalAssets])\n\n    useEffect(() => {\n        // @ts-ignore\n        let height = container?.current?.offsetHeight;\n        if (height) {\n            setPageSize(Math.floor((height - 120) / 44) - 1);\n        }\n    }, [container, pageSize]);\n\n    const {\n        showDeposit,\n        showTransfer,\n        showWithdraw,\n        // ShowResetAccount,\n    } = useModals()\n\n    // const { updateWalletLayer1 } = useWalletLayer1()\n\n    let history = useHistory();\n\n    const onShowDeposit = useCallback((token?: any) => {\n        // updateWalletLayer1()\n        showDeposit(true, {\n            tradeData: {\n                balance: '',\n                belong: token\n            },\n        })\n    }, [showDeposit])\n\n    const onShowTransfer = useCallback((token?: any) => {\n        showTransfer(true, {\n            tradeData: {\n                balance: '',\n                belong: token\n            },\n        })\n    }, [showTransfer])\n\n    const onShowWithdraw = useCallback((token?: any) => {\n        showWithdraw(true, {\n            tradeData: {\n                balance: '',\n                belong: token\n            },\n        })\n    }, [showWithdraw])\n\n    const lpTokenJump = useCallback((token: string, type: LpTokenAction) => {\n        if (history) {\n            history.push(`/liquidity/pools/coinPair/${token}?type=${type}`)\n        }\n    }, [history])\n\n    const handleChartPeriodChange = useCallback((event: React.MouseEvent<HTMLElement, MouseEvent>, newValue: string) => {\n        const limit = newValue === 'week' ? 7 : 9999\n        getUserTotalAssets(limit)\n    }, [getUserTotalAssets])\n\n    const { faitPrices } = store.getState().system\n\n    const tokenPriceList = faitPrices ? Object.entries(faitPrices).map(o => ({\n        token: o[ 0 ],\n        detail: o[ 1 ]\n    })) as ITokenInfoItem[] : []\n\n    // let jointLPTokenValue = 0\n    // assetsList.filter(o => o.token.split('-')[0] === 'LP').forEach(o => {\n    //     const result = o.token.split('-')\n    //     result.splice(0, 1, 'AMM')\n    //     const ammToken = result.join('-')\n    //     console.log(ammToken)\n    //     const ammTokenList = Object.keys(ammMap)\n    //     const tokenValue = ammTokenList.includes(ammToken) && ammMap[ammToken] && ammMap[ammToken].amountDollar ? Number(ammMap[ammToken].amountDollar) : 0\n    //     console.log(ammMap)\n    //     jointLPTokenValue += tokenValue\n    // });\n\n    // const doughnutData = assetsList.filter(o => o.token.split('-')[0] !== 'LP').map((tokenInfo) => {\n    //     const tokenPriceUSDT = tokenInfo.token === 'DAI'\n    //         ? 1\n    //         : Number(tokenPriceList.find(o => o.token === tokenInfo.token) ? tokenPriceList.find(o => o.token === tokenInfo.token)?.detail.price : 0) / Number(tokenPriceList.find(o => o.token === 'USDT')?.detail.price)\n    //     return ({\n    //         name: tokenInfo.token,\n    //         value: Number(volumeToCount(tokenInfo.token, tokenInfo.detail?.detail?.total as string)) * tokenPriceUSDT\n    //     })\n    // })\n    const formattedData = assetsList.map(item => {\n        const isLpToken = item.token.split('-')[0] === 'LP'\n        if (!isLpToken) {\n            const tokenPriceUSDT = item.token === 'DAI'\n                ? 1\n                : Number(tokenPriceList.find(o => o.token === item.token) ? tokenPriceList.find(o => o.token === item.token)?.detail.price : 0) / Number(tokenPriceList.find(o => o.token === 'USDT')?.detail.price)\n            return ({\n                name: item.token,\n                value: Number(volumeToCount(item.token, item.detail?.detail?.total as string)) * tokenPriceUSDT\n            })\n        }\n        // let jointLPTokenValue = 0\n        const result = item.token.split('-')\n        result.splice(0, 1, 'AMM')\n        const ammToken = result.join('-')\n        const ammTokenList = Object.keys(ammMap)\n        const ammTokenPrice = ammTokenList.includes(ammToken) && ammMap[ammToken] && ammMap[ammToken].amountDollar ? (ammMap[ammToken].totalLpToken || 0) / ammMap[ammToken].amountDollar : 0\n        const tokenValue =  ammTokenPrice * (item.detail?.count || 0)\n        // jointLPTokenValue += 1\n        return ({\n            name: item.token,\n            value: tokenValue\n        })\n    })\n\n    \n    const lpTotalData = formattedData\n        .filter(o => o.name.split('-')[0] === 'LP')\n        .reduce((prev, next) => ({\n            name: 'LP-Token',\n            value: prev.value + next.value\n        }), {\n            name: 'LP-Token',\n            value: 0\n        })\n    \n    const formattedDoughnutData = formattedData.filter(o => o.name.split('-')[0] === 'LP').length > 0\n        ? [...formattedData.filter(o => o.name.split('-')[0] !== 'LP'), lpTotalData]\n        : formattedData\n\n    // const formattedDoughnutData = [...doughnutData, {\n    //         name: 'LP-Token',\n    //         value: jointLPTokenValue\n    //     }]\n    const AssetTitleProps: AssetTitleProps = {\n        assetInfo: {\n            totalAsset: formattedData.map(o => o.value).reduce((prev, next) => {\n                return prev + next\n            }, 0),\n            priceTag: PriceTag.Dollar,\n        },\n        onShowDeposit,\n        onShowTransfer,\n        onShowWithdraw,\n    }\n\n    const assetsRawData = assetsList.map((tokenInfo) => {\n        \n        const tokenPriceUSDT = Number(tokenPriceList.find(o => o.token === tokenInfo.token)?.detail.price) / Number(tokenPriceList.find(o => o.token === 'USDT')?.detail.price)\n        return ({\n            token: {\n                type: tokenInfo.token.split('-')[0] === 'LP' ? TokenType.lp : TokenType.single,\n                value: tokenInfo.token\n            },\n            amount: String(Number(volumeToCount(tokenInfo.token, tokenInfo.detail?.detail.total as string)).toFixed(6)) || EmptyValueTag,\n            available: String(tokenInfo.detail?.count) || EmptyValueTag,\n            locked: String(tokenInfo.detail?.detail.locked) || EmptyValueTag,\n            smallBalance: tokenPriceUSDT * Number(volumeToCount(tokenInfo.token, tokenInfo.detail?.detail.total as string)) < 1,\n        })\n    })\n\n    return (\n        <>\n            <Box>\n                <AssetTitle  {...{\n                    t,\n                    ...rest,\n                    ...AssetTitleProps\n                }} />\n            </Box>\n\n            {/*<div className=\"title\">{t('labelAssetsTitle')}</div>*/}\n\n            <StyledChartWrapper display={'flex'} justifyContent={'space-between'} alignItems={'center'} marginTop={2}>\n                <Paper component={'div'}>\n                    <Typography component=\"span\" color=\"textSecondary\" variant=\"body1\">{t('labelAssetsDistribution')}</Typography>\n                    <DoughnutChart data={walletLayer2 ? formattedDoughnutData : []}/>\n                </Paper>\n                <Paper component={'div'}>\n                    <Typography component=\"span\" color=\"textSecondary\" variant=\"body1\">{t('labelTotalAssets')}</Typography>\n                    <ScaleAreaChart type={ChartType.Trend} data={chartData}/>\n                    <StyledBtnGroupWrapper>\n                        <ToggleButtonGroup exclusive size=\"small\" {...{\n                            ...rest,\n                            t,\n                            data: toggleData,\n                            value: chartPeriod,\n                            setValue: setChartPeriod,\n                            onChange: handleChartPeriodChange\n                        }} />\n                    </StyledBtnGroupWrapper>\n                </Paper>\n            </StyledChartWrapper>\n            <StylePaper style={{marginTop: `${unit*2}px`}}>\n                <div className=\"tableWrapper\" ref={container}>\n                    <AssetsTable {...{\n                        rawData: assetsRawData,\n                        pagination: {\n                            pageSize: pageSize\n                        },\n                        showFiliter: true,\n                        onShowDeposit: onShowDeposit,\n                        onShowTransfer: onShowTransfer,\n                        onShowWithdraw: onShowWithdraw,\n                        onLpDeposit: lpTokenJump,\n                        onLpWithdraw: lpTokenJump,\n                        ...rest\n                    }} />\n                </div>\n            </StylePaper>\n        </>\n    )\n})\n\nexport default AssetPanel\n","import React from \"react\";\nimport { useDispatch } from \"react-redux\"\n\nimport { setShowDeposit, setShowResetAccount, setShowTransfer, setShowWithdraw, } from '@loopring-web/component-lib'\nimport { useTranslation } from \"react-i18next\";\nimport { useAccount } from '../stores/account';\nimport { AccountStatus } from '@loopring-web/common-resources';\n\nexport function useModals() {\n    const dispatch = useDispatch()\n    const {account: {readyState}} = useAccount()\n    const {t} = useTranslation('common')\n    const showDeposit = React.useCallback((isShow: boolean, defaultProps?: any) => {\n\n        const isNoAccount = readyState === AccountStatus.NO_ACCOUNT\n\n        console.log('isNoAccount: ', isNoAccount, t('depositTitleAndActive'))\n        const action = {\n            isShow,\n            props: {\n                title: isNoAccount ? t('depositTitleAndActive') : t('depositTitle'),\n                description: 'depositAndActiveDescription',\n                ...defaultProps\n            },\n        }\n        dispatch(setShowDeposit(action))\n    }, [dispatch, t, readyState])\n    const showTransfer = React.useCallback((isShow: boolean, defaultProps?: any) => dispatch(setShowTransfer({\n        isShow,\n        props: {...defaultProps}\n    })), [dispatch])\n    const showWithdraw = React.useCallback((isShow: boolean, defaultProps?: any) => dispatch(setShowWithdraw({\n        isShow,\n        props: {...defaultProps}\n    })), [dispatch])\n    const showResetAccount = React.useCallback((isShow: boolean, defaultProps?: any) => dispatch(setShowResetAccount({\n        isShow,\n        props: {...defaultProps}\n    })), [dispatch])\n\n    return {\n        showDeposit,\n        showTransfer,\n        showWithdraw,\n        // ShowResetAccount,\n    }\n}","import React, { useEffect } from 'react'\nimport { TradeTable, TradeFilterTable, RawDataTradeItem } from '@loopring-web/component-lib'\nimport { WithTranslation, withTranslation } from 'react-i18next'\n// import styled from '@emotion/styled'\n// import { Box, Paper } from '@material-ui/core'\nimport { StylePaper } from '../../styled'\nimport { useGetTrades } from './hooks'\n\n// const StylePaper = styled(Box)`\n//   display: flex;\n//   flex-direction: column;\n//   width: 100%;\n//   height: 100%;\n//   flex: 1;\n//   background: var(--color-box);\n//   border-radius: ${({ theme }) => theme.unit}px;\n//   padding: 20px;\n//   margin-bottom: ${({ theme }) => 2* theme.unit}px;\n//   .title {\n//     font-family: Gilroy-Medium;\n//     font-size: ${({ theme }) => theme.unit * 3}px;\n//     line-height: 19px;\n//   }\n//\n//   .tableWrapper {\n//     display: flex;\n//     flex: 1;\n//     margin-top: 20px;\n//     border: 1px solid ${({ theme }) => theme.colorBase.borderColor};\n//     border-radius: ${({ theme }) => theme.unit}px;\n//     padding: 26px 0;\n//\n//     .rdg {\n//       flex: 1;\n//     }\n//   }\n// ` as typeof Paper;\n//\n// // side: keyof typeof TradeTypes;\n// //     amount: {\n// //         from: {\n// //             key: string;\n// //             value: number|undefined;\n// //         },\n// //         to: {\n// //             key: string;\n// //             value: number|undefined;\n// //         }\n// //     };\n// //     price:{\n// //         key:string\n// //         value:number|undefined,\n// //     }\n// //     // priceDollar: number;\n// //     // priceYuan: number;\n// //     fee: {\n// //         key: string;\n// //         value: number|undefined;\n// //     };\n// //     time: number;\n\nconst TradePanel = withTranslation('common')((rest:WithTranslation<'common'>) => {\n    const [pageSize, setPageSize] = React.useState(10);\n    const { userTrades, showLoading } = useGetTrades()\n    const container = React.useRef(null);\n    const { t } = rest\n\n    React.useEffect(() => {\n        // @ts-ignore\n        let height = container?.current?.offsetHeight;\n        if (height) {\n            setPageSize(Math.floor((height - 120) / 44) - 2);\n        }\n    }, [container, pageSize]);\n\n    return (\n        <StylePaper ref={container}>\n            <div className=\"title\">{t('labelTradePageTitle')}</div>\n            <div className=\"tableWrapper extraTradeClass\">\n                <TradeTable {...{\n                    rawData: userTrades,\n                    // pagination: {\n                    //     pageSize: pageSize\n                    // },\n                    showFilter: true,\n                    showLoading: showLoading,\n                    ...rest}}/>\n            </div>\n        </StylePaper>\n    )\n})\n\nexport default TradePanel\n","import React from 'react'\n\nimport { useCustomDCEffect } from 'hooks/common/useCustomDCEffect'\nimport { useAccount } from 'stores/account/hook'\nimport { TransactionStatus, RawDataTransactionItem, RawDataTradeItem } from '@loopring-web/component-lib'\n\nimport { FilledType, TxStatus, UserTrade } from 'loopring-sdk'\nimport { TransactionTradeTypes } from '@loopring-web/component-lib';\nimport { LoopringAPI } from 'stores/apis/api'\nimport store from 'stores'\nimport { TradeTypes } from '@loopring-web/common-resources'\nimport { toBig, Side } from 'loopring-sdk'\nimport { volumeToCount, volumeToCountAsBigNumber } from 'hooks/help'\n\nexport function useGetTrades() {\n    const [userTrades, setUserTrades] = React.useState<RawDataTradeItem[]>([])\n    const [showLoading, setShowLoading] = React.useState(true)\n    const { account:{accountId, apiKey} } = useAccount()\n\n    const tokenMap = store.getState().tokenMap.tokenMap\n\n    const getUserTradeList = React.useCallback(async () => {\n        if (LoopringAPI && LoopringAPI.userAPI && accountId && apiKey && tokenMap) {\n            const userTrades = await LoopringAPI.userAPI.getUserTrades({\n                accountId,\n            }, apiKey)\n\n            if (userTrades && userTrades.userTrades) {\n                // @ts-ignore\n                setUserTrades(userTrades.userTrades.map(o => {\n                    const marketList = o.market.split('-')\n                    // due to AMM case, we cannot use first index\n                    const baseToken = marketList[marketList.length - 2]\n                    const quoteToken = marketList[marketList.length - 1]\n\n                    // const amt = toBig(o.volume).times(o.price).toString()\n\n                    const feeKey = o.side === Side.Buy ? baseToken : quoteToken\n\n\n                    return ({\n                        side: o.side === Side.Buy ? TradeTypes.Buy : TradeTypes.Sell ,\n                        price: {\n                            key: baseToken,\n                            // value: StringToNumberWithPrecision(o.price, baseToken)\n                            value: toBig(o.price).toNumber()\n                        },\n                        fee: {\n                            key: feeKey,\n                            // value: VolToNumberWithPrecision(o.fee, quoteToken),\n                            value: feeKey ? volumeToCount(feeKey, o.fee)?.toFixed(6) : undefined\n                        },\n                        time: Number(o.tradeTime),\n                        amount: {\n                            from: {\n                            key: baseToken,\n                            // value: VolToNumberWithPrecision(o.volume, baseToken),\n                            value: baseToken ? volumeToCount(baseToken, o.volume) : undefined\n                            },\n                            to: {\n                            key: quoteToken,\n                            // value: VolToNumberWithPrecision(amt, quoteToken)\n                            value: baseToken ? volumeToCountAsBigNumber(baseToken, o.volume)?.times(o.price).toNumber() : undefined\n                            }\n                        }\n                    })\n                }))\n                setShowLoading(false)\n            }\n        }\n    }, [accountId, apiKey, tokenMap])\n\n    React.useEffect(() => {\n        getUserTradeList()\n    }, [getUserTradeList])\n\n    // useCustomDCEffect(async() => {\n\n    //     if (!LoopringAPI.userAPI || !accountId || !apiKey) {\n    //         return\n    //     }\n\n    //     const response = await LoopringAPI.userAPI.getUserTrades({accountId: accountId}, apiKey)\n\n    //     let userTrades: RawDataTradeItem[] = []\n\n    //     response.userTrades.forEach((item: UserTrade, index: number) => {\n    //     })\n\n    //     setUserTrades(userTrades)\n\n    // }, [accountId, apiKey, LoopringAPI.userAPI])\n\n    return {\n        userTrades,\n        showLoading,\n    }\n}\n","import React, { useEffect } from 'react'\nimport { RawDataAmmItem, AmmTable, AmmSideTypes } from '@loopring-web/component-lib'\nimport { WithTranslation, withTranslation } from 'react-i18next'\nimport store from 'stores'\nimport { LoopringAPI } from 'stores/apis/api'\nimport { AmmTxType } from 'loopring-sdk'\nimport { StylePaper } from '../../styled'\nimport { volumeToCount } from '../../../hooks/help';\nimport { useGetAmmRecord } from'./hook'\n\nconst AmmPanel = withTranslation('common')(({ t, ...rest }: WithTranslation<'common'>) => {\n    const container = React.useRef(null);\n    const [pageSize, setPageSize] = React.useState(10);\n    const { ammRecordList, showLoading } = useGetAmmRecord()\n\n    React.useEffect(() => {\n        // @ts-ignore\n        let height = container?.current?.offsetHeight;\n        if (height) {\n            setPageSize(Math.floor((height - 120) / 44) - 2);\n        }\n    }, [container, pageSize]);\n\n    return (\n        <>\n            <StylePaper ref={container}>\n                <div className=\"title\">{t('labelAmmPageTitle')}</div>\n                <div className=\"tableWrapper\">\n                    <AmmTable {...{\n                        rawData: ammRecordList,\n                        pagination: {\n                            pageSize: pageSize\n                        },\n                        showFilter: true,\n                        showLoading: showLoading,\n                        ...rest}}/>\n                </div>\n            </StylePaper>\n        </>\n    )\n})\n\nexport default AmmPanel\n","import React, { useEffect } from 'react'\nimport { RawDataAmmItem, AmmSideTypes } from '@loopring-web/component-lib'\nimport store from 'stores'\nimport { LoopringAPI } from 'stores/apis/api'\nimport { AmmTxType } from 'loopring-sdk'\nimport { volumeToCount } from '../../../hooks/help';\n\nexport function useGetAmmRecord() {\n    const [ammRecordList, setAmmRecordList] = React.useState<RawDataAmmItem[]>([])\n    const [showLoading, setShowLoading] = React.useState(true)\n    const { accountId,apiKey } = store.getState().account;\n    const { tokenMap } = store.getState().tokenMap\n\n    const getTokenName = React.useCallback((tokenId?: number) => {\n        if (tokenMap) {\n            const keys = Object.keys(tokenMap)\n            const values = Object.values(tokenMap)\n            const index = values.findIndex(o => o.tokenId === tokenId)\n            if (index > -1) {\n                return keys[index]\n            }\n            return ''\n        }\n        return ''\n    }, [tokenMap])\n\n    const getAmmpoolList = React.useCallback(async () => {\n        if (LoopringAPI.ammpoolAPI && accountId && apiKey) {\n            const ammpool = await LoopringAPI.ammpoolAPI.getUserAmmPoolTxs({\n                accountId,\n            }, apiKey)\n            if (ammpool && ammpool.userAmmPoolTxs) {\n                const result = ammpool.userAmmPoolTxs.map(o => ({\n                    side: o.txType === AmmTxType.JOIN ? AmmSideTypes.Join : AmmSideTypes.Exit,\n                    amount: {\n                        from: {\n                            key: getTokenName(o.poolTokens[0]?.tokenId),\n                            value: String(volumeToCount(getTokenName(o.poolTokens[0]?.tokenId), o.poolTokens[0]?.actualAmount))\n                        },\n                        to: {\n                            key: getTokenName(o.poolTokens[1]?.tokenId),\n                            value: String(volumeToCount(getTokenName(o.poolTokens[1]?.tokenId), o.poolTokens[1]?.actualAmount))\n                        }\n                    },\n                    lpTokenAmount: String(volumeToCount(getTokenName(o.lpToken?.tokenId), o.lpToken?.actualAmount)),\n                    fee: {\n                        key: getTokenName(o.poolTokens[1]?.tokenId),\n                        value: volumeToCount(getTokenName(o.poolTokens[1]?.tokenId), o.poolTokens[1]?.feeAmount)?.toFixed(6)\n                    },\n                    time: o.updatedAt\n                }))\n                setAmmRecordList(result)\n                setShowLoading(false)\n            }\n        }\n    }, [accountId, apiKey, getTokenName])\n    \n    useEffect(() => {\n        getAmmpoolList()\n    }, [getAmmpoolList])\n\n    return  {\n        ammRecordList,\n        showLoading,\n    }\n}\n\n","import { AmmPoolActivityRule, LoopringMap } from 'loopring-sdk';\nimport React from 'react';\nimport { AmmRecordRow, MyPoolRow } from '@loopring-web/component-lib';\nimport { makeWalletLayer2, WalletMapExtend } from '../../../hooks/help/makeWallet';\nimport {\n    getUserAmmTransaction,\n    makeMyAmmMarketArray,\n    makeMyPoolRowWithPoolState,\n    makeSummaryMyAmm,\n    SummaryMyAmm\n} from '../../../hooks/help';\nimport { useTokenMap } from '../../../stores/token';\nimport { useWalletLayer2 } from '../../../stores/walletLayer2';\nimport { useUserRewards } from '../../../stores/userRewards';\nimport { useAmmMap } from '../../../stores/Amm/AmmMap';\nimport { SagaStatus } from '@loopring-web/common-resources';\n\n\nexport const useOverview = <R extends { [ key: string ]: any }, I extends { [ key: string ]: any }>(\n    {\n        ammActivityMap\n    }: { ammActivityMap: LoopringMap<LoopringMap<AmmPoolActivityRule[]>> | undefined }\n): {\n    myAmmMarketArray: AmmRecordRow<R>[],\n    summaryReward: SummaryMyAmm | undefined,\n    myPoolRow: MyPoolRow<R>[]\n    // ammActivityViewMap: Array<AmmCardProps<I>>,\n    // ammActivityPastViewMap: Array<AmmCardProps<I>>\n} => {\n    const {walletLayer2, status: walletLayer2Status} = useWalletLayer2();\n    const userRewardsMapState = useUserRewards();\n    const {marketArray} = useTokenMap();\n    const ammMapState = useAmmMap();\n    const {ammMap} = ammMapState;\n\n    // const [walletMap, setWalletMap] = React.useState<WalletMapExtend<R> | undefined>(undefined);\n    const [summaryReward, setSummaryReward] = React.useState<SummaryMyAmm | undefined>(undefined);\n    const [myPoolRow, setMyPoolRow] = React.useState<MyPoolRow<R>[]>([])\n    const [myAmmMarketArray, setMyAmmMarketArray] = React.useState<AmmRecordRow<R>[]>([]);\n    // const [ammUserRewardMap, setAmmUserRewardMap] = React.useState<AmmUserRewardMap|undefined>(undefined);\n    // const [snapShotData,setSnapShotData] = React.useState<{\n    //     tickerData: TickerData|undefined\n    //     ammPoolsBalance: AmmPoolSnapshot|undefined\n    // }|undefined>(undefined);\n    const walletLayer2DoIt = React.useCallback(() => {\n        const {walletMap: _walletMap} = makeWalletLayer2();\n        // setWalletMap(_walletMap as WalletMapExtend<any>)\n        if (_walletMap) {\n            getUserAmmTransaction()?.then((marketTrades) => {\n                let _myTradeArray = makeMyAmmMarketArray(undefined, marketTrades)\n                setMyAmmMarketArray(_myTradeArray ? _myTradeArray : [])\n            })\n        }\n        return _walletMap\n    }, [makeWalletLayer2, getUserAmmTransaction, makeMyAmmMarketArray, marketArray])\n    const makeMyPoolRow = React.useCallback((_walletMap): MyPoolRow<R>[] => {\n        if (_walletMap && ammMap) {\n            // @ts-ignore\n            const _myPoolRow: MyPoolRow<R>[] = Reflect.ownKeys(_walletMap).reduce((prev: MyPoolRow<R>[], walletKey: string) => {\n                if (/LP-/i.test(walletKey)) {\n                    const ammKey = walletKey.replace('LP-', 'AMM-');\n                    const marketKey = walletKey.replace('LP-', '');\n                    let rowData: MyPoolRow<R> | undefined;\n                    //TODO：websocket open\n                    //  if(ammPoolSnapShots)\n                    // makeData by snapshot else\n                    // else\n\n                    rowData = makeMyPoolRowWithPoolState(\n                        {\n                            ammDetail: ammMap[ ammKey ],\n                            walletMap: _walletMap,\n                            market: marketKey,\n                            ammUserRewardMap: userRewardsMapState.userRewardsMap\n                        }\n                    ) as any\n                    if (rowData !== undefined) {\n                        prev.push(rowData);\n                    }\n                }\n                return prev\n            }, [] as MyPoolRow<R>[])\n            // console.log('rowData',_myPoolRow);\n            return _myPoolRow;\n        }\n        return [];\n    }, [ammMap, userRewardsMapState.userRewardsMap])\n\n    // React.useEffect(() => {\n    //     if (walletLayer2) {\n    //         const _walletMap = walletLayer2DoIt();\n    //         if (ammMap) {\n    //             const _myPoolRow = makeMyPoolRow(_walletMap)\n    //             setMyPoolRow(_myPoolRow)\n    //         }\n    //     }\n    // }, []);\n    // const {walletLayer2, status: walletLayer2Status} = useWalletLayer2();\n\n    React.useEffect(() => {\n        //ammMapState.ammMap or\n        if (walletLayer2Status === SagaStatus.UNSET && ammMapState.ammMap) {\n            const _walletMap = walletLayer2DoIt();\n            // //TODO check AmmMap state or ammSnapshot sockets\n            // //userRewardsMapState is an option but  walletLayer2 amd ammMapState.ammMap is required\n            //     if () {\n            const _myPoolRow = makeMyPoolRow(_walletMap);\n            setMyPoolRow(_myPoolRow)\n            // }\n        }\n        // }\n    }, [walletLayer2Status])\n\n    React.useEffect(() => {\n        if (ammMapState.status === \"ERROR\") {\n            //TODO: solve error\n            ammMapState.statusUnset();\n        } else if (ammMapState.status === \"DONE\") {\n            ammMapState.statusUnset();\n            //TODO check AmmMap state or ammSnapshot sockets when websocket open  ammMapState done should not effect myPoolRow\n            if (walletLayer2) {\n                const _walletMap = walletLayer2DoIt();\n                //userRewardsMapState is an option and walletLayer2 is required\n                const _myPoolRow = makeMyPoolRow(_walletMap);\n                setMyPoolRow(_myPoolRow);\n            }\n        }\n    }, [ammMapState.status])\n\n    React.useEffect(() => {\n        if (userRewardsMapState.status === \"ERROR\") {\n            //TODO: solve error\n            userRewardsMapState.statusUnset();\n        } else if (userRewardsMapState.status === \"DONE\") {\n            userRewardsMapState.statusUnset();\n            // setAmmUserRewardMap()\n            const summaryReward = makeSummaryMyAmm({userRewardsMap: userRewardsMapState.userRewardsMap});\n            setSummaryReward(summaryReward);\n\n            //TODO check AmmMap state or ammSnapshot sockets\n            if (walletLayer2 && ammMapState.ammMap) {  //  ammMapState.ammMap or websocket\n                //userRewardsMapState is an option and walletLayer2 is required\n                const _myPoolRow = makeMyPoolRow(walletLayer2);\n                setMyPoolRow(_myPoolRow);\n            }\n\n        }\n    }, [userRewardsMapState.status])\n    return {\n        myAmmMarketArray,\n        summaryReward,\n        myPoolRow,\n        // ammActivityViewMap,\n        // ammActivityPastViewMap\n    }\n\n}\n","import React from 'react'\nimport styled from '@emotion/styled'\nimport { Box, Grid, Typography } from '@material-ui/core'\nimport { WithTranslation, withTranslation } from 'react-i18next'\nimport { useHistory } from 'react-router-dom'\nimport {\n    AmmRecordTable,\n    AmmTradeType,\n    ChartType,\n    ScaleAreaChart,\n    TablePaddingX,\n    ToggleButtonGroup,\n    useSettings ,\n    MyPoolTable\n} from '@loopring-web/component-lib'\nimport {\n    Currency, EmptyValueTag,\n    getThousandFormattedNumbers,\n    PriceTag\n} from '@loopring-web/common-resources';\n\nimport { AmmPoolActivityRule, LoopringMap } from 'loopring-sdk/dist/defs/loopring_defs';\nimport { useOverview } from './hook';\nimport { TableWrapStyled } from 'pages/styled'\n\n\n//TODO: FIXED:  demo data\n\n\nconst toggleData = [\n    {value: '24 H', key: '24 H'},\n    {value: '1 W', key: '1 W'},\n    {value: 'ALL', key: 'ALL'},\n]\n\nconst StylePaper = styled(Box)`\n    height: 100%;\n    flex: 1;\n    background: var(--color-box);\n    border-radius: ${({theme}) => theme.unit}px;\n` as typeof Box;\n\nconst StyleWrapper = styled(Grid)`\n    position: relative;\n    width: 100%;\n    background: var(--color-box);\n    border-radius: ${({theme}) => theme.unit}px;\n` as typeof Grid\n\n\n\nconst StyledBtnGroupWrapper = styled(Box)`\n  position: absolute;\n  z-index: 99;\n  top: ${({theme}) => theme.unit}px;\n  width: 100%;\n` as typeof Box\n\n\nconst MyLiquidity: any = withTranslation('common')(\n    <R extends { [ key: string ]: any }, I extends { [ key: string ]: any }>\n    ({t, ammActivityMap, ...rest}:\n         WithTranslation &\n         { ammActivityMap: LoopringMap<LoopringMap<AmmPoolActivityRule[]>> | undefined }\n    ) => {\n        const [chartPeriod, setChartPeriod] = React.useState('ALL');\n        const [page, setPage] = React.useState(1);\n        const {currency} = useSettings();\n        const history = useHistory()\n\n        const JumpToLiqudity = React.useCallback((pair, type) => {\n            if (history) {\n                history.push(`/liquidity/pools/coinPair/${pair}?type=${type}`)\n            }\n        }, [history])\n\n        const _handlePageChange = React.useCallback((page: number) => {\n            setPage(page);\n        }, [])\n\n        const {myAmmMarketArray, summaryReward, myPoolRow} = useOverview({ammActivityMap});\n        return (\n            <>\n                <Grid container spacing={2}>\n                    <Grid item spacing={1} sm={3}>\n                        <StyleWrapper container paddingY={3} paddingX={4} margin={0} display={'flex'} flexDirection={'column'}>\n                            <Grid display={'flex'} flexDirection={'column'} item>\n                                <Typography variant={'h5'}\n                                            color={'textSecondary'} fontFamily={'Roboto'}>{t('labelTotalPositionValue')}</Typography>\n                                <Typography variant={'h3'} marginTop={1} fontFamily={'Roboto'}>\n                                    {summaryReward === undefined ? EmptyValueTag : currency === Currency.dollar ? PriceTag.Dollar\n                                        + getThousandFormattedNumbers(summaryReward.rewardDollar !== undefined? summaryReward.rewardDollar : 0)\n                                        + getThousandFormattedNumbers( summaryReward.feeDollar !== undefined?summaryReward.feeDollar : 0)\n                                        : PriceTag.Yuan + getThousandFormattedNumbers(summaryReward.rewardYuan ? summaryReward.rewardYuan : 0)\n                                            +  getThousandFormattedNumbers(summaryReward.feeYuan ? summaryReward.feeYuan : 0)}\n                                </Typography>\n                            </Grid>\n                            <Grid display={'flex'} flexDirection={'column'} marginTop={5} item>\n                                <Typography variant={'h5'} component={'h3'} fontFamily={'Roboto'}\n                                            color={'textSecondary'}>{t('labelFeeRewards')}</Typography>\n                                <Typography variant={'h3'} marginTop={1} fontFamily={'Roboto'}>\n                                    {summaryReward === undefined ? EmptyValueTag : currency === Currency.dollar ? PriceTag.Dollar\n                                        + getThousandFormattedNumbers(summaryReward.feeDollar ? summaryReward.feeDollar : 0)\n                                        : PriceTag.Yuan\n                                        + getThousandFormattedNumbers(summaryReward.feeYuan ? summaryReward.feeYuan : 0)}\n                                </Typography>\n                            </Grid>\n                            <Grid display={'flex'} flexDirection={'column'} marginTop={5} item>\n                                <Typography variant={'h5'} component={'h3'} fontFamily={'Roboto'}\n                                            color={'textSecondary'}>{t('labelMiningRewards')}</Typography>\n                                <Typography variant={'h3'} marginTop={1} fontFamily={'Roboto'}>\n                                    {summaryReward === undefined ? EmptyValueTag : currency === Currency.dollar ? PriceTag.Dollar\n                                        + getThousandFormattedNumbers(summaryReward.rewardDollar ? summaryReward.rewardDollar : 0)\n                                        : PriceTag.Yuan\n                                        + getThousandFormattedNumbers(summaryReward.rewardYuan ? summaryReward.rewardYuan : 0)}\n                                </Typography>\n                            </Grid>\n                        </StyleWrapper>\n                    </Grid>\n                    <Grid item xs={9}>\n                        <StylePaper />\n                    </Grid>\n                </Grid>\n\n                {/*<StyleWrapper container marginY={2} height={340}>*/}\n                {/*    <StyledBtnGroupWrapper display={'flex'} padding={3} justifyContent={'space-between'}>*/}\n                {/*        <Typography variant={'body1'} component={'h5'}*/}\n                {/*                    color={'textSecondary'}>{t('labelLiquidityValue')}</Typography>*/}\n                {/*        <Box marginRight={-1}>*/}\n                {/*            <ToggleButtonGroup exclusive size=\"small\" {...{*/}\n                {/*                ...rest,*/}\n                {/*                t,*/}\n                {/*                data: toggleData,*/}\n                {/*                value: chartPeriod,*/}\n                {/*                setValue: setChartPeriod*/}\n                {/*            }} />*/}\n                {/*        </Box>*/}\n                {/*    </StyledBtnGroupWrapper>*/}\n                {/*    <ScaleAreaChart type={ChartType.Trend} data={[]}/>*/}\n                {/*</StyleWrapper>*/}\n                \n                <TableWrapStyled marginY={2} paddingY={2} paddingX={3} flex={1}>\n                    <Grid item xs={12} display={'flex'} flexDirection={'column'}>\n                        <Typography variant={'h5'} marginBottom={3}>{t('labelMyAmm')}</Typography>\n                        <MyPoolTable\n                            rawData={myPoolRow}\n                            // pagination={{pageSize: 10}}\n                            handleDeposit={(row: any) => {\n                                const pair = `${row.ammDetail.coinAInfo.name}-${row.ammDetail.coinBInfo.name}`\n                                JumpToLiqudity(pair, 'add')\n                            }}\n                            handleWithdraw={(row: any) => {\n                                const pair = `${row.ammDetail.coinAInfo.name}-${row.ammDetail.coinBInfo.name}`\n                                JumpToLiqudity(pair, 'remove')\n                            }}\n                            handlePageChange={() => {\n                            }}\n                        />\n                    </Grid>\n                </TableWrapStyled>\n                {/* <Typography paddingLeft={2} variant={'h5'}>{t('labelMyAmmRecord')}</Typography> */}\n                {/* <TableWrapStyled container marginTop={2}  paddingBottom={2} flex={1}>\n                    <Grid item xs={12} display={'flex'} flexDirection={'column'}>\n                        <AmmRecordTable rawData={myAmmMarketArray} handlePageChange={_handlePageChange} page={page}/>\n                    </Grid>\n                </TableWrapStyled> */}\n            </>\n        )\n    })\n    \nexport default MyLiquidity\n","import styled from '@emotion/styled';\nimport { Box, Button, Divider, Grid, Switch, Typography } from '@material-ui/core';\nimport React from 'react';\nimport { UpColor, Currency, DropDownIcon } from '@loopring-web/common-resources';\nimport {\n    BtnLanguage,\n    OutlineSelect,\n    OutlineSelectItem, QRCodePanel,\n    TypographyStrong, useSettings\n} from '@loopring-web/component-lib';\nimport { Trans, useTranslation, WithTranslation, withTranslation } from 'react-i18next';\nimport { useTheme } from '@emotion/react';\nimport { LanguageKeys } from '@loopring-web/common-resources';\nimport { useExportAccoutInfo } from './hook';\n\n// const MuiModalStyled = styled(MuiModal)`\n//   //background: ${({theme}) => theme.colorBase.background().secondary};\n//   // .MuiBackdrop-root{\n//   //   z-index: -1;\n//   //   background-color: ${({theme}) => theme.colorBase.background().outline};\n//   // }\n//   display: flex;\n//   align-items: center;\n//   justify-content: center;\n// ` as typeof MuiModal;\n// const BlockStyled = styled(Box)`\n//   ${({theme}) => theme.border.defaultFrame({c_key: 'blur', d_R: 1})};\n//   background: ${({theme}) => theme.colorBase.background().secondary};\n//   max-height: var(--panel-setting-height);\n//   max-width: var(--panel-setting-width);\n//   display: flex;\n//   justify-content: space-around;\n//   align-items: center;\n//   overflow: scroll;\n//   padding: ${({theme}) => theme.unit*8}px\n// `;\n\nconst StyledPaper = styled(Grid)`\n  width: 100%;\n  height: 100%;\n  background: var(--color-box);\n  border-radius: ${({ theme }) => theme.unit}px;\n`\n//${({theme}) => theme.border.defaultFrame({c_key: 'blur', d_R: 1})};\n\nconst StyledSwitch = styled(Switch)(({theme}) => ({\n    \"& .Mui-checked\": {\n        color: theme.colorBase.textPrimary,\n        '& + .MuiSwitch-track.MuiSwitch-track': {\n            border: `solid ${theme.colorBase.success}`,\n        },\n        '& .MuiSwitch-thumb': {\n            backgroundColor: theme.colorBase.success,\n        }\n    },\n    '& .MuiSwitch-track': {\n        border: `solid ${theme.colorBase.error}`,\n        opacity: 1\n    },\n    '& .MuiSwitch-thumb': {\n        backgroundColor: theme.colorBase.error,\n    }\n}));\n\nexport const BtnCurrency = ({t, currency, label, handleChange}: any) => {\n    const [state, setState] = React.useState<string>(currency ? currency : Currency.dollar);\n    const _handleChange = React.useCallback((event: React.ChangeEvent<any>) => {\n        setState(event.target.value);\n        if (handleChange) {\n\n            handleChange(event.target.value)\n        }\n    }, [handleChange])\n    return <OutlineSelect aria-label={t(label)} IconComponent={DropDownIcon}\n                          labelId=\"language-selected\"\n                          id=\"language-selected\"\n                          value={state} autoWidth\n                          onChange={_handleChange}>\n        <OutlineSelectItem value={Currency.dollar}>$ {t('labelUSDollar')}</OutlineSelectItem>\n            <OutlineSelectItem value={Currency.yen}>¥ {t('labelCNYYuan')}</OutlineSelectItem>\n    </OutlineSelect>\n}\n\nconst StyledDivider = styled(Divider)`\n  margin: ${({theme}) => theme.unit}px 0 ${({theme}) => theme.unit}px 0px;\n`\nconst DividerBlock = styled(Divider)`\n  margin: 0;\n  flex: 1;\n  width: 1px;\n  height: ${({theme}) => theme.unit * 3}px;\n  background: var(--color-divide)\n`\n\n\n\nexport const SettingPanel = withTranslation(['common', 'layout'])(({t,i18n, ...rest}: & WithTranslation) => {\n    const theme = useTheme();\n    const {setUpColor,setLanguage,setCurrency,currency,upColor} = useSettings()\n    const language = i18n.language;\n    const handleOnLanguageChange = (lang: LanguageKeys) => {\n        setLanguage(lang);\n        i18n.changeLanguage(lang);\n    }\n    const handleOnCurrencyChange = (value: any) => {\n        setCurrency(value);\n    }\n    const handleColorChange = (e:any) => {\n        if(e.target.checked){\n            setUpColor(UpColor.green) ;\n        }else{\n            setUpColor(UpColor.red);\n        }\n    }\n\n    const { exportAccInfo } = useExportAccoutInfo()\n\n    return <Grid container direction={'column'} justifyContent={'space-between'} alignItems={'stretch'} flexWrap={'nowrap'}>\n        {/* <Typography variant={'h5'} component={'h3'} paddingLeft={2}>{t('labelTitleSecurity')}</Typography>\n        <StyledPaper item xs={12} display={'flex'} flexDirection={'column'} marginY={2}  paddingY={3}>\n            <Box component={'section'} display={'flex'} flexDirection={'column'} marginBottom={1}>\n                <Typography variant={'body2'} component={'h4'} paddingX={3}  marginBottom={1}>{t('labelTitleResetL2Keypair')}</Typography>\n                <Grid container display={'flex'} flexDirection={'row'} justifyContent={'stretch'}\n                      alignItems={'flex-start'} paddingX={3} >\n                    <Grid item xs={8} display={'flex'} flexDirection={'column'}>\n                        <Typography variant={'body1'} component={'p'}>\n                            <Trans i18nKey=\"resetDescription\">\n                                Create a new signing key for layer-2 authentication (no backup needed). This will\n                                <TypographyStrong component={'span'}>cancel all your pending orders</TypographyStrong>.\n                            </Trans>\n                        </Typography>\n                    </Grid>\n                    <Grid item xs={4} display={'flex'} flexDirection={'column'} justifyContent={'space-evenly'}\n                          alignItems={'flex-end'} alignSelf={'stretch'}>\n                        <Button variant={'outlined'} size={'medium'} color={'primary'} disabled={false}>{t('labelBtnReset')}</Button>\n                    </Grid>\n                    <Grid item xs={12} display={'flex'} flexDirection={'row'} justifyContent={'flex-end'}\n                          alignItems={'center'} alignSelf={'stretch'}>\n                        <Typography variant={'body2'} component={'p'}\n                                    paddingTop={1}>{t('labelHadChangPassword', {passDay: '14 hours'})}</Typography>\n                    </Grid>\n\n                </Grid>\n            </Box>\n            <StyledDivider/>\n            <Box component={'section'} display={'flex'} flexDirection={'column'}>\n                <Typography variant={'body2'} component={'h4'} paddingX={3} marginY={1}>{t('labelTitleExportAccount')}</Typography>\n\n                <Grid container display={'flex'} flexDirection={'row'} justifyContent={'stretch'}\n                      alignItems={'flex-start'} paddingX={3} marginBottom={2}>\n                    <Grid item xs={7} display={'flex'} flexDirection={'column'}>\n                        <Typography variant={'body1'} component={'p'}>{t('descriptionExportAccount')}</Typography>\n                    </Grid>\n                    <Grid item xs={5} display={'flex'} flexDirection={'column'} justifyContent={'space-evenly'}\n                          alignItems={'flex-end'} alignSelf={'stretch'}>\n                        <Grid item> <Button onClick={() => {\n                            exportAccInfo()\n                        }} variant={'outlined'} size={'medium'}\n                                            color={'primary'} disabled={false}>{t('labelBtnExportAccount')}</Button></Grid>\n                    </Grid>\n                </Grid>\n            </Box>\n        </StyledPaper> */}\n\n        <Typography variant={'h5'} component={'h3'} paddingLeft={2}>{t('labelTitlePreferences')}</Typography>\n        <StyledPaper item xs={12} display={'flex'} flexDirection={'column'} marginY={2} paddingY={3}>\n            <Box component={'section'} display={'flex'} flexDirection={'column'}>\n                {/*<Typography variant={'body2'} component={'h4'} paddingX={2}>{t('labelTitleLayout')}</Typography>*/}\n                {/*<StyledDivider/>*/}\n                <Grid container display={'flex'} flexDirection={'row'} justifyContent={'stretch'}\n                      alignItems={'flex-start'} paddingX={3} marginBottom={2}>\n                    <Grid item xs={7} display={'flex'} flexDirection={'column'}>\n                        <Typography variant={'body1'} component={'p'}>{t('labelLanguage')}</Typography>\n                    </Grid>\n                    <Grid item xs={5} display={'flex'} flexDirection={'column'} justifyContent={'space-evenly'}\n                          alignItems={'flex-end'} alignSelf={'stretch'}>\n                        <Grid item>\n                            <BtnLanguage {...{\n                                t, ...rest,\n                                language,\n                                label: 'languageSetting',\n                                handleChange: handleOnLanguageChange\n                            }}></BtnLanguage>\n                        </Grid>\n                    </Grid>\n                </Grid>\n                <StyledDivider/>\n                <Grid container display={'flex'} flexDirection={'row'} justifyContent={'stretch'}\n                      alignItems={'flex-start'} paddingX={3} marginY={2}>\n                    <Grid item xs={7} display={'flex'} flexDirection={'column'}>\n                        <Typography variant={'body1'} component={'p'}>{t('labelCurrency')}</Typography>\n                    </Grid>\n                    <Grid item xs={5} display={'flex'} flexDirection={'column'} justifyContent={'space-evenly'}\n                          alignItems={'flex-end'} alignSelf={'stretch'}>\n                        <Grid item>\n                            <BtnCurrency {...{\n                                t, ...rest,\n                                currency,\n                                label: 'currencySetting',\n                                handleChange: handleOnCurrencyChange\n                            }}></BtnCurrency>\n\n                        </Grid>\n                    </Grid>\n                </Grid>\n                <StyledDivider/>\n                <Grid container display={'flex'} flexDirection={'row'} justifyContent={'stretch'}\n                      alignItems={'flex-start'} paddingX={3} marginTop={2}>\n                    <Grid item xs={7} display={'flex'} flexDirection={'column'}>\n                        <Typography variant={'body1'} component={'p'}>{t('labelColors')}</Typography>\n                    </Grid>\n                    <Grid item xs={5} display={'flex'} flexDirection={'row'} justifyContent={'flex-end'}\n                          alignItems={'center'} alignSelf={'stretch'}>\n                        <Typography variant={'body1'} component={'span'} paddingX={2}>\n                            <Trans i18nKey=\"whichColorIsUp\">\n                                <span style={{\n                                    textTransform: 'capitalize',\n                                    color: upColor === UpColor.green ? theme.colorBase.success : theme.colorBase.error\n                                }}>{{up: upColor === UpColor.green ? t('labelgreen') : t('labelred')}} up</span>\n                                and <span style={{\n                                textTransform: 'capitalize',\n                                color: upColor === UpColor.green ? theme.colorBase.error : theme.colorBase.success\n                            }}>{{down: upColor === UpColor.green ? t('labelred') : t('labelgreen')}} down</span>\n                            </Trans>\n                        </Typography>\n                        <StyledSwitch checked={upColor === UpColor.green} color=\"default\"\n                                      onChange={handleColorChange}/>\n                    </Grid>\n                </Grid>\n            </Box>\n\n        </StyledPaper>\n\n    </Grid>\n})\n\n// export const SettingPage = ({open,onClose}: { open:boolean, onClose:(e:any)=>void})=>{\n//     return  <MuiModalStyled\n//         open={open}\n//         onClose={onClose}\n//         aria-labelledby=\"modal-modal-title\"\n//         aria-describedby=\"modal-modal-description\"\n//     >\n//         <BlockStyled >\n//            <SettingPanel/>\n//         </BlockStyled>\n//     </MuiModalStyled>\n// }\n\n\n","import { useCallback } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { RootState } from \"stores\";\n\nimport { myLog } from \"utils/log_tools\";\nimport { Account, AccountStatus } from '@loopring-web/common-resources';\nimport exportFromJSON from 'export-from-json';\n\nexport function useResetAccount() {\n\n}\n\nexport function useExportAccoutInfo() {\n    const account: Account = useSelector((state: RootState) => state.account)\n\n    const exportAccInfo = useCallback(() => {\n\n        if (account.readyState !== AccountStatus.ACTIVATED) {\n            return undefined\n        }\n\n        const accInfo = {\n            address: account.accAddress,\n            accountId: account.accountId,\n            nonce: account.level,\n            apiKey: account.apiKey,\n            publicX: account.publicKey.x,\n            publicY: account.publicKey.y,\n            privateKey: account.eddsaKey,\n        }\n\n        const fileName = 'accountInfo'\n        const exportType = 'json'\n\n        exportFromJSON({data: accInfo, fileName, exportType})\n\n        myLog('exportFromJSON:', accInfo)\n\n    }, [account])\n\n    return {\n        exportAccInfo,\n    }\n}\n","import { useRouteMatch } from 'react-router'\n\nimport { Box, Typography } from '@material-ui/core'\nimport { Button, SubMenu, SubMenuList as BasicSubMenuList, useOpenModals, } from '@loopring-web/component-lib'\nimport { useTranslation, withTranslation } from 'react-i18next'\nimport styled from '@emotion/styled'\nimport { AccountStatus, fnType, LoadingIcon, SagaStatus, subMenuLayer2 } from '@loopring-web/common-resources'\n\nimport TxPanel from './TxPanel'\nimport AssetPanel from './AssetPanel'\nimport TradePanel from './TradePanel'\nimport AmmPanel from './AmmPanel'\nimport MyLiqudityPanel from './MyLiquidityPanel'\nimport { SettingPanel } from '../SettingPage';\n// import { useModalProps } from '../../layouts/header/hook';\nimport React from 'react';\nimport { useAccount } from '../../stores/account';\nimport { accountStaticCallBack, btnLabel, btnClickMap } from '../../layouts/connectStatusCallback';\nimport { deepClone } from '../../utils/obj_tools';\n\nimport { i18n } from \"@loopring-web/common-resources\"\n\n// import { useModalProps } from '../../modal';\n\nexport const subMenu = subMenuLayer2\n\nconst BoxStyle = styled(Box)`\n  ${({theme}) => `\n    background: var(--color-box);\n    width: 100%;\n    min-width:auto;\n    ${theme.border.defaultFrame({c_key: 'blur'})};\n    & > div{\n      background-color:initial;\n      border:0;\n      width:auto;\n      min-width: var(--swap-box-width);\n      max-width: 520px;\n    }\n    `\n  }\n\n` as typeof Box\nconst BtnConnect = withTranslation(['common'], {withRef: true})(({t}: any) => {\n    const { status: accountStatus} = useAccount();\n    // const {setShowAccount} = useOpenModals();\n    const [label, setLabel] = React.useState(undefined);\n\n    const _btnLabel: typeof btnClickMap = Object.assign(deepClone(btnLabel), {\n        [ fnType.NO_ACCOUNT ]: [\n            function () {\n                return `depositTitleAndActive`\n            }\n        ],\n        [ fnType.ERROR_NETWORK ]: [\n            function () {\n                return `depositTitleAndActive`\n            }\n        ],\n    });\n\n    React.useEffect(() => {\n        if (accountStatus === SagaStatus.UNSET) {\n            setLabel(accountStaticCallBack(_btnLabel));\n        }\n    }, [accountStatus, i18n.language])\n\n    const _btnClickMap: typeof btnClickMap = Object.assign(deepClone(btnClickMap), {});\n\n    return <Button variant={'contained'} size={'large'} color={'primary'} fullWidth={true}\n                   style={{maxWidth: '280px'}} onClick={() => {\n        accountStaticCallBack(_btnClickMap, [])\n    }\n    }>{t(label)}</Button>\n}) as typeof Button\nconst SubMenuList = withTranslation(['layout', 'common'], {withRef: true})(BasicSubMenuList);\nexport const Layer2Page = () => {\n\n    let match: any = useRouteMatch(\"/layer2/:item\")\n    const {\n        account,\n        // updateAccount,\n        // resetAccount,\n        // setShouldShow,\n        // status: accountStatus,\n        // statusUnset: accountStatusUnset\n    } = useAccount();\n\n    const {t, ...rest} = useTranslation();\n    const selected = match?.params.item ?? 'assets';\n    // const {depositProps} = useDeposit()\n\n    const viewTemplate = React.useMemo(() => {\n        switch (account.readyState) {\n            case AccountStatus.UN_CONNECT:\n                return <Box flex={1} display={'flex'} justifyContent={'center'} flexDirection={'column'} alignItems={'center'}\n                >\n                    <Typography marginY={3} variant={'h1'}>{t('describeTitleConnectToWallet')}</Typography>\n                    <BtnConnect/>\n                </Box>\n                break\n            case AccountStatus.LOCKED:\n                return <Box flex={1} display={'flex'} justifyContent={'center'} flexDirection={'column'} alignItems={'center'}>\n                    <Typography marginY={3} variant={'h1'}>{t('describeTitleLocked')}</Typography>\n                    <BtnConnect/>\n                </Box>\n                break\n            case AccountStatus.NO_ACCOUNT:\n                return <Box flex={1} display={'flex'} justifyContent={'center'} flexDirection={'column'} alignItems={'center'}>\n                    <Typography marginY={3} variant={'h1'}>{t('describeTitleNoAccount')}</Typography>\n                    <BtnConnect/>\n                </Box>\n                break\n            case AccountStatus.DEPOSITING:\n                return <Box flex={1} display={'flex'} justifyContent={'center'} flexDirection={'column'} alignItems={'center'}\n                >\n                    <LoadingIcon color={'primary'} style={{width: 60, height: 60}}/>\n                    <Typography marginY={3} variant={'h1'}>{t('describeTitleOpenAccounting')}</Typography>\n                    {/*<BtnConnect/>*/}\n                </Box>\n                break\n            case AccountStatus.ERROR_NETWORK:\n                return <Box flex={1} display={'flex'} justifyContent={'center'} flexDirection={'column'} alignItems={'center'}\n                >\n                    <Typography marginY={3}\n                                variant={'h1'}>{t('describeTitleOnErrorNetwork', {connectName: account.connectName})}</Typography>\n                    {/*<BtnConnect/>*/}\n                </Box>\n                break\n            case AccountStatus.ACTIVATED:\n                return <>\n                    <Box width={'200px'} display={'flex'} justifyContent={'stretch'} marginRight={3}\n                         marginBottom={2}>\n                        <SubMenu>\n                            <SubMenuList selected={selected} subMenu={subMenu as any}/>\n                        </SubMenu>\n                    </Box>\n                    <Box minHeight={420} display={'flex'} alignItems={'stretch'} flexDirection={'column'} marginTop={0}\n                         flex={1}>\n\n                        {selected === 'assets' && <AssetPanel/>}\n                        {selected === 'my-liquidity' && <MyLiqudityPanel/>}\n                        {selected === 'transactions' && <TxPanel/>}\n                        {selected === 'trades' && <TradePanel/>}\n                        {selected === 'ammRecords' && <AmmPanel/>}\n                        {/* {selected === 'orders' && <OrderPanel />} */}\n                        {selected === 'setting' && <SettingPanel/>}\n                    </Box>\n                </>\n            default:\n                break\n        }\n    }, [t, account.readyState, selected])\n\n    return <>\n        {viewTemplate}\n        {/*    {*/}\n\n        {/*   */}\n        {/*    readyState === AccountStatus.UN_CONNECT*/}\n        {/*        ? <Redirect to=\"/\"/>*/}\n        {/*        :*/}\n        {/*        readyState === AccountStatus.NO_ACCOUNT*/}\n        {/*        || readyState === AccountStatus.DEPOSITING ?*/}\n        {/*            <BoxStyle display={'flex'} flexWrap={'wrap'} alignItems={'center'} justifyContent={'center'}*/}\n        {/*                      alignContent={'flex-start'}>*/}\n        {/*                <DepositPanel  {...{*/}\n        {/*                    ...rest, ...depositProps,*/}\n        {/*                    title: t('depositTitleAndActive'),*/}\n        {/*                    description: 'depositAndActiveDescription'*/}\n        {/*                }} > </DepositPanel>*/}\n        {/*            </BoxStyle> : <>*/}\n        {/*                <Box width={'200px'} display={'flex'} justifyContent={'stretch'} marginRight={3} marginBottom={2}>*/}\n        {/*                    <SubMenu>*/}\n        {/*                        <SubMenuList selected={selected} subMenu={subMenu as any}/>*/}\n        {/*                    </SubMenu>*/}\n        {/*                </Box>*/}\n        {/*                <Box minHeight={420} display={'flex'} alignItems={'stretch'} flexDirection={'column'} marginTop={0}*/}\n        {/*                     flex={1}>*/}\n        {/*                    {readyState === AccountStatus.LOCKED ?*/}\n        {/*                        <>*/}\n        {/*                            {*/}\n        {/*                                selected === 'setting' ? <SettingPanel/> :*/}\n        {/*                                    <Box flex={1} display={'flex'} justifyContent={'center'} alignItems={'center'}*/}\n        {/*                                         marginTop={-10}>*/}\n        {/*                                        <BtnConnect/>*/}\n        {/*                                    </Box>*/}\n\n        {/*                            }*/}\n        {/*                        </> :*/}\n        {/*                       */}\n\n        {/*                    }*/}\n\n\n        {/*                </Box>*/}\n        {/*            </>*/}\n        {/*}*/}\n    </>\n\n\n}\n","import { WithTranslation, withTranslation, } from 'react-i18next'\nimport { Box, OutlinedInput, InputAdornment } from '@material-ui/core'\nimport styled from '@emotion/styled'\n\nimport React from 'react';\nimport { useAmmMapUI } from './hook';\n\nimport { PoolsTable } from '@loopring-web/component-lib';\nimport { SearchIcon } from '@loopring-web/common-resources'\nimport { AmmPoolActivityRule, LoopringMap } from 'loopring-sdk/dist/defs/loopring_defs';\n\nconst WrapperStyled = styled(Box)`\n    flex: 1;\n    display: flex;\n    flex-direction: column;\n`\n\nconst StylePaper = styled(Box)`\n    width: 100%;\n    height: 100%;\n    flex: 1;\n    background: var(--color-box);\n    border-radius: ${({theme}) => theme.unit}px;\n\n    .rdg {\n        flex: 1;\n    }\n\n` as typeof Box;\n\n// const StylePaper = styled(Box)`\n//     width: 100%;\n//     height: 100%;\n//     flex: 1;\n//     background-color: ${({theme}) => theme.colorBase.background().default};\n//     border-radius: ${({theme}) => theme.unit}px;\n\nexport const PoolsPanel = withTranslation('common')(<R extends { [ key: string ]: any }, I extends { [ key: string ]: any }>\n({t, ammActivityMap, ...rest}: WithTranslation\n    & {\n    ammActivityMap: LoopringMap<LoopringMap<AmmPoolActivityRule[]>> | undefined }) => {\n    const container = React.useRef(null);\n    const [pageSize, setPageSize] = React.useState(10);\n    const [filterValue, setFilterValue] = React.useState('');\n    const {updateTickersUI, rawData, page} = useAmmMapUI({pageSize});\n\n    React.useEffect(() => {\n        // @ts-ignore\n        let height = container?.current?.offsetHeight;\n        if (height) {\n            setPageSize(Math.floor((height - 120) / 44) - 1);\n        }\n    }, [container, pageSize]);\n\n    const getFilteredData = React.useCallback(() => {\n        if (!filterValue) {\n            return rawData\n        }\n        return rawData.filter(o => {\n            const coinA = o.coinAInfo.name.toLowerCase()\n            const coinB = o.coinBInfo.name.toLowerCase()\n            const formattedValue = filterValue.toLowerCase()\n            return coinA.includes(formattedValue) || coinB.includes(formattedValue) \n        })\n    }, [filterValue, rawData])\n\n    const handlePageChange = React.useCallback((page) => {\n        updateTickersUI(page)\n    }, [updateTickersUI]);\n    return (\n        <>\n            <WrapperStyled>\n                <Box marginBottom={3}>\n                    <OutlinedInput\n                        {...{\n                            placeholder: t('labelFilter'),\n                            value: filterValue,\n                            onChange: (event: any) => {\n                                setFilterValue(event.currentTarget?.value);\n                            }\n                        }}\n                        key={'search'}\n                        className={'search'}\n                        aria-label={'search'}\n                        startAdornment={<InputAdornment position=\"start\">\n                            <SearchIcon/>\n                        </InputAdornment>}\n                    />\n                </Box>\n                <StylePaper display={'flex'} flexDirection={'column'} ref={container}>\n                    <PoolsTable {...{\n                        rawData: getFilteredData(),\n                        handlePageChange,\n                        page,\n                        pagination: {\n                            pageSize\n                        },\n                        showFilter: false,\n                        showLoading: !rawData.length\n                    }} />\n                </StylePaper>\n            </WrapperStyled>\n        </>\n    )\n})\n","import React from 'react';\nimport { useAmmMap } from '../../../stores/Amm/AmmMap';\nimport { AmmDetail, CustomError, ErrorMap, SagaStatus, } from '@loopring-web/common-resources';\nimport { deepClone } from '../../../utils/obj_tools';\nimport { useTokenMap } from '../../../stores/token';\nimport { useSocket } from '../../../stores/socket';\nimport { useTicker } from '../../../stores/ticker';\n\n// import { tickerService } from '../../../services/tickerService';\n\nexport function useAmmMapUI<R extends { [ key: string ]: any }, I extends { [ key: string ]: any }>({pageSize}: { pageSize: number }) {\n    const [rawData, setRawData] = React.useState<Array<AmmDetail<any>> | []>([]);\n    const [page, setPage] = React.useState<number>(1);\n    const {coinMap} = useTokenMap();\n    const nodeTimer = React.useRef<NodeJS.Timeout | -1>(-1);\n\n    const {ammMap, status: ammMapStatus,} = useAmmMap();\n    const {\n        tickerMap,\n        status: tickerStatus,\n        updateTickers,\n    } = useTicker();\n    const {status: socketStatus, statusUnset: socketStatusUnset,} = useSocket();\n    const updateRawData = React.useCallback((tickerMap) => {\n        try {\n            const _ammMap = deepClone(ammMap);\n            for (let tickerMapKey in tickerMap) {\n                if (_ammMap[ 'AMM-' + tickerMapKey ]) {\n                    _ammMap[ 'AMM-' + tickerMapKey ].tradeFloat = {\n                        ..._ammMap[ 'AMM-' + tickerMapKey ].tradeFloat,\n                        ...tickerMap[ tickerMapKey ],\n                        // APY: _ammMap['AMM-' + tickerMapKey ].APY\n                    }\n\n                }\n            }\n            setRawData(Object.keys(_ammMap).map((ammKey: string) => {\n                if (coinMap) {\n                    _ammMap[ ammKey ][ 'coinAInfo' ] = coinMap[ _ammMap[ ammKey ][ 'coinA' ] ];\n                    _ammMap[ ammKey ][ 'coinBInfo' ] = coinMap[ _ammMap[ ammKey ][ 'coinB' ] ];\n                }\n                return _ammMap[ ammKey ];\n            }))\n        } catch (error) {\n            throw new CustomError({...ErrorMap.NO_TOKEN_MAP, options: error})\n        }\n\n    }, [ammMap]);\n    const updateTickerLoop = React.useCallback((_keys?: string[]) => {\n        updateTickers(_keys as string[]);\n        if (nodeTimer.current  !== -1) {\n            clearTimeout(nodeTimer.current);\n        }\n        nodeTimer.current = setTimeout(() => {\n            updateTickerLoop(_keys)\n        }, 1000)\n    },[updateTickers])\n    React.useEffect(() => {\n        return () => {\n            clearTimeout(nodeTimer.current as NodeJS.Timeout);\n        }\n    }, [nodeTimer.current]);\n\n    const updateTickersUI = React.useCallback((_page) => {\n        setPage(_page);\n        if (ammMap && Object.keys(ammMap).length > 0) {\n            const _keys:string[] = []\n            for (let i = (page - 1) * pageSize; i < Object.keys(ammMap).length && i < (page - 1) * pageSize + pageSize; i++) {\n                _keys.push(Object.keys(ammMap)[ i ]);\n            }\n            updateTickerLoop(_keys)\n        }\n    }, [ammMap, pageSize]);\n    React.useEffect(() => {\n        if (ammMap && Object.keys(ammMap).length !== 0) {\n            updateTickersUI(page)\n        }\n\n    }, []);\n\n\n    React.useEffect(() => {\n        if (tickerStatus === SagaStatus.UNSET){\n            updateRawData(tickerMap)\n        }\n    }, [tickerStatus]);\n    React.useEffect(() => {\n        if(ammMapStatus === SagaStatus.UNSET){\n            updateTickersUI(1)\n        }\n    }, [ammMapStatus, updateTickersUI]);\n    return {\n        page,\n        rawData,\n        updateTickersUI,\n    }\n}\n\n","import { AmmPanel, AmmPanelType, Toast } from '@loopring-web/component-lib';\nimport { AmmData, AmmInData, CoinInfo, IBData, WalletMap } from '@loopring-web/common-resources';\nimport { useAmmPanel } from './hooks';\nimport React from 'react';\nimport { Box } from '@material-ui/core';\nimport { AmmPoolSnapshot, TickerData } from 'loopring-sdk';\nimport { TradeBtnStatus } from '@loopring-web/component-lib';\nimport { TOAST_TIME } from 'defs/common_defs';\n\nexport const AmmPanelView = <T extends AmmData<C extends IBData<I> ? C : IBData<I>>, I,\n    ACD extends AmmInData<I>,\n    C = IBData<I>>({\n                       pair,\n                       walletMap,\n                       ammType, snapShotData,\n                       ...rest\n                   }: {\n    pair: { coinAInfo: CoinInfo<C> | undefined, coinBInfo: CoinInfo<C> | undefined },\n    snapShotData: { tickerData: TickerData | undefined, ammPoolsBalance: AmmPoolSnapshot | undefined } | undefined\n    walletMap: WalletMap<C>\n    ammType?: keyof typeof AmmPanelType\n} & any) => {\n    const {\n        ammAlertText,\n        ammToastOpen,\n        setAmmToastOpen,\n\n\n        ammCalcData,\n        ammJoinData,\n        ammExitData,\n        handleJoinAmmPoolEvent,\n        handleExitAmmPoolEvent,\n        onAmmRemoveClick,\n        onAmmAddClick,\n        isJoinLoading,\n        isExitLoading,\n        ammDepositBtnI18nKey,\n        ammWithdrawBtnI18nKey,\n    } = useAmmPanel({\n        pair,\n        snapShotData, ammType: ammType ? ammType : AmmPanelType.Deposit\n    })\n\n    // const [index, setIndex] = React.useState(AmmPanelTypeMap[ tabSelected ]);\n    const isLoading = React.useCallback(()=>{\n        \n        if((!snapShotData || !snapShotData.tickerData || !snapShotData.ammPoolsBalance)\n            &&  ammDepositBtnI18nKey === undefined\n            &&  ammWithdrawBtnI18nKey === undefined\n        ) {\n          return true\n        }\n    \n        if(isJoinLoading || isExitLoading){\n            return true   \n            \n        }\n    },[snapShotData,ammWithdrawBtnI18nKey,ammWithdrawBtnI18nKey,isJoinLoading,isExitLoading])\n\n\n    return <> \n    \n    <Toast alertText={ammAlertText as string} open={ammToastOpen} \n            autoHideDuration={TOAST_TIME} setOpen={setAmmToastOpen}/>\n\n    {pair ?\n        <AmmPanel {...{...rest}}\n                  ammDepositData={ammJoinData}\n                  ammWithdrawData={ammExitData}\n                  ammCalcData={ammCalcData}\n                  handleAmmAddChangeEvent={handleJoinAmmPoolEvent}\n                  handleAmmRemoveChangeEvent={handleExitAmmPoolEvent}\n                  onAmmRemoveClick={onAmmRemoveClick}\n                  onAmmAddClick={onAmmAddClick}\n                  tabSelected={ammType ? ammType : AmmPanelType.Deposit}\n                  ammDepositBtnI18nKey={ammDepositBtnI18nKey}\n                  ammWithdrawBtnI18nKey={ammWithdrawBtnI18nKey}\n                  ammDepositBtnStatus={isLoading()?TradeBtnStatus.LOADING:TradeBtnStatus.AVAILABLE}\n                  ammWithdrawBtnStatus={isLoading()?TradeBtnStatus.LOADING:TradeBtnStatus.AVAILABLE}\n\n        /> : <Box width={'var(--swap-box-width)'}/>}\n    </>\n\n}","import React, { useState } from \"react\";\nimport {\n    AccountStatus,\n    AmmData,\n    AmmInData,\n    CoinInfo,\n    fnType,\n    globalSetup,\n    IBData,\n    SagaStatus,\n} from '@loopring-web/common-resources';\nimport { AmmPanelType } from '@loopring-web/component-lib';\nimport { IdMap, useTokenMap } from '../../../stores/token';\nimport { useAmmMap } from '../../../stores/Amm/AmmMap';\nimport { accountStaticCallBack, ammPairInit, btnLabel, btnClickMap, makeCache, makeWalletLayer2 } from '../../../hooks/help';\nimport * as sdk from 'loopring-sdk';\nimport {\n    AmmPoolRequestPatch,\n    AmmPoolSnapshot,\n    ChainId,\n    dumpError400,\n    ExitAmmPoolRequest,\n    GetAmmPoolSnapshotRequest,\n    getExistedMarket,\n    GetNextStorageIdRequest,\n    GetOffchainFeeAmtRequest,\n    JoinAmmPoolRequest,\n    LoopringMap,\n    makeExitAmmPoolRequest,\n    makeJoinAmmPoolRequest,\n    MarketInfo,\n    OffchainFeeInfo,\n    OffchainFeeReqType,\n    TickerData,\n    toBig,\n    TokenInfo\n} from 'loopring-sdk';\nimport { useCustomDCEffect } from '../../../hooks/common/useCustomDCEffect';\nimport { useAccount } from '../../../stores/account/hook';\nimport store from \"stores\";\nimport { LoopringAPI } from \"stores/apis/api\";\nimport { debounce } from \"lodash\";\n\nimport { deepClone } from '../../../utils/obj_tools';\nimport { useWalletLayer2 } from \"stores/walletLayer2\";\nimport { myLog } from \"utils/log_tools\";\nimport { REFRESH_RATE_SLOW } from \"defs/common_defs\";\nimport { useTranslation } from \"react-i18next\";\n\nexport const useAmmPanel = <C extends { [key: string]: any }>({\n    pair,\n    ammType,\n    snapShotData,\n}\n    : {\n        pair: { coinAInfo: CoinInfo<C> | undefined, coinBInfo: CoinInfo<C> | undefined },\n        snapShotData: { tickerData: TickerData | undefined, ammPoolsBalance: AmmPoolSnapshot | undefined } | undefined\n        ammType: keyof typeof AmmPanelType\n    }) => {\n\n    const [ammToastOpen, setAmmToastOpen] = useState<boolean>(false)\n    const [ammAlertText, setAmmAlertText] = useState<string>()\n    const { delayAndUpdateWalletLayer2 } = useWalletLayer2();\n    const { t } = useTranslation('common')\n    const { coinMap, tokenMap } = useTokenMap();\n    const { ammMap } = useAmmMap();\n    const { account, status: accountStatus } = useAccount();\n    const [ammCalcData, setAmmCalcData] = React.useState<AmmInData<C> | undefined>();\n    const nodeTimer = React.useRef<NodeJS.Timeout | -1>(-1);\n    const [ammJoinData, setAmmJoinData] = React.useState<AmmData<IBData<C>, C>>({\n        coinA: { belong: undefined } as unknown as IBData<C>,\n        coinB: { belong: undefined } as unknown as IBData<C>,\n        slippage: 0.5\n    } as AmmData<IBData<C>, C>);\n\n    const [ammExitData, setAmmExitData] = React.useState({\n        coinA: { belong: undefined } as unknown as IBData<C>,\n        coinB: { belong: undefined } as unknown as IBData<C>,\n        slippage: 0.5\n    } as AmmData<IBData<C>, C>);\n\n    const [ammDepositBtnI18nKey, setAmmDepositBtnI18nKey] = React.useState<string | undefined>(undefined);\n    const [ammWithdrawBtnI18nKey, setAmmWithdrawBtnI18nKey] = React.useState<string | undefined>(undefined);\n\n    const initAmmData = React.useCallback(async (pair: any, walletMap: any) => {\n        myLog('initAmmData:', account.accAddress, walletMap, pair)\n\n        let _ammCalcData = ammPairInit(\n            {\n                pair,\n                ammType,\n                _ammCalcData: {},\n                tokenMap,\n                coinMap,\n                walletMap,\n                ammMap,\n                tickerData: snapShotData?.tickerData,\n                ammPoolsBalance: snapShotData?.ammPoolsBalance\n            })\n\n        setAmmCalcData({ ...ammCalcData, ..._ammCalcData });\n        if (_ammCalcData.myCoinA) {\n            setAmmJoinData({\n                coinA: { ..._ammCalcData.myCoinA, tradeValue: undefined },\n                coinB: { ..._ammCalcData.myCoinB, tradeValue: undefined },\n                slippage: 0.5\n            })\n            setAmmExitData({\n                coinA: { ..._ammCalcData.lpCoinA, tradeValue: undefined },\n                coinB: { ..._ammCalcData.lpCoinB, tradeValue: undefined },\n                slippage: 0.5\n            })\n        }\n    }, [snapShotData, coinMap, tokenMap, ammCalcData, ammMap, ammType, setAmmCalcData, setAmmJoinData, setAmmExitData])\n\n    const [ammPoolSnapshot, setAmmPoolSnapShot] = useState<AmmPoolSnapshot>()\n    const updateAmmPoolSnapshot = React.useCallback(async () => {\n\n        if (!pair.coinAInfo?.simpleName || !pair.coinBInfo?.simpleName || !LoopringAPI.ammpoolAPI) {\n            setAmmAlertText(t('labelAmmJoinFailed'))\n            return\n        }\n\n        const { marketArray, marketMap, } = store.getState().tokenMap\n\n        const { ammMap } = store.getState().amm.ammMap\n\n        const { market, amm } = getExistedMarket(marketArray, pair.coinAInfo.simpleName as string,\n            pair.coinBInfo.simpleName as string)\n\n        if (!market || !amm || !marketMap) {\n            return\n        }\n\n        const ammInfo: any = ammMap[amm as string]\n\n        const request1: GetAmmPoolSnapshotRequest = {\n            poolAddress: ammInfo.address\n        }\n\n        const response = await LoopringAPI.ammpoolAPI.getAmmPoolSnapshot(request1)\n\n        if (!response) {\n            myLog('err res:', response)\n            return\n        }\n\n        const { ammPoolSnapshot } = response\n\n        setAmmPoolSnapShot(ammPoolSnapshot)\n    }, [pair, ammMap])\n\n    React.useEffect(() => {\n        if (nodeTimer.current !== -1) {\n            clearInterval(nodeTimer.current as NodeJS.Timeout);\n        }\n        nodeTimer.current = setInterval(() => {\n            updateAmmPoolSnapshot()\n        }, REFRESH_RATE_SLOW)\n\n        updateAmmPoolSnapshot()\n\n        return () => {\n            clearInterval(nodeTimer.current as NodeJS.Timeout);\n        }\n\n    }, [nodeTimer.current])\n\n    // set fees\n\n    const [joinFees, setJoinFees] = useState<LoopringMap<OffchainFeeInfo>>()\n    const [exitFees, setExitfees] = useState<LoopringMap<OffchainFeeInfo>>()\n    const { account: { accountId, apiKey } } = useAccount()\n\n    // const { status } = useSelector((state: RootState) => state.account)\n\n    useCustomDCEffect(async () => {\n        if (accountStatus === SagaStatus.UNSET) {\n\n            const label: string | undefined = accountStaticCallBack(btnLabel)\n            setAmmDepositBtnI18nKey(label)\n            setAmmWithdrawBtnI18nKey(label)\n\n            if (!LoopringAPI.userAPI || !pair.coinBInfo?.simpleName\n                || account.readyState !== AccountStatus.ACTIVATED\n                || !ammCalcData || !tokenMap) {\n                return\n            }\n            const feeToken: TokenInfo = tokenMap[pair.coinBInfo.simpleName]\n\n            const requestJoin: GetOffchainFeeAmtRequest = {\n                accountId: account.accountId,\n                requestType: OffchainFeeReqType.AMM_JOIN,\n                tokenSymbol: pair.coinBInfo.simpleName as string,\n            }\n\n            const { fees: feesJoin } = await LoopringAPI.userAPI.getOffchainFeeAmt(requestJoin, account.apiKey)\n            setJoinFees(feesJoin)\n\n            const feeJoin = sdk.toBig(feesJoin[pair.coinBInfo.simpleName]?.fee as string).div('1e' + feeToken.decimals).toString()\n                + ' ' + pair.coinBInfo.simpleName\n\n            const requestExit: GetOffchainFeeAmtRequest = {\n                accountId: account.accountId,\n                requestType: OffchainFeeReqType.AMM_EXIT,\n                tokenSymbol: pair.coinBInfo.simpleName as string,\n            }\n            const { fees: feesExit } = await LoopringAPI.userAPI.getOffchainFeeAmt(requestExit, account.apiKey)\n\n            setExitfees(feesExit)\n\n            const feeExit = sdk.toBig(feesExit[pair.coinBInfo.simpleName].fee as string).div('1e' + feeToken.decimals).toString()\n                + ' ' + pair.coinBInfo.simpleName\n\n            myLog('-> feeJoin:', feeJoin, ' feeExit:', feeExit)\n\n            setAmmCalcData({ ...ammCalcData, feeJoin, feeExit })\n        }\n    }, [setJoinFees, setExitfees, setAmmCalcData, setAmmDepositBtnI18nKey, setAmmWithdrawBtnI18nKey,\n        accountStatus, account.readyState, account.apiKey, account.accountId,\n        pair.coinBInfo?.simpleName, tokenMap, ammCalcData])\n\n    // join\n\n    const [joinRequest, setJoinRequest] = useState<{ ammInfo: any, request: JoinAmmPoolRequest }>()\n\n    const handlerJoinInDebounce = React.useCallback(debounce(async (data, type, joinFees, ammPoolSnapshot) => {\n\n        if (!data || !tokenMap || !data.coinA.belong || !data.coinB.belong || !ammPoolSnapshot || !joinFees || !account?.accAddress) {\n            return\n        }\n\n        myLog('handlerJoinInDebounce', data, type);\n\n        const { slippage } = data\n\n        const slippageReal = sdk.toBig(slippage).div(100).toString()\n\n        const isAtoB = type === 'coinA'\n\n        const { idIndex, marketArray, marketMap, } = store.getState().tokenMap\n\n        const { ammMap } = store.getState().amm.ammMap\n\n        const { market, amm } = getExistedMarket(marketArray, data.coinA.belong as string,\n            data.coinB.belong as string)\n\n        if (!market || !amm || !marketMap) {\n            return\n        }\n\n        const marketInfo: MarketInfo = marketMap[market]\n\n        const ammInfo: any = ammMap[amm as string]\n\n        const coinA = tokenMap[data.coinA.belong as string]\n        const coinB = tokenMap[data.coinB.belong as string]\n\n        const coinA_TV = ammPoolSnapshot.pooled[0]\n        const coinB_TV = ammPoolSnapshot.pooled[1]\n\n        const covertVal = data.coinA.tradeValue ? sdk.toBig(data.coinA.tradeValue)\n            .times('1e' + isAtoB ? coinA.decimals : coinB.decimals).toFixed(0, 0) : '0'\n        const { output, ratio } = sdk.ammPoolCalc(covertVal, isAtoB, coinA_TV, coinB_TV)\n        const rawA = data.coinA.tradeValue ? data.coinA.tradeValue.toString() : 0;\n        const rawB = data.coinB.tradeValue ? data.coinB.tradeValue.toString() : 0;\n        const rawVal = isAtoB ? rawA : rawB;\n\n        const { request } = makeJoinAmmPoolRequest(rawVal,\n            isAtoB, slippageReal, account.accAddress, joinFees as LoopringMap<OffchainFeeInfo>,\n            ammMap[amm], ammPoolSnapshot, tokenMap as any, idIndex as IdMap, 0, 0)\n\n        if (isAtoB) {\n            data.coinB.tradeValue = parseFloat(toBig(request.joinTokens.pooled[1].volume)\n                .div('1e' + coinB.decimals).toFixed(marketInfo.precisionForPrice))\n        } else {\n            data.coinA.tradeValue = parseFloat(toBig(request.joinTokens.pooled[0].volume)\n                .div('1e' + coinA.decimals).toFixed(marketInfo.precisionForPrice))\n        }\n\n        setAmmJoinData({\n            coinA: data.coinA as IBData<C>,\n            coinB: data.coinB as IBData<C>,\n            slippage,\n        })\n\n        setJoinRequest({\n            ammInfo,\n            request\n        })\n\n    }, globalSetup.wait), [account?.accAddress, tokenMap])\n\n    const handleJoinAmmPoolEvent = React.useCallback(async (data: AmmData<IBData<any>>, type: 'coinA' | 'coinB') => {\n        await handlerJoinInDebounce(data, type, joinFees, ammPoolSnapshot)\n    }, [joinFees, handlerJoinInDebounce, ammPoolSnapshot]);\n\n    const addToAmmCalculator = React.useCallback(async function (props\n    ) {\n\n        setJoinLoading(true)\n        if (!LoopringAPI.ammpoolAPI || !LoopringAPI.userAPI || !joinRequest || !account?.eddsaKey?.sk) {\n            myLog(' onAmmJoin ammpoolAPI:', LoopringAPI.ammpoolAPI,\n                'joinRequest:', joinRequest)\n\n            setAmmAlertText(t('labelJoinAmmFailed'))\n            setAmmToastOpen(true)\n\n            setJoinLoading(false)\n            return\n        }\n\n        //todo add loading\n\n        const { ammInfo, request } = joinRequest\n\n        const patch: AmmPoolRequestPatch = {\n            chainId: store.getState().system.chainId as ChainId,\n            ammName: ammInfo.__rawConfig__.name,\n            poolAddress: ammInfo.address,\n            eddsaKey: account.eddsaKey.sk\n        }\n\n        try {\n\n            const request2: GetNextStorageIdRequest = {\n                accountId: account.accountId,\n                sellTokenId: request.joinTokens.pooled[0].tokenId as number\n            }\n            const storageId0 = await LoopringAPI.userAPI.getNextStorageId(request2, account.apiKey)\n\n            const request_1: GetNextStorageIdRequest = {\n                accountId: account.accountId,\n                sellTokenId: request.joinTokens.pooled[1].tokenId as number\n            }\n            const storageId1 = await LoopringAPI.userAPI.getNextStorageId(request_1, account.apiKey)\n\n            request.storageIds = [storageId0.offchainId, storageId1.offchainId]\n            setAmmJoinData({\n                ...ammJoinData, ...{\n                    coinA: { ...ammJoinData.coinA, tradeValue: 0 },\n                    coinB: { ...ammJoinData.coinB, tradeValue: 0 },\n                }\n            })\n            const response = await LoopringAPI.ammpoolAPI.joinAmmPool(request, patch, account.apiKey)\n\n            myLog('join ammpool response:', response)\n\n            if ((response.joinAmmPoolResult as any)?.resultInfo) {\n                setAmmAlertText(t('labelJoinAmmFailed'))\n            } else {\n                setAmmAlertText(t('labelJoinAmmSuccess'))\n                await delayAndUpdateWalletLayer2()\n            }\n\n        } catch (reason) {\n\n            dumpError400(reason)\n\n            setAmmAlertText(t('labelJoinAmmFailed'))\n        } finally {\n            setAmmToastOpen(true)\n            setJoinLoading(false)\n        }\n        if (props.__cache__) {\n            makeCache(props.__cache__)\n        }\n    }, [joinRequest, ammJoinData, account, delayAndUpdateWalletLayer2, t])\n\n    const onAmmDepositClickMap: typeof btnClickMap = Object.assign(deepClone(btnClickMap), {\n        [fnType.ACTIVATED]: [addToAmmCalculator]\n    })\n    const onAmmAddClick = React.useCallback((props: AmmData<IBData<any>>) => {\n        accountStaticCallBack(onAmmDepositClickMap, [props])\n    }, [onAmmDepositClickMap]);\n\n    // exit\n    const [exitRequest, setExitRequest] = useState<{ rawVal: '', ammInfo: any, request: ExitAmmPoolRequest }>()\n\n    // const handler = React.useCallback(async () =>,[])\n    const handleExitInDebounce = React.useCallback(debounce(async (data, type, exitFees, ammPoolSnapshot) => {\n\n        if (!tokenMap || !data.coinA.belong || !data.coinB.belong\n            || !ammPoolSnapshot || !exitFees || !account?.accAddress\n            || data.coinA.tradeValue === undefined || data.coinB.tradeValue === undefined) {\n            return\n        }\n\n        myLog('handleExitInDebounce', data, type);\n\n        const { slippage } = data\n\n        const slippageReal = sdk.toBig(slippage).div(100).toString()\n\n        const isAtoB = type === 'coinA'\n\n        const { idIndex, marketArray, marketMap, } = store.getState().tokenMap\n\n        const { ammMap } = store.getState().amm.ammMap\n\n        const { market, amm } = getExistedMarket(marketArray, data.coinA.belong as string,\n            data.coinB.belong as string)\n\n        if (!market || !amm || !marketMap) {\n            return\n        }\n\n        const marketInfo: MarketInfo = marketMap[market]\n\n        const ammInfo: any = ammMap[amm as string]\n\n        const coinA = tokenMap[data.coinA.belong as string]\n        const coinB = tokenMap[data.coinB.belong as string]\n\n        const coinA_TV = ammPoolSnapshot.pooled[0]\n        const coinB_TV = ammPoolSnapshot.pooled[1]\n\n        const covertVal = data.coinA.tradeValue ? sdk.toBig(data.coinA.tradeValue)\n            .times('1e' + isAtoB ? coinA.decimals : coinB.decimals).toFixed(0, 0) : '0'\n        const { output, ratio } = sdk.ammPoolCalc(covertVal, isAtoB, coinA_TV, coinB_TV)\n\n        const rawVal = isAtoB ? data.coinA.tradeValue.toString() : data.coinB.tradeValue.toString()\n\n        const { request } = makeExitAmmPoolRequest(rawVal, isAtoB, slippageReal, account.accAddress, exitFees as LoopringMap<OffchainFeeInfo>,\n            ammMap[amm], ammPoolSnapshot, tokenMap as any, idIndex as IdMap, 0)\n\n        if (isAtoB) {\n            data.coinB.tradeValue = parseFloat(toBig(request.exitTokens.unPooled[1].volume)\n                .div('1e' + coinB.decimals).toFixed(marketInfo.precisionForPrice))\n        } else {\n            data.coinA.tradeValue = parseFloat(toBig(request.exitTokens.unPooled[0].volume)\n                .div('1e' + coinA.decimals).toFixed(marketInfo.precisionForPrice))\n        }\n\n        setAmmExitData({\n            coinA: data.coinA as IBData<C>,\n            coinB: data.coinB as IBData<C>,\n            slippage,\n        })\n\n        setExitRequest({\n            rawVal,\n            ammInfo,\n            request,\n        })\n        // }\n\n    }, globalSetup.wait), [account?.accAddress, tokenMap])\n\n    const handleExitAmmPoolEvent = React.useCallback(async (data: AmmData<IBData<any>>, type: 'coinA' | 'coinB') => {\n        await handleExitInDebounce(data, type, exitFees, ammPoolSnapshot)\n    }, [exitFees, ammPoolSnapshot, handleExitInDebounce]);\n\n\n    const [isJoinLoading, setJoinLoading] = useState(false)\n\n    const [isExitLoading, setExitLoading] = useState(false)\n\n    const removeAmmCalculator = React.useCallback(async function (props\n    ) {\n        setExitLoading(true);\n        //TODO: onExit\n        myLog('removeAmmCalculator props:', props)\n\n        // const { exitRequest } = props\n\n        if (!LoopringAPI.ammpoolAPI || !LoopringAPI.userAPI || !exitRequest || !account?.eddsaKey?.sk) {\n            myLog(' onExit ammpoolAPI:', LoopringAPI.ammpoolAPI,\n                'exitRequest:', exitRequest)\n\n            setAmmAlertText(t('labelExitAmmFailed'))\n            setAmmToastOpen(true)\n\n            setExitLoading(false);\n            return\n        }\n\n        // const acc: Lv2Account = store.getState().account\n\n        const { ammInfo, request } = exitRequest\n\n        const patch: AmmPoolRequestPatch = {\n            chainId: store.getState().system.chainId as ChainId,\n            ammName: ammInfo.__rawConfig__.name,\n            poolAddress: ammInfo.address,\n            eddsaKey: account.eddsaKey.sk\n        }\n\n        const burnedReq: GetNextStorageIdRequest = {\n            accountId: account.accountId,\n            sellTokenId: request.exitTokens.burned.tokenId as number\n        }\n        const storageId0 = await LoopringAPI.userAPI.getNextStorageId(burnedReq, account.apiKey)\n\n        request.storageId = storageId0.offchainId\n\n        try {\n\n            myLog('exit req:', request)\n            setAmmExitData({\n                ...ammExitData, ...{\n                    coinA: { ...ammExitData.coinA, tradeValue: 0 },\n                    coinB: { ...ammExitData.coinB, tradeValue: 0 },\n                }\n            })\n            const response = await LoopringAPI.ammpoolAPI.exitAmmPool(request, patch, account.apiKey)\n\n            myLog('exit ammpool response:', response)\n\n            if ((response.exitAmmPoolResult as any)?.resultInfo) {\n                setAmmAlertText(t('labelExitAmmFailed'))\n            } else {\n                setAmmAlertText(t('labelExitAmmSuccess'))\n                await delayAndUpdateWalletLayer2()\n            }\n\n        } catch (reason) {\n            dumpError400(reason)\n            setAmmAlertText(t('labelExitAmmFailed'))\n        } finally {\n            setAmmToastOpen(true)\n            setExitLoading(false)\n        }\n\n    }, [exitRequest, ammExitData, delayAndUpdateWalletLayer2, account, t])\n\n    const removeAmmClickMap: typeof btnClickMap = Object.assign(deepClone(btnClickMap), {\n        [fnType.ACTIVATED]: [removeAmmCalculator]\n    })\n\n    const onAmmRemoveClick = React.useCallback((props: AmmData<IBData<any>>) => {\n\n        myLog('onAmmRemoveClick, exitRequest:', exitRequest, ' ammExitData:', ammExitData)\n        accountStaticCallBack(removeAmmClickMap, [props])\n    }, [exitRequest, ammExitData, removeAmmClickMap]);\n\n    const { status: walletLayer2Status } = useWalletLayer2();\n\n    useCustomDCEffect(() => {\n        if (walletLayer2Status !== SagaStatus.UNSET || !pair || !snapShotData) {\n            return\n        }\n\n        const { walletMap } = makeWalletLayer2()\n        initAmmData(pair, walletMap)\n    }, [walletLayer2Status, pair, snapShotData, account?.accAddress,]);\n\n    return {\n        ammAlertText,\n        ammToastOpen,\n        setAmmToastOpen,\n\n        ammCalcData,\n        ammJoinData,\n        ammExitData,\n        isJoinLoading,\n        isExitLoading,\n        handleJoinAmmPoolEvent,\n        handleExitAmmPoolEvent,\n        onAmmRemoveClick,\n        onAmmAddClick,\n        ammDepositBtnI18nKey,\n        ammWithdrawBtnI18nKey,\n    }\n}","import React from \"react\";\nimport { AmmActivity, CoinInfo, MyAmmLP, SagaStatus, TradeFloat } from \"@loopring-web/common-resources\";\nimport { useTokenMap } from \"stores/token\";\nimport { useRouteMatch } from 'react-router';\nimport moment from 'moment'\nimport { AmmDetailStore, useAmmMap } from '../../../stores/Amm/AmmMap';\nimport { useWalletLayer2 } from '../../../stores/walletLayer2';\nimport { makeTickView, makeWalletLayer2, pairDetailBlock, WalletMapExtend } from '../../../hooks/help';\nimport { AmmPoolSnapshot, AmmUserRewardMap, getExistedMarket, TickerData, TradingInterval } from 'loopring-sdk';\nimport { deepClone } from '../../../utils/obj_tools';\nimport { getUserAmmTransaction, makeMyAmmMarketArray } from '../../../hooks/help/marketTable';\nimport { AmmRecordRow } from '@loopring-web/component-lib';\nimport { AmmPoolActivityRule, LoopringMap } from 'loopring-sdk/dist/defs/loopring_defs';\nimport { useSystem } from '../../../stores/system';\nimport { makeMyAmmWithSnapshot } from '../../../hooks/help/makeUIAmmActivityMap';\nimport { useUserRewards } from '../../../stores/userRewards';\nimport { LoopringAPI } from 'stores/apis/api';\n\nconst makeAmmDetailExtendsActivityMap = ({ammMap, coinMap, ammActivityMap, ammKey}: any) => {\n\n    if (ammMap && coinMap) {\n        let ammDetail = deepClone(ammMap[ ammKey as string ]);\n        const ammActivity = ammActivityMap [ ammKey as string ];\n\n        if (ammDetail && ammDetail.coinA) {\n            ammDetail.myCoinA = coinMap[ ammDetail.coinA ];\n            ammDetail.myCoinB = coinMap[ ammDetail.coinB ];\n            ammDetail[ 'activity' ] = ammActivity ? ammActivity : {};\n        }\n        return ammDetail;\n    }\n}\ntype PgAmmDetail<C extends { [ key: string ]: any }> = AmmDetailStore<C> & {\n    myCoinA: CoinInfo<C>,\n    myCoinB: CoinInfo<C>,\n    activity: AmmActivity<C> | undefined\n}\n\nexport type ammHistoryItem = {\n    close: number;\n    timeStamp: number;\n}\n\nexport const useCoinPair = <C extends { [ key: string ]: any }>(ammActivityMap: LoopringMap<LoopringMap<AmmPoolActivityRule[]>>) => {\n    const match: any = useRouteMatch(\"/liquidity/pools/coinPair/:symbol\")\n    const {coinMap, tokenMap, marketArray} = useTokenMap();\n    const {faitPrices} = useSystem();\n    const {ammMap, getAmmMap, status: ammMapStatus} = useAmmMap();\n    const {userRewardsMap, status: useUserRewardsStatus} = useUserRewards()\n\n    // const {account} = useAccount();\n\n\n    // const {ammMap, getAmmMap} = ammMapState;\n\n    // const {ammMap,updateAmmMap} = useAmmMap();\n    // const walletLayer2State = useWalletLayer2();\n    const {walletLayer2, status: walletLayer2Status} = useWalletLayer2();\n    const [walletMap, setWalletMap] = React.useState<WalletMapExtend<C> | undefined>(undefined);\n    // const [ammRecordArray, setAmmRecordArray] = React.useState<AmmRecordRow<C>[]>([]);\n    const [ammMarketArray, setAmmMarketArray] = React.useState<AmmRecordRow<C>[]>([]);\n\n\n    const [myAmmMarketArray, setMyAmmMarketArray] = React.useState<AmmRecordRow<C>[]>([]);\n    const [ammUserRewardMap, setAmmUserRewardMap] = React.useState<AmmUserRewardMap | undefined>(undefined);\n    const [snapShotData, setSnapShotData] = React.useState<{\n        tickerData: TickerData | undefined\n        ammPoolsBalance: AmmPoolSnapshot | undefined\n    } | undefined>(undefined);\n\n    const [myAmm, setMyAmm] = React.useState<MyAmmLP<C>>(\n        {\n            feeA: 0,\n            feeB: 0,\n            feeDollar: 0,\n            feeYuan: 0,\n            reward: 0,\n            rewardToken: undefined as any,\n            balanceA: 0,\n            balanceB: 0,\n            balanceYuan: 0,\n            balanceDollar: 0,\n        })\n    // const [ammPoolsBalance, setAmmpoolsbalance] = React.useState<AmmPoolSnapshot|undefined>(undefined);\n    const [coinPairInfo, setCoinPairInfo] = React.useState<PgAmmDetail<C>>({\n        myCoinA: undefined,\n        myCoinB: undefined,\n        activity: undefined,\n        totalRewards: undefined,\n        amountDollar: undefined,\n        amountYuan: undefined,\n        totalLPToken: undefined,\n        totalA: undefined,\n        totalB: undefined,\n        rewardToken: undefined,\n        rewardValue: undefined,\n        feeA: undefined,\n        feeB: undefined,\n        isNew: undefined,\n        isActivity: undefined,\n        APY: undefined\n    } as unknown as PgAmmDetail<C>);\n    const [tradeFloat, setTradeFloat] = React.useState<TradeFloat | undefined>(undefined);\n    const [pair, setPair] = React.useState<{ coinAInfo: CoinInfo<C> | undefined, coinBInfo: CoinInfo<C> | undefined }>({\n        coinAInfo: undefined,\n        coinBInfo: undefined,\n    });\n    const [pairHistory, setPairHistory] = React.useState<ammHistoryItem[]>([])\n\n    const walletLayer2DoIt = React.useCallback((market) => {\n        const {walletMap: _walletMap} = makeWalletLayer2();\n\n        setWalletMap(_walletMap as WalletMapExtend<any>)\n        if (_walletMap) {\n            getUserAmmTransaction()?.then((marketTrades) => {\n                let _myTradeArray = makeMyAmmMarketArray(market, marketTrades)\n                setMyAmmMarketArray(_myTradeArray ? _myTradeArray : [])\n            })\n        }\n        return _walletMap\n    }, [makeWalletLayer2, getUserAmmTransaction, makeMyAmmMarketArray, marketArray, pair])\n\n    const getPairList = React.useCallback(async () => {\n        if (LoopringAPI.exchangeAPI && coinPairInfo.coinA && coinPairInfo.coinB) {\n            const {myCoinA, myCoinB} = coinPairInfo\n            const market = `${myCoinA?.name}-${myCoinB?.name}`\n            const ammList = await LoopringAPI.exchangeAPI.getMixCandlestick({\n                market: market,\n                interval: TradingInterval.d1,\n                limit: 30\n            })\n            const formattedPairHistory = ammList.candlesticks.map(o => ({\n                ...o,\n                timeStamp: o.timestamp,\n                date: moment(o.timestamp).format('MMM DD')\n            })).sort((a, b) => a.timeStamp - b.timeStamp)\n            setPairHistory(formattedPairHistory)\n        }\n    }, [coinPairInfo])\n\n    React.useEffect(() => {\n        getPairList()\n    }, [getPairList])\n\n    React.useEffect(() => {\n        const coinKey = match?.params.symbol ?? undefined;\n        let _tradeFloat: Partial<TradeFloat> = {}\n        const [, coinA, coinB] = coinKey.match(/(\\w+)-(\\w+)/i)\n        let {\n            amm,\n            market\n        } = getExistedMarket(marketArray, coinA, coinB);\n\n        const _coinPairInfo = makeAmmDetailExtendsActivityMap({ammMap, coinMap, ammActivityMap, ammKey: amm})\n        setCoinPairInfo(_coinPairInfo ? _coinPairInfo : {})\n\n        if (coinMap) {\n            setPair({\n                coinAInfo: coinMap[ coinA ],\n                coinBInfo: coinMap[ coinB ]\n            })\n        }\n\n        // let _walletMap: WalletMapExtend<C>|undefined = undefined\n        if (walletLayer2) {\n            walletLayer2DoIt(market);\n        }\n\n        if (amm && market && ammMap) {\n            //TODO should add it into websocket\n            getAmmMap();\n            let apiList = [\n                pairDetailBlock({coinKey: market, ammKey: amm, ammMap}),\n                // LoopringAPI.ammpoolAPI.getAmmPoolSnapshot({poolAddress: ammMap[ ammKey ].address}),\n                // LoopringAPI.exchangeAPI.getMixTicker({market: coinKey})])\n            ];\n            // @ts-ignore\n            Promise.all([...apiList]).then(\n                ([{ammPoolsBalance, tickMap}\n                     //  ,ammUserRewardMap\n                 ]: any[]) => {\n                    if (tokenMap) {\n                        const _snapShotData = {\n                            tickerData: tickMap[ market ],\n                            ammPoolsBalance: ammPoolsBalance,\n                        }\n                        _tradeFloat = makeTickView(tickMap[ market ] ? tickMap[ market ] : {})\n                        setTradeFloat(_tradeFloat as TradeFloat);\n                        setCoinPairInfo({..._coinPairInfo})\n                        setSnapShotData(_snapShotData)\n\n                    }\n                }).catch((error) => {\n                console.log(error);\n                throw  Error\n            })\n        }\n\n    }, []);\n\n    React.useEffect(() => {\n        const {market} = getExistedMarket(marketArray, pair.coinAInfo?.simpleName as string, pair.coinBInfo?.simpleName as string);\n        if (market && snapShotData && snapShotData.ammPoolsBalance && walletLayer2Status === SagaStatus.UNSET) {\n            const _walletMap = walletLayer2DoIt(market);\n            const _myAmm: MyAmmLP<C> = makeMyAmmWithSnapshot(market, _walletMap, ammUserRewardMap, snapShotData);\n            setMyAmm(_myAmm)\n            // case \"DONE\":\n            //             walletLayer2State.statusUnset();\n\n            //         break;\n            //     default:\n            //         break;\n            //\n            // }\n        }\n    }, [walletLayer2Status])\n\n    React.useEffect(() => {\n        const {market} = getExistedMarket(marketArray, pair.coinAInfo?.simpleName as string, pair.coinBInfo?.simpleName as string);\n        if (useUserRewardsStatus === SagaStatus.UNSET && market) {\n            // const {userRewardsMap} = store.getState().userRewardsMap\n            setAmmUserRewardMap(userRewardsMap)\n            const _myAmm: MyAmmLP<C> = makeMyAmmWithSnapshot(market, walletMap, ammUserRewardMap, snapShotData);\n            setMyAmm(_myAmm);\n        }\n\n    }, [useUserRewardsStatus])\n\n    React.useEffect(() => {\n        if (ammMapStatus === SagaStatus.UNSET && ammMap && pair.coinAInfo?.simpleName && pair.coinBInfo?.simpleName) {\n            const _coinPairInfo = makeAmmDetailExtendsActivityMap(\n                {\n                    ammMap,\n                    coinMap,\n                    ammActivityMap,\n                    ammKey: 'AMM-' + pair.coinAInfo.simpleName + pair.coinBInfo.simpleName\n                })\n            setCoinPairInfo({\n                ...coinPairInfo, ..._coinPairInfo,\n                tradeFloat: coinPairInfo.tradeFloat\n            })\n\n        }\n    }, [ammMapStatus])\n\n\n    return {\n        walletMap,\n        myAmm,\n        // tickerData,\n        coinPairInfo,\n        snapShotData,\n        // ammPoolsBalance,\n        pair,\n        tradeFloat,\n        ammMarketArray,\n        myAmmMarketArray,\n        pairHistory,\n    }\n}","import React from 'react';\nimport { WithTranslation, withTranslation } from 'react-i18next';\nimport { AmmRecordTable, ChartType, ScaleAreaChart, TradeTitle, useSettings } from '@loopring-web/component-lib';\nimport {\n    AvatarCoinStyled,\n    Currency,\n    EmptyValueTag,\n    getThousandFormattedNumbers,\n    PriceTag,\n    unit\n} from '@loopring-web/common-resources';\nimport { Avatar, Box, Breadcrumbs, Grid, Link, Typography } from '@material-ui/core';\nimport { AmmPanelView } from '../AmmPanel';\nimport moment from 'moment';\nimport styled from '@emotion/styled/';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\n\nimport { useCoinPair } from './hooks';\nimport { AmmPoolActivityRule, LoopringMap } from 'loopring-sdk/dist/defs/loopring_defs';\nimport { StylePaper } from 'pages/styled';\n\n\n//******************** page code ************************//\n//  ${({theme}) => theme.border.defaultFrame({c_key: 'blur'})};\nconst BoxStyled = styled(Box)`\n  flex: 1;\n  background: var(--color-box);\n  border-radius: ${({theme}) => theme.unit}px;\n  padding: ${({theme}) => theme.unit * 2}px;\n  height: 120px;\n  // min-width: 160px;\n  max-width: 210px;\n  // & .MuiAvatar-root {\n    //     height: ${({theme}) => theme.fontDefault.h4};\n    //     width: ${({theme}) => theme.fontDefault.h4};\n  // }\n`;\n\nconst BoxTopStyled = styled(Box)`\n  background: var(--color-box);\n  border-radius: ${({theme}) => theme.unit}px;\n  padding: ${({theme}) => theme.unit * 2}px;\n  width: var(--swap-box-width);\n  box-sizing: border-box;\n  //height: 120px;\n  //min-width: 160px;\n  // & .MuiAvatar-root {\n    //   height: ${({theme}) => theme.fontDefault.h4};\n    //   width: ${({theme}) => theme.fontDefault.h4};\n  // }\n`;\n// const StyleWrapper = styled(Box)`\n//   //position: relative;\n//   //width: 100%;\n//   background: var(--color-box);\n//   border-radius: ${({theme}) => theme.unit}px;\n// ` as typeof Grid\n\n\nconst applyProps = (index: number) => {\n    return {\n        id: `simple-tab-${index}`,\n        'aria-controls': `tabpanel-${index}`,\n    }\n}\n\nexport const CoinPairPanel = withTranslation('common')(<R extends { [ key: string ]: any }, I extends { [ key: string ]: any }>\n({t, ammActivityMap, ...rest}:\n     WithTranslation & { ammActivityMap: LoopringMap<LoopringMap<AmmPoolActivityRule[]>> | undefined } & any) => {    //ActivityMap<I, I>\n    const {currency} = useSettings();\n    const {\n        tradeFloat,\n        snapShotData,\n        pair,\n        coinPairInfo,\n        walletMap,\n        ammMarketArray,\n        myAmmMarketArray,\n        myAmm,\n        pairHistory,\n    } = useCoinPair({ammActivityMap});\n    const [tabIndex, setTabIndex] = React.useState<0 | 1>(0);\n    const [page, setPage] = React.useState(rest?.page ? rest.page : 1);\n    const handleChange = (event: any, newValue: 0 | 1) => {\n        setTabIndex(newValue);\n        setPage(1);\n    }\n    const _handlePageChange = React.useCallback((page: number) => {\n        setPage(page);\n    }, [])\n    // const sellIconHasLoaded = useImage(coinPairInfo.myCoinA?.icon ? coinPairInfo.myCoinA?.icon : '').hasLoaded;\n    // const buyIconHasLoaded = useImage(coinPairInfo.myCoinB?.icon ? coinPairInfo.myCoinB?.icon : '').hasLoaded;\n    const {coinJson} = useSettings();\n    const coinAIcon: any = coinJson [ coinPairInfo.myCoinA?.simpleName ];\n    const coinBIcon: any = coinJson [ coinPairInfo.myCoinB?.simpleName ];\n\n    return <>\n\n        <Grid container>\n            <Grid item xs={7}>\n                <Breadcrumbs aria-label=\"breadcrumb\">\n                    <Link color=\"textSecondary\" href=\"/#/liquidity/pools\">\n                        {t('labelAmmList')}\n                    </Link>\n                    <Typography color={'textSecondary'} display={'flex'} alignItems={'center'}\n                                justifyContent={'center'}\n                    >{pair.coinAInfo?.simpleName}-{pair.coinBInfo?.simpleName}</Typography>\n                </Breadcrumbs>\n                <Grid item xs={12} marginTop={2}>\n                    <TradeTitle {...{\n                        ...rest, t,\n                        ...pair,\n                        tradeFloat,\n                        isNew: false\n                    }}></TradeTitle>\n                </Grid>\n            </Grid>\n            <Grid item xs={4} alignItems={'center'} justifyContent={'flex-end'} display={'flex'}>\n                {typeof coinPairInfo.isActivity === 'undefined'? '':\n                <BoxTopStyled paddingY={3} paddingX={1 / 2 * 5} display={'flex'}\n                              flexDirection={'column'}>\n                    <Box display={'flex'} flexDirection={'row'} justifyContent={'space-between'}>\n                        <Typography display={'flex'} flexDirection={'column'} component={'div'}>\n                            <Typography variant={'body2'} component={'h5'} color={'textSecondary'}>\n                                {t('labelReward')}\n                            </Typography>\n                            <Typography variant={'body1'} component={'span'} color={'textPrimary'}>\n                                {typeof coinPairInfo.isActivity === 'undefined' ? EmptyValueTag : <>\n                                    <Typography\n                                        component={'span'}>{coinPairInfo.activity ? getThousandFormattedNumbers(coinPairInfo.activity.totalRewards) : EmptyValueTag} </Typography>\n                                    <Typography\n                                        component={'span'}>{coinPairInfo.activity?.rewardToken?.simpleName}</Typography>\n                                </>}\n                            </Typography>\n                        </Typography>\n                        <Typography display={'flex'} flexDirection={'column'} alignItems={'flex-end'}\n                                    component={'div'}>\n                            <Typography variant={'body2'} component={'h5'} color={'textSecondary'}>\n                                {t('labelMyReward')}\n                            </Typography>\n                            <Typography variant={'body1'} component={'span'} color={'textPrimary'}>\n                                {/*{typeof coinPairInfo.isActivity === 'undefined' ? EmptyValueTag : <>*/}\n                                {typeof myAmm.reward === 'undefined' ? EmptyValueTag : <>\n\n                                    <Typography\n                                        component={'span'}> {getThousandFormattedNumbers(myAmm.reward)} </Typography>\n                                    <Typography\n                                        component={'span'}> {coinPairInfo.activity?.rewardToken?.simpleName}</Typography></>}\n\n                            </Typography>\n                        </Typography>\n                    </Box>\n                    <Typography alignSelf={'flex-start'} variant={'body2'} color={'textSecondary'}\n                                component=\"span\" marginTop={1}>\n                        {typeof coinPairInfo.isActivity === 'undefined' ? t('labelNoActiveEvent')\n                            : <>\n                                {t('labelDate')} : \n                                <> {' '+moment(coinPairInfo.activity?.duration.from).format('L') + ' - ' + moment(coinPairInfo.activity?.duration.to).format('L')}</>\n                            </>\n                        }\n                    </Typography>\n                </BoxTopStyled>\n                }\n            </Grid>\n            {/*<Grid item xs={4} alignItems={'center'} justifyContent={'flex-end'} display={'flex'}>*/}\n            {/*    <Link href=\"/#/liquidity/pools\" variant={'body2'}>*/}\n            {/*        {t('labelBack')}*/}\n            {/*    </Link>*/}\n            {/*</Grid>*/}\n        </Grid>\n        {/*<Grid container marginTop={3}>*/}\n        {/*   */}\n        {/*</Grid>*/}\n        <Box flex={1} display={'flex'} alignItems={'stretch'} flexDirection=\"row\" marginTop={3}>\n            <Box flex={1} display={'flex'} flexDirection={'column'} marginRight={3} justifyContent={'space-between'}>\n                <Box flex={1} width={'101%'}>\n                    <ScaleAreaChart\n                        type={ChartType.Trend} \n                        data={pairHistory} \n                        extraInfo={pair.coinBInfo?.simpleName}\n                        showXAxis\n                    />\n                </Box>\n                <Box display={'flex'} flexDirection={'row'} justifyContent={'space-between'}>\n                    <BoxStyled paddingX={2} display={'flex'} flexDirection={'column'}>\n                        <Typography component={'p'} color={'textSecondary'} display={'flex'} marginBottom={1 / 2 * 3}\n                        >\n                            {t('labelAmmTotalToken')}\n                        </Typography>\n                        <Typography component={'span'} display={'flex'} flexDirection={'row'}\n                                    justifyContent={'space-between'} alignItems={'center'}\n                                    style={{textTransform: 'capitalize'}} color={'textPrimary'}>\n                            <Box component={'span'} className={'logo-icon'} height={'var(--list-menu-coin-size)'}\n                                 width={'var(--list-menu-coin-size)'} alignItems={'center'} justifyContent={'center'}>\n                                {coinAIcon ?\n                                    <AvatarCoinStyled imgx={coinAIcon.x} imgy={coinAIcon.y}\n                                                      imgheight={coinAIcon.height}\n                                                      imgwidth={coinAIcon.width} size={24}\n                                                      variant=\"circular\"\n                                                      alt={coinPairInfo?.myCoinA?.simpleName as string}\n                                        // src={sellData?.icon}\n                                                      src={'data:image/svg+xml;utf8,' + '<svg width=\"36\" height=\"36\" viewBox=\"0 0 36 36\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M0 0H36V36H0V0Z\"/></svg>'}/>\n                                    : <Avatar variant=\"circular\" alt={coinPairInfo?.myCoinA?.simpleName as string}\n                                              style={{\n                                                  height: 'var(--list-menu-coin-size))',\n                                                  width: 'var(--list-menu-coin-size)'\n                                              }}\n                                        // src={sellData?.icon}\n                                              src={'static/images/icon-default.png'}/>\n                                }</Box>\n                            <Typography justifyContent={'center'} display={'flex'}>\n                                <Typography component={'span'} alignSelf={'right'} height={24} lineHeight={'24px'}>\n                                    {getThousandFormattedNumbers(coinPairInfo.totalA, 6)}</Typography>\n                                <Typography component={'span'} marginLeft={1} alignSelf={'right'} height={24} lineHeight={'24px'}>\n                                    {/*<HiddenHidden>{t('labelLPTotal')}</Hidden>*/}\n                                    {coinPairInfo.myCoinA?.simpleName}\n                                </Typography>\n\n                            </Typography>\n\n                        </Typography>\n                        <Typography component={'span'} display={'flex'} flexDirection={'row'}\n                                    justifyContent={'space-between'} alignItems={'center'} marginTop={1}\n                                    style={{textTransform: 'capitalize'}}>\n                            {/*<Typography component={'span'} marginRight={1 / 2}*/}\n                            {/*            color={'textSecondary'}>*/}\n                            {/*    */}\n                            {/*    /!*<Avatar variant=\"square\" sizes={'small'} alt={'coinLogo'}*!/*/}\n                            {/*    /!*    // src={coinBInfo?.icon}*!/*/}\n                            {/*    /!*        src={buyIconHasLoaded ? coinPairInfo?.myCoinB?.icon : 'static/images/icon-default.png'}/>*!/*/}\n                            {/*</Typography>*/}\n                            <Box component={'span'} className={'logo-icon'} height={'var(--list-menu-coin-size)'}\n                                 width={'var(--list-menu-coin-size)'} alignItems={'center'}\n                                 justifyContent={'center'}>{coinBIcon ?\n                                <AvatarCoinStyled imgx={coinBIcon.x} imgy={coinBIcon.y} imgheight={coinBIcon.height}\n                                                  imgwidth={coinBIcon.width} size={24}\n                                                  variant=\"circular\" alt={coinPairInfo?.myCoinB?.simpleName as string}\n                                    // src={sellData?.icon}\n                                                  src={'data:image/svg+xml;utf8,' + '<svg width=\"36\" height=\"36\" viewBox=\"0 0 36 36\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M0 0H36V36H0V0Z\"/></svg>'}/>\n                                : <Avatar variant=\"circular\" alt={coinPairInfo?.myCoinB?.simpleName as string} style={{\n                                    height: 'var(--list-menu-coin-size)',\n                                    width: 'var(--list-menu-coin-size)'\n                                }}\n                                    // src={sellData?.icon}\n                                          src={'static/images/icon-default.png'}/>}</Box>\n                            <Typography justifyContent={'center'} display={'flex'}>\n                                <Typography component={'span'} alignSelf={'right'} height={24} lineHeight={'24px'}>\n                                    {getThousandFormattedNumbers(coinPairInfo.totalB, 6)}</Typography>\n                                <Typography component={'span'} marginLeft={1} alignSelf={'right'} height={24} lineHeight={'24px'}>\n                                    {/*<Hidden>{t('labelLPTotal')}</Hidden>*/}\n                                    {coinPairInfo.myCoinB?.simpleName}\n                                </Typography>\n\n                            </Typography>\n\n                        </Typography>\n\n                    </BoxStyled>\n                    <BoxStyled paddingX={2} display={'flex'} flexDirection={'column'}>\n                        <Typography component={'p'} color={'textSecondary'} display={'flex'}\n                        >\n                            {t('label24Volume')}\n                        </Typography>\n                        <Typography variant={'h5'} marginTop={4}\n                                    component={'span'}>\n                            {currency === Currency.dollar ? PriceTag.Dollar + getThousandFormattedNumbers(tradeFloat && tradeFloat.priceDollar ? tradeFloat.priceDollar as number : 0, 2)\n                                : PriceTag.Yuan + getThousandFormattedNumbers(tradeFloat && tradeFloat.priceYuan ? tradeFloat.priceYuan as number : 0, 2)}\n                        </Typography>\n\n                    </BoxStyled>\n                    <BoxStyled paddingX={2} display={'flex'} flexDirection={'column'}>\n                        <Typography component={'p'} color={'textSecondary'} display={'flex'}\n                        >\n                            {t('labelTVL')}\n                        </Typography>\n\n                        <Typography variant={'h5'} marginTop={4}\n                                    component={'span'}> {typeof coinPairInfo.amountDollar === 'undefined' ? EmptyValueTag :\n                            currency === Currency.dollar ? PriceTag.Dollar + getThousandFormattedNumbers(coinPairInfo.amountDollar, 2) : PriceTag.Yuan + getThousandFormattedNumbers(coinPairInfo.amountYuan ? coinPairInfo.amountYuan : 0, 2)}\n                        </Typography>\n\n\n                    </BoxStyled>\n                    <BoxStyled paddingX={2} display={'flex'} flexDirection={'column'}>\n                        <Typography component={'p'} color={'textSecondary'} display={'flex'}\n                        >\n                            {t('labelAPY')}\n                        </Typography>\n                        <Typography variant={'h5'} marginTop={4}\n                                    component={'span'}> {coinPairInfo.APY ? coinPairInfo.APY : EmptyValueTag}%\n                        </Typography>\n                    </BoxStyled>\n                </Box>\n            </Box>\n            <Box display={'flex'}>\n                <AmmPanelView pair={pair} walletMap={walletMap} snapShotData={snapShotData}/>\n            </Box>\n        </Box>\n\n        <Grid container marginY={3}>\n            <Grid item xs={12}>\n                <Tabs value={tabIndex}\n                    //   onChange={handleChange}\n                      aria-label=\"tabs switch\">\n                    {/* <Tab label={t('labelAll')} {...applyProps(0)} /> */}\n                    <Tab label={t('labelMe')} {...applyProps(1)} />\n                </Tabs>\n                <StylePaper style={{marginTop: `${unit * 2}px`}}>\n                    {/*ammRecordArray*/}\n                    {tabIndex === 0 ? <AmmRecordTable\n                        rawData={ammMarketArray}\n                        handlePageChange={_handlePageChange} page={page}\n                    /> : <AmmRecordTable rawData={myAmmMarketArray} handlePageChange={_handlePageChange}\n                                         page={page}/>}\n                </StylePaper>\n            </Grid>\n\n        </Grid>\n\n    </>\n\n})\n\n\n\n\n\n\n\n","import React from 'react';\nimport { useAmmActivityMap } from '../../stores/Amm/AmmActivityMap';\n\nimport { AmmPoolActivityRule, LoopringMap } from 'loopring-sdk';\nimport { useAccount } from '../../stores/account/hook';\nimport { useUserRewards } from '../../stores/userRewards';\nimport { useAmmMap } from '../../stores/Amm/AmmMap';\nimport { SagaStatus } from '@loopring-web/common-resources';\n\nexport const useAmmPool = <R extends {[key:string]:any},I extends {[key:string]:any}>()=>{\n    const {ammActivityMap,status:ammActivityMapStatus}  = useAmmActivityMap()\n    const {account,status:accountStatus} = useAccount();\n    const {ammMap,getAmmMap} = useAmmMap();\n    const [_ammActivityMap,setAmmActivityMap] = React.useState<LoopringMap<LoopringMap<AmmPoolActivityRule[]>>|undefined>(ammActivityMap)\n    // init AmmMap at begin\n    React.useEffect(() => {\n        if (!ammMap || Object.keys(ammMap).length === 0) {\n            getAmmMap();\n        }\n    }, []);\n\n    React.useEffect(() => {\n        if(ammActivityMapStatus === SagaStatus.UNSET){\n            setAmmActivityMap(ammActivityMap)\n        }\n    }, [ammActivityMapStatus])\n    // React.useEffect(() => {\n    //     if(accountStatus === SagaStatus.UNSET){\n    //\n    //     }\n    // }, [accountStatus])\n\n    return {\n        ammActivityMap:_ammActivityMap\n    }\n\n}\n\n","import { useRouteMatch } from 'react-router'\n\nimport { Box, Typography } from '@material-ui/core'\nimport {\n    SubMenu,\n    SubMenuList as BasicSubMenuList,\n} from '@loopring-web/component-lib'\nimport { withTranslation, WithTranslation } from 'react-i18next'\nimport styled from '@emotion/styled'\nimport { subMenuLiquidity } from '@loopring-web/common-resources'\nimport { PoolsPanel } from './PoolsPanel'\nimport { CoinPairPanel } from './CoinPairPanel';\nimport { AmmMiningView } from './AmmMining';\nimport { MyLiquidity } from './MyLiquidity'\nimport { useAmmPool } from './hook';\n\nconst TableWrapperStyled = styled(Box)`\n    display: flex;\n    flex-direction: column;\n    justify-content: stretch;\n    align-items: stretch;\n    flex: 1;\n`\n\nexport const subMenu = subMenuLiquidity\n\nconst SubMenuList = withTranslation(['layout','common'], { withRef: true })(BasicSubMenuList);\nexport const LiquidityPage =  withTranslation('common', { withRef: true })(({ t }: WithTranslation) => {\n\n    // const { ammFee } = useAmmPool('LRC', 'ETH')\n    //\n    // console.log('--- > ammFee:', ammFee)\n    //\n    const {ammActivityMap} = useAmmPool();\n    let match: any = useRouteMatch(['/liquidity/:item',':next/']);\n    const selected = match?.params.item ?? 'pools'\n    let matchPair: any = useRouteMatch(['/liquidity/:item/:next/:symbol']);\n    let symbol:any = undefined\n    if (matchPair && matchPair?.params?.next && matchPair.params.item === 'pools') {\n       if(!matchPair.params.symbol){\n           symbol='LRC-ETH';\n       }else{\n           symbol=matchPair.params.symbol;\n       }\n    }\n    \n    return (\n        <>\n            { symbol && <Box display={'flex'} flexDirection={'column'}  flex={1} alignSelf={'flex-start'}>\n                <CoinPairPanel ammActivityMap={ammActivityMap}/>\n            </Box>\n            }\n            {!symbol && <TableWrapperStyled>\n                {/* <Box width={'200px'} display={'flex'} justifyContent={'stretch'} marginRight={3} marginBottom={3}>\n                    <SubMenu>\n                        <SubMenuList selected={selected} subMenu={subMenu as any} />\n                    </SubMenu>\n                </Box> */}\n                <Typography \n                    variant={'h2'} \n                    component={'div'} \n                    fontFamily={'Roboto'}\n                    marginTop={2}\n                    marginBottom={3}\n                >{t('labelLiquidityPageTitle')}</Typography>\n                <Box minHeight={420} display={'flex'} alignItems={'stretch'} justifyContent={'stretch'} /* flexDirection=\"column\" */ marginTop={0} flex={1} marginBottom={3}>\n                    {(selected === 'pools' && !symbol ) && <PoolsPanel ammActivityMap={ammActivityMap}/>}\n                    {/* {(selected === 'amm-mining' && !symbol ) && <AmmMiningView ammActivityMap={ammActivityMap}/>}\n                    {(selected === 'my-liquidity' && !symbol ) && <MyLiquidity ammActivityMap={ammActivityMap}/>}\n                    {selected === 'orderBook-Mining' && <AmmMiningView ammActivityMap={ammActivityMap}/>} */}\n                    {/*{selected === 'orders' && <OrderPanel />}*/}\n                </Box>\n            </TableWrapperStyled>\n            }\n        </>\n    )\n\n}\n)","import { AmmCard, AmmProps, EmptyDefault } from '@loopring-web/component-lib';\nimport React from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { AmmCardProps, AmmData, AmmInData, IBData } from '@loopring-web/common-resources';\nimport { Box, Grid, Typography } from '@material-ui/core';\nimport styled from '@emotion/styled'\nimport { useAmmMiningUI } from './hook';\n// import Tabs from '@material-ui/core/Tabs';\n// import Tab from '@material-ui/core/Tab';\nimport { useAmmPool } from '../LiquidityPage/hook'\nimport { Trans, withTranslation } from 'react-i18next';\nimport { AmmPoolActivityRule, LoopringMap } from 'loopring-sdk/dist/defs/loopring_defs';\n\nconst WrapperStyled = styled(Box)`\n    display: flex;\n    flex-direction: column;\n    flex: 1;\n` as typeof Box\n\n// const AmmListWrapperStyled = styled(Box)`\n//     display: flex;\n// `\n\ntype ClickHandler = {\n    handleClick: (pair: string) => void\n}\n\nconst AmmCardWrap = React.memo(React.forwardRef((props: AmmCardProps<{ [ key: string ]: any }> & ClickHandler, ref) => {\n    const pair = `${props.coinAInfo.name}-${props.coinBInfo.name}`\n    return props ? <AmmCard ref={ref} {...props} handleClick={() => props.handleClick(pair)}/> : <></>\n}));\n\nconst AmmList = <I extends { [ key: string ]: any }>({ammActivityViewMap}: { ammActivityViewMap: Array<AmmCardProps<I>> }) => {\n    let history = useHistory();\n    const jumpTo = React.useCallback((pair: string) => {\n        if (history) {\n            history.push(`/liquidity/pools/coinPair/${pair}`)\n        }\n    }, [history])\n\n    return <>{ammActivityViewMap.length ? ammActivityViewMap.map((item: AmmCardProps<I>, index) =>\n        <Grid item xs={12} sm={6} lg={4} key={index}>\n            <AmmCardWrap handleClick={jumpTo} {...item as any} />\n        </Grid>\n    ) : <Box flex={1} display={'flex'} alignItems={'center'} justifyContent={'center'} flexDirection={'column'}>\n        <EmptyDefault height={\"calc(100% - 35px)\"} marginTop={10} display={'flex'} flexWrap={'nowrap'} alignItems={'center'} justifyContent={'center'}\n                      flexDirection={'column'} message={() => {\n            return <Trans i18nKey=\"labelEmptyDefault\">\n                Content is Empty\n            </Trans>\n        }}/> </Box>}   </>\n}\n\nexport const MiningPage = withTranslation('common')(<T extends AmmData<C extends IBData<I> ? C : IBData<I>>, I,\n    ACD extends AmmInData<I>,\n    C = IBData<I>>({ammProps, t, ...rest}: {\n    ammProps: AmmProps<T, I, ACD>,\n    ammActivityMap: LoopringMap<LoopringMap<AmmPoolActivityRule[]>> | undefined,\n} & any) => {\n    const {ammActivityMap} = useAmmPool();\n    const {\n        ammActivityViewMap,\n        ammActivityPastViewMap\n    } = useAmmMiningUI({ammActivityMap});\n    const [tabIndex, setTabIndex] = React.useState<0 | 1>(0);\n    const handleChange = (event: any, newValue: 0 | 1) => {\n        setTabIndex(newValue);\n    }\n    const jointAmmViewMap = [...ammActivityViewMap, ...ammActivityPastViewMap]\n\n    return  <WrapperStyled>\n        {/* <Tabs value={tabIndex}\n                onChange={handleChange}\n                aria-label=\"tabs switch\">\n            <Tab label={t('labelCurrentActivities')}/>\n            <Tab label={t('labelPastActivities')}/>\n        </Tabs> */}\n            <Typography\n                    variant={'h2'}\n                    component={'div'}\n                    fontFamily={'Roboto'}\n                    marginTop={2}\n                    marginBottom={3}\n                >{t('labelMiningPageTitle')}</Typography>\n            <Grid container spacing={5}>\n                <AmmList ammActivityViewMap={jointAmmViewMap}/>\n            </Grid>\n    </WrapperStyled>\n})\n","import { AmmCardProps } from '@loopring-web/common-resources';\nimport { AmmPoolActivityRule, AmmPoolActivityStatus,LoopringMap } from 'loopring-sdk';\nimport React from 'react';\nimport {\n    makeUIAmmActivityMap\n} from '../../hooks/help';\n\nimport { useUserRewards } from '../../stores/userRewards';\n\nexport const useAmmMiningUI = <R extends { [ key: string ]: any }, I extends { [ key: string ]: any }>(\n    {\n        ammActivityMap\n    }: { ammActivityMap: LoopringMap<LoopringMap<AmmPoolActivityRule[]>> | undefined }\n): {\n    ammActivityViewMap: Array<AmmCardProps<I>>,\n    ammActivityPastViewMap: Array<AmmCardProps<I>>\n} => {\n    const  userRewardsMapState =  useUserRewards();// store.getState().userRewardsMap\n    // const {coinMap} = useTokenMap();\n    // const ammMapState = useAmmMap();\n    // const walletLayer2State = useWalletLayer2();\n    const [ammActivityViewMap, setAmmActivityViewMap] = React.useState<Array<AmmCardProps<I>>>([]);\n\n\n    const [ammActivityPastViewMap, setAmmActivityPastViewMap] = React.useState<Array<AmmCardProps<I>>>(\n        []);\n    // const [ammUserRewardMap, setAmmUserRewardMap] = React.useState<AmmUserRewardMap>(\n    //     {});\n\n\n    // );\n    React.useEffect(() => {\n        if(ammActivityMap && Object.keys(ammActivityMap).length>0 ){\n\n           // getAmmPoolUserRewards().then((ammUserRewardMap)=>{\n                // setAmmUserRewardMap(ammUserRewardMap as AmmUserRewardMap);\n                setAmmActivityViewMap(makeUIAmmActivityMap(\n                    {\n                        ammActivityMap,\n                        type: 'AMM_MINING',\n                        ammPoolActivityStatus: [AmmPoolActivityStatus.NotStarted, AmmPoolActivityStatus.InProgress]\n                    }, userRewardsMapState.userRewardsMap\n                ));\n                setAmmActivityPastViewMap(\n                    makeUIAmmActivityMap(\n                        {\n                            ammActivityMap,\n                            type: 'AMM_MINING',\n                            ammPoolActivityStatus: [AmmPoolActivityStatus.EndOfGame]\n                        }, userRewardsMapState.userRewardsMap\n                    ))\n          //  })\n        }\n\n    },[ammActivityMap])\n    React.useEffect(() => {\n            if (userRewardsMapState.status === \"ERROR\") {\n                //TODO: solve error\n                userRewardsMapState.statusUnset();\n            } else if (userRewardsMapState.status === \"DONE\") {\n                userRewardsMapState.statusUnset();\n                setAmmActivityViewMap(\n                    makeUIAmmActivityMap(\n                    {\n                        ammActivityMap,\n                        type: 'AMM_MINING',\n                        ammPoolActivityStatus: [AmmPoolActivityStatus.NotStarted, AmmPoolActivityStatus.InProgress]\n                    }, userRewardsMapState.userRewardsMap\n                ));\n                setAmmActivityPastViewMap(\n                    makeUIAmmActivityMap(\n                        {\n                            ammActivityMap,\n                            type: 'AMM_MINING',\n                            ammPoolActivityStatus: [AmmPoolActivityStatus.EndOfGame]\n                        }, userRewardsMapState.userRewardsMap\n                    ))\n                // if (userRewardsMapState.ammMap) {\n                //     setAmmActivityViewMap(\n                //         makeUIAmmActivityMap(\n                //             {\n                //                 ammActivityMap,\n                //                 type: 'AMM_MINING',\n                //                 ammPoolActivityStatus: [AmmPoolActivityStatus.NotStarted, AmmPoolActivityStatus.InProgress]\n                //             }, ammUserRewardMap\n                //         ))\n                //     setAmmActivityPastViewMap(\n                //         makeUIAmmActivityMap(\n                //             {\n                //                 ammActivityMap,\n                //                 type: 'AMM_MINING',\n                //                 ammPoolActivityStatus: [AmmPoolActivityStatus.EndOfGame]\n                //             }, ammUserRewardMap\n                //         ))\n                //\n                // }\n\n            }\n        },\n        [userRewardsMapState.status]\n    )\n\n\n    return {\n        ammActivityViewMap,\n        ammActivityPastViewMap\n    }\n\n}\n","import { WithTranslation, withTranslation } from 'react-i18next';\nimport {\n    AccountStep,\n    FailedConnect,\n    MetaMaskProcess,\n    ModalWalletConnect,\n    ProviderMenu, setShowAccount,\n    SuccessConnect,\n    Toast,\n    useOpenModals,\n    WalletConnectProcess,\n    WalletConnectQRCode,\n    WalletConnectStep\n} from '@loopring-web/component-lib';\nimport { ChainId } from 'loopring-sdk'\nimport React, { useEffect, useState } from 'react';\nimport {\n    ConnectProviders,\n    GatewayItem,\n    gatewayList as DefaultGatewayList,\n    SagaStatus\n} from '@loopring-web/common-resources';\nimport { useAccount } from 'stores/account';\nimport { connectProvides, ProcessingType, useConnectHook, walletServices } from '@loopring-web/web3-provider';\nimport { useSystem } from 'stores/system';\nimport { myLog } from '../../utils/log_tools';\nimport { copyToClipBoard } from '../../utils/obj_tools';\nimport { TOAST_TIME } from '../../defs/common_defs';\n\nexport const ModalWalletConnectPanel = withTranslation('common')(({\n                                                                      onClose,\n                                                                      open,\n                                                                      // step,\n                                                                      t,\n                                                                      ...rest\n                                                                  }: {\n    // step?:number,\n    open: boolean, onClose: (e: any) => void\n} & WithTranslation) => {\n    // const [_step, setStep] = React.useState<number>(step === undefined? WalletConnectStep.Provider: step);\n    const {\n        account,\n        updateAccount,\n        setShouldShow,\n        resetAccount,\n        statusUnset: statusAccountUnset,\n        status: accountStatus\n    } = useAccount();\n    const {updateSystem, chainId: _chainId, exchangeInfo} = useSystem();\n    const {modals: {isShowConnect}, setShowConnect, setShowAccount} = useOpenModals();\n    const [qrCodeUrl, setQrCodeUrl] = React.useState<string>('');\n    const [stateCheck, setStateCheck] = React.useState<boolean>(false);\n    const metaMaskCallback = React.useCallback(async () => {\n        await connectProvides.MetaMask();\n        updateAccount({connectName: ConnectProviders.MetaMask});\n        // statusAccountUnset();\n        if (connectProvides.usedProvide) {\n            const chainId = Number(await connectProvides.usedWeb3?.eth.getChainId());\n            updateSystem({chainId: (chainId && chainId === ChainId.GOERLI ? chainId as ChainId : ChainId.MAINNET)})\n            return\n        }\n    }, []);\n    const walletConnectCallback = React.useCallback(async () => {\n        await connectProvides.WalletConnect();\n        updateAccount({connectName: ConnectProviders.WalletConnect});\n        // statusAccountUnset();\n        if (connectProvides.usedProvide) {\n            const chainId = Number(await connectProvides.usedWeb3?.eth.getChainId());\n            updateSystem({chainId: (chainId && chainId === ChainId.GOERLI ? chainId as ChainId : ChainId.MAINNET)})\n            return\n        }\n    }, []);\n\n    const [processingCallback, setProcessingCallback] = React.useState<{ callback: () => Promise<void> } | undefined>(undefined)\n    useEffect(() => {\n        if (stateCheck === true && [SagaStatus.UNSET].findIndex((ele: string) => ele === accountStatus) !== -1) {\n            myLog('clear cache connect done')\n            setStateCheck(false)\n            if (processingCallback !== undefined) {\n                processingCallback.callback()\n            }\n        }\n\n    }, [accountStatus, stateCheck])\n\n    const gatewayList: GatewayItem[] = [\n        {\n            ...DefaultGatewayList[ 0 ],\n            handleSelect: React.useCallback(async () => {\n                if (account.connectName === DefaultGatewayList[ 0 ].key) {\n                    setShowConnect({isShow: false});\n                } else {\n                    walletServices.sendDisconnect('', 'should new provider')\n                    setShowConnect({isShow: true, step: WalletConnectStep.MetaMaskProcessing});\n                    setProcessingCallback({callback: metaMaskCallback});\n                    setStateCheck(true)\n                }\n\n            }, [account])\n        },\n        {\n            ...DefaultGatewayList[ 1 ],\n            handleSelect: React.useCallback(async () => {\n                walletServices.sendDisconnect('', 'should new provider')\n                setShowConnect({isShow: true, step: WalletConnectStep.WalletConnectProcessing});\n                setProcessingCallback({callback: walletConnectCallback});\n                setStateCheck(true)\n            }, [account])\n        },\n\n    ]\n\n    const handleProcessing = React.useCallback(({type, opts}: { type: keyof typeof ProcessingType, opts: any }) => {\n        const {qrCodeUrl} = opts;\n        if (qrCodeUrl) {\n            setQrCodeUrl(qrCodeUrl)\n            setShowConnect({isShow: true, step: WalletConnectStep.WalletConnectQRCode});\n        }\n    }, []);\n    const [copyToastOpen, setCopyToastOpen] = useState(false);\n    useConnectHook({handleProcessing});\n    const providerBack = React.useMemo(() => {\n            return ['UN_CONNECT','ERROR_NETWORK'].includes(account.readyState)  ? undefined :\n                ()=>{\n                    setShowConnect({isShow: false});\n                    switch (account.readyState){\n                        case 'ACTIVATED':\n                        case 'LOCKED':\n                            setShowAccount({ isShow: true, step:AccountStep.HadAccount })\n                            break\n                        case 'DEPOSITING':\n                            setShowAccount({ isShow: true, step:AccountStep.Depositing })\n                            break\n                        case 'NO_ACCOUNT':\n                            setShowAccount({ isShow: true, step:AccountStep.NoAccount })\n                            break\n                    }\n                }\n\n    },[account,setShowAccount])\n    const walletList = React.useMemo(() => {\n        return Object.values({\n            [ WalletConnectStep.Provider ]: {view: <ProviderMenu gatewayList={gatewayList}\n                                                          providerName={account.connectName} {...{t, ...rest}}/>,\n                onBack:providerBack},\n            [ WalletConnectStep.MetaMaskProcessing ]: {view: <MetaMaskProcess {...{t, ...rest}}/>,},\n            [ WalletConnectStep.WalletConnectProcessing ]: {view: <WalletConnectProcess {...{t, ...rest}}/>,},\n            [ WalletConnectStep.WalletConnectQRCode ]: {view: <WalletConnectQRCode onCopy={() => {\n                copyToClipBoard(qrCodeUrl);\n                setCopyToastOpen(true);\n            }} url={qrCodeUrl} {...{t, ...rest}}/>, onBack:()=>{\n                    setShowConnect({isShow: false,step:WalletConnectStep.Provider});\n                }},\n            [ WalletConnectStep.SuccessConnect ]: {view: <SuccessConnect onClose={(e) => {\n                setShouldShow(false);\n                onClose(e);\n            }}\n                                                                  providerName={account.connectName} {...{t, ...rest}}/>,},\n            [ WalletConnectStep.FailedConnect ]: {view: <FailedConnect{...{t, ...rest}} onRetry={resetAccount}/>,onBack:()=>{\n                    setShowConnect({isShow: false,step:WalletConnectStep.Provider});\n            }},\n        })\n    }, [qrCodeUrl, account, t, rest, onClose])\n    return <>\n        <ModalWalletConnect open={isShowConnect.isShow} onClose={(e) => {\n            setShouldShow(false);\n\n            onClose(e);\n        }} panelList={walletList} onBack={walletList[ isShowConnect.step ].onBack} step={isShowConnect.step}/>\n        <Toast alertText={t('Address Copied to Clipboard!')} open={copyToastOpen}\n               autoHideDuration={TOAST_TIME} setOpen={setCopyToastOpen} severity={\"success\"}/>\n    </>\n})\n\n\n","import { updateAccountStatus } from '../../stores/account';\nimport { AccountStep, setShowAccount, setShowConnect } from '@loopring-web/component-lib';\nimport store from '../../stores';\nimport { AccountStatus } from '@loopring-web/common-resources';\nimport { myLog } from 'utils/log_tools';\nimport { LoopringAPI } from 'stores/apis/api';\nimport { connectProvides } from '@loopring-web/web3-provider';\nimport * as sdk from 'loopring-sdk'\nimport { ActionResult, ActionResultCode, REFRESH_RATE } from 'defs/common_defs';\n\nexport async function activeAccount({ reason, shouldShow }: { reason: any, shouldShow: boolean }) {\n    const account = store.getState().account;\n    // const {exchangeInfo} = store.getState().system;\n    if (reason?.response?.data?.resultInfo?.code === 100001) {\n        // deposited, but need update account\n        console.log('SignAccount')\n        store.dispatch(setShowConnect({ isShow: false }));\n        store.dispatch(setShowAccount({ isShow: true, step: AccountStep.SignAccount }));\n        store.dispatch(updateAccountStatus({ readyState: AccountStatus.DEPOSITING }));\n\n    } else {\n        // need to deposit.\n        let activeDeposit = localStorage.getItem('activeDeposit');\n        if (activeDeposit) {\n            activeDeposit = JSON.stringify(activeDeposit);\n        }\n        if (activeDeposit && activeDeposit[account.accAddress]) {\n            console.log('DEPOSITING')\n            store.dispatch(setShowConnect({ isShow: false }));\n            store.dispatch(setShowAccount({ isShow: shouldShow, step: AccountStep.Depositing }));\n            store.dispatch(updateAccountStatus({ readyState: AccountStatus.DEPOSITING }));\n            // store.dispatch(statusAccountUnset(undefined))\n        } else {\n            console.log('NO_ACCOUNT')\n            setShowConnect({ isShow: false });\n            setShowAccount({ isShow: shouldShow, step: AccountStep.NoAccount });\n            store.dispatch(updateAccountStatus({ readyState: AccountStatus.NO_ACCOUNT }));\n            // store.dispatch(statusAccountUnset(undefined));\n        }\n    }\n}\n\nexport async function updateAccountFromServer() {\n\n    const system = store.getState().system\n    const account = store.getState().account\n\n    myLog('before check!', account)\n\n    let result: ActionResult = { code: ActionResultCode.NoError, }\n\n    try {\n\n        if (LoopringAPI.userAPI && LoopringAPI.exchangeAPI && system.exchangeInfo && connectProvides.usedWeb3 && account\n            && system.chainId !== 'unknown' && account.connectName !== 'unknown') {\n            const feeMap = {\n                'ETH': '529000000000000',\n                'LRC': '34000000000000000000',\n                'USDT': '7850000',\n                'DAI': '98100000000000000000',\n            }\n\n            const { accInfo } = (await LoopringAPI.exchangeAPI.getAccount({\n                owner: account.accAddress\n            }))\n\n            if (accInfo?.owner && accInfo?.accountId) {\n\n                const connectName = account.connectName as sdk.ConnectorNames\n\n                try {\n                    const eddsaKey = await sdk\n                        .generateKeyPair(\n                            connectProvides.usedWeb3,\n                            accInfo.owner,\n                            system.exchangeInfo.exchangeAddress,\n                            accInfo.keyNonce as number,\n                            connectName,\n                        )\n\n                    try {\n                        const request: sdk.UpdateAccountRequestV3 = {\n                            exchange: system.exchangeInfo.exchangeAddress,\n                            owner: accInfo.owner,\n                            accountId: accInfo.accountId,\n                            publicKey: { x: eddsaKey.formatedPx, y: eddsaKey.formatedPy },\n                            maxFee: { tokenId: 0, volume: feeMap['ETH'] },\n                            validUntil: sdk.VALID_UNTIL,\n                            nonce: accInfo.nonce as number,\n                        }\n\n                        myLog('req:', request)\n\n                        const updateAccountResponse = await LoopringAPI.userAPI.updateAccount(request,\n                            connectProvides.usedWeb3, system.chainId, connectName)\n\n                        await sdk.sleep(REFRESH_RATE)\n\n                        result.data = updateAccountResponse\n\n                    } catch (reason) {\n                        result.code = ActionResultCode.UpdateAccoutError\n                        result.data = reason\n                    }\n\n                } catch (reason) {\n                    result.code = ActionResultCode.GenEddsaKeyError\n                    result.data = reason\n                }\n            }\n        }\n    } catch (reason) {\n        result.code = ActionResultCode.GetAccError\n        result.data = reason\n    }\n\n    return result\n}","import { AccountStatus } from '@loopring-web/common-resources';\nimport { walletLayer2Services } from './walletLayer2Services';\nimport { Commands } from './command';\n\nexport function lockAccount() {\n    walletLayer2Services.sendAccountLock()\n}\n\nexport function goErrorNetWork(){\n    walletLayer2Services.sendUpdateAccStatusAndReset(AccountStatus.ERROR_NETWORK)\n\n}\n\nexport function cleanLayer2() {\n    walletLayer2Services.sendUpdateAccStatusAndReset(AccountStatus.UN_CONNECT)\n}\n","import React, { useCallback } from 'react';\n\nimport { AccountStep, DepositProps, SwitchData, TradeBtnStatus, useOpenModals } from '@loopring-web/component-lib';\nimport { AccountStatus, CoinMap, ConnectProviders, IBData, WalletMap } from '@loopring-web/common-resources';\nimport * as sdk from 'loopring-sdk';\nimport { useTokenMap } from '../stores/token';\nimport { useAccount } from '../stores/account';\nimport { useSystem } from '../stores/system';\nimport { connectProvides } from '@loopring-web/web3-provider';\nimport { LoopringAPI } from 'stores/apis/api';\nimport { dumpError400, GetAllowancesRequest } from 'loopring-sdk';\nimport { myLog } from 'utils/log_tools';\nimport { useWalletLayer1 } from '../stores/walletLayer1';\nimport { useTranslation } from 'react-i18next';\nimport { ActionResult, ActionResultCode } from 'defs/common_defs';\n\nexport const useDeposit = <R extends IBData<T>, T>(isNewAccount: boolean = false): {\n    depositProps: DepositProps<R, T>\n} => {\n    const {tokenMap, coinMap} = useTokenMap()\n    const {account} = useAccount()\n    const {exchangeInfo, chainId, gasPrice} = useSystem()\n    const [depositValue, setDepositValue] = React.useState<IBData<T>>({\n        belong: undefined,\n        tradeValue: 0,\n        balance: 0\n    } as IBData<unknown>)\n\n    const { walletLayer1 } = useWalletLayer1()\n    const {setShowDeposit, setShowAccount}  = useOpenModals()\n\n    const { t } = useTranslation('common')\n\n    // walletMap1: WalletMap<T> | undefined, ShowDeposit: (isShow: boolean, defaultProps?: any) => void\n    const handleDeposit = React.useCallback(async (inputValue: any) => {\n        const {accountId, accAddress, readyState, apiKey, connectName, eddsaKey} = account\n\n        console.log(LoopringAPI.exchangeAPI, connectProvides.usedWeb3)\n\n        let result: ActionResult = { code: ActionResultCode.NoError }\n\n        if ((readyState !== AccountStatus.UN_CONNECT\n            && inputValue.tradeValue)\n            && tokenMap && exchangeInfo?.exchangeAddress\n            && connectProvides.usedWeb3 && LoopringAPI.exchangeAPI) {\n            try {\n                const tokenInfo = tokenMap[inputValue.belong]\n                const gasLimit = parseInt(tokenInfo.gasAmounts.deposit)\n                let nonce = await sdk.getNonce(connectProvides.usedWeb3, account.accAddress)\n\n                const fee = 0\n                \n                const isMetaMask = connectName === ConnectProviders.MetaMask\n\n                const realGasPrice = gasPrice ?? 30\n\n                if (tokenInfo.symbol.toUpperCase() !== 'ETH') {\n\n                    const req: GetAllowancesRequest = { owner: account.accAddress, token: tokenInfo.symbol}\n\n                    const { tokenAllowances } = await LoopringAPI.exchangeAPI.getAllowances(req, tokenMap)\n    \n                    const allowance = sdk.toBig(tokenAllowances[tokenInfo.symbol])\n    \n                    const curValInWei = sdk.toBig(inputValue.tradeValue).times('1e' + tokenInfo.decimals)\n    \n                    if (curValInWei.gt(allowance)) {\n\n                        myLog(curValInWei, allowance, ' need approveMax!')\n\n                        setShowAccount({isShow: true, step: AccountStep.TokenAccessProcess})\n\n                        try {\n                            await sdk.approveMax(connectProvides.usedWeb3, account.accAddress, tokenInfo.address,\n                                exchangeInfo?.depositAddress, realGasPrice, gasLimit, chainId === 'unknown' ? undefined : chainId, nonce, isMetaMask)\n                            nonce += 1\n                        } catch(reason) {\n                            result.code = ActionResultCode.ApproveFailed\n                            result.data = reason\n                            \n                            setShowAccount({isShow: true, step: AccountStep.FailedTokenAccess})\n                            return\n                        }\n\n                    } else {\n                        myLog('allowance is enough! don\\'t need approveMax!')\n                    }\n\n                }\n\n                setShowAccount({isShow: true, step: AccountStep.DepositingProcess})\n\n                myLog('before deposit:', chainId, connectName, isMetaMask)\n\n                const realChainId = chainId === 'unknown' ? 1 : chainId\n\n                const response2 = await sdk.deposit(connectProvides.usedWeb3, account.accAddress,\n                    exchangeInfo.exchangeAddress, tokenInfo, inputValue.tradeValue, fee,\n                    realGasPrice, gasLimit, realChainId, nonce, isMetaMask)\n\n                myLog('response2:', response2)\n\n                result.data = response2\n\n                setShowAccount({isShow: true, step: AccountStep.Depositing})\n\n            } catch (reason) {\n                dumpError400(reason)\n                result.code = ActionResultCode.DepositFailed\n                result.data = reason\n\n                setShowAccount({isShow: true, step: AccountStep.FailedDeposit})\n            }\n\n        } else {\n            result.code = ActionResultCode.DataNotReady\n        }\n\n        return result\n\n    }, [account, tokenMap, chainId, exchangeInfo, gasPrice, LoopringAPI.exchangeAPI, setShowAccount])\n\n    const onDepositClick = useCallback(async(depositValue) => {\n        myLog('onDepositClick depositValue:', depositValue)\n        setShowDeposit({isShow:false})\n\n        if (depositValue && depositValue.belong) {\n            await handleDeposit(depositValue as R)\n        }\n\n    }, [depositValue, handleDeposit, setShowDeposit, setShowAccount, isNewAccount])\n\n    const handlePanelEvent = useCallback(async(data: SwitchData<any>, switchType: 'Tomenu' | 'Tobutton') => {\n        return new Promise<void>((res: any) => {\n            res();\n        })\n    }, [depositValue, setDepositValue])\n\n    const title = isNewAccount ? t('labelCreateLayer2Title') : t('depositTitleAndActive')\n\n    const depositProps: DepositProps<R, T> = {\n        isNewAccount,\n        title,\n        tradeData: {belong: undefined} as any,\n        coinMap: coinMap as CoinMap<any>,\n        walletMap: walletLayer1 as WalletMap<any>,\n        depositBtnStatus: TradeBtnStatus.AVAILABLE,\n        onDepositClick,\n    }\n\n    return {\n        depositProps: depositProps,\n    }\n}\n","import { WithTranslation, withTranslation } from 'react-i18next';\nimport {\n    AccountStep,\n    ActiveAccountProcess,\n    ApproveAccount,\n    Button,\n    DepositApproveProcess,\n    Depositing,\n    DepositingProcess,\n    DepositPanel,\n    FailedDeposit,\n    FailedTokenAccess,\n    FailedUnlock,\n    HadAccount,\n    ModalAccount,\n    ModalQRCode,\n    NoAccount,\n    ProcessUnlock,\n    SuccessUnlock,\n    Toast,\n    TokenAccessProcess,\n    useOpenModals, WalletConnectStep\n} from '@loopring-web/component-lib';\nimport React, { useCallback, useState } from 'react';\nimport { copyToClipBoard } from 'utils/obj_tools';\nimport { useAccount } from 'stores/account';\nimport { ActionResult, ActionResultCode, REFRESH_RATE, TOAST_TIME } from 'defs/common_defs';\nimport { getShortAddr } from '@loopring-web/common-resources';\nimport { updateAccountFromServer } from 'services/account/activeAccount';\nimport { lockAccount } from 'services/account/lockAccount';\nimport { unlockAccount } from 'services/account/unlockAccount';\nimport { useTokenMap } from 'stores/token';\nimport { myLog } from 'utils/log_tools';\nimport { walletServices } from '@loopring-web/web3-provider';\nimport { useDeposit } from 'modal/useDeposit';\nimport { sleep } from 'loopring-sdk';\n\nimport { walletLayer2Services } from '../../services/account/walletLayer2Services'\n\nexport const ModalAccountInfo = withTranslation('common')(({\n                                                               onClose,\n                                                               etherscanUrl,\n                                                               open,\n                                                               t,\n                                                               ...rest\n                                                           }: {\n    open: boolean,\n    onClose: (e: any) => void,\n    etherscanUrl: string\n} & WithTranslation) => {\n    const {\n        account,\n        shouldShow,\n        updateAccount,\n        setShouldShow,\n        resetAccount,\n    } = useAccount();\n\n    const isNewAccount = true\n\n    const {depositProps} = useDeposit(isNewAccount)\n\n    const {modals: {isShowAccount}, setShowConnect, setShowAccount,} = useOpenModals()\n\n    const [openQRCode, setOpenQRCode] = useState(false)\n    const addressShort = getShortAddr(account.accAddress)\n\n    const {coinMap} = useTokenMap()\n\n    const [copyToastOpen, setCopyToastOpen] = useState(false);\n\n    const onSwitch = useCallback(() => {\n        setShowAccount({isShow: false})\n        setShouldShow(true);\n        setShowConnect({isShow: shouldShow ?? false})\n    }, [setShowConnect, setShowAccount, shouldShow])\n    \n    const onCopy = React.useCallback(() => {\n        copyToClipBoard(account.accAddress);\n        setCopyToastOpen(true)\n    }, [account])\n    const onViewQRCode = React.useCallback(() => {\n        setOpenQRCode(true)\n    }, [])\n    const onDisconnect = React.useCallback(async () => {\n        walletServices.sendDisconnect('', 'customer click disconnect');\n        setShowAccount({isShow: false})\n    }, [resetAccount, setShowAccount])\n\n    const goDeposit = React.useCallback(() => {\n\n        setShowAccount({isShow: true, step: AccountStep.Deposit});\n\n    }, [setShowAccount])\n\n    const goUpdateAccount = React.useCallback(async () => {\n\n        if (!account.accAddress) {\n            myLog('account.accAddress is nil')\n            return\n        }\n\n        myLog('goUpdateAccount....')\n        setShowAccount({isShow: true, step: AccountStep.ActiveAccountProcess});\n\n        const result: ActionResult = await updateAccountFromServer()\n\n        switch (result.code) {\n            case ActionResultCode.NoError:\n                setShowAccount({isShow: true, step: AccountStep.SuccessUnlock})\n                await sleep(REFRESH_RATE)\n                setShowAccount({isShow: false})\n                break\n            case ActionResultCode.GetAccError:\n            case ActionResultCode.GenEddsaKeyError:\n            case ActionResultCode.UpdateAccoutError:\n                myLog('try to sendCheckAccount...')\n                walletLayer2Services.sendCheckAccount(account.accAddress)\n                break\n            default:\n                break\n        }\n\n    }, [account, setShowAccount])\n\n    const unlockBtn = React.useMemo(() => {\n        return <Button variant={'contained'} fullWidth size={'medium'} onClick={() => {\n            setShouldShow(true);\n            unlockAccount();\n        }}>{t('labelUnLockLayer2')} </Button>\n    }, [updateAccount, t]);\n    const lockBtn = React.useMemo(() => {\n        return <Button variant={'contained'} fullWidth size={'medium'} onClick={() => {\n            lockAccount();\n        }}>{t('labelLockLayer2')} </Button>\n    }, [lockAccount, t]);\n\n    const title = t(\"labelCreateLayer2Title\")\n\n    const accountList = React.useMemo(() => {\n        return Object.values({\n            [ AccountStep.NoAccount ]: {view: <NoAccount {...{\n                goDeposit,\n                ...account,\n                etherscanUrl,\n                onSwitch, onCopy,\n                onViewQRCode, onDisconnect, addressShort,\n            }} />,},\n            [ AccountStep.Deposit ]: {view: <DepositPanel title={title} {...{\n                ...rest,\n                _height: 'var(--modal-height)',\n                _width: 'var(--modal-width)',\n                ...depositProps,\n                t\n            }} />},\n            [ AccountStep.Depositing ]: {view: <Depositing label={title}\n                                                    onClose={onClose}\n                                                    etherscanLink={etherscanUrl + account.accAddress} {...{\n                ...rest,\n                t\n            }} />,},\n            [ AccountStep.FailedDeposit ]: {view: <FailedDeposit label={title}\n                                                          etherscanLink={etherscanUrl + account.accAddress}\n                                                          onRetry={() => goDeposit()} {...{...rest, t}} />,onBack:()=>{\n                    setShowAccount({isShow: true,step:AccountStep.Deposit});\n                }},\n            [ AccountStep.SignAccount ]: {view: <ApproveAccount {...{\n                ...account,\n                etherscanUrl,\n                onSwitch, onCopy,\n                onViewQRCode, onDisconnect, addressShort,\n            }} goUpdateAccount={() => {\n                goUpdateAccount()\n            }}  {...{...rest, t}} />,},\n            [ AccountStep.ProcessUnlock ]: {view: <ProcessUnlock providerName={account.connectName} {...{...rest, t}} />,},\n            [ AccountStep.SuccessUnlock ]: {view: <SuccessUnlock providerName={account.connectName} {...{...rest, t}} />,},\n            [ AccountStep.FailedUnlock ]: {view: <FailedUnlock onRetry={() => {\n                unlockAccount()\n            }} {...{...rest, t}} />,},\n            [ AccountStep.HadAccount ]: {view: <HadAccount {...{\n                ...account,\n                onSwitch, onCopy,\n                etherscanUrl,\n                // address: account.accAddress,\n                // connectBy: account.connectName,\n                onViewQRCode, onDisconnect, addressShort,\n                etherscanLink: etherscanUrl + account.accAddress,\n                mainBtn: account.readyState === 'ACTIVATED' ? lockBtn : unlockBtn\n            }} />,},\n            [ AccountStep.TokenAccessProcess ]: {view: <TokenAccessProcess label={title}\n                                                                    providerName={account.connectName} {...{\n                ...rest,\n                t\n            }} />,onBack:()=>{\n                    setShowAccount({isShow: true,step:AccountStep.Deposit});\n                }},\n            [ AccountStep.DepositApproveProcess ]: {view: <DepositApproveProcess label={title}\n                                                                          etherscanLink={etherscanUrl + account.accAddress}\n                                                                          providerName={account.connectName} {...{\n                ...rest,\n                t\n            }} />,},\n            [ AccountStep.DepositingProcess ]: {view: <DepositingProcess label={title}\n                                                                  etherscanLink={etherscanUrl + account.accAddress}\n                                                                  providerName={account.connectName} {...{\n                ...rest,\n                t\n            }} />,},\n            [ AccountStep.ActiveAccountProcess ]: {view: <ActiveAccountProcess providerName={account.connectName} {...{\n                ...rest,\n                t\n            }} />,},\n            [ AccountStep.ActiveAccountFailed ]: {view: <FailedUnlock label={title} onRetry={() => {\n                goUpdateAccount()\n            }} {...{...rest, t}} />,onBack:()=>{\n                    setShowAccount({isShow: true,step:AccountStep.SignAccount});\n                }},\n            [ AccountStep.FailedTokenAccess ]: {view: <FailedTokenAccess label={title} onRetry={() => {\n                goDeposit()\n            }} {...{\n                t, ...rest,\n                coinInfo: coinMap ? coinMap[ 'USTD' ] : undefined\n            }} />,},\n\n        })\n    }, [addressShort, account, depositProps, etherscanUrl, onCopy, onSwitch, onDisconnect, onViewQRCode, t, rest])\n\n    return <>\n        <Toast alertText={t('Address Copied to Clipboard!')} open={copyToastOpen}\n               autoHideDuration={TOAST_TIME} setOpen={setCopyToastOpen} severity={\"success\"}/>\n\n        <ModalQRCode open={openQRCode} onClose={() => setOpenQRCode(false)} title={'ETH Address'}\n                     description={account?.accAddress} url={account?.accAddress}/>\n\n        <ModalAccount open={isShowAccount.isShow} onClose={(e) => {\n            setShouldShow(false);\n            onClose(e);\n        }} panelList={accountList} onBack={accountList[ isShowAccount.step ].onBack} step={isShowAccount.step}/>\n    </>\n})","import {\n    dumpError400,\n    GetOffchainFeeAmtRequest,\n    LoopringMap,\n    OffchainFeeReqType,\n    toBig,\n    TokenInfo\n} from 'loopring-sdk';\nimport { useAccount } from '../stores/account';\nimport { useState } from 'react';\nimport { useCustomDCEffect } from '../hooks/common/useCustomDCEffect';\nimport { LoopringAPI } from '../stores/apis/api';\nimport * as sdk from 'loopring-sdk';\nimport { BIG10 } from '../defs/swap_defs';\nimport { myLog } from '../utils/log_tools';\n\nexport function useChargeFees(tokenSymbol: string | undefined, requestType: OffchainFeeReqType,\n                                 tokenMap: LoopringMap<TokenInfo> | undefined, amount?: number) {\n\n    const {account} = useAccount()\n\n    const [chargeFeeList, setChargeFeeList] = useState<any[]>([])\n\n    useCustomDCEffect(async () => {\n\n        if (account.accountId === -1 || !tokenSymbol || !tokenMap || !LoopringAPI.userAPI) {\n            return\n        }\n\n        let chargeFeeList: any[] = []\n\n        try {\n            const tokenInfo = tokenMap[ tokenSymbol ]\n\n            const request: GetOffchainFeeAmtRequest = {\n                accountId: account.accountId,\n                tokenSymbol,\n                requestType,\n                amount: amount ? toBig(amount).times('1e' + tokenInfo.decimals).toFixed(0, 0) : undefined\n            }\n\n            const response = await LoopringAPI.userAPI.getOffchainFeeAmt(request, account.apiKey)\n\n            if (response?.raw_data?.fees instanceof Array) {\n                response.raw_data.fees.forEach((item: any) => {\n                    const feeRaw = item.fee\n                    const tokenInfo = tokenMap[ item.token ]\n                    const fee = sdk.toBig(item.fee).div('1e' + tokenInfo.decimals).toNumber()\n                    chargeFeeList.push({belong: item.token, fee, __raw__: feeRaw})\n                })\n\n                setChargeFeeList(chargeFeeList)\n            }\n            myLog('response:', response)\n\n        } catch (reason) {\n            dumpError400(reason)\n        }\n\n\n        setChargeFeeList(chargeFeeList)\n\n    }, [account.accountId, account.apiKey, LoopringAPI.userAPI, requestType, tokenSymbol, tokenMap])\n\n    return {\n        chargeFeeList,\n    }\n\n}","import { useAccount } from '../stores/account';\nimport { AccountStep, useOpenModals } from '@loopring-web/component-lib';\nimport React from 'react';\nimport { sleep } from 'loopring-sdk';\nimport { useAccountHook } from '../services/account/useAccountHook';\n\nexport  function useAccountModal() {\n    const { shouldShow, setShouldShow, statusUnset: statusAccountUnset} = useAccount();\n    const { setShowAccount } = useOpenModals();\n    const handleErrorAccount = React.useCallback(()=>{\n        // updateAccount({readyState:'NO_ACCOUNT'});\n        statusAccountUnset();\n    },[shouldShow])\n    const handleLockAccount = React.useCallback(()=>{\n        // updateAccount({readyState:'NO_ACCOUNT'});\n        statusAccountUnset();\n        setShowAccount({isShow: shouldShow ?? false,step:AccountStep.HadAccount});\n    },[shouldShow])\n    const handleNoAccount = React.useCallback((data: any)=>{\n        // updateAccount({readyState:'NO_ACCOUNT'});\n        statusAccountUnset();\n        setShowAccount({isShow: shouldShow ?? false,step:AccountStep.NoAccount});\n    },[shouldShow])\n    const handleDepositingAccount = React.useCallback(async ()=>{\n        // updateAccount({readyState:'DEPOSITING'});\n        setShowAccount({isShow: shouldShow ?? false,step:AccountStep.Depositing});\n        await sleep(5000)\n        setShouldShow(false)\n        setShowAccount({isShow: false});\n        statusAccountUnset();\n    },[shouldShow])\n    const handleErrorApproveToken = React.useCallback(()=>{\n        // updateAccount({readyState:'DEPOSITING'});\n        setShowAccount({isShow: shouldShow ?? false,step:AccountStep.Depositing});\n    },[shouldShow])\n    const handleErrorDepositSign = React.useCallback(()=>{\n        // updateAccount({readyState:'DEPOSITING'});\n        setShowAccount({isShow: shouldShow ?? false,step:AccountStep.FailedDeposit});\n    },[shouldShow])\n    const handleProcessDeposit = React.useCallback(()=>{\n        // updateAccount({readyState:'DEPOSITING'});\n        setShowAccount({isShow: shouldShow ?? false,step:AccountStep.DepositApproveProcess});\n    },[shouldShow])\n    const handleSignAccount = React.useCallback(()=>{\n        // updateAccount({readyState:'DEPOSITING'});\n        statusAccountUnset();\n        setShowAccount({isShow: shouldShow ?? false,step:AccountStep.SignAccount});\n    },[shouldShow])\n    const handleSignError = React.useCallback(()=>{\n        setShowAccount({isShow: shouldShow ?? false,step:AccountStep.FailedUnlock});\n    },[shouldShow])\n    const handleProcessSign = React.useCallback(()=>{\n        setShowAccount({isShow: shouldShow ?? false,step:AccountStep.ProcessUnlock});\n    },[shouldShow])\n    const handleAccountActive  = React.useCallback(async ()=>{\n\n        //updateAccount({readyState:'ACTIVATED'});\n        setShowAccount({isShow: shouldShow ?? false,step:AccountStep.SuccessUnlock});\n        await sleep(1000)\n        setShouldShow(false)\n        setShowAccount({isShow: false});\n        statusAccountUnset();\n    },[shouldShow])\n    useAccountHook({\n        handleErrorAccount,\n        handleLockAccount,// clear private data\n        handleNoAccount,//\n        // TODO\n        //  step1 Approve account;  click allow from provider\n        //  step2 send to ETH;  click allow from provider\n        handleDepositingAccount,\n        handleErrorApproveToken,\n        handleErrorDepositSign,\n        handleProcessDeposit,// two or one step\n        handleSignAccount, //unlock or update account  sgin\n        handleProcessSign,\n        handleSignError,\n        // handleProcessAccountCheck,\n        handleAccountActive: handleAccountActive,\n    })\n}","import React from 'react';\n// import { walletLa } from './walletServices';\nimport { Commands } from './command';\nimport { walletLayer2Services } from './walletLayer2Services';\n\nexport function useAccountHook(\n    {\n        handleLockAccount,// clear private data\n        handleNoAccount,//\n        handleErrorAccount,\n        // TODO\n        //  step1 Approve account;  click allow from provider\n        //  step2 send to ETH;  click allow from provider\n        handleDepositingAccount,\n        handleErrorApproveToken,\n        handleErrorDepositSign,\n        handleProcessDeposit,// two or one step\n        handleSignAccount, //unlock or update account  assgin\n        handleProcessSign,\n        handleSignError,\n        handleProcessAccountCheck,\n        handleAccountActive,\n    }\n\n        : any) {\n    const subject = React.useMemo(() => walletLayer2Services.onSocket(), []);\n    React.useEffect(() => {\n        const subscription = subject.subscribe(({data, status}: { status: keyof typeof Commands, data?: any }) => {\n            switch (status) {\n                case 'ErrorNetwork':\n                    handleErrorAccount(data);\n                    break;// clear private data\n                case 'LockAccount':\n                    handleLockAccount(data);\n                    break;// clear private data\n                case 'NoAccount':\n                    handleNoAccount(data);\n                    break;//\n                case 'DepositingAccount':\n                    handleDepositingAccount(data);\n                    break;\n                case 'ErrorApproveToken':\n                    handleErrorApproveToken(data);\n                    break;\n                case 'ErrorDepositSign':\n                    handleErrorDepositSign(data);\n                    break;\n                case 'ProcessDeposit':\n                    handleProcessDeposit(data);\n                    break;// two or one step\n                case 'SignAccount':\n                    handleSignAccount(data);\n                    break;//unlock or update account  assgin\n                case 'ProcessSign':\n                    handleProcessSign(data);\n                    break;\n                case 'ErrorSign':\n                    handleSignError(data);\n                    break;\n                case 'AccountUnlocked':\n                    handleAccountActive(data);\n                    break;\n            }\n        });\n        return () => subscription.unsubscribe();\n    }, [subject, handleLockAccount,// clear private data\n        handleErrorAccount,\n        handleNoAccount,//\n        handleDepositingAccount,\n        handleErrorApproveToken,\n        handleErrorDepositSign,\n        handleProcessDeposit,// two or one step\n        handleSignAccount, //unlock or update account  assgin\n        handleProcessSign,\n        handleProcessAccountCheck,]);\n}\n","import {\n    ModalPanel, Toast,\n    useOpenModals\n} from '@loopring-web/component-lib';\nimport { ModalWalletConnectPanel } from './WalletModal';\nimport { ModalAccountInfo } from './AccountModal';\nimport { withTranslation, WithTranslation } from 'react-i18next';\nimport { useTransfer } from './useTransfer';\nimport { useDeposit } from './useDeposit';\nimport { useWithdraw } from './useWithdraw';\nimport { useSystem } from '../stores/system';\nimport { useAccountModal } from './useAccountModal';\nimport { TOAST_TIME } from '../defs/common_defs';\nimport React from 'react';\n\nexport const ModalGroup = withTranslation('common',{withRef: true})(({...rest}:WithTranslation)=>{\n    const {transferProps} = useTransfer();\n    const {depositProps} = useDeposit();\n    const {withdrawProps} = useWithdraw();\n    const {etherscanUrl} = useSystem();\n    useAccountModal();\n    const {modals: {isShowAccount, isShowConnect}, setShowConnect, setShowAccount} = useOpenModals();\n    return  <>\n\n        <ModalPanel transferProps={transferProps}\n                    withDrawProps={withdrawProps}\n                    depositProps={depositProps}\n                    resetProps={{} as any}\n                    ammProps={{} as any}\n                    swapProps={{} as any}\n                    {...{_height: 'var(--modal-height)', _width: 'var(--modal-width)'}}\n        />\n\n        <ModalWalletConnectPanel {...{\n            ...rest,\n            open: isShowConnect.isShow,\n            onClose: () => setShowConnect({isShow: false})\n        }} />\n        <ModalAccountInfo\n            {...{\n                ...rest,\n                etherscanUrl,\n                open: isShowAccount.isShow,\n                onClose: () => setShowAccount({isShow: false})\n            }}\n        ></ModalAccountInfo>\n    </>\n\n} )","import React, { useCallback } from 'react';\n\nimport { SwitchData, TradeBtnStatus, TransferProps, } from '@loopring-web/component-lib';\nimport { AccountStatus, CoinMap, IBData, SagaStatus, WalletMap } from '@loopring-web/common-resources';\nimport { ConnectorNames, dumpError400, OffchainFeeReqType, OriginTransferRequestV3, toBig, VALID_UNTIL } from 'loopring-sdk';\nimport { useTokenMap } from '../stores/token';\nimport { useAccount } from '../stores/account';\nimport { useChargeFees } from './useChargeFees';\nimport { LoopringAPI } from '../stores/apis/api';\nimport { useSystem } from '../stores/system';\nimport { connectProvides } from '@loopring-web/web3-provider';\nimport { useCustomDCEffect } from '../hooks/common/useCustomDCEffect';\nimport { myLog } from 'utils/log_tools';\nimport { useWalletLayer2 } from '../stores/walletLayer2';\nimport { makeWalletLayer2 } from '../hooks/help';\nimport { debug } from 'console';\n\nexport const useTransfer = <R extends IBData<T>, T>(): {\n    // handleTransfer: (inputValue:R) => void,\n    transferProps: TransferProps<R, T>\n    // transferValue: R\n} => {\n    const {tokenMap, coinMap} = useTokenMap();\n    const {account} = useAccount()\n    const {exchangeInfo, chainId} = useSystem();\n    const {walletLayer2, status: walletLayer2Status} = useWalletLayer2();\n    const [walletMap, setWalletMap] = React.useState(makeWalletLayer2().walletMap ?? {} as WalletMap<R>);\n    // const {setShowTransfer}  = useOpenModals();\n    const [transferValue, setTransferValue] = React.useState<IBData<T>>({\n        belong: undefined,\n        tradeValue: 0,\n        balance: 0\n    } as IBData<unknown>)\n    const {chargeFeeList} = useChargeFees(transferValue.belong, OffchainFeeReqType.TRANSFER, tokenMap)\n\n    const [tranferFeeInfo, setTransferFeeInfo] = React.useState<any>()\n    const [payeeAddr, setPayeeAddr] = React.useState<string>('')\n    React.useEffect(()=>{\n        if(walletLayer2Status === SagaStatus.UNSET) {\n            const walletMap = makeWalletLayer2().walletMap ?? {} as WalletMap<R>\n            setWalletMap(walletMap)\n        }\n    },[walletLayer2Status])\n\n    useCustomDCEffect(() => {\n\n        if (chargeFeeList.length > 0) {\n            setTransferFeeInfo(chargeFeeList[0])\n        }\n\n    }, [chargeFeeList, setTransferFeeInfo])\n\n    const onTransferClick = useCallback(async(transferValue) => {\n        const {accountId, accAddress, readyState, apiKey, connectName, eddsaKey} = account\n        console.log('useCallback tranferFeeInfo:', tranferFeeInfo) \n        \n        if (readyState === AccountStatus.ACTIVATED && tokenMap \n            && exchangeInfo && connectProvides.usedWeb3 \n            && transferValue?.belong && tranferFeeInfo?.belong && eddsaKey?.sk) {\n            \n            try {\n                const sellToken = tokenMap[ transferValue.belong as string ]\n                const feeToken = tokenMap[ tranferFeeInfo.belong ]\n                const transferVol = toBig(transferValue.tradeValue).times('1e' + sellToken.decimals).toFixed(0, 0)\n                const storageId = await LoopringAPI.userAPI?.getNextStorageId({\n                    accountId,\n                    sellTokenId: sellToken.tokenId\n                }, apiKey)\n                const req: OriginTransferRequestV3 = {\n                    exchange: exchangeInfo.exchangeAddress,\n                    payerAddr: accAddress,\n                    payerId: accountId,\n                    payeeAddr,\n                    payeeId: 0,\n                    storageId: storageId?.offchainId,\n                    token: {\n                        tokenId: sellToken.tokenId,\n                        volume: transferVol,\n                    },\n                    maxFee: {\n                        tokenId: feeToken.tokenId,\n                        volume: tranferFeeInfo.__raw__,\n                    },\n                    validUntil: VALID_UNTIL,\n                }\n                const response = await LoopringAPI.userAPI?.submitInternalTransfer(req,\n                    connectProvides.usedWeb3,\n                    chainId === 'unknown' ? 5 : chainId, connectName as ConnectorNames,\n                    eddsaKey.sk, apiKey)\n\n                    myLog(response)\n                //TODO check success or failed API\n            } catch (e) {\n                dumpError400(e)\n            }\n\n        } else {\n            return false\n        }\n\n    }, [account, tokenMap, tranferFeeInfo?.belong, transferValue, payeeAddr])\n\n    const handlePanelEvent = useCallback(async (data: SwitchData<R>, switchType: 'Tomenu' | 'Tobutton') => {\n        return new Promise<void>((res: any) => {\n            if (data?.tradeData?.belong) {\n                if (transferValue !== data.tradeData) {\n                    setTransferValue(data.tradeData)\n                }\n            } else {\n                setTransferValue({belong: undefined, tradeValue: 0, balance: 0} as IBData<unknown>)\n            }\n            res();\n        })\n    }, [setTransferValue])\n\n    const handleFeeChange = useCallback((value: { belong: any; \n        fee: number | string; \n        __raw__?: any }): void => {\n            myLog('handleFeeChange:', value)\n            setTransferFeeInfo(value)\n    }, [setTransferFeeInfo])\n\n    const transferProps = {\n        tradeData: { belong: undefined } as any,\n        coinMap: coinMap as CoinMap<T>,\n        walletMap: walletMap as WalletMap<T>, \n        transferBtnStatus: TradeBtnStatus.AVAILABLE,\n        onTransferClick,\n        handleFeeChange,\n        handlePanelEvent,\n        chargeFeeToken: 'ETH',\n        chargeFeeTokenList: chargeFeeList,\n        handleOnAddressChange: (value: any) => {\n            myLog('transfer handleOnAddressChange:', value);\n            setPayeeAddr(value)\n        },\n        handleAddressError: (_value: any) => {\n            return {error: false, message: ''}\n        }\n    }\n\n    return {\n        transferProps ,\n    }\n}\n","import React, { useState } from 'react';\n\nimport { SwitchData, TradeBtnStatus, useOpenModals, WithdrawProps } from '@loopring-web/component-lib';\nimport {\n    AccountStatus,\n    CoinMap,\n    IBData,\n    SagaStatus,\n    WalletMap,\n    WithdrawType,\n    WithdrawTypes\n} from '@loopring-web/common-resources';\nimport { ConnectorNames, dumpError400, OffchainFeeReqType, toBig, VALID_UNTIL } from 'loopring-sdk';\nimport { useTokenMap } from '../stores/token';\nimport { useAccount } from '../stores/account';\nimport { useChargeFees } from './useChargeFees';\nimport { useCustomDCEffect } from '../hooks/common/useCustomDCEffect';\nimport { LoopringAPI } from '../stores/apis/api';\nimport { useSystem } from '../stores/system';\nimport { connectProvides } from '@loopring-web/web3-provider';\nimport { myLog } from 'utils/log_tools';\nimport { useWalletLayer2 } from '../stores/walletLayer2';\nimport { makeWalletLayer2 } from '../hooks/help';\n// import { useCustomDCEffect } from '../../hooks/common/useCustomDCEffect';\n// import { useChargeFeeList } from './hook';\n\nexport const useWithdraw = <R extends IBData<T>, T>(): {\n    // handleWithdraw: (inputValue:R) => void,\n    withdrawProps: WithdrawProps<R, T>\n    // withdrawValue: R\n} => {\n    const {tokenMap, coinMap} = useTokenMap();\n    const {account} = useAccount()\n    const {exchangeInfo, chainId} = useSystem();\n    const [withdrawValue, setWithdrawValue] = React.useState<IBData<T>>({\n        belong: undefined,\n        tradeValue: 0,\n        balance: 0\n    } as IBData<unknown>)\n    const {status:walletLayer2Status} = useWalletLayer2();\n    const [walletMap2, setWalletMap2] = React.useState(makeWalletLayer2().walletMap??{} as WalletMap<R>);\n    const {chargeFeeList} = useChargeFees(withdrawValue.belong, OffchainFeeReqType.OFFCHAIN_WITHDRAWAL, tokenMap)\n    const [withdrawAddr, setWithdrawAddr] = useState<string>()\n    const [withdrawFeeInfo, setWithdrawFeeInfo] = useState<any>(undefined)\n    const [withdrawType, setWithdrawType] = useState<OffchainFeeReqType>(OffchainFeeReqType.OFFCHAIN_WITHDRAWAL)\n    const {setShowWithdraw}  = useOpenModals();\n\n    React.useEffect(()=>{\n        if(walletLayer2Status === SagaStatus.UNSET){\n            const walletMap = makeWalletLayer2().walletMap ?? {} as WalletMap<R>\n            setWalletMap2(walletMap)\n        }\n    },[walletLayer2Status])\n    useCustomDCEffect(() => {\n        if (chargeFeeList.length > 0) {\n            setWithdrawFeeInfo(chargeFeeList[0])\n        }\n    }, [chargeFeeList, setWithdrawFeeInfo])\n\n    const handleWithdraw = React.useCallback(async (inputValue: R) => {\n        const {accountId, accAddress, readyState, apiKey, connectName, eddsaKey} = account\n        if (readyState === AccountStatus.ACTIVATED && tokenMap \n            && exchangeInfo && connectProvides.usedWeb3 \n            && withdrawAddr && withdrawFeeInfo?.belong && eddsaKey?.sk) {\n            try {\n                const withdrawToken = tokenMap[ inputValue.belong as string ]\n                const feeToken = tokenMap[ withdrawFeeInfo.belong ]\n                const withdrawVol = toBig(inputValue.tradeValue).times('1e' + withdrawToken.decimals).toFixed(0, 0)\n                const storageId = await LoopringAPI.userAPI?.getNextStorageId({\n                    accountId: accountId,\n                    sellTokenId: withdrawToken.tokenId\n                }, apiKey)\n                const response = await LoopringAPI.userAPI?.submitOffchainWithdraw({\n                        exchange: exchangeInfo.exchangeAddress,\n                        owner: accAddress,\n                        to: withdrawAddr,\n                        accountId: account.accountId,\n                        storageId: storageId?.offchainId,\n                        token: {\n                            tokenId: withdrawToken.tokenId,\n                            volume: withdrawVol,\n                        },\n                        maxFee: {\n                            tokenId: feeToken.tokenId,\n                            volume: withdrawFeeInfo.__raw__,\n                        },\n                        extraData: '',\n                        minGas: 0,\n                        validUntil: VALID_UNTIL,\n                    },\n                    connectProvides.usedWeb3,\n                    chainId === 'unknown' ? 1 : chainId, connectName as ConnectorNames,\n                    eddsaKey.sk, apiKey)\n\n                    myLog('got response:', response)\n                //TODO check success or failed API\n            } catch (e) {\n                dumpError400(e)\n            }\n\n        } else {\n            return false\n        }\n\n    }, [account, tokenMap, withdrawFeeInfo])\n\n    const withdrawType2 = withdrawType === OffchainFeeReqType.FAST_OFFCHAIN_WITHDRAWAL ? 'Fast' : 'Standard'\n\n    const withdrawProps: WithdrawProps<R, T> = {\n        tradeData: {belong: undefined} as any,\n        coinMap: coinMap as CoinMap<T>,\n        walletMap: walletMap2 as WalletMap<any>,\n        withdrawBtnStatus: TradeBtnStatus.AVAILABLE,\n        withdrawType: withdrawType2,\n        withdrawTypes: WithdrawTypes,\n        onWithdrawClick: () => {\n            if (withdrawValue && withdrawValue.belong) {\n                handleWithdraw(withdrawValue as R)\n            }\n            setShowWithdraw({isShow:false})\n        },\n        handleFeeChange(value: { belong: any; fee: number | string; __raw__?: any }): void {\n            setWithdrawFeeInfo(value as any)\n        },\n        handleWithdrawTypeChange: (value: 'Fast' | 'Standard') => {\n            myLog('handleWithdrawTypeChange', value)\n            const offchainType = value === WithdrawType.Fast ? OffchainFeeReqType.FAST_OFFCHAIN_WITHDRAWAL : OffchainFeeReqType.OFFCHAIN_WITHDRAWAL\n            setWithdrawType(offchainType)\n        },\n        handlePanelEvent: async (data: SwitchData<R>, switchType: 'Tomenu' | 'Tobutton') => {\n            return new Promise((res: any) => {\n                if (data?.tradeData?.belong) {\n                    if (withdrawValue !== data.tradeData) {\n                        setWithdrawValue(data.tradeData)\n                    }\n                } else {\n                    setWithdrawValue({belong: undefined, tradeValue: 0, balance: 0} as IBData<unknown>)\n                }\n\n                res();\n            })\n        },\n        chargeFeeToken: 'ETH',\n        chargeFeeTokenList: chargeFeeList,\n        handleOnAddressChange: (value: any) => {\n            // myLog('withdraw handleOnAddressChange', value);\n            setWithdrawAddr(value)\n        },\n        handleAddressError: (_value: any) => {\n            return {error: false, message: ''}\n        }\n    }\n\n    return {\n        withdrawProps,\n    }\n}\n","import { HashRouter as Router, Route, Switch, } from 'react-router-dom'\n\nimport Header from 'layouts/header'\n\nimport QuotePage from 'pages/QuotePage'\nimport { SwapPage } from 'pages/SwapPage'\n\nimport Container from '@material-ui/core/Container'\nimport { Box } from '@material-ui/core'\nimport { DevWrapper } from '../provider/'\nimport { Layer2Page } from '../pages/Layer2Page'\nimport { LiquidityPage } from '../pages/LiquidityPage'\nimport { MiningPage } from '../pages/MiningPage'\nimport { ModalGroup } from '../modal';\n// import React from 'react';\n\nconst RouterView = () => {\n\n    return <Router>\n        <Header />\n\n        {/*<Box style={{marginTop: `var(--header-height)`}} flex={1} display={'flex'}>*/}\n        <Container maxWidth=\"lg\" style={{minHeight:'calc(100% - 64px - 32px)',display:'flex',flexDirection:'column'}}>\n            {/*style={{height: '100%' }}*/}\n            <Box display={'flex'} flex={1} alignItems={'stretch'} flexDirection={'row'} marginTop={3}  >\n                <Switch>\n                    <Route exact component={SwapPage} path='/'/>\n                    <Route exact component={QuotePage} path='/markets'/>\n                    <Route component={SwapPage} path='/trading/lite'/>\n                    <Route component={SwapPage} path='/trading/lite(/:symbol)'/>\n                    <Route exact component={MiningPage} path='/mining'/>\n\n                    <Route exact component={Layer2Page} path='/layer2'/>\n                    <Route exact component={Layer2Page} path='/layer2/assets'/>\n                    <Route exact component={Layer2Page} path='/layer2/my-liquidity'/>\n                    <Route exact component={Layer2Page} path='/layer2/history'/>\n                    <Route exact component={Layer2Page} path='/layer2/order'/>\n                    <Route exact component={Layer2Page} path='/layer2/rewards'/>\n                    {/* <Route exact component={Layer2Page} path='/layer2/red-packet'/>\n                    <Route exact component={Layer2Page} path='/layer2/security'/>\n                    <Route exact component={Layer2Page} path='/layer2/vip'/> */}\n                    <Route exact component={Layer2Page} path='/layer2/transactions'/>\n                    <Route exact component={Layer2Page} path='/layer2/trades'/>\n                    <Route exact component={Layer2Page} path='/layer2/ammRecords'/>\n                    {/* <Route exact component={Layer2Page} path='/layer2/orders'/> */}\n                    <Route exact component={Layer2Page} path='/layer2/setting'/>\n\n                    <Route exact component={LiquidityPage} path='/liquidity'/>\n                    <Route exact component={LiquidityPage} path='/liquidity/pools/*'/>\n                    <Route exact component={LiquidityPage} path='/liquidity/pools'/>\n                    {/*<Route exact component={LiquidityPage} path='/liquidity/pools/coinPair(/:symbol)'/>*/}\n                    <Route exact component={LiquidityPage} path='/liquidity/amm-mining'/>\n                    <Route exact component={LiquidityPage} path='/liquidity/my-liquidity'/>\n                    {/* <Route exact component={LiquidityPage} path='/liquidity/orderBook-Mining'/>\n                    <Route exact component={LiquidityPage} path='/liquidity/maker-rebates'/> */}\n\n                    <DevWrapper>\n                        <Route exact path='/debug'>\n                        </Route>\n                    </DevWrapper>\n\n                </Switch>\n            </Box>\n        </Container>\n        {/*</Box>*/}\n        <ModalGroup/>\n    </Router>\n}\n\nexport default RouterView\n","import { cleanLayer2, goErrorNetWork } from './lockAccount';\nimport store from '../../stores';\nimport { cleanAccountStatus, updateAccountStatus } from '../../stores/account';\nimport { updateSystem } from '../../stores/system';\n\nexport const networkUpdate = ({chainId}: any): boolean => {\n    const _chainId = store.getState().system.chainId;\n    if (chainId === 'unknown') {\n        store.dispatch(updateAccountStatus({wrongChain: true, _chainId:chainId}));\n        goErrorNetWork();\n        return false;\n    } else if (chainId !== _chainId && _chainId !== 'unknown' && chainId !== 'unknown') {\n        store.dispatch(updateAccountStatus({_chainId:chainId}));\n        store.dispatch(updateSystem({chainId}));\n        cleanLayer2()\n        // window.location.reload();\n        return true;\n    }else{\n        store.dispatch(updateAccountStatus({wrongChain: false, _chainId:chainId}));\n        return true;\n    }\n}\n","import { walletLayer2Services } from './walletLayer2Services';\nimport store from '../../stores';\nimport { cleanAccountStatus, updateAccountStatus } from '../../stores/account';\nimport { myLog } from '../../utils/log_tools';\n\nexport const checkAccount = (newAccAddress: string) => {\n    const account = store.getState().account;\n    if (account.accAddress === '' || account.accAddress !== newAccAddress) {\n        myLog('After connect >>,account part: diff account, clean layer2')\n        store.dispatch(cleanAccountStatus(undefined));\n        walletLayer2Services.sendCheckAccount(newAccAddress);\n    }else if (newAccAddress && newAccAddress !== '') {\n        myLog('After connect >>,checkAccount: step1 address',newAccAddress)\n        if (account &&  account.accountId === -1) {\n            myLog('After connect >>,checkAccount: step1 no account Id')\n            walletLayer2Services.sendCheckAccount(newAccAddress)\n        } else if (account.accountId && account.apiKey && account.eddsaKey) {\n            myLog('After connect >>,checkAccount: step1 have activate account from store, account:', account)\n            walletLayer2Services.sendAccountSigned();\n        } else {\n            myLog('After connect >>,checkAccount: step1 account locked')\n            walletLayer2Services.sendAccountLock();\n        }\n    }\n}","import React from 'react';\nimport { SagaStatus } from '@loopring-web/common-resources';\nimport { useWalletLayer1 } from './stores/walletLayer1';\nimport { useWalletLayer2 } from './stores/walletLayer2';\nimport { useAccount } from './stores/account';\nimport { useUserRewards } from './stores/userRewards';\nimport { useConnect } from './hookConnect';\nimport { myLog } from 'utils/log_tools';\n\nexport function useAccountInit({state}: { state: keyof typeof SagaStatus }) {\n    const {getUserRewards}  = useUserRewards()\n    useConnect({state})\n    const {\n        updateWalletLayer1,\n        resetLayer1,\n        status: walletLayer1Status,\n        statusUnset: wallet1statusUnset\n    } = useWalletLayer1()\n    const {\n        updateWalletLayer2,\n        resetLayer2,\n        status: walletLayer2Status,\n        statusUnset: wallet2statusUnset\n    } = useWalletLayer2();\n    const {account, status: accountStatus, statusUnset: accountStatusUnset} = useAccount();\n\n    React.useEffect(() => {\n        if (accountStatus === SagaStatus.UNSET && state === SagaStatus.DONE) {\n            switch (account.readyState) {\n                case 'UN_CONNECT':\n                case 'ERROR_NETWORK':\n                    resetLayer1();\n                    break;\n                case 'NO_ACCOUNT':\n                case 'DEPOSITING':\n                case 'LOCKED':\n                    resetLayer2();\n                    // myLog('walletLayer1Status:', walletLayer1Status, ' account.readyState:', account.readyState)\n                    if (walletLayer1Status !== SagaStatus.PENDING) {\n                        updateWalletLayer1();\n                    }\n                    break;\n                case 'ACTIVATED':\n                    // \n                    if (walletLayer1Status !== SagaStatus.PENDING) {\n                        updateWalletLayer1();\n                    }\n                    if (walletLayer2Status !== SagaStatus.PENDING) {\n                        updateWalletLayer2();\n                    }\n                    break;\n\n            }\n            getUserRewards();\n        }\n\n    }, [accountStatus, state, account.readyState]);\n    React.useEffect(() => {\n        switch (walletLayer1Status) {\n            case \"ERROR\":\n                wallet1statusUnset();\n                // setState('ERROR')\n                //TODO: show error at button page show error  some retry dispath again\n                break;\n            case \"DONE\":\n                wallet1statusUnset();\n                //setWalletMap1(walletLayer1State.walletLayer1);\n                break;\n            default:\n                break;\n\n        }\n    }, [walletLayer1Status]);\n    React.useEffect(() => {\n        switch (walletLayer2Status) {\n            case \"ERROR\":\n                wallet2statusUnset();\n                // setState('ERROR')\n                //TODO: show error at button page show error  some retry dispath again\n                break;\n            case \"DONE\":\n                wallet2statusUnset();\n                //setWalletMap1(walletLayer1State.walletLayer1);\n                break;\n            default:\n                break;\n\n        }\n    }, [walletLayer2Status])\n}\n","import { useAccount } from './stores/account';\nimport { useSystem } from './stores/system';\nimport { useOpenModals, WalletConnectStep } from '@loopring-web/component-lib';\nimport React from 'react';\nimport { ChainId, sleep } from 'loopring-sdk';\nimport { myLog } from './utils/log_tools';\nimport { networkUpdate } from './services/account/networkUpdate';\nimport { checkAccount } from './services/account/checkAccount';\nimport { ErrorType, useConnectHook } from '@loopring-web/web3-provider';\nimport { SagaStatus } from '@loopring-web/common-resources';\n\nexport function useConnect({state}: { state: keyof typeof SagaStatus }) {\n    const {\n        account,\n        shouldShow,\n        resetAccount,\n        statusUnset: statusAccountUnset,\n        setShouldShow,\n        status: accountStatus\n    } = useAccount();\n    const {updateSystem, chainId: _chainId} = useSystem();\n    const {setShowConnect} = useOpenModals();\n    const [stateAccount, setStateAccount] = React.useState<SagaStatus>(SagaStatus.DONE);\n    React.useEffect(() => {\n        if (stateAccount === SagaStatus.PENDING && accountStatus === SagaStatus.DONE) {\n            setStateAccount(SagaStatus.DONE)\n            statusAccountUnset();\n        }\n    }, [stateAccount,accountStatus])\n    const handleConnect = React.useCallback(async ({\n                                                       accounts,\n                                                       chainId,\n                                                   }: { accounts: string, provider: any, chainId: ChainId | 'unknown' }) => {\n        const accAddress = accounts[ 0 ];\n        myLog('After connect >>,network part start: step1 networkUpdate')\n        const networkFlag = networkUpdate({chainId})\n        myLog('After connect >>,network part done: step2 check account')\n        if (networkFlag) {\n            checkAccount(accAddress);\n        }\n        setShouldShow(false)\n        setShowConnect({isShow: shouldShow ?? false, step: WalletConnectStep.SuccessConnect});\n        await sleep(1000)\n        setShowConnect({isShow: false, step: WalletConnectStep.SuccessConnect});\n\n    }, [shouldShow, setShowConnect, setShouldShow])\n\n    const handleAccountDisconnect = React.useCallback(async () => {\n        await resetAccount({shouldUpdateProvider: true});\n        setStateAccount(SagaStatus.PENDING)\n    }, [resetAccount]);\n\n    const handleError = React.useCallback(async ({type, errorObj}: { type: keyof typeof ErrorType, errorObj: any }) => {\n        updateSystem({chainId: account._chainId ? account._chainId : 1})\n        resetAccount();\n        statusAccountUnset();\n        myLog('Error')\n    }, [resetAccount, statusAccountUnset, updateSystem, account._chainId]);\n\n    useConnectHook({handleAccountDisconnect, handleError, handleConnect});\n\n}","import { Trans, useTranslation } from 'react-i18next';\nimport { Box, Container, Link, Typography } from '@material-ui/core';\nimport styled from '@emotion/styled';\nimport { ErrorObject } from '@loopring-web/common-resources';\nimport { getContactInfo } from '../../utils/dt_tools';\n\nconst StyleBox = styled(Box)`\n  background-image: url('./static/images/error_bg.png');\n  background-repeat: no-repeat;\n  background-size: contain;\n  background-position: bottom;\n  white-space: pre-wrap;\n  //h2{\n  //  position: relative;\n  //}\n` as typeof Box\n\nexport const ErrorPage = ({messageKey}: ErrorObject) => {\n    // const {messageKey}: { id?:string,messageKey:string } = {messageKey: 'errorMessageTokenMapIsEmpty'};\n    //TODO: checkRouter\n    const {t} = useTranslation('error');\n    const message = `labelConnectUs`;\n    return <>\n        <Container>\n            {/*style={{height: '100%' }}*/}\n            <StyleBox flex={1} display={'flex'} alignItems={'flex-start'} justifyContent={'center'}\n                      flexDirection={'column'} marginTop={4} height={680} maxWidth={1200}>\n                {/*<StyleBox>*/}\n                <Box textAlign={'center'} position={'relative'} left={128} top={-64}>\n                    <Typography component={'h2'} variant={'h3'}>\n                        {t(messageKey)}\n                    </Typography>\n                    <Typography marginY={2} component={'p'} variant={'body1'} color={'textSecondary'}>\n                        <Trans i18nKey={message}>\n                            If you believe this is indeed a bug, please <Link\n                            component={'a'}\n                            onClick={(e) => {\n                                window.location.href = getContactInfo();\n                                e.preventDefault();\n                            }}\n                        >contact us</Link> <br/> We would appreciate your feedback\n\n                        </Trans>\n                        {/*{t(message)}*/}\n                        {/*{t(messageKey)}*/}\n                    </Typography>\n                </Box>\n                {/*</StyleBox>*/}\n            </StyleBox>\n        </Container>\n\n        {/*<Footer></Footer>*/}\n    </>\n}\n","// import { i18nInstance as i18n  } from \"@loopring-web/common-resources\"\nimport i18n from 'i18next';\n\nconst covertLocale = (rawLocale: string = i18n.language) => {\n    return rawLocale.replace('_', '-')\n}\n\nexport function getLocaleDtFromTs(ts: number | string, locale: string = i18n.language) {\n    if (typeof(ts) === 'string') {\n        ts = parseInt(ts)\n    }\n    const dt = new Date(ts).toLocaleString(covertLocale(locale))\n    return dt\n}\n\nexport function getLocaleDt(dt?: Date, locale: string = i18n.language) {\n    if (dt) {\n        return dt.toLocaleString(covertLocale(locale))\n    }\n    return ''\n}\n\nexport function getContactInfo(subject: string = 'report to loopring website', body: string ='Body Content') {\n    const email = process.env.CONTACT_US_EMAIL ?? 'contact@loopring.io'\n    return `mailto:${email}?subject=${subject}&body=${body}`\n}\n","import { useTranslation } from 'react-i18next';\nimport { Box } from '@material-ui/core';\nimport styled from '@emotion/styled';\n// import { ErrorObject } from '@loopring-web/common-resources';\n// import { getContactInfo } from '../../utils/dt_tools';\nimport { boxLiner } from '@loopring-web/component-lib';\n// ${({theme}) => boxLiner({theme})}\nconst StyleBox = styled(Box)`\n  //background: var(--color-mask);\n  ${({theme}) => boxLiner({theme})}\n\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  width: 0;\n  z-index: 500;\n  height: 100%;\n  width: 100%;\n  svg path,\n  svg rect{\n    fill: var(--color-primary)\n  }\n` as typeof Box\n\nexport const LoadingPage = () => {\n    const {t} = useTranslation('layout');\n    return <>\n        {/*<Container>*/}\n            {/*style={{height: '100%' }}*/}\n            <StyleBox flex={1} display={'flex'} alignItems={'center'} justifyContent={'center'}\n                      flexDirection={'column'} height={'100%'}  width={'100%'}>\n                <div className=\"loader loader--style3\" title=\"2\">\n                    <svg version=\"1.1\" id=\"loader-1\" xmlns=\"http://www.w3.org/2000/svg\"\n                         xmlnsXlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n                         width=\"40px\" height=\"40px\" viewBox=\"0 0 50 50\" enableBackground={'new 0 0 50 50'}\n                         xmlSpace=\"preserve\">\n  <path fill=\"#000\"\n        d=\"M43.935,25.145c0-10.318-8.364-18.683-18.683-18.683c-10.318,0-18.683,8.365-18.683,18.683h4.068c0-8.071,6.543-14.615,14.615-14.615c8.072,0,14.615,6.543,14.615,14.615H43.935z\">\n    <animateTransform attributeType=\"xml\"\n                      attributeName=\"transform\"\n                      type=\"rotate\"\n                      from=\"0 25 25\"\n                      to=\"360 25 25\"\n                      dur=\"0.6s\"\n                      repeatCount=\"indefinite\"/>\n    </path>\n  </svg>\n                </div>\n                {/*<StyleBox>*/}\n                {/*<Slide direction=\"up\" in={true} mountOnEnter unmountOnExit>*/}\n                {/*<Box textAlign={'center'} >*/}\n                {/*    <Typography component={'h1'} variant={'h1'} fontWeight={500} fontFamily={'DINCondensed2'} fontSize={96} style={{textTransform: \"uppercase\"}} >*/}\n                {/*        {t('titleLoopring')}*/}\n                {/*    </Typography>*/}\n                {/*    <Typography component={'h2'}   marginTop={3}  fontSize={32} fontFamily={'DINCondensed2'}>*/}\n                {/*        {t('labelLoopringDescribe')}*/}\n                {/*    </Typography>*/}\n                {/*    /!*<Typography marginY={2} component={'p'} variant={'body1'} color={'textSecondary'}>*!/*/}\n                {/*    /!*    <Trans i18nKey={message}>*!/*/}\n                {/*    /!*        If you believe this is indeed a bug, please <Link*!/*/}\n                {/*    /!*        component={'a'}*!/*/}\n                {/*    /!*        onClick={(e) => {*!/*/}\n                {/*    /!*            window.location.href = getContactInfo();*!/*/}\n                {/*    /!*            e.preventDefault();*!/*/}\n                {/*    /!*        }}*!/*/}\n                {/*    /!*    >contact us</Link> <br/> We would appreciate your feedback*!/*/}\n\n                {/*    /!*    </Trans>*!/*/}\n                {/*    /!*    /!*{t(message)}*!/*!/*/}\n                {/*    /!*    /!*{t(messageKey)}*!/*!/*/}\n                {/*    /!*</Typography>*!/*/}\n                {/*</Box>*/}\n                {/*</Slide>*/}\n                {/*</StyleBox>*/}\n            </StyleBox>\n\n        {/*</Container>*/}\n\n        {/*<Footer></Footer>*/}\n    </>\n}\n","import { ModalProvider } from 'styled-react-modal'\nimport RouterView from './routers'\nimport { GlobalStyles } from '@material-ui/core';\nimport { css, Theme, useTheme } from '@emotion/react';\nimport { ErrorMap, globalCss, SagaStatus } from '@loopring-web/common-resources';\n// import { GlobalProvider, Web3ReactManager } from './provider/';\nimport { useInit } from './hook';\n// import loadingSvg from '@loopring-web/common-resources/assets/svg/loading.svg';\nimport { ErrorPage } from './pages/ErrorPage';\nimport { LoadingPage } from './pages/LoadingPage';\nimport { GlobalProvider } from './provider';\n\nconst App = () => {\n  const theme: Theme = useTheme();\n  const { state } = useInit();\n  // const [status, setStatus] = React.useState<keyof typeof SagaStatus>('PENDING');\n  // check all status be\n  //TODO  demo if  tokenMapStatus is unset and tokenMap is empty. show error\n  //TODO tokenMapObj.status is pending, show global loading\n  //console.log(tokenMapObj.tokenMap && Object.keys(tokenMapObj.tokenMap).length>0,tokenMapObj.status, tokenMapObj.errorMessage)\n\n  // useEffect(() => {\n  //     if (state === SagaStatus.PENDING || state === SagaStatus.ERROR) {\n  //         setStatus(state)\n  //     } else {\n  //         setStatus('DONE')\n  //     }\n  // }, [state, setStatus])\n\n  return <><GlobalStyles styles={css` \n      ${globalCss({ theme })};\n      body{\n          ${theme.mode === 'dark' ? `\n            color: ${theme.colorBase.textPrimary};\n          ` : ``}\n      }\n      body:before {\n        ${theme.mode === 'dark' ? `\n            background: var(--color-global-bg);\n       ` : ''}\n      }\n      //#root{\n      //  display: flex;\n      //  flex-direction: column;\n      //}\n}`}></GlobalStyles>\n    <ModalProvider>\n      <GlobalProvider>\n        {/*<Web3ReactManager>*/}\n        {state === 'PENDING' ?\n          <LoadingPage />\n          // <ErrorPage {...ErrorMap.LOADING_WHOLE_SITE}/>\n          // <Avatar src={loadingSvg}/>\n          : state === 'ERROR' ? <ErrorPage {...ErrorMap.NO_NETWORK_ERROR} /> : <>\n            <RouterView />\n\n            {/*    <ErrorPage {...ErrorMap.LOADING_WHOLE_SITE}/>*/}\n          </>}\n      </GlobalProvider>\n\n    </ModalProvider></>\n\n\n}\n\nexport default App;\n\n\n","import React from 'react';\nimport { useCustomDCEffect } from 'hooks/common/useCustomDCEffect';\nimport { useSystem } from './stores/system';\nimport { ChainId, sleep } from 'loopring-sdk';\nimport { useAmmMap } from './stores/Amm/AmmMap';\nimport { SagaStatus } from '@loopring-web/common-resources';\nimport { useTokenMap } from './stores/token';\nimport { useAccount } from './stores/account/hook';\nimport { connectProvides, walletServices } from '@loopring-web/web3-provider';\nimport { useAccountInit } from './hookAccountInit';\nimport { useAmmActivityMap } from './stores/Amm/AmmActivityMap';\nimport { useTicker } from './stores/ticker';\nimport { checkAccount } from './services/account/checkAccount';\n// import { statusUnset as accountStatusUnset } from './stores/account';\n\n/**\n * @description\n * @step1 subscribe Connect hook\n * @step2 check the session storage ? choose the provider : none provider\n * @step3 decide china Id by step2\n * @step4 prepare the static date (tokenMap, ammMap, faitPrice, gasPrice, forex, Activities ...)\n * @step5 launch the page\n * @todo each step has error show the ErrorPage , next version for service maintain page.\n */\n\nexport function useInit() {\n    const [state, setState] = React.useState<keyof typeof SagaStatus>('PENDING')\n    // const {updateWalletLayer1, resetLayer1, status:walletLayer1Status,statusUnset:wallet1statusUnset} = useWalletLayer1()\n    // const {updateWalletLayer2, resetLayer2, status:walletLayer2Status,statusUnset:wallet2statusUnset } = useWalletLayer2();\n    const {account, updateAccount, resetAccount, status:accountStatus,statusUnset:accountStatusUnset} = useAccount();\n    const {status: tokenMapStatus, statusUnset: tokenMapStatusUnset}  = useTokenMap();\n    const {status: ammMapStatus, statusUnset: ammMapStatusUnset}  = useAmmMap();\n    const {updateSystem, status: systemStatus, statusUnset: systemStatusUnset} = useSystem();\n    const {status:ammActivityMapStatus,statusUnset:ammActivityMapStatusUnset}  = useAmmActivityMap()\n    const {status: tickerStatus,statusUnset: tickerStatusUnset} = useTicker();\n\n    useCustomDCEffect(async () => {\n        // TODO getSessionAccount infor\n\n        if (account.accAddress !== '' && account.connectName && account.connectName !== 'unknown') {\n            try {\n                await connectProvides[ account.connectName ](account.accAddress);\n                updateAccount({})\n                if (connectProvides.usedProvide && connectProvides.usedWeb3) {\n\n                    // @ts-ignore\n                    let chainId = Number(connectProvides.usedProvide?.connector?.chainId) ??  Number(await connectProvides.usedWeb3.eth.getChainId())\n                    if( ChainId[chainId] === undefined) {\n                        chainId = account._chainId && account._chainId !=='unknown'? account._chainId  :ChainId.MAINNET\n                    }\n\n                    updateSystem({chainId:chainId as any})\n                    return\n                }\n            } catch (error) {\n                //await resetAccount({shouldUpdateProvider:true});\n                walletServices.sendDisconnect('',`error at init loading  ${error}, disconnect`)\n                const chainId = account._chainId && account._chainId !=='unknown'? account._chainId  :ChainId.MAINNET\n                updateSystem({chainId})\n            }\n        } else  {\n            if(account.accAddress === '' ||  account.connectName === 'unknown' ){\n                resetAccount() \n            }\n            const chainId = account._chainId && account._chainId !=='unknown'? account._chainId  :ChainId.MAINNET\n            updateSystem({chainId})\n        }\n\n    }, [])\n    React.useEffect(() => {\n        switch (systemStatus) {\n            case \"PENDING\":\n                if(state!==SagaStatus.PENDING){\n                    setState(SagaStatus.PENDING)\n                }\n                break\n            case \"ERROR\":\n                systemStatusUnset();\n                setState('ERROR')\n                //TODO show error at button page show error  some retry dispat again\n                break;\n            case \"DONE\":\n                systemStatusUnset();\n                break;\n            default:\n                break;\n        }\n    }, [systemStatus]);\n    React.useEffect(() => {\n        switch (tokenMapStatus) {\n            case \"ERROR\":\n                tokenMapStatusUnset();\n                setState('ERROR')\n                break;\n            case \"DONE\":\n                tokenMapStatusUnset();\n                break;\n            default:\n                break;\n        }\n        switch (ammMapStatus) {\n            case \"ERROR\":\n                ammMapStatusUnset();\n                setState('ERROR')\n                break;\n            case \"DONE\":\n                ammMapStatusUnset();\n                break;\n            default:\n                break;\n        }\n        if(tokenMapStatus === SagaStatus.UNSET && ammMapStatus ===  SagaStatus.UNSET ){\n            setState('DONE')\n        }\n    }, [tokenMapStatus,ammMapStatus])\n\n    React.useEffect(() => {\n        switch (ammActivityMapStatus) {\n            case \"ERROR\":\n                ammActivityMapStatusUnset();\n                // setState('ERROR')\n                //TODO: show error at button page show error  some retry dispath again\n                break;\n            case \"DONE\":\n                ammActivityMapStatusUnset();\n                break;\n            default:\n                break;\n        }\n    }, [ammActivityMapStatus])\n    React.useEffect(() => {\n        switch (tickerStatus) {\n            case \"ERROR\":\n                console.log(\"ERROR\", 'get ticker error,ui');\n                tickerStatusUnset()\n                break;\n            case \"PENDING\":\n                break;\n            case \"DONE\":\n                tickerStatusUnset();\n                break;\n            default:\n                break;\n        }\n    }, [tickerStatus])\n\n    useAccountInit({state})\n    // React.useEffect(() => {\n    //     if (tokenMapStatus === SagaStatus.ERROR|| tokenState.status === \"ERROR\") {\n    //         //TODO: solve errorx\n    //         ammMapState.statusUnset();\n    //\n    //         setState('ERROR');\n    //     } else if(){\n    //         ammMapState.statusUnset();\n    //         tokenState.statusUnset();\n    //     }\n    //     if (ammMapState.status === \"DONE\" && tokenState.status === \"DONE\") {\n    //\n    //         setState('DONE');\n    //     }\n    // }, [ammMapStatus])\n\n\n    return {\n        state,\n    }\n}\n\n\n","import { Provider } from 'react-redux'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\n// import { createWeb3ReactRoot, Web3ReactProvider } from '@web3-react/core'\nimport store, { persistor } from 'stores'\n// import { getLibrary } from 'utils/web3_tools'\n// import { NetworkContextName } from 'loopring-sdk'\nimport { getTheme, i18n, provider, ProviderComposer } from \"@loopring-web/common-resources\"\n\nimport { ThemeProvider as MuThemeProvider } from '@material-ui/core'\nimport LocalizationProvider from '@material-ui/pickers/LocalizationProvider'\n\nimport MomentUtils from '@material-ui/lab/AdapterMoment'\n\nimport { ThemeProvider } from \"@emotion/react\"\n\nimport { I18nextProvider } from \"react-i18next\"\nimport { PersistGate } from 'redux-persist/integration/react'\n\n// const Web3ProviderNetwork = createWeb3ReactRoot(NetworkContextName)\nconst providers = [\n    provider(LocalizationProvider as any, {dateAdapter: MomentUtils}),\n    provider(I18nextProvider as any, {i18n: i18n}),\n    provider(MuThemeProvider as any, {theme: getTheme('dark')}),\n    provider(ThemeProvider as any, {theme: getTheme('dark')}),\n    provider(Provider as any, {store}),\n    provider(PersistGate as any, {persistor, loading: null})\n]\n\nReactDOM.render(\n// @ts-ignore\n    <ProviderComposer providers={providers}>\n        {/*<Web3ReactProvider getLibrary={getLibrary}>*/}\n        {/*    <Web3ProviderNetwork getLibrary={getLibrary}>*/}\n        <App/>\n        {/*</Web3ProviderNetwork>*/}\n        {/*</Web3ReactProvider>*/}\n    </ProviderComposer>,\n    document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\nif (process.env.NODE_ENV !== 'production') {\n    reportWebVitals(console.log)\n}\n"],"sourceRoot":""}