{"version":3,"sources":["stores/global/actions.ts","stores/transactions/reducer.ts","stores/Amm/AmmRecord/reducer.ts","stores/Amm/AmmTrades/reducer.ts","stores/Amm/AmmActivityMap/saga.ts","stores/Amm/AmmMap/saga.ts","stores/Amm/AmmRecord/saga.ts","stores/Amm/AmmTrades/saga.ts","stores/Amm/index.ts","stores/token/saga.ts","stores/ticker/saga.ts","stores/system/saga.ts","stores/walletLayer1/saga.ts","stores/walletLayer2/saga.ts","stores/rootSaga.ts","stores/index.ts","defs/web3_defs.ts","stores/account/hook.ts","state_machine/machine_builder.ts","stores/apis/api.ts","stores/account/reducer.ts","stores/token/hook.ts","stores/trading/hook.ts","stores/Amm/AmmMap/hook.ts","hooks/web3/useWeb3.ts","networks/web3_connectors.ts","stores/walletLayer2/hook.ts","stores/Amm/AmmMap/reducer.ts","index.tsx","stores/trading/reducer.ts","utils/swap_calc_utils.ts","storage/index.ts","stores/ticker/reducer.ts","stores/system/reducer.ts","stores/system/interface.ts","stores/walletLayer1/reducer.ts","stores/walletLayer2/reducer.ts","stores/Amm/AmmActivityMap/reducer.ts","stores/token/reducer.ts","stores/ticker/hook.ts","state_machine/account_machine_spec.ts","utils/web3_tools.ts","provider/global/index.tsx","provider/web3ReactManager/index.tsx","provider/dev-wrapper/index.tsx","stores/Amm/AmmActivityMap/hook.ts","stores/system/hook.ts","stores/constant.ts","pages/ErrorPage/index.tsx","hooks/exchange/useApi.ts","hooks/common/useCustomDCEffect.ts","hook.ts","defs/common_defs.ts","hooks/modal/useModals.ts","utils/hook_tools.ts","hooks/common/useCommon.ts","hooks/exchange/useExchangeAPI.ts","hooks/exchange/useUserAPI.ts","layouts/header/hook.tsx","utils/obj_tools.ts","pages/AccountPage/index.tsx","layouts/header/index.tsx","pages/QuotePage/index.tsx","pages/QuotePage/hook.ts","pages/SwapPage/panel/BasicInfoPanel/hook.tsx","defs/swap_defs.ts","pages/SwapPage/panel/BasicInfoPanel/index.tsx","pages/SwapPage/panel/TradePanel/index.tsx","hooks/help/connetStatusCallback.ts","hooks/help/updateWallet.ts","hooks/help/coinPairInit.ts","hooks/help/pairTitleBlock.ts","hooks/help/makeTickView.ts","pages/SwapPage/hook.ts","pages/SwapPage/index.tsx","hooks/common/useApi2.ts","hooks/common/useWebsocketApi.ts","pages/DebugPage/index.tsx","pages/Layer2Page/TxPanel/index.tsx","pages/Layer2Page/TxPanel/hooks.ts","pages/Layer2Page/AssetPanel/index.tsx","pages/Layer2Page/TradePanel/index.tsx","pages/Layer2Page/TradePanel/hooks.ts","pages/Layer2Page/OrderPanel/index.tsx","pages/SettingPage/SettingPanel.tsx","pages/Layer2Page/index.tsx","pages/LiquidityPage/PoolsPanel/hook.ts","pages/LiquidityPage/PoolsPanel/index.tsx","pages/LiquidityPage/AmmPanel/hooks.ts","pages/LiquidityPage/AmmPanel/index.tsx","pages/LiquidityPage/CoinPairPanel/index.tsx","pages/LiquidityPage/CoinPairPanel/hooks.ts","pages/LiquidityPage/AmmMining/index.tsx","pages/LiquidityPage/AmmMining/hook.ts","pages/LiquidityPage/LiquidityOverview/index.tsx","pages/LiquidityPage/index.tsx","routers/index.tsx"],"names":["updateVersion","createAction","now","Date","getTime","initialState","transactionsSlice","createSlice","name","reducers","reset","state","Object","assign","addTransaction","action","payload","chainId","from","hash","approval","summary","claim","Error","addedTime","clearAllTransactions","checkedTransaction","blockNumber","tx","lastCheckedBlockNumber","Math","max","finalizeTransaction","receipt","confirmedTime","actions","ammRecordSlice","ammRecords","status","errorMessage","getAmmRecord","STATUS","PENDING","getAmmRecordStatus","error","ERROR","DONE","statusUnset","UNSET","ammTradesSlice","ammTrades","getAmmTrades","getAmmTradesStatus","getPostsSaga","ammActivityMapSaga","getAmmActivityMapApi","a","data","totalRewards","myRewards","rewardToken","coinMap","ETH","duration","to","Promise","resolve","call","put","getAmmActivityMapStatus","ammActivityMap","all","takeLatest","getAmmActivityMap","updateRealTimeSaga","ammMapInitSaga","ammMapRealTimeSaga","setAmmState","ammPoolState","forex","store","getState","system","amountDollar","parseFloat","liquidityUSD","amountYuan","totalLPToken","lpLiquidity","totalA","parseInt","liquidity","totalB","rewardValue","rewards","feeA","fees","feeB","tradeFloat","percent","timeUnit","APY","apyBips","apy","getAmmMapApi","ammpools","ammMap","ammpoolAPI","getAmmPoolStats","ammPoolStats","__timer__","amm","clearInterval","setInterval","dispatch","updateRealTimeAmmMap","tokenMap","idIndex","Reflect","ownKeys","forEach","key","item","market","tokens","pooled","dataItem","coinA","coinB","feeDollar","feeYuan","isNew","Number","createdAt","isActivity","address","console","log","getAmmMapStatus","map","getAmmMap","ammMapSaga","fork","ammRecordSaga","getAmmRecordApi","side","amount","sell","belong","tradeValue","buy","time","fee","amountLP","ammTradesSaga","getAmmTradesApi","priceValue","priceToken","posts","ammReducer","combineReducers","ammRecord","reducer","ammMapSlice","ammActivityMapSlice","ammForks","tokenInitSaga","getTokenMapApi","tokensMap","pairs","marketArr","tokenArr","addressIndex","startsWith","icon","getIcon","simpleName","description","company","tokenList","tradePairs","tokenId","marketArray","marketCoins","getTokenMapStatus","getTokenMap","tokenSaga","tickerSaga","tickersSaga","getTickersApi","list","exchangeAPI","getTicker","join","tickers","tickMap","base_token_volume","priceDollar","priceYuan","volume","toBig","toNumber","floatTag","close","open","reward","tickerKey","tickerKeys","length","getTickerStatus","tickerMap","CustomError","ErrorMap","NO_TOKEN_KEY_LIST","getTickers","tickerForks","getUpdateSystem","systemSaga","initConfig","undefined","exchangeApi","ammpoolApi","getTokens","tokenSymbolMap","getAmmPoolConf","getMixMarkets","take","getSystemsApi","env","window","location","hostname","ENV","DEV","ChainId","GORLI","UAT","PROD","MAINNET","NETWORKEXTEND","NONETWORK","getFiatPrice","legal","faitPrices","fiatPrices","getGasPrice","gasPrice","baseURL","updateRealTimeObj","getSystemStatus","updateSystem","systemForks","walletLayer1Saga","getWalletLayer1Balance","account","accAddr","accountId","getTokenBalances","owner","token","tokenBalances","walletLayer1","reduce","prev","count","fromWEI","getWalletLayer1Status","updateWalletLayer1","walletLayer1Fork","walletLayer2Saga","getWalletLayer2Balance","userApi","userAPI","apiKey","getUserBalances","userBalances","walletLayer2","getWalletLayer2Status","updateWalletLayer2","walletLayer2Fork","mySaga","sagaMiddleware","createSagaMiddleware","accountSlice","settings","settingsSlice","systemSlice","trading","tradingSlice","transactions","transactionlice","modals","modalsSlice","tokenMapSlice","walletLayer2Slice","walletLayer1Slice","tickerMapSlice","PERSISTED_KEYS","configureStore","middleware","getDefaultMiddleware","thunk","serializableCheck","save","states","devTools","process","enhancers","reduxBatch","preloadedState","load","setLanguage","language","run","connectorsByName","ConnectorNames","Unknown","Injected","injected","Network","network","WalletConnect","walletconnect","WalletLink","walletlink","Ledger","ledger","Trezor","trezor","Authereum","authereum","useWeb3Account","useActiveWeb3React","connector","library","active","isConnected","voca","isBlank","useAccount","useSelector","isNoAccount","AccountStatus","NOACCOUNT","isActivated","ACTIVATED","eddsaKey","useStateMachine","spec","useDispatch","machine","AccountMachineSpec","currentState","event","stateTransitions","nextState","sendEvent","useCallback","setAccountStatus","useConnect","activate","useState","activatingConnector","setActivatingConnector","connect","item_name","isSwitch","newConnector","setConnectNameTemp","StatusChangeEvent","Reset","Connecting","useDisconnect","deactivate","disconnect","useUnlock","useExchangeAPI","useUserAPI","tradingInfo","useGetTradingInfo","lock","Lock","unlock","exchangeInfo","exchangeAddress","LOCKED","sk","apikey","getProvider","provider","web3","Web3","sign_tools","nonce","connectName","eddsakey","toHex","keyPair","secretKey","getUserApiKey","Unlock","setEddsaKey","setApikey","useCheckAccStatus","web3Account","lv1Acc","prevChainId","usePrevious","prevWeb3Account","useCustomDCEffect","UNCONNNECTED","cleanUp","CONNECTED","DEPOSITING","DEPOSIT_TO_CONFIREM","UNACTIVATED","ARPROVING","APPROV_TO_CONFIRM","resetLayer1","resetLayer2","getAccount","acc","accInfo","setAccountInfo","connectNameTemp","setConnectName","HasPubkey","dumpError400","setAccAddr","response","resultInfo","code","ErrorResponse","FinishDeposit","UserStorage","checkTimeout","handler","isTimeOut","setHandler","getHandler","checkStatus","UserAPI","getChainId","ExchangeAPI","AmmpoolAPI","defaultAccId","REACT_APP_TEST_ACCOUND_ID","getAccountId","defaultApiKey","REACT_APP_TEST_API_KEY","getApikey","defaultOwner","REACT_APP_TEST_OWNER","defaultEddsaKey","REACT_APP_TEST_EDDSA_KEY","getEddsakey","JSON","stringify","publicKey","isContractAddress","initState","setIsContractAddress","useTokenMap","updateTokenMap","useUpdateChainId","useEffect","setChainId","useUpdateExchangeMarkets","api","setMarkets","useUpdateExchangeInfo","getExchangeInfo","setExchangeInfo","useUpdateAmmPoolConf","useAmmpoolAPI","ammPoolConf","setAmmPoolConf","useUpdateAmmPoolStats","setAmmPoolStats","useUpdateAmmActivityRules","getAmmPoolActivityRules","ammActivityRules","setAmmActivityRules","activityRules","useUpdateTokens","setTokens","useAmmMap","updateAmmMap","context","useWeb3React","contextNetwork","NetworkContextName","useEtherscan","etherscanUrl","setEtherscanUrl","useEagerConnect","tried","setTried","isAuthorized","then","catch","useInactiveListener","onReConnectInjected","ethereum","reConnectInjected","on","handleChainChanged","handleAccountsChanged","accounts","removeListener","POLLING_INTERVAL","RPC_URLS","InjectedConnector","supportedChainIds","NetworkConnector","urls","1","5","defaultChainId","WalletConnectConnector","rpc","bridge","qrcode","pollingInterval","WalletLinkConnector","url","appName","LedgerConnector","TrezorConnector","manifestEmail","manifestAppUrl","AuthereumConnector","useWalletLayer2","getWalletLayer2","Web3ProviderNetwork","createWeb3ReactRoot","providers","LocalizationProvider","dateAdapter","MomentUtils","I18nextProvider","i18n","MuThemeProvider","theme","getTheme","ThemeProvider","Provider","ReactDOM","render","getLibrary","App","document","getElementById","defaultSymbol","getBaseQuote","base","quote","symbol","symbol_base","symbol_quote","interval","markets","marketTrades","refreshRate","refreshRateSlow","changeSymbol","changeTradingInterval","setTickerMap","setMarketTrades","SwapStatus","getIconByTokenInfo","addr","utils","getAddress","getToken","valueInWEI","precision","ceil","tokenInfo","precisionToFixed","value","fm","div","decimals","CONSTANTS","rawHandler","sessionStorage","getItem","Handler","err","setItem","removeItem","dateTimeStr","localStorage","ActiveTime","toString","tmpDt","SESSION_TIMEOUT_SECONDS","clear","rawId","AccountId","Account","Apikey","Eddsakey","orderHash","AmmOrder","current","HardwareAddresses","includes","toLowerCase","newValue","type","getTokenPairMap","useTicker","updateTickers","updateTicker","HasNoPubkey","IsSmartWallet","ApproveSubmit","ApproveConfirmed","Web3Provider","getShortAddr","trim","substr","WindowEvent","events","Click","Scroll","forceReset","debounce","GlobalProvider","children","addEventListener","removeEventListener","Fragment","MessageWrapper","Message","colorBase","Web3ReactManager","t","useTranslation","networkActive","networkError","activateNetwork","triedEager","showLoader","setShowLoader","timeout","setTimeout","clearTimeout","DevWrapper","useAmmActivityMap","updateAmmActivityMap","useSystem","StyleBox","styled","Box","ErrorPage","messageKey","flex","display","alignItems","justifyContent","flexDirection","marginTop","height","maxWidth","textAlign","position","left","top","component","variant","marginY","color","useApi","ApiClass","DEFAULT_TIMEOUT","genApi","useMemo","deps","useDeepCompareEffect","useInit","React","setState","systemState","tokenState","ammMapState","detectEthereumProvider","request","method","Theme","LangType","SystemStatus","MODAL_TYPE","useModals","ShowDeposit","isShow","props","title","setShowDeposit","ShowTransfer","setShowTransfer","ShowWithdraw","setShowWithdraw","ShowResetAccount","setShowResetAccount","PromiseJob","fetchPromise","setFunc","field","prefix","mounted","reason","usePromiseJob","dependencies","useGetExchangeInfo","useGetTokens","useGetUserBalances","balances","setBalances","keys","push","raw_data","total","locked","availableInWei","minus","useChargeFeeList","tokenSymbol","requestType","chargeFeeList","setChargeFeeList","getOffchainFeeAmt","index","useModalProps","tokensAll","setCoinMap","useCoinMap","walletMap_Lv1","walletMap","setWalletMap","balance","useLv1WalletMap","walletMap_Lv2","useLv2WalletMap","deposit","amt","depositAddress","sendByMetaMask","gasLimit","contract","response2","withdraw","sellTokenId","getNextStorageId","storageId","request2","exchange","offchainId","maxFee","extraData","minGas","validUntil","VALID_UNTIL","submitOffchainWithdraw","transfer","payeeAddr","walletType","payeeAcc","payeeId","payerAddr","payerId","submitInternalTransfer","depositValue","setDepositValue","depositProps","tradeData","depositBtnStatus","TradeBtnStatus","AVAILABLE","onDepositClick","handlePanelEvent","switchType","res","setTokenSymbol","withdrawValue","setWithdrawValue","withdrawalFeeList","OffchainFeeReqType","OFFCHAIN_WITHDRAWAL","withdrawProps","withdrawBtnStatus","onWithdrawClick","withdrawType","WithdrawType","Fast","withdrawTypes","WithdrawTypes","chargeFeeToken","chargeFeeTokenList","handleOnAddressChange","handleAddressError","_value","message","transferValue","setTransferValue","transferTokenSymbol","setTransferTokenSymbol","transferFeeList","TRANSFER","transferProps","transferBtnStatus","onTransferClick","resetValue","setResetValue","resetProps","resetBtnStatus","onResetClick","price","ammProps","ammDepositData","slippage","ammWithdrawData","ammCalcData","myCoinA","myCoinB","AtoB","coinInfoMap","slippageTolerance","handleDepositEvent","handleWithDrawEvent","onAmmWithdrawClick","onAmmDepositClick","swapProps","tradeCalcData","coinSell","coinBuy","BtoS","StoB","sellCoinInfoMap","buyCoinInfoMap","priceImpact","minimumReceived","onSwapClick","handleSwapPanelEvent","deepClone","result","constructor","hasOwnProperty","ModalAccountInfo","withTranslation","onClose","rest","Modal","aria-labelledby","aria-describedby","style","boxShadow","paddingTop","paddingBottom","minWidth","Header","useLocation","useSettings","setTheme","themeMode","useOpenModals","isShowAccountInfo","isShowConnect","setShowConnect","setShowAccountInfo","forceUpdate","useReducer","bool","gatewayList","DefaultGatewayList","handleSelect","accountInfoProps","setAccountInfoProps","onNotification","onWalletBtnConnect","onThemeBtnClick","dark","light","onLangBtnClick","lang","headerToolBarData","ButtonComponentsMap","handleClick","Language","handleChange","UnlockBtn","onClick","className","startIcon","fontSize","Typography","LockBtn","updateHeaderMenuWhenHasAccountInfo","headerMenuData","HeadMenuTabKey","Layer2","HeaderMenuTabStatus","default","addressShort","level","etherscanLink","mainBtn","connectBy","label","WalletStatus","hidden","noAccount","accountPending","useHeader","onSwitch","openQRCode","setOpenQRCode","copyToastOpen","setCopyToastOpen","closeCopyToast","Snackbar","autoHideDuration","Alert","severity","withDrawProps","selected","pathname","headerRoot","Toolbar","onCopy","text","execCommand","textarea","createElement","body","appendChild","select","removeChild","clipboardData","setData","copyToClipBoard","onViewQRCode","onDisconnect","RowStyled","Grid","unit","TableWrapStyled","background","border","defaultFrame","c_key","d_R","TablePaddingX","pLeft","pRight","QuotePage","tickList","setTickList","big4","setBig4","refresh","getAllTickers","ticks","quote_token_volume","high","low","rowData","change","sort","b","isNaN","slice","useQuote","formattedRawData","o","pair","first","last","lastPrice","isFinite","volumn","buyData","sellData","LRC","FloatTag","increase","container","xs","none","decrease","paddingY","onVisibleRowsChange","rawData","toggleData","ChartType","Trend","Depth","OrderHandling","BasicInfoPanel","coinAInfo","coinBInfo","tgItemJSXs","tlabel","JSX","chartType","setChartType","ChartUnit","D1","chartUnit","originData","setOriginData","_e","tgItemJSXsPriceChart","pre","tGItemData","useBasicInfo","upColor","exclusive","minHeight","maxHeight","width","riseColor","handleMove","size","StylePaper","borderColor","applyProps","id","StyledTabsWrapper","StyledFormControlLabel","FormControlLabel","TradePanel","tradeArray","isAllTrade","setIsAllTrade","setValue","control","Checkbox","checked","checkedIcon","onChange","flag","Tabs","aria-label","Tab","fnType","BIG10","accountStaticCallBack","fn","args","UNKNOWN","DEFAULT","updateWallet","pending","countBig","coinPairInit","coinKey","_tradeCalcData","match","findIndex","ele","pairTitleBlock","ammKey","reject","getAmmPoolSnapshot","poolAddress","ammpoolsbalance","pairTitleDone","stob","pow","_pair","makeTickView","tick","makeMarketArray","currency","baseToken","quoteToken","Side","Sell","TradeTypes","Buy","times","tradeTime","FixedStyle","SwapPage","useRouteMatch","walletLayer2State","setTradeData","setTradeCalcData","setTradeArray","setTradeFloat","setPair","swapBtnI18nKey","setSwapBtnI18nKey","params","resetSwap","btnArray","swapBtnClickArray","swapData","SwapType","SEll_CLICK","BUY_CLICK","SELL_SELECTED","BUY_SELECTED","EXCHANGE_CLICK","calculateTradeData","_tradeData","td","_tradeFloat","_tradeArray","getExistedMarket","apiList","getMarketTrades","_td","TRADE_LITE_SET_PAIR_ERROR","options","useSwapPage","marginRight","alignContent","stateArr","useWebsocket","topics","verify","needApiKey","ws","useRef","wsData","setMessage","readyState","setReadyState","WsAPI","creatWebSocket","getWsKey","wsApiKey","basePath","WebSocket","onopen","op","unsubscribeAll","flat_txt","sendMessage","subTopics","onclose","e","onerror","onmessage","closeWebSocket","msg","send","reconnect","useAmmpoolWs","getTickerArg","getAmmpoolArg","socketData","setSocketData","isLocalPage","setIsLocalPage","visibilityState","parse","useWs","DebugPage","getMarkets","useGetMarkets","gas","setGas","useGetGas","TxPanel","pageSize","setPageSize","offsetHeight","floor","txs","setTxs","getUserTranferList","tmpTx","userTransfers","senderAddress","receiverAddress","feeTokenSymbol","feeAmount","memo","timestamp","txnHash","tradeType","TransactionTradeTypes","allTypes","useGetTxs","txList","ref","pagination","StyledChartWrapper","StyledBtnGroupWrapper","DoughnutData","testTrendData","timeStamp","random","AssetPanel","chartPeriod","setChartPeriod","AssetTitleProps","assetInfo","totalAsset","priceTag","PriceTag","Dollar","onShowDeposit","onShowTransfer","onShowWithdraw","Paper","OrderPanel","StyledPaper","StyledSwitch","Switch","textPrimary","success","backgroundColor","opacity","BtnCurrency","Currency","dollar","_handleChange","target","IconComponent","DropDownIcon","labelId","autoWidth","yen","StyledDivider","Divider","SettingPanel","focus","useTheme","setUpColor","setCurrency","direction","flexWrap","paddingLeft","marginBottom","paddingX","Trans","i18nKey","alignSelf","Button","passDay","changeLanguage","textTransform","UpColor","green","up","down","red","subMenu","subMenuLayer2","BoxStyle","SubMenuList","withRef","BasicSubMenuList","Layer2Page","accStatus","useAmmMapUI","setRawData","page","setPage","ammMapStatus","ammMapStatusUnset","tickerStatus","tickerStatusUnset","updateTickersUI","_page","i","_ammMap","tickerMapKey","NO_TOKEN_MAP","updateRawData","PoolsPanel","handlePageChange","ammPairInit","_ammCalcData","ammType","AmmPanelType","Deposit","AmmPanelView","setAmmCalcData","setAmmDepositData","ammBtnI18nKey","initAmmData","useAmmPanel","tabSelected","USTD","coinPairInfo","activity","myAmm","ammRecordArray","AmmTradeType","add","totalDollar","totalYuan","amountA","amountB","moment","toDate","remove","swap","BoxStyled","CoinPairPanel","_walletLayer2","useCoinPair","tabIndex","setTabIndex","_handlePageChange","Breadcrumbs","Link","href","spacing","wrap","md","paddingRight","getThousandFormattedNumbers","Yuan","Hidden","mdDown","noWrap","textOverflow","format","AmmMiningView","ammActivities","ammActivityStatus","ammActivityStatusUnset","_ammActivityMap","mapArray","useAmmMiningUI","sm","lg","balanceA","balanceB","balanceYuan","balanceDollar","ammDetail","StyleWrapper","LiquidityOverview","totalFeeDollar","totalFeeYuan","totalMiningDollar","totalMiningYuan","padding","margin","handleDeposit","row","handleWithdraw","subMenuLiquidity","LiquidityPage","matchPair","next","RouterView","Container","exact","path"],"mappings":"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","file":"static/js/main~a97bfcba.d40b4607.chunk.js","sourcesContent":["import { createAction } from '@reduxjs/toolkit'\n\n// fired once when the app reloads but before the app renders\n// allows any updates to be applied to store data loaded from localStorage\nexport const updateVersion = createAction<void>('global/updateVersion')\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit'\n\nconst now = () => new Date().getTime()\n\nexport interface SerializableTransactionReceipt {\n  to: string\n  from: string\n  contractAddress: string\n  transactionIndex: number\n  blockHash: string\n  transactionHash: string\n  blockNumber: number\n  status?: number\n}\n\nexport interface TransactionDetails {\n  hash: string\n  approval?: { tokenAddress: string; spender: string }\n  summary?: string\n  claim?: { recipient: string }\n  receipt?: SerializableTransactionReceipt\n  lastCheckedBlockNumber?: number\n  addedTime: number\n  confirmedTime?: number\n  from: string\n}\n\nexport interface TransactionState {\n  [chainId: number]: {\n    [txHash: string]: TransactionDetails\n  }\n}\n\nexport const initialState: TransactionState = {}\n\nconst transactionsSlice = createSlice({\n  name: 'transactions',\n  initialState,\n  reducers: {\n    reset(state) {\n      Object.assign(state, initialState)\n    },\n    addTransaction(state: TransactionState, action: PayloadAction<{\n      chainId: number, from: string,\n      hash: string, approval: any, summary: string, claim: any\n    }>) {\n      const { chainId, from, hash, approval, summary, claim} = action.payload\n      if (state[chainId]?.[hash]) {\n        throw Error('the existing TX can\\'t be added again')\n      }\n\n      const txs = state[chainId] ?? {}\n      txs[hash] = {\n        hash, \n        approval, \n        summary, \n        claim, \n        from,\n        addedTime: now(), \n      }\n      // state[chainId] = txs\n    },\n    clearAllTransactions(state: TransactionState, action: PayloadAction<number>) {\n      const chainId = action.payload\n      if (!state[chainId]) return\n      state[chainId] = {}\n    },\n    checkedTransaction(state: TransactionState, action: PayloadAction<{chainId: number,\n    hash: string, blockNumber: number}>) {\n      const { chainId, hash, blockNumber} = action.payload\n      const tx = state[chainId]?.[hash]\n      if (!tx) {\n        return\n      }\n      if (!tx.lastCheckedBlockNumber) {\n        tx.lastCheckedBlockNumber = blockNumber\n      } else {\n        tx.lastCheckedBlockNumber = Math.max(blockNumber, tx.lastCheckedBlockNumber)\n      }\n      // state[chainId][hash] = tx\n    },\n    finalizeTransaction(state: TransactionState, action: PayloadAction<{\n      hash: string, chainId: number, receipt: any\n    }>) {\n      const { chainId, hash, receipt } = action.payload\n      \n      const tx = state[chainId]?.[hash]\n      if (!tx) {\n        return\n      }\n      tx.receipt = receipt\n      tx.confirmedTime = now()\n    }\n  }\n}\n)\n\nexport const { reset, addTransaction, clearAllTransactions, checkedTransaction, finalizeTransaction, } = transactionsSlice.actions\nexport default transactionsSlice\n","import { createSlice, PayloadAction, Slice } from '@reduxjs/toolkit'\nimport {  AmmRecordStates } from './interface';\nimport { STATUS } from '../../constant';\n\nconst initialState:Required<AmmRecordStates>  = {\n    ammRecords:[],\n    status:'UNSET',\n    errorMessage:null,\n}\nconst ammRecordSlice:Slice = createSlice({\n    name: 'ammRecord',\n    initialState,\n    reducers: {\n        getAmmRecord(state, action:PayloadAction<string | undefined>) {\n            state.status = STATUS.PENDING\n        },\n        getAmmRecordStatus(state, action: PayloadAction<AmmRecordStates>) {\n            // @ts-ignore\n            if (action.error) {\n                state.status =  STATUS.ERROR\n                // @ts-ignore\n                state.errorMessage = action.error\n            }\n            state.ammRecords = {...action.payload.ammRecords};\n            state.status = STATUS.DONE\n        },\n        statusUnset: state => {\n            state.status = STATUS.UNSET\n        }\n    },\n});\nexport { ammRecordSlice };\nexport const { getAmmRecord, getAmmRecordStatus,statusUnset } = ammRecordSlice.actions\n","import { createSlice, PayloadAction, Slice } from '@reduxjs/toolkit'\nimport {  AmmTradesStates } from './interface';\nimport { STATUS } from '../../constant';\n\n\nconst initialState:Required<AmmTradesStates>  = {\n    ammTrades:[],\n    status:'UNSET',\n    errorMessage:null,\n}\nconst ammTradesSlice:Slice = createSlice({\n    name: 'ammTrades',\n    initialState,\n    reducers: {\n        getAmmTrades(state, action:PayloadAction<string | undefined>) {\n            state.status = STATUS.PENDING\n        },\n        getAmmTradesStatus(state, action: PayloadAction<AmmTradesStates>) {\n            // @ts-ignore\n            if (action.error) {\n                state.status =  STATUS.ERROR\n                // @ts-ignore\n                state.errorMessage = action.error\n            }\n            state.ammTrades = {...action.payload.ammTrades};\n            state.status = STATUS.DONE\n        },\n        statusUnset: state => {\n            state.status = STATUS.UNSET\n        }\n    },\n});\nexport { ammTradesSlice };\nexport const { getAmmTrades, getAmmTradesStatus, statusUnset } = ammTradesSlice.actions\n","import { all, takeLatest, call, put } from \"redux-saga/effects\"\nimport { getAmmActivityMap, getAmmActivityMapStatus } from './reducer'\nimport { coinMap, CoinType } from '@loopring-web/component-lib/static'\nimport { AmmActivity, CoinInfo } from '@loopring-web/component-lib/src/static-resource'\nimport { useState } from \"react\"\nimport { useGetTradingInfo } from \"stores/trading/hook\"\n\n/*\nconst useGetAmmActivityMap = ()=>new Promise((resolve)=>{\n    const data:AmmActivity<any> = {\n        // @ts-ignore\n        'AMM-ETH-LRC': {\n            totalRewards: 241232132,\n            myRewards: 1232.123,\n            rewardToken: coinMap.ETH as CoinInfo<CoinType>,\n            duration: {\n                from: new Date('2021-1-1'),\n                to: new Date()\n            },\n        }, 'AMM-USDT-USDC': {\n            totalRewards: 241232132,\n            myRewards: 1232.123,\n            rewardToken: coinMap.ETH as CoinInfo<CoinType>,\n            duration: {\n                from: new Date('2021-1-1'),\n                to: new Date()\n            },\n        }, 'AMM-USDT-LRC': {\n            totalRewards: 241232132,\n            myRewards: 1232.123,\n            rewardToken: coinMap.ETH as CoinInfo<CoinType>,\n            duration: {\n                from: new Date('2021-1-1'),\n                to: new Date()\n            },\n        }, 'AMM-USDT-ETH': {\n            totalRewards: 241232132,\n            myRewards: 1232.123,\n            rewardToken: coinMap.ETH as CoinInfo<CoinType>,\n            duration: {\n                from: new Date('2021-1-1'),\n                to: new Date()\n            },\n        }\n    }\n    resolve({data});\n});\n*/\nconst getAmmActivityMapApi = async () => {\n    const data:AmmActivity<any> = {\n        // @ts-ignore\n        'AMM-LRC-ETH': {\n            totalRewards: 241232132,\n            myRewards: 1232.123,\n            rewardToken: coinMap.ETH as CoinInfo<CoinType>,\n            duration: {\n                from: new Date('2021-1-1'),\n                to: new Date()\n            },\n        }, 'AMM-ETH-USDC': {\n            totalRewards: 241232132,\n            myRewards: 1232.123,\n            rewardToken: coinMap.ETH as CoinInfo<CoinType>,\n            duration: {\n                from: new Date('2021-1-1'),\n                to: new Date()\n            },\n        }, 'AMM-ETH-USDT': {\n            totalRewards: 241232132,\n            myRewards: 1232.123,\n            rewardToken: coinMap.ETH as CoinInfo<CoinType>,\n            duration: {\n                from: new Date('2021-1-1'),\n                to: new Date()\n            },\n        }, 'AMM-LRC-USDT': {\n            totalRewards: 241232132,\n            myRewards: 1232.123,\n            rewardToken: coinMap.ETH as CoinInfo<CoinType>,\n            duration: {\n                from: new Date('2021-1-1'),\n                to: new Date()\n            },\n        }\n    }\n    return  Promise.resolve({data})\n}\n\nexport function* getPostsSaga() {\n    try {\n        //\n        const { data } = yield call(getAmmActivityMapApi);\n        yield put(getAmmActivityMapStatus({ammActivityMap:data}));\n    } catch (err) {\n        yield put(getAmmActivityMapStatus(err));\n    }\n}\n\nexport default function* ammActivityMapSaga() {\n    yield all([takeLatest(getAmmActivityMap, getPostsSaga)]);\n}\n","import { all, call, fork, put, takeLatest } from \"redux-saga/effects\";\nimport { getAmmMap, GetAmmMapParams, getAmmMapStatus, updateRealTimeAmmMap } from './reducer';\nimport { AmmDetail, PairKey } from '@loopring-web/component-lib/src/static-resource';\nimport store from '../../index';\nimport { AmmPoolInfoV3, AmmPoolStat, } from \"loopring-sdk\";\nimport { ammpoolAPI } from \"stores/apis/api\";\nimport { PayloadAction } from '@reduxjs/toolkit';\nimport { AmmDetailStore } from './interface';\n\ntype AmmMap<R extends {[key:string]:any}> ={ [key:string]: AmmDetail<R>} | {}  //key is AMM-XXX-XXX\nexport const setAmmState = ({ammPoolState}: { ammPoolState: AmmPoolStat }) => {\n    const {forex} = store.getState().system;\n    return {\n        amountDollar: parseFloat(ammPoolState.liquidityUSD),\n        amountYuan: parseFloat(ammPoolState.liquidityUSD) / (forex?forex:6.5),\n        totalLPToken: parseFloat(ammPoolState.lpLiquidity),\n        totalA: parseInt(ammPoolState.liquidity[ 0 ]),\n        totalB: parseInt(ammPoolState.liquidity[ 1 ]),\n        rewardValue: ammPoolState.rewards[ 1 ],\n        rewardToken: ammPoolState.rewards[ 0 ],\n        feeA: parseInt(ammPoolState.fees[ 0 ]),\n        feeB: parseInt(ammPoolState.fees[ 1 ]),\n        tradeFloat: {\n            percent: '',\n            timeUnit: '24h',\n            // priceYuan: 100,\n            // priceDollar: 1.23123,\n            // floatTag: FloatTag.increase,\n            // reward: 12312,\n            APY: (parseInt(ammPoolState.apyBips) * 1.0 / 100)\n        },\n        apy: (parseInt(ammPoolState.apyBips) * 1.0 / 100)\n    }\n\n}\nconst getAmmMapApi = async <R extends {[key:string]:any}>({ammpools}:GetAmmMapParams) => {\n\n    let ammMap: AmmMap<R> = {}\n    const {ammPoolStats} = (await ammpoolAPI().getAmmPoolStats());\n\n    let {__timer__} = store.getState().amm.ammMap\n    __timer__ = (() => {\n        if (__timer__ && __timer__ !== -1) {\n            clearInterval(__timer__)\n        }\n        return setInterval(async () => {\n            let ammPoolStats: { [key in keyof R]: AmmPoolStat } = (await ammpoolAPI().getAmmPoolStats()).ammPoolStats as { [key in keyof R]: AmmPoolStat }\n            store.dispatch(updateRealTimeAmmMap({ammPoolStats}))\n        }, 900000)    //15*60*1000 //900000\n    })()\n\n    const {tokenMap: {coinMap, idIndex}} = store.getState();\n\n    // const forex = faitPrices.prices['USDC']\n\n\n    Reflect.ownKeys(ammpools).forEach(async (key) => {\n        const item: AmmPoolInfoV3 = ammpools[ key as string ]\n        if (item.market === key && item.tokens.pooled && idIndex) {\n\n            // const tokenA =  ; //getTokenInfoById(tokens.tokenIdMap, parseInt(item.tokens.pooled[0]))\n            // const tokenB =  ; // getTokenInfoById(tokens.tokenIdMap, parseInt(item.tokens.pooled[1]))\n\n            const dataItem: AmmDetailStore<R> = {\n                coinA: idIndex[ item.tokens.pooled[ 0 ] as any ] ,\n                coinB: idIndex[ item.tokens.pooled[ 1 ] as any ],\n                feeDollar: 100,  //TODO coinA price * feeA + price * feeB\n                feeYuan: 100, //TODO coinA price * feeA + price * feeB  /forex\n                isNew: Date.now() - (Number(item.createdAt)) > 14 * 86400 * 1000 ? false : true,//14*24*60*60*1000,\n                isActivity: item.status === 7 ? true : false,\n                address: item.address,\n                ...setAmmState({ammPoolState: ammPoolStats[ key ]})\n            }\n            // @ts-ignore\n            ammMap[item.market] = dataItem\n\n\n          \n\n        }\n\n\n    })\n    return {ammMap, __timer__}\n}\n\n\nexport function* getPostsSaga({payload}:PayloadAction<GetAmmMapParams>) {\n    try {\n        const {ammpools} =  payload;\n        const {ammMap, __timer__} = yield call(getAmmMapApi,{ammpools});\n        console.log('--- getPostsSaga:', ammMap)\n        yield put(getAmmMapStatus({ammMap, __timer__}));\n    } catch (err) {\n        yield put(getAmmMapStatus(err));\n    }\n}\n\nexport function* updateRealTimeSaga({payload}: any) {\n    try {\n        const {ammPoolStats} = payload;\n        let {ammMap}:{ammMap:AmmMap<object>} = store.getState().amm.ammMap;\n        if (ammPoolStats) {\n            //{ ammPoolStats?: { [ key: string ]: AmmPoolStat } }\n            Reflect.ownKeys(ammPoolStats).map((key) => {\n                // @ts-ignore\n                ammMap[ key ] = {\n                    // @ts-ignore\n                    ...ammMap[ key ],\n                    ...setAmmState({ammPoolState: ammPoolStats[ key as string ]})\n                }\n                return  ammMap\n            })\n        }\n        yield put(getAmmMapStatus({ammMap}));\n    } catch (err) {\n        yield put(getAmmMapStatus(err));\n    }\n}\n\n\nexport function* ammMapInitSaga() {\n    yield all([takeLatest(getAmmMap, getPostsSaga)]);\n}\n\nexport function* ammMapRealTimeSaga() {\n    yield all([takeLatest(updateRealTimeAmmMap, updateRealTimeSaga)]);\n}\n\nexport const ammMapSaga = [\n    fork(ammMapInitSaga),\n    fork(ammMapRealTimeSaga),\n]\n\n","import { all, takeLatest, call, put } from \"redux-saga/effects\";\nimport { getAmmRecord, getAmmRecordStatus } from './reducer';\n\nconst getAmmRecordApi= ()=>new Promise((resolve)=>{ resolve({data:[\n        {side: 'Buy',\n            amount: {\n                sell:{ belong:'ETH', tradeValue: 0.1 },\n                buy:{ belong:'LRC', tradeValue: 123 }\n            },\n            time: Date.now(),\n            fee: 0.02,\n            amountLP:{\n                sell:{ belong:'ETH', tradeValue: 0.1 },\n                buy:{ belong:'LRC', tradeValue: 123 }\n            }\n        },{side: 'Buy',\n            amount: {\n                sell:{ belong:'ETH', tradeValue: 0.1 },\n                buy:{ belong:'LRC', tradeValue: 123 }\n            },\n            time: Date.now(),\n            fee: 0.02,\n            amountLP:{\n                sell:{ belong:'ETH', tradeValue: 0.1 },\n                buy:{ belong:'LRC', tradeValue: 123 }\n            }\n        }\n    ]})});\nexport function* getPostsSaga() {\n    try {\n        //\n        const { data } = yield call(getAmmRecordApi);\n        yield put(getAmmRecordStatus({ammRecords: data}));\n    } catch (err) {\n        yield put(getAmmRecordStatus(err));\n    }\n}\n\nexport default function* ammRecordSaga() {\n    yield all([takeLatest(getAmmRecord, getPostsSaga)]);\n}\n\n\n\n\n","import { all, takeLatest, call, put } from \"redux-saga/effects\";\nimport { getAmmTrades, getAmmTradesStatus } from './reducer';\n\nconst getAmmTradesApi = ()=>new Promise((resolve)=>{\n    //TODO: check is connect and active and assign wallet\n    //TODO: if not reject directory, any error happen will clean the\n    resolve([\n    {side: 'Buy',\n        amount: {\n            sell:{ belong:'ETH', tradeValue: 0.1 },\n            buy:{ belong:'LRC', tradeValue: 123 }\n        },\n        time: Date.now(),\n        fee: 0.02,\n        priceValue: 0.123,\n        priceToken: 'LRC'}\n    ,{side: 'Buy',\n        amount: {\n            sell:{ belong:'ETH', tradeValue: 0.1 },\n            buy:{ belong:'LRC', tradeValue: 123 }\n        },\n        time: Date.now(),\n        fee: 0.02,\n        priceValue: 0.123,\n        priceToken: 'LRC'}\n])});\nexport function* getPostsSaga() {\n    try {\n        //\n        const { data } = yield call(getAmmTradesApi);\n        const posts = data;\n        yield put(getAmmTradesStatus(posts));\n    } catch (err) {\n        yield put(getAmmTradesStatus(err));\n    }\n}\n\nexport default function* ammTradesSaga() {\n    yield all([takeLatest(getAmmTrades, getPostsSaga)]);\n}\n","import { combineReducers } from '@reduxjs/toolkit';\nimport { ammRecordSlice } from './AmmRecord';\nimport { ammTradesSlice, getAmmTrades } from './AmmTrades';\nimport { ammMapSlice } from './AmmMap';\nimport { ammActivityMapSlice } from './AmmActivityMap';\nimport ammActivityMapSaga from './AmmActivityMap/saga';\nimport { ammMapSaga } from './AmmMap/saga';\nimport ammRecordSaga from './AmmRecord/saga';\nimport ammTradesSaga from './AmmTrades/saga';\nimport { all, fork } from 'redux-saga/effects';\n// import tokenSaga from '../token/saga';\n// import walletSaga from '../wallet/saga';\n// export * from './AmmRecord';\n// export * from './AmmTrades';\n// export * from './AmmMap';\n// export * from './AmmActivityMap';\n\nexport const  ammReducer = combineReducers({\n    ammRecord: ammRecordSlice.reducer,\n    ammTrades: ammTradesSlice.reducer,\n    ammMap: ammMapSlice.reducer,\n    ammActivityMap:ammActivityMapSlice.reducer\n})\nexport const ammForks =  [\n    fork(ammActivityMapSaga),\n    ...ammMapSaga,\n    fork(ammRecordSaga),\n    fork(ammTradesSaga)\n]\n\n// export * from './interface'\n","import { all, call, fork, put, takeLatest } from \"redux-saga/effects\";\nimport { getTokenMap, getTokenMapStatus } from './reducer';\nimport { getIcon } from '../../utils/swap_calc_utils';\nimport { CoinInfo, CoinMap } from '@loopring-web/component-lib/static-resource';\nimport { AddressMap, GetTokenMapParams, IdMap } from './interface';\nimport { PayloadAction } from '@reduxjs/toolkit';\n\nconst getTokenMapApi = async <R extends { [ key: string ]: any }>({\n                                                                      tokensMap,\n                                                                      pairs,\n                                                                      marketArr,\n                                                                      tokenArr\n                                                                  }: GetTokenMapParams<R>) => {\n    let coinMap: CoinMap<any, CoinInfo<any>> = {};\n    let tokenMap:any = tokensMap;\n    let addressIndex: AddressMap = {};\n    let idIndex: IdMap = {};\n    Reflect.ownKeys(tokensMap).forEach((key) => {\n        if (!(key as string).startsWith('LP-')) {\n            coinMap[ key as string ] = {\n                icon: getIcon(key as string, tokensMap),\n                name: key as string,\n                simpleName: key,\n                description: '',\n                company: '',\n            }\n        }\n\n        if (pairs[ key as string ] && pairs[ key as string ].tokenList) {\n            // @ts-ignore\n            tokensMap[ key ].tradePairs = pairs[ key as string ].tokenList;\n        }\n        addressIndex = {\n            ...addressIndex,\n            // @ts-ignore\n            [ tokensMap[ key ].address ]: key as string\n        }\n        idIndex = {\n            ...idIndex,\n            // @ts-ignore\n            [ tokensMap[ key ].tokenId ]: key as string\n        }\n    })\n    return {data: {coinMap, addressIndex, idIndex, tokenMap, marketArray: marketArr, marketCoins: tokenArr}}\n};\n\nexport function* getPostsSaga<R extends { [ key: string ]: any }>({payload}: PayloadAction<GetTokenMapParams<R>>) {\n    try {\n        const {tokensMap, pairs, marketArr,tokenArr} = payload\n        // @ts-ignore\n        const {data} = yield call(getTokenMapApi, {tokensMap, pairs, marketArr, tokenArr});\n\n        yield put(getTokenMapStatus(data));\n    } catch (err) {\n        yield put(getTokenMapStatus(err));\n    }\n}\n\n\nexport function* tokenInitSaga() {\n    yield all([takeLatest(getTokenMap, getPostsSaga)]);\n}\n\n\nexport const tokenSaga = [\n    fork(tokenInitSaga),\n    // fork(tokenPairsSaga),\n]\n\n// export function* getPairsSaga({payload}:PayloadAction<{tokenPairs: TokenPairs }>) {\n//     try {\n//         const {tokenPairs} = payload;\n//         const tokenPairsMap =  Reflect.ownKeys(tokenPairs).reduce((prev,key)=>{\n//            // @ts-ignore\n//             return prev[key as string] =  tokenPairs[key as string].tokenList\n//         }, {} )\n//\n//         yield put(getTokenMapStatus({tokenPairsMap}));\n//     } catch (err) {\n//         yield put(getAmmMapStatus(err));\n//     }\n// }\n// export function* tokenPairsSaga() {\n//     yield all([takeLatest(getTokenPairMap, getPairsSaga)]);\n// }\n\n\n","import { all, call, fork, put, takeLatest } from \"redux-saga/effects\"\nimport { getTicker, getTickers, getTickerStatus } from './reducer'\nimport {\n    CoinKey,\n    CustomError,\n    ErrorMap,\n    FloatTag,\n    PairKey,\n    TradeFloat\n} from '@loopring-web/component-lib/src/static-resource'\n\n// import { asyncGetTradingInfo, getTradingInfo } from \"stores/trading/hook\"\nimport { TickerData, getTokenInfoById, toBig } from \"loopring-sdk\"\n\n// import { makeCoinInfo } from 'utils/swap_calc_utils'\nimport { exchangeAPI } from \"stores/apis/api\"\n\ntype TickerMap<R extends {[key:string]:any}> = {\n    [key in CoinKey<R>|PairKey<R>]?:TradeFloat & {\n    reward?:number,rewardToken?:string\n    }\n\n}\n\nconst demoTicker = [\n    ['ETH','2.4','24h','1234','3423525222','up'],\n    ['LRC','2.4','24h','1234','3423525222','up'],\n    ['DPR','2.4','24h','1234','3423525222','up'],\n    ['USDC','2.4','24h','1234','3423525222'],\n    ['USDT','2.4','24h','1234','3423525222','down'],\n    ['AMM-LRC-ETH','2.4','24h','1234','3423525222','up','23','1231','LRC'],\n    ['AMM-USDT-USDC','2.4','24h','1234','3423525222','up','23','1231','USDT'],\n    ['AMM-USDT-LRC','2.4','24h','1234','3423525222','up','23','1231'],\n    ['AMM-USDT-ETH','2.4','24h','1234','3423525222','up','23','1331'],\n    ['AMM-ETH-USDC','2.4','24h','1234','3423525222','up','12','233'],\n    ['AMM-ETH-USDT','2.4','24h','1234','3423525222','up','56','233'],\n\n]\n/*\nconst getTickersApi = async <R extends {[key:string]:any}>(list:Array<keyof R>)=>new Promise((resolve,reject)=>{\n\n    if(list.length>0){\n        const data:TickerMap<R> = {}; //= // {\n        list.map((tokenKey: keyof R) => {\n                const index = demoTicker.findIndex((item) => {\n                  return  item[ 0 ] === tokenKey\n                })\n                if (index > -1) {\n                    const ticker = demoTicker[index]\n                    data[tokenKey] = {\n                        percent: ticker[1],\n                        timeUnit: ticker[2].toString(),\n                        priceDollar: Number(ticker[3]),\n                        priceYuan:  Number(ticker[3]) * 6.3, //TODO get usdt to rmb price\n                        volume: Number(ticker[4]),\n                        floatTag: ticker[5].toString() === 'up'? FloatTag.increase:ticker[5].toString() === 'down'?FloatTag.decrease:FloatTag.none ,\n                        APY: 0,\n                        reward: ticker[7] ?  Number(ticker[7]) :undefined,\n                        rewardToken: ticker[8] ?  Number(ticker[8]) :undefined,\n                    } as TradeFloat\n                } else {\n                    throw new CustomError({...ErrorMap.GET_X_TOKEN_TICKER_ERROR, options: {token: tokenKey}});\n                    //reject(ErrorMap.GET_X_TOKEN_TICKER_ERROR)\n                }\n        })\n        resolve({data});\n    }else{\n       reject(ErrorMap.NO_TOKEN_KEY_LIST)\n    }\n\n});\n*/\nconst getTickersApi = async <R extends {[key:string]:any}>(list:Array<keyof R>)=> {\n\n    const data:TickerMap<R> = {}\n\n    const tickers = await exchangeAPI().getTicker({market: list.join(',')})\n\n    console.log('>>>tickMap:', tickers.tickMap)\n\n    //@ts-ignore\n    tickers.tickMap.forEach((item: TickerData, key: keyof R) => {\n        console.log('>>>base_token_volume:', item.base_token_volume)\n        data[key] = {\n            timeUnit: '24h',\n            priceDollar: 0,\n            priceYuan:  0,\n            volume: toBig(item.base_token_volume).toNumber(),\n            floatTag: item.close > item.open ? 'increase' : 'decrease' ,\n            APY: 0,\n            reward: 0,\n            rewardToken: '',\n        } as TradeFloat\n    })\n\n    return { data }\n}\n\nexport function* getPostsSaga({payload}:any) {\n    try {\n        // @ts-ignore\n        const { tickerKey,tickerKeys } = payload;\n        console.log('getPostsSaga tickerKey',tickerKey, tickerKeys)\n        if(tickerKey || (tickerKeys && tickerKeys.length)) {\n            const {data}  = yield call(getTickersApi,tickerKey?[tickerKey]:tickerKeys);\n            yield put(getTickerStatus({tickerMap:data}));\n\n        }else{\n            throw new CustomError(ErrorMap.NO_TOKEN_KEY_LIST);\n        }\n    } catch (err) {\n        yield put(getTickerStatus(err));\n    }\n}\n\nfunction* tickerSaga() {\n    yield all([takeLatest(getTicker, getPostsSaga)]);\n}\nfunction* tickersSaga() {\n    yield all([takeLatest(getTickers, getPostsSaga)]);\n}\n\nexport const tickerForks = [\n    fork(tickerSaga),\n    fork(tickersSaga),\n]\n ","import { all, call, delay, fork, put, take, takeLatest } from \"redux-saga/effects\"\nimport { updateSystem, getSystemStatus, updateRealTimeObj } from './reducer'\nimport { ENV, NETWORK, NETWORKEXTEND } from \"./interface\"\nimport store from '../index';\nimport { reset } from '../account/reducer';\nimport { ChainId } from 'loopring-sdk';\nimport { ammpoolAPI, exchangeAPI } from '../apis/api';\nimport { getAmmMap, updateRealTimeAmmMap } from '../Amm/AmmMap';\nimport { getTokenMap, statusUnset as tokenStatusUnset } from '../token';\n\n\nconst initConfig  = function* <R extends {[key:string]:any}>() {\n    store.dispatch(reset(undefined));\n    const exchangeApi = exchangeAPI();\n    const ammpoolApi = ammpoolAPI();\n    const {tokenSymbolMap: tokensMap} = yield call(async ()=> await exchangeApi.getTokens())\n    const {ammpools} = yield call(async ()=>await ammpoolApi.getAmmPoolConf());\n    const {pairs,marketArr,tokenArr}  = yield call(async ()=>await exchangeApi.getMixMarkets());\n    store.dispatch(getTokenMap({tokensMap,pairs,marketArr,tokenArr}))\n    yield take('tokenMap/getTokenMapStatus');\n    store.dispatch(getAmmMap({ammpools}))\n    if(store.getState().tokenMap.status === 'ERROR'){\n\n    }\n    // yield take('tokenMap/getTokenMapStatus');\n\n}\n\nconst getSystemsApi = async <R extends {[key:string]:any}>(chainId:any)=> {\n    //TODO get some other reuqired id...... put into system\n    // const { chainId } = system\n    const env =  window.location.hostname === 'localhost'? ENV.DEV :ChainId.GORLI === chainId ?  ENV.UAT : ENV.PROD\n    chainId = ChainId.GORLI === chainId ? ChainId.GORLI: ChainId.MAINNET === chainId ?  ChainId.MAINNET: NETWORKEXTEND.NONETWORK\n    const faitPrices = (await exchangeAPI().getFiatPrice({ legal: 'CNY' })).fiatPrices\n    const gasPrice = (await exchangeAPI().getGasPrice()).gasPrice / 1e+9\n    const baseURL = env === ENV.PROD ? 'https://api3.loopring.io' : 'https://uat2.loopring.io';\n    const forex = faitPrices['USDC']\n    let {__timer__} = store.getState().system;\n    __timer__ = ((__timer__)=>{\n        if(__timer__ && __timer__ !== -1){\n            clearInterval(__timer__)\n\n        }\n        return  setInterval(async()=>{\n            const faitPrices = (await exchangeAPI().getFiatPrice({ legal: 'CNY' })).fiatPrices\n            const gasPrice = (await exchangeAPI().getGasPrice()).gasPrice / 1e+9\n            const forex = faitPrices['USDT']\n            store.dispatch(updateRealTimeAmmMap(undefined))\n            store.dispatch(updateRealTimeObj({faitPrices, gasPrice,forex}))\n        },900000)   //\n\n    })(__timer__);\n\n    return {  chainId, env, baseURL, faitPrices, gasPrice, forex , __timer__ }\n}\n\nexport function* getUpdateSystem({payload}:any) {\n    try {\n        // @ts-ignore\n        const { chainId } = payload;\n        // console.log('getPostsSaga systemKey',systemKey, systemKeys)\n        const {   env, baseURL, faitPrices, gasPrice, forex , __timer__ } = yield call(getSystemsApi, chainId);\n\n        yield put(getSystemStatus({   env, baseURL, faitPrices, gasPrice, forex , __timer__ }));\n        yield call(initConfig)\n        //TODO check wallect store\n    } catch (err) {\n        yield put(getSystemStatus(err));\n    }\n}\n\nfunction* systemSaga() {\n    yield all([takeLatest(updateSystem, getUpdateSystem)]);\n}\nfunction* initConfigSaga(){\n    //yield all([takeLatest(initConfig, getUpdateSystem)]);\n}\n\n\nexport const systemForks = [\n    fork(systemSaga),\n //   fork(initConfig),\n]\n","import { all, call, fork, put, takeLatest } from \"redux-saga/effects\";\nimport {  getWalletLayer1Status, updateWalletLayer1 } from './reducer';\nimport { CoinKey, PairKey, WalletCoin } from '@loopring-web/component-lib/src/static-resource';\nimport { exchangeAPI } from '../apis/api';\nimport store from '../index';\nimport { fromWEI } from '../../utils/swap_calc_utils';\n\ntype WalletLayer1Map<R extends {[key:string]:any}> = {\n    [key in CoinKey<R>|PairKey<R>]?:WalletCoin<R>\n}\n\nconst getWalletLayer1Balance = async <R extends {[key:string]:any}>()=> {\n    //TODO: check is connect and active and assign walletLayer1\n    //TODO: if not reject directory, any error happen will clean the\n    // await sdk\n    const exchangeApi = exchangeAPI();\n    const {accAddr,accountId} = store.getState().account;\n    const {tokenMap,marketCoins} = store.getState().tokenMap;\n    // @ts-ignore\n    const {tokenBalances} =  await exchangeApi.getTokenBalances({owner:accAddr,token: marketCoins.join()},tokenMap)\n    let walletLayer1;\n\n    if(tokenBalances) {\n        walletLayer1 = Reflect.ownKeys(tokenBalances).reduce((prev,item)=>{\n            return   {...prev, [ item ]:{\n                    belong: item,\n                    count: fromWEI(tokenMap, item, tokenBalances[item as string]),\n                }\n            }\n        },{} as WalletLayer1Map<R>)\n    }\n    return {walletLayer1}\n};\n\nexport function* getPostsSaga() {\n    try {\n        //\n        const {walletLayer1} = yield call(getWalletLayer1Balance);\n        yield put(getWalletLayer1Status({walletLayer1}));\n    } catch (err) {\n        yield put(getWalletLayer1Status(err));\n    }\n}\n\nexport function* walletLayer1Saga() {\n    yield all([takeLatest(updateWalletLayer1, getPostsSaga)]);\n}\n\nexport const walletLayer1Fork = [\n    fork(walletLayer1Saga),\n    // fork(tokenPairsSaga),\n]\n\n","import { all, call, fork, put, takeLatest } from \"redux-saga/effects\";\nimport { getWalletLayer2Status, updateWalletLayer2 } from './reducer';\nimport { CoinKey, PairKey, WalletCoin } from '@loopring-web/component-lib/src/static-resource';\nimport {  userAPI } from '../apis/api';\nimport store from '../index';\n\ntype WalletLayer2Map<R extends {[key:string]:any}> = {\n    [key in CoinKey<R>|PairKey<R>]?:WalletCoin<R>\n}\n\nconst getWalletLayer2Balance = async <R extends {[key:string]:any}>()=> {\n    //TODO: check is connect and active and assign walletLayer1\n    //TODO: if not reject directory, any error happen will clean the\n    // await sdk\n    // const exchangeApi = exchangeAPI();\n    const userApi = userAPI();\n    const {accountId,apiKey} = store.getState().account;\n    const {tokenMap,idIndex,marketCoins} = store.getState().tokenMap;\n    let walletLayer2;\n    if(apiKey && accountId){\n        // @ts-ignore\n        const {userBalances} =  await userApi.getUserBalances({accountId:accountId,tokens:marketCoins?.map((key)=>{\n            if(tokenMap){\n                return  tokenMap[key].tokenId\n            } }).join(',')},apiKey)\n        if(userBalances) {\n            // tokenId: number;\n            // total: string;\n            // locked: string;\n            // pending: {\n            //     withdraw: string;\n            //     deposit: string;\n            // };\n            walletLayer2 = Reflect.ownKeys(userBalances).reduce((prev,item)=>{\n                // @ts-ignore\n                return   {...prev, [ idIndex[item] ]:userBalances[Number(item)]}\n            },{} as WalletLayer2Map<R>)\n        }\n    }\n\n    return {walletLayer2}\n};\nexport function* getPostsSaga() {\n    try {\n        //\n        const {walletLayer2} = yield call(getWalletLayer2Balance);\n        yield put(getWalletLayer2Status({walletLayer2}));\n    } catch (err) {\n        yield put(getWalletLayer2Status(err));\n    }\n}\n\nexport function* walletLayer2Saga() {\n    yield all([takeLatest(updateWalletLayer2, getPostsSaga)]);\n}\n\n\nexport const walletLayer2Fork = [\n    fork(walletLayer2Saga),\n    // fork(tokenPairsSaga),\n]\n\n","import { all, put, fork, select, takeEvery } from \"redux-saga/effects\"\n// import machine from \"../state_machine/fsm/machine\"\n// import { TRANSITION } from \"../state_machine/fsm/actionTypes\"\n// import { helloSaga } from \"./sagas\"\nimport { tokenSaga } from './token/saga';\nimport { ammForks } from './Amm';\nimport { tickerForks } from './ticker/saga';\nimport { systemForks } from './system/saga';\nimport { walletLayer1Fork } from './walletLayer1/saga';\nimport { walletLayer2Fork } from './walletLayer2/saga';\n\n\n// https://css-tricks.com/finite-state-machines-with-react/\n// https://musing-rosalind-2ce8e7.netlify.com/?machine=%7B%22initial%22%3A%22initial%22%2C%22states%22%3A%7B%22initial%22%3A%7B%22on%22%3A%7B%22LOGIN%22%3A%22loggedIn%22%2C%22LOGOUT%22%3A%22loggedOut%22%7D%7D%2C%22loggedOut%22%3A%7B%22on%22%3A%7B%22SUBMIT%22%3A%22loading%22%7D%7D%2C%22loading%22%3A%7B%22on%22%3A%7B%22SUCCESS%22%3A%22loggedIn%22%2C%22FAIL%22%3A%22loggedOut%22%7D%7D%2C%22loggedIn%22%3A%7B%22onEntry%22%3A%5B%22SET_TOKEN%22%5D%2C%22onExit%22%3A%5B%22CLEAR_TOKEN%22%5D%2C%22on%22%3A%7B%22LOGOUT%22%3A%22loggedOut%22%7D%7D%7D%7D\n\n// function* machineHandler(event: any, action: any) {\n//\n//   // @ts-ignore\n//   const currentAppState = yield select((state) => { state.account.status })\n//   const nextAppState = machine.transition(currentAppState, event)\n//\n//   yield put({\n//     type: \"APP_STATE/\" + nextAppState.value,\n//     payload: {\n//       value: nextAppState.value\n//     }\n//   });\n//\n//   console.debug(\"-> from \" + currentAppState + \" to \" + nextAppState);\n//\n//   for (let i = 0; i < nextAppState.actions.length; i++) {\n//     yield put({\n//       type: nextAppState.actions[i],\n//       payload: action\n//     });\n//   }\n// }\n\n// function* watchTransition() {\n//   yield takeEvery(TRANSITION, function*(action: any) {\n//     yield machineHandler(action.event, action.payload);\n//   });\n// }\n\nfunction* mySaga() {\n  yield all([\n    // fork(helloSaga),\n    // fork(watchTransition),\n    ...tokenSaga,\n    ...walletLayer1Fork,\n    ...walletLayer2Fork,\n    ...systemForks,\n    ...ammForks,\n    ...tickerForks\n\n  ]);\n}\n\nexport default mySaga;\n","import { configureStore, combineReducers, getDefaultMiddleware } from '@reduxjs/toolkit'\n\nimport { useDispatch } from 'react-redux'\nimport { save, load } from 'redux-localstorage-simple'\n\nimport createSagaMiddleware from 'redux-saga'\n\n// We'll use redux-logger just as an example of adding another middleware\nimport logger from 'redux-logger'\n\n// And use redux-batch as an example of adding enhancers\nimport { reduxBatch } from '@manaflair/redux-batch'\nimport { updateVersion } from './global/actions'\n\nimport accountSlice from './account/reducer'\nimport tradingSlice from './trading/reducer'\nimport transactionlice from './transactions/reducer'\n\n\nimport { modalsSlice, setLanguage, settingsSlice } from '@loopring-web/component-lib';\nimport { ammReducer } from './Amm';\nimport { tokenMapSlice } from './token';\nimport mySaga from './rootSaga';\nimport { tickerMapSlice } from './ticker';\nimport { systemSlice } from './system';\nimport { walletLayer1Slice } from './walletLayer1';\nimport { walletLayer2Slice } from './walletLayer2';\n\nconst sagaMiddleware = createSagaMiddleware()\n\nconst reducer = combineReducers({\n  account: accountSlice.reducer,\n  settings: settingsSlice.reducer,\n  system: systemSlice.reducer,\n  trading: tradingSlice.reducer,\n  transactions: transactionlice.reducer,\n  modals: modalsSlice.reducer,\n  amm:ammReducer,\n  tokenMap: tokenMapSlice.reducer,\n  walletLayer2: walletLayer2Slice.reducer,\n  walletLayer1: walletLayer1Slice.reducer,\n  tickerMap: tickerMapSlice.reducer\n})\n\n//\n\nconst PERSISTED_KEYS: string[] = ['settings']\n\nconst store = configureStore({\n  reducer,\n  // middleware: (getDefaultMiddleware) => getDefaultMiddleware().concat(logger),\n  middleware: [...getDefaultMiddleware({ thunk: false,serializableCheck:false, }), save({ states: PERSISTED_KEYS }), sagaMiddleware, ],\n  // middleware: [...getDefaultMiddleware({ thunk: true }), ],\n  devTools: process.env.NODE_ENV !== 'production',\n  enhancers: [reduxBatch],\n  preloadedState: load({ states: PERSISTED_KEYS })\n})\nstore.dispatch(updateVersion())\nstore.dispatch(setLanguage(store.getState().settings.language))\n// @ts-ignore\nsagaMiddleware.run(mySaga, store.dispatch);\n\n// The store has been created with these options:\n// - The slice reducers were automatically passed to combineReducers()\n// - redux-thunk and redux-logger were added as middleware\n// - The Redux DevTools Extension is disabled for production\n// - The middleware, batch, and devtools enhancers were composed together\n\nexport type AppDispatch = typeof store.dispatch\nexport const useAppDispatch = () => useDispatch<AppDispatch>()\n\nexport type RootState = ReturnType<typeof reducer>\n\nexport default store\n","import { ConnectorNames } from 'loopring-sdk'\n\nimport {\n    injected,\n    network,\n    walletconnect,\n    walletlink,\n    ledger,\n    trezor,\n    authereum,\n} from 'networks/web3_connectors'\n\nexport const connectorsByName: { [connectorName in ConnectorNames]: any } = {\n    [ConnectorNames.Unknown]: undefined,\n    [ConnectorNames.Injected]: injected,\n    [ConnectorNames.Network]: network,\n    [ConnectorNames.WalletConnect]: walletconnect,\n    [ConnectorNames.WalletLink]: walletlink,\n    [ConnectorNames.Ledger]: ledger,\n    [ConnectorNames.Trezor]: trezor,\n    [ConnectorNames.Authereum]: authereum,\n}\n","import { useState, useCallback, useMemo, useRef, useEffect, } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\n\nimport { useCustomDCEffect } from 'hooks/common/useCustomDCEffect'\n\nimport { useGetTradingInfo } from 'stores/trading/hook'\nimport { useActiveWeb3React, } from 'hooks/web3/useWeb3'\n\nimport { Lv2Account, } from 'defs/account_defs'\n\nimport { AccountStatus, StatusChangeEvent } from 'state_machine/account_machine_spec'\n\nimport * as sign_tools from 'loopring-sdk'\n\nimport { connectorsByName } from 'defs/web3_defs'\n\nimport { ChainId, ConnectorNames, dumpError400, ExchangeAPI, UserAPI, } from 'loopring-sdk'\n\nimport { toHex, toBig, } from 'loopring-sdk'\n\nimport { RootState } from 'stores'\n\nimport {\n    reset, setAccountStatus, setConnectName,\n    setConnectNameTemp, setAccountInfo, setEddsaKey, setApikey, setAccAddr,\n} from 'stores/account/reducer'\n\nimport { AccountMachineSpec, } from 'state_machine/account_machine_spec'\n\nimport { buildMachine } from 'state_machine/machine_builder'\n\nimport voca from 'voca'\nimport { usePrevious } from 'react-use'\n\nimport Web3 from 'web3'\n\nimport { useExchangeAPI, useUserAPI } from 'hooks/exchange/useApi'\n\nimport { UserStorage } from 'storage'\n\nimport store from 'stores'\nimport { updateWalletLayer1, reset as resetLayer1 } from '../walletLayer1';\nimport { updateWalletLayer2,reset as resetLayer2 } from '../walletLayer2';\n\n\nexport function useWeb3Account() {\n\n    const {\n        connector,\n        library,\n        account,\n        chainId,\n        active,\n        error,\n    } = useActiveWeb3React()\n\n    const isConnected: boolean = active && !voca.isBlank(account as string)\n\n    return {\n        account,\n        connector,\n        library,\n        chainId,\n        active,\n        isConnected,\n        error,\n    }\n\n}\n\nexport function useAccount() {\n\n    const account: Lv2Account = useSelector((state: RootState) => state.account)\n\n    const isNoAccount = () => {\n        return account.status === AccountStatus.NOACCOUNT\n    }\n\n    const isActivated = () => {\n        return account.status === AccountStatus.ACTIVATED\n    }\n\n    return {\n        account,\n        isNoAccount,\n        isActivated,\n        apiKey: account.apiKey,\n        eddsaKey: account.eddsaKey,\n        accountId: account.accountId,\n    }\n}\n\nexport function useStateMachine() {\n    const dispatch = useDispatch()\n\n    const machine = buildMachine(AccountMachineSpec())\n\n    const sendEvent = useCallback((account: Lv2Account, event: StatusChangeEvent) => {\n        const nextState = machine(account.status, event)\n        if (nextState) {\n            dispatch(setAccountStatus(nextState))\n        }\n    }, [machine, dispatch])\n\n    return {\n        sendEvent,\n    }\n}\n\nexport function useConnect() {\n\n    const {\n        activate,\n    } = useActiveWeb3React()\n\n    const { sendEvent } = useStateMachine()\n\n    const dispatch = useDispatch()\n\n    const [activatingConnector, setActivatingConnector] = useState<any>()\n\n    const connect = useCallback((item_name: ConnectorNames, isSwitch: boolean = false) => {\n        const newConnector: any = connectorsByName[item_name]\n        setActivatingConnector(newConnector)\n        activate(newConnector)\n        dispatch(setConnectNameTemp(item_name))\n\n        if (isSwitch) {\n          //  console.log('try Connecting... isSwitch Reset')\n            sendEvent(store.getState().account, StatusChangeEvent.Reset)\n        }\n\n        sendEvent(store.getState().account, StatusChangeEvent.Connecting)\n\n        console.log('try Connecting...')\n    }, [activate, dispatch, sendEvent])\n\n    return {\n        connect,\n        activatingConnector,\n    }\n\n}\n\nexport function useDisconnect() {\n\n    const {\n        deactivate,\n    } = useActiveWeb3React()\n\n    const dispatch = useDispatch()\n\n    const disconnect = useCallback(() => {\n        deactivate()\n        dispatch(reset(undefined))\n        //TODO dispatch wallet info \n    }, [deactivate, dispatch])\n\n    return {\n        disconnect,\n    }\n\n}\n\nexport function useUnlock() {\n\n    const dispatch = useDispatch()\n\n    const exchangeApi: any = useExchangeAPI()\n\n    const userApi: any = useUserAPI()\n\n    const { tradingInfo } = useGetTradingInfo()\n\n    const { connector, } = useWeb3Account()\n\n    const { sendEvent } = useStateMachine()\n\n    const lock = useCallback(async (account: Lv2Account) => {\n        console.log('useCallback lock:', account.status)\n        sendEvent(account, StatusChangeEvent.Lock)\n    }, [sendEvent])\n\n    const unlock = useCallback(async (account: Lv2Account) => {\n\n        if (!userApi || !exchangeApi || !connector || !account.accountId || !tradingInfo.exchangeInfo?.exchangeAddress\n            || account.status !== AccountStatus.LOCKED) {\n            console.log('accountId:', account.accountId)\n            console.log('exchangeAddress:', tradingInfo.exchangeInfo)\n            console.log('enter !! account.status:', account.status)\n            return\n        }\n\n        console.log('useUnlock useCallback:', account.status)\n\n        if (account.status !== AccountStatus.LOCKED) {\n            throw Error('unexpected status:' + account.status)\n        }\n\n        let event = undefined\n        let sk = undefined\n        let apikey: any = undefined\n\n        try {\n            const provider = await connector.getProvider()\n            const web3 = new Web3(provider as any)\n            console.log('useUnlock eddsaKey:', account.eddsaKey)\n\n            if (!account.eddsaKey) {\n                const eddsakey = await sign_tools\n                    .generateKeyPair(\n                        web3,\n                        account.accAddr,\n                        tradingInfo.exchangeInfo?.exchangeAddress as string,\n                        account.nonce - 1,\n                        account.connectName,\n                    )\n                sk = toHex(toBig(eddsakey.keyPair.secretKey))\n\n            } else {\n                sk = account.eddsaKey\n            }\n\n            apikey = await userApi.getUserApiKey({\n                accountId: account.accountId\n            }, sk)\n\n            console.log('useUnlock apikey:', apikey)\n\n            event = StatusChangeEvent.Unlock\n\n        } catch (reason) {\n            event = StatusChangeEvent.Reset\n        }\n\n        if (sk) {\n            dispatch(setEddsaKey(sk))\n        }\n\n        if (apikey?.apiKey) {\n            dispatch(setApikey(apikey.apiKey))\n        }\n\n        console.log('next event:', event)\n        if (event) {\n            sendEvent(account, event)\n        }\n\n    }\n        , [dispatch, sendEvent, exchangeApi, userApi, connector, tradingInfo.exchangeInfo])\n\n    return {\n        lock,\n        unlock,\n    }\n}\n\nasync function checkAccountAvailableAsync(exchangeApi: ExchangeAPI, userApi: UserAPI, account: Lv2Account, dispatch: any, sendEvent: any, connector: any, exchangeAddress: string) {\n\n    let accInfo = undefined\n    let event = undefined\n    let sk = undefined\n    let code = undefined\n    let apikey: any = undefined\n\n    try {\n        accInfo = (await exchangeApi.getAccount({\n            owner: account.accAddr\n        })).accInfo\n        if (accInfo.publicKey && accInfo.publicKey.x && accInfo.publicKey.y) {\n            if (account.accountId !== accInfo.accountId) {\n                const provider = await connector.getProvider()\n                const web3 = new Web3(provider as any)\n                try {\n                    code = await web3.eth.getCode(account.accAddr)\n                    // console.log('!!!!!! about to generateKeyPair!!!!!!!!!!!')\n                    try {\n                        const eddsakey = await sign_tools\n                            .generateKeyPair(\n                                web3,\n                                account.accAddr,\n                                exchangeAddress,\n                                accInfo.nonce - 1,\n                                account.connectName,\n                            )\n                        sk = toHex(toBig(eddsakey.keyPair.secretKey))\n                        const px = toHex(toBig(eddsakey.keyPair.publicKeyX))\n                        const py = toHex(toBig(eddsakey.keyPair.publicKeyY))\n\n                        try {\n                            apikey = await userApi.getUserApiKey({\n                                accountId: accInfo.accountId\n                            }, sk)\n                            event = (StatusChangeEvent.HasPubkey)\n                        } catch (reason) {\n                            dumpError400(reason)\n                            event = (StatusChangeEvent.ErrorResponse)\n                        }\n                    } catch (reason) {\n                        dumpError400(reason)\n                        event = (StatusChangeEvent.ErrorResponse)\n                    }\n\n                } catch (reason) {\n                    dumpError400(reason)\n                    event = (StatusChangeEvent.ErrorResponse)\n                }\n\n            } else {\n                console.log('already has accountId!')\n            }\n        } else {\n            console.log('2 has id but no pubkey currStatus:', account.status)\n            event = (StatusChangeEvent.HasNoPubkey)\n        }\n    } catch (reason) {\n        // 3 has none of above\n        console.log('2 has id but no pubkey currStatus:', account.status)\n        dumpError400(reason)\n        // check deposit tx (local and ethereum)\n        event = (StatusChangeEvent.ErrorResponse)\n    }\n\n    if (accInfo && accInfo.owner !== account.accAddr) {\n        dispatch(setAccountInfo(accInfo))\n    }\n\n    if (sk) {\n        dispatch(setEddsaKey(sk))\n    }\n\n    if (apikey) {\n        console.log('---------> apikey:', apikey)\n        dispatch(setApikey(apikey.apiKey))\n    }\n\n    if (event) {\n        sendEvent(event)\n    }\n\n}\n\nexport function useCheckAccStatus() {\n\n    const dispatch = useDispatch()\n\n    const { account } = useAccount()\n\n    const { sendEvent } = useStateMachine()\n\n    const exchangeApi: ExchangeAPI = useExchangeAPI()\n\n    const userApi: UserAPI = useUserAPI()\n\n    const { account: web3Account, active, isConnected, chainId, connector, } = useWeb3Account()\n\n    const lv1Acc = web3Account as string\n\n    const prevChainId = usePrevious(chainId)\n    const prevWeb3Account = usePrevious(web3Account)\n\n    // const { updateWalletLayer1,resetLayer1} = useWalletLayer1();\n    // const { updateWalletLayer2, resetLayer2} = useWalletLayer2()\n\n\n    // console.log('prevChainId:', prevChainId, ' chainId:', chainId)\n    // console.log('prevWeb3Account:', prevWeb3Account, ' web3Account:', web3Account)\n\n    // console.log(exchangeApi, userApi, account, 'prevChainId:', prevChainId, 'chainId:', chainId, 'web3Account:', web3Account)\n\n    const { tradingInfo } = useGetTradingInfo()\n\n    useCustomDCEffect(async () => {\n\n        const cleanUp = () => {\n            let handler = UserStorage.getHandler()\n            if (account.status !== AccountStatus.ACTIVATED && handler) {\n                clearInterval(handler)\n            }\n        }\n\n        async function checkStatus() {\n\n            if (!account || !lv1Acc || !exchangeApi || !userApi || !connector || !tradingInfo.exchangeInfo?.exchangeAddress) {\n                console.log('checkStatus return!!!!!!')\n                return\n            }\n\n            if (((prevChainId && chainId && prevChainId !== chainId)\n                || (prevWeb3Account && web3Account && prevWeb3Account !== web3Account))\n                && account.status !== AccountStatus.UNCONNNECTED) {\n\n                console.log('checkStatus try to resetFunc')\n                dispatch(reset(undefined))\n                sendEvent(account, StatusChangeEvent.Reset)\n                return\n            }\n\n            cleanUp()\n\n            switch (account.status) {\n                case AccountStatus.UNCONNNECTED:\n                    console.log('---> render UNCONNNECTED active:', active, ' isConnected:', isConnected)\n\n                    if (isConnected) {\n                        dispatch(setConnectNameTemp(ConnectorNames.Injected))\n                        sendEvent(account, StatusChangeEvent.Connecting)\n                    }\n\n                    //HIGH:\n                    dispatch(resetLayer1(undefined));\n                    dispatch(resetLayer2(undefined));\n                    break\n\n                case AccountStatus.CONNECTED:\n                    //check session or local storage\n\n                    console.log('---> render CONNECTED account:', account)\n\n                    try {\n\n                        const acc = (await exchangeApi.getAccount({ owner: lv1Acc })).accInfo\n\n                        // current acc is local acc info\n                        if (account.accAddr && account.eddsaKey && acc.owner === account.accAddr) {\n                            console.log('cur Eddsakey:', account.eddsaKey)\n                        } else {\n                            console.log('got a new address:', acc)\n                            // got a new address\n                            dispatch(setAccountInfo(acc))\n                            // dispatch(setEddsaKey(''))\n                            //HIGH:\n                            dispatch(updateWalletLayer1(undefined))\n                            //updateWalletLayer1();\n                           // dispatch(updateWalletLayer1(undefined));\n                        }\n\n                        if (account?.connectName !== account?.connectNameTemp) {\n                            dispatch(setConnectName(account.connectNameTemp))\n                        }\n\n                        sendEvent(account, StatusChangeEvent.HasPubkey)\n\n                    } catch (reason) {\n                        dumpError400(reason)\n\n                        if (lv1Acc) {\n                            dispatch(setAccAddr(lv1Acc))\n                        }\n\n                        if (reason.response && reason.response.data && reason.response.data.resultInfo\n                             && reason.response.data.resultInfo.code === 101002) {\n                            sendEvent(account, StatusChangeEvent.ErrorResponse)\n                        }\n                    }\n\n                    break\n\n                case AccountStatus.NOACCOUNT:\n                    break\n\n                case AccountStatus.DEPOSITING:\n                    // TODO sub contract event, check deposit.\n                    const depositFinished = true // TODO\n                    if (depositFinished) {\n                        console.log('depositFinished currStatus:', account.status)\n                        sendEvent(account, StatusChangeEvent.FinishDeposit)\n                    }\n                    break\n\n                case AccountStatus.DEPOSIT_TO_CONFIREM:\n                    // getAccount every 10s to check\n                    break\n\n                case AccountStatus.UNACTIVATED:\n                    const isSmartWallet = false // TODO\n                    if (isSmartWallet) {\n                        // TODO approve hash,\n                        console.log('approve hash, currStatus:', account.status)\n                        sendEvent(account, StatusChangeEvent.IsSmartWallet)\n                    } else {\n                        console.log('approve hash no smartwallet, account.status:', account.status)\n                    }\n                    break\n\n                case AccountStatus.ARPROVING:\n                    // TODO sub contract event, check approving.\n                    const approved = false // TODO\n                    if (approved) {\n                        console.log('sub contract event, check approving. approved! status:', account.status)\n                        sendEvent(account, StatusChangeEvent.ApproveSubmit)\n                    }\n                    break\n\n                case AccountStatus.APPROV_TO_CONFIRM:\n                    const approveConfirmed = false // TODO\n                    if (approveConfirmed) {\n                        console.log('approveConfirmed status:', account.status)\n                        sendEvent(account, StatusChangeEvent.ApproveConfirmed)\n                    }\n                    break\n\n                case AccountStatus.LOCKED:\n                    //HIGH:\n                    dispatch(resetLayer1(undefined))\n                    break\n\n                case AccountStatus.ACTIVATED:\n                    UserStorage.checkTimeout(true)\n                    const handler = setInterval(() => {\n                        const isTimeOut = UserStorage.checkTimeout()\n                        if (account.status === AccountStatus.ACTIVATED && isTimeOut) {\n                            clearInterval(handler)\n                            sendEvent(account, StatusChangeEvent.Lock)\n                        }\n                    }, 1000)\n                    UserStorage.setHandler(handler);\n                    //HIGH:\n                    dispatch(updateWalletLayer2(undefined))\n                        //useWalletLayer2().updateWalletLayer2();\n                    //dispatch((undefined));\n                    break\n\n                default:\n                    break\n            }\n\n\n\n        }\n\n        checkStatus()\n\n        return () => {\n            cleanUp()\n        }\n\n    }, [    updateWalletLayer1, updateWalletLayer2, resetLayer1,resetLayer2,\n        //updateWalletLayer2, updateWalletLayer1,resetLayer1,resetLayer2,\n\n        exchangeApi, userApi, account, prevChainId, chainId, lv1Acc, dispatch, connector, tradingInfo.exchangeInfo?.exchangeAddress,])\n\n}\n\n","export const buildMachine = <S, E>(spec: any) => (currentState: S, event: E) => {\n    // We get all possible transitions for the current State\n    const stateTransitions = spec.states[currentState]\n\n    // No transitions? Error!\n    if (stateTransitions === undefined) {\n        throw new Error(`No transitions defined for ${currentState}`)\n    }\n\n    // We try to transition to the next state\n    const nextState = stateTransitions[event]\n\n    // No next state? Error!\n    if (nextState === undefined) {\n        throw new Error(\n            `Unknown transition for event ${event} in state ${currentState}`\n        )\n    }\n\n   // console.log('got nextState:', nextState)\n\n    // We return the new state\n    return nextState\n}\n","import { AmmpoolAPI, ChainId, ExchangeAPI, UserAPI, WsAPI } from \"loopring-sdk\"\nimport { getChainId } from 'stores/trading/hook'\n\nexport const userAPI = () => {\n\n    return new UserAPI(getChainId() as ChainId)\n}\n\nexport const exchangeAPI = () => {\n    return new ExchangeAPI(getChainId() as ChainId)\n}\n\nexport const ammpoolAPI = () => {\n    return new AmmpoolAPI(getChainId() as ChainId)\n}\n\nexport const wsAPI = () => {\n    return new WsAPI(getChainId() as ChainId)\n}\n","import { createSlice, PayloadAction, Slice } from '@reduxjs/toolkit'\n\nimport { AccountInfo, ConnectorNames, } from 'loopring-sdk'\n\nimport { Lv2Account, } from 'defs/account_defs'\nimport { AccountStatus } from 'state_machine/account_machine_spec'\nimport { UserStorage } from 'storage'\n\n\nconst initialState = () => {\n  const defaultAccId = process.env.REACT_APP_TEST_ACCOUND_ID ? process.env.REACT_APP_TEST_ACCOUND_ID : UserStorage.getAccountId()\n  const defaultApiKey = process.env.REACT_APP_TEST_API_KEY ? process.env.REACT_APP_TEST_API_KEY : UserStorage.getApikey()\n  const defaultOwner = process.env.REACT_APP_TEST_OWNER ? process.env.REACT_APP_TEST_OWNER : UserStorage.getAccount()\n  const defaultEddsaKey = process.env.REACT_APP_TEST_EDDSA_KEY ? process.env.REACT_APP_TEST_EDDSA_KEY : UserStorage.getEddsakey()\n\n  console.log('defaultApiKey:', JSON.stringify(defaultApiKey))\n  const defaultStatus = AccountStatus.UNCONNNECTED\n  return {\n    accAddr: defaultOwner,\n    status: defaultStatus,\n    accountId: defaultAccId,\n    publicKey: {},\n    nonce: 0,\n    isContractAddress: false,\n    apiKey: defaultApiKey,\n    eddsaKey: defaultEddsaKey,\n    connectName: ConnectorNames.Unknown,\n    connectNameTemp: ConnectorNames.Unknown,\n  } as Lv2Account\n}\n\nconst accountSlice:Slice = createSlice({\n  name: 'account',\n  initialState: initialState(),\n  reducers: {\n    reset(state) {\n      const initState = initialState()\n      console.log('!!! reset account!', initState)\n      Object.assign(state, initState)\n    },\n    setAccAddr(state, action: PayloadAction<string>) {\n      state.accAddr = action.payload\n      // UserStorage.setAccount(action.payload)\n    },\n    setAccountInfo(state, action: PayloadAction<AccountInfo>) {\n      state.accAddr = action.payload.owner\n      state.accountId = action.payload.accountId\n      state.nonce = action.payload.nonce\n      state.publicKey = action.payload.publicKey\n\n      // UserStorage.setAccount(state.accAddr)\n      // UserStorage.setAccountId(state.accountId)\n      \n    },\n    setApikey(state, action: PayloadAction<string>) {\n      state.apiKey = action.payload\n      // UserStorage.setApikey(action.payload)\n    },\n    setAccountStatus(state, action: PayloadAction<AccountStatus>) {\n      state.status = action.payload\n    },\n    setEddsaKey(state, action: PayloadAction<any>) {\n      state.eddsaKey = action.payload\n      // UserStorage.setEddsakey(action.payload)\n    },\n    setConnectName(state, action: PayloadAction<ConnectorNames>) {\n      state.connectName = action.payload\n    },\n    setConnectNameTemp(state, action: PayloadAction<ConnectorNames>) {\n      state.connectNameTemp = action.payload\n    },\n    setIsContractAddress(state, action: PayloadAction<boolean>) {\n      state.isContractAddress = action.payload\n    },\n  },\n})\n\nexport const { reset, setAccAddr, setApikey, setConnectName, setConnectNameTemp, setAccountInfo, setAccountStatus, setEddsaKey, setIsContractAddress, } = accountSlice.actions\nexport default accountSlice\n","import { useDispatch, useSelector } from 'react-redux'\nimport { tokenMapSlice } from './reducer';\nimport { TokenMapStates } from './interface';\n\nexport function useTokenMap<R extends {[key:string]:any}>(): TokenMapStates<R> & {\n    updateTokenMap:()=>void,\n    statusUnset:()=>void,\n} {\n    const tokenMap:TokenMapStates<R> = useSelector((state: any) => state.tokenMap)\n    const dispatch = useDispatch();\n    const updateTokenMap = () => {\n        dispatch(tokenMapSlice.actions.getTokenMap(undefined))\n    }\n    const statusUnset = ()=>{\n        dispatch(tokenMapSlice.actions.statusUnset(undefined))\n    }\n    return {\n        ...tokenMap,\n        statusUnset,\n        updateTokenMap,\n    }\n\n}\n","import { useAmmpoolAPI, useExchangeAPI } from 'hooks/exchange/useApi'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { useCustomDCEffect } from 'hooks/common/useCustomDCEffect'\n\nimport store, { RootState } from 'stores'\n\nimport { \n    setMarkets, \n    setExchangeInfo, \n    setTokens, \n    setTickerMap, \n    setAmmPoolStats,\n    setAmmPoolConf, \n    setMarketTrades,\n    setAmmActivityRules,\n    setChainId, \n} from 'stores/trading/reducer'\n\nimport { dumpError400, ChainId, AmmPoolStat, FiatType, } from 'loopring-sdk'\nimport { useActiveWeb3React } from 'hooks/web3/useWeb3'\nimport { useEffect } from 'react'\n\nimport { ammpoolAPI, exchangeAPI } from \"stores/apis/api\"\n\nexport function getTradingInfo() {\n    const tradingInfo = store.getState().trading\n    return {\n        tradingInfo,\n        chainId: tradingInfo.chainId,\n    }\n}\nexport function getChainId(){\n    const chainId = store.getState().system.chainId;\n    return  store.getState().system.chainId\n\n}\n\nexport function useGetTradingInfo() {\n    const tradingInfo = useSelector((state: RootState) => state.trading)\n    return {\n        tradingInfo,\n        chainId: tradingInfo.chainId,\n    }\n}\n\nexport function useUpdateChainId() {\n    const { chainId } = useActiveWeb3React()\n    const dispatch = useDispatch()\n    useEffect(() => {\n        dispatch(setChainId(chainId ?? ChainId.GORLI))\n    }, [chainId, dispatch])\n}\n\nexport function useUpdateExchangeMarkets() {\n    const dispatch = useDispatch()\n    const api = useExchangeAPI()\n\n    useCustomDCEffect(async() => {\n\n        if (!api) {\n            return\n        }\n\n        try {\n            const response = await api.getMixMarkets()\n            dispatch(setMarkets(response))\n        } catch (reason) {\n            dumpError400(reason)\n        }\n\n    }, [api])\n\n}\n\nexport function useUpdateExchangeInfo() {\n\n    const dispatch = useDispatch()\n    const api = useExchangeAPI()\n\n    useCustomDCEffect(async() => {\n\n        if (!api) {\n            return\n        }\n\n        try {\n            const response = await api.getExchangeInfo()\n            dispatch(setExchangeInfo(response.exchangeInfo))\n        } catch (reason) {\n            dumpError400(reason)\n        }\n\n    }, [api])\n\n}\n\nexport function useUpdateAmmPoolConf() {\n\n    const dispatch = useDispatch()\n    const api = useAmmpoolAPI()\n\n    useCustomDCEffect(async() => {\n\n        if (!api) {\n            return\n        }\n\n        try {\n            const ammPoolConf = await api.getAmmPoolConf()\n            dispatch(setAmmPoolConf(ammPoolConf))\n        } catch (reason) {\n            dumpError400(reason)\n        }\n\n    }, [api])\n\n}\n\nexport function useUpdateAmmPoolStats() {\n\n    const dispatch = useDispatch()\n    const api = useAmmpoolAPI()\n\n    useCustomDCEffect(async() => {\n\n        if (!api) {\n            return\n        }\n\n        try {\n            const ammPoolStats = await api.getAmmPoolStats()\n            dispatch(setAmmPoolStats(ammPoolStats))\n        } catch (reason) {\n            dumpError400(reason)\n        }\n\n    }, [api])\n\n}\n\nexport function useUpdateAmmActivityRules() {\n\n    const dispatch = useDispatch()\n    const api = useAmmpoolAPI()\n\n    useCustomDCEffect(async() => {\n\n        if (!api) {\n            return\n        }\n\n        try {\n            const ammActivityRules = await api.getAmmPoolActivityRules()\n            dispatch(setAmmActivityRules(ammActivityRules.activityRules))\n        } catch (reason) {\n            dumpError400(reason)\n        }\n\n    }, [api])\n\n}\n\nexport function useUpdateTokens() {\n\n    const dispatch = useDispatch()\n    const api = useExchangeAPI()\n\n    useCustomDCEffect(async() => {\n\n        if (!api) {\n            return\n        }\n\n        try {\n            const tokens = await api.getTokens()\n            dispatch(setTokens(tokens))\n        } catch (reason) {\n            dumpError400(reason)\n        }\n\n    }, [api])\n\n}\n\nexport function useUpdateTickerMap(market: string) {\n\n    const dispatch = useDispatch()\n    const api = useExchangeAPI()\n\n    useCustomDCEffect(async() => {\n\n        if (!api) {\n            return\n        }\n\n        try {\n            const tickMap = await api.getTicker({\n                market\n              })\n            dispatch(setTickerMap(tickMap))\n        } catch (reason) {\n            dumpError400(reason)\n        }\n\n    }, [api])\n\n}\n\nexport function useMarketTrades(market: string) {\n  \n    const dispatch = useDispatch()\n    const api = useExchangeAPI()\n\n    useCustomDCEffect(async() => {\n\n        if (!api) {\n            return\n        }\n\n        try {\n            const marketTrades = await api.getMarketTrades({\n                market\n              })\n            dispatch(setMarketTrades(marketTrades))\n        } catch (reason) {\n            dumpError400(reason)\n        }\n\n    }, [api, dispatch])\n\n}\n\nexport function useUpdateFiatPrice() {\n  \n    const dispatch = useDispatch()\n    const api = useExchangeAPI()\n\n    useCustomDCEffect(async() => {\n\n        if (!api) {\n            return\n        }\n\n        try {\n            const usdFiatPrices = await api.getFiatPrice({\n                legal: FiatType.USD\n            })\n            const cnyFiatPrices = await api.getFiatPrice({\n                legal: FiatType.CNY\n            })\n            dispatch(setMarketTrades({}))\n        } catch (reason) {\n            dumpError400(reason)\n        }\n\n    }, [api, dispatch])\n\n}\n\n// export const asyncGetTradingInfo = async() => {\n//\n//     const { tradingInfo } = getTradingInfo()\n//     console.log('--- tradingInfo', tradingInfo)\n//\n//     let tokens: any = undefined\n//\n//     if (tradingInfo.tokens?.tokenIdMap) {\n//         tokens = tradingInfo.tokens\n//     } else {\n//         tokens = (await exchangeAPI().getTokens())\n//     }\n//\n//     let ammpools: any = undefined\n//\n//     if (tradingInfo.ammPoolConf?.ammpools) {\n//         ammpools = tradingInfo.ammPoolConf.ammpools\n//     } else {\n//         ammpools = (await ammpoolAPI().getAmmPoolConf()).ammpools\n//     }\n//\n//     let ammPoolStats: { [key: string] : AmmPoolStat } = {}\n//\n//     if (tradingInfo.ammPoolStats.ammPoolStats) {\n//         ammPoolStats = tradingInfo.ammPoolStats.ammPoolStats\n//     } else {\n//         ammPoolStats = (await ammpoolAPI().getAmmPoolStats()).ammPoolStats\n//     }\n//\n//     return {\n//         tokens,\n//         ammpools,\n//         ammPoolStats,\n//     }\n// }","import { useDispatch, useSelector } from 'react-redux'\nimport { AmmMapStates } from './interface';\nimport { ammMapSlice } from './reducer';\n\nexport const useAmmMap = <R extends {[key:string]:any},I extends {[key:string]:any}>(): AmmMapStates<R,I> & {\n    updateAmmMap:()=> void,\n    statusUnset:()=> void,\n} => {\n    const ammMap:AmmMapStates<R,I>= useSelector((state: any) => state.amm.ammMap)\n    const dispatch = useDispatch();\n    const updateAmmMap = () => {\n        dispatch(ammMapSlice.actions.getAmmMap(undefined))\n    }\n    const statusUnset = ()=>{\n        dispatch(ammMapSlice.actions.statusUnset(undefined))\n    }\n    return {\n        ...ammMap,\n        statusUnset,\n        updateAmmMap\n    }\n}\n","import { useMemo, useState, useEffect } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\n\nimport { Web3Provider } from '@ethersproject/providers'\nimport { Web3ReactContextInterface } from '@web3-react/core/dist/types'\n\nimport { useWeb3React } from '@web3-react/core'\n\nimport { injected } from 'networks/web3_connectors'\n\nimport { ChainId, NetworkContextName } from 'loopring-sdk'\n\n/*\nimport EXCHANGE_ABI from 'config/abis/exchange_3_6.json'\nimport ERC20_ABI from 'config/abis/erc20.json'\nimport DEPOSIT_ABI from 'config/abis/deposit.json'\n\nimport Web3 from 'web3'\n*/\n\nexport function useActiveWeb3React(): Web3ReactContextInterface<Web3Provider> & { chainId?: ChainId } {\n  const context = useWeb3React<Web3Provider>()\n  const contextNetwork = useWeb3React<Web3Provider>(NetworkContextName)\n  return context.active ? context : contextNetwork\n}\n\nexport function useEtherscan() {\n  const { chainId } = useActiveWeb3React()\n\n  const [etherscanUrl, setEtherscanUrl] = useState<string>('')\n\n  useEffect(() => {\n    switch(chainId) {\n      case ChainId.MAINNET:\n        setEtherscanUrl('https://etherscan.io/address/')\n        break\n      default:\n        setEtherscanUrl('https://goerli.etherscan.io/address/')\n    }\n  }, [chainId])\n\n  return {\n    etherscanUrl,\n  }\n}\n\nexport function useEagerConnect() {\n\n  const { activate, active } = useWeb3React()\n\n  const [tried, setTried] = useState(false)\n\n  useEffect(() => {\n    injected.isAuthorized().then((isAuthorized: boolean) => {\n      if (isAuthorized) {\n        console.log('useEagerConnect isAuthorized')\n        activate(injected, undefined, true).catch(() => {\n          setTried(true)\n        })\n      } else {\n        console.log('useEagerConnect NOT isAuthorized')\n        setTried(true)\n      }\n    })\n  }, []) // intentionally only running on mount (make sure it's only mounted once :))\n\n  // if the connection worked, wait until we get confirmation of that to flip the flag\n  useEffect(() => {\n    if (!tried && active) {\n      setTried(true)\n    }\n  }, [tried, active])\n\n  return tried\n}\n\nexport function useInactiveListener(onReConnectInjected: any = undefined, suppress: boolean = false) {\n  const { active, error, activate, chainId, } = useWeb3React()\n  const dispatch = useDispatch()\n\n  useEffect((): any => {\n    const { ethereum } = window as any\n\n    const reConnectInjected = () => {\n      console.log('--------------------------> reConnectInjected')\n      activate(injected)\n      if (onReConnectInjected) {\n        onReConnectInjected()\n      }\n    }\n\n    if (ethereum && ethereum.on && !active && !error) {\n\n      const handleChainChanged = (chainId: string | number) => {\n        console.log('Handling \\'chainChanged\\' event with payload', chainId)\n        reConnectInjected()\n      }\n      const handleAccountsChanged = (accounts: string[]) => {\n        console.log('---------------------------------------------')\n        console.log('Handling \\'accountsChanged\\' event with payload', accounts)\n        console.log('before reset accounts.length=', accounts.length)\n        if (accounts.length > 0) {\n          console.log('before reset!!!!!!!!!!!!!!!!1')\n          reConnectInjected()\n        }\n      }\n\n      ethereum.on('chainChanged', handleChainChanged)\n      ethereum.on('accountsChanged', handleAccountsChanged)\n\n      return () => {\n        if (ethereum.removeListener) {\n          ethereum.removeListener('chainChanged', handleChainChanged)\n          ethereum.removeListener('accountsChanged', handleAccountsChanged)\n        }\n      }\n    }\n  }, [active, error, chainId, activate, dispatch])\n}\n\nexport function useBlockNumber() {\n  const { library, chainId } = useActiveWeb3React()\n\n  const [blockNumber, setBlockNumber] = useState<number>()\n\n  useEffect((): any => {\n      if (!!library) {\n          let stale = false\n\n          library\n              .getBlockNumber()\n              .then((blockNumber: number) => {\n                  if (!stale) {\n                      setBlockNumber(blockNumber)\n                  }\n              })\n              .catch(() => {\n                  if (!stale) {\n                      setBlockNumber(-1)\n                  }\n              })\n\n          const updateBlockNumber = (blockNumber: number) => {\n              setBlockNumber(blockNumber)\n          }\n          library.on('block', updateBlockNumber)\n\n          return () => {\n              stale = true\n              library.removeListener('block', updateBlockNumber)\n              setBlockNumber(undefined)\n          }\n      }\n  }, [library, chainId])\n\n  return {\n      blockNumber,\n  }\n}\n\nexport function useBalance() {\n  const { account, library, chainId } = useActiveWeb3React()\n\n  const [balance, setBalance] = useState<number>()\n  useEffect((): any => {\n      if (!!account && !!library) {\n          let stale = false\n\n          library\n              .getBalance(account)\n              .then((balance: any) => {\n                  if (!stale) {\n                      setBalance(balance)\n                  }\n              })\n              .catch(() => {\n                  if (!stale) {\n                      setBalance(0)\n                  }\n              })\n\n          return () => {\n              stale = true\n              setBalance(0)\n          }\n      }\n  }, [account, library, chainId]) // ensures refresh if referential identity of library doesn't change across chainIds\n\n  return {\n      balance,\n  }\n}\n","import { InjectedConnector } from '@web3-react/injected-connector'\nimport { NetworkConnector } from '@web3-react/network-connector'\nimport { WalletConnectConnector } from '@web3-react/walletconnect-connector'\nimport { WalletLinkConnector } from '@web3-react/walletlink-connector'\nimport { LedgerConnector } from '@web3-react/ledger-connector'\nimport { TrezorConnector } from '@web3-react/trezor-connector'\nimport { AuthereumConnector } from '@web3-react/authereum-connector'\n\nconst POLLING_INTERVAL = 12000\n\nconst RPC_URLS: { [chainId: number]: string } = {\n  1: process.env.REACT_APP_RPC_URL_1 as string,\n  5: process.env.REACT_APP_RPC_URL_5 as string\n}\n\nconsole.log('RPC_URLS 1:', RPC_URLS[1])\nconsole.log('RPC_URLS 5:', RPC_URLS[5])\n\nexport const injected = new InjectedConnector({ supportedChainIds: [1, 5,] })\n\nexport const network = new NetworkConnector({\n  urls: { \n    1: RPC_URLS[1], \n    5: RPC_URLS[5] \n  },\n  defaultChainId: 1\n})\n\nexport const walletconnect = new WalletConnectConnector({\n  rpc: { 1: RPC_URLS[1] },\n  bridge: 'https://bridge.walletconnect.org',\n  qrcode: true,\n  pollingInterval: POLLING_INTERVAL\n})\n\nexport const walletlink = new WalletLinkConnector({\n  url: RPC_URLS[1],\n  appName: 'Loopring DEX'\n})\n\nexport const ledger = new LedgerConnector({ chainId: 1, url: RPC_URLS[1], pollingInterval: POLLING_INTERVAL })\n\nexport const trezor = new TrezorConnector({\n  chainId: 1,\n  url: RPC_URLS[1],\n  pollingInterval: POLLING_INTERVAL,\n  manifestEmail: 'dummy@abc.xyz',\n  manifestAppUrl: 'http://localhost:1234'\n})\n\nexport const authereum = new AuthereumConnector({ chainId: 42 })\n","import { useDispatch, useSelector } from 'react-redux'\nimport { walletLayer2Slice } from './reducer';\nimport { WalletLayer2States } from './interface';\n\nexport function useWalletLayer2(): WalletLayer2States & {\n    updateWalletLayer2:()=> void,\n    statusUnset:()=> void,\n    resetLayer2:()=>void,\n} {\n    const walletLayer2:WalletLayer2States = useSelector((state: any) => state.walletLayer2)\n    const dispatch = useDispatch();\n    const updateWalletLayer2 = () => {\n        dispatch(walletLayer2Slice.actions.getWalletLayer2(undefined))\n    }\n    const statusUnset = ()=>{\n        dispatch(walletLayer2Slice.actions.statusUnset(undefined))\n    }\n    const resetLayer2 = ()=>{\n        dispatch(walletLayer2Slice.actions.reset(undefined))\n    }\n    return {\n        ...walletLayer2,\n        resetLayer2,\n        statusUnset,\n        updateWalletLayer2\n    }\n\n}\n","import { createSlice, PayloadAction, Slice } from '@reduxjs/toolkit'\nimport { AmmMapStates } from './interface';\nimport { STATUS } from '../../constant';\nimport { AmmPoolStat, AmmPoolInfoV3, LoopringMap } from 'loopring-sdk';\n\nexport  type GetAmmMapParams = { ammpools: LoopringMap<AmmPoolInfoV3> }\n\n\nconst initialState: Required<AmmMapStates<object, object>> = {\n    ammMap: undefined,\n    __timer__: -1,\n    status: 'UNSET',\n    errorMessage: null,\n}\nconst ammMapSlice: Slice = createSlice({\n    name: 'ammMap',\n    initialState,\n    reducers: {\n        getAmmMap(state, action: PayloadAction<GetAmmMapParams>) {\n            state.status = STATUS.PENDING\n        },\n        getAmmMapStatus(state, action: PayloadAction<AmmMapStates<any, any>>) {\n            // @ts-ignore\n            if (action.error) {\n                state.status = STATUS.ERROR\n                // @ts-ignore\n                state.errorMessage = action.error\n            }\n            const {ammMap, __timer__} = action.payload\n            if (ammMap) {state.ammMap = ammMap;}\n            if (__timer__) {state.__timer__ = __timer__;}\n            state.status = STATUS.DONE\n        },\n        updateRealTimeAmmMap(state, action: PayloadAction<undefined>) {\n            state.status = STATUS.PENDING\n\n\n        },\n        statusUnset: state => {\n            state.status = STATUS.UNSET\n        }\n    },\n});\nexport { ammMapSlice };\nexport const {getAmmMap, getAmmMapStatus, statusUnset, updateRealTimeAmmMap} = ammMapSlice.actions\n","import { Provider } from 'react-redux'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nimport { createWeb3ReactRoot, Web3ReactProvider } from '@web3-react/core'\nimport store from 'stores'\n\nimport { getLibrary } from 'utils/web3_tools'\nimport { NetworkContextName } from 'loopring-sdk'\n\nimport { getTheme, i18n, provider, ProviderComposer } from \"@loopring-web/component-lib/static-resource\"\nimport { ThemeProvider as MuThemeProvider } from '@material-ui/core'\nimport LocalizationProvider from '@material-ui/pickers/LocalizationProvider'\n\nimport MomentUtils from '@material-ui/lab/AdapterMoment'\n\nimport { ThemeProvider } from \"@emotion/react\"\n\nimport { I18nextProvider } from \"react-i18next\"\n\n\n\nconst Web3ProviderNetwork = createWeb3ReactRoot(NetworkContextName)\nconst providers = [\n    provider(LocalizationProvider as any, {dateAdapter: MomentUtils}),\n    provider(I18nextProvider as any, {i18n:i18n}),\n    provider(MuThemeProvider as any, {theme: getTheme('dark')}),\n    provider(ThemeProvider as any, {theme: getTheme('dark')}),\n    provider(Provider as any, {store}),\n]\n\nReactDOM.render(\n// @ts-ignore\n    <ProviderComposer providers={providers}>\n        <Web3ReactProvider getLibrary={getLibrary}>\n            <Web3ProviderNetwork getLibrary={getLibrary}>\n                <App/>\n            </Web3ProviderNetwork>\n        </Web3ReactProvider>\n    </ProviderComposer>,\n    document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\nif (process.env.NODE_ENV !== 'production') {\n    reportWebVitals(console.log)\n}\n","import { createSlice, PayloadAction, Slice } from '@reduxjs/toolkit'\n\nimport { TradingInterval, ChainId, ExchangeInfo, TokenInfo, TickerData, getBaseQuote } from 'loopring-sdk'\n\nexport interface TradingInfo {\n  chainId: number\n  symbol: string\n  symbol_base: string | undefined\n  symbol_quote: string | undefined\n  interval: TradingInterval\n  ammPoolStats: any\n  ammPoolConf: any\n  ammActivityRules: any\n  markets: any\n  marketTrades: any\n  tickerMap: {[key: string]: TickerData}\n  tokens: {[key: string]: [value: TokenInfo]}\n  exchangeInfo?: ExchangeInfo\n}\n\nconst defaultSymbol = process.env.REACT_APP_TEST_SYMBOL ? process.env.REACT_APP_TEST_SYMBOL : 'LRC-ETH'\nconst defaultInterval = process.env.REACT_APP_TEST_INTERVAL ? process.env.REACT_APP_TEST_INTERVAL : TradingInterval.hr1\n\nconst { base, quote } = getBaseQuote(defaultSymbol)\n\nconst initialState = {\n  chainId: ChainId.GORLI,\n  symbol: defaultSymbol,\n  symbol_base: base,\n  symbol_quote: quote,\n  interval: defaultInterval,\n  ammPoolConf: {},\n  ammActivityRules: {},\n  ammPoolStats: {},\n  markets: [],\n  marketTrades: {},\n  tokens: {},\n  tickerMap: {},\n  refreshRate: 1000,\n  refreshRateSlow: 3000,\n} as TradingInfo\n\nconst tradingSlice:Slice = createSlice({\n  name: 'trading',\n  initialState,\n  reducers: {\n    setChainId(state, action: PayloadAction<number>) {\n      state.chainId = action.payload\n    },\n    changeSymbol(state, action: PayloadAction<any>) {\n      state.symbol = action.payload\n      const { base, quote } = getBaseQuote(state.symbol)\n      state.symbol_base = base\n      state.symbol_quote = quote\n    },\n    changeTradingInterval(state, action: PayloadAction<any>) {\n      state.interval = action.payload\n    },\n    setTickerMap(state, action: PayloadAction<any>) {\n      state.tickerMap = action.payload\n    },\n    setAmmPoolStats(state, action: PayloadAction<any>) {\n      state.ammPoolStats = action.payload\n    },\n    setAmmActivityRules(state, action: PayloadAction<any>) {\n      state.ammActivityRules = action.payload\n    },\n    setAmmPoolConf(state, action: PayloadAction<any>) {\n      state.ammPoolConf = action.payload\n    },\n    setMarketTrades(state, action: PayloadAction<any>) {\n      state.marketTrades = action.payload\n    },\n    setMarkets(state, action: PayloadAction<any>) {\n      state.markets = action.payload\n    },\n    setTokens(state, action: PayloadAction<{}>) {\n      state.tokens = action.payload\n    },\n    setExchangeInfo(state, action: PayloadAction<ExchangeInfo>) {\n      state.exchangeInfo = action.payload\n    },\n  },\n})\n\nexport const {\n  setChainId, \n  setAmmPoolStats,\n  setAmmActivityRules,\n  setMarketTrades, \n  setTickerMap, \n  setAmmPoolConf, \n  changeSymbol, \n  changeTradingInterval, \n  setMarkets, \n  setTokens, \n  setExchangeInfo, \n} = tradingSlice.actions\n\nexport default tradingSlice\n","import * as fm from 'loopring-sdk'\nimport BigNumber from 'bignumber.js'\n\nimport { CoinInfo, CoinMap, } from '@loopring-web/component-lib/static-resource'\n\nimport { utils } from 'ethers'\nimport { TokenInfo } from 'loopring-sdk'\n\nconst MULTI_FACTOR = 10000\n\nexport enum SwapStatus {\n    Normal = 'Normal',\n    EmptyInput = 'EmptyInput',\n    ExceedUserBalance = 'ExceedUserBalance',\n    ExceedPoolBalance = 'ExceedPoolBalance',\n    Loading = 'Loading',\n}\n\nexport function getIcon(symbol: string, tokens: any) {\n    const token: any = tokens[symbol]\n    return getIconByTokenInfo(token)\n}\n\nexport function getIconByTokenInfo(token: TokenInfo) {\n    if (token) {\n        const addr = utils.getAddress(token.address)\n        const path = `https://exchange.loopring.io/assets/images/ethereum/assets/${addr}/logo.png`\n        return path\n    }\n    return ''\n}\n\nexport function makeCoinInfo(token: TokenInfo) {\n    if (token) {\n        const info: CoinInfo<any> = {\n            icon: getIconByTokenInfo(token),\n            name: token.symbol,\n            simpleName: token.symbol,\n            description: token.name,\n            company: token.name,\n        }\n        return info\n    }\n    return undefined\n}\n\nexport const getLeft = (pairs: any, tokens: any) => {\n    if (pairs) {\n\n        const left = Reflect.ownKeys(pairs)\n\n        let coinMapLeft: CoinMap<any, CoinInfo<any>> = {}\n\n        left.forEach((key: any) => {\n            coinMapLeft[key] = {\n                icon: getIcon(key, tokens),\n                name: key,\n                simpleName: key,\n                description: '',\n                company: ''\n            }\n        })\n\n        return {\n            left,\n            coinMapLeft,\n        }\n    }\n\n    return undefined\n}\n\nexport const getRight = (pairs: any, left: any, tokens: any) => {\n    if (pairs) {\n        const right = pairs[left].tokenList\n\n        let coinMapRight: CoinMap<any, CoinInfo<any>> = {}\n\n        if (right) {\n            right.forEach((key: any) => {\n                coinMapRight[key] = {\n                    icon: getIcon(key, tokens),\n                    name: key,\n                    simpleName: key,\n                    description: '',\n                    company: ''\n                }\n            })\n\n            return {\n                right,\n                coinMapRight,\n            }\n        }\n    }\n    return undefined\n}\n\nexport const getToken = (tokens: any, token: any) => {\n    if (!tokens) {\n        throw Error('no tokens list!')\n    }\n    return tokens[token]\n}\n\nexport const getTokenInfoByToken = (ammBalance: any, tokens: any, token: any) => {\n\n    const tokenInfo = getToken(tokens, token)\n\n    const tokenVol = ammBalance.pooledMap[tokenInfo.tokenId].volume\n    const reserve = fm.toBig(tokenVol)\n\n    return {\n        tokenInfo, tokenVol, reserve,\n    }\n}\n\nconst getKey = (base: any, quote: any) => {\n\n    if (!base || !quote) {\n        return {\n            key: undefined,\n            key_bak: undefined,\n            isOK: false,\n        }\n    }\n\n    const isLRCETH = false\n    const key = isLRCETH ? 'LRCETH-Pool' : ('AMM-' + base + '-' + quote)\n    const key_bak = isLRCETH ? 'LRCETH-Pool' : ('AMM-' + quote + '-' + base)\n    return {\n        key,\n        key_bak,\n        isOK: true,\n    }\n}\n\nconst getInfoByKey = (raw_data: any, keyPair: any) => {\n    const {\n        key,\n        key_bak,\n    } = keyPair\n\n    if (raw_data[key]) return raw_data[key]\n    return raw_data[key_bak]\n}\n\nexport const getBalances = (ammpools: any, ammPoolsBalances: any, base: any, quote: any, tokens: any) => {\n\n    const { ammInfo,\n        ammBalance,\n    } = getAmmInfo(ammpools, ammPoolsBalances, base, quote)\n\n    const baseToken = getToken(tokens, base)\n    const quoteToken = getToken(tokens, quote)\n\n    const baseBalance = ammBalance.pooledMap[baseToken.tokenId]\n    const quoteBalance = ammBalance.pooledMap[quoteToken.tokenId]\n\n    return {\n        ammInfo,\n        ammBalance,\n        baseBalance,\n        quoteBalance,\n    }\n\n}\n\nexport const getAmmInfoOnly = (ammpools: any, base: any, quote: any) => {\n\n    const keyPair = getKey(base, quote)\n\n    const ammInfo = getInfoByKey(ammpools, keyPair)\n\n    if (!ammInfo) {\n        throw Error('no ammInfo!')\n    }\n\n    return {\n        ammInfo,\n    }\n\n}\n\nexport const getAmmInfo = (ammpools: any, ammPoolsBalances: any, base: any, quote: any) => {\n\n    const keyPair = getKey(base, quote)\n\n    const ammInfo = getInfoByKey(ammpools, keyPair)\n    const ammBalance = getInfoByKey(ammPoolsBalances, keyPair)\n\n    if (!ammInfo || !ammBalance) {\n        throw Error('no ammInfo! no ammBalance!')\n    }\n\n    const feeBips = parseInt(ammInfo.feeBips)\n\n    return {\n        ammInfo,\n        ammBalance,\n        feeBips,\n    }\n\n}\n\nconst getAmt = (rawAmt: any, tokenInfo: any) => {\n    if (rawAmt === undefined) {\n        rawAmt = 0\n    }\n\n    return fm.toBig(rawAmt).times('1e' + tokenInfo.decimals)\n}\n\nexport const applySlippageTolerance = (\n    tokens: any,\n    token: any,\n    value: any,\n    slippageTolerance: number = 0.01\n) => {\n    const tokenInfo = getToken(tokens, token)\n    const f = 1e7\n    const feeFactor = fm.toBig(f * (1 - slippageTolerance))\n    const amount = fm.toBig(value).times('1e' + tokenInfo.decimals)\n    const outInWei = amount.times(feeFactor).dividedBy(f)\n    const out = fromWEI(tokens, token, outInWei)\n\n    return {\n        outInWei,\n        out,\n    }\n}\n\nexport const applyOrderFee = (tokens: any, token: any, value: any, feeBip: any) => {\n    const tokenInfo = getToken(tokens, token)\n    const feeFactor = fm.toBig(MULTI_FACTOR - feeBip)\n    const amount = fm.toBig(value).times('1e' + tokenInfo.decimals)\n    const appliedAmount = amount.times(feeFactor).dividedBy(MULTI_FACTOR)\n    return appliedAmount\n}\n\nexport function fromWEI(tokens: any, symbol: any, valueInWEI: any, precision?: any, ceil?: any) {\n    try {\n        const tokenInfo = getToken(tokens, symbol)\n        const precisionToFixed = precision ? precision : tokenInfo.precision\n        const value = fm.toBig(valueInWEI).div('1e' + tokenInfo.decimals)\n        return fm.toFixed(value, precisionToFixed, ceil)\n    } catch (error) {\n        return 0\n    }\n}\n\n\nexport function toWEI(tokens: any, symbol: any, value: any, rm: any = 3) {\n    const tokenInfo = getToken(tokens, symbol)\n    if (typeof tokenInfo === 'undefined') {\n        return 0\n    }\n\n    return fm.toBig(value)\n        .times('1e' + tokenInfo.decimals)\n        .toFixed(0, rm)\n}\n\nexport const getAmountOut = (amt: any, ammpools: any, ammPoolsBalances: any, tokens: any,\n    base: any, quote: any, takerRate: number, currentPrice: number) => {\n\n    if (amt === undefined) {\n        amt = 0\n    }\n\n    const { ammBalance, feeBips, } = getAmmInfo(ammpools, ammPoolsBalances, base, quote)\n\n    const { tokenInfo: baseTokenInfo, reserve: reserveIn } = getTokenInfoByToken(ammBalance, tokens, base)\n    const { tokenInfo: quoteTokenInfo, reserve: reserveOut } = getTokenInfoByToken(ammBalance, tokens, quote)\n\n    const amountIn = getAmt(amt, baseTokenInfo)\n    const feeBipsFactor = fm.toBig(MULTI_FACTOR - feeBips)\n    const amountInWithFee = amountIn.times(feeBipsFactor)\n    const numerator = amountInWithFee.times(reserveOut)\n    const denominator = reserveIn.times(MULTI_FACTOR).plus(amountInWithFee)\n    const amountOutInWei: any = numerator.dividedBy(denominator)\n\n    let quoteAmt: any = fromWEI(tokens, quote, amountOutInWei)\n\n    const _amount1ApplyOrderFeeInWei = applyOrderFee(tokens, quote, quoteAmt, takerRate + feeBips)\n\n    let _amount1ApplyOrderFee = Number(fromWEI(tokens, quote, _amount1ApplyOrderFeeInWei))\n\n    let priceImpact = 0\n    if (_amount1ApplyOrderFee < 0) {\n        _amount1ApplyOrderFee = 0\n        quoteAmt = null\n    } else {\n        const newPrice = Number(quoteAmt) / Number(amt)\n        priceImpact = (newPrice - currentPrice) / currentPrice\n    }\n\n    return {\n        quoteAmt,\n        _amount1ApplyOrderFeeInWei,\n        _amount1ApplyOrderFee,\n        priceImpact,\n    }\n\n}\n\nexport const getAmountOut_Reverse = (amt: any, ammpools: any, ammPoolsBalances: any, tokens: any,\n    base: any, quote: any, takerRate: number, currentPrice: number) => {\n\n    if (amt === undefined) {\n        amt = 0\n    }\n    \n    const { ammBalance, feeBips, } = getAmmInfo(ammpools, ammPoolsBalances, base, quote)\n\n    const { tokenInfo: baseTokenInfo, reserve: reserveIn } = getTokenInfoByToken(ammBalance, tokens, base)\n    const { tokenInfo: quoteTokenInfo, reserve: reserveOut } = getTokenInfoByToken(ammBalance, tokens, quote)\n\n    const amountOut = getAmt(amt, quoteTokenInfo)\n\n    if (amountOut.gt(reserveOut)) {\n        return {\n            baseAmt: 0,\n            _amount1ApplyOrderFeeInWei: 0,\n            _amount1ApplyOrderFee: 0,\n            priceImpact: 0,\n            hasError: false,\n        }\n    }\n\n    const numerator = amountOut.times(reserveIn).times(MULTI_FACTOR)\n    const feeBipsFactor = fm.toBig(MULTI_FACTOR - feeBips)\n\n    // If amountOut is larger than reserveOut?\n    // It's handled before getAmountOut_reserve\n    const reserveOutSubAmountOut = reserveOut.minus(amountOut)\n\n    const denominator = feeBipsFactor.times(reserveOutSubAmountOut)\n    const amountInInWei = numerator.dividedBy(denominator)\n\n    let baseAmt: any = fromWEI(tokens, quote, amountInInWei)\n\n    const _amount1ApplyOrderFeeInWei = applyOrderFee(tokens, quote, amt, takerRate + feeBips)\n\n    let _amount1ApplyOrderFee = Number(fromWEI(tokens, quote, _amount1ApplyOrderFeeInWei))\n\n    let priceImpact = 0\n    if (_amount1ApplyOrderFee < 0) {\n        _amount1ApplyOrderFee = 0\n        baseAmt = null\n    } else {\n        const newPrice = Number(amt) / Number(baseAmt)\n        priceImpact = (newPrice - currentPrice) / currentPrice\n    }\n\n    // console.log('got:', ammBalance)\n\n    return {\n        baseAmt,\n        _amount1ApplyOrderFeeInWei,\n        _amount1ApplyOrderFee,\n        priceImpact,\n        hasError: false,\n    }\n\n}\n\n/*\nexport const getAmountIn = (amt: any, ammpools: any, ammPoolsBalances: any, tokens: any, base: any, quote: any) => {\n\n    const { ammBalance, feeBips, } = getAmmInfo(ammpools, ammPoolsBalances, base, quote)\n\n    const { tokenInfo: baseTokenInfo, reserve: reserveIn } = getTokenInfoByToken(ammBalance, tokens, base)\n    const { tokenInfo: quoteTokenInfo, reserve: reserveOut } = getTokenInfoByToken(ammBalance, tokens, quote)\n\n    const amountOut = getAmt(amt, quoteTokenInfo)\n    const numerator = reserveIn.times(amountOut).times(MULTI_FACTOR)\n    const denominator = reserveOut.minus(amountOut).times(MULTI_FACTOR - feeBips)\n    const amountIn = numerator.dividedBy(denominator).plus(1)\n\n    // const baseAmt = amountIn.dividedBy('1e' + baseTokenInfo.decimals).toString()\n    const baseAmt = fromWEI(tokens, base, amountIn)\n\n    let amountInShown: any = ''\n    if (baseAmt !== 'NaN') {\n        amountInShown = baseAmt\n    }\n\n    return {\n        amountIn,\n        amountInShown,\n    }\n}\n*/\n","export enum CONSTANTS {\n    Handler = 'handler',\n    AccountId = 'account_id',\n    Account = 'account',\n    Apikey = 'apikey',\n    Eddsakey = 'eddsakey',\n    ActiveTime = 'active_time',\n    AmmOrder = 'amm_order',\n    HardwareAddresses = 'hardware_addresses',\n}\n\nconst SESSION_TIMEOUT_SECONDS = 600\n\nexport class UserStorage {\n\n    public static getHandler() {\n        const rawHandler = sessionStorage.getItem(CONSTANTS.Handler)\n        try {\n            if (rawHandler !== undefined && rawHandler !== null)\n                return parseInt(rawHandler)\n        } catch (err) {\n        }\n        return undefined\n    }\n\n    public static setHandler(handler: any) {\n        sessionStorage.setItem(CONSTANTS.Handler, handler)\n    }\n\n    public static clearHandler() {\n        sessionStorage.removeItem(CONSTANTS.Handler)\n    }\n\n    public static checkTimeout(reset: boolean = false) : boolean {\n        let dateTimeStr = localStorage.getItem(CONSTANTS.ActiveTime)\n        let now = new Date().getTime()\n\n        if (dateTimeStr !== null && !reset) {\n            let tmpDt = new Date(parseInt(dateTimeStr))\n\n            // console.log(`now:${now} dateTimeStr:${dateTimeStr} delta:${now - tmpDt.getTime()}`)\n\n            if(now - tmpDt.getTime() > SESSION_TIMEOUT_SECONDS * 1000) {\n                console.log(`TIMEOUT! now:${now} dateTimeStr:${dateTimeStr} delta:${now - tmpDt.getTime()}`)\n                sessionStorage.clear()\n                localStorage.setItem(CONSTANTS.ActiveTime, now.toString())\n                return true\n            }\n        } else {\n\n            if (reset) {\n                console.log('force reset!!')\n            }\n\n            localStorage.setItem(CONSTANTS.ActiveTime, now.toString())\n        }\n\n        return false\n    }\n\n\n    public static getAccountId() {\n        const rawId = sessionStorage.getItem(CONSTANTS.AccountId)\n        try {\n            if (rawId)\n                return parseInt(rawId)\n        } catch (err) {\n        }\n        return undefined\n    }\n\n    public static setAccountId(accountId: number) {\n        sessionStorage.setItem(CONSTANTS.AccountId, accountId.toString())\n    }\n\n    public static getAccount() {\n        return sessionStorage.getItem(CONSTANTS.Account)\n    }\n\n    public static setAccount(account: string) {\n        sessionStorage.setItem(CONSTANTS.Account, account)\n    }\n\n    public static getApikey() {\n        return sessionStorage.getItem(CONSTANTS.Apikey)\n    }\n\n    public static setApikey(apikey: string) {\n        sessionStorage.setItem(CONSTANTS.Apikey, apikey)\n    }\n\n    public static getEddsakey() {\n        return sessionStorage.getItem(CONSTANTS.Eddsakey)\n    }\n\n    public static setEddsakey(eddsakey: string) {\n        sessionStorage.setItem(CONSTANTS.Eddsakey, eddsakey)\n    }\n\n    public static getAmmOrder(): string {\n        var orderHash = localStorage.getItem(CONSTANTS.AmmOrder)\n        return orderHash ? orderHash : ''\n    }\n\n    public static setAmmOrder(orderHash: string) {\n        localStorage.setItem(CONSTANTS.AmmOrder, orderHash)\n    }\n\n    public static clearAmmOrder() {\n        localStorage.removeItem(CONSTANTS.AmmOrder)\n    }\n\n    public static isHardwareAddress(address: string) {\n        let current = localStorage.getItem(CONSTANTS.HardwareAddresses)\n        if (current) {\n            if (current.includes(address.toLowerCase())) {\n                return true\n            }\n        }\n        return false\n    }\n\n    public static saveHardwareAddress(address: string) {\n        let current = localStorage.getItem(CONSTANTS.HardwareAddresses);\n        if (current) {\n            if (current.includes(address.toLowerCase()) !== true) {\n                let newValue = current + ',' + address.toLowerCase();\n                localStorage.setItem(CONSTANTS.HardwareAddresses, newValue);\n            }\n        } else {\n            localStorage.setItem(CONSTANTS.HardwareAddresses, address.toLowerCase());\n        }\n\n    }\n}\n","import { createSlice, PayloadAction, Slice } from '@reduxjs/toolkit'\nimport {  TickerStates } from './interface';\nimport { STATUS } from '../constant';\nimport { CoinKey } from '@loopring-web/component-lib/src/static-resource';\n\nconst initialState:Required<TickerStates>  = {\n    tickerMap:{},\n    status:'UNSET',\n    errorMessage:null,\n}\nconst tickerMapSlice:Slice = createSlice({\n    name: 'tickerMap',\n    initialState,\n    reducers: {\n        getTicker(state, action:PayloadAction<CoinKey<any>>) {\n            state.status = STATUS.PENDING\n        },\n        getTickers(state, action:PayloadAction<Array<CoinKey<any>>>) {\n            state.status = STATUS.PENDING\n        },\n        getTickerStatus(state, action: PayloadAction<TickerStates>) {\n            // @ts-ignore\n            if (action.error) {\n                state.status =  STATUS.ERROR\n                // @ts-ignore\n                state.errorMessage = action.error\n            }\n            state.tickerMap = {...state.tickerMap,...action.payload.tickerMap};\n            state.status = STATUS.DONE\n        },\n        statusUnset: state => {\n            state.status = STATUS.UNSET\n        }\n\n    },\n});\nexport { tickerMapSlice };\nexport const { getTicker,getTickers, getTickerStatus, statusUnset } = tickerMapSlice.actions;","import { createSlice, PayloadAction, Slice } from '@reduxjs/toolkit'\nimport { ENV, SystemStatus } from './interface';\nimport { STATUS } from '../constant';\n\nconst initialState: SystemStatus = {\n    env: ENV.PROD,\n    chainId: 'unknown',\n    // network:'NONETWORK',\n    baseURL: '',\n    faitPrices: undefined,\n    gasPrice: undefined,\n    forex: undefined,\n    __timer__: -1,\n    status: 'UNSET',\n    errorMessage: null,\n}\nconst systemSlice: Slice<SystemStatus> = createSlice({\n    name: 'system',\n    initialState,\n    reducers: {\n        updateSystem(state, action: PayloadAction<Partial<{ chainId: 1 | 5 | 'unknown' }>>) {\n            console.log(action.type)\n            state.status = STATUS.PENDING\n        },\n        updateRealTimeObj(state, action: PayloadAction<Partial<{ faitPrices: any, gasPrice: number, forex: number }>>) {\n            const {forex, faitPrices, gasPrice} = action.payload;\n            if (forex) {\n                state.forex = forex\n            }\n            if (faitPrices) {\n                state.faitPrices = faitPrices\n            }\n            if (gasPrice) {\n                state.gasPrice = gasPrice\n            }\n\n\n            // state = {\n            //     ...state.system,\n            //     forex: forex?,\n            //     faitPrices: action.payload.faitPrices ? action.payload.faitPrices : state.system.faitPrices,\n            //     gasPrice: action.payload.gasPrice ? action.payload.gasPrice : state.system.gasPrice,\n            // };\n\n        },\n        getSystemStatus(state, action: PayloadAction<Partial<SystemStatus>>) {\n\n            // @ts-ignore\n            if (action.error) {\n                state.status = STATUS.ERROR\n                // @ts-ignore\n                state.errorMessage = action.error\n            }\n            const {env, baseURL, faitPrices, gasPrice, forex, __timer__} = action.payload;\n            if (env) {\n                state.env = env\n            }\n            if (baseURL) {\n                state.baseURL = baseURL\n            }\n            if (faitPrices) {\n                state.faitPrices = faitPrices\n            }\n            if (gasPrice) {\n                state.gasPrice = gasPrice\n            }\n            if (forex) {\n                state.forex = forex\n            }\n            if (__timer__) {\n                state.__timer__ = __timer__\n            }\n            state.status = STATUS.DONE\n        },\n        statusUnset: state => {\n            state.status = STATUS.UNSET\n        }\n\n    },\n});\nexport { systemSlice };\nexport const {updateSystem, getSystemStatus, statusUnset, updateRealTimeObj} = systemSlice.actions;","import { StateBase } from '../interface';\nimport { ChainId } from 'loopring-sdk';\n\nexport enum ENV {\n    DEV='DEV',\n    UAT='UAT',\n    PROD='PROD',\n}\nexport enum NETWORKEXTEND {\n    NONETWORK = 'unknown'\n}\nexport type NETWORK = NETWORKEXTEND | ChainId\n\n\nexport type System = {\n    env:keyof typeof ENV,\n    chainId: 1|5|'unknown'\n    // network: keyof typeof NETWORK,\n    baseURL: string,\n    faitPrices:any | undefined,\n    gasPrice:number | undefined,\n    forex:number | undefined,\n\n\n}\n\nexport type SystemStatus = System & {\n    // system:System | {}\n    __timer__:NodeJS.Timeout | -1\n}  & StateBase\n\n\n\n","import { createSlice, PayloadAction, Slice } from '@reduxjs/toolkit'\nimport { WalletLayer1Map, WalletLayer1States } from './interface';\nimport { STATUS } from '../constant';\n\n\nconst initialState:WalletLayer1States  = {\n    walletLayer1:undefined,\n    status:'UNSET',\n    errorMessage:null,\n}\nconst walletLayer1Slice:Slice = createSlice({\n    name: 'walletLayer1S',\n    initialState,\n    reducers: {\n        updateWalletLayer1(state, action:PayloadAction<string | undefined>) {\n            state.status = STATUS.PENDING\n        },\n        reset(state, action:PayloadAction<string | undefined>) {\n            state.walletLayer1 = undefined;\n            state.status = STATUS.UNSET;\n        },\n        getWalletLayer1Status(state, action: PayloadAction<{ walletLayer1:WalletLayer1Map<object> }>) {\n            // @ts-ignore\n            if (action.error) {\n                state.status =  STATUS.ERROR\n                // @ts-ignore\n                state.errorMessage = action.error\n            }\n            state.walletLayer1 = {...action.payload.walletLayer1};\n            state.status = STATUS.DONE\n        },\n        statusUnset: state => {\n            state.status = STATUS.UNSET\n        }\n    },\n});\nexport { walletLayer1Slice };\nexport const { updateWalletLayer1, getWalletLayer1Status,statusUnset,reset } = walletLayer1Slice.actions\n","import { createSlice, PayloadAction, Slice } from '@reduxjs/toolkit'\nimport { WalletLayer2Map, WalletLayer2States } from './interface';\nimport { STATUS } from '../constant';\n\n\nconst initialState:WalletLayer2States  = {\n    walletLayer2:undefined,\n    status:'UNSET',\n    errorMessage:null,\n}\nconst walletLayer2Slice:Slice = createSlice({\n    name: 'walletLayer2S',\n    initialState,\n    reducers: {\n        updateWalletLayer2(state, action:PayloadAction<string | undefined>) {\n            state.status = STATUS.PENDING\n        },\n        reset(state, action:PayloadAction<string | undefined>) {\n            state.walletLayer2 = undefined;\n            state.status = STATUS.UNSET;\n        },\n        getWalletLayer2Status(state, action: PayloadAction<{ walletLayer2:WalletLayer2Map<object> }>) {\n            // @ts-ignore\n            if (action.error) {\n                state.status =  STATUS.ERROR\n                // @ts-ignore\n                state.errorMessage = action.error\n            }\n            state.walletLayer2 = {...action.payload.walletLayer2};\n            state.status = STATUS.DONE\n        },\n        statusUnset: state => {\n            state.status = STATUS.UNSET\n        }\n    },\n});\nexport { walletLayer2Slice };\nexport const {  updateWalletLayer2,getWalletLayer2Status,statusUnset,reset } = walletLayer2Slice.actions\n","import { createSlice, PayloadAction, Slice } from '@reduxjs/toolkit'\nimport { AmmActivityMapStates } from './interface';\nimport { STATUS } from '../../constant';\n\n\nconst initialState:Required<AmmActivityMapStates>  = {\n    ammActivityMap:{},\n    status:'UNSET',\n    errorMessage:null,\n}\nconst ammActivityMapSlice:Slice = createSlice({\n    name: 'ammActivityMap',\n    initialState,\n    reducers: {\n        getAmmActivityMap(state, action:PayloadAction<string | undefined>) {\n            state.status = STATUS.PENDING\n        },\n        getAmmActivityMapStatus(state, action: PayloadAction<AmmActivityMapStates>) {\n            // @ts-ignore\n            if (action.error) {\n                state.status =  STATUS.ERROR\n                // @ts-ignore\n                state.errorMessage = action.error\n            }\n            state.ammActivityMap = {...action.payload.ammActivityMap};\n            state.status = STATUS.DONE\n        },\n        statusUnset: state => {\n            state.status = STATUS.UNSET\n        }\n\n    },\n});\nexport { ammActivityMapSlice };\nexport const { getAmmActivityMap, getAmmActivityMapStatus, statusUnset } = ammActivityMapSlice.actions\n","import { createSlice, PayloadAction, Slice } from '@reduxjs/toolkit'\nimport { GetTokenMapParams, TokenMapStates } from './interface';\nimport { STATUS } from '../constant';\n\nconst initialState: TokenMapStates<object> = {\n    coinMap: {},\n    addressIndex: undefined,\n    tokenMap: undefined,\n    idIndex: undefined,\n    status: 'UNSET',\n    errorMessage: null,\n}\nconst tokenMapSlice: Slice<TokenMapStates<object>> = createSlice({\n    name: 'tokenMap',\n    initialState,\n    reducers: {\n        getTokenMap(state, action: PayloadAction<GetTokenMapParams<any>>) {\n            state.status = STATUS.PENDING\n        },\n        getTokenMapStatus(state, action: PayloadAction<TokenMapStates<object>>) {\n            // @ts-ignore      console.log(action.type)\n            if (action.error) {\n                state.status = STATUS.ERROR\n                // @ts-ignore\n                state.errorMessage = action.error\n            }\n\n            const {tokenMap, addressIndex, idIndex, coinMap, marketArray, marketCoins} = action.payload;\n            if (tokenMap) { state.tokenMap = tokenMap }\n            if (addressIndex) { state.addressIndex = addressIndex }\n            if (idIndex) { state.idIndex = idIndex }\n            if (coinMap) { state.coinMap = coinMap }\n            if (marketArray) { state.marketArray = marketArray }\n            if (marketCoins)  { state.marketCoins = marketCoins }\n            // if (tokenPairsMap) {state.tokenPairsMap = tokenPairsMap }\n            state.status = STATUS.DONE;\n        },\n        // getTokenPairMap(state, action: PayloadAction<{tokenPairs: TokenPairs }>) {\n        //     const {tokenPairs} = action.payload;\n        //     const tokenPairsMap =  Reflect.ownKeys(tokenPairs).reduce((prev,key)=>{\n        //         // @ts-ignore\n        //         return prev[key as string] =  tokenPairs[key as string].tokenList\n        //     }, {} )\n        //     if (tokenPairsMap) {state.tokenPairsMap = tokenPairsMap }\n        //     // state.status = STATUS.PENDING\n        // },\n        statusUnset: state => {\n            state.status = STATUS.UNSET\n        }\n\n    },\n});\nexport { tokenMapSlice };\nexport const {getTokenMap, getTokenMapStatus,getTokenPairMap, statusUnset} = tokenMapSlice.actions;","import { useDispatch, useSelector } from 'react-redux'\nimport { tickerMapSlice } from './reducer';\nimport { TickerStates } from './interface';\nimport { CoinKey } from '@loopring-web/component-lib/src/static-resource';\n\nexport function useTicker(): TickerStates & {\n    updateTickers:(tickerKeys:Array<CoinKey<any>>)=>void,\n    updateTicker:(tickerKey:CoinKey<any>)=>void,\n    statusUnset:()=>void,\n} {\n    const tickerMap:TickerStates = useSelector((state: any) => state.tickerMap)\n    const dispatch = useDispatch();\n    const updateTicker = (tickerKey:CoinKey<any>) => {\n        dispatch(tickerMapSlice.actions.getTicker({tickerKey}))\n    }\n    const updateTickers = (tickerKeys:Array<CoinKey<any>>) => {\n        dispatch(tickerMapSlice.actions.getTickers({tickerKeys}))\n    }\n    const statusUnset = ()=>{\n        dispatch(tickerMapSlice.actions.statusUnset(undefined))\n    }\n    return {\n        ...tickerMap,\n        statusUnset,\n        updateTickers,\n        updateTicker,\n    }\n\n}\n","export enum AccountStatus {\n    UNKNOWN = 'UNKNOWN',\n    UNCONNNECTED = 'UNCONNNECTED',\n    CONNECTED = 'CONNECTED',\n    NOACCOUNT = 'NOACCOUNT',\n    DEPOSITING = 'DEPOSITING',\n    DEPOSIT_TO_CONFIREM = 'DEPOSIT_TO_CONFIREM',\n    UNACTIVATED = 'UNACTIVATED',\n    ARPROVING = 'ARPROVING',\n    APPROV_TO_CONFIRM = 'APPROV_TO_CONFIRM',\n    LOCKED = 'LOCKED',\n    ACTIVATED = 'ACTIVATED',\n}\n\nexport enum StatusChangeEvent {\n    Reset = 'Reset',\n    Connecting = 'Connecting',\n    HasPubkey = 'HasPubkey',\n    HasNoPubkey = 'HasNoPubkey',\n    ErrorResponse = 'ErrorResponse',\n    FinishDeposit = 'FinishDeposit',\n    DepositConfirmed = 'DepositConfirmed',\n    IsSmartWallet = 'IsSmartWallet',\n    ApproveSubmit = 'ApproveSubmit',\n    ApproveConfirmed = 'ApproveConfirmed',\n    Unlock = 'Unlock',\n    Lock = 'Lock',\n}\n\nexport const AccountMachineSpec = (initialState: AccountStatus = AccountStatus.UNCONNNECTED) => \n{\n    return {\n        initialState: initialState,\n        states: {\n            UNCONNNECTED: {\n                Connecting: AccountStatus.CONNECTED,\n                Reset: AccountStatus.UNCONNNECTED,\n            },\n            CONNECTED: {\n                HasPubkey: AccountStatus.LOCKED,\n                HasNoPubkey: AccountStatus.UNACTIVATED,\n                ErrorResponse: AccountStatus.NOACCOUNT,\n                Reset: AccountStatus.UNCONNNECTED,\n            },\n            NOACCOUNT: {\n                ErrorResponse: AccountStatus.NOACCOUNT,\n                Reset: AccountStatus.UNCONNNECTED,\n            },\n            DEPOSITING: {\n                FinishDeposit: AccountStatus.DEPOSIT_TO_CONFIREM,\n                Reset: AccountStatus.UNCONNNECTED,\n            },\n            DEPOSIT_TO_CONFIREM: {\n                HasPubkey: AccountStatus.ACTIVATED,\n                HasNoPubkey: AccountStatus.DEPOSIT_TO_CONFIREM,\n                ErrorResponse: AccountStatus.DEPOSIT_TO_CONFIREM,\n                Reset: AccountStatus.UNCONNNECTED,\n            },\n            UNACTIVATED: {\n                IsSmartWallet: AccountStatus.ARPROVING,\n                Reset: AccountStatus.UNCONNNECTED,\n            },\n            ARPROVING: {\n                ApproveSubmit: AccountStatus.APPROV_TO_CONFIRM,\n                Reset: AccountStatus.UNCONNNECTED,\n            },\n            APPROV_TO_CONFIRM: {\n                ApproveConfirmed: AccountStatus.ACTIVATED,\n                Reset: AccountStatus.UNCONNNECTED,\n            },\n            LOCKED: {\n                Unlock: AccountStatus.ACTIVATED,\n                Reset: AccountStatus.UNCONNNECTED,\n            },\n            ACTIVATED: {\n                Lock: AccountStatus.LOCKED,\n                Reset: AccountStatus.UNCONNNECTED,\n            },\n        },\n    }\n}\n","import { Contract } from '@ethersproject/contracts'\nimport { getAddress } from '@ethersproject/address'\nimport { AddressZero } from '@ethersproject/constants'\nimport { BigNumber } from '@ethersproject/bignumber'\n\nimport { JsonRpcSigner, Web3Provider } from '@ethersproject/providers'\n\nimport { UnsupportedChainIdError } from '@web3-react/core'\n\nimport {\n  NoEthereumProviderError,\n  UserRejectedRequestError as UserRejectedRequestErrorInjected\n} from '@web3-react/injected-connector'\nimport { UserRejectedRequestError as UserRejectedRequestErrorWalletConnect } from '@web3-react/walletconnect-connector'\n\nimport { ChainId } from 'loopring-sdk'\n\nexport function getLibrary(provider: any): Web3Provider {\n  const library = new Web3Provider(provider)\n  library.pollingInterval = 10000\n  return library\n}\n\nexport function getErrorMessage(error: Error) {\n  if (error instanceof NoEthereumProviderError) {\n    return 'No Ethereum browser extension detected, install MetaMask on desktop or visit from a dApp browser on mobile.'\n  } else if (error instanceof UnsupportedChainIdError) {\n    return 'You\\'re connected to an unsupported network.'\n  } else if (\n    error instanceof UserRejectedRequestErrorInjected ||\n    error instanceof UserRejectedRequestErrorWalletConnect\n  ) {\n    return 'Please authorize this website to access your Ethereum account.'\n  } else {\n    console.error(error)\n    return 'An unknown error occurred. Check the console for more details.'\n  }\n}\n\nexport function transactionChecker(web3: any, address: string) {\n  const account = address.toLowerCase()\n\n  const subscription = web3.eth.subscribe('pendingTransactions', (err: any, res: any) => {\n    if (err) {\n      console.error(err)\n    }\n  })\n\n  return function watchTransactions() {\n    console.log('Watch Transactions...')\n    subscription.on('data', (txHash: any) => {\n      setTimeout(async () => {\n        try {\n          let tx = await web3.eth.getTransaction(txHash)\n          if (tx.to && tx.to.toLowerCase() === account) {\n            const value = web3.utils.fromWei(tx.value, 'ether')\n            if (value > 0) {\n              console.log('watchTransactions value:', value)\n            }\n          }\n        } catch (err) {\n          console.error(err)\n        }\n      }, 60 * 1000)\n    })\n  }\n}\n\n// returns the checksummed address if the address is valid, otherwise returns false\nexport function isAddress(value: any): string | false {\n  try {\n    return getAddress(value)\n  } catch {\n    return false\n  }\n}\n\nconst ETHERSCAN_PREFIXES: { [chainId in ChainId]: string } = {\n  1: '',\n  5: 'goerli.',\n}\n\nexport function getEtherscanLink(\n  chainId: ChainId,\n  data: string,\n  type: 'transaction' | 'token' | 'address' | 'block'\n): string {\n  const prefix = `https://${ETHERSCAN_PREFIXES[chainId] || ETHERSCAN_PREFIXES[1]}etherscan.io`\n\n  switch (type) {\n    case 'transaction': {\n      return `${prefix}/tx/${data}`\n    }\n    case 'token': {\n      return `${prefix}/token/${data}`\n    }\n    case 'block': {\n      return `${prefix}/block/${data}`\n    }\n    case 'address':\n    default: {\n      return `${prefix}/address/${data}`\n    }\n  }\n}\n\n// shorten the checksummed version of the input address to have 0x + 4 characters at start and end\nexport function shortenAddress(address: string, chars = 4): string {\n  const parsed = isAddress(address)\n  if (!parsed) {\n    throw Error(`Invalid 'address' parameter '${address}'.`)\n  }\n  return `${parsed.substring(0, chars + 2)}...${parsed.substring(42 - chars)}`\n}\n\n// add 10%\nexport function calculateGasMargin(value: BigNumber): BigNumber {\n  return value.mul(BigNumber.from(10000).add(BigNumber.from(1000))).div(BigNumber.from(10000))\n}\n\n// account is not optional\nexport function getSigner(library: Web3Provider, account: string): JsonRpcSigner {\n  return library.getSigner(account).connectUnchecked()\n}\n\n// account is optional\nexport function getProviderOrSigner(library: Web3Provider, account?: string): Web3Provider | JsonRpcSigner {\n  return account ? getSigner(library, account) : library\n}\n\n// account is optional\nexport function getContract(address: string, ABI: any, library: Web3Provider, account?: string): Contract {\n  if (!isAddress(address) || address === AddressZero) {\n    throw Error(`Invalid 'address' parameter '${address}'.`)\n  }\n\n  return new Contract(address, ABI, getProviderOrSigner(library, account) as any)\n}\n\nexport function escapeRegExp(string: string): string {\n  return string.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&') // $& means the whole matched string\n}\n\nexport async function isContract(web3: any, address: string) {\n  const code = await web3.eth.getCode(address)\n  return code && code.length > 2\n}\n\nexport function getShortAddr(address: string) {\n    if (!address || address === undefined || address === null || address.trim() === '') {\n        console.log('getShortAddr got empty!')\n        return undefined\n    }\n    const convertAddr = address.substr(0, 6) + '...' + address.substr(address.length - 4)\n    return convertAddr\n}\n","import { debounce } from 'lodash'\nimport React, { useEffect } from 'react'\nimport { UserStorage } from 'storage'\n\nimport { useCheckAccStatus, } from 'stores/account/hook'\n\nimport { \n  useUpdateChainId,\n  useUpdateExchangeInfo, \n  useUpdateExchangeMarkets, \n  useUpdateTokens, \n  useUpdateAmmPoolConf,\n  useUpdateAmmActivityRules,\n  useUpdateAmmPoolStats,\n} from 'stores/trading/hook'\n\nenum WindowEvent {\n  Click = 'click',\n  Scroll = 'scroll',\n  Mouseover = 'mouseover',\n}\n\nconst events = [WindowEvent.Click, WindowEvent.Scroll]\n\nconst forceReset = debounce(() => { UserStorage.checkTimeout(true) }, 100)\n\nexport const GlobalProvider = ({ children }: { children: React.ReactNode }) => {\n\n  useUpdateExchangeInfo()\n  useUpdateExchangeMarkets()\n  useUpdateTokens()\n  useUpdateAmmPoolConf()\n  useUpdateAmmActivityRules()\n  useUpdateAmmPoolStats()\n  useUpdateChainId()\n\n  useCheckAccStatus()\n\n  useEffect(() => {\n\n    events.forEach((event: string) => {\n      document.addEventListener(event, forceReset)\n    })\n\n    return () => {\n\n      events.forEach((event: string) => {\n        document.removeEventListener(event, forceReset)\n      })\n    }\n\n  }, [])\n\n  return (\n    <React.Fragment>\n      { children}\n    </React.Fragment>\n  )\n\n}\n","import React, { useState, useEffect } from 'react'\nimport styled from '@emotion/styled/macro'\nimport { useTranslation } from 'react-i18next'\n\nimport { useWeb3React } from '@web3-react/core'\n\nimport { network } from 'networks/web3_connectors'\n\nimport { useEagerConnect, useInactiveListener } from 'hooks/web3/useWeb3'\nimport { reset, setAccountStatus } from 'stores/account/reducer'\n\nimport { ChainId, NetworkContextName } from 'loopring-sdk'\n\n// import Loader from 'components/modals/Loader'\nimport { useDispatch } from 'react-redux'\nimport { AccountStatus } from 'state_machine/account_machine_spec'\n\nconst MessageWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  height: 20rem;\n`\n\nconst Message = styled.h2`\n  color: ${({ theme }) => theme.colorBase.error};\n`\n\nexport function Web3ReactManager({ children }: { children: JSX.Element }) {\n  const { t } = useTranslation()\n  const { active } = useWeb3React()\n  const { active: networkActive, error: networkError, activate: activateNetwork } = useWeb3React(NetworkContextName)\n\n  // try to eagerly connect to an injected provider, if it exists and has granted access already\n  const triedEager = useEagerConnect()\n\n  // after eagerly trying injected, if the network connect ever isn't active or in an error state, activate itd\n  useEffect(() => {\n    if (triedEager && !networkActive && !networkError && !active) {\n      activateNetwork(network)\n    }\n  }, [triedEager, networkActive, networkError, activateNetwork, active])\n\n  // when there's no account connected, react to logins (broadly speaking) on the injected provider, if it exists\n  \n  const dispatch = useDispatch()\n\n  const onReConnectInjected = () => {\n    console.log('onReConnectInjected')\n    dispatch(reset(undefined))\n    dispatch(setAccountStatus(AccountStatus.UNCONNNECTED))\n  }\n  \n  useInactiveListener(onReConnectInjected, !triedEager)\n\n  // handle delayed loader state\n  const [showLoader, setShowLoader] = useState(false)\n  useEffect(() => {\n    const timeout = setTimeout(() => {\n      setShowLoader(true)\n    }, 600)\n\n    return () => {\n      clearTimeout(timeout)\n    }\n  }, [])\n\n  // on page load, do nothing until we've tried to connect to the injected connector\n  if (!triedEager) {\n    return null\n  }\n\n  // if the account context isn't active, and there's an error on the network context, it's an irrecoverable error\n  if (!active && networkError) {\n    return (\n      <MessageWrapper>\n        <Message>{t('unknownError')}</Message>\n      </MessageWrapper>\n    )\n  }\n\n  // if neither context is active, spin\n  if (!active && !networkActive) {\n    return showLoader ? (\n      <MessageWrapper>\n        {/*<Loader />*/}\n      </MessageWrapper>\n    ) : null\n  }\n\n  return children\n}\n","import React from 'react'\n\nexport const DevWrapper = ({ children }: { children: React.ReactNode }) => {\n\n  return (\n    <React.Fragment>\n      {\n        process.env.NODE_ENV !== 'production' ? (\n          <>\n          {children}\n          </>\n        ) : null\n      }\n    </React.Fragment>\n  )\n\n}\n\n","import { useDispatch, useSelector } from 'react-redux'\nimport { AmmActivityMapStates } from './interface';\nimport { ammActivityMapSlice } from './reducer';\n\nexport function useAmmActivityMap(): AmmActivityMapStates & {\n    updateAmmActivityMap:()=> void,\n    statusUnset:()=> void,\n} {\n    const ammActivityMap:AmmActivityMapStates = useSelector((state: any) => state.amm.ammActivityMap)\n    const dispatch = useDispatch();\n    const updateAmmActivityMap = () => {\n        dispatch(ammActivityMapSlice.actions.getAmmActivityMap(undefined))\n    }\n    const statusUnset = ()=>{\n        dispatch(ammActivityMapSlice.actions.statusUnset(undefined))\n    }\n    return {\n        ...ammActivityMap,\n        statusUnset,\n        updateAmmActivityMap\n    }\n\n}\n","import { useDispatch, useSelector } from 'react-redux'\nimport { systemSlice } from './reducer';\nimport { System, SystemStatus } from './interface';\n\nexport function useSystem(): SystemStatus & {\n    updateSystem:(system:Partial<System>)=>void,\n    statusUnset:()=>void,\n} {\n    const system:SystemStatus = useSelector((state: any) => state.system)\n    const dispatch = useDispatch();\n    const updateSystem = (system:Partial<System>) => {\n        dispatch(systemSlice.actions.updateSystem({system}))\n    }\n    const statusUnset = ()=>{\n        dispatch(systemSlice.actions.statusUnset(undefined))\n    }\n    return {\n        ...system,\n        statusUnset,\n        updateSystem,\n    }\n\n}\n","export enum STATUS {\n    UNSET='UNSET',\n    PENDING='PENDING',\n    ERROR='ERROR',   // success failed timeout is Done\n    DONE='DONE',   // success failed timeout is Done\n}\n","import { useTranslation } from 'react-i18next';\nimport { Box, Container, Typography } from '@material-ui/core';\nimport styled from '@emotion/styled';\nimport { ErrorObject } from '@loopring-web/component-lib/src/static-resource';\n\nconst StyleBox = styled(Box)`\n  background-image: url('./static/images/error_bg.png');\n  background-repeat: no-repeat;\n  background-size: contain;\n  background-position: bottom;\n  white-space: pre-wrap;\n  //h2{\n  //  position: relative;\n  //}\n` as typeof Box\n\nexport const ErrorPage= ({messageKey}:ErrorObject) => {\n    // const {messageKey}: { id?:string,messageKey:string } = {messageKey: 'errorMessageTokenMapIsEmpty'};\n    //TODO: checkRouter\n    const {t} = useTranslation('error');\n    const message =  `labelConnectUs`;\n    return <>\n        <Container >\n            {/*style={{height: '100%' }}*/}\n            <StyleBox  flex={1} display={'flex'} alignItems={'flex-start'} justifyContent={'center'}\n                  flexDirection={'column'} marginTop={4} height={680} maxWidth={1200}>\n                {/*<StyleBox>*/}\n                <Box textAlign={'center'} position={'relative'} left={128} top={-64}>\n                    <Typography component={'h2'} variant={'h2'} >\n                        {t(messageKey)}\n                    </Typography>\n                    <Typography marginY={2} component={'p'} variant={'body1'} color={'textSecondary'} >\n\n                        {t(message)}\n                        {/*{t(messageKey)}*/}\n                    </Typography>\n                </Box>\n                {/*</StyleBox>*/}\n            </StyleBox>\n        </Container>\n\n        {/*<Footer></Footer>*/}\n    </>\n}\n","import { WsAPI, ExchangeAPI, AmmpoolAPI, UserAPI, DEFAULT_TIMEOUT, } from 'loopring-sdk'\nimport store, { RootState } from 'stores'\nimport { useSelector } from 'react-redux'\n\nimport { useMemo } from 'react'\n\nfunction useApi(ApiClass: any, timeout = DEFAULT_TIMEOUT) {\n    // const chainId = store.getState().trading.chainId\n    // return new ApiClass(chainId, timeout)\n\n  const { chainId, } = useSelector((state: RootState) => state.trading)\n\n  const genApi = () => {\n      if (!chainId) {\n          return undefined\n      }\n\n      return new ApiClass(chainId, timeout)\n  }\n\n  const api = useMemo(genApi, [ApiClass, chainId, timeout])\n\n  return api\n}\n\nexport function useWsAPI() {\n    return useApi(WsAPI) as WsAPI\n}\n\nexport function useExchangeAPI() {\n    return useApi(ExchangeAPI) as ExchangeAPI\n}\n\nexport function useAmmpoolAPI() {\n    return useApi(AmmpoolAPI) as AmmpoolAPI\n}\n\nexport function useUserAPI() {\n    return useApi(UserAPI) as UserAPI\n}\n","import { useDeepCompareEffect } from \"react-use\"\n\nexport function useCustomDCEffect(action: any, deps: any[] | undefined | null) {\n    useDeepCompareEffect(action, [deps || {}])\n}\n","import React  from 'react';\nimport detectEthereumProvider from '@metamask/detect-provider';\nimport { useCustomDCEffect } from 'hooks/common/useCustomDCEffect';\nimport { useSystem, NETWORK, NETWORKEXTEND } from './stores/system';\nimport { ChainId } from 'loopring-sdk';\nimport { useAmmMap } from './stores/Amm/AmmMap';\nimport { STATUS } from './stores/constant';\nimport { useTokenMap } from './stores/token';\n\n/**\n * @description call it when bootstrap the page or change the network\n */\nexport function useInit(){\n    const [state,setState] = React.useState<keyof typeof STATUS>('PENDING')\n    const systemState = useSystem();\n    const tokenState = useTokenMap();\n    const ammMapState = useAmmMap();\n\n    useCustomDCEffect(async() => {\n\n        const handleChainChanged = (chainId: 1|5|'unknown') => {\n    \n            // const network = chainId == ChainId.GORLI ? NETWORK.Goerli : NETWORK.MAIN\n            systemState.updateSystem({ chainId })\n\n        }\n\n        const provider: any = await detectEthereumProvider()\n        if (provider) {\n            const chainId = await provider.request({ method: 'eth_chainId' });\n    \n            provider.on('chainChanged', handleChainChanged)\n\n            handleChainChanged(chainId)\n            \n        } else {\n            systemState.updateSystem({chainId:ChainId.MAINNET})\n            console.log('web3 is not found')\n        }\n\n    }, [])\n\n    React.useEffect(() => {\n        switch (systemState.status) {\n            case \"ERROR\":\n                systemState.statusUnset();\n                setState('ERROR')\n                //TODO show error at button page show error  some retry dispat again\n                break;\n            case \"DONE\":\n                systemState.statusUnset();\n                //TODO do some static information update\n                //tokenState.updateTokenMap();\n                break;\n            default:\n                break;\n\n        }\n    },[\n        systemState.status,\n        systemState.statusUnset,\n        //tokenState.updateTokenMap\n    ]);\n    React.useEffect(() => {\n        if(ammMapState.status ===\"ERROR\" || tokenState.status === \"ERROR\"){\n            //TODO: solve error\n            ammMapState.statusUnset();\n            tokenState.statusUnset();\n            setState('ERROR');\n        }else if(ammMapState.status ===\"DONE\" && tokenState.status === \"DONE\"){\n            ammMapState.statusUnset();\n            tokenState.statusUnset()\n            setState('DONE');\n        }\n    },[ammMapState.status,tokenState.status,tokenState.statusUnset,ammMapState.statusUnset])\n\n    //\n    // React.useEffect(() => {\n    //     switch (tokenState.status) {\n    //         case \"ERROR\":\n    //             tokenState.statusUnset();\n    //             //TODO show error at button page show error  some retry dispat again\n    //             break;\n    //         case \"DONE\":\n    //             tokenState.statusUnset();\n    //             ammMapState.updateAmmMap()\n    //             break;\n    //         default:\n    //             break;\n    //\n    //     }\n    // },[tokenState.status,\n    //        tokenState.statusUnset,\n    //     ammMapState.updateAmmMap]);\n    //\n    // React.useEffect(() => {\n    //     switch (ammMapState.status) {\n    //         case \"ERROR\":\n    //             ammMapState.statusUnset();\n    //             //TODO show error at button page show error  some retry dispat again\n    //             break;\n    //         case \"DONE\":\n    //             ammMapState.statusUnset();\n    //             break;\n    //         default:\n    //             break;\n    //\n    //     }\n    // },[ammMapState.status,\n    //     ammMapState.statusUnset]);\n    return {\n        state,\n    }\n\n}\n","export enum Theme {\n    dark = 'dark',\n    light = 'light',\n}\n\nexport enum LangType {\n    en = 'en_US',\n    cn = 'zh_CN',\n}\n\nexport enum SystemStatus {\n    NORMAL,\n    ERROR,\n    UNKNOWN,\n}\n\nexport enum MODAL_TYPE {\n    UNKNOWN,\n    LOADING,\n    WALLET,\n}\n\nexport const REFRESH_RATE = 1000\n\nexport const REFRESH_RATE_SLOW = 15000\n","import { useCallback } from \"react\";\nimport { useDispatch } from \"react-redux\"\n\nimport {\n    setShowDeposit,\n    setShowResetAccount,\n    setShowTransfer,\n    setShowWithdraw,\n} from '@loopring-web/component-lib'\nimport { useTranslation } from \"react-i18next\";\nimport store from 'stores'\nimport { AccountStatus } from \"state_machine/account_machine_spec\";\n\nexport function useModals() {\n\n    const dispatch = useDispatch()\n\n    const { t } = useTranslation('common')\n\n    const ShowDeposit = useCallback((isShow: boolean)=>{\n        const isNoAccount = store.getState().account.status === AccountStatus.NOACCOUNT\n\n        console.log('isNoAccount: ', isNoAccount, t('depositTitleAndActive'))\n        const action = {\n            isShow,\n            props: {\n                title: isNoAccount ? t('depositTitleAndActive') : t('depositTitle'),\n                description: 'depositAndActiveDescription'\n            }\n        }\n        dispatch(setShowDeposit(action))\n    }, [dispatch, t])\n    const ShowTransfer = useCallback((isShow: boolean)=>dispatch(setShowTransfer({isShow})), [dispatch])\n    const ShowWithdraw = useCallback((isShow: boolean)=>dispatch(setShowWithdraw({isShow})), [dispatch])\n    const ShowResetAccount = useCallback((isShow: boolean)=>dispatch(setShowResetAccount({isShow})), [dispatch])\n\n    return {\n        ShowDeposit,\n        ShowTransfer,\n        ShowWithdraw,\n        ShowResetAccount,\n    }\n}","import { REFRESH_RATE } from \"defs/common_defs\"\n\nexport function PromiseJob(fetchPromise: any, setFunc: any, field?: string, prefix: any = 'PromiseJob') {\n\n    let mounted = true\n\n    const handler = () => {\n        if (fetchPromise()) {\n            fetchPromise().then((data: any) => {\n                if (mounted) {\n                    setFunc(field ? data[field] : data)\n                } else {\n                    console.log(prefix + ' unmounted!')\n                }\n            }).catch((reason: any) => {\n                console.error(reason)\n            })\n        }\n    }\n\n    const cleanUp = () => {\n        mounted = false\n    }\n\n    return {\n        handler,\n        cleanUp,\n    }\n\n}\n\n\nexport function PromiseJobInTimer(fetchPromise: any, setFunc: any, field?: string, prefix: any = 'PromiseJobInTimer', timeout: number = REFRESH_RATE) {\n\n    let mounted = true\n\n    const handler = () => {\n\n        mounted = true\n\n        const fetchFunc = () => {\n            if (fetchPromise()) {\n                fetchPromise().then((data: any) => {\n                    if (mounted) {\n                        setFunc(field ? data[field] : data)\n                    } else {\n                        console.log(prefix + ' unmounted!')\n                    }\n                }).catch((reason: any) => {\n                    console.error(reason)\n                })\n            }\n        }\n\n        fetchFunc()\n\n        const id = setInterval(fetchFunc, timeout)\n\n        return id\n    }\n\n    const cleanUp = (handler: any) => {\n        mounted = false\n        if (handler) clearInterval(handler)\n    }\n\n    return {\n        handler,\n        cleanUp,\n    }\n\n}\n","import { useEffect } from 'react'\nimport { PromiseJob, PromiseJobInTimer } from '../../utils/hook_tools'\nimport { REFRESH_RATE_SLOW } from \"defs/common_defs\"\n\nexport function usePromiseJob(fetchPromise: any, setFunc: any, field? :string, prefix: any = undefined, dependencies: any[] = []) {\n\n  const {\n    handler,\n    cleanUp,\n  } = PromiseJob(fetchPromise, setFunc, field, prefix)\n\n  useEffect(() => {\n    handler()\n    return () => cleanUp()\n  }, [...dependencies])\n\n}\n\nexport function usePromiseJobInTimer(fetchPromise: any, setFunc: any, field? :string, \n  prefix: any = undefined, dependencies: any[] = [], timeout: number= REFRESH_RATE_SLOW) {\n\n  const {\n    handler,\n    cleanUp,\n  } = PromiseJobInTimer(fetchPromise, setFunc, field, prefix, timeout)\n\n  useEffect(() => {\n    const id = handler()\n    return () => cleanUp(id)\n  }, [...dependencies])\n\n}\n","import { useState, } from 'react'\n\nimport { TradesData, TickerData, DepthData, \n  TokensResponse,\n  MarketsResponse, } from 'loopring-sdk'\n\nimport { usePromiseJob } from 'hooks/common/useCommon'\nimport { useExchangeAPI, } from './useApi'\n\nexport function useGetGas() {\n\n  const [gas, setGas] = useState<any>()\n\n  const api = useExchangeAPI()\n\n  const fetchData = () => {\n    if (!api) {\n      return undefined\n    }\n    return api.getGasPrice()\n  }\n\n  usePromiseJob(fetchData, setGas, undefined, 'useGetGas', [api])\n\n  return { gas }\n\n}\n\nexport function useGetMixMarkets() {\n\n  const [markets, setMarkets] = useState<MarketsResponse>()\n    const api = useExchangeAPI()\n\n    const fetchData = () => {\n      if (!api) {\n        return undefined\n      }\n      return api.getMixMarkets()\n    }\n  \n    usePromiseJob(fetchData, setMarkets, undefined, 'useGetMarkets', [api])\n    \n    return { markets }\n\n}\n\nexport function useGetMarkets() {\n\n  const [markets, setMarkets] = useState<MarketsResponse>()\n    const api = useExchangeAPI()\n\n    const fetchData = () => {\n      if (!api) {\n        return undefined\n      }\n      return api.getMarkets()\n    }\n  \n    usePromiseJob(fetchData, setMarkets, undefined, 'useGetMarkets', [api])\n    \n    return { markets }\n\n}\n\nexport function useGetExchangeInfo() {\n\n  const [exchangeInfo, setExchangeInfo] = useState<any>()\n    const api = useExchangeAPI()\n\n    const fetchData = () => {\n      if (!api) {\n        return undefined\n      }\n      return api.getExchangeInfo()\n    }\n  \n    usePromiseJob(fetchData, setExchangeInfo, 'exchangeInfo', 'useGetExchangeInfo', [api])\n    \n    return { exchangeInfo }\n\n}\n\nexport function useGetTokens() {\n\n  const [tokens, setTokens] = useState<TokensResponse>()\n    const api = useExchangeAPI()\n\n    const fetchData = () => {\n      if (!api) {\n        return undefined\n      }\n      return api.getTokens()\n    }\n  \n    usePromiseJob(fetchData, setTokens, undefined, 'useGetTokens', [api])\n    \n    return { tokens }\n\n}\n\n\nexport function useTrades(symbol: string) {\n\n  const [trades, setTrades] = useState<TradesData>()\n\n  const api = useExchangeAPI()\n\n  const fetchData = () => {\n    if (!api) {\n      return undefined\n    }\n    return api.getMarketTrades({\n      market: symbol\n    })\n  }\n\n  usePromiseJob(fetchData, setTrades, undefined, 'useTrades', [api, symbol])\n\n  return { trades, }\n\n}\n\nexport function useTickerMap(market: string) {\n\n  const [tickerMap, setTickerMap] = useState<{[key: string]: TickerData}>()\n\n  const api = useExchangeAPI()\n\n  const fetchData = () => {\n    if (!api) {\n      return undefined\n    }\n    return api.getTicker({\n      market\n    })\n  }\n\n  usePromiseJob(fetchData, setTickerMap, 'tickMap', 'useTickerMap', [api, market])\n\n  return { tickerMap, }\n\n}\n\nexport function useDepth(symbol: string) {\n\n  const api = useExchangeAPI()\n\n  const [depth, setDepth] = useState<DepthData>()\n\n    const fetchData = () => {\n      if (!api) {\n        return undefined\n      }\n      return api.getDepth({\n        market: [symbol]\n      })\n    }\n  \n    usePromiseJob(fetchData, setDepth, 'depth', 'useDepth', [api, symbol])\n\n  return { depth, }\n\n}\n","import { useState, useCallback } from 'react'\n\nimport { useAccount } from 'stores/account/hook'\n\nimport { OrdersData, dumpError400, } from 'loopring-sdk'\n\nimport { REFRESH_RATE } from 'defs/common_defs'\n\nimport { useUserAPI } from './useApi'\n\nimport { getToken, fromWEI } from 'utils/swap_calc_utils'\n\nimport * as fm from 'loopring-sdk'\n\nimport { useCustomDCEffect } from 'hooks/common/useCustomDCEffect'\n\nexport function useOrders() {\n\n  const acc = useAccount().account\n\n  const api = useUserAPI()\n\n  const [orders, setOrders] = useState<OrdersData>()\n\n  useCustomDCEffect(() => {\n\n    if (!acc || !api) {\n      return\n    }\n\n    let mounted = true\n\n    const exit = (id: any) => {\n      mounted = false\n      clearInterval(id)\n    }\n\n    if (acc && acc.accountId > 0) {\n\n      const id: any = setInterval(async () => {\n        try {\n          const { raw_data } = (await api.getOrders({\n            accountId: acc.accountId\n          }, acc.apiKey))\n          if (mounted) {\n            setOrders(raw_data)\n          }\n        } catch (err) {\n          return exit(id)\n        }\n      }, REFRESH_RATE)\n\n      return exit(id)\n\n    }\n  }, [acc, api])\n\n  return {\n    orders,\n  }\n\n}\n\nexport function useGetUserBalancesByToken(token: any) {\n\n  const api = useUserAPI()\n\n  //const [balance, setBalance] = useState<any>({total: '0', locked: '0', availableInWei: '0'})\n\n  const [balance, setBalance] = useState<any>('0')\n\n  const { apiKey, accountId } = useAccount()\n\n  // console.log('enter! useGetUserBalances tokens:', tokens, 'symbol:', symbol, 'apiKey:', apiKey, ' accountId:', accountId )\n\n  useCustomDCEffect(() => {\n    if (!api || !apiKey || !accountId || !token) {\n      return\n    }\n\n    api.getUserBalances({\n      accountId,\n      tokens: token.tokenId\n    }, apiKey).then((data) => {\n      const total = fm.toBig(data.userBalances[token.tokenId].total)\n      const locked = fm.toBig(data.userBalances[token.tokenId].locked)\n      const availableInWei = total.minus(locked)\n      /*\n      setBalance({\n        total: data[0].total, \n        locked: data[0].locked, \n        availableInWei: availableInWei.toString(),\n        available: fromWEI(tokens, symbol, availableInWei)\n      })\n      */\n      setBalance(availableInWei.toString())\n    }).catch((reason: any) => {\n      dumpError400(reason, 'getUserBalances tokenId:' + token.tokenId)\n    })\n\n  }, [api, apiKey, accountId, token,])\n\n  return {\n    balance,\n    setBalance,\n  }\n\n}\n\nexport function useGetUserBalances(tokens: any, toList: boolean = false) {\n\n  const api = useUserAPI()\n\n  //const [balance, setBalance] = useState<any>({total: '0', locked: '0', availableInWei: '0'})\n\n  const [balances, setBalances] = useState<any>(undefined)\n\n  const { apiKey, accountId } = useAccount()\n\n  // console.log('enter! useGetUserBalances tokens:', tokens, 'symbol:', symbol, 'apiKey:', apiKey, ' accountId:', accountId )\n\n  useCustomDCEffect(() => {\n\n    if (!api || !apiKey || !accountId || !tokens) {\n      return\n    }\n\n    let tokenList: any[] = []\n\n    const keys = Reflect.ownKeys(tokens)\n\n    let tokenMap: any = {}\n\n    keys.forEach((item: any) => {\n      const token = tokens[item]\n      tokenList.push(token.tokenId)\n      tokenMap[token.tokenId] = token\n    })\n\n    api.getUserBalances({\n      accountId,\n      tokens: tokenList.join(',')\n    }, apiKey).then((data) => {\n\n      let balances: any = {\n        map: tokenMap,\n        tokenId: {},\n        symbol: {},\n      }\n\n      data.raw_data.forEach((item: any) => {\n        const total = fm.toBig(item.total)\n        const locked = fm.toBig(item.locked)\n        const availableInWei = total.minus(locked)\n\n        console.log('item:', item)\n\n        const token = tokenMap[item.tokenId]\n\n        balances.tokenId[item.tokenId] = availableInWei.toString()\n        balances.symbol[token.symbol] = availableInWei.toString()\n      })\n\n      setBalances(balances)\n\n    }).catch((reason: any) => {\n      dumpError400(reason, 'getUserBalances tokenId:' + tokens.tokenId)\n    })\n\n  }, [api, apiKey, accountId, tokens,])\n\n  return {\n    balances,\n    setBalances,\n  }\n\n}\n\nexport function useGetUserBalance(tokens: any, symbol: any) {\n\n  const api = useUserAPI()\n\n  //const [balance, setBalance] = useState<any>({total: '0', locked: '0', availableInWei: '0'})\n\n  const [balance, setBalance] = useState<any>('0')\n\n  const { apiKey, accountId } = useAccount()\n\n  useCustomDCEffect(() => {\n    if (!api || !apiKey || !accountId || !tokens || !symbol) {\n      return\n    }\n\n    const tokenInfo = getToken(tokens, symbol)\n\n    api.getUserBalances({\n      accountId,\n      tokens: tokenInfo.tokenId\n    }, apiKey).then((data) => {\n      const total = fm.toBig(data.userBalances[tokenInfo.tokenId].total)\n      const locked = fm.toBig(data.userBalances[tokenInfo.tokenId].locked)\n      const availableInWei = total.minus(locked)\n      \n      setBalance(availableInWei.toString())\n\n    }).catch((reason: any) => {\n      dumpError400(reason, 'getUserBalances tokenId:' + tokens.tokenId)\n    })\n\n  }, [api, apiKey, accountId, tokens, symbol,])\n\n  return {\n    balance,\n    setBalance,\n  }\n\n}","import React, { useCallback } from 'react'\n\nimport { useTranslation, WithTranslation, withTranslation } from 'react-i18next'\n\nimport {\n    gatewayList as DefaultGatewayList,\n    headerMenuData, HeaderMenuTabStatus,\n    headerToolBarData, HeadMenuTabKey,\n    ButtonComponentsMap, LanguageKeys,\n    WalletStatus, HideIcon,\n    GatewayItem, ViewIcon, ThemeKeys, LockIcon, UnLockIcon,\n} from '@loopring-web/component-lib/src/static-resource'\n\nimport { useAccount, useUnlock, useConnect, } from 'stores/account/hook'\n\nimport { getShortAddr } from 'utils/web3_tools'\n\nimport { AccountStatus } from 'state_machine/account_machine_spec'\n\nimport { useCustomDCEffect } from 'hooks/common/useCustomDCEffect'\n\nimport { Theme, } from 'defs/common_defs'\n\nimport { Button, SwapProps, useOpenModals, useSettings } from '@loopring-web/component-lib'\n\nimport store from 'stores'\n\nimport { ConnectorNames } from 'loopring-sdk'\nimport { IconButton, Typography } from '@material-ui/core';\nimport { AccountInfoProps } from '@loopring-web/component-lib/components/block';\nimport { useEtherscan } from 'hooks/web3/useWeb3'\n\nimport { useModals } from 'hooks/modal/useModals'\n\nimport {useState } from 'react'\nimport Web3 from 'web3'\n\nimport { AmmData, AmmInData, CoinInfo, CoinMap, IBData, TradeCalcData, WalletCoin, WalletMap, } from '@loopring-web/component-lib/static-resource'\nimport { AmmProps } from '@loopring-web/component-lib'\n\nimport { useExchangeAPI, useUserAPI } from 'hooks/exchange/useApi'\n\nimport { fromWEI, getIcon } from 'utils/swap_calc_utils'\nimport { useWeb3Account } from 'stores/account/hook'\nimport { useGetExchangeInfo, useGetTokens } from 'hooks/exchange/useExchangeAPI'\n\nimport * as contract from 'loopring-sdk'\n\nimport { Lv2Account } from 'defs/account_defs'\n\nimport {\n    ExchangeAPI,\n    dumpError400,\n    GetNextStorageIdRequest,\n    GetOffchainFeeAmtRequest,\n    OffchainFeeReqType,\n    OffChainWithdrawalRequestV3,\n    OriginTransferRequestV3,\n    TokenInfo,\n    VALID_UNTIL,\n} from 'loopring-sdk'\n\nimport { useGetUserBalances } from 'hooks/exchange/useUserAPI'\n\nimport {\n    DepositProps,\n    ResetProps,\n    SwitchData,\n    TradeBtnStatus,\n    TransferProps,\n    WithdrawProps,\n} from '@loopring-web/component-lib'\n\nimport { WithdrawType, WithdrawTypes } from '@loopring-web/component-lib/src/static-resource'\nimport { ButtonProps } from '@loopring-web/component-lib/components/basic-lib/index';\nimport { CoinType } from '@loopring-web/component-lib/static'\n\nexport const useHeader = () => {\n    const { i18n,t } = useTranslation(['common','layout'])\n    const { setTheme,themeMode,language, setLanguage } = useSettings();\n    const { ShowDeposit } = useModals()\n    const { modals:{isShowAccountInfo,isShowConnect},setShowConnect, setShowAccountInfo }  = useOpenModals()\n    // const [open, setOpen] = React.useState(false)\n\n    const [openConnect, setOpenConnect] = React.useState(false)\n\n    const forceUpdate = React.useReducer((bool) => !bool, false)[1]\n    const { account } = useAccount()\n\n    const { lock, unlock } = useUnlock()\n\n    const { connect } = useConnect()\n\n    const { etherscanUrl } = useEtherscan()\n\n    const gatewayList: GatewayItem[] = [\n        {\n            ...DefaultGatewayList[0],\n            handleSelect: () => {\n                console.log('try to connect to ', ConnectorNames.Injected)\n                connect(ConnectorNames.Injected, true)\n                // setOpen(false)\n            }\n        },\n        /*\n        {\n            key: ConnectorNames.WalletConnect,\n            imgSrc: '',\n            handleSelect: () => {\n                connect(ConnectorNames.WalletConnect)\n                setOpen(false)\n            }\n        },\n        {\n            key: ConnectorNames.Ledger,\n            imgSrc: '',\n            handleSelect: () => {\n                connect(ConnectorNames.Ledger)\n                setOpen(false)\n            }\n        },\n        {\n            key: ConnectorNames.Trezor,\n            imgSrc: '',\n            handleSelect: () => {\n                connect(ConnectorNames.Trezor)\n                setOpen(false)\n            }\n        },\n        */\n    ]\n    // const [showAccountInfo, setShowAccountInfo] = React.useState(account?.accAddr ? true : false)\n    const [accountInfoProps, setAccountInfoProps] = React.useState<undefined|AccountInfoProps>(undefined)\n    //const theme: any = useTheme()\n\n    const onNotification = React.useCallback(async () => {\n        console.log('onNotification click')\n    }, [])\n\n    const onWalletBtnConnect = React.useCallback(async () => {\n        const acc = store.getState().account\n        console.log(`onWalletBtnConnect click: ${acc.status}`)\n\n        switch (acc.status) {\n            case AccountStatus.NOACCOUNT:\n                ShowDeposit(true)\n                break\n            case AccountStatus.UNCONNNECTED:\n                setShowConnect({isShow:true})\n                // setOpen(true)\n                break\n            case AccountStatus.CONNECTED:\n            case AccountStatus.LOCKED:\n            case AccountStatus.ACTIVATED:\n                setShowAccountInfo({isShow:true})\n                break\n            default:\n                // console.log('setOpenConnect(true)')\n                // setOpenConnect(true)\n                break\n        }\n    }, [setShowConnect, lock, unlock, ShowDeposit])\n\n    const onThemeBtnClick = React.useCallback(async (themeMode:ThemeKeys) => {\n        if (themeMode === Theme.dark) {\n            setTheme(Theme.light)\n        } else {\n            setTheme(Theme.dark)\n        }\n    }, [setTheme])\n\n    const onLangBtnClick = (lang: LanguageKeys) => {\n        //i18n.changeLanguage(lang);\n        setLanguage(lang);\n    }\n\n    // const [advanceOpen,setAdvanceOpen] = React.useState(false)\n\n    // const handleViewAccountInfo =  React.useCallback((event: React.MouseEvent) => {\n    //     event.stopPropagation();\n    //     event.preventDefault();\n    //     if (showAccountInfo) {\n    //         // headerMenuData[ NavListIndex.layer2 ].iconBtn.view = false;\n    //         setShowAccountInfo(false);\n    //     } else {\n    //         // headerMenuData[ NavListIndex.layer2 ].iconBtn.view = true;\n    //         setShowAccountInfo(true);\n    //     }\n    // },[setShowAccountInfo, showAccountInfo])\n\n    // useCustomCompareEffect(()=>{\n    //     if(language!==i18n.language)  {\n    //         headerToolBarData[ButtonComponentsMap.Language] = { ...headerToolBarData[ButtonComponentsMap.Language], language: i18n.language}\n    //     }\n    // },[language],(prevDeps,curDeps)=> prevDeps!== curDeps)\n    //init componment\n    useCustomDCEffect(() => {\n\n\n        headerToolBarData[ButtonComponentsMap.WalletConnect] = {\n            ...headerToolBarData[ButtonComponentsMap.WalletConnect],\n            handleClick: onWalletBtnConnect,\n        }\n\n        // headerToolBarData[ButtonComponentsMap.Notification] = { ...headerToolBarData[ButtonComponentsMap.Theme], themeMode: theme.mode, handleClick: onNotification }\n        // headerToolBarData.update(ButtonComponentsMap.WalletConnect,value=>{\n        //   return {...value, handleClick:onWalletBtnConnect}});\n        headerToolBarData[ButtonComponentsMap.Theme] = { ...headerToolBarData[ButtonComponentsMap.Theme], themeMode, handleClick: onThemeBtnClick }\n        // headerToolBarData.update(ButtonComponentsMap.Theme,value=>{\n        //   return {...value, themeMode:theme.mode, handleClick:onThemeBtnClick}});\n\n        headerToolBarData[ButtonComponentsMap.Language] = { ...headerToolBarData[ButtonComponentsMap.Language], handleChange: onLangBtnClick }\n        // headerToolBarData.update(ButtonComponentsMap.Language,value=>{\n        //  return  {...value, language:i18n.language, handleClick:onThemeBtnClick}});\n    }, [themeMode, language, i18n, onWalletBtnConnect, onThemeBtnClick, onLangBtnClick, onNotification, t]);\n\n\n    const UnlockBtn = ({onClick}:{onClick:({...props}:any)=>void})=>{\n        return <Button className={'unlock'}  startIcon={<LockIcon fontSize={'large'}/>}  \n        onClick={(event)=>{unlock(account)}} variant={'outlined'} >\n            <Typography variant={'body2'} marginTop={1/2}>   {t('labelUnLock')} </Typography>\n        </Button>\n    }\n    const LockBtn = ({onClick}:{onClick:({...props}:any)=>void})=>{\n        return  <Button className={'lock'}  startIcon={<UnLockIcon fontSize={'large'}/>} \n        onClick={(event) => { lock(account) } } variant={'outlined'} >\n            <Typography variant={'body2'} marginTop={1/2}>  {t('labelLock')} </Typography>\n        </Button>\n    }\n\n\n    useCustomDCEffect(() => {\n\n        if (!account) {\n            console.log('account'+account+'* exit')\n            setAccountInfoProps(undefined)\n            return\n        }\n\n        const { status } = account\n\n        const addr = getShortAddr(account?.accAddr)\n\n\n\n        // if((addr && accountInfoProps && accountInfoProps.address !== addr) || addr ){\n        //     //TODO getAccount detail info\n        //\n        // }else if(addr) {\n        //     setAccountInfoProps(undefined)\n        // }\n\n        const updateHeaderMenuWhenHasAccountInfo =  ({status}:{status:keyof  typeof AccountStatus})=>{\n            headerMenuData[HeadMenuTabKey.Layer2] = {\n                ...headerMenuData[HeadMenuTabKey.Layer2],\n                status: HeaderMenuTabStatus.default\n            }\n            let props;\n            if(status === AccountStatus.ACTIVATED) {\n                props = {\n                    addressShort: addr?addr:'',\n                    address: account?.accAddr,\n                    level: 'VIP 1',\n                    etherscanLink: etherscanUrl + account?.accAddr,\n                    //TODO: changed by account status\n                    mainBtn: <LockBtn onClick={(event)=>{console.log(event) }}/>,\n                    connectBy:''\n                }\n                setShowAccountInfo({isShow:false})\n            }else if(status === AccountStatus.LOCKED) {\n                props = {\n                    addressShort: addr?addr:'',\n                    address: account?.accAddr,\n                    level: 'VIP 1',\n                    etherscanLink: etherscanUrl + account?.accAddr,\n                    //TODO: changed by account status\n                    mainBtn: <UnlockBtn onClick={(event)=>{console.log(event) }}/>,\n                    connectBy:''\n                }\n                setShowAccountInfo({isShow:true})\n            }else if(status === AccountStatus.UNACTIVATED\n                || status === AccountStatus.NOACCOUNT\n                || status === AccountStatus.DEPOSITING\n                || status === AccountStatus.DEPOSIT_TO_CONFIREM\n                || status === AccountStatus.ARPROVING\n                || status === AccountStatus.APPROV_TO_CONFIRM\n            )  {\n                props = {\n                    addressShort: addr?addr:'',\n                    address: account?.accAddr,\n                    //TODO: level\n                    level: 'VIP 1',\n                    etherscanLink: etherscanUrl + account?.accAddr,\n                    //TODO: changed by account status\n                    connectBy:''\n                }\n                setShowAccountInfo({isShow:false})\n            } else  {\n                setShowAccountInfo({isShow:false})\n            }\n\n\n            setAccountInfoProps(props)\n            // setShowAccountInfo(true);\n        }\n        switch (status) {\n            case AccountStatus.UNCONNNECTED:\n                headerToolBarData[ButtonComponentsMap.WalletConnect] = {\n                    ...headerToolBarData[ButtonComponentsMap.WalletConnect],\n                    label: 'Connect Wallet',\n                    status: WalletStatus.default\n                }\n                headerMenuData[HeadMenuTabKey.Layer2] = {\n                    //TODO:  HeaderMenuTabStatus.hidden\n                    ...headerMenuData[HeadMenuTabKey.Layer2], status: HeaderMenuTabStatus.hidden\n                }\n                setShowAccountInfo({isShow:false})\n                break\n            case AccountStatus.LOCKED:\n                headerToolBarData[ButtonComponentsMap.WalletConnect] = {\n                    ...headerToolBarData[ButtonComponentsMap.WalletConnect],\n                    label: addr,\n                    status: WalletStatus.connect\n                };\n\n                updateHeaderMenuWhenHasAccountInfo({status});\n                break\n            case AccountStatus.ACTIVATED:\n                headerToolBarData[ButtonComponentsMap.WalletConnect] = {\n                    ...headerToolBarData[ButtonComponentsMap.WalletConnect],\n                    label: addr,\n                    status: WalletStatus.unlock\n                }\n\n                updateHeaderMenuWhenHasAccountInfo({status});\n                break\n            case AccountStatus.UNACTIVATED:\n            case AccountStatus.NOACCOUNT:\n                headerToolBarData[ButtonComponentsMap.WalletConnect] = {\n                    ...headerToolBarData[ButtonComponentsMap.WalletConnect],\n                    // TODO got cache address if no show Connect Wallet\n                    label: addr,\n                    status: WalletStatus.noAccount\n                }\n\n                updateHeaderMenuWhenHasAccountInfo({status});\n                break\n            case AccountStatus.DEPOSITING:\n            case AccountStatus.DEPOSIT_TO_CONFIREM:\n            case AccountStatus.ARPROVING:\n            case AccountStatus.APPROV_TO_CONFIRM:\n                headerToolBarData[ButtonComponentsMap.WalletConnect] = {\n                    ...headerToolBarData[ButtonComponentsMap.WalletConnect],\n                    label: addr,\n                    status: WalletStatus.accountPending\n                }\n                updateHeaderMenuWhenHasAccountInfo({status});\n\n                break\n        }\n        forceUpdate()\n    }, [account, etherscanUrl, setAccountInfoProps])\n\n    return {\n        headerToolBarData,\n        headerMenuData,\n        gatewayList,\n        isShowConnect,\n        isShowAccountInfo,\n        setShowAccountInfo,\n        setShowConnect,\n        // open,\n        // setOpen,\n        // openConnect,\n        // setOpenConnect,\n        account,\n        accountInfoProps,\n\n    }\n\n}\n\nexport function useCoinMap(exchangeApi: ExchangeAPI, tokens: any) {\n\n    const [coinMap, setCoinMap] = useState<CoinMap<any, CoinInfo<any>>>({})\n\n    useCustomDCEffect(async () => {\n\n        if (!exchangeApi || !tokens) {\n            return\n        }\n\n        const keys = Reflect.ownKeys(tokens)\n\n        let coinMap: CoinMap<any, CoinInfo<any>> = {}\n\n        keys.forEach((key: any) => {\n\n            if (!(key as string).startsWith('LP-')) {\n                coinMap[ key ] = {\n                    icon: getIcon(key, tokens),\n                    name: key,\n                    simpleName: key,\n                    description: '',\n                    company: '',\n                }\n            }\n\n        })\n\n        setCoinMap(coinMap)\n\n    }, [exchangeApi, tokens])\n\n    return {\n        coinMap,\n    }\n\n}\n\nexport function useLv1WalletMap(exchangeApi: ExchangeAPI, account: Lv2Account, tokens: any) {\n\n    const [walletMap, setWalletMap] = useState<WalletMap<any, WalletCoin<any>>>({})\n\n    useCustomDCEffect(async () => {\n\n        if (!exchangeApi || !account || !account.accAddr || !tokens) {\n            return\n        }\n\n        let walletMap: WalletMap<any, WalletCoin<any>> = {}\n\n        const {tokenBalances} = await exchangeApi.getTokenBalances({\n            owner: account.accAddr, token: ''\n        }, tokens)\n\n        const keys = Reflect.ownKeys(tokenBalances)\n\n        keys.forEach((item: any) => {\n            const balance = tokenBalances[ item ]\n            walletMap[ item ] = {\n                belong: item,\n                count: fromWEI(tokens, item, balance) as number,\n            }\n        })\n\n        setWalletMap(walletMap)\n\n    }, [exchangeApi, account, tokens])\n\n    return {\n        walletMap,\n    }\n\n}\n\nexport function useLv2WalletMap(tokens: any) {\n\n    const {balances} = useGetUserBalances(tokens)\n\n    const [walletMap, setWalletMap] = useState<WalletMap<any, WalletCoin<any>>>({})\n\n    useCustomDCEffect(() => {\n        let walletMap: WalletMap<any, WalletCoin<any>> = {}\n        if (balances && balances.symbol) {\n            const keys = Reflect.ownKeys(balances.symbol)\n\n            keys.forEach((item: any) => {\n                const balance = balances.symbol[ item ]\n                walletMap[ item ] = {\n                    belong: item,\n                    count: fromWEI(tokens, item, balance) as number,\n                }\n            })\n        }\n\n        console.log('lv2:', walletMap)\n\n        setWalletMap(walletMap)\n    }, [balances, tokens])\n\n    return {\n        walletMap,\n    }\n\n}\n\nexport function useChargeFeeList(tokenSymbol: string | undefined, requestType: OffchainFeeReqType) {\n\n    const api = useUserAPI()\n\n    const {accountId, apiKey,} = useAccount()\n\n    const [chargeFeeList, setChargeFeeList] = useState<any>([])\n\n    useCustomDCEffect(async () => {\n\n        console.log('!!!!!!!!!useCustomDCEffect useChargeFeeList:', tokenSymbol, accountId)\n\n        if (!accountId || !tokenSymbol) {\n            return\n        }\n\n        let chargeFeeList: any[] = []\n\n        try {\n\n            const request: GetOffchainFeeAmtRequest = {\n                accountId,\n                tokenSymbol,\n                requestType,\n            }\n\n            const response = await api.getOffchainFeeAmt(request, apiKey)\n\n            if (response) {\n                response.raw_data.fees.forEach((item: any, index: number) => {\n                    chargeFeeList.push({belong: item.token, fee: item.fee})\n                })\n\n                setChargeFeeList(chargeFeeList)\n            }\n            console.log('response:', response)\n\n        } catch (reason) {\n            dumpError400(reason)\n        }\n\n\n        setChargeFeeList(chargeFeeList)\n\n    }, [accountId, apiKey, tokenSymbol])\n\n    return {\n        chargeFeeList,\n    }\n\n}\n\nexport function useModalProps() {\n\n    const {\n        ShowDeposit,\n        ShowTransfer,\n        ShowWithdraw,\n        ShowResetAccount,\n    } = useModals()\n\n    const {chainId, isConnected, connector,} = useWeb3Account()\n\n    const {exchangeInfo} = useGetExchangeInfo()\n\n    const {account, apiKey, accountId, eddsaKey,} = useAccount()\n\n    const {tokens: tokensAll} = useGetTokens()\n\n    const tokens = tokensAll?.tokenSymbolMap\n\n    const userApi = useUserAPI()\n\n    const exchangeApi = useExchangeAPI()\n\n    const {coinMap} = useCoinMap(exchangeApi, tokens)\n\n    const {walletMap: walletMap_Lv1} = useLv1WalletMap(exchangeApi, account, tokens)\n\n    const {walletMap: walletMap_Lv2} = useLv2WalletMap(tokens)\n\n    const deposit = useCallback(async (token: string, amt: any) => {\n\n        if (!tokens || !isConnected || !connector || !exchangeInfo?.exchangeAddress || !exchangeInfo?.depositAddress) {\n            console.log(`exchangeInfo:${exchangeInfo} deposit exit!!!!!`)\n            return\n        }\n\n        try {\n            const tokenInfo: TokenInfo = tokens[ token ]\n\n            const provider = await connector.getProvider()\n            const web3 = new Web3(provider as any)\n\n            let sendByMetaMask = account.connectName === ConnectorNames.Injected\n            sendByMetaMask = true\n\n            const gasPrice = (await exchangeApi.getGasPrice()).gasPrice / 1e+9\n            const gasLimit = 350000\n\n            const nonce = await contract.getNonce(web3, account.accAddr)\n\n            console.log('gasPrice:', gasPrice)\n            console.log('account.connectName:', account.connectName, ' tokenInfo:', tokenInfo)\n\n            const response = await contract.approveMax(web3, account.accAddr, tokenInfo.address,\n                exchangeInfo?.depositAddress, gasPrice, gasLimit, chainId, nonce, sendByMetaMask)\n\n            console.log('response:', response)\n\n            const fee = 0\n\n            const response2 = await contract.deposit(web3, account.accAddr,\n                exchangeInfo?.exchangeAddress, tokenInfo, amt, fee,\n                gasPrice, gasLimit, chainId, nonce + 1, sendByMetaMask)\n\n            console.log('response2:', response2)\n\n\n        } catch (reason) {\n            dumpError400(reason)\n        }\n\n    }, [chainId, isConnected, connector, account, exchangeInfo, tokens, exchangeApi])\n\n    const withdraw = useCallback(async (token: string, amt: any) => {\n\n        console.log('withdraw apiKey:', apiKey, ' exchangeInfo:', exchangeInfo, ' exchangeAddr:', exchangeInfo.exchangeAddress)\n\n        if (!account || !account.accountId || !account.accAddr\n            || !connector || !chainId || !apiKey || !exchangeInfo\n            || !exchangeInfo.exchangeAddress) {\n            console.log('return directly!!!!!', account, connector, chainId, apiKey, exchangeInfo)\n            return\n        }\n\n        amt = '5500000000000000000'\n\n        const fee = '5500000000000000000'\n\n        console.log('exchangeAddress:', exchangeInfo.exchangeAddress)\n\n        try {\n\n            const request: GetNextStorageIdRequest = {\n                accountId: account.accountId,\n                sellTokenId: 1\n            }\n\n            const storageId = await userApi.getNextStorageId(request, apiKey)\n\n            const request2: OffChainWithdrawalRequestV3 = {\n                exchange: exchangeInfo.exchangeAddress,\n                owner: account.accAddr,\n                to: account.accAddr,\n                accountId: account.accountId,\n                storageId: storageId.offchainId,\n                token: {\n                    tokenId: '1',\n                    volume: '100000000000000000000',\n                },\n                maxFee: {\n                    tokenId: '1',\n                    volume: '9400000000000000000',\n                },\n                extraData: '',\n                minGas: 0,\n                validUntil: VALID_UNTIL,\n            }\n\n            const provider = await connector.getProvider()\n            const web3 = new Web3(provider as any)\n\n            const response = await userApi.submitOffchainWithdraw(request2, web3, chainId, ConnectorNames.Injected,\n                account.eddsaKey, apiKey, false)\n\n            console.log(response)\n\n        } catch (reason) {\n            dumpError400(reason)\n        }\n\n    }, [apiKey, account, connector, exchangeInfo, chainId, userApi])\n\n    const transfer = useCallback(async (amt: number, payeeAddr: string = '0xb6AdaC3e924B4985Ad74646FEa3610f14cDFB79c') => {\n\n        if (!connector || !apiKey || !chainId || !accountId || !account?.accAddr) {\n            return\n        }\n\n        const request: GetNextStorageIdRequest = {\n            accountId,\n            sellTokenId: 1\n        }\n        const storageId = await userApi.getNextStorageId(request, apiKey)\n\n        console.log(`amt: ${amt} storageId:${JSON.stringify(storageId)}`)\n\n        try {\n\n            const provider = await connector.getProvider()\n            const web3 = new Web3(provider as any)\n\n            let walletType = account.connectName\n            walletType = ConnectorNames.Injected\n\n            const payeeAcc = await exchangeApi.getAccount({owner: payeeAddr})\n\n            let payeeId = 0\n            if (payeeAcc) {\n                payeeId = payeeAcc.accInfo.accountId\n            }\n\n            const request2: OriginTransferRequestV3 = {\n                exchange: exchangeInfo.exchangeAddress,\n                payerAddr: account.accAddr,\n                payerId: accountId,\n                payeeAddr,\n                payeeId,\n                storageId: storageId.offchainId,\n                token: {\n                    tokenId: '1',\n                    volume: '100000000000000000000',\n                },\n                maxFee: {\n                    tokenId: '1',\n                    volume: '9400000000000000000',\n                },\n                validUntil: VALID_UNTIL,\n            }\n\n            console.log(`request2:${JSON.stringify(request2)}`)\n\n            const response = await userApi.submitInternalTransfer(request2, web3, chainId, walletType,\n                eddsaKey, apiKey, false)\n\n            console.log(response)\n\n        } catch (reason) {\n            dumpError400(reason)\n        }\n\n    }, [apiKey, accountId, account, connector, exchangeInfo, chainId, eddsaKey, userApi, exchangeApi])\n\n    const [depositValue, setDepositValue] = useState<IBData<any>>({\n        belong: undefined,\n        tradeValue: 0,\n        balance: 0\n    } as IBData<unknown>)\n\n    // deposit\n\n    let depositProps: DepositProps<any, any> = {\n        tradeData: {belong: undefined},\n        coinMap: coinMap,\n        walletMap: walletMap_Lv1,\n        depositBtnStatus: TradeBtnStatus.AVAILABLE,\n        onDepositClick: (tradeData: any) => {\n            console.log('1. onDepositClick', depositValue)\n            if (depositValue && depositValue.belong) {\n                deposit(depositValue.belong.toString(), depositValue.tradeValue)\n            }\n            ShowDeposit(false)\n        },\n        handlePanelEvent: async (data: SwitchData<any>, switchType: 'Tomenu' | 'Tobutton') => {\n            return new Promise((res) => {\n                if (data?.tradeData?.belong) {\n                    if (depositValue !== data.tradeData) {\n                        setDepositValue(data.tradeData)\n                    }\n                    setTokenSymbol(data.tradeData.belong)\n                } else {\n                    setDepositValue({belong: undefined, tradeValue: 0, balance: 0} as IBData<unknown>)\n                }\n                res();\n            })\n        },\n    }\n\n    // withdraw\n    const [withdrawValue, setWithdrawValue] = useState<IBData<any>>({\n        belong: undefined,\n        tradeValue: 0,\n        balance: 0\n    } as IBData<unknown>);\n\n    const [tokenSymbol, setTokenSymbol] = useState<string>('')\n    const {chargeFeeList: withdrawalFeeList} = useChargeFeeList(tokenSymbol, OffchainFeeReqType.OFFCHAIN_WITHDRAWAL)\n\n    let withdrawProps: WithdrawProps<any, any> = {\n        tradeData: {belong: undefined},\n        coinMap: coinMap,\n        walletMap: walletMap_Lv2,\n        withdrawBtnStatus: TradeBtnStatus.AVAILABLE,\n        onWithdrawClick: (tradeData: any) => {\n            console.log('Swap button click', withdrawValue)\n            if (withdrawValue && withdrawValue.belong) {\n                withdraw(withdrawValue.belong.toString(), withdrawValue.tradeValue)\n            }\n            ShowWithdraw(false)\n        },\n\n        handlePanelEvent: async (data: SwitchData<any>, switchType: 'Tomenu' | 'Tobutton') => {\n            return new Promise((res: any) => {\n                if (data?.tradeData?.belong) {\n                    if (withdrawValue !== data.tradeData) {\n                        setWithdrawValue(data.tradeData)\n                    }\n                    setTokenSymbol(data.tradeData.belong)\n                } else {\n                    setWithdrawValue({belong: undefined, tradeValue: 0, balance: 0} as IBData<unknown>);\n                }\n                res();\n            })\n        },\n        withdrawType: WithdrawType.Fast,\n        withdrawTypes: WithdrawTypes,\n        chargeFeeToken: 'ETH',\n        chargeFeeTokenList: withdrawalFeeList,\n        handleOnAddressChange: (value: any) => {\n            console.log('handleOnAddressChange', value);\n        },\n        handleAddressError: (_value: any) => {\n            return {error: true, message: 'any error'}\n        }\n    }\n    // console.log(coinMap)\n    // transfer\n    const [transferValue, setTransferValue] = useState<IBData<any>>({\n        belong: undefined,\n        tradeValue: 0,\n        balance: 0\n    } as IBData<unknown>)\n\n    const [transferTokenSymbol, setTransferTokenSymbol] = useState<string>('')\n    const {chargeFeeList: transferFeeList} = useChargeFeeList(transferTokenSymbol, OffchainFeeReqType.TRANSFER)\n\n    let transferProps: TransferProps<any, any> = {\n        tradeData: {belong: undefined},\n        coinMap: coinMap,\n        walletMap: walletMap_Lv2,\n        transferBtnStatus: TradeBtnStatus.AVAILABLE,\n        onTransferClick: (tradeData: any) => {\n            console.log('onTransferClick:', transferValue);\n            if (transferValue && transferValue.belong) {\n                transfer(transferValue.tradeValue)\n            }\n\n            ShowTransfer(false)\n        },\n\n        handlePanelEvent: async (data: SwitchData<any>, switchType: 'Tomenu' | 'Tobutton') => {\n            return new Promise((res: any) => {\n                if (data?.tradeData?.belong) {\n                    if (transferValue !== data.tradeData) {\n                        setTransferValue(data.tradeData)\n                    }\n                    setTransferTokenSymbol(data.tradeData.belong)\n                } else {\n                    setTransferValue({belong: undefined, tradeValue: 0, balance: 0} as IBData<unknown>)\n                }\n                // else{\n                //     setTransferValue({ belong: undefined, amt: 0 })\n                // }\n\n                res();\n            })\n        },\n\n        chargeFeeToken: 'ETH',\n        chargeFeeTokenList: transferFeeList,\n        handleOnAddressChange: (value: any) => {\n            console.log('handleOnAddressChange', value);\n        },\n        handleAddressError: (_value: any) => {\n            return {error: true, message: 'any error'}\n        }\n    }\n\n    // reset\n    const [resetValue, setResetValue] = useState<IBData<any>>({\n        belong: undefined,\n        tradeValue: 0,\n        balance: 0\n    } as IBData<unknown>)\n\n\n    let resetProps: ResetProps<any, any> = {\n        tradeData: {belong: undefined},\n        coinMap: coinMap,\n        walletMap: walletMap_Lv2,\n        resetBtnStatus: TradeBtnStatus.AVAILABLE,\n        onResetClick: (tradeData: any) => {\n            console.log('onResetClick', resetValue)\n            if (resetValue && resetValue.belong) {\n            }\n\n            ShowResetAccount(false)\n        },\n        handlePanelEvent: async (data: SwitchData<any>, switchType: 'Tomenu' | 'Tobutton') => {\n            return new Promise((res) => {\n                if (data?.tradeData?.belong) {\n                    if (resetValue !== data.tradeData) {\n                        setResetValue(data.tradeData)\n                    }\n                } else {\n                    setResetValue({belong: undefined, tradeValue: 0, balance: 0} as IBData<unknown>)\n                }\n\n                res();\n            })\n        },\n        fee: {count: 234, price: 123}\n    }\n\n     const tradeCalcData: TradeCalcData<CoinType> = {\n        coinSell: 'ETH', //name\n        coinBuy: 'LRC',\n        BtoS: 0,\n        StoB: 0,\n        sellCoinInfoMap: coinMap,\n        buyCoinInfoMap: coinMap,\n        walletMap: {},\n        slippage: 0.5,\n        slippageTolerance: [0.1, 0.5, 1, 'slippage:N'],\n        priceImpact: '12',\n        minimumReceived: '1%',\n        fee: '1%'\n    }\n     const ammCalcData: AmmInData<CoinType> = {\n        myCoinA: {belong:'ETH',balance:1000,tradeValue:0},\n        myCoinB: {belong:'LRC',balance:1000,tradeValue:0},\n        AtoB:50,\n        coinInfoMap: coinMap,\n        slippage: 0.5,\n        slippageTolerance: [0.1, 0.5, 1, 'slippage:N'],\n        fee: '1%'\n    }\n\n\n    let swapProps: SwapProps<IBData<string>, string, any> = {\n        tradeData: undefined,\n        tradeCalcData,\n        onSwapClick: (tradeData) => {\n            console.log('Swap button click', tradeData);\n        },\n        handleSwapPanelEvent: async (data: any, switchType: any) => {\n            console.log(data, switchType)\n        },\n    };\n    let ammProps: AmmProps<AmmData<IBData<any>>, any, AmmInData<any>> = {\n        ammDepositData:{coinA: {belong: 'ETH',balance:0.3,tradeValue:0}, coinB:  {belong: 'LRC',balance:1000,tradeValue:0},slippage: '',},\n        ammWithdrawData:{coinA: {belong: 'ETH',balance:0.3,tradeValue:0}, coinB:  {belong: 'LRC',balance:1000,tradeValue:0},slippage: '',},\n        // tradeCalcData,\n        ammCalcData:ammCalcData,\n        handleDepositEvent: (data,type) => {\n            console.log('handleDepositEvent',data,type) ;\n        },\n        handleWithDrawEvent:  (data,type) => {\n            console.log('handleWithDrawEvent',data,type) ;\n        },\n        onAmmWithdrawClick: (data)=>{\n            console.log('onAmmWithdrawClick',data) ;\n        },\n        onAmmDepositClick: (data)=>{\n            console.log('onAmmDepositClick',data) ;\n        }\n    }\n\n    return {\n        depositProps, withdrawProps, transferProps, resetProps, ammProps, swapProps,\n    }\n}\n","export function deepClone(data: any) {\n    if (!data || !(data instanceof Object) || (typeof data == \"function\")) {\n        return data || undefined\n    }\n    let constructor = data.constructor\n    let result = new constructor()\n    for (let key in data) {\n        if (data.hasOwnProperty(key)) {\n            result[key] = deepClone(data[key])\n        }\n    }\n    return result\n}\n\nexport function copyToClipBoard(text: string){ //复制到剪切板\n\n    if(document.execCommand){\n        var textarea =document.createElement('textarea')\n        document.body.appendChild(textarea)\n        textarea.value=text\n        textarea.select()\n        document.execCommand(\"Copy\")\n        document.body.removeChild(textarea)\n\t}\n\n\tif((window as any).clipboardData){\n        (window as any).clipboardData.setData(\"Text\", text)\n        return true\n    }\n\treturn false\n}","import { WithTranslation, withTranslation } from 'react-i18next';\nimport { Box, Modal } from '@material-ui/core';\nimport { ModalCloseButton, ModalContentStyled, ModalQRCode } from '@loopring-web/component-lib';\nimport React from 'react';\nimport { AccountInfo, AccountInfoProps } from '@loopring-web/component-lib';\n\nexport const ModalAccountInfo = withTranslation('common')(({\n                                                               onClose,\n                                                               open,\n                                                               t,\n                                                               ...rest\n                                                           }: { open:boolean, onClose:(e:any)=>void} & AccountInfoProps & WithTranslation) => {\n\n\n    return <Modal\n        open={open}\n        onClose={onClose}\n        aria-labelledby=\"Account information\"\n        aria-describedby=\"show layer2 address, unlock/locked loopring wallet, copy address\"\n    >\n        <ModalContentStyled style={{boxShadow: '24'}}>\n            <Box paddingTop={3} paddingBottom={3} display={'flex'} flexDirection={'column'} minWidth='var(--modal-width)'>\n                <ModalCloseButton onClose={onClose} {...{...rest, t}} />\n                <AccountInfo {...rest}/>\n            </Box>\n\n        </ModalContentStyled>\n    </Modal>\n})","import React, { useCallback, useState, } from 'react'\n\nimport {\n    Header as HeaderUI,\n    HideOnScroll,\n    ModalWalletConnect,\n    AccountInfo,\n    ModalCloseButton,\n} from '@loopring-web/component-lib'\n\nimport { headerRoot } from '@loopring-web/component-lib/src/static-resource'\n\nimport { useLocation } from 'react-router-dom'\n\nimport { Toolbar, Snackbar, Alert, } from '@material-ui/core'\n\nimport { useHeader } from './hook'\n\nimport { useDisconnect, } from 'stores/account/hook'\nimport { ModalPanel, ModalQRCode, } from '@loopring-web/component-lib';\nimport { useGetExchangeInfo } from 'hooks/exchange/useExchangeAPI'\nimport { useModalProps } from './hook'\n\nimport { copyToClipBoard } from 'utils/obj_tools'\nimport { ModalAccountInfo } from '../../pages/AccountPage';\nimport { useTranslation } from 'react-i18next';\n\nconst Header = ({ ...rest }: any) => {\n\n    const {\n        depositProps,\n        withdrawProps,\n        transferProps,\n        resetProps,\n        ammProps,\n        swapProps,\n    } = useModalProps()\n\n    const location = useLocation()\n\n    const {\n        headerToolBarData,\n        headerMenuData,\n        gatewayList,\n        isShowConnect,\n        isShowAccountInfo,\n        setShowAccountInfo,\n        // setShowAccountInfo,\n        setShowConnect,\n        // open,\n        // setOpen,\n        // openConnect,\n        // setOpenConnect,\n        account,\n        accountInfoProps,\n        // showAccountInfo\n    } = useHeader()\n\n    const { exchangeInfo } = useGetExchangeInfo()\n\n    const { disconnect } = useDisconnect()\n\n    const onSwitch = useCallback(() => {\n        setShowAccountInfo({isShow:false})\n        setShowConnect({isShow:true})\n    }, [setShowConnect,setShowAccountInfo])\n\n    const [openQRCode, setOpenQRCode] = useState(false)\n\n    const [copyToastOpen, setCopyToastOpen] = useState(false);\n    const {t} = useTranslation('commom')\n\n    const closeCopyToast = () => { setCopyToastOpen(false) }\n\n    return (<>\n        <Snackbar open={copyToastOpen} autoHideDuration={2500} onClose={closeCopyToast}>\n            <Alert onClose={closeCopyToast} severity=\"success\">\n                {t('Address Copied to Clipboard!')}\n        </Alert>\n        </Snackbar>\n\n        <ModalQRCode open={openQRCode} onClose={() => setOpenQRCode(false)} title={'ETH Address'}\n            description={account.accAddr} url={account.accAddr} />\n\n        <ModalPanel transferProps={transferProps} withDrawProps={withdrawProps} \n        depositProps={depositProps} resetProps={resetProps} ammProps={ammProps} swapProps={swapProps}/>\n\n        <HideOnScroll>\n            {process.env.NODE_ENV !== 'production' && JSON.stringify(account?.status)}\n            {process.env.NODE_ENV !== 'production' && ' exchangeAddress:' + JSON.stringify(exchangeInfo?.exchangeAddress)}\n\n            <HeaderUI {...rest} headerMenuData={headerMenuData} headerToolBarData={headerToolBarData}\n                selected={location.pathname === '/' ? headerRoot : location.pathname}></HeaderUI>\n\n        </HideOnScroll>\n        <Toolbar />\n\n        <ModalWalletConnect {...{ ...rest, gatewayList, open:isShowConnect.isShow, onClose: () => setShowConnect({isShow:false}) }} />\n        {<ModalAccountInfo\n            open={isShowAccountInfo.isShow}\n            onClose={() => {setShowAccountInfo({isShow:false})}}\n            onCopy={() => {\n                copyToClipBoard(account.accAddr);\n                setCopyToastOpen(true)\n            }}\n            onViewQRCode={() => {\n                setOpenQRCode(true)\n            }}\n            onDisconnect={() => {\n                disconnect();\n                setShowAccountInfo({isShow:false});\n            }}\n            onSwitch={onSwitch}\n            {...{...accountInfoProps, ...rest}}></ModalAccountInfo>}\n    </>)\n}\n\n\nexport default Header\n\n\n\n","import styled from '@emotion/styled/macro'\n\nimport { MarketBlock, QuoteTable, TablePaddingX } from '@loopring-web/component-lib'\n\nimport { WithTranslation, withTranslation } from 'react-i18next'\nimport { coinMap } from '@loopring-web/component-lib/static'\nimport { FloatTag } from '@loopring-web/component-lib/src/static-resource'\nimport { Box, Grid } from '@material-ui/core'\nimport { useQuote } from './hook'\n\nconst  RowStyled = styled(Grid)`\n      & .MuiGrid-root:not(:last-of-type) > div{\n        margin-right: ${({theme}) => theme.unit * 3}px;\n      }\n` as typeof Grid\nconst  TableWrapStyled = styled(Grid)`\n  &{\n    background-color: ${({theme}) => theme.colorBase.background().default};\n    ${({theme}) => theme.border.defaultFrame({c_key: 'blur', d_R: 1})};\n    .rdg{\n      height: 100%;\n    }\n  }\n  ${({theme}) => TablePaddingX({pLeft:theme.unit * 3,pRight:theme.unit * 3})}\n` as typeof Grid\n\nconst QuotePage = withTranslation('common')((rest: WithTranslation) => {\n\n    const { tickList, big4 } = useQuote()\n\n    const formattedRawData = tickList.map((o: any) => ({\n        pair: !!o[0].length ? {\n            first: o[0][0],\n            last: o[0][1]\n        }: {\n            first: '--',\n            last: '--'\n        },\n        lastPrice: Number.isFinite(o[2]) ? o[2] : '--',\n        change: Number.isFinite(o[3]) ? o[3] : '--',\n        high: Number.isFinite(o[4]) ? o[4] : '--',\n        low: Number.isFinite(o[5]) ? o[5] : '--',\n        volumn: Number.isFinite(o[6]) ? o[6] : '--'\n    }))\n    \n    let props: any = {\n        ...rest,\n        buyData: coinMap.ETH,\n        sellData: coinMap.LRC,\n        tradeFloat: {priceDollar: +123, priceYuan: 2343232, percent: '+15%', timeUnit: \"24h\",\n            volume: 112312312,\n            floatTag:FloatTag.increase},\n\n    }\n\n    const onVisibleRowsChange=(data: any) => {\n        console.log(data)\n    }\n\n    return <Box display={'flex'} flexDirection={'column'} flex={1}>\n\n        <RowStyled container >\n            <Grid item xs={3} >\n                <MarketBlock {...{...props,tradeFloat: {priceDollar: 123,priceYuan: 2343232, percent: '0%', timeUnit: \"24h\",floatTag:FloatTag.none}}} />\n            </Grid>\n            <Grid item xs={3} >\n                <MarketBlock {...{...props,tradeFloat: {priceDollar: 123,priceYuan: 2343232, percent: '-15%', timeUnit: \"24h\",floatTag:FloatTag.decrease}}} />\n            </Grid>\n            <Grid item xs={3} >\n                <MarketBlock {...{...props}}></MarketBlock>\n            </Grid>\n            <Grid item xs={3} >\n                <MarketBlock {...{...props}}></MarketBlock>\n            </Grid>\n        </RowStyled>\n        <TableWrapStyled container marginY={3} paddingY={2} flex={1}>\n            <Grid item xs={12} display={'flex'}>\n                <QuoteTable onVisibleRowsChange={onVisibleRowsChange} rawData={formattedRawData} {...{ ...rest }} />\n            </Grid>\n        </TableWrapStyled>\n    </Box>\n\n\n})\n\nexport default QuotePage\n","import { QuoteTableRawDataItem } from \"@loopring-web/component-lib\"\nimport { TickerData, toBig } from \"loopring-sdk\"\nimport { useExchangeAPI } from \"hooks/exchange/useApi\"\nimport { useCustomDCEffect } from \"hooks/common/useCustomDCEffect\"\n\nimport { useState } from \"react\"\n\nconst amtCol = 5\n\nexport function useQuote() {\n\n    const [tickList, setTickList] = useState<any>([])\n\n    const [big4, setBig4] = useState<any>([])\n\n    const exchangeApi = useExchangeAPI()\n\n    useCustomDCEffect(async() => {\n\n        if (!exchangeApi) {\n            return\n        }\n\n        let mounted = true\n\n        const refresh = async () => {\n\n            const { tickList } = await exchangeApi.getAllTickers()\n\n            let ticks: any[] = []\n\n            tickList.forEach((item: TickerData) => {\n                const item2: QuoteTableRawDataItem = {\n                    pair: {\n                        first: item.base as string,\n                        last: item.quote as string,\n                    },\n                    lastPrice: toBig(item.quote_token_volume).div(item.base_token_volume).toNumber(),\n                    change: (item.close - item.open) / item.open,\n                    high: item.high,\n                    low: item.low,\n                    volume: toBig(item.base_token_volume).toNumber(),\n                }\n                const rowData: any = [[item.base, item.quote], [item.close, item.close],\n                item.change, item.high, item.low, item.base_token_volume, item.base_token_volume, item.base, item.quote]\n                ticks.push(rowData)\n            })\n            \n            ticks = ticks.sort((a: any, b: any) => {\n                let res = 0\n                if (!isNaN(b[amtCol]) && !isNaN(a[amtCol])) {\n                    res = b[amtCol] - a[amtCol]\n                }\n\n                return res\n            })\n\n            if (mounted) {\n                setBig4(ticks.slice(0, 4))\n                setTickList(ticks)\n            }\n        }\n\n        await refresh()\n\n        /*\n\n        const handler = setInterval(async() => {\n            await refresh()\n        }, 3000)\n        */\n\n        return () => {\n            /*\n            if (handler) {\n                clearInterval(handler)\n            }\n            */\n            mounted = false\n        }\n\n    }, [exchangeApi])\n\n    return {\n        tickList,\n        big4,\n    }\n\n}\n","import { useCallback, useState } from 'react'\n\nimport { useExchangeAPI } from 'hooks/exchange/useApi'\nimport { useCustomDCEffect } from 'hooks/common/useCustomDCEffect'\n\nimport { TradingInterval, Candlestick, GetCandlestickRequest, GetDepthRequest, GetTickerRequest, dumpError400 } from 'loopring-sdk'\nimport { fromWEI } from 'utils/swap_calc_utils'\n\nimport { ChartUnit } from '@loopring-web/component-lib/static-resource'\n\nimport { ChartType } from '@loopring-web/component-lib'\n\nimport { TGItemData, TGItemJSXInterface, } from '@loopring-web/component-lib'\n\nimport { IGetDepthDataParams } from '@loopring-web/component-lib/components/charts/scaleAreaChart/data'\n\nconst toggleData: TGItemData[] = [\n  {\n    value: ChartType.Trend,\n    key: ChartType.Trend,\n    label: 'label' + ChartType.Trend\n  },\n  {\n    value: ChartType.Depth,\n    key: ChartType.Depth,\n    label: 'label' + ChartType.Depth\n  },\n]\n\nexport function useBasicInfo(props: any, t: any) {\n  const tgItemJSXs: TGItemJSXInterface[] = toggleData.map(({ value, label, key }) => {\n    return { value, tlabel: t(label), key, JSX: <>{t(label)}</> }\n  })\n\n  // console.log('useBasicInfo: ', props)\n\n  // const { base, quote, market, tokens } = props\n\n  const [chartType, setChartType] = useState<ChartType>(ChartType.Trend)\n  //\n  // const [change, setChange] = useState(0)\n  //\n  // const [volume, setVolume] = useState('')\n\n  const [chartUnit, setChartUnit] = useState(ChartUnit.D1)\n\n  const [originData, setOriginData] = useState<any>(undefined)\n\n  const handleChange = useCallback((_e: React.MouseEvent, value: any) => {\n    // Settings.setChartType(value)\n    console.log('handleChange:', value)\n    setOriginData(undefined)\n    setChartType(value)\n  }, [setOriginData, setChartType])\n\n  const exchangeApi = useExchangeAPI()\n\n  // useCustomDCEffect(async () => {\n  //\n  //   if (!exchangeApi || !market || !tokens || !quote) {\n  //     return\n  //   }\n  //\n  //   let mounted = true\n  //\n  //   try {\n  //\n  //     const request: GetTickerRequest = {\n  //       market: market.market,\n  //     }\n  //\n  //     const ticker = await exchangeApi.getTicker(request)\n  //     if (mounted) {\n  //\n  //       if (ticker.tickList[0].change) {\n  //         setChange(ticker.tickList[0].change)\n  //       }\n  //\n  //       if (ticker.tickList[0].base_token_volume) {\n  //         const baseVol = fromWEI(tokens.tokenSymbolMap, base, ticker.tickList[0].base_token_volume) as string\n  //         setVolume(baseVol)\n  //       }\n  //     }\n  //   }\n  //   catch (reason) {\n  //     dumpError400(reason, 'ChartPanel getCandlestick')\n  //   }\n  //\n  //   return () => {\n  //     mounted = false\n  //   }\n  //\n  // }, [exchangeApi, market, tokens, base,])\n\n  const tgItemJSXsPriceChart: TGItemJSXInterface[] = Object.keys(ChartUnit).reduce((pre, item) => {\n    // @ts-ignore\n    const tGItemData: TGItemData = { value: ChartUnit[item], key: ChartUnit[item], label: 'label' + ChartUnit[item] };\n    pre.push({ value: tGItemData.value, tlabel: t(tGItemData.label ? tGItemData.label : tGItemData.key), key: tGItemData.key, JSX: <>{t(tGItemData.label ? tGItemData.label : tGItemData.key)}</> })\n    return pre\n  }, [] as TGItemJSXInterface[])\n\n  // useCustomDCEffect(async () => {\n  //\n  //   let mounted = true\n  //\n  //   if (!exchangeApi || !market) {\n  //     return\n  //   }\n  //\n  //   if (chartType === ChartType.Trend) {\n  //     const request: GetCandlestickRequest = {\n  //       market: market.market,\n  //       interval: TradingInterval.min15,\n  //       limit: 96\n  //     }\n  //\n  //     try {\n  //       const candlesticks = await exchangeApi.getCandlestick(request)\n  //\n  //       if (mounted) {\n  //         const originData = candlesticks.candlesticks.map((item: Candlestick) => {\n  //           return {\n  //             timeStamp: item.timeStamp,\n  //             low: item.low,\n  //             high: item.high,\n  //             open: item.open,\n  //             close: item.close,\n  //             volume: item.quoteVol,\n  //           }\n  //         })\n  //         // console.log('candlesticks originData: ', originData)\n  //         setOriginData(originData)\n  //       }\n  //     }\n  //     catch (reason) {\n  //       dumpError400(reason, 'ChartPanel getCandlestick')\n  //     }\n  //\n  //   } else {\n  //     const request: GetDepthRequest = {\n  //       market: [market.market],\n  //     }\n  //\n  //     try {\n  //\n  //       const depth = await exchangeApi.getDepth(request)\n  //       console.log('depth:', depth)\n  //       if (mounted) {\n  //         const originData: IGetDepthDataParams = {\n  //           bidsPrices: depth.depth.bids_prices,\n  //           bidsAmtTotals: depth.depth.bids_amtTotals,\n  //           asksPrices: depth.depth.asks_prices,\n  //           asksAmtTotals: depth.depth.asks_amtTotals,\n  //         }\n  //         setOriginData(originData)\n  //       }\n  //\n  //     } catch (reason) {\n  //       dumpError400(reason)\n  //     }\n  //\n  //   }\n  //\n  //   return () => {\n  //     mounted = false\n  //   }\n  //\n  // }, [exchangeApi, market, chartType])\n\n  return {\n    // change,\n    // volume,\n    chartUnit,\n    chartType,\n    tgItemJSXs,\n    tgItemJSXsPriceChart,\n    handleChange,\n    originData,\n  }\n}","import { toBig } from 'loopring-sdk'\n\nexport enum OrderHandling {\n    processed = 'processed',\n    no_such_order = 'no_such_order',\n    too_many_times = 'too_many_times',\n}\n\nexport const BIG10 = toBig(10)\n\n// export enum PriceChartType {\n//     h24 = '24hrs',\n//     w1 = '1week',\n//     all = 'all',\n// }\n","import { ChartUnit } from '@loopring-web/component-lib/static-resource'\n\nimport { ScaleAreaChart, ToggleButtonGroup, useSettings } from '@loopring-web/component-lib'\nimport { Box, Grid } from \"@material-ui/core\"\nimport { WithTranslation } from 'react-i18next'\nimport { TradeTitle } from '@loopring-web/component-lib/components/block'\nimport { UpColor } from '@loopring-web/component-lib/src/static-resource';\nimport { useBasicInfo } from './hook'\n\nconst BasicInfoPanel = ({props, coinAInfo, coinBInfo, tradeFloat, marketArray, t, ...rest}: any & WithTranslation) => {\n\n    const {\n        // change,\n        chartType,\n        tgItemJSXs,\n        tgItemJSXsPriceChart,\n        handleChange,\n        // originData,\n    } = useBasicInfo(props, t)\n    const {upColor} = useSettings();\n\n\n    return <>\n        <Grid item xs={8}>\n            <TradeTitle {...{ coinAInfo, coinBInfo,\n                ...rest, t, tradeFloat\n            }}></TradeTitle>\n        </Grid>\n        <Grid item xs={4} display={'flex'} justifyContent={'flex-end'} alignItems={'flex-end'}>\n        <ToggleButtonGroup exclusive {...{...rest, t, tgItemJSXs, value: chartType}}\n        handleChange={handleChange}/>\n        </Grid>\n\n        <Grid item xs={12}>\n            <Box minHeight={256} maxHeight={256} display={'block'} style={{height: '100%', width: '100%'}}>\n                <ScaleAreaChart type={chartType} data={marketArray ?? []} riseColor={upColor as keyof typeof UpColor}\n                                handleMove={() => {\n                                }}/>\n            </Box>\n        </Grid>\n        <Grid item xs={12} height={24} display={'flex'} justifyContent={'flex-end'}>\n            <ToggleButtonGroup exclusive {...{\n                ...rest, t, tgItemJSXs: tgItemJSXsPriceChart,\n                value: ChartUnit.D1, size: 'small'\n            }}\n                               handleChange={() => undefined}/>\n        </Grid>\n    </>\n\n};\n\nexport default BasicInfoPanel\n","// import { useState } from 'react'\n//\n// import TradePanelUi from './TradePanel'\n// import { useGetMyTrades, useGetRecentTrades, } from './hooks'\n//\n// const TradePanel = ({tradeArray}: any) => {\n//\n//   // const { market, poolAddress, base, quote } = props\n//\n//   console.log('TradePanel market:', tradeArray)\n//\n//   // const { myTrades } = useGetMyTrades(market)\n//   //\n//   // const { recentTrades } = useGetRecentTrades(poolAddress)\n//\n//\n//\n//   return (\n//     <TradePanelUi trades={tradeArray} isAllTrade={isAllTrade}\n//     setIsAllTrade={setIsAllTrade} />\n//   )\n//\n// }\n//\n// export default TradePanel\n\nimport { RefAttributes, useState } from 'react'\n\nimport Tabs from '@material-ui/core/Tabs'\nimport Tab from '@material-ui/core/Tab'\nimport Checkbox from '@material-ui/core/Checkbox'\nimport styled from '@emotion/styled'\n\nimport { FormControlLabel, TradeTable, } from '@loopring-web/component-lib'\nimport { withTranslation, WithTranslation } from 'react-i18next';\nimport { CheckBoxIcon, CheckedIcon } from '@loopring-web/component-lib/static-resource'\nimport { RouteComponentProps, withRouter } from 'react-router'\nimport { Box } from '@material-ui/core';\nimport { RawDataTradeItem } from '@loopring-web/component-lib/components/tableList/tradeTable/TradeTable';\nimport { BasicHeaderItem, HeadMenuType } from '@loopring-web/component-lib/components/basic-lib/lists/Interface';\n\nconst StylePaper = styled(Box)`\n  width: 100%;\n  height: 100%;\n  flex: 1;\n  background-color: ${({theme}) => theme.colorBase.background().default};\n  border-radius: ${({theme}) => theme.unit}px;\n  padding: 20px;\n\n  .tableWrapper {\n    margin-top: ${({theme}) => theme.unit * 1.5}px;\n    border: 1px solid ${({theme}) => theme.colorBase.borderColor};\n    border-radius: ${({theme}) => theme.unit}px;\n    padding: 26px;\n  }\n` as typeof Box;\n\n\nconst applyProps = (index: number) => {\n    return {\n        id: `simple-tab-${index}`,\n        'aria-controls': `simple-tabpanel-${index}`,\n    }\n}\nconst StyledTabsWrapper = styled.div`\n          position: relative;\n          width: 100%;\n          margin-top: ${({theme}) => theme.unit * 4}px;\n        `\n\nconst StyledFormControlLabel = styled(FormControlLabel)`\n          position: absolute;\n          top: 0;\n          right: ${({theme}) => theme.unit}px;\n          margin: ${({theme}) => theme.unit}px 0 0 0;\n        `\n\n\nconst TradePanel = withTranslation('common')(\n   // withRouter(\n    (\n        {tradeArray,  t}:\n            { tradeArray: RawDataTradeItem[] } & WithTranslation & RouteComponentProps) => {\n        const [isAllTrade, setIsAllTrade] = useState(false)\n        const [value, setValue] = useState(0)\n        const handleChange = (event: any, newValue: any) => {\n            setValue(newValue)\n        }\n\n        const handleCheckboxChange = () => {\n            setIsAllTrade((flag: boolean) => !flag)\n        }\n\n        return (\n            <StyledTabsWrapper>\n                <StyledFormControlLabel\n                    control={<Checkbox checked={isAllTrade} size={'small'} checkedIcon={<CheckedIcon/>}\n                                       icon={<CheckBoxIcon/>} color={'default'} onChange={handleCheckboxChange}/>}\n                    label={t('labelTradePanelHideOtherPairs')}/>\n\n                <Tabs value={value}\n                      onChange={handleChange}\n                      aria-label=\"tabs switch\">\n                    <Tab label={t('labelMyTrade')} {...applyProps(0)} />\n                    <Tab label={t('labelRecent')}   {...applyProps(1)} />\n                </Tabs>\n\n                <StylePaper marginTop={2}>\n                    <TradeTable rawData={tradeArray}/>\n                </StylePaper>\n\n            </StyledTabsWrapper>\n        )\n    }\n    ) as  (props: { tradeArray: RawDataTradeItem[] }) => JSX.Element;\n//)\n\nexport default TradePanel\n\n","import store from '../../stores';\nimport { AccountStatus } from '../../state_machine/account_machine_spec';\n\nexport enum fnType {\n    UNKNOWN,\n    UNCONNNECTED,\n    CONNECTED,\n    NOACCOUNT,\n    DEPOSITING,\n    DEPOSIT_TO_CONFIREM,\n    UNACTIVATED,\n    ARPROVING,\n    APPROV_TO_CONFIRM,\n    LOCKED,\n    ACTIVATED,\n    DEFAULT\n}\nexport const accountStaticCallBack = (props: { [key: number ]:[ fn: (props: any) => any, args?: object] }) => {\n    const {status} = store.getState().account\n    let fn, args;\n    switch (status) {\n        case AccountStatus.UNKNOWN:\n            [fn, args] = props[ fnType.UNKNOWN ]?props[ fnType.UNKNOWN ]:[];\n            if (typeof fn === 'function') {\n                return fn.call(this, args);\n            }\n            return\n        case AccountStatus.UNCONNNECTED:\n            [fn, args] = props[ fnType.UNCONNNECTED ]?props[ fnType.UNCONNNECTED ]:[];\n            if (typeof fn === 'function') {\n                return fn.call(this, args);\n            }\n            break;\n        case AccountStatus.CONNECTED:\n            [fn, args] = props[ fnType.CONNECTED ]?props[ fnType.CONNECTED ]:[];\n            if (typeof fn === 'function') {\n                return fn.call(this, args);\n            }\n            break;\n        case AccountStatus.NOACCOUNT:\n            [fn, args] = props[ fnType.NOACCOUNT ]?props[ fnType.NOACCOUNT ]:[];\n            if (typeof fn === 'function') {\n                return fn.call(this, args);\n            }\n            break;\n        case AccountStatus.DEPOSITING:\n            [fn, args] = props[ fnType.DEPOSITING ]?props[ fnType.DEPOSITING ]:[];\n            if (typeof fn === 'function') {\n                return fn.call(this, args);\n            }\n            break;\n        case AccountStatus.DEPOSIT_TO_CONFIREM:\n            [fn, args] = props[ fnType.DEPOSIT_TO_CONFIREM ]?props[ fnType.DEPOSIT_TO_CONFIREM ]:[];\n            if (typeof fn === 'function') {\n                return fn.call(this, args);\n            }\n            break;\n        case AccountStatus.UNACTIVATED:\n            [fn, args] = props[ fnType.UNACTIVATED ]?props[ fnType.UNACTIVATED ]:[];\n            if (typeof fn === 'function') {\n                return fn.call(this, args);\n            }\n            break;\n        case AccountStatus.ARPROVING:\n            [fn, args] = props[ fnType.ARPROVING ]?props[ fnType.ARPROVING ]:[];\n            if (typeof fn === 'function') {\n                return fn.call(this, args);\n            }\n            break;\n        case AccountStatus.APPROV_TO_CONFIRM:\n            [fn, args] = props[ fnType.APPROV_TO_CONFIRM ]?props[ fnType.APPROV_TO_CONFIRM ]:[];\n            if (typeof fn === 'function') {\n                return fn.call(this, args);\n            }\n            break;\n        case AccountStatus.LOCKED:\n            [fn, args] = props[ fnType.LOCKED ]?props[ fnType.LOCKED ]:[];\n            if (typeof fn === 'function') {\n                return fn.call(this, args);\n            }\n            break;\n        case AccountStatus.ACTIVATED:\n            [fn, args] = props[ fnType.ACTIVATED ]?props[ fnType.ACTIVATED ]:[];\n            if (typeof fn === 'function') {\n                return fn.call(this, args);\n            }\n            break;\n        default:\n            break;\n\n    }\n    [fn, args] = props[ fnType.DEFAULT ]?props[ fnType.DEFAULT ]:[];\n    if (typeof fn === 'function') {\n        return fn.call(this, args);\n    }\n}","import store from '../../stores';\nimport { WalletMap } from '@loopring-web/component-lib/static-resource/index';\nimport * as fm from 'loopring-sdk';\nimport { fromWEI } from '../../utils/swap_calc_utils';\n\nexport const updateWallet = <C extends { [ key: string ]: any }>() => {\n    const {walletLayer2} = store.getState().walletLayer2;\n    const {tokenMap} = store.getState().tokenMap;\n    let walletMap: WalletMap<C> | undefined;\n    if (walletLayer2) {\n        walletMap = Reflect.ownKeys(walletLayer2).reduce((prev, item) => {\n            const {total, locked, pending: {withdraw}} = walletLayer2[ item as string ];\n            const countBig = fm.toBig(total).minus(fm.toBig(locked)).minus(fm.toBig(withdraw)).toString()\n            return {\n                ...prev, [ item ]: {\n                    belong: item,\n                    count: fromWEI(tokenMap, item, countBig),\n                }\n            }\n        }, {} as WalletMap<C>)\n    }\n\n    return {walletMap}\n}","export function coinPairInit({coinKey, _tradeCalcData, tokenMap, coinMap}: any) {\n    if (coinKey) {\n        const [_match, sell, buy] = coinKey.match(/(\\w+)-(\\w+)/i);\n        // @ts-ignore\n        if (sell && coinMap && coinMap[ sell ]) {\n            _tradeCalcData.coinSell = sell;\n        }// @ts-ignore\n        if (sell!==buy && buy && -1 !== tokenMap[ sell ].tradePairs.findIndex(ele => ele === buy)) {\n            _tradeCalcData.coinBuy = buy;\n            return _tradeCalcData\n        }\n        // else{\n        //     _tradeCalcData.coinBuy = tokenMap[ sell ].tradePairs[ 0 ];\n        // }\n    }\n    if (!_tradeCalcData.coinSell || _tradeCalcData.coinSell === '') {\n        _tradeCalcData.coinSell = 'LRC';\n        _tradeCalcData.coinBuy = 'ETH';\n        return _tradeCalcData\n    }\n    if (!_tradeCalcData.coinBuy || _tradeCalcData.coinBuy === '' || _tradeCalcData.coinBuy === 'undefined') {\n        // @ts-ignore\n        if (tokenMap && tokenMap[ _tradeCalcData.coinSell ].tradePairs) {\n            _tradeCalcData.coinBuy = tokenMap[ _tradeCalcData.coinSell ].tradePairs[ 0 ]\n        } else {\n            _tradeCalcData.coinSell = 'LRC';\n            _tradeCalcData.coinBuy = 'ETH';\n        }\n    }\n    return _tradeCalcData\n}","import { AmmMap } from '../../stores/Amm/AmmMap';\nimport { getBaseQuote, LoopringMap, TickerData } from 'loopring-sdk';\nimport { ammpoolAPI, exchangeAPI } from '../../stores/apis/api';\nimport * as fm from 'loopring-sdk';\nimport { BIG10 } from '../../defs/swap_defs';\nimport { CoinMap } from '@loopring-web/component-lib/static-resource/index';\n\nexport const pairTitleBlock = <C extends { [ key: string ]: any }, I extends { [ key: string ]: any }>({\n                                                                                                           coinKey,\n                                                                                                           ammKey,\n                                                                                                           ammMap\n                                                                                                       }: { coinKey: string, ammKey: string, ammMap: AmmMap<C, I> }): Promise<{\n    ammpoolsbalance: any, tickMap: LoopringMap<TickerData>\n}> => {\n    const exchangeApi = exchangeAPI();\n    const ammpoolApi = ammpoolAPI();\n    return new Promise((resolve, reject) => {\n        Promise.all([\n            ammpoolApi.getAmmPoolSnapshot({poolAddress: ammMap[ ammKey ].address}),\n            exchangeApi.getTicker({market: coinKey})])\n            // exchangeApi.getMarketTrades({market:coinKey})])\n            .then(([{raw_data}, {tickMap}]) => {\n                resolve({\n                    ammpoolsbalance: raw_data,\n                    tickMap,\n                })\n            })\n    })\n}\n\nexport const pairTitleDone = <C>({market, ammpoolsbalance, tokenMap, _tradeCalcData, coinMap, marketCoins}:any)=>{\n    const {base, quote} = getBaseQuote(market)\n    let stob = fm.toBig(Number(ammpoolsbalance.pooled[ 0 ].volume)).div(BIG10.pow( tokenMap[base as string].decimals))\n        .div(Number(ammpoolsbalance.pooled[ 1 ].volume)).div(BIG10.pow( tokenMap[quote as string].decimals)).toNumber()\n    if (market !== `${_tradeCalcData.coinSell}-${_tradeCalcData.coinBuy}`) {\n        stob = 1 / (stob * 1.0);\n    }\n    _tradeCalcData.StoB = stob;\n    _tradeCalcData.BtoS = 1 / (stob * 1.0);\n    _tradeCalcData.sellCoinInfoMap = coinMap && marketCoins?.reduce((prev: any, item: string | number) => {\n        return {...prev, [ item ]: coinMap[ item ]}\n    }, {} as CoinMap<C>)\n    _tradeCalcData.buyCoinInfoMap = coinMap && tokenMap && tokenMap[ _tradeCalcData.coinSell as string ].tradePairs?.reduce((prev: any, item: string | number) => {\n        return {...prev, [ item ]: coinMap[ item ]}\n    }, {} as CoinMap<C>);\n\n    return {\n        _pair:{\n            coinAInfo:  _tradeCalcData.sellCoinInfoMap? _tradeCalcData.sellCoinInfoMap[ base as string ] : undefined,\n            coinBInfo: _tradeCalcData.sellCoinInfoMap? _tradeCalcData.sellCoinInfoMap[ quote as string ] : undefined,\n        },\n        _tradeCalcData\n    }\n    //setPair();\n}","import { TickerData } from 'loopring-sdk';\nimport store from '../../stores';\nimport { FloatTag,TradeFloat } from '@loopring-web/component-lib/src/static-resource';\n\nexport const makeTickView = (tick: TickerData) => {\n    const {forex} = store.getState().system;\n\n    let _tradeFloat: Partial<TradeFloat> = {\n        percent: (tick.close - tick.open) / tick.open,\n        timeUnit: '24h',\n        priceYuan: 100,\n        priceDollar: 1.23123,\n        floatTag: FloatTag.increase,\n        reward: 12312,\n        APY: 56,\n    }\n    //  percent?: any,\n    //     timeUnit: '24h'|'all',\n    //     priceDollar: number,\n    //     priceYuan: number,\n    //     floatTag: keyof typeof FloatTag,\n    //     reward?:number,\n    //     rewardToken?:string,\n    //     volume?: number,\n    //     APY?:number\n\n    return _tradeFloat;\n}\n","import { useRouteMatch } from 'react-router';\nimport { CoinInfo, IBData, TradeCalcData, TradeTypes } from '@loopring-web/component-lib/static-resource';\nimport React from 'react';\nimport { exchangeAPI } from '../../stores/apis/api';\nimport { useTokenMap } from '../../stores/token';\nimport * as fm from 'loopring-sdk';\nimport { getBaseQuote, getExistedMarket, MarketTradeInfo, Side } from 'loopring-sdk';\nimport { useAmmMap } from '../../stores/Amm/AmmMap';\nimport { RawDataTradeItem } from '@loopring-web/component-lib/components/tableList/tradeTable/TradeTable';\nimport { useWalletLayer2 } from '../../stores/walletLayer2';\nimport store from '../../stores';\nimport { CustomError, ErrorMap, TradeFloat } from '@loopring-web/component-lib/src/static-resource';\nimport { SwapTradeData, useOpenModals } from '@loopring-web/component-lib';\nimport { SwapData } from '@loopring-web/component-lib/components/panel/components/panel/SwapWrap/Interface';\nimport { SwapType } from '@loopring-web/component-lib/components/panel/Interface';\nimport { BIG10 } from 'defs/swap_defs';\nimport { useAccount } from '../../stores/account/hook';\nimport { useCustomDCEffect } from '../../hooks/common/useCustomDCEffect';\nimport { accountStaticCallBack, fnType } from '../../hooks/help/connetStatusCallback';\nimport { useModals } from '../../hooks/modal/useModals';\nimport { updateWallet } from '../../hooks/help/updateWallet';\nimport { coinPairInit } from '../../hooks/help/coinPairInit';\nimport { pairTitleBlock, pairTitleDone } from '../../hooks/help/pairTitleBlock';\nimport { makeTickView } from '../../hooks/help/makeTickView';\n\n\nexport const makeMarketArray = (coinKey: any, marketTrades: MarketTradeInfo[]) => {\n\n    const tradeArray: Array<Partial<RawDataTradeItem>> = []\n\n    marketTrades.forEach((item: MarketTradeInfo) => {\n        try {\n            const {base, quote} = getBaseQuote(item.market)\n            const {forex} = store.getState().system\n            const {currency} = store.getState().settings\n            const {tokenMap} = store.getState().tokenMap\n            if (tokenMap) {\n                const baseToken = tokenMap[ base as string ]\n                const quoteToken = tokenMap[ quote as string ]\n\n                // console.log('item.volume:', item.volume, ' base:', baseToken)\n\n                tradeArray.push({\n                    side: item.side === Side.Sell ? TradeTypes.Sell : TradeTypes.Buy,\n                    amount: {\n                        from: {\n                            key: base as string,\n                            value: fm.toBig(item.volume).div(BIG10.pow(baseToken.decimals)).toNumber(),\n                        },\n                        to: {\n                            key: quote as string,\n                            value: fm.toBig(item.price).times(item.volume).div(BIG10.pow(quoteToken.decimals)).toNumber(),\n                        },\n                    },\n                    price: {\n                        key: '',\n                        value: fm.toBig(item.price).toNumber(),\n                    },\n                    fee: {\n                        key: '',\n                        value: fm.toBig(item.fee).div(BIG10.pow(quoteToken.decimals)).toNumber(),\n                    },\n                    time: item.tradeTime,\n                })\n            }\n        } catch (error) {\n            //CATCHERROR:\n            console.log(error)\n            // new CustomError()\n        }\n\n    })\n    // console.log('tradeArray:', tradeArray)\n    return tradeArray;\n\n}\n\n\nexport const useSwapPage = <C extends { [ key: string ]: any }>() => {\n    /*** api prepare ***/\n    const exchangeApi = exchangeAPI();\n    const match: any = useRouteMatch(\":symbol\")\n    const {coinMap, tokenMap, marketArray, marketCoins} = useTokenMap()\n    const {ammMap} = useAmmMap();\n    const {setShowConnect, setShowAccountInfo} = useOpenModals();\n    const {ShowDeposit} = useModals()\n    const {account} = useAccount()\n\n    const walletLayer2State = useWalletLayer2();\n\n    const [tradeData, setTradeData] = React.useState<SwapTradeData<IBData<C>> | undefined>(undefined);\n    const [tradeCalcData, setTradeCalcData] = React.useState<TradeCalcData<C> | undefined>(undefined);\n    const [tradeArray, setTradeArray] = React.useState<RawDataTradeItem[]>([]);\n    const [tradeFloat, setTradeFloat] = React.useState<TradeFloat | undefined>(undefined);\n    const [pair, setPair] = React.useState<{ coinAInfo: CoinInfo<C> | undefined, coinBInfo: CoinInfo<C> | undefined }>({\n        coinAInfo: undefined,\n        coinBInfo: undefined,\n    });\n    // const [market, setMarket] = React.useState<string>('')\n    const [swapBtnI18nKey, setSwapBtnI18nKey] = React.useState<string>('swapBtn');\n\n\n    //HIGH: get Router info\n    // const symbol = match?.params.symbol ?? undefined;\n    React.useEffect(() => {\n\n        const symbol = match?.params.symbol ?? undefined;\n        resetSwap(symbol)\n    }, []);\n    //TODO tickMap\n    React.useEffect(() => {\n    }, [])\n\n    //HIGH: effect by wallet state update\n    React.useEffect(() => {\n        switch (walletLayer2State.status) {\n            case \"ERROR\":\n                walletLayer2State.statusUnset();\n                // setState('ERROR')\n                //TODO: show error at button page show error  some retry dispat again\n                break;\n            case \"DONE\":\n                walletLayer2State.statusUnset();\n                const {walletMap} = updateWallet();\n                if (walletMap && tradeCalcData) {\n                    setTradeCalcData({...tradeCalcData, walletMap} as TradeCalcData<C>);\n                    setTradeData({\n                        sell: {\n                            belong: tradeCalcData.sellCoinInfoMap ? tradeCalcData.sellCoinInfoMap[ tradeCalcData.coinSell ]?.simpleName : undefined,\n                            balance: walletMap ? walletMap[ tradeCalcData.coinSell ]?.count : 0\n                        },\n                        // @ts-ignore\n                        buy: {\n                            belong: tradeCalcData.sellCoinInfoMap ? tradeCalcData.sellCoinInfoMap[ tradeCalcData.coinBuy ]?.simpleName : undefined,\n                            balance: walletMap ? walletMap[ tradeCalcData.coinBuy ]?.count : 0\n                        },\n                    } as SwapTradeData<IBData<C>>)\n                }\n                break;\n            default:\n                break;\n\n        }\n    }, [walletLayer2State.status])\n\n    React.useEffect(() => {\n    }, [])\n\n    const btnArray: { [ key: number ]: [fn: (props: any) => any, args?: object] } = {\n        [ fnType.UNCONNNECTED ]: [\n            function () {\n                setSwapBtnI18nKey('labelConnectWallet')\n            }\n        ]\n        , [ fnType.DEFAULT ]: [\n            function () {\n                setSwapBtnI18nKey('depositTitleAndActive')\n            }\n        ]\n        , [ fnType.ACTIVATED ]: [\n            function () {\n                setSwapBtnI18nKey('swapBtn')\n            }\n        ]\n        , [ fnType.LOCKED ]: [\n            function () {\n                setSwapBtnI18nKey('labelUnLock')\n            }\n        ]\n    };\n    useCustomDCEffect(() => {\n        accountStaticCallBack(btnArray)\n    }, [account.status, btnArray])\n\n\n    const swapBtnClickArray: { [ key: number ]: [fn: (props: any) => any, args?: object] } = {\n        [ fnType.UNCONNNECTED ]: [\n            function () {\n                setShowConnect({isShow: true})\n            }\n        ]\n        , [ fnType.DEFAULT ]: [\n            function () {\n                ShowDeposit(true)\n            }\n        ]\n        , [ fnType.ACTIVATED ]: [\n            function () {\n                setSwapBtnI18nKey('swapBtn')\n            }\n        ]\n        , [ fnType.LOCKED ]: [\n            function () {\n                setShowAccountInfo({isShow: true})\n            }\n        ]\n    };\n    const onSwapClick = ({sell, buy, slippage}: SwapTradeData<IBData<C>>) => {\n        accountStaticCallBack(swapBtnClickArray)\n        // onSwap()\n    }\n    const handleSwapPanelEvent = async (swapData: SwapData<SwapTradeData<IBData<C>>>, switchType: any): Promise<void> => {\n        //TODO setMarket(market);\n\n        const {tradeData} = swapData\n        return new Promise((resolve) => {\n            switch (switchType) {\n                case SwapType.SEll_CLICK:\n                    break\n                case SwapType.BUY_CLICK:\n                    break\n                case SwapType.SELL_SELECTED:\n                    resetSwap(`${tradeData.sell.belong}-${tradeData.buy.belong}`, 'sell', tradeData)\n                    break\n                case SwapType.BUY_SELECTED:\n                    resetSwap(`${tradeData.sell.belong}-${tradeData.buy.belong}`, 'buy', tradeData)\n                    break\n                case SwapType.EXCHANGE_CLICK:\n                    resetSwap(`${tradeData.sell.belong}-${tradeData.buy.belong}`)\n                    break\n                default:\n                    break\n            }\n\n            resolve(undefined)\n        })\n    }\n    const calculateTradeData = (type: 'sell' | 'buy', _tradeData: SwapTradeData<IBData<C>>): { _tradeCalcData: TradeCalcData<C>, _tradeData: SwapTradeData<IBData<C>> } => {\n        //if(`${pair.coinAInfo?.simpleName}-${pair.coinBInfo?.simpleName}` === coinKey)\n        if (_tradeData[ type ].tradeValue && tradeCalcData) {\n            type === 'sell' ? _tradeData[ 'buy' ].tradeValue = fm.toBig(_tradeData[ 'sell' ].tradeValue).times(tradeCalcData.StoB).toNumber()\n                : _tradeData[ 'sell' ].tradeValue = fm.toBig(_tradeData[ 'buy' ].tradeValue).times(tradeCalcData.BtoS).toNumber()\n        }\n        //TODO: renew  tradeCalcData\n        let _tradeCalcData = {...tradeCalcData} as TradeCalcData<C>;\n        return {_tradeData, _tradeCalcData}\n    }\n\n    const resetSwap = async (coinKey: any, type?: 'sell' | 'buy', _tradeData?: SwapTradeData<IBData<C>>) => {\n        if (tradeCalcData\n            && coinKey === `${tradeCalcData.coinSell}-${tradeCalcData.coinBuy}`\n            && _tradeData\n            && type\n            && (!tradeData || (tradeData[ type ].tradeValue !== _tradeData[ type ].tradeValue))) {\n            const {_tradeData: td, _tradeCalcData} = calculateTradeData(type, _tradeData)\n            setTradeData(td)\n            setTradeCalcData(_tradeCalcData)\n\n        } else {\n            let _tradeCalcData: Partial<TradeCalcData<C>> = {}\n            let _tradeFloat: Partial<TradeFloat> = {}\n            let _tradeArray: Array<Partial<RawDataTradeItem>> | undefined = undefined;\n            _tradeCalcData = coinPairInit({coinKey, _tradeCalcData, tokenMap, coinMap})\n            if (walletLayer2State.walletLayer2) {\n                const {walletMap} = updateWallet();\n                _tradeCalcData.walletMap = walletMap;\n            }\n            setTradeCalcData({...tradeCalcData, ..._tradeCalcData} as TradeCalcData<C>);\n\n            let {\n                amm,\n                market\n            } = getExistedMarket(marketArray, _tradeCalcData.coinSell as string, _tradeCalcData.coinBuy as string);\n            let apiList = [];\n            //TODO wallet saga done\n            if (marketArray && amm && market && ammMap) {\n                // let pairPromise =  usePairTitleBlock({market})\n                apiList = [\n                    exchangeApi.getMarketTrades({market}),\n                    pairTitleBlock({coinKey: market, ammKey: amm, ammMap})\n                ];\n                //HiGH: this need add websocket to update infr ticker ammpoolsbalace\n                // @ts-ignore\n                Promise.all([...apiList]).then(\n                    ([{marketTrades}, {ammpoolsbalance, tickMap}]: any[]) => {\n                        if (tokenMap) {\n                            let {_tradeCalcData: _td, _pair} = pairTitleDone({\n                                market,\n                                ammpoolsbalance,\n                                tokenMap,\n                                _tradeCalcData,\n                                coinMap,\n                                marketCoins\n                            })\n                            _tradeCalcData = _td;\n                            _tradeFloat = makeTickView(tickMap[ market ])\n                            _tradeArray = makeMarketArray(market, marketTrades)\n                            // @ts-ignore\n                            setTradeCalcData(_tradeCalcData as TradeCalcData<C>);\n                            // @ts-ignore\n                            setTradeFloat(_tradeFloat);\n                            setTradeArray(_tradeArray as RawDataTradeItem[])\n                            setPair(_pair)\n                            setTradeData({\n                                sell: {\n                                    belong: _tradeCalcData.sellCoinInfoMap ? _tradeCalcData.sellCoinInfoMap[ _tradeCalcData.coinSell ]?.simpleName : undefined,\n                                    balance: _tradeCalcData.walletMap ? _tradeCalcData.walletMap[ _tradeCalcData.coinSell ]?.count : 0\n                                },\n                                // @ts-ignore\n                                buy: {\n                                    belong: _tradeCalcData.sellCoinInfoMap ? _tradeCalcData.sellCoinInfoMap[ _tradeCalcData.coinBuy ]?.simpleName : undefined,\n                                    balance: _tradeCalcData.walletMap ? _tradeCalcData.walletMap[ _tradeCalcData.coinBuy ]?.count : 0\n                                },\n                            } as SwapTradeData<IBData<C>>)\n                        }\n\n\n                    }).catch((error) => {\n                    throw new CustomError({...ErrorMap.TRADE_LITE_SET_PAIR_ERROR, options: error})\n                    //TODO solve error\n                })\n\n            }\n        }\n\n    }\n    return {\n        tradeCalcData,\n        tradeFloat,\n        tradeArray,\n        tradeData,\n        pair,\n        onSwapClick,\n        swapBtnI18nKey,\n        handleSwapPanelEvent\n    }\n\n}\n","import { Box, Grid, } from '@material-ui/core'\nimport { WithTranslation, withTranslation } from 'react-i18next'\n// import { useSwapNew, } from './hook'\nimport BasicInfoPanel from './panel/BasicInfoPanel'\nimport TradePanel from './panel/TradePanel'\nimport styled from 'styled-components'\nimport { useSwapPage } from './hook';\nimport { SwapPanel } from '@loopring-web/component-lib'\nimport { useState } from 'react';\n\nconst FixedStyle = styled(Box)`\n  @media only screen and (min-height: 680px ) and (min-width:1024px){\n    position: fixed;\n  }\n`\n\nconst SwapPage = withTranslation('common')(({ ...rest }: WithTranslation) => {\n\n    // const { base, quote, tokens, market, poolAddress, swapProps } = useSwapNew()\n    //\n    // const props = { base, quote, tokens, market }\n    const {tradeCalcData,tradeData,tradeFloat,tradeArray,handleSwapPanelEvent,onSwapClick,pair,swapBtnI18nKey} = useSwapPage();\n\n    return <>\n        <Grid container marginRight={3} alignContent={'flex-start'} >\n            <BasicInfoPanel {...{ ...rest,\n                ...pair,\n                tradeFloat, tradeArray }} />\n            <TradePanel tradeArray={tradeArray}  />\n\n            {/**/}\n        </Grid>\n\n        <Box display={'flex'} style={{ minWidth: 'var(--swap-box-width)' }} >\n            <FixedStyle>\n                <SwapPanel tradeData={tradeData}\n                           tradeCalcData={tradeCalcData}\n                           onSwapClick={onSwapClick}\n                           swapBtnI18nKey={swapBtnI18nKey}\n                           // handleError={}\n                           {...{handleSwapPanelEvent,...rest}}\n                />\n            </FixedStyle>\n\n        </Box>\n\n    </>\n});\n\n\nexport default SwapPage\n","import { useMemo, } from \"react\"\n\nimport { useActiveWeb3React } from \"../web3/useWeb3\"\n\nimport { WsAPI, ExchangeAPI, AmmpoolAPI, UserAPI, DEFAULT_TIMEOUT, } from 'loopring-sdk'\n\nfunction useApi(ApiClass: any, timeout = DEFAULT_TIMEOUT) {\n\n  const { chainId, active, } = useActiveWeb3React()\n\n    const genApi = () => {\n        if (!active || !chainId) {\n            return undefined\n        }\n\n        return new ApiClass(chainId, timeout)\n    }\n\n    const api = useMemo(genApi, [ApiClass, chainId, active, timeout])\n\n    return api\n}\n\nexport function useWsAPI() {\n    return useApi(WsAPI) as WsAPI\n}\n\nexport function useExchangeAPI() {\n    return useApi(ExchangeAPI) as ExchangeAPI\n}\n\nexport function useAmmpoolAPI() {\n    return useApi(AmmpoolAPI) as AmmpoolAPI\n}\n\nexport function useUserAPI() {\n    return useApi(UserAPI) as UserAPI\n}\n","import { useCallback, useMemo, useState, useRef, useEffect } from 'react'\n\nimport { useActiveWeb3React } from '../web3/useWeb3'\nimport { useWsAPI, } from './useApi2'\n\nimport { ChainId, getAccountArg, getCandlestickArg, \n    getAmmpoolArg, getTickerArg, WsProps } from 'loopring-sdk'\n\nconst stateArr = [\n    { key: 0, value: 'Connecting' },\n    { key: 1, value: 'Connected' },\n    { key: 2, value: 'Closing' },\n    { key: 3, value: 'Closed' }\n]\n\nexport const useWebsocket = ({ topics, verify, needApiKey, apiKey, }: { topics: any, needApiKey: boolean, apiKey: string|undefined, verify: boolean, }) => {\n    const ws = useRef<WebSocket | null>(null)\n    const [wsData, setMessage] = useState<any>(undefined)\n    const [readyState, setReadyState] = useState({ key: 0, value: 'Connecting' })\n\n    const { chainId, } = useActiveWeb3React()\n\n    const api = useWsAPI()\n\n    const creatWebSocket = () => {\n\n        if (!api || !chainId) {\n            return\n        }\n\n        api.getWsKey().then((wsApiKey: any) => {\n            let basePath: string = 'wss://ws.'\n            switch (chainId) {\n                case ChainId.MAINNET:\n                    basePath += process.env.REACT_APP_API_URL\n                    break\n                default:\n                    basePath += process.env.REACT_APP_API_URL_UAT\n                    basePath = 'wss://ws.uat2.loopring.io'\n            }\n\n            basePath += '/v3/ws?wsApiKey=' + wsApiKey\n    \n            try {\n                ws.current = new WebSocket(basePath)\n\n                const subTopics = (topics: any) => {\n                    let data: any = {\n                        op: 'sub',\n                        unsubscribeAll: 'true',\n                        topics: topics,\n                    }\n            \n                    if (needApiKey && apiKey) {\n                        data.apiKey = apiKey\n                    }\n            \n                    const flat_txt = JSON.stringify(data)\n                    sendMessage(flat_txt)\n                }\n    \n                ws.current.onopen = (_e) => {\n                    setReadyState(stateArr[ws.current?.readyState ?? 0])\n                    subTopics(topics)\n                }\n                \n                ws.current.onclose = (e) => {\n                    setReadyState(stateArr[ws.current?.readyState ?? 0])\n                }\n                \n                ws.current.onerror = (e) => {\n                    setReadyState(stateArr[ws.current?.readyState ?? 0])\n                }\n    \n                ws.current.onmessage = (e) => {\n                    setMessage(e.data)\n                }\n            } catch (error) {\n                console.log(error)\n            }\n\n        })\n\n        \n    }\n\n    const webSocketInit = () => {\n        if (!ws.current || ws.current.readyState === 3) {\n            creatWebSocket()\n        }\n    }\n\n    const closeWebSocket = () => {\n        ws.current?.close()\n    }\n\n    const sendMessage = (msg: any) => {\n        ws.current?.send(msg)\n    }\n\n    const reconnect = () => {\n        try {\n            closeWebSocket()\n            ws.current = null\n            creatWebSocket()\n        } catch (e) {\n            console.log(e)\n        }\n    }\n\n    useEffect(() => {\n\n        verify && webSocketInit()\n        return () => {\n            ws.current?.close()\n        }\n    }, [ws, verify])\n\n    return {\n        wsData,\n        readyState,\n        sendMessage,\n        closeWebSocket,\n        reconnect,\n    }\n}\n\nexport function useWs(topics: any, needApiKey: boolean, apiKey?: string, verify: boolean = true) {\n    const [socketData, setSocketData] = useState({})\n\n    const [isLocalPage, setIsLocalPage] = useState<boolean>(true)\n\n    useEffect(() => {\n\n        let mounted = true\n\n        const checkIsLocalPage = () => {\n            console.log('enter checkIsLocalPage')\n            document.addEventListener('visibilitychange', function () {\n                // page invisible trigger!\n                let isLocalPage = true\n                if (document.visibilityState === 'hidden') {\n                    isLocalPage = false\n                }\n                if (mounted) {\n                    setIsLocalPage(isLocalPage)\n                } else {\n                    console.log('unmounted! dont setIsLocalPage!')\n                }\n            })\n        }\n\n        checkIsLocalPage()\n\n        return () => {\n            mounted = false\n        }\n\n    }, [])\n\n    const { wsData, readyState, closeWebSocket, reconnect, sendMessage, } = useWebsocket({\n        topics,\n        apiKey,\n        needApiKey,\n        verify,\n    })\n\n    useEffect(() => {\n    \n        if (needApiKey && !apiKey) {\n            return\n        }\n\n        if (!verify) {\n            return\n        }\n\n        if (wsData === 'ping') {\n            try {\n                sendMessage('pong')\n            } catch (err) {\n                console.log(err)\n            }\n        } else {\n            if (wsData) {\n                setSocketData(JSON.parse(wsData))\n            }\n        }\n        \n        // if closed and is currente page then, reconnect.\n        if (readyState.key === 3 && isLocalPage) {\n            reconnect()\n        }\n        // if not current page, close it.\n        if (!isLocalPage) {\n            closeWebSocket()\n        }\n\n    }, [wsData, readyState, isLocalPage, verify, apiKey])\n\n    return {\n        socketData,\n    }\n}\n\nexport function useAmmpoolWs(apiKey: string) {\n\n    let topics: any[] = []\n\n    topics.push(getTickerArg('LRC-ETH'))\n\n    topics.push(getAmmpoolArg('0x18920d6E6Fb7EbE057a4DD9260D6D95845c95036'))\n\n    const needApiKey = false\n\n    const { socketData } = useWs(topics, needApiKey, apiKey)\n\n    return {\n        socketData,\n    }\n\n}\n","import { useRef } from 'react'\n\n// import Qrcode from 'components/qrcodes/Qrcode'\n\n\nimport { useAccount } from 'stores/account/hook'\n\nimport { useGetExchangeInfo, useGetGas, useGetMarkets, useGetTokens } from 'hooks/exchange/useExchangeAPI'\n\nimport { useAmmpoolWs } from 'hooks/common/useWebsocketApi'\n\nconst DebugPage = () => {\n\n  const inputRef = useRef<HTMLInputElement>(null)\n\n  const { account, isNoAccount, apiKey } = useAccount()\n\n  const {socketData} = useAmmpoolWs(apiKey)\n\n  const { markets } = useGetMarkets()\n\n  const { exchangeInfo } = useGetExchangeInfo()\n\n  const { tokens } = useGetTokens()\n\n  const { gas } = useGetGas()\n\n  const gasPrice = gas?.data\n\n  console.log('account:', account)\n  console.log('exchangeInfo:', exchangeInfo)\n  console.log('tokens:', tokens)\n\n  const showAddr = account.accAddr ? account.accAddr : ''\n\n  return (\n    <div>\n      Debug\n      <div>account:{JSON.stringify(account)}</div>\n      <div>eddsaKey:{account.eddsaKey}</div>\n      <div>wsdata: {JSON.stringify(socketData)}</div>\n      <div>----------------------------</div>\n      <div>markets:{JSON.stringify(markets)}</div>\n      <div>----------------------------</div>\n      <div>depositAddress:{exchangeInfo?.depositAddress}</div>\n      <div>exchangeAddress:{exchangeInfo?.exchangeAddress}</div>\n      <div>----------------------------</div>\n      {/*<div>exchangeInfo:{JSON.stringify(exchangeInfo)}</div>\n      <div>----------------------------</div>*/}\n      <div>tokens:{JSON.stringify(tokens)}</div>\n      <div>----------------------------</div>\n\n      {/*{isNoAccount() && <Qrcode value={showAddr} size={300} />}*/}\n      {/*<input type='input' ref={inputRef} width=\"150px\" />*/}\n      {/*<DepositBtn onClick={deposit} />*/}\n    </div>\n  )\n\n}\n\nexport default DebugPage\n","import React from 'react'\nimport { TransactionTable } from '@loopring-web/component-lib'\nimport { WithTranslation, withTranslation } from 'react-i18next'\nimport { Box, Paper } from '@material-ui/core'\nimport styled from '@emotion/styled'\nimport { useGetTxs } from './hooks'\n\nconst StylePaper = styled(Box)`\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  height: 100%;\n  flex: 1;\n  background-color: ${({ theme }) => theme.colorBase.background().default};\n  border-radius: ${({ theme }) => theme.unit}px;\n  padding: 20px;\n\n  .title {\n    font-family: Gilroy-Medium;\n    font-size: ${({ theme }) => theme.unit * 3}px;\n    line-height: 19px;\n  }\n\n  .tableWrapper {\n    display: flex;\n    margin-top: 20px;\n    border: 1px solid ${({ theme }) => theme.colorBase.borderColor};\n    border-radius: ${({ theme }) => theme.unit}px;\n    padding: 26px;\n    flex: 1;\n    \n    .rdg {\n      flex: 1;\n    }\n  }\n` as typeof Paper;\n\nconst TxPanel = withTranslation('common')((rest:WithTranslation<'common'>) => {\n    const container = React.useRef(null);\n    const [pageSize, setPageSize] = React.useState(10);\n    React.useEffect(() => {\n        // @ts-ignore\n        let height = container?.current?.offsetHeight;\n        if (height) {\n            setPageSize(Math.floor((height - 120) / 44) - 2);\n        }\n    }, [container, pageSize]);\n    const { txs } = useGetTxs()\n\n    const txList = txs !== undefined ? txs: []\n    \n    return (\n        <StylePaper ref={container}>\n            <div className=\"title\">Transactions</div>\n            <div className=\"tableWrapper\">\n                <TransactionTable {...{\n                  rawData: txList,\n                  pagination: {\n                    pageSize: pageSize\n                  },\n                  ...rest\n                }} />\n            </div>\n        </StylePaper>\n    )\n})\n\nexport default TxPanel\n","import { useState } from 'react'\n\nimport { useAmmpoolAPI, useUserAPI } from \"hooks/exchange/useApi\"\nimport { useCustomDCEffect } from 'hooks/common/useCustomDCEffect'\nimport { useAccount } from 'stores/account/hook'\nimport { TransactionStatus, RawDataTransactionItem } from '@loopring-web/component-lib'\n\nimport { TxStatus } from 'loopring-sdk'\nimport { TransactionTradeTypes } from '@loopring-web/component-lib/components/tableList/transactionsTable/Interface';\n\nexport function useGetTxs() {\n\n    const { accountId, apiKey } = useAccount()\n\n    const userApi = useUserAPI()\n\n    const [txs, setTxs] = useState<RawDataTransactionItem[]>()\n\n    useCustomDCEffect(async() => {\n\n        if (!userApi || !accountId || !apiKey) {\n            return\n        }\n\n        const txs = await userApi.getUserTranferList({ accountId }, apiKey)\n\n        let tmpTx: RawDataTransactionItem[] = []\n\n        txs.userTransfers.forEach((item: any, index: number) => {\n            tmpTx.push({from: {\n                    address: item.senderAddress,\n                    env: ''\n                },\n                to: {\n                    address: item.receiverAddress,\n                    env: ''\n                },\n                amount: item.amount,\n                fee: {\n                    unit: item.feeTokenSymbol,\n                    value: item.feeAmount\n                },\n                memo: item.symbol,\n                time: item.timestamp,\n                txnHash: item.hash,\n                status: item.status,\n                token:item.token,\n                tradeType:TransactionTradeTypes.allTypes,\n            })\n        })\n\n        setTxs(tmpTx)\n\n    }, [accountId, apiKey, userApi])\n\n    return {\n        txs,\n    }\n}\n","import { useState, useEffect, useRef } from 'react'\nimport { WithTranslation, withTranslation } from 'react-i18next'\nimport { PriceTag } from '@loopring-web/component-lib/static-resource'\nimport { Box, Paper, Typography } from '@material-ui/core'\nimport styled from '@emotion/styled'\nimport { AssetTitleProps, AssetTitle, AssetsTable, DoughnutChart, ScaleAreaChart, ChartType, ToggleButtonGroup } from '@loopring-web/component-lib'\nimport { useModals } from 'hooks/modal/useModals'\nimport { useGetUserBalances } from 'hooks/exchange/useUserAPI'\nimport { useGetTokens } from 'hooks/exchange/useExchangeAPI'\n\nconst StylePaper = styled(Box)`\n    width: 100%;\n    height: 100%;\n    flex: 1;\n    background-color: ${({ theme }) => theme.colorBase.background().default};\n    border-radius: ${({ theme }) => theme.unit}px;\n    padding: 20px;\n\n    .title {\n        font-family: Gilroy-Medium;\n        font-size: ${({ theme }) => theme.unit * 3}px;\n        line-height: 19px;\n    }\n\n    .tableWrapper {\n        margin-top: ${({ theme }) => theme.unit * 1.5}px;\n        border: 1px solid ${({ theme }) => theme.colorBase.borderColor};\n        border-radius: ${({ theme }) => theme.unit}px;\n        padding: 26px;\n    }\n` as typeof Box;\n\nconst StyledChartWrapper = styled(Box)`\n    height: 225px;\n    > div {\n        position: relative;\n        width: calc(50% - 6px);\n        height: 100%;\n        background-color: ${({ theme }) => theme.colorBase.background().default};\n        border: 1px solid ${({ theme }) => theme.colorBase.borderColor};\n        border-radius: ${({ theme }) => theme.unit}px;\n        padding: ${({ theme }) => theme.unit * 2.5}px ${({ theme }) => theme.unit * 3}px;\n    }\n`\n\nconst StyledBtnGroupWrapper = styled(Box)`\n    position: absolute;\n    z-index: 10000;\n    right: ${({ theme }) => theme.unit * 3}px;\n    bottom: ${({ theme }) => theme.unit * 2.5}px;\n`\n\nconst toggleData = [\n    {value: '24 H', key: '24 H'},\n    {value: '1 W', key: '1 W'},\n    {value: 'ALL', key: 'ALL'},\n]\n\nconst DoughnutData = [\n    {\n        name: 'LP Token',\n        value: 12898.0\n    },\n    {\n        name: 'LRC',\n        value: 12898.50\n    },\n    {\n        name: 'ETH',\n        value: 36547.00\n    },\n    {\n        name: 'DOT',\n        value: 23898.09\n    },\n    {\n        name: 'BTC',\n        value: 3489\n    },\n    {\n        name: 'CRV',\n        value: 180.09\n    },\n    {\n        name: 'ALICE',\n        value: 150.7\n    },\n    {\n        name: 'LINA',\n        value: 230.5\n    },\n]\n\nconst testTrendData:any = [\n    {\n        timeStamp: 150,\n        low: Math.random() + 1,\n        high: Math.random() + 6,\n        open: Math.random() + 3,\n        close: Math.random() + 4,\n        volume: (Math.random() + 4) * 1500,\n    },\n    {\n        timeStamp: 160,\n        low: Math.random() + 1,\n        high: Math.random() + 6,\n        open: Math.random() + 3,\n        close: Math.random() + 4,\n        volume: (Math.random() + 4) * 1500,\n    },\n    {\n        timeStamp: 170,\n        low: Math.random() + 1,\n        high: Math.random() + 6,\n        open: Math.random() + 3,\n        close: Math.random() + 4,\n        volume: (Math.random() + 4) * 1500,\n    },\n    {\n        timeStamp: 180,\n        low: Math.random() + 1,\n        high: Math.random() + 6,\n        open: Math.random() + 3,\n        close: Math.random() + 4,\n        volume: (Math.random() + 4) * 1500,\n    },\n    {\n        timeStamp: 190,\n        low: Math.random() + 1,\n        high: Math.random() + 6,\n        open: Math.random() + 3,\n        close: Math.random() + 4,\n        volume: (Math.random() + 4) * 1500,\n    },\n    {\n        timeStamp: 200,\n        low: Math.random() + 1,\n        high: Math.random() + 6,\n        open: Math.random() + 3,\n        close: Math.random() + 4,\n        volume: (Math.random() + 4) * 1500,\n    },\n    {\n        timeStamp: 210,\n        low: Math.random() + 1,\n        high: Math.random() + 6,\n        open: Math.random() + 3,\n        close: Math.random() + 4,\n        volume: (Math.random() + 4) * 1500,\n    },\n    {\n        timeStamp: 220,\n        low: Math.random() + 1,\n        high: Math.random() + 6,\n        open: Math.random() + 3,\n        close: Math.random() + 4,\n        volume: (Math.random() + 4) * 1500,\n    },\n    {\n        timeStamp: 230,\n        low: Math.random() + 1,\n        high: Math.random() + 6,\n        open: Math.random() + 3,\n        close: Math.random() + 4,\n        volume: (Math.random() + 4) * 1500,\n    },\n    {\n        timeStamp: 240,\n        low: Math.random() + 1,\n        high: Math.random() + 6,\n        open: Math.random() + 3,\n        close: Math.random() + 4,\n        volume: (Math.random() + 4) * 1500,\n    },\n]\n\nconst AssetPanel = withTranslation('common')(({t,...rest}: WithTranslation) => {\n    const container = useRef(null);\n    const [pageSize, setPageSize] = useState(10);\n    \n    const [chartPeriod, setChartPeriod] = useState('24 H')\n\n    useEffect(() => {\n        // @ts-ignore\n        let height = container?.current?.offsetHeight;\n        if (height) {\n            setPageSize(Math.floor((height - 120) / 44) - 1);\n        }\n    }, [container, pageSize]);\n\n    const {\n        ShowDeposit,\n        ShowTransfer,\n        ShowWithdraw,\n        ShowResetAccount,\n    } = useModals()\n\n    const onShowDeposit = () => {\n        ShowDeposit(true)\n    }\n\n    const onShowTransfer = () => {\n        ShowTransfer(true)\n    }\n\n    const onShowWithdraw = () => {\n        ShowWithdraw(true)\n    }\n\n    const AssetTitleProps: AssetTitleProps = {\n        assetInfo: {\n            totalAsset: 123456.789,\n            priceTag: PriceTag.Dollar,\n        },\n        onShowDeposit,\n        onShowTransfer,\n        onShowWithdraw,\n    }\n\n    const { tokens: tokensAll } = useGetTokens()\n\n    const tokens = tokensAll?.tokenSymbolMap\n\n    const { balances } = useGetUserBalances(tokens)\n\n    return (\n        <>\n            <Box>\n                <AssetTitle  {...{\n                    t,\n                    ...rest,\n                    ...AssetTitleProps\n                }} />\n            </Box>\n\n            {/*<div className=\"title\">{t('labelAssetsTitle')}</div>*/}\n\n            <StyledChartWrapper display={'flex'} justifyContent={'space-between'} alignItems={'center'} marginTop={2}>\n                <Paper component={'div'}>\n                    <Typography component=\"span\" color=\"textSecondary\" variant=\"body1\">Asset Distribution</Typography>\n                    <DoughnutChart data={DoughnutData} />\n                </Paper>\n                <Paper component={'div'}>\n                    <Typography component=\"span\" color=\"textSecondary\" variant=\"body1\">Total Assets</Typography>\n                    <ScaleAreaChart type={ChartType.Trend} data={testTrendData} />\n                    <StyledBtnGroupWrapper>\n                        <ToggleButtonGroup exclusive size=\"small\" {...{...rest, t, data: toggleData, value: chartPeriod, setValue: setChartPeriod}} />\n                    </StyledBtnGroupWrapper>\n                </Paper>\n            </StyledChartWrapper>\n            <StylePaper marginTop={2}>\n                <div className=\"tableWrapper\" ref={container}>\n                    <AssetsTable {...{\n                        rawData: [],\n                        pagination: {\n                            pageSize: pageSize\n                        }\n                    }} />\n                </div>\n            </StylePaper>\n        </>\n    )\n})\n\nexport default AssetPanel\n","import React from 'react'\nimport { TradeTable } from '@loopring-web/component-lib'\nimport { WithTranslation, withTranslation } from 'react-i18next'\nimport styled from '@emotion/styled'\nimport { Box, Paper } from '@material-ui/core'\nimport { useGetTxs } from './hooks'\n\nconst StylePaper = styled(Box)`\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  height: 100%;\n  flex: 1;\n  background-color: ${({ theme }) => theme.colorBase.background().default};\n  border-radius: ${({ theme }) => theme.unit}px;\n  padding: 20px;\n\n  .title {\n    font-family: Gilroy-Medium;\n    font-size: ${({ theme }) => theme.unit * 3}px;\n    line-height: 19px;\n  }\n\n  .tableWrapper {\n    display: flex;\n    flex: 1;\n    margin-top: 20px;\n    border: 1px solid ${({ theme }) => theme.colorBase.borderColor};\n    border-radius: ${({ theme }) => theme.unit}px;\n    padding: 26px;\n\n    .rdg {\n      flex: 1;\n    }\n  }\n` as typeof Paper;\n\nconst TradePanel = withTranslation('common')((rest:WithTranslation<'common'>) => {\n    const container = React.useRef(null);\n    const [pageSize, setPageSize] = React.useState(10);\n    React.useEffect(() => {\n        // @ts-ignore\n        let height = container?.current?.offsetHeight;\n        if (height) {\n            setPageSize(Math.floor((height - 120) / 44) - 2);\n        }\n    }, [container, pageSize]);\n\n    const { txs } = useGetTxs()\n\n    const txList = txs !== undefined ? txs: []\n\n    return (\n        <>\n            <StylePaper ref={container}>\n                <div className=\"title\">Trades</div>\n                <div className=\"tableWrapper\">\n                    <TradeTable {...{\n                      // rawData: txList,\n                      rawData: [],\n                      pagination: {\n                        pageSize: pageSize\n                      },\n                      ...rest}}/>\n                </div>\n            </StylePaper>\n        </>\n    )\n})\n\nexport default TradePanel\n","import { useState } from 'react'\n\nimport { useAmmpoolAPI, useUserAPI } from \"hooks/exchange/useApi\"\nimport { useCustomDCEffect } from 'hooks/common/useCustomDCEffect'\nimport { useAccount } from 'stores/account/hook'\nimport { TransactionStatus, RawDataTransactionItem } from '@loopring-web/component-lib'\n\nimport { TxStatus } from 'loopring-sdk'\nimport { TransactionTradeTypes } from '@loopring-web/component-lib/components/tableList/transactionsTable/Interface';\n\n/*\n    {\n        from: {\n            address: '0x5e8cxxxxxe741',\n            env: 'Ethereum'\n        },\n        to: 'My Loopring',\n        amount: 25987.09324,\n        fee: {\n            unit: 'ETH',\n            value: 0.0993\n        },\n        memo: 'NoteNoteNoteNoteNoteNoteNote',\n        time: 3,\n        txnHash: '0x2b21xxxxxxx02',\n        status: TransactionStatus.success\n    },\n */\n\nexport function useGetTxs() {\n\n    const { accountId, apiKey } = useAccount()\n\n    const userApi = useUserAPI()\n\n    const [txs, setTxs] = useState<RawDataTransactionItem[]>()\n\n    useCustomDCEffect(async() => {\n\n        if (!userApi || !accountId || !apiKey) {\n            return\n        }\n\n        const txs = await userApi.getUserTranferList({ accountId }, apiKey)\n\n        let tmpTx: RawDataTransactionItem[] = []\n\n        txs.userTransfers.forEach((item: any, index: number) => {\n            tmpTx.push({from: {\n                    address: item.senderAddress,\n                    env: ''\n                },\n                to: {\n                    address: item.receiverAddress,\n                    env: ''\n                },\n                amount: item.amount,\n                fee: {\n                    unit: item.feeTokenSymbol,\n                    value: item.feeAmount\n                },\n                memo: item.symbol,\n                time: item.timestamp,\n                txnHash: item.hash,\n                status: item.status,\n                token:item.token,\n                tradeType:TransactionTradeTypes.allTypes,\n            })\n        })\n\n        setTxs(tmpTx)\n\n    }, [accountId, apiKey, userApi])\n\n    return {\n        txs,\n    }\n}\n","\nimport React from 'react'\nimport { OrderHistoryTable } from '@loopring-web/component-lib'\nimport { WithTranslation, withTranslation } from 'react-i18next'\nimport { Box, Paper } from '@material-ui/core'\nimport styled from '@emotion/styled'\n\n// const rawDataOrderHistory: any[] = [\n//     ['Sell', [{type: 'out', key: 'ETH', value: 25}, {type: 'in', key: 'LRC', value: 100}], 0.12, [{\n//         type: 'out',\n//         key: 'ETH',\n//         value: 25\n//     }, {type: 'in', key: 'LRC', value: 100}], 0.0054, 3, 'Filled'],\n//     ['Buy', [{type: 'out', key: 'ETH', value: 25}, {type: 'in', key: 'LRC', value: 100}], 0.12, [{\n//         type: 'out',\n//         key: 'ETH',\n//         value: 25\n//     }, {type: 'in', key: 'LRC', value: 100}], 0.0054, 3, 'Filled'],\n//     ['Buy', [{type: 'out', key: 'ETH', value: 25}, {type: 'in', key: 'LRC', value: 100}], 0.12, [{\n//         type: 'out',\n//         key: 'ETH',\n//         value: 25\n//     }, {type: 'in', key: 'LRC', value: 100}], 0.0054, 3, 'Cancelled'],\n//     ['Sell', [{type: 'out', key: 'ETH', value: 25}, {type: 'in', key: 'LRC', value: 100}], 0.12, [{\n//         type: 'out',\n//         key: 'ETH',\n//         value: 25\n//     }, {type: 'in', key: 'LRC', value: 100}], 0.0054, 3, 'Filled'],\n//     ['Sell', [{type: 'out', key: 'ETH', value: 25}, {type: 'in', key: 'LRC', value: 100}], 0.12, [{\n//         type: 'out',\n//         key: 'ETH',\n//         value: 25\n//     }, {type: 'in', key: 'LRC', value: 100}], 0.0054, 3, 'Cancelled'],\n// ]\n\nconst StylePaper = styled(Box)`\n    display: flex;\n    flex-direction: column;\n    width: 100%;\n    height: 100%;\n    flex: 1;\n    background-color: ${({ theme }) => theme.colorBase.background().default};\n    border-radius: ${({ theme }) => theme.unit}px;\n    padding: 20px;\n\n    .title {\n        font-family: Gilroy-Medium;\n        font-size: ${({ theme }) => theme.unit * 3}px;\n        line-height: 19px;\n    }\n\n    .tableWrapper {\n        display: flex;\n        flex: 1;\n        margin-top: 20px;\n        border: 1px solid ${({ theme }) => theme.colorBase.borderColor};\n        border-radius: ${({ theme }) => theme.unit}px;\n        padding: 26px;\n\n        .rdg {\n            flex: 1;\n        }\n    }\n` as typeof Paper;\n\nconst OrderPanel = withTranslation('common')((rest: WithTranslation) => {\n    const container = React.useRef(null);\n    const [pageSize, setPageSize] = React.useState(10);\n    React.useEffect(() => {\n        // @ts-ignore\n        let height = container?.current?.offsetHeight;\n        if (height) {\n            setPageSize(Math.floor((height - 120) / 44) - 2);\n        }\n    }, [container, pageSize]);\n\n    return (\n        <>\n            <StylePaper ref={container}>\n                <div className=\"title\">Order History</div>\n                <div className=\"tableWrapper\">\n                    <OrderHistoryTable {...{\n                        pagination: {\n                            pageSize: pageSize\n                        },\n                        rawData: [],\n                        ...rest\n                    }} />\n                </div>\n            </StylePaper>\n        </>\n    )\n})\n\nexport default OrderPanel\n","import styled from '@emotion/styled';\nimport { Box, Button, Divider, Grid, Switch, Typography } from '@material-ui/core';\nimport React from 'react';\nimport { UpColor, Currency, DropDownIcon } from '@loopring-web/component-lib/src/static-resource';\nimport {\n    BtnLanguage,\n    OutlineSelect,\n    OutlineSelectItem, QRCodePanel,\n    TypographyStrong, useSettings\n} from '@loopring-web/component-lib';\nimport { Trans, useTranslation, WithTranslation, withTranslation } from 'react-i18next';\nimport { useTheme } from '@emotion/react';\nimport { LanguageKeys } from '@loopring-web/component-lib/static-resource';\n\n// const MuiModalStyled = styled(MuiModal)`\n//   //background: ${({theme}) => theme.colorBase.background().secondary};\n//   // .MuiBackdrop-root{\n//   //   z-index: -1;\n//   //   background-color: ${({theme}) => theme.colorBase.background().outline};\n//   // }\n//   display: flex;\n//   align-items: center;\n//   justify-content: center;\n// ` as typeof MuiModal;\n// const BlockStyled = styled(Box)`\n//   ${({theme}) => theme.border.defaultFrame({c_key: 'blur', d_R: 1})};\n//   background: ${({theme}) => theme.colorBase.background().secondary};\n//   max-height: var(--panel-setting-height);\n//   max-width: var(--panel-setting-width);\n//   display: flex;\n//   justify-content: space-around;\n//   align-items: center;\n//   overflow: scroll;\n//   padding: ${({theme}) => theme.unit*8}px\n// `;\n\nconst StyledPaper = styled(Grid)`\n  width: 100%;\n  height: 100%;\n  background-color: ${({theme}) => theme.colorBase.background().default};\n  ${({theme}) => theme.border.defaultFrame({c_key: 'blur', d_R: 1})};\n`\n\nconst StyledSwitch = styled(Switch)(({theme}) => ({\n    \"& .Mui-checked\": {\n        color: theme.colorBase.textPrimary,\n        '& + .MuiSwitch-track.MuiSwitch-track': {\n            border: `solid ${theme.colorBase.success}`,\n        },\n        '& .MuiSwitch-thumb': {\n            backgroundColor: theme.colorBase.success,\n        }\n    },\n    '& .MuiSwitch-track': {\n        border: `solid ${theme.colorBase.error}`,\n        opacity: 1\n    },\n    '& .MuiSwitch-thumb': {\n        backgroundColor: theme.colorBase.error,\n    }\n}));\n\nexport const BtnCurrency = ({t, currency, label, handleChange}: any) => {\n    const [state, setState] = React.useState<string>(currency ? currency : Currency.dollar);\n    const _handleChange = React.useCallback((event: React.ChangeEvent<any>) => {\n        setState(event.target.value);\n        if (handleChange) {\n\n            handleChange(event.target.value)\n        }\n    }, [handleChange])\n    return <OutlineSelect aria-label={t(label)} IconComponent={DropDownIcon}\n                          labelId=\"language-selected\"\n                          id=\"language-selected\"\n                          value={state} autoWidth\n                          onChange={_handleChange}>\n        <OutlineSelectItem value={Currency.dollar}>$ {t('labelUSDollar')}</OutlineSelectItem>\n            <OutlineSelectItem value={Currency.yen}>¥ {t('labelCNYYuan')}</OutlineSelectItem>\n    </OutlineSelect>\n}\n\nconst StyledDivider = styled(Divider)`\n  margin: ${({theme}) => theme.unit}px 0 ${({theme}) => theme.unit}px 0px;\n`\nconst DividerBlock = styled(Divider)`\n  margin: 0;\n  flex: 1;\n  width: 1px;\n  height: ${({theme}) => theme.unit * 3}px;\n  background: ${({theme}) => theme.colorBase.focus};\n`\n\n\n\nexport const SettingPanel = withTranslation(['common', 'layout'])(({t,i18n, ...rest}: & WithTranslation) => {\n    const theme = useTheme();\n    const {setUpColor,setLanguage,setCurrency,currency,upColor} = useSettings()\n    const language = i18n.language;\n    const handleOnLanguageChange = (lang: LanguageKeys) => {\n        setLanguage(lang);\n        i18n.changeLanguage(lang);\n    }\n    const handleOnCurrencyChange = (value: any) => {\n        setCurrency(value);\n    }\n    const handleColorChange = (e:any) => {\n        if(e.target.checked){\n            setUpColor(UpColor.green) ;\n        }else{\n            setUpColor(UpColor.red);\n        }\n    }\n    return <Grid container direction={'column'} justifyContent={'space-between'} alignItems={'stretch'} flexWrap={'nowrap'}>\n        <Typography variant={'h4'} component={'h3'} marginY={1} paddingLeft={2}>{t('labelTitleSecurity')}</Typography>\n        <StyledPaper item xs={12} display={'flex'} flexDirection={'column'} marginBottom={2} paddingY={2}>\n            <Box component={'section'} display={'flex'} flexDirection={'column'}>\n                <Typography variant={'h5'} component={'h4'} paddingX={2}>{t('labelTitleResetL2Keypair')}</Typography>\n                <StyledDivider/>\n                <Grid container display={'flex'} flexDirection={'row'} justifyContent={'stretch'}\n                      alignItems={'flex-start'} paddingX={2} marginBottom={2}>\n                    <Grid item xs={8} display={'flex'} flexDirection={'column'}>\n                        <Typography variant={'body1'} component={'p'}>\n                            <Trans i18nKey=\"resetDescription\">\n                                Create a new signing key for layer-2 authentication (no backup needed). This will\n                                <TypographyStrong component={'span'}>cancel all your pending orders</TypographyStrong>.\n                            </Trans>\n                        </Typography>\n                    </Grid>\n                    <Grid item xs={4} display={'flex'} flexDirection={'column'} justifyContent={'space-evenly'}\n                          alignItems={'flex-end'} alignSelf={'stretch'}>\n                        <Button variant={'outlined'} size={'medium'} color={'primary'}>{t('labelBtnReset')}</Button>\n                    </Grid>\n                    <Grid item xs={12} display={'flex'} flexDirection={'row'} justifyContent={'flex-end'}\n                          alignItems={'center'} alignSelf={'stretch'}>\n                        <Typography variant={'body2'} component={'p'}\n                                    paddingTop={1}>{t('labelHadChangPassword', {passDay: '14 hours'})}</Typography>\n                    </Grid>\n\n                </Grid>\n            </Box>\n            <Box component={'section'} display={'flex'} flexDirection={'column'}>\n                <Typography variant={'h5'} component={'h4'} paddingX={2}>{t('labelTitleExportAccount')}</Typography>\n                <StyledDivider/>\n                <Grid container display={'flex'} flexDirection={'row'} justifyContent={'stretch'}\n                      alignItems={'flex-start'} paddingX={2} marginBottom={2}>\n                    <Grid item xs={7} display={'flex'} flexDirection={'column'}>\n                        <Typography variant={'body1'} component={'p'}>{t('descriptionExportAccount')}</Typography>\n                    </Grid>\n                    <Grid item xs={5} display={'flex'} flexDirection={'column'} justifyContent={'space-evenly'}\n                          alignItems={'flex-end'} alignSelf={'stretch'}>\n                        <Grid item> <Button variant={'outlined'} size={'medium'}\n                                            color={'primary'}>{t('labelBtnExportAccount')}</Button></Grid>\n                    </Grid>\n                </Grid>\n            </Box>\n        </StyledPaper>\n\n        <Typography variant={'h4'} component={'h3'} marginY={1} paddingLeft={2}>{t('labelTitlePreferences')}</Typography>\n        <StyledPaper item xs={12} display={'flex'} flexDirection={'column'} marginBottom={2} paddingY={2}>\n            <Box component={'section'} display={'flex'} flexDirection={'column'}>\n                {/*<Typography variant={'h5'} component={'h4'} paddingX={2}>{t('labelTitleLayout')}</Typography>*/}\n                {/*<StyledDivider/>*/}\n                <Grid container display={'flex'} flexDirection={'row'} justifyContent={'stretch'}\n                      alignItems={'flex-start'} paddingX={2} marginBottom={2}>\n                    <Grid item xs={7} display={'flex'} flexDirection={'column'}>\n                        <Typography variant={'body1'} component={'p'}>{t('labelLanguage')}</Typography>\n                    </Grid>\n                    <Grid item xs={5} display={'flex'} flexDirection={'column'} justifyContent={'space-evenly'}\n                          alignItems={'flex-end'} alignSelf={'stretch'}>\n                        <Grid item>\n                            <BtnLanguage {...{\n                                t, ...rest,\n                                language,\n                                label: 'languageSetting',\n                                handleChange: handleOnLanguageChange\n                            }}></BtnLanguage>\n                        </Grid>\n                    </Grid>\n                </Grid>\n                <Grid container display={'flex'} flexDirection={'row'} justifyContent={'stretch'}\n                      alignItems={'flex-start'} paddingX={2} marginBottom={2}>\n                    <Grid item xs={7} display={'flex'} flexDirection={'column'}>\n                        <Typography variant={'body1'} component={'p'}>{t('labelCurrency')}</Typography>\n                    </Grid>\n                    <Grid item xs={5} display={'flex'} flexDirection={'column'} justifyContent={'space-evenly'}\n                          alignItems={'flex-end'} alignSelf={'stretch'}>\n                        <Grid item>\n                            <BtnCurrency {...{\n                                t, ...rest,\n                                currency,\n                                label: 'currencySetting',\n                                handleChange: handleOnCurrencyChange\n                            }}></BtnCurrency>\n\n                        </Grid>\n                    </Grid>\n                </Grid>\n                <Grid container display={'flex'} flexDirection={'row'} justifyContent={'stretch'}\n                      alignItems={'flex-start'} paddingX={2}>\n                    <Grid item xs={7} display={'flex'} flexDirection={'column'}>\n                        <Typography variant={'body1'} component={'p'}>{t('labelColors')}</Typography>\n                    </Grid>\n                    <Grid item xs={5} display={'flex'} flexDirection={'row'} justifyContent={'flex-end'}\n                          alignItems={'center'} alignSelf={'stretch'}>\n                        <Typography variant={'body1'} component={'span'} paddingX={2}>\n                            <Trans i18nKey=\"whichColorIsUp\">\n                                <span style={{\n                                    textTransform: 'capitalize',\n                                    color: upColor === UpColor.green ? theme.colorBase.success : theme.colorBase.error\n                                }}>{{up: upColor === UpColor.green ? t('labelgreen') : t('labelred')}} up</span>\n                                and <span style={{\n                                textTransform: 'capitalize',\n                                color: upColor === UpColor.green ? theme.colorBase.error : theme.colorBase.success\n                            }}>{{down: upColor === UpColor.green ? t('labelred') : t('labelgreen')}} down</span>\n                            </Trans>\n                        </Typography>\n                        <StyledSwitch checked={upColor === UpColor.green} color=\"default\"\n                                      onChange={handleColorChange}/>\n                    </Grid>\n                </Grid>\n            </Box>\n\n        </StyledPaper>\n\n    </Grid>\n})\n\n// export const SettingPage = ({open,onClose}: { open:boolean, onClose:(e:any)=>void})=>{\n//     return  <MuiModalStyled\n//         open={open}\n//         onClose={onClose}\n//         aria-labelledby=\"modal-modal-title\"\n//         aria-describedby=\"modal-modal-description\"\n//     >\n//         <BlockStyled >\n//            <SettingPanel/>\n//         </BlockStyled>\n//     </MuiModalStyled>\n// }\n\n\n","import { useRouteMatch } from 'react-router'\n\nimport { Box, Paper } from '@material-ui/core'\nimport {\n    DepositPanel,\n    SubMenu,\n    SubMenuList as BasicSubMenuList,\n} from '@loopring-web/component-lib'\nimport { useTranslation, withTranslation } from 'react-i18next'\nimport styled from '@emotion/styled'\nimport { subMenuLayer2 } from '@loopring-web/component-lib/src/static-resource'\n\nimport TxPanel from './TxPanel'\nimport AssetPanel from './AssetPanel'\nimport TradePanel from './TradePanel'\nimport OrderPanel from './OrderPanel'\nimport { SettingPanel } from '../SettingPage';\nimport store from '../../stores';\nimport { AccountStatus } from '../../state_machine/account_machine_spec';\nimport { useModalProps } from '../../layouts/header/hook';\n\nexport const subMenu = subMenuLayer2;\nconst BoxStyle = styled(Box)`\n  ${({theme})=>`\n    background-color: ${theme.colorBase.background().default};\n    width: 100%;\n    min-width:auto;\n    ${theme.border.defaultFrame({c_key: 'blur'})};\n    & > div{\n      background-color:initial;\n      border:0;\n      width:auto;\n      min-width: var(--swap-box-width);\n      max-width: 520px;\n    }\n    `\n  }\n   \n` as typeof Box\n\nconst SubMenuList = withTranslation(['layout','common'], { withRef: true })(BasicSubMenuList);\nexport const Layer2Page = () => {\n\n    let match: any = useRouteMatch(\"/layer2/:item\")\n    const {status: accStatus} = store.getState().account;\n    const {t,...rest} = useTranslation()\n    const selected = match?.params.item ?? 'assets';\n    const {depositProps} = useModalProps()\n\n    return <>  { accStatus === AccountStatus.NOACCOUNT\n    || accStatus === AccountStatus.DEPOSITING\n    || accStatus === AccountStatus.DEPOSIT_TO_CONFIREM ?\n        <BoxStyle display={'flex'} flexWrap={'wrap'} alignItems={'center'} justifyContent={'center'} alignContent={'flex-start'}>\n            <DepositPanel  {...{\n                ...rest, ...depositProps,\n                title: t('depositTitleAndActive'),\n                description: 'depositAndActiveDescription'\n            }} > </DepositPanel>\n        </BoxStyle>: <>\n            <Box width={'200px'} display={'flex'} justifyContent={'stretch'} marginRight={3}>\n                <SubMenu>\n                    <SubMenuList selected={selected} subMenu={subMenu as any} />\n                </SubMenu>\n            </Box>\n            <Box minHeight={420} display={'flex'} alignItems={'stretch'} flexDirection={'column'} marginTop={0} flex={1}>\n                {selected === 'assets' && <AssetPanel />}\n                {selected === 'transactions' && <TxPanel />}\n                {selected === 'trades' && <TradePanel />}\n                {selected === 'orders' && <OrderPanel />}\n                {selected === 'setting' && <SettingPanel />}\n            </Box>\n        </>\n    }\n        </>\n\n\n\n}\n","import React from 'react';\nimport { AmmMap, useAmmMap } from '../../../stores/Amm/AmmMap';\nimport { AmmDetail, CustomError, ErrorMap, } from '@loopring-web/component-lib/src/static-resource';\nimport { useTicker } from '../../../stores/ticker';\nimport { PoolsRow } from '@loopring-web/component-lib';\nimport { deepClone } from '../../../utils/obj_tools';\nimport { STATUS } from '../../../stores/constant';\nimport { useTokenMap } from '../../../stores/token';\n\nexport function useAmmMapUI<R extends { [ key: string ]: any }, I extends { [ key: string ]: any }>({pageSize}: { pageSize: number }) {\n    const [rawData, setRawData] = React.useState<Array<AmmDetail<any>> | []>([]);\n    const [page, setPage] = React.useState<number>(1);\n    // const [_ammTradeMap,setAmmTradeMap]  = React.useState<{[key in keyof R]?:PoolsRow<I>}>({});\n    const {coinMap} = useTokenMap();\n    const {\n        ammMap,\n        status: ammMapStatus,\n        errorMessage: errorAmmMap,\n        statusUnset: ammMapStatusUnset,\n        updateAmmMap,\n    } = useAmmMap();\n    const {\n        tickerMap,\n        status: tickerStatus,\n        errorMessage: errorTickerMap,\n        statusUnset: tickerStatusUnset,\n        updateTickers,\n    } = useTicker();\n    const updateRawData = () => {\n        try {\n            const _ammMap = deepClone(ammMap);\n            for (let tickerMapKey in tickerMap) {\n                _ammMap[ tickerMapKey ].tradeFloat = tickerMap[ tickerMapKey ]\n            }\n            setRawData(Object.keys(_ammMap).map((ammKey: string) => {\n                // @ts-ignore\n\n                if (coinMap) {\n                    _ammMap[ ammKey ][ 'coinAInfo' ] = coinMap[ _ammMap[ ammKey ][ 'coinA' ] ];\n                    _ammMap[ ammKey ][ 'coinBInfo' ] = coinMap[ _ammMap[ ammKey ][ 'coinB' ] ];\n\n                }\n                return  _ammMap[ ammKey ];\n            }) )\n        } catch (error) {\n            throw new CustomError({...ErrorMap.NO_TOKEN_MAP, options: error})\n        }\n\n    }\n\n\n    const updateTickersUI = React.useCallback((_page) => {\n        // if(page !== _page)  {\n        setPage(_page);\n        if (ammMap && Object.keys(ammMap).length > 0) {\n            // console.log('page get ticker',Object.keys(ammMap).length,page - 1 , page - 1 * pageSize + pageSize);\n            const keys = []\n            for (let i = (page - 1) * pageSize; i < Object.keys(ammMap).length && i < (page - 1) * pageSize + pageSize; i++) {\n                keys.push(Object.keys(ammMap)[ i ]);\n            }\n            updateTickers(keys);\n        }\n        // }\n        // else{\n        //\n        // }\n    }, [ammMap, page, pageSize, updateTickers])\n    React.useEffect(() => {\n        switch (tickerStatus) {\n            case \"ERROR\":\n                console.log(\"ERROR\", 'get ticker error,ui');\n                tickerStatusUnset()\n                break;\n            case \"PENDING\":\n                break;\n            case \"DONE\":\n                tickerStatusUnset()\n                updateRawData()\n                break;\n            default:\n                break;\n        }\n    }, [tickerStatus, tickerStatusUnset]);\n\n    // init AmmMap at begin\n    React.useEffect(() => {\n        if (!ammMap || Object.keys(ammMap).length === 0) {\n            updateAmmMap();\n        } else {\n            updateTickersUI(page)\n        }\n    }, []);\n\n\n    React.useEffect(() => {\n        switch (ammMapStatus) {\n            case \"ERROR\":\n                console.log(\"ERROR\", 'get ammMap error,ui');\n                ammMapStatusUnset();\n                break;\n            case STATUS.PENDING:\n                console.log(\"PENDING\", 'get ammMap error,ui');\n                // ammMapStatusUnset();\n                break;\n            case STATUS.DONE:\n                ammMapStatusUnset();\n                updateTickersUI(1)\n                break;\n            default :\n                break;\n        }\n    }, [ammMapStatus, ammMapStatusUnset, updateTickersUI]);\n    return {\n        page,\n        rawData,\n        updateTickersUI,\n    }\n}\n\n// export function useTickerUI({pageState:number,pageSize:}) {\n//\n//     React.useEffect(() => {\n//         if (!tickerMap || Object.keys(tickerMap).length === 0) {\n//             updateAmmMap();\n//         }else{\n//\n//         }\n//     }, [ammMap, updateAmmMap]);\n//     React.useEffect(() => {\n//         switch (ammMapStatus) {\n//             case \"ERROR\":\n//                 console.log(\"ERROR\");\n//                 ammMapStatusUnset()\n//                 break;\n//             case \"PENDING\":\n//                 ammMapStatusUnset()\n//                 break;\n//             default:\n//                 break;\n//         }\n//     }, [ammMapStatus, ammMapStatusUnset]);\n//     return {\n//         ammMapObj: {\n//             ammMap,\n//             status: ammMapStatus,\n//             errorMessage: errorAmmMap\n//         }\n//     }\n// }","import { WithTranslation, withTranslation } from 'react-i18next'\nimport { Box, } from '@material-ui/core'\nimport styled from '@emotion/styled'\n\nimport React from 'react';\nimport { useAmmMapUI } from './hook';\n\nimport { PoolsTable } from '@loopring-web/component-lib';\n\nconst StylePaper = styled(Box)`\n  width: 100%;\n  height: 100%;\n  flex: 1;\n  background-color: ${({theme}) => theme.colorBase.background().default};\n  border-radius: ${({theme}) => theme.unit}px;\n\n  .rdg {\n    flex: 1;\n  }\n\n` as typeof Box;\n\n\nexport const PoolsPanel = withTranslation('common')(<R, I>({t, ...rest}: WithTranslation) => {\n    const container = React.useRef(null);\n    const [pageSize, setPageSize] = React.useState(10);\n    const {updateTickersUI,rawData, page} = useAmmMapUI({pageSize});\n\n    React.useEffect(() => {\n        // @ts-ignore\n        let height = container?.current?.offsetHeight;\n        if (height) {\n            setPageSize(Math.floor((height - 120) / 44) - 1);\n        }\n    }, [container, pageSize]);\n\n    const handlePageChange = React.useCallback((page) =>{\n        updateTickersUI(page)\n    },[updateTickersUI]);\n    return (\n        <>\n            <StylePaper display={'flex'} flexDirection={'column'} ref={container}>\n                <PoolsTable {...{\n                    rawData,\n                    handlePageChange,\n                    page,\n                    pagination: {\n                        pageSize\n                    }\n                }} />\n            </StylePaper>\n        </>\n    )\n})\n\n","import React from \"react\";\nimport { AmmData, AmmInData, CoinInfo, IBData } from \"@loopring-web/component-lib/static-resource\";\nimport { useCustomDCEffect } from \"hooks/common/useCustomDCEffect\";\nimport { ammpoolAPI, exchangeAPI } from \"stores/apis/api\";\n\nimport { CustomError, ErrorMap, TradeFloat } from '@loopring-web/component-lib/src/static-resource';\n\nimport { coinPairInit } from '../../../hooks/help/coinPairInit';\nimport { updateWallet } from '../../../hooks/help/updateWallet';\nimport { pairTitleBlock, pairTitleDone } from '../../../hooks/help/pairTitleBlock';\nimport { getExistedMarket } from 'loopring-sdk';\nimport { makeTickView } from '../../../hooks/help/makeTickView';\nimport { AmmPanelType, SwapTradeData } from '@loopring-web/component-lib/index';\nimport { useWalletLayer2 } from '../../../stores/walletLayer2';\nimport * as fm from 'loopring-sdk';\nimport { RawDataTradeItem } from '@loopring-web/component-lib/components/tableList/tradeTable/TradeTable';\nimport { makeMarketArray } from '../../SwapPage/hook';\nimport { useTokenMap } from '../../../stores/token';\n\nconst ammPairInit = ({pair, _ammCalcData,ammType,tokenMap, coinMap, walletMap}:any)=>{\n    _ammCalcData.coinInfoMap = coinMap;\n    if(ammType == AmmPanelType.Deposit) {\n        _ammCalcData.myCoinA = {\n            belong: pair.coinAInfo.simpleName,\n            balance: walletMap ? walletMap[ pair.coinAInfo.simpleName ]?.count : 0,\n        }\n        _ammCalcData.myCoinB = {\n            belong: pair.coinBInfo.simpleName,\n            balance: walletMap ? walletMap[ pair.coinBInfo.simpleName ]?.count : 0,\n        }\n    }else{\n        const key = `AMM-${pair.coinAInfo.simpleName}-${pair.coinBInfo.simpleName}`\n        debugger\n        _ammCalcData.myCoinA = {\n            belong: pair.coinAInfo.simpleName,\n            balance: walletMap ? walletMap[ key ]?.count : 0,\n        }\n        _ammCalcData.myCoinB = {\n            belong: pair.coinBInfo.simpleName,\n            balance: walletMap ?walletMap[ key ]?.count : 0,\n        }\n    }\n\n\n        // myCoinA:IBData<T>,\n        // myCoinB:IBData<T>,\n        // AtoB:number,\n        // coinInfoMap: CoinMap<T, CoinInfo<T>>,\n        // walletMap: WalletMap<T, WalletCoin<T>>,\n        // AmmWalletMap: WalletMap<T, WalletCoin<T>>,\n    //     slippage: number | string\n    // slippageTolerance: Array<number | string>,\n    //     fee: string,\n   return  _ammCalcData\n}\nexport const useAmmPanel = <C extends { [ key: string ]: any }>({pair,ammType}:{pair:{coinAInfo: CoinInfo<C> | undefined, coinBInfo: CoinInfo<C> | undefined},ammType:keyof typeof AmmPanelType}) => {\n    const walletLayer2State = useWalletLayer2();\n    const {coinMap, tokenMap, marketArray, marketCoins} = useTokenMap()\n\n    const [ammCalcData, setAmmCalcData] = React.useState<AmmInData<C>|undefined>();\n    const [ammDepositData, setAmmDepositData] = React.useState<AmmData<IBData<C>,C>>({\n        coinA: {belong: undefined} as unknown as IBData<C>,\n        coinB: {belong:undefined} as unknown  as IBData<C>,\n        slippage: .5\n    } as AmmData<IBData<C>,C>) ;\n    const [ammWithdrawData, setAmmWithdrawData] = React.useState({\n        coinA: {belong: undefined} as unknown as IBData<C>,\n        coinB: {belong:undefined} as unknown  as IBData<C>,\n        slippage: .5\n    } as AmmData<IBData<C>,C>);\n    const [ammBtnI18nKey, setAmmBtnI18nKey] = React.useState<string | undefined>(undefined);\n\n    const handleDepositEvent = React.useCallback((data: AmmData<IBData<C>>, type: 'coinA' | 'coinB') => {\n        console.log('handleDepositEvent', data, type);\n    }, []);\n\n    const handleWithDrawEvent = React.useCallback((data: AmmData<IBData<C>>, type: 'coinA' | 'coinB') => {\n        console.log('handleDepositEvent', data, type);\n    }, []);\n\n    const onAmmWithdrawClick = React.useCallback( (data) => {\n        console.log('onAmmWithdrawClick', data);\n    },[]);\n    const onAmmDepositClick  = React.useCallback((data) => {\n        console.log('onAmmDepositClick', data);\n    } ,[]);\n    \n\n    React.useEffect(() => {\n        initAmmData(pair)\n    }, []);\n    // const calculateTradeData = (type: 'sell' | 'buy', _tradeData: SwapTradeData<IBData<C>>): { _ammCalcData: AmmInData<C>, _tradeData: SwapTradeData<IBData<C>> } => {\n    //     //if(`${pair.coinAInfo?.simpleName}-${pair.coinBInfo?.simpleName}` === coinKey)\n    //     if (_tradeData[ type ].tradeValue && ammCalcData) {\n    //         type === 'sell' ? _tradeData[ 'buy' ].tradeValue = fm.toBig(_tradeData[ 'sell' ].tradeValue).times(ammCalcData.StoB).toNumber()\n    //             : _tradeData[ 'sell' ].tradeValue = fm.toBig(_tradeData[ 'buy' ].tradeValue).times(ammCalcData.BtoS).toNumber()\n    //     }\n    //     //TODO: renew  ammCalcData\n    //     let _ammCalcData = {...ammCalcData} as AmmInData<C>;\n    //     return {_tradeData, _ammCalcData}\n    // }\n    // panelType?:keyof AmmPanelType,\n    // type?: 'deposit' | 'withdraw',\n    // _ammDepositData?: AmmDepo<IBData<C>>) => {\n    // if (panelType\n    //     && type  //=== `${ammCalcData.coinSell}-${ammCalcData.coinBuy}`\n    //     && _tradeData\n    //     && type\n    //     && (!tradeData || (tradeData[ type ].tradeValue !== _tradeData[ type ].tradeValue))) {\n    //     // const {_tradeData: td, _ammCalcData} = calculateTradeData(type, _tradeData)\n    //     // setTradeData(td)\n    //     // setAmmCalcData(_ammCalcData)\n    //\n    // } else {\n\n    const initAmmData = async (pair: any)=>{\n\n            let _ammCalcData: Partial<AmmInData<C>> = {}\n            let _tradeFloat: Partial<TradeFloat> = {}\n            let _tradeArray: Array<Partial<RawDataTradeItem>> | undefined = undefined;\n            const walletMap =  walletLayer2State.walletLayer2? updateWallet().walletMap:undefined;\n            _ammCalcData = ammPairInit({pair,ammType, _ammCalcData, tokenMap, coinMap, walletMap})\n\n            setAmmCalcData({...ammCalcData, ..._ammCalcData} as AmmInData<C>);\n            setAmmDepositData({\n                coinA: _ammCalcData.myCoinA as IBData<C>,\n                coinB: _ammCalcData.myCoinB as IBData<C>,\n                slippage: 0.5\n            })\n            // let {\n            //     amm,\n            //     market\n            // } = getExistedMarket(marketArray, _ammCalcData.coinSell as string, _ammCalcData.coinBuy as string);\n            // let apiList = [];\n            // //TODO wallet saga done\n            // if (marketArray && amm && market && ammMap) {\n            //     // let pairPromise =  usePairTitleBlock({market})\n            //     apiList = [\n            //         exchangeApi.getMarketTrades({market}),\n            //         pairTitleBlock({coinKey: market, ammKey: amm, ammMap})\n            //     ];\n            //     //HiGH: this need add websocket to update infr ticker ammpoolsbalace\n            //     // @ts-ignore\n            //     Promise.all([...apiList]).then(\n            //         ([{marketTrades}, {ammpoolsbalance, tickMap}]: any[]) => {\n            //             if (tokenMap) {\n            //                 let {_ammCalcData: _td, _pair} = pairTitleDone({\n            //                     market,\n            //                     ammpoolsbalance,\n            //                     tokenMap,\n            //                     _ammCalcData,\n            //                     coinMap,\n            //                     marketCoins\n            //                 })\n            //                 _ammCalcData = _td;\n            //                 _tradeFloat = makeTickView(tickMap[ market ])\n            //                 _tradeArray = makeMarketArray(market, marketTrades)\n            //                 // @ts-ignore\n            //                 setAmmCalcData(_ammCalcData as AmmInData<C>);\n            //                 // @ts-ignore\n            //                 setTradeFloat(_tradeFloat);\n            //                 setTradeArray(_tradeArray as RawDataTradeItem[])\n            //                 setPair(_pair)\n            //                 setTradeData({\n            //                     sell: {\n            //                         belong: _ammCalcData.sellCoinInfoMap ? _ammCalcData.sellCoinInfoMap[ _ammCalcData.coinSell ]?.simpleName : undefined,\n            //                         balance: _ammCalcData.walletMap ? _ammCalcData.walletMap[ _ammCalcData.coinSell ]?.count : 0\n            //                     },\n            //                     // @ts-ignore\n            //                     buy: {\n            //                         belong: _ammCalcData.sellCoinInfoMap ? _ammCalcData.sellCoinInfoMap[ _ammCalcData.coinBuy ]?.simpleName : undefined,\n            //                         balance: _ammCalcData.walletMap ? _ammCalcData.walletMap[ _ammCalcData.coinBuy ]?.count : 0\n            //                     },\n            //                 } as SwapTradeData<IBData<C>>)\n            //             }\n            //\n            //\n            //         }).catch((error) => {\n            //         throw new CustomError({...ErrorMap.TRADE_LITE_SET_PAIR_ERROR, options: error})\n            //         //TODO solve error\n            //     })\n            //\n            // }\n        // }\n\n    }\n\n    React.useEffect(() => {\n        switch (walletLayer2State.status) {\n            case \"ERROR\":\n                walletLayer2State.statusUnset();\n                // setState('ERROR')\n                //TODO: show error at button page show error  some retry dispat again\n                break;\n            case \"DONE\":\n                walletLayer2State.statusUnset();\n                const {walletMap} = updateWallet();\n                // if (walletMap && ammCalcData) {\n                //     setAmmCalcData({...ammCalcData, walletMap} as AmmInData<C>);\n                //     setTradeData({\n                //         sell: {\n                //             belong: ammCalcData.sellCoinInfoMap ? ammCalcData.sellCoinInfoMap[ ammCalcData.coinSell ]?.simpleName : undefined,\n                //             balance: walletMap ? walletMap[ ammCalcData.coinSell ]?.count : 0\n                //         },\n                //         // @ts-ignore\n                //         buy: {\n                //             belong: ammCalcData.sellCoinInfoMap ? ammCalcData.sellCoinInfoMap[ ammCalcData.coinBuy ]?.simpleName : undefined,\n                //             balance: walletMap ? walletMap[ ammCalcData.coinBuy ]?.count : 0\n                //         },\n                //     } as SwapTradeData<IBData<C>>)\n                // }\n                break;\n            default:\n                break;\n\n        }\n    }, [walletLayer2State.status])\n\n   \n    return {\n        ammCalcData,\n        ammDepositData,\n        ammWithdrawData,\n        handleDepositEvent,\n        handleWithDrawEvent,\n        onAmmWithdrawClick,\n        onAmmDepositClick,\n        ammBtnI18nKey\n    }\n}","import { AmmPanel, AmmPanelType, AmmProps } from '@loopring-web/component-lib';\nimport { AmmData, AmmInData, CoinInfo, IBData } from '@loopring-web/component-lib/static-resource';\nimport { useAmmPanel } from './hooks';\nimport React from 'react';\n\nexport const AmmPanelView = <T extends AmmData<C extends IBData<I> ? C : IBData<I>>, I,\n    ACD extends AmmInData<I>,\n    C = IBData<I>>({pair,ammType,...rest}: { pair:{coinAInfo: CoinInfo<C> | undefined, coinBInfo: CoinInfo<C> | undefined},ammType?:keyof typeof AmmPanelType} & any) => {\n    const {ammCalcData,\n        ammDepositData,\n        ammWithdrawData,\n        handleDepositEvent,\n        handleWithDrawEvent,\n        onAmmWithdrawClick,\n        onAmmDepositClick} = useAmmPanel({pair, ammType:ammType?ammType:AmmPanelType.Deposit})\n\n    // const [index, setIndex] = React.useState(AmmPanelTypeMap[ tabSelected ]);\n\n    return <>\n        <AmmPanel {...{...rest}}\n                  ammWithdrawData={ammWithdrawData}\n                  ammDepositData={ammDepositData}\n                  ammCalcData={ammCalcData}\n                  handleDepositEvent={handleDepositEvent}\n                  handleWithDrawEvent={handleWithDrawEvent}\n                  onAmmWithdrawClick={onAmmWithdrawClick}\n                  onAmmDepositClick={onAmmDepositClick}\n                  tabSelected = {ammType?ammType:AmmPanelType.Deposit}\n\n        />\n    </>\n\n}","import React from 'react';\nimport { withTranslation } from 'react-i18next';\nimport { AmmRecordTable, AmmTradeType, TradeBtnStatus, TradeTitle, useSettings } from '@loopring-web/component-lib';\nimport {\n    AmmDetailExtendProps,\n    AmmInData,\n    CoinInfo,\n    Currency,\n    FloatTag,\n    getThousandFormattedNumbers,\n    PriceTag\n} from '@loopring-web/component-lib/static-resource';\nimport { Box, Breadcrumbs, Grid, Hidden, Link, Typography, } from '@material-ui/core';\nimport { AmmPanelView } from '../AmmPanel';\n// import { useSwapNew } from '../../SwapPage/hook';\nimport moment from 'moment';\nimport styled from '@emotion/styled/';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\n\nimport { MyAmmLP } from '@loopring-web/component-lib/src/static-resource';\nimport { AmmRecordRow } from '@loopring-web/component-lib/components/tableList/ammRecordTable/Interface';\nimport { useCoinPair } from './hooks';\n\nconst Style = styled.div`\n  color: #fff;\n`\n//TODO: FIXED:  demo data\nconst tradeData: any = {\n    coinA: {belong: 'ETH', balance: 0.3, tradeValue: 0},\n    coinB: {belong: 'LRC', balance: 1000, tradeValue: 0}\n};\nconst coinMap = {\n    ETH: {\n        icon: 'https://exchange.loopring.io/assets/images/ethereum/assets/0x9A0aBA393aac4dFbFf4333B06c407458002C6183/logo.png',\n        name: 'ETH',\n        simpleName: 'ETH',\n        description: '',\n        company: 'ETH'\n    },\n    LRC: {\n        icon: 'https://exchange.loopring.io/assets/images/ethereum/assets/0x565aBA393aac4dFbFf4333B06c407458002C6183/logo.png',\n        name: 'LRC',\n        simpleName: 'LRC',\n        description: '',\n        company: 'LRC'\n    },\n    USTD: {\n        icon: 'https://exchange.loopring.io/assets/images/ethereum/assets/0x565aBA393aac4dFbFf4333B06c407458002C6183/logo.png',\n        name: 'USTD',\n        simpleName: 'USTD',\n        description: '',\n        company: 'USTD'\n    }\n}\nconst ammCalcData = {\n    myCoinA: {belong: 'ETH', balance: 1000, tradeValue: 0},\n    myCoinB: {belong: 'LRC', balance: 1000, tradeValue: 0},\n    AtoB: 50,\n    coinInfoMap: coinMap,\n    slippage: 0.5,\n    slippageTolerance: [0.1, 0.5, 1, 'slippage:N'],\n    fee: '1%'\n};\n\nlet btnShowTradeStatus: keyof typeof TradeBtnStatus = TradeBtnStatus.AVAILABLE;\nconst onShowTrade = () => {\n};\n\nconst coinPairInfo: AmmDetailExtendProps<AmmInData<any>, any> = {\n    // tradeCalcData:,\n    ammCalcData: ammCalcData,\n    activity: {\n        totalRewards: 1232141,\n        myRewards: 122,\n        rewardToken: coinMap.USTD as CoinInfo<any>,\n        duration: {\n            from: new Date('2021-1-1'),\n            to: new Date()\n        }\n    },\n    coinAInfo: coinMap[ 'ETH' ] as CoinInfo<any>,\n    coinBInfo: coinMap[ 'LRC' ] as CoinInfo<any>,\n    tradeFloat: {\n        percent: 1000,\n        timeUnit: '24h',\n        priceYuan: 100,\n        priceDollar: 1.23123,\n        floatTag: FloatTag.increase,\n        // tagNew: false,\n    },\n    amountDollar: 197764.89,\n    amountYuan: 194.89,\n    totalLPToken: 12132131,\n    totalA: 0.002,\n    totalB: 12344,\n    rewardToken: 'LRC',\n    rewardValue: 13,\n    feeA: 121,\n    feeB: 1232,\n    isNew: true,\n    isActivity: false,\n}\nconst myAmm: MyAmmLP<any> = {\n    feeA: 122,\n    feeB: 21,\n    feeDollar: 0.0012,\n    feeYuan: 0.0312,\n    reward: 123,\n    rewardToken: coinMap.USTD as CoinInfo<any>,\n    balanceA: 12131,\n    balanceB: 0.0012,\n    balanceYuan: 1232131,\n    balanceDollar: 232,\n}\nconst ammRecordArray: AmmRecordRow<any>[] = [\n    {\n        type: AmmTradeType.add,\n        coinA: coinMap[ 'ETH' ] as CoinInfo<any>,\n        coinB: coinMap[ 'LRC' ] as CoinInfo<any>,\n        totalDollar: 12,\n        totalYuan: 194.89,\n        amountA: 122,\n        amountB: 231,\n        time: moment().add(-1, 'days').toDate().getTime()\n    },\n    {\n        type: AmmTradeType.remove,\n        coinA: coinMap[ 'ETH' ] as CoinInfo<any>,\n        coinB: coinMap[ 'LRC' ] as CoinInfo<any>,\n        totalDollar: 12,\n        totalYuan: 194.89,\n        amountA: 122,\n        amountB: 231,\n        time: moment().add(-100, 'days').toDate().getTime()\n    },\n    {\n        type: AmmTradeType.swap,\n        coinA: coinMap[ 'ETH' ] as CoinInfo<any>,\n        coinB: coinMap[ 'LRC' ] as CoinInfo<any>,\n        totalDollar: 12,\n        totalYuan: 194.89,\n        amountA: 122,\n        amountB: 231,\n        time: moment().add(-15, 'days').toDate().getTime()\n    },\n    {\n        type: AmmTradeType.swap,\n        coinA: coinMap[ 'ETH' ] as CoinInfo<any>,\n        coinB: coinMap[ 'LRC' ] as CoinInfo<any>,\n        totalDollar: 12,\n        totalYuan: 194.89,\n        amountA: 122,\n        amountB: 231,\n        time: moment().add(-3, 'hours').toDate().getTime()\n    },\n    {\n        type: AmmTradeType.swap,\n        coinA: coinMap[ 'ETH' ] as CoinInfo<any>,\n        coinB: coinMap[ 'LRC' ] as CoinInfo<any>,\n        totalDollar: 12,\n        totalYuan: 194.89,\n        amountA: 122,\n        amountB: 231,\n        time: moment().add(-75, 'second').toDate().getTime()\n    }\n]\n\n\n//******************** page code ************************//\nconst BoxStyled = styled(Box)`\n  ${({theme}) => theme.border.defaultFrame({c_key: 'blur'})};\n  background-color: ${({theme}) => theme.colorBase.background().default};\n`;\nconst StylePaper = styled(Box)`\n  width: 100%;\n  height: 100%;\n  flex: 1;\n  background-color: ${({theme}) => theme.colorBase.background().default};\n  border-radius: ${({theme}) => theme.unit}px;\n\n  .rdg {\n    flex: 1;\n  }\n\n` as typeof Box;\n\nconst applyProps = (index: number) => {\n    return {\n        id: `simple-tab-${index}`,\n        'aria-controls': `tabpanel-${index}`,\n    }\n}\n\nexport const CoinPairPanel = withTranslation('common')(({t, ...rest}: any) => {\n    //TODO: checkRouter\n\n    const {currency} = useSettings();\n    const {tradeFloat, pair} = useCoinPair();\n    const [tabIndex, setTabIndex] = React.useState<0 | 1>(0);\n    const [page, setPage] = React.useState(rest?.page ? rest.page : 1);\n    const handleChange = (event: any, newValue: 0 | 1) => {\n        setTabIndex(newValue);\n        setPage(1);\n    }\n    const _handlePageChange = React.useCallback((page: number) => {\n        setPage(page);\n    }, [])\n\n\n    return <>\n\n        <Grid container>\n            <Grid item xs={8}>\n                <Breadcrumbs aria-label=\"breadcrumb\">\n                    <Link color=\"textSecondary\" href=\"/#/liquidity/pools\">\n                        {t('labelAmmList')}\n                    </Link>\n                    <Typography color={'textSecondary'} display={'flex'} alignItems={'center'}\n                                justifyContent={'center'}\n                    >{tradeData.coinA.belong}-{tradeData.coinB.belong}</Typography>\n                </Breadcrumbs>\n            </Grid>\n            <Grid item xs={4} alignItems={'center'} justifyContent={'flex-end'} display={'flex'}>\n                <Link href=\"/#/liquidity/pools\" variant={'h5'}>\n                    {t('labelBack')}\n                </Link>\n            </Grid>\n        </Grid>\n        <Grid container marginTop={3}>\n            <Grid item xs={7}>\n\n                <TradeTitle {...{\n                    ...rest, t,\n                    ...pair,\n                    tradeFloat,\n                    isNew: false\n                }}></TradeTitle>\n            </Grid>\n        </Grid>\n        <Box flex={1} display={'flex'} alignItems={'stretch'} flexDirection=\"row\" marginTop={3}>\n            <Box flex={1} display={'flex'}>\n                <Grid container spacing={2} wrap={'nowrap'}>\n                    <Grid item md={5} xs={12} paddingRight={2} display={'flex'} flexDirection={'column'}\n                          alignItems={'stretch'} justifyContent={'space-between'}>\n                        <BoxStyled paddingY={3} paddingX={1 / 2 * 5} display={'flex'} flexDirection={'column'}>\n                            <Typography component={'p'} color={'textSecondary'} display={'flex'}\n                                        justifyContent={'space-between'}>\n                                <Typography component={'span'}\n                                            style={{textTransform: 'capitalize'}}>{t('labelLiquidity')}</Typography>\n                                <Typography component={'span'}\n                                            style={{textTransform: 'uppercase'}}>{t('labelAPY')}</Typography>\n                            </Typography>\n                            <Typography component={'p'} color={'textPrimary'} display={'flex'}\n                                        justifyContent={'space-between'} marginTop={1}>\n                                <>\n                                    <Typography\n                                        component={'span'}> {typeof coinPairInfo.amountDollar === 'undefined' ? 'N/A' :\n                                        currency === Currency.dollar ? PriceTag.Dollar + getThousandFormattedNumbers(coinPairInfo.amountDollar) : PriceTag.Yuan + getThousandFormattedNumbers(coinPairInfo.amountYuan ? coinPairInfo.amountYuan : 0)}\n                                    </Typography>\n                                    <Typography\n                                        component={'span'}> {coinPairInfo.tradeFloat ? coinPairInfo.tradeFloat.APY : 'N/A'}%\n                                    </Typography>\n                                </>\n\n\n                            </Typography>\n\n                            <Typography component={'p'} color={'textSecondary'} display={'flex'}\n                                        justifyContent={'space-between'} marginTop={2}>\n                                <Typography component={'span'}\n                                            color={'textSecondary'}>\n                                    <Hidden mdDown>{t('labelLPTotal')}</Hidden>{t('labelLPTokens')}</Typography>\n                                <Typography component={'span'}\n                                            color={'textSecondary'}>{coinPairInfo.totalLPToken}</Typography>\n                            </Typography>\n                            <Typography component={'p'} color={'textSecondary'} display={'flex'}\n                                        justifyContent={'space-between'} marginTop={1}>\n\n                                <Typography component={'span'}\n                                            color={'textSecondary'}>\n                                    <Hidden\n                                        mdDown>{t('labelLPTotal')}</Hidden>{coinPairInfo.ammCalcData?.myCoinA.belong}\n                                </Typography>\n\n                                <Typography component={'span'}\n                                            color={'textSecondary'}>{coinPairInfo.totalA}</Typography>\n                            </Typography>\n                            <Typography component={'p'} color={'textSecondary'} display={'flex'}\n                                        justifyContent={'space-between'} marginTop={1}>\n                                <Typography component={'span'}\n                                            color={'textSecondary'}>\n                                    <Hidden\n                                        mdDown>{t('labelLPTotal')}</Hidden>{coinPairInfo.ammCalcData?.myCoinB.belong}\n                                </Typography>\n                                <Typography component={'span'}\n                                            color={'textSecondary'}>{coinPairInfo.totalB}</Typography>\n                            </Typography>\n\n                        </BoxStyled>\n                        <BoxStyled paddingY={3} paddingX={1 / 2 * 5} display={'flex'} flexDirection={'column'}>\n                            <Typography component={'p'} color={'textSecondary'} display={'flex'}\n                                        justifyContent={'space-between'} alignItems={'center'}>\n                                <Typography component={'span'} color={'textSecondary'} variant={'body2'}>\n                                    {coinPairInfo.tradeFloat.timeUnit} {t('labelVolume')}\n                                </Typography>\n                                <Typography component={'span'} color={'textSecondary'}>\n                                    {t('labelFee')} {/* ' : '*/}\n                                </Typography>\n                            </Typography>\n                            <Typography component={'p'} color={'textSecondary'} display={'flex'}\n                                        justifyContent={'space-between'} marginTop={1} alignItems={'center'}>\n                                <Typography component={'span'} variant={'h4'} color={'textPrimary'}>\n                                    {currency === Currency.dollar ? PriceTag.Dollar + getThousandFormattedNumbers(coinPairInfo.tradeFloat.priceDollar)\n                                        : PriceTag.Yuan + getThousandFormattedNumbers(coinPairInfo.tradeFloat.priceYuan)}\n                                </Typography>\n                                <Typography noWrap textAlign={'center'} component={'span'} color={'textSecondary'}\n                                            variant={'body2'} textOverflow={'ellipsis'} display={'flex'}\n                                            alignItems={'center'}>\n                                    <Typography component={'span'} color={'inherit'} variant={'inherit'}\n                                                display={'flex'} flexDirection={'column'}>\n                                        <Typography component={'span'} color={'inherit'} variant={'inherit'}>\n                                            {coinPairInfo.ammCalcData?.myCoinA.belong}\n                                        </Typography>\n                                        <Typography component={'span'} color={'inherit'} variant={'inherit'}>\n                                            {coinPairInfo.feeA}\n                                        </Typography>\n                                    </Typography>\n                                    <Typography component={'span'} color={'inherit'} variant={'h5'}\n                                                paddingX={1}>{' + '}</Typography>\n                                    <Typography component={'span'} color={'inherit'} variant={'inherit'}\n                                                display={'flex'} flexDirection={'column'}>\n                                        <Typography component={'span'} color={'inherit'} variant={'inherit'}>\n                                            {coinPairInfo.ammCalcData?.myCoinB.belong}\n                                        </Typography>\n                                        <Typography component={'span'} color={'inherit'} variant={'inherit'}>\n                                            {coinPairInfo.feeB}\n                                        </Typography>\n                                    </Typography>\n                                </Typography>\n                            </Typography>\n                        </BoxStyled>\n                        <BoxStyled paddingY={3} paddingX={1 / 2 * 5} display={'flex'} flexDirection={'column'}>\n                            <Typography component={'p'} color={'textSecondary'} display={'flex'}\n                                        justifyContent={'space-between'}>\n                                <Typography component={'span'}\n                                            color={'textSecondary'}> {t('labelMyPoolShare')}</Typography>\n                            </Typography>\n                            <Typography component={'p'} color={'textSecondary'} display={'flex'}\n                                        justifyContent={'space-between'} marginTop={1}>\n                                <Typography component={'span'}\n                                            color={'textSecondary'}> {myAmm.balanceA ? myAmm.balanceA : 'N/A'} {coinPairInfo.ammCalcData?.myCoinA.belong} </Typography>\n                                <Typography component={'span'} color={'textSecondary'}\n                                            variant={'h5'}> -- </Typography>\n                            </Typography>\n                            <Typography component={'p'} color={'textSecondary'} display={'flex'}\n                                        justifyContent={'space-between'} marginTop={1}>\n                                <Typography component={'span'}\n                                            color={'textSecondary'}> {myAmm.balanceB ? myAmm.balanceA : 'N/A'} {coinPairInfo.ammCalcData?.myCoinB.belong}</Typography>\n                                <Typography component={'span'} color={'textSecondary'}\n                                            variant={'h5'}> -- </Typography>\n                            </Typography>\n                        </BoxStyled>\n                        <BoxStyled paddingY={3} paddingX={1 / 2 * 5} display={'flex'}\n                                   flexDirection={'column'}>\n                            <Box display={'flex'} flexDirection={'row'} justifyContent={'space-between'}>\n                                <Typography display={'flex'} flexDirection={'column'} component={'div'}>\n                                    <Typography variant={'body2'} component={'h5'} color={'textSecondary'}>\n                                        {t('labelReward')}\n                                    </Typography>\n                                    <Typography variant={'body1'} component={'span'} color={'textPrimary'}>\n                                        {typeof coinPairInfo.activity === 'undefined' ? 'N/A' : <>\n                                            <Typography\n                                                component={'span'}>{coinPairInfo.activity.totalRewards} </Typography>\n                                            <Typography\n                                                component={'span'}>{coinPairInfo.activity.rewardToken.simpleName}</Typography>\n                                        </>}\n                                    </Typography>\n                                </Typography>\n                                <Typography display={'flex'} flexDirection={'column'} alignItems={'flex-end'}\n                                            component={'div'}>\n                                    <Typography variant={'body2'} component={'h5'} color={'textSecondary'}>\n                                        {t('labelMyReward')}\n                                    </Typography>\n                                    <Typography variant={'body1'} component={'span'} color={'textPrimary'}>\n                                        {typeof coinPairInfo.activity === 'undefined' ? 'N/A' : <>\n                                            <Typography component={'span'}> {myAmm.reward} </Typography>\n                                            <Typography\n                                                component={'span'}> {coinPairInfo.activity.rewardToken.simpleName}</Typography></>}\n\n                                    </Typography>\n                                </Typography>\n                            </Box>\n                            <Typography alignSelf={'flex-start'} variant={'body2'} color={'textSecondary'}\n                                        component=\"span\" marginTop={1}>\n                                {t('labelDate')}:\n                                {typeof coinPairInfo.activity === 'undefined' ? 'N/A' : moment(coinPairInfo.activity.duration.from).format('L') + ' - ' + moment(coinPairInfo.activity.duration.to).format('L')}\n                            </Typography>\n\n                        </BoxStyled>\n                    </Grid>\n                    <Hidden mdDown>\n                        <Grid item md={7} paddingRight={2}>\n\n\n                        </Grid>\n                    </Hidden>\n                </Grid>\n            </Box>\n            <Box display={'flex'}>\n                <AmmPanelView pair={pair}/>\n            </Box>\n        </Box>\n        <Grid container marginTop={3}>\n            <Grid item xs={12}>\n                <Tabs value={tabIndex}\n                      onChange={handleChange}\n                      aria-label=\"tabs switch\">\n                    <Tab label={t('labelAll')} {...applyProps(0)} />\n                    <Tab label={t('labelMe')} {...applyProps(1)} />\n                </Tabs>\n\n                <StylePaper marginTop={2}>\n                    <AmmRecordTable rawData={ammRecordArray} handlePageChange={_handlePageChange} page={page}/>\n                </StylePaper>\n            </Grid>\n\n        </Grid>\n\n    </>\n})\n\n\n\n","import React from \"react\";\nimport { AmmData, CoinInfo, IBData, TradeCalcData } from \"@loopring-web/component-lib/static-resource\";\nimport { useCustomDCEffect } from \"hooks/common/useCustomDCEffect\";\nimport { ammpoolAPI, exchangeAPI } from \"stores/apis/api\";\nimport { useTokenMap } from \"stores/token\";\nimport { useAccount } from \"stores/account/hook\";\nimport { useRouteMatch } from 'react-router';\nimport { useAmmMap } from '../../../stores/Amm/AmmMap';\nimport { useWalletLayer2 } from '../../../stores/walletLayer2';\nimport { TradeFloat } from '@loopring-web/component-lib/src/static-resource';\nimport { useOpenModals } from '@loopring-web/component-lib/index';\nimport { useModals } from '../../../hooks/modal/useModals';\nimport { coinPairInit } from '../../../hooks/help/coinPairInit';\nimport { updateWallet } from '../../../hooks/help/updateWallet';\nimport { pairTitleBlock, pairTitleDone } from '../../../hooks/help/pairTitleBlock';\nimport { getExistedMarket } from 'loopring-sdk';\nimport { makeTickView } from '../../../hooks/help/makeTickView';\n\nexport const useCoinPair = <C extends { [ key: string ]: any }>() => {\n    const exchangeApi = exchangeAPI();\n    const match: any = useRouteMatch(\":symbol\")\n    const {coinMap, tokenMap, marketArray, marketCoins} = useTokenMap()\n    const {ammMap} = useAmmMap();\n    const _walletLayer2 = useWalletLayer2();\n\n    const [tradeFloat, setTradeFloat] = React.useState<TradeFloat | undefined>(undefined);\n    const [pair, setPair] = React.useState<{ coinAInfo: CoinInfo<C> | undefined, coinBInfo: CoinInfo<C> | undefined }>({\n        coinAInfo: undefined,\n        coinBInfo: undefined,\n    });\n\n    React.useEffect(() => {\n        const coinKey = match?.params.symbol ?? undefined;\n        let _tradeCalcData: Partial<TradeCalcData<C>> = {}\n        let _tradeFloat: Partial<TradeFloat> = {}\n        // let _tradeArray: Array<Partial<RawDataTradeItem>> | undefined = undefined;\n        _tradeCalcData = coinPairInit({coinKey, _tradeCalcData, tokenMap, coinMap})\n        if (_walletLayer2 && _walletLayer2.walletLayer2) {\n            const {walletMap} = updateWallet();\n            _tradeCalcData.walletMap = walletMap;\n        }\n        let {\n            amm,\n            market\n        } = getExistedMarket(marketArray, _tradeCalcData.coinSell as string, _tradeCalcData.coinBuy as string);\n        //TODO wallet saga done\n        let apiList = [];\n        if (amm && market && ammMap) {\n            // let pairPromise =  usePairTitleBlock({market})\n            apiList = [\n                pairTitleBlock({coinKey: market, ammKey: amm, ammMap})\n            ];\n            Promise.all([...apiList]).then(\n                ([{ammpoolsbalance, tickMap}]: any[]) => {\n                    if (tokenMap) {\n                        let {_tradeCalcData: _td, _pair} = pairTitleDone({\n                            market,\n                            ammpoolsbalance,\n                            tokenMap,\n                            _tradeCalcData,\n                            coinMap,\n                            marketCoins\n                        })\n                        _tradeCalcData = _td;\n                        _tradeFloat = makeTickView(tickMap[ market ])\n                        setTradeFloat(_tradeFloat as TradeFloat);\n                        setPair(_pair)\n                    }\n                })\n        }\n\n    }, []);\n    //TODO tickMap\n    React.useEffect(() => {\n    }, [])\n\n    useCustomDCEffect(async () => {\n\n    }, [ammpoolAPI])\n    return {\n        // ammCalcData,\n        // ammDepositData,\n        // ammWithdrawData,\n        pair,\n        tradeFloat,\n        // onSwapClick,\n        // ammBtnI18nKey,\n        // handleSwapPanelEvent\n        // handleDepositEvent,\n        // handleWithDrawEvent,\n        // onAmmWithdrawClick,\n        // onAmmDepositClick\n    }\n}","import { AmmProps } from '@loopring-web/component-lib';\nimport React from 'react';\nimport { AmmData, AmmInData, IBData } from '@loopring-web/component-lib/static-resource';\nimport { AmmCard } from '@loopring-web/component-lib/components/block/AmmCard';\nimport { Grid } from '@material-ui/core';\nimport { AmmDetail, FloatTag } from '@loopring-web/component-lib/src/static-resource';\nimport { useAmmMiningUI } from './hook';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport { withTranslation } from 'react-i18next';\n\nconst AmmCardWrap = React.memo(React.forwardRef((props,ref) => {\n    return <AmmCard ref={ref} {...props} ></AmmCard>\n}))  as React.ComponentType<AmmDetail<IBData<any>>>;\n\nexport const AmmMiningView =  withTranslation('common')(<T extends AmmData<C extends IBData<I> ? C : IBData<I>>, I,\n    ACD extends AmmInData<I>,\n    C = IBData<I>>({ammProps,t,...rest}: { ammProps:AmmProps<T ,I,ACD> } & any) => {\n    const {ammActivities} = useAmmMiningUI();\n    const [value,setValue] = React.useState<0|1>(0);\n    const handleChange = (event: any, newValue: 0|1) => {\n        setValue(newValue);\n    }\n    return <Grid container spacing={2}>\n       <Grid item xs={12}>\n           <Tabs value={value}\n                 onChange={handleChange}\n                 aria-label=\"tabs switch\">\n               <Tab label={t('labelCurrentActivities')}  />\n               <Tab label={t('labelPastActivities')}  />\n           </Tabs>\n       </Grid>\n\n        {ammActivities.map((item,index)=>{\n            return  <Grid item xs={12} sm={6} lg={4}  key={index}>\n                {/*<AmmCardWrap {...item}/>*/}\n            </Grid>\n        }) }\n\n    </Grid>\n})\n\n\n// const ref = React.createRef();\n// const ammInfo: AmmCardProps<any> = {\n//     // ammCalcData,\n//\n//     coinAInfo:  {\n//         icon: 'https://exchange.loopring.io/assets/images/ethereum/assets/0x9A0aBA393aac4dFbFf4333B06c407458002C6183/logo.png',\n//         name: 'ETH',\n//         simpleName: 'ETH',\n//         description: '',\n//         company: 'ETH'\n//     },\n//     coinBInfo: {\n//         icon: 'https://exchange.loopring.io/assets/images/ethereum/assets/0x565aBA393aac4dFbFf4333B06c407458002C6183/logo.png',\n//         name: 'LRC',\n//         simpleName: 'LRC',\n//         description: '',\n//         company: 'LRC'\n//     },\n//     activity:{\n//         totalRewards:241232132,\n//         myRewards:1232.123,\n//         rewardToken: {\n//             icon: 'https://exchange.loopring.io/assets/images/ethereum/assets/0x565aBA393aac4dFbFf4333B06c407458002C6183/logo.png',\n//             name: 'LRC',\n//             simpleName: 'LRC',\n//             description: '',\n//             company: 'LRC'\n//         },\n//         duration: {\n//             from: new Date('2021-1-1'),\n//             to: new Date()\n//         },\n//     },\n//     amountDollar: 197764.89,\n//     amountYuan: 194.89,\n//     tradeFloat:{\n//         APY: 56,\n//         priceDollar: 123,\n//         priceYuan: 2343232,\n//         percent: '0%',\n//         chartUnit: \"24h\",\n//         volume: Number('112312312'),\n//         floatTag: FloatTag.none\n//     },\n//     totalLPToken: 12132131,\n//     totalA: 0.002,\n//     totalB: 12344,\n//     myRewardA: 11,\n//     myRewardB: 13,\n//     PoolSharedA: 10,\n//     PoolSharedB: 12,\n//     isNew:false,\n//     isActivity:true,\n// }","import React from 'react';\nimport { useAmmMap } from '../../../stores/Amm/AmmMap';\nimport {\n    CoinInfo,\n    CustomError,\n    ErrorMap,\n} from '@loopring-web/component-lib/src/static-resource';\nimport {  useTicker } from '../../../stores/ticker';\nimport { PoolsRow } from '@loopring-web/component-lib';\nimport { deepClone } from '../../../utils/obj_tools';\nimport { STATUS } from '../../../stores/constant';\nimport { useAmmActivityMap } from '../../../stores/Amm/AmmActivityMap';\nimport { AmmCardProps } from '@loopring-web/component-lib/static-resource';\nimport { tokenMapSlice, useTokenMap } from '../../../stores/token';\n\nexport function useAmmMiningUI<R extends {[key:string]:any},I>():{ammActivities:Array<AmmCardProps<I>>} {\n    const [data,setData] = React.useState<Array<AmmCardProps<I>>>([]);\n    const {\n        ammMap,\n        status: ammMapStatus,\n        errorMessage: errorAmmMap,\n        statusUnset:ammMapStatusUnset,\n        updateAmmMap,\n    } = useAmmMap();\n    const {coinMap} = useTokenMap();\n    const {\n        ammActivityMap,\n        status:  ammActivityStatus,\n        errorMessage: errorAmmActivityMap,\n        statusUnset:  ammActivityStatusUnset ,\n        updateAmmActivityMap,\n    } = useAmmActivityMap();\n    const {\n        tickerMap,\n        status: tickerStatus,\n        errorMessage: errorTickerMap,\n        statusUnset: tickerStatusUnset ,\n        updateTickers,\n    } = useTicker();\n    const updateRawData = React.useCallback(()=>{\n        try {\n            const _ammActivityMap:PoolsRow<I>  = deepClone(ammActivityMap);\n            let mapArray = [];\n            for (let key in  ammActivityMap) {\n                if (ammMap && coinMap) {\n                    _ammActivityMap[ key ] = {\n                        // @ts-ignore\n                        ...deepClone(ammMap[ key ]),\n                        coinAInfo: coinMap[ ammMap[ key ].coinA as string ],\n                        coinBInfo: coinMap[ ammMap[ key ].coinB as string ],\n                        activity: _ammActivityMap[ key ],\n                        tradeFloat: tickerMap && tickerMap[ key ]\n                    }\n                    mapArray.push(_ammActivityMap[key])\n                }\n\n            }\n            setData(mapArray);\n        }catch (error){\n            throw new CustomError({...ErrorMap.NO_TOKEN_MAP,options:error})\n        }\n    }, [ammActivityMap, tickerMap, ammMap])\n\n    const updateTickersUI = React.useCallback(()=>  {\n            if(ammActivityMap && Object.keys(ammActivityMap).length>0){\n                updateTickers(Object.keys(ammActivityMap));\n            }\n    },[ammActivityMap,updateTickers])\n    React.useEffect(() => {\n        switch (tickerStatus) {\n            case \"ERROR\":\n                console.log(\"ERROR\",'get ticker error,ui');\n                tickerStatusUnset()\n                break;\n            case \"PENDING\":\n                break;\n            case \"DONE\":\n                tickerStatusUnset()\n                updateRawData()\n                break;\n            default:\n                break;\n        }\n    }, [tickerStatus, tickerStatusUnset, updateRawData]);\n    React.useEffect(() => {\n        switch (ammActivityStatus) {\n            case \"ERROR\":\n                console.log(\"ERROR\",'get ammMap error,ui');\n                ammActivityStatusUnset();\n                break;\n            case STATUS.PENDING:\n                console.log(\"PENDING\",'get ammMap error,ui');\n                // ammMapStatusUnset();\n                break;\n            case STATUS.DONE:\n                if(ammMapStatus !== STATUS.PENDING) {\n                    ammActivityStatusUnset();\n                    ammMapStatusUnset();\n                    updateTickersUI();\n                }\n                break;\n            default :\n                break;\n        }\n    }, [ammMapStatus, ammActivityStatus, ammActivityStatusUnset, ammMapStatusUnset, updateTickersUI]);\n    // init AmmMap at begin\n    React.useEffect(() => {\n        if (!ammMap || Object.keys(ammMap).length === 0) {\n            updateAmmMap();\n        }\n        if(!ammActivityMap || Object.keys(ammActivityMap).length === 0){\n            updateAmmActivityMap();\n        } else {\n            updateTickersUI();\n        }\n    },[]);\n\n\n\n\n    return {\n        ammActivities:data,\n        // updateTickersUI,\n    }\n}\n\n// export function useTickerUI({pageState:number,pageSize:}) {\n//\n//     React.useEffect(() => {\n//         if (!tickerMap || Object.keys(tickerMap).length === 0) {\n//             updateAmmMap();\n//         }else{\n//\n//         }\n//     }, [ammMap, updateAmmMap]);\n//     React.useEffect(() => {\n//         switch (ammMapStatus) {\n//             case \"ERROR\":\n//                 console.log(\"ERROR\");\n//                 ammMapStatusUnset()\n//                 break;\n//             case \"PENDING\":\n//                 ammMapStatusUnset()\n//                 break;\n//             default:\n//                 break;\n//         }\n//     }, [ammMapStatus, ammMapStatusUnset]);\n//     return {\n//         ammMapObj: {\n//             ammMap,\n//             status: ammMapStatus,\n//             errorMessage: errorAmmMap\n//         }\n//     }\n// }","import React from 'react'\nimport styled from '@emotion/styled'\nimport { Box, Grid, Typography } from '@material-ui/core'\nimport { WithTranslation, withTranslation } from 'react-i18next'\nimport {\n    AmmRecordTable,\n    AmmTradeType,\n    ChartType,\n    ScaleAreaChart,\n    TablePaddingX,\n    ToggleButtonGroup,\n    useSettings\n} from '@loopring-web/component-lib'\nimport { MyPoolRow as Row, MyPoolTable } from '@loopring-web/component-lib/components/tableList/myPoolTable';\nimport {\n    CoinInfo,\n    Currency,\n    getThousandFormattedNumbers,\n    PriceTag\n} from '@loopring-web/component-lib/src/static-resource';\nimport { AmmRecordRow } from '@loopring-web/component-lib/components/tableList/ammRecordTable/Interface';\nimport moment from 'moment';\n\n\n//TODO: FIXED:  demo data\nconst coinMap = {\n    ETH: {\n        icon: 'https://exchange.loopring.io/assets/images/ethereum/assets/0x9A0aBA393aac4dFbFf4333B06c407458002C6183/logo.png',\n        name: 'ETH',\n        simpleName: 'ETH',\n        description: '',\n        company: 'ETH'\n    },\n    LRC: {\n        icon: 'https://exchange.loopring.io/assets/images/ethereum/assets/0x565aBA393aac4dFbFf4333B06c407458002C6183/logo.png',\n        name: 'LRC',\n        simpleName: 'LRC',\n        description: '',\n        company: 'LRC'\n    },\n    USTD: {\n        icon: 'https://exchange.loopring.io/assets/images/ethereum/assets/0x565aBA393aac4dFbFf4333B06c407458002C6183/logo.png',\n        name: 'USTD',\n        simpleName: 'USTD',\n        description: '',\n        company: 'USTD'\n    }\n}\nconst ammRecordArray:AmmRecordRow<any>[] = [\n    {\n        type: AmmTradeType.add,\n        coinA: coinMap[ 'ETH' ] as CoinInfo<any>,\n        coinB: coinMap[ 'LRC' ] as CoinInfo<any>,\n        totalDollar: 12,\n        totalYuan: 194.89,\n        amountA: 122,\n        amountB: 231,\n        time: moment().add(-1, 'days').toDate().getTime()\n    },\n    {\n        type: AmmTradeType.remove,\n        coinA: coinMap[ 'ETH' ] as CoinInfo<any>,\n        coinB: coinMap[ 'LRC' ] as CoinInfo<any>,\n        totalDollar: 12,\n        totalYuan: 194.89,\n        amountA: 122,\n        amountB: 231,\n        time: moment().add(-100, 'days').toDate().getTime()\n    },\n    {\n        type: AmmTradeType.swap,\n        coinA: coinMap[ 'ETH' ] as CoinInfo<any>,\n        coinB: coinMap[ 'LRC' ] as CoinInfo<any>,\n        totalDollar: 12,\n        totalYuan: 194.89,\n        amountA: 122,\n        amountB: 231,\n        time: moment().add(-15, 'days').toDate().getTime()\n    },\n    {\n        type: AmmTradeType.swap,\n        coinA: coinMap[ 'ETH' ] as CoinInfo<any>,\n        coinB: coinMap[ 'LRC' ] as CoinInfo<any>,\n        totalDollar: 12,\n        totalYuan: 194.89,\n        amountA: 122,\n        amountB: 231,\n        time: moment().add(-3, 'hours').toDate().getTime()\n    },\n    {\n        type: AmmTradeType.swap,\n        coinA: coinMap[ 'ETH' ] as CoinInfo<any>,\n        coinB: coinMap[ 'LRC' ] as CoinInfo<any>,\n        totalDollar: 12,\n        totalYuan: 194.89,\n        amountA: 122,\n        amountB: 231,\n        time: moment().add(-75, 'second').toDate().getTime()\n    }\n]\nconst rawData: Row<any>[] = [\n    {\n        feeA:122,\n        feeB:21,\n        feeDollar: 0.0012,\n        feeYuan:  0.0312,\n        reward:123,\n        rewardToken:{\n            icon: 'https://exchange.loopring.io/assets/images/ethereum/assets/0x565aBA393aac4dFbFf4333B06c407458002C6183/logo.png',\n            name: 'USDT',\n            simpleName: 'USDT',\n            description: '',\n            company: 'USDT'\n        },\n        balanceA:12131,\n        balanceB:0.0012,\n        balanceYuan: 1232131,\n        balanceDollar: 232,\n        ammDetail:  {\n            coinAInfo: {\n                icon: 'https://exchange.loopring.io/assets/images/ethereum/assets/0x9A0aBA393aac4dFbFf4333B06c407458002C6183/logo.png',\n                name: 'ETH',\n                simpleName: 'ETH',\n                description: '',\n                company: 'ETH'\n            },\n            coinBInfo: {\n                icon: 'https://exchange.loopring.io/assets/images/ethereum/assets/0x565aBA393aac4dFbFf4333B06c407458002C6183/logo.png',\n                name: 'LRC',\n                simpleName: 'LRC',\n                description: '',\n                company: 'LRC'\n            },\n            amountDollar: 12,\n            amountYuan: 194.89,\n            totalLPToken: 12132131,\n            totalA: 0.002,\n            totalB: 12344,\n            isNew: true,\n            isActivity: false,\n        }\n    },\n    {\n        feeA:122,\n        feeB:21,\n        feeDollar: 0.0012,\n        feeYuan:  0.0312,\n        reward:123,\n        rewardToken:{\n            icon: 'https://exchange.loopring.io/assets/images/ethereum/assets/0x565aBA393aac4dFbFf4333B06c407458002C6183/logo.png',\n            name: 'USDT',\n            simpleName: 'USDT',\n            description: '',\n            company: 'USDT'\n        },\n        balanceA:12131,\n        balanceB:0.0012,\n        balanceYuan: 1232131,\n        balanceDollar: 232,\n        ammDetail:  {\n            coinAInfo: {\n                icon: 'https://exchange.loopring.io/assets/images/ethereum/assets/0x9A0aBA393aac4dFbFf4333B06c407458002C6183/logo.png',\n                name: 'ETH',\n                simpleName: 'ETH',\n                description: '',\n                company: 'ETH'\n            },\n            coinBInfo: {\n                icon: 'https://exchange.loopring.io/assets/images/ethereum/assets/0x565aBA393aac4dFbFf4333B06c407458002C6183/logo.png',\n                name: 'LRC',\n                simpleName: 'LRC',\n                description: '',\n                company: 'LRC'\n            },\n            amountDollar: 12,\n            amountYuan: 194.89,\n            totalLPToken: 12132131,\n            totalA: 0.002,\n            totalB: 12344,\n            isNew: true,\n            isActivity: false,\n        }\n    },\n    {\n        feeA:122,\n        feeB:21,\n        feeDollar: 0.0012,\n        feeYuan:  0.0312,\n        reward:123,\n        rewardToken:{\n            icon: 'https://exchange.loopring.io/assets/images/ethereum/assets/0x565aBA393aac4dFbFf4333B06c407458002C6183/logo.png',\n            name: 'USDT',\n            simpleName: 'USDT',\n            description: '',\n            company: 'USDT'\n        },\n        balanceA:12131,\n        balanceB:0.0012,\n        balanceYuan: 1232131,\n        balanceDollar: 232,\n        ammDetail:  {\n            coinAInfo: {\n                icon: 'https://exchange.loopring.io/assets/images/ethereum/assets/0x9A0aBA393aac4dFbFf4333B06c407458002C6183/logo.png',\n                name: 'ETH',\n                simpleName: 'ETH',\n                description: '',\n                company: 'ETH'\n            },\n            coinBInfo: {\n                icon: 'https://exchange.loopring.io/assets/images/ethereum/assets/0x565aBA393aac4dFbFf4333B06c407458002C6183/logo.png',\n                name: 'LRC',\n                simpleName: 'LRC',\n                description: '',\n                company: 'LRC'\n            },\n            amountDollar: 12,\n            amountYuan: 194.89,\n            totalLPToken: 12132131,\n            totalA: 0.002,\n            totalB: 12344,\n            isNew: true,\n            isActivity: false,\n        }\n    },\n    {\n        feeA:122,\n        feeB:21,\n        feeDollar: 0.0012,\n        feeYuan:  0.0312,\n        reward:123,\n        rewardToken:{\n            icon: 'https://exchange.loopring.io/assets/images/ethereum/assets/0x565aBA393aac4dFbFf4333B06c407458002C6183/logo.png',\n            name: 'USDT',\n            simpleName: 'USDT',\n            description: '',\n            company: 'USDT'\n        },\n        balanceA:12131,\n        balanceB:0.0012,\n        balanceYuan: 1232131,\n        balanceDollar: 232,\n        ammDetail:  {\n            coinAInfo: {\n                icon: 'https://exchange.loopring.io/assets/images/ethereum/assets/0x9A0aBA393aac4dFbFf4333B06c407458002C6183/logo.png',\n                name: 'ETH',\n                simpleName: 'ETH',\n                description: '',\n                company: 'ETH'\n            },\n            coinBInfo: {\n                icon: 'https://exchange.loopring.io/assets/images/ethereum/assets/0x565aBA393aac4dFbFf4333B06c407458002C6183/logo.png',\n                name: 'LRC',\n                simpleName: 'LRC',\n                description: '',\n                company: 'LRC'\n            },\n            amountDollar: 12,\n            amountYuan: 194.89,\n            totalLPToken: 12132131,\n            totalA: 0.002,\n            totalB: 12344,\n            isNew: true,\n            isActivity: false,\n        }\n    },\n    {\n        feeA:122,\n        feeB:21,\n        feeDollar: 0.0012,\n        feeYuan:  0.0312,\n        reward:123,\n        rewardToken:{\n            icon: 'https://exchange.loopring.io/assets/images/ethereum/assets/0x565aBA393aac4dFbFf4333B06c407458002C6183/logo.png',\n            name: 'USDT',\n            simpleName: 'USDT',\n            description: '',\n            company: 'USDT'\n        },\n        balanceA:12131,\n        balanceB:0.0012,\n        balanceYuan: 1232131,\n        balanceDollar: 232,\n        ammDetail:  {\n            coinAInfo: {\n                icon: 'https://exchange.loopring.io/assets/images/ethereum/assets/0x9A0aBA393aac4dFbFf4333B06c407458002C6183/logo.png',\n                name: 'ETH',\n                simpleName: 'ETH',\n                description: '',\n                company: 'ETH'\n            },\n            coinBInfo: {\n                icon: 'https://exchange.loopring.io/assets/images/ethereum/assets/0x565aBA393aac4dFbFf4333B06c407458002C6183/logo.png',\n                name: 'LRC',\n                simpleName: 'LRC',\n                description: '',\n                company: 'LRC'\n            },\n            amountDollar: 12,\n            amountYuan: 194.89,\n            totalLPToken: 12132131,\n            totalA: 0.002,\n            totalB: 12344,\n            isNew: true,\n            isActivity: false,\n        }\n    },\n]\n\n\nconst toggleData = [\n    {value: '24 H', key: '24 H'},\n    {value: '1 W', key: '1 W'},\n    {value: 'ALL', key: 'ALL'},\n]\n\nconst StylePaper = styled(Box)`\n    width: 100%;\n    height: 100%;\n    flex: 1;\n` as typeof Box;\n\nconst StyleWrapper = styled(Grid)`\n  position: relative;\n  width: 100%;\n  background-color: ${({theme}) => theme.colorBase.background().default};\n  border-radius: ${({theme}) => theme.unit}px;\n` as typeof Grid\n\n\n\n// const StyleGrid = styled(Grid)`\n//     display: flex;\n//     flex-direction: column;\n//     justify-content: space-around;\n// ` as typeof Grid\n\n\n\n\nconst StyledBtnGroupWrapper = styled(Box)`\n    position: absolute;\n    z-index: 99;\n    top: ${({ theme }) => theme.unit}px;\n    width: 100%;\n` as typeof Box\n\nconst  TableWrapStyled = styled(Grid)`\n  &{\n    background-color: ${({theme}) => theme.colorBase.background().default};\n    ${({theme}) => theme.border.defaultFrame({c_key: 'blur', d_R: 1})};\n  }\n \n  ${({theme}) => TablePaddingX({pLeft:theme.unit * 3,pRight:theme.unit * 3})}\n` as typeof Grid\n\nexport const LiquidityOverview = withTranslation('common')(({ t, ...rest }: WithTranslation) => {\n    const [chartPeriod, setChartPeriod] = React.useState('ALL');\n    const [page, setPage] = React.useState(  1);\n    const {currency} = useSettings();\n    const {totalDollar,totalYuan,totalFeeDollar,totalFeeYuan, totalMiningDollar, totalMiningYuan} = {\n        totalDollar :1000,\n        totalYuan:33,\n        totalFeeDollar:323,totalFeeYuan:12, totalMiningDollar:232, totalMiningYuan:35}\n\n    const _handlePageChange = React.useCallback((page: number) => {\n        setPage(page);\n        // updateData({actionType: ActionType.page, currPage: page})\n    }, [])\n    return (\n        <>\n            <StyleWrapper container  spacing={1} padding={3} margin={0} >\n                <Grid display={'flex'} flexDirection={'column'} justifyContent={'space-around'} item sm={3}>\n                    <Typography variant={'body1'} component={'h5'} color={'textSecondary'}>{t('labelTotalPositionValue')}</Typography>\n                    <Typography variant={'h4'} marginTop={1}>\n                        {totalDollar === undefined ? 'N/A' : currency === Currency.dollar ?  PriceTag.Dollar + getThousandFormattedNumbers(totalDollar)\n                            :  PriceTag.Yuan + getThousandFormattedNumbers(totalYuan as number)}\n                    </Typography>\n                </Grid>\n                <Grid display={'flex'} flexDirection={'column'} justifyContent={'space-around'} item sm={3}>\n                    <Typography variant={'body1'} component={'h5'} color={'textSecondary'}>{t('labelFeeRewards')}</Typography>\n                    <Typography variant={'h4'} marginTop={1}>\n                        {totalFeeDollar === undefined ? 'N/A' : currency === Currency.dollar ?  PriceTag.Dollar + getThousandFormattedNumbers(totalFeeDollar)\n                            :  PriceTag.Yuan + getThousandFormattedNumbers(totalFeeYuan as number)}\n                    </Typography>\n                </Grid>\n                <Grid display={'flex'} flexDirection={'column'} justifyContent={'space-around'} item sm={3}>\n                    <Typography variant={'body1'} component={'h5'} color={'textSecondary'}>{t('labelMiningRewards')}</Typography>\n                    <Typography variant={'h4'} marginTop={1}>\n                        {totalMiningDollar === undefined ? 'N/A' : currency === Currency.dollar ?  PriceTag.Dollar + getThousandFormattedNumbers(totalMiningDollar)\n                            :  PriceTag.Yuan + getThousandFormattedNumbers(totalMiningYuan as number)}\n                    </Typography>\n                </Grid>\n            </StyleWrapper>\n            <StyleWrapper container marginY={2} height={340} >\n                    <StyledBtnGroupWrapper display={'flex'} padding={3} justifyContent={'space-between'}>\n                        <Typography variant={'body1'} component={'h5'} color={'textSecondary'}>{t('labelLiquidityValue')}</Typography>\n                        <Box marginRight={-1}>\n                            <ToggleButtonGroup  exclusive size=\"small\" {...{ ...rest, t, data: toggleData, value: chartPeriod, setValue: setChartPeriod}} />\n                        </Box>\n                    </StyledBtnGroupWrapper>\n                    <ScaleAreaChart type={ChartType.Trend} data={[]} />\n            </StyleWrapper>\n            <Typography paddingLeft={2} variant={'h4'} >{t('labelMyAmm')}</Typography>\n            <TableWrapStyled container marginY={2} paddingY={2} flex={1} height={568}>\n                <Grid item xs={12} display={'flex'} flexDirection={'column'} >\n                    <MyPoolTable\n\n                        rawData={rawData}\n                        pagination= {{pageSize: 5}}\n                        handleDeposit={(row:any)=>{console.log()}}\n                        handleWithdraw={(row:any)=>{console.log()}}\n                        handlePageChange={()=>{}}\n                    />\n                </Grid>\n            </TableWrapStyled>\n            <Typography paddingLeft={2} variant={'h4'} >{t('labelMyAmmRecord')}</Typography>\n            <TableWrapStyled container marginY={2} paddingY={2} flex={1}>\n                <Grid item xs={12} display={'flex'} flexDirection={'column'}>\n                    <AmmRecordTable rawData={ammRecordArray} handlePageChange={_handlePageChange} page={page} />\n                </Grid>\n            </TableWrapStyled>\n        </>\n    )\n})","import { useRouteMatch } from 'react-router'\n\nimport { Box } from '@material-ui/core'\nimport {\n    SubMenu,\n    SubMenuList as BasicSubMenuList,\n} from '@loopring-web/component-lib'\nimport { withTranslation } from 'react-i18next'\nimport { subMenuLiquidity } from '@loopring-web/component-lib/src/static-resource'\nimport { PoolsPanel } from './PoolsPanel'\nimport { CoinPairPanel } from './CoinPairPanel';\nimport { AmmMiningView } from './AmmMining';\nimport { LiquidityOverview } from './LiquidityOverview'\n// import { useAmmPool } from './hook'\n\nexport const subMenu = subMenuLiquidity\n\nconst SubMenuList = withTranslation(['layout','common'], { withRef: true })(BasicSubMenuList);\nexport const LiquidityPage = () => {\n\n    // const { ammFee } = useAmmPool('LRC', 'ETH')\n    //\n    // console.log('--- > ammFee:', ammFee)\n    //\n    let match: any = useRouteMatch(['/liquidity/:item',':next/']);\n    const selected = match?.params.item ?? 'pools'\n    let matchPair: any = useRouteMatch(['/liquidity/:item/:next/:symbol']);\n    let symbol:any = undefined\n    if (matchPair && matchPair?.params?.next && matchPair.params.item === 'pools') {\n       if(!matchPair.params.symbol){\n           symbol='LRC-ETH';\n       }else{\n           symbol=matchPair.params.symbol;\n       }\n    }\n    \n    return (\n        <>\n            { symbol && <Box display={'flex'} flexDirection={'column'}  flex={1} alignSelf={'flex-start'}>\n              <CoinPairPanel />\n            </Box>\n            }\n            {!symbol && <>  <Box width={'200px'} display={'flex'} justifyContent={'stretch'} marginRight={3}>\n                    <SubMenu>\n                        <SubMenuList selected={selected} subMenu={subMenu as any} />\n                    </SubMenu>\n                </Box>\n                <Box  minHeight={420}  display={'flex'} alignItems={'stretch'} justifyContent={'stretch'} flexDirection=\"column\" marginTop={0} flex={1}>\n                    {(selected === 'pools' && !symbol ) && <PoolsPanel />}\n                    {(selected === 'amm-mining' && !symbol ) && <AmmMiningView />}\n                    {(selected === 'my-liquidity' && !symbol ) && <LiquidityOverview />}\n                    {selected === 'orderBook-Mining' && <AmmMiningView />}\n                    {/*{selected === 'orders' && <OrderPanel />}*/}\n                </Box>\n             </>\n            }\n        </>\n    )\n\n}\n","import { HashRouter as Router, Route, Switch, } from 'react-router-dom'\n\nimport Header from 'layouts/header'\n\nimport QuotePage from 'pages/QuotePage'\nimport SwapPage from 'pages/SwapPage'\n\nimport DebugPage from 'pages/DebugPage'\n\nimport Container from '@material-ui/core/Container'\nimport { Box } from '@material-ui/core'\nimport { DevWrapper } from '../provider/'\nimport { Layer2Page } from '../pages/Layer2Page'\nimport { LiquidityPage } from '../pages/LiquidityPage'\n\nconst RouterView = () => {\n    // const SwapPageWrap = ()=> <SwapPage />\n    // const QuotePageWrap = ()=> <SwapPage />\n    return <Router>\n        <Header/>\n\n        {/*<Box style={{marginTop: `var(--header-height)`}} flex={1} display={'flex'}>*/}\n        <Container maxWidth=\"lg\" style={{minHeight:'calc(100% - 64px - 32px)',display:'flex',flexDirection:'column'}}>\n            {/*style={{height: '100%' }}*/}\n            <Box display={'flex'} flex={1} alignItems={'stretch'} flexDirection={'row'} marginTop={3}  >\n                <Switch>\n                    <Route exact component={SwapPage} path='/'/>\n                    <Route exact component={QuotePage} path='/markets'/>\n                    <Route component={SwapPage} path='/trading/lite'/>\n                    <Route component={SwapPage} path='/trading/lite(/:symbol)'/>\n\n                    <Route exact component={Layer2Page} path='/layer2'/>\n                    <Route exact component={Layer2Page} path='/layer2/assets'/>\n                    <Route exact component={Layer2Page} path='/layer2/transactions'/>\n                    <Route exact component={Layer2Page} path='/layer2/trades'/>\n                    <Route exact component={Layer2Page} path='/layer2/orders'/>\n                    <Route exact component={Layer2Page} path='/layer2/setting'/>\n\n                    <Route exact component={LiquidityPage} path='/liquidity'/>\n                    <Route exact component={LiquidityPage} path='/liquidity/pools/*'/>\n                    <Route exact component={LiquidityPage} path='/liquidity/pools'/>\n                    {/*<Route exact component={LiquidityPage} path='/liquidity/pools/coinPair(/:symbol)'/>*/}\n                    <Route exact component={LiquidityPage} path='/liquidity/amm-mining'/>\n                    <Route exact component={LiquidityPage} path='/liquidity/my-liquidity'/>\n                    <Route exact component={LiquidityPage} path='/liquidity/orderBook-Mining'/>\n                    <Route exact component={LiquidityPage} path='/liquidity/maker-rebates'/>\n\n                    <DevWrapper>\n                        <Route exact path='/debug'>\n                            <DebugPage/>\n                        </Route>\n                    </DevWrapper>\n\n                </Switch>\n            </Box>\n        </Container>\n        {/*</Box>*/}\n\n    </Router>\n}\n\nexport default RouterView\n"],"sourceRoot":""}