{"version":3,"sources":["defs/swap_defs.ts","hooks/common/useCustomDCEffect.ts","defs/web3_defs.ts","stores/account/hook.ts","state_machine/machine_builder.ts","stores/account/reducer.ts","stores/token/hook.ts","stores/Amm/AmmMap/hook.ts","stores/trading/hook.ts","hooks/web3/useWeb3.ts","stores/walletLayer2/hook.ts","stores/walletLayer1/hook.ts","networks/web3_connectors.ts","stores/Amm/AmmMap/reducer.ts","index.tsx","stores/socket/reducer.ts","stores/trading/reducer.ts","storage/index.ts","utils/obj_tools.ts","stores/ticker/reducer.ts","stores/userRewards/hook.ts","stores/system/reducer.ts","stores/system/interface.ts","stores/walletLayer1/reducer.ts","stores/walletLayer2/reducer.ts","stores/userRewards/reducer.ts","stores/Amm/AmmActivityMap/reducer.ts","stores/token/reducer.ts","stores/system/hook.ts","utils/swap_calc_utils.ts","stores/ticker/hook.ts","stores/Amm/AmmActivityMap/hook.ts","state_machine/account_machine_spec.ts","utils/web3_tools.ts","provider/global/index.tsx","provider/web3ReactManager/index.tsx","provider/dev-wrapper/index.tsx","stores/apis/api.ts","stores/global/actions.ts","stores/transactions/reducer.ts","stores/Amm/AmmTrades/reducer.ts","stores/Amm/AmmActivityMap/saga.ts","stores/Amm/AmmMap/saga.ts","stores/Amm/AmmTrades/saga.ts","stores/Amm/index.ts","stores/token/saga.ts","stores/ticker/saga.ts","stores/system/saga.ts","stores/walletLayer1/saga.ts","stores/walletLayer2/saga.ts","stores/userRewards/saga.ts","stores/socket/saga.ts","stores/rootSaga.ts","stores/index.ts","stores/socket/hook.ts","stores/constant.ts","hooks/help/volumeToCount.ts","services/socketUtil.ts","pages/ErrorPage/index.tsx","utils/dt_tools.ts","services/tickerService.ts","services/ammPoolService.ts","pages/LiquidityPage/PoolsPanel/hook.ts","hook.ts","defs/common_defs.ts","hooks/modal/useModals.ts","utils/hook_tools.ts","hooks/common/useCommon.ts","hooks/exchange/useExchangeAPI.ts","hooks/help/makeWallet.ts","layouts/header/hook.tsx","pages/AccountPage/index.tsx","layouts/header/index.tsx","pages/QuotePage/hook.ts","pages/QuotePage/index.tsx","pages/SwapPage/panel/BasicInfoPanel/hook.tsx","hooks/help/connetStatusCallback.ts","pages/SwapPage/panel/BasicInfoPanel/index.tsx","pages/SwapPage/panel/TradePanel/index.tsx","hooks/help/coinPairInit.ts","hooks/help/pairDetail.ts","hooks/help/makeTickView.ts","hooks/help/marketTable.ts","hooks/help/makeCache.ts","pages/SwapPage/index.tsx","pages/SwapPage/hook.ts","hooks/common/useApi2.ts","hooks/common/useWebsocketApi.ts","pages/DebugPage/index.tsx","pages/Layer2Page/TxPanel/index.tsx","pages/Layer2Page/AssetPanel/index.tsx","pages/Layer2Page/TradePanel/index.tsx","pages/Layer2Page/OrderPanel/index.tsx","pages/SettingPage/SettingPanel.tsx","pages/Layer2Page/index.tsx","pages/LiquidityPage/PoolsPanel/index.tsx","hooks/help/ammPairDetail.ts","pages/LiquidityPage/AmmPanel/index.tsx","pages/LiquidityPage/AmmPanel/hooks.ts","hooks/help/makeUIAmmActivityMap.ts","pages/LiquidityPage/CoinPairPanel/hooks.ts","pages/LiquidityPage/CoinPairPanel/index.tsx","pages/LiquidityPage/AmmMining/index.tsx","pages/LiquidityPage/AmmMining/hook.ts","hooks/help/makeMyPoolDetail.ts","pages/LiquidityPage/LiquidityOverview/hook.ts","pages/LiquidityPage/LiquidityOverview/index.tsx","pages/LiquidityPage/index.tsx","pages/LiquidityPage/hook.ts","routers/index.tsx","hooks/exchange/useApi.ts"],"names":["OrderHandling","BIG0","toBig","BIG1","BIG10","BIG10K","MULTI_FACTOR","useCustomDCEffect","action","deps","useDeepCompareEffect","connectorsByName","ConnectorNames","Unknown","undefined","Injected","injected","Network","network","WalletConnect","walletconnect","WalletLink","walletlink","Ledger","ledger","Trezor","trezor","Authereum","authereum","useWeb3Account","useActiveWeb3React","connector","library","account","chainId","active","error","isConnected","voca","isBlank","useAccount","useSelector","state","isNoAccount","status","AccountStatus","NOACCOUNT","isActivated","ACTIVATED","apiKey","eddsaKey","accountId","useStateMachine","spec","dispatch","useDispatch","machine","AccountMachineSpec","currentState","event","stateTransitions","states","Error","nextState","sendEvent","React","useCallback","setAccountStatus","useConnect","activate","useState","activatingConnector","setActivatingConnector","connect","item_name","isSwitch","newConnector","setConnectNameTemp","store","getState","StatusChangeEvent","Reset","Connecting","console","log","useDisconnect","deactivate","disconnect","reset","useUnlock","exchangeApi","useExchangeAPI","userApi","useUserAPI","tradingInfo","useGetTradingInfo","lock","a","Lock","unlock","exchangeInfo","exchangeAddress","LOCKED","sk","apikey","getProvider","provider","web3","Web3","sign_tools","accAddr","nonce","connectName","eddsakey","toHex","keyPair","secretKey","getUserApiKey","Unlock","setEddsaKey","setApikey","useCheckAccStatus","web3Account","marketArray","useTokenMap","lv1Acc","prevChainId","usePrevious","prevWeb3Account","UNCONNNECTED","cleanUp","CONNECTED","DEPOSITING","DEPOSIT_TO_CONFIREM","UNACTIVATED","ARPROVING","APPROV_TO_CONFIRM","resetLayer1","resetLayer2","getAccount","owner","acc","accInfo","setAccountInfo","length","updateWalletLayer1","connectNameTemp","setConnectName","HasPubkey","dumpError400","setAccAddr","response","data","resultInfo","code","ErrorResponse","FinishDeposit","UserStorage","checkTimeout","handler","setInterval","isTimeOut","clearInterval","setHandler","updateWalletLayer2","getHandler","checkStatus","initialState","defaultAccId","process","REACT_APP_TEST_ACCOUND_ID","getAccountId","defaultApiKey","REACT_APP_TEST_API_KEY","getApikey","defaultOwner","REACT_APP_TEST_OWNER","defaultEddsaKey","REACT_APP_TEST_EDDSA_KEY","getEddsakey","JSON","stringify","publicKey","isContractAddress","accountSlice","createSlice","name","reducers","initState","Object","assign","payload","setIsContractAddress","actions","tokenMap","statusUnset","tokenMapSlice","updateTokenMap","getTokenMap","useAmmMap","ammMap","amm","ammMapSlice","updateAmmMap","getAmmMap","getChainId","system","trading","useUpdateChainId","useEffect","setChainId","ChainId","GORLI","useUpdateExchangeMarkets","api","getMixMarkets","setMarkets","useUpdateExchangeInfo","getExchangeInfo","setExchangeInfo","useUpdateAmmPoolConf","useAmmpoolAPI","getAmmPoolConf","ammPoolConf","setAmmPoolConf","useUpdateAmmPoolStats","getAmmPoolStats","ammPoolStats","setAmmPoolStats","useUpdateAmmActivityRules","getAmmPoolActivityRules","ammActivityRules","setAmmActivityRules","activityRules","useUpdateTokens","getTokens","tokens","setTokens","context","useWeb3React","contextNetwork","NetworkContextName","useEtherscan","etherscanUrl","setEtherscanUrl","MAINNET","useEagerConnect","tried","setTried","isAuthorized","then","catch","useInactiveListener","onReConnectInjected","ethereum","window","reConnectInjected","on","handleChainChanged","handleAccountsChanged","accounts","removeListener","useWalletLayer2","walletLayer2","walletLayer2Slice","getWalletLayer2","useWalletLayer1","walletLayer1","walletLayer1Slice","POLLING_INTERVAL","RPC_URLS","InjectedConnector","supportedChainIds","NetworkConnector","urls","1","5","defaultChainId","WalletConnectConnector","rpc","bridge","qrcode","pollingInterval","WalletLinkConnector","url","appName","LedgerConnector","TrezorConnector","manifestEmail","manifestAppUrl","AuthereumConnector","__timer__","errorMessage","STATUS","PENDING","getAmmMapStatus","ERROR","DONE","updateRealTimeAmmMap","UNSET","Web3ProviderNetwork","createWeb3ReactRoot","providers","LocalizationProvider","dateAdapter","MomentUtils","I18nextProvider","i18n","MuThemeProvider","theme","getTheme","ThemeProvider","Provider","ReactDOM","render","getLibrary","App","document","getElementById","socketSlice","socket","socketEnd","sendNewMessage","getSocketStatus","interval","markets","marketTrades","tickerMap","refreshRate","refreshRateSlow","tradingSlice","changeTradingInterval","setTickerMap","setMarketTrades","CONSTANTS","rawHandler","sessionStorage","getItem","Handler","parseInt","err","setItem","removeItem","dateTimeStr","localStorage","ActiveTime","now","Date","getTime","toString","tmpDt","SESSION_TIMEOUT_SECONDS","clear","rawId","AccountId","Account","Apikey","Eddsakey","orderHash","AmmOrder","address","current","HardwareAddresses","includes","toLowerCase","newValue","deepClone","result","constructor","key","hasOwnProperty","copyToClipBoard","text","execCommand","textarea","createElement","body","appendChild","value","select","removeChild","navigator","clipboard","writeText","clipboardData","setData","tickerMapSlice","getTicker","getTickers","getTickerStatus","useUserRewards","userRewardsMap","userRewardsMapSlice","updateUserRewards","getUserRewards","env","ENV","PROD","baseURL","socketURL","faitPrices","gasPrice","forex","topics","systemSlice","updateSystem","updateSocketURL","updateRealTimeObj","getSystemStatus","setTopics","NETWORKEXTEND","getWalletLayer1Status","getWalletLayer2Status","getUserRewardsStatus","ammActivityMapSlice","ammActivityMap","getAmmActivityMap","getAmmActivityMapStatus","coinMap","addressIndex","marketMap","idIndex","getTokenMapStatus","marketCoins","getTokenPairMap","useSystem","getIcon","symbol","getIconByTokenInfo","token","addr","utils","getAddress","getToken","fromWEI","valueInWEI","precision","ceil","tokenInfo","precisionToFixed","fm","div","decimals","useTicker","updateTickers","tickerKeys","updateTicker","tickerKey","useAmmActivityMap","updateAmmActivityMap","HasNoPubkey","IsSmartWallet","ApproveSubmit","ApproveConfirmed","Web3Provider","getShortAddr","trim","substr","WindowEvent","events","Click","Scroll","forceReset","debounce","GlobalProvider","children","forEach","addEventListener","removeEventListener","Fragment","MessageWrapper","Message","colorBase","Web3ReactManager","t","useTranslation","networkActive","networkError","activateNetwork","triedEager","showLoader","setShowLoader","timeout","setTimeout","clearTimeout","DevWrapper","userAPI","UserAPI","exchangeAPI","ExchangeAPI","ammpoolAPI","AmmpoolAPI","LoopringAPI","walletAPI","wsAPI","InitApi","WalletAPI","WsAPI","updateVersion","createAction","transactionsSlice","addTransaction","from","hash","approval","summary","claim","addedTime","clearAllTransactions","checkedTransaction","blockNumber","tx","lastCheckedBlockNumber","Math","max","finalizeTransaction","receipt","confirmedTime","ammTradesSlice","ammTrades","getAmmTrades","getAmmTradesStatus","getPostsSaga","ammActivityMapSaga","getAmmActivityMapApi","groupByRuleTypeAndStatus","call","put","all","takeLatest","updateRealTimeSaga","ammMapInitSaga","ammMapRealTimeSaga","setAmmState","ammPoolState","match","coinA","coinB","amountDollar","parseFloat","liquidityUSD","amountYuan","totalLPToken","volumeToCount","lpLiquidity","totalA","liquidity","totalB","rewardValue","rewards","tokenId","volume","rewardToken","rewardValue2","rewardToken2","feeA","volumeToCountAsBigNumber","fees","feeB","feeDollar","times","price","plus","feeYuan","toNumber","tradeFloat","change","timeUnit","APY","apyBips","getAmmMapApi","ammpools","Reflect","ownKeys","item","market","pooled","dataItem","isNew","Number","createdAt","isActivity","__rawConfig__","map","replace","ammMapSaga","fork","ammTradesSaga","getAmmTradesApi","Promise","resolve","side","amount","sell","belong","tradeValue","buy","time","fee","priceValue","priceToken","posts","ammReducer","combineReducers","reducer","ammForks","tokenInitSaga","getTokenMapApi","tokensMap","pairs","marketArr","tokenArr","startsWith","icon","simpleName","description","company","tokenList","tradePairs","tokenSaga","tickerSaga","tickersSaga","getTickersApi","list","getMixTicker","join","tickers","tickMap","reduce","prev","base","base_token_volume","priceDollar","priceYuan","floatTag","close","open","reward","__rawTicker__","CustomError","ErrorMap","NO_TOKEN_KEY_LIST","tickerForks","getUpdateSystem","systemSaga","initConfig","tokenSymbolMap","take","getSystemsApi","location","hostname","DEV","UAT","NONETWORK","NO_NETWORK_ERROR","getFiatPrice","legal","fiatPrices","getGasPrice","systemForks","walletLayer1Saga","getWalletLayer1Balance","getTokenBalances","tokenBalances","count","walletLayer1Fork","walletLayer2Saga","getWalletLayer2Balance","getUserBalances","userBalances","walletLayer2Fork","userRewardsSaga","getUserRewardsApi","getAmmPoolUserRewards","ammUserRewardMap","reject","userRewardsForks","closeSocket","sendMessage","socketEndSaga","socketSendMessageSaga","socketClose","socketSendMessage","socketForks","mySaga","sagaMiddleware","createSagaMiddleware","settings","settingsSlice","transactions","transactionlice","modals","modalsSlice","PERSISTED_KEYS","configureStore","middleware","getDefaultMiddleware","thunk","serializableCheck","save","devTools","enhancers","reduxBatch","preloadedState","load","setLanguage","language","run","useSocket","volumn","pow","SocketEventType","pingPong","fn","e","global","looperingSocket","send","socketEventMap","WsTopicType","isConnectSocket","globalThis","ws","loopringSocket","promise","reolve","onclose","reason","socketConnect","getWsKey","wsKey","baseSocket","WebSocket","onopen","onmessage","topic","_detail","onerror","CLOSED","__wsTimer__","timer","pingpong","makeMessageArray","eventType","getAccountArg","makeReceiveMessageCallback","order","getOrderArg","orderbook","getOrderBookArg","trade","getTradeArg","ticker","getTickerArg","candlestick","getCandlestickArg","ammpool","getAmmpoolArg","type","SocketEventMap","timestamp","size","high","low","bid","ask","tickerService","sendTicker","poolName","poolAddress","risky","ammPoolService","sendAmmPool","lp","StyleBox","styled","Box","ErrorPage","messageKey","Container","flex","display","alignItems","justifyContent","flexDirection","marginTop","height","maxWidth","textAlign","position","left","top","Typography","component","variant","marginY","color","Trans","i18nKey","Link","onClick","href","subject","email","CONTACT_US_EMAIL","getContactInfo","preventDefault","Subject","next","onSocket","asObservable","ammPoolMap","useAmmMapUI","pageSize","rawData","setRawData","page","setPage","setTimestamp","ammMapStatus","ammMapStatusUnset","tickerStatus","tickerStatusUnset","updateRawData","_ammMap","tickerMapKey","keys","ammKey","NO_TOKEN_MAP","options","updateTickerLoop","_keys","setImmediate","updateTickersUI","_page","i","push","useInit","setState","systemState","tokenState","ammMapState","accountState","walletLayer1State","reload","detectEthereumProvider","request","method","Theme","LangType","SystemStatus","MODAL_TYPE","useModals","ShowDeposit","isShow","props","title","setShowDeposit","ShowTransfer","setShowTransfer","ShowWithdraw","setShowWithdraw","ShowResetAccount","setShowResetAccount","PromiseJob","fetchPromise","setFunc","field","prefix","mounted","usePromiseJob","dependencies","useGetExchangeInfo","useGetTokens","makeWallet","walletMap","total","locked","withdraw","pending","countBig","minus","detail","useChargeFeeList","tokenSymbol","requestType","chargeFeeList","setChargeFeeList","getOffchainFeeAmt","raw_data","index","sdk","useModalProps","walletLayer2State","walletMap1","setWalletMap1","walletMap2","setWalletMap2","deposit","amt","depositAddress","sendByMetaMask","gasLimit","response2","sellTokenId","getNextStorageId","storageId","request2","exchange","to","offchainId","maxFee","extraData","minGas","validUntil","VALID_UNTIL","submitOffchainWithdraw","transfer","payeeAddr","walletType","payeeAcc","payeeId","payerAddr","payerId","submitInternalTransfer","balance","depositValue","setDepositValue","depositProps","tradeData","depositBtnStatus","TradeBtnStatus","AVAILABLE","onDepositClick","handlePanelEvent","switchType","res","setTokenSymbol","withdrawValue","setWithdrawValue","WithdrawType","Standard","withdrawType","withdrawalFeeList","OffchainFeeReqType","OFFCHAIN_WITHDRAWAL","withdrawProps","withdrawBtnStatus","onWithdrawClick","withdrawTypes","WithdrawTypes","chargeFeeToken","chargeFeeTokenList","handleOnAddressChange","handleAddressError","_value","message","transferValue","setTransferValue","transferTokenSymbol","setTransferTokenSymbol","transferFeeList","TRANSFER","transferProps","transferBtnStatus","onTransferClick","resetValue","setResetValue","resetProps","resetBtnStatus","onResetClick","ammProps","ammDepositData","slippage","ammWithdrawData","ammCalcData","myCoinA","myCoinB","AtoB","coinInfoMap","handleDepositEvent","handleWithDrawEvent","onAmmWithdrawClick","onAmmDepositClick","swapProps","tradeCalcData","coinSell","coinBuy","BtoS","StoB","sellCoinInfoMap","buyCoinInfoMap","priceImpact","minimumReceived","onSwapClick","handleSwapPanelEvent","ModalAccountInfo","withTranslation","onClose","rest","Modal","aria-labelledby","aria-describedby","style","boxShadow","paddingTop","paddingBottom","minWidth","Header","useLocation","useSettings","setTheme","themeMode","useOpenModals","isShowAccountInfo","isShowConnect","setShowConnect","setShowAccountInfo","forceUpdate","useReducer","bool","gatewayList","DefaultGatewayList","handleSelect","accountInfoProps","setAccountInfoProps","onNotification","onWalletBtnConnect","onThemeBtnClick","dark","light","onLangBtnClick","lang","headerToolBarData","ButtonComponentsMap","handleClick","Language","handleChange","UnlockBtn","className","startIcon","fontSize","lockCallback","unLockCallback","LockBtn","updateHeaderMenuWhenHasAccountInfo","headerMenuData","HeadMenuTabKey","Layer2","HeaderMenuTabStatus","default","addressShort","level","etherscanLink","mainBtn","_event","connectBy","label","WalletStatus","hidden","noAccount","accountPending","useHeader","onSwitch","openQRCode","setOpenQRCode","copyToastOpen","setCopyToastOpen","closeCopyToast","Snackbar","autoHideDuration","Alert","severity","withDrawProps","selected","pathname","headerRoot","Toolbar","onCopy","onViewQRCode","onDisconnect","OnePageSize","isAtBottom","marketArrayLength","target","clientHeight","scrollTop","scrollHeight","RowStyled","Grid","unit","TableWrapStyled","background","border","defaultFrame","c_key","d_R","TablePaddingX","pLeft","pRight","QuotePage","recommendMarkets","slice","_marketArrayWithOutRecommend","filter","findIndex","m","tickList","setTickList","recommendations","setRecommendations","setTickerKeys","focusRowFrom","setFocusRowFrom","array","concat","_recommendationsFloat","_tickList","_item","pair","_recommendations","coinAInfo","coinBInfo","handleScroll","useQuote","container","xs","paddingY","onVisibleRowsChange","toggleData","ChartType","Trend","Depth","fnType","BasicInfoPanel","tgItemJSXs","tlabel","JSX","getExistedMarket","chartType","setChartType","ChartUnit","D1","chartUnit","originData","setOriginData","_e","tgItemJSXsPriceChart","pre","tGItemData","TradingInterval","min15","limit","getCandlestick","candlesticks","timeStamp","quoteVol","getMixDepth","depth","bidsPrices","bids_prices","bidsAmtTotals","bids_amtTotals","asksPrices","asks_prices","asksAmtTotals","asks_amtTotals","useBasicInfo","upColor","exclusive","minHeight","maxHeight","width","riseColor","handleMove","StylePaper","borderColor","applyProps","id","StyledTabsWrapper","StyledFormControlLabel","FormControlLabel","TradePanel","tradeArray","myTradeArray","isAllTrade","setIsAllTrade","setValue","control","Checkbox","checked","checkedIcon","onChange","flag","Tabs","aria-label","Tab","accountStaticCallBack","args","UNKNOWN","DEFAULT","bntLabel","btnClickArray","coinPairInit","coinKey","_tradeCalcData","ele","pairDetailBlock","getAmmPoolSnapshot","ammPoolSnapshot","ammPoolsBalance","NO_SDK","pairDetailDone","stob","tickerData","isNaN","poolVolumn","getBaseQuote","quote","poolBaseTokenVol","quoteBaseTokenVol","NO_SUPPORT_PAIR","baseVol","makeTickView","tick","FloatTag","none","increase","decrease","getUserTrades","marketKey","userTrades","makeMarketArray","currency","Side","Sell","TradeTypes","Buy","tradeTime","getUserAmmTransaction","getUserAmmPoolTxs","userAmmPoolTxs","makeMyAmmMarketArray","marketTransaction","lpToken","txType","AmmTxType","JOIN","AmmTradeType","add","remove","totalDollar","totalYuan","amountA","poolTokens","actualAmount","amountB","updatedAt","txStatus","makeCache","__cache__","customSlippage","setSlippage","FixedStyle","SwapPage","wait","globalSetup","useRouteMatch","setTradeData","setTradeCalcData","setTradeArray","setMyTradeArray","setTradeFloat","setPair","setAmmPoolSnapshot","swapBtnI18nKey","setSwapBtnI18nKey","output","setOutput","params","resetSwap","_myTradeArray","swapData","SwapType","SEll_CLICK","BUY_CLICK","SELL_SELECTED","BUY_SELECTED","EXCHANGE_CLICK","calculateTradeData","_tradeData","input","isAtoB","throttleSetValue","_","_ammPoolSnapshot","td","_tradeFloat","_tradeArray","apiList","getMarketTrades","_td","TRADE_LITE_SET_PAIR_ERROR","swapBtnClickArray","baseToken","quoteToken","orderId","sellToken","buyToken","amountBOutSlip","allOrNone","maxFeeBips","fillAmountBOrS","orderType","OrderType","ClassAmm","eddsaSignature","submitOrder","useSwapPage","marginRight","alignContent","useApi","ApiClass","DEFAULT_TIMEOUT","genApi","useMemo","stateArr","useWebsocket","verify","needApiKey","useRef","wsData","setMessage","readyState","setReadyState","creatWebSocket","wsApiKey","basePath","op","unsubscribeAll","flat_txt","subTopics","closeWebSocket","msg","reconnect","useAmmpoolWs","socketData","setSocketData","isLocalPage","setIsLocalPage","visibilityState","parse","useWs","DebugPage","getMarkets","useGetMarkets","gas","setGas","useGetGas","TxPanel","setPageSize","txTableData","setTxTableData","getUserTranferList","userTxns","mappingList","userTransfers","o","senderAddress","receiverAddress","feeTokenSymbol","feeAmount","memo","txnHash","TransactionStatus","processed","processing","received","failed","tradeType","TransactionTradeTypes","offsetHeight","floor","ref","pagination","StyledChartWrapper","StyledBtnGroupWrapper","AssetPanel","random","chartPeriod","setChartPeriod","chartData","setChartData","getUserAssets","wallet","assetType","AssetType","DEX","userAssets","onShowDeposit","AssetTitleProps","assetInfo","totalAsset","priceTag","PriceTag","Dollar","onShowTransfer","onShowWithdraw","tokensAll","tokenPriceList","entries","tokenDetail","coinList","coinDetailList","values","doughnutData","coin","isLpToken","split","splice","ammToken","ammTokenList","tokenPriceUSDT","find","assetsRawData","TokenType","single","available","smallBalance","Paper","showFiliter","originalData","setOriginalData","marketList","OrderPanel","orderOriginalData","setOrderOriginalData","getOrders","userOrders","Array","isArray","orders","volumes","baseAmount","quoteAmount","baseFilled","quoteFilled","average","filledAmount","filledPrice","validity","start","detailTable","StyledPaper","StyledSwitch","Switch","textPrimary","success","backgroundColor","opacity","BtnCurrency","Currency","dollar","_handleChange","IconComponent","DropDownIcon","labelId","autoWidth","yen","StyledDivider","Divider","SettingPanel","focus","useTheme","setUpColor","setCurrency","direction","flexWrap","paddingLeft","marginBottom","paddingX","alignSelf","Button","passDay","changeLanguage","textTransform","UpColor","green","up","down","red","subMenu","subMenuLayer2","BoxStyle","SubMenuList","withRef","BasicSubMenuList","Layer2Page","accStatus","PoolsPanel","handlePageChange","ammPairInit","_ammCalcData","ammType","AmmPanelType","Deposit","coinACount","coinBCount","AmmPanelView","snapShotData","setAmmCalcData","setAmmDepositData","setAmmWithdrawData","ammDepositBtnI18nKey","setAmmDepositBtnI18nKey","ammWithdrawBtnI18nKey","setAmmWithdrawBtnI18nKey","initAmmData","onAmmWithdrawClickArray","onAmmDepositClickArray","useAmmPanel","isLoading","tabSelected","ammDepositBtnStatus","LOADING","ammWithdrawBtnStatus","makeUIAmmActivityMap","myReward","ammPoolActivityStatus","ammActivityViewMap","ammPoolActivityRule","awardRules","myRewards","AmmPoolActivityStatus","InProgress","currentRewards","duration","rangeFrom","rangeTo","isPass","EndOfGame","makeAsCard","_ammInfo","itemArray","activity","getOneRewardInfo","reward2","rewardDollar","rewardYuan","balanceA","balanceB","balanceDollar","balanceYuan","ammUserReward","feeRewards","ratio","BigNumber","_walletMap","ammDetail","makeMyAmmWithSnapshot","makeAmmDetailExtendsActivityMap","ammActivity","BoxStyled","CoinPairPanel","useUserRewardsState","setWalletMap","ammMarketArray","myAmmMarketArray","setMyAmmMarketArray","setAmmUserRewardMap","setSnapShotData","myAmm","setMyAmm","totalRewards","coinPairInfo","setCoinPairInfo","walletLayer2DoIt","_coinPairInfo","_snapShotData","_myAmm","useCoinPair","tabIndex","setTabIndex","_handlePageChange","Breadcrumbs","spacing","wrap","md","paddingRight","getThousandFormattedNumbers","Yuan","Hidden","mdDown","noWrap","textOverflow","moment","format","AmmCardWrap","forwardRef","AmmCard","AmmList","sm","lg","AmmMiningView","userRewardsMapState","setAmmActivityViewMap","ammActivityPastViewMap","setAmmActivityPastViewMap","NotStarted","useAmmMiningUI","makeMyPoolRowWithPoolState","makeMyAmmWithStat","useOverview","summaryReward","setSummaryReward","myPoolRow","setMyPoolRow","makeMyPoolRow","walletKey","test","rowData","_myPoolRow","makeSummaryMyAmm","StyleWrapper","LiquidityOverview","padding","margin","handleDeposit","row","handleWithdraw","subMenuLiquidity","LiquidityPage","AmmActivityMapState","setAmmActivityMap","useAmmPool","matchPair","RouterView","exact","path"],"mappings":"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","file":"static/js/main~a97bfcba.623f6e58.chunk.js","sourcesContent":["import { toBig } from 'loopring-sdk'\n\nexport enum OrderHandling {\n    processed = 'processed',\n    no_such_order = 'no_such_order',\n    too_many_times = 'too_many_times',\n}\n\nexport const BIG0 = toBig(0)\n\nexport const BIG1 = toBig(1)\n\nexport const BIG10 = toBig(10)\n\nexport const BIG10K = toBig(10000)\n\nexport const MULTI_FACTOR = 10000\n","import { useDeepCompareEffect } from \"react-use\"\n\nexport function useCustomDCEffect(action: any, deps: any[] | undefined | null) {\n    useDeepCompareEffect(action, [deps || {}])\n}\n","import { ConnectorNames } from 'loopring-sdk'\n\nimport {\n    injected,\n    network,\n    walletconnect,\n    walletlink,\n    ledger,\n    trezor,\n    authereum,\n} from 'networks/web3_connectors'\n\nexport const connectorsByName: { [connectorName in ConnectorNames]: any } = {\n    [ConnectorNames.Unknown]: undefined,\n    [ConnectorNames.Injected]: injected,\n    [ConnectorNames.Network]: network,\n    [ConnectorNames.WalletConnect]: walletconnect,\n    [ConnectorNames.WalletLink]: walletlink,\n    [ConnectorNames.Ledger]: ledger,\n    [ConnectorNames.Trezor]: trezor,\n    [ConnectorNames.Authereum]: authereum,\n}\n","import React from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\n\nimport { useCustomDCEffect } from 'hooks/common/useCustomDCEffect'\n\nimport { useGetTradingInfo } from 'stores/trading/hook'\nimport { useActiveWeb3React, } from 'hooks/web3/useWeb3'\n\nimport { Lv2Account, } from 'defs/account_defs'\n\nimport { AccountStatus, StatusChangeEvent } from 'state_machine/account_machine_spec'\n\nimport * as sign_tools from 'loopring-sdk'\n\nimport { connectorsByName } from 'defs/web3_defs'\n\nimport { ChainId, ConnectorNames, dumpError400, ExchangeAPI, UserAPI, } from 'loopring-sdk'\n\nimport { toHex, toBig, } from 'loopring-sdk'\n\nimport { RootState } from 'stores'\n\nimport {\n    reset, setAccountStatus, setConnectName,\n    setConnectNameTemp, setAccountInfo, setEddsaKey, setApikey, setAccAddr,\n} from 'stores/account/reducer'\n\nimport { AccountMachineSpec, } from 'state_machine/account_machine_spec'\n\nimport { buildMachine } from 'state_machine/machine_builder'\n\nimport voca from 'voca'\nimport { usePrevious } from 'react-use'\n\nimport Web3 from 'web3'\n\nimport { useExchangeAPI, useUserAPI } from 'hooks/exchange/useApi'\n\nimport { UserStorage } from 'storage'\n\nimport store from 'stores'\nimport { updateWalletLayer1, reset as resetLayer1 } from '../walletLayer1';\nimport { updateWalletLayer2, reset as resetLayer2 } from '../walletLayer2';\nimport { useTokenMap } from '../token';\n\n\nexport function useWeb3Account() {\n\n    const {\n        connector,\n        library,\n        account,\n        chainId,\n        active,\n        error,\n    } = useActiveWeb3React()\n\n    const isConnected: boolean = active && !voca.isBlank(account as string)\n\n    return {\n        account,\n        connector,\n        library,\n        chainId,\n        active,\n        isConnected,\n        error,\n    }\n\n}\n\nexport function useAccount() {\n\n    const account: Lv2Account = useSelector((state: RootState) => state.account)\n\n    const isNoAccount = () => {\n        return account.status === AccountStatus.NOACCOUNT\n    }\n\n    const isActivated = () => {\n        return account.status === AccountStatus.ACTIVATED\n    }\n\n    return {\n        account,\n        isNoAccount,\n        isActivated,\n        apiKey: account.apiKey,\n        eddsaKey: account.eddsaKey,\n        accountId: account.accountId,\n    }\n}\n\nexport function useStateMachine() {\n    const dispatch = useDispatch()\n\n    const machine = buildMachine(AccountMachineSpec())\n\n    const sendEvent = React.useCallback((account: Lv2Account, event: StatusChangeEvent) => {\n        const nextState = machine(account.status, event)\n        if (nextState) {\n            dispatch(setAccountStatus(nextState))\n        }\n    }, [machine, dispatch])\n\n    return {\n        sendEvent,\n    }\n}\n\nexport function useConnect() {\n\n    const {\n        activate,\n    } = useActiveWeb3React()\n\n    const { sendEvent } = useStateMachine()\n\n    const dispatch = useDispatch()\n\n    const [activatingConnector, setActivatingConnector] = React.useState<any>()\n\n    const connect = React.useCallback((item_name: ConnectorNames, isSwitch: boolean = false) => {\n        const newConnector: any = connectorsByName[item_name]\n        setActivatingConnector(newConnector)\n        activate(newConnector)\n        dispatch(setConnectNameTemp(item_name))\n\n        if (isSwitch) {\n          //  console.log('try Connecting... isSwitch Reset')\n            sendEvent(store.getState().account, StatusChangeEvent.Reset)\n        }\n\n        sendEvent(store.getState().account, StatusChangeEvent.Connecting)\n\n        console.log('try Connecting...')\n    }, [activate, dispatch, sendEvent])\n\n    return {\n        connect,\n        activatingConnector,\n    }\n\n}\n\nexport function useDisconnect() {\n\n    const {\n        deactivate,\n    } = useActiveWeb3React()\n\n    const dispatch = useDispatch()\n\n    const disconnect = React.useCallback(() => {\n        deactivate()\n        dispatch(reset(undefined))\n        //TODO dispatch wallet info \n    }, [deactivate, dispatch])\n\n    return {\n        disconnect,\n    }\n\n}\n\nexport function useUnlock() {\n\n    const dispatch = useDispatch()\n\n    const exchangeApi: any = useExchangeAPI()\n\n    const userApi: any = useUserAPI()\n\n    const { tradingInfo } = useGetTradingInfo()\n\n    const { connector, } = useWeb3Account()\n\n    const { sendEvent } = useStateMachine()\n\n    const lock = React.useCallback(async (account: Lv2Account) => {\n        console.log('useCallback lock:', account.status)\n        sendEvent(account, StatusChangeEvent.Lock)\n    }, [sendEvent])\n\n    const unlock = React.useCallback(async (account: Lv2Account) => {\n\n        if (!userApi || !exchangeApi || !connector || !account.accountId || !tradingInfo.exchangeInfo?.exchangeAddress\n            || account.status !== AccountStatus.LOCKED) {\n            console.log('accountId:', account.accountId)\n            console.log('exchangeAddress:', tradingInfo.exchangeInfo)\n            console.log('enter !! account.status:', account.status)\n            return\n        }\n\n        console.log('useUnlock useCallback:', account.status)\n\n        if (account.status !== AccountStatus.LOCKED) {\n            throw Error('unexpected status:' + account.status)\n        }\n\n        let event = undefined\n        let sk = undefined\n        let apikey: any = undefined\n\n        try {\n            const provider = await connector.getProvider()\n            const web3 = new Web3(provider as any)\n            console.log('useUnlock eddsaKey:', account.eddsaKey)\n\n            if (!account.eddsaKey) {\n                const eddsakey = await sign_tools\n                    .generateKeyPair(\n                        web3,\n                        account.accAddr,\n                        tradingInfo.exchangeInfo?.exchangeAddress as string,\n                        account.nonce - 1,\n                        account.connectName,\n                    )\n                sk = toHex(toBig(eddsakey.keyPair.secretKey))\n\n            } else {\n                sk = account.eddsaKey\n            }\n\n            apikey = await userApi.getUserApiKey({\n                accountId: account.accountId\n            }, sk)\n\n            console.log('useUnlock apikey:', apikey)\n\n            event = StatusChangeEvent.Unlock\n\n        } catch (reason) {\n            console.log(reason)\n            event = StatusChangeEvent.Reset\n        }\n\n        if (sk) {\n            dispatch(setEddsaKey(sk))\n        }\n\n        if (apikey?.apiKey) {\n            dispatch(setApikey(apikey.apiKey))\n        }\n\n        console.log('next event:', event)\n        if (event) {\n            sendEvent(account, event)\n        }\n\n    }\n        , [dispatch, sendEvent, exchangeApi, userApi, connector, tradingInfo.exchangeInfo])\n\n    return {\n        lock,\n        unlock,\n    }\n}\n\nasync function checkAccountAvailableAsync(exchangeApi: ExchangeAPI, userApi: UserAPI, account: Lv2Account, dispatch: any, sendEvent: any, connector: any, exchangeAddress: string) {\n\n    let accInfo = undefined\n    let event = undefined\n    let sk = undefined\n    let code = undefined\n    let apikey: any = undefined\n\n    try {\n        accInfo = (await exchangeApi.getAccount({\n            owner: account.accAddr\n        })).accInfo\n        if (accInfo.publicKey && accInfo.publicKey.x && accInfo.publicKey.y) {\n            if (account.accountId !== accInfo.accountId) {\n                const provider = await connector.getProvider()\n                const web3 = new Web3(provider as any)\n                try {\n                    code = await web3.eth.getCode(account.accAddr)\n                    // console.log('!!!!!! about to generateKeyPair!!!!!!!!!!!')\n                    try {\n                        const eddsakey = await sign_tools\n                            .generateKeyPair(\n                                web3,\n                                account.accAddr,\n                                exchangeAddress,\n                                accInfo.nonce - 1,\n                                account.connectName,\n                            )\n                        sk = toHex(toBig(eddsakey.keyPair.secretKey))\n                        const px = toHex(toBig(eddsakey.keyPair.publicKeyX))\n                        const py = toHex(toBig(eddsakey.keyPair.publicKeyY))\n\n                        try {\n                            apikey = await userApi.getUserApiKey({\n                                accountId: accInfo.accountId\n                            }, sk)\n                            event = (StatusChangeEvent.HasPubkey)\n                        } catch (reason) {\n                            dumpError400(reason)\n                            event = (StatusChangeEvent.ErrorResponse)\n                        }\n                    } catch (reason) {\n                        dumpError400(reason)\n                        event = (StatusChangeEvent.ErrorResponse)\n                    }\n\n                } catch (reason) {\n                    dumpError400(reason)\n                    event = (StatusChangeEvent.ErrorResponse)\n                }\n\n            } else {\n                console.log('already has accountId!')\n            }\n        } else {\n            console.log('2 has id but no pubkey currStatus:', account.status)\n            event = (StatusChangeEvent.HasNoPubkey)\n        }\n    } catch (reason) {\n        // 3 has none of above\n        console.log('2 has id but no pubkey currStatus:', account.status)\n        dumpError400(reason)\n        // check deposit tx (local and ethereum)\n        event = (StatusChangeEvent.ErrorResponse)\n    }\n\n    if (accInfo && accInfo.owner !== account.accAddr) {\n        dispatch(setAccountInfo(accInfo))\n    }\n\n    if (sk) {\n        dispatch(setEddsaKey(sk))\n    }\n\n    if (apikey) {\n        console.log('---------> apikey:', apikey)\n        dispatch(setApikey(apikey.apiKey))\n    }\n\n    if (event) {\n        sendEvent(event)\n    }\n\n}\n\nexport function useCheckAccStatus() {\n\n    const dispatch = useDispatch()\n\n    const { account } = useAccount()\n\n    const { sendEvent } = useStateMachine()\n\n    const exchangeApi: ExchangeAPI = useExchangeAPI()\n\n    const userApi: UserAPI = useUserAPI()\n\n    const { account: web3Account, active, isConnected, chainId, connector, } = useWeb3Account()\n    const { marketArray } = useTokenMap()\n\n    const lv1Acc = web3Account as string\n\n    const prevChainId = usePrevious(chainId)\n    const prevWeb3Account = usePrevious(web3Account)\n\n    // const { updateWalletLayer1,resetLayer1} = useWalletLayer1();\n    // const { updateWalletLayer2, resetLayer2} = useWalletLayer2()\n\n\n    // console.log('prevChainId:', prevChainId, ' chainId:', chainId)\n    // console.log('prevWeb3Account:', prevWeb3Account, ' web3Account:', web3Account)\n\n    // console.log(exchangeApi, userApi, account, 'prevChainId:', prevChainId, 'chainId:', chainId, 'web3Account:', web3Account)\n\n    const { tradingInfo } = useGetTradingInfo()\n\n    useCustomDCEffect(async () => {\n\n        const cleanUp = () => {\n            let handler = UserStorage.getHandler()\n            if (account.status !== AccountStatus.ACTIVATED && handler) {\n                clearInterval(handler)\n            }\n        }\n\n        async function checkStatus() {\n\n            if (!account || !lv1Acc || !exchangeApi || !userApi || !connector || !tradingInfo.exchangeInfo?.exchangeAddress) {\n                //console.log('checkStatus return!!!!!!')\n                return\n            }\n\n            if (((prevChainId && chainId && prevChainId !== chainId)\n                || (prevWeb3Account && web3Account && prevWeb3Account !== web3Account))\n                && account.status !== AccountStatus.UNCONNNECTED) {\n\n                console.log('checkStatus try to resetFunc')\n                dispatch(reset(undefined))\n                sendEvent(account, StatusChangeEvent.Reset)\n                return\n            }\n\n            cleanUp()\n\n            switch (account.status) {\n                case AccountStatus.UNCONNNECTED:\n                   // console.log('---> render UNCONNNECTED active:', active, ' isConnected:', isConnected)\n\n                    if (isConnected) {\n                        dispatch(setConnectNameTemp(ConnectorNames.Injected))\n                        sendEvent(account, StatusChangeEvent.Connecting)\n                    }\n\n                    //HIGH:\n                    dispatch(resetLayer1(undefined));\n                    dispatch(resetLayer2(undefined));\n                    break\n\n                case AccountStatus.CONNECTED:\n                    //check session or local storage\n\n                  //  console.log('---> render CONNECTED account:', account)\n\n                    try {\n\n                        const acc = (await exchangeApi.getAccount({ owner: lv1Acc })).accInfo\n\n                        // current acc is local acc info\n                        if (account.accAddr && account.eddsaKey && acc.owner === account.accAddr) {\n                            // console.log('cur Eddsakey:', account.eddsaKey)\n                        } else {\n                            // console.log('got a new address:', acc)\n                            // got a new address\n                            dispatch(setAccountInfo(acc))\n                            // dispatch(setEddsaKey(''))\n                           \n                            //updateWalletLayer1();\n                            if(marketArray?.length){\n                                dispatch(updateWalletLayer1(undefined));\n                            }\n                        }\n\n                        if (account?.connectName !== account?.connectNameTemp) {\n                            dispatch(setConnectName(account.connectNameTemp))\n                        }\n\n                        sendEvent(account, StatusChangeEvent.HasPubkey)\n\n                    } catch (reason) {\n                        dumpError400(reason)\n\n                        if (lv1Acc) {\n                            dispatch(setAccAddr(lv1Acc))\n                        }\n\n                        if (reason.response && reason.response.data && reason.response.data.resultInfo\n                             && reason.response.data.resultInfo.code === 101002) {\n                            sendEvent(account, StatusChangeEvent.ErrorResponse)\n                        }\n                    }\n\n                    break\n\n                case AccountStatus.NOACCOUNT:\n                    break\n\n                case AccountStatus.DEPOSITING:\n                    // TODO sub contract event, check deposit.\n                    const depositFinished = true // TODO\n                    if (depositFinished) {\n                     //   console.log('depositFinished currStatus:', account.status)\n                        sendEvent(account, StatusChangeEvent.FinishDeposit)\n                    }\n                    break\n\n                case AccountStatus.DEPOSIT_TO_CONFIREM:\n                    // getAccount every 10s to check\n                    break\n\n                case AccountStatus.UNACTIVATED:\n                    const isSmartWallet = false // TODO\n                    if (isSmartWallet) {\n                        // TODO approve hash,\n                      //  console.log('approve hash, currStatus:', account.status)\n                        sendEvent(account, StatusChangeEvent.IsSmartWallet)\n                    } else {\n                       // console.log('approve hash no smartwallet, account.status:', account.status)\n                    }\n                    break\n\n                case AccountStatus.ARPROVING:\n                    // TODO sub contract event, check approving.\n                    const approved = false // TODO\n                    if (approved) {\n                      //  console.log('sub contract event, check approving. approved! status:', account.status)\n                        sendEvent(account, StatusChangeEvent.ApproveSubmit)\n                    }\n                    break\n\n                case AccountStatus.APPROV_TO_CONFIRM:\n                    const approveConfirmed = false // TODO\n                    if (approveConfirmed) {\n                     //   console.log('approveConfirmed status:', account.status)\n                        sendEvent(account, StatusChangeEvent.ApproveConfirmed)\n                    }\n                    break\n\n                case AccountStatus.LOCKED:\n                    //HIGH:\n                    dispatch(resetLayer1(undefined))\n                    break\n\n                case AccountStatus.ACTIVATED:\n                    UserStorage.checkTimeout(true)\n                    const handler = setInterval(() => {\n                        const isTimeOut = UserStorage.checkTimeout()\n                        if (account.status === AccountStatus.ACTIVATED && isTimeOut) {\n                            clearInterval(handler)\n                            sendEvent(account, StatusChangeEvent.Lock)\n                        }\n                    }, 1000)\n                    UserStorage.setHandler(handler);\n                    //HIGH:\n                    dispatch(updateWalletLayer2(undefined))\n                        //useWalletLayer2().updateWalletLayer2();\n                    //dispatch((undefined));\n                    break\n\n                default:\n                    break\n            }\n\n\n\n        }\n\n        checkStatus()\n\n        return () => {\n            cleanUp()\n        }\n\n    }, [    updateWalletLayer1, updateWalletLayer2, resetLayer1,resetLayer2,\n        //updateWalletLayer2, updateWalletLayer1,resetLayer1,resetLayer2,\n\n        exchangeApi, userApi, account, prevChainId, chainId, lv1Acc, dispatch, connector, tradingInfo.exchangeInfo?.exchangeAddress,])\n\n}\n\n","export const buildMachine = <S, E>(spec: any) => (currentState: S, event: E) => {\n    // We get all possible transitions for the current State\n    const stateTransitions = spec.states[currentState]\n\n    // No transitions? Error!\n    if (stateTransitions === undefined) {\n        throw new Error(`No transitions defined for ${currentState}`)\n    }\n\n    // We try to transition to the next state\n    const nextState = stateTransitions[event]\n\n    // No next state? Error!\n    if (nextState === undefined) {\n        throw new Error(\n            `Unknown transition for event ${event} in state ${currentState}`\n        )\n    }\n\n   // console.log('got nextState:', nextState)\n\n    // We return the new state\n    return nextState\n}\n","import { createSlice, PayloadAction, Slice } from '@reduxjs/toolkit'\n\nimport { AccountInfo, ConnectorNames, } from 'loopring-sdk'\n\nimport { Lv2Account, } from 'defs/account_defs'\nimport { AccountStatus } from 'state_machine/account_machine_spec'\nimport { UserStorage } from 'storage'\n\n\nconst initialState = () => {\n  const defaultAccId = process.env.REACT_APP_TEST_ACCOUND_ID ? process.env.REACT_APP_TEST_ACCOUND_ID : UserStorage.getAccountId()\n  const defaultApiKey = process.env.REACT_APP_TEST_API_KEY ? process.env.REACT_APP_TEST_API_KEY : UserStorage.getApikey()\n  const defaultOwner = process.env.REACT_APP_TEST_OWNER ? process.env.REACT_APP_TEST_OWNER : UserStorage.getAccount()\n  const defaultEddsaKey = process.env.REACT_APP_TEST_EDDSA_KEY ? process.env.REACT_APP_TEST_EDDSA_KEY : UserStorage.getEddsakey()\n\n  console.log('defaultApiKey:', JSON.stringify(defaultApiKey))\n  const defaultStatus = AccountStatus.UNCONNNECTED\n  return {\n    accAddr: defaultOwner,\n    status: defaultStatus,\n    accountId: defaultAccId,\n    publicKey: {},\n    nonce: 0,\n    isContractAddress: false,\n    apiKey: defaultApiKey,\n    eddsaKey: defaultEddsaKey,\n    connectName: ConnectorNames.Unknown,\n    connectNameTemp: ConnectorNames.Unknown,\n  } as Lv2Account\n}\n\nconst accountSlice:Slice = createSlice({\n  name: 'account',\n  initialState: initialState(),\n  reducers: {\n    reset(state) {\n      const initState = initialState()\n      console.log('!!! reset account!', initState)\n      Object.assign(state, initState)\n    },\n    setAccAddr(state, action: PayloadAction<string>) {\n      state.accAddr = action.payload\n      // UserStorage.setAccount(action.payload)\n    },\n    setAccountInfo(state, action: PayloadAction<AccountInfo>) {\n      state.accAddr = action.payload.owner\n      state.accountId = action.payload.accountId\n      state.nonce = action.payload.nonce\n      state.publicKey = action.payload.publicKey\n\n      // UserStorage.setAccount(state.accAddr)\n      // UserStorage.setAccountId(state.accountId)\n      \n    },\n    setApikey(state, action: PayloadAction<string>) {\n      state.apiKey = action.payload\n      // UserStorage.setApikey(action.payload)\n    },\n    setAccountStatus(state, action: PayloadAction<AccountStatus>) {\n      state.status = action.payload\n    },\n    setEddsaKey(state, action: PayloadAction<any>) {\n      state.eddsaKey = action.payload\n      // UserStorage.setEddsakey(action.payload)\n    },\n    setConnectName(state, action: PayloadAction<ConnectorNames>) {\n      state.connectName = action.payload\n    },\n    setConnectNameTemp(state, action: PayloadAction<ConnectorNames>) {\n      state.connectNameTemp = action.payload\n    },\n    setIsContractAddress(state, action: PayloadAction<boolean>) {\n      state.isContractAddress = action.payload\n    },\n  },\n})\n\nexport const { reset, setAccAddr, setApikey, setConnectName, setConnectNameTemp, setAccountInfo, setAccountStatus, setEddsaKey, setIsContractAddress, } = accountSlice.actions\nexport default accountSlice\n","import { useDispatch, useSelector } from 'react-redux'\nimport { tokenMapSlice } from './reducer';\nimport { TokenMapStates } from './interface';\n\nexport function useTokenMap<R extends {[key:string]:any}>(): TokenMapStates<R> & {\n    updateTokenMap:()=>void,\n    statusUnset:()=>void,\n} {\n    const tokenMap:TokenMapStates<R> = useSelector((state: any) => state.tokenMap)\n    const dispatch = useDispatch();\n    const updateTokenMap = () => {\n        dispatch(tokenMapSlice.actions.getTokenMap(undefined))\n    }\n    const statusUnset = ()=>{\n        dispatch(tokenMapSlice.actions.statusUnset(undefined))\n    }\n    return {\n        ...tokenMap,\n        statusUnset,\n        updateTokenMap,\n    }\n\n}\n","import { useDispatch, useSelector } from 'react-redux'\nimport { AmmMapStates } from './interface';\nimport { ammMapSlice } from './reducer';\n\nexport const useAmmMap = <R extends {[key:string]:any},I extends {[key:string]:any}>(): AmmMapStates<R,I> & {\n    updateAmmMap:()=> void,\n    statusUnset:()=> void,\n} => {\n    const ammMap:AmmMapStates<R,I>= useSelector((state: any) => state.amm.ammMap)\n    const dispatch = useDispatch();\n    const updateAmmMap = () => {\n        dispatch(ammMapSlice.actions.getAmmMap(undefined))\n    }\n    const statusUnset = ()=>{\n        dispatch(ammMapSlice.actions.statusUnset(undefined))\n    }\n    return {\n        ...ammMap,\n        statusUnset,\n        updateAmmMap\n    }\n}\n","import { useAmmpoolAPI, useExchangeAPI } from 'hooks/exchange/useApi'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { useCustomDCEffect } from 'hooks/common/useCustomDCEffect'\n\nimport store, { RootState } from 'stores'\n\nimport { \n    setMarkets, \n    setExchangeInfo, \n    setTokens, \n    setTickerMap, \n    setAmmPoolStats,\n    setAmmPoolConf, \n    setMarketTrades,\n    setAmmActivityRules,\n    setChainId, \n} from 'stores/trading/reducer'\n\nimport { dumpError400, ChainId, AmmPoolStat, Currency, } from 'loopring-sdk'\nimport { useActiveWeb3React } from 'hooks/web3/useWeb3'\nimport { useEffect } from 'react'\n\nimport { ammpoolAPI, exchangeAPI } from \"stores/apis/api\"\n\nexport function getTradingInfo() {\n    const tradingInfo = store.getState().trading\n    return {\n        tradingInfo,\n        chainId: tradingInfo.chainId,\n    }\n}\n\nexport function getAccount() {\n    return  store.getState().account\n\n}\n\nexport function getChainId(){\n    const chainId = store.getState().system.chainId;\n    return chainId\n\n}\n\nexport function useGetTradingInfo() {\n    const tradingInfo = useSelector((state: RootState) => state.trading)\n    return {\n        tradingInfo,\n        chainId: tradingInfo.chainId,\n    }\n}\n\nexport function useUpdateChainId() {\n    const { chainId } = useActiveWeb3React()\n    const dispatch = useDispatch()\n    useEffect(() => {\n        dispatch(setChainId(chainId ?? ChainId.GORLI))\n    }, [chainId, dispatch])\n}\n\nexport function useUpdateExchangeMarkets() {\n    const dispatch = useDispatch()\n    const api = useExchangeAPI()\n\n    useCustomDCEffect(async() => {\n\n        if (!api) {\n            return\n        }\n\n        try {\n            const response = await api.getMixMarkets()\n            dispatch(setMarkets(response))\n        } catch (reason) {\n            dumpError400(reason)\n        }\n\n    }, [api])\n\n}\n\nexport function useUpdateExchangeInfo() {\n\n    const dispatch = useDispatch()\n    const api = useExchangeAPI()\n\n    useCustomDCEffect(async() => {\n\n        if (!api) {\n            return\n        }\n\n        try {\n            const response = await api.getExchangeInfo()\n            dispatch(setExchangeInfo(response.exchangeInfo))\n        } catch (reason) {\n            dumpError400(reason)\n        }\n\n    }, [api])\n\n}\n\nexport function useUpdateAmmPoolConf() {\n\n    const dispatch = useDispatch()\n    const api = useAmmpoolAPI()\n\n    useCustomDCEffect(async() => {\n\n        if (!api) {\n            return\n        }\n\n        try {\n            const ammPoolConf = await api.getAmmPoolConf()\n            dispatch(setAmmPoolConf(ammPoolConf))\n        } catch (reason) {\n            dumpError400(reason)\n        }\n\n    }, [api])\n\n}\n\nexport function useUpdateAmmPoolStats() {\n\n    const dispatch = useDispatch()\n    const api = useAmmpoolAPI()\n\n    useCustomDCEffect(async() => {\n\n        if (!api) {\n            return\n        }\n\n        try {\n            const ammPoolStats = await api.getAmmPoolStats()\n            dispatch(setAmmPoolStats(ammPoolStats))\n        } catch (reason) {\n            dumpError400(reason)\n        }\n\n    }, [api])\n\n}\n\nexport function useUpdateAmmActivityRules() {\n\n    const dispatch = useDispatch()\n    const api = useAmmpoolAPI()\n\n    useCustomDCEffect(async() => {\n\n        if (!api) {\n            return\n        }\n\n        try {\n            const ammActivityRules = await api.getAmmPoolActivityRules()\n            dispatch(setAmmActivityRules(ammActivityRules.activityRules))\n        } catch (reason) {\n            dumpError400(reason)\n        }\n\n    }, [api])\n\n}\n\nexport function useUpdateTokens() {\n\n    const dispatch = useDispatch()\n    const api = useExchangeAPI()\n\n    useCustomDCEffect(async() => {\n\n        if (!api) {\n            return\n        }\n\n        try {\n            const tokens = await api.getTokens()\n            dispatch(setTokens(tokens))\n        } catch (reason) {\n            dumpError400(reason)\n        }\n\n    }, [api])\n\n}\n\nexport function useUpdateTickerMap(market: string) {\n\n    const dispatch = useDispatch()\n    const api = useExchangeAPI()\n\n    useCustomDCEffect(async() => {\n\n        if (!api) {\n            return\n        }\n\n        try {\n            const tickMap = await api.getTicker({\n                market\n              })\n            dispatch(setTickerMap(tickMap))\n        } catch (reason) {\n            dumpError400(reason)\n        }\n\n    }, [api])\n\n}\n\nexport function useMarketTrades(market: string) {\n  \n    const dispatch = useDispatch()\n    const api = useExchangeAPI()\n\n    useCustomDCEffect(async() => {\n\n        if (!api) {\n            return\n        }\n\n        try {\n            const marketTrades = await api.getMarketTrades({\n                market\n              })\n            dispatch(setMarketTrades(marketTrades))\n        } catch (reason) {\n            dumpError400(reason)\n        }\n\n    }, [api, dispatch])\n\n}\n\nexport function useUpdateFiatPrice() {\n  \n    const dispatch = useDispatch()\n    const api = useExchangeAPI()\n\n    useCustomDCEffect(async() => {\n\n        if (!api) {\n            return\n        }\n\n        try {\n            const usdFiatPrices = await api.getFiatPrice({\n                legal: Currency.USD\n            })\n            const cnyFiatPrices = await api.getFiatPrice({\n                legal: Currency.CNY\n            })\n            dispatch(setMarketTrades({}))\n        } catch (reason) {\n            dumpError400(reason)\n        }\n\n    }, [api, dispatch])\n\n}\n\n// export const asyncGetTradingInfo = async() => {\n//\n//     const { tradingInfo } = getTradingInfo()\n//     console.log('--- tradingInfo', tradingInfo)\n//\n//     let tokens: any = undefined\n//\n//     if (tradingInfo.tokens?.tokenIdMap) {\n//         tokens = tradingInfo.tokens\n//     } else {\n//         tokens = (await exchangeAPI().getTokens())\n//     }\n//\n//     let ammpools: any = undefined\n//\n//     if (tradingInfo.ammPoolConf?.ammpools) {\n//         ammpools = tradingInfo.ammPoolConf.ammpools\n//     } else {\n//         ammpools = (await ammpoolAPI().getAmmPoolConf()).ammpools\n//     }\n//\n//     let ammPoolStats: { [key: string] : AmmPoolStat } = {}\n//\n//     if (tradingInfo.ammPoolStats.ammPoolStats) {\n//         ammPoolStats = tradingInfo.ammPoolStats.ammPoolStats\n//     } else {\n//         ammPoolStats = (await ammpoolAPI().getAmmPoolStats()).ammPoolStats\n//     }\n//\n//     return {\n//         tokens,\n//         ammpools,\n//         ammPoolStats,\n//     }\n// }","import { useMemo, useState, useEffect } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\n\nimport { Web3Provider } from '@ethersproject/providers'\nimport { Web3ReactContextInterface } from '@web3-react/core/dist/types'\n\nimport { useWeb3React } from '@web3-react/core'\n\nimport { injected } from 'networks/web3_connectors'\n\nimport { ChainId, NetworkContextName } from 'loopring-sdk'\n\n/*\nimport EXCHANGE_ABI from 'config/abis/exchange_3_6.json'\nimport ERC20_ABI from 'config/abis/erc20.json'\nimport DEPOSIT_ABI from 'config/abis/deposit.json'\n\nimport Web3 from 'web3'\n*/\n\nexport function useActiveWeb3React(): Web3ReactContextInterface<Web3Provider> & { chainId?: ChainId } {\n  const context = useWeb3React<Web3Provider>()\n  const contextNetwork = useWeb3React<Web3Provider>(NetworkContextName)\n  return context.active ? context : contextNetwork\n}\n\nexport function useEtherscan() {\n  const { chainId } = useActiveWeb3React()\n\n  const [etherscanUrl, setEtherscanUrl] = useState<string>('')\n\n  useEffect(() => {\n    switch(chainId) {\n      case ChainId.MAINNET:\n        setEtherscanUrl('https://etherscan.io/address/')\n        break\n      default:\n        setEtherscanUrl('https://goerli.etherscan.io/address/')\n    }\n  }, [chainId])\n\n  return {\n    etherscanUrl,\n  }\n}\n\nexport function useEagerConnect() {\n\n  const { activate, active } = useWeb3React()\n\n  const [tried, setTried] = useState(false)\n\n  useEffect(() => {\n    injected.isAuthorized().then((isAuthorized: boolean) => {\n      if (isAuthorized) {\n        console.log('useEagerConnect isAuthorized')\n        activate(injected, undefined, true).catch(() => {\n          setTried(true)\n        })\n      } else {\n        console.log('useEagerConnect NOT isAuthorized')\n        setTried(true)\n      }\n    })\n  }, []) // intentionally only running on mount (make sure it's only mounted once :))\n\n  // if the connection worked, wait until we get confirmation of that to flip the flag\n  useEffect(() => {\n    if (!tried && active) {\n      setTried(true)\n    }\n  }, [tried, active])\n\n  return tried\n}\n\nexport function useInactiveListener(onReConnectInjected: any = undefined, suppress: boolean = false) {\n  const { active, error, activate, chainId, } = useWeb3React()\n  const dispatch = useDispatch()\n\n  useEffect((): any => {\n    const { ethereum } = window as any\n\n    const reConnectInjected = () => {\n      console.log('--------------------------> reConnectInjected')\n      activate(injected)\n      if (onReConnectInjected) {\n        onReConnectInjected()\n      }\n    }\n\n    if (ethereum && ethereum.on && !active && !error) {\n\n      const handleChainChanged = (chainId: string | number) => {\n        console.log('Handling \\'chainChanged\\' event with payload', chainId)\n        reConnectInjected()\n      }\n      const handleAccountsChanged = (accounts: string[]) => {\n        console.log('---------------------------------------------')\n        console.log('Handling \\'accountsChanged\\' event with payload', accounts)\n        console.log('before reset accounts.length=', accounts.length)\n        if (accounts.length > 0) {\n          console.log('before reset!!!!!!!!!!!!!!!!1')\n          reConnectInjected()\n        }\n      }\n\n      ethereum.on('chainChanged', handleChainChanged)\n      ethereum.on('accountsChanged', handleAccountsChanged)\n\n      return () => {\n        if (ethereum.removeListener) {\n          ethereum.removeListener('chainChanged', handleChainChanged)\n          ethereum.removeListener('accountsChanged', handleAccountsChanged)\n        }\n      }\n    }\n  }, [active, error, chainId, activate, dispatch])\n}\n\nexport function useBlockNumber() {\n  const { library, chainId } = useActiveWeb3React()\n\n  const [blockNumber, setBlockNumber] = useState<number>()\n\n  useEffect((): any => {\n      if (!!library) {\n          let stale = false\n\n          library\n              .getBlockNumber()\n              .then((blockNumber: number) => {\n                  if (!stale) {\n                      setBlockNumber(blockNumber)\n                  }\n              })\n              .catch(() => {\n                  if (!stale) {\n                      setBlockNumber(-1)\n                  }\n              })\n\n          const updateBlockNumber = (blockNumber: number) => {\n              setBlockNumber(blockNumber)\n          }\n          library.on('block', updateBlockNumber)\n\n          return () => {\n              stale = true\n              library.removeListener('block', updateBlockNumber)\n              setBlockNumber(undefined)\n          }\n      }\n  }, [library, chainId])\n\n  return {\n      blockNumber,\n  }\n}\n\nexport function useBalance() {\n  const { account, library, chainId } = useActiveWeb3React()\n\n  const [balance, setBalance] = useState<number>()\n  useEffect((): any => {\n      if (!!account && !!library) {\n          let stale = false\n\n          library\n              .getBalance(account)\n              .then((balance: any) => {\n                  if (!stale) {\n                      setBalance(balance)\n                  }\n              })\n              .catch(() => {\n                  if (!stale) {\n                      setBalance(0)\n                  }\n              })\n\n          return () => {\n              stale = true\n              setBalance(0)\n          }\n      }\n  }, [account, library, chainId]) // ensures refresh if referential identity of library doesn't change across chainIds\n\n  return {\n      balance,\n  }\n}\n","import { useDispatch, useSelector } from 'react-redux'\nimport { walletLayer2Slice } from './reducer';\nimport { WalletLayer2States } from './interface';\n\nexport function useWalletLayer2(): WalletLayer2States & {\n    updateWalletLayer2:()=> void,\n    statusUnset:()=> void,\n    resetLayer2:()=>void,\n} {\n    const walletLayer2:WalletLayer2States = useSelector((state: any) => state.walletLayer2)\n    const dispatch = useDispatch();\n    const updateWalletLayer2 = () => {\n        dispatch(walletLayer2Slice.actions.getWalletLayer2(undefined))\n    }\n    const statusUnset = ()=>{\n        dispatch(walletLayer2Slice.actions.statusUnset(undefined))\n    }\n    const resetLayer2 = ()=>{\n        dispatch(walletLayer2Slice.actions.reset(undefined))\n    }\n    return {\n        ...walletLayer2,\n        resetLayer2,\n        statusUnset,\n        updateWalletLayer2\n    }\n\n}\n","import { useDispatch, useSelector } from 'react-redux'\nimport { walletLayer1Slice } from './reducer';\nimport { WalletLayer1States } from './interface';\n\nexport function useWalletLayer1(): WalletLayer1States & {\n    updateWalletLayer1:()=> void,\n    statusUnset:()=> void,\n    resetLayer1:()=>void,\n} {\n    const walletLayer1:WalletLayer1States = useSelector((state: any) => state.walletLayer1)\n    const dispatch = useDispatch();\n    const updateWalletLayer1 = () => {\n        dispatch(walletLayer1Slice.actions.updateWalletLayer1(undefined))\n    }\n    const statusUnset = ()=>{\n        dispatch(walletLayer1Slice.actions.statusUnset(undefined))\n    }\n    const resetLayer1 = ()=>{\n        dispatch(walletLayer1Slice.actions.reset(undefined))\n    }\n    return {\n        ...walletLayer1,\n        resetLayer1,\n        statusUnset,\n        updateWalletLayer1\n    }\n\n}\n","import { InjectedConnector } from '@web3-react/injected-connector'\nimport { NetworkConnector } from '@web3-react/network-connector'\nimport { WalletConnectConnector } from '@web3-react/walletconnect-connector'\nimport { WalletLinkConnector } from '@web3-react/walletlink-connector'\nimport { LedgerConnector } from '@web3-react/ledger-connector'\nimport { TrezorConnector } from '@web3-react/trezor-connector'\nimport { AuthereumConnector } from '@web3-react/authereum-connector'\n\nconst POLLING_INTERVAL = 12000\n\nconst RPC_URLS: { [chainId: number]: string } = {\n  1: process.env.REACT_APP_RPC_URL_1 as string,\n  5: process.env.REACT_APP_RPC_URL_5 as string\n}\n\nconsole.log('RPC_URLS 1:', RPC_URLS[1])\nconsole.log('RPC_URLS 5:', RPC_URLS[5])\n\nexport const injected = new InjectedConnector({ supportedChainIds: [1, 5,] })\n\nexport const network = new NetworkConnector({\n  urls: { \n    1: RPC_URLS[1], \n    5: RPC_URLS[5] \n  },\n  defaultChainId: 1\n})\n\nexport const walletconnect = new WalletConnectConnector({\n  rpc: { 1: RPC_URLS[1] },\n  bridge: 'https://bridge.walletconnect.org',\n  qrcode: true,\n  pollingInterval: POLLING_INTERVAL\n})\n\nexport const walletlink = new WalletLinkConnector({\n  url: RPC_URLS[1],\n  appName: 'Loopring DEX'\n})\n\nexport const ledger = new LedgerConnector({ chainId: 1, url: RPC_URLS[1], pollingInterval: POLLING_INTERVAL })\n\nexport const trezor = new TrezorConnector({\n  chainId: 1,\n  url: RPC_URLS[1],\n  pollingInterval: POLLING_INTERVAL,\n  manifestEmail: 'dummy@abc.xyz',\n  manifestAppUrl: 'http://localhost:1234'\n})\n\nexport const authereum = new AuthereumConnector({ chainId: 42 })\n","import { createSlice, PayloadAction, Slice } from '@reduxjs/toolkit'\nimport { AmmMapStates, GetAmmMapParams } from './interface';\nimport { STATUS } from '../../constant';\n\n\n\nconst initialState: Required<AmmMapStates<object, object>> = {\n    ammMap: undefined,\n    __timer__: -1,\n    status: 'UNSET',\n    errorMessage: null,\n}\nconst ammMapSlice: Slice = createSlice({\n    name: 'ammMap',\n    initialState,\n    reducers: {\n        getAmmMap(state, action: PayloadAction<GetAmmMapParams>) {\n            state.status = STATUS.PENDING\n        },\n        getAmmMapStatus(state, action: PayloadAction<AmmMapStates<any, any>>) {\n            // @ts-ignore\n            if (action.error) {\n                state.status = STATUS.ERROR\n                // @ts-ignore\n                state.errorMessage = action.error\n            }\n            const {ammMap, __timer__} = action.payload\n            if (ammMap) {state.ammMap = ammMap;}\n            if (__timer__) {state.__timer__ = __timer__;}\n            state.status = STATUS.DONE\n        },\n        updateRealTimeAmmMap(state, action: PayloadAction<undefined>) {\n            state.status = STATUS.PENDING\n\n\n        },\n        statusUnset: state => {\n            state.status = STATUS.UNSET\n        }\n    },\n});\nexport { ammMapSlice };\nexport const {getAmmMap, getAmmMapStatus, statusUnset, updateRealTimeAmmMap} = ammMapSlice.actions\n","import { Provider } from 'react-redux'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nimport { createWeb3ReactRoot, Web3ReactProvider } from '@web3-react/core'\nimport store from 'stores'\n\nimport { getLibrary } from 'utils/web3_tools'\nimport { NetworkContextName } from 'loopring-sdk'\n\nimport { getTheme, i18n, provider, ProviderComposer } from \"@loopring-web/component-lib/static-resource\"\nimport { ThemeProvider as MuThemeProvider } from '@material-ui/core'\nimport LocalizationProvider from '@material-ui/pickers/LocalizationProvider'\n\nimport MomentUtils from '@material-ui/lab/AdapterMoment'\n\nimport { ThemeProvider } from \"@emotion/react\"\n\nimport { I18nextProvider } from \"react-i18next\"\n\n\n\nconst Web3ProviderNetwork = createWeb3ReactRoot(NetworkContextName)\nconst providers = [\n    provider(LocalizationProvider as any, {dateAdapter: MomentUtils}),\n    provider(I18nextProvider as any, {i18n:i18n}),\n    provider(MuThemeProvider as any, {theme: getTheme('dark')}),\n    provider(ThemeProvider as any, {theme: getTheme('dark')}),\n    provider(Provider as any, {store}),\n]\n\nReactDOM.render(\n// @ts-ignore\n    <ProviderComposer providers={providers}>\n        <Web3ReactProvider getLibrary={getLibrary}>\n            <Web3ProviderNetwork getLibrary={getLibrary}>\n                <App/>\n            </Web3ProviderNetwork>\n        </Web3ReactProvider>\n    </ProviderComposer>,\n    document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\nif (process.env.NODE_ENV !== 'production') {\n    reportWebVitals(console.log)\n}\n","import { createSlice, PayloadAction, Slice } from '@reduxjs/toolkit'\nimport { STATUS } from '../constant';\nimport { StateBase } from '../interface';\n\nconst initialState: StateBase & {socket: { [ key: string]:string[] }} = {\n  socket: {},\n  status: 'UNSET',\n  errorMessage: null,\n}\nconst socketSlice: Slice<StateBase & {socket: { [ key: string]:string[] }}> = createSlice({\n  name: 'socket',\n  initialState,\n  reducers: {\n    socketEnd(state,action:PayloadAction<undefined>){\n      state.status = STATUS.PENDING\n    },\n    sendNewMessage(state, action: PayloadAction<{socket: { [ key: string]:string[] }}>) {\n      state.socket = action.payload.socket\n    },\n    getSocketStatus(state, action: PayloadAction<{socket: { [ key: string]:string[] }}>) {\n\n      // @ts-ignore\n      if (action.error) {\n        state.status = STATUS.ERROR\n        // @ts-ignore\n        state.errorMessage = action.error\n      }\n      // state.socket = action.payload.socket\n      state.status = STATUS.DONE\n    },\n\n    statusUnset: state => {\n      state.status = STATUS.UNSET\n    }\n\n  },\n});\nexport { socketSlice };\nexport const { getSocketStatus, sendNewMessage, socketEnd, statusUnset} = socketSlice.actions;\n","import { createSlice, PayloadAction, Slice } from '@reduxjs/toolkit'\n\nimport { TradingInterval, ChainId, ExchangeInfo, TokenInfo, TickerData, } from 'loopring-sdk'\n\nexport interface TradingInfo {\n  chainId: number\n  interval: TradingInterval\n  ammPoolStats: any\n  ammPoolConf: any\n  ammActivityRules: any\n  markets: any\n  marketTrades: any\n  tickerMap: {[key: string]: TickerData}\n  tokens: {[key: string]: [value: TokenInfo]}\n  exchangeInfo?: ExchangeInfo\n}\n\nconst defaultInterval = process.env.REACT_APP_TEST_INTERVAL ? process.env.REACT_APP_TEST_INTERVAL : TradingInterval.hr1\n\nconst initialState = {\n  chainId: ChainId.GORLI,\n  interval: defaultInterval,\n  ammPoolConf: {},\n  ammActivityRules: {},\n  ammPoolStats: {},\n  markets: [],\n  marketTrades: {},\n  tokens: {},\n  tickerMap: {},\n  refreshRate: 1000,\n  refreshRateSlow: 3000,\n} as TradingInfo\n\nconst tradingSlice:Slice = createSlice({\n  name: 'trading',\n  initialState,\n  reducers: {\n    setChainId(state, action: PayloadAction<number>) {\n      state.chainId = action.payload\n    },\n    changeTradingInterval(state, action: PayloadAction<any>) {\n      state.interval = action.payload\n    },\n    setTickerMap(state, action: PayloadAction<any>) {\n      state.tickerMap = action.payload\n    },\n    setAmmPoolStats(state, action: PayloadAction<any>) {\n      state.ammPoolStats = action.payload\n    },\n    setAmmActivityRules(state, action: PayloadAction<any>) {\n      state.ammActivityRules = action.payload\n    },\n    setAmmPoolConf(state, action: PayloadAction<any>) {\n      state.ammPoolConf = action.payload\n    },\n    setMarketTrades(state, action: PayloadAction<any>) {\n      state.marketTrades = action.payload\n    },\n    setMarkets(state, action: PayloadAction<any>) {\n      state.markets = action.payload\n    },\n    setTokens(state, action: PayloadAction<{}>) {\n      state.tokens = action.payload\n    },\n    setExchangeInfo(state, action: PayloadAction<ExchangeInfo>) {\n      state.exchangeInfo = action.payload\n    },\n  },\n})\n\nexport const {\n  setChainId, \n  setAmmPoolStats,\n  setAmmActivityRules,\n  setMarketTrades, \n  setTickerMap, \n  setAmmPoolConf, \n  changeTradingInterval, \n  setMarkets, \n  setTokens, \n  setExchangeInfo, \n} = tradingSlice.actions\n\nexport default tradingSlice\n","export enum CONSTANTS {\n    Handler = 'handler',\n    AccountId = 'account_id',\n    Account = 'account',\n    Apikey = 'apikey',\n    Eddsakey = 'eddsakey',\n    ActiveTime = 'active_time',\n    AmmOrder = 'amm_order',\n    HardwareAddresses = 'hardware_addresses',\n}\n\nconst SESSION_TIMEOUT_SECONDS = 600\n\nexport class UserStorage {\n\n    public static getHandler() {\n        const rawHandler = sessionStorage.getItem(CONSTANTS.Handler)\n        try {\n            if (rawHandler !== undefined && rawHandler !== null)\n                return parseInt(rawHandler)\n        } catch (err) {\n        }\n        return undefined\n    }\n\n    public static setHandler(handler: any) {\n        sessionStorage.setItem(CONSTANTS.Handler, handler)\n    }\n\n    public static clearHandler() {\n        sessionStorage.removeItem(CONSTANTS.Handler)\n    }\n\n    public static checkTimeout(reset: boolean = false) : boolean {\n        let dateTimeStr = localStorage.getItem(CONSTANTS.ActiveTime)\n        let now = new Date().getTime()\n\n        if (dateTimeStr !== null && !reset) {\n            let tmpDt = new Date(parseInt(dateTimeStr))\n\n            // console.log(`now:${now} dateTimeStr:${dateTimeStr} delta:${now - tmpDt.getTime()}`)\n\n            if(now - tmpDt.getTime() > SESSION_TIMEOUT_SECONDS * 1000) {\n                console.log(`TIMEOUT! now:${now} dateTimeStr:${dateTimeStr} delta:${now - tmpDt.getTime()}`)\n                sessionStorage.clear()\n                localStorage.setItem(CONSTANTS.ActiveTime, now.toString())\n                return true\n            }\n        } else {\n\n            if (reset) {\n                console.log('force reset!!')\n            }\n\n            localStorage.setItem(CONSTANTS.ActiveTime, now.toString())\n        }\n\n        return false\n    }\n\n\n    public static getAccountId() {\n        const rawId = sessionStorage.getItem(CONSTANTS.AccountId)\n        try {\n            if (rawId)\n                return parseInt(rawId)\n        } catch (err) {\n        }\n        return undefined\n    }\n\n    public static setAccountId(accountId: number) {\n        sessionStorage.setItem(CONSTANTS.AccountId, accountId.toString())\n    }\n\n    public static getAccount() {\n        return sessionStorage.getItem(CONSTANTS.Account)\n    }\n\n    public static setAccount(account: string) {\n        sessionStorage.setItem(CONSTANTS.Account, account)\n    }\n\n    public static getApikey() {\n        return sessionStorage.getItem(CONSTANTS.Apikey)\n    }\n\n    public static setApikey(apikey: string) {\n        sessionStorage.setItem(CONSTANTS.Apikey, apikey)\n    }\n\n    public static getEddsakey() {\n        return sessionStorage.getItem(CONSTANTS.Eddsakey)\n    }\n\n    public static setEddsakey(eddsakey: string) {\n        sessionStorage.setItem(CONSTANTS.Eddsakey, eddsakey)\n    }\n\n    public static getAmmOrder(): string {\n        var orderHash = localStorage.getItem(CONSTANTS.AmmOrder)\n        return orderHash ? orderHash : ''\n    }\n\n    public static setAmmOrder(orderHash: string) {\n        localStorage.setItem(CONSTANTS.AmmOrder, orderHash)\n    }\n\n    public static clearAmmOrder() {\n        localStorage.removeItem(CONSTANTS.AmmOrder)\n    }\n\n    public static isHardwareAddress(address: string) {\n        let current = localStorage.getItem(CONSTANTS.HardwareAddresses)\n        if (current) {\n            if (current.includes(address.toLowerCase())) {\n                return true\n            }\n        }\n        return false\n    }\n\n    public static saveHardwareAddress(address: string) {\n        let current = localStorage.getItem(CONSTANTS.HardwareAddresses);\n        if (current) {\n            if (current.includes(address.toLowerCase()) !== true) {\n                let newValue = current + ',' + address.toLowerCase();\n                localStorage.setItem(CONSTANTS.HardwareAddresses, newValue);\n            }\n        } else {\n            localStorage.setItem(CONSTANTS.HardwareAddresses, address.toLowerCase());\n        }\n\n    }\n}\n","import { debug } from \"console\"\n\nexport function deepClone(data: any) {\n    if (!data || !(data instanceof Object) || (typeof data == \"function\")) {\n        return data || undefined\n    }\n    let constructor = data.constructor\n    let result = new constructor()\n    for (let key in data) {\n        if (data.hasOwnProperty(key)) {\n            result[key] = deepClone(data[key])\n        }\n    }\n    return result\n}\n\nexport async function copyToClipBoard(text: string){ //复制到剪切板\n\n    if(document.execCommand){\n        var textarea =document.createElement('textarea')\n        document.body.appendChild(textarea)\n        textarea.value=text\n        textarea.select()\n        document.execCommand(\"copy\")\n        document.body.removeChild(textarea)\n\t}\n\n    if (navigator.clipboard) {\n        await navigator.clipboard.writeText(text)\n    }\n\n\tif((window as any).clipboardData) {\n        (window as any).clipboardData.setData(\"Text\", text)\n\n        console.log('clipboardData:', text)\n        return true\n    }\n\treturn false\n}","import { createSlice, PayloadAction, Slice } from '@reduxjs/toolkit'\nimport {  TickerStates } from './interface';\nimport { STATUS } from '../constant';\nimport { CoinKey } from '@loopring-web/component-lib/src/static-resource';\n\nconst initialState:Required<TickerStates>  = {\n    tickerMap:{},\n    status:'UNSET',\n    errorMessage:null,\n}\nconst tickerMapSlice:Slice = createSlice({\n    name: 'tickerMap',\n    initialState,\n    reducers: {\n        getTicker(state, action:PayloadAction<CoinKey<any>>) {\n            state.status = STATUS.PENDING\n        },\n        getTickers(state, action:PayloadAction<Array<CoinKey<any>>>) {\n            state.status = STATUS.PENDING\n        },\n        getTickerStatus(state, action: PayloadAction<TickerStates>) {\n            // @ts-ignore\n            if (action.error) {\n                state.status =  STATUS.ERROR\n                // @ts-ignore\n                state.errorMessage = action.error\n            }\n            state.tickerMap = {...state.tickerMap,...action.payload.tickerMap};\n            state.status = STATUS.DONE\n        },\n        statusUnset: state => {\n            state.status = STATUS.UNSET\n        }\n\n    },\n});\nexport { tickerMapSlice };\nexport const { getTicker,getTickers, getTickerStatus, statusUnset } = tickerMapSlice.actions;","import { useDispatch, useSelector } from 'react-redux'\nimport { userRewardsMapSlice } from './reducer';\nimport { UserRewardsStates } from './interface';\n\nexport function useUserRewards(): UserRewardsStates & {\n    updateUserRewards:()=>void,\n    statusUnset:()=>void,\n} {\n    const userRewardsMap:UserRewardsStates = useSelector((state: any) => state.userRewardsMap)\n    const dispatch = useDispatch();\n\n    const updateUserRewards = () => {\n        dispatch(userRewardsMapSlice.actions.getUserRewards(undefined))\n    }\n    const statusUnset = ()=>{\n        dispatch(userRewardsMapSlice.actions.statusUnset(undefined))\n    }\n    return {\n        ...userRewardsMap,\n        statusUnset,\n        updateUserRewards,\n    }\n\n}\n","import { createSlice, PayloadAction, Slice } from '@reduxjs/toolkit'\nimport { ENV, System, SystemStatus } from './interface';\nimport { STATUS } from '../constant';\n\nconst initialState: SystemStatus = {\n    env: ENV.PROD,\n    chainId: 'unknown',\n    // network:'NONETWORK',\n    baseURL: '',\n    socketURL: '',\n    faitPrices: undefined,\n    gasPrice: undefined,\n    forex: undefined,\n    __timer__: -1,\n    status: 'UNSET',\n    errorMessage: null,\n\n    exchangeInfo: undefined,\n\n    topics: [],\n}\nconst systemSlice: Slice<SystemStatus> = createSlice({\n    name: 'system',\n    initialState,\n    reducers: {\n\n        updateSystem(state, action: PayloadAction<System<{[key:string]:any}>>) {\n            state.chainId = action.payload.chainId\n            state.status = STATUS.PENDING\n        },\n        updateSocketURL(state, action:PayloadAction<{socketURL:string}>) {\n            state.socketURL =  action.payload.socketURL;\n        },\n        updateRealTimeObj(state, action: PayloadAction<Partial<{ faitPrices: any, gasPrice: number, forex: number }>>) {\n            const {forex, faitPrices, gasPrice} = action.payload;\n            if (forex) {\n                state.forex = forex\n            }\n            if (faitPrices) {\n                state.faitPrices = faitPrices\n            }\n            if (gasPrice) {\n                state.gasPrice = gasPrice\n            }\n\n\n            // state = {\n            //     ...state.system,\n            //     forex: forex?,\n            //     faitPrices: action.payload.faitPrices ? action.payload.faitPrices : state.system.faitPrices,\n            //     gasPrice: action.payload.gasPrice ? action.payload.gasPrice : state.system.gasPrice,\n            // };\n\n        },\n        getSystemStatus(state, action: PayloadAction<Partial<SystemStatus>>) {\n\n            // @ts-ignore\n            if (action.error) {\n                state.status = STATUS.ERROR\n                // @ts-ignore\n                state.errorMessage = action.error\n            }\n            const {env, baseURL, faitPrices, gasPrice, forex, exchangeInfo, __timer__} = action.payload;\n            if (env) {\n                state.env = env\n            }\n            if (baseURL) {\n                state.baseURL = baseURL\n            }\n            if (faitPrices) {\n                state.faitPrices = faitPrices\n            }\n            if (gasPrice) {\n                state.gasPrice = gasPrice\n            }\n            if (forex) {\n                state.forex = forex\n            }\n            \n            if (exchangeInfo) {\n                state.exchangeInfo = exchangeInfo\n            }\n\n            if (__timer__) {\n                state.__timer__ = __timer__\n            }\n            state.status = STATUS.DONE\n        },\n        statusUnset: state => {\n            state.status = STATUS.UNSET\n        }\n\n    },\n});\nexport { systemSlice };\nexport const {updateSystem, setTopics, getSystemStatus, statusUnset, updateRealTimeObj, updateSocketURL} = systemSlice.actions;","import { StateBase } from '../interface';\nimport { ChainId, ExchangeInfo } from 'loopring-sdk';\n\nexport enum ENV {\n    DEV='DEV',\n    UAT='UAT',\n    PROD='PROD',\n}\nexport enum NETWORKEXTEND {\n    NONETWORK = 'unknown'\n}\nexport type NETWORK = NETWORKEXTEND | ChainId\n\n\nexport type System<C extends {[key:string]:any}> = {\n    env:keyof typeof ENV,\n    chainId: 1|5|'unknown'\n    // network: keyof typeof NETWORK,\n    socketURL:string,\n    baseURL: string,\n    faitPrices:{ [k in keyof C]:{price:any,[key:string]:any}} | undefined,\n    gasPrice:number | undefined,\n    forex:number | undefined,\n    exchangeInfo: ExchangeInfo | undefined,\n\n}\n\nexport type SystemStatus = System<{[key:string]:any}> & {\n    // system:System | {}\n    __timer__:NodeJS.Timeout | -1\n    topics: any[]\n}  & StateBase\n\n\n\n","import { createSlice, PayloadAction, Slice } from '@reduxjs/toolkit'\nimport { WalletLayer1Map, WalletLayer1States } from './interface';\nimport { STATUS } from '../constant';\n\n\nconst initialState:WalletLayer1States  = {\n    walletLayer1:undefined,\n    status:'UNSET',\n    errorMessage:null,\n}\nconst walletLayer1Slice:Slice = createSlice({\n    name: 'walletLayer1',\n    initialState,\n    reducers: {\n        updateWalletLayer1(state, action:PayloadAction<string | undefined>) {\n            state.status = STATUS.PENDING\n        },\n        reset(state, action:PayloadAction<string | undefined>) {\n            state.walletLayer1 = undefined;\n            state.status = STATUS.UNSET;\n        },\n        getWalletLayer1Status(state, action: PayloadAction<{ walletLayer1:WalletLayer1Map<object> }>) {\n            // @ts-ignore\n            if (action.error) {\n                state.status =  STATUS.ERROR\n                // @ts-ignore\n                state.errorMessage = action.error\n            }\n            state.walletLayer1 = {...action.payload.walletLayer1};\n            state.status = STATUS.DONE\n        },\n        statusUnset: state => {\n            state.status = STATUS.UNSET\n        }\n    },\n});\nexport { walletLayer1Slice };\nexport const { updateWalletLayer1, getWalletLayer1Status,statusUnset,reset } = walletLayer1Slice.actions\n","import { createSlice, PayloadAction, Slice } from '@reduxjs/toolkit'\nimport { WalletLayer2Map, WalletLayer2States } from './interface';\nimport { STATUS } from '../constant';\n\n\nconst initialState:WalletLayer2States  = {\n    walletLayer2:undefined,\n    status:'UNSET',\n    errorMessage:null,\n}\nconst walletLayer2Slice:Slice = createSlice({\n    name: 'walletLayer2S',\n    initialState,\n    reducers: {\n        updateWalletLayer2(state, action:PayloadAction<string | undefined>) {\n            state.status = STATUS.PENDING\n        },\n        reset(state, action:PayloadAction<string | undefined>) {\n            state.walletLayer2 = undefined;\n            state.status = STATUS.UNSET;\n        },\n        getWalletLayer2Status(state, action: PayloadAction<{ walletLayer2:WalletLayer2Map<object> }>) {\n            // @ts-ignore\n            if (action.error) {\n                state.status =  STATUS.ERROR\n                // @ts-ignore\n                state.errorMessage = action.error\n            }\n            state.walletLayer2 = {...action.payload.walletLayer2};\n            state.status = STATUS.DONE\n        },\n        statusUnset: state => {\n            state.status = STATUS.UNSET\n        }\n    },\n});\nexport { walletLayer2Slice };\nexport const {  updateWalletLayer2,getWalletLayer2Status,statusUnset,reset } = walletLayer2Slice.actions\n","import { createSlice, PayloadAction, Slice } from '@reduxjs/toolkit'\nimport {  UserRewardsStates } from './interface';\nimport { STATUS } from '../constant';\n\nconst initialState:UserRewardsStates = {\n    userRewardsMap:undefined,\n    status:'UNSET',\n    errorMessage:null,\n    __timer__:-1,\n}\nconst userRewardsMapSlice:Slice<UserRewardsStates> = createSlice({\n    name: 'userRewardsMap',\n    initialState,\n    reducers: {\n        getUserRewards(state, action:PayloadAction<undefined>) {\n            state.status = STATUS.PENDING\n        },\n        getUserRewardsStatus(state, action: PayloadAction<UserRewardsStates>) {\n            // @ts-ignore\n            if (action.error) {\n                state.status =  STATUS.ERROR\n                // @ts-ignore\n                state.errorMessage = action.error\n            }\n            state.userRewardsMap = {...state.userRewardsMap,...action.payload.userRewardsMap};\n            if(action.payload.__timer__){\n                state.__timer__  =  action.payload.__timer__\n            }\n            state.status = STATUS.DONE\n        },\n        statusUnset: state => {\n            state.status = STATUS.UNSET\n        }\n\n    },\n});\nexport { userRewardsMapSlice };\nexport const { getUserRewards, getUserRewardsStatus, statusUnset } = userRewardsMapSlice.actions;","import { createSlice, PayloadAction, Slice } from '@reduxjs/toolkit'\nimport { AmmActivityMapStates } from './interface';\nimport { STATUS } from '../../constant';\n\n\nconst initialState:Required<AmmActivityMapStates>  = {\n    ammActivityMap:{},\n    status:'UNSET',\n    errorMessage:null,\n}\nconst ammActivityMapSlice:Slice = createSlice({\n    name: 'ammActivityMap',\n    initialState,\n    reducers: {\n        getAmmActivityMap(state, action:PayloadAction<string | undefined>) {\n            state.status = STATUS.PENDING\n        },\n        getAmmActivityMapStatus(state, action: PayloadAction<AmmActivityMapStates>) {\n            // @ts-ignore\n            if (action.error) {\n                state.status =  STATUS.ERROR\n                // @ts-ignore\n                state.errorMessage = action.error\n            }\n            state.ammActivityMap = {...action.payload.ammActivityMap};\n            state.status = STATUS.DONE\n        },\n        statusUnset: state => {\n            state.status = STATUS.UNSET\n        }\n\n    },\n});\nexport { ammActivityMapSlice };\nexport const { getAmmActivityMap, getAmmActivityMapStatus, statusUnset } = ammActivityMapSlice.actions\n","import { createSlice, PayloadAction, Slice } from '@reduxjs/toolkit'\nimport { GetTokenMapParams, TokenMapStates } from './interface';\nimport { STATUS } from '../constant';\n\nconst initialState: TokenMapStates<object> = {\n    coinMap: {},\n    addressIndex: undefined,\n    tokenMap: undefined,\n    marketMap: undefined,\n    idIndex: undefined,\n    status: 'UNSET',\n    errorMessage: null,\n}\nconst tokenMapSlice: Slice<TokenMapStates<object>> = createSlice({\n    name: 'tokenMap',\n    initialState,\n    reducers: {\n        getTokenMap(state, action: PayloadAction<GetTokenMapParams<any>>) {\n            state.status = STATUS.PENDING\n        },\n        getTokenMapStatus(state, action: PayloadAction<TokenMapStates<object>>) {\n            // @ts-ignore      console.log(action.type)\n            if (action.error) {\n                state.status = STATUS.ERROR\n                // @ts-ignore\n                state.errorMessage = action.error\n            }\n\n            const {tokenMap, marketMap, addressIndex, idIndex, coinMap, marketArray, marketCoins} = action.payload;\n            if (tokenMap) { state.tokenMap = tokenMap }\n            if (marketMap) { state.marketMap = marketMap }\n            if (addressIndex) { state.addressIndex = addressIndex }\n            if (idIndex) { state.idIndex = idIndex }\n            if (coinMap) { state.coinMap = coinMap }\n            if (marketArray) { state.marketArray = marketArray }\n            if (marketCoins)  { state.marketCoins = marketCoins }\n            // if (tokenPairsMap) {state.tokenPairsMap = tokenPairsMap }\n            state.status = STATUS.DONE;\n        },\n        // getTokenPairMap(state, action: PayloadAction<{tokenPairs: TokenPairs }>) {\n        //     const {tokenPairs} = action.payload;\n        //     const tokenPairsMap =  Reflect.ownKeys(tokenPairs).reduce((prev,key)=>{\n        //         // @ts-ignore\n        //         return prev[key as string] =  tokenPairs[key as string].tokenList\n        //     }, {} )\n        //     if (tokenPairsMap) {state.tokenPairsMap = tokenPairsMap }\n        //     // state.status = STATUS.PENDING\n        // },\n        statusUnset: state => {\n            state.status = STATUS.UNSET\n        }\n\n    },\n});\nexport { tokenMapSlice };\nexport const {getTokenMap, getTokenMapStatus,getTokenPairMap, statusUnset} = tokenMapSlice.actions;","import { useDispatch, useSelector } from 'react-redux'\nimport { systemSlice } from './reducer';\nimport { System, SystemStatus } from './interface';\n\nexport function useSystem(): SystemStatus & {\n    updateSystem:(system:Partial<System< {[key:string]:any}>>)=>void,\n    statusUnset:()=>void,\n} {\n    const system:SystemStatus = useSelector((state: any) => state.system)\n    const dispatch = useDispatch();\n    const updateSystem = (system:Partial<System<{[key:string]:any}>>) => {\n        dispatch(systemSlice.actions.updateSystem(system))\n    }\n    const statusUnset = ()=>{\n        dispatch(systemSlice.actions.statusUnset(undefined))\n    }\n    return {\n        ...system,\n        statusUnset,\n        updateSystem,\n    }\n\n}\n","import { utils } from 'ethers'\n\nimport * as fm from 'loopring-sdk'\n\nimport BigNumber from 'bignumber.js'\n\nimport { CoinInfo, CoinMap, } from '@loopring-web/component-lib/static-resource'\nimport { DepthData, getBaseQuote, LoopringMap, MarketInfo, MarketStatus, TokenInfo, } from 'loopring-sdk'\nimport { BIG0, BIG1, BIG10, BIG10K, MULTI_FACTOR, } from '../defs/swap_defs'\n\nexport function getIcon(symbol: string, tokens: any) {\n    const token: any = tokens[symbol]\n    return getIconByTokenInfo(token)\n}\n\nexport function getIconByTokenInfo(token: TokenInfo) {\n    if (token) {\n        const addr = utils.getAddress(token.address)\n        const path = `https://exchange.loopring.io/assets/images/ethereum/assets/${addr}/logo.png`\n        return path\n    }\n    return ''\n}\n\nexport function makeCoinInfo(token: TokenInfo) {\n    if (token) {\n        const info: CoinInfo<any> = {\n            icon: getIconByTokenInfo(token),\n            name: token.symbol,\n            simpleName: token.symbol,\n            description: token.name,\n            company: token.name,\n        }\n        return info\n    }\n    return undefined\n}\n\nexport const getLeft = (pairs: any, tokens: any) => {\n    if (pairs) {\n\n        const left = Reflect.ownKeys(pairs)\n\n        let coinMapLeft: CoinMap<any, CoinInfo<any>> = {}\n\n        left.forEach((key: any) => {\n            coinMapLeft[key] = {\n                icon: getIcon(key, tokens),\n                name: key,\n                simpleName: key,\n                description: '',\n                company: ''\n            }\n        })\n\n        return {\n            left,\n            coinMapLeft,\n        }\n    }\n\n    return undefined\n}\n\nexport const getRight = (pairs: any, left: any, tokens: any) => {\n    if (pairs) {\n        const right = pairs[left].tokenList\n\n        let coinMapRight: CoinMap<any, CoinInfo<any>> = {}\n\n        if (right) {\n            right.forEach((key: any) => {\n                coinMapRight[key] = {\n                    icon: getIcon(key, tokens),\n                    name: key,\n                    simpleName: key,\n                    description: '',\n                    company: ''\n                }\n            })\n\n            return {\n                right,\n                coinMapRight,\n            }\n        }\n    }\n    return undefined\n}\n\nexport const getToken = (tokens: any, token: any) => {\n    if (!tokens) {\n        throw Error('no tokens list!')\n    }\n    return tokens[token]\n}\n\nexport const getTokenInfoByToken = (ammBalance: any, tokens: any, token: any) => {\n\n    const tokenInfo = getToken(tokens, token)\n\n    const tokenVol = ammBalance.pooledMap[tokenInfo.tokenId].volume\n    const reserve = fm.toBig(tokenVol)\n\n    return {\n        tokenInfo, tokenVol, reserve,\n    }\n}\n\nconst getKey = (base: any, quote: any) => {\n\n    if (!base || !quote) {\n        return {\n            key: undefined,\n            key_bak: undefined,\n            isOK: false,\n        }\n    }\n\n    const isLRCETH = false\n    const key = isLRCETH ? 'LRCETH-Pool' : ('AMM-' + base + '-' + quote)\n    const key_bak = isLRCETH ? 'LRCETH-Pool' : ('AMM-' + quote + '-' + base)\n    return {\n        key,\n        key_bak,\n        isOK: true,\n    }\n}\n\nconst getInfoByKey = (raw_data: any, keyPair: any) => {\n    const {\n        key,\n        key_bak,\n    } = keyPair\n\n    if (raw_data[key]) return raw_data[key]\n    return raw_data[key_bak]\n}\n\nexport const getBalances = (ammpools: any, ammPoolsBalances: any, base: any, quote: any, tokens: any) => {\n\n    const { ammInfo,\n        ammBalance,\n    } = getAmmInfo(ammpools, ammPoolsBalances, base, quote)\n\n    const baseToken = getToken(tokens, base)\n    const quoteToken = getToken(tokens, quote)\n\n    const baseBalance = ammBalance.pooledMap[baseToken.tokenId]\n    const quoteBalance = ammBalance.pooledMap[quoteToken.tokenId]\n\n    return {\n        ammInfo,\n        ammBalance,\n        baseBalance,\n        quoteBalance,\n    }\n\n}\n\nexport const getAmmInfoOnly = (ammpools: any, base: any, quote: any) => {\n\n    const keyPair = getKey(base, quote)\n\n    const ammInfo = getInfoByKey(ammpools, keyPair)\n\n    if (!ammInfo) {\n        throw Error('no ammInfo!')\n    }\n\n    return {\n        ammInfo,\n    }\n\n}\n\nexport const getAmmInfo = (ammpools: any, ammPoolsBalances: any, base: any, quote: any) => {\n\n    const keyPair = getKey(base, quote)\n\n    const ammInfo = getInfoByKey(ammpools, keyPair)\n    const ammBalance = getInfoByKey(ammPoolsBalances, keyPair)\n\n    if (!ammInfo || !ammBalance) {\n        throw Error('no ammInfo! no ammBalance!')\n    }\n\n    const feeBips = parseInt(ammInfo.feeBips)\n\n    return {\n        ammInfo,\n        ammBalance,\n        feeBips,\n    }\n\n}\n\nconst getAmt = (rawAmt: any, tokenInfo: any) => {\n    if (rawAmt === undefined) {\n        rawAmt = 0\n    }\n\n    return fm.toBig(rawAmt).times('1e' + tokenInfo.decimals)\n}\n\nexport const applySlippageTolerance = (\n    tokens: any,\n    token: any,\n    value: any,\n    slippageTolerance: number = 0.01\n) => {\n    const tokenInfo = getToken(tokens, token)\n    const f = 1e7\n    const feeFactor = fm.toBig(f * (1 - slippageTolerance))\n    const amount = fm.toBig(value).times('1e' + tokenInfo.decimals)\n    const outInWei = amount.times(feeFactor).dividedBy(f)\n    const out = fromWEI(tokens, token, outInWei)\n\n    return {\n        outInWei,\n        out,\n    }\n}\n\nexport const applyOrderFee = (tokens: any, token: any, value: any, feeBip: any) => {\n    const tokenInfo = getToken(tokens, token)\n    const feeFactor = fm.toBig(MULTI_FACTOR - feeBip)\n    const amount = fm.toBig(value).times('1e' + tokenInfo.decimals)\n    const appliedAmount = amount.times(feeFactor).dividedBy(MULTI_FACTOR)\n    return appliedAmount\n}\n\nexport function fromWEI(tokens: any, symbol: any, valueInWEI: any, precision?: any, ceil?: any) {\n    try {\n        const tokenInfo = getToken(tokens, symbol)\n        const precisionToFixed = precision ? precision : tokenInfo.precision\n        const value = fm.toBig(valueInWEI).div('1e' + tokenInfo.decimals)\n        return fm.toFixed(value, precisionToFixed, ceil)\n    } catch (error) {\n    }\n    return '0'\n}\n\n\nexport function toWEI(tokens: any, symbol: any, value: any, rm: any = 3) {\n    const tokenInfo = getToken(tokens, symbol)\n    if (typeof tokenInfo === 'undefined') {\n        return '0'\n    }\n\n    return fm.toBig(value)\n        .times('1e' + tokenInfo.decimals)\n        .toFixed(0, rm)\n}\n\nexport const getAmountOut = (amt: any, ammpools: any, ammPoolsBalances: any, tokens: any,\n    base: any, quote: any, takerRate: number, currentPrice: number) => {\n\n    if (amt === undefined) {\n        amt = 0\n    }\n\n    const { ammBalance, feeBips, } = getAmmInfo(ammpools, ammPoolsBalances, base, quote)\n\n    const { tokenInfo: baseTokenInfo, reserve: reserveIn } = getTokenInfoByToken(ammBalance, tokens, base)\n    const { tokenInfo: quoteTokenInfo, reserve: reserveOut } = getTokenInfoByToken(ammBalance, tokens, quote)\n\n    const amountIn = getAmt(amt, baseTokenInfo)\n    const feeBipsFactor = fm.toBig(MULTI_FACTOR - feeBips)\n    const amountInWithFee = amountIn.times(feeBipsFactor)\n    const numerator = amountInWithFee.times(reserveOut)\n    const denominator = reserveIn.times(MULTI_FACTOR).plus(amountInWithFee)\n    const amountOutInWei: any = numerator.dividedBy(denominator)\n\n    let quoteAmt: any = fromWEI(tokens, quote, amountOutInWei)\n\n    const _amount1ApplyOrderFeeInWei = applyOrderFee(tokens, quote, quoteAmt, takerRate + feeBips)\n\n    let _amount1ApplyOrderFee = Number(fromWEI(tokens, quote, _amount1ApplyOrderFeeInWei))\n\n    let priceImpact = 0\n    if (_amount1ApplyOrderFee < 0) {\n        _amount1ApplyOrderFee = 0\n        quoteAmt = null\n    } else {\n        const newPrice = Number(quoteAmt) / Number(amt)\n        priceImpact = (newPrice - currentPrice) / currentPrice\n    }\n\n    return {\n        quoteAmt,\n        _amount1ApplyOrderFeeInWei,\n        _amount1ApplyOrderFee,\n        priceImpact,\n    }\n\n}\n\nexport const getAmountOut_Reverse = (amt: any, ammpools: any, ammPoolsBalances: any, tokens: any,\n    base: any, quote: any, takerRate: number, currentPrice: number) => {\n\n    if (amt === undefined) {\n        amt = 0\n    }\n    \n    const { ammBalance, feeBips, } = getAmmInfo(ammpools, ammPoolsBalances, base, quote)\n\n    const { tokenInfo: baseTokenInfo, reserve: reserveIn } = getTokenInfoByToken(ammBalance, tokens, base)\n    const { tokenInfo: quoteTokenInfo, reserve: reserveOut } = getTokenInfoByToken(ammBalance, tokens, quote)\n\n    const amountOut = getAmt(amt, quoteTokenInfo)\n\n    if (amountOut.gt(reserveOut)) {\n        return {\n            baseAmt: 0,\n            _amount1ApplyOrderFeeInWei: 0,\n            _amount1ApplyOrderFee: 0,\n            priceImpact: 0,\n            hasError: false,\n        }\n    }\n\n    const numerator = amountOut.times(reserveIn).times(MULTI_FACTOR)\n    const feeBipsFactor = fm.toBig(MULTI_FACTOR - feeBips)\n\n    // If amountOut is larger than reserveOut?\n    // It's handled before getAmountOut_reserve\n    const reserveOutSubAmountOut = reserveOut.minus(amountOut)\n\n    const denominator = feeBipsFactor.times(reserveOutSubAmountOut)\n    const amountInInWei = numerator.dividedBy(denominator)\n\n    let baseAmt: any = fromWEI(tokens, quote, amountInInWei)\n\n    const _amount1ApplyOrderFeeInWei = applyOrderFee(tokens, quote, amt, takerRate + feeBips)\n\n    let _amount1ApplyOrderFee = Number(fromWEI(tokens, quote, _amount1ApplyOrderFeeInWei))\n\n    let priceImpact = 0\n    if (_amount1ApplyOrderFee < 0) {\n        _amount1ApplyOrderFee = 0\n        baseAmt = null\n    } else {\n        const newPrice = Number(amt) / Number(baseAmt)\n        priceImpact = (newPrice - currentPrice) / currentPrice\n    }\n\n    return {\n        baseAmt,\n        _amount1ApplyOrderFeeInWei,\n        _amount1ApplyOrderFee,\n        priceImpact,\n        hasError: false,\n    }\n\n}\n\nexport function isEmpty(input: any) {\n    if (!input || input.trim() === '') {\n        return true\n    }\n\n    return false\n}\n\nfunction getAmountOutWithFeeBips(amountIn: string, feeBips: string, reserveIn: string, reserveOut: string ) {\n    const amountInBig = fm.toBig(amountIn)\n    const reserveInBig = fm.toBig(reserveIn)\n    const reserveOutBig = fm.toBig(reserveOut)\n    \n    if (amountInBig.lt(BIG0) || reserveInBig.lt(BIG0) || reserveOutBig.lt(BIG0)) {\n        return BIG0\n    }\n    const feeBipsBig = fm.toBig(feeBips)\n\n    const amountInWithFee = amountInBig.times(BIG10K.minus(feeBipsBig))\n    const numerator = amountInWithFee.times(reserveOutBig)\n    const denominator = reserveInBig.times(BIG10K).plus(amountInWithFee)\n\n    return numerator.div(denominator)\n}\n\nfunction getAmountInWithFeeBips(amountOut: string, feeBips: string, reserveIn: string, reserveOut: string ) {\n    const amountOutBig = fm.toBig(amountOut)\n    const reserveInBig = fm.toBig(reserveIn)\n    const reserveOutBig = fm.toBig(reserveOut)\n    \n    if (amountOutBig.lt(BIG0) || reserveInBig.lt(BIG0) || reserveOutBig.lt(BIG0)) {\n        return BIG0\n    }\n    const feeBipsBig = fm.toBig(feeBips)\n\n    const numerator = reserveInBig.times(amountOutBig).times(BIG10K)\n    const denominator = reserveOutBig.times(amountOutBig).times(BIG10K.minus(feeBipsBig))\n\n    return numerator.div(denominator).plus(BIG1)\n}\n\nfunction getOutputOrderbook(input: string, feeBips: string, isAtoB: boolean) {\n    let output: string  = \"0\"\n    let remain: string  = input\n}\n\nexport function getOutputAmount(base: string, quote: string, market: string, \n    input: string, isAtoB: boolean, feeBips: string, \n    tokenMap: LoopringMap<TokenInfo>, marketMap: LoopringMap<MarketInfo>, depth: DepthData) {\n\n    if (isEmpty(input) || isEmpty(feeBips) || !(market in Object.keys(marketMap))) {\n        return undefined\n    }\n\n    const { base: baseRaw, quote: quoteRaw } = getBaseQuote(market)\n\n    const marketInfo: MarketInfo = marketMap[market]\n\n    const isSwapEnabled = marketInfo.status === MarketStatus.ALL || marketInfo.status === MarketStatus.AMM\n\n    input = input.trim()\n\n    let exceedDepth = false\n\n    const reserveIn = ''\n    const reserveOut = ''\n\n    if (isAtoB) {\n\n        // bids_amtTotal -> bidsSizeShown\n        // asks_volTotal -> asksQuoteSizeShown\n        const amountInWei = toWEI(tokenMap, base, input)\n\n        if (isEmpty(depth.bids_amtTotal) || isEmpty(depth.asks_volTotal)) {\n            exceedDepth = true\n        } else {\n\n            if (base === baseRaw) {\n                exceedDepth = fm.toBig(amountInWei).lt(fm.toBig(depth.bids_amtTotal))\n            } else {\n                exceedDepth = fm.toBig(amountInWei).lt(fm.toBig(depth.asks_volTotal))\n            }\n\n        }\n\n        let amountB = new BigNumber(0)\n\n        if (exceedDepth) {\n            if (isSwapEnabled) {\n                amountB = getAmountOutWithFeeBips(amountInWei, feeBips, reserveIn, reserveOut)\n            }\n        } else {\n            amountB = fm.toBig(toWEI(tokenMap, base, getOutputOrderbook(input, feeBips, isAtoB)))\n        }\n\n        return fromWEI(tokenMap, quote, amountB)\n\n    } else {\n\n        // asks_amtTotal -> asksSizeShown\n        // bids_volTotal -> bidsQuoteSizeShown\n\n        if (isEmpty(depth.bids_volTotal) || isEmpty(depth.asks_amtTotal)) {\n            exceedDepth = true\n        } else {\n            const amountInWei = toWEI(tokenMap, quote, input)\n\n            if (base === baseRaw) {\n                exceedDepth = fm.toBig(amountInWei).gt(fm.toBig(depth.bids_volTotal))\n            } else {\n                exceedDepth = fm.toBig(amountInWei).gt(fm.toBig(depth.asks_amtTotal))\n            }\n\n        }\n\n        let amountSBint = BIG0\n\n        const amountB: string = toWEI(tokenMap, quote, input)\n\n        if (exceedDepth) {\n            if (isSwapEnabled) {\n                amountSBint = getAmountInWithFeeBips(amountB, feeBips, reserveIn, reserveOut)\n            }\n        } else {\n            amountSBint = fm.toBig(toWEI(tokenMap, base, getOutputOrderbook(input, feeBips, isAtoB)))\n        }\n\n        if (amountSBint.gt(BIG0)) {\n            return fromWEI(tokenMap, base, amountSBint)\n        }\n\n        return '0'\n\n    }\n\n}\n","import { useDispatch, useSelector } from 'react-redux'\nimport { tickerMapSlice } from './reducer';\nimport { TickerStates } from './interface';\nimport { CoinKey } from '@loopring-web/component-lib/src/static-resource';\n\nexport function useTicker(): TickerStates & {\n    updateTickers:(tickerKeys:Array<CoinKey<any>>)=>void,\n    updateTicker:(tickerKey:CoinKey<any>)=>void,\n    statusUnset:()=>void,\n} {\n    const tickerMap:TickerStates = useSelector((state: any) => state.tickerMap)\n    const dispatch = useDispatch();\n    const updateTicker = (tickerKey:CoinKey<any>) => {\n        dispatch(tickerMapSlice.actions.getTicker({tickerKey}))\n    }\n    const updateTickers = (tickerKeys:Array<CoinKey<any>>) => {\n        dispatch(tickerMapSlice.actions.getTickers({tickerKeys}))\n    }\n    const statusUnset = ()=>{\n        dispatch(tickerMapSlice.actions.statusUnset(undefined))\n    }\n    return {\n        ...tickerMap,\n        statusUnset,\n        updateTickers,\n        updateTicker,\n    }\n\n}\n","import { useDispatch, useSelector } from 'react-redux'\nimport { AmmActivityMapStates } from './interface';\nimport { ammActivityMapSlice } from './reducer';\n\nexport function useAmmActivityMap(): AmmActivityMapStates & {\n    updateAmmActivityMap:()=> void,\n    statusUnset:()=> void,\n} {\n    const ammActivityMap:AmmActivityMapStates = useSelector((state: any) => state.amm.ammActivityMap)\n    const dispatch = useDispatch();\n    const updateAmmActivityMap = () => {\n        dispatch(ammActivityMapSlice.actions.getAmmActivityMap(undefined))\n    }\n    const statusUnset = ()=>{\n        dispatch(ammActivityMapSlice.actions.statusUnset(undefined))\n    }\n    return {\n        ...ammActivityMap,\n        statusUnset,\n        updateAmmActivityMap\n    }\n\n}\n","export enum AccountStatus {\n    UNKNOWN = 'UNKNOWN',\n    UNCONNNECTED = 'UNCONNNECTED',\n    CONNECTED = 'CONNECTED',\n    NOACCOUNT = 'NOACCOUNT',\n    DEPOSITING = 'DEPOSITING',\n    DEPOSIT_TO_CONFIREM = 'DEPOSIT_TO_CONFIREM',\n    UNACTIVATED = 'UNACTIVATED',\n    ARPROVING = 'ARPROVING',\n    APPROV_TO_CONFIRM = 'APPROV_TO_CONFIRM',\n    LOCKED = 'LOCKED',\n    ACTIVATED = 'ACTIVATED',\n}\n\nexport enum StatusChangeEvent {\n    Reset = 'Reset',\n    Connecting = 'Connecting',\n    HasPubkey = 'HasPubkey',\n    HasNoPubkey = 'HasNoPubkey',\n    ErrorResponse = 'ErrorResponse',\n    FinishDeposit = 'FinishDeposit',\n    DepositConfirmed = 'DepositConfirmed',\n    IsSmartWallet = 'IsSmartWallet',\n    ApproveSubmit = 'ApproveSubmit',\n    ApproveConfirmed = 'ApproveConfirmed',\n    Unlock = 'Unlock',\n    Lock = 'Lock',\n}\n\nexport const AccountMachineSpec = (initialState: AccountStatus = AccountStatus.UNCONNNECTED) => \n{\n    return {\n        initialState: initialState,\n        states: {\n            UNCONNNECTED: {\n                Connecting: AccountStatus.CONNECTED,\n                Reset: AccountStatus.UNCONNNECTED,\n            },\n            CONNECTED: {\n                HasPubkey: AccountStatus.LOCKED,\n                HasNoPubkey: AccountStatus.UNACTIVATED,\n                ErrorResponse: AccountStatus.NOACCOUNT,\n                Reset: AccountStatus.UNCONNNECTED,\n            },\n            NOACCOUNT: {\n                ErrorResponse: AccountStatus.NOACCOUNT,\n                Reset: AccountStatus.UNCONNNECTED,\n            },\n            DEPOSITING: {\n                FinishDeposit: AccountStatus.DEPOSIT_TO_CONFIREM,\n                Reset: AccountStatus.UNCONNNECTED,\n            },\n            DEPOSIT_TO_CONFIREM: {\n                HasPubkey: AccountStatus.ACTIVATED,\n                HasNoPubkey: AccountStatus.DEPOSIT_TO_CONFIREM,\n                ErrorResponse: AccountStatus.DEPOSIT_TO_CONFIREM,\n                Reset: AccountStatus.UNCONNNECTED,\n            },\n            UNACTIVATED: {\n                IsSmartWallet: AccountStatus.ARPROVING,\n                Reset: AccountStatus.UNCONNNECTED,\n            },\n            ARPROVING: {\n                ApproveSubmit: AccountStatus.APPROV_TO_CONFIRM,\n                Reset: AccountStatus.UNCONNNECTED,\n            },\n            APPROV_TO_CONFIRM: {\n                ApproveConfirmed: AccountStatus.ACTIVATED,\n                Reset: AccountStatus.UNCONNNECTED,\n            },\n            LOCKED: {\n                Unlock: AccountStatus.ACTIVATED,\n                Reset: AccountStatus.UNCONNNECTED,\n            },\n            ACTIVATED: {\n                Lock: AccountStatus.LOCKED,\n                Reset: AccountStatus.UNCONNNECTED,\n            },\n        },\n    }\n}\n","import { Contract } from '@ethersproject/contracts'\nimport { getAddress } from '@ethersproject/address'\nimport { AddressZero } from '@ethersproject/constants'\nimport { BigNumber } from '@ethersproject/bignumber'\n\nimport { JsonRpcSigner, Web3Provider } from '@ethersproject/providers'\n\nimport { UnsupportedChainIdError } from '@web3-react/core'\n\nimport {\n  NoEthereumProviderError,\n  UserRejectedRequestError as UserRejectedRequestErrorInjected\n} from '@web3-react/injected-connector'\nimport { UserRejectedRequestError as UserRejectedRequestErrorWalletConnect } from '@web3-react/walletconnect-connector'\n\nimport { ChainId } from 'loopring-sdk'\n\nexport function getLibrary(provider: any): Web3Provider {\n  const library = new Web3Provider(provider)\n  library.pollingInterval = 10000\n  return library\n}\n\nexport function getErrorMessage(error: Error) {\n  if (error instanceof NoEthereumProviderError) {\n    return 'No Ethereum browser extension detected, install MetaMask on desktop or visit from a dApp browser on mobile.'\n  } else if (error instanceof UnsupportedChainIdError) {\n    return 'You\\'re connected to an unsupported network.'\n  } else if (\n    error instanceof UserRejectedRequestErrorInjected ||\n    error instanceof UserRejectedRequestErrorWalletConnect\n  ) {\n    return 'Please authorize this website to access your Ethereum account.'\n  } else {\n    console.error(error)\n    return 'An unknown error occurred. Check the console for more details.'\n  }\n}\n\nexport function transactionChecker(web3: any, address: string) {\n  const account = address.toLowerCase()\n\n  const subscription = web3.eth.subscribe('pendingTransactions', (err: any, res: any) => {\n    if (err) {\n      console.error(err)\n    }\n  })\n\n  return function watchTransactions() {\n    console.log('Watch Transactions...')\n    subscription.on('data', (txHash: any) => {\n      setTimeout(async () => {\n        try {\n          let tx = await web3.eth.getTransaction(txHash)\n          if (tx.to && tx.to.toLowerCase() === account) {\n            const value = web3.utils.fromWei(tx.value, 'ether')\n            if (value > 0) {\n              console.log('watchTransactions value:', value)\n            }\n          }\n        } catch (err) {\n          console.error(err)\n        }\n      }, 60 * 1000)\n    })\n  }\n}\n\n// returns the checksummed address if the address is valid, otherwise returns false\nexport function isAddress(value: any): string | false {\n  try {\n    return getAddress(value)\n  } catch {\n    return false\n  }\n}\n\nconst ETHERSCAN_PREFIXES: { [chainId in ChainId]: string } = {\n  1: '',\n  5: 'goerli.',\n}\n\nexport function getEtherscanLink(\n  chainId: ChainId,\n  data: string,\n  type: 'transaction' | 'token' | 'address' | 'block'\n): string {\n  const prefix = `https://${ETHERSCAN_PREFIXES[chainId] || ETHERSCAN_PREFIXES[1]}etherscan.io`\n\n  switch (type) {\n    case 'transaction': {\n      return `${prefix}/tx/${data}`\n    }\n    case 'token': {\n      return `${prefix}/token/${data}`\n    }\n    case 'block': {\n      return `${prefix}/block/${data}`\n    }\n    case 'address':\n    default: {\n      return `${prefix}/address/${data}`\n    }\n  }\n}\n\n// shorten the checksummed version of the input address to have 0x + 4 characters at start and end\nexport function shortenAddress(address: string, chars = 4): string {\n  const parsed = isAddress(address)\n  if (!parsed) {\n    throw Error(`Invalid 'address' parameter '${address}'.`)\n  }\n  return `${parsed.substring(0, chars + 2)}...${parsed.substring(42 - chars)}`\n}\n\n// add 10%\nexport function calculateGasMargin(value: BigNumber): BigNumber {\n  return value.mul(BigNumber.from(10000).add(BigNumber.from(1000))).div(BigNumber.from(10000))\n}\n\n// account is not optional\nexport function getSigner(library: Web3Provider, account: string): JsonRpcSigner {\n  return library.getSigner(account).connectUnchecked()\n}\n\n// account is optional\nexport function getProviderOrSigner(library: Web3Provider, account?: string): Web3Provider | JsonRpcSigner {\n  return account ? getSigner(library, account) : library\n}\n\n// account is optional\nexport function getContract(address: string, ABI: any, library: Web3Provider, account?: string): Contract {\n  if (!isAddress(address) || address === AddressZero) {\n    throw Error(`Invalid 'address' parameter '${address}'.`)\n  }\n\n  return new Contract(address, ABI, getProviderOrSigner(library, account) as any)\n}\n\nexport function escapeRegExp(string: string): string {\n  return string.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&') // $& means the whole matched string\n}\n\nexport async function isContract(web3: any, address: string) {\n  const code = await web3.eth.getCode(address)\n  return code && code.length > 2\n}\n\nexport function getShortAddr(address: string) {\n    if (!address || address === undefined || address === null || address.trim() === '') {\n        console.log('getShortAddr got empty!')\n        return undefined\n    }\n    const convertAddr = address.substr(0, 6) + '...' + address.substr(address.length - 4)\n    return convertAddr\n}\n","import { debounce } from 'lodash'\nimport React, { useEffect } from 'react'\nimport { UserStorage } from 'storage'\n\nimport { useCheckAccStatus, } from 'stores/account/hook'\n\nimport { \n  useUpdateChainId,\n  useUpdateExchangeInfo, \n  useUpdateExchangeMarkets, \n  useUpdateTokens, \n  useUpdateAmmPoolConf,\n  useUpdateAmmActivityRules,\n  useUpdateAmmPoolStats,\n} from 'stores/trading/hook'\n\nenum WindowEvent {\n  Click = 'click',\n  Scroll = 'scroll',\n  Mouseover = 'mouseover',\n}\n\nconst events = [WindowEvent.Click, WindowEvent.Scroll]\n\nconst forceReset = debounce(() => { UserStorage.checkTimeout(true) }, 100)\n\nexport const GlobalProvider = ({ children }: { children: React.ReactNode }) => {\n\n  useUpdateExchangeInfo()\n  useUpdateExchangeMarkets()\n  useUpdateTokens()\n  useUpdateAmmPoolConf()\n  useUpdateAmmActivityRules()\n  useUpdateAmmPoolStats()\n  useUpdateChainId()\n\n  useCheckAccStatus()\n\n  useEffect(() => {\n\n    events.forEach((event: string) => {\n      document.addEventListener(event, forceReset)\n    })\n\n    return () => {\n\n      events.forEach((event: string) => {\n        document.removeEventListener(event, forceReset)\n      })\n    }\n\n  }, [])\n\n  return (\n    <React.Fragment>\n      { children}\n    </React.Fragment>\n  )\n\n}\n","import React, { useState, useEffect } from 'react'\nimport styled from '@emotion/styled/macro'\nimport { useTranslation } from 'react-i18next'\n\nimport { useWeb3React } from '@web3-react/core'\n\nimport { network } from 'networks/web3_connectors'\n\nimport { useEagerConnect, useInactiveListener } from 'hooks/web3/useWeb3'\nimport { reset, setAccountStatus } from 'stores/account/reducer'\n\nimport { ChainId, NetworkContextName } from 'loopring-sdk'\n\n// import Loader from 'components/modals/Loader'\nimport { useDispatch } from 'react-redux'\nimport { AccountStatus } from 'state_machine/account_machine_spec'\n\nconst MessageWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  height: 20rem;\n`\n\nconst Message = styled.h2`\n  color: ${({ theme }) => theme.colorBase.error};\n`\n\nexport function Web3ReactManager({ children }: { children: JSX.Element }) {\n  const { t } = useTranslation()\n  const { active } = useWeb3React()\n  const { active: networkActive, error: networkError, activate: activateNetwork } = useWeb3React(NetworkContextName)\n\n  // try to eagerly connect to an injected provider, if it exists and has granted access already\n  const triedEager = useEagerConnect()\n\n  // after eagerly trying injected, if the network connect ever isn't active or in an error state, activate itd\n  useEffect(() => {\n    if (triedEager && !networkActive && !networkError && !active) {\n      activateNetwork(network)\n    }\n  }, [triedEager, networkActive, networkError, activateNetwork, active])\n\n  // when there's no account connected, react to logins (broadly speaking) on the injected provider, if it exists\n  \n  const dispatch = useDispatch()\n\n  const onReConnectInjected = () => {\n    console.log('onReConnectInjected')\n    dispatch(reset(undefined))\n    dispatch(setAccountStatus(AccountStatus.UNCONNNECTED))\n  }\n  \n  useInactiveListener(onReConnectInjected, !triedEager)\n\n  // handle delayed loader state\n  const [showLoader, setShowLoader] = useState(false)\n  useEffect(() => {\n    const timeout = setTimeout(() => {\n      setShowLoader(true)\n    }, 600)\n\n    return () => {\n      clearTimeout(timeout)\n    }\n  }, [])\n\n  // on page load, do nothing until we've tried to connect to the injected connector\n  if (!triedEager) {\n    return null\n  }\n\n  // if the account context isn't active, and there's an error on the network context, it's an irrecoverable error\n  if (!active && networkError) {\n    return (\n      <MessageWrapper>\n        <Message>{t('unknownError')}</Message>\n      </MessageWrapper>\n    )\n  }\n\n  // if neither context is active, spin\n  if (!active && !networkActive) {\n    return showLoader ? (\n      <MessageWrapper>\n        {/*<Loader />*/}\n      </MessageWrapper>\n    ) : null\n  }\n\n  return children\n}\n","import React from 'react'\n\nexport const DevWrapper = ({ children }: { children: React.ReactNode }) => {\n\n  return (\n    <React.Fragment>\n      {\n        process.env.NODE_ENV !== 'production' ? (\n          <>\n          {children}\n          </>\n        ) : null\n      }\n    </React.Fragment>\n  )\n\n}\n\n","import { AmmpoolAPI, ChainId, ExchangeAPI, UserAPI, WalletAPI, WsAPI } from \"loopring-sdk\"\nimport { getChainId } from 'stores/trading/hook'\n\nexport const walletAPI = () => {\n    const walletApi = new WalletAPI(getChainId() as ChainId)\n    return walletApi\n}\n\nexport const userAPI = () => {\n    const userApi = new UserAPI(getChainId() as ChainId)\n    return userApi\n}\n\nexport const exchangeAPI = () => {\n    const exchangeApi = new ExchangeAPI(getChainId() as ChainId)\n    return exchangeApi\n}\n\nexport const ammpoolAPI = () => {\n    const ammpoolApi = new AmmpoolAPI(getChainId() as ChainId)\n    return  ammpoolApi\n}\n\nexport const wsAPI = () => {\n    const wsApi = new WsAPI(getChainId() as ChainId)\n    return wsApi\n}\n\nexport class LoopringAPI {\n    \n    public static userAPI: UserAPI | undefined = undefined\n    public static exchangeAPI: ExchangeAPI | undefined = undefined\n    public static ammpoolAPI: AmmpoolAPI | undefined = undefined\n    public static walletAPI: WalletAPI | undefined = undefined\n    public static wsAPI: WsAPI | undefined = undefined\n\n    public static InitApi = (chainId: ChainId) => {\n        LoopringAPI.userAPI = new UserAPI(chainId) \n        LoopringAPI.exchangeAPI = new ExchangeAPI(chainId) \n        LoopringAPI.ammpoolAPI = new AmmpoolAPI(chainId) \n        LoopringAPI.walletAPI = new WalletAPI(chainId) \n        LoopringAPI.wsAPI = new WsAPI(chainId) \n    }\n\n}\n","import { createAction } from '@reduxjs/toolkit'\n\n// fired once when the app reloads but before the app renders\n// allows any updates to be applied to store data loaded from localStorage\nexport const updateVersion = createAction<void>('global/updateVersion')\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit'\n\nconst now = () => new Date().getTime()\n\nexport interface SerializableTransactionReceipt {\n  to: string\n  from: string\n  contractAddress: string\n  transactionIndex: number\n  blockHash: string\n  transactionHash: string\n  blockNumber: number\n  status?: number\n}\n\nexport interface TransactionDetails {\n  hash: string\n  approval?: { tokenAddress: string; spender: string }\n  summary?: string\n  claim?: { recipient: string }\n  receipt?: SerializableTransactionReceipt\n  lastCheckedBlockNumber?: number\n  addedTime: number\n  confirmedTime?: number\n  from: string\n}\n\nexport interface TransactionState {\n  [chainId: number]: {\n    [txHash: string]: TransactionDetails\n  }\n}\n\nexport const initialState: TransactionState = {}\n\nconst transactionsSlice = createSlice({\n  name: 'transactions',\n  initialState,\n  reducers: {\n    reset(state) {\n      Object.assign(state, initialState)\n    },\n    addTransaction(state: TransactionState, action: PayloadAction<{\n      chainId: number, from: string,\n      hash: string, approval: any, summary: string, claim: any\n    }>) {\n      const { chainId, from, hash, approval, summary, claim} = action.payload\n      if (state[chainId]?.[hash]) {\n        throw Error('the existing TX can\\'t be added again')\n      }\n\n      const txs = state[chainId] ?? {}\n      txs[hash] = {\n        hash, \n        approval, \n        summary, \n        claim, \n        from,\n        addedTime: now(), \n      }\n      // state[chainId] = txs\n    },\n    clearAllTransactions(state: TransactionState, action: PayloadAction<number>) {\n      const chainId = action.payload\n      if (!state[chainId]) return\n      state[chainId] = {}\n    },\n    checkedTransaction(state: TransactionState, action: PayloadAction<{chainId: number,\n    hash: string, blockNumber: number}>) {\n      const { chainId, hash, blockNumber} = action.payload\n      const tx = state[chainId]?.[hash]\n      if (!tx) {\n        return\n      }\n      if (!tx.lastCheckedBlockNumber) {\n        tx.lastCheckedBlockNumber = blockNumber\n      } else {\n        tx.lastCheckedBlockNumber = Math.max(blockNumber, tx.lastCheckedBlockNumber)\n      }\n      // state[chainId][hash] = tx\n    },\n    finalizeTransaction(state: TransactionState, action: PayloadAction<{\n      hash: string, chainId: number, receipt: any\n    }>) {\n      const { chainId, hash, receipt } = action.payload\n      \n      const tx = state[chainId]?.[hash]\n      if (!tx) {\n        return\n      }\n      tx.receipt = receipt\n      tx.confirmedTime = now()\n    }\n  }\n}\n)\n\nexport const { reset, addTransaction, clearAllTransactions, checkedTransaction, finalizeTransaction, } = transactionsSlice.actions\nexport default transactionsSlice\n","import { createSlice, PayloadAction, Slice } from '@reduxjs/toolkit'\nimport {  AmmTradesStates } from './interface';\nimport { STATUS } from '../../constant';\n\n\nconst initialState:Required<AmmTradesStates>  = {\n    ammTrades:[],\n    status:'UNSET',\n    errorMessage:null,\n}\nconst ammTradesSlice:Slice = createSlice({\n    name: 'ammTrades',\n    initialState,\n    reducers: {\n        getAmmTrades(state, action:PayloadAction<string | undefined>) {\n            state.status = STATUS.PENDING\n        },\n        getAmmTradesStatus(state, action: PayloadAction<AmmTradesStates>) {\n            // @ts-ignore\n            if (action.error) {\n                state.status =  STATUS.ERROR\n                // @ts-ignore\n                state.errorMessage = action.error\n            }\n            state.ammTrades = {...action.payload.ammTrades};\n            state.status = STATUS.DONE\n        },\n        statusUnset: state => {\n            state.status = STATUS.UNSET\n        }\n    },\n});\nexport { ammTradesSlice };\nexport const { getAmmTrades, getAmmTradesStatus, statusUnset } = ammTradesSlice.actions\n","import { all, takeLatest, call, put } from \"redux-saga/effects\"\nimport { getAmmActivityMap, getAmmActivityMapStatus } from './reducer'\nimport { LoopringAPI } from '../../apis/api';\nconst getAmmActivityMapApi = async () => {\n\n    if(LoopringAPI.ammpoolAPI){\n        const { groupByRuleTypeAndStatus } =  await LoopringAPI.ammpoolAPI.getAmmPoolActivityRules();\n        return  {data:groupByRuleTypeAndStatus}\n    }else{\n        return {data:undefined}\n    }\n\n}\n\nexport function* getPostsSaga() {\n    try {\n        //\n        const { data } = yield call(getAmmActivityMapApi);\n        yield put(getAmmActivityMapStatus({ammActivityMap:data}));\n    } catch (err) {\n        yield put(getAmmActivityMapStatus(err));\n    }\n}\n\nexport default function* ammActivityMapSaga() {\n    yield all([takeLatest(getAmmActivityMap, getPostsSaga)]);\n}\n","import { all, call, fork, put, takeLatest } from \"redux-saga/effects\";\nimport { getAmmMap, getAmmMapStatus, updateRealTimeAmmMap } from './reducer';\nimport { AmmDetail } from '@loopring-web/component-lib/src/static-resource';\nimport store from '../../index';\nimport { AmmPoolInfoV3, AmmPoolStat, toBig, TokenVolumeV3, } from \"loopring-sdk\";\nimport { ammpoolAPI } from \"stores/apis/api\";\nimport { PayloadAction } from '@reduxjs/toolkit';\nimport { AmmDetailStore, GetAmmMapParams } from './interface';\nimport { volumeToCount, volumeToCountAsBigNumber } from '../../../hooks/help/volumeToCount';\n\ntype AmmMap<R extends { [ key: string ]: any }> = { [ key: string ]: AmmDetail<R> } | {}  //key is AMM-XXX-XXX\nexport const setAmmState = ({ammPoolState, keyPair}: { ammPoolState: AmmPoolStat, keyPair: string }) => {\n    const {idIndex} = store.getState().tokenMap\n    // @ts-ignore\n    const [, coinA, coinB] = keyPair.match(/(\\w+)-(\\w+)/i);\n    const {forex,faitPrices} = store.getState().system;\n    if (idIndex && coinA && coinB && faitPrices && forex) {\n        let result =  {\n            amountDollar: parseFloat(ammPoolState.liquidityUSD),\n            amountYuan: (parseFloat(ammPoolState.liquidityUSD) / (forex ? forex : 6.5)),\n            totalLPToken: volumeToCount('LP-' + keyPair, ammPoolState.lpLiquidity),\n            totalA: volumeToCount(coinA, ammPoolState.liquidity[ 0 ]),//parseInt(ammPoolState.liquidity[ 0 ]),\n            totalB: volumeToCount(coinB, ammPoolState.liquidity[ 1 ]),//parseInt(ammPoolState.liquidity[ 1 ]),\n            rewardValue: ammPoolState.rewards[ 0 ] ? volumeToCount(idIndex[ ammPoolState.rewards[ 0 ].tokenId as number ], ammPoolState.rewards[ 0 ].volume) : undefined,\n            rewardToken: ammPoolState.rewards[ 0 ] ? idIndex[ ammPoolState.rewards[ 0 ].tokenId as number ] : undefined,\n            rewardValue2: ammPoolState.rewards[ 1 ] ? volumeToCount(idIndex[ ammPoolState.rewards[ 1 ].tokenId as number ], ammPoolState.rewards[ 1 ].volume) : undefined,\n            rewardToken2: ammPoolState.rewards[ 1 ] ? idIndex[ ammPoolState.rewards[ 1 ].tokenId as number ] : undefined,\n        }\n\n        const feeA =  volumeToCountAsBigNumber(coinA, ammPoolState.fees[ 0 ]);//parseInt(ammPoolState.fees[ 0 ]),\n        const feeB = volumeToCountAsBigNumber(coinB, ammPoolState.fees[ 1 ]);//parseInt(ammPoolState.fees[ 1 ]),\n        const feeDollar =  faitPrices[coinA] && faitPrices[coinB]  ?\n            toBig(feeA||0).times(faitPrices[coinA].price).plus(toBig(feeB||0).times(faitPrices[coinB].price)):undefined\n        const feeYuan = feeDollar ? feeDollar.times(forex) : undefined;\n\n        return {\n             ...result,\n            feeA:feeA?.toNumber(),\n            feeB:feeB?.toNumber(),\n            feeDollar:feeDollar? feeDollar.toNumber(): undefined,\n            feeYuan:feeYuan? feeYuan.toNumber(): undefined,\n            tradeFloat: {\n                change: undefined,\n                timeUnit: '24h',\n                // priceYuan: 100,\n                // priceDollar: 1.23123,\n                // floatTag: FloatTag.increase,\n                // reward: 12312,\n                // APY: (parseInt(ammPoolState.apyBips) * 1.0 / 100)\n            },\n            APY: (parseInt(ammPoolState.apyBips) * 1.0 / 100)\n        }\n\n\n    }\n}\nconst getAmmMapApi = async <R extends { [ key: string ]: any }>({ammpools}: GetAmmMapParams) => {\n\n    let ammMap: AmmMap<R> = {}\n    const {ammPoolStats} = (await ammpoolAPI().getAmmPoolStats());\n\n    let {__timer__} = store.getState().amm.ammMap\n    __timer__ = (() => {\n        if (__timer__ && __timer__ !== -1) {\n            clearInterval(__timer__)\n        }\n        return setInterval(async () => {\n            let ammPoolStats: { [key in keyof R]: AmmPoolStat } = (await ammpoolAPI().getAmmPoolStats()).ammPoolStats as { [key in keyof R]: AmmPoolStat }\n            store.dispatch(updateRealTimeAmmMap({ammPoolStats}))\n        }, 900000)    //15*60*1000 //900000\n    })()\n    const {tokenMap: {coinMap, idIndex}} = store.getState();\n\n    // const forex = faitPrices.prices['USDC']\n\n\n    Reflect.ownKeys(ammpools).forEach(async (key) => {\n        const item: AmmPoolInfoV3 = ammpools[ key as string ]\n        if (item.market === key && item.tokens.pooled && idIndex) {\n\n            // const tokenA =  ; //getTokenInfoById(tokens.tokenIdMap, parseInt(item.tokens.pooled[0]))\n            // const tokenB =  ; // getTokenInfoById(tokens.tokenIdMap, parseInt(item.tokens.pooled[1]))\n            const coinA = idIndex[ item.tokens.pooled[ 0 ] as any ];\n            const coinB = idIndex[ item.tokens.pooled[ 1 ] as any ];\n            const dataItem: AmmDetailStore<R> = {\n                coinA: coinA,\n                coinB: coinB,\n                isNew: Date.now() - (Number(item.createdAt)) > 3 * 86400 * 1000 ? false : true,//3*24*60*60*1000,\n                isActivity: item.status === 7 ? true : false,\n                address: item.address,\n                ...setAmmState({ammPoolState: ammPoolStats[ key ], keyPair: `${coinA}-${coinB}`}),\n                __rawConfig__: item\n            } as AmmDetailStore<R>\n            // @ts-ignore\n            ammMap[ item.market ] = dataItem\n\n\n        }\n\n\n    })\n    return {ammMap, __timer__}\n}\n\n\nexport function* getPostsSaga({payload}: PayloadAction<GetAmmMapParams>) {\n    try {\n        const {ammpools} = payload;\n        const {ammMap, __timer__} = yield call(getAmmMapApi, {ammpools});\n        console.log('--- getPostsSaga:', ammMap)\n        yield put(getAmmMapStatus({ammMap, __timer__}));\n    } catch (err) {\n        yield put(getAmmMapStatus(err));\n    }\n}\n\nexport function* updateRealTimeSaga({payload}: any) {\n    try {\n        const {ammPoolStats} = payload;\n        let {ammMap}: { ammMap: AmmMap<object> } = store.getState().amm.ammMap;\n        if (ammPoolStats) {\n            //{ ammPoolStats?: { [ key: string ]: AmmPoolStat } }\n            Reflect.ownKeys(ammPoolStats).map((key) => {\n                const keyPair = (key as string).replace('AMM-', '')\n                \n                // @ts-ignore\n                ammMap[ key ] = {\n                    // @ts-ignore\n                    ...ammMap[ key ],\n                    ...setAmmState({ammPoolState: ammPoolStats[ key as string ], keyPair, })\n                }\n                return ammMap\n            })\n        }\n        yield put(getAmmMapStatus({ammMap}));\n    } catch (err) {\n        yield put(getAmmMapStatus(err));\n    }\n}\n\n\nexport function* ammMapInitSaga() {\n    yield all([takeLatest(getAmmMap, getPostsSaga)]);\n}\n\nexport function* ammMapRealTimeSaga() {\n    yield all([takeLatest(updateRealTimeAmmMap, updateRealTimeSaga)]);\n}\n\nexport const ammMapSaga = [\n    fork(ammMapInitSaga),\n    fork(ammMapRealTimeSaga),\n]\n\n","import { all, takeLatest, call, put } from \"redux-saga/effects\";\nimport { getAmmTrades, getAmmTradesStatus } from './reducer';\n\nconst getAmmTradesApi = ()=>new Promise((resolve)=>{\n    //TODO: check is connect and active and assign wallet\n    //TODO: if not reject directory, any error happen will clean the\n    resolve([\n    {side: 'Buy',\n        amount: {\n            sell:{ belong:'ETH', tradeValue: 0.1 },\n            buy:{ belong:'LRC', tradeValue: 123 }\n        },\n        time: Date.now(),\n        fee: 0.02,\n        priceValue: 0.123,\n        priceToken: 'LRC'}\n    ,{side: 'Buy',\n        amount: {\n            sell:{ belong:'ETH', tradeValue: 0.1 },\n            buy:{ belong:'LRC', tradeValue: 123 }\n        },\n        time: Date.now(),\n        fee: 0.02,\n        priceValue: 0.123,\n        priceToken: 'LRC'}\n])});\nexport function* getPostsSaga() {\n    try {\n        //\n        const { data } = yield call(getAmmTradesApi);\n        const posts = data;\n        yield put(getAmmTradesStatus(posts));\n    } catch (err) {\n        yield put(getAmmTradesStatus(err));\n    }\n}\n\nexport default function* ammTradesSaga() {\n    yield all([takeLatest(getAmmTrades, getPostsSaga)]);\n}\n","import { combineReducers } from '@reduxjs/toolkit';\n// import { ammRecordSlice } from './AmmConfig';\nimport { ammTradesSlice } from './AmmTrades';\nimport { ammMapSlice } from './AmmMap';\nimport { ammActivityMapSlice } from './AmmActivityMap';\nimport ammActivityMapSaga from './AmmActivityMap/saga';\nimport { ammMapSaga } from './AmmMap/saga';\nimport ammTradesSaga from './AmmTrades/saga';\nimport {  fork } from 'redux-saga/effects';\n\nexport const  ammReducer = combineReducers({\n    // ammRecord: ammRecordSlice.reducer,\n    ammTrades: ammTradesSlice.reducer,\n    ammMap: ammMapSlice.reducer,\n    ammActivityMap:ammActivityMapSlice.reducer\n})\nexport const ammForks =  [\n    fork(ammActivityMapSaga),\n    ...ammMapSaga,\n    // fork(ammRecordSaga),\n    fork(ammTradesSaga)\n]\n\n// export * from './interface'\n","import { all, call, fork, put, takeLatest } from \"redux-saga/effects\";\nimport { getTokenMap, getTokenMapStatus } from './reducer';\nimport { getIcon } from '../../utils/swap_calc_utils';\nimport { CoinInfo, CoinMap } from '@loopring-web/component-lib/static-resource';\nimport { AddressMap, GetTokenMapParams, IdMap } from './interface';\nimport { PayloadAction } from '@reduxjs/toolkit';\n\nconst getTokenMapApi = async <R extends { [ key: string ]: any }>({\n                                                                      tokensMap,\n                                                                      pairs,\n                                                                      marketArr,\n                                                                      tokenArr\n                                                                  }: GetTokenMapParams<R>) => {\n    let coinMap: CoinMap<any, CoinInfo<any>> = {};\n    let tokenMap:any = tokensMap;\n    let addressIndex: AddressMap = {};\n    let idIndex: IdMap = {};\n    Reflect.ownKeys(tokensMap).forEach((key) => {\n        if (!(key as string).startsWith('LP-')) {\n            coinMap[ key as string ] = {\n                icon: getIcon(key as string, tokensMap),\n                name: key as string,\n                simpleName: key,\n                description: '',\n                company: '',\n            }\n        }\n\n        if (pairs[ key as string ] && pairs[ key as string ].tokenList) {\n            // @ts-ignore\n            tokensMap[ key ].tradePairs = pairs[ key as string ].tokenList;\n        }\n        addressIndex = {\n            ...addressIndex,\n            // @ts-ignore\n            [ tokensMap[ key ].address ]: key as string\n        }\n        idIndex = {\n            ...idIndex,\n            // @ts-ignore\n            [ tokensMap[ key ].tokenId ]: key as string\n        }\n    })\n    return {data: {coinMap, addressIndex, idIndex, tokenMap, marketArray: marketArr, marketCoins: tokenArr}}\n};\n\nexport function* getPostsSaga<R extends { [ key: string ]: any }>({payload}: PayloadAction<GetTokenMapParams<R>>) {\n    try {\n        const {tokensMap, marketMap, pairs, marketArr,tokenArr} = payload\n        // @ts-ignore\n        const {data} = yield call(getTokenMapApi, {tokensMap, pairs, marketArr, tokenArr});\n\n        yield put(getTokenMapStatus({...data, marketMap}));\n    } catch (err) {\n        yield put(getTokenMapStatus(err));\n    }\n}\n\n\nexport function* tokenInitSaga() {\n    yield all([takeLatest(getTokenMap, getPostsSaga)]);\n}\n\n\nexport const tokenSaga = [\n    fork(tokenInitSaga),\n    // fork(tokenPairsSaga),\n]\n\n// export function* getPairsSaga({payload}:PayloadAction<{tokenPairs: TokenPairs }>) {\n//     try {\n//         const {tokenPairs} = payload;\n//         const tokenPairsMap =  Reflect.ownKeys(tokenPairs).reduce((prev,key)=>{\n//            // @ts-ignore\n//             return prev[key as string] =  tokenPairs[key as string].tokenList\n//         }, {} )\n//\n//         yield put(getTokenMapStatus({tokenPairsMap}));\n//     } catch (err) {\n//         yield put(getAmmMapStatus(err));\n//     }\n// }\n// export function* tokenPairsSaga() {\n//     yield all([takeLatest(getTokenPairMap, getPairsSaga)]);\n// }\n\n\n","import { all, call, fork, put, takeLatest } from \"redux-saga/effects\"\nimport { getTicker, getTickers, getTickerStatus } from './reducer'\nimport {\n    CoinKey,\n    CustomError,\n    ErrorMap,\n    FloatTag,\n    PairKey,\n    TradeFloat\n} from '@loopring-web/component-lib/src/static-resource'\n\n// import { asyncGetTradingInfo, getTradingInfo } from \"stores/trading/hook\"\nimport { TickerData, getTokenInfoById, toBig } from \"loopring-sdk\"\n\n// import { makeCoinInfo } from 'utils/swap_calc_utils'\nimport { exchangeAPI } from \"stores/apis/api\"\nimport { volumeToCount, volumeToCountAsBigNumber } from '../../hooks/help/volumeToCount';\nimport { Ticker } from './interface';\nimport store from '../index';\n\ntype TickerMap<R extends {[key:string]:any}> = {\n    [key in CoinKey<R>|PairKey<R>]?:TradeFloat & {\n    reward?:number,rewardToken?:string\n    }\n\n}\n\nconst getTickersApi = async <R extends {[key:string]:any}>(list:Array<keyof R>)=> {\n    const {faitPrices,forex} = store.getState().system\n    const tickers = await exchangeAPI().getMixTicker({market: list.join(',')})\n    const data:TickerMap<R> = Reflect.ownKeys(tickers.tickMap).reduce((prev, key ) => {\n        const item: TickerData = tickers.tickMap[key as any];\n        if(item && item.base && forex && faitPrices && faitPrices[item.base]) {\n            const volume = volumeToCountAsBigNumber(item.base,item.base_token_volume);\n            const priceDollar = volume?.times(faitPrices[item.base].price);\n            const priceYuan = priceDollar?.times(forex);\n            const change = item.change? item.change * 100 : undefined;\n\n            prev[key as any] = {\n                // ...item,\n                timeUnit: '24h',\n                priceDollar:priceDollar?.toNumber(),\n                priceYuan:priceYuan?.toNumber(),\n                volume: volume?.toNumber(),\n                change: change,\n                floatTag: item.close > item.open ? 'increase' : 'decrease',\n\n                // APY: 0,\n                reward: 0,\n                rewardToken: '',\n                __rawTicker__: item,\n            } as Ticker;\n        }\n\n\n\n\n\n\n        // volume: toBig(item.base_token_volume).toNumber(),\n        \n        return prev\n    },{} as TickerMap<R>)\n\n    return { data }\n}\n\nexport function* getPostsSaga({payload}:any) {\n    try {\n        // @ts-ignore\n        const { tickerKey,tickerKeys } = payload;\n        console.log('getPostsSaga tickerKey',tickerKey, tickerKeys)\n        if(tickerKey || (tickerKeys && tickerKeys.length)) {\n            const {data}  = yield call(getTickersApi,tickerKey?[tickerKey]:tickerKeys);\n            yield put(getTickerStatus({tickerMap:data}));\n\n        }else{\n            throw new CustomError(ErrorMap.NO_TOKEN_KEY_LIST);\n        }\n    } catch (err) {\n        yield put(getTickerStatus(err));\n    }\n}\n\nfunction* tickerSaga() {\n    yield all([takeLatest(getTicker, getPostsSaga)]);\n}\nfunction* tickersSaga() {\n    yield all([takeLatest(getTickers, getPostsSaga)]);\n}\n\nexport const tickerForks = [\n    fork(tickerSaga),\n    fork(tickersSaga),\n]\n ","import { all, call, fork, put, take, takeLatest } from \"redux-saga/effects\"\nimport { getSystemStatus, updateRealTimeObj, updateSystem } from './reducer'\nimport { ENV, NETWORKEXTEND } from \"./interface\"\nimport store from '../index';\nimport { reset } from '../account/reducer';\nimport { ChainId } from 'loopring-sdk';\nimport { exchangeAPI, LoopringAPI } from '../apis/api';\nimport { getAmmMap, updateRealTimeAmmMap } from '../Amm/AmmMap';\nimport { getTokenMap } from '../token';\nimport { CustomError, ErrorMap } from '@loopring-web/component-lib/src/static-resource';\nimport { getAmmActivityMap } from '../Amm/AmmActivityMap';\nimport { updateWalletLayer1 } from '../walletLayer1';\n\n\nconst initConfig = function* <R extends { [ key: string ]: any }>(chainId: ChainId | 'unknown') {\n    store.dispatch(reset(undefined));\n    const {tokenSymbolMap: tokensMap} = yield call(async ()=> await LoopringAPI.exchangeAPI?.getTokens())\n    const {ammpools} = yield call(async ()=>await LoopringAPI.ammpoolAPI?.getAmmPoolConf());\n    const {pairs, marketArr, tokenArr, markets}  = yield call(async ()=> LoopringAPI.exchangeAPI?.getMixMarkets());\n    store.dispatch(getTokenMap({tokensMap, marketMap: markets, pairs,marketArr,tokenArr}))\n    yield take('tokenMap/getTokenMapStatus');\n    // let basePath: string = `wss://ws.${baseURL}/v3/ws?wsApiKey=${wsKey}`\n    store.dispatch(getAmmMap({ammpools}))\n    store.dispatch(getAmmActivityMap({ammpools}))\n    if(store.getState().tokenMap.status === 'ERROR'){\n\n    }\n\n}\n\nconst getSystemsApi = async <R extends { [ key: string ]: any }>(chainId: any) => {\n    //TODO get some other reuqired id...... put into system\n    // const { chainId } = system\n    const env = window.location.hostname === 'localhost' ? ENV.DEV : ChainId.GORLI === chainId ? ENV.UAT : ENV.PROD\n    chainId = ChainId.GORLI === chainId ? ChainId.GORLI : ChainId.MAINNET === chainId ? ChainId.MAINNET : NETWORKEXTEND.NONETWORK\n    if (chainId === NETWORKEXTEND.NONETWORK) {\n        throw new CustomError(ErrorMap.NO_NETWORK_ERROR)\n    } else {\n        LoopringAPI.InitApi(chainId as ChainId);\n        if (LoopringAPI.exchangeAPI) {\n            const { exchangeInfo } = (await LoopringAPI.exchangeAPI.getExchangeInfo())\n            const faitPrices = (await LoopringAPI.exchangeAPI.getFiatPrice({legal: 'CNY'})).fiatPrices\n            const gasPrice = (await exchangeAPI().getGasPrice()).gasPrice / 1e+9;\n            const baseURL = ChainId.MAINNET === chainId ? 'https://api3.loopring.io' : 'https://uat2.loopring.io'\n            const forex = faitPrices[ 'USDT' ].price;\n            let {__timer__} = store.getState().system;\n            __timer__ = ((__timer__) => {\n                if (__timer__ && __timer__ !== -1) {\n                    clearInterval(__timer__);\n                }\n                return setInterval(async () => {\n                    const faitPrices = (await exchangeAPI().getFiatPrice({legal: 'CNY'})).fiatPrices\n                    const gasPrice = (await exchangeAPI().getGasPrice()).gasPrice / 1e+9\n                    const forex = faitPrices[ 'USDT' ]\n                    store.dispatch(updateRealTimeAmmMap(undefined))\n                    store.dispatch(updateRealTimeObj({faitPrices, gasPrice, forex}))\n                }, 300000)   //\n\n            })(__timer__);\n            return {chainId, env, baseURL, faitPrices, gasPrice, forex, exchangeInfo, __timer__}\n        }\n    }\n}\n\nexport function* getUpdateSystem({payload}: any) {\n    try {\n        // @ts-ignore\n        const {chainId} = payload;\n        const {env, baseURL, faitPrices, gasPrice, forex, exchangeInfo, __timer__} = yield call(getSystemsApi, chainId);\n\n        yield put(getSystemStatus({env, baseURL, faitPrices, gasPrice, forex, exchangeInfo, __timer__}));\n        yield call(initConfig,chainId)\n        //TODO check wallect store\n    } catch (err) {\n        yield put(getSystemStatus(err));\n    }\n}\n\nfunction* systemSaga() {\n    yield all([takeLatest(updateSystem, getUpdateSystem)]);\n}\n\nexport const systemForks = [\n    fork(systemSaga),\n]\n","import { all, call, fork, put, takeLatest } from \"redux-saga/effects\";\nimport {  getWalletLayer1Status, updateWalletLayer1 } from './reducer';\nimport { CoinKey, PairKey, WalletCoin } from '@loopring-web/component-lib/src/static-resource';\nimport { exchangeAPI } from '../apis/api';\nimport store from '../index';\nimport { fromWEI } from '../../utils/swap_calc_utils';\n\ntype WalletLayer1Map<R extends {[key:string]:any}> = {\n    [key in CoinKey<R>|PairKey<R>]?:WalletCoin<R>\n}\n\nconst getWalletLayer1Balance = async <R extends {[key:string]:any}>()=> {\n    //TODO: check is connect and active and assign walletLayer1\n    //TODO: if not reject directory, any error happen will clean the\n    // await sdk\n    const exchangeApi = exchangeAPI();\n    const {accAddr,accountId} = store.getState().account;\n    const {tokenMap,marketCoins} = store.getState().tokenMap;\n    // @ts-ignore\n    const {tokenBalances} =  await exchangeApi.getTokenBalances({owner:accAddr,token: marketCoins.join()},tokenMap)\n    let walletLayer1;\n\n    if(tokenBalances) {\n        walletLayer1 = Reflect.ownKeys(tokenBalances).reduce((prev,item)=>{\n            return   {...prev, [ item ]:{\n                    belong: item,\n                    count: fromWEI(tokenMap, item, tokenBalances[item as string]),\n                }\n            }\n        },{} as WalletLayer1Map<R>)\n    }\n    return {walletLayer1}\n};\n\nexport function* getPostsSaga() {\n    try {\n        //\n        const {walletLayer1} = yield call(getWalletLayer1Balance);\n        yield put(getWalletLayer1Status({walletLayer1}));\n    } catch (err) {\n        yield put(getWalletLayer1Status(err));\n    }\n}\n\nexport function* walletLayer1Saga() {\n    yield all([takeLatest(updateWalletLayer1, getPostsSaga)]);\n}\n\nexport const walletLayer1Fork = [\n    fork(walletLayer1Saga),\n    // fork(tokenPairsSaga),\n]\n\n","import { all, call, fork, put, takeLatest } from \"redux-saga/effects\";\nimport { getWalletLayer2Status, updateWalletLayer2 } from './reducer';\nimport { CoinKey, PairKey, WalletCoin } from '@loopring-web/component-lib/src/static-resource';\nimport {  userAPI } from '../apis/api';\nimport store from '../index';\n\ntype WalletLayer2Map<R extends {[key:string]:any}> = {\n    [key in CoinKey<R>|PairKey<R>]?:WalletCoin<R>\n}\n\nconst getWalletLayer2Balance = async <R extends {[key:string]:any}>()=> {\n    //TODO: check is connect and active and assign walletLayer1\n    //TODO: if not reject directory, any error happen will clean the\n    // await sdk\n    // const exchangeApi = exchangeAPI();\n    const userApi = userAPI();\n    const {accountId,apiKey} = store.getState().account;\n    const {tokenMap,idIndex,marketCoins} = store.getState().tokenMap;\n    let walletLayer2;\n    if(apiKey && accountId){\n        // @ts-ignore\n        const {userBalances} =  await userApi.getUserBalances({accountId:accountId,tokens:''},apiKey)\n        if(userBalances) {\n            // tokenId: number;\n            // total: string;\n            // locked: string;\n            // pending: {\n            //     withdraw: string;\n            //     deposit: string;\n            // };\n            walletLayer2 = Reflect.ownKeys(userBalances).reduce((prev,item)=>{\n                // @ts-ignore\n                return   {...prev, [ idIndex[item] ]:userBalances[Number(item)]}\n            },{} as WalletLayer2Map<R>)\n        }\n    }\n\n    return {walletLayer2}\n};\nexport function* getPostsSaga() {\n    try {\n        //\n        const {walletLayer2} = yield call(getWalletLayer2Balance);\n        yield put(getWalletLayer2Status({walletLayer2}));\n    } catch (err) {\n        yield put(getWalletLayer2Status(err));\n    }\n}\n\nexport function* walletLayer2Saga() {\n    yield all([takeLatest(updateWalletLayer2, getPostsSaga)]);\n}\n// export function* walletLayer2Saga() {\n//     yield all([takeLatest(updateWalletLayer2, getPostsSaga)]);\n// }\n\n\nexport const walletLayer2Fork = [\n    fork(walletLayer2Saga),\n    // fork(tokenPairsSaga),\n]\n\n","import { all, call, fork, put, takeLatest } from \"redux-saga/effects\"\nimport { getUserRewards, getUserRewardsStatus } from './reducer'\n\nimport store from '../index';\nimport { exchangeAPI, LoopringAPI } from '../apis/api';\nimport { updateRealTimeAmmMap } from '../Amm/AmmMap';\nimport { updateRealTimeObj } from '../system';\n\nconst getUserRewardsApi = async <R extends {[key:string]:any}>(list:Array<keyof R>)=> {\n\n    // const data:UserRewardsMap<R> = {}\n\n    // const userRewardss = await exchangeAPI().getUserRewards({market: list.join(',')})\n    const {accountId} = store.getState().account\n    let {__timer__} = store.getState().userRewardsMap;\n    \n    if(LoopringAPI.ammpoolAPI) {\n        __timer__ = ((__timer__) => {\n            if (__timer__ && __timer__ !== -1) {\n                clearInterval(__timer__);\n            }\n            return setTimeout(async () => {\n                store.dispatch(getUserRewards(undefined))\n            }, 300000 * 4)   //\n\n        })(__timer__);\n        return  LoopringAPI.ammpoolAPI.getAmmPoolUserRewards({owner:accountId}).then(({ammUserRewardMap}) => {\n            return {data:ammUserRewardMap,__timer__}\n        })\n\n\n    }else{\n        return  Promise.reject({data:undefined,__timer__})\n    }\n\n}\n\nexport function* getPostsSaga({payload}:any) {\n    try {\n        // @ts-ignore\n        // const { userRewardsKey,userRewardsKeys } = payload;\n        // console.log('getPostsSaga userRewardsKey',userRewardsKey, userRewardsKeys)\n        // if(userRewardsKey || (userRewardsKeys && userRewardsKeys.length)) {\n        const {data,__timer__}  = yield call(getUserRewardsApi);\n        yield put(getUserRewardsStatus({userRewardsMap:data,__timer__}));\n\n        // }else{\n        //     throw new CustomError(ErrorMap.NO_SDK);\n        // }\n    } catch (err) {\n        yield put(getUserRewardsStatus(err));\n    }\n}\n\nfunction* userRewardsSaga() {\n    yield all([takeLatest(getUserRewards, getPostsSaga)]);\n}\n\nexport const userRewardsForks = [\n    fork(userRewardsSaga),\n    // fork(userRewardssSaga),\n]\n ","import { all, call, fork, put, takeLatest } from 'redux-saga/effects';\nimport { getSocketStatus, sendNewMessage, socketEnd } from './reducer'\n// import store from '../index';\nimport {\n    socketClose, socketSendMessage,\n    // socketConnect\n} from '../../services/socketUtil';\nimport store from '../index';\nimport { WsTopicType } from 'loopring-sdk/dist/defs/ws_defs';\n\n// export function* startSocket() {\n//     try {\n//         // @ts-ignore\n//         const { socket } = payload;\n//         // console.log('getPostsSaga systemKey',systemKey, systemKeys)\n//\n//         const { chainId } = store.getState().system;\n//         if(socket && chainId !=='unknown'){\n//             yield call(socketConnect, {chainId,socket});\n//         }\n//         yield put(getSocketStatus(undefined));\n//         //TODO check wallect store\n//     } catch (err) {\n//         yield put(getSocketStatus(err));\n//     }\n// }\nexport function* closeSocket(){\n    try {\n        yield call(socketClose)\n        yield put(getSocketStatus(undefined));\n        //TODO check wallect store\n    } catch (err) {\n        yield put(getSocketStatus(err));\n    }\n}\nexport function* sendMessage({payload}: any){\n    try {\n        const { chainId } = store.getState().system;\n        const { socket } = payload;\n        //const global = window || globalThis;\n        // @ts-ignore\n        // let ws:WebSocket|undefined = global.loopringSocket;\n        // if(ws){\n        //     // ws.onclose = function(e) {\n        //     //     console.log('Socket is closed', e.reason);\n        //     // };\n        //     // ws.close();\n        // }\n        yield call(socketSendMessage, { chainId, socket })\n        yield put(getSocketStatus(undefined));\n        //TODO check wallet store\n    } catch (err) {\n        yield put(getSocketStatus(err));\n    }\n}\n\nfunction* socketEndSaga(){\n    yield all([takeLatest(socketEnd, closeSocket)]);\n}\n// function* socketSaga() {\n//     yield all([takeLatest(socketStart, startSocket)]);\n// }\nfunction* socketSendMessageSaga() {\n    yield all([takeLatest(sendNewMessage, sendMessage)]);\n}\n\n\n\nexport const socketForks = [\n    // fork(socketSaga),\n    fork(socketEndSaga),\n    fork(socketSendMessageSaga),\n //   fork(initConfig),\n]\n\n\n\n","import { all } from \"redux-saga/effects\"\n// import machine from \"../state_machine/fsm/machine\"\n// import { TRANSITION } from \"../state_machine/fsm/actionTypes\"\n// import { helloSaga } from \"./sagas\"\nimport { tokenSaga } from './token/saga';\nimport { ammForks } from './Amm';\nimport { tickerForks } from './ticker/saga';\nimport { systemForks } from './system/saga';\nimport { walletLayer1Fork } from './walletLayer1/saga';\nimport { walletLayer2Fork } from './walletLayer2/saga';\nimport { userRewardsForks } from './userRewards/saga';\nimport { socketForks } from './socket/saga';\n\n\n// https://css-tricks.com/finite-state-machines-with-react/\n// https://musing-rosalind-2ce8e7.netlify.com/?machine=%7B%22initial%22%3A%22initial%22%2C%22states%22%3A%7B%22initial%22%3A%7B%22on%22%3A%7B%22LOGIN%22%3A%22loggedIn%22%2C%22LOGOUT%22%3A%22loggedOut%22%7D%7D%2C%22loggedOut%22%3A%7B%22on%22%3A%7B%22SUBMIT%22%3A%22loading%22%7D%7D%2C%22loading%22%3A%7B%22on%22%3A%7B%22SUCCESS%22%3A%22loggedIn%22%2C%22FAIL%22%3A%22loggedOut%22%7D%7D%2C%22loggedIn%22%3A%7B%22onEntry%22%3A%5B%22SET_TOKEN%22%5D%2C%22onExit%22%3A%5B%22CLEAR_TOKEN%22%5D%2C%22on%22%3A%7B%22LOGOUT%22%3A%22loggedOut%22%7D%7D%7D%7D\n\n// function* machineHandler(event: any, action: any) {\n//\n//   // @ts-ignore\n//   const currentAppState = yield select((state) => { state.account.status })\n//   const nextAppState = machine.transition(currentAppState, event)\n//\n//   yield put({\n//     type: \"APP_STATE/\" + nextAppState.value,\n//     payload: {\n//       value: nextAppState.value\n//     }\n//   });\n//\n//   console.debug(\"-> from \" + currentAppState + \" to \" + nextAppState);\n//\n//   for (let i = 0; i < nextAppState.actions.length; i++) {\n//     yield put({\n//       type: nextAppState.actions[i],\n//       payload: action\n//     });\n//   }\n// }\n\n// function* watchTransition() {\n//   yield takeEvery(TRANSITION, function*(action: any) {\n//     yield machineHandler(action.event, action.payload);\n//   });\n// }\n\nfunction* mySaga() {\n    yield all([\n        // fork(helloSaga),\n        // fork(watchTransition),\n        ...tokenSaga,\n        ...walletLayer1Fork,\n        ...walletLayer2Fork,\n        ...systemForks,\n        ...ammForks,\n        ...tickerForks,\n        ...userRewardsForks,\n        ...socketForks,\n\n    ]);\n}\n\nexport default mySaga;\n","import { configureStore, combineReducers, getDefaultMiddleware } from '@reduxjs/toolkit'\n\nimport { useDispatch } from 'react-redux'\nimport { save, load } from 'redux-localstorage-simple'\n\nimport createSagaMiddleware from 'redux-saga'\n\n// We'll use redux-logger just as an example of adding another middleware\nimport logger from 'redux-logger'\n\n// And use redux-batch as an example of adding enhancers\nimport { reduxBatch } from '@manaflair/redux-batch'\nimport { updateVersion } from './global/actions'\n\nimport accountSlice from './account/reducer'\nimport tradingSlice from './trading/reducer'\nimport transactionlice from './transactions/reducer'\n\n\nimport { modalsSlice, setLanguage, settingsSlice } from '@loopring-web/component-lib';\nimport { ammReducer } from './Amm';\nimport { tokenMapSlice } from './token';\nimport mySaga from './rootSaga';\nimport { tickerMapSlice } from './ticker';\nimport { systemSlice } from './system';\nimport { walletLayer1Slice } from './walletLayer1';\nimport { walletLayer2Slice } from './walletLayer2';\nimport { socketSlice } from './socket';\nimport { userRewardsMapSlice } from './userRewards';\n\nconst sagaMiddleware = createSagaMiddleware()\n\nconst reducer = combineReducers({\n  account: accountSlice.reducer,\n  socket: socketSlice.reducer,\n  settings: settingsSlice.reducer,\n  system: systemSlice.reducer,\n  trading: tradingSlice.reducer,\n  transactions: transactionlice.reducer,\n  modals: modalsSlice.reducer,\n  userRewardsMap: userRewardsMapSlice.reducer,\n  amm:ammReducer,\n  tokenMap: tokenMapSlice.reducer,\n  walletLayer2: walletLayer2Slice.reducer,\n  walletLayer1: walletLayer1Slice.reducer,\n  tickerMap: tickerMapSlice.reducer\n})\n\n//\n\nconst PERSISTED_KEYS: string[] = ['settings']\n\nconst store = configureStore({\n  reducer,\n  // middleware: (getDefaultMiddleware) => getDefaultMiddleware().concat(logger),\n  middleware: [...getDefaultMiddleware({ thunk: false,serializableCheck:false, }), save({ states: PERSISTED_KEYS }), sagaMiddleware, ],\n  // middleware: [...getDefaultMiddleware({ thunk: true }), ],\n  devTools: process.env.NODE_ENV !== 'production',\n  enhancers: [reduxBatch],\n  preloadedState: load({ states: PERSISTED_KEYS })\n})\nstore.dispatch(updateVersion())\nstore.dispatch(setLanguage(store.getState().settings.language))\n// @ts-ignore\nsagaMiddleware.run(mySaga, store.dispatch);\n\n// The store has been created with these options:\n// - The slice reducers were automatically passed to combineReducers()\n// - redux-thunk and redux-logger were added as middleware\n// - The Redux DevTools Extension is disabled for production\n// - The middleware, batch, and devtools enhancers were composed together\n\nexport type AppDispatch = typeof store.dispatch\nexport const useAppDispatch = () => useDispatch<AppDispatch>()\n\nexport type RootState = ReturnType<typeof reducer>\n\nexport default store\n","import { useDispatch, useSelector } from 'react-redux'\nimport { StateBase } from '../interface';\nimport { socketSlice } from './reducer';\n\nexport function useSocket(): StateBase & {\n    // socketStart:()=>void,\n    statusUnset:()=>void,\n    sendNewMessage:(socket: { [ key: string]:string[] })=>void,\n    socketEnd:()=>void\n}\n{\n    const socket:StateBase & {socket: { [ key: string]:string[] }} = useSelector((state: any) => state.socket)\n    const dispatch = useDispatch();\n    // const socketStart = () => {\n    //     dispatch(socketSlice.actions.socketStart(undefined))\n    // }\n    const sendNewMessage = (socket: { [ key: string]:string[] }) => {\n        dispatch(socketSlice.actions.sendNewMessage(socket))\n    }\n    const socketEnd = () => {\n        dispatch(socketSlice.actions.socketEnd(undefined))\n    }\n    const statusUnset = ()=>{\n        dispatch(socketSlice.actions.statusUnset(undefined))\n    }\n    return {\n        ...socket,\n        statusUnset,\n        // socketStart,\n        sendNewMessage,\n        socketEnd,\n    }\n\n}\n","export enum STATUS {\n    UNSET='UNSET',\n    PENDING='PENDING',\n    ERROR='ERROR',   // success failed timeout is Done\n    DONE='DONE',   // success failed timeout is Done\n}\n","import store from '../../stores';\nimport { toBig } from 'loopring-sdk';\nimport { BIG10 } from '../../defs/swap_defs';\nimport BigNumber from 'bignumber.js';\n\nexport const volumeToCount = (symbol:string,volumn:string|number|BigNumber,tokenMap= store.getState().tokenMap.tokenMap):number|undefined =>{\n   const result =  volumeToCountAsBigNumber(symbol,volumn,tokenMap);\n   return result? result.toNumber():undefined;\n}\nexport const volumeToCountAsBigNumber = (symbol:string,volumn:string|number|BigNumber,tokenMap= store.getState().tokenMap.tokenMap):BigNumber|undefined =>{\n    if(tokenMap && tokenMap[symbol] && typeof volumn !== 'undefined'){\n        try{\n            return toBig(volumn).div( BIG10.pow(tokenMap[symbol].decimals))\n        }catch (error){\n            throw error;\n        }\n    }else{\n        return undefined;\n    }\n}","// @ts-nocheck\nimport { ChainId, getAccountArg, getOrderArg, getOrderBookArg, WsTopicType } from 'loopring-sdk';\nimport { LoopringAPI } from '../stores/apis/api';\nimport store from '../stores';\nimport { updateSocketURL } from '../stores/system';\nimport { tickerService } from './tickerService';\nimport { ammPoolService } from './ammPoolService';\nimport { TokenVolumeV3 } from 'loopring-sdk/dist/defs/loopring_defs';\n\nexport type socketEventMap = { fn: (e: MessageEvent, props?: { [ key: string ]: any }) => any, deps?: any[] }\n\nexport enum SocketEventType {\n    pingpong = 'pingpong',\n    account = \"account\",\n    order = \"order\",\n    orderbook = \"orderbook\",\n    trade = \"trade\",\n    ticker = \"ticker\",\n    candlestick = \"candlestick\",\n    ammpool = \"ammpool\"\n}\n\n// enum SocketEventType {\n//     PING_PONG = 'PING_PONG',\n//     ACCOUNT = 'ACCOUNT',\n//     ORDER = 'ORDER',\n//     ORDERBOOK = 'ORDERBOOK',\n//     TRADE = 'TRADE',\n//     TICKER = 'TICKER',\n//     CANDLESTICK = 'CANDLESTICK',\n//     AMMPOOL = 'AMMPOOL',\n// }\n\nexport type SocketEventMap = {\n    [ key: keyof typeof WsTopicType ]: socketEventMap\n}\n\nconst pingPong = {\n    fn: (e: MessageEvent) => {\n        if (e.data === 'ping') {\n            global.looperingSocket.send('pong')\n        }\n    }\n}\n\n//@ts-ignore\nwindow.socketEventMap = {\n    [ WsTopicType ]: pingPong\n} as SocketEventMap;\n\nexport const addSocketEvents = (key: string, event: socketEventMap) => {\n    window.socketEventMap = {\n        ...window.socketEventMap,\n        [ key ]: event\n    }\n}\nexport const removeSocketEvents = (key: string) => {\n    if (window.socketEventMap && window.socketEventMap[ key ]) {\n        delete window.socketEventMap[ key ]\n    }\n}\nexport const resetSocketEvents = () => {\n    window.socketEventMap = {\n        [ SocketEventType.pingpong ]: pingPong\n    }\n}\n\nexport const isConnectSocket = () => {\n    const global: Window = window || globalThis;\n    if (global.looperingSocket && global.looperingSocket.send) {\n        return true;\n    } else {\n        return false\n    }\n}\nexport const socketClose = async () => {\n    const global = window || globalThis;\n    let ws: WebSocket | undefined = global.loopringSocket;\n    if (ws) {\n        const promise = new Promise((reolve, reject) => {\n            ws.onclose = function (e) {\n                reolve(`Socket is closed, ${e.reason}`)\n            };\n        })\n        ws.close();\n        return promise;\n    } else {\n        Promise.resolve('no websocket')\n    }\n}\nexport const socketConnect = async ({chainId, socket}: {\n    chainId: ChainId | 'unknown',\n    socket: { [ key: string ]: string[] }\n}) => {\n\n    if (chainId !== 'unknown' && LoopringAPI.wsAPI && socket) {\n        const url = chainId === ChainId.GORLI ? 'uat2.loopring.io' : 'api3.loopring.io'\n        const {wsKey} = await LoopringAPI.wsAPI.getWsKey();\n        let baseSocket: string = `wss://ws.${url}/v3/ws?wsApiKey=${wsKey}`;\n        store.dispatch(updateSocketURL({socketURL: baseSocket}));\n        const global: Window = window || globalThis;\n        let ws: WebSocket;\n        // @ts-ignore\n        // global.loopringSocket;\n\n        try {\n            ws = new WebSocket(baseSocket);\n            // @ts-ignore\n            global.looperingSocket = ws;\n            ws.onopen = function () {\n                console.log(\"WebSocket is open now.\");\n                // ws.send('pong');\n                // return  Promise.resolve('One time Connect done')\n                // subscribe to some channels\n                // ws.send(JSON.stringify({\n                //     //.... some message the I must send when I connect ....\n                // }));\n            };\n            ws.onmessage = function (e) {\n                console.log('Message:', e.data);\n                const {data} = e;\n                // data.topic.topic;\n                if (typeof data === 'string') {\n                    window.socketEventMap.pingPong.fn.call(window.socketEventMap.pingPong.deps, e);\n                } else {\n                    const {topic: [topic], data: _detail} = data;\n                    if (topic) {\n                        const {fn, deps} = window.socketEventMap[ topic ]\n                        if(typeof fn == 'function'){\n                            fn.call(deps, _detail);\n                        }\n                    }\n                }\n            };\n            ws.onclose = function (e) {\n                console.log('Socket is closed. Reconnect will be attempted in 1 second.', e.reason);\n                setTimeout(function () {\n                    socketConnect.call(global, chainId);\n                }, 1000);\n            };\n            ws.onerror = function (err: Event) {\n                console.error('Socket encountered error: ', 'Closing socket');\n                ws.close(WebSocket.CLOSED);\n            };\n        } catch (error) {\n            console.log('connect error, not from reconnect')\n            const global: Window & { __wsTimer__?: { timer?: NodeJS.Timeout | -1, count: 0 } } = window || globalThis;\n            if (global.__wsTimer__) {\n                if (global.__wsTimer__.timer && global.__wsTimer__.timer !== -1) {\n                    clearTimeout(global.__wsTimer__.timer)\n                }\n                global.__wsTimer__.timer = -1\n                global.__wsTimer__.count++;\n            } else {\n                global.__wsTimer__ = {\n                    //...global.__wsTimer__,\n                    timer: -1,\n                    count: 0\n                }\n            }\n            if (global.__wsTimer__.count < 5) {\n                global.__wsTimer__.timer = setTimeout(function () {\n                    socketConnect.call(global, chainId);\n                }, 1000 * global.__wsTimer__.count);\n            } else {\n                ws.onclose();\n            }\n        }\n\n    }\n}\n\nexport const socketSendMessage = async ({socket, chainId}: {\n    chainId: ChainId | 'unknown',\n    socket: { [ key: string ]: string[] }\n}) => {\n    if (socket && Reflect.ownKeys(socket).length) {\n        const list = resetSocketEvents();\n        makeMessageArray();\n        if (!isConnectSocket()) {\n            socketConnect({socket})\n        } else {\n            const global: Window = window || globalThis;\n            global.looperingSocket.send()\n        }\n    } else {\n        if (!isConnectSocket()) {\n            socketClose();\n        }\n    }\n}\n\n\nexport const makeMessageArray = ({socket}: { socket: { [ key: string ]: string[] } }) => {\n    let topics = [], list = []; // let registerDispatch = [];\n    return Reflect.ownKeys(socket).map((eventType: keyof typeof SocketEventType) => {\n        switch (eventType) {\n            case  SocketEventType.account:\n                list = socket[ SocketEventType.account ].map(key => getAccountArg(key));\n                if (list && list.length) {\n                    makeReceiveMessageCallback(SocketEventType.account)\n                    topics = [...topics, ...list];\n                }\n                break;\n            case  SocketEventType.order:\n                list = socket[ SocketEventType.order ].map(key => getOrderArg(key))\n                if (list && list.length) {\n                    makeReceiveMessageCallback(SocketEventType.order)\n                    topics = [...topics, ...list];\n                }\n                break\n            case  SocketEventType.orderbook:\n                list = socket[ SocketEventType.orderbook ].map(key => getOrderBookArg(key))\n                if (list && list.length) {\n                    makeReceiveMessageCallback(SocketEventType.orderbook)\n                    topics = [...topics, ...list];\n                }\n                break\n            case  SocketEventType.trade:\n                list = socket[ SocketEventType.trade ].map(key => getTradeArg(key))\n                if (list && list.length) {\n                    makeReceiveMessageCallback(SocketEventType.trade)\n                    topics = [...topics, ...list];\n                }\n                break\n            case  SocketEventType.ticker:\n                list = socket[ SocketEventType.ticker ].map(key => getTickerArg(key))\n                if (list && list.length) {\n                    makeReceiveMessageCallback(SocketEventType.ticker)\n                    topics = [...topics, ...list];\n                }\n                break\n            case  SocketEventType.candlestick:\n                list = socket[ SocketEventType.candlestick ].map(key => getCandlestickArg(key))\n                if (list && list.length) {\n                    makeReceiveMessageCallback(SocketEventType.candlestick)\n                    topics = [...topics, ...list];\n                }\n                break\n            case  SocketEventType.ammpool:\n                list = socket[ SocketEventType.ammpool ].map(key => getAmmpoolArg(key))\n                if (list && list.length) {\n                    makeReceiveMessageCallback(SocketEventType.ammpool)\n                    topics = [...topics, ...list];\n                }\n                break\n        }\n        return topics\n    })\n\n}\nexport const makeReceiveMessageCallback = (type: keyof typeof SocketEventType) => {\n\n    addSocketEvents(type, {\n        fn: SocketEventMap [ type ]\n    })\n}\n\n\nconst SocketEventMap = {\n    // PING_PONG : (e)=>{\n    //\n    // },\n    [SocketEventType.account]: (e) => {\n\n    },\n    [SocketEventType.order]: (e) => {\n\n    },\n    [SocketEventType.orderbook]: (e) => {\n\n    },\n    [SocketEventType.trade]: (e) => {\n\n    },\n    [SocketEventType.ticker]: (data:string[]) => {\n        const [market,timestamp,size,volume,open,high,low,close,count,bid,ask] = data;\n        tickerService.sendTicker({market,timestamp,size,volume,open,high,low,close,count,bid,ask})\n    },\n    [SocketEventType.candlestick]: (e) => {\n\n    },\n    [SocketEventType.ammpool]: (data:string[]) =>{\n       // const [market,timestamp,size,volume,open,high,low,close,count,bid,ask] = data;\n        const [poolName,poolAddress,pooled,[tokenId,volume],risky] = data;\n        ammPoolService.sendAmmPool({poolName,poolAddress,pooled,lp:{tokenId,volume},risky})\n    },\n}\n\n\n\n","import { Trans, useTranslation } from 'react-i18next';\nimport { Box, Container, Link, Typography } from '@material-ui/core';\nimport styled from '@emotion/styled';\nimport { ErrorObject } from '@loopring-web/component-lib/src/static-resource';\nimport { getContactInfo } from '../../utils/dt_tools';\n\nconst StyleBox = styled(Box)`\n  background-image: url('./static/images/error_bg.png');\n  background-repeat: no-repeat;\n  background-size: contain;\n  background-position: bottom;\n  white-space: pre-wrap;\n  //h2{\n  //  position: relative;\n  //}\n` as typeof Box\n\nexport const ErrorPage = ({messageKey}: ErrorObject) => {\n    // const {messageKey}: { id?:string,messageKey:string } = {messageKey: 'errorMessageTokenMapIsEmpty'};\n    //TODO: checkRouter\n    const {t} = useTranslation('error');\n    const message = `labelConnectUs`;\n    return <>\n        <Container>\n            {/*style={{height: '100%' }}*/}\n            <StyleBox flex={1} display={'flex'} alignItems={'flex-start'} justifyContent={'center'}\n                      flexDirection={'column'} marginTop={4} height={680} maxWidth={1200}>\n                {/*<StyleBox>*/}\n                <Box textAlign={'center'} position={'relative'} left={128} top={-64}>\n                    <Typography component={'h2'} variant={'h2'}>\n                        {t(messageKey)}\n                    </Typography>\n                    <Typography marginY={2} component={'p'} variant={'body1'} color={'textSecondary'}>\n                        <Trans i18nKey={message}>\n                            If you believe this is indeed a bug, please <Link\n                            component={'a'}\n                            onClick={(e) => {\n                                window.location.href = getContactInfo();\n                                e.preventDefault();\n                            }}\n                        >contact us</Link> <br/> We would appreciate your feedback\n\n                        </Trans>\n                        {/*{t(message)}*/}\n                        {/*{t(messageKey)}*/}\n                    </Typography>\n                </Box>\n                {/*</StyleBox>*/}\n            </StyleBox>\n        </Container>\n\n        {/*<Footer></Footer>*/}\n    </>\n}\n","// import { i18nInstance as i18n  } from \"@loopring-web/component-lib/static-resource\"\nimport i18n from 'i18next';\n\nconst covertLocale = (rawLocale: string = i18n.language) => {\n    return rawLocale.replace('_', '-')\n}\n\nexport function getLocaleDtFromTs(ts: number | string, locale: string = i18n.language) {\n    if (typeof(ts) === 'string') {\n        ts = parseInt(ts)\n    }\n    const dt = new Date(ts).toLocaleString(covertLocale(locale))\n    return dt\n}\n\nexport function getLocaleDt(dt?: Date, locale: string = i18n.language) {\n    if (dt) {\n        return dt.toLocaleString(covertLocale(locale))\n    }\n    return ''\n}\n\nexport function getContactInfo(subject: string = 'report to loopring website', body: string ='Body Content') {\n    const email = process.env.CONTACT_US_EMAIL ?? 'contact@loopring.io'\n    return `mailto:${email}?subject=${subject}&body=${body}`\n}\n","import { Subject } from 'rxjs';\nimport { TradeFloat } from '@loopring-web/component-lib/src/static-resource';\n\nconst subject = new Subject();\n\nexport type TickerMap<R> = {\n    [key in keyof R]:TradeFloat\n}\n// <R extends {[key:string]:any}>\n\nexport const tickerService = {\n    sendTicker: (tickerMap:TickerMap<{[key:string]:any}>) => subject.next({ tickerMap: tickerMap }),\n    // clearMessages: () => subject.next(),\n    onSocket: () => subject.asObservable()\n};","import { Subject } from 'rxjs';\nimport { TradeFloat } from '@loopring-web/component-lib/src/static-resource';\n\nconst subject = new Subject();\n\nexport type AmmPoolMap<R> = {\n    [key in keyof R]:TradeFloat\n}\n// <R extends {[key:string]:any}>\n\nexport const ammPoolService = {\n    sendAmmPool: (ammPoolMap:AmmPoolMap<{[key:string]:any}>) => subject.next({ ammPoolMap: ammPoolMap }),\n    // clearMessages: () => subject.next(),\n    onSocket: () => subject.asObservable()\n};","import React from 'react';\nimport { useAmmMap } from '../../../stores/Amm/AmmMap';\nimport { AmmDetail, CustomError, ErrorMap, } from '@loopring-web/component-lib/src/static-resource';\nimport { deepClone } from '../../../utils/obj_tools';\nimport { STATUS } from '../../../stores/constant';\nimport { useTokenMap } from '../../../stores/token';\nimport { useSocket } from '../../../stores/socket';\nimport { useTicker } from '../../../stores/ticker';\n\nexport function useAmmMapUI<R extends { [ key: string ]: any }, I extends { [ key: string ]: any }>({pageSize}: { pageSize: number }) {\n    const [rawData, setRawData] = React.useState<Array<AmmDetail<any>> | []>([]);\n    const [page, setPage] = React.useState<number>(1);\n    // const [keys, setKeys] = React.useState<string[]>([]);\n    const [timestamp, setTimestamp ] = React.useState<NodeJS.Timer|-1>(-1)\n    const {coinMap} = useTokenMap();\n    const {\n        ammMap,\n        status: ammMapStatus,\n        // errorMessage: errorAmmMap,\n        statusUnset: ammMapStatusUnset,\n        // updateAmmMap,\n    } = useAmmMap();\n    const {\n        tickerMap,\n        status: tickerStatus,\n        // errorMessage: errorTickerMap,\n        statusUnset: tickerStatusUnset,\n        updateTickers,\n    } = useTicker();\n    const {\n        status:socketStatus,\n        // errorMessage: errorTickerMap,\n        statusUnset: socketStatusUnset,\n    } = useSocket();\n    const updateRawData = React.useCallback( (tickerMap) => {\n        try {\n            const _ammMap = deepClone(ammMap);\n            for (let tickerMapKey in tickerMap) {\n                if(_ammMap['AMM-' + tickerMapKey ]){\n                    _ammMap['AMM-' + tickerMapKey ].tradeFloat =  {\n                        ..._ammMap['AMM-' + tickerMapKey ].tradeFloat,\n                        ...tickerMap[ tickerMapKey ],\n                        // APY: _ammMap['AMM-' + tickerMapKey ].APY\n                    }\n\n                }\n            }\n            setRawData(Object.keys(_ammMap).map((ammKey: string) => {\n                if (coinMap) {\n                    _ammMap[ ammKey ][ 'coinAInfo' ] = coinMap[ _ammMap[ ammKey ][ 'coinA' ] ];\n                    _ammMap[ ammKey ][ 'coinBInfo' ] = coinMap[ _ammMap[ ammKey ][ 'coinB' ] ];\n                }\n                return  _ammMap[ ammKey ];\n            }) )\n        } catch (error) {\n            throw new CustomError({...ErrorMap.NO_TOKEN_MAP, options: error})\n        }\n\n    } ,[ammMap]);\n    const updateTickerLoop =  React.useCallback((_keys?:string[])=>{\n\n        if(timestamp !== -1){\n            clearTimeout(timestamp)\n        }\n\n        setTimestamp(setTimeout(()=>{\n            updateTickerLoop(_keys);\n        },60000))\n        \n        //console.log(_keys)\n        setImmediate(updateTickers,_keys)\n    },[])\n\n    const updateTickersUI = React.useCallback((_page) => {\n        setPage(_page);\n        if (ammMap && Object.keys(ammMap).length > 0) {\n            const _keys = []\n            for (let i = (page - 1) * pageSize; i < Object.keys(ammMap).length && i < (page - 1) * pageSize + pageSize; i++) {\n                _keys.push(Object.keys(ammMap)[ i ]);\n            }\n            \n            // setKeys(_keys);\n            updateTickerLoop(_keys);\n            // try{\n            //    // socketStart({})\n            // }catch (error){\n            //\n            // }\n\n\n        }\n    }, [ammMap, pageSize]);\n    React.useEffect(() => {\n        if(ammMap && Object.keys(ammMap).length !== 0) {\n            updateTickersUI(page)\n        }\n    }, []);\n\n    // const subject = React.useMemo(() =>  tickerService.onSocket(),[]);\n    // React.useEffect(() => {\n    //     // if(ammMap && Object.keys(ammMap).length !== 0) {\n    //     //     updateTickersUI(page)\n    //     // }\n    //     const subscription = subject.subscribe(tickerMap => {\n    //         if (tickerMap) {\n    //           //  updateRawData(tickerMap);\n    //         } else {\n    //           //  updateTickers(keys);\n    //         }\n    //     });\n    //     return ()=> subscription.unsubscribe();\n    // }, [subject]);\n    // React.useEffect(() => {\n    //     switch (socketStatus) {\n    //         case \"ERROR\":\n    //             console.log(\"ERROR\", 'open websocket error get moment value from api ');\n    //             socketStatusUnset();\n    //             updateTickers(keys);\n    //             break;\n    //         default:\n    //             break;\n    //     }\n    // }, [socketStatus, socketStatusUnset]);\n\n    React.useEffect(() => {\n        switch (tickerStatus) {\n            case \"ERROR\":\n                console.log(\"ERROR\", 'get ticker error,ui');\n                tickerStatusUnset()\n                break;\n            case \"PENDING\":\n                break;\n            case \"DONE\":\n                tickerStatusUnset();\n                \n                updateRawData(tickerMap)\n                break;\n            default:\n                break;\n        }\n    }, [tickerStatus, tickerStatusUnset]);\n\n    React.useEffect(() => {\n        switch (ammMapStatus) {\n            case \"ERROR\":\n                console.log(\"ERROR\", 'get ammMap error,ui');\n                ammMapStatusUnset();\n                break;\n            case STATUS.PENDING:\n                console.log(\"PENDING\", 'get ammMap error,ui');\n                break;\n            case STATUS.DONE:\n                ammMapStatusUnset();\n                updateTickersUI(1)\n                break;\n            default :\n                break;\n        }\n    }, [ammMapStatus, ammMapStatusUnset, updateTickersUI]);\n\n\n\n    return {\n        page,\n        rawData,\n        updateTickersUI,\n    }\n}\n\n","import React  from 'react';\nimport detectEthereumProvider from '@metamask/detect-provider';\nimport { useCustomDCEffect } from 'hooks/common/useCustomDCEffect';\nimport { useSystem } from './stores/system';\nimport { ChainId } from 'loopring-sdk';\nimport { useAmmMap } from './stores/Amm/AmmMap';\nimport { STATUS } from './stores/constant';\nimport { useTokenMap } from './stores/token';\nimport { useWalletLayer1 } from './stores/walletLayer1';\nimport { useAccount } from './stores/account/hook';\n\n\n/**\n * @description call it when bootstrap the page or change the network\n */\nexport function useInit(){\n    const [state,setState] = React.useState<keyof typeof STATUS>('PENDING')\n    const systemState = useSystem();\n    const tokenState = useTokenMap();\n    const ammMapState = useAmmMap();\n    const accountState  = useAccount();\n    const walletLayer1State  =  useWalletLayer1()\n    //store.getState().account\n    // const socketState =   useSocket();\n\n    useCustomDCEffect(async() => {\n\n        const handleChainChanged = (chainId: any) => {\n    \n            // const network = chainId == ChainId.GORLI ? NETWORK.Goerli : NETWORK.MAIN\n             console.log('handleChainChanged chainId: ', chainId)\n             systemState.updateSystem({ chainId })\n             window.location.reload();\n        }\n\n        const provider: any = await detectEthereumProvider()\n        if (provider) {\n            const chainId = Number(await provider.request({ method: 'eth_chainId' }))\n    \n            provider.on('chainChanged', ()=>{handleChainChanged(chainId)} )\n            // @ts-ignore\n            systemState.updateSystem({ chainId  })\n           //handleChainChanged(chainId)\n            \n        } else {\n            systemState.updateSystem({chainId:ChainId.MAINNET})\n            console.log('web3 is not found')\n        }\n\n    }, [])\n\n    React.useEffect(() => {\n        switch (systemState.status) {\n            case \"ERROR\":\n                systemState.statusUnset();\n                setState('ERROR')\n                //TODO show error at button page show error  some retry dispat again\n                break;\n            case \"DONE\":\n                systemState.statusUnset();\n                //TODO do some static information update\n                //tokenState.updateTokenMap();\n                break;\n            default:\n                break;\n\n        }\n    },[\n        systemState,\n        // systemState.status,\n        // systemState.statusUnset,\n        //tokenState.updateTokenMap\n    ]);\n    React.useEffect(() => {\n        if(ammMapState.status ===\"ERROR\" || tokenState.status === \"ERROR\"){\n            //TODO: solve error\n            ammMapState.statusUnset();\n            tokenState.statusUnset();\n            setState('ERROR');\n        }else if(ammMapState.status ===\"DONE\" && tokenState.status === \"DONE\"){\n            ammMapState.statusUnset();\n            tokenState.statusUnset();\n            if(accountState.accountId){\n                walletLayer1State.updateWalletLayer1()\n            }\n            setState('DONE');\n        }\n    },[ammMapState,tokenState])\n\n    // React.useEffect(()=>{\n    //\n    // },[])\n\n\n\n    return {\n        state,\n    }\n\n}\n","export enum Theme {\n    dark = 'dark',\n    light = 'light',\n}\n\nexport enum LangType {\n    en = 'en_US',\n    cn = 'zh_CN',\n}\n\nexport enum SystemStatus {\n    NORMAL,\n    ERROR,\n    UNKNOWN,\n}\n\nexport enum MODAL_TYPE {\n    UNKNOWN,\n    LOADING,\n    WALLET,\n}\n\nexport const REFRESH_RATE = 1000\n\nexport const REFRESH_RATE_SLOW = 15000\n","import { useCallback } from \"react\";\nimport { useDispatch } from \"react-redux\"\n\nimport {\n    setShowDeposit,\n    setShowResetAccount,\n    setShowTransfer,\n    setShowWithdraw,\n} from '@loopring-web/component-lib'\nimport { useTranslation } from \"react-i18next\";\nimport store from 'stores'\nimport { AccountStatus } from \"state_machine/account_machine_spec\";\n\nexport function useModals() {\n\n    const dispatch = useDispatch()\n\n    const { t } = useTranslation('common')\n\n    const ShowDeposit = useCallback((isShow: boolean)=>{\n        const isNoAccount = store.getState().account.status === AccountStatus.NOACCOUNT\n\n        console.log('isNoAccount: ', isNoAccount, t('depositTitleAndActive'))\n        const action = {\n            isShow,\n            props: {\n                title: isNoAccount ? t('depositTitleAndActive') : t('depositTitle'),\n                description: 'depositAndActiveDescription'\n            }\n        }\n        dispatch(setShowDeposit(action))\n    }, [dispatch, t])\n    const ShowTransfer = useCallback((isShow: boolean)=>dispatch(setShowTransfer({isShow})), [dispatch])\n    const ShowWithdraw = useCallback((isShow: boolean)=>dispatch(setShowWithdraw({isShow})), [dispatch])\n    const ShowResetAccount = useCallback((isShow: boolean)=>dispatch(setShowResetAccount({isShow})), [dispatch])\n\n    return {\n        ShowDeposit,\n        ShowTransfer,\n        ShowWithdraw,\n        ShowResetAccount,\n    }\n}","import { REFRESH_RATE } from \"defs/common_defs\"\n\nexport function PromiseJob(fetchPromise: any, setFunc: any, field?: string, prefix: any = 'PromiseJob') {\n\n    let mounted = true\n\n    const handler = () => {\n        if (fetchPromise()) {\n            fetchPromise().then((data: any) => {\n                if (mounted) {\n                    setFunc(field ? data[field] : data)\n                } else {\n                    console.log(prefix + ' unmounted!')\n                }\n            }).catch((reason: any) => {\n                console.error(reason)\n            })\n        }\n    }\n\n    const cleanUp = () => {\n        mounted = false\n    }\n\n    return {\n        handler,\n        cleanUp,\n    }\n\n}\n\n\nexport function PromiseJobInTimer(fetchPromise: any, setFunc: any, field?: string, prefix: any = 'PromiseJobInTimer', timeout: number = REFRESH_RATE) {\n\n    let mounted = true\n\n    const handler = () => {\n\n        mounted = true\n\n        const fetchFunc = () => {\n            if (fetchPromise()) {\n                fetchPromise().then((data: any) => {\n                    if (mounted) {\n                        setFunc(field ? data[field] : data)\n                    } else {\n                        console.log(prefix + ' unmounted!')\n                    }\n                }).catch((reason: any) => {\n                    console.error(reason)\n                })\n            }\n        }\n\n        fetchFunc()\n\n        const id = setInterval(fetchFunc, timeout)\n\n        return id\n    }\n\n    const cleanUp = (handler: any) => {\n        mounted = false\n        if (handler) clearInterval(handler)\n    }\n\n    return {\n        handler,\n        cleanUp,\n    }\n\n}\n","import { useEffect } from 'react'\nimport { PromiseJob, PromiseJobInTimer } from '../../utils/hook_tools'\nimport { REFRESH_RATE_SLOW } from \"defs/common_defs\"\n\nexport function usePromiseJob(fetchPromise: any, setFunc: any, field? :string, prefix: any = undefined, dependencies: any[] = []) {\n\n  const {\n    handler,\n    cleanUp,\n  } = PromiseJob(fetchPromise, setFunc, field, prefix)\n\n  useEffect(() => {\n    handler()\n    return () => cleanUp()\n  }, dependencies)\n\n}\n\nexport function usePromiseJobInTimer(fetchPromise: any, setFunc: any, field? :string, \n  prefix: any = undefined, dependencies: any[] = [], timeout: number= REFRESH_RATE_SLOW) {\n  const {\n    handler,\n    cleanUp,\n  } = PromiseJobInTimer(fetchPromise, setFunc, field, prefix, timeout)\n\n  useEffect(() => {\n\n    const id = handler()\n    return () => cleanUp(id)\n  }, dependencies)\n\n}\n","import { useState, } from 'react'\n\nimport { TradesData, TickerData, DepthData, \n  TokensResponse,\n  MarketsResponse, } from 'loopring-sdk'\n\nimport { usePromiseJob } from 'hooks/common/useCommon'\nimport { useExchangeAPI, } from './useApi'\n\nexport function useGetGas() {\n\n  const [gas, setGas] = useState<any>()\n\n  const api = useExchangeAPI()\n\n  const fetchData = () => {\n    if (!api) {\n      return undefined\n    }\n    return api.getGasPrice()\n  }\n\n  usePromiseJob(fetchData, setGas, undefined, 'useGetGas', [api])\n\n  return { gas }\n\n}\n\nexport function useGetMixMarkets() {\n\n  const [markets, setMarkets] = useState<MarketsResponse>()\n    const api = useExchangeAPI()\n\n    const fetchData = () => {\n      if (!api) {\n        return undefined\n      }\n      return api.getMixMarkets()\n    }\n  \n    usePromiseJob(fetchData, setMarkets, undefined, 'useGetMarkets', [api])\n    \n    return { markets }\n\n}\n\nexport function useGetMarkets() {\n\n  const [markets, setMarkets] = useState<MarketsResponse>()\n    const api = useExchangeAPI()\n\n    const fetchData = () => {\n      if (!api) {\n        return undefined\n      }\n      return api.getMarkets()\n    }\n  \n    usePromiseJob(fetchData, setMarkets, undefined, 'useGetMarkets', [api])\n    \n    return { markets }\n\n}\n\nexport function useGetExchangeInfo() {\n\n  const [exchangeInfo, setExchangeInfo] = useState<any>()\n    const api = useExchangeAPI()\n\n    const fetchData = () => {\n      if (!api) {\n        return undefined\n      }\n      return api.getExchangeInfo()\n    }\n  \n    usePromiseJob(fetchData, setExchangeInfo, 'exchangeInfo', 'useGetExchangeInfo', [api])\n    \n    return { exchangeInfo }\n\n}\n\nexport function useGetTokens() {\n\n  const [tokens, setTokens] = useState<TokensResponse>()\n    const api = useExchangeAPI()\n\n    const fetchData = () => {\n      if (!api) {\n        return undefined\n      }\n      return api.getTokens()\n    }\n  \n    usePromiseJob(fetchData, setTokens, undefined, 'useGetTokens', [api])\n    \n    return { tokens }\n\n}\n\n\nexport function useTrades(symbol: string) {\n\n  const [trades, setTrades] = useState<TradesData>()\n\n  const api = useExchangeAPI()\n\n  const fetchData = () => {\n    if (!api) {\n      return undefined\n    }\n    return api.getMarketTrades({\n      market: symbol\n    })\n  }\n\n  usePromiseJob(fetchData, setTrades, undefined, 'useTrades', [api, symbol])\n\n  return { trades, }\n\n}\n\nexport function useTickerMap(market: string) {\n\n  const [tickerMap, setTickerMap] = useState<{[key: string]: TickerData}>()\n\n  const api = useExchangeAPI()\n\n  const fetchData = () => {\n    if (!api) {\n      return undefined\n    }\n    return api.getTicker({\n      market\n    })\n  }\n\n  usePromiseJob(fetchData, setTickerMap, 'tickMap', 'useTickerMap', [api, market])\n\n  return { tickerMap, }\n\n}\n\nexport function useDepth(symbol: string) {\n\n  const api = useExchangeAPI()\n\n  const [depth, setDepth] = useState<DepthData>()\n\n    const fetchData = () => {\n      if (!api) {\n        return undefined\n      }\n      return api.getMixDepth({\n        market: symbol\n      })\n    }\n  \n    usePromiseJob(fetchData, setDepth, 'depth', 'useDepth', [api, symbol])\n\n  return { depth, }\n\n}\n","import store from '../../stores';\nimport { WalletMap,WalletCoin,CoinKey } from '@loopring-web/component-lib/static-resource';\nimport * as fm from 'loopring-sdk';\nimport { fromWEI } from '../../utils/swap_calc_utils';\nimport { UserBalanceInfo } from 'loopring-sdk';\nexport type WalletMapExtend<C> =    {\n    [K in CoinKey<C>]?: WalletCoin<C> & {\n    detail:UserBalanceInfo\n}\n}\n\n\n// export const makeWalletLayer1 = <C extends { [ key: string ]: any }>():{ walletMap: WalletMapExtend<C> | undefined } => {\n//     const {walletLayer1} = store.getState().walletLayer1;\n//     const {tokenMap} = store.getState().tokenMap;\n//     let walletMap: WalletMapExtend<C> | undefined;\n//     if (walletLayer1) {\n//         walletMap = Reflect.ownKeys(walletLayer1).reduce((prev, item) => {\n//             const {total, locked, pending: {withdraw}} = walletLayer1[ item as string ];\n//             const countBig = fm.toBig(total).minus(fm.toBig(locked)).minus(fm.toBig(withdraw)).toString()\n//             return {\n//                 ...prev, [ item ]: {\n//                     belong: item,\n//                     count: fromWEI(tokenMap, item, countBig),\n//                     detail: walletLayer1[ item as string ]\n//                 }\n//             }\n//         }, {} as  WalletMapExtend<C> )\n//     }\n//\n//     return {walletMap}\n// }\n\nexport const makeWallet = <C extends { [ key: string ]: any }>():{ walletMap: WalletMapExtend<C> | undefined } => {\n    const {walletLayer2} = store.getState().walletLayer2;\n    const {tokenMap} = store.getState().tokenMap;\n    let walletMap: WalletMapExtend<C> | undefined;\n    if (walletLayer2) {\n        walletMap = Reflect.ownKeys(walletLayer2).reduce((prev, item) => {\n            const {total, locked, pending: {withdraw}} = walletLayer2[ item as string ];\n            const countBig = fm.toBig(total).minus(fm.toBig(locked)).minus(fm.toBig(withdraw)).toString()\n            return {\n                ...prev, [ item ]: {\n                    belong: item,\n                    count: fromWEI(tokenMap, item, countBig),\n                    detail: walletLayer2[ item as string ]\n                }\n            }\n        }, {} as  WalletMapExtend<C> )\n    }\n\n    return {walletMap}\n}","import React, { useCallback } from 'react'\n\nimport { useTranslation } from 'react-i18next'\n\nimport {\n    gatewayList as DefaultGatewayList,\n    headerMenuData, HeaderMenuTabStatus,\n    headerToolBarData, HeadMenuTabKey,\n    ButtonComponentsMap, LanguageKeys,\n    WalletStatus, HideIcon,\n    GatewayItem, ViewIcon, ThemeKeys, LockIcon, UnLockIcon,\n} from '@loopring-web/component-lib/src/static-resource'\n\nimport { useAccount, useUnlock, useConnect, } from 'stores/account/hook'\n\nimport { getShortAddr } from 'utils/web3_tools'\n\nimport { AccountStatus } from 'state_machine/account_machine_spec'\n\nimport { useCustomDCEffect } from 'hooks/common/useCustomDCEffect'\n\nimport { Theme, } from 'defs/common_defs'\n\nimport { Button, SwapProps, useOpenModals, useSettings } from '@loopring-web/component-lib'\n\nimport store from 'stores'\n\nimport { ConnectorNames, LoopringMap } from 'loopring-sdk'\nimport { Typography } from '@material-ui/core';\nimport { AccountInfoProps } from '@loopring-web/component-lib/components/block';\nimport { useEtherscan } from 'hooks/web3/useWeb3'\n\nimport { useModals } from 'hooks/modal/useModals'\n\nimport {useState } from 'react'\nimport Web3 from 'web3'\n\nimport { AmmData, AmmInData, IBData, TradeCalcData, WalletMap } from '@loopring-web/component-lib/static-resource'\nimport { AmmProps } from '@loopring-web/component-lib'\n\nimport {  useUserAPI } from 'hooks/exchange/useApi'\n\nimport { useWeb3Account } from 'stores/account/hook'\nimport { useGetExchangeInfo, useGetTokens } from 'hooks/exchange/useExchangeAPI'\n\nimport * as sdk from 'loopring-sdk'\n\n\nimport {\n    ExchangeAPI,\n    dumpError400,\n    GetNextStorageIdRequest,\n    GetOffchainFeeAmtRequest,\n    OffchainFeeReqType,\n    OffChainWithdrawalRequestV3,\n    OriginTransferRequestV3,\n    TokenInfo,\n    VALID_UNTIL,\n} from 'loopring-sdk'\n\nimport { useGetUserBalances } from 'hooks/exchange/useUserAPI'\n\nimport {\n    DepositProps,\n    ResetProps,\n    SwitchData,\n    TradeBtnStatus,\n    TransferProps,\n    WithdrawProps,\n} from '@loopring-web/component-lib'\n\nimport { WithdrawType, WithdrawTypes } from '@loopring-web/component-lib/src/static-resource'\nimport { CoinType } from '@loopring-web/component-lib/static'\nimport { useDispatch  } from 'react-redux'\nimport { makeWallet } from 'hooks/help/makeWallet'\nimport { useWalletLayer2 } from 'stores/walletLayer2'\nimport { useTokenMap } from 'stores/token'\nimport { LoopringAPI } from 'stores/apis/api'\nimport { BIG10 } from 'defs/swap_defs'\nimport { useWalletLayer1 } from '../../stores/walletLayer1';\n\nexport const useHeader = () => {\n    const { i18n,t } = useTranslation(['common','layout'])\n    const { setTheme,themeMode,language, setLanguage } = useSettings();\n    const { ShowDeposit } = useModals()\n    const { modals:{isShowAccountInfo,isShowConnect}, setShowConnect, setShowAccountInfo }  = useOpenModals()\n \n    const [openConnect, setOpenConnect] = React.useState(false)\n\n    const forceUpdate = React.useReducer((bool) => !bool, false)[1]\n    const { account } = useAccount()\n\n    const { lock, unlock } = useUnlock()\n\n    const { connect } = useConnect()\n\n    const { etherscanUrl } = useEtherscan()\n\n    const dispatch = useDispatch()\n\n    const gatewayList: GatewayItem[] = [\n        {\n            ...DefaultGatewayList[0],\n            handleSelect: () => {\n                console.log('try to connect to ', ConnectorNames.Injected)\n                connect(ConnectorNames.Injected, true)\n                setShowConnect({isShow: false})\n            }\n        },\n        {\n            ...DefaultGatewayList[1],\n            handleSelect: () => {\n                connect(ConnectorNames.WalletConnect, true)\n                setShowConnect({isShow: false})\n            }\n        },\n        {\n            ...DefaultGatewayList[2],\n            handleSelect: () => {\n                connect(ConnectorNames.Ledger, true)\n                setShowConnect({isShow: false})\n            }\n        },\n        {\n            ...DefaultGatewayList[3],\n            handleSelect: () => {\n                connect(ConnectorNames.Trezor, true)\n                setShowConnect({isShow: false})\n            }\n        },\n    ]\n    // const [showAccountInfo, setShowAccountInfo] = React.useState(account?.accAddr ? true : false)\n    const [accountInfoProps, setAccountInfoProps] = React.useState<undefined|AccountInfoProps>(undefined)\n    //const theme: any = useTheme()\n\n    const onNotification = React.useCallback(async () => {\n        console.log('onNotification click')\n    }, [])\n\n    const onWalletBtnConnect = React.useCallback(async () => {\n        const acc = store.getState().account\n        console.log(`onWalletBtnConnect click: ${acc.status}`)\n\n        switch (acc.status) {\n            case AccountStatus.NOACCOUNT:\n                ShowDeposit(true)\n                break\n            case AccountStatus.UNCONNNECTED:\n                setShowConnect({isShow:true})\n                break\n            case AccountStatus.CONNECTED:\n            case AccountStatus.LOCKED:\n            case AccountStatus.ACTIVATED:\n                setShowAccountInfo({isShow:true})\n                break\n            default:\n                // console.log('setOpenConnect(true)')\n                // setOpenConnect(true)\n                break\n        }\n    }, [setShowConnect, lock, unlock, ShowDeposit, setShowAccountInfo])\n\n    const onThemeBtnClick = React.useCallback(async (themeMode:ThemeKeys) => {\n        if (themeMode === Theme.dark) {\n            setTheme(Theme.light)\n        } else {\n            setTheme(Theme.dark)\n        }\n    }, [setTheme])\n\n    const onLangBtnClick = (lang: LanguageKeys) => {\n        //i18n.changeLanguage(lang);\n        setLanguage(lang);\n    }\n\n\n    useCustomDCEffect(() => {\n\n\n        headerToolBarData[ButtonComponentsMap.WalletConnect] = {\n            ...headerToolBarData[ButtonComponentsMap.WalletConnect],\n            handleClick: onWalletBtnConnect,\n        }\n\n        // headerToolBarData[ButtonComponentsMap.Notification] = { ...headerToolBarData[ButtonComponentsMap.Theme], themeMode: theme.mode, handleClick: onNotification }\n        // headerToolBarData.update(ButtonComponentsMap.WalletConnect,value=>{\n        //   return {...value, handleClick:onWalletBtnConnect}});\n        headerToolBarData[ButtonComponentsMap.Theme] = { ...headerToolBarData[ButtonComponentsMap.Theme], themeMode, handleClick: onThemeBtnClick }\n        // headerToolBarData.update(ButtonComponentsMap.Theme,value=>{\n        //   return {...value, themeMode:theme.mode, handleClick:onThemeBtnClick}});\n\n        headerToolBarData[ButtonComponentsMap.Language] = { ...headerToolBarData[ButtonComponentsMap.Language], handleChange: onLangBtnClick }\n        // headerToolBarData.update(ButtonComponentsMap.Language,value=>{\n        //  return  {...value, language:i18n.language, handleClick:onThemeBtnClick}});\n    }, [themeMode, language, i18n, onWalletBtnConnect, onThemeBtnClick, onLangBtnClick, onNotification, t]);\n\n\n    const UnlockBtn = ({onClick}:{onClick:({...props}:any)=>void})=>{\n        return <Button className={'unlock'}  startIcon={<LockIcon fontSize={'large'}/>}\n                       onClick={(event)=>{\n                           onClick(event)\n                       }} variant={'outlined'} >\n            <Typography variant={'body2'} marginTop={1/2}>   {t('labelUnLock')} </Typography>\n        </Button>\n    }\n    const lockCallback = React.useCallback((event)=>{\n        lock(account)\n    } ,[account])\n    const unLockCallback = React.useCallback((event)=>{\n        unlock(account)\n    } ,[account])\n    const LockBtn = ({onClick}:{onClick:({...props}:any)=>void})=>{\n        return  <Button className={'lock'}  startIcon={<UnLockIcon fontSize={'large'}/>} \n        onClick={(event) => {\n            onClick(event)\n        } } variant={'outlined'} >\n            <Typography variant={'body2'} marginTop={1/2}>  {t('labelLock')} </Typography>\n        </Button>\n    }\n\n\n    useCustomDCEffect(() => {\n\n        if (!account) {\n            console.log('account'+account+'* exit')\n            setAccountInfoProps(undefined)\n            return\n        }\n\n        const { status } = account\n\n        const addr = getShortAddr(account?.accAddr)\n\n\n\n        // if((addr && accountInfoProps && accountInfoProps.address !== addr) || addr ){\n        //     //TODO getAccount detail info\n        //\n        // }else if(addr) {\n        //     setAccountInfoProps(undefined)\n        // }\n\n        const updateHeaderMenuWhenHasAccountInfo =  ({status}:{status:keyof  typeof AccountStatus})=>{\n            headerMenuData[HeadMenuTabKey.Layer2] = {\n                ...headerMenuData[HeadMenuTabKey.Layer2],\n                status: HeaderMenuTabStatus.default\n            }\n            let props;\n            if(status === AccountStatus.ACTIVATED) {\n                props = {\n                    addressShort: addr?addr:'',\n                    address: account?.accAddr,\n                    level: 'VIP 1',\n                    etherscanLink: etherscanUrl + account?.accAddr,\n                    //TODO: changed by account status\n                    mainBtn: <LockBtn onClick={(_event)=>{lockCallback(_event)}}/>,\n                    connectBy:''\n                }\n                setShowAccountInfo({isShow:false})\n            }else if(status === AccountStatus.LOCKED) {\n                props = {\n                    addressShort: addr?addr:'',\n                    address: account?.accAddr,\n                    level: 'VIP 1',\n                    etherscanLink: etherscanUrl + account?.accAddr,\n                    //TODO: changed by account status\n                    mainBtn: <UnlockBtn onClick={(_event)=>{unLockCallback(_event)}}/>,\n                    connectBy:''\n                }\n                setShowAccountInfo({isShow:true})\n            }else if(status === AccountStatus.UNACTIVATED\n                || status === AccountStatus.NOACCOUNT\n                || status === AccountStatus.DEPOSITING\n                || status === AccountStatus.DEPOSIT_TO_CONFIREM\n                || status === AccountStatus.ARPROVING\n                || status === AccountStatus.APPROV_TO_CONFIRM\n            )  {\n                props = {\n                    addressShort: addr?addr:'',\n                    address: account?.accAddr,\n                    //TODO: level\n                    level: 'VIP 1',\n                    etherscanLink: etherscanUrl + account?.accAddr,\n                    //TODO: changed by account status\n                    connectBy:''\n                }\n                setShowAccountInfo({isShow:false});\n\n            } else  {\n                setShowAccountInfo({isShow:false})\n            }\n\n\n            setAccountInfoProps(props)\n            // setShowAccountInfo(true);\n        }\n        switch (status) {\n            case AccountStatus.UNCONNNECTED:\n                headerToolBarData[ButtonComponentsMap.WalletConnect] = {\n                    ...headerToolBarData[ButtonComponentsMap.WalletConnect],\n                    label: 'Connect Wallet',\n                    status: WalletStatus.default\n                }\n                headerMenuData[HeadMenuTabKey.Layer2] = {\n                    //TODO:  HeaderMenuTabStatus.hidden\n                    ...headerMenuData[HeadMenuTabKey.Layer2], status: HeaderMenuTabStatus.hidden\n                }\n                setShowAccountInfo({isShow:false})\n                break\n            case AccountStatus.LOCKED:\n                headerToolBarData[ButtonComponentsMap.WalletConnect] = {\n                    ...headerToolBarData[ButtonComponentsMap.WalletConnect],\n                    label: addr,\n                    status: WalletStatus.connect\n                };\n\n                updateHeaderMenuWhenHasAccountInfo({status});\n                break\n            case AccountStatus.ACTIVATED:\n                headerToolBarData[ButtonComponentsMap.WalletConnect] = {\n                    ...headerToolBarData[ButtonComponentsMap.WalletConnect],\n                    label: addr,\n                    status: WalletStatus.unlock\n                }\n\n                updateHeaderMenuWhenHasAccountInfo({status});\n                break\n            case AccountStatus.UNACTIVATED:\n            case AccountStatus.NOACCOUNT:\n                headerToolBarData[ButtonComponentsMap.WalletConnect] = {\n                    ...headerToolBarData[ButtonComponentsMap.WalletConnect],\n                    // TODO got cache address if no show Connect Wallet\n                    label: addr,\n                    status: WalletStatus.noAccount\n                }\n\n                updateHeaderMenuWhenHasAccountInfo({status});\n                break\n            case AccountStatus.DEPOSITING:\n            case AccountStatus.DEPOSIT_TO_CONFIREM:\n            case AccountStatus.ARPROVING:\n            case AccountStatus.APPROV_TO_CONFIRM:\n                headerToolBarData[ButtonComponentsMap.WalletConnect] = {\n                    ...headerToolBarData[ButtonComponentsMap.WalletConnect],\n                    label: addr,\n                    status: WalletStatus.accountPending\n                }\n                updateHeaderMenuWhenHasAccountInfo({status});\n\n                break\n        }\n        forceUpdate()\n    }, [account, etherscanUrl, setAccountInfoProps])\n\n    return {\n        headerToolBarData,\n        headerMenuData,\n        gatewayList,\n        isShowConnect,\n        isShowAccountInfo,\n        setShowAccountInfo,\n        setShowConnect,\n        // open,\n        // setOpen,\n        // openConnect,\n        // setOpenConnect,\n        account,\n        accountInfoProps,\n\n    }\n\n}\n\nexport function useChargeFeeList(tokenSymbol: string | undefined, requestType: OffchainFeeReqType, \n    tokenMap: LoopringMap<TokenInfo> | undefined) {\n\n    const api = useUserAPI()\n\n    const {accountId, apiKey,} = useAccount()\n\n    const [chargeFeeList, setChargeFeeList] = useState<any>([])\n\n    useCustomDCEffect(async () => {\n\n        console.log('!!!!!!!!!useCustomDCEffect useChargeFeeList:', tokenSymbol, accountId)\n\n        if (!accountId || !tokenSymbol || !tokenMap) {\n            return\n        }\n\n        let chargeFeeList: any[] = []\n\n        try {\n\n            const request: GetOffchainFeeAmtRequest = {\n                accountId,\n                tokenSymbol,\n                requestType,\n            }\n\n            const response = await api.getOffchainFeeAmt(request, apiKey)\n\n            if (response) {\n                response.raw_data.fees.forEach((item: any, index: number) => {\n                    const tokenInfo = tokenMap[item.token]\n                    const fee = sdk.toBig(item.fee).div(BIG10.pow(sdk.toBig(tokenInfo.decimals))).toNumber() \n                    chargeFeeList.push({belong: item.token, fee, })\n                })\n\n                setChargeFeeList(chargeFeeList)\n            }\n            console.log('response:', response)\n\n        } catch (reason) {\n            dumpError400(reason)\n        }\n\n\n        setChargeFeeList(chargeFeeList)\n\n    }, [accountId, apiKey, tokenSymbol, tokenMap])\n\n    return {\n        chargeFeeList,\n    }\n\n}\n\nexport function useModalProps() {\n\n    const {\n        ShowDeposit,\n        ShowTransfer,\n        ShowWithdraw,\n        ShowResetAccount,\n    } = useModals()\n\n    const {chainId, isConnected, connector,} = useWeb3Account()\n\n    const {exchangeInfo} = useGetExchangeInfo()\n\n    const {account, apiKey, accountId, eddsaKey,} = useAccount()\n    \n    const {coinMap, tokenMap, marketArray, marketCoins, marketMap, } = useTokenMap()\n\n    const walletLayer2State = useWalletLayer2();\n    const walletLayer1State = useWalletLayer1();\n    const [walletMap1, setWalletMap1] = useState<WalletMap<any>|undefined>(undefined);\n    const [walletMap2, setWalletMap2] = useState<WalletMap<any>|undefined>(undefined);\n    //HIGH: effect by wallet state update\n    React.useEffect(() => {\n        if(walletLayer2State.walletLayer2){\n            let {walletMap} =  makeWallet();\n            setWalletMap1(walletMap)\n        }\n        if(walletLayer1State.walletLayer1){\n            // let {walletMap} =  makeWalletLayer1();\n            setWalletMap1(walletLayer1State.walletLayer1)\n        }\n    }, [])\n    React.useEffect(() => {\n        switch (walletLayer2State.status) {\n            case \"ERROR\":\n                walletLayer2State.statusUnset();\n                // setState('ERROR')\n                //TODO: show error at button page show error  some retry dispath again\n                break;\n            case \"DONE\":\n                walletLayer2State.statusUnset();\n                let {walletMap} =  makeWallet();\n                setWalletMap2(walletMap)\n                break;\n            default:\n                break;\n\n        }\n    }, [walletLayer2State.status])\n    React.useEffect(() => {\n        switch (walletLayer1State.status) {\n            case \"ERROR\":\n                walletLayer1State.statusUnset();\n                // setState('ERROR')\n                //TODO: show error at button page show error  some retry dispath again\n                break;\n            case \"DONE\":\n                walletLayer1State.statusUnset();\n                // let {walletMap} =  makeWalletLayer1();\n                setWalletMap1(walletLayer1State.walletLayer1);\n                // debugger\n                break;\n            default:\n                break;\n\n        }\n    }, [walletLayer1State.status])\n\n    const deposit = useCallback(async (token: string, amt: any) => {\n\n        if (!LoopringAPI.exchangeAPI || !tokenMap || !isConnected || !connector || !exchangeInfo?.exchangeAddress || !exchangeInfo?.depositAddress) {\n            console.log(`exchangeInfo:${exchangeInfo} deposit exit!!!!!`)\n            return\n        }\n\n        try {\n            const tokenInfo: TokenInfo = tokenMap[ token ]\n\n            const provider = await connector.getProvider()\n            const web3 = new Web3(provider as any)\n\n            let sendByMetaMask = account.connectName === ConnectorNames.Injected\n            sendByMetaMask = true\n\n            const gasPrice = (await LoopringAPI.exchangeAPI.getGasPrice()).gasPrice / 1e+9\n            const gasLimit = 350000\n\n            const nonce = await sdk.getNonce(web3, account.accAddr)\n\n            console.log('gasPrice:', gasPrice)\n            console.log('account.connectName:', account.connectName, ' tokenInfo:', tokenInfo)\n\n            const response = await sdk.approveMax(web3, account.accAddr, tokenInfo.address,\n                exchangeInfo?.depositAddress, gasPrice, gasLimit, chainId, nonce, sendByMetaMask)\n\n            console.log('response:', response)\n\n            const fee = 0\n\n            const response2 = await sdk.deposit(web3, account.accAddr,\n                exchangeInfo?.exchangeAddress, tokenInfo, amt, fee,\n                gasPrice, gasLimit, chainId, nonce + 1, sendByMetaMask)\n\n            console.log('response2:', response2)\n\n\n        } catch (reason) {\n            dumpError400(reason)\n        }\n\n    }, [chainId, isConnected, connector, account, tokenMap, exchangeInfo, LoopringAPI.exchangeAPI])\n\n    const withdraw = useCallback(async (token: string, amt: any) => {\n\n        console.log('withdraw apiKey:', apiKey, ' exchangeInfo:', exchangeInfo, ' exchangeAddr:', exchangeInfo.exchangeAddress)\n\n        if (!LoopringAPI.userAPI || !account || !account.accountId || !account.accAddr\n            || !connector || !chainId || !apiKey || !exchangeInfo\n            || !exchangeInfo.exchangeAddress) {\n            console.log('return directly!!!!!', account, connector, chainId, apiKey, exchangeInfo)\n            return\n        }\n\n        amt = '5500000000000000000'\n\n        const fee = '5500000000000000000'\n\n        console.log('exchangeAddress:', exchangeInfo.exchangeAddress)\n\n        try {\n\n            const request: GetNextStorageIdRequest = {\n                accountId: account.accountId,\n                sellTokenId: 1\n            }\n\n            const storageId = await LoopringAPI.userAPI.getNextStorageId(request, apiKey)\n\n            const request2: OffChainWithdrawalRequestV3 = {\n                exchange: exchangeInfo.exchangeAddress,\n                owner: account.accAddr,\n                to: account.accAddr,\n                accountId: account.accountId,\n                storageId: storageId.offchainId,\n                token: {\n                    tokenId: '1',\n                    volume: '100000000000000000000',\n                },\n                maxFee: {\n                    tokenId: '1',\n                    volume: '9400000000000000000',\n                },\n                extraData: '',\n                minGas: 0,\n                validUntil: VALID_UNTIL,\n            }\n\n            const provider = await connector.getProvider()\n            const web3 = new Web3(provider as any)\n\n            const response = await LoopringAPI.userAPI.submitOffchainWithdraw(request2, web3, chainId, ConnectorNames.Injected,\n                account.eddsaKey, apiKey, false)\n\n            console.log(response)\n\n        } catch (reason) {\n            dumpError400(reason)\n        }\n\n    }, [apiKey, account, connector, exchangeInfo, chainId, LoopringAPI.userAPI])\n\n    const transfer = useCallback(async (amt: number, payeeAddr: string = '0xb6AdaC3e924B4985Ad74646FEa3610f14cDFB79c') => {\n\n        if (!LoopringAPI.userAPI || !LoopringAPI.exchangeAPI || !connector || !apiKey || !chainId || !accountId || !account?.accAddr) {\n            return\n        }\n\n        const request: GetNextStorageIdRequest = {\n            accountId,\n            sellTokenId: 1\n        }\n        const storageId = await LoopringAPI.userAPI.getNextStorageId(request, apiKey)\n\n        console.log(`amt: ${amt} storageId:${JSON.stringify(storageId)}`)\n\n        try {\n\n            const provider = await connector.getProvider()\n            const web3 = new Web3(provider as any)\n\n            let walletType = account.connectName\n            walletType = ConnectorNames.Injected\n\n            const payeeAcc = await LoopringAPI.exchangeAPI.getAccount({owner: payeeAddr})\n\n            let payeeId = 0\n            if (payeeAcc) {\n                payeeId = payeeAcc.accInfo.accountId\n            }\n\n            const request2: OriginTransferRequestV3 = {\n                exchange: exchangeInfo.exchangeAddress,\n                payerAddr: account.accAddr,\n                payerId: accountId,\n                payeeAddr,\n                payeeId,\n                storageId: storageId.offchainId,\n                token: {\n                    tokenId: '1',\n                    volume: '100000000000000000000',\n                },\n                maxFee: {\n                    tokenId: '1',\n                    volume: '9400000000000000000',\n                },\n                validUntil: VALID_UNTIL,\n            }\n\n            console.log(`request2:${JSON.stringify(request2)}`)\n\n            const response = await LoopringAPI.userAPI.submitInternalTransfer(request2, web3, chainId, walletType,\n                eddsaKey, apiKey, false)\n\n            console.log(response)\n\n        } catch (reason) {\n            dumpError400(reason)\n        }\n\n    }, [apiKey, accountId, account, connector, exchangeInfo, chainId, eddsaKey, LoopringAPI.userAPI, LoopringAPI.exchangeAPI])\n\n    const [depositValue, setDepositValue] = useState<IBData<any>>({\n        belong: undefined,\n        tradeValue: 0,\n        balance: 0\n    } as IBData<unknown>)\n\n    // deposit\n\n    let depositProps: DepositProps<any, any> = {\n        tradeData: {belong: undefined},\n        coinMap: coinMap,\n        walletMap: walletMap1,\n        depositBtnStatus: TradeBtnStatus.AVAILABLE,\n        onDepositClick: (tradeData: any) => {\n            console.log('1. onDepositClick', depositValue)\n            if (depositValue && depositValue.belong) {\n                deposit(depositValue.belong.toString(), depositValue.tradeValue)\n            }\n            ShowDeposit(false)\n        },\n        handlePanelEvent: async (data: SwitchData<any>, switchType: 'Tomenu' | 'Tobutton') => {\n            return new Promise((res) => {\n                if (data?.tradeData?.belong) {\n                    if (depositValue !== data.tradeData) {\n                        setDepositValue(data.tradeData)\n                    }\n                    setTokenSymbol(data.tradeData.belong)\n                } else {\n                    setDepositValue({belong: undefined, tradeValue: 0, balance: 0} as IBData<unknown>)\n                }\n                res();\n            })\n        },\n    }\n\n    // withdraw\n    const [withdrawValue, setWithdrawValue] = useState<IBData<any>>({\n        belong: undefined,\n        tradeValue: 0,\n        balance: 0\n    } as IBData<unknown>);\n\n    const [tokenSymbol, setTokenSymbol] = useState<string>('')\n    const [withdrawType, setWithdrawType] = useState<WithdrawType>(WithdrawType.Standard)\n    const {chargeFeeList: withdrawalFeeList} = useChargeFeeList(tokenSymbol, OffchainFeeReqType.OFFCHAIN_WITHDRAWAL, tokenMap)\n\n    let withdrawProps: WithdrawProps<any, any> = {\n        tradeData: {belong: undefined},\n        coinMap: coinMap,\n        walletMap: walletMap2,\n        withdrawBtnStatus: TradeBtnStatus.AVAILABLE,\n        onWithdrawClick: (tradeData: any) => {\n            console.log('Swap button click', withdrawValue)\n            if (withdrawValue && withdrawValue.belong) {\n                withdraw(withdrawValue.belong.toString(), withdrawValue.tradeValue)\n            }\n            ShowWithdraw(false)\n        },\n\n        handlePanelEvent: async (data: SwitchData<any>, switchType: 'Tomenu' | 'Tobutton') => {\n            console.log('withdrawProps handlePanelEvent: ', data, switchType)\n            console.log('withdrawProps withdrawValue: ', withdrawValue)\n            return new Promise((res: any) => {\n                if (data?.tradeData?.belong) {\n                    if (withdrawValue !== data.tradeData) {\n                        setWithdrawValue(data.tradeData)\n                    }\n                    setTokenSymbol(data.tradeData.belong)\n                } else {\n                    setWithdrawValue({belong: undefined, tradeValue: 0, balance: 0} as IBData<unknown>);\n                }\n                res();\n            })\n        },\n        withdrawType,\n        withdrawTypes: WithdrawTypes,\n        chargeFeeToken: 'ETH',\n        chargeFeeTokenList: withdrawalFeeList,\n        handleOnAddressChange: (value: any) => {\n            console.log('handleOnAddressChange', value);\n        },\n        handleAddressError: (_value: any) => {\n            return {error: true, message: 'any error'}\n        }\n    }\n    // console.log(coinMap)\n    // transfer\n    const [transferValue, setTransferValue] = useState<IBData<any>>({\n        belong: undefined,\n        tradeValue: 0,\n        balance: 0\n    } as IBData<unknown>)\n\n    const [transferTokenSymbol, setTransferTokenSymbol] = useState<string>('')\n    const {chargeFeeList: transferFeeList} = useChargeFeeList(transferTokenSymbol, OffchainFeeReqType.TRANSFER, tokenMap)\n\n    let transferProps: TransferProps<any, any> = {\n        tradeData: {belong: undefined},\n        coinMap: coinMap,\n        walletMap: walletMap2,\n        transferBtnStatus: TradeBtnStatus.AVAILABLE,\n        onTransferClick: (tradeData: any) => {\n            console.log('onTransferClick:', transferValue);\n            if (transferValue && transferValue.belong) {\n                transfer(transferValue.tradeValue)\n            }\n\n            ShowTransfer(false)\n        },\n\n        handlePanelEvent: async (data: SwitchData<any>, switchType: 'Tomenu' | 'Tobutton') => {\n            return new Promise((res: any) => {\n                if (data?.tradeData?.belong) {\n                    if (transferValue !== data.tradeData) {\n                        setTransferValue(data.tradeData)\n                    }\n                    setTransferTokenSymbol(data.tradeData.belong)\n                } else {\n                    setTransferValue({belong: undefined, tradeValue: 0, balance: 0} as IBData<unknown>)\n                }\n                // else{\n                //     setTransferValue({ belong: undefined, amt: 0 })\n                // }\n\n                res();\n            })\n        },\n\n        chargeFeeToken: 'ETH',\n        chargeFeeTokenList: transferFeeList,\n        handleOnAddressChange: (value: any) => {\n            console.log('handleOnAddressChange', value);\n        },\n        handleAddressError: (_value: any) => {\n            return {error: true, message: 'any error'}\n        }\n    }\n\n    // reset\n    const [resetValue, setResetValue] = useState<IBData<any>>({\n        belong: undefined,\n        tradeValue: 0,\n        balance: 0\n    } as IBData<unknown>)\n\n\n    let resetProps: ResetProps<any, any> = {\n        tradeData: {belong: undefined},\n        coinMap: coinMap,\n        walletMap: walletMap2,\n        resetBtnStatus: TradeBtnStatus.AVAILABLE,\n        onResetClick: (tradeData: any) => {\n            console.log('onResetClick', resetValue)\n            if (resetValue && resetValue.belong) {\n            }\n\n            ShowResetAccount(false)\n        },\n        handlePanelEvent: async (data: SwitchData<any>, switchType: 'Tomenu' | 'Tobutton') => {\n            return new Promise((res) => {\n                if (data?.tradeData?.belong) {\n                    if (resetValue !== data.tradeData) {\n                        setResetValue(data.tradeData)\n                    }\n                } else {\n                    setResetValue({belong: undefined, tradeValue: 0, balance: 0} as IBData<unknown>)\n                }\n\n                res();\n            })\n        },\n        fee: {count: 234, price: 123}\n    }\n\n     const tradeCalcData: TradeCalcData<CoinType> = {\n        coinSell: 'ETH', //name\n        coinBuy: 'LRC',\n        BtoS: 0,\n        StoB: 0,\n        sellCoinInfoMap: coinMap,\n        buyCoinInfoMap: coinMap,\n        walletMap: {},\n        slippage: 0.5,\n        // slippageTolerance: [0.1, 0.5, 1, 'slippage:N'],\n        priceImpact: '12',\n        minimumReceived: '1%',\n        fee: '1%'\n    }\n     const ammCalcData: AmmInData<{[key: string]: any}> = {\n        myCoinA: {belong:'ETH',balance:1000,tradeValue:0},\n        myCoinB: {belong:'LRC',balance:1000,tradeValue:0},\n        AtoB:50,\n        coinInfoMap: coinMap as any,\n        slippage: 0.5,\n        // slippageTolerance: [0.1, 0.5, 1, 'slippage:N'],\n        fee: '1%'\n    }\n\n\n    let swapProps: SwapProps<IBData<string>, string, any> = {\n        tradeData: undefined,\n        tradeCalcData,\n        onSwapClick: (tradeData) => {\n            console.log('Swap button click', tradeData);\n        },\n        handleSwapPanelEvent: async (data: any, switchType: any) => {\n            console.log(data, switchType)\n        },\n    };\n    let ammProps: AmmProps<AmmData<IBData<any>>, any, AmmInData<any>> = {\n        ammDepositData:{coinA: {belong: 'ETH',balance:0.3,tradeValue:0}, coinB:  {belong: 'LRC',balance:1000,tradeValue:0},slippage: '',},\n        ammWithdrawData:{coinA: {belong: 'ETH',balance:0.3,tradeValue:0}, coinB:  {belong: 'LRC',balance:1000,tradeValue:0},slippage: '',},\n        // tradeCalcData,\n        ammCalcData:ammCalcData,\n        handleDepositEvent: (data,type) => {\n            console.log('handleDepositEvent',data,type) ;\n        },\n        handleWithDrawEvent:  (data,type) => {\n            console.log('handleWithDrawEvent',data,type) ;\n        },\n        onAmmWithdrawClick: (data)=>{\n            console.log('onAmmWithdrawClick',data) ;\n        },\n        onAmmDepositClick: (data)=>{\n            console.log('onAmmDepositClick',data) ;\n        }\n    }\n\n    return {\n        depositProps, withdrawProps, transferProps, resetProps, ammProps, swapProps,\n    }\n}\n","import { WithTranslation, withTranslation } from 'react-i18next';\nimport { Box, Modal } from '@material-ui/core';\nimport { ModalCloseButton, ModalContentStyled, ModalQRCode } from '@loopring-web/component-lib';\nimport React from 'react';\nimport { AccountInfo, AccountInfoProps } from '@loopring-web/component-lib';\n\nexport const ModalAccountInfo = withTranslation('common')(({\n                                                               onClose,\n                                                               open,\n                                                               t,\n                                                               ...rest\n                                                           }: { open:boolean, onClose:(e:any)=>void} & AccountInfoProps & WithTranslation) => {\n\n\n    return <Modal\n        open={open}\n        onClose={onClose}\n        aria-labelledby=\"Account information\"\n        aria-describedby=\"show layer2 address, unlock/locked loopring wallet, copy address\"\n    >\n        <ModalContentStyled style={{boxShadow: '24'}}>\n            <Box paddingTop={3} paddingBottom={3} display={'flex'} flexDirection={'column'} minWidth='var(--modal-width)'>\n                <ModalCloseButton onClose={onClose} {...{...rest, t}} />\n                <AccountInfo {...rest}/>\n            </Box>\n\n        </ModalContentStyled>\n    </Modal>\n})","import React, { useCallback, useState, } from 'react'\n\nimport {\n    Header as HeaderUI,\n    HideOnScroll,\n    ModalWalletConnect,\n    AccountInfo,\n    ModalCloseButton,\n} from '@loopring-web/component-lib'\n\nimport { headerRoot } from '@loopring-web/component-lib/src/static-resource'\n\nimport { useLocation } from 'react-router-dom'\n\nimport { Toolbar, Snackbar, Alert, } from '@material-ui/core'\n\nimport { useHeader } from './hook'\n\nimport { useDisconnect, } from 'stores/account/hook'\nimport { ModalPanel, ModalQRCode, } from '@loopring-web/component-lib';\nimport { useGetExchangeInfo } from 'hooks/exchange/useExchangeAPI'\nimport { useModalProps } from './hook'\n\nimport { copyToClipBoard } from 'utils/obj_tools'\nimport { ModalAccountInfo } from '../../pages/AccountPage';\nimport { useTranslation } from 'react-i18next';\n\nconst Header = ({ ...rest }: any) => {\n\n    const {\n        depositProps,\n        withdrawProps,\n        transferProps,\n        resetProps,\n        ammProps,\n        swapProps,\n    } = useModalProps()\n\n    const location = useLocation()\n\n    const {\n        headerToolBarData,\n        headerMenuData,\n        gatewayList,\n        isShowConnect,\n        isShowAccountInfo,\n        setShowAccountInfo,\n        // setShowAccountInfo,\n        setShowConnect,\n        // open,\n        // setOpen,\n        // openConnect,\n        // setOpenConnect,\n        account,\n        accountInfoProps,\n        // showAccountInfo\n    } = useHeader()\n\n    const { exchangeInfo } = useGetExchangeInfo()\n\n    const { disconnect } = useDisconnect()\n\n    const onSwitch = useCallback(() => {\n        setShowAccountInfo({isShow:false})\n        setShowConnect({isShow:true})\n    }, [setShowConnect,setShowAccountInfo])\n\n    const [openQRCode, setOpenQRCode] = useState(false)\n\n    const [copyToastOpen, setCopyToastOpen] = useState(false);\n    const {t} = useTranslation('commom')\n\n    const closeCopyToast = () => { setCopyToastOpen(false) }\n\n    return (<>\n        <Snackbar open={copyToastOpen} autoHideDuration={2500} onClose={closeCopyToast}>\n            <Alert onClose={closeCopyToast} severity=\"success\">\n                {t('Address Copied to Clipboard!')}\n        </Alert>\n        </Snackbar>\n\n        <ModalQRCode open={openQRCode} onClose={() => setOpenQRCode(false)} title={'ETH Address'}\n            description={account.accAddr} url={account.accAddr} />\n\n        <ModalPanel transferProps={transferProps} withDrawProps={withdrawProps} \n        depositProps={depositProps} resetProps={resetProps} ammProps={ammProps} swapProps={swapProps}/>\n\n        <HideOnScroll>\n            {process.env.NODE_ENV !== 'production' && JSON.stringify(account?.status)}\n            {process.env.NODE_ENV !== 'production' && ' exchangeAddress:' + JSON.stringify(exchangeInfo?.exchangeAddress)}\n\n            <HeaderUI {...rest} headerMenuData={headerMenuData} headerToolBarData={headerToolBarData}\n                selected={location.pathname === '/' ? headerRoot : location.pathname}></HeaderUI>\n\n        </HideOnScroll>\n        <Toolbar />\n\n        <ModalWalletConnect {...{ ...rest, gatewayList, open:isShowConnect.isShow, onClose: () => setShowConnect({isShow:false}) }} />\n        {<ModalAccountInfo\n            open={isShowAccountInfo.isShow}\n            onClose={() => {setShowAccountInfo({isShow:false})}}\n            onCopy={() => {\n                copyToClipBoard(account.accAddr);\n                setCopyToastOpen(true)\n            }}\n            onViewQRCode={() => {\n                setOpenQRCode(true)\n            }}\n            onDisconnect={() => {\n                disconnect();\n                setShowAccountInfo({isShow:false});\n            }}\n            onSwitch={onSwitch}\n            {...{...accountInfoProps, ...rest}}></ModalAccountInfo>}\n    </>)\n}\n\n\nexport default Header\n\n\n\n","import React from \"react\"\nimport store from '../../stores';\nimport { TickerMap, useTicker } from '../../stores/ticker';\nimport {\n    QuoteTableProps,\n    QuoteTableRawDataItem,\n    MarketBlockProps,\n} from '@loopring-web/component-lib';\nimport { deepClone } from '../../utils/obj_tools';\n\nconst amtCol = 5\nconst OnePageSize = 16;\n// const recommendMarkets = ['LRC-ETH','ETH-USDT','ETH-USDC','LRC-USDT'];\n\nfunction isAtBottom(event: React.UIEvent<HTMLDivElement>,to:number, marketArrayLength:number, pageSize:number = OnePageSize ): boolean {\n    const target = event.target as HTMLDivElement;\n    //TODO 2 times height for scrollHeight  to - 16 - 4  calculator scroll  超过 20 个刷第二屏幕 。。。。超过 36 个刷下个一个屏幕 第一屏幕是 16+4+16\n     if( target.clientHeight + target.scrollTop === target.scrollHeight &&  to*pageSize >= marketArrayLength) {\n         return  true\n     }else{\n         return false;\n     }\n}\n\nexport function useQuote<C extends { [ key: string ]:string }>() {\n\n\n    const {\n        tickerMap,\n        status: tickerStatus,\n        // errorMessage: errorTickerMap,\n        statusUnset: tickerStatusUnset,\n        updateTickers,\n    } = useTicker();\n    const {marketArray,coinMap} = store.getState().tokenMap;\n    const recommendMarkets =  marketArray?marketArray.slice(0,4): ['LRC-ETH','LRC-ETH','LRC-ETH','LRC-ETH']\n    const _marketArrayWithOutRecommend = marketArray? marketArray.filter(item=>recommendMarkets.findIndex(m=>m===item) === -1):[];\n\n\n    const [tickList, setTickList] = React.useState<any>([]);\n    const [recommendations,setRecommendations]  = React.useState<MarketBlockProps<C>[]>([]);\n    const [tickerKeys, setTickerKeys] = React.useState<string[]>([]);\n    const [focusRowFrom,setFocusRowFrom] = React.useState<[start:number,end:number]>([0,2]);\n\n    const getTicker = React.useCallback((from:number,to:number)=>{\n        if(_marketArrayWithOutRecommend){\n\n            let array =  _marketArrayWithOutRecommend.slice(from*OnePageSize,to*OnePageSize);\n            const keys = array.slice(0,OnePageSize)\n            setTickerKeys(keys);\n            setFocusRowFrom([from,to])\n\n            //High: add recommendations market first time is 36个数据\n            if(from === 0){\n                array =  recommendMarkets.concat(array)\n            }\n            updateTickers(array);\n\n\n            //LoopringAPI.exchangeAPI?.getMixTicker()\n        }\n\n\n    },[marketArray,OnePageSize,recommendMarkets])\n    // setRecommendations(0)\n    // const [big4, setBig4] = useState<any>([])\n    React.useEffect(() => {\n        const [from,to] = focusRowFrom\n        getTicker(from,to);\n\n    }, []);\n    React.useEffect(() => {\n        switch (tickerStatus) {\n            case \"ERROR\":\n                console.log(\"ERROR\", 'get ticker error,ui');\n                tickerStatusUnset()\n                break;\n            case \"PENDING\":\n                break;\n            case \"DONE\":\n                tickerStatusUnset();\n                \n                updateRawData(tickerMap as TickerMap<C>)\n                break;\n            default:\n                break;\n        }\n    }, [tickerStatus, tickerStatusUnset]);\n\n    const updateRawData = React.useCallback((tickerMap:TickerMap<C>)=>{\n        let _recommendationsFloat:QuoteTableRawDataItem[] = [];\n        const _tickList = Reflect.ownKeys(tickerMap).reduce((prev,key)=>{\n            // @ts-ignore\n            const [,coinA,coinB] =  key.match(/(\\w+)-(\\w+)/i);\n            let _item = {\n                ...tickerMap[key as string],\n                pair: {\n                   coinA,\n                   coinB,\n                },\n            } as QuoteTableRawDataItem;\n\n\n            // open: number,\n            //     high: number,\n            //     low: number,\n            //     close: number,\n            //     change: number,\n            if(recommendMarkets.findIndex(m=>m===key) !== -1) {\n                _recommendationsFloat.push(deepClone(_item))\n            }\n            prev.push(_item);\n            return prev\n        },[] as QuoteTableRawDataItem[])\n        setTickList([...tickList,..._tickList])\n        //setTickList\n        if(focusRowFrom[0] === 0 && _recommendationsFloat.length > 0){\n            //TODO : fix in uat env not enough pair_recommendations\n            while(_recommendationsFloat.length<4) {\n                _recommendationsFloat.push(deepClone(_recommendationsFloat[0]));\n            }\n\n            const _recommendations = _recommendationsFloat.reduce((prev,item)=>{\n                if(coinMap){\n                    const {coinA,coinB} = item.pair;\n\n                    const _item: MarketBlockProps<C> = {\n                        tradeFloat: item,\n                        // @ts-ignore\n                        coinAInfo: coinMap[coinA],\n                        // @ts-ignore\n                        coinBInfo: coinMap[coinB]\n                    } as MarketBlockProps<C>\n                    prev.push(_item)\n                }\n                return prev\n            },[] as MarketBlockProps<C>[])\n\n            setRecommendations(_recommendations)\n        }\n    },[tickList,focusRowFrom])\n\n    const handleScroll = React.useCallback( async(event)=>{\n        //TODO isBottom and is On prev tickerCall\n       if (!isAtBottom(event,focusRowFrom[1],_marketArrayWithOutRecommend.length,OnePageSize)\n           && tickerStatus !== 'PENDING'){\n           \n       }\n\n    },[focusRowFrom,OnePageSize,tickerStatus])\n\n    return {\n        tickList,\n        recommendations,\n        handleScroll,\n    }\n\n}\n","import styled from '@emotion/styled/macro'\n\nimport { MarketBlock, QuoteTable, TablePaddingX } from '@loopring-web/component-lib'\n\nimport { WithTranslation, withTranslation } from 'react-i18next'\nimport { FloatTag } from '@loopring-web/component-lib/src/static-resource'\nimport { Box, Grid } from '@material-ui/core'\nimport { useQuote } from './hook'\n\nconst  RowStyled = styled(Grid)`\n      & .MuiGrid-root:not(:last-of-type) > div{\n        margin-right: ${({theme}) => theme.unit * 3}px;\n      }\n` as typeof Grid\nconst  TableWrapStyled = styled(Grid)`\n  &{\n    background-color: ${({theme}) => theme.colorBase.background().default};\n    ${({theme}) => theme.border.defaultFrame({c_key: 'blur', d_R: 1})};\n    .rdg{\n      height: 100%;\n    }\n  }\n  ${({theme}) => TablePaddingX({pLeft:theme.unit * 3,pRight:theme.unit * 3})}\n` as typeof Grid\n\nconst QuotePage = withTranslation('common')((rest: WithTranslation) => {\n\n    const { recommendations, handleScroll,tickList } = useQuote()\n\n    // const formattedRawData = tickList.map((o: any) => ({\n    //     pair: !!o[0].length ? {\n    //         first: o[0][0],\n    //         last: o[0][1]\n    //     }: {\n    //         first: '--',\n    //         last: '--'\n    //     },\n    //     lastPrice: Number.isFinite(o[2]) ? o[2] : '--',\n    //     change: Number.isFinite(o[3]) ? o[3] : '--',\n    //     high: Number.isFinite(o[4]) ? o[4] : '--',\n    //     low: Number.isFinite(o[5]) ? o[5] : '--',\n    //     volumn: Number.isFinite(o[6]) ? o[6] : '--'\n    // }))\n    \n    // let props: any = {\n    //     ...rest,\n    //     buyData: coinMap.ETH,\n    //     sellData: coinMap.LRC,\n    //     tradeFloat: {priceDollar: +123, priceYuan: 2343232, percent: '+15%', timeUnit: \"24h\",\n    //         volume: 112312312,\n    //         floatTag:FloatTag.increase},\n    //\n    // }\n\n    const onVisibleRowsChange=(data: any) => {\n        console.log(data)\n    }\n\n    return <Box display={'flex'} flexDirection={'column'} flex={1} height={770}>\n\n        <RowStyled container >\n            {/*<Grid item xs={3} >*/}\n            {/*    <MarketBlock {...{...props,tradeFloat: {priceDollar: 123,priceYuan: 2343232, percent: '0%', timeUnit: \"24h\",floatTag:FloatTag.none}}} />*/}\n            {/*</Grid>*/}\n            {/*<Grid item xs={3} >*/}\n            {/*    <MarketBlock {...{...props,tradeFloat: {priceDollar: 123,priceYuan: 2343232, percent: '-15%', timeUnit: \"24h\",floatTag:FloatTag.decrease}}} />*/}\n            {/*</Grid>*/}\n            {/*<Grid item xs={3} >*/}\n            {/*    <MarketBlock {...{...props}}></MarketBlock>*/}\n            {/*</Grid>*/}\n\n\n            {recommendations.map((item,index)=> <Grid key={item.coinAInfo+item.coinBInfo+index} item xs={3} >\n                    <MarketBlock {...{...item, ...rest}}></MarketBlock>\n                </Grid>\n            )}\n\n\n\n        </RowStyled>\n        <TableWrapStyled container marginY={3} paddingY={2} flex={1}>\n            <Grid item xs={12} display={'flex'}>\n                <QuoteTable onVisibleRowsChange={onVisibleRowsChange}  rawData={tickList} {...{ ...rest }} />\n            </Grid>\n        </TableWrapStyled>\n    </Box>\n\n\n})\n\nexport default QuotePage\n","import { useCallback, useState } from 'react'\n\nimport { useExchangeAPI } from 'hooks/exchange/useApi'\nimport { useCustomDCEffect } from 'hooks/common/useCustomDCEffect'\n\nimport { TradingInterval, Candlestick, GetCandlestickRequest, GetDepthRequest, GetTickerRequest, dumpError400, getExistedMarket } from 'loopring-sdk'\nimport { fromWEI } from 'utils/swap_calc_utils'\n\nimport { ChartUnit, CoinInfo } from '@loopring-web/component-lib/static-resource'\n\nimport { ChartType } from '@loopring-web/component-lib'\n\nimport { TGItemData, TGItemJSXInterface, } from '@loopring-web/component-lib'\n\nimport { IGetDepthDataParams } from '@loopring-web/component-lib/components/charts/scaleAreaChart/data'\n\nconst toggleData: TGItemData[] = [\n  {\n    value: ChartType.Trend,\n    key: ChartType.Trend,\n    label: 'label' + ChartType.Trend\n  },\n  {\n    value: ChartType.Depth,\n    key: ChartType.Depth,\n    label: 'label' + ChartType.Depth\n  },\n]\n\nexport function useBasicInfo(props: any, coinAInfo: any, coinBInfo: any, marketArray: any[], t: any) {\n  const tgItemJSXs: TGItemJSXInterface[] = toggleData.map(({ value, label, key }) => {\n    return { value, tlabel: t(label), key, JSX: <>{t(label)}</> }\n  })\n\n  // const { base, quote, market, tokens } = props\n\n  const { market, amm } = getExistedMarket(marketArray, coinAInfo?.name, coinBInfo?.name)\n\n  const [chartType, setChartType] = useState<ChartType>(ChartType.Trend)\n\n  console.log('---useBasicInfo market:', market, ' amm:', amm, ' chartType:', chartType)\n  //\n  // const [change, setChange] = useState(0)\n  //\n  // const [volume, setVolume] = useState('')\n\n  const [chartUnit, setChartUnit] = useState(ChartUnit.D1)\n\n  const [originData, setOriginData] = useState<any>(undefined)\n\n  const handleChange = useCallback((_e: React.MouseEvent, value: any) => {\n    // Settings.setChartType(value)\n    console.log('useBasicInfo handleChange:', value)\n    setOriginData(undefined)\n    setChartType(value)\n  }, [setOriginData, setChartType])\n\n  const exchangeApi = useExchangeAPI()\n\n  // useCustomDCEffect(async () => {\n  //\n  //   if (!exchangeApi || !market || !tokens || !quote) {\n  //     return\n  //   }\n  //\n  //   let mounted = true\n  //\n  //   try {\n  //\n  //     const request: GetTickerRequest = {\n  //       market: market.market,\n  //     }\n  //\n  //     const ticker = await exchangeApi.getTicker(request)\n  //     if (mounted) {\n  //\n  //       if (ticker.tickList[0].change) {\n  //         setChange(ticker.tickList[0].change)\n  //       }\n  //\n  //       if (ticker.tickList[0].base_token_volume) {\n  //         const baseVol = fromWEI(tokens.tokenSymbolMap, base, ticker.tickList[0].base_token_volume) as string\n  //         setVolume(baseVol)\n  //       }\n  //     }\n  //   }\n  //   catch (reason) {\n  //     dumpError400(reason, 'ChartPanel getCandlestick')\n  //   }\n  //\n  //   return () => {\n  //     mounted = false\n  //   }\n  //\n  // }, [exchangeApi, market, tokens, base,])\n\n  const tgItemJSXsPriceChart: TGItemJSXInterface[] = Object.keys(ChartUnit).reduce((pre, item) => {\n    // @ts-ignore\n    const tGItemData: TGItemData = { value: ChartUnit[item], key: ChartUnit[item], label: 'label' + ChartUnit[item] };\n    pre.push({ value: tGItemData.value, tlabel: t(tGItemData.label ? tGItemData.label : tGItemData.key), key: tGItemData.key, JSX: <>{t(tGItemData.label ? tGItemData.label : tGItemData.key)}</> })\n    return pre\n  }, [] as TGItemJSXInterface[])\n\n  useCustomDCEffect(async () => {\n  \n    let mounted = true\n  \n    if (!exchangeApi || !market || !amm) {\n      return\n    }\n  \n    if (chartType === ChartType.Trend) {\n      const request: GetCandlestickRequest = {\n        market: amm as string,\n        interval: TradingInterval.min15,\n        limit: 96\n      }\n  \n      try {\n        const candlesticks = await exchangeApi.getCandlestick(request)\n  \n        if (mounted) {\n          const originData = candlesticks.candlesticks.map((item: Candlestick) => {\n            return {\n              timeStamp: item.timestamp,\n              low: item.low,\n              high: item.high,\n              open: item.open,\n              close: item.close,\n              volume: item.quoteVol,\n            }\n          })\n          console.log(`useBasicInfo amm: ${amm} candlesticks originData: `, originData)\n          setOriginData(originData)\n        }\n      }\n      catch (reason) {\n        dumpError400(reason, 'ChartPanel getCandlestick')\n      }\n  \n    } else {\n      const request: GetDepthRequest = {\n        market,\n      }\n  \n      try {\n  \n        const { depth } = await exchangeApi.getMixDepth(request)\n        console.log('useBasicInfo depth:', depth)\n        if (mounted) {\n          const originData: IGetDepthDataParams = {\n            bidsPrices: depth.bids_prices,\n            bidsAmtTotals: depth.bids_amtTotals as any,\n            asksPrices: depth.asks_prices,\n            asksAmtTotals: depth.asks_amtTotals as any,\n          }\n          setOriginData(originData)\n        }\n  \n      } catch (reason) {\n        dumpError400(reason)\n      }\n  \n    }\n  \n    return () => {\n      mounted = false\n    }\n  \n  }, [exchangeApi, amm, market, chartType])\n\n  return {\n    // change,\n    // volume,\n    chartUnit,\n    chartType,\n    tgItemJSXs,\n    tgItemJSXsPriceChart,\n    handleChange,\n    originData,\n  }\n}","import store from '../../stores';\nimport { AccountStatus } from '../../state_machine/account_machine_spec';\nimport { setShowAccountInfo, setShowConnect, setShowDeposit } from '@loopring-web/component-lib';\nimport React from 'react';\n\nexport enum fnType {\n    UNKNOWN,\n    UNCONNNECTED,\n    CONNECTED,\n    NOACCOUNT,\n    DEPOSITING,\n    DEPOSIT_TO_CONFIREM,\n    UNACTIVATED,\n    ARPROVING,\n    APPROV_TO_CONFIRM,\n    LOCKED,\n    ACTIVATED,\n    DEFAULT\n}\nexport const accountStaticCallBack = (props: { [key: number ]:[ fn: (props: any) => any, args?: object] }) => {\n    const {status} = store.getState().account\n    let fn, args;\n    switch (status) {\n        case AccountStatus.UNKNOWN:\n            [fn, args] = props[ fnType.UNKNOWN ]?props[ fnType.UNKNOWN ]:[];\n            if (typeof fn === 'function') {\n                return fn.call(this, args);\n            }\n            return\n        case AccountStatus.UNCONNNECTED:\n            [fn, args] = props[ fnType.UNCONNNECTED ]?props[ fnType.UNCONNNECTED ]:[];\n            if (typeof fn === 'function') {\n                return fn.call(this, args);\n            }\n            break;\n        case AccountStatus.CONNECTED:\n            [fn, args] = props[ fnType.CONNECTED ]?props[ fnType.CONNECTED ]:[];\n            if (typeof fn === 'function') {\n                return fn.call(this, args);\n            }\n            break;\n        case AccountStatus.NOACCOUNT:\n            [fn, args] = props[ fnType.NOACCOUNT ]?props[ fnType.NOACCOUNT ]:[];\n            if (typeof fn === 'function') {\n                return fn.call(this, args);\n            }\n            break;\n        case AccountStatus.DEPOSITING:\n            [fn, args] = props[ fnType.DEPOSITING ]?props[ fnType.DEPOSITING ]:[];\n            if (typeof fn === 'function') {\n                return fn.call(this, args);\n            }\n            break;\n        case AccountStatus.DEPOSIT_TO_CONFIREM:\n            [fn, args] = props[ fnType.DEPOSIT_TO_CONFIREM ]?props[ fnType.DEPOSIT_TO_CONFIREM ]:[];\n            if (typeof fn === 'function') {\n                return fn.call(this, args);\n            }\n            break;\n        case AccountStatus.UNACTIVATED:\n            [fn, args] = props[ fnType.UNACTIVATED ]?props[ fnType.UNACTIVATED ]:[];\n            if (typeof fn === 'function') {\n                return fn.call(this, args);\n            }\n            break;\n        case AccountStatus.ARPROVING:\n            [fn, args] = props[ fnType.ARPROVING ]?props[ fnType.ARPROVING ]:[];\n            if (typeof fn === 'function') {\n                return fn.call(this, args);\n            }\n            break;\n        case AccountStatus.APPROV_TO_CONFIRM:\n            [fn, args] = props[ fnType.APPROV_TO_CONFIRM ]?props[ fnType.APPROV_TO_CONFIRM ]:[];\n            if (typeof fn === 'function') {\n                return fn.call(this, args);\n            }\n            break;\n        case AccountStatus.LOCKED:\n            [fn, args] = props[ fnType.LOCKED ]?props[ fnType.LOCKED ]:[];\n            if (typeof fn === 'function') {\n                return fn.call(this, args);\n            }\n            break;\n        case AccountStatus.ACTIVATED:\n            [fn, args] = props[ fnType.ACTIVATED ]?props[ fnType.ACTIVATED ]:[];\n            if (typeof fn === 'function') {\n                return fn.call(this, args);\n            }\n            break;\n        default:\n            break;\n\n    }\n    [fn, args] = props[ fnType.DEFAULT ]?props[ fnType.DEFAULT ]:[];\n    if (typeof fn === 'function') {\n        return fn.call(this, args);\n    }\n}\n\n\nexport const bntLabel: { [ key: number ]: [fn: (props: any) => any, args?: object] } = {\n    [ fnType.UNCONNNECTED ]: [\n        function () {\n            return `labelConnectWallet`\n        }\n    ]\n    , [ fnType.DEFAULT ]: [\n        function () {\n            return `depositTitleAndActive`\n        }\n    ]\n    , [ fnType.ACTIVATED ]: [\n        function () {\n            return undefined\n        }\n    ]\n    , [ fnType.LOCKED ]: [\n        function () {\n            return `labelUnLock`\n        }\n    ]\n};\n\n\nexport const btnClickArray: { [ key: number ]: [fn: (props: any) => any, args?: object] } = {\n    [ fnType.UNCONNNECTED ]: [\n        function () {\n            // setShowConnect({isShow: true})\n            store.dispatch(setShowConnect({isShow: true}))\n        }\n    ]\n    , [ fnType.DEFAULT ]: [\n        function () {\n            store.dispatch(setShowDeposit({isShow: true}))\n            // ShowDeposit(true)\n        }\n    ]\n\n    , [ fnType.LOCKED ]: [\n        function () {\n            store.dispatch(setShowAccountInfo({isShow: true}))\n        }\n    ]\n};\n\n\n","import { ChartUnit } from '@loopring-web/component-lib/static-resource'\n\nimport { ScaleAreaChart, ToggleButtonGroup, useSettings } from '@loopring-web/component-lib'\nimport { Box, Grid } from \"@material-ui/core\"\nimport { WithTranslation } from 'react-i18next'\nimport { TradeTitle } from '@loopring-web/component-lib/components/block'\nimport { UpColor } from '@loopring-web/component-lib/src/static-resource';\nimport { useBasicInfo } from './hook'\n\nconst BasicInfoPanel = ({ props, coinAInfo, coinBInfo, tradeFloat, marketArray, t, ...rest }: any & WithTranslation) => {\n\n    const {\n        // change,\n        chartType,\n        tgItemJSXs,\n        tgItemJSXsPriceChart,\n        handleChange,\n        originData,\n    } = useBasicInfo(props, coinAInfo, coinBInfo, marketArray, t)\n    const { upColor } = useSettings();\n\n    return <>\n        <Grid item xs={8}>\n            <TradeTitle {...{\n                coinAInfo, coinBInfo,\n                ...rest, t, tradeFloat\n            }}></TradeTitle>\n        </Grid>\n        <Grid item xs={4} display={'flex'} justifyContent={'flex-end'} alignItems={'flex-end'}>\n            <ToggleButtonGroup exclusive {...{ ...rest, t, tgItemJSXs, value: chartType }}\n                handleChange={handleChange} />\n        </Grid>\n\n        <Grid item xs={12}>\n            <Box minHeight={256} maxHeight={256} display={'block'} style={{ height: '100%', width: '100%' }}>\n                <ScaleAreaChart type={chartType} data={originData ?? []} riseColor={upColor as keyof typeof UpColor}\n                    handleMove={() => {\n                    }} />\n            </Box>\n        </Grid>\n        <Grid item xs={12} height={24} display={'flex'} justifyContent={'flex-end'}>\n            <ToggleButtonGroup exclusive {...{\n                ...rest, t, tgItemJSXs: tgItemJSXsPriceChart,\n                value: ChartUnit.D1, size: 'small'\n            }}\n                handleChange={() => undefined} />\n        </Grid>\n    </>\n\n};\n\nexport default BasicInfoPanel\n","// import { useState } from 'react'\n//\n// import TradePanelUi from './TradePanel'\n// import { useGetMyTrades, useGetRecentTrades, } from './hooks'\n//\n// const TradePanel = ({tradeArray}: any) => {\n//\n//   // const { market, poolAddress, base, quote } = props\n//\n//   console.log('TradePanel market:', tradeArray)\n//\n//   // const { myTrades } = useGetMyTrades(market)\n//   //\n//   // const { recentTrades } = useGetRecentTrades(poolAddress)\n//\n//\n//\n//   return (\n//     <TradePanelUi trades={tradeArray} isAllTrade={isAllTrade}\n//     setIsAllTrade={setIsAllTrade} />\n//   )\n//\n// }\n//\n// export default TradePanel\n\nimport { RefAttributes, useState } from 'react'\n\nimport Tabs from '@material-ui/core/Tabs'\nimport Tab from '@material-ui/core/Tab'\nimport Checkbox from '@material-ui/core/Checkbox'\nimport styled from '@emotion/styled'\n\nimport { FormControlLabel, TradeTable, } from '@loopring-web/component-lib'\nimport { withTranslation, WithTranslation } from 'react-i18next';\nimport { CheckBoxIcon, CheckedIcon } from '@loopring-web/component-lib/static-resource'\nimport { RouteComponentProps, withRouter } from 'react-router'\nimport { Box } from '@material-ui/core';\nimport { RawDataTradeItem } from '@loopring-web/component-lib/components/tableList/tradeTable/TradeTable';\nimport { BasicHeaderItem, HeadMenuType } from '@loopring-web/component-lib/components/basic-lib/lists/Interface';\n\nconst StylePaper = styled(Box)`\n  width: 100%;\n  height: 100%;\n  flex: 1;\n  background-color: ${({theme}) => theme.colorBase.background().default};\n  border-radius: ${({theme}) => theme.unit}px;\n  padding: 20px;\n\n  .tableWrapper {\n    margin-top: ${({theme}) => theme.unit * 1.5}px;\n    border: 1px solid ${({theme}) => theme.colorBase.borderColor};\n    border-radius: ${({theme}) => theme.unit}px;\n    padding: 26px;\n  }\n` as typeof Box;\n\n\nconst applyProps = (index: number) => {\n    return {\n        id: `simple-tab-${index}`,\n        'aria-controls': `simple-tabpanel-${index}`,\n    }\n}\nconst StyledTabsWrapper = styled.div`\n          position: relative;\n          width: 100%;\n          margin-top: ${({theme}) => theme.unit * 4}px;\n        `\n\nconst StyledFormControlLabel = styled(FormControlLabel)`\n          position: absolute;\n          top: 0;\n          right: ${({theme}) => theme.unit}px;\n          margin: ${({theme}) => theme.unit}px 0 0 0;\n        `\n\n\nconst TradePanel = withTranslation('common')(\n   // withRouter(\n    (\n        {tradeArray,  myTradeArray, t}:\n            { tradeArray: RawDataTradeItem[], myTradeArray: RawDataTradeItem[] } & WithTranslation & RouteComponentProps) => {\n        const [isAllTrade, setIsAllTrade] = useState(false)\n        const [value, setValue] = useState(1)\n        const handleChange = (event: any, newValue: any) => {\n            setValue(newValue)\n        }\n\n        const handleCheckboxChange = () => {\n            setIsAllTrade((flag: boolean) => !flag)\n        }\n\n        return (\n            <StyledTabsWrapper>\n                <StyledFormControlLabel\n                    control={<Checkbox checked={isAllTrade} size={'small'} checkedIcon={<CheckedIcon/>}\n                                       icon={<CheckBoxIcon/>} color={'default'} onChange={handleCheckboxChange}/>}\n                    label={t('labelTradePanelHideOtherPairs')}/>\n\n                <Tabs value={value}\n                      onChange={handleChange}\n                      aria-label=\"tabs switch\">\n                    <Tab label={t('labelMyTrade')} {...applyProps(0)} />\n                    <Tab label={t('labelRecent')}   {...applyProps(1)} />\n                </Tabs>\n\n                <StylePaper marginTop={2}>\n                    {value === 0 ?  <TradeTable rawData={myTradeArray} /> : <TradeTable rawData={tradeArray}/> }\n                </StylePaper>\n\n            </StyledTabsWrapper>\n        )\n    }\n    ) as  (props: { tradeArray: RawDataTradeItem[], myTradeArray: RawDataTradeItem[] }) => JSX.Element;\n//)\n\nexport default TradePanel\n\n","export function coinPairInit({coinKey, _tradeCalcData, tokenMap, coinMap}: any) {\n    if (coinKey) {\n        const [_match, sell, buy] = coinKey.match(/(\\w+)-(\\w+)/i);\n        // @ts-ignore\n        if (sell && coinMap && coinMap[ sell ]) {\n            _tradeCalcData.coinSell = sell;\n        }// @ts-ignore\n        if (sell!==buy && buy && -1 !== tokenMap[ sell ].tradePairs.findIndex(ele => ele === buy)) {\n            _tradeCalcData.coinBuy = buy;\n            return _tradeCalcData\n        }\n        // else{\n        //     _tradeCalcData.coinBuy = tokenMap[ sell ].tradePairs[ 0 ];\n        // }\n    }\n    if (!_tradeCalcData.coinSell || _tradeCalcData.coinSell === '') {\n        _tradeCalcData.coinSell = 'LRC';\n        _tradeCalcData.coinBuy = 'ETH';\n        return _tradeCalcData\n    }\n    if (!_tradeCalcData.coinBuy || _tradeCalcData.coinBuy === '' || _tradeCalcData.coinBuy === 'undefined') {\n        // @ts-ignore\n        if (tokenMap && tokenMap[ _tradeCalcData.coinSell ].tradePairs) {\n            _tradeCalcData.coinBuy = tokenMap[ _tradeCalcData.coinSell ].tradePairs[ 0 ]\n        } else {\n            _tradeCalcData.coinSell = 'LRC';\n            _tradeCalcData.coinBuy = 'ETH';\n        }\n    }\n    return _tradeCalcData\n}","import { AmmMap } from '../../stores/Amm/AmmMap';\nimport { AmmPoolSnapshot, getBaseQuote, LoopringMap, TickerData, TokenInfo, TokenVolumeV3 } from 'loopring-sdk';\nimport { LoopringAPI } from '../../stores/apis/api';\nimport * as fm from 'loopring-sdk';\nimport { BIG10 } from '../../defs/swap_defs';\nimport { getToken } from 'utils/swap_calc_utils';\nimport { CoinMap, CustomError, ErrorMap } from '@loopring-web/component-lib/src/static-resource';\nimport { volumeToCountAsBigNumber } from './volumeToCount';\n\nexport const pairDetailBlock = <C extends { [ key: string ]: any }, I extends { [ key: string ]: any }>({\n                                                                                                           coinKey,\n                                                                                                           ammKey,\n                                                                                                           ammMap\n                                                                                                       }: { coinKey: string, ammKey: string, ammMap: AmmMap<C, I> }):\n    Promise<{\n        ammPoolsBalance: AmmPoolSnapshot,\n        tickMap:  LoopringMap<TickerData>\n}> => {\n    // const exchangeApi = exchangeAPI();\n    // const ammpoolApi = ammpoolAPI();\n    return new Promise((resolve, reject) => {\n        if(LoopringAPI.ammpoolAPI && LoopringAPI.exchangeAPI ) {\n            Promise.all([\n                LoopringAPI.ammpoolAPI.getAmmPoolSnapshot({poolAddress: ammMap[ ammKey ].address}),\n                LoopringAPI.exchangeAPI.getMixTicker({market: coinKey})])\n                // exchangeApi.getMarketTrades({market:coinKey})])\n                //{raw_data},\n                .then(([{ammPoolSnapshot}, {tickMap}]) => {\n                    resolve({\n                        ammPoolsBalance: ammPoolSnapshot,\n                        tickMap,\n                    })\n                })\n\n        }else{\n            reject(new CustomError(ErrorMap.NO_SDK))\n        }\n       \n    })\n}\n\nexport const pairDetailDone = <C>({coinKey, market,ammPoolsBalance, tokenMap,tickerData, _tradeCalcData, coinMap, marketCoins}:any)=>{\n\n    const [, coinSell, coinbuy] = coinKey.match(/(\\w+)-(\\w+)/i)\n    let stob:number|undefined;\n    if (tickerData.base === coinSell) {\n        // const ticker: TickerData = tickMap[market]\n        stob = Number(tickerData.close)\n\n    } else{\n        // const ticker: TickerData = tickMap[market]\n        stob = Number(tickerData.close)!==0? 1/Number(tickerData.close): 0\n    }\n    if(isNaN(stob) && ammPoolsBalance){\n        const {base, quote} = getBaseQuote(coinKey)\n\n        // const baseToken: TokenInfo = getToken(tokenMap, base)\n        // const quoteToken: TokenInfo = getToken(tokenMap, quote)\n        // const baseVol = (fm.toBig(poolBaseTokenVol.volume).div(BIG10.pow(baseToken.decimals)))\n        // const quoteVol = (fm.toBig(quoteBaseTokenVol.volume).div(BIG10.pow(quoteToken.decimals)))\n        //\n        // stob = volumeToCountAsBigNumber(base,poolBaseTokenVol.volume)?.div(\n        //     volumeToCountAsBigNumber(quote,quoteBaseTokenVol.volume) || 1\n        // ) .toNumber()\n        // console.log('1', base, poolBaseTokenVol, quote, quoteBaseTokenVol)\n        //baseToken.tokenId === quoteBaseTokenVol.tokenId && quoteToken.tokenId === poolBaseTokenVol.tokenId) {\n        // const quoteVol = (fm.toBig(quoteBaseTokenVol.volume).div(BIG10.pow(baseToken.decimals)))\n        // const baseVol = (fm.toBig(poolBaseTokenVol.volume).div(BIG10.pow(quoteToken.decimals)))\n        //baseVol.div(quoteVol).toNumber()\n        // console.log('2', base, poolBaseTokenVol, quote, quoteBaseTokenVol)\n        //ErrorMap.NOTS\n        const poolBaseTokenVol: TokenVolumeV3 = ammPoolsBalance.pooled[0];\n        const quoteBaseTokenVol: TokenVolumeV3 = ammPoolsBalance.pooled[1];\n        let poolVolumn:[baseVol:any, quoteVol:any];\n        if ( base && quote && tokenMap[base].tokenId === poolBaseTokenVol.tokenId ) {\n            poolVolumn =  [[base,poolBaseTokenVol.volume],[quote,quoteBaseTokenVol.volume]]\n        } else if (base && quote && tokenMap[base].tokenId === quoteBaseTokenVol.tokenId){\n            poolVolumn =  [[quote,quoteBaseTokenVol.volume],[base,poolBaseTokenVol.volume]]\n        } else {\n            throw new CustomError(ErrorMap.NO_SUPPORT_PAIR)\n        }\n        let [baseVol,quoteVol]  = poolVolumn\n        if(baseVol && quoteVol){\n            // stob = volumeToCountAsBigNumber(baseVol[0],baseVol[1])?.div(\n            //     volumeToCountAsBigNumber(quoteVol[0],quoteVol[1]) || 1\n            // ) .toNumber()\n            stob = volumeToCountAsBigNumber(quoteVol[0],quoteVol[1])?.div(\n                volumeToCountAsBigNumber(baseVol[0],baseVol[1]) || 1).toNumber()\n        }\n    }\n\n    _tradeCalcData.StoB = stob;\n    _tradeCalcData.BtoS = stob !== 0 && stob !== undefined? 1 / (stob * 1.0): 0;\n    _tradeCalcData.sellCoinInfoMap = coinMap && marketCoins?.reduce((prev: any, item: string | number) => {\n        return {...prev, [ item ]: coinMap[ item ]}\n    }, {} as CoinMap<C>)\n    _tradeCalcData.buyCoinInfoMap = coinMap && tokenMap && tokenMap[ _tradeCalcData.coinSell as string ].tradePairs?.reduce((prev: any, item: string | number) => {\n        return {...prev, [ item ]: coinMap[ item ]}\n    }, {} as CoinMap<C>);\n\n    return {\n        _tradeCalcData\n    }\n    //setPair();\n}","import { TickerData } from 'loopring-sdk';\nimport store from '../../stores';\nimport { FloatTag,TradeFloat } from '@loopring-web/component-lib/src/static-resource';\n\nexport const makeTickView = (tick: TickerData) => {\n    // const {forex} = store.getState().system;\n\n    const price = !isNaN(tick.close) ? tick.close : 0\n\n    const floatTag = (isNaN(tick.close) || isNaN(tick.open))  || tick.open === tick.close ? FloatTag.none : \n        tick.close > tick.open ? FloatTag.increase : FloatTag.decrease\n\n    let _tradeFloat: Partial<TradeFloat> = {\n        change: (tick.close - tick.open) / tick.open,\n        timeUnit: '24h',\n        priceYuan: price,\n        priceDollar: price,\n        floatTag,\n        reward: 0,\n        // APY: 0,\n    }\n\n    return _tradeFloat;\n}\n","import * as fm from 'loopring-sdk';\nimport store from '../../stores';\nimport { TradeTypes,CoinMap } from '@loopring-web/component-lib/static-resource';\nimport { ammpoolAPI, LoopringAPI, userAPI } from '../../stores/apis/api';\nimport { AmmRecordRow, AmmTradeType,RawDataTradeItem } from '@loopring-web/component-lib';\nimport { AmmPoolTx, BillType, AmmTxType, UserAmmPoolTx,getBaseQuote, MarketTradeInfo, Side, UserTrade } from 'loopring-sdk';\nimport { volumeToCount, volumeToCountAsBigNumber } from './volumeToCount';\n\nexport const getUserTrades = (marketKey: any) => {\n    const userApi = userAPI();\n    const {accountId, apiKey} = store.getState().account\n    return userApi.getUserTrades({accountId}, apiKey).then((response: {\n        totalNum: any;\n        userTrades: UserTrade[];\n        raw_data: any;\n    }) => {\n        return response.userTrades\n    })\n}\nexport const makeMarketArray = (coinKey: any, marketTrades: MarketTradeInfo[]): RawDataTradeItem[] => {\n\n    let tradeArray: Array<Partial<RawDataTradeItem>> = []\n\n    marketTrades.forEach((item: MarketTradeInfo) => {\n        try {\n            const {base, quote} = getBaseQuote(item.market)\n            const {forex} = store.getState().system\n            const {currency} = store.getState().settings\n            const {tokenMap} = store.getState().tokenMap\n            if (tokenMap) {\n               // const baseToken = tokenMap[ base as string ]\n               // const quoteToken = tokenMap[ quote as string ]\n\n                // @ts-ignore\n                tradeArray.push({\n                    side: item.side === Side.Sell ? TradeTypes.Sell : TradeTypes.Buy,\n                    amount: {\n                        from: {\n                            key: base as string,\n                            value: base ? volumeToCount(base, item.volume) : undefined\n                        },\n                        to: {\n                            key: quote as string,\n                            value: base ? volumeToCountAsBigNumber(base, item.volume)?.times(item.price).toNumber():undefined\n                        },\n\n                    },\n                    price: {\n                        key: '',\n                        value: fm.toBig(item.price).toNumber(),\n                    },\n                    fee: {\n                        key: '',\n                        value: quote? volumeToCount(quote, item.fee):undefined, //fm.toBig(item.fee).div(BIG10.pow(quoteToken.decimals)).toNumber(),\n                    },\n                    time: parseInt(item.tradeTime.toString()),\n                })\n            }\n        } catch (error) {\n            //CATCHERROR:\n            console.log(error)\n            // new CustomError()\n        }\n\n    })\n    // console.log('tradeArray:', tradeArray)\n    return tradeArray as RawDataTradeItem[];\n\n}\n\nexport const getUserAmmTransaction = () => {\n    const {accountId, apiKey} = store.getState().account\n    return LoopringAPI.ammpoolAPI?.getUserAmmPoolTxs({accountId}, apiKey).then(({userAmmPoolTxs}) => {\n        return userAmmPoolTxs\n    })\n    // }\n\n}\n\n\nexport const makeMyAmmMarketArray = <C extends { [ key: string ]:any }>(coinKey: string|undefined, marketTransaction: UserAmmPoolTx[]): AmmRecordRow<C>[] => {\n\n    let tradeArray: Array<Partial<AmmRecordRow<C>>> = [];\n    let {tokenMap, coinMap, idIndex} = store.getState().tokenMap;\n    marketTransaction.forEach((item: UserAmmPoolTx) => {\n        try {\n           // const {base, quote} = getBaseQuote(coinKey)\n            const {forex} = store.getState().system\n            // const {currency} = store.getState().settings\n            if (coinMap && tokenMap && idIndex\n                && !(coinKey && tokenMap['LP-'+coinKey].tokenId !== item.lpToken.tokenId) ) {\n                // @ts-ignore\n                const [, coinA, coinB] = idIndex[item.lpToken.tokenId].match(/LP-(\\w+)-(\\w+)/i);\n                 \n                tradeArray.push({\n                        type: item.txType === AmmTxType.JOIN ? AmmTradeType.add : AmmTradeType.remove,\n                        //TODO:\n                        totalDollar: 1000,\n                        totalYuan: 1000 / Number(forex),\n                        amountA: volumeToCount(coinA,item.poolTokens[ 0 ]?.actualAmount),\n                        amountB: volumeToCount(coinA,item.poolTokens[ 1 ]?.actualAmount),\n                        time: Number(item.updatedAt),\n                        // @ts-ignore\n                        coinA: coinMap[ coinA ],\n                        // @ts-ignore\n                        coinB: coinMap[ coinB ],\n                        status: item.txStatus\n                    })\n                }\n                return tradeArray\n            }\n         catch (error) {\n            //CATCHERROR:\n            console.log(error)\n            // new CustomError()\n        }\n\n    })\n    // console.log('tradeArray:', tradeArray)\n    return tradeArray as AmmRecordRow<C>[];\n\n}\n\n\nexport const makeMarketAmmArray = <C extends object>(coinKey: any, marketTransaction: AmmPoolTx[]): AmmRecordRow<C>[] => {\n\n    let tradeArray: Array<Partial<AmmRecordRow<C>>> = [];\n\n    // marketTransaction.forEach((item: AmmPoolTx) => {\n    //     try {\n    //         const {base, quote} = getBaseQuote(coinKey)\n    //         const {forex} = store.getState().system\n    //         // const {currency} = store.getState().settings\n    //         const coinMap = store.getState().tokenMap.coinMap as CoinMap<C>\n    //         if (coinMap) {\n    //\n    //             // id: number;\n    //             // from: string;\n    //             // to: string;\n    //             // token: string;\n    //             // amount: string;\n    //             // tokenF: string;\n    //             // amountF: string;\n    //             // status: TxStatus;\n    //             // txHash: string;\n    //             // billType: BillType;\n    //             // income: boolean;\n    //             // timestamp: number;\n    //             // memo: string;\n    //             // price: string;\n    //             // transferType: TransferType;\n    //             // label: string;\n    //             tradeArray.push({\n    //                 // type: item.billType === BillType.ORDER ?\n    //                 //     AmmTradeType.swap : item.billType === BillType.TRANSFER && item.income ?\n    //                 //         AmmTradeType.add : AmmTradeType.remove,\n    //                 // // //TODO:\n    //                 // totalDollar: 1000,\n    //                 // totalYuan: 1000 / Number(forex),\n    //                 // amountA: Number(item.poolTokens[ 0 ].amount),\n    //                 // amountB: Number(item.poolTokens[ 1 ].amount),\n    //                 // time: Number(item.updatedAt),\n    //                 // coinA: coinMap[ base as keyof C],\n    //                 // coinB: coinMap[ quote as keyof C ],\n    //             })\n    //         }\n    //     } catch (error) {\n    //         //CATCHERROR:\n    //         console.log(error)\n    //         // new CustomError()\n    //     }\n    //\n    // })\n    // console.log('tradeArray:', tradeArray)\n    return tradeArray as AmmRecordRow<C>[];\n\n}\n","import store from '../../stores';\nimport { setSlippage } from '@loopring-web/component-lib';\n\ntype Cache = {\n    customSlippage?:number\n}\nexport  const makeCache  = (__cache__:Cache)=>{\n   if(typeof  __cache__.customSlippage !== undefined){\n       store.dispatch(setSlippage(__cache__.customSlippage as number))\n      // store.getState().settings\n   }\n}","import { Box, Grid, } from '@material-ui/core'\nimport { WithTranslation, withTranslation } from 'react-i18next'\nimport BasicInfoPanel from './panel/BasicInfoPanel'\nimport TradePanel from './panel/TradePanel'\nimport styled from 'styled-components'\nimport { useSwapPage } from './hook';\nimport { SwapPanel } from '@loopring-web/component-lib'\n\nconst FixedStyle = styled(Box)`\n  @media only screen and (min-height: 680px ) and (min-width:1024px){\n    position: fixed;\n  }\n`\n\nexport const SwapPage = withTranslation('common')(({ ...rest }: WithTranslation) => {\n\n    const {tradeCalcData,tradeData,tradeFloat,tradeArray, myTradeArray, marketArray, handleSwapPanelEvent,onSwapClick,pair,swapBtnI18nKey} = useSwapPage();\n\n    return <>\n        <Grid container marginRight={3} alignContent={'flex-start'} >\n            <BasicInfoPanel {...{ ...rest,\n                ...pair, marketArray,\n                tradeFloat, tradeArray }} />\n            <TradePanel tradeArray={tradeArray} myTradeArray={myTradeArray} />\n\n            {/**/}\n        </Grid>\n\n        <Box display={'flex'} style={{ minWidth: 'var(--swap-box-width)' }} >\n            <FixedStyle>\n                <SwapPanel tradeData={tradeData}\n                           tradeCalcData={tradeCalcData}\n                           onSwapClick={onSwapClick}\n                           swapBtnI18nKey={swapBtnI18nKey}\n                           // handleError={}\n                           {...{handleSwapPanelEvent,...rest}}\n                />\n            </FixedStyle>\n\n        </Box>\n\n    </>\n});\n\n\n // SwapPage\n","import { useRouteMatch } from 'react-router';\nimport { CoinInfo, IBData, TradeCalcData, TradeTypes } from '@loopring-web/component-lib/static-resource';\nimport React, { useState } from 'react';\nimport { LoopringAPI } from '../../stores/apis/api';\nimport { useTokenMap } from '../../stores/token';\nimport * as fm from 'loopring-sdk';\nimport { AmmPoolInfoV3, AmmPoolSnapshot, dumpError400, getExistedMarket, GetNextStorageIdRequest, LoopringMap, OrderType, SubmitOrderRequestV3, VALID_UNTIL } from 'loopring-sdk';\nimport { useAmmMap } from '../../stores/Amm/AmmMap';\nimport { RawDataTradeItem } from '@loopring-web/component-lib/components/tableList/tradeTable/TradeTable';\nimport { useWalletLayer2 } from '../../stores/walletLayer2';\nimport { CustomError, ErrorMap, globalSetup, TradeFloat } from '@loopring-web/component-lib/src/static-resource';\nimport { SwapTradeData, useOpenModals } from '@loopring-web/component-lib';\nimport { SwapData } from '@loopring-web/component-lib/components/panel/components/panel/SwapWrap/Interface';\nimport { SwapType } from '@loopring-web/component-lib/components/panel/Interface';\nimport { useAccount } from '../../stores/account/hook';\nimport { useCustomDCEffect } from '../../hooks/common/useCustomDCEffect';\nimport { accountStaticCallBack, bntLabel, btnClickArray, fnType } from '../../hooks/help/connetStatusCallback';\nimport { useModals } from '../../hooks/modal/useModals';\nimport { makeWallet } from '../../hooks/help/makeWallet';\nimport { coinPairInit } from '../../hooks/help/coinPairInit';\nimport { pairDetailBlock, pairDetailDone } from '../../hooks/help/pairDetail';\nimport { makeTickView } from '../../hooks/help/makeTickView';\nimport { getUserTrades, makeMarketArray } from '../../hooks/help/marketTable';\nimport { makeCache } from '../../hooks/help/makeCache';\nimport * as _ from 'lodash'\nimport store from 'stores';\nimport { Lv2Account } from 'defs/account_defs';\nimport { AccountStatus } from 'state_machine/account_machine_spec';\n\nexport const useSwapPage = <C extends { [ key: string ]: any }>() => {\n    /*** api prepare ***/\n    // const exchangeApi = exchangeAPI();\n    const wait = globalSetup.wait;\n    const match: any = useRouteMatch(\":symbol\")\n    const {coinMap, tokenMap, marketArray, marketCoins, marketMap, } = useTokenMap()\n    const {ammMap} = useAmmMap();\n    // const {setShowConnect, setShowAccountInfo} = useOpenModals();\n    // const {ShowDeposit} = useModals()\n    const {account} = useAccount()\n\n    const walletLayer2State = useWalletLayer2();\n\n    const [tradeData, setTradeData] = React.useState<SwapTradeData<IBData<C>> | undefined>(undefined);\n    const [tradeCalcData, setTradeCalcData] = React.useState<TradeCalcData<C> | undefined>(undefined);\n    const [tradeArray, setTradeArray] = React.useState<RawDataTradeItem[]>([]);\n    const [myTradeArray, setMyTradeArray] = React.useState<RawDataTradeItem[]>([]);\n    const [tradeFloat, setTradeFloat] = React.useState<TradeFloat | undefined>(undefined);\n    const [pair, setPair] = React.useState<{ coinAInfo: CoinInfo<C> | undefined, coinBInfo: CoinInfo<C> | undefined }>({\n        coinAInfo: undefined,\n        coinBInfo: undefined,\n    });\n\n\n    const [ammPoolSnapshot, setAmmPoolSnapshot] = React.useState<AmmPoolSnapshot | undefined>(undefined);\n\n    const [swapBtnI18nKey, setSwapBtnI18nKey] = React.useState<string|undefined>(undefined);\n\n    const [output, setOutput] = useState<any>()\n\n    //HIGH: get Router info\n    // const symbol = match?.params.symbol ?? undefined;\n    React.useEffect(() => {\n        const symbol = match?.params.symbol ?? undefined;\n        resetSwap(symbol,undefined,undefined,undefined)\n    }, []);\n    //TODO tickMap\n    React.useEffect(() => {\n    }, [])\n\n    //HIGH: effect by wallet state update\n    React.useEffect(() => {\n        switch (walletLayer2State.status) {\n            case \"ERROR\":\n                walletLayer2State.statusUnset();\n                // setState('ERROR')\n                //TODO: show error at button page show error  some retry dispath again\n                break;\n            case \"DONE\":\n                walletLayer2State.statusUnset();\n                const {walletMap} = makeWallet();\n                if (tradeCalcData) {\n                    setTradeCalcData({...tradeCalcData, walletMap} as TradeCalcData<C>);\n                    setTradeData({\n                        sell: {\n                            belong: tradeCalcData.sellCoinInfoMap ? tradeCalcData.sellCoinInfoMap[ tradeCalcData.coinSell ]?.simpleName : undefined,\n                            balance: walletMap ? walletMap[ tradeCalcData.coinSell ]?.count : 0\n                        },\n                        // @ts-ignore\n                        buy: {\n                            belong: tradeCalcData.sellCoinInfoMap ? tradeCalcData.sellCoinInfoMap[ tradeCalcData.coinBuy ]?.simpleName : undefined,\n                            balance: walletMap ? walletMap[ tradeCalcData.coinBuy ]?.count : 0\n                        },\n                    } as SwapTradeData<IBData<C>>)\n                    let {\n                        amm,\n                        market\n                    } = getExistedMarket(marketArray, tradeCalcData.coinSell as string, tradeCalcData.coinBuy as string);\n                    getUserTrades(market).then((marketTrades)=>{\n                        let _myTradeArray  = makeMarketArray(market, marketTrades) as RawDataTradeItem[]\n                        setMyTradeArray(_myTradeArray?_myTradeArray:[])\n                    })\n                }\n                break;\n            default:\n                break;\n\n        }\n    }, [walletLayer2State.status,setMyTradeArray])\n\n    React.useEffect(() => {\n    }, [])\n\n\n    useCustomDCEffect(() => {\n        const label:string|undefined = accountStaticCallBack(bntLabel)\n        setSwapBtnI18nKey(label);\n    }, [account.status, bntLabel])\n\n    const onSwapClick = ({sell, buy, slippage,...rest}: SwapTradeData<IBData<C>>) => {\n        const  swapBtnClickArray: typeof  btnClickArray =  Object.assign(btnClickArray,{\n            [ fnType.ACTIVATED ]: [ async function () {\n                //TODO: swap onClick\n\n                const { exchangeInfo } = store.getState().system\n\n                if (!LoopringAPI.userAPI || !tokenMap || !exchangeInfo \n                    || account.status !== AccountStatus.ACTIVATED) {\n                    return\n                }\n\n                console.log('onSwap',sell, buy, slippage)\n                console.log('onSwap output:', output)\n\n                console.log('onSwap account:', account)\n\n                const baseToken = tokenMap[sell.belong as string]\n                const quoteToken = tokenMap[buy.belong as string]\n\n                const request: GetNextStorageIdRequest = {\n                    accountId: account.accountId,\n                    sellTokenId: baseToken.tokenId\n                }\n\n                const storageId = await LoopringAPI.userAPI.getNextStorageId(request, account.apiKey)\n\n                try {\n        \n                    const request: SubmitOrderRequestV3 = {\n                        exchange: exchangeInfo.exchangeAddress,\n                        accountId: account.accountId,\n                        storageId: storageId.orderId,\n                        sellToken: {\n                            tokenId: baseToken.tokenId,\n                            volume: '100000000000000000000',\n                            // volume: fm.toBig(output.amountS).toString()\n                        },\n                        buyToken: {\n                            tokenId: quoteToken.tokenId,\n                            volume: fm.toBig(output.amountBOutSlip).toString()\n                        },\n                        allOrNone: false,\n                        validUntil: VALID_UNTIL,\n                        maxFeeBips: 60,\n                        fillAmountBOrS: false, // amm only false\n                        orderType: OrderType.ClassAmm,\n                        eddsaSignature: '',\n                    }\n\n                    console.log(request)\n        \n                    const response = await LoopringAPI.userAPI.submitOrder(request, account.eddsaKey, account.apiKey)\n        \n                    console.log(response)\n        \n                } catch (reason) {\n                    dumpError400(reason)\n                }\n\n                if(rest.__cache__){\n                    makeCache(rest.__cache__)\n                }\n            },{sell, buy, slippage}]\n        })\n        accountStaticCallBack(swapBtnClickArray)\n    }\n    const handleSwapPanelEvent = async (swapData: SwapData<SwapTradeData<IBData<C>>>, switchType: any): Promise<void> => {\n        //TODO setMarket(market);\n        // _.throttle(()=>{\n                const {tradeData} = swapData\n                return new Promise((resolve) => {\n                    switch (switchType) {\n                        case SwapType.SEll_CLICK:\n                            break\n                        case SwapType.BUY_CLICK:\n                            break\n                        case SwapType.SELL_SELECTED:\n                            resetSwap(`${tradeData.sell.belong}-${tradeData.buy.belong}`, 'sell', tradeData,ammPoolSnapshot)\n                            break\n                        case SwapType.BUY_SELECTED:\n                            resetSwap(`${tradeData.sell.belong}-${tradeData.buy.belong}`, 'buy', tradeData,ammPoolSnapshot)\n                            break\n                        case SwapType.EXCHANGE_CLICK:\n                            resetSwap(`${tradeData.sell.belong}-${tradeData.buy.belong}`,undefined,undefined, ammPoolSnapshot)\n                            break\n                        default:\n                            break\n                    }\n\n                    resolve(undefined)\n                })\n            // },wait)\n\n    }\n\n    const calculateTradeData = async (type: 'sell' | 'buy', _tradeData: SwapTradeData<IBData<C>>, ammPoolSnapshot:AmmPoolSnapshot|undefined): Promise <{ _tradeCalcData: TradeCalcData<C>, _tradeData: SwapTradeData<IBData<C>> }> => {\n        //if(`${pair.coinAInfo?.simpleName}-${pair.coinBInfo?.simpleName}` === coinKey)\n        if (_tradeData[ type ].tradeValue && tradeCalcData) {\n            type === 'sell' ? _tradeData[ 'buy' ].tradeValue = fm.toBig(_tradeData[ 'sell' ].tradeValue).times(tradeCalcData.StoB).toNumber()\n                : _tradeData[ 'sell' ].tradeValue = fm.toBig(_tradeData[ 'buy' ].tradeValue).times(tradeCalcData.BtoS).toNumber()\n        }   \n        const market = `${pair.coinAInfo?.simpleName}-${pair.coinBInfo?.simpleName}`\n        const depth = await LoopringAPI.exchangeAPI?.getMixDepth({market})\n        if (!marketArray || !tokenMap || !marketMap || !depth || !ammMap || !tradeCalcData) {\n            let _tradeCalcData = {...tradeCalcData} as TradeCalcData<C>;\n            return {_tradeData, _tradeCalcData}\n        }\n\n        const isAtoB = type === 'sell' \n        let input: any = (isAtoB ? _tradeData.sell.tradeValue : _tradeData.buy.tradeValue)\n\n        if (input) {\n            input = input.toString()\n        } else {\n            input = '0'\n        }\n\n        const base = _tradeData.sell.belong as string\n        const quote = _tradeData.buy.belong as string\n\n        const output = fm.getOutputAmount(input, base, quote, isAtoB, marketArray, tokenMap, \n            marketMap, depth?.depth, { ['AMM-'+market]:ammMap['AMM-'+market].__rawConfig__ } as LoopringMap<AmmPoolInfoV3>,\n            ammPoolSnapshot, '6', '200')\n\n        console.log('output:', output)\n\n        setOutput(output)\n\n        tradeCalcData.priceImpact = output?.priceImpact as string\n\n        if (isAtoB) {\n            _tradeData.buy.tradeValue = output?.output ? parseFloat(output?.output) : 0\n        } else {\n            _tradeData.sell.tradeValue = output?.output ? parseFloat(output?.output) : 0\n        }\n        //TODO: renew  tradeCalcData\n        let _tradeCalcData = {...tradeCalcData} as TradeCalcData<C>;\n        return {_tradeData, _tradeCalcData}\n    }\n\n    const throttleSetValue = React.useCallback(_.debounce(async (type,_tradeData,_ammPoolSnapshot) =>  {\n        const  {_tradeData:td,_tradeCalcData} = await calculateTradeData(type, _tradeData, _ammPoolSnapshot)//.then(()=>{\n        setTradeData(td)\n        setTradeCalcData(_tradeCalcData)\n\n    }, wait*2),[setTradeData,setTradeCalcData,calculateTradeData]);\n\n    const resetSwap = async (coinKey: any, type: 'sell' | 'buy'| undefined, _tradeData: SwapTradeData<IBData<C>>|undefined, _ammPoolSnapshot:AmmPoolSnapshot|undefined) => {\n        if (tradeCalcData\n            && coinKey === `${tradeCalcData.coinSell}-${tradeCalcData.coinBuy}`\n            && _tradeData\n            && type\n            && (!tradeData || (tradeData[ type ].tradeValue !== _tradeData[ type ].tradeValue))) {\n           // calculateTradeData(type,_tradeData,_ammPoolSnapshot)\n            throttleSetValue(type,_tradeData,_ammPoolSnapshot)\n            //throttleSetValue(td,_tradeCalcData);\n\n        } else {\n            let _tradeFloat: Partial<TradeFloat> = {}\n            let _tradeArray: Array<Partial<RawDataTradeItem>> | undefined = undefined;\n            let _tradeCalcData: Partial<TradeCalcData<C>> = coinPairInit({coinKey, _tradeCalcData:{}, tokenMap, coinMap})\n            let {\n                amm,\n                market\n            } = getExistedMarket(marketArray, _tradeCalcData.coinSell as string, _tradeCalcData.coinBuy as string);\n            const [,coinA,coinB] = market.match(/(\\w+)-(\\w+)/i)\n\n            setTradeCalcData({...tradeCalcData, ..._tradeCalcData} as TradeCalcData<C>);\n            if (coinMap) {\n                setPair({\n                    coinAInfo: coinMap[ coinA ],\n                    coinBInfo: coinMap[ coinB ],\n                })\n            }\n            if (walletLayer2State.walletLayer2) {\n                const {walletMap} = makeWallet();\n                _tradeCalcData.walletMap = walletMap;\n                getUserTrades(market).then((marketTrades)=>{\n                    let _myTradeArray = makeMarketArray(market, marketTrades) as RawDataTradeItem[]\n                    setMyTradeArray(_myTradeArray?_myTradeArray:[])\n                })\n\n\n            }\n            let apiList = [];\n            //TODO wallet saga done\n            if (marketArray && amm && market && ammMap) {\n                // let pairPromise =  usePairTitleBlock({market})\n                apiList = [\n                    LoopringAPI.exchangeAPI?.getMarketTrades({market}),\n                    pairDetailBlock({coinKey: market, ammKey: amm, ammMap})\n                ];\n                //HiGH: this need add websocket to update infr ticker ammpoolsbalace\n                // @ts-ignore\n                Promise.all([...apiList]).then(\n                    ([{marketTrades}, {ammPoolsBalance,tickMap}]: any[]) => {\n                        setAmmPoolSnapshot(ammPoolsBalance)\n                        if (tokenMap) {\n                            let {_tradeCalcData: _td} = pairDetailDone({\n                                coinKey:`${_tradeCalcData.coinSell}-${_tradeCalcData.coinBuy}`,\n                                market,\n                                ammPoolsBalance,\n                                tickerData: tickMap[ market ] ? tickMap[ market ]: {},\n                                tokenMap,\n                                _tradeCalcData,\n                                coinMap,\n                                marketCoins\n                            })\n                            _tradeCalcData = _td;\n                            _tradeFloat = makeTickView(tickMap[ market ] ?tickMap[ market ]: {})\n                            _tradeArray = makeMarketArray(market, marketTrades)\n                            // @ts-ignore\n                            setTradeCalcData(_tradeCalcData as TradeCalcData<C>);\n                            // @ts-ignore\n                            setTradeFloat(_tradeFloat);\n                            setTradeArray(_tradeArray as RawDataTradeItem[])\n                            // setPair(_pair)\n                            setTradeData({\n                                sell: {\n                                    belong: _tradeCalcData.sellCoinInfoMap ? _tradeCalcData.sellCoinInfoMap[ _tradeCalcData.coinSell ]?.simpleName : undefined,\n                                    balance: _tradeCalcData.walletMap ? _tradeCalcData.walletMap[ _tradeCalcData.coinSell ]?.count : 0\n                                },\n                                // @ts-ignore\n                                buy: {\n                                    belong: _tradeCalcData.sellCoinInfoMap ? _tradeCalcData.sellCoinInfoMap[ _tradeCalcData.coinBuy ]?.simpleName : undefined,\n                                    balance: _tradeCalcData.walletMap ? _tradeCalcData.walletMap[ _tradeCalcData.coinBuy ]?.count : 0\n                                },\n                            } as SwapTradeData<IBData<C>>)\n                        }\n                    }).catch((error) => {\n                        throw new CustomError({...ErrorMap.TRADE_LITE_SET_PAIR_ERROR, options: error})\n                        //TODO solve error\n                    })\n\n            }\n        }\n\n    }\n    return {\n        tradeCalcData,\n        tradeFloat,\n        tradeArray,\n        myTradeArray,\n        tradeData,\n        pair,\n        marketArray,\n        onSwapClick,\n        swapBtnI18nKey,\n        handleSwapPanelEvent\n    }\n\n}","import { useMemo, } from \"react\"\n\nimport { useActiveWeb3React } from \"../web3/useWeb3\"\n\nimport { WsAPI, ExchangeAPI, AmmpoolAPI, UserAPI, DEFAULT_TIMEOUT, } from 'loopring-sdk'\n\nfunction useApi(ApiClass: any, timeout = DEFAULT_TIMEOUT) {\n\n  const { chainId, active, } = useActiveWeb3React()\n\n    const genApi = () => {\n        if (!active || !chainId) {\n            return undefined\n        }\n\n        return new ApiClass(chainId, timeout)\n    }\n\n    const api = useMemo(genApi, [ApiClass, chainId, active, timeout])\n\n    return api\n}\n\nexport function useWsAPI() {\n    return useApi(WsAPI) as WsAPI\n}\n\nexport function useExchangeAPI() {\n    return useApi(ExchangeAPI) as ExchangeAPI\n}\n\nexport function useAmmpoolAPI() {\n    return useApi(AmmpoolAPI) as AmmpoolAPI\n}\n\nexport function useUserAPI() {\n    return useApi(UserAPI) as UserAPI\n}\n","import { useCallback, useMemo, useState, useRef, useEffect } from 'react'\n\nimport { useActiveWeb3React } from '../web3/useWeb3'\nimport { useWsAPI, } from './useApi2'\n\nimport { ChainId, getAccountArg, getCandlestickArg, \n    getAmmpoolArg, getTickerArg, WsProps } from 'loopring-sdk'\n\nconst stateArr = [\n    { key: 0, value: 'Connecting' },\n    { key: 1, value: 'Connected' },\n    { key: 2, value: 'Closing' },\n    { key: 3, value: 'Closed' }\n]\n\nexport const useWebsocket = ({ topics, verify, needApiKey, apiKey, }: { topics: any, needApiKey: boolean, apiKey: string|undefined, verify: boolean, }) => {\n    const ws = useRef<WebSocket | null>(null)\n    const [wsData, setMessage] = useState<any>(undefined)\n    const [readyState, setReadyState] = useState({ key: 0, value: 'Connecting' })\n\n    const { chainId, } = useActiveWeb3React()\n\n    const api = useWsAPI()\n\n    const creatWebSocket = () => {\n\n        if (!api || !chainId) {\n            return\n        }\n\n        api.getWsKey().then((wsApiKey: any) => {\n            let basePath: string = 'wss://ws.'\n            switch (chainId) {\n                case ChainId.MAINNET:\n                    basePath += process.env.REACT_APP_API_URL\n                    break\n                default:\n                    basePath += process.env.REACT_APP_API_URL_UAT\n                    basePath = 'wss://ws.uat2.loopring.io'\n            }\n\n            basePath += '/v3/ws?wsApiKey=' + wsApiKey\n    \n            try {\n                ws.current = new WebSocket(basePath)\n\n                const subTopics = (topics: any) => {\n                    let data: any = {\n                        op: 'sub',\n                        unsubscribeAll: 'true',\n                        topics: topics,\n                    }\n            \n                    if (needApiKey && apiKey) {\n                        data.apiKey = apiKey\n                    }\n            \n                    const flat_txt = JSON.stringify(data)\n                    sendMessage(flat_txt)\n                }\n    \n                ws.current.onopen = (_e) => {\n                    setReadyState(stateArr[ws.current?.readyState ?? 0])\n                    subTopics(topics)\n                }\n                \n                ws.current.onclose = (e) => {\n                    setReadyState(stateArr[ws.current?.readyState ?? 0])\n                }\n                \n                ws.current.onerror = (e) => {\n                    setReadyState(stateArr[ws.current?.readyState ?? 0])\n                }\n    \n                ws.current.onmessage = (e) => {\n                    setMessage(e.data)\n                }\n            } catch (error) {\n                console.log(error)\n            }\n\n        })\n\n        \n    }\n\n    const webSocketInit = () => {\n        if (!ws.current || ws.current.readyState === 3) {\n            creatWebSocket()\n        }\n    }\n\n    const closeWebSocket = () => {\n        ws.current?.close()\n    }\n\n    const sendMessage = (msg: any) => {\n        ws.current?.send(msg)\n    }\n\n    const reconnect = () => {\n        try {\n            closeWebSocket()\n            ws.current = null\n            creatWebSocket()\n        } catch (e) {\n            console.log(e)\n        }\n    }\n\n    useEffect(() => {\n\n        verify && webSocketInit()\n        return () => {\n            ws.current?.close()\n        }\n    }, [ws, verify])\n\n    return {\n        wsData,\n        readyState,\n        sendMessage,\n        closeWebSocket,\n        reconnect,\n    }\n}\n\nexport function useWs(topics: any, needApiKey: boolean, apiKey?: string, verify: boolean = true) {\n    const [socketData, setSocketData] = useState({})\n\n    const [isLocalPage, setIsLocalPage] = useState<boolean>(true)\n\n    useEffect(() => {\n\n        let mounted = true\n\n        const checkIsLocalPage = () => {\n            console.log('enter checkIsLocalPage')\n            document.addEventListener('visibilitychange', function () {\n                // page invisible trigger!\n                let isLocalPage = true\n                if (document.visibilityState === 'hidden') {\n                    isLocalPage = false\n                }\n                if (mounted) {\n                    setIsLocalPage(isLocalPage)\n                } else {\n                    console.log('unmounted! dont setIsLocalPage!')\n                }\n            })\n        }\n\n        checkIsLocalPage()\n\n        return () => {\n            mounted = false\n        }\n\n    }, [])\n\n    const { wsData, readyState, closeWebSocket, reconnect, sendMessage, } = useWebsocket({\n        topics,\n        apiKey,\n        needApiKey,\n        verify,\n    })\n\n    useEffect(() => {\n    \n        if (needApiKey && !apiKey) {\n            return\n        }\n\n        if (!verify) {\n            return\n        }\n\n        if (wsData === 'ping') {\n            try {\n                sendMessage('pong')\n            } catch (err) {\n                console.log(err)\n            }\n        } else {\n            if (wsData) {\n                setSocketData(JSON.parse(wsData))\n            }\n        }\n        \n        // if closed and is currente page then, reconnect.\n        if (readyState.key === 3 && isLocalPage) {\n            reconnect()\n        }\n        // if not current page, close it.\n        if (!isLocalPage) {\n            closeWebSocket()\n        }\n\n    }, [wsData, readyState, isLocalPage, verify, apiKey])\n\n    return {\n        socketData,\n    }\n}\n\nexport function useAmmpoolWs(apiKey: string) {\n\n    let topics: any[] = []\n\n    topics.push(getTickerArg('LRC-ETH'))\n\n    topics.push(getAmmpoolArg('0x18920d6E6Fb7EbE057a4DD9260D6D95845c95036'))\n\n    const needApiKey = false\n\n    const { socketData } = useWs(topics, needApiKey, apiKey)\n\n    return {\n        socketData,\n    }\n\n}\n","import { useRef } from 'react'\n\n// import Qrcode from 'components/qrcodes/Qrcode'\n\n\nimport { useAccount } from 'stores/account/hook'\n\nimport { useGetExchangeInfo, useGetGas, useGetMarkets, useGetTokens } from 'hooks/exchange/useExchangeAPI'\n\nimport { useAmmpoolWs } from 'hooks/common/useWebsocketApi'\n\nconst DebugPage = () => {\n\n  const inputRef = useRef<HTMLInputElement>(null)\n\n  const { account, isNoAccount, apiKey } = useAccount()\n\n  const {socketData} = useAmmpoolWs(apiKey)\n\n  const { markets } = useGetMarkets()\n\n  const { exchangeInfo } = useGetExchangeInfo()\n\n  const { tokens } = useGetTokens()\n\n  const { gas } = useGetGas()\n\n  const gasPrice = gas?.data\n\n  console.log('account:', account)\n  console.log('exchangeInfo:', exchangeInfo)\n  console.log('tokens:', tokens)\n\n  const showAddr = account.accAddr ? account.accAddr : ''\n\n  return (\n    <div>\n      Debug\n      <div>account:{JSON.stringify(account)}</div>\n      <div>eddsaKey:{account.eddsaKey}</div>\n      <div>wsdata: {JSON.stringify(socketData)}</div>\n      <div>----------------------------</div>\n      <div>markets:{JSON.stringify(markets)}</div>\n      <div>----------------------------</div>\n      <div>depositAddress:{exchangeInfo?.depositAddress}</div>\n      <div>exchangeAddress:{exchangeInfo?.exchangeAddress}</div>\n      <div>----------------------------</div>\n      {/*<div>exchangeInfo:{JSON.stringify(exchangeInfo)}</div>\n      <div>----------------------------</div>*/}\n      <div>tokens:{JSON.stringify(tokens)}</div>\n      <div>----------------------------</div>\n\n      {/*{isNoAccount() && <Qrcode value={showAddr} size={300} />}*/}\n      {/*<input type='input' ref={inputRef} width=\"150px\" />*/}\n      {/*<DepositBtn onClick={deposit} />*/}\n    </div>\n  )\n\n}\n\nexport default DebugPage\n","import React, { useEffect } from 'react'\nimport { TransactionTable, RawDataTransactionItem, TransactionTradeTypes, TransactionSide, TransactionStatus } from '@loopring-web/component-lib'\nimport { WithTranslation, withTranslation } from 'react-i18next'\nimport { Box, Paper } from '@material-ui/core'\nimport styled from '@emotion/styled'\nimport moment from 'moment'\nimport store from 'stores'\nimport { LoopringAPI } from 'stores/apis/api'\nimport { volumeToCount } from 'hooks/help/volumeToCount'\n// import { useGetTxs } from './hooks'\n\nconst StylePaper = styled(Box)`\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  height: 100%;\n  flex: 1;\n  background-color: ${({ theme }) => theme.colorBase.background().default};\n  border-radius: ${({ theme }) => theme.unit}px;\n  padding: 20px;\n\n  .title {\n    font-family: Gilroy-Medium;\n    font-size: ${({ theme }) => theme.unit * 3}px;\n    line-height: 19px;\n  }\n\n  .tableWrapper {\n    display: flex;\n    margin-top: 20px;\n    border: 1px solid ${({ theme }) => theme.colorBase.borderColor};\n    border-radius: ${({ theme }) => theme.unit}px;\n    padding: 26px;\n    flex: 1;\n    \n    .rdg {\n      flex: 1;\n    }\n  }\n` as typeof Paper;\n\n// export type RawDataTransactionItem2 = {\n//   token?: string,\n//   tradeType: TransactionTradeTypes,\n//   from: string | TransactionSide;\n//   to: string | TransactionSide;\n//   amount: number;\n//   fee: {\n//       unit: string;\n//       value: number;\n//   };\n//   memo?: string;\n//   time: number;\n//   txnHash: string;\n//   status: TransactionStatus;\n//   path?: string;\n// }\n\nconst TxPanel = withTranslation('common')((rest:WithTranslation<'common'>) => {\n    const container = React.useRef(null);\n    const [pageSize, setPageSize] = React.useState(10);\n    const [txTableData, setTxTableData] = React.useState<RawDataTransactionItem[]>([]);\n\n    const { accountId,apiKey } = store.getState().account;\n\n    useEffect(() => {\n        (async function getUserApi () {\n            if (LoopringAPI && LoopringAPI.userAPI && accountId && apiKey) {\n                const userTxns = await LoopringAPI.userAPI.getUserTranferList({\n                    accountId,\n                }, apiKey)\n                const mappingList = userTxns.userTransfers.map(o => ({\n                  token: o.symbol,\n                  from: o.senderAddress,\n                  to: o.receiverAddress,\n                  // amount: Number(o.amount),\n                  amount: Number(volumeToCount(o.symbol, o.amount)),\n                  fee: {\n                    unit: o.feeTokenSymbol || '',\n                    value: Number(volumeToCount(o.symbol, o.feeAmount || 0))\n                  },\n                  memo: o.memo || '',\n                  time: o.timestamp,\n                  txnHash: o.hash,\n                  status: o.status === 'processed' ? TransactionStatus.processed : o.status === 'processing' ? TransactionStatus.processing : o.status === 'received' ? TransactionStatus.received : TransactionStatus.failed,\n                  tradeType: o.txType === 'TRANSFER' ? TransactionTradeTypes.transfer : o.txType === 'DEPOSIT' ? TransactionTradeTypes.deposit : TransactionTradeTypes.withdraw,\n                }))\n                setTxTableData(mappingList)\n            }\n        })()\n    }, [accountId, apiKey])\n\n    React.useEffect(() => {\n        // @ts-ignore\n        let height = container?.current?.offsetHeight;\n        if (height) {\n            setPageSize(Math.floor((height - 120) / 44) - 2);\n        }\n    }, [container, pageSize]);\n\n    return (\n        <StylePaper ref={container}>\n            <div className=\"title\">Transactions</div>\n            <div className=\"tableWrapper\">\n                <TransactionTable {...{\n                  // rawData: txList,\n                  rawData: txTableData,\n                  pagination: {\n                    pageSize: pageSize\n                  },\n                  ...rest\n                }} />\n            </div>\n        </StylePaper>\n    )\n})\n\nexport default TxPanel\n","import { useCallback, useEffect, useRef, useState } from 'react'\nimport { WithTranslation, withTranslation } from 'react-i18next'\nimport { PriceTag } from '@loopring-web/component-lib/static-resource'\nimport { Box, Paper, Typography } from '@material-ui/core'\nimport styled from '@emotion/styled'\nimport {\n    AssetsTable,\n    AssetTitle,\n    AssetTitleProps,\n    ChartType,\n    DoughnutChart,\n    ScaleAreaChart,\n    ToggleButtonGroup,\n    TokenType\n} from '@loopring-web/component-lib'\nimport { useModals } from 'hooks/modal/useModals'\n// import { useGetUserBalances } from 'hooks/exchange/useUserAPI'\nimport { useGetTokens } from 'hooks/exchange/useExchangeAPI'\nimport { volumeToCount } from 'hooks/help/volumeToCount'\nimport { LoopringAPI } from 'stores/apis/api'\nimport { AssetType } from 'loopring-sdk'\nimport store from 'stores'\nimport { useWalletLayer1 } from 'stores/walletLayer1'\n\nconst StylePaper = styled(Box)`\n  width: 100%;\n  height: 100%;\n  flex: 1;\n  background-color: ${({theme}) => theme.colorBase.background().default};\n  border-radius: ${({theme}) => theme.unit}px;\n  padding: 20px;\n\n  .title {\n    font-family: Gilroy-Medium;\n    font-size: ${({theme}) => theme.unit * 3}px;\n    line-height: 19px;\n  }\n\n  .tableWrapper {\n    display: flex;\n    flex: 1;\n    height: 100%;\n    border: 1px solid ${({theme}) => theme.colorBase.borderColor};\n    border-radius: ${({theme}) => theme.unit}px;\n    padding: 26px;\n  }\n` as typeof Box;\n\nconst StyledChartWrapper = styled(Box)`\n  height: 225px;\n\n  > div {\n    position: relative;\n    width: calc(50% - 6px);\n    height: 100%;\n    background-color: ${({theme}) => theme.colorBase.background().default};\n    border: 1px solid ${({theme}) => theme.colorBase.borderColor};\n    border-radius: ${({theme}) => theme.unit}px;\n    padding: ${({theme}) => theme.unit * 2.5}px ${({theme}) => theme.unit * 3}px;\n  }\n`\n\nconst StyledBtnGroupWrapper = styled(Box)`\n  position: absolute;\n  z-index: 10000;\n  right: ${({theme}) => theme.unit * 3}px;\n  bottom: ${({theme}) => theme.unit * 2.5}px;\n`\n\nconst toggleData = [\n    {value: '24 H', key: '24 H'},\n    {value: '1 W', key: '1 W'},\n    {value: 'ALL', key: 'ALL'},\n]\n\nconst testTrendData: any = [\n    {\n        timeStamp: 150,\n        close: Math.random() + 4,\n    },\n    {\n        timeStamp: 160,\n        close: Math.random() + 4,\n    },\n    {\n        timeStamp: 170,\n        close: Math.random() + 4,\n    },\n    {\n        timeStamp: 180,\n        close: Math.random() + 4,\n    },\n    {\n        timeStamp: 190,\n        close: Math.random() + 4,\n    },\n    {\n        timeStamp: 200,\n        close: Math.random() + 4,\n    },\n    {\n        timeStamp: 210,\n        close: Math.random() + 4,\n    },\n    {\n        timeStamp: 220,\n        close: Math.random() + 4,\n    },\n    {\n        timeStamp: 230,\n        close: Math.random() + 4,\n    },\n    {\n        timeStamp: 240,\n        close: Math.random() + 4,\n    },\n]\n\nexport type ITokenInfoItem = {\n    token: string,\n    detail: {\n        price: string,\n        symbol: string,\n        updatedAt: number\n    }\n}\n\nexport type TrendDataItem = {\n    timeStamp: number;\n    close: number;\n}\n\nconst AssetPanel = withTranslation('common')(({t, ...rest}: WithTranslation) => {\n    const container = useRef(null);\n    const [pageSize, setPageSize] = useState(10);\n\n    const [chartPeriod, setChartPeriod] = useState('24 H')\n\n    const [chartData, setChartData] = useState<TrendDataItem[]>([])\n    \n    // console.log(walletLayer2)\n    const { walletLayer2 } = store.getState().walletLayer2;\n    const { ammMap } = store.getState().amm.ammMap\n\n    useEffect(() => {\n        (async function getUserApi () {\n            if (LoopringAPI && LoopringAPI.walletAPI && walletLayer2) {\n                const userAssets = await LoopringAPI.walletAPI?.getUserAssets({\n                    wallet: '0xeF041462825bFdF79b2f1f02A70b2753cB5b1516',\n                    assetType: AssetType.DEX,\n                    limit: 30 // TODO: minium unit is day, discuss with pm laters\n                })\n                if (userAssets.userAssets.length && !!userAssets.userAssets.length) {\n                    setChartData(userAssets.userAssets.map(o => ({\n                        timeStamp: Number(o.createdAt),\n                        close: Number(o.amount)\n                    })))\n                }\n            }\n        })()\n    }, [walletLayer2])\n\n    useEffect(() => {\n        // @ts-ignore\n        let height = container?.current?.offsetHeight;\n        if (height) {\n            setPageSize(Math.floor((height - 120) / 44) - 1);\n        }\n    }, [container, pageSize]);\n    \n    const {\n        ShowDeposit,\n        ShowTransfer,\n        ShowWithdraw,\n        ShowResetAccount,\n    } = useModals()\n\n    const { updateWalletLayer1 } = useWalletLayer1()\n\n    const onShowDeposit = useCallback(() => {\n        updateWalletLayer1()\n        ShowDeposit(true)\n    }, [])\n\n    const onShowTransfer = () => {\n        ShowTransfer(true)\n    }\n\n    const onShowWithdraw = () => {\n        ShowWithdraw(true)\n    }\n\n    const AssetTitleProps: AssetTitleProps = {\n        assetInfo: {\n            // totalAsset: 123456.789,\n            totalAsset: !!chartData.length ? chartData[chartData.length - 1].close : 0,\n            priceTag: PriceTag.Dollar,\n        },\n        onShowDeposit,\n        onShowTransfer,\n        onShowWithdraw,\n    }\n\n    const { tokens: tokensAll } = useGetTokens()\n\n    const tokens = tokensAll?.tokenSymbolMap\n\n    // const { balances } = useGetUserBalances(tokens)\n\n    // const { walletLayer2 } = store.getState().walletLayer2;\n    const { faitPrices } = store.getState().system\n\n    const tokenPriceList = faitPrices ? Object.entries(faitPrices).map(o => ({\n        token: o[ 0 ],\n        detail: o[ 1 ]\n    })) as ITokenInfoItem[] : []\n\n\n    const tokenMap = Object.entries(store.getState().tokenMap.tokenMap || {}).map(o => ({\n        token: o[ 0 ],\n        tokenDetail: o[ 1 ]\n    }))\n    const coinList = walletLayer2 ? Object.keys(walletLayer2) : []\n    const coinDetailList = walletLayer2 ? Object.values(walletLayer2) as any : []\n\n    const doughnutData = coinList.map((coin, index) => {\n        const isLpToken = coin.split('-').length === 3\n        const result = coin.split('-')\n        result.splice(0, 1, 'AMM')\n        const ammToken = isLpToken ? result.join('-') : ''\n        const ammTokenList = Object.keys(ammMap)\n        const tokenPriceUSDT = Number(tokenPriceList.find(o => o.token === coin)?.detail.price) / Number(tokenPriceList.find(o => o.token === 'USDT')?.detail.price)\n        \n        return ({\n            name: coin,\n            // TODO: LP TOKEN use 'hooks/help/makeMyAmmWithStat'\n            value: ammToken\n                ? ammTokenList.includes(ammToken) && ammMap[ammToken] ? ammMap[ammToken].amountDollar : 0\n                : Number(volumeToCount(coin, coinDetailList[index].total)) * tokenPriceUSDT\n        })\n    })\n\n    // TODO: cannot get lp token or smallbalances for now\n    const assetsRawData = coinList.map((coin, index) => {\n        const tokenInfo = coinDetailList[ index ]\n        const tokenPriceUSDT = Number(tokenPriceList.find(o => o.token === coin)?.detail.price) / Number(tokenPriceList.find(o => o.token === 'USDT')?.detail.price)\n        const amount = Number(volumeToCount(coin, tokenInfo.total))\n        const locked = Number(volumeToCount(coin, tokenInfo.locked))\n\n        return ({\n            token: {\n                type: tokenMap.find(o => o.token === coin)?.tokenDetail.isLpToken ? TokenType.lp : TokenType.single,\n                value: coin\n            },\n            amount: amount,\n            available: amount - locked,\n            locked: locked,\n            smallBalance: tokenPriceUSDT * Number(volumeToCount(coin, coinDetailList[index].total)) < 1,\n        })\n    })\n\n    return (\n        <>\n            <Box>\n                <AssetTitle  {...{\n                    t,\n                    ...rest,\n                    ...AssetTitleProps\n                }} />\n            </Box>\n\n            {/*<div className=\"title\">{t('labelAssetsTitle')}</div>*/}\n\n            <StyledChartWrapper display={'flex'} justifyContent={'space-between'} alignItems={'center'} marginTop={2}>\n                <Paper component={'div'}>\n                    <Typography component=\"span\" color=\"textSecondary\" variant=\"body1\">Asset Distribution</Typography>\n                    <DoughnutChart data={doughnutData}/>\n                </Paper>\n                <Paper component={'div'}>\n                    <Typography component=\"span\" color=\"textSecondary\" variant=\"body1\">Total Assets</Typography>\n                    <ScaleAreaChart type={ChartType.Trend} data={chartData}/>\n                    <StyledBtnGroupWrapper>\n                        <ToggleButtonGroup exclusive size=\"small\" {...{\n                            ...rest,\n                            t,\n                            data: toggleData,\n                            value: chartPeriod,\n                            setValue: setChartPeriod\n                        }} />\n                    </StyledBtnGroupWrapper>\n                </Paper>\n            </StyledChartWrapper>\n            <StylePaper marginTop={2}>\n                <div className=\"tableWrapper\" ref={container}>\n                    <AssetsTable {...{\n                        rawData: assetsRawData,\n                        pagination: {\n                            pageSize: pageSize\n                        },\n                        showFiliter: true,\n                        ...rest\n                    }} />\n                </div>\n            </StylePaper>\n        </>\n    )\n})\n\nexport default AssetPanel\n","import React, { useEffect } from 'react'\nimport { TradeTable, TradeFilterTable, RawDataTradeItem } from '@loopring-web/component-lib'\nimport { WithTranslation, withTranslation } from 'react-i18next'\nimport styled from '@emotion/styled'\nimport { Box, Paper } from '@material-ui/core'\nimport store from 'stores'\nimport { LoopringAPI } from 'stores/apis/api'\nimport { volumeToCount } from 'hooks/help/volumeToCount'\n\nconst StylePaper = styled(Box)`\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  height: 100%;\n  flex: 1;\n  background-color: ${({ theme }) => theme.colorBase.background().default};\n  border-radius: ${({ theme }) => theme.unit}px;\n  padding: 20px;\n\n  .title {\n    font-family: Gilroy-Medium;\n    font-size: ${({ theme }) => theme.unit * 3}px;\n    line-height: 19px;\n  }\n\n  .tableWrapper {\n    display: flex;\n    flex: 1;\n    margin-top: 20px;\n    border: 1px solid ${({ theme }) => theme.colorBase.borderColor};\n    border-radius: ${({ theme }) => theme.unit}px;\n    padding: 26px;\n\n    .rdg {\n      flex: 1;\n    }\n  }\n` as typeof Paper;\n\n// side: keyof typeof TradeTypes;\n//     amount: {\n//         from: {\n//             key: string;\n//             value: number|undefined;\n//         },\n//         to: {\n//             key: string;\n//             value: number|undefined;\n//         }\n//     };\n//     price:{\n//         key:string\n//         value:number|undefined,\n//     }\n//     // priceDollar: number;\n//     // priceYuan: number;\n//     fee: {\n//         key: string;\n//         value: number|undefined;\n//     };\n//     time: number;\n\nconst TradePanel = withTranslation('common')((rest:WithTranslation<'common'>) => {\n    const container = React.useRef(null);\n    const [pageSize, setPageSize] = React.useState(10);\n    const [originalData, setOriginalData] = React.useState<RawDataTradeItem[]>([])\n\n    const { accountId,apiKey } = store.getState().account;\n\n    useEffect(() => {\n        (async function getUserApi () {\n            if (LoopringAPI && LoopringAPI.userAPI && accountId && apiKey) {\n                const userTrades = await LoopringAPI.userAPI.getUserTrades({\n                    accountId,\n                }, apiKey)\n                if (userTrades && userTrades.userTrades) {\n                  setOriginalData(userTrades.userTrades.map(o => {\n                    const marketList = o.market.split('-')\n                    // due to AMM case, we cannot use first index\n                    const baseToken = marketList[marketList.length - 2]\n                    const quoteToken = marketList[marketList.length - 1]\n\n                    return ({\n                      side: o.side,\n                      price: {\n                        key: baseToken,\n                        value: Number(o.price)\n                      },\n                      fee: {\n                        key: baseToken,\n                        value: Number(volumeToCount(baseToken, o.fee))\n                      },\n                      time: Number(o.tradeTime),\n                      amount: {\n                        from: {\n                          key: baseToken,\n                          value: Number(volumeToCount(baseToken, o.volume))\n                        },\n                        to: {\n                          key: quoteToken,\n                          value: Number(volumeToCount(baseToken, o.volume)) / Number(o.price)\n                        }\n                      }\n                    })\n                  }))\n                }\n            }\n        })()\n    }, [accountId, apiKey])\n\n    React.useEffect(() => {\n        // @ts-ignore\n        let height = container?.current?.offsetHeight;\n        if (height) {\n            setPageSize(Math.floor((height - 120) / 44) - 2);\n        }\n    }, [container, pageSize]);\n\n    // const txList: any[] = []\n\n    return (\n        <>\n            <StylePaper ref={container}>\n                <div className=\"title\">Trades</div>\n                <div className=\"tableWrapper\">\n                    <TradeTable {...{\n                      rawData: originalData,\n                      pagination: {\n                        pageSize: pageSize\n                      },\n                      ...rest}}/>\n                </div>\n            </StylePaper>\n        </>\n    )\n})\n\nexport default TradePanel\n","\nimport React, { useEffect } from 'react'\nimport { OrderHistoryTable, OrderHistoryRawDataItem } from '@loopring-web/component-lib'\nimport { TradeTypes } from '@loopring-web/component-lib/static-resource'\nimport { WithTranslation, withTranslation } from 'react-i18next'\nimport { Box, Paper } from '@material-ui/core'\nimport styled from '@emotion/styled'\nimport store from 'stores'\nimport { LoopringAPI } from 'stores/apis/api'\nimport { volumeToCount } from 'hooks/help/volumeToCount'\n\nconst StylePaper = styled(Box)`\n    display: flex;\n    flex-direction: column;\n    width: 100%;\n    height: 100%;\n    flex: 1;\n    background-color: ${({ theme }) => theme.colorBase.background().default};\n    border-radius: ${({ theme }) => theme.unit}px;\n    padding: 20px;\n\n    .title {\n        font-family: Gilroy-Medium;\n        font-size: ${({ theme }) => theme.unit * 3}px;\n        line-height: 19px;\n    }\n\n    .tableWrapper {\n        display: flex;\n        flex: 1;\n        margin-top: 20px;\n        border: 1px solid ${({ theme }) => theme.colorBase.borderColor};\n        border-radius: ${({ theme }) => theme.unit}px;\n        padding: 26px;\n\n        .rdg {\n            flex: 1;\n        }\n    }\n` as typeof Paper;\n\n// export type OrderHistoryRawDataItem = {\n//     side: keyof typeof TradeTypes;\n//     amount: OrderPair;\n//     average: number;\n//     filledAmount: OrderPair;\n//     filledPrice: {\n//         key: string;\n//         value: number;\n//     }\n//     time: number;\n//     status: keyof typeof TradeStatus;\n//     detailTable: OrderHistoryTableDetailItem[]\n// }\n\nconst OrderPanel = withTranslation('common')((rest: WithTranslation) => {\n    const container = React.useRef(null);\n    const [pageSize, setPageSize] = React.useState(10);\n    const [orderOriginalData, setOrderOriginalData] = React.useState<OrderHistoryRawDataItem[]>([])\n\n    const { accountId,apiKey } = store.getState().account;\n\n    useEffect(() => {\n        (async function getUserApi () {\n            if (LoopringAPI && LoopringAPI.userAPI && accountId && apiKey) {\n                const userOrders = await LoopringAPI.userAPI.getOrders({\n                    accountId,\n                }, apiKey)\n                if (userOrders && Array.isArray(userOrders.orders) && !!userOrders.orders.length) {\n                    setOrderOriginalData(userOrders.orders.map(o => {\n                        const marketList = o.market.split('-')\n                        // due to AMM case, we cannot use first index\n                        const baseToken = marketList[marketList.length - 2]\n                        const quoteToken = marketList[marketList.length - 1]\n                        const { baseAmount, quoteAmount, baseFilled, quoteFilled } = o.volumes\n\n                        return ({\n                            side: o.side === 'BUY' ? TradeTypes.Buy : TradeTypes.Sell,\n                            amount: {\n                                from: {\n                                    key: baseToken,\n                                    // value: Number(baseAmount)\n                                    value: Number(volumeToCount(baseToken, baseAmount))\n                                },\n                                to: {\n                                    key: quoteToken,\n                                    value: Number(volumeToCount(quoteToken, quoteAmount))\n                                }\n                            },\n                            // average: Number(o.price),\n                            average: Number(volumeToCount(quoteToken, quoteFilled)) / Number(volumeToCount(baseToken, baseFilled)),\n                            filledAmount: {\n                                from: {\n                                    key: baseToken,\n                                    // value: Number(baseFilled)\n                                    value: Number(volumeToCount(baseToken, baseFilled))\n                                },\n                                to: {\n                                    key: quoteToken,\n                                    value: Number(volumeToCount(quoteToken, quoteFilled))\n                                }\n                            },\n                            filledPrice: {\n                                key: quoteToken,\n                                value: Number(o.price)\n                            },\n                            time: o.validity.start * 1000,\n                            status: o.status,\n                            detailTable: []\n                        })\n                    }))\n                }\n            }\n        })()\n    }, [accountId, apiKey])\n\n    React.useEffect(() => {\n        // @ts-ignore\n        let height = container?.current?.offsetHeight;\n        if (height) {\n            setPageSize(Math.floor((height - 120) / 44) - 2);\n        }\n    }, [container, pageSize]);\n\n    return (\n        <>\n            <StylePaper ref={container}>\n                <div className=\"title\">Order History</div>\n                <div className=\"tableWrapper\">\n                    <OrderHistoryTable {...{\n                        pagination: {\n                            pageSize: pageSize\n                        },\n                        rawData: orderOriginalData,\n                        ...rest\n                    }} />\n                </div>\n            </StylePaper>\n        </>\n    )\n})\n\nexport default OrderPanel\n","import styled from '@emotion/styled';\nimport { Box, Button, Divider, Grid, Switch, Typography } from '@material-ui/core';\nimport React from 'react';\nimport { UpColor, Currency, DropDownIcon } from '@loopring-web/component-lib/src/static-resource';\nimport {\n    BtnLanguage,\n    OutlineSelect,\n    OutlineSelectItem, QRCodePanel,\n    TypographyStrong, useSettings\n} from '@loopring-web/component-lib';\nimport { Trans, useTranslation, WithTranslation, withTranslation } from 'react-i18next';\nimport { useTheme } from '@emotion/react';\nimport { LanguageKeys } from '@loopring-web/component-lib/static-resource';\n\n// const MuiModalStyled = styled(MuiModal)`\n//   //background: ${({theme}) => theme.colorBase.background().secondary};\n//   // .MuiBackdrop-root{\n//   //   z-index: -1;\n//   //   background-color: ${({theme}) => theme.colorBase.background().outline};\n//   // }\n//   display: flex;\n//   align-items: center;\n//   justify-content: center;\n// ` as typeof MuiModal;\n// const BlockStyled = styled(Box)`\n//   ${({theme}) => theme.border.defaultFrame({c_key: 'blur', d_R: 1})};\n//   background: ${({theme}) => theme.colorBase.background().secondary};\n//   max-height: var(--panel-setting-height);\n//   max-width: var(--panel-setting-width);\n//   display: flex;\n//   justify-content: space-around;\n//   align-items: center;\n//   overflow: scroll;\n//   padding: ${({theme}) => theme.unit*8}px\n// `;\n\nconst StyledPaper = styled(Grid)`\n  width: 100%;\n  height: 100%;\n  background-color: ${({theme}) => theme.colorBase.background().default};\n  ${({theme}) => theme.border.defaultFrame({c_key: 'blur', d_R: 1})};\n`\n\nconst StyledSwitch = styled(Switch)(({theme}) => ({\n    \"& .Mui-checked\": {\n        color: theme.colorBase.textPrimary,\n        '& + .MuiSwitch-track.MuiSwitch-track': {\n            border: `solid ${theme.colorBase.success}`,\n        },\n        '& .MuiSwitch-thumb': {\n            backgroundColor: theme.colorBase.success,\n        }\n    },\n    '& .MuiSwitch-track': {\n        border: `solid ${theme.colorBase.error}`,\n        opacity: 1\n    },\n    '& .MuiSwitch-thumb': {\n        backgroundColor: theme.colorBase.error,\n    }\n}));\n\nexport const BtnCurrency = ({t, currency, label, handleChange}: any) => {\n    const [state, setState] = React.useState<string>(currency ? currency : Currency.dollar);\n    const _handleChange = React.useCallback((event: React.ChangeEvent<any>) => {\n        setState(event.target.value);\n        if (handleChange) {\n\n            handleChange(event.target.value)\n        }\n    }, [handleChange])\n    return <OutlineSelect aria-label={t(label)} IconComponent={DropDownIcon}\n                          labelId=\"language-selected\"\n                          id=\"language-selected\"\n                          value={state} autoWidth\n                          onChange={_handleChange}>\n        <OutlineSelectItem value={Currency.dollar}>$ {t('labelUSDollar')}</OutlineSelectItem>\n            <OutlineSelectItem value={Currency.yen}>¥ {t('labelCNYYuan')}</OutlineSelectItem>\n    </OutlineSelect>\n}\n\nconst StyledDivider = styled(Divider)`\n  margin: ${({theme}) => theme.unit}px 0 ${({theme}) => theme.unit}px 0px;\n`\nconst DividerBlock = styled(Divider)`\n  margin: 0;\n  flex: 1;\n  width: 1px;\n  height: ${({theme}) => theme.unit * 3}px;\n  background: ${({theme}) => theme.colorBase.focus};\n`\n\n\n\nexport const SettingPanel = withTranslation(['common', 'layout'])(({t,i18n, ...rest}: & WithTranslation) => {\n    const theme = useTheme();\n    const {setUpColor,setLanguage,setCurrency,currency,upColor} = useSettings()\n    const language = i18n.language;\n    const handleOnLanguageChange = (lang: LanguageKeys) => {\n        setLanguage(lang);\n        i18n.changeLanguage(lang);\n    }\n    const handleOnCurrencyChange = (value: any) => {\n        setCurrency(value);\n    }\n    const handleColorChange = (e:any) => {\n        if(e.target.checked){\n            setUpColor(UpColor.green) ;\n        }else{\n            setUpColor(UpColor.red);\n        }\n    }\n    return <Grid container direction={'column'} justifyContent={'space-between'} alignItems={'stretch'} flexWrap={'nowrap'}>\n        <Typography variant={'h4'} component={'h3'} marginY={1} paddingLeft={2}>{t('labelTitleSecurity')}</Typography>\n        <StyledPaper item xs={12} display={'flex'} flexDirection={'column'} marginBottom={2} paddingY={2}>\n            <Box component={'section'} display={'flex'} flexDirection={'column'}>\n                <Typography variant={'h5'} component={'h4'} paddingX={2}>{t('labelTitleResetL2Keypair')}</Typography>\n                <StyledDivider/>\n                <Grid container display={'flex'} flexDirection={'row'} justifyContent={'stretch'}\n                      alignItems={'flex-start'} paddingX={2} marginBottom={2}>\n                    <Grid item xs={8} display={'flex'} flexDirection={'column'}>\n                        <Typography variant={'body1'} component={'p'}>\n                            <Trans i18nKey=\"resetDescription\">\n                                Create a new signing key for layer-2 authentication (no backup needed). This will\n                                <TypographyStrong component={'span'}>cancel all your pending orders</TypographyStrong>.\n                            </Trans>\n                        </Typography>\n                    </Grid>\n                    <Grid item xs={4} display={'flex'} flexDirection={'column'} justifyContent={'space-evenly'}\n                          alignItems={'flex-end'} alignSelf={'stretch'}>\n                        <Button variant={'outlined'} size={'medium'} color={'primary'}>{t('labelBtnReset')}</Button>\n                    </Grid>\n                    <Grid item xs={12} display={'flex'} flexDirection={'row'} justifyContent={'flex-end'}\n                          alignItems={'center'} alignSelf={'stretch'}>\n                        <Typography variant={'body2'} component={'p'}\n                                    paddingTop={1}>{t('labelHadChangPassword', {passDay: '14 hours'})}</Typography>\n                    </Grid>\n\n                </Grid>\n            </Box>\n            <Box component={'section'} display={'flex'} flexDirection={'column'}>\n                <Typography variant={'h5'} component={'h4'} paddingX={2}>{t('labelTitleExportAccount')}</Typography>\n                <StyledDivider/>\n                <Grid container display={'flex'} flexDirection={'row'} justifyContent={'stretch'}\n                      alignItems={'flex-start'} paddingX={2} marginBottom={2}>\n                    <Grid item xs={7} display={'flex'} flexDirection={'column'}>\n                        <Typography variant={'body1'} component={'p'}>{t('descriptionExportAccount')}</Typography>\n                    </Grid>\n                    <Grid item xs={5} display={'flex'} flexDirection={'column'} justifyContent={'space-evenly'}\n                          alignItems={'flex-end'} alignSelf={'stretch'}>\n                        <Grid item> <Button variant={'outlined'} size={'medium'}\n                                            color={'primary'}>{t('labelBtnExportAccount')}</Button></Grid>\n                    </Grid>\n                </Grid>\n            </Box>\n        </StyledPaper>\n\n        <Typography variant={'h4'} component={'h3'} marginY={1} paddingLeft={2}>{t('labelTitlePreferences')}</Typography>\n        <StyledPaper item xs={12} display={'flex'} flexDirection={'column'} marginBottom={2} paddingY={2}>\n            <Box component={'section'} display={'flex'} flexDirection={'column'}>\n                {/*<Typography variant={'h5'} component={'h4'} paddingX={2}>{t('labelTitleLayout')}</Typography>*/}\n                {/*<StyledDivider/>*/}\n                <Grid container display={'flex'} flexDirection={'row'} justifyContent={'stretch'}\n                      alignItems={'flex-start'} paddingX={2} marginBottom={2}>\n                    <Grid item xs={7} display={'flex'} flexDirection={'column'}>\n                        <Typography variant={'body1'} component={'p'}>{t('labelLanguage')}</Typography>\n                    </Grid>\n                    <Grid item xs={5} display={'flex'} flexDirection={'column'} justifyContent={'space-evenly'}\n                          alignItems={'flex-end'} alignSelf={'stretch'}>\n                        <Grid item>\n                            <BtnLanguage {...{\n                                t, ...rest,\n                                language,\n                                label: 'languageSetting',\n                                handleChange: handleOnLanguageChange\n                            }}></BtnLanguage>\n                        </Grid>\n                    </Grid>\n                </Grid>\n                <Grid container display={'flex'} flexDirection={'row'} justifyContent={'stretch'}\n                      alignItems={'flex-start'} paddingX={2} marginBottom={2}>\n                    <Grid item xs={7} display={'flex'} flexDirection={'column'}>\n                        <Typography variant={'body1'} component={'p'}>{t('labelCurrency')}</Typography>\n                    </Grid>\n                    <Grid item xs={5} display={'flex'} flexDirection={'column'} justifyContent={'space-evenly'}\n                          alignItems={'flex-end'} alignSelf={'stretch'}>\n                        <Grid item>\n                            <BtnCurrency {...{\n                                t, ...rest,\n                                currency,\n                                label: 'currencySetting',\n                                handleChange: handleOnCurrencyChange\n                            }}></BtnCurrency>\n\n                        </Grid>\n                    </Grid>\n                </Grid>\n                <Grid container display={'flex'} flexDirection={'row'} justifyContent={'stretch'}\n                      alignItems={'flex-start'} paddingX={2}>\n                    <Grid item xs={7} display={'flex'} flexDirection={'column'}>\n                        <Typography variant={'body1'} component={'p'}>{t('labelColors')}</Typography>\n                    </Grid>\n                    <Grid item xs={5} display={'flex'} flexDirection={'row'} justifyContent={'flex-end'}\n                          alignItems={'center'} alignSelf={'stretch'}>\n                        <Typography variant={'body1'} component={'span'} paddingX={2}>\n                            <Trans i18nKey=\"whichColorIsUp\">\n                                <span style={{\n                                    textTransform: 'capitalize',\n                                    color: upColor === UpColor.green ? theme.colorBase.success : theme.colorBase.error\n                                }}>{{up: upColor === UpColor.green ? t('labelgreen') : t('labelred')}} up</span>\n                                and <span style={{\n                                textTransform: 'capitalize',\n                                color: upColor === UpColor.green ? theme.colorBase.error : theme.colorBase.success\n                            }}>{{down: upColor === UpColor.green ? t('labelred') : t('labelgreen')}} down</span>\n                            </Trans>\n                        </Typography>\n                        <StyledSwitch checked={upColor === UpColor.green} color=\"default\"\n                                      onChange={handleColorChange}/>\n                    </Grid>\n                </Grid>\n            </Box>\n\n        </StyledPaper>\n\n    </Grid>\n})\n\n// export const SettingPage = ({open,onClose}: { open:boolean, onClose:(e:any)=>void})=>{\n//     return  <MuiModalStyled\n//         open={open}\n//         onClose={onClose}\n//         aria-labelledby=\"modal-modal-title\"\n//         aria-describedby=\"modal-modal-description\"\n//     >\n//         <BlockStyled >\n//            <SettingPanel/>\n//         </BlockStyled>\n//     </MuiModalStyled>\n// }\n\n\n","import { useRouteMatch } from 'react-router'\n\nimport { Box, Paper } from '@material-ui/core'\nimport {\n    DepositPanel,\n    SubMenu,\n    SubMenuList as BasicSubMenuList,\n} from '@loopring-web/component-lib'\nimport { useTranslation, withTranslation } from 'react-i18next'\nimport styled from '@emotion/styled'\nimport { subMenuLayer2 } from '@loopring-web/component-lib/src/static-resource'\n\nimport TxPanel from './TxPanel'\nimport AssetPanel from './AssetPanel'\nimport TradePanel from './TradePanel'\nimport OrderPanel from './OrderPanel'\nimport { SettingPanel } from '../SettingPage';\nimport store from '../../stores';\nimport { AccountStatus } from '../../state_machine/account_machine_spec';\nimport { useModalProps } from '../../layouts/header/hook';\n\nexport const subMenu = subMenuLayer2;\nconst BoxStyle = styled(Box)`\n  ${({theme})=>`\n    background-color: ${theme.colorBase.background().default};\n    width: 100%;\n    min-width:auto;\n    ${theme.border.defaultFrame({c_key: 'blur'})};\n    & > div{\n      background-color:initial;\n      border:0;\n      width:auto;\n      min-width: var(--swap-box-width);\n      max-width: 520px;\n    }\n    `\n  }\n   \n` as typeof Box\n\nconst SubMenuList = withTranslation(['layout','common'], { withRef: true })(BasicSubMenuList);\nexport const Layer2Page = () => {\n\n    let match: any = useRouteMatch(\"/layer2/:item\")\n    const {status: accStatus} = store.getState().account;\n    const {t,...rest} = useTranslation()\n    const selected = match?.params.item ?? 'assets';\n    const {depositProps} = useModalProps()\n\n    return <>  { accStatus === AccountStatus.NOACCOUNT\n    || accStatus === AccountStatus.DEPOSITING\n    || accStatus === AccountStatus.DEPOSIT_TO_CONFIREM ?\n        <BoxStyle display={'flex'} flexWrap={'wrap'} alignItems={'center'} justifyContent={'center'} alignContent={'flex-start'}>\n            <DepositPanel  {...{\n                ...rest, ...depositProps,\n                title: t('depositTitleAndActive'),\n                description: 'depositAndActiveDescription'\n            }} > </DepositPanel>\n        </BoxStyle>: <>\n            <Box width={'200px'} display={'flex'} justifyContent={'stretch'} marginRight={3}>\n                <SubMenu>\n                    <SubMenuList selected={selected} subMenu={subMenu as any} />\n                </SubMenu>\n            </Box>\n            <Box minHeight={420} display={'flex'} alignItems={'stretch'} flexDirection={'column'} marginTop={0} flex={1}>\n                {selected === 'assets' && <AssetPanel />}\n                {selected === 'transactions' && <TxPanel />}\n                {selected === 'trades' && <TradePanel />}\n                {selected === 'orders' && <OrderPanel />}\n                {selected === 'setting' && <SettingPanel />}\n            </Box>\n        </>\n    }\n        </>\n\n\n\n}\n","import { WithTranslation, withTranslation } from 'react-i18next'\nimport { Box, } from '@material-ui/core'\nimport styled from '@emotion/styled'\n\nimport React from 'react';\nimport { useAmmMapUI } from './hook';\n\nimport { PoolsTable } from '@loopring-web/component-lib';\nimport { AmmPoolActivityRule, LoopringMap } from 'loopring-sdk/dist/defs/loopring_defs';\n\nconst StylePaper = styled(Box)`\n  width: 100%;\n  height: 100%;\n  flex: 1;\n  background-color: ${({theme}) => theme.colorBase.background().default};\n  border-radius: ${({theme}) => theme.unit}px;\n\n  .rdg {\n    flex: 1;\n  }\n\n` as typeof Box;\n\n\nexport const PoolsPanel = withTranslation('common')(<R extends { [ key: string ]: any }, I extends { [ key: string ]: any }>\n({t, ammActivityMap, ...rest}: WithTranslation\n    & {\n    ammActivityMap: LoopringMap<LoopringMap<AmmPoolActivityRule[]>> | undefined }) => {\n    const container = React.useRef(null);\n    const [pageSize, setPageSize] = React.useState(10);\n    const {updateTickersUI, rawData, page} = useAmmMapUI({pageSize});\n\n    React.useEffect(() => {\n        // @ts-ignore\n        let height = container?.current?.offsetHeight;\n        if (height) {\n            setPageSize(Math.floor((height - 120) / 44) - 1);\n        }\n    }, [container, pageSize]);\n\n    const handlePageChange = React.useCallback((page) => {\n        updateTickersUI(page)\n    }, [updateTickersUI]);\n    return (\n        <>\n            <StylePaper display={'flex'} flexDirection={'column'} ref={container}>\n                <PoolsTable {...{\n                    rawData,\n                    handlePageChange,\n                    page,\n                    pagination: {\n                        pageSize\n                    }\n                }} />\n            </StylePaper>\n        </>\n    )\n})\n\n","import { AmmPanelType } from '@loopring-web/component-lib';\nimport { AmmDetailBase } from '@loopring-web/component-lib/src/static-resource';\nimport {  volumeToCountAsBigNumber } from './volumeToCount';\n\nexport const ammPairInit = ({pair, _ammCalcData,ammType,tokenMap, coinMap, walletMap,ammMap ,tickerData,ammPoolsBalance}:any)=>{\n    _ammCalcData.coinInfoMap = coinMap;\n    if(tickerData){\n        \n        _ammCalcData.AtoB =  Number(tickerData.close)\n    }\n    if(isNaN(_ammCalcData.AtoB) && ammPoolsBalance){\n        const baseVol = volumeToCountAsBigNumber(pair.coinAInfo.simpleName,ammPoolsBalance.pooled[0].volume);\n        const quoteVol = volumeToCountAsBigNumber(pair.coinBInfo.simpleName,ammPoolsBalance.pooled[1].volume);\n        _ammCalcData.AtoB = quoteVol && baseVol && quoteVol.div(baseVol).toNumber();\n\n    }\n    if(pair.coinAInfo){\n        if(ammType === AmmPanelType.Deposit ) {\n            _ammCalcData.myCoinA = {\n                belong: pair.coinAInfo.simpleName,\n                balance: walletMap ? walletMap[ pair.coinAInfo.simpleName ]?.count : 0,\n            }\n            _ammCalcData.myCoinB = {\n                belong: pair.coinBInfo.simpleName,\n                balance: walletMap ? walletMap[ pair.coinBInfo.simpleName ]?.count : 0,\n            }\n        }else {\n            const key = `${pair.coinAInfo.simpleName}-${pair.coinBInfo.simpleName}`;\n            let coinACount = 0,coinBCount = 0 ;\n            if(walletMap){\n                const  balance =  walletMap ? walletMap[ 'LP-' + key ]?.count : 0;\n                const {totalLPToken,totalA,totalB}:AmmDetailBase<any> = ammMap[ 'AMM-' + key ];\n                if(totalA && totalLPToken &&totalB) {\n                    coinACount = totalA / totalLPToken * balance;\n                    coinBCount = totalB / totalLPToken * balance;\n                }\n            }\n            _ammCalcData.myCoinA = {\n                belong: pair.coinAInfo.simpleName,\n                balance: coinACount,\n            }\n            _ammCalcData.myCoinB = {\n                belong: pair.coinBInfo.simpleName,\n                balance: coinBCount,\n            }\n        }\n    }\n\n\n    return  _ammCalcData\n}\n","import { AmmPanel, AmmPanelType } from '@loopring-web/component-lib';\nimport { AmmData, AmmInData, CoinInfo, IBData, WalletMap } from '@loopring-web/component-lib/static-resource';\nimport { useAmmPanel } from './hooks';\nimport React from 'react';\nimport { Box } from '@material-ui/core';\nimport { AmmPoolSnapshot, TickerData } from 'loopring-sdk';\nimport { TradeBtnStatus } from '@loopring-web/component-lib/components/panel/index';\n\nexport const AmmPanelView = <T extends AmmData<C extends IBData<I> ? C : IBData<I>>, I,\n    ACD extends AmmInData<I>,\n    C = IBData<I>>({\n                       pair,\n                       walletMap,\n                       ammType, snapShotData,\n                       ...rest\n                   }: {\n    pair: { coinAInfo: CoinInfo<C> | undefined, coinBInfo: CoinInfo<C> | undefined },\n    snapShotData: { tickerData: TickerData | undefined, ammPoolsBalance: AmmPoolSnapshot | undefined } | undefined\n    walletMap: WalletMap<C>\n    ammType?: keyof typeof AmmPanelType\n} & any) => {\n    const {\n        ammCalcData,\n        ammDepositData,\n        ammWithdrawData,\n        handleDepositEvent,\n        handleWithDrawEvent,\n        onAmmWithdrawClick,\n        onAmmDepositClick,\n        ammDepositBtnI18nKey,\n        ammWithdrawBtnI18nKey,\n    } = useAmmPanel({\n        pair,\n        snapShotData, walletMap, ammType: ammType ? ammType : AmmPanelType.Deposit\n    })\n\n    // const [index, setIndex] = React.useState(AmmPanelTypeMap[ tabSelected ]);\n    const isLoading = React.useCallback(()=>{\n        if((!snapShotData || !snapShotData.tradeData || !snapShotData.ammPoolsBalance)\n            &&  ammDepositBtnI18nKey === undefined\n            &&  ammWithdrawBtnI18nKey === undefined\n        ) {\n          return true\n        }\n    },[snapShotData,ammWithdrawBtnI18nKey,ammWithdrawBtnI18nKey])\n\n    return <> {pair ?\n        <AmmPanel {...{...rest}}\n                  ammWithdrawData={ammWithdrawData}\n                  ammDepositData={ammDepositData}\n                  ammCalcData={ammCalcData}\n                  handleDepositEvent={handleDepositEvent}\n                  handleWithDrawEvent={handleWithDrawEvent}\n                  onAmmWithdrawClick={onAmmWithdrawClick}\n                  onAmmDepositClick={onAmmDepositClick}\n                  tabSelected={ammType ? ammType : AmmPanelType.Deposit}\n                  ammDepositBtnI18nKey={ammDepositBtnI18nKey}\n                  ammWithdrawBtnI18nKey={ammWithdrawBtnI18nKey}\n                  ammDepositBtnStatus={isLoading()?TradeBtnStatus.LOADING:TradeBtnStatus.AVAILABLE}\n                  ammWithdrawBtnStatus={isLoading()?TradeBtnStatus.LOADING:TradeBtnStatus.AVAILABLE}\n\n        /> : <Box width={'var(--swap-box-width)'}/>}\n    </>\n\n}","import React from \"react\";\nimport { AmmData, AmmInData, CoinInfo, IBData } from '@loopring-web/component-lib/src/static-resource';\nimport { AmmPanelType } from '@loopring-web/component-lib';\nimport { useTokenMap } from '../../../stores/token';\nimport { useAmmMap } from '../../../stores/Amm/AmmMap';\nimport { ammPairInit } from '../../../hooks/help/ammPairDetail';\nimport {  WalletMap } from '@loopring-web/component-lib/static-resource';\nimport { AmmPoolSnapshot, TickerData } from 'loopring-sdk';\nimport { useCustomDCEffect } from '../../../hooks/common/useCustomDCEffect';\nimport { accountStaticCallBack, bntLabel, btnClickArray, fnType } from '../../../hooks/help/connetStatusCallback';\nimport { useAccount } from '../../../stores/account/hook';\nimport { makeCache } from '../../../hooks/help/makeCache';\n\n\n\nexport const useAmmPanel = <C extends { [ key: string ]: any }>({\n                                                                    pair,\n                                                                    walletMap,\n                                                                    ammType,\n                                                                    snapShotData,\n                                                                }\n                                                                    : {\n    pair: { coinAInfo: CoinInfo<C> | undefined, coinBInfo: CoinInfo<C> | undefined },\n    snapShotData:{ tickerData: TickerData|undefined,ammPoolsBalance: AmmPoolSnapshot|undefined }|undefined\n    walletMap: WalletMap<C>\n    ammType: keyof typeof AmmPanelType\n}) => {\n    // const walletLayer2State = useWalletLayer2();\n    const {coinMap, tokenMap} = useTokenMap();\n    const {ammMap} = useAmmMap();\n    const {account} = useAccount();\n\n    const [ammCalcData, setAmmCalcData] = React.useState<AmmInData<C> | undefined>();\n    const [ammDepositData, setAmmDepositData] = React.useState<AmmData<IBData<C>, C>>({\n        coinA: {belong: undefined} as unknown as IBData<C>,\n        coinB: {belong: undefined} as unknown as IBData<C>,\n        slippage: .5\n    } as AmmData<IBData<C>, C>);\n    const [ammWithdrawData, setAmmWithdrawData] = React.useState({\n        coinA: {belong: undefined} as unknown as IBData<C>,\n        coinB: {belong: undefined} as unknown as IBData<C>,\n        slippage: .5\n    } as AmmData<IBData<C>, C>);\n    const [ammDepositBtnI18nKey, setAmmDepositBtnI18nKey] = React.useState<string | undefined>(undefined);\n    const [ammWithdrawBtnI18nKey, setAmmWithdrawBtnI18nKey] = React.useState<string | undefined>(undefined);\n\n    const initAmmData = React.useCallback(async (pair: any) => {\n        let _ammCalcData: Partial<AmmInData<C>> = ammPairInit(\n            {\n                pair,\n                ammType,\n                _ammCalcData: {},\n                tokenMap,\n                coinMap,\n                walletMap: walletMap, //walletLayer2State.walletLayer2,\n                ammMap,\n                tickerData:snapShotData?.tickerData,\n                ammPoolsBalance: snapShotData?.ammPoolsBalance\n            })\n        setAmmCalcData({...ammCalcData, ..._ammCalcData} as AmmInData<C>);\n        if (_ammCalcData.myCoinA) {\n            if (ammType === AmmPanelType.Deposit) {\n                setAmmDepositData({\n                    coinA: _ammCalcData.myCoinA as IBData<C>,\n                    coinB: _ammCalcData.myCoinB as IBData<C>,\n                    slippage: 0.5\n                })\n            } else {\n                setAmmWithdrawData({\n                    coinA: _ammCalcData.myCoinA as IBData<C>,\n                    coinB: _ammCalcData.myCoinB as IBData<C>,\n                    slippage: 0.5\n                })\n            }\n        }\n    },[snapShotData,walletMap])\n\n    const handleDepositEvent = React.useCallback((data: AmmData<IBData<C>>, type: 'coinA' | 'coinB') => {\n        console.log('handleDepositEvent', data, type);\n    }, []);\n\n    const handleWithDrawEvent = React.useCallback((data: AmmData<IBData<C>>, type: 'coinA' | 'coinB') => {\n        console.log('handleDepositEvent', data, type);\n    }, []);\n\n\n    React.useEffect(() => {\n        if (snapShotData) {\n            initAmmData(pair)\n        }\n    }, [snapShotData,pair,initAmmData,walletMap]);\n\n\n\n    useCustomDCEffect(() => {\n        const label:string|undefined = accountStaticCallBack(bntLabel)\n        setAmmDepositBtnI18nKey(label);\n        setAmmWithdrawBtnI18nKey(label)\n    }, [account.status, bntLabel])\n\n\n    const onAmmWithdrawClick = React.useCallback((props:AmmData<IBData<C>>) => {\n        const  onAmmWithdrawClickArray: typeof  btnClickArray =  Object.assign(btnClickArray,{\n            [ fnType.ACTIVATED ]: [  function (props:AmmData<IBData<C>>) {\n                //TODO: onWithdraw\n                console.log('onAmmWithdraw',props)\n\n                if(props.__cache__){\n                    makeCache(props.__cache__)\n                }\n            },props]\n        })\n        accountStaticCallBack(onAmmWithdrawClickArray)\n    }, []);\n\n    const onAmmDepositClick = React.useCallback((props:AmmData<IBData<C>>) => {\n        const  onAmmDepositClickArray: typeof  btnClickArray =  Object.assign(btnClickArray,{\n            [ fnType.ACTIVATED ]: [  function () {\n                //TODO: onDeposit\n                console.log(' onAmmDeposit',props)\n                if(props.__cache__){\n                    makeCache(props.__cache__)\n                }\n            },props]\n        })\n        accountStaticCallBack(onAmmDepositClickArray)\n    }, []);\n\n\n    return {\n        ammCalcData,\n        ammDepositData,\n        ammWithdrawData,\n        handleDepositEvent,\n        handleWithDrawEvent,\n        onAmmWithdrawClick,\n        onAmmDepositClick,\n        ammDepositBtnI18nKey,\n        ammWithdrawBtnI18nKey,\n    }\n}","import {\n    AmmPoolActivityRule,\n    AmmPoolActivityStatus,\n    AmmPoolSnapshot,\n    LoopringMap,\n    TickerData,\n    toBig,\n} from 'loopring-sdk';\nimport { AmmActivity, AmmCardProps } from '@loopring-web/component-lib/static-resource';\nimport store from '../../stores';\nimport { deepClone } from '../../utils/obj_tools';\nimport { AmmUserReward, AmmUserRewardMap } from 'loopring-sdk/dist/defs/loopring_defs';\nimport BigNumber from 'bignumber.js';\nimport { MyAmmLP } from '@loopring-web/component-lib/src/static-resource';\nimport { volumeToCount, volumeToCountAsBigNumber } from './volumeToCount';\nimport { coinMap } from '@loopring-web/component-lib/static';\nimport { AmmDetailStore } from '../../stores/Amm/AmmMap';\nimport { WalletMapExtend } from './makeWallet';\n\nexport type AmmActivityViewMap<R, I> = {\n    [key in keyof R]?: AmmActivity<I>[] | undefined\n}\nexport const makeUIAmmActivityMap = <R extends { [ key: string ]: any }, I extends { [ key: string ]: any }>\n({ammActivityMap, type, ammPoolActivityStatus}: {\n    ammActivityMap: LoopringMap<LoopringMap<AmmPoolActivityRule[ ]>> | undefined,\n    type: 'AMM_MINING' | 'SWAP_VOLUME_RANKING',\n    ammPoolActivityStatus: AmmPoolActivityStatus[]\n}, myReward: AmmUserRewardMap | undefined):\n    Array<AmmCardProps<I>> => {\n    const {coinMap, tokenMap, idIndex} = store.getState().tokenMap\n    let ammActivityViewMap: AmmActivityViewMap<R, I> = {}\n    if (ammActivityMap && ammActivityMap[ type ]) {\n        \n\n        // @ts-ignore\n        ammPoolActivityStatus.forEach((status: AmmPoolActivityStatus) => {\n\n            if (ammActivityMap[ type ][ status ]) {\n                // @ts-ignore\n                ammActivityMap[ type ][ status ].reduce((prev: AmmActivityViewMap<R, I>, ammPoolActivityRule: AmmPoolActivityRule) => {\n\n                    if (coinMap && ammPoolActivityRule.awardRules[ 0 ] && idIndex && tokenMap) {\n\n                        const symbol = idIndex[ ammPoolActivityRule.awardRules[ 0 ].tokenId as any ]\n\n                        // @ts-ignore\n                        const item = {\n                            // @ts-ignore\n                            rewardToken: coinMap[ symbol ],\n                            myRewards: status === AmmPoolActivityStatus.InProgress && myReward && myReward[ ammPoolActivityRule.market ] ?\n                                volumeToCount(symbol, myReward[ ammPoolActivityRule.market ]?.currentRewards[ 0 ].volume) : 0,\n                            duration: {\n                                from: new Date(ammPoolActivityRule?.rangeFrom),\n                                to: new Date(ammPoolActivityRule?.rangeTo),\n                            },\n                            isPass: AmmPoolActivityStatus.EndOfGame === status,\n                        }\n                        if (prev[ ammPoolActivityRule.market ]) {\n                            // @ts-ignore\n                            prev[ ammPoolActivityRule.market ].push(item);\n                        } else {\n                            // @ts-ignore\n                            prev[ ammPoolActivityRule.market ] = [item];\n                        }\n\n                        \n                        // return prev;\n                    }\n                    return prev;\n                }, ammActivityViewMap)\n\n            }\n        })\n    }\n    const resultArray = makeAsCard(ammActivityViewMap)\n    // console.log(resultArray)\n    return resultArray;\n\n\n}\nconst makeAsCard = <R extends { [ key: string ]: any }, I extends { [ key: string ]: any }>\n(ammActivityViewMap: AmmActivityViewMap<R, I> | undefined, myReward?: any): Array<AmmCardProps<I>> => {\n    const {coinMap} = store.getState().tokenMap\n    const {ammMap} = store.getState().amm.ammMap\n    try {\n        if (ammActivityViewMap && coinMap) {\n            // @ts-ignore\n            return Reflect.ownKeys(ammActivityViewMap).reduce((prev: Array<AmmCardProps<I>>, key: string) => {\n                const _ammInfo = ammMap[ key as string ]\n                if (_ammInfo && _ammInfo.coinA && coinMap && ammActivityViewMap[ key ]) {\n                    \n                    // @ts-ignore\n                    const itemArray = ammActivityViewMap[ key ].map((item) => {\n                        return {\n                            ...deepClone(_ammInfo),\n                            // @ts-ignore\n                            coinAInfo: coinMap[ _ammInfo.coinA ],\n                            // @ts-ignore\n                            coinBInfo: coinMap[ _ammInfo.coinB ],\n                            activity: item,\n                        }\n                    })\n                    prev = [...prev, ...itemArray]\n                }\n                return prev;\n            }, [] as Array<AmmCardProps<I>>) as Array<AmmCardProps<I>>\n        } else {\n            return [] as Array<AmmCardProps<I>>\n        }\n    } catch (error) {\n        console.log(error)\n        return []\n    }\n}\ntype Value = undefined | number;\nexport type SummaryMyAmm = {\n    rewardDollar: Value,\n    rewardYuan: Value,\n    feeDollar: Value,\n    feeYuan: Value,\n}\nexport const makeSummaryMyAmm = <C extends { [ key: string ]: any }>({\n                                                                         userRewardsMap\n                                                                     }: {\n    userRewardsMap: LoopringMap<AmmUserReward> | undefined\n}):\n    SummaryMyAmm | undefined => {\n    const {coinMap, idIndex, tokenMap} = store.getState().tokenMap;\n    const {faitPrices, forex} = store.getState().system;\n    if (userRewardsMap && idIndex && coinMap && tokenMap && faitPrices && forex) {\n        let summaryMyAmm = Object.keys(userRewardsMap).reduce((prev, key) => {\n            if (/AMM-/i.test(key)) {\n                // @ts-ignore\n                const [, coinA, coinB] = key.match(/AMM-(\\w+)-(\\w+)/i);\n                const ammUserReward = userRewardsMap[ key ]\n                const {\n                    rewardDollar,\n                    rewardYuan,\n                    feeDollar,\n                    feeYuan\n                } = getOneRewardInfo({coinB, coinA, ammUserReward, idIndex, faitPrices, forex})\n                prev.rewardDollar = rewardDollar ? toBig(rewardDollar).plus(prev.rewardDollar).toNumber() : 0;\n                prev.rewardYuan = rewardYuan ? toBig(rewardYuan).plus(prev.rewardYuan).toNumber() : 0;\n                prev.feeDollar = feeDollar ? toBig(feeDollar).plus(prev.feeDollar).toNumber() : 0;\n                prev.feeYuan = feeYuan ? toBig(feeYuan).plus(prev.feeYuan).toNumber() : 0;\n            }\n            return prev\n        }, {\n            rewardDollar: 0,\n            rewardYuan: 0,\n            feeDollar: 0,\n            feeYuan: 0\n        })\n\n        return summaryMyAmm\n    }\n    return undefined\n}\nconst getOneRewardInfo = <C>({coinA, coinB, ammUserReward, idIndex, faitPrices, forex, walletMap, snapShotData}: any) => {\n    let rewardToken, rewardToken2, feeA, feeB, feeDollar, feeYuan, reward, reward2, rewardDollar, rewardYuan;\n    if (ammUserReward) {\n        rewardToken = ammUserReward.currentRewards[ 0 ] ? idIndex[ ammUserReward.currentRewards[ 0 ].tokenId as number ] : undefined\n        rewardToken2 = ammUserReward.currentRewards[ 1 ] ? idIndex[ ammUserReward.currentRewards[ 1 ].tokenId as number ] : undefined\n        feeA = ammUserReward ? volumeToCountAsBigNumber(coinA, ammUserReward.feeRewards[ 0 ]) : toBig(0);\n        feeB = ammUserReward ? volumeToCountAsBigNumber(coinB, ammUserReward.feeRewards[ 1 ]) : toBig(0);\n        feeA = feeA ? feeA : toBig(0);\n        feeB = feeB ? feeB : toBig(0);\n        feeDollar = feeA.times(faitPrices[ coinA ].price).plus(feeB.times(faitPrices[ coinB ].price))\n        feeYuan = feeDollar.times(forex);\n        reward = rewardToken ? volumeToCountAsBigNumber(rewardToken, ammUserReward.currentRewards[ 0 ].volume) as BigNumber : toBig(0);\n        reward2 = rewardToken2 ? volumeToCountAsBigNumber(rewardToken2, ammUserReward.currentRewards[ 1 ].volume) as BigNumber : toBig(0);\n        reward = reward ? reward : toBig(0);\n        reward2 = reward2 ? reward2 : toBig(0);\n        rewardDollar = reward.times(rewardToken ? faitPrices[ rewardToken ].price : 1).plus(reward2.times(rewardToken2 ? faitPrices[ rewardToken2 ].price : 1));\n        rewardYuan = rewardDollar.times(forex);\n    }\n    let balanceA, balanceB, balanceDollar, balanceYuan;\n    if (walletMap && walletMap[ 'LP-' + coinA + '-' + coinB ] && snapShotData) {\n        // @ts-ignore\n        const ratio = new BigNumber(_walletMap[ 'LP-' + coinA + '-' + coinB ].detail.total).div(snapShotData.ammPoolsBalance.lp.volume);\n        balanceA = ratio.times(volumeToCountAsBigNumber(coinA, snapShotData.ammPoolsBalance.pooled[ 0 ].volume) || 1);\n        balanceB = ratio.times(volumeToCountAsBigNumber(coinB, snapShotData.ammPoolsBalance.pooled[ 1 ].volume) || 1);\n        // @ts-ignore\n        balanceDollar = balanceA.times(faitPrices[ coinA ].price).plus(balanceB .times( faitPrices[ coinB ].price))\n        balanceYuan = balanceDollar.times(forex)\n    }\n\n    return {\n        feeA:feeA? feeA.toNumber():undefined,\n        feeB:feeB? feeB.toNumber():undefined,\n        reward:reward? reward.toNumber():undefined,\n        rewardToken: rewardToken? coinMap[ rewardToken ]:undefined,\n        reward2:reward2? reward2.toNumber(): undefined,\n        rewardToken2: rewardToken2? coinMap[ rewardToken2 ]:undefined,\n        rewardDollar: rewardDollar?rewardDollar.toNumber():undefined,\n        rewardYuan: rewardYuan? rewardYuan.toNumber():undefined,\n        feeDollar: feeDollar? feeDollar.toNumber():undefined,\n        feeYuan: feeYuan? feeYuan.toNumber():undefined,\n        ammDetail: {\n            coinAInfo: coinMap[ coinA ],\n            coinBInfo: coinMap[ coinB ]\n        },\n        balanceA: balanceA? balanceA.toNumber():undefined,\n        balanceB: balanceB? balanceB.toNumber():undefined ,\n        balanceDollar: balanceDollar?balanceDollar.toNumber():undefined,\n        balanceYuan: balanceYuan? balanceYuan.toNumber():undefined,\n    } as MyAmmLP<C>\n}\n\nexport const makeMyAmmWithSnapshot = <C extends { [ key: string ]: any }>(market: any, _walletMap: WalletMapExtend<C> | undefined, ammUserRewardMap: LoopringMap<AmmUserReward> | undefined, snapShotData?: {\n    tickerData?: TickerData | undefined\n    ammPoolsBalance: AmmPoolSnapshot | undefined\n} | undefined) => {\n    const {coinMap, idIndex, tokenMap} = store.getState().tokenMap;\n    const {faitPrices, forex} = store.getState().system;\n    const [, coinA, coinB] = market.match(/(\\w+)-(\\w+)/i);\n    let _myAmm: Partial<MyAmmLP<C>> = {};\n    if (ammUserRewardMap && ammUserRewardMap[ 'AMM-' + market ]\n        && snapShotData && snapShotData.ammPoolsBalance) {\n        const ammUserReward: AmmUserReward = ammUserRewardMap[ 'AMM-' + market ];\n        // @ts-ignore\n        if (coinMap && tokenMap && idIndex && forex && faitPrices) {\n             _myAmm = getOneRewardInfo({coinA, coinB, ammUserReward,\n                idIndex, faitPrices, forex, walletMap:_walletMap, snapShotData})\n\n            return _myAmm as MyAmmLP<C>\n        }\n    }\n    return {\n        feeA: undefined,\n        feeB: undefined,\n        feeDollar: undefined,\n        feeYuan: undefined,\n        reward: undefined,\n        rewardToken: undefined as any,\n        balanceA: undefined,\n        balanceB: undefined,\n        balanceYuan: undefined,\n        balanceDollar: undefined,\n    }\n}\n\nexport const makeMyAmmWithStat = <C extends { [ key: string ]: any }>\n(market: any,\n _walletMap: WalletMapExtend<C> | undefined,\n ammUserRewardMap: LoopringMap<AmmUserReward> | undefined,\n ammDetail: AmmDetailStore<C>) => {\n    const {coinMap, idIndex, tokenMap} = store.getState().tokenMap;\n    const {faitPrices, forex} = store.getState().system;\n    const [, coinA, coinB] = market.match(/(\\w+)-(\\w+)/i);\n    let _myAmm = {};\n    let balanceA, balanceB, balanceDollar, balanceYuan;\n    if (_walletMap && _walletMap[ 'LP-' + coinA + '-' + coinB ] && forex ) {\n        // @ts-ignore\n        const ratio = new BigNumber(_walletMap[ 'LP-' + coinA + '-' + coinB ].detail.total).div(ammDetail.totalLPToken);\n        balanceA = ratio.times(volumeToCountAsBigNumber(coinA, ammDetail.totalA?ammDetail.totalA:0) || 1);\n        balanceB = ratio.times(volumeToCountAsBigNumber(coinB, ammDetail.totalB?ammDetail.totalB:0) || 1);\n        // @ts-ignore\n        balanceDollar = balanceA.times(faitPrices[ coinA ].price).plus(balanceB .times( faitPrices[ coinB ].price))\n        balanceYuan = balanceDollar.times(forex);\n        _myAmm = {\n            // ...ammDetail,\n            balanceA: balanceA.toNumber(),\n            balanceB: balanceB.toNumber(),\n            balanceYuan: balanceYuan.toNumber(),\n            balanceDollar: balanceDollar.toNumber(),\n        }\n    }\n    if (ammUserRewardMap && ammUserRewardMap[ 'AMM-' + market ]\n        && ammDetail && forex) {\n        const ammUserReward: AmmUserReward = ammUserRewardMap[ 'AMM-' + market ];\n        let rewardToken, rewardToken2, feeA, feeB, feeDollar, feeYuan, reward, reward2, rewardDollar, rewardYuan;\n\n        if (coinMap && tokenMap && idIndex && forex && faitPrices && ammUserReward) {\n            rewardToken = ammUserReward.currentRewards[ 0 ] ? idIndex[ ammUserReward.currentRewards[ 0 ].tokenId as number ] : undefined\n            rewardToken2 = ammUserReward.currentRewards[ 1 ] ? idIndex[ ammUserReward.currentRewards[ 1 ].tokenId as number ] : undefined\n            feeA = ammUserReward ? volumeToCountAsBigNumber(coinA, ammUserReward.feeRewards[ 0 ]) : toBig(0);\n            feeB = ammUserReward ? volumeToCountAsBigNumber(coinB, ammUserReward.feeRewards[ 1 ]) : toBig(0);\n            feeA = feeA ? feeA : toBig(0);\n            feeB = feeB ? feeB : toBig(0);\n            feeDollar = feeA.times(faitPrices[ coinA ].price).plus(feeB.times(faitPrices[ coinB ].price))\n            feeYuan = feeDollar.times(forex);\n            reward = rewardToken ? volumeToCountAsBigNumber(rewardToken, ammUserReward.currentRewards[ 0 ].volume) as BigNumber : toBig(0);\n            reward2 = rewardToken2 ? volumeToCountAsBigNumber(rewardToken2, ammUserReward.currentRewards[ 1 ].volume) as BigNumber : toBig(0);\n            reward = reward ? reward : toBig(0);\n            reward2 = reward2 ? reward2 : toBig(0);\n            rewardDollar = reward.times(rewardToken ? faitPrices[ rewardToken ].price : 1).plus(reward2.times(rewardToken2 ? faitPrices[ rewardToken2 ].price : 1));\n            rewardYuan = rewardDollar.times(forex);\n            _myAmm = {\n               ..._myAmm,\n                feeA:feeA? feeA.toNumber():undefined,\n                feeB:feeB? feeB.toNumber():undefined,\n                reward:reward? reward.toNumber():undefined,\n                // @ts-ignore\n                rewardToken: rewardToken ? coinMap[ rewardToken ]: undefined,\n                reward2:reward2? reward2.toNumber(): undefined,\n                // @ts-ignore\n                rewardToken2: rewardToken2? coinMap[ rewardToken2 ]: undefined,\n                rewardDollar: rewardDollar?rewardDollar.toNumber():undefined,\n                rewardYuan: rewardYuan? rewardYuan.toNumber():undefined,\n                feeDollar: feeDollar? feeDollar.toNumber():undefined,\n                feeYuan: feeYuan? feeYuan.toNumber():undefined,\n                ammDetail: {\n                    // @ts-ignore\n                    coinAInfo: coinA ? coinMap[ coinA ] : undefined,\n                    // @ts-ignore\n                    coinBInfo: coinB ? coinMap[ coinB ] : undefined,\n                },\n            }\n\n        }\n        return _myAmm as MyAmmLP<C>\n    }\n    return {\n        feeA: undefined,\n        feeB: undefined,\n        feeDollar: undefined,\n        feeYuan: undefined,\n        reward: undefined,\n        rewardToken: undefined as any,\n        balanceA: undefined,\n        balanceB: undefined,\n        balanceYuan: undefined,\n        balanceDollar: undefined,\n    }\n}\n\n// if (ammUserReward) {\n//     const symbol = ammUserReward.currentRewards[ 0 ] ? idIndex[ ammUserReward.currentRewards[ 0 ].tokenId as number ] : undefined\n//     const symbol2 = ammUserReward.currentRewards[ 1 ] ? idIndex[ ammUserReward.currentRewards[ 1 ].tokenId as number ] : undefined\n//\n//     _myAmm = {\n//         ..._myAmm,\n//         feeA: ammUserReward ? volumeToCount(coinA, ammUserReward.feeRewards[ 0 ]) : 0,//Number(ammUserReward.feeRewards[ 0 ]) : 0,\n//         feeB: ammUserReward ? volumeToCount(coinB, ammUserReward.feeRewards[ 1 ]) : 0,//Number(ammUserReward.feeRewards[ 1 ]) : 0,\n//         reward: symbol ? volumeToCount(symbol, ammUserReward.currentRewards[ 0 ].volume) : 0,\n//         // @ts-ignore\n//         rewardToken: symbol ? coinMap[ symbol ] : undefined,\n//         reward2: symbol2 ? volumeToCount(symbol2, ammUserReward.currentRewards[ 1 ].volume) : 0,\n//         // @ts-ignore\n//         rewardToken2: symbol2 ? coinMap[ symbol2 ] : undefined,\n//\n//\n//     }\n//     _myAmm.feeDollar = _myAmm.feeA && _myAmm.feeA * faitPrices[ coinA ].price;\n//     _myAmm.feeDollar = _myAmm.feeB && _myAmm.feeB * faitPrices[ coinB ].price;\n// }\n//\n//\n// if (_walletMap && _walletMap[ 'LP-' + market ]) {\n//     // @ts-ignore\n//     const ratio = new BigNumber(_walletMap[ 'LP-' + market ].detail.total).div(snapShotData.ammPoolsBalance.lp.volume);\n//     _myAmm = {\n//         ..._myAmm,  //snapShotData.ammPoolsBalance.pooled[ 0 ].volume).div(BIG10.pow(tokenMap[coinA].decimals)\n//         balanceA: ratio.times(volumeToCountAsBigNumber(coinA, snapShotData.ammPoolsBalance.pooled[ 0 ].volume) || 1).toNumber(),\n//         balanceB: ratio.times(volumeToCountAsBigNumber(coinB, snapShotData.ammPoolsBalance.pooled[ 1 ].volume) || 1).toNumber(),\n//     }\n//     // @ts-ignore\n//     _myAmm.balanceDollar = _myAmm.balanceA * faitPrices[ coinA ].price + _myAmm.balanceB * faitPrices[ coinB ].price\n//     _myAmm.balanceYuan = _myAmm.balanceDollar * forex\n// }\n\n// export const getAmmPoolGameUserRanks = ():Promise<AmmUserRewardMap> => {\n//     const {accountId} = store.getState().account\n//     //https://api3.loopring.io/api/v2/amm/user/rewards?owner=10917\n//     if(LoopringAPI.ammpoolAPI){\n//         return LoopringAPI.ammpoolAPI.getAmmPoolUserRewards({owner:accountId}).then(({ammUserRewardMap}:any)=>{\n//               return ammUserRewardMap  as AmmUserRewardMap\n//         })\n//     }else{\n//         return  Promise.resolve({} as AmmUserRewardMap);\n//     }\n//\n//     // return LoopringAPI.ammpoolAPI?.getUserAmmPoolTxs({accountId}, apiKey).then(({userAmmPoolTxs}) => {\n//     //     return userAmmPoolTxs\n//     // })\n//     // if(LoopringAPI.ammpoolAPI)   {\n//     //    let promiseList =  marketKeys.map((key)=>{\n//     //         // @ts-ignore\n//     //         return LoopringAPI.ammpoolAPI.getAmmPoolGameUserRank({owner:accAddr,ammPoolMarket:'key'},apiKey)\n//     //     })\n//     //     return Promise.all(promiseList).then(\n//     //         (array:any[])=>{\n//     //\n//     //           return  array.reduce((prev,item:{userRankList:GameRankInfo[]},index)=>{\n//     //                 const market = marketKeys[index]\n//     //                 prev[ market] = item.userRankList[0]\n//     //                 return item.userRankList[0]\n//     //             },{})\n//     //\n//     //         }\n//     //     )\n//     // }else{\n//     //   return  Promise.resolve({});\n//     // }\n//\n//\n//\n//\n// }\n//\n\n// {\n//     userRankList: GameRankInfo[];\n//     raw_data: any;\n// }\n","import React from \"react\";\nimport {\n    AmmActivity,\n    CoinInfo,\n    TradeFloat,\n    WalletMap\n} from \"@loopring-web/component-lib/static-resource\";\nimport { useTokenMap } from \"stores/token\";\nimport { useRouteMatch } from 'react-router';\nimport { AmmDetailStore, useAmmMap } from '../../../stores/Amm/AmmMap';\nimport { useWalletLayer2 } from '../../../stores/walletLayer2';\nimport { pairDetailBlock } from '../../../hooks/help/pairDetail';\nimport { AmmPoolSnapshot, AmmUserRewardMap, getExistedMarket, TickerData } from 'loopring-sdk';\nimport { makeTickView } from '../../../hooks/help/makeTickView';\nimport { useAmmActivityMap } from '../../../stores/Amm/AmmActivityMap';\nimport { deepClone } from '../../../utils/obj_tools';\nimport { makeWallet, WalletMapExtend } from '../../../hooks/help/makeWallet';\nimport {\n    getUserAmmTransaction, makeMyAmmMarketArray\n} from '../../../hooks/help/marketTable';\nimport { AmmRecordRow } from '@loopring-web/component-lib/components/tableList/ammRecordTable/Interface';\nimport { AmmPoolActivityRule, LoopringMap } from 'loopring-sdk/dist/defs/loopring_defs';\nimport { MyAmmLP } from '@loopring-web/component-lib/src/static-resource';\nimport { useSystem } from '../../../stores/system';\nimport {\n     makeMyAmmWithSnapshot\n} from '../../../hooks/help/makeUIAmmActivityMap';\nimport store from '../../../stores';\nimport { useUserRewards } from '../../../stores/userRewards';\n\nconst makeAmmDetailExtendsActivityMap = ({ammMap, coinMap, ammActivityMap, ammKey}: any) => {\n    \n    if (ammMap && coinMap) {\n        let ammDetail = deepClone(ammMap[ ammKey as string ]);\n        const ammActivity = ammActivityMap [ ammKey as string ];\n        \n        if (ammDetail && ammDetail.coinA) {\n            ammDetail.myCoinA = coinMap[ ammDetail.coinA ];\n            ammDetail.myCoinB = coinMap[ ammDetail.coinB ];\n            ammDetail[ 'activity' ] = ammActivity ? ammActivity : {};\n        }\n        return ammDetail;\n    }\n}\ntype PgAmmDetail<C extends { [ key: string ]: any }> = AmmDetailStore<C> & {\n    myCoinA: CoinInfo<C>,\n    myCoinB: CoinInfo<C>,\n    activity: AmmActivity<C> | undefined\n}\n\n\n\nexport const useCoinPair = <C extends { [ key: string ]: any }>(ammActivityMap:LoopringMap<LoopringMap<AmmPoolActivityRule[]>>) => {\n    const match: any = useRouteMatch(\"/liquidity/pools/coinPair/:symbol\")\n    const {coinMap, tokenMap, marketArray} = useTokenMap();\n    const {faitPrices} = useSystem();\n    const ammMapState = useAmmMap();\n    const useUserRewardsState  = useUserRewards()\n\n    // const {account} = useAccount();\n\n\n    const {ammMap, updateAmmMap} = ammMapState;\n\n    // const {ammMap,updateAmmMap} = useAmmMap();\n    const walletLayer2State = useWalletLayer2();\n    const [walletMap, setWalletMap] =  React.useState<WalletMapExtend<C>|undefined>(undefined);\n    // const [ammRecordArray, setAmmRecordArray] = React.useState<AmmRecordRow<C>[]>([]);\n    const [ammMarketArray, setAmmMarketArray] = React.useState<AmmRecordRow<C>[]>([]);\n\n    \n    const [myAmmMarketArray, setMyAmmMarketArray] = React.useState<AmmRecordRow<C>[]>([]);\n    const [ammUserRewardMap, setAmmUserRewardMap] = React.useState<AmmUserRewardMap|undefined>(undefined);\n    const [snapShotData,setSnapShotData] = React.useState<{\n        tickerData: TickerData|undefined\n        ammPoolsBalance: AmmPoolSnapshot|undefined\n    }|undefined>(undefined);\n\n    const [myAmm, setMyAmm] = React.useState<MyAmmLP<C>>(\n        {\n            feeA: 0,\n            feeB: 0,\n            feeDollar: 0,\n            feeYuan: 0,\n            reward: 0,\n            rewardToken: undefined as any,\n            balanceA: 0,\n            balanceB: 0,\n            balanceYuan: 0,\n            balanceDollar: 0,\n        })\n    // const [ammPoolsBalance, setAmmpoolsbalance] = React.useState<AmmPoolSnapshot|undefined>(undefined);\n    const [coinPairInfo, setCoinPairInfo] = React.useState<PgAmmDetail<C>>({\n        myCoinA: undefined,\n        myCoinB: undefined,\n        activity: undefined,\n        totalRewards: undefined,\n        amountDollar: undefined,\n        amountYuan: undefined,\n        totalLPToken: undefined,\n        totalA: undefined,\n        totalB: undefined,\n        rewardToken: undefined,\n        rewardValue: undefined,\n        feeA: undefined,\n        feeB: undefined,\n        isNew: undefined,\n        isActivity: undefined,\n        APY:undefined\n    } as unknown as PgAmmDetail<C>);\n    const [tradeFloat, setTradeFloat] = React.useState<TradeFloat | undefined>(undefined);\n    const [pair, setPair] = React.useState<{ coinAInfo: CoinInfo<C> | undefined, coinBInfo: CoinInfo<C> | undefined }>({\n        coinAInfo: undefined,\n        coinBInfo: undefined,\n    });\n\n    const walletLayer2DoIt =React.useCallback((market)=>{\n        // let {market} = getExistedMarket(marketArray, pair.coinAInfo?.simpleName as string, pair.coinBInfo?.simpleName as string);\n\n        const {walletMap : _walletMap} = makeWallet();\n        setWalletMap(_walletMap)\n        if (_walletMap) {\n            getUserAmmTransaction()?.then((marketTrades)=>{\n                let _myTradeArray  = makeMyAmmMarketArray(market, marketTrades)\n                setMyAmmMarketArray(_myTradeArray?_myTradeArray:[])\n            })\n        }\n        return _walletMap\n    } ,[makeWallet,getUserAmmTransaction,makeMyAmmMarketArray,marketArray,pair])\n\n    React.useEffect(() => {\n        const coinKey = match?.params.symbol ?? undefined;\n        let _tradeFloat: Partial<TradeFloat> = {}\n        const [, coinA, coinB] = coinKey.match(/(\\w+)-(\\w+)/i)\n        let {\n            amm,\n            market\n        } = getExistedMarket(marketArray, coinA, coinB);\n\n        const _coinPairInfo = makeAmmDetailExtendsActivityMap({ammMap, coinMap, ammActivityMap, ammKey: amm})\n        setCoinPairInfo(_coinPairInfo ? _coinPairInfo : {})\n\n        if (coinMap) {\n            setPair({\n                coinAInfo: coinMap[ coinA ],\n                coinBInfo: coinMap[ coinB ]\n            })\n        }\n\n        // let _walletMap: WalletMapExtend<C>|undefined = undefined\n        if (walletLayer2State.walletLayer2) {\n            walletLayer2DoIt(market);\n        }\n\n        if (amm && market && ammMap) {\n            //TODO should add it into websocket\n            updateAmmMap();\n            let apiList  = [\n                 pairDetailBlock({coinKey: market, ammKey: amm, ammMap}),\n                // LoopringAPI.ammpoolAPI.getAmmPoolSnapshot({poolAddress: ammMap[ ammKey ].address}),\n                // LoopringAPI.exchangeAPI.getMixTicker({market: coinKey})])\n            ];\n            // @ts-ignore\n            Promise.all([...apiList]).then(\n                ([{ammPoolsBalance,tickMap}\n                   //  ,ammUserRewardMap\n                 ]: any[]) => {\n                    if (tokenMap) {\n                        const _snapShotData =  {\n                            tickerData: tickMap[ market ],\n                            ammPoolsBalance: ammPoolsBalance,\n                        }\n                        _tradeFloat = makeTickView(tickMap[ market ]?tickMap[ market ]: {})\n                        setTradeFloat(_tradeFloat as TradeFloat);\n                        setCoinPairInfo({..._coinPairInfo})\n                        setSnapShotData(_snapShotData)\n\n                    }\n                }).catch((error)=>{\n                console.log(error);\n                throw  Error\n            })\n        }\n\n    }, []);\n\n    React.useEffect(() => {\n        const {market} = getExistedMarket(marketArray, pair.coinAInfo?.simpleName as string, pair.coinBInfo?.simpleName as string);\n        if(market && snapShotData && snapShotData.ammPoolsBalance) {\n            switch (walletLayer2State.status ) {\n                case \"ERROR\":\n                    walletLayer2State.statusUnset();\n                    // setState('ERROR')\n                    //TODO: show error at button page show error  some retry dispath again\n                    break;\n                case \"DONE\":\n                    walletLayer2State.statusUnset();\n                    const _walletMap = walletLayer2DoIt(market);\n                    const _myAmm:MyAmmLP<C> = makeMyAmmWithSnapshot(market,_walletMap,ammUserRewardMap,snapShotData);\n                    setMyAmm(_myAmm)\n                    break;\n                default:\n                    break;\n\n            }\n        }\n\n\n    }, [walletLayer2State.status,ammUserRewardMap])\n\n    //TODO tickMap\n    React.useEffect(() => {\n       const {market} = getExistedMarket(marketArray, pair.coinAInfo?.simpleName as string, pair.coinBInfo?.simpleName as string);\n       if(market){\n           switch (useUserRewardsState.status) {\n               case \"ERROR\":\n                   useUserRewardsState.statusUnset();\n                   // setState('ERROR')\n                   //TODO: show error at button page show error  some retry dispath again\n                   break;\n               case \"DONE\":\n                   // getAmmPoolUserRewards().then((ammUserRewardMap)=>{\n                   const {userRewardsMap} = store.getState().userRewardsMap\n                   setAmmUserRewardMap(userRewardsMap)\n                   const _myAmm:MyAmmLP<C> = makeMyAmmWithSnapshot(market,walletMap,ammUserRewardMap,snapShotData);\n                   setMyAmm(_myAmm);\n                   break;\n               default:\n                   break;\n\n           }\n       }\n\n    }, [useUserRewardsState.status,useUserRewardsState.statusUnset])\n\n    React.useEffect(() => {\n        if (ammMapState.status === \"ERROR\") {\n            //TODO: solve error\n            ammMapState.statusUnset();\n        } else if (ammMapState.status === \"DONE\") {\n            ammMapState.statusUnset();\n            if (ammMapState.ammMap && pair.coinAInfo?.simpleName && pair.coinBInfo?.simpleName) {\n                const _coinPairInfo = makeAmmDetailExtendsActivityMap(\n                    {\n                        ammMap,\n                        coinMap,\n                        ammActivityMap,\n                        ammKey: 'AMM-' + pair.coinAInfo.simpleName + pair.coinBInfo.simpleName\n                    })\n                setCoinPairInfo({...coinPairInfo,..._coinPairInfo,\n                    tradeFloat:coinPairInfo.tradeFloat\n                })\n\n            }\n\n            // tokenState.statusUnset()\n            // setState('DONE');\n        }\n    }, [ammMapState.status, ammMapState.ammMap, ammMapState.statusUnset, pair, ammActivityMap, tokenMap])\n\n\n\n    return {\n        walletMap,\n        myAmm,\n        // tickerData,\n        coinPairInfo,\n        snapShotData,\n        // ammPoolsBalance,\n        pair,\n        tradeFloat,\n        ammMarketArray,\n        myAmmMarketArray,\n    }\n}","import React from 'react';\nimport { WithTranslation, withTranslation } from 'react-i18next';\nimport { AmmRecordTable, TradeBtnStatus, TradeTable, TradeTitle, useSettings } from '@loopring-web/component-lib';\nimport { Currency, getThousandFormattedNumbers, PriceTag } from '@loopring-web/component-lib/static-resource';\nimport { Box, Breadcrumbs, Grid, Hidden, Link, Typography, } from '@material-ui/core';\nimport { AmmPanelView } from '../AmmPanel';\nimport moment from 'moment';\nimport styled from '@emotion/styled/';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\n\nimport { useCoinPair } from './hooks';\nimport { ActivityMap } from '../../../stores/Amm/AmmActivityMap';\nimport { AmmPoolActivityRule, LoopringMap } from 'loopring-sdk/dist/defs/loopring_defs';\n\n\n//******************** page code ************************//\nconst BoxStyled = styled(Box)`\n  ${({theme}) => theme.border.defaultFrame({c_key: 'blur'})};\n  background-color: ${({theme}) => theme.colorBase.background().default};\n`;\nconst StylePaper = styled(Box)`\n  width: 100%;\n  height: calc(100% - 64px);\n  \n  //height: 100%;\n  flex: 1;\n  background-color: ${({theme}) => theme.colorBase.background().default};\n  border-radius: ${({theme}) => theme.unit}px;\n  padding: ${({theme}) => theme.unit}px 0 ;\n  .rdg {\n    \n    flex: 1;\n  }\n\n` as typeof Box;\n\nconst applyProps = (index: number) => {\n    return {\n        id: `simple-tab-${index}`,\n        'aria-controls': `tabpanel-${index}`,\n    }\n}\n\nexport const CoinPairPanel = withTranslation('common')(<R extends {[key:string]:any},I extends {[key:string]:any}>\n({t,  ammActivityMap, ...rest}:\n     WithTranslation & { ammActivityMap: LoopringMap<LoopringMap<AmmPoolActivityRule[]>>|undefined } & any) => {    //ActivityMap<I, I>\n    //TODO: checkRouter\n\n    const {currency} = useSettings();\n    const {tradeFloat,snapShotData, pair, coinPairInfo, walletMap,ammMarketArray,myAmmMarketArray,myAmm} = useCoinPair({ammActivityMap});\n    const [tabIndex, setTabIndex] = React.useState<0 | 1>(0);\n    const [page, setPage] = React.useState(rest?.page ? rest.page : 1);\n    const handleChange = (event: any, newValue: 0 | 1) => {\n        setTabIndex(newValue);\n        setPage(1);\n    }\n    const _handlePageChange = React.useCallback((page: number) => {\n        setPage(page);\n    }, [])\n\n\n    return <>\n\n        <Grid container>\n            <Grid item xs={8}>\n                <Breadcrumbs aria-label=\"breadcrumb\">\n                    <Link color=\"textSecondary\" href=\"/#/liquidity/pools\">\n                        {t('labelAmmList')}\n                    </Link>\n                    <Typography color={'textSecondary'} display={'flex'} alignItems={'center'}\n                                justifyContent={'center'}\n                    >{pair.coinAInfo?.simpleName}-{pair.coinBInfo?.simpleName}</Typography>\n                </Breadcrumbs>\n            </Grid>\n            <Grid item xs={4} alignItems={'center'} justifyContent={'flex-end'} display={'flex'}>\n                <Link href=\"/#/liquidity/pools\" variant={'h5'}>\n                    {t('labelBack')}\n                </Link>\n            </Grid>\n        </Grid>\n        <Grid container marginTop={3}>\n            <Grid item xs={7}>\n                <TradeTitle {...{\n                    ...rest, t,\n                    ...pair,\n                    tradeFloat,\n                    isNew: false\n                }}></TradeTitle>\n            </Grid>\n        </Grid>\n        <Box flex={1} display={'flex'} alignItems={'stretch'} flexDirection=\"row\" marginTop={3}>\n            <Box flex={1} display={'flex'}>\n                <Grid container spacing={2} wrap={'nowrap'}>\n                    <Grid item md={5} xs={12} paddingRight={2} display={'flex'} flexDirection={'column'}\n                          alignItems={'stretch'} justifyContent={'flex-start'}>\n                        <BoxStyled paddingY={3} marginBottom={2} paddingX={1 / 2 * 5} display={'flex'} flexDirection={'column'}>\n                            <Typography component={'p'} color={'textSecondary'} display={'flex'}\n                                        justifyContent={'space-between'}>\n                                <Typography component={'span'}\n                                            style={{textTransform: 'capitalize'}}>{t('labelLiquidity')}</Typography>\n                                <Typography component={'span'}\n                                            style={{textTransform: 'uppercase'}}>{t('labelAPY')}</Typography>\n                            </Typography>\n                            <Typography component={'p'} color={'textPrimary'} display={'flex'}\n                                        justifyContent={'space-between'} marginTop={1}>\n                                <>\n                                    <Typography\n                                        component={'span'}> {typeof coinPairInfo.amountDollar === 'undefined' ? 'N/A' :\n                                        currency === Currency.dollar ? PriceTag.Dollar + getThousandFormattedNumbers(coinPairInfo.amountDollar) : PriceTag.Yuan + getThousandFormattedNumbers(coinPairInfo.amountYuan ? coinPairInfo.amountYuan : 0)}\n                                    </Typography>\n                                    <Typography\n                                        component={'span'}> {coinPairInfo.APY ? coinPairInfo.APY : 'N/A'}%\n                                    </Typography>\n                                </>\n\n\n                            </Typography>\n\n                            <Typography component={'p'} color={'textSecondary'} display={'flex'}\n                                        justifyContent={'space-between'} marginTop={2}>\n                                <Typography component={'span'}\n                                            color={'textSecondary'}>\n                                    <Hidden mdDown>{t('labelLPTotal')}</Hidden>{t('labelLPTokens')}</Typography>\n                                <Typography component={'span'}\n                                            color={'textSecondary'}>{coinPairInfo.totalLPToken}</Typography>\n                            </Typography>\n                            <Typography component={'p'} color={'textSecondary'} display={'flex'}\n                                        justifyContent={'space-between'} marginTop={1}>\n\n                                <Typography component={'span'}\n                                            color={'textSecondary'}>\n                                    <Hidden\n                                        mdDown>{t('labelLPTotal')}</Hidden>{coinPairInfo.myCoinA?.simpleName}\n                                </Typography>\n\n                                <Typography component={'span'}\n                                            color={'textSecondary'}>{coinPairInfo.totalA}</Typography>\n                            </Typography>\n                            <Typography component={'p'} color={'textSecondary'} display={'flex'}\n                                        justifyContent={'space-between'} marginTop={1}>\n                                <Typography component={'span'}\n                                            color={'textSecondary'}>\n                                    <Hidden\n                                        mdDown>{t('labelLPTotal')}</Hidden>{coinPairInfo.myCoinB?.simpleName}\n                                </Typography>\n                                <Typography component={'span'}\n                                            color={'textSecondary'}>{coinPairInfo.totalB}</Typography>\n                            </Typography>\n\n                        </BoxStyled>\n                        <BoxStyled paddingY={3} marginBottom={2} paddingX={1 / 2 * 5} display={'flex'} flexDirection={'column'}>\n                            <Typography component={'p'} color={'textSecondary'} display={'flex'}\n                                        justifyContent={'space-between'} alignItems={'center'}>\n                                <Typography component={'span'} color={'textSecondary'} variant={'body2'} style={{textTransform: 'capitalize'}}>\n                                    {coinPairInfo.tradeFloat?.timeUnit} {t('labelVolume')}\n                                </Typography>\n                                <Typography component={'span'} color={'textSecondary'}>\n                                    {t('labelFee')} {/* ' : '*/}\n                                </Typography>\n                            </Typography>\n                            <Typography component={'p'} color={'textSecondary'} display={'flex'}\n                                        justifyContent={'space-between'} marginTop={1} alignItems={'center'}>\n                                <Typography component={'span'} variant={'h4'} color={'textPrimary'}>\n                                    {currency === Currency.dollar ? PriceTag.Dollar + getThousandFormattedNumbers(coinPairInfo.tradeFloat && coinPairInfo.tradeFloat.priceDollar ? coinPairInfo.tradeFloat.priceDollar as number : 0)\n                                        : PriceTag.Yuan + getThousandFormattedNumbers(coinPairInfo.tradeFloat && coinPairInfo.tradeFloat.priceYuan ? coinPairInfo.tradeFloat.priceYuan as number : 0)}\n                                </Typography>\n                                <Typography noWrap textAlign={'center'} component={'span'} color={'textSecondary'}\n                                            variant={'body2'} textOverflow={'ellipsis'} display={'flex'}\n                                            alignItems={'center'}>\n                                    <Typography component={'span'} color={'inherit'} variant={'inherit'}\n                                                display={'flex'} flexDirection={'column'}>\n                                        <Typography component={'span'} color={'inherit'} variant={'inherit'}>\n                                            {coinPairInfo.myCoinA?.simpleName}\n                                        </Typography>\n                                        <Typography component={'span'} color={'inherit'} variant={'inherit'}>\n                                            {coinPairInfo.feeA?getThousandFormattedNumbers(coinPairInfo.feeA):'N/A'}\n                                        </Typography>\n                                    </Typography>\n                                    <Typography component={'span'} color={'inherit'} variant={'h5'}\n                                                paddingX={1}>{' + '}</Typography>\n                                    <Typography component={'span'} color={'inherit'} variant={'inherit'}\n                                                display={'flex'} flexDirection={'column'}>\n                                        <Typography component={'span'} color={'inherit'} variant={'inherit'}>\n                                            {coinPairInfo.myCoinB?.simpleName}\n                                        </Typography>\n                                        <Typography component={'span'} color={'inherit'} variant={'inherit'}>\n                                            {coinPairInfo.feeB?getThousandFormattedNumbers(coinPairInfo.feeB):'N/A'}\n                                        </Typography>\n                                    </Typography>\n                                </Typography>\n                            </Typography>\n                        </BoxStyled>\n                        <BoxStyled paddingY={3} marginBottom={2} paddingX={1 / 2 * 5} display={'flex'} flexDirection={'column'}>\n                            <Typography component={'p'} color={'textSecondary'} display={'flex'}\n                                        justifyContent={'space-between'}>\n                                <Typography component={'span'}\n                                            color={'textSecondary'}> {t('labelMyPoolShare')}</Typography>\n                            </Typography>\n                            <Typography component={'p'} color={'textSecondary'} display={'flex'}\n                                        justifyContent={'space-between'} marginTop={1}>\n                                <Typography component={'span'}\n                                            color={'textSecondary'}>\n                                    <>{myAmm.balanceA ? getThousandFormattedNumbers(myAmm.balanceA,2)  : 'N/A'}</>\n                                    <> { coinPairInfo.myCoinA?.simpleName}</>\n                                </Typography>\n                                <Typography component={'span'} color={'textecondary'}\n                                            variant={'h5'}> {myAmm.feeA?getThousandFormattedNumbers(myAmm.feeA):'N/A'} {coinPairInfo.myCoinA?.simpleName}  </Typography>\n                            </Typography>\n                            <Typography component={'p'} color={'textSecondary'} display={'flex'}\n                                        justifyContent={'space-between'} marginTop={1}>\n                                <Typography component={'span'}\n                                            color={'textSecondary'}>\n                                    <>{myAmm.balanceB ? getThousandFormattedNumbers(myAmm.balanceB,2) : 'N/A'}</>\n                                    <> {coinPairInfo.myCoinB?.simpleName}</>\n                                </Typography>\n                                <Typography component={'span'} color={'textSecondary'}\n                                            variant={'h5'}> {myAmm.feeB?getThousandFormattedNumbers(myAmm.feeB):'N/A'} {coinPairInfo.myCoinB?.simpleName}</Typography>\n                            </Typography>\n                        </BoxStyled>\n                        <BoxStyled paddingY={3} paddingX={1 / 2 * 5} display={'flex'}\n                                   flexDirection={'column'}>\n                            <Box display={'flex'} flexDirection={'row'} justifyContent={'space-between'}>\n                                <Typography display={'flex'} flexDirection={'column'} component={'div'}>\n                                    <Typography variant={'body2'} component={'h5'} color={'textSecondary'}>\n                                        {t('labelReward')}\n                                    </Typography>\n                                    <Typography variant={'body1'} component={'span'} color={'textPrimary'}>\n                                        {typeof coinPairInfo.isActivity === 'undefined' ? 'N/A' : <>\n                                            <Typography\n                                                component={'span'}>{coinPairInfo.activity?getThousandFormattedNumbers(coinPairInfo.activity.totalRewards):'N/A'} </Typography>\n                                            <Typography\n                                                component={'span'}>{coinPairInfo.activity?.rewardToken?.simpleName}</Typography>\n                                        </>}\n                                    </Typography>\n                                </Typography>\n                                <Typography display={'flex'} flexDirection={'column'} alignItems={'flex-end'}\n                                            component={'div'}>\n                                    <Typography variant={'body2'} component={'h5'} color={'textSecondary'}>\n                                        {t('labelMyReward')}\n                                    </Typography>\n                                    <Typography variant={'body1'} component={'span'} color={'textPrimary'}>\n                                        {/*{typeof coinPairInfo.isActivity === 'undefined' ? 'N/A' : <>*/}\n                                        {typeof myAmm.reward === 'undefined' ? 'N/A' : <>\n\n                                        <Typography component={'span'}> {getThousandFormattedNumbers(myAmm.reward)} </Typography>\n                                            <Typography\n                                                component={'span'}> {coinPairInfo.activity?.rewardToken?.simpleName}</Typography></>}\n\n                                    </Typography>\n                                </Typography>\n                            </Box>\n                            <Typography alignSelf={'flex-start'} variant={'body2'} color={'textSecondary'}\n                                        component=\"span\" marginTop={1}>\n                                {typeof coinPairInfo.isActivity === 'undefined' ? t('labelNoActiveEvent')\n                                    : <>\n                                        {t('labelDate')} :\n                                       <> {moment(coinPairInfo.activity?.duration.from).format('L') + ' - ' + moment(coinPairInfo.activity?.duration.to).format('L')}</>\n                                    </>\n                                }\n                            </Typography>\n                        </BoxStyled>\n                    </Grid>\n                    <Hidden mdDown>\n                        <Grid item md={7} paddingRight={2}>\n\n\n                        </Grid>\n                    </Hidden>\n                </Grid>\n            </Box>\n            <Box display={'flex'}>\n                <AmmPanelView pair={pair} walletMap={walletMap} snapShotData={snapShotData}/>\n            </Box>\n        </Box>\n        <Grid container marginY={3}>\n            <Grid item xs={12}>\n                <Tabs value={tabIndex}\n                      onChange={handleChange}\n                      aria-label=\"tabs switch\">\n                    <Tab label={t('labelAll')} {...applyProps(0)} />\n                    <Tab label={t('labelMe')} {...applyProps(1)} />\n                </Tabs>\n                <StylePaper marginTop={2} >\n                    {/*ammRecordArray*/}\n                    {tabIndex === 0 ?  <AmmRecordTable\n                        rawData={ammMarketArray}\n                        handlePageChange={_handlePageChange} page={page}\n                    /> : <AmmRecordTable rawData={myAmmMarketArray}  handlePageChange={_handlePageChange} page={page} /> }\n                </StylePaper>\n            </Grid>\n\n        </Grid>\n\n    </>\n})\n\n\n\n","import { AmmProps } from '@loopring-web/component-lib';\nimport React from 'react';\nimport { AmmCardProps, AmmData, AmmInData, IBData } from '@loopring-web/component-lib/static-resource';\nimport { AmmCard } from '@loopring-web/component-lib/components/block/AmmCard';\nimport { Grid } from '@material-ui/core';\nimport { useAmmMiningUI } from './hook';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport { withTranslation } from 'react-i18next';\nimport { AmmPoolActivityRule, LoopringMap } from 'loopring-sdk/dist/defs/loopring_defs';\n\nconst AmmCardWrap = React.memo(React.forwardRef((props:AmmCardProps<{[key:string]:any}>,ref) => {\n    return props? <AmmCard ref={ref} {...props} /> :<></>\n}));\nconst AmmList = <I extends {[key:string]:any}>({ammActivityViewMap}: {ammActivityViewMap: Array<AmmCardProps<I>> })=>{\n    return  <>{ammActivityViewMap.map((item:AmmCardProps<I>,index)=>\n        <Grid item xs={12} sm={6} lg={4}  key={index}>\n            <AmmCardWrap {...item as any} />\n        </Grid>\n    ) }</>\n}\n\nexport const AmmMiningView =  withTranslation('common')(<T extends AmmData<C extends IBData<I> ? C : IBData<I>>, I,\n    ACD extends AmmInData<I>,\n    C = IBData<I>>({ammProps,t,ammActivityMap,...rest}: { ammProps:AmmProps<T ,I,ACD>,\n    ammActivityMap: LoopringMap<LoopringMap<AmmPoolActivityRule[]>>|undefined,   \n} & any) => {\n    const { ammActivityViewMap,\n        ammActivityPastViewMap} = useAmmMiningUI({ammActivityMap});\n    const [tabIndex,setTabIndex] = React.useState<0|1>(0);\n    const handleChange = (event: any, newValue: 0|1) => {\n        setTabIndex(newValue);\n    }\n\n    return <Grid container spacing={2}>\n        <Grid item xs={12}>\n            <Tabs value={tabIndex}\n                  onChange={handleChange}\n                  aria-label=\"tabs switch\">\n                <Tab label={t('labelCurrentActivities')}  />\n                <Tab label={t('labelPastActivities')}  />\n            </Tabs>\n        </Grid>\n        <AmmList ammActivityViewMap={tabIndex === 0 ? ammActivityViewMap : ammActivityPastViewMap}/>\n    </Grid>\n})\n","import { AmmCardProps } from '@loopring-web/component-lib/static-resource';\nimport { AmmPoolActivityRule, AmmPoolActivityStatus,LoopringMap } from 'loopring-sdk';\nimport React from 'react';\nimport {\n    makeUIAmmActivityMap\n} from '../../../hooks/help/makeUIAmmActivityMap';\n\nimport { useUserRewards } from '../../../stores/userRewards';\n\nexport const useAmmMiningUI = <R extends { [ key: string ]: any }, I extends { [ key: string ]: any }>(\n    {\n        ammActivityMap\n    }: { ammActivityMap: LoopringMap<LoopringMap<AmmPoolActivityRule[]>> | undefined }\n): {\n    ammActivityViewMap: Array<AmmCardProps<I>>,\n    ammActivityPastViewMap: Array<AmmCardProps<I>>\n} => {\n    const  userRewardsMapState =  useUserRewards();// store.getState().userRewardsMap\n    // const {coinMap} = useTokenMap();\n    // const ammMapState = useAmmMap();\n    // const walletLayer2State = useWalletLayer2();\n    const [ammActivityViewMap, setAmmActivityViewMap] = React.useState<Array<AmmCardProps<I>>>([]);\n\n\n    const [ammActivityPastViewMap, setAmmActivityPastViewMap] = React.useState<Array<AmmCardProps<I>>>(\n        []);\n    // const [ammUserRewardMap, setAmmUserRewardMap] = React.useState<AmmUserRewardMap>(\n    //     {});\n\n\n    // );\n    React.useEffect(() => {\n        if(ammActivityMap && Object.keys(ammActivityMap).length>0 ){\n\n           // getAmmPoolUserRewards().then((ammUserRewardMap)=>{\n                // setAmmUserRewardMap(ammUserRewardMap as AmmUserRewardMap);\n                setAmmActivityViewMap(makeUIAmmActivityMap(\n                    {\n                        ammActivityMap,\n                        type: 'AMM_MINING',\n                        ammPoolActivityStatus: [AmmPoolActivityStatus.NotStarted, AmmPoolActivityStatus.InProgress]\n                    }, userRewardsMapState.userRewardsMap\n                ));\n                setAmmActivityPastViewMap(\n                    makeUIAmmActivityMap(\n                        {\n                            ammActivityMap,\n                            type: 'AMM_MINING',\n                            ammPoolActivityStatus: [AmmPoolActivityStatus.EndOfGame]\n                        }, userRewardsMapState.userRewardsMap\n                    ))\n          //  })\n        }\n\n    },[ammActivityMap])\n    React.useEffect(() => {\n            if (userRewardsMapState.status === \"ERROR\") {\n                //TODO: solve error\n                userRewardsMapState.statusUnset();\n            } else if (userRewardsMapState.status === \"DONE\") {\n                userRewardsMapState.statusUnset();\n                setAmmActivityViewMap(\n                    makeUIAmmActivityMap(\n                    {\n                        ammActivityMap,\n                        type: 'AMM_MINING',\n                        ammPoolActivityStatus: [AmmPoolActivityStatus.NotStarted, AmmPoolActivityStatus.InProgress]\n                    }, userRewardsMapState.userRewardsMap\n                ));\n                setAmmActivityPastViewMap(\n                    makeUIAmmActivityMap(\n                        {\n                            ammActivityMap,\n                            type: 'AMM_MINING',\n                            ammPoolActivityStatus: [AmmPoolActivityStatus.EndOfGame]\n                        }, userRewardsMapState.userRewardsMap\n                    ))\n                // if (userRewardsMapState.ammMap) {\n                //     setAmmActivityViewMap(\n                //         makeUIAmmActivityMap(\n                //             {\n                //                 ammActivityMap,\n                //                 type: 'AMM_MINING',\n                //                 ammPoolActivityStatus: [AmmPoolActivityStatus.NotStarted, AmmPoolActivityStatus.InProgress]\n                //             }, ammUserRewardMap\n                //         ))\n                //     setAmmActivityPastViewMap(\n                //         makeUIAmmActivityMap(\n                //             {\n                //                 ammActivityMap,\n                //                 type: 'AMM_MINING',\n                //                 ammPoolActivityStatus: [AmmPoolActivityStatus.EndOfGame]\n                //             }, ammUserRewardMap\n                //         ))\n                //\n                // }\n\n            }\n        },\n        [userRewardsMapState.status]\n    )\n\n\n    return {\n        ammActivityViewMap,\n        ammActivityPastViewMap\n    }\n\n}\n","import { AmmDetailStore } from '../../stores/Amm/AmmMap';\nimport { AmmPoolSnapshot } from 'loopring-sdk';\nimport { makeMyAmmWithSnapshot, makeMyAmmWithStat } from './makeUIAmmActivityMap';\nimport { AmmUserRewardMap } from 'loopring-sdk/dist/defs/loopring_defs';\nimport { WalletMapExtend } from './makeWallet';\n\nexport const makeMyPoolRowWithSnapShot = <T extends { [ key: string ]: any }>({market,ammSnapShot,walletMap,ammUserRewardMap}: {\n    market:string\n    ammSnapShot: AmmPoolSnapshot,\n    walletMap: WalletMapExtend<T>\n    ammUserRewardMap:AmmUserRewardMap|undefined\n}) => {\n\n    return makeMyAmmWithSnapshot(market,walletMap, ammUserRewardMap, {\n        ammPoolsBalance: ammSnapShot\n    })\n}\n\n                                                                        \nexport const makeMyPoolRowWithPoolState = <T extends { [ key: string ]: any }>({market,ammDetail,walletMap,ammUserRewardMap}: {\n    market:string\n    ammDetail: AmmDetailStore<T>,\n    walletMap: WalletMapExtend<T>\n    ammUserRewardMap:AmmUserRewardMap|undefined\n}) => {\n    if(walletMap && ammDetail){\n        return makeMyAmmWithStat (market,walletMap, ammUserRewardMap, ammDetail)\n    }\n    return undefined\n}","import {\n    AmmPoolActivityRule,\n    AmmPoolSnapshot,\n    LoopringMap,\n    TickerData\n} from 'loopring-sdk';\nimport React from 'react';\nimport { AmmRecordRow, MyPoolRow} from '@loopring-web/component-lib';\nimport { makeWallet, WalletMapExtend } from '../../../hooks/help/makeWallet';\nimport { getUserAmmTransaction, makeMyAmmMarketArray } from '../../../hooks/help/marketTable';\nimport { useTokenMap } from '../../../stores/token';\nimport { useWalletLayer2 } from '../../../stores/walletLayer2';\nimport { makeSummaryMyAmm, SummaryMyAmm } from '../../../hooks/help/makeUIAmmActivityMap';\nimport { useUserRewards } from '../../../stores/userRewards';\nimport { useAmmMap } from '../../../stores/Amm/AmmMap';\nimport { makeMyPoolRowWithPoolState } from '../../../hooks/help/makeMyPoolDetail';\n\n\nexport const useOverview = <R extends { [ key: string ]: any }, I extends { [ key: string ]: any }>(\n    {\n        ammActivityMap\n    }: { ammActivityMap: LoopringMap<LoopringMap<AmmPoolActivityRule[]>> | undefined }\n): {\n    myAmmMarketArray: AmmRecordRow<R>[],\n    summaryReward: SummaryMyAmm | undefined,\n    myPoolRow: AmmRecordRow<R>[]\n    // ammActivityViewMap: Array<AmmCardProps<I>>,\n    // ammActivityPastViewMap: Array<AmmCardProps<I>>\n} => {\n    const walletLayer2State = useWalletLayer2();\n    const userRewardsMapState = useUserRewards();\n    const {marketArray} = useTokenMap();\n    const ammMapState = useAmmMap();\n    const {ammMap} = ammMapState;\n\n    const [walletMap, setWalletMap] = React.useState<WalletMapExtend<R> | undefined>(undefined);\n    const [summaryReward, setSummaryReward] = React.useState<SummaryMyAmm | undefined>(undefined);\n    const [myPoolRow,setMyPoolRow] = React.useState<MyPoolRow<R>[]>([])\n    const [myAmmMarketArray, setMyAmmMarketArray] = React.useState<AmmRecordRow<R>[]>([]);\n    // const [ammUserRewardMap, setAmmUserRewardMap] = React.useState<AmmUserRewardMap|undefined>(undefined);\n    // const [snapShotData,setSnapShotData] = React.useState<{\n    //     tickerData: TickerData|undefined\n    //     ammPoolsBalance: AmmPoolSnapshot|undefined\n    // }|undefined>(undefined);\n    const walletLayer2DoIt = React.useCallback(() => {\n        const {walletMap: _walletMap} = makeWallet();\n        setWalletMap(_walletMap)\n        if (_walletMap) {\n            getUserAmmTransaction()?.then((marketTrades) => {\n                let _myTradeArray = makeMyAmmMarketArray(undefined, marketTrades)\n                setMyAmmMarketArray(_myTradeArray ? _myTradeArray : [])\n            })\n        }\n        return _walletMap\n    }, [makeWallet, getUserAmmTransaction, makeMyAmmMarketArray, marketArray])\n    const makeMyPoolRow  =  React.useCallback((_walletMap):MyPoolRow<R>[] => {\n        if (_walletMap && ammMap) {\n            // @ts-ignore\n            const _myPoolRow:MyPoolRow<R>[] =  Reflect.ownKeys(_walletMap).reduce((prev:MyPoolRow<R>[],walletKey:string)=>{\n                if(/LP-/i.test(walletKey)){\n                   const  ammKey = walletKey.replace('LP-','AMM-');\n                   const  marketKey = walletKey.replace('LP-','');\n                   let rowData: MyPoolRow<R>|undefined;\n                    //TODO：websocket open\n                    //  if(ammPoolSnapShots)\n                    // makeData by snapshot else\n                    // else\n                    rowData = makeMyPoolRowWithPoolState(\n                        {\n                            ammDetail: ammMap[ ammKey ],\n                            walletMap: _walletMap,\n                            market: marketKey,\n                            ammUserRewardMap: userRewardsMapState.userRewardsMap\n                        }\n                    )\n                    if(rowData !== undefined){\n                        prev.push(rowData);\n                    }\n                }\n                return prev\n            },[] as MyPoolRow<R>[])\n            // console.log('rowData',_myPoolRow);\n            return _myPoolRow;\n        }\n        return [];\n    },[ammMap,userRewardsMapState.userRewardsMap])\n\n    React.useEffect(() => {\n        if (walletLayer2State.walletLayer2 ) {\n            const _walletMap = walletLayer2DoIt();\n            if (ammMap) {\n                const _myPoolRow = makeMyPoolRow(_walletMap)\n                setMyPoolRow(_myPoolRow)\n            }\n        }\n    }, []);\n\n    React.useEffect(() => {\n        //ammMapState.ammMap or\n\n           switch (walletLayer2State.status ) {\n               case \"ERROR\":\n                   walletLayer2State.statusUnset();\n                   break;\n               case \"DONE\":\n                   walletLayer2State.statusUnset();\n                   const _walletMap = walletLayer2DoIt();\n                   //TODO check AmmMap state or ammSnapshot sockets\n                   //userRewardsMapState is an option but  walletLayer2 amd ammMapState.ammMap is required\n                   if( ammMapState.ammMap ){\n                       const _myPoolRow = makeMyPoolRow(_walletMap);\n                       setMyPoolRow(_myPoolRow)\n                   }\n                   break;\n               default:\n                   break;\n\n           }\n       // }\n    }, [walletLayer2State.status])\n\n    React.useEffect(() => {\n        if (ammMapState.status === \"ERROR\") {\n            //TODO: solve error\n            ammMapState.statusUnset();\n        } else if (ammMapState.status === \"DONE\") {\n            ammMapState.statusUnset();\n            //TODO check AmmMap state or ammSnapshot sockets when websocket open  ammMapState done should not effect myPoolRow\n            if (walletLayer2State.walletLayer2) {\n                //userRewardsMapState is an option and walletLayer2 is required\n                const _myPoolRow = makeMyPoolRow(walletLayer2State.walletLayer2);\n                setMyPoolRow(_myPoolRow);\n            }\n        }\n    }, [ammMapState.status])\n\n    React.useEffect(() => {\n            if (userRewardsMapState.status === \"ERROR\") {\n                //TODO: solve error\n                userRewardsMapState.statusUnset();\n            } else if (userRewardsMapState.status === \"DONE\") {\n                userRewardsMapState.statusUnset();\n                // setAmmUserRewardMap()\n                const summaryReward = makeSummaryMyAmm({userRewardsMap:userRewardsMapState.userRewardsMap});\n                setSummaryReward(summaryReward);\n\n                //TODO check AmmMap state or ammSnapshot sockets\n                if (walletLayer2State.walletLayer2 && ammMapState.ammMap) {  //  ammMapState.ammMap or websocket\n                    //userRewardsMapState is an option and walletLayer2 is required\n                    const _myPoolRow = makeMyPoolRow(walletLayer2State.walletLayer2);\n                    setMyPoolRow(_myPoolRow);\n                }\n\n            }\n        }, [userRewardsMapState.status])\n    return {\n        myAmmMarketArray,\n        summaryReward,\n        myPoolRow,\n        // ammActivityViewMap,\n        // ammActivityPastViewMap\n    }\n\n}\n","import React from 'react'\nimport styled from '@emotion/styled'\nimport { Box, Grid, Typography } from '@material-ui/core'\nimport { WithTranslation, withTranslation } from 'react-i18next'\nimport {\n    AmmRecordTable,\n    AmmTradeType,\n    ChartType,\n    ScaleAreaChart,\n    TablePaddingX,\n    ToggleButtonGroup,\n    useSettings\n} from '@loopring-web/component-lib'\nimport { MyPoolTable } from '@loopring-web/component-lib/components/tableList/myPoolTable';\nimport {\n    Currency,\n    getThousandFormattedNumbers,\n    PriceTag\n} from '@loopring-web/component-lib/src/static-resource';\n\nimport { AmmPoolActivityRule, LoopringMap } from 'loopring-sdk/dist/defs/loopring_defs';\nimport { useOverview } from './hook';\n\n\n//TODO: FIXED:  demo data\n\n\nconst toggleData = [\n    {value: '24 H', key: '24 H'},\n    {value: '1 W', key: '1 W'},\n    {value: 'ALL', key: 'ALL'},\n]\n\nconst StylePaper = styled(Box)`\n  width: 100%;\n  height: 100%;\n  flex: 1;\n` as typeof Box;\n\nconst StyleWrapper = styled(Grid)`\n  position: relative;\n  width: 100%;\n  background-color: ${({theme}) => theme.colorBase.background().default};\n  border-radius: ${({theme}) => theme.unit}px;\n` as typeof Grid\n\n\n\nconst StyledBtnGroupWrapper = styled(Box)`\n  position: absolute;\n  z-index: 99;\n  top: ${({theme}) => theme.unit}px;\n  width: 100%;\n` as typeof Box\n\nconst TableWrapStyled = styled(Grid)`\n  & {\n    background-color: ${({theme}) => theme.colorBase.background().default};\n    ${({theme}) => theme.border.defaultFrame({c_key: 'blur', d_R: 1})};\n  }\n\n  ${({theme}) => TablePaddingX({pLeft: theme.unit * 3, pRight: theme.unit * 3})}\n` as typeof Grid\n\nexport const LiquidityOverview = withTranslation('common')(\n    <R extends { [ key: string ]: any }, I extends { [ key: string ]: any }>\n    ({t, ammActivityMap, ...rest}:\n         WithTranslation &\n         { ammActivityMap: LoopringMap<LoopringMap<AmmPoolActivityRule[]>> | undefined }\n    ) => {\n        const [chartPeriod, setChartPeriod] = React.useState('ALL');\n        const [page, setPage] = React.useState(1);\n        const {currency} = useSettings();\n\n        const _handlePageChange = React.useCallback((page: number) => {\n            setPage(page);\n        }, [])\n\n        const {myAmmMarketArray, summaryReward, myPoolRow} = useOverview({ammActivityMap});\n        return (\n            <>\n                <StyleWrapper container spacing={1} padding={3} margin={0}>\n                    <Grid display={'flex'} flexDirection={'column'} justifyContent={'space-around'} item sm={3}>\n                        <Typography variant={'body1'} component={'h5'}\n                                    color={'textSecondary'}>{t('labelTotalPositionValue')}</Typography>\n                        <Typography variant={'h4'} marginTop={1}>\n                            {summaryReward === undefined ? 'N/A' : currency === Currency.dollar ? PriceTag.Dollar\n                                + getThousandFormattedNumbers(summaryReward.rewardDollar !== undefined? summaryReward.rewardDollar : 0)\n                                + getThousandFormattedNumbers( summaryReward.feeDollar !== undefined?summaryReward.feeDollar : 0)\n                                : PriceTag.Yuan + getThousandFormattedNumbers(summaryReward.rewardYuan ? summaryReward.rewardYuan : 0)\n                                    +  getThousandFormattedNumbers(summaryReward.feeYuan ? summaryReward.feeYuan : 0)}\n                        </Typography>\n                    </Grid>\n                    <Grid display={'flex'} flexDirection={'column'} justifyContent={'space-around'} item sm={3}>\n                        <Typography variant={'body1'} component={'h5'}\n                                    color={'textSecondary'}>{t('labelFeeRewards')}</Typography>\n                        <Typography variant={'h4'} marginTop={1}>\n                            {summaryReward === undefined ? 'N/A' : currency === Currency.dollar ? PriceTag.Dollar\n                                + getThousandFormattedNumbers(summaryReward.feeDollar ? summaryReward.feeDollar : 0)\n                                : PriceTag.Yuan\n                                + getThousandFormattedNumbers(summaryReward.feeYuan ? summaryReward.feeYuan : 0)}\n                        </Typography>\n                    </Grid>\n                    <Grid display={'flex'} flexDirection={'column'} justifyContent={'space-around'} item sm={3}>\n                        <Typography variant={'body1'} component={'h5'}\n                                    color={'textSecondary'}>{t('labelMiningRewards')}</Typography>\n                        <Typography variant={'h4'} marginTop={1}>\n                            {summaryReward === undefined ? 'N/A' : currency === Currency.dollar ? PriceTag.Dollar\n                                + getThousandFormattedNumbers(summaryReward.rewardDollar ? summaryReward.rewardDollar : 0)\n                                : PriceTag.Yuan\n                                + getThousandFormattedNumbers(summaryReward.rewardYuan ? summaryReward.rewardYuan : 0)}\n                        </Typography>\n                    </Grid>\n                </StyleWrapper>\n                <StyleWrapper container marginY={2} height={340}>\n                    <StyledBtnGroupWrapper display={'flex'} padding={3} justifyContent={'space-between'}>\n                        <Typography variant={'body1'} component={'h5'}\n                                    color={'textSecondary'}>{t('labelLiquidityValue')}</Typography>\n                        <Box marginRight={-1}>\n                            <ToggleButtonGroup exclusive size=\"small\" {...{\n                                ...rest,\n                                t,\n                                data: toggleData,\n                                value: chartPeriod,\n                                setValue: setChartPeriod\n                            }} />\n                        </Box>\n                    </StyledBtnGroupWrapper>\n                    <ScaleAreaChart type={ChartType.Trend} data={[]}/>\n                </StyleWrapper>\n                <Typography paddingLeft={2} variant={'h4'}>{t('labelMyAmm')}</Typography>\n                <TableWrapStyled container marginY={2} paddingY={2} flex={1} height={568}>\n                    <Grid item xs={12} display={'flex'} flexDirection={'column'}>\n                        <MyPoolTable\n                            rawData={myPoolRow}\n                            pagination={{pageSize: 5}}\n                            handleDeposit={(row: any) => {\n                                console.log()\n                            }}\n                            handleWithdraw={(row: any) => {\n                                console.log()\n                            }}\n                            handlePageChange={() => {\n                            }}\n                        />\n                    </Grid>\n                </TableWrapStyled>\n                <Typography paddingLeft={2} variant={'h4'}>{t('labelMyAmmRecord')}</Typography>\n                <TableWrapStyled container marginTop={2} paddingY={2} flex={1}>\n                    <Grid item xs={12} display={'flex'} flexDirection={'column'}>\n                        <AmmRecordTable rawData={myAmmMarketArray} handlePageChange={_handlePageChange} page={page}/>\n                    </Grid>\n                </TableWrapStyled>\n            </>\n        )\n    })","import { useRouteMatch } from 'react-router'\n\nimport { Box } from '@material-ui/core'\nimport {\n    SubMenu,\n    SubMenuList as BasicSubMenuList,\n} from '@loopring-web/component-lib'\nimport { withTranslation } from 'react-i18next'\nimport { subMenuLiquidity } from '@loopring-web/component-lib/src/static-resource'\nimport { PoolsPanel } from './PoolsPanel'\nimport { CoinPairPanel } from './CoinPairPanel';\nimport { AmmMiningView } from './AmmMining';\nimport { LiquidityOverview } from './LiquidityOverview'\nimport { useAmmPool } from './hook';\n\nexport const subMenu = subMenuLiquidity\n\nconst SubMenuList = withTranslation(['layout','common'], { withRef: true })(BasicSubMenuList);\nexport const LiquidityPage = () => {\n\n    // const { ammFee } = useAmmPool('LRC', 'ETH')\n    //\n    // console.log('--- > ammFee:', ammFee)\n    //\n    const {ammActivityMap} = useAmmPool();\n    let match: any = useRouteMatch(['/liquidity/:item',':next/']);\n    const selected = match?.params.item ?? 'pools'\n    let matchPair: any = useRouteMatch(['/liquidity/:item/:next/:symbol']);\n    let symbol:any = undefined\n    if (matchPair && matchPair?.params?.next && matchPair.params.item === 'pools') {\n       if(!matchPair.params.symbol){\n           symbol='LRC-ETH';\n       }else{\n           symbol=matchPair.params.symbol;\n       }\n    }\n    \n    return (\n        <>\n            { symbol && <Box display={'flex'} flexDirection={'column'}  flex={1} alignSelf={'flex-start'}>\n              <CoinPairPanel ammActivityMap={ammActivityMap}/>\n            </Box>\n            }\n            {!symbol && <>  <Box width={'200px'} display={'flex'} justifyContent={'stretch'} marginRight={3} marginBottom={3}>\n                    <SubMenu>\n                        <SubMenuList selected={selected} subMenu={subMenu as any} />\n                    </SubMenu>\n                </Box>\n                <Box  minHeight={420}  display={'flex'} alignItems={'stretch'} justifyContent={'stretch'} flexDirection=\"column\" marginTop={0} flex={1} marginBottom={3}>\n                    {(selected === 'pools' && !symbol ) && <PoolsPanel ammActivityMap={ammActivityMap}/>}\n                    {(selected === 'amm-mining' && !symbol ) && <AmmMiningView ammActivityMap={ammActivityMap}/>}\n                    {(selected === 'my-liquidity' && !symbol ) && <LiquidityOverview ammActivityMap={ammActivityMap}/>}\n                    {selected === 'orderBook-Mining' && <AmmMiningView ammActivityMap={ammActivityMap}/>}\n                    {/*{selected === 'orders' && <OrderPanel />}*/}\n                </Box>\n             </>\n            }\n        </>\n    )\n\n}\n","import React from 'react';\nimport { useAmmActivityMap } from '../../stores/Amm/AmmActivityMap';\n\nimport { AmmPoolActivityRule, LoopringMap } from 'loopring-sdk';\nimport { useAccount } from '../../stores/account/hook';\nimport { useUserRewards } from '../../stores/userRewards';\nimport { useAmmMap } from '../../stores/Amm/AmmMap';\n\nexport const useAmmPool = <R extends {[key:string]:any},I extends {[key:string]:any}>()=>{\n    const AmmActivityMapState  = useAmmActivityMap()\n    const {updateUserRewards}  = useUserRewards()\n    const {account} = useAccount();\n    const {ammMap,updateAmmMap} = useAmmMap();\n    const [ammActivityMap,setAmmActivityMap] = React.useState<LoopringMap<LoopringMap<AmmPoolActivityRule[]>>|undefined>(AmmActivityMapState.ammActivityMap)\n    // init AmmMap at begin\n    React.useEffect(() => {\n        if (!ammMap || Object.keys(ammMap).length === 0) {\n            updateAmmMap();\n        }\n    }, []);\n    React.useEffect(() => {\n        switch (AmmActivityMapState.status) {\n            case \"ERROR\":\n                AmmActivityMapState.statusUnset();\n                // setState('ERROR')\n                //TODO: show error at button page show error  some retry dispath again\n                break;\n            case \"DONE\":\n                AmmActivityMapState.statusUnset();\n                setAmmActivityMap(AmmActivityMapState.ammActivityMap)\n                break;\n            default:\n                break;\n\n        }\n    }, [AmmActivityMapState.status])\n\n    //TODO tickMap\n    React.useEffect(() => {\n        if(account.accountId){\n            updateUserRewards()\n        }\n    }, [account.accountId])\n\n    return {\n        ammActivityMap\n    }\n\n}\n\n","import { HashRouter as Router, Route, Switch, } from 'react-router-dom'\n\nimport Header from 'layouts/header'\n\nimport QuotePage from 'pages/QuotePage'\nimport { SwapPage } from 'pages/SwapPage'\n\nimport DebugPage from 'pages/DebugPage'\n\nimport Container from '@material-ui/core/Container'\nimport { Box } from '@material-ui/core'\nimport { DevWrapper } from '../provider/'\nimport { Layer2Page } from '../pages/Layer2Page'\nimport { LiquidityPage } from '../pages/LiquidityPage'\n\nconst RouterView = () => {\n    \n    return <Router>\n        <Header />\n\n        {/*<Box style={{marginTop: `var(--header-height)`}} flex={1} display={'flex'}>*/}\n        <Container maxWidth=\"lg\" style={{minHeight:'calc(100% - 64px - 32px)',display:'flex',flexDirection:'column'}}>\n            {/*style={{height: '100%' }}*/}\n            <Box display={'flex'} flex={1} alignItems={'stretch'} flexDirection={'row'} marginTop={3}  >\n                <Switch>\n                    <Route exact component={SwapPage} path='/'/>\n                    <Route exact component={QuotePage} path='/markets'/>\n                    <Route component={SwapPage} path='/trading/lite'/>\n                    <Route component={SwapPage} path='/trading/lite(/:symbol)'/>\n\n                    <Route exact component={Layer2Page} path='/layer2'/>\n                    <Route exact component={Layer2Page} path='/layer2/assets'/>\n                    <Route exact component={Layer2Page} path='/layer2/transactions'/>\n                    <Route exact component={Layer2Page} path='/layer2/trades'/>\n                    <Route exact component={Layer2Page} path='/layer2/orders'/>\n                    <Route exact component={Layer2Page} path='/layer2/setting'/>\n\n                    <Route exact component={LiquidityPage} path='/liquidity'/>\n                    <Route exact component={LiquidityPage} path='/liquidity/pools/*'/>\n                    <Route exact component={LiquidityPage} path='/liquidity/pools'/>\n                    {/*<Route exact component={LiquidityPage} path='/liquidity/pools/coinPair(/:symbol)'/>*/}\n                    <Route exact component={LiquidityPage} path='/liquidity/amm-mining'/>\n                    <Route exact component={LiquidityPage} path='/liquidity/my-liquidity'/>\n                    <Route exact component={LiquidityPage} path='/liquidity/orderBook-Mining'/>\n                    <Route exact component={LiquidityPage} path='/liquidity/maker-rebates'/>\n\n                    <DevWrapper>\n                        <Route exact path='/debug'>\n                            <DebugPage/>\n                        </Route>\n                    </DevWrapper>\n\n                </Switch>\n            </Box>\n        </Container>\n        {/*</Box>*/}\n\n    </Router>\n}\n\nexport default RouterView\n","import { WsAPI, ExchangeAPI, AmmpoolAPI, UserAPI, DEFAULT_TIMEOUT, } from 'loopring-sdk'\nimport store, { RootState } from 'stores'\nimport { useSelector } from 'react-redux'\n\nimport { useMemo } from 'react'\n\nfunction useApi(ApiClass: any, timeout = DEFAULT_TIMEOUT) {\n    // const chainId = store.getState().trading.chainId\n    // return new ApiClass(chainId, timeout)\n\n  const { chainId, } = useSelector((state: RootState) => state.trading)\n\n  const genApi = () => {\n      if (!chainId) {\n          return undefined\n      }\n\n      return new ApiClass(chainId, timeout)\n  }\n\n  const api = useMemo(genApi, [ApiClass, chainId, timeout])\n\n  return api\n}\n\nexport function useWsAPI() {\n    return useApi(WsAPI) as WsAPI\n}\n\nexport function useExchangeAPI() {\n    return useApi(ExchangeAPI) as ExchangeAPI\n}\n\nexport function useAmmpoolAPI() {\n    return useApi(AmmpoolAPI) as AmmpoolAPI\n}\n\nexport function useUserAPI() {\n    return useApi(UserAPI) as UserAPI\n}\n"],"sourceRoot":""}